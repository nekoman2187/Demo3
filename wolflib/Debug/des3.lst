   1                             		.file	"des3.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.rotlFixed,"ax",@progbits
   6                             	_rotlFixed:
   7                             	.LFB1:
   8                             		.file 1 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfcrypt/src/misc.c"
   1:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* misc.c
   2:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   3:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   5:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * This file is part of wolfSSL.
   6:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   7:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * it under the terms of the GNU General Public License as published by
   9:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * (at your option) any later version.
  11:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  12:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * GNU General Public License for more details.
  16:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  17:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * You should have received a copy of the GNU General Public License
  18:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * along with this program; if not, write to the Free Software
  19:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  21:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /*
  22:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  23:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** DESCRIPTION
  24:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** This module implements the arithmetic-shift right, left, byte swapping, XOR,
  25:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** masking and clearing memory logic.
  26:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  27:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** */
  28:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef HAVE_CONFIG_H
  29:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <config.h>
  30:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  31:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  32:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/settings.h>
  33:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  34:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLF_CRYPT_MISC_C
  35:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #define WOLF_CRYPT_MISC_C
  36:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  37:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/misc.h>
  38:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  39:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* inlining these functions is a huge speed increase and a small size decrease,
  40:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    because the functions are smaller than function call setup/cleanup, e.g.,
  41:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    md5 benchmark is twice as fast with inline.  If you don't want it, then
  42:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    define NO_INLINE and compile this file into wolfssl, otherwise it's used as
  43:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    a source header
  44:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  45:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  46:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef NO_INLINE
  47:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC
  48:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  49:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC static
  50:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  51:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  52:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* Check for if compiling misc.c when not needed. */
  53:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if !defined(WOLFSSL_MISC_INCLUDED) && !defined(NO_INLINE)
  54:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_IGNORE_FILE_WARN
  55:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #warning misc.c does not need to be compiled when using inline (NO_INLINE not defined)
  56:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
  57:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  58:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  59:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  60:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  61:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__ICCARM__)
  62:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <intrinsics.h>
  63:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  64:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  65:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  66:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef INTEL_INTRINSICS
  67:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  68:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <stdlib.h>      /* get intrinsic definitions */
  69:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  70:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* for non visual studio probably need no long version, 32 bit only
  71:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****      * i.e., _rotl and _rotr */
  72:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #pragma intrinsic(_lrotl, _lrotr)
  73:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  74:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  75:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  76:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotl(x, y) : x;
  77:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  78:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  79:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
  80:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  81:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotr(x, y) : x;
  82:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  83:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  84:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
  85:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  86:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <builtin.h>      /* get intrinsic definitions */
  87:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  88:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if !defined(NO_INLINE)
  89:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  90:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotlFixed(x, y) _builtin_rotl(x, y)
  91:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  92:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotrFixed(x, y) _builtin_rotr(x, y)
  93:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  94:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #else /* create real function */
  95:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  96:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  97:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  98:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotl(x, y);
  99:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 100:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 101:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 102:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 103:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotr(x, y);
 104:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 105:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 106:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 107:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 108:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else /* generic */
 109:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value. */
 110:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 111:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
 112:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
   9                             		.loc 1 112 5
  10 0000 6E 7A                   		pushm	r7-r10
  11                             	.LCFI0:
  12 0002 71 0A F8                		add	#-8, r0, r10
  13                             	.LCFI1:
  14 0005 EF A0                   		mov.L	r10, r0
  15 0007 E3 A1                   		mov.L	r1, [r10]
  16 0009 E7 A2 01                		mov.L	r2, 4[r10]
 113:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x << y) | (x >> (sizeof(y) * 8 - y));
  17                             		.loc 1 113 25
  18 000c EC A4                   		mov.L	[r10], r4
  19 000e ED A5 01                		mov.L	4[r10], r5
  20 0011 EF 47                   		mov.L	r4, r7
  21 0013 FD 66 57                		rotl	r5, r7
  22 0016 EF 75                   		mov.L	r7, r5
 114:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  23                             		.loc 1 114 5
  24 0018 EF 51                   		mov.L	r5, r1
  25 001a 3F 7A 06                		rtsd	#24, r7-r10
  26                             	.LFE1:
  28                             		.section	.text.rotrFixed,"ax",@progbits
  30                             	_rotrFixed:
  31                             	.LFB2:
 115:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 116:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value. */
 117:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 118:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  32                             		.loc 1 118 5
  33 0000 6E 7A                   		pushm	r7-r10
  34                             	.LCFI2:
  35 0002 71 0A F8                		add	#-8, r0, r10
  36                             	.LCFI3:
  37 0005 EF A0                   		mov.L	r10, r0
  38 0007 E3 A1                   		mov.L	r1, [r10]
  39 0009 E7 A2 01                		mov.L	r2, 4[r10]
 119:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x >> y) | (x << (sizeof(y) * 8 - y));
  40                             		.loc 1 119 25
  41 000c EC A4                   		mov.L	[r10], r4
  42 000e ED A5 01                		mov.L	4[r10], r5
  43 0011 EF 47                   		mov.L	r4, r7
  44 0013 FD 64 57                		rotr	r5, r7
  45 0016 EF 75                   		mov.L	r7, r5
 120:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  46                             		.loc 1 120 5
  47 0018 EF 51                   		mov.L	r5, r1
  48 001a 3F 7A 06                		rtsd	#24, r7-r10
  49                             	.LFE2:
  51                             		.section	.text.ByteReverseWord32,"ax",@progbits
  53                             	_ByteReverseWord32:
  54                             	.LFB3:
 121:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 122:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 123:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 124:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef WC_RC2
 125:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 126:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value */
 127:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotlFixed16(word16 x, word16 y)
 128:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 129:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 130:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 131:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 132:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 133:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value */
 134:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotrFixed16(word16 x, word16 y)
 135:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 136:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 137:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 138:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 139:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WC_RC2 */
 140:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 141:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of 32-bit word value. */
 142:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__CCRX__) && !defined(NO_INLINE) /* shortest version for CC-RX */
 143:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define ByteReverseWord32(value) _builtin_revl(value)
 144:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 145:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
 146:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
  55                             		.loc 1 146 1
  56 0000 7E AA                   		push.l	r10
  57                             	.LCFI4:
  58 0002 71 0A FC                		add	#-4, r0, r10
  59                             	.LCFI5:
  60 0005 EF A0                   		mov.L	r10, r0
  61 0007 E3 A1                   		mov.L	r1, [r10]
 147:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef PPC_INTRINSICS
 148:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* PPC: load reverse indexed instruction */
 149:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__lwbrx(&value,0);
 150:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__ICCARM__)
 151:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__REV(value);
 152:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(KEIL_INTRINSICS)
 153:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__rev(value);
 154:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
 155:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)_builtin_revl(value);
 156:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLF_ALLOW_BUILTIN) && \
 157:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 158:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__builtin_bswap32(value);
 159:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 160:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       defined(__aarch64__)
 161:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 162:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV32 %0, %0  \n"
 163:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 164:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 165:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 166:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 167:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 168:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       (defined(__thumb__) || defined(__arm__))
 169:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 170:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV %0, %0  \n"
 171:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 172:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 173:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 174:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 175:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(FAST_ROTATE)
 176:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 5 instructions with rotate instruction, 9 without */
 177:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (rotrFixed(value, 8U) & 0xff00ff00) |
 178:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****            (rotlFixed(value, 8U) & 0x00ff00ff);
 179:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 180:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 6 instructions with rotate instruction, 8 without */
 181:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  62                             		.loc 1 181 35
  63 0009 EC A5                   		mov.L	[r10], r5
  64 000b 68 85                   		shlr	#8, r5
  65 000d FB 42 FF 00 FF 00       		mov.L	#0xff00ff, r4
  66 0013 53 54                   		and	r5, r4
  67                             		.loc 1 181 65
  68 0015 EC A5                   		mov.L	[r10], r5
  69 0017 6C 85                   		shll	#8, r5
  70 0019 74 25 00 FF 00 FF       		and	#-16711936, r5
  71                             		.loc 1 181 11
  72 001f 57 45                   		or	r4, r5
  73 0021 E3 A5                   		mov.L	r5, [r10]
 182:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed(value, 16U);
  74                             		.loc 1 182 12
  75 0023 75 42 10                		mov.L	#16, r2
  76 0026 EC A1                   		mov.L	[r10], r1
  77 0028 05 00 00 00             		bsr	_rotlFixed
  78 002c EF 15                   		mov.L	r1, r5
 183:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 184:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
  79                             		.loc 1 184 1
  80 002e EF 51                   		mov.L	r5, r1
  81 0030 3F AA 02                		rtsd	#8, r10-r10
  82                             	.LFE3:
  84                             		.section	.text.XorWords,"ax",@progbits
  86                             	_XorWords:
  87                             	.LFB11:
 185:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* __CCRX__ */
 186:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of words array of a given count. */
 187:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
 188:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                     word32 byteCount)
 189:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 190:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word32), i;
 191:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 193:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
 194:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 195:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 196:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 197:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WORD64_AVAILABLE) && !defined(WOLFSSL_NO_WORD64_OPS)
 198:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 199:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 200:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotlFixed64(word64 x, word64 y)
 201:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 202:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 203:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 204:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 205:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 206:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotrFixed64(word64 x, word64 y)
 207:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 208:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 209:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 210:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 211:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 212:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 ByteReverseWord64(word64 value)
 213:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 214:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WOLF_ALLOW_BUILTIN) && defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 215:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)__builtin_bswap64(value);
 216:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFCRYPT_SLOW_WORD64)
 217:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)((word64)ByteReverseWord32((word32) value)) << 32 |
 218:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         (word64)ByteReverseWord32((word32)(value   >> 32));
 219:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 220:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFF00FF00FF00FF00)) >> 8) |
 221:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x00FF00FF00FF00FF)) << 8);
 222:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFFFF0000FFFF0000)) >> 16) |
 223:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x0000FFFF0000FFFF)) << 16);
 224:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed64(value, 32U);
 225:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 226:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 227:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 228:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 229:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords64(word64* out, const word64* in,
 230:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                       word32 byteCount)
 231:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 232:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word64), i;
 233:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 235:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 236:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 237:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 238:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 239:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WORD64_AVAILABLE && !WOLFSSL_NO_WORD64_OPS */
 240:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 241:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_XOR_OPS
 242:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 243:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 244:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWordsOut(wolfssl_word* r, const wolfssl_word* a,
 245:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                      const wolfssl_word* b, word32 n)
 246:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 247:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 248:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 249:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] = a[i] ^ b[i];
 250:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 251:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 252:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 253:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 254:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 255:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbufout(void*out, const void* buf, const void* mask,
 256:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                    word32 count)
 257:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 258:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)out | (wc_ptr_t)buf | (wc_ptr_t)mask | count) %
 259:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                          WOLFSSL_WORD_SIZE == 0)
 260:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWordsOut( (wolfssl_word*)out, (wolfssl_word*)buf,
 261:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                      (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 262:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 263:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 264:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       o = (byte*)out;
 265:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 266:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 267:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) o[i] = b[i] ^ m[i];
 269:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 270:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 271:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 272:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 273:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 274:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWords(wolfssl_word* r, const wolfssl_word* a, word32 n)
 275:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
  88                             		.loc 1 275 1
  89 0000 7E AA                   		push.l	r10
  90                             	.LCFI6:
  91 0002 71 0A F0                		add	#-16, r0, r10
  92                             	.LCFI7:
  93 0005 EF A0                   		mov.L	r10, r0
  94 0007 E7 A1 01                		mov.L	r1, 4[r10]
  95 000a E7 A2 02                		mov.L	r2, 8[r10]
  96 000d E7 A3 03                		mov.L	r3, 12[r10]
 276:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 277:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 278:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] ^= a[i];
  97                             		.loc 1 278 12
  98 0010 F8 A6 00                		mov.L	#0, [r10]
  99                             		.loc 1 278 5
 100 0013 2E 2E                   		bra	.L8
 101                             	.L9:
 102                             		.loc 1 278 34 discriminator 3
 103 0015 EC A5                   		mov.L	[r10], r5
 104 0017 6C 25                   		shll	#2, r5
 105 0019 ED A4 01                		mov.L	4[r10], r4
 106 001c 4B 45                   		add	r4, r5
 107 001e EC 52                   		mov.L	[r5], r2
 108                             		.loc 1 278 38 discriminator 3
 109 0020 EC A5                   		mov.L	[r10], r5
 110 0022 6C 25                   		shll	#2, r5
 111 0024 ED A4 02                		mov.L	8[r10], r4
 112 0027 4B 45                   		add	r4, r5
 113 0029 EC 53                   		mov.L	[r5], r3
 114                             		.loc 1 278 34 discriminator 3
 115 002b EC A5                   		mov.L	[r10], r5
 116 002d 6C 25                   		shll	#2, r5
 117 002f ED A4 01                		mov.L	4[r10], r4
 118 0032 4B 45                   		add	r4, r5
 119 0034 EF 24                   		mov.L	r2, r4
 120 0036 FC 37 34                		xor	r3, r4
 121 0039 E3 54                   		mov.L	r4, [r5]
 122                             		.loc 1 278 25 discriminator 3
 123 003b EC A5                   		mov.L	[r10], r5
 124 003d 62 15                   		add	#1, r5
 125 003f E3 A5                   		mov.L	r5, [r10]
 126                             	.L8:
 127                             		.loc 1 278 5 discriminator 1
 128 0041 EC A4                   		mov.L	[r10], r4
 129 0043 ED A5 03                		mov.L	12[r10], r5
 130 0046 47 54                   		cmp	r5, r4
 131 0048 23 CD                   		bltu	.L9
 279:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 132                             		.loc 1 279 1
 133 004a 03                      		nop
 134 004b 3F AA 05                		rtsd	#20, r10-r10
 135                             	.LFE11:
 137                             		.section	.text.xorbuf,"ax",@progbits
 139                             	_xorbuf:
 140                             	.LFB12:
 280:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 281:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 282:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 283:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 284:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
 285:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 141                             		.loc 1 285 1
 142 0000 7E AA                   		push.l	r10
 143                             	.LCFI8:
 144 0002 71 0A E8                		add	#-24, r0, r10
 145                             	.LCFI9:
 146 0005 EF A0                   		mov.L	r10, r0
 147 0007 E7 A1 03                		mov.L	r1, 12[r10]
 148 000a E7 A2 04                		mov.L	r2, 16[r10]
 149 000d E7 A3 05                		mov.L	r3, 20[r10]
 286:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)buf | (wc_ptr_t)mask | count) % WOLFSSL_WORD_SIZE == 0)
 150                             		.loc 1 286 10
 151 0010 ED A4 03                		mov.L	12[r10], r4
 152                             		.loc 1 286 26
 153 0013 ED A5 04                		mov.L	16[r10], r5
 154                             		.loc 1 286 24
 155 0016 57 45                   		or	r4, r5
 156                             		.loc 1 286 41
 157 0018 ED A4 05                		mov.L	20[r10], r4
 158 001b 57 45                   		or	r4, r5
 159                             		.loc 1 286 50
 160 001d 64 35                   		and	#3, r5
 161                             		.loc 1 286 8
 162 001f 61 05                   		cmp	#0, r5
 163 0021 21 15                   		bne	.L11
 287:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWords( (wolfssl_word*)buf,
 164                             		.loc 1 287 9
 165 0023 ED A5 05                		mov.L	20[r10], r5
 166 0026 68 25                   		shlr	#2, r5
 167 0028 EF 53                   		mov.L	r5, r3
 168 002a ED A2 04                		mov.L	16[r10], r2
 169 002d ED A1 03                		mov.L	12[r10], r1
 170 0030 05 00 00 00             		bsr	_XorWords
 288:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                   (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 289:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 290:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 291:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 292:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 293:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) b[i] ^= m[i];
 295:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 296:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 171                             		.loc 1 296 1
 172 0034 2E 3D                   		bra	.L15
 173                             	.L11:
 174                             	.LBB2:
 291:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 175                             		.loc 1 291 21
 176 0036 ED A5 03                		mov.L	12[r10], r5
 177 0039 E7 A5 01                		mov.L	r5, 4[r10]
 292:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 178                             		.loc 1 292 21
 179 003c ED A5 04                		mov.L	16[r10], r5
 180 003f E7 A5 02                		mov.L	r5, 8[r10]
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 181                             		.loc 1 294 16
 182 0042 F8 A6 00                		mov.L	#0, [r10]
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 183                             		.loc 1 294 9
 184 0045 2E 23                   		bra	.L13
 185                             	.L14:
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 186                             		.loc 1 294 42 discriminator 3
 187 0047 ED A5 01                		mov.L	4[r10], r5
 188 004a 06 88 A5                		add	[r10].L, r5
 189 004d CC 53                   		mov.B	[r5], r3
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 190                             		.loc 1 294 46 discriminator 3
 191 004f ED A5 02                		mov.L	8[r10], r5
 192 0052 06 88 A5                		add	[r10].L, r5
 193 0055 CC 54                   		mov.B	[r5], r4
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 194                             		.loc 1 294 42 discriminator 3
 195 0057 ED A5 01                		mov.L	4[r10], r5
 196 005a 06 88 A5                		add	[r10].L, r5
 197 005d FC 37 34                		xor	r3, r4
 198 0060 C3 54                   		mov.B	r4, [r5]
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 199                             		.loc 1 294 33 discriminator 3
 200 0062 EC A5                   		mov.L	[r10], r5
 201 0064 62 15                   		add	#1, r5
 202 0066 E3 A5                   		mov.L	r5, [r10]
 203                             	.L13:
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 204                             		.loc 1 294 9 discriminator 1
 205 0068 EC A4                   		mov.L	[r10], r4
 206 006a ED A5 05                		mov.L	20[r10], r5
 207 006d 47 54                   		cmp	r5, r4
 208 006f 23 D8                   		bltu	.L14
 209                             	.L15:
 210                             	.LBE2:
 211                             		.loc 1 296 1
 212 0071 03                      		nop
 213 0072 3F AA 07                		rtsd	#28, r10-r10
 214                             	.LFE12:
 216                             		.section	.rodata.pc1,"a"
 219                             	_pc1:
 220 0000 39                      		.byte	57
 221 0001 31                      		.byte	49
 222 0002 29                      		.byte	41
 223 0003 21                      		.byte	33
 224 0004 19                      		.byte	25
 225 0005 11                      		.byte	17
 226 0006 09                      		.byte	9
 227 0007 01                      		.byte	1
 228 0008 3A                      		.byte	58
 229 0009 32                      		.byte	50
 230 000a 2A                      		.byte	42
 231 000b 22                      		.byte	34
 232 000c 1A                      		.byte	26
 233 000d 12                      		.byte	18
 234 000e 0A                      		.byte	10
 235 000f 02                      		.byte	2
 236 0010 3B                      		.byte	59
 237 0011 33                      		.byte	51
 238 0012 2B                      		.byte	43
 239 0013 23                      		.byte	35
 240 0014 1B                      		.byte	27
 241 0015 13                      		.byte	19
 242 0016 0B                      		.byte	11
 243 0017 03                      		.byte	3
 244 0018 3C                      		.byte	60
 245 0019 34                      		.byte	52
 246 001a 2C                      		.byte	44
 247 001b 24                      		.byte	36
 248 001c 3F                      		.byte	63
 249 001d 37                      		.byte	55
 250 001e 2F                      		.byte	47
 251 001f 27                      		.byte	39
 252 0020 1F                      		.byte	31
 253 0021 17                      		.byte	23
 254 0022 0F                      		.byte	15
 255 0023 07                      		.byte	7
 256 0024 3E                      		.byte	62
 257 0025 36                      		.byte	54
 258 0026 2E                      		.byte	46
 259 0027 26                      		.byte	38
 260 0028 1E                      		.byte	30
 261 0029 16                      		.byte	22
 262 002a 0E                      		.byte	14
 263 002b 06                      		.byte	6
 264 002c 3D                      		.byte	61
 265 002d 35                      		.byte	53
 266 002e 2D                      		.byte	45
 267 002f 25                      		.byte	37
 268 0030 1D                      		.byte	29
 269 0031 15                      		.byte	21
 270 0032 0D                      		.byte	13
 271 0033 05                      		.byte	5
 272 0034 1C                      		.byte	28
 273 0035 14                      		.byte	20
 274 0036 0C                      		.byte	12
 275 0037 04                      		.byte	4
 276                             		.section	.rodata.totrot,"a"
 279                             	_totrot:
 280 0000 01                      		.byte	1
 281 0001 02                      		.byte	2
 282 0002 04                      		.byte	4
 283 0003 06                      		.byte	6
 284 0004 08                      		.byte	8
 285 0005 0A                      		.byte	10
 286 0006 0C                      		.byte	12
 287 0007 0E                      		.byte	14
 288 0008 0F                      		.byte	15
 289 0009 11                      		.byte	17
 290 000a 13                      		.byte	19
 291 000b 15                      		.byte	21
 292 000c 17                      		.byte	23
 293 000d 19                      		.byte	25
 294 000e 1B                      		.byte	27
 295 000f 1C                      		.byte	28
 296                             		.section	.rodata.pc2,"a"
 299                             	_pc2:
 300 0000 0E                      		.byte	14
 301 0001 11                      		.byte	17
 302 0002 0B                      		.byte	11
 303 0003 18                      		.byte	24
 304 0004 01                      		.byte	1
 305 0005 05                      		.byte	5
 306 0006 03                      		.byte	3
 307 0007 1C                      		.byte	28
 308 0008 0F                      		.byte	15
 309 0009 06                      		.byte	6
 310 000a 15                      		.byte	21
 311 000b 0A                      		.byte	10
 312 000c 17                      		.byte	23
 313 000d 13                      		.byte	19
 314 000e 0C                      		.byte	12
 315 000f 04                      		.byte	4
 316 0010 1A                      		.byte	26
 317 0011 08                      		.byte	8
 318 0012 10                      		.byte	16
 319 0013 07                      		.byte	7
 320 0014 1B                      		.byte	27
 321 0015 14                      		.byte	20
 322 0016 0D                      		.byte	13
 323 0017 02                      		.byte	2
 324 0018 29                      		.byte	41
 325 0019 34                      		.byte	52
 326 001a 1F                      		.byte	31
 327 001b 25                      		.byte	37
 328 001c 2F                      		.byte	47
 329 001d 37                      		.byte	55
 330 001e 1E                      		.byte	30
 331 001f 28                      		.byte	40
 332 0020 33                      		.byte	51
 333 0021 2D                      		.byte	45
 334 0022 21                      		.byte	33
 335 0023 30                      		.byte	48
 336 0024 2C                      		.byte	44
 337 0025 31                      		.byte	49
 338 0026 27                      		.byte	39
 339 0027 38                      		.byte	56
 340 0028 22                      		.byte	34
 341 0029 35                      		.byte	53
 342 002a 2E                      		.byte	46
 343 002b 2A                      		.byte	42
 344 002c 32                      		.byte	50
 345 002d 24                      		.byte	36
 346 002e 1D                      		.byte	29
 347 002f 20                      		.byte	32
 348                             		.section	.rodata.bytebit,"a"
 349                             		.balign 4
 352                             	_bytebit:
 353 0000 80 00 00 00             		.long	0x80
 354 0004 40 00 00 00             		.long	0x40
 355 0008 20 00 00 00             		.long	32
 356 000c 10 00 00 00             		.long	16
 357 0010 08 00 00 00             		.long	8
 358 0014 04 00 00 00             		.long	4
 359 0018 02 00 00 00             		.long	2
 360 001c 01 00 00 00             		.long	1
 361                             		.section	.rodata.Spbox,"a"
 362                             		.balign 4
 365                             	_Spbox:
 366 0000 00 04 01 01             		.long	0x1010400
 367 0004 00 00 00 00             		.long	0
 368 0008 00 00 01 00             		.long	0x10000
 369 000c 04 04 01 01             		.long	0x1010404
 370 0010 04 00 01 01             		.long	0x1010004
 371 0014 04 04 01 00             		.long	0x10404
 372 0018 04 00 00 00             		.long	4
 373 001c 00 00 01 00             		.long	0x10000
 374 0020 00 04 00 00             		.long	0x400
 375 0024 00 04 01 01             		.long	0x1010400
 376 0028 04 04 01 01             		.long	0x1010404
 377 002c 00 04 00 00             		.long	0x400
 378 0030 04 04 00 01             		.long	0x1000404
 379 0034 04 00 01 01             		.long	0x1010004
 380 0038 00 00 00 01             		.long	0x1000000
 381 003c 04 00 00 00             		.long	4
 382 0040 04 04 00 00             		.long	0x404
 383 0044 00 04 00 01             		.long	0x1000400
 384 0048 00 04 00 01             		.long	0x1000400
 385 004c 00 04 01 00             		.long	0x10400
 386 0050 00 04 01 00             		.long	0x10400
 387 0054 00 00 01 01             		.long	0x1010000
 388 0058 00 00 01 01             		.long	0x1010000
 389 005c 04 04 00 01             		.long	0x1000404
 390 0060 04 00 01 00             		.long	0x10004
 391 0064 04 00 00 01             		.long	0x1000004
 392 0068 04 00 00 01             		.long	0x1000004
 393 006c 04 00 01 00             		.long	0x10004
 394 0070 00 00 00 00             		.long	0
 395 0074 04 04 00 00             		.long	0x404
 396 0078 04 04 01 00             		.long	0x10404
 397 007c 00 00 00 01             		.long	0x1000000
 398 0080 00 00 01 00             		.long	0x10000
 399 0084 04 04 01 01             		.long	0x1010404
 400 0088 04 00 00 00             		.long	4
 401 008c 00 00 01 01             		.long	0x1010000
 402 0090 00 04 01 01             		.long	0x1010400
 403 0094 00 00 00 01             		.long	0x1000000
 404 0098 00 00 00 01             		.long	0x1000000
 405 009c 00 04 00 00             		.long	0x400
 406 00a0 04 00 01 01             		.long	0x1010004
 407 00a4 00 00 01 00             		.long	0x10000
 408 00a8 00 04 01 00             		.long	0x10400
 409 00ac 04 00 00 01             		.long	0x1000004
 410 00b0 00 04 00 00             		.long	0x400
 411 00b4 04 00 00 00             		.long	4
 412 00b8 04 04 00 01             		.long	0x1000404
 413 00bc 04 04 01 00             		.long	0x10404
 414 00c0 04 04 01 01             		.long	0x1010404
 415 00c4 04 00 01 00             		.long	0x10004
 416 00c8 00 00 01 01             		.long	0x1010000
 417 00cc 04 04 00 01             		.long	0x1000404
 418 00d0 04 00 00 01             		.long	0x1000004
 419 00d4 04 04 00 00             		.long	0x404
 420 00d8 04 04 01 00             		.long	0x10404
 421 00dc 00 04 01 01             		.long	0x1010400
 422 00e0 04 04 00 00             		.long	0x404
 423 00e4 00 04 00 01             		.long	0x1000400
 424 00e8 00 04 00 01             		.long	0x1000400
 425 00ec 00 00 00 00             		.long	0
 426 00f0 04 00 01 00             		.long	0x10004
 427 00f4 00 04 01 00             		.long	0x10400
 428 00f8 00 00 00 00             		.long	0
 429 00fc 04 00 01 01             		.long	0x1010004
 430 0100 20 80 10 80             		.long	-2146402272
 431 0104 00 80 00 80             		.long	-2147450880
 432 0108 00 80 00 00             		.long	0x8000
 433 010c 20 80 10 00             		.long	0x108020
 434 0110 00 00 10 00             		.long	0x100000
 435 0114 20 00 00 00             		.long	32
 436 0118 20 00 10 80             		.long	-2146435040
 437 011c 20 80 00 80             		.long	-2147450848
 438 0120 20 00 00 80             		.long	-2147483616
 439 0124 20 80 10 80             		.long	-2146402272
 440 0128 00 80 10 80             		.long	-2146402304
 441 012c 00 00 00 80             		.long	-2147483648
 442 0130 00 80 00 80             		.long	-2147450880
 443 0134 00 00 10 00             		.long	0x100000
 444 0138 20 00 00 00             		.long	32
 445 013c 20 00 10 80             		.long	-2146435040
 446 0140 00 80 10 00             		.long	0x108000
 447 0144 20 00 10 00             		.long	0x100020
 448 0148 20 80 00 80             		.long	-2147450848
 449 014c 00 00 00 00             		.long	0
 450 0150 00 00 00 80             		.long	-2147483648
 451 0154 00 80 00 00             		.long	0x8000
 452 0158 20 80 10 00             		.long	0x108020
 453 015c 00 00 10 80             		.long	-2146435072
 454 0160 20 00 10 00             		.long	0x100020
 455 0164 20 00 00 80             		.long	-2147483616
 456 0168 00 00 00 00             		.long	0
 457 016c 00 80 10 00             		.long	0x108000
 458 0170 20 80 00 00             		.long	0x8020
 459 0174 00 80 10 80             		.long	-2146402304
 460 0178 00 00 10 80             		.long	-2146435072
 461 017c 20 80 00 00             		.long	0x8020
 462 0180 00 00 00 00             		.long	0
 463 0184 20 80 10 00             		.long	0x108020
 464 0188 20 00 10 80             		.long	-2146435040
 465 018c 00 00 10 00             		.long	0x100000
 466 0190 20 80 00 80             		.long	-2147450848
 467 0194 00 00 10 80             		.long	-2146435072
 468 0198 00 80 10 80             		.long	-2146402304
 469 019c 00 80 00 00             		.long	0x8000
 470 01a0 00 00 10 80             		.long	-2146435072
 471 01a4 00 80 00 80             		.long	-2147450880
 472 01a8 20 00 00 00             		.long	32
 473 01ac 20 80 10 80             		.long	-2146402272
 474 01b0 20 80 10 00             		.long	0x108020
 475 01b4 20 00 00 00             		.long	32
 476 01b8 00 80 00 00             		.long	0x8000
 477 01bc 00 00 00 80             		.long	-2147483648
 478 01c0 20 80 00 00             		.long	0x8020
 479 01c4 00 80 10 80             		.long	-2146402304
 480 01c8 00 00 10 00             		.long	0x100000
 481 01cc 20 00 00 80             		.long	-2147483616
 482 01d0 20 00 10 00             		.long	0x100020
 483 01d4 20 80 00 80             		.long	-2147450848
 484 01d8 20 00 00 80             		.long	-2147483616
 485 01dc 20 00 10 00             		.long	0x100020
 486 01e0 00 80 10 00             		.long	0x108000
 487 01e4 00 00 00 00             		.long	0
 488 01e8 00 80 00 80             		.long	-2147450880
 489 01ec 20 80 00 00             		.long	0x8020
 490 01f0 00 00 00 80             		.long	-2147483648
 491 01f4 20 00 10 80             		.long	-2146435040
 492 01f8 20 80 10 80             		.long	-2146402272
 493 01fc 00 80 10 00             		.long	0x108000
 494 0200 08 02 00 00             		.long	0x208
 495 0204 00 02 02 08             		.long	0x8020200
 496 0208 00 00 00 00             		.long	0
 497 020c 08 00 02 08             		.long	0x8020008
 498 0210 00 02 00 08             		.long	0x8000200
 499 0214 00 00 00 00             		.long	0
 500 0218 08 02 02 00             		.long	0x20208
 501 021c 00 02 00 08             		.long	0x8000200
 502 0220 08 00 02 00             		.long	0x20008
 503 0224 08 00 00 08             		.long	0x8000008
 504 0228 08 00 00 08             		.long	0x8000008
 505 022c 00 00 02 00             		.long	0x20000
 506 0230 08 02 02 08             		.long	0x8020208
 507 0234 08 00 02 00             		.long	0x20008
 508 0238 00 00 02 08             		.long	0x8020000
 509 023c 08 02 00 00             		.long	0x208
 510 0240 00 00 00 08             		.long	0x8000000
 511 0244 08 00 00 00             		.long	8
 512 0248 00 02 02 08             		.long	0x8020200
 513 024c 00 02 00 00             		.long	0x200
 514 0250 00 02 02 00             		.long	0x20200
 515 0254 00 00 02 08             		.long	0x8020000
 516 0258 08 00 02 08             		.long	0x8020008
 517 025c 08 02 02 00             		.long	0x20208
 518 0260 08 02 00 08             		.long	0x8000208
 519 0264 00 02 02 00             		.long	0x20200
 520 0268 00 00 02 00             		.long	0x20000
 521 026c 08 02 00 08             		.long	0x8000208
 522 0270 08 00 00 00             		.long	8
 523 0274 08 02 02 08             		.long	0x8020208
 524 0278 00 02 00 00             		.long	0x200
 525 027c 00 00 00 08             		.long	0x8000000
 526 0280 00 02 02 08             		.long	0x8020200
 527 0284 00 00 00 08             		.long	0x8000000
 528 0288 08 00 02 00             		.long	0x20008
 529 028c 08 02 00 00             		.long	0x208
 530 0290 00 00 02 00             		.long	0x20000
 531 0294 00 02 02 08             		.long	0x8020200
 532 0298 00 02 00 08             		.long	0x8000200
 533 029c 00 00 00 00             		.long	0
 534 02a0 00 02 00 00             		.long	0x200
 535 02a4 08 00 02 00             		.long	0x20008
 536 02a8 08 02 02 08             		.long	0x8020208
 537 02ac 00 02 00 08             		.long	0x8000200
 538 02b0 08 00 00 08             		.long	0x8000008
 539 02b4 00 02 00 00             		.long	0x200
 540 02b8 00 00 00 00             		.long	0
 541 02bc 08 00 02 08             		.long	0x8020008
 542 02c0 08 02 00 08             		.long	0x8000208
 543 02c4 00 00 02 00             		.long	0x20000
 544 02c8 00 00 00 08             		.long	0x8000000
 545 02cc 08 02 02 08             		.long	0x8020208
 546 02d0 08 00 00 00             		.long	8
 547 02d4 08 02 02 00             		.long	0x20208
 548 02d8 00 02 02 00             		.long	0x20200
 549 02dc 08 00 00 08             		.long	0x8000008
 550 02e0 00 00 02 08             		.long	0x8020000
 551 02e4 08 02 00 08             		.long	0x8000208
 552 02e8 08 02 00 00             		.long	0x208
 553 02ec 00 00 02 08             		.long	0x8020000
 554 02f0 08 02 02 00             		.long	0x20208
 555 02f4 08 00 00 00             		.long	8
 556 02f8 08 00 02 08             		.long	0x8020008
 557 02fc 00 02 02 00             		.long	0x20200
 558 0300 01 20 80 00             		.long	0x802001
 559 0304 81 20 00 00             		.long	0x2081
 560 0308 81 20 00 00             		.long	0x2081
 561 030c 80 00 00 00             		.long	0x80
 562 0310 80 20 80 00             		.long	0x802080
 563 0314 81 00 80 00             		.long	0x800081
 564 0318 01 00 80 00             		.long	0x800001
 565 031c 01 20 00 00             		.long	0x2001
 566 0320 00 00 00 00             		.long	0
 567 0324 00 20 80 00             		.long	0x802000
 568 0328 00 20 80 00             		.long	0x802000
 569 032c 81 20 80 00             		.long	0x802081
 570 0330 81 00 00 00             		.long	0x81
 571 0334 00 00 00 00             		.long	0
 572 0338 80 00 80 00             		.long	0x800080
 573 033c 01 00 80 00             		.long	0x800001
 574 0340 01 00 00 00             		.long	1
 575 0344 00 20 00 00             		.long	0x2000
 576 0348 00 00 80 00             		.long	0x800000
 577 034c 01 20 80 00             		.long	0x802001
 578 0350 80 00 00 00             		.long	0x80
 579 0354 00 00 80 00             		.long	0x800000
 580 0358 01 20 00 00             		.long	0x2001
 581 035c 80 20 00 00             		.long	0x2080
 582 0360 81 00 80 00             		.long	0x800081
 583 0364 01 00 00 00             		.long	1
 584 0368 80 20 00 00             		.long	0x2080
 585 036c 80 00 80 00             		.long	0x800080
 586 0370 00 20 00 00             		.long	0x2000
 587 0374 80 20 80 00             		.long	0x802080
 588 0378 81 20 80 00             		.long	0x802081
 589 037c 81 00 00 00             		.long	0x81
 590 0380 80 00 80 00             		.long	0x800080
 591 0384 01 00 80 00             		.long	0x800001
 592 0388 00 20 80 00             		.long	0x802000
 593 038c 81 20 80 00             		.long	0x802081
 594 0390 81 00 00 00             		.long	0x81
 595 0394 00 00 00 00             		.long	0
 596 0398 00 00 00 00             		.long	0
 597 039c 00 20 80 00             		.long	0x802000
 598 03a0 80 20 00 00             		.long	0x2080
 599 03a4 80 00 80 00             		.long	0x800080
 600 03a8 81 00 80 00             		.long	0x800081
 601 03ac 01 00 00 00             		.long	1
 602 03b0 01 20 80 00             		.long	0x802001
 603 03b4 81 20 00 00             		.long	0x2081
 604 03b8 81 20 00 00             		.long	0x2081
 605 03bc 80 00 00 00             		.long	0x80
 606 03c0 81 20 80 00             		.long	0x802081
 607 03c4 81 00 00 00             		.long	0x81
 608 03c8 01 00 00 00             		.long	1
 609 03cc 00 20 00 00             		.long	0x2000
 610 03d0 01 00 80 00             		.long	0x800001
 611 03d4 01 20 00 00             		.long	0x2001
 612 03d8 80 20 80 00             		.long	0x802080
 613 03dc 81 00 80 00             		.long	0x800081
 614 03e0 01 20 00 00             		.long	0x2001
 615 03e4 80 20 00 00             		.long	0x2080
 616 03e8 00 00 80 00             		.long	0x800000
 617 03ec 01 20 80 00             		.long	0x802001
 618 03f0 80 00 00 00             		.long	0x80
 619 03f4 00 00 80 00             		.long	0x800000
 620 03f8 00 20 00 00             		.long	0x2000
 621 03fc 80 20 80 00             		.long	0x802080
 622 0400 00 01 00 00             		.long	0x100
 623 0404 00 01 08 02             		.long	0x2080100
 624 0408 00 00 08 02             		.long	0x2080000
 625 040c 00 01 00 42             		.long	0x42000100
 626 0410 00 00 08 00             		.long	0x80000
 627 0414 00 01 00 00             		.long	0x100
 628 0418 00 00 00 40             		.long	0x40000000
 629 041c 00 00 08 02             		.long	0x2080000
 630 0420 00 01 08 40             		.long	0x40080100
 631 0424 00 00 08 00             		.long	0x80000
 632 0428 00 01 00 02             		.long	0x2000100
 633 042c 00 01 08 40             		.long	0x40080100
 634 0430 00 01 00 42             		.long	0x42000100
 635 0434 00 00 08 42             		.long	0x42080000
 636 0438 00 01 08 00             		.long	0x80100
 637 043c 00 00 00 40             		.long	0x40000000
 638 0440 00 00 00 02             		.long	0x2000000
 639 0444 00 00 08 40             		.long	0x40080000
 640 0448 00 00 08 40             		.long	0x40080000
 641 044c 00 00 00 00             		.long	0
 642 0450 00 01 00 40             		.long	0x40000100
 643 0454 00 01 08 42             		.long	0x42080100
 644 0458 00 01 08 42             		.long	0x42080100
 645 045c 00 01 00 02             		.long	0x2000100
 646 0460 00 00 08 42             		.long	0x42080000
 647 0464 00 01 00 40             		.long	0x40000100
 648 0468 00 00 00 00             		.long	0
 649 046c 00 00 00 42             		.long	0x42000000
 650 0470 00 01 08 02             		.long	0x2080100
 651 0474 00 00 00 02             		.long	0x2000000
 652 0478 00 00 00 42             		.long	0x42000000
 653 047c 00 01 08 00             		.long	0x80100
 654 0480 00 00 08 00             		.long	0x80000
 655 0484 00 01 00 42             		.long	0x42000100
 656 0488 00 01 00 00             		.long	0x100
 657 048c 00 00 00 02             		.long	0x2000000
 658 0490 00 00 00 40             		.long	0x40000000
 659 0494 00 00 08 02             		.long	0x2080000
 660 0498 00 01 00 42             		.long	0x42000100
 661 049c 00 01 08 40             		.long	0x40080100
 662 04a0 00 01 00 02             		.long	0x2000100
 663 04a4 00 00 00 40             		.long	0x40000000
 664 04a8 00 00 08 42             		.long	0x42080000
 665 04ac 00 01 08 02             		.long	0x2080100
 666 04b0 00 01 08 40             		.long	0x40080100
 667 04b4 00 01 00 00             		.long	0x100
 668 04b8 00 00 00 02             		.long	0x2000000
 669 04bc 00 00 08 42             		.long	0x42080000
 670 04c0 00 01 08 42             		.long	0x42080100
 671 04c4 00 01 08 00             		.long	0x80100
 672 04c8 00 00 00 42             		.long	0x42000000
 673 04cc 00 01 08 42             		.long	0x42080100
 674 04d0 00 00 08 02             		.long	0x2080000
 675 04d4 00 00 00 00             		.long	0
 676 04d8 00 00 08 40             		.long	0x40080000
 677 04dc 00 00 00 42             		.long	0x42000000
 678 04e0 00 01 08 00             		.long	0x80100
 679 04e4 00 01 00 02             		.long	0x2000100
 680 04e8 00 01 00 40             		.long	0x40000100
 681 04ec 00 00 08 00             		.long	0x80000
 682 04f0 00 00 00 00             		.long	0
 683 04f4 00 00 08 40             		.long	0x40080000
 684 04f8 00 01 08 02             		.long	0x2080100
 685 04fc 00 01 00 40             		.long	0x40000100
 686 0500 10 00 00 20             		.long	0x20000010
 687 0504 00 00 40 20             		.long	0x20400000
 688 0508 00 40 00 00             		.long	0x4000
 689 050c 10 40 40 20             		.long	0x20404010
 690 0510 00 00 40 20             		.long	0x20400000
 691 0514 10 00 00 00             		.long	16
 692 0518 10 40 40 20             		.long	0x20404010
 693 051c 00 00 40 00             		.long	0x400000
 694 0520 00 40 00 20             		.long	0x20004000
 695 0524 10 40 40 00             		.long	0x404010
 696 0528 00 00 40 00             		.long	0x400000
 697 052c 10 00 00 20             		.long	0x20000010
 698 0530 10 00 40 00             		.long	0x400010
 699 0534 00 40 00 20             		.long	0x20004000
 700 0538 00 00 00 20             		.long	0x20000000
 701 053c 10 40 00 00             		.long	0x4010
 702 0540 00 00 00 00             		.long	0
 703 0544 10 00 40 00             		.long	0x400010
 704 0548 10 40 00 20             		.long	0x20004010
 705 054c 00 40 00 00             		.long	0x4000
 706 0550 00 40 40 00             		.long	0x404000
 707 0554 10 40 00 20             		.long	0x20004010
 708 0558 10 00 00 00             		.long	16
 709 055c 10 00 40 20             		.long	0x20400010
 710 0560 10 00 40 20             		.long	0x20400010
 711 0564 00 00 00 00             		.long	0
 712 0568 10 40 40 00             		.long	0x404010
 713 056c 00 40 40 20             		.long	0x20404000
 714 0570 10 40 00 00             		.long	0x4010
 715 0574 00 40 40 00             		.long	0x404000
 716 0578 00 40 40 20             		.long	0x20404000
 717 057c 00 00 00 20             		.long	0x20000000
 718 0580 00 40 00 20             		.long	0x20004000
 719 0584 10 00 00 00             		.long	16
 720 0588 10 00 40 20             		.long	0x20400010
 721 058c 00 40 40 00             		.long	0x404000
 722 0590 10 40 40 20             		.long	0x20404010
 723 0594 00 00 40 00             		.long	0x400000
 724 0598 10 40 00 00             		.long	0x4010
 725 059c 10 00 00 20             		.long	0x20000010
 726 05a0 00 00 40 00             		.long	0x400000
 727 05a4 00 40 00 20             		.long	0x20004000
 728 05a8 00 00 00 20             		.long	0x20000000
 729 05ac 10 40 00 00             		.long	0x4010
 730 05b0 10 00 00 20             		.long	0x20000010
 731 05b4 10 40 40 20             		.long	0x20404010
 732 05b8 00 40 40 00             		.long	0x404000
 733 05bc 00 00 40 20             		.long	0x20400000
 734 05c0 10 40 40 00             		.long	0x404010
 735 05c4 00 40 40 20             		.long	0x20404000
 736 05c8 00 00 00 00             		.long	0
 737 05cc 10 00 40 20             		.long	0x20400010
 738 05d0 10 00 00 00             		.long	16
 739 05d4 00 40 00 00             		.long	0x4000
 740 05d8 00 00 40 20             		.long	0x20400000
 741 05dc 10 40 40 00             		.long	0x404010
 742 05e0 00 40 00 00             		.long	0x4000
 743 05e4 10 00 40 00             		.long	0x400010
 744 05e8 10 40 00 20             		.long	0x20004010
 745 05ec 00 00 00 00             		.long	0
 746 05f0 00 40 40 20             		.long	0x20404000
 747 05f4 00 00 00 20             		.long	0x20000000
 748 05f8 10 00 40 00             		.long	0x400010
 749 05fc 10 40 00 20             		.long	0x20004010
 750 0600 00 00 20 00             		.long	0x200000
 751 0604 02 00 20 04             		.long	0x4200002
 752 0608 02 08 00 04             		.long	0x4000802
 753 060c 00 00 00 00             		.long	0
 754 0610 00 08 00 00             		.long	0x800
 755 0614 02 08 00 04             		.long	0x4000802
 756 0618 02 08 20 00             		.long	0x200802
 757 061c 00 08 20 04             		.long	0x4200800
 758 0620 02 08 20 04             		.long	0x4200802
 759 0624 00 00 20 00             		.long	0x200000
 760 0628 00 00 00 00             		.long	0
 761 062c 02 00 00 04             		.long	0x4000002
 762 0630 02 00 00 00             		.long	2
 763 0634 00 00 00 04             		.long	0x4000000
 764 0638 02 00 20 04             		.long	0x4200002
 765 063c 02 08 00 00             		.long	0x802
 766 0640 00 08 00 04             		.long	0x4000800
 767 0644 02 08 20 00             		.long	0x200802
 768 0648 02 00 20 00             		.long	0x200002
 769 064c 00 08 00 04             		.long	0x4000800
 770 0650 02 00 00 04             		.long	0x4000002
 771 0654 00 00 20 04             		.long	0x4200000
 772 0658 00 08 20 04             		.long	0x4200800
 773 065c 02 00 20 00             		.long	0x200002
 774 0660 00 00 20 04             		.long	0x4200000
 775 0664 00 08 00 00             		.long	0x800
 776 0668 02 08 00 00             		.long	0x802
 777 066c 02 08 20 04             		.long	0x4200802
 778 0670 00 08 20 00             		.long	0x200800
 779 0674 02 00 00 00             		.long	2
 780 0678 00 00 00 04             		.long	0x4000000
 781 067c 00 08 20 00             		.long	0x200800
 782 0680 00 00 00 04             		.long	0x4000000
 783 0684 00 08 20 00             		.long	0x200800
 784 0688 00 00 20 00             		.long	0x200000
 785 068c 02 08 00 04             		.long	0x4000802
 786 0690 02 08 00 04             		.long	0x4000802
 787 0694 02 00 20 04             		.long	0x4200002
 788 0698 02 00 20 04             		.long	0x4200002
 789 069c 02 00 00 00             		.long	2
 790 06a0 02 00 20 00             		.long	0x200002
 791 06a4 00 00 00 04             		.long	0x4000000
 792 06a8 00 08 00 04             		.long	0x4000800
 793 06ac 00 00 20 00             		.long	0x200000
 794 06b0 00 08 20 04             		.long	0x4200800
 795 06b4 02 08 00 00             		.long	0x802
 796 06b8 02 08 20 00             		.long	0x200802
 797 06bc 00 08 20 04             		.long	0x4200800
 798 06c0 02 08 00 00             		.long	0x802
 799 06c4 02 00 00 04             		.long	0x4000002
 800 06c8 02 08 20 04             		.long	0x4200802
 801 06cc 00 00 20 04             		.long	0x4200000
 802 06d0 00 08 20 00             		.long	0x200800
 803 06d4 00 00 00 00             		.long	0
 804 06d8 02 00 00 00             		.long	2
 805 06dc 02 08 20 04             		.long	0x4200802
 806 06e0 00 00 00 00             		.long	0
 807 06e4 02 08 20 00             		.long	0x200802
 808 06e8 00 00 20 04             		.long	0x4200000
 809 06ec 00 08 00 00             		.long	0x800
 810 06f0 02 00 00 04             		.long	0x4000002
 811 06f4 00 08 00 04             		.long	0x4000800
 812 06f8 00 08 00 00             		.long	0x800
 813 06fc 02 00 20 00             		.long	0x200002
 814 0700 40 10 00 10             		.long	0x10001040
 815 0704 00 10 00 00             		.long	0x1000
 816 0708 00 00 04 00             		.long	0x40000
 817 070c 40 10 04 10             		.long	0x10041040
 818 0710 00 00 00 10             		.long	0x10000000
 819 0714 40 10 00 10             		.long	0x10001040
 820 0718 40 00 00 00             		.long	0x40
 821 071c 00 00 00 10             		.long	0x10000000
 822 0720 40 00 04 00             		.long	0x40040
 823 0724 00 00 04 10             		.long	0x10040000
 824 0728 40 10 04 10             		.long	0x10041040
 825 072c 00 10 04 00             		.long	0x41000
 826 0730 00 10 04 10             		.long	0x10041000
 827 0734 40 10 04 00             		.long	0x41040
 828 0738 00 10 00 00             		.long	0x1000
 829 073c 40 00 00 00             		.long	0x40
 830 0740 00 00 04 10             		.long	0x10040000
 831 0744 40 00 00 10             		.long	0x10000040
 832 0748 00 10 00 10             		.long	0x10001000
 833 074c 40 10 00 00             		.long	0x1040
 834 0750 00 10 04 00             		.long	0x41000
 835 0754 40 00 04 00             		.long	0x40040
 836 0758 40 00 04 10             		.long	0x10040040
 837 075c 00 10 04 10             		.long	0x10041000
 838 0760 40 10 00 00             		.long	0x1040
 839 0764 00 00 00 00             		.long	0
 840 0768 00 00 00 00             		.long	0
 841 076c 40 00 04 10             		.long	0x10040040
 842 0770 40 00 00 10             		.long	0x10000040
 843 0774 00 10 00 10             		.long	0x10001000
 844 0778 40 10 04 00             		.long	0x41040
 845 077c 00 00 04 00             		.long	0x40000
 846 0780 40 10 04 00             		.long	0x41040
 847 0784 00 00 04 00             		.long	0x40000
 848 0788 00 10 04 10             		.long	0x10041000
 849 078c 00 10 00 00             		.long	0x1000
 850 0790 40 00 00 00             		.long	0x40
 851 0794 40 00 04 10             		.long	0x10040040
 852 0798 00 10 00 00             		.long	0x1000
 853 079c 40 10 04 00             		.long	0x41040
 854 07a0 00 10 00 10             		.long	0x10001000
 855 07a4 40 00 00 00             		.long	0x40
 856 07a8 40 00 00 10             		.long	0x10000040
 857 07ac 00 00 04 10             		.long	0x10040000
 858 07b0 40 00 04 10             		.long	0x10040040
 859 07b4 00 00 00 10             		.long	0x10000000
 860 07b8 00 00 04 00             		.long	0x40000
 861 07bc 40 10 00 10             		.long	0x10001040
 862 07c0 00 00 00 00             		.long	0
 863 07c4 40 10 04 10             		.long	0x10041040
 864 07c8 40 00 04 00             		.long	0x40040
 865 07cc 40 00 00 10             		.long	0x10000040
 866 07d0 00 00 04 10             		.long	0x10040000
 867 07d4 00 10 00 10             		.long	0x10001000
 868 07d8 40 10 00 10             		.long	0x10001040
 869 07dc 00 00 00 00             		.long	0
 870 07e0 40 10 04 10             		.long	0x10041040
 871 07e4 00 10 04 00             		.long	0x41000
 872 07e8 00 10 04 00             		.long	0x41000
 873 07ec 40 10 00 00             		.long	0x1040
 874 07f0 40 10 00 00             		.long	0x1040
 875 07f4 40 00 04 00             		.long	0x40040
 876 07f8 00 00 00 10             		.long	0x10000000
 877 07fc 00 10 04 10             		.long	0x10041000
 878                             		.section	.text.IPERM,"ax",@progbits
 880                             	_IPERM:
 881                             	.LFB43:
 882                             		.file 2 "../src/wolfcrypt/src/des3.c"
   1:../src/wolfcrypt/src/des3.c **** /* des3.c
   2:../src/wolfcrypt/src/des3.c ****  *
   3:../src/wolfcrypt/src/des3.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/des3.c ****  *
   5:../src/wolfcrypt/src/des3.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/des3.c ****  *
   7:../src/wolfcrypt/src/des3.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/des3.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/des3.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/des3.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/des3.c ****  *
  12:../src/wolfcrypt/src/des3.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/des3.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/des3.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/des3.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/des3.c ****  *
  17:../src/wolfcrypt/src/des3.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/des3.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/des3.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/des3.c ****  */
  21:../src/wolfcrypt/src/des3.c **** 
  22:../src/wolfcrypt/src/des3.c **** 
  23:../src/wolfcrypt/src/des3.c **** #ifdef HAVE_CONFIG_H
  24:../src/wolfcrypt/src/des3.c ****     #include <config.h>
  25:../src/wolfcrypt/src/des3.c **** #endif
  26:../src/wolfcrypt/src/des3.c **** 
  27:../src/wolfcrypt/src/des3.c **** #include <wolfssl/wolfcrypt/settings.h>
  28:../src/wolfcrypt/src/des3.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  29:../src/wolfcrypt/src/des3.c **** #include <wolfssl/wolfcrypt/logging.h>
  30:../src/wolfcrypt/src/des3.c **** 
  31:../src/wolfcrypt/src/des3.c **** 
  32:../src/wolfcrypt/src/des3.c **** #ifndef NO_DES3
  33:../src/wolfcrypt/src/des3.c **** 
  34:../src/wolfcrypt/src/des3.c **** #if defined(HAVE_FIPS) && defined(HAVE_FIPS_VERSION) && \
  35:../src/wolfcrypt/src/des3.c ****     (HAVE_FIPS_VERSION == 2 || HAVE_FIPS_VERSION == 3)
  36:../src/wolfcrypt/src/des3.c **** 
  37:../src/wolfcrypt/src/des3.c ****     /* set NO_WRAPPERS before headers, use direct internal f()s not wrappers */
  38:../src/wolfcrypt/src/des3.c ****     #define FIPS_NO_WRAPPERS
  39:../src/wolfcrypt/src/des3.c **** 
  40:../src/wolfcrypt/src/des3.c ****     #ifdef USE_WINDOWS_API
  41:../src/wolfcrypt/src/des3.c ****         #pragma code_seg(".fipsA$i")
  42:../src/wolfcrypt/src/des3.c ****         #pragma const_seg(".fipsB$i")
  43:../src/wolfcrypt/src/des3.c ****     #endif
  44:../src/wolfcrypt/src/des3.c **** #endif
  45:../src/wolfcrypt/src/des3.c **** 
  46:../src/wolfcrypt/src/des3.c **** #include <wolfssl/wolfcrypt/des3.h>
  47:../src/wolfcrypt/src/des3.c **** 
  48:../src/wolfcrypt/src/des3.c **** #ifdef WOLF_CRYPTO_CB
  49:../src/wolfcrypt/src/des3.c ****     #include <wolfssl/wolfcrypt/cryptocb.h>
  50:../src/wolfcrypt/src/des3.c **** #endif
  51:../src/wolfcrypt/src/des3.c **** 
  52:../src/wolfcrypt/src/des3.c **** /* fips wrapper calls, user can call direct */
  53:../src/wolfcrypt/src/des3.c **** #if defined(HAVE_FIPS) && \
  54:../src/wolfcrypt/src/des3.c ****     (!defined(HAVE_FIPS_VERSION) || (HAVE_FIPS_VERSION < 2))
  55:../src/wolfcrypt/src/des3.c **** 
  56:../src/wolfcrypt/src/des3.c ****     int wc_Des_SetKey(Des* des, const byte* key, const byte* iv, int dir)
  57:../src/wolfcrypt/src/des3.c ****     {
  58:../src/wolfcrypt/src/des3.c ****         return Des_SetKey(des, key, iv, dir);
  59:../src/wolfcrypt/src/des3.c ****     }
  60:../src/wolfcrypt/src/des3.c ****     int wc_Des3_SetKey(Des3* des, const byte* key, const byte* iv, int dir)
  61:../src/wolfcrypt/src/des3.c ****     {
  62:../src/wolfcrypt/src/des3.c ****         if (des == NULL || key == NULL || dir < 0) {
  63:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
  64:../src/wolfcrypt/src/des3.c ****         }
  65:../src/wolfcrypt/src/des3.c **** 
  66:../src/wolfcrypt/src/des3.c ****         return Des3_SetKey_fips(des, key, iv, dir);
  67:../src/wolfcrypt/src/des3.c ****     }
  68:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcEncrypt(Des* des, byte* out, const byte* in, word32 sz)
  69:../src/wolfcrypt/src/des3.c ****     {
  70:../src/wolfcrypt/src/des3.c ****         return Des_CbcEncrypt(des, out, in, sz);
  71:../src/wolfcrypt/src/des3.c ****     }
  72:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcDecrypt(Des* des, byte* out, const byte* in, word32 sz)
  73:../src/wolfcrypt/src/des3.c ****     {
  74:../src/wolfcrypt/src/des3.c ****         return Des_CbcDecrypt(des, out, in, sz);
  75:../src/wolfcrypt/src/des3.c ****     }
  76:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcEncrypt(Des3* des, byte* out, const byte* in, word32 sz)
  77:../src/wolfcrypt/src/des3.c ****     {
  78:../src/wolfcrypt/src/des3.c ****         if (des == NULL || out == NULL || in == NULL) {
  79:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
  80:../src/wolfcrypt/src/des3.c ****         }
  81:../src/wolfcrypt/src/des3.c ****         return Des3_CbcEncrypt_fips(des, out, in, sz);
  82:../src/wolfcrypt/src/des3.c ****     }
  83:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcDecrypt(Des3* des, byte* out, const byte* in, word32 sz)
  84:../src/wolfcrypt/src/des3.c ****     {
  85:../src/wolfcrypt/src/des3.c ****         if (des == NULL || out == NULL || in == NULL) {
  86:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
  87:../src/wolfcrypt/src/des3.c ****         }
  88:../src/wolfcrypt/src/des3.c ****         return Des3_CbcDecrypt_fips(des, out, in, sz);
  89:../src/wolfcrypt/src/des3.c ****     }
  90:../src/wolfcrypt/src/des3.c **** 
  91:../src/wolfcrypt/src/des3.c ****     #ifdef WOLFSSL_DES_ECB
  92:../src/wolfcrypt/src/des3.c ****         /* One block, compatibility only */
  93:../src/wolfcrypt/src/des3.c ****         int wc_Des_EcbEncrypt(Des* des, byte* out, const byte* in, word32 sz)
  94:../src/wolfcrypt/src/des3.c ****         {
  95:../src/wolfcrypt/src/des3.c ****             return Des_EcbEncrypt(des, out, in, sz);
  96:../src/wolfcrypt/src/des3.c ****         }
  97:../src/wolfcrypt/src/des3.c ****         int wc_Des3_EcbEncrypt(Des3* des, byte* out, const byte* in, word32 sz)
  98:../src/wolfcrypt/src/des3.c ****         {
  99:../src/wolfcrypt/src/des3.c ****             return Des3_EcbEncrypt(des, out, in, sz);
 100:../src/wolfcrypt/src/des3.c ****         }
 101:../src/wolfcrypt/src/des3.c ****     #endif /* WOLFSSL_DES_ECB */
 102:../src/wolfcrypt/src/des3.c **** 
 103:../src/wolfcrypt/src/des3.c ****     void wc_Des_SetIV(Des* des, const byte* iv)
 104:../src/wolfcrypt/src/des3.c ****     {
 105:../src/wolfcrypt/src/des3.c ****         Des_SetIV(des, iv);
 106:../src/wolfcrypt/src/des3.c ****     }
 107:../src/wolfcrypt/src/des3.c ****     int wc_Des3_SetIV(Des3* des, const byte* iv)
 108:../src/wolfcrypt/src/des3.c ****     {
 109:../src/wolfcrypt/src/des3.c ****         return Des3_SetIV_fips(des, iv);
 110:../src/wolfcrypt/src/des3.c ****     }
 111:../src/wolfcrypt/src/des3.c **** 
 112:../src/wolfcrypt/src/des3.c ****     int wc_Des3Init(Des3* des3, void* heap, int devId)
 113:../src/wolfcrypt/src/des3.c ****     {
 114:../src/wolfcrypt/src/des3.c ****         (void)des3;
 115:../src/wolfcrypt/src/des3.c ****         (void)heap;
 116:../src/wolfcrypt/src/des3.c ****         (void)devId;
 117:../src/wolfcrypt/src/des3.c ****         /* FIPS doesn't support:
 118:../src/wolfcrypt/src/des3.c ****             return Des3Init(des3, heap, devId); */
 119:../src/wolfcrypt/src/des3.c ****         return 0;
 120:../src/wolfcrypt/src/des3.c ****     }
 121:../src/wolfcrypt/src/des3.c ****     void wc_Des3Free(Des3* des3)
 122:../src/wolfcrypt/src/des3.c ****     {
 123:../src/wolfcrypt/src/des3.c ****         (void)des3;
 124:../src/wolfcrypt/src/des3.c ****         /* FIPS doesn't support:
 125:../src/wolfcrypt/src/des3.c ****             Des3Free(des3); */
 126:../src/wolfcrypt/src/des3.c ****     }
 127:../src/wolfcrypt/src/des3.c **** 
 128:../src/wolfcrypt/src/des3.c **** #else /* else build without fips, or for FIPS v2 */
 129:../src/wolfcrypt/src/des3.c **** 
 130:../src/wolfcrypt/src/des3.c **** 
 131:../src/wolfcrypt/src/des3.c **** #if defined(WOLFSSL_TI_CRYPT)
 132:../src/wolfcrypt/src/des3.c ****     #include <wolfcrypt/src/port/ti/ti-des3.c>
 133:../src/wolfcrypt/src/des3.c **** #else
 134:../src/wolfcrypt/src/des3.c **** 
 135:../src/wolfcrypt/src/des3.c **** 
 136:../src/wolfcrypt/src/des3.c **** #ifdef NO_INLINE
 137:../src/wolfcrypt/src/des3.c ****     #include <wolfssl/wolfcrypt/misc.h>
 138:../src/wolfcrypt/src/des3.c **** #else
 139:../src/wolfcrypt/src/des3.c ****     #define WOLFSSL_MISC_INCLUDED
 140:../src/wolfcrypt/src/des3.c ****     #include <wolfcrypt/src/misc.c>
 141:../src/wolfcrypt/src/des3.c **** #endif
 142:../src/wolfcrypt/src/des3.c **** 
 143:../src/wolfcrypt/src/des3.c **** 
 144:../src/wolfcrypt/src/des3.c **** /* Hardware Acceleration */
 145:../src/wolfcrypt/src/des3.c **** #if defined(STM32_CRYPTO) && !defined(STM32_CRYPTO_AES_ONLY)
 146:../src/wolfcrypt/src/des3.c **** 
 147:../src/wolfcrypt/src/des3.c ****     /*
 148:../src/wolfcrypt/src/des3.c ****      * STM32F2/F4 hardware DES/3DES support through the standard
 149:../src/wolfcrypt/src/des3.c ****      * peripheral library. (See note in README).
 150:../src/wolfcrypt/src/des3.c ****      */
 151:../src/wolfcrypt/src/des3.c **** 
 152:../src/wolfcrypt/src/des3.c ****     int wc_Des_SetKey(Des* des, const byte* key, const byte* iv, int dir)
 153:../src/wolfcrypt/src/des3.c ****     {
 154:../src/wolfcrypt/src/des3.c ****         word32 *dkey = des->key;
 155:../src/wolfcrypt/src/des3.c **** 
 156:../src/wolfcrypt/src/des3.c ****         (void)dir;
 157:../src/wolfcrypt/src/des3.c **** 
 158:../src/wolfcrypt/src/des3.c ****         XMEMCPY(dkey, key, 8);
 159:../src/wolfcrypt/src/des3.c ****     #if !defined(WOLFSSL_STM32_CUBEMX) || defined(STM32_HAL_V2)
 160:../src/wolfcrypt/src/des3.c ****         ByteReverseWords(dkey, dkey, 8);
 161:../src/wolfcrypt/src/des3.c ****     #endif
 162:../src/wolfcrypt/src/des3.c **** 
 163:../src/wolfcrypt/src/des3.c ****         wc_Des_SetIV(des, iv);
 164:../src/wolfcrypt/src/des3.c **** 
 165:../src/wolfcrypt/src/des3.c ****         return 0;
 166:../src/wolfcrypt/src/des3.c ****     }
 167:../src/wolfcrypt/src/des3.c **** 
 168:../src/wolfcrypt/src/des3.c ****     int wc_Des3_SetKey(Des3* des, const byte* key, const byte* iv, int dir)
 169:../src/wolfcrypt/src/des3.c ****     {
 170:../src/wolfcrypt/src/des3.c ****         if (des == NULL || key == NULL)
 171:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
 172:../src/wolfcrypt/src/des3.c **** 
 173:../src/wolfcrypt/src/des3.c ****         (void)dir;
 174:../src/wolfcrypt/src/des3.c **** 
 175:../src/wolfcrypt/src/des3.c ****     #ifndef WOLFSSL_STM32_CUBEMX
 176:../src/wolfcrypt/src/des3.c ****         {
 177:../src/wolfcrypt/src/des3.c ****             word32 *dkey1 = des->key[0];
 178:../src/wolfcrypt/src/des3.c ****             word32 *dkey2 = des->key[1];
 179:../src/wolfcrypt/src/des3.c ****             word32 *dkey3 = des->key[2];
 180:../src/wolfcrypt/src/des3.c **** 
 181:../src/wolfcrypt/src/des3.c ****             XMEMCPY(dkey1, key, 8);         /* set key 1 */
 182:../src/wolfcrypt/src/des3.c ****             XMEMCPY(dkey2, key + 8, 8);     /* set key 2 */
 183:../src/wolfcrypt/src/des3.c ****             XMEMCPY(dkey3, key + 16, 8);    /* set key 3 */
 184:../src/wolfcrypt/src/des3.c **** 
 185:../src/wolfcrypt/src/des3.c ****             ByteReverseWords(dkey1, dkey1, 8);
 186:../src/wolfcrypt/src/des3.c ****             ByteReverseWords(dkey2, dkey2, 8);
 187:../src/wolfcrypt/src/des3.c ****             ByteReverseWords(dkey3, dkey3, 8);
 188:../src/wolfcrypt/src/des3.c ****         }
 189:../src/wolfcrypt/src/des3.c ****     #else
 190:../src/wolfcrypt/src/des3.c ****         /* CUBEMX wants keys in sequential memory */
 191:../src/wolfcrypt/src/des3.c ****         XMEMCPY(des->key[0], key, DES3_KEYLEN);
 192:../src/wolfcrypt/src/des3.c ****         #ifdef STM32_HAL_V2
 193:../src/wolfcrypt/src/des3.c ****         ByteReverseWords((word32*)des->key, (word32*)des->key, DES3_KEYLEN);
 194:../src/wolfcrypt/src/des3.c ****         #endif
 195:../src/wolfcrypt/src/des3.c ****     #endif
 196:../src/wolfcrypt/src/des3.c **** 
 197:../src/wolfcrypt/src/des3.c ****         return wc_Des3_SetIV(des, iv);
 198:../src/wolfcrypt/src/des3.c ****     }
 199:../src/wolfcrypt/src/des3.c **** 
 200:../src/wolfcrypt/src/des3.c ****     static void DesCrypt(Des* des, byte* out, const byte* in, word32 sz,
 201:../src/wolfcrypt/src/des3.c ****                   int dir, int mode)
 202:../src/wolfcrypt/src/des3.c ****     {
 203:../src/wolfcrypt/src/des3.c ****         int ret;
 204:../src/wolfcrypt/src/des3.c ****     #ifdef WOLFSSL_STM32_CUBEMX
 205:../src/wolfcrypt/src/des3.c ****         CRYP_HandleTypeDef hcryp;
 206:../src/wolfcrypt/src/des3.c ****     #else
 207:../src/wolfcrypt/src/des3.c ****         word32 *dkey, *iv;
 208:../src/wolfcrypt/src/des3.c ****         CRYP_InitTypeDef DES_CRYP_InitStructure;
 209:../src/wolfcrypt/src/des3.c ****         CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
 210:../src/wolfcrypt/src/des3.c ****         CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
 211:../src/wolfcrypt/src/des3.c ****     #endif
 212:../src/wolfcrypt/src/des3.c **** 
 213:../src/wolfcrypt/src/des3.c ****         ret = wolfSSL_CryptHwMutexLock();
 214:../src/wolfcrypt/src/des3.c ****         if (ret != 0) {
 215:../src/wolfcrypt/src/des3.c ****             return;
 216:../src/wolfcrypt/src/des3.c ****         }
 217:../src/wolfcrypt/src/des3.c **** 
 218:../src/wolfcrypt/src/des3.c ****     #ifdef WOLFSSL_STM32_CUBEMX
 219:../src/wolfcrypt/src/des3.c ****         XMEMSET(&hcryp, 0, sizeof(CRYP_HandleTypeDef));
 220:../src/wolfcrypt/src/des3.c ****         hcryp.Instance = CRYP;
 221:../src/wolfcrypt/src/des3.c ****         hcryp.Init.KeySize  = CRYP_KEYSIZE_128B;
 222:../src/wolfcrypt/src/des3.c ****         hcryp.Init.DataType = CRYP_DATATYPE_8B;
 223:../src/wolfcrypt/src/des3.c ****         hcryp.Init.pKey = (STM_CRYPT_TYPE*)des->key;
 224:../src/wolfcrypt/src/des3.c ****         hcryp.Init.pInitVect = (STM_CRYPT_TYPE*)des->reg;
 225:../src/wolfcrypt/src/des3.c ****     #ifdef STM32_HAL_V2
 226:../src/wolfcrypt/src/des3.c ****         hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 227:../src/wolfcrypt/src/des3.c ****         if (mode == DES_CBC)
 228:../src/wolfcrypt/src/des3.c ****             hcryp.Init.Algorithm = CRYP_DES_CBC;
 229:../src/wolfcrypt/src/des3.c ****         else
 230:../src/wolfcrypt/src/des3.c ****             hcryp.Init.Algorithm = CRYP_DES_ECB;
 231:../src/wolfcrypt/src/des3.c ****     #endif
 232:../src/wolfcrypt/src/des3.c **** 
 233:../src/wolfcrypt/src/des3.c ****         HAL_CRYP_Init(&hcryp);
 234:../src/wolfcrypt/src/des3.c **** 
 235:../src/wolfcrypt/src/des3.c ****     #ifdef STM32_HAL_V2
 236:../src/wolfcrypt/src/des3.c ****         if (dir == DES_ENCRYPTION) {
 237:../src/wolfcrypt/src/des3.c ****             HAL_CRYP_Encrypt(&hcryp, (uint32_t*)in, sz, (uint32_t*)out,
 238:../src/wolfcrypt/src/des3.c ****                 STM32_HAL_TIMEOUT);
 239:../src/wolfcrypt/src/des3.c ****         }
 240:../src/wolfcrypt/src/des3.c ****         else {
 241:../src/wolfcrypt/src/des3.c ****             HAL_CRYP_Decrypt(&hcryp, (uint32_t*)in, sz, (uint32_t*)out,
 242:../src/wolfcrypt/src/des3.c ****                 STM32_HAL_TIMEOUT);
 243:../src/wolfcrypt/src/des3.c ****         }
 244:../src/wolfcrypt/src/des3.c ****         /* save off IV */
 245:../src/wolfcrypt/src/des3.c ****         des->reg[0] = hcryp.Instance->IV0LR;
 246:../src/wolfcrypt/src/des3.c ****         des->reg[1] = hcryp.Instance->IV0RR;
 247:../src/wolfcrypt/src/des3.c ****     #else
 248:../src/wolfcrypt/src/des3.c ****         while (sz > 0) {
 249:../src/wolfcrypt/src/des3.c ****             /* if input and output same will overwrite input iv */
 250:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->tmp, in + sz - DES_BLOCK_SIZE, DES_BLOCK_SIZE);
 251:../src/wolfcrypt/src/des3.c **** 
 252:../src/wolfcrypt/src/des3.c ****             if (mode == DES_CBC) {
 253:../src/wolfcrypt/src/des3.c ****                 if (dir == DES_ENCRYPTION) {
 254:../src/wolfcrypt/src/des3.c ****                     HAL_CRYP_DESCBC_Encrypt(&hcryp, (uint8_t*)in,
 255:../src/wolfcrypt/src/des3.c ****                                     DES_BLOCK_SIZE, out, STM32_HAL_TIMEOUT);
 256:../src/wolfcrypt/src/des3.c ****                 }
 257:../src/wolfcrypt/src/des3.c ****                 else {
 258:../src/wolfcrypt/src/des3.c ****                     HAL_CRYP_DESCBC_Decrypt(&hcryp, (uint8_t*)in,
 259:../src/wolfcrypt/src/des3.c ****                                     DES_BLOCK_SIZE, out, STM32_HAL_TIMEOUT);
 260:../src/wolfcrypt/src/des3.c ****                 }
 261:../src/wolfcrypt/src/des3.c ****             }
 262:../src/wolfcrypt/src/des3.c ****             else {
 263:../src/wolfcrypt/src/des3.c ****                 if (dir == DES_ENCRYPTION) {
 264:../src/wolfcrypt/src/des3.c ****                     HAL_CRYP_DESECB_Encrypt(&hcryp, (uint8_t*)in,
 265:../src/wolfcrypt/src/des3.c ****                                     DES_BLOCK_SIZE, out, STM32_HAL_TIMEOUT);
 266:../src/wolfcrypt/src/des3.c ****                 }
 267:../src/wolfcrypt/src/des3.c ****                 else {
 268:../src/wolfcrypt/src/des3.c ****                     HAL_CRYP_DESECB_Decrypt(&hcryp, (uint8_t*)in,
 269:../src/wolfcrypt/src/des3.c ****                                     DES_BLOCK_SIZE, out, STM32_HAL_TIMEOUT);
 270:../src/wolfcrypt/src/des3.c ****                 }
 271:../src/wolfcrypt/src/des3.c ****             }
 272:../src/wolfcrypt/src/des3.c **** 
 273:../src/wolfcrypt/src/des3.c ****             /* store iv for next call */
 274:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
 275:../src/wolfcrypt/src/des3.c **** 
 276:../src/wolfcrypt/src/des3.c ****             sz  -= DES_BLOCK_SIZE;
 277:../src/wolfcrypt/src/des3.c ****             in  += DES_BLOCK_SIZE;
 278:../src/wolfcrypt/src/des3.c ****             out += DES_BLOCK_SIZE;
 279:../src/wolfcrypt/src/des3.c ****         }
 280:../src/wolfcrypt/src/des3.c ****     #endif /* STM32_HAL_V2 */
 281:../src/wolfcrypt/src/des3.c **** 
 282:../src/wolfcrypt/src/des3.c ****         HAL_CRYP_DeInit(&hcryp);
 283:../src/wolfcrypt/src/des3.c ****     #else
 284:../src/wolfcrypt/src/des3.c ****         dkey = des->key;
 285:../src/wolfcrypt/src/des3.c ****         iv = des->reg;
 286:../src/wolfcrypt/src/des3.c **** 
 287:../src/wolfcrypt/src/des3.c ****         /* crypto structure initialization */
 288:../src/wolfcrypt/src/des3.c ****         CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 289:../src/wolfcrypt/src/des3.c ****         CRYP_StructInit(&DES_CRYP_InitStructure);
 290:../src/wolfcrypt/src/des3.c ****         CRYP_IVStructInit(&DES_CRYP_IVInitStructure);
 291:../src/wolfcrypt/src/des3.c **** 
 292:../src/wolfcrypt/src/des3.c ****         /* reset registers to their default values */
 293:../src/wolfcrypt/src/des3.c ****         CRYP_DeInit();
 294:../src/wolfcrypt/src/des3.c **** 
 295:../src/wolfcrypt/src/des3.c ****         /* set direction, mode, and datatype */
 296:../src/wolfcrypt/src/des3.c ****         if (dir == DES_ENCRYPTION) {
 297:../src/wolfcrypt/src/des3.c ****             DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 298:../src/wolfcrypt/src/des3.c ****         } else { /* DES_DECRYPTION */
 299:../src/wolfcrypt/src/des3.c ****             DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 300:../src/wolfcrypt/src/des3.c ****         }
 301:../src/wolfcrypt/src/des3.c **** 
 302:../src/wolfcrypt/src/des3.c ****         if (mode == DES_CBC) {
 303:../src/wolfcrypt/src/des3.c ****             DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 304:../src/wolfcrypt/src/des3.c ****         } else { /* DES_ECB */
 305:../src/wolfcrypt/src/des3.c ****             DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 306:../src/wolfcrypt/src/des3.c ****         }
 307:../src/wolfcrypt/src/des3.c **** 
 308:../src/wolfcrypt/src/des3.c ****         DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 309:../src/wolfcrypt/src/des3.c ****         CRYP_Init(&DES_CRYP_InitStructure);
 310:../src/wolfcrypt/src/des3.c **** 
 311:../src/wolfcrypt/src/des3.c ****         /* load key into correct registers */
 312:../src/wolfcrypt/src/des3.c ****         DES_CRYP_KeyInitStructure.CRYP_Key1Left  = dkey[0];
 313:../src/wolfcrypt/src/des3.c ****         DES_CRYP_KeyInitStructure.CRYP_Key1Right = dkey[1];
 314:../src/wolfcrypt/src/des3.c ****         CRYP_KeyInit(&DES_CRYP_KeyInitStructure);
 315:../src/wolfcrypt/src/des3.c **** 
 316:../src/wolfcrypt/src/des3.c ****         /* set iv */
 317:../src/wolfcrypt/src/des3.c ****         ByteReverseWords(iv, iv, DES_BLOCK_SIZE);
 318:../src/wolfcrypt/src/des3.c ****         DES_CRYP_IVInitStructure.CRYP_IV0Left  = iv[0];
 319:../src/wolfcrypt/src/des3.c ****         DES_CRYP_IVInitStructure.CRYP_IV0Right = iv[1];
 320:../src/wolfcrypt/src/des3.c ****         CRYP_IVInit(&DES_CRYP_IVInitStructure);
 321:../src/wolfcrypt/src/des3.c **** 
 322:../src/wolfcrypt/src/des3.c ****         /* enable crypto processor */
 323:../src/wolfcrypt/src/des3.c ****         CRYP_Cmd(ENABLE);
 324:../src/wolfcrypt/src/des3.c **** 
 325:../src/wolfcrypt/src/des3.c ****         while (sz > 0) {
 326:../src/wolfcrypt/src/des3.c ****             /* flush IN/OUT FIFOs */
 327:../src/wolfcrypt/src/des3.c ****             CRYP_FIFOFlush();
 328:../src/wolfcrypt/src/des3.c **** 
 329:../src/wolfcrypt/src/des3.c ****             /* if input and output same will overwrite input iv */
 330:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->tmp, in + sz - DES_BLOCK_SIZE, DES_BLOCK_SIZE);
 331:../src/wolfcrypt/src/des3.c **** 
 332:../src/wolfcrypt/src/des3.c ****             CRYP_DataIn(*(uint32_t*)&in[0]);
 333:../src/wolfcrypt/src/des3.c ****             CRYP_DataIn(*(uint32_t*)&in[4]);
 334:../src/wolfcrypt/src/des3.c **** 
 335:../src/wolfcrypt/src/des3.c ****             /* wait until the complete message has been processed */
 336:../src/wolfcrypt/src/des3.c ****             while(CRYP_GetFlagStatus(CRYP_FLAG_BUSY) != RESET) {}
 337:../src/wolfcrypt/src/des3.c **** 
 338:../src/wolfcrypt/src/des3.c ****             *(uint32_t*)&out[0]  = CRYP_DataOut();
 339:../src/wolfcrypt/src/des3.c ****             *(uint32_t*)&out[4]  = CRYP_DataOut();
 340:../src/wolfcrypt/src/des3.c **** 
 341:../src/wolfcrypt/src/des3.c ****             /* store iv for next call */
 342:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
 343:../src/wolfcrypt/src/des3.c **** 
 344:../src/wolfcrypt/src/des3.c ****             sz  -= DES_BLOCK_SIZE;
 345:../src/wolfcrypt/src/des3.c ****             in  += DES_BLOCK_SIZE;
 346:../src/wolfcrypt/src/des3.c ****             out += DES_BLOCK_SIZE;
 347:../src/wolfcrypt/src/des3.c ****         }
 348:../src/wolfcrypt/src/des3.c **** 
 349:../src/wolfcrypt/src/des3.c ****         /* disable crypto processor */
 350:../src/wolfcrypt/src/des3.c ****         CRYP_Cmd(DISABLE);
 351:../src/wolfcrypt/src/des3.c ****     #endif /* WOLFSSL_STM32_CUBEMX */
 352:../src/wolfcrypt/src/des3.c ****         wolfSSL_CryptHwMutexUnLock();
 353:../src/wolfcrypt/src/des3.c ****     }
 354:../src/wolfcrypt/src/des3.c **** 
 355:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcEncrypt(Des* des, byte* out, const byte* in, word32 sz)
 356:../src/wolfcrypt/src/des3.c ****     {
 357:../src/wolfcrypt/src/des3.c ****         DesCrypt(des, out, in, sz, DES_ENCRYPTION, DES_CBC);
 358:../src/wolfcrypt/src/des3.c ****         return 0;
 359:../src/wolfcrypt/src/des3.c ****     }
 360:../src/wolfcrypt/src/des3.c **** 
 361:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcDecrypt(Des* des, byte* out, const byte* in, word32 sz)
 362:../src/wolfcrypt/src/des3.c ****     {
 363:../src/wolfcrypt/src/des3.c ****         DesCrypt(des, out, in, sz, DES_DECRYPTION, DES_CBC);
 364:../src/wolfcrypt/src/des3.c ****         return 0;
 365:../src/wolfcrypt/src/des3.c ****     }
 366:../src/wolfcrypt/src/des3.c **** 
 367:../src/wolfcrypt/src/des3.c ****     int wc_Des_EcbEncrypt(Des* des, byte* out, const byte* in, word32 sz)
 368:../src/wolfcrypt/src/des3.c ****     {
 369:../src/wolfcrypt/src/des3.c ****         DesCrypt(des, out, in, sz, DES_ENCRYPTION, DES_ECB);
 370:../src/wolfcrypt/src/des3.c ****         return 0;
 371:../src/wolfcrypt/src/des3.c ****     }
 372:../src/wolfcrypt/src/des3.c **** 
 373:../src/wolfcrypt/src/des3.c ****     static int Des3Crypt(Des3* des, byte* out, const byte* in, word32 sz,
 374:../src/wolfcrypt/src/des3.c ****                    int dir)
 375:../src/wolfcrypt/src/des3.c ****     {
 376:../src/wolfcrypt/src/des3.c ****         if (des == NULL || out == NULL || in == NULL)
 377:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
 378:../src/wolfcrypt/src/des3.c **** 
 379:../src/wolfcrypt/src/des3.c ****     #ifdef WOLFSSL_STM32_CUBEMX
 380:../src/wolfcrypt/src/des3.c ****         {
 381:../src/wolfcrypt/src/des3.c ****             CRYP_HandleTypeDef hcryp;
 382:../src/wolfcrypt/src/des3.c **** 
 383:../src/wolfcrypt/src/des3.c ****             XMEMSET(&hcryp, 0, sizeof(CRYP_HandleTypeDef));
 384:../src/wolfcrypt/src/des3.c ****             hcryp.Instance = CRYP;
 385:../src/wolfcrypt/src/des3.c ****             hcryp.Init.KeySize  = CRYP_KEYSIZE_128B;
 386:../src/wolfcrypt/src/des3.c ****             hcryp.Init.DataType = CRYP_DATATYPE_8B;
 387:../src/wolfcrypt/src/des3.c ****             hcryp.Init.pKey = (STM_CRYPT_TYPE*)des->key;
 388:../src/wolfcrypt/src/des3.c ****             hcryp.Init.pInitVect = (STM_CRYPT_TYPE*)des->reg;
 389:../src/wolfcrypt/src/des3.c ****         #ifdef STM32_HAL_V2
 390:../src/wolfcrypt/src/des3.c ****             hcryp.Init.DataWidthUnit = CRYP_DATAWIDTHUNIT_BYTE;
 391:../src/wolfcrypt/src/des3.c ****             hcryp.Init.Algorithm = CRYP_TDES_CBC;
 392:../src/wolfcrypt/src/des3.c ****         #endif
 393:../src/wolfcrypt/src/des3.c **** 
 394:../src/wolfcrypt/src/des3.c ****             HAL_CRYP_Init(&hcryp);
 395:../src/wolfcrypt/src/des3.c **** 
 396:../src/wolfcrypt/src/des3.c ****         #ifdef STM32_HAL_V2
 397:../src/wolfcrypt/src/des3.c ****             if (dir == DES_ENCRYPTION) {
 398:../src/wolfcrypt/src/des3.c ****                 HAL_CRYP_Encrypt(&hcryp, (uint32_t*)in, sz, (uint32_t*)out,
 399:../src/wolfcrypt/src/des3.c ****                     STM32_HAL_TIMEOUT);
 400:../src/wolfcrypt/src/des3.c ****             }
 401:../src/wolfcrypt/src/des3.c ****             else {
 402:../src/wolfcrypt/src/des3.c ****                 HAL_CRYP_Decrypt(&hcryp, (uint32_t*)in, sz, (uint32_t*)out,
 403:../src/wolfcrypt/src/des3.c ****                     STM32_HAL_TIMEOUT);
 404:../src/wolfcrypt/src/des3.c ****             }
 405:../src/wolfcrypt/src/des3.c ****             /* save off IV */
 406:../src/wolfcrypt/src/des3.c ****             des->reg[0] = hcryp.Instance->IV0LR;
 407:../src/wolfcrypt/src/des3.c ****             des->reg[1] = hcryp.Instance->IV0RR;
 408:../src/wolfcrypt/src/des3.c ****         #else
 409:../src/wolfcrypt/src/des3.c ****             while (sz > 0) {
 410:../src/wolfcrypt/src/des3.c ****                 if (dir == DES_ENCRYPTION) {
 411:../src/wolfcrypt/src/des3.c ****                     HAL_CRYP_TDESCBC_Encrypt(&hcryp, (byte*)in,
 412:../src/wolfcrypt/src/des3.c ****                                        DES_BLOCK_SIZE, out, STM32_HAL_TIMEOUT);
 413:../src/wolfcrypt/src/des3.c ****                 }
 414:../src/wolfcrypt/src/des3.c ****                 else {
 415:../src/wolfcrypt/src/des3.c ****                     HAL_CRYP_TDESCBC_Decrypt(&hcryp, (byte*)in,
 416:../src/wolfcrypt/src/des3.c ****                                        DES_BLOCK_SIZE, out, STM32_HAL_TIMEOUT);
 417:../src/wolfcrypt/src/des3.c ****                 }
 418:../src/wolfcrypt/src/des3.c **** 
 419:../src/wolfcrypt/src/des3.c ****                 /* store iv for next call */
 420:../src/wolfcrypt/src/des3.c ****                 XMEMCPY(des->reg, out + sz - DES_BLOCK_SIZE, DES_BLOCK_SIZE);
 421:../src/wolfcrypt/src/des3.c **** 
 422:../src/wolfcrypt/src/des3.c ****                 sz  -= DES_BLOCK_SIZE;
 423:../src/wolfcrypt/src/des3.c ****                 in  += DES_BLOCK_SIZE;
 424:../src/wolfcrypt/src/des3.c ****                 out += DES_BLOCK_SIZE;
 425:../src/wolfcrypt/src/des3.c ****             }
 426:../src/wolfcrypt/src/des3.c ****         #endif /* STM32_HAL_V2 */
 427:../src/wolfcrypt/src/des3.c **** 
 428:../src/wolfcrypt/src/des3.c ****             HAL_CRYP_DeInit(&hcryp);
 429:../src/wolfcrypt/src/des3.c ****         }
 430:../src/wolfcrypt/src/des3.c ****     #else
 431:../src/wolfcrypt/src/des3.c ****         {
 432:../src/wolfcrypt/src/des3.c ****             word32 *dkey1, *dkey2, *dkey3, *iv;
 433:../src/wolfcrypt/src/des3.c ****             CRYP_InitTypeDef DES3_CRYP_InitStructure;
 434:../src/wolfcrypt/src/des3.c ****             CRYP_KeyInitTypeDef DES3_CRYP_KeyInitStructure;
 435:../src/wolfcrypt/src/des3.c ****             CRYP_IVInitTypeDef DES3_CRYP_IVInitStructure;
 436:../src/wolfcrypt/src/des3.c **** 
 437:../src/wolfcrypt/src/des3.c ****             dkey1 = des->key[0];
 438:../src/wolfcrypt/src/des3.c ****             dkey2 = des->key[1];
 439:../src/wolfcrypt/src/des3.c ****             dkey3 = des->key[2];
 440:../src/wolfcrypt/src/des3.c ****             iv = des->reg;
 441:../src/wolfcrypt/src/des3.c **** 
 442:../src/wolfcrypt/src/des3.c ****             /* crypto structure initialization */
 443:../src/wolfcrypt/src/des3.c ****             CRYP_KeyStructInit(&DES3_CRYP_KeyInitStructure);
 444:../src/wolfcrypt/src/des3.c ****             CRYP_StructInit(&DES3_CRYP_InitStructure);
 445:../src/wolfcrypt/src/des3.c ****             CRYP_IVStructInit(&DES3_CRYP_IVInitStructure);
 446:../src/wolfcrypt/src/des3.c **** 
 447:../src/wolfcrypt/src/des3.c ****             /* reset registers to their default values */
 448:../src/wolfcrypt/src/des3.c ****             CRYP_DeInit();
 449:../src/wolfcrypt/src/des3.c **** 
 450:../src/wolfcrypt/src/des3.c ****             /* set direction, mode, and datatype */
 451:../src/wolfcrypt/src/des3.c ****             if (dir == DES_ENCRYPTION) {
 452:../src/wolfcrypt/src/des3.c ****                 DES3_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 453:../src/wolfcrypt/src/des3.c ****             } else {
 454:../src/wolfcrypt/src/des3.c ****                 DES3_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 455:../src/wolfcrypt/src/des3.c ****             }
 456:../src/wolfcrypt/src/des3.c **** 
 457:../src/wolfcrypt/src/des3.c ****             DES3_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 458:../src/wolfcrypt/src/des3.c ****             DES3_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 459:../src/wolfcrypt/src/des3.c ****             CRYP_Init(&DES3_CRYP_InitStructure);
 460:../src/wolfcrypt/src/des3.c **** 
 461:../src/wolfcrypt/src/des3.c ****             /* load key into correct registers */
 462:../src/wolfcrypt/src/des3.c ****             DES3_CRYP_KeyInitStructure.CRYP_Key1Left  = dkey1[0];
 463:../src/wolfcrypt/src/des3.c ****             DES3_CRYP_KeyInitStructure.CRYP_Key1Right = dkey1[1];
 464:../src/wolfcrypt/src/des3.c ****             DES3_CRYP_KeyInitStructure.CRYP_Key2Left  = dkey2[0];
 465:../src/wolfcrypt/src/des3.c ****             DES3_CRYP_KeyInitStructure.CRYP_Key2Right = dkey2[1];
 466:../src/wolfcrypt/src/des3.c ****             DES3_CRYP_KeyInitStructure.CRYP_Key3Left  = dkey3[0];
 467:../src/wolfcrypt/src/des3.c ****             DES3_CRYP_KeyInitStructure.CRYP_Key3Right = dkey3[1];
 468:../src/wolfcrypt/src/des3.c ****             CRYP_KeyInit(&DES3_CRYP_KeyInitStructure);
 469:../src/wolfcrypt/src/des3.c **** 
 470:../src/wolfcrypt/src/des3.c ****             /* set iv */
 471:../src/wolfcrypt/src/des3.c ****             ByteReverseWords(iv, iv, DES_BLOCK_SIZE);
 472:../src/wolfcrypt/src/des3.c ****             DES3_CRYP_IVInitStructure.CRYP_IV0Left  = iv[0];
 473:../src/wolfcrypt/src/des3.c ****             DES3_CRYP_IVInitStructure.CRYP_IV0Right = iv[1];
 474:../src/wolfcrypt/src/des3.c ****             CRYP_IVInit(&DES3_CRYP_IVInitStructure);
 475:../src/wolfcrypt/src/des3.c **** 
 476:../src/wolfcrypt/src/des3.c ****             /* enable crypto processor */
 477:../src/wolfcrypt/src/des3.c ****             CRYP_Cmd(ENABLE);
 478:../src/wolfcrypt/src/des3.c **** 
 479:../src/wolfcrypt/src/des3.c ****             while (sz > 0)
 480:../src/wolfcrypt/src/des3.c ****             {
 481:../src/wolfcrypt/src/des3.c ****                 /* flush IN/OUT FIFOs */
 482:../src/wolfcrypt/src/des3.c ****                 CRYP_FIFOFlush();
 483:../src/wolfcrypt/src/des3.c **** 
 484:../src/wolfcrypt/src/des3.c ****                 CRYP_DataIn(*(uint32_t*)&in[0]);
 485:../src/wolfcrypt/src/des3.c ****                 CRYP_DataIn(*(uint32_t*)&in[4]);
 486:../src/wolfcrypt/src/des3.c **** 
 487:../src/wolfcrypt/src/des3.c ****                 /* wait until the complete message has been processed */
 488:../src/wolfcrypt/src/des3.c ****                 while(CRYP_GetFlagStatus(CRYP_FLAG_BUSY) != RESET) {}
 489:../src/wolfcrypt/src/des3.c **** 
 490:../src/wolfcrypt/src/des3.c ****                 *(uint32_t*)&out[0]  = CRYP_DataOut();
 491:../src/wolfcrypt/src/des3.c ****                 *(uint32_t*)&out[4]  = CRYP_DataOut();
 492:../src/wolfcrypt/src/des3.c **** 
 493:../src/wolfcrypt/src/des3.c ****                 /* store iv for next call */
 494:../src/wolfcrypt/src/des3.c ****                 XMEMCPY(des->reg, out + sz - DES_BLOCK_SIZE, DES_BLOCK_SIZE);
 495:../src/wolfcrypt/src/des3.c **** 
 496:../src/wolfcrypt/src/des3.c ****                 sz  -= DES_BLOCK_SIZE;
 497:../src/wolfcrypt/src/des3.c ****                 in  += DES_BLOCK_SIZE;
 498:../src/wolfcrypt/src/des3.c ****                 out += DES_BLOCK_SIZE;
 499:../src/wolfcrypt/src/des3.c ****             }
 500:../src/wolfcrypt/src/des3.c **** 
 501:../src/wolfcrypt/src/des3.c ****             /* disable crypto processor */
 502:../src/wolfcrypt/src/des3.c ****             CRYP_Cmd(DISABLE);
 503:../src/wolfcrypt/src/des3.c ****         }
 504:../src/wolfcrypt/src/des3.c ****     #endif /* WOLFSSL_STM32_CUBEMX */
 505:../src/wolfcrypt/src/des3.c ****         return 0;
 506:../src/wolfcrypt/src/des3.c ****     }
 507:../src/wolfcrypt/src/des3.c **** 
 508:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcEncrypt(Des3* des, byte* out, const byte* in, word32 sz)
 509:../src/wolfcrypt/src/des3.c ****     {
 510:../src/wolfcrypt/src/des3.c ****         return Des3Crypt(des, out, in, sz, DES_ENCRYPTION);
 511:../src/wolfcrypt/src/des3.c ****     }
 512:../src/wolfcrypt/src/des3.c **** 
 513:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcDecrypt(Des3* des, byte* out, const byte* in, word32 sz)
 514:../src/wolfcrypt/src/des3.c ****     {
 515:../src/wolfcrypt/src/des3.c ****         return Des3Crypt(des, out, in, sz, DES_DECRYPTION);
 516:../src/wolfcrypt/src/des3.c ****     }
 517:../src/wolfcrypt/src/des3.c **** 
 518:../src/wolfcrypt/src/des3.c **** #elif defined(HAVE_COLDFIRE_SEC)
 519:../src/wolfcrypt/src/des3.c **** 
 520:../src/wolfcrypt/src/des3.c ****     #include <wolfssl/ctaocrypt/types.h>
 521:../src/wolfcrypt/src/des3.c **** 
 522:../src/wolfcrypt/src/des3.c ****     #include "sec.h"
 523:../src/wolfcrypt/src/des3.c ****     #include "mcf5475_sec.h"
 524:../src/wolfcrypt/src/des3.c ****     #include "mcf5475_siu.h"
 525:../src/wolfcrypt/src/des3.c **** 
 526:../src/wolfcrypt/src/des3.c ****     #if defined (HAVE_THREADX)
 527:../src/wolfcrypt/src/des3.c ****     #include "memory_pools.h"
 528:../src/wolfcrypt/src/des3.c ****     extern TX_BYTE_POOL mp_ncached;  /* Non Cached memory pool */
 529:../src/wolfcrypt/src/des3.c ****     #endif
 530:../src/wolfcrypt/src/des3.c **** 
 531:../src/wolfcrypt/src/des3.c ****     #define DES_BUFFER_SIZE (DES_BLOCK_SIZE * 64)
 532:../src/wolfcrypt/src/des3.c ****     static unsigned char *desBuffIn = NULL;
 533:../src/wolfcrypt/src/des3.c ****     static unsigned char *desBuffOut = NULL;
 534:../src/wolfcrypt/src/des3.c ****     static byte *secIV;
 535:../src/wolfcrypt/src/des3.c ****     static byte *secKey;
 536:../src/wolfcrypt/src/des3.c ****     static volatile SECdescriptorType *secDesc;
 537:../src/wolfcrypt/src/des3.c **** 
 538:../src/wolfcrypt/src/des3.c ****     static wolfSSL_Mutex Mutex_DesSEC;
 539:../src/wolfcrypt/src/des3.c **** 
 540:../src/wolfcrypt/src/des3.c ****     #define SEC_DESC_DES_CBC_ENCRYPT  0x20500010
 541:../src/wolfcrypt/src/des3.c ****     #define SEC_DESC_DES_CBC_DECRYPT  0x20400010
 542:../src/wolfcrypt/src/des3.c ****     #define SEC_DESC_DES3_CBC_ENCRYPT 0x20700010
 543:../src/wolfcrypt/src/des3.c ****     #define SEC_DESC_DES3_CBC_DECRYPT 0x20600010
 544:../src/wolfcrypt/src/des3.c **** 
 545:../src/wolfcrypt/src/des3.c ****     #define DES_IVLEN 8
 546:../src/wolfcrypt/src/des3.c ****     #define DES_KEYLEN 8
 547:../src/wolfcrypt/src/des3.c ****     #define DES3_IVLEN 8
 548:../src/wolfcrypt/src/des3.c ****     #define DES3_KEYLEN 24
 549:../src/wolfcrypt/src/des3.c **** 
 550:../src/wolfcrypt/src/des3.c ****     extern volatile unsigned char __MBAR[];
 551:../src/wolfcrypt/src/des3.c **** 
 552:../src/wolfcrypt/src/des3.c ****     static void wc_Des_Cbc(byte* out, const byte* in, word32 sz,
 553:../src/wolfcrypt/src/des3.c ****                         byte *key, byte *iv, word32 desc)
 554:../src/wolfcrypt/src/des3.c ****     {
 555:../src/wolfcrypt/src/des3.c ****         #ifdef DEBUG_WOLFSSL
 556:../src/wolfcrypt/src/des3.c ****         int ret;  int stat1,stat2;
 557:../src/wolfcrypt/src/des3.c ****         #endif
 558:../src/wolfcrypt/src/des3.c ****         int size;
 559:../src/wolfcrypt/src/des3.c ****         volatile int v;
 560:../src/wolfcrypt/src/des3.c **** 
 561:../src/wolfcrypt/src/des3.c ****         wc_LockMutex(&Mutex_DesSEC) ;
 562:../src/wolfcrypt/src/des3.c **** 
 563:../src/wolfcrypt/src/des3.c ****         secDesc->length1 = 0x0;
 564:../src/wolfcrypt/src/des3.c ****         secDesc->pointer1 = NULL;
 565:../src/wolfcrypt/src/des3.c ****         if((desc==SEC_DESC_DES_CBC_ENCRYPT)||(desc==SEC_DESC_DES_CBC_DECRYPT)){
 566:../src/wolfcrypt/src/des3.c ****             secDesc->length2 = DES_IVLEN;
 567:../src/wolfcrypt/src/des3.c ****             secDesc->length3 = DES_KEYLEN;
 568:../src/wolfcrypt/src/des3.c ****         } else {
 569:../src/wolfcrypt/src/des3.c ****             secDesc->length2 = DES3_IVLEN;
 570:../src/wolfcrypt/src/des3.c ****             secDesc->length3 = DES3_KEYLEN;
 571:../src/wolfcrypt/src/des3.c ****         }
 572:../src/wolfcrypt/src/des3.c ****         secDesc->pointer2 = secIV;
 573:../src/wolfcrypt/src/des3.c ****         secDesc->pointer3 = secKey;
 574:../src/wolfcrypt/src/des3.c ****         secDesc->pointer4 = desBuffIn;
 575:../src/wolfcrypt/src/des3.c ****         secDesc->pointer5 = desBuffOut;
 576:../src/wolfcrypt/src/des3.c ****         secDesc->length6 = 0;
 577:../src/wolfcrypt/src/des3.c ****         secDesc->pointer6 = NULL;
 578:../src/wolfcrypt/src/des3.c ****         secDesc->length7 = 0x0;
 579:../src/wolfcrypt/src/des3.c ****         secDesc->pointer7 = NULL;
 580:../src/wolfcrypt/src/des3.c ****         secDesc->nextDescriptorPtr = NULL;
 581:../src/wolfcrypt/src/des3.c **** 
 582:../src/wolfcrypt/src/des3.c ****         while(sz) {
 583:../src/wolfcrypt/src/des3.c ****             XMEMCPY(secIV, iv, secDesc->length2);
 584:../src/wolfcrypt/src/des3.c ****             if((sz%DES_BUFFER_SIZE) == sz) {
 585:../src/wolfcrypt/src/des3.c ****                 size = sz;
 586:../src/wolfcrypt/src/des3.c ****                 sz = 0;
 587:../src/wolfcrypt/src/des3.c ****             } else {
 588:../src/wolfcrypt/src/des3.c ****                 size = DES_BUFFER_SIZE;
 589:../src/wolfcrypt/src/des3.c ****                 sz -= DES_BUFFER_SIZE;
 590:../src/wolfcrypt/src/des3.c ****             }
 591:../src/wolfcrypt/src/des3.c **** 
 592:../src/wolfcrypt/src/des3.c ****             XMEMCPY(desBuffIn, in, size);
 593:../src/wolfcrypt/src/des3.c ****             XMEMCPY(secKey, key, secDesc->length3);
 594:../src/wolfcrypt/src/des3.c **** 
 595:../src/wolfcrypt/src/des3.c ****             secDesc->header = desc;
 596:../src/wolfcrypt/src/des3.c ****             secDesc->length4 = size;
 597:../src/wolfcrypt/src/des3.c ****             secDesc->length5 = size;
 598:../src/wolfcrypt/src/des3.c ****             /* Point SEC to the location of the descriptor */
 599:../src/wolfcrypt/src/des3.c ****             MCF_SEC_FR0 = (uint32)secDesc;
 600:../src/wolfcrypt/src/des3.c ****             /* Initialize SEC and wait for encryption to complete */
 601:../src/wolfcrypt/src/des3.c ****             MCF_SEC_CCCR0 = 0x0000001a;
 602:../src/wolfcrypt/src/des3.c ****             /* poll SISR to determine when channel is complete */
 603:../src/wolfcrypt/src/des3.c ****             v=0;
 604:../src/wolfcrypt/src/des3.c ****             while((secDesc->header>> 24) != 0xff) {
 605:../src/wolfcrypt/src/des3.c ****                 if(v++ > 1000)break;
 606:../src/wolfcrypt/src/des3.c ****             }
 607:../src/wolfcrypt/src/des3.c **** 
 608:../src/wolfcrypt/src/des3.c ****         #ifdef DEBUG_WOLFSSL
 609:../src/wolfcrypt/src/des3.c ****             ret = MCF_SEC_SISRH;
 610:../src/wolfcrypt/src/des3.c ****             stat1 = MCF_SEC_DSR;
 611:../src/wolfcrypt/src/des3.c ****             stat2 = MCF_SEC_DISR;
 612:../src/wolfcrypt/src/des3.c ****             if(ret & 0xe0000000) {
 613:../src/wolfcrypt/src/des3.c ****                 /* db_printf("Des_Cbc(%x):ISRH=%08x, DSR=%08x, DISR=%08x\n", desc, ret, stat1, stat
 614:../src/wolfcrypt/src/des3.c ****             }
 615:../src/wolfcrypt/src/des3.c ****         #endif
 616:../src/wolfcrypt/src/des3.c **** 
 617:../src/wolfcrypt/src/des3.c ****             XMEMCPY(out, desBuffOut, size);
 618:../src/wolfcrypt/src/des3.c **** 
 619:../src/wolfcrypt/src/des3.c ****             if ((desc==SEC_DESC_DES3_CBC_ENCRYPT)||(desc==SEC_DESC_DES_CBC_ENCRYPT)) {
 620:../src/wolfcrypt/src/des3.c ****                 XMEMCPY((void*)iv, (void*)&(out[size-secDesc->length2]), secDesc->length2);
 621:../src/wolfcrypt/src/des3.c ****             } else {
 622:../src/wolfcrypt/src/des3.c ****                 XMEMCPY((void*)iv, (void*)&(in[size-secDesc->length2]), secDesc->length2);
 623:../src/wolfcrypt/src/des3.c ****             }
 624:../src/wolfcrypt/src/des3.c **** 
 625:../src/wolfcrypt/src/des3.c ****             in  += size;
 626:../src/wolfcrypt/src/des3.c ****             out += size;
 627:../src/wolfcrypt/src/des3.c **** 
 628:../src/wolfcrypt/src/des3.c ****         }
 629:../src/wolfcrypt/src/des3.c ****         wc_UnLockMutex(&Mutex_DesSEC) ;
 630:../src/wolfcrypt/src/des3.c **** 
 631:../src/wolfcrypt/src/des3.c ****     }
 632:../src/wolfcrypt/src/des3.c **** 
 633:../src/wolfcrypt/src/des3.c **** 
 634:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcEncrypt(Des* des, byte* out, const byte* in, word32 sz)
 635:../src/wolfcrypt/src/des3.c ****     {
 636:../src/wolfcrypt/src/des3.c ****         wc_Des_Cbc(out, in, sz,  (byte *)des->key,  (byte *)des->reg, SEC_DESC_DES_CBC_ENCRYPT);
 637:../src/wolfcrypt/src/des3.c ****         return 0;
 638:../src/wolfcrypt/src/des3.c ****     }
 639:../src/wolfcrypt/src/des3.c **** 
 640:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcDecrypt(Des* des, byte* out, const byte* in, word32 sz)
 641:../src/wolfcrypt/src/des3.c ****     {
 642:../src/wolfcrypt/src/des3.c ****         wc_Des_Cbc(out, in, sz,   (byte *)des->key,  (byte *)des->reg, SEC_DESC_DES_CBC_DECRYPT);
 643:../src/wolfcrypt/src/des3.c ****         return 0;
 644:../src/wolfcrypt/src/des3.c ****     }
 645:../src/wolfcrypt/src/des3.c **** 
 646:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcEncrypt(Des3* des3, byte* out, const byte* in, word32 sz)
 647:../src/wolfcrypt/src/des3.c ****     {
 648:../src/wolfcrypt/src/des3.c ****         wc_Des_Cbc(out, in, sz,  (byte *)des3->key,  (byte *)des3->reg, SEC_DESC_DES3_CBC_ENCRYPT);
 649:../src/wolfcrypt/src/des3.c ****         return 0;
 650:../src/wolfcrypt/src/des3.c ****     }
 651:../src/wolfcrypt/src/des3.c **** 
 652:../src/wolfcrypt/src/des3.c **** 
 653:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcDecrypt(Des3* des3, byte* out, const byte* in, word32 sz)
 654:../src/wolfcrypt/src/des3.c ****     {
 655:../src/wolfcrypt/src/des3.c ****         wc_Des_Cbc(out, in, sz,   (byte *)des3->key,  (byte *)des3->reg, SEC_DESC_DES3_CBC_DECRYPT)
 656:../src/wolfcrypt/src/des3.c ****         return 0;
 657:../src/wolfcrypt/src/des3.c ****     }
 658:../src/wolfcrypt/src/des3.c **** 
 659:../src/wolfcrypt/src/des3.c ****     static void setParity(byte *buf, int len)
 660:../src/wolfcrypt/src/des3.c ****     {
 661:../src/wolfcrypt/src/des3.c ****         int i, j;
 662:../src/wolfcrypt/src/des3.c ****         byte v;
 663:../src/wolfcrypt/src/des3.c ****         int bits;
 664:../src/wolfcrypt/src/des3.c **** 
 665:../src/wolfcrypt/src/des3.c ****         for (i=0; i<len; i++) {
 666:../src/wolfcrypt/src/des3.c ****             v = buf[i] >> 1;
 667:../src/wolfcrypt/src/des3.c ****             buf[i] = v << 1;
 668:../src/wolfcrypt/src/des3.c ****             bits = 0;
 669:../src/wolfcrypt/src/des3.c ****             for (j=0; j<7; j++) {
 670:../src/wolfcrypt/src/des3.c ****                 bits += (v&0x1);
 671:../src/wolfcrypt/src/des3.c ****                 v = v >> 1;
 672:../src/wolfcrypt/src/des3.c ****             }
 673:../src/wolfcrypt/src/des3.c ****             buf[i] |= (1 - (bits&0x1));
 674:../src/wolfcrypt/src/des3.c ****         }
 675:../src/wolfcrypt/src/des3.c **** 
 676:../src/wolfcrypt/src/des3.c ****     }
 677:../src/wolfcrypt/src/des3.c **** 
 678:../src/wolfcrypt/src/des3.c ****     int wc_Des_SetKey(Des* des, const byte* key, const byte* iv, int dir)
 679:../src/wolfcrypt/src/des3.c ****     {
 680:../src/wolfcrypt/src/des3.c ****         if(desBuffIn == NULL) {
 681:../src/wolfcrypt/src/des3.c ****         #if defined (HAVE_THREADX)
 682:../src/wolfcrypt/src/des3.c ****             int s1, s2, s3, s4, s5;
 683:../src/wolfcrypt/src/des3.c ****             s5 = tx_byte_allocate(&mp_ncached,(void *)&secDesc,
 684:../src/wolfcrypt/src/des3.c ****                                                          sizeof(SECdescriptorType), TX_NO_WAIT);
 685:../src/wolfcrypt/src/des3.c ****             s1 = tx_byte_allocate(&mp_ncached,(void *)&desBuffIn,  DES_BUFFER_SIZE, TX_NO_WAIT);
 686:../src/wolfcrypt/src/des3.c ****             s2 = tx_byte_allocate(&mp_ncached,(void *)&desBuffOut, DES_BUFFER_SIZE, TX_NO_WAIT);
 687:../src/wolfcrypt/src/des3.c ****             /* Don't know des or des3 to be used. Allocate larger buffers */
 688:../src/wolfcrypt/src/des3.c ****             s3 = tx_byte_allocate(&mp_ncached,(void *)&secKey,     DES3_KEYLEN,TX_NO_WAIT);
 689:../src/wolfcrypt/src/des3.c ****             s4 = tx_byte_allocate(&mp_ncached,(void *)&secIV,      DES3_IVLEN,  TX_NO_WAIT);
 690:../src/wolfcrypt/src/des3.c ****         #else
 691:../src/wolfcrypt/src/des3.c ****             #warning "Allocate non-Cache buffers"
 692:../src/wolfcrypt/src/des3.c ****         #endif
 693:../src/wolfcrypt/src/des3.c **** 
 694:../src/wolfcrypt/src/des3.c ****             InitMutex(&Mutex_DesSEC);
 695:../src/wolfcrypt/src/des3.c ****         }
 696:../src/wolfcrypt/src/des3.c **** 
 697:../src/wolfcrypt/src/des3.c ****         XMEMCPY(des->key, key, DES_KEYLEN);
 698:../src/wolfcrypt/src/des3.c ****         setParity((byte *)des->key, DES_KEYLEN);
 699:../src/wolfcrypt/src/des3.c **** 
 700:../src/wolfcrypt/src/des3.c ****         if (iv) {
 701:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->reg, iv, DES_IVLEN);
 702:../src/wolfcrypt/src/des3.c ****         }   else {
 703:../src/wolfcrypt/src/des3.c ****             XMEMSET(des->reg, 0x0, DES_IVLEN);
 704:../src/wolfcrypt/src/des3.c ****         }
 705:../src/wolfcrypt/src/des3.c ****         return 0;
 706:../src/wolfcrypt/src/des3.c ****     }
 707:../src/wolfcrypt/src/des3.c **** 
 708:../src/wolfcrypt/src/des3.c ****     int wc_Des3_SetKey(Des3* des3, const byte* key, const byte* iv, int dir)
 709:../src/wolfcrypt/src/des3.c ****     {
 710:../src/wolfcrypt/src/des3.c ****         if (des3 == NULL || key == NULL) {
 711:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
 712:../src/wolfcrypt/src/des3.c ****         }
 713:../src/wolfcrypt/src/des3.c **** 
 714:../src/wolfcrypt/src/des3.c ****         if (desBuffIn == NULL) {
 715:../src/wolfcrypt/src/des3.c ****         #if defined (HAVE_THREADX)
 716:../src/wolfcrypt/src/des3.c ****             int s1, s2, s3, s4, s5;
 717:../src/wolfcrypt/src/des3.c ****             s5 = tx_byte_allocate(&mp_ncached,(void *)&secDesc,
 718:../src/wolfcrypt/src/des3.c ****                                                          sizeof(SECdescriptorType), TX_NO_WAIT);
 719:../src/wolfcrypt/src/des3.c ****             s1 = tx_byte_allocate(&mp_ncached,(void *)&desBuffIn,  DES_BUFFER_SIZE, TX_NO_WAIT);
 720:../src/wolfcrypt/src/des3.c ****             s2 = tx_byte_allocate(&mp_ncached,(void *)&desBuffOut, DES_BUFFER_SIZE, TX_NO_WAIT);
 721:../src/wolfcrypt/src/des3.c ****             s3 = tx_byte_allocate(&mp_ncached,(void *)&secKey,     DES3_KEYLEN,TX_NO_WAIT);
 722:../src/wolfcrypt/src/des3.c ****             s4 = tx_byte_allocate(&mp_ncached,(void *)&secIV,      DES3_IVLEN,  TX_NO_WAIT);
 723:../src/wolfcrypt/src/des3.c ****         #else
 724:../src/wolfcrypt/src/des3.c ****             #warning "Allocate non-Cache buffers"
 725:../src/wolfcrypt/src/des3.c ****         #endif
 726:../src/wolfcrypt/src/des3.c **** 
 727:../src/wolfcrypt/src/des3.c ****             InitMutex(&Mutex_DesSEC);
 728:../src/wolfcrypt/src/des3.c ****         }
 729:../src/wolfcrypt/src/des3.c **** 
 730:../src/wolfcrypt/src/des3.c ****         XMEMCPY(des3->key[0], key, DES3_KEYLEN);
 731:../src/wolfcrypt/src/des3.c ****         setParity((byte *)des3->key[0], DES3_KEYLEN);
 732:../src/wolfcrypt/src/des3.c **** 
 733:../src/wolfcrypt/src/des3.c ****         if (iv) {
 734:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des3->reg, iv, DES3_IVLEN);
 735:../src/wolfcrypt/src/des3.c ****         }   else {
 736:../src/wolfcrypt/src/des3.c ****             XMEMSET(des3->reg, 0x0, DES3_IVLEN);
 737:../src/wolfcrypt/src/des3.c ****         }
 738:../src/wolfcrypt/src/des3.c ****         return 0;
 739:../src/wolfcrypt/src/des3.c **** 
 740:../src/wolfcrypt/src/des3.c ****     }
 741:../src/wolfcrypt/src/des3.c **** #elif defined(FREESCALE_LTC_DES)
 742:../src/wolfcrypt/src/des3.c **** 
 743:../src/wolfcrypt/src/des3.c ****     #include "fsl_ltc.h"
 744:../src/wolfcrypt/src/des3.c ****     int wc_Des_SetKey(Des* des, const byte* key, const byte* iv, int dir)
 745:../src/wolfcrypt/src/des3.c ****     {
 746:../src/wolfcrypt/src/des3.c ****         byte* dkey;
 747:../src/wolfcrypt/src/des3.c **** 
 748:../src/wolfcrypt/src/des3.c ****         if (des == NULL || key == NULL) {
 749:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
 750:../src/wolfcrypt/src/des3.c ****         }
 751:../src/wolfcrypt/src/des3.c **** 
 752:../src/wolfcrypt/src/des3.c ****         dkey = (byte*)des->key;
 753:../src/wolfcrypt/src/des3.c **** 
 754:../src/wolfcrypt/src/des3.c ****         XMEMCPY(dkey, key, 8);
 755:../src/wolfcrypt/src/des3.c **** 
 756:../src/wolfcrypt/src/des3.c ****         wc_Des_SetIV(des, iv);
 757:../src/wolfcrypt/src/des3.c **** 
 758:../src/wolfcrypt/src/des3.c ****         return 0;
 759:../src/wolfcrypt/src/des3.c ****     }
 760:../src/wolfcrypt/src/des3.c **** 
 761:../src/wolfcrypt/src/des3.c ****     int wc_Des3_SetKey(Des3* des, const byte* key, const byte* iv, int dir)
 762:../src/wolfcrypt/src/des3.c ****     {
 763:../src/wolfcrypt/src/des3.c ****         int ret = 0;
 764:../src/wolfcrypt/src/des3.c ****         byte* dkey1;
 765:../src/wolfcrypt/src/des3.c ****         byte* dkey2;
 766:../src/wolfcrypt/src/des3.c ****         byte* dkey3;
 767:../src/wolfcrypt/src/des3.c **** 
 768:../src/wolfcrypt/src/des3.c ****         if (des == NULL || key == NULL) {
 769:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
 770:../src/wolfcrypt/src/des3.c ****         }
 771:../src/wolfcrypt/src/des3.c **** 
 772:../src/wolfcrypt/src/des3.c ****         dkey1 = (byte*)des->key[0];
 773:../src/wolfcrypt/src/des3.c ****         dkey2 = (byte*)des->key[1];
 774:../src/wolfcrypt/src/des3.c ****         dkey3 = (byte*)des->key[2];
 775:../src/wolfcrypt/src/des3.c **** 
 776:../src/wolfcrypt/src/des3.c ****         XMEMCPY(dkey1, key, 8);         /* set key 1 */
 777:../src/wolfcrypt/src/des3.c ****         XMEMCPY(dkey2, key + 8, 8);     /* set key 2 */
 778:../src/wolfcrypt/src/des3.c ****         XMEMCPY(dkey3, key + 16, 8);    /* set key 3 */
 779:../src/wolfcrypt/src/des3.c **** 
 780:../src/wolfcrypt/src/des3.c ****         ret = wc_Des3_SetIV(des, iv);
 781:../src/wolfcrypt/src/des3.c ****         if (ret != 0)
 782:../src/wolfcrypt/src/des3.c ****             return ret;
 783:../src/wolfcrypt/src/des3.c **** 
 784:../src/wolfcrypt/src/des3.c ****         return ret;
 785:../src/wolfcrypt/src/des3.c ****     }
 786:../src/wolfcrypt/src/des3.c **** 
 787:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcEncrypt(Des* des, byte* out, const byte* in, word32 sz)
 788:../src/wolfcrypt/src/des3.c ****     {
 789:../src/wolfcrypt/src/des3.c ****         status_t status;
 790:../src/wolfcrypt/src/des3.c ****         status = LTC_DES_EncryptCbc(LTC_BASE, in, out, sz, (byte*)des->reg, (byte*)des->key);
 791:../src/wolfcrypt/src/des3.c ****         if (status == kStatus_Success)
 792:../src/wolfcrypt/src/des3.c ****             return 0;
 793:../src/wolfcrypt/src/des3.c ****         else
 794:../src/wolfcrypt/src/des3.c ****             return -1;
 795:../src/wolfcrypt/src/des3.c ****     }
 796:../src/wolfcrypt/src/des3.c **** 
 797:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcDecrypt(Des* des, byte* out, const byte* in, word32 sz)
 798:../src/wolfcrypt/src/des3.c ****     {
 799:../src/wolfcrypt/src/des3.c ****         status_t status;
 800:../src/wolfcrypt/src/des3.c ****         status = LTC_DES_DecryptCbc(LTC_BASE, in, out, sz, (byte*)des->reg, (byte*)des->key);
 801:../src/wolfcrypt/src/des3.c ****         if (status == kStatus_Success)
 802:../src/wolfcrypt/src/des3.c ****             return 0;
 803:../src/wolfcrypt/src/des3.c ****         else
 804:../src/wolfcrypt/src/des3.c ****             return -1;
 805:../src/wolfcrypt/src/des3.c ****     }
 806:../src/wolfcrypt/src/des3.c **** 
 807:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcEncrypt(Des3* des, byte* out, const byte* in, word32 sz)
 808:../src/wolfcrypt/src/des3.c ****     {
 809:../src/wolfcrypt/src/des3.c ****         status_t status;
 810:../src/wolfcrypt/src/des3.c ****         status = LTC_DES3_EncryptCbc(LTC_BASE,
 811:../src/wolfcrypt/src/des3.c ****                                  in,
 812:../src/wolfcrypt/src/des3.c ****                                  out,
 813:../src/wolfcrypt/src/des3.c ****                                  sz,
 814:../src/wolfcrypt/src/des3.c ****                                  (byte*)des->reg,
 815:../src/wolfcrypt/src/des3.c ****                                  (byte*)des->key[0],
 816:../src/wolfcrypt/src/des3.c ****                                  (byte*)des->key[1],
 817:../src/wolfcrypt/src/des3.c ****                                  (byte*)des->key[2]);
 818:../src/wolfcrypt/src/des3.c ****         if (status == kStatus_Success)
 819:../src/wolfcrypt/src/des3.c ****             return 0;
 820:../src/wolfcrypt/src/des3.c ****         else
 821:../src/wolfcrypt/src/des3.c ****             return -1;
 822:../src/wolfcrypt/src/des3.c ****     }
 823:../src/wolfcrypt/src/des3.c **** 
 824:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcDecrypt(Des3* des, byte* out, const byte* in, word32 sz)
 825:../src/wolfcrypt/src/des3.c ****     {
 826:../src/wolfcrypt/src/des3.c ****         status_t status;
 827:../src/wolfcrypt/src/des3.c ****         status = LTC_DES3_DecryptCbc(LTC_BASE,
 828:../src/wolfcrypt/src/des3.c ****                                  in,
 829:../src/wolfcrypt/src/des3.c ****                                  out,
 830:../src/wolfcrypt/src/des3.c ****                                  sz,
 831:../src/wolfcrypt/src/des3.c ****                                  (byte*)des->reg,
 832:../src/wolfcrypt/src/des3.c ****                                  (byte*)des->key[0],
 833:../src/wolfcrypt/src/des3.c ****                                  (byte*)des->key[1],
 834:../src/wolfcrypt/src/des3.c ****                                  (byte*)des->key[2]);
 835:../src/wolfcrypt/src/des3.c ****         if (status == kStatus_Success)
 836:../src/wolfcrypt/src/des3.c ****             return 0;
 837:../src/wolfcrypt/src/des3.c ****         else
 838:../src/wolfcrypt/src/des3.c ****             return -1;
 839:../src/wolfcrypt/src/des3.c **** 
 840:../src/wolfcrypt/src/des3.c ****     }
 841:../src/wolfcrypt/src/des3.c **** 
 842:../src/wolfcrypt/src/des3.c **** #elif defined(FREESCALE_MMCAU)
 843:../src/wolfcrypt/src/des3.c ****     /*
 844:../src/wolfcrypt/src/des3.c ****      * Freescale mmCAU hardware DES/3DES support through the CAU/mmCAU library.
 845:../src/wolfcrypt/src/des3.c ****      * Documentation located in ColdFire/ColdFire+ CAU and Kinetis mmCAU
 846:../src/wolfcrypt/src/des3.c ****      * Software Library User Guide (See note in README).
 847:../src/wolfcrypt/src/des3.c ****      */
 848:../src/wolfcrypt/src/des3.c ****     #ifdef FREESCALE_MMCAU_CLASSIC
 849:../src/wolfcrypt/src/des3.c ****         #include "cau_api.h"
 850:../src/wolfcrypt/src/des3.c ****     #else
 851:../src/wolfcrypt/src/des3.c ****         #include "fsl_mmcau.h"
 852:../src/wolfcrypt/src/des3.c ****     #endif
 853:../src/wolfcrypt/src/des3.c **** 
 854:../src/wolfcrypt/src/des3.c ****     const unsigned char parityLookup[128] = {
 855:../src/wolfcrypt/src/des3.c ****         1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,
 856:../src/wolfcrypt/src/des3.c ****         0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,
 857:../src/wolfcrypt/src/des3.c ****         0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,
 858:../src/wolfcrypt/src/des3.c ****         1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0
 859:../src/wolfcrypt/src/des3.c ****      };
 860:../src/wolfcrypt/src/des3.c **** 
 861:../src/wolfcrypt/src/des3.c ****     int wc_Des_SetKey(Des* des, const byte* key, const byte* iv, int dir)
 862:../src/wolfcrypt/src/des3.c ****     {
 863:../src/wolfcrypt/src/des3.c ****         int i = 0;
 864:../src/wolfcrypt/src/des3.c ****         byte* dkey;
 865:../src/wolfcrypt/src/des3.c **** 
 866:../src/wolfcrypt/src/des3.c **** 
 867:../src/wolfcrypt/src/des3.c ****         if (des == NULL || key == NULL) {
 868:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
 869:../src/wolfcrypt/src/des3.c ****         }
 870:../src/wolfcrypt/src/des3.c **** 
 871:../src/wolfcrypt/src/des3.c ****         dkey = (byte*)des->key;
 872:../src/wolfcrypt/src/des3.c **** 
 873:../src/wolfcrypt/src/des3.c ****         XMEMCPY(dkey, key, 8);
 874:../src/wolfcrypt/src/des3.c **** 
 875:../src/wolfcrypt/src/des3.c ****         wc_Des_SetIV(des, iv);
 876:../src/wolfcrypt/src/des3.c **** 
 877:../src/wolfcrypt/src/des3.c ****         /* fix key parity, if needed */
 878:../src/wolfcrypt/src/des3.c ****         for (i = 0; i < 8; i++) {
 879:../src/wolfcrypt/src/des3.c ****             dkey[i] = ((dkey[i] & 0xFE) | parityLookup[dkey[i] >> 1]);
 880:../src/wolfcrypt/src/des3.c ****         }
 881:../src/wolfcrypt/src/des3.c **** 
 882:../src/wolfcrypt/src/des3.c ****         return 0;
 883:../src/wolfcrypt/src/des3.c ****     }
 884:../src/wolfcrypt/src/des3.c **** 
 885:../src/wolfcrypt/src/des3.c ****     int wc_Des3_SetKey(Des3* des, const byte* key, const byte* iv, int dir)
 886:../src/wolfcrypt/src/des3.c ****     {
 887:../src/wolfcrypt/src/des3.c ****         int i = 0, ret = 0;
 888:../src/wolfcrypt/src/des3.c ****         byte* dkey1;
 889:../src/wolfcrypt/src/des3.c ****         byte* dkey2;
 890:../src/wolfcrypt/src/des3.c ****         byte* dkey3;
 891:../src/wolfcrypt/src/des3.c **** 
 892:../src/wolfcrypt/src/des3.c ****         if (des == NULL || key == NULL) {
 893:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
 894:../src/wolfcrypt/src/des3.c ****         }
 895:../src/wolfcrypt/src/des3.c **** 
 896:../src/wolfcrypt/src/des3.c ****         dkey1 = (byte*)des->key[0];
 897:../src/wolfcrypt/src/des3.c ****         dkey2 = (byte*)des->key[1];
 898:../src/wolfcrypt/src/des3.c ****         dkey3 = (byte*)des->key[2];
 899:../src/wolfcrypt/src/des3.c **** 
 900:../src/wolfcrypt/src/des3.c ****         XMEMCPY(dkey1, key, 8);         /* set key 1 */
 901:../src/wolfcrypt/src/des3.c ****         XMEMCPY(dkey2, key + 8, 8);     /* set key 2 */
 902:../src/wolfcrypt/src/des3.c ****         XMEMCPY(dkey3, key + 16, 8);    /* set key 3 */
 903:../src/wolfcrypt/src/des3.c **** 
 904:../src/wolfcrypt/src/des3.c ****         ret = wc_Des3_SetIV(des, iv);
 905:../src/wolfcrypt/src/des3.c ****         if (ret != 0)
 906:../src/wolfcrypt/src/des3.c ****             return ret;
 907:../src/wolfcrypt/src/des3.c **** 
 908:../src/wolfcrypt/src/des3.c ****         /* fix key parity if needed */
 909:../src/wolfcrypt/src/des3.c ****         for (i = 0; i < 8; i++)
 910:../src/wolfcrypt/src/des3.c ****            dkey1[i] = ((dkey1[i] & 0xFE) | parityLookup[dkey1[i] >> 1]);
 911:../src/wolfcrypt/src/des3.c **** 
 912:../src/wolfcrypt/src/des3.c ****         for (i = 0; i < 8; i++)
 913:../src/wolfcrypt/src/des3.c ****            dkey2[i] = ((dkey2[i] & 0xFE) | parityLookup[dkey2[i] >> 1]);
 914:../src/wolfcrypt/src/des3.c **** 
 915:../src/wolfcrypt/src/des3.c ****         for (i = 0; i < 8; i++)
 916:../src/wolfcrypt/src/des3.c ****            dkey3[i] = ((dkey3[i] & 0xFE) | parityLookup[dkey3[i] >> 1]);
 917:../src/wolfcrypt/src/des3.c **** 
 918:../src/wolfcrypt/src/des3.c ****         return ret;
 919:../src/wolfcrypt/src/des3.c ****     }
 920:../src/wolfcrypt/src/des3.c **** 
 921:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcEncrypt(Des* des, byte* out, const byte* in, word32 sz)
 922:../src/wolfcrypt/src/des3.c ****     {
 923:../src/wolfcrypt/src/des3.c ****         int i;
 924:../src/wolfcrypt/src/des3.c ****         int offset = 0;
 925:../src/wolfcrypt/src/des3.c ****         int len = sz;
 926:../src/wolfcrypt/src/des3.c ****         int ret = 0;
 927:../src/wolfcrypt/src/des3.c ****         byte *iv;
 928:../src/wolfcrypt/src/des3.c ****         byte temp_block[DES_BLOCK_SIZE];
 929:../src/wolfcrypt/src/des3.c **** 
 930:../src/wolfcrypt/src/des3.c ****         iv = (byte*)des->reg;
 931:../src/wolfcrypt/src/des3.c **** 
 932:../src/wolfcrypt/src/des3.c ****     #ifdef FREESCALE_MMCAU_CLASSIC
 933:../src/wolfcrypt/src/des3.c ****         if ((wc_ptr_t)out % WOLFSSL_MMCAU_ALIGNMENT) {
 934:../src/wolfcrypt/src/des3.c ****             WOLFSSL_MSG("Bad cau_des_encrypt alignment");
 935:../src/wolfcrypt/src/des3.c ****             return BAD_ALIGN_E;
 936:../src/wolfcrypt/src/des3.c ****         }
 937:../src/wolfcrypt/src/des3.c ****     #endif
 938:../src/wolfcrypt/src/des3.c **** 
 939:../src/wolfcrypt/src/des3.c ****         while (len > 0)
 940:../src/wolfcrypt/src/des3.c ****         {
 941:../src/wolfcrypt/src/des3.c ****             XMEMCPY(temp_block, in + offset, DES_BLOCK_SIZE);
 942:../src/wolfcrypt/src/des3.c **** 
 943:../src/wolfcrypt/src/des3.c ****             /* XOR block with IV for CBC */
 944:../src/wolfcrypt/src/des3.c ****             for (i = 0; i < DES_BLOCK_SIZE; i++)
 945:../src/wolfcrypt/src/des3.c ****                 temp_block[i] ^= iv[i];
 946:../src/wolfcrypt/src/des3.c **** 
 947:../src/wolfcrypt/src/des3.c ****             ret = wolfSSL_CryptHwMutexLock();
 948:../src/wolfcrypt/src/des3.c ****             if(ret != 0) {
 949:../src/wolfcrypt/src/des3.c ****                 return ret;
 950:../src/wolfcrypt/src/des3.c ****             }
 951:../src/wolfcrypt/src/des3.c ****         #ifdef FREESCALE_MMCAU_CLASSIC
 952:../src/wolfcrypt/src/des3.c ****             cau_des_encrypt(temp_block, (byte*)des->key, out + offset);
 953:../src/wolfcrypt/src/des3.c ****         #else
 954:../src/wolfcrypt/src/des3.c ****             MMCAU_DES_EncryptEcb(temp_block, (byte*)des->key, out + offset);
 955:../src/wolfcrypt/src/des3.c ****         #endif
 956:../src/wolfcrypt/src/des3.c ****             wolfSSL_CryptHwMutexUnLock();
 957:../src/wolfcrypt/src/des3.c **** 
 958:../src/wolfcrypt/src/des3.c ****             len    -= DES_BLOCK_SIZE;
 959:../src/wolfcrypt/src/des3.c ****             offset += DES_BLOCK_SIZE;
 960:../src/wolfcrypt/src/des3.c **** 
 961:../src/wolfcrypt/src/des3.c ****             /* store IV for next block */
 962:../src/wolfcrypt/src/des3.c ****             XMEMCPY(iv, out + offset - DES_BLOCK_SIZE, DES_BLOCK_SIZE);
 963:../src/wolfcrypt/src/des3.c ****         }
 964:../src/wolfcrypt/src/des3.c **** 
 965:../src/wolfcrypt/src/des3.c ****         return ret;
 966:../src/wolfcrypt/src/des3.c ****     }
 967:../src/wolfcrypt/src/des3.c **** 
 968:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcDecrypt(Des* des, byte* out, const byte* in, word32 sz)
 969:../src/wolfcrypt/src/des3.c ****     {
 970:../src/wolfcrypt/src/des3.c ****         int i;
 971:../src/wolfcrypt/src/des3.c ****         int offset = 0;
 972:../src/wolfcrypt/src/des3.c ****         int len = sz;
 973:../src/wolfcrypt/src/des3.c ****         int ret = 0;
 974:../src/wolfcrypt/src/des3.c ****         byte* iv;
 975:../src/wolfcrypt/src/des3.c ****         byte temp_block[DES_BLOCK_SIZE];
 976:../src/wolfcrypt/src/des3.c **** 
 977:../src/wolfcrypt/src/des3.c ****         iv = (byte*)des->reg;
 978:../src/wolfcrypt/src/des3.c **** 
 979:../src/wolfcrypt/src/des3.c ****     #ifdef FREESCALE_MMCAU_CLASSIC
 980:../src/wolfcrypt/src/des3.c ****         if ((wc_ptr_t)out % WOLFSSL_MMCAU_ALIGNMENT) {
 981:../src/wolfcrypt/src/des3.c ****             WOLFSSL_MSG("Bad cau_des_decrypt alignment");
 982:../src/wolfcrypt/src/des3.c ****             return BAD_ALIGN_E;
 983:../src/wolfcrypt/src/des3.c ****         }
 984:../src/wolfcrypt/src/des3.c ****     #endif
 985:../src/wolfcrypt/src/des3.c **** 
 986:../src/wolfcrypt/src/des3.c ****         while (len > 0)
 987:../src/wolfcrypt/src/des3.c ****         {
 988:../src/wolfcrypt/src/des3.c ****             XMEMCPY(temp_block, in + offset, DES_BLOCK_SIZE);
 989:../src/wolfcrypt/src/des3.c **** 
 990:../src/wolfcrypt/src/des3.c ****             ret = wolfSSL_CryptHwMutexLock();
 991:../src/wolfcrypt/src/des3.c ****             if(ret != 0) {
 992:../src/wolfcrypt/src/des3.c ****                 return ret;
 993:../src/wolfcrypt/src/des3.c ****             }
 994:../src/wolfcrypt/src/des3.c **** 
 995:../src/wolfcrypt/src/des3.c ****         #ifdef FREESCALE_MMCAU_CLASSIC
 996:../src/wolfcrypt/src/des3.c ****             cau_des_decrypt(in + offset, (byte*)des->key, out + offset);
 997:../src/wolfcrypt/src/des3.c ****         #else
 998:../src/wolfcrypt/src/des3.c ****             MMCAU_DES_DecryptEcb(in + offset, (byte*)des->key, out + offset);
 999:../src/wolfcrypt/src/des3.c ****         #endif
1000:../src/wolfcrypt/src/des3.c ****             wolfSSL_CryptHwMutexUnLock();
1001:../src/wolfcrypt/src/des3.c **** 
1002:../src/wolfcrypt/src/des3.c ****             /* XOR block with IV for CBC */
1003:../src/wolfcrypt/src/des3.c ****             for (i = 0; i < DES_BLOCK_SIZE; i++)
1004:../src/wolfcrypt/src/des3.c ****                 (out + offset)[i] ^= iv[i];
1005:../src/wolfcrypt/src/des3.c **** 
1006:../src/wolfcrypt/src/des3.c ****             /* store IV for next block */
1007:../src/wolfcrypt/src/des3.c ****             XMEMCPY(iv, temp_block, DES_BLOCK_SIZE);
1008:../src/wolfcrypt/src/des3.c **** 
1009:../src/wolfcrypt/src/des3.c ****             len     -= DES_BLOCK_SIZE;
1010:../src/wolfcrypt/src/des3.c ****             offset += DES_BLOCK_SIZE;
1011:../src/wolfcrypt/src/des3.c ****         }
1012:../src/wolfcrypt/src/des3.c **** 
1013:../src/wolfcrypt/src/des3.c ****         return ret;
1014:../src/wolfcrypt/src/des3.c ****     }
1015:../src/wolfcrypt/src/des3.c **** 
1016:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcEncrypt(Des3* des, byte* out, const byte* in, word32 sz)
1017:../src/wolfcrypt/src/des3.c ****     {
1018:../src/wolfcrypt/src/des3.c ****         int i;
1019:../src/wolfcrypt/src/des3.c ****         int offset = 0;
1020:../src/wolfcrypt/src/des3.c ****         int len = sz;
1021:../src/wolfcrypt/src/des3.c ****         int ret = 0;
1022:../src/wolfcrypt/src/des3.c **** 
1023:../src/wolfcrypt/src/des3.c ****         byte *iv;
1024:../src/wolfcrypt/src/des3.c ****         byte temp_block[DES_BLOCK_SIZE];
1025:../src/wolfcrypt/src/des3.c **** 
1026:../src/wolfcrypt/src/des3.c ****         iv = (byte*)des->reg;
1027:../src/wolfcrypt/src/des3.c **** 
1028:../src/wolfcrypt/src/des3.c ****     #ifdef FREESCALE_MMCAU_CLASSIC
1029:../src/wolfcrypt/src/des3.c ****         if ((wc_ptr_t)out % WOLFSSL_MMCAU_ALIGNMENT) {
1030:../src/wolfcrypt/src/des3.c ****             WOLFSSL_MSG("Bad 3ede cau_des_encrypt alignment");
1031:../src/wolfcrypt/src/des3.c ****             return BAD_ALIGN_E;
1032:../src/wolfcrypt/src/des3.c ****         }
1033:../src/wolfcrypt/src/des3.c ****     #endif
1034:../src/wolfcrypt/src/des3.c **** 
1035:../src/wolfcrypt/src/des3.c ****         while (len > 0)
1036:../src/wolfcrypt/src/des3.c ****         {
1037:../src/wolfcrypt/src/des3.c ****             XMEMCPY(temp_block, in + offset, DES_BLOCK_SIZE);
1038:../src/wolfcrypt/src/des3.c **** 
1039:../src/wolfcrypt/src/des3.c ****             /* XOR block with IV for CBC */
1040:../src/wolfcrypt/src/des3.c ****             for (i = 0; i < DES_BLOCK_SIZE; i++)
1041:../src/wolfcrypt/src/des3.c ****                 temp_block[i] ^= iv[i];
1042:../src/wolfcrypt/src/des3.c **** 
1043:../src/wolfcrypt/src/des3.c ****             ret = wolfSSL_CryptHwMutexLock();
1044:../src/wolfcrypt/src/des3.c ****             if(ret != 0) {
1045:../src/wolfcrypt/src/des3.c ****                 return ret;
1046:../src/wolfcrypt/src/des3.c ****             }
1047:../src/wolfcrypt/src/des3.c ****     #ifdef FREESCALE_MMCAU_CLASSIC
1048:../src/wolfcrypt/src/des3.c ****             cau_des_encrypt(temp_block,   (byte*)des->key[0], out + offset);
1049:../src/wolfcrypt/src/des3.c ****             cau_des_decrypt(out + offset, (byte*)des->key[1], out + offset);
1050:../src/wolfcrypt/src/des3.c ****             cau_des_encrypt(out + offset, (byte*)des->key[2], out + offset);
1051:../src/wolfcrypt/src/des3.c ****     #else
1052:../src/wolfcrypt/src/des3.c ****             MMCAU_DES_EncryptEcb(temp_block  , (byte*)des->key[0], out + offset);
1053:../src/wolfcrypt/src/des3.c ****             MMCAU_DES_DecryptEcb(out + offset, (byte*)des->key[1], out + offset);
1054:../src/wolfcrypt/src/des3.c ****             MMCAU_DES_EncryptEcb(out + offset, (byte*)des->key[2], out + offset);
1055:../src/wolfcrypt/src/des3.c ****     #endif
1056:../src/wolfcrypt/src/des3.c ****             wolfSSL_CryptHwMutexUnLock();
1057:../src/wolfcrypt/src/des3.c **** 
1058:../src/wolfcrypt/src/des3.c ****             len    -= DES_BLOCK_SIZE;
1059:../src/wolfcrypt/src/des3.c ****             offset += DES_BLOCK_SIZE;
1060:../src/wolfcrypt/src/des3.c **** 
1061:../src/wolfcrypt/src/des3.c ****             /* store IV for next block */
1062:../src/wolfcrypt/src/des3.c ****             XMEMCPY(iv, out + offset - DES_BLOCK_SIZE, DES_BLOCK_SIZE);
1063:../src/wolfcrypt/src/des3.c ****         }
1064:../src/wolfcrypt/src/des3.c **** 
1065:../src/wolfcrypt/src/des3.c ****         return ret;
1066:../src/wolfcrypt/src/des3.c ****     }
1067:../src/wolfcrypt/src/des3.c **** 
1068:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcDecrypt(Des3* des, byte* out, const byte* in, word32 sz)
1069:../src/wolfcrypt/src/des3.c ****     {
1070:../src/wolfcrypt/src/des3.c ****         int i;
1071:../src/wolfcrypt/src/des3.c ****         int offset = 0;
1072:../src/wolfcrypt/src/des3.c ****         int len = sz;
1073:../src/wolfcrypt/src/des3.c ****         int ret = 0;
1074:../src/wolfcrypt/src/des3.c **** 
1075:../src/wolfcrypt/src/des3.c ****         byte* iv;
1076:../src/wolfcrypt/src/des3.c ****         byte temp_block[DES_BLOCK_SIZE];
1077:../src/wolfcrypt/src/des3.c **** 
1078:../src/wolfcrypt/src/des3.c ****         iv = (byte*)des->reg;
1079:../src/wolfcrypt/src/des3.c **** 
1080:../src/wolfcrypt/src/des3.c ****     #ifdef FREESCALE_MMCAU_CLASSIC
1081:../src/wolfcrypt/src/des3.c ****         if ((wc_ptr_t)out % WOLFSSL_MMCAU_ALIGNMENT) {
1082:../src/wolfcrypt/src/des3.c ****             WOLFSSL_MSG("Bad 3ede cau_des_decrypt alignment");
1083:../src/wolfcrypt/src/des3.c ****             return BAD_ALIGN_E;
1084:../src/wolfcrypt/src/des3.c ****         }
1085:../src/wolfcrypt/src/des3.c ****     #endif
1086:../src/wolfcrypt/src/des3.c **** 
1087:../src/wolfcrypt/src/des3.c ****         while (len > 0)
1088:../src/wolfcrypt/src/des3.c ****         {
1089:../src/wolfcrypt/src/des3.c ****             XMEMCPY(temp_block, in + offset, DES_BLOCK_SIZE);
1090:../src/wolfcrypt/src/des3.c **** 
1091:../src/wolfcrypt/src/des3.c ****             ret = wolfSSL_CryptHwMutexLock();
1092:../src/wolfcrypt/src/des3.c ****             if(ret != 0) {
1093:../src/wolfcrypt/src/des3.c ****                 return ret;
1094:../src/wolfcrypt/src/des3.c ****             }
1095:../src/wolfcrypt/src/des3.c ****         #ifdef FREESCALE_MMCAU_CLASSIC
1096:../src/wolfcrypt/src/des3.c ****             cau_des_decrypt(in + offset,  (byte*)des->key[2], out + offset);
1097:../src/wolfcrypt/src/des3.c ****             cau_des_encrypt(out + offset, (byte*)des->key[1], out + offset);
1098:../src/wolfcrypt/src/des3.c ****             cau_des_decrypt(out + offset, (byte*)des->key[0], out + offset);
1099:../src/wolfcrypt/src/des3.c ****         #else
1100:../src/wolfcrypt/src/des3.c ****             MMCAU_DES_DecryptEcb(in + offset , (byte*)des->key[2], out + offset);
1101:../src/wolfcrypt/src/des3.c ****             MMCAU_DES_EncryptEcb(out + offset, (byte*)des->key[1], out + offset);
1102:../src/wolfcrypt/src/des3.c ****             MMCAU_DES_DecryptEcb(out + offset, (byte*)des->key[0], out + offset);
1103:../src/wolfcrypt/src/des3.c ****         #endif
1104:../src/wolfcrypt/src/des3.c ****             wolfSSL_CryptHwMutexUnLock();
1105:../src/wolfcrypt/src/des3.c **** 
1106:../src/wolfcrypt/src/des3.c ****             /* XOR block with IV for CBC */
1107:../src/wolfcrypt/src/des3.c ****             for (i = 0; i < DES_BLOCK_SIZE; i++)
1108:../src/wolfcrypt/src/des3.c ****                 (out + offset)[i] ^= iv[i];
1109:../src/wolfcrypt/src/des3.c **** 
1110:../src/wolfcrypt/src/des3.c ****             /* store IV for next block */
1111:../src/wolfcrypt/src/des3.c ****             XMEMCPY(iv, temp_block, DES_BLOCK_SIZE);
1112:../src/wolfcrypt/src/des3.c **** 
1113:../src/wolfcrypt/src/des3.c ****             len    -= DES_BLOCK_SIZE;
1114:../src/wolfcrypt/src/des3.c ****             offset += DES_BLOCK_SIZE;
1115:../src/wolfcrypt/src/des3.c ****         }
1116:../src/wolfcrypt/src/des3.c **** 
1117:../src/wolfcrypt/src/des3.c ****         return ret;
1118:../src/wolfcrypt/src/des3.c ****     }
1119:../src/wolfcrypt/src/des3.c **** 
1120:../src/wolfcrypt/src/des3.c **** 
1121:../src/wolfcrypt/src/des3.c **** #elif defined(WOLFSSL_PIC32MZ_CRYPT)
1122:../src/wolfcrypt/src/des3.c **** 
1123:../src/wolfcrypt/src/des3.c ****     /* PIC32MZ DES hardware requires size multiple of block size */
1124:../src/wolfcrypt/src/des3.c ****     #include <wolfssl/wolfcrypt/port/pic32/pic32mz-crypt.h>
1125:../src/wolfcrypt/src/des3.c **** 
1126:../src/wolfcrypt/src/des3.c ****     int wc_Des_SetKey(Des* des, const byte* key, const byte* iv, int dir)
1127:../src/wolfcrypt/src/des3.c ****     {
1128:../src/wolfcrypt/src/des3.c ****         if (des == NULL || key == NULL || iv == NULL)
1129:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
1130:../src/wolfcrypt/src/des3.c **** 
1131:../src/wolfcrypt/src/des3.c ****         XMEMCPY(des->key, key, DES_KEYLEN);
1132:../src/wolfcrypt/src/des3.c ****         XMEMCPY(des->reg, iv, DES_IVLEN);
1133:../src/wolfcrypt/src/des3.c **** 
1134:../src/wolfcrypt/src/des3.c ****         return 0;
1135:../src/wolfcrypt/src/des3.c ****     }
1136:../src/wolfcrypt/src/des3.c **** 
1137:../src/wolfcrypt/src/des3.c ****     int wc_Des3_SetKey(Des3* des, const byte* key, const byte* iv, int dir)
1138:../src/wolfcrypt/src/des3.c ****     {
1139:../src/wolfcrypt/src/des3.c ****         if (des == NULL || key == NULL || iv == NULL)
1140:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
1141:../src/wolfcrypt/src/des3.c **** 
1142:../src/wolfcrypt/src/des3.c ****         XMEMCPY(des->key[0], key, DES3_KEYLEN);
1143:../src/wolfcrypt/src/des3.c ****         XMEMCPY(des->reg, iv, DES3_IVLEN);
1144:../src/wolfcrypt/src/des3.c **** 
1145:../src/wolfcrypt/src/des3.c ****         return 0;
1146:../src/wolfcrypt/src/des3.c ****     }
1147:../src/wolfcrypt/src/des3.c **** 
1148:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcEncrypt(Des* des, byte* out, const byte* in, word32 sz)
1149:../src/wolfcrypt/src/des3.c ****     {
1150:../src/wolfcrypt/src/des3.c ****         word32 blocks = sz / DES_BLOCK_SIZE;
1151:../src/wolfcrypt/src/des3.c **** 
1152:../src/wolfcrypt/src/des3.c ****         if (des == NULL || out == NULL || in == NULL)
1153:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
1154:../src/wolfcrypt/src/des3.c **** 
1155:../src/wolfcrypt/src/des3.c ****         return wc_Pic32DesCrypt(des->key, DES_KEYLEN, des->reg, DES_IVLEN,
1156:../src/wolfcrypt/src/des3.c ****             out, in, (blocks * DES_BLOCK_SIZE),
1157:../src/wolfcrypt/src/des3.c ****             PIC32_ENCRYPTION, PIC32_ALGO_DES, PIC32_CRYPTOALGO_CBC);
1158:../src/wolfcrypt/src/des3.c ****     }
1159:../src/wolfcrypt/src/des3.c **** 
1160:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcDecrypt(Des* des, byte* out, const byte* in, word32 sz)
1161:../src/wolfcrypt/src/des3.c ****     {
1162:../src/wolfcrypt/src/des3.c ****         word32 blocks = sz / DES_BLOCK_SIZE;
1163:../src/wolfcrypt/src/des3.c **** 
1164:../src/wolfcrypt/src/des3.c ****         if (des == NULL || out == NULL || in == NULL)
1165:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
1166:../src/wolfcrypt/src/des3.c **** 
1167:../src/wolfcrypt/src/des3.c ****         return wc_Pic32DesCrypt(des->key, DES_KEYLEN, des->reg, DES_IVLEN,
1168:../src/wolfcrypt/src/des3.c ****             out, in, (blocks * DES_BLOCK_SIZE),
1169:../src/wolfcrypt/src/des3.c ****             PIC32_DECRYPTION, PIC32_ALGO_DES, PIC32_CRYPTOALGO_CBC);
1170:../src/wolfcrypt/src/des3.c ****     }
1171:../src/wolfcrypt/src/des3.c **** 
1172:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcEncrypt(Des3* des, byte* out, const byte* in, word32 sz)
1173:../src/wolfcrypt/src/des3.c ****     {
1174:../src/wolfcrypt/src/des3.c ****         word32 blocks = sz / DES_BLOCK_SIZE;
1175:../src/wolfcrypt/src/des3.c **** 
1176:../src/wolfcrypt/src/des3.c ****         if (des == NULL || out == NULL || in == NULL)
1177:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
1178:../src/wolfcrypt/src/des3.c **** 
1179:../src/wolfcrypt/src/des3.c ****         return wc_Pic32DesCrypt(des->key[0], DES3_KEYLEN, des->reg, DES3_IVLEN,
1180:../src/wolfcrypt/src/des3.c ****             out, in, (blocks * DES_BLOCK_SIZE),
1181:../src/wolfcrypt/src/des3.c ****             PIC32_ENCRYPTION, PIC32_ALGO_TDES, PIC32_CRYPTOALGO_TCBC);
1182:../src/wolfcrypt/src/des3.c ****     }
1183:../src/wolfcrypt/src/des3.c **** 
1184:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcDecrypt(Des3* des, byte* out, const byte* in, word32 sz)
1185:../src/wolfcrypt/src/des3.c ****     {
1186:../src/wolfcrypt/src/des3.c ****         word32 blocks = sz / DES_BLOCK_SIZE;
1187:../src/wolfcrypt/src/des3.c **** 
1188:../src/wolfcrypt/src/des3.c ****         if (des == NULL || out == NULL || in == NULL)
1189:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
1190:../src/wolfcrypt/src/des3.c **** 
1191:../src/wolfcrypt/src/des3.c ****         return wc_Pic32DesCrypt(des->key[0], DES3_KEYLEN, des->reg, DES3_IVLEN,
1192:../src/wolfcrypt/src/des3.c ****             out, in, (blocks * DES_BLOCK_SIZE),
1193:../src/wolfcrypt/src/des3.c ****             PIC32_DECRYPTION, PIC32_ALGO_TDES, PIC32_CRYPTOALGO_TCBC);
1194:../src/wolfcrypt/src/des3.c ****     }
1195:../src/wolfcrypt/src/des3.c **** 
1196:../src/wolfcrypt/src/des3.c ****     #ifdef WOLFSSL_DES_ECB
1197:../src/wolfcrypt/src/des3.c ****         int wc_Des_EcbEncrypt(Des* des, byte* out, const byte* in, word32 sz)
1198:../src/wolfcrypt/src/des3.c ****         {
1199:../src/wolfcrypt/src/des3.c ****             word32 blocks = sz / DES_BLOCK_SIZE;
1200:../src/wolfcrypt/src/des3.c **** 
1201:../src/wolfcrypt/src/des3.c ****             if (des == NULL || out == NULL || in == NULL)
1202:../src/wolfcrypt/src/des3.c ****                 return BAD_FUNC_ARG;
1203:../src/wolfcrypt/src/des3.c **** 
1204:../src/wolfcrypt/src/des3.c ****             return wc_Pic32DesCrypt(des->key, DES_KEYLEN, des->reg, DES_IVLEN,
1205:../src/wolfcrypt/src/des3.c ****                 out, in, (blocks * DES_BLOCK_SIZE),
1206:../src/wolfcrypt/src/des3.c ****                     PIC32_ENCRYPTION, PIC32_ALGO_DES, PIC32_CRYPTOALGO_ECB);
1207:../src/wolfcrypt/src/des3.c ****         }
1208:../src/wolfcrypt/src/des3.c **** 
1209:../src/wolfcrypt/src/des3.c ****         int wc_Des3_EcbEncrypt(Des3* des, byte* out, const byte* in, word32 sz)
1210:../src/wolfcrypt/src/des3.c ****         {
1211:../src/wolfcrypt/src/des3.c ****             word32 blocks = sz / DES_BLOCK_SIZE;
1212:../src/wolfcrypt/src/des3.c **** 
1213:../src/wolfcrypt/src/des3.c ****             if (des == NULL || out == NULL || in == NULL)
1214:../src/wolfcrypt/src/des3.c ****                 return BAD_FUNC_ARG;
1215:../src/wolfcrypt/src/des3.c **** 
1216:../src/wolfcrypt/src/des3.c ****             return wc_Pic32DesCrypt(des->key[0], DES3_KEYLEN, des->reg, DES3_IVLEN,
1217:../src/wolfcrypt/src/des3.c ****                 out, in, (blocks * DES_BLOCK_SIZE),
1218:../src/wolfcrypt/src/des3.c ****                 PIC32_ENCRYPTION, PIC32_ALGO_TDES, PIC32_CRYPTOALGO_TECB);
1219:../src/wolfcrypt/src/des3.c ****         }
1220:../src/wolfcrypt/src/des3.c ****     #endif /* WOLFSSL_DES_ECB */
1221:../src/wolfcrypt/src/des3.c **** 
1222:../src/wolfcrypt/src/des3.c **** #else
1223:../src/wolfcrypt/src/des3.c ****     #define NEED_SOFT_DES
1224:../src/wolfcrypt/src/des3.c **** 
1225:../src/wolfcrypt/src/des3.c **** #endif
1226:../src/wolfcrypt/src/des3.c **** 
1227:../src/wolfcrypt/src/des3.c **** 
1228:../src/wolfcrypt/src/des3.c **** #ifdef NEED_SOFT_DES
1229:../src/wolfcrypt/src/des3.c **** 
1230:../src/wolfcrypt/src/des3.c ****     /* permuted choice table (key) */
1231:../src/wolfcrypt/src/des3.c ****     static const FLASH_QUALIFIER byte pc1[] = {
1232:../src/wolfcrypt/src/des3.c ****            57, 49, 41, 33, 25, 17,  9,
1233:../src/wolfcrypt/src/des3.c ****             1, 58, 50, 42, 34, 26, 18,
1234:../src/wolfcrypt/src/des3.c ****            10,  2, 59, 51, 43, 35, 27,
1235:../src/wolfcrypt/src/des3.c ****            19, 11,  3, 60, 52, 44, 36,
1236:../src/wolfcrypt/src/des3.c **** 
1237:../src/wolfcrypt/src/des3.c ****            63, 55, 47, 39, 31, 23, 15,
1238:../src/wolfcrypt/src/des3.c ****             7, 62, 54, 46, 38, 30, 22,
1239:../src/wolfcrypt/src/des3.c ****            14,  6, 61, 53, 45, 37, 29,
1240:../src/wolfcrypt/src/des3.c ****            21, 13,  5, 28, 20, 12,  4
1241:../src/wolfcrypt/src/des3.c ****     };
1242:../src/wolfcrypt/src/des3.c **** 
1243:../src/wolfcrypt/src/des3.c ****     /* number left rotations of pc1 */
1244:../src/wolfcrypt/src/des3.c ****     static const FLASH_QUALIFIER byte totrot[] = {
1245:../src/wolfcrypt/src/des3.c ****            1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28
1246:../src/wolfcrypt/src/des3.c ****     };
1247:../src/wolfcrypt/src/des3.c **** 
1248:../src/wolfcrypt/src/des3.c ****     /* permuted choice key (table) */
1249:../src/wolfcrypt/src/des3.c ****     static const FLASH_QUALIFIER byte pc2[] = {
1250:../src/wolfcrypt/src/des3.c ****            14, 17, 11, 24,  1,  5,
1251:../src/wolfcrypt/src/des3.c ****             3, 28, 15,  6, 21, 10,
1252:../src/wolfcrypt/src/des3.c ****            23, 19, 12,  4, 26,  8,
1253:../src/wolfcrypt/src/des3.c ****            16,  7, 27, 20, 13,  2,
1254:../src/wolfcrypt/src/des3.c ****            41, 52, 31, 37, 47, 55,
1255:../src/wolfcrypt/src/des3.c ****            30, 40, 51, 45, 33, 48,
1256:../src/wolfcrypt/src/des3.c ****            44, 49, 39, 56, 34, 53,
1257:../src/wolfcrypt/src/des3.c ****            46, 42, 50, 36, 29, 32
1258:../src/wolfcrypt/src/des3.c ****     };
1259:../src/wolfcrypt/src/des3.c **** 
1260:../src/wolfcrypt/src/des3.c ****     /* End of DES-defined tables */
1261:../src/wolfcrypt/src/des3.c **** 
1262:../src/wolfcrypt/src/des3.c ****     /* bit 0 is left-most in byte */
1263:../src/wolfcrypt/src/des3.c ****     static const FLASH_QUALIFIER int bytebit[] = {
1264:../src/wolfcrypt/src/des3.c ****         0200,0100,040,020,010,04,02,01
1265:../src/wolfcrypt/src/des3.c ****     };
1266:../src/wolfcrypt/src/des3.c **** 
1267:../src/wolfcrypt/src/des3.c ****     static const FLASH_QUALIFIER word32 Spbox[8][64] = {
1268:../src/wolfcrypt/src/des3.c ****     {   0x01010400,0x00000000,0x00010000,0x01010404,
1269:../src/wolfcrypt/src/des3.c ****         0x01010004,0x00010404,0x00000004,0x00010000,
1270:../src/wolfcrypt/src/des3.c ****         0x00000400,0x01010400,0x01010404,0x00000400,
1271:../src/wolfcrypt/src/des3.c ****         0x01000404,0x01010004,0x01000000,0x00000004,
1272:../src/wolfcrypt/src/des3.c ****         0x00000404,0x01000400,0x01000400,0x00010400,
1273:../src/wolfcrypt/src/des3.c ****         0x00010400,0x01010000,0x01010000,0x01000404,
1274:../src/wolfcrypt/src/des3.c ****         0x00010004,0x01000004,0x01000004,0x00010004,
1275:../src/wolfcrypt/src/des3.c ****         0x00000000,0x00000404,0x00010404,0x01000000,
1276:../src/wolfcrypt/src/des3.c ****         0x00010000,0x01010404,0x00000004,0x01010000,
1277:../src/wolfcrypt/src/des3.c ****         0x01010400,0x01000000,0x01000000,0x00000400,
1278:../src/wolfcrypt/src/des3.c ****         0x01010004,0x00010000,0x00010400,0x01000004,
1279:../src/wolfcrypt/src/des3.c ****         0x00000400,0x00000004,0x01000404,0x00010404,
1280:../src/wolfcrypt/src/des3.c ****         0x01010404,0x00010004,0x01010000,0x01000404,
1281:../src/wolfcrypt/src/des3.c ****         0x01000004,0x00000404,0x00010404,0x01010400,
1282:../src/wolfcrypt/src/des3.c ****         0x00000404,0x01000400,0x01000400,0x00000000,
1283:../src/wolfcrypt/src/des3.c ****         0x00010004,0x00010400,0x00000000,0x01010004},
1284:../src/wolfcrypt/src/des3.c ****     {   0x80108020,0x80008000,0x00008000,0x00108020,
1285:../src/wolfcrypt/src/des3.c ****         0x00100000,0x00000020,0x80100020,0x80008020,
1286:../src/wolfcrypt/src/des3.c ****         0x80000020,0x80108020,0x80108000,0x80000000,
1287:../src/wolfcrypt/src/des3.c ****         0x80008000,0x00100000,0x00000020,0x80100020,
1288:../src/wolfcrypt/src/des3.c ****         0x00108000,0x00100020,0x80008020,0x00000000,
1289:../src/wolfcrypt/src/des3.c ****         0x80000000,0x00008000,0x00108020,0x80100000,
1290:../src/wolfcrypt/src/des3.c ****         0x00100020,0x80000020,0x00000000,0x00108000,
1291:../src/wolfcrypt/src/des3.c ****         0x00008020,0x80108000,0x80100000,0x00008020,
1292:../src/wolfcrypt/src/des3.c ****         0x00000000,0x00108020,0x80100020,0x00100000,
1293:../src/wolfcrypt/src/des3.c ****         0x80008020,0x80100000,0x80108000,0x00008000,
1294:../src/wolfcrypt/src/des3.c ****         0x80100000,0x80008000,0x00000020,0x80108020,
1295:../src/wolfcrypt/src/des3.c ****         0x00108020,0x00000020,0x00008000,0x80000000,
1296:../src/wolfcrypt/src/des3.c ****         0x00008020,0x80108000,0x00100000,0x80000020,
1297:../src/wolfcrypt/src/des3.c ****         0x00100020,0x80008020,0x80000020,0x00100020,
1298:../src/wolfcrypt/src/des3.c ****         0x00108000,0x00000000,0x80008000,0x00008020,
1299:../src/wolfcrypt/src/des3.c ****         0x80000000,0x80100020,0x80108020,0x00108000},
1300:../src/wolfcrypt/src/des3.c ****     {   0x00000208,0x08020200,0x00000000,0x08020008,
1301:../src/wolfcrypt/src/des3.c ****         0x08000200,0x00000000,0x00020208,0x08000200,
1302:../src/wolfcrypt/src/des3.c ****         0x00020008,0x08000008,0x08000008,0x00020000,
1303:../src/wolfcrypt/src/des3.c ****         0x08020208,0x00020008,0x08020000,0x00000208,
1304:../src/wolfcrypt/src/des3.c ****         0x08000000,0x00000008,0x08020200,0x00000200,
1305:../src/wolfcrypt/src/des3.c ****         0x00020200,0x08020000,0x08020008,0x00020208,
1306:../src/wolfcrypt/src/des3.c ****         0x08000208,0x00020200,0x00020000,0x08000208,
1307:../src/wolfcrypt/src/des3.c ****         0x00000008,0x08020208,0x00000200,0x08000000,
1308:../src/wolfcrypt/src/des3.c ****         0x08020200,0x08000000,0x00020008,0x00000208,
1309:../src/wolfcrypt/src/des3.c ****         0x00020000,0x08020200,0x08000200,0x00000000,
1310:../src/wolfcrypt/src/des3.c ****         0x00000200,0x00020008,0x08020208,0x08000200,
1311:../src/wolfcrypt/src/des3.c ****         0x08000008,0x00000200,0x00000000,0x08020008,
1312:../src/wolfcrypt/src/des3.c ****         0x08000208,0x00020000,0x08000000,0x08020208,
1313:../src/wolfcrypt/src/des3.c ****         0x00000008,0x00020208,0x00020200,0x08000008,
1314:../src/wolfcrypt/src/des3.c ****         0x08020000,0x08000208,0x00000208,0x08020000,
1315:../src/wolfcrypt/src/des3.c ****         0x00020208,0x00000008,0x08020008,0x00020200},
1316:../src/wolfcrypt/src/des3.c ****     {   0x00802001,0x00002081,0x00002081,0x00000080,
1317:../src/wolfcrypt/src/des3.c ****         0x00802080,0x00800081,0x00800001,0x00002001,
1318:../src/wolfcrypt/src/des3.c ****         0x00000000,0x00802000,0x00802000,0x00802081,
1319:../src/wolfcrypt/src/des3.c ****         0x00000081,0x00000000,0x00800080,0x00800001,
1320:../src/wolfcrypt/src/des3.c ****         0x00000001,0x00002000,0x00800000,0x00802001,
1321:../src/wolfcrypt/src/des3.c ****         0x00000080,0x00800000,0x00002001,0x00002080,
1322:../src/wolfcrypt/src/des3.c ****         0x00800081,0x00000001,0x00002080,0x00800080,
1323:../src/wolfcrypt/src/des3.c ****         0x00002000,0x00802080,0x00802081,0x00000081,
1324:../src/wolfcrypt/src/des3.c ****         0x00800080,0x00800001,0x00802000,0x00802081,
1325:../src/wolfcrypt/src/des3.c ****         0x00000081,0x00000000,0x00000000,0x00802000,
1326:../src/wolfcrypt/src/des3.c ****         0x00002080,0x00800080,0x00800081,0x00000001,
1327:../src/wolfcrypt/src/des3.c ****         0x00802001,0x00002081,0x00002081,0x00000080,
1328:../src/wolfcrypt/src/des3.c ****         0x00802081,0x00000081,0x00000001,0x00002000,
1329:../src/wolfcrypt/src/des3.c ****         0x00800001,0x00002001,0x00802080,0x00800081,
1330:../src/wolfcrypt/src/des3.c ****         0x00002001,0x00002080,0x00800000,0x00802001,
1331:../src/wolfcrypt/src/des3.c ****         0x00000080,0x00800000,0x00002000,0x00802080},
1332:../src/wolfcrypt/src/des3.c ****     {   0x00000100,0x02080100,0x02080000,0x42000100,
1333:../src/wolfcrypt/src/des3.c ****         0x00080000,0x00000100,0x40000000,0x02080000,
1334:../src/wolfcrypt/src/des3.c ****         0x40080100,0x00080000,0x02000100,0x40080100,
1335:../src/wolfcrypt/src/des3.c ****         0x42000100,0x42080000,0x00080100,0x40000000,
1336:../src/wolfcrypt/src/des3.c ****         0x02000000,0x40080000,0x40080000,0x00000000,
1337:../src/wolfcrypt/src/des3.c ****         0x40000100,0x42080100,0x42080100,0x02000100,
1338:../src/wolfcrypt/src/des3.c ****         0x42080000,0x40000100,0x00000000,0x42000000,
1339:../src/wolfcrypt/src/des3.c ****         0x02080100,0x02000000,0x42000000,0x00080100,
1340:../src/wolfcrypt/src/des3.c ****         0x00080000,0x42000100,0x00000100,0x02000000,
1341:../src/wolfcrypt/src/des3.c ****         0x40000000,0x02080000,0x42000100,0x40080100,
1342:../src/wolfcrypt/src/des3.c ****         0x02000100,0x40000000,0x42080000,0x02080100,
1343:../src/wolfcrypt/src/des3.c ****         0x40080100,0x00000100,0x02000000,0x42080000,
1344:../src/wolfcrypt/src/des3.c ****         0x42080100,0x00080100,0x42000000,0x42080100,
1345:../src/wolfcrypt/src/des3.c ****         0x02080000,0x00000000,0x40080000,0x42000000,
1346:../src/wolfcrypt/src/des3.c ****         0x00080100,0x02000100,0x40000100,0x00080000,
1347:../src/wolfcrypt/src/des3.c ****         0x00000000,0x40080000,0x02080100,0x40000100},
1348:../src/wolfcrypt/src/des3.c ****     {   0x20000010,0x20400000,0x00004000,0x20404010,
1349:../src/wolfcrypt/src/des3.c ****         0x20400000,0x00000010,0x20404010,0x00400000,
1350:../src/wolfcrypt/src/des3.c ****         0x20004000,0x00404010,0x00400000,0x20000010,
1351:../src/wolfcrypt/src/des3.c ****         0x00400010,0x20004000,0x20000000,0x00004010,
1352:../src/wolfcrypt/src/des3.c ****         0x00000000,0x00400010,0x20004010,0x00004000,
1353:../src/wolfcrypt/src/des3.c ****         0x00404000,0x20004010,0x00000010,0x20400010,
1354:../src/wolfcrypt/src/des3.c ****         0x20400010,0x00000000,0x00404010,0x20404000,
1355:../src/wolfcrypt/src/des3.c ****         0x00004010,0x00404000,0x20404000,0x20000000,
1356:../src/wolfcrypt/src/des3.c ****         0x20004000,0x00000010,0x20400010,0x00404000,
1357:../src/wolfcrypt/src/des3.c ****         0x20404010,0x00400000,0x00004010,0x20000010,
1358:../src/wolfcrypt/src/des3.c ****         0x00400000,0x20004000,0x20000000,0x00004010,
1359:../src/wolfcrypt/src/des3.c ****         0x20000010,0x20404010,0x00404000,0x20400000,
1360:../src/wolfcrypt/src/des3.c ****         0x00404010,0x20404000,0x00000000,0x20400010,
1361:../src/wolfcrypt/src/des3.c ****         0x00000010,0x00004000,0x20400000,0x00404010,
1362:../src/wolfcrypt/src/des3.c ****         0x00004000,0x00400010,0x20004010,0x00000000,
1363:../src/wolfcrypt/src/des3.c ****         0x20404000,0x20000000,0x00400010,0x20004010},
1364:../src/wolfcrypt/src/des3.c ****     {   0x00200000,0x04200002,0x04000802,0x00000000,
1365:../src/wolfcrypt/src/des3.c ****         0x00000800,0x04000802,0x00200802,0x04200800,
1366:../src/wolfcrypt/src/des3.c ****         0x04200802,0x00200000,0x00000000,0x04000002,
1367:../src/wolfcrypt/src/des3.c ****         0x00000002,0x04000000,0x04200002,0x00000802,
1368:../src/wolfcrypt/src/des3.c ****         0x04000800,0x00200802,0x00200002,0x04000800,
1369:../src/wolfcrypt/src/des3.c ****         0x04000002,0x04200000,0x04200800,0x00200002,
1370:../src/wolfcrypt/src/des3.c ****         0x04200000,0x00000800,0x00000802,0x04200802,
1371:../src/wolfcrypt/src/des3.c ****         0x00200800,0x00000002,0x04000000,0x00200800,
1372:../src/wolfcrypt/src/des3.c ****         0x04000000,0x00200800,0x00200000,0x04000802,
1373:../src/wolfcrypt/src/des3.c ****         0x04000802,0x04200002,0x04200002,0x00000002,
1374:../src/wolfcrypt/src/des3.c ****         0x00200002,0x04000000,0x04000800,0x00200000,
1375:../src/wolfcrypt/src/des3.c ****         0x04200800,0x00000802,0x00200802,0x04200800,
1376:../src/wolfcrypt/src/des3.c ****         0x00000802,0x04000002,0x04200802,0x04200000,
1377:../src/wolfcrypt/src/des3.c ****         0x00200800,0x00000000,0x00000002,0x04200802,
1378:../src/wolfcrypt/src/des3.c ****         0x00000000,0x00200802,0x04200000,0x00000800,
1379:../src/wolfcrypt/src/des3.c ****         0x04000002,0x04000800,0x00000800,0x00200002},
1380:../src/wolfcrypt/src/des3.c ****     {   0x10001040,0x00001000,0x00040000,0x10041040,
1381:../src/wolfcrypt/src/des3.c ****         0x10000000,0x10001040,0x00000040,0x10000000,
1382:../src/wolfcrypt/src/des3.c ****         0x00040040,0x10040000,0x10041040,0x00041000,
1383:../src/wolfcrypt/src/des3.c ****         0x10041000,0x00041040,0x00001000,0x00000040,
1384:../src/wolfcrypt/src/des3.c ****         0x10040000,0x10000040,0x10001000,0x00001040,
1385:../src/wolfcrypt/src/des3.c ****         0x00041000,0x00040040,0x10040040,0x10041000,
1386:../src/wolfcrypt/src/des3.c ****         0x00001040,0x00000000,0x00000000,0x10040040,
1387:../src/wolfcrypt/src/des3.c ****         0x10000040,0x10001000,0x00041040,0x00040000,
1388:../src/wolfcrypt/src/des3.c ****         0x00041040,0x00040000,0x10041000,0x00001000,
1389:../src/wolfcrypt/src/des3.c ****         0x00000040,0x10040040,0x00001000,0x00041040,
1390:../src/wolfcrypt/src/des3.c ****         0x10001000,0x00000040,0x10000040,0x10040000,
1391:../src/wolfcrypt/src/des3.c ****         0x10040040,0x10000000,0x00040000,0x10001040,
1392:../src/wolfcrypt/src/des3.c ****         0x00000000,0x10041040,0x00040040,0x10000040,
1393:../src/wolfcrypt/src/des3.c ****         0x10040000,0x10001000,0x10001040,0x00000000,
1394:../src/wolfcrypt/src/des3.c ****         0x10041040,0x00041000,0x00041000,0x00001040,
1395:../src/wolfcrypt/src/des3.c ****         0x00001040,0x00040040,0x10000000,0x10041000}
1396:../src/wolfcrypt/src/des3.c ****     };
1397:../src/wolfcrypt/src/des3.c **** 
1398:../src/wolfcrypt/src/des3.c ****     static WC_INLINE void IPERM(word32* left, word32* right)
1399:../src/wolfcrypt/src/des3.c ****     {
 883                             		.loc 2 1399 5
 884 0000 7E AA                   		push.l	r10
 885                             	.LCFI10:
 886 0002 71 0A F4                		add	#-12, r0, r10
 887                             	.LCFI11:
 888 0005 EF A0                   		mov.L	r10, r0
 889 0007 E7 A1 01                		mov.L	r1, 4[r10]
 890 000a E7 A2 02                		mov.L	r2, 8[r10]
1400:../src/wolfcrypt/src/des3.c ****         word32 work;
1401:../src/wolfcrypt/src/des3.c **** 
1402:../src/wolfcrypt/src/des3.c ****         *right = rotlFixed(*right, 4U);
 891                             		.loc 2 1402 18
 892 000d ED A5 02                		mov.L	8[r10], r5
 893 0010 EC 55                   		mov.L	[r5], r5
 894 0012 66 42                   		mov.L	#4, r2
 895 0014 EF 51                   		mov.L	r5, r1
 896 0016 05 00 00 00             		bsr	_rotlFixed
 897 001a EF 14                   		mov.L	r1, r4
 898                             		.loc 2 1402 16
 899 001c ED A5 02                		mov.L	8[r10], r5
 900 001f E3 54                   		mov.L	r4, [r5]
1403:../src/wolfcrypt/src/des3.c ****         work = (*left ^ *right) & 0xf0f0f0f0;
 901                             		.loc 2 1403 17
 902 0021 ED A5 01                		mov.L	4[r10], r5
 903 0024 EC 54                   		mov.L	[r5], r4
 904                             		.loc 2 1403 25
 905 0026 ED A5 02                		mov.L	8[r10], r5
 906 0029 EC 55                   		mov.L	[r5], r5
 907                             		.loc 2 1403 23
 908 002b FC 37 45                		xor	r4, r5
 909                             		.loc 2 1403 14
 910 002e 74 25 F0 F0 F0 F0       		and	#-252645136, r5
 911 0034 E3 A5                   		mov.L	r5, [r10]
1404:../src/wolfcrypt/src/des3.c ****         *left ^= work;
 912                             		.loc 2 1404 15
 913 0036 ED A5 01                		mov.L	4[r10], r5
 914 0039 EC 55                   		mov.L	[r5], r5
 915 003b EC A4                   		mov.L	[r10], r4
 916 003d FC 37 54                		xor	r5, r4
 917 0040 ED A5 01                		mov.L	4[r10], r5
 918 0043 E3 54                   		mov.L	r4, [r5]
1405:../src/wolfcrypt/src/des3.c **** 
1406:../src/wolfcrypt/src/des3.c ****         *right = rotrFixed(*right^work, 20U);
 919                             		.loc 2 1406 28
 920 0045 ED A5 02                		mov.L	8[r10], r5
 921 0048 EC 55                   		mov.L	[r5], r5
 922                             		.loc 2 1406 18
 923 004a 06 A0 0D A5             		xor	[r10].L, r5
 924 004e 75 42 14                		mov.L	#20, r2
 925 0051 EF 51                   		mov.L	r5, r1
 926 0053 05 00 00 00             		bsr	_rotrFixed
 927 0057 EF 14                   		mov.L	r1, r4
 928                             		.loc 2 1406 16
 929 0059 ED A5 02                		mov.L	8[r10], r5
 930 005c E3 54                   		mov.L	r4, [r5]
1407:../src/wolfcrypt/src/des3.c ****         work = (*left ^ *right) & 0xffff0000;
 931                             		.loc 2 1407 17
 932 005e ED A5 01                		mov.L	4[r10], r5
 933 0061 EC 54                   		mov.L	[r5], r4
 934                             		.loc 2 1407 25
 935 0063 ED A5 02                		mov.L	8[r10], r5
 936 0066 EC 55                   		mov.L	[r5], r5
 937                             		.loc 2 1407 23
 938 0068 FC 37 45                		xor	r4, r5
 939                             		.loc 2 1407 14
 940 006b 77 25 00 00 FF          		and	#-65536, r5
 941 0070 E3 A5                   		mov.L	r5, [r10]
1408:../src/wolfcrypt/src/des3.c ****         *left ^= work;
 942                             		.loc 2 1408 15
 943 0072 ED A5 01                		mov.L	4[r10], r5
 944 0075 EC 55                   		mov.L	[r5], r5
 945 0077 EC A4                   		mov.L	[r10], r4
 946 0079 FC 37 54                		xor	r5, r4
 947 007c ED A5 01                		mov.L	4[r10], r5
 948 007f E3 54                   		mov.L	r4, [r5]
1409:../src/wolfcrypt/src/des3.c **** 
1410:../src/wolfcrypt/src/des3.c ****         *right = rotrFixed(*right^work, 18U);
 949                             		.loc 2 1410 28
 950 0081 ED A5 02                		mov.L	8[r10], r5
 951 0084 EC 55                   		mov.L	[r5], r5
 952                             		.loc 2 1410 18
 953 0086 06 A0 0D A5             		xor	[r10].L, r5
 954 008a 75 42 12                		mov.L	#18, r2
 955 008d EF 51                   		mov.L	r5, r1
 956 008f 05 00 00 00             		bsr	_rotrFixed
 957 0093 EF 14                   		mov.L	r1, r4
 958                             		.loc 2 1410 16
 959 0095 ED A5 02                		mov.L	8[r10], r5
 960 0098 E3 54                   		mov.L	r4, [r5]
1411:../src/wolfcrypt/src/des3.c ****         work = (*left ^ *right) & 0x33333333;
 961                             		.loc 2 1411 17
 962 009a ED A5 01                		mov.L	4[r10], r5
 963 009d EC 54                   		mov.L	[r5], r4
 964                             		.loc 2 1411 25
 965 009f ED A5 02                		mov.L	8[r10], r5
 966 00a2 EC 55                   		mov.L	[r5], r5
 967                             		.loc 2 1411 23
 968 00a4 FC 37 45                		xor	r4, r5
 969                             		.loc 2 1411 14
 970 00a7 74 25 33 33 33 33       		and	#0x33333333, r5
 971 00ad E3 A5                   		mov.L	r5, [r10]
1412:../src/wolfcrypt/src/des3.c ****         *left ^= work;
 972                             		.loc 2 1412 15
 973 00af ED A5 01                		mov.L	4[r10], r5
 974 00b2 EC 55                   		mov.L	[r5], r5
 975 00b4 EC A4                   		mov.L	[r10], r4
 976 00b6 FC 37 54                		xor	r5, r4
 977 00b9 ED A5 01                		mov.L	4[r10], r5
 978 00bc E3 54                   		mov.L	r4, [r5]
1413:../src/wolfcrypt/src/des3.c **** 
1414:../src/wolfcrypt/src/des3.c ****         *right = rotrFixed(*right^work, 6U);
 979                             		.loc 2 1414 28
 980 00be ED A5 02                		mov.L	8[r10], r5
 981 00c1 EC 55                   		mov.L	[r5], r5
 982                             		.loc 2 1414 18
 983 00c3 06 A0 0D A5             		xor	[r10].L, r5
 984 00c7 66 62                   		mov.L	#6, r2
 985 00c9 EF 51                   		mov.L	r5, r1
 986 00cb 05 00 00 00             		bsr	_rotrFixed
 987 00cf EF 14                   		mov.L	r1, r4
 988                             		.loc 2 1414 16
 989 00d1 ED A5 02                		mov.L	8[r10], r5
 990 00d4 E3 54                   		mov.L	r4, [r5]
1415:../src/wolfcrypt/src/des3.c ****         work = (*left ^ *right) & 0x00ff00ff;
 991                             		.loc 2 1415 17
 992 00d6 ED A5 01                		mov.L	4[r10], r5
 993 00d9 EC 54                   		mov.L	[r5], r4
 994                             		.loc 2 1415 25
 995 00db ED A5 02                		mov.L	8[r10], r5
 996 00de EC 55                   		mov.L	[r5], r5
 997                             		.loc 2 1415 23
 998 00e0 FC 37 45                		xor	r4, r5
 999                             		.loc 2 1415 14
 1000 00e3 74 25 FF 00 FF 00       		and	#0xff00ff, r5
 1001 00e9 E3 A5                   		mov.L	r5, [r10]
1416:../src/wolfcrypt/src/des3.c ****         *left ^= work;
 1002                             		.loc 2 1416 15
 1003 00eb ED A5 01                		mov.L	4[r10], r5
 1004 00ee EC 55                   		mov.L	[r5], r5
 1005 00f0 EC A4                   		mov.L	[r10], r4
 1006 00f2 FC 37 54                		xor	r5, r4
 1007 00f5 ED A5 01                		mov.L	4[r10], r5
 1008 00f8 E3 54                   		mov.L	r4, [r5]
1417:../src/wolfcrypt/src/des3.c **** 
1418:../src/wolfcrypt/src/des3.c ****         *right = rotlFixed(*right^work, 9U);
 1009                             		.loc 2 1418 28
 1010 00fa ED A5 02                		mov.L	8[r10], r5
 1011 00fd EC 55                   		mov.L	[r5], r5
 1012                             		.loc 2 1418 18
 1013 00ff 06 A0 0D A5             		xor	[r10].L, r5
 1014 0103 66 92                   		mov.L	#9, r2
 1015 0105 EF 51                   		mov.L	r5, r1
 1016 0107 05 00 00 00             		bsr	_rotlFixed
 1017 010b EF 14                   		mov.L	r1, r4
 1018                             		.loc 2 1418 16
 1019 010d ED A5 02                		mov.L	8[r10], r5
 1020 0110 E3 54                   		mov.L	r4, [r5]
1419:../src/wolfcrypt/src/des3.c ****         work = (*left ^ *right) & 0xaaaaaaaa;
 1021                             		.loc 2 1419 17
 1022 0112 ED A5 01                		mov.L	4[r10], r5
 1023 0115 EC 54                   		mov.L	[r5], r4
 1024                             		.loc 2 1419 25
 1025 0117 ED A5 02                		mov.L	8[r10], r5
 1026 011a EC 55                   		mov.L	[r5], r5
 1027                             		.loc 2 1419 23
 1028 011c FC 37 45                		xor	r4, r5
 1029                             		.loc 2 1419 14
 1030 011f 74 25 AA AA AA AA       		and	#-1431655766, r5
 1031 0125 E3 A5                   		mov.L	r5, [r10]
1420:../src/wolfcrypt/src/des3.c ****         *left = rotlFixed(*left^work, 1U);
 1032                             		.loc 2 1420 27
 1033 0127 ED A5 01                		mov.L	4[r10], r5
 1034 012a EC 55                   		mov.L	[r5], r5
 1035                             		.loc 2 1420 17
 1036 012c 06 A0 0D A5             		xor	[r10].L, r5
 1037 0130 66 12                   		mov.L	#1, r2
 1038 0132 EF 51                   		mov.L	r5, r1
 1039 0134 05 00 00 00             		bsr	_rotlFixed
 1040 0138 EF 14                   		mov.L	r1, r4
 1041                             		.loc 2 1420 15
 1042 013a ED A5 01                		mov.L	4[r10], r5
 1043 013d E3 54                   		mov.L	r4, [r5]
1421:../src/wolfcrypt/src/des3.c ****         *right ^= work;
 1044                             		.loc 2 1421 16
 1045 013f ED A5 02                		mov.L	8[r10], r5
 1046 0142 EC 55                   		mov.L	[r5], r5
 1047 0144 EC A4                   		mov.L	[r10], r4
 1048 0146 FC 37 54                		xor	r5, r4
 1049 0149 ED A5 02                		mov.L	8[r10], r5
 1050 014c E3 54                   		mov.L	r4, [r5]
1422:../src/wolfcrypt/src/des3.c ****     }
 1051                             		.loc 2 1422 5
 1052 014e 03                      		nop
 1053 014f 3F AA 04                		rtsd	#16, r10-r10
 1054                             	.LFE43:
 1056                             		.section	.text.FPERM,"ax",@progbits
 1058                             	_FPERM:
 1059                             	.LFB44:
1423:../src/wolfcrypt/src/des3.c **** 
1424:../src/wolfcrypt/src/des3.c ****     static WC_INLINE void FPERM(word32* left, word32* right)
1425:../src/wolfcrypt/src/des3.c ****     {
 1060                             		.loc 2 1425 5
 1061 0000 7E AA                   		push.l	r10
 1062                             	.LCFI12:
 1063 0002 71 0A F4                		add	#-12, r0, r10
 1064                             	.LCFI13:
 1065 0005 EF A0                   		mov.L	r10, r0
 1066 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1067 000a E7 A2 02                		mov.L	r2, 8[r10]
1426:../src/wolfcrypt/src/des3.c ****         word32 work;
1427:../src/wolfcrypt/src/des3.c **** 
1428:../src/wolfcrypt/src/des3.c ****         *right = rotrFixed(*right, 1U);
 1068                             		.loc 2 1428 18
 1069 000d ED A5 02                		mov.L	8[r10], r5
 1070 0010 EC 55                   		mov.L	[r5], r5
 1071 0012 66 12                   		mov.L	#1, r2
 1072 0014 EF 51                   		mov.L	r5, r1
 1073 0016 05 00 00 00             		bsr	_rotrFixed
 1074 001a EF 14                   		mov.L	r1, r4
 1075                             		.loc 2 1428 16
 1076 001c ED A5 02                		mov.L	8[r10], r5
 1077 001f E3 54                   		mov.L	r4, [r5]
1429:../src/wolfcrypt/src/des3.c ****         work = (*left ^ *right) & 0xaaaaaaaa;
 1078                             		.loc 2 1429 17
 1079 0021 ED A5 01                		mov.L	4[r10], r5
 1080 0024 EC 54                   		mov.L	[r5], r4
 1081                             		.loc 2 1429 25
 1082 0026 ED A5 02                		mov.L	8[r10], r5
 1083 0029 EC 55                   		mov.L	[r5], r5
 1084                             		.loc 2 1429 23
 1085 002b FC 37 45                		xor	r4, r5
 1086                             		.loc 2 1429 14
 1087 002e 74 25 AA AA AA AA       		and	#-1431655766, r5
 1088 0034 E3 A5                   		mov.L	r5, [r10]
1430:../src/wolfcrypt/src/des3.c ****         *right ^= work;
 1089                             		.loc 2 1430 16
 1090 0036 ED A5 02                		mov.L	8[r10], r5
 1091 0039 EC 55                   		mov.L	[r5], r5
 1092 003b EC A4                   		mov.L	[r10], r4
 1093 003d FC 37 54                		xor	r5, r4
 1094 0040 ED A5 02                		mov.L	8[r10], r5
 1095 0043 E3 54                   		mov.L	r4, [r5]
1431:../src/wolfcrypt/src/des3.c **** 
1432:../src/wolfcrypt/src/des3.c ****         *left = rotrFixed(*left^work, 9U);
 1096                             		.loc 2 1432 27
 1097 0045 ED A5 01                		mov.L	4[r10], r5
 1098 0048 EC 55                   		mov.L	[r5], r5
 1099                             		.loc 2 1432 17
 1100 004a 06 A0 0D A5             		xor	[r10].L, r5
 1101 004e 66 92                   		mov.L	#9, r2
 1102 0050 EF 51                   		mov.L	r5, r1
 1103 0052 05 00 00 00             		bsr	_rotrFixed
 1104 0056 EF 14                   		mov.L	r1, r4
 1105                             		.loc 2 1432 15
 1106 0058 ED A5 01                		mov.L	4[r10], r5
 1107 005b E3 54                   		mov.L	r4, [r5]
1433:../src/wolfcrypt/src/des3.c ****         work = (*left ^ *right) & 0x00ff00ff;
 1108                             		.loc 2 1433 17
 1109 005d ED A5 01                		mov.L	4[r10], r5
 1110 0060 EC 54                   		mov.L	[r5], r4
 1111                             		.loc 2 1433 25
 1112 0062 ED A5 02                		mov.L	8[r10], r5
 1113 0065 EC 55                   		mov.L	[r5], r5
 1114                             		.loc 2 1433 23
 1115 0067 FC 37 45                		xor	r4, r5
 1116                             		.loc 2 1433 14
 1117 006a 74 25 FF 00 FF 00       		and	#0xff00ff, r5
 1118 0070 E3 A5                   		mov.L	r5, [r10]
1434:../src/wolfcrypt/src/des3.c ****         *right ^= work;
 1119                             		.loc 2 1434 16
 1120 0072 ED A5 02                		mov.L	8[r10], r5
 1121 0075 EC 55                   		mov.L	[r5], r5
 1122 0077 EC A4                   		mov.L	[r10], r4
 1123 0079 FC 37 54                		xor	r5, r4
 1124 007c ED A5 02                		mov.L	8[r10], r5
 1125 007f E3 54                   		mov.L	r4, [r5]
1435:../src/wolfcrypt/src/des3.c **** 
1436:../src/wolfcrypt/src/des3.c ****         *left = rotlFixed(*left^work, 6U);
 1126                             		.loc 2 1436 27
 1127 0081 ED A5 01                		mov.L	4[r10], r5
 1128 0084 EC 55                   		mov.L	[r5], r5
 1129                             		.loc 2 1436 17
 1130 0086 06 A0 0D A5             		xor	[r10].L, r5
 1131 008a 66 62                   		mov.L	#6, r2
 1132 008c EF 51                   		mov.L	r5, r1
 1133 008e 05 00 00 00             		bsr	_rotlFixed
 1134 0092 EF 14                   		mov.L	r1, r4
 1135                             		.loc 2 1436 15
 1136 0094 ED A5 01                		mov.L	4[r10], r5
 1137 0097 E3 54                   		mov.L	r4, [r5]
1437:../src/wolfcrypt/src/des3.c ****         work = (*left ^ *right) & 0x33333333;
 1138                             		.loc 2 1437 17
 1139 0099 ED A5 01                		mov.L	4[r10], r5
 1140 009c EC 54                   		mov.L	[r5], r4
 1141                             		.loc 2 1437 25
 1142 009e ED A5 02                		mov.L	8[r10], r5
 1143 00a1 EC 55                   		mov.L	[r5], r5
 1144                             		.loc 2 1437 23
 1145 00a3 FC 37 45                		xor	r4, r5
 1146                             		.loc 2 1437 14
 1147 00a6 74 25 33 33 33 33       		and	#0x33333333, r5
 1148 00ac E3 A5                   		mov.L	r5, [r10]
1438:../src/wolfcrypt/src/des3.c ****         *right ^= work;
 1149                             		.loc 2 1438 16
 1150 00ae ED A5 02                		mov.L	8[r10], r5
 1151 00b1 EC 55                   		mov.L	[r5], r5
 1152 00b3 EC A4                   		mov.L	[r10], r4
 1153 00b5 FC 37 54                		xor	r5, r4
 1154 00b8 ED A5 02                		mov.L	8[r10], r5
 1155 00bb E3 54                   		mov.L	r4, [r5]
1439:../src/wolfcrypt/src/des3.c **** 
1440:../src/wolfcrypt/src/des3.c ****         *left = rotlFixed(*left^work, 18U);
 1156                             		.loc 2 1440 27
 1157 00bd ED A5 01                		mov.L	4[r10], r5
 1158 00c0 EC 55                   		mov.L	[r5], r5
 1159                             		.loc 2 1440 17
 1160 00c2 06 A0 0D A5             		xor	[r10].L, r5
 1161 00c6 75 42 12                		mov.L	#18, r2
 1162 00c9 EF 51                   		mov.L	r5, r1
 1163 00cb 05 00 00 00             		bsr	_rotlFixed
 1164 00cf EF 14                   		mov.L	r1, r4
 1165                             		.loc 2 1440 15
 1166 00d1 ED A5 01                		mov.L	4[r10], r5
 1167 00d4 E3 54                   		mov.L	r4, [r5]
1441:../src/wolfcrypt/src/des3.c ****         work = (*left ^ *right) & 0xffff0000;
 1168                             		.loc 2 1441 17
 1169 00d6 ED A5 01                		mov.L	4[r10], r5
 1170 00d9 EC 54                   		mov.L	[r5], r4
 1171                             		.loc 2 1441 25
 1172 00db ED A5 02                		mov.L	8[r10], r5
 1173 00de EC 55                   		mov.L	[r5], r5
 1174                             		.loc 2 1441 23
 1175 00e0 FC 37 45                		xor	r4, r5
 1176                             		.loc 2 1441 14
 1177 00e3 77 25 00 00 FF          		and	#-65536, r5
 1178 00e8 E3 A5                   		mov.L	r5, [r10]
1442:../src/wolfcrypt/src/des3.c ****         *right ^= work;
 1179                             		.loc 2 1442 16
 1180 00ea ED A5 02                		mov.L	8[r10], r5
 1181 00ed EC 55                   		mov.L	[r5], r5
 1182 00ef EC A4                   		mov.L	[r10], r4
 1183 00f1 FC 37 54                		xor	r5, r4
 1184 00f4 ED A5 02                		mov.L	8[r10], r5
 1185 00f7 E3 54                   		mov.L	r4, [r5]
1443:../src/wolfcrypt/src/des3.c **** 
1444:../src/wolfcrypt/src/des3.c ****         *left = rotlFixed(*left^work, 20U);
 1186                             		.loc 2 1444 27
 1187 00f9 ED A5 01                		mov.L	4[r10], r5
 1188 00fc EC 55                   		mov.L	[r5], r5
 1189                             		.loc 2 1444 17
 1190 00fe 06 A0 0D A5             		xor	[r10].L, r5
 1191 0102 75 42 14                		mov.L	#20, r2
 1192 0105 EF 51                   		mov.L	r5, r1
 1193 0107 05 00 00 00             		bsr	_rotlFixed
 1194 010b EF 14                   		mov.L	r1, r4
 1195                             		.loc 2 1444 15
 1196 010d ED A5 01                		mov.L	4[r10], r5
 1197 0110 E3 54                   		mov.L	r4, [r5]
1445:../src/wolfcrypt/src/des3.c ****         work = (*left ^ *right) & 0xf0f0f0f0;
 1198                             		.loc 2 1445 17
 1199 0112 ED A5 01                		mov.L	4[r10], r5
 1200 0115 EC 54                   		mov.L	[r5], r4
 1201                             		.loc 2 1445 25
 1202 0117 ED A5 02                		mov.L	8[r10], r5
 1203 011a EC 55                   		mov.L	[r5], r5
 1204                             		.loc 2 1445 23
 1205 011c FC 37 45                		xor	r4, r5
 1206                             		.loc 2 1445 14
 1207 011f 74 25 F0 F0 F0 F0       		and	#-252645136, r5
 1208 0125 E3 A5                   		mov.L	r5, [r10]
1446:../src/wolfcrypt/src/des3.c ****         *right ^= work;
 1209                             		.loc 2 1446 16
 1210 0127 ED A5 02                		mov.L	8[r10], r5
 1211 012a EC 55                   		mov.L	[r5], r5
 1212 012c EC A4                   		mov.L	[r10], r4
 1213 012e FC 37 54                		xor	r5, r4
 1214 0131 ED A5 02                		mov.L	8[r10], r5
 1215 0134 E3 54                   		mov.L	r4, [r5]
1447:../src/wolfcrypt/src/des3.c **** 
1448:../src/wolfcrypt/src/des3.c ****         *left = rotrFixed(*left^work, 4U);
 1216                             		.loc 2 1448 27
 1217 0136 ED A5 01                		mov.L	4[r10], r5
 1218 0139 EC 55                   		mov.L	[r5], r5
 1219                             		.loc 2 1448 17
 1220 013b 06 A0 0D A5             		xor	[r10].L, r5
 1221 013f 66 42                   		mov.L	#4, r2
 1222 0141 EF 51                   		mov.L	r5, r1
 1223 0143 05 00 00 00             		bsr	_rotrFixed
 1224 0147 EF 14                   		mov.L	r1, r4
 1225                             		.loc 2 1448 15
 1226 0149 ED A5 01                		mov.L	4[r10], r5
 1227 014c E3 54                   		mov.L	r4, [r5]
1449:../src/wolfcrypt/src/des3.c ****     }
 1228                             		.loc 2 1449 5
 1229 014e 03                      		nop
 1230 014f 3F AA 04                		rtsd	#16, r10-r10
 1231                             	.LFE44:
 1233                             		.section	.text.DesSetKey,"ax",@progbits
 1235                             	_DesSetKey:
 1236                             	.LFB45:
1450:../src/wolfcrypt/src/des3.c **** 
1451:../src/wolfcrypt/src/des3.c ****     static int DesSetKey(const byte* key, int dir, word32* out)
1452:../src/wolfcrypt/src/des3.c ****     {
 1237                             		.loc 2 1452 5
 1238 0000 6E 6A                   		pushm	r6-r10
 1239                             	.LCFI14:
 1240 0002 71 0A CC                		add	#-52, r0, r10
 1241                             	.LCFI15:
 1242 0005 EF A0                   		mov.L	r10, r0
 1243 0007 E7 A1 0A                		mov.L	r1, 40[r10]
 1244 000a E7 A2 0B                		mov.L	r2, 44[r10]
 1245 000d E7 A3 0C                		mov.L	r3, 48[r10]
1453:../src/wolfcrypt/src/des3.c ****         #define DES_KEY_BUFFER_SIZE (56+56+8)
1454:../src/wolfcrypt/src/des3.c ****     #ifdef WOLFSSL_SMALL_STACK
1455:../src/wolfcrypt/src/des3.c ****         byte* buffer = (byte*)XMALLOC(DES_KEY_BUFFER_SIZE, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 1246                             		.loc 2 1455 31
 1247 0010 75 41 78                		mov.L	#0x78, r1
 1248 0013 05 00 00 00             		bsr	_wolfSSL_Malloc
 1249 0017 E7 A1 02                		mov.L	r1, 8[r10]
1456:../src/wolfcrypt/src/des3.c **** 
1457:../src/wolfcrypt/src/des3.c ****         if (buffer == NULL)
 1250                             		.loc 2 1457 12
 1251 001a ED A5 02                		mov.L	8[r10], r5
 1252 001d 61 05                   		cmp	#0, r5
 1253 001f 1F                      		bne	.L19
1458:../src/wolfcrypt/src/des3.c ****             return MEMORY_E;
 1254                             		.loc 2 1458 20
 1255 0020 FB 56 83                		mov.L	#-125, r5
 1256 0023 38 B3 02                		bra	.L20
 1257                             	.L19:
 1258                             	.LBB3:
1459:../src/wolfcrypt/src/des3.c ****     #else
1460:../src/wolfcrypt/src/des3.c ****         byte buffer[DES_KEY_BUFFER_SIZE];
1461:../src/wolfcrypt/src/des3.c ****     #endif
1462:../src/wolfcrypt/src/des3.c **** 
1463:../src/wolfcrypt/src/des3.c ****         {
1464:../src/wolfcrypt/src/des3.c ****             byte* const  pc1m = buffer;            /* place to modify pc1 into */
 1259                             		.loc 2 1464 26
 1260 0026 ED A5 02                		mov.L	8[r10], r5
 1261 0029 E7 A5 03                		mov.L	r5, 12[r10]
1465:../src/wolfcrypt/src/des3.c ****             byte* const  pcr  = pc1m + 56;         /* place to rotate pc1 into */
 1262                             		.loc 2 1465 26
 1263 002c ED A5 03                		mov.L	12[r10], r5
 1264 002f 71 55 38                		add	#56, r5
 1265 0032 E7 A5 04                		mov.L	r5, 16[r10]
1466:../src/wolfcrypt/src/des3.c ****             byte* const  ks   = pcr  + 56;
 1266                             		.loc 2 1466 26
 1267 0035 ED A5 04                		mov.L	16[r10], r5
 1268 0038 71 55 38                		add	#56, r5
 1269 003b E7 A5 05                		mov.L	r5, 20[r10]
1467:../src/wolfcrypt/src/des3.c ****             int i, j, l;
1468:../src/wolfcrypt/src/des3.c ****             int          m;
1469:../src/wolfcrypt/src/des3.c **** 
1470:../src/wolfcrypt/src/des3.c ****             for (j = 0; j < 56; j++) {             /* convert pc1 to bits of key  */
 1270                             		.loc 2 1470 20
 1271 003e F9 A6 01 00             		mov.L	#0, 4[r10]
 1272                             		.loc 2 1470 13
 1273 0042 2E 54                   		bra	.L21
 1274                             	.L22:
1471:../src/wolfcrypt/src/des3.c ****                 l = pc1[j] - 1;                    /* integer bit location        */
 1275                             		.loc 2 1471 24 discriminator 3
 1276 0044 FB 52 00 00 00 00       		mov.L	#_pc1, r5
 1277 004a 06 89 A5 01             		add	4[r10].L, r5
 1278 004e CC 55                   		mov.B	[r5], r5
 1279 0050 5B 55                   		movu.B	r5, r5
 1280                             		.loc 2 1471 19 discriminator 3
 1281 0052 60 15                   		sub	#1, r5
 1282 0054 E7 A5 06                		mov.L	r5, 24[r10]
1472:../src/wolfcrypt/src/des3.c ****                 m = l & 07;                        /* find bit                    */
 1283                             		.loc 2 1472 19 discriminator 3
 1284 0057 ED A5 06                		mov.L	24[r10], r5
 1285 005a 64 75                   		and	#7, r5
 1286 005c E7 A5 07                		mov.L	r5, 28[r10]
1473:../src/wolfcrypt/src/des3.c ****                 pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
 1287                             		.loc 2 1473 34 discriminator 3
 1288 005f ED A5 06                		mov.L	24[r10], r5
 1289 0062 6A 35                   		shar	#3, r5
 1290                             		.loc 2 1473 31 discriminator 3
 1291 0064 ED A4 0A                		mov.L	40[r10], r4
 1292 0067 4B 45                   		add	r4, r5
 1293 0069 CC 55                   		mov.B	[r5], r5
 1294 006b 5B 55                   		movu.B	r5, r5
1474:../src/wolfcrypt/src/des3.c ****                     bytebit[m])                    /* and which bit of that byte  */
 1295                             		.loc 2 1474 28 discriminator 3
 1296 006d FB 42 00 00 00 00       		mov.L	#_bytebit, r4
 1297 0073 ED A3 07                		mov.L	28[r10], r3
 1298 0076 FE 63 44                		mov.L	[r3,r4], r4
1473:../src/wolfcrypt/src/des3.c ****                 pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
 1299                             		.loc 2 1473 40 discriminator 3
 1300 0079 53 45                   		and	r4, r5
1475:../src/wolfcrypt/src/des3.c ****                     ? 1 : 0;                       /* and store 1-bit result      */
 1301                             		.loc 2 1475 25 discriminator 3
 1302 007b 61 05                   		cmp	#0, r5
 1303 007d FC DB 51                		scne.L	r5
 1304 0080 CF 53                   		mov.B	r5, r3
1473:../src/wolfcrypt/src/des3.c ****                 pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
 1305                             		.loc 2 1473 21 discriminator 3
 1306 0082 ED A5 01                		mov.L	4[r10], r5
 1307 0085 ED A4 03                		mov.L	12[r10], r4
 1308 0088 4B 45                   		add	r4, r5
 1309                             		.loc 2 1475 25 discriminator 3
 1310 008a CF 34                   		mov.B	r3, r4
1473:../src/wolfcrypt/src/des3.c ****                 pc1m[j] = (key[l >> 3] &           /* find which key byte l is in */
 1311                             		.loc 2 1473 25 discriminator 3
 1312 008c C3 54                   		mov.B	r4, [r5]
1470:../src/wolfcrypt/src/des3.c ****                 l = pc1[j] - 1;                    /* integer bit location        */
 1313                             		.loc 2 1470 34 discriminator 3
 1314 008e ED A5 01                		mov.L	4[r10], r5
 1315 0091 62 15                   		add	#1, r5
 1316 0093 E7 A5 01                		mov.L	r5, 4[r10]
 1317                             	.L21:
1470:../src/wolfcrypt/src/des3.c ****                 l = pc1[j] - 1;                    /* integer bit location        */
 1318                             		.loc 2 1470 13 discriminator 1
 1319 0096 ED A5 01                		mov.L	4[r10], r5
 1320 0099 75 55 37                		cmp	#55, r5
 1321 009c 2B A8                   		ble	.L22
1476:../src/wolfcrypt/src/des3.c ****             }
1477:../src/wolfcrypt/src/des3.c **** 
1478:../src/wolfcrypt/src/des3.c ****             for (i = 0; i < 16; i++) {            /* key chunk for each iteration */
 1322                             		.loc 2 1478 20
 1323 009e F8 A6 00                		mov.L	#0, [r10]
 1324                             		.loc 2 1478 13
 1325 00a1 38 7A 01                		bra	.L23
 1326                             	.L33:
1479:../src/wolfcrypt/src/des3.c ****                 XMEMSET(ks, 0, 8);                /* Clear key schedule */
 1327                             		.loc 2 1479 17
 1328 00a4 66 83                   		mov.L	#8, r3
 1329 00a6 66 02                   		mov.L	#0, r2
 1330 00a8 ED A1 05                		mov.L	20[r10], r1
 1331 00ab 05 00 00 00             		bsr	_memset
1480:../src/wolfcrypt/src/des3.c **** 
1481:../src/wolfcrypt/src/des3.c ****                 for (j = 0; j < 56; j++)          /* rotate pc1 the right amount  */
 1332                             		.loc 2 1481 24
 1333 00af F9 A6 01 00             		mov.L	#0, 4[r10]
 1334                             		.loc 2 1481 17
 1335 00b3 2E 50                   		bra	.L24
 1336                             	.L29:
1482:../src/wolfcrypt/src/des3.c ****                     pcr[j] =
1483:../src/wolfcrypt/src/des3.c ****                           pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l-28];
 1337                             		.loc 2 1483 47
 1338 00b5 FB 52 00 00 00 00       		mov.L	#_totrot, r5
 1339 00bb 06 88 A5                		add	[r10].L, r5
 1340 00be CC 55                   		mov.B	[r5], r5
 1341 00c0 5B 55                   		movu.B	r5, r5
 1342                             		.loc 2 1483 35
 1343 00c2 ED A4 01                		mov.L	4[r10], r4
 1344 00c5 4B 45                   		add	r4, r5
 1345 00c7 E7 A5 06                		mov.L	r5, 24[r10]
 1346                             		.loc 2 1483 67
 1347 00ca ED A5 01                		mov.L	4[r10], r5
 1348 00cd 75 55 1B                		cmp	#27, r5
 1349 00d0 2A 06                   		bgt	.L25
 1350                             		.loc 2 1483 67 is_stmt 0 discriminator 1
 1351 00d2 75 45 1C                		mov.L	#28, r5
 1352 00d5 0C                      		bra	.L26
 1353                             	.L25:
 1354                             		.loc 2 1483 67 discriminator 2
 1355 00d6 75 45 38                		mov.L	#56, r5
 1356                             	.L26:
 1357                             		.loc 2 1483 77 is_stmt 1 discriminator 4
 1358 00d9 ED A4 06                		mov.L	24[r10], r4
 1359 00dc 47 54                   		cmp	r5, r4
 1360 00de 29 09                   		blt	.L27
 1361                             		.loc 2 1483 80 discriminator 5
 1362 00e0 ED A5 06                		mov.L	24[r10], r5
 1363 00e3 71 55 E4                		add	#-28, r5
 1364 00e6 0C                      		bra	.L28
 1365                             	.L27:
 1366                             		.loc 2 1483 77 discriminator 6
 1367 00e7 ED A5 06                		mov.L	24[r10], r5
 1368                             	.L28:
 1369                             		.loc 2 1483 31 discriminator 8
 1370 00ea ED A4 03                		mov.L	12[r10], r4
 1371 00ed 4B 54                   		add	r5, r4
1482:../src/wolfcrypt/src/des3.c ****                     pcr[j] =
 1372                             		.loc 2 1482 24 discriminator 8
 1373 00ef ED A5 01                		mov.L	4[r10], r5
 1374 00f2 ED A3 04                		mov.L	16[r10], r3
 1375 00f5 4B 35                   		add	r3, r5
 1376                             		.loc 2 1483 31 discriminator 8
 1377 00f7 CC 44                   		mov.B	[r4], r4
1482:../src/wolfcrypt/src/des3.c ****                     pcr[j] =
 1378                             		.loc 2 1482 28 discriminator 8
 1379 00f9 C3 54                   		mov.B	r4, [r5]
1481:../src/wolfcrypt/src/des3.c ****                     pcr[j] =
 1380                             		.loc 2 1481 38 discriminator 8
 1381 00fb ED A5 01                		mov.L	4[r10], r5
 1382 00fe 62 15                   		add	#1, r5
 1383 0100 E7 A5 01                		mov.L	r5, 4[r10]
 1384                             	.L24:
1481:../src/wolfcrypt/src/des3.c ****                     pcr[j] =
 1385                             		.loc 2 1481 17 discriminator 2
 1386 0103 ED A5 01                		mov.L	4[r10], r5
 1387 0106 75 55 37                		cmp	#55, r5
 1388 0109 2B AC                   		ble	.L29
1484:../src/wolfcrypt/src/des3.c **** 
1485:../src/wolfcrypt/src/des3.c ****                 /* rotate left and right halves independently */
1486:../src/wolfcrypt/src/des3.c ****                 for (j = 0; j < 48; j++) {        /* select bits individually     */
 1389                             		.loc 2 1486 24
 1390 010b F9 A6 01 00             		mov.L	#0, 4[r10]
 1391                             		.loc 2 1486 17
 1392 010f 38 81 00                		bra	.L30
 1393                             	.L32:
1487:../src/wolfcrypt/src/des3.c ****                     if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
 1394                             		.loc 2 1487 32
 1395 0112 FB 52 00 00 00 00       		mov.L	#_pc2, r5
 1396 0118 06 89 A5 01             		add	4[r10].L, r5
 1397 011c CC 55                   		mov.B	[r5], r5
 1398 011e 5B 55                   		movu.B	r5, r5
 1399                             		.loc 2 1487 28
 1400 0120 60 15                   		sub	#1, r5
 1401 0122 ED A4 04                		mov.L	16[r10], r4
 1402 0125 4B 45                   		add	r4, r5
 1403 0127 CC 55                   		mov.B	[r5], r5
 1404                             		.loc 2 1487 24
 1405 0129 5B 55                   		movu.B	r5, r5
 1406 012b 61 05                   		cmp	#0, r5
 1407 012d 20 5B                   		beq	.L31
1488:../src/wolfcrypt/src/des3.c ****                         l= j % 6;                 /* mask it in if it's there     */
 1408                             		.loc 2 1488 26
 1409 012f ED A5 01                		mov.L	4[r10], r5
 1410 0132 FB 72 AB AA AA 2A       		mov.L	#0x2aaaaaab, r7
 1411 0138 FC 1B 57                		emul	r5, r7
 1412 013b EF 73                   		mov.L	r7, r3
 1413 013d EF 84                   		mov.L	r8, r4
 1414 013f FD BF 52                		shar	#31, r5, r2
 1415 0142 43 24                   		sub	r2, r4
 1416 0144 63 64                   		mul	#6, r4
 1417 0146 43 45                   		sub	r4, r5
 1418 0148 E7 A5 06                		mov.L	r5, 24[r10]
1489:../src/wolfcrypt/src/des3.c ****                         ks[j/6] |= bytebit[l] >> 2;
 1419                             		.loc 2 1489 29
 1420 014b ED A4 01                		mov.L	4[r10], r4
 1421 014e FB 72 AB AA AA 2A       		mov.L	#0x2aaaaaab, r7
 1422 0154 FC 1B 47                		emul	r4, r7
 1423 0157 EF 75                   		mov.L	r7, r5
 1424 0159 EF 86                   		mov.L	r8, r6
 1425 015b 6B F4                   		shar	#31, r4
 1426 015d FF 02 46                		sub	r4, r6, r2
 1427                             		.loc 2 1489 33
 1428 0160 EF 25                   		mov.L	r2, r5
 1429 0162 ED A4 05                		mov.L	20[r10], r4
 1430 0165 4B 45                   		add	r4, r5
 1431 0167 CC 55                   		mov.B	[r5], r5
 1432 0169 CF 54                   		mov.B	r5, r4
 1433                             		.loc 2 1489 43
 1434 016b FB 52 00 00 00 00       		mov.L	#_bytebit, r5
 1435 0171 ED A3 06                		mov.L	24[r10], r3
 1436 0174 FE 63 55                		mov.L	[r3,r5], r5
 1437                             		.loc 2 1489 47
 1438 0177 6A 25                   		shar	#2, r5
 1439                             		.loc 2 1489 33
 1440 0179 57 45                   		or	r4, r5
 1441 017b CF 53                   		mov.B	r5, r3
 1442 017d EF 25                   		mov.L	r2, r5
 1443 017f ED A4 05                		mov.L	20[r10], r4
 1444 0182 4B 45                   		add	r4, r5
 1445 0184 CF 34                   		mov.B	r3, r4
 1446 0186 C3 54                   		mov.B	r4, [r5]
 1447                             	.L31:
1486:../src/wolfcrypt/src/des3.c ****                     if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
 1448                             		.loc 2 1486 38 discriminator 2
 1449 0188 ED A5 01                		mov.L	4[r10], r5
 1450 018b 62 15                   		add	#1, r5
 1451 018d E7 A5 01                		mov.L	r5, 4[r10]
 1452                             	.L30:
1486:../src/wolfcrypt/src/des3.c ****                     if (pcr[pc2[j] - 1]) {        /* check bit that goes to ks[j] */
 1453                             		.loc 2 1486 17 discriminator 1
 1454 0190 ED A5 01                		mov.L	4[r10], r5
 1455 0193 75 55 2F                		cmp	#47, r5
 1456 0196 2A 05 38 7A FF          		ble	.L32
1490:../src/wolfcrypt/src/des3.c ****                     }
1491:../src/wolfcrypt/src/des3.c ****                 }
1492:../src/wolfcrypt/src/des3.c **** 
1493:../src/wolfcrypt/src/des3.c ****                 /* Now convert to odd/even interleaved form for use in F */
1494:../src/wolfcrypt/src/des3.c ****                 out[2*i] = ((word32) ks[0] << 24)
 1457                             		.loc 2 1494 40 discriminator 2
 1458 019b ED A5 05                		mov.L	20[r10], r5
 1459 019e CC 55                   		mov.B	[r5], r5
 1460                             		.loc 2 1494 29 discriminator 2
 1461 01a0 5B 55                   		movu.B	r5, r5
 1462                             		.loc 2 1494 44 discriminator 2
 1463 01a2 FD D8 54                		shll	#24, r5, r4
1495:../src/wolfcrypt/src/des3.c ****                          | ((word32) ks[2] << 16)
 1464                             		.loc 2 1495 40 discriminator 2
 1465 01a5 ED A5 05                		mov.L	20[r10], r5
 1466 01a8 62 25                   		add	#2, r5
 1467 01aa CC 55                   		mov.B	[r5], r5
 1468                             		.loc 2 1495 29 discriminator 2
 1469 01ac 5B 55                   		movu.B	r5, r5
 1470                             		.loc 2 1495 44 discriminator 2
 1471 01ae 6D 05                   		shll	#16, r5
 1472                             		.loc 2 1495 26 discriminator 2
 1473 01b0 57 54                   		or	r5, r4
1496:../src/wolfcrypt/src/des3.c ****                          | ((word32) ks[4] << 8)
 1474                             		.loc 2 1496 40 discriminator 2
 1475 01b2 ED A5 05                		mov.L	20[r10], r5
 1476 01b5 62 45                   		add	#4, r5
 1477 01b7 CC 55                   		mov.B	[r5], r5
 1478                             		.loc 2 1496 29 discriminator 2
 1479 01b9 5B 55                   		movu.B	r5, r5
 1480                             		.loc 2 1496 44 discriminator 2
 1481 01bb 6C 85                   		shll	#8, r5
 1482                             		.loc 2 1496 26 discriminator 2
 1483 01bd FF 53 54                		or	r5, r4, r3
1497:../src/wolfcrypt/src/des3.c ****                          | ((word32) ks[6]);
 1484                             		.loc 2 1497 40 discriminator 2
 1485 01c0 ED A5 05                		mov.L	20[r10], r5
 1486 01c3 62 65                   		add	#6, r5
 1487 01c5 CC 55                   		mov.B	[r5], r5
 1488                             		.loc 2 1497 29 discriminator 2
 1489 01c7 5B 54                   		movu.B	r5, r4
1494:../src/wolfcrypt/src/des3.c ****                          | ((word32) ks[2] << 16)
 1490                             		.loc 2 1494 20 discriminator 2
 1491 01c9 EC A5                   		mov.L	[r10], r5
 1492 01cb 6C 35                   		shll	#3, r5
 1493 01cd ED A2 0C                		mov.L	48[r10], r2
 1494 01d0 4B 25                   		add	r2, r5
 1495                             		.loc 2 1497 26 discriminator 2
 1496 01d2 57 34                   		or	r3, r4
1494:../src/wolfcrypt/src/des3.c ****                          | ((word32) ks[2] << 16)
 1497                             		.loc 2 1494 26 discriminator 2
 1498 01d4 E3 54                   		mov.L	r4, [r5]
1498:../src/wolfcrypt/src/des3.c **** 
1499:../src/wolfcrypt/src/des3.c ****                 out[2*i + 1] = ((word32) ks[1] << 24)
 1499                             		.loc 2 1499 44 discriminator 2
 1500 01d6 ED A5 05                		mov.L	20[r10], r5
 1501 01d9 62 15                   		add	#1, r5
 1502 01db CC 55                   		mov.B	[r5], r5
 1503                             		.loc 2 1499 33 discriminator 2
 1504 01dd 5B 55                   		movu.B	r5, r5
 1505                             		.loc 2 1499 48 discriminator 2
 1506 01df FD D8 54                		shll	#24, r5, r4
1500:../src/wolfcrypt/src/des3.c ****                              | ((word32) ks[3] << 16)
 1507                             		.loc 2 1500 44 discriminator 2
 1508 01e2 ED A5 05                		mov.L	20[r10], r5
 1509 01e5 62 35                   		add	#3, r5
 1510 01e7 CC 55                   		mov.B	[r5], r5
 1511                             		.loc 2 1500 33 discriminator 2
 1512 01e9 5B 55                   		movu.B	r5, r5
 1513                             		.loc 2 1500 48 discriminator 2
 1514 01eb 6D 05                   		shll	#16, r5
 1515                             		.loc 2 1500 30 discriminator 2
 1516 01ed 57 54                   		or	r5, r4
1501:../src/wolfcrypt/src/des3.c ****                              | ((word32) ks[5] << 8)
 1517                             		.loc 2 1501 44 discriminator 2
 1518 01ef ED A5 05                		mov.L	20[r10], r5
 1519 01f2 62 55                   		add	#5, r5
 1520 01f4 CC 55                   		mov.B	[r5], r5
 1521                             		.loc 2 1501 33 discriminator 2
 1522 01f6 5B 55                   		movu.B	r5, r5
 1523                             		.loc 2 1501 48 discriminator 2
 1524 01f8 6C 85                   		shll	#8, r5
 1525                             		.loc 2 1501 30 discriminator 2
 1526 01fa FF 53 54                		or	r5, r4, r3
1502:../src/wolfcrypt/src/des3.c ****                              | ((word32) ks[7]);
 1527                             		.loc 2 1502 44 discriminator 2
 1528 01fd ED A5 05                		mov.L	20[r10], r5
 1529 0200 62 75                   		add	#7, r5
 1530 0202 CC 55                   		mov.B	[r5], r5
 1531                             		.loc 2 1502 33 discriminator 2
 1532 0204 5B 54                   		movu.B	r5, r4
1499:../src/wolfcrypt/src/des3.c ****                              | ((word32) ks[3] << 16)
 1533                             		.loc 2 1499 20 discriminator 2
 1534 0206 EC A5                   		mov.L	[r10], r5
 1535 0208 6C 35                   		shll	#3, r5
 1536 020a 62 45                   		add	#4, r5
 1537 020c ED A2 0C                		mov.L	48[r10], r2
 1538 020f 4B 25                   		add	r2, r5
 1539                             		.loc 2 1502 30 discriminator 2
 1540 0211 57 34                   		or	r3, r4
1499:../src/wolfcrypt/src/des3.c ****                              | ((word32) ks[3] << 16)
 1541                             		.loc 2 1499 30 discriminator 2
 1542 0213 E3 54                   		mov.L	r4, [r5]
1478:../src/wolfcrypt/src/des3.c ****                 XMEMSET(ks, 0, 8);                /* Clear key schedule */
 1543                             		.loc 2 1478 34 discriminator 2
 1544 0215 EC A5                   		mov.L	[r10], r5
 1545 0217 62 15                   		add	#1, r5
 1546 0219 E3 A5                   		mov.L	r5, [r10]
 1547                             	.L23:
1478:../src/wolfcrypt/src/des3.c ****                 XMEMSET(ks, 0, 8);                /* Clear key schedule */
 1548                             		.loc 2 1478 13 discriminator 1
 1549 021b EC A5                   		mov.L	[r10], r5
 1550 021d 61 F5                   		cmp	#15, r5
 1551 021f 2A 05 38 83 FE          		ble	.L33
1503:../src/wolfcrypt/src/des3.c ****             }
1504:../src/wolfcrypt/src/des3.c **** 
1505:../src/wolfcrypt/src/des3.c ****             /* reverse key schedule order */
1506:../src/wolfcrypt/src/des3.c ****             if (dir == DES_DECRYPTION) {
 1552                             		.loc 2 1506 16
 1553 0224 ED A5 0B                		mov.L	44[r10], r5
 1554 0227 61 15                   		cmp	#1, r5
 1555 0229 3B 98 00                		bne	.L34
1507:../src/wolfcrypt/src/des3.c ****                 for (i = 0; i < 16; i += 2) {
 1556                             		.loc 2 1507 24
 1557 022c F8 A6 00                		mov.L	#0, [r10]
 1558                             		.loc 2 1507 17
 1559 022f 38 89 00                		bra	.L35
 1560                             	.L36:
 1561                             	.LBB4:
1508:../src/wolfcrypt/src/des3.c ****                     word32 swap = out[i];
 1562                             		.loc 2 1508 38 discriminator 3
 1563 0232 EC A5                   		mov.L	[r10], r5
 1564 0234 6C 25                   		shll	#2, r5
 1565 0236 ED A4 0C                		mov.L	48[r10], r4
 1566 0239 4B 45                   		add	r4, r5
 1567                             		.loc 2 1508 28 discriminator 3
 1568 023b EC 55                   		mov.L	[r5], r5
 1569 023d E7 A5 08                		mov.L	r5, 32[r10]
1509:../src/wolfcrypt/src/des3.c ****                     out[i] = out[DES_KS_SIZE - 2 - i];
 1570                             		.loc 2 1509 50 discriminator 3
 1571 0240 75 44 1E                		mov.L	#30, r4
 1572 0243 EC A5                   		mov.L	[r10], r5
 1573 0245 FF 05 54                		sub	r5, r4, r5
 1574                             		.loc 2 1509 33 discriminator 3
 1575 0248 6C 25                   		shll	#2, r5
 1576 024a ED A4 0C                		mov.L	48[r10], r4
 1577 024d 4B 54                   		add	r5, r4
 1578                             		.loc 2 1509 24 discriminator 3
 1579 024f EC A5                   		mov.L	[r10], r5
 1580 0251 6C 25                   		shll	#2, r5
 1581 0253 ED A3 0C                		mov.L	48[r10], r3
 1582 0256 4B 35                   		add	r3, r5
 1583                             		.loc 2 1509 33 discriminator 3
 1584 0258 EC 44                   		mov.L	[r4], r4
 1585                             		.loc 2 1509 28 discriminator 3
 1586 025a E3 54                   		mov.L	r4, [r5]
1510:../src/wolfcrypt/src/des3.c ****                     out[DES_KS_SIZE - 2 - i] = swap;
 1587                             		.loc 2 1510 41 discriminator 3
 1588 025c 75 44 1E                		mov.L	#30, r4
 1589 025f EC A5                   		mov.L	[r10], r5
 1590 0261 FF 05 54                		sub	r5, r4, r5
 1591                             		.loc 2 1510 24 discriminator 3
 1592 0264 6C 25                   		shll	#2, r5
 1593 0266 ED A4 0C                		mov.L	48[r10], r4
 1594 0269 4B 45                   		add	r4, r5
 1595                             		.loc 2 1510 46 discriminator 3
 1596 026b ED A4 08                		mov.L	32[r10], r4
 1597 026e E3 54                   		mov.L	r4, [r5]
1511:../src/wolfcrypt/src/des3.c **** 
1512:../src/wolfcrypt/src/des3.c ****                     swap = out[i + 1];
 1598                             		.loc 2 1512 31 discriminator 3
 1599 0270 EC A5                   		mov.L	[r10], r5
 1600 0272 62 15                   		add	#1, r5
 1601 0274 6C 25                   		shll	#2, r5
 1602 0276 ED A4 0C                		mov.L	48[r10], r4
 1603 0279 4B 45                   		add	r4, r5
 1604                             		.loc 2 1512 26 discriminator 3
 1605 027b EC 55                   		mov.L	[r5], r5
 1606 027d E7 A5 08                		mov.L	r5, 32[r10]
1513:../src/wolfcrypt/src/des3.c ****                     out[i + 1] = out[DES_KS_SIZE - 1 - i];
 1607                             		.loc 2 1513 54 discriminator 3
 1608 0280 75 44 1F                		mov.L	#31, r4
 1609 0283 EC A5                   		mov.L	[r10], r5
 1610 0285 FF 05 54                		sub	r5, r4, r5
 1611                             		.loc 2 1513 37 discriminator 3
 1612 0288 6C 25                   		shll	#2, r5
 1613 028a ED A4 0C                		mov.L	48[r10], r4
 1614 028d 4B 54                   		add	r5, r4
 1615                             		.loc 2 1513 24 discriminator 3
 1616 028f EC A5                   		mov.L	[r10], r5
 1617 0291 62 15                   		add	#1, r5
 1618 0293 6C 25                   		shll	#2, r5
 1619 0295 ED A3 0C                		mov.L	48[r10], r3
 1620 0298 4B 35                   		add	r3, r5
 1621                             		.loc 2 1513 37 discriminator 3
 1622 029a EC 44                   		mov.L	[r4], r4
 1623                             		.loc 2 1513 32 discriminator 3
 1624 029c E3 54                   		mov.L	r4, [r5]
1514:../src/wolfcrypt/src/des3.c ****                     out[DES_KS_SIZE - 1 - i] = swap;
 1625                             		.loc 2 1514 41 discriminator 3
 1626 029e 75 44 1F                		mov.L	#31, r4
 1627 02a1 EC A5                   		mov.L	[r10], r5
 1628 02a3 FF 05 54                		sub	r5, r4, r5
 1629                             		.loc 2 1514 24 discriminator 3
 1630 02a6 6C 25                   		shll	#2, r5
 1631 02a8 ED A4 0C                		mov.L	48[r10], r4
 1632 02ab 4B 45                   		add	r4, r5
 1633                             		.loc 2 1514 46 discriminator 3
 1634 02ad ED A4 08                		mov.L	32[r10], r4
 1635 02b0 E3 54                   		mov.L	r4, [r5]
 1636                             	.LBE4:
1507:../src/wolfcrypt/src/des3.c ****                     word32 swap = out[i];
 1637                             		.loc 2 1507 39 discriminator 3
 1638 02b2 EC A5                   		mov.L	[r10], r5
 1639 02b4 62 25                   		add	#2, r5
 1640 02b6 E3 A5                   		mov.L	r5, [r10]
 1641                             	.L35:
1507:../src/wolfcrypt/src/des3.c ****                     word32 swap = out[i];
 1642                             		.loc 2 1507 17 discriminator 1
 1643 02b8 EC A5                   		mov.L	[r10], r5
 1644 02ba 61 F5                   		cmp	#15, r5
 1645 02bc 2A 05 38 74 FF          		ble	.L36
 1646                             	.L34:
 1647                             	.LBB5:
1515:../src/wolfcrypt/src/des3.c ****                 }
1516:../src/wolfcrypt/src/des3.c ****             }
1517:../src/wolfcrypt/src/des3.c **** 
1518:../src/wolfcrypt/src/des3.c ****     #ifdef WOLFSSL_SMALL_STACK
1519:../src/wolfcrypt/src/des3.c ****             XFREE(buffer, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 1648                             		.loc 2 1519 13
 1649 02c1 ED A5 02                		mov.L	8[r10], r5
 1650 02c4 E7 A5 09                		mov.L	r5, 36[r10]
 1651 02c7 ED A5 09                		mov.L	36[r10], r5
 1652 02ca 61 05                   		cmp	#0, r5
 1653 02cc 10                      		beq	.L37
 1654                             		.loc 2 1519 13 is_stmt 0 discriminator 1
 1655 02cd ED A1 09                		mov.L	36[r10], r1
 1656 02d0 05 00 00 00             		bsr	_wolfSSL_Free
 1657                             	.L37:
 1658                             	.LBE5:
 1659                             	.LBE3:
1520:../src/wolfcrypt/src/des3.c ****     #endif
1521:../src/wolfcrypt/src/des3.c ****         }
1522:../src/wolfcrypt/src/des3.c **** 
1523:../src/wolfcrypt/src/des3.c ****         return 0;
 1660                             		.loc 2 1523 16 is_stmt 1
 1661 02d4 66 05                   		mov.L	#0, r5
 1662                             	.L20:
1524:../src/wolfcrypt/src/des3.c ****     }
 1663                             		.loc 2 1524 5
 1664 02d6 EF 51                   		mov.L	r5, r1
 1665 02d8 3F 6A 12                		rtsd	#72, r6-r10
 1666                             	.LFE45:
 1668                             		.section	.text.wc_Des_SetKey,"ax",@progbits
 1669                             		.global	_wc_Des_SetKey
 1671                             	_wc_Des_SetKey:
 1672                             	.LFB46:
1525:../src/wolfcrypt/src/des3.c **** 
1526:../src/wolfcrypt/src/des3.c ****     int wc_Des_SetKey(Des* des, const byte* key, const byte* iv, int dir)
1527:../src/wolfcrypt/src/des3.c ****     {
 1673                             		.loc 2 1527 5
 1674 0000 7E AA                   		push.l	r10
 1675                             	.LCFI16:
 1676 0002 71 0A F0                		add	#-16, r0, r10
 1677                             	.LCFI17:
 1678 0005 EF A0                   		mov.L	r10, r0
 1679 0007 E3 A1                   		mov.L	r1, [r10]
 1680 0009 E7 A2 01                		mov.L	r2, 4[r10]
 1681 000c E7 A3 02                		mov.L	r3, 8[r10]
 1682 000f E7 A4 03                		mov.L	r4, 12[r10]
1528:../src/wolfcrypt/src/des3.c ****         wc_Des_SetIV(des, iv);
 1683                             		.loc 2 1528 9
 1684 0012 ED A2 02                		mov.L	8[r10], r2
 1685 0015 EC A1                   		mov.L	[r10], r1
 1686 0017 05 00 00 00             		bsr	_wc_Des_SetIV
1529:../src/wolfcrypt/src/des3.c **** 
1530:../src/wolfcrypt/src/des3.c ****         return DesSetKey(key, dir, des->key);
 1687                             		.loc 2 1530 39
 1688 001b EC A5                   		mov.L	[r10], r5
 1689 001d 71 55 10                		add	#16, r5
 1690                             		.loc 2 1530 16
 1691 0020 EF 53                   		mov.L	r5, r3
 1692 0022 ED A2 03                		mov.L	12[r10], r2
 1693 0025 ED A1 01                		mov.L	4[r10], r1
 1694 0028 05 00 00 00             		bsr	_DesSetKey
 1695 002c EF 15                   		mov.L	r1, r5
1531:../src/wolfcrypt/src/des3.c ****     }
 1696                             		.loc 2 1531 5
 1697 002e EF 51                   		mov.L	r5, r1
 1698 0030 3F AA 05                		rtsd	#20, r10-r10
 1699                             	.LFE46:
 1701                             		.section	.text.wc_Des3_SetKey,"ax",@progbits
 1702                             		.global	_wc_Des3_SetKey
 1704                             	_wc_Des3_SetKey:
 1705                             	.LFB47:
1532:../src/wolfcrypt/src/des3.c **** 
1533:../src/wolfcrypt/src/des3.c ****     int wc_Des3_SetKey(Des3* des, const byte* key, const byte* iv, int dir)
1534:../src/wolfcrypt/src/des3.c ****     {
 1706                             		.loc 2 1534 5
 1707 0000 7E AA                   		push.l	r10
 1708                             	.LCFI18:
 1709 0002 71 0A EC                		add	#-20, r0, r10
 1710                             	.LCFI19:
 1711 0005 EF A0                   		mov.L	r10, r0
 1712 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1713 000a E7 A2 02                		mov.L	r2, 8[r10]
 1714 000d E7 A3 03                		mov.L	r3, 12[r10]
 1715 0010 E7 A4 04                		mov.L	r4, 16[r10]
1535:../src/wolfcrypt/src/des3.c ****         int ret;
1536:../src/wolfcrypt/src/des3.c **** 
1537:../src/wolfcrypt/src/des3.c ****         if (des == NULL || key == NULL || dir < 0) {
 1716                             		.loc 2 1537 12
 1717 0013 ED A5 01                		mov.L	4[r10], r5
 1718 0016 61 05                   		cmp	#0, r5
 1719 0018 20 0F                   		beq	.L41
 1720                             		.loc 2 1537 25 discriminator 1
 1721 001a ED A5 02                		mov.L	8[r10], r5
 1722 001d 61 05                   		cmp	#0, r5
 1723 001f 10                      		beq	.L41
 1724                             		.loc 2 1537 40 discriminator 2
 1725 0020 ED A5 04                		mov.L	16[r10], r5
 1726 0023 61 05                   		cmp	#0, r5
 1727 0025 28 09                   		bge	.L42
 1728                             	.L41:
1538:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
 1729                             		.loc 2 1538 20
 1730 0027 FB 5A 53 FF             		mov.L	#-173, r5
 1731 002b 38 C1 00                		bra	.L43
 1732                             	.L42:
1539:../src/wolfcrypt/src/des3.c ****         }
1540:../src/wolfcrypt/src/des3.c **** 
1541:../src/wolfcrypt/src/des3.c ****         XMEMSET(des->key, 0, sizeof(*(des->key)));
 1733                             		.loc 2 1541 9
 1734 002e ED A5 01                		mov.L	4[r10], r5
 1735 0031 75 43 80                		mov.L	#0x80, r3
 1736 0034 66 02                   		mov.L	#0, r2
 1737 0036 EF 51                   		mov.L	r5, r1
 1738 0038 05 00 00 00             		bsr	_memset
1542:../src/wolfcrypt/src/des3.c ****         XMEMSET(des->reg, 0, sizeof(*(des->reg)));
 1739                             		.loc 2 1542 9
 1740 003c ED A5 01                		mov.L	4[r10], r5
 1741 003f 72 55 80 01             		add	#0x180, r5
 1742 0043 66 43                   		mov.L	#4, r3
 1743 0045 66 02                   		mov.L	#0, r2
 1744 0047 EF 51                   		mov.L	r5, r1
 1745 0049 05 00 00 00             		bsr	_memset
1543:../src/wolfcrypt/src/des3.c ****         XMEMSET(des->tmp, 0, sizeof(*(des->tmp)));
 1746                             		.loc 2 1543 9
 1747 004d ED A5 01                		mov.L	4[r10], r5
 1748 0050 72 55 88 01             		add	#0x188, r5
 1749 0054 66 43                   		mov.L	#4, r3
 1750 0056 66 02                   		mov.L	#0, r2
 1751 0058 EF 51                   		mov.L	r5, r1
 1752 005a 05 00 00 00             		bsr	_memset
1544:../src/wolfcrypt/src/des3.c **** 
1545:../src/wolfcrypt/src/des3.c ****     #if defined(WOLF_CRYPTO_CB) || \
1546:../src/wolfcrypt/src/des3.c ****         (defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_3DES))
1547:../src/wolfcrypt/src/des3.c ****         #ifdef WOLF_CRYPTO_CB
1548:../src/wolfcrypt/src/des3.c ****         if (des->devId != INVALID_DEVID)
1549:../src/wolfcrypt/src/des3.c ****         #endif
1550:../src/wolfcrypt/src/des3.c ****         {
1551:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->devKey, key, DES3_KEYLEN);
1552:../src/wolfcrypt/src/des3.c ****         }
1553:../src/wolfcrypt/src/des3.c ****     #endif
1554:../src/wolfcrypt/src/des3.c **** 
1555:../src/wolfcrypt/src/des3.c ****         ret = DesSetKey(key + (dir == DES_ENCRYPTION ? 0:16), dir, des->key[0]);
 1753                             		.loc 2 1555 57
 1754 005e ED A5 04                		mov.L	16[r10], r5
 1755 0061 61 05                   		cmp	#0, r5
 1756 0063 1C                      		bne	.L44
 1757                             		.loc 2 1555 57 is_stmt 0 discriminator 1
 1758 0064 66 05                   		mov.L	#0, r5
 1759 0066 0C                      		bra	.L45
 1760                             	.L44:
 1761                             		.loc 2 1555 57 discriminator 2
 1762 0067 75 45 10                		mov.L	#16, r5
 1763                             	.L45:
 1764                             		.loc 2 1555 15 is_stmt 1 discriminator 4
 1765 006a ED A4 02                		mov.L	8[r10], r4
 1766 006d 4B 45                   		add	r4, r5
 1767                             		.loc 2 1555 76 discriminator 4
 1768 006f ED A4 01                		mov.L	4[r10], r4
 1769                             		.loc 2 1555 15 discriminator 4
 1770 0072 EF 43                   		mov.L	r4, r3
 1771 0074 ED A2 04                		mov.L	16[r10], r2
 1772 0077 EF 51                   		mov.L	r5, r1
 1773 0079 05 00 00 00             		bsr	_DesSetKey
 1774 007d E3 A1                   		mov.L	r1, [r10]
1556:../src/wolfcrypt/src/des3.c ****         if (ret != 0)
 1775                             		.loc 2 1556 12 discriminator 4
 1776 007f EC A5                   		mov.L	[r10], r5
 1777 0081 61 05                   		cmp	#0, r5
 1778 0083 15                      		beq	.L46
1557:../src/wolfcrypt/src/des3.c ****             return ret;
 1779                             		.loc 2 1557 20
 1780 0084 EC A5                   		mov.L	[r10], r5
 1781 0086 2E 66                   		bra	.L43
 1782                             	.L46:
1558:../src/wolfcrypt/src/des3.c **** 
1559:../src/wolfcrypt/src/des3.c ****         ret = DesSetKey(key + 8, !dir, des->key[1]);
 1783                             		.loc 2 1559 15
 1784 0088 ED A5 02                		mov.L	8[r10], r5
 1785 008b 71 54 08                		add	#8, r5, r4
 1786 008e ED A5 04                		mov.L	16[r10], r5
 1787 0091 61 05                   		cmp	#0, r5
 1788 0093 FC DB 50                		sceq.L	r5
 1789 0096 5B 52                   		movu.B	r5, r2
 1790                             		.loc 2 1559 48
 1791 0098 ED A5 01                		mov.L	4[r10], r5
 1792 009b 72 55 80 00             		add	#0x80, r5
 1793                             		.loc 2 1559 15
 1794 009f EF 53                   		mov.L	r5, r3
 1795 00a1 EF 41                   		mov.L	r4, r1
 1796 00a3 05 00 00 00             		bsr	_DesSetKey
 1797 00a7 E3 A1                   		mov.L	r1, [r10]
1560:../src/wolfcrypt/src/des3.c ****         if (ret != 0)
 1798                             		.loc 2 1560 12
 1799 00a9 EC A5                   		mov.L	[r10], r5
 1800 00ab 61 05                   		cmp	#0, r5
 1801 00ad 15                      		beq	.L47
1561:../src/wolfcrypt/src/des3.c ****             return ret;
 1802                             		.loc 2 1561 20
 1803 00ae EC A5                   		mov.L	[r10], r5
 1804 00b0 2E 3C                   		bra	.L43
 1805                             	.L47:
1562:../src/wolfcrypt/src/des3.c **** 
1563:../src/wolfcrypt/src/des3.c ****         ret = DesSetKey(key + (dir == DES_DECRYPTION ? 0:16), dir, des->key[2]);
 1806                             		.loc 2 1563 57
 1807 00b2 ED A5 04                		mov.L	16[r10], r5
 1808 00b5 61 15                   		cmp	#1, r5
 1809 00b7 1C                      		bne	.L48
 1810                             		.loc 2 1563 57 is_stmt 0 discriminator 1
 1811 00b8 66 05                   		mov.L	#0, r5
 1812 00ba 0C                      		bra	.L49
 1813                             	.L48:
 1814                             		.loc 2 1563 57 discriminator 2
 1815 00bb 75 45 10                		mov.L	#16, r5
 1816                             	.L49:
 1817                             		.loc 2 1563 15 is_stmt 1 discriminator 4
 1818 00be ED A4 02                		mov.L	8[r10], r4
 1819 00c1 4B 54                   		add	r5, r4
 1820                             		.loc 2 1563 76 discriminator 4
 1821 00c3 ED A5 01                		mov.L	4[r10], r5
 1822 00c6 72 55 00 01             		add	#0x100, r5
 1823                             		.loc 2 1563 15 discriminator 4
 1824 00ca EF 53                   		mov.L	r5, r3
 1825 00cc ED A2 04                		mov.L	16[r10], r2
 1826 00cf EF 41                   		mov.L	r4, r1
 1827 00d1 05 00 00 00             		bsr	_DesSetKey
 1828 00d5 E3 A1                   		mov.L	r1, [r10]
1564:../src/wolfcrypt/src/des3.c ****         if (ret != 0)
 1829                             		.loc 2 1564 12 discriminator 4
 1830 00d7 EC A5                   		mov.L	[r10], r5
 1831 00d9 61 05                   		cmp	#0, r5
 1832 00db 15                      		beq	.L50
1565:../src/wolfcrypt/src/des3.c ****             return ret;
 1833                             		.loc 2 1565 20
 1834 00dc EC A5                   		mov.L	[r10], r5
 1835 00de 2E 0E                   		bra	.L43
 1836                             	.L50:
1566:../src/wolfcrypt/src/des3.c **** 
1567:../src/wolfcrypt/src/des3.c ****         return wc_Des3_SetIV(des, iv);
 1837                             		.loc 2 1567 16
 1838 00e0 ED A2 03                		mov.L	12[r10], r2
 1839 00e3 ED A1 01                		mov.L	4[r10], r1
 1840 00e6 05 00 00 00             		bsr	_wc_Des3_SetIV
 1841 00ea EF 15                   		mov.L	r1, r5
 1842                             		.balign 8,3,1
 1843                             	.L43:
1568:../src/wolfcrypt/src/des3.c ****     }
 1844                             		.loc 2 1568 5
 1845 00ec EF 51                   		mov.L	r5, r1
 1846 00ee 3F AA 06                		rtsd	#24, r10-r10
 1847                             	.LFE47:
 1849 00f1 FD 70 40 00 00 00 80    		.section	.text.DesRawProcessBlock,"ax",@progbits
 1851                             	_DesRawProcessBlock:
 1852                             	.LFB48:
1569:../src/wolfcrypt/src/des3.c **** 
1570:../src/wolfcrypt/src/des3.c ****     static void DesRawProcessBlock(word32* lIn, word32* rIn, const word32* kptr)
1571:../src/wolfcrypt/src/des3.c ****     {
 1853                             		.loc 2 1571 5
 1854 0000 7E AA                   		push.l	r10
 1855                             	.LCFI20:
 1856 0002 71 0A E4                		add	#-28, r0, r10
 1857                             	.LCFI21:
 1858 0005 EF A0                   		mov.L	r10, r0
 1859 0007 E7 A1 04                		mov.L	r1, 16[r10]
 1860 000a E7 A2 05                		mov.L	r2, 20[r10]
 1861 000d E7 A3 06                		mov.L	r3, 24[r10]
1572:../src/wolfcrypt/src/des3.c ****         word32 l = *lIn, r = *rIn, i;
 1862                             		.loc 2 1572 16
 1863 0010 ED A5 04                		mov.L	16[r10], r5
 1864 0013 EC 55                   		mov.L	[r5], r5
 1865 0015 E3 A5                   		mov.L	r5, [r10]
 1866                             		.loc 2 1572 26
 1867 0017 ED A5 05                		mov.L	20[r10], r5
 1868 001a EC 55                   		mov.L	[r5], r5
 1869 001c E7 A5 01                		mov.L	r5, 4[r10]
1573:../src/wolfcrypt/src/des3.c **** 
1574:../src/wolfcrypt/src/des3.c ****         for (i=0; i<8; i++)
 1870                             		.loc 2 1574 15
 1871 001f F9 A6 02 00             		mov.L	#0, 8[r10]
 1872                             		.loc 2 1574 9
 1873 0023 38 F5 01                		bra	.L52
 1874                             	.L53:
 1875                             	.LBB6:
1575:../src/wolfcrypt/src/des3.c ****         {
1576:../src/wolfcrypt/src/des3.c ****             word32 work = rotrFixed(r, 4U) ^ kptr[4*i+0];
 1876                             		.loc 2 1576 27 discriminator 3
 1877 0026 66 42                   		mov.L	#4, r2
 1878 0028 ED A1 01                		mov.L	4[r10], r1
 1879 002b 05 00 00 00             		bsr	_rotrFixed
 1880 002f EF 13                   		mov.L	r1, r3
 1881                             		.loc 2 1576 50 discriminator 3
 1882 0031 ED A5 02                		mov.L	8[r10], r5
 1883 0034 6C 45                   		shll	#4, r5
 1884 0036 ED A4 06                		mov.L	24[r10], r4
 1885 0039 4B 45                   		add	r4, r5
 1886 003b EC 55                   		mov.L	[r5], r5
 1887                             		.loc 2 1576 20 discriminator 3
 1888 003d FC 37 35                		xor	r3, r5
 1889 0040 E7 A5 03                		mov.L	r5, 12[r10]
1577:../src/wolfcrypt/src/des3.c ****             l ^= Spbox[6][(work) & 0x3f]
 1890                             		.loc 2 1577 34 discriminator 3
 1891 0043 ED A5 03                		mov.L	12[r10], r5
 1892 0046 75 25 3F                		and	#63, r5
 1893                             		.loc 2 1577 26 discriminator 3
 1894 0049 FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 1895 004f 72 55 80 01             		add	#0x180, r5
 1896 0053 FE 65 43                		mov.L	[r5,r4], r3
1578:../src/wolfcrypt/src/des3.c ****               ^  Spbox[4][(work >> 8) & 0x3f]
 1897                             		.loc 2 1578 33 discriminator 3
 1898 0056 ED A5 03                		mov.L	12[r10], r5
 1899 0059 68 85                   		shlr	#8, r5
 1900                             		.loc 2 1578 39 discriminator 3
 1901 005b 75 25 3F                		and	#63, r5
 1902                             		.loc 2 1578 26 discriminator 3
 1903 005e FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 1904 0064 72 55 00 01             		add	#0x100, r5
 1905 0068 FE 65 45                		mov.L	[r5,r4], r5
 1906                             		.loc 2 1578 15 discriminator 3
 1907 006b FC 37 53                		xor	r5, r3
1579:../src/wolfcrypt/src/des3.c ****               ^  Spbox[2][(work >> 16) & 0x3f]
 1908                             		.loc 2 1579 33 discriminator 3
 1909 006e ED A5 03                		mov.L	12[r10], r5
 1910 0071 69 05                   		shlr	#16, r5
 1911                             		.loc 2 1579 40 discriminator 3
 1912 0073 75 25 3F                		and	#63, r5
 1913                             		.loc 2 1579 26 discriminator 3
 1914 0076 FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 1915 007c 72 55 80 00             		add	#0x80, r5
 1916 0080 FE 65 45                		mov.L	[r5,r4], r5
 1917                             		.loc 2 1579 15 discriminator 3
 1918 0083 FC 37 53                		xor	r5, r3
1580:../src/wolfcrypt/src/des3.c ****               ^  Spbox[0][(work >> 24) & 0x3f];
 1919                             		.loc 2 1580 33 discriminator 3
 1920 0086 ED A5 03                		mov.L	12[r10], r5
 1921 0089 69 85                   		shlr	#24, r5
 1922                             		.loc 2 1580 40 discriminator 3
 1923 008b 75 25 3F                		and	#63, r5
 1924                             		.loc 2 1580 26 discriminator 3
 1925 008e FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 1926 0094 FE 65 45                		mov.L	[r5,r4], r5
 1927                             		.loc 2 1580 15 discriminator 3
 1928 0097 FC 37 35                		xor	r3, r5
1577:../src/wolfcrypt/src/des3.c ****               ^  Spbox[4][(work >> 8) & 0x3f]
 1929                             		.loc 2 1577 15 discriminator 3
 1930 009a EC A4                   		mov.L	[r10], r4
 1931 009c FC 37 45                		xor	r4, r5
 1932 009f E3 A5                   		mov.L	r5, [r10]
1581:../src/wolfcrypt/src/des3.c ****             work = r ^ kptr[4*i+1];
 1933                             		.loc 2 1581 28 discriminator 3
 1934 00a1 ED A5 02                		mov.L	8[r10], r5
 1935 00a4 6C 45                   		shll	#4, r5
 1936 00a6 62 45                   		add	#4, r5
 1937 00a8 ED A4 06                		mov.L	24[r10], r4
 1938 00ab 4B 45                   		add	r4, r5
 1939 00ad EC 55                   		mov.L	[r5], r5
 1940                             		.loc 2 1581 18 discriminator 3
 1941 00af ED A4 01                		mov.L	4[r10], r4
 1942 00b2 FC 37 45                		xor	r4, r5
 1943 00b5 E7 A5 03                		mov.L	r5, 12[r10]
1582:../src/wolfcrypt/src/des3.c ****             l ^= Spbox[7][(work) & 0x3f]
 1944                             		.loc 2 1582 34 discriminator 3
 1945 00b8 ED A5 03                		mov.L	12[r10], r5
 1946 00bb 75 25 3F                		and	#63, r5
 1947                             		.loc 2 1582 26 discriminator 3
 1948 00be FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 1949 00c4 72 55 C0 01             		add	#0x1c0, r5
 1950 00c8 FE 65 43                		mov.L	[r5,r4], r3
1583:../src/wolfcrypt/src/des3.c ****               ^  Spbox[5][(work >> 8) & 0x3f]
 1951                             		.loc 2 1583 33 discriminator 3
 1952 00cb ED A5 03                		mov.L	12[r10], r5
 1953 00ce 68 85                   		shlr	#8, r5
 1954                             		.loc 2 1583 39 discriminator 3
 1955 00d0 75 25 3F                		and	#63, r5
 1956                             		.loc 2 1583 26 discriminator 3
 1957 00d3 FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 1958 00d9 72 55 40 01             		add	#0x140, r5
 1959 00dd FE 65 45                		mov.L	[r5,r4], r5
 1960                             		.loc 2 1583 15 discriminator 3
 1961 00e0 FC 37 53                		xor	r5, r3
1584:../src/wolfcrypt/src/des3.c ****               ^  Spbox[3][(work >> 16) & 0x3f]
 1962                             		.loc 2 1584 33 discriminator 3
 1963 00e3 ED A5 03                		mov.L	12[r10], r5
 1964 00e6 69 05                   		shlr	#16, r5
 1965                             		.loc 2 1584 40 discriminator 3
 1966 00e8 75 25 3F                		and	#63, r5
 1967                             		.loc 2 1584 26 discriminator 3
 1968 00eb FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 1969 00f1 72 55 C0 00             		add	#0xc0, r5
 1970 00f5 FE 65 45                		mov.L	[r5,r4], r5
 1971                             		.loc 2 1584 15 discriminator 3
 1972 00f8 FC 37 53                		xor	r5, r3
1585:../src/wolfcrypt/src/des3.c ****               ^  Spbox[1][(work >> 24) & 0x3f];
 1973                             		.loc 2 1585 33 discriminator 3
 1974 00fb ED A5 03                		mov.L	12[r10], r5
 1975 00fe 69 85                   		shlr	#24, r5
 1976                             		.loc 2 1585 40 discriminator 3
 1977 0100 75 25 3F                		and	#63, r5
 1978                             		.loc 2 1585 26 discriminator 3
 1979 0103 FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 1980 0109 71 55 40                		add	#0x40, r5
 1981 010c FE 65 45                		mov.L	[r5,r4], r5
 1982                             		.loc 2 1585 15 discriminator 3
 1983 010f FC 37 35                		xor	r3, r5
1582:../src/wolfcrypt/src/des3.c ****               ^  Spbox[5][(work >> 8) & 0x3f]
 1984                             		.loc 2 1582 15 discriminator 3
 1985 0112 EC A4                   		mov.L	[r10], r4
 1986 0114 FC 37 45                		xor	r4, r5
 1987 0117 E3 A5                   		mov.L	r5, [r10]
1586:../src/wolfcrypt/src/des3.c **** 
1587:../src/wolfcrypt/src/des3.c ****             work = rotrFixed(l, 4U) ^ kptr[4*i+2];
 1988                             		.loc 2 1587 20 discriminator 3
 1989 0119 66 42                   		mov.L	#4, r2
 1990 011b EC A1                   		mov.L	[r10], r1
 1991 011d 05 00 00 00             		bsr	_rotrFixed
 1992 0121 EF 13                   		mov.L	r1, r3
 1993                             		.loc 2 1587 43 discriminator 3
 1994 0123 ED A5 02                		mov.L	8[r10], r5
 1995 0126 6C 45                   		shll	#4, r5
 1996 0128 62 85                   		add	#8, r5
 1997 012a ED A4 06                		mov.L	24[r10], r4
 1998 012d 4B 45                   		add	r4, r5
 1999 012f EC 55                   		mov.L	[r5], r5
 2000                             		.loc 2 1587 18 discriminator 3
 2001 0131 FC 37 35                		xor	r3, r5
 2002 0134 E7 A5 03                		mov.L	r5, 12[r10]
1588:../src/wolfcrypt/src/des3.c ****             r ^= Spbox[6][(work) & 0x3f]
 2003                             		.loc 2 1588 34 discriminator 3
 2004 0137 ED A5 03                		mov.L	12[r10], r5
 2005 013a 75 25 3F                		and	#63, r5
 2006                             		.loc 2 1588 26 discriminator 3
 2007 013d FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 2008 0143 72 55 80 01             		add	#0x180, r5
 2009 0147 FE 65 43                		mov.L	[r5,r4], r3
1589:../src/wolfcrypt/src/des3.c ****               ^  Spbox[4][(work >> 8) & 0x3f]
 2010                             		.loc 2 1589 33 discriminator 3
 2011 014a ED A5 03                		mov.L	12[r10], r5
 2012 014d 68 85                   		shlr	#8, r5
 2013                             		.loc 2 1589 39 discriminator 3
 2014 014f 75 25 3F                		and	#63, r5
 2015                             		.loc 2 1589 26 discriminator 3
 2016 0152 FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 2017 0158 72 55 00 01             		add	#0x100, r5
 2018 015c FE 65 45                		mov.L	[r5,r4], r5
 2019                             		.loc 2 1589 15 discriminator 3
 2020 015f FC 37 53                		xor	r5, r3
1590:../src/wolfcrypt/src/des3.c ****               ^  Spbox[2][(work >> 16) & 0x3f]
 2021                             		.loc 2 1590 33 discriminator 3
 2022 0162 ED A5 03                		mov.L	12[r10], r5
 2023 0165 69 05                   		shlr	#16, r5
 2024                             		.loc 2 1590 40 discriminator 3
 2025 0167 75 25 3F                		and	#63, r5
 2026                             		.loc 2 1590 26 discriminator 3
 2027 016a FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 2028 0170 72 55 80 00             		add	#0x80, r5
 2029 0174 FE 65 45                		mov.L	[r5,r4], r5
 2030                             		.loc 2 1590 15 discriminator 3
 2031 0177 FC 37 53                		xor	r5, r3
1591:../src/wolfcrypt/src/des3.c ****               ^  Spbox[0][(work >> 24) & 0x3f];
 2032                             		.loc 2 1591 33 discriminator 3
 2033 017a ED A5 03                		mov.L	12[r10], r5
 2034 017d 69 85                   		shlr	#24, r5
 2035                             		.loc 2 1591 40 discriminator 3
 2036 017f 75 25 3F                		and	#63, r5
 2037                             		.loc 2 1591 26 discriminator 3
 2038 0182 FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 2039 0188 FE 65 45                		mov.L	[r5,r4], r5
 2040                             		.loc 2 1591 15 discriminator 3
 2041 018b FC 37 35                		xor	r3, r5
1588:../src/wolfcrypt/src/des3.c ****               ^  Spbox[4][(work >> 8) & 0x3f]
 2042                             		.loc 2 1588 15 discriminator 3
 2043 018e ED A4 01                		mov.L	4[r10], r4
 2044 0191 FC 37 45                		xor	r4, r5
 2045 0194 E7 A5 01                		mov.L	r5, 4[r10]
1592:../src/wolfcrypt/src/des3.c ****             work = l ^ kptr[4*i+3];
 2046                             		.loc 2 1592 28 discriminator 3
 2047 0197 ED A5 02                		mov.L	8[r10], r5
 2048 019a 6C 45                   		shll	#4, r5
 2049 019c 62 C5                   		add	#12, r5
 2050 019e ED A4 06                		mov.L	24[r10], r4
 2051 01a1 4B 45                   		add	r4, r5
 2052 01a3 EC 55                   		mov.L	[r5], r5
 2053                             		.loc 2 1592 18 discriminator 3
 2054 01a5 EC A4                   		mov.L	[r10], r4
 2055 01a7 FC 37 45                		xor	r4, r5
 2056 01aa E7 A5 03                		mov.L	r5, 12[r10]
1593:../src/wolfcrypt/src/des3.c ****             r ^= Spbox[7][(work) & 0x3f]
 2057                             		.loc 2 1593 34 discriminator 3
 2058 01ad ED A5 03                		mov.L	12[r10], r5
 2059 01b0 75 25 3F                		and	#63, r5
 2060                             		.loc 2 1593 26 discriminator 3
 2061 01b3 FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 2062 01b9 72 55 C0 01             		add	#0x1c0, r5
 2063 01bd FE 65 43                		mov.L	[r5,r4], r3
1594:../src/wolfcrypt/src/des3.c ****               ^  Spbox[5][(work >> 8) & 0x3f]
 2064                             		.loc 2 1594 33 discriminator 3
 2065 01c0 ED A5 03                		mov.L	12[r10], r5
 2066 01c3 68 85                   		shlr	#8, r5
 2067                             		.loc 2 1594 39 discriminator 3
 2068 01c5 75 25 3F                		and	#63, r5
 2069                             		.loc 2 1594 26 discriminator 3
 2070 01c8 FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 2071 01ce 72 55 40 01             		add	#0x140, r5
 2072 01d2 FE 65 45                		mov.L	[r5,r4], r5
 2073                             		.loc 2 1594 15 discriminator 3
 2074 01d5 FC 37 53                		xor	r5, r3
1595:../src/wolfcrypt/src/des3.c ****               ^  Spbox[3][(work >> 16) & 0x3f]
 2075                             		.loc 2 1595 33 discriminator 3
 2076 01d8 ED A5 03                		mov.L	12[r10], r5
 2077 01db 69 05                   		shlr	#16, r5
 2078                             		.loc 2 1595 40 discriminator 3
 2079 01dd 75 25 3F                		and	#63, r5
 2080                             		.loc 2 1595 26 discriminator 3
 2081 01e0 FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 2082 01e6 72 55 C0 00             		add	#0xc0, r5
 2083 01ea FE 65 45                		mov.L	[r5,r4], r5
 2084                             		.loc 2 1595 15 discriminator 3
 2085 01ed FC 37 53                		xor	r5, r3
1596:../src/wolfcrypt/src/des3.c ****               ^  Spbox[1][(work >> 24) & 0x3f];
 2086                             		.loc 2 1596 33 discriminator 3
 2087 01f0 ED A5 03                		mov.L	12[r10], r5
 2088 01f3 69 85                   		shlr	#24, r5
 2089                             		.loc 2 1596 40 discriminator 3
 2090 01f5 75 25 3F                		and	#63, r5
 2091                             		.loc 2 1596 26 discriminator 3
 2092 01f8 FB 42 00 00 00 00       		mov.L	#_Spbox, r4
 2093 01fe 71 55 40                		add	#0x40, r5
 2094 0201 FE 65 45                		mov.L	[r5,r4], r5
 2095                             		.loc 2 1596 15 discriminator 3
 2096 0204 FC 37 35                		xor	r3, r5
1593:../src/wolfcrypt/src/des3.c ****               ^  Spbox[5][(work >> 8) & 0x3f]
 2097                             		.loc 2 1593 15 discriminator 3
 2098 0207 ED A4 01                		mov.L	4[r10], r4
 2099 020a FC 37 45                		xor	r4, r5
 2100 020d E7 A5 01                		mov.L	r5, 4[r10]
 2101                             	.LBE6:
1574:../src/wolfcrypt/src/des3.c ****         {
 2102                             		.loc 2 1574 25 discriminator 3
 2103 0210 ED A5 02                		mov.L	8[r10], r5
 2104 0213 62 15                   		add	#1, r5
 2105 0215 E7 A5 02                		mov.L	r5, 8[r10]
 2106                             	.L52:
1574:../src/wolfcrypt/src/des3.c ****         {
 2107                             		.loc 2 1574 9 discriminator 1
 2108 0218 ED A5 02                		mov.L	8[r10], r5
 2109 021b 61 75                   		cmp	#7, r5
 2110 021d 24 05 38 07 FE          		bleu	.L53
1597:../src/wolfcrypt/src/des3.c ****         }
1598:../src/wolfcrypt/src/des3.c **** 
1599:../src/wolfcrypt/src/des3.c ****         *lIn = l; *rIn = r;
 2111                             		.loc 2 1599 14
 2112 0222 ED A5 04                		mov.L	16[r10], r5
 2113 0225 EC A4                   		mov.L	[r10], r4
 2114 0227 E3 54                   		mov.L	r4, [r5]
 2115                             		.loc 2 1599 24
 2116 0229 ED A5 05                		mov.L	20[r10], r5
 2117 022c ED A4 01                		mov.L	4[r10], r4
 2118 022f E3 54                   		mov.L	r4, [r5]
1600:../src/wolfcrypt/src/des3.c ****     }
 2119                             		.loc 2 1600 5
 2120 0231 03                      		nop
 2121 0232 3F AA 08                		rtsd	#32, r10-r10
 2122                             	.LFE48:
 2124                             		.section	.text.DesProcessBlock,"ax",@progbits
 2126                             	_DesProcessBlock:
 2127                             	.LFB49:
1601:../src/wolfcrypt/src/des3.c **** 
1602:../src/wolfcrypt/src/des3.c ****     static void DesProcessBlock(Des* des, const byte* in, byte* out)
1603:../src/wolfcrypt/src/des3.c ****     {
 2128                             		.loc 2 1603 5
 2129 0000 7E AA                   		push.l	r10
 2130                             	.LCFI22:
 2131 0002 71 0A EC                		add	#-20, r0, r10
 2132                             	.LCFI23:
 2133 0005 EF A0                   		mov.L	r10, r0
 2134 0007 E7 A1 02                		mov.L	r1, 8[r10]
 2135 000a E7 A2 03                		mov.L	r2, 12[r10]
 2136 000d E7 A3 04                		mov.L	r3, 16[r10]
1604:../src/wolfcrypt/src/des3.c ****         word32 l, r;
1605:../src/wolfcrypt/src/des3.c **** 
1606:../src/wolfcrypt/src/des3.c ****         XMEMCPY(&l, in, sizeof(l));
 2137                             		.loc 2 1606 9
 2138 0010 ED A5 03                		mov.L	12[r10], r5
 2139 0013 EC 55                   		mov.L	[r5], r5
 2140 0015 E3 A5                   		mov.L	r5, [r10]
1607:../src/wolfcrypt/src/des3.c ****         XMEMCPY(&r, in + sizeof(l), sizeof(r));
 2141                             		.loc 2 1607 9
 2142 0017 ED A5 03                		mov.L	12[r10], r5
 2143 001a 62 45                   		add	#4, r5
 2144 001c EC 55                   		mov.L	[r5], r5
 2145 001e E7 A5 01                		mov.L	r5, 4[r10]
1608:../src/wolfcrypt/src/des3.c ****         #ifdef LITTLE_ENDIAN_ORDER
1609:../src/wolfcrypt/src/des3.c ****             l = ByteReverseWord32(l);
 2146                             		.loc 2 1609 17
 2147 0021 EC A5                   		mov.L	[r10], r5
 2148 0023 EF 51                   		mov.L	r5, r1
 2149 0025 05 00 00 00             		bsr	_ByteReverseWord32
 2150 0029 EF 15                   		mov.L	r1, r5
 2151                             		.loc 2 1609 15
 2152 002b E3 A5                   		mov.L	r5, [r10]
1610:../src/wolfcrypt/src/des3.c ****             r = ByteReverseWord32(r);
 2153                             		.loc 2 1610 17
 2154 002d ED A5 01                		mov.L	4[r10], r5
 2155 0030 EF 51                   		mov.L	r5, r1
 2156 0032 05 00 00 00             		bsr	_ByteReverseWord32
 2157 0036 EF 15                   		mov.L	r1, r5
 2158                             		.loc 2 1610 15
 2159 0038 E7 A5 01                		mov.L	r5, 4[r10]
1611:../src/wolfcrypt/src/des3.c ****         #endif
1612:../src/wolfcrypt/src/des3.c ****         IPERM(&l,&r);
 2160                             		.loc 2 1612 9
 2161 003b 71 A5 04                		add	#4, r10, r5
 2162 003e EF 52                   		mov.L	r5, r2
 2163 0040 EF A1                   		mov.L	r10, r1
 2164 0042 05 00 00 00             		bsr	_IPERM
1613:../src/wolfcrypt/src/des3.c **** 
1614:../src/wolfcrypt/src/des3.c ****         DesRawProcessBlock(&l, &r, des->key);
 2165                             		.loc 2 1614 39
 2166 0046 ED A5 02                		mov.L	8[r10], r5
 2167 0049 71 54 10                		add	#16, r5, r4
 2168                             		.loc 2 1614 9
 2169 004c 71 A5 04                		add	#4, r10, r5
 2170 004f EF 43                   		mov.L	r4, r3
 2171 0051 EF 52                   		mov.L	r5, r2
 2172 0053 EF A1                   		mov.L	r10, r1
 2173 0055 05 00 00 00             		bsr	_DesRawProcessBlock
1615:../src/wolfcrypt/src/des3.c **** 
1616:../src/wolfcrypt/src/des3.c ****         FPERM(&l,&r);
 2174                             		.loc 2 1616 9
 2175 0059 71 A5 04                		add	#4, r10, r5
 2176 005c EF 52                   		mov.L	r5, r2
 2177 005e EF A1                   		mov.L	r10, r1
 2178 0060 05 00 00 00             		bsr	_FPERM
1617:../src/wolfcrypt/src/des3.c ****         #ifdef LITTLE_ENDIAN_ORDER
1618:../src/wolfcrypt/src/des3.c ****             l = ByteReverseWord32(l);
 2179                             		.loc 2 1618 17
 2180 0064 EC A5                   		mov.L	[r10], r5
 2181 0066 EF 51                   		mov.L	r5, r1
 2182 0068 05 00 00 00             		bsr	_ByteReverseWord32
 2183 006c EF 15                   		mov.L	r1, r5
 2184                             		.loc 2 1618 15
 2185 006e E3 A5                   		mov.L	r5, [r10]
1619:../src/wolfcrypt/src/des3.c ****             r = ByteReverseWord32(r);
 2186                             		.loc 2 1619 17
 2187 0070 ED A5 01                		mov.L	4[r10], r5
 2188 0073 EF 51                   		mov.L	r5, r1
 2189 0075 05 00 00 00             		bsr	_ByteReverseWord32
 2190 0079 EF 15                   		mov.L	r1, r5
 2191                             		.loc 2 1619 15
 2192 007b E7 A5 01                		mov.L	r5, 4[r10]
1620:../src/wolfcrypt/src/des3.c ****         #endif
1621:../src/wolfcrypt/src/des3.c ****         XMEMCPY(out, &r, sizeof(r));
 2193                             		.loc 2 1621 9
 2194 007e ED A4 01                		mov.L	4[r10], r4
 2195 0081 ED A5 04                		mov.L	16[r10], r5
 2196 0084 E3 54                   		mov.L	r4, [r5]
1622:../src/wolfcrypt/src/des3.c ****         XMEMCPY(out + sizeof(r), &l, sizeof(l));
 2197                             		.loc 2 1622 9
 2198 0086 ED A5 04                		mov.L	16[r10], r5
 2199 0089 62 45                   		add	#4, r5
 2200 008b EC A4                   		mov.L	[r10], r4
 2201 008d E3 54                   		mov.L	r4, [r5]
1623:../src/wolfcrypt/src/des3.c ****     }
 2202                             		.loc 2 1623 5
 2203 008f 03                      		nop
 2204 0090 3F AA 06                		rtsd	#24, r10-r10
 2205                             	.LFE49:
 2207                             		.section	.text.Des3ProcessBlock,"ax",@progbits
 2209                             	_Des3ProcessBlock:
 2210                             	.LFB50:
1624:../src/wolfcrypt/src/des3.c **** 
1625:../src/wolfcrypt/src/des3.c ****     static void Des3ProcessBlock(Des3* des, const byte* in, byte* out)
1626:../src/wolfcrypt/src/des3.c ****     {
 2211                             		.loc 2 1626 5
 2212 0000 7E AA                   		push.l	r10
 2213                             	.LCFI24:
 2214 0002 71 0A EC                		add	#-20, r0, r10
 2215                             	.LCFI25:
 2216 0005 EF A0                   		mov.L	r10, r0
 2217 0007 E7 A1 02                		mov.L	r1, 8[r10]
 2218 000a E7 A2 03                		mov.L	r2, 12[r10]
 2219 000d E7 A3 04                		mov.L	r3, 16[r10]
1627:../src/wolfcrypt/src/des3.c ****         word32 l, r;
1628:../src/wolfcrypt/src/des3.c **** 
1629:../src/wolfcrypt/src/des3.c ****         XMEMCPY(&l, in, sizeof(l));
 2220                             		.loc 2 1629 9
 2221 0010 ED A5 03                		mov.L	12[r10], r5
 2222 0013 EC 55                   		mov.L	[r5], r5
 2223 0015 E3 A5                   		mov.L	r5, [r10]
1630:../src/wolfcrypt/src/des3.c ****         XMEMCPY(&r, in + sizeof(l), sizeof(r));
 2224                             		.loc 2 1630 9
 2225 0017 ED A5 03                		mov.L	12[r10], r5
 2226 001a 62 45                   		add	#4, r5
 2227 001c EC 55                   		mov.L	[r5], r5
 2228 001e E7 A5 01                		mov.L	r5, 4[r10]
1631:../src/wolfcrypt/src/des3.c ****         #ifdef LITTLE_ENDIAN_ORDER
1632:../src/wolfcrypt/src/des3.c ****             l = ByteReverseWord32(l);
 2229                             		.loc 2 1632 17
 2230 0021 EC A5                   		mov.L	[r10], r5
 2231 0023 EF 51                   		mov.L	r5, r1
 2232 0025 05 00 00 00             		bsr	_ByteReverseWord32
 2233 0029 EF 15                   		mov.L	r1, r5
 2234                             		.loc 2 1632 15
 2235 002b E3 A5                   		mov.L	r5, [r10]
1633:../src/wolfcrypt/src/des3.c ****             r = ByteReverseWord32(r);
 2236                             		.loc 2 1633 17
 2237 002d ED A5 01                		mov.L	4[r10], r5
 2238 0030 EF 51                   		mov.L	r5, r1
 2239 0032 05 00 00 00             		bsr	_ByteReverseWord32
 2240 0036 EF 15                   		mov.L	r1, r5
 2241                             		.loc 2 1633 15
 2242 0038 E7 A5 01                		mov.L	r5, 4[r10]
1634:../src/wolfcrypt/src/des3.c ****         #endif
1635:../src/wolfcrypt/src/des3.c ****         IPERM(&l,&r);
 2243                             		.loc 2 1635 9
 2244 003b 71 A5 04                		add	#4, r10, r5
 2245 003e EF 52                   		mov.L	r5, r2
 2246 0040 EF A1                   		mov.L	r10, r1
 2247 0042 05 00 00 00             		bsr	_IPERM
1636:../src/wolfcrypt/src/des3.c **** 
1637:../src/wolfcrypt/src/des3.c ****         DesRawProcessBlock(&l, &r, des->key[0]);
 2248                             		.loc 2 1637 44
 2249 0046 ED A4 02                		mov.L	8[r10], r4
 2250                             		.loc 2 1637 9
 2251 0049 71 A5 04                		add	#4, r10, r5
 2252 004c EF 43                   		mov.L	r4, r3
 2253 004e EF 52                   		mov.L	r5, r2
 2254 0050 EF A1                   		mov.L	r10, r1
 2255 0052 05 00 00 00             		bsr	_DesRawProcessBlock
1638:../src/wolfcrypt/src/des3.c ****         DesRawProcessBlock(&r, &l, des->key[1]);
 2256                             		.loc 2 1638 44
 2257 0056 ED A5 02                		mov.L	8[r10], r5
 2258 0059 72 54 80 00             		add	#0x80, r5, r4
 2259                             		.loc 2 1638 9
 2260 005d 71 A5 04                		add	#4, r10, r5
 2261 0060 EF 43                   		mov.L	r4, r3
 2262 0062 EF A2                   		mov.L	r10, r2
 2263 0064 EF 51                   		mov.L	r5, r1
 2264 0066 05 00 00 00             		bsr	_DesRawProcessBlock
1639:../src/wolfcrypt/src/des3.c ****         DesRawProcessBlock(&l, &r, des->key[2]);
 2265                             		.loc 2 1639 44
 2266 006a ED A5 02                		mov.L	8[r10], r5
 2267 006d 72 54 00 01             		add	#0x100, r5, r4
 2268                             		.loc 2 1639 9
 2269 0071 71 A5 04                		add	#4, r10, r5
 2270 0074 EF 43                   		mov.L	r4, r3
 2271 0076 EF 52                   		mov.L	r5, r2
 2272 0078 EF A1                   		mov.L	r10, r1
 2273 007a 05 00 00 00             		bsr	_DesRawProcessBlock
1640:../src/wolfcrypt/src/des3.c **** 
1641:../src/wolfcrypt/src/des3.c ****         FPERM(&l,&r);
 2274                             		.loc 2 1641 9
 2275 007e 71 A5 04                		add	#4, r10, r5
 2276 0081 EF 52                   		mov.L	r5, r2
 2277 0083 EF A1                   		mov.L	r10, r1
 2278 0085 05 00 00 00             		bsr	_FPERM
1642:../src/wolfcrypt/src/des3.c ****         #ifdef LITTLE_ENDIAN_ORDER
1643:../src/wolfcrypt/src/des3.c ****             l = ByteReverseWord32(l);
 2279                             		.loc 2 1643 17
 2280 0089 EC A5                   		mov.L	[r10], r5
 2281 008b EF 51                   		mov.L	r5, r1
 2282 008d 05 00 00 00             		bsr	_ByteReverseWord32
 2283 0091 EF 15                   		mov.L	r1, r5
 2284                             		.loc 2 1643 15
 2285 0093 E3 A5                   		mov.L	r5, [r10]
1644:../src/wolfcrypt/src/des3.c ****             r = ByteReverseWord32(r);
 2286                             		.loc 2 1644 17
 2287 0095 ED A5 01                		mov.L	4[r10], r5
 2288 0098 EF 51                   		mov.L	r5, r1
 2289 009a 05 00 00 00             		bsr	_ByteReverseWord32
 2290 009e EF 15                   		mov.L	r1, r5
 2291                             		.loc 2 1644 15
 2292 00a0 E7 A5 01                		mov.L	r5, 4[r10]
1645:../src/wolfcrypt/src/des3.c ****         #endif
1646:../src/wolfcrypt/src/des3.c ****         XMEMCPY(out, &r, sizeof(r));
 2293                             		.loc 2 1646 9
 2294 00a3 ED A4 01                		mov.L	4[r10], r4
 2295 00a6 ED A5 04                		mov.L	16[r10], r5
 2296 00a9 E3 54                   		mov.L	r4, [r5]
1647:../src/wolfcrypt/src/des3.c ****         XMEMCPY(out + sizeof(r), &l, sizeof(l));
 2297                             		.loc 2 1647 9
 2298 00ab ED A5 04                		mov.L	16[r10], r5
 2299 00ae 62 45                   		add	#4, r5
 2300 00b0 EC A4                   		mov.L	[r10], r4
 2301 00b2 E3 54                   		mov.L	r4, [r5]
1648:../src/wolfcrypt/src/des3.c ****     }
 2302                             		.loc 2 1648 5
 2303 00b4 03                      		nop
 2304 00b5 3F AA 06                		rtsd	#24, r10-r10
 2305                             	.LFE50:
 2307                             		.section	.text.wc_Des_CbcEncrypt,"ax",@progbits
 2308                             		.global	_wc_Des_CbcEncrypt
 2310                             	_wc_Des_CbcEncrypt:
 2311                             	.LFB51:
1649:../src/wolfcrypt/src/des3.c **** 
1650:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcEncrypt(Des* des, byte* out, const byte* in, word32 sz)
1651:../src/wolfcrypt/src/des3.c ****     {
 2312                             		.loc 2 1651 5
 2313 0000 7E AA                   		push.l	r10
 2314                             	.LCFI26:
 2315 0002 71 0A EC                		add	#-20, r0, r10
 2316                             	.LCFI27:
 2317 0005 EF A0                   		mov.L	r10, r0
 2318 0007 E7 A1 01                		mov.L	r1, 4[r10]
 2319 000a E7 A2 02                		mov.L	r2, 8[r10]
 2320 000d E7 A3 03                		mov.L	r3, 12[r10]
 2321 0010 E7 A4 04                		mov.L	r4, 16[r10]
1652:../src/wolfcrypt/src/des3.c ****         word32 blocks = sz / DES_BLOCK_SIZE;
 2322                             		.loc 2 1652 16
 2323 0013 ED A5 04                		mov.L	16[r10], r5
 2324 0016 68 35                   		shlr	#3, r5
 2325 0018 E3 A5                   		mov.L	r5, [r10]
1653:../src/wolfcrypt/src/des3.c **** 
1654:../src/wolfcrypt/src/des3.c ****         while (blocks--) {
 2326                             		.loc 2 1654 15
 2327 001a 2E 3F                   		bra	.L57
 2328                             	.L58:
1655:../src/wolfcrypt/src/des3.c ****             xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 2329                             		.loc 2 1655 27
 2330 001c ED A5 01                		mov.L	4[r10], r5
 2331                             		.loc 2 1655 13
 2332 001f 66 83                   		mov.L	#8, r3
 2333 0021 ED A2 03                		mov.L	12[r10], r2
 2334 0024 EF 51                   		mov.L	r5, r1
 2335 0026 05 00 00 00             		bsr	_xorbuf
1656:../src/wolfcrypt/src/des3.c ****             DesProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
 2336                             		.loc 2 1656 41
 2337 002a ED A5 01                		mov.L	4[r10], r5
 2338                             		.loc 2 1656 58
 2339 002d ED A4 01                		mov.L	4[r10], r4
 2340                             		.loc 2 1656 13
 2341 0030 EF 43                   		mov.L	r4, r3
 2342 0032 EF 52                   		mov.L	r5, r2
 2343 0034 ED A1 01                		mov.L	4[r10], r1
 2344 0037 05 00 00 00             		bsr	_DesProcessBlock
1657:../src/wolfcrypt/src/des3.c ****             XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
 2345                             		.loc 2 1657 13
 2346 003b ED A5 01                		mov.L	4[r10], r5
 2347 003e 66 83                   		mov.L	#8, r3
 2348 0040 EF 52                   		mov.L	r5, r2
 2349 0042 ED A1 02                		mov.L	8[r10], r1
 2350 0045 05 00 00 00             		bsr	_memcpy
1658:../src/wolfcrypt/src/des3.c **** 
1659:../src/wolfcrypt/src/des3.c ****             out += DES_BLOCK_SIZE;
 2351                             		.loc 2 1659 17
 2352 0049 ED A5 02                		mov.L	8[r10], r5
 2353 004c 62 85                   		add	#8, r5
 2354 004e E7 A5 02                		mov.L	r5, 8[r10]
1660:../src/wolfcrypt/src/des3.c ****             in  += DES_BLOCK_SIZE;
 2355                             		.loc 2 1660 17
 2356 0051 ED A5 03                		mov.L	12[r10], r5
 2357 0054 62 85                   		add	#8, r5
 2358 0056 E7 A5 03                		mov.L	r5, 12[r10]
 2359                             	.L57:
1654:../src/wolfcrypt/src/des3.c ****             xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 2360                             		.loc 2 1654 22
 2361 0059 EC A5                   		mov.L	[r10], r5
 2362 005b 71 54 FF                		add	#-1, r5, r4
 2363 005e E3 A4                   		mov.L	r4, [r10]
1654:../src/wolfcrypt/src/des3.c ****             xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 2364                             		.loc 2 1654 15
 2365 0060 61 05                   		cmp	#0, r5
 2366 0062 21 BA                   		bne	.L58
1661:../src/wolfcrypt/src/des3.c ****         }
1662:../src/wolfcrypt/src/des3.c ****         return 0;
 2367                             		.loc 2 1662 16
 2368 0064 66 05                   		mov.L	#0, r5
1663:../src/wolfcrypt/src/des3.c ****     }
 2369                             		.loc 2 1663 5
 2370 0066 EF 51                   		mov.L	r5, r1
 2371 0068 3F AA 06                		rtsd	#24, r10-r10
 2372                             	.LFE51:
 2374                             		.section	.text.wc_Des_CbcDecrypt,"ax",@progbits
 2375                             		.global	_wc_Des_CbcDecrypt
 2377                             	_wc_Des_CbcDecrypt:
 2378                             	.LFB52:
1664:../src/wolfcrypt/src/des3.c **** 
1665:../src/wolfcrypt/src/des3.c ****     int wc_Des_CbcDecrypt(Des* des, byte* out, const byte* in, word32 sz)
1666:../src/wolfcrypt/src/des3.c ****     {
 2379                             		.loc 2 1666 5
 2380 0000 7E AA                   		push.l	r10
 2381                             	.LCFI28:
 2382 0002 71 0A EC                		add	#-20, r0, r10
 2383                             	.LCFI29:
 2384 0005 EF A0                   		mov.L	r10, r0
 2385 0007 E7 A1 01                		mov.L	r1, 4[r10]
 2386 000a E7 A2 02                		mov.L	r2, 8[r10]
 2387 000d E7 A3 03                		mov.L	r3, 12[r10]
 2388 0010 E7 A4 04                		mov.L	r4, 16[r10]
1667:../src/wolfcrypt/src/des3.c ****         word32 blocks = sz / DES_BLOCK_SIZE;
 2389                             		.loc 2 1667 16
 2390 0013 ED A5 04                		mov.L	16[r10], r5
 2391 0016 68 35                   		shlr	#3, r5
 2392 0018 E3 A5                   		mov.L	r5, [r10]
1668:../src/wolfcrypt/src/des3.c **** 
1669:../src/wolfcrypt/src/des3.c ****         while (blocks--) {
 2393                             		.loc 2 1669 15
 2394 001a 2E 53                   		bra	.L61
 2395                             	.L62:
1670:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
 2396                             		.loc 2 1670 13
 2397 001c ED A5 01                		mov.L	4[r10], r5
 2398 001f 62 85                   		add	#8, r5
 2399 0021 66 83                   		mov.L	#8, r3
 2400 0023 ED A2 03                		mov.L	12[r10], r2
 2401 0026 EF 51                   		mov.L	r5, r1
 2402 0028 05 00 00 00             		bsr	_memcpy
1671:../src/wolfcrypt/src/des3.c ****             DesProcessBlock(des, (byte*)des->tmp, out);
 2403                             		.loc 2 1671 41
 2404 002c ED A5 01                		mov.L	4[r10], r5
 2405 002f 62 85                   		add	#8, r5
 2406                             		.loc 2 1671 13
 2407 0031 ED A3 02                		mov.L	8[r10], r3
 2408 0034 EF 52                   		mov.L	r5, r2
 2409 0036 ED A1 01                		mov.L	4[r10], r1
 2410 0039 05 00 00 00             		bsr	_DesProcessBlock
1672:../src/wolfcrypt/src/des3.c ****             xorbuf(out, (byte*)des->reg, DES_BLOCK_SIZE);
 2411                             		.loc 2 1672 32
 2412 003d ED A5 01                		mov.L	4[r10], r5
 2413                             		.loc 2 1672 13
 2414 0040 66 83                   		mov.L	#8, r3
 2415 0042 EF 52                   		mov.L	r5, r2
 2416 0044 ED A1 02                		mov.L	8[r10], r1
 2417 0047 05 00 00 00             		bsr	_xorbuf
1673:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
 2418                             		.loc 2 1673 13
 2419 004b ED A4 01                		mov.L	4[r10], r4
 2420 004e ED A5 01                		mov.L	4[r10], r5
 2421 0051 62 85                   		add	#8, r5
 2422 0053 66 83                   		mov.L	#8, r3
 2423 0055 EF 52                   		mov.L	r5, r2
 2424 0057 EF 41                   		mov.L	r4, r1
 2425 0059 05 00 00 00             		bsr	_memcpy
1674:../src/wolfcrypt/src/des3.c **** 
1675:../src/wolfcrypt/src/des3.c ****             out += DES_BLOCK_SIZE;
 2426                             		.loc 2 1675 17
 2427 005d ED A5 02                		mov.L	8[r10], r5
 2428 0060 62 85                   		add	#8, r5
 2429 0062 E7 A5 02                		mov.L	r5, 8[r10]
1676:../src/wolfcrypt/src/des3.c ****             in  += DES_BLOCK_SIZE;
 2430                             		.loc 2 1676 17
 2431 0065 ED A5 03                		mov.L	12[r10], r5
 2432 0068 62 85                   		add	#8, r5
 2433 006a E7 A5 03                		mov.L	r5, 12[r10]
 2434                             	.L61:
1669:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
 2435                             		.loc 2 1669 22
 2436 006d EC A5                   		mov.L	[r10], r5
 2437 006f 71 54 FF                		add	#-1, r5, r4
 2438 0072 E3 A4                   		mov.L	r4, [r10]
1669:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
 2439                             		.loc 2 1669 15
 2440 0074 61 05                   		cmp	#0, r5
 2441 0076 21 A6                   		bne	.L62
1677:../src/wolfcrypt/src/des3.c ****         }
1678:../src/wolfcrypt/src/des3.c ****         return 0;
 2442                             		.loc 2 1678 16
 2443 0078 66 05                   		mov.L	#0, r5
1679:../src/wolfcrypt/src/des3.c ****     }
 2444                             		.loc 2 1679 5
 2445 007a EF 51                   		mov.L	r5, r1
 2446 007c 3F AA 06                		rtsd	#24, r10-r10
 2447                             	.LFE52:
 2449                             		.section	.text.wc_Des3_CbcEncrypt,"ax",@progbits
 2450                             		.global	_wc_Des3_CbcEncrypt
 2452                             	_wc_Des3_CbcEncrypt:
 2453                             	.LFB53:
1680:../src/wolfcrypt/src/des3.c **** 
1681:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcEncrypt(Des3* des, byte* out, const byte* in, word32 sz)
1682:../src/wolfcrypt/src/des3.c ****     {
 2454                             		.loc 2 1682 5
 2455 0000 7E AA                   		push.l	r10
 2456                             	.LCFI30:
 2457 0002 71 0A EC                		add	#-20, r0, r10
 2458                             	.LCFI31:
 2459 0005 EF A0                   		mov.L	r10, r0
 2460 0007 E7 A1 01                		mov.L	r1, 4[r10]
 2461 000a E7 A2 02                		mov.L	r2, 8[r10]
 2462 000d E7 A3 03                		mov.L	r3, 12[r10]
 2463 0010 E7 A4 04                		mov.L	r4, 16[r10]
1683:../src/wolfcrypt/src/des3.c ****         word32 blocks;
1684:../src/wolfcrypt/src/des3.c **** 
1685:../src/wolfcrypt/src/des3.c ****         if (des == NULL || out == NULL || in == NULL) {
 2464                             		.loc 2 1685 12
 2465 0013 ED A5 01                		mov.L	4[r10], r5
 2466 0016 61 05                   		cmp	#0, r5
 2467 0018 20 0E                   		beq	.L65
 2468                             		.loc 2 1685 25 discriminator 1
 2469 001a ED A5 02                		mov.L	8[r10], r5
 2470 001d 61 05                   		cmp	#0, r5
 2471 001f 17                      		beq	.L65
 2472                             		.loc 2 1685 40 discriminator 2
 2473 0020 ED A5 03                		mov.L	12[r10], r5
 2474 0023 61 05                   		cmp	#0, r5
 2475 0025 1F                      		bne	.L66
 2476                             	.L65:
1686:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
 2477                             		.loc 2 1686 20
 2478 0026 FB 5A 53 FF             		mov.L	#-173, r5
 2479 002a 2E 65                   		bra	.L67
 2480                             	.L66:
1687:../src/wolfcrypt/src/des3.c ****         }
1688:../src/wolfcrypt/src/des3.c **** 
1689:../src/wolfcrypt/src/des3.c ****     #ifdef WOLF_CRYPTO_CB
1690:../src/wolfcrypt/src/des3.c ****         if (des->devId != INVALID_DEVID) {
1691:../src/wolfcrypt/src/des3.c ****             int ret = wc_CryptoCb_Des3Encrypt(des, out, in, sz);
1692:../src/wolfcrypt/src/des3.c ****             if (ret != CRYPTOCB_UNAVAILABLE)
1693:../src/wolfcrypt/src/des3.c ****                 return ret;
1694:../src/wolfcrypt/src/des3.c ****             /* fall-through when unavailable */
1695:../src/wolfcrypt/src/des3.c ****         }
1696:../src/wolfcrypt/src/des3.c ****     #endif
1697:../src/wolfcrypt/src/des3.c **** 
1698:../src/wolfcrypt/src/des3.c ****     #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_3DES)
1699:../src/wolfcrypt/src/des3.c ****         if (des->asyncDev.marker == WOLFSSL_ASYNC_MARKER_3DES &&
1700:../src/wolfcrypt/src/des3.c ****                                             sz >= WC_ASYNC_THRESH_DES3_CBC) {
1701:../src/wolfcrypt/src/des3.c ****         #if defined(HAVE_CAVIUM)
1702:../src/wolfcrypt/src/des3.c ****             return NitroxDes3CbcEncrypt(des, out, in, sz);
1703:../src/wolfcrypt/src/des3.c ****         #elif defined(HAVE_INTEL_QA)
1704:../src/wolfcrypt/src/des3.c ****             return IntelQaSymDes3CbcEncrypt(&des->asyncDev, out, in, sz,
1705:../src/wolfcrypt/src/des3.c ****                 (const byte*)des->devKey, DES3_KEYLEN, (byte*)des->reg, DES3_IVLEN);
1706:../src/wolfcrypt/src/des3.c ****         #else /* WOLFSSL_ASYNC_CRYPT_TEST */
1707:../src/wolfcrypt/src/des3.c ****             if (wc_AsyncTestInit(&des->asyncDev, ASYNC_TEST_DES3_CBC_ENCRYPT)) {
1708:../src/wolfcrypt/src/des3.c ****                 WC_ASYNC_TEST* testDev = &des->asyncDev.test;
1709:../src/wolfcrypt/src/des3.c ****                 testDev->des.des = des;
1710:../src/wolfcrypt/src/des3.c ****                 testDev->des.out = out;
1711:../src/wolfcrypt/src/des3.c ****                 testDev->des.in = in;
1712:../src/wolfcrypt/src/des3.c ****                 testDev->des.sz = sz;
1713:../src/wolfcrypt/src/des3.c ****                 return WC_PENDING_E;
1714:../src/wolfcrypt/src/des3.c ****             }
1715:../src/wolfcrypt/src/des3.c ****         #endif
1716:../src/wolfcrypt/src/des3.c ****         }
1717:../src/wolfcrypt/src/des3.c ****     #endif /* WOLFSSL_ASYNC_CRYPT */
1718:../src/wolfcrypt/src/des3.c **** 
1719:../src/wolfcrypt/src/des3.c ****         blocks = sz / DES_BLOCK_SIZE;
 2481                             		.loc 2 1719 16
 2482 002c ED A5 04                		mov.L	16[r10], r5
 2483 002f 68 35                   		shlr	#3, r5
 2484 0031 E3 A5                   		mov.L	r5, [r10]
1720:../src/wolfcrypt/src/des3.c ****         while (blocks--) {
 2485                             		.loc 2 1720 15
 2486 0033 2E 4F                   		bra	.L68
 2487                             	.L69:
1721:../src/wolfcrypt/src/des3.c ****             xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 2488                             		.loc 2 1721 27
 2489 0035 ED A5 01                		mov.L	4[r10], r5
 2490 0038 72 55 80 01             		add	#0x180, r5
 2491                             		.loc 2 1721 13
 2492 003c 66 83                   		mov.L	#8, r3
 2493 003e ED A2 03                		mov.L	12[r10], r2
 2494 0041 EF 51                   		mov.L	r5, r1
 2495 0043 05 00 00 00             		bsr	_xorbuf
1722:../src/wolfcrypt/src/des3.c ****             Des3ProcessBlock(des, (byte*)des->reg, (byte*)des->reg);
 2496                             		.loc 2 1722 42
 2497 0047 ED A5 01                		mov.L	4[r10], r5
 2498 004a 72 54 80 01             		add	#0x180, r5, r4
 2499                             		.loc 2 1722 59
 2500 004e ED A5 01                		mov.L	4[r10], r5
 2501 0051 72 55 80 01             		add	#0x180, r5
 2502                             		.loc 2 1722 13
 2503 0055 EF 53                   		mov.L	r5, r3
 2504 0057 EF 42                   		mov.L	r4, r2
 2505 0059 ED A1 01                		mov.L	4[r10], r1
 2506 005c 05 00 00 00             		bsr	_Des3ProcessBlock
1723:../src/wolfcrypt/src/des3.c ****             XMEMCPY(out, des->reg, DES_BLOCK_SIZE);
 2507                             		.loc 2 1723 13
 2508 0060 ED A5 01                		mov.L	4[r10], r5
 2509 0063 72 55 80 01             		add	#0x180, r5
 2510 0067 66 83                   		mov.L	#8, r3
 2511 0069 EF 52                   		mov.L	r5, r2
 2512 006b ED A1 02                		mov.L	8[r10], r1
 2513 006e 05 00 00 00             		bsr	_memcpy
1724:../src/wolfcrypt/src/des3.c **** 
1725:../src/wolfcrypt/src/des3.c ****             out += DES_BLOCK_SIZE;
 2514                             		.loc 2 1725 17
 2515 0072 ED A5 02                		mov.L	8[r10], r5
 2516 0075 62 85                   		add	#8, r5
 2517 0077 E7 A5 02                		mov.L	r5, 8[r10]
1726:../src/wolfcrypt/src/des3.c ****             in  += DES_BLOCK_SIZE;
 2518                             		.loc 2 1726 17
 2519 007a ED A5 03                		mov.L	12[r10], r5
 2520 007d 62 85                   		add	#8, r5
 2521 007f E7 A5 03                		mov.L	r5, 12[r10]
 2522                             	.L68:
1720:../src/wolfcrypt/src/des3.c ****             xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 2523                             		.loc 2 1720 22
 2524 0082 EC A5                   		mov.L	[r10], r5
 2525 0084 71 54 FF                		add	#-1, r5, r4
 2526 0087 E3 A4                   		mov.L	r4, [r10]
1720:../src/wolfcrypt/src/des3.c ****             xorbuf((byte*)des->reg, in, DES_BLOCK_SIZE);
 2527                             		.loc 2 1720 15
 2528 0089 61 05                   		cmp	#0, r5
 2529 008b 21 AA                   		bne	.L69
1727:../src/wolfcrypt/src/des3.c ****         }
1728:../src/wolfcrypt/src/des3.c ****         return 0;
 2530                             		.loc 2 1728 16
 2531 008d 66 05                   		mov.L	#0, r5
 2532                             	.L67:
1729:../src/wolfcrypt/src/des3.c ****     }
 2533                             		.loc 2 1729 5
 2534 008f EF 51                   		mov.L	r5, r1
 2535 0091 3F AA 06                		rtsd	#24, r10-r10
 2536                             	.LFE53:
 2538                             		.section	.text.wc_Des3_CbcDecrypt,"ax",@progbits
 2539                             		.global	_wc_Des3_CbcDecrypt
 2541                             	_wc_Des3_CbcDecrypt:
 2542                             	.LFB54:
1730:../src/wolfcrypt/src/des3.c **** 
1731:../src/wolfcrypt/src/des3.c **** 
1732:../src/wolfcrypt/src/des3.c ****     int wc_Des3_CbcDecrypt(Des3* des, byte* out, const byte* in, word32 sz)
1733:../src/wolfcrypt/src/des3.c ****     {
 2543                             		.loc 2 1733 5
 2544 0000 7E AA                   		push.l	r10
 2545                             	.LCFI32:
 2546 0002 71 0A EC                		add	#-20, r0, r10
 2547                             	.LCFI33:
 2548 0005 EF A0                   		mov.L	r10, r0
 2549 0007 E7 A1 01                		mov.L	r1, 4[r10]
 2550 000a E7 A2 02                		mov.L	r2, 8[r10]
 2551 000d E7 A3 03                		mov.L	r3, 12[r10]
 2552 0010 E7 A4 04                		mov.L	r4, 16[r10]
1734:../src/wolfcrypt/src/des3.c ****         word32 blocks;
1735:../src/wolfcrypt/src/des3.c **** 
1736:../src/wolfcrypt/src/des3.c ****         if (des == NULL || out == NULL || in == NULL) {
 2553                             		.loc 2 1736 12
 2554 0013 ED A5 01                		mov.L	4[r10], r5
 2555 0016 61 05                   		cmp	#0, r5
 2556 0018 20 0E                   		beq	.L71
 2557                             		.loc 2 1736 25 discriminator 1
 2558 001a ED A5 02                		mov.L	8[r10], r5
 2559 001d 61 05                   		cmp	#0, r5
 2560 001f 17                      		beq	.L71
 2561                             		.loc 2 1736 40 discriminator 2
 2562 0020 ED A5 03                		mov.L	12[r10], r5
 2563 0023 61 05                   		cmp	#0, r5
 2564 0025 1F                      		bne	.L72
 2565                             	.L71:
1737:../src/wolfcrypt/src/des3.c ****             return BAD_FUNC_ARG;
 2566                             		.loc 2 1737 20
 2567 0026 FB 5A 53 FF             		mov.L	#-173, r5
 2568 002a 2E 77                   		bra	.L73
 2569                             	.L72:
1738:../src/wolfcrypt/src/des3.c ****         }
1739:../src/wolfcrypt/src/des3.c **** 
1740:../src/wolfcrypt/src/des3.c ****     #ifdef WOLF_CRYPTO_CB
1741:../src/wolfcrypt/src/des3.c ****         if (des->devId != INVALID_DEVID) {
1742:../src/wolfcrypt/src/des3.c ****             int ret = wc_CryptoCb_Des3Decrypt(des, out, in, sz);
1743:../src/wolfcrypt/src/des3.c ****             if (ret != CRYPTOCB_UNAVAILABLE)
1744:../src/wolfcrypt/src/des3.c ****                 return ret;
1745:../src/wolfcrypt/src/des3.c ****             /* fall-through when unavailable */
1746:../src/wolfcrypt/src/des3.c ****         }
1747:../src/wolfcrypt/src/des3.c ****     #endif
1748:../src/wolfcrypt/src/des3.c **** 
1749:../src/wolfcrypt/src/des3.c ****     #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_3DES)
1750:../src/wolfcrypt/src/des3.c ****         if (des->asyncDev.marker == WOLFSSL_ASYNC_MARKER_3DES &&
1751:../src/wolfcrypt/src/des3.c ****                                             sz >= WC_ASYNC_THRESH_DES3_CBC) {
1752:../src/wolfcrypt/src/des3.c ****         #if defined(HAVE_CAVIUM)
1753:../src/wolfcrypt/src/des3.c ****             return NitroxDes3CbcDecrypt(des, out, in, sz);
1754:../src/wolfcrypt/src/des3.c ****         #elif defined(HAVE_INTEL_QA)
1755:../src/wolfcrypt/src/des3.c ****             return IntelQaSymDes3CbcDecrypt(&des->asyncDev, out, in, sz,
1756:../src/wolfcrypt/src/des3.c ****                 (const byte*)des->devKey, DES3_KEYLEN, (byte*)des->reg, DES3_IVLEN);
1757:../src/wolfcrypt/src/des3.c ****         #else /* WOLFSSL_ASYNC_CRYPT_TEST */
1758:../src/wolfcrypt/src/des3.c ****             if (wc_AsyncTestInit(&des->asyncDev, ASYNC_TEST_DES3_CBC_DECRYPT)) {
1759:../src/wolfcrypt/src/des3.c ****                 WC_ASYNC_TEST* testDev = &des->asyncDev.test;
1760:../src/wolfcrypt/src/des3.c ****                 testDev->des.des = des;
1761:../src/wolfcrypt/src/des3.c ****                 testDev->des.out = out;
1762:../src/wolfcrypt/src/des3.c ****                 testDev->des.in = in;
1763:../src/wolfcrypt/src/des3.c ****                 testDev->des.sz = sz;
1764:../src/wolfcrypt/src/des3.c ****                 return WC_PENDING_E;
1765:../src/wolfcrypt/src/des3.c ****             }
1766:../src/wolfcrypt/src/des3.c ****         #endif
1767:../src/wolfcrypt/src/des3.c ****         }
1768:../src/wolfcrypt/src/des3.c ****     #endif /* WOLFSSL_ASYNC_CRYPT */
1769:../src/wolfcrypt/src/des3.c **** 
1770:../src/wolfcrypt/src/des3.c ****         blocks = sz / DES_BLOCK_SIZE;
 2570                             		.loc 2 1770 16
 2571 002c ED A5 04                		mov.L	16[r10], r5
 2572 002f 68 35                   		shlr	#3, r5
 2573 0031 E3 A5                   		mov.L	r5, [r10]
1771:../src/wolfcrypt/src/des3.c ****         while (blocks--) {
 2574                             		.loc 2 1771 15
 2575 0033 2E 61                   		bra	.L74
 2576                             	.L75:
1772:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
 2577                             		.loc 2 1772 13
 2578 0035 ED A5 01                		mov.L	4[r10], r5
 2579 0038 72 55 88 01             		add	#0x188, r5
 2580 003c 66 83                   		mov.L	#8, r3
 2581 003e ED A2 03                		mov.L	12[r10], r2
 2582 0041 EF 51                   		mov.L	r5, r1
 2583 0043 05 00 00 00             		bsr	_memcpy
1773:../src/wolfcrypt/src/des3.c ****             Des3ProcessBlock(des, (byte*)des->tmp, out);
 2584                             		.loc 2 1773 42
 2585 0047 ED A5 01                		mov.L	4[r10], r5
 2586 004a 72 55 88 01             		add	#0x188, r5
 2587                             		.loc 2 1773 13
 2588 004e ED A3 02                		mov.L	8[r10], r3
 2589 0051 EF 52                   		mov.L	r5, r2
 2590 0053 ED A1 01                		mov.L	4[r10], r1
 2591 0056 05 00 00 00             		bsr	_Des3ProcessBlock
1774:../src/wolfcrypt/src/des3.c ****             xorbuf(out, (byte*)des->reg, DES_BLOCK_SIZE);
 2592                             		.loc 2 1774 32
 2593 005a ED A5 01                		mov.L	4[r10], r5
 2594 005d 72 55 80 01             		add	#0x180, r5
 2595                             		.loc 2 1774 13
 2596 0061 66 83                   		mov.L	#8, r3
 2597 0063 EF 52                   		mov.L	r5, r2
 2598 0065 ED A1 02                		mov.L	8[r10], r1
 2599 0068 05 00 00 00             		bsr	_xorbuf
1775:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->reg, des->tmp, DES_BLOCK_SIZE);
 2600                             		.loc 2 1775 13
 2601 006c ED A5 01                		mov.L	4[r10], r5
 2602 006f 72 54 80 01             		add	#0x180, r5, r4
 2603 0073 ED A5 01                		mov.L	4[r10], r5
 2604 0076 72 55 88 01             		add	#0x188, r5
 2605 007a 66 83                   		mov.L	#8, r3
 2606 007c EF 52                   		mov.L	r5, r2
 2607 007e EF 41                   		mov.L	r4, r1
 2608 0080 05 00 00 00             		bsr	_memcpy
1776:../src/wolfcrypt/src/des3.c **** 
1777:../src/wolfcrypt/src/des3.c ****             out += DES_BLOCK_SIZE;
 2609                             		.loc 2 1777 17
 2610 0084 ED A5 02                		mov.L	8[r10], r5
 2611 0087 62 85                   		add	#8, r5
 2612 0089 E7 A5 02                		mov.L	r5, 8[r10]
1778:../src/wolfcrypt/src/des3.c ****             in  += DES_BLOCK_SIZE;
 2613                             		.loc 2 1778 17
 2614 008c ED A5 03                		mov.L	12[r10], r5
 2615 008f 62 85                   		add	#8, r5
 2616 0091 E7 A5 03                		mov.L	r5, 12[r10]
 2617                             	.L74:
1771:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
 2618                             		.loc 2 1771 22
 2619 0094 EC A5                   		mov.L	[r10], r5
 2620 0096 71 54 FF                		add	#-1, r5, r4
 2621 0099 E3 A4                   		mov.L	r4, [r10]
1771:../src/wolfcrypt/src/des3.c ****             XMEMCPY(des->tmp, in, DES_BLOCK_SIZE);
 2622                             		.loc 2 1771 15
 2623 009b 61 05                   		cmp	#0, r5
 2624 009d 21 98                   		bne	.L75
1779:../src/wolfcrypt/src/des3.c ****         }
1780:../src/wolfcrypt/src/des3.c ****         return 0;
 2625                             		.loc 2 1780 16
 2626 009f 66 05                   		mov.L	#0, r5
 2627                             	.L73:
1781:../src/wolfcrypt/src/des3.c ****     }
 2628                             		.loc 2 1781 5
 2629 00a1 EF 51                   		mov.L	r5, r1
 2630 00a3 3F AA 06                		rtsd	#24, r10-r10
 2631                             	.LFE54:
 2633                             		.section	.text.wc_Des_SetIV,"ax",@progbits
 2634                             		.global	_wc_Des_SetIV
 2636                             	_wc_Des_SetIV:
 2637                             	.LFB55:
1782:../src/wolfcrypt/src/des3.c **** 
1783:../src/wolfcrypt/src/des3.c ****     #ifdef WOLFSSL_DES_ECB
1784:../src/wolfcrypt/src/des3.c ****         /* One block, compatibility only */
1785:../src/wolfcrypt/src/des3.c ****         int wc_Des_EcbEncrypt(Des* des, byte* out, const byte* in, word32 sz)
1786:../src/wolfcrypt/src/des3.c ****         {
1787:../src/wolfcrypt/src/des3.c ****             word32 blocks = sz / DES_BLOCK_SIZE;
1788:../src/wolfcrypt/src/des3.c **** 
1789:../src/wolfcrypt/src/des3.c ****             if (des == NULL || out == NULL || in == NULL) {
1790:../src/wolfcrypt/src/des3.c ****                 return BAD_FUNC_ARG;
1791:../src/wolfcrypt/src/des3.c ****             }
1792:../src/wolfcrypt/src/des3.c **** 
1793:../src/wolfcrypt/src/des3.c ****             while (blocks--) {
1794:../src/wolfcrypt/src/des3.c ****                 DesProcessBlock(des, in, out);
1795:../src/wolfcrypt/src/des3.c **** 
1796:../src/wolfcrypt/src/des3.c ****                 out += DES_BLOCK_SIZE;
1797:../src/wolfcrypt/src/des3.c ****                 in  += DES_BLOCK_SIZE;
1798:../src/wolfcrypt/src/des3.c ****             }
1799:../src/wolfcrypt/src/des3.c ****             return 0;
1800:../src/wolfcrypt/src/des3.c ****         }
1801:../src/wolfcrypt/src/des3.c **** 
1802:../src/wolfcrypt/src/des3.c ****         int wc_Des3_EcbEncrypt(Des3* des, byte* out, const byte* in, word32 sz)
1803:../src/wolfcrypt/src/des3.c ****         {
1804:../src/wolfcrypt/src/des3.c ****             word32 blocks = sz / DES_BLOCK_SIZE;
1805:../src/wolfcrypt/src/des3.c **** 
1806:../src/wolfcrypt/src/des3.c ****             if (des == NULL || out == NULL || in == NULL) {
1807:../src/wolfcrypt/src/des3.c ****                 return BAD_FUNC_ARG;
1808:../src/wolfcrypt/src/des3.c ****             }
1809:../src/wolfcrypt/src/des3.c **** 
1810:../src/wolfcrypt/src/des3.c ****             while (blocks--) {
1811:../src/wolfcrypt/src/des3.c ****                 Des3ProcessBlock(des, in, out);
1812:../src/wolfcrypt/src/des3.c **** 
1813:../src/wolfcrypt/src/des3.c ****                 out += DES_BLOCK_SIZE;
1814:../src/wolfcrypt/src/des3.c ****                 in  += DES_BLOCK_SIZE;
1815:../src/wolfcrypt/src/des3.c ****             }
1816:../src/wolfcrypt/src/des3.c ****             return 0;
1817:../src/wolfcrypt/src/des3.c ****         }
1818:../src/wolfcrypt/src/des3.c ****     #endif /* WOLFSSL_DES_ECB */
1819:../src/wolfcrypt/src/des3.c **** 
1820:../src/wolfcrypt/src/des3.c **** #endif /* NEED_SOFT_DES */
1821:../src/wolfcrypt/src/des3.c **** 
1822:../src/wolfcrypt/src/des3.c **** 
1823:../src/wolfcrypt/src/des3.c **** void wc_Des_SetIV(Des* des, const byte* iv)
1824:../src/wolfcrypt/src/des3.c **** {
 2638                             		.loc 2 1824 1
 2639 0000 7E AA                   		push.l	r10
 2640                             	.LCFI34:
 2641 0002 71 0A F8                		add	#-8, r0, r10
 2642                             	.LCFI35:
 2643 0005 EF A0                   		mov.L	r10, r0
 2644 0007 E3 A1                   		mov.L	r1, [r10]
 2645 0009 E7 A2 01                		mov.L	r2, 4[r10]
1825:../src/wolfcrypt/src/des3.c ****     if (des && iv) {
 2646                             		.loc 2 1825 8
 2647 000c EC A5                   		mov.L	[r10], r5
 2648 000e 61 05                   		cmp	#0, r5
 2649 0010 20 18                   		beq	.L77
 2650                             		.loc 2 1825 13 discriminator 1
 2651 0012 ED A5 01                		mov.L	4[r10], r5
 2652 0015 61 05                   		cmp	#0, r5
 2653 0017 20 11                   		beq	.L77
1826:../src/wolfcrypt/src/des3.c ****         XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
 2654                             		.loc 2 1826 9
 2655 0019 EC A5                   		mov.L	[r10], r5
 2656 001b 66 83                   		mov.L	#8, r3
 2657 001d ED A2 01                		mov.L	4[r10], r2
 2658 0020 EF 51                   		mov.L	r5, r1
 2659 0022 05 00 00 00             		bsr	_memcpy
1827:../src/wolfcrypt/src/des3.c ****     #if defined(STM32_CRYPTO) && !defined(STM32_CRYPTO_AES_ONLY) && defined(STM32_HAL_V2)
1828:../src/wolfcrypt/src/des3.c ****         ByteReverseWords(des->reg, des->reg, DES_BLOCK_SIZE);
1829:../src/wolfcrypt/src/des3.c ****     #endif
1830:../src/wolfcrypt/src/des3.c ****     }
1831:../src/wolfcrypt/src/des3.c ****     else if (des)
1832:../src/wolfcrypt/src/des3.c ****         XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
1833:../src/wolfcrypt/src/des3.c **** }
 2660                             		.loc 2 1833 1
 2661 0026 2E 14                   		bra	.L79
 2662                             	.L77:
1831:../src/wolfcrypt/src/des3.c ****         XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
 2663                             		.loc 2 1831 13
 2664 0028 EC A5                   		mov.L	[r10], r5
 2665 002a 61 05                   		cmp	#0, r5
 2666 002c 20 0E                   		beq	.L79
1832:../src/wolfcrypt/src/des3.c **** }
 2667                             		.loc 2 1832 9
 2668 002e EC A5                   		mov.L	[r10], r5
 2669 0030 66 83                   		mov.L	#8, r3
 2670 0032 66 02                   		mov.L	#0, r2
 2671 0034 EF 51                   		mov.L	r5, r1
 2672 0036 05 00 00 00             		bsr	_memset
 2673                             	.L79:
 2674                             		.loc 2 1833 1
 2675 003a 03                      		nop
 2676 003b 3F AA 03                		rtsd	#12, r10-r10
 2677                             	.LFE55:
 2679                             		.section	.text.wc_Des3_SetIV,"ax",@progbits
 2680                             		.global	_wc_Des3_SetIV
 2682                             	_wc_Des3_SetIV:
 2683                             	.LFB56:
1834:../src/wolfcrypt/src/des3.c **** 
1835:../src/wolfcrypt/src/des3.c **** int wc_Des3_SetIV(Des3* des, const byte* iv)
1836:../src/wolfcrypt/src/des3.c **** {
 2684                             		.loc 2 1836 1
 2685 0000 7E AA                   		push.l	r10
 2686                             	.LCFI36:
 2687 0002 71 0A F8                		add	#-8, r0, r10
 2688                             	.LCFI37:
 2689 0005 EF A0                   		mov.L	r10, r0
 2690 0007 E3 A1                   		mov.L	r1, [r10]
 2691 0009 E7 A2 01                		mov.L	r2, 4[r10]
1837:../src/wolfcrypt/src/des3.c ****     if (des == NULL) {
 2692                             		.loc 2 1837 8
 2693 000c EC A5                   		mov.L	[r10], r5
 2694 000e 61 05                   		cmp	#0, r5
 2695 0010 1F                      		bne	.L81
1838:../src/wolfcrypt/src/des3.c ****         return BAD_FUNC_ARG;
 2696                             		.loc 2 1838 16
 2697 0011 FB 5A 53 FF             		mov.L	#-173, r5
 2698 0015 2E 2E                   		bra	.L82
 2699                             	.L81:
1839:../src/wolfcrypt/src/des3.c ****     }
1840:../src/wolfcrypt/src/des3.c ****     if (iv) {
 2700                             		.loc 2 1840 8
 2701 0017 ED A5 01                		mov.L	4[r10], r5
 2702 001a 61 05                   		cmp	#0, r5
 2703 001c 20 15                   		beq	.L83
1841:../src/wolfcrypt/src/des3.c ****         XMEMCPY(des->reg, iv, DES_BLOCK_SIZE);
 2704                             		.loc 2 1841 9
 2705 001e EC A5                   		mov.L	[r10], r5
 2706 0020 72 55 80 01             		add	#0x180, r5
 2707 0024 66 83                   		mov.L	#8, r3
 2708 0026 ED A2 01                		mov.L	4[r10], r2
 2709 0029 EF 51                   		mov.L	r5, r1
 2710 002b 05 00 00 00             		bsr	_memcpy
 2711 002f 2E 12                   		bra	.L84
 2712                             	.L83:
1842:../src/wolfcrypt/src/des3.c ****     #if defined(STM32_CRYPTO) && !defined(STM32_CRYPTO_AES_ONLY) && defined(STM32_HAL_V2)
1843:../src/wolfcrypt/src/des3.c ****         ByteReverseWords(des->reg, des->reg, DES_BLOCK_SIZE);
1844:../src/wolfcrypt/src/des3.c ****     #endif
1845:../src/wolfcrypt/src/des3.c ****     }
1846:../src/wolfcrypt/src/des3.c ****     else
1847:../src/wolfcrypt/src/des3.c ****         XMEMSET(des->reg,  0, DES_BLOCK_SIZE);
 2713                             		.loc 2 1847 9
 2714 0031 EC A5                   		mov.L	[r10], r5
 2715 0033 72 55 80 01             		add	#0x180, r5
 2716 0037 66 83                   		mov.L	#8, r3
 2717 0039 66 02                   		mov.L	#0, r2
 2718 003b EF 51                   		mov.L	r5, r1
 2719 003d 05 00 00 00             		bsr	_memset
 2720                             	.L84:
1848:../src/wolfcrypt/src/des3.c **** 
1849:../src/wolfcrypt/src/des3.c ****     return 0;
 2721                             		.loc 2 1849 12
 2722 0041 66 05                   		mov.L	#0, r5
 2723                             	.L82:
1850:../src/wolfcrypt/src/des3.c **** }
 2724                             		.loc 2 1850 1
 2725 0043 EF 51                   		mov.L	r5, r1
 2726 0045 3F AA 03                		rtsd	#12, r10-r10
 2727                             	.LFE56:
 2729                             		.section	.text.wc_Des3Init,"ax",@progbits
 2730                             		.global	_wc_Des3Init
 2732                             	_wc_Des3Init:
 2733                             	.LFB57:
1851:../src/wolfcrypt/src/des3.c **** 
1852:../src/wolfcrypt/src/des3.c **** 
1853:../src/wolfcrypt/src/des3.c **** /* Initialize Des3 for use with async device */
1854:../src/wolfcrypt/src/des3.c **** int wc_Des3Init(Des3* des3, void* heap, int devId)
1855:../src/wolfcrypt/src/des3.c **** {
 2734                             		.loc 2 1855 1
 2735 0000 7E AA                   		push.l	r10
 2736                             	.LCFI38:
 2737 0002 71 0A F0                		add	#-16, r0, r10
 2738                             	.LCFI39:
 2739 0005 EF A0                   		mov.L	r10, r0
 2740 0007 E7 A1 01                		mov.L	r1, 4[r10]
 2741 000a E7 A2 02                		mov.L	r2, 8[r10]
 2742 000d E7 A3 03                		mov.L	r3, 12[r10]
1856:../src/wolfcrypt/src/des3.c ****     int ret = 0;
 2743                             		.loc 2 1856 9
 2744 0010 F8 A6 00                		mov.L	#0, [r10]
1857:../src/wolfcrypt/src/des3.c ****     if (des3 == NULL)
 2745                             		.loc 2 1857 8
 2746 0013 ED A5 01                		mov.L	4[r10], r5
 2747 0016 61 05                   		cmp	#0, r5
 2748 0018 1F                      		bne	.L86
1858:../src/wolfcrypt/src/des3.c ****         return BAD_FUNC_ARG;
 2749                             		.loc 2 1858 16
 2750 0019 FB 5A 53 FF             		mov.L	#-173, r5
 2751 001d 2E 0D                   		bra	.L87
 2752                             	.L86:
1859:../src/wolfcrypt/src/des3.c **** 
1860:../src/wolfcrypt/src/des3.c ****     des3->heap = heap;
 2753                             		.loc 2 1860 16
 2754 001f ED A5 01                		mov.L	4[r10], r5
 2755 0022 ED A4 02                		mov.L	8[r10], r4
 2756 0025 E7 54 64                		mov.L	r4, 400[r5]
1861:../src/wolfcrypt/src/des3.c **** 
1862:../src/wolfcrypt/src/des3.c **** #ifdef WOLF_CRYPTO_CB
1863:../src/wolfcrypt/src/des3.c ****     des3->devId = devId;
1864:../src/wolfcrypt/src/des3.c ****     des3->devCtx = NULL;
1865:../src/wolfcrypt/src/des3.c **** #else
1866:../src/wolfcrypt/src/des3.c ****     (void)devId;
1867:../src/wolfcrypt/src/des3.c **** #endif
1868:../src/wolfcrypt/src/des3.c **** 
1869:../src/wolfcrypt/src/des3.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_3DES)
1870:../src/wolfcrypt/src/des3.c ****     ret = wolfAsync_DevCtxInit(&des3->asyncDev, WOLFSSL_ASYNC_MARKER_3DES,
1871:../src/wolfcrypt/src/des3.c ****                                                         des3->heap, devId);
1872:../src/wolfcrypt/src/des3.c **** #endif
1873:../src/wolfcrypt/src/des3.c **** #if defined(WOLFSSL_CHECK_MEM_ZERO) && (defined(WOLF_CRYPTO_CB) || \
1874:../src/wolfcrypt/src/des3.c ****         (defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_3DES)))
1875:../src/wolfcrypt/src/des3.c ****     wc_MemZero_Add("DES3 devKey", &des3->devKey, sizeof(des3->devKey));
1876:../src/wolfcrypt/src/des3.c **** #endif
1877:../src/wolfcrypt/src/des3.c **** 
1878:../src/wolfcrypt/src/des3.c ****     return ret;
 2757                             		.loc 2 1878 12
 2758 0028 EC A5                   		mov.L	[r10], r5
 2759                             	.L87:
1879:../src/wolfcrypt/src/des3.c **** }
 2760                             		.loc 2 1879 1
 2761 002a EF 51                   		mov.L	r5, r1
 2762 002c 3F AA 05                		rtsd	#20, r10-r10
 2763                             	.LFE57:
 2765                             		.section	.text.wc_Des3Free,"ax",@progbits
 2766                             		.global	_wc_Des3Free
 2768                             	_wc_Des3Free:
 2769                             	.LFB58:
1880:../src/wolfcrypt/src/des3.c **** 
1881:../src/wolfcrypt/src/des3.c **** /* Free Des3 from use with async device */
1882:../src/wolfcrypt/src/des3.c **** void wc_Des3Free(Des3* des3)
1883:../src/wolfcrypt/src/des3.c **** {
 2770                             		.loc 2 1883 1
 2771 0000 7E AA                   		push.l	r10
 2772                             	.LCFI40:
 2773 0002 71 0A FC                		add	#-4, r0, r10
 2774                             	.LCFI41:
 2775 0005 EF A0                   		mov.L	r10, r0
 2776 0007 E3 A1                   		mov.L	r1, [r10]
1884:../src/wolfcrypt/src/des3.c ****     if (des3 == NULL)
1885:../src/wolfcrypt/src/des3.c ****         return;
1886:../src/wolfcrypt/src/des3.c **** 
1887:../src/wolfcrypt/src/des3.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_3DES)
1888:../src/wolfcrypt/src/des3.c ****     wolfAsync_DevCtxFree(&des3->asyncDev, WOLFSSL_ASYNC_MARKER_3DES);
1889:../src/wolfcrypt/src/des3.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
1890:../src/wolfcrypt/src/des3.c **** #if defined(WOLF_CRYPTO_CB) || \
1891:../src/wolfcrypt/src/des3.c ****         (defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_3DES))
1892:../src/wolfcrypt/src/des3.c ****     ForceZero(des3->devKey, sizeof(des3->devKey));
1893:../src/wolfcrypt/src/des3.c **** #endif
1894:../src/wolfcrypt/src/des3.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
1895:../src/wolfcrypt/src/des3.c ****     wc_MemZero_Check(des3, sizeof(Des3));
1896:../src/wolfcrypt/src/des3.c **** #endif
1897:../src/wolfcrypt/src/des3.c **** }
 2777                             		.loc 2 1897 1
 2778 0009 3F AA 02                		rtsd	#8, r10-r10
 2779                             	.LFE58:
 3218                             	.Letext0:
 3219                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 3220                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3221                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3222                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3223                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3224                             		.file 8 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 3225                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3226                             		.file 10 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\incl
 3227                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
 3228                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/des3.h"
