   1                             		.file	"sha.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.rotlFixed,"ax",@progbits
   6                             	_rotlFixed:
   7                             	.LFB1:
   8                             		.file 1 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfcrypt/src/misc.c"
   1:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* misc.c
   2:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   3:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   5:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * This file is part of wolfSSL.
   6:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   7:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * it under the terms of the GNU General Public License as published by
   9:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * (at your option) any later version.
  11:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  12:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * GNU General Public License for more details.
  16:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  17:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * You should have received a copy of the GNU General Public License
  18:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * along with this program; if not, write to the Free Software
  19:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  21:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /*
  22:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  23:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** DESCRIPTION
  24:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** This module implements the arithmetic-shift right, left, byte swapping, XOR,
  25:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** masking and clearing memory logic.
  26:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  27:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** */
  28:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef HAVE_CONFIG_H
  29:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <config.h>
  30:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  31:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  32:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/settings.h>
  33:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  34:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLF_CRYPT_MISC_C
  35:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #define WOLF_CRYPT_MISC_C
  36:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  37:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/misc.h>
  38:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  39:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* inlining these functions is a huge speed increase and a small size decrease,
  40:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    because the functions are smaller than function call setup/cleanup, e.g.,
  41:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    md5 benchmark is twice as fast with inline.  If you don't want it, then
  42:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    define NO_INLINE and compile this file into wolfssl, otherwise it's used as
  43:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    a source header
  44:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  45:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  46:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef NO_INLINE
  47:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC
  48:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  49:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC static
  50:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  51:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  52:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* Check for if compiling misc.c when not needed. */
  53:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if !defined(WOLFSSL_MISC_INCLUDED) && !defined(NO_INLINE)
  54:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_IGNORE_FILE_WARN
  55:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #warning misc.c does not need to be compiled when using inline (NO_INLINE not defined)
  56:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
  57:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  58:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  59:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  60:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  61:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__ICCARM__)
  62:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <intrinsics.h>
  63:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  64:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  65:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  66:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef INTEL_INTRINSICS
  67:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  68:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <stdlib.h>      /* get intrinsic definitions */
  69:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  70:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* for non visual studio probably need no long version, 32 bit only
  71:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****      * i.e., _rotl and _rotr */
  72:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #pragma intrinsic(_lrotl, _lrotr)
  73:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  74:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  75:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  76:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotl(x, y) : x;
  77:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  78:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  79:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
  80:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  81:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotr(x, y) : x;
  82:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  83:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  84:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
  85:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  86:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <builtin.h>      /* get intrinsic definitions */
  87:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  88:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if !defined(NO_INLINE)
  89:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  90:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotlFixed(x, y) _builtin_rotl(x, y)
  91:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  92:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotrFixed(x, y) _builtin_rotr(x, y)
  93:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  94:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #else /* create real function */
  95:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  96:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  97:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  98:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotl(x, y);
  99:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 100:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 101:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 102:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 103:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotr(x, y);
 104:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 105:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 106:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 107:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 108:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else /* generic */
 109:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value. */
 110:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 111:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
 112:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
   9                             		.loc 1 112 5
  10 0000 6E 7A                   		pushm	r7-r10
  11                             	.LCFI0:
  12 0002 71 0A F8                		add	#-8, r0, r10
  13                             	.LCFI1:
  14 0005 EF A0                   		mov.L	r10, r0
  15 0007 E3 A1                   		mov.L	r1, [r10]
  16 0009 E7 A2 01                		mov.L	r2, 4[r10]
 113:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x << y) | (x >> (sizeof(y) * 8 - y));
  17                             		.loc 1 113 25
  18 000c EC A4                   		mov.L	[r10], r4
  19 000e ED A5 01                		mov.L	4[r10], r5
  20 0011 EF 47                   		mov.L	r4, r7
  21 0013 FD 66 57                		rotl	r5, r7
  22 0016 EF 75                   		mov.L	r7, r5
 114:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  23                             		.loc 1 114 5
  24 0018 EF 51                   		mov.L	r5, r1
  25 001a 3F 7A 06                		rtsd	#24, r7-r10
  26                             	.LFE1:
  28                             		.section	.text.ByteReverseWord32,"ax",@progbits
  30                             	_ByteReverseWord32:
  31                             	.LFB3:
 115:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 116:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value. */
 117:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 118:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 119:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x >> y) | (x << (sizeof(y) * 8 - y));
 120:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 121:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 122:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 123:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 124:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef WC_RC2
 125:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 126:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value */
 127:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotlFixed16(word16 x, word16 y)
 128:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 129:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 130:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 131:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 132:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 133:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value */
 134:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotrFixed16(word16 x, word16 y)
 135:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 136:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 137:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 138:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 139:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WC_RC2 */
 140:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 141:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of 32-bit word value. */
 142:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__CCRX__) && !defined(NO_INLINE) /* shortest version for CC-RX */
 143:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define ByteReverseWord32(value) _builtin_revl(value)
 144:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 145:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
 146:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
  32                             		.loc 1 146 1
  33 0000 7E AA                   		push.l	r10
  34                             	.LCFI2:
  35 0002 71 0A FC                		add	#-4, r0, r10
  36                             	.LCFI3:
  37 0005 EF A0                   		mov.L	r10, r0
  38 0007 E3 A1                   		mov.L	r1, [r10]
 147:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef PPC_INTRINSICS
 148:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* PPC: load reverse indexed instruction */
 149:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__lwbrx(&value,0);
 150:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__ICCARM__)
 151:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__REV(value);
 152:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(KEIL_INTRINSICS)
 153:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__rev(value);
 154:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
 155:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)_builtin_revl(value);
 156:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLF_ALLOW_BUILTIN) && \
 157:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 158:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__builtin_bswap32(value);
 159:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 160:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       defined(__aarch64__)
 161:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 162:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV32 %0, %0  \n"
 163:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 164:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 165:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 166:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 167:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 168:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       (defined(__thumb__) || defined(__arm__))
 169:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 170:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV %0, %0  \n"
 171:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 172:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 173:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 174:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 175:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(FAST_ROTATE)
 176:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 5 instructions with rotate instruction, 9 without */
 177:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (rotrFixed(value, 8U) & 0xff00ff00) |
 178:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****            (rotlFixed(value, 8U) & 0x00ff00ff);
 179:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 180:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 6 instructions with rotate instruction, 8 without */
 181:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  39                             		.loc 1 181 35
  40 0009 EC A5                   		mov.L	[r10], r5
  41 000b 68 85                   		shlr	#8, r5
  42 000d FB 42 FF 00 FF 00       		mov.L	#0xff00ff, r4
  43 0013 53 54                   		and	r5, r4
  44                             		.loc 1 181 65
  45 0015 EC A5                   		mov.L	[r10], r5
  46 0017 6C 85                   		shll	#8, r5
  47 0019 74 25 00 FF 00 FF       		and	#-16711936, r5
  48                             		.loc 1 181 11
  49 001f 57 45                   		or	r4, r5
  50 0021 E3 A5                   		mov.L	r5, [r10]
 182:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed(value, 16U);
  51                             		.loc 1 182 12
  52 0023 75 42 10                		mov.L	#16, r2
  53 0026 EC A1                   		mov.L	[r10], r1
  54 0028 05 00 00 00             		bsr	_rotlFixed
  55 002c EF 15                   		mov.L	r1, r5
 183:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 184:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
  56                             		.loc 1 184 1
  57 002e EF 51                   		mov.L	r5, r1
  58 0030 3F AA 02                		rtsd	#8, r10-r10
  59                             	.LFE3:
  61                             		.section	.text.ByteReverseWords,"ax",@progbits
  63                             	_ByteReverseWords:
  64                             	.LFB4:
 185:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* __CCRX__ */
 186:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of words array of a given count. */
 187:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
 188:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                     word32 byteCount)
 189:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
  65                             		.loc 1 189 1
  66 0000 7E AA                   		push.l	r10
  67                             	.LCFI4:
  68 0002 7E A6                   		push.l	r6
  69                             	.LCFI5:
  70 0004 71 0A EC                		add	#-20, r0, r10
  71                             	.LCFI6:
  72 0007 EF A0                   		mov.L	r10, r0
  73 0009 E7 A1 02                		mov.L	r1, 8[r10]
  74 000c E7 A2 03                		mov.L	r2, 12[r10]
  75 000f E7 A3 04                		mov.L	r3, 16[r10]
 190:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word32), i;
  76                             		.loc 1 190 12
  77 0012 ED A5 04                		mov.L	16[r10], r5
  78 0015 68 25                   		shlr	#2, r5
  79 0017 E7 A5 01                		mov.L	r5, 4[r10]
 191:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
  80                             		.loc 1 192 12
  81 001a F8 A6 00                		mov.L	#0, [r10]
  82                             		.loc 1 192 5
  83 001d 2E 27                   		bra	.L6
  84                             	.L7:
 193:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
  85                             		.loc 1 193 38 discriminator 3
  86 001f EC A5                   		mov.L	[r10], r5
  87 0021 6C 25                   		shll	#2, r5
  88 0023 ED A4 03                		mov.L	12[r10], r4
  89 0026 4B 45                   		add	r4, r5
  90                             		.loc 1 193 18 discriminator 3
  91 0028 EC 53                   		mov.L	[r5], r3
  92                             		.loc 1 193 12 discriminator 3
  93 002a EC A5                   		mov.L	[r10], r5
  94 002c 6C 25                   		shll	#2, r5
  95 002e ED A4 02                		mov.L	8[r10], r4
  96 0031 FF 26 54                		add	r5, r4, r6
  97                             		.loc 1 193 18 discriminator 3
  98 0034 EF 31                   		mov.L	r3, r1
  99 0036 05 00 00 00             		bsr	_ByteReverseWord32
 100 003a EF 15                   		mov.L	r1, r5
 101                             		.loc 1 193 16 discriminator 3
 102 003c E3 65                   		mov.L	r5, [r6]
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
 103                             		.loc 1 192 29 discriminator 3
 104 003e EC A5                   		mov.L	[r10], r5
 105 0040 62 15                   		add	#1, r5
 106 0042 E3 A5                   		mov.L	r5, [r10]
 107                             	.L6:
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
 108                             		.loc 1 192 5 discriminator 1
 109 0044 EC A4                   		mov.L	[r10], r4
 110 0046 ED A5 01                		mov.L	4[r10], r5
 111 0049 47 54                   		cmp	r5, r4
 112 004b 23 D4                   		bltu	.L7
 194:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 195:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 113                             		.loc 1 195 1
 114 004d 03                      		nop
 115 004e 71 00 14                		add	#20, r0
 116 0051 7E B6                   		pop	r6
 117 0053 7E BA                   		pop	r10
 118 0055 02                      		rts
 119                             	.LFE4:
 121                             		.section	.text.min,"ax",@progbits
 123                             	_min:
 124                             	.LFB15:
 196:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 197:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WORD64_AVAILABLE) && !defined(WOLFSSL_NO_WORD64_OPS)
 198:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 199:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 200:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotlFixed64(word64 x, word64 y)
 201:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 202:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 203:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 204:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 205:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 206:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotrFixed64(word64 x, word64 y)
 207:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 208:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 209:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 210:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 211:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 212:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 ByteReverseWord64(word64 value)
 213:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 214:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WOLF_ALLOW_BUILTIN) && defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 215:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)__builtin_bswap64(value);
 216:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFCRYPT_SLOW_WORD64)
 217:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)((word64)ByteReverseWord32((word32) value)) << 32 |
 218:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         (word64)ByteReverseWord32((word32)(value   >> 32));
 219:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 220:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFF00FF00FF00FF00)) >> 8) |
 221:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x00FF00FF00FF00FF)) << 8);
 222:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFFFF0000FFFF0000)) >> 16) |
 223:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x0000FFFF0000FFFF)) << 16);
 224:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed64(value, 32U);
 225:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 226:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 227:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 228:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 229:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords64(word64* out, const word64* in,
 230:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                       word32 byteCount)
 231:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 232:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word64), i;
 233:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 235:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 236:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 237:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 238:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 239:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WORD64_AVAILABLE && !WOLFSSL_NO_WORD64_OPS */
 240:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 241:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_XOR_OPS
 242:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 243:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 244:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWordsOut(wolfssl_word* r, const wolfssl_word* a,
 245:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                      const wolfssl_word* b, word32 n)
 246:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 247:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 248:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 249:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] = a[i] ^ b[i];
 250:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 251:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 252:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 253:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 254:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 255:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbufout(void*out, const void* buf, const void* mask,
 256:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                    word32 count)
 257:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 258:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)out | (wc_ptr_t)buf | (wc_ptr_t)mask | count) %
 259:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                          WOLFSSL_WORD_SIZE == 0)
 260:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWordsOut( (wolfssl_word*)out, (wolfssl_word*)buf,
 261:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                      (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 262:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 263:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 264:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       o = (byte*)out;
 265:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 266:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 267:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) o[i] = b[i] ^ m[i];
 269:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 270:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 271:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 272:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 273:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 274:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWords(wolfssl_word* r, const wolfssl_word* a, word32 n)
 275:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 276:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 277:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 278:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] ^= a[i];
 279:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 280:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 281:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 282:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 283:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 284:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
 285:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 286:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)buf | (wc_ptr_t)mask | count) % WOLFSSL_WORD_SIZE == 0)
 287:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWords( (wolfssl_word*)buf,
 288:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                   (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 289:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 290:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 291:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 292:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 293:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) b[i] ^= m[i];
 295:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 296:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 297:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 298:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 299:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_FORCE_ZERO
 300:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine fills the first len bytes of the memory area pointed by mem
 301:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    with zeros. It ensures compiler optimizations doesn't skip it  */
 302:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
 303:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 304:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile byte* z = (volatile byte*)mem;
 305:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 306:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if (defined(WOLFSSL_X86_64_BUILD) || defined(WOLFSSL_AARCH64_BUILD)) \
 307:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****             && defined(WORD64_AVAILABLE)
 308:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile word64* w;
 309:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_UNALIGNED_64BIT_ACCESS
 310:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 l = (sizeof(word64) - ((size_t)z & (sizeof(word64)-1))) &
 311:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                              (sizeof(word64)-1);
 312:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 313:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         if (len < l) l = len;
 314:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         len -= l;
 315:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         while (l--) *z++ = 0;
 316:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 317:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
 318:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         *w++ = 0;
 319:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     z = (volatile byte*)w;
 320:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 321:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 322:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     while (len--) *z++ = 0;
 323:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 324:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 325:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 326:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 327:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_CONST_CMP
 328:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* check all length bytes for equality, return 0 on success */
 329:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE int ConstantCompare(const byte* a, const byte* b, int length)
 330:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 331:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     int i;
 332:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     int compareSum = 0;
 333:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 334:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < length; i++) {
 335:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         compareSum |= a[i] ^ b[i];
 336:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 337:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 338:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return compareSum;
 339:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 340:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 341:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 342:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 343:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_HAVE_MIN
 344:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WOLFSSL_HAVE_MIN
 345:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
 346:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #define min min
 347:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 348:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* returns the smaller of a and b */
 349:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 min(word32 a, word32 b)
 350:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 125                             		.loc 1 350 5
 126 0000 7E AA                   		push.l	r10
 127                             	.LCFI7:
 128 0002 71 0A F8                		add	#-8, r0, r10
 129                             	.LCFI8:
 130 0005 EF A0                   		mov.L	r10, r0
 131 0007 E3 A1                   		mov.L	r1, [r10]
 132 0009 E7 A2 01                		mov.L	r2, 4[r10]
 351:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return a > b ? b : a;
 133                             		.loc 1 351 26
 134 000c ED A5 01                		mov.L	4[r10], r5
 135 000f EC A3                   		mov.L	[r10], r3
 136 0011 EC A4                   		mov.L	[r10], r4
 137 0013 47 53                   		cmp	r5, r3
 138 0015 24 04                   		bgtu 1f
 139 0017 EF 45                   		mov r4, r5
 140                             	1:
 352:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 141                             		.loc 1 352 5
 142 0019 EF 51                   		mov.L	r5, r1
 143 001b 3F AA 03                		rtsd	#12, r10-r10
 144                             	.LFE15:
 146                             		.section	.text.InitSha,"ax",@progbits
 148                             	_InitSha:
 149                             	.LFB43:
 150                             		.file 2 "../src/wolfcrypt/src/sha.c"
   1:../src/wolfcrypt/src/sha.c **** /* sha.c
   2:../src/wolfcrypt/src/sha.c ****  *
   3:../src/wolfcrypt/src/sha.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/sha.c ****  *
   5:../src/wolfcrypt/src/sha.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/sha.c ****  *
   7:../src/wolfcrypt/src/sha.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/sha.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/sha.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/sha.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/sha.c ****  *
  12:../src/wolfcrypt/src/sha.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/sha.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/sha.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/sha.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/sha.c ****  *
  17:../src/wolfcrypt/src/sha.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/sha.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/sha.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/sha.c ****  */
  21:../src/wolfcrypt/src/sha.c **** 
  22:../src/wolfcrypt/src/sha.c **** 
  23:../src/wolfcrypt/src/sha.c **** #ifdef HAVE_CONFIG_H
  24:../src/wolfcrypt/src/sha.c ****     #include <config.h>
  25:../src/wolfcrypt/src/sha.c **** #endif
  26:../src/wolfcrypt/src/sha.c **** 
  27:../src/wolfcrypt/src/sha.c **** #include <wolfssl/wolfcrypt/settings.h>
  28:../src/wolfcrypt/src/sha.c **** 
  29:../src/wolfcrypt/src/sha.c **** #if !defined(NO_SHA)
  30:../src/wolfcrypt/src/sha.c **** 
  31:../src/wolfcrypt/src/sha.c **** #if defined(HAVE_FIPS) && defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2)
  32:../src/wolfcrypt/src/sha.c ****     /* set NO_WRAPPERS before headers, use direct internal f()s not wrappers */
  33:../src/wolfcrypt/src/sha.c ****     #define FIPS_NO_WRAPPERS
  34:../src/wolfcrypt/src/sha.c **** 
  35:../src/wolfcrypt/src/sha.c ****     #ifdef USE_WINDOWS_API
  36:../src/wolfcrypt/src/sha.c ****         #pragma code_seg(".fipsA$j")
  37:../src/wolfcrypt/src/sha.c ****         #pragma const_seg(".fipsB$j")
  38:../src/wolfcrypt/src/sha.c ****     #endif
  39:../src/wolfcrypt/src/sha.c **** #endif
  40:../src/wolfcrypt/src/sha.c **** 
  41:../src/wolfcrypt/src/sha.c **** #include <wolfssl/wolfcrypt/sha.h>
  42:../src/wolfcrypt/src/sha.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  43:../src/wolfcrypt/src/sha.c **** #include <wolfssl/wolfcrypt/hash.h>
  44:../src/wolfcrypt/src/sha.c **** 
  45:../src/wolfcrypt/src/sha.c **** #ifdef WOLF_CRYPTO_CB
  46:../src/wolfcrypt/src/sha.c ****     #include <wolfssl/wolfcrypt/cryptocb.h>
  47:../src/wolfcrypt/src/sha.c **** #endif
  48:../src/wolfcrypt/src/sha.c **** 
  49:../src/wolfcrypt/src/sha.c **** /* fips wrapper calls, user can call direct */
  50:../src/wolfcrypt/src/sha.c **** #if defined(HAVE_FIPS) && \
  51:../src/wolfcrypt/src/sha.c ****     (!defined(HAVE_FIPS_VERSION) || (HAVE_FIPS_VERSION < 2))
  52:../src/wolfcrypt/src/sha.c **** 
  53:../src/wolfcrypt/src/sha.c ****     int wc_InitSha(wc_Sha* sha)
  54:../src/wolfcrypt/src/sha.c ****     {
  55:../src/wolfcrypt/src/sha.c ****         if (sha == NULL) {
  56:../src/wolfcrypt/src/sha.c ****             return BAD_FUNC_ARG;
  57:../src/wolfcrypt/src/sha.c ****         }
  58:../src/wolfcrypt/src/sha.c ****         return InitSha_fips(sha);
  59:../src/wolfcrypt/src/sha.c ****     }
  60:../src/wolfcrypt/src/sha.c ****     int wc_InitSha_ex(wc_Sha* sha, void* heap, int devId)
  61:../src/wolfcrypt/src/sha.c ****     {
  62:../src/wolfcrypt/src/sha.c ****         (void)heap;
  63:../src/wolfcrypt/src/sha.c ****         (void)devId;
  64:../src/wolfcrypt/src/sha.c ****         if (sha == NULL) {
  65:../src/wolfcrypt/src/sha.c ****             return BAD_FUNC_ARG;
  66:../src/wolfcrypt/src/sha.c ****         }
  67:../src/wolfcrypt/src/sha.c ****         return InitSha_fips(sha);
  68:../src/wolfcrypt/src/sha.c ****     }
  69:../src/wolfcrypt/src/sha.c **** 
  70:../src/wolfcrypt/src/sha.c ****     int wc_ShaUpdate(wc_Sha* sha, const byte* data, word32 len)
  71:../src/wolfcrypt/src/sha.c ****     {
  72:../src/wolfcrypt/src/sha.c ****         if (sha == NULL || (data == NULL && len > 0)) {
  73:../src/wolfcrypt/src/sha.c ****             return BAD_FUNC_ARG;
  74:../src/wolfcrypt/src/sha.c ****         }
  75:../src/wolfcrypt/src/sha.c ****         return ShaUpdate_fips(sha, data, len);
  76:../src/wolfcrypt/src/sha.c ****     }
  77:../src/wolfcrypt/src/sha.c **** 
  78:../src/wolfcrypt/src/sha.c ****     int wc_ShaFinal(wc_Sha* sha, byte* out)
  79:../src/wolfcrypt/src/sha.c ****     {
  80:../src/wolfcrypt/src/sha.c ****         if (sha == NULL || out == NULL) {
  81:../src/wolfcrypt/src/sha.c ****             return BAD_FUNC_ARG;
  82:../src/wolfcrypt/src/sha.c ****         }
  83:../src/wolfcrypt/src/sha.c ****         return ShaFinal_fips(sha,out);
  84:../src/wolfcrypt/src/sha.c ****     }
  85:../src/wolfcrypt/src/sha.c ****     void wc_ShaFree(wc_Sha* sha)
  86:../src/wolfcrypt/src/sha.c ****     {
  87:../src/wolfcrypt/src/sha.c ****         (void)sha;
  88:../src/wolfcrypt/src/sha.c ****         /* Not supported in FIPS */
  89:../src/wolfcrypt/src/sha.c ****     }
  90:../src/wolfcrypt/src/sha.c **** 
  91:../src/wolfcrypt/src/sha.c **** #else /* else build without fips, or for FIPS v2 */
  92:../src/wolfcrypt/src/sha.c **** 
  93:../src/wolfcrypt/src/sha.c **** 
  94:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_TI_HASH)
  95:../src/wolfcrypt/src/sha.c ****     /* #include <wolfcrypt/src/port/ti/ti-hash.c> included by wc_port.c */
  96:../src/wolfcrypt/src/sha.c **** 
  97:../src/wolfcrypt/src/sha.c **** #else
  98:../src/wolfcrypt/src/sha.c **** 
  99:../src/wolfcrypt/src/sha.c **** #include <wolfssl/wolfcrypt/logging.h>
 100:../src/wolfcrypt/src/sha.c **** #ifdef NO_INLINE
 101:../src/wolfcrypt/src/sha.c ****     #include <wolfssl/wolfcrypt/misc.h>
 102:../src/wolfcrypt/src/sha.c **** #else
 103:../src/wolfcrypt/src/sha.c ****     #define WOLFSSL_MISC_INCLUDED
 104:../src/wolfcrypt/src/sha.c ****     #include <wolfcrypt/src/misc.c>
 105:../src/wolfcrypt/src/sha.c **** #endif
 106:../src/wolfcrypt/src/sha.c **** 
 107:../src/wolfcrypt/src/sha.c **** 
 108:../src/wolfcrypt/src/sha.c **** /* Hardware Acceleration */
 109:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_PIC32MZ_HASH)
 110:../src/wolfcrypt/src/sha.c ****     #include <wolfssl/wolfcrypt/port/pic32/pic32mz-crypt.h>
 111:../src/wolfcrypt/src/sha.c **** 
 112:../src/wolfcrypt/src/sha.c **** #elif defined(STM32_HASH)
 113:../src/wolfcrypt/src/sha.c **** 
 114:../src/wolfcrypt/src/sha.c ****     /* Supports CubeMX HAL or Standard Peripheral Library */
 115:../src/wolfcrypt/src/sha.c ****     int wc_InitSha_ex(wc_Sha* sha, void* heap, int devId)
 116:../src/wolfcrypt/src/sha.c ****     {
 117:../src/wolfcrypt/src/sha.c ****         if (sha == NULL) {
 118:../src/wolfcrypt/src/sha.c ****             return BAD_FUNC_ARG;
 119:../src/wolfcrypt/src/sha.c ****         }
 120:../src/wolfcrypt/src/sha.c **** 
 121:../src/wolfcrypt/src/sha.c ****         (void)devId;
 122:../src/wolfcrypt/src/sha.c ****         (void)heap;
 123:../src/wolfcrypt/src/sha.c **** 
 124:../src/wolfcrypt/src/sha.c ****         wc_Stm32_Hash_Init(&sha->stmCtx);
 125:../src/wolfcrypt/src/sha.c **** 
 126:../src/wolfcrypt/src/sha.c ****         return 0;
 127:../src/wolfcrypt/src/sha.c ****     }
 128:../src/wolfcrypt/src/sha.c **** 
 129:../src/wolfcrypt/src/sha.c ****     int wc_ShaUpdate(wc_Sha* sha, const byte* data, word32 len)
 130:../src/wolfcrypt/src/sha.c ****     {
 131:../src/wolfcrypt/src/sha.c ****         int ret;
 132:../src/wolfcrypt/src/sha.c **** 
 133:../src/wolfcrypt/src/sha.c ****         if (sha == NULL || (data == NULL && len > 0)) {
 134:../src/wolfcrypt/src/sha.c ****             return BAD_FUNC_ARG;
 135:../src/wolfcrypt/src/sha.c ****         }
 136:../src/wolfcrypt/src/sha.c **** 
 137:../src/wolfcrypt/src/sha.c ****         ret = wolfSSL_CryptHwMutexLock();
 138:../src/wolfcrypt/src/sha.c ****         if (ret == 0) {
 139:../src/wolfcrypt/src/sha.c ****             ret = wc_Stm32_Hash_Update(&sha->stmCtx, HASH_AlgoSelection_SHA1,
 140:../src/wolfcrypt/src/sha.c ****                 data, len, WC_SHA_BLOCK_SIZE);
 141:../src/wolfcrypt/src/sha.c ****             wolfSSL_CryptHwMutexUnLock();
 142:../src/wolfcrypt/src/sha.c ****         }
 143:../src/wolfcrypt/src/sha.c ****         return ret;
 144:../src/wolfcrypt/src/sha.c ****     }
 145:../src/wolfcrypt/src/sha.c **** 
 146:../src/wolfcrypt/src/sha.c ****     int wc_ShaFinal(wc_Sha* sha, byte* hash)
 147:../src/wolfcrypt/src/sha.c ****     {
 148:../src/wolfcrypt/src/sha.c ****         int ret;
 149:../src/wolfcrypt/src/sha.c **** 
 150:../src/wolfcrypt/src/sha.c ****         if (sha == NULL || hash == NULL) {
 151:../src/wolfcrypt/src/sha.c ****             return BAD_FUNC_ARG;
 152:../src/wolfcrypt/src/sha.c ****         }
 153:../src/wolfcrypt/src/sha.c **** 
 154:../src/wolfcrypt/src/sha.c ****         ret = wolfSSL_CryptHwMutexLock();
 155:../src/wolfcrypt/src/sha.c ****         if (ret == 0) {
 156:../src/wolfcrypt/src/sha.c ****             ret = wc_Stm32_Hash_Final(&sha->stmCtx, HASH_AlgoSelection_SHA1,
 157:../src/wolfcrypt/src/sha.c ****                 hash, WC_SHA_DIGEST_SIZE);
 158:../src/wolfcrypt/src/sha.c ****             wolfSSL_CryptHwMutexUnLock();
 159:../src/wolfcrypt/src/sha.c ****         }
 160:../src/wolfcrypt/src/sha.c **** 
 161:../src/wolfcrypt/src/sha.c ****         (void)wc_InitSha(sha);  /* reset state */
 162:../src/wolfcrypt/src/sha.c **** 
 163:../src/wolfcrypt/src/sha.c ****         return ret;
 164:../src/wolfcrypt/src/sha.c ****     }
 165:../src/wolfcrypt/src/sha.c **** 
 166:../src/wolfcrypt/src/sha.c **** 
 167:../src/wolfcrypt/src/sha.c **** #elif defined(FREESCALE_LTC_SHA)
 168:../src/wolfcrypt/src/sha.c **** 
 169:../src/wolfcrypt/src/sha.c ****     #include "fsl_ltc.h"
 170:../src/wolfcrypt/src/sha.c ****     int wc_InitSha_ex(wc_Sha* sha, void* heap, int devId)
 171:../src/wolfcrypt/src/sha.c ****     {
 172:../src/wolfcrypt/src/sha.c ****         if (sha == NULL) {
 173:../src/wolfcrypt/src/sha.c ****             return BAD_FUNC_ARG;
 174:../src/wolfcrypt/src/sha.c ****         }
 175:../src/wolfcrypt/src/sha.c **** 
 176:../src/wolfcrypt/src/sha.c ****         (void)devId;
 177:../src/wolfcrypt/src/sha.c ****         (void)heap;
 178:../src/wolfcrypt/src/sha.c **** 
 179:../src/wolfcrypt/src/sha.c ****         LTC_HASH_Init(LTC_BASE, &sha->ctx, kLTC_Sha1, NULL, 0);
 180:../src/wolfcrypt/src/sha.c ****         return 0;
 181:../src/wolfcrypt/src/sha.c ****     }
 182:../src/wolfcrypt/src/sha.c **** 
 183:../src/wolfcrypt/src/sha.c ****     int wc_ShaUpdate(wc_Sha* sha, const byte* data, word32 len)
 184:../src/wolfcrypt/src/sha.c ****     {
 185:../src/wolfcrypt/src/sha.c ****         LTC_HASH_Update(&sha->ctx, data, len);
 186:../src/wolfcrypt/src/sha.c ****         return 0;
 187:../src/wolfcrypt/src/sha.c ****     }
 188:../src/wolfcrypt/src/sha.c **** 
 189:../src/wolfcrypt/src/sha.c ****     int wc_ShaFinal(wc_Sha* sha, byte* hash)
 190:../src/wolfcrypt/src/sha.c ****     {
 191:../src/wolfcrypt/src/sha.c ****         word32 hashlen = WC_SHA_DIGEST_SIZE;
 192:../src/wolfcrypt/src/sha.c ****         LTC_HASH_Finish(&sha->ctx, hash, &hashlen);
 193:../src/wolfcrypt/src/sha.c ****         return wc_InitSha(sha);  /* reset state */
 194:../src/wolfcrypt/src/sha.c ****     }
 195:../src/wolfcrypt/src/sha.c **** 
 196:../src/wolfcrypt/src/sha.c **** 
 197:../src/wolfcrypt/src/sha.c **** #elif defined(FREESCALE_MMCAU_SHA)
 198:../src/wolfcrypt/src/sha.c **** 
 199:../src/wolfcrypt/src/sha.c ****     #ifdef FREESCALE_MMCAU_CLASSIC_SHA
 200:../src/wolfcrypt/src/sha.c ****         #include "cau_api.h"
 201:../src/wolfcrypt/src/sha.c ****     #else
 202:../src/wolfcrypt/src/sha.c ****         #include "fsl_mmcau.h"
 203:../src/wolfcrypt/src/sha.c ****     #endif
 204:../src/wolfcrypt/src/sha.c **** 
 205:../src/wolfcrypt/src/sha.c ****     #define USE_SHA_SOFTWARE_IMPL /* Only for API's, actual transform is here */
 206:../src/wolfcrypt/src/sha.c **** 
 207:../src/wolfcrypt/src/sha.c ****     #define XTRANSFORM(S,B)       Transform((S),(B))
 208:../src/wolfcrypt/src/sha.c ****     #define XTRANSFORM_LEN(S,B,L) Transform_Len((S),(B),(L))
 209:../src/wolfcrypt/src/sha.c **** 
 210:../src/wolfcrypt/src/sha.c ****     #ifndef WC_HASH_DATA_ALIGNMENT
 211:../src/wolfcrypt/src/sha.c ****         /* these hardware API's require 4 byte (word32) alignment */
 212:../src/wolfcrypt/src/sha.c ****         #define WC_HASH_DATA_ALIGNMENT 4
 213:../src/wolfcrypt/src/sha.c ****     #endif
 214:../src/wolfcrypt/src/sha.c **** 
 215:../src/wolfcrypt/src/sha.c ****     static int InitSha(wc_Sha* sha)
 216:../src/wolfcrypt/src/sha.c ****     {
 217:../src/wolfcrypt/src/sha.c ****         int ret = 0;
 218:../src/wolfcrypt/src/sha.c ****         ret = wolfSSL_CryptHwMutexLock();
 219:../src/wolfcrypt/src/sha.c ****         if (ret != 0) {
 220:../src/wolfcrypt/src/sha.c ****             return ret;
 221:../src/wolfcrypt/src/sha.c ****         }
 222:../src/wolfcrypt/src/sha.c ****     #ifdef FREESCALE_MMCAU_CLASSIC_SHA
 223:../src/wolfcrypt/src/sha.c ****         cau_sha1_initialize_output(sha->digest);
 224:../src/wolfcrypt/src/sha.c ****     #else
 225:../src/wolfcrypt/src/sha.c ****         MMCAU_SHA1_InitializeOutput((word32*)sha->digest);
 226:../src/wolfcrypt/src/sha.c ****     #endif
 227:../src/wolfcrypt/src/sha.c ****         wolfSSL_CryptHwMutexUnLock();
 228:../src/wolfcrypt/src/sha.c **** 
 229:../src/wolfcrypt/src/sha.c ****         sha->buffLen = 0;
 230:../src/wolfcrypt/src/sha.c ****         sha->loLen   = 0;
 231:../src/wolfcrypt/src/sha.c ****         sha->hiLen   = 0;
 232:../src/wolfcrypt/src/sha.c **** 
 233:../src/wolfcrypt/src/sha.c ****         return ret;
 234:../src/wolfcrypt/src/sha.c ****     }
 235:../src/wolfcrypt/src/sha.c **** 
 236:../src/wolfcrypt/src/sha.c ****     static int Transform(wc_Sha* sha, const byte* data)
 237:../src/wolfcrypt/src/sha.c ****     {
 238:../src/wolfcrypt/src/sha.c ****         int ret = wolfSSL_CryptHwMutexLock();
 239:../src/wolfcrypt/src/sha.c ****         if (ret == 0) {
 240:../src/wolfcrypt/src/sha.c ****     #ifdef FREESCALE_MMCAU_CLASSIC_SHA
 241:../src/wolfcrypt/src/sha.c ****             cau_sha1_hash_n((byte*)data, 1, sha->digest);
 242:../src/wolfcrypt/src/sha.c ****     #else
 243:../src/wolfcrypt/src/sha.c ****             MMCAU_SHA1_HashN((byte*)data, 1, (word32*)sha->digest);
 244:../src/wolfcrypt/src/sha.c ****     #endif
 245:../src/wolfcrypt/src/sha.c ****             wolfSSL_CryptHwMutexUnLock();
 246:../src/wolfcrypt/src/sha.c ****         }
 247:../src/wolfcrypt/src/sha.c ****         return ret;
 248:../src/wolfcrypt/src/sha.c ****     }
 249:../src/wolfcrypt/src/sha.c **** 
 250:../src/wolfcrypt/src/sha.c ****     static int Transform_Len(wc_Sha* sha, const byte* data, word32 len)
 251:../src/wolfcrypt/src/sha.c ****     {
 252:../src/wolfcrypt/src/sha.c ****         int ret = wolfSSL_CryptHwMutexLock();
 253:../src/wolfcrypt/src/sha.c ****         if (ret == 0) {
 254:../src/wolfcrypt/src/sha.c ****         #if defined(WC_HASH_DATA_ALIGNMENT) && WC_HASH_DATA_ALIGNMENT > 0
 255:../src/wolfcrypt/src/sha.c ****             if ((wc_ptr_t)data % WC_HASH_DATA_ALIGNMENT) {
 256:../src/wolfcrypt/src/sha.c ****                 /* data pointer is NOT aligned,
 257:../src/wolfcrypt/src/sha.c ****                  * so copy and perform one block at a time */
 258:../src/wolfcrypt/src/sha.c ****                 byte* local = (byte*)sha->buffer;
 259:../src/wolfcrypt/src/sha.c ****                 while (len >= WC_SHA_BLOCK_SIZE) {
 260:../src/wolfcrypt/src/sha.c ****                     XMEMCPY(local, data, WC_SHA_BLOCK_SIZE);
 261:../src/wolfcrypt/src/sha.c ****                 #ifdef FREESCALE_MMCAU_CLASSIC_SHA
 262:../src/wolfcrypt/src/sha.c ****                     cau_sha1_hash_n(local, 1, sha->digest);
 263:../src/wolfcrypt/src/sha.c ****                 #else
 264:../src/wolfcrypt/src/sha.c ****                     MMCAU_SHA1_HashN(local, 1, sha->digest);
 265:../src/wolfcrypt/src/sha.c ****                 #endif
 266:../src/wolfcrypt/src/sha.c ****                     data += WC_SHA_BLOCK_SIZE;
 267:../src/wolfcrypt/src/sha.c ****                     len  -= WC_SHA_BLOCK_SIZE;
 268:../src/wolfcrypt/src/sha.c ****                 }
 269:../src/wolfcrypt/src/sha.c ****             }
 270:../src/wolfcrypt/src/sha.c ****             else
 271:../src/wolfcrypt/src/sha.c ****         #endif
 272:../src/wolfcrypt/src/sha.c ****             {
 273:../src/wolfcrypt/src/sha.c ****     #ifdef FREESCALE_MMCAU_CLASSIC_SHA
 274:../src/wolfcrypt/src/sha.c ****             cau_sha1_hash_n((byte*)data, len/WC_SHA_BLOCK_SIZE, sha->digest);
 275:../src/wolfcrypt/src/sha.c ****     #else
 276:../src/wolfcrypt/src/sha.c ****             MMCAU_SHA1_HashN((byte*)data, len/WC_SHA_BLOCK_SIZE,
 277:../src/wolfcrypt/src/sha.c ****                 (word32*)sha->digest);
 278:../src/wolfcrypt/src/sha.c ****     #endif
 279:../src/wolfcrypt/src/sha.c ****             }
 280:../src/wolfcrypt/src/sha.c ****             wolfSSL_CryptHwMutexUnLock();
 281:../src/wolfcrypt/src/sha.c ****         }
 282:../src/wolfcrypt/src/sha.c ****         return ret;
 283:../src/wolfcrypt/src/sha.c ****     }
 284:../src/wolfcrypt/src/sha.c **** 
 285:../src/wolfcrypt/src/sha.c **** #elif defined(WOLFSSL_IMX6_CAAM) && !defined(NO_IMX6_CAAM_HASH) && \
 286:../src/wolfcrypt/src/sha.c ****     !defined(WOLFSSL_QNX_CAAM)
 287:../src/wolfcrypt/src/sha.c ****     /* wolfcrypt/src/port/caam/caam_sha.c */
 288:../src/wolfcrypt/src/sha.c **** 
 289:../src/wolfcrypt/src/sha.c **** #elif defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 290:../src/wolfcrypt/src/sha.c ****      !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 291:../src/wolfcrypt/src/sha.c **** 
 292:../src/wolfcrypt/src/sha.c ****     #include "wolfssl/wolfcrypt/port/Espressif/esp32-crypt.h"
 293:../src/wolfcrypt/src/sha.c **** 
 294:../src/wolfcrypt/src/sha.c ****     #define USE_SHA_SOFTWARE_IMPL
 295:../src/wolfcrypt/src/sha.c **** 
 296:../src/wolfcrypt/src/sha.c ****     static int InitSha(wc_Sha* sha)
 297:../src/wolfcrypt/src/sha.c ****     {
 298:../src/wolfcrypt/src/sha.c ****         int ret = 0;
 299:../src/wolfcrypt/src/sha.c **** 
 300:../src/wolfcrypt/src/sha.c ****         sha->digest[0] = 0x67452301L;
 301:../src/wolfcrypt/src/sha.c ****         sha->digest[1] = 0xEFCDAB89L;
 302:../src/wolfcrypt/src/sha.c ****         sha->digest[2] = 0x98BADCFEL;
 303:../src/wolfcrypt/src/sha.c ****         sha->digest[3] = 0x10325476L;
 304:../src/wolfcrypt/src/sha.c ****         sha->digest[4] = 0xC3D2E1F0L;
 305:../src/wolfcrypt/src/sha.c **** 
 306:../src/wolfcrypt/src/sha.c ****         sha->buffLen = 0;
 307:../src/wolfcrypt/src/sha.c ****         sha->loLen   = 0;
 308:../src/wolfcrypt/src/sha.c ****         sha->hiLen   = 0;
 309:../src/wolfcrypt/src/sha.c **** 
 310:../src/wolfcrypt/src/sha.c ****         /* always start firstblock = 1 when using hw engine */
 311:../src/wolfcrypt/src/sha.c ****         sha->ctx.isfirstblock = 1;
 312:../src/wolfcrypt/src/sha.c ****         sha->ctx.sha_type = SHA1;
 313:../src/wolfcrypt/src/sha.c ****         if(sha->ctx.mode == ESP32_SHA_HW){
 314:../src/wolfcrypt/src/sha.c ****             /* release hw engine */
 315:../src/wolfcrypt/src/sha.c ****             esp_sha_hw_unlock();
 316:../src/wolfcrypt/src/sha.c ****         }
 317:../src/wolfcrypt/src/sha.c ****         /* always set mode as INIT
 318:../src/wolfcrypt/src/sha.c ****         *  whether using HW or SW is determined at first call of update()
 319:../src/wolfcrypt/src/sha.c ****         */
 320:../src/wolfcrypt/src/sha.c ****         sha->ctx.mode = ESP32_SHA_INIT;
 321:../src/wolfcrypt/src/sha.c **** 
 322:../src/wolfcrypt/src/sha.c ****         return ret;
 323:../src/wolfcrypt/src/sha.c ****     }
 324:../src/wolfcrypt/src/sha.c **** 
 325:../src/wolfcrypt/src/sha.c **** #elif defined(WOLFSSL_RENESAS_TSIP_CRYPT) && \
 326:../src/wolfcrypt/src/sha.c ****     !defined(NO_WOLFSSL_RENESAS_TSIP_CRYPT_HASH)
 327:../src/wolfcrypt/src/sha.c **** 
 328:../src/wolfcrypt/src/sha.c ****     /* implemented in wolfcrypt/src/port/Renesas/renesas_tsip_sha.c */
 329:../src/wolfcrypt/src/sha.c **** 
 330:../src/wolfcrypt/src/sha.c **** #elif defined(WOLFSSL_IMXRT_DCP)
 331:../src/wolfcrypt/src/sha.c ****     #include <wolfssl/wolfcrypt/port/nxp/dcp_port.h>
 332:../src/wolfcrypt/src/sha.c ****     /* implemented in wolfcrypt/src/port/nxp/dcp_port.c */
 333:../src/wolfcrypt/src/sha.c **** 
 334:../src/wolfcrypt/src/sha.c **** #elif defined(WOLFSSL_SILABS_SE_ACCEL)
 335:../src/wolfcrypt/src/sha.c **** 
 336:../src/wolfcrypt/src/sha.c ****     /* implemented in wolfcrypt/src/port/silabs/silabs_hash.c */
 337:../src/wolfcrypt/src/sha.c **** #elif defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_HASH)
 338:../src/wolfcrypt/src/sha.c **** 
 339:../src/wolfcrypt/src/sha.c ****     #include <wolfssl/wolfcrypt/port/nxp/se050_port.h>
 340:../src/wolfcrypt/src/sha.c ****     int wc_InitSha_ex(wc_Sha* sha, void* heap, int devId)
 341:../src/wolfcrypt/src/sha.c ****     {
 342:../src/wolfcrypt/src/sha.c ****         if (sha == NULL) {
 343:../src/wolfcrypt/src/sha.c ****             return BAD_FUNC_ARG;
 344:../src/wolfcrypt/src/sha.c ****         }
 345:../src/wolfcrypt/src/sha.c ****         (void)devId;
 346:../src/wolfcrypt/src/sha.c **** 
 347:../src/wolfcrypt/src/sha.c ****         return se050_hash_init(&sha->se050Ctx, heap);
 348:../src/wolfcrypt/src/sha.c ****     }
 349:../src/wolfcrypt/src/sha.c **** 
 350:../src/wolfcrypt/src/sha.c ****     int wc_ShaUpdate(wc_Sha* sha, const byte* data, word32 len)
 351:../src/wolfcrypt/src/sha.c ****     {
 352:../src/wolfcrypt/src/sha.c ****         return se050_hash_update(&sha->se050Ctx, data, len);
 353:../src/wolfcrypt/src/sha.c **** 
 354:../src/wolfcrypt/src/sha.c ****     }
 355:../src/wolfcrypt/src/sha.c **** 
 356:../src/wolfcrypt/src/sha.c ****     int wc_ShaFinal(wc_Sha* sha, byte* hash)
 357:../src/wolfcrypt/src/sha.c ****     {
 358:../src/wolfcrypt/src/sha.c ****         int ret = 0;
 359:../src/wolfcrypt/src/sha.c ****         ret = se050_hash_final(&sha->se050Ctx, hash, WC_SHA_DIGEST_SIZE,
 360:../src/wolfcrypt/src/sha.c ****                                kAlgorithm_SSS_SHA1);
 361:../src/wolfcrypt/src/sha.c ****         (void)wc_InitSha(sha);
 362:../src/wolfcrypt/src/sha.c ****         return ret;
 363:../src/wolfcrypt/src/sha.c ****     }
 364:../src/wolfcrypt/src/sha.c ****     int wc_ShaFinalRaw(wc_Sha* sha, byte* hash)
 365:../src/wolfcrypt/src/sha.c ****     {
 366:../src/wolfcrypt/src/sha.c ****         int ret = 0;
 367:../src/wolfcrypt/src/sha.c ****         ret = se050_hash_final(&sha->se050Ctx, hash, WC_SHA_DIGEST_SIZE,
 368:../src/wolfcrypt/src/sha.c ****                                kAlgorithm_SSS_SHA1);
 369:../src/wolfcrypt/src/sha.c ****         (void)wc_InitSha(sha);
 370:../src/wolfcrypt/src/sha.c ****         return ret;
 371:../src/wolfcrypt/src/sha.c ****     }
 372:../src/wolfcrypt/src/sha.c **** 
 373:../src/wolfcrypt/src/sha.c **** #elif defined(WOLFSSL_HAVE_PSA) && !defined(WOLFSSL_PSA_NO_HASH)
 374:../src/wolfcrypt/src/sha.c **** /* implemented in wolfcrypt/src/port/psa/psa_hash.c */
 375:../src/wolfcrypt/src/sha.c **** #else
 376:../src/wolfcrypt/src/sha.c ****     /* Software implementation */
 377:../src/wolfcrypt/src/sha.c ****     #define USE_SHA_SOFTWARE_IMPL
 378:../src/wolfcrypt/src/sha.c **** 
 379:../src/wolfcrypt/src/sha.c ****     static int InitSha(wc_Sha* sha)
 380:../src/wolfcrypt/src/sha.c ****     {
 151                             		.loc 2 380 5
 152 0000 7E AA                   		push.l	r10
 153                             	.LCFI9:
 154 0002 71 0A F8                		add	#-8, r0, r10
 155                             	.LCFI10:
 156 0005 EF A0                   		mov.L	r10, r0
 157 0007 E7 A1 01                		mov.L	r1, 4[r10]
 381:../src/wolfcrypt/src/sha.c ****         int ret = 0;
 158                             		.loc 2 381 13
 159 000a F8 A6 00                		mov.L	#0, [r10]
 382:../src/wolfcrypt/src/sha.c **** 
 383:../src/wolfcrypt/src/sha.c ****         sha->digest[0] = 0x67452301L;
 160                             		.loc 2 383 24
 161 000d ED A5 01                		mov.L	4[r10], r5
 162 0010 F9 52 13 01 23 45 67    		mov.L	#0x67452301, 76[r5]
 384:../src/wolfcrypt/src/sha.c ****         sha->digest[1] = 0xEFCDAB89L;
 163                             		.loc 2 384 24
 164 0017 ED A5 01                		mov.L	4[r10], r5
 165 001a F9 52 14 89 AB CD EF    		mov.L	#-271733879, 80[r5]
 385:../src/wolfcrypt/src/sha.c ****         sha->digest[2] = 0x98BADCFEL;
 166                             		.loc 2 385 24
 167 0021 ED A5 01                		mov.L	4[r10], r5
 168 0024 F9 52 15 FE DC BA 98    		mov.L	#-1732584194, 84[r5]
 386:../src/wolfcrypt/src/sha.c ****         sha->digest[3] = 0x10325476L;
 169                             		.loc 2 386 24
 170 002b ED A5 01                		mov.L	4[r10], r5
 171 002e F9 52 16 76 54 32 10    		mov.L	#0x10325476, 88[r5]
 387:../src/wolfcrypt/src/sha.c ****         sha->digest[4] = 0xC3D2E1F0L;
 172                             		.loc 2 387 24
 173 0035 ED A5 01                		mov.L	4[r10], r5
 174 0038 F9 52 17 F0 E1 D2 C3    		mov.L	#-1009589776, 92[r5]
 388:../src/wolfcrypt/src/sha.c **** 
 389:../src/wolfcrypt/src/sha.c ****         sha->buffLen = 0;
 175                             		.loc 2 389 22
 176 003f ED A5 01                		mov.L	4[r10], r5
 177 0042 F8 56 00                		mov.L	#0, [r5]
 390:../src/wolfcrypt/src/sha.c ****         sha->loLen   = 0;
 178                             		.loc 2 390 22
 179 0045 ED A5 01                		mov.L	4[r10], r5
 180 0048 3E 51 00                		mov.L	#0, 4[r5]
 391:../src/wolfcrypt/src/sha.c ****         sha->hiLen   = 0;
 181                             		.loc 2 391 22
 182 004b ED A5 01                		mov.L	4[r10], r5
 183 004e 3E 52 00                		mov.L	#0, 8[r5]
 392:../src/wolfcrypt/src/sha.c ****     #ifdef WOLFSSL_HASH_FLAGS
 393:../src/wolfcrypt/src/sha.c ****         sha->flags = 0;
 394:../src/wolfcrypt/src/sha.c ****     #endif
 395:../src/wolfcrypt/src/sha.c **** 
 396:../src/wolfcrypt/src/sha.c ****         return ret;
 184                             		.loc 2 396 16
 185 0051 EC A5                   		mov.L	[r10], r5
 397:../src/wolfcrypt/src/sha.c ****     }
 186                             		.loc 2 397 5
 187 0053 EF 51                   		mov.L	r5, r1
 188 0055 3F AA 03                		rtsd	#12, r10-r10
 189                             	.LFE43:
 191                             		.section	.text.AddLength,"ax",@progbits
 193                             	_AddLength:
 194                             	.LFB44:
 398:../src/wolfcrypt/src/sha.c **** #endif /* End Hardware Acceleration */
 399:../src/wolfcrypt/src/sha.c **** 
 400:../src/wolfcrypt/src/sha.c **** /* Software implementation */
 401:../src/wolfcrypt/src/sha.c **** #ifdef USE_SHA_SOFTWARE_IMPL
 402:../src/wolfcrypt/src/sha.c **** 
 403:../src/wolfcrypt/src/sha.c **** static WC_INLINE void AddLength(wc_Sha* sha, word32 len)
 404:../src/wolfcrypt/src/sha.c **** {
 195                             		.loc 2 404 1
 196 0000 7E AA                   		push.l	r10
 197                             	.LCFI11:
 198 0002 71 0A F4                		add	#-12, r0, r10
 199                             	.LCFI12:
 200 0005 EF A0                   		mov.L	r10, r0
 201 0007 E7 A1 01                		mov.L	r1, 4[r10]
 202 000a E7 A2 02                		mov.L	r2, 8[r10]
 405:../src/wolfcrypt/src/sha.c ****     word32 tmp = sha->loLen;
 203                             		.loc 2 405 12
 204 000d ED A5 01                		mov.L	4[r10], r5
 205 0010 A8 5D                   		mov.L	4[r5], r5
 206 0012 E3 A5                   		mov.L	r5, [r10]
 406:../src/wolfcrypt/src/sha.c ****     if ((sha->loLen += len) < tmp)
 207                             		.loc 2 406 21
 208 0014 ED A5 01                		mov.L	4[r10], r5
 209 0017 A8 5D                   		mov.L	4[r5], r5
 210 0019 EF 54                   		mov.L	r5, r4
 211 001b 06 89 A4 02             		add	8[r10].L, r4
 212 001f ED A5 01                		mov.L	4[r10], r5
 213 0022 A0 5C                   		mov.L	r4, 4[r5]
 214 0024 ED A5 01                		mov.L	4[r10], r5
 215 0027 A8 5D                   		mov.L	4[r5], r5
 216                             		.loc 2 406 8
 217 0029 EC A4                   		mov.L	[r10], r4
 218 002b 47 54                   		cmp	r5, r4
 219 002d 25 0F                   		bleu	.L14
 407:../src/wolfcrypt/src/sha.c ****         sha->hiLen++;                       /* carry low to high */
 220                             		.loc 2 407 12
 221 002f ED A5 01                		mov.L	4[r10], r5
 222 0032 A8 D5                   		mov.L	8[r5], r5
 223                             		.loc 2 407 19
 224 0034 71 54 01                		add	#1, r5, r4
 225 0037 ED A5 01                		mov.L	4[r10], r5
 226 003a A0 D4                   		mov.L	r4, 8[r5]
 227                             	.L14:
 408:../src/wolfcrypt/src/sha.c **** }
 228                             		.loc 2 408 1
 229 003c 03                      		nop
 230 003d 3F AA 04                		rtsd	#16, r10-r10
 231                             	.LFE44:
 233                             		.section	.text.Transform,"ax",@progbits
 235                             	_Transform:
 236                             	.LFB45:
 409:../src/wolfcrypt/src/sha.c **** 
 410:../src/wolfcrypt/src/sha.c **** /* Check if custom wc_Sha transform is used */
 411:../src/wolfcrypt/src/sha.c **** #ifndef XTRANSFORM
 412:../src/wolfcrypt/src/sha.c ****     #define XTRANSFORM(S,B)   Transform((S),(B))
 413:../src/wolfcrypt/src/sha.c **** 
 414:../src/wolfcrypt/src/sha.c ****     #define blk0(i) (W[i] = *((word32*)&data[(i)*sizeof(word32)]))
 415:../src/wolfcrypt/src/sha.c ****     #define blk1(i) (W[(i)&15] = \
 416:../src/wolfcrypt/src/sha.c ****         rotlFixed(W[((i)+13)&15]^W[((i)+8)&15]^W[((i)+2)&15]^W[(i)&15],1))
 417:../src/wolfcrypt/src/sha.c **** 
 418:../src/wolfcrypt/src/sha.c ****     #define f1(x,y,z) ((z)^((x) &((y)^(z))))
 419:../src/wolfcrypt/src/sha.c ****     #define f2(x,y,z) ((x)^(y)^(z))
 420:../src/wolfcrypt/src/sha.c ****     #define f3(x,y,z) (((x)&(y))|((z)&((x)|(y))))
 421:../src/wolfcrypt/src/sha.c ****     #define f4(x,y,z) ((x)^(y)^(z))
 422:../src/wolfcrypt/src/sha.c **** 
 423:../src/wolfcrypt/src/sha.c ****     #ifdef WOLFSSL_NUCLEUS_1_2
 424:../src/wolfcrypt/src/sha.c ****         /* nucleus.h also defines R1-R4 */
 425:../src/wolfcrypt/src/sha.c ****         #undef R1
 426:../src/wolfcrypt/src/sha.c ****         #undef R2
 427:../src/wolfcrypt/src/sha.c ****         #undef R3
 428:../src/wolfcrypt/src/sha.c ****         #undef R4
 429:../src/wolfcrypt/src/sha.c ****     #endif
 430:../src/wolfcrypt/src/sha.c **** 
 431:../src/wolfcrypt/src/sha.c ****     /* (R0+R1), R2, R3, R4 are the different operations used in SHA1 */
 432:../src/wolfcrypt/src/sha.c ****     #define R0(v,w,x,y,z,i) (z)+= f1((w),(x),(y)) + blk0((i)) + 0x5A827999+ \
 433:../src/wolfcrypt/src/sha.c ****         rotlFixed((v),5); (w) = rotlFixed((w),30);
 434:../src/wolfcrypt/src/sha.c ****     #define R1(v,w,x,y,z,i) (z)+= f1((w),(x),(y)) + blk1((i)) + 0x5A827999+ \
 435:../src/wolfcrypt/src/sha.c ****         rotlFixed((v),5); (w) = rotlFixed((w),30);
 436:../src/wolfcrypt/src/sha.c ****     #define R2(v,w,x,y,z,i) (z)+= f2((w),(x),(y)) + blk1((i)) + 0x6ED9EBA1+ \
 437:../src/wolfcrypt/src/sha.c ****         rotlFixed((v),5); (w) = rotlFixed((w),30);
 438:../src/wolfcrypt/src/sha.c ****     #define R3(v,w,x,y,z,i) (z)+= f3((w),(x),(y)) + blk1((i)) + 0x8F1BBCDC+ \
 439:../src/wolfcrypt/src/sha.c ****         rotlFixed((v),5); (w) = rotlFixed((w),30);
 440:../src/wolfcrypt/src/sha.c ****     #define R4(v,w,x,y,z,i) (z)+= f4((w),(x),(y)) + blk1((i)) + 0xCA62C1D6+ \
 441:../src/wolfcrypt/src/sha.c ****         rotlFixed((v),5); (w) = rotlFixed((w),30);
 442:../src/wolfcrypt/src/sha.c **** 
 443:../src/wolfcrypt/src/sha.c ****     static int Transform(wc_Sha* sha, const byte* data)
 444:../src/wolfcrypt/src/sha.c ****     {
 237                             		.loc 2 444 5
 238 0000 7E AA                   		push.l	r10
 239                             	.LCFI13:
 240 0002 7E A6                   		push.l	r6
 241                             	.LCFI14:
 242 0004 71 0A A4                		add	#-92, r0, r10
 243                             	.LCFI15:
 244 0007 EF A0                   		mov.L	r10, r0
 245 0009 E7 A1 15                		mov.L	r1, 84[r10]
 246 000c E7 A2 16                		mov.L	r2, 88[r10]
 445:../src/wolfcrypt/src/sha.c ****         word32 W[WC_SHA_BLOCK_SIZE / sizeof(word32)];
 446:../src/wolfcrypt/src/sha.c **** 
 447:../src/wolfcrypt/src/sha.c ****         /* Copy context->state[] to working vars */
 448:../src/wolfcrypt/src/sha.c ****         word32 a = sha->digest[0];
 247                             		.loc 2 448 16
 248 000f ED A5 15                		mov.L	84[r10], r5
 249 0012 AC DD                   		mov.L	76[r5], r5
 250 0014 E3 A5                   		mov.L	r5, [r10]
 449:../src/wolfcrypt/src/sha.c ****         word32 b = sha->digest[1];
 251                             		.loc 2 449 16
 252 0016 ED A5 15                		mov.L	84[r10], r5
 253 0019 AD 55                   		mov.L	80[r5], r5
 254 001b E7 A5 01                		mov.L	r5, 4[r10]
 450:../src/wolfcrypt/src/sha.c ****         word32 c = sha->digest[2];
 255                             		.loc 2 450 16
 256 001e ED A5 15                		mov.L	84[r10], r5
 257 0021 AD 5D                   		mov.L	84[r5], r5
 258 0023 E7 A5 02                		mov.L	r5, 8[r10]
 451:../src/wolfcrypt/src/sha.c ****         word32 d = sha->digest[3];
 259                             		.loc 2 451 16
 260 0026 ED A5 15                		mov.L	84[r10], r5
 261 0029 AD D5                   		mov.L	88[r5], r5
 262 002b E7 A5 03                		mov.L	r5, 12[r10]
 452:../src/wolfcrypt/src/sha.c ****         word32 e = sha->digest[4];
 263                             		.loc 2 452 16
 264 002e ED A5 15                		mov.L	84[r10], r5
 265 0031 AD DD                   		mov.L	92[r5], r5
 266 0033 E7 A5 04                		mov.L	r5, 16[r10]
 453:../src/wolfcrypt/src/sha.c **** 
 454:../src/wolfcrypt/src/sha.c ****     #ifdef USE_SLOW_SHA
 455:../src/wolfcrypt/src/sha.c ****         word32 t, i;
 456:../src/wolfcrypt/src/sha.c **** 
 457:../src/wolfcrypt/src/sha.c ****         for (i = 0; i < 16; i++) {
 458:../src/wolfcrypt/src/sha.c ****             R0(a, b, c, d, e, i);
 459:../src/wolfcrypt/src/sha.c ****             t = e; e = d; d = c; c = b; b = a; a = t;
 460:../src/wolfcrypt/src/sha.c ****         }
 461:../src/wolfcrypt/src/sha.c **** 
 462:../src/wolfcrypt/src/sha.c ****         for (; i < 20; i++) {
 463:../src/wolfcrypt/src/sha.c ****             R1(a, b, c, d, e, i);
 464:../src/wolfcrypt/src/sha.c ****             t = e; e = d; d = c; c = b; b = a; a = t;
 465:../src/wolfcrypt/src/sha.c ****         }
 466:../src/wolfcrypt/src/sha.c **** 
 467:../src/wolfcrypt/src/sha.c ****         for (; i < 40; i++) {
 468:../src/wolfcrypt/src/sha.c ****             R2(a, b, c, d, e, i);
 469:../src/wolfcrypt/src/sha.c ****             t = e; e = d; d = c; c = b; b = a; a = t;
 470:../src/wolfcrypt/src/sha.c ****         }
 471:../src/wolfcrypt/src/sha.c **** 
 472:../src/wolfcrypt/src/sha.c ****         for (; i < 60; i++) {
 473:../src/wolfcrypt/src/sha.c ****             R3(a, b, c, d, e, i);
 474:../src/wolfcrypt/src/sha.c ****             t = e; e = d; d = c; c = b; b = a; a = t;
 475:../src/wolfcrypt/src/sha.c ****         }
 476:../src/wolfcrypt/src/sha.c **** 
 477:../src/wolfcrypt/src/sha.c ****         for (; i < 80; i++) {
 478:../src/wolfcrypt/src/sha.c ****             R4(a, b, c, d, e, i);
 479:../src/wolfcrypt/src/sha.c ****             t = e; e = d; d = c; c = b; b = a; a = t;
 480:../src/wolfcrypt/src/sha.c ****         }
 481:../src/wolfcrypt/src/sha.c ****     #else
 482:../src/wolfcrypt/src/sha.c ****         /* nearly 1 K bigger in code size but 25% faster */
 483:../src/wolfcrypt/src/sha.c ****         /* 4 rounds of 20 operations each. Loop unrolled. */
 484:../src/wolfcrypt/src/sha.c ****         R0(a,b,c,d,e, 0); R0(e,a,b,c,d, 1); R0(d,e,a,b,c, 2); R0(c,d,e,a,b, 3);
 267                             		.loc 2 484 9
 268 0036 ED A5 02                		mov.L	8[r10], r5
 269 0039 06 A1 0D A5 03          		xor	12[r10].L, r5
 270 003e ED A4 01                		mov.L	4[r10], r4
 271 0041 53 45                   		and	r4, r5
 272 0043 06 A1 0D A5 03          		xor	12[r10].L, r5
 273 0048 ED A4 16                		mov.L	88[r10], r4
 274 004b EC 44                   		mov.L	[r4], r4
 275 004d E7 A4 05                		mov.L	r4, 20[r10]
 276 0050 ED A4 05                		mov.L	20[r10], r4
 277 0053 FF 26 45                		add	r4, r5, r6
 278 0056 66 52                   		mov.L	#5, r2
 279 0058 EC A1                   		mov.L	[r10], r1
 280 005a 05 00 00 00             		bsr	_rotlFixed
 281 005e EF 15                   		mov.L	r1, r5
 282 0060 4B 65                   		add	r6, r5
 283 0062 70 55 99 79 82 5A       		add	#0x5a827999, r5
 284 0068 ED A4 04                		mov.L	16[r10], r4
 285 006b 4B 45                   		add	r4, r5
 286 006d E7 A5 04                		mov.L	r5, 16[r10]
 287 0070 75 42 1E                		mov.L	#30, r2
 288 0073 ED A1 01                		mov.L	4[r10], r1
 289 0076 05 00 00 00             		bsr	_rotlFixed
 290 007a E7 A1 01                		mov.L	r1, 4[r10]
 291                             		.loc 2 484 27
 292 007d ED A5 01                		mov.L	4[r10], r5
 293 0080 06 A1 0D A5 02          		xor	8[r10].L, r5
 294 0085 EC A4                   		mov.L	[r10], r4
 295 0087 53 45                   		and	r4, r5
 296 0089 06 A1 0D A5 02          		xor	8[r10].L, r5
 297 008e ED A4 16                		mov.L	88[r10], r4
 298 0091 A8 4C                   		mov.L	4[r4], r4
 299 0093 E7 A4 06                		mov.L	r4, 24[r10]
 300 0096 ED A4 06                		mov.L	24[r10], r4
 301 0099 FF 26 45                		add	r4, r5, r6
 302 009c 66 52                   		mov.L	#5, r2
 303 009e ED A1 04                		mov.L	16[r10], r1
 304 00a1 05 00 00 00             		bsr	_rotlFixed
 305 00a5 EF 15                   		mov.L	r1, r5
 306 00a7 4B 65                   		add	r6, r5
 307 00a9 70 55 99 79 82 5A       		add	#0x5a827999, r5
 308 00af ED A4 03                		mov.L	12[r10], r4
 309 00b2 4B 45                   		add	r4, r5
 310 00b4 E7 A5 03                		mov.L	r5, 12[r10]
 311 00b7 75 42 1E                		mov.L	#30, r2
 312 00ba EC A1                   		mov.L	[r10], r1
 313 00bc 05 00 00 00             		bsr	_rotlFixed
 314 00c0 E3 A1                   		mov.L	r1, [r10]
 315                             		.loc 2 484 45
 316 00c2 EC A5                   		mov.L	[r10], r5
 317 00c4 06 A1 0D A5 01          		xor	4[r10].L, r5
 318 00c9 ED A4 04                		mov.L	16[r10], r4
 319 00cc 53 45                   		and	r4, r5
 320 00ce 06 A1 0D A5 01          		xor	4[r10].L, r5
 321 00d3 ED A4 16                		mov.L	88[r10], r4
 322 00d6 A8 C4                   		mov.L	8[r4], r4
 323 00d8 E7 A4 07                		mov.L	r4, 28[r10]
 324 00db ED A4 07                		mov.L	28[r10], r4
 325 00de FF 26 45                		add	r4, r5, r6
 326 00e1 66 52                   		mov.L	#5, r2
 327 00e3 ED A1 03                		mov.L	12[r10], r1
 328 00e6 05 00 00 00             		bsr	_rotlFixed
 329 00ea EF 15                   		mov.L	r1, r5
 330 00ec 4B 65                   		add	r6, r5
 331 00ee 70 55 99 79 82 5A       		add	#0x5a827999, r5
 332 00f4 ED A4 02                		mov.L	8[r10], r4
 333 00f7 4B 45                   		add	r4, r5
 334 00f9 E7 A5 02                		mov.L	r5, 8[r10]
 335 00fc 75 42 1E                		mov.L	#30, r2
 336 00ff ED A1 04                		mov.L	16[r10], r1
 337 0102 05 00 00 00             		bsr	_rotlFixed
 338 0106 E7 A1 04                		mov.L	r1, 16[r10]
 339                             		.loc 2 484 63
 340 0109 ED A5 04                		mov.L	16[r10], r5
 341 010c 06 A0 0D A5             		xor	[r10].L, r5
 342 0110 ED A4 03                		mov.L	12[r10], r4
 343 0113 53 45                   		and	r4, r5
 344 0115 06 A0 0D A5             		xor	[r10].L, r5
 345 0119 ED A4 16                		mov.L	88[r10], r4
 346 011c A8 CC                   		mov.L	12[r4], r4
 347 011e E7 A4 08                		mov.L	r4, 32[r10]
 348 0121 ED A4 08                		mov.L	32[r10], r4
 349 0124 FF 26 45                		add	r4, r5, r6
 350 0127 66 52                   		mov.L	#5, r2
 351 0129 ED A1 02                		mov.L	8[r10], r1
 352 012c 05 00 00 00             		bsr	_rotlFixed
 353 0130 EF 15                   		mov.L	r1, r5
 354 0132 4B 65                   		add	r6, r5
 355 0134 70 55 99 79 82 5A       		add	#0x5a827999, r5
 356 013a ED A4 01                		mov.L	4[r10], r4
 357 013d 4B 45                   		add	r4, r5
 358 013f E7 A5 01                		mov.L	r5, 4[r10]
 359 0142 75 42 1E                		mov.L	#30, r2
 360 0145 ED A1 03                		mov.L	12[r10], r1
 361 0148 05 00 00 00             		bsr	_rotlFixed
 362 014c E7 A1 03                		mov.L	r1, 12[r10]
 485:../src/wolfcrypt/src/sha.c ****         R0(b,c,d,e,a, 4); R0(a,b,c,d,e, 5); R0(e,a,b,c,d, 6); R0(d,e,a,b,c, 7);
 363                             		.loc 2 485 9
 364 014f ED A5 03                		mov.L	12[r10], r5
 365 0152 06 A1 0D A5 04          		xor	16[r10].L, r5
 366 0157 ED A4 02                		mov.L	8[r10], r4
 367 015a 53 45                   		and	r4, r5
 368 015c 06 A1 0D A5 04          		xor	16[r10].L, r5
 369 0161 ED A4 16                		mov.L	88[r10], r4
 370 0164 A9 44                   		mov.L	16[r4], r4
 371 0166 E7 A4 09                		mov.L	r4, 36[r10]
 372 0169 ED A4 09                		mov.L	36[r10], r4
 373 016c FF 26 45                		add	r4, r5, r6
 374 016f 66 52                   		mov.L	#5, r2
 375 0171 ED A1 01                		mov.L	4[r10], r1
 376 0174 05 00 00 00             		bsr	_rotlFixed
 377 0178 EF 15                   		mov.L	r1, r5
 378 017a 4B 65                   		add	r6, r5
 379 017c 70 55 99 79 82 5A       		add	#0x5a827999, r5
 380 0182 EC A4                   		mov.L	[r10], r4
 381 0184 4B 45                   		add	r4, r5
 382 0186 E3 A5                   		mov.L	r5, [r10]
 383 0188 75 42 1E                		mov.L	#30, r2
 384 018b ED A1 02                		mov.L	8[r10], r1
 385 018e 05 00 00 00             		bsr	_rotlFixed
 386 0192 E7 A1 02                		mov.L	r1, 8[r10]
 387                             		.loc 2 485 27
 388 0195 ED A5 02                		mov.L	8[r10], r5
 389 0198 06 A1 0D A5 03          		xor	12[r10].L, r5
 390 019d ED A4 01                		mov.L	4[r10], r4
 391 01a0 53 45                   		and	r4, r5
 392 01a2 06 A1 0D A5 03          		xor	12[r10].L, r5
 393 01a7 ED A4 16                		mov.L	88[r10], r4
 394 01aa A9 4C                   		mov.L	20[r4], r4
 395 01ac E7 A4 0A                		mov.L	r4, 40[r10]
 396 01af ED A4 0A                		mov.L	40[r10], r4
 397 01b2 FF 26 45                		add	r4, r5, r6
 398 01b5 66 52                   		mov.L	#5, r2
 399 01b7 EC A1                   		mov.L	[r10], r1
 400 01b9 05 00 00 00             		bsr	_rotlFixed
 401 01bd EF 15                   		mov.L	r1, r5
 402 01bf 4B 65                   		add	r6, r5
 403 01c1 70 55 99 79 82 5A       		add	#0x5a827999, r5
 404 01c7 ED A4 04                		mov.L	16[r10], r4
 405 01ca 4B 45                   		add	r4, r5
 406 01cc E7 A5 04                		mov.L	r5, 16[r10]
 407 01cf 75 42 1E                		mov.L	#30, r2
 408 01d2 ED A1 01                		mov.L	4[r10], r1
 409 01d5 05 00 00 00             		bsr	_rotlFixed
 410 01d9 E7 A1 01                		mov.L	r1, 4[r10]
 411                             		.loc 2 485 45
 412 01dc ED A5 01                		mov.L	4[r10], r5
 413 01df 06 A1 0D A5 02          		xor	8[r10].L, r5
 414 01e4 EC A4                   		mov.L	[r10], r4
 415 01e6 53 45                   		and	r4, r5
 416 01e8 06 A1 0D A5 02          		xor	8[r10].L, r5
 417 01ed ED A4 16                		mov.L	88[r10], r4
 418 01f0 A9 C4                   		mov.L	24[r4], r4
 419 01f2 E7 A4 0B                		mov.L	r4, 44[r10]
 420 01f5 ED A4 0B                		mov.L	44[r10], r4
 421 01f8 FF 26 45                		add	r4, r5, r6
 422 01fb 66 52                   		mov.L	#5, r2
 423 01fd ED A1 04                		mov.L	16[r10], r1
 424 0200 05 00 00 00             		bsr	_rotlFixed
 425 0204 EF 15                   		mov.L	r1, r5
 426 0206 4B 65                   		add	r6, r5
 427 0208 70 55 99 79 82 5A       		add	#0x5a827999, r5
 428 020e ED A4 03                		mov.L	12[r10], r4
 429 0211 4B 45                   		add	r4, r5
 430 0213 E7 A5 03                		mov.L	r5, 12[r10]
 431 0216 75 42 1E                		mov.L	#30, r2
 432 0219 EC A1                   		mov.L	[r10], r1
 433 021b 05 00 00 00             		bsr	_rotlFixed
 434 021f E3 A1                   		mov.L	r1, [r10]
 435                             		.loc 2 485 63
 436 0221 EC A5                   		mov.L	[r10], r5
 437 0223 06 A1 0D A5 01          		xor	4[r10].L, r5
 438 0228 ED A4 04                		mov.L	16[r10], r4
 439 022b 53 45                   		and	r4, r5
 440 022d 06 A1 0D A5 01          		xor	4[r10].L, r5
 441 0232 ED A4 16                		mov.L	88[r10], r4
 442 0235 A9 CC                   		mov.L	28[r4], r4
 443 0237 E7 A4 0C                		mov.L	r4, 48[r10]
 444 023a ED A4 0C                		mov.L	48[r10], r4
 445 023d FF 26 45                		add	r4, r5, r6
 446 0240 66 52                   		mov.L	#5, r2
 447 0242 ED A1 03                		mov.L	12[r10], r1
 448 0245 05 00 00 00             		bsr	_rotlFixed
 449 0249 EF 15                   		mov.L	r1, r5
 450 024b 4B 65                   		add	r6, r5
 451 024d 70 55 99 79 82 5A       		add	#0x5a827999, r5
 452 0253 ED A4 02                		mov.L	8[r10], r4
 453 0256 4B 45                   		add	r4, r5
 454 0258 E7 A5 02                		mov.L	r5, 8[r10]
 455 025b 75 42 1E                		mov.L	#30, r2
 456 025e ED A1 04                		mov.L	16[r10], r1
 457 0261 05 00 00 00             		bsr	_rotlFixed
 458 0265 E7 A1 04                		mov.L	r1, 16[r10]
 486:../src/wolfcrypt/src/sha.c ****         R0(c,d,e,a,b, 8); R0(b,c,d,e,a, 9); R0(a,b,c,d,e,10); R0(e,a,b,c,d,11);
 459                             		.loc 2 486 9
 460 0268 ED A5 04                		mov.L	16[r10], r5
 461 026b 06 A0 0D A5             		xor	[r10].L, r5
 462 026f ED A4 03                		mov.L	12[r10], r4
 463 0272 53 45                   		and	r4, r5
 464 0274 06 A0 0D A5             		xor	[r10].L, r5
 465 0278 ED A4 16                		mov.L	88[r10], r4
 466 027b AA 44                   		mov.L	32[r4], r4
 467 027d E7 A4 0D                		mov.L	r4, 52[r10]
 468 0280 ED A4 0D                		mov.L	52[r10], r4
 469 0283 FF 26 45                		add	r4, r5, r6
 470 0286 66 52                   		mov.L	#5, r2
 471 0288 ED A1 02                		mov.L	8[r10], r1
 472 028b 05 00 00 00             		bsr	_rotlFixed
 473 028f EF 15                   		mov.L	r1, r5
 474 0291 4B 65                   		add	r6, r5
 475 0293 70 55 99 79 82 5A       		add	#0x5a827999, r5
 476 0299 ED A4 01                		mov.L	4[r10], r4
 477 029c 4B 45                   		add	r4, r5
 478 029e E7 A5 01                		mov.L	r5, 4[r10]
 479 02a1 75 42 1E                		mov.L	#30, r2
 480 02a4 ED A1 03                		mov.L	12[r10], r1
 481 02a7 05 00 00 00             		bsr	_rotlFixed
 482 02ab E7 A1 03                		mov.L	r1, 12[r10]
 483                             		.loc 2 486 27
 484 02ae ED A5 03                		mov.L	12[r10], r5
 485 02b1 06 A1 0D A5 04          		xor	16[r10].L, r5
 486 02b6 ED A4 02                		mov.L	8[r10], r4
 487 02b9 53 45                   		and	r4, r5
 488 02bb 06 A1 0D A5 04          		xor	16[r10].L, r5
 489 02c0 ED A4 16                		mov.L	88[r10], r4
 490 02c3 AA 4C                   		mov.L	36[r4], r4
 491 02c5 E7 A4 0E                		mov.L	r4, 56[r10]
 492 02c8 ED A4 0E                		mov.L	56[r10], r4
 493 02cb FF 26 45                		add	r4, r5, r6
 494 02ce 66 52                   		mov.L	#5, r2
 495 02d0 ED A1 01                		mov.L	4[r10], r1
 496 02d3 05 00 00 00             		bsr	_rotlFixed
 497 02d7 EF 15                   		mov.L	r1, r5
 498 02d9 4B 65                   		add	r6, r5
 499 02db 70 55 99 79 82 5A       		add	#0x5a827999, r5
 500 02e1 EC A4                   		mov.L	[r10], r4
 501 02e3 4B 45                   		add	r4, r5
 502 02e5 E3 A5                   		mov.L	r5, [r10]
 503 02e7 75 42 1E                		mov.L	#30, r2
 504 02ea ED A1 02                		mov.L	8[r10], r1
 505 02ed 05 00 00 00             		bsr	_rotlFixed
 506 02f1 E7 A1 02                		mov.L	r1, 8[r10]
 507                             		.loc 2 486 45
 508 02f4 ED A5 02                		mov.L	8[r10], r5
 509 02f7 06 A1 0D A5 03          		xor	12[r10].L, r5
 510 02fc ED A4 01                		mov.L	4[r10], r4
 511 02ff 53 45                   		and	r4, r5
 512 0301 06 A1 0D A5 03          		xor	12[r10].L, r5
 513 0306 ED A4 16                		mov.L	88[r10], r4
 514 0309 AA C4                   		mov.L	40[r4], r4
 515 030b E7 A4 0F                		mov.L	r4, 60[r10]
 516 030e ED A4 0F                		mov.L	60[r10], r4
 517 0311 FF 26 45                		add	r4, r5, r6
 518 0314 66 52                   		mov.L	#5, r2
 519 0316 EC A1                   		mov.L	[r10], r1
 520 0318 05 00 00 00             		bsr	_rotlFixed
 521 031c EF 15                   		mov.L	r1, r5
 522 031e 4B 65                   		add	r6, r5
 523 0320 70 55 99 79 82 5A       		add	#0x5a827999, r5
 524 0326 ED A4 04                		mov.L	16[r10], r4
 525 0329 4B 45                   		add	r4, r5
 526 032b E7 A5 04                		mov.L	r5, 16[r10]
 527 032e 75 42 1E                		mov.L	#30, r2
 528 0331 ED A1 01                		mov.L	4[r10], r1
 529 0334 05 00 00 00             		bsr	_rotlFixed
 530 0338 E7 A1 01                		mov.L	r1, 4[r10]
 531                             		.loc 2 486 63
 532 033b ED A5 01                		mov.L	4[r10], r5
 533 033e 06 A1 0D A5 02          		xor	8[r10].L, r5
 534 0343 EC A4                   		mov.L	[r10], r4
 535 0345 53 45                   		and	r4, r5
 536 0347 06 A1 0D A5 02          		xor	8[r10].L, r5
 537 034c ED A4 16                		mov.L	88[r10], r4
 538 034f AA CC                   		mov.L	44[r4], r4
 539 0351 E7 A4 10                		mov.L	r4, 64[r10]
 540 0354 ED A4 10                		mov.L	64[r10], r4
 541 0357 FF 26 45                		add	r4, r5, r6
 542 035a 66 52                   		mov.L	#5, r2
 543 035c ED A1 04                		mov.L	16[r10], r1
 544 035f 05 00 00 00             		bsr	_rotlFixed
 545 0363 EF 15                   		mov.L	r1, r5
 546 0365 4B 65                   		add	r6, r5
 547 0367 70 55 99 79 82 5A       		add	#0x5a827999, r5
 548 036d ED A4 03                		mov.L	12[r10], r4
 549 0370 4B 45                   		add	r4, r5
 550 0372 E7 A5 03                		mov.L	r5, 12[r10]
 551 0375 75 42 1E                		mov.L	#30, r2
 552 0378 EC A1                   		mov.L	[r10], r1
 553 037a 05 00 00 00             		bsr	_rotlFixed
 554 037e E3 A1                   		mov.L	r1, [r10]
 487:../src/wolfcrypt/src/sha.c ****         R0(d,e,a,b,c,12); R0(c,d,e,a,b,13); R0(b,c,d,e,a,14); R0(a,b,c,d,e,15);
 555                             		.loc 2 487 9
 556 0380 EC A5                   		mov.L	[r10], r5
 557 0382 06 A1 0D A5 01          		xor	4[r10].L, r5
 558 0387 ED A4 04                		mov.L	16[r10], r4
 559 038a 53 45                   		and	r4, r5
 560 038c 06 A1 0D A5 01          		xor	4[r10].L, r5
 561 0391 ED A4 16                		mov.L	88[r10], r4
 562 0394 AB 44                   		mov.L	48[r4], r4
 563 0396 E7 A4 11                		mov.L	r4, 68[r10]
 564 0399 ED A4 11                		mov.L	68[r10], r4
 565 039c FF 26 45                		add	r4, r5, r6
 566 039f 66 52                   		mov.L	#5, r2
 567 03a1 ED A1 03                		mov.L	12[r10], r1
 568 03a4 05 00 00 00             		bsr	_rotlFixed
 569 03a8 EF 15                   		mov.L	r1, r5
 570 03aa 4B 65                   		add	r6, r5
 571 03ac 70 55 99 79 82 5A       		add	#0x5a827999, r5
 572 03b2 ED A4 02                		mov.L	8[r10], r4
 573 03b5 4B 45                   		add	r4, r5
 574 03b7 E7 A5 02                		mov.L	r5, 8[r10]
 575 03ba 75 42 1E                		mov.L	#30, r2
 576 03bd ED A1 04                		mov.L	16[r10], r1
 577 03c0 05 00 00 00             		bsr	_rotlFixed
 578 03c4 E7 A1 04                		mov.L	r1, 16[r10]
 579                             		.loc 2 487 27
 580 03c7 ED A5 04                		mov.L	16[r10], r5
 581 03ca 06 A0 0D A5             		xor	[r10].L, r5
 582 03ce ED A4 03                		mov.L	12[r10], r4
 583 03d1 53 45                   		and	r4, r5
 584 03d3 06 A0 0D A5             		xor	[r10].L, r5
 585 03d7 ED A4 16                		mov.L	88[r10], r4
 586 03da AB 4C                   		mov.L	52[r4], r4
 587 03dc E7 A4 12                		mov.L	r4, 72[r10]
 588 03df ED A4 12                		mov.L	72[r10], r4
 589 03e2 FF 26 45                		add	r4, r5, r6
 590 03e5 66 52                   		mov.L	#5, r2
 591 03e7 ED A1 02                		mov.L	8[r10], r1
 592 03ea 05 00 00 00             		bsr	_rotlFixed
 593 03ee EF 15                   		mov.L	r1, r5
 594 03f0 4B 65                   		add	r6, r5
 595 03f2 70 55 99 79 82 5A       		add	#0x5a827999, r5
 596 03f8 ED A4 01                		mov.L	4[r10], r4
 597 03fb 4B 45                   		add	r4, r5
 598 03fd E7 A5 01                		mov.L	r5, 4[r10]
 599 0400 75 42 1E                		mov.L	#30, r2
 600 0403 ED A1 03                		mov.L	12[r10], r1
 601 0406 05 00 00 00             		bsr	_rotlFixed
 602 040a E7 A1 03                		mov.L	r1, 12[r10]
 603                             		.loc 2 487 45
 604 040d ED A5 03                		mov.L	12[r10], r5
 605 0410 06 A1 0D A5 04          		xor	16[r10].L, r5
 606 0415 ED A4 02                		mov.L	8[r10], r4
 607 0418 53 45                   		and	r4, r5
 608 041a 06 A1 0D A5 04          		xor	16[r10].L, r5
 609 041f ED A4 16                		mov.L	88[r10], r4
 610 0422 AB C4                   		mov.L	56[r4], r4
 611 0424 E7 A4 13                		mov.L	r4, 76[r10]
 612 0427 ED A4 13                		mov.L	76[r10], r4
 613 042a FF 26 45                		add	r4, r5, r6
 614 042d 66 52                   		mov.L	#5, r2
 615 042f ED A1 01                		mov.L	4[r10], r1
 616 0432 05 00 00 00             		bsr	_rotlFixed
 617 0436 EF 15                   		mov.L	r1, r5
 618 0438 4B 65                   		add	r6, r5
 619 043a 70 55 99 79 82 5A       		add	#0x5a827999, r5
 620 0440 EC A4                   		mov.L	[r10], r4
 621 0442 4B 45                   		add	r4, r5
 622 0444 E3 A5                   		mov.L	r5, [r10]
 623 0446 75 42 1E                		mov.L	#30, r2
 624 0449 ED A1 02                		mov.L	8[r10], r1
 625 044c 05 00 00 00             		bsr	_rotlFixed
 626 0450 E7 A1 02                		mov.L	r1, 8[r10]
 627                             		.loc 2 487 63
 628 0453 ED A5 02                		mov.L	8[r10], r5
 629 0456 06 A1 0D A5 03          		xor	12[r10].L, r5
 630 045b ED A4 01                		mov.L	4[r10], r4
 631 045e 53 45                   		and	r4, r5
 632 0460 06 A1 0D A5 03          		xor	12[r10].L, r5
 633 0465 ED A4 16                		mov.L	88[r10], r4
 634 0468 AB CC                   		mov.L	60[r4], r4
 635 046a E7 A4 14                		mov.L	r4, 80[r10]
 636 046d ED A4 14                		mov.L	80[r10], r4
 637 0470 FF 26 45                		add	r4, r5, r6
 638 0473 66 52                   		mov.L	#5, r2
 639 0475 EC A1                   		mov.L	[r10], r1
 640 0477 05 00 00 00             		bsr	_rotlFixed
 641 047b EF 15                   		mov.L	r1, r5
 642 047d 4B 65                   		add	r6, r5
 643 047f 70 55 99 79 82 5A       		add	#0x5a827999, r5
 644 0485 ED A4 04                		mov.L	16[r10], r4
 645 0488 4B 45                   		add	r4, r5
 646 048a E7 A5 04                		mov.L	r5, 16[r10]
 647 048d 75 42 1E                		mov.L	#30, r2
 648 0490 ED A1 01                		mov.L	4[r10], r1
 649 0493 05 00 00 00             		bsr	_rotlFixed
 650 0497 E7 A1 01                		mov.L	r1, 4[r10]
 488:../src/wolfcrypt/src/sha.c **** 
 489:../src/wolfcrypt/src/sha.c ****         R1(e,a,b,c,d,16); R1(d,e,a,b,c,17); R1(c,d,e,a,b,18); R1(b,c,d,e,a,19);
 651                             		.loc 2 489 9
 652 049a ED A5 01                		mov.L	4[r10], r5
 653 049d 06 A1 0D A5 02          		xor	8[r10].L, r5
 654 04a2 EC A4                   		mov.L	[r10], r4
 655 04a4 53 45                   		and	r4, r5
 656 04a6 ED A6 02                		mov.L	8[r10], r6
 657 04a9 FC 37 56                		xor	r5, r6
 658 04ac ED A4 12                		mov.L	72[r10], r4
 659 04af ED A5 0D                		mov.L	52[r10], r5
 660 04b2 FC 37 45                		xor	r4, r5
 661 04b5 ED A4 07                		mov.L	28[r10], r4
 662 04b8 FC 37 45                		xor	r4, r5
 663 04bb ED A4 05                		mov.L	20[r10], r4
 664 04be FC 37 45                		xor	r4, r5
 665 04c1 66 12                   		mov.L	#1, r2
 666 04c3 EF 51                   		mov.L	r5, r1
 667 04c5 05 00 00 00             		bsr	_rotlFixed
 668 04c9 EF 15                   		mov.L	r1, r5
 669 04cb E7 A5 05                		mov.L	r5, 20[r10]
 670 04ce ED A5 05                		mov.L	20[r10], r5
 671 04d1 4B 56                   		add	r5, r6
 672 04d3 66 52                   		mov.L	#5, r2
 673 04d5 ED A1 04                		mov.L	16[r10], r1
 674 04d8 05 00 00 00             		bsr	_rotlFixed
 675 04dc EF 15                   		mov.L	r1, r5
 676 04de 4B 65                   		add	r6, r5
 677 04e0 70 55 99 79 82 5A       		add	#0x5a827999, r5
 678 04e6 ED A4 03                		mov.L	12[r10], r4
 679 04e9 4B 45                   		add	r4, r5
 680 04eb E7 A5 03                		mov.L	r5, 12[r10]
 681 04ee 75 42 1E                		mov.L	#30, r2
 682 04f1 EC A1                   		mov.L	[r10], r1
 683 04f3 05 00 00 00             		bsr	_rotlFixed
 684 04f7 E3 A1                   		mov.L	r1, [r10]
 685                             		.loc 2 489 27
 686 04f9 EC A5                   		mov.L	[r10], r5
 687 04fb 06 A1 0D A5 01          		xor	4[r10].L, r5
 688 0500 ED A4 04                		mov.L	16[r10], r4
 689 0503 53 45                   		and	r4, r5
 690 0505 ED A6 01                		mov.L	4[r10], r6
 691 0508 FC 37 56                		xor	r5, r6
 692 050b ED A4 13                		mov.L	76[r10], r4
 693 050e ED A5 0E                		mov.L	56[r10], r5
 694 0511 FC 37 45                		xor	r4, r5
 695 0514 ED A4 08                		mov.L	32[r10], r4
 696 0517 FC 37 45                		xor	r4, r5
 697 051a ED A4 06                		mov.L	24[r10], r4
 698 051d FC 37 45                		xor	r4, r5
 699 0520 66 12                   		mov.L	#1, r2
 700 0522 EF 51                   		mov.L	r5, r1
 701 0524 05 00 00 00             		bsr	_rotlFixed
 702 0528 EF 15                   		mov.L	r1, r5
 703 052a E7 A5 06                		mov.L	r5, 24[r10]
 704 052d ED A5 06                		mov.L	24[r10], r5
 705 0530 4B 56                   		add	r5, r6
 706 0532 66 52                   		mov.L	#5, r2
 707 0534 ED A1 03                		mov.L	12[r10], r1
 708 0537 05 00 00 00             		bsr	_rotlFixed
 709 053b EF 15                   		mov.L	r1, r5
 710 053d 4B 65                   		add	r6, r5
 711 053f 70 55 99 79 82 5A       		add	#0x5a827999, r5
 712 0545 ED A4 02                		mov.L	8[r10], r4
 713 0548 4B 45                   		add	r4, r5
 714 054a E7 A5 02                		mov.L	r5, 8[r10]
 715 054d 75 42 1E                		mov.L	#30, r2
 716 0550 ED A1 04                		mov.L	16[r10], r1
 717 0553 05 00 00 00             		bsr	_rotlFixed
 718 0557 E7 A1 04                		mov.L	r1, 16[r10]
 719                             		.loc 2 489 45
 720 055a ED A5 04                		mov.L	16[r10], r5
 721 055d 06 A0 0D A5             		xor	[r10].L, r5
 722 0561 ED A4 03                		mov.L	12[r10], r4
 723 0564 53 45                   		and	r4, r5
 724 0566 EC A6                   		mov.L	[r10], r6
 725 0568 FC 37 56                		xor	r5, r6
 726 056b ED A4 14                		mov.L	80[r10], r4
 727 056e ED A5 0F                		mov.L	60[r10], r5
 728 0571 FC 37 45                		xor	r4, r5
 729 0574 ED A4 09                		mov.L	36[r10], r4
 730 0577 FC 37 45                		xor	r4, r5
 731 057a ED A4 07                		mov.L	28[r10], r4
 732 057d FC 37 45                		xor	r4, r5
 733 0580 66 12                   		mov.L	#1, r2
 734 0582 EF 51                   		mov.L	r5, r1
 735 0584 05 00 00 00             		bsr	_rotlFixed
 736 0588 EF 15                   		mov.L	r1, r5
 737 058a E7 A5 07                		mov.L	r5, 28[r10]
 738 058d ED A5 07                		mov.L	28[r10], r5
 739 0590 4B 56                   		add	r5, r6
 740 0592 66 52                   		mov.L	#5, r2
 741 0594 ED A1 02                		mov.L	8[r10], r1
 742 0597 05 00 00 00             		bsr	_rotlFixed
 743 059b EF 15                   		mov.L	r1, r5
 744 059d 4B 65                   		add	r6, r5
 745 059f 70 55 99 79 82 5A       		add	#0x5a827999, r5
 746 05a5 ED A4 01                		mov.L	4[r10], r4
 747 05a8 4B 45                   		add	r4, r5
 748 05aa E7 A5 01                		mov.L	r5, 4[r10]
 749 05ad 75 42 1E                		mov.L	#30, r2
 750 05b0 ED A1 03                		mov.L	12[r10], r1
 751 05b3 05 00 00 00             		bsr	_rotlFixed
 752 05b7 E7 A1 03                		mov.L	r1, 12[r10]
 753                             		.loc 2 489 63
 754 05ba ED A5 03                		mov.L	12[r10], r5
 755 05bd 06 A1 0D A5 04          		xor	16[r10].L, r5
 756 05c2 ED A4 02                		mov.L	8[r10], r4
 757 05c5 53 45                   		and	r4, r5
 758 05c7 ED A6 04                		mov.L	16[r10], r6
 759 05ca FC 37 56                		xor	r5, r6
 760 05cd ED A4 05                		mov.L	20[r10], r4
 761 05d0 ED A5 10                		mov.L	64[r10], r5
 762 05d3 FC 37 45                		xor	r4, r5
 763 05d6 ED A4 0A                		mov.L	40[r10], r4
 764 05d9 FC 37 45                		xor	r4, r5
 765 05dc ED A4 08                		mov.L	32[r10], r4
 766 05df FC 37 45                		xor	r4, r5
 767 05e2 66 12                   		mov.L	#1, r2
 768 05e4 EF 51                   		mov.L	r5, r1
 769 05e6 05 00 00 00             		bsr	_rotlFixed
 770 05ea EF 15                   		mov.L	r1, r5
 771 05ec E7 A5 08                		mov.L	r5, 32[r10]
 772 05ef ED A5 08                		mov.L	32[r10], r5
 773 05f2 4B 56                   		add	r5, r6
 774 05f4 66 52                   		mov.L	#5, r2
 775 05f6 ED A1 01                		mov.L	4[r10], r1
 776 05f9 05 00 00 00             		bsr	_rotlFixed
 777 05fd EF 15                   		mov.L	r1, r5
 778 05ff 4B 65                   		add	r6, r5
 779 0601 70 55 99 79 82 5A       		add	#0x5a827999, r5
 780 0607 EC A4                   		mov.L	[r10], r4
 781 0609 4B 45                   		add	r4, r5
 782 060b E3 A5                   		mov.L	r5, [r10]
 783 060d 75 42 1E                		mov.L	#30, r2
 784 0610 ED A1 02                		mov.L	8[r10], r1
 785 0613 05 00 00 00             		bsr	_rotlFixed
 786 0617 E7 A1 02                		mov.L	r1, 8[r10]
 490:../src/wolfcrypt/src/sha.c **** 
 491:../src/wolfcrypt/src/sha.c ****         R2(a,b,c,d,e,20); R2(e,a,b,c,d,21); R2(d,e,a,b,c,22); R2(c,d,e,a,b,23);
 787                             		.loc 2 491 9
 788 061a ED A5 01                		mov.L	4[r10], r5
 789 061d 06 A1 0D A5 02          		xor	8[r10].L, r5
 790 0622 ED A6 03                		mov.L	12[r10], r6
 791 0625 FC 37 56                		xor	r5, r6
 792 0628 ED A4 06                		mov.L	24[r10], r4
 793 062b ED A5 11                		mov.L	68[r10], r5
 794 062e FC 37 45                		xor	r4, r5
 795 0631 ED A4 0B                		mov.L	44[r10], r4
 796 0634 FC 37 45                		xor	r4, r5
 797 0637 ED A4 09                		mov.L	36[r10], r4
 798 063a FC 37 45                		xor	r4, r5
 799 063d 66 12                   		mov.L	#1, r2
 800 063f EF 51                   		mov.L	r5, r1
 801 0641 05 00 00 00             		bsr	_rotlFixed
 802 0645 EF 15                   		mov.L	r1, r5
 803 0647 E7 A5 09                		mov.L	r5, 36[r10]
 804 064a ED A5 09                		mov.L	36[r10], r5
 805 064d 4B 56                   		add	r5, r6
 806 064f 66 52                   		mov.L	#5, r2
 807 0651 EC A1                   		mov.L	[r10], r1
 808 0653 05 00 00 00             		bsr	_rotlFixed
 809 0657 EF 15                   		mov.L	r1, r5
 810 0659 4B 65                   		add	r6, r5
 811 065b 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 812 0661 ED A4 04                		mov.L	16[r10], r4
 813 0664 4B 45                   		add	r4, r5
 814 0666 E7 A5 04                		mov.L	r5, 16[r10]
 815 0669 75 42 1E                		mov.L	#30, r2
 816 066c ED A1 01                		mov.L	4[r10], r1
 817 066f 05 00 00 00             		bsr	_rotlFixed
 818 0673 E7 A1 01                		mov.L	r1, 4[r10]
 819                             		.loc 2 491 27
 820 0676 EC A5                   		mov.L	[r10], r5
 821 0678 06 A1 0D A5 01          		xor	4[r10].L, r5
 822 067d ED A6 02                		mov.L	8[r10], r6
 823 0680 FC 37 56                		xor	r5, r6
 824 0683 ED A4 07                		mov.L	28[r10], r4
 825 0686 ED A5 12                		mov.L	72[r10], r5
 826 0689 FC 37 45                		xor	r4, r5
 827 068c ED A4 0C                		mov.L	48[r10], r4
 828 068f FC 37 45                		xor	r4, r5
 829 0692 ED A4 0A                		mov.L	40[r10], r4
 830 0695 FC 37 45                		xor	r4, r5
 831 0698 66 12                   		mov.L	#1, r2
 832 069a EF 51                   		mov.L	r5, r1
 833 069c 05 00 00 00             		bsr	_rotlFixed
 834 06a0 EF 15                   		mov.L	r1, r5
 835 06a2 E7 A5 0A                		mov.L	r5, 40[r10]
 836 06a5 ED A5 0A                		mov.L	40[r10], r5
 837 06a8 4B 56                   		add	r5, r6
 838 06aa 66 52                   		mov.L	#5, r2
 839 06ac ED A1 04                		mov.L	16[r10], r1
 840 06af 05 00 00 00             		bsr	_rotlFixed
 841 06b3 EF 15                   		mov.L	r1, r5
 842 06b5 4B 65                   		add	r6, r5
 843 06b7 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 844 06bd ED A4 03                		mov.L	12[r10], r4
 845 06c0 4B 45                   		add	r4, r5
 846 06c2 E7 A5 03                		mov.L	r5, 12[r10]
 847 06c5 75 42 1E                		mov.L	#30, r2
 848 06c8 EC A1                   		mov.L	[r10], r1
 849 06ca 05 00 00 00             		bsr	_rotlFixed
 850 06ce E3 A1                   		mov.L	r1, [r10]
 851                             		.loc 2 491 45
 852 06d0 ED A5 04                		mov.L	16[r10], r5
 853 06d3 06 A0 0D A5             		xor	[r10].L, r5
 854 06d7 ED A6 01                		mov.L	4[r10], r6
 855 06da FC 37 56                		xor	r5, r6
 856 06dd ED A4 08                		mov.L	32[r10], r4
 857 06e0 ED A5 13                		mov.L	76[r10], r5
 858 06e3 FC 37 45                		xor	r4, r5
 859 06e6 ED A4 0D                		mov.L	52[r10], r4
 860 06e9 FC 37 45                		xor	r4, r5
 861 06ec ED A4 0B                		mov.L	44[r10], r4
 862 06ef FC 37 45                		xor	r4, r5
 863 06f2 66 12                   		mov.L	#1, r2
 864 06f4 EF 51                   		mov.L	r5, r1
 865 06f6 05 00 00 00             		bsr	_rotlFixed
 866 06fa EF 15                   		mov.L	r1, r5
 867 06fc E7 A5 0B                		mov.L	r5, 44[r10]
 868 06ff ED A5 0B                		mov.L	44[r10], r5
 869 0702 4B 56                   		add	r5, r6
 870 0704 66 52                   		mov.L	#5, r2
 871 0706 ED A1 03                		mov.L	12[r10], r1
 872 0709 05 00 00 00             		bsr	_rotlFixed
 873 070d EF 15                   		mov.L	r1, r5
 874 070f 4B 65                   		add	r6, r5
 875 0711 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 876 0717 ED A4 02                		mov.L	8[r10], r4
 877 071a 4B 45                   		add	r4, r5
 878 071c E7 A5 02                		mov.L	r5, 8[r10]
 879 071f 75 42 1E                		mov.L	#30, r2
 880 0722 ED A1 04                		mov.L	16[r10], r1
 881 0725 05 00 00 00             		bsr	_rotlFixed
 882 0729 E7 A1 04                		mov.L	r1, 16[r10]
 883                             		.loc 2 491 63
 884 072c ED A5 03                		mov.L	12[r10], r5
 885 072f 06 A1 0D A5 04          		xor	16[r10].L, r5
 886 0734 EC A6                   		mov.L	[r10], r6
 887 0736 FC 37 56                		xor	r5, r6
 888 0739 ED A4 09                		mov.L	36[r10], r4
 889 073c ED A5 14                		mov.L	80[r10], r5
 890 073f FC 37 45                		xor	r4, r5
 891 0742 ED A4 0E                		mov.L	56[r10], r4
 892 0745 FC 37 45                		xor	r4, r5
 893 0748 ED A4 0C                		mov.L	48[r10], r4
 894 074b FC 37 45                		xor	r4, r5
 895 074e 66 12                   		mov.L	#1, r2
 896 0750 EF 51                   		mov.L	r5, r1
 897 0752 05 00 00 00             		bsr	_rotlFixed
 898 0756 EF 15                   		mov.L	r1, r5
 899 0758 E7 A5 0C                		mov.L	r5, 48[r10]
 900 075b ED A5 0C                		mov.L	48[r10], r5
 901 075e 4B 56                   		add	r5, r6
 902 0760 66 52                   		mov.L	#5, r2
 903 0762 ED A1 02                		mov.L	8[r10], r1
 904 0765 05 00 00 00             		bsr	_rotlFixed
 905 0769 EF 15                   		mov.L	r1, r5
 906 076b 4B 65                   		add	r6, r5
 907 076d 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 908 0773 ED A4 01                		mov.L	4[r10], r4
 909 0776 4B 45                   		add	r4, r5
 910 0778 E7 A5 01                		mov.L	r5, 4[r10]
 911 077b 75 42 1E                		mov.L	#30, r2
 912 077e ED A1 03                		mov.L	12[r10], r1
 913 0781 05 00 00 00             		bsr	_rotlFixed
 914 0785 E7 A1 03                		mov.L	r1, 12[r10]
 492:../src/wolfcrypt/src/sha.c ****         R2(b,c,d,e,a,24); R2(a,b,c,d,e,25); R2(e,a,b,c,d,26); R2(d,e,a,b,c,27);
 915                             		.loc 2 492 9
 916 0788 ED A5 02                		mov.L	8[r10], r5
 917 078b 06 A1 0D A5 03          		xor	12[r10].L, r5
 918 0790 ED A6 04                		mov.L	16[r10], r6
 919 0793 FC 37 56                		xor	r5, r6
 920 0796 ED A4 0A                		mov.L	40[r10], r4
 921 0799 ED A5 05                		mov.L	20[r10], r5
 922 079c FC 37 45                		xor	r4, r5
 923 079f ED A4 0F                		mov.L	60[r10], r4
 924 07a2 FC 37 45                		xor	r4, r5
 925 07a5 ED A4 0D                		mov.L	52[r10], r4
 926 07a8 FC 37 45                		xor	r4, r5
 927 07ab 66 12                   		mov.L	#1, r2
 928 07ad EF 51                   		mov.L	r5, r1
 929 07af 05 00 00 00             		bsr	_rotlFixed
 930 07b3 EF 15                   		mov.L	r1, r5
 931 07b5 E7 A5 0D                		mov.L	r5, 52[r10]
 932 07b8 ED A5 0D                		mov.L	52[r10], r5
 933 07bb 4B 56                   		add	r5, r6
 934 07bd 66 52                   		mov.L	#5, r2
 935 07bf ED A1 01                		mov.L	4[r10], r1
 936 07c2 05 00 00 00             		bsr	_rotlFixed
 937 07c6 EF 15                   		mov.L	r1, r5
 938 07c8 4B 65                   		add	r6, r5
 939 07ca 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 940 07d0 EC A4                   		mov.L	[r10], r4
 941 07d2 4B 45                   		add	r4, r5
 942 07d4 E3 A5                   		mov.L	r5, [r10]
 943 07d6 75 42 1E                		mov.L	#30, r2
 944 07d9 ED A1 02                		mov.L	8[r10], r1
 945 07dc 05 00 00 00             		bsr	_rotlFixed
 946 07e0 E7 A1 02                		mov.L	r1, 8[r10]
 947                             		.loc 2 492 27
 948 07e3 ED A5 01                		mov.L	4[r10], r5
 949 07e6 06 A1 0D A5 02          		xor	8[r10].L, r5
 950 07eb ED A6 03                		mov.L	12[r10], r6
 951 07ee FC 37 56                		xor	r5, r6
 952 07f1 ED A4 0B                		mov.L	44[r10], r4
 953 07f4 ED A5 06                		mov.L	24[r10], r5
 954 07f7 FC 37 45                		xor	r4, r5
 955 07fa ED A4 10                		mov.L	64[r10], r4
 956 07fd FC 37 45                		xor	r4, r5
 957 0800 ED A4 0E                		mov.L	56[r10], r4
 958 0803 FC 37 45                		xor	r4, r5
 959 0806 66 12                   		mov.L	#1, r2
 960 0808 EF 51                   		mov.L	r5, r1
 961 080a 05 00 00 00             		bsr	_rotlFixed
 962 080e EF 15                   		mov.L	r1, r5
 963 0810 E7 A5 0E                		mov.L	r5, 56[r10]
 964 0813 ED A5 0E                		mov.L	56[r10], r5
 965 0816 4B 56                   		add	r5, r6
 966 0818 66 52                   		mov.L	#5, r2
 967 081a EC A1                   		mov.L	[r10], r1
 968 081c 05 00 00 00             		bsr	_rotlFixed
 969 0820 EF 15                   		mov.L	r1, r5
 970 0822 4B 65                   		add	r6, r5
 971 0824 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 972 082a ED A4 04                		mov.L	16[r10], r4
 973 082d 4B 45                   		add	r4, r5
 974 082f E7 A5 04                		mov.L	r5, 16[r10]
 975 0832 75 42 1E                		mov.L	#30, r2
 976 0835 ED A1 01                		mov.L	4[r10], r1
 977 0838 05 00 00 00             		bsr	_rotlFixed
 978 083c E7 A1 01                		mov.L	r1, 4[r10]
 979                             		.loc 2 492 45
 980 083f EC A5                   		mov.L	[r10], r5
 981 0841 06 A1 0D A5 01          		xor	4[r10].L, r5
 982 0846 ED A6 02                		mov.L	8[r10], r6
 983 0849 FC 37 56                		xor	r5, r6
 984 084c ED A4 0C                		mov.L	48[r10], r4
 985 084f ED A5 07                		mov.L	28[r10], r5
 986 0852 FC 37 45                		xor	r4, r5
 987 0855 ED A4 11                		mov.L	68[r10], r4
 988 0858 FC 37 45                		xor	r4, r5
 989 085b ED A4 0F                		mov.L	60[r10], r4
 990 085e FC 37 45                		xor	r4, r5
 991 0861 66 12                   		mov.L	#1, r2
 992 0863 EF 51                   		mov.L	r5, r1
 993 0865 05 00 00 00             		bsr	_rotlFixed
 994 0869 EF 15                   		mov.L	r1, r5
 995 086b E7 A5 0F                		mov.L	r5, 60[r10]
 996 086e ED A5 0F                		mov.L	60[r10], r5
 997 0871 4B 56                   		add	r5, r6
 998 0873 66 52                   		mov.L	#5, r2
 999 0875 ED A1 04                		mov.L	16[r10], r1
 1000 0878 05 00 00 00             		bsr	_rotlFixed
 1001 087c EF 15                   		mov.L	r1, r5
 1002 087e 4B 65                   		add	r6, r5
 1003 0880 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1004 0886 ED A4 03                		mov.L	12[r10], r4
 1005 0889 4B 45                   		add	r4, r5
 1006 088b E7 A5 03                		mov.L	r5, 12[r10]
 1007 088e 75 42 1E                		mov.L	#30, r2
 1008 0891 EC A1                   		mov.L	[r10], r1
 1009 0893 05 00 00 00             		bsr	_rotlFixed
 1010 0897 E3 A1                   		mov.L	r1, [r10]
 1011                             		.loc 2 492 63
 1012 0899 ED A5 04                		mov.L	16[r10], r5
 1013 089c 06 A0 0D A5             		xor	[r10].L, r5
 1014 08a0 ED A6 01                		mov.L	4[r10], r6
 1015 08a3 FC 37 56                		xor	r5, r6
 1016 08a6 ED A4 0D                		mov.L	52[r10], r4
 1017 08a9 ED A5 08                		mov.L	32[r10], r5
 1018 08ac FC 37 45                		xor	r4, r5
 1019 08af ED A4 12                		mov.L	72[r10], r4
 1020 08b2 FC 37 45                		xor	r4, r5
 1021 08b5 ED A4 10                		mov.L	64[r10], r4
 1022 08b8 FC 37 45                		xor	r4, r5
 1023 08bb 66 12                   		mov.L	#1, r2
 1024 08bd EF 51                   		mov.L	r5, r1
 1025 08bf 05 00 00 00             		bsr	_rotlFixed
 1026 08c3 EF 15                   		mov.L	r1, r5
 1027 08c5 E7 A5 10                		mov.L	r5, 64[r10]
 1028 08c8 ED A5 10                		mov.L	64[r10], r5
 1029 08cb 4B 56                   		add	r5, r6
 1030 08cd 66 52                   		mov.L	#5, r2
 1031 08cf ED A1 03                		mov.L	12[r10], r1
 1032 08d2 05 00 00 00             		bsr	_rotlFixed
 1033 08d6 EF 15                   		mov.L	r1, r5
 1034 08d8 4B 65                   		add	r6, r5
 1035 08da 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1036 08e0 ED A4 02                		mov.L	8[r10], r4
 1037 08e3 4B 45                   		add	r4, r5
 1038 08e5 E7 A5 02                		mov.L	r5, 8[r10]
 1039 08e8 75 42 1E                		mov.L	#30, r2
 1040 08eb ED A1 04                		mov.L	16[r10], r1
 1041 08ee 05 00 00 00             		bsr	_rotlFixed
 1042 08f2 E7 A1 04                		mov.L	r1, 16[r10]
 493:../src/wolfcrypt/src/sha.c ****         R2(c,d,e,a,b,28); R2(b,c,d,e,a,29); R2(a,b,c,d,e,30); R2(e,a,b,c,d,31);
 1043                             		.loc 2 493 9
 1044 08f5 ED A5 03                		mov.L	12[r10], r5
 1045 08f8 06 A1 0D A5 04          		xor	16[r10].L, r5
 1046 08fd EC A6                   		mov.L	[r10], r6
 1047 08ff FC 37 56                		xor	r5, r6
 1048 0902 ED A4 0E                		mov.L	56[r10], r4
 1049 0905 ED A5 09                		mov.L	36[r10], r5
 1050 0908 FC 37 45                		xor	r4, r5
 1051 090b ED A4 13                		mov.L	76[r10], r4
 1052 090e FC 37 45                		xor	r4, r5
 1053 0911 ED A4 11                		mov.L	68[r10], r4
 1054 0914 FC 37 45                		xor	r4, r5
 1055 0917 66 12                   		mov.L	#1, r2
 1056 0919 EF 51                   		mov.L	r5, r1
 1057 091b 05 00 00 00             		bsr	_rotlFixed
 1058 091f EF 15                   		mov.L	r1, r5
 1059 0921 E7 A5 11                		mov.L	r5, 68[r10]
 1060 0924 ED A5 11                		mov.L	68[r10], r5
 1061 0927 4B 56                   		add	r5, r6
 1062 0929 66 52                   		mov.L	#5, r2
 1063 092b ED A1 02                		mov.L	8[r10], r1
 1064 092e 05 00 00 00             		bsr	_rotlFixed
 1065 0932 EF 15                   		mov.L	r1, r5
 1066 0934 4B 65                   		add	r6, r5
 1067 0936 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1068 093c ED A4 01                		mov.L	4[r10], r4
 1069 093f 4B 45                   		add	r4, r5
 1070 0941 E7 A5 01                		mov.L	r5, 4[r10]
 1071 0944 75 42 1E                		mov.L	#30, r2
 1072 0947 ED A1 03                		mov.L	12[r10], r1
 1073 094a 05 00 00 00             		bsr	_rotlFixed
 1074 094e E7 A1 03                		mov.L	r1, 12[r10]
 1075                             		.loc 2 493 27
 1076 0951 ED A5 02                		mov.L	8[r10], r5
 1077 0954 06 A1 0D A5 03          		xor	12[r10].L, r5
 1078 0959 ED A6 04                		mov.L	16[r10], r6
 1079 095c FC 37 56                		xor	r5, r6
 1080 095f ED A4 0F                		mov.L	60[r10], r4
 1081 0962 ED A5 0A                		mov.L	40[r10], r5
 1082 0965 FC 37 45                		xor	r4, r5
 1083 0968 ED A4 14                		mov.L	80[r10], r4
 1084 096b FC 37 45                		xor	r4, r5
 1085 096e ED A4 12                		mov.L	72[r10], r4
 1086 0971 FC 37 45                		xor	r4, r5
 1087 0974 66 12                   		mov.L	#1, r2
 1088 0976 EF 51                   		mov.L	r5, r1
 1089 0978 05 00 00 00             		bsr	_rotlFixed
 1090 097c EF 15                   		mov.L	r1, r5
 1091 097e E7 A5 12                		mov.L	r5, 72[r10]
 1092 0981 ED A5 12                		mov.L	72[r10], r5
 1093 0984 4B 56                   		add	r5, r6
 1094 0986 66 52                   		mov.L	#5, r2
 1095 0988 ED A1 01                		mov.L	4[r10], r1
 1096 098b 05 00 00 00             		bsr	_rotlFixed
 1097 098f EF 15                   		mov.L	r1, r5
 1098 0991 4B 65                   		add	r6, r5
 1099 0993 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1100 0999 EC A4                   		mov.L	[r10], r4
 1101 099b 4B 45                   		add	r4, r5
 1102 099d E3 A5                   		mov.L	r5, [r10]
 1103 099f 75 42 1E                		mov.L	#30, r2
 1104 09a2 ED A1 02                		mov.L	8[r10], r1
 1105 09a5 05 00 00 00             		bsr	_rotlFixed
 1106 09a9 E7 A1 02                		mov.L	r1, 8[r10]
 1107                             		.loc 2 493 45
 1108 09ac ED A5 01                		mov.L	4[r10], r5
 1109 09af 06 A1 0D A5 02          		xor	8[r10].L, r5
 1110 09b4 ED A6 03                		mov.L	12[r10], r6
 1111 09b7 FC 37 56                		xor	r5, r6
 1112 09ba ED A4 10                		mov.L	64[r10], r4
 1113 09bd ED A5 0B                		mov.L	44[r10], r5
 1114 09c0 FC 37 45                		xor	r4, r5
 1115 09c3 ED A4 05                		mov.L	20[r10], r4
 1116 09c6 FC 37 45                		xor	r4, r5
 1117 09c9 ED A4 13                		mov.L	76[r10], r4
 1118 09cc FC 37 45                		xor	r4, r5
 1119 09cf 66 12                   		mov.L	#1, r2
 1120 09d1 EF 51                   		mov.L	r5, r1
 1121 09d3 05 00 00 00             		bsr	_rotlFixed
 1122 09d7 EF 15                   		mov.L	r1, r5
 1123 09d9 E7 A5 13                		mov.L	r5, 76[r10]
 1124 09dc ED A5 13                		mov.L	76[r10], r5
 1125 09df 4B 56                   		add	r5, r6
 1126 09e1 66 52                   		mov.L	#5, r2
 1127 09e3 EC A1                   		mov.L	[r10], r1
 1128 09e5 05 00 00 00             		bsr	_rotlFixed
 1129 09e9 EF 15                   		mov.L	r1, r5
 1130 09eb 4B 65                   		add	r6, r5
 1131 09ed 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1132 09f3 ED A4 04                		mov.L	16[r10], r4
 1133 09f6 4B 45                   		add	r4, r5
 1134 09f8 E7 A5 04                		mov.L	r5, 16[r10]
 1135 09fb 75 42 1E                		mov.L	#30, r2
 1136 09fe ED A1 01                		mov.L	4[r10], r1
 1137 0a01 05 00 00 00             		bsr	_rotlFixed
 1138 0a05 E7 A1 01                		mov.L	r1, 4[r10]
 1139                             		.loc 2 493 63
 1140 0a08 EC A5                   		mov.L	[r10], r5
 1141 0a0a 06 A1 0D A5 01          		xor	4[r10].L, r5
 1142 0a0f ED A6 02                		mov.L	8[r10], r6
 1143 0a12 FC 37 56                		xor	r5, r6
 1144 0a15 ED A4 11                		mov.L	68[r10], r4
 1145 0a18 ED A5 0C                		mov.L	48[r10], r5
 1146 0a1b FC 37 45                		xor	r4, r5
 1147 0a1e ED A4 06                		mov.L	24[r10], r4
 1148 0a21 FC 37 45                		xor	r4, r5
 1149 0a24 ED A4 14                		mov.L	80[r10], r4
 1150 0a27 FC 37 45                		xor	r4, r5
 1151 0a2a 66 12                   		mov.L	#1, r2
 1152 0a2c EF 51                   		mov.L	r5, r1
 1153 0a2e 05 00 00 00             		bsr	_rotlFixed
 1154 0a32 EF 15                   		mov.L	r1, r5
 1155 0a34 E7 A5 14                		mov.L	r5, 80[r10]
 1156 0a37 ED A5 14                		mov.L	80[r10], r5
 1157 0a3a 4B 56                   		add	r5, r6
 1158 0a3c 66 52                   		mov.L	#5, r2
 1159 0a3e ED A1 04                		mov.L	16[r10], r1
 1160 0a41 05 00 00 00             		bsr	_rotlFixed
 1161 0a45 EF 15                   		mov.L	r1, r5
 1162 0a47 4B 65                   		add	r6, r5
 1163 0a49 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1164 0a4f ED A4 03                		mov.L	12[r10], r4
 1165 0a52 4B 45                   		add	r4, r5
 1166 0a54 E7 A5 03                		mov.L	r5, 12[r10]
 1167 0a57 75 42 1E                		mov.L	#30, r2
 1168 0a5a EC A1                   		mov.L	[r10], r1
 1169 0a5c 05 00 00 00             		bsr	_rotlFixed
 1170 0a60 E3 A1                   		mov.L	r1, [r10]
 494:../src/wolfcrypt/src/sha.c ****         R2(d,e,a,b,c,32); R2(c,d,e,a,b,33); R2(b,c,d,e,a,34); R2(a,b,c,d,e,35);
 1171                             		.loc 2 494 9
 1172 0a62 ED A5 04                		mov.L	16[r10], r5
 1173 0a65 06 A0 0D A5             		xor	[r10].L, r5
 1174 0a69 ED A6 01                		mov.L	4[r10], r6
 1175 0a6c FC 37 56                		xor	r5, r6
 1176 0a6f ED A4 12                		mov.L	72[r10], r4
 1177 0a72 ED A5 0D                		mov.L	52[r10], r5
 1178 0a75 FC 37 45                		xor	r4, r5
 1179 0a78 ED A4 07                		mov.L	28[r10], r4
 1180 0a7b FC 37 45                		xor	r4, r5
 1181 0a7e ED A4 05                		mov.L	20[r10], r4
 1182 0a81 FC 37 45                		xor	r4, r5
 1183 0a84 66 12                   		mov.L	#1, r2
 1184 0a86 EF 51                   		mov.L	r5, r1
 1185 0a88 05 00 00 00             		bsr	_rotlFixed
 1186 0a8c EF 15                   		mov.L	r1, r5
 1187 0a8e E7 A5 05                		mov.L	r5, 20[r10]
 1188 0a91 ED A5 05                		mov.L	20[r10], r5
 1189 0a94 4B 56                   		add	r5, r6
 1190 0a96 66 52                   		mov.L	#5, r2
 1191 0a98 ED A1 03                		mov.L	12[r10], r1
 1192 0a9b 05 00 00 00             		bsr	_rotlFixed
 1193 0a9f EF 15                   		mov.L	r1, r5
 1194 0aa1 4B 65                   		add	r6, r5
 1195 0aa3 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1196 0aa9 ED A4 02                		mov.L	8[r10], r4
 1197 0aac 4B 45                   		add	r4, r5
 1198 0aae E7 A5 02                		mov.L	r5, 8[r10]
 1199 0ab1 75 42 1E                		mov.L	#30, r2
 1200 0ab4 ED A1 04                		mov.L	16[r10], r1
 1201 0ab7 05 00 00 00             		bsr	_rotlFixed
 1202 0abb E7 A1 04                		mov.L	r1, 16[r10]
 1203                             		.loc 2 494 27
 1204 0abe ED A5 03                		mov.L	12[r10], r5
 1205 0ac1 06 A1 0D A5 04          		xor	16[r10].L, r5
 1206 0ac6 EC A6                   		mov.L	[r10], r6
 1207 0ac8 FC 37 56                		xor	r5, r6
 1208 0acb ED A4 13                		mov.L	76[r10], r4
 1209 0ace ED A5 0E                		mov.L	56[r10], r5
 1210 0ad1 FC 37 45                		xor	r4, r5
 1211 0ad4 ED A4 08                		mov.L	32[r10], r4
 1212 0ad7 FC 37 45                		xor	r4, r5
 1213 0ada ED A4 06                		mov.L	24[r10], r4
 1214 0add FC 37 45                		xor	r4, r5
 1215 0ae0 66 12                   		mov.L	#1, r2
 1216 0ae2 EF 51                   		mov.L	r5, r1
 1217 0ae4 05 00 00 00             		bsr	_rotlFixed
 1218 0ae8 EF 15                   		mov.L	r1, r5
 1219 0aea E7 A5 06                		mov.L	r5, 24[r10]
 1220 0aed ED A5 06                		mov.L	24[r10], r5
 1221 0af0 4B 56                   		add	r5, r6
 1222 0af2 66 52                   		mov.L	#5, r2
 1223 0af4 ED A1 02                		mov.L	8[r10], r1
 1224 0af7 05 00 00 00             		bsr	_rotlFixed
 1225 0afb EF 15                   		mov.L	r1, r5
 1226 0afd 4B 65                   		add	r6, r5
 1227 0aff 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1228 0b05 ED A4 01                		mov.L	4[r10], r4
 1229 0b08 4B 45                   		add	r4, r5
 1230 0b0a E7 A5 01                		mov.L	r5, 4[r10]
 1231 0b0d 75 42 1E                		mov.L	#30, r2
 1232 0b10 ED A1 03                		mov.L	12[r10], r1
 1233 0b13 05 00 00 00             		bsr	_rotlFixed
 1234 0b17 E7 A1 03                		mov.L	r1, 12[r10]
 1235                             		.loc 2 494 45
 1236 0b1a ED A5 02                		mov.L	8[r10], r5
 1237 0b1d 06 A1 0D A5 03          		xor	12[r10].L, r5
 1238 0b22 ED A6 04                		mov.L	16[r10], r6
 1239 0b25 FC 37 56                		xor	r5, r6
 1240 0b28 ED A4 14                		mov.L	80[r10], r4
 1241 0b2b ED A5 0F                		mov.L	60[r10], r5
 1242 0b2e FC 37 45                		xor	r4, r5
 1243 0b31 ED A4 09                		mov.L	36[r10], r4
 1244 0b34 FC 37 45                		xor	r4, r5
 1245 0b37 ED A4 07                		mov.L	28[r10], r4
 1246 0b3a FC 37 45                		xor	r4, r5
 1247 0b3d 66 12                   		mov.L	#1, r2
 1248 0b3f EF 51                   		mov.L	r5, r1
 1249 0b41 05 00 00 00             		bsr	_rotlFixed
 1250 0b45 EF 15                   		mov.L	r1, r5
 1251 0b47 E7 A5 07                		mov.L	r5, 28[r10]
 1252 0b4a ED A5 07                		mov.L	28[r10], r5
 1253 0b4d 4B 56                   		add	r5, r6
 1254 0b4f 66 52                   		mov.L	#5, r2
 1255 0b51 ED A1 01                		mov.L	4[r10], r1
 1256 0b54 05 00 00 00             		bsr	_rotlFixed
 1257 0b58 EF 15                   		mov.L	r1, r5
 1258 0b5a 4B 65                   		add	r6, r5
 1259 0b5c 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1260 0b62 EC A4                   		mov.L	[r10], r4
 1261 0b64 4B 45                   		add	r4, r5
 1262 0b66 E3 A5                   		mov.L	r5, [r10]
 1263 0b68 75 42 1E                		mov.L	#30, r2
 1264 0b6b ED A1 02                		mov.L	8[r10], r1
 1265 0b6e 05 00 00 00             		bsr	_rotlFixed
 1266 0b72 E7 A1 02                		mov.L	r1, 8[r10]
 1267                             		.loc 2 494 63
 1268 0b75 ED A5 01                		mov.L	4[r10], r5
 1269 0b78 06 A1 0D A5 02          		xor	8[r10].L, r5
 1270 0b7d ED A6 03                		mov.L	12[r10], r6
 1271 0b80 FC 37 56                		xor	r5, r6
 1272 0b83 ED A4 05                		mov.L	20[r10], r4
 1273 0b86 ED A5 10                		mov.L	64[r10], r5
 1274 0b89 FC 37 45                		xor	r4, r5
 1275 0b8c ED A4 0A                		mov.L	40[r10], r4
 1276 0b8f FC 37 45                		xor	r4, r5
 1277 0b92 ED A4 08                		mov.L	32[r10], r4
 1278 0b95 FC 37 45                		xor	r4, r5
 1279 0b98 66 12                   		mov.L	#1, r2
 1280 0b9a EF 51                   		mov.L	r5, r1
 1281 0b9c 05 00 00 00             		bsr	_rotlFixed
 1282 0ba0 EF 15                   		mov.L	r1, r5
 1283 0ba2 E7 A5 08                		mov.L	r5, 32[r10]
 1284 0ba5 ED A5 08                		mov.L	32[r10], r5
 1285 0ba8 4B 56                   		add	r5, r6
 1286 0baa 66 52                   		mov.L	#5, r2
 1287 0bac EC A1                   		mov.L	[r10], r1
 1288 0bae 05 00 00 00             		bsr	_rotlFixed
 1289 0bb2 EF 15                   		mov.L	r1, r5
 1290 0bb4 4B 65                   		add	r6, r5
 1291 0bb6 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1292 0bbc ED A4 04                		mov.L	16[r10], r4
 1293 0bbf 4B 45                   		add	r4, r5
 1294 0bc1 E7 A5 04                		mov.L	r5, 16[r10]
 1295 0bc4 75 42 1E                		mov.L	#30, r2
 1296 0bc7 ED A1 01                		mov.L	4[r10], r1
 1297 0bca 05 00 00 00             		bsr	_rotlFixed
 1298 0bce E7 A1 01                		mov.L	r1, 4[r10]
 495:../src/wolfcrypt/src/sha.c ****         R2(e,a,b,c,d,36); R2(d,e,a,b,c,37); R2(c,d,e,a,b,38); R2(b,c,d,e,a,39);
 1299                             		.loc 2 495 9
 1300 0bd1 EC A5                   		mov.L	[r10], r5
 1301 0bd3 06 A1 0D A5 01          		xor	4[r10].L, r5
 1302 0bd8 ED A6 02                		mov.L	8[r10], r6
 1303 0bdb FC 37 56                		xor	r5, r6
 1304 0bde ED A4 06                		mov.L	24[r10], r4
 1305 0be1 ED A5 11                		mov.L	68[r10], r5
 1306 0be4 FC 37 45                		xor	r4, r5
 1307 0be7 ED A4 0B                		mov.L	44[r10], r4
 1308 0bea FC 37 45                		xor	r4, r5
 1309 0bed ED A4 09                		mov.L	36[r10], r4
 1310 0bf0 FC 37 45                		xor	r4, r5
 1311 0bf3 66 12                   		mov.L	#1, r2
 1312 0bf5 EF 51                   		mov.L	r5, r1
 1313 0bf7 05 00 00 00             		bsr	_rotlFixed
 1314 0bfb EF 15                   		mov.L	r1, r5
 1315 0bfd E7 A5 09                		mov.L	r5, 36[r10]
 1316 0c00 ED A5 09                		mov.L	36[r10], r5
 1317 0c03 4B 56                   		add	r5, r6
 1318 0c05 66 52                   		mov.L	#5, r2
 1319 0c07 ED A1 04                		mov.L	16[r10], r1
 1320 0c0a 05 00 00 00             		bsr	_rotlFixed
 1321 0c0e EF 15                   		mov.L	r1, r5
 1322 0c10 4B 65                   		add	r6, r5
 1323 0c12 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1324 0c18 ED A4 03                		mov.L	12[r10], r4
 1325 0c1b 4B 45                   		add	r4, r5
 1326 0c1d E7 A5 03                		mov.L	r5, 12[r10]
 1327 0c20 75 42 1E                		mov.L	#30, r2
 1328 0c23 EC A1                   		mov.L	[r10], r1
 1329 0c25 05 00 00 00             		bsr	_rotlFixed
 1330 0c29 E3 A1                   		mov.L	r1, [r10]
 1331                             		.loc 2 495 27
 1332 0c2b ED A5 04                		mov.L	16[r10], r5
 1333 0c2e 06 A0 0D A5             		xor	[r10].L, r5
 1334 0c32 ED A6 01                		mov.L	4[r10], r6
 1335 0c35 FC 37 56                		xor	r5, r6
 1336 0c38 ED A4 07                		mov.L	28[r10], r4
 1337 0c3b ED A5 12                		mov.L	72[r10], r5
 1338 0c3e FC 37 45                		xor	r4, r5
 1339 0c41 ED A4 0C                		mov.L	48[r10], r4
 1340 0c44 FC 37 45                		xor	r4, r5
 1341 0c47 ED A4 0A                		mov.L	40[r10], r4
 1342 0c4a FC 37 45                		xor	r4, r5
 1343 0c4d 66 12                   		mov.L	#1, r2
 1344 0c4f EF 51                   		mov.L	r5, r1
 1345 0c51 05 00 00 00             		bsr	_rotlFixed
 1346 0c55 EF 15                   		mov.L	r1, r5
 1347 0c57 E7 A5 0A                		mov.L	r5, 40[r10]
 1348 0c5a ED A5 0A                		mov.L	40[r10], r5
 1349 0c5d 4B 56                   		add	r5, r6
 1350 0c5f 66 52                   		mov.L	#5, r2
 1351 0c61 ED A1 03                		mov.L	12[r10], r1
 1352 0c64 05 00 00 00             		bsr	_rotlFixed
 1353 0c68 EF 15                   		mov.L	r1, r5
 1354 0c6a 4B 65                   		add	r6, r5
 1355 0c6c 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1356 0c72 ED A4 02                		mov.L	8[r10], r4
 1357 0c75 4B 45                   		add	r4, r5
 1358 0c77 E7 A5 02                		mov.L	r5, 8[r10]
 1359 0c7a 75 42 1E                		mov.L	#30, r2
 1360 0c7d ED A1 04                		mov.L	16[r10], r1
 1361 0c80 05 00 00 00             		bsr	_rotlFixed
 1362 0c84 E7 A1 04                		mov.L	r1, 16[r10]
 1363                             		.loc 2 495 45
 1364 0c87 ED A5 03                		mov.L	12[r10], r5
 1365 0c8a 06 A1 0D A5 04          		xor	16[r10].L, r5
 1366 0c8f EC A6                   		mov.L	[r10], r6
 1367 0c91 FC 37 56                		xor	r5, r6
 1368 0c94 ED A4 08                		mov.L	32[r10], r4
 1369 0c97 ED A5 13                		mov.L	76[r10], r5
 1370 0c9a FC 37 45                		xor	r4, r5
 1371 0c9d ED A4 0D                		mov.L	52[r10], r4
 1372 0ca0 FC 37 45                		xor	r4, r5
 1373 0ca3 ED A4 0B                		mov.L	44[r10], r4
 1374 0ca6 FC 37 45                		xor	r4, r5
 1375 0ca9 66 12                   		mov.L	#1, r2
 1376 0cab EF 51                   		mov.L	r5, r1
 1377 0cad 05 00 00 00             		bsr	_rotlFixed
 1378 0cb1 EF 15                   		mov.L	r1, r5
 1379 0cb3 E7 A5 0B                		mov.L	r5, 44[r10]
 1380 0cb6 ED A5 0B                		mov.L	44[r10], r5
 1381 0cb9 4B 56                   		add	r5, r6
 1382 0cbb 66 52                   		mov.L	#5, r2
 1383 0cbd ED A1 02                		mov.L	8[r10], r1
 1384 0cc0 05 00 00 00             		bsr	_rotlFixed
 1385 0cc4 EF 15                   		mov.L	r1, r5
 1386 0cc6 4B 65                   		add	r6, r5
 1387 0cc8 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1388 0cce ED A4 01                		mov.L	4[r10], r4
 1389 0cd1 4B 45                   		add	r4, r5
 1390 0cd3 E7 A5 01                		mov.L	r5, 4[r10]
 1391 0cd6 75 42 1E                		mov.L	#30, r2
 1392 0cd9 ED A1 03                		mov.L	12[r10], r1
 1393 0cdc 05 00 00 00             		bsr	_rotlFixed
 1394 0ce0 E7 A1 03                		mov.L	r1, 12[r10]
 1395                             		.loc 2 495 63
 1396 0ce3 ED A5 02                		mov.L	8[r10], r5
 1397 0ce6 06 A1 0D A5 03          		xor	12[r10].L, r5
 1398 0ceb ED A6 04                		mov.L	16[r10], r6
 1399 0cee FC 37 56                		xor	r5, r6
 1400 0cf1 ED A4 09                		mov.L	36[r10], r4
 1401 0cf4 ED A5 14                		mov.L	80[r10], r5
 1402 0cf7 FC 37 45                		xor	r4, r5
 1403 0cfa ED A4 0E                		mov.L	56[r10], r4
 1404 0cfd FC 37 45                		xor	r4, r5
 1405 0d00 ED A4 0C                		mov.L	48[r10], r4
 1406 0d03 FC 37 45                		xor	r4, r5
 1407 0d06 66 12                   		mov.L	#1, r2
 1408 0d08 EF 51                   		mov.L	r5, r1
 1409 0d0a 05 00 00 00             		bsr	_rotlFixed
 1410 0d0e EF 15                   		mov.L	r1, r5
 1411 0d10 E7 A5 0C                		mov.L	r5, 48[r10]
 1412 0d13 ED A5 0C                		mov.L	48[r10], r5
 1413 0d16 4B 56                   		add	r5, r6
 1414 0d18 66 52                   		mov.L	#5, r2
 1415 0d1a ED A1 01                		mov.L	4[r10], r1
 1416 0d1d 05 00 00 00             		bsr	_rotlFixed
 1417 0d21 EF 15                   		mov.L	r1, r5
 1418 0d23 4B 65                   		add	r6, r5
 1419 0d25 70 55 A1 EB D9 6E       		add	#0x6ed9eba1, r5
 1420 0d2b EC A4                   		mov.L	[r10], r4
 1421 0d2d 4B 45                   		add	r4, r5
 1422 0d2f E3 A5                   		mov.L	r5, [r10]
 1423 0d31 75 42 1E                		mov.L	#30, r2
 1424 0d34 ED A1 02                		mov.L	8[r10], r1
 1425 0d37 05 00 00 00             		bsr	_rotlFixed
 1426 0d3b E7 A1 02                		mov.L	r1, 8[r10]
 496:../src/wolfcrypt/src/sha.c **** 
 497:../src/wolfcrypt/src/sha.c ****         R3(a,b,c,d,e,40); R3(e,a,b,c,d,41); R3(d,e,a,b,c,42); R3(c,d,e,a,b,43);
 1427                             		.loc 2 497 9
 1428 0d3e ED A4 01                		mov.L	4[r10], r4
 1429 0d41 ED A5 02                		mov.L	8[r10], r5
 1430 0d44 53 54                   		and	r5, r4
 1431 0d46 ED A3 01                		mov.L	4[r10], r3
 1432 0d49 ED A5 02                		mov.L	8[r10], r5
 1433 0d4c 57 35                   		or	r3, r5
 1434 0d4e ED A3 03                		mov.L	12[r10], r3
 1435 0d51 53 35                   		and	r3, r5
 1436 0d53 FF 56 54                		or	r5, r4, r6
 1437 0d56 ED A4 0A                		mov.L	40[r10], r4
 1438 0d59 ED A5 05                		mov.L	20[r10], r5
 1439 0d5c FC 37 45                		xor	r4, r5
 1440 0d5f ED A4 0F                		mov.L	60[r10], r4
 1441 0d62 FC 37 45                		xor	r4, r5
 1442 0d65 ED A4 0D                		mov.L	52[r10], r4
 1443 0d68 FC 37 45                		xor	r4, r5
 1444 0d6b 66 12                   		mov.L	#1, r2
 1445 0d6d EF 51                   		mov.L	r5, r1
 1446 0d6f 05 00 00 00             		bsr	_rotlFixed
 1447 0d73 EF 15                   		mov.L	r1, r5
 1448 0d75 E7 A5 0D                		mov.L	r5, 52[r10]
 1449 0d78 ED A5 0D                		mov.L	52[r10], r5
 1450 0d7b 4B 56                   		add	r5, r6
 1451 0d7d 66 52                   		mov.L	#5, r2
 1452 0d7f EC A1                   		mov.L	[r10], r1
 1453 0d81 05 00 00 00             		bsr	_rotlFixed
 1454 0d85 EF 15                   		mov.L	r1, r5
 1455 0d87 4B 65                   		add	r6, r5
 1456 0d89 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1457 0d8f ED A4 04                		mov.L	16[r10], r4
 1458 0d92 4B 45                   		add	r4, r5
 1459 0d94 E7 A5 04                		mov.L	r5, 16[r10]
 1460 0d97 75 42 1E                		mov.L	#30, r2
 1461 0d9a ED A1 01                		mov.L	4[r10], r1
 1462 0d9d 05 00 00 00             		bsr	_rotlFixed
 1463 0da1 E7 A1 01                		mov.L	r1, 4[r10]
 1464                             		.loc 2 497 27
 1465 0da4 EC A4                   		mov.L	[r10], r4
 1466 0da6 ED A5 01                		mov.L	4[r10], r5
 1467 0da9 53 54                   		and	r5, r4
 1468 0dab EC A3                   		mov.L	[r10], r3
 1469 0dad ED A5 01                		mov.L	4[r10], r5
 1470 0db0 57 35                   		or	r3, r5
 1471 0db2 ED A3 02                		mov.L	8[r10], r3
 1472 0db5 53 35                   		and	r3, r5
 1473 0db7 FF 56 54                		or	r5, r4, r6
 1474 0dba ED A4 0B                		mov.L	44[r10], r4
 1475 0dbd ED A5 06                		mov.L	24[r10], r5
 1476 0dc0 FC 37 45                		xor	r4, r5
 1477 0dc3 ED A4 10                		mov.L	64[r10], r4
 1478 0dc6 FC 37 45                		xor	r4, r5
 1479 0dc9 ED A4 0E                		mov.L	56[r10], r4
 1480 0dcc FC 37 45                		xor	r4, r5
 1481 0dcf 66 12                   		mov.L	#1, r2
 1482 0dd1 EF 51                   		mov.L	r5, r1
 1483 0dd3 05 00 00 00             		bsr	_rotlFixed
 1484 0dd7 EF 15                   		mov.L	r1, r5
 1485 0dd9 E7 A5 0E                		mov.L	r5, 56[r10]
 1486 0ddc ED A5 0E                		mov.L	56[r10], r5
 1487 0ddf 4B 56                   		add	r5, r6
 1488 0de1 66 52                   		mov.L	#5, r2
 1489 0de3 ED A1 04                		mov.L	16[r10], r1
 1490 0de6 05 00 00 00             		bsr	_rotlFixed
 1491 0dea EF 15                   		mov.L	r1, r5
 1492 0dec 4B 65                   		add	r6, r5
 1493 0dee 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1494 0df4 ED A4 03                		mov.L	12[r10], r4
 1495 0df7 4B 45                   		add	r4, r5
 1496 0df9 E7 A5 03                		mov.L	r5, 12[r10]
 1497 0dfc 75 42 1E                		mov.L	#30, r2
 1498 0dff EC A1                   		mov.L	[r10], r1
 1499 0e01 05 00 00 00             		bsr	_rotlFixed
 1500 0e05 E3 A1                   		mov.L	r1, [r10]
 1501                             		.loc 2 497 45
 1502 0e07 ED A4 04                		mov.L	16[r10], r4
 1503 0e0a EC A5                   		mov.L	[r10], r5
 1504 0e0c 53 54                   		and	r5, r4
 1505 0e0e ED A3 04                		mov.L	16[r10], r3
 1506 0e11 EC A5                   		mov.L	[r10], r5
 1507 0e13 57 35                   		or	r3, r5
 1508 0e15 ED A3 01                		mov.L	4[r10], r3
 1509 0e18 53 35                   		and	r3, r5
 1510 0e1a FF 56 54                		or	r5, r4, r6
 1511 0e1d ED A4 0C                		mov.L	48[r10], r4
 1512 0e20 ED A5 07                		mov.L	28[r10], r5
 1513 0e23 FC 37 45                		xor	r4, r5
 1514 0e26 ED A4 11                		mov.L	68[r10], r4
 1515 0e29 FC 37 45                		xor	r4, r5
 1516 0e2c ED A4 0F                		mov.L	60[r10], r4
 1517 0e2f FC 37 45                		xor	r4, r5
 1518 0e32 66 12                   		mov.L	#1, r2
 1519 0e34 EF 51                   		mov.L	r5, r1
 1520 0e36 05 00 00 00             		bsr	_rotlFixed
 1521 0e3a EF 15                   		mov.L	r1, r5
 1522 0e3c E7 A5 0F                		mov.L	r5, 60[r10]
 1523 0e3f ED A5 0F                		mov.L	60[r10], r5
 1524 0e42 4B 56                   		add	r5, r6
 1525 0e44 66 52                   		mov.L	#5, r2
 1526 0e46 ED A1 03                		mov.L	12[r10], r1
 1527 0e49 05 00 00 00             		bsr	_rotlFixed
 1528 0e4d EF 15                   		mov.L	r1, r5
 1529 0e4f 4B 65                   		add	r6, r5
 1530 0e51 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1531 0e57 ED A4 02                		mov.L	8[r10], r4
 1532 0e5a 4B 45                   		add	r4, r5
 1533 0e5c E7 A5 02                		mov.L	r5, 8[r10]
 1534 0e5f 75 42 1E                		mov.L	#30, r2
 1535 0e62 ED A1 04                		mov.L	16[r10], r1
 1536 0e65 05 00 00 00             		bsr	_rotlFixed
 1537 0e69 E7 A1 04                		mov.L	r1, 16[r10]
 1538                             		.loc 2 497 63
 1539 0e6c ED A4 03                		mov.L	12[r10], r4
 1540 0e6f ED A5 04                		mov.L	16[r10], r5
 1541 0e72 53 54                   		and	r5, r4
 1542 0e74 ED A3 03                		mov.L	12[r10], r3
 1543 0e77 ED A5 04                		mov.L	16[r10], r5
 1544 0e7a 57 35                   		or	r3, r5
 1545 0e7c EC A3                   		mov.L	[r10], r3
 1546 0e7e 53 35                   		and	r3, r5
 1547 0e80 FF 56 54                		or	r5, r4, r6
 1548 0e83 ED A4 0D                		mov.L	52[r10], r4
 1549 0e86 ED A5 08                		mov.L	32[r10], r5
 1550 0e89 FC 37 45                		xor	r4, r5
 1551 0e8c ED A4 12                		mov.L	72[r10], r4
 1552 0e8f FC 37 45                		xor	r4, r5
 1553 0e92 ED A4 10                		mov.L	64[r10], r4
 1554 0e95 FC 37 45                		xor	r4, r5
 1555 0e98 66 12                   		mov.L	#1, r2
 1556 0e9a EF 51                   		mov.L	r5, r1
 1557 0e9c 05 00 00 00             		bsr	_rotlFixed
 1558 0ea0 EF 15                   		mov.L	r1, r5
 1559 0ea2 E7 A5 10                		mov.L	r5, 64[r10]
 1560 0ea5 ED A5 10                		mov.L	64[r10], r5
 1561 0ea8 4B 56                   		add	r5, r6
 1562 0eaa 66 52                   		mov.L	#5, r2
 1563 0eac ED A1 02                		mov.L	8[r10], r1
 1564 0eaf 05 00 00 00             		bsr	_rotlFixed
 1565 0eb3 EF 15                   		mov.L	r1, r5
 1566 0eb5 4B 65                   		add	r6, r5
 1567 0eb7 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1568 0ebd ED A4 01                		mov.L	4[r10], r4
 1569 0ec0 4B 45                   		add	r4, r5
 1570 0ec2 E7 A5 01                		mov.L	r5, 4[r10]
 1571 0ec5 75 42 1E                		mov.L	#30, r2
 1572 0ec8 ED A1 03                		mov.L	12[r10], r1
 1573 0ecb 05 00 00 00             		bsr	_rotlFixed
 1574 0ecf E7 A1 03                		mov.L	r1, 12[r10]
 498:../src/wolfcrypt/src/sha.c ****         R3(b,c,d,e,a,44); R3(a,b,c,d,e,45); R3(e,a,b,c,d,46); R3(d,e,a,b,c,47);
 1575                             		.loc 2 498 9
 1576 0ed2 ED A4 02                		mov.L	8[r10], r4
 1577 0ed5 ED A5 03                		mov.L	12[r10], r5
 1578 0ed8 53 54                   		and	r5, r4
 1579 0eda ED A3 02                		mov.L	8[r10], r3
 1580 0edd ED A5 03                		mov.L	12[r10], r5
 1581 0ee0 57 35                   		or	r3, r5
 1582 0ee2 ED A3 04                		mov.L	16[r10], r3
 1583 0ee5 53 35                   		and	r3, r5
 1584 0ee7 FF 56 54                		or	r5, r4, r6
 1585 0eea ED A4 0E                		mov.L	56[r10], r4
 1586 0eed ED A5 09                		mov.L	36[r10], r5
 1587 0ef0 FC 37 45                		xor	r4, r5
 1588 0ef3 ED A4 13                		mov.L	76[r10], r4
 1589 0ef6 FC 37 45                		xor	r4, r5
 1590 0ef9 ED A4 11                		mov.L	68[r10], r4
 1591 0efc FC 37 45                		xor	r4, r5
 1592 0eff 66 12                   		mov.L	#1, r2
 1593 0f01 EF 51                   		mov.L	r5, r1
 1594 0f03 05 00 00 00             		bsr	_rotlFixed
 1595 0f07 EF 15                   		mov.L	r1, r5
 1596 0f09 E7 A5 11                		mov.L	r5, 68[r10]
 1597 0f0c ED A5 11                		mov.L	68[r10], r5
 1598 0f0f 4B 56                   		add	r5, r6
 1599 0f11 66 52                   		mov.L	#5, r2
 1600 0f13 ED A1 01                		mov.L	4[r10], r1
 1601 0f16 05 00 00 00             		bsr	_rotlFixed
 1602 0f1a EF 15                   		mov.L	r1, r5
 1603 0f1c 4B 65                   		add	r6, r5
 1604 0f1e 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1605 0f24 EC A4                   		mov.L	[r10], r4
 1606 0f26 4B 45                   		add	r4, r5
 1607 0f28 E3 A5                   		mov.L	r5, [r10]
 1608 0f2a 75 42 1E                		mov.L	#30, r2
 1609 0f2d ED A1 02                		mov.L	8[r10], r1
 1610 0f30 05 00 00 00             		bsr	_rotlFixed
 1611 0f34 E7 A1 02                		mov.L	r1, 8[r10]
 1612                             		.loc 2 498 27
 1613 0f37 ED A4 01                		mov.L	4[r10], r4
 1614 0f3a ED A5 02                		mov.L	8[r10], r5
 1615 0f3d 53 54                   		and	r5, r4
 1616 0f3f ED A3 01                		mov.L	4[r10], r3
 1617 0f42 ED A5 02                		mov.L	8[r10], r5
 1618 0f45 57 35                   		or	r3, r5
 1619 0f47 ED A3 03                		mov.L	12[r10], r3
 1620 0f4a 53 35                   		and	r3, r5
 1621 0f4c FF 56 54                		or	r5, r4, r6
 1622 0f4f ED A4 0F                		mov.L	60[r10], r4
 1623 0f52 ED A5 0A                		mov.L	40[r10], r5
 1624 0f55 FC 37 45                		xor	r4, r5
 1625 0f58 ED A4 14                		mov.L	80[r10], r4
 1626 0f5b FC 37 45                		xor	r4, r5
 1627 0f5e ED A4 12                		mov.L	72[r10], r4
 1628 0f61 FC 37 45                		xor	r4, r5
 1629 0f64 66 12                   		mov.L	#1, r2
 1630 0f66 EF 51                   		mov.L	r5, r1
 1631 0f68 05 00 00 00             		bsr	_rotlFixed
 1632 0f6c EF 15                   		mov.L	r1, r5
 1633 0f6e E7 A5 12                		mov.L	r5, 72[r10]
 1634 0f71 ED A5 12                		mov.L	72[r10], r5
 1635 0f74 4B 56                   		add	r5, r6
 1636 0f76 66 52                   		mov.L	#5, r2
 1637 0f78 EC A1                   		mov.L	[r10], r1
 1638 0f7a 05 00 00 00             		bsr	_rotlFixed
 1639 0f7e EF 15                   		mov.L	r1, r5
 1640 0f80 4B 65                   		add	r6, r5
 1641 0f82 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1642 0f88 ED A4 04                		mov.L	16[r10], r4
 1643 0f8b 4B 45                   		add	r4, r5
 1644 0f8d E7 A5 04                		mov.L	r5, 16[r10]
 1645 0f90 75 42 1E                		mov.L	#30, r2
 1646 0f93 ED A1 01                		mov.L	4[r10], r1
 1647 0f96 05 00 00 00             		bsr	_rotlFixed
 1648 0f9a E7 A1 01                		mov.L	r1, 4[r10]
 1649                             		.loc 2 498 45
 1650 0f9d EC A4                   		mov.L	[r10], r4
 1651 0f9f ED A5 01                		mov.L	4[r10], r5
 1652 0fa2 53 54                   		and	r5, r4
 1653 0fa4 EC A3                   		mov.L	[r10], r3
 1654 0fa6 ED A5 01                		mov.L	4[r10], r5
 1655 0fa9 57 35                   		or	r3, r5
 1656 0fab ED A3 02                		mov.L	8[r10], r3
 1657 0fae 53 35                   		and	r3, r5
 1658 0fb0 FF 56 54                		or	r5, r4, r6
 1659 0fb3 ED A4 10                		mov.L	64[r10], r4
 1660 0fb6 ED A5 0B                		mov.L	44[r10], r5
 1661 0fb9 FC 37 45                		xor	r4, r5
 1662 0fbc ED A4 05                		mov.L	20[r10], r4
 1663 0fbf FC 37 45                		xor	r4, r5
 1664 0fc2 ED A4 13                		mov.L	76[r10], r4
 1665 0fc5 FC 37 45                		xor	r4, r5
 1666 0fc8 66 12                   		mov.L	#1, r2
 1667 0fca EF 51                   		mov.L	r5, r1
 1668 0fcc 05 00 00 00             		bsr	_rotlFixed
 1669 0fd0 EF 15                   		mov.L	r1, r5
 1670 0fd2 E7 A5 13                		mov.L	r5, 76[r10]
 1671 0fd5 ED A5 13                		mov.L	76[r10], r5
 1672 0fd8 4B 56                   		add	r5, r6
 1673 0fda 66 52                   		mov.L	#5, r2
 1674 0fdc ED A1 04                		mov.L	16[r10], r1
 1675 0fdf 05 00 00 00             		bsr	_rotlFixed
 1676 0fe3 EF 15                   		mov.L	r1, r5
 1677 0fe5 4B 65                   		add	r6, r5
 1678 0fe7 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1679 0fed ED A4 03                		mov.L	12[r10], r4
 1680 0ff0 4B 45                   		add	r4, r5
 1681 0ff2 E7 A5 03                		mov.L	r5, 12[r10]
 1682 0ff5 75 42 1E                		mov.L	#30, r2
 1683 0ff8 EC A1                   		mov.L	[r10], r1
 1684 0ffa 05 00 00 00             		bsr	_rotlFixed
 1685 0ffe E3 A1                   		mov.L	r1, [r10]
 1686                             		.loc 2 498 63
 1687 1000 ED A4 04                		mov.L	16[r10], r4
 1688 1003 EC A5                   		mov.L	[r10], r5
 1689 1005 53 54                   		and	r5, r4
 1690 1007 ED A3 04                		mov.L	16[r10], r3
 1691 100a EC A5                   		mov.L	[r10], r5
 1692 100c 57 35                   		or	r3, r5
 1693 100e ED A3 01                		mov.L	4[r10], r3
 1694 1011 53 35                   		and	r3, r5
 1695 1013 FF 56 54                		or	r5, r4, r6
 1696 1016 ED A4 11                		mov.L	68[r10], r4
 1697 1019 ED A5 0C                		mov.L	48[r10], r5
 1698 101c FC 37 45                		xor	r4, r5
 1699 101f ED A4 06                		mov.L	24[r10], r4
 1700 1022 FC 37 45                		xor	r4, r5
 1701 1025 ED A4 14                		mov.L	80[r10], r4
 1702 1028 FC 37 45                		xor	r4, r5
 1703 102b 66 12                   		mov.L	#1, r2
 1704 102d EF 51                   		mov.L	r5, r1
 1705 102f 05 00 00 00             		bsr	_rotlFixed
 1706 1033 EF 15                   		mov.L	r1, r5
 1707 1035 E7 A5 14                		mov.L	r5, 80[r10]
 1708 1038 ED A5 14                		mov.L	80[r10], r5
 1709 103b 4B 56                   		add	r5, r6
 1710 103d 66 52                   		mov.L	#5, r2
 1711 103f ED A1 03                		mov.L	12[r10], r1
 1712 1042 05 00 00 00             		bsr	_rotlFixed
 1713 1046 EF 15                   		mov.L	r1, r5
 1714 1048 4B 65                   		add	r6, r5
 1715 104a 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1716 1050 ED A4 02                		mov.L	8[r10], r4
 1717 1053 4B 45                   		add	r4, r5
 1718 1055 E7 A5 02                		mov.L	r5, 8[r10]
 1719 1058 75 42 1E                		mov.L	#30, r2
 1720 105b ED A1 04                		mov.L	16[r10], r1
 1721 105e 05 00 00 00             		bsr	_rotlFixed
 1722 1062 E7 A1 04                		mov.L	r1, 16[r10]
 499:../src/wolfcrypt/src/sha.c ****         R3(c,d,e,a,b,48); R3(b,c,d,e,a,49); R3(a,b,c,d,e,50); R3(e,a,b,c,d,51);
 1723                             		.loc 2 499 9
 1724 1065 ED A4 03                		mov.L	12[r10], r4
 1725 1068 ED A5 04                		mov.L	16[r10], r5
 1726 106b 53 54                   		and	r5, r4
 1727 106d ED A3 03                		mov.L	12[r10], r3
 1728 1070 ED A5 04                		mov.L	16[r10], r5
 1729 1073 57 35                   		or	r3, r5
 1730 1075 EC A3                   		mov.L	[r10], r3
 1731 1077 53 35                   		and	r3, r5
 1732 1079 FF 56 54                		or	r5, r4, r6
 1733 107c ED A4 12                		mov.L	72[r10], r4
 1734 107f ED A5 0D                		mov.L	52[r10], r5
 1735 1082 FC 37 45                		xor	r4, r5
 1736 1085 ED A4 07                		mov.L	28[r10], r4
 1737 1088 FC 37 45                		xor	r4, r5
 1738 108b ED A4 05                		mov.L	20[r10], r4
 1739 108e FC 37 45                		xor	r4, r5
 1740 1091 66 12                   		mov.L	#1, r2
 1741 1093 EF 51                   		mov.L	r5, r1
 1742 1095 05 00 00 00             		bsr	_rotlFixed
 1743 1099 EF 15                   		mov.L	r1, r5
 1744 109b E7 A5 05                		mov.L	r5, 20[r10]
 1745 109e ED A5 05                		mov.L	20[r10], r5
 1746 10a1 4B 56                   		add	r5, r6
 1747 10a3 66 52                   		mov.L	#5, r2
 1748 10a5 ED A1 02                		mov.L	8[r10], r1
 1749 10a8 05 00 00 00             		bsr	_rotlFixed
 1750 10ac EF 15                   		mov.L	r1, r5
 1751 10ae 4B 65                   		add	r6, r5
 1752 10b0 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1753 10b6 ED A4 01                		mov.L	4[r10], r4
 1754 10b9 4B 45                   		add	r4, r5
 1755 10bb E7 A5 01                		mov.L	r5, 4[r10]
 1756 10be 75 42 1E                		mov.L	#30, r2
 1757 10c1 ED A1 03                		mov.L	12[r10], r1
 1758 10c4 05 00 00 00             		bsr	_rotlFixed
 1759 10c8 E7 A1 03                		mov.L	r1, 12[r10]
 1760                             		.loc 2 499 27
 1761 10cb ED A4 02                		mov.L	8[r10], r4
 1762 10ce ED A5 03                		mov.L	12[r10], r5
 1763 10d1 53 54                   		and	r5, r4
 1764 10d3 ED A3 02                		mov.L	8[r10], r3
 1765 10d6 ED A5 03                		mov.L	12[r10], r5
 1766 10d9 57 35                   		or	r3, r5
 1767 10db ED A3 04                		mov.L	16[r10], r3
 1768 10de 53 35                   		and	r3, r5
 1769 10e0 FF 56 54                		or	r5, r4, r6
 1770 10e3 ED A4 13                		mov.L	76[r10], r4
 1771 10e6 ED A5 0E                		mov.L	56[r10], r5
 1772 10e9 FC 37 45                		xor	r4, r5
 1773 10ec ED A4 08                		mov.L	32[r10], r4
 1774 10ef FC 37 45                		xor	r4, r5
 1775 10f2 ED A4 06                		mov.L	24[r10], r4
 1776 10f5 FC 37 45                		xor	r4, r5
 1777 10f8 66 12                   		mov.L	#1, r2
 1778 10fa EF 51                   		mov.L	r5, r1
 1779 10fc 05 00 00 00             		bsr	_rotlFixed
 1780 1100 EF 15                   		mov.L	r1, r5
 1781 1102 E7 A5 06                		mov.L	r5, 24[r10]
 1782 1105 ED A5 06                		mov.L	24[r10], r5
 1783 1108 4B 56                   		add	r5, r6
 1784 110a 66 52                   		mov.L	#5, r2
 1785 110c ED A1 01                		mov.L	4[r10], r1
 1786 110f 05 00 00 00             		bsr	_rotlFixed
 1787 1113 EF 15                   		mov.L	r1, r5
 1788 1115 4B 65                   		add	r6, r5
 1789 1117 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1790 111d EC A4                   		mov.L	[r10], r4
 1791 111f 4B 45                   		add	r4, r5
 1792 1121 E3 A5                   		mov.L	r5, [r10]
 1793 1123 75 42 1E                		mov.L	#30, r2
 1794 1126 ED A1 02                		mov.L	8[r10], r1
 1795 1129 05 00 00 00             		bsr	_rotlFixed
 1796 112d E7 A1 02                		mov.L	r1, 8[r10]
 1797                             		.loc 2 499 45
 1798 1130 ED A4 01                		mov.L	4[r10], r4
 1799 1133 ED A5 02                		mov.L	8[r10], r5
 1800 1136 53 54                   		and	r5, r4
 1801 1138 ED A3 01                		mov.L	4[r10], r3
 1802 113b ED A5 02                		mov.L	8[r10], r5
 1803 113e 57 35                   		or	r3, r5
 1804 1140 ED A3 03                		mov.L	12[r10], r3
 1805 1143 53 35                   		and	r3, r5
 1806 1145 FF 56 54                		or	r5, r4, r6
 1807 1148 ED A4 14                		mov.L	80[r10], r4
 1808 114b ED A5 0F                		mov.L	60[r10], r5
 1809 114e FC 37 45                		xor	r4, r5
 1810 1151 ED A4 09                		mov.L	36[r10], r4
 1811 1154 FC 37 45                		xor	r4, r5
 1812 1157 ED A4 07                		mov.L	28[r10], r4
 1813 115a FC 37 45                		xor	r4, r5
 1814 115d 66 12                   		mov.L	#1, r2
 1815 115f EF 51                   		mov.L	r5, r1
 1816 1161 05 00 00 00             		bsr	_rotlFixed
 1817 1165 EF 15                   		mov.L	r1, r5
 1818 1167 E7 A5 07                		mov.L	r5, 28[r10]
 1819 116a ED A5 07                		mov.L	28[r10], r5
 1820 116d 4B 56                   		add	r5, r6
 1821 116f 66 52                   		mov.L	#5, r2
 1822 1171 EC A1                   		mov.L	[r10], r1
 1823 1173 05 00 00 00             		bsr	_rotlFixed
 1824 1177 EF 15                   		mov.L	r1, r5
 1825 1179 4B 65                   		add	r6, r5
 1826 117b 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1827 1181 ED A4 04                		mov.L	16[r10], r4
 1828 1184 4B 45                   		add	r4, r5
 1829 1186 E7 A5 04                		mov.L	r5, 16[r10]
 1830 1189 75 42 1E                		mov.L	#30, r2
 1831 118c ED A1 01                		mov.L	4[r10], r1
 1832 118f 05 00 00 00             		bsr	_rotlFixed
 1833 1193 E7 A1 01                		mov.L	r1, 4[r10]
 1834                             		.loc 2 499 63
 1835 1196 EC A4                   		mov.L	[r10], r4
 1836 1198 ED A5 01                		mov.L	4[r10], r5
 1837 119b 53 54                   		and	r5, r4
 1838 119d EC A3                   		mov.L	[r10], r3
 1839 119f ED A5 01                		mov.L	4[r10], r5
 1840 11a2 57 35                   		or	r3, r5
 1841 11a4 ED A3 02                		mov.L	8[r10], r3
 1842 11a7 53 35                   		and	r3, r5
 1843 11a9 FF 56 54                		or	r5, r4, r6
 1844 11ac ED A4 05                		mov.L	20[r10], r4
 1845 11af ED A5 10                		mov.L	64[r10], r5
 1846 11b2 FC 37 45                		xor	r4, r5
 1847 11b5 ED A4 0A                		mov.L	40[r10], r4
 1848 11b8 FC 37 45                		xor	r4, r5
 1849 11bb ED A4 08                		mov.L	32[r10], r4
 1850 11be FC 37 45                		xor	r4, r5
 1851 11c1 66 12                   		mov.L	#1, r2
 1852 11c3 EF 51                   		mov.L	r5, r1
 1853 11c5 05 00 00 00             		bsr	_rotlFixed
 1854 11c9 EF 15                   		mov.L	r1, r5
 1855 11cb E7 A5 08                		mov.L	r5, 32[r10]
 1856 11ce ED A5 08                		mov.L	32[r10], r5
 1857 11d1 4B 56                   		add	r5, r6
 1858 11d3 66 52                   		mov.L	#5, r2
 1859 11d5 ED A1 04                		mov.L	16[r10], r1
 1860 11d8 05 00 00 00             		bsr	_rotlFixed
 1861 11dc EF 15                   		mov.L	r1, r5
 1862 11de 4B 65                   		add	r6, r5
 1863 11e0 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1864 11e6 ED A4 03                		mov.L	12[r10], r4
 1865 11e9 4B 45                   		add	r4, r5
 1866 11eb E7 A5 03                		mov.L	r5, 12[r10]
 1867 11ee 75 42 1E                		mov.L	#30, r2
 1868 11f1 EC A1                   		mov.L	[r10], r1
 1869 11f3 05 00 00 00             		bsr	_rotlFixed
 1870 11f7 E3 A1                   		mov.L	r1, [r10]
 500:../src/wolfcrypt/src/sha.c ****         R3(d,e,a,b,c,52); R3(c,d,e,a,b,53); R3(b,c,d,e,a,54); R3(a,b,c,d,e,55);
 1871                             		.loc 2 500 9
 1872 11f9 ED A4 04                		mov.L	16[r10], r4
 1873 11fc EC A5                   		mov.L	[r10], r5
 1874 11fe 53 54                   		and	r5, r4
 1875 1200 ED A3 04                		mov.L	16[r10], r3
 1876 1203 EC A5                   		mov.L	[r10], r5
 1877 1205 57 35                   		or	r3, r5
 1878 1207 ED A3 01                		mov.L	4[r10], r3
 1879 120a 53 35                   		and	r3, r5
 1880 120c FF 56 54                		or	r5, r4, r6
 1881 120f ED A4 06                		mov.L	24[r10], r4
 1882 1212 ED A5 11                		mov.L	68[r10], r5
 1883 1215 FC 37 45                		xor	r4, r5
 1884 1218 ED A4 0B                		mov.L	44[r10], r4
 1885 121b FC 37 45                		xor	r4, r5
 1886 121e ED A4 09                		mov.L	36[r10], r4
 1887 1221 FC 37 45                		xor	r4, r5
 1888 1224 66 12                   		mov.L	#1, r2
 1889 1226 EF 51                   		mov.L	r5, r1
 1890 1228 05 00 00 00             		bsr	_rotlFixed
 1891 122c EF 15                   		mov.L	r1, r5
 1892 122e E7 A5 09                		mov.L	r5, 36[r10]
 1893 1231 ED A5 09                		mov.L	36[r10], r5
 1894 1234 4B 56                   		add	r5, r6
 1895 1236 66 52                   		mov.L	#5, r2
 1896 1238 ED A1 03                		mov.L	12[r10], r1
 1897 123b 05 00 00 00             		bsr	_rotlFixed
 1898 123f EF 15                   		mov.L	r1, r5
 1899 1241 4B 65                   		add	r6, r5
 1900 1243 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1901 1249 ED A4 02                		mov.L	8[r10], r4
 1902 124c 4B 45                   		add	r4, r5
 1903 124e E7 A5 02                		mov.L	r5, 8[r10]
 1904 1251 75 42 1E                		mov.L	#30, r2
 1905 1254 ED A1 04                		mov.L	16[r10], r1
 1906 1257 05 00 00 00             		bsr	_rotlFixed
 1907 125b E7 A1 04                		mov.L	r1, 16[r10]
 1908                             		.loc 2 500 27
 1909 125e ED A4 03                		mov.L	12[r10], r4
 1910 1261 ED A5 04                		mov.L	16[r10], r5
 1911 1264 53 54                   		and	r5, r4
 1912 1266 ED A3 03                		mov.L	12[r10], r3
 1913 1269 ED A5 04                		mov.L	16[r10], r5
 1914 126c 57 35                   		or	r3, r5
 1915 126e EC A3                   		mov.L	[r10], r3
 1916 1270 53 35                   		and	r3, r5
 1917 1272 FF 56 54                		or	r5, r4, r6
 1918 1275 ED A4 07                		mov.L	28[r10], r4
 1919 1278 ED A5 12                		mov.L	72[r10], r5
 1920 127b FC 37 45                		xor	r4, r5
 1921 127e ED A4 0C                		mov.L	48[r10], r4
 1922 1281 FC 37 45                		xor	r4, r5
 1923 1284 ED A4 0A                		mov.L	40[r10], r4
 1924 1287 FC 37 45                		xor	r4, r5
 1925 128a 66 12                   		mov.L	#1, r2
 1926 128c EF 51                   		mov.L	r5, r1
 1927 128e 05 00 00 00             		bsr	_rotlFixed
 1928 1292 EF 15                   		mov.L	r1, r5
 1929 1294 E7 A5 0A                		mov.L	r5, 40[r10]
 1930 1297 ED A5 0A                		mov.L	40[r10], r5
 1931 129a 4B 56                   		add	r5, r6
 1932 129c 66 52                   		mov.L	#5, r2
 1933 129e ED A1 02                		mov.L	8[r10], r1
 1934 12a1 05 00 00 00             		bsr	_rotlFixed
 1935 12a5 EF 15                   		mov.L	r1, r5
 1936 12a7 4B 65                   		add	r6, r5
 1937 12a9 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1938 12af ED A4 01                		mov.L	4[r10], r4
 1939 12b2 4B 45                   		add	r4, r5
 1940 12b4 E7 A5 01                		mov.L	r5, 4[r10]
 1941 12b7 75 42 1E                		mov.L	#30, r2
 1942 12ba ED A1 03                		mov.L	12[r10], r1
 1943 12bd 05 00 00 00             		bsr	_rotlFixed
 1944 12c1 E7 A1 03                		mov.L	r1, 12[r10]
 1945                             		.loc 2 500 45
 1946 12c4 ED A4 02                		mov.L	8[r10], r4
 1947 12c7 ED A5 03                		mov.L	12[r10], r5
 1948 12ca 53 54                   		and	r5, r4
 1949 12cc ED A3 02                		mov.L	8[r10], r3
 1950 12cf ED A5 03                		mov.L	12[r10], r5
 1951 12d2 57 35                   		or	r3, r5
 1952 12d4 ED A3 04                		mov.L	16[r10], r3
 1953 12d7 53 35                   		and	r3, r5
 1954 12d9 FF 56 54                		or	r5, r4, r6
 1955 12dc ED A4 08                		mov.L	32[r10], r4
 1956 12df ED A5 13                		mov.L	76[r10], r5
 1957 12e2 FC 37 45                		xor	r4, r5
 1958 12e5 ED A4 0D                		mov.L	52[r10], r4
 1959 12e8 FC 37 45                		xor	r4, r5
 1960 12eb ED A4 0B                		mov.L	44[r10], r4
 1961 12ee FC 37 45                		xor	r4, r5
 1962 12f1 66 12                   		mov.L	#1, r2
 1963 12f3 EF 51                   		mov.L	r5, r1
 1964 12f5 05 00 00 00             		bsr	_rotlFixed
 1965 12f9 EF 15                   		mov.L	r1, r5
 1966 12fb E7 A5 0B                		mov.L	r5, 44[r10]
 1967 12fe ED A5 0B                		mov.L	44[r10], r5
 1968 1301 4B 56                   		add	r5, r6
 1969 1303 66 52                   		mov.L	#5, r2
 1970 1305 ED A1 01                		mov.L	4[r10], r1
 1971 1308 05 00 00 00             		bsr	_rotlFixed
 1972 130c EF 15                   		mov.L	r1, r5
 1973 130e 4B 65                   		add	r6, r5
 1974 1310 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 1975 1316 EC A4                   		mov.L	[r10], r4
 1976 1318 4B 45                   		add	r4, r5
 1977 131a E3 A5                   		mov.L	r5, [r10]
 1978 131c 75 42 1E                		mov.L	#30, r2
 1979 131f ED A1 02                		mov.L	8[r10], r1
 1980 1322 05 00 00 00             		bsr	_rotlFixed
 1981 1326 E7 A1 02                		mov.L	r1, 8[r10]
 1982                             		.loc 2 500 63
 1983 1329 ED A4 01                		mov.L	4[r10], r4
 1984 132c ED A5 02                		mov.L	8[r10], r5
 1985 132f 53 54                   		and	r5, r4
 1986 1331 ED A3 01                		mov.L	4[r10], r3
 1987 1334 ED A5 02                		mov.L	8[r10], r5
 1988 1337 57 35                   		or	r3, r5
 1989 1339 ED A3 03                		mov.L	12[r10], r3
 1990 133c 53 35                   		and	r3, r5
 1991 133e FF 56 54                		or	r5, r4, r6
 1992 1341 ED A4 09                		mov.L	36[r10], r4
 1993 1344 ED A5 14                		mov.L	80[r10], r5
 1994 1347 FC 37 45                		xor	r4, r5
 1995 134a ED A4 0E                		mov.L	56[r10], r4
 1996 134d FC 37 45                		xor	r4, r5
 1997 1350 ED A4 0C                		mov.L	48[r10], r4
 1998 1353 FC 37 45                		xor	r4, r5
 1999 1356 66 12                   		mov.L	#1, r2
 2000 1358 EF 51                   		mov.L	r5, r1
 2001 135a 05 00 00 00             		bsr	_rotlFixed
 2002 135e EF 15                   		mov.L	r1, r5
 2003 1360 E7 A5 0C                		mov.L	r5, 48[r10]
 2004 1363 ED A5 0C                		mov.L	48[r10], r5
 2005 1366 4B 56                   		add	r5, r6
 2006 1368 66 52                   		mov.L	#5, r2
 2007 136a EC A1                   		mov.L	[r10], r1
 2008 136c 05 00 00 00             		bsr	_rotlFixed
 2009 1370 EF 15                   		mov.L	r1, r5
 2010 1372 4B 65                   		add	r6, r5
 2011 1374 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 2012 137a ED A4 04                		mov.L	16[r10], r4
 2013 137d 4B 45                   		add	r4, r5
 2014 137f E7 A5 04                		mov.L	r5, 16[r10]
 2015 1382 75 42 1E                		mov.L	#30, r2
 2016 1385 ED A1 01                		mov.L	4[r10], r1
 2017 1388 05 00 00 00             		bsr	_rotlFixed
 2018 138c E7 A1 01                		mov.L	r1, 4[r10]
 501:../src/wolfcrypt/src/sha.c ****         R3(e,a,b,c,d,56); R3(d,e,a,b,c,57); R3(c,d,e,a,b,58); R3(b,c,d,e,a,59);
 2019                             		.loc 2 501 9
 2020 138f EC A4                   		mov.L	[r10], r4
 2021 1391 ED A5 01                		mov.L	4[r10], r5
 2022 1394 53 54                   		and	r5, r4
 2023 1396 EC A3                   		mov.L	[r10], r3
 2024 1398 ED A5 01                		mov.L	4[r10], r5
 2025 139b 57 35                   		or	r3, r5
 2026 139d ED A3 02                		mov.L	8[r10], r3
 2027 13a0 53 35                   		and	r3, r5
 2028 13a2 FF 56 54                		or	r5, r4, r6
 2029 13a5 ED A4 0A                		mov.L	40[r10], r4
 2030 13a8 ED A5 05                		mov.L	20[r10], r5
 2031 13ab FC 37 45                		xor	r4, r5
 2032 13ae ED A4 0F                		mov.L	60[r10], r4
 2033 13b1 FC 37 45                		xor	r4, r5
 2034 13b4 ED A4 0D                		mov.L	52[r10], r4
 2035 13b7 FC 37 45                		xor	r4, r5
 2036 13ba 66 12                   		mov.L	#1, r2
 2037 13bc EF 51                   		mov.L	r5, r1
 2038 13be 05 00 00 00             		bsr	_rotlFixed
 2039 13c2 EF 15                   		mov.L	r1, r5
 2040 13c4 E7 A5 0D                		mov.L	r5, 52[r10]
 2041 13c7 ED A5 0D                		mov.L	52[r10], r5
 2042 13ca 4B 56                   		add	r5, r6
 2043 13cc 66 52                   		mov.L	#5, r2
 2044 13ce ED A1 04                		mov.L	16[r10], r1
 2045 13d1 05 00 00 00             		bsr	_rotlFixed
 2046 13d5 EF 15                   		mov.L	r1, r5
 2047 13d7 4B 65                   		add	r6, r5
 2048 13d9 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 2049 13df ED A4 03                		mov.L	12[r10], r4
 2050 13e2 4B 45                   		add	r4, r5
 2051 13e4 E7 A5 03                		mov.L	r5, 12[r10]
 2052 13e7 75 42 1E                		mov.L	#30, r2
 2053 13ea EC A1                   		mov.L	[r10], r1
 2054 13ec 05 00 00 00             		bsr	_rotlFixed
 2055 13f0 E3 A1                   		mov.L	r1, [r10]
 2056                             		.loc 2 501 27
 2057 13f2 ED A4 04                		mov.L	16[r10], r4
 2058 13f5 EC A5                   		mov.L	[r10], r5
 2059 13f7 53 54                   		and	r5, r4
 2060 13f9 ED A3 04                		mov.L	16[r10], r3
 2061 13fc EC A5                   		mov.L	[r10], r5
 2062 13fe 57 35                   		or	r3, r5
 2063 1400 ED A3 01                		mov.L	4[r10], r3
 2064 1403 53 35                   		and	r3, r5
 2065 1405 FF 56 54                		or	r5, r4, r6
 2066 1408 ED A4 0B                		mov.L	44[r10], r4
 2067 140b ED A5 06                		mov.L	24[r10], r5
 2068 140e FC 37 45                		xor	r4, r5
 2069 1411 ED A4 10                		mov.L	64[r10], r4
 2070 1414 FC 37 45                		xor	r4, r5
 2071 1417 ED A4 0E                		mov.L	56[r10], r4
 2072 141a FC 37 45                		xor	r4, r5
 2073 141d 66 12                   		mov.L	#1, r2
 2074 141f EF 51                   		mov.L	r5, r1
 2075 1421 05 00 00 00             		bsr	_rotlFixed
 2076 1425 EF 15                   		mov.L	r1, r5
 2077 1427 E7 A5 0E                		mov.L	r5, 56[r10]
 2078 142a ED A5 0E                		mov.L	56[r10], r5
 2079 142d 4B 56                   		add	r5, r6
 2080 142f 66 52                   		mov.L	#5, r2
 2081 1431 ED A1 03                		mov.L	12[r10], r1
 2082 1434 05 00 00 00             		bsr	_rotlFixed
 2083 1438 EF 15                   		mov.L	r1, r5
 2084 143a 4B 65                   		add	r6, r5
 2085 143c 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 2086 1442 ED A4 02                		mov.L	8[r10], r4
 2087 1445 4B 45                   		add	r4, r5
 2088 1447 E7 A5 02                		mov.L	r5, 8[r10]
 2089 144a 75 42 1E                		mov.L	#30, r2
 2090 144d ED A1 04                		mov.L	16[r10], r1
 2091 1450 05 00 00 00             		bsr	_rotlFixed
 2092 1454 E7 A1 04                		mov.L	r1, 16[r10]
 2093                             		.loc 2 501 45
 2094 1457 ED A4 03                		mov.L	12[r10], r4
 2095 145a ED A5 04                		mov.L	16[r10], r5
 2096 145d 53 54                   		and	r5, r4
 2097 145f ED A3 03                		mov.L	12[r10], r3
 2098 1462 ED A5 04                		mov.L	16[r10], r5
 2099 1465 57 35                   		or	r3, r5
 2100 1467 EC A3                   		mov.L	[r10], r3
 2101 1469 53 35                   		and	r3, r5
 2102 146b FF 56 54                		or	r5, r4, r6
 2103 146e ED A4 0C                		mov.L	48[r10], r4
 2104 1471 ED A5 07                		mov.L	28[r10], r5
 2105 1474 FC 37 45                		xor	r4, r5
 2106 1477 ED A4 11                		mov.L	68[r10], r4
 2107 147a FC 37 45                		xor	r4, r5
 2108 147d ED A4 0F                		mov.L	60[r10], r4
 2109 1480 FC 37 45                		xor	r4, r5
 2110 1483 66 12                   		mov.L	#1, r2
 2111 1485 EF 51                   		mov.L	r5, r1
 2112 1487 05 00 00 00             		bsr	_rotlFixed
 2113 148b EF 15                   		mov.L	r1, r5
 2114 148d E7 A5 0F                		mov.L	r5, 60[r10]
 2115 1490 ED A5 0F                		mov.L	60[r10], r5
 2116 1493 4B 56                   		add	r5, r6
 2117 1495 66 52                   		mov.L	#5, r2
 2118 1497 ED A1 02                		mov.L	8[r10], r1
 2119 149a 05 00 00 00             		bsr	_rotlFixed
 2120 149e EF 15                   		mov.L	r1, r5
 2121 14a0 4B 65                   		add	r6, r5
 2122 14a2 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 2123 14a8 ED A4 01                		mov.L	4[r10], r4
 2124 14ab 4B 45                   		add	r4, r5
 2125 14ad E7 A5 01                		mov.L	r5, 4[r10]
 2126 14b0 75 42 1E                		mov.L	#30, r2
 2127 14b3 ED A1 03                		mov.L	12[r10], r1
 2128 14b6 05 00 00 00             		bsr	_rotlFixed
 2129 14ba E7 A1 03                		mov.L	r1, 12[r10]
 2130                             		.loc 2 501 63
 2131 14bd ED A4 02                		mov.L	8[r10], r4
 2132 14c0 ED A5 03                		mov.L	12[r10], r5
 2133 14c3 53 54                   		and	r5, r4
 2134 14c5 ED A3 02                		mov.L	8[r10], r3
 2135 14c8 ED A5 03                		mov.L	12[r10], r5
 2136 14cb 57 35                   		or	r3, r5
 2137 14cd ED A3 04                		mov.L	16[r10], r3
 2138 14d0 53 35                   		and	r3, r5
 2139 14d2 FF 56 54                		or	r5, r4, r6
 2140 14d5 ED A4 0D                		mov.L	52[r10], r4
 2141 14d8 ED A5 08                		mov.L	32[r10], r5
 2142 14db FC 37 45                		xor	r4, r5
 2143 14de ED A4 12                		mov.L	72[r10], r4
 2144 14e1 FC 37 45                		xor	r4, r5
 2145 14e4 ED A4 10                		mov.L	64[r10], r4
 2146 14e7 FC 37 45                		xor	r4, r5
 2147 14ea 66 12                   		mov.L	#1, r2
 2148 14ec EF 51                   		mov.L	r5, r1
 2149 14ee 05 00 00 00             		bsr	_rotlFixed
 2150 14f2 EF 15                   		mov.L	r1, r5
 2151 14f4 E7 A5 10                		mov.L	r5, 64[r10]
 2152 14f7 ED A5 10                		mov.L	64[r10], r5
 2153 14fa 4B 56                   		add	r5, r6
 2154 14fc 66 52                   		mov.L	#5, r2
 2155 14fe ED A1 01                		mov.L	4[r10], r1
 2156 1501 05 00 00 00             		bsr	_rotlFixed
 2157 1505 EF 15                   		mov.L	r1, r5
 2158 1507 4B 65                   		add	r6, r5
 2159 1509 70 55 DC BC 1B 8F       		add	#-1894007588, r5
 2160 150f EC A4                   		mov.L	[r10], r4
 2161 1511 4B 45                   		add	r4, r5
 2162 1513 E3 A5                   		mov.L	r5, [r10]
 2163 1515 75 42 1E                		mov.L	#30, r2
 2164 1518 ED A1 02                		mov.L	8[r10], r1
 2165 151b 05 00 00 00             		bsr	_rotlFixed
 2166 151f E7 A1 02                		mov.L	r1, 8[r10]
 502:../src/wolfcrypt/src/sha.c **** 
 503:../src/wolfcrypt/src/sha.c ****         R4(a,b,c,d,e,60); R4(e,a,b,c,d,61); R4(d,e,a,b,c,62); R4(c,d,e,a,b,63);
 2167                             		.loc 2 503 9
 2168 1522 ED A5 01                		mov.L	4[r10], r5
 2169 1525 06 A1 0D A5 02          		xor	8[r10].L, r5
 2170 152a ED A6 03                		mov.L	12[r10], r6
 2171 152d FC 37 56                		xor	r5, r6
 2172 1530 ED A4 0E                		mov.L	56[r10], r4
 2173 1533 ED A5 09                		mov.L	36[r10], r5
 2174 1536 FC 37 45                		xor	r4, r5
 2175 1539 ED A4 13                		mov.L	76[r10], r4
 2176 153c FC 37 45                		xor	r4, r5
 2177 153f ED A4 11                		mov.L	68[r10], r4
 2178 1542 FC 37 45                		xor	r4, r5
 2179 1545 66 12                   		mov.L	#1, r2
 2180 1547 EF 51                   		mov.L	r5, r1
 2181 1549 05 00 00 00             		bsr	_rotlFixed
 2182 154d EF 15                   		mov.L	r1, r5
 2183 154f E7 A5 11                		mov.L	r5, 68[r10]
 2184 1552 ED A5 11                		mov.L	68[r10], r5
 2185 1555 4B 56                   		add	r5, r6
 2186 1557 66 52                   		mov.L	#5, r2
 2187 1559 EC A1                   		mov.L	[r10], r1
 2188 155b 05 00 00 00             		bsr	_rotlFixed
 2189 155f EF 15                   		mov.L	r1, r5
 2190 1561 4B 65                   		add	r6, r5
 2191 1563 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2192 1569 ED A4 04                		mov.L	16[r10], r4
 2193 156c 4B 45                   		add	r4, r5
 2194 156e E7 A5 04                		mov.L	r5, 16[r10]
 2195 1571 75 42 1E                		mov.L	#30, r2
 2196 1574 ED A1 01                		mov.L	4[r10], r1
 2197 1577 05 00 00 00             		bsr	_rotlFixed
 2198 157b E7 A1 01                		mov.L	r1, 4[r10]
 2199                             		.loc 2 503 27
 2200 157e EC A5                   		mov.L	[r10], r5
 2201 1580 06 A1 0D A5 01          		xor	4[r10].L, r5
 2202 1585 ED A6 02                		mov.L	8[r10], r6
 2203 1588 FC 37 56                		xor	r5, r6
 2204 158b ED A4 0F                		mov.L	60[r10], r4
 2205 158e ED A5 0A                		mov.L	40[r10], r5
 2206 1591 FC 37 45                		xor	r4, r5
 2207 1594 ED A4 14                		mov.L	80[r10], r4
 2208 1597 FC 37 45                		xor	r4, r5
 2209 159a ED A4 12                		mov.L	72[r10], r4
 2210 159d FC 37 45                		xor	r4, r5
 2211 15a0 66 12                   		mov.L	#1, r2
 2212 15a2 EF 51                   		mov.L	r5, r1
 2213 15a4 05 00 00 00             		bsr	_rotlFixed
 2214 15a8 EF 15                   		mov.L	r1, r5
 2215 15aa E7 A5 12                		mov.L	r5, 72[r10]
 2216 15ad ED A5 12                		mov.L	72[r10], r5
 2217 15b0 4B 56                   		add	r5, r6
 2218 15b2 66 52                   		mov.L	#5, r2
 2219 15b4 ED A1 04                		mov.L	16[r10], r1
 2220 15b7 05 00 00 00             		bsr	_rotlFixed
 2221 15bb EF 15                   		mov.L	r1, r5
 2222 15bd 4B 65                   		add	r6, r5
 2223 15bf 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2224 15c5 ED A4 03                		mov.L	12[r10], r4
 2225 15c8 4B 45                   		add	r4, r5
 2226 15ca E7 A5 03                		mov.L	r5, 12[r10]
 2227 15cd 75 42 1E                		mov.L	#30, r2
 2228 15d0 EC A1                   		mov.L	[r10], r1
 2229 15d2 05 00 00 00             		bsr	_rotlFixed
 2230 15d6 E3 A1                   		mov.L	r1, [r10]
 2231                             		.loc 2 503 45
 2232 15d8 ED A5 04                		mov.L	16[r10], r5
 2233 15db 06 A0 0D A5             		xor	[r10].L, r5
 2234 15df ED A6 01                		mov.L	4[r10], r6
 2235 15e2 FC 37 56                		xor	r5, r6
 2236 15e5 ED A4 10                		mov.L	64[r10], r4
 2237 15e8 ED A5 0B                		mov.L	44[r10], r5
 2238 15eb FC 37 45                		xor	r4, r5
 2239 15ee ED A4 05                		mov.L	20[r10], r4
 2240 15f1 FC 37 45                		xor	r4, r5
 2241 15f4 ED A4 13                		mov.L	76[r10], r4
 2242 15f7 FC 37 45                		xor	r4, r5
 2243 15fa 66 12                   		mov.L	#1, r2
 2244 15fc EF 51                   		mov.L	r5, r1
 2245 15fe 05 00 00 00             		bsr	_rotlFixed
 2246 1602 EF 15                   		mov.L	r1, r5
 2247 1604 E7 A5 13                		mov.L	r5, 76[r10]
 2248 1607 ED A5 13                		mov.L	76[r10], r5
 2249 160a 4B 56                   		add	r5, r6
 2250 160c 66 52                   		mov.L	#5, r2
 2251 160e ED A1 03                		mov.L	12[r10], r1
 2252 1611 05 00 00 00             		bsr	_rotlFixed
 2253 1615 EF 15                   		mov.L	r1, r5
 2254 1617 4B 65                   		add	r6, r5
 2255 1619 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2256 161f ED A4 02                		mov.L	8[r10], r4
 2257 1622 4B 45                   		add	r4, r5
 2258 1624 E7 A5 02                		mov.L	r5, 8[r10]
 2259 1627 75 42 1E                		mov.L	#30, r2
 2260 162a ED A1 04                		mov.L	16[r10], r1
 2261 162d 05 00 00 00             		bsr	_rotlFixed
 2262 1631 E7 A1 04                		mov.L	r1, 16[r10]
 2263                             		.loc 2 503 63
 2264 1634 ED A5 03                		mov.L	12[r10], r5
 2265 1637 06 A1 0D A5 04          		xor	16[r10].L, r5
 2266 163c EC A6                   		mov.L	[r10], r6
 2267 163e FC 37 56                		xor	r5, r6
 2268 1641 ED A4 11                		mov.L	68[r10], r4
 2269 1644 ED A5 0C                		mov.L	48[r10], r5
 2270 1647 FC 37 45                		xor	r4, r5
 2271 164a ED A4 06                		mov.L	24[r10], r4
 2272 164d FC 37 45                		xor	r4, r5
 2273 1650 ED A4 14                		mov.L	80[r10], r4
 2274 1653 FC 37 45                		xor	r4, r5
 2275 1656 66 12                   		mov.L	#1, r2
 2276 1658 EF 51                   		mov.L	r5, r1
 2277 165a 05 00 00 00             		bsr	_rotlFixed
 2278 165e EF 15                   		mov.L	r1, r5
 2279 1660 E7 A5 14                		mov.L	r5, 80[r10]
 2280 1663 ED A5 14                		mov.L	80[r10], r5
 2281 1666 4B 56                   		add	r5, r6
 2282 1668 66 52                   		mov.L	#5, r2
 2283 166a ED A1 02                		mov.L	8[r10], r1
 2284 166d 05 00 00 00             		bsr	_rotlFixed
 2285 1671 EF 15                   		mov.L	r1, r5
 2286 1673 4B 65                   		add	r6, r5
 2287 1675 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2288 167b ED A4 01                		mov.L	4[r10], r4
 2289 167e 4B 45                   		add	r4, r5
 2290 1680 E7 A5 01                		mov.L	r5, 4[r10]
 2291 1683 75 42 1E                		mov.L	#30, r2
 2292 1686 ED A1 03                		mov.L	12[r10], r1
 2293 1689 05 00 00 00             		bsr	_rotlFixed
 2294 168d E7 A1 03                		mov.L	r1, 12[r10]
 504:../src/wolfcrypt/src/sha.c ****         R4(b,c,d,e,a,64); R4(a,b,c,d,e,65); R4(e,a,b,c,d,66); R4(d,e,a,b,c,67);
 2295                             		.loc 2 504 9
 2296 1690 ED A5 02                		mov.L	8[r10], r5
 2297 1693 06 A1 0D A5 03          		xor	12[r10].L, r5
 2298 1698 ED A6 04                		mov.L	16[r10], r6
 2299 169b FC 37 56                		xor	r5, r6
 2300 169e ED A4 12                		mov.L	72[r10], r4
 2301 16a1 ED A5 0D                		mov.L	52[r10], r5
 2302 16a4 FC 37 45                		xor	r4, r5
 2303 16a7 ED A4 07                		mov.L	28[r10], r4
 2304 16aa FC 37 45                		xor	r4, r5
 2305 16ad ED A4 05                		mov.L	20[r10], r4
 2306 16b0 FC 37 45                		xor	r4, r5
 2307 16b3 66 12                   		mov.L	#1, r2
 2308 16b5 EF 51                   		mov.L	r5, r1
 2309 16b7 05 00 00 00             		bsr	_rotlFixed
 2310 16bb EF 15                   		mov.L	r1, r5
 2311 16bd E7 A5 05                		mov.L	r5, 20[r10]
 2312 16c0 ED A5 05                		mov.L	20[r10], r5
 2313 16c3 4B 56                   		add	r5, r6
 2314 16c5 66 52                   		mov.L	#5, r2
 2315 16c7 ED A1 01                		mov.L	4[r10], r1
 2316 16ca 05 00 00 00             		bsr	_rotlFixed
 2317 16ce EF 15                   		mov.L	r1, r5
 2318 16d0 4B 65                   		add	r6, r5
 2319 16d2 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2320 16d8 EC A4                   		mov.L	[r10], r4
 2321 16da 4B 45                   		add	r4, r5
 2322 16dc E3 A5                   		mov.L	r5, [r10]
 2323 16de 75 42 1E                		mov.L	#30, r2
 2324 16e1 ED A1 02                		mov.L	8[r10], r1
 2325 16e4 05 00 00 00             		bsr	_rotlFixed
 2326 16e8 E7 A1 02                		mov.L	r1, 8[r10]
 2327                             		.loc 2 504 27
 2328 16eb ED A5 01                		mov.L	4[r10], r5
 2329 16ee 06 A1 0D A5 02          		xor	8[r10].L, r5
 2330 16f3 ED A6 03                		mov.L	12[r10], r6
 2331 16f6 FC 37 56                		xor	r5, r6
 2332 16f9 ED A4 13                		mov.L	76[r10], r4
 2333 16fc ED A5 0E                		mov.L	56[r10], r5
 2334 16ff FC 37 45                		xor	r4, r5
 2335 1702 ED A4 08                		mov.L	32[r10], r4
 2336 1705 FC 37 45                		xor	r4, r5
 2337 1708 ED A4 06                		mov.L	24[r10], r4
 2338 170b FC 37 45                		xor	r4, r5
 2339 170e 66 12                   		mov.L	#1, r2
 2340 1710 EF 51                   		mov.L	r5, r1
 2341 1712 05 00 00 00             		bsr	_rotlFixed
 2342 1716 EF 15                   		mov.L	r1, r5
 2343 1718 E7 A5 06                		mov.L	r5, 24[r10]
 2344 171b ED A5 06                		mov.L	24[r10], r5
 2345 171e 4B 56                   		add	r5, r6
 2346 1720 66 52                   		mov.L	#5, r2
 2347 1722 EC A1                   		mov.L	[r10], r1
 2348 1724 05 00 00 00             		bsr	_rotlFixed
 2349 1728 EF 15                   		mov.L	r1, r5
 2350 172a 4B 65                   		add	r6, r5
 2351 172c 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2352 1732 ED A4 04                		mov.L	16[r10], r4
 2353 1735 4B 45                   		add	r4, r5
 2354 1737 E7 A5 04                		mov.L	r5, 16[r10]
 2355 173a 75 42 1E                		mov.L	#30, r2
 2356 173d ED A1 01                		mov.L	4[r10], r1
 2357 1740 05 00 00 00             		bsr	_rotlFixed
 2358 1744 E7 A1 01                		mov.L	r1, 4[r10]
 2359                             		.loc 2 504 45
 2360 1747 EC A5                   		mov.L	[r10], r5
 2361 1749 06 A1 0D A5 01          		xor	4[r10].L, r5
 2362 174e ED A6 02                		mov.L	8[r10], r6
 2363 1751 FC 37 56                		xor	r5, r6
 2364 1754 ED A4 14                		mov.L	80[r10], r4
 2365 1757 ED A5 0F                		mov.L	60[r10], r5
 2366 175a FC 37 45                		xor	r4, r5
 2367 175d ED A4 09                		mov.L	36[r10], r4
 2368 1760 FC 37 45                		xor	r4, r5
 2369 1763 ED A4 07                		mov.L	28[r10], r4
 2370 1766 FC 37 45                		xor	r4, r5
 2371 1769 66 12                   		mov.L	#1, r2
 2372 176b EF 51                   		mov.L	r5, r1
 2373 176d 05 00 00 00             		bsr	_rotlFixed
 2374 1771 EF 15                   		mov.L	r1, r5
 2375 1773 E7 A5 07                		mov.L	r5, 28[r10]
 2376 1776 ED A5 07                		mov.L	28[r10], r5
 2377 1779 4B 56                   		add	r5, r6
 2378 177b 66 52                   		mov.L	#5, r2
 2379 177d ED A1 04                		mov.L	16[r10], r1
 2380 1780 05 00 00 00             		bsr	_rotlFixed
 2381 1784 EF 15                   		mov.L	r1, r5
 2382 1786 4B 65                   		add	r6, r5
 2383 1788 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2384 178e ED A4 03                		mov.L	12[r10], r4
 2385 1791 4B 45                   		add	r4, r5
 2386 1793 E7 A5 03                		mov.L	r5, 12[r10]
 2387 1796 75 42 1E                		mov.L	#30, r2
 2388 1799 EC A1                   		mov.L	[r10], r1
 2389 179b 05 00 00 00             		bsr	_rotlFixed
 2390 179f E3 A1                   		mov.L	r1, [r10]
 2391                             		.loc 2 504 63
 2392 17a1 ED A5 04                		mov.L	16[r10], r5
 2393 17a4 06 A0 0D A5             		xor	[r10].L, r5
 2394 17a8 ED A6 01                		mov.L	4[r10], r6
 2395 17ab FC 37 56                		xor	r5, r6
 2396 17ae ED A4 05                		mov.L	20[r10], r4
 2397 17b1 ED A5 10                		mov.L	64[r10], r5
 2398 17b4 FC 37 45                		xor	r4, r5
 2399 17b7 ED A4 0A                		mov.L	40[r10], r4
 2400 17ba FC 37 45                		xor	r4, r5
 2401 17bd ED A4 08                		mov.L	32[r10], r4
 2402 17c0 FC 37 45                		xor	r4, r5
 2403 17c3 66 12                   		mov.L	#1, r2
 2404 17c5 EF 51                   		mov.L	r5, r1
 2405 17c7 05 00 00 00             		bsr	_rotlFixed
 2406 17cb EF 15                   		mov.L	r1, r5
 2407 17cd E7 A5 08                		mov.L	r5, 32[r10]
 2408 17d0 ED A5 08                		mov.L	32[r10], r5
 2409 17d3 4B 56                   		add	r5, r6
 2410 17d5 66 52                   		mov.L	#5, r2
 2411 17d7 ED A1 03                		mov.L	12[r10], r1
 2412 17da 05 00 00 00             		bsr	_rotlFixed
 2413 17de EF 15                   		mov.L	r1, r5
 2414 17e0 4B 65                   		add	r6, r5
 2415 17e2 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2416 17e8 ED A4 02                		mov.L	8[r10], r4
 2417 17eb 4B 45                   		add	r4, r5
 2418 17ed E7 A5 02                		mov.L	r5, 8[r10]
 2419 17f0 75 42 1E                		mov.L	#30, r2
 2420 17f3 ED A1 04                		mov.L	16[r10], r1
 2421 17f6 05 00 00 00             		bsr	_rotlFixed
 2422 17fa E7 A1 04                		mov.L	r1, 16[r10]
 505:../src/wolfcrypt/src/sha.c ****         R4(c,d,e,a,b,68); R4(b,c,d,e,a,69); R4(a,b,c,d,e,70); R4(e,a,b,c,d,71);
 2423                             		.loc 2 505 9
 2424 17fd ED A5 03                		mov.L	12[r10], r5
 2425 1800 06 A1 0D A5 04          		xor	16[r10].L, r5
 2426 1805 EC A6                   		mov.L	[r10], r6
 2427 1807 FC 37 56                		xor	r5, r6
 2428 180a ED A4 06                		mov.L	24[r10], r4
 2429 180d ED A5 11                		mov.L	68[r10], r5
 2430 1810 FC 37 45                		xor	r4, r5
 2431 1813 ED A4 0B                		mov.L	44[r10], r4
 2432 1816 FC 37 45                		xor	r4, r5
 2433 1819 ED A4 09                		mov.L	36[r10], r4
 2434 181c FC 37 45                		xor	r4, r5
 2435 181f 66 12                   		mov.L	#1, r2
 2436 1821 EF 51                   		mov.L	r5, r1
 2437 1823 05 00 00 00             		bsr	_rotlFixed
 2438 1827 EF 15                   		mov.L	r1, r5
 2439 1829 E7 A5 09                		mov.L	r5, 36[r10]
 2440 182c ED A5 09                		mov.L	36[r10], r5
 2441 182f 4B 56                   		add	r5, r6
 2442 1831 66 52                   		mov.L	#5, r2
 2443 1833 ED A1 02                		mov.L	8[r10], r1
 2444 1836 05 00 00 00             		bsr	_rotlFixed
 2445 183a EF 15                   		mov.L	r1, r5
 2446 183c 4B 65                   		add	r6, r5
 2447 183e 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2448 1844 ED A4 01                		mov.L	4[r10], r4
 2449 1847 4B 45                   		add	r4, r5
 2450 1849 E7 A5 01                		mov.L	r5, 4[r10]
 2451 184c 75 42 1E                		mov.L	#30, r2
 2452 184f ED A1 03                		mov.L	12[r10], r1
 2453 1852 05 00 00 00             		bsr	_rotlFixed
 2454 1856 E7 A1 03                		mov.L	r1, 12[r10]
 2455                             		.loc 2 505 27
 2456 1859 ED A5 02                		mov.L	8[r10], r5
 2457 185c 06 A1 0D A5 03          		xor	12[r10].L, r5
 2458 1861 ED A6 04                		mov.L	16[r10], r6
 2459 1864 FC 37 56                		xor	r5, r6
 2460 1867 ED A4 07                		mov.L	28[r10], r4
 2461 186a ED A5 12                		mov.L	72[r10], r5
 2462 186d FC 37 45                		xor	r4, r5
 2463 1870 ED A4 0C                		mov.L	48[r10], r4
 2464 1873 FC 37 45                		xor	r4, r5
 2465 1876 ED A4 0A                		mov.L	40[r10], r4
 2466 1879 FC 37 45                		xor	r4, r5
 2467 187c 66 12                   		mov.L	#1, r2
 2468 187e EF 51                   		mov.L	r5, r1
 2469 1880 05 00 00 00             		bsr	_rotlFixed
 2470 1884 EF 15                   		mov.L	r1, r5
 2471 1886 E7 A5 0A                		mov.L	r5, 40[r10]
 2472 1889 ED A5 0A                		mov.L	40[r10], r5
 2473 188c 4B 56                   		add	r5, r6
 2474 188e 66 52                   		mov.L	#5, r2
 2475 1890 ED A1 01                		mov.L	4[r10], r1
 2476 1893 05 00 00 00             		bsr	_rotlFixed
 2477 1897 EF 15                   		mov.L	r1, r5
 2478 1899 4B 65                   		add	r6, r5
 2479 189b 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2480 18a1 EC A4                   		mov.L	[r10], r4
 2481 18a3 4B 45                   		add	r4, r5
 2482 18a5 E3 A5                   		mov.L	r5, [r10]
 2483 18a7 75 42 1E                		mov.L	#30, r2
 2484 18aa ED A1 02                		mov.L	8[r10], r1
 2485 18ad 05 00 00 00             		bsr	_rotlFixed
 2486 18b1 E7 A1 02                		mov.L	r1, 8[r10]
 2487                             		.loc 2 505 45
 2488 18b4 ED A5 01                		mov.L	4[r10], r5
 2489 18b7 06 A1 0D A5 02          		xor	8[r10].L, r5
 2490 18bc ED A6 03                		mov.L	12[r10], r6
 2491 18bf FC 37 56                		xor	r5, r6
 2492 18c2 ED A4 08                		mov.L	32[r10], r4
 2493 18c5 ED A5 13                		mov.L	76[r10], r5
 2494 18c8 FC 37 45                		xor	r4, r5
 2495 18cb ED A4 0D                		mov.L	52[r10], r4
 2496 18ce FC 37 45                		xor	r4, r5
 2497 18d1 ED A4 0B                		mov.L	44[r10], r4
 2498 18d4 FC 37 45                		xor	r4, r5
 2499 18d7 66 12                   		mov.L	#1, r2
 2500 18d9 EF 51                   		mov.L	r5, r1
 2501 18db 05 00 00 00             		bsr	_rotlFixed
 2502 18df EF 15                   		mov.L	r1, r5
 2503 18e1 E7 A5 0B                		mov.L	r5, 44[r10]
 2504 18e4 ED A5 0B                		mov.L	44[r10], r5
 2505 18e7 4B 56                   		add	r5, r6
 2506 18e9 66 52                   		mov.L	#5, r2
 2507 18eb EC A1                   		mov.L	[r10], r1
 2508 18ed 05 00 00 00             		bsr	_rotlFixed
 2509 18f1 EF 15                   		mov.L	r1, r5
 2510 18f3 4B 65                   		add	r6, r5
 2511 18f5 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2512 18fb ED A4 04                		mov.L	16[r10], r4
 2513 18fe 4B 45                   		add	r4, r5
 2514 1900 E7 A5 04                		mov.L	r5, 16[r10]
 2515 1903 75 42 1E                		mov.L	#30, r2
 2516 1906 ED A1 01                		mov.L	4[r10], r1
 2517 1909 05 00 00 00             		bsr	_rotlFixed
 2518 190d E7 A1 01                		mov.L	r1, 4[r10]
 2519                             		.loc 2 505 63
 2520 1910 EC A5                   		mov.L	[r10], r5
 2521 1912 06 A1 0D A5 01          		xor	4[r10].L, r5
 2522 1917 ED A6 02                		mov.L	8[r10], r6
 2523 191a FC 37 56                		xor	r5, r6
 2524 191d ED A4 09                		mov.L	36[r10], r4
 2525 1920 ED A5 14                		mov.L	80[r10], r5
 2526 1923 FC 37 45                		xor	r4, r5
 2527 1926 ED A4 0E                		mov.L	56[r10], r4
 2528 1929 FC 37 45                		xor	r4, r5
 2529 192c ED A4 0C                		mov.L	48[r10], r4
 2530 192f FC 37 45                		xor	r4, r5
 2531 1932 66 12                   		mov.L	#1, r2
 2532 1934 EF 51                   		mov.L	r5, r1
 2533 1936 05 00 00 00             		bsr	_rotlFixed
 2534 193a EF 15                   		mov.L	r1, r5
 2535 193c E7 A5 0C                		mov.L	r5, 48[r10]
 2536 193f ED A5 0C                		mov.L	48[r10], r5
 2537 1942 4B 56                   		add	r5, r6
 2538 1944 66 52                   		mov.L	#5, r2
 2539 1946 ED A1 04                		mov.L	16[r10], r1
 2540 1949 05 00 00 00             		bsr	_rotlFixed
 2541 194d EF 15                   		mov.L	r1, r5
 2542 194f 4B 65                   		add	r6, r5
 2543 1951 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2544 1957 ED A4 03                		mov.L	12[r10], r4
 2545 195a 4B 45                   		add	r4, r5
 2546 195c E7 A5 03                		mov.L	r5, 12[r10]
 2547 195f 75 42 1E                		mov.L	#30, r2
 2548 1962 EC A1                   		mov.L	[r10], r1
 2549 1964 05 00 00 00             		bsr	_rotlFixed
 2550 1968 E3 A1                   		mov.L	r1, [r10]
 506:../src/wolfcrypt/src/sha.c ****         R4(d,e,a,b,c,72); R4(c,d,e,a,b,73); R4(b,c,d,e,a,74); R4(a,b,c,d,e,75);
 2551                             		.loc 2 506 9
 2552 196a ED A5 04                		mov.L	16[r10], r5
 2553 196d 06 A0 0D A5             		xor	[r10].L, r5
 2554 1971 ED A6 01                		mov.L	4[r10], r6
 2555 1974 FC 37 56                		xor	r5, r6
 2556 1977 ED A4 0A                		mov.L	40[r10], r4
 2557 197a ED A5 05                		mov.L	20[r10], r5
 2558 197d FC 37 45                		xor	r4, r5
 2559 1980 ED A4 0F                		mov.L	60[r10], r4
 2560 1983 FC 37 45                		xor	r4, r5
 2561 1986 ED A4 0D                		mov.L	52[r10], r4
 2562 1989 FC 37 45                		xor	r4, r5
 2563 198c 66 12                   		mov.L	#1, r2
 2564 198e EF 51                   		mov.L	r5, r1
 2565 1990 05 00 00 00             		bsr	_rotlFixed
 2566 1994 EF 15                   		mov.L	r1, r5
 2567 1996 E7 A5 0D                		mov.L	r5, 52[r10]
 2568 1999 ED A5 0D                		mov.L	52[r10], r5
 2569 199c 4B 56                   		add	r5, r6
 2570 199e 66 52                   		mov.L	#5, r2
 2571 19a0 ED A1 03                		mov.L	12[r10], r1
 2572 19a3 05 00 00 00             		bsr	_rotlFixed
 2573 19a7 EF 15                   		mov.L	r1, r5
 2574 19a9 4B 65                   		add	r6, r5
 2575 19ab 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2576 19b1 ED A4 02                		mov.L	8[r10], r4
 2577 19b4 4B 45                   		add	r4, r5
 2578 19b6 E7 A5 02                		mov.L	r5, 8[r10]
 2579 19b9 75 42 1E                		mov.L	#30, r2
 2580 19bc ED A1 04                		mov.L	16[r10], r1
 2581 19bf 05 00 00 00             		bsr	_rotlFixed
 2582 19c3 E7 A1 04                		mov.L	r1, 16[r10]
 2583                             		.loc 2 506 27
 2584 19c6 ED A5 03                		mov.L	12[r10], r5
 2585 19c9 06 A1 0D A5 04          		xor	16[r10].L, r5
 2586 19ce EC A6                   		mov.L	[r10], r6
 2587 19d0 FC 37 56                		xor	r5, r6
 2588 19d3 ED A4 0B                		mov.L	44[r10], r4
 2589 19d6 ED A5 06                		mov.L	24[r10], r5
 2590 19d9 FC 37 45                		xor	r4, r5
 2591 19dc ED A4 10                		mov.L	64[r10], r4
 2592 19df FC 37 45                		xor	r4, r5
 2593 19e2 ED A4 0E                		mov.L	56[r10], r4
 2594 19e5 FC 37 45                		xor	r4, r5
 2595 19e8 66 12                   		mov.L	#1, r2
 2596 19ea EF 51                   		mov.L	r5, r1
 2597 19ec 05 00 00 00             		bsr	_rotlFixed
 2598 19f0 EF 15                   		mov.L	r1, r5
 2599 19f2 E7 A5 0E                		mov.L	r5, 56[r10]
 2600 19f5 ED A5 0E                		mov.L	56[r10], r5
 2601 19f8 4B 56                   		add	r5, r6
 2602 19fa 66 52                   		mov.L	#5, r2
 2603 19fc ED A1 02                		mov.L	8[r10], r1
 2604 19ff 05 00 00 00             		bsr	_rotlFixed
 2605 1a03 EF 15                   		mov.L	r1, r5
 2606 1a05 4B 65                   		add	r6, r5
 2607 1a07 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2608 1a0d ED A4 01                		mov.L	4[r10], r4
 2609 1a10 4B 45                   		add	r4, r5
 2610 1a12 E7 A5 01                		mov.L	r5, 4[r10]
 2611 1a15 75 42 1E                		mov.L	#30, r2
 2612 1a18 ED A1 03                		mov.L	12[r10], r1
 2613 1a1b 05 00 00 00             		bsr	_rotlFixed
 2614 1a1f E7 A1 03                		mov.L	r1, 12[r10]
 2615                             		.loc 2 506 45
 2616 1a22 ED A5 02                		mov.L	8[r10], r5
 2617 1a25 06 A1 0D A5 03          		xor	12[r10].L, r5
 2618 1a2a ED A6 04                		mov.L	16[r10], r6
 2619 1a2d FC 37 56                		xor	r5, r6
 2620 1a30 ED A4 0C                		mov.L	48[r10], r4
 2621 1a33 ED A5 07                		mov.L	28[r10], r5
 2622 1a36 FC 37 45                		xor	r4, r5
 2623 1a39 ED A4 11                		mov.L	68[r10], r4
 2624 1a3c FC 37 45                		xor	r4, r5
 2625 1a3f ED A4 0F                		mov.L	60[r10], r4
 2626 1a42 FC 37 45                		xor	r4, r5
 2627 1a45 66 12                   		mov.L	#1, r2
 2628 1a47 EF 51                   		mov.L	r5, r1
 2629 1a49 05 00 00 00             		bsr	_rotlFixed
 2630 1a4d EF 15                   		mov.L	r1, r5
 2631 1a4f E7 A5 0F                		mov.L	r5, 60[r10]
 2632 1a52 ED A5 0F                		mov.L	60[r10], r5
 2633 1a55 4B 56                   		add	r5, r6
 2634 1a57 66 52                   		mov.L	#5, r2
 2635 1a59 ED A1 01                		mov.L	4[r10], r1
 2636 1a5c 05 00 00 00             		bsr	_rotlFixed
 2637 1a60 EF 15                   		mov.L	r1, r5
 2638 1a62 4B 65                   		add	r6, r5
 2639 1a64 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2640 1a6a EC A4                   		mov.L	[r10], r4
 2641 1a6c 4B 45                   		add	r4, r5
 2642 1a6e E3 A5                   		mov.L	r5, [r10]
 2643 1a70 75 42 1E                		mov.L	#30, r2
 2644 1a73 ED A1 02                		mov.L	8[r10], r1
 2645 1a76 05 00 00 00             		bsr	_rotlFixed
 2646 1a7a E7 A1 02                		mov.L	r1, 8[r10]
 2647                             		.loc 2 506 63
 2648 1a7d ED A5 01                		mov.L	4[r10], r5
 2649 1a80 06 A1 0D A5 02          		xor	8[r10].L, r5
 2650 1a85 ED A6 03                		mov.L	12[r10], r6
 2651 1a88 FC 37 56                		xor	r5, r6
 2652 1a8b ED A4 0D                		mov.L	52[r10], r4
 2653 1a8e ED A5 08                		mov.L	32[r10], r5
 2654 1a91 FC 37 45                		xor	r4, r5
 2655 1a94 ED A4 12                		mov.L	72[r10], r4
 2656 1a97 FC 37 45                		xor	r4, r5
 2657 1a9a ED A4 10                		mov.L	64[r10], r4
 2658 1a9d FC 37 45                		xor	r4, r5
 2659 1aa0 66 12                   		mov.L	#1, r2
 2660 1aa2 EF 51                   		mov.L	r5, r1
 2661 1aa4 05 00 00 00             		bsr	_rotlFixed
 2662 1aa8 EF 15                   		mov.L	r1, r5
 2663 1aaa E7 A5 10                		mov.L	r5, 64[r10]
 2664 1aad ED A5 10                		mov.L	64[r10], r5
 2665 1ab0 4B 56                   		add	r5, r6
 2666 1ab2 66 52                   		mov.L	#5, r2
 2667 1ab4 EC A1                   		mov.L	[r10], r1
 2668 1ab6 05 00 00 00             		bsr	_rotlFixed
 2669 1aba EF 15                   		mov.L	r1, r5
 2670 1abc 4B 65                   		add	r6, r5
 2671 1abe 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2672 1ac4 ED A4 04                		mov.L	16[r10], r4
 2673 1ac7 4B 45                   		add	r4, r5
 2674 1ac9 E7 A5 04                		mov.L	r5, 16[r10]
 2675 1acc 75 42 1E                		mov.L	#30, r2
 2676 1acf ED A1 01                		mov.L	4[r10], r1
 2677 1ad2 05 00 00 00             		bsr	_rotlFixed
 2678 1ad6 E7 A1 01                		mov.L	r1, 4[r10]
 507:../src/wolfcrypt/src/sha.c ****         R4(e,a,b,c,d,76); R4(d,e,a,b,c,77); R4(c,d,e,a,b,78); R4(b,c,d,e,a,79);
 2679                             		.loc 2 507 9
 2680 1ad9 EC A5                   		mov.L	[r10], r5
 2681 1adb 06 A1 0D A5 01          		xor	4[r10].L, r5
 2682 1ae0 ED A6 02                		mov.L	8[r10], r6
 2683 1ae3 FC 37 56                		xor	r5, r6
 2684 1ae6 ED A4 0E                		mov.L	56[r10], r4
 2685 1ae9 ED A5 09                		mov.L	36[r10], r5
 2686 1aec FC 37 45                		xor	r4, r5
 2687 1aef ED A4 13                		mov.L	76[r10], r4
 2688 1af2 FC 37 45                		xor	r4, r5
 2689 1af5 ED A4 11                		mov.L	68[r10], r4
 2690 1af8 FC 37 45                		xor	r4, r5
 2691 1afb 66 12                   		mov.L	#1, r2
 2692 1afd EF 51                   		mov.L	r5, r1
 2693 1aff 05 00 00 00             		bsr	_rotlFixed
 2694 1b03 EF 15                   		mov.L	r1, r5
 2695 1b05 E7 A5 11                		mov.L	r5, 68[r10]
 2696 1b08 ED A5 11                		mov.L	68[r10], r5
 2697 1b0b 4B 56                   		add	r5, r6
 2698 1b0d 66 52                   		mov.L	#5, r2
 2699 1b0f ED A1 04                		mov.L	16[r10], r1
 2700 1b12 05 00 00 00             		bsr	_rotlFixed
 2701 1b16 EF 15                   		mov.L	r1, r5
 2702 1b18 4B 65                   		add	r6, r5
 2703 1b1a 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2704 1b20 ED A4 03                		mov.L	12[r10], r4
 2705 1b23 4B 45                   		add	r4, r5
 2706 1b25 E7 A5 03                		mov.L	r5, 12[r10]
 2707 1b28 75 42 1E                		mov.L	#30, r2
 2708 1b2b EC A1                   		mov.L	[r10], r1
 2709 1b2d 05 00 00 00             		bsr	_rotlFixed
 2710 1b31 E3 A1                   		mov.L	r1, [r10]
 2711                             		.loc 2 507 27
 2712 1b33 ED A5 04                		mov.L	16[r10], r5
 2713 1b36 06 A0 0D A5             		xor	[r10].L, r5
 2714 1b3a ED A6 01                		mov.L	4[r10], r6
 2715 1b3d FC 37 56                		xor	r5, r6
 2716 1b40 ED A4 0F                		mov.L	60[r10], r4
 2717 1b43 ED A5 0A                		mov.L	40[r10], r5
 2718 1b46 FC 37 45                		xor	r4, r5
 2719 1b49 ED A4 14                		mov.L	80[r10], r4
 2720 1b4c FC 37 45                		xor	r4, r5
 2721 1b4f ED A4 12                		mov.L	72[r10], r4
 2722 1b52 FC 37 45                		xor	r4, r5
 2723 1b55 66 12                   		mov.L	#1, r2
 2724 1b57 EF 51                   		mov.L	r5, r1
 2725 1b59 05 00 00 00             		bsr	_rotlFixed
 2726 1b5d EF 15                   		mov.L	r1, r5
 2727 1b5f E7 A5 12                		mov.L	r5, 72[r10]
 2728 1b62 ED A5 12                		mov.L	72[r10], r5
 2729 1b65 4B 56                   		add	r5, r6
 2730 1b67 66 52                   		mov.L	#5, r2
 2731 1b69 ED A1 03                		mov.L	12[r10], r1
 2732 1b6c 05 00 00 00             		bsr	_rotlFixed
 2733 1b70 EF 15                   		mov.L	r1, r5
 2734 1b72 4B 65                   		add	r6, r5
 2735 1b74 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2736 1b7a ED A4 02                		mov.L	8[r10], r4
 2737 1b7d 4B 45                   		add	r4, r5
 2738 1b7f E7 A5 02                		mov.L	r5, 8[r10]
 2739 1b82 75 42 1E                		mov.L	#30, r2
 2740 1b85 ED A1 04                		mov.L	16[r10], r1
 2741 1b88 05 00 00 00             		bsr	_rotlFixed
 2742 1b8c E7 A1 04                		mov.L	r1, 16[r10]
 2743                             		.loc 2 507 45
 2744 1b8f ED A5 03                		mov.L	12[r10], r5
 2745 1b92 06 A1 0D A5 04          		xor	16[r10].L, r5
 2746 1b97 EC A6                   		mov.L	[r10], r6
 2747 1b99 FC 37 56                		xor	r5, r6
 2748 1b9c ED A4 10                		mov.L	64[r10], r4
 2749 1b9f ED A5 0B                		mov.L	44[r10], r5
 2750 1ba2 FC 37 45                		xor	r4, r5
 2751 1ba5 ED A4 05                		mov.L	20[r10], r4
 2752 1ba8 FC 37 45                		xor	r4, r5
 2753 1bab ED A4 13                		mov.L	76[r10], r4
 2754 1bae FC 37 45                		xor	r4, r5
 2755 1bb1 66 12                   		mov.L	#1, r2
 2756 1bb3 EF 51                   		mov.L	r5, r1
 2757 1bb5 05 00 00 00             		bsr	_rotlFixed
 2758 1bb9 EF 15                   		mov.L	r1, r5
 2759 1bbb E7 A5 13                		mov.L	r5, 76[r10]
 2760 1bbe ED A5 13                		mov.L	76[r10], r5
 2761 1bc1 4B 56                   		add	r5, r6
 2762 1bc3 66 52                   		mov.L	#5, r2
 2763 1bc5 ED A1 02                		mov.L	8[r10], r1
 2764 1bc8 05 00 00 00             		bsr	_rotlFixed
 2765 1bcc EF 15                   		mov.L	r1, r5
 2766 1bce 4B 65                   		add	r6, r5
 2767 1bd0 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2768 1bd6 ED A4 01                		mov.L	4[r10], r4
 2769 1bd9 4B 45                   		add	r4, r5
 2770 1bdb E7 A5 01                		mov.L	r5, 4[r10]
 2771 1bde 75 42 1E                		mov.L	#30, r2
 2772 1be1 ED A1 03                		mov.L	12[r10], r1
 2773 1be4 05 00 00 00             		bsr	_rotlFixed
 2774 1be8 E7 A1 03                		mov.L	r1, 12[r10]
 2775                             		.loc 2 507 63
 2776 1beb ED A5 02                		mov.L	8[r10], r5
 2777 1bee 06 A1 0D A5 03          		xor	12[r10].L, r5
 2778 1bf3 ED A6 04                		mov.L	16[r10], r6
 2779 1bf6 FC 37 56                		xor	r5, r6
 2780 1bf9 ED A4 11                		mov.L	68[r10], r4
 2781 1bfc ED A5 0C                		mov.L	48[r10], r5
 2782 1bff FC 37 45                		xor	r4, r5
 2783 1c02 ED A4 06                		mov.L	24[r10], r4
 2784 1c05 FC 37 45                		xor	r4, r5
 2785 1c08 ED A4 14                		mov.L	80[r10], r4
 2786 1c0b FC 37 45                		xor	r4, r5
 2787 1c0e 66 12                   		mov.L	#1, r2
 2788 1c10 EF 51                   		mov.L	r5, r1
 2789 1c12 05 00 00 00             		bsr	_rotlFixed
 2790 1c16 EF 15                   		mov.L	r1, r5
 2791 1c18 E7 A5 14                		mov.L	r5, 80[r10]
 2792 1c1b ED A5 14                		mov.L	80[r10], r5
 2793 1c1e 4B 56                   		add	r5, r6
 2794 1c20 66 52                   		mov.L	#5, r2
 2795 1c22 ED A1 01                		mov.L	4[r10], r1
 2796 1c25 05 00 00 00             		bsr	_rotlFixed
 2797 1c29 EF 15                   		mov.L	r1, r5
 2798 1c2b 4B 65                   		add	r6, r5
 2799 1c2d 70 55 D6 C1 62 CA       		add	#-899497514, r5
 2800 1c33 EC A4                   		mov.L	[r10], r4
 2801 1c35 4B 45                   		add	r4, r5
 2802 1c37 E3 A5                   		mov.L	r5, [r10]
 2803 1c39 75 42 1E                		mov.L	#30, r2
 2804 1c3c ED A1 02                		mov.L	8[r10], r1
 2805 1c3f 05 00 00 00             		bsr	_rotlFixed
 2806 1c43 E7 A1 02                		mov.L	r1, 8[r10]
 508:../src/wolfcrypt/src/sha.c ****     #endif
 509:../src/wolfcrypt/src/sha.c **** 
 510:../src/wolfcrypt/src/sha.c ****         /* Add the working vars back into digest state[] */
 511:../src/wolfcrypt/src/sha.c ****         sha->digest[0] += a;
 2807                             		.loc 2 511 24
 2808 1c46 ED A5 15                		mov.L	84[r10], r5
 2809 1c49 AC DD                   		mov.L	76[r5], r5
 2810 1c4b EF 54                   		mov.L	r5, r4
 2811 1c4d 06 88 A4                		add	[r10].L, r4
 2812 1c50 ED A5 15                		mov.L	84[r10], r5
 2813 1c53 A4 DC                   		mov.L	r4, 76[r5]
 512:../src/wolfcrypt/src/sha.c ****         sha->digest[1] += b;
 2814                             		.loc 2 512 24
 2815 1c55 ED A5 15                		mov.L	84[r10], r5
 2816 1c58 AD 55                   		mov.L	80[r5], r5
 2817 1c5a EF 54                   		mov.L	r5, r4
 2818 1c5c 06 89 A4 01             		add	4[r10].L, r4
 2819 1c60 ED A5 15                		mov.L	84[r10], r5
 2820 1c63 A5 54                   		mov.L	r4, 80[r5]
 513:../src/wolfcrypt/src/sha.c ****         sha->digest[2] += c;
 2821                             		.loc 2 513 24
 2822 1c65 ED A5 15                		mov.L	84[r10], r5
 2823 1c68 AD 5D                   		mov.L	84[r5], r5
 2824 1c6a EF 54                   		mov.L	r5, r4
 2825 1c6c 06 89 A4 02             		add	8[r10].L, r4
 2826 1c70 ED A5 15                		mov.L	84[r10], r5
 2827 1c73 A5 5C                   		mov.L	r4, 84[r5]
 514:../src/wolfcrypt/src/sha.c ****         sha->digest[3] += d;
 2828                             		.loc 2 514 24
 2829 1c75 ED A5 15                		mov.L	84[r10], r5
 2830 1c78 AD D5                   		mov.L	88[r5], r5
 2831 1c7a EF 54                   		mov.L	r5, r4
 2832 1c7c 06 89 A4 03             		add	12[r10].L, r4
 2833 1c80 ED A5 15                		mov.L	84[r10], r5
 2834 1c83 A5 D4                   		mov.L	r4, 88[r5]
 515:../src/wolfcrypt/src/sha.c ****         sha->digest[4] += e;
 2835                             		.loc 2 515 24
 2836 1c85 ED A5 15                		mov.L	84[r10], r5
 2837 1c88 AD DD                   		mov.L	92[r5], r5
 2838 1c8a EF 54                   		mov.L	r5, r4
 2839 1c8c 06 89 A4 04             		add	16[r10].L, r4
 2840 1c90 ED A5 15                		mov.L	84[r10], r5
 2841 1c93 A5 DC                   		mov.L	r4, 92[r5]
 516:../src/wolfcrypt/src/sha.c **** 
 517:../src/wolfcrypt/src/sha.c ****         (void)data; /* Not used */
 518:../src/wolfcrypt/src/sha.c **** 
 519:../src/wolfcrypt/src/sha.c ****         return 0;
 2842                             		.loc 2 519 16
 2843 1c95 66 05                   		mov.L	#0, r5
 520:../src/wolfcrypt/src/sha.c ****     }
 2844                             		.loc 2 520 5
 2845 1c97 EF 51                   		mov.L	r5, r1
 2846 1c99 71 00 5C                		add	#0x5c, r0
 2847 1c9c 7E B6                   		pop	r6
 2848 1c9e 7E BA                   		pop	r10
 2849 1ca0 02                      		rts
 2850                             	.LFE45:
 2852                             		.section	.text.wc_InitSha_ex,"ax",@progbits
 2853                             		.global	_wc_InitSha_ex
 2855                             	_wc_InitSha_ex:
 2856                             	.LFB46:
 521:../src/wolfcrypt/src/sha.c **** #endif /* !USE_CUSTOM_SHA_TRANSFORM */
 522:../src/wolfcrypt/src/sha.c **** 
 523:../src/wolfcrypt/src/sha.c **** 
 524:../src/wolfcrypt/src/sha.c **** int wc_InitSha_ex(wc_Sha* sha, void* heap, int devId)
 525:../src/wolfcrypt/src/sha.c **** {
 2857                             		.loc 2 525 1
 2858 0000 7E AA                   		push.l	r10
 2859                             	.LCFI16:
 2860 0002 71 0A F0                		add	#-16, r0, r10
 2861                             	.LCFI17:
 2862 0005 EF A0                   		mov.L	r10, r0
 2863 0007 E7 A1 01                		mov.L	r1, 4[r10]
 2864 000a E7 A2 02                		mov.L	r2, 8[r10]
 2865 000d E7 A3 03                		mov.L	r3, 12[r10]
 526:../src/wolfcrypt/src/sha.c ****     int ret = 0;
 2866                             		.loc 2 526 9
 2867 0010 F8 A6 00                		mov.L	#0, [r10]
 527:../src/wolfcrypt/src/sha.c **** 
 528:../src/wolfcrypt/src/sha.c ****     if (sha == NULL)
 2868                             		.loc 2 528 8
 2869 0013 ED A5 01                		mov.L	4[r10], r5
 2870 0016 61 05                   		cmp	#0, r5
 2871 0018 1F                      		bne	.L18
 529:../src/wolfcrypt/src/sha.c ****         return BAD_FUNC_ARG;
 2872                             		.loc 2 529 16
 2873 0019 FB 5A 53 FF             		mov.L	#-173, r5
 2874 001d 2E 1D                   		bra	.L19
 2875                             	.L18:
 530:../src/wolfcrypt/src/sha.c **** 
 531:../src/wolfcrypt/src/sha.c ****     sha->heap = heap;
 2876                             		.loc 2 531 15
 2877 001f ED A5 01                		mov.L	4[r10], r5
 2878 0022 ED A4 02                		mov.L	8[r10], r4
 2879 0025 A6 54                   		mov.L	r4, 96[r5]
 532:../src/wolfcrypt/src/sha.c **** #ifdef WOLF_CRYPTO_CB
 533:../src/wolfcrypt/src/sha.c ****     sha->devId = devId;
 534:../src/wolfcrypt/src/sha.c ****     sha->devCtx = NULL;
 535:../src/wolfcrypt/src/sha.c **** #endif
 536:../src/wolfcrypt/src/sha.c **** 
 537:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 538:../src/wolfcrypt/src/sha.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 539:../src/wolfcrypt/src/sha.c ****     sha->ctx.mode = ESP32_SHA_INIT;
 540:../src/wolfcrypt/src/sha.c ****     sha->ctx.isfirstblock = 1;
 541:../src/wolfcrypt/src/sha.c **** #endif
 542:../src/wolfcrypt/src/sha.c ****     ret = InitSha(sha);
 2880                             		.loc 2 542 11
 2881 0027 ED A1 01                		mov.L	4[r10], r1
 2882 002a 05 00 00 00             		bsr	_InitSha
 2883 002e E3 A1                   		mov.L	r1, [r10]
 543:../src/wolfcrypt/src/sha.c ****     if (ret != 0)
 2884                             		.loc 2 543 8
 2885 0030 EC A5                   		mov.L	[r10], r5
 2886 0032 61 05                   		cmp	#0, r5
 2887 0034 14                      		beq	.L20
 544:../src/wolfcrypt/src/sha.c ****         return ret;
 2888                             		.loc 2 544 16
 2889 0035 EC A5                   		mov.L	[r10], r5
 2890 0037 0B                      		bra	.L19
 2891                             	.L20:
 545:../src/wolfcrypt/src/sha.c **** 
 546:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA)
 547:../src/wolfcrypt/src/sha.c ****     ret = wolfAsync_DevCtxInit(&sha->asyncDev, WOLFSSL_ASYNC_MARKER_SHA,
 548:../src/wolfcrypt/src/sha.c ****                                                             sha->heap, devId);
 549:../src/wolfcrypt/src/sha.c **** #else
 550:../src/wolfcrypt/src/sha.c ****     (void)devId;
 551:../src/wolfcrypt/src/sha.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
 552:../src/wolfcrypt/src/sha.c **** 
 553:../src/wolfcrypt/src/sha.c ****     return ret;
 2892                             		.loc 2 553 12
 2893 0038 EC A5                   		mov.L	[r10], r5
 2894                             	.L19:
 554:../src/wolfcrypt/src/sha.c **** }
 2895                             		.loc 2 554 1
 2896 003a EF 51                   		mov.L	r5, r1
 2897 003c 3F AA 05                		rtsd	#20, r10-r10
 2898                             	.LFE46:
 2900                             		.section	.text.wc_ShaUpdate,"ax",@progbits
 2901                             		.global	_wc_ShaUpdate
 2903                             	_wc_ShaUpdate:
 2904                             	.LFB47:
 555:../src/wolfcrypt/src/sha.c **** 
 556:../src/wolfcrypt/src/sha.c **** /* do block size increments/updates */
 557:../src/wolfcrypt/src/sha.c **** int wc_ShaUpdate(wc_Sha* sha, const byte* data, word32 len)
 558:../src/wolfcrypt/src/sha.c **** {
 2905                             		.loc 2 558 1
 2906 0000 7E AA                   		push.l	r10
 2907                             	.LCFI18:
 2908 0002 71 0A E4                		add	#-28, r0, r10
 2909                             	.LCFI19:
 2910 0005 EF A0                   		mov.L	r10, r0
 2911 0007 E7 A1 04                		mov.L	r1, 16[r10]
 2912 000a E7 A2 05                		mov.L	r2, 20[r10]
 2913 000d E7 A3 06                		mov.L	r3, 24[r10]
 559:../src/wolfcrypt/src/sha.c ****     int ret = 0;
 2914                             		.loc 2 559 9
 2915 0010 F8 A6 00                		mov.L	#0, [r10]
 560:../src/wolfcrypt/src/sha.c ****     word32 blocksLen;
 561:../src/wolfcrypt/src/sha.c ****     byte* local;
 562:../src/wolfcrypt/src/sha.c **** 
 563:../src/wolfcrypt/src/sha.c ****     if (sha == NULL || (data == NULL && len > 0)) {
 2916                             		.loc 2 563 8
 2917 0013 ED A5 04                		mov.L	16[r10], r5
 2918 0016 61 05                   		cmp	#0, r5
 2919 0018 20 0F                   		beq	.L22
 2920                             		.loc 2 563 21 discriminator 1
 2921 001a ED A5 05                		mov.L	20[r10], r5
 2922 001d 61 05                   		cmp	#0, r5
 2923 001f 21 0F                   		bne	.L23
 2924                             		.loc 2 563 38 discriminator 2
 2925 0021 ED A5 06                		mov.L	24[r10], r5
 2926 0024 61 05                   		cmp	#0, r5
 2927 0026 10                      		beq	.L23
 2928                             	.L22:
 564:../src/wolfcrypt/src/sha.c ****         return BAD_FUNC_ARG;
 2929                             		.loc 2 564 16
 2930 0027 FB 5A 53 FF             		mov.L	#-173, r5
 2931 002b 38 38 01                		bra	.L24
 2932                             	.L23:
 565:../src/wolfcrypt/src/sha.c ****     }
 566:../src/wolfcrypt/src/sha.c **** 
 567:../src/wolfcrypt/src/sha.c ****     if (data == NULL && len == 0) {
 2933                             		.loc 2 567 8
 2934 002e ED A5 05                		mov.L	20[r10], r5
 2935 0031 61 05                   		cmp	#0, r5
 2936 0033 21 0D                   		bne	.L25
 2937                             		.loc 2 567 22 discriminator 1
 2938 0035 ED A5 06                		mov.L	24[r10], r5
 2939 0038 61 05                   		cmp	#0, r5
 2940 003a 1E                      		bne	.L25
 568:../src/wolfcrypt/src/sha.c ****         /* valid, but do nothing */
 569:../src/wolfcrypt/src/sha.c ****         return 0;
 2941                             		.loc 2 569 16
 2942 003b 66 05                   		mov.L	#0, r5
 2943 003d 38 26 01                		bra	.L24
 2944                             	.L25:
 570:../src/wolfcrypt/src/sha.c ****     }
 571:../src/wolfcrypt/src/sha.c **** 
 572:../src/wolfcrypt/src/sha.c **** #ifdef WOLF_CRYPTO_CB
 573:../src/wolfcrypt/src/sha.c ****     if (sha->devId != INVALID_DEVID) {
 574:../src/wolfcrypt/src/sha.c ****         ret = wc_CryptoCb_ShaHash(sha, data, len, NULL);
 575:../src/wolfcrypt/src/sha.c ****         if (ret != CRYPTOCB_UNAVAILABLE)
 576:../src/wolfcrypt/src/sha.c ****             return ret;
 577:../src/wolfcrypt/src/sha.c ****         ret = 0; /* reset ret */
 578:../src/wolfcrypt/src/sha.c ****         /* fall-through when unavailable */
 579:../src/wolfcrypt/src/sha.c ****     }
 580:../src/wolfcrypt/src/sha.c **** #endif
 581:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA)
 582:../src/wolfcrypt/src/sha.c ****     if (sha->asyncDev.marker == WOLFSSL_ASYNC_MARKER_SHA) {
 583:../src/wolfcrypt/src/sha.c ****     #if defined(HAVE_INTEL_QA)
 584:../src/wolfcrypt/src/sha.c ****         return IntelQaSymSha(&sha->asyncDev, NULL, data, len);
 585:../src/wolfcrypt/src/sha.c ****     #endif
 586:../src/wolfcrypt/src/sha.c ****     }
 587:../src/wolfcrypt/src/sha.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
 588:../src/wolfcrypt/src/sha.c **** 
 589:../src/wolfcrypt/src/sha.c ****     /* check that internal buffLen is valid */
 590:../src/wolfcrypt/src/sha.c ****     if (sha->buffLen >= WC_SHA_BLOCK_SIZE)
 2945                             		.loc 2 590 12
 2946 0040 ED A5 04                		mov.L	16[r10], r5
 2947 0043 EC 55                   		mov.L	[r5], r5
 2948                             		.loc 2 590 8
 2949 0045 75 55 3F                		cmp	#63, r5
 2950 0048 25 09                   		bleu	.L26
 591:../src/wolfcrypt/src/sha.c ****         return BUFFER_E;
 2951                             		.loc 2 591 16
 2952 004a FB 5A 7C FF             		mov.L	#-132, r5
 2953 004e 38 15 01                		bra	.L24
 2954                             	.L26:
 592:../src/wolfcrypt/src/sha.c **** 
 593:../src/wolfcrypt/src/sha.c ****     /* add length for final */
 594:../src/wolfcrypt/src/sha.c ****     AddLength(sha, len);
 2955                             		.loc 2 594 5
 2956 0051 ED A2 06                		mov.L	24[r10], r2
 2957 0054 ED A1 04                		mov.L	16[r10], r1
 2958 0057 05 00 00 00             		bsr	_AddLength
 595:../src/wolfcrypt/src/sha.c **** 
 596:../src/wolfcrypt/src/sha.c ****     local = (byte*)sha->buffer;
 2959                             		.loc 2 596 11
 2960 005b ED A5 04                		mov.L	16[r10], r5
 2961 005e 62 C5                   		add	#12, r5
 2962 0060 E7 A5 01                		mov.L	r5, 4[r10]
 597:../src/wolfcrypt/src/sha.c **** 
 598:../src/wolfcrypt/src/sha.c ****     /* process any remainder from previous operation */
 599:../src/wolfcrypt/src/sha.c ****     if (sha->buffLen > 0) {
 2963                             		.loc 2 599 12
 2964 0063 ED A5 04                		mov.L	16[r10], r5
 2965 0066 EC 55                   		mov.L	[r5], r5
 2966                             		.loc 2 599 8
 2967 0068 61 05                   		cmp	#0, r5
 2968 006a 3A D3 00                		beq	.L29
 600:../src/wolfcrypt/src/sha.c ****         blocksLen = min(len, WC_SHA_BLOCK_SIZE - sha->buffLen);
 2969                             		.loc 2 600 53
 2970 006d ED A5 04                		mov.L	16[r10], r5
 2971 0070 EC 55                   		mov.L	[r5], r5
 2972                             		.loc 2 600 21
 2973 0072 75 44 40                		mov.L	#0x40, r4
 2974 0075 FF 05 54                		sub	r5, r4, r5
 2975 0078 EF 52                   		mov.L	r5, r2
 2976 007a ED A1 06                		mov.L	24[r10], r1
 2977 007d 05 00 00 00             		bsr	_min
 2978 0081 E7 A1 02                		mov.L	r1, 8[r10]
 601:../src/wolfcrypt/src/sha.c ****         XMEMCPY(&local[sha->buffLen], data, blocksLen);
 2979                             		.loc 2 601 9
 2980 0084 ED A5 04                		mov.L	16[r10], r5
 2981 0087 EC 55                   		mov.L	[r5], r5
 2982 0089 ED A4 01                		mov.L	4[r10], r4
 2983 008c 4B 45                   		add	r4, r5
 2984 008e ED A3 02                		mov.L	8[r10], r3
 2985 0091 ED A2 05                		mov.L	20[r10], r2
 2986 0094 EF 51                   		mov.L	r5, r1
 2987 0096 05 00 00 00             		bsr	_memcpy
 602:../src/wolfcrypt/src/sha.c **** 
 603:../src/wolfcrypt/src/sha.c ****         sha->buffLen += blocksLen;
 2988                             		.loc 2 603 22
 2989 009a ED A5 04                		mov.L	16[r10], r5
 2990 009d EC 55                   		mov.L	[r5], r5
 2991 009f EF 54                   		mov.L	r5, r4
 2992 00a1 06 89 A4 02             		add	8[r10].L, r4
 2993 00a5 ED A5 04                		mov.L	16[r10], r5
 2994 00a8 E3 54                   		mov.L	r4, [r5]
 604:../src/wolfcrypt/src/sha.c ****         data         += blocksLen;
 2995                             		.loc 2 604 22
 2996 00aa ED A5 05                		mov.L	20[r10], r5
 2997 00ad 06 89 A5 02             		add	8[r10].L, r5
 2998 00b1 E7 A5 05                		mov.L	r5, 20[r10]
 605:../src/wolfcrypt/src/sha.c ****         len          -= blocksLen;
 2999                             		.loc 2 605 22
 3000 00b4 ED A4 06                		mov.L	24[r10], r4
 3001 00b7 ED A5 02                		mov.L	8[r10], r5
 3002 00ba FF 05 54                		sub	r5, r4, r5
 3003 00bd E7 A5 06                		mov.L	r5, 24[r10]
 606:../src/wolfcrypt/src/sha.c **** 
 607:../src/wolfcrypt/src/sha.c ****         if (sha->buffLen == WC_SHA_BLOCK_SIZE) {
 3004                             		.loc 2 607 16
 3005 00c0 ED A5 04                		mov.L	16[r10], r5
 3006 00c3 EC 55                   		mov.L	[r5], r5
 3007                             		.loc 2 607 12
 3008 00c5 75 55 40                		cmp	#0x40, r5
 3009 00c8 21 75                   		bne	.L29
 608:../src/wolfcrypt/src/sha.c ****         #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
 609:../src/wolfcrypt/src/sha.c ****             ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 3010                             		.loc 2 609 33
 3011 00ca ED A5 04                		mov.L	16[r10], r5
 3012 00cd 71 54 0C                		add	#12, r5, r4
 3013                             		.loc 2 609 46
 3014 00d0 ED A5 04                		mov.L	16[r10], r5
 3015 00d3 62 C5                   		add	#12, r5
 3016                             		.loc 2 609 13
 3017 00d5 75 43 40                		mov.L	#0x40, r3
 3018 00d8 EF 52                   		mov.L	r5, r2
 3019 00da EF 41                   		mov.L	r4, r1
 3020 00dc 05 00 00 00             		bsr	_ByteReverseWords
 610:../src/wolfcrypt/src/sha.c ****         #endif
 611:../src/wolfcrypt/src/sha.c **** 
 612:../src/wolfcrypt/src/sha.c ****         #if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 613:../src/wolfcrypt/src/sha.c ****             !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 614:../src/wolfcrypt/src/sha.c ****             if (sha->ctx.mode == ESP32_SHA_INIT) {
 615:../src/wolfcrypt/src/sha.c ****                 esp_sha_try_hw_lock(&sha->ctx);
 616:../src/wolfcrypt/src/sha.c ****             }
 617:../src/wolfcrypt/src/sha.c ****             if (sha->ctx.mode == ESP32_SHA_SW) {
 618:../src/wolfcrypt/src/sha.c ****                 ret = XTRANSFORM(sha, (const byte*)local);
 619:../src/wolfcrypt/src/sha.c ****             } else {
 620:../src/wolfcrypt/src/sha.c ****                 esp_sha_process(sha, (const byte*)local);
 621:../src/wolfcrypt/src/sha.c ****             }
 622:../src/wolfcrypt/src/sha.c ****         #else
 623:../src/wolfcrypt/src/sha.c ****             ret = XTRANSFORM(sha, (const byte*)local);
 3021                             		.loc 2 623 19
 3022 00e0 ED A2 01                		mov.L	4[r10], r2
 3023 00e3 ED A1 04                		mov.L	16[r10], r1
 3024 00e6 05 00 00 00             		bsr	_Transform
 3025 00ea E3 A1                   		mov.L	r1, [r10]
 624:../src/wolfcrypt/src/sha.c ****         #endif
 625:../src/wolfcrypt/src/sha.c ****             if (ret != 0)
 3026                             		.loc 2 625 16
 3027 00ec EC A5                   		mov.L	[r10], r5
 3028 00ee 61 05                   		cmp	#0, r5
 3029 00f0 15                      		beq	.L28
 626:../src/wolfcrypt/src/sha.c ****                 return ret;
 3030                             		.loc 2 626 24
 3031 00f1 EC A5                   		mov.L	[r10], r5
 3032 00f3 2E 70                   		bra	.L24
 3033                             	.L28:
 627:../src/wolfcrypt/src/sha.c **** 
 628:../src/wolfcrypt/src/sha.c ****             sha->buffLen = 0;
 3034                             		.loc 2 628 26
 3035 00f5 ED A5 04                		mov.L	16[r10], r5
 3036 00f8 F8 56 00                		mov.L	#0, [r5]
 629:../src/wolfcrypt/src/sha.c ****         }
 630:../src/wolfcrypt/src/sha.c ****     }
 631:../src/wolfcrypt/src/sha.c **** 
 632:../src/wolfcrypt/src/sha.c ****     /* process blocks */
 633:../src/wolfcrypt/src/sha.c **** #ifdef XTRANSFORM_LEN
 634:../src/wolfcrypt/src/sha.c ****     /* get number of blocks */
 635:../src/wolfcrypt/src/sha.c ****     /* 64-1 = 0x3F (~ Inverted = 0xFFFFFFC0) */
 636:../src/wolfcrypt/src/sha.c ****     /* len (masked by 0xFFFFFFC0) returns block aligned length */
 637:../src/wolfcrypt/src/sha.c ****     blocksLen = len & ~(WC_SHA_BLOCK_SIZE-1);
 638:../src/wolfcrypt/src/sha.c ****     if (blocksLen > 0) {
 639:../src/wolfcrypt/src/sha.c ****         /* Byte reversal performed in function if required. */
 640:../src/wolfcrypt/src/sha.c ****         XTRANSFORM_LEN(sha, data, blocksLen);
 641:../src/wolfcrypt/src/sha.c ****         data += blocksLen;
 642:../src/wolfcrypt/src/sha.c ****         len  -= blocksLen;
 643:../src/wolfcrypt/src/sha.c ****     }
 644:../src/wolfcrypt/src/sha.c **** #else
 645:../src/wolfcrypt/src/sha.c ****     while (len >= WC_SHA_BLOCK_SIZE) {
 3037                             		.loc 2 645 11
 3038 00fb 2E 42                   		bra	.L29
 3039                             	.L30:
 3040                             	.LBB2:
 646:../src/wolfcrypt/src/sha.c ****         word32* local32 = sha->buffer;
 3041                             		.loc 2 646 17
 3042 00fd ED A5 04                		mov.L	16[r10], r5
 3043 0100 62 C5                   		add	#12, r5
 3044 0102 E7 A5 03                		mov.L	r5, 12[r10]
 647:../src/wolfcrypt/src/sha.c ****         /* optimization to avoid memcpy if data pointer is properly aligned */
 648:../src/wolfcrypt/src/sha.c ****         /* Little Endian requires byte swap, so can't use data directly */
 649:../src/wolfcrypt/src/sha.c ****     #if defined(WC_HASH_DATA_ALIGNMENT) && !defined(LITTLE_ENDIAN_ORDER)
 650:../src/wolfcrypt/src/sha.c ****         if (((wc_ptr_t)data % WC_HASH_DATA_ALIGNMENT) == 0) {
 651:../src/wolfcrypt/src/sha.c ****             local32 = (word32*)data;
 652:../src/wolfcrypt/src/sha.c ****         }
 653:../src/wolfcrypt/src/sha.c ****         else
 654:../src/wolfcrypt/src/sha.c ****     #endif
 655:../src/wolfcrypt/src/sha.c ****         {
 656:../src/wolfcrypt/src/sha.c ****             XMEMCPY(local32, data, WC_SHA_BLOCK_SIZE);
 3045                             		.loc 2 656 13
 3046 0105 75 43 40                		mov.L	#0x40, r3
 3047 0108 ED A2 05                		mov.L	20[r10], r2
 3048 010b ED A1 03                		mov.L	12[r10], r1
 3049 010e 05 00 00 00             		bsr	_memcpy
 657:../src/wolfcrypt/src/sha.c ****         }
 658:../src/wolfcrypt/src/sha.c **** 
 659:../src/wolfcrypt/src/sha.c ****         data += WC_SHA_BLOCK_SIZE;
 3050                             		.loc 2 659 14
 3051 0112 ED A5 05                		mov.L	20[r10], r5
 3052 0115 71 55 40                		add	#0x40, r5
 3053 0118 E7 A5 05                		mov.L	r5, 20[r10]
 660:../src/wolfcrypt/src/sha.c ****         len  -= WC_SHA_BLOCK_SIZE;
 3054                             		.loc 2 660 14
 3055 011b ED A5 06                		mov.L	24[r10], r5
 3056 011e 71 55 C0                		add	#-64, r5
 3057 0121 E7 A5 06                		mov.L	r5, 24[r10]
 661:../src/wolfcrypt/src/sha.c **** 
 662:../src/wolfcrypt/src/sha.c ****     #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
 663:../src/wolfcrypt/src/sha.c ****         ByteReverseWords(local32, local32, WC_SHA_BLOCK_SIZE);
 3058                             		.loc 2 663 9
 3059 0124 75 43 40                		mov.L	#0x40, r3
 3060 0127 ED A2 03                		mov.L	12[r10], r2
 3061 012a ED A1 03                		mov.L	12[r10], r1
 3062 012d 05 00 00 00             		bsr	_ByteReverseWords
 664:../src/wolfcrypt/src/sha.c ****     #endif
 665:../src/wolfcrypt/src/sha.c **** 
 666:../src/wolfcrypt/src/sha.c ****     #if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 667:../src/wolfcrypt/src/sha.c ****         !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 668:../src/wolfcrypt/src/sha.c ****         if (sha->ctx.mode == ESP32_SHA_INIT){
 669:../src/wolfcrypt/src/sha.c ****             esp_sha_try_hw_lock(&sha->ctx);
 670:../src/wolfcrypt/src/sha.c ****         }
 671:../src/wolfcrypt/src/sha.c ****         if (sha->ctx.mode == ESP32_SHA_SW){
 672:../src/wolfcrypt/src/sha.c ****             ret = XTRANSFORM(sha, (const byte*)local32);
 673:../src/wolfcrypt/src/sha.c ****         } else {
 674:../src/wolfcrypt/src/sha.c ****             esp_sha_process(sha, (const byte*)local32);
 675:../src/wolfcrypt/src/sha.c ****         }
 676:../src/wolfcrypt/src/sha.c ****     #else
 677:../src/wolfcrypt/src/sha.c ****         ret = XTRANSFORM(sha, (const byte*)local32);
 3063                             		.loc 2 677 15
 3064 0131 ED A2 03                		mov.L	12[r10], r2
 3065 0134 ED A1 04                		mov.L	16[r10], r1
 3066 0137 05 00 00 00             		bsr	_Transform
 3067 013b E3 A1                   		mov.L	r1, [r10]
 3068                             		.balign 8,3,1
 3069                             	.L29:
 3070                             	.LBE2:
 645:../src/wolfcrypt/src/sha.c ****         word32* local32 = sha->buffer;
 3071                             		.loc 2 645 11
 3072 013d ED A5 06                		mov.L	24[r10], r5
 3073 0140 75 55 3F                		cmp	#63, r5
 3074 0143 24 BA                   		bgtu	.L30
 678:../src/wolfcrypt/src/sha.c ****     #endif
 679:../src/wolfcrypt/src/sha.c ****     }
 680:../src/wolfcrypt/src/sha.c **** #endif /* XTRANSFORM_LEN */
 681:../src/wolfcrypt/src/sha.c **** 
 682:../src/wolfcrypt/src/sha.c ****     /* save remainder */
 683:../src/wolfcrypt/src/sha.c ****     if (len > 0) {
 3075                             		.loc 2 683 8
 3076 0145 ED A5 06                		mov.L	24[r10], r5
 3077 0148 61 05                   		cmp	#0, r5
 3078 014a 20 17                   		beq	.L31
 684:../src/wolfcrypt/src/sha.c ****         XMEMCPY(local, data, len);
 3079                             		.loc 2 684 9
 3080 014c ED A3 06                		mov.L	24[r10], r3
 3081 014f ED A2 05                		mov.L	20[r10], r2
 3082 0152 ED A1 01                		mov.L	4[r10], r1
 3083 0155 05 00 00 00             		bsr	_memcpy
 685:../src/wolfcrypt/src/sha.c ****         sha->buffLen = len;
 3084                             		.loc 2 685 22
 3085 0159 ED A5 04                		mov.L	16[r10], r5
 3086 015c ED A4 06                		mov.L	24[r10], r4
 3087 015f E3 54                   		mov.L	r4, [r5]
 3088                             	.L31:
 686:../src/wolfcrypt/src/sha.c ****     }
 687:../src/wolfcrypt/src/sha.c **** 
 688:../src/wolfcrypt/src/sha.c ****     return ret;
 3089                             		.loc 2 688 12
 3090 0161 EC A5                   		mov.L	[r10], r5
 3091                             		.balign 8,3,1
 3092                             	.L24:
 689:../src/wolfcrypt/src/sha.c **** }
 3093                             		.loc 2 689 1
 3094 0163 EF 51                   		mov.L	r5, r1
 3095 0165 3F AA 08                		rtsd	#32, r10-r10
 3096                             	.LFE47:
 3098                             		.section	.text.wc_ShaFinalRaw,"ax",@progbits
 3099                             		.global	_wc_ShaFinalRaw
 3101                             	_wc_ShaFinalRaw:
 3102                             	.LFB48:
 690:../src/wolfcrypt/src/sha.c **** 
 691:../src/wolfcrypt/src/sha.c **** int wc_ShaFinalRaw(wc_Sha* sha, byte* hash)
 692:../src/wolfcrypt/src/sha.c **** {
 3103                             		.loc 2 692 1
 3104 0000 7E AA                   		push.l	r10
 3105                             	.LCFI20:
 3106 0002 71 0A E4                		add	#-28, r0, r10
 3107                             	.LCFI21:
 3108 0005 EF A0                   		mov.L	r10, r0
 3109 0007 E7 A1 05                		mov.L	r1, 20[r10]
 3110 000a E7 A2 06                		mov.L	r2, 24[r10]
 693:../src/wolfcrypt/src/sha.c **** #ifdef LITTLE_ENDIAN_ORDER
 694:../src/wolfcrypt/src/sha.c ****     word32 digest[WC_SHA_DIGEST_SIZE / sizeof(word32)];
 695:../src/wolfcrypt/src/sha.c **** #endif
 696:../src/wolfcrypt/src/sha.c **** 
 697:../src/wolfcrypt/src/sha.c ****     if (sha == NULL || hash == NULL) {
 3111                             		.loc 2 697 8
 3112 000d ED A5 05                		mov.L	20[r10], r5
 3113 0010 61 05                   		cmp	#0, r5
 3114 0012 17                      		beq	.L33
 3115                             		.loc 2 697 21 discriminator 1
 3116 0013 ED A5 06                		mov.L	24[r10], r5
 3117 0016 61 05                   		cmp	#0, r5
 3118 0018 1F                      		bne	.L34
 3119                             	.L33:
 698:../src/wolfcrypt/src/sha.c ****         return BAD_FUNC_ARG;
 3120                             		.loc 2 698 16
 3121 0019 FB 5A 53 FF             		mov.L	#-173, r5
 3122 001d 2E 21                   		bra	.L36
 3123                             	.L34:
 699:../src/wolfcrypt/src/sha.c ****     }
 700:../src/wolfcrypt/src/sha.c **** 
 701:../src/wolfcrypt/src/sha.c **** #ifdef LITTLE_ENDIAN_ORDER
 702:../src/wolfcrypt/src/sha.c ****     ByteReverseWords((word32*)digest, (word32*)sha->digest, WC_SHA_DIGEST_SIZE);
 3124                             		.loc 2 702 48
 3125 001f ED A5 05                		mov.L	20[r10], r5
 3126 0022 71 55 4C                		add	#0x4c, r5
 3127                             		.loc 2 702 5
 3128 0025 75 43 14                		mov.L	#20, r3
 3129 0028 EF 52                   		mov.L	r5, r2
 3130 002a EF A1                   		mov.L	r10, r1
 3131 002c 05 00 00 00             		bsr	_ByteReverseWords
 703:../src/wolfcrypt/src/sha.c ****     XMEMCPY(hash, (byte *)&digest[0], WC_SHA_DIGEST_SIZE);
 3132                             		.loc 2 703 5
 3133 0030 75 43 14                		mov.L	#20, r3
 3134 0033 EF A2                   		mov.L	r10, r2
 3135 0035 ED A1 06                		mov.L	24[r10], r1
 3136 0038 05 00 00 00             		bsr	_memcpy
 704:../src/wolfcrypt/src/sha.c **** #else
 705:../src/wolfcrypt/src/sha.c ****     XMEMCPY(hash, sha->digest, WC_SHA_DIGEST_SIZE);
 706:../src/wolfcrypt/src/sha.c **** #endif
 707:../src/wolfcrypt/src/sha.c **** 
 708:../src/wolfcrypt/src/sha.c ****     return 0;
 3137                             		.loc 2 708 12
 3138 003c 66 05                   		mov.L	#0, r5
 3139                             	.L36:
 709:../src/wolfcrypt/src/sha.c **** }
 3140                             		.loc 2 709 1 discriminator 1
 3141 003e EF 51                   		mov.L	r5, r1
 3142 0040 3F AA 08                		rtsd	#32, r10-r10
 3143                             	.LFE48:
 3145                             		.section	.text.wc_ShaFinal,"ax",@progbits
 3146                             		.global	_wc_ShaFinal
 3148                             	_wc_ShaFinal:
 3149                             	.LFB49:
 710:../src/wolfcrypt/src/sha.c **** 
 711:../src/wolfcrypt/src/sha.c **** int wc_ShaFinal(wc_Sha* sha, byte* hash)
 712:../src/wolfcrypt/src/sha.c **** {
 3150                             		.loc 2 712 1
 3151 0000 7E AA                   		push.l	r10
 3152                             	.LCFI22:
 3153 0002 71 0A F0                		add	#-16, r0, r10
 3154                             	.LCFI23:
 3155 0005 EF A0                   		mov.L	r10, r0
 3156 0007 E7 A1 02                		mov.L	r1, 8[r10]
 3157 000a E7 A2 03                		mov.L	r2, 12[r10]
 713:../src/wolfcrypt/src/sha.c ****     int ret;
 714:../src/wolfcrypt/src/sha.c ****     byte* local;
 715:../src/wolfcrypt/src/sha.c **** 
 716:../src/wolfcrypt/src/sha.c ****     if (sha == NULL || hash == NULL) {
 3158                             		.loc 2 716 8
 3159 000d ED A5 02                		mov.L	8[r10], r5
 3160 0010 61 05                   		cmp	#0, r5
 3161 0012 17                      		beq	.L38
 3162                             		.loc 2 716 21 discriminator 1
 3163 0013 ED A5 03                		mov.L	12[r10], r5
 3164 0016 61 05                   		cmp	#0, r5
 3165 0018 18                      		bne	.L39
 3166                             	.L38:
 717:../src/wolfcrypt/src/sha.c ****         return BAD_FUNC_ARG;
 3167                             		.loc 2 717 16
 3168 0019 FB 5A 53 FF             		mov.L	#-173, r5
 3169 001d 38 30 01                		bra	.L40
 3170                             	.L39:
 718:../src/wolfcrypt/src/sha.c ****     }
 719:../src/wolfcrypt/src/sha.c **** 
 720:../src/wolfcrypt/src/sha.c ****     local = (byte*)sha->buffer;
 3171                             		.loc 2 720 11
 3172 0020 ED A5 02                		mov.L	8[r10], r5
 3173 0023 62 C5                   		add	#12, r5
 3174 0025 E3 A5                   		mov.L	r5, [r10]
 721:../src/wolfcrypt/src/sha.c **** 
 722:../src/wolfcrypt/src/sha.c **** #ifdef WOLF_CRYPTO_CB
 723:../src/wolfcrypt/src/sha.c ****     if (sha->devId != INVALID_DEVID) {
 724:../src/wolfcrypt/src/sha.c ****         ret = wc_CryptoCb_ShaHash(sha, NULL, 0, hash);
 725:../src/wolfcrypt/src/sha.c ****         if (ret != CRYPTOCB_UNAVAILABLE)
 726:../src/wolfcrypt/src/sha.c ****             return ret;
 727:../src/wolfcrypt/src/sha.c ****         /* fall-through when unavailable */
 728:../src/wolfcrypt/src/sha.c ****     }
 729:../src/wolfcrypt/src/sha.c **** #endif
 730:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA)
 731:../src/wolfcrypt/src/sha.c ****     if (sha->asyncDev.marker == WOLFSSL_ASYNC_MARKER_SHA) {
 732:../src/wolfcrypt/src/sha.c ****     #if defined(HAVE_INTEL_QA)
 733:../src/wolfcrypt/src/sha.c ****         return IntelQaSymSha(&sha->asyncDev, hash, NULL, WC_SHA_DIGEST_SIZE);
 734:../src/wolfcrypt/src/sha.c ****     #endif
 735:../src/wolfcrypt/src/sha.c ****     }
 736:../src/wolfcrypt/src/sha.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
 737:../src/wolfcrypt/src/sha.c **** 
 738:../src/wolfcrypt/src/sha.c ****     local[sha->buffLen++] = 0x80;  /* add 1 */
 3175                             		.loc 2 738 14
 3176 0027 ED A5 02                		mov.L	8[r10], r5
 3177 002a EC 55                   		mov.L	[r5], r5
 3178                             		.loc 2 738 23
 3179 002c 71 53 01                		add	#1, r5, r3
 3180 002f ED A4 02                		mov.L	8[r10], r4
 3181 0032 E3 43                   		mov.L	r3, [r4]
 3182                             		.loc 2 738 10
 3183 0034 EC A4                   		mov.L	[r10], r4
 3184 0036 4B 45                   		add	r4, r5
 3185                             		.loc 2 738 27
 3186 0038 F8 54 80                		mov.B	#-128, [r5]
 739:../src/wolfcrypt/src/sha.c **** 
 740:../src/wolfcrypt/src/sha.c ****     /* pad with zeros */
 741:../src/wolfcrypt/src/sha.c ****     if (sha->buffLen > WC_SHA_PAD_SIZE) {
 3187                             		.loc 2 741 12
 3188 003b ED A5 02                		mov.L	8[r10], r5
 3189 003e EC 55                   		mov.L	[r5], r5
 3190                             		.loc 2 741 8
 3191 0040 75 55 38                		cmp	#56, r5
 3192 0043 25 59                   		bleu	.L41
 742:../src/wolfcrypt/src/sha.c ****         XMEMSET(&local[sha->buffLen], 0, WC_SHA_BLOCK_SIZE - sha->buffLen);
 3193                             		.loc 2 742 9
 3194 0045 ED A5 02                		mov.L	8[r10], r5
 3195 0048 EC 55                   		mov.L	[r5], r5
 3196 004a EC A4                   		mov.L	[r10], r4
 3197 004c FF 21 54                		add	r5, r4, r1
 3198 004f ED A5 02                		mov.L	8[r10], r5
 3199 0052 EC 55                   		mov.L	[r5], r5
 3200 0054 75 44 40                		mov.L	#0x40, r4
 3201 0057 FF 05 54                		sub	r5, r4, r5
 3202 005a EF 53                   		mov.L	r5, r3
 3203 005c 66 02                   		mov.L	#0, r2
 3204 005e 05 00 00 00             		bsr	_memset
 743:../src/wolfcrypt/src/sha.c ****         sha->buffLen += WC_SHA_BLOCK_SIZE - sha->buffLen;
 3205                             		.loc 2 743 22
 3206 0062 ED A5 02                		mov.L	8[r10], r5
 3207 0065 F8 56 40                		mov.L	#0x40, [r5]
 744:../src/wolfcrypt/src/sha.c **** 
 745:../src/wolfcrypt/src/sha.c ****     #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
 746:../src/wolfcrypt/src/sha.c ****         ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 3208                             		.loc 2 746 29
 3209 0068 ED A5 02                		mov.L	8[r10], r5
 3210 006b 71 54 0C                		add	#12, r5, r4
 3211                             		.loc 2 746 42
 3212 006e ED A5 02                		mov.L	8[r10], r5
 3213 0071 62 C5                   		add	#12, r5
 3214                             		.loc 2 746 9
 3215 0073 75 43 40                		mov.L	#0x40, r3
 3216 0076 EF 52                   		mov.L	r5, r2
 3217 0078 EF 41                   		mov.L	r4, r1
 3218 007a 05 00 00 00             		bsr	_ByteReverseWords
 747:../src/wolfcrypt/src/sha.c ****     #endif
 748:../src/wolfcrypt/src/sha.c **** 
 749:../src/wolfcrypt/src/sha.c ****     #if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 750:../src/wolfcrypt/src/sha.c ****         !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 751:../src/wolfcrypt/src/sha.c ****         if (sha->ctx.mode == ESP32_SHA_INIT) {
 752:../src/wolfcrypt/src/sha.c ****             esp_sha_try_hw_lock(&sha->ctx);
 753:../src/wolfcrypt/src/sha.c ****         }
 754:../src/wolfcrypt/src/sha.c ****         if (sha->ctx.mode == ESP32_SHA_SW) {
 755:../src/wolfcrypt/src/sha.c ****             ret = XTRANSFORM(sha, (const byte*)local);
 756:../src/wolfcrypt/src/sha.c ****         } else {
 757:../src/wolfcrypt/src/sha.c ****             ret = esp_sha_process(sha, (const byte*)local);
 758:../src/wolfcrypt/src/sha.c ****         }
 759:../src/wolfcrypt/src/sha.c ****     #else
 760:../src/wolfcrypt/src/sha.c ****         ret = XTRANSFORM(sha, (const byte*)local);
 3219                             		.loc 2 760 15
 3220 007e EC A2                   		mov.L	[r10], r2
 3221 0080 ED A1 02                		mov.L	8[r10], r1
 3222 0083 05 00 00 00             		bsr	_Transform
 3223 0087 E7 A1 01                		mov.L	r1, 4[r10]
 761:../src/wolfcrypt/src/sha.c ****     #endif
 762:../src/wolfcrypt/src/sha.c ****         if (ret != 0)
 3224                             		.loc 2 762 12
 3225 008a ED A5 01                		mov.L	4[r10], r5
 3226 008d 61 05                   		cmp	#0, r5
 3227 008f 17                      		beq	.L42
 763:../src/wolfcrypt/src/sha.c ****             return ret;
 3228                             		.loc 2 763 20
 3229 0090 ED A5 01                		mov.L	4[r10], r5
 3230 0093 38 BA 00                		bra	.L40
 3231                             	.L42:
 764:../src/wolfcrypt/src/sha.c **** 
 765:../src/wolfcrypt/src/sha.c ****         sha->buffLen = 0;
 3232                             		.loc 2 765 22
 3233 0096 ED A5 02                		mov.L	8[r10], r5
 3234 0099 F8 56 00                		mov.L	#0, [r5]
 3235                             	.L41:
 766:../src/wolfcrypt/src/sha.c ****     }
 767:../src/wolfcrypt/src/sha.c ****     XMEMSET(&local[sha->buffLen], 0, WC_SHA_PAD_SIZE - sha->buffLen);
 3236                             		.loc 2 767 5
 3237 009c ED A5 02                		mov.L	8[r10], r5
 3238 009f EC 55                   		mov.L	[r5], r5
 3239 00a1 EC A4                   		mov.L	[r10], r4
 3240 00a3 FF 21 54                		add	r5, r4, r1
 3241 00a6 ED A5 02                		mov.L	8[r10], r5
 3242 00a9 EC 55                   		mov.L	[r5], r5
 3243 00ab 75 44 38                		mov.L	#56, r4
 3244 00ae FF 05 54                		sub	r5, r4, r5
 3245 00b1 EF 53                   		mov.L	r5, r3
 3246 00b3 66 02                   		mov.L	#0, r2
 3247 00b5 05 00 00 00             		bsr	_memset
 768:../src/wolfcrypt/src/sha.c **** 
 769:../src/wolfcrypt/src/sha.c **** #if defined(LITTLE_ENDIAN_ORDER) && !defined(FREESCALE_MMCAU_SHA)
 770:../src/wolfcrypt/src/sha.c ****     ByteReverseWords(sha->buffer, sha->buffer, WC_SHA_BLOCK_SIZE);
 3248                             		.loc 2 770 25
 3249 00b9 ED A5 02                		mov.L	8[r10], r5
 3250 00bc 71 54 0C                		add	#12, r5, r4
 3251                             		.loc 2 770 38
 3252 00bf ED A5 02                		mov.L	8[r10], r5
 3253 00c2 62 C5                   		add	#12, r5
 3254                             		.loc 2 770 5
 3255 00c4 75 43 40                		mov.L	#0x40, r3
 3256 00c7 EF 52                   		mov.L	r5, r2
 3257 00c9 EF 41                   		mov.L	r4, r1
 3258 00cb 05 00 00 00             		bsr	_ByteReverseWords
 771:../src/wolfcrypt/src/sha.c **** #endif
 772:../src/wolfcrypt/src/sha.c **** 
 773:../src/wolfcrypt/src/sha.c ****     /* store lengths */
 774:../src/wolfcrypt/src/sha.c ****     /* put lengths in bits */
 775:../src/wolfcrypt/src/sha.c ****     sha->hiLen = (sha->loLen >> (8*sizeof(sha->loLen) - 3)) + (sha->hiLen << 3);
 3259                             		.loc 2 775 22
 3260 00cf ED A5 02                		mov.L	8[r10], r5
 3261 00d2 A8 5D                   		mov.L	4[r5], r5
 3262                             		.loc 2 775 30
 3263 00d4 FD 9D 54                		shlr	#29, r5, r4
 3264                             		.loc 2 775 67
 3265 00d7 ED A5 02                		mov.L	8[r10], r5
 3266 00da A8 D5                   		mov.L	8[r5], r5
 3267                             		.loc 2 775 75
 3268 00dc 6C 35                   		shll	#3, r5
 3269                             		.loc 2 775 61
 3270 00de 4B 54                   		add	r5, r4
 3271                             		.loc 2 775 16
 3272 00e0 ED A5 02                		mov.L	8[r10], r5
 3273 00e3 A0 D4                   		mov.L	r4, 8[r5]
 776:../src/wolfcrypt/src/sha.c ****     sha->loLen = sha->loLen << 3;
 3274                             		.loc 2 776 21
 3275 00e5 ED A5 02                		mov.L	8[r10], r5
 3276 00e8 A8 5D                   		mov.L	4[r5], r5
 3277                             		.loc 2 776 29
 3278 00ea FD C3 54                		shll	#3, r5, r4
 3279                             		.loc 2 776 16
 3280 00ed ED A5 02                		mov.L	8[r10], r5
 3281 00f0 A0 5C                   		mov.L	r4, 4[r5]
 777:../src/wolfcrypt/src/sha.c **** 
 778:../src/wolfcrypt/src/sha.c ****     /* ! length ordering dependent on digest endian type ! */
 779:../src/wolfcrypt/src/sha.c ****     XMEMCPY(&local[WC_SHA_PAD_SIZE], &sha->hiLen, sizeof(word32));
 3282                             		.loc 2 779 5
 3283 00f2 EC A5                   		mov.L	[r10], r5
 3284 00f4 71 55 38                		add	#56, r5
 3285 00f7 ED A4 02                		mov.L	8[r10], r4
 3286 00fa 62 84                   		add	#8, r4
 3287 00fc EC 44                   		mov.L	[r4], r4
 3288 00fe E3 54                   		mov.L	r4, [r5]
 780:../src/wolfcrypt/src/sha.c ****     XMEMCPY(&local[WC_SHA_PAD_SIZE + sizeof(word32)], &sha->loLen, sizeof(word32));
 3289                             		.loc 2 780 5
 3290 0100 EC A5                   		mov.L	[r10], r5
 3291 0102 71 55 3C                		add	#60, r5
 3292 0105 ED A4 02                		mov.L	8[r10], r4
 3293 0108 62 44                   		add	#4, r4
 3294 010a EC 44                   		mov.L	[r4], r4
 3295 010c E3 54                   		mov.L	r4, [r5]
 781:../src/wolfcrypt/src/sha.c **** 
 782:../src/wolfcrypt/src/sha.c **** #if defined(FREESCALE_MMCAU_SHA)
 783:../src/wolfcrypt/src/sha.c ****     /* Kinetis requires only these bytes reversed */
 784:../src/wolfcrypt/src/sha.c ****     ByteReverseWords(&sha->buffer[WC_SHA_PAD_SIZE/sizeof(word32)],
 785:../src/wolfcrypt/src/sha.c ****                      &sha->buffer[WC_SHA_PAD_SIZE/sizeof(word32)],
 786:../src/wolfcrypt/src/sha.c ****                      2 * sizeof(word32));
 787:../src/wolfcrypt/src/sha.c **** #endif
 788:../src/wolfcrypt/src/sha.c **** 
 789:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 790:../src/wolfcrypt/src/sha.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 791:../src/wolfcrypt/src/sha.c ****     if (sha->ctx.mode == ESP32_SHA_INIT) {
 792:../src/wolfcrypt/src/sha.c ****         esp_sha_try_hw_lock(&sha->ctx);
 793:../src/wolfcrypt/src/sha.c ****     }
 794:../src/wolfcrypt/src/sha.c ****     if (sha->ctx.mode == ESP32_SHA_SW) {
 795:../src/wolfcrypt/src/sha.c ****         ret = XTRANSFORM(sha, (const byte*)local);
 796:../src/wolfcrypt/src/sha.c ****     } else {
 797:../src/wolfcrypt/src/sha.c ****         ret = esp_sha_digest_process(sha, 1);
 798:../src/wolfcrypt/src/sha.c ****     }
 799:../src/wolfcrypt/src/sha.c **** #else
 800:../src/wolfcrypt/src/sha.c ****     ret = XTRANSFORM(sha, (const byte*)local);
 3296                             		.loc 2 800 11
 3297 010e EC A2                   		mov.L	[r10], r2
 3298 0110 ED A1 02                		mov.L	8[r10], r1
 3299 0113 05 00 00 00             		bsr	_Transform
 3300 0117 E7 A1 01                		mov.L	r1, 4[r10]
 801:../src/wolfcrypt/src/sha.c **** #endif
 802:../src/wolfcrypt/src/sha.c **** 
 803:../src/wolfcrypt/src/sha.c **** #ifdef LITTLE_ENDIAN_ORDER
 804:../src/wolfcrypt/src/sha.c ****     ByteReverseWords(sha->digest, sha->digest, WC_SHA_DIGEST_SIZE);
 3301                             		.loc 2 804 25
 3302 011a ED A5 02                		mov.L	8[r10], r5
 3303 011d 71 54 4C                		add	#0x4c, r5, r4
 3304                             		.loc 2 804 38
 3305 0120 ED A5 02                		mov.L	8[r10], r5
 3306 0123 71 55 4C                		add	#0x4c, r5
 3307                             		.loc 2 804 5
 3308 0126 75 43 14                		mov.L	#20, r3
 3309 0129 EF 52                   		mov.L	r5, r2
 3310 012b EF 41                   		mov.L	r4, r1
 3311 012d 05 00 00 00             		bsr	_ByteReverseWords
 805:../src/wolfcrypt/src/sha.c **** #endif
 806:../src/wolfcrypt/src/sha.c **** 
 807:../src/wolfcrypt/src/sha.c ****     XMEMCPY(hash, (byte *)&sha->digest[0], WC_SHA_DIGEST_SIZE);
 3312                             		.loc 2 807 5
 3313 0131 ED A5 02                		mov.L	8[r10], r5
 3314 0134 71 55 4C                		add	#0x4c, r5
 3315 0137 75 43 14                		mov.L	#20, r3
 3316 013a EF 52                   		mov.L	r5, r2
 3317 013c ED A1 03                		mov.L	12[r10], r1
 3318 013f 05 00 00 00             		bsr	_memcpy
 808:../src/wolfcrypt/src/sha.c **** 
 809:../src/wolfcrypt/src/sha.c ****     (void)InitSha(sha); /* reset state */
 3319                             		.loc 2 809 11
 3320 0143 ED A1 02                		mov.L	8[r10], r1
 3321 0146 05 00 00 00             		bsr	_InitSha
 810:../src/wolfcrypt/src/sha.c **** 
 811:../src/wolfcrypt/src/sha.c ****     return ret;
 3322                             		.loc 2 811 12
 3323 014a ED A5 01                		mov.L	4[r10], r5
 3324                             	.L40:
 812:../src/wolfcrypt/src/sha.c **** }
 3325                             		.loc 2 812 1
 3326 014d EF 51                   		mov.L	r5, r1
 3327 014f 3F AA 05                		rtsd	#20, r10-r10
 3328                             	.LFE49:
 3330                             		.section	.text.wc_InitSha,"ax",@progbits
 3331                             		.global	_wc_InitSha
 3333                             	_wc_InitSha:
 3334                             	.LFB50:
 813:../src/wolfcrypt/src/sha.c **** 
 814:../src/wolfcrypt/src/sha.c **** #if defined(OPENSSL_EXTRA)
 815:../src/wolfcrypt/src/sha.c **** /* Apply SHA1 transformation to the data                  */
 816:../src/wolfcrypt/src/sha.c **** /* @param sha  a pointer to wc_Sha structure              */
 817:../src/wolfcrypt/src/sha.c **** /* @param data data to be applied SHA1 transformation     */
 818:../src/wolfcrypt/src/sha.c **** /* @return 0 on successful, otherwise non-zero on failure */
 819:../src/wolfcrypt/src/sha.c **** int wc_ShaTransform(wc_Sha* sha, const unsigned char* data)
 820:../src/wolfcrypt/src/sha.c **** {
 821:../src/wolfcrypt/src/sha.c ****     /* sanity check */
 822:../src/wolfcrypt/src/sha.c ****     if (sha == NULL || data == NULL) {
 823:../src/wolfcrypt/src/sha.c ****         return BAD_FUNC_ARG;
 824:../src/wolfcrypt/src/sha.c ****     }
 825:../src/wolfcrypt/src/sha.c ****     return (Transform(sha, data));
 826:../src/wolfcrypt/src/sha.c **** }
 827:../src/wolfcrypt/src/sha.c **** #endif
 828:../src/wolfcrypt/src/sha.c **** 
 829:../src/wolfcrypt/src/sha.c **** #endif /* USE_SHA_SOFTWARE_IMPL */
 830:../src/wolfcrypt/src/sha.c **** 
 831:../src/wolfcrypt/src/sha.c **** 
 832:../src/wolfcrypt/src/sha.c **** int wc_InitSha(wc_Sha* sha)
 833:../src/wolfcrypt/src/sha.c **** {
 3335                             		.loc 2 833 1
 3336 0000 7E AA                   		push.l	r10
 3337                             	.LCFI24:
 3338 0002 71 0A FC                		add	#-4, r0, r10
 3339                             	.LCFI25:
 3340 0005 EF A0                   		mov.L	r10, r0
 3341 0007 E3 A1                   		mov.L	r1, [r10]
 834:../src/wolfcrypt/src/sha.c ****     return wc_InitSha_ex(sha, NULL, INVALID_DEVID);
 3342                             		.loc 2 834 12
 3343 0009 FB 36 FE                		mov.L	#-2, r3
 3344 000c 66 02                   		mov.L	#0, r2
 3345 000e EC A1                   		mov.L	[r10], r1
 3346 0010 05 00 00 00             		bsr	_wc_InitSha_ex
 3347 0014 EF 15                   		mov.L	r1, r5
 835:../src/wolfcrypt/src/sha.c **** }
 3348                             		.loc 2 835 1
 3349 0016 EF 51                   		mov.L	r5, r1
 3350 0018 3F AA 02                		rtsd	#8, r10-r10
 3351                             	.LFE50:
 3353                             		.section	.text.wc_ShaFree,"ax",@progbits
 3354                             		.global	_wc_ShaFree
 3356                             	_wc_ShaFree:
 3357                             	.LFB51:
 836:../src/wolfcrypt/src/sha.c **** 
 837:../src/wolfcrypt/src/sha.c **** #if !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)
 838:../src/wolfcrypt/src/sha.c **** 
 839:../src/wolfcrypt/src/sha.c **** void wc_ShaFree(wc_Sha* sha)
 840:../src/wolfcrypt/src/sha.c **** {
 3358                             		.loc 2 840 1
 3359 0000 7E AA                   		push.l	r10
 3360                             	.LCFI26:
 3361 0002 71 0A FC                		add	#-4, r0, r10
 3362                             	.LCFI27:
 3363 0005 EF A0                   		mov.L	r10, r0
 3364 0007 E3 A1                   		mov.L	r1, [r10]
 841:../src/wolfcrypt/src/sha.c ****     if (sha == NULL)
 842:../src/wolfcrypt/src/sha.c ****         return;
 843:../src/wolfcrypt/src/sha.c **** 
 844:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA)
 845:../src/wolfcrypt/src/sha.c ****     wolfAsync_DevCtxFree(&sha->asyncDev, WOLFSSL_ASYNC_MARKER_SHA);
 846:../src/wolfcrypt/src/sha.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
 847:../src/wolfcrypt/src/sha.c **** 
 848:../src/wolfcrypt/src/sha.c **** #ifdef WOLFSSL_PIC32MZ_HASH
 849:../src/wolfcrypt/src/sha.c ****     wc_ShaPic32Free(sha);
 850:../src/wolfcrypt/src/sha.c **** #endif
 851:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_HASH)
 852:../src/wolfcrypt/src/sha.c ****    se050_hash_free(&sha->se050Ctx);
 853:../src/wolfcrypt/src/sha.c **** #endif
 854:../src/wolfcrypt/src/sha.c **** #if (defined(WOLFSSL_RENESAS_TSIP_CRYPT) && \
 855:../src/wolfcrypt/src/sha.c ****     !defined(NO_WOLFSSL_RENESAS_TSIP_CRYPT_HASH))
 856:../src/wolfcrypt/src/sha.c ****     if (sha->msg != NULL) {
 857:../src/wolfcrypt/src/sha.c ****         XFREE(sha->msg, sha->heap, DYNAMIC_TYPE_TMP_BUFFER);
 858:../src/wolfcrypt/src/sha.c ****         sha->msg = NULL;
 859:../src/wolfcrypt/src/sha.c ****     }
 860:../src/wolfcrypt/src/sha.c **** #endif
 861:../src/wolfcrypt/src/sha.c **** #ifdef WOLFSSL_IMXRT_DCP
 862:../src/wolfcrypt/src/sha.c ****     DCPShaFree(sha);
 863:../src/wolfcrypt/src/sha.c **** #endif
 864:../src/wolfcrypt/src/sha.c **** }
 3365                             		.loc 2 864 1
 3366 0009 3F AA 02                		rtsd	#8, r10-r10
 3367                             	.LFE51:
 3369                             		.section	.text.wc_ShaGetHash,"ax",@progbits
 3370                             		.global	_wc_ShaGetHash
 3372                             	_wc_ShaGetHash:
 3373                             	.LFB52:
 865:../src/wolfcrypt/src/sha.c **** 
 866:../src/wolfcrypt/src/sha.c **** #endif /* !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH) */
 867:../src/wolfcrypt/src/sha.c **** #endif /* !WOLFSSL_TI_HASH */
 868:../src/wolfcrypt/src/sha.c **** #endif /* HAVE_FIPS */
 869:../src/wolfcrypt/src/sha.c **** 
 870:../src/wolfcrypt/src/sha.c **** #if !defined(WOLFSSL_TI_HASH) && !defined(WOLFSSL_IMXRT_DCP)
 871:../src/wolfcrypt/src/sha.c **** 
 872:../src/wolfcrypt/src/sha.c **** #if !defined(WOLFSSL_RENESAS_TSIP_CRYPT) || \
 873:../src/wolfcrypt/src/sha.c ****     defined(NO_WOLFSSL_RENESAS_TSIP_CRYPT_HASH)
 874:../src/wolfcrypt/src/sha.c **** 
 875:../src/wolfcrypt/src/sha.c **** #if !defined(WOLFSSL_HAVE_PSA) || defined(WOLFSSL_PSA_NO_HASH)
 876:../src/wolfcrypt/src/sha.c **** int wc_ShaGetHash(wc_Sha* sha, byte* hash)
 877:../src/wolfcrypt/src/sha.c **** {
 3374                             		.loc 2 877 1
 3375 0000 7E AA                   		push.l	r10
 3376                             	.LCFI28:
 3377 0002 71 0A 90                		add	#-112, r0, r10
 3378                             	.LCFI29:
 3379 0005 EF A0                   		mov.L	r10, r0
 3380 0007 E7 A1 1A                		mov.L	r1, 104[r10]
 3381 000a E7 A2 1B                		mov.L	r2, 108[r10]
 878:../src/wolfcrypt/src/sha.c ****     int ret;
 879:../src/wolfcrypt/src/sha.c ****     wc_Sha tmpSha;
 880:../src/wolfcrypt/src/sha.c **** 
 881:../src/wolfcrypt/src/sha.c ****     if (sha == NULL || hash == NULL)
 3382                             		.loc 2 881 8
 3383 000d ED A5 1A                		mov.L	104[r10], r5
 3384 0010 61 05                   		cmp	#0, r5
 3385 0012 17                      		beq	.L48
 3386                             		.loc 2 881 21 discriminator 1
 3387 0013 ED A5 1B                		mov.L	108[r10], r5
 3388 0016 61 05                   		cmp	#0, r5
 3389 0018 1F                      		bne	.L49
 3390                             	.L48:
 882:../src/wolfcrypt/src/sha.c ****         return BAD_FUNC_ARG;
 3391                             		.loc 2 882 16
 3392 0019 FB 5A 53 FF             		mov.L	#-173, r5
 3393 001d 2E 26                   		bra	.L52
 3394                             	.L49:
 883:../src/wolfcrypt/src/sha.c **** 
 884:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 885:../src/wolfcrypt/src/sha.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 886:../src/wolfcrypt/src/sha.c ****     if(sha->ctx.mode == ESP32_SHA_INIT){
 887:../src/wolfcrypt/src/sha.c ****         esp_sha_try_hw_lock(&sha->ctx);
 888:../src/wolfcrypt/src/sha.c ****     }
 889:../src/wolfcrypt/src/sha.c ****     if(sha->ctx.mode != ESP32_SHA_SW)
 890:../src/wolfcrypt/src/sha.c ****         esp_sha_digest_process(sha, 0);
 891:../src/wolfcrypt/src/sha.c **** #endif
 892:../src/wolfcrypt/src/sha.c **** 
 893:../src/wolfcrypt/src/sha.c ****     ret = wc_ShaCopy(sha, &tmpSha);
 3395                             		.loc 2 893 11
 3396 001f 71 A5 04                		add	#4, r10, r5
 3397 0022 EF 52                   		mov.L	r5, r2
 3398 0024 ED A1 1A                		mov.L	104[r10], r1
 3399 0027 05 00 00 00             		bsr	_wc_ShaCopy
 3400 002b E3 A1                   		mov.L	r1, [r10]
 894:../src/wolfcrypt/src/sha.c ****     if (ret == 0) {
 3401                             		.loc 2 894 8
 3402 002d EC A5                   		mov.L	[r10], r5
 3403 002f 61 05                   		cmp	#0, r5
 3404 0031 21 10                   		bne	.L51
 895:../src/wolfcrypt/src/sha.c ****        ret = wc_ShaFinal(&tmpSha, hash);
 3405                             		.loc 2 895 14
 3406 0033 71 A5 04                		add	#4, r10, r5
 3407 0036 ED A2 1B                		mov.L	108[r10], r2
 3408 0039 EF 51                   		mov.L	r5, r1
 3409 003b 05 00 00 00             		bsr	_wc_ShaFinal
 3410 003f E3 A1                   		mov.L	r1, [r10]
 3411                             	.L51:
 896:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 897:../src/wolfcrypt/src/sha.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 898:../src/wolfcrypt/src/sha.c ****         sha->ctx.mode = ESP32_SHA_SW;
 899:../src/wolfcrypt/src/sha.c **** #endif
 900:../src/wolfcrypt/src/sha.c **** 
 901:../src/wolfcrypt/src/sha.c **** 
 902:../src/wolfcrypt/src/sha.c ****     }
 903:../src/wolfcrypt/src/sha.c ****     return ret;
 3412                             		.loc 2 903 12
 3413 0041 EC A5                   		mov.L	[r10], r5
 3414                             	.L52:
 904:../src/wolfcrypt/src/sha.c **** }
 3415                             		.loc 2 904 1 discriminator 1
 3416 0043 EF 51                   		mov.L	r5, r1
 3417 0045 3F AA 1D                		rtsd	#116, r10-r10
 3418                             	.LFE52:
 3420                             		.section	.text.wc_ShaCopy,"ax",@progbits
 3421                             		.global	_wc_ShaCopy
 3423                             	_wc_ShaCopy:
 3424                             	.LFB53:
 905:../src/wolfcrypt/src/sha.c **** 
 906:../src/wolfcrypt/src/sha.c **** int wc_ShaCopy(wc_Sha* src, wc_Sha* dst)
 907:../src/wolfcrypt/src/sha.c **** {
 3425                             		.loc 2 907 1
 3426 0000 7E AA                   		push.l	r10
 3427                             	.LCFI30:
 3428 0002 71 0A F4                		add	#-12, r0, r10
 3429                             	.LCFI31:
 3430 0005 EF A0                   		mov.L	r10, r0
 3431 0007 E7 A1 01                		mov.L	r1, 4[r10]
 3432 000a E7 A2 02                		mov.L	r2, 8[r10]
 908:../src/wolfcrypt/src/sha.c ****     int ret = 0;
 3433                             		.loc 2 908 9
 3434 000d F8 A6 00                		mov.L	#0, [r10]
 909:../src/wolfcrypt/src/sha.c **** 
 910:../src/wolfcrypt/src/sha.c ****     if (src == NULL || dst == NULL)
 3435                             		.loc 2 910 8
 3436 0010 ED A5 01                		mov.L	4[r10], r5
 3437 0013 61 05                   		cmp	#0, r5
 3438 0015 17                      		beq	.L54
 3439                             		.loc 2 910 21 discriminator 1
 3440 0016 ED A5 02                		mov.L	8[r10], r5
 3441 0019 61 05                   		cmp	#0, r5
 3442 001b 1F                      		bne	.L55
 3443                             	.L54:
 911:../src/wolfcrypt/src/sha.c ****         return BAD_FUNC_ARG;
 3444                             		.loc 2 911 16
 3445 001c FB 5A 53 FF             		mov.L	#-173, r5
 3446 0020 2E 11                   		bra	.L56
 3447                             	.L55:
 912:../src/wolfcrypt/src/sha.c **** 
 913:../src/wolfcrypt/src/sha.c ****     XMEMCPY(dst, src, sizeof(wc_Sha));
 3448                             		.loc 2 913 5
 3449 0022 75 43 64                		mov.L	#0x64, r3
 3450 0025 ED A2 01                		mov.L	4[r10], r2
 3451 0028 ED A1 02                		mov.L	8[r10], r1
 3452 002b 05 00 00 00             		bsr	_memcpy
 914:../src/wolfcrypt/src/sha.c **** 
 915:../src/wolfcrypt/src/sha.c **** #ifdef WOLFSSL_SILABS_SE_ACCEL
 916:../src/wolfcrypt/src/sha.c ****     dst->silabsCtx.hash_ctx.cmd_ctx = &(dst->silabsCtx.cmd_ctx);
 917:../src/wolfcrypt/src/sha.c ****     dst->silabsCtx.hash_ctx.hash_type_ctx = &(dst->silabsCtx.hash_type_ctx);
 918:../src/wolfcrypt/src/sha.c **** #endif
 919:../src/wolfcrypt/src/sha.c **** 
 920:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA)
 921:../src/wolfcrypt/src/sha.c ****     ret = wolfAsync_DevCopy(&src->asyncDev, &dst->asyncDev);
 922:../src/wolfcrypt/src/sha.c **** #endif
 923:../src/wolfcrypt/src/sha.c **** #ifdef WOLFSSL_PIC32MZ_HASH
 924:../src/wolfcrypt/src/sha.c ****     ret = wc_Pic32HashCopy(&src->cache, &dst->cache);
 925:../src/wolfcrypt/src/sha.c **** #endif
 926:../src/wolfcrypt/src/sha.c **** #if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 927:../src/wolfcrypt/src/sha.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 928:../src/wolfcrypt/src/sha.c ****      dst->ctx.mode = src->ctx.mode;
 929:../src/wolfcrypt/src/sha.c ****      dst->ctx.isfirstblock = src->ctx.isfirstblock;
 930:../src/wolfcrypt/src/sha.c ****      dst->ctx.sha_type = src->ctx.sha_type;
 931:../src/wolfcrypt/src/sha.c **** #endif
 932:../src/wolfcrypt/src/sha.c **** #ifdef WOLFSSL_HASH_FLAGS
 933:../src/wolfcrypt/src/sha.c ****      dst->flags |= WC_HASH_FLAG_ISCOPY;
 934:../src/wolfcrypt/src/sha.c **** #endif
 935:../src/wolfcrypt/src/sha.c ****     return ret;
 3453                             		.loc 2 935 12
 3454 002f EC A5                   		mov.L	[r10], r5
 3455                             	.L56:
 936:../src/wolfcrypt/src/sha.c **** }
 3456                             		.loc 2 936 1
 3457 0031 EF 51                   		mov.L	r5, r1
 3458 0033 3F AA 04                		rtsd	#16, r10-r10
 3459                             	.LFE53:
 3782                             	.Letext0:
 3783                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 3784                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3785                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3786                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3787                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3788                             		.file 8 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 3789                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3790                             		.file 10 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\incl
 3791                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha.h"
 3792                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
