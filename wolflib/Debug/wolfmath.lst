   1                             		.file	"wolfmath.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.global	_wc_off_on_addr
   5                             		.section	.rodata.wc_off_on_addr,"a"
   6                             		.balign 4
   9                             	_wc_off_on_addr:
  10 0000 00 00 00 00             		.long	0
  11 0004 FF FF FF FF             		.long	-1
  12                             		.section	.text.get_digit_count,"ax",@progbits
  13                             		.global	_get_digit_count
  15                             	_get_digit_count:
  16                             	.LFB43:
  17                             		.file 1 "../src/wolfcrypt/src/wolfmath.c"
   1:../src/wolfcrypt/src/wolfmath.c **** /* wolfmath.c
   2:../src/wolfcrypt/src/wolfmath.c ****  *
   3:../src/wolfcrypt/src/wolfmath.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/wolfmath.c ****  *
   5:../src/wolfcrypt/src/wolfmath.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/wolfmath.c ****  *
   7:../src/wolfcrypt/src/wolfmath.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/wolfmath.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/wolfmath.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/wolfmath.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/wolfmath.c ****  *
  12:../src/wolfcrypt/src/wolfmath.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/wolfmath.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/wolfmath.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/wolfmath.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/wolfmath.c ****  *
  17:../src/wolfcrypt/src/wolfmath.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/wolfmath.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/wolfmath.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/wolfmath.c ****  */
  21:../src/wolfcrypt/src/wolfmath.c **** 
  22:../src/wolfcrypt/src/wolfmath.c **** 
  23:../src/wolfcrypt/src/wolfmath.c **** /* common functions for either math library */
  24:../src/wolfcrypt/src/wolfmath.c **** 
  25:../src/wolfcrypt/src/wolfmath.c **** #ifdef HAVE_CONFIG_H
  26:../src/wolfcrypt/src/wolfmath.c ****     #include <config.h>
  27:../src/wolfcrypt/src/wolfmath.c **** #endif
  28:../src/wolfcrypt/src/wolfmath.c **** 
  29:../src/wolfcrypt/src/wolfmath.c **** /* in case user set USE_FAST_MATH there */
  30:../src/wolfcrypt/src/wolfmath.c **** #include <wolfssl/wolfcrypt/settings.h>
  31:../src/wolfcrypt/src/wolfmath.c **** 
  32:../src/wolfcrypt/src/wolfmath.c **** #include <wolfssl/wolfcrypt/integer.h>
  33:../src/wolfcrypt/src/wolfmath.c **** 
  34:../src/wolfcrypt/src/wolfmath.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  35:../src/wolfcrypt/src/wolfmath.c **** #include <wolfssl/wolfcrypt/logging.h>
  36:../src/wolfcrypt/src/wolfmath.c **** 
  37:../src/wolfcrypt/src/wolfmath.c **** #if defined(USE_FAST_MATH) || !defined(NO_BIG_INT)
  38:../src/wolfcrypt/src/wolfmath.c **** 
  39:../src/wolfcrypt/src/wolfmath.c **** #ifdef WOLFSSL_ASYNC_CRYPT
  40:../src/wolfcrypt/src/wolfmath.c ****     #include <wolfssl/wolfcrypt/async.h>
  41:../src/wolfcrypt/src/wolfmath.c **** #endif
  42:../src/wolfcrypt/src/wolfmath.c **** 
  43:../src/wolfcrypt/src/wolfmath.c **** #ifdef NO_INLINE
  44:../src/wolfcrypt/src/wolfmath.c ****     #include <wolfssl/wolfcrypt/misc.h>
  45:../src/wolfcrypt/src/wolfmath.c **** #else
  46:../src/wolfcrypt/src/wolfmath.c ****     #define WOLFSSL_MISC_INCLUDED
  47:../src/wolfcrypt/src/wolfmath.c ****     #include <wolfcrypt/src/misc.c>
  48:../src/wolfcrypt/src/wolfmath.c **** #endif
  49:../src/wolfcrypt/src/wolfmath.c **** 
  50:../src/wolfcrypt/src/wolfmath.c **** 
  51:../src/wolfcrypt/src/wolfmath.c **** #if !defined(WC_NO_CACHE_RESISTANT) && \
  52:../src/wolfcrypt/src/wolfmath.c ****     ((defined(HAVE_ECC) && defined(ECC_TIMING_RESISTANT)) || \
  53:../src/wolfcrypt/src/wolfmath.c ****      (defined(USE_FAST_MATH) && defined(TFM_TIMING_RESISTANT)))
  54:../src/wolfcrypt/src/wolfmath.c **** 
  55:../src/wolfcrypt/src/wolfmath.c ****     /* all off / all on pointer addresses for constant calculations */
  56:../src/wolfcrypt/src/wolfmath.c ****     /* ecc.c uses same table */
  57:../src/wolfcrypt/src/wolfmath.c ****     const wc_ptr_t wc_off_on_addr[2] =
  58:../src/wolfcrypt/src/wolfmath.c ****     {
  59:../src/wolfcrypt/src/wolfmath.c ****     #if defined(WC_64BIT_CPU)
  60:../src/wolfcrypt/src/wolfmath.c ****         W64LIT(0x0000000000000000),
  61:../src/wolfcrypt/src/wolfmath.c ****         W64LIT(0xffffffffffffffff)
  62:../src/wolfcrypt/src/wolfmath.c ****     #elif defined(WC_16BIT_CPU)
  63:../src/wolfcrypt/src/wolfmath.c ****         0x0000U,
  64:../src/wolfcrypt/src/wolfmath.c ****         0xffffU
  65:../src/wolfcrypt/src/wolfmath.c ****     #else
  66:../src/wolfcrypt/src/wolfmath.c ****         /* 32 bit */
  67:../src/wolfcrypt/src/wolfmath.c ****         0x00000000U,
  68:../src/wolfcrypt/src/wolfmath.c ****         0xffffffffU
  69:../src/wolfcrypt/src/wolfmath.c ****     #endif
  70:../src/wolfcrypt/src/wolfmath.c ****     };
  71:../src/wolfcrypt/src/wolfmath.c **** #endif
  72:../src/wolfcrypt/src/wolfmath.c **** 
  73:../src/wolfcrypt/src/wolfmath.c **** 
  74:../src/wolfcrypt/src/wolfmath.c **** int get_digit_count(const mp_int* a)
  75:../src/wolfcrypt/src/wolfmath.c **** {
  18                             		.loc 1 75 1
  19 0000 7E AA                   		push.l	r10
  20                             	.LCFI0:
  21 0002 71 0A FC                		add	#-4, r0, r10
  22                             	.LCFI1:
  23 0005 EF A0                   		mov.L	r10, r0
  24 0007 E3 A1                   		mov.L	r1, [r10]
  76:../src/wolfcrypt/src/wolfmath.c ****     if (a == NULL)
  25                             		.loc 1 76 8
  26 0009 EC A5                   		mov.L	[r10], r5
  27 000b 61 05                   		cmp	#0, r5
  28 000d 1C                      		bne	.L2
  77:../src/wolfcrypt/src/wolfmath.c ****         return 0;
  29                             		.loc 1 77 16
  30 000e 66 05                   		mov.L	#0, r5
  31 0010 0D                      		bra	.L3
  32                             	.L2:
  78:../src/wolfcrypt/src/wolfmath.c **** 
  79:../src/wolfcrypt/src/wolfmath.c ****     return a->used;
  33                             		.loc 1 79 13
  34 0011 EC A5                   		mov.L	[r10], r5
  35 0013 EC 55                   		mov.L	[r5], r5
  36                             	.L3:
  80:../src/wolfcrypt/src/wolfmath.c **** }
  37                             		.loc 1 80 1
  38 0015 EF 51                   		mov.L	r5, r1
  39 0017 3F AA 02                		rtsd	#8, r10-r10
  40                             	.LFE43:
  42                             		.section	.text.get_digit,"ax",@progbits
  43                             		.global	_get_digit
  45                             	_get_digit:
  46                             	.LFB44:
  81:../src/wolfcrypt/src/wolfmath.c **** 
  82:../src/wolfcrypt/src/wolfmath.c **** mp_digit get_digit(const mp_int* a, int n)
  83:../src/wolfcrypt/src/wolfmath.c **** {
  47                             		.loc 1 83 1
  48 0000 7E AA                   		push.l	r10
  49                             	.LCFI2:
  50 0002 71 0A F8                		add	#-8, r0, r10
  51                             	.LCFI3:
  52 0005 EF A0                   		mov.L	r10, r0
  53 0007 E3 A1                   		mov.L	r1, [r10]
  54 0009 E7 A2 01                		mov.L	r2, 4[r10]
  84:../src/wolfcrypt/src/wolfmath.c ****     if (a == NULL)
  55                             		.loc 1 84 8
  56 000c EC A5                   		mov.L	[r10], r5
  57 000e 61 05                   		cmp	#0, r5
  58 0010 1D                      		bne	.L5
  85:../src/wolfcrypt/src/wolfmath.c ****         return 0;
  59                             		.loc 1 85 16
  60 0011 66 05                   		mov.L	#0, r5
  61 0013 2E 21                   		bra	.L6
  62                             	.L5:
  86:../src/wolfcrypt/src/wolfmath.c **** 
  87:../src/wolfcrypt/src/wolfmath.c ****     return (n >= a->used || n < 0) ? 0 : a->dp[n];
  63                             		.loc 1 87 19
  64 0015 EC A5                   		mov.L	[r10], r5
  65 0017 EC 55                   		mov.L	[r5], r5
  66                             		.loc 1 87 40
  67 0019 ED A4 01                		mov.L	4[r10], r4
  68 001c 47 54                   		cmp	r5, r4
  69 001e 28 14                   		bge	.L7
  70                             		.loc 1 87 26 discriminator 1
  71 0020 ED A5 01                		mov.L	4[r10], r5
  72 0023 61 05                   		cmp	#0, r5
  73 0025 29 0D                   		blt	.L7
  74                             		.loc 1 87 40 discriminator 3
  75 0027 EC A4                   		mov.L	[r10], r4
  76 0029 ED A5 01                		mov.L	4[r10], r5
  77 002c 62 25                   		add	#2, r5
  78 002e FE 65 45                		mov.L	[r5,r4], r5
  79 0031 0B                      		bra	.L6
  80                             	.L7:
  81                             		.loc 1 87 40 is_stmt 0 discriminator 4
  82 0032 66 05                   		mov.L	#0, r5
  83                             	.L6:
  88:../src/wolfcrypt/src/wolfmath.c **** }
  84                             		.loc 1 88 1 is_stmt 1
  85 0034 EF 51                   		mov.L	r5, r1
  86 0036 3F AA 03                		rtsd	#12, r10-r10
  87                             	.LFE44:
  89                             		.section	.text.mp_cond_copy,"ax",@progbits
  90                             		.global	_mp_cond_copy
  92                             	_mp_cond_copy:
  93                             	.LFB45:
  89:../src/wolfcrypt/src/wolfmath.c **** 
  90:../src/wolfcrypt/src/wolfmath.c **** #if defined(HAVE_ECC) || defined(WOLFSSL_MP_COND_COPY)
  91:../src/wolfcrypt/src/wolfmath.c **** /* Conditionally copy a into b. Performed in constant time.
  92:../src/wolfcrypt/src/wolfmath.c ****  *
  93:../src/wolfcrypt/src/wolfmath.c ****  * a     MP integer to copy.
  94:../src/wolfcrypt/src/wolfmath.c ****  * copy  On 1, copy a into b. on 0 leave b unchanged.
  95:../src/wolfcrypt/src/wolfmath.c ****  * b     MP integer to copy into.
  96:../src/wolfcrypt/src/wolfmath.c ****  * returns BAD_FUNC_ARG when a or b is NULL, MEMORY_E when growing b fails and
  97:../src/wolfcrypt/src/wolfmath.c ****  *         MP_OKAY otherwise.
  98:../src/wolfcrypt/src/wolfmath.c ****  */
  99:../src/wolfcrypt/src/wolfmath.c **** int mp_cond_copy(mp_int* a, int copy, mp_int* b)
 100:../src/wolfcrypt/src/wolfmath.c **** {
  94                             		.loc 1 100 1
  95 0000 7E AA                   		push.l	r10
  96                             	.LCFI4:
  97 0002 7E A6                   		push.l	r6
  98                             	.LCFI5:
  99 0004 71 0A E8                		add	#-24, r0, r10
 100                             	.LCFI6:
 101 0007 EF A0                   		mov.L	r10, r0
 102 0009 E7 A1 03                		mov.L	r1, 12[r10]
 103 000c E7 A2 04                		mov.L	r2, 16[r10]
 104 000f E7 A3 05                		mov.L	r3, 20[r10]
 101:../src/wolfcrypt/src/wolfmath.c ****     int err = MP_OKAY;
 105                             		.loc 1 101 9
 106 0012 F8 A6 00                		mov.L	#0, [r10]
 102:../src/wolfcrypt/src/wolfmath.c ****     int i;
 103:../src/wolfcrypt/src/wolfmath.c **** #if defined(SP_WORD_SIZE) && SP_WORD_SIZE == 8
 104:../src/wolfcrypt/src/wolfmath.c ****     unsigned int mask = (unsigned int)0 - copy;
 105:../src/wolfcrypt/src/wolfmath.c **** #else
 106:../src/wolfcrypt/src/wolfmath.c ****     mp_digit mask = (mp_digit)0 - copy;
 107                             		.loc 1 106 33
 108 0015 ED A5 04                		mov.L	16[r10], r5
 109                             		.loc 1 106 14
 110 0018 7E 15                   		neg	r5
 111 001a E7 A5 02                		mov.L	r5, 8[r10]
 107:../src/wolfcrypt/src/wolfmath.c **** #endif
 108:../src/wolfcrypt/src/wolfmath.c **** 
 109:../src/wolfcrypt/src/wolfmath.c ****     if (a == NULL || b == NULL)
 112                             		.loc 1 109 8
 113 001d ED A5 03                		mov.L	12[r10], r5
 114 0020 61 05                   		cmp	#0, r5
 115 0022 17                      		beq	.L10
 116                             		.loc 1 109 19 discriminator 1
 117 0023 ED A5 05                		mov.L	20[r10], r5
 118 0026 61 05                   		cmp	#0, r5
 119 0028 1D                      		bne	.L11
 120                             	.L10:
 110:../src/wolfcrypt/src/wolfmath.c ****         err = BAD_FUNC_ARG;
 121                             		.loc 1 110 13
 122 0029 F8 AA 53 FF             		mov.L	#-173, [r10]
 123                             	.L11:
 111:../src/wolfcrypt/src/wolfmath.c **** 
 112:../src/wolfcrypt/src/wolfmath.c ****     /* Ensure b has enough space to copy a into */
 113:../src/wolfcrypt/src/wolfmath.c ****     if (err == MP_OKAY)
 124                             		.loc 1 113 8
 125 002d EC A5                   		mov.L	[r10], r5
 126 002f 61 05                   		cmp	#0, r5
 127 0031 21 14                   		bne	.L12
 114:../src/wolfcrypt/src/wolfmath.c ****         err = mp_grow(b, a->used + 1);
 128                             		.loc 1 114 27
 129 0033 ED A5 03                		mov.L	12[r10], r5
 130 0036 EC 55                   		mov.L	[r5], r5
 131                             		.loc 1 114 15
 132 0038 62 15                   		add	#1, r5
 133 003a EF 52                   		mov.L	r5, r2
 134 003c ED A1 05                		mov.L	20[r10], r1
 135 003f 05 00 00 00             		bsr	_sp_grow
 136 0043 E3 A1                   		mov.L	r1, [r10]
 137                             	.L12:
 115:../src/wolfcrypt/src/wolfmath.c ****     if (err == MP_OKAY) {
 138                             		.loc 1 115 8
 139 0045 EC A5                   		mov.L	[r10], r5
 140 0047 61 05                   		cmp	#0, r5
 141 0049 3B C8 00                		bne	.L13
 116:../src/wolfcrypt/src/wolfmath.c ****         /* When mask 0, b is unchanged2
 117:../src/wolfcrypt/src/wolfmath.c ****          * When mask all set, b ^ b ^ a = a
 118:../src/wolfcrypt/src/wolfmath.c ****          */
 119:../src/wolfcrypt/src/wolfmath.c ****         /* Conditionaly copy all digits and then number of used diigits.
 120:../src/wolfcrypt/src/wolfmath.c ****          * get_digit() returns 0 when index greater than available digit.
 121:../src/wolfcrypt/src/wolfmath.c ****          */
 122:../src/wolfcrypt/src/wolfmath.c ****         for (i = 0; i < a->used; i++) {
 142                             		.loc 1 122 16
 143 004c F9 A6 01 00             		mov.L	#0, 4[r10]
 144                             		.loc 1 122 9
 145 0050 2E 44                   		bra	.L14
 146                             	.L15:
 123:../src/wolfcrypt/src/wolfmath.c ****             b->dp[i] ^= (get_digit(a, i) ^ get_digit(b, i)) & mask;
 147                             		.loc 1 123 26 discriminator 3
 148 0052 ED A2 01                		mov.L	4[r10], r2
 149 0055 ED A1 03                		mov.L	12[r10], r1
 150 0058 05 00 00 00             		bsr	_get_digit
 151 005c EF 16                   		mov.L	r1, r6
 152                             		.loc 1 123 44 discriminator 3
 153 005e ED A2 01                		mov.L	4[r10], r2
 154 0061 ED A1 05                		mov.L	20[r10], r1
 155 0064 05 00 00 00             		bsr	_get_digit
 156 0068 EF 15                   		mov.L	r1, r5
 157                             		.loc 1 123 42 discriminator 3
 158 006a FC 37 65                		xor	r6, r5
 159                             		.loc 1 123 61 discriminator 3
 160 006d ED A4 02                		mov.L	8[r10], r4
 161 0070 FF 43 45                		and	r4, r5, r3
 162                             		.loc 1 123 22 discriminator 3
 163 0073 ED A4 05                		mov.L	20[r10], r4
 164 0076 ED A5 01                		mov.L	4[r10], r5
 165 0079 62 25                   		add	#2, r5
 166 007b FE 65 45                		mov.L	[r5,r4], r5
 167 007e FC 37 53                		xor	r5, r3
 168 0081 ED A4 05                		mov.L	20[r10], r4
 169 0084 ED A5 01                		mov.L	4[r10], r5
 170 0087 62 25                   		add	#2, r5
 171 0089 FE 25 43                		mov.L	r3, [r5,r4]
 122:../src/wolfcrypt/src/wolfmath.c ****             b->dp[i] ^= (get_digit(a, i) ^ get_digit(b, i)) & mask;
 172                             		.loc 1 122 35 discriminator 3
 173 008c ED A5 01                		mov.L	4[r10], r5
 174 008f 62 15                   		add	#1, r5
 175 0091 E7 A5 01                		mov.L	r5, 4[r10]
 176                             	.L14:
 122:../src/wolfcrypt/src/wolfmath.c ****             b->dp[i] ^= (get_digit(a, i) ^ get_digit(b, i)) & mask;
 177                             		.loc 1 122 26 discriminator 1
 178 0094 ED A5 03                		mov.L	12[r10], r5
 179 0097 EC 55                   		mov.L	[r5], r5
 122:../src/wolfcrypt/src/wolfmath.c ****             b->dp[i] ^= (get_digit(a, i) ^ get_digit(b, i)) & mask;
 180                             		.loc 1 122 9 discriminator 1
 181 0099 ED A4 01                		mov.L	4[r10], r4
 182 009c 47 54                   		cmp	r5, r4
 183 009e 29 B4                   		blt	.L15
 124:../src/wolfcrypt/src/wolfmath.c ****         }
 125:../src/wolfcrypt/src/wolfmath.c ****         for (; i < b->used; i++) {
 184                             		.loc 1 125 9
 185 00a0 2E 44                   		bra	.L16
 186                             	.L17:
 126:../src/wolfcrypt/src/wolfmath.c ****             b->dp[i] ^= (get_digit(a, i) ^ get_digit(b, i)) & mask;
 187                             		.loc 1 126 26 discriminator 2
 188 00a2 ED A2 01                		mov.L	4[r10], r2
 189 00a5 ED A1 03                		mov.L	12[r10], r1
 190 00a8 05 00 00 00             		bsr	_get_digit
 191 00ac EF 16                   		mov.L	r1, r6
 192                             		.loc 1 126 44 discriminator 2
 193 00ae ED A2 01                		mov.L	4[r10], r2
 194 00b1 ED A1 05                		mov.L	20[r10], r1
 195 00b4 05 00 00 00             		bsr	_get_digit
 196 00b8 EF 15                   		mov.L	r1, r5
 197                             		.loc 1 126 42 discriminator 2
 198 00ba FC 37 65                		xor	r6, r5
 199                             		.loc 1 126 61 discriminator 2
 200 00bd ED A4 02                		mov.L	8[r10], r4
 201 00c0 FF 43 45                		and	r4, r5, r3
 202                             		.loc 1 126 22 discriminator 2
 203 00c3 ED A4 05                		mov.L	20[r10], r4
 204 00c6 ED A5 01                		mov.L	4[r10], r5
 205 00c9 62 25                   		add	#2, r5
 206 00cb FE 65 45                		mov.L	[r5,r4], r5
 207 00ce FC 37 53                		xor	r5, r3
 208 00d1 ED A4 05                		mov.L	20[r10], r4
 209 00d4 ED A5 01                		mov.L	4[r10], r5
 210 00d7 62 25                   		add	#2, r5
 211 00d9 FE 25 43                		mov.L	r3, [r5,r4]
 125:../src/wolfcrypt/src/wolfmath.c ****             b->dp[i] ^= (get_digit(a, i) ^ get_digit(b, i)) & mask;
 212                             		.loc 1 125 30 discriminator 2
 213 00dc ED A5 01                		mov.L	4[r10], r5
 214 00df 62 15                   		add	#1, r5
 215 00e1 E7 A5 01                		mov.L	r5, 4[r10]
 216                             	.L16:
 125:../src/wolfcrypt/src/wolfmath.c ****             b->dp[i] ^= (get_digit(a, i) ^ get_digit(b, i)) & mask;
 217                             		.loc 1 125 21 discriminator 1
 218 00e4 ED A5 05                		mov.L	20[r10], r5
 219 00e7 EC 55                   		mov.L	[r5], r5
 125:../src/wolfcrypt/src/wolfmath.c ****             b->dp[i] ^= (get_digit(a, i) ^ get_digit(b, i)) & mask;
 220                             		.loc 1 125 9 discriminator 1
 221 00e9 ED A4 01                		mov.L	4[r10], r4
 222 00ec 47 54                   		cmp	r5, r4
 223 00ee 29 B4                   		blt	.L17
 127:../src/wolfcrypt/src/wolfmath.c ****         }
 128:../src/wolfcrypt/src/wolfmath.c ****         b->used ^= (a->used ^ b->used) & (int)mask;
 224                             		.loc 1 128 17
 225 00f0 ED A5 05                		mov.L	20[r10], r5
 226 00f3 EC 53                   		mov.L	[r5], r3
 227                             		.loc 1 128 22
 228 00f5 ED A5 03                		mov.L	12[r10], r5
 229 00f8 EC 54                   		mov.L	[r5], r4
 230                             		.loc 1 128 32
 231 00fa ED A5 05                		mov.L	20[r10], r5
 232 00fd EC 55                   		mov.L	[r5], r5
 233                             		.loc 1 128 29
 234 00ff FC 37 45                		xor	r4, r5
 235                             		.loc 1 128 42
 236 0102 ED A4 02                		mov.L	8[r10], r4
 237                             		.loc 1 128 40
 238 0105 53 45                   		and	r4, r5
 239                             		.loc 1 128 17
 240 0107 EF 34                   		mov.L	r3, r4
 241 0109 FC 37 54                		xor	r5, r4
 242 010c ED A5 05                		mov.L	20[r10], r5
 243 010f E3 54                   		mov.L	r4, [r5]
 244                             	.L13:
 129:../src/wolfcrypt/src/wolfmath.c **** #if (!defined(WOLFSSL_SP_MATH) && !defined(WOLFSSL_SP_MATH_ALL)) || \
 130:../src/wolfcrypt/src/wolfmath.c ****     defined(WOLFSSL_SP_INT_NEGATIVE)
 131:../src/wolfcrypt/src/wolfmath.c ****         b->sign ^= (a->sign ^ b->sign) & (int)mask;
 132:../src/wolfcrypt/src/wolfmath.c **** #endif
 133:../src/wolfcrypt/src/wolfmath.c ****     }
 134:../src/wolfcrypt/src/wolfmath.c **** 
 135:../src/wolfcrypt/src/wolfmath.c ****     return err;
 245                             		.loc 1 135 12
 246 0111 EC A5                   		mov.L	[r10], r5
 136:../src/wolfcrypt/src/wolfmath.c **** }
 247                             		.loc 1 136 1
 248 0113 EF 51                   		mov.L	r5, r1
 249 0115 71 00 18                		add	#24, r0
 250 0118 7E B6                   		pop	r6
 251 011a 7E BA                   		pop	r10
 252 011c 02                      		rts
 253                             	.LFE45:
 255                             		.section	.text.get_rand_digit,"ax",@progbits
 256                             		.global	_get_rand_digit
 258                             	_get_rand_digit:
 259                             	.LFB46:
 137:../src/wolfcrypt/src/wolfmath.c **** #endif
 138:../src/wolfcrypt/src/wolfmath.c **** 
 139:../src/wolfcrypt/src/wolfmath.c **** #ifndef WC_NO_RNG
 140:../src/wolfcrypt/src/wolfmath.c **** int get_rand_digit(WC_RNG* rng, mp_digit* d)
 141:../src/wolfcrypt/src/wolfmath.c **** {
 260                             		.loc 1 141 1
 261 0000 7E AA                   		push.l	r10
 262                             	.LCFI7:
 263 0002 71 0A F8                		add	#-8, r0, r10
 264                             	.LCFI8:
 265 0005 EF A0                   		mov.L	r10, r0
 266 0007 E3 A1                   		mov.L	r1, [r10]
 267 0009 E7 A2 01                		mov.L	r2, 4[r10]
 142:../src/wolfcrypt/src/wolfmath.c ****     return wc_RNG_GenerateBlock(rng, (byte*)d, sizeof(mp_digit));
 268                             		.loc 1 142 12
 269 000c 66 43                   		mov.L	#4, r3
 270 000e ED A2 01                		mov.L	4[r10], r2
 271 0011 EC A1                   		mov.L	[r10], r1
 272 0013 05 00 00 00             		bsr	_wc_RNG_GenerateBlock
 273 0017 EF 15                   		mov.L	r1, r5
 143:../src/wolfcrypt/src/wolfmath.c **** }
 274                             		.loc 1 143 1
 275 0019 EF 51                   		mov.L	r5, r1
 276 001b 3F AA 03                		rtsd	#12, r10-r10
 277                             	.LFE46:
 279                             		.section	.text.mp_rand,"ax",@progbits
 280                             		.global	_mp_rand
 282                             	_mp_rand:
 283                             	.LFB47:
 144:../src/wolfcrypt/src/wolfmath.c **** 
 145:../src/wolfcrypt/src/wolfmath.c **** #if defined(WC_RSA_BLINDING) || defined(WOLFCRYPT_HAVE_SAKKE)
 146:../src/wolfcrypt/src/wolfmath.c **** int mp_rand(mp_int* a, int digits, WC_RNG* rng)
 147:../src/wolfcrypt/src/wolfmath.c **** {
 284                             		.loc 1 147 1
 285 0000 7E AA                   		push.l	r10
 286                             	.LCFI9:
 287 0002 71 0A E8                		add	#-24, r0, r10
 288                             	.LCFI10:
 289 0005 EF A0                   		mov.L	r10, r0
 290 0007 E7 A1 03                		mov.L	r1, 12[r10]
 291 000a E7 A2 04                		mov.L	r2, 16[r10]
 292 000d E7 A3 05                		mov.L	r3, 20[r10]
 148:../src/wolfcrypt/src/wolfmath.c ****     int ret = 0;
 293                             		.loc 1 148 9
 294 0010 F8 A6 00                		mov.L	#0, [r10]
 149:../src/wolfcrypt/src/wolfmath.c ****     int cnt = digits * sizeof(mp_digit);
 295                             		.loc 1 149 22
 296 0013 ED A5 04                		mov.L	16[r10], r5
 297 0016 6C 25                   		shll	#2, r5
 298                             		.loc 1 149 9
 299 0018 E7 A5 02                		mov.L	r5, 8[r10]
 150:../src/wolfcrypt/src/wolfmath.c **** #if !defined(USE_FAST_MATH) && !defined(WOLFSSL_SP_MATH)
 151:../src/wolfcrypt/src/wolfmath.c ****     int i;
 152:../src/wolfcrypt/src/wolfmath.c **** #endif
 153:../src/wolfcrypt/src/wolfmath.c **** 
 154:../src/wolfcrypt/src/wolfmath.c ****     if (rng == NULL) {
 300                             		.loc 1 154 8
 301 001b ED A5 05                		mov.L	20[r10], r5
 302 001e 61 05                   		cmp	#0, r5
 303 0020 1F                      		bne	.L22
 155:../src/wolfcrypt/src/wolfmath.c ****         ret = MISSING_RNG_E;
 304                             		.loc 1 155 13
 305 0021 F8 AA 14 FF             		mov.L	#-236, [r10]
 306 0025 2E 12                   		bra	.L23
 307                             	.L22:
 156:../src/wolfcrypt/src/wolfmath.c ****     }
 157:../src/wolfcrypt/src/wolfmath.c ****     else if (a == NULL || digits == 0) {
 308                             		.loc 1 157 13
 309 0027 ED A5 03                		mov.L	12[r10], r5
 310 002a 61 05                   		cmp	#0, r5
 311 002c 17                      		beq	.L24
 312                             		.loc 1 157 24 discriminator 1
 313 002d ED A5 04                		mov.L	16[r10], r5
 314 0030 61 05                   		cmp	#0, r5
 315 0032 1D                      		bne	.L23
 316                             	.L24:
 158:../src/wolfcrypt/src/wolfmath.c ****         ret = BAD_FUNC_ARG;
 317                             		.loc 1 158 13
 318 0033 F8 AA 53 FF             		mov.L	#-173, [r10]
 319                             	.L23:
 159:../src/wolfcrypt/src/wolfmath.c ****     }
 160:../src/wolfcrypt/src/wolfmath.c **** 
 161:../src/wolfcrypt/src/wolfmath.c **** #if !defined(USE_FAST_MATH) && !defined(WOLFSSL_SP_MATH)
 162:../src/wolfcrypt/src/wolfmath.c ****     /* allocate space for digits */
 163:../src/wolfcrypt/src/wolfmath.c ****     if (ret == MP_OKAY) {
 320                             		.loc 1 163 8
 321 0037 EC A5                   		mov.L	[r10], r5
 322 0039 61 05                   		cmp	#0, r5
 323 003b 21 14                   		bne	.L25
 164:../src/wolfcrypt/src/wolfmath.c ****         ret = mp_set_bit(a, digits * DIGIT_BIT - 1);
 324                             		.loc 1 164 36
 325 003d ED A5 04                		mov.L	16[r10], r5
 326 0040 6C 55                   		shll	#5, r5
 327                             		.loc 1 164 15
 328 0042 60 15                   		sub	#1, r5
 329 0044 EF 52                   		mov.L	r5, r2
 330 0046 ED A1 03                		mov.L	12[r10], r1
 331 0049 05 00 00 00             		bsr	_sp_set_bit
 332 004d E3 A1                   		mov.L	r1, [r10]
 333                             	.L25:
 165:../src/wolfcrypt/src/wolfmath.c ****     }
 166:../src/wolfcrypt/src/wolfmath.c **** #else
 167:../src/wolfcrypt/src/wolfmath.c **** #if defined(WOLFSSL_SP_MATH) || defined(WOLFSSL_SP_MATH_ALL)
 168:../src/wolfcrypt/src/wolfmath.c ****     if ((ret == MP_OKAY) && (digits > SP_INT_DIGITS))
 169:../src/wolfcrypt/src/wolfmath.c **** #else
 170:../src/wolfcrypt/src/wolfmath.c ****     if ((ret == MP_OKAY) && (digits > FP_SIZE))
 171:../src/wolfcrypt/src/wolfmath.c **** #endif
 172:../src/wolfcrypt/src/wolfmath.c ****     {
 173:../src/wolfcrypt/src/wolfmath.c ****         ret = BAD_FUNC_ARG;
 174:../src/wolfcrypt/src/wolfmath.c ****     }
 175:../src/wolfcrypt/src/wolfmath.c ****     if (ret == MP_OKAY) {
 176:../src/wolfcrypt/src/wolfmath.c ****         a->used = digits;
 177:../src/wolfcrypt/src/wolfmath.c ****     }
 178:../src/wolfcrypt/src/wolfmath.c **** #endif
 179:../src/wolfcrypt/src/wolfmath.c ****     /* fill the data with random bytes */
 180:../src/wolfcrypt/src/wolfmath.c ****     if (ret == MP_OKAY) {
 334                             		.loc 1 180 8
 335 004f EC A5                   		mov.L	[r10], r5
 336 0051 61 05                   		cmp	#0, r5
 337 0053 21 17                   		bne	.L26
 181:../src/wolfcrypt/src/wolfmath.c ****         ret = wc_RNG_GenerateBlock(rng, (byte*)a->dp, cnt);
 338                             		.loc 1 181 48
 339 0055 ED A5 03                		mov.L	12[r10], r5
 340 0058 62 85                   		add	#8, r5
 341                             		.loc 1 181 15
 342 005a ED A4 02                		mov.L	8[r10], r4
 343 005d EF 43                   		mov.L	r4, r3
 344 005f EF 52                   		mov.L	r5, r2
 345 0061 ED A1 05                		mov.L	20[r10], r1
 346 0064 05 00 00 00             		bsr	_wc_RNG_GenerateBlock
 347 0068 E3 A1                   		mov.L	r1, [r10]
 348                             	.L26:
 182:../src/wolfcrypt/src/wolfmath.c ****     }
 183:../src/wolfcrypt/src/wolfmath.c ****     if (ret == MP_OKAY) {
 349                             		.loc 1 183 8
 350 006a EC A5                   		mov.L	[r10], r5
 351 006c 61 05                   		cmp	#0, r5
 352 006e 3B 88 00                		bne	.L27
 184:../src/wolfcrypt/src/wolfmath.c **** #if !defined(USE_FAST_MATH) && !defined(WOLFSSL_SP_MATH)
 185:../src/wolfcrypt/src/wolfmath.c ****         /* Mask down each digit to only bits used */
 186:../src/wolfcrypt/src/wolfmath.c ****         for (i = 0; i < a->used; i++) {
 353                             		.loc 1 186 16
 354 0071 F9 A6 01 00             		mov.L	#0, 4[r10]
 355                             		.loc 1 186 9
 356 0075 2E 20                   		bra	.L28
 357                             	.L29:
 187:../src/wolfcrypt/src/wolfmath.c ****             a->dp[i] &= MP_MASK;
 358                             		.loc 1 187 22 discriminator 3
 359 0077 ED A4 03                		mov.L	12[r10], r4
 360 007a ED A5 01                		mov.L	4[r10], r5
 361 007d 62 25                   		add	#2, r5
 362 007f FE 65 43                		mov.L	[r5,r4], r3
 363 0082 ED A4 03                		mov.L	12[r10], r4
 364 0085 ED A5 01                		mov.L	4[r10], r5
 365 0088 62 25                   		add	#2, r5
 366 008a FE 25 43                		mov.L	r3, [r5,r4]
 186:../src/wolfcrypt/src/wolfmath.c ****             a->dp[i] &= MP_MASK;
 367                             		.loc 1 186 35 discriminator 3
 368 008d ED A5 01                		mov.L	4[r10], r5
 369 0090 62 15                   		add	#1, r5
 370 0092 E7 A5 01                		mov.L	r5, 4[r10]
 371                             	.L28:
 186:../src/wolfcrypt/src/wolfmath.c ****             a->dp[i] &= MP_MASK;
 372                             		.loc 1 186 26 discriminator 1
 373 0095 ED A5 03                		mov.L	12[r10], r5
 374 0098 EC 55                   		mov.L	[r5], r5
 186:../src/wolfcrypt/src/wolfmath.c ****             a->dp[i] &= MP_MASK;
 375                             		.loc 1 186 9 discriminator 1
 376 009a ED A4 01                		mov.L	4[r10], r4
 377 009d 47 54                   		cmp	r5, r4
 378 009f 29 D8                   		blt	.L29
 188:../src/wolfcrypt/src/wolfmath.c ****         }
 189:../src/wolfcrypt/src/wolfmath.c **** #endif
 190:../src/wolfcrypt/src/wolfmath.c ****         /* ensure top digit is not zero */
 191:../src/wolfcrypt/src/wolfmath.c ****         while ((ret == MP_OKAY) && (a->dp[a->used - 1] == 0)) {
 379                             		.loc 1 191 15
 380 00a1 2E 3C                   		bra	.L30
 381                             	.L31:
 192:../src/wolfcrypt/src/wolfmath.c ****             ret = get_rand_digit(rng, &a->dp[a->used - 1]);
 382                             		.loc 1 192 47
 383 00a3 ED A5 03                		mov.L	12[r10], r5
 384 00a6 EC 55                   		mov.L	[r5], r5
 385                             		.loc 1 192 54
 386 00a8 60 15                   		sub	#1, r5
 387                             		.loc 1 192 39
 388 00aa 62 25                   		add	#2, r5
 389 00ac 6C 25                   		shll	#2, r5
 390 00ae ED A4 03                		mov.L	12[r10], r4
 391 00b1 4B 45                   		add	r4, r5
 392                             		.loc 1 192 19
 393 00b3 EF 52                   		mov.L	r5, r2
 394 00b5 ED A1 05                		mov.L	20[r10], r1
 395 00b8 05 00 00 00             		bsr	_get_rand_digit
 396 00bc E3 A1                   		mov.L	r1, [r10]
 193:../src/wolfcrypt/src/wolfmath.c **** #if !defined(USE_FAST_MATH) && !defined(WOLFSSL_SP_MATH)
 194:../src/wolfcrypt/src/wolfmath.c ****             a->dp[a->used - 1] &= MP_MASK;
 397                             		.loc 1 194 20
 398 00be ED A5 03                		mov.L	12[r10], r5
 399 00c1 EC 55                   		mov.L	[r5], r5
 400                             		.loc 1 194 32
 401 00c3 71 54 FF                		add	#-1, r5, r4
 402                             		.loc 1 194 20
 403 00c6 ED A5 03                		mov.L	12[r10], r5
 404 00c9 EC 55                   		mov.L	[r5], r5
 405                             		.loc 1 194 32
 406 00cb 60 15                   		sub	#1, r5
 407 00cd ED A3 03                		mov.L	12[r10], r3
 408 00d0 62 24                   		add	#2, r4
 409 00d2 FE 64 33                		mov.L	[r4,r3], r3
 410 00d5 ED A4 03                		mov.L	12[r10], r4
 411 00d8 62 25                   		add	#2, r5
 412 00da FE 25 43                		mov.L	r3, [r5,r4]
 413                             	.L30:
 191:../src/wolfcrypt/src/wolfmath.c ****             ret = get_rand_digit(rng, &a->dp[a->used - 1]);
 414                             		.loc 1 191 15
 415 00dd EC A5                   		mov.L	[r10], r5
 416 00df 61 05                   		cmp	#0, r5
 417 00e1 21 15                   		bne	.L27
 191:../src/wolfcrypt/src/wolfmath.c ****             ret = get_rand_digit(rng, &a->dp[a->used - 1]);
 418                             		.loc 1 191 44 discriminator 1
 419 00e3 ED A5 03                		mov.L	12[r10], r5
 420 00e6 EC 55                   		mov.L	[r5], r5
 191:../src/wolfcrypt/src/wolfmath.c ****             ret = get_rand_digit(rng, &a->dp[a->used - 1]);
 421                             		.loc 1 191 51 discriminator 1
 422 00e8 60 15                   		sub	#1, r5
 191:../src/wolfcrypt/src/wolfmath.c ****             ret = get_rand_digit(rng, &a->dp[a->used - 1]);
 423                             		.loc 1 191 42 discriminator 1
 424 00ea ED A4 03                		mov.L	12[r10], r4
 425 00ed 62 25                   		add	#2, r5
 426 00ef FE 65 45                		mov.L	[r5,r4], r5
 191:../src/wolfcrypt/src/wolfmath.c ****             ret = get_rand_digit(rng, &a->dp[a->used - 1]);
 427                             		.loc 1 191 33 discriminator 1
 428 00f2 61 05                   		cmp	#0, r5
 429 00f4 20 AF                   		beq	.L31
 430                             	.L27:
 195:../src/wolfcrypt/src/wolfmath.c **** #endif
 196:../src/wolfcrypt/src/wolfmath.c ****         }
 197:../src/wolfcrypt/src/wolfmath.c ****     }
 198:../src/wolfcrypt/src/wolfmath.c **** 
 199:../src/wolfcrypt/src/wolfmath.c ****     return ret;
 431                             		.loc 1 199 12
 432 00f6 EC A5                   		mov.L	[r10], r5
 200:../src/wolfcrypt/src/wolfmath.c **** }
 433                             		.loc 1 200 1
 434 00f8 EF 51                   		mov.L	r5, r1
 435 00fa 3F AA 07                		rtsd	#28, r10-r10
 436                             	.LFE47:
 438                             		.section	.text.wc_export_int,"ax",@progbits
 439                             		.global	_wc_export_int
 441                             	_wc_export_int:
 442                             	.LFB48:
 201:../src/wolfcrypt/src/wolfmath.c **** #endif /* WC_RSA_BLINDING || WOLFCRYPT_HAVE_SAKKE */
 202:../src/wolfcrypt/src/wolfmath.c **** #endif
 203:../src/wolfcrypt/src/wolfmath.c **** 
 204:../src/wolfcrypt/src/wolfmath.c **** #if defined(HAVE_ECC) || defined(WOLFSSL_EXPORT_INT)
 205:../src/wolfcrypt/src/wolfmath.c **** /* export an mp_int as unsigned char or hex string
 206:../src/wolfcrypt/src/wolfmath.c ****  * encType is WC_TYPE_UNSIGNED_BIN or WC_TYPE_HEX_STR
 207:../src/wolfcrypt/src/wolfmath.c ****  * return MP_OKAY on success */
 208:../src/wolfcrypt/src/wolfmath.c **** int wc_export_int(mp_int* mp, byte* buf, word32* len, word32 keySz,
 209:../src/wolfcrypt/src/wolfmath.c ****     int encType)
 210:../src/wolfcrypt/src/wolfmath.c **** {
 443                             		.loc 1 210 1
 444 0000 7E AA                   		push.l	r10
 445                             	.LCFI11:
 446 0002 71 0A E4                		add	#-28, r0, r10
 447                             	.LCFI12:
 448 0005 EF A0                   		mov.L	r10, r0
 449 0007 75 45 24                		mov.L	#36, r5
 450 000a 4B A5                   		add	r10, r5
 451 000c E7 A1 02                		mov.L	r1, 8[r10]
 452 000f E7 A2 03                		mov.L	r2, 12[r10]
 453 0012 E7 A3 04                		mov.L	r3, 16[r10]
 454 0015 E7 A4 05                		mov.L	r4, 20[r10]
 211:../src/wolfcrypt/src/wolfmath.c ****     int err;
 212:../src/wolfcrypt/src/wolfmath.c **** 
 213:../src/wolfcrypt/src/wolfmath.c ****     if (mp == NULL || buf == NULL || len == NULL)
 455                             		.loc 1 213 8
 456 0018 ED A4 02                		mov.L	8[r10], r4
 457 001b 61 04                   		cmp	#0, r4
 458 001d 20 0E                   		beq	.L34
 459                             		.loc 1 213 20 discriminator 1
 460 001f ED A4 03                		mov.L	12[r10], r4
 461 0022 61 04                   		cmp	#0, r4
 462 0024 17                      		beq	.L34
 463                             		.loc 1 213 35 discriminator 2
 464 0025 ED A4 04                		mov.L	16[r10], r4
 465 0028 61 04                   		cmp	#0, r4
 466 002a 18                      		bne	.L35
 467                             	.L34:
 214:../src/wolfcrypt/src/wolfmath.c ****         return BAD_FUNC_ARG;
 468                             		.loc 1 214 16
 469 002b FB 5A 53 FF             		mov.L	#-173, r5
 470 002f 38 AC 00                		bra	.L36
 471                             	.L35:
 215:../src/wolfcrypt/src/wolfmath.c **** 
 216:../src/wolfcrypt/src/wolfmath.c ****     if (encType == WC_TYPE_HEX_STR) {
 472                             		.loc 1 216 8
 473 0032 EC 55                   		mov.L	[r5], r5
 474 0034 61 15                   		cmp	#1, r5
 475 0036 21 52                   		bne	.L37
 476                             	.LBB2:
 217:../src/wolfcrypt/src/wolfmath.c ****         /* for WC_TYPE_HEX_STR the keySz is not used.
 218:../src/wolfcrypt/src/wolfmath.c ****          * The size is computed via mp_radix_size and checked with len input */
 219:../src/wolfcrypt/src/wolfmath.c ****     #ifdef WC_MP_TO_RADIX
 220:../src/wolfcrypt/src/wolfmath.c ****         int size = 0;
 477                             		.loc 1 220 13
 478 0038 F9 A6 01 00             		mov.L	#0, 4[r10]
 221:../src/wolfcrypt/src/wolfmath.c ****         err = mp_radix_size(mp, MP_RADIX_HEX, &size);
 479                             		.loc 1 221 15
 480 003c 71 A5 04                		add	#4, r10, r5
 481 003f EF 53                   		mov.L	r5, r3
 482 0041 75 42 10                		mov.L	#16, r2
 483 0044 ED A1 02                		mov.L	8[r10], r1
 484 0047 05 00 00 00             		bsr	_sp_radix_size
 485 004b E3 A1                   		mov.L	r1, [r10]
 222:../src/wolfcrypt/src/wolfmath.c ****         if (err == MP_OKAY) {
 486                             		.loc 1 222 12
 487 004d EC A5                   		mov.L	[r10], r5
 488 004f 61 05                   		cmp	#0, r5
 489 0051 3B 88 00                		bne	.L40
 223:../src/wolfcrypt/src/wolfmath.c ****             /* make sure we can fit result */
 224:../src/wolfcrypt/src/wolfmath.c ****             if (*len < (word32)size) {
 490                             		.loc 1 224 17
 491 0054 ED A5 04                		mov.L	16[r10], r5
 492 0057 EC 54                   		mov.L	[r5], r4
 493                             		.loc 1 224 24
 494 0059 ED A5 01                		mov.L	4[r10], r5
 495                             		.loc 1 224 16
 496 005c 47 54                   		cmp	r5, r4
 497 005e 22 12                   		bgeu	.L39
 225:../src/wolfcrypt/src/wolfmath.c ****                 *len = (word32)size;
 498                             		.loc 1 225 24
 499 0060 ED A5 01                		mov.L	4[r10], r5
 500 0063 EF 54                   		mov.L	r5, r4
 501                             		.loc 1 225 22
 502 0065 ED A5 04                		mov.L	16[r10], r5
 503 0068 E3 54                   		mov.L	r4, [r5]
 226:../src/wolfcrypt/src/wolfmath.c ****                 return BUFFER_E;
 504                             		.loc 1 226 24
 505 006a FB 5A 7C FF             		mov.L	#-132, r5
 506 006e 2E 6D                   		bra	.L36
 507                             	.L39:
 227:../src/wolfcrypt/src/wolfmath.c ****             }
 228:../src/wolfcrypt/src/wolfmath.c ****             *len = (word32)size;
 508                             		.loc 1 228 20
 509 0070 ED A5 01                		mov.L	4[r10], r5
 510 0073 EF 54                   		mov.L	r5, r4
 511                             		.loc 1 228 18
 512 0075 ED A5 04                		mov.L	16[r10], r5
 513 0078 E3 54                   		mov.L	r4, [r5]
 229:../src/wolfcrypt/src/wolfmath.c ****             err = mp_tohex(mp, (char*)buf);
 514                             		.loc 1 229 19
 515 007a ED A2 03                		mov.L	12[r10], r2
 516 007d ED A1 02                		mov.L	8[r10], r1
 517 0080 05 00 00 00             		bsr	_sp_tohex
 518 0084 E3 A1                   		mov.L	r1, [r10]
 519 0086 2E 53                   		bra	.L40
 520                             	.L37:
 521                             	.LBE2:
 230:../src/wolfcrypt/src/wolfmath.c ****         }
 231:../src/wolfcrypt/src/wolfmath.c ****     #else
 232:../src/wolfcrypt/src/wolfmath.c ****         err = NOT_COMPILED_IN;
 233:../src/wolfcrypt/src/wolfmath.c ****     #endif
 234:../src/wolfcrypt/src/wolfmath.c ****     }
 235:../src/wolfcrypt/src/wolfmath.c ****     else {
 236:../src/wolfcrypt/src/wolfmath.c ****         /* for WC_TYPE_UNSIGNED_BIN keySz is used to zero pad.
 237:../src/wolfcrypt/src/wolfmath.c ****          * The key size is always returned as the size */
 238:../src/wolfcrypt/src/wolfmath.c ****         if (*len < keySz) {
 522                             		.loc 1 238 13
 523 0088 ED A5 04                		mov.L	16[r10], r5
 524 008b EC 55                   		mov.L	[r5], r5
 525                             		.loc 1 238 12
 526 008d ED A4 05                		mov.L	20[r10], r4
 527 0090 47 54                   		cmp	r5, r4
 528 0092 25 10                   		bleu	.L41
 239:../src/wolfcrypt/src/wolfmath.c ****             *len = keySz;
 529                             		.loc 1 239 18
 530 0094 ED A5 04                		mov.L	16[r10], r5
 531 0097 ED A4 05                		mov.L	20[r10], r4
 532 009a E3 54                   		mov.L	r4, [r5]
 240:../src/wolfcrypt/src/wolfmath.c ****             return BUFFER_E;
 533                             		.loc 1 240 20
 534 009c FB 5A 7C FF             		mov.L	#-132, r5
 535 00a0 2E 3B                   		bra	.L36
 536                             	.L41:
 241:../src/wolfcrypt/src/wolfmath.c ****         }
 242:../src/wolfcrypt/src/wolfmath.c ****         *len = keySz;
 537                             		.loc 1 242 14
 538 00a2 ED A5 04                		mov.L	16[r10], r5
 539 00a5 ED A4 05                		mov.L	20[r10], r4
 540 00a8 E3 54                   		mov.L	r4, [r5]
 243:../src/wolfcrypt/src/wolfmath.c ****         XMEMSET(buf, 0, *len);
 541                             		.loc 1 243 9
 542 00aa ED A5 04                		mov.L	16[r10], r5
 543 00ad EC 55                   		mov.L	[r5], r5
 544 00af EF 53                   		mov.L	r5, r3
 545 00b1 66 02                   		mov.L	#0, r2
 546 00b3 ED A1 03                		mov.L	12[r10], r1
 547 00b6 05 00 00 00             		bsr	_memset
 244:../src/wolfcrypt/src/wolfmath.c ****         err = mp_to_unsigned_bin(mp, buf + (keySz - mp_unsigned_bin_size(mp)));
 548                             		.loc 1 244 53
 549 00ba ED A1 02                		mov.L	8[r10], r1
 550 00bd 05 00 00 00             		bsr	_sp_unsigned_bin_size
 551 00c1 EF 15                   		mov.L	r1, r5
 552                             		.loc 1 244 51
 553 00c3 ED A4 05                		mov.L	20[r10], r4
 554 00c6 FF 05 54                		sub	r5, r4, r5
 555                             		.loc 1 244 15
 556 00c9 ED A4 03                		mov.L	12[r10], r4
 557 00cc 4B 45                   		add	r4, r5
 558 00ce EF 52                   		mov.L	r5, r2
 559 00d0 ED A1 02                		mov.L	8[r10], r1
 560 00d3 05 00 00 00             		bsr	_sp_to_unsigned_bin
 561 00d7 E3 A1                   		mov.L	r1, [r10]
 562                             	.L40:
 245:../src/wolfcrypt/src/wolfmath.c ****     }
 246:../src/wolfcrypt/src/wolfmath.c **** 
 247:../src/wolfcrypt/src/wolfmath.c ****     return err;
 563                             		.loc 1 247 12
 564 00d9 EC A5                   		mov.L	[r10], r5
 565                             		.balign 8,3,1
 566                             	.L36:
 248:../src/wolfcrypt/src/wolfmath.c **** }
 567                             		.loc 1 248 1
 568 00db EF 51                   		mov.L	r5, r1
 569 00dd 3F AA 08                		rtsd	#32, r10-r10
 570                             	.LFE48:
 710                             	.Letext0:
 711                             		.file 2 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 712                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 713                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 714                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 715                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 716                             		.file 7 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 717                             		.file 8 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 718                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 719                             		.file 10 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sp_int.h"
 720                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/random.h"
 721                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/wolfmath.h"
 722                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha256.h"
 723                             		.file 14 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
