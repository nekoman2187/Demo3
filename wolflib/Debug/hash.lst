   1                             		.file	"hash.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.wc_HashTypeConvert,"ax",@progbits
   5                             		.global	_wc_HashTypeConvert
   7                             	_wc_HashTypeConvert:
   8                             	.LFB43:
   9                             		.file 1 "../src/wolfcrypt/src/hash.c"
   1:../src/wolfcrypt/src/hash.c **** /* hash.c
   2:../src/wolfcrypt/src/hash.c ****  *
   3:../src/wolfcrypt/src/hash.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/hash.c ****  *
   5:../src/wolfcrypt/src/hash.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/hash.c ****  *
   7:../src/wolfcrypt/src/hash.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/hash.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/hash.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/hash.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/hash.c ****  *
  12:../src/wolfcrypt/src/hash.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/hash.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/hash.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/hash.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/hash.c ****  *
  17:../src/wolfcrypt/src/hash.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/hash.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/hash.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/hash.c ****  */
  21:../src/wolfcrypt/src/hash.c **** 
  22:../src/wolfcrypt/src/hash.c **** 
  23:../src/wolfcrypt/src/hash.c **** #ifdef HAVE_CONFIG_H
  24:../src/wolfcrypt/src/hash.c ****     #include <config.h>
  25:../src/wolfcrypt/src/hash.c **** #endif
  26:../src/wolfcrypt/src/hash.c **** 
  27:../src/wolfcrypt/src/hash.c **** #include <wolfssl/wolfcrypt/settings.h>
  28:../src/wolfcrypt/src/hash.c **** #include <wolfssl/wolfcrypt/logging.h>
  29:../src/wolfcrypt/src/hash.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  30:../src/wolfcrypt/src/hash.c **** #ifndef NO_ASN
  31:../src/wolfcrypt/src/hash.c **** #include <wolfssl/wolfcrypt/asn.h>
  32:../src/wolfcrypt/src/hash.c **** #endif
  33:../src/wolfcrypt/src/hash.c **** 
  34:../src/wolfcrypt/src/hash.c **** #include <wolfssl/wolfcrypt/hash.h>
  35:../src/wolfcrypt/src/hash.c **** #include <wolfssl/wolfcrypt/hmac.h>
  36:../src/wolfcrypt/src/hash.c **** #include <wolfssl/wolfcrypt/cryptocb.h>
  37:../src/wolfcrypt/src/hash.c **** 
  38:../src/wolfcrypt/src/hash.c **** #ifdef NO_INLINE
  39:../src/wolfcrypt/src/hash.c ****     #include <wolfssl/wolfcrypt/misc.h>
  40:../src/wolfcrypt/src/hash.c **** #else
  41:../src/wolfcrypt/src/hash.c ****     #define WOLFSSL_MISC_INCLUDED
  42:../src/wolfcrypt/src/hash.c ****     #include <wolfcrypt/src/misc.c>
  43:../src/wolfcrypt/src/hash.c **** #endif
  44:../src/wolfcrypt/src/hash.c **** 
  45:../src/wolfcrypt/src/hash.c **** 
  46:../src/wolfcrypt/src/hash.c **** #ifdef NO_ASN
  47:../src/wolfcrypt/src/hash.c **** enum Hash_Sum  {
  48:../src/wolfcrypt/src/hash.c ****     MD2h      = 646,
  49:../src/wolfcrypt/src/hash.c ****     MD5h      = 649,
  50:../src/wolfcrypt/src/hash.c ****     SHAh      =  88,
  51:../src/wolfcrypt/src/hash.c ****     SHA224h   = 417,
  52:../src/wolfcrypt/src/hash.c ****     SHA256h   = 414,
  53:../src/wolfcrypt/src/hash.c ****     SHA384h   = 415,
  54:../src/wolfcrypt/src/hash.c ****     SHA512h   = 416,
  55:../src/wolfcrypt/src/hash.c ****     SHA512_224h = 418,
  56:../src/wolfcrypt/src/hash.c ****     SHA512_256h = 419,
  57:../src/wolfcrypt/src/hash.c ****     SHA3_224h = 420,
  58:../src/wolfcrypt/src/hash.c ****     SHA3_256h = 421,
  59:../src/wolfcrypt/src/hash.c ****     SHA3_384h = 422,
  60:../src/wolfcrypt/src/hash.c ****     SHA3_512h = 423,
  61:../src/wolfcrypt/src/hash.c ****     SHAKE128h = 424,
  62:../src/wolfcrypt/src/hash.c ****     SHAKE256h = 425
  63:../src/wolfcrypt/src/hash.c **** };
  64:../src/wolfcrypt/src/hash.c **** #endif /* !NO_ASN */
  65:../src/wolfcrypt/src/hash.c **** 
  66:../src/wolfcrypt/src/hash.c **** #if !defined(NO_PWDBASED) || !defined(NO_ASN)
  67:../src/wolfcrypt/src/hash.c **** /* function converts int hash type to enum */
  68:../src/wolfcrypt/src/hash.c **** enum wc_HashType wc_HashTypeConvert(int hashType)
  69:../src/wolfcrypt/src/hash.c **** {
  10                             		.loc 1 69 1
  11 0000 7E AA                   		push.l	r10
  12                             	.LCFI0:
  13 0002 71 0A F8                		add	#-8, r0, r10
  14                             	.LCFI1:
  15 0005 EF A0                   		mov.L	r10, r0
  16 0007 E7 A1 01                		mov.L	r1, 4[r10]
  70:../src/wolfcrypt/src/hash.c ****     /* Default to hash type none as error */
  71:../src/wolfcrypt/src/hash.c ****     enum wc_HashType eHashType = WC_HASH_TYPE_NONE;
  17                             		.loc 1 71 22
  18 000a F8 A6 00                		mov.L	#0, [r10]
  72:../src/wolfcrypt/src/hash.c **** #if defined(HAVE_FIPS) || defined(HAVE_SELFTEST)
  73:../src/wolfcrypt/src/hash.c ****     /* original FIPSv1  and CAVP selftest require a mapping for unique hash
  74:../src/wolfcrypt/src/hash.c ****        type to wc_HashType */
  75:../src/wolfcrypt/src/hash.c ****     switch (hashType) {
  76:../src/wolfcrypt/src/hash.c ****     #ifndef NO_MD5
  77:../src/wolfcrypt/src/hash.c ****         case WC_MD5:
  78:../src/wolfcrypt/src/hash.c ****             eHashType = WC_HASH_TYPE_MD5;
  79:../src/wolfcrypt/src/hash.c ****             break;
  80:../src/wolfcrypt/src/hash.c ****     #endif /* !NO_MD5 */
  81:../src/wolfcrypt/src/hash.c ****     #ifndef NO_SHA
  82:../src/wolfcrypt/src/hash.c ****         case WC_SHA:
  83:../src/wolfcrypt/src/hash.c ****             eHashType = WC_HASH_TYPE_SHA;
  84:../src/wolfcrypt/src/hash.c ****             break;
  85:../src/wolfcrypt/src/hash.c ****     #endif /* !NO_SHA */
  86:../src/wolfcrypt/src/hash.c **** 
  87:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SHA224
  88:../src/wolfcrypt/src/hash.c ****         case WC_SHA224:
  89:../src/wolfcrypt/src/hash.c ****             eHashType = WC_HASH_TYPE_SHA224;
  90:../src/wolfcrypt/src/hash.c ****             break;
  91:../src/wolfcrypt/src/hash.c ****     #endif /* WOLFSSL_SHA224 */
  92:../src/wolfcrypt/src/hash.c **** 
  93:../src/wolfcrypt/src/hash.c ****     #ifndef NO_SHA256
  94:../src/wolfcrypt/src/hash.c ****         case WC_SHA256:
  95:../src/wolfcrypt/src/hash.c ****             eHashType = WC_HASH_TYPE_SHA256;
  96:../src/wolfcrypt/src/hash.c ****             break;
  97:../src/wolfcrypt/src/hash.c ****     #endif /* !NO_SHA256 */
  98:../src/wolfcrypt/src/hash.c **** 
  99:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SHA384
 100:../src/wolfcrypt/src/hash.c ****         case WC_SHA384:
 101:../src/wolfcrypt/src/hash.c ****             eHashType = WC_HASH_TYPE_SHA384;
 102:../src/wolfcrypt/src/hash.c ****             break;
 103:../src/wolfcrypt/src/hash.c ****     #endif /* WOLFSSL_SHA384 */
 104:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SHA512
 105:../src/wolfcrypt/src/hash.c ****         case WC_SHA512:
 106:../src/wolfcrypt/src/hash.c ****             eHashType = WC_HASH_TYPE_SHA512;
 107:../src/wolfcrypt/src/hash.c ****             break;
 108:../src/wolfcrypt/src/hash.c **** 
 109:../src/wolfcrypt/src/hash.c ****     #endif /* WOLFSSL_SHA512 */
 110:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SHA3
 111:../src/wolfcrypt/src/hash.c ****         case WC_SHA3_224:
 112:../src/wolfcrypt/src/hash.c ****             eHashType = WC_HASH_TYPE_SHA3_224;
 113:../src/wolfcrypt/src/hash.c ****             break;
 114:../src/wolfcrypt/src/hash.c ****         case WC_SHA3_256:
 115:../src/wolfcrypt/src/hash.c ****             eHashType = WC_HASH_TYPE_SHA3_256;
 116:../src/wolfcrypt/src/hash.c ****             break;
 117:../src/wolfcrypt/src/hash.c ****         case WC_SHA3_384:
 118:../src/wolfcrypt/src/hash.c ****             eHashType = WC_HASH_TYPE_SHA3_384;
 119:../src/wolfcrypt/src/hash.c ****             break;
 120:../src/wolfcrypt/src/hash.c ****         case WC_SHA3_512:
 121:../src/wolfcrypt/src/hash.c ****             eHashType = WC_HASH_TYPE_SHA3_512;
 122:../src/wolfcrypt/src/hash.c ****             break;
 123:../src/wolfcrypt/src/hash.c ****     #endif /* WOLFSSL_SHA3 */
 124:../src/wolfcrypt/src/hash.c ****         default:
 125:../src/wolfcrypt/src/hash.c ****             eHashType = WC_HASH_TYPE_NONE;
 126:../src/wolfcrypt/src/hash.c ****             break;
 127:../src/wolfcrypt/src/hash.c ****     }
 128:../src/wolfcrypt/src/hash.c **** #else
 129:../src/wolfcrypt/src/hash.c ****     /* current master uses same unique types as wc_HashType */
 130:../src/wolfcrypt/src/hash.c ****     if (hashType > 0 && hashType <= WC_HASH_TYPE_MAX) {
  19                             		.loc 1 130 8
  20 000d ED A5 01                		mov.L	4[r10], r5
  21 0010 61 05                   		cmp	#0, r5
  22 0012 2B 0F                   		ble	.L2
  23                             		.loc 1 130 22 discriminator 1
  24 0014 ED A5 01                		mov.L	4[r10], r5
  25 0017 75 55 13                		cmp	#19, r5
  26 001a 2A 07                   		bgt	.L2
 131:../src/wolfcrypt/src/hash.c ****         eHashType = (enum wc_HashType)hashType;
  27                             		.loc 1 131 19
  28 001c ED A5 01                		mov.L	4[r10], r5
  29 001f E3 A5                   		mov.L	r5, [r10]
  30                             	.L2:
 132:../src/wolfcrypt/src/hash.c ****     }
 133:../src/wolfcrypt/src/hash.c **** #endif
 134:../src/wolfcrypt/src/hash.c ****     return eHashType;
  31                             		.loc 1 134 12
  32 0021 EC A5                   		mov.L	[r10], r5
 135:../src/wolfcrypt/src/hash.c **** }
  33                             		.loc 1 135 1
  34 0023 EF 51                   		mov.L	r5, r1
  35 0025 3F AA 03                		rtsd	#12, r10-r10
  36                             	.LFE43:
  38                             		.section	.text.wc_HashGetOID,"ax",@progbits
  39                             		.global	_wc_HashGetOID
  41                             	_wc_HashGetOID:
  42                             	.LFB44:
 136:../src/wolfcrypt/src/hash.c **** #endif /* !NO_PWDBASED || !NO_ASN */
 137:../src/wolfcrypt/src/hash.c **** 
 138:../src/wolfcrypt/src/hash.c **** #if !defined(NO_ASN) || !defined(NO_DH) || defined(HAVE_ECC)
 139:../src/wolfcrypt/src/hash.c **** 
 140:../src/wolfcrypt/src/hash.c **** int wc_HashGetOID(enum wc_HashType hash_type)
 141:../src/wolfcrypt/src/hash.c **** {
  43                             		.loc 1 141 1
  44 0000 7E AA                   		push.l	r10
  45                             	.LCFI2:
  46 0002 71 0A F8                		add	#-8, r0, r10
  47                             	.LCFI3:
  48 0005 EF A0                   		mov.L	r10, r0
  49 0007 E7 A1 01                		mov.L	r1, 4[r10]
 142:../src/wolfcrypt/src/hash.c ****     int oid = HASH_TYPE_E; /* Default to hash type error */
  50                             		.loc 1 142 9
  51 000a F8 AA 18 FF             		mov.L	#-232, [r10]
 143:../src/wolfcrypt/src/hash.c ****     switch(hash_type)
  52                             		.loc 1 143 5
  53 000e ED A5 01                		mov.L	4[r10], r5
  54 0011 75 55 13                		cmp	#19, r5
  55 0014 24 39                   		bgtu	.L5
  56 0016 ED A5 01                		mov.L	4[r10], r5
  57 0019 6C 25                   		shll	#2, r5
  58 001b 70 55 00 00 00 00       		add	#.L7, r5
  59 0021 EC 55                   		mov.L	[r5], r5
  60                             		
  61 0023 7F 05                   	1:jmp	r5
  62                             		.section	.rodata.wc_HashGetOID,"a",@progbits
  63                             		.balign 4
  64                             		.balign 4
  65                             	.L7:
  66 0000 4D 00 00 00             		.long .L5
  67 0004 53 00 00 00             		.long .L24
  68 0008 4D 00 00 00             		.long .L5
  69 000c 25 00 00 00             		.long .L15
  70 0010 2B 00 00 00             		.long .L20
  71 0014 53 00 00 00             		.long .L24
  72 0018 30 00 00 00             		.long .L18
  73 001c 36 00 00 00             		.long .L17
  74 0020 3C 00 00 00             		.long .L16
  75 0024 25 00 00 00             		.long .L15
  76 0028 53 00 00 00             		.long .L24
  77 002c 53 00 00 00             		.long .L24
  78 0030 53 00 00 00             		.long .L24
  79 0034 53 00 00 00             		.long .L24
  80 0038 4D 00 00 00             		.long .L5
  81 003c 4D 00 00 00             		.long .L5
  82 0040 42 00 00 00             		.long .L10
  83 0044 48 00 00 00             		.long .L9
  84 0048 53 00 00 00             		.long .L24
  85 004c 53 00 00 00             		.long .L24
  86                             		.section	.text.wc_HashGetOID
  87                             	.L15:
 144:../src/wolfcrypt/src/hash.c ****     {
 145:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD2:
 146:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_MD2
 147:../src/wolfcrypt/src/hash.c ****             oid = MD2h;
 148:../src/wolfcrypt/src/hash.c ****         #endif
 149:../src/wolfcrypt/src/hash.c ****             break;
 150:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5_SHA:
 151:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5:
 152:../src/wolfcrypt/src/hash.c ****         #ifndef NO_MD5
 153:../src/wolfcrypt/src/hash.c ****             oid = MD5h;
  88                             		.loc 1 153 17
  89 0025 F8 AA 89 02             		mov.L	#0x289, [r10]
 154:../src/wolfcrypt/src/hash.c ****         #endif
 155:../src/wolfcrypt/src/hash.c ****             break;
  90                             		.loc 1 155 13
  91 0029 2E 2B                   		bra	.L22
  92                             	.L20:
 156:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA:
 157:../src/wolfcrypt/src/hash.c ****         #ifndef NO_SHA
 158:../src/wolfcrypt/src/hash.c ****             oid = SHAh;
  93                             		.loc 1 158 17
  94 002b F8 A6 58                		mov.L	#0x58, [r10]
 159:../src/wolfcrypt/src/hash.c ****         #endif
 160:../src/wolfcrypt/src/hash.c ****             break;
  95                             		.loc 1 160 13
  96 002e 2E 26                   		bra	.L22
  97                             	.L18:
 161:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA224:
 162:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_SHA224
 163:../src/wolfcrypt/src/hash.c ****             oid = SHA224h;
 164:../src/wolfcrypt/src/hash.c ****         #endif
 165:../src/wolfcrypt/src/hash.c ****             break;
 166:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 167:../src/wolfcrypt/src/hash.c ****         #ifndef NO_SHA256
 168:../src/wolfcrypt/src/hash.c ****             oid = SHA256h;
  98                             		.loc 1 168 17
  99 0030 F8 AA 9E 01             		mov.L	#0x19e, [r10]
 169:../src/wolfcrypt/src/hash.c ****         #endif
 170:../src/wolfcrypt/src/hash.c ****             break;
 100                             		.loc 1 170 13
 101 0034 2E 20                   		bra	.L22
 102                             	.L17:
 171:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA384:
 172:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_SHA384
 173:../src/wolfcrypt/src/hash.c ****             oid = SHA384h;
 103                             		.loc 1 173 17
 104 0036 F8 AA 9F 01             		mov.L	#0x19f, [r10]
 174:../src/wolfcrypt/src/hash.c ****         #endif
 175:../src/wolfcrypt/src/hash.c ****             break;
 105                             		.loc 1 175 13
 106 003a 2E 1A                   		bra	.L22
 107                             	.L16:
 176:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512:
 177:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_SHA512
 178:../src/wolfcrypt/src/hash.c ****             oid = SHA512h;
 108                             		.loc 1 178 17
 109 003c F8 AA A0 01             		mov.L	#0x1a0, [r10]
 179:../src/wolfcrypt/src/hash.c ****         #endif
 180:../src/wolfcrypt/src/hash.c ****             break;
 110                             		.loc 1 180 13
 111 0040 2E 14                   		bra	.L22
 112                             	.L10:
 181:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_224
 182:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_224:
 183:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
 184:../src/wolfcrypt/src/hash.c ****             oid = SHA512_224h;
 113                             		.loc 1 184 17
 114 0042 F8 AA A2 01             		mov.L	#0x1a2, [r10]
 185:../src/wolfcrypt/src/hash.c ****         #endif
 186:../src/wolfcrypt/src/hash.c ****             break;
 115                             		.loc 1 186 13
 116 0046 2E 0E                   		bra	.L22
 117                             	.L9:
 187:../src/wolfcrypt/src/hash.c ****     #endif
 188:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_256
 189:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_256:
 190:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_256)
 191:../src/wolfcrypt/src/hash.c ****             oid = SHA512_256h;
 118                             		.loc 1 191 17
 119 0048 F8 AA A3 01             		mov.L	#0x1a3, [r10]
 192:../src/wolfcrypt/src/hash.c ****         #endif
 193:../src/wolfcrypt/src/hash.c ****             break;
 120                             		.loc 1 193 13
 121 004c 08                      		bra	.L22
 122                             	.L5:
 194:../src/wolfcrypt/src/hash.c ****     #endif
 195:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_224:
 196:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_224)
 197:../src/wolfcrypt/src/hash.c ****             oid = SHA3_224h;
 198:../src/wolfcrypt/src/hash.c ****         #endif
 199:../src/wolfcrypt/src/hash.c ****             break;
 200:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
 201:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_256)
 202:../src/wolfcrypt/src/hash.c ****             oid = SHA3_256h;
 203:../src/wolfcrypt/src/hash.c ****         #endif
 204:../src/wolfcrypt/src/hash.c ****             break;
 205:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
 206:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_384)
 207:../src/wolfcrypt/src/hash.c ****             oid = SHA3_384h;
 208:../src/wolfcrypt/src/hash.c ****         #endif
 209:../src/wolfcrypt/src/hash.c ****             break;
 210:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
 211:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_512)
 212:../src/wolfcrypt/src/hash.c ****             oid = SHA3_512h;
 213:../src/wolfcrypt/src/hash.c ****         #endif
 214:../src/wolfcrypt/src/hash.c ****             break;
 215:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NO_SHAKE256
 216:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE128:
 217:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && defined(WOLFSSL_SHAKE128)
 218:../src/wolfcrypt/src/hash.c ****             oid = SHAKE128h;
 219:../src/wolfcrypt/src/hash.c ****         #endif
 220:../src/wolfcrypt/src/hash.c ****             break;
 221:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE256:
 222:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && defined(WOLFSSL_SHAKE256)
 223:../src/wolfcrypt/src/hash.c ****             oid = SHAKE256h;
 224:../src/wolfcrypt/src/hash.c ****         #endif
 225:../src/wolfcrypt/src/hash.c ****             break;
 226:../src/wolfcrypt/src/hash.c ****     #endif
 227:../src/wolfcrypt/src/hash.c **** 
 228:../src/wolfcrypt/src/hash.c ****         /* Not Supported */
 229:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD4:
 230:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2B:
 231:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2S:
 232:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_NONE:
 233:../src/wolfcrypt/src/hash.c ****         default:
 234:../src/wolfcrypt/src/hash.c ****             oid = BAD_FUNC_ARG;
 123                             		.loc 1 234 17
 124 004d F8 AA 53 FF             		mov.L	#-173, [r10]
 235:../src/wolfcrypt/src/hash.c ****             break;
 125                             		.loc 1 235 13
 126 0051 2E 03                   		bra	.L22
 127                             	.L24:
 149:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5_SHA:
 128                             		.loc 1 149 13
 129 0053 03                      		nop
 130                             		.balign 8,3,1
 131                             	.L22:
 236:../src/wolfcrypt/src/hash.c ****     }
 237:../src/wolfcrypt/src/hash.c ****     return oid;
 132                             		.loc 1 237 12
 133 0054 EC A5                   		mov.L	[r10], r5
 238:../src/wolfcrypt/src/hash.c **** }
 134                             		.loc 1 238 1
 135 0056 EF 51                   		mov.L	r5, r1
 136 0058 3F AA 03                		rtsd	#12, r10-r10
 137                             	.LFE44:
 139 005b 77 10 01 00 00          		.section	.text.wc_OidGetHash,"ax",@progbits
 140                             		.global	_wc_OidGetHash
 142                             	_wc_OidGetHash:
 143                             	.LFB45:
 239:../src/wolfcrypt/src/hash.c **** 
 240:../src/wolfcrypt/src/hash.c **** enum wc_HashType wc_OidGetHash(int oid)
 241:../src/wolfcrypt/src/hash.c **** {
 144                             		.loc 1 241 1
 145 0000 7E AA                   		push.l	r10
 146                             	.LCFI4:
 147 0002 71 0A F8                		add	#-8, r0, r10
 148                             	.LCFI5:
 149 0005 EF A0                   		mov.L	r10, r0
 150 0007 E7 A1 01                		mov.L	r1, 4[r10]
 242:../src/wolfcrypt/src/hash.c ****     enum wc_HashType hash_type = WC_HASH_TYPE_NONE;
 151                             		.loc 1 242 22
 152 000a F8 A6 00                		mov.L	#0, [r10]
 243:../src/wolfcrypt/src/hash.c ****     switch (oid)
 153                             		.loc 1 243 5
 154 000d ED A5 01                		mov.L	4[r10], r5
 155 0010 76 05 9F 01             		cmp	#0x19f, r5
 156 0014 20 48                   		beq	.L26
 157 0016 ED A5 01                		mov.L	4[r10], r5
 158 0019 76 05 9F 01             		cmp	#0x19f, r5
 159 001d 2A 15                   		bgt	.L27
 160 001f ED A5 01                		mov.L	4[r10], r5
 161 0022 75 55 58                		cmp	#0x58, r5
 162 0025 20 2D                   		beq	.L28
 163 0027 ED A5 01                		mov.L	4[r10], r5
 164 002a 76 05 9E 01             		cmp	#0x19e, r5
 165 002e 20 29                   		beq	.L29
 244:../src/wolfcrypt/src/hash.c ****     {
 245:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_MD2
 246:../src/wolfcrypt/src/hash.c ****         case MD2h:
 247:../src/wolfcrypt/src/hash.c ****             hash_type = WC_HASH_TYPE_MD2;
 248:../src/wolfcrypt/src/hash.c ****             break;
 249:../src/wolfcrypt/src/hash.c ****     #endif
 250:../src/wolfcrypt/src/hash.c ****         case MD5h:
 251:../src/wolfcrypt/src/hash.c ****         #ifndef NO_MD5
 252:../src/wolfcrypt/src/hash.c ****             hash_type = WC_HASH_TYPE_MD5;
 253:../src/wolfcrypt/src/hash.c ****         #endif
 254:../src/wolfcrypt/src/hash.c ****             break;
 255:../src/wolfcrypt/src/hash.c ****         case SHAh:
 256:../src/wolfcrypt/src/hash.c ****         #ifndef NO_SHA
 257:../src/wolfcrypt/src/hash.c ****             hash_type = WC_HASH_TYPE_SHA;
 258:../src/wolfcrypt/src/hash.c ****         #endif
 259:../src/wolfcrypt/src/hash.c ****             break;
 260:../src/wolfcrypt/src/hash.c ****         case SHA224h:
 261:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_SHA224
 262:../src/wolfcrypt/src/hash.c ****             hash_type = WC_HASH_TYPE_SHA224;
 263:../src/wolfcrypt/src/hash.c ****         #endif
 264:../src/wolfcrypt/src/hash.c ****             break;
 265:../src/wolfcrypt/src/hash.c ****         case SHA256h:
 266:../src/wolfcrypt/src/hash.c ****         #ifndef NO_SHA256
 267:../src/wolfcrypt/src/hash.c ****             hash_type = WC_HASH_TYPE_SHA256;
 268:../src/wolfcrypt/src/hash.c ****         #endif
 269:../src/wolfcrypt/src/hash.c ****             break;
 270:../src/wolfcrypt/src/hash.c ****         case SHA384h:
 271:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_SHA384
 272:../src/wolfcrypt/src/hash.c ****             hash_type = WC_HASH_TYPE_SHA384;
 273:../src/wolfcrypt/src/hash.c ****         #endif
 274:../src/wolfcrypt/src/hash.c ****             break;
 275:../src/wolfcrypt/src/hash.c ****         case SHA512h:
 276:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_SHA512
 277:../src/wolfcrypt/src/hash.c ****             hash_type = WC_HASH_TYPE_SHA512;
 278:../src/wolfcrypt/src/hash.c ****         #endif
 279:../src/wolfcrypt/src/hash.c ****             break;
 280:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SHA3
 281:../src/wolfcrypt/src/hash.c ****         case SHA3_224h:
 282:../src/wolfcrypt/src/hash.c ****             hash_type = WC_HASH_TYPE_SHA3_224;
 283:../src/wolfcrypt/src/hash.c ****             break;
 284:../src/wolfcrypt/src/hash.c ****         case SHA3_256h:
 285:../src/wolfcrypt/src/hash.c ****             hash_type = WC_HASH_TYPE_SHA3_256;
 286:../src/wolfcrypt/src/hash.c ****             break;
 287:../src/wolfcrypt/src/hash.c ****         case SHA3_384h:
 288:../src/wolfcrypt/src/hash.c ****             hash_type = WC_HASH_TYPE_SHA3_384;
 289:../src/wolfcrypt/src/hash.c ****             break;
 290:../src/wolfcrypt/src/hash.c ****         case SHA3_512h:
 291:../src/wolfcrypt/src/hash.c ****             hash_type = WC_HASH_TYPE_SHA3_512;
 292:../src/wolfcrypt/src/hash.c ****             break;
 293:../src/wolfcrypt/src/hash.c ****     #endif /* WOLFSSL_SHA3 */
 294:../src/wolfcrypt/src/hash.c ****         default:
 295:../src/wolfcrypt/src/hash.c ****             break;
 166                             		.loc 1 295 13
 167 0030 2E 37                   		bra	.L36
 168                             	.L27:
 243:../src/wolfcrypt/src/hash.c ****     switch (oid)
 169                             		.loc 1 243 5
 170 0032 ED A5 01                		mov.L	4[r10], r5
 171 0035 76 05 A1 01             		cmp	#0x1a1, r5
 172 0039 20 2B                   		beq	.L35
 173 003b ED A5 01                		mov.L	4[r10], r5
 174 003e 76 05 A1 01             		cmp	#0x1a1, r5
 175 0042 29 1E                   		blt	.L32
 176 0044 ED A5 01                		mov.L	4[r10], r5
 177 0047 76 05 89 02             		cmp	#0x289, r5
 178 004b 21 1C                   		bne	.L36
 252:../src/wolfcrypt/src/hash.c ****         #endif
 179                             		.loc 1 252 23
 180 004d F8 A6 03                		mov.L	#3, [r10]
 254:../src/wolfcrypt/src/hash.c ****         case SHAh:
 181                             		.loc 1 254 13
 182 0050 2E 18                   		bra	.L33
 183                             	.L28:
 257:../src/wolfcrypt/src/hash.c ****         #endif
 184                             		.loc 1 257 23
 185 0052 F8 A6 04                		mov.L	#4, [r10]
 259:../src/wolfcrypt/src/hash.c ****         case SHA224h:
 186                             		.loc 1 259 13
 187 0055 2E 13                   		bra	.L33
 188                             	.L29:
 267:../src/wolfcrypt/src/hash.c ****         #endif
 189                             		.loc 1 267 23
 190 0057 F8 A6 06                		mov.L	#6, [r10]
 269:../src/wolfcrypt/src/hash.c ****         case SHA384h:
 191                             		.loc 1 269 13
 192 005a 2E 0E                   		bra	.L33
 193                             	.L26:
 272:../src/wolfcrypt/src/hash.c ****         #endif
 194                             		.loc 1 272 23
 195 005c F8 A6 07                		mov.L	#7, [r10]
 274:../src/wolfcrypt/src/hash.c ****         case SHA512h:
 196                             		.loc 1 274 13
 197 005f 09                      		bra	.L33
 198                             	.L32:
 277:../src/wolfcrypt/src/hash.c ****         #endif
 199                             		.loc 1 277 23
 200 0060 F8 A6 08                		mov.L	#8, [r10]
 279:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SHA3
 201                             		.loc 1 279 13
 202 0063 0D                      		bra	.L33
 203                             	.L35:
 264:../src/wolfcrypt/src/hash.c ****         case SHA256h:
 204                             		.loc 1 264 13
 205 0064 03                      		nop
 206 0065 2E 03                   		bra	.L33
 207                             	.L36:
 208                             		.loc 1 295 13
 209 0067 03                      		nop
 210                             		.balign 8,3,1
 211                             	.L33:
 296:../src/wolfcrypt/src/hash.c ****     }
 297:../src/wolfcrypt/src/hash.c ****     return hash_type;
 212                             		.loc 1 297 12
 213 0068 EC A5                   		mov.L	[r10], r5
 298:../src/wolfcrypt/src/hash.c **** }
 214                             		.loc 1 298 1
 215 006a EF 51                   		mov.L	r5, r1
 216 006c 3F AA 03                		rtsd	#12, r10-r10
 217                             	.LFE45:
 219 006f 03                      		.section	.text.wc_HashGetDigestSize,"ax",@progbits
 220                             		.global	_wc_HashGetDigestSize
 222                             	_wc_HashGetDigestSize:
 223                             	.LFB46:
 299:../src/wolfcrypt/src/hash.c **** #endif /* !NO_ASN || !NO_DH || HAVE_ECC */
 300:../src/wolfcrypt/src/hash.c **** 
 301:../src/wolfcrypt/src/hash.c **** #ifndef NO_HASH_WRAPPER
 302:../src/wolfcrypt/src/hash.c **** 
 303:../src/wolfcrypt/src/hash.c **** /* Get Hash digest size */
 304:../src/wolfcrypt/src/hash.c **** int wc_HashGetDigestSize(enum wc_HashType hash_type)
 305:../src/wolfcrypt/src/hash.c **** {
 224                             		.loc 1 305 1
 225 0000 7E AA                   		push.l	r10
 226                             	.LCFI6:
 227 0002 71 0A F8                		add	#-8, r0, r10
 228                             	.LCFI7:
 229 0005 EF A0                   		mov.L	r10, r0
 230 0007 E7 A1 01                		mov.L	r1, 4[r10]
 306:../src/wolfcrypt/src/hash.c ****     int dig_size = HASH_TYPE_E; /* Default to hash type error */
 231                             		.loc 1 306 9
 232 000a F8 AA 18 FF             		mov.L	#-232, [r10]
 307:../src/wolfcrypt/src/hash.c ****     switch(hash_type)
 233                             		.loc 1 307 5
 234 000e ED A5 01                		mov.L	4[r10], r5
 235 0011 75 55 11                		cmp	#17, r5
 236 0014 24 3D                   		bgtu	.L38
 237 0016 ED A5 01                		mov.L	4[r10], r5
 238 0019 6C 25                   		shll	#2, r5
 239 001b 70 55 00 00 00 00       		add	#.L40, r5
 240 0021 EC 55                   		mov.L	[r5], r5
 241                             		
 242 0023 7F 05                   	1:jmp	r5
 243                             		.section	.rodata.wc_HashGetDigestSize,"a",@progbits
 244                             		.balign 4
 245                             		.balign 4
 246                             	.L40:
 247 0000 51 00 00 00             		.long .L38
 248 0004 57 00 00 00             		.long .L58
 249 0008 25 00 00 00             		.long .L54
 250 000c 2A 00 00 00             		.long .L53
 251 0010 2F 00 00 00             		.long .L52
 252 0014 57 00 00 00             		.long .L58
 253 0018 34 00 00 00             		.long .L50
 254 001c 39 00 00 00             		.long .L49
 255 0020 3E 00 00 00             		.long .L48
 256 0024 4D 00 00 00             		.long .L47
 257 0028 57 00 00 00             		.long .L58
 258 002c 57 00 00 00             		.long .L58
 259 0030 57 00 00 00             		.long .L58
 260 0034 57 00 00 00             		.long .L58
 261 0038 57 00 00 00             		.long .L58
 262 003c 57 00 00 00             		.long .L58
 263 0040 43 00 00 00             		.long .L41
 264 0044 48 00 00 00             		.long .L39
 265                             		.section	.text.wc_HashGetDigestSize
 266                             	.L54:
 308:../src/wolfcrypt/src/hash.c ****     {
 309:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD2:
 310:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_MD2
 311:../src/wolfcrypt/src/hash.c ****             dig_size = MD2_DIGEST_SIZE;
 312:../src/wolfcrypt/src/hash.c ****         #endif
 313:../src/wolfcrypt/src/hash.c ****             break;
 314:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD4:
 315:../src/wolfcrypt/src/hash.c ****         #ifndef NO_MD4
 316:../src/wolfcrypt/src/hash.c ****             dig_size = MD4_DIGEST_SIZE;
 267                             		.loc 1 316 22
 268 0025 F8 A6 10                		mov.L	#16, [r10]
 317:../src/wolfcrypt/src/hash.c ****         #endif
 318:../src/wolfcrypt/src/hash.c ****             break;
 269                             		.loc 1 318 13
 270 0028 2E 30                   		bra	.L56
 271                             	.L53:
 319:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5:
 320:../src/wolfcrypt/src/hash.c ****         #ifndef NO_MD5
 321:../src/wolfcrypt/src/hash.c ****             dig_size = WC_MD5_DIGEST_SIZE;
 272                             		.loc 1 321 22
 273 002a F8 A6 10                		mov.L	#16, [r10]
 322:../src/wolfcrypt/src/hash.c ****         #endif
 323:../src/wolfcrypt/src/hash.c ****             break;
 274                             		.loc 1 323 13
 275 002d 2E 2B                   		bra	.L56
 276                             	.L52:
 324:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA:
 325:../src/wolfcrypt/src/hash.c ****         #ifndef NO_SHA
 326:../src/wolfcrypt/src/hash.c ****             dig_size = WC_SHA_DIGEST_SIZE;
 277                             		.loc 1 326 22
 278 002f F8 A6 14                		mov.L	#20, [r10]
 327:../src/wolfcrypt/src/hash.c ****         #endif
 328:../src/wolfcrypt/src/hash.c ****             break;
 279                             		.loc 1 328 13
 280 0032 2E 26                   		bra	.L56
 281                             	.L50:
 329:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA224:
 330:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_SHA224
 331:../src/wolfcrypt/src/hash.c ****             dig_size = WC_SHA224_DIGEST_SIZE;
 332:../src/wolfcrypt/src/hash.c ****         #endif
 333:../src/wolfcrypt/src/hash.c ****             break;
 334:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 335:../src/wolfcrypt/src/hash.c ****         #ifndef NO_SHA256
 336:../src/wolfcrypt/src/hash.c ****             dig_size = WC_SHA256_DIGEST_SIZE;
 282                             		.loc 1 336 22
 283 0034 F8 A6 20                		mov.L	#32, [r10]
 337:../src/wolfcrypt/src/hash.c ****         #endif
 338:../src/wolfcrypt/src/hash.c ****             break;
 284                             		.loc 1 338 13
 285 0037 2E 21                   		bra	.L56
 286                             	.L49:
 339:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA384:
 340:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_SHA384
 341:../src/wolfcrypt/src/hash.c ****             dig_size = WC_SHA384_DIGEST_SIZE;
 287                             		.loc 1 341 22
 288 0039 F8 A6 30                		mov.L	#48, [r10]
 342:../src/wolfcrypt/src/hash.c ****         #endif
 343:../src/wolfcrypt/src/hash.c ****             break;
 289                             		.loc 1 343 13
 290 003c 2E 1C                   		bra	.L56
 291                             	.L48:
 344:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512:
 345:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_SHA512
 346:../src/wolfcrypt/src/hash.c ****             dig_size = WC_SHA512_DIGEST_SIZE;
 292                             		.loc 1 346 22
 293 003e F8 A6 40                		mov.L	#0x40, [r10]
 347:../src/wolfcrypt/src/hash.c ****         #endif
 348:../src/wolfcrypt/src/hash.c ****             break;
 294                             		.loc 1 348 13
 295 0041 2E 17                   		bra	.L56
 296                             	.L41:
 349:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_224
 350:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_224:
 351:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 352:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
 353:../src/wolfcrypt/src/hash.c ****             dig_size = WC_SHA512_224_DIGEST_SIZE;
 297                             		.loc 1 353 22
 298 0043 F8 A6 1C                		mov.L	#28, [r10]
 354:../src/wolfcrypt/src/hash.c ****         #endif
 355:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 356:../src/wolfcrypt/src/hash.c ****             break;
 299                             		.loc 1 356 13
 300 0046 2E 12                   		bra	.L56
 301                             	.L39:
 357:../src/wolfcrypt/src/hash.c ****     #endif
 358:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_256
 359:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_256:
 360:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 361:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_256)
 362:../src/wolfcrypt/src/hash.c ****             dig_size = WC_SHA512_256_DIGEST_SIZE;
 302                             		.loc 1 362 22
 303 0048 F8 A6 20                		mov.L	#32, [r10]
 363:../src/wolfcrypt/src/hash.c ****         #endif
 364:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 365:../src/wolfcrypt/src/hash.c ****             break;
 304                             		.loc 1 365 13
 305 004b 2E 0D                   		bra	.L56
 306                             	.L47:
 366:../src/wolfcrypt/src/hash.c ****     #endif
 367:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5_SHA: /* Old TLS Specific */
 368:../src/wolfcrypt/src/hash.c ****         #if !defined(NO_MD5) && !defined(NO_SHA)
 369:../src/wolfcrypt/src/hash.c ****             dig_size = (int)WC_MD5_DIGEST_SIZE + (int)WC_SHA_DIGEST_SIZE;
 307                             		.loc 1 369 22
 308 004d F8 A6 24                		mov.L	#36, [r10]
 370:../src/wolfcrypt/src/hash.c ****         #endif
 371:../src/wolfcrypt/src/hash.c ****             break;
 309                             		.loc 1 371 13
 310 0050 08                      		bra	.L56
 311                             	.L38:
 372:../src/wolfcrypt/src/hash.c **** 
 373:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_224:
 374:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_224)
 375:../src/wolfcrypt/src/hash.c ****             dig_size = WC_SHA3_224_DIGEST_SIZE;
 376:../src/wolfcrypt/src/hash.c ****         #endif
 377:../src/wolfcrypt/src/hash.c ****             break;
 378:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
 379:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_256)
 380:../src/wolfcrypt/src/hash.c ****             dig_size = WC_SHA3_256_DIGEST_SIZE;
 381:../src/wolfcrypt/src/hash.c ****         #endif
 382:../src/wolfcrypt/src/hash.c ****             break;
 383:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
 384:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_384)
 385:../src/wolfcrypt/src/hash.c ****             dig_size = WC_SHA3_384_DIGEST_SIZE;
 386:../src/wolfcrypt/src/hash.c ****         #endif
 387:../src/wolfcrypt/src/hash.c ****             break;
 388:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
 389:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_512)
 390:../src/wolfcrypt/src/hash.c ****             dig_size = WC_SHA3_512_DIGEST_SIZE;
 391:../src/wolfcrypt/src/hash.c ****         #endif
 392:../src/wolfcrypt/src/hash.c ****             break;
 393:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2B:
 394:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2S:
 395:../src/wolfcrypt/src/hash.c ****         #if defined(HAVE_BLAKE2) || defined(HAVE_BLAKE2S)
 396:../src/wolfcrypt/src/hash.c ****             dig_size = BLAKE2S_OUTBYTES;
 397:../src/wolfcrypt/src/hash.c ****         #endif
 398:../src/wolfcrypt/src/hash.c ****             break;
 399:../src/wolfcrypt/src/hash.c **** 
 400:../src/wolfcrypt/src/hash.c ****         /* Not Supported */
 401:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NO_SHAKE256
 402:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE128:
 403:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE256:
 404:../src/wolfcrypt/src/hash.c ****     #endif
 405:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_NONE:
 406:../src/wolfcrypt/src/hash.c ****         default:
 407:../src/wolfcrypt/src/hash.c ****             dig_size = BAD_FUNC_ARG;
 312                             		.loc 1 407 22
 313 0051 F8 AA 53 FF             		mov.L	#-173, [r10]
 408:../src/wolfcrypt/src/hash.c ****             break;
 314                             		.loc 1 408 13
 315 0055 2E 03                   		bra	.L56
 316                             	.L58:
 313:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD4:
 317                             		.loc 1 313 13
 318 0057 03                      		nop
 319                             		.balign 8,3,1
 320                             	.L56:
 409:../src/wolfcrypt/src/hash.c ****     }
 410:../src/wolfcrypt/src/hash.c ****     return dig_size;
 321                             		.loc 1 410 12
 322 0058 EC A5                   		mov.L	[r10], r5
 411:../src/wolfcrypt/src/hash.c **** }
 323                             		.loc 1 411 1
 324 005a EF 51                   		mov.L	r5, r1
 325 005c 3F AA 03                		rtsd	#12, r10-r10
 326                             	.LFE46:
 328 005f 03                      		.section	.text.wc_HashGetBlockSize,"ax",@progbits
 329                             		.global	_wc_HashGetBlockSize
 331                             	_wc_HashGetBlockSize:
 332                             	.LFB47:
 412:../src/wolfcrypt/src/hash.c **** 
 413:../src/wolfcrypt/src/hash.c **** 
 414:../src/wolfcrypt/src/hash.c **** /* Get Hash block size */
 415:../src/wolfcrypt/src/hash.c **** int wc_HashGetBlockSize(enum wc_HashType hash_type)
 416:../src/wolfcrypt/src/hash.c **** {
 333                             		.loc 1 416 1
 334 0000 7E AA                   		push.l	r10
 335                             	.LCFI8:
 336 0002 71 0A F8                		add	#-8, r0, r10
 337                             	.LCFI9:
 338 0005 EF A0                   		mov.L	r10, r0
 339 0007 E7 A1 01                		mov.L	r1, 4[r10]
 417:../src/wolfcrypt/src/hash.c ****     int block_size = HASH_TYPE_E; /* Default to hash type error */
 340                             		.loc 1 417 9
 341 000a F8 AA 18 FF             		mov.L	#-232, [r10]
 418:../src/wolfcrypt/src/hash.c ****     switch (hash_type)
 342                             		.loc 1 418 5
 343 000e ED A5 01                		mov.L	4[r10], r5
 344 0011 75 55 11                		cmp	#17, r5
 345 0014 24 42                   		bgtu	.L60
 346 0016 ED A5 01                		mov.L	4[r10], r5
 347 0019 6C 25                   		shll	#2, r5
 348 001b 70 55 00 00 00 00       		add	#.L62, r5
 349 0021 EC 55                   		mov.L	[r5], r5
 350                             		
 351 0023 7F 05                   	1:jmp	r5
 352                             		.section	.rodata.wc_HashGetBlockSize,"a",@progbits
 353                             		.balign 4
 354                             		.balign 4
 355                             	.L62:
 356 0000 56 00 00 00             		.long .L60
 357 0004 5C 00 00 00             		.long .L80
 358 0008 25 00 00 00             		.long .L76
 359 000c 2A 00 00 00             		.long .L75
 360 0010 2F 00 00 00             		.long .L74
 361 0014 5C 00 00 00             		.long .L80
 362 0018 34 00 00 00             		.long .L72
 363 001c 39 00 00 00             		.long .L71
 364 0020 3F 00 00 00             		.long .L70
 365 0024 51 00 00 00             		.long .L69
 366 0028 5C 00 00 00             		.long .L80
 367 002c 5C 00 00 00             		.long .L80
 368 0030 5C 00 00 00             		.long .L80
 369 0034 5C 00 00 00             		.long .L80
 370 0038 5C 00 00 00             		.long .L80
 371 003c 5C 00 00 00             		.long .L80
 372 0040 45 00 00 00             		.long .L63
 373 0044 4B 00 00 00             		.long .L61
 374                             		.section	.text.wc_HashGetBlockSize
 375                             	.L76:
 419:../src/wolfcrypt/src/hash.c ****     {
 420:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD2:
 421:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_MD2
 422:../src/wolfcrypt/src/hash.c ****             block_size = MD2_BLOCK_SIZE;
 423:../src/wolfcrypt/src/hash.c ****         #endif
 424:../src/wolfcrypt/src/hash.c ****             break;
 425:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD4:
 426:../src/wolfcrypt/src/hash.c ****         #ifndef NO_MD4
 427:../src/wolfcrypt/src/hash.c ****             block_size = MD4_BLOCK_SIZE;
 376                             		.loc 1 427 24
 377 0025 F8 A6 40                		mov.L	#0x40, [r10]
 428:../src/wolfcrypt/src/hash.c ****         #endif
 429:../src/wolfcrypt/src/hash.c ****             break;
 378                             		.loc 1 429 13
 379 0028 2E 35                   		bra	.L78
 380                             	.L75:
 430:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5:
 431:../src/wolfcrypt/src/hash.c ****         #ifndef NO_MD5
 432:../src/wolfcrypt/src/hash.c ****             block_size = WC_MD5_BLOCK_SIZE;
 381                             		.loc 1 432 24
 382 002a F8 A6 40                		mov.L	#0x40, [r10]
 433:../src/wolfcrypt/src/hash.c ****         #endif
 434:../src/wolfcrypt/src/hash.c ****             break;
 383                             		.loc 1 434 13
 384 002d 2E 30                   		bra	.L78
 385                             	.L74:
 435:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA:
 436:../src/wolfcrypt/src/hash.c ****         #ifndef NO_SHA
 437:../src/wolfcrypt/src/hash.c ****             block_size = WC_SHA_BLOCK_SIZE;
 386                             		.loc 1 437 24
 387 002f F8 A6 40                		mov.L	#0x40, [r10]
 438:../src/wolfcrypt/src/hash.c ****         #endif
 439:../src/wolfcrypt/src/hash.c ****             break;
 388                             		.loc 1 439 13
 389 0032 2E 2B                   		bra	.L78
 390                             	.L72:
 440:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA224:
 441:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_SHA224
 442:../src/wolfcrypt/src/hash.c ****             block_size = WC_SHA224_BLOCK_SIZE;
 443:../src/wolfcrypt/src/hash.c ****         #endif
 444:../src/wolfcrypt/src/hash.c ****             break;
 445:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 446:../src/wolfcrypt/src/hash.c ****         #ifndef NO_SHA256
 447:../src/wolfcrypt/src/hash.c ****             block_size = WC_SHA256_BLOCK_SIZE;
 391                             		.loc 1 447 24
 392 0034 F8 A6 40                		mov.L	#0x40, [r10]
 448:../src/wolfcrypt/src/hash.c ****         #endif
 449:../src/wolfcrypt/src/hash.c ****             break;
 393                             		.loc 1 449 13
 394 0037 2E 26                   		bra	.L78
 395                             	.L71:
 450:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA384:
 451:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_SHA384
 452:../src/wolfcrypt/src/hash.c ****             block_size = WC_SHA384_BLOCK_SIZE;
 396                             		.loc 1 452 24
 397 0039 F8 AA 80 00             		mov.L	#0x80, [r10]
 453:../src/wolfcrypt/src/hash.c ****         #endif
 454:../src/wolfcrypt/src/hash.c ****             break;
 398                             		.loc 1 454 13
 399 003d 2E 20                   		bra	.L78
 400                             	.L70:
 455:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512:
 456:../src/wolfcrypt/src/hash.c ****         #ifdef WOLFSSL_SHA512
 457:../src/wolfcrypt/src/hash.c ****             block_size = WC_SHA512_BLOCK_SIZE;
 401                             		.loc 1 457 24
 402 003f F8 AA 80 00             		mov.L	#0x80, [r10]
 458:../src/wolfcrypt/src/hash.c ****         #endif
 459:../src/wolfcrypt/src/hash.c ****             break;
 403                             		.loc 1 459 13
 404 0043 2E 1A                   		bra	.L78
 405                             	.L63:
 460:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_224
 461:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_224:
 462:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 463:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
 464:../src/wolfcrypt/src/hash.c ****             block_size = WC_SHA512_224_BLOCK_SIZE;
 406                             		.loc 1 464 24
 407 0045 F8 AA 80 00             		mov.L	#0x80, [r10]
 465:../src/wolfcrypt/src/hash.c ****         #endif
 466:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 467:../src/wolfcrypt/src/hash.c ****             break;
 408                             		.loc 1 467 13
 409 0049 2E 14                   		bra	.L78
 410                             	.L61:
 468:../src/wolfcrypt/src/hash.c ****     #endif
 469:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_256
 470:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_256:
 471:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 472:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_256)
 473:../src/wolfcrypt/src/hash.c ****             block_size = WC_SHA512_256_BLOCK_SIZE;
 411                             		.loc 1 473 24
 412 004b F8 AA 80 00             		mov.L	#0x80, [r10]
 474:../src/wolfcrypt/src/hash.c ****         #endif
 475:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 476:../src/wolfcrypt/src/hash.c ****             break;
 413                             		.loc 1 476 13
 414 004f 2E 0E                   		bra	.L78
 415                             	.L69:
 477:../src/wolfcrypt/src/hash.c ****     #endif
 478:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5_SHA: /* Old TLS Specific */
 479:../src/wolfcrypt/src/hash.c ****         #if !defined(NO_MD5) && !defined(NO_SHA)
 480:../src/wolfcrypt/src/hash.c ****             block_size = (int)WC_MD5_BLOCK_SIZE + (int)WC_SHA_BLOCK_SIZE;
 416                             		.loc 1 480 24
 417 0051 F8 AA 80 00             		mov.L	#0x80, [r10]
 481:../src/wolfcrypt/src/hash.c ****         #endif
 482:../src/wolfcrypt/src/hash.c ****             break;
 418                             		.loc 1 482 13
 419 0055 08                      		bra	.L78
 420                             	.L60:
 483:../src/wolfcrypt/src/hash.c **** 
 484:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_224:
 485:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_224)
 486:../src/wolfcrypt/src/hash.c ****             block_size = WC_SHA3_224_BLOCK_SIZE;
 487:../src/wolfcrypt/src/hash.c ****         #endif
 488:../src/wolfcrypt/src/hash.c ****             break;
 489:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
 490:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_256)
 491:../src/wolfcrypt/src/hash.c ****             block_size = WC_SHA3_256_BLOCK_SIZE;
 492:../src/wolfcrypt/src/hash.c ****         #endif
 493:../src/wolfcrypt/src/hash.c ****             break;
 494:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
 495:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_384)
 496:../src/wolfcrypt/src/hash.c ****             block_size = WC_SHA3_384_BLOCK_SIZE;
 497:../src/wolfcrypt/src/hash.c ****         #endif
 498:../src/wolfcrypt/src/hash.c ****             break;
 499:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
 500:../src/wolfcrypt/src/hash.c ****         #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_512)
 501:../src/wolfcrypt/src/hash.c ****             block_size = WC_SHA3_512_BLOCK_SIZE;
 502:../src/wolfcrypt/src/hash.c ****         #endif
 503:../src/wolfcrypt/src/hash.c ****             break;
 504:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2B:
 505:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2S:
 506:../src/wolfcrypt/src/hash.c ****         #if defined(HAVE_BLAKE2) || defined(HAVE_BLAKE2S)
 507:../src/wolfcrypt/src/hash.c ****             block_size = BLAKE2S_BLOCKBYTES;
 508:../src/wolfcrypt/src/hash.c ****         #endif
 509:../src/wolfcrypt/src/hash.c ****             break;
 510:../src/wolfcrypt/src/hash.c **** 
 511:../src/wolfcrypt/src/hash.c ****         /* Not Supported */
 512:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NO_SHAKE256
 513:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE128:
 514:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE256:
 515:../src/wolfcrypt/src/hash.c ****     #endif
 516:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_NONE:
 517:../src/wolfcrypt/src/hash.c ****         default:
 518:../src/wolfcrypt/src/hash.c ****             block_size = BAD_FUNC_ARG;
 421                             		.loc 1 518 24
 422 0056 F8 AA 53 FF             		mov.L	#-173, [r10]
 519:../src/wolfcrypt/src/hash.c ****             break;
 423                             		.loc 1 519 13
 424 005a 2E 03                   		bra	.L78
 425                             	.L80:
 424:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD4:
 426                             		.loc 1 424 13
 427 005c 03                      		nop
 428                             		.balign 8,3,1
 429                             	.L78:
 520:../src/wolfcrypt/src/hash.c ****     }
 521:../src/wolfcrypt/src/hash.c ****     return block_size;
 430                             		.loc 1 521 12
 431 005d EC A5                   		mov.L	[r10], r5
 522:../src/wolfcrypt/src/hash.c **** }
 432                             		.loc 1 522 1
 433 005f EF 51                   		mov.L	r5, r1
 434 0061 3F AA 03                		rtsd	#12, r10-r10
 435                             	.LFE47:
 437 0064 76 10 01 00             		.section	.text.wc_Hash,"ax",@progbits
 438                             		.global	_wc_Hash
 440                             	_wc_Hash:
 441                             	.LFB48:
 523:../src/wolfcrypt/src/hash.c **** 
 524:../src/wolfcrypt/src/hash.c **** /* Generic Hashing Wrapper */
 525:../src/wolfcrypt/src/hash.c **** int wc_Hash(enum wc_HashType hash_type, const byte* data,
 526:../src/wolfcrypt/src/hash.c ****     word32 data_len, byte* hash, word32 hash_len)
 527:../src/wolfcrypt/src/hash.c **** {
 442                             		.loc 1 527 1
 443 0000 7E AA                   		push.l	r10
 444                             	.LCFI10:
 445 0002 7E A6                   		push.l	r6
 446                             	.LCFI11:
 447 0004 71 0A E4                		add	#-28, r0, r10
 448                             	.LCFI12:
 449 0007 EF A0                   		mov.L	r10, r0
 450 0009 75 46 28                		mov.L	#40, r6
 451 000c 4B A6                   		add	r10, r6
 452 000e E7 A1 02                		mov.L	r1, 8[r10]
 453 0011 E7 A2 03                		mov.L	r2, 12[r10]
 454 0014 E7 A3 04                		mov.L	r3, 16[r10]
 455 0017 E7 A4 05                		mov.L	r4, 20[r10]
 528:../src/wolfcrypt/src/hash.c ****     int ret = HASH_TYPE_E; /* Default to hash type error */
 456                             		.loc 1 528 9
 457 001a F8 AA 18 FF             		mov.L	#-232, [r10]
 529:../src/wolfcrypt/src/hash.c ****     word32 dig_size;
 530:../src/wolfcrypt/src/hash.c **** 
 531:../src/wolfcrypt/src/hash.c ****     /* Validate hash buffer size */
 532:../src/wolfcrypt/src/hash.c ****     dig_size = wc_HashGetDigestSize(hash_type);
 458                             		.loc 1 532 16
 459 001e ED A1 02                		mov.L	8[r10], r1
 460 0021 05 00 00 00             		bsr	_wc_HashGetDigestSize
 461 0025 EF 15                   		mov.L	r1, r5
 462                             		.loc 1 532 14
 463 0027 E7 A5 01                		mov.L	r5, 4[r10]
 533:../src/wolfcrypt/src/hash.c ****     if (hash_len < dig_size) {
 464                             		.loc 1 533 8
 465 002a EC 64                   		mov.L	[r6], r4
 466 002c ED A5 01                		mov.L	4[r10], r5
 467 002f 47 54                   		cmp	r5, r4
 468 0031 22 09                   		bgeu	.L82
 534:../src/wolfcrypt/src/hash.c ****         return BUFFER_E;
 469                             		.loc 1 534 16
 470 0033 FB 5A 7C FF             		mov.L	#-132, r5
 471 0037 38 3D 01                		bra	.L83
 472                             	.L82:
 535:../src/wolfcrypt/src/hash.c ****     }
 536:../src/wolfcrypt/src/hash.c **** 
 537:../src/wolfcrypt/src/hash.c ****     /* Suppress possible unused arg if all hashing is disabled */
 538:../src/wolfcrypt/src/hash.c ****     (void)data;
 539:../src/wolfcrypt/src/hash.c ****     (void)data_len;
 540:../src/wolfcrypt/src/hash.c ****     (void)hash;
 541:../src/wolfcrypt/src/hash.c ****     (void)hash_len;
 542:../src/wolfcrypt/src/hash.c **** 
 543:../src/wolfcrypt/src/hash.c ****     switch(hash_type)
 473                             		.loc 1 543 5
 474 003a ED A5 02                		mov.L	8[r10], r5
 475 003d 61 95                   		cmp	#9, r5
 476 003f 3A F5 00                		beq	.L84
 477 0042 ED A5 02                		mov.L	8[r10], r5
 478 0045 61 95                   		cmp	#9, r5
 479 0047 24 36                   		bgtu	.L85
 480 0049 ED A5 02                		mov.L	8[r10], r5
 481 004c 61 55                   		cmp	#5, r5
 482 004e 3A 17 01                		beq	.L104
 483 0051 ED A5 02                		mov.L	8[r10], r5
 484 0054 61 55                   		cmp	#5, r5
 485 0056 24 13                   		bgtu	.L87
 486 0058 ED A5 02                		mov.L	8[r10], r5
 487 005b 61 35                   		cmp	#3, r5
 488 005d 20 5D                   		beq	.L88
 489 005f ED A5 02                		mov.L	8[r10], r5
 490 0062 61 45                   		cmp	#4, r5
 491 0064 20 68                   		beq	.L89
 492 0066 38 F9 00                		bra	.L90
 493                             	.L87:
 494 0069 ED A5 02                		mov.L	8[r10], r5
 495 006c 61 75                   		cmp	#7, r5
 496 006e 3A 82 00                		beq	.L91
 497 0071 ED A5 02                		mov.L	8[r10], r5
 498 0074 61 75                   		cmp	#7, r5
 499 0076 25 05 38 89 00          		bgtu	.L92
 500 007b 2E 63                   		bra	.L103
 501                             	.L85:
 502 007d ED A5 02                		mov.L	8[r10], r5
 503 0080 61 C5                   		cmp	#12, r5
 504 0082 3A E6 00                		beq	.L105
 505 0085 ED A5 02                		mov.L	8[r10], r5
 506 0088 61 C5                   		cmp	#12, r5
 507 008a 24 15                   		bgtu	.L95
 508 008c ED A5 02                		mov.L	8[r10], r5
 509 008f 61 A5                   		cmp	#10, r5
 510 0091 3A D9 00                		beq	.L106
 511 0094 ED A5 02                		mov.L	8[r10], r5
 512 0097 61 B5                   		cmp	#11, r5
 513 0099 3A D3 00                		beq	.L107
 514 009c 38 C3 00                		bra	.L90
 515                             	.L95:
 516 009f ED A5 02                		mov.L	8[r10], r5
 517 00a2 75 55 10                		cmp	#16, r5
 518 00a5 20 6D                   		beq	.L98
 519 00a7 ED A5 02                		mov.L	8[r10], r5
 520 00aa 75 55 11                		cmp	#17, r5
 521 00ad 20 76                   		beq	.L99
 522 00af ED A5 02                		mov.L	8[r10], r5
 523 00b2 61 D5                   		cmp	#13, r5
 524 00b4 3A BA 00                		beq	.L108
 525 00b7 38 A8 00                		bra	.L90
 526                             	.L88:
 544:../src/wolfcrypt/src/hash.c ****     {
 545:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5:
 546:../src/wolfcrypt/src/hash.c **** #ifndef NO_MD5
 547:../src/wolfcrypt/src/hash.c ****             ret = wc_Md5Hash(data, data_len, hash);
 527                             		.loc 1 547 19
 528 00ba ED A3 05                		mov.L	20[r10], r3
 529 00bd ED A2 04                		mov.L	16[r10], r2
 530 00c0 ED A1 03                		mov.L	12[r10], r1
 531 00c3 05 00 00 00             		bsr	_wc_Md5Hash
 532 00c7 E3 A1                   		mov.L	r1, [r10]
 548:../src/wolfcrypt/src/hash.c **** #endif
 549:../src/wolfcrypt/src/hash.c ****             break;
 533                             		.loc 1 549 13
 534 00c9 38 A9 00                		bra	.L101
 535                             	.L89:
 550:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA:
 551:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA
 552:../src/wolfcrypt/src/hash.c ****             ret = wc_ShaHash(data, data_len, hash);
 536                             		.loc 1 552 19
 537 00cc ED A3 05                		mov.L	20[r10], r3
 538 00cf ED A2 04                		mov.L	16[r10], r2
 539 00d2 ED A1 03                		mov.L	12[r10], r1
 540 00d5 05 00 00 00             		bsr	_wc_ShaHash
 541 00d9 E3 A1                   		mov.L	r1, [r10]
 553:../src/wolfcrypt/src/hash.c **** #endif
 554:../src/wolfcrypt/src/hash.c ****             break;
 542                             		.loc 1 554 13
 543 00db 38 97 00                		bra	.L101
 544                             	.L103:
 555:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA224:
 556:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA224
 557:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha224Hash(data, data_len, hash);
 558:../src/wolfcrypt/src/hash.c **** #endif
 559:../src/wolfcrypt/src/hash.c ****             break;
 560:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 561:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA256
 562:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha256Hash(data, data_len, hash);
 545                             		.loc 1 562 19
 546 00de ED A3 05                		mov.L	20[r10], r3
 547 00e1 ED A2 04                		mov.L	16[r10], r2
 548 00e4 ED A1 03                		mov.L	12[r10], r1
 549 00e7 05 00 00 00             		bsr	_wc_Sha256Hash
 550 00eb E3 A1                   		mov.L	r1, [r10]
 563:../src/wolfcrypt/src/hash.c **** #endif
 564:../src/wolfcrypt/src/hash.c ****             break;
 551                             		.loc 1 564 13
 552 00ed 38 85 00                		bra	.L101
 553                             	.L91:
 565:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA384:
 566:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA384
 567:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha384Hash(data, data_len, hash);
 554                             		.loc 1 567 19
 555 00f0 ED A3 05                		mov.L	20[r10], r3
 556 00f3 ED A2 04                		mov.L	16[r10], r2
 557 00f6 ED A1 03                		mov.L	12[r10], r1
 558 00f9 05 00 00 00             		bsr	_wc_Sha384Hash
 559 00fd E3 A1                   		mov.L	r1, [r10]
 568:../src/wolfcrypt/src/hash.c **** #endif
 569:../src/wolfcrypt/src/hash.c ****             break;
 560                             		.loc 1 569 13
 561 00ff 2E 73                   		bra	.L101
 562                             	.L92:
 570:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512:
 571:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA512
 572:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha512Hash(data, data_len, hash);
 563                             		.loc 1 572 19
 564 0101 ED A3 05                		mov.L	20[r10], r3
 565 0104 ED A2 04                		mov.L	16[r10], r2
 566 0107 ED A1 03                		mov.L	12[r10], r1
 567 010a 05 00 00 00             		bsr	_wc_Sha512Hash
 568 010e E3 A1                   		mov.L	r1, [r10]
 573:../src/wolfcrypt/src/hash.c **** #endif
 574:../src/wolfcrypt/src/hash.c ****             break;
 569                             		.loc 1 574 13
 570 0110 2E 62                   		bra	.L101
 571                             	.L98:
 575:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_224
 576:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_224:
 577:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 578:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
 579:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha512_224Hash(data, data_len, hash);
 572                             		.loc 1 579 19
 573 0112 ED A3 05                		mov.L	20[r10], r3
 574 0115 ED A2 04                		mov.L	16[r10], r2
 575 0118 ED A1 03                		mov.L	12[r10], r1
 576 011b 05 00 00 00             		bsr	_wc_Sha512_224Hash
 577 011f E3 A1                   		mov.L	r1, [r10]
 580:../src/wolfcrypt/src/hash.c **** #endif
 581:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 582:../src/wolfcrypt/src/hash.c ****             break;
 578                             		.loc 1 582 13
 579 0121 2E 51                   		bra	.L101
 580                             	.L99:
 583:../src/wolfcrypt/src/hash.c ****     #endif
 584:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_256
 585:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_256:
 586:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 587:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
 588:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha512_256Hash(data, data_len, hash);
 581                             		.loc 1 588 19
 582 0123 ED A3 05                		mov.L	20[r10], r3
 583 0126 ED A2 04                		mov.L	16[r10], r2
 584 0129 ED A1 03                		mov.L	12[r10], r1
 585 012c 05 00 00 00             		bsr	_wc_Sha512_256Hash
 586 0130 E3 A1                   		mov.L	r1, [r10]
 589:../src/wolfcrypt/src/hash.c **** #endif
 590:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 591:../src/wolfcrypt/src/hash.c ****             break;
 587                             		.loc 1 591 13
 588 0132 2E 40                   		bra	.L101
 589                             	.L84:
 592:../src/wolfcrypt/src/hash.c ****     #endif
 593:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5_SHA:
 594:../src/wolfcrypt/src/hash.c **** #if !defined(NO_MD5) && !defined(NO_SHA)
 595:../src/wolfcrypt/src/hash.c ****             ret = wc_Md5Hash(data, data_len, hash);
 590                             		.loc 1 595 19
 591 0134 ED A3 05                		mov.L	20[r10], r3
 592 0137 ED A2 04                		mov.L	16[r10], r2
 593 013a ED A1 03                		mov.L	12[r10], r1
 594 013d 05 00 00 00             		bsr	_wc_Md5Hash
 595 0141 E3 A1                   		mov.L	r1, [r10]
 596:../src/wolfcrypt/src/hash.c ****             if (ret == 0) {
 596                             		.loc 1 596 16
 597 0143 EC A5                   		mov.L	[r10], r5
 598 0145 61 05                   		cmp	#0, r5
 599 0147 21 2A                   		bne	.L109
 597:../src/wolfcrypt/src/hash.c ****                 ret = wc_ShaHash(data, data_len, &hash[WC_MD5_DIGEST_SIZE]);
 600                             		.loc 1 597 23
 601 0149 ED A5 05                		mov.L	20[r10], r5
 602 014c 71 55 10                		add	#16, r5
 603 014f EF 53                   		mov.L	r5, r3
 604 0151 ED A2 04                		mov.L	16[r10], r2
 605 0154 ED A1 03                		mov.L	12[r10], r1
 606 0157 05 00 00 00             		bsr	_wc_ShaHash
 607 015b E3 A1                   		mov.L	r1, [r10]
 598:../src/wolfcrypt/src/hash.c ****             }
 599:../src/wolfcrypt/src/hash.c **** #endif
 600:../src/wolfcrypt/src/hash.c ****             break;
 608                             		.loc 1 600 13
 609 015d 2E 14                   		bra	.L109
 610                             	.L90:
 601:../src/wolfcrypt/src/hash.c **** 
 602:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_224:
 603:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_224)
 604:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_224Hash(data, data_len, hash);
 605:../src/wolfcrypt/src/hash.c **** #endif
 606:../src/wolfcrypt/src/hash.c ****             break;
 607:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
 608:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_256)
 609:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_256Hash(data, data_len, hash);
 610:../src/wolfcrypt/src/hash.c **** #endif
 611:../src/wolfcrypt/src/hash.c ****             break;
 612:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
 613:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_384)
 614:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_384Hash(data, data_len, hash);
 615:../src/wolfcrypt/src/hash.c **** #endif
 616:../src/wolfcrypt/src/hash.c ****             break;
 617:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
 618:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_512)
 619:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_512Hash(data, data_len, hash);
 620:../src/wolfcrypt/src/hash.c **** #endif
 621:../src/wolfcrypt/src/hash.c ****             break;
 622:../src/wolfcrypt/src/hash.c **** 
 623:../src/wolfcrypt/src/hash.c ****         /* Not Supported */
 624:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD2:
 625:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD4:
 626:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2B:
 627:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2S:
 628:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NO_SHAKE256
 629:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE128:
 630:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE256:
 631:../src/wolfcrypt/src/hash.c ****     #endif
 632:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_NONE:
 633:../src/wolfcrypt/src/hash.c ****         default:
 634:../src/wolfcrypt/src/hash.c ****             ret = BAD_FUNC_ARG;
 611                             		.loc 1 634 17
 612 015f F8 AA 53 FF             		mov.L	#-173, [r10]
 635:../src/wolfcrypt/src/hash.c ****             break;
 613                             		.loc 1 635 13
 614 0163 2E 0F                   		bra	.L101
 615                             	.L104:
 559:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 616                             		.loc 1 559 13
 617 0165 03                      		nop
 618 0166 2E 0C                   		bra	.L101
 619                             	.L105:
 616:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
 620                             		.loc 1 616 13
 621 0168 03                      		nop
 622 0169 09                      		bra	.L101
 623                             	.L106:
 606:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
 624                             		.loc 1 606 13
 625 016a 03                      		nop
 626 016b 0F                      		bra	.L101
 627                             	.L107:
 611:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
 628                             		.loc 1 611 13
 629 016c 03                      		nop
 630 016d 0D                      		bra	.L101
 631                             	.L108:
 621:../src/wolfcrypt/src/hash.c **** 
 632                             		.loc 1 621 13
 633 016e 03                      		nop
 634 016f 2E 03                   		bra	.L101
 635                             	.L109:
 600:../src/wolfcrypt/src/hash.c **** 
 636                             		.loc 1 600 13
 637 0171 03                      		nop
 638                             		.balign 8,3,1
 639                             	.L101:
 636:../src/wolfcrypt/src/hash.c ****     }
 637:../src/wolfcrypt/src/hash.c ****     return ret;
 640                             		.loc 1 637 12
 641 0172 EC A5                   		mov.L	[r10], r5
 642                             	.L83:
 638:../src/wolfcrypt/src/hash.c **** }
 643                             		.loc 1 638 1
 644 0174 EF 51                   		mov.L	r5, r1
 645 0176 71 00 1C                		add	#28, r0
 646 0179 7E B6                   		pop	r6
 647 017b 7E BA                   		pop	r10
 648 017d 02                      		rts
 649                             	.LFE48:
 651 017e EF 00                   		.section	.text.wc_HashInit_ex,"ax",@progbits
 652                             		.global	_wc_HashInit_ex
 654                             	_wc_HashInit_ex:
 655                             	.LFB49:
 639:../src/wolfcrypt/src/hash.c **** 
 640:../src/wolfcrypt/src/hash.c **** int wc_HashInit_ex(wc_HashAlg* hash, enum wc_HashType type, void* heap,
 641:../src/wolfcrypt/src/hash.c ****     int devId)
 642:../src/wolfcrypt/src/hash.c **** {
 656                             		.loc 1 642 1
 657 0000 7E AA                   		push.l	r10
 658                             	.LCFI13:
 659 0002 71 0A EC                		add	#-20, r0, r10
 660                             	.LCFI14:
 661 0005 EF A0                   		mov.L	r10, r0
 662 0007 E7 A1 01                		mov.L	r1, 4[r10]
 663 000a E7 A2 02                		mov.L	r2, 8[r10]
 664 000d E7 A3 03                		mov.L	r3, 12[r10]
 665 0010 E7 A4 04                		mov.L	r4, 16[r10]
 643:../src/wolfcrypt/src/hash.c ****     int ret = HASH_TYPE_E; /* Default to hash type error */
 666                             		.loc 1 643 9
 667 0013 F8 AA 18 FF             		mov.L	#-232, [r10]
 644:../src/wolfcrypt/src/hash.c **** 
 645:../src/wolfcrypt/src/hash.c ****     if (hash == NULL)
 668                             		.loc 1 645 8
 669 0017 ED A5 01                		mov.L	4[r10], r5
 670 001a 61 05                   		cmp	#0, r5
 671 001c 18                      		bne	.L111
 646:../src/wolfcrypt/src/hash.c ****         return BAD_FUNC_ARG;
 672                             		.loc 1 646 16
 673 001d FB 5A 53 FF             		mov.L	#-173, r5
 674 0021 38 19 01                		bra	.L112
 675                             	.L111:
 647:../src/wolfcrypt/src/hash.c **** 
 648:../src/wolfcrypt/src/hash.c ****     switch (type) {
 676                             		.loc 1 648 5
 677 0024 ED A5 02                		mov.L	8[r10], r5
 678 0027 61 85                   		cmp	#8, r5
 679 0029 3A C6 00                		beq	.L113
 680 002c ED A5 02                		mov.L	8[r10], r5
 681 002f 61 85                   		cmp	#8, r5
 682 0031 24 33                   		bgtu	.L114
 683 0033 ED A5 02                		mov.L	8[r10], r5
 684 0036 61 55                   		cmp	#5, r5
 685 0038 3A F6 00                		beq	.L130
 686 003b ED A5 02                		mov.L	8[r10], r5
 687 003e 61 55                   		cmp	#5, r5
 688 0040 24 13                   		bgtu	.L116
 689 0042 ED A5 02                		mov.L	8[r10], r5
 690 0045 61 35                   		cmp	#3, r5
 691 0047 20 5B                   		beq	.L117
 692 0049 ED A5 02                		mov.L	8[r10], r5
 693 004c 61 45                   		cmp	#4, r5
 694 004e 20 68                   		beq	.L118
 695 0050 38 D8 00                		bra	.L119
 696                             	.L116:
 697 0053 ED A5 02                		mov.L	8[r10], r5
 698 0056 61 65                   		cmp	#6, r5
 699 0058 20 71                   		beq	.L120
 700 005a ED A5 02                		mov.L	8[r10], r5
 701 005d 61 75                   		cmp	#7, r5
 702 005f 20 7D                   		beq	.L121
 703 0061 38 C7 00                		bra	.L119
 704                             	.L114:
 705 0064 ED A5 02                		mov.L	8[r10], r5
 706 0067 61 C5                   		cmp	#12, r5
 707 0069 3A C7 00                		beq	.L131
 708 006c ED A5 02                		mov.L	8[r10], r5
 709 006f 61 C5                   		cmp	#12, r5
 710 0071 24 15                   		bgtu	.L123
 711 0073 ED A5 02                		mov.L	8[r10], r5
 712 0076 61 A5                   		cmp	#10, r5
 713 0078 3A BA 00                		beq	.L132
 714 007b ED A5 02                		mov.L	8[r10], r5
 715 007e 61 B5                   		cmp	#11, r5
 716 0080 3A B4 00                		beq	.L133
 717 0083 38 A5 00                		bra	.L119
 718                             	.L123:
 719 0086 ED A5 02                		mov.L	8[r10], r5
 720 0089 75 55 10                		cmp	#16, r5
 721 008c 20 76                   		beq	.L126
 722 008e ED A5 02                		mov.L	8[r10], r5
 723 0091 75 55 11                		cmp	#17, r5
 724 0094 3A 81 00                		beq	.L127
 725 0097 ED A5 02                		mov.L	8[r10], r5
 726 009a 61 D5                   		cmp	#13, r5
 727 009c 3A 9B 00                		beq	.L134
 728 009f 38 89 00                		bra	.L119
 729                             	.L117:
 649:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5:
 650:../src/wolfcrypt/src/hash.c **** #ifndef NO_MD5
 651:../src/wolfcrypt/src/hash.c ****             ret = wc_InitMd5_ex(&hash->md5, heap, devId);
 730                             		.loc 1 651 19
 731 00a2 ED A5 01                		mov.L	4[r10], r5
 732 00a5 ED A3 04                		mov.L	16[r10], r3
 733 00a8 ED A2 03                		mov.L	12[r10], r2
 734 00ab EF 51                   		mov.L	r5, r1
 735 00ad 05 00 00 00             		bsr	_wc_InitMd5_ex
 736 00b1 E3 A1                   		mov.L	r1, [r10]
 652:../src/wolfcrypt/src/hash.c **** #endif
 653:../src/wolfcrypt/src/hash.c ****             break;
 737                             		.loc 1 653 13
 738 00b3 38 85 00                		bra	.L129
 739                             	.L118:
 654:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA:
 655:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA
 656:../src/wolfcrypt/src/hash.c ****             ret = wc_InitSha_ex(&hash->sha, heap, devId);
 740                             		.loc 1 656 19
 741 00b6 ED A5 01                		mov.L	4[r10], r5
 742 00b9 ED A3 04                		mov.L	16[r10], r3
 743 00bc ED A2 03                		mov.L	12[r10], r2
 744 00bf EF 51                   		mov.L	r5, r1
 745 00c1 05 00 00 00             		bsr	_wc_InitSha_ex
 746 00c5 E3 A1                   		mov.L	r1, [r10]
 657:../src/wolfcrypt/src/hash.c **** #endif
 658:../src/wolfcrypt/src/hash.c ****             break;
 747                             		.loc 1 658 13
 748 00c7 2E 71                   		bra	.L129
 749                             	.L120:
 659:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA224:
 660:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA224
 661:../src/wolfcrypt/src/hash.c ****             ret = wc_InitSha224_ex(&hash->sha224, heap, devId);
 662:../src/wolfcrypt/src/hash.c **** #endif
 663:../src/wolfcrypt/src/hash.c ****             break;
 664:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 665:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA256
 666:../src/wolfcrypt/src/hash.c ****             ret = wc_InitSha256_ex(&hash->sha256, heap, devId);
 750                             		.loc 1 666 19
 751 00c9 ED A5 01                		mov.L	4[r10], r5
 752 00cc ED A3 04                		mov.L	16[r10], r3
 753 00cf ED A2 03                		mov.L	12[r10], r2
 754 00d2 EF 51                   		mov.L	r5, r1
 755 00d4 05 00 00 00             		bsr	_wc_InitSha256_ex
 756 00d8 E3 A1                   		mov.L	r1, [r10]
 667:../src/wolfcrypt/src/hash.c **** #endif
 668:../src/wolfcrypt/src/hash.c ****             break;
 757                             		.loc 1 668 13
 758 00da 2E 5E                   		bra	.L129
 759                             	.L121:
 669:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA384:
 670:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA384
 671:../src/wolfcrypt/src/hash.c ****             ret = wc_InitSha384_ex(&hash->sha384, heap, devId);
 760                             		.loc 1 671 19
 761 00dc ED A5 01                		mov.L	4[r10], r5
 762 00df ED A3 04                		mov.L	16[r10], r3
 763 00e2 ED A2 03                		mov.L	12[r10], r2
 764 00e5 EF 51                   		mov.L	r5, r1
 765 00e7 05 00 00 00             		bsr	_wc_InitSha384_ex
 766 00eb E3 A1                   		mov.L	r1, [r10]
 672:../src/wolfcrypt/src/hash.c **** #endif
 673:../src/wolfcrypt/src/hash.c ****             break;
 767                             		.loc 1 673 13
 768 00ed 2E 4B                   		bra	.L129
 769                             	.L113:
 674:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512:
 675:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA512
 676:../src/wolfcrypt/src/hash.c ****             ret = wc_InitSha512_ex(&hash->sha512, heap, devId);
 770                             		.loc 1 676 19
 771 00ef ED A5 01                		mov.L	4[r10], r5
 772 00f2 ED A3 04                		mov.L	16[r10], r3
 773 00f5 ED A2 03                		mov.L	12[r10], r2
 774 00f8 EF 51                   		mov.L	r5, r1
 775 00fa 05 00 00 00             		bsr	_wc_InitSha512_ex
 776 00fe E3 A1                   		mov.L	r1, [r10]
 677:../src/wolfcrypt/src/hash.c **** #endif
 678:../src/wolfcrypt/src/hash.c ****             break;
 777                             		.loc 1 678 13
 778 0100 2E 38                   		bra	.L129
 779                             	.L126:
 679:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_224
 680:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_224:
 681:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 682:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
 683:../src/wolfcrypt/src/hash.c ****             ret = wc_InitSha512_224_ex(&hash->sha512, heap, devId);
 780                             		.loc 1 683 19
 781 0102 ED A5 01                		mov.L	4[r10], r5
 782 0105 ED A3 04                		mov.L	16[r10], r3
 783 0108 ED A2 03                		mov.L	12[r10], r2
 784 010b EF 51                   		mov.L	r5, r1
 785 010d 05 00 00 00             		bsr	_wc_InitSha512_224_ex
 786 0111 E3 A1                   		mov.L	r1, [r10]
 684:../src/wolfcrypt/src/hash.c **** #endif
 685:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 686:../src/wolfcrypt/src/hash.c ****             break;
 787                             		.loc 1 686 13
 788 0113 2E 25                   		bra	.L129
 789                             	.L127:
 687:../src/wolfcrypt/src/hash.c ****     #endif
 688:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_256
 689:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_256:
 690:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 691:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_256)
 692:../src/wolfcrypt/src/hash.c ****             ret = wc_InitSha512_256_ex(&hash->sha512, heap, devId);
 790                             		.loc 1 692 19
 791 0115 ED A5 01                		mov.L	4[r10], r5
 792 0118 ED A3 04                		mov.L	16[r10], r3
 793 011b ED A2 03                		mov.L	12[r10], r2
 794 011e EF 51                   		mov.L	r5, r1
 795 0120 05 00 00 00             		bsr	_wc_InitSha512_256_ex
 796 0124 E3 A1                   		mov.L	r1, [r10]
 693:../src/wolfcrypt/src/hash.c **** #endif
 694:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 695:../src/wolfcrypt/src/hash.c ****             break;
 797                             		.loc 1 695 13
 798 0126 2E 12                   		bra	.L129
 799                             	.L119:
 696:../src/wolfcrypt/src/hash.c ****     #endif
 697:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_224:
 698:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_224)
 699:../src/wolfcrypt/src/hash.c ****             ret = wc_InitSha3_224(&hash->sha3, heap, devId);
 700:../src/wolfcrypt/src/hash.c **** #endif
 701:../src/wolfcrypt/src/hash.c ****             break;
 702:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
 703:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_256)
 704:../src/wolfcrypt/src/hash.c ****             ret = wc_InitSha3_256(&hash->sha3, heap, devId);
 705:../src/wolfcrypt/src/hash.c **** #endif
 706:../src/wolfcrypt/src/hash.c ****             break;
 707:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
 708:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_384)
 709:../src/wolfcrypt/src/hash.c ****             ret = wc_InitSha3_384(&hash->sha3, heap, devId);
 710:../src/wolfcrypt/src/hash.c **** #endif
 711:../src/wolfcrypt/src/hash.c ****             break;
 712:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
 713:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_512)
 714:../src/wolfcrypt/src/hash.c ****             ret = wc_InitSha3_512(&hash->sha3, heap, devId);
 715:../src/wolfcrypt/src/hash.c **** #endif
 716:../src/wolfcrypt/src/hash.c ****             break;
 717:../src/wolfcrypt/src/hash.c **** 
 718:../src/wolfcrypt/src/hash.c ****         /* not supported */
 719:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5_SHA:
 720:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD2:
 721:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD4:
 722:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2B:
 723:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2S:
 724:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NO_SHAKE256
 725:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE128:
 726:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE256:
 727:../src/wolfcrypt/src/hash.c ****     #endif
 728:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_NONE:
 729:../src/wolfcrypt/src/hash.c ****         default:
 730:../src/wolfcrypt/src/hash.c ****             ret = BAD_FUNC_ARG;
 800                             		.loc 1 730 17
 801 0128 F8 AA 53 FF             		mov.L	#-173, [r10]
 802 012c 2E 0C                   		bra	.L129
 803                             	.L130:
 663:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 804                             		.loc 1 663 13
 805 012e 03                      		nop
 806 012f 09                      		bra	.L129
 807                             	.L131:
 711:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
 808                             		.loc 1 711 13
 809 0130 03                      		nop
 810 0131 0F                      		bra	.L129
 811                             	.L132:
 701:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
 812                             		.loc 1 701 13
 813 0132 03                      		nop
 814 0133 0D                      		bra	.L129
 815                             	.L133:
 706:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
 816                             		.loc 1 706 13
 817 0134 03                      		nop
 818 0135 2E 03                   		bra	.L129
 819                             	.L134:
 716:../src/wolfcrypt/src/hash.c **** 
 820                             		.loc 1 716 13
 821 0137 03                      		nop
 822                             		.balign 8,3,1
 823                             	.L129:
 731:../src/wolfcrypt/src/hash.c ****     };
 732:../src/wolfcrypt/src/hash.c **** 
 733:../src/wolfcrypt/src/hash.c ****     (void)heap;
 734:../src/wolfcrypt/src/hash.c ****     (void)devId;
 735:../src/wolfcrypt/src/hash.c **** 
 736:../src/wolfcrypt/src/hash.c ****     return ret;
 824                             		.loc 1 736 12
 825 0138 EC A5                   		mov.L	[r10], r5
 826                             	.L112:
 737:../src/wolfcrypt/src/hash.c **** }
 827                             		.loc 1 737 1
 828 013a EF 51                   		mov.L	r5, r1
 829 013c 3F AA 06                		rtsd	#24, r10-r10
 830                             	.LFE49:
 832 013f 03                      		.section	.text.wc_HashInit,"ax",@progbits
 833                             		.global	_wc_HashInit
 835                             	_wc_HashInit:
 836                             	.LFB50:
 738:../src/wolfcrypt/src/hash.c **** 
 739:../src/wolfcrypt/src/hash.c **** int wc_HashInit(wc_HashAlg* hash, enum wc_HashType type)
 740:../src/wolfcrypt/src/hash.c **** {
 837                             		.loc 1 740 1
 838 0000 7E AA                   		push.l	r10
 839                             	.LCFI15:
 840 0002 71 0A F8                		add	#-8, r0, r10
 841                             	.LCFI16:
 842 0005 EF A0                   		mov.L	r10, r0
 843 0007 E3 A1                   		mov.L	r1, [r10]
 844 0009 E7 A2 01                		mov.L	r2, 4[r10]
 741:../src/wolfcrypt/src/hash.c ****     return wc_HashInit_ex(hash, type, NULL, INVALID_DEVID);
 845                             		.loc 1 741 12
 846 000c FB 46 FE                		mov.L	#-2, r4
 847 000f 66 03                   		mov.L	#0, r3
 848 0011 ED A2 01                		mov.L	4[r10], r2
 849 0014 EC A1                   		mov.L	[r10], r1
 850 0016 05 00 00 00             		bsr	_wc_HashInit_ex
 851 001a EF 15                   		mov.L	r1, r5
 742:../src/wolfcrypt/src/hash.c **** }
 852                             		.loc 1 742 1
 853 001c EF 51                   		mov.L	r5, r1
 854 001e 3F AA 03                		rtsd	#12, r10-r10
 855                             	.LFE50:
 857                             		.section	.text.wc_HashUpdate,"ax",@progbits
 858                             		.global	_wc_HashUpdate
 860                             	_wc_HashUpdate:
 861                             	.LFB51:
 743:../src/wolfcrypt/src/hash.c **** 
 744:../src/wolfcrypt/src/hash.c **** int wc_HashUpdate(wc_HashAlg* hash, enum wc_HashType type, const byte* data,
 745:../src/wolfcrypt/src/hash.c ****                   word32 dataSz)
 746:../src/wolfcrypt/src/hash.c **** {
 862                             		.loc 1 746 1
 863 0000 7E AA                   		push.l	r10
 864                             	.LCFI17:
 865 0002 71 0A EC                		add	#-20, r0, r10
 866                             	.LCFI18:
 867 0005 EF A0                   		mov.L	r10, r0
 868 0007 E7 A1 01                		mov.L	r1, 4[r10]
 869 000a E7 A2 02                		mov.L	r2, 8[r10]
 870 000d E7 A3 03                		mov.L	r3, 12[r10]
 871 0010 E7 A4 04                		mov.L	r4, 16[r10]
 747:../src/wolfcrypt/src/hash.c ****     int ret = HASH_TYPE_E; /* Default to hash type error */
 872                             		.loc 1 747 9
 873 0013 F8 AA 18 FF             		mov.L	#-232, [r10]
 748:../src/wolfcrypt/src/hash.c **** 
 749:../src/wolfcrypt/src/hash.c ****     if (hash == NULL || (data == NULL && dataSz > 0))
 874                             		.loc 1 749 8
 875 0017 ED A5 01                		mov.L	4[r10], r5
 876 001a 61 05                   		cmp	#0, r5
 877 001c 20 0F                   		beq	.L138
 878                             		.loc 1 749 22 discriminator 1
 879 001e ED A5 03                		mov.L	12[r10], r5
 880 0021 61 05                   		cmp	#0, r5
 881 0023 21 0F                   		bne	.L139
 882                             		.loc 1 749 39 discriminator 2
 883 0025 ED A5 04                		mov.L	16[r10], r5
 884 0028 61 05                   		cmp	#0, r5
 885 002a 10                      		beq	.L139
 886                             	.L138:
 750:../src/wolfcrypt/src/hash.c ****         return BAD_FUNC_ARG;
 887                             		.loc 1 750 16
 888 002b FB 5A 53 FF             		mov.L	#-173, r5
 889 002f 38 19 01                		bra	.L140
 890                             	.L139:
 751:../src/wolfcrypt/src/hash.c **** 
 752:../src/wolfcrypt/src/hash.c ****     switch (type) {
 891                             		.loc 1 752 5
 892 0032 ED A5 02                		mov.L	8[r10], r5
 893 0035 61 85                   		cmp	#8, r5
 894 0037 3A C6 00                		beq	.L141
 895 003a ED A5 02                		mov.L	8[r10], r5
 896 003d 61 85                   		cmp	#8, r5
 897 003f 24 33                   		bgtu	.L142
 898 0041 ED A5 02                		mov.L	8[r10], r5
 899 0044 61 55                   		cmp	#5, r5
 900 0046 3A F6 00                		beq	.L158
 901 0049 ED A5 02                		mov.L	8[r10], r5
 902 004c 61 55                   		cmp	#5, r5
 903 004e 24 13                   		bgtu	.L144
 904 0050 ED A5 02                		mov.L	8[r10], r5
 905 0053 61 35                   		cmp	#3, r5
 906 0055 20 5B                   		beq	.L145
 907 0057 ED A5 02                		mov.L	8[r10], r5
 908 005a 61 45                   		cmp	#4, r5
 909 005c 20 68                   		beq	.L146
 910 005e 38 D8 00                		bra	.L147
 911                             	.L144:
 912 0061 ED A5 02                		mov.L	8[r10], r5
 913 0064 61 65                   		cmp	#6, r5
 914 0066 20 71                   		beq	.L148
 915 0068 ED A5 02                		mov.L	8[r10], r5
 916 006b 61 75                   		cmp	#7, r5
 917 006d 20 7D                   		beq	.L149
 918 006f 38 C7 00                		bra	.L147
 919                             	.L142:
 920 0072 ED A5 02                		mov.L	8[r10], r5
 921 0075 61 C5                   		cmp	#12, r5
 922 0077 3A C7 00                		beq	.L159
 923 007a ED A5 02                		mov.L	8[r10], r5
 924 007d 61 C5                   		cmp	#12, r5
 925 007f 24 15                   		bgtu	.L151
 926 0081 ED A5 02                		mov.L	8[r10], r5
 927 0084 61 A5                   		cmp	#10, r5
 928 0086 3A BA 00                		beq	.L160
 929 0089 ED A5 02                		mov.L	8[r10], r5
 930 008c 61 B5                   		cmp	#11, r5
 931 008e 3A B4 00                		beq	.L161
 932 0091 38 A5 00                		bra	.L147
 933                             	.L151:
 934 0094 ED A5 02                		mov.L	8[r10], r5
 935 0097 75 55 10                		cmp	#16, r5
 936 009a 20 76                   		beq	.L154
 937 009c ED A5 02                		mov.L	8[r10], r5
 938 009f 75 55 11                		cmp	#17, r5
 939 00a2 3A 81 00                		beq	.L155
 940 00a5 ED A5 02                		mov.L	8[r10], r5
 941 00a8 61 D5                   		cmp	#13, r5
 942 00aa 3A 9B 00                		beq	.L162
 943 00ad 38 89 00                		bra	.L147
 944                             	.L145:
 753:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5:
 754:../src/wolfcrypt/src/hash.c **** #ifndef NO_MD5
 755:../src/wolfcrypt/src/hash.c ****             ret = wc_Md5Update(&hash->md5, data, dataSz);
 945                             		.loc 1 755 19
 946 00b0 ED A5 01                		mov.L	4[r10], r5
 947 00b3 ED A3 04                		mov.L	16[r10], r3
 948 00b6 ED A2 03                		mov.L	12[r10], r2
 949 00b9 EF 51                   		mov.L	r5, r1
 950 00bb 05 00 00 00             		bsr	_wc_Md5Update
 951 00bf E3 A1                   		mov.L	r1, [r10]
 756:../src/wolfcrypt/src/hash.c **** #endif
 757:../src/wolfcrypt/src/hash.c ****             break;
 952                             		.loc 1 757 13
 953 00c1 38 85 00                		bra	.L157
 954                             	.L146:
 758:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA:
 759:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA
 760:../src/wolfcrypt/src/hash.c ****             ret = wc_ShaUpdate(&hash->sha, data, dataSz);
 955                             		.loc 1 760 19
 956 00c4 ED A5 01                		mov.L	4[r10], r5
 957 00c7 ED A3 04                		mov.L	16[r10], r3
 958 00ca ED A2 03                		mov.L	12[r10], r2
 959 00cd EF 51                   		mov.L	r5, r1
 960 00cf 05 00 00 00             		bsr	_wc_ShaUpdate
 961 00d3 E3 A1                   		mov.L	r1, [r10]
 761:../src/wolfcrypt/src/hash.c **** #endif
 762:../src/wolfcrypt/src/hash.c ****             break;
 962                             		.loc 1 762 13
 963 00d5 2E 71                   		bra	.L157
 964                             	.L148:
 763:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA224:
 764:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA224
 765:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha224Update(&hash->sha224, data, dataSz);
 766:../src/wolfcrypt/src/hash.c **** #endif
 767:../src/wolfcrypt/src/hash.c ****             break;
 768:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 769:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA256
 770:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha256Update(&hash->sha256, data, dataSz);
 965                             		.loc 1 770 19
 966 00d7 ED A5 01                		mov.L	4[r10], r5
 967 00da ED A3 04                		mov.L	16[r10], r3
 968 00dd ED A2 03                		mov.L	12[r10], r2
 969 00e0 EF 51                   		mov.L	r5, r1
 970 00e2 05 00 00 00             		bsr	_wc_Sha256Update
 971 00e6 E3 A1                   		mov.L	r1, [r10]
 771:../src/wolfcrypt/src/hash.c **** #endif
 772:../src/wolfcrypt/src/hash.c ****             break;
 972                             		.loc 1 772 13
 973 00e8 2E 5E                   		bra	.L157
 974                             	.L149:
 773:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA384:
 774:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA384
 775:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha384Update(&hash->sha384, data, dataSz);
 975                             		.loc 1 775 19
 976 00ea ED A5 01                		mov.L	4[r10], r5
 977 00ed ED A3 04                		mov.L	16[r10], r3
 978 00f0 ED A2 03                		mov.L	12[r10], r2
 979 00f3 EF 51                   		mov.L	r5, r1
 980 00f5 05 00 00 00             		bsr	_wc_Sha384Update
 981 00f9 E3 A1                   		mov.L	r1, [r10]
 776:../src/wolfcrypt/src/hash.c **** #endif
 777:../src/wolfcrypt/src/hash.c ****             break;
 982                             		.loc 1 777 13
 983 00fb 2E 4B                   		bra	.L157
 984                             	.L141:
 778:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512:
 779:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA512
 780:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha512Update(&hash->sha512, data, dataSz);
 985                             		.loc 1 780 19
 986 00fd ED A5 01                		mov.L	4[r10], r5
 987 0100 ED A3 04                		mov.L	16[r10], r3
 988 0103 ED A2 03                		mov.L	12[r10], r2
 989 0106 EF 51                   		mov.L	r5, r1
 990 0108 05 00 00 00             		bsr	_wc_Sha512Update
 991 010c E3 A1                   		mov.L	r1, [r10]
 781:../src/wolfcrypt/src/hash.c **** #endif
 782:../src/wolfcrypt/src/hash.c ****             break;
 992                             		.loc 1 782 13
 993 010e 2E 38                   		bra	.L157
 994                             	.L154:
 783:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_224
 784:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_224:
 785:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 786:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
 787:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha512_224Update(&hash->sha512, data, dataSz);
 995                             		.loc 1 787 19
 996 0110 ED A5 01                		mov.L	4[r10], r5
 997 0113 ED A3 04                		mov.L	16[r10], r3
 998 0116 ED A2 03                		mov.L	12[r10], r2
 999 0119 EF 51                   		mov.L	r5, r1
 1000 011b 05 00 00 00             		bsr	_wc_Sha512_224Update
 1001 011f E3 A1                   		mov.L	r1, [r10]
 788:../src/wolfcrypt/src/hash.c **** #endif
 789:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 790:../src/wolfcrypt/src/hash.c ****             break;
 1002                             		.loc 1 790 13
 1003 0121 2E 25                   		bra	.L157
 1004                             	.L155:
 791:../src/wolfcrypt/src/hash.c ****     #endif
 792:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_256
 793:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_256:
 794:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 795:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_256)
 796:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha512_256Update(&hash->sha512, data, dataSz);
 1005                             		.loc 1 796 19
 1006 0123 ED A5 01                		mov.L	4[r10], r5
 1007 0126 ED A3 04                		mov.L	16[r10], r3
 1008 0129 ED A2 03                		mov.L	12[r10], r2
 1009 012c EF 51                   		mov.L	r5, r1
 1010 012e 05 00 00 00             		bsr	_wc_Sha512_256Update
 1011 0132 E3 A1                   		mov.L	r1, [r10]
 797:../src/wolfcrypt/src/hash.c **** #endif
 798:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 799:../src/wolfcrypt/src/hash.c ****             break;
 1012                             		.loc 1 799 13
 1013 0134 2E 12                   		bra	.L157
 1014                             	.L147:
 800:../src/wolfcrypt/src/hash.c ****     #endif
 801:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_224:
 802:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_224)
 803:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_224_Update(&hash->sha3, data, dataSz);
 804:../src/wolfcrypt/src/hash.c **** #endif
 805:../src/wolfcrypt/src/hash.c ****             break;
 806:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
 807:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_256)
 808:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_256_Update(&hash->sha3, data, dataSz);
 809:../src/wolfcrypt/src/hash.c **** #endif
 810:../src/wolfcrypt/src/hash.c ****             break;
 811:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
 812:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_384)
 813:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_384_Update(&hash->sha3, data, dataSz);
 814:../src/wolfcrypt/src/hash.c **** #endif
 815:../src/wolfcrypt/src/hash.c ****             break;
 816:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
 817:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_512)
 818:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_512_Update(&hash->sha3, data, dataSz);
 819:../src/wolfcrypt/src/hash.c **** #endif
 820:../src/wolfcrypt/src/hash.c ****             break;
 821:../src/wolfcrypt/src/hash.c **** 
 822:../src/wolfcrypt/src/hash.c ****         /* not supported */
 823:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5_SHA:
 824:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD2:
 825:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD4:
 826:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2B:
 827:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2S:
 828:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NO_SHAKE256
 829:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE128:
 830:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE256:
 831:../src/wolfcrypt/src/hash.c ****     #endif
 832:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_NONE:
 833:../src/wolfcrypt/src/hash.c ****         default:
 834:../src/wolfcrypt/src/hash.c ****             ret = BAD_FUNC_ARG;
 1015                             		.loc 1 834 17
 1016 0136 F8 AA 53 FF             		mov.L	#-173, [r10]
 1017 013a 2E 0C                   		bra	.L157
 1018                             	.L158:
 767:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 1019                             		.loc 1 767 13
 1020 013c 03                      		nop
 1021 013d 09                      		bra	.L157
 1022                             	.L159:
 815:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
 1023                             		.loc 1 815 13
 1024 013e 03                      		nop
 1025 013f 0F                      		bra	.L157
 1026                             	.L160:
 805:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
 1027                             		.loc 1 805 13
 1028 0140 03                      		nop
 1029 0141 0D                      		bra	.L157
 1030                             	.L161:
 810:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
 1031                             		.loc 1 810 13
 1032 0142 03                      		nop
 1033 0143 2E 03                   		bra	.L157
 1034                             	.L162:
 820:../src/wolfcrypt/src/hash.c **** 
 1035                             		.loc 1 820 13
 1036 0145 03                      		nop
 1037                             		.balign 8,3,1
 1038                             	.L157:
 835:../src/wolfcrypt/src/hash.c ****     };
 836:../src/wolfcrypt/src/hash.c **** 
 837:../src/wolfcrypt/src/hash.c ****     return ret;
 1039                             		.loc 1 837 12
 1040 0146 EC A5                   		mov.L	[r10], r5
 1041                             	.L140:
 838:../src/wolfcrypt/src/hash.c **** }
 1042                             		.loc 1 838 1
 1043 0148 EF 51                   		mov.L	r5, r1
 1044 014a 3F AA 06                		rtsd	#24, r10-r10
 1045                             	.LFE51:
 1047 014d FC 13 00                		.section	.text.wc_HashFinal,"ax",@progbits
 1048                             		.global	_wc_HashFinal
 1050                             	_wc_HashFinal:
 1051                             	.LFB52:
 839:../src/wolfcrypt/src/hash.c **** 
 840:../src/wolfcrypt/src/hash.c **** int wc_HashFinal(wc_HashAlg* hash, enum wc_HashType type, byte* out)
 841:../src/wolfcrypt/src/hash.c **** {
 1052                             		.loc 1 841 1
 1053 0000 7E AA                   		push.l	r10
 1054                             	.LCFI19:
 1055 0002 71 0A F0                		add	#-16, r0, r10
 1056                             	.LCFI20:
 1057 0005 EF A0                   		mov.L	r10, r0
 1058 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1059 000a E7 A2 02                		mov.L	r2, 8[r10]
 1060 000d E7 A3 03                		mov.L	r3, 12[r10]
 842:../src/wolfcrypt/src/hash.c ****     int ret = HASH_TYPE_E; /* Default to hash type error */
 1061                             		.loc 1 842 9
 1062 0010 F8 AA 18 FF             		mov.L	#-232, [r10]
 843:../src/wolfcrypt/src/hash.c **** 
 844:../src/wolfcrypt/src/hash.c ****     if (hash == NULL || out == NULL)
 1063                             		.loc 1 844 8
 1064 0014 ED A5 01                		mov.L	4[r10], r5
 1065 0017 61 05                   		cmp	#0, r5
 1066 0019 17                      		beq	.L164
 1067                             		.loc 1 844 22 discriminator 1
 1068 001a ED A5 03                		mov.L	12[r10], r5
 1069 001d 61 05                   		cmp	#0, r5
 1070 001f 18                      		bne	.L165
 1071                             	.L164:
 845:../src/wolfcrypt/src/hash.c ****         return BAD_FUNC_ARG;
 1072                             		.loc 1 845 16
 1073 0020 FB 5A 53 FF             		mov.L	#-173, r5
 1074 0024 38 01 01                		bra	.L166
 1075                             	.L165:
 846:../src/wolfcrypt/src/hash.c **** 
 847:../src/wolfcrypt/src/hash.c ****     switch (type) {
 1076                             		.loc 1 847 5
 1077 0027 ED A5 02                		mov.L	8[r10], r5
 1078 002a 61 85                   		cmp	#8, r5
 1079 002c 3A B7 00                		beq	.L167
 1080 002f ED A5 02                		mov.L	8[r10], r5
 1081 0032 61 85                   		cmp	#8, r5
 1082 0034 24 33                   		bgtu	.L168
 1083 0036 ED A5 02                		mov.L	8[r10], r5
 1084 0039 61 55                   		cmp	#5, r5
 1085 003b 3A DE 00                		beq	.L184
 1086 003e ED A5 02                		mov.L	8[r10], r5
 1087 0041 61 55                   		cmp	#5, r5
 1088 0043 24 13                   		bgtu	.L170
 1089 0045 ED A5 02                		mov.L	8[r10], r5
 1090 0048 61 35                   		cmp	#3, r5
 1091 004a 20 59                   		beq	.L171
 1092 004c ED A5 02                		mov.L	8[r10], r5
 1093 004f 61 45                   		cmp	#4, r5
 1094 0051 20 62                   		beq	.L172
 1095 0053 38 C0 00                		bra	.L173
 1096                             	.L170:
 1097 0056 ED A5 02                		mov.L	8[r10], r5
 1098 0059 61 65                   		cmp	#6, r5
 1099 005b 20 68                   		beq	.L174
 1100 005d ED A5 02                		mov.L	8[r10], r5
 1101 0060 61 75                   		cmp	#7, r5
 1102 0062 20 71                   		beq	.L175
 1103 0064 38 AF 00                		bra	.L173
 1104                             	.L168:
 1105 0067 ED A5 02                		mov.L	8[r10], r5
 1106 006a 61 C5                   		cmp	#12, r5
 1107 006c 3A AF 00                		beq	.L185
 1108 006f ED A5 02                		mov.L	8[r10], r5
 1109 0072 61 C5                   		cmp	#12, r5
 1110 0074 24 15                   		bgtu	.L177
 1111 0076 ED A5 02                		mov.L	8[r10], r5
 1112 0079 61 A5                   		cmp	#10, r5
 1113 007b 3A A2 00                		beq	.L186
 1114 007e ED A5 02                		mov.L	8[r10], r5
 1115 0081 61 B5                   		cmp	#11, r5
 1116 0083 3A 9C 00                		beq	.L187
 1117 0086 38 8D 00                		bra	.L173
 1118                             	.L177:
 1119 0089 ED A5 02                		mov.L	8[r10], r5
 1120 008c 75 55 10                		cmp	#16, r5
 1121 008f 20 64                   		beq	.L180
 1122 0091 ED A5 02                		mov.L	8[r10], r5
 1123 0094 75 55 11                		cmp	#17, r5
 1124 0097 20 6C                   		beq	.L181
 1125 0099 ED A5 02                		mov.L	8[r10], r5
 1126 009c 61 D5                   		cmp	#13, r5
 1127 009e 3A 84 00                		beq	.L188
 1128 00a1 2E 72                   		bra	.L173
 1129                             	.L171:
 848:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5:
 849:../src/wolfcrypt/src/hash.c **** #ifndef NO_MD5
 850:../src/wolfcrypt/src/hash.c ****             ret = wc_Md5Final(&hash->md5, out);
 1130                             		.loc 1 850 19
 1131 00a3 ED A5 01                		mov.L	4[r10], r5
 1132 00a6 ED A2 03                		mov.L	12[r10], r2
 1133 00a9 EF 51                   		mov.L	r5, r1
 1134 00ab 05 00 00 00             		bsr	_wc_Md5Final
 1135 00af E3 A1                   		mov.L	r1, [r10]
 851:../src/wolfcrypt/src/hash.c **** #endif
 852:../src/wolfcrypt/src/hash.c ****             break;
 1136                             		.loc 1 852 13
 1137 00b1 2E 72                   		bra	.L183
 1138                             	.L172:
 853:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA:
 854:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA
 855:../src/wolfcrypt/src/hash.c ****             ret = wc_ShaFinal(&hash->sha, out);
 1139                             		.loc 1 855 19
 1140 00b3 ED A5 01                		mov.L	4[r10], r5
 1141 00b6 ED A2 03                		mov.L	12[r10], r2
 1142 00b9 EF 51                   		mov.L	r5, r1
 1143 00bb 05 00 00 00             		bsr	_wc_ShaFinal
 1144 00bf E3 A1                   		mov.L	r1, [r10]
 856:../src/wolfcrypt/src/hash.c **** #endif
 857:../src/wolfcrypt/src/hash.c ****             break;
 1145                             		.loc 1 857 13
 1146 00c1 2E 62                   		bra	.L183
 1147                             	.L174:
 858:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA224:
 859:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA224
 860:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha224Final(&hash->sha224, out);
 861:../src/wolfcrypt/src/hash.c **** #endif
 862:../src/wolfcrypt/src/hash.c ****             break;
 863:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 864:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA256
 865:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha256Final(&hash->sha256, out);
 1148                             		.loc 1 865 19
 1149 00c3 ED A5 01                		mov.L	4[r10], r5
 1150 00c6 ED A2 03                		mov.L	12[r10], r2
 1151 00c9 EF 51                   		mov.L	r5, r1
 1152 00cb 05 00 00 00             		bsr	_wc_Sha256Final
 1153 00cf E3 A1                   		mov.L	r1, [r10]
 866:../src/wolfcrypt/src/hash.c **** #endif
 867:../src/wolfcrypt/src/hash.c ****             break;
 1154                             		.loc 1 867 13
 1155 00d1 2E 52                   		bra	.L183
 1156                             	.L175:
 868:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA384:
 869:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA384
 870:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha384Final(&hash->sha384, out);
 1157                             		.loc 1 870 19
 1158 00d3 ED A5 01                		mov.L	4[r10], r5
 1159 00d6 ED A2 03                		mov.L	12[r10], r2
 1160 00d9 EF 51                   		mov.L	r5, r1
 1161 00db 05 00 00 00             		bsr	_wc_Sha384Final
 1162 00df E3 A1                   		mov.L	r1, [r10]
 871:../src/wolfcrypt/src/hash.c **** #endif
 872:../src/wolfcrypt/src/hash.c ****             break;
 1163                             		.loc 1 872 13
 1164 00e1 2E 42                   		bra	.L183
 1165                             	.L167:
 873:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512:
 874:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA512
 875:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha512Final(&hash->sha512, out);
 1166                             		.loc 1 875 19
 1167 00e3 ED A5 01                		mov.L	4[r10], r5
 1168 00e6 ED A2 03                		mov.L	12[r10], r2
 1169 00e9 EF 51                   		mov.L	r5, r1
 1170 00eb 05 00 00 00             		bsr	_wc_Sha512Final
 1171 00ef E3 A1                   		mov.L	r1, [r10]
 876:../src/wolfcrypt/src/hash.c **** #endif
 877:../src/wolfcrypt/src/hash.c ****             break;
 1172                             		.loc 1 877 13
 1173 00f1 2E 32                   		bra	.L183
 1174                             	.L180:
 878:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_224
 879:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_224:
 880:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 881:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
 882:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha512_224Final(&hash->sha512, out);
 1175                             		.loc 1 882 19
 1176 00f3 ED A5 01                		mov.L	4[r10], r5
 1177 00f6 ED A2 03                		mov.L	12[r10], r2
 1178 00f9 EF 51                   		mov.L	r5, r1
 1179 00fb 05 00 00 00             		bsr	_wc_Sha512_224Final
 1180 00ff E3 A1                   		mov.L	r1, [r10]
 883:../src/wolfcrypt/src/hash.c **** #endif
 884:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 885:../src/wolfcrypt/src/hash.c ****             break;
 1181                             		.loc 1 885 13
 1182 0101 2E 22                   		bra	.L183
 1183                             	.L181:
 886:../src/wolfcrypt/src/hash.c ****     #endif
 887:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_256
 888:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_256:
 889:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 890:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_256)
 891:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha512_256Final(&hash->sha512, out);
 1184                             		.loc 1 891 19
 1185 0103 ED A5 01                		mov.L	4[r10], r5
 1186 0106 ED A2 03                		mov.L	12[r10], r2
 1187 0109 EF 51                   		mov.L	r5, r1
 1188 010b 05 00 00 00             		bsr	_wc_Sha512_256Final
 1189 010f E3 A1                   		mov.L	r1, [r10]
 892:../src/wolfcrypt/src/hash.c **** #endif
 893:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 894:../src/wolfcrypt/src/hash.c ****             break;
 1190                             		.loc 1 894 13
 1191 0111 2E 12                   		bra	.L183
 1192                             	.L173:
 895:../src/wolfcrypt/src/hash.c ****     #endif
 896:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_224:
 897:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_224)
 898:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_224_Final(&hash->sha3, out);
 899:../src/wolfcrypt/src/hash.c **** #endif
 900:../src/wolfcrypt/src/hash.c ****             break;
 901:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
 902:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_256)
 903:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_256_Final(&hash->sha3, out);
 904:../src/wolfcrypt/src/hash.c **** #endif
 905:../src/wolfcrypt/src/hash.c ****             break;
 906:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
 907:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_384)
 908:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_384_Final(&hash->sha3, out);
 909:../src/wolfcrypt/src/hash.c **** #endif
 910:../src/wolfcrypt/src/hash.c ****             break;
 911:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
 912:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_512)
 913:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_512_Final(&hash->sha3, out);
 914:../src/wolfcrypt/src/hash.c **** #endif
 915:../src/wolfcrypt/src/hash.c ****             break;
 916:../src/wolfcrypt/src/hash.c **** 
 917:../src/wolfcrypt/src/hash.c ****         /* not supported */
 918:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5_SHA:
 919:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD2:
 920:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD4:
 921:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2B:
 922:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2S:
 923:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NO_SHAKE256
 924:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE128:
 925:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE256:
 926:../src/wolfcrypt/src/hash.c ****     #endif
 927:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_NONE:
 928:../src/wolfcrypt/src/hash.c ****         default:
 929:../src/wolfcrypt/src/hash.c ****             ret = BAD_FUNC_ARG;
 1193                             		.loc 1 929 17
 1194 0113 F8 AA 53 FF             		mov.L	#-173, [r10]
 1195 0117 2E 0C                   		bra	.L183
 1196                             	.L184:
 862:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 1197                             		.loc 1 862 13
 1198 0119 03                      		nop
 1199 011a 09                      		bra	.L183
 1200                             	.L185:
 910:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
 1201                             		.loc 1 910 13
 1202 011b 03                      		nop
 1203 011c 0F                      		bra	.L183
 1204                             	.L186:
 900:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
 1205                             		.loc 1 900 13
 1206 011d 03                      		nop
 1207 011e 0D                      		bra	.L183
 1208                             	.L187:
 905:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
 1209                             		.loc 1 905 13
 1210 011f 03                      		nop
 1211 0120 2E 03                   		bra	.L183
 1212                             	.L188:
 915:../src/wolfcrypt/src/hash.c **** 
 1213                             		.loc 1 915 13
 1214 0122 03                      		nop
 1215                             		.balign 8,3,1
 1216                             	.L183:
 930:../src/wolfcrypt/src/hash.c ****     };
 931:../src/wolfcrypt/src/hash.c **** 
 932:../src/wolfcrypt/src/hash.c ****     return ret;
 1217                             		.loc 1 932 12
 1218 0123 EC A5                   		mov.L	[r10], r5
 1219                             	.L166:
 933:../src/wolfcrypt/src/hash.c **** }
 1220                             		.loc 1 933 1
 1221 0125 EF 51                   		mov.L	r5, r1
 1222 0127 3F AA 05                		rtsd	#20, r10-r10
 1223                             	.LFE52:
 1225 012a 74 10 01 00 00 00       		.section	.text.wc_HashFree,"ax",@progbits
 1226                             		.global	_wc_HashFree
 1228                             	_wc_HashFree:
 1229                             	.LFB53:
 934:../src/wolfcrypt/src/hash.c **** 
 935:../src/wolfcrypt/src/hash.c **** int wc_HashFree(wc_HashAlg* hash, enum wc_HashType type)
 936:../src/wolfcrypt/src/hash.c **** {
 1230                             		.loc 1 936 1
 1231 0000 7E AA                   		push.l	r10
 1232                             	.LCFI21:
 1233 0002 71 0A F4                		add	#-12, r0, r10
 1234                             	.LCFI22:
 1235 0005 EF A0                   		mov.L	r10, r0
 1236 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1237 000a E7 A2 02                		mov.L	r2, 8[r10]
 937:../src/wolfcrypt/src/hash.c ****     int ret = HASH_TYPE_E; /* Default to hash type error */
 1238                             		.loc 1 937 9
 1239 000d F8 AA 18 FF             		mov.L	#-232, [r10]
 938:../src/wolfcrypt/src/hash.c **** 
 939:../src/wolfcrypt/src/hash.c ****     if (hash == NULL)
 1240                             		.loc 1 939 8
 1241 0011 ED A5 01                		mov.L	4[r10], r5
 1242 0014 61 05                   		cmp	#0, r5
 1243 0016 18                      		bne	.L190
 940:../src/wolfcrypt/src/hash.c ****         return BAD_FUNC_ARG;
 1244                             		.loc 1 940 16
 1245 0017 FB 5A 53 FF             		mov.L	#-173, r5
 1246 001b 38 F1 00                		bra	.L191
 1247                             	.L190:
 941:../src/wolfcrypt/src/hash.c **** 
 942:../src/wolfcrypt/src/hash.c ****     switch (type) {
 1248                             		.loc 1 942 5
 1249 001e ED A5 02                		mov.L	8[r10], r5
 1250 0021 61 85                   		cmp	#8, r5
 1251 0023 3A AD 00                		beq	.L192
 1252 0026 ED A5 02                		mov.L	8[r10], r5
 1253 0029 61 85                   		cmp	#8, r5
 1254 002b 24 33                   		bgtu	.L193
 1255 002d ED A5 02                		mov.L	8[r10], r5
 1256 0030 61 55                   		cmp	#5, r5
 1257 0032 3A CE 00                		beq	.L209
 1258 0035 ED A5 02                		mov.L	8[r10], r5
 1259 0038 61 55                   		cmp	#5, r5
 1260 003a 24 13                   		bgtu	.L195
 1261 003c ED A5 02                		mov.L	8[r10], r5
 1262 003f 61 35                   		cmp	#3, r5
 1263 0041 20 57                   		beq	.L196
 1264 0043 ED A5 02                		mov.L	8[r10], r5
 1265 0046 61 45                   		cmp	#4, r5
 1266 0048 20 5E                   		beq	.L197
 1267 004a 38 B0 00                		bra	.L198
 1268                             	.L195:
 1269 004d ED A5 02                		mov.L	8[r10], r5
 1270 0050 61 65                   		cmp	#6, r5
 1271 0052 20 62                   		beq	.L199
 1272 0054 ED A5 02                		mov.L	8[r10], r5
 1273 0057 61 75                   		cmp	#7, r5
 1274 0059 20 69                   		beq	.L200
 1275 005b 38 9F 00                		bra	.L198
 1276                             	.L193:
 1277 005e ED A5 02                		mov.L	8[r10], r5
 1278 0061 61 C5                   		cmp	#12, r5
 1279 0063 3A 9F 00                		beq	.L210
 1280 0066 ED A5 02                		mov.L	8[r10], r5
 1281 0069 61 C5                   		cmp	#12, r5
 1282 006b 24 14                   		bgtu	.L202
 1283 006d ED A5 02                		mov.L	8[r10], r5
 1284 0070 61 A5                   		cmp	#10, r5
 1285 0072 3A 92 00                		beq	.L211
 1286 0075 ED A5 02                		mov.L	8[r10], r5
 1287 0078 61 B5                   		cmp	#11, r5
 1288 007a 3A 8C 00                		beq	.L212
 1289 007d 2E 7D                   		bra	.L198
 1290                             	.L202:
 1291 007f ED A5 02                		mov.L	8[r10], r5
 1292 0082 75 55 10                		cmp	#16, r5
 1293 0085 20 59                   		beq	.L205
 1294 0087 ED A5 02                		mov.L	8[r10], r5
 1295 008a 75 55 11                		cmp	#17, r5
 1296 008d 20 5F                   		beq	.L206
 1297 008f ED A5 02                		mov.L	8[r10], r5
 1298 0092 61 D5                   		cmp	#13, r5
 1299 0094 20 75                   		beq	.L213
 1300 0096 2E 64                   		bra	.L198
 1301                             	.L196:
 943:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5:
 944:../src/wolfcrypt/src/hash.c **** #ifndef NO_MD5
 945:../src/wolfcrypt/src/hash.c ****             wc_Md5Free(&hash->md5);
 1302                             		.loc 1 945 13
 1303 0098 ED A5 01                		mov.L	4[r10], r5
 1304 009b EF 51                   		mov.L	r5, r1
 1305 009d 05 00 00 00             		bsr	_wc_Md5Free
 946:../src/wolfcrypt/src/hash.c ****             ret = 0;
 1306                             		.loc 1 946 17
 1307 00a1 F8 A6 00                		mov.L	#0, [r10]
 947:../src/wolfcrypt/src/hash.c **** #endif
 948:../src/wolfcrypt/src/hash.c ****             break;
 1308                             		.loc 1 948 13
 1309 00a4 2E 66                   		bra	.L208
 1310                             	.L197:
 949:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA:
 950:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA
 951:../src/wolfcrypt/src/hash.c ****             wc_ShaFree(&hash->sha);
 1311                             		.loc 1 951 13
 1312 00a6 ED A5 01                		mov.L	4[r10], r5
 1313 00a9 EF 51                   		mov.L	r5, r1
 1314 00ab 05 00 00 00             		bsr	_wc_ShaFree
 952:../src/wolfcrypt/src/hash.c ****             ret = 0;
 1315                             		.loc 1 952 17
 1316 00af F8 A6 00                		mov.L	#0, [r10]
 953:../src/wolfcrypt/src/hash.c **** #endif
 954:../src/wolfcrypt/src/hash.c ****             break;
 1317                             		.loc 1 954 13
 1318 00b2 2E 58                   		bra	.L208
 1319                             	.L199:
 955:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA224:
 956:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA224
 957:../src/wolfcrypt/src/hash.c ****             wc_Sha224Free(&hash->sha224);
 958:../src/wolfcrypt/src/hash.c ****             ret = 0;
 959:../src/wolfcrypt/src/hash.c **** #endif
 960:../src/wolfcrypt/src/hash.c ****             break;
 961:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 962:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA256
 963:../src/wolfcrypt/src/hash.c ****             wc_Sha256Free(&hash->sha256);
 1320                             		.loc 1 963 13
 1321 00b4 ED A5 01                		mov.L	4[r10], r5
 1322 00b7 EF 51                   		mov.L	r5, r1
 1323 00b9 05 00 00 00             		bsr	_wc_Sha256Free
 964:../src/wolfcrypt/src/hash.c ****             ret = 0;
 1324                             		.loc 1 964 17
 1325 00bd F8 A6 00                		mov.L	#0, [r10]
 965:../src/wolfcrypt/src/hash.c **** #endif
 966:../src/wolfcrypt/src/hash.c ****             break;
 1326                             		.loc 1 966 13
 1327 00c0 2E 4A                   		bra	.L208
 1328                             	.L200:
 967:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA384:
 968:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA384
 969:../src/wolfcrypt/src/hash.c ****             wc_Sha384Free(&hash->sha384);
 1329                             		.loc 1 969 13
 1330 00c2 ED A5 01                		mov.L	4[r10], r5
 1331 00c5 EF 51                   		mov.L	r5, r1
 1332 00c7 05 00 00 00             		bsr	_wc_Sha384Free
 970:../src/wolfcrypt/src/hash.c ****             ret = 0;
 1333                             		.loc 1 970 17
 1334 00cb F8 A6 00                		mov.L	#0, [r10]
 971:../src/wolfcrypt/src/hash.c **** #endif
 972:../src/wolfcrypt/src/hash.c ****             break;
 1335                             		.loc 1 972 13
 1336 00ce 2E 3C                   		bra	.L208
 1337                             	.L192:
 973:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512:
 974:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA512
 975:../src/wolfcrypt/src/hash.c ****             wc_Sha512Free(&hash->sha512);
 1338                             		.loc 1 975 13
 1339 00d0 ED A5 01                		mov.L	4[r10], r5
 1340 00d3 EF 51                   		mov.L	r5, r1
 1341 00d5 05 00 00 00             		bsr	_wc_Sha512Free
 976:../src/wolfcrypt/src/hash.c ****             ret = 0;
 1342                             		.loc 1 976 17
 1343 00d9 F8 A6 00                		mov.L	#0, [r10]
 977:../src/wolfcrypt/src/hash.c **** #endif
 978:../src/wolfcrypt/src/hash.c ****             break;
 1344                             		.loc 1 978 13
 1345 00dc 2E 2E                   		bra	.L208
 1346                             	.L205:
 979:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_224
 980:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_224:
 981:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 982:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_224)
 983:../src/wolfcrypt/src/hash.c ****             wc_Sha512_224Free(&hash->sha512);
 1347                             		.loc 1 983 13
 1348 00de ED A5 01                		mov.L	4[r10], r5
 1349 00e1 EF 51                   		mov.L	r5, r1
 1350 00e3 05 00 00 00             		bsr	_wc_Sha512_224Free
 984:../src/wolfcrypt/src/hash.c ****             ret = 0;
 1351                             		.loc 1 984 17
 1352 00e7 F8 A6 00                		mov.L	#0, [r10]
 985:../src/wolfcrypt/src/hash.c **** #endif
 986:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 987:../src/wolfcrypt/src/hash.c ****             break;
 1353                             		.loc 1 987 13
 1354 00ea 2E 20                   		bra	.L208
 1355                             	.L206:
 988:../src/wolfcrypt/src/hash.c ****     #endif
 989:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_256
 990:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_256:
 991:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 992:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA512) && !defined(WOLFSSL_NOSHA512_256)
 993:../src/wolfcrypt/src/hash.c ****             wc_Sha512_256Free(&hash->sha512);
 1356                             		.loc 1 993 13
 1357 00ec ED A5 01                		mov.L	4[r10], r5
 1358 00ef EF 51                   		mov.L	r5, r1
 1359 00f1 05 00 00 00             		bsr	_wc_Sha512_256Free
 994:../src/wolfcrypt/src/hash.c ****             ret = 0;
 1360                             		.loc 1 994 17
 1361 00f5 F8 A6 00                		mov.L	#0, [r10]
 995:../src/wolfcrypt/src/hash.c **** #endif
 996:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 997:../src/wolfcrypt/src/hash.c ****             break;
 1362                             		.loc 1 997 13
 1363 00f8 2E 12                   		bra	.L208
 1364                             	.L198:
 998:../src/wolfcrypt/src/hash.c ****     #endif
 999:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_224:
1000:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_224)
1001:../src/wolfcrypt/src/hash.c ****             wc_Sha3_224_Free(&hash->sha3);
1002:../src/wolfcrypt/src/hash.c ****             ret = 0;
1003:../src/wolfcrypt/src/hash.c **** #endif
1004:../src/wolfcrypt/src/hash.c ****             break;
1005:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
1006:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_256)
1007:../src/wolfcrypt/src/hash.c ****             wc_Sha3_256_Free(&hash->sha3);
1008:../src/wolfcrypt/src/hash.c ****             ret = 0;
1009:../src/wolfcrypt/src/hash.c **** #endif
1010:../src/wolfcrypt/src/hash.c ****             break;
1011:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
1012:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_384)
1013:../src/wolfcrypt/src/hash.c ****             wc_Sha3_384_Free(&hash->sha3);
1014:../src/wolfcrypt/src/hash.c ****             ret = 0;
1015:../src/wolfcrypt/src/hash.c **** #endif
1016:../src/wolfcrypt/src/hash.c ****             break;
1017:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
1018:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA3) && !defined(WOLFSSL_NOSHA3_512)
1019:../src/wolfcrypt/src/hash.c ****             wc_Sha3_512_Free(&hash->sha3);
1020:../src/wolfcrypt/src/hash.c ****             ret = 0;
1021:../src/wolfcrypt/src/hash.c **** #endif
1022:../src/wolfcrypt/src/hash.c ****             break;
1023:../src/wolfcrypt/src/hash.c **** 
1024:../src/wolfcrypt/src/hash.c ****         /* not supported */
1025:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5_SHA:
1026:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD2:
1027:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD4:
1028:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2B:
1029:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2S:
1030:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NO_SHAKE256
1031:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE128:
1032:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE256:
1033:../src/wolfcrypt/src/hash.c ****     #endif
1034:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_NONE:
1035:../src/wolfcrypt/src/hash.c ****         default:
1036:../src/wolfcrypt/src/hash.c ****             ret = BAD_FUNC_ARG;
 1365                             		.loc 1 1036 17
 1366 00fa F8 AA 53 FF             		mov.L	#-173, [r10]
 1367 00fe 2E 0C                   		bra	.L208
 1368                             	.L209:
 960:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
 1369                             		.loc 1 960 13
 1370 0100 03                      		nop
 1371 0101 09                      		bra	.L208
 1372                             	.L210:
1016:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
 1373                             		.loc 1 1016 13
 1374 0102 03                      		nop
 1375 0103 0F                      		bra	.L208
 1376                             	.L211:
1004:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
 1377                             		.loc 1 1004 13
 1378 0104 03                      		nop
 1379 0105 0D                      		bra	.L208
 1380                             	.L212:
1010:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
 1381                             		.loc 1 1010 13
 1382 0106 03                      		nop
 1383 0107 2E 03                   		bra	.L208
 1384                             	.L213:
1022:../src/wolfcrypt/src/hash.c **** 
 1385                             		.loc 1 1022 13
 1386 0109 03                      		nop
 1387                             		.balign 8,3,1
 1388                             	.L208:
1037:../src/wolfcrypt/src/hash.c ****     };
1038:../src/wolfcrypt/src/hash.c **** 
1039:../src/wolfcrypt/src/hash.c ****     return ret;
 1389                             		.loc 1 1039 12
 1390 010a EC A5                   		mov.L	[r10], r5
 1391                             	.L191:
1040:../src/wolfcrypt/src/hash.c **** }
 1392                             		.loc 1 1040 1
 1393 010c EF 51                   		mov.L	r5, r1
 1394 010e 3F AA 04                		rtsd	#16, r10-r10
 1395                             	.LFE53:
 1397 0111 FD 70 40 00 00 00 80    		.section C,"a",@progbits
 1398                             		.p2align 2
 1399                             	.LC0:
 1400 0000 49 6E 69 74 4D 64 35 20 		.string	"InitMd5 failed"
 1400      66 61 69 6C 65 64 00 
 1401                             	.LC1:
 1402 000f 4D 64 35 55 70 64 61 74 		.string	"Md5Update failed"
 1402      65 20 66 61 69 6C 65 64 
 1402      00 
 1403                             	.LC2:
 1404 0020 4D 64 35 46 69 6E 61 6C 		.string	"Md5Final failed"
 1404      20 66 61 69 6C 65 64 00 
 1405                             		.section	.text.wc_Md5Hash,"ax",@progbits
 1406                             		.global	_wc_Md5Hash
 1408                             	_wc_Md5Hash:
 1409                             	.LFB54:
1041:../src/wolfcrypt/src/hash.c **** 
1042:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_HASH_FLAGS
1043:../src/wolfcrypt/src/hash.c **** int wc_HashSetFlags(wc_HashAlg* hash, enum wc_HashType type, word32 flags)
1044:../src/wolfcrypt/src/hash.c **** {
1045:../src/wolfcrypt/src/hash.c ****     int ret = HASH_TYPE_E; /* Default to hash type error */
1046:../src/wolfcrypt/src/hash.c **** 
1047:../src/wolfcrypt/src/hash.c ****     if (hash == NULL)
1048:../src/wolfcrypt/src/hash.c ****         return BAD_FUNC_ARG;
1049:../src/wolfcrypt/src/hash.c **** 
1050:../src/wolfcrypt/src/hash.c ****     switch (type) {
1051:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5:
1052:../src/wolfcrypt/src/hash.c **** #ifndef NO_MD5
1053:../src/wolfcrypt/src/hash.c ****             ret = wc_Md5SetFlags(&hash->md5, flags);
1054:../src/wolfcrypt/src/hash.c **** #endif
1055:../src/wolfcrypt/src/hash.c ****             break;
1056:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA:
1057:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA
1058:../src/wolfcrypt/src/hash.c ****             ret = wc_ShaSetFlags(&hash->sha, flags);
1059:../src/wolfcrypt/src/hash.c **** #endif
1060:../src/wolfcrypt/src/hash.c ****             break;
1061:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA224:
1062:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA224
1063:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha224SetFlags(&hash->sha224, flags);
1064:../src/wolfcrypt/src/hash.c **** #endif
1065:../src/wolfcrypt/src/hash.c ****             break;
1066:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
1067:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA256
1068:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha256SetFlags(&hash->sha256, flags);
1069:../src/wolfcrypt/src/hash.c **** #endif
1070:../src/wolfcrypt/src/hash.c ****             break;
1071:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA384:
1072:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA384
1073:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha384SetFlags(&hash->sha384, flags);
1074:../src/wolfcrypt/src/hash.c **** #endif
1075:../src/wolfcrypt/src/hash.c ****             break;
1076:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512:
1077:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_224
1078:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_224:
1079:../src/wolfcrypt/src/hash.c ****     #endif
1080:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_256
1081:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_256:
1082:../src/wolfcrypt/src/hash.c ****     #endif
1083:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA512
1084:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha512SetFlags(&hash->sha512, flags);
1085:../src/wolfcrypt/src/hash.c **** #endif
1086:../src/wolfcrypt/src/hash.c ****             break;
1087:../src/wolfcrypt/src/hash.c **** 
1088:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_224:
1089:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
1090:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
1091:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
1092:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA3
1093:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_SetFlags(&hash->sha3, flags);
1094:../src/wolfcrypt/src/hash.c **** #endif
1095:../src/wolfcrypt/src/hash.c ****             break;
1096:../src/wolfcrypt/src/hash.c **** 
1097:../src/wolfcrypt/src/hash.c ****         /* not supported */
1098:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5_SHA:
1099:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD2:
1100:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD4:
1101:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2B:
1102:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2S:
1103:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_NONE:
1104:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NO_SHAKE256
1105:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE128:
1106:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE256:
1107:../src/wolfcrypt/src/hash.c ****     #endif
1108:../src/wolfcrypt/src/hash.c ****         default:
1109:../src/wolfcrypt/src/hash.c ****             ret = BAD_FUNC_ARG;
1110:../src/wolfcrypt/src/hash.c ****     };
1111:../src/wolfcrypt/src/hash.c **** 
1112:../src/wolfcrypt/src/hash.c ****     return ret;
1113:../src/wolfcrypt/src/hash.c **** }
1114:../src/wolfcrypt/src/hash.c **** int wc_HashGetFlags(wc_HashAlg* hash, enum wc_HashType type, word32* flags)
1115:../src/wolfcrypt/src/hash.c **** {
1116:../src/wolfcrypt/src/hash.c ****     int ret = HASH_TYPE_E; /* Default to hash type error */
1117:../src/wolfcrypt/src/hash.c **** 
1118:../src/wolfcrypt/src/hash.c ****     if (hash == NULL)
1119:../src/wolfcrypt/src/hash.c ****         return BAD_FUNC_ARG;
1120:../src/wolfcrypt/src/hash.c **** 
1121:../src/wolfcrypt/src/hash.c ****     switch (type) {
1122:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5:
1123:../src/wolfcrypt/src/hash.c **** #ifndef NO_MD5
1124:../src/wolfcrypt/src/hash.c ****             ret = wc_Md5GetFlags(&hash->md5, flags);
1125:../src/wolfcrypt/src/hash.c **** #endif
1126:../src/wolfcrypt/src/hash.c ****             break;
1127:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA:
1128:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA
1129:../src/wolfcrypt/src/hash.c ****             ret = wc_ShaGetFlags(&hash->sha, flags);
1130:../src/wolfcrypt/src/hash.c **** #endif
1131:../src/wolfcrypt/src/hash.c ****             break;
1132:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA224:
1133:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA224
1134:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha224GetFlags(&hash->sha224, flags);
1135:../src/wolfcrypt/src/hash.c **** #endif
1136:../src/wolfcrypt/src/hash.c ****             break;
1137:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA256:
1138:../src/wolfcrypt/src/hash.c **** #ifndef NO_SHA256
1139:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha256GetFlags(&hash->sha256, flags);
1140:../src/wolfcrypt/src/hash.c **** #endif
1141:../src/wolfcrypt/src/hash.c ****             break;
1142:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA384:
1143:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA384
1144:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha384GetFlags(&hash->sha384, flags);
1145:../src/wolfcrypt/src/hash.c **** #endif
1146:../src/wolfcrypt/src/hash.c ****             break;
1147:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512:
1148:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_224
1149:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_224:
1150:../src/wolfcrypt/src/hash.c ****     #endif
1151:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NOSHA512_256
1152:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA512_256:
1153:../src/wolfcrypt/src/hash.c ****     #endif
1154:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA512
1155:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha512GetFlags(&hash->sha512, flags);
1156:../src/wolfcrypt/src/hash.c **** #endif
1157:../src/wolfcrypt/src/hash.c ****             break;
1158:../src/wolfcrypt/src/hash.c **** 
1159:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_224:
1160:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_256:
1161:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_384:
1162:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHA3_512:
1163:../src/wolfcrypt/src/hash.c **** #ifdef WOLFSSL_SHA3
1164:../src/wolfcrypt/src/hash.c ****             ret = wc_Sha3_GetFlags(&hash->sha3, flags);
1165:../src/wolfcrypt/src/hash.c **** #endif
1166:../src/wolfcrypt/src/hash.c ****             break;
1167:../src/wolfcrypt/src/hash.c **** 
1168:../src/wolfcrypt/src/hash.c ****         /* not supported */
1169:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD5_SHA:
1170:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD2:
1171:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_MD4:
1172:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2B:
1173:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_BLAKE2S:
1174:../src/wolfcrypt/src/hash.c ****     #ifndef WOLFSSL_NO_SHAKE256
1175:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE128:
1176:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_SHAKE256:
1177:../src/wolfcrypt/src/hash.c ****     #endif
1178:../src/wolfcrypt/src/hash.c ****         case WC_HASH_TYPE_NONE:
1179:../src/wolfcrypt/src/hash.c ****         default:
1180:../src/wolfcrypt/src/hash.c ****             ret = BAD_FUNC_ARG;
1181:../src/wolfcrypt/src/hash.c ****     };
1182:../src/wolfcrypt/src/hash.c **** 
1183:../src/wolfcrypt/src/hash.c ****     return ret;
1184:../src/wolfcrypt/src/hash.c **** }
1185:../src/wolfcrypt/src/hash.c **** #endif /* WOLFSSL_HASH_FLAGS */
1186:../src/wolfcrypt/src/hash.c **** 
1187:../src/wolfcrypt/src/hash.c **** 
1188:../src/wolfcrypt/src/hash.c **** #if !defined(WOLFSSL_TI_HASH)
1189:../src/wolfcrypt/src/hash.c **** 
1190:../src/wolfcrypt/src/hash.c **** #if !defined(NO_MD5)
1191:../src/wolfcrypt/src/hash.c ****     int wc_Md5Hash(const byte* data, word32 len, byte* hash)
1192:../src/wolfcrypt/src/hash.c ****     {
 1410                             		.loc 1 1192 5
 1411 0000 7E AA                   		push.l	r10
 1412                             	.LCFI23:
 1413 0002 71 0A E8                		add	#-24, r0, r10
 1414                             	.LCFI24:
 1415 0005 EF A0                   		mov.L	r10, r0
 1416 0007 E7 A1 03                		mov.L	r1, 12[r10]
 1417 000a E7 A2 04                		mov.L	r2, 16[r10]
 1418 000d E7 A3 05                		mov.L	r3, 20[r10]
1193:../src/wolfcrypt/src/hash.c ****         int ret;
1194:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1195:../src/wolfcrypt/src/hash.c ****         wc_Md5* md5;
1196:../src/wolfcrypt/src/hash.c ****     #else
1197:../src/wolfcrypt/src/hash.c ****         wc_Md5  md5[1];
1198:../src/wolfcrypt/src/hash.c ****     #endif
1199:../src/wolfcrypt/src/hash.c **** 
1200:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1201:../src/wolfcrypt/src/hash.c ****         md5 = (wc_Md5*)XMALLOC(sizeof(wc_Md5), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 1419                             		.loc 1 1201 24
 1420 0010 75 41 60                		mov.L	#0x60, r1
 1421 0013 05 00 00 00             		bsr	_wolfSSL_Malloc
 1422 0017 E7 A1 01                		mov.L	r1, 4[r10]
1202:../src/wolfcrypt/src/hash.c ****         if (md5 == NULL)
 1423                             		.loc 1 1202 12
 1424 001a ED A5 01                		mov.L	4[r10], r5
 1425 001d 61 05                   		cmp	#0, r5
 1426 001f 1E                      		bne	.L215
1203:../src/wolfcrypt/src/hash.c ****             return MEMORY_E;
 1427                             		.loc 1 1203 20
 1428 0020 FB 56 83                		mov.L	#-125, r5
 1429 0023 2E 76                   		bra	.L216
 1430                             	.L215:
1204:../src/wolfcrypt/src/hash.c ****     #endif
1205:../src/wolfcrypt/src/hash.c **** 
1206:../src/wolfcrypt/src/hash.c ****         if ((ret = wc_InitMd5(md5)) != 0) {
 1431                             		.loc 1 1206 20
 1432 0025 ED A1 01                		mov.L	4[r10], r1
 1433 0028 05 00 00 00             		bsr	_wc_InitMd5
 1434 002c E3 A1                   		mov.L	r1, [r10]
 1435                             		.loc 1 1206 12
 1436 002e EC A5                   		mov.L	[r10], r5
 1437 0030 61 05                   		cmp	#0, r5
 1438 0032 20 0E                   		beq	.L217
1207:../src/wolfcrypt/src/hash.c ****             WOLFSSL_MSG("InitMd5 failed");
 1439                             		.loc 1 1207 13
 1440 0034 FB 12 00 00 00 00       		mov.L	#.LC0, r1
 1441 003a 05 00 00 00             		bsr	_WOLFSSL_MSG
 1442 003e 2E 46                   		bra	.L218
 1443                             	.L217:
1208:../src/wolfcrypt/src/hash.c ****         }
1209:../src/wolfcrypt/src/hash.c ****         else {
1210:../src/wolfcrypt/src/hash.c ****             if ((ret = wc_Md5Update(md5, data, len)) != 0) {
 1444                             		.loc 1 1210 24
 1445 0040 ED A3 04                		mov.L	16[r10], r3
 1446 0043 ED A2 03                		mov.L	12[r10], r2
 1447 0046 ED A1 01                		mov.L	4[r10], r1
 1448 0049 05 00 00 00             		bsr	_wc_Md5Update
 1449 004d E3 A1                   		mov.L	r1, [r10]
 1450                             		.loc 1 1210 16
 1451 004f EC A5                   		mov.L	[r10], r5
 1452 0051 61 05                   		cmp	#0, r5
 1453 0053 20 0E                   		beq	.L219
1211:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("Md5Update failed");
 1454                             		.loc 1 1211 17
 1455 0055 FB 12 0F 00 00 00       		mov.L	#.LC1, r1
 1456 005b 05 00 00 00             		bsr	_WOLFSSL_MSG
 1457 005f 2E 1E                   		bra	.L220
 1458                             	.L219:
1212:../src/wolfcrypt/src/hash.c ****             }
1213:../src/wolfcrypt/src/hash.c ****             else if ((ret = wc_Md5Final(md5, hash)) != 0) {
 1459                             		.loc 1 1213 29
 1460 0061 ED A2 05                		mov.L	20[r10], r2
 1461 0064 ED A1 01                		mov.L	4[r10], r1
 1462 0067 05 00 00 00             		bsr	_wc_Md5Final
 1463 006b E3 A1                   		mov.L	r1, [r10]
 1464                             		.loc 1 1213 21
 1465 006d EC A5                   		mov.L	[r10], r5
 1466 006f 61 05                   		cmp	#0, r5
 1467 0071 20 0C                   		beq	.L220
1214:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("Md5Final failed");
 1468                             		.loc 1 1214 17
 1469 0073 FB 12 20 00 00 00       		mov.L	#.LC2, r1
 1470 0079 05 00 00 00             		bsr	_WOLFSSL_MSG
 1471                             	.L220:
1215:../src/wolfcrypt/src/hash.c ****             }
1216:../src/wolfcrypt/src/hash.c ****             wc_Md5Free(md5);
 1472                             		.loc 1 1216 13
 1473 007d ED A1 01                		mov.L	4[r10], r1
 1474 0080 05 00 00 00             		bsr	_wc_Md5Free
 1475                             	.L218:
 1476                             	.LBB2:
1217:../src/wolfcrypt/src/hash.c ****         }
1218:../src/wolfcrypt/src/hash.c **** 
1219:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1220:../src/wolfcrypt/src/hash.c ****         XFREE(md5, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 1477                             		.loc 1 1220 9
 1478 0084 ED A5 01                		mov.L	4[r10], r5
 1479 0087 E7 A5 02                		mov.L	r5, 8[r10]
 1480 008a ED A5 02                		mov.L	8[r10], r5
 1481 008d 61 05                   		cmp	#0, r5
 1482 008f 10                      		beq	.L221
 1483                             		.loc 1 1220 9 is_stmt 0 discriminator 1
 1484 0090 ED A1 02                		mov.L	8[r10], r1
 1485 0093 05 00 00 00             		bsr	_wolfSSL_Free
 1486                             	.L221:
 1487                             	.LBE2:
1221:../src/wolfcrypt/src/hash.c ****     #endif
1222:../src/wolfcrypt/src/hash.c **** 
1223:../src/wolfcrypt/src/hash.c ****         return ret;
 1488                             		.loc 1 1223 16 is_stmt 1
 1489 0097 EC A5                   		mov.L	[r10], r5
 1490                             	.L216:
1224:../src/wolfcrypt/src/hash.c ****     }
 1491                             		.loc 1 1224 5
 1492 0099 EF 51                   		mov.L	r5, r1
 1493 009b 3F AA 07                		rtsd	#28, r10-r10
 1494                             	.LFE54:
 1496                             		.section C,"a",@progbits
 1497                             		.p2align 2
 1498                             	.LC3:
 1499 0030 49 6E 69 74 53 68 61 20 		.string	"InitSha failed"
 1499      66 61 69 6C 65 64 00 
 1500                             	.LC4:
 1501 003f 53 68 61 55 70 64 61 74 		.string	"ShaUpdate failed"
 1501      65 20 66 61 69 6C 65 64 
 1501      00 
 1502                             	.LC5:
 1503 0050 53 68 61 46 69 6E 61 6C 		.string	"ShaFinal failed"
 1503      20 66 61 69 6C 65 64 00 
 1504                             		.section	.text.wc_ShaHash,"ax",@progbits
 1505                             		.global	_wc_ShaHash
 1507                             	_wc_ShaHash:
 1508                             	.LFB55:
1225:../src/wolfcrypt/src/hash.c **** #endif /* !NO_MD5 */
1226:../src/wolfcrypt/src/hash.c **** 
1227:../src/wolfcrypt/src/hash.c **** #if !defined(NO_SHA)
1228:../src/wolfcrypt/src/hash.c ****     int wc_ShaHash(const byte* data, word32 len, byte* hash)
1229:../src/wolfcrypt/src/hash.c ****     {
 1509                             		.loc 1 1229 5
 1510 0000 7E AA                   		push.l	r10
 1511                             	.LCFI25:
 1512 0002 71 0A E4                		add	#-28, r0, r10
 1513                             	.LCFI26:
 1514 0005 EF A0                   		mov.L	r10, r0
 1515 0007 E7 A1 04                		mov.L	r1, 16[r10]
 1516 000a E7 A2 05                		mov.L	r2, 20[r10]
 1517 000d E7 A3 06                		mov.L	r3, 24[r10]
1230:../src/wolfcrypt/src/hash.c ****         int ret = 0;
 1518                             		.loc 1 1230 13
 1519 0010 F8 A6 00                		mov.L	#0, [r10]
1231:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1232:../src/wolfcrypt/src/hash.c ****         wc_Sha* sha;
1233:../src/wolfcrypt/src/hash.c ****     #else
1234:../src/wolfcrypt/src/hash.c ****         wc_Sha sha[1];
1235:../src/wolfcrypt/src/hash.c ****     #endif
1236:../src/wolfcrypt/src/hash.c ****         int devId = INVALID_DEVID;
 1520                             		.loc 1 1236 13
 1521 0013 F9 A6 01 FE             		mov.L	#-2, 4[r10]
1237:../src/wolfcrypt/src/hash.c **** 
1238:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1239:../src/wolfcrypt/src/hash.c ****         sha = (wc_Sha*)XMALLOC(sizeof(wc_Sha), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 1522                             		.loc 1 1239 24
 1523 0017 75 41 64                		mov.L	#0x64, r1
 1524 001a 05 00 00 00             		bsr	_wolfSSL_Malloc
 1525 001e E7 A1 02                		mov.L	r1, 8[r10]
1240:../src/wolfcrypt/src/hash.c ****         if (sha == NULL)
 1526                             		.loc 1 1240 12
 1527 0021 ED A5 02                		mov.L	8[r10], r5
 1528 0024 61 05                   		cmp	#0, r5
 1529 0026 1E                      		bne	.L223
1241:../src/wolfcrypt/src/hash.c ****             return MEMORY_E;
 1530                             		.loc 1 1241 20
 1531 0027 FB 56 83                		mov.L	#-125, r5
 1532 002a 2E 7B                   		bra	.L224
 1533                             	.L223:
1242:../src/wolfcrypt/src/hash.c ****     #endif
1243:../src/wolfcrypt/src/hash.c **** 
1244:../src/wolfcrypt/src/hash.c ****     #ifdef WOLF_CRYPTO_CB
1245:../src/wolfcrypt/src/hash.c ****         /* only use devId if its not an empty hash */
1246:../src/wolfcrypt/src/hash.c ****         if (data != NULL && len > 0)
1247:../src/wolfcrypt/src/hash.c ****             devId = wc_CryptoCb_GetDevIdAtIndex(0);
1248:../src/wolfcrypt/src/hash.c ****     #endif
1249:../src/wolfcrypt/src/hash.c **** 
1250:../src/wolfcrypt/src/hash.c ****         if ((ret = wc_InitSha_ex(sha, NULL, devId)) != 0) {
 1534                             		.loc 1 1250 20
 1535 002c ED A3 01                		mov.L	4[r10], r3
 1536 002f 66 02                   		mov.L	#0, r2
 1537 0031 ED A1 02                		mov.L	8[r10], r1
 1538 0034 05 00 00 00             		bsr	_wc_InitSha_ex
 1539 0038 E3 A1                   		mov.L	r1, [r10]
 1540                             		.loc 1 1250 12
 1541 003a EC A5                   		mov.L	[r10], r5
 1542 003c 61 05                   		cmp	#0, r5
 1543 003e 20 0E                   		beq	.L225
1251:../src/wolfcrypt/src/hash.c ****             WOLFSSL_MSG("InitSha failed");
 1544                             		.loc 1 1251 13
 1545 0040 FB 12 30 00 00 00       		mov.L	#.LC3, r1
 1546 0046 05 00 00 00             		bsr	_WOLFSSL_MSG
 1547 004a 2E 46                   		bra	.L226
 1548                             	.L225:
1252:../src/wolfcrypt/src/hash.c ****         }
1253:../src/wolfcrypt/src/hash.c ****         else {
1254:../src/wolfcrypt/src/hash.c ****             if ((ret = wc_ShaUpdate(sha, data, len)) != 0) {
 1549                             		.loc 1 1254 24
 1550 004c ED A3 05                		mov.L	20[r10], r3
 1551 004f ED A2 04                		mov.L	16[r10], r2
 1552 0052 ED A1 02                		mov.L	8[r10], r1
 1553 0055 05 00 00 00             		bsr	_wc_ShaUpdate
 1554 0059 E3 A1                   		mov.L	r1, [r10]
 1555                             		.loc 1 1254 16
 1556 005b EC A5                   		mov.L	[r10], r5
 1557 005d 61 05                   		cmp	#0, r5
 1558 005f 20 0E                   		beq	.L227
1255:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("ShaUpdate failed");
 1559                             		.loc 1 1255 17
 1560 0061 FB 12 3F 00 00 00       		mov.L	#.LC4, r1
 1561 0067 05 00 00 00             		bsr	_WOLFSSL_MSG
 1562 006b 2E 1E                   		bra	.L228
 1563                             	.L227:
1256:../src/wolfcrypt/src/hash.c ****             }
1257:../src/wolfcrypt/src/hash.c ****             else if ((ret = wc_ShaFinal(sha, hash)) != 0) {
 1564                             		.loc 1 1257 29
 1565 006d ED A2 06                		mov.L	24[r10], r2
 1566 0070 ED A1 02                		mov.L	8[r10], r1
 1567 0073 05 00 00 00             		bsr	_wc_ShaFinal
 1568 0077 E3 A1                   		mov.L	r1, [r10]
 1569                             		.loc 1 1257 21
 1570 0079 EC A5                   		mov.L	[r10], r5
 1571 007b 61 05                   		cmp	#0, r5
 1572 007d 20 0C                   		beq	.L228
1258:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("ShaFinal failed");
 1573                             		.loc 1 1258 17
 1574 007f FB 12 50 00 00 00       		mov.L	#.LC5, r1
 1575 0085 05 00 00 00             		bsr	_WOLFSSL_MSG
 1576                             	.L228:
1259:../src/wolfcrypt/src/hash.c ****             }
1260:../src/wolfcrypt/src/hash.c ****             wc_ShaFree(sha);
 1577                             		.loc 1 1260 13
 1578 0089 ED A1 02                		mov.L	8[r10], r1
 1579 008c 05 00 00 00             		bsr	_wc_ShaFree
 1580                             	.L226:
 1581                             	.LBB3:
1261:../src/wolfcrypt/src/hash.c ****         }
1262:../src/wolfcrypt/src/hash.c **** 
1263:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1264:../src/wolfcrypt/src/hash.c ****         XFREE(sha, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 1582                             		.loc 1 1264 9
 1583 0090 ED A5 02                		mov.L	8[r10], r5
 1584 0093 E7 A5 03                		mov.L	r5, 12[r10]
 1585 0096 ED A5 03                		mov.L	12[r10], r5
 1586 0099 61 05                   		cmp	#0, r5
 1587 009b 10                      		beq	.L229
 1588                             		.loc 1 1264 9 is_stmt 0 discriminator 1
 1589 009c ED A1 03                		mov.L	12[r10], r1
 1590 009f 05 00 00 00             		bsr	_wolfSSL_Free
 1591                             	.L229:
 1592                             	.LBE3:
1265:../src/wolfcrypt/src/hash.c ****     #endif
1266:../src/wolfcrypt/src/hash.c **** 
1267:../src/wolfcrypt/src/hash.c ****         return ret;
 1593                             		.loc 1 1267 16 is_stmt 1
 1594 00a3 EC A5                   		mov.L	[r10], r5
 1595                             	.L224:
1268:../src/wolfcrypt/src/hash.c ****     }
 1596                             		.loc 1 1268 5
 1597 00a5 EF 51                   		mov.L	r5, r1
 1598 00a7 3F AA 08                		rtsd	#32, r10-r10
 1599                             	.LFE55:
 1601                             		.section C,"a",@progbits
 1602                             		.p2align 2
 1603                             	.LC6:
 1604 0060 49 6E 69 74 53 68 61 32 		.string	"InitSha256 failed"
 1604      35 36 20 66 61 69 6C 65 
 1604      64 00 
 1605                             	.LC7:
 1606 0072 53 68 61 32 35 36 55 70 		.string	"Sha256Update failed"
 1606      64 61 74 65 20 66 61 69 
 1606      6C 65 64 00 
 1607                             	.LC8:
 1608 0086 53 68 61 32 35 36 46 69 		.string	"Sha256Final failed"
 1608      6E 61 6C 20 66 61 69 6C 
 1608      65 64 00 
 1609                             		.section	.text.wc_Sha256Hash,"ax",@progbits
 1610                             		.global	_wc_Sha256Hash
 1612                             	_wc_Sha256Hash:
 1613                             	.LFB56:
1269:../src/wolfcrypt/src/hash.c **** #endif /* !NO_SHA */
1270:../src/wolfcrypt/src/hash.c **** 
1271:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA224)
1272:../src/wolfcrypt/src/hash.c ****     int wc_Sha224Hash(const byte* data, word32 len, byte* hash)
1273:../src/wolfcrypt/src/hash.c ****     {
1274:../src/wolfcrypt/src/hash.c ****         int ret = 0;
1275:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1276:../src/wolfcrypt/src/hash.c ****         wc_Sha224* sha224;
1277:../src/wolfcrypt/src/hash.c ****     #else
1278:../src/wolfcrypt/src/hash.c ****         wc_Sha224 sha224[1];
1279:../src/wolfcrypt/src/hash.c ****     #endif
1280:../src/wolfcrypt/src/hash.c **** 
1281:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1282:../src/wolfcrypt/src/hash.c ****         sha224 = (wc_Sha224*)XMALLOC(sizeof(wc_Sha224), NULL,
1283:../src/wolfcrypt/src/hash.c ****             DYNAMIC_TYPE_TMP_BUFFER);
1284:../src/wolfcrypt/src/hash.c ****         if (sha224 == NULL)
1285:../src/wolfcrypt/src/hash.c ****             return MEMORY_E;
1286:../src/wolfcrypt/src/hash.c ****     #endif
1287:../src/wolfcrypt/src/hash.c **** 
1288:../src/wolfcrypt/src/hash.c ****         if ((ret = wc_InitSha224(sha224)) != 0) {
1289:../src/wolfcrypt/src/hash.c ****             WOLFSSL_MSG("InitSha224 failed");
1290:../src/wolfcrypt/src/hash.c ****         }
1291:../src/wolfcrypt/src/hash.c ****         else {
1292:../src/wolfcrypt/src/hash.c ****             if ((ret = wc_Sha224Update(sha224, data, len)) != 0) {
1293:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("Sha224Update failed");
1294:../src/wolfcrypt/src/hash.c ****             }
1295:../src/wolfcrypt/src/hash.c ****             else if ((ret = wc_Sha224Final(sha224, hash)) != 0) {
1296:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("Sha224Final failed");
1297:../src/wolfcrypt/src/hash.c ****             }
1298:../src/wolfcrypt/src/hash.c ****             wc_Sha224Free(sha224);
1299:../src/wolfcrypt/src/hash.c ****         }
1300:../src/wolfcrypt/src/hash.c **** 
1301:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1302:../src/wolfcrypt/src/hash.c ****         XFREE(sha224, NULL, DYNAMIC_TYPE_TMP_BUFFER);
1303:../src/wolfcrypt/src/hash.c ****     #endif
1304:../src/wolfcrypt/src/hash.c **** 
1305:../src/wolfcrypt/src/hash.c ****     return ret;
1306:../src/wolfcrypt/src/hash.c **** }
1307:../src/wolfcrypt/src/hash.c **** #endif /* WOLFSSL_SHA224 */
1308:../src/wolfcrypt/src/hash.c **** 
1309:../src/wolfcrypt/src/hash.c **** #if !defined(NO_SHA256)
1310:../src/wolfcrypt/src/hash.c ****     int wc_Sha256Hash(const byte* data, word32 len, byte* hash)
1311:../src/wolfcrypt/src/hash.c ****     {
 1614                             		.loc 1 1311 5
 1615 0000 7E AA                   		push.l	r10
 1616                             	.LCFI27:
 1617 0002 71 0A E4                		add	#-28, r0, r10
 1618                             	.LCFI28:
 1619 0005 EF A0                   		mov.L	r10, r0
 1620 0007 E7 A1 04                		mov.L	r1, 16[r10]
 1621 000a E7 A2 05                		mov.L	r2, 20[r10]
 1622 000d E7 A3 06                		mov.L	r3, 24[r10]
1312:../src/wolfcrypt/src/hash.c ****         int ret = 0;
 1623                             		.loc 1 1312 13
 1624 0010 F8 A6 00                		mov.L	#0, [r10]
1313:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1314:../src/wolfcrypt/src/hash.c ****         wc_Sha256* sha256;
1315:../src/wolfcrypt/src/hash.c ****     #else
1316:../src/wolfcrypt/src/hash.c ****         wc_Sha256 sha256[1];
1317:../src/wolfcrypt/src/hash.c ****     #endif
1318:../src/wolfcrypt/src/hash.c ****         int devId = INVALID_DEVID;
 1625                             		.loc 1 1318 13
 1626 0013 F9 A6 01 FE             		mov.L	#-2, 4[r10]
1319:../src/wolfcrypt/src/hash.c **** 
1320:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1321:../src/wolfcrypt/src/hash.c ****         sha256 = (wc_Sha256*)XMALLOC(sizeof(wc_Sha256), NULL,
 1627                             		.loc 1 1321 30
 1628 0017 75 41 70                		mov.L	#0x70, r1
 1629 001a 05 00 00 00             		bsr	_wolfSSL_Malloc
 1630 001e E7 A1 02                		mov.L	r1, 8[r10]
1322:../src/wolfcrypt/src/hash.c ****             DYNAMIC_TYPE_TMP_BUFFER);
1323:../src/wolfcrypt/src/hash.c ****         if (sha256 == NULL)
 1631                             		.loc 1 1323 12
 1632 0021 ED A5 02                		mov.L	8[r10], r5
 1633 0024 61 05                   		cmp	#0, r5
 1634 0026 1E                      		bne	.L231
1324:../src/wolfcrypt/src/hash.c ****             return MEMORY_E;
 1635                             		.loc 1 1324 20
 1636 0027 FB 56 83                		mov.L	#-125, r5
 1637 002a 2E 7B                   		bra	.L232
 1638                             	.L231:
1325:../src/wolfcrypt/src/hash.c ****     #endif
1326:../src/wolfcrypt/src/hash.c **** 
1327:../src/wolfcrypt/src/hash.c ****     #ifdef WOLF_CRYPTO_CB
1328:../src/wolfcrypt/src/hash.c ****         /* only use devId if its not an empty hash */
1329:../src/wolfcrypt/src/hash.c ****         if (data != NULL && len > 0)
1330:../src/wolfcrypt/src/hash.c ****             devId = wc_CryptoCb_GetDevIdAtIndex(0);
1331:../src/wolfcrypt/src/hash.c ****     #endif
1332:../src/wolfcrypt/src/hash.c **** 
1333:../src/wolfcrypt/src/hash.c ****         if ((ret = wc_InitSha256_ex(sha256, NULL, devId)) != 0) {
 1639                             		.loc 1 1333 20
 1640 002c ED A3 01                		mov.L	4[r10], r3
 1641 002f 66 02                   		mov.L	#0, r2
 1642 0031 ED A1 02                		mov.L	8[r10], r1
 1643 0034 05 00 00 00             		bsr	_wc_InitSha256_ex
 1644 0038 E3 A1                   		mov.L	r1, [r10]
 1645                             		.loc 1 1333 12
 1646 003a EC A5                   		mov.L	[r10], r5
 1647 003c 61 05                   		cmp	#0, r5
 1648 003e 20 0E                   		beq	.L233
1334:../src/wolfcrypt/src/hash.c ****             WOLFSSL_MSG("InitSha256 failed");
 1649                             		.loc 1 1334 13
 1650 0040 FB 12 60 00 00 00       		mov.L	#.LC6, r1
 1651 0046 05 00 00 00             		bsr	_WOLFSSL_MSG
 1652 004a 2E 46                   		bra	.L234
 1653                             	.L233:
1335:../src/wolfcrypt/src/hash.c ****         }
1336:../src/wolfcrypt/src/hash.c ****         else {
1337:../src/wolfcrypt/src/hash.c ****             if ((ret = wc_Sha256Update(sha256, data, len)) != 0) {
 1654                             		.loc 1 1337 24
 1655 004c ED A3 05                		mov.L	20[r10], r3
 1656 004f ED A2 04                		mov.L	16[r10], r2
 1657 0052 ED A1 02                		mov.L	8[r10], r1
 1658 0055 05 00 00 00             		bsr	_wc_Sha256Update
 1659 0059 E3 A1                   		mov.L	r1, [r10]
 1660                             		.loc 1 1337 16
 1661 005b EC A5                   		mov.L	[r10], r5
 1662 005d 61 05                   		cmp	#0, r5
 1663 005f 20 0E                   		beq	.L235
1338:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("Sha256Update failed");
 1664                             		.loc 1 1338 17
 1665 0061 FB 12 72 00 00 00       		mov.L	#.LC7, r1
 1666 0067 05 00 00 00             		bsr	_WOLFSSL_MSG
 1667 006b 2E 1E                   		bra	.L236
 1668                             	.L235:
1339:../src/wolfcrypt/src/hash.c ****             }
1340:../src/wolfcrypt/src/hash.c ****             else if ((ret = wc_Sha256Final(sha256, hash)) != 0) {
 1669                             		.loc 1 1340 29
 1670 006d ED A2 06                		mov.L	24[r10], r2
 1671 0070 ED A1 02                		mov.L	8[r10], r1
 1672 0073 05 00 00 00             		bsr	_wc_Sha256Final
 1673 0077 E3 A1                   		mov.L	r1, [r10]
 1674                             		.loc 1 1340 21
 1675 0079 EC A5                   		mov.L	[r10], r5
 1676 007b 61 05                   		cmp	#0, r5
 1677 007d 20 0C                   		beq	.L236
1341:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("Sha256Final failed");
 1678                             		.loc 1 1341 17
 1679 007f FB 12 86 00 00 00       		mov.L	#.LC8, r1
 1680 0085 05 00 00 00             		bsr	_WOLFSSL_MSG
 1681                             	.L236:
1342:../src/wolfcrypt/src/hash.c ****             }
1343:../src/wolfcrypt/src/hash.c ****             wc_Sha256Free(sha256);
 1682                             		.loc 1 1343 13
 1683 0089 ED A1 02                		mov.L	8[r10], r1
 1684 008c 05 00 00 00             		bsr	_wc_Sha256Free
 1685                             	.L234:
 1686                             	.LBB4:
1344:../src/wolfcrypt/src/hash.c ****         }
1345:../src/wolfcrypt/src/hash.c **** 
1346:../src/wolfcrypt/src/hash.c **** 
1347:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1348:../src/wolfcrypt/src/hash.c ****         XFREE(sha256, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 1687                             		.loc 1 1348 9
 1688 0090 ED A5 02                		mov.L	8[r10], r5
 1689 0093 E7 A5 03                		mov.L	r5, 12[r10]
 1690 0096 ED A5 03                		mov.L	12[r10], r5
 1691 0099 61 05                   		cmp	#0, r5
 1692 009b 10                      		beq	.L237
 1693                             		.loc 1 1348 9 is_stmt 0 discriminator 1
 1694 009c ED A1 03                		mov.L	12[r10], r1
 1695 009f 05 00 00 00             		bsr	_wolfSSL_Free
 1696                             	.L237:
 1697                             	.LBE4:
1349:../src/wolfcrypt/src/hash.c ****     #endif
1350:../src/wolfcrypt/src/hash.c **** 
1351:../src/wolfcrypt/src/hash.c ****         return ret;
 1698                             		.loc 1 1351 16 is_stmt 1
 1699 00a3 EC A5                   		mov.L	[r10], r5
 1700                             	.L232:
1352:../src/wolfcrypt/src/hash.c ****     }
 1701                             		.loc 1 1352 5
 1702 00a5 EF 51                   		mov.L	r5, r1
 1703 00a7 3F AA 08                		rtsd	#32, r10-r10
 1704                             	.LFE56:
 1706                             		.section C,"a",@progbits
 1707 0099 00 00 00                		.p2align 2
 1708                             	.LC9:
 1709 009c 49 6E 69 74 53 68 61 35 		.string	"InitSha512 failed"
 1709      31 32 20 66 61 69 6C 65 
 1709      64 00 
 1710                             	.LC10:
 1711 00ae 53 68 61 35 31 32 55 70 		.string	"Sha512Update failed"
 1711      64 61 74 65 20 66 61 69 
 1711      6C 65 64 00 
 1712                             	.LC11:
 1713 00c2 53 68 61 35 31 32 46 69 		.string	"Sha512Final failed"
 1713      6E 61 6C 20 66 61 69 6C 
 1713      65 64 00 
 1714                             		.section	.text.wc_Sha512Hash,"ax",@progbits
 1715                             		.global	_wc_Sha512Hash
 1717                             	_wc_Sha512Hash:
 1718                             	.LFB57:
1353:../src/wolfcrypt/src/hash.c **** #endif /* !NO_SHA256 */
1354:../src/wolfcrypt/src/hash.c **** 
1355:../src/wolfcrypt/src/hash.c **** #endif /* !defined(WOLFSSL_TI_HASH) */
1356:../src/wolfcrypt/src/hash.c **** 
1357:../src/wolfcrypt/src/hash.c **** 
1358:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA512)
1359:../src/wolfcrypt/src/hash.c ****     int wc_Sha512Hash(const byte* data, word32 len, byte* hash)
1360:../src/wolfcrypt/src/hash.c ****     {
 1719                             		.loc 1 1360 5
 1720 0000 7E AA                   		push.l	r10
 1721                             	.LCFI29:
 1722 0002 71 0A E8                		add	#-24, r0, r10
 1723                             	.LCFI30:
 1724 0005 EF A0                   		mov.L	r10, r0
 1725 0007 E7 A1 03                		mov.L	r1, 12[r10]
 1726 000a E7 A2 04                		mov.L	r2, 16[r10]
 1727 000d E7 A3 05                		mov.L	r3, 20[r10]
1361:../src/wolfcrypt/src/hash.c ****         int ret = 0;
 1728                             		.loc 1 1361 13
 1729 0010 F8 A6 00                		mov.L	#0, [r10]
1362:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1363:../src/wolfcrypt/src/hash.c ****         wc_Sha512* sha512;
1364:../src/wolfcrypt/src/hash.c ****     #else
1365:../src/wolfcrypt/src/hash.c ****         wc_Sha512 sha512[1];
1366:../src/wolfcrypt/src/hash.c ****     #endif
1367:../src/wolfcrypt/src/hash.c **** 
1368:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1369:../src/wolfcrypt/src/hash.c ****         sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 1730                             		.loc 1 1369 30
 1731 0013 75 41 D8                		mov.L	#0xd8, r1
 1732 0016 05 00 00 00             		bsr	_wolfSSL_Malloc
 1733 001a E7 A1 01                		mov.L	r1, 4[r10]
1370:../src/wolfcrypt/src/hash.c ****             DYNAMIC_TYPE_TMP_BUFFER);
1371:../src/wolfcrypt/src/hash.c ****         if (sha512 == NULL)
 1734                             		.loc 1 1371 12
 1735 001d ED A5 01                		mov.L	4[r10], r5
 1736 0020 61 05                   		cmp	#0, r5
 1737 0022 1E                      		bne	.L239
1372:../src/wolfcrypt/src/hash.c ****             return MEMORY_E;
 1738                             		.loc 1 1372 20
 1739 0023 FB 56 83                		mov.L	#-125, r5
 1740 0026 2E 76                   		bra	.L240
 1741                             	.L239:
1373:../src/wolfcrypt/src/hash.c ****     #endif
1374:../src/wolfcrypt/src/hash.c **** 
1375:../src/wolfcrypt/src/hash.c ****         if ((ret = wc_InitSha512(sha512)) != 0) {
 1742                             		.loc 1 1375 20
 1743 0028 ED A1 01                		mov.L	4[r10], r1
 1744 002b 05 00 00 00             		bsr	_wc_InitSha512
 1745 002f E3 A1                   		mov.L	r1, [r10]
 1746                             		.loc 1 1375 12
 1747 0031 EC A5                   		mov.L	[r10], r5
 1748 0033 61 05                   		cmp	#0, r5
 1749 0035 20 0E                   		beq	.L241
1376:../src/wolfcrypt/src/hash.c ****             WOLFSSL_MSG("InitSha512 failed");
 1750                             		.loc 1 1376 13
 1751 0037 FB 12 9C 00 00 00       		mov.L	#.LC9, r1
 1752 003d 05 00 00 00             		bsr	_WOLFSSL_MSG
 1753 0041 2E 46                   		bra	.L242
 1754                             	.L241:
1377:../src/wolfcrypt/src/hash.c ****         }
1378:../src/wolfcrypt/src/hash.c ****         else {
1379:../src/wolfcrypt/src/hash.c ****             if ((ret = wc_Sha512Update(sha512, data, len)) != 0) {
 1755                             		.loc 1 1379 24
 1756 0043 ED A3 04                		mov.L	16[r10], r3
 1757 0046 ED A2 03                		mov.L	12[r10], r2
 1758 0049 ED A1 01                		mov.L	4[r10], r1
 1759 004c 05 00 00 00             		bsr	_wc_Sha512Update
 1760 0050 E3 A1                   		mov.L	r1, [r10]
 1761                             		.loc 1 1379 16
 1762 0052 EC A5                   		mov.L	[r10], r5
 1763 0054 61 05                   		cmp	#0, r5
 1764 0056 20 0E                   		beq	.L243
1380:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("Sha512Update failed");
 1765                             		.loc 1 1380 17
 1766 0058 FB 12 AE 00 00 00       		mov.L	#.LC10, r1
 1767 005e 05 00 00 00             		bsr	_WOLFSSL_MSG
 1768 0062 2E 1E                   		bra	.L244
 1769                             	.L243:
1381:../src/wolfcrypt/src/hash.c ****             }
1382:../src/wolfcrypt/src/hash.c ****             else if ((ret = wc_Sha512Final(sha512, hash)) != 0) {
 1770                             		.loc 1 1382 29
 1771 0064 ED A2 05                		mov.L	20[r10], r2
 1772 0067 ED A1 01                		mov.L	4[r10], r1
 1773 006a 05 00 00 00             		bsr	_wc_Sha512Final
 1774 006e E3 A1                   		mov.L	r1, [r10]
 1775                             		.loc 1 1382 21
 1776 0070 EC A5                   		mov.L	[r10], r5
 1777 0072 61 05                   		cmp	#0, r5
 1778 0074 20 0C                   		beq	.L244
1383:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("Sha512Final failed");
 1779                             		.loc 1 1383 17
 1780 0076 FB 12 C2 00 00 00       		mov.L	#.LC11, r1
 1781 007c 05 00 00 00             		bsr	_WOLFSSL_MSG
 1782                             	.L244:
1384:../src/wolfcrypt/src/hash.c ****             }
1385:../src/wolfcrypt/src/hash.c ****             wc_Sha512Free(sha512);
 1783                             		.loc 1 1385 13
 1784 0080 ED A1 01                		mov.L	4[r10], r1
 1785 0083 05 00 00 00             		bsr	_wc_Sha512Free
 1786                             	.L242:
 1787                             	.LBB5:
1386:../src/wolfcrypt/src/hash.c ****         }
1387:../src/wolfcrypt/src/hash.c **** 
1388:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1389:../src/wolfcrypt/src/hash.c ****         XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 1788                             		.loc 1 1389 9
 1789 0087 ED A5 01                		mov.L	4[r10], r5
 1790 008a E7 A5 02                		mov.L	r5, 8[r10]
 1791 008d ED A5 02                		mov.L	8[r10], r5
 1792 0090 61 05                   		cmp	#0, r5
 1793 0092 10                      		beq	.L245
 1794                             		.loc 1 1389 9 is_stmt 0 discriminator 1
 1795 0093 ED A1 02                		mov.L	8[r10], r1
 1796 0096 05 00 00 00             		bsr	_wolfSSL_Free
 1797                             	.L245:
 1798                             	.LBE5:
1390:../src/wolfcrypt/src/hash.c ****     #endif
1391:../src/wolfcrypt/src/hash.c **** 
1392:../src/wolfcrypt/src/hash.c ****         return ret;
 1799                             		.loc 1 1392 16 is_stmt 1
 1800 009a EC A5                   		mov.L	[r10], r5
 1801                             	.L240:
1393:../src/wolfcrypt/src/hash.c ****     }
 1802                             		.loc 1 1393 5
 1803 009c EF 51                   		mov.L	r5, r1
 1804 009e 3F AA 07                		rtsd	#28, r10-r10
 1805                             	.LFE57:
 1807                             		.section C,"a",@progbits
 1808 00d5 00 00 00                		.p2align 2
 1809                             	.LC12:
 1810 00d8 77 63 5F 49 6E 69 74 53 		.string	"wc_InitSha512_224 failed"
 1810      68 61 35 31 32 5F 32 32 
 1810      34 20 66 61 69 6C 65 64 
 1810      00 
 1811                             	.LC13:
 1812 00f1 77 63 5F 53 68 61 35 31 		.string	"wc_Sha512_224_Update failed"
 1812      32 5F 32 32 34 5F 55 70 
 1812      64 61 74 65 20 66 61 69 
 1812      6C 65 64 00 
 1813                             	.LC14:
 1814 010d 77 63 5F 53 68 61 35 31 		.string	"wc_Sha512_224_Final failed"
 1814      32 5F 32 32 34 5F 46 69 
 1814      6E 61 6C 20 66 61 69 6C 
 1814      65 64 00 
 1815                             		.section	.text.wc_Sha512_224Hash,"ax",@progbits
 1816                             		.global	_wc_Sha512_224Hash
 1818                             	_wc_Sha512_224Hash:
 1819                             	.LFB58:
1394:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
1395:../src/wolfcrypt/src/hash.c **** #ifndef WOLFSSL_NOSHA512_224
1396:../src/wolfcrypt/src/hash.c ****     int wc_Sha512_224Hash(const byte* data, word32 len, byte* hash)
1397:../src/wolfcrypt/src/hash.c ****     {
 1820                             		.loc 1 1397 5
 1821 0000 7E AA                   		push.l	r10
 1822                             	.LCFI31:
 1823 0002 71 0A E8                		add	#-24, r0, r10
 1824                             	.LCFI32:
 1825 0005 EF A0                   		mov.L	r10, r0
 1826 0007 E7 A1 03                		mov.L	r1, 12[r10]
 1827 000a E7 A2 04                		mov.L	r2, 16[r10]
 1828 000d E7 A3 05                		mov.L	r3, 20[r10]
1398:../src/wolfcrypt/src/hash.c ****         int ret = 0;
 1829                             		.loc 1 1398 13
 1830 0010 F8 A6 00                		mov.L	#0, [r10]
1399:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1400:../src/wolfcrypt/src/hash.c ****         wc_Sha512* sha512;
1401:../src/wolfcrypt/src/hash.c ****     #else
1402:../src/wolfcrypt/src/hash.c ****         wc_Sha512 sha512[1];
1403:../src/wolfcrypt/src/hash.c ****     #endif
1404:../src/wolfcrypt/src/hash.c **** 
1405:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1406:../src/wolfcrypt/src/hash.c ****         sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 1831                             		.loc 1 1406 30
 1832 0013 75 41 D8                		mov.L	#0xd8, r1
 1833 0016 05 00 00 00             		bsr	_wolfSSL_Malloc
 1834 001a E7 A1 01                		mov.L	r1, 4[r10]
1407:../src/wolfcrypt/src/hash.c ****             DYNAMIC_TYPE_TMP_BUFFER);
1408:../src/wolfcrypt/src/hash.c ****         if (sha512 == NULL)
 1835                             		.loc 1 1408 12
 1836 001d ED A5 01                		mov.L	4[r10], r5
 1837 0020 61 05                   		cmp	#0, r5
 1838 0022 1E                      		bne	.L247
1409:../src/wolfcrypt/src/hash.c ****             return MEMORY_E;
 1839                             		.loc 1 1409 20
 1840 0023 FB 56 83                		mov.L	#-125, r5
 1841 0026 2E 76                   		bra	.L248
 1842                             	.L247:
1410:../src/wolfcrypt/src/hash.c ****     #endif
1411:../src/wolfcrypt/src/hash.c **** 
1412:../src/wolfcrypt/src/hash.c ****         if ((ret = wc_InitSha512_224(sha512)) != 0) {
 1843                             		.loc 1 1412 20
 1844 0028 ED A1 01                		mov.L	4[r10], r1
 1845 002b 05 00 00 00             		bsr	_wc_InitSha512_224
 1846 002f E3 A1                   		mov.L	r1, [r10]
 1847                             		.loc 1 1412 12
 1848 0031 EC A5                   		mov.L	[r10], r5
 1849 0033 61 05                   		cmp	#0, r5
 1850 0035 20 0E                   		beq	.L249
1413:../src/wolfcrypt/src/hash.c ****             WOLFSSL_MSG("wc_InitSha512_224 failed");
 1851                             		.loc 1 1413 13
 1852 0037 FB 12 D8 00 00 00       		mov.L	#.LC12, r1
 1853 003d 05 00 00 00             		bsr	_WOLFSSL_MSG
 1854 0041 2E 46                   		bra	.L250
 1855                             	.L249:
1414:../src/wolfcrypt/src/hash.c ****         }
1415:../src/wolfcrypt/src/hash.c ****         else {
1416:../src/wolfcrypt/src/hash.c ****             if ((ret = wc_Sha512_224Update(sha512, data, len)) != 0) {
 1856                             		.loc 1 1416 24
 1857 0043 ED A3 04                		mov.L	16[r10], r3
 1858 0046 ED A2 03                		mov.L	12[r10], r2
 1859 0049 ED A1 01                		mov.L	4[r10], r1
 1860 004c 05 00 00 00             		bsr	_wc_Sha512_224Update
 1861 0050 E3 A1                   		mov.L	r1, [r10]
 1862                             		.loc 1 1416 16
 1863 0052 EC A5                   		mov.L	[r10], r5
 1864 0054 61 05                   		cmp	#0, r5
 1865 0056 20 0E                   		beq	.L251
1417:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("wc_Sha512_224_Update failed");
 1866                             		.loc 1 1417 17
 1867 0058 FB 12 F1 00 00 00       		mov.L	#.LC13, r1
 1868 005e 05 00 00 00             		bsr	_WOLFSSL_MSG
 1869 0062 2E 1E                   		bra	.L252
 1870                             	.L251:
1418:../src/wolfcrypt/src/hash.c ****             }
1419:../src/wolfcrypt/src/hash.c ****             else if ((ret = wc_Sha512_224Final(sha512, hash)) != 0) {
 1871                             		.loc 1 1419 29
 1872 0064 ED A2 05                		mov.L	20[r10], r2
 1873 0067 ED A1 01                		mov.L	4[r10], r1
 1874 006a 05 00 00 00             		bsr	_wc_Sha512_224Final
 1875 006e E3 A1                   		mov.L	r1, [r10]
 1876                             		.loc 1 1419 21
 1877 0070 EC A5                   		mov.L	[r10], r5
 1878 0072 61 05                   		cmp	#0, r5
 1879 0074 20 0C                   		beq	.L252
1420:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("wc_Sha512_224_Final failed");
 1880                             		.loc 1 1420 17
 1881 0076 FB 12 0D 01 00 00       		mov.L	#.LC14, r1
 1882 007c 05 00 00 00             		bsr	_WOLFSSL_MSG
 1883                             	.L252:
1421:../src/wolfcrypt/src/hash.c ****             }
1422:../src/wolfcrypt/src/hash.c ****             wc_Sha512_224Free(sha512);
 1884                             		.loc 1 1422 13
 1885 0080 ED A1 01                		mov.L	4[r10], r1
 1886 0083 05 00 00 00             		bsr	_wc_Sha512_224Free
 1887                             	.L250:
 1888                             	.LBB6:
1423:../src/wolfcrypt/src/hash.c ****         }
1424:../src/wolfcrypt/src/hash.c **** 
1425:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1426:../src/wolfcrypt/src/hash.c ****         XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 1889                             		.loc 1 1426 9
 1890 0087 ED A5 01                		mov.L	4[r10], r5
 1891 008a E7 A5 02                		mov.L	r5, 8[r10]
 1892 008d ED A5 02                		mov.L	8[r10], r5
 1893 0090 61 05                   		cmp	#0, r5
 1894 0092 10                      		beq	.L253
 1895                             		.loc 1 1426 9 is_stmt 0 discriminator 1
 1896 0093 ED A1 02                		mov.L	8[r10], r1
 1897 0096 05 00 00 00             		bsr	_wolfSSL_Free
 1898                             	.L253:
 1899                             	.LBE6:
1427:../src/wolfcrypt/src/hash.c ****     #endif
1428:../src/wolfcrypt/src/hash.c **** 
1429:../src/wolfcrypt/src/hash.c ****         return ret;
 1900                             		.loc 1 1429 16 is_stmt 1
 1901 009a EC A5                   		mov.L	[r10], r5
 1902                             	.L248:
1430:../src/wolfcrypt/src/hash.c ****     }
 1903                             		.loc 1 1430 5
 1904 009c EF 51                   		mov.L	r5, r1
 1905 009e 3F AA 07                		rtsd	#28, r10-r10
 1906                             	.LFE58:
 1908                             		.section C,"a",@progbits
 1909                             		.p2align 2
 1910                             	.LC15:
 1911 0128 77 63 5F 49 6E 69 74 53 		.string	"wc_InitSha512_256 failed"
 1911      68 61 35 31 32 5F 32 35 
 1911      36 20 66 61 69 6C 65 64 
 1911      00 
 1912                             	.LC16:
 1913 0141 77 63 5F 53 68 61 35 31 		.string	"wc_Sha512_256_Update failed"
 1913      32 5F 32 35 36 5F 55 70 
 1913      64 61 74 65 20 66 61 69 
 1913      6C 65 64 00 
 1914                             	.LC17:
 1915 015d 77 63 5F 53 68 61 35 31 		.string	"wc_Sha512_256_Final failed"
 1915      32 5F 32 35 36 5F 46 69 
 1915      6E 61 6C 20 66 61 69 6C 
 1915      65 64 00 
 1916                             		.section	.text.wc_Sha512_256Hash,"ax",@progbits
 1917                             		.global	_wc_Sha512_256Hash
 1919                             	_wc_Sha512_256Hash:
 1920                             	.LFB59:
1431:../src/wolfcrypt/src/hash.c **** #endif /* !WOLFSSL_NOSHA512_224 */
1432:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
1433:../src/wolfcrypt/src/hash.c **** 
1434:../src/wolfcrypt/src/hash.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
1435:../src/wolfcrypt/src/hash.c **** #ifndef WOLFSSL_NOSHA512_256
1436:../src/wolfcrypt/src/hash.c ****     int wc_Sha512_256Hash(const byte* data, word32 len, byte* hash)
1437:../src/wolfcrypt/src/hash.c ****     {
 1921                             		.loc 1 1437 5
 1922 0000 7E AA                   		push.l	r10
 1923                             	.LCFI33:
 1924 0002 71 0A E8                		add	#-24, r0, r10
 1925                             	.LCFI34:
 1926 0005 EF A0                   		mov.L	r10, r0
 1927 0007 E7 A1 03                		mov.L	r1, 12[r10]
 1928 000a E7 A2 04                		mov.L	r2, 16[r10]
 1929 000d E7 A3 05                		mov.L	r3, 20[r10]
1438:../src/wolfcrypt/src/hash.c ****         int ret = 0;
 1930                             		.loc 1 1438 13
 1931 0010 F8 A6 00                		mov.L	#0, [r10]
1439:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1440:../src/wolfcrypt/src/hash.c ****         wc_Sha512* sha512;
1441:../src/wolfcrypt/src/hash.c ****     #else
1442:../src/wolfcrypt/src/hash.c ****         wc_Sha512 sha512[1];
1443:../src/wolfcrypt/src/hash.c ****     #endif
1444:../src/wolfcrypt/src/hash.c **** 
1445:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1446:../src/wolfcrypt/src/hash.c ****         sha512 = (wc_Sha512*)XMALLOC(sizeof(wc_Sha512), NULL,
 1932                             		.loc 1 1446 30
 1933 0013 75 41 D8                		mov.L	#0xd8, r1
 1934 0016 05 00 00 00             		bsr	_wolfSSL_Malloc
 1935 001a E7 A1 01                		mov.L	r1, 4[r10]
1447:../src/wolfcrypt/src/hash.c ****             DYNAMIC_TYPE_TMP_BUFFER);
1448:../src/wolfcrypt/src/hash.c ****         if (sha512 == NULL)
 1936                             		.loc 1 1448 12
 1937 001d ED A5 01                		mov.L	4[r10], r5
 1938 0020 61 05                   		cmp	#0, r5
 1939 0022 1E                      		bne	.L255
1449:../src/wolfcrypt/src/hash.c ****             return MEMORY_E;
 1940                             		.loc 1 1449 20
 1941 0023 FB 56 83                		mov.L	#-125, r5
 1942 0026 2E 76                   		bra	.L256
 1943                             	.L255:
1450:../src/wolfcrypt/src/hash.c ****     #endif
1451:../src/wolfcrypt/src/hash.c **** 
1452:../src/wolfcrypt/src/hash.c ****         if ((ret = wc_InitSha512_256(sha512)) != 0) {
 1944                             		.loc 1 1452 20
 1945 0028 ED A1 01                		mov.L	4[r10], r1
 1946 002b 05 00 00 00             		bsr	_wc_InitSha512_256
 1947 002f E3 A1                   		mov.L	r1, [r10]
 1948                             		.loc 1 1452 12
 1949 0031 EC A5                   		mov.L	[r10], r5
 1950 0033 61 05                   		cmp	#0, r5
 1951 0035 20 0E                   		beq	.L257
1453:../src/wolfcrypt/src/hash.c ****             WOLFSSL_MSG("wc_InitSha512_256 failed");
 1952                             		.loc 1 1453 13
 1953 0037 FB 12 28 01 00 00       		mov.L	#.LC15, r1
 1954 003d 05 00 00 00             		bsr	_WOLFSSL_MSG
 1955 0041 2E 46                   		bra	.L258
 1956                             	.L257:
1454:../src/wolfcrypt/src/hash.c ****         }
1455:../src/wolfcrypt/src/hash.c ****         else {
1456:../src/wolfcrypt/src/hash.c ****             if ((ret = wc_Sha512_256Update(sha512, data, len)) != 0) {
 1957                             		.loc 1 1456 24
 1958 0043 ED A3 04                		mov.L	16[r10], r3
 1959 0046 ED A2 03                		mov.L	12[r10], r2
 1960 0049 ED A1 01                		mov.L	4[r10], r1
 1961 004c 05 00 00 00             		bsr	_wc_Sha512_256Update
 1962 0050 E3 A1                   		mov.L	r1, [r10]
 1963                             		.loc 1 1456 16
 1964 0052 EC A5                   		mov.L	[r10], r5
 1965 0054 61 05                   		cmp	#0, r5
 1966 0056 20 0E                   		beq	.L259
1457:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("wc_Sha512_256_Update failed");
 1967                             		.loc 1 1457 17
 1968 0058 FB 12 41 01 00 00       		mov.L	#.LC16, r1
 1969 005e 05 00 00 00             		bsr	_WOLFSSL_MSG
 1970 0062 2E 1E                   		bra	.L260
 1971                             	.L259:
1458:../src/wolfcrypt/src/hash.c ****             }
1459:../src/wolfcrypt/src/hash.c ****             else if ((ret = wc_Sha512_256Final(sha512, hash)) != 0) {
 1972                             		.loc 1 1459 29
 1973 0064 ED A2 05                		mov.L	20[r10], r2
 1974 0067 ED A1 01                		mov.L	4[r10], r1
 1975 006a 05 00 00 00             		bsr	_wc_Sha512_256Final
 1976 006e E3 A1                   		mov.L	r1, [r10]
 1977                             		.loc 1 1459 21
 1978 0070 EC A5                   		mov.L	[r10], r5
 1979 0072 61 05                   		cmp	#0, r5
 1980 0074 20 0C                   		beq	.L260
1460:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("wc_Sha512_256_Final failed");
 1981                             		.loc 1 1460 17
 1982 0076 FB 12 5D 01 00 00       		mov.L	#.LC17, r1
 1983 007c 05 00 00 00             		bsr	_WOLFSSL_MSG
 1984                             	.L260:
1461:../src/wolfcrypt/src/hash.c ****             }
1462:../src/wolfcrypt/src/hash.c ****             wc_Sha512_256Free(sha512);
 1985                             		.loc 1 1462 13
 1986 0080 ED A1 01                		mov.L	4[r10], r1
 1987 0083 05 00 00 00             		bsr	_wc_Sha512_256Free
 1988                             	.L258:
 1989                             	.LBB7:
1463:../src/wolfcrypt/src/hash.c ****         }
1464:../src/wolfcrypt/src/hash.c **** 
1465:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1466:../src/wolfcrypt/src/hash.c ****         XFREE(sha512, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 1990                             		.loc 1 1466 9
 1991 0087 ED A5 01                		mov.L	4[r10], r5
 1992 008a E7 A5 02                		mov.L	r5, 8[r10]
 1993 008d ED A5 02                		mov.L	8[r10], r5
 1994 0090 61 05                   		cmp	#0, r5
 1995 0092 10                      		beq	.L261
 1996                             		.loc 1 1466 9 is_stmt 0 discriminator 1
 1997 0093 ED A1 02                		mov.L	8[r10], r1
 1998 0096 05 00 00 00             		bsr	_wolfSSL_Free
 1999                             	.L261:
 2000                             	.LBE7:
1467:../src/wolfcrypt/src/hash.c ****     #endif
1468:../src/wolfcrypt/src/hash.c **** 
1469:../src/wolfcrypt/src/hash.c ****         return ret;
 2001                             		.loc 1 1469 16 is_stmt 1
 2002 009a EC A5                   		mov.L	[r10], r5
 2003                             	.L256:
1470:../src/wolfcrypt/src/hash.c ****     }
 2004                             		.loc 1 1470 5
 2005 009c EF 51                   		mov.L	r5, r1
 2006 009e 3F AA 07                		rtsd	#28, r10-r10
 2007                             	.LFE59:
 2009                             		.section C,"a",@progbits
 2010                             		.p2align 2
 2011                             	.LC18:
 2012 0178 49 6E 69 74 53 68 61 33 		.string	"InitSha384 failed"
 2012      38 34 20 66 61 69 6C 65 
 2012      64 00 
 2013                             	.LC19:
 2014 018a 53 68 61 33 38 34 55 70 		.string	"Sha384Update failed"
 2014      64 61 74 65 20 66 61 69 
 2014      6C 65 64 00 
 2015                             	.LC20:
 2016 019e 53 68 61 33 38 34 46 69 		.string	"Sha384Final failed"
 2016      6E 61 6C 20 66 61 69 6C 
 2016      65 64 00 
 2017 01b1 00 00 00                		.section	.text.wc_Sha384Hash,"ax",@progbits
 2018                             		.global	_wc_Sha384Hash
 2020                             	_wc_Sha384Hash:
 2021                             	.LFB60:
1471:../src/wolfcrypt/src/hash.c **** #endif /* !WOLFSSL_NOSHA512_256 */
1472:../src/wolfcrypt/src/hash.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
1473:../src/wolfcrypt/src/hash.c **** 
1474:../src/wolfcrypt/src/hash.c **** #endif /* WOLFSSL_SHA512 */
1475:../src/wolfcrypt/src/hash.c **** 
1476:../src/wolfcrypt/src/hash.c **** #if defined(WOLFSSL_SHA384)
1477:../src/wolfcrypt/src/hash.c ****     int wc_Sha384Hash(const byte* data, word32 len, byte* hash)
1478:../src/wolfcrypt/src/hash.c ****     {
 2022                             		.loc 1 1478 5
 2023 0000 7E AA                   		push.l	r10
 2024                             	.LCFI35:
 2025 0002 71 0A E8                		add	#-24, r0, r10
 2026                             	.LCFI36:
 2027 0005 EF A0                   		mov.L	r10, r0
 2028 0007 E7 A1 03                		mov.L	r1, 12[r10]
 2029 000a E7 A2 04                		mov.L	r2, 16[r10]
 2030 000d E7 A3 05                		mov.L	r3, 20[r10]
1479:../src/wolfcrypt/src/hash.c ****         int ret = 0;
 2031                             		.loc 1 1479 13
 2032 0010 F8 A6 00                		mov.L	#0, [r10]
1480:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1481:../src/wolfcrypt/src/hash.c ****         wc_Sha384* sha384;
1482:../src/wolfcrypt/src/hash.c ****     #else
1483:../src/wolfcrypt/src/hash.c ****         wc_Sha384 sha384[1];
1484:../src/wolfcrypt/src/hash.c ****     #endif
1485:../src/wolfcrypt/src/hash.c **** 
1486:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1487:../src/wolfcrypt/src/hash.c ****         sha384 = (wc_Sha384*)XMALLOC(sizeof(wc_Sha384), NULL,
 2033                             		.loc 1 1487 30
 2034 0013 75 41 D8                		mov.L	#0xd8, r1
 2035 0016 05 00 00 00             		bsr	_wolfSSL_Malloc
 2036 001a E7 A1 01                		mov.L	r1, 4[r10]
1488:../src/wolfcrypt/src/hash.c ****             DYNAMIC_TYPE_TMP_BUFFER);
1489:../src/wolfcrypt/src/hash.c ****         if (sha384 == NULL)
 2037                             		.loc 1 1489 12
 2038 001d ED A5 01                		mov.L	4[r10], r5
 2039 0020 61 05                   		cmp	#0, r5
 2040 0022 1E                      		bne	.L263
1490:../src/wolfcrypt/src/hash.c ****             return MEMORY_E;
 2041                             		.loc 1 1490 20
 2042 0023 FB 56 83                		mov.L	#-125, r5
 2043 0026 2E 76                   		bra	.L264
 2044                             	.L263:
1491:../src/wolfcrypt/src/hash.c ****     #endif
1492:../src/wolfcrypt/src/hash.c **** 
1493:../src/wolfcrypt/src/hash.c ****         if ((ret = wc_InitSha384(sha384)) != 0) {
 2045                             		.loc 1 1493 20
 2046 0028 ED A1 01                		mov.L	4[r10], r1
 2047 002b 05 00 00 00             		bsr	_wc_InitSha384
 2048 002f E3 A1                   		mov.L	r1, [r10]
 2049                             		.loc 1 1493 12
 2050 0031 EC A5                   		mov.L	[r10], r5
 2051 0033 61 05                   		cmp	#0, r5
 2052 0035 20 0E                   		beq	.L265
1494:../src/wolfcrypt/src/hash.c ****             WOLFSSL_MSG("InitSha384 failed");
 2053                             		.loc 1 1494 13
 2054 0037 FB 12 78 01 00 00       		mov.L	#.LC18, r1
 2055 003d 05 00 00 00             		bsr	_WOLFSSL_MSG
 2056 0041 2E 46                   		bra	.L266
 2057                             	.L265:
1495:../src/wolfcrypt/src/hash.c ****         }
1496:../src/wolfcrypt/src/hash.c ****         else {
1497:../src/wolfcrypt/src/hash.c ****             if ((ret = wc_Sha384Update(sha384, data, len)) != 0) {
 2058                             		.loc 1 1497 24
 2059 0043 ED A3 04                		mov.L	16[r10], r3
 2060 0046 ED A2 03                		mov.L	12[r10], r2
 2061 0049 ED A1 01                		mov.L	4[r10], r1
 2062 004c 05 00 00 00             		bsr	_wc_Sha384Update
 2063 0050 E3 A1                   		mov.L	r1, [r10]
 2064                             		.loc 1 1497 16
 2065 0052 EC A5                   		mov.L	[r10], r5
 2066 0054 61 05                   		cmp	#0, r5
 2067 0056 20 0E                   		beq	.L267
1498:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("Sha384Update failed");
 2068                             		.loc 1 1498 17
 2069 0058 FB 12 8A 01 00 00       		mov.L	#.LC19, r1
 2070 005e 05 00 00 00             		bsr	_WOLFSSL_MSG
 2071 0062 2E 1E                   		bra	.L268
 2072                             	.L267:
1499:../src/wolfcrypt/src/hash.c ****             }
1500:../src/wolfcrypt/src/hash.c ****             else if ((ret = wc_Sha384Final(sha384, hash)) != 0) {
 2073                             		.loc 1 1500 29
 2074 0064 ED A2 05                		mov.L	20[r10], r2
 2075 0067 ED A1 01                		mov.L	4[r10], r1
 2076 006a 05 00 00 00             		bsr	_wc_Sha384Final
 2077 006e E3 A1                   		mov.L	r1, [r10]
 2078                             		.loc 1 1500 21
 2079 0070 EC A5                   		mov.L	[r10], r5
 2080 0072 61 05                   		cmp	#0, r5
 2081 0074 20 0C                   		beq	.L268
1501:../src/wolfcrypt/src/hash.c ****                 WOLFSSL_MSG("Sha384Final failed");
 2082                             		.loc 1 1501 17
 2083 0076 FB 12 9E 01 00 00       		mov.L	#.LC20, r1
 2084 007c 05 00 00 00             		bsr	_WOLFSSL_MSG
 2085                             	.L268:
1502:../src/wolfcrypt/src/hash.c ****             }
1503:../src/wolfcrypt/src/hash.c ****             wc_Sha384Free(sha384);
 2086                             		.loc 1 1503 13
 2087 0080 ED A1 01                		mov.L	4[r10], r1
 2088 0083 05 00 00 00             		bsr	_wc_Sha384Free
 2089                             	.L266:
 2090                             	.LBB8:
1504:../src/wolfcrypt/src/hash.c ****         }
1505:../src/wolfcrypt/src/hash.c **** 
1506:../src/wolfcrypt/src/hash.c ****     #ifdef WOLFSSL_SMALL_STACK
1507:../src/wolfcrypt/src/hash.c ****         XFREE(sha384, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 2091                             		.loc 1 1507 9
 2092 0087 ED A5 01                		mov.L	4[r10], r5
 2093 008a E7 A5 02                		mov.L	r5, 8[r10]
 2094 008d ED A5 02                		mov.L	8[r10], r5
 2095 0090 61 05                   		cmp	#0, r5
 2096 0092 10                      		beq	.L269
 2097                             		.loc 1 1507 9 is_stmt 0 discriminator 1
 2098 0093 ED A1 02                		mov.L	8[r10], r1
 2099 0096 05 00 00 00             		bsr	_wolfSSL_Free
 2100                             	.L269:
 2101                             	.LBE8:
1508:../src/wolfcrypt/src/hash.c ****     #endif
1509:../src/wolfcrypt/src/hash.c **** 
1510:../src/wolfcrypt/src/hash.c ****         return ret;
 2102                             		.loc 1 1510 16 is_stmt 1
 2103 009a EC A5                   		mov.L	[r10], r5
 2104                             	.L264:
1511:../src/wolfcrypt/src/hash.c ****     }
 2105                             		.loc 1 1511 5
 2106 009c EF 51                   		mov.L	r5, r1
 2107 009e 3F AA 07                		rtsd	#28, r10-r10
 2108                             	.LFE60:
 2476                             	.Letext0:
 2477                             		.file 2 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 2478                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2479                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2480                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2481                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2482                             		.file 7 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 2483                             		.file 8 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2484                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2485                             		.file 10 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
 2486                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha256.h"
 2487                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/wolfmath.h"
 2488                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha.h"
 2489                             		.file 14 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/md5.h"
 2490                             		.file 15 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/asn.h"
 2491                             		.file 16 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha512.h"
 2492                             		.file 17 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/md4.h"
 2493                             		.file 18 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/hash.h"
