   1                             		.file	"ed25519.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.rodata.c25519_base_x,"a"
   7                             	_c25519_base_x:
   8 0000 09                      		.byte	9
   9 0001 00 00 00 00 00 00 00 00 		.zero	31
   9      00 00 00 00 00 00 00 00 
   9      00 00 00 00 00 00 00 00 
   9      00 00 00 00 00 00 00 
  10                             		.section	.rodata.f25519_zero,"a"
  13                             	_f25519_zero:
  14 0000 00 00 00 00 00 00 00 00 		.zero	32
  14      00 00 00 00 00 00 00 00 
  14      00 00 00 00 00 00 00 00 
  14      00 00 00 00 00 00 00 00 
  15                             		.section	.rodata.f25519_one,"a"
  18                             	_f25519_one:
  19 0000 01                      		.byte	1
  20 0001 00 00 00 00 00 00 00 00 		.zero	31
  20      00 00 00 00 00 00 00 00 
  20      00 00 00 00 00 00 00 00 
  20      00 00 00 00 00 00 00 
  21                             		.section	.rodata.fprime_zero,"a"
  24                             	_fprime_zero:
  25 0000 00 00 00 00 00 00 00 00 		.zero	32
  25      00 00 00 00 00 00 00 00 
  25      00 00 00 00 00 00 00 00 
  25      00 00 00 00 00 00 00 00 
  26                             		.section	.rodata.fprime_one,"a"
  29                             	_fprime_one:
  30 0000 01                      		.byte	1
  31 0001 00 00 00 00 00 00 00 00 		.zero	31
  31      00 00 00 00 00 00 00 00 
  31      00 00 00 00 00 00 00 00 
  31      00 00 00 00 00 00 00 
  32                             		.section	.text.ForceZero,"ax",@progbits
  34                             	_ForceZero:
  35                             	.LFB13:
  36                             		.file 1 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfcrypt/src/misc.c"
   1:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* misc.c
   2:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   3:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   5:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * This file is part of wolfSSL.
   6:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   7:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * it under the terms of the GNU General Public License as published by
   9:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * (at your option) any later version.
  11:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  12:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * GNU General Public License for more details.
  16:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  17:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * You should have received a copy of the GNU General Public License
  18:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * along with this program; if not, write to the Free Software
  19:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  21:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /*
  22:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  23:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** DESCRIPTION
  24:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** This module implements the arithmetic-shift right, left, byte swapping, XOR,
  25:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** masking and clearing memory logic.
  26:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  27:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** */
  28:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef HAVE_CONFIG_H
  29:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <config.h>
  30:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  31:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  32:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/settings.h>
  33:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  34:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLF_CRYPT_MISC_C
  35:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #define WOLF_CRYPT_MISC_C
  36:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  37:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/misc.h>
  38:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  39:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* inlining these functions is a huge speed increase and a small size decrease,
  40:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    because the functions are smaller than function call setup/cleanup, e.g.,
  41:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    md5 benchmark is twice as fast with inline.  If you don't want it, then
  42:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    define NO_INLINE and compile this file into wolfssl, otherwise it's used as
  43:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    a source header
  44:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  45:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  46:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef NO_INLINE
  47:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC
  48:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  49:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC static
  50:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  51:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  52:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* Check for if compiling misc.c when not needed. */
  53:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if !defined(WOLFSSL_MISC_INCLUDED) && !defined(NO_INLINE)
  54:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_IGNORE_FILE_WARN
  55:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #warning misc.c does not need to be compiled when using inline (NO_INLINE not defined)
  56:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
  57:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  58:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  59:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  60:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  61:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__ICCARM__)
  62:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <intrinsics.h>
  63:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  64:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  65:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  66:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef INTEL_INTRINSICS
  67:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  68:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <stdlib.h>      /* get intrinsic definitions */
  69:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  70:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* for non visual studio probably need no long version, 32 bit only
  71:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****      * i.e., _rotl and _rotr */
  72:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #pragma intrinsic(_lrotl, _lrotr)
  73:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  74:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  75:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  76:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotl(x, y) : x;
  77:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  78:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  79:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
  80:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  81:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotr(x, y) : x;
  82:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  83:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  84:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
  85:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  86:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <builtin.h>      /* get intrinsic definitions */
  87:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  88:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if !defined(NO_INLINE)
  89:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  90:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotlFixed(x, y) _builtin_rotl(x, y)
  91:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  92:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotrFixed(x, y) _builtin_rotr(x, y)
  93:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  94:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #else /* create real function */
  95:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  96:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  97:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  98:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotl(x, y);
  99:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 100:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 101:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 102:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 103:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotr(x, y);
 104:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 105:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 106:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 107:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 108:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else /* generic */
 109:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value. */
 110:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 111:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
 112:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 113:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x << y) | (x >> (sizeof(y) * 8 - y));
 114:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 115:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 116:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value. */
 117:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 118:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 119:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x >> y) | (x << (sizeof(y) * 8 - y));
 120:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 121:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 122:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 123:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 124:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef WC_RC2
 125:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 126:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value */
 127:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotlFixed16(word16 x, word16 y)
 128:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 129:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 130:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 131:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 132:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 133:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value */
 134:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotrFixed16(word16 x, word16 y)
 135:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 136:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 137:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 138:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 139:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WC_RC2 */
 140:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 141:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of 32-bit word value. */
 142:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__CCRX__) && !defined(NO_INLINE) /* shortest version for CC-RX */
 143:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define ByteReverseWord32(value) _builtin_revl(value)
 144:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 145:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
 146:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 147:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef PPC_INTRINSICS
 148:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* PPC: load reverse indexed instruction */
 149:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__lwbrx(&value,0);
 150:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__ICCARM__)
 151:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__REV(value);
 152:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(KEIL_INTRINSICS)
 153:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__rev(value);
 154:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
 155:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)_builtin_revl(value);
 156:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLF_ALLOW_BUILTIN) && \
 157:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 158:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__builtin_bswap32(value);
 159:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 160:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       defined(__aarch64__)
 161:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 162:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV32 %0, %0  \n"
 163:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 164:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 165:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 166:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 167:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 168:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       (defined(__thumb__) || defined(__arm__))
 169:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 170:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV %0, %0  \n"
 171:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 172:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 173:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 174:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 175:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(FAST_ROTATE)
 176:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 5 instructions with rotate instruction, 9 without */
 177:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (rotrFixed(value, 8U) & 0xff00ff00) |
 178:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****            (rotlFixed(value, 8U) & 0x00ff00ff);
 179:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 180:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 6 instructions with rotate instruction, 8 without */
 181:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 182:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed(value, 16U);
 183:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 184:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 185:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* __CCRX__ */
 186:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of words array of a given count. */
 187:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
 188:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                     word32 byteCount)
 189:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 190:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word32), i;
 191:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 193:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
 194:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 195:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 196:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 197:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WORD64_AVAILABLE) && !defined(WOLFSSL_NO_WORD64_OPS)
 198:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 199:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 200:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotlFixed64(word64 x, word64 y)
 201:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 202:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 203:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 204:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 205:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 206:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotrFixed64(word64 x, word64 y)
 207:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 208:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 209:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 210:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 211:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 212:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 ByteReverseWord64(word64 value)
 213:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 214:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WOLF_ALLOW_BUILTIN) && defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 215:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)__builtin_bswap64(value);
 216:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFCRYPT_SLOW_WORD64)
 217:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)((word64)ByteReverseWord32((word32) value)) << 32 |
 218:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         (word64)ByteReverseWord32((word32)(value   >> 32));
 219:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 220:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFF00FF00FF00FF00)) >> 8) |
 221:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x00FF00FF00FF00FF)) << 8);
 222:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFFFF0000FFFF0000)) >> 16) |
 223:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x0000FFFF0000FFFF)) << 16);
 224:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed64(value, 32U);
 225:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 226:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 227:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 228:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 229:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords64(word64* out, const word64* in,
 230:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                       word32 byteCount)
 231:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 232:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word64), i;
 233:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 235:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 236:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 237:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 238:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 239:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WORD64_AVAILABLE && !WOLFSSL_NO_WORD64_OPS */
 240:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 241:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_XOR_OPS
 242:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 243:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 244:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWordsOut(wolfssl_word* r, const wolfssl_word* a,
 245:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                      const wolfssl_word* b, word32 n)
 246:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 247:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 248:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 249:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] = a[i] ^ b[i];
 250:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 251:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 252:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 253:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 254:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 255:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbufout(void*out, const void* buf, const void* mask,
 256:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                    word32 count)
 257:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 258:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)out | (wc_ptr_t)buf | (wc_ptr_t)mask | count) %
 259:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                          WOLFSSL_WORD_SIZE == 0)
 260:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWordsOut( (wolfssl_word*)out, (wolfssl_word*)buf,
 261:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                      (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 262:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 263:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 264:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       o = (byte*)out;
 265:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 266:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 267:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) o[i] = b[i] ^ m[i];
 269:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 270:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 271:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 272:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 273:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 274:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWords(wolfssl_word* r, const wolfssl_word* a, word32 n)
 275:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 276:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 277:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 278:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] ^= a[i];
 279:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 280:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 281:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 282:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 283:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 284:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
 285:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 286:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)buf | (wc_ptr_t)mask | count) % WOLFSSL_WORD_SIZE == 0)
 287:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWords( (wolfssl_word*)buf,
 288:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                   (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 289:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 290:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 291:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 292:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 293:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) b[i] ^= m[i];
 295:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 296:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 297:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 298:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 299:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_FORCE_ZERO
 300:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine fills the first len bytes of the memory area pointed by mem
 301:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    with zeros. It ensures compiler optimizations doesn't skip it  */
 302:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
 303:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
  37                             		.loc 1 303 1
  38 0000 7E AA                   		push.l	r10
  39                             	.LCFI0:
  40 0002 71 0A F4                		add	#-12, r0, r10
  41                             	.LCFI1:
  42 0005 EF A0                   		mov.L	r10, r0
  43 0007 E7 A1 01                		mov.L	r1, 4[r10]
  44 000a E7 A2 02                		mov.L	r2, 8[r10]
 304:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile byte* z = (volatile byte*)mem;
  45                             		.loc 1 304 20
  46 000d ED A5 01                		mov.L	4[r10], r5
  47 0010 E3 A5                   		mov.L	r5, [r10]
 305:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 306:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if (defined(WOLFSSL_X86_64_BUILD) || defined(WOLFSSL_AARCH64_BUILD)) \
 307:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****             && defined(WORD64_AVAILABLE)
 308:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile word64* w;
 309:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_UNALIGNED_64BIT_ACCESS
 310:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 l = (sizeof(word64) - ((size_t)z & (sizeof(word64)-1))) &
 311:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                              (sizeof(word64)-1);
 312:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 313:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         if (len < l) l = len;
 314:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         len -= l;
 315:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         while (l--) *z++ = 0;
 316:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 317:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
 318:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         *w++ = 0;
 319:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     z = (volatile byte*)w;
 320:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 321:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 322:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     while (len--) *z++ = 0;
  48                             		.loc 1 322 11
  49 0012 2E 0C                   		bra	.L2
  50                             	.L3:
  51                             		.loc 1 322 21 discriminator 2
  52 0014 EC A5                   		mov.L	[r10], r5
  53 0016 71 54 01                		add	#1, r5, r4
  54 0019 E3 A4                   		mov.L	r4, [r10]
  55                             		.loc 1 322 24 discriminator 2
  56 001b F8 54 00                		mov.B	#0, [r5]
  57                             	.L2:
  58                             		.loc 1 322 15 discriminator 1
  59 001e ED A5 02                		mov.L	8[r10], r5
  60 0021 71 54 FF                		add	#-1, r5, r4
  61 0024 E7 A4 02                		mov.L	r4, 8[r10]
  62                             		.loc 1 322 11 discriminator 1
  63 0027 61 05                   		cmp	#0, r5
  64 0029 21 EB                   		bne	.L3
 323:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
  65                             		.loc 1 323 1
  66 002b 03                      		nop
  67 002c 3F AA 04                		rtsd	#16, r10-r10
  68                             	.LFE13:
  70                             		.section	.text.ConstantCompare,"ax",@progbits
  72                             	_ConstantCompare:
  73                             	.LFB14:
 324:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 325:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 326:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 327:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_CONST_CMP
 328:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* check all length bytes for equality, return 0 on success */
 329:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE int ConstantCompare(const byte* a, const byte* b, int length)
 330:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
  74                             		.loc 1 330 1
  75 0000 7E AA                   		push.l	r10
  76                             	.LCFI2:
  77 0002 71 0A EC                		add	#-20, r0, r10
  78                             	.LCFI3:
  79 0005 EF A0                   		mov.L	r10, r0
  80 0007 E7 A1 02                		mov.L	r1, 8[r10]
  81 000a E7 A2 03                		mov.L	r2, 12[r10]
  82 000d E7 A3 04                		mov.L	r3, 16[r10]
 331:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     int i;
 332:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     int compareSum = 0;
  83                             		.loc 1 332 9
  84 0010 F9 A6 01 00             		mov.L	#0, 4[r10]
 333:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 334:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < length; i++) {
  85                             		.loc 1 334 12
  86 0014 F8 A6 00                		mov.L	#0, [r10]
  87                             		.loc 1 334 5
  88 0017 2E 27                   		bra	.L5
  89                             	.L6:
 335:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         compareSum |= a[i] ^ b[i];
  90                             		.loc 1 335 24 discriminator 3
  91 0019 EC A5                   		mov.L	[r10], r5
  92 001b ED A4 02                		mov.L	8[r10], r4
  93 001e 4B 45                   		add	r4, r5
  94 0020 CC 53                   		mov.B	[r5], r3
  95                             		.loc 1 335 31 discriminator 3
  96 0022 EC A5                   		mov.L	[r10], r5
  97 0024 ED A4 03                		mov.L	12[r10], r4
  98 0027 4B 45                   		add	r4, r5
  99 0029 CC 55                   		mov.B	[r5], r5
 100                             		.loc 1 335 28 discriminator 3
 101 002b FC 37 35                		xor	r3, r5
 102 002e 5B 55                   		movu.B	r5, r5
 103                             		.loc 1 335 20 discriminator 3
 104 0030 ED A4 01                		mov.L	4[r10], r4
 105 0033 57 45                   		or	r4, r5
 106 0035 E7 A5 01                		mov.L	r5, 4[r10]
 334:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         compareSum |= a[i] ^ b[i];
 107                             		.loc 1 334 30 discriminator 3
 108 0038 EC A5                   		mov.L	[r10], r5
 109 003a 62 15                   		add	#1, r5
 110 003c E3 A5                   		mov.L	r5, [r10]
 111                             	.L5:
 334:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         compareSum |= a[i] ^ b[i];
 112                             		.loc 1 334 5 discriminator 1
 113 003e EC A4                   		mov.L	[r10], r4
 114 0040 ED A5 04                		mov.L	16[r10], r5
 115 0043 47 54                   		cmp	r5, r4
 116 0045 29 D4                   		blt	.L6
 336:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 337:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 338:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return compareSum;
 117                             		.loc 1 338 12
 118 0047 ED A5 01                		mov.L	4[r10], r5
 339:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 119                             		.loc 1 339 1
 120 004a EF 51                   		mov.L	r5, r1
 121 004c 3F AA 06                		rtsd	#24, r10-r10
 122                             	.LFE14:
 124                             		.section	.rodata.ed25519Ctx,"a"
 127                             	_ed25519Ctx:
 128 0000 53 69 67 45 64 32 35 35 		.string	"SigEd25519 no Ed25519 collisions"
 128      31 39 20 6E 6F 20 45 64 
 128      32 35 35 31 39 20 63 6F 
 128      6C 6C 69 73 69 6F 6E 73 
 128      00 
 129                             		.section	.text.ed25519_hash_init,"ax",@progbits
 131                             	_ed25519_hash_init:
 132                             	.LFB43:
 133                             		.file 2 "../src/wolfcrypt/src/ed25519.c"
   1:../src/wolfcrypt/src/ed25519.c **** /* ed25519.c
   2:../src/wolfcrypt/src/ed25519.c ****  *
   3:../src/wolfcrypt/src/ed25519.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/ed25519.c ****  *
   5:../src/wolfcrypt/src/ed25519.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/ed25519.c ****  *
   7:../src/wolfcrypt/src/ed25519.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/ed25519.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/ed25519.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/ed25519.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/ed25519.c ****  *
  12:../src/wolfcrypt/src/ed25519.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/ed25519.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/ed25519.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/ed25519.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/ed25519.c ****  *
  17:../src/wolfcrypt/src/ed25519.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/ed25519.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/ed25519.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/ed25519.c ****  */
  21:../src/wolfcrypt/src/ed25519.c **** 
  22:../src/wolfcrypt/src/ed25519.c **** 
  23:../src/wolfcrypt/src/ed25519.c ****  /* Based On Daniel J Bernstein's ed25519 Public Domain ref10 work. */
  24:../src/wolfcrypt/src/ed25519.c **** 
  25:../src/wolfcrypt/src/ed25519.c **** #ifdef HAVE_CONFIG_H
  26:../src/wolfcrypt/src/ed25519.c ****     #include <config.h>
  27:../src/wolfcrypt/src/ed25519.c **** #endif
  28:../src/wolfcrypt/src/ed25519.c **** 
  29:../src/wolfcrypt/src/ed25519.c **** /* in case user set HAVE_ED25519 there */
  30:../src/wolfcrypt/src/ed25519.c **** #include <wolfssl/wolfcrypt/settings.h>
  31:../src/wolfcrypt/src/ed25519.c **** 
  32:../src/wolfcrypt/src/ed25519.c **** #ifdef HAVE_ED25519
  33:../src/wolfcrypt/src/ed25519.c **** 
  34:../src/wolfcrypt/src/ed25519.c **** #include <wolfssl/wolfcrypt/ed25519.h>
  35:../src/wolfcrypt/src/ed25519.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  36:../src/wolfcrypt/src/ed25519.c **** #include <wolfssl/wolfcrypt/hash.h>
  37:../src/wolfcrypt/src/ed25519.c **** #ifdef NO_INLINE
  38:../src/wolfcrypt/src/ed25519.c ****     #include <wolfssl/wolfcrypt/misc.h>
  39:../src/wolfcrypt/src/ed25519.c **** #else
  40:../src/wolfcrypt/src/ed25519.c ****     #define WOLFSSL_MISC_INCLUDED
  41:../src/wolfcrypt/src/ed25519.c ****     #include <wolfcrypt/src/misc.c>
  42:../src/wolfcrypt/src/ed25519.c **** #endif
  43:../src/wolfcrypt/src/ed25519.c **** 
  44:../src/wolfcrypt/src/ed25519.c **** #ifdef FREESCALE_LTC_ECC
  45:../src/wolfcrypt/src/ed25519.c ****     #include <wolfssl/wolfcrypt/port/nxp/ksdk_port.h>
  46:../src/wolfcrypt/src/ed25519.c **** #endif
  47:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_SE050
  48:../src/wolfcrypt/src/ed25519.c ****     #include <wolfssl/wolfcrypt/port/nxp/se050_port.h>
  49:../src/wolfcrypt/src/ed25519.c **** #endif
  50:../src/wolfcrypt/src/ed25519.c **** 
  51:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLF_CRYPTO_CB
  52:../src/wolfcrypt/src/ed25519.c ****     #include <wolfssl/wolfcrypt/cryptocb.h>
  53:../src/wolfcrypt/src/ed25519.c **** #endif
  54:../src/wolfcrypt/src/ed25519.c **** 
  55:../src/wolfcrypt/src/ed25519.c **** #if defined(HAVE_ED25519_SIGN) || defined(HAVE_ED25519_VERIFY)
  56:../src/wolfcrypt/src/ed25519.c **** #define ED25519CTX_SIZE    32
  57:../src/wolfcrypt/src/ed25519.c **** 
  58:../src/wolfcrypt/src/ed25519.c **** static const byte ed25519Ctx[ED25519CTX_SIZE+1] =
  59:../src/wolfcrypt/src/ed25519.c ****                                              "SigEd25519 no Ed25519 collisions";
  60:../src/wolfcrypt/src/ed25519.c **** #endif
  61:../src/wolfcrypt/src/ed25519.c **** 
  62:../src/wolfcrypt/src/ed25519.c **** static int ed25519_hash_init(ed25519_key* key, wc_Sha512 *sha)
  63:../src/wolfcrypt/src/ed25519.c **** {
 134                             		.loc 2 63 1
 135 0000 7E AA                   		push.l	r10
 136                             	.LCFI4:
 137 0002 71 0A F4                		add	#-12, r0, r10
 138                             	.LCFI5:
 139 0005 EF A0                   		mov.L	r10, r0
 140 0007 E7 A1 01                		mov.L	r1, 4[r10]
 141 000a E7 A2 02                		mov.L	r2, 8[r10]
  64:../src/wolfcrypt/src/ed25519.c ****     int ret;
  65:../src/wolfcrypt/src/ed25519.c **** 
  66:../src/wolfcrypt/src/ed25519.c ****     ret = wc_InitSha512_ex(sha, key->heap,
 142                             		.loc 2 66 11
 143 000d ED A5 01                		mov.L	4[r10], r5
 144 0010 AE 5D                   		mov.L	100[r5], r5
 145 0012 FB 36 FE                		mov.L	#-2, r3
 146 0015 EF 52                   		mov.L	r5, r2
 147 0017 ED A1 02                		mov.L	8[r10], r1
 148 001a 05 00 00 00             		bsr	_wc_InitSha512_ex
 149 001e E3 A1                   		mov.L	r1, [r10]
  67:../src/wolfcrypt/src/ed25519.c **** #if defined(WOLF_CRYPTO_CB)
  68:../src/wolfcrypt/src/ed25519.c ****                            key->devId
  69:../src/wolfcrypt/src/ed25519.c **** #else
  70:../src/wolfcrypt/src/ed25519.c ****                            INVALID_DEVID
  71:../src/wolfcrypt/src/ed25519.c **** #endif
  72:../src/wolfcrypt/src/ed25519.c ****         );
  73:../src/wolfcrypt/src/ed25519.c **** 
  74:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
  75:../src/wolfcrypt/src/ed25519.c ****     if (ret == 0)
  76:../src/wolfcrypt/src/ed25519.c ****         key->sha_clean_flag = 1;
  77:../src/wolfcrypt/src/ed25519.c **** #endif
  78:../src/wolfcrypt/src/ed25519.c **** 
  79:../src/wolfcrypt/src/ed25519.c ****     return ret;
 150                             		.loc 2 79 12
 151 0020 EC A5                   		mov.L	[r10], r5
  80:../src/wolfcrypt/src/ed25519.c **** }
 152                             		.loc 2 80 1
 153 0022 EF 51                   		mov.L	r5, r1
 154 0024 3F AA 04                		rtsd	#16, r10-r10
 155                             	.LFE43:
 157                             		.section	.text.ed25519_hash_update,"ax",@progbits
 159                             	_ed25519_hash_update:
 160                             	.LFB44:
  81:../src/wolfcrypt/src/ed25519.c **** 
  82:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
  83:../src/wolfcrypt/src/ed25519.c **** static int ed25519_hash_reset(ed25519_key* key)
  84:../src/wolfcrypt/src/ed25519.c **** {
  85:../src/wolfcrypt/src/ed25519.c ****     int ret;
  86:../src/wolfcrypt/src/ed25519.c ****     if (key->sha_clean_flag)
  87:../src/wolfcrypt/src/ed25519.c ****         ret = 0;
  88:../src/wolfcrypt/src/ed25519.c ****     else {
  89:../src/wolfcrypt/src/ed25519.c ****         wc_Sha512Free(&key->sha);
  90:../src/wolfcrypt/src/ed25519.c ****         ret = wc_InitSha512_ex(&key->sha, key->heap,
  91:../src/wolfcrypt/src/ed25519.c **** #if defined(WOLF_CRYPTO_CB)
  92:../src/wolfcrypt/src/ed25519.c ****                                key->devId
  93:../src/wolfcrypt/src/ed25519.c **** #else
  94:../src/wolfcrypt/src/ed25519.c ****                                INVALID_DEVID
  95:../src/wolfcrypt/src/ed25519.c **** #endif
  96:../src/wolfcrypt/src/ed25519.c ****             );
  97:../src/wolfcrypt/src/ed25519.c ****         if (ret == 0)
  98:../src/wolfcrypt/src/ed25519.c ****             key->sha_clean_flag = 1;
  99:../src/wolfcrypt/src/ed25519.c ****     }
 100:../src/wolfcrypt/src/ed25519.c ****     return ret;
 101:../src/wolfcrypt/src/ed25519.c **** }
 102:../src/wolfcrypt/src/ed25519.c **** #endif /* WOLFSSL_ED25519_PERSISTENT_SHA */
 103:../src/wolfcrypt/src/ed25519.c **** 
 104:../src/wolfcrypt/src/ed25519.c **** static int ed25519_hash_update(ed25519_key* key, wc_Sha512 *sha,
 105:../src/wolfcrypt/src/ed25519.c ****                                const byte* data, word32 len)
 106:../src/wolfcrypt/src/ed25519.c **** {
 161                             		.loc 2 106 1
 162 0000 7E AA                   		push.l	r10
 163                             	.LCFI6:
 164 0002 71 0A F0                		add	#-16, r0, r10
 165                             	.LCFI7:
 166 0005 EF A0                   		mov.L	r10, r0
 167 0007 E3 A1                   		mov.L	r1, [r10]
 168 0009 E7 A2 01                		mov.L	r2, 4[r10]
 169 000c E7 A3 02                		mov.L	r3, 8[r10]
 170 000f E7 A4 03                		mov.L	r4, 12[r10]
 107:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
 108:../src/wolfcrypt/src/ed25519.c ****     if (key->sha_clean_flag)
 109:../src/wolfcrypt/src/ed25519.c ****         key->sha_clean_flag = 0;
 110:../src/wolfcrypt/src/ed25519.c **** #else
 111:../src/wolfcrypt/src/ed25519.c ****     (void)key;
 112:../src/wolfcrypt/src/ed25519.c **** #endif
 113:../src/wolfcrypt/src/ed25519.c ****     return wc_Sha512Update(sha, data, len);
 171                             		.loc 2 113 12
 172 0012 ED A3 03                		mov.L	12[r10], r3
 173 0015 ED A2 02                		mov.L	8[r10], r2
 174 0018 ED A1 01                		mov.L	4[r10], r1
 175 001b 05 00 00 00             		bsr	_wc_Sha512Update
 176 001f EF 15                   		mov.L	r1, r5
 114:../src/wolfcrypt/src/ed25519.c **** }
 177                             		.loc 2 114 1
 178 0021 EF 51                   		mov.L	r5, r1
 179 0023 3F AA 05                		rtsd	#20, r10-r10
 180                             	.LFE44:
 182                             		.section	.text.ed25519_hash_final,"ax",@progbits
 184                             	_ed25519_hash_final:
 185                             	.LFB45:
 115:../src/wolfcrypt/src/ed25519.c **** 
 116:../src/wolfcrypt/src/ed25519.c **** static int ed25519_hash_final(ed25519_key* key, wc_Sha512 *sha, byte* hash)
 117:../src/wolfcrypt/src/ed25519.c **** {
 186                             		.loc 2 117 1
 187 0000 7E AA                   		push.l	r10
 188                             	.LCFI8:
 189 0002 71 0A F0                		add	#-16, r0, r10
 190                             	.LCFI9:
 191 0005 EF A0                   		mov.L	r10, r0
 192 0007 E7 A1 01                		mov.L	r1, 4[r10]
 193 000a E7 A2 02                		mov.L	r2, 8[r10]
 194 000d E7 A3 03                		mov.L	r3, 12[r10]
 118:../src/wolfcrypt/src/ed25519.c ****     int ret = wc_Sha512Final(sha, hash);
 195                             		.loc 2 118 15
 196 0010 ED A2 03                		mov.L	12[r10], r2
 197 0013 ED A1 02                		mov.L	8[r10], r1
 198 0016 05 00 00 00             		bsr	_wc_Sha512Final
 199 001a E3 A1                   		mov.L	r1, [r10]
 119:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
 120:../src/wolfcrypt/src/ed25519.c ****     if (ret == 0)
 121:../src/wolfcrypt/src/ed25519.c ****         key->sha_clean_flag = 1;
 122:../src/wolfcrypt/src/ed25519.c **** #else
 123:../src/wolfcrypt/src/ed25519.c ****     (void)key;
 124:../src/wolfcrypt/src/ed25519.c **** #endif
 125:../src/wolfcrypt/src/ed25519.c ****     return ret;
 200                             		.loc 2 125 12
 201 001c EC A5                   		mov.L	[r10], r5
 126:../src/wolfcrypt/src/ed25519.c **** }
 202                             		.loc 2 126 1
 203 001e EF 51                   		mov.L	r5, r1
 204 0020 3F AA 05                		rtsd	#20, r10-r10
 205                             	.LFE45:
 207                             		.section	.text.ed25519_hash_free,"ax",@progbits
 209                             	_ed25519_hash_free:
 210                             	.LFB46:
 127:../src/wolfcrypt/src/ed25519.c **** 
 128:../src/wolfcrypt/src/ed25519.c **** static void ed25519_hash_free(ed25519_key* key, wc_Sha512 *sha)
 129:../src/wolfcrypt/src/ed25519.c **** {
 211                             		.loc 2 129 1
 212 0000 7E AA                   		push.l	r10
 213                             	.LCFI10:
 214 0002 71 0A F8                		add	#-8, r0, r10
 215                             	.LCFI11:
 216 0005 EF A0                   		mov.L	r10, r0
 217 0007 E3 A1                   		mov.L	r1, [r10]
 218 0009 E7 A2 01                		mov.L	r2, 4[r10]
 130:../src/wolfcrypt/src/ed25519.c ****     wc_Sha512Free(sha);
 219                             		.loc 2 130 5
 220 000c ED A1 01                		mov.L	4[r10], r1
 221 000f 05 00 00 00             		bsr	_wc_Sha512Free
 131:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
 132:../src/wolfcrypt/src/ed25519.c ****     key->sha_clean_flag = 0;
 133:../src/wolfcrypt/src/ed25519.c **** #else
 134:../src/wolfcrypt/src/ed25519.c ****     (void)key;
 135:../src/wolfcrypt/src/ed25519.c **** #endif
 136:../src/wolfcrypt/src/ed25519.c **** }
 222                             		.loc 2 136 1
 223 0013 03                      		nop
 224 0014 3F AA 03                		rtsd	#12, r10-r10
 225                             	.LFE46:
 227                             		.section	.text.ed25519_hash,"ax",@progbits
 229                             	_ed25519_hash:
 230                             	.LFB47:
 137:../src/wolfcrypt/src/ed25519.c **** 
 138:../src/wolfcrypt/src/ed25519.c **** 
 139:../src/wolfcrypt/src/ed25519.c **** static int ed25519_hash(ed25519_key* key, const byte* in, word32 inLen,
 140:../src/wolfcrypt/src/ed25519.c ****     byte* hash)
 141:../src/wolfcrypt/src/ed25519.c **** {
 231                             		.loc 2 141 1
 232 0000 7E AA                   		push.l	r10
 233                             	.LCFI12:
 234 0002 72 0A 14 FF             		add	#-236, r0, r10
 235                             	.LCFI13:
 236 0006 EF A0                   		mov.L	r10, r0
 237 0008 E7 A1 37                		mov.L	r1, 220[r10]
 238 000b E7 A2 38                		mov.L	r2, 224[r10]
 239 000e E7 A3 39                		mov.L	r3, 228[r10]
 240 0011 E7 A4 3A                		mov.L	r4, 232[r10]
 142:../src/wolfcrypt/src/ed25519.c ****     int ret;
 143:../src/wolfcrypt/src/ed25519.c **** #ifndef WOLFSSL_ED25519_PERSISTENT_SHA
 144:../src/wolfcrypt/src/ed25519.c ****     wc_Sha512 sha[1];
 145:../src/wolfcrypt/src/ed25519.c **** #else
 146:../src/wolfcrypt/src/ed25519.c ****     wc_Sha512 *sha;
 147:../src/wolfcrypt/src/ed25519.c **** #endif
 148:../src/wolfcrypt/src/ed25519.c **** 
 149:../src/wolfcrypt/src/ed25519.c ****     if (key == NULL || (in == NULL && inLen > 0) || hash == NULL) {
 241                             		.loc 2 149 8
 242 0014 ED A5 37                		mov.L	220[r10], r5
 243 0017 61 05                   		cmp	#0, r5
 244 0019 20 14                   		beq	.L16
 245                             		.loc 2 149 21 discriminator 1
 246 001b ED A5 38                		mov.L	224[r10], r5
 247 001e 61 05                   		cmp	#0, r5
 248 0020 1F                      		bne	.L17
 249                             		.loc 2 149 36 discriminator 2
 250 0021 ED A5 39                		mov.L	228[r10], r5
 251 0024 61 05                   		cmp	#0, r5
 252 0026 1F                      		bne	.L16
 253                             	.L17:
 254                             		.loc 2 149 50 discriminator 4
 255 0027 ED A5 3A                		mov.L	232[r10], r5
 256 002a 61 05                   		cmp	#0, r5
 257 002c 1F                      		bne	.L18
 258                             	.L16:
 150:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 259                             		.loc 2 150 16
 260 002d FB 5A 53 FF             		mov.L	#-173, r5
 261 0031 2E 53                   		bra	.L22
 262                             	.L18:
 151:../src/wolfcrypt/src/ed25519.c ****     }
 152:../src/wolfcrypt/src/ed25519.c **** 
 153:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
 154:../src/wolfcrypt/src/ed25519.c ****     sha = &key->sha;
 155:../src/wolfcrypt/src/ed25519.c ****     ret = ed25519_hash_reset(key);
 156:../src/wolfcrypt/src/ed25519.c **** #else
 157:../src/wolfcrypt/src/ed25519.c ****     ret = ed25519_hash_init(key, sha);
 263                             		.loc 2 157 11
 264 0033 71 A5 04                		add	#4, r10, r5
 265 0036 EF 52                   		mov.L	r5, r2
 266 0038 ED A1 37                		mov.L	220[r10], r1
 267 003b 05 00 00 00             		bsr	_ed25519_hash_init
 268 003f E3 A1                   		mov.L	r1, [r10]
 158:../src/wolfcrypt/src/ed25519.c **** #endif
 159:../src/wolfcrypt/src/ed25519.c ****     if (ret < 0)
 269                             		.loc 2 159 8
 270 0041 EC A5                   		mov.L	[r10], r5
 271 0043 61 05                   		cmp	#0, r5
 272 0045 28 06                   		bge	.L20
 160:../src/wolfcrypt/src/ed25519.c ****         return ret;
 273                             		.loc 2 160 16
 274 0047 EC A5                   		mov.L	[r10], r5
 275 0049 2E 3B                   		bra	.L22
 276                             	.L20:
 161:../src/wolfcrypt/src/ed25519.c **** 
 162:../src/wolfcrypt/src/ed25519.c ****     ret = ed25519_hash_update(key, sha, in, inLen);
 277                             		.loc 2 162 11
 278 004b 71 A5 04                		add	#4, r10, r5
 279 004e ED A4 39                		mov.L	228[r10], r4
 280 0051 ED A3 38                		mov.L	224[r10], r3
 281 0054 EF 52                   		mov.L	r5, r2
 282 0056 ED A1 37                		mov.L	220[r10], r1
 283 0059 05 00 00 00             		bsr	_ed25519_hash_update
 284 005d E3 A1                   		mov.L	r1, [r10]
 163:../src/wolfcrypt/src/ed25519.c ****     if (ret == 0)
 285                             		.loc 2 163 8
 286 005f EC A5                   		mov.L	[r10], r5
 287 0061 61 05                   		cmp	#0, r5
 288 0063 21 13                   		bne	.L21
 164:../src/wolfcrypt/src/ed25519.c ****         ret = ed25519_hash_final(key, sha, hash);
 289                             		.loc 2 164 15
 290 0065 71 A5 04                		add	#4, r10, r5
 291 0068 ED A3 3A                		mov.L	232[r10], r3
 292 006b EF 52                   		mov.L	r5, r2
 293 006d ED A1 37                		mov.L	220[r10], r1
 294 0070 05 00 00 00             		bsr	_ed25519_hash_final
 295 0074 E3 A1                   		mov.L	r1, [r10]
 296                             	.L21:
 165:../src/wolfcrypt/src/ed25519.c **** 
 166:../src/wolfcrypt/src/ed25519.c **** #ifndef WOLFSSL_ED25519_PERSISTENT_SHA
 167:../src/wolfcrypt/src/ed25519.c ****     ed25519_hash_free(key, sha);
 297                             		.loc 2 167 5
 298 0076 71 A5 04                		add	#4, r10, r5
 299 0079 EF 52                   		mov.L	r5, r2
 300 007b ED A1 37                		mov.L	220[r10], r1
 301 007e 05 00 00 00             		bsr	_ed25519_hash_free
 168:../src/wolfcrypt/src/ed25519.c **** #endif
 169:../src/wolfcrypt/src/ed25519.c **** 
 170:../src/wolfcrypt/src/ed25519.c ****     return ret;
 302                             		.loc 2 170 12
 303 0082 EC A5                   		mov.L	[r10], r5
 304                             	.L22:
 171:../src/wolfcrypt/src/ed25519.c **** }
 305                             		.loc 2 171 1 discriminator 1
 306 0084 EF 51                   		mov.L	r5, r1
 307 0086 3F AA 3C                		rtsd	#240, r10-r10
 308                             	.LFE47:
 310                             		.section	.text.wc_ed25519_make_public,"ax",@progbits
 311                             		.global	_wc_ed25519_make_public
 313                             	_wc_ed25519_make_public:
 314                             	.LFB48:
 172:../src/wolfcrypt/src/ed25519.c **** 
 173:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_make_public(ed25519_key* key, unsigned char* pubKey,
 174:../src/wolfcrypt/src/ed25519.c ****                            word32 pubKeySz)
 175:../src/wolfcrypt/src/ed25519.c **** {
 315                             		.loc 2 175 1
 316 0000 7E AA                   		push.l	r10
 317                             	.LCFI14:
 318 0002 72 0A 10 FF             		add	#-240, r0, r10
 319                             	.LCFI15:
 320 0006 EF A0                   		mov.L	r10, r0
 321 0008 E7 A1 39                		mov.L	r1, 228[r10]
 322 000b E7 A2 3A                		mov.L	r2, 232[r10]
 323 000e E7 A3 3B                		mov.L	r3, 236[r10]
 176:../src/wolfcrypt/src/ed25519.c ****     int   ret = 0;
 324                             		.loc 2 176 11
 325 0011 F8 A6 00                		mov.L	#0, [r10]
 177:../src/wolfcrypt/src/ed25519.c ****     byte  az[ED25519_PRV_KEY_SIZE];
 178:../src/wolfcrypt/src/ed25519.c **** #if !defined(FREESCALE_LTC_ECC)
 179:../src/wolfcrypt/src/ed25519.c ****     ge_p3 A;
 180:../src/wolfcrypt/src/ed25519.c **** #endif
 181:../src/wolfcrypt/src/ed25519.c **** 
 182:../src/wolfcrypt/src/ed25519.c ****     if (key == NULL || pubKey == NULL || pubKeySz != ED25519_PUB_KEY_SIZE)
 326                             		.loc 2 182 8
 327 0014 ED A5 39                		mov.L	228[r10], r5
 328 0017 61 05                   		cmp	#0, r5
 329 0019 20 0F                   		beq	.L24
 330                             		.loc 2 182 21 discriminator 1
 331 001b ED A5 3A                		mov.L	232[r10], r5
 332 001e 61 05                   		cmp	#0, r5
 333 0020 10                      		beq	.L24
 334                             		.loc 2 182 39 discriminator 2
 335 0021 ED A5 3B                		mov.L	236[r10], r5
 336 0024 75 55 20                		cmp	#32, r5
 337 0027 15                      		beq	.L25
 338                             	.L24:
 183:../src/wolfcrypt/src/ed25519.c ****         ret = BAD_FUNC_ARG;
 339                             		.loc 2 183 13
 340 0028 F8 AA 53 FF             		mov.L	#-173, [r10]
 341                             	.L25:
 184:../src/wolfcrypt/src/ed25519.c **** 
 185:../src/wolfcrypt/src/ed25519.c ****     if (ret == 0)
 342                             		.loc 2 185 8
 343 002c EC A5                   		mov.L	[r10], r5
 344 002e 61 05                   		cmp	#0, r5
 345 0030 21 19                   		bne	.L26
 186:../src/wolfcrypt/src/ed25519.c ****         ret = ed25519_hash(key, key->k, ED25519_KEY_SIZE, az);
 346                             		.loc 2 186 36
 347 0032 ED A5 39                		mov.L	228[r10], r5
 348 0035 71 55 20                		add	#32, r5
 349                             		.loc 2 186 15
 350 0038 71 A4 04                		add	#4, r10, r4
 351 003b 75 43 20                		mov.L	#32, r3
 352 003e EF 52                   		mov.L	r5, r2
 353 0040 ED A1 39                		mov.L	228[r10], r1
 354 0043 05 00 00 00             		bsr	_ed25519_hash
 355 0047 E3 A1                   		mov.L	r1, [r10]
 356                             	.L26:
 187:../src/wolfcrypt/src/ed25519.c ****     if (ret == 0) {
 357                             		.loc 2 187 8
 358 0049 EC A5                   		mov.L	[r10], r5
 359 004b 61 05                   		cmp	#0, r5
 360 004d 21 37                   		bne	.L27
 188:../src/wolfcrypt/src/ed25519.c ****         /* apply clamp */
 189:../src/wolfcrypt/src/ed25519.c ****         az[0]  &= 248;
 361                             		.loc 2 189 16
 362 004f CD A5 04                		mov.B	4[r10], r5
 363 0052 75 25 F8                		and	#-8, r5
 364 0055 C7 A5 04                		mov.B	r5, 4[r10]
 190:../src/wolfcrypt/src/ed25519.c ****         az[31] &= 63; /* same than az[31] &= 127 because of az[31] |= 64 */
 365                             		.loc 2 190 16
 366 0058 CD A5 23                		mov.B	35[r10], r5
 367 005b 75 25 3F                		and	#63, r5
 368 005e C7 A5 23                		mov.B	r5, 35[r10]
 191:../src/wolfcrypt/src/ed25519.c ****         az[31] |= 64;
 369                             		.loc 2 191 16
 370 0061 CD A5 23                		mov.B	35[r10], r5
 371 0064 75 35 40                		or	#0x40, r5
 372 0067 C7 A5 23                		mov.B	r5, 35[r10]
 192:../src/wolfcrypt/src/ed25519.c **** 
 193:../src/wolfcrypt/src/ed25519.c ****     #ifdef FREESCALE_LTC_ECC
 194:../src/wolfcrypt/src/ed25519.c ****         ltc_pkha_ecc_point_t publicKey = {0};
 195:../src/wolfcrypt/src/ed25519.c ****         publicKey.X = key->pointX;
 196:../src/wolfcrypt/src/ed25519.c ****         publicKey.Y = key->pointY;
 197:../src/wolfcrypt/src/ed25519.c ****         LTC_PKHA_Ed25519_PointMul(LTC_PKHA_Ed25519_BasePoint(), az,
 198:../src/wolfcrypt/src/ed25519.c ****             ED25519_KEY_SIZE, &publicKey, kLTC_Ed25519 /* result on Ed25519 */);
 199:../src/wolfcrypt/src/ed25519.c ****         LTC_PKHA_Ed25519_Compress(&publicKey, pubKey);
 200:../src/wolfcrypt/src/ed25519.c ****     #else
 201:../src/wolfcrypt/src/ed25519.c ****         ge_scalarmult_base(&A, az);
 373                             		.loc 2 201 9
 374 006a 71 A4 04                		add	#4, r10, r4
 375 006d 71 A5 44                		add	#0x44, r10, r5
 376 0070 EF 42                   		mov.L	r4, r2
 377 0072 EF 51                   		mov.L	r5, r1
 378 0074 05 00 00 00             		bsr	_ge_scalarmult_base
 202:../src/wolfcrypt/src/ed25519.c ****         ge_p3_tobytes(pubKey, &A);
 379                             		.loc 2 202 9
 380 0078 71 A5 44                		add	#0x44, r10, r5
 381 007b EF 52                   		mov.L	r5, r2
 382 007d ED A1 3A                		mov.L	232[r10], r1
 383 0080 05 00 00 00             		bsr	_ge_p3_tobytes
 384                             	.L27:
 203:../src/wolfcrypt/src/ed25519.c ****     #endif
 204:../src/wolfcrypt/src/ed25519.c ****     }
 205:../src/wolfcrypt/src/ed25519.c **** 
 206:../src/wolfcrypt/src/ed25519.c ****     return ret;
 385                             		.loc 2 206 12
 386 0084 EC A5                   		mov.L	[r10], r5
 207:../src/wolfcrypt/src/ed25519.c **** }
 387                             		.loc 2 207 1
 388 0086 EF 51                   		mov.L	r5, r1
 389 0088 3F AA 3D                		rtsd	#244, r10-r10
 390                             	.LFE48:
 392                             		.section	.text.wc_ed25519_make_key,"ax",@progbits
 393                             		.global	_wc_ed25519_make_key
 395                             	_wc_ed25519_make_key:
 396                             	.LFB49:
 208:../src/wolfcrypt/src/ed25519.c **** 
 209:../src/wolfcrypt/src/ed25519.c **** /* generate an ed25519 key pair.
 210:../src/wolfcrypt/src/ed25519.c ****  * returns 0 on success
 211:../src/wolfcrypt/src/ed25519.c ****  */
 212:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_make_key(WC_RNG* rng, int keySz, ed25519_key* key)
 213:../src/wolfcrypt/src/ed25519.c **** {
 397                             		.loc 2 213 1
 398 0000 7E AA                   		push.l	r10
 399                             	.LCFI16:
 400 0002 71 0A F0                		add	#-16, r0, r10
 401                             	.LCFI17:
 402 0005 EF A0                   		mov.L	r10, r0
 403 0007 E7 A1 01                		mov.L	r1, 4[r10]
 404 000a E7 A2 02                		mov.L	r2, 8[r10]
 405 000d E7 A3 03                		mov.L	r3, 12[r10]
 214:../src/wolfcrypt/src/ed25519.c ****     int ret;
 215:../src/wolfcrypt/src/ed25519.c **** 
 216:../src/wolfcrypt/src/ed25519.c ****     if (rng == NULL || key == NULL)
 406                             		.loc 2 216 8
 407 0010 ED A5 01                		mov.L	4[r10], r5
 408 0013 61 05                   		cmp	#0, r5
 409 0015 17                      		beq	.L30
 410                             		.loc 2 216 21 discriminator 1
 411 0016 ED A5 03                		mov.L	12[r10], r5
 412 0019 61 05                   		cmp	#0, r5
 413 001b 18                      		bne	.L31
 414                             	.L30:
 217:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 415                             		.loc 2 217 16
 416 001c FB 5A 53 FF             		mov.L	#-173, r5
 417 0020 38 86 00                		bra	.L32
 418                             	.L31:
 218:../src/wolfcrypt/src/ed25519.c **** 
 219:../src/wolfcrypt/src/ed25519.c ****     /* ed25519 has 32 byte key sizes */
 220:../src/wolfcrypt/src/ed25519.c ****     if (keySz != ED25519_KEY_SIZE)
 419                             		.loc 2 220 8
 420 0023 ED A5 02                		mov.L	8[r10], r5
 421 0026 75 55 20                		cmp	#32, r5
 422 0029 17                      		beq	.L33
 221:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 423                             		.loc 2 221 16
 424 002a FB 5A 53 FF             		mov.L	#-173, r5
 425 002e 2E 78                   		bra	.L32
 426                             	.L33:
 222:../src/wolfcrypt/src/ed25519.c **** 
 223:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLF_CRYPTO_CB
 224:../src/wolfcrypt/src/ed25519.c ****     if (key->devId != INVALID_DEVID) {
 225:../src/wolfcrypt/src/ed25519.c ****         ret = wc_CryptoCb_Ed25519Gen(rng, keySz, key);
 226:../src/wolfcrypt/src/ed25519.c ****         if (ret != CRYPTOCB_UNAVAILABLE)
 227:../src/wolfcrypt/src/ed25519.c ****             return ret;
 228:../src/wolfcrypt/src/ed25519.c ****         /* fall-through when unavailable */
 229:../src/wolfcrypt/src/ed25519.c ****     }
 230:../src/wolfcrypt/src/ed25519.c **** #endif
 231:../src/wolfcrypt/src/ed25519.c **** 
 232:../src/wolfcrypt/src/ed25519.c ****     ret = wc_RNG_GenerateBlock(rng, key->k, ED25519_KEY_SIZE);
 427                             		.loc 2 232 40
 428 0030 ED A5 03                		mov.L	12[r10], r5
 429 0033 71 55 20                		add	#32, r5
 430                             		.loc 2 232 11
 431 0036 75 43 20                		mov.L	#32, r3
 432 0039 EF 52                   		mov.L	r5, r2
 433 003b ED A1 01                		mov.L	4[r10], r1
 434 003e 05 00 00 00             		bsr	_wc_RNG_GenerateBlock
 435 0042 E3 A1                   		mov.L	r1, [r10]
 233:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0)
 436                             		.loc 2 233 8
 437 0044 EC A5                   		mov.L	[r10], r5
 438 0046 61 05                   		cmp	#0, r5
 439 0048 15                      		beq	.L34
 234:../src/wolfcrypt/src/ed25519.c ****         return ret;
 440                             		.loc 2 234 16
 441 0049 EC A5                   		mov.L	[r10], r5
 442 004b 2E 5B                   		bra	.L32
 443                             	.L34:
 235:../src/wolfcrypt/src/ed25519.c **** 
 236:../src/wolfcrypt/src/ed25519.c ****     ret = wc_ed25519_make_public(key, key->p, ED25519_PUB_KEY_SIZE);
 444                             		.loc 2 236 42
 445 004d ED A5 03                		mov.L	12[r10], r5
 446                             		.loc 2 236 11
 447 0050 75 43 20                		mov.L	#32, r3
 448 0053 EF 52                   		mov.L	r5, r2
 449 0055 ED A1 03                		mov.L	12[r10], r1
 450 0058 05 00 00 00             		bsr	_wc_ed25519_make_public
 451 005c E3 A1                   		mov.L	r1, [r10]
 237:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0) {
 452                             		.loc 2 237 8
 453 005e EC A5                   		mov.L	[r10], r5
 454 0060 61 05                   		cmp	#0, r5
 455 0062 20 15                   		beq	.L35
 238:../src/wolfcrypt/src/ed25519.c ****         ForceZero(key->k, ED25519_KEY_SIZE);
 456                             		.loc 2 238 22
 457 0064 ED A5 03                		mov.L	12[r10], r5
 458 0067 71 55 20                		add	#32, r5
 459                             		.loc 2 238 9
 460 006a 75 42 20                		mov.L	#32, r2
 461 006d EF 51                   		mov.L	r5, r1
 462 006f 05 00 00 00             		bsr	_ForceZero
 239:../src/wolfcrypt/src/ed25519.c ****         return ret;
 463                             		.loc 2 239 16
 464 0073 EC A5                   		mov.L	[r10], r5
 465 0075 2E 31                   		bra	.L32
 466                             	.L35:
 240:../src/wolfcrypt/src/ed25519.c ****     }
 241:../src/wolfcrypt/src/ed25519.c **** 
 242:../src/wolfcrypt/src/ed25519.c ****     /* put public key after private key, on the same buffer */
 243:../src/wolfcrypt/src/ed25519.c ****     XMEMMOVE(key->k + ED25519_KEY_SIZE, key->p, ED25519_PUB_KEY_SIZE);
 467                             		.loc 2 243 5
 468 0077 ED A5 03                		mov.L	12[r10], r5
 469 007a 71 55 20                		add	#32, r5
 470 007d 71 55 20                		add	#32, r5
 471 0080 ED A4 03                		mov.L	12[r10], r4
 472 0083 75 43 20                		mov.L	#32, r3
 473 0086 EF 42                   		mov.L	r4, r2
 474 0088 EF 51                   		mov.L	r5, r1
 475 008a 05 00 00 00             		bsr	_memmove
 244:../src/wolfcrypt/src/ed25519.c **** 
 245:../src/wolfcrypt/src/ed25519.c ****     key->privKeySet = 1;
 476                             		.loc 2 245 21
 477 008e ED A4 03                		mov.L	12[r10], r4
 478 0091 CD 45 60                		mov.B	96[r4], r5
 479 0094 78 05                   		bset	#0, r5
 480 0096 C7 45 60                		mov.B	r5, 96[r4]
 246:../src/wolfcrypt/src/ed25519.c ****     key->pubKeySet = 1;
 481                             		.loc 2 246 20
 482 0099 ED A4 03                		mov.L	12[r10], r4
 483 009c CD 45 60                		mov.B	96[r4], r5
 484 009f 78 15                   		bset	#1, r5
 485 00a1 C7 45 60                		mov.B	r5, 96[r4]
 247:../src/wolfcrypt/src/ed25519.c **** 
 248:../src/wolfcrypt/src/ed25519.c ****     return ret;
 486                             		.loc 2 248 12
 487 00a4 EC A5                   		mov.L	[r10], r5
 488                             		.balign 8,3,1
 489                             	.L32:
 249:../src/wolfcrypt/src/ed25519.c **** }
 490                             		.loc 2 249 1
 491 00a6 EF 51                   		mov.L	r5, r1
 492 00a8 3F AA 05                		rtsd	#20, r10-r10
 493                             	.LFE49:
 495 00ab 77 10 01 00 00          		.section	.text.wc_ed25519_sign_msg_ex,"ax",@progbits
 496                             		.global	_wc_ed25519_sign_msg_ex
 498                             	_wc_ed25519_sign_msg_ex:
 499                             	.LFB50:
 250:../src/wolfcrypt/src/ed25519.c **** 
 251:../src/wolfcrypt/src/ed25519.c **** 
 252:../src/wolfcrypt/src/ed25519.c **** #ifdef HAVE_ED25519_SIGN
 253:../src/wolfcrypt/src/ed25519.c **** /*
 254:../src/wolfcrypt/src/ed25519.c ****     in          contains the message to sign
 255:../src/wolfcrypt/src/ed25519.c ****     inLen       is the length of the message to sign
 256:../src/wolfcrypt/src/ed25519.c ****     out         is the buffer to write the signature
 257:../src/wolfcrypt/src/ed25519.c ****     outLen      [in/out] input size of out buf
 258:../src/wolfcrypt/src/ed25519.c ****                           output gets set as the final length of out
 259:../src/wolfcrypt/src/ed25519.c ****     key         is the ed25519 key to use when signing
 260:../src/wolfcrypt/src/ed25519.c ****     type        one of Ed25519, Ed25519ctx or Ed25519ph
 261:../src/wolfcrypt/src/ed25519.c ****     context     extra signing data
 262:../src/wolfcrypt/src/ed25519.c ****     contextLen  length of extra signing data
 263:../src/wolfcrypt/src/ed25519.c ****     return 0 on success
 264:../src/wolfcrypt/src/ed25519.c ****  */
 265:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_sign_msg_ex(const byte* in, word32 inLen, byte* out,
 266:../src/wolfcrypt/src/ed25519.c ****                             word32 *outLen, ed25519_key* key, byte type,
 267:../src/wolfcrypt/src/ed25519.c ****                             const byte* context, byte contextLen)
 268:../src/wolfcrypt/src/ed25519.c **** {
 500                             		.loc 2 268 1
 501 0000 7E AA                   		push.l	r10
 502                             	.LCFI18:
 503 0002 7E A6                   		push.l	r6
 504                             	.LCFI19:
 505 0004 72 0A A4 FD             		add	#-604, r0, r10
 506                             	.LCFI20:
 507 0008 EF A0                   		mov.L	r10, r0
 508 000a FB 6A 68 02             		mov.L	#0x268, r6
 509 000e 4B A6                   		add	r10, r6
 510 0010 E7 A1 8F                		mov.L	r1, 572[r10]
 511 0013 E7 A2 90                		mov.L	r2, 576[r10]
 512 0016 E7 A3 91                		mov.L	r3, 580[r10]
 513 0019 E7 A4 92                		mov.L	r4, 584[r10]
 269:../src/wolfcrypt/src/ed25519.c ****     int    ret;
 270:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_SE050
 271:../src/wolfcrypt/src/ed25519.c ****     (void)context;
 272:../src/wolfcrypt/src/ed25519.c ****     (void)contextLen;
 273:../src/wolfcrypt/src/ed25519.c ****     (void)type;
 274:../src/wolfcrypt/src/ed25519.c ****     ret = se050_ed25519_sign_msg(in, inLen, out, outLen, key);
 275:../src/wolfcrypt/src/ed25519.c **** #else
 276:../src/wolfcrypt/src/ed25519.c **** #ifdef FREESCALE_LTC_ECC
 277:../src/wolfcrypt/src/ed25519.c ****     byte   tempBuf[ED25519_PRV_KEY_SIZE];
 278:../src/wolfcrypt/src/ed25519.c ****     ltc_pkha_ecc_point_t ltcPoint = {0};
 279:../src/wolfcrypt/src/ed25519.c **** #else
 280:../src/wolfcrypt/src/ed25519.c ****     ge_p3  R;
 281:../src/wolfcrypt/src/ed25519.c **** #endif
 282:../src/wolfcrypt/src/ed25519.c ****     byte   nonce[WC_SHA512_DIGEST_SIZE];
 283:../src/wolfcrypt/src/ed25519.c ****     byte   hram[WC_SHA512_DIGEST_SIZE];
 284:../src/wolfcrypt/src/ed25519.c ****     byte   az[ED25519_PRV_KEY_SIZE];
 285:../src/wolfcrypt/src/ed25519.c **** 
 286:../src/wolfcrypt/src/ed25519.c ****     /* sanity check on arguments */
 287:../src/wolfcrypt/src/ed25519.c ****     if (in == NULL || out == NULL || outLen == NULL || key == NULL ||
 514                             		.loc 2 287 8
 515 001c ED A5 8F                		mov.L	572[r10], r5
 516 001f 61 05                   		cmp	#0, r5
 517 0021 20 23                   		beq	.L37
 518                             		.loc 2 287 20 discriminator 1
 519 0023 ED A5 91                		mov.L	580[r10], r5
 520 0026 61 05                   		cmp	#0, r5
 521 0028 20 1C                   		beq	.L37
 522                             		.loc 2 287 35 discriminator 2
 523 002a ED A5 92                		mov.L	584[r10], r5
 524 002d 61 05                   		cmp	#0, r5
 525 002f 20 15                   		beq	.L37
 526                             		.loc 2 287 53 discriminator 3
 527 0031 EC 65                   		mov.L	[r6], r5
 528 0033 61 05                   		cmp	#0, r5
 529 0035 20 0F                   		beq	.L37
 530                             		.loc 2 287 68 discriminator 4
 531 0037 A8 E5                   		mov.L	8[r6], r5
 532 0039 61 05                   		cmp	#0, r5
 533 003b 21 10                   		bne	.L38
 288:../src/wolfcrypt/src/ed25519.c ****                                          (context == NULL && contextLen != 0)) {
 534                             		.loc 2 288 73
 535 003d 8B 65                   		mov.B	12[r6], r5
 536                             		.loc 2 288 59
 537 003f 5B 55                   		movu.B	r5, r5
 538 0041 61 05                   		cmp	#0, r5
 539 0043 10                      		beq	.L38
 540                             		.balign 8,3,2
 541                             	.L37:
 289:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 542                             		.loc 2 289 16
 543 0044 FB 5A 53 FF             		mov.L	#-173, r5
 544 0048 38 C3 02                		bra	.L62
 545                             	.L38:
 290:../src/wolfcrypt/src/ed25519.c ****     }
 291:../src/wolfcrypt/src/ed25519.c **** 
 292:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLF_CRYPTO_CB
 293:../src/wolfcrypt/src/ed25519.c ****     if (key->devId != INVALID_DEVID) {
 294:../src/wolfcrypt/src/ed25519.c ****         ret = wc_CryptoCb_Ed25519Sign(in, inLen, out, outLen, key, type,
 295:../src/wolfcrypt/src/ed25519.c ****             context, contextLen);
 296:../src/wolfcrypt/src/ed25519.c ****         if (ret != CRYPTOCB_UNAVAILABLE)
 297:../src/wolfcrypt/src/ed25519.c ****             return ret;
 298:../src/wolfcrypt/src/ed25519.c ****         /* fall-through when unavailable */
 299:../src/wolfcrypt/src/ed25519.c ****     }
 300:../src/wolfcrypt/src/ed25519.c **** #endif
 301:../src/wolfcrypt/src/ed25519.c **** 
 302:../src/wolfcrypt/src/ed25519.c ****     if (!key->pubKeySet)
 546                             		.loc 2 302 9
 547 004b EC 65                   		mov.L	[r6], r5
 548 004d CD 55 60                		mov.B	96[r5], r5
 549 0050 64 25                   		and	#2, r5
 550                             		.loc 2 302 8
 551 0052 5B 55                   		movu.B	r5, r5
 552 0054 61 05                   		cmp	#0, r5
 553 0056 18                      		bne	.L40
 303:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 554                             		.loc 2 303 16
 555 0057 FB 5A 53 FF             		mov.L	#-173, r5
 556 005b 38 B0 02                		bra	.L62
 557                             	.L40:
 304:../src/wolfcrypt/src/ed25519.c **** 
 305:../src/wolfcrypt/src/ed25519.c ****     /* check and set up out length */
 306:../src/wolfcrypt/src/ed25519.c ****     if (*outLen < ED25519_SIG_SIZE) {
 558                             		.loc 2 306 9
 559 005e ED A5 92                		mov.L	584[r10], r5
 560 0061 EC 55                   		mov.L	[r5], r5
 561                             		.loc 2 306 8
 562 0063 75 55 3F                		cmp	#63, r5
 563 0066 24 0F                   		bgtu	.L41
 307:../src/wolfcrypt/src/ed25519.c ****         *outLen = ED25519_SIG_SIZE;
 564                             		.loc 2 307 17
 565 0068 ED A5 92                		mov.L	584[r10], r5
 566 006b F8 56 40                		mov.L	#0x40, [r5]
 308:../src/wolfcrypt/src/ed25519.c ****         return BUFFER_E;
 567                             		.loc 2 308 16
 568 006e FB 5A 7C FF             		mov.L	#-132, r5
 569 0072 38 99 02                		bra	.L62
 570                             	.L41:
 309:../src/wolfcrypt/src/ed25519.c ****     }
 310:../src/wolfcrypt/src/ed25519.c ****     *outLen = ED25519_SIG_SIZE;
 571                             		.loc 2 310 13
 572 0075 ED A5 92                		mov.L	584[r10], r5
 573 0078 F8 56 40                		mov.L	#0x40, [r5]
 311:../src/wolfcrypt/src/ed25519.c **** 
 312:../src/wolfcrypt/src/ed25519.c ****     /* step 1: create nonce to use where nonce is r in
 313:../src/wolfcrypt/src/ed25519.c ****        r = H(h_b, ... ,h_2b-1,M) */
 314:../src/wolfcrypt/src/ed25519.c ****     ret = ed25519_hash(key, key->k, ED25519_KEY_SIZE, az);
 574                             		.loc 2 314 32
 575 007b EC 65                   		mov.L	[r6], r5
 576 007d 71 55 20                		add	#32, r5
 577                             		.loc 2 314 11
 578 0080 72 A4 24 01             		add	#0x124, r10, r4
 579 0084 75 43 20                		mov.L	#32, r3
 580 0087 EF 52                   		mov.L	r5, r2
 581 0089 EC 61                   		mov.L	[r6], r1
 582 008b 05 00 00 00             		bsr	_ed25519_hash
 583 008f E3 A1                   		mov.L	r1, [r10]
 315:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0)
 584                             		.loc 2 315 8
 585 0091 EC A5                   		mov.L	[r10], r5
 586 0093 61 05                   		cmp	#0, r5
 587 0095 16                      		beq	.L42
 316:../src/wolfcrypt/src/ed25519.c ****         return ret;
 588                             		.loc 2 316 16
 589 0096 EC A5                   		mov.L	[r10], r5
 590 0098 38 73 02                		bra	.L62
 591                             	.L42:
 317:../src/wolfcrypt/src/ed25519.c **** 
 318:../src/wolfcrypt/src/ed25519.c ****     /* apply clamp */
 319:../src/wolfcrypt/src/ed25519.c ****     az[0]  &= 248;
 592                             		.loc 2 319 12
 593 009b CE A5 24 01             		mov.B	292[r10], r5
 594 009f 75 25 F8                		and	#-8, r5
 595 00a2 CB A5 24 01             		mov.B	r5, 292[r10]
 320:../src/wolfcrypt/src/ed25519.c ****     az[31] &= 63; /* same than az[31] &= 127 because of az[31] |= 64 */
 596                             		.loc 2 320 12
 597 00a6 CE A5 43 01             		mov.B	323[r10], r5
 598 00aa 75 25 3F                		and	#63, r5
 599 00ad CB A5 43 01             		mov.B	r5, 323[r10]
 321:../src/wolfcrypt/src/ed25519.c ****     az[31] |= 64;
 600                             		.loc 2 321 12
 601 00b1 CE A5 43 01             		mov.B	323[r10], r5
 602 00b5 75 35 40                		or	#0x40, r5
 603 00b8 CB A5 43 01             		mov.B	r5, 323[r10]
 604                             	.LBB2:
 322:../src/wolfcrypt/src/ed25519.c **** 
 323:../src/wolfcrypt/src/ed25519.c ****     {
 324:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
 325:../src/wolfcrypt/src/ed25519.c ****         wc_Sha512 *sha = &key->sha;
 326:../src/wolfcrypt/src/ed25519.c **** #else
 327:../src/wolfcrypt/src/ed25519.c ****         wc_Sha512 sha[1];
 328:../src/wolfcrypt/src/ed25519.c ****         ret = ed25519_hash_init(key, sha);
 605                             		.loc 2 328 15
 606 00bc 72 A5 64 01             		add	#0x164, r10, r5
 607 00c0 EF 52                   		mov.L	r5, r2
 608 00c2 EC 61                   		mov.L	[r6], r1
 609 00c4 05 00 00 00             		bsr	_ed25519_hash_init
 610 00c8 E3 A1                   		mov.L	r1, [r10]
 329:../src/wolfcrypt/src/ed25519.c ****         if (ret < 0)
 611                             		.loc 2 329 12
 612 00ca EC A5                   		mov.L	[r10], r5
 613 00cc 61 05                   		cmp	#0, r5
 614 00ce 28 07                   		bge	.L43
 330:../src/wolfcrypt/src/ed25519.c ****             return ret;
 615                             		.loc 2 330 20
 616 00d0 EC A5                   		mov.L	[r10], r5
 617 00d2 38 39 02                		bra	.L62
 618                             	.L43:
 331:../src/wolfcrypt/src/ed25519.c **** #endif
 332:../src/wolfcrypt/src/ed25519.c **** 
 333:../src/wolfcrypt/src/ed25519.c ****         if (type == Ed25519ctx || type == Ed25519ph) {
 619                             		.loc 2 333 18
 620 00d5 89 65                   		mov.B	4[r6], r5
 621                             		.loc 2 333 12
 622 00d7 5B 55                   		movu.B	r5, r5
 623 00d9 61 05                   		cmp	#0, r5
 624 00db 11                      		beq	.L44
 625                             		.loc 2 333 40 discriminator 1
 626 00dc 89 65                   		mov.B	4[r6], r5
 627                             		.loc 2 333 32 discriminator 1
 628 00de 5B 55                   		movu.B	r5, r5
 629 00e0 61 15                   		cmp	#1, r5
 630 00e2 21 6B                   		bne	.L45
 631                             	.L44:
 334:../src/wolfcrypt/src/ed25519.c ****             ret = ed25519_hash_update(key, sha, ed25519Ctx, ED25519CTX_SIZE);
 632                             		.loc 2 334 19
 633 00e4 72 A5 64 01             		add	#0x164, r10, r5
 634 00e8 75 44 20                		mov.L	#32, r4
 635 00eb FB 32 00 00 00 00       		mov.L	#_ed25519Ctx, r3
 636 00f1 EF 52                   		mov.L	r5, r2
 637 00f3 EC 61                   		mov.L	[r6], r1
 638 00f5 05 00 00 00             		bsr	_ed25519_hash_update
 639 00f9 E3 A1                   		mov.L	r1, [r10]
 335:../src/wolfcrypt/src/ed25519.c ****             if (ret == 0)
 640                             		.loc 2 335 16
 641 00fb EC A5                   		mov.L	[r10], r5
 642 00fd 61 05                   		cmp	#0, r5
 643 00ff 21 15                   		bne	.L46
 336:../src/wolfcrypt/src/ed25519.c ****                 ret = ed25519_hash_update(key, sha, &type, sizeof(type));
 644                             		.loc 2 336 23
 645 0101 71 63 04                		add	#4, r6, r3
 646 0104 72 A5 64 01             		add	#0x164, r10, r5
 647 0108 66 14                   		mov.L	#1, r4
 648 010a EF 52                   		mov.L	r5, r2
 649 010c EC 61                   		mov.L	[r6], r1
 650 010e 05 00 00 00             		bsr	_ed25519_hash_update
 651 0112 E3 A1                   		mov.L	r1, [r10]
 652                             	.L46:
 337:../src/wolfcrypt/src/ed25519.c ****             if (ret == 0)
 653                             		.loc 2 337 16
 654 0114 EC A5                   		mov.L	[r10], r5
 655 0116 61 05                   		cmp	#0, r5
 656 0118 21 15                   		bne	.L47
 338:../src/wolfcrypt/src/ed25519.c ****                 ret = ed25519_hash_update(key, sha, &contextLen,
 657                             		.loc 2 338 23
 658 011a 71 63 0C                		add	#12, r6, r3
 659 011d 72 A5 64 01             		add	#0x164, r10, r5
 660 0121 66 14                   		mov.L	#1, r4
 661 0123 EF 52                   		mov.L	r5, r2
 662 0125 EC 61                   		mov.L	[r6], r1
 663 0127 05 00 00 00             		bsr	_ed25519_hash_update
 664 012b E3 A1                   		mov.L	r1, [r10]
 665                             	.L47:
 339:../src/wolfcrypt/src/ed25519.c ****                                           sizeof(contextLen));
 340:../src/wolfcrypt/src/ed25519.c ****             if (ret == 0 && context != NULL)
 666                             		.loc 2 340 16
 667 012d EC A5                   		mov.L	[r10], r5
 668 012f 61 05                   		cmp	#0, r5
 669 0131 21 1C                   		bne	.L45
 670                             		.loc 2 340 26 discriminator 1
 671 0133 A8 E5                   		mov.L	8[r6], r5
 672 0135 61 05                   		cmp	#0, r5
 673 0137 20 16                   		beq	.L45
 341:../src/wolfcrypt/src/ed25519.c ****                 ret = ed25519_hash_update(key, sha, context, contextLen);
 674                             		.loc 2 341 23
 675 0139 8B 65                   		mov.B	12[r6], r5
 676 013b 5B 54                   		movu.B	r5, r4
 677 013d 72 A5 64 01             		add	#0x164, r10, r5
 678 0141 A8 E3                   		mov.L	8[r6], r3
 679 0143 EF 52                   		mov.L	r5, r2
 680 0145 EC 61                   		mov.L	[r6], r1
 681 0147 05 00 00 00             		bsr	_ed25519_hash_update
 682 014b E3 A1                   		mov.L	r1, [r10]
 683                             		.balign 8,3,1
 684                             	.L45:
 342:../src/wolfcrypt/src/ed25519.c ****         }
 343:../src/wolfcrypt/src/ed25519.c ****         if (ret == 0)
 685                             		.loc 2 343 12
 686 014d EC A5                   		mov.L	[r10], r5
 687 014f 61 05                   		cmp	#0, r5
 688 0151 21 1A                   		bne	.L48
 344:../src/wolfcrypt/src/ed25519.c ****             ret = ed25519_hash_update(key, sha, az + ED25519_KEY_SIZE,
 689                             		.loc 2 344 19
 690 0153 72 A5 24 01             		add	#0x124, r10, r5
 691 0157 71 55 20                		add	#32, r5
 692 015a 72 A2 64 01             		add	#0x164, r10, r2
 693 015e 75 44 20                		mov.L	#32, r4
 694 0161 EF 53                   		mov.L	r5, r3
 695 0163 EC 61                   		mov.L	[r6], r1
 696 0165 05 00 00 00             		bsr	_ed25519_hash_update
 697 0169 E3 A1                   		mov.L	r1, [r10]
 698                             	.L48:
 345:../src/wolfcrypt/src/ed25519.c ****                                       ED25519_KEY_SIZE);
 346:../src/wolfcrypt/src/ed25519.c ****         if (ret == 0)
 699                             		.loc 2 346 12
 700 016b EC A5                   		mov.L	[r10], r5
 701 016d 61 05                   		cmp	#0, r5
 702 016f 21 16                   		bne	.L49
 347:../src/wolfcrypt/src/ed25519.c ****             ret = ed25519_hash_update(key, sha, in, inLen);
 703                             		.loc 2 347 19
 704 0171 72 A5 64 01             		add	#0x164, r10, r5
 705 0175 ED A4 90                		mov.L	576[r10], r4
 706 0178 ED A3 8F                		mov.L	572[r10], r3
 707 017b EF 52                   		mov.L	r5, r2
 708 017d EC 61                   		mov.L	[r6], r1
 709 017f 05 00 00 00             		bsr	_ed25519_hash_update
 710 0183 E3 A1                   		mov.L	r1, [r10]
 711                             	.L49:
 348:../src/wolfcrypt/src/ed25519.c ****         if (ret == 0)
 712                             		.loc 2 348 12
 713 0185 EC A5                   		mov.L	[r10], r5
 714 0187 61 05                   		cmp	#0, r5
 715 0189 21 16                   		bne	.L50
 349:../src/wolfcrypt/src/ed25519.c ****             ret = ed25519_hash_final(key, sha, nonce);
 716                             		.loc 2 349 19
 717 018b 72 A4 A4 00             		add	#0xa4, r10, r4
 718 018f 72 A5 64 01             		add	#0x164, r10, r5
 719 0193 EF 43                   		mov.L	r4, r3
 720 0195 EF 52                   		mov.L	r5, r2
 721 0197 EC 61                   		mov.L	[r6], r1
 722 0199 05 00 00 00             		bsr	_ed25519_hash_final
 723 019d E3 A1                   		mov.L	r1, [r10]
 724                             	.L50:
 350:../src/wolfcrypt/src/ed25519.c **** #ifndef WOLFSSL_ED25519_PERSISTENT_SHA
 351:../src/wolfcrypt/src/ed25519.c ****         ed25519_hash_free(key, sha);
 725                             		.loc 2 351 9
 726 019f 72 A5 64 01             		add	#0x164, r10, r5
 727 01a3 EF 52                   		mov.L	r5, r2
 728 01a5 EC 61                   		mov.L	[r6], r1
 729 01a7 05 00 00 00             		bsr	_ed25519_hash_free
 730                             	.LBE2:
 352:../src/wolfcrypt/src/ed25519.c **** #endif
 353:../src/wolfcrypt/src/ed25519.c ****     }
 354:../src/wolfcrypt/src/ed25519.c **** 
 355:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0)
 731                             		.loc 2 355 8
 732 01ab EC A5                   		mov.L	[r10], r5
 733 01ad 61 05                   		cmp	#0, r5
 734 01af 16                      		beq	.L51
 356:../src/wolfcrypt/src/ed25519.c ****         return ret;
 735                             		.loc 2 356 16
 736 01b0 EC A5                   		mov.L	[r10], r5
 737 01b2 38 59 01                		bra	.L62
 738                             	.L51:
 357:../src/wolfcrypt/src/ed25519.c **** 
 358:../src/wolfcrypt/src/ed25519.c **** #ifdef FREESCALE_LTC_ECC
 359:../src/wolfcrypt/src/ed25519.c ****     ltcPoint.X = &tempBuf[0];
 360:../src/wolfcrypt/src/ed25519.c ****     ltcPoint.Y = &tempBuf[32];
 361:../src/wolfcrypt/src/ed25519.c ****     LTC_PKHA_sc_reduce(nonce);
 362:../src/wolfcrypt/src/ed25519.c ****     LTC_PKHA_Ed25519_PointMul(LTC_PKHA_Ed25519_BasePoint(), nonce,
 363:../src/wolfcrypt/src/ed25519.c ****            ED25519_KEY_SIZE, &ltcPoint, kLTC_Ed25519 /* result on Ed25519 */);
 364:../src/wolfcrypt/src/ed25519.c ****     LTC_PKHA_Ed25519_Compress(&ltcPoint, out);
 365:../src/wolfcrypt/src/ed25519.c **** #else
 366:../src/wolfcrypt/src/ed25519.c ****     sc_reduce(nonce);
 739                             		.loc 2 366 5
 740 01b5 72 A5 A4 00             		add	#0xa4, r10, r5
 741 01b9 EF 51                   		mov.L	r5, r1
 742 01bb 05 00 00 00             		bsr	_sc_reduce
 367:../src/wolfcrypt/src/ed25519.c **** 
 368:../src/wolfcrypt/src/ed25519.c ****     /* step 2: computing R = rB where rB is the scalar multiplication of
 369:../src/wolfcrypt/src/ed25519.c ****        r and B */
 370:../src/wolfcrypt/src/ed25519.c ****     ge_scalarmult_base(&R,nonce);
 743                             		.loc 2 370 5
 744 01bf 72 A4 A4 00             		add	#0xa4, r10, r4
 745 01c3 71 A5 04                		add	#4, r10, r5
 746 01c6 EF 42                   		mov.L	r4, r2
 747 01c8 EF 51                   		mov.L	r5, r1
 748 01ca 05 00 00 00             		bsr	_ge_scalarmult_base
 371:../src/wolfcrypt/src/ed25519.c ****     ge_p3_tobytes(out,&R);
 749                             		.loc 2 371 5
 750 01ce 71 A5 04                		add	#4, r10, r5
 751 01d1 EF 52                   		mov.L	r5, r2
 752 01d3 ED A1 91                		mov.L	580[r10], r1
 753 01d6 05 00 00 00             		bsr	_ge_p3_tobytes
 754                             	.LBB3:
 372:../src/wolfcrypt/src/ed25519.c **** #endif
 373:../src/wolfcrypt/src/ed25519.c **** 
 374:../src/wolfcrypt/src/ed25519.c ****     /* step 3: hash R + public key + message getting H(R,A,M) then
 375:../src/wolfcrypt/src/ed25519.c ****        creating S = (r + H(R,A,M)a) mod l */
 376:../src/wolfcrypt/src/ed25519.c ****     {
 377:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
 378:../src/wolfcrypt/src/ed25519.c ****         wc_Sha512 *sha = &key->sha;
 379:../src/wolfcrypt/src/ed25519.c **** #else
 380:../src/wolfcrypt/src/ed25519.c ****         wc_Sha512 sha[1];
 381:../src/wolfcrypt/src/ed25519.c ****         ret = ed25519_hash_init(key, sha);
 755                             		.loc 2 381 15
 756 01da 72 A5 64 01             		add	#0x164, r10, r5
 757 01de EF 52                   		mov.L	r5, r2
 758 01e0 EC 61                   		mov.L	[r6], r1
 759 01e2 05 00 00 00             		bsr	_ed25519_hash_init
 760 01e6 E3 A1                   		mov.L	r1, [r10]
 382:../src/wolfcrypt/src/ed25519.c ****         if (ret < 0)
 761                             		.loc 2 382 12
 762 01e8 EC A5                   		mov.L	[r10], r5
 763 01ea 61 05                   		cmp	#0, r5
 764 01ec 28 07                   		bge	.L52
 383:../src/wolfcrypt/src/ed25519.c ****             return ret;
 765                             		.loc 2 383 20
 766 01ee EC A5                   		mov.L	[r10], r5
 767 01f0 38 1B 01                		bra	.L62
 768                             	.L52:
 384:../src/wolfcrypt/src/ed25519.c **** #endif
 385:../src/wolfcrypt/src/ed25519.c **** 
 386:../src/wolfcrypt/src/ed25519.c ****         if (type == Ed25519ctx || type == Ed25519ph) {
 769                             		.loc 2 386 18
 770 01f3 89 65                   		mov.B	4[r6], r5
 771                             		.loc 2 386 12
 772 01f5 5B 55                   		movu.B	r5, r5
 773 01f7 61 05                   		cmp	#0, r5
 774 01f9 11                      		beq	.L53
 775                             		.loc 2 386 40 discriminator 1
 776 01fa 89 65                   		mov.B	4[r6], r5
 777                             		.loc 2 386 32 discriminator 1
 778 01fc 5B 55                   		movu.B	r5, r5
 779 01fe 61 15                   		cmp	#1, r5
 780 0200 21 6B                   		bne	.L54
 781                             	.L53:
 387:../src/wolfcrypt/src/ed25519.c ****             ret = ed25519_hash_update(key, sha, ed25519Ctx, ED25519CTX_SIZE);
 782                             		.loc 2 387 19
 783 0202 72 A5 64 01             		add	#0x164, r10, r5
 784 0206 75 44 20                		mov.L	#32, r4
 785 0209 FB 32 00 00 00 00       		mov.L	#_ed25519Ctx, r3
 786 020f EF 52                   		mov.L	r5, r2
 787 0211 EC 61                   		mov.L	[r6], r1
 788 0213 05 00 00 00             		bsr	_ed25519_hash_update
 789 0217 E3 A1                   		mov.L	r1, [r10]
 388:../src/wolfcrypt/src/ed25519.c ****             if (ret == 0)
 790                             		.loc 2 388 16
 791 0219 EC A5                   		mov.L	[r10], r5
 792 021b 61 05                   		cmp	#0, r5
 793 021d 21 15                   		bne	.L55
 389:../src/wolfcrypt/src/ed25519.c ****                 ret = ed25519_hash_update(key, sha, &type, sizeof(type));
 794                             		.loc 2 389 23
 795 021f 71 63 04                		add	#4, r6, r3
 796 0222 72 A5 64 01             		add	#0x164, r10, r5
 797 0226 66 14                   		mov.L	#1, r4
 798 0228 EF 52                   		mov.L	r5, r2
 799 022a EC 61                   		mov.L	[r6], r1
 800 022c 05 00 00 00             		bsr	_ed25519_hash_update
 801 0230 E3 A1                   		mov.L	r1, [r10]
 802                             	.L55:
 390:../src/wolfcrypt/src/ed25519.c ****             if (ret == 0)
 803                             		.loc 2 390 16
 804 0232 EC A5                   		mov.L	[r10], r5
 805 0234 61 05                   		cmp	#0, r5
 806 0236 21 15                   		bne	.L56
 391:../src/wolfcrypt/src/ed25519.c ****                 ret = ed25519_hash_update(key, sha, &contextLen,
 807                             		.loc 2 391 23
 808 0238 71 63 0C                		add	#12, r6, r3
 809 023b 72 A5 64 01             		add	#0x164, r10, r5
 810 023f 66 14                   		mov.L	#1, r4
 811 0241 EF 52                   		mov.L	r5, r2
 812 0243 EC 61                   		mov.L	[r6], r1
 813 0245 05 00 00 00             		bsr	_ed25519_hash_update
 814 0249 E3 A1                   		mov.L	r1, [r10]
 815                             	.L56:
 392:../src/wolfcrypt/src/ed25519.c ****                                           sizeof(contextLen));
 393:../src/wolfcrypt/src/ed25519.c ****             if (ret == 0 && context != NULL)
 816                             		.loc 2 393 16
 817 024b EC A5                   		mov.L	[r10], r5
 818 024d 61 05                   		cmp	#0, r5
 819 024f 21 1C                   		bne	.L54
 820                             		.loc 2 393 26 discriminator 1
 821 0251 A8 E5                   		mov.L	8[r6], r5
 822 0253 61 05                   		cmp	#0, r5
 823 0255 20 16                   		beq	.L54
 394:../src/wolfcrypt/src/ed25519.c ****                 ret = ed25519_hash_update(key, sha, context, contextLen);
 824                             		.loc 2 394 23
 825 0257 8B 65                   		mov.B	12[r6], r5
 826 0259 5B 54                   		movu.B	r5, r4
 827 025b 72 A5 64 01             		add	#0x164, r10, r5
 828 025f A8 E3                   		mov.L	8[r6], r3
 829 0261 EF 52                   		mov.L	r5, r2
 830 0263 EC 61                   		mov.L	[r6], r1
 831 0265 05 00 00 00             		bsr	_ed25519_hash_update
 832 0269 E3 A1                   		mov.L	r1, [r10]
 833                             		.balign 8,3,1
 834                             	.L54:
 395:../src/wolfcrypt/src/ed25519.c ****         }
 396:../src/wolfcrypt/src/ed25519.c ****         if (ret == 0)
 835                             		.loc 2 396 12
 836 026b EC A5                   		mov.L	[r10], r5
 837 026d 61 05                   		cmp	#0, r5
 838 026f 21 16                   		bne	.L57
 397:../src/wolfcrypt/src/ed25519.c ****             ret = ed25519_hash_update(key, sha, out, ED25519_SIG_SIZE/2);
 839                             		.loc 2 397 19
 840 0271 72 A5 64 01             		add	#0x164, r10, r5
 841 0275 75 44 20                		mov.L	#32, r4
 842 0278 ED A3 91                		mov.L	580[r10], r3
 843 027b EF 52                   		mov.L	r5, r2
 844 027d EC 61                   		mov.L	[r6], r1
 845 027f 05 00 00 00             		bsr	_ed25519_hash_update
 846 0283 E3 A1                   		mov.L	r1, [r10]
 847                             	.L57:
 398:../src/wolfcrypt/src/ed25519.c ****         if (ret == 0)
 848                             		.loc 2 398 12
 849 0285 EC A5                   		mov.L	[r10], r5
 850 0287 61 05                   		cmp	#0, r5
 851 0289 21 15                   		bne	.L58
 399:../src/wolfcrypt/src/ed25519.c ****             ret = ed25519_hash_update(key, sha, key->p, ED25519_PUB_KEY_SIZE);
 852                             		.loc 2 399 52
 853 028b EC 63                   		mov.L	[r6], r3
 854                             		.loc 2 399 19
 855 028d 72 A5 64 01             		add	#0x164, r10, r5
 856 0291 75 44 20                		mov.L	#32, r4
 857 0294 EF 52                   		mov.L	r5, r2
 858 0296 EC 61                   		mov.L	[r6], r1
 859 0298 05 00 00 00             		bsr	_ed25519_hash_update
 860 029c E3 A1                   		mov.L	r1, [r10]
 861                             	.L58:
 400:../src/wolfcrypt/src/ed25519.c ****         if (ret == 0)
 862                             		.loc 2 400 12
 863 029e EC A5                   		mov.L	[r10], r5
 864 02a0 61 05                   		cmp	#0, r5
 865 02a2 21 16                   		bne	.L59
 401:../src/wolfcrypt/src/ed25519.c ****             ret = ed25519_hash_update(key, sha, in, inLen);
 866                             		.loc 2 401 19
 867 02a4 72 A5 64 01             		add	#0x164, r10, r5
 868 02a8 ED A4 90                		mov.L	576[r10], r4
 869 02ab ED A3 8F                		mov.L	572[r10], r3
 870 02ae EF 52                   		mov.L	r5, r2
 871 02b0 EC 61                   		mov.L	[r6], r1
 872 02b2 05 00 00 00             		bsr	_ed25519_hash_update
 873 02b6 E3 A1                   		mov.L	r1, [r10]
 874                             	.L59:
 402:../src/wolfcrypt/src/ed25519.c ****         if (ret == 0)
 875                             		.loc 2 402 12
 876 02b8 EC A5                   		mov.L	[r10], r5
 877 02ba 61 05                   		cmp	#0, r5
 878 02bc 21 16                   		bne	.L60
 403:../src/wolfcrypt/src/ed25519.c ****             ret = ed25519_hash_final(key, sha, hram);
 879                             		.loc 2 403 19
 880 02be 72 A4 E4 00             		add	#0xe4, r10, r4
 881 02c2 72 A5 64 01             		add	#0x164, r10, r5
 882 02c6 EF 43                   		mov.L	r4, r3
 883 02c8 EF 52                   		mov.L	r5, r2
 884 02ca EC 61                   		mov.L	[r6], r1
 885 02cc 05 00 00 00             		bsr	_ed25519_hash_final
 886 02d0 E3 A1                   		mov.L	r1, [r10]
 887                             	.L60:
 404:../src/wolfcrypt/src/ed25519.c **** #ifndef WOLFSSL_ED25519_PERSISTENT_SHA
 405:../src/wolfcrypt/src/ed25519.c ****         ed25519_hash_free(key, sha);
 888                             		.loc 2 405 9
 889 02d2 72 A5 64 01             		add	#0x164, r10, r5
 890 02d6 EF 52                   		mov.L	r5, r2
 891 02d8 EC 61                   		mov.L	[r6], r1
 892 02da 05 00 00 00             		bsr	_ed25519_hash_free
 893                             	.LBE3:
 406:../src/wolfcrypt/src/ed25519.c **** #endif
 407:../src/wolfcrypt/src/ed25519.c ****     }
 408:../src/wolfcrypt/src/ed25519.c **** 
 409:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0)
 894                             		.loc 2 409 8
 895 02de EC A5                   		mov.L	[r10], r5
 896 02e0 61 05                   		cmp	#0, r5
 897 02e2 15                      		beq	.L61
 410:../src/wolfcrypt/src/ed25519.c ****         return ret;
 898                             		.loc 2 410 16
 899 02e3 EC A5                   		mov.L	[r10], r5
 900 02e5 2E 26                   		bra	.L62
 901                             	.L61:
 411:../src/wolfcrypt/src/ed25519.c **** 
 412:../src/wolfcrypt/src/ed25519.c **** #ifdef FREESCALE_LTC_ECC
 413:../src/wolfcrypt/src/ed25519.c ****     LTC_PKHA_sc_reduce(hram);
 414:../src/wolfcrypt/src/ed25519.c ****     LTC_PKHA_sc_muladd(out + (ED25519_SIG_SIZE/2), hram, az, nonce);
 415:../src/wolfcrypt/src/ed25519.c **** #else
 416:../src/wolfcrypt/src/ed25519.c ****     sc_reduce(hram);
 902                             		.loc 2 416 5
 903 02e7 72 A5 E4 00             		add	#0xe4, r10, r5
 904 02eb EF 51                   		mov.L	r5, r1
 905 02ed 05 00 00 00             		bsr	_sc_reduce
 417:../src/wolfcrypt/src/ed25519.c ****     sc_muladd(out + (ED25519_SIG_SIZE/2), hram, az, nonce);
 906                             		.loc 2 417 5
 907 02f1 ED A5 91                		mov.L	580[r10], r5
 908 02f4 71 55 20                		add	#32, r5
 909 02f7 72 A4 A4 00             		add	#0xa4, r10, r4
 910 02fb 72 A3 24 01             		add	#0x124, r10, r3
 911 02ff 72 A2 E4 00             		add	#0xe4, r10, r2
 912 0303 EF 51                   		mov.L	r5, r1
 913 0305 05 00 00 00             		bsr	_sc_muladd
 418:../src/wolfcrypt/src/ed25519.c **** #endif
 419:../src/wolfcrypt/src/ed25519.c **** #endif /* WOLFSSL_SE050 */
 420:../src/wolfcrypt/src/ed25519.c ****     return ret;
 914                             		.loc 2 420 12
 915 0309 EC A5                   		mov.L	[r10], r5
 916                             		.balign 8,3,1
 917                             	.L62:
 421:../src/wolfcrypt/src/ed25519.c **** }
 918                             		.loc 2 421 1 discriminator 1
 919 030b EF 51                   		mov.L	r5, r1
 920 030d 72 00 5C 02             		add	#0x25c, r0
 921 0311 7E B6                   		pop	r6
 922 0313 7E BA                   		pop	r10
 923 0315 02                      		rts
 924                             	.LFE50:
 926 0316 EF 00                   		.section	.text.wc_ed25519_sign_msg,"ax",@progbits
 927                             		.global	_wc_ed25519_sign_msg
 929                             	_wc_ed25519_sign_msg:
 930                             	.LFB51:
 422:../src/wolfcrypt/src/ed25519.c **** 
 423:../src/wolfcrypt/src/ed25519.c **** /*
 424:../src/wolfcrypt/src/ed25519.c ****     in     contains the message to sign
 425:../src/wolfcrypt/src/ed25519.c ****     inLen  is the length of the message to sign
 426:../src/wolfcrypt/src/ed25519.c ****     out    is the buffer to write the signature
 427:../src/wolfcrypt/src/ed25519.c ****     outLen [in/out] input size of out buf
 428:../src/wolfcrypt/src/ed25519.c ****                      output gets set as the final length of out
 429:../src/wolfcrypt/src/ed25519.c ****     key    is the ed25519 key to use when signing
 430:../src/wolfcrypt/src/ed25519.c ****     return 0 on success
 431:../src/wolfcrypt/src/ed25519.c ****  */
 432:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_sign_msg(const byte* in, word32 inLen, byte* out,
 433:../src/wolfcrypt/src/ed25519.c ****                         word32 *outLen, ed25519_key* key)
 434:../src/wolfcrypt/src/ed25519.c **** {
 931                             		.loc 2 434 1
 932 0000 7E AA                   		push.l	r10
 933                             	.LCFI21:
 934 0002 71 0A EC                		add	#-20, r0, r10
 935                             	.LCFI22:
 936 0005 71 A0 F0                		add	#-16, r10, r0
 937                             	.LCFI23:
 938 0008 75 45 1C                		mov.L	#28, r5
 939 000b 4B A5                   		add	r10, r5
 940 000d E3 A1                   		mov.L	r1, [r10]
 941 000f E7 A2 01                		mov.L	r2, 4[r10]
 942 0012 E7 A3 02                		mov.L	r3, 8[r10]
 943 0015 E7 A4 03                		mov.L	r4, 12[r10]
 435:../src/wolfcrypt/src/ed25519.c ****     return wc_ed25519_sign_msg_ex(in, inLen, out, outLen, key, (byte)Ed25519,
 944                             		.loc 2 435 12
 945 0018 3C 0C 00                		mov.B	#0, 12[r0]
 946 001b 3E 02 00                		mov.L	#0, 8[r0]
 947 001e F9 04 04 FF             		mov.B	#-1, 4[r0]
 948 0022 EC 55                   		mov.L	[r5], r5
 949 0024 E3 05                   		mov.L	r5, [r0]
 950 0026 ED A4 03                		mov.L	12[r10], r4
 951 0029 ED A3 02                		mov.L	8[r10], r3
 952 002c ED A2 01                		mov.L	4[r10], r2
 953 002f EC A1                   		mov.L	[r10], r1
 954 0031 05 00 00 00             		bsr	_wc_ed25519_sign_msg_ex
 955 0035 EF 15                   		mov.L	r1, r5
 436:../src/wolfcrypt/src/ed25519.c ****         NULL, 0);
 437:../src/wolfcrypt/src/ed25519.c **** }
 956                             		.loc 2 437 1
 957 0037 EF 51                   		mov.L	r5, r1
 958 0039 3F AA 0A                		rtsd	#40, r10-r10
 959                             	.LFE51:
 961                             		.section	.text.wc_ed25519ctx_sign_msg,"ax",@progbits
 962                             		.global	_wc_ed25519ctx_sign_msg
 964                             	_wc_ed25519ctx_sign_msg:
 965                             	.LFB52:
 438:../src/wolfcrypt/src/ed25519.c **** 
 439:../src/wolfcrypt/src/ed25519.c **** /*
 440:../src/wolfcrypt/src/ed25519.c ****     in          contains the message to sign
 441:../src/wolfcrypt/src/ed25519.c ****     inLen       is the length of the message to sign
 442:../src/wolfcrypt/src/ed25519.c ****     out         is the buffer to write the signature
 443:../src/wolfcrypt/src/ed25519.c ****     outLen      [in/out] input size of out buf
 444:../src/wolfcrypt/src/ed25519.c ****                           output gets set as the final length of out
 445:../src/wolfcrypt/src/ed25519.c ****     key         is the ed25519 key to use when signing
 446:../src/wolfcrypt/src/ed25519.c ****     context     extra signing data
 447:../src/wolfcrypt/src/ed25519.c ****     contextLen  length of extra signing data
 448:../src/wolfcrypt/src/ed25519.c ****     return 0 on success
 449:../src/wolfcrypt/src/ed25519.c ****  */
 450:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519ctx_sign_msg(const byte* in, word32 inLen, byte* out,
 451:../src/wolfcrypt/src/ed25519.c ****                            word32 *outLen, ed25519_key* key,
 452:../src/wolfcrypt/src/ed25519.c ****                            const byte* context, byte contextLen)
 453:../src/wolfcrypt/src/ed25519.c **** {
 966                             		.loc 2 453 1
 967 0000 7E AA                   		push.l	r10
 968                             	.LCFI24:
 969 0002 71 0A E4                		add	#-28, r0, r10
 970                             	.LCFI25:
 971 0005 71 A0 F0                		add	#-16, r10, r0
 972                             	.LCFI26:
 973 0008 75 45 24                		mov.L	#36, r5
 974 000b 4B A5                   		add	r10, r5
 975 000d E3 A1                   		mov.L	r1, [r10]
 976 000f E7 A2 01                		mov.L	r2, 4[r10]
 977 0012 E7 A3 02                		mov.L	r3, 8[r10]
 978 0015 E7 A4 03                		mov.L	r4, 12[r10]
 454:../src/wolfcrypt/src/ed25519.c ****     return wc_ed25519_sign_msg_ex(in, inLen, out, outLen, key, Ed25519ctx,
 979                             		.loc 2 454 12
 980 0018 8A 54                   		mov.B	8[r5], r4
 981 001a 83 04                   		mov.B	r4, 12[r0]
 982 001c A8 5C                   		mov.L	4[r5], r4
 983 001e A0 84                   		mov.L	r4, 8[r0]
 984 0020 3C 04 00                		mov.B	#0, 4[r0]
 985 0023 EC 55                   		mov.L	[r5], r5
 986 0025 E3 05                   		mov.L	r5, [r0]
 987 0027 ED A4 03                		mov.L	12[r10], r4
 988 002a ED A3 02                		mov.L	8[r10], r3
 989 002d ED A2 01                		mov.L	4[r10], r2
 990 0030 EC A1                   		mov.L	[r10], r1
 991 0032 05 00 00 00             		bsr	_wc_ed25519_sign_msg_ex
 992 0036 EF 15                   		mov.L	r1, r5
 455:../src/wolfcrypt/src/ed25519.c ****                                                            context, contextLen);
 456:../src/wolfcrypt/src/ed25519.c **** }
 993                             		.loc 2 456 1
 994 0038 EF 51                   		mov.L	r5, r1
 995 003a 3F AA 0C                		rtsd	#48, r10-r10
 996                             	.LFE52:
 998                             		.section	.text.wc_ed25519ph_sign_hash,"ax",@progbits
 999                             		.global	_wc_ed25519ph_sign_hash
 1001                             	_wc_ed25519ph_sign_hash:
 1002                             	.LFB53:
 457:../src/wolfcrypt/src/ed25519.c **** 
 458:../src/wolfcrypt/src/ed25519.c **** /*
 459:../src/wolfcrypt/src/ed25519.c ****     hash        contains the SHA-512 hash of the message to sign
 460:../src/wolfcrypt/src/ed25519.c ****     hashLen     is the length of the SHA-512 hash of the message to sign
 461:../src/wolfcrypt/src/ed25519.c ****     out         is the buffer to write the signature
 462:../src/wolfcrypt/src/ed25519.c ****     outLen      [in/out] input size of out buf
 463:../src/wolfcrypt/src/ed25519.c ****                           output gets set as the final length of out
 464:../src/wolfcrypt/src/ed25519.c ****     key         is the ed25519 key to use when signing
 465:../src/wolfcrypt/src/ed25519.c ****     context     extra signing data
 466:../src/wolfcrypt/src/ed25519.c ****     contextLen  length of extra signing data
 467:../src/wolfcrypt/src/ed25519.c ****     return 0 on success
 468:../src/wolfcrypt/src/ed25519.c ****  */
 469:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519ph_sign_hash(const byte* hash, word32 hashLen, byte* out,
 470:../src/wolfcrypt/src/ed25519.c ****                            word32 *outLen, ed25519_key* key,
 471:../src/wolfcrypt/src/ed25519.c ****                            const byte* context, byte contextLen)
 472:../src/wolfcrypt/src/ed25519.c **** {
 1003                             		.loc 2 472 1
 1004 0000 7E AA                   		push.l	r10
 1005                             	.LCFI27:
 1006 0002 71 0A E4                		add	#-28, r0, r10
 1007                             	.LCFI28:
 1008 0005 71 A0 F0                		add	#-16, r10, r0
 1009                             	.LCFI29:
 1010 0008 75 45 24                		mov.L	#36, r5
 1011 000b 4B A5                   		add	r10, r5
 1012 000d E3 A1                   		mov.L	r1, [r10]
 1013 000f E7 A2 01                		mov.L	r2, 4[r10]
 1014 0012 E7 A3 02                		mov.L	r3, 8[r10]
 1015 0015 E7 A4 03                		mov.L	r4, 12[r10]
 473:../src/wolfcrypt/src/ed25519.c ****     return wc_ed25519_sign_msg_ex(hash, hashLen, out, outLen, key, Ed25519ph,
 1016                             		.loc 2 473 12
 1017 0018 8A 54                   		mov.B	8[r5], r4
 1018 001a 83 04                   		mov.B	r4, 12[r0]
 1019 001c A8 5C                   		mov.L	4[r5], r4
 1020 001e A0 84                   		mov.L	r4, 8[r0]
 1021 0020 3C 04 01                		mov.B	#1, 4[r0]
 1022 0023 EC 55                   		mov.L	[r5], r5
 1023 0025 E3 05                   		mov.L	r5, [r0]
 1024 0027 ED A4 03                		mov.L	12[r10], r4
 1025 002a ED A3 02                		mov.L	8[r10], r3
 1026 002d ED A2 01                		mov.L	4[r10], r2
 1027 0030 EC A1                   		mov.L	[r10], r1
 1028 0032 05 00 00 00             		bsr	_wc_ed25519_sign_msg_ex
 1029 0036 EF 15                   		mov.L	r1, r5
 474:../src/wolfcrypt/src/ed25519.c ****                                                            context, contextLen);
 475:../src/wolfcrypt/src/ed25519.c **** }
 1030                             		.loc 2 475 1
 1031 0038 EF 51                   		mov.L	r5, r1
 1032 003a 3F AA 0C                		rtsd	#48, r10-r10
 1033                             	.LFE53:
 1035                             		.section	.text.wc_ed25519ph_sign_msg,"ax",@progbits
 1036                             		.global	_wc_ed25519ph_sign_msg
 1038                             	_wc_ed25519ph_sign_msg:
 1039                             	.LFB54:
 476:../src/wolfcrypt/src/ed25519.c **** 
 477:../src/wolfcrypt/src/ed25519.c **** /*
 478:../src/wolfcrypt/src/ed25519.c ****     in          contains the message to sign
 479:../src/wolfcrypt/src/ed25519.c ****     inLen       is the length of the message to sign
 480:../src/wolfcrypt/src/ed25519.c ****     out         is the buffer to write the signature
 481:../src/wolfcrypt/src/ed25519.c ****     outLen      [in/out] input size of out buf
 482:../src/wolfcrypt/src/ed25519.c ****                           output gets set as the final length of out
 483:../src/wolfcrypt/src/ed25519.c ****     key         is the ed25519 key to use when signing
 484:../src/wolfcrypt/src/ed25519.c ****     context     extra signing data
 485:../src/wolfcrypt/src/ed25519.c ****     contextLen  length of extra signing data
 486:../src/wolfcrypt/src/ed25519.c ****     return 0 on success
 487:../src/wolfcrypt/src/ed25519.c ****  */
 488:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519ph_sign_msg(const byte* in, word32 inLen, byte* out,
 489:../src/wolfcrypt/src/ed25519.c ****                           word32 *outLen, ed25519_key* key,
 490:../src/wolfcrypt/src/ed25519.c ****                           const byte* context, byte contextLen)
 491:../src/wolfcrypt/src/ed25519.c **** {
 1040                             		.loc 2 491 1
 1041 0000 7E AA                   		push.l	r10
 1042                             	.LCFI30:
 1043 0002 7E A6                   		push.l	r6
 1044                             	.LCFI31:
 1045 0004 71 0A A0                		add	#-96, r0, r10
 1046                             	.LCFI32:
 1047 0007 71 A0 F0                		add	#-16, r10, r0
 1048                             	.LCFI33:
 1049 000a 75 46 6C                		mov.L	#0x6c, r6
 1050 000d 4B A6                   		add	r10, r6
 1051 000f E7 A1 11                		mov.L	r1, 68[r10]
 1052 0012 E7 A2 12                		mov.L	r2, 72[r10]
 1053 0015 E7 A3 13                		mov.L	r3, 76[r10]
 1054 0018 E7 A4 14                		mov.L	r4, 80[r10]
 492:../src/wolfcrypt/src/ed25519.c ****     int  ret;
 493:../src/wolfcrypt/src/ed25519.c ****     byte hash[WC_SHA512_DIGEST_SIZE];
 494:../src/wolfcrypt/src/ed25519.c **** 
 495:../src/wolfcrypt/src/ed25519.c ****     ret = ed25519_hash(key, in, inLen, hash);
 1055                             		.loc 2 495 11
 1056 001b 71 A5 04                		add	#4, r10, r5
 1057 001e EF 54                   		mov.L	r5, r4
 1058 0020 ED A3 12                		mov.L	72[r10], r3
 1059 0023 ED A2 11                		mov.L	68[r10], r2
 1060 0026 EC 61                   		mov.L	[r6], r1
 1061 0028 05 00 00 00             		bsr	_ed25519_hash
 1062 002c E3 A1                   		mov.L	r1, [r10]
 496:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0)
 1063                             		.loc 2 496 8
 1064 002e EC A5                   		mov.L	[r10], r5
 1065 0030 61 05                   		cmp	#0, r5
 1066 0032 15                      		beq	.L70
 497:../src/wolfcrypt/src/ed25519.c ****         return ret;
 1067                             		.loc 2 497 16
 1068 0033 EC A5                   		mov.L	[r10], r5
 1069 0035 2E 25                   		bra	.L72
 1070                             	.L70:
 498:../src/wolfcrypt/src/ed25519.c **** 
 499:../src/wolfcrypt/src/ed25519.c ****     return wc_ed25519_sign_msg_ex(hash, sizeof(hash), out, outLen, key,
 1071                             		.loc 2 499 12
 1072 0037 71 A5 04                		add	#4, r10, r5
 1073 003a 8A 64                   		mov.B	8[r6], r4
 1074 003c 83 04                   		mov.B	r4, 12[r0]
 1075 003e A8 6C                   		mov.L	4[r6], r4
 1076 0040 A0 84                   		mov.L	r4, 8[r0]
 1077 0042 3C 04 01                		mov.B	#1, 4[r0]
 1078 0045 EC 64                   		mov.L	[r6], r4
 1079 0047 E3 04                   		mov.L	r4, [r0]
 1080 0049 ED A4 14                		mov.L	80[r10], r4
 1081 004c ED A3 13                		mov.L	76[r10], r3
 1082 004f 75 42 40                		mov.L	#0x40, r2
 1083 0052 EF 51                   		mov.L	r5, r1
 1084 0054 05 00 00 00             		bsr	_wc_ed25519_sign_msg_ex
 1085 0058 EF 15                   		mov.L	r1, r5
 1086                             	.L72:
 500:../src/wolfcrypt/src/ed25519.c ****                                                 Ed25519ph, context, contextLen);
 501:../src/wolfcrypt/src/ed25519.c **** }
 1087                             		.loc 2 501 1 discriminator 1
 1088 005a EF 51                   		mov.L	r5, r1
 1089 005c 71 00 70                		add	#0x70, r0
 1090 005f 7E B6                   		pop	r6
 1091 0061 7E BA                   		pop	r10
 1092 0063 02                      		rts
 1093                             	.LFE54:
 1095                             		.section	.text.ed25519_verify_msg_init_with_sha,"ax",@progbits
 1097                             	_ed25519_verify_msg_init_with_sha:
 1098                             	.LFB55:
 502:../src/wolfcrypt/src/ed25519.c **** #endif /* HAVE_ED25519_SIGN */
 503:../src/wolfcrypt/src/ed25519.c **** 
 504:../src/wolfcrypt/src/ed25519.c **** #ifdef HAVE_ED25519_VERIFY
 505:../src/wolfcrypt/src/ed25519.c **** #ifndef WOLFSSL_SE050
 506:../src/wolfcrypt/src/ed25519.c **** /*
 507:../src/wolfcrypt/src/ed25519.c ****    sig        is array of bytes containing the signature
 508:../src/wolfcrypt/src/ed25519.c ****    sigLen     is the length of sig byte array
 509:../src/wolfcrypt/src/ed25519.c ****    key        Ed25519 public key
 510:../src/wolfcrypt/src/ed25519.c ****    return     0 on success
 511:../src/wolfcrypt/src/ed25519.c ****    type       variant to use -- Ed25519, Ed25519ctx, or Ed25519ph
 512:../src/wolfcrypt/src/ed25519.c ****    context    extra signing data
 513:../src/wolfcrypt/src/ed25519.c ****    contextLen length of extra signing data
 514:../src/wolfcrypt/src/ed25519.c **** */
 515:../src/wolfcrypt/src/ed25519.c **** static int ed25519_verify_msg_init_with_sha(const byte* sig, word32 sigLen,
 516:../src/wolfcrypt/src/ed25519.c ****                                             ed25519_key* key, wc_Sha512 *sha,
 517:../src/wolfcrypt/src/ed25519.c ****                                             byte type, const byte* context,
 518:../src/wolfcrypt/src/ed25519.c ****                                             byte contextLen)
 519:../src/wolfcrypt/src/ed25519.c **** {
 1099                             		.loc 2 519 1
 1100 0000 7E AA                   		push.l	r10
 1101                             	.LCFI34:
 1102 0002 7E A6                   		push.l	r6
 1103                             	.LCFI35:
 1104 0004 71 0A E0                		add	#-32, r0, r10
 1105                             	.LCFI36:
 1106 0007 EF A0                   		mov.L	r10, r0
 1107 0009 75 46 2C                		mov.L	#44, r6
 1108 000c 4B A6                   		add	r10, r6
 1109 000e E7 A1 01                		mov.L	r1, 4[r10]
 1110 0011 E7 A2 02                		mov.L	r2, 8[r10]
 1111 0014 E7 A3 03                		mov.L	r3, 12[r10]
 1112 0017 E7 A4 04                		mov.L	r4, 16[r10]
 520:../src/wolfcrypt/src/ed25519.c ****     int ret;
 521:../src/wolfcrypt/src/ed25519.c **** 
 522:../src/wolfcrypt/src/ed25519.c ****     /* sanity check on arguments */
 523:../src/wolfcrypt/src/ed25519.c ****     if (sig == NULL || key == NULL ||
 1113                             		.loc 2 523 8
 1114 001a ED A5 01                		mov.L	4[r10], r5
 1115 001d 61 05                   		cmp	#0, r5
 1116 001f 20 16                   		beq	.L74
 1117                             		.loc 2 523 21 discriminator 1
 1118 0021 ED A5 03                		mov.L	12[r10], r5
 1119 0024 61 05                   		cmp	#0, r5
 1120 0026 20 0F                   		beq	.L74
 1121                             		.loc 2 523 36 discriminator 2
 1122 0028 A8 6D                   		mov.L	4[r6], r5
 1123 002a 61 05                   		cmp	#0, r5
 1124 002c 21 10                   		bne	.L75
 524:../src/wolfcrypt/src/ed25519.c ****         (context == NULL && contextLen != 0)) {
 1125                             		.loc 2 524 40
 1126 002e 8A 65                   		mov.B	8[r6], r5
 1127                             		.loc 2 524 26
 1128 0030 5B 55                   		movu.B	r5, r5
 1129 0032 61 05                   		cmp	#0, r5
 1130 0034 10                      		beq	.L75
 1131                             	.L74:
 525:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 1132                             		.loc 2 525 16
 1133 0035 FB 5A 53 FF             		mov.L	#-173, r5
 1134 0039 38 CD 00                		bra	.L76
 1135                             	.L75:
 526:../src/wolfcrypt/src/ed25519.c ****     }
 527:../src/wolfcrypt/src/ed25519.c **** 
 528:../src/wolfcrypt/src/ed25519.c ****     /* check on basics needed to verify signature */
 529:../src/wolfcrypt/src/ed25519.c ****     if (sigLen != ED25519_SIG_SIZE || (sig[ED25519_SIG_SIZE-1] & 224))
 1136                             		.loc 2 529 8
 1137 003c ED A5 02                		mov.L	8[r10], r5
 1138 003f 75 55 40                		cmp	#0x40, r5
 1139 0042 21 13                   		bne	.L77
 1140                             		.loc 2 529 43 discriminator 1
 1141 0044 ED A5 01                		mov.L	4[r10], r5
 1142 0047 71 55 3F                		add	#63, r5
 1143 004a CC 55                   		mov.B	[r5], r5
 1144                             		.loc 2 529 64 discriminator 1
 1145 004c 5B 55                   		movu.B	r5, r5
 1146 004e 76 25 E0 00             		and	#0xe0, r5
 1147                             		.loc 2 529 36 discriminator 1
 1148 0052 61 05                   		cmp	#0, r5
 1149 0054 10                      		beq	.L78
 1150                             	.L77:
 530:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 1151                             		.loc 2 530 16
 1152 0055 FB 5A 53 FF             		mov.L	#-173, r5
 1153 0059 38 AD 00                		bra	.L76
 1154                             	.L78:
 531:../src/wolfcrypt/src/ed25519.c **** 
 532:../src/wolfcrypt/src/ed25519.c ****     /* find H(R,A,M) and store it as h */
 533:../src/wolfcrypt/src/ed25519.c **** 
 534:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
 535:../src/wolfcrypt/src/ed25519.c ****     ret = ed25519_hash_reset(key);
 536:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0)
 537:../src/wolfcrypt/src/ed25519.c ****         return ret;
 538:../src/wolfcrypt/src/ed25519.c **** #else
 539:../src/wolfcrypt/src/ed25519.c ****     ret = 0;
 1155                             		.loc 2 539 9
 1156 005c F8 A6 00                		mov.L	#0, [r10]
 540:../src/wolfcrypt/src/ed25519.c **** #endif
 541:../src/wolfcrypt/src/ed25519.c **** 
 542:../src/wolfcrypt/src/ed25519.c ****     if (type == Ed25519ctx || type == Ed25519ph) {
 1157                             		.loc 2 542 14
 1158 005f CC 65                   		mov.B	[r6], r5
 1159                             		.loc 2 542 8
 1160 0061 5B 55                   		movu.B	r5, r5
 1161 0063 61 05                   		cmp	#0, r5
 1162 0065 11                      		beq	.L79
 1163                             		.loc 2 542 36 discriminator 1
 1164 0066 CC 65                   		mov.B	[r6], r5
 1165                             		.loc 2 542 28 discriminator 1
 1166 0068 5B 55                   		movu.B	r5, r5
 1167 006a 61 15                   		cmp	#1, r5
 1168 006c 21 66                   		bne	.L80
 1169                             	.L79:
 543:../src/wolfcrypt/src/ed25519.c ****         ret = ed25519_hash_update(key, sha, ed25519Ctx, ED25519CTX_SIZE);
 1170                             		.loc 2 543 15
 1171 006e 75 44 20                		mov.L	#32, r4
 1172 0071 FB 32 00 00 00 00       		mov.L	#_ed25519Ctx, r3
 1173 0077 ED A2 04                		mov.L	16[r10], r2
 1174 007a ED A1 03                		mov.L	12[r10], r1
 1175 007d 05 00 00 00             		bsr	_ed25519_hash_update
 1176 0081 E3 A1                   		mov.L	r1, [r10]
 544:../src/wolfcrypt/src/ed25519.c ****         if (ret == 0)
 1177                             		.loc 2 544 12
 1178 0083 EC A5                   		mov.L	[r10], r5
 1179 0085 61 05                   		cmp	#0, r5
 1180 0087 21 12                   		bne	.L81
 545:../src/wolfcrypt/src/ed25519.c ****             ret = ed25519_hash_update(key, sha, &type, sizeof(type));
 1181                             		.loc 2 545 19
 1182 0089 66 14                   		mov.L	#1, r4
 1183 008b EF 63                   		mov.L	r6, r3
 1184 008d ED A2 04                		mov.L	16[r10], r2
 1185 0090 ED A1 03                		mov.L	12[r10], r1
 1186 0093 05 00 00 00             		bsr	_ed25519_hash_update
 1187 0097 E3 A1                   		mov.L	r1, [r10]
 1188                             	.L81:
 546:../src/wolfcrypt/src/ed25519.c ****         if (ret == 0)
 1189                             		.loc 2 546 12
 1190 0099 EC A5                   		mov.L	[r10], r5
 1191 009b 61 05                   		cmp	#0, r5
 1192 009d 21 15                   		bne	.L82
 547:../src/wolfcrypt/src/ed25519.c ****             ret = ed25519_hash_update(key, sha, &contextLen, sizeof(contextLen));
 1193                             		.loc 2 547 19
 1194 009f 71 65 08                		add	#8, r6, r5
 1195 00a2 66 14                   		mov.L	#1, r4
 1196 00a4 EF 53                   		mov.L	r5, r3
 1197 00a6 ED A2 04                		mov.L	16[r10], r2
 1198 00a9 ED A1 03                		mov.L	12[r10], r1
 1199 00ac 05 00 00 00             		bsr	_ed25519_hash_update
 1200 00b0 E3 A1                   		mov.L	r1, [r10]
 1201                             	.L82:
 548:../src/wolfcrypt/src/ed25519.c ****         if (ret == 0 && context != NULL)
 1202                             		.loc 2 548 12
 1203 00b2 EC A5                   		mov.L	[r10], r5
 1204 00b4 61 05                   		cmp	#0, r5
 1205 00b6 21 1C                   		bne	.L80
 1206                             		.loc 2 548 22 discriminator 1
 1207 00b8 A8 6D                   		mov.L	4[r6], r5
 1208 00ba 61 05                   		cmp	#0, r5
 1209 00bc 20 16                   		beq	.L80
 549:../src/wolfcrypt/src/ed25519.c ****             ret = ed25519_hash_update(key, sha, context, contextLen);
 1210                             		.loc 2 549 19
 1211 00be 8A 65                   		mov.B	8[r6], r5
 1212 00c0 5B 55                   		movu.B	r5, r5
 1213 00c2 EF 54                   		mov.L	r5, r4
 1214 00c4 A8 6B                   		mov.L	4[r6], r3
 1215 00c6 ED A2 04                		mov.L	16[r10], r2
 1216 00c9 ED A1 03                		mov.L	12[r10], r1
 1217 00cc 05 00 00 00             		bsr	_ed25519_hash_update
 1218 00d0 E3 A1                   		mov.L	r1, [r10]
 1219                             		.balign 8,3,1
 1220                             	.L80:
 550:../src/wolfcrypt/src/ed25519.c ****     }
 551:../src/wolfcrypt/src/ed25519.c ****     if (ret == 0)
 1221                             		.loc 2 551 8
 1222 00d2 EC A5                   		mov.L	[r10], r5
 1223 00d4 61 05                   		cmp	#0, r5
 1224 00d6 21 14                   		bne	.L83
 552:../src/wolfcrypt/src/ed25519.c ****         ret = ed25519_hash_update(key, sha, sig, ED25519_SIG_SIZE/2);
 1225                             		.loc 2 552 15
 1226 00d8 75 44 20                		mov.L	#32, r4
 1227 00db ED A3 01                		mov.L	4[r10], r3
 1228 00de ED A2 04                		mov.L	16[r10], r2
 1229 00e1 ED A1 03                		mov.L	12[r10], r1
 1230 00e4 05 00 00 00             		bsr	_ed25519_hash_update
 1231 00e8 E3 A1                   		mov.L	r1, [r10]
 1232                             	.L83:
 553:../src/wolfcrypt/src/ed25519.c ****     if (ret == 0)
 1233                             		.loc 2 553 8
 1234 00ea EC A5                   		mov.L	[r10], r5
 1235 00ec 61 05                   		cmp	#0, r5
 1236 00ee 21 16                   		bne	.L84
 554:../src/wolfcrypt/src/ed25519.c ****         ret = ed25519_hash_update(key, sha, key->p, ED25519_PUB_KEY_SIZE);
 1237                             		.loc 2 554 48
 1238 00f0 ED A5 03                		mov.L	12[r10], r5
 1239                             		.loc 2 554 15
 1240 00f3 75 44 20                		mov.L	#32, r4
 1241 00f6 EF 53                   		mov.L	r5, r3
 1242 00f8 ED A2 04                		mov.L	16[r10], r2
 1243 00fb ED A1 03                		mov.L	12[r10], r1
 1244 00fe 05 00 00 00             		bsr	_ed25519_hash_update
 1245 0102 E3 A1                   		mov.L	r1, [r10]
 1246                             	.L84:
 555:../src/wolfcrypt/src/ed25519.c **** 
 556:../src/wolfcrypt/src/ed25519.c ****     return ret;
 1247                             		.loc 2 556 12
 1248 0104 EC A5                   		mov.L	[r10], r5
 1249                             	.L76:
 557:../src/wolfcrypt/src/ed25519.c **** }
 1250                             		.loc 2 557 1
 1251 0106 EF 51                   		mov.L	r5, r1
 1252 0108 71 00 20                		add	#32, r0
 1253 010b 7E B6                   		pop	r6
 1254 010d 7E BA                   		pop	r10
 1255 010f 02                      		rts
 1256                             	.LFE55:
 1258                             		.section	.text.ed25519_verify_msg_update_with_sha,"ax",@progbits
 1260                             	_ed25519_verify_msg_update_with_sha:
 1261                             	.LFB56:
 558:../src/wolfcrypt/src/ed25519.c **** 
 559:../src/wolfcrypt/src/ed25519.c **** /*
 560:../src/wolfcrypt/src/ed25519.c ****    msgSegment     an array of bytes containing a message segment
 561:../src/wolfcrypt/src/ed25519.c ****    msgSegmentLen  length of msgSegment
 562:../src/wolfcrypt/src/ed25519.c ****    key            Ed25519 public key
 563:../src/wolfcrypt/src/ed25519.c ****    return         0 on success
 564:../src/wolfcrypt/src/ed25519.c **** */
 565:../src/wolfcrypt/src/ed25519.c **** static int ed25519_verify_msg_update_with_sha(const byte* msgSegment,
 566:../src/wolfcrypt/src/ed25519.c ****                                               word32 msgSegmentLen,
 567:../src/wolfcrypt/src/ed25519.c ****                                               ed25519_key* key,
 568:../src/wolfcrypt/src/ed25519.c ****                                               wc_Sha512 *sha) {
 1262                             		.loc 2 568 63
 1263 0000 7E AA                   		push.l	r10
 1264                             	.LCFI37:
 1265 0002 71 0A F0                		add	#-16, r0, r10
 1266                             	.LCFI38:
 1267 0005 EF A0                   		mov.L	r10, r0
 1268 0007 E3 A1                   		mov.L	r1, [r10]
 1269 0009 E7 A2 01                		mov.L	r2, 4[r10]
 1270 000c E7 A3 02                		mov.L	r3, 8[r10]
 1271 000f E7 A4 03                		mov.L	r4, 12[r10]
 569:../src/wolfcrypt/src/ed25519.c ****     /* sanity check on arguments */
 570:../src/wolfcrypt/src/ed25519.c ****     if (msgSegment == NULL || key == NULL)
 1272                             		.loc 2 570 8
 1273 0012 EC A5                   		mov.L	[r10], r5
 1274 0014 61 05                   		cmp	#0, r5
 1275 0016 17                      		beq	.L86
 1276                             		.loc 2 570 28 discriminator 1
 1277 0017 ED A5 02                		mov.L	8[r10], r5
 1278 001a 61 05                   		cmp	#0, r5
 1279 001c 1F                      		bne	.L87
 1280                             	.L86:
 571:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 1281                             		.loc 2 571 16
 1282 001d FB 5A 53 FF             		mov.L	#-173, r5
 1283 0021 2E 13                   		bra	.L88
 1284                             	.L87:
 572:../src/wolfcrypt/src/ed25519.c **** 
 573:../src/wolfcrypt/src/ed25519.c ****     return ed25519_hash_update(key, sha, msgSegment, msgSegmentLen);
 1285                             		.loc 2 573 12
 1286 0023 ED A4 01                		mov.L	4[r10], r4
 1287 0026 EC A3                   		mov.L	[r10], r3
 1288 0028 ED A2 03                		mov.L	12[r10], r2
 1289 002b ED A1 02                		mov.L	8[r10], r1
 1290 002e 05 00 00 00             		bsr	_ed25519_hash_update
 1291 0032 EF 15                   		mov.L	r1, r5
 1292                             	.L88:
 574:../src/wolfcrypt/src/ed25519.c **** }
 1293                             		.loc 2 574 1
 1294 0034 EF 51                   		mov.L	r5, r1
 1295 0036 3F AA 05                		rtsd	#20, r10-r10
 1296                             	.LFE56:
 1298                             		.section	.rodata.ed25519_low_order,"a"
 1301                             	_ed25519_low_order:
 1302 0000 14                      		.byte	20
 1303 0001 DE                      		.byte	-34
 1304 0002 F9                      		.byte	-7
 1305 0003 DE                      		.byte	-34
 1306 0004 A2                      		.byte	-94
 1307 0005 F7                      		.byte	-9
 1308 0006 9C                      		.byte	-100
 1309 0007 D6                      		.byte	-42
 1310 0008 58                      		.byte	0x58
 1311 0009 12                      		.byte	18
 1312 000a 63                      		.byte	0x63
 1313 000b 1A                      		.byte	26
 1314 000c 5C                      		.byte	0x5c
 1315 000d F5                      		.byte	-11
 1316 000e D3                      		.byte	-45
 1317 000f ED                      		.byte	-19
 1318                             		.section	.text.ed25519_verify_msg_final_with_sha,"ax",@progbits
 1320                             	_ed25519_verify_msg_final_with_sha:
 1321                             	.LFB57:
 575:../src/wolfcrypt/src/ed25519.c **** 
 576:../src/wolfcrypt/src/ed25519.c **** /* Low part of order in big endian. */
 577:../src/wolfcrypt/src/ed25519.c **** static const byte ed25519_low_order[] = {
 578:../src/wolfcrypt/src/ed25519.c ****     0x14, 0xde, 0xf9, 0xde, 0xa2, 0xf7, 0x9c, 0xd6,
 579:../src/wolfcrypt/src/ed25519.c ****     0x58, 0x12, 0x63, 0x1a, 0x5c, 0xf5, 0xd3, 0xed
 580:../src/wolfcrypt/src/ed25519.c **** };
 581:../src/wolfcrypt/src/ed25519.c **** 
 582:../src/wolfcrypt/src/ed25519.c **** #define ED25519_SIG_LOW_ORDER_IDX \
 583:../src/wolfcrypt/src/ed25519.c ****     ((int)(ED25519_SIG_SIZE/2 + sizeof(ed25519_low_order) - 1))
 584:../src/wolfcrypt/src/ed25519.c **** 
 585:../src/wolfcrypt/src/ed25519.c **** /*
 586:../src/wolfcrypt/src/ed25519.c ****    sig     is array of bytes containing the signature
 587:../src/wolfcrypt/src/ed25519.c ****    sigLen  is the length of sig byte array
 588:../src/wolfcrypt/src/ed25519.c ****    res     will be 1 on successful verify and 0 on unsuccessful
 589:../src/wolfcrypt/src/ed25519.c ****    key     Ed25519 public key
 590:../src/wolfcrypt/src/ed25519.c ****    return  0 and res of 1 on success
 591:../src/wolfcrypt/src/ed25519.c **** */
 592:../src/wolfcrypt/src/ed25519.c **** static int ed25519_verify_msg_final_with_sha(const byte* sig, word32 sigLen,
 593:../src/wolfcrypt/src/ed25519.c ****                                              int* res, ed25519_key* key,
 594:../src/wolfcrypt/src/ed25519.c ****                                              wc_Sha512 *sha)
 595:../src/wolfcrypt/src/ed25519.c **** {
 1322                             		.loc 2 595 1
 1323 0000 7E AA                   		push.l	r10
 1324                             	.LCFI39:
 1325 0002 7E A6                   		push.l	r6
 1326                             	.LCFI40:
 1327 0004 72 0A 68 FE             		add	#-408, r0, r10
 1328                             	.LCFI41:
 1329 0008 EF A0                   		mov.L	r10, r0
 1330 000a FB 6A A4 01             		mov.L	#0x1a4, r6
 1331 000e 4B A6                   		add	r10, r6
 1332 0010 E7 A1 61                		mov.L	r1, 388[r10]
 1333 0013 E7 A2 62                		mov.L	r2, 392[r10]
 1334 0016 E7 A3 63                		mov.L	r3, 396[r10]
 1335 0019 E7 A4 64                		mov.L	r4, 400[r10]
 596:../src/wolfcrypt/src/ed25519.c ****     byte   rcheck[ED25519_KEY_SIZE];
 597:../src/wolfcrypt/src/ed25519.c ****     byte   h[WC_SHA512_DIGEST_SIZE];
 598:../src/wolfcrypt/src/ed25519.c **** #ifndef FREESCALE_LTC_ECC
 599:../src/wolfcrypt/src/ed25519.c ****     ge_p3  A;
 600:../src/wolfcrypt/src/ed25519.c ****     ge_p2  R;
 601:../src/wolfcrypt/src/ed25519.c **** #endif
 602:../src/wolfcrypt/src/ed25519.c ****     int    ret;
 603:../src/wolfcrypt/src/ed25519.c **** 
 604:../src/wolfcrypt/src/ed25519.c ****     /* sanity check on arguments */
 605:../src/wolfcrypt/src/ed25519.c ****     if (sig == NULL || res == NULL || key == NULL)
 1336                             		.loc 2 605 8
 1337 001c ED A5 61                		mov.L	388[r10], r5
 1338 001f 61 05                   		cmp	#0, r5
 1339 0021 20 0E                   		beq	.L90
 1340                             		.loc 2 605 21 discriminator 1
 1341 0023 ED A5 63                		mov.L	396[r10], r5
 1342 0026 61 05                   		cmp	#0, r5
 1343 0028 17                      		beq	.L90
 1344                             		.loc 2 605 36 discriminator 2
 1345 0029 ED A5 64                		mov.L	400[r10], r5
 1346 002c 61 05                   		cmp	#0, r5
 1347 002e 18                      		bne	.L91
 1348                             	.L90:
 606:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 1349                             		.loc 2 606 16
 1350 002f FB 5A 53 FF             		mov.L	#-173, r5
 1351 0033 38 75 01                		bra	.L110
 1352                             	.L91:
 607:../src/wolfcrypt/src/ed25519.c **** 
 608:../src/wolfcrypt/src/ed25519.c ****     /* set verification failed by default */
 609:../src/wolfcrypt/src/ed25519.c ****     *res = 0;
 1353                             		.loc 2 609 10
 1354 0036 ED A5 63                		mov.L	396[r10], r5
 1355 0039 F8 56 00                		mov.L	#0, [r5]
 610:../src/wolfcrypt/src/ed25519.c **** 
 611:../src/wolfcrypt/src/ed25519.c ****     /* check on basics needed to verify signature */
 612:../src/wolfcrypt/src/ed25519.c ****     if (sigLen != ED25519_SIG_SIZE)
 1356                             		.loc 2 612 8
 1357 003c ED A5 62                		mov.L	392[r10], r5
 1358 003f 75 55 40                		cmp	#0x40, r5
 1359 0042 10                      		beq	.L93
 613:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 1360                             		.loc 2 613 16
 1361 0043 FB 5A 53 FF             		mov.L	#-173, r5
 1362 0047 38 61 01                		bra	.L110
 1363                             	.L93:
 614:../src/wolfcrypt/src/ed25519.c ****     /* S is not larger or equal to the order:
 615:../src/wolfcrypt/src/ed25519.c ****      *     2^252 + 0x14def9dea2f79cd65812631a5cf5d3ed
 616:../src/wolfcrypt/src/ed25519.c ****      *   = 0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3ed
 617:../src/wolfcrypt/src/ed25519.c ****      */
 618:../src/wolfcrypt/src/ed25519.c ****     if (sig[ED25519_SIG_SIZE-1] > 0x10)
 1364                             		.loc 2 618 12
 1365 004a ED A5 61                		mov.L	388[r10], r5
 1366 004d 71 55 3F                		add	#63, r5
 1367 0050 CC 55                   		mov.B	[r5], r5
 1368                             		.loc 2 618 8
 1369 0052 5B 55                   		movu.B	r5, r5
 1370 0054 75 55 10                		cmp	#16, r5
 1371 0057 25 09                   		bleu	.L94
 619:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 1372                             		.loc 2 619 16
 1373 0059 FB 5A 53 FF             		mov.L	#-173, r5
 1374 005d 38 4B 01                		bra	.L110
 1375                             	.L94:
 620:../src/wolfcrypt/src/ed25519.c ****     if (sig[ED25519_SIG_SIZE-1] == 0x10) {
 1376                             		.loc 2 620 12
 1377 0060 ED A5 61                		mov.L	388[r10], r5
 1378 0063 71 55 3F                		add	#63, r5
 1379 0066 CC 55                   		mov.B	[r5], r5
 1380                             		.loc 2 620 8
 1381 0068 5B 55                   		movu.B	r5, r5
 1382 006a 75 55 10                		cmp	#16, r5
 1383 006d 3B AD 00                		bne	.L95
 1384                             	.LBB4:
 621:../src/wolfcrypt/src/ed25519.c ****         int i = ED25519_SIG_SIZE-1;
 1385                             		.loc 2 621 13
 1386 0070 F9 A6 01 3F             		mov.L	#63, 4[r10]
 622:../src/wolfcrypt/src/ed25519.c ****         int j;
 623:../src/wolfcrypt/src/ed25519.c **** 
 624:../src/wolfcrypt/src/ed25519.c ****         /* Check high zeros. */
 625:../src/wolfcrypt/src/ed25519.c ****         for (--i; i > ED25519_SIG_LOW_ORDER_IDX; i--) {
 1387                             		.loc 2 625 14
 1388 0074 ED A5 01                		mov.L	4[r10], r5
 1389 0077 60 15                   		sub	#1, r5
 1390 0079 E7 A5 01                		mov.L	r5, 4[r10]
 1391                             		.loc 2 625 9
 1392 007c 2E 1A                   		bra	.L96
 1393                             	.L99:
 626:../src/wolfcrypt/src/ed25519.c ****             if (sig[i] > 0x00)
 1394                             		.loc 2 626 20
 1395 007e ED A5 01                		mov.L	4[r10], r5
 1396 0081 ED A4 61                		mov.L	388[r10], r4
 1397 0084 4B 45                   		add	r4, r5
 1398 0086 CC 55                   		mov.B	[r5], r5
 1399                             		.loc 2 626 16
 1400 0088 5B 55                   		movu.B	r5, r5
 1401 008a 61 05                   		cmp	#0, r5
 1402 008c 21 14                   		bne	.L111
 625:../src/wolfcrypt/src/ed25519.c ****             if (sig[i] > 0x00)
 1403                             		.loc 2 625 51 discriminator 2
 1404 008e ED A5 01                		mov.L	4[r10], r5
 1405 0091 60 15                   		sub	#1, r5
 1406 0093 E7 A5 01                		mov.L	r5, 4[r10]
 1407                             	.L96:
 625:../src/wolfcrypt/src/ed25519.c ****             if (sig[i] > 0x00)
 1408                             		.loc 2 625 9 discriminator 1
 1409 0096 ED A5 01                		mov.L	4[r10], r5
 1410 0099 75 55 2F                		cmp	#47, r5
 1411 009c 2A E2                   		bgt	.L99
 1412 009e 2E 03                   		bra	.L98
 1413                             	.L111:
 627:../src/wolfcrypt/src/ed25519.c ****                 break;
 1414                             		.loc 2 627 17
 1415 00a0 03                      		nop
 1416                             	.L98:
 628:../src/wolfcrypt/src/ed25519.c ****         }
 629:../src/wolfcrypt/src/ed25519.c ****         /* Did we see all zeros up to lower order index? */
 630:../src/wolfcrypt/src/ed25519.c ****         if (i == ED25519_SIG_LOW_ORDER_IDX) {
 1417                             		.loc 2 630 12
 1418 00a1 ED A5 01                		mov.L	4[r10], r5
 1419 00a4 75 55 2F                		cmp	#47, r5
 1420 00a7 21 73                   		bne	.L95
 631:../src/wolfcrypt/src/ed25519.c ****             /* Check lower part. */
 632:../src/wolfcrypt/src/ed25519.c ****             for (j = 0; j < (int)sizeof(ed25519_low_order); j++, i--) {
 1421                             		.loc 2 632 20
 1422 00a9 F9 A6 02 00             		mov.L	#0, 8[r10]
 1423                             		.loc 2 632 13
 1424 00ad 2E 55                   		bra	.L100
 1425                             	.L104:
 633:../src/wolfcrypt/src/ed25519.c ****                 /* Check smaller. */
 634:../src/wolfcrypt/src/ed25519.c ****                 if (sig[i] < ed25519_low_order[j])
 1426                             		.loc 2 634 24
 1427 00af ED A5 01                		mov.L	4[r10], r5
 1428 00b2 ED A4 61                		mov.L	388[r10], r4
 1429 00b5 4B 45                   		add	r4, r5
 1430 00b7 CC 54                   		mov.B	[r5], r4
 1431                             		.loc 2 634 47
 1432 00b9 FB 52 00 00 00 00       		mov.L	#_ed25519_low_order, r5
 1433 00bf 06 89 A5 02             		add	8[r10].L, r5
 1434 00c3 CC 55                   		mov.B	[r5], r5
 1435                             		.loc 2 634 20
 1436 00c5 5B 44                   		movu.B	r4, r4
 1437 00c7 5B 55                   		movu.B	r5, r5
 1438 00c9 47 54                   		cmp	r5, r4
 1439 00cb 23 40                   		bltu	.L112
 635:../src/wolfcrypt/src/ed25519.c ****                     break;
 636:../src/wolfcrypt/src/ed25519.c ****                 /* Check bigger. */
 637:../src/wolfcrypt/src/ed25519.c ****                 if (sig[i] > ed25519_low_order[j])
 1440                             		.loc 2 637 24
 1441 00cd ED A5 01                		mov.L	4[r10], r5
 1442 00d0 ED A4 61                		mov.L	388[r10], r4
 1443 00d3 4B 45                   		add	r4, r5
 1444 00d5 CC 54                   		mov.B	[r5], r4
 1445                             		.loc 2 637 47
 1446 00d7 FB 52 00 00 00 00       		mov.L	#_ed25519_low_order, r5
 1447 00dd 06 89 A5 02             		add	8[r10].L, r5
 1448 00e1 CC 55                   		mov.B	[r5], r5
 1449                             		.loc 2 637 20
 1450 00e3 5B 44                   		movu.B	r4, r4
 1451 00e5 5B 55                   		movu.B	r5, r5
 1452 00e7 47 54                   		cmp	r5, r4
 1453 00e9 25 09                   		bleu	.L103
 638:../src/wolfcrypt/src/ed25519.c ****                     return BAD_FUNC_ARG;
 1454                             		.loc 2 638 28
 1455 00eb FB 5A 53 FF             		mov.L	#-173, r5
 1456 00ef 38 B9 00                		bra	.L110
 1457                             	.L103:
 632:../src/wolfcrypt/src/ed25519.c ****                 /* Check smaller. */
 1458                             		.loc 2 632 62 discriminator 2
 1459 00f2 ED A5 02                		mov.L	8[r10], r5
 1460 00f5 62 15                   		add	#1, r5
 1461 00f7 E7 A5 02                		mov.L	r5, 8[r10]
 632:../src/wolfcrypt/src/ed25519.c ****                 /* Check smaller. */
 1462                             		.loc 2 632 67 discriminator 2
 1463 00fa ED A5 01                		mov.L	4[r10], r5
 1464 00fd 60 15                   		sub	#1, r5
 1465 00ff E7 A5 01                		mov.L	r5, 4[r10]
 1466                             	.L100:
 632:../src/wolfcrypt/src/ed25519.c ****                 /* Check smaller. */
 1467                             		.loc 2 632 13 discriminator 1
 1468 0102 ED A5 02                		mov.L	8[r10], r5
 1469 0105 61 F5                   		cmp	#15, r5
 1470 0107 2B A8                   		ble	.L104
 1471 0109 2E 03                   		bra	.L102
 1472                             	.L112:
 635:../src/wolfcrypt/src/ed25519.c ****                     break;
 1473                             		.loc 2 635 21
 1474 010b 03                      		nop
 1475                             	.L102:
 639:../src/wolfcrypt/src/ed25519.c ****             }
 640:../src/wolfcrypt/src/ed25519.c ****             /* Check equal - all bytes match. */
 641:../src/wolfcrypt/src/ed25519.c ****             if (i == ED25519_SIG_SIZE/2 - 1)
 1476                             		.loc 2 641 16
 1477 010c ED A5 01                		mov.L	4[r10], r5
 1478 010f 75 55 1F                		cmp	#31, r5
 1479 0112 18                      		bne	.L95
 642:../src/wolfcrypt/src/ed25519.c ****                 return BAD_FUNC_ARG;
 1480                             		.loc 2 642 24
 1481 0113 FB 5A 53 FF             		mov.L	#-173, r5
 1482 0117 38 91 00                		bra	.L110
 1483                             	.L95:
 1484                             	.LBE4:
 643:../src/wolfcrypt/src/ed25519.c ****         }
 644:../src/wolfcrypt/src/ed25519.c ****     }
 645:../src/wolfcrypt/src/ed25519.c **** 
 646:../src/wolfcrypt/src/ed25519.c ****     /* uncompress A (public key), test if valid, and negate it */
 647:../src/wolfcrypt/src/ed25519.c **** #ifndef FREESCALE_LTC_ECC
 648:../src/wolfcrypt/src/ed25519.c ****     if (ge_frombytes_negate_vartime(&A, key->p) != 0)
 1485                             		.loc 2 648 44
 1486 011a ED A4 64                		mov.L	400[r10], r4
 1487                             		.loc 2 648 9
 1488 011d 71 A5 6C                		add	#0x6c, r10, r5
 1489 0120 EF 42                   		mov.L	r4, r2
 1490 0122 EF 51                   		mov.L	r5, r1
 1491 0124 05 00 00 00             		bsr	_ge_frombytes_negate_vartime
 1492 0128 EF 15                   		mov.L	r1, r5
 1493                             		.loc 2 648 8
 1494 012a 61 05                   		cmp	#0, r5
 1495 012c 17                      		beq	.L105
 649:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 1496                             		.loc 2 649 16
 1497 012d FB 5A 53 FF             		mov.L	#-173, r5
 1498 0131 2E 77                   		bra	.L110
 1499                             	.L105:
 650:../src/wolfcrypt/src/ed25519.c **** #endif
 651:../src/wolfcrypt/src/ed25519.c **** 
 652:../src/wolfcrypt/src/ed25519.c ****     /* find H(R,A,M) and store it as h */
 653:../src/wolfcrypt/src/ed25519.c **** 
 654:../src/wolfcrypt/src/ed25519.c ****     ret = ed25519_hash_final(key, sha, h);
 1500                             		.loc 2 654 11
 1501 0133 71 A5 2C                		add	#44, r10, r5
 1502 0136 EF 53                   		mov.L	r5, r3
 1503 0138 EC 62                   		mov.L	[r6], r2
 1504 013a ED A1 64                		mov.L	400[r10], r1
 1505 013d 05 00 00 00             		bsr	_ed25519_hash_final
 1506 0141 E3 A1                   		mov.L	r1, [r10]
 655:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0)
 1507                             		.loc 2 655 8
 1508 0143 EC A5                   		mov.L	[r10], r5
 1509 0145 61 05                   		cmp	#0, r5
 1510 0147 15                      		beq	.L106
 656:../src/wolfcrypt/src/ed25519.c ****         return ret;
 1511                             		.loc 2 656 16
 1512 0148 EC A5                   		mov.L	[r10], r5
 1513 014a 2E 5E                   		bra	.L110
 1514                             	.L106:
 657:../src/wolfcrypt/src/ed25519.c **** 
 658:../src/wolfcrypt/src/ed25519.c **** #ifdef FREESCALE_LTC_ECC
 659:../src/wolfcrypt/src/ed25519.c ****     ret = LTC_PKHA_sc_reduce(h);
 660:../src/wolfcrypt/src/ed25519.c ****     if (ret != kStatus_Success)
 661:../src/wolfcrypt/src/ed25519.c ****         return ret;
 662:../src/wolfcrypt/src/ed25519.c ****     ret = LTC_PKHA_SignatureForVerify(rcheck, h, sig + (ED25519_SIG_SIZE/2), key);
 663:../src/wolfcrypt/src/ed25519.c ****     if (ret != kStatus_Success)
 664:../src/wolfcrypt/src/ed25519.c ****         return ret;
 665:../src/wolfcrypt/src/ed25519.c **** #else
 666:../src/wolfcrypt/src/ed25519.c ****     sc_reduce(h);
 1515                             		.loc 2 666 5
 1516 014c 71 A5 2C                		add	#44, r10, r5
 1517 014f EF 51                   		mov.L	r5, r1
 1518 0151 05 00 00 00             		bsr	_sc_reduce
 667:../src/wolfcrypt/src/ed25519.c **** 
 668:../src/wolfcrypt/src/ed25519.c ****     /*
 669:../src/wolfcrypt/src/ed25519.c ****        Uses a fast single-signature verification SB = R + H(R,A,M)A becomes
 670:../src/wolfcrypt/src/ed25519.c ****        SB - H(R,A,M)A saving decompression of R
 671:../src/wolfcrypt/src/ed25519.c ****     */
 672:../src/wolfcrypt/src/ed25519.c ****     ret = ge_double_scalarmult_vartime(&R, h, &A, sig + (ED25519_SIG_SIZE/2));
 1519                             		.loc 2 672 55
 1520 0155 ED A5 61                		mov.L	388[r10], r5
 1521 0158 71 54 20                		add	#32, r5, r4
 1522                             		.loc 2 672 11
 1523 015b 71 A3 6C                		add	#0x6c, r10, r3
 1524 015e 71 A2 2C                		add	#44, r10, r2
 1525 0161 72 A5 0C 01             		add	#0x10c, r10, r5
 1526 0165 EF 51                   		mov.L	r5, r1
 1527 0167 05 00 00 00             		bsr	_ge_double_scalarmult_vartime
 1528 016b E3 A1                   		mov.L	r1, [r10]
 673:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0)
 1529                             		.loc 2 673 8
 1530 016d EC A5                   		mov.L	[r10], r5
 1531 016f 61 05                   		cmp	#0, r5
 1532 0171 15                      		beq	.L107
 674:../src/wolfcrypt/src/ed25519.c ****         return ret;
 1533                             		.loc 2 674 16
 1534 0172 EC A5                   		mov.L	[r10], r5
 1535 0174 2E 34                   		bra	.L110
 1536                             	.L107:
 675:../src/wolfcrypt/src/ed25519.c **** 
 676:../src/wolfcrypt/src/ed25519.c ****     ge_tobytes(rcheck, &R);
 1537                             		.loc 2 676 5
 1538 0176 72 A4 0C 01             		add	#0x10c, r10, r4
 1539 017a 71 A5 0C                		add	#12, r10, r5
 1540 017d EF 42                   		mov.L	r4, r2
 1541 017f EF 51                   		mov.L	r5, r1
 1542 0181 05 00 00 00             		bsr	_ge_tobytes
 677:../src/wolfcrypt/src/ed25519.c **** #endif /* FREESCALE_LTC_ECC */
 678:../src/wolfcrypt/src/ed25519.c **** 
 679:../src/wolfcrypt/src/ed25519.c ****     /* comparison of R created to R in sig */
 680:../src/wolfcrypt/src/ed25519.c ****     ret = ConstantCompare(rcheck, sig, ED25519_SIG_SIZE/2);
 1543                             		.loc 2 680 11
 1544 0185 71 A5 0C                		add	#12, r10, r5
 1545 0188 75 43 20                		mov.L	#32, r3
 1546 018b ED A2 61                		mov.L	388[r10], r2
 1547 018e EF 51                   		mov.L	r5, r1
 1548 0190 05 00 00 00             		bsr	_ConstantCompare
 1549 0194 E3 A1                   		mov.L	r1, [r10]
 681:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0) {
 1550                             		.loc 2 681 8
 1551 0196 EC A5                   		mov.L	[r10], r5
 1552 0198 61 05                   		cmp	#0, r5
 1553 019a 16                      		beq	.L108
 682:../src/wolfcrypt/src/ed25519.c ****         ret = SIG_VERIFY_E;
 1554                             		.loc 2 682 13
 1555 019b F8 AA 1B FF             		mov.L	#-229, [r10]
 1556 019f 0F                      		bra	.L109
 1557                             	.L108:
 683:../src/wolfcrypt/src/ed25519.c ****     } else {
 684:../src/wolfcrypt/src/ed25519.c ****         /* set the verification status */
 685:../src/wolfcrypt/src/ed25519.c ****         *res = 1;
 1558                             		.loc 2 685 14
 1559 01a0 ED A5 63                		mov.L	396[r10], r5
 1560 01a3 F8 56 01                		mov.L	#1, [r5]
 1561                             	.L109:
 686:../src/wolfcrypt/src/ed25519.c ****     }
 687:../src/wolfcrypt/src/ed25519.c **** 
 688:../src/wolfcrypt/src/ed25519.c ****     return ret;
 1562                             		.loc 2 688 12
 1563 01a6 EC A5                   		mov.L	[r10], r5
 1564                             		.balign 8,3,1
 1565                             	.L110:
 689:../src/wolfcrypt/src/ed25519.c **** }
 1566                             		.loc 2 689 1 discriminator 1
 1567 01a8 EF 51                   		mov.L	r5, r1
 1568 01aa 72 00 98 01             		add	#0x198, r0
 1569 01ae 7E B6                   		pop	r6
 1570 01b0 7E BA                   		pop	r10
 1571 01b2 02                      		rts
 1572                             	.LFE57:
 1574 01b3 77 10 01 00 00          		.section	.text.wc_ed25519_verify_msg_ex,"ax",@progbits
 1575                             		.global	_wc_ed25519_verify_msg_ex
 1577                             	_wc_ed25519_verify_msg_ex:
 1578                             	.LFB58:
 690:../src/wolfcrypt/src/ed25519.c **** #endif /* WOLFSSL_SE050 */
 691:../src/wolfcrypt/src/ed25519.c **** 
 692:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_STREAMING_VERIFY
 693:../src/wolfcrypt/src/ed25519.c **** 
 694:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_verify_msg_init(const byte* sig, word32 sigLen, ed25519_key* key,
 695:../src/wolfcrypt/src/ed25519.c ****                                byte type, const byte* context, byte contextLen) {
 696:../src/wolfcrypt/src/ed25519.c ****     return ed25519_verify_msg_init_with_sha(sig, sigLen, key, &key->sha,
 697:../src/wolfcrypt/src/ed25519.c ****                                         type, context, contextLen);
 698:../src/wolfcrypt/src/ed25519.c **** }
 699:../src/wolfcrypt/src/ed25519.c **** 
 700:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_verify_msg_update(const byte* msgSegment, word32 msgSegmentLen,
 701:../src/wolfcrypt/src/ed25519.c ****                                         ed25519_key* key) {
 702:../src/wolfcrypt/src/ed25519.c ****     return ed25519_verify_msg_update_with_sha(msgSegment, msgSegmentLen,
 703:../src/wolfcrypt/src/ed25519.c ****                                           key, &key->sha);
 704:../src/wolfcrypt/src/ed25519.c **** }
 705:../src/wolfcrypt/src/ed25519.c **** 
 706:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_verify_msg_final(const byte* sig, word32 sigLen, int* res,
 707:../src/wolfcrypt/src/ed25519.c ****                                 ed25519_key* key) {
 708:../src/wolfcrypt/src/ed25519.c ****     return ed25519_verify_msg_final_with_sha(sig, sigLen, res,
 709:../src/wolfcrypt/src/ed25519.c ****                                          key, &key->sha);
 710:../src/wolfcrypt/src/ed25519.c **** }
 711:../src/wolfcrypt/src/ed25519.c **** 
 712:../src/wolfcrypt/src/ed25519.c **** #endif /* WOLFSSL_ED25519_STREAMING_VERIFY */
 713:../src/wolfcrypt/src/ed25519.c **** 
 714:../src/wolfcrypt/src/ed25519.c **** /*
 715:../src/wolfcrypt/src/ed25519.c ****    sig     is array of bytes containing the signature
 716:../src/wolfcrypt/src/ed25519.c ****    sigLen  is the length of sig byte array
 717:../src/wolfcrypt/src/ed25519.c ****    msg     the array of bytes containing the message
 718:../src/wolfcrypt/src/ed25519.c ****    msgLen  length of msg array
 719:../src/wolfcrypt/src/ed25519.c ****    res     will be 1 on successful verify and 0 on unsuccessful
 720:../src/wolfcrypt/src/ed25519.c ****    key     Ed25519 public key
 721:../src/wolfcrypt/src/ed25519.c ****    return  0 and res of 1 on success
 722:../src/wolfcrypt/src/ed25519.c **** */
 723:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_verify_msg_ex(const byte* sig, word32 sigLen, const byte* msg,
 724:../src/wolfcrypt/src/ed25519.c ****                               word32 msgLen, int* res, ed25519_key* key,
 725:../src/wolfcrypt/src/ed25519.c ****                               byte type, const byte* context, byte contextLen)
 726:../src/wolfcrypt/src/ed25519.c **** {
 1579                             		.loc 2 726 1
 1580 0000 7E AA                   		push.l	r10
 1581                             	.LCFI42:
 1582 0002 7E A6                   		push.l	r6
 1583                             	.LCFI43:
 1584 0004 72 0A 00 FF             		add	#-256, r0, r10
 1585                             	.LCFI44:
 1586 0008 71 A0 F4                		add	#-12, r10, r0
 1587                             	.LCFI45:
 1588 000b FB 6A 0C 01             		mov.L	#0x10c, r6
 1589 000f 4B A6                   		add	r10, r6
 1590 0011 E7 A1 37                		mov.L	r1, 220[r10]
 1591 0014 E7 A2 38                		mov.L	r2, 224[r10]
 1592 0017 E7 A3 39                		mov.L	r3, 228[r10]
 1593 001a E7 A4 3A                		mov.L	r4, 232[r10]
 727:../src/wolfcrypt/src/ed25519.c ****     int ret;
 728:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_SE050
 729:../src/wolfcrypt/src/ed25519.c ****     (void)type;
 730:../src/wolfcrypt/src/ed25519.c ****     (void)context;
 731:../src/wolfcrypt/src/ed25519.c ****     (void)contextLen;
 732:../src/wolfcrypt/src/ed25519.c ****     (void)ed25519Ctx;
 733:../src/wolfcrypt/src/ed25519.c ****     ret = se050_ed25519_verify_msg(sig, sigLen, msg, msgLen, key, res);
 734:../src/wolfcrypt/src/ed25519.c **** #else
 735:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
 736:../src/wolfcrypt/src/ed25519.c ****     wc_Sha512 *sha;
 737:../src/wolfcrypt/src/ed25519.c **** #else
 738:../src/wolfcrypt/src/ed25519.c ****     wc_Sha512 sha[1];
 739:../src/wolfcrypt/src/ed25519.c **** #endif
 740:../src/wolfcrypt/src/ed25519.c **** 
 741:../src/wolfcrypt/src/ed25519.c ****     /* sanity check on arguments */
 742:../src/wolfcrypt/src/ed25519.c ****     if (sig == NULL || msg == NULL || res == NULL || key == NULL ||
 1594                             		.loc 2 742 8
 1595 001d ED A5 37                		mov.L	220[r10], r5
 1596 0020 61 05                   		cmp	#0, r5
 1597 0022 20 20                   		beq	.L114
 1598                             		.loc 2 742 21 discriminator 1
 1599 0024 ED A5 39                		mov.L	228[r10], r5
 1600 0027 61 05                   		cmp	#0, r5
 1601 0029 20 19                   		beq	.L114
 1602                             		.loc 2 742 36 discriminator 2
 1603 002b EC 65                   		mov.L	[r6], r5
 1604 002d 61 05                   		cmp	#0, r5
 1605 002f 20 13                   		beq	.L114
 1606                             		.loc 2 742 51 discriminator 3
 1607 0031 A8 6D                   		mov.L	4[r6], r5
 1608 0033 61 05                   		cmp	#0, r5
 1609 0035 20 0D                   		beq	.L114
 1610                             		.loc 2 742 66 discriminator 4
 1611 0037 A8 ED                   		mov.L	12[r6], r5
 1612 0039 61 05                   		cmp	#0, r5
 1613 003b 21 0D                   		bne	.L115
 743:../src/wolfcrypt/src/ed25519.c ****                                          (context == NULL && contextLen != 0))
 1614                             		.loc 2 743 59
 1615 003d B4 65                   		movu.B	16[r6], r5
 1616 003f 61 05                   		cmp	#0, r5
 1617 0041 17                      		beq	.L115
 1618                             		.balign 8,3,2
 1619                             	.L114:
 744:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 1620                             		.loc 2 744 16
 1621 0042 FB 5A 53 FF             		mov.L	#-173, r5
 1622 0046 2E 79                   		bra	.L120
 1623                             	.L115:
 745:../src/wolfcrypt/src/ed25519.c **** 
 746:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLF_CRYPTO_CB
 747:../src/wolfcrypt/src/ed25519.c ****     if (key->devId != INVALID_DEVID) {
 748:../src/wolfcrypt/src/ed25519.c ****         ret = wc_CryptoCb_Ed25519Verify(sig, sigLen, msg, msgLen, res, key,
 749:../src/wolfcrypt/src/ed25519.c ****             type, context, contextLen);
 750:../src/wolfcrypt/src/ed25519.c ****         if (ret != CRYPTOCB_UNAVAILABLE)
 751:../src/wolfcrypt/src/ed25519.c ****             return ret;
 752:../src/wolfcrypt/src/ed25519.c ****         /* fall-through when unavailable */
 753:../src/wolfcrypt/src/ed25519.c ****     }
 754:../src/wolfcrypt/src/ed25519.c **** #endif
 755:../src/wolfcrypt/src/ed25519.c **** 
 756:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
 757:../src/wolfcrypt/src/ed25519.c ****     sha = &key->sha;
 758:../src/wolfcrypt/src/ed25519.c **** #else
 759:../src/wolfcrypt/src/ed25519.c ****     ret = ed25519_hash_init(key, sha);
 1624                             		.loc 2 759 11
 1625 0048 71 A5 04                		add	#4, r10, r5
 1626 004b EF 52                   		mov.L	r5, r2
 1627 004d A8 69                   		mov.L	4[r6], r1
 1628 004f 05 00 00 00             		bsr	_ed25519_hash_init
 1629 0053 E3 A1                   		mov.L	r1, [r10]
 760:../src/wolfcrypt/src/ed25519.c ****     if (ret < 0)
 1630                             		.loc 2 760 8
 1631 0055 EC A5                   		mov.L	[r10], r5
 1632 0057 61 05                   		cmp	#0, r5
 1633 0059 28 06                   		bge	.L117
 761:../src/wolfcrypt/src/ed25519.c ****         return ret;
 1634                             		.loc 2 761 16
 1635 005b EC A5                   		mov.L	[r10], r5
 1636 005d 2E 62                   		bra	.L120
 1637                             	.L117:
 762:../src/wolfcrypt/src/ed25519.c **** #endif
 763:../src/wolfcrypt/src/ed25519.c **** 
 764:../src/wolfcrypt/src/ed25519.c ****     ret = ed25519_verify_msg_init_with_sha(sig, sigLen, key, sha, type, context,
 1638                             		.loc 2 764 11
 1639 005f 71 A5 04                		add	#4, r10, r5
 1640 0062 8C 64                   		mov.B	16[r6], r4
 1641 0064 82 04                   		mov.B	r4, 8[r0]
 1642 0066 A8 EC                   		mov.L	12[r6], r4
 1643 0068 A0 0C                   		mov.L	r4, 4[r0]
 1644 006a 8A 64                   		mov.B	8[r6], r4
 1645 006c C3 04                   		mov.B	r4, [r0]
 1646 006e EF 54                   		mov.L	r5, r4
 1647 0070 A8 6B                   		mov.L	4[r6], r3
 1648 0072 ED A2 38                		mov.L	224[r10], r2
 1649 0075 ED A1 37                		mov.L	220[r10], r1
 1650 0078 05 00 00 00             		bsr	_ed25519_verify_msg_init_with_sha
 1651 007c E3 A1                   		mov.L	r1, [r10]
 765:../src/wolfcrypt/src/ed25519.c ****         contextLen);
 766:../src/wolfcrypt/src/ed25519.c ****     if (ret == 0)
 1652                             		.loc 2 766 8
 1653 007e EC A5                   		mov.L	[r10], r5
 1654 0080 61 05                   		cmp	#0, r5
 1655 0082 21 15                   		bne	.L118
 767:../src/wolfcrypt/src/ed25519.c ****         ret = ed25519_verify_msg_update_with_sha(msg, msgLen, key, sha);
 1656                             		.loc 2 767 15
 1657 0084 71 A5 04                		add	#4, r10, r5
 1658 0087 EF 54                   		mov.L	r5, r4
 1659 0089 A8 6B                   		mov.L	4[r6], r3
 1660 008b ED A2 3A                		mov.L	232[r10], r2
 1661 008e ED A1 39                		mov.L	228[r10], r1
 1662 0091 05 00 00 00             		bsr	_ed25519_verify_msg_update_with_sha
 1663 0095 E3 A1                   		mov.L	r1, [r10]
 1664                             	.L118:
 768:../src/wolfcrypt/src/ed25519.c ****     if (ret == 0)
 1665                             		.loc 2 768 8
 1666 0097 EC A5                   		mov.L	[r10], r5
 1667 0099 61 05                   		cmp	#0, r5
 1668 009b 21 17                   		bne	.L119
 769:../src/wolfcrypt/src/ed25519.c ****         ret = ed25519_verify_msg_final_with_sha(sig, sigLen, res, key, sha);
 1669                             		.loc 2 769 15
 1670 009d 71 A5 04                		add	#4, r10, r5
 1671 00a0 E3 05                   		mov.L	r5, [r0]
 1672 00a2 A8 6C                   		mov.L	4[r6], r4
 1673 00a4 EC 63                   		mov.L	[r6], r3
 1674 00a6 ED A2 38                		mov.L	224[r10], r2
 1675 00a9 ED A1 37                		mov.L	220[r10], r1
 1676 00ac 05 00 00 00             		bsr	_ed25519_verify_msg_final_with_sha
 1677 00b0 E3 A1                   		mov.L	r1, [r10]
 1678                             	.L119:
 770:../src/wolfcrypt/src/ed25519.c **** 
 771:../src/wolfcrypt/src/ed25519.c **** #ifndef WOLFSSL_ED25519_PERSISTENT_SHA
 772:../src/wolfcrypt/src/ed25519.c ****     ed25519_hash_free(key, sha);
 1679                             		.loc 2 772 5
 1680 00b2 71 A5 04                		add	#4, r10, r5
 1681 00b5 EF 52                   		mov.L	r5, r2
 1682 00b7 A8 69                   		mov.L	4[r6], r1
 1683 00b9 05 00 00 00             		bsr	_ed25519_hash_free
 773:../src/wolfcrypt/src/ed25519.c **** #endif
 774:../src/wolfcrypt/src/ed25519.c **** #endif /* WOLFSSL_SE050 */
 775:../src/wolfcrypt/src/ed25519.c ****     return ret;
 1684                             		.loc 2 775 12
 1685 00bd EC A5                   		mov.L	[r10], r5
 1686                             	.L120:
 776:../src/wolfcrypt/src/ed25519.c **** }
 1687                             		.loc 2 776 1 discriminator 1
 1688 00bf EF 51                   		mov.L	r5, r1
 1689 00c1 72 00 0C 01             		add	#0x10c, r0
 1690 00c5 7E B6                   		pop	r6
 1691 00c7 7E BA                   		pop	r10
 1692 00c9 02                      		rts
 1693                             	.LFE58:
 1695 00ca 74 10 01 00 00 00       		.section	.text.wc_ed25519_verify_msg,"ax",@progbits
 1696                             		.global	_wc_ed25519_verify_msg
 1698                             	_wc_ed25519_verify_msg:
 1699                             	.LFB59:
 777:../src/wolfcrypt/src/ed25519.c **** 
 778:../src/wolfcrypt/src/ed25519.c **** /*
 779:../src/wolfcrypt/src/ed25519.c ****    sig     is array of bytes containing the signature
 780:../src/wolfcrypt/src/ed25519.c ****    sigLen  is the length of sig byte array
 781:../src/wolfcrypt/src/ed25519.c ****    msg     the array of bytes containing the message
 782:../src/wolfcrypt/src/ed25519.c ****    msgLen  length of msg array
 783:../src/wolfcrypt/src/ed25519.c ****    res     will be 1 on successful verify and 0 on unsuccessful
 784:../src/wolfcrypt/src/ed25519.c ****    key     Ed25519 public key
 785:../src/wolfcrypt/src/ed25519.c ****    return  0 and res of 1 on success
 786:../src/wolfcrypt/src/ed25519.c **** */
 787:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_verify_msg(const byte* sig, word32 sigLen, const byte* msg,
 788:../src/wolfcrypt/src/ed25519.c ****                           word32 msgLen, int* res, ed25519_key* key)
 789:../src/wolfcrypt/src/ed25519.c **** {
 1700                             		.loc 2 789 1
 1701 0000 7E AA                   		push.l	r10
 1702                             	.LCFI46:
 1703 0002 71 0A E8                		add	#-24, r0, r10
 1704                             	.LCFI47:
 1705 0005 71 A0 EC                		add	#-20, r10, r0
 1706                             	.LCFI48:
 1707 0008 75 45 20                		mov.L	#32, r5
 1708 000b 4B A5                   		add	r10, r5
 1709 000d E3 A1                   		mov.L	r1, [r10]
 1710 000f E7 A2 01                		mov.L	r2, 4[r10]
 1711 0012 E7 A3 02                		mov.L	r3, 8[r10]
 1712 0015 E7 A4 03                		mov.L	r4, 12[r10]
 790:../src/wolfcrypt/src/ed25519.c ****     return wc_ed25519_verify_msg_ex(sig, sigLen, msg, msgLen, res, key,
 1713                             		.loc 2 790 12
 1714 0018 3C 80 00                		mov.B	#0, 16[r0]
 1715 001b 3E 03 00                		mov.L	#0, 12[r0]
 1716 001e F9 04 08 FF             		mov.B	#-1, 8[r0]
 1717 0022 A8 5C                   		mov.L	4[r5], r4
 1718 0024 A0 0C                   		mov.L	r4, 4[r0]
 1719 0026 EC 55                   		mov.L	[r5], r5
 1720 0028 E3 05                   		mov.L	r5, [r0]
 1721 002a ED A4 03                		mov.L	12[r10], r4
 1722 002d ED A3 02                		mov.L	8[r10], r3
 1723 0030 ED A2 01                		mov.L	4[r10], r2
 1724 0033 EC A1                   		mov.L	[r10], r1
 1725 0035 05 00 00 00             		bsr	_wc_ed25519_verify_msg_ex
 1726 0039 EF 15                   		mov.L	r1, r5
 791:../src/wolfcrypt/src/ed25519.c ****                                     (byte)Ed25519, NULL, 0);
 792:../src/wolfcrypt/src/ed25519.c **** }
 1727                             		.loc 2 792 1
 1728 003b EF 51                   		mov.L	r5, r1
 1729 003d 3F AA 0C                		rtsd	#48, r10-r10
 1730                             	.LFE59:
 1732                             		.section	.text.wc_ed25519ctx_verify_msg,"ax",@progbits
 1733                             		.global	_wc_ed25519ctx_verify_msg
 1735                             	_wc_ed25519ctx_verify_msg:
 1736                             	.LFB60:
 793:../src/wolfcrypt/src/ed25519.c **** 
 794:../src/wolfcrypt/src/ed25519.c **** /*
 795:../src/wolfcrypt/src/ed25519.c ****    sig         is array of bytes containing the signature
 796:../src/wolfcrypt/src/ed25519.c ****    sigLen      is the length of sig byte array
 797:../src/wolfcrypt/src/ed25519.c ****    msg         the array of bytes containing the message
 798:../src/wolfcrypt/src/ed25519.c ****    msgLen      length of msg array
 799:../src/wolfcrypt/src/ed25519.c ****    res         will be 1 on successful verify and 0 on unsuccessful
 800:../src/wolfcrypt/src/ed25519.c ****    key         Ed25519 public key
 801:../src/wolfcrypt/src/ed25519.c ****    context     extra signing data
 802:../src/wolfcrypt/src/ed25519.c ****    contextLen  length of extra signing data
 803:../src/wolfcrypt/src/ed25519.c ****    return  0 and res of 1 on success
 804:../src/wolfcrypt/src/ed25519.c **** */
 805:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519ctx_verify_msg(const byte* sig, word32 sigLen, const byte* msg,
 806:../src/wolfcrypt/src/ed25519.c ****                              word32 msgLen, int* res, ed25519_key* key,
 807:../src/wolfcrypt/src/ed25519.c ****                              const byte* context, byte contextLen)
 808:../src/wolfcrypt/src/ed25519.c **** {
 1737                             		.loc 2 808 1
 1738 0000 7E AA                   		push.l	r10
 1739                             	.LCFI49:
 1740 0002 71 0A E0                		add	#-32, r0, r10
 1741                             	.LCFI50:
 1742 0005 71 A0 EC                		add	#-20, r10, r0
 1743                             	.LCFI51:
 1744 0008 75 45 28                		mov.L	#40, r5
 1745 000b 4B A5                   		add	r10, r5
 1746 000d E3 A1                   		mov.L	r1, [r10]
 1747 000f E7 A2 01                		mov.L	r2, 4[r10]
 1748 0012 E7 A3 02                		mov.L	r3, 8[r10]
 1749 0015 E7 A4 03                		mov.L	r4, 12[r10]
 809:../src/wolfcrypt/src/ed25519.c ****     return wc_ed25519_verify_msg_ex(sig, sigLen, msg, msgLen, res, key,
 1750                             		.loc 2 809 12
 1751 0018 8B 54                   		mov.B	12[r5], r4
 1752 001a 84 04                   		mov.B	r4, 16[r0]
 1753 001c A8 D4                   		mov.L	8[r5], r4
 1754 001e A0 8C                   		mov.L	r4, 12[r0]
 1755 0020 3C 08 00                		mov.B	#0, 8[r0]
 1756 0023 A8 5C                   		mov.L	4[r5], r4
 1757 0025 A0 0C                   		mov.L	r4, 4[r0]
 1758 0027 EC 55                   		mov.L	[r5], r5
 1759 0029 E3 05                   		mov.L	r5, [r0]
 1760 002b ED A4 03                		mov.L	12[r10], r4
 1761 002e ED A3 02                		mov.L	8[r10], r3
 1762 0031 ED A2 01                		mov.L	4[r10], r2
 1763 0034 EC A1                   		mov.L	[r10], r1
 1764 0036 05 00 00 00             		bsr	_wc_ed25519_verify_msg_ex
 1765 003a EF 15                   		mov.L	r1, r5
 810:../src/wolfcrypt/src/ed25519.c ****                                     Ed25519ctx, context, contextLen);
 811:../src/wolfcrypt/src/ed25519.c **** }
 1766                             		.loc 2 811 1
 1767 003c EF 51                   		mov.L	r5, r1
 1768 003e 3F AA 0E                		rtsd	#56, r10-r10
 1769                             	.LFE60:
 1771                             		.section	.text.wc_ed25519ph_verify_hash,"ax",@progbits
 1772                             		.global	_wc_ed25519ph_verify_hash
 1774                             	_wc_ed25519ph_verify_hash:
 1775                             	.LFB61:
 812:../src/wolfcrypt/src/ed25519.c **** 
 813:../src/wolfcrypt/src/ed25519.c **** /*
 814:../src/wolfcrypt/src/ed25519.c ****    sig         is array of bytes containing the signature
 815:../src/wolfcrypt/src/ed25519.c ****    sigLen      is the length of sig byte array
 816:../src/wolfcrypt/src/ed25519.c ****    hash        the array of bytes containing the SHA-512 hash of the message
 817:../src/wolfcrypt/src/ed25519.c ****    hashLen     length of hash array
 818:../src/wolfcrypt/src/ed25519.c ****    res         will be 1 on successful verify and 0 on unsuccessful
 819:../src/wolfcrypt/src/ed25519.c ****    key         Ed25519 public key
 820:../src/wolfcrypt/src/ed25519.c ****    context     extra signing data
 821:../src/wolfcrypt/src/ed25519.c ****    contextLen  length of extra signing data
 822:../src/wolfcrypt/src/ed25519.c ****    return  0 and res of 1 on success
 823:../src/wolfcrypt/src/ed25519.c **** */
 824:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519ph_verify_hash(const byte* sig, word32 sigLen, const byte* hash,
 825:../src/wolfcrypt/src/ed25519.c ****                              word32 hashLen, int* res, ed25519_key* key,
 826:../src/wolfcrypt/src/ed25519.c ****                              const byte* context, byte contextLen)
 827:../src/wolfcrypt/src/ed25519.c **** {
 1776                             		.loc 2 827 1
 1777 0000 7E AA                   		push.l	r10
 1778                             	.LCFI52:
 1779 0002 71 0A E0                		add	#-32, r0, r10
 1780                             	.LCFI53:
 1781 0005 71 A0 EC                		add	#-20, r10, r0
 1782                             	.LCFI54:
 1783 0008 75 45 28                		mov.L	#40, r5
 1784 000b 4B A5                   		add	r10, r5
 1785 000d E3 A1                   		mov.L	r1, [r10]
 1786 000f E7 A2 01                		mov.L	r2, 4[r10]
 1787 0012 E7 A3 02                		mov.L	r3, 8[r10]
 1788 0015 E7 A4 03                		mov.L	r4, 12[r10]
 828:../src/wolfcrypt/src/ed25519.c ****     return wc_ed25519_verify_msg_ex(sig, sigLen, hash, hashLen, res, key,
 1789                             		.loc 2 828 12
 1790 0018 8B 54                   		mov.B	12[r5], r4
 1791 001a 84 04                   		mov.B	r4, 16[r0]
 1792 001c A8 D4                   		mov.L	8[r5], r4
 1793 001e A0 8C                   		mov.L	r4, 12[r0]
 1794 0020 3C 08 01                		mov.B	#1, 8[r0]
 1795 0023 A8 5C                   		mov.L	4[r5], r4
 1796 0025 A0 0C                   		mov.L	r4, 4[r0]
 1797 0027 EC 55                   		mov.L	[r5], r5
 1798 0029 E3 05                   		mov.L	r5, [r0]
 1799 002b ED A4 03                		mov.L	12[r10], r4
 1800 002e ED A3 02                		mov.L	8[r10], r3
 1801 0031 ED A2 01                		mov.L	4[r10], r2
 1802 0034 EC A1                   		mov.L	[r10], r1
 1803 0036 05 00 00 00             		bsr	_wc_ed25519_verify_msg_ex
 1804 003a EF 15                   		mov.L	r1, r5
 829:../src/wolfcrypt/src/ed25519.c ****                                     Ed25519ph, context, contextLen);
 830:../src/wolfcrypt/src/ed25519.c **** }
 1805                             		.loc 2 830 1
 1806 003c EF 51                   		mov.L	r5, r1
 1807 003e 3F AA 0E                		rtsd	#56, r10-r10
 1808                             	.LFE61:
 1810                             		.section	.text.wc_ed25519ph_verify_msg,"ax",@progbits
 1811                             		.global	_wc_ed25519ph_verify_msg
 1813                             	_wc_ed25519ph_verify_msg:
 1814                             	.LFB62:
 831:../src/wolfcrypt/src/ed25519.c **** 
 832:../src/wolfcrypt/src/ed25519.c **** /*
 833:../src/wolfcrypt/src/ed25519.c ****    sig         is array of bytes containing the signature
 834:../src/wolfcrypt/src/ed25519.c ****    sigLen      is the length of sig byte array
 835:../src/wolfcrypt/src/ed25519.c ****    msg         the array of bytes containing the message
 836:../src/wolfcrypt/src/ed25519.c ****    msgLen      length of msg array
 837:../src/wolfcrypt/src/ed25519.c ****    res         will be 1 on successful verify and 0 on unsuccessful
 838:../src/wolfcrypt/src/ed25519.c ****    key         Ed25519 public key
 839:../src/wolfcrypt/src/ed25519.c ****    context     extra signing data
 840:../src/wolfcrypt/src/ed25519.c ****    contextLen  length of extra signing data
 841:../src/wolfcrypt/src/ed25519.c ****    return  0 and res of 1 on success
 842:../src/wolfcrypt/src/ed25519.c **** */
 843:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519ph_verify_msg(const byte* sig, word32 sigLen, const byte* msg,
 844:../src/wolfcrypt/src/ed25519.c ****                             word32 msgLen, int* res, ed25519_key* key,
 845:../src/wolfcrypt/src/ed25519.c ****                             const byte* context, byte contextLen)
 846:../src/wolfcrypt/src/ed25519.c **** {
 1815                             		.loc 2 846 1
 1816 0000 7E AA                   		push.l	r10
 1817                             	.LCFI55:
 1818 0002 7E A6                   		push.l	r6
 1819                             	.LCFI56:
 1820 0004 71 0A 9C                		add	#-100, r0, r10
 1821                             	.LCFI57:
 1822 0007 71 A0 EC                		add	#-20, r10, r0
 1823                             	.LCFI58:
 1824 000a 75 46 70                		mov.L	#0x70, r6
 1825 000d 4B A6                   		add	r10, r6
 1826 000f E7 A1 11                		mov.L	r1, 68[r10]
 1827 0012 E7 A2 12                		mov.L	r2, 72[r10]
 1828 0015 E7 A3 13                		mov.L	r3, 76[r10]
 1829 0018 E7 A4 14                		mov.L	r4, 80[r10]
 847:../src/wolfcrypt/src/ed25519.c ****     int  ret;
 848:../src/wolfcrypt/src/ed25519.c ****     byte hash[WC_SHA512_DIGEST_SIZE];
 849:../src/wolfcrypt/src/ed25519.c **** 
 850:../src/wolfcrypt/src/ed25519.c ****     ret = ed25519_hash(key, msg, msgLen, hash);
 1830                             		.loc 2 850 11
 1831 001b 71 A5 04                		add	#4, r10, r5
 1832 001e EF 54                   		mov.L	r5, r4
 1833 0020 ED A3 14                		mov.L	80[r10], r3
 1834 0023 ED A2 13                		mov.L	76[r10], r2
 1835 0026 A8 69                   		mov.L	4[r6], r1
 1836 0028 05 00 00 00             		bsr	_ed25519_hash
 1837 002c E3 A1                   		mov.L	r1, [r10]
 851:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0)
 1838                             		.loc 2 851 8
 1839 002e EC A5                   		mov.L	[r10], r5
 1840 0030 61 05                   		cmp	#0, r5
 1841 0032 15                      		beq	.L128
 852:../src/wolfcrypt/src/ed25519.c ****         return ret;
 1842                             		.loc 2 852 16
 1843 0033 EC A5                   		mov.L	[r10], r5
 1844 0035 2E 29                   		bra	.L130
 1845                             	.L128:
 853:../src/wolfcrypt/src/ed25519.c **** 
 854:../src/wolfcrypt/src/ed25519.c ****     return wc_ed25519_verify_msg_ex(sig, sigLen, hash, sizeof(hash), res, key,
 1846                             		.loc 2 854 12
 1847 0037 71 A5 04                		add	#4, r10, r5
 1848 003a 8B 64                   		mov.B	12[r6], r4
 1849 003c 84 04                   		mov.B	r4, 16[r0]
 1850 003e A8 E4                   		mov.L	8[r6], r4
 1851 0040 A0 8C                   		mov.L	r4, 12[r0]
 1852 0042 3C 08 01                		mov.B	#1, 8[r0]
 1853 0045 A8 6C                   		mov.L	4[r6], r4
 1854 0047 A0 0C                   		mov.L	r4, 4[r0]
 1855 0049 EC 64                   		mov.L	[r6], r4
 1856 004b E3 04                   		mov.L	r4, [r0]
 1857 004d 75 44 40                		mov.L	#0x40, r4
 1858 0050 EF 53                   		mov.L	r5, r3
 1859 0052 ED A2 12                		mov.L	72[r10], r2
 1860 0055 ED A1 11                		mov.L	68[r10], r1
 1861 0058 05 00 00 00             		bsr	_wc_ed25519_verify_msg_ex
 1862 005c EF 15                   		mov.L	r1, r5
 1863                             	.L130:
 855:../src/wolfcrypt/src/ed25519.c ****                                     Ed25519ph, context, contextLen);
 856:../src/wolfcrypt/src/ed25519.c **** }
 1864                             		.loc 2 856 1 discriminator 1
 1865 005e EF 51                   		mov.L	r5, r1
 1866 0060 71 00 78                		add	#0x78, r0
 1867 0063 7E B6                   		pop	r6
 1868 0065 7E BA                   		pop	r10
 1869 0067 02                      		rts
 1870                             	.LFE62:
 1872                             		.section	.text.wc_ed25519_init_ex,"ax",@progbits
 1873                             		.global	_wc_ed25519_init_ex
 1875                             	_wc_ed25519_init_ex:
 1876                             	.LFB63:
 857:../src/wolfcrypt/src/ed25519.c **** #endif /* HAVE_ED25519_VERIFY */
 858:../src/wolfcrypt/src/ed25519.c **** 
 859:../src/wolfcrypt/src/ed25519.c **** 
 860:../src/wolfcrypt/src/ed25519.c **** /* initialize information and memory for key */
 861:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_init_ex(ed25519_key* key, void* heap, int devId)
 862:../src/wolfcrypt/src/ed25519.c **** {
 1877                             		.loc 2 862 1
 1878 0000 7E AA                   		push.l	r10
 1879                             	.LCFI59:
 1880 0002 71 0A F4                		add	#-12, r0, r10
 1881                             	.LCFI60:
 1882 0005 EF A0                   		mov.L	r10, r0
 1883 0007 E3 A1                   		mov.L	r1, [r10]
 1884 0009 E7 A2 01                		mov.L	r2, 4[r10]
 1885 000c E7 A3 02                		mov.L	r3, 8[r10]
 863:../src/wolfcrypt/src/ed25519.c ****     if (key == NULL)
 1886                             		.loc 2 863 8
 1887 000f EC A5                   		mov.L	[r10], r5
 1888 0011 61 05                   		cmp	#0, r5
 1889 0013 1F                      		bne	.L132
 864:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 1890                             		.loc 2 864 16
 1891 0014 FB 5A 53 FF             		mov.L	#-173, r5
 1892 0018 2E 1A                   		bra	.L133
 1893                             	.L132:
 865:../src/wolfcrypt/src/ed25519.c **** 
 866:../src/wolfcrypt/src/ed25519.c ****     XMEMSET(key, 0, sizeof(ed25519_key));
 1894                             		.loc 2 866 5
 1895 001a 75 43 68                		mov.L	#0x68, r3
 1896 001d 66 02                   		mov.L	#0, r2
 1897 001f EC A1                   		mov.L	[r10], r1
 1898 0021 05 00 00 00             		bsr	_memset
 867:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLF_CRYPTO_CB
 868:../src/wolfcrypt/src/ed25519.c ****     key->devId = devId;
 869:../src/wolfcrypt/src/ed25519.c **** #else
 870:../src/wolfcrypt/src/ed25519.c ****     (void)devId;
 871:../src/wolfcrypt/src/ed25519.c **** #endif
 872:../src/wolfcrypt/src/ed25519.c ****     key->heap = heap;
 1899                             		.loc 2 872 15
 1900 0025 EC A5                   		mov.L	[r10], r5
 1901 0027 ED A4 01                		mov.L	4[r10], r4
 1902 002a A6 5C                   		mov.L	r4, 100[r5]
 873:../src/wolfcrypt/src/ed25519.c **** 
 874:../src/wolfcrypt/src/ed25519.c **** #ifndef FREESCALE_LTC_ECC
 875:../src/wolfcrypt/src/ed25519.c ****     fe_init();
 1903                             		.loc 2 875 5
 1904 002c 05 00 00 00             		bsr	_fe_init
 876:../src/wolfcrypt/src/ed25519.c **** #endif
 877:../src/wolfcrypt/src/ed25519.c **** 
 878:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
 879:../src/wolfcrypt/src/ed25519.c ****     wc_MemZero_Add("wc_ed25519_init_ex key->k", &key->k, sizeof(key->k));
 880:../src/wolfcrypt/src/ed25519.c **** #endif
 881:../src/wolfcrypt/src/ed25519.c **** 
 882:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
 883:../src/wolfcrypt/src/ed25519.c ****     return ed25519_hash_init(key, &key->sha);
 884:../src/wolfcrypt/src/ed25519.c **** #else /* !WOLFSSL_ED25519_PERSISTENT_SHA */
 885:../src/wolfcrypt/src/ed25519.c ****     return 0;
 1905                             		.loc 2 885 12
 1906 0030 66 05                   		mov.L	#0, r5
 1907                             	.L133:
 886:../src/wolfcrypt/src/ed25519.c **** #endif /* WOLFSSL_ED25519_PERSISTENT_SHA */
 887:../src/wolfcrypt/src/ed25519.c **** }
 1908                             		.loc 2 887 1
 1909 0032 EF 51                   		mov.L	r5, r1
 1910 0034 3F AA 04                		rtsd	#16, r10-r10
 1911                             	.LFE63:
 1913                             		.section	.text.wc_ed25519_init,"ax",@progbits
 1914                             		.global	_wc_ed25519_init
 1916                             	_wc_ed25519_init:
 1917                             	.LFB64:
 888:../src/wolfcrypt/src/ed25519.c **** 
 889:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_init(ed25519_key* key)
 890:../src/wolfcrypt/src/ed25519.c **** {
 1918                             		.loc 2 890 1
 1919 0000 7E AA                   		push.l	r10
 1920                             	.LCFI61:
 1921 0002 71 0A FC                		add	#-4, r0, r10
 1922                             	.LCFI62:
 1923 0005 EF A0                   		mov.L	r10, r0
 1924 0007 E3 A1                   		mov.L	r1, [r10]
 891:../src/wolfcrypt/src/ed25519.c ****     return wc_ed25519_init_ex(key, NULL, INVALID_DEVID);
 1925                             		.loc 2 891 12
 1926 0009 FB 36 FE                		mov.L	#-2, r3
 1927 000c 66 02                   		mov.L	#0, r2
 1928 000e EC A1                   		mov.L	[r10], r1
 1929 0010 05 00 00 00             		bsr	_wc_ed25519_init_ex
 1930 0014 EF 15                   		mov.L	r1, r5
 892:../src/wolfcrypt/src/ed25519.c **** }
 1931                             		.loc 2 892 1
 1932 0016 EF 51                   		mov.L	r5, r1
 1933 0018 3F AA 02                		rtsd	#8, r10-r10
 1934                             	.LFE64:
 1936                             		.section	.text.wc_ed25519_free,"ax",@progbits
 1937                             		.global	_wc_ed25519_free
 1939                             	_wc_ed25519_free:
 1940                             	.LFB65:
 893:../src/wolfcrypt/src/ed25519.c **** 
 894:../src/wolfcrypt/src/ed25519.c **** /* clear memory of key */
 895:../src/wolfcrypt/src/ed25519.c **** void wc_ed25519_free(ed25519_key* key)
 896:../src/wolfcrypt/src/ed25519.c **** {
 1941                             		.loc 2 896 1
 1942 0000 7E AA                   		push.l	r10
 1943                             	.LCFI63:
 1944 0002 71 0A FC                		add	#-4, r0, r10
 1945                             	.LCFI64:
 1946 0005 EF A0                   		mov.L	r10, r0
 1947 0007 E3 A1                   		mov.L	r1, [r10]
 897:../src/wolfcrypt/src/ed25519.c ****     if (key == NULL)
 1948                             		.loc 2 897 8
 1949 0009 EC A5                   		mov.L	[r10], r5
 1950 000b 61 05                   		cmp	#0, r5
 1951 000d 20 0D                   		beq	.L139
 898:../src/wolfcrypt/src/ed25519.c ****         return;
 899:../src/wolfcrypt/src/ed25519.c **** 
 900:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_ED25519_PERSISTENT_SHA
 901:../src/wolfcrypt/src/ed25519.c ****     ed25519_hash_free(key, &key->sha);
 902:../src/wolfcrypt/src/ed25519.c **** #endif
 903:../src/wolfcrypt/src/ed25519.c **** 
 904:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_SE050
 905:../src/wolfcrypt/src/ed25519.c ****     se050_ed25519_free_key(key);
 906:../src/wolfcrypt/src/ed25519.c **** #endif
 907:../src/wolfcrypt/src/ed25519.c **** 
 908:../src/wolfcrypt/src/ed25519.c ****     ForceZero(key, sizeof(ed25519_key));
 1952                             		.loc 2 908 5
 1953 000f 75 42 68                		mov.L	#0x68, r2
 1954 0012 EC A1                   		mov.L	[r10], r1
 1955 0014 05 00 00 00             		bsr	_ForceZero
 1956 0018 2E 03                   		bra	.L136
 1957                             	.L139:
 898:../src/wolfcrypt/src/ed25519.c ****         return;
 1958                             		.loc 2 898 9
 1959 001a 03                      		nop
 1960                             	.L136:
 909:../src/wolfcrypt/src/ed25519.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
 910:../src/wolfcrypt/src/ed25519.c ****     wc_MemZero_Check(key, sizeof(ed25519_key));
 911:../src/wolfcrypt/src/ed25519.c **** #endif
 912:../src/wolfcrypt/src/ed25519.c **** }
 1961                             		.loc 2 912 1
 1962 001b 3F AA 02                		rtsd	#8, r10-r10
 1963                             	.LFE65:
 1965                             		.section	.text.wc_ed25519_export_public,"ax",@progbits
 1966                             		.global	_wc_ed25519_export_public
 1968                             	_wc_ed25519_export_public:
 1969                             	.LFB66:
 913:../src/wolfcrypt/src/ed25519.c **** 
 914:../src/wolfcrypt/src/ed25519.c **** 
 915:../src/wolfcrypt/src/ed25519.c **** #ifdef HAVE_ED25519_KEY_EXPORT
 916:../src/wolfcrypt/src/ed25519.c **** 
 917:../src/wolfcrypt/src/ed25519.c **** /*
 918:../src/wolfcrypt/src/ed25519.c ****     outLen should contain the size of out buffer when input. outLen is than set
 919:../src/wolfcrypt/src/ed25519.c ****     to the final output length.
 920:../src/wolfcrypt/src/ed25519.c ****     returns 0 on success
 921:../src/wolfcrypt/src/ed25519.c ****  */
 922:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_export_public(ed25519_key* key, byte* out, word32* outLen)
 923:../src/wolfcrypt/src/ed25519.c **** {
 1970                             		.loc 2 923 1
 1971 0000 7E AA                   		push.l	r10
 1972                             	.LCFI65:
 1973 0002 71 0A F4                		add	#-12, r0, r10
 1974                             	.LCFI66:
 1975 0005 EF A0                   		mov.L	r10, r0
 1976 0007 E3 A1                   		mov.L	r1, [r10]
 1977 0009 E7 A2 01                		mov.L	r2, 4[r10]
 1978 000c E7 A3 02                		mov.L	r3, 8[r10]
 924:../src/wolfcrypt/src/ed25519.c ****     /* sanity check on arguments */
 925:../src/wolfcrypt/src/ed25519.c ****     if (key == NULL || out == NULL || outLen == NULL)
 1979                             		.loc 2 925 8
 1980 000f EC A5                   		mov.L	[r10], r5
 1981 0011 61 05                   		cmp	#0, r5
 1982 0013 20 0E                   		beq	.L141
 1983                             		.loc 2 925 21 discriminator 1
 1984 0015 ED A5 01                		mov.L	4[r10], r5
 1985 0018 61 05                   		cmp	#0, r5
 1986 001a 17                      		beq	.L141
 1987                             		.loc 2 925 36 discriminator 2
 1988 001b ED A5 02                		mov.L	8[r10], r5
 1989 001e 61 05                   		cmp	#0, r5
 1990 0020 1F                      		bne	.L142
 1991                             	.L141:
 926:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 1992                             		.loc 2 926 16
 1993 0021 FB 5A 53 FF             		mov.L	#-173, r5
 1994 0025 2E 2E                   		bra	.L143
 1995                             	.L142:
 927:../src/wolfcrypt/src/ed25519.c **** 
 928:../src/wolfcrypt/src/ed25519.c ****     if (*outLen < ED25519_PUB_KEY_SIZE) {
 1996                             		.loc 2 928 9
 1997 0027 ED A5 02                		mov.L	8[r10], r5
 1998 002a EC 55                   		mov.L	[r5], r5
 1999                             		.loc 2 928 8
 2000 002c 75 55 1F                		cmp	#31, r5
 2001 002f 24 0E                   		bgtu	.L144
 929:../src/wolfcrypt/src/ed25519.c ****         *outLen = ED25519_PUB_KEY_SIZE;
 2002                             		.loc 2 929 17
 2003 0031 ED A5 02                		mov.L	8[r10], r5
 2004 0034 F8 56 20                		mov.L	#32, [r5]
 930:../src/wolfcrypt/src/ed25519.c ****         return BUFFER_E;
 2005                             		.loc 2 930 16
 2006 0037 FB 5A 7C FF             		mov.L	#-132, r5
 2007 003b 2E 18                   		bra	.L143
 2008                             	.L144:
 931:../src/wolfcrypt/src/ed25519.c ****     }
 932:../src/wolfcrypt/src/ed25519.c **** 
 933:../src/wolfcrypt/src/ed25519.c ****     *outLen = ED25519_PUB_KEY_SIZE;
 2009                             		.loc 2 933 13
 2010 003d ED A5 02                		mov.L	8[r10], r5
 2011 0040 F8 56 20                		mov.L	#32, [r5]
 934:../src/wolfcrypt/src/ed25519.c ****     XMEMCPY(out, key->p, ED25519_PUB_KEY_SIZE);
 2012                             		.loc 2 934 5
 2013 0043 EC A5                   		mov.L	[r10], r5
 2014 0045 75 43 20                		mov.L	#32, r3
 2015 0048 EF 52                   		mov.L	r5, r2
 2016 004a ED A1 01                		mov.L	4[r10], r1
 2017 004d 05 00 00 00             		bsr	_memcpy
 935:../src/wolfcrypt/src/ed25519.c **** 
 936:../src/wolfcrypt/src/ed25519.c ****     return 0;
 2018                             		.loc 2 936 12
 2019 0051 66 05                   		mov.L	#0, r5
 2020                             	.L143:
 937:../src/wolfcrypt/src/ed25519.c **** }
 2021                             		.loc 2 937 1
 2022 0053 EF 51                   		mov.L	r5, r1
 2023 0055 3F AA 04                		rtsd	#16, r10-r10
 2024                             	.LFE66:
 2026                             		.section	.text.wc_ed25519_import_public_ex,"ax",@progbits
 2027                             		.global	_wc_ed25519_import_public_ex
 2029                             	_wc_ed25519_import_public_ex:
 2030                             	.LFB67:
 938:../src/wolfcrypt/src/ed25519.c **** 
 939:../src/wolfcrypt/src/ed25519.c **** #endif /* HAVE_ED25519_KEY_EXPORT */
 940:../src/wolfcrypt/src/ed25519.c **** 
 941:../src/wolfcrypt/src/ed25519.c **** 
 942:../src/wolfcrypt/src/ed25519.c **** #ifdef HAVE_ED25519_KEY_IMPORT
 943:../src/wolfcrypt/src/ed25519.c **** /*
 944:../src/wolfcrypt/src/ed25519.c ****     Imports a compressed/uncompressed public key.
 945:../src/wolfcrypt/src/ed25519.c ****     in       the byte array containing the public key
 946:../src/wolfcrypt/src/ed25519.c ****     inLen    the length of the byte array being passed in
 947:../src/wolfcrypt/src/ed25519.c ****     key      ed25519 key struct to put the public key in
 948:../src/wolfcrypt/src/ed25519.c ****     trusted  whether the public key is trusted to match private key if set
 949:../src/wolfcrypt/src/ed25519.c ****  */
 950:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_import_public_ex(const byte* in, word32 inLen, ed25519_key* key,
 951:../src/wolfcrypt/src/ed25519.c ****     int trusted)
 952:../src/wolfcrypt/src/ed25519.c **** {
 2031                             		.loc 2 952 1
 2032 0000 7E AA                   		push.l	r10
 2033                             	.LCFI67:
 2034 0002 71 0A EC                		add	#-20, r0, r10
 2035                             	.LCFI68:
 2036 0005 EF A0                   		mov.L	r10, r0
 2037 0007 E7 A1 01                		mov.L	r1, 4[r10]
 2038 000a E7 A2 02                		mov.L	r2, 8[r10]
 2039 000d E7 A3 03                		mov.L	r3, 12[r10]
 2040 0010 E7 A4 04                		mov.L	r4, 16[r10]
 953:../src/wolfcrypt/src/ed25519.c ****     int ret = 0;
 2041                             		.loc 2 953 9
 2042 0013 F8 A6 00                		mov.L	#0, [r10]
 954:../src/wolfcrypt/src/ed25519.c **** 
 955:../src/wolfcrypt/src/ed25519.c ****     /* sanity check on arguments */
 956:../src/wolfcrypt/src/ed25519.c ****     if (in == NULL || key == NULL)
 2043                             		.loc 2 956 8
 2044 0016 ED A5 01                		mov.L	4[r10], r5
 2045 0019 61 05                   		cmp	#0, r5
 2046 001b 17                      		beq	.L146
 2047                             		.loc 2 956 20 discriminator 1
 2048 001c ED A5 03                		mov.L	12[r10], r5
 2049 001f 61 05                   		cmp	#0, r5
 2050 0021 18                      		bne	.L147
 2051                             	.L146:
 957:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2052                             		.loc 2 957 16
 2053 0022 FB 5A 53 FF             		mov.L	#-173, r5
 2054 0026 38 C7 00                		bra	.L148
 2055                             	.L147:
 958:../src/wolfcrypt/src/ed25519.c **** 
 959:../src/wolfcrypt/src/ed25519.c ****     if (inLen < ED25519_PUB_KEY_SIZE)
 2056                             		.loc 2 959 8
 2057 0029 ED A5 02                		mov.L	8[r10], r5
 2058 002c 75 55 1F                		cmp	#31, r5
 2059 002f 24 09                   		bgtu	.L149
 960:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2060                             		.loc 2 960 16
 2061 0031 FB 5A 53 FF             		mov.L	#-173, r5
 2062 0035 38 B8 00                		bra	.L148
 2063                             	.L149:
 961:../src/wolfcrypt/src/ed25519.c **** 
 962:../src/wolfcrypt/src/ed25519.c ****     /* compressed prefix according to draft
 963:../src/wolfcrypt/src/ed25519.c ****        http://www.ietf.org/id/draft-koch-eddsa-for-openpgp-02.txt */
 964:../src/wolfcrypt/src/ed25519.c ****     if (in[0] == 0x40 && inLen == ED25519_PUB_KEY_SIZE + 1) {
 2064                             		.loc 2 964 11
 2065 0038 ED A5 01                		mov.L	4[r10], r5
 2066 003b CC 55                   		mov.B	[r5], r5
 2067                             		.loc 2 964 8
 2068 003d 5B 55                   		movu.B	r5, r5
 2069 003f 75 55 40                		cmp	#0x40, r5
 2070 0042 21 1F                   		bne	.L150
 2071                             		.loc 2 964 23 discriminator 1
 2072 0044 ED A5 02                		mov.L	8[r10], r5
 2073 0047 75 55 21                		cmp	#33, r5
 2074 004a 21 17                   		bne	.L150
 965:../src/wolfcrypt/src/ed25519.c ****         /* key is stored in compressed format so just copy in */
 966:../src/wolfcrypt/src/ed25519.c ****         XMEMCPY(key->p, (in + 1), ED25519_PUB_KEY_SIZE);
 2075                             		.loc 2 966 9
 2076 004c ED A4 03                		mov.L	12[r10], r4
 2077 004f ED A5 01                		mov.L	4[r10], r5
 2078 0052 62 15                   		add	#1, r5
 2079 0054 75 43 20                		mov.L	#32, r3
 2080 0057 EF 52                   		mov.L	r5, r2
 2081 0059 EF 41                   		mov.L	r4, r1
 2082 005b 05 00 00 00             		bsr	_memcpy
 2083 005f 2E 4D                   		bra	.L151
 2084                             	.L150:
 967:../src/wolfcrypt/src/ed25519.c **** #ifdef FREESCALE_LTC_ECC
 968:../src/wolfcrypt/src/ed25519.c ****         /* recover X coordinate */
 969:../src/wolfcrypt/src/ed25519.c ****         ltc_pkha_ecc_point_t pubKey;
 970:../src/wolfcrypt/src/ed25519.c ****         pubKey.X = key->pointX;
 971:../src/wolfcrypt/src/ed25519.c ****         pubKey.Y = key->pointY;
 972:../src/wolfcrypt/src/ed25519.c ****         LTC_PKHA_Ed25519_PointDecompress(key->p, ED25519_PUB_KEY_SIZE, &pubKey);
 973:../src/wolfcrypt/src/ed25519.c **** #endif
 974:../src/wolfcrypt/src/ed25519.c ****     }
 975:../src/wolfcrypt/src/ed25519.c ****     /* importing uncompressed public key */
 976:../src/wolfcrypt/src/ed25519.c ****     else if (in[0] == 0x04 && inLen > 2*ED25519_PUB_KEY_SIZE) {
 2085                             		.loc 2 976 16
 2086 0061 ED A5 01                		mov.L	4[r10], r5
 2087 0064 CC 55                   		mov.B	[r5], r5
 2088                             		.loc 2 976 13
 2089 0066 5B 55                   		movu.B	r5, r5
 2090 0068 61 45                   		cmp	#4, r5
 2091 006a 21 26                   		bne	.L152
 2092                             		.loc 2 976 28 discriminator 1
 2093 006c ED A5 02                		mov.L	8[r10], r5
 2094 006f 75 55 40                		cmp	#0x40, r5
 2095 0072 25 1E                   		bleu	.L152
 977:../src/wolfcrypt/src/ed25519.c **** #ifdef FREESCALE_LTC_ECC
 978:../src/wolfcrypt/src/ed25519.c ****         /* reverse bytes for little endian byte order */
 979:../src/wolfcrypt/src/ed25519.c ****         for (int i = 0; i < ED25519_KEY_SIZE; i++)
 980:../src/wolfcrypt/src/ed25519.c ****         {
 981:../src/wolfcrypt/src/ed25519.c ****             key->pointX[i] = *(in + ED25519_KEY_SIZE - i);
 982:../src/wolfcrypt/src/ed25519.c ****             key->pointY[i] = *(in + 2*ED25519_KEY_SIZE - i);
 983:../src/wolfcrypt/src/ed25519.c ****         }
 984:../src/wolfcrypt/src/ed25519.c ****         XMEMCPY(key->p, key->pointY, ED25519_KEY_SIZE);
 985:../src/wolfcrypt/src/ed25519.c **** #else
 986:../src/wolfcrypt/src/ed25519.c ****         /* pass in (x,y) and store compressed key */
 987:../src/wolfcrypt/src/ed25519.c ****         ret = ge_compress_key(key->p, in+1,
 2096                             		.loc 2 987 34
 2097 0074 ED A1 03                		mov.L	12[r10], r1
 2098                             		.loc 2 987 15
 2099 0077 ED A5 01                		mov.L	4[r10], r5
 2100 007a 71 52 01                		add	#1, r5, r2
 2101 007d ED A5 01                		mov.L	4[r10], r5
 2102 0080 71 55 21                		add	#33, r5
 2103 0083 75 44 20                		mov.L	#32, r4
 2104 0086 EF 53                   		mov.L	r5, r3
 2105 0088 05 00 00 00             		bsr	_ge_compress_key
 2106 008c E3 A1                   		mov.L	r1, [r10]
 2107                             		.loc 2 987 13
 2108 008e 2E 1E                   		bra	.L151
 2109                             	.L152:
 988:../src/wolfcrypt/src/ed25519.c ****                               in+1+ED25519_PUB_KEY_SIZE, ED25519_PUB_KEY_SIZE);
 989:../src/wolfcrypt/src/ed25519.c **** #endif /* FREESCALE_LTC_ECC */
 990:../src/wolfcrypt/src/ed25519.c ****     }
 991:../src/wolfcrypt/src/ed25519.c ****     /* if not specified compressed or uncompressed check key size
 992:../src/wolfcrypt/src/ed25519.c ****        if key size is equal to compressed key size copy in key */
 993:../src/wolfcrypt/src/ed25519.c ****     else if (inLen == ED25519_PUB_KEY_SIZE) {
 2110                             		.loc 2 993 13
 2111 0090 ED A5 02                		mov.L	8[r10], r5
 2112 0093 75 55 20                		cmp	#32, r5
 2113 0096 21 12                   		bne	.L153
 994:../src/wolfcrypt/src/ed25519.c ****         XMEMCPY(key->p, in, ED25519_PUB_KEY_SIZE);
 2114                             		.loc 2 994 9
 2115 0098 ED A5 03                		mov.L	12[r10], r5
 2116 009b 75 43 20                		mov.L	#32, r3
 2117 009e ED A2 01                		mov.L	4[r10], r2
 2118 00a1 EF 51                   		mov.L	r5, r1
 2119 00a3 05 00 00 00             		bsr	_memcpy
 2120 00a7 0D                      		bra	.L151
 2121                             	.L153:
 995:../src/wolfcrypt/src/ed25519.c **** #ifdef FREESCALE_LTC_ECC
 996:../src/wolfcrypt/src/ed25519.c ****         /* recover X coordinate */
 997:../src/wolfcrypt/src/ed25519.c ****         ltc_pkha_ecc_point_t pubKey;
 998:../src/wolfcrypt/src/ed25519.c ****         pubKey.X = key->pointX;
 999:../src/wolfcrypt/src/ed25519.c ****         pubKey.Y = key->pointY;
1000:../src/wolfcrypt/src/ed25519.c ****         LTC_PKHA_Ed25519_PointDecompress(key->p, ED25519_PUB_KEY_SIZE, &pubKey);
1001:../src/wolfcrypt/src/ed25519.c **** #endif
1002:../src/wolfcrypt/src/ed25519.c ****     }
1003:../src/wolfcrypt/src/ed25519.c ****     else {
1004:../src/wolfcrypt/src/ed25519.c ****         ret = BAD_FUNC_ARG;
 2122                             		.loc 2 1004 13
 2123 00a8 F8 AA 53 FF             		mov.L	#-173, [r10]
 2124                             		.balign 8,3,1
 2125                             	.L151:
1005:../src/wolfcrypt/src/ed25519.c ****     }
1006:../src/wolfcrypt/src/ed25519.c **** 
1007:../src/wolfcrypt/src/ed25519.c ****     if (ret == 0) {
 2126                             		.loc 2 1007 8
 2127 00ac EC A5                   		mov.L	[r10], r5
 2128 00ae 61 05                   		cmp	#0, r5
 2129 00b0 21 2A                   		bne	.L154
1008:../src/wolfcrypt/src/ed25519.c ****         key->pubKeySet = 1;
 2130                             		.loc 2 1008 24
 2131 00b2 ED A4 03                		mov.L	12[r10], r4
 2132 00b5 CD 45 60                		mov.B	96[r4], r5
 2133 00b8 78 15                   		bset	#1, r5
 2134 00ba C7 45 60                		mov.B	r5, 96[r4]
1009:../src/wolfcrypt/src/ed25519.c ****         if (key->privKeySet && (!trusted)) {
 2135                             		.loc 2 1009 13
 2136 00bd ED A5 03                		mov.L	12[r10], r5
 2137 00c0 CD 55 60                		mov.B	96[r5], r5
 2138 00c3 64 15                   		and	#1, r5
 2139                             		.loc 2 1009 12
 2140 00c5 5B 55                   		movu.B	r5, r5
 2141 00c7 61 05                   		cmp	#0, r5
 2142 00c9 20 11                   		beq	.L154
 2143                             		.loc 2 1009 29 discriminator 1
 2144 00cb ED A5 04                		mov.L	16[r10], r5
 2145 00ce 61 05                   		cmp	#0, r5
 2146 00d0 1A                      		bne	.L154
1010:../src/wolfcrypt/src/ed25519.c ****             ret = wc_ed25519_check_key(key);
 2147                             		.loc 2 1010 19
 2148 00d1 ED A1 03                		mov.L	12[r10], r1
 2149 00d4 05 00 00 00             		bsr	_wc_ed25519_check_key
 2150 00d8 E3 A1                   		mov.L	r1, [r10]
 2151                             		.balign 8,3,1
 2152                             	.L154:
1011:../src/wolfcrypt/src/ed25519.c ****         }
1012:../src/wolfcrypt/src/ed25519.c ****     }
1013:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0) {
 2153                             		.loc 2 1013 8
 2154 00da EC A5                   		mov.L	[r10], r5
 2155 00dc 61 05                   		cmp	#0, r5
 2156 00de 20 0D                   		beq	.L155
1014:../src/wolfcrypt/src/ed25519.c ****         key->pubKeySet = 0;
 2157                             		.loc 2 1014 24
 2158 00e0 ED A4 03                		mov.L	12[r10], r4
 2159 00e3 CD 45 60                		mov.B	96[r4], r5
 2160 00e6 7A 15                   		bclr	#1, r5
 2161 00e8 C7 45 60                		mov.B	r5, 96[r4]
 2162                             	.L155:
1015:../src/wolfcrypt/src/ed25519.c ****     }
1016:../src/wolfcrypt/src/ed25519.c **** 
1017:../src/wolfcrypt/src/ed25519.c ****     /* bad public key format */
1018:../src/wolfcrypt/src/ed25519.c ****     return ret;
 2163                             		.loc 2 1018 12
 2164 00eb EC A5                   		mov.L	[r10], r5
 2165                             	.L148:
1019:../src/wolfcrypt/src/ed25519.c **** }
 2166                             		.loc 2 1019 1
 2167 00ed EF 51                   		mov.L	r5, r1
 2168 00ef 3F AA 06                		rtsd	#24, r10-r10
 2169                             	.LFE67:
 2171 00f2 74 10 01 00 00 00       		.section	.text.wc_ed25519_import_public,"ax",@progbits
 2172                             		.global	_wc_ed25519_import_public
 2174                             	_wc_ed25519_import_public:
 2175                             	.LFB68:
1020:../src/wolfcrypt/src/ed25519.c **** 
1021:../src/wolfcrypt/src/ed25519.c **** /*
1022:../src/wolfcrypt/src/ed25519.c ****     Imports a compressed/uncompressed public key.
1023:../src/wolfcrypt/src/ed25519.c ****     in    the byte array containing the public key
1024:../src/wolfcrypt/src/ed25519.c ****     inLen the length of the byte array being passed in
1025:../src/wolfcrypt/src/ed25519.c ****     key   ed25519 key struct to put the public key in
1026:../src/wolfcrypt/src/ed25519.c ****  */
1027:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_import_public(const byte* in, word32 inLen, ed25519_key* key)
1028:../src/wolfcrypt/src/ed25519.c **** {
 2176                             		.loc 2 1028 1
 2177 0000 7E AA                   		push.l	r10
 2178                             	.LCFI69:
 2179 0002 71 0A F4                		add	#-12, r0, r10
 2180                             	.LCFI70:
 2181 0005 EF A0                   		mov.L	r10, r0
 2182 0007 E3 A1                   		mov.L	r1, [r10]
 2183 0009 E7 A2 01                		mov.L	r2, 4[r10]
 2184 000c E7 A3 02                		mov.L	r3, 8[r10]
1029:../src/wolfcrypt/src/ed25519.c ****     return wc_ed25519_import_public_ex(in, inLen, key, 0);
 2185                             		.loc 2 1029 12
 2186 000f 66 04                   		mov.L	#0, r4
 2187 0011 ED A3 02                		mov.L	8[r10], r3
 2188 0014 ED A2 01                		mov.L	4[r10], r2
 2189 0017 EC A1                   		mov.L	[r10], r1
 2190 0019 05 00 00 00             		bsr	_wc_ed25519_import_public_ex
 2191 001d EF 15                   		mov.L	r1, r5
1030:../src/wolfcrypt/src/ed25519.c **** }
 2192                             		.loc 2 1030 1
 2193 001f EF 51                   		mov.L	r5, r1
 2194 0021 3F AA 04                		rtsd	#16, r10-r10
 2195                             	.LFE68:
 2197                             		.section	.text.wc_ed25519_import_private_only,"ax",@progbits
 2198                             		.global	_wc_ed25519_import_private_only
 2200                             	_wc_ed25519_import_private_only:
 2201                             	.LFB69:
1031:../src/wolfcrypt/src/ed25519.c **** 
1032:../src/wolfcrypt/src/ed25519.c **** /*
1033:../src/wolfcrypt/src/ed25519.c ****     For importing a private key.
1034:../src/wolfcrypt/src/ed25519.c ****  */
1035:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_import_private_only(const byte* priv, word32 privSz,
1036:../src/wolfcrypt/src/ed25519.c ****                                                                ed25519_key* key)
1037:../src/wolfcrypt/src/ed25519.c **** {
 2202                             		.loc 2 1037 1
 2203 0000 7E AA                   		push.l	r10
 2204                             	.LCFI71:
 2205 0002 71 0A F0                		add	#-16, r0, r10
 2206                             	.LCFI72:
 2207 0005 EF A0                   		mov.L	r10, r0
 2208 0007 E7 A1 01                		mov.L	r1, 4[r10]
 2209 000a E7 A2 02                		mov.L	r2, 8[r10]
 2210 000d E7 A3 03                		mov.L	r3, 12[r10]
1038:../src/wolfcrypt/src/ed25519.c ****     int ret = 0;
 2211                             		.loc 2 1038 9
 2212 0010 F8 A6 00                		mov.L	#0, [r10]
1039:../src/wolfcrypt/src/ed25519.c **** 
1040:../src/wolfcrypt/src/ed25519.c ****     /* sanity check on arguments */
1041:../src/wolfcrypt/src/ed25519.c ****     if (priv == NULL || key == NULL)
 2213                             		.loc 2 1041 8
 2214 0013 ED A5 01                		mov.L	4[r10], r5
 2215 0016 61 05                   		cmp	#0, r5
 2216 0018 17                      		beq	.L159
 2217                             		.loc 2 1041 22 discriminator 1
 2218 0019 ED A5 03                		mov.L	12[r10], r5
 2219 001c 61 05                   		cmp	#0, r5
 2220 001e 1F                      		bne	.L160
 2221                             	.L159:
1042:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2222                             		.loc 2 1042 16
 2223 001f FB 5A 53 FF             		mov.L	#-173, r5
 2224 0023 2E 64                   		bra	.L161
 2225                             	.L160:
1043:../src/wolfcrypt/src/ed25519.c **** 
1044:../src/wolfcrypt/src/ed25519.c ****     /* key size check */
1045:../src/wolfcrypt/src/ed25519.c ****     if (privSz != ED25519_KEY_SIZE)
 2226                             		.loc 2 1045 8
 2227 0025 ED A5 02                		mov.L	8[r10], r5
 2228 0028 75 55 20                		cmp	#32, r5
 2229 002b 17                      		beq	.L162
1046:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2230                             		.loc 2 1046 16
 2231 002c FB 5A 53 FF             		mov.L	#-173, r5
 2232 0030 2E 57                   		bra	.L161
 2233                             	.L162:
1047:../src/wolfcrypt/src/ed25519.c **** 
1048:../src/wolfcrypt/src/ed25519.c ****     XMEMCPY(key->k, priv, ED25519_KEY_SIZE);
 2234                             		.loc 2 1048 5
 2235 0032 ED A5 03                		mov.L	12[r10], r5
 2236 0035 71 55 20                		add	#32, r5
 2237 0038 75 43 20                		mov.L	#32, r3
 2238 003b ED A2 01                		mov.L	4[r10], r2
 2239 003e EF 51                   		mov.L	r5, r1
 2240 0040 05 00 00 00             		bsr	_memcpy
1049:../src/wolfcrypt/src/ed25519.c ****     key->privKeySet = 1;
 2241                             		.loc 2 1049 21
 2242 0044 ED A4 03                		mov.L	12[r10], r4
 2243 0047 CD 45 60                		mov.B	96[r4], r5
 2244 004a 78 05                   		bset	#0, r5
 2245 004c C7 45 60                		mov.B	r5, 96[r4]
1050:../src/wolfcrypt/src/ed25519.c **** 
1051:../src/wolfcrypt/src/ed25519.c ****     if (key->pubKeySet) {
 2246                             		.loc 2 1051 9
 2247 004f ED A5 03                		mov.L	12[r10], r5
 2248 0052 CD 55 60                		mov.B	96[r5], r5
 2249 0055 64 25                   		and	#2, r5
 2250                             		.loc 2 1051 8
 2251 0057 5B 55                   		movu.B	r5, r5
 2252 0059 61 05                   		cmp	#0, r5
 2253 005b 12                      		beq	.L163
1052:../src/wolfcrypt/src/ed25519.c ****         /* Validate loaded public key */
1053:../src/wolfcrypt/src/ed25519.c ****         ret = wc_ed25519_check_key(key);
 2254                             		.loc 2 1053 15
 2255 005c ED A1 03                		mov.L	12[r10], r1
 2256 005f 05 00 00 00             		bsr	_wc_ed25519_check_key
 2257 0063 E3 A1                   		mov.L	r1, [r10]
 2258                             	.L163:
1054:../src/wolfcrypt/src/ed25519.c ****     }
1055:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0) {
 2259                             		.loc 2 1055 8
 2260 0065 EC A5                   		mov.L	[r10], r5
 2261 0067 61 05                   		cmp	#0, r5
 2262 0069 20 1C                   		beq	.L164
1056:../src/wolfcrypt/src/ed25519.c ****         key->privKeySet = 0;
 2263                             		.loc 2 1056 25
 2264 006b ED A4 03                		mov.L	12[r10], r4
 2265 006e CD 45 60                		mov.B	96[r4], r5
 2266 0071 7A 05                   		bclr	#0, r5
 2267 0073 C7 45 60                		mov.B	r5, 96[r4]
1057:../src/wolfcrypt/src/ed25519.c ****         ForceZero(key->k, ED25519_KEY_SIZE);
 2268                             		.loc 2 1057 22
 2269 0076 ED A5 03                		mov.L	12[r10], r5
 2270 0079 71 55 20                		add	#32, r5
 2271                             		.loc 2 1057 9
 2272 007c 75 42 20                		mov.L	#32, r2
 2273 007f EF 51                   		mov.L	r5, r1
 2274 0081 05 00 00 00             		bsr	_ForceZero
 2275                             	.L164:
1058:../src/wolfcrypt/src/ed25519.c ****     }
1059:../src/wolfcrypt/src/ed25519.c **** 
1060:../src/wolfcrypt/src/ed25519.c ****     return ret;
 2276                             		.loc 2 1060 12
 2277 0085 EC A5                   		mov.L	[r10], r5
 2278                             	.L161:
1061:../src/wolfcrypt/src/ed25519.c **** }
 2279                             		.loc 2 1061 1
 2280 0087 EF 51                   		mov.L	r5, r1
 2281 0089 3F AA 05                		rtsd	#20, r10-r10
 2282                             	.LFE69:
 2284                             		.section	.text.wc_ed25519_import_private_key_ex,"ax",@progbits
 2285                             		.global	_wc_ed25519_import_private_key_ex
 2287                             	_wc_ed25519_import_private_key_ex:
 2288                             	.LFB70:
1062:../src/wolfcrypt/src/ed25519.c **** 
1063:../src/wolfcrypt/src/ed25519.c **** 
1064:../src/wolfcrypt/src/ed25519.c **** /* Import an ed25519 private and public keys from byte array(s).
1065:../src/wolfcrypt/src/ed25519.c ****  *
1066:../src/wolfcrypt/src/ed25519.c ****  * priv     [in]  Array holding private key from
1067:../src/wolfcrypt/src/ed25519.c ****  *                wc_ed25519_export_private_only(), or private+public keys from
1068:../src/wolfcrypt/src/ed25519.c ****  *                wc_ed25519_export_private().
1069:../src/wolfcrypt/src/ed25519.c ****  * privSz   [in]  Number of bytes of data in private key array.
1070:../src/wolfcrypt/src/ed25519.c ****  * pub      [in]  Array holding public key (or NULL).
1071:../src/wolfcrypt/src/ed25519.c ****  * pubSz    [in]  Number of bytes of data in public key array (or 0).
1072:../src/wolfcrypt/src/ed25519.c ****  * key      [in]  Ed25519 private/public key.
1073:../src/wolfcrypt/src/ed25519.c ****  * trusted  [in]  Indicates whether the public key data is trusted.
1074:../src/wolfcrypt/src/ed25519.c ****  *                When 0, checks public key matches private key.
1075:../src/wolfcrypt/src/ed25519.c ****  *                When 1, doesn't check public key matches private key.
1076:../src/wolfcrypt/src/ed25519.c ****  * returns BAD_FUNC_ARG when a required parameter is NULL or an invalid
1077:../src/wolfcrypt/src/ed25519.c ****  *         combination of keys/lengths is supplied, 0 otherwise.
1078:../src/wolfcrypt/src/ed25519.c ****  */
1079:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_import_private_key_ex(const byte* priv, word32 privSz,
1080:../src/wolfcrypt/src/ed25519.c ****     const byte* pub, word32 pubSz, ed25519_key* key, int trusted)
1081:../src/wolfcrypt/src/ed25519.c **** {
 2289                             		.loc 2 1081 1
 2290 0000 7E AA                   		push.l	r10
 2291                             	.LCFI73:
 2292 0002 7E A6                   		push.l	r6
 2293                             	.LCFI74:
 2294 0004 71 0A E4                		add	#-28, r0, r10
 2295                             	.LCFI75:
 2296 0007 EF A0                   		mov.L	r10, r0
 2297 0009 75 46 28                		mov.L	#40, r6
 2298 000c 4B A6                   		add	r10, r6
 2299 000e E7 A1 01                		mov.L	r1, 4[r10]
 2300 0011 E7 A2 02                		mov.L	r2, 8[r10]
 2301 0014 E7 A3 03                		mov.L	r3, 12[r10]
 2302 0017 E7 A4 04                		mov.L	r4, 16[r10]
1082:../src/wolfcrypt/src/ed25519.c ****     int ret;
1083:../src/wolfcrypt/src/ed25519.c **** 
1084:../src/wolfcrypt/src/ed25519.c ****     /* sanity check on arguments */
1085:../src/wolfcrypt/src/ed25519.c ****     if (priv == NULL || key == NULL)
 2303                             		.loc 2 1085 8
 2304 001a ED A5 01                		mov.L	4[r10], r5
 2305 001d 61 05                   		cmp	#0, r5
 2306 001f 16                      		beq	.L166
 2307                             		.loc 2 1085 22 discriminator 1
 2308 0020 EC 65                   		mov.L	[r6], r5
 2309 0022 61 05                   		cmp	#0, r5
 2310 0024 18                      		bne	.L167
 2311                             	.L166:
1086:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2312                             		.loc 2 1086 16
 2313 0025 FB 5A 53 FF             		mov.L	#-173, r5
 2314 0029 38 BC 00                		bra	.L168
 2315                             	.L167:
1087:../src/wolfcrypt/src/ed25519.c **** 
1088:../src/wolfcrypt/src/ed25519.c ****     /* key size check */
1089:../src/wolfcrypt/src/ed25519.c ****     if (privSz != ED25519_KEY_SIZE && privSz != ED25519_PRV_KEY_SIZE)
 2316                             		.loc 2 1089 8
 2317 002c ED A5 02                		mov.L	8[r10], r5
 2318 002f 75 55 20                		cmp	#32, r5
 2319 0032 20 10                   		beq	.L169
 2320                             		.loc 2 1089 36 discriminator 1
 2321 0034 ED A5 02                		mov.L	8[r10], r5
 2322 0037 75 55 40                		cmp	#0x40, r5
 2323 003a 10                      		beq	.L169
1090:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2324                             		.loc 2 1090 16
 2325 003b FB 5A 53 FF             		mov.L	#-173, r5
 2326 003f 38 A6 00                		bra	.L168
 2327                             	.L169:
1091:../src/wolfcrypt/src/ed25519.c **** 
1092:../src/wolfcrypt/src/ed25519.c ****     if (pub == NULL) {
 2328                             		.loc 2 1092 8
 2329 0042 ED A5 03                		mov.L	12[r10], r5
 2330 0045 61 05                   		cmp	#0, r5
 2331 0047 21 2C                   		bne	.L170
1093:../src/wolfcrypt/src/ed25519.c ****         if (pubSz != 0)
 2332                             		.loc 2 1093 12
 2333 0049 ED A5 04                		mov.L	16[r10], r5
 2334 004c 61 05                   		cmp	#0, r5
 2335 004e 10                      		beq	.L171
1094:../src/wolfcrypt/src/ed25519.c ****             return BAD_FUNC_ARG;
 2336                             		.loc 2 1094 20
 2337 004f FB 5A 53 FF             		mov.L	#-173, r5
 2338 0053 38 92 00                		bra	.L168
 2339                             	.L171:
1095:../src/wolfcrypt/src/ed25519.c ****         if (privSz != ED25519_PRV_KEY_SIZE)
 2340                             		.loc 2 1095 12
 2341 0056 ED A5 02                		mov.L	8[r10], r5
 2342 0059 75 55 40                		cmp	#0x40, r5
 2343 005c 10                      		beq	.L172
1096:../src/wolfcrypt/src/ed25519.c ****             return BAD_FUNC_ARG;
 2344                             		.loc 2 1096 20
 2345 005d FB 5A 53 FF             		mov.L	#-173, r5
 2346 0061 38 84 00                		bra	.L168
 2347                             	.L172:
1097:../src/wolfcrypt/src/ed25519.c ****         pub = priv + ED25519_KEY_SIZE;
 2348                             		.loc 2 1097 13
 2349 0064 ED A5 01                		mov.L	4[r10], r5
 2350 0067 71 55 20                		add	#32, r5
 2351 006a E7 A5 03                		mov.L	r5, 12[r10]
1098:../src/wolfcrypt/src/ed25519.c ****         pubSz = ED25519_PUB_KEY_SIZE;
 2352                             		.loc 2 1098 15
 2353 006d F9 A6 04 20             		mov.L	#32, 16[r10]
 2354 0071 2E 10                   		bra	.L173
 2355                             	.L170:
1099:../src/wolfcrypt/src/ed25519.c ****     }
1100:../src/wolfcrypt/src/ed25519.c ****     else if (pubSz < ED25519_PUB_KEY_SIZE) {
 2356                             		.loc 2 1100 13
 2357 0073 ED A5 04                		mov.L	16[r10], r5
 2358 0076 75 55 1F                		cmp	#31, r5
 2359 0079 24 08                   		bgtu	.L173
1101:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2360                             		.loc 2 1101 16
 2361 007b FB 5A 53 FF             		mov.L	#-173, r5
 2362 007f 2E 66                   		bra	.L168
 2363                             	.L173:
1102:../src/wolfcrypt/src/ed25519.c ****     }
1103:../src/wolfcrypt/src/ed25519.c **** 
1104:../src/wolfcrypt/src/ed25519.c ****     XMEMCPY(key->k, priv, ED25519_KEY_SIZE);
 2364                             		.loc 2 1104 5
 2365 0081 EC 65                   		mov.L	[r6], r5
 2366 0083 71 55 20                		add	#32, r5
 2367 0086 75 43 20                		mov.L	#32, r3
 2368 0089 ED A2 01                		mov.L	4[r10], r2
 2369 008c EF 51                   		mov.L	r5, r1
 2370 008e 05 00 00 00             		bsr	_memcpy
1105:../src/wolfcrypt/src/ed25519.c ****     key->privKeySet = 1;
 2371                             		.loc 2 1105 21
 2372 0092 EC 64                   		mov.L	[r6], r4
 2373 0094 CD 45 60                		mov.B	96[r4], r5
 2374 0097 78 05                   		bset	#0, r5
 2375 0099 C7 45 60                		mov.B	r5, 96[r4]
1106:../src/wolfcrypt/src/ed25519.c **** 
1107:../src/wolfcrypt/src/ed25519.c ****     /* import public key */
1108:../src/wolfcrypt/src/ed25519.c ****     ret = wc_ed25519_import_public_ex(pub, pubSz, key, trusted);
 2376                             		.loc 2 1108 11
 2377 009c A8 6C                   		mov.L	4[r6], r4
 2378 009e EC 63                   		mov.L	[r6], r3
 2379 00a0 ED A2 04                		mov.L	16[r10], r2
 2380 00a3 ED A1 03                		mov.L	12[r10], r1
 2381 00a6 05 00 00 00             		bsr	_wc_ed25519_import_public_ex
 2382 00aa E3 A1                   		mov.L	r1, [r10]
1109:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0) {
 2383                             		.loc 2 1109 8
 2384 00ac EC A5                   		mov.L	[r10], r5
 2385 00ae 61 05                   		cmp	#0, r5
 2386 00b0 20 1E                   		beq	.L174
1110:../src/wolfcrypt/src/ed25519.c ****         key->privKeySet = 0;
 2387                             		.loc 2 1110 25
 2388 00b2 EC 64                   		mov.L	[r6], r4
 2389 00b4 CD 45 60                		mov.B	96[r4], r5
 2390 00b7 7A 05                   		bclr	#0, r5
 2391 00b9 C7 45 60                		mov.B	r5, 96[r4]
1111:../src/wolfcrypt/src/ed25519.c ****         ForceZero(key->k, ED25519_KEY_SIZE);
 2392                             		.loc 2 1111 22
 2393 00bc EC 65                   		mov.L	[r6], r5
 2394 00be 71 55 20                		add	#32, r5
 2395                             		.loc 2 1111 9
 2396 00c1 75 42 20                		mov.L	#32, r2
 2397 00c4 EF 51                   		mov.L	r5, r1
 2398 00c6 05 00 00 00             		bsr	_ForceZero
1112:../src/wolfcrypt/src/ed25519.c ****         return ret;
 2399                             		.loc 2 1112 16
 2400 00ca EC A5                   		mov.L	[r10], r5
 2401 00cc 2E 19                   		bra	.L168
 2402                             	.L174:
1113:../src/wolfcrypt/src/ed25519.c ****     }
1114:../src/wolfcrypt/src/ed25519.c **** 
1115:../src/wolfcrypt/src/ed25519.c ****     /* make the private key (priv + pub) */
1116:../src/wolfcrypt/src/ed25519.c ****     XMEMCPY(key->k + ED25519_KEY_SIZE, key->p, ED25519_PUB_KEY_SIZE);
 2403                             		.loc 2 1116 5
 2404 00ce EC 65                   		mov.L	[r6], r5
 2405 00d0 71 55 20                		add	#32, r5
 2406 00d3 71 55 20                		add	#32, r5
 2407 00d6 EC 64                   		mov.L	[r6], r4
 2408 00d8 75 43 20                		mov.L	#32, r3
 2409 00db EF 42                   		mov.L	r4, r2
 2410 00dd EF 51                   		mov.L	r5, r1
 2411 00df 05 00 00 00             		bsr	_memcpy
1117:../src/wolfcrypt/src/ed25519.c **** 
1118:../src/wolfcrypt/src/ed25519.c ****     return ret;
 2412                             		.loc 2 1118 12
 2413 00e3 EC A5                   		mov.L	[r10], r5
 2414                             		.balign 8,3,1
 2415                             	.L168:
1119:../src/wolfcrypt/src/ed25519.c **** }
 2416                             		.loc 2 1119 1
 2417 00e5 EF 51                   		mov.L	r5, r1
 2418 00e7 71 00 1C                		add	#28, r0
 2419 00ea 7E B6                   		pop	r6
 2420 00ec 7E BA                   		pop	r10
 2421 00ee 02                      		rts
 2422                             	.LFE70:
 2424 00ef 03                      		.section	.text.wc_ed25519_import_private_key,"ax",@progbits
 2425                             		.global	_wc_ed25519_import_private_key
 2427                             	_wc_ed25519_import_private_key:
 2428                             	.LFB71:
1120:../src/wolfcrypt/src/ed25519.c **** 
1121:../src/wolfcrypt/src/ed25519.c **** /* Import an ed25519 private and public keys from byte array(s).
1122:../src/wolfcrypt/src/ed25519.c ****  *
1123:../src/wolfcrypt/src/ed25519.c ****  * priv    [in]  Array holding private key from wc_ed25519_export_private_only(),
1124:../src/wolfcrypt/src/ed25519.c ****  *               or private+public keys from wc_ed25519_export_private().
1125:../src/wolfcrypt/src/ed25519.c ****  * privSz  [in]  Number of bytes of data in private key array.
1126:../src/wolfcrypt/src/ed25519.c ****  * pub     [in]  Array holding public key (or NULL).
1127:../src/wolfcrypt/src/ed25519.c ****  * pubSz   [in]  Number of bytes of data in public key array (or 0).
1128:../src/wolfcrypt/src/ed25519.c ****  * key     [in]  Ed25519 private/public key.
1129:../src/wolfcrypt/src/ed25519.c ****  * returns BAD_FUNC_ARG when a required parameter is NULL or an invalid
1130:../src/wolfcrypt/src/ed25519.c ****  *         combination of keys/lengths is supplied, 0 otherwise.
1131:../src/wolfcrypt/src/ed25519.c ****  */
1132:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_import_private_key(const byte* priv, word32 privSz,
1133:../src/wolfcrypt/src/ed25519.c ****     const byte* pub, word32 pubSz, ed25519_key* key)
1134:../src/wolfcrypt/src/ed25519.c **** {
 2429                             		.loc 2 1134 1
 2430 0000 7E AA                   		push.l	r10
 2431                             	.LCFI76:
 2432 0002 71 0A EC                		add	#-20, r0, r10
 2433                             	.LCFI77:
 2434 0005 71 A0 F8                		add	#-8, r10, r0
 2435                             	.LCFI78:
 2436 0008 75 45 1C                		mov.L	#28, r5
 2437 000b 4B A5                   		add	r10, r5
 2438 000d E3 A1                   		mov.L	r1, [r10]
 2439 000f E7 A2 01                		mov.L	r2, 4[r10]
 2440 0012 E7 A3 02                		mov.L	r3, 8[r10]
 2441 0015 E7 A4 03                		mov.L	r4, 12[r10]
1135:../src/wolfcrypt/src/ed25519.c ****     return wc_ed25519_import_private_key_ex(priv, privSz, pub, pubSz, key, 0);
 2442                             		.loc 2 1135 12
 2443 0018 3E 01 00                		mov.L	#0, 4[r0]
 2444 001b EC 55                   		mov.L	[r5], r5
 2445 001d E3 05                   		mov.L	r5, [r0]
 2446 001f ED A4 03                		mov.L	12[r10], r4
 2447 0022 ED A3 02                		mov.L	8[r10], r3
 2448 0025 ED A2 01                		mov.L	4[r10], r2
 2449 0028 EC A1                   		mov.L	[r10], r1
 2450 002a 05 00 00 00             		bsr	_wc_ed25519_import_private_key_ex
 2451 002e EF 15                   		mov.L	r1, r5
1136:../src/wolfcrypt/src/ed25519.c **** }
 2452                             		.loc 2 1136 1
 2453 0030 EF 51                   		mov.L	r5, r1
 2454 0032 3F AA 08                		rtsd	#32, r10-r10
 2455                             	.LFE71:
 2457                             		.section	.text.wc_ed25519_export_private_only,"ax",@progbits
 2458                             		.global	_wc_ed25519_export_private_only
 2460                             	_wc_ed25519_export_private_only:
 2461                             	.LFB72:
1137:../src/wolfcrypt/src/ed25519.c **** #endif /* HAVE_ED25519_KEY_IMPORT */
1138:../src/wolfcrypt/src/ed25519.c **** 
1139:../src/wolfcrypt/src/ed25519.c **** 
1140:../src/wolfcrypt/src/ed25519.c **** #ifdef HAVE_ED25519_KEY_EXPORT
1141:../src/wolfcrypt/src/ed25519.c **** 
1142:../src/wolfcrypt/src/ed25519.c **** /*
1143:../src/wolfcrypt/src/ed25519.c ****  export private key only (secret part so 32 bytes)
1144:../src/wolfcrypt/src/ed25519.c ****  outLen should contain the size of out buffer when input. outLen is than set
1145:../src/wolfcrypt/src/ed25519.c ****  to the final output length.
1146:../src/wolfcrypt/src/ed25519.c ****  returns 0 on success
1147:../src/wolfcrypt/src/ed25519.c ****  */
1148:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_export_private_only(ed25519_key* key, byte* out, word32* outLen)
1149:../src/wolfcrypt/src/ed25519.c **** {
 2462                             		.loc 2 1149 1
 2463 0000 7E AA                   		push.l	r10
 2464                             	.LCFI79:
 2465 0002 71 0A F4                		add	#-12, r0, r10
 2466                             	.LCFI80:
 2467 0005 EF A0                   		mov.L	r10, r0
 2468 0007 E3 A1                   		mov.L	r1, [r10]
 2469 0009 E7 A2 01                		mov.L	r2, 4[r10]
 2470 000c E7 A3 02                		mov.L	r3, 8[r10]
1150:../src/wolfcrypt/src/ed25519.c ****     /* sanity checks on arguments */
1151:../src/wolfcrypt/src/ed25519.c ****     if (key == NULL || out == NULL || outLen == NULL)
 2471                             		.loc 2 1151 8
 2472 000f EC A5                   		mov.L	[r10], r5
 2473 0011 61 05                   		cmp	#0, r5
 2474 0013 20 0E                   		beq	.L178
 2475                             		.loc 2 1151 21 discriminator 1
 2476 0015 ED A5 01                		mov.L	4[r10], r5
 2477 0018 61 05                   		cmp	#0, r5
 2478 001a 17                      		beq	.L178
 2479                             		.loc 2 1151 36 discriminator 2
 2480 001b ED A5 02                		mov.L	8[r10], r5
 2481 001e 61 05                   		cmp	#0, r5
 2482 0020 1F                      		bne	.L179
 2483                             	.L178:
1152:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2484                             		.loc 2 1152 16
 2485 0021 FB 5A 53 FF             		mov.L	#-173, r5
 2486 0025 2E 31                   		bra	.L180
 2487                             	.L179:
1153:../src/wolfcrypt/src/ed25519.c **** 
1154:../src/wolfcrypt/src/ed25519.c ****     if (*outLen < ED25519_KEY_SIZE) {
 2488                             		.loc 2 1154 9
 2489 0027 ED A5 02                		mov.L	8[r10], r5
 2490 002a EC 55                   		mov.L	[r5], r5
 2491                             		.loc 2 1154 8
 2492 002c 75 55 1F                		cmp	#31, r5
 2493 002f 24 0E                   		bgtu	.L181
1155:../src/wolfcrypt/src/ed25519.c ****         *outLen = ED25519_KEY_SIZE;
 2494                             		.loc 2 1155 17
 2495 0031 ED A5 02                		mov.L	8[r10], r5
 2496 0034 F8 56 20                		mov.L	#32, [r5]
1156:../src/wolfcrypt/src/ed25519.c ****         return BUFFER_E;
 2497                             		.loc 2 1156 16
 2498 0037 FB 5A 7C FF             		mov.L	#-132, r5
 2499 003b 2E 1B                   		bra	.L180
 2500                             	.L181:
1157:../src/wolfcrypt/src/ed25519.c ****     }
1158:../src/wolfcrypt/src/ed25519.c **** 
1159:../src/wolfcrypt/src/ed25519.c ****     *outLen = ED25519_KEY_SIZE;
 2501                             		.loc 2 1159 13
 2502 003d ED A5 02                		mov.L	8[r10], r5
 2503 0040 F8 56 20                		mov.L	#32, [r5]
1160:../src/wolfcrypt/src/ed25519.c ****     XMEMCPY(out, key->k, ED25519_KEY_SIZE);
 2504                             		.loc 2 1160 5
 2505 0043 EC A5                   		mov.L	[r10], r5
 2506 0045 71 55 20                		add	#32, r5
 2507 0048 75 43 20                		mov.L	#32, r3
 2508 004b EF 52                   		mov.L	r5, r2
 2509 004d ED A1 01                		mov.L	4[r10], r1
 2510 0050 05 00 00 00             		bsr	_memcpy
1161:../src/wolfcrypt/src/ed25519.c **** 
1162:../src/wolfcrypt/src/ed25519.c ****     return 0;
 2511                             		.loc 2 1162 12
 2512 0054 66 05                   		mov.L	#0, r5
 2513                             	.L180:
1163:../src/wolfcrypt/src/ed25519.c **** }
 2514                             		.loc 2 1163 1
 2515 0056 EF 51                   		mov.L	r5, r1
 2516 0058 3F AA 04                		rtsd	#16, r10-r10
 2517                             	.LFE72:
 2519                             		.section	.text.wc_ed25519_export_private,"ax",@progbits
 2520                             		.global	_wc_ed25519_export_private
 2522                             	_wc_ed25519_export_private:
 2523                             	.LFB73:
1164:../src/wolfcrypt/src/ed25519.c **** 
1165:../src/wolfcrypt/src/ed25519.c **** /*
1166:../src/wolfcrypt/src/ed25519.c ****  export private key, including public part
1167:../src/wolfcrypt/src/ed25519.c ****  outLen should contain the size of out buffer when input. outLen is than set
1168:../src/wolfcrypt/src/ed25519.c ****  to the final output length.
1169:../src/wolfcrypt/src/ed25519.c ****  returns 0 on success
1170:../src/wolfcrypt/src/ed25519.c ****  */
1171:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_export_private(ed25519_key* key, byte* out, word32* outLen)
1172:../src/wolfcrypt/src/ed25519.c **** {
 2524                             		.loc 2 1172 1
 2525 0000 7E AA                   		push.l	r10
 2526                             	.LCFI81:
 2527 0002 71 0A F4                		add	#-12, r0, r10
 2528                             	.LCFI82:
 2529 0005 EF A0                   		mov.L	r10, r0
 2530 0007 E3 A1                   		mov.L	r1, [r10]
 2531 0009 E7 A2 01                		mov.L	r2, 4[r10]
 2532 000c E7 A3 02                		mov.L	r3, 8[r10]
1173:../src/wolfcrypt/src/ed25519.c ****     /* sanity checks on arguments */
1174:../src/wolfcrypt/src/ed25519.c ****     if (key == NULL || out == NULL || outLen == NULL)
 2533                             		.loc 2 1174 8
 2534 000f EC A5                   		mov.L	[r10], r5
 2535 0011 61 05                   		cmp	#0, r5
 2536 0013 20 0E                   		beq	.L183
 2537                             		.loc 2 1174 21 discriminator 1
 2538 0015 ED A5 01                		mov.L	4[r10], r5
 2539 0018 61 05                   		cmp	#0, r5
 2540 001a 17                      		beq	.L183
 2541                             		.loc 2 1174 36 discriminator 2
 2542 001b ED A5 02                		mov.L	8[r10], r5
 2543 001e 61 05                   		cmp	#0, r5
 2544 0020 1F                      		bne	.L184
 2545                             	.L183:
1175:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2546                             		.loc 2 1175 16
 2547 0021 FB 5A 53 FF             		mov.L	#-173, r5
 2548 0025 2E 31                   		bra	.L185
 2549                             	.L184:
1176:../src/wolfcrypt/src/ed25519.c **** 
1177:../src/wolfcrypt/src/ed25519.c ****     if (*outLen < ED25519_PRV_KEY_SIZE) {
 2550                             		.loc 2 1177 9
 2551 0027 ED A5 02                		mov.L	8[r10], r5
 2552 002a EC 55                   		mov.L	[r5], r5
 2553                             		.loc 2 1177 8
 2554 002c 75 55 3F                		cmp	#63, r5
 2555 002f 24 0E                   		bgtu	.L186
1178:../src/wolfcrypt/src/ed25519.c ****         *outLen = ED25519_PRV_KEY_SIZE;
 2556                             		.loc 2 1178 17
 2557 0031 ED A5 02                		mov.L	8[r10], r5
 2558 0034 F8 56 40                		mov.L	#0x40, [r5]
1179:../src/wolfcrypt/src/ed25519.c ****         return BUFFER_E;
 2559                             		.loc 2 1179 16
 2560 0037 FB 5A 7C FF             		mov.L	#-132, r5
 2561 003b 2E 1B                   		bra	.L185
 2562                             	.L186:
1180:../src/wolfcrypt/src/ed25519.c ****     }
1181:../src/wolfcrypt/src/ed25519.c **** 
1182:../src/wolfcrypt/src/ed25519.c ****     *outLen = ED25519_PRV_KEY_SIZE;
 2563                             		.loc 2 1182 13
 2564 003d ED A5 02                		mov.L	8[r10], r5
 2565 0040 F8 56 40                		mov.L	#0x40, [r5]
1183:../src/wolfcrypt/src/ed25519.c ****     XMEMCPY(out, key->k, ED25519_PRV_KEY_SIZE);
 2566                             		.loc 2 1183 5
 2567 0043 EC A5                   		mov.L	[r10], r5
 2568 0045 71 55 20                		add	#32, r5
 2569 0048 75 43 40                		mov.L	#0x40, r3
 2570 004b EF 52                   		mov.L	r5, r2
 2571 004d ED A1 01                		mov.L	4[r10], r1
 2572 0050 05 00 00 00             		bsr	_memcpy
1184:../src/wolfcrypt/src/ed25519.c **** 
1185:../src/wolfcrypt/src/ed25519.c ****     return 0;
 2573                             		.loc 2 1185 12
 2574 0054 66 05                   		mov.L	#0, r5
 2575                             	.L185:
1186:../src/wolfcrypt/src/ed25519.c **** }
 2576                             		.loc 2 1186 1
 2577 0056 EF 51                   		mov.L	r5, r1
 2578 0058 3F AA 04                		rtsd	#16, r10-r10
 2579                             	.LFE73:
 2581                             		.section	.text.wc_ed25519_export_key,"ax",@progbits
 2582                             		.global	_wc_ed25519_export_key
 2584                             	_wc_ed25519_export_key:
 2585                             	.LFB74:
1187:../src/wolfcrypt/src/ed25519.c **** 
1188:../src/wolfcrypt/src/ed25519.c **** /* export full private key and public key
1189:../src/wolfcrypt/src/ed25519.c ****    return 0 on success
1190:../src/wolfcrypt/src/ed25519.c ****  */
1191:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_export_key(ed25519_key* key,
1192:../src/wolfcrypt/src/ed25519.c ****                           byte* priv, word32 *privSz,
1193:../src/wolfcrypt/src/ed25519.c ****                           byte* pub, word32 *pubSz)
1194:../src/wolfcrypt/src/ed25519.c **** {
 2586                             		.loc 2 1194 1
 2587 0000 7E AA                   		push.l	r10
 2588                             	.LCFI83:
 2589 0002 7E A6                   		push.l	r6
 2590                             	.LCFI84:
 2591 0004 71 0A E8                		add	#-24, r0, r10
 2592                             	.LCFI85:
 2593 0007 EF A0                   		mov.L	r10, r0
 2594 0009 75 46 24                		mov.L	#36, r6
 2595 000c 4B A6                   		add	r10, r6
 2596 000e E7 A1 01                		mov.L	r1, 4[r10]
 2597 0011 E7 A2 02                		mov.L	r2, 8[r10]
 2598 0014 E7 A3 03                		mov.L	r3, 12[r10]
 2599 0017 E7 A4 04                		mov.L	r4, 16[r10]
1195:../src/wolfcrypt/src/ed25519.c ****     int ret;
1196:../src/wolfcrypt/src/ed25519.c **** 
1197:../src/wolfcrypt/src/ed25519.c ****     /* export 'full' private part */
1198:../src/wolfcrypt/src/ed25519.c ****     ret = wc_ed25519_export_private(key, priv, privSz);
 2600                             		.loc 2 1198 11
 2601 001a ED A3 03                		mov.L	12[r10], r3
 2602 001d ED A2 02                		mov.L	8[r10], r2
 2603 0020 ED A1 01                		mov.L	4[r10], r1
 2604 0023 05 00 00 00             		bsr	_wc_ed25519_export_private
 2605 0027 E3 A1                   		mov.L	r1, [r10]
1199:../src/wolfcrypt/src/ed25519.c ****     if (ret != 0)
 2606                             		.loc 2 1199 8
 2607 0029 EC A5                   		mov.L	[r10], r5
 2608 002b 61 05                   		cmp	#0, r5
 2609 002d 15                      		beq	.L188
1200:../src/wolfcrypt/src/ed25519.c ****         return ret;
 2610                             		.loc 2 1200 16
 2611 002e EC A5                   		mov.L	[r10], r5
 2612 0030 2E 12                   		bra	.L189
 2613                             	.L188:
1201:../src/wolfcrypt/src/ed25519.c **** 
1202:../src/wolfcrypt/src/ed25519.c ****     /* export public part */
1203:../src/wolfcrypt/src/ed25519.c ****     ret = wc_ed25519_export_public(key, pub, pubSz);
 2614                             		.loc 2 1203 11
 2615 0032 EC 63                   		mov.L	[r6], r3
 2616 0034 ED A2 04                		mov.L	16[r10], r2
 2617 0037 ED A1 01                		mov.L	4[r10], r1
 2618 003a 05 00 00 00             		bsr	_wc_ed25519_export_public
 2619 003e E3 A1                   		mov.L	r1, [r10]
1204:../src/wolfcrypt/src/ed25519.c **** 
1205:../src/wolfcrypt/src/ed25519.c ****     return ret;
 2620                             		.loc 2 1205 12
 2621 0040 EC A5                   		mov.L	[r10], r5
 2622                             	.L189:
1206:../src/wolfcrypt/src/ed25519.c **** }
 2623                             		.loc 2 1206 1
 2624 0042 EF 51                   		mov.L	r5, r1
 2625 0044 71 00 18                		add	#24, r0
 2626 0047 7E B6                   		pop	r6
 2627 0049 7E BA                   		pop	r10
 2628 004b 02                      		rts
 2629                             	.LFE74:
 2631                             		.section	.text.wc_ed25519_check_key,"ax",@progbits
 2632                             		.global	_wc_ed25519_check_key
 2634                             	_wc_ed25519_check_key:
 2635                             	.LFB75:
1207:../src/wolfcrypt/src/ed25519.c **** 
1208:../src/wolfcrypt/src/ed25519.c **** #endif /* HAVE_ED25519_KEY_EXPORT */
1209:../src/wolfcrypt/src/ed25519.c **** 
1210:../src/wolfcrypt/src/ed25519.c **** /* check the private and public keys match */
1211:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_check_key(ed25519_key* key)
1212:../src/wolfcrypt/src/ed25519.c **** {
 2636                             		.loc 2 1212 1
 2637 0000 7E AA                   		push.l	r10
 2638                             	.LCFI86:
 2639 0002 71 0A D8                		add	#-40, r0, r10
 2640                             	.LCFI87:
 2641 0005 EF A0                   		mov.L	r10, r0
 2642 0007 E7 A1 09                		mov.L	r1, 36[r10]
1213:../src/wolfcrypt/src/ed25519.c ****     int ret = 0;
 2643                             		.loc 2 1213 9
 2644 000a F8 A6 00                		mov.L	#0, [r10]
1214:../src/wolfcrypt/src/ed25519.c ****     unsigned char pubKey[ED25519_PUB_KEY_SIZE];
1215:../src/wolfcrypt/src/ed25519.c **** 
1216:../src/wolfcrypt/src/ed25519.c ****     if (!key->pubKeySet)
 2645                             		.loc 2 1216 9
 2646 000d ED A5 09                		mov.L	36[r10], r5
 2647 0010 CD 55 60                		mov.B	96[r5], r5
 2648 0013 64 25                   		and	#2, r5
 2649                             		.loc 2 1216 8
 2650 0015 5B 55                   		movu.B	r5, r5
 2651 0017 61 05                   		cmp	#0, r5
 2652 0019 1D                      		bne	.L191
1217:../src/wolfcrypt/src/ed25519.c ****         ret = PUBLIC_KEY_E;
 2653                             		.loc 2 1217 13
 2654 001a F8 AA 7A FF             		mov.L	#-134, [r10]
 2655                             	.L191:
1218:../src/wolfcrypt/src/ed25519.c ****     if (ret == 0)
 2656                             		.loc 2 1218 8
 2657 001e EC A5                   		mov.L	[r10], r5
 2658 0020 61 05                   		cmp	#0, r5
 2659 0022 21 13                   		bne	.L192
1219:../src/wolfcrypt/src/ed25519.c ****         ret = wc_ed25519_make_public(key, pubKey, sizeof(pubKey));
 2660                             		.loc 2 1219 15
 2661 0024 71 A5 04                		add	#4, r10, r5
 2662 0027 75 43 20                		mov.L	#32, r3
 2663 002a EF 52                   		mov.L	r5, r2
 2664 002c ED A1 09                		mov.L	36[r10], r1
 2665 002f 05 00 00 00             		bsr	_wc_ed25519_make_public
 2666 0033 E3 A1                   		mov.L	r1, [r10]
 2667                             	.L192:
1220:../src/wolfcrypt/src/ed25519.c ****     if (ret == 0 && XMEMCMP(pubKey, key->p, ED25519_PUB_KEY_SIZE) != 0)
 2668                             		.loc 2 1220 8
 2669 0035 EC A5                   		mov.L	[r10], r5
 2670 0037 61 05                   		cmp	#0, r5
 2671 0039 21 1C                   		bne	.L193
 2672                             		.loc 2 1220 21 discriminator 1
 2673 003b ED A4 09                		mov.L	36[r10], r4
 2674 003e 71 A5 04                		add	#4, r10, r5
 2675 0041 75 43 20                		mov.L	#32, r3
 2676 0044 EF 42                   		mov.L	r4, r2
 2677 0046 EF 51                   		mov.L	r5, r1
 2678 0048 05 00 00 00             		bsr	_memcmp
 2679 004c EF 15                   		mov.L	r1, r5
 2680                             		.loc 2 1220 18 discriminator 1
 2681 004e 61 05                   		cmp	#0, r5
 2682 0050 15                      		beq	.L193
1221:../src/wolfcrypt/src/ed25519.c ****         ret = PUBLIC_KEY_E;
 2683                             		.loc 2 1221 13
 2684 0051 F8 AA 7A FF             		mov.L	#-134, [r10]
 2685                             	.L193:
1222:../src/wolfcrypt/src/ed25519.c **** 
1223:../src/wolfcrypt/src/ed25519.c ****     return ret;
 2686                             		.loc 2 1223 12
 2687 0055 EC A5                   		mov.L	[r10], r5
1224:../src/wolfcrypt/src/ed25519.c **** }
 2688                             		.loc 2 1224 1
 2689 0057 EF 51                   		mov.L	r5, r1
 2690 0059 3F AA 0B                		rtsd	#44, r10-r10
 2691                             	.LFE75:
 2693                             		.section	.text.wc_ed25519_size,"ax",@progbits
 2694                             		.global	_wc_ed25519_size
 2696                             	_wc_ed25519_size:
 2697                             	.LFB76:
1225:../src/wolfcrypt/src/ed25519.c **** 
1226:../src/wolfcrypt/src/ed25519.c **** /* returns the private key size (secret only) in bytes */
1227:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_size(ed25519_key* key)
1228:../src/wolfcrypt/src/ed25519.c **** {
 2698                             		.loc 2 1228 1
 2699 0000 7E AA                   		push.l	r10
 2700                             	.LCFI88:
 2701 0002 71 0A FC                		add	#-4, r0, r10
 2702                             	.LCFI89:
 2703 0005 EF A0                   		mov.L	r10, r0
 2704 0007 E3 A1                   		mov.L	r1, [r10]
1229:../src/wolfcrypt/src/ed25519.c ****     if (key == NULL)
 2705                             		.loc 2 1229 8
 2706 0009 EC A5                   		mov.L	[r10], r5
 2707 000b 61 05                   		cmp	#0, r5
 2708 000d 1E                      		bne	.L196
1230:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2709                             		.loc 2 1230 16
 2710 000e FB 5A 53 FF             		mov.L	#-173, r5
 2711 0012 0C                      		bra	.L197
 2712                             	.L196:
1231:../src/wolfcrypt/src/ed25519.c **** 
1232:../src/wolfcrypt/src/ed25519.c ****     return ED25519_KEY_SIZE;
 2713                             		.loc 2 1232 12
 2714 0013 75 45 20                		mov.L	#32, r5
 2715                             	.L197:
1233:../src/wolfcrypt/src/ed25519.c **** }
 2716                             		.loc 2 1233 1
 2717 0016 EF 51                   		mov.L	r5, r1
 2718 0018 3F AA 02                		rtsd	#8, r10-r10
 2719                             	.LFE76:
 2721                             		.section	.text.wc_ed25519_priv_size,"ax",@progbits
 2722                             		.global	_wc_ed25519_priv_size
 2724                             	_wc_ed25519_priv_size:
 2725                             	.LFB77:
1234:../src/wolfcrypt/src/ed25519.c **** 
1235:../src/wolfcrypt/src/ed25519.c **** /* returns the private key size (secret + public) in bytes */
1236:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_priv_size(ed25519_key* key)
1237:../src/wolfcrypt/src/ed25519.c **** {
 2726                             		.loc 2 1237 1
 2727 0000 7E AA                   		push.l	r10
 2728                             	.LCFI90:
 2729 0002 71 0A FC                		add	#-4, r0, r10
 2730                             	.LCFI91:
 2731 0005 EF A0                   		mov.L	r10, r0
 2732 0007 E3 A1                   		mov.L	r1, [r10]
1238:../src/wolfcrypt/src/ed25519.c ****     if (key == NULL)
 2733                             		.loc 2 1238 8
 2734 0009 EC A5                   		mov.L	[r10], r5
 2735 000b 61 05                   		cmp	#0, r5
 2736 000d 1E                      		bne	.L199
1239:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2737                             		.loc 2 1239 16
 2738 000e FB 5A 53 FF             		mov.L	#-173, r5
 2739 0012 0C                      		bra	.L200
 2740                             	.L199:
1240:../src/wolfcrypt/src/ed25519.c **** 
1241:../src/wolfcrypt/src/ed25519.c ****     return ED25519_PRV_KEY_SIZE;
 2741                             		.loc 2 1241 12
 2742 0013 75 45 40                		mov.L	#0x40, r5
 2743                             	.L200:
1242:../src/wolfcrypt/src/ed25519.c **** }
 2744                             		.loc 2 1242 1
 2745 0016 EF 51                   		mov.L	r5, r1
 2746 0018 3F AA 02                		rtsd	#8, r10-r10
 2747                             	.LFE77:
 2749                             		.section	.text.wc_ed25519_pub_size,"ax",@progbits
 2750                             		.global	_wc_ed25519_pub_size
 2752                             	_wc_ed25519_pub_size:
 2753                             	.LFB78:
1243:../src/wolfcrypt/src/ed25519.c **** 
1244:../src/wolfcrypt/src/ed25519.c **** /* returns the compressed key size in bytes (public key) */
1245:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_pub_size(ed25519_key* key)
1246:../src/wolfcrypt/src/ed25519.c **** {
 2754                             		.loc 2 1246 1
 2755 0000 7E AA                   		push.l	r10
 2756                             	.LCFI92:
 2757 0002 71 0A FC                		add	#-4, r0, r10
 2758                             	.LCFI93:
 2759 0005 EF A0                   		mov.L	r10, r0
 2760 0007 E3 A1                   		mov.L	r1, [r10]
1247:../src/wolfcrypt/src/ed25519.c ****     if (key == NULL)
 2761                             		.loc 2 1247 8
 2762 0009 EC A5                   		mov.L	[r10], r5
 2763 000b 61 05                   		cmp	#0, r5
 2764 000d 1E                      		bne	.L202
1248:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2765                             		.loc 2 1248 16
 2766 000e FB 5A 53 FF             		mov.L	#-173, r5
 2767 0012 0C                      		bra	.L203
 2768                             	.L202:
1249:../src/wolfcrypt/src/ed25519.c **** 
1250:../src/wolfcrypt/src/ed25519.c ****     return ED25519_PUB_KEY_SIZE;
 2769                             		.loc 2 1250 12
 2770 0013 75 45 20                		mov.L	#32, r5
 2771                             	.L203:
1251:../src/wolfcrypt/src/ed25519.c **** }
 2772                             		.loc 2 1251 1
 2773 0016 EF 51                   		mov.L	r5, r1
 2774 0018 3F AA 02                		rtsd	#8, r10-r10
 2775                             	.LFE78:
 2777                             		.section	.text.wc_ed25519_sig_size,"ax",@progbits
 2778                             		.global	_wc_ed25519_sig_size
 2780                             	_wc_ed25519_sig_size:
 2781                             	.LFB79:
1252:../src/wolfcrypt/src/ed25519.c **** 
1253:../src/wolfcrypt/src/ed25519.c **** /* returns the size of signature in bytes */
1254:../src/wolfcrypt/src/ed25519.c **** int wc_ed25519_sig_size(ed25519_key* key)
1255:../src/wolfcrypt/src/ed25519.c **** {
 2782                             		.loc 2 1255 1
 2783 0000 7E AA                   		push.l	r10
 2784                             	.LCFI94:
 2785 0002 71 0A FC                		add	#-4, r0, r10
 2786                             	.LCFI95:
 2787 0005 EF A0                   		mov.L	r10, r0
 2788 0007 E3 A1                   		mov.L	r1, [r10]
1256:../src/wolfcrypt/src/ed25519.c ****     if (key == NULL)
 2789                             		.loc 2 1256 8
 2790 0009 EC A5                   		mov.L	[r10], r5
 2791 000b 61 05                   		cmp	#0, r5
 2792 000d 1E                      		bne	.L205
1257:../src/wolfcrypt/src/ed25519.c ****         return BAD_FUNC_ARG;
 2793                             		.loc 2 1257 16
 2794 000e FB 5A 53 FF             		mov.L	#-173, r5
 2795 0012 0C                      		bra	.L206
 2796                             	.L205:
1258:../src/wolfcrypt/src/ed25519.c **** 
1259:../src/wolfcrypt/src/ed25519.c ****     return ED25519_SIG_SIZE;
 2797                             		.loc 2 1259 12
 2798 0013 75 45 40                		mov.L	#0x40, r5
 2799                             	.L206:
1260:../src/wolfcrypt/src/ed25519.c **** }
 2800                             		.loc 2 1260 1
 2801 0016 EF 51                   		mov.L	r5, r1
 2802 0018 3F AA 02                		rtsd	#8, r10-r10
 2803                             	.LFE79:
 3662                             	.Letext0:
 3663                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 3664                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3665                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3666                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3667                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3668                             		.file 8 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 3669                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 3670                             		.file 10 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\incl
 3671                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/fe_operations.h"
 3672                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/ge_operations.h"
 3673                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/random.h"
 3674                             		.file 14 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha256.h"
 3675                             		.file 15 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha512.h"
 3676                             		.file 16 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/ed25519.h"
 3677                             		.file 17 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
 3678                             		.file 18 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/md5.h"
 3679                             		.file 19 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha.h"
 3680                             		.file 20 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/md4.h"
