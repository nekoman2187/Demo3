   1                             		.file	"hmac.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.min,"ax",@progbits
   6                             	_min:
   7                             	.LFB15:
   8                             		.file 1 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfcrypt/src/misc.c"
   1:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* misc.c
   2:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   3:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   5:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * This file is part of wolfSSL.
   6:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   7:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * it under the terms of the GNU General Public License as published by
   9:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * (at your option) any later version.
  11:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  12:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * GNU General Public License for more details.
  16:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  17:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * You should have received a copy of the GNU General Public License
  18:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * along with this program; if not, write to the Free Software
  19:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  21:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /*
  22:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  23:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** DESCRIPTION
  24:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** This module implements the arithmetic-shift right, left, byte swapping, XOR,
  25:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** masking and clearing memory logic.
  26:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  27:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** */
  28:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef HAVE_CONFIG_H
  29:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <config.h>
  30:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  31:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  32:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/settings.h>
  33:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  34:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLF_CRYPT_MISC_C
  35:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #define WOLF_CRYPT_MISC_C
  36:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  37:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/misc.h>
  38:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  39:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* inlining these functions is a huge speed increase and a small size decrease,
  40:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    because the functions are smaller than function call setup/cleanup, e.g.,
  41:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    md5 benchmark is twice as fast with inline.  If you don't want it, then
  42:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    define NO_INLINE and compile this file into wolfssl, otherwise it's used as
  43:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    a source header
  44:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  45:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  46:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef NO_INLINE
  47:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC
  48:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  49:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC static
  50:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  51:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  52:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* Check for if compiling misc.c when not needed. */
  53:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if !defined(WOLFSSL_MISC_INCLUDED) && !defined(NO_INLINE)
  54:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_IGNORE_FILE_WARN
  55:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #warning misc.c does not need to be compiled when using inline (NO_INLINE not defined)
  56:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
  57:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  58:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  59:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  60:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  61:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__ICCARM__)
  62:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <intrinsics.h>
  63:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  64:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  65:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  66:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef INTEL_INTRINSICS
  67:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  68:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <stdlib.h>      /* get intrinsic definitions */
  69:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  70:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* for non visual studio probably need no long version, 32 bit only
  71:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****      * i.e., _rotl and _rotr */
  72:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #pragma intrinsic(_lrotl, _lrotr)
  73:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  74:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  75:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  76:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotl(x, y) : x;
  77:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  78:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  79:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
  80:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  81:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotr(x, y) : x;
  82:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  83:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  84:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
  85:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  86:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <builtin.h>      /* get intrinsic definitions */
  87:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  88:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if !defined(NO_INLINE)
  89:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  90:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotlFixed(x, y) _builtin_rotl(x, y)
  91:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  92:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotrFixed(x, y) _builtin_rotr(x, y)
  93:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  94:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #else /* create real function */
  95:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  96:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  97:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  98:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotl(x, y);
  99:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 100:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 101:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 102:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 103:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotr(x, y);
 104:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 105:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 106:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 107:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 108:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else /* generic */
 109:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value. */
 110:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 111:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
 112:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 113:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x << y) | (x >> (sizeof(y) * 8 - y));
 114:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 115:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 116:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value. */
 117:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 118:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 119:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x >> y) | (x << (sizeof(y) * 8 - y));
 120:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 121:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 122:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 123:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 124:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef WC_RC2
 125:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 126:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value */
 127:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotlFixed16(word16 x, word16 y)
 128:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 129:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 130:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 131:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 132:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 133:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value */
 134:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotrFixed16(word16 x, word16 y)
 135:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 136:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 137:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 138:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 139:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WC_RC2 */
 140:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 141:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of 32-bit word value. */
 142:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__CCRX__) && !defined(NO_INLINE) /* shortest version for CC-RX */
 143:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define ByteReverseWord32(value) _builtin_revl(value)
 144:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 145:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
 146:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 147:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef PPC_INTRINSICS
 148:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* PPC: load reverse indexed instruction */
 149:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__lwbrx(&value,0);
 150:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__ICCARM__)
 151:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__REV(value);
 152:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(KEIL_INTRINSICS)
 153:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__rev(value);
 154:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
 155:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)_builtin_revl(value);
 156:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLF_ALLOW_BUILTIN) && \
 157:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 158:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__builtin_bswap32(value);
 159:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 160:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       defined(__aarch64__)
 161:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 162:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV32 %0, %0  \n"
 163:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 164:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 165:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 166:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 167:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 168:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       (defined(__thumb__) || defined(__arm__))
 169:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 170:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV %0, %0  \n"
 171:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 172:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 173:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 174:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 175:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(FAST_ROTATE)
 176:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 5 instructions with rotate instruction, 9 without */
 177:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (rotrFixed(value, 8U) & 0xff00ff00) |
 178:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****            (rotlFixed(value, 8U) & 0x00ff00ff);
 179:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 180:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 6 instructions with rotate instruction, 8 without */
 181:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 182:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed(value, 16U);
 183:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 184:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 185:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* __CCRX__ */
 186:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of words array of a given count. */
 187:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
 188:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                     word32 byteCount)
 189:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 190:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word32), i;
 191:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 193:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
 194:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 195:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 196:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 197:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WORD64_AVAILABLE) && !defined(WOLFSSL_NO_WORD64_OPS)
 198:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 199:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 200:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotlFixed64(word64 x, word64 y)
 201:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 202:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 203:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 204:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 205:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 206:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotrFixed64(word64 x, word64 y)
 207:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 208:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 209:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 210:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 211:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 212:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 ByteReverseWord64(word64 value)
 213:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 214:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WOLF_ALLOW_BUILTIN) && defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 215:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)__builtin_bswap64(value);
 216:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFCRYPT_SLOW_WORD64)
 217:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)((word64)ByteReverseWord32((word32) value)) << 32 |
 218:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         (word64)ByteReverseWord32((word32)(value   >> 32));
 219:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 220:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFF00FF00FF00FF00)) >> 8) |
 221:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x00FF00FF00FF00FF)) << 8);
 222:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFFFF0000FFFF0000)) >> 16) |
 223:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x0000FFFF0000FFFF)) << 16);
 224:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed64(value, 32U);
 225:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 226:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 227:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 228:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 229:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords64(word64* out, const word64* in,
 230:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                       word32 byteCount)
 231:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 232:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word64), i;
 233:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 235:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 236:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 237:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 238:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 239:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WORD64_AVAILABLE && !WOLFSSL_NO_WORD64_OPS */
 240:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 241:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_XOR_OPS
 242:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 243:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 244:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWordsOut(wolfssl_word* r, const wolfssl_word* a,
 245:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                      const wolfssl_word* b, word32 n)
 246:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 247:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 248:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 249:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] = a[i] ^ b[i];
 250:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 251:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 252:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 253:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 254:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 255:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbufout(void*out, const void* buf, const void* mask,
 256:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                    word32 count)
 257:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 258:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)out | (wc_ptr_t)buf | (wc_ptr_t)mask | count) %
 259:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                          WOLFSSL_WORD_SIZE == 0)
 260:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWordsOut( (wolfssl_word*)out, (wolfssl_word*)buf,
 261:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                      (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 262:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 263:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 264:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       o = (byte*)out;
 265:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 266:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 267:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) o[i] = b[i] ^ m[i];
 269:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 270:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 271:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 272:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 273:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 274:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWords(wolfssl_word* r, const wolfssl_word* a, word32 n)
 275:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 276:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 277:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 278:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] ^= a[i];
 279:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 280:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 281:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 282:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 283:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 284:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
 285:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 286:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)buf | (wc_ptr_t)mask | count) % WOLFSSL_WORD_SIZE == 0)
 287:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWords( (wolfssl_word*)buf,
 288:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                   (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 289:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 290:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 291:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 292:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 293:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) b[i] ^= m[i];
 295:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 296:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 297:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 298:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 299:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_FORCE_ZERO
 300:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine fills the first len bytes of the memory area pointed by mem
 301:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    with zeros. It ensures compiler optimizations doesn't skip it  */
 302:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
 303:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 304:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile byte* z = (volatile byte*)mem;
 305:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 306:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if (defined(WOLFSSL_X86_64_BUILD) || defined(WOLFSSL_AARCH64_BUILD)) \
 307:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****             && defined(WORD64_AVAILABLE)
 308:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile word64* w;
 309:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_UNALIGNED_64BIT_ACCESS
 310:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 l = (sizeof(word64) - ((size_t)z & (sizeof(word64)-1))) &
 311:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                              (sizeof(word64)-1);
 312:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 313:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         if (len < l) l = len;
 314:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         len -= l;
 315:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         while (l--) *z++ = 0;
 316:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 317:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
 318:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         *w++ = 0;
 319:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     z = (volatile byte*)w;
 320:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 321:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 322:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     while (len--) *z++ = 0;
 323:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 324:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 325:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 326:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 327:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_CONST_CMP
 328:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* check all length bytes for equality, return 0 on success */
 329:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE int ConstantCompare(const byte* a, const byte* b, int length)
 330:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 331:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     int i;
 332:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     int compareSum = 0;
 333:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 334:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < length; i++) {
 335:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         compareSum |= a[i] ^ b[i];
 336:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 337:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 338:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return compareSum;
 339:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 340:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 341:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 342:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 343:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_HAVE_MIN
 344:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WOLFSSL_HAVE_MIN
 345:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
 346:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #define min min
 347:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 348:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* returns the smaller of a and b */
 349:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 min(word32 a, word32 b)
 350:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
   9                             		.loc 1 350 5
  10 0000 7E AA                   		push.l	r10
  11                             	.LCFI0:
  12 0002 71 0A F8                		add	#-8, r0, r10
  13                             	.LCFI1:
  14 0005 EF A0                   		mov.L	r10, r0
  15 0007 E3 A1                   		mov.L	r1, [r10]
  16 0009 E7 A2 01                		mov.L	r2, 4[r10]
 351:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return a > b ? b : a;
  17                             		.loc 1 351 26
  18 000c ED A5 01                		mov.L	4[r10], r5
  19 000f EC A3                   		mov.L	[r10], r3
  20 0011 EC A4                   		mov.L	[r10], r4
  21 0013 47 53                   		cmp	r5, r3
  22 0015 24 04                   		bgtu 1f
  23 0017 EF 45                   		mov r4, r5
  24                             	1:
 352:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  25                             		.loc 1 352 5
  26 0019 EF 51                   		mov.L	r5, r1
  27 001b 3F AA 03                		rtsd	#12, r10-r10
  28                             	.LFE15:
  30                             		.section	.text.wc_HmacSizeByType,"ax",@progbits
  31                             		.global	_wc_HmacSizeByType
  33                             	_wc_HmacSizeByType:
  34                             	.LFB43:
  35                             		.file 2 "../src/wolfcrypt/src/hmac.c"
   1:../src/wolfcrypt/src/hmac.c **** /* hmac.c
   2:../src/wolfcrypt/src/hmac.c ****  *
   3:../src/wolfcrypt/src/hmac.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/hmac.c ****  *
   5:../src/wolfcrypt/src/hmac.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/hmac.c ****  *
   7:../src/wolfcrypt/src/hmac.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/hmac.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/hmac.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/hmac.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/hmac.c ****  *
  12:../src/wolfcrypt/src/hmac.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/hmac.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/hmac.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/hmac.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/hmac.c ****  *
  17:../src/wolfcrypt/src/hmac.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/hmac.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/hmac.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/hmac.c ****  */
  21:../src/wolfcrypt/src/hmac.c **** 
  22:../src/wolfcrypt/src/hmac.c **** 
  23:../src/wolfcrypt/src/hmac.c **** #ifdef HAVE_CONFIG_H
  24:../src/wolfcrypt/src/hmac.c ****     #include <config.h>
  25:../src/wolfcrypt/src/hmac.c **** #endif
  26:../src/wolfcrypt/src/hmac.c **** 
  27:../src/wolfcrypt/src/hmac.c **** #include <wolfssl/wolfcrypt/wc_port.h>
  28:../src/wolfcrypt/src/hmac.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  29:../src/wolfcrypt/src/hmac.c **** 
  30:../src/wolfcrypt/src/hmac.c **** #ifndef NO_HMAC
  31:../src/wolfcrypt/src/hmac.c **** 
  32:../src/wolfcrypt/src/hmac.c **** #if defined(HAVE_FIPS) && \
  33:../src/wolfcrypt/src/hmac.c ****     defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2)
  34:../src/wolfcrypt/src/hmac.c **** 
  35:../src/wolfcrypt/src/hmac.c ****     /* set NO_WRAPPERS before headers, use direct internal f()s not wrappers */
  36:../src/wolfcrypt/src/hmac.c ****     #define FIPS_NO_WRAPPERS
  37:../src/wolfcrypt/src/hmac.c **** 
  38:../src/wolfcrypt/src/hmac.c ****     #ifdef USE_WINDOWS_API
  39:../src/wolfcrypt/src/hmac.c ****         #pragma code_seg(".fipsA$b")
  40:../src/wolfcrypt/src/hmac.c ****         #pragma const_seg(".fipsB$b")
  41:../src/wolfcrypt/src/hmac.c ****     #endif
  42:../src/wolfcrypt/src/hmac.c **** #endif
  43:../src/wolfcrypt/src/hmac.c **** 
  44:../src/wolfcrypt/src/hmac.c **** #include <wolfssl/wolfcrypt/hmac.h>
  45:../src/wolfcrypt/src/hmac.c **** 
  46:../src/wolfcrypt/src/hmac.c **** #ifdef WOLF_CRYPTO_CB
  47:../src/wolfcrypt/src/hmac.c ****     #include <wolfssl/wolfcrypt/cryptocb.h>
  48:../src/wolfcrypt/src/hmac.c **** #endif
  49:../src/wolfcrypt/src/hmac.c **** 
  50:../src/wolfcrypt/src/hmac.c **** #ifdef NO_INLINE
  51:../src/wolfcrypt/src/hmac.c ****     #include <wolfssl/wolfcrypt/misc.h>
  52:../src/wolfcrypt/src/hmac.c **** #else
  53:../src/wolfcrypt/src/hmac.c ****     #define WOLFSSL_MISC_INCLUDED
  54:../src/wolfcrypt/src/hmac.c ****     #include <wolfcrypt/src/misc.c>
  55:../src/wolfcrypt/src/hmac.c **** #endif
  56:../src/wolfcrypt/src/hmac.c **** 
  57:../src/wolfcrypt/src/hmac.c **** #ifdef WOLFSSL_KCAPI_HMAC
  58:../src/wolfcrypt/src/hmac.c ****     #include <wolfssl/wolfcrypt/port/kcapi/kcapi_hmac.h>
  59:../src/wolfcrypt/src/hmac.c **** 
  60:../src/wolfcrypt/src/hmac.c ****     /* map the _Software calls used by kcapi_hmac.c */
  61:../src/wolfcrypt/src/hmac.c ****     #define wc_HmacSetKey  wc_HmacSetKey_Software
  62:../src/wolfcrypt/src/hmac.c ****     #define wc_HmacUpdate  wc_HmacUpdate_Software
  63:../src/wolfcrypt/src/hmac.c ****     #define wc_HmacFinal   wc_HmacFinal_Software
  64:../src/wolfcrypt/src/hmac.c **** #endif
  65:../src/wolfcrypt/src/hmac.c **** 
  66:../src/wolfcrypt/src/hmac.c **** 
  67:../src/wolfcrypt/src/hmac.c **** /* fips wrapper calls, user can call direct */
  68:../src/wolfcrypt/src/hmac.c **** /* If building for old FIPS. */
  69:../src/wolfcrypt/src/hmac.c **** #if defined(HAVE_FIPS) && \
  70:../src/wolfcrypt/src/hmac.c ****     (!defined(HAVE_FIPS_VERSION) || (HAVE_FIPS_VERSION < 2))
  71:../src/wolfcrypt/src/hmac.c **** 
  72:../src/wolfcrypt/src/hmac.c ****     /* does init */
  73:../src/wolfcrypt/src/hmac.c ****     int wc_HmacSetKey(Hmac* hmac, int type, const byte* key, word32 keySz)
  74:../src/wolfcrypt/src/hmac.c ****     {
  75:../src/wolfcrypt/src/hmac.c ****         if (hmac == NULL || (key == NULL && keySz != 0) ||
  76:../src/wolfcrypt/src/hmac.c ****            !(type == WC_MD5 || type == WC_SHA || type == WC_SHA256 ||
  77:../src/wolfcrypt/src/hmac.c ****                 type == WC_SHA384 || type == WC_SHA512)) {
  78:../src/wolfcrypt/src/hmac.c ****             return BAD_FUNC_ARG;
  79:../src/wolfcrypt/src/hmac.c ****         }
  80:../src/wolfcrypt/src/hmac.c **** 
  81:../src/wolfcrypt/src/hmac.c ****         return HmacSetKey_fips(hmac, type, key, keySz);
  82:../src/wolfcrypt/src/hmac.c ****     }
  83:../src/wolfcrypt/src/hmac.c ****     int wc_HmacUpdate(Hmac* hmac, const byte* in, word32 sz)
  84:../src/wolfcrypt/src/hmac.c ****     {
  85:../src/wolfcrypt/src/hmac.c ****         if (hmac == NULL || (in == NULL && sz > 0)) {
  86:../src/wolfcrypt/src/hmac.c ****             return BAD_FUNC_ARG;
  87:../src/wolfcrypt/src/hmac.c ****         }
  88:../src/wolfcrypt/src/hmac.c **** 
  89:../src/wolfcrypt/src/hmac.c ****         return HmacUpdate_fips(hmac, in, sz);
  90:../src/wolfcrypt/src/hmac.c ****     }
  91:../src/wolfcrypt/src/hmac.c ****     int wc_HmacFinal(Hmac* hmac, byte* out)
  92:../src/wolfcrypt/src/hmac.c ****     {
  93:../src/wolfcrypt/src/hmac.c ****         if (hmac == NULL) {
  94:../src/wolfcrypt/src/hmac.c ****             return BAD_FUNC_ARG;
  95:../src/wolfcrypt/src/hmac.c ****         }
  96:../src/wolfcrypt/src/hmac.c **** 
  97:../src/wolfcrypt/src/hmac.c ****         return HmacFinal_fips(hmac, out);
  98:../src/wolfcrypt/src/hmac.c ****     }
  99:../src/wolfcrypt/src/hmac.c ****     int wolfSSL_GetHmacMaxSize(void)
 100:../src/wolfcrypt/src/hmac.c ****     {
 101:../src/wolfcrypt/src/hmac.c ****         return CyaSSL_GetHmacMaxSize();
 102:../src/wolfcrypt/src/hmac.c ****     }
 103:../src/wolfcrypt/src/hmac.c **** 
 104:../src/wolfcrypt/src/hmac.c ****     int wc_HmacInit(Hmac* hmac, void* heap, int devId)
 105:../src/wolfcrypt/src/hmac.c ****     {
 106:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_KCAPI_HMAC
 107:../src/wolfcrypt/src/hmac.c ****         (void)hmac;
 108:../src/wolfcrypt/src/hmac.c ****         (void)heap;
 109:../src/wolfcrypt/src/hmac.c ****         (void)devId;
 110:../src/wolfcrypt/src/hmac.c ****         return 0;
 111:../src/wolfcrypt/src/hmac.c ****     #else
 112:../src/wolfcrypt/src/hmac.c ****         return HmacInit(hmac, heap, devId);
 113:../src/wolfcrypt/src/hmac.c ****     #endif
 114:../src/wolfcrypt/src/hmac.c ****     }
 115:../src/wolfcrypt/src/hmac.c ****     void wc_HmacFree(Hmac* hmac)
 116:../src/wolfcrypt/src/hmac.c ****     {
 117:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_KCAPI_HMAC
 118:../src/wolfcrypt/src/hmac.c ****         (void)hmac;
 119:../src/wolfcrypt/src/hmac.c ****     #else
 120:../src/wolfcrypt/src/hmac.c ****         HmacFree(hmac);
 121:../src/wolfcrypt/src/hmac.c ****     #endif
 122:../src/wolfcrypt/src/hmac.c ****     }
 123:../src/wolfcrypt/src/hmac.c **** 
 124:../src/wolfcrypt/src/hmac.c ****     #ifdef HAVE_HKDF
 125:../src/wolfcrypt/src/hmac.c ****         int wc_HKDF(int type, const byte* inKey, word32 inKeySz,
 126:../src/wolfcrypt/src/hmac.c ****                     const byte* salt, word32 saltSz,
 127:../src/wolfcrypt/src/hmac.c ****                     const byte* info, word32 infoSz,
 128:../src/wolfcrypt/src/hmac.c ****                     byte* out, word32 outSz)
 129:../src/wolfcrypt/src/hmac.c ****         {
 130:../src/wolfcrypt/src/hmac.c ****             return HKDF(type, inKey, inKeySz, salt, saltSz,
 131:../src/wolfcrypt/src/hmac.c ****                 info, infoSz, out, outSz);
 132:../src/wolfcrypt/src/hmac.c ****         }
 133:../src/wolfcrypt/src/hmac.c ****     #endif /* HAVE_HKDF */
 134:../src/wolfcrypt/src/hmac.c **** 
 135:../src/wolfcrypt/src/hmac.c **** #else /* else build without fips, or for new fips */
 136:../src/wolfcrypt/src/hmac.c **** 
 137:../src/wolfcrypt/src/hmac.c **** 
 138:../src/wolfcrypt/src/hmac.c **** int wc_HmacSizeByType(int type)
 139:../src/wolfcrypt/src/hmac.c **** {
  36                             		.loc 2 139 1
  37 0000 7E AA                   		push.l	r10
  38                             	.LCFI2:
  39 0002 71 0A F8                		add	#-8, r0, r10
  40                             	.LCFI3:
  41 0005 EF A0                   		mov.L	r10, r0
  42 0007 E7 A1 01                		mov.L	r1, 4[r10]
 140:../src/wolfcrypt/src/hmac.c ****     int ret;
 141:../src/wolfcrypt/src/hmac.c **** 
 142:../src/wolfcrypt/src/hmac.c ****     if (!(type == WC_MD5 || type == WC_SHA ||
  43                             		.loc 2 142 8
  44 000a ED A5 01                		mov.L	4[r10], r5
  45 000d 61 35                   		cmp	#3, r5
  46 000f 20 46                   		beq	.L4
  47                             		.loc 2 142 26 discriminator 1
  48 0011 ED A5 01                		mov.L	4[r10], r5
  49 0014 61 45                   		cmp	#4, r5
  50 0016 20 3F                   		beq	.L4
  51                             		.loc 2 142 44 discriminator 2
  52 0018 ED A5 01                		mov.L	4[r10], r5
  53 001b 61 55                   		cmp	#5, r5
  54 001d 20 38                   		beq	.L4
 143:../src/wolfcrypt/src/hmac.c ****             type == WC_SHA224 || type == WC_SHA256 ||
  55                             		.loc 2 143 31
  56 001f ED A5 01                		mov.L	4[r10], r5
  57 0022 61 65                   		cmp	#6, r5
  58 0024 20 31                   		beq	.L4
  59                             		.loc 2 143 52 discriminator 1
  60 0026 ED A5 01                		mov.L	4[r10], r5
  61 0029 61 75                   		cmp	#7, r5
  62 002b 20 2A                   		beq	.L4
 144:../src/wolfcrypt/src/hmac.c ****             type == WC_SHA384 || type == WC_SHA512 ||
  63                             		.loc 2 144 31
  64 002d ED A5 01                		mov.L	4[r10], r5
  65 0030 61 85                   		cmp	#8, r5
  66 0032 20 23                   		beq	.L4
  67                             		.loc 2 144 52 discriminator 1
  68 0034 ED A5 01                		mov.L	4[r10], r5
  69 0037 61 A5                   		cmp	#10, r5
  70 0039 20 1C                   		beq	.L4
 145:../src/wolfcrypt/src/hmac.c ****             type == WC_SHA3_224 || type == WC_SHA3_256 ||
  71                             		.loc 2 145 33
  72 003b ED A5 01                		mov.L	4[r10], r5
  73 003e 61 B5                   		cmp	#11, r5
  74 0040 20 15                   		beq	.L4
  75                             		.loc 2 145 56 discriminator 1
  76 0042 ED A5 01                		mov.L	4[r10], r5
  77 0045 61 C5                   		cmp	#12, r5
  78 0047 20 0E                   		beq	.L4
 142:../src/wolfcrypt/src/hmac.c ****             type == WC_SHA224 || type == WC_SHA256 ||
  79                             		.loc 2 142 9
  80 0049 ED A5 01                		mov.L	4[r10], r5
  81 004c 61 D5                   		cmp	#13, r5
  82 004e 17                      		beq	.L4
 146:../src/wolfcrypt/src/hmac.c ****             type == WC_SHA3_384 || type == WC_SHA3_512)) {
 147:../src/wolfcrypt/src/hmac.c ****         return BAD_FUNC_ARG;
  83                             		.loc 2 147 16
  84 004f FB 5A 53 FF             		mov.L	#-173, r5
  85 0053 2E 4F                   		bra	.L5
  86                             	.L4:
 148:../src/wolfcrypt/src/hmac.c ****     }
 149:../src/wolfcrypt/src/hmac.c **** 
 150:../src/wolfcrypt/src/hmac.c ****     switch (type) {
  87                             		.loc 2 150 5
  88 0055 ED A5 01                		mov.L	4[r10], r5
  89 0058 61 65                   		cmp	#6, r5
  90 005a 20 33                   		beq	.L6
  91 005c ED A5 01                		mov.L	4[r10], r5
  92 005f 61 65                   		cmp	#6, r5
  93 0061 2A 12                   		bgt	.L7
  94 0063 ED A5 01                		mov.L	4[r10], r5
  95 0066 61 35                   		cmp	#3, r5
  96 0068 20 1B                   		beq	.L8
  97 006a ED A5 01                		mov.L	4[r10], r5
  98 006d 61 45                   		cmp	#4, r5
  99 006f 20 19                   		beq	.L9
 100 0071 2E 2A                   		bra	.L10
 101                             	.L7:
 102 0073 ED A5 01                		mov.L	4[r10], r5
 103 0076 61 75                   		cmp	#7, r5
 104 0078 20 1A                   		beq	.L11
 105 007a ED A5 01                		mov.L	4[r10], r5
 106 007d 61 85                   		cmp	#8, r5
 107 007f 20 18                   		beq	.L12
 108 0081 2E 1A                   		bra	.L10
 109                             	.L8:
 151:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_MD5
 152:../src/wolfcrypt/src/hmac.c ****         case WC_MD5:
 153:../src/wolfcrypt/src/hmac.c ****             ret = WC_MD5_DIGEST_SIZE;
 110                             		.loc 2 153 17
 111 0083 F8 A6 10                		mov.L	#16, [r10]
 154:../src/wolfcrypt/src/hmac.c ****             break;
 112                             		.loc 2 154 13
 113 0086 2E 1A                   		bra	.L13
 114                             	.L9:
 155:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_MD5 */
 156:../src/wolfcrypt/src/hmac.c **** 
 157:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA
 158:../src/wolfcrypt/src/hmac.c ****         case WC_SHA:
 159:../src/wolfcrypt/src/hmac.c ****             ret = WC_SHA_DIGEST_SIZE;
 115                             		.loc 2 159 17
 116 0088 F8 A6 14                		mov.L	#20, [r10]
 160:../src/wolfcrypt/src/hmac.c ****             break;
 117                             		.loc 2 160 13
 118 008b 2E 15                   		bra	.L13
 119                             	.L6:
 161:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA */
 162:../src/wolfcrypt/src/hmac.c **** 
 163:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA224
 164:../src/wolfcrypt/src/hmac.c ****         case WC_SHA224:
 165:../src/wolfcrypt/src/hmac.c ****             ret = WC_SHA224_DIGEST_SIZE;
 166:../src/wolfcrypt/src/hmac.c ****             break;
 167:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA224 */
 168:../src/wolfcrypt/src/hmac.c **** 
 169:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA256
 170:../src/wolfcrypt/src/hmac.c ****         case WC_SHA256:
 171:../src/wolfcrypt/src/hmac.c ****             ret = WC_SHA256_DIGEST_SIZE;
 120                             		.loc 2 171 17
 121 008d F8 A6 20                		mov.L	#32, [r10]
 172:../src/wolfcrypt/src/hmac.c ****             break;
 122                             		.loc 2 172 13
 123 0090 2E 10                   		bra	.L13
 124                             	.L11:
 173:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA256 */
 174:../src/wolfcrypt/src/hmac.c **** 
 175:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA384
 176:../src/wolfcrypt/src/hmac.c ****         case WC_SHA384:
 177:../src/wolfcrypt/src/hmac.c ****             ret = WC_SHA384_DIGEST_SIZE;
 125                             		.loc 2 177 17
 126 0092 F8 A6 30                		mov.L	#48, [r10]
 178:../src/wolfcrypt/src/hmac.c ****             break;
 127                             		.loc 2 178 13
 128 0095 2E 0B                   		bra	.L13
 129                             	.L12:
 179:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA384 */
 180:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA512
 181:../src/wolfcrypt/src/hmac.c ****         case WC_SHA512:
 182:../src/wolfcrypt/src/hmac.c ****             ret = WC_SHA512_DIGEST_SIZE;
 130                             		.loc 2 182 17
 131 0097 F8 A6 40                		mov.L	#0x40, [r10]
 183:../src/wolfcrypt/src/hmac.c ****             break;
 132                             		.loc 2 183 13
 133 009a 0E                      		bra	.L13
 134                             	.L10:
 184:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA512 */
 185:../src/wolfcrypt/src/hmac.c **** 
 186:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA3
 187:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_224:
 188:../src/wolfcrypt/src/hmac.c ****             ret = WC_SHA3_224_DIGEST_SIZE;
 189:../src/wolfcrypt/src/hmac.c ****             break;
 190:../src/wolfcrypt/src/hmac.c **** 
 191:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_256:
 192:../src/wolfcrypt/src/hmac.c ****             ret = WC_SHA3_256_DIGEST_SIZE;
 193:../src/wolfcrypt/src/hmac.c ****             break;
 194:../src/wolfcrypt/src/hmac.c **** 
 195:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_384:
 196:../src/wolfcrypt/src/hmac.c ****             ret = WC_SHA3_384_DIGEST_SIZE;
 197:../src/wolfcrypt/src/hmac.c ****             break;
 198:../src/wolfcrypt/src/hmac.c **** 
 199:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_512:
 200:../src/wolfcrypt/src/hmac.c ****             ret = WC_SHA3_512_DIGEST_SIZE;
 201:../src/wolfcrypt/src/hmac.c ****             break;
 202:../src/wolfcrypt/src/hmac.c **** 
 203:../src/wolfcrypt/src/hmac.c ****     #endif
 204:../src/wolfcrypt/src/hmac.c **** 
 205:../src/wolfcrypt/src/hmac.c ****         default:
 206:../src/wolfcrypt/src/hmac.c ****             ret = BAD_FUNC_ARG;
 135                             		.loc 2 206 17
 136 009b F8 AA 53 FF             		mov.L	#-173, [r10]
 207:../src/wolfcrypt/src/hmac.c ****             break;
 137                             		.loc 2 207 13
 138 009f 03                      		nop
 139                             		.balign 8,3,1
 140                             	.L13:
 208:../src/wolfcrypt/src/hmac.c ****     }
 209:../src/wolfcrypt/src/hmac.c **** 
 210:../src/wolfcrypt/src/hmac.c ****     return ret;
 141                             		.loc 2 210 12
 142 00a0 EC A5                   		mov.L	[r10], r5
 143                             	.L5:
 211:../src/wolfcrypt/src/hmac.c **** }
 144                             		.loc 2 211 1
 145 00a2 EF 51                   		mov.L	r5, r1
 146 00a4 3F AA 03                		rtsd	#12, r10-r10
 147                             	.LFE43:
 149 00a7 03                      		.section	.text._InitHmac,"ax",@progbits
 150                             		.global	__InitHmac
 152                             	__InitHmac:
 153                             	.LFB44:
 212:../src/wolfcrypt/src/hmac.c **** 
 213:../src/wolfcrypt/src/hmac.c **** int _InitHmac(Hmac* hmac, int type, void* heap)
 214:../src/wolfcrypt/src/hmac.c **** {
 154                             		.loc 2 214 1
 155 0000 7E AA                   		push.l	r10
 156                             	.LCFI4:
 157 0002 71 0A EC                		add	#-20, r0, r10
 158                             	.LCFI5:
 159 0005 EF A0                   		mov.L	r10, r0
 160 0007 E7 A1 02                		mov.L	r1, 8[r10]
 161 000a E7 A2 03                		mov.L	r2, 12[r10]
 162 000d E7 A3 04                		mov.L	r3, 16[r10]
 215:../src/wolfcrypt/src/hmac.c ****     int ret = 0;
 163                             		.loc 2 215 9
 164 0010 F8 A6 00                		mov.L	#0, [r10]
 216:../src/wolfcrypt/src/hmac.c **** #ifdef WOLF_CRYPTO_CB
 217:../src/wolfcrypt/src/hmac.c ****     int devId = hmac->devId;
 218:../src/wolfcrypt/src/hmac.c **** #else
 219:../src/wolfcrypt/src/hmac.c ****     int devId = INVALID_DEVID;
 165                             		.loc 2 219 9
 166 0013 F9 A6 01 FE             		mov.L	#-2, 4[r10]
 220:../src/wolfcrypt/src/hmac.c **** #endif
 221:../src/wolfcrypt/src/hmac.c ****     switch (type) {
 167                             		.loc 2 221 5
 168 0017 ED A5 03                		mov.L	12[r10], r5
 169 001a 61 65                   		cmp	#6, r5
 170 001c 20 4F                   		beq	.L15
 171 001e ED A5 03                		mov.L	12[r10], r5
 172 0021 61 65                   		cmp	#6, r5
 173 0023 2A 12                   		bgt	.L16
 174 0025 ED A5 03                		mov.L	12[r10], r5
 175 0028 61 35                   		cmp	#3, r5
 176 002a 20 1B                   		beq	.L17
 177 002c ED A5 03                		mov.L	12[r10], r5
 178 002f 61 45                   		cmp	#4, r5
 179 0031 20 27                   		beq	.L18
 180 0033 2E 70                   		bra	.L19
 181                             	.L16:
 182 0035 ED A5 03                		mov.L	12[r10], r5
 183 0038 61 75                   		cmp	#7, r5
 184 003a 20 44                   		beq	.L20
 185 003c ED A5 03                		mov.L	12[r10], r5
 186 003f 61 85                   		cmp	#8, r5
 187 0041 20 50                   		beq	.L21
 188 0043 2E 60                   		bra	.L19
 189                             	.L17:
 222:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_MD5
 223:../src/wolfcrypt/src/hmac.c ****         case WC_MD5:
 224:../src/wolfcrypt/src/hmac.c ****             ret = wc_InitMd5_ex(&hmac->hash.md5, heap, devId);
 190                             		.loc 2 224 19
 191 0045 ED A5 02                		mov.L	8[r10], r5
 192 0048 ED A3 01                		mov.L	4[r10], r3
 193 004b ED A2 04                		mov.L	16[r10], r2
 194 004e EF 51                   		mov.L	r5, r1
 195 0050 05 00 00 00             		bsr	_wc_InitMd5_ex
 196 0054 E3 A1                   		mov.L	r1, [r10]
 225:../src/wolfcrypt/src/hmac.c ****             break;
 197                             		.loc 2 225 13
 198 0056 2E 52                   		bra	.L22
 199                             	.L18:
 226:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_MD5 */
 227:../src/wolfcrypt/src/hmac.c **** 
 228:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA
 229:../src/wolfcrypt/src/hmac.c ****         case WC_SHA:
 230:../src/wolfcrypt/src/hmac.c ****             ret = wc_InitSha_ex(&hmac->hash.sha, heap, devId);
 200                             		.loc 2 230 19
 201 0058 ED A5 02                		mov.L	8[r10], r5
 202 005b ED A3 01                		mov.L	4[r10], r3
 203 005e ED A2 04                		mov.L	16[r10], r2
 204 0061 EF 51                   		mov.L	r5, r1
 205 0063 05 00 00 00             		bsr	_wc_InitSha_ex
 206 0067 E3 A1                   		mov.L	r1, [r10]
 231:../src/wolfcrypt/src/hmac.c ****             break;
 207                             		.loc 2 231 13
 208 0069 2E 3F                   		bra	.L22
 209                             	.L15:
 232:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA */
 233:../src/wolfcrypt/src/hmac.c **** 
 234:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA224
 235:../src/wolfcrypt/src/hmac.c ****         case WC_SHA224:
 236:../src/wolfcrypt/src/hmac.c ****             ret = wc_InitSha224_ex(&hmac->hash.sha224, heap, devId);
 237:../src/wolfcrypt/src/hmac.c ****             break;
 238:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA224 */
 239:../src/wolfcrypt/src/hmac.c **** 
 240:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA256
 241:../src/wolfcrypt/src/hmac.c ****         case WC_SHA256:
 242:../src/wolfcrypt/src/hmac.c ****             ret = wc_InitSha256_ex(&hmac->hash.sha256, heap, devId);
 210                             		.loc 2 242 19
 211 006b ED A5 02                		mov.L	8[r10], r5
 212 006e ED A3 01                		mov.L	4[r10], r3
 213 0071 ED A2 04                		mov.L	16[r10], r2
 214 0074 EF 51                   		mov.L	r5, r1
 215 0076 05 00 00 00             		bsr	_wc_InitSha256_ex
 216 007a E3 A1                   		mov.L	r1, [r10]
 243:../src/wolfcrypt/src/hmac.c ****             break;
 217                             		.loc 2 243 13
 218 007c 2E 2C                   		bra	.L22
 219                             	.L20:
 244:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA256 */
 245:../src/wolfcrypt/src/hmac.c **** 
 246:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA384
 247:../src/wolfcrypt/src/hmac.c ****         case WC_SHA384:
 248:../src/wolfcrypt/src/hmac.c ****             ret = wc_InitSha384_ex(&hmac->hash.sha384, heap, devId);
 220                             		.loc 2 248 19
 221 007e ED A5 02                		mov.L	8[r10], r5
 222 0081 ED A3 01                		mov.L	4[r10], r3
 223 0084 ED A2 04                		mov.L	16[r10], r2
 224 0087 EF 51                   		mov.L	r5, r1
 225 0089 05 00 00 00             		bsr	_wc_InitSha384_ex
 226 008d E3 A1                   		mov.L	r1, [r10]
 249:../src/wolfcrypt/src/hmac.c ****             break;
 227                             		.loc 2 249 13
 228 008f 2E 19                   		bra	.L22
 229                             	.L21:
 250:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA384 */
 251:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA512
 252:../src/wolfcrypt/src/hmac.c ****         case WC_SHA512:
 253:../src/wolfcrypt/src/hmac.c ****             ret = wc_InitSha512_ex(&hmac->hash.sha512, heap, devId);
 230                             		.loc 2 253 19
 231 0091 ED A5 02                		mov.L	8[r10], r5
 232 0094 ED A3 01                		mov.L	4[r10], r3
 233 0097 ED A2 04                		mov.L	16[r10], r2
 234 009a EF 51                   		mov.L	r5, r1
 235 009c 05 00 00 00             		bsr	_wc_InitSha512_ex
 236 00a0 E3 A1                   		mov.L	r1, [r10]
 254:../src/wolfcrypt/src/hmac.c ****             break;
 237                             		.loc 2 254 13
 238 00a2 0E                      		bra	.L22
 239                             	.L19:
 255:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA512 */
 256:../src/wolfcrypt/src/hmac.c **** 
 257:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA3
 258:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_224
 259:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_224:
 260:../src/wolfcrypt/src/hmac.c ****             ret = wc_InitSha3_224(&hmac->hash.sha3, heap, devId);
 261:../src/wolfcrypt/src/hmac.c ****             break;
 262:../src/wolfcrypt/src/hmac.c ****     #endif
 263:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_256
 264:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_256:
 265:../src/wolfcrypt/src/hmac.c ****             ret = wc_InitSha3_256(&hmac->hash.sha3, heap, devId);
 266:../src/wolfcrypt/src/hmac.c ****             break;
 267:../src/wolfcrypt/src/hmac.c ****     #endif
 268:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_384
 269:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_384:
 270:../src/wolfcrypt/src/hmac.c ****             ret = wc_InitSha3_384(&hmac->hash.sha3, heap, devId);
 271:../src/wolfcrypt/src/hmac.c ****             break;
 272:../src/wolfcrypt/src/hmac.c ****     #endif
 273:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_512
 274:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_512:
 275:../src/wolfcrypt/src/hmac.c ****             ret = wc_InitSha3_512(&hmac->hash.sha3, heap, devId);
 276:../src/wolfcrypt/src/hmac.c ****             break;
 277:../src/wolfcrypt/src/hmac.c ****     #endif
 278:../src/wolfcrypt/src/hmac.c ****     #endif
 279:../src/wolfcrypt/src/hmac.c **** 
 280:../src/wolfcrypt/src/hmac.c ****         default:
 281:../src/wolfcrypt/src/hmac.c ****             ret = BAD_FUNC_ARG;
 240                             		.loc 2 281 17
 241 00a3 F8 AA 53 FF             		mov.L	#-173, [r10]
 282:../src/wolfcrypt/src/hmac.c ****             break;
 242                             		.loc 2 282 13
 243 00a7 03                      		nop
 244                             		.balign 8,3,1
 245                             	.L22:
 283:../src/wolfcrypt/src/hmac.c ****     }
 284:../src/wolfcrypt/src/hmac.c **** 
 285:../src/wolfcrypt/src/hmac.c ****     /* default to NULL heap hint or test value */
 286:../src/wolfcrypt/src/hmac.c **** #ifdef WOLFSSL_HEAP_TEST
 287:../src/wolfcrypt/src/hmac.c ****     hmac->heap = (void*)WOLFSSL_HEAP_TEST;
 288:../src/wolfcrypt/src/hmac.c **** #else
 289:../src/wolfcrypt/src/hmac.c ****     hmac->heap = heap;
 246                             		.loc 2 289 16
 247 00a8 ED A5 02                		mov.L	8[r10], r5
 248 00ab ED A4 04                		mov.L	16[r10], r4
 249 00ae E7 54 86                		mov.L	r4, 536[r5]
 290:../src/wolfcrypt/src/hmac.c **** #endif /* WOLFSSL_HEAP_TEST */
 291:../src/wolfcrypt/src/hmac.c **** 
 292:../src/wolfcrypt/src/hmac.c ****     return ret;
 250                             		.loc 2 292 12
 251 00b1 EC A5                   		mov.L	[r10], r5
 293:../src/wolfcrypt/src/hmac.c **** }
 252                             		.loc 2 293 1
 253 00b3 EF 51                   		mov.L	r5, r1
 254 00b5 3F AA 06                		rtsd	#24, r10-r10
 255                             	.LFE44:
 257                             		.section	.text.wc_HmacSetKey,"ax",@progbits
 258                             		.global	_wc_HmacSetKey
 260                             	_wc_HmacSetKey:
 261                             	.LFB45:
 294:../src/wolfcrypt/src/hmac.c **** 
 295:../src/wolfcrypt/src/hmac.c **** 
 296:../src/wolfcrypt/src/hmac.c **** int wc_HmacSetKey(Hmac* hmac, int type, const byte* key, word32 length)
 297:../src/wolfcrypt/src/hmac.c **** {
 262                             		.loc 2 297 1
 263 0000 7E AA                   		push.l	r10
 264                             	.LCFI6:
 265 0002 71 0A D8                		add	#-40, r0, r10
 266                             	.LCFI7:
 267 0005 EF A0                   		mov.L	r10, r0
 268 0007 E7 A1 06                		mov.L	r1, 24[r10]
 269 000a E7 A2 07                		mov.L	r2, 28[r10]
 270 000d E7 A3 08                		mov.L	r3, 32[r10]
 271 0010 E7 A4 09                		mov.L	r4, 36[r10]
 298:../src/wolfcrypt/src/hmac.c ****     byte*  ip;
 299:../src/wolfcrypt/src/hmac.c ****     byte*  op;
 300:../src/wolfcrypt/src/hmac.c ****     word32 i, hmac_block_size = 0;
 272                             		.loc 2 300 15
 273 0013 F9 A6 01 00             		mov.L	#0, 4[r10]
 301:../src/wolfcrypt/src/hmac.c ****     int    ret = 0;
 274                             		.loc 2 301 12
 275 0017 F9 A6 02 00             		mov.L	#0, 8[r10]
 302:../src/wolfcrypt/src/hmac.c ****     void*  heap = NULL;
 276                             		.loc 2 302 12
 277 001b F9 A6 03 00             		mov.L	#0, 12[r10]
 303:../src/wolfcrypt/src/hmac.c **** 
 304:../src/wolfcrypt/src/hmac.c ****     if (hmac == NULL || (key == NULL && length != 0) ||
 278                             		.loc 2 304 8
 279 001f ED A5 06                		mov.L	24[r10], r5
 280 0022 61 05                   		cmp	#0, r5
 281 0024 20 54                   		beq	.L25
 282                             		.loc 2 304 22 discriminator 1
 283 0026 ED A5 08                		mov.L	32[r10], r5
 284 0029 61 05                   		cmp	#0, r5
 285 002b 18                      		bne	.L26
 286                             		.loc 2 304 38 discriminator 2
 287 002c ED A5 09                		mov.L	36[r10], r5
 288 002f 61 05                   		cmp	#0, r5
 289 0031 21 47                   		bne	.L25
 290                             	.L26:
 291                             		.loc 2 304 54 discriminator 4
 292 0033 ED A5 07                		mov.L	28[r10], r5
 293 0036 61 35                   		cmp	#3, r5
 294 0038 20 47                   		beq	.L27
 305:../src/wolfcrypt/src/hmac.c ****        !(type == WC_MD5 || type == WC_SHA ||
 295                             		.loc 2 305 25
 296 003a ED A5 07                		mov.L	28[r10], r5
 297 003d 61 45                   		cmp	#4, r5
 298 003f 20 40                   		beq	.L27
 299                             		.loc 2 305 43 discriminator 1
 300 0041 ED A5 07                		mov.L	28[r10], r5
 301 0044 61 55                   		cmp	#5, r5
 302 0046 20 39                   		beq	.L27
 306:../src/wolfcrypt/src/hmac.c ****             type == WC_SHA224 || type == WC_SHA256 ||
 303                             		.loc 2 306 31
 304 0048 ED A5 07                		mov.L	28[r10], r5
 305 004b 61 65                   		cmp	#6, r5
 306 004d 20 32                   		beq	.L27
 307                             		.loc 2 306 52 discriminator 1
 308 004f ED A5 07                		mov.L	28[r10], r5
 309 0052 61 75                   		cmp	#7, r5
 310 0054 20 2B                   		beq	.L27
 307:../src/wolfcrypt/src/hmac.c ****             type == WC_SHA384 || type == WC_SHA512 ||
 311                             		.loc 2 307 31
 312 0056 ED A5 07                		mov.L	28[r10], r5
 313 0059 61 85                   		cmp	#8, r5
 314 005b 20 24                   		beq	.L27
 315                             		.loc 2 307 52 discriminator 1
 316 005d ED A5 07                		mov.L	28[r10], r5
 317 0060 61 A5                   		cmp	#10, r5
 318 0062 20 1D                   		beq	.L27
 308:../src/wolfcrypt/src/hmac.c ****             type == WC_SHA3_224 || type == WC_SHA3_256 ||
 319                             		.loc 2 308 33
 320 0064 ED A5 07                		mov.L	28[r10], r5
 321 0067 61 B5                   		cmp	#11, r5
 322 0069 20 16                   		beq	.L27
 323                             		.loc 2 308 56 discriminator 1
 324 006b ED A5 07                		mov.L	28[r10], r5
 325 006e 61 C5                   		cmp	#12, r5
 326 0070 20 0F                   		beq	.L27
 305:../src/wolfcrypt/src/hmac.c ****             type == WC_SHA224 || type == WC_SHA256 ||
 327                             		.loc 2 305 8
 328 0072 ED A5 07                		mov.L	28[r10], r5
 329 0075 61 D5                   		cmp	#13, r5
 330 0077 10                      		beq	.L27
 331                             	.L25:
 309:../src/wolfcrypt/src/hmac.c ****             type == WC_SHA3_384 || type == WC_SHA3_512)) {
 310:../src/wolfcrypt/src/hmac.c ****         return BAD_FUNC_ARG;
 332                             		.loc 2 310 16
 333 0078 FB 5A 53 FF             		mov.L	#-173, r5
 334 007c 38 E6 02                		bra	.L28
 335                             	.L27:
 311:../src/wolfcrypt/src/hmac.c ****     }
 312:../src/wolfcrypt/src/hmac.c **** 
 313:../src/wolfcrypt/src/hmac.c **** #ifndef HAVE_FIPS
 314:../src/wolfcrypt/src/hmac.c ****     /* if set key has already been run then make sure and free existing */
 315:../src/wolfcrypt/src/hmac.c ****     /* This is for async and PIC32MZ situations, and just normally OK,
 316:../src/wolfcrypt/src/hmac.c ****        provided the user calls wc_HmacInit() first. That function is not
 317:../src/wolfcrypt/src/hmac.c ****        available in FIPS builds. In current FIPS builds, the hashes are
 318:../src/wolfcrypt/src/hmac.c ****        not allocating resources. */
 319:../src/wolfcrypt/src/hmac.c ****     if (hmac->macType != WC_HASH_TYPE_NONE) {
 336                             		.loc 2 319 13
 337 007f ED A5 06                		mov.L	24[r10], r5
 338 0082 CE 55 1C 02             		mov.B	540[r5], r5
 339                             		.loc 2 319 8
 340 0086 5B 55                   		movu.B	r5, r5
 341 0088 61 05                   		cmp	#0, r5
 342 008a 10                      		beq	.L29
 320:../src/wolfcrypt/src/hmac.c ****         wc_HmacFree(hmac);
 343                             		.loc 2 320 9
 344 008b ED A1 06                		mov.L	24[r10], r1
 345 008e 05 00 00 00             		bsr	_wc_HmacFree
 346                             	.L29:
 321:../src/wolfcrypt/src/hmac.c ****     }
 322:../src/wolfcrypt/src/hmac.c **** #endif
 323:../src/wolfcrypt/src/hmac.c **** 
 324:../src/wolfcrypt/src/hmac.c ****     hmac->innerHashKeyed = 0;
 347                             		.loc 2 324 26
 348 0092 ED A5 06                		mov.L	24[r10], r5
 349 0095 FA 54 1D 02 00          		mov.B	#0, 541[r5]
 325:../src/wolfcrypt/src/hmac.c ****     hmac->macType = (byte)type;
 350                             		.loc 2 325 21
 351 009a ED A5 07                		mov.L	28[r10], r5
 352 009d CF 54                   		mov.B	r5, r4
 353                             		.loc 2 325 19
 354 009f ED A5 06                		mov.L	24[r10], r5
 355 00a2 CB 54 1C 02             		mov.B	r4, 540[r5]
 326:../src/wolfcrypt/src/hmac.c **** 
 327:../src/wolfcrypt/src/hmac.c ****     ret = _InitHmac(hmac, type, heap);
 356                             		.loc 2 327 11
 357 00a6 ED A3 03                		mov.L	12[r10], r3
 358 00a9 ED A2 07                		mov.L	28[r10], r2
 359 00ac ED A1 06                		mov.L	24[r10], r1
 360 00af 05 00 00 00             		bsr	__InitHmac
 361 00b3 E7 A1 02                		mov.L	r1, 8[r10]
 328:../src/wolfcrypt/src/hmac.c ****     if (ret != 0)
 362                             		.loc 2 328 8
 363 00b6 ED A5 02                		mov.L	8[r10], r5
 364 00b9 61 05                   		cmp	#0, r5
 365 00bb 17                      		beq	.L30
 329:../src/wolfcrypt/src/hmac.c ****         return ret;
 366                             		.loc 2 329 16
 367 00bc ED A5 02                		mov.L	8[r10], r5
 368 00bf 38 A3 02                		bra	.L28
 369                             	.L30:
 330:../src/wolfcrypt/src/hmac.c **** 
 331:../src/wolfcrypt/src/hmac.c **** #ifdef HAVE_FIPS
 332:../src/wolfcrypt/src/hmac.c ****     if (length < HMAC_FIPS_MIN_KEY)
 333:../src/wolfcrypt/src/hmac.c ****         return HMAC_MIN_KEYLEN_E;
 334:../src/wolfcrypt/src/hmac.c **** #endif
 335:../src/wolfcrypt/src/hmac.c **** 
 336:../src/wolfcrypt/src/hmac.c **** #ifdef WOLF_CRYPTO_CB
 337:../src/wolfcrypt/src/hmac.c ****     hmac->keyRaw = key; /* use buffer directly */
 338:../src/wolfcrypt/src/hmac.c ****     hmac->keyLen = length;
 339:../src/wolfcrypt/src/hmac.c **** #endif
 340:../src/wolfcrypt/src/hmac.c **** 
 341:../src/wolfcrypt/src/hmac.c ****     ip = (byte*)hmac->ipad;
 370                             		.loc 2 341 8
 371 00c2 ED A5 06                		mov.L	24[r10], r5
 372 00c5 72 55 D8 00             		add	#0xd8, r5
 373 00c9 E7 A5 04                		mov.L	r5, 16[r10]
 342:../src/wolfcrypt/src/hmac.c ****     op = (byte*)hmac->opad;
 374                             		.loc 2 342 8
 375 00cc ED A5 06                		mov.L	24[r10], r5
 376 00cf 72 55 58 01             		add	#0x158, r5
 377 00d3 E7 A5 05                		mov.L	r5, 20[r10]
 343:../src/wolfcrypt/src/hmac.c **** 
 344:../src/wolfcrypt/src/hmac.c ****     switch (hmac->macType) {
 378                             		.loc 2 344 17
 379 00d6 ED A5 06                		mov.L	24[r10], r5
 380 00d9 CE 55 1C 02             		mov.B	540[r5], r5
 381 00dd 5B 55                   		movu.B	r5, r5
 382                             		.loc 2 344 5
 383 00df 61 65                   		cmp	#6, r5
 384 00e1 3A D7 00                		beq	.L31
 385 00e4 61 65                   		cmp	#6, r5
 386 00e6 2A 0D                   		bgt	.L32
 387 00e8 61 35                   		cmp	#3, r5
 388 00ea 20 16                   		beq	.L33
 389 00ec 61 45                   		cmp	#4, r5
 390 00ee 20 6E                   		beq	.L34
 391 00f0 38 D8 01                		bra	.L35
 392                             	.L32:
 393 00f3 61 75                   		cmp	#7, r5
 394 00f5 3A 1F 01                		beq	.L36
 395 00f8 61 85                   		cmp	#8, r5
 396 00fa 3A 76 01                		beq	.L37
 397 00fd 38 CB 01                		bra	.L35
 398                             	.L33:
 345:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_MD5
 346:../src/wolfcrypt/src/hmac.c ****         case WC_MD5:
 347:../src/wolfcrypt/src/hmac.c ****             hmac_block_size = WC_MD5_BLOCK_SIZE;
 399                             		.loc 2 347 29
 400 0100 F9 A6 01 40             		mov.L	#0x40, 4[r10]
 348:../src/wolfcrypt/src/hmac.c ****             if (length <= WC_MD5_BLOCK_SIZE) {
 401                             		.loc 2 348 16
 402 0104 ED A5 09                		mov.L	36[r10], r5
 403 0107 75 55 40                		cmp	#0x40, r5
 404 010a 24 1A                   		bgtu	.L38
 349:../src/wolfcrypt/src/hmac.c ****                 if (key != NULL) {
 405                             		.loc 2 349 20
 406 010c ED A5 08                		mov.L	32[r10], r5
 407 010f 61 05                   		cmp	#0, r5
 408 0111 3A BE 01                		beq	.L68
 350:../src/wolfcrypt/src/hmac.c ****                     XMEMCPY(ip, key, length);
 409                             		.loc 2 350 21
 410 0114 ED A3 09                		mov.L	36[r10], r3
 411 0117 ED A2 08                		mov.L	32[r10], r2
 412 011a ED A1 04                		mov.L	16[r10], r1
 413 011d 05 00 00 00             		bsr	_memcpy
 351:../src/wolfcrypt/src/hmac.c ****                 }
 352:../src/wolfcrypt/src/hmac.c ****             }
 353:../src/wolfcrypt/src/hmac.c ****             else {
 354:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Md5Update(&hmac->hash.md5, key, length);
 355:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 356:../src/wolfcrypt/src/hmac.c ****                     break;
 357:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Md5Final(&hmac->hash.md5, ip);
 358:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 359:../src/wolfcrypt/src/hmac.c ****                     break;
 360:../src/wolfcrypt/src/hmac.c ****                 length = WC_MD5_DIGEST_SIZE;
 361:../src/wolfcrypt/src/hmac.c ****             }
 362:../src/wolfcrypt/src/hmac.c ****             break;
 414                             		.loc 2 362 13
 415 0121 38 AE 01                		bra	.L68
 416                             	.L38:
 354:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 417                             		.loc 2 354 23
 418 0124 ED A5 06                		mov.L	24[r10], r5
 419 0127 ED A3 09                		mov.L	36[r10], r3
 420 012a ED A2 08                		mov.L	32[r10], r2
 421 012d EF 51                   		mov.L	r5, r1
 422 012f 05 00 00 00             		bsr	_wc_Md5Update
 423 0133 E7 A1 02                		mov.L	r1, 8[r10]
 355:../src/wolfcrypt/src/hmac.c ****                     break;
 424                             		.loc 2 355 20
 425 0136 ED A5 02                		mov.L	8[r10], r5
 426 0139 61 05                   		cmp	#0, r5
 427 013b 3B 97 01                		bne	.L69
 357:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 428                             		.loc 2 357 23
 429 013e ED A5 06                		mov.L	24[r10], r5
 430 0141 ED A2 04                		mov.L	16[r10], r2
 431 0144 EF 51                   		mov.L	r5, r1
 432 0146 05 00 00 00             		bsr	_wc_Md5Final
 433 014a E7 A1 02                		mov.L	r1, 8[r10]
 358:../src/wolfcrypt/src/hmac.c ****                     break;
 434                             		.loc 2 358 20
 435 014d ED A5 02                		mov.L	8[r10], r5
 436 0150 61 05                   		cmp	#0, r5
 437 0152 3B 83 01                		bne	.L70
 360:../src/wolfcrypt/src/hmac.c ****             }
 438                             		.loc 2 360 24
 439 0155 F9 A6 09 10             		mov.L	#16, 36[r10]
 440                             		.loc 2 362 13
 441 0159 38 76 01                		bra	.L68
 442                             	.L34:
 363:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_MD5 */
 364:../src/wolfcrypt/src/hmac.c **** 
 365:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA
 366:../src/wolfcrypt/src/hmac.c ****         case WC_SHA:
 367:../src/wolfcrypt/src/hmac.c ****             hmac_block_size = WC_SHA_BLOCK_SIZE;
 443                             		.loc 2 367 29
 444 015c F9 A6 01 40             		mov.L	#0x40, 4[r10]
 368:../src/wolfcrypt/src/hmac.c ****             if (length <= WC_SHA_BLOCK_SIZE) {
 445                             		.loc 2 368 16
 446 0160 ED A5 09                		mov.L	36[r10], r5
 447 0163 75 55 40                		cmp	#0x40, r5
 448 0166 24 1A                   		bgtu	.L44
 369:../src/wolfcrypt/src/hmac.c ****                 if (key != NULL) {
 449                             		.loc 2 369 20
 450 0168 ED A5 08                		mov.L	32[r10], r5
 451 016b 61 05                   		cmp	#0, r5
 452 016d 3A 6B 01                		beq	.L71
 370:../src/wolfcrypt/src/hmac.c ****                     XMEMCPY(ip, key, length);
 453                             		.loc 2 370 21
 454 0170 ED A3 09                		mov.L	36[r10], r3
 455 0173 ED A2 08                		mov.L	32[r10], r2
 456 0176 ED A1 04                		mov.L	16[r10], r1
 457 0179 05 00 00 00             		bsr	_memcpy
 371:../src/wolfcrypt/src/hmac.c ****                 }
 372:../src/wolfcrypt/src/hmac.c ****             }
 373:../src/wolfcrypt/src/hmac.c ****             else {
 374:../src/wolfcrypt/src/hmac.c ****                 ret = wc_ShaUpdate(&hmac->hash.sha, key, length);
 375:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 376:../src/wolfcrypt/src/hmac.c ****                     break;
 377:../src/wolfcrypt/src/hmac.c ****                 ret = wc_ShaFinal(&hmac->hash.sha, ip);
 378:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 379:../src/wolfcrypt/src/hmac.c ****                     break;
 380:../src/wolfcrypt/src/hmac.c **** 
 381:../src/wolfcrypt/src/hmac.c ****                 length = WC_SHA_DIGEST_SIZE;
 382:../src/wolfcrypt/src/hmac.c ****             }
 383:../src/wolfcrypt/src/hmac.c ****             break;
 458                             		.loc 2 383 13
 459 017d 38 5B 01                		bra	.L71
 460                             	.L44:
 374:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 461                             		.loc 2 374 23
 462 0180 ED A5 06                		mov.L	24[r10], r5
 463 0183 ED A3 09                		mov.L	36[r10], r3
 464 0186 ED A2 08                		mov.L	32[r10], r2
 465 0189 EF 51                   		mov.L	r5, r1
 466 018b 05 00 00 00             		bsr	_wc_ShaUpdate
 467 018f E7 A1 02                		mov.L	r1, 8[r10]
 375:../src/wolfcrypt/src/hmac.c ****                     break;
 468                             		.loc 2 375 20
 469 0192 ED A5 02                		mov.L	8[r10], r5
 470 0195 61 05                   		cmp	#0, r5
 471 0197 3B 44 01                		bne	.L72
 377:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 472                             		.loc 2 377 23
 473 019a ED A5 06                		mov.L	24[r10], r5
 474 019d ED A2 04                		mov.L	16[r10], r2
 475 01a0 EF 51                   		mov.L	r5, r1
 476 01a2 05 00 00 00             		bsr	_wc_ShaFinal
 477 01a6 E7 A1 02                		mov.L	r1, 8[r10]
 378:../src/wolfcrypt/src/hmac.c ****                     break;
 478                             		.loc 2 378 20
 479 01a9 ED A5 02                		mov.L	8[r10], r5
 480 01ac 61 05                   		cmp	#0, r5
 481 01ae 3B 30 01                		bne	.L73
 381:../src/wolfcrypt/src/hmac.c ****             }
 482                             		.loc 2 381 24
 483 01b1 F9 A6 09 14             		mov.L	#20, 36[r10]
 484                             		.loc 2 383 13
 485 01b5 38 23 01                		bra	.L71
 486                             	.L31:
 384:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA */
 385:../src/wolfcrypt/src/hmac.c **** 
 386:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA224
 387:../src/wolfcrypt/src/hmac.c ****         case WC_SHA224:
 388:../src/wolfcrypt/src/hmac.c ****             hmac_block_size = WC_SHA224_BLOCK_SIZE;
 389:../src/wolfcrypt/src/hmac.c ****             if (length <= WC_SHA224_BLOCK_SIZE) {
 390:../src/wolfcrypt/src/hmac.c ****                 if (key != NULL) {
 391:../src/wolfcrypt/src/hmac.c ****                     XMEMCPY(ip, key, length);
 392:../src/wolfcrypt/src/hmac.c ****                 }
 393:../src/wolfcrypt/src/hmac.c ****             }
 394:../src/wolfcrypt/src/hmac.c ****             else {
 395:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha224Update(&hmac->hash.sha224, key, length);
 396:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 397:../src/wolfcrypt/src/hmac.c ****                     break;
 398:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha224Final(&hmac->hash.sha224, ip);
 399:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 400:../src/wolfcrypt/src/hmac.c ****                     break;
 401:../src/wolfcrypt/src/hmac.c **** 
 402:../src/wolfcrypt/src/hmac.c ****                 length = WC_SHA224_DIGEST_SIZE;
 403:../src/wolfcrypt/src/hmac.c ****             }
 404:../src/wolfcrypt/src/hmac.c ****             break;
 405:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA224 */
 406:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA256
 407:../src/wolfcrypt/src/hmac.c ****         case WC_SHA256:
 408:../src/wolfcrypt/src/hmac.c ****             hmac_block_size = WC_SHA256_BLOCK_SIZE;
 487                             		.loc 2 408 29
 488 01b8 F9 A6 01 40             		mov.L	#0x40, 4[r10]
 409:../src/wolfcrypt/src/hmac.c ****             if (length <= WC_SHA256_BLOCK_SIZE) {
 489                             		.loc 2 409 16
 490 01bc ED A5 09                		mov.L	36[r10], r5
 491 01bf 75 55 40                		cmp	#0x40, r5
 492 01c2 24 1A                   		bgtu	.L49
 410:../src/wolfcrypt/src/hmac.c ****                 if (key != NULL) {
 493                             		.loc 2 410 20
 494 01c4 ED A5 08                		mov.L	32[r10], r5
 495 01c7 61 05                   		cmp	#0, r5
 496 01c9 3A 18 01                		beq	.L74
 411:../src/wolfcrypt/src/hmac.c ****                     XMEMCPY(ip, key, length);
 497                             		.loc 2 411 21
 498 01cc ED A3 09                		mov.L	36[r10], r3
 499 01cf ED A2 08                		mov.L	32[r10], r2
 500 01d2 ED A1 04                		mov.L	16[r10], r1
 501 01d5 05 00 00 00             		bsr	_memcpy
 412:../src/wolfcrypt/src/hmac.c ****                 }
 413:../src/wolfcrypt/src/hmac.c ****             }
 414:../src/wolfcrypt/src/hmac.c ****             else {
 415:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha256Update(&hmac->hash.sha256, key, length);
 416:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 417:../src/wolfcrypt/src/hmac.c ****                     break;
 418:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha256Final(&hmac->hash.sha256, ip);
 419:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 420:../src/wolfcrypt/src/hmac.c ****                     break;
 421:../src/wolfcrypt/src/hmac.c **** 
 422:../src/wolfcrypt/src/hmac.c ****                 length = WC_SHA256_DIGEST_SIZE;
 423:../src/wolfcrypt/src/hmac.c ****             }
 424:../src/wolfcrypt/src/hmac.c ****             break;
 502                             		.loc 2 424 13
 503 01d9 38 08 01                		bra	.L74
 504                             	.L49:
 415:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 505                             		.loc 2 415 23
 506 01dc ED A5 06                		mov.L	24[r10], r5
 507 01df ED A3 09                		mov.L	36[r10], r3
 508 01e2 ED A2 08                		mov.L	32[r10], r2
 509 01e5 EF 51                   		mov.L	r5, r1
 510 01e7 05 00 00 00             		bsr	_wc_Sha256Update
 511 01eb E7 A1 02                		mov.L	r1, 8[r10]
 416:../src/wolfcrypt/src/hmac.c ****                     break;
 512                             		.loc 2 416 20
 513 01ee ED A5 02                		mov.L	8[r10], r5
 514 01f1 61 05                   		cmp	#0, r5
 515 01f3 3B F1 00                		bne	.L75
 418:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 516                             		.loc 2 418 23
 517 01f6 ED A5 06                		mov.L	24[r10], r5
 518 01f9 ED A2 04                		mov.L	16[r10], r2
 519 01fc EF 51                   		mov.L	r5, r1
 520 01fe 05 00 00 00             		bsr	_wc_Sha256Final
 521 0202 E7 A1 02                		mov.L	r1, 8[r10]
 419:../src/wolfcrypt/src/hmac.c ****                     break;
 522                             		.loc 2 419 20
 523 0205 ED A5 02                		mov.L	8[r10], r5
 524 0208 61 05                   		cmp	#0, r5
 525 020a 3B DD 00                		bne	.L76
 422:../src/wolfcrypt/src/hmac.c ****             }
 526                             		.loc 2 422 24
 527 020d F9 A6 09 20             		mov.L	#32, 36[r10]
 528                             		.loc 2 424 13
 529 0211 38 D0 00                		bra	.L74
 530                             	.L36:
 425:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA256 */
 426:../src/wolfcrypt/src/hmac.c **** 
 427:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA384
 428:../src/wolfcrypt/src/hmac.c ****         case WC_SHA384:
 429:../src/wolfcrypt/src/hmac.c ****             hmac_block_size = WC_SHA384_BLOCK_SIZE;
 531                             		.loc 2 429 29
 532 0214 F9 AA 01 80 00          		mov.L	#0x80, 4[r10]
 430:../src/wolfcrypt/src/hmac.c ****             if (length <= WC_SHA384_BLOCK_SIZE) {
 533                             		.loc 2 430 16
 534 0219 ED A5 09                		mov.L	36[r10], r5
 535 021c 75 55 80                		cmp	#0x80, r5
 536 021f 24 1A                   		bgtu	.L54
 431:../src/wolfcrypt/src/hmac.c ****                 if (key != NULL) {
 537                             		.loc 2 431 20
 538 0221 ED A5 08                		mov.L	32[r10], r5
 539 0224 61 05                   		cmp	#0, r5
 540 0226 3A C4 00                		beq	.L77
 432:../src/wolfcrypt/src/hmac.c ****                     XMEMCPY(ip, key, length);
 541                             		.loc 2 432 21
 542 0229 ED A3 09                		mov.L	36[r10], r3
 543 022c ED A2 08                		mov.L	32[r10], r2
 544 022f ED A1 04                		mov.L	16[r10], r1
 545 0232 05 00 00 00             		bsr	_memcpy
 433:../src/wolfcrypt/src/hmac.c ****                 }
 434:../src/wolfcrypt/src/hmac.c ****             }
 435:../src/wolfcrypt/src/hmac.c ****             else {
 436:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha384Update(&hmac->hash.sha384, key, length);
 437:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 438:../src/wolfcrypt/src/hmac.c ****                     break;
 439:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha384Final(&hmac->hash.sha384, ip);
 440:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 441:../src/wolfcrypt/src/hmac.c ****                     break;
 442:../src/wolfcrypt/src/hmac.c **** 
 443:../src/wolfcrypt/src/hmac.c ****                 length = WC_SHA384_DIGEST_SIZE;
 444:../src/wolfcrypt/src/hmac.c ****             }
 445:../src/wolfcrypt/src/hmac.c ****             break;
 546                             		.loc 2 445 13
 547 0236 38 B4 00                		bra	.L77
 548                             	.L54:
 436:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 549                             		.loc 2 436 23
 550 0239 ED A5 06                		mov.L	24[r10], r5
 551 023c ED A3 09                		mov.L	36[r10], r3
 552 023f ED A2 08                		mov.L	32[r10], r2
 553 0242 EF 51                   		mov.L	r5, r1
 554 0244 05 00 00 00             		bsr	_wc_Sha384Update
 555 0248 E7 A1 02                		mov.L	r1, 8[r10]
 437:../src/wolfcrypt/src/hmac.c ****                     break;
 556                             		.loc 2 437 20
 557 024b ED A5 02                		mov.L	8[r10], r5
 558 024e 61 05                   		cmp	#0, r5
 559 0250 3B 9D 00                		bne	.L78
 439:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 560                             		.loc 2 439 23
 561 0253 ED A5 06                		mov.L	24[r10], r5
 562 0256 ED A2 04                		mov.L	16[r10], r2
 563 0259 EF 51                   		mov.L	r5, r1
 564 025b 05 00 00 00             		bsr	_wc_Sha384Final
 565 025f E7 A1 02                		mov.L	r1, 8[r10]
 440:../src/wolfcrypt/src/hmac.c ****                     break;
 566                             		.loc 2 440 20
 567 0262 ED A5 02                		mov.L	8[r10], r5
 568 0265 61 05                   		cmp	#0, r5
 569 0267 3B 88 00                		bne	.L79
 443:../src/wolfcrypt/src/hmac.c ****             }
 570                             		.loc 2 443 24
 571 026a F9 A6 09 30             		mov.L	#48, 36[r10]
 572                             		.loc 2 445 13
 573 026e 2E 7C                   		bra	.L77
 574                             	.L37:
 446:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA384 */
 447:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA512
 448:../src/wolfcrypt/src/hmac.c ****         case WC_SHA512:
 449:../src/wolfcrypt/src/hmac.c ****             hmac_block_size = WC_SHA512_BLOCK_SIZE;
 575                             		.loc 2 449 29
 576 0270 F9 AA 01 80 00          		mov.L	#0x80, 4[r10]
 450:../src/wolfcrypt/src/hmac.c ****             if (length <= WC_SHA512_BLOCK_SIZE) {
 577                             		.loc 2 450 16
 578 0275 ED A5 09                		mov.L	36[r10], r5
 579 0278 75 55 80                		cmp	#0x80, r5
 580 027b 24 18                   		bgtu	.L59
 451:../src/wolfcrypt/src/hmac.c ****                 if (key != NULL) {
 581                             		.loc 2 451 20
 582 027d ED A5 08                		mov.L	32[r10], r5
 583 0280 61 05                   		cmp	#0, r5
 584 0282 20 6F                   		beq	.L80
 452:../src/wolfcrypt/src/hmac.c ****                     XMEMCPY(ip, key, length);
 585                             		.loc 2 452 21
 586 0284 ED A3 09                		mov.L	36[r10], r3
 587 0287 ED A2 08                		mov.L	32[r10], r2
 588 028a ED A1 04                		mov.L	16[r10], r1
 589 028d 05 00 00 00             		bsr	_memcpy
 453:../src/wolfcrypt/src/hmac.c ****                 }
 454:../src/wolfcrypt/src/hmac.c ****             }
 455:../src/wolfcrypt/src/hmac.c ****             else {
 456:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha512Update(&hmac->hash.sha512, key, length);
 457:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 458:../src/wolfcrypt/src/hmac.c ****                     break;
 459:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha512Final(&hmac->hash.sha512, ip);
 460:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 461:../src/wolfcrypt/src/hmac.c ****                     break;
 462:../src/wolfcrypt/src/hmac.c **** 
 463:../src/wolfcrypt/src/hmac.c ****                 length = WC_SHA512_DIGEST_SIZE;
 464:../src/wolfcrypt/src/hmac.c ****             }
 465:../src/wolfcrypt/src/hmac.c ****             break;
 590                             		.loc 2 465 13
 591 0291 2E 60                   		bra	.L80
 592                             	.L59:
 456:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 593                             		.loc 2 456 23
 594 0293 ED A5 06                		mov.L	24[r10], r5
 595 0296 ED A3 09                		mov.L	36[r10], r3
 596 0299 ED A2 08                		mov.L	32[r10], r2
 597 029c EF 51                   		mov.L	r5, r1
 598 029e 05 00 00 00             		bsr	_wc_Sha512Update
 599 02a2 E7 A1 02                		mov.L	r1, 8[r10]
 457:../src/wolfcrypt/src/hmac.c ****                     break;
 600                             		.loc 2 457 20
 601 02a5 ED A5 02                		mov.L	8[r10], r5
 602 02a8 61 05                   		cmp	#0, r5
 603 02aa 21 49                   		bne	.L81
 459:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 604                             		.loc 2 459 23
 605 02ac ED A5 06                		mov.L	24[r10], r5
 606 02af ED A2 04                		mov.L	16[r10], r2
 607 02b2 EF 51                   		mov.L	r5, r1
 608 02b4 05 00 00 00             		bsr	_wc_Sha512Final
 609 02b8 E7 A1 02                		mov.L	r1, 8[r10]
 460:../src/wolfcrypt/src/hmac.c ****                     break;
 610                             		.loc 2 460 20
 611 02bb ED A5 02                		mov.L	8[r10], r5
 612 02be 61 05                   		cmp	#0, r5
 613 02c0 21 36                   		bne	.L82
 463:../src/wolfcrypt/src/hmac.c ****             }
 614                             		.loc 2 463 24
 615 02c2 F9 A6 09 40             		mov.L	#0x40, 36[r10]
 616                             		.loc 2 465 13
 617 02c6 2E 2B                   		bra	.L80
 618                             	.L35:
 466:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA512 */
 467:../src/wolfcrypt/src/hmac.c **** 
 468:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA3
 469:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_224
 470:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_224:
 471:../src/wolfcrypt/src/hmac.c ****             hmac_block_size = WC_SHA3_224_BLOCK_SIZE;
 472:../src/wolfcrypt/src/hmac.c ****             if (length <= WC_SHA3_224_BLOCK_SIZE) {
 473:../src/wolfcrypt/src/hmac.c ****                 if (key != NULL) {
 474:../src/wolfcrypt/src/hmac.c ****                     XMEMCPY(ip, key, length);
 475:../src/wolfcrypt/src/hmac.c ****                 }
 476:../src/wolfcrypt/src/hmac.c ****             }
 477:../src/wolfcrypt/src/hmac.c ****             else {
 478:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha3_224_Update(&hmac->hash.sha3, key, length);
 479:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 480:../src/wolfcrypt/src/hmac.c ****                     break;
 481:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha3_224_Final(&hmac->hash.sha3, ip);
 482:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 483:../src/wolfcrypt/src/hmac.c ****                     break;
 484:../src/wolfcrypt/src/hmac.c **** 
 485:../src/wolfcrypt/src/hmac.c ****                 length = WC_SHA3_224_DIGEST_SIZE;
 486:../src/wolfcrypt/src/hmac.c ****             }
 487:../src/wolfcrypt/src/hmac.c ****             break;
 488:../src/wolfcrypt/src/hmac.c ****     #endif
 489:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_256
 490:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_256:
 491:../src/wolfcrypt/src/hmac.c ****             hmac_block_size = WC_SHA3_256_BLOCK_SIZE;
 492:../src/wolfcrypt/src/hmac.c ****             if (length <= WC_SHA3_256_BLOCK_SIZE) {
 493:../src/wolfcrypt/src/hmac.c ****                 if (key != NULL) {
 494:../src/wolfcrypt/src/hmac.c ****                     XMEMCPY(ip, key, length);
 495:../src/wolfcrypt/src/hmac.c ****                 }
 496:../src/wolfcrypt/src/hmac.c ****             }
 497:../src/wolfcrypt/src/hmac.c ****             else {
 498:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha3_256_Update(&hmac->hash.sha3, key, length);
 499:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 500:../src/wolfcrypt/src/hmac.c ****                     break;
 501:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha3_256_Final(&hmac->hash.sha3, ip);
 502:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 503:../src/wolfcrypt/src/hmac.c ****                     break;
 504:../src/wolfcrypt/src/hmac.c **** 
 505:../src/wolfcrypt/src/hmac.c ****                 length = WC_SHA3_256_DIGEST_SIZE;
 506:../src/wolfcrypt/src/hmac.c ****             }
 507:../src/wolfcrypt/src/hmac.c ****             break;
 508:../src/wolfcrypt/src/hmac.c ****     #endif
 509:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_384
 510:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_384:
 511:../src/wolfcrypt/src/hmac.c ****             hmac_block_size = WC_SHA3_384_BLOCK_SIZE;
 512:../src/wolfcrypt/src/hmac.c ****             if (length <= WC_SHA3_384_BLOCK_SIZE) {
 513:../src/wolfcrypt/src/hmac.c ****                 if (key != NULL) {
 514:../src/wolfcrypt/src/hmac.c ****                     XMEMCPY(ip, key, length);
 515:../src/wolfcrypt/src/hmac.c ****                 }
 516:../src/wolfcrypt/src/hmac.c ****             }
 517:../src/wolfcrypt/src/hmac.c ****             else {
 518:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha3_384_Update(&hmac->hash.sha3, key, length);
 519:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 520:../src/wolfcrypt/src/hmac.c ****                     break;
 521:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha3_384_Final(&hmac->hash.sha3, ip);
 522:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 523:../src/wolfcrypt/src/hmac.c ****                     break;
 524:../src/wolfcrypt/src/hmac.c **** 
 525:../src/wolfcrypt/src/hmac.c ****                 length = WC_SHA3_384_DIGEST_SIZE;
 526:../src/wolfcrypt/src/hmac.c ****             }
 527:../src/wolfcrypt/src/hmac.c ****             break;
 528:../src/wolfcrypt/src/hmac.c ****     #endif
 529:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_512
 530:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_512:
 531:../src/wolfcrypt/src/hmac.c ****             hmac_block_size = WC_SHA3_512_BLOCK_SIZE;
 532:../src/wolfcrypt/src/hmac.c ****             if (length <= WC_SHA3_512_BLOCK_SIZE) {
 533:../src/wolfcrypt/src/hmac.c ****                 if (key != NULL) {
 534:../src/wolfcrypt/src/hmac.c ****                     XMEMCPY(ip, key, length);
 535:../src/wolfcrypt/src/hmac.c ****                 }
 536:../src/wolfcrypt/src/hmac.c ****             }
 537:../src/wolfcrypt/src/hmac.c ****             else {
 538:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha3_512_Update(&hmac->hash.sha3, key, length);
 539:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 540:../src/wolfcrypt/src/hmac.c ****                     break;
 541:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha3_512_Final(&hmac->hash.sha3, ip);
 542:../src/wolfcrypt/src/hmac.c ****                 if (ret != 0)
 543:../src/wolfcrypt/src/hmac.c ****                     break;
 544:../src/wolfcrypt/src/hmac.c **** 
 545:../src/wolfcrypt/src/hmac.c ****                 length = WC_SHA3_512_DIGEST_SIZE;
 546:../src/wolfcrypt/src/hmac.c ****             }
 547:../src/wolfcrypt/src/hmac.c ****             break;
 548:../src/wolfcrypt/src/hmac.c ****     #endif
 549:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA3 */
 550:../src/wolfcrypt/src/hmac.c **** 
 551:../src/wolfcrypt/src/hmac.c ****         default:
 552:../src/wolfcrypt/src/hmac.c ****             return BAD_FUNC_ARG;
 619                             		.loc 2 552 20
 620 02c8 FB 5A 53 FF             		mov.L	#-173, r5
 621 02cc 38 96 00                		bra	.L28
 622                             	.L68:
 362:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_MD5 */
 623                             		.loc 2 362 13
 624 02cf 03                      		nop
 625 02d0 2E 28                   		bra	.L42
 626                             	.L69:
 356:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Md5Final(&hmac->hash.md5, ip);
 627                             		.loc 2 356 21
 628 02d2 03                      		nop
 629 02d3 2E 25                   		bra	.L42
 630                             	.L70:
 359:../src/wolfcrypt/src/hmac.c ****                 length = WC_MD5_DIGEST_SIZE;
 631                             		.loc 2 359 21
 632 02d5 03                      		nop
 633 02d6 2E 22                   		bra	.L42
 634                             	.L71:
 383:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA */
 635                             		.loc 2 383 13
 636 02d8 03                      		nop
 637 02d9 2E 1F                   		bra	.L42
 638                             	.L72:
 376:../src/wolfcrypt/src/hmac.c ****                 ret = wc_ShaFinal(&hmac->hash.sha, ip);
 639                             		.loc 2 376 21
 640 02db 03                      		nop
 641 02dc 2E 1C                   		bra	.L42
 642                             	.L73:
 379:../src/wolfcrypt/src/hmac.c **** 
 643                             		.loc 2 379 21
 644 02de 03                      		nop
 645 02df 2E 19                   		bra	.L42
 646                             	.L74:
 424:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA256 */
 647                             		.loc 2 424 13
 648 02e1 03                      		nop
 649 02e2 2E 16                   		bra	.L42
 650                             	.L75:
 417:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha256Final(&hmac->hash.sha256, ip);
 651                             		.loc 2 417 21
 652 02e4 03                      		nop
 653 02e5 2E 13                   		bra	.L42
 654                             	.L76:
 420:../src/wolfcrypt/src/hmac.c **** 
 655                             		.loc 2 420 21
 656 02e7 03                      		nop
 657 02e8 2E 10                   		bra	.L42
 658                             	.L77:
 445:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA384 */
 659                             		.loc 2 445 13
 660 02ea 03                      		nop
 661 02eb 2E 0D                   		bra	.L42
 662                             	.L78:
 438:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha384Final(&hmac->hash.sha384, ip);
 663                             		.loc 2 438 21
 664 02ed 03                      		nop
 665 02ee 0A                      		bra	.L42
 666                             	.L79:
 441:../src/wolfcrypt/src/hmac.c **** 
 667                             		.loc 2 441 21
 668 02ef 03                      		nop
 669 02f0 08                      		bra	.L42
 670                             	.L80:
 465:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA512 */
 671                             		.loc 2 465 13
 672 02f1 03                      		nop
 673 02f2 0E                      		bra	.L42
 674                             	.L81:
 458:../src/wolfcrypt/src/hmac.c ****                 ret = wc_Sha512Final(&hmac->hash.sha512, ip);
 675                             		.loc 2 458 21
 676 02f3 03                      		nop
 677 02f4 2E 04                   		bra	.L42
 678                             	.L82:
 461:../src/wolfcrypt/src/hmac.c **** 
 679                             		.loc 2 461 21
 680 02f6 03                      		nop
 681 02f7 03                      		.balign 8,3,1
 682                             	.L42:
 553:../src/wolfcrypt/src/hmac.c ****     }
 554:../src/wolfcrypt/src/hmac.c **** 
 555:../src/wolfcrypt/src/hmac.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_HMAC)
 556:../src/wolfcrypt/src/hmac.c ****     if (hmac->asyncDev.marker == WOLFSSL_ASYNC_MARKER_HMAC) {
 557:../src/wolfcrypt/src/hmac.c ****     #if defined(HAVE_INTEL_QA) || defined(HAVE_CAVIUM)
 558:../src/wolfcrypt/src/hmac.c ****         #ifdef HAVE_INTEL_QA
 559:../src/wolfcrypt/src/hmac.c ****         if (IntelQaHmacGetType(hmac->macType, NULL) == 0)
 560:../src/wolfcrypt/src/hmac.c ****         #endif
 561:../src/wolfcrypt/src/hmac.c ****         {
 562:../src/wolfcrypt/src/hmac.c ****             if (length > hmac_block_size)
 563:../src/wolfcrypt/src/hmac.c ****                 length = hmac_block_size;
 564:../src/wolfcrypt/src/hmac.c ****             /* update key length */
 565:../src/wolfcrypt/src/hmac.c ****             hmac->keyLen = (word16)length;
 566:../src/wolfcrypt/src/hmac.c **** 
 567:../src/wolfcrypt/src/hmac.c ****             return ret;
 568:../src/wolfcrypt/src/hmac.c ****         }
 569:../src/wolfcrypt/src/hmac.c ****         /* no need to pad below */
 570:../src/wolfcrypt/src/hmac.c ****     #endif
 571:../src/wolfcrypt/src/hmac.c ****     }
 572:../src/wolfcrypt/src/hmac.c **** #endif
 573:../src/wolfcrypt/src/hmac.c **** 
 574:../src/wolfcrypt/src/hmac.c ****     if (ret == 0) {
 683                             		.loc 2 574 8
 684 02f8 ED A5 02                		mov.L	8[r10], r5
 685 02fb 61 05                   		cmp	#0, r5
 686 02fd 21 62                   		bne	.L64
 575:../src/wolfcrypt/src/hmac.c ****         if (length < hmac_block_size)
 687                             		.loc 2 575 12
 688 02ff ED A4 09                		mov.L	36[r10], r4
 689 0302 ED A5 01                		mov.L	4[r10], r5
 690 0305 47 54                   		cmp	r5, r4
 691 0307 22 1C                   		bgeu	.L65
 576:../src/wolfcrypt/src/hmac.c ****             XMEMSET(ip + length, 0, hmac_block_size - length);
 692                             		.loc 2 576 13
 693 0309 ED A5 04                		mov.L	16[r10], r5
 694 030c EF 51                   		mov.L	r5, r1
 695 030e 06 89 A1 09             		add	36[r10].L, r1
 696 0312 ED A4 01                		mov.L	4[r10], r4
 697 0315 ED A5 09                		mov.L	36[r10], r5
 698 0318 FF 05 54                		sub	r5, r4, r5
 699 031b EF 53                   		mov.L	r5, r3
 700 031d 66 02                   		mov.L	#0, r2
 701 031f 05 00 00 00             		bsr	_memset
 702                             	.L65:
 577:../src/wolfcrypt/src/hmac.c **** 
 578:../src/wolfcrypt/src/hmac.c ****         for(i = 0; i < hmac_block_size; i++) {
 703                             		.loc 2 578 15
 704 0323 F8 A6 00                		mov.L	#0, [r10]
 705                             		.loc 2 578 9
 706 0326 2E 30                   		bra	.L66
 707                             	.L67:
 579:../src/wolfcrypt/src/hmac.c ****             op[i] = ip[i] ^ OPAD;
 708                             		.loc 2 579 23 discriminator 3
 709 0328 ED A5 04                		mov.L	16[r10], r5
 710 032b 06 88 A5                		add	[r10].L, r5
 711 032e CC 54                   		mov.B	[r5], r4
 712                             		.loc 2 579 15 discriminator 3
 713 0330 ED A5 05                		mov.L	20[r10], r5
 714 0333 06 88 A5                		add	[r10].L, r5
 715                             		.loc 2 579 19 discriminator 3
 716 0336 FD 74 D4 5C             		xor	#0x5c, r4
 717 033a C3 54                   		mov.B	r4, [r5]
 580:../src/wolfcrypt/src/hmac.c ****             ip[i] ^= IPAD;
 718                             		.loc 2 580 19 discriminator 3
 719 033c ED A5 04                		mov.L	16[r10], r5
 720 033f 06 88 A5                		add	[r10].L, r5
 721 0342 CC 54                   		mov.B	[r5], r4
 722 0344 ED A5 04                		mov.L	16[r10], r5
 723 0347 06 88 A5                		add	[r10].L, r5
 724 034a FD 74 D4 36             		xor	#54, r4
 725 034e C3 54                   		mov.B	r4, [r5]
 578:../src/wolfcrypt/src/hmac.c ****             op[i] = ip[i] ^ OPAD;
 726                             		.loc 2 578 42 discriminator 3
 727 0350 EC A5                   		mov.L	[r10], r5
 728 0352 62 15                   		add	#1, r5
 729 0354 E3 A5                   		mov.L	r5, [r10]
 730                             	.L66:
 578:../src/wolfcrypt/src/hmac.c ****             op[i] = ip[i] ^ OPAD;
 731                             		.loc 2 578 9 discriminator 1
 732 0356 EC A4                   		mov.L	[r10], r4
 733 0358 ED A5 01                		mov.L	4[r10], r5
 734 035b 47 54                   		cmp	r5, r4
 735 035d 23 CB                   		bltu	.L67
 736                             	.L64:
 581:../src/wolfcrypt/src/hmac.c ****         }
 582:../src/wolfcrypt/src/hmac.c ****     }
 583:../src/wolfcrypt/src/hmac.c **** 
 584:../src/wolfcrypt/src/hmac.c ****     return ret;
 737                             		.loc 2 584 12
 738 035f ED A5 02                		mov.L	8[r10], r5
 739                             		.balign 8,3,1
 740                             	.L28:
 585:../src/wolfcrypt/src/hmac.c **** }
 741                             		.loc 2 585 1
 742 0362 EF 51                   		mov.L	r5, r1
 743 0364 3F AA 0B                		rtsd	#44, r10-r10
 744                             	.LFE45:
 746 0367 03                      		.section	.text.HmacKeyInnerHash,"ax",@progbits
 748                             	_HmacKeyInnerHash:
 749                             	.LFB46:
 586:../src/wolfcrypt/src/hmac.c **** 
 587:../src/wolfcrypt/src/hmac.c **** 
 588:../src/wolfcrypt/src/hmac.c **** static int HmacKeyInnerHash(Hmac* hmac)
 589:../src/wolfcrypt/src/hmac.c **** {
 750                             		.loc 2 589 1
 751 0000 7E AA                   		push.l	r10
 752                             	.LCFI8:
 753 0002 71 0A F8                		add	#-8, r0, r10
 754                             	.LCFI9:
 755 0005 EF A0                   		mov.L	r10, r0
 756 0007 E7 A1 01                		mov.L	r1, 4[r10]
 590:../src/wolfcrypt/src/hmac.c ****     int ret = 0;
 757                             		.loc 2 590 9
 758 000a F8 A6 00                		mov.L	#0, [r10]
 591:../src/wolfcrypt/src/hmac.c **** 
 592:../src/wolfcrypt/src/hmac.c ****     switch (hmac->macType) {
 759                             		.loc 2 592 17
 760 000d ED A5 01                		mov.L	4[r10], r5
 761 0010 CE 55 1C 02             		mov.B	540[r5], r5
 762 0014 5B 55                   		movu.B	r5, r5
 763                             		.loc 2 592 5
 764 0016 61 65                   		cmp	#6, r5
 765 0018 20 4D                   		beq	.L84
 766 001a 61 65                   		cmp	#6, r5
 767 001c 2A 0D                   		bgt	.L85
 768 001e 61 35                   		cmp	#3, r5
 769 0020 20 13                   		beq	.L86
 770 0022 61 45                   		cmp	#4, r5
 771 0024 20 28                   		beq	.L87
 593:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_MD5
 594:../src/wolfcrypt/src/hmac.c ****         case WC_MD5:
 595:../src/wolfcrypt/src/hmac.c ****             ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->ipad,
 596:../src/wolfcrypt/src/hmac.c ****                                                              WC_MD5_BLOCK_SIZE);
 597:../src/wolfcrypt/src/hmac.c ****             break;
 598:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_MD5 */
 599:../src/wolfcrypt/src/hmac.c **** 
 600:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA
 601:../src/wolfcrypt/src/hmac.c ****         case WC_SHA:
 602:../src/wolfcrypt/src/hmac.c ****             ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->ipad,
 603:../src/wolfcrypt/src/hmac.c ****                                                              WC_SHA_BLOCK_SIZE);
 604:../src/wolfcrypt/src/hmac.c ****             break;
 605:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA */
 606:../src/wolfcrypt/src/hmac.c **** 
 607:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA224
 608:../src/wolfcrypt/src/hmac.c ****         case WC_SHA224:
 609:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha224Update(&hmac->hash.sha224, (byte*)hmac->ipad,
 610:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA224_BLOCK_SIZE);
 611:../src/wolfcrypt/src/hmac.c ****             break;
 612:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA224 */
 613:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA256
 614:../src/wolfcrypt/src/hmac.c ****         case WC_SHA256:
 615:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->ipad,
 616:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA256_BLOCK_SIZE);
 617:../src/wolfcrypt/src/hmac.c ****             break;
 618:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA256 */
 619:../src/wolfcrypt/src/hmac.c **** 
 620:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA384
 621:../src/wolfcrypt/src/hmac.c ****         case WC_SHA384:
 622:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->ipad,
 623:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA384_BLOCK_SIZE);
 624:../src/wolfcrypt/src/hmac.c ****             break;
 625:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA384 */
 626:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA512
 627:../src/wolfcrypt/src/hmac.c ****         case WC_SHA512:
 628:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->ipad,
 629:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA512_BLOCK_SIZE);
 630:../src/wolfcrypt/src/hmac.c ****             break;
 631:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA512 */
 632:../src/wolfcrypt/src/hmac.c **** 
 633:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA3
 634:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_224
 635:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_224:
 636:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_224_Update(&hmac->hash.sha3, (byte*)hmac->ipad,
 637:../src/wolfcrypt/src/hmac.c ****                                                         WC_SHA3_224_BLOCK_SIZE);
 638:../src/wolfcrypt/src/hmac.c ****             break;
 639:../src/wolfcrypt/src/hmac.c ****     #endif
 640:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_256
 641:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_256:
 642:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_256_Update(&hmac->hash.sha3, (byte*)hmac->ipad,
 643:../src/wolfcrypt/src/hmac.c ****                                                         WC_SHA3_256_BLOCK_SIZE);
 644:../src/wolfcrypt/src/hmac.c ****             break;
 645:../src/wolfcrypt/src/hmac.c ****     #endif
 646:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_384
 647:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_384:
 648:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_384_Update(&hmac->hash.sha3, (byte*)hmac->ipad,
 649:../src/wolfcrypt/src/hmac.c ****                                                         WC_SHA3_384_BLOCK_SIZE);
 650:../src/wolfcrypt/src/hmac.c ****             break;
 651:../src/wolfcrypt/src/hmac.c ****     #endif
 652:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_512
 653:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_512:
 654:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_512_Update(&hmac->hash.sha3, (byte*)hmac->ipad,
 655:../src/wolfcrypt/src/hmac.c ****                                                         WC_SHA3_512_BLOCK_SIZE);
 656:../src/wolfcrypt/src/hmac.c ****             break;
 657:../src/wolfcrypt/src/hmac.c ****     #endif
 658:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA3 */
 659:../src/wolfcrypt/src/hmac.c **** 
 660:../src/wolfcrypt/src/hmac.c ****         default:
 661:../src/wolfcrypt/src/hmac.c ****             break;
 772                             		.loc 2 661 13
 773 0026 38 8A 00                		bra	.L91
 774                             	.L85:
 592:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_MD5
 775                             		.loc 2 592 5
 776 0029 61 75                   		cmp	#7, r5
 777 002b 20 53                   		beq	.L89
 778 002d 61 85                   		cmp	#8, r5
 779 002f 20 68                   		beq	.L90
 780                             		.loc 2 661 13
 781 0031 2E 7F                   		bra	.L91
 782                             	.L86:
 595:../src/wolfcrypt/src/hmac.c ****                                                              WC_MD5_BLOCK_SIZE);
 783                             		.loc 2 595 19
 784 0033 ED A4 01                		mov.L	4[r10], r4
 595:../src/wolfcrypt/src/hmac.c ****                                                              WC_MD5_BLOCK_SIZE);
 785                             		.loc 2 595 56
 786 0036 ED A5 01                		mov.L	4[r10], r5
 787 0039 72 55 D8 00             		add	#0xd8, r5
 595:../src/wolfcrypt/src/hmac.c ****                                                              WC_MD5_BLOCK_SIZE);
 788                             		.loc 2 595 19
 789 003d 75 43 40                		mov.L	#0x40, r3
 790 0040 EF 52                   		mov.L	r5, r2
 791 0042 EF 41                   		mov.L	r4, r1
 792 0044 05 00 00 00             		bsr	_wc_Md5Update
 793 0048 E3 A1                   		mov.L	r1, [r10]
 597:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_MD5 */
 794                             		.loc 2 597 13
 795 004a 2E 66                   		bra	.L91
 796                             	.L87:
 602:../src/wolfcrypt/src/hmac.c ****                                                              WC_SHA_BLOCK_SIZE);
 797                             		.loc 2 602 19
 798 004c ED A4 01                		mov.L	4[r10], r4
 602:../src/wolfcrypt/src/hmac.c ****                                                              WC_SHA_BLOCK_SIZE);
 799                             		.loc 2 602 56
 800 004f ED A5 01                		mov.L	4[r10], r5
 801 0052 72 55 D8 00             		add	#0xd8, r5
 602:../src/wolfcrypt/src/hmac.c ****                                                              WC_SHA_BLOCK_SIZE);
 802                             		.loc 2 602 19
 803 0056 75 43 40                		mov.L	#0x40, r3
 804 0059 EF 52                   		mov.L	r5, r2
 805 005b EF 41                   		mov.L	r4, r1
 806 005d 05 00 00 00             		bsr	_wc_ShaUpdate
 807 0061 E3 A1                   		mov.L	r1, [r10]
 604:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA */
 808                             		.loc 2 604 13
 809 0063 2E 4D                   		bra	.L91
 810                             	.L84:
 615:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA256_BLOCK_SIZE);
 811                             		.loc 2 615 19
 812 0065 ED A4 01                		mov.L	4[r10], r4
 615:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA256_BLOCK_SIZE);
 813                             		.loc 2 615 62
 814 0068 ED A5 01                		mov.L	4[r10], r5
 815 006b 72 55 D8 00             		add	#0xd8, r5
 615:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA256_BLOCK_SIZE);
 816                             		.loc 2 615 19
 817 006f 75 43 40                		mov.L	#0x40, r3
 818 0072 EF 52                   		mov.L	r5, r2
 819 0074 EF 41                   		mov.L	r4, r1
 820 0076 05 00 00 00             		bsr	_wc_Sha256Update
 821 007a E3 A1                   		mov.L	r1, [r10]
 617:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA256 */
 822                             		.loc 2 617 13
 823 007c 2E 34                   		bra	.L91
 824                             	.L89:
 622:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA384_BLOCK_SIZE);
 825                             		.loc 2 622 19
 826 007e ED A4 01                		mov.L	4[r10], r4
 622:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA384_BLOCK_SIZE);
 827                             		.loc 2 622 62
 828 0081 ED A5 01                		mov.L	4[r10], r5
 829 0084 72 55 D8 00             		add	#0xd8, r5
 622:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA384_BLOCK_SIZE);
 830                             		.loc 2 622 19
 831 0088 75 43 80                		mov.L	#0x80, r3
 832 008b EF 52                   		mov.L	r5, r2
 833 008d EF 41                   		mov.L	r4, r1
 834 008f 05 00 00 00             		bsr	_wc_Sha384Update
 835 0093 E3 A1                   		mov.L	r1, [r10]
 624:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA384 */
 836                             		.loc 2 624 13
 837 0095 2E 1B                   		bra	.L91
 838                             	.L90:
 628:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA512_BLOCK_SIZE);
 839                             		.loc 2 628 19
 840 0097 ED A4 01                		mov.L	4[r10], r4
 628:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA512_BLOCK_SIZE);
 841                             		.loc 2 628 62
 842 009a ED A5 01                		mov.L	4[r10], r5
 843 009d 72 55 D8 00             		add	#0xd8, r5
 628:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA512_BLOCK_SIZE);
 844                             		.loc 2 628 19
 845 00a1 75 43 80                		mov.L	#0x80, r3
 846 00a4 EF 52                   		mov.L	r5, r2
 847 00a6 EF 41                   		mov.L	r4, r1
 848 00a8 05 00 00 00             		bsr	_wc_Sha512Update
 849 00ac E3 A1                   		mov.L	r1, [r10]
 630:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA512 */
 850                             		.loc 2 630 13
 851 00ae 03                      		nop
 852 00af 03                      		.balign 8,3,1
 853                             	.L91:
 662:../src/wolfcrypt/src/hmac.c ****     }
 663:../src/wolfcrypt/src/hmac.c **** 
 664:../src/wolfcrypt/src/hmac.c ****     if (ret == 0)
 854                             		.loc 2 664 8
 855 00b0 EC A5                   		mov.L	[r10], r5
 856 00b2 61 05                   		cmp	#0, r5
 857 00b4 19                      		bne	.L92
 665:../src/wolfcrypt/src/hmac.c ****         hmac->innerHashKeyed = WC_HMAC_INNER_HASH_KEYED_SW;
 858                             		.loc 2 665 30
 859 00b5 ED A5 01                		mov.L	4[r10], r5
 860 00b8 FA 54 1D 02 01          		mov.B	#1, 541[r5]
 861                             	.L92:
 666:../src/wolfcrypt/src/hmac.c **** 
 667:../src/wolfcrypt/src/hmac.c ****     return ret;
 862                             		.loc 2 667 12
 863 00bd EC A5                   		mov.L	[r10], r5
 668:../src/wolfcrypt/src/hmac.c **** }
 864                             		.loc 2 668 1
 865 00bf EF 51                   		mov.L	r5, r1
 866 00c1 3F AA 03                		rtsd	#12, r10-r10
 867                             	.LFE46:
 869 00c4 76 10 01 00             		.section	.text.wc_HmacUpdate,"ax",@progbits
 870                             		.global	_wc_HmacUpdate
 872                             	_wc_HmacUpdate:
 873                             	.LFB47:
 669:../src/wolfcrypt/src/hmac.c **** 
 670:../src/wolfcrypt/src/hmac.c **** 
 671:../src/wolfcrypt/src/hmac.c **** int wc_HmacUpdate(Hmac* hmac, const byte* msg, word32 length)
 672:../src/wolfcrypt/src/hmac.c **** {
 874                             		.loc 2 672 1
 875 0000 7E AA                   		push.l	r10
 876                             	.LCFI10:
 877 0002 71 0A F0                		add	#-16, r0, r10
 878                             	.LCFI11:
 879 0005 EF A0                   		mov.L	r10, r0
 880 0007 E7 A1 01                		mov.L	r1, 4[r10]
 881 000a E7 A2 02                		mov.L	r2, 8[r10]
 882 000d E7 A3 03                		mov.L	r3, 12[r10]
 673:../src/wolfcrypt/src/hmac.c ****     int ret = 0;
 883                             		.loc 2 673 9
 884 0010 F8 A6 00                		mov.L	#0, [r10]
 674:../src/wolfcrypt/src/hmac.c **** 
 675:../src/wolfcrypt/src/hmac.c ****     if (hmac == NULL || (msg == NULL && length > 0)) {
 885                             		.loc 2 675 8
 886 0013 ED A5 01                		mov.L	4[r10], r5
 887 0016 61 05                   		cmp	#0, r5
 888 0018 20 0F                   		beq	.L95
 889                             		.loc 2 675 22 discriminator 1
 890 001a ED A5 02                		mov.L	8[r10], r5
 891 001d 61 05                   		cmp	#0, r5
 892 001f 21 0F                   		bne	.L96
 893                             		.loc 2 675 38 discriminator 2
 894 0021 ED A5 03                		mov.L	12[r10], r5
 895 0024 61 05                   		cmp	#0, r5
 896 0026 10                      		beq	.L96
 897                             	.L95:
 676:../src/wolfcrypt/src/hmac.c ****         return BAD_FUNC_ARG;
 898                             		.loc 2 676 16
 899 0027 FB 5A 53 FF             		mov.L	#-173, r5
 900 002b 38 A8 00                		bra	.L97
 901                             	.L96:
 677:../src/wolfcrypt/src/hmac.c ****     }
 678:../src/wolfcrypt/src/hmac.c **** 
 679:../src/wolfcrypt/src/hmac.c **** #ifdef WOLF_CRYPTO_CB
 680:../src/wolfcrypt/src/hmac.c ****     if (hmac->devId != INVALID_DEVID) {
 681:../src/wolfcrypt/src/hmac.c ****         ret = wc_CryptoCb_Hmac(hmac, hmac->macType, msg, length, NULL);
 682:../src/wolfcrypt/src/hmac.c ****         if (ret != CRYPTOCB_UNAVAILABLE)
 683:../src/wolfcrypt/src/hmac.c ****             return ret;
 684:../src/wolfcrypt/src/hmac.c ****         /* fall-through when unavailable */
 685:../src/wolfcrypt/src/hmac.c ****         ret = 0; /* reset error code */
 686:../src/wolfcrypt/src/hmac.c ****     }
 687:../src/wolfcrypt/src/hmac.c **** #endif
 688:../src/wolfcrypt/src/hmac.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_HMAC)
 689:../src/wolfcrypt/src/hmac.c ****     if (hmac->asyncDev.marker == WOLFSSL_ASYNC_MARKER_HMAC) {
 690:../src/wolfcrypt/src/hmac.c ****     #if defined(HAVE_CAVIUM)
 691:../src/wolfcrypt/src/hmac.c ****         return NitroxHmacUpdate(hmac, msg, length);
 692:../src/wolfcrypt/src/hmac.c ****     #elif defined(HAVE_INTEL_QA)
 693:../src/wolfcrypt/src/hmac.c ****         if (IntelQaHmacGetType(hmac->macType, NULL) == 0) {
 694:../src/wolfcrypt/src/hmac.c ****             return IntelQaHmac(&hmac->asyncDev, hmac->macType,
 695:../src/wolfcrypt/src/hmac.c ****                 (byte*)hmac->ipad, hmac->keyLen, NULL, msg, length);
 696:../src/wolfcrypt/src/hmac.c ****         }
 697:../src/wolfcrypt/src/hmac.c ****     #endif
 698:../src/wolfcrypt/src/hmac.c ****     }
 699:../src/wolfcrypt/src/hmac.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
 700:../src/wolfcrypt/src/hmac.c **** 
 701:../src/wolfcrypt/src/hmac.c ****     if (!hmac->innerHashKeyed) {
 902                             		.loc 2 701 14
 903 002e ED A5 01                		mov.L	4[r10], r5
 904 0031 CE 55 1D 02             		mov.B	541[r5], r5
 905                             		.loc 2 701 8
 906 0035 5B 55                   		movu.B	r5, r5
 907 0037 61 05                   		cmp	#0, r5
 908 0039 21 15                   		bne	.L98
 702:../src/wolfcrypt/src/hmac.c ****         ret = HmacKeyInnerHash(hmac);
 909                             		.loc 2 702 15
 910 003b ED A1 01                		mov.L	4[r10], r1
 911 003e 05 00 00 00             		bsr	_HmacKeyInnerHash
 912 0042 E3 A1                   		mov.L	r1, [r10]
 703:../src/wolfcrypt/src/hmac.c ****         if (ret != 0)
 913                             		.loc 2 703 12
 914 0044 EC A5                   		mov.L	[r10], r5
 915 0046 61 05                   		cmp	#0, r5
 916 0048 16                      		beq	.L98
 704:../src/wolfcrypt/src/hmac.c ****             return ret;
 917                             		.loc 2 704 20
 918 0049 EC A5                   		mov.L	[r10], r5
 919 004b 38 88 00                		bra	.L97
 920                             	.L98:
 705:../src/wolfcrypt/src/hmac.c ****     }
 706:../src/wolfcrypt/src/hmac.c **** 
 707:../src/wolfcrypt/src/hmac.c ****     switch (hmac->macType) {
 921                             		.loc 2 707 17
 922 004e ED A5 01                		mov.L	4[r10], r5
 923 0051 CE 55 1C 02             		mov.B	540[r5], r5
 924 0055 5B 55                   		movu.B	r5, r5
 925                             		.loc 2 707 5
 926 0057 61 65                   		cmp	#6, r5
 927 0059 20 40                   		beq	.L99
 928 005b 61 65                   		cmp	#6, r5
 929 005d 2A 0C                   		bgt	.L100
 930 005f 61 35                   		cmp	#3, r5
 931 0061 20 12                   		beq	.L101
 932 0063 61 45                   		cmp	#4, r5
 933 0065 20 21                   		beq	.L102
 708:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_MD5
 709:../src/wolfcrypt/src/hmac.c ****         case WC_MD5:
 710:../src/wolfcrypt/src/hmac.c ****             ret = wc_Md5Update(&hmac->hash.md5, msg, length);
 711:../src/wolfcrypt/src/hmac.c ****             break;
 712:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_MD5 */
 713:../src/wolfcrypt/src/hmac.c **** 
 714:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA
 715:../src/wolfcrypt/src/hmac.c ****         case WC_SHA:
 716:../src/wolfcrypt/src/hmac.c ****             ret = wc_ShaUpdate(&hmac->hash.sha, msg, length);
 717:../src/wolfcrypt/src/hmac.c ****             break;
 718:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA */
 719:../src/wolfcrypt/src/hmac.c **** 
 720:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA224
 721:../src/wolfcrypt/src/hmac.c ****         case WC_SHA224:
 722:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha224Update(&hmac->hash.sha224, msg, length);
 723:../src/wolfcrypt/src/hmac.c ****             break;
 724:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA224 */
 725:../src/wolfcrypt/src/hmac.c **** 
 726:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA256
 727:../src/wolfcrypt/src/hmac.c ****         case WC_SHA256:
 728:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha256Update(&hmac->hash.sha256, msg, length);
 729:../src/wolfcrypt/src/hmac.c ****             break;
 730:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA256 */
 731:../src/wolfcrypt/src/hmac.c **** 
 732:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA384
 733:../src/wolfcrypt/src/hmac.c ****         case WC_SHA384:
 734:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha384Update(&hmac->hash.sha384, msg, length);
 735:../src/wolfcrypt/src/hmac.c ****             break;
 736:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA384 */
 737:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA512
 738:../src/wolfcrypt/src/hmac.c ****         case WC_SHA512:
 739:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha512Update(&hmac->hash.sha512, msg, length);
 740:../src/wolfcrypt/src/hmac.c ****             break;
 741:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA512 */
 742:../src/wolfcrypt/src/hmac.c **** 
 743:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA3
 744:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_224
 745:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_224:
 746:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_224_Update(&hmac->hash.sha3, msg, length);
 747:../src/wolfcrypt/src/hmac.c ****             break;
 748:../src/wolfcrypt/src/hmac.c ****     #endif
 749:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_256
 750:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_256:
 751:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_256_Update(&hmac->hash.sha3, msg, length);
 752:../src/wolfcrypt/src/hmac.c ****             break;
 753:../src/wolfcrypt/src/hmac.c ****     #endif
 754:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_384
 755:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_384:
 756:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_384_Update(&hmac->hash.sha3, msg, length);
 757:../src/wolfcrypt/src/hmac.c ****             break;
 758:../src/wolfcrypt/src/hmac.c ****     #endif
 759:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_512
 760:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_512:
 761:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_512_Update(&hmac->hash.sha3, msg, length);
 762:../src/wolfcrypt/src/hmac.c ****             break;
 763:../src/wolfcrypt/src/hmac.c ****     #endif
 764:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA3 */
 765:../src/wolfcrypt/src/hmac.c **** 
 766:../src/wolfcrypt/src/hmac.c ****         default:
 767:../src/wolfcrypt/src/hmac.c ****             break;
 934                             		.loc 2 767 13
 935 0067 2E 6A                   		bra	.L106
 936                             	.L100:
 707:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_MD5
 937                             		.loc 2 707 5
 938 0069 61 75                   		cmp	#7, r5
 939 006b 20 41                   		beq	.L104
 940 006d 61 85                   		cmp	#8, r5
 941 006f 20 50                   		beq	.L105
 942                             		.loc 2 767 13
 943 0071 2E 60                   		bra	.L106
 944                             	.L101:
 710:../src/wolfcrypt/src/hmac.c ****             break;
 945                             		.loc 2 710 19
 946 0073 ED A5 01                		mov.L	4[r10], r5
 947 0076 ED A3 03                		mov.L	12[r10], r3
 948 0079 ED A2 02                		mov.L	8[r10], r2
 949 007c EF 51                   		mov.L	r5, r1
 950 007e 05 00 00 00             		bsr	_wc_Md5Update
 951 0082 E3 A1                   		mov.L	r1, [r10]
 711:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_MD5 */
 952                             		.loc 2 711 13
 953 0084 2E 4D                   		bra	.L106
 954                             	.L102:
 716:../src/wolfcrypt/src/hmac.c ****             break;
 955                             		.loc 2 716 19
 956 0086 ED A5 01                		mov.L	4[r10], r5
 957 0089 ED A3 03                		mov.L	12[r10], r3
 958 008c ED A2 02                		mov.L	8[r10], r2
 959 008f EF 51                   		mov.L	r5, r1
 960 0091 05 00 00 00             		bsr	_wc_ShaUpdate
 961 0095 E3 A1                   		mov.L	r1, [r10]
 717:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA */
 962                             		.loc 2 717 13
 963 0097 2E 3A                   		bra	.L106
 964                             	.L99:
 728:../src/wolfcrypt/src/hmac.c ****             break;
 965                             		.loc 2 728 19
 966 0099 ED A5 01                		mov.L	4[r10], r5
 967 009c ED A3 03                		mov.L	12[r10], r3
 968 009f ED A2 02                		mov.L	8[r10], r2
 969 00a2 EF 51                   		mov.L	r5, r1
 970 00a4 05 00 00 00             		bsr	_wc_Sha256Update
 971 00a8 E3 A1                   		mov.L	r1, [r10]
 729:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA256 */
 972                             		.loc 2 729 13
 973 00aa 2E 27                   		bra	.L106
 974                             	.L104:
 734:../src/wolfcrypt/src/hmac.c ****             break;
 975                             		.loc 2 734 19
 976 00ac ED A5 01                		mov.L	4[r10], r5
 977 00af ED A3 03                		mov.L	12[r10], r3
 978 00b2 ED A2 02                		mov.L	8[r10], r2
 979 00b5 EF 51                   		mov.L	r5, r1
 980 00b7 05 00 00 00             		bsr	_wc_Sha384Update
 981 00bb E3 A1                   		mov.L	r1, [r10]
 735:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA384 */
 982                             		.loc 2 735 13
 983 00bd 2E 14                   		bra	.L106
 984                             	.L105:
 739:../src/wolfcrypt/src/hmac.c ****             break;
 985                             		.loc 2 739 19
 986 00bf ED A5 01                		mov.L	4[r10], r5
 987 00c2 ED A3 03                		mov.L	12[r10], r3
 988 00c5 ED A2 02                		mov.L	8[r10], r2
 989 00c8 EF 51                   		mov.L	r5, r1
 990 00ca 05 00 00 00             		bsr	_wc_Sha512Update
 991 00ce E3 A1                   		mov.L	r1, [r10]
 740:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA512 */
 992                             		.loc 2 740 13
 993 00d0 03                      		nop
 994                             		.balign 8,3,1
 995                             	.L106:
 768:../src/wolfcrypt/src/hmac.c ****     }
 769:../src/wolfcrypt/src/hmac.c **** 
 770:../src/wolfcrypt/src/hmac.c ****     return ret;
 996                             		.loc 2 770 12
 997 00d1 EC A5                   		mov.L	[r10], r5
 998                             	.L97:
 771:../src/wolfcrypt/src/hmac.c **** }
 999                             		.loc 2 771 1
 1000 00d3 EF 51                   		mov.L	r5, r1
 1001 00d5 3F AA 05                		rtsd	#20, r10-r10
 1002                             	.LFE47:
 1004                             		.section	.text.wc_HmacFinal,"ax",@progbits
 1005                             		.global	_wc_HmacFinal
 1007                             	_wc_HmacFinal:
 1008                             	.LFB48:
 772:../src/wolfcrypt/src/hmac.c **** 
 773:../src/wolfcrypt/src/hmac.c **** 
 774:../src/wolfcrypt/src/hmac.c **** int wc_HmacFinal(Hmac* hmac, byte* hash)
 775:../src/wolfcrypt/src/hmac.c **** {
 1009                             		.loc 2 775 1
 1010 0000 7E AA                   		push.l	r10
 1011                             	.LCFI12:
 1012 0002 71 0A F4                		add	#-12, r0, r10
 1013                             	.LCFI13:
 1014 0005 EF A0                   		mov.L	r10, r0
 1015 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1016 000a E7 A2 02                		mov.L	r2, 8[r10]
 776:../src/wolfcrypt/src/hmac.c ****     int ret;
 777:../src/wolfcrypt/src/hmac.c **** 
 778:../src/wolfcrypt/src/hmac.c ****     if (hmac == NULL || hash == NULL) {
 1017                             		.loc 2 778 8
 1018 000d ED A5 01                		mov.L	4[r10], r5
 1019 0010 61 05                   		cmp	#0, r5
 1020 0012 17                      		beq	.L108
 1021                             		.loc 2 778 22 discriminator 1
 1022 0013 ED A5 02                		mov.L	8[r10], r5
 1023 0016 61 05                   		cmp	#0, r5
 1024 0018 18                      		bne	.L109
 1025                             	.L108:
 779:../src/wolfcrypt/src/hmac.c ****         return BAD_FUNC_ARG;
 1026                             		.loc 2 779 16
 1027 0019 FB 5A 53 FF             		mov.L	#-173, r5
 1028 001d 38 8E 02                		bra	.L110
 1029                             	.L109:
 780:../src/wolfcrypt/src/hmac.c ****     }
 781:../src/wolfcrypt/src/hmac.c **** 
 782:../src/wolfcrypt/src/hmac.c **** #ifdef WOLF_CRYPTO_CB
 783:../src/wolfcrypt/src/hmac.c ****     if (hmac->devId != INVALID_DEVID) {
 784:../src/wolfcrypt/src/hmac.c ****         ret = wc_CryptoCb_Hmac(hmac, hmac->macType, NULL, 0, hash);
 785:../src/wolfcrypt/src/hmac.c ****         if (ret != CRYPTOCB_UNAVAILABLE)
 786:../src/wolfcrypt/src/hmac.c ****             return ret;
 787:../src/wolfcrypt/src/hmac.c ****         /* fall-through when unavailable */
 788:../src/wolfcrypt/src/hmac.c ****     }
 789:../src/wolfcrypt/src/hmac.c **** #endif
 790:../src/wolfcrypt/src/hmac.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_HMAC)
 791:../src/wolfcrypt/src/hmac.c ****     if (hmac->asyncDev.marker == WOLFSSL_ASYNC_MARKER_HMAC) {
 792:../src/wolfcrypt/src/hmac.c ****         int hashLen = wc_HmacSizeByType(hmac->macType);
 793:../src/wolfcrypt/src/hmac.c ****         if (hashLen <= 0)
 794:../src/wolfcrypt/src/hmac.c ****             return hashLen;
 795:../src/wolfcrypt/src/hmac.c **** 
 796:../src/wolfcrypt/src/hmac.c ****     #if defined(HAVE_CAVIUM)
 797:../src/wolfcrypt/src/hmac.c ****         return NitroxHmacFinal(hmac, hash, hashLen);
 798:../src/wolfcrypt/src/hmac.c ****     #elif defined(HAVE_INTEL_QA)
 799:../src/wolfcrypt/src/hmac.c ****         if (IntelQaHmacGetType(hmac->macType, NULL) == 0) {
 800:../src/wolfcrypt/src/hmac.c ****             return IntelQaHmac(&hmac->asyncDev, hmac->macType,
 801:../src/wolfcrypt/src/hmac.c ****                 (byte*)hmac->ipad, hmac->keyLen, hash, NULL, hashLen);
 802:../src/wolfcrypt/src/hmac.c ****         }
 803:../src/wolfcrypt/src/hmac.c ****     #endif
 804:../src/wolfcrypt/src/hmac.c ****     }
 805:../src/wolfcrypt/src/hmac.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
 806:../src/wolfcrypt/src/hmac.c **** 
 807:../src/wolfcrypt/src/hmac.c ****     if (!hmac->innerHashKeyed) {
 1030                             		.loc 2 807 14
 1031 0020 ED A5 01                		mov.L	4[r10], r5
 1032 0023 CE 55 1D 02             		mov.B	541[r5], r5
 1033                             		.loc 2 807 8
 1034 0027 5B 55                   		movu.B	r5, r5
 1035 0029 61 05                   		cmp	#0, r5
 1036 002b 21 15                   		bne	.L111
 808:../src/wolfcrypt/src/hmac.c ****         ret = HmacKeyInnerHash(hmac);
 1037                             		.loc 2 808 15
 1038 002d ED A1 01                		mov.L	4[r10], r1
 1039 0030 05 00 00 00             		bsr	_HmacKeyInnerHash
 1040 0034 E3 A1                   		mov.L	r1, [r10]
 809:../src/wolfcrypt/src/hmac.c ****         if (ret != 0)
 1041                             		.loc 2 809 12
 1042 0036 EC A5                   		mov.L	[r10], r5
 1043 0038 61 05                   		cmp	#0, r5
 1044 003a 16                      		beq	.L111
 810:../src/wolfcrypt/src/hmac.c ****             return ret;
 1045                             		.loc 2 810 20
 1046 003b EC A5                   		mov.L	[r10], r5
 1047 003d 38 6E 02                		bra	.L110
 1048                             	.L111:
 811:../src/wolfcrypt/src/hmac.c ****     }
 812:../src/wolfcrypt/src/hmac.c **** 
 813:../src/wolfcrypt/src/hmac.c ****     switch (hmac->macType) {
 1049                             		.loc 2 813 17
 1050 0040 ED A5 01                		mov.L	4[r10], r5
 1051 0043 CE 55 1C 02             		mov.B	540[r5], r5
 1052 0047 5B 55                   		movu.B	r5, r5
 1053                             		.loc 2 813 5
 1054 0049 61 65                   		cmp	#6, r5
 1055 004b 3A EF 00                		beq	.L112
 1056 004e 61 65                   		cmp	#6, r5
 1057 0050 2A 0D                   		bgt	.L113
 1058 0052 61 35                   		cmp	#3, r5
 1059 0054 20 16                   		beq	.L114
 1060 0056 61 45                   		cmp	#4, r5
 1061 0058 20 7A                   		beq	.L115
 1062 005a 38 14 02                		bra	.L116
 1063                             	.L113:
 1064 005d 61 75                   		cmp	#7, r5
 1065 005f 3A 43 01                		beq	.L117
 1066 0062 61 85                   		cmp	#8, r5
 1067 0064 3A A6 01                		beq	.L118
 1068 0067 38 07 02                		bra	.L116
 1069                             	.L114:
 814:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_MD5
 815:../src/wolfcrypt/src/hmac.c ****         case WC_MD5:
 816:../src/wolfcrypt/src/hmac.c ****             ret = wc_Md5Final(&hmac->hash.md5, (byte*)hmac->innerHash);
 1070                             		.loc 2 816 19
 1071 006a ED A4 01                		mov.L	4[r10], r4
 1072                             		.loc 2 816 55
 1073 006d ED A5 01                		mov.L	4[r10], r5
 1074 0070 72 55 D8 01             		add	#0x1d8, r5
 1075                             		.loc 2 816 19
 1076 0074 EF 52                   		mov.L	r5, r2
 1077 0076 EF 41                   		mov.L	r4, r1
 1078 0078 05 00 00 00             		bsr	_wc_Md5Final
 1079 007c E3 A1                   		mov.L	r1, [r10]
 817:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1080                             		.loc 2 817 16
 1081 007e EC A5                   		mov.L	[r10], r5
 1082 0080 61 05                   		cmp	#0, r5
 1083 0082 3B F2 01                		bne	.L136
 818:../src/wolfcrypt/src/hmac.c ****                 break;
 819:../src/wolfcrypt/src/hmac.c ****             ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->opad,
 1084                             		.loc 2 819 19
 1085 0085 ED A4 01                		mov.L	4[r10], r4
 1086                             		.loc 2 819 56
 1087 0088 ED A5 01                		mov.L	4[r10], r5
 1088 008b 72 55 58 01             		add	#0x158, r5
 1089                             		.loc 2 819 19
 1090 008f 75 43 40                		mov.L	#0x40, r3
 1091 0092 EF 52                   		mov.L	r5, r2
 1092 0094 EF 41                   		mov.L	r4, r1
 1093 0096 05 00 00 00             		bsr	_wc_Md5Update
 1094 009a E3 A1                   		mov.L	r1, [r10]
 820:../src/wolfcrypt/src/hmac.c ****                                                              WC_MD5_BLOCK_SIZE);
 821:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1095                             		.loc 2 821 16
 1096 009c EC A5                   		mov.L	[r10], r5
 1097 009e 61 05                   		cmp	#0, r5
 1098 00a0 3B D7 01                		bne	.L137
 822:../src/wolfcrypt/src/hmac.c ****                 break;
 823:../src/wolfcrypt/src/hmac.c ****             ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->innerHash,
 1099                             		.loc 2 823 19
 1100 00a3 ED A4 01                		mov.L	4[r10], r4
 1101                             		.loc 2 823 56
 1102 00a6 ED A5 01                		mov.L	4[r10], r5
 1103 00a9 72 55 D8 01             		add	#0x1d8, r5
 1104                             		.loc 2 823 19
 1105 00ad 75 43 10                		mov.L	#16, r3
 1106 00b0 EF 52                   		mov.L	r5, r2
 1107 00b2 EF 41                   		mov.L	r4, r1
 1108 00b4 05 00 00 00             		bsr	_wc_Md5Update
 1109 00b8 E3 A1                   		mov.L	r1, [r10]
 824:../src/wolfcrypt/src/hmac.c ****                                                             WC_MD5_DIGEST_SIZE);
 825:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1110                             		.loc 2 825 16
 1111 00ba EC A5                   		mov.L	[r10], r5
 1112 00bc 61 05                   		cmp	#0, r5
 1113 00be 3B BC 01                		bne	.L138
 826:../src/wolfcrypt/src/hmac.c ****                 break;
 827:../src/wolfcrypt/src/hmac.c ****             ret = wc_Md5Final(&hmac->hash.md5, hash);
 1114                             		.loc 2 827 19
 1115 00c1 ED A5 01                		mov.L	4[r10], r5
 1116 00c4 ED A2 02                		mov.L	8[r10], r2
 1117 00c7 EF 51                   		mov.L	r5, r1
 1118 00c9 05 00 00 00             		bsr	_wc_Md5Final
 1119 00cd E3 A1                   		mov.L	r1, [r10]
 828:../src/wolfcrypt/src/hmac.c ****             break;
 1120                             		.loc 2 828 13
 1121 00cf 38 CD 01                		bra	.L120
 1122                             	.L115:
 829:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_MD5 */
 830:../src/wolfcrypt/src/hmac.c **** 
 831:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA
 832:../src/wolfcrypt/src/hmac.c ****         case WC_SHA:
 833:../src/wolfcrypt/src/hmac.c ****             ret = wc_ShaFinal(&hmac->hash.sha, (byte*)hmac->innerHash);
 1123                             		.loc 2 833 19
 1124 00d2 ED A4 01                		mov.L	4[r10], r4
 1125                             		.loc 2 833 55
 1126 00d5 ED A5 01                		mov.L	4[r10], r5
 1127 00d8 72 55 D8 01             		add	#0x1d8, r5
 1128                             		.loc 2 833 19
 1129 00dc EF 52                   		mov.L	r5, r2
 1130 00de EF 41                   		mov.L	r4, r1
 1131 00e0 05 00 00 00             		bsr	_wc_ShaFinal
 1132 00e4 E3 A1                   		mov.L	r1, [r10]
 834:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1133                             		.loc 2 834 16
 1134 00e6 EC A5                   		mov.L	[r10], r5
 1135 00e8 61 05                   		cmp	#0, r5
 1136 00ea 3B 93 01                		bne	.L139
 835:../src/wolfcrypt/src/hmac.c ****                 break;
 836:../src/wolfcrypt/src/hmac.c ****             ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->opad,
 1137                             		.loc 2 836 19
 1138 00ed ED A4 01                		mov.L	4[r10], r4
 1139                             		.loc 2 836 56
 1140 00f0 ED A5 01                		mov.L	4[r10], r5
 1141 00f3 72 55 58 01             		add	#0x158, r5
 1142                             		.loc 2 836 19
 1143 00f7 75 43 40                		mov.L	#0x40, r3
 1144 00fa EF 52                   		mov.L	r5, r2
 1145 00fc EF 41                   		mov.L	r4, r1
 1146 00fe 05 00 00 00             		bsr	_wc_ShaUpdate
 1147 0102 E3 A1                   		mov.L	r1, [r10]
 837:../src/wolfcrypt/src/hmac.c ****                                                              WC_SHA_BLOCK_SIZE);
 838:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1148                             		.loc 2 838 16
 1149 0104 EC A5                   		mov.L	[r10], r5
 1150 0106 61 05                   		cmp	#0, r5
 1151 0108 3B 78 01                		bne	.L140
 839:../src/wolfcrypt/src/hmac.c ****                 break;
 840:../src/wolfcrypt/src/hmac.c ****             ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->innerHash,
 1152                             		.loc 2 840 19
 1153 010b ED A4 01                		mov.L	4[r10], r4
 1154                             		.loc 2 840 56
 1155 010e ED A5 01                		mov.L	4[r10], r5
 1156 0111 72 55 D8 01             		add	#0x1d8, r5
 1157                             		.loc 2 840 19
 1158 0115 75 43 14                		mov.L	#20, r3
 1159 0118 EF 52                   		mov.L	r5, r2
 1160 011a EF 41                   		mov.L	r4, r1
 1161 011c 05 00 00 00             		bsr	_wc_ShaUpdate
 1162 0120 E3 A1                   		mov.L	r1, [r10]
 841:../src/wolfcrypt/src/hmac.c ****                                                             WC_SHA_DIGEST_SIZE);
 842:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1163                             		.loc 2 842 16
 1164 0122 EC A5                   		mov.L	[r10], r5
 1165 0124 61 05                   		cmp	#0, r5
 1166 0126 3B 5D 01                		bne	.L141
 843:../src/wolfcrypt/src/hmac.c ****                 break;
 844:../src/wolfcrypt/src/hmac.c ****             ret = wc_ShaFinal(&hmac->hash.sha, hash);
 1167                             		.loc 2 844 19
 1168 0129 ED A5 01                		mov.L	4[r10], r5
 1169 012c ED A2 02                		mov.L	8[r10], r2
 1170 012f EF 51                   		mov.L	r5, r1
 1171 0131 05 00 00 00             		bsr	_wc_ShaFinal
 1172 0135 E3 A1                   		mov.L	r1, [r10]
 845:../src/wolfcrypt/src/hmac.c ****             break;
 1173                             		.loc 2 845 13
 1174 0137 38 65 01                		bra	.L120
 1175                             	.L112:
 846:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA */
 847:../src/wolfcrypt/src/hmac.c **** 
 848:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA224
 849:../src/wolfcrypt/src/hmac.c ****         case WC_SHA224:
 850:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha224Final(&hmac->hash.sha224, (byte*)hmac->innerHash);
 851:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 852:../src/wolfcrypt/src/hmac.c ****                 break;
 853:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha224Update(&hmac->hash.sha224, (byte*)hmac->opad,
 854:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA224_BLOCK_SIZE);
 855:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 856:../src/wolfcrypt/src/hmac.c ****                 break;
 857:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha224Update(&hmac->hash.sha224, (byte*)hmac->innerHash,
 858:../src/wolfcrypt/src/hmac.c ****                                                          WC_SHA224_DIGEST_SIZE);
 859:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 860:../src/wolfcrypt/src/hmac.c ****                 break;
 861:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha224Final(&hmac->hash.sha224, hash);
 862:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 863:../src/wolfcrypt/src/hmac.c ****                 break;
 864:../src/wolfcrypt/src/hmac.c ****             break;
 865:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA224 */
 866:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA256
 867:../src/wolfcrypt/src/hmac.c ****         case WC_SHA256:
 868:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha256Final(&hmac->hash.sha256, (byte*)hmac->innerHash);
 1176                             		.loc 2 868 19
 1177 013a ED A4 01                		mov.L	4[r10], r4
 1178                             		.loc 2 868 61
 1179 013d ED A5 01                		mov.L	4[r10], r5
 1180 0140 72 55 D8 01             		add	#0x1d8, r5
 1181                             		.loc 2 868 19
 1182 0144 EF 52                   		mov.L	r5, r2
 1183 0146 EF 41                   		mov.L	r4, r1
 1184 0148 05 00 00 00             		bsr	_wc_Sha256Final
 1185 014c E3 A1                   		mov.L	r1, [r10]
 869:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1186                             		.loc 2 869 16
 1187 014e EC A5                   		mov.L	[r10], r5
 1188 0150 61 05                   		cmp	#0, r5
 1189 0152 3B 34 01                		bne	.L142
 870:../src/wolfcrypt/src/hmac.c ****                 break;
 871:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->opad,
 1190                             		.loc 2 871 19
 1191 0155 ED A4 01                		mov.L	4[r10], r4
 1192                             		.loc 2 871 62
 1193 0158 ED A5 01                		mov.L	4[r10], r5
 1194 015b 72 55 58 01             		add	#0x158, r5
 1195                             		.loc 2 871 19
 1196 015f 75 43 40                		mov.L	#0x40, r3
 1197 0162 EF 52                   		mov.L	r5, r2
 1198 0164 EF 41                   		mov.L	r4, r1
 1199 0166 05 00 00 00             		bsr	_wc_Sha256Update
 1200 016a E3 A1                   		mov.L	r1, [r10]
 872:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA256_BLOCK_SIZE);
 873:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1201                             		.loc 2 873 16
 1202 016c EC A5                   		mov.L	[r10], r5
 1203 016e 61 05                   		cmp	#0, r5
 1204 0170 3B 19 01                		bne	.L143
 874:../src/wolfcrypt/src/hmac.c ****                 break;
 875:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->innerHash,
 1205                             		.loc 2 875 19
 1206 0173 ED A4 01                		mov.L	4[r10], r4
 1207                             		.loc 2 875 62
 1208 0176 ED A5 01                		mov.L	4[r10], r5
 1209 0179 72 55 D8 01             		add	#0x1d8, r5
 1210                             		.loc 2 875 19
 1211 017d 75 43 20                		mov.L	#32, r3
 1212 0180 EF 52                   		mov.L	r5, r2
 1213 0182 EF 41                   		mov.L	r4, r1
 1214 0184 05 00 00 00             		bsr	_wc_Sha256Update
 1215 0188 E3 A1                   		mov.L	r1, [r10]
 876:../src/wolfcrypt/src/hmac.c ****                                                          WC_SHA256_DIGEST_SIZE);
 877:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1216                             		.loc 2 877 16
 1217 018a EC A5                   		mov.L	[r10], r5
 1218 018c 61 05                   		cmp	#0, r5
 1219 018e 3B FE 00                		bne	.L144
 878:../src/wolfcrypt/src/hmac.c ****                 break;
 879:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha256Final(&hmac->hash.sha256, hash);
 1220                             		.loc 2 879 19
 1221 0191 ED A5 01                		mov.L	4[r10], r5
 1222 0194 ED A2 02                		mov.L	8[r10], r2
 1223 0197 EF 51                   		mov.L	r5, r1
 1224 0199 05 00 00 00             		bsr	_wc_Sha256Final
 1225 019d E3 A1                   		mov.L	r1, [r10]
 880:../src/wolfcrypt/src/hmac.c ****             break;
 1226                             		.loc 2 880 13
 1227 019f 38 FD 00                		bra	.L120
 1228                             	.L117:
 881:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA256 */
 882:../src/wolfcrypt/src/hmac.c **** 
 883:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA384
 884:../src/wolfcrypt/src/hmac.c ****         case WC_SHA384:
 885:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha384Final(&hmac->hash.sha384, (byte*)hmac->innerHash);
 1229                             		.loc 2 885 19
 1230 01a2 ED A4 01                		mov.L	4[r10], r4
 1231                             		.loc 2 885 61
 1232 01a5 ED A5 01                		mov.L	4[r10], r5
 1233 01a8 72 55 D8 01             		add	#0x1d8, r5
 1234                             		.loc 2 885 19
 1235 01ac EF 52                   		mov.L	r5, r2
 1236 01ae EF 41                   		mov.L	r4, r1
 1237 01b0 05 00 00 00             		bsr	_wc_Sha384Final
 1238 01b4 E3 A1                   		mov.L	r1, [r10]
 886:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1239                             		.loc 2 886 16
 1240 01b6 EC A5                   		mov.L	[r10], r5
 1241 01b8 61 05                   		cmp	#0, r5
 1242 01ba 3B D5 00                		bne	.L145
 887:../src/wolfcrypt/src/hmac.c ****                 break;
 888:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->opad,
 1243                             		.loc 2 888 19
 1244 01bd ED A4 01                		mov.L	4[r10], r4
 1245                             		.loc 2 888 62
 1246 01c0 ED A5 01                		mov.L	4[r10], r5
 1247 01c3 72 55 58 01             		add	#0x158, r5
 1248                             		.loc 2 888 19
 1249 01c7 75 43 80                		mov.L	#0x80, r3
 1250 01ca EF 52                   		mov.L	r5, r2
 1251 01cc EF 41                   		mov.L	r4, r1
 1252 01ce 05 00 00 00             		bsr	_wc_Sha384Update
 1253 01d2 E3 A1                   		mov.L	r1, [r10]
 889:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA384_BLOCK_SIZE);
 890:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1254                             		.loc 2 890 16
 1255 01d4 EC A5                   		mov.L	[r10], r5
 1256 01d6 61 05                   		cmp	#0, r5
 1257 01d8 3B BA 00                		bne	.L146
 891:../src/wolfcrypt/src/hmac.c ****                 break;
 892:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->innerHash,
 1258                             		.loc 2 892 19
 1259 01db ED A4 01                		mov.L	4[r10], r4
 1260                             		.loc 2 892 62
 1261 01de ED A5 01                		mov.L	4[r10], r5
 1262 01e1 72 55 D8 01             		add	#0x1d8, r5
 1263                             		.loc 2 892 19
 1264 01e5 75 43 30                		mov.L	#48, r3
 1265 01e8 EF 52                   		mov.L	r5, r2
 1266 01ea EF 41                   		mov.L	r4, r1
 1267 01ec 05 00 00 00             		bsr	_wc_Sha384Update
 1268 01f0 E3 A1                   		mov.L	r1, [r10]
 893:../src/wolfcrypt/src/hmac.c ****                                                          WC_SHA384_DIGEST_SIZE);
 894:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1269                             		.loc 2 894 16
 1270 01f2 EC A5                   		mov.L	[r10], r5
 1271 01f4 61 05                   		cmp	#0, r5
 1272 01f6 3B 9E 00                		bne	.L147
 895:../src/wolfcrypt/src/hmac.c ****                 break;
 896:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha384Final(&hmac->hash.sha384, hash);
 1273                             		.loc 2 896 19
 1274 01f9 ED A5 01                		mov.L	4[r10], r5
 1275 01fc ED A2 02                		mov.L	8[r10], r2
 1276 01ff EF 51                   		mov.L	r5, r1
 1277 0201 05 00 00 00             		bsr	_wc_Sha384Final
 1278 0205 E3 A1                   		mov.L	r1, [r10]
 897:../src/wolfcrypt/src/hmac.c ****             break;
 1279                             		.loc 2 897 13
 1280 0207 38 95 00                		bra	.L120
 1281                             	.L118:
 898:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA384 */
 899:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA512
 900:../src/wolfcrypt/src/hmac.c ****         case WC_SHA512:
 901:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha512Final(&hmac->hash.sha512, (byte*)hmac->innerHash);
 1282                             		.loc 2 901 19
 1283 020a ED A4 01                		mov.L	4[r10], r4
 1284                             		.loc 2 901 61
 1285 020d ED A5 01                		mov.L	4[r10], r5
 1286 0210 72 55 D8 01             		add	#0x1d8, r5
 1287                             		.loc 2 901 19
 1288 0214 EF 52                   		mov.L	r5, r2
 1289 0216 EF 41                   		mov.L	r4, r1
 1290 0218 05 00 00 00             		bsr	_wc_Sha512Final
 1291 021c E3 A1                   		mov.L	r1, [r10]
 902:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1292                             		.loc 2 902 16
 1293 021e EC A5                   		mov.L	[r10], r5
 1294 0220 61 05                   		cmp	#0, r5
 1295 0222 21 74                   		bne	.L148
 903:../src/wolfcrypt/src/hmac.c ****                 break;
 904:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->opad,
 1296                             		.loc 2 904 19
 1297 0224 ED A4 01                		mov.L	4[r10], r4
 1298                             		.loc 2 904 62
 1299 0227 ED A5 01                		mov.L	4[r10], r5
 1300 022a 72 55 58 01             		add	#0x158, r5
 1301                             		.loc 2 904 19
 1302 022e 75 43 80                		mov.L	#0x80, r3
 1303 0231 EF 52                   		mov.L	r5, r2
 1304 0233 EF 41                   		mov.L	r4, r1
 1305 0235 05 00 00 00             		bsr	_wc_Sha512Update
 1306 0239 E3 A1                   		mov.L	r1, [r10]
 905:../src/wolfcrypt/src/hmac.c ****                                                           WC_SHA512_BLOCK_SIZE);
 906:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1307                             		.loc 2 906 16
 1308 023b EC A5                   		mov.L	[r10], r5
 1309 023d 61 05                   		cmp	#0, r5
 1310 023f 21 59                   		bne	.L149
 907:../src/wolfcrypt/src/hmac.c ****                 break;
 908:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->innerHash,
 1311                             		.loc 2 908 19
 1312 0241 ED A4 01                		mov.L	4[r10], r4
 1313                             		.loc 2 908 62
 1314 0244 ED A5 01                		mov.L	4[r10], r5
 1315 0247 72 55 D8 01             		add	#0x1d8, r5
 1316                             		.loc 2 908 19
 1317 024b 75 43 40                		mov.L	#0x40, r3
 1318 024e EF 52                   		mov.L	r5, r2
 1319 0250 EF 41                   		mov.L	r4, r1
 1320 0252 05 00 00 00             		bsr	_wc_Sha512Update
 1321 0256 E3 A1                   		mov.L	r1, [r10]
 909:../src/wolfcrypt/src/hmac.c ****                                                          WC_SHA512_DIGEST_SIZE);
 910:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1322                             		.loc 2 910 16
 1323 0258 EC A5                   		mov.L	[r10], r5
 1324 025a 61 05                   		cmp	#0, r5
 1325 025c 21 3F                   		bne	.L150
 911:../src/wolfcrypt/src/hmac.c ****                 break;
 912:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha512Final(&hmac->hash.sha512, hash);
 1326                             		.loc 2 912 19
 1327 025e ED A5 01                		mov.L	4[r10], r5
 1328 0261 ED A2 02                		mov.L	8[r10], r2
 1329 0264 EF 51                   		mov.L	r5, r1
 1330 0266 05 00 00 00             		bsr	_wc_Sha512Final
 1331 026a E3 A1                   		mov.L	r1, [r10]
 913:../src/wolfcrypt/src/hmac.c ****             break;
 1332                             		.loc 2 913 13
 1333 026c 2E 30                   		bra	.L120
 1334                             	.L116:
 914:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA512 */
 915:../src/wolfcrypt/src/hmac.c **** 
 916:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA3
 917:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_224
 918:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_224:
 919:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_224_Final(&hmac->hash.sha3, (byte*)hmac->innerHash);
 920:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 921:../src/wolfcrypt/src/hmac.c ****                 break;
 922:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_224_Update(&hmac->hash.sha3, (byte*)hmac->opad,
 923:../src/wolfcrypt/src/hmac.c ****                                                         WC_SHA3_224_BLOCK_SIZE);
 924:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 925:../src/wolfcrypt/src/hmac.c ****                 break;
 926:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_224_Update(&hmac->hash.sha3, (byte*)hmac->innerHash,
 927:../src/wolfcrypt/src/hmac.c ****                                                        WC_SHA3_224_DIGEST_SIZE);
 928:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 929:../src/wolfcrypt/src/hmac.c ****                 break;
 930:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_224_Final(&hmac->hash.sha3, hash);
 931:../src/wolfcrypt/src/hmac.c ****             break;
 932:../src/wolfcrypt/src/hmac.c ****     #endif
 933:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_256
 934:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_256:
 935:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_256_Final(&hmac->hash.sha3, (byte*)hmac->innerHash);
 936:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 937:../src/wolfcrypt/src/hmac.c ****                 break;
 938:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_256_Update(&hmac->hash.sha3, (byte*)hmac->opad,
 939:../src/wolfcrypt/src/hmac.c ****                                                         WC_SHA3_256_BLOCK_SIZE);
 940:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 941:../src/wolfcrypt/src/hmac.c ****                 break;
 942:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_256_Update(&hmac->hash.sha3, (byte*)hmac->innerHash,
 943:../src/wolfcrypt/src/hmac.c ****                                                        WC_SHA3_256_DIGEST_SIZE);
 944:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 945:../src/wolfcrypt/src/hmac.c ****                 break;
 946:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_256_Final(&hmac->hash.sha3, hash);
 947:../src/wolfcrypt/src/hmac.c ****             break;
 948:../src/wolfcrypt/src/hmac.c ****     #endif
 949:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_384
 950:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_384:
 951:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_384_Final(&hmac->hash.sha3, (byte*)hmac->innerHash);
 952:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 953:../src/wolfcrypt/src/hmac.c ****                 break;
 954:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_384_Update(&hmac->hash.sha3, (byte*)hmac->opad,
 955:../src/wolfcrypt/src/hmac.c ****                                                         WC_SHA3_384_BLOCK_SIZE);
 956:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 957:../src/wolfcrypt/src/hmac.c ****                 break;
 958:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_384_Update(&hmac->hash.sha3, (byte*)hmac->innerHash,
 959:../src/wolfcrypt/src/hmac.c ****                                                        WC_SHA3_384_DIGEST_SIZE);
 960:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 961:../src/wolfcrypt/src/hmac.c ****                 break;
 962:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_384_Final(&hmac->hash.sha3, hash);
 963:../src/wolfcrypt/src/hmac.c ****             break;
 964:../src/wolfcrypt/src/hmac.c ****     #endif
 965:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_512
 966:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_512:
 967:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_512_Final(&hmac->hash.sha3, (byte*)hmac->innerHash);
 968:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 969:../src/wolfcrypt/src/hmac.c ****                 break;
 970:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_512_Update(&hmac->hash.sha3, (byte*)hmac->opad,
 971:../src/wolfcrypt/src/hmac.c ****                                                         WC_SHA3_512_BLOCK_SIZE);
 972:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 973:../src/wolfcrypt/src/hmac.c ****                 break;
 974:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_512_Update(&hmac->hash.sha3, (byte*)hmac->innerHash,
 975:../src/wolfcrypt/src/hmac.c ****                                                        WC_SHA3_512_DIGEST_SIZE);
 976:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 977:../src/wolfcrypt/src/hmac.c ****                 break;
 978:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha3_512_Final(&hmac->hash.sha3, hash);
 979:../src/wolfcrypt/src/hmac.c ****             break;
 980:../src/wolfcrypt/src/hmac.c ****     #endif
 981:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA3 */
 982:../src/wolfcrypt/src/hmac.c **** 
 983:../src/wolfcrypt/src/hmac.c ****         default:
 984:../src/wolfcrypt/src/hmac.c ****             ret = BAD_FUNC_ARG;
 1335                             		.loc 2 984 17
 1336 026e F8 AA 53 FF             		mov.L	#-173, [r10]
 985:../src/wolfcrypt/src/hmac.c ****             break;
 1337                             		.loc 2 985 13
 1338 0272 2E 2A                   		bra	.L120
 1339                             	.L136:
 818:../src/wolfcrypt/src/hmac.c ****             ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->opad,
 1340                             		.loc 2 818 17
 1341 0274 03                      		nop
 1342 0275 2E 27                   		bra	.L120
 1343                             	.L137:
 822:../src/wolfcrypt/src/hmac.c ****             ret = wc_Md5Update(&hmac->hash.md5, (byte*)hmac->innerHash,
 1344                             		.loc 2 822 17
 1345 0277 03                      		nop
 1346 0278 2E 24                   		bra	.L120
 1347                             	.L138:
 826:../src/wolfcrypt/src/hmac.c ****             ret = wc_Md5Final(&hmac->hash.md5, hash);
 1348                             		.loc 2 826 17
 1349 027a 03                      		nop
 1350 027b 2E 21                   		bra	.L120
 1351                             	.L139:
 835:../src/wolfcrypt/src/hmac.c ****             ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->opad,
 1352                             		.loc 2 835 17
 1353 027d 03                      		nop
 1354 027e 2E 1E                   		bra	.L120
 1355                             	.L140:
 839:../src/wolfcrypt/src/hmac.c ****             ret = wc_ShaUpdate(&hmac->hash.sha, (byte*)hmac->innerHash,
 1356                             		.loc 2 839 17
 1357 0280 03                      		nop
 1358 0281 2E 1B                   		bra	.L120
 1359                             	.L141:
 843:../src/wolfcrypt/src/hmac.c ****             ret = wc_ShaFinal(&hmac->hash.sha, hash);
 1360                             		.loc 2 843 17
 1361 0283 03                      		nop
 1362 0284 2E 18                   		bra	.L120
 1363                             	.L142:
 870:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->opad,
 1364                             		.loc 2 870 17
 1365 0286 03                      		nop
 1366 0287 2E 15                   		bra	.L120
 1367                             	.L143:
 874:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha256Update(&hmac->hash.sha256, (byte*)hmac->innerHash,
 1368                             		.loc 2 874 17
 1369 0289 03                      		nop
 1370 028a 2E 12                   		bra	.L120
 1371                             	.L144:
 878:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha256Final(&hmac->hash.sha256, hash);
 1372                             		.loc 2 878 17
 1373 028c 03                      		nop
 1374 028d 2E 0F                   		bra	.L120
 1375                             	.L145:
 887:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->opad,
 1376                             		.loc 2 887 17
 1377 028f 03                      		nop
 1378 0290 2E 0C                   		bra	.L120
 1379                             	.L146:
 891:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha384Update(&hmac->hash.sha384, (byte*)hmac->innerHash,
 1380                             		.loc 2 891 17
 1381 0292 03                      		nop
 1382 0293 09                      		bra	.L120
 1383                             	.L147:
 895:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha384Final(&hmac->hash.sha384, hash);
 1384                             		.loc 2 895 17
 1385 0294 03                      		nop
 1386 0295 0F                      		bra	.L120
 1387                             	.L148:
 903:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->opad,
 1388                             		.loc 2 903 17
 1389 0296 03                      		nop
 1390 0297 0D                      		bra	.L120
 1391                             	.L149:
 907:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha512Update(&hmac->hash.sha512, (byte*)hmac->innerHash,
 1392                             		.loc 2 907 17
 1393 0298 03                      		nop
 1394 0299 2E 03                   		bra	.L120
 1395                             	.L150:
 911:../src/wolfcrypt/src/hmac.c ****             ret = wc_Sha512Final(&hmac->hash.sha512, hash);
 1396                             		.loc 2 911 17
 1397 029b 03                      		nop
 1398                             		.balign 8,3,1
 1399                             	.L120:
 986:../src/wolfcrypt/src/hmac.c ****     }
 987:../src/wolfcrypt/src/hmac.c **** 
 988:../src/wolfcrypt/src/hmac.c ****     if (ret == 0) {
 1400                             		.loc 2 988 8
 1401 029c EC A5                   		mov.L	[r10], r5
 1402 029e 61 05                   		cmp	#0, r5
 1403 02a0 19                      		bne	.L135
 989:../src/wolfcrypt/src/hmac.c ****         hmac->innerHashKeyed = 0;
 1404                             		.loc 2 989 30
 1405 02a1 ED A5 01                		mov.L	4[r10], r5
 1406 02a4 FA 54 1D 02 00          		mov.B	#0, 541[r5]
 1407                             	.L135:
 990:../src/wolfcrypt/src/hmac.c ****     }
 991:../src/wolfcrypt/src/hmac.c **** 
 992:../src/wolfcrypt/src/hmac.c ****     return ret;
 1408                             		.loc 2 992 12
 1409 02a9 EC A5                   		mov.L	[r10], r5
 1410                             	.L110:
 993:../src/wolfcrypt/src/hmac.c **** }
 1411                             		.loc 2 993 1
 1412 02ab EF 51                   		mov.L	r5, r1
 1413 02ad 3F AA 04                		rtsd	#16, r10-r10
 1414                             	.LFE48:
 1416                             		.section	.text.wc_HmacInit,"ax",@progbits
 1417                             		.global	_wc_HmacInit
 1419                             	_wc_HmacInit:
 1420                             	.LFB49:
 994:../src/wolfcrypt/src/hmac.c **** 
 995:../src/wolfcrypt/src/hmac.c **** #ifdef WOLFSSL_KCAPI_HMAC
 996:../src/wolfcrypt/src/hmac.c ****     /* implemented in wolfcrypt/src/port/kcapi/kcapi_hmac.c */
 997:../src/wolfcrypt/src/hmac.c **** 
 998:../src/wolfcrypt/src/hmac.c ****     /* unmap the _Software calls used by kcapi_hmac.c */
 999:../src/wolfcrypt/src/hmac.c ****     #undef wc_HmacSetKey
1000:../src/wolfcrypt/src/hmac.c ****     #undef wc_HmacUpdate
1001:../src/wolfcrypt/src/hmac.c ****     #undef wc_HmacFinal
1002:../src/wolfcrypt/src/hmac.c **** 
1003:../src/wolfcrypt/src/hmac.c **** #else
1004:../src/wolfcrypt/src/hmac.c **** /* Initialize Hmac for use with async device */
1005:../src/wolfcrypt/src/hmac.c **** int wc_HmacInit(Hmac* hmac, void* heap, int devId)
1006:../src/wolfcrypt/src/hmac.c **** {
 1421                             		.loc 2 1006 1
 1422 0000 7E AA                   		push.l	r10
 1423                             	.LCFI14:
 1424 0002 71 0A F0                		add	#-16, r0, r10
 1425                             	.LCFI15:
 1426 0005 EF A0                   		mov.L	r10, r0
 1427 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1428 000a E7 A2 02                		mov.L	r2, 8[r10]
 1429 000d E7 A3 03                		mov.L	r3, 12[r10]
1007:../src/wolfcrypt/src/hmac.c ****     int ret = 0;
 1430                             		.loc 2 1007 9
 1431 0010 F8 A6 00                		mov.L	#0, [r10]
1008:../src/wolfcrypt/src/hmac.c **** 
1009:../src/wolfcrypt/src/hmac.c ****     if (hmac == NULL)
 1432                             		.loc 2 1009 8
 1433 0013 ED A5 01                		mov.L	4[r10], r5
 1434 0016 61 05                   		cmp	#0, r5
 1435 0018 1F                      		bne	.L152
1010:../src/wolfcrypt/src/hmac.c ****         return BAD_FUNC_ARG;
 1436                             		.loc 2 1010 16
 1437 0019 FB 5A 53 FF             		mov.L	#-173, r5
 1438 001d 2E 22                   		bra	.L153
 1439                             	.L152:
1011:../src/wolfcrypt/src/hmac.c **** 
1012:../src/wolfcrypt/src/hmac.c ****     XMEMSET(hmac, 0, sizeof(Hmac));
 1440                             		.loc 2 1012 5
 1441 001f FB 3A 20 02             		mov.L	#0x220, r3
 1442 0023 66 02                   		mov.L	#0, r2
 1443 0025 ED A1 01                		mov.L	4[r10], r1
 1444 0028 05 00 00 00             		bsr	_memset
1013:../src/wolfcrypt/src/hmac.c ****     hmac->macType = WC_HASH_TYPE_NONE;
 1445                             		.loc 2 1013 19
 1446 002c ED A5 01                		mov.L	4[r10], r5
 1447 002f FA 54 1C 02 00          		mov.B	#0, 540[r5]
1014:../src/wolfcrypt/src/hmac.c ****     hmac->heap = heap;
 1448                             		.loc 2 1014 16
 1449 0034 ED A5 01                		mov.L	4[r10], r5
 1450 0037 ED A4 02                		mov.L	8[r10], r4
 1451 003a E7 54 86                		mov.L	r4, 536[r5]
1015:../src/wolfcrypt/src/hmac.c **** #ifdef WOLF_CRYPTO_CB
1016:../src/wolfcrypt/src/hmac.c ****     hmac->devId = devId;
1017:../src/wolfcrypt/src/hmac.c ****     hmac->devCtx = NULL;
1018:../src/wolfcrypt/src/hmac.c **** #endif
1019:../src/wolfcrypt/src/hmac.c **** #if defined(WOLFSSL_DEVCRYPTO_HMAC)
1020:../src/wolfcrypt/src/hmac.c ****     hmac->ctx.cfd = -1;
1021:../src/wolfcrypt/src/hmac.c **** #endif
1022:../src/wolfcrypt/src/hmac.c **** 
1023:../src/wolfcrypt/src/hmac.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_HMAC)
1024:../src/wolfcrypt/src/hmac.c ****     ret = wolfAsync_DevCtxInit(&hmac->asyncDev, WOLFSSL_ASYNC_MARKER_HMAC,
1025:../src/wolfcrypt/src/hmac.c ****                                                          hmac->heap, devId);
1026:../src/wolfcrypt/src/hmac.c **** #else
1027:../src/wolfcrypt/src/hmac.c ****     (void)devId;
1028:../src/wolfcrypt/src/hmac.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
1029:../src/wolfcrypt/src/hmac.c **** 
1030:../src/wolfcrypt/src/hmac.c ****     return ret;
 1452                             		.loc 2 1030 12
 1453 003d EC A5                   		mov.L	[r10], r5
 1454                             	.L153:
1031:../src/wolfcrypt/src/hmac.c **** }
 1455                             		.loc 2 1031 1
 1456 003f EF 51                   		mov.L	r5, r1
 1457 0041 3F AA 05                		rtsd	#20, r10-r10
 1458                             	.LFE49:
 1460                             		.section	.text.wc_HmacFree,"ax",@progbits
 1461                             		.global	_wc_HmacFree
 1463                             	_wc_HmacFree:
 1464                             	.LFB50:
1032:../src/wolfcrypt/src/hmac.c **** 
1033:../src/wolfcrypt/src/hmac.c **** #ifdef WOLF_PRIVATE_KEY_ID
1034:../src/wolfcrypt/src/hmac.c **** int  wc_HmacInit_Id(Hmac* hmac, unsigned char* id, int len, void* heap,
1035:../src/wolfcrypt/src/hmac.c ****                     int devId)
1036:../src/wolfcrypt/src/hmac.c **** {
1037:../src/wolfcrypt/src/hmac.c ****     int ret = 0;
1038:../src/wolfcrypt/src/hmac.c **** 
1039:../src/wolfcrypt/src/hmac.c ****     if (hmac == NULL)
1040:../src/wolfcrypt/src/hmac.c ****         ret = BAD_FUNC_ARG;
1041:../src/wolfcrypt/src/hmac.c ****     if (ret == 0 && (len < 0 || len > HMAC_MAX_ID_LEN))
1042:../src/wolfcrypt/src/hmac.c ****         ret = BUFFER_E;
1043:../src/wolfcrypt/src/hmac.c **** 
1044:../src/wolfcrypt/src/hmac.c ****     if (ret == 0)
1045:../src/wolfcrypt/src/hmac.c ****         ret = wc_HmacInit(hmac, heap, devId);
1046:../src/wolfcrypt/src/hmac.c ****     if (ret == 0) {
1047:../src/wolfcrypt/src/hmac.c ****         XMEMCPY(hmac->id, id, len);
1048:../src/wolfcrypt/src/hmac.c ****         hmac->idLen = len;
1049:../src/wolfcrypt/src/hmac.c ****     }
1050:../src/wolfcrypt/src/hmac.c **** 
1051:../src/wolfcrypt/src/hmac.c ****     return ret;
1052:../src/wolfcrypt/src/hmac.c **** }
1053:../src/wolfcrypt/src/hmac.c **** 
1054:../src/wolfcrypt/src/hmac.c **** int wc_HmacInit_Label(Hmac* hmac, const char* label, void* heap, int devId)
1055:../src/wolfcrypt/src/hmac.c **** {
1056:../src/wolfcrypt/src/hmac.c ****     int ret = 0;
1057:../src/wolfcrypt/src/hmac.c ****     int labelLen = 0;
1058:../src/wolfcrypt/src/hmac.c **** 
1059:../src/wolfcrypt/src/hmac.c ****     if (hmac == NULL || label == NULL)
1060:../src/wolfcrypt/src/hmac.c ****         ret = BAD_FUNC_ARG;
1061:../src/wolfcrypt/src/hmac.c ****     if (ret == 0) {
1062:../src/wolfcrypt/src/hmac.c ****         labelLen = (int)XSTRLEN(label);
1063:../src/wolfcrypt/src/hmac.c ****         if (labelLen == 0 || labelLen > HMAC_MAX_LABEL_LEN)
1064:../src/wolfcrypt/src/hmac.c ****             ret = BUFFER_E;
1065:../src/wolfcrypt/src/hmac.c ****     }
1066:../src/wolfcrypt/src/hmac.c **** 
1067:../src/wolfcrypt/src/hmac.c ****     if (ret == 0)
1068:../src/wolfcrypt/src/hmac.c ****         ret  = wc_HmacInit(hmac, heap, devId);
1069:../src/wolfcrypt/src/hmac.c ****     if (ret == 0) {
1070:../src/wolfcrypt/src/hmac.c ****         XMEMCPY(hmac->label, label, labelLen);
1071:../src/wolfcrypt/src/hmac.c ****         hmac->labelLen = labelLen;
1072:../src/wolfcrypt/src/hmac.c ****     }
1073:../src/wolfcrypt/src/hmac.c **** 
1074:../src/wolfcrypt/src/hmac.c ****     return ret;
1075:../src/wolfcrypt/src/hmac.c **** }
1076:../src/wolfcrypt/src/hmac.c **** #endif /* WOLF_PRIVATE_KEY_ID */
1077:../src/wolfcrypt/src/hmac.c **** 
1078:../src/wolfcrypt/src/hmac.c **** /* Free Hmac from use with async device */
1079:../src/wolfcrypt/src/hmac.c **** void wc_HmacFree(Hmac* hmac)
1080:../src/wolfcrypt/src/hmac.c **** {
 1465                             		.loc 2 1080 1
 1466 0000 7E AA                   		push.l	r10
 1467                             	.LCFI16:
 1468 0002 71 0A FC                		add	#-4, r0, r10
 1469                             	.LCFI17:
 1470 0005 EF A0                   		mov.L	r10, r0
 1471 0007 E3 A1                   		mov.L	r1, [r10]
1081:../src/wolfcrypt/src/hmac.c ****     if (hmac == NULL)
 1472                             		.loc 2 1081 8
 1473 0009 EC A5                   		mov.L	[r10], r5
 1474 000b 61 05                   		cmp	#0, r5
 1475 000d 20 58                   		beq	.L164
1082:../src/wolfcrypt/src/hmac.c ****         return;
1083:../src/wolfcrypt/src/hmac.c **** 
1084:../src/wolfcrypt/src/hmac.c **** #ifdef WOLF_CRYPTO_CB
1085:../src/wolfcrypt/src/hmac.c ****     /* handle cleanup case where final is not called */
1086:../src/wolfcrypt/src/hmac.c ****     if (hmac->devId != INVALID_DEVID && hmac->devCtx != NULL) {
1087:../src/wolfcrypt/src/hmac.c ****         int  ret;
1088:../src/wolfcrypt/src/hmac.c ****         byte finalHash[WC_HMAC_BLOCK_SIZE];
1089:../src/wolfcrypt/src/hmac.c ****         ret = wc_CryptoCb_Hmac(hmac, hmac->macType, NULL, 0, finalHash);
1090:../src/wolfcrypt/src/hmac.c ****         (void)ret; /* must ignore return code here */
1091:../src/wolfcrypt/src/hmac.c ****         (void)finalHash;
1092:../src/wolfcrypt/src/hmac.c ****     }
1093:../src/wolfcrypt/src/hmac.c **** #endif
1094:../src/wolfcrypt/src/hmac.c **** 
1095:../src/wolfcrypt/src/hmac.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_HMAC)
1096:../src/wolfcrypt/src/hmac.c ****     wolfAsync_DevCtxFree(&hmac->asyncDev, WOLFSSL_ASYNC_MARKER_HMAC);
1097:../src/wolfcrypt/src/hmac.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
1098:../src/wolfcrypt/src/hmac.c **** 
1099:../src/wolfcrypt/src/hmac.c ****     switch (hmac->macType) {
 1476                             		.loc 2 1099 17
 1477 000f EC A5                   		mov.L	[r10], r5
 1478 0011 CE 55 1C 02             		mov.B	540[r5], r5
 1479 0015 5B 55                   		movu.B	r5, r5
 1480                             		.loc 2 1099 5
 1481 0017 61 65                   		cmp	#6, r5
 1482 0019 20 2E                   		beq	.L157
 1483 001b 61 65                   		cmp	#6, r5
 1484 001d 2A 0C                   		bgt	.L158
 1485 001f 61 35                   		cmp	#3, r5
 1486 0021 20 12                   		beq	.L159
 1487 0023 61 45                   		cmp	#4, r5
 1488 0025 20 18                   		beq	.L160
1100:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_MD5
1101:../src/wolfcrypt/src/hmac.c ****         case WC_MD5:
1102:../src/wolfcrypt/src/hmac.c ****             wc_Md5Free(&hmac->hash.md5);
1103:../src/wolfcrypt/src/hmac.c ****             break;
1104:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_MD5 */
1105:../src/wolfcrypt/src/hmac.c **** 
1106:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA
1107:../src/wolfcrypt/src/hmac.c ****         case WC_SHA:
1108:../src/wolfcrypt/src/hmac.c ****             wc_ShaFree(&hmac->hash.sha);
1109:../src/wolfcrypt/src/hmac.c ****             break;
1110:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA */
1111:../src/wolfcrypt/src/hmac.c **** 
1112:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA224
1113:../src/wolfcrypt/src/hmac.c ****         case WC_SHA224:
1114:../src/wolfcrypt/src/hmac.c ****             wc_Sha224Free(&hmac->hash.sha224);
1115:../src/wolfcrypt/src/hmac.c ****             break;
1116:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA224 */
1117:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_SHA256
1118:../src/wolfcrypt/src/hmac.c ****         case WC_SHA256:
1119:../src/wolfcrypt/src/hmac.c ****             wc_Sha256Free(&hmac->hash.sha256);
1120:../src/wolfcrypt/src/hmac.c ****             break;
1121:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA256 */
1122:../src/wolfcrypt/src/hmac.c **** 
1123:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA384
1124:../src/wolfcrypt/src/hmac.c ****         case WC_SHA384:
1125:../src/wolfcrypt/src/hmac.c ****             wc_Sha384Free(&hmac->hash.sha384);
1126:../src/wolfcrypt/src/hmac.c ****             break;
1127:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA384 */
1128:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA512
1129:../src/wolfcrypt/src/hmac.c ****         case WC_SHA512:
1130:../src/wolfcrypt/src/hmac.c ****             wc_Sha512Free(&hmac->hash.sha512);
1131:../src/wolfcrypt/src/hmac.c ****             break;
1132:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA512 */
1133:../src/wolfcrypt/src/hmac.c **** 
1134:../src/wolfcrypt/src/hmac.c ****     #ifdef WOLFSSL_SHA3
1135:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_224
1136:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_224:
1137:../src/wolfcrypt/src/hmac.c ****             wc_Sha3_224_Free(&hmac->hash.sha3);
1138:../src/wolfcrypt/src/hmac.c ****             break;
1139:../src/wolfcrypt/src/hmac.c ****     #endif
1140:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_256
1141:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_256:
1142:../src/wolfcrypt/src/hmac.c ****             wc_Sha3_256_Free(&hmac->hash.sha3);
1143:../src/wolfcrypt/src/hmac.c ****             break;
1144:../src/wolfcrypt/src/hmac.c ****     #endif
1145:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_384
1146:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_384:
1147:../src/wolfcrypt/src/hmac.c ****             wc_Sha3_384_Free(&hmac->hash.sha3);
1148:../src/wolfcrypt/src/hmac.c ****             break;
1149:../src/wolfcrypt/src/hmac.c ****     #endif
1150:../src/wolfcrypt/src/hmac.c ****     #ifndef WOLFSSL_NOSHA3_512
1151:../src/wolfcrypt/src/hmac.c ****         case WC_SHA3_512:
1152:../src/wolfcrypt/src/hmac.c ****             wc_Sha3_512_Free(&hmac->hash.sha3);
1153:../src/wolfcrypt/src/hmac.c ****             break;
1154:../src/wolfcrypt/src/hmac.c ****     #endif
1155:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA3 */
1156:../src/wolfcrypt/src/hmac.c **** 
1157:../src/wolfcrypt/src/hmac.c ****         default:
1158:../src/wolfcrypt/src/hmac.c ****             break;
 1489                             		.loc 2 1158 13
 1490 0027 2E 41                   		bra	.L154
 1491                             	.L158:
1099:../src/wolfcrypt/src/hmac.c ****     #ifndef NO_MD5
 1492                             		.loc 2 1099 5
 1493 0029 61 75                   		cmp	#7, r5
 1494 002b 20 26                   		beq	.L162
 1495 002d 61 85                   		cmp	#8, r5
 1496 002f 20 2C                   		beq	.L163
 1497                             		.loc 2 1158 13
 1498 0031 2E 37                   		bra	.L154
 1499                             	.L159:
1102:../src/wolfcrypt/src/hmac.c ****             break;
 1500                             		.loc 2 1102 13
 1501 0033 EC A5                   		mov.L	[r10], r5
 1502 0035 EF 51                   		mov.L	r5, r1
 1503 0037 05 00 00 00             		bsr	_wc_Md5Free
1103:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_MD5 */
 1504                             		.loc 2 1103 13
 1505 003b 2E 2D                   		bra	.L154
 1506                             	.L160:
1108:../src/wolfcrypt/src/hmac.c ****             break;
 1507                             		.loc 2 1108 13
 1508 003d EC A5                   		mov.L	[r10], r5
 1509 003f EF 51                   		mov.L	r5, r1
 1510 0041 05 00 00 00             		bsr	_wc_ShaFree
1109:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA */
 1511                             		.loc 2 1109 13
 1512 0045 2E 23                   		bra	.L154
 1513                             	.L157:
1119:../src/wolfcrypt/src/hmac.c ****             break;
 1514                             		.loc 2 1119 13
 1515 0047 EC A5                   		mov.L	[r10], r5
 1516 0049 EF 51                   		mov.L	r5, r1
 1517 004b 05 00 00 00             		bsr	_wc_Sha256Free
1120:../src/wolfcrypt/src/hmac.c ****     #endif /* !NO_SHA256 */
 1518                             		.loc 2 1120 13
 1519 004f 2E 19                   		bra	.L154
 1520                             	.L162:
1125:../src/wolfcrypt/src/hmac.c ****             break;
 1521                             		.loc 2 1125 13
 1522 0051 EC A5                   		mov.L	[r10], r5
 1523 0053 EF 51                   		mov.L	r5, r1
 1524 0055 05 00 00 00             		bsr	_wc_Sha384Free
1126:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA384 */
 1525                             		.loc 2 1126 13
 1526 0059 2E 0F                   		bra	.L154
 1527                             	.L163:
1130:../src/wolfcrypt/src/hmac.c ****             break;
 1528                             		.loc 2 1130 13
 1529 005b EC A5                   		mov.L	[r10], r5
 1530 005d EF 51                   		mov.L	r5, r1
 1531 005f 05 00 00 00             		bsr	_wc_Sha512Free
1131:../src/wolfcrypt/src/hmac.c ****     #endif /* WOLFSSL_SHA512 */
 1532                             		.loc 2 1131 13
 1533 0063 2E 05                   		bra	.L154
 1534                             	.L164:
1082:../src/wolfcrypt/src/hmac.c **** 
 1535                             		.loc 2 1082 9
 1536 0065 03                      		nop
 1537 0066 EF 00                   		.balign 8,3,2
 1538                             	.L154:
1159:../src/wolfcrypt/src/hmac.c ****     }
1160:../src/wolfcrypt/src/hmac.c **** }
 1539                             		.loc 2 1160 1
 1540 0068 3F AA 02                		rtsd	#8, r10-r10
 1541                             	.LFE50:
 1543 006b 77 10 01 00 00          		.section	.text.wolfSSL_GetHmacMaxSize,"ax",@progbits
 1544                             		.global	_wolfSSL_GetHmacMaxSize
 1546                             	_wolfSSL_GetHmacMaxSize:
 1547                             	.LFB51:
1161:../src/wolfcrypt/src/hmac.c **** #endif /* WOLFSSL_KCAPI_HMAC */
1162:../src/wolfcrypt/src/hmac.c **** 
1163:../src/wolfcrypt/src/hmac.c **** int wolfSSL_GetHmacMaxSize(void)
1164:../src/wolfcrypt/src/hmac.c **** {
 1548                             		.loc 2 1164 1
 1549 0000 7E AA                   		push.l	r10
 1550                             	.LCFI18:
 1551 0002 EF 0A                   		mov.L	r0, r10
 1552                             	.LCFI19:
1165:../src/wolfcrypt/src/hmac.c ****     return WC_MAX_DIGEST_SIZE;
 1553                             		.loc 2 1165 12
 1554 0004 75 45 40                		mov.L	#0x40, r5
1166:../src/wolfcrypt/src/hmac.c **** }
 1555                             		.loc 2 1166 1
 1556 0007 EF 51                   		mov.L	r5, r1
 1557 0009 3F AA 01                		rtsd	#4, r10-r10
 1558                             	.LFE51:
 1560                             		.section	.text.wc_HKDF_Extract,"ax",@progbits
 1561                             		.global	_wc_HKDF_Extract
 1563                             	_wc_HKDF_Extract:
 1564                             	.LFB52:
1167:../src/wolfcrypt/src/hmac.c **** 
1168:../src/wolfcrypt/src/hmac.c **** #ifdef HAVE_HKDF
1169:../src/wolfcrypt/src/hmac.c ****     /* HMAC-KDF-Extract.
1170:../src/wolfcrypt/src/hmac.c ****      * RFC 5869 - HMAC-based Extract-and-Expand Key Derivation Function (HKDF).
1171:../src/wolfcrypt/src/hmac.c ****      *
1172:../src/wolfcrypt/src/hmac.c ****      * type     The hash algorithm type.
1173:../src/wolfcrypt/src/hmac.c ****      * salt     The optional salt value.
1174:../src/wolfcrypt/src/hmac.c ****      * saltSz   The size of the salt.
1175:../src/wolfcrypt/src/hmac.c ****      * inKey    The input keying material.
1176:../src/wolfcrypt/src/hmac.c ****      * inKeySz  The size of the input keying material.
1177:../src/wolfcrypt/src/hmac.c ****      * out      The pseudorandom key with the length that of the hash.
1178:../src/wolfcrypt/src/hmac.c ****      * returns 0 on success, otherwise failure.
1179:../src/wolfcrypt/src/hmac.c ****      */
1180:../src/wolfcrypt/src/hmac.c ****     int wc_HKDF_Extract(int type, const byte* salt, word32 saltSz,
1181:../src/wolfcrypt/src/hmac.c ****                         const byte* inKey, word32 inKeySz, byte* out)
1182:../src/wolfcrypt/src/hmac.c ****     {
 1565                             		.loc 2 1182 5
 1566 0000 7E AA                   		push.l	r10
 1567                             	.LCFI20:
 1568 0002 7E A6                   		push.l	r6
 1569                             	.LCFI21:
 1570 0004 72 0A 7C FD             		add	#-644, r0, r10
 1571                             	.LCFI22:
 1572 0008 EF A0                   		mov.L	r10, r0
 1573 000a FB 6A 90 02             		mov.L	#0x290, r6
 1574 000e 4B A6                   		add	r10, r6
 1575 0010 E7 A1 9B                		mov.L	r1, 620[r10]
 1576 0013 E7 A2 9C                		mov.L	r2, 624[r10]
 1577 0016 E7 A3 9D                		mov.L	r3, 628[r10]
 1578 0019 E7 A4 9E                		mov.L	r4, 632[r10]
1183:../src/wolfcrypt/src/hmac.c ****         byte   tmp[WC_MAX_DIGEST_SIZE]; /* localSalt helper */
1184:../src/wolfcrypt/src/hmac.c ****         Hmac   myHmac;
1185:../src/wolfcrypt/src/hmac.c ****         int    ret;
1186:../src/wolfcrypt/src/hmac.c ****         const  byte* localSalt;  /* either points to user input or tmp */
1187:../src/wolfcrypt/src/hmac.c ****         int    hashSz;
1188:../src/wolfcrypt/src/hmac.c **** 
1189:../src/wolfcrypt/src/hmac.c ****         ret = wc_HmacSizeByType(type);
 1579                             		.loc 2 1189 15
 1580 001c ED A1 9B                		mov.L	620[r10], r1
 1581 001f 05 00 00 00             		bsr	_wc_HmacSizeByType
 1582 0023 E3 A1                   		mov.L	r1, [r10]
1190:../src/wolfcrypt/src/hmac.c ****         if (ret < 0)
 1583                             		.loc 2 1190 12
 1584 0025 EC A5                   		mov.L	[r10], r5
 1585 0027 61 05                   		cmp	#0, r5
 1586 0029 28 07                   		bge	.L168
1191:../src/wolfcrypt/src/hmac.c ****             return ret;
 1587                             		.loc 2 1191 20
 1588 002b EC A5                   		mov.L	[r10], r5
 1589 002d 38 8F 00                		bra	.L174
 1590                             	.L168:
1192:../src/wolfcrypt/src/hmac.c **** 
1193:../src/wolfcrypt/src/hmac.c ****         hashSz = ret;
 1591                             		.loc 2 1193 16
 1592 0030 EC A5                   		mov.L	[r10], r5
 1593 0032 E7 A5 02                		mov.L	r5, 8[r10]
1194:../src/wolfcrypt/src/hmac.c ****         localSalt = salt;
 1594                             		.loc 2 1194 19
 1595 0035 ED A5 9C                		mov.L	624[r10], r5
 1596 0038 E7 A5 01                		mov.L	r5, 4[r10]
1195:../src/wolfcrypt/src/hmac.c ****         if (localSalt == NULL) {
 1597                             		.loc 2 1195 12
 1598 003b ED A5 01                		mov.L	4[r10], r5
 1599 003e 61 05                   		cmp	#0, r5
 1600 0040 21 1E                   		bne	.L170
1196:../src/wolfcrypt/src/hmac.c ****             XMEMSET(tmp, 0, hashSz);
 1601                             		.loc 2 1196 13
 1602 0042 ED A4 02                		mov.L	8[r10], r4
 1603 0045 71 A5 0C                		add	#12, r10, r5
 1604 0048 EF 43                   		mov.L	r4, r3
 1605 004a 66 02                   		mov.L	#0, r2
 1606 004c EF 51                   		mov.L	r5, r1
 1607 004e 05 00 00 00             		bsr	_memset
1197:../src/wolfcrypt/src/hmac.c ****             localSalt = tmp;
 1608                             		.loc 2 1197 23
 1609 0052 71 A5 0C                		add	#12, r10, r5
 1610 0055 E7 A5 01                		mov.L	r5, 4[r10]
1198:../src/wolfcrypt/src/hmac.c ****             saltSz    = hashSz;
 1611                             		.loc 2 1198 23
 1612 0058 ED A5 02                		mov.L	8[r10], r5
 1613 005b E7 A5 9D                		mov.L	r5, 628[r10]
 1614                             	.L170:
1199:../src/wolfcrypt/src/hmac.c ****         }
1200:../src/wolfcrypt/src/hmac.c **** 
1201:../src/wolfcrypt/src/hmac.c ****         ret = wc_HmacInit(&myHmac, NULL, INVALID_DEVID);
 1615                             		.loc 2 1201 15
 1616 005e 71 A5 4C                		add	#0x4c, r10, r5
 1617 0061 FB 36 FE                		mov.L	#-2, r3
 1618 0064 66 02                   		mov.L	#0, r2
 1619 0066 EF 51                   		mov.L	r5, r1
 1620 0068 05 00 00 00             		bsr	_wc_HmacInit
 1621 006c E3 A1                   		mov.L	r1, [r10]
1202:../src/wolfcrypt/src/hmac.c ****         if (ret == 0) {
 1622                             		.loc 2 1202 12
 1623 006e EC A5                   		mov.L	[r10], r5
 1624 0070 61 05                   		cmp	#0, r5
 1625 0072 21 48                   		bne	.L171
1203:../src/wolfcrypt/src/hmac.c ****             ret = wc_HmacSetKey(&myHmac, type, localSalt, saltSz);
 1626                             		.loc 2 1203 19
 1627 0074 71 A5 4C                		add	#0x4c, r10, r5
 1628 0077 ED A4 9D                		mov.L	628[r10], r4
 1629 007a ED A3 01                		mov.L	4[r10], r3
 1630 007d ED A2 9B                		mov.L	620[r10], r2
 1631 0080 EF 51                   		mov.L	r5, r1
 1632 0082 05 00 00 00             		bsr	_wc_HmacSetKey
 1633 0086 E3 A1                   		mov.L	r1, [r10]
1204:../src/wolfcrypt/src/hmac.c ****             if (ret == 0)
 1634                             		.loc 2 1204 16
 1635 0088 EC A5                   		mov.L	[r10], r5
 1636 008a 61 05                   		cmp	#0, r5
 1637 008c 21 12                   		bne	.L172
1205:../src/wolfcrypt/src/hmac.c ****                 ret = wc_HmacUpdate(&myHmac, inKey, inKeySz);
 1638                             		.loc 2 1205 23
 1639 008e 71 A5 4C                		add	#0x4c, r10, r5
 1640 0091 EC 63                   		mov.L	[r6], r3
 1641 0093 ED A2 9E                		mov.L	632[r10], r2
 1642 0096 EF 51                   		mov.L	r5, r1
 1643 0098 05 00 00 00             		bsr	_wc_HmacUpdate
 1644 009c E3 A1                   		mov.L	r1, [r10]
 1645                             	.L172:
1206:../src/wolfcrypt/src/hmac.c ****             if (ret == 0)
 1646                             		.loc 2 1206 16
 1647 009e EC A5                   		mov.L	[r10], r5
 1648 00a0 61 05                   		cmp	#0, r5
 1649 00a2 21 0F                   		bne	.L173
1207:../src/wolfcrypt/src/hmac.c ****                 ret = wc_HmacFinal(&myHmac,  out);
 1650                             		.loc 2 1207 23
 1651 00a4 71 A5 4C                		add	#0x4c, r10, r5
 1652 00a7 A8 6A                   		mov.L	4[r6], r2
 1653 00a9 EF 51                   		mov.L	r5, r1
 1654 00ab 05 00 00 00             		bsr	_wc_HmacFinal
 1655 00af E3 A1                   		mov.L	r1, [r10]
 1656                             	.L173:
1208:../src/wolfcrypt/src/hmac.c ****             wc_HmacFree(&myHmac);
 1657                             		.loc 2 1208 13
 1658 00b1 71 A5 4C                		add	#0x4c, r10, r5
 1659 00b4 EF 51                   		mov.L	r5, r1
 1660 00b6 05 00 00 00             		bsr	_wc_HmacFree
 1661                             	.L171:
1209:../src/wolfcrypt/src/hmac.c ****         }
1210:../src/wolfcrypt/src/hmac.c **** 
1211:../src/wolfcrypt/src/hmac.c ****         return ret;
 1662                             		.loc 2 1211 16
 1663 00ba EC A5                   		mov.L	[r10], r5
 1664                             	.L174:
1212:../src/wolfcrypt/src/hmac.c ****     }
 1665                             		.loc 2 1212 5 discriminator 1
 1666 00bc EF 51                   		mov.L	r5, r1
 1667 00be 72 00 84 02             		add	#0x284, r0
 1668 00c2 7E B6                   		pop	r6
 1669 00c4 7E BA                   		pop	r10
 1670 00c6 02                      		rts
 1671                             	.LFE52:
 1673                             		.section	.text.wc_HKDF_Expand,"ax",@progbits
 1674                             		.global	_wc_HKDF_Expand
 1676                             	_wc_HKDF_Expand:
 1677                             	.LFB53:
1213:../src/wolfcrypt/src/hmac.c **** 
1214:../src/wolfcrypt/src/hmac.c ****     /* HMAC-KDF-Expand.
1215:../src/wolfcrypt/src/hmac.c ****      * RFC 5869 - HMAC-based Extract-and-Expand Key Derivation Function (HKDF).
1216:../src/wolfcrypt/src/hmac.c ****      *
1217:../src/wolfcrypt/src/hmac.c ****      * type     The hash algorithm type.
1218:../src/wolfcrypt/src/hmac.c ****      * inKey    The input key.
1219:../src/wolfcrypt/src/hmac.c ****      * inKeySz  The size of the input key.
1220:../src/wolfcrypt/src/hmac.c ****      * info     The application specific information.
1221:../src/wolfcrypt/src/hmac.c ****      * infoSz   The size of the application specific information.
1222:../src/wolfcrypt/src/hmac.c ****      * out      The output keying material.
1223:../src/wolfcrypt/src/hmac.c ****      * returns 0 on success, otherwise failure.
1224:../src/wolfcrypt/src/hmac.c ****      */
1225:../src/wolfcrypt/src/hmac.c ****     int wc_HKDF_Expand(int type, const byte* inKey, word32 inKeySz,
1226:../src/wolfcrypt/src/hmac.c ****                        const byte* info, word32 infoSz, byte* out, word32 outSz)
1227:../src/wolfcrypt/src/hmac.c ****     {
 1678                             		.loc 2 1227 5
 1679 0000 6E 6A                   		pushm	r6-r10
 1680                             	.LCFI23:
 1681 0002 72 0A 6C FD             		add	#-660, r0, r10
 1682                             	.LCFI24:
 1683 0006 EF A0                   		mov.L	r10, r0
 1684 0008 FB 6A AC 02             		mov.L	#0x2ac, r6
 1685 000c 4B A6                   		add	r10, r6
 1686 000e E7 A1 9E                		mov.L	r1, 632[r10]
 1687 0011 E7 A2 9F                		mov.L	r2, 636[r10]
 1688 0014 E7 A3 A0                		mov.L	r3, 640[r10]
 1689 0017 E7 A4 A1                		mov.L	r4, 644[r10]
1228:../src/wolfcrypt/src/hmac.c ****         byte   tmp[WC_MAX_DIGEST_SIZE];
1229:../src/wolfcrypt/src/hmac.c ****         Hmac   myHmac;
1230:../src/wolfcrypt/src/hmac.c ****         int    ret = 0;
 1690                             		.loc 2 1230 16
 1691 001a F8 A6 00                		mov.L	#0, [r10]
1231:../src/wolfcrypt/src/hmac.c ****         word32 outIdx = 0;
 1692                             		.loc 2 1231 16
 1693 001d F9 A6 01 00             		mov.L	#0, 4[r10]
1232:../src/wolfcrypt/src/hmac.c ****         word32 hashSz = wc_HmacSizeByType(type);
 1694                             		.loc 2 1232 25
 1695 0021 ED A1 9E                		mov.L	632[r10], r1
 1696 0024 05 00 00 00             		bsr	_wc_HmacSizeByType
 1697 0028 EF 15                   		mov.L	r1, r5
 1698                             		.loc 2 1232 16
 1699 002a E7 A5 02                		mov.L	r5, 8[r10]
1233:../src/wolfcrypt/src/hmac.c ****         byte   n = 0x1;
 1700                             		.loc 2 1233 16
 1701 002d FA A4 74 02 01          		mov.B	#1, 628[r10]
1234:../src/wolfcrypt/src/hmac.c **** 
1235:../src/wolfcrypt/src/hmac.c ****         /* RFC 5869 states that the length of output keying material in
1236:../src/wolfcrypt/src/hmac.c ****            octets must be L <= 255*HashLen or N = ceil(L/HashLen) */
1237:../src/wolfcrypt/src/hmac.c **** 
1238:../src/wolfcrypt/src/hmac.c ****         if (out == NULL || ((outSz/hashSz) + ((outSz % hashSz) != 0)) > 255)
 1702                             		.loc 2 1238 12
 1703 0032 A8 6D                   		mov.L	4[r6], r5
 1704 0034 61 05                   		cmp	#0, r5
 1705 0036 20 2D                   		beq	.L176
 1706                             		.loc 2 1238 35 discriminator 1
 1707 0038 A8 E4                   		mov.L	8[r6], r4
 1708 003a ED A5 02                		mov.L	8[r10], r5
 1709 003d EF 43                   		mov.L	r4, r3
 1710 003f FC 27 53                		divu	r5, r3
 1711                             		.loc 2 1238 54 discriminator 1
 1712 0042 A8 E5                   		mov.L	8[r6], r5
 1713 0044 ED A4 02                		mov.L	8[r10], r4
 1714 0047 EF 57                   		mov.L	r5, r7
 1715 0049 FC 27 47                		divu	r4, r7
 1716 004c EF 74                   		mov.L	r7, r4
 1717 004e ED A2 02                		mov.L	8[r10], r2
 1718 0051 4F 24                   		mul	r2, r4
 1719 0053 43 45                   		sub	r4, r5
 1720                             		.loc 2 1238 64 discriminator 1
 1721 0055 61 05                   		cmp	#0, r5
 1722 0057 FC DB 51                		scne.L	r5
 1723 005a 5B 55                   		movu.B	r5, r5
 1724                             		.loc 2 1238 44 discriminator 1
 1725 005c 4B 35                   		add	r3, r5
 1726                             		.loc 2 1238 25 discriminator 1
 1727 005e 75 55 FF                		cmp	#0xff, r5
 1728 0061 25 09                   		bleu	.L177
 1729                             	.L176:
1239:../src/wolfcrypt/src/hmac.c ****             return BAD_FUNC_ARG;
 1730                             		.loc 2 1239 20
 1731 0063 FB 5A 53 FF             		mov.L	#-173, r5
 1732 0067 38 0E 01                		bra	.L190
 1733                             	.L177:
1240:../src/wolfcrypt/src/hmac.c **** 
1241:../src/wolfcrypt/src/hmac.c ****         ret = wc_HmacInit(&myHmac, NULL, INVALID_DEVID);
 1734                             		.loc 2 1241 15
 1735 006a 71 A5 54                		add	#0x54, r10, r5
 1736 006d FB 36 FE                		mov.L	#-2, r3
 1737 0070 66 02                   		mov.L	#0, r2
 1738 0072 EF 51                   		mov.L	r5, r1
 1739 0074 05 00 00 00             		bsr	_wc_HmacInit
 1740 0078 E3 A1                   		mov.L	r1, [r10]
1242:../src/wolfcrypt/src/hmac.c ****         if (ret != 0)
 1741                             		.loc 2 1242 12
 1742 007a EC A5                   		mov.L	[r10], r5
 1743 007c 61 05                   		cmp	#0, r5
 1744 007e 3A D4 00                		beq	.L180
1243:../src/wolfcrypt/src/hmac.c ****             return ret;
 1745                             		.loc 2 1243 20
 1746 0081 EC A5                   		mov.L	[r10], r5
 1747 0083 38 F2 00                		bra	.L190
 1748                             	.L189:
 1749                             	.LBB2:
1244:../src/wolfcrypt/src/hmac.c **** 
1245:../src/wolfcrypt/src/hmac.c **** 
1246:../src/wolfcrypt/src/hmac.c ****         while (outIdx < outSz) {
1247:../src/wolfcrypt/src/hmac.c ****             int    tmpSz = (n == 1) ? 0 : hashSz;
 1750                             		.loc 2 1247 31
 1751 0086 CE A5 74 02             		mov.B	628[r10], r5
 1752                             		.loc 2 1247 41
 1753 008a 5B 55                   		movu.B	r5, r5
 1754 008c 61 15                   		cmp	#1, r5
 1755 008e 15                      		beq	.L181
 1756                             		.loc 2 1247 41 is_stmt 0 discriminator 1
 1757 008f ED A5 02                		mov.L	8[r10], r5
 1758 0092 0B                      		bra	.L182
 1759                             	.L181:
 1760                             		.loc 2 1247 41 discriminator 2
 1761 0093 66 05                   		mov.L	#0, r5
 1762                             	.L182:
 1763                             		.loc 2 1247 20 is_stmt 1 discriminator 4
 1764 0095 E7 A5 03                		mov.L	r5, 12[r10]
1248:../src/wolfcrypt/src/hmac.c ****             word32 left = outSz - outIdx;
 1765                             		.loc 2 1248 20 discriminator 4
 1766 0098 A8 E4                   		mov.L	8[r6], r4
 1767 009a ED A5 01                		mov.L	4[r10], r5
 1768 009d FF 05 54                		sub	r5, r4, r5
 1769 00a0 E7 A5 04                		mov.L	r5, 16[r10]
1249:../src/wolfcrypt/src/hmac.c **** 
1250:../src/wolfcrypt/src/hmac.c ****             ret = wc_HmacSetKey(&myHmac, type, inKey, inKeySz);
 1770                             		.loc 2 1250 19 discriminator 4
 1771 00a3 71 A5 54                		add	#0x54, r10, r5
 1772 00a6 ED A4 A0                		mov.L	640[r10], r4
 1773 00a9 ED A3 9F                		mov.L	636[r10], r3
 1774 00ac ED A2 9E                		mov.L	632[r10], r2
 1775 00af EF 51                   		mov.L	r5, r1
 1776 00b1 05 00 00 00             		bsr	_wc_HmacSetKey
 1777 00b5 E3 A1                   		mov.L	r1, [r10]
1251:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1778                             		.loc 2 1251 16 discriminator 4
 1779 00b7 EC A5                   		mov.L	[r10], r5
 1780 00b9 61 05                   		cmp	#0, r5
 1781 00bb 3B A5 00                		bne	.L191
1252:../src/wolfcrypt/src/hmac.c ****                 break;
1253:../src/wolfcrypt/src/hmac.c ****             ret = wc_HmacUpdate(&myHmac, tmp, tmpSz);
 1782                             		.loc 2 1253 19
 1783 00be ED A3 03                		mov.L	12[r10], r3
 1784 00c1 71 A4 14                		add	#20, r10, r4
 1785 00c4 71 A5 54                		add	#0x54, r10, r5
 1786 00c7 EF 42                   		mov.L	r4, r2
 1787 00c9 EF 51                   		mov.L	r5, r1
 1788 00cb 05 00 00 00             		bsr	_wc_HmacUpdate
 1789 00cf E3 A1                   		mov.L	r1, [r10]
1254:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1790                             		.loc 2 1254 16
 1791 00d1 EC A5                   		mov.L	[r10], r5
 1792 00d3 61 05                   		cmp	#0, r5
 1793 00d5 3B 8D 00                		bne	.L192
1255:../src/wolfcrypt/src/hmac.c ****                 break;
1256:../src/wolfcrypt/src/hmac.c ****             ret = wc_HmacUpdate(&myHmac, info, infoSz);
 1794                             		.loc 2 1256 19
 1795 00d8 71 A5 54                		add	#0x54, r10, r5
 1796 00db EC 63                   		mov.L	[r6], r3
 1797 00dd ED A2 A1                		mov.L	644[r10], r2
 1798 00e0 EF 51                   		mov.L	r5, r1
 1799 00e2 05 00 00 00             		bsr	_wc_HmacUpdate
 1800 00e6 E3 A1                   		mov.L	r1, [r10]
1257:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1801                             		.loc 2 1257 16
 1802 00e8 EC A5                   		mov.L	[r10], r5
 1803 00ea 61 05                   		cmp	#0, r5
 1804 00ec 21 78                   		bne	.L193
1258:../src/wolfcrypt/src/hmac.c ****                 break;
1259:../src/wolfcrypt/src/hmac.c ****             ret = wc_HmacUpdate(&myHmac, &n, 1);
 1805                             		.loc 2 1259 19
 1806 00ee 72 A4 74 02             		add	#0x274, r10, r4
 1807 00f2 71 A5 54                		add	#0x54, r10, r5
 1808 00f5 66 13                   		mov.L	#1, r3
 1809 00f7 EF 42                   		mov.L	r4, r2
 1810 00f9 EF 51                   		mov.L	r5, r1
 1811 00fb 05 00 00 00             		bsr	_wc_HmacUpdate
 1812 00ff E3 A1                   		mov.L	r1, [r10]
1260:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1813                             		.loc 2 1260 16
 1814 0101 EC A5                   		mov.L	[r10], r5
 1815 0103 61 05                   		cmp	#0, r5
 1816 0105 21 61                   		bne	.L194
1261:../src/wolfcrypt/src/hmac.c ****                 break;
1262:../src/wolfcrypt/src/hmac.c ****             ret = wc_HmacFinal(&myHmac, tmp);
 1817                             		.loc 2 1262 19
 1818 0107 71 A4 14                		add	#20, r10, r4
 1819 010a 71 A5 54                		add	#0x54, r10, r5
 1820 010d EF 42                   		mov.L	r4, r2
 1821 010f EF 51                   		mov.L	r5, r1
 1822 0111 05 00 00 00             		bsr	_wc_HmacFinal
 1823 0115 E3 A1                   		mov.L	r1, [r10]
1263:../src/wolfcrypt/src/hmac.c ****             if (ret != 0)
 1824                             		.loc 2 1263 16
 1825 0117 EC A5                   		mov.L	[r10], r5
 1826 0119 61 05                   		cmp	#0, r5
 1827 011b 21 4E                   		bne	.L195
1264:../src/wolfcrypt/src/hmac.c ****                 break;
1265:../src/wolfcrypt/src/hmac.c **** 
1266:../src/wolfcrypt/src/hmac.c ****             left = min(left, hashSz);
 1828                             		.loc 2 1266 20
 1829 011d ED A2 02                		mov.L	8[r10], r2
 1830 0120 ED A1 04                		mov.L	16[r10], r1
 1831 0123 05 00 00 00             		bsr	_min
 1832 0127 E7 A1 04                		mov.L	r1, 16[r10]
1267:../src/wolfcrypt/src/hmac.c ****             XMEMCPY(out+outIdx, tmp, left);
 1833                             		.loc 2 1267 13
 1834 012a A8 6D                   		mov.L	4[r6], r5
 1835 012c 06 89 A5 01             		add	4[r10].L, r5
 1836 0130 71 A4 14                		add	#20, r10, r4
 1837 0133 ED A3 04                		mov.L	16[r10], r3
 1838 0136 EF 42                   		mov.L	r4, r2
 1839 0138 EF 51                   		mov.L	r5, r1
 1840 013a 05 00 00 00             		bsr	_memcpy
1268:../src/wolfcrypt/src/hmac.c **** 
1269:../src/wolfcrypt/src/hmac.c ****             outIdx += hashSz;
 1841                             		.loc 2 1269 20
 1842 013e ED A5 01                		mov.L	4[r10], r5
 1843 0141 06 89 A5 02             		add	8[r10].L, r5
 1844 0145 E7 A5 01                		mov.L	r5, 4[r10]
1270:../src/wolfcrypt/src/hmac.c ****             n++;
 1845                             		.loc 2 1270 14
 1846 0148 CE A5 74 02             		mov.B	628[r10], r5
 1847 014c 62 15                   		add	#1, r5
 1848 014e CB A5 74 02             		mov.B	r5, 628[r10]
 1849                             	.L180:
 1850                             	.LBE2:
1246:../src/wolfcrypt/src/hmac.c ****             int    tmpSz = (n == 1) ? 0 : hashSz;
 1851                             		.loc 2 1246 15
 1852 0152 ED A4 01                		mov.L	4[r10], r4
 1853 0155 A8 E5                   		mov.L	8[r6], r5
 1854 0157 47 54                   		cmp	r5, r4
 1855 0159 22 05 38 2B FF          		bltu	.L189
 1856 015e 2E 0C                   		bra	.L184
 1857                             	.L191:
 1858                             	.LBB3:
1252:../src/wolfcrypt/src/hmac.c ****             ret = wc_HmacUpdate(&myHmac, tmp, tmpSz);
 1859                             		.loc 2 1252 17
 1860 0160 03                      		nop
 1861 0161 09                      		bra	.L184
 1862                             	.L192:
1255:../src/wolfcrypt/src/hmac.c ****             ret = wc_HmacUpdate(&myHmac, info, infoSz);
 1863                             		.loc 2 1255 17
 1864 0162 03                      		nop
 1865 0163 0F                      		bra	.L184
 1866                             	.L193:
1258:../src/wolfcrypt/src/hmac.c ****             ret = wc_HmacUpdate(&myHmac, &n, 1);
 1867                             		.loc 2 1258 17
 1868 0164 03                      		nop
 1869 0165 0D                      		bra	.L184
 1870                             	.L194:
1261:../src/wolfcrypt/src/hmac.c ****             ret = wc_HmacFinal(&myHmac, tmp);
 1871                             		.loc 2 1261 17
 1872 0166 03                      		nop
 1873 0167 2E 03                   		bra	.L184
 1874                             	.L195:
1264:../src/wolfcrypt/src/hmac.c **** 
 1875                             		.loc 2 1264 17
 1876 0169 03                      		nop
 1877                             		.balign 8,3,2
 1878                             	.L184:
 1879                             	.LBE3:
1271:../src/wolfcrypt/src/hmac.c ****         }
1272:../src/wolfcrypt/src/hmac.c **** 
1273:../src/wolfcrypt/src/hmac.c ****         wc_HmacFree(&myHmac);
 1880                             		.loc 2 1273 9
 1881 016a 71 A5 54                		add	#0x54, r10, r5
 1882 016d EF 51                   		mov.L	r5, r1
 1883 016f 05 00 00 00             		bsr	_wc_HmacFree
1274:../src/wolfcrypt/src/hmac.c **** 
1275:../src/wolfcrypt/src/hmac.c ****         return ret;
 1884                             		.loc 2 1275 16
 1885 0173 EC A5                   		mov.L	[r10], r5
 1886                             	.L190:
1276:../src/wolfcrypt/src/hmac.c ****     }
 1887                             		.loc 2 1276 5 discriminator 1
 1888 0175 EF 51                   		mov.L	r5, r1
 1889 0177 3F 6A AA                		rtsd	#680, r6-r10
 1890                             	.LFE53:
 1892 017a 74 10 01 00 00 00       		.section	.text.wc_HKDF,"ax",@progbits
 1893                             		.global	_wc_HKDF
 1895                             	_wc_HKDF:
 1896                             	.LFB54:
1277:../src/wolfcrypt/src/hmac.c **** 
1278:../src/wolfcrypt/src/hmac.c ****     /* HMAC-KDF.
1279:../src/wolfcrypt/src/hmac.c ****      * RFC 5869 - HMAC-based Extract-and-Expand Key Derivation Function (HKDF).
1280:../src/wolfcrypt/src/hmac.c ****      *
1281:../src/wolfcrypt/src/hmac.c ****      * type     The hash algorithm type.
1282:../src/wolfcrypt/src/hmac.c ****      * inKey    The input keying material.
1283:../src/wolfcrypt/src/hmac.c ****      * inKeySz  The size of the input keying material.
1284:../src/wolfcrypt/src/hmac.c ****      * salt     The optional salt value.
1285:../src/wolfcrypt/src/hmac.c ****      * saltSz   The size of the salt.
1286:../src/wolfcrypt/src/hmac.c ****      * info     The application specific information.
1287:../src/wolfcrypt/src/hmac.c ****      * infoSz   The size of the application specific information.
1288:../src/wolfcrypt/src/hmac.c ****      * out      The output keying material.
1289:../src/wolfcrypt/src/hmac.c ****      * returns 0 on success, otherwise failure.
1290:../src/wolfcrypt/src/hmac.c ****      */
1291:../src/wolfcrypt/src/hmac.c ****     int wc_HKDF(int type, const byte* inKey, word32 inKeySz,
1292:../src/wolfcrypt/src/hmac.c ****                        const byte* salt,  word32 saltSz,
1293:../src/wolfcrypt/src/hmac.c ****                        const byte* info,  word32 infoSz,
1294:../src/wolfcrypt/src/hmac.c ****                        byte* out,         word32 outSz)
1295:../src/wolfcrypt/src/hmac.c ****     {
 1897                             		.loc 2 1295 5
 1898 0000 7E AA                   		push.l	r10
 1899                             	.LCFI25:
 1900 0002 7E A6                   		push.l	r6
 1901                             	.LCFI26:
 1902 0004 71 0A 94                		add	#-108, r0, r10
 1903                             	.LCFI27:
 1904 0007 71 A0 F4                		add	#-12, r10, r0
 1905                             	.LCFI28:
 1906 000a 75 46 78                		mov.L	#0x78, r6
 1907 000d 4B A6                   		add	r10, r6
 1908 000f E7 A1 12                		mov.L	r1, 72[r10]
 1909 0012 E7 A2 13                		mov.L	r2, 76[r10]
 1910 0015 E7 A3 14                		mov.L	r3, 80[r10]
 1911 0018 E7 A4 15                		mov.L	r4, 84[r10]
1296:../src/wolfcrypt/src/hmac.c ****         byte   prk[WC_MAX_DIGEST_SIZE];
1297:../src/wolfcrypt/src/hmac.c ****         int    hashSz = wc_HmacSizeByType(type);
 1912                             		.loc 2 1297 25
 1913 001b ED A1 12                		mov.L	72[r10], r1
 1914 001e 05 00 00 00             		bsr	_wc_HmacSizeByType
 1915 0022 E3 A1                   		mov.L	r1, [r10]
1298:../src/wolfcrypt/src/hmac.c ****         int    ret;
1299:../src/wolfcrypt/src/hmac.c **** 
1300:../src/wolfcrypt/src/hmac.c ****         if (hashSz < 0)
 1916                             		.loc 2 1300 12
 1917 0024 EC A5                   		mov.L	[r10], r5
 1918 0026 61 05                   		cmp	#0, r5
 1919 0028 28 08                   		bge	.L197
1301:../src/wolfcrypt/src/hmac.c ****             return BAD_FUNC_ARG;
 1920                             		.loc 2 1301 20
 1921 002a FB 5A 53 FF             		mov.L	#-173, r5
 1922 002e 2E 47                   		bra	.L200
 1923                             	.L197:
1302:../src/wolfcrypt/src/hmac.c **** 
1303:../src/wolfcrypt/src/hmac.c ****         ret = wc_HKDF_Extract(type, salt, saltSz, inKey, inKeySz, prk);
 1924                             		.loc 2 1303 15
 1925 0030 71 A5 08                		add	#8, r10, r5
 1926 0033 A0 0D                   		mov.L	r5, 4[r0]
 1927 0035 ED A5 14                		mov.L	80[r10], r5
 1928 0038 E3 05                   		mov.L	r5, [r0]
 1929 003a ED A4 13                		mov.L	76[r10], r4
 1930 003d EC 63                   		mov.L	[r6], r3
 1931 003f ED A2 15                		mov.L	84[r10], r2
 1932 0042 ED A1 12                		mov.L	72[r10], r1
 1933 0045 05 00 00 00             		bsr	_wc_HKDF_Extract
 1934 0049 E7 A1 01                		mov.L	r1, 4[r10]
1304:../src/wolfcrypt/src/hmac.c ****         if (ret != 0)
 1935                             		.loc 2 1304 12
 1936 004c ED A5 01                		mov.L	4[r10], r5
 1937 004f 61 05                   		cmp	#0, r5
 1938 0051 16                      		beq	.L199
1305:../src/wolfcrypt/src/hmac.c ****             return ret;
 1939                             		.loc 2 1305 20
 1940 0052 ED A5 01                		mov.L	4[r10], r5
 1941 0055 2E 20                   		bra	.L200
 1942                             	.L199:
1306:../src/wolfcrypt/src/hmac.c **** 
1307:../src/wolfcrypt/src/hmac.c ****         return wc_HKDF_Expand(type, prk, hashSz, info, infoSz, out, outSz);
 1943                             		.loc 2 1307 16
 1944 0057 EC A3                   		mov.L	[r10], r3
 1945 0059 71 A5 08                		add	#8, r10, r5
 1946 005c A9 64                   		mov.L	16[r6], r4
 1947 005e A0 84                   		mov.L	r4, 8[r0]
 1948 0060 A8 EC                   		mov.L	12[r6], r4
 1949 0062 A0 0C                   		mov.L	r4, 4[r0]
 1950 0064 A8 E4                   		mov.L	8[r6], r4
 1951 0066 E3 04                   		mov.L	r4, [r0]
 1952 0068 A8 6C                   		mov.L	4[r6], r4
 1953 006a EF 52                   		mov.L	r5, r2
 1954 006c ED A1 12                		mov.L	72[r10], r1
 1955 006f 05 00 00 00             		bsr	_wc_HKDF_Expand
 1956 0073 EF 15                   		mov.L	r1, r5
 1957                             	.L200:
1308:../src/wolfcrypt/src/hmac.c ****     }
 1958                             		.loc 2 1308 5 discriminator 1
 1959 0075 EF 51                   		mov.L	r5, r1
 1960 0077 71 00 78                		add	#0x78, r0
 1961 007a 7E B6                   		pop	r6
 1962 007c 7E BA                   		pop	r10
 1963 007e 02                      		rts
 1964                             	.LFE54:
 2255                             	.Letext0:
 2256                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 2257                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2258                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2259                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2260                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2261                             		.file 8 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 2262                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 2263                             		.file 10 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\incl
 2264                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
 2265                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/md5.h"
 2266                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha.h"
 2267                             		.file 14 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha256.h"
 2268                             		.file 15 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha512.h"
 2269                             		.file 16 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/hmac.h"
