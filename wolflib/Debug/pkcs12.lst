   1                             		.file	"pkcs12.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.ForceZero,"ax",@progbits
   6                             	_ForceZero:
   7                             	.LFB13:
   8                             		.file 1 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfcrypt/src/misc.c"
   1:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* misc.c
   2:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   3:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   5:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * This file is part of wolfSSL.
   6:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   7:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * it under the terms of the GNU General Public License as published by
   9:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * (at your option) any later version.
  11:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  12:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * GNU General Public License for more details.
  16:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  17:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * You should have received a copy of the GNU General Public License
  18:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * along with this program; if not, write to the Free Software
  19:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  21:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /*
  22:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  23:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** DESCRIPTION
  24:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** This module implements the arithmetic-shift right, left, byte swapping, XOR,
  25:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** masking and clearing memory logic.
  26:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  27:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** */
  28:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef HAVE_CONFIG_H
  29:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <config.h>
  30:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  31:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  32:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/settings.h>
  33:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  34:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLF_CRYPT_MISC_C
  35:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #define WOLF_CRYPT_MISC_C
  36:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  37:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/misc.h>
  38:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  39:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* inlining these functions is a huge speed increase and a small size decrease,
  40:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    because the functions are smaller than function call setup/cleanup, e.g.,
  41:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    md5 benchmark is twice as fast with inline.  If you don't want it, then
  42:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    define NO_INLINE and compile this file into wolfssl, otherwise it's used as
  43:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    a source header
  44:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  45:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  46:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef NO_INLINE
  47:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC
  48:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  49:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC static
  50:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  51:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  52:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* Check for if compiling misc.c when not needed. */
  53:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if !defined(WOLFSSL_MISC_INCLUDED) && !defined(NO_INLINE)
  54:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_IGNORE_FILE_WARN
  55:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #warning misc.c does not need to be compiled when using inline (NO_INLINE not defined)
  56:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
  57:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  58:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  59:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  60:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  61:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__ICCARM__)
  62:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <intrinsics.h>
  63:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  64:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  65:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  66:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef INTEL_INTRINSICS
  67:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  68:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <stdlib.h>      /* get intrinsic definitions */
  69:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  70:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* for non visual studio probably need no long version, 32 bit only
  71:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****      * i.e., _rotl and _rotr */
  72:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #pragma intrinsic(_lrotl, _lrotr)
  73:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  74:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  75:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  76:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotl(x, y) : x;
  77:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  78:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  79:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
  80:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  81:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotr(x, y) : x;
  82:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  83:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  84:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
  85:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  86:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <builtin.h>      /* get intrinsic definitions */
  87:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  88:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if !defined(NO_INLINE)
  89:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  90:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotlFixed(x, y) _builtin_rotl(x, y)
  91:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  92:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotrFixed(x, y) _builtin_rotr(x, y)
  93:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  94:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #else /* create real function */
  95:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  96:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  97:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  98:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotl(x, y);
  99:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 100:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 101:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 102:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 103:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotr(x, y);
 104:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 105:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 106:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 107:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 108:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else /* generic */
 109:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value. */
 110:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 111:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
 112:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 113:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x << y) | (x >> (sizeof(y) * 8 - y));
 114:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 115:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 116:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value. */
 117:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 118:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 119:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x >> y) | (x << (sizeof(y) * 8 - y));
 120:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 121:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 122:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 123:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 124:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef WC_RC2
 125:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 126:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value */
 127:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotlFixed16(word16 x, word16 y)
 128:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 129:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 130:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 131:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 132:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 133:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value */
 134:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotrFixed16(word16 x, word16 y)
 135:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 136:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 137:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 138:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 139:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WC_RC2 */
 140:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 141:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of 32-bit word value. */
 142:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__CCRX__) && !defined(NO_INLINE) /* shortest version for CC-RX */
 143:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define ByteReverseWord32(value) _builtin_revl(value)
 144:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 145:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
 146:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 147:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef PPC_INTRINSICS
 148:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* PPC: load reverse indexed instruction */
 149:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__lwbrx(&value,0);
 150:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__ICCARM__)
 151:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__REV(value);
 152:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(KEIL_INTRINSICS)
 153:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__rev(value);
 154:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
 155:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)_builtin_revl(value);
 156:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLF_ALLOW_BUILTIN) && \
 157:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 158:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__builtin_bswap32(value);
 159:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 160:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       defined(__aarch64__)
 161:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 162:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV32 %0, %0  \n"
 163:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 164:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 165:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 166:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 167:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 168:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       (defined(__thumb__) || defined(__arm__))
 169:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 170:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV %0, %0  \n"
 171:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 172:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 173:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 174:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 175:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(FAST_ROTATE)
 176:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 5 instructions with rotate instruction, 9 without */
 177:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (rotrFixed(value, 8U) & 0xff00ff00) |
 178:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****            (rotlFixed(value, 8U) & 0x00ff00ff);
 179:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 180:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 6 instructions with rotate instruction, 8 without */
 181:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 182:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed(value, 16U);
 183:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 184:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 185:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* __CCRX__ */
 186:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of words array of a given count. */
 187:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
 188:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                     word32 byteCount)
 189:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 190:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word32), i;
 191:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 193:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
 194:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 195:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 196:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 197:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WORD64_AVAILABLE) && !defined(WOLFSSL_NO_WORD64_OPS)
 198:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 199:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 200:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotlFixed64(word64 x, word64 y)
 201:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 202:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 203:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 204:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 205:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 206:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotrFixed64(word64 x, word64 y)
 207:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 208:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 209:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 210:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 211:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 212:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 ByteReverseWord64(word64 value)
 213:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 214:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WOLF_ALLOW_BUILTIN) && defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 215:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)__builtin_bswap64(value);
 216:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFCRYPT_SLOW_WORD64)
 217:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)((word64)ByteReverseWord32((word32) value)) << 32 |
 218:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         (word64)ByteReverseWord32((word32)(value   >> 32));
 219:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 220:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFF00FF00FF00FF00)) >> 8) |
 221:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x00FF00FF00FF00FF)) << 8);
 222:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFFFF0000FFFF0000)) >> 16) |
 223:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x0000FFFF0000FFFF)) << 16);
 224:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed64(value, 32U);
 225:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 226:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 227:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 228:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 229:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords64(word64* out, const word64* in,
 230:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                       word32 byteCount)
 231:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 232:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word64), i;
 233:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 235:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 236:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 237:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 238:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 239:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WORD64_AVAILABLE && !WOLFSSL_NO_WORD64_OPS */
 240:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 241:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_XOR_OPS
 242:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 243:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 244:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWordsOut(wolfssl_word* r, const wolfssl_word* a,
 245:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                      const wolfssl_word* b, word32 n)
 246:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 247:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 248:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 249:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] = a[i] ^ b[i];
 250:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 251:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 252:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 253:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 254:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 255:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbufout(void*out, const void* buf, const void* mask,
 256:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                    word32 count)
 257:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 258:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)out | (wc_ptr_t)buf | (wc_ptr_t)mask | count) %
 259:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                          WOLFSSL_WORD_SIZE == 0)
 260:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWordsOut( (wolfssl_word*)out, (wolfssl_word*)buf,
 261:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                      (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 262:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 263:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 264:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       o = (byte*)out;
 265:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 266:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 267:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) o[i] = b[i] ^ m[i];
 269:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 270:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 271:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 272:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 273:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 274:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWords(wolfssl_word* r, const wolfssl_word* a, word32 n)
 275:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 276:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 277:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 278:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] ^= a[i];
 279:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 280:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 281:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 282:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 283:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 284:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
 285:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 286:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)buf | (wc_ptr_t)mask | count) % WOLFSSL_WORD_SIZE == 0)
 287:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWords( (wolfssl_word*)buf,
 288:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                   (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 289:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 290:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 291:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 292:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 293:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) b[i] ^= m[i];
 295:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 296:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 297:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 298:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 299:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_FORCE_ZERO
 300:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine fills the first len bytes of the memory area pointed by mem
 301:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    with zeros. It ensures compiler optimizations doesn't skip it  */
 302:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
 303:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
   9                             		.loc 1 303 1
  10 0000 7E AA                   		push.l	r10
  11                             	.LCFI0:
  12 0002 71 0A F4                		add	#-12, r0, r10
  13                             	.LCFI1:
  14 0005 EF A0                   		mov.L	r10, r0
  15 0007 E7 A1 01                		mov.L	r1, 4[r10]
  16 000a E7 A2 02                		mov.L	r2, 8[r10]
 304:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile byte* z = (volatile byte*)mem;
  17                             		.loc 1 304 20
  18 000d ED A5 01                		mov.L	4[r10], r5
  19 0010 E3 A5                   		mov.L	r5, [r10]
 305:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 306:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if (defined(WOLFSSL_X86_64_BUILD) || defined(WOLFSSL_AARCH64_BUILD)) \
 307:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****             && defined(WORD64_AVAILABLE)
 308:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile word64* w;
 309:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_UNALIGNED_64BIT_ACCESS
 310:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 l = (sizeof(word64) - ((size_t)z & (sizeof(word64)-1))) &
 311:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                              (sizeof(word64)-1);
 312:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 313:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         if (len < l) l = len;
 314:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         len -= l;
 315:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         while (l--) *z++ = 0;
 316:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 317:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
 318:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         *w++ = 0;
 319:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     z = (volatile byte*)w;
 320:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 321:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 322:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     while (len--) *z++ = 0;
  20                             		.loc 1 322 11
  21 0012 2E 0C                   		bra	.L2
  22                             	.L3:
  23                             		.loc 1 322 21 discriminator 2
  24 0014 EC A5                   		mov.L	[r10], r5
  25 0016 71 54 01                		add	#1, r5, r4
  26 0019 E3 A4                   		mov.L	r4, [r10]
  27                             		.loc 1 322 24 discriminator 2
  28 001b F8 54 00                		mov.B	#0, [r5]
  29                             	.L2:
  30                             		.loc 1 322 15 discriminator 1
  31 001e ED A5 02                		mov.L	8[r10], r5
  32 0021 71 54 FF                		add	#-1, r5, r4
  33 0024 E7 A4 02                		mov.L	r4, 8[r10]
  34                             		.loc 1 322 11 discriminator 1
  35 0027 61 05                   		cmp	#0, r5
  36 0029 21 EB                   		bne	.L3
 323:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
  37                             		.loc 1 323 1
  38 002b 03                      		nop
  39 002c 3F AA 04                		rtsd	#16, r10-r10
  40                             	.LFE13:
  42                             		.section	.rodata.WC_PKCS12_ENCRYPTED_OID,"a"
  45                             	_WC_PKCS12_ENCRYPTED_OID:
  46 0000 2A                      		.byte	42
  47 0001 86                      		.byte	-122
  48 0002 48                      		.byte	0x48
  49 0003 86                      		.byte	-122
  50 0004 F7                      		.byte	-9
  51 0005 0D                      		.byte	13
  52 0006 01                      		.byte	1
  53 0007 07                      		.byte	7
  54 0008 06                      		.byte	6
  55                             		.section	.rodata.WC_PKCS12_DATA_OID,"a"
  58                             	_WC_PKCS12_DATA_OID:
  59 0000 2A                      		.byte	42
  60 0001 86                      		.byte	-122
  61 0002 48                      		.byte	0x48
  62 0003 86                      		.byte	-122
  63 0004 F7                      		.byte	-9
  64 0005 0D                      		.byte	13
  65 0006 01                      		.byte	1
  66 0007 07                      		.byte	7
  67 0008 01                      		.byte	1
  68                             		.section	.rodata.WC_PKCS12_CertBag_Type1_OID,"a"
  71                             	_WC_PKCS12_CertBag_Type1_OID:
  72 0000 2A                      		.byte	42
  73 0001 86                      		.byte	-122
  74 0002 48                      		.byte	0x48
  75 0003 86                      		.byte	-122
  76 0004 F7                      		.byte	-9
  77 0005 0D                      		.byte	13
  78 0006 01                      		.byte	1
  79 0007 09                      		.byte	9
  80 0008 16                      		.byte	22
  81 0009 01                      		.byte	1
  82                             		.section	.rodata.WC_PKCS12_CertBag_OID,"a"
  85                             	_WC_PKCS12_CertBag_OID:
  86 0000 2A                      		.byte	42
  87 0001 86                      		.byte	-122
  88 0002 48                      		.byte	0x48
  89 0003 86                      		.byte	-122
  90 0004 F7                      		.byte	-9
  91 0005 0D                      		.byte	13
  92 0006 01                      		.byte	1
  93 0007 0C                      		.byte	12
  94 0008 0A                      		.byte	10
  95 0009 01                      		.byte	1
  96 000a 03                      		.byte	3
  97                             		.section	.rodata.WC_PKCS12_KeyBag_OID,"a"
 100                             	_WC_PKCS12_KeyBag_OID:
 101 0000 2A                      		.byte	42
 102 0001 86                      		.byte	-122
 103 0002 48                      		.byte	0x48
 104 0003 86                      		.byte	-122
 105 0004 F7                      		.byte	-9
 106 0005 0D                      		.byte	13
 107 0006 01                      		.byte	1
 108 0007 0C                      		.byte	12
 109 0008 0A                      		.byte	10
 110 0009 01                      		.byte	1
 111 000a 01                      		.byte	1
 112                             		.section	.rodata.WC_PKCS12_ShroudedKeyBag_OID,"a"
 115                             	_WC_PKCS12_ShroudedKeyBag_OID:
 116 0000 2A                      		.byte	42
 117 0001 86                      		.byte	-122
 118 0002 48                      		.byte	0x48
 119 0003 86                      		.byte	-122
 120 0004 F7                      		.byte	-9
 121 0005 0D                      		.byte	13
 122 0006 01                      		.byte	1
 123 0007 0C                      		.byte	12
 124 0008 0A                      		.byte	10
 125 0009 01                      		.byte	1
 126 000a 02                      		.byte	2
 127                             		.section C,"a",@progbits
 128                             		.p2align 2
 129                             	.LC0:
 130 0000 4D 65 6D 6F 72 79 20 69 		.string	"Memory issue when creating WC_PKCS12 struct"
 130      73 73 75 65 20 77 68 65 
 130      6E 20 63 72 65 61 74 69 
 130      6E 67 20 57 43 5F 50 4B 
 130      43 53 31 32 20 73 74 72 
 131                             		.section	.text.wc_PKCS12_new,"ax",@progbits
 132                             		.global	_wc_PKCS12_new
 134                             	_wc_PKCS12_new:
 135                             	.LFB43:
 136                             		.file 2 "../src/wolfcrypt/src/pkcs12.c"
   1:../src/wolfcrypt/src/pkcs12.c **** /* pkcs12.c
   2:../src/wolfcrypt/src/pkcs12.c ****  *
   3:../src/wolfcrypt/src/pkcs12.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/pkcs12.c ****  *
   5:../src/wolfcrypt/src/pkcs12.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/pkcs12.c ****  *
   7:../src/wolfcrypt/src/pkcs12.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/pkcs12.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/pkcs12.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/pkcs12.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/pkcs12.c ****  *
  12:../src/wolfcrypt/src/pkcs12.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/pkcs12.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/pkcs12.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/pkcs12.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/pkcs12.c ****  *
  17:../src/wolfcrypt/src/pkcs12.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/pkcs12.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/pkcs12.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/pkcs12.c ****  */
  21:../src/wolfcrypt/src/pkcs12.c **** 
  22:../src/wolfcrypt/src/pkcs12.c **** /* PKCS#12 allows storage of key and certificates into containers */
  23:../src/wolfcrypt/src/pkcs12.c **** 
  24:../src/wolfcrypt/src/pkcs12.c **** #ifdef HAVE_CONFIG_H
  25:../src/wolfcrypt/src/pkcs12.c ****     #include <config.h>
  26:../src/wolfcrypt/src/pkcs12.c **** #endif
  27:../src/wolfcrypt/src/pkcs12.c **** 
  28:../src/wolfcrypt/src/pkcs12.c **** #include <wolfssl/wolfcrypt/settings.h>
  29:../src/wolfcrypt/src/pkcs12.c **** 
  30:../src/wolfcrypt/src/pkcs12.c **** #if defined(HAVE_PKCS12) && \
  31:../src/wolfcrypt/src/pkcs12.c ****     !defined(NO_ASN) && !defined(NO_PWDBASED) && !defined(NO_HMAC)
  32:../src/wolfcrypt/src/pkcs12.c **** 
  33:../src/wolfcrypt/src/pkcs12.c **** #include <wolfssl/wolfcrypt/asn.h>
  34:../src/wolfcrypt/src/pkcs12.c **** #include <wolfssl/wolfcrypt/asn_public.h>
  35:../src/wolfcrypt/src/pkcs12.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  36:../src/wolfcrypt/src/pkcs12.c **** #include <wolfssl/wolfcrypt/hmac.h>
  37:../src/wolfcrypt/src/pkcs12.c **** #include <wolfssl/wolfcrypt/logging.h>
  38:../src/wolfcrypt/src/pkcs12.c **** #ifdef NO_INLINE
  39:../src/wolfcrypt/src/pkcs12.c ****     #include <wolfssl/wolfcrypt/misc.h>
  40:../src/wolfcrypt/src/pkcs12.c **** #else
  41:../src/wolfcrypt/src/pkcs12.c ****     #define WOLFSSL_MISC_INCLUDED
  42:../src/wolfcrypt/src/pkcs12.c ****     #include <wolfcrypt/src/misc.c>
  43:../src/wolfcrypt/src/pkcs12.c **** #endif
  44:../src/wolfcrypt/src/pkcs12.c **** #include <wolfssl/wolfcrypt/pkcs12.h>
  45:../src/wolfcrypt/src/pkcs12.c **** #include <wolfssl/wolfcrypt/pwdbased.h>
  46:../src/wolfcrypt/src/pkcs12.c **** #include <wolfssl/wolfcrypt/hash.h>
  47:../src/wolfcrypt/src/pkcs12.c **** 
  48:../src/wolfcrypt/src/pkcs12.c **** 
  49:../src/wolfcrypt/src/pkcs12.c **** #define ERROR_OUT(err, eLabel) { ret = (err); goto eLabel; }
  50:../src/wolfcrypt/src/pkcs12.c **** 
  51:../src/wolfcrypt/src/pkcs12.c **** enum {
  52:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12_KeyBag = 667,
  53:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12_ShroudedKeyBag = 668,
  54:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12_CertBag = 669,
  55:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12_CertBag_Type1 = 675,
  56:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12_CrlBag = 670,
  57:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12_SecretBag = 671,
  58:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12_SafeContentsBag = 672,
  59:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12_DATA = 651,
  60:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12_ENCRYPTED_DATA = 656,
  61:../src/wolfcrypt/src/pkcs12.c **** 
  62:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12_DATA_OBJ_SZ = 11,
  63:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12_MAC_SALT_SZ = 8,
  64:../src/wolfcrypt/src/pkcs12.c **** };
  65:../src/wolfcrypt/src/pkcs12.c **** 
  66:../src/wolfcrypt/src/pkcs12.c **** static const byte WC_PKCS12_ENCRYPTED_OID[] =
  67:../src/wolfcrypt/src/pkcs12.c ****                          {0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x06};
  68:../src/wolfcrypt/src/pkcs12.c **** static const byte WC_PKCS12_DATA_OID[] =
  69:../src/wolfcrypt/src/pkcs12.c ****                          {0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x01};
  70:../src/wolfcrypt/src/pkcs12.c **** static const byte WC_PKCS12_CertBag_Type1_OID[] =
  71:../src/wolfcrypt/src/pkcs12.c ****                    {0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x16, 0x01};
  72:../src/wolfcrypt/src/pkcs12.c **** static const byte WC_PKCS12_CertBag_OID[] =
  73:../src/wolfcrypt/src/pkcs12.c ****              {0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x0c, 0x0a, 0x01, 0x03};
  74:../src/wolfcrypt/src/pkcs12.c **** static const byte WC_PKCS12_KeyBag_OID[] =
  75:../src/wolfcrypt/src/pkcs12.c ****              {0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x0c, 0x0a, 0x01, 0x01};
  76:../src/wolfcrypt/src/pkcs12.c **** static const byte WC_PKCS12_ShroudedKeyBag_OID[] =
  77:../src/wolfcrypt/src/pkcs12.c ****              {0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x0c, 0x0a, 0x01, 0x02};
  78:../src/wolfcrypt/src/pkcs12.c **** 
  79:../src/wolfcrypt/src/pkcs12.c **** 
  80:../src/wolfcrypt/src/pkcs12.c **** typedef struct ContentInfo {
  81:../src/wolfcrypt/src/pkcs12.c ****     byte* data;
  82:../src/wolfcrypt/src/pkcs12.c ****     struct ContentInfo* next;
  83:../src/wolfcrypt/src/pkcs12.c ****     word32 encC;  /* encryptedContent */
  84:../src/wolfcrypt/src/pkcs12.c ****     word32 dataSz;
  85:../src/wolfcrypt/src/pkcs12.c ****     int type; /* DATA / encrypted / enveloped */
  86:../src/wolfcrypt/src/pkcs12.c **** } ContentInfo;
  87:../src/wolfcrypt/src/pkcs12.c **** 
  88:../src/wolfcrypt/src/pkcs12.c **** 
  89:../src/wolfcrypt/src/pkcs12.c **** typedef struct AuthenticatedSafe {
  90:../src/wolfcrypt/src/pkcs12.c ****     ContentInfo* CI;
  91:../src/wolfcrypt/src/pkcs12.c ****     byte* data; /* T contents.... */
  92:../src/wolfcrypt/src/pkcs12.c ****     word32 oid; /* encrypted or not */
  93:../src/wolfcrypt/src/pkcs12.c ****     word32 numCI; /* number of Content Info structs */
  94:../src/wolfcrypt/src/pkcs12.c ****     word32 dataSz;
  95:../src/wolfcrypt/src/pkcs12.c **** } AuthenticatedSafe;
  96:../src/wolfcrypt/src/pkcs12.c **** 
  97:../src/wolfcrypt/src/pkcs12.c **** 
  98:../src/wolfcrypt/src/pkcs12.c **** typedef struct MacData {
  99:../src/wolfcrypt/src/pkcs12.c ****     byte* digest;
 100:../src/wolfcrypt/src/pkcs12.c ****     byte* salt;
 101:../src/wolfcrypt/src/pkcs12.c ****     word32 oid;
 102:../src/wolfcrypt/src/pkcs12.c ****     word32 digestSz;
 103:../src/wolfcrypt/src/pkcs12.c ****     word32 saltSz;
 104:../src/wolfcrypt/src/pkcs12.c ****     int itt; /* number of iterations when creating HMAC key */
 105:../src/wolfcrypt/src/pkcs12.c **** } MacData;
 106:../src/wolfcrypt/src/pkcs12.c **** 
 107:../src/wolfcrypt/src/pkcs12.c **** 
 108:../src/wolfcrypt/src/pkcs12.c **** struct WC_PKCS12 {
 109:../src/wolfcrypt/src/pkcs12.c ****     void* heap;
 110:../src/wolfcrypt/src/pkcs12.c ****     AuthenticatedSafe* safe;
 111:../src/wolfcrypt/src/pkcs12.c ****     MacData* signData;
 112:../src/wolfcrypt/src/pkcs12.c ****     word32 oid; /* DATA / Enveloped DATA ... */
 113:../src/wolfcrypt/src/pkcs12.c **** };
 114:../src/wolfcrypt/src/pkcs12.c **** 
 115:../src/wolfcrypt/src/pkcs12.c **** 
 116:../src/wolfcrypt/src/pkcs12.c **** /* for friendlyName, localKeyId .... */
 117:../src/wolfcrypt/src/pkcs12.c **** typedef struct WC_PKCS12_ATTRIBUTE {
 118:../src/wolfcrypt/src/pkcs12.c ****     byte* data;
 119:../src/wolfcrypt/src/pkcs12.c ****     word32 oid;
 120:../src/wolfcrypt/src/pkcs12.c ****     word32 dataSz;
 121:../src/wolfcrypt/src/pkcs12.c **** } WC_PKCS12_ATTRIBUTE;
 122:../src/wolfcrypt/src/pkcs12.c **** 
 123:../src/wolfcrypt/src/pkcs12.c **** 
 124:../src/wolfcrypt/src/pkcs12.c **** WC_PKCS12* wc_PKCS12_new(void)
 125:../src/wolfcrypt/src/pkcs12.c **** {
 137                             		.loc 2 125 1
 138 0000 7E AA                   		push.l	r10
 139                             	.LCFI2:
 140 0002 71 0A FC                		add	#-4, r0, r10
 141                             	.LCFI3:
 142 0005 EF A0                   		mov.L	r10, r0
 126:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12* pkcs12 = (WC_PKCS12*)XMALLOC(sizeof(WC_PKCS12),
 143                             		.loc 2 126 37
 144 0007 75 41 10                		mov.L	#16, r1
 145 000a 05 00 00 00             		bsr	_wolfSSL_Malloc
 146 000e E3 A1                   		mov.L	r1, [r10]
 127:../src/wolfcrypt/src/pkcs12.c ****                                                       NULL, DYNAMIC_TYPE_PKCS);
 128:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12 == NULL) {
 147                             		.loc 2 128 8
 148 0010 EC A5                   		mov.L	[r10], r5
 149 0012 61 05                   		cmp	#0, r5
 150 0014 21 10                   		bne	.L5
 129:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Memory issue when creating WC_PKCS12 struct");
 151                             		.loc 2 129 9
 152 0016 FB 12 00 00 00 00       		mov.L	#.LC0, r1
 153 001c 05 00 00 00             		bsr	_WOLFSSL_MSG
 130:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 154                             		.loc 2 130 16
 155 0020 66 05                   		mov.L	#0, r5
 156 0022 2E 0F                   		bra	.L6
 157                             	.L5:
 131:../src/wolfcrypt/src/pkcs12.c ****     }
 132:../src/wolfcrypt/src/pkcs12.c **** 
 133:../src/wolfcrypt/src/pkcs12.c ****     XMEMSET(pkcs12, 0, sizeof(WC_PKCS12));
 158                             		.loc 2 133 5
 159 0024 75 43 10                		mov.L	#16, r3
 160 0027 66 02                   		mov.L	#0, r2
 161 0029 EC A1                   		mov.L	[r10], r1
 162 002b 05 00 00 00             		bsr	_memset
 134:../src/wolfcrypt/src/pkcs12.c **** 
 135:../src/wolfcrypt/src/pkcs12.c ****     return pkcs12;
 163                             		.loc 2 135 12
 164 002f EC A5                   		mov.L	[r10], r5
 165                             	.L6:
 136:../src/wolfcrypt/src/pkcs12.c **** }
 166                             		.loc 2 136 1
 167 0031 EF 51                   		mov.L	r5, r1
 168 0033 3F AA 02                		rtsd	#8, r10-r10
 169                             	.LFE43:
 171                             		.section	.text.freeSafe,"ax",@progbits
 173                             	_freeSafe:
 174                             	.LFB44:
 137:../src/wolfcrypt/src/pkcs12.c **** 
 138:../src/wolfcrypt/src/pkcs12.c **** 
 139:../src/wolfcrypt/src/pkcs12.c **** static void freeSafe(AuthenticatedSafe* safe, void* heap)
 140:../src/wolfcrypt/src/pkcs12.c **** {
 175                             		.loc 2 140 1
 176 0000 7E AA                   		push.l	r10
 177                             	.LCFI4:
 178 0002 71 0A E4                		add	#-28, r0, r10
 179                             	.LCFI5:
 180 0005 EF A0                   		mov.L	r10, r0
 181 0007 E7 A1 05                		mov.L	r1, 20[r10]
 182 000a E7 A2 06                		mov.L	r2, 24[r10]
 141:../src/wolfcrypt/src/pkcs12.c ****     int i;
 142:../src/wolfcrypt/src/pkcs12.c **** 
 143:../src/wolfcrypt/src/pkcs12.c ****     if (safe == NULL) {
 183                             		.loc 2 143 8
 184 000d ED A5 05                		mov.L	20[r10], r5
 185 0010 61 05                   		cmp	#0, r5
 186 0012 20 70                   		beq	.L14
 144:../src/wolfcrypt/src/pkcs12.c ****         return;
 145:../src/wolfcrypt/src/pkcs12.c ****     }
 146:../src/wolfcrypt/src/pkcs12.c **** 
 147:../src/wolfcrypt/src/pkcs12.c ****     /* free content info structs */
 148:../src/wolfcrypt/src/pkcs12.c ****     for (i = safe->numCI; i > 0; i--) {
 187                             		.loc 2 148 18
 188 0014 ED A5 05                		mov.L	20[r10], r5
 189 0017 A8 DD                   		mov.L	12[r5], r5
 190                             		.loc 2 148 12
 191 0019 E3 A5                   		mov.L	r5, [r10]
 192                             		.loc 2 148 5
 193 001b 2E 2D                   		bra	.L10
 194                             	.L12:
 195                             	.LBB2:
 149:../src/wolfcrypt/src/pkcs12.c ****         ContentInfo* ci = safe->CI;
 196                             		.loc 2 149 22
 197 001d ED A5 05                		mov.L	20[r10], r5
 198 0020 EC 55                   		mov.L	[r5], r5
 199 0022 E7 A5 01                		mov.L	r5, 4[r10]
 150:../src/wolfcrypt/src/pkcs12.c ****         safe->CI = ci->next;
 200                             		.loc 2 150 22
 201 0025 ED A5 01                		mov.L	4[r10], r5
 202 0028 A8 5C                   		mov.L	4[r5], r4
 203                             		.loc 2 150 18
 204 002a ED A5 05                		mov.L	20[r10], r5
 205 002d E3 54                   		mov.L	r4, [r5]
 206                             	.LBB3:
 151:../src/wolfcrypt/src/pkcs12.c ****         XFREE(ci, heap, DYNAMIC_TYPE_PKCS);
 207                             		.loc 2 151 9
 208 002f ED A5 01                		mov.L	4[r10], r5
 209 0032 E7 A5 02                		mov.L	r5, 8[r10]
 210 0035 ED A5 02                		mov.L	8[r10], r5
 211 0038 61 05                   		cmp	#0, r5
 212 003a 10                      		beq	.L11
 213                             		.loc 2 151 9 is_stmt 0 discriminator 1
 214 003b ED A1 02                		mov.L	8[r10], r1
 215 003e 05 00 00 00             		bsr	_wolfSSL_Free
 216                             	.L11:
 217                             	.LBE3:
 218                             	.LBE2:
 148:../src/wolfcrypt/src/pkcs12.c ****         ContentInfo* ci = safe->CI;
 219                             		.loc 2 148 35 is_stmt 1 discriminator 2
 220 0042 EC A5                   		mov.L	[r10], r5
 221 0044 60 15                   		sub	#1, r5
 222 0046 E3 A5                   		mov.L	r5, [r10]
 223                             	.L10:
 148:../src/wolfcrypt/src/pkcs12.c ****         ContentInfo* ci = safe->CI;
 224                             		.loc 2 148 5 discriminator 1
 225 0048 EC A5                   		mov.L	[r10], r5
 226 004a 61 05                   		cmp	#0, r5
 227 004c 2A D1                   		bgt	.L12
 152:../src/wolfcrypt/src/pkcs12.c ****     }
 153:../src/wolfcrypt/src/pkcs12.c ****     if (safe->data != NULL) {
 228                             		.loc 2 153 13
 229 004e ED A5 05                		mov.L	20[r10], r5
 230 0051 A8 5D                   		mov.L	4[r5], r5
 231                             		.loc 2 153 8
 232 0053 61 05                   		cmp	#0, r5
 233 0055 20 17                   		beq	.L13
 234                             	.LBB4:
 154:../src/wolfcrypt/src/pkcs12.c ****         XFREE(safe->data, heap, DYNAMIC_TYPE_PKCS);
 235                             		.loc 2 154 9
 236 0057 ED A5 05                		mov.L	20[r10], r5
 237 005a A8 5D                   		mov.L	4[r5], r5
 238 005c E7 A5 03                		mov.L	r5, 12[r10]
 239 005f ED A5 03                		mov.L	12[r10], r5
 240 0062 61 05                   		cmp	#0, r5
 241 0064 10                      		beq	.L13
 242                             		.loc 2 154 9 is_stmt 0 discriminator 1
 243 0065 ED A1 03                		mov.L	12[r10], r1
 244 0068 05 00 00 00             		bsr	_wolfSSL_Free
 245                             	.L13:
 246                             	.LBE4:
 247                             	.LBB5:
 155:../src/wolfcrypt/src/pkcs12.c ****     }
 156:../src/wolfcrypt/src/pkcs12.c ****     XFREE(safe, heap, DYNAMIC_TYPE_PKCS);
 248                             		.loc 2 156 5 is_stmt 1
 249 006c ED A5 05                		mov.L	20[r10], r5
 250 006f E7 A5 04                		mov.L	r5, 16[r10]
 251 0072 ED A5 04                		mov.L	16[r10], r5
 252 0075 61 05                   		cmp	#0, r5
 253 0077 20 0C                   		beq	.L7
 254                             		.loc 2 156 5 is_stmt 0 discriminator 1
 255 0079 ED A1 04                		mov.L	16[r10], r1
 256 007c 05 00 00 00             		bsr	_wolfSSL_Free
 257 0080 2E 03                   		bra	.L7
 258                             	.L14:
 259                             	.LBE5:
 144:../src/wolfcrypt/src/pkcs12.c ****     }
 260                             		.loc 2 144 9 is_stmt 1
 261 0082 03                      		nop
 262                             	.L7:
 157:../src/wolfcrypt/src/pkcs12.c **** 
 158:../src/wolfcrypt/src/pkcs12.c ****     (void)heap;
 159:../src/wolfcrypt/src/pkcs12.c **** }
 263                             		.loc 2 159 1
 264 0083 3F AA 08                		rtsd	#32, r10-r10
 265                             	.LFE44:
 267                             		.section C,"a",@progbits
 268                             		.p2align 2
 269                             	.LC1:
 270 002c 54 72 79 69 6E 67 20 74 		.string	"Trying to free null WC_PKCS12 object"
 270      6F 20 66 72 65 65 20 6E 
 270      75 6C 6C 20 57 43 5F 50 
 270      4B 43 53 31 32 20 6F 62 
 270      6A 65 63 74 00 
 271                             		.section	.text.wc_PKCS12_free,"ax",@progbits
 272                             		.global	_wc_PKCS12_free
 274                             	_wc_PKCS12_free:
 275                             	.LFB45:
 160:../src/wolfcrypt/src/pkcs12.c **** 
 161:../src/wolfcrypt/src/pkcs12.c **** 
 162:../src/wolfcrypt/src/pkcs12.c **** void wc_PKCS12_free(WC_PKCS12* pkcs12)
 163:../src/wolfcrypt/src/pkcs12.c **** {
 276                             		.loc 2 163 1
 277 0000 7E AA                   		push.l	r10
 278                             	.LCFI6:
 279 0002 71 0A E8                		add	#-24, r0, r10
 280                             	.LCFI7:
 281 0005 EF A0                   		mov.L	r10, r0
 282 0007 E7 A1 05                		mov.L	r1, 20[r10]
 164:../src/wolfcrypt/src/pkcs12.c ****     void* heap;
 165:../src/wolfcrypt/src/pkcs12.c **** 
 166:../src/wolfcrypt/src/pkcs12.c ****     /* if null pointer is passed in do nothing */
 167:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12 == NULL) {
 283                             		.loc 2 167 8
 284 000a ED A5 05                		mov.L	20[r10], r5
 285 000d 61 05                   		cmp	#0, r5
 286 000f 21 0F                   		bne	.L16
 168:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Trying to free null WC_PKCS12 object");
 287                             		.loc 2 168 9
 288 0011 FB 12 2C 00 00 00       		mov.L	#.LC1, r1
 289 0017 05 00 00 00             		bsr	_WOLFSSL_MSG
 169:../src/wolfcrypt/src/pkcs12.c ****         return;
 290                             		.loc 2 169 9
 291 001b 38 AB 00                		bra	.L15
 292                             	.L16:
 170:../src/wolfcrypt/src/pkcs12.c ****     }
 171:../src/wolfcrypt/src/pkcs12.c **** 
 172:../src/wolfcrypt/src/pkcs12.c ****     heap = pkcs12->heap;
 293                             		.loc 2 172 10
 294 001e ED A5 05                		mov.L	20[r10], r5
 295 0021 EC 55                   		mov.L	[r5], r5
 296 0023 E3 A5                   		mov.L	r5, [r10]
 173:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12->safe != NULL) {
 297                             		.loc 2 173 15
 298 0025 ED A5 05                		mov.L	20[r10], r5
 299 0028 A8 5D                   		mov.L	4[r5], r5
 300                             		.loc 2 173 8
 301 002a 61 05                   		cmp	#0, r5
 302 002c 20 0F                   		beq	.L18
 174:../src/wolfcrypt/src/pkcs12.c ****         freeSafe(pkcs12->safe, heap);
 303                             		.loc 2 174 9
 304 002e ED A5 05                		mov.L	20[r10], r5
 305 0031 A8 5D                   		mov.L	4[r5], r5
 306 0033 EC A2                   		mov.L	[r10], r2
 307 0035 EF 51                   		mov.L	r5, r1
 308 0037 05 00 00 00             		bsr	_freeSafe
 309                             	.L18:
 175:../src/wolfcrypt/src/pkcs12.c ****     }
 176:../src/wolfcrypt/src/pkcs12.c **** 
 177:../src/wolfcrypt/src/pkcs12.c ****     /* free mac data */
 178:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12->signData != NULL) {
 310                             		.loc 2 178 15
 311 003b ED A5 05                		mov.L	20[r10], r5
 312 003e A8 D5                   		mov.L	8[r5], r5
 313                             		.loc 2 178 8
 314 0040 61 05                   		cmp	#0, r5
 315 0042 20 71                   		beq	.L19
 179:../src/wolfcrypt/src/pkcs12.c ****         if (pkcs12->signData->digest != NULL) {
 316                             		.loc 2 179 19
 317 0044 ED A5 05                		mov.L	20[r10], r5
 318 0047 A8 D5                   		mov.L	8[r5], r5
 319                             		.loc 2 179 29
 320 0049 EC 55                   		mov.L	[r5], r5
 321                             		.loc 2 179 12
 322 004b 61 05                   		cmp	#0, r5
 323 004d 20 21                   		beq	.L20
 324                             	.LBB6:
 180:../src/wolfcrypt/src/pkcs12.c ****             XFREE(pkcs12->signData->digest, heap, DYNAMIC_TYPE_DIGEST);
 325                             		.loc 2 180 13
 326 004f ED A5 05                		mov.L	20[r10], r5
 327 0052 A8 D5                   		mov.L	8[r5], r5
 328 0054 EC 55                   		mov.L	[r5], r5
 329 0056 E7 A5 01                		mov.L	r5, 4[r10]
 330 0059 ED A5 01                		mov.L	4[r10], r5
 331 005c 61 05                   		cmp	#0, r5
 332 005e 10                      		beq	.L21
 333                             		.loc 2 180 13 is_stmt 0 discriminator 1
 334 005f ED A1 01                		mov.L	4[r10], r1
 335 0062 05 00 00 00             		bsr	_wolfSSL_Free
 336                             	.L21:
 337                             	.LBE6:
 181:../src/wolfcrypt/src/pkcs12.c ****             pkcs12->signData->digest = NULL;
 338                             		.loc 2 181 19 is_stmt 1
 339 0066 ED A5 05                		mov.L	20[r10], r5
 340 0069 A8 D5                   		mov.L	8[r5], r5
 341                             		.loc 2 181 38
 342 006b F8 56 00                		mov.L	#0, [r5]
 343                             	.L20:
 182:../src/wolfcrypt/src/pkcs12.c ****         }
 183:../src/wolfcrypt/src/pkcs12.c ****         if (pkcs12->signData->salt != NULL) {
 344                             		.loc 2 183 19
 345 006e ED A5 05                		mov.L	20[r10], r5
 346 0071 A8 D5                   		mov.L	8[r5], r5
 347                             		.loc 2 183 29
 348 0073 A8 5D                   		mov.L	4[r5], r5
 349                             		.loc 2 183 12
 350 0075 61 05                   		cmp	#0, r5
 351 0077 20 21                   		beq	.L22
 352                             	.LBB7:
 184:../src/wolfcrypt/src/pkcs12.c ****             XFREE(pkcs12->signData->salt, heap, DYNAMIC_TYPE_SALT);
 353                             		.loc 2 184 13
 354 0079 ED A5 05                		mov.L	20[r10], r5
 355 007c A8 D5                   		mov.L	8[r5], r5
 356 007e A8 5D                   		mov.L	4[r5], r5
 357 0080 E7 A5 02                		mov.L	r5, 8[r10]
 358 0083 ED A5 02                		mov.L	8[r10], r5
 359 0086 61 05                   		cmp	#0, r5
 360 0088 10                      		beq	.L23
 361                             		.loc 2 184 13 is_stmt 0 discriminator 1
 362 0089 ED A1 02                		mov.L	8[r10], r1
 363 008c 05 00 00 00             		bsr	_wolfSSL_Free
 364                             	.L23:
 365                             	.LBE7:
 185:../src/wolfcrypt/src/pkcs12.c ****             pkcs12->signData->salt = NULL;
 366                             		.loc 2 185 19 is_stmt 1
 367 0090 ED A5 05                		mov.L	20[r10], r5
 368 0093 A8 D5                   		mov.L	8[r5], r5
 369                             		.loc 2 185 36
 370 0095 3E 51 00                		mov.L	#0, 4[r5]
 371                             	.L22:
 372                             	.LBB8:
 186:../src/wolfcrypt/src/pkcs12.c ****         }
 187:../src/wolfcrypt/src/pkcs12.c ****         XFREE(pkcs12->signData, heap, DYNAMIC_TYPE_PKCS);
 373                             		.loc 2 187 9
 374 0098 ED A5 05                		mov.L	20[r10], r5
 375 009b A8 D5                   		mov.L	8[r5], r5
 376 009d E7 A5 03                		mov.L	r5, 12[r10]
 377 00a0 ED A5 03                		mov.L	12[r10], r5
 378 00a3 61 05                   		cmp	#0, r5
 379 00a5 10                      		beq	.L24
 380                             		.loc 2 187 9 is_stmt 0 discriminator 1
 381 00a6 ED A1 03                		mov.L	12[r10], r1
 382 00a9 05 00 00 00             		bsr	_wolfSSL_Free
 383                             	.L24:
 384                             	.LBE8:
 188:../src/wolfcrypt/src/pkcs12.c ****         pkcs12->signData = NULL;
 385                             		.loc 2 188 26 is_stmt 1
 386 00ad ED A5 05                		mov.L	20[r10], r5
 387 00b0 3E 52 00                		mov.L	#0, 8[r5]
 388                             	.L19:
 389                             	.LBB9:
 189:../src/wolfcrypt/src/pkcs12.c ****     }
 190:../src/wolfcrypt/src/pkcs12.c **** 
 191:../src/wolfcrypt/src/pkcs12.c ****     XFREE(pkcs12, NULL, DYNAMIC_TYPE_PKCS);
 390                             		.loc 2 191 5
 391 00b3 ED A5 05                		mov.L	20[r10], r5
 392 00b6 E7 A5 04                		mov.L	r5, 16[r10]
 393 00b9 ED A5 04                		mov.L	16[r10], r5
 394 00bc 61 05                   		cmp	#0, r5
 395 00be 10                      		beq	.L15
 396                             		.loc 2 191 5 is_stmt 0 discriminator 1
 397 00bf ED A1 04                		mov.L	16[r10], r1
 398 00c2 05 00 00 00             		bsr	_wolfSSL_Free
 399                             	.L15:
 400                             	.LBE9:
 192:../src/wolfcrypt/src/pkcs12.c **** }
 401                             		.loc 2 192 1 is_stmt 1
 402 00c6 3F AA 07                		rtsd	#28, r10-r10
 403                             	.LFE45:
 405                             		.section C,"a",@progbits
 406 0051 00 00 00                		.p2align 2
 407                             	.LC2:
 408 0054 47 65 74 20 6F 62 6A 65 		.string	"Get object id failed"
 408      63 74 20 69 64 20 66 61 
 408      69 6C 65 64 00 
 409                             	.LC3:
 410 0069 55 6E 65 78 70 65 63 74 		.string	"Unexpected tag in PKCS12 DER"
 410      65 64 20 74 61 67 20 69 
 410      6E 20 50 4B 43 53 31 32 
 410      20 44 45 52 00 
 411                             	.LC4:
 412 0086 46 6F 75 6E 64 20 50 4B 		.string	"Found PKCS12 OBJECT: ENCRYPTED DATA"
 412      43 53 31 32 20 4F 42 4A 
 412      45 43 54 3A 20 45 4E 43 
 412      52 59 50 54 45 44 20 44 
 412      41 54 41 00 
 413                             	.LC5:
 414 00aa 46 6F 75 6E 64 20 50 4B 		.string	"Found PKCS12 OBJECT: DATA"
 414      43 53 31 32 20 4F 42 4A 
 414      45 43 54 3A 20 44 41 54 
 414      41 00 
 415                             	.LC6:
 416 00c4 57 72 6F 6E 67 20 74 61 		.string	"Wrong tag with content PKCS12 type DATA"
 416      67 20 77 69 74 68 20 63 
 416      6F 6E 74 65 6E 74 20 50 
 416      4B 43 53 31 32 20 74 79 
 416      70 65 20 44 41 54 41 00 
 417                             		.section	.text.GetSafeContent,"ax",@progbits
 419                             	_GetSafeContent:
 420                             	.LFB46:
 193:../src/wolfcrypt/src/pkcs12.c **** 
 194:../src/wolfcrypt/src/pkcs12.c **** 
 195:../src/wolfcrypt/src/pkcs12.c **** /* return 0 on success */
 196:../src/wolfcrypt/src/pkcs12.c **** static int GetSafeContent(WC_PKCS12* pkcs12, const byte* input,
 197:../src/wolfcrypt/src/pkcs12.c ****                           word32* idx, int maxIdx)
 198:../src/wolfcrypt/src/pkcs12.c **** {
 421                             		.loc 2 198 1
 422 0000 7E AA                   		push.l	r10
 423                             	.LCFI8:
 424 0002 71 0A C8                		add	#-56, r0, r10
 425                             	.LCFI9:
 426 0005 71 A0 FC                		add	#-4, r10, r0
 427                             	.LCFI10:
 428 0008 E7 A1 0A                		mov.L	r1, 40[r10]
 429 000b E7 A2 0B                		mov.L	r2, 44[r10]
 430 000e E7 A3 0C                		mov.L	r3, 48[r10]
 431 0011 E7 A4 0D                		mov.L	r4, 52[r10]
 199:../src/wolfcrypt/src/pkcs12.c ****     AuthenticatedSafe* safe;
 200:../src/wolfcrypt/src/pkcs12.c ****     word32 oid;
 201:../src/wolfcrypt/src/pkcs12.c ****     word32 localIdx = *idx;
 432                             		.loc 2 201 23
 433 0014 ED A5 0C                		mov.L	48[r10], r5
 434 0017 EC 55                   		mov.L	[r5], r5
 435                             		.loc 2 201 12
 436 0019 E7 A5 05                		mov.L	r5, 20[r10]
 202:../src/wolfcrypt/src/pkcs12.c ****     int ret;
 203:../src/wolfcrypt/src/pkcs12.c ****     int size = 0;
 437                             		.loc 2 203 9
 438 001c F9 A6 06 00             		mov.L	#0, 24[r10]
 204:../src/wolfcrypt/src/pkcs12.c ****     byte tag;
 205:../src/wolfcrypt/src/pkcs12.c **** 
 206:../src/wolfcrypt/src/pkcs12.c ****     safe = (AuthenticatedSafe*)XMALLOC(sizeof(AuthenticatedSafe), pkcs12->heap,
 439                             		.loc 2 206 32
 440 0020 75 41 14                		mov.L	#20, r1
 441 0023 05 00 00 00             		bsr	_wolfSSL_Malloc
 442 0027 E7 A1 01                		mov.L	r1, 4[r10]
 207:../src/wolfcrypt/src/pkcs12.c ****                                        DYNAMIC_TYPE_PKCS);
 208:../src/wolfcrypt/src/pkcs12.c ****     if (safe == NULL) {
 443                             		.loc 2 208 8
 444 002a ED A5 01                		mov.L	4[r10], r5
 445 002d 61 05                   		cmp	#0, r5
 446 002f 1F                      		bne	.L26
 209:../src/wolfcrypt/src/pkcs12.c ****         return MEMORY_E;
 447                             		.loc 2 209 16
 448 0030 FB 56 83                		mov.L	#-125, r5
 449 0033 38 67 03                		bra	.L47
 450                             	.L26:
 210:../src/wolfcrypt/src/pkcs12.c ****     }
 211:../src/wolfcrypt/src/pkcs12.c ****     XMEMSET(safe, 0, sizeof(AuthenticatedSafe));
 451                             		.loc 2 211 5
 452 0036 75 43 14                		mov.L	#20, r3
 453 0039 66 02                   		mov.L	#0, r2
 454 003b ED A1 01                		mov.L	4[r10], r1
 455 003e 05 00 00 00             		bsr	_memset
 212:../src/wolfcrypt/src/pkcs12.c **** 
 213:../src/wolfcrypt/src/pkcs12.c ****     ret = GetObjectId(input, &localIdx, &oid, oidIgnoreType, maxIdx);
 456                             		.loc 2 213 11
 457 0042 ED A4 0D                		mov.L	52[r10], r4
 458 0045 71 A3 10                		add	#16, r10, r3
 459 0048 71 A5 14                		add	#20, r10, r5
 460 004b E3 04                   		mov.L	r4, [r0]
 461 004d 75 44 15                		mov.L	#21, r4
 462 0050 EF 52                   		mov.L	r5, r2
 463 0052 ED A1 0B                		mov.L	44[r10], r1
 464 0055 05 00 00 00             		bsr	_GetObjectId
 465 0059 E3 A1                   		mov.L	r1, [r10]
 214:../src/wolfcrypt/src/pkcs12.c ****     if (ret < 0) {
 466                             		.loc 2 214 8
 467 005b EC A5                   		mov.L	[r10], r5
 468 005d 61 05                   		cmp	#0, r5
 469 005f 28 23                   		bge	.L28
 215:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_LEAVE("Get object id failed", ret);
 470                             		.loc 2 215 9
 471 0061 EC A2                   		mov.L	[r10], r2
 472 0063 FB 12 54 00 00 00       		mov.L	#.LC2, r1
 473 0069 05 00 00 00             		bsr	_WOLFSSL_LEAVE
 216:../src/wolfcrypt/src/pkcs12.c ****         freeSafe(safe, pkcs12->heap);
 474                             		.loc 2 216 9
 475 006d ED A5 0A                		mov.L	40[r10], r5
 476 0070 EC 55                   		mov.L	[r5], r5
 477 0072 EF 52                   		mov.L	r5, r2
 478 0074 ED A1 01                		mov.L	4[r10], r1
 479 0077 05 00 00 00             		bsr	_freeSafe
 217:../src/wolfcrypt/src/pkcs12.c ****         return ASN_PARSE_E;
 480                             		.loc 2 217 16
 481 007b FB 5A 74 FF             		mov.L	#-140, r5
 482 007f 38 1B 03                		bra	.L47
 483                             	.L28:
 218:../src/wolfcrypt/src/pkcs12.c ****     }
 219:../src/wolfcrypt/src/pkcs12.c **** 
 220:../src/wolfcrypt/src/pkcs12.c ****     safe->oid = oid;
 484                             		.loc 2 220 15
 485 0082 ED A4 04                		mov.L	16[r10], r4
 486 0085 ED A5 01                		mov.L	4[r10], r5
 487 0088 A0 D4                   		mov.L	r4, 8[r5]
 221:../src/wolfcrypt/src/pkcs12.c ****     /* check tag, length */
 222:../src/wolfcrypt/src/pkcs12.c ****     if (GetASNTag(input, &localIdx, &tag, maxIdx) < 0) {
 488                             		.loc 2 222 9
 489 008a ED A4 0D                		mov.L	52[r10], r4
 490 008d 71 A3 1C                		add	#28, r10, r3
 491 0090 71 A5 14                		add	#20, r10, r5
 492 0093 EF 52                   		mov.L	r5, r2
 493 0095 ED A1 0B                		mov.L	44[r10], r1
 494 0098 05 00 00 00             		bsr	_GetASNTag
 495 009c EF 15                   		mov.L	r1, r5
 496                             		.loc 2 222 8
 497 009e 61 05                   		cmp	#0, r5
 498 00a0 28 17                   		bge	.L29
 223:../src/wolfcrypt/src/pkcs12.c ****         freeSafe(safe, pkcs12->heap);
 499                             		.loc 2 223 9
 500 00a2 ED A5 0A                		mov.L	40[r10], r5
 501 00a5 EC 55                   		mov.L	[r5], r5
 502 00a7 EF 52                   		mov.L	r5, r2
 503 00a9 ED A1 01                		mov.L	4[r10], r1
 504 00ac 05 00 00 00             		bsr	_freeSafe
 224:../src/wolfcrypt/src/pkcs12.c ****         return ASN_PARSE_E;
 505                             		.loc 2 224 16
 506 00b0 FB 5A 74 FF             		mov.L	#-140, r5
 507 00b4 38 E6 02                		bra	.L47
 508                             	.L29:
 225:../src/wolfcrypt/src/pkcs12.c ****     }
 226:../src/wolfcrypt/src/pkcs12.c **** 
 227:../src/wolfcrypt/src/pkcs12.c ****     if (tag != (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC)) {
 509                             		.loc 2 227 13
 510 00b7 CD A5 1C                		mov.B	28[r10], r5
 511                             		.loc 2 227 8
 512 00ba 5B 55                   		movu.B	r5, r5
 513 00bc 75 55 A0                		cmp	#0xa0, r5
 514 00bf 20 21                   		beq	.L30
 228:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Unexpected tag in PKCS12 DER");
 515                             		.loc 2 228 9
 516 00c1 FB 12 69 00 00 00       		mov.L	#.LC3, r1
 517 00c7 05 00 00 00             		bsr	_WOLFSSL_MSG
 229:../src/wolfcrypt/src/pkcs12.c ****         freeSafe(safe, pkcs12->heap);
 518                             		.loc 2 229 9
 519 00cb ED A5 0A                		mov.L	40[r10], r5
 520 00ce EC 55                   		mov.L	[r5], r5
 521 00d0 EF 52                   		mov.L	r5, r2
 522 00d2 ED A1 01                		mov.L	4[r10], r1
 523 00d5 05 00 00 00             		bsr	_freeSafe
 230:../src/wolfcrypt/src/pkcs12.c ****         return ASN_PARSE_E;
 524                             		.loc 2 230 16
 525 00d9 FB 5A 74 FF             		mov.L	#-140, r5
 526 00dd 38 BD 02                		bra	.L47
 527                             	.L30:
 231:../src/wolfcrypt/src/pkcs12.c ****     }
 232:../src/wolfcrypt/src/pkcs12.c ****     if (GetLength(input, &localIdx, &size, maxIdx) <= 0) {
 528                             		.loc 2 232 9
 529 00e0 ED A4 0D                		mov.L	52[r10], r4
 530 00e3 71 A3 18                		add	#24, r10, r3
 531 00e6 71 A5 14                		add	#20, r10, r5
 532 00e9 EF 52                   		mov.L	r5, r2
 533 00eb ED A1 0B                		mov.L	44[r10], r1
 534 00ee 05 00 00 00             		bsr	_GetLength
 535 00f2 EF 15                   		mov.L	r1, r5
 536                             		.loc 2 232 8
 537 00f4 61 05                   		cmp	#0, r5
 538 00f6 2A 17                   		bgt	.L31
 233:../src/wolfcrypt/src/pkcs12.c ****         freeSafe(safe, pkcs12->heap);
 539                             		.loc 2 233 9
 540 00f8 ED A5 0A                		mov.L	40[r10], r5
 541 00fb EC 55                   		mov.L	[r5], r5
 542 00fd EF 52                   		mov.L	r5, r2
 543 00ff ED A1 01                		mov.L	4[r10], r1
 544 0102 05 00 00 00             		bsr	_freeSafe
 234:../src/wolfcrypt/src/pkcs12.c ****         return ASN_PARSE_E;
 545                             		.loc 2 234 16
 546 0106 FB 5A 74 FF             		mov.L	#-140, r5
 547 010a 38 90 02                		bra	.L47
 548                             	.L31:
 235:../src/wolfcrypt/src/pkcs12.c ****     }
 236:../src/wolfcrypt/src/pkcs12.c **** 
 237:../src/wolfcrypt/src/pkcs12.c ****     switch (oid) {
 549                             		.loc 2 237 5
 550 010d ED A5 04                		mov.L	16[r10], r5
 551 0110 76 05 8B 02             		cmp	#0x28b, r5
 552 0114 20 16                   		beq	.L32
 553 0116 76 05 90 02             		cmp	#0x290, r5
 554 011a 3B 9D 00                		bne	.L33
 238:../src/wolfcrypt/src/pkcs12.c ****         case WC_PKCS12_ENCRYPTED_DATA:
 239:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Found PKCS12 OBJECT: ENCRYPTED DATA");
 555                             		.loc 2 239 13
 556 011d FB 12 86 00 00 00       		mov.L	#.LC4, r1
 557 0123 05 00 00 00             		bsr	_WOLFSSL_MSG
 240:../src/wolfcrypt/src/pkcs12.c ****             break;
 558                             		.loc 2 240 13
 559 0127 38 90 00                		bra	.L33
 560                             	.L32:
 241:../src/wolfcrypt/src/pkcs12.c **** 
 242:../src/wolfcrypt/src/pkcs12.c ****         case WC_PKCS12_DATA:
 243:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Found PKCS12 OBJECT: DATA");
 561                             		.loc 2 243 13
 562 012a FB 12 AA 00 00 00       		mov.L	#.LC5, r1
 563 0130 05 00 00 00             		bsr	_WOLFSSL_MSG
 244:../src/wolfcrypt/src/pkcs12.c ****             /* get octets holding contents */
 245:../src/wolfcrypt/src/pkcs12.c ****             if (GetASNTag(input, &localIdx, &tag, maxIdx) < 0) {
 564                             		.loc 2 245 17
 565 0134 ED A4 0D                		mov.L	52[r10], r4
 566 0137 71 A3 1C                		add	#28, r10, r3
 567 013a 71 A5 14                		add	#20, r10, r5
 568 013d EF 52                   		mov.L	r5, r2
 569 013f ED A1 0B                		mov.L	44[r10], r1
 570 0142 05 00 00 00             		bsr	_GetASNTag
 571 0146 EF 15                   		mov.L	r1, r5
 572                             		.loc 2 245 16
 573 0148 61 05                   		cmp	#0, r5
 574 014a 28 17                   		bge	.L34
 246:../src/wolfcrypt/src/pkcs12.c ****                 freeSafe(safe, pkcs12->heap);
 575                             		.loc 2 246 17
 576 014c ED A5 0A                		mov.L	40[r10], r5
 577 014f EC 55                   		mov.L	[r5], r5
 578 0151 EF 52                   		mov.L	r5, r2
 579 0153 ED A1 01                		mov.L	4[r10], r1
 580 0156 05 00 00 00             		bsr	_freeSafe
 247:../src/wolfcrypt/src/pkcs12.c ****                 return ASN_PARSE_E;
 581                             		.loc 2 247 24
 582 015a FB 5A 74 FF             		mov.L	#-140, r5
 583 015e 38 3C 02                		bra	.L47
 584                             	.L34:
 248:../src/wolfcrypt/src/pkcs12.c ****             }
 249:../src/wolfcrypt/src/pkcs12.c **** 
 250:../src/wolfcrypt/src/pkcs12.c ****             if (tag != ASN_OCTET_STRING) {
 585                             		.loc 2 250 21
 586 0161 CD A5 1C                		mov.B	28[r10], r5
 587                             		.loc 2 250 16
 588 0164 5B 55                   		movu.B	r5, r5
 589 0166 61 45                   		cmp	#4, r5
 590 0168 20 21                   		beq	.L35
 251:../src/wolfcrypt/src/pkcs12.c ****                 WOLFSSL_MSG("Wrong tag with content PKCS12 type DATA");
 591                             		.loc 2 251 17
 592 016a FB 12 C4 00 00 00       		mov.L	#.LC6, r1
 593 0170 05 00 00 00             		bsr	_WOLFSSL_MSG
 252:../src/wolfcrypt/src/pkcs12.c ****                 freeSafe(safe, pkcs12->heap);
 594                             		.loc 2 252 17
 595 0174 ED A5 0A                		mov.L	40[r10], r5
 596 0177 EC 55                   		mov.L	[r5], r5
 597 0179 EF 52                   		mov.L	r5, r2
 598 017b ED A1 01                		mov.L	4[r10], r1
 599 017e 05 00 00 00             		bsr	_freeSafe
 253:../src/wolfcrypt/src/pkcs12.c ****                 return ASN_PARSE_E;
 600                             		.loc 2 253 24
 601 0182 FB 5A 74 FF             		mov.L	#-140, r5
 602 0186 38 14 02                		bra	.L47
 603                             	.L35:
 254:../src/wolfcrypt/src/pkcs12.c ****             }
 255:../src/wolfcrypt/src/pkcs12.c ****             if (GetLength(input, &localIdx, &size, maxIdx) <= 0) {
 604                             		.loc 2 255 17
 605 0189 ED A4 0D                		mov.L	52[r10], r4
 606 018c 71 A3 18                		add	#24, r10, r3
 607 018f 71 A5 14                		add	#20, r10, r5
 608 0192 EF 52                   		mov.L	r5, r2
 609 0194 ED A1 0B                		mov.L	44[r10], r1
 610 0197 05 00 00 00             		bsr	_GetLength
 611 019b EF 15                   		mov.L	r1, r5
 612                             		.loc 2 255 16
 613 019d 61 05                   		cmp	#0, r5
 614 019f 2A 17                   		bgt	.L48
 256:../src/wolfcrypt/src/pkcs12.c ****                 freeSafe(safe, pkcs12->heap);
 615                             		.loc 2 256 17
 616 01a1 ED A5 0A                		mov.L	40[r10], r5
 617 01a4 EC 55                   		mov.L	[r5], r5
 618 01a6 EF 52                   		mov.L	r5, r2
 619 01a8 ED A1 01                		mov.L	4[r10], r1
 620 01ab 05 00 00 00             		bsr	_freeSafe
 257:../src/wolfcrypt/src/pkcs12.c ****                 return ASN_PARSE_E;
 621                             		.loc 2 257 24
 622 01af FB 5A 74 FF             		mov.L	#-140, r5
 623 01b3 38 E7 01                		bra	.L47
 624                             	.L48:
 258:../src/wolfcrypt/src/pkcs12.c ****             }
 259:../src/wolfcrypt/src/pkcs12.c **** 
 260:../src/wolfcrypt/src/pkcs12.c ****             break;
 625                             		.loc 2 260 13
 626 01b6 03                      		nop
 627                             	.L33:
 261:../src/wolfcrypt/src/pkcs12.c ****     }
 262:../src/wolfcrypt/src/pkcs12.c **** 
 263:../src/wolfcrypt/src/pkcs12.c ****     safe->dataSz = size;
 628                             		.loc 2 263 18
 629 01b7 ED A5 06                		mov.L	24[r10], r5
 630 01ba EF 54                   		mov.L	r5, r4
 631 01bc ED A5 01                		mov.L	4[r10], r5
 632 01bf A1 54                   		mov.L	r4, 16[r5]
 264:../src/wolfcrypt/src/pkcs12.c ****     safe->data = (byte*)XMALLOC(size, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 633                             		.loc 2 264 25
 634 01c1 ED A5 06                		mov.L	24[r10], r5
 635 01c4 EF 51                   		mov.L	r5, r1
 636 01c6 05 00 00 00             		bsr	_wolfSSL_Malloc
 637 01ca EF 14                   		mov.L	r1, r4
 638                             		.loc 2 264 16
 639 01cc ED A5 01                		mov.L	4[r10], r5
 640 01cf A0 5C                   		mov.L	r4, 4[r5]
 265:../src/wolfcrypt/src/pkcs12.c ****     if (safe->data == NULL) {
 641                             		.loc 2 265 13
 642 01d1 ED A5 01                		mov.L	4[r10], r5
 643 01d4 A8 5D                   		mov.L	4[r5], r5
 644                             		.loc 2 265 8
 645 01d6 61 05                   		cmp	#0, r5
 646 01d8 21 16                   		bne	.L37
 266:../src/wolfcrypt/src/pkcs12.c ****         freeSafe(safe, pkcs12->heap);
 647                             		.loc 2 266 9
 648 01da ED A5 0A                		mov.L	40[r10], r5
 649 01dd EC 55                   		mov.L	[r5], r5
 650 01df EF 52                   		mov.L	r5, r2
 651 01e1 ED A1 01                		mov.L	4[r10], r1
 652 01e4 05 00 00 00             		bsr	_freeSafe
 267:../src/wolfcrypt/src/pkcs12.c ****         return MEMORY_E;
 653                             		.loc 2 267 16
 654 01e8 FB 56 83                		mov.L	#-125, r5
 655 01eb 38 AF 01                		bra	.L47
 656                             	.L37:
 268:../src/wolfcrypt/src/pkcs12.c ****     }
 269:../src/wolfcrypt/src/pkcs12.c ****     XMEMCPY(safe->data, input + localIdx, size);
 657                             		.loc 2 269 5
 658 01ee ED A5 01                		mov.L	4[r10], r5
 659 01f1 A8 59                   		mov.L	4[r5], r1
 660 01f3 ED A5 05                		mov.L	20[r10], r5
 661 01f6 ED A4 0B                		mov.L	44[r10], r4
 662 01f9 4B 45                   		add	r4, r5
 663 01fb ED A4 06                		mov.L	24[r10], r4
 664 01fe EF 43                   		mov.L	r4, r3
 665 0200 EF 52                   		mov.L	r5, r2
 666 0202 05 00 00 00             		bsr	_memcpy
 270:../src/wolfcrypt/src/pkcs12.c ****     *idx = localIdx;
 667                             		.loc 2 270 10
 668 0206 ED A4 05                		mov.L	20[r10], r4
 669 0209 ED A5 0C                		mov.L	48[r10], r5
 670 020c E3 54                   		mov.L	r4, [r5]
 271:../src/wolfcrypt/src/pkcs12.c **** 
 272:../src/wolfcrypt/src/pkcs12.c ****     /* an instance of AuthenticatedSafe is created from
 273:../src/wolfcrypt/src/pkcs12.c ****      * ContentInfo's strung together in a SEQUENCE. Here we iterate
 274:../src/wolfcrypt/src/pkcs12.c ****      * through the ContentInfo's and add them to our
 275:../src/wolfcrypt/src/pkcs12.c ****      * AuthenticatedSafe struct */
 276:../src/wolfcrypt/src/pkcs12.c ****     localIdx = 0;
 671                             		.loc 2 276 14
 672 020e F9 A6 05 00             		mov.L	#0, 20[r10]
 277:../src/wolfcrypt/src/pkcs12.c ****     input = safe->data;
 673                             		.loc 2 277 11
 674 0212 ED A5 01                		mov.L	4[r10], r5
 675 0215 A8 5D                   		mov.L	4[r5], r5
 676 0217 E7 A5 0B                		mov.L	r5, 44[r10]
 677                             	.LBB10:
 278:../src/wolfcrypt/src/pkcs12.c ****     {
 279:../src/wolfcrypt/src/pkcs12.c ****         int CISz;
 280:../src/wolfcrypt/src/pkcs12.c ****         ret = GetSequence(input, &localIdx, &CISz, safe->dataSz);
 678                             		.loc 2 280 15
 679 021a ED A5 01                		mov.L	4[r10], r5
 680 021d A9 54                   		mov.L	16[r5], r4
 681 021f 71 A3 20                		add	#32, r10, r3
 682 0222 71 A5 14                		add	#20, r10, r5
 683 0225 EF 52                   		mov.L	r5, r2
 684 0227 ED A1 0B                		mov.L	44[r10], r1
 685 022a 05 00 00 00             		bsr	_GetSequence
 686 022e E3 A1                   		mov.L	r1, [r10]
 281:../src/wolfcrypt/src/pkcs12.c ****         if (ret < 0) {
 687                             		.loc 2 281 12
 688 0230 EC A5                   		mov.L	[r10], r5
 689 0232 61 05                   		cmp	#0, r5
 690 0234 28 17                   		bge	.L38
 282:../src/wolfcrypt/src/pkcs12.c ****             freeSafe(safe, pkcs12->heap);
 691                             		.loc 2 282 13
 692 0236 ED A5 0A                		mov.L	40[r10], r5
 693 0239 EC 55                   		mov.L	[r5], r5
 694 023b EF 52                   		mov.L	r5, r2
 695 023d ED A1 01                		mov.L	4[r10], r1
 696 0240 05 00 00 00             		bsr	_freeSafe
 283:../src/wolfcrypt/src/pkcs12.c ****             return ASN_PARSE_E;
 697                             		.loc 2 283 20
 698 0244 FB 5A 74 FF             		mov.L	#-140, r5
 699 0248 38 52 01                		bra	.L47
 700                             	.L38:
 284:../src/wolfcrypt/src/pkcs12.c ****         }
 285:../src/wolfcrypt/src/pkcs12.c ****         CISz += localIdx;
 701                             		.loc 2 285 14
 702 024b ED A5 08                		mov.L	32[r10], r5
 703 024e EF 54                   		mov.L	r5, r4
 704 0250 ED A5 05                		mov.L	20[r10], r5
 705 0253 4B 45                   		add	r4, r5
 706 0255 E7 A5 08                		mov.L	r5, 32[r10]
 286:../src/wolfcrypt/src/pkcs12.c ****         while ((int)localIdx < CISz) {
 707                             		.loc 2 286 15
 708 0258 38 1A 01                		bra	.L40
 709                             	.L46:
 710                             	.LBB11:
 287:../src/wolfcrypt/src/pkcs12.c ****             int curSz = 0;
 711                             		.loc 2 287 17
 712 025b F9 A6 09 00             		mov.L	#0, 36[r10]
 288:../src/wolfcrypt/src/pkcs12.c ****             word32 curIdx;
 289:../src/wolfcrypt/src/pkcs12.c ****             ContentInfo* ci = NULL;
 713                             		.loc 2 289 26
 714 025f F9 A6 02 00             		mov.L	#0, 8[r10]
 290:../src/wolfcrypt/src/pkcs12.c **** 
 291:../src/wolfcrypt/src/pkcs12.c ****         #ifdef WOLFSSL_DEBUG_PKCS12
 292:../src/wolfcrypt/src/pkcs12.c ****             printf("\t\tlooking for Content Info.... ");
 293:../src/wolfcrypt/src/pkcs12.c ****         #endif
 294:../src/wolfcrypt/src/pkcs12.c **** 
 295:../src/wolfcrypt/src/pkcs12.c ****             if ((ret = GetSequence(input, &localIdx, &curSz, safe->dataSz))
 715                             		.loc 2 295 24
 716 0263 ED A5 01                		mov.L	4[r10], r5
 717 0266 A9 54                   		mov.L	16[r5], r4
 718 0268 71 A3 24                		add	#36, r10, r3
 719 026b 71 A5 14                		add	#20, r10, r5
 720 026e EF 52                   		mov.L	r5, r2
 721 0270 ED A1 0B                		mov.L	44[r10], r1
 722 0273 05 00 00 00             		bsr	_GetSequence
 723 0277 E3 A1                   		mov.L	r1, [r10]
 724                             		.loc 2 295 16
 725 0279 EC A5                   		mov.L	[r10], r5
 726 027b 61 05                   		cmp	#0, r5
 727 027d 28 15                   		bge	.L41
 296:../src/wolfcrypt/src/pkcs12.c ****                                                                           < 0) {
 297:../src/wolfcrypt/src/pkcs12.c ****                 freeSafe(safe, pkcs12->heap);
 728                             		.loc 2 297 17
 729 027f ED A5 0A                		mov.L	40[r10], r5
 730 0282 EC 55                   		mov.L	[r5], r5
 731 0284 EF 52                   		mov.L	r5, r2
 732 0286 ED A1 01                		mov.L	4[r10], r1
 733 0289 05 00 00 00             		bsr	_freeSafe
 298:../src/wolfcrypt/src/pkcs12.c ****                 return ret;
 734                             		.loc 2 298 24
 735 028d EC A5                   		mov.L	[r10], r5
 736 028f 38 0B 01                		bra	.L47
 737                             	.L41:
 299:../src/wolfcrypt/src/pkcs12.c ****             }
 300:../src/wolfcrypt/src/pkcs12.c **** 
 301:../src/wolfcrypt/src/pkcs12.c ****             if (curSz > CISz) {
 738                             		.loc 2 301 23
 739 0292 ED A4 09                		mov.L	36[r10], r4
 740 0295 ED A5 08                		mov.L	32[r10], r5
 741                             		.loc 2 301 16
 742 0298 47 54                   		cmp	r5, r4
 743 029a 2B 17                   		ble	.L43
 302:../src/wolfcrypt/src/pkcs12.c ****                 /* subset should not be larger than universe */
 303:../src/wolfcrypt/src/pkcs12.c ****                 freeSafe(safe, pkcs12->heap);
 744                             		.loc 2 303 17
 745 029c ED A5 0A                		mov.L	40[r10], r5
 746 029f EC 55                   		mov.L	[r5], r5
 747 02a1 EF 52                   		mov.L	r5, r2
 748 02a3 ED A1 01                		mov.L	4[r10], r1
 749 02a6 05 00 00 00             		bsr	_freeSafe
 304:../src/wolfcrypt/src/pkcs12.c ****                 return ASN_PARSE_E;
 750                             		.loc 2 304 24
 751 02aa FB 5A 74 FF             		mov.L	#-140, r5
 752 02ae 38 EC 00                		bra	.L47
 753                             	.L43:
 305:../src/wolfcrypt/src/pkcs12.c ****             }
 306:../src/wolfcrypt/src/pkcs12.c **** 
 307:../src/wolfcrypt/src/pkcs12.c ****             curIdx = localIdx;
 754                             		.loc 2 307 20
 755 02b1 ED A5 05                		mov.L	20[r10], r5
 756 02b4 E7 A5 03                		mov.L	r5, 12[r10]
 308:../src/wolfcrypt/src/pkcs12.c ****             if ((ret = GetObjectId(input, &localIdx, &oid, oidIgnoreType,
 757                             		.loc 2 308 24
 758 02b7 ED A5 01                		mov.L	4[r10], r5
 759 02ba A9 54                   		mov.L	16[r5], r4
 760 02bc 71 A3 10                		add	#16, r10, r3
 761 02bf 71 A5 14                		add	#20, r10, r5
 762 02c2 E3 04                   		mov.L	r4, [r0]
 763 02c4 75 44 15                		mov.L	#21, r4
 764 02c7 EF 52                   		mov.L	r5, r2
 765 02c9 ED A1 0B                		mov.L	44[r10], r1
 766 02cc 05 00 00 00             		bsr	_GetObjectId
 767 02d0 E3 A1                   		mov.L	r1, [r10]
 768                             		.loc 2 308 16
 769 02d2 EC A5                   		mov.L	[r10], r5
 770 02d4 61 05                   		cmp	#0, r5
 771 02d6 28 21                   		bge	.L44
 309:../src/wolfcrypt/src/pkcs12.c ****                                                            safe->dataSz)) < 0) {
 310:../src/wolfcrypt/src/pkcs12.c ****                 WOLFSSL_LEAVE("Get object id failed", ret);
 772                             		.loc 2 310 17
 773 02d8 EC A2                   		mov.L	[r10], r2
 774 02da FB 12 54 00 00 00       		mov.L	#.LC2, r1
 775 02e0 05 00 00 00             		bsr	_WOLFSSL_LEAVE
 311:../src/wolfcrypt/src/pkcs12.c ****                 freeSafe(safe, pkcs12->heap);
 776                             		.loc 2 311 17
 777 02e4 ED A5 0A                		mov.L	40[r10], r5
 778 02e7 EC 55                   		mov.L	[r5], r5
 779 02e9 EF 52                   		mov.L	r5, r2
 780 02eb ED A1 01                		mov.L	4[r10], r1
 781 02ee 05 00 00 00             		bsr	_freeSafe
 312:../src/wolfcrypt/src/pkcs12.c ****                 return ret;
 782                             		.loc 2 312 24
 783 02f2 EC A5                   		mov.L	[r10], r5
 784 02f4 38 A6 00                		bra	.L47
 785                             	.L44:
 313:../src/wolfcrypt/src/pkcs12.c ****             }
 314:../src/wolfcrypt/src/pkcs12.c **** 
 315:../src/wolfcrypt/src/pkcs12.c ****             /* create new content info struct ... possible OID sanity check? */
 316:../src/wolfcrypt/src/pkcs12.c ****             ci = (ContentInfo*)XMALLOC(sizeof(ContentInfo), pkcs12->heap,
 786                             		.loc 2 316 32
 787 02f7 75 41 14                		mov.L	#20, r1
 788 02fa 05 00 00 00             		bsr	_wolfSSL_Malloc
 789 02fe E7 A1 02                		mov.L	r1, 8[r10]
 317:../src/wolfcrypt/src/pkcs12.c ****                                        DYNAMIC_TYPE_PKCS);
 318:../src/wolfcrypt/src/pkcs12.c ****             if (ci == NULL) {
 790                             		.loc 2 318 16
 791 0301 ED A5 02                		mov.L	8[r10], r5
 792 0304 61 05                   		cmp	#0, r5
 793 0306 21 16                   		bne	.L45
 319:../src/wolfcrypt/src/pkcs12.c ****                 freeSafe(safe, pkcs12->heap);
 794                             		.loc 2 319 17
 795 0308 ED A5 0A                		mov.L	40[r10], r5
 796 030b EC 55                   		mov.L	[r5], r5
 797 030d EF 52                   		mov.L	r5, r2
 798 030f ED A1 01                		mov.L	4[r10], r1
 799 0312 05 00 00 00             		bsr	_freeSafe
 320:../src/wolfcrypt/src/pkcs12.c ****                 return MEMORY_E;
 800                             		.loc 2 320 24
 801 0316 FB 56 83                		mov.L	#-125, r5
 802 0319 38 81 00                		bra	.L47
 803                             	.L45:
 321:../src/wolfcrypt/src/pkcs12.c ****             }
 322:../src/wolfcrypt/src/pkcs12.c **** 
 323:../src/wolfcrypt/src/pkcs12.c ****             ci->type   = oid;
 804                             		.loc 2 323 24
 805 031c ED A5 04                		mov.L	16[r10], r5
 806 031f EF 54                   		mov.L	r5, r4
 807 0321 ED A5 02                		mov.L	8[r10], r5
 808 0324 A1 54                   		mov.L	r4, 16[r5]
 324:../src/wolfcrypt/src/pkcs12.c ****             ci->dataSz = curSz - (localIdx-curIdx);
 809                             		.loc 2 324 32
 810 0326 ED A5 05                		mov.L	20[r10], r5
 811 0329 ED A4 03                		mov.L	12[r10], r4
 812 032c FF 05 54                		sub	r5, r4, r5
 813 032f ED A4 09                		mov.L	36[r10], r4
 814 0332 4B 54                   		add	r5, r4
 815                             		.loc 2 324 24
 816 0334 ED A5 02                		mov.L	8[r10], r5
 817 0337 A0 DC                   		mov.L	r4, 12[r5]
 325:../src/wolfcrypt/src/pkcs12.c ****             ci->data   = (byte*)input + localIdx;
 818                             		.loc 2 325 39
 819 0339 ED A5 05                		mov.L	20[r10], r5
 820 033c ED A4 0B                		mov.L	44[r10], r4
 821 033f 4B 54                   		add	r5, r4
 822                             		.loc 2 325 24
 823 0341 ED A5 02                		mov.L	8[r10], r5
 824 0344 E3 54                   		mov.L	r4, [r5]
 326:../src/wolfcrypt/src/pkcs12.c ****             localIdx  += ci->dataSz;
 825                             		.loc 2 326 28
 826 0346 ED A5 02                		mov.L	8[r10], r5
 827 0349 A8 DC                   		mov.L	12[r5], r4
 828                             		.loc 2 326 23
 829 034b ED A5 05                		mov.L	20[r10], r5
 830 034e 4B 45                   		add	r4, r5
 831 0350 E7 A5 05                		mov.L	r5, 20[r10]
 327:../src/wolfcrypt/src/pkcs12.c **** 
 328:../src/wolfcrypt/src/pkcs12.c ****         #ifdef WOLFSSL_DEBUG_PKCS12
 329:../src/wolfcrypt/src/pkcs12.c ****             switch (oid) {
 330:../src/wolfcrypt/src/pkcs12.c ****                 case WC_PKCS12_ENCRYPTED_DATA:
 331:../src/wolfcrypt/src/pkcs12.c ****                     printf("CONTENT INFO: ENCRYPTED DATA, size = %d\n", ci->dataSz);
 332:../src/wolfcrypt/src/pkcs12.c ****                     break;
 333:../src/wolfcrypt/src/pkcs12.c **** 
 334:../src/wolfcrypt/src/pkcs12.c ****                 case WC_PKCS12_DATA:
 335:../src/wolfcrypt/src/pkcs12.c ****                     printf("CONTENT INFO: DATA, size = %d\n", ci->dataSz);
 336:../src/wolfcrypt/src/pkcs12.c ****                     break;
 337:../src/wolfcrypt/src/pkcs12.c ****                 default:
 338:../src/wolfcrypt/src/pkcs12.c ****                     printf("CONTENT INFO: UNKNOWN, size = %d\n", ci->dataSz);
 339:../src/wolfcrypt/src/pkcs12.c ****             }
 340:../src/wolfcrypt/src/pkcs12.c ****         #endif
 341:../src/wolfcrypt/src/pkcs12.c **** 
 342:../src/wolfcrypt/src/pkcs12.c ****             /* insert to head of list */
 343:../src/wolfcrypt/src/pkcs12.c ****             ci->next = safe->CI;
 832                             		.loc 2 343 28
 833 0353 ED A5 01                		mov.L	4[r10], r5
 834 0356 EC 54                   		mov.L	[r5], r4
 835                             		.loc 2 343 22
 836 0358 ED A5 02                		mov.L	8[r10], r5
 837 035b A0 5C                   		mov.L	r4, 4[r5]
 344:../src/wolfcrypt/src/pkcs12.c ****             safe->CI = ci;
 838                             		.loc 2 344 22
 839 035d ED A5 01                		mov.L	4[r10], r5
 840 0360 ED A4 02                		mov.L	8[r10], r4
 841 0363 E3 54                   		mov.L	r4, [r5]
 345:../src/wolfcrypt/src/pkcs12.c ****             safe->numCI += 1;
 842                             		.loc 2 345 25
 843 0365 ED A5 01                		mov.L	4[r10], r5
 844 0368 A8 DD                   		mov.L	12[r5], r5
 845 036a 71 54 01                		add	#1, r5, r4
 846 036d ED A5 01                		mov.L	4[r10], r5
 847 0370 A0 DC                   		mov.L	r4, 12[r5]
 848                             	.L40:
 849                             	.LBE11:
 286:../src/wolfcrypt/src/pkcs12.c ****             int curSz = 0;
 850                             		.loc 2 286 16
 851 0372 ED A5 05                		mov.L	20[r10], r5
 852 0375 EF 54                   		mov.L	r5, r4
 286:../src/wolfcrypt/src/pkcs12.c ****             int curSz = 0;
 853                             		.loc 2 286 30
 854 0377 ED A5 08                		mov.L	32[r10], r5
 286:../src/wolfcrypt/src/pkcs12.c ****             int curSz = 0;
 855                             		.loc 2 286 15
 856 037a 47 54                   		cmp	r5, r4
 857 037c 28 05 38 DD FE          		blt	.L46
 858                             	.LBE10:
 346:../src/wolfcrypt/src/pkcs12.c ****         }
 347:../src/wolfcrypt/src/pkcs12.c ****     }
 348:../src/wolfcrypt/src/pkcs12.c **** 
 349:../src/wolfcrypt/src/pkcs12.c ****     pkcs12->safe = safe;
 859                             		.loc 2 349 18
 860 0381 ED A5 0A                		mov.L	40[r10], r5
 861 0384 ED A4 01                		mov.L	4[r10], r4
 862 0387 A0 5C                   		mov.L	r4, 4[r5]
 350:../src/wolfcrypt/src/pkcs12.c ****     *idx += localIdx;
 863                             		.loc 2 350 10
 864 0389 ED A5 0C                		mov.L	48[r10], r5
 865 038c EC 54                   		mov.L	[r5], r4
 866 038e ED A5 05                		mov.L	20[r10], r5
 867 0391 4B 54                   		add	r5, r4
 868 0393 ED A5 0C                		mov.L	48[r10], r5
 869 0396 E3 54                   		mov.L	r4, [r5]
 351:../src/wolfcrypt/src/pkcs12.c **** 
 352:../src/wolfcrypt/src/pkcs12.c ****     return ret;
 870                             		.loc 2 352 12
 871 0398 EC A5                   		mov.L	[r10], r5
 872                             		.balign 8,3,1
 873                             	.L47:
 353:../src/wolfcrypt/src/pkcs12.c **** }
 874                             		.loc 2 353 1 discriminator 1
 875 039a EF 51                   		mov.L	r5, r1
 876 039c 3F AA 10                		rtsd	#64, r10-r10
 877                             	.LFE46:
 879 039f 03                      		.section C,"a",@progbits
 880                             		.p2align 2
 881                             	.LC7:
 882 00ec 46 61 69 6C 65 64 20 74 		.string	"Failed to get PKCS12 sequence"
 882      6F 20 67 65 74 20 50 4B 
 882      43 53 31 32 20 73 65 71 
 882      75 65 6E 63 65 00 
 883                             	.LC8:
 884 010a 46 61 69 6C 65 64 20 74 		.string	"Failed to get digest"
 884      6F 20 67 65 74 20 64 69 
 884      67 65 73 74 00 
 885                             	.LC9:
 886 011f 46 61 69 6C 65 64 20 74 		.string	"Failed to get salt"
 886      6F 20 67 65 74 20 73 61 
 886      6C 74 00 
 887                             		.section	.text.GetSignData,"ax",@progbits
 889                             	_GetSignData:
 890                             	.LFB47:
 354:../src/wolfcrypt/src/pkcs12.c **** 
 355:../src/wolfcrypt/src/pkcs12.c **** 
 356:../src/wolfcrypt/src/pkcs12.c **** /* parse optional mac data
 357:../src/wolfcrypt/src/pkcs12.c ****  * return 0 on success */
 358:../src/wolfcrypt/src/pkcs12.c **** static int GetSignData(WC_PKCS12* pkcs12, const byte* mem, word32* idx,
 359:../src/wolfcrypt/src/pkcs12.c ****                        word32 totalSz)
 360:../src/wolfcrypt/src/pkcs12.c **** {
 891                             		.loc 2 360 1
 892 0000 7E AA                   		push.l	r10
 893                             	.LCFI11:
 894 0002 71 0A BC                		add	#-68, r0, r10
 895                             	.LCFI12:
 896 0005 71 A0 FC                		add	#-4, r10, r0
 897                             	.LCFI13:
 898 0008 E7 A1 0D                		mov.L	r1, 52[r10]
 899 000b E7 A2 0E                		mov.L	r2, 56[r10]
 900 000e E7 A3 0F                		mov.L	r3, 60[r10]
 901 0011 E7 A4 10                		mov.L	r4, 64[r10]
 361:../src/wolfcrypt/src/pkcs12.c ****     MacData* mac;
 362:../src/wolfcrypt/src/pkcs12.c ****     word32 curIdx = *idx;
 902                             		.loc 2 362 21
 903 0014 ED A5 0F                		mov.L	60[r10], r5
 904 0017 EC 55                   		mov.L	[r5], r5
 905                             		.loc 2 362 12
 906 0019 E7 A5 08                		mov.L	r5, 32[r10]
 363:../src/wolfcrypt/src/pkcs12.c ****     word32 oid = 0;
 907                             		.loc 2 363 12
 908 001c F9 A6 09 00             		mov.L	#0, 36[r10]
 364:../src/wolfcrypt/src/pkcs12.c ****     int size, ret;
 365:../src/wolfcrypt/src/pkcs12.c ****     byte tag;
 366:../src/wolfcrypt/src/pkcs12.c **** 
 367:../src/wolfcrypt/src/pkcs12.c ****     /* Digest Info : Sequence
 368:../src/wolfcrypt/src/pkcs12.c ****      *      DigestAlgorithmIdentifier
 369:../src/wolfcrypt/src/pkcs12.c ****      *      Digest
 370:../src/wolfcrypt/src/pkcs12.c ****      */
 371:../src/wolfcrypt/src/pkcs12.c ****     if (GetSequence(mem, &curIdx, &size, totalSz) <= 0) {
 909                             		.loc 2 371 9
 910 0020 71 A3 28                		add	#40, r10, r3
 911 0023 71 A5 20                		add	#32, r10, r5
 912 0026 ED A4 10                		mov.L	64[r10], r4
 913 0029 EF 52                   		mov.L	r5, r2
 914 002b ED A1 0E                		mov.L	56[r10], r1
 915 002e 05 00 00 00             		bsr	_GetSequence
 916 0032 EF 15                   		mov.L	r1, r5
 917                             		.loc 2 371 8
 918 0034 61 05                   		cmp	#0, r5
 919 0036 2A 13                   		bgt	.L50
 372:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Failed to get PKCS12 sequence");
 920                             		.loc 2 372 9
 921 0038 FB 12 EC 00 00 00       		mov.L	#.LC7, r1
 922 003e 05 00 00 00             		bsr	_WOLFSSL_MSG
 373:../src/wolfcrypt/src/pkcs12.c ****         return ASN_PARSE_E;
 923                             		.loc 2 373 16
 924 0042 FB 5A 74 FF             		mov.L	#-140, r5
 925 0046 38 A4 02                		bra	.L73
 926                             	.L50:
 374:../src/wolfcrypt/src/pkcs12.c ****     }
 375:../src/wolfcrypt/src/pkcs12.c **** 
 376:../src/wolfcrypt/src/pkcs12.c **** #ifdef WOLFSSL_DEBUG_PKCS12
 377:../src/wolfcrypt/src/pkcs12.c ****     printf("\t\tSEQUENCE: DigestInfo size = %d\n", size);
 378:../src/wolfcrypt/src/pkcs12.c **** #endif
 379:../src/wolfcrypt/src/pkcs12.c **** 
 380:../src/wolfcrypt/src/pkcs12.c ****     mac = (MacData*)XMALLOC(sizeof(MacData), pkcs12->heap, DYNAMIC_TYPE_PKCS);
 927                             		.loc 2 380 21
 928 0049 75 41 18                		mov.L	#24, r1
 929 004c 05 00 00 00             		bsr	_wolfSSL_Malloc
 930 0050 E7 A1 01                		mov.L	r1, 4[r10]
 381:../src/wolfcrypt/src/pkcs12.c ****     if (mac == NULL) {
 931                             		.loc 2 381 8
 932 0053 ED A5 01                		mov.L	4[r10], r5
 933 0056 61 05                   		cmp	#0, r5
 934 0058 1F                      		bne	.L52
 382:../src/wolfcrypt/src/pkcs12.c ****         return MEMORY_E;
 935                             		.loc 2 382 16
 936 0059 FB 56 83                		mov.L	#-125, r5
 937 005c 38 8E 02                		bra	.L73
 938                             	.L52:
 383:../src/wolfcrypt/src/pkcs12.c ****     }
 384:../src/wolfcrypt/src/pkcs12.c ****     XMEMSET(mac, 0, sizeof(MacData));
 939                             		.loc 2 384 5
 940 005f 75 43 18                		mov.L	#24, r3
 941 0062 66 02                   		mov.L	#0, r2
 942 0064 ED A1 01                		mov.L	4[r10], r1
 943 0067 05 00 00 00             		bsr	_memset
 385:../src/wolfcrypt/src/pkcs12.c **** 
 386:../src/wolfcrypt/src/pkcs12.c ****     /* DigestAlgorithmIdentifier */
 387:../src/wolfcrypt/src/pkcs12.c ****     if ((ret = GetAlgoId(mem, &curIdx, &oid, oidIgnoreType, totalSz)) < 0) {
 944                             		.loc 2 387 16
 945 006b 71 A3 24                		add	#36, r10, r3
 946 006e 71 A5 20                		add	#32, r10, r5
 947 0071 ED A4 10                		mov.L	64[r10], r4
 948 0074 E3 04                   		mov.L	r4, [r0]
 949 0076 75 44 15                		mov.L	#21, r4
 950 0079 EF 52                   		mov.L	r5, r2
 951 007b ED A1 0E                		mov.L	56[r10], r1
 952 007e 05 00 00 00             		bsr	_GetAlgoId
 953 0082 E3 A1                   		mov.L	r1, [r10]
 954                             		.loc 2 387 8
 955 0084 EC A5                   		mov.L	[r10], r5
 956 0086 61 05                   		cmp	#0, r5
 957 0088 28 24                   		bge	.L53
 388:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Failed to get PKCS12 sequence");
 958                             		.loc 2 388 9
 959 008a FB 12 EC 00 00 00       		mov.L	#.LC7, r1
 960 0090 05 00 00 00             		bsr	_WOLFSSL_MSG
 961                             	.LBB12:
 389:../src/wolfcrypt/src/pkcs12.c ****         XFREE(mac, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 962                             		.loc 2 389 9
 963 0094 ED A5 01                		mov.L	4[r10], r5
 964 0097 E7 A5 02                		mov.L	r5, 8[r10]
 965 009a ED A5 02                		mov.L	8[r10], r5
 966 009d 61 05                   		cmp	#0, r5
 967 009f 10                      		beq	.L54
 968                             		.loc 2 389 9 is_stmt 0 discriminator 1
 969 00a0 ED A1 02                		mov.L	8[r10], r1
 970 00a3 05 00 00 00             		bsr	_wolfSSL_Free
 971                             	.L54:
 972                             	.LBE12:
 390:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 973                             		.loc 2 390 16 is_stmt 1
 974 00a7 EC A5                   		mov.L	[r10], r5
 975 00a9 38 41 02                		bra	.L73
 976                             	.L53:
 391:../src/wolfcrypt/src/pkcs12.c ****     }
 392:../src/wolfcrypt/src/pkcs12.c ****     mac->oid = oid;
 977                             		.loc 2 392 14
 978 00ac ED A4 09                		mov.L	36[r10], r4
 979 00af ED A5 01                		mov.L	4[r10], r5
 980 00b2 A0 D4                   		mov.L	r4, 8[r5]
 393:../src/wolfcrypt/src/pkcs12.c **** 
 394:../src/wolfcrypt/src/pkcs12.c **** #ifdef WOLFSSL_DEBUG_PKCS12
 395:../src/wolfcrypt/src/pkcs12.c ****     printf("\t\tALGO ID = %d\n", oid);
 396:../src/wolfcrypt/src/pkcs12.c **** #endif
 397:../src/wolfcrypt/src/pkcs12.c **** 
 398:../src/wolfcrypt/src/pkcs12.c ****     /* Digest: should be octet type holding digest */
 399:../src/wolfcrypt/src/pkcs12.c ****     if (GetASNTag(mem, &curIdx, &tag, totalSz) < 0) {
 981                             		.loc 2 399 9
 982 00b4 71 A3 2C                		add	#44, r10, r3
 983 00b7 71 A5 20                		add	#32, r10, r5
 984 00ba ED A4 10                		mov.L	64[r10], r4
 985 00bd EF 52                   		mov.L	r5, r2
 986 00bf ED A1 0E                		mov.L	56[r10], r1
 987 00c2 05 00 00 00             		bsr	_GetASNTag
 988 00c6 EF 15                   		mov.L	r1, r5
 989                             		.loc 2 399 8
 990 00c8 61 05                   		cmp	#0, r5
 991 00ca 28 1C                   		bge	.L55
 992                             	.LBB13:
 400:../src/wolfcrypt/src/pkcs12.c ****         XFREE(mac, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 993                             		.loc 2 400 9
 994 00cc ED A5 01                		mov.L	4[r10], r5
 995 00cf E7 A5 03                		mov.L	r5, 12[r10]
 996 00d2 ED A5 03                		mov.L	12[r10], r5
 997 00d5 61 05                   		cmp	#0, r5
 998 00d7 10                      		beq	.L56
 999                             		.loc 2 400 9 is_stmt 0 discriminator 1
 1000 00d8 ED A1 03                		mov.L	12[r10], r1
 1001 00db 05 00 00 00             		bsr	_wolfSSL_Free
 1002                             	.L56:
 1003                             	.LBE13:
 401:../src/wolfcrypt/src/pkcs12.c ****         return ASN_PARSE_E;
 1004                             		.loc 2 401 16 is_stmt 1
 1005 00df FB 5A 74 FF             		mov.L	#-140, r5
 1006 00e3 38 07 02                		bra	.L73
 1007                             	.L55:
 402:../src/wolfcrypt/src/pkcs12.c ****     }
 403:../src/wolfcrypt/src/pkcs12.c **** 
 404:../src/wolfcrypt/src/pkcs12.c ****     if (tag != ASN_OCTET_STRING) {
 1008                             		.loc 2 404 13
 1009 00e6 CD A5 2C                		mov.B	44[r10], r5
 1010                             		.loc 2 404 8
 1011 00e9 5B 55                   		movu.B	r5, r5
 1012 00eb 61 45                   		cmp	#4, r5
 1013 00ed 20 26                   		beq	.L57
 405:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Failed to get digest");
 1014                             		.loc 2 405 9
 1015 00ef FB 12 0A 01 00 00       		mov.L	#.LC8, r1
 1016 00f5 05 00 00 00             		bsr	_WOLFSSL_MSG
 1017                             	.LBB14:
 406:../src/wolfcrypt/src/pkcs12.c ****         XFREE(mac, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 1018                             		.loc 2 406 9
 1019 00f9 ED A5 01                		mov.L	4[r10], r5
 1020 00fc E7 A5 04                		mov.L	r5, 16[r10]
 1021 00ff ED A5 04                		mov.L	16[r10], r5
 1022 0102 61 05                   		cmp	#0, r5
 1023 0104 10                      		beq	.L58
 1024                             		.loc 2 406 9 is_stmt 0 discriminator 1
 1025 0105 ED A1 04                		mov.L	16[r10], r1
 1026 0108 05 00 00 00             		bsr	_wolfSSL_Free
 1027                             	.L58:
 1028                             	.LBE14:
 407:../src/wolfcrypt/src/pkcs12.c ****         return ASN_PARSE_E;
 1029                             		.loc 2 407 16 is_stmt 1
 1030 010c FB 5A 74 FF             		mov.L	#-140, r5
 1031 0110 38 DA 01                		bra	.L73
 1032                             	.L57:
 408:../src/wolfcrypt/src/pkcs12.c ****     }
 409:../src/wolfcrypt/src/pkcs12.c **** 
 410:../src/wolfcrypt/src/pkcs12.c ****     if (GetLength(mem, &curIdx, &size, totalSz) <= 0) {
 1033                             		.loc 2 410 9
 1034 0113 71 A3 28                		add	#40, r10, r3
 1035 0116 71 A5 20                		add	#32, r10, r5
 1036 0119 ED A4 10                		mov.L	64[r10], r4
 1037 011c EF 52                   		mov.L	r5, r2
 1038 011e ED A1 0E                		mov.L	56[r10], r1
 1039 0121 05 00 00 00             		bsr	_GetLength
 1040 0125 EF 15                   		mov.L	r1, r5
 1041                             		.loc 2 410 8
 1042 0127 61 05                   		cmp	#0, r5
 1043 0129 2A 1C                   		bgt	.L59
 1044                             	.LBB15:
 411:../src/wolfcrypt/src/pkcs12.c ****         XFREE(mac, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 1045                             		.loc 2 411 9
 1046 012b ED A5 01                		mov.L	4[r10], r5
 1047 012e E7 A5 05                		mov.L	r5, 20[r10]
 1048 0131 ED A5 05                		mov.L	20[r10], r5
 1049 0134 61 05                   		cmp	#0, r5
 1050 0136 10                      		beq	.L60
 1051                             		.loc 2 411 9 is_stmt 0 discriminator 1
 1052 0137 ED A1 05                		mov.L	20[r10], r1
 1053 013a 05 00 00 00             		bsr	_wolfSSL_Free
 1054                             	.L60:
 1055                             	.LBE15:
 412:../src/wolfcrypt/src/pkcs12.c ****         return ASN_PARSE_E;
 1056                             		.loc 2 412 16 is_stmt 1
 1057 013e FB 5A 74 FF             		mov.L	#-140, r5
 1058 0142 38 A8 01                		bra	.L73
 1059                             	.L59:
 413:../src/wolfcrypt/src/pkcs12.c ****     }
 414:../src/wolfcrypt/src/pkcs12.c ****     mac->digestSz = size;
 1060                             		.loc 2 414 19
 1061 0145 ED A5 0A                		mov.L	40[r10], r5
 1062 0148 EF 54                   		mov.L	r5, r4
 1063 014a ED A5 01                		mov.L	4[r10], r5
 1064 014d A0 DC                   		mov.L	r4, 12[r5]
 415:../src/wolfcrypt/src/pkcs12.c ****     mac->digest = (byte*)XMALLOC(mac->digestSz, pkcs12->heap,
 1065                             		.loc 2 415 26
 1066 014f ED A5 01                		mov.L	4[r10], r5
 1067 0152 A8 DD                   		mov.L	12[r5], r5
 1068 0154 EF 51                   		mov.L	r5, r1
 1069 0156 05 00 00 00             		bsr	_wolfSSL_Malloc
 1070 015a EF 14                   		mov.L	r1, r4
 1071                             		.loc 2 415 17
 1072 015c ED A5 01                		mov.L	4[r10], r5
 1073 015f E3 54                   		mov.L	r4, [r5]
 416:../src/wolfcrypt/src/pkcs12.c ****                                  DYNAMIC_TYPE_DIGEST);
 417:../src/wolfcrypt/src/pkcs12.c ****     if (mac->digest == NULL || mac->digestSz + curIdx > totalSz) {
 1074                             		.loc 2 417 12
 1075 0161 ED A5 01                		mov.L	4[r10], r5
 1076 0164 EC 55                   		mov.L	[r5], r5
 1077                             		.loc 2 417 8
 1078 0166 61 05                   		cmp	#0, r5
 1079 0168 20 13                   		beq	.L61
 1080                             		.loc 2 417 35 discriminator 1
 1081 016a ED A5 01                		mov.L	4[r10], r5
 1082 016d A8 DC                   		mov.L	12[r5], r4
 1083                             		.loc 2 417 46 discriminator 1
 1084 016f ED A5 08                		mov.L	32[r10], r5
 1085 0172 4B 45                   		add	r4, r5
 1086                             		.loc 2 417 29 discriminator 1
 1087 0174 ED A4 10                		mov.L	64[r10], r4
 1088 0177 47 54                   		cmp	r5, r4
 1089 0179 22 08                   		bgeu	.L62
 1090                             	.L61:
 418:../src/wolfcrypt/src/pkcs12.c ****         ERROR_OUT(MEMORY_E, exit_gsd);
 1091                             		.loc 2 418 9
 1092 017b F8 A6 83                		mov.L	#-125, [r10]
 1093 017e 38 2C 01                		bra	.L63
 1094                             	.L62:
 419:../src/wolfcrypt/src/pkcs12.c ****     }
 420:../src/wolfcrypt/src/pkcs12.c ****     XMEMCPY(mac->digest, mem + curIdx, mac->digestSz);
 1095                             		.loc 2 420 5
 1096 0181 ED A5 01                		mov.L	4[r10], r5
 1097 0184 EC 51                   		mov.L	[r5], r1
 1098 0186 ED A5 08                		mov.L	32[r10], r5
 1099 0189 ED A4 0E                		mov.L	56[r10], r4
 1100 018c 4B 54                   		add	r5, r4
 1101 018e ED A5 01                		mov.L	4[r10], r5
 1102 0191 A8 DD                   		mov.L	12[r5], r5
 1103 0193 EF 53                   		mov.L	r5, r3
 1104 0195 EF 42                   		mov.L	r4, r2
 1105 0197 05 00 00 00             		bsr	_memcpy
 421:../src/wolfcrypt/src/pkcs12.c **** 
 422:../src/wolfcrypt/src/pkcs12.c **** #ifdef WOLFSSL_DEBUG_PKCS12
 423:../src/wolfcrypt/src/pkcs12.c ****     {
 424:../src/wolfcrypt/src/pkcs12.c ****         byte* p;
 425:../src/wolfcrypt/src/pkcs12.c ****         for (printf("\t\tDigest = "), p = (byte*)mem+curIdx;
 426:../src/wolfcrypt/src/pkcs12.c ****              p < (byte*)mem + curIdx + mac->digestSz;
 427:../src/wolfcrypt/src/pkcs12.c ****              printf("%02X", *p), p++);
 428:../src/wolfcrypt/src/pkcs12.c ****         printf(" : size = %d\n", mac->digestSz);
 429:../src/wolfcrypt/src/pkcs12.c ****     }
 430:../src/wolfcrypt/src/pkcs12.c **** #endif
 431:../src/wolfcrypt/src/pkcs12.c **** 
 432:../src/wolfcrypt/src/pkcs12.c ****     curIdx += mac->digestSz;
 1106                             		.loc 2 432 18
 1107 019b ED A5 01                		mov.L	4[r10], r5
 1108 019e A8 DC                   		mov.L	12[r5], r4
 1109                             		.loc 2 432 12
 1110 01a0 ED A5 08                		mov.L	32[r10], r5
 1111 01a3 4B 45                   		add	r4, r5
 1112 01a5 E7 A5 08                		mov.L	r5, 32[r10]
 433:../src/wolfcrypt/src/pkcs12.c **** 
 434:../src/wolfcrypt/src/pkcs12.c ****     /* get salt, should be octet string */
 435:../src/wolfcrypt/src/pkcs12.c ****     if (GetASNTag(mem, &curIdx, &tag, totalSz) < 0) {
 1113                             		.loc 2 435 9
 1114 01a8 71 A3 2C                		add	#44, r10, r3
 1115 01ab 71 A5 20                		add	#32, r10, r5
 1116 01ae ED A4 10                		mov.L	64[r10], r4
 1117 01b1 EF 52                   		mov.L	r5, r2
 1118 01b3 ED A1 0E                		mov.L	56[r10], r1
 1119 01b6 05 00 00 00             		bsr	_GetASNTag
 1120 01ba EF 15                   		mov.L	r1, r5
 1121                             		.loc 2 435 8
 1122 01bc 61 05                   		cmp	#0, r5
 1123 01be 28 09                   		bge	.L64
 436:../src/wolfcrypt/src/pkcs12.c ****         ERROR_OUT(ASN_PARSE_E, exit_gsd);
 1124                             		.loc 2 436 9
 1125 01c0 F8 AA 74 FF             		mov.L	#-140, [r10]
 1126 01c4 38 E6 00                		bra	.L63
 1127                             	.L64:
 437:../src/wolfcrypt/src/pkcs12.c ****     }
 438:../src/wolfcrypt/src/pkcs12.c **** 
 439:../src/wolfcrypt/src/pkcs12.c ****     if (tag != ASN_OCTET_STRING) {
 1128                             		.loc 2 439 13
 1129 01c7 CD A5 2C                		mov.B	44[r10], r5
 1130                             		.loc 2 439 8
 1131 01ca 5B 55                   		movu.B	r5, r5
 1132 01cc 61 45                   		cmp	#4, r5
 1133 01ce 20 13                   		beq	.L65
 440:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Failed to get salt");
 1134                             		.loc 2 440 9
 1135 01d0 FB 12 1F 01 00 00       		mov.L	#.LC9, r1
 1136 01d6 05 00 00 00             		bsr	_WOLFSSL_MSG
 441:../src/wolfcrypt/src/pkcs12.c ****         ERROR_OUT(ASN_PARSE_E, exit_gsd);
 1137                             		.loc 2 441 9
 1138 01da F8 AA 74 FF             		mov.L	#-140, [r10]
 1139 01de 38 CC 00                		bra	.L63
 1140                             	.L65:
 442:../src/wolfcrypt/src/pkcs12.c ****     }
 443:../src/wolfcrypt/src/pkcs12.c **** 
 444:../src/wolfcrypt/src/pkcs12.c ****     if ((ret = GetLength(mem, &curIdx, &size, totalSz)) < 0) {
 1141                             		.loc 2 444 16
 1142 01e1 71 A3 28                		add	#40, r10, r3
 1143 01e4 71 A5 20                		add	#32, r10, r5
 1144 01e7 ED A4 10                		mov.L	64[r10], r4
 1145 01ea EF 52                   		mov.L	r5, r2
 1146 01ec ED A1 0E                		mov.L	56[r10], r1
 1147 01ef 05 00 00 00             		bsr	_GetLength
 1148 01f3 E3 A1                   		mov.L	r1, [r10]
 1149                             		.loc 2 444 8
 1150 01f5 EC A5                   		mov.L	[r10], r5
 1151 01f7 61 05                   		cmp	#0, r5
 1152 01f9 28 05 38 AE 00          		blt	.L74
 445:../src/wolfcrypt/src/pkcs12.c ****         goto exit_gsd;
 446:../src/wolfcrypt/src/pkcs12.c ****     }
 447:../src/wolfcrypt/src/pkcs12.c ****     mac->saltSz = size;
 1153                             		.loc 2 447 17
 1154 01fe ED A5 0A                		mov.L	40[r10], r5
 1155 0201 EF 54                   		mov.L	r5, r4
 1156 0203 ED A5 01                		mov.L	4[r10], r5
 1157 0206 A1 54                   		mov.L	r4, 16[r5]
 448:../src/wolfcrypt/src/pkcs12.c ****     mac->salt = (byte*)XMALLOC(mac->saltSz, pkcs12->heap, DYNAMIC_TYPE_SALT);
 1158                             		.loc 2 448 24
 1159 0208 ED A5 01                		mov.L	4[r10], r5
 1160 020b A9 55                   		mov.L	16[r5], r5
 1161 020d EF 51                   		mov.L	r5, r1
 1162 020f 05 00 00 00             		bsr	_wolfSSL_Malloc
 1163 0213 EF 14                   		mov.L	r1, r4
 1164                             		.loc 2 448 15
 1165 0215 ED A5 01                		mov.L	4[r10], r5
 1166 0218 A0 5C                   		mov.L	r4, 4[r5]
 449:../src/wolfcrypt/src/pkcs12.c ****     if (mac->salt == NULL || mac->saltSz + curIdx > totalSz) {
 1167                             		.loc 2 449 12
 1168 021a ED A5 01                		mov.L	4[r10], r5
 1169 021d A8 5D                   		mov.L	4[r5], r5
 1170                             		.loc 2 449 8
 1171 021f 61 05                   		cmp	#0, r5
 1172 0221 20 13                   		beq	.L67
 1173                             		.loc 2 449 33 discriminator 1
 1174 0223 ED A5 01                		mov.L	4[r10], r5
 1175 0226 A9 54                   		mov.L	16[r5], r4
 1176                             		.loc 2 449 42 discriminator 1
 1177 0228 ED A5 08                		mov.L	32[r10], r5
 1178 022b 4B 45                   		add	r4, r5
 1179                             		.loc 2 449 27 discriminator 1
 1180 022d ED A4 10                		mov.L	64[r10], r4
 1181 0230 47 54                   		cmp	r5, r4
 1182 0232 22 07                   		bgeu	.L68
 1183                             	.L67:
 450:../src/wolfcrypt/src/pkcs12.c ****         ERROR_OUT(MEMORY_E, exit_gsd);
 1184                             		.loc 2 450 9
 1185 0234 F8 A6 83                		mov.L	#-125, [r10]
 1186 0237 2E 73                   		bra	.L63
 1187                             	.L68:
 451:../src/wolfcrypt/src/pkcs12.c ****     }
 452:../src/wolfcrypt/src/pkcs12.c ****     XMEMCPY(mac->salt, mem + curIdx, mac->saltSz);
 1188                             		.loc 2 452 5
 1189 0239 ED A5 01                		mov.L	4[r10], r5
 1190 023c A8 59                   		mov.L	4[r5], r1
 1191 023e ED A5 08                		mov.L	32[r10], r5
 1192 0241 ED A4 0E                		mov.L	56[r10], r4
 1193 0244 4B 54                   		add	r5, r4
 1194 0246 ED A5 01                		mov.L	4[r10], r5
 1195 0249 A9 55                   		mov.L	16[r5], r5
 1196 024b EF 53                   		mov.L	r5, r3
 1197 024d EF 42                   		mov.L	r4, r2
 1198 024f 05 00 00 00             		bsr	_memcpy
 453:../src/wolfcrypt/src/pkcs12.c **** 
 454:../src/wolfcrypt/src/pkcs12.c **** #ifdef WOLFSSL_DEBUG_PKCS12
 455:../src/wolfcrypt/src/pkcs12.c ****     {
 456:../src/wolfcrypt/src/pkcs12.c ****         byte* p;
 457:../src/wolfcrypt/src/pkcs12.c ****         for (printf("\t\tSalt = "), p = (byte*)mem + curIdx;
 458:../src/wolfcrypt/src/pkcs12.c ****              p < (byte*)mem + curIdx + mac->saltSz;
 459:../src/wolfcrypt/src/pkcs12.c ****              printf("%02X", *p), p++);
 460:../src/wolfcrypt/src/pkcs12.c ****         printf(" : size = %d\n", mac->saltSz);
 461:../src/wolfcrypt/src/pkcs12.c ****     }
 462:../src/wolfcrypt/src/pkcs12.c **** #endif
 463:../src/wolfcrypt/src/pkcs12.c **** 
 464:../src/wolfcrypt/src/pkcs12.c ****     curIdx += mac->saltSz;
 1199                             		.loc 2 464 18
 1200 0253 ED A5 01                		mov.L	4[r10], r5
 1201 0256 A9 54                   		mov.L	16[r5], r4
 1202                             		.loc 2 464 12
 1203 0258 ED A5 08                		mov.L	32[r10], r5
 1204 025b 4B 45                   		add	r4, r5
 1205 025d E7 A5 08                		mov.L	r5, 32[r10]
 465:../src/wolfcrypt/src/pkcs12.c **** 
 466:../src/wolfcrypt/src/pkcs12.c ****     /* check for MAC iterations, default to 1 */
 467:../src/wolfcrypt/src/pkcs12.c ****     mac->itt = WC_PKCS12_MAC_DEFAULT;
 1206                             		.loc 2 467 14
 1207 0260 ED A5 01                		mov.L	4[r10], r5
 1208 0263 3E 55 01                		mov.L	#1, 20[r5]
 468:../src/wolfcrypt/src/pkcs12.c ****     if (curIdx < totalSz) {
 1209                             		.loc 2 468 16
 1210 0266 ED A5 08                		mov.L	32[r10], r5
 1211                             		.loc 2 468 8
 1212 0269 ED A4 10                		mov.L	64[r10], r4
 1213 026c 47 54                   		cmp	r5, r4
 1214 026e 25 26                   		bleu	.L69
 1215                             	.LBB16:
 469:../src/wolfcrypt/src/pkcs12.c ****         int number = 0;
 1216                             		.loc 2 469 13
 1217 0270 F9 A6 0C 00             		mov.L	#0, 48[r10]
 470:../src/wolfcrypt/src/pkcs12.c ****         if (GetShortInt(mem, &curIdx, &number, totalSz) >= 0) {
 1218                             		.loc 2 470 13
 1219 0274 71 A3 30                		add	#48, r10, r3
 1220 0277 71 A5 20                		add	#32, r10, r5
 1221 027a ED A4 10                		mov.L	64[r10], r4
 1222 027d EF 52                   		mov.L	r5, r2
 1223 027f ED A1 0E                		mov.L	56[r10], r1
 1224 0282 05 00 00 00             		bsr	_GetShortInt
 1225 0286 EF 15                   		mov.L	r1, r5
 1226                             		.loc 2 470 12
 1227 0288 61 05                   		cmp	#0, r5
 1228 028a 29 0A                   		blt	.L69
 471:../src/wolfcrypt/src/pkcs12.c ****             /* found a iteration value */
 472:../src/wolfcrypt/src/pkcs12.c ****             mac->itt = number;
 1229                             		.loc 2 472 22
 1230 028c ED A4 0C                		mov.L	48[r10], r4
 1231 028f ED A5 01                		mov.L	4[r10], r5
 1232 0292 A1 5C                   		mov.L	r4, 20[r5]
 1233                             	.L69:
 1234                             	.LBE16:
 473:../src/wolfcrypt/src/pkcs12.c ****         }
 474:../src/wolfcrypt/src/pkcs12.c ****     }
 475:../src/wolfcrypt/src/pkcs12.c **** 
 476:../src/wolfcrypt/src/pkcs12.c **** #ifdef WOLFSSL_DEBUG_PKCS12
 477:../src/wolfcrypt/src/pkcs12.c ****     printf("\t\tITERATIONS : %d\n", mac->itt);
 478:../src/wolfcrypt/src/pkcs12.c **** #endif
 479:../src/wolfcrypt/src/pkcs12.c **** 
 480:../src/wolfcrypt/src/pkcs12.c ****     *idx = curIdx;
 1235                             		.loc 2 480 10
 1236 0294 ED A4 08                		mov.L	32[r10], r4
 1237 0297 ED A5 0F                		mov.L	60[r10], r5
 1238 029a E3 54                   		mov.L	r4, [r5]
 481:../src/wolfcrypt/src/pkcs12.c ****     pkcs12->signData = mac;
 1239                             		.loc 2 481 22
 1240 029c ED A5 0D                		mov.L	52[r10], r5
 1241 029f ED A4 01                		mov.L	4[r10], r4
 1242 02a2 A0 D4                   		mov.L	r4, 8[r5]
 482:../src/wolfcrypt/src/pkcs12.c ****     ret = 0; /* success */
 1243                             		.loc 2 482 9
 1244 02a4 F8 A6 00                		mov.L	#0, [r10]
 1245 02a7 2E 03                   		bra	.L63
 1246                             	.L74:
 445:../src/wolfcrypt/src/pkcs12.c ****     }
 1247                             		.loc 2 445 9
 1248 02a9 03                      		nop
 1249                             		.balign 8,3,1
 1250                             	.L63:
 483:../src/wolfcrypt/src/pkcs12.c **** 
 484:../src/wolfcrypt/src/pkcs12.c **** exit_gsd:
 485:../src/wolfcrypt/src/pkcs12.c **** 
 486:../src/wolfcrypt/src/pkcs12.c ****     /* failure cleanup */
 487:../src/wolfcrypt/src/pkcs12.c ****     if (ret != 0) {
 1251                             		.loc 2 487 8
 1252 02aa EC A5                   		mov.L	[r10], r5
 1253 02ac 61 05                   		cmp	#0, r5
 1254 02ae 20 3A                   		beq	.L71
 488:../src/wolfcrypt/src/pkcs12.c ****         if (mac) {
 1255                             		.loc 2 488 12
 1256 02b0 ED A5 01                		mov.L	4[r10], r5
 1257 02b3 61 05                   		cmp	#0, r5
 1258 02b5 20 33                   		beq	.L71
 489:../src/wolfcrypt/src/pkcs12.c ****             if (mac->digest)
 1259                             		.loc 2 489 20
 1260 02b7 ED A5 01                		mov.L	4[r10], r5
 1261 02ba EC 55                   		mov.L	[r5], r5
 1262                             		.loc 2 489 16
 1263 02bc 61 05                   		cmp	#0, r5
 1264 02be 20 17                   		beq	.L72
 1265                             	.LBB17:
 490:../src/wolfcrypt/src/pkcs12.c ****                 XFREE(mac->digest, pkcs12->heap, DYNAMIC_TYPE_DIGEST);
 1266                             		.loc 2 490 17
 1267 02c0 ED A5 01                		mov.L	4[r10], r5
 1268 02c3 EC 55                   		mov.L	[r5], r5
 1269 02c5 E7 A5 06                		mov.L	r5, 24[r10]
 1270 02c8 ED A5 06                		mov.L	24[r10], r5
 1271 02cb 61 05                   		cmp	#0, r5
 1272 02cd 10                      		beq	.L72
 1273                             		.loc 2 490 17 is_stmt 0 discriminator 1
 1274 02ce ED A1 06                		mov.L	24[r10], r1
 1275 02d1 05 00 00 00             		bsr	_wolfSSL_Free
 1276                             	.L72:
 1277                             	.LBE17:
 1278                             	.LBB18:
 491:../src/wolfcrypt/src/pkcs12.c ****             XFREE(mac, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 1279                             		.loc 2 491 13 is_stmt 1
 1280 02d5 ED A5 01                		mov.L	4[r10], r5
 1281 02d8 E7 A5 07                		mov.L	r5, 28[r10]
 1282 02db ED A5 07                		mov.L	28[r10], r5
 1283 02de 61 05                   		cmp	#0, r5
 1284 02e0 10                      		beq	.L71
 1285                             		.loc 2 491 13 is_stmt 0 discriminator 1
 1286 02e1 ED A1 07                		mov.L	28[r10], r1
 1287 02e4 05 00 00 00             		bsr	_wolfSSL_Free
 1288                             		.balign 8,3,1
 1289                             	.L71:
 1290                             	.LBE18:
 492:../src/wolfcrypt/src/pkcs12.c ****         }
 493:../src/wolfcrypt/src/pkcs12.c ****     }
 494:../src/wolfcrypt/src/pkcs12.c **** 
 495:../src/wolfcrypt/src/pkcs12.c ****     return ret;
 1291                             		.loc 2 495 12 is_stmt 1
 1292 02e8 EC A5                   		mov.L	[r10], r5
 1293                             		.balign 8,3,1
 1294                             	.L73:
 496:../src/wolfcrypt/src/pkcs12.c **** }
 1295                             		.loc 2 496 1 discriminator 1
 1296 02ea EF 51                   		mov.L	r5, r1
 1297 02ec 3F AA 13                		rtsd	#76, r10-r10
 1298                             	.LFE47:
 1300 02ef 03                      		.section C,"a",@progbits
 1301 0132 00 00                   		.p2align 2
 1302                             	.LC10:
 1303 0134 50 4B 43 53 31 32 20 6D 		.string	"PKCS12 max unicode size too small"
 1303      61 78 20 75 6E 69 63 6F 
 1303      64 65 20 73 69 7A 65 20 
 1303      74 6F 6F 20 73 6D 61 6C 
 1303      6C 00 
 1304                             	.LC11:
 1305 0156 55 6E 73 75 70 70 6F 72 		.string	"Unsupported hash used"
 1305      74 65 64 20 68 61 73 68 
 1305      20 75 73 65 64 00 
 1306                             		.section	.text.wc_PKCS12_create_mac,"ax",@progbits
 1308                             	_wc_PKCS12_create_mac:
 1309                             	.LFB48:
 497:../src/wolfcrypt/src/pkcs12.c **** 
 498:../src/wolfcrypt/src/pkcs12.c **** 
 499:../src/wolfcrypt/src/pkcs12.c **** /* expects PKCS12 signData to be set up with OID
 500:../src/wolfcrypt/src/pkcs12.c ****  *
 501:../src/wolfcrypt/src/pkcs12.c ****  * returns the size of mac created on success. A negative value will be returned
 502:../src/wolfcrypt/src/pkcs12.c ****  *         in the case that an error happened.
 503:../src/wolfcrypt/src/pkcs12.c ****  */
 504:../src/wolfcrypt/src/pkcs12.c **** static int wc_PKCS12_create_mac(WC_PKCS12* pkcs12, byte* data, word32 dataSz,
 505:../src/wolfcrypt/src/pkcs12.c ****                          const byte* psw, word32 pswSz, byte* out, word32 outSz)
 506:../src/wolfcrypt/src/pkcs12.c **** {
 1310                             		.loc 2 506 1
 1311 0000 6E 6C                   		pushm	r6-r12
 1312                             	.LCFI14:
 1313 0002 72 0A 68 FC             		add	#-920, r0, r10
 1314                             	.LCFI15:
 1315 0006 71 A0 E8                		add	#-24, r10, r0
 1316                             	.LCFI16:
 1317 0009 FB 6A B8 03             		mov.L	#0x3b8, r6
 1318 000d 4B A6                   		add	r10, r6
 1319 000f E7 A1 DF                		mov.L	r1, 892[r10]
 1320 0012 E7 A2 E0                		mov.L	r2, 896[r10]
 1321 0015 E7 A3 E1                		mov.L	r3, 900[r10]
 1322 0018 E7 A4 E2                		mov.L	r4, 904[r10]
 507:../src/wolfcrypt/src/pkcs12.c ****     Hmac     hmac;
 508:../src/wolfcrypt/src/pkcs12.c ****     MacData* mac;
 509:../src/wolfcrypt/src/pkcs12.c ****     int ret, kLen;
 510:../src/wolfcrypt/src/pkcs12.c ****     enum wc_HashType hashT;
 511:../src/wolfcrypt/src/pkcs12.c ****     int idx = 0;
 1323                             		.loc 2 511 9
 1324 001b F9 A6 01 00             		mov.L	#0, 4[r10]
 512:../src/wolfcrypt/src/pkcs12.c ****     int id  = 3; /* value from RFC 7292 indicating key is used for MAC */
 1325                             		.loc 2 512 9
 1326 001f F9 A6 03 03             		mov.L	#3, 12[r10]
 513:../src/wolfcrypt/src/pkcs12.c ****     word32 i;
 514:../src/wolfcrypt/src/pkcs12.c ****     byte unicodePasswd[MAX_UNICODE_SZ];
 515:../src/wolfcrypt/src/pkcs12.c ****     byte key[PKCS_MAX_KEY_SIZE];
 516:../src/wolfcrypt/src/pkcs12.c **** 
 517:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12 == NULL || pkcs12->signData == NULL || data == NULL ||
 1327                             		.loc 2 517 8
 1328 0023 ED A5 DF                		mov.L	892[r10], r5
 1329 0026 61 05                   		cmp	#0, r5
 1330 0028 20 18                   		beq	.L76
 1331                             		.loc 2 517 33 discriminator 1
 1332 002a ED A5 DF                		mov.L	892[r10], r5
 1333 002d A8 D5                   		mov.L	8[r5], r5
 1334                             		.loc 2 517 24 discriminator 1
 1335 002f 61 05                   		cmp	#0, r5
 1336 0031 20 0F                   		beq	.L76
 1337                             		.loc 2 517 52 discriminator 2
 1338 0033 ED A5 E0                		mov.L	896[r10], r5
 1339 0036 61 05                   		cmp	#0, r5
 1340 0038 10                      		beq	.L76
 1341                             		.loc 2 517 68 discriminator 3
 1342 0039 A8 6D                   		mov.L	4[r6], r5
 1343 003b 61 05                   		cmp	#0, r5
 1344 003d 1A                      		bne	.L77
 1345 003e EF 00                   		.balign 8,3,2
 1346                             	.L76:
 518:../src/wolfcrypt/src/pkcs12.c ****             out == NULL) {
 519:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 1347                             		.loc 2 519 16
 1348 0040 FB 5A 53 FF             		mov.L	#-173, r5
 1349 0044 38 B7 01                		bra	.L90
 1350                             	.L77:
 520:../src/wolfcrypt/src/pkcs12.c ****     }
 521:../src/wolfcrypt/src/pkcs12.c **** 
 522:../src/wolfcrypt/src/pkcs12.c ****     mac = pkcs12->signData;
 1351                             		.loc 2 522 9
 1352 0047 ED A5 DF                		mov.L	892[r10], r5
 1353 004a A8 D5                   		mov.L	8[r5], r5
 1354 004c E7 A5 04                		mov.L	r5, 16[r10]
 523:../src/wolfcrypt/src/pkcs12.c **** 
 524:../src/wolfcrypt/src/pkcs12.c ****     /* unicode set up from asn.c */
 525:../src/wolfcrypt/src/pkcs12.c ****     if ((pswSz * 2 + 2) > (int)sizeof(unicodePasswd)) {
 1355                             		.loc 2 525 20
 1356 004f EC 65                   		mov.L	[r6], r5
 1357 0051 62 15                   		add	#1, r5
 1358 0053 4B 55                   		add	r5, r5
 1359                             		.loc 2 525 8
 1360 0055 76 05 00 01             		cmp	#0x100, r5
 1361 0059 25 13                   		bleu	.L79
 526:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("PKCS12 max unicode size too small");
 1362                             		.loc 2 526 9
 1363 005b FB 12 34 01 00 00       		mov.L	#.LC10, r1
 1364 0061 05 00 00 00             		bsr	_WOLFSSL_MSG
 527:../src/wolfcrypt/src/pkcs12.c ****         return UNICODE_SIZE_E;
 1365                             		.loc 2 527 16
 1366 0065 FB 5A 51 FF             		mov.L	#-175, r5
 1367 0069 38 92 01                		bra	.L90
 1368                             	.L79:
 528:../src/wolfcrypt/src/pkcs12.c ****     }
 529:../src/wolfcrypt/src/pkcs12.c **** 
 530:../src/wolfcrypt/src/pkcs12.c ****     for (i = 0; i < pswSz; i++) {
 1369                             		.loc 2 530 12
 1370 006c F9 A6 02 00             		mov.L	#0, 8[r10]
 1371                             		.loc 2 530 5
 1372 0070 2E 34                   		bra	.L80
 1373                             	.L81:
 531:../src/wolfcrypt/src/pkcs12.c ****         unicodePasswd[idx++] = 0x00;
 1374                             		.loc 2 531 26 discriminator 3
 1375 0072 ED A5 01                		mov.L	4[r10], r5
 1376 0075 71 54 01                		add	#1, r5, r4
 1377 0078 E7 A4 01                		mov.L	r4, 4[r10]
 1378                             		.loc 2 531 30 discriminator 3
 1379 007b 4B A5                   		add	r10, r5
 1380 007d FA 54 3C 02 00          		mov.B	#0, 572[r5]
 532:../src/wolfcrypt/src/pkcs12.c ****         unicodePasswd[idx++] = (byte)psw[i];
 1381                             		.loc 2 532 41 discriminator 3
 1382 0082 ED A5 E2                		mov.L	904[r10], r5
 1383 0085 EF 54                   		mov.L	r5, r4
 1384 0087 06 89 A4 02             		add	8[r10].L, r4
 1385                             		.loc 2 532 26 discriminator 3
 1386 008b ED A5 01                		mov.L	4[r10], r5
 1387 008e 71 53 01                		add	#1, r5, r3
 1388 0091 E7 A3 01                		mov.L	r3, 4[r10]
 1389                             		.loc 2 532 32 discriminator 3
 1390 0094 CC 44                   		mov.B	[r4], r4
 1391                             		.loc 2 532 30 discriminator 3
 1392 0096 4B A5                   		add	r10, r5
 1393 0098 CB 54 3C 02             		mov.B	r4, 572[r5]
 530:../src/wolfcrypt/src/pkcs12.c ****         unicodePasswd[idx++] = 0x00;
 1394                             		.loc 2 530 29 discriminator 3
 1395 009c ED A5 02                		mov.L	8[r10], r5
 1396 009f 62 15                   		add	#1, r5
 1397 00a1 E7 A5 02                		mov.L	r5, 8[r10]
 1398                             	.L80:
 530:../src/wolfcrypt/src/pkcs12.c ****         unicodePasswd[idx++] = 0x00;
 1399                             		.loc 2 530 5 discriminator 1
 1400 00a4 ED A4 02                		mov.L	8[r10], r4
 1401 00a7 EC 65                   		mov.L	[r6], r5
 1402 00a9 47 54                   		cmp	r5, r4
 1403 00ab 23 C7                   		bltu	.L81
 533:../src/wolfcrypt/src/pkcs12.c ****     }
 534:../src/wolfcrypt/src/pkcs12.c ****     /* add trailing NULL */
 535:../src/wolfcrypt/src/pkcs12.c ****     unicodePasswd[idx++] = 0x00;
 1404                             		.loc 2 535 22
 1405 00ad ED A5 01                		mov.L	4[r10], r5
 1406 00b0 71 54 01                		add	#1, r5, r4
 1407 00b3 E7 A4 01                		mov.L	r4, 4[r10]
 1408                             		.loc 2 535 26
 1409 00b6 4B A5                   		add	r10, r5
 1410 00b8 FA 54 3C 02 00          		mov.B	#0, 572[r5]
 536:../src/wolfcrypt/src/pkcs12.c ****     unicodePasswd[idx++] = 0x00;
 1411                             		.loc 2 536 22
 1412 00bd ED A5 01                		mov.L	4[r10], r5
 1413 00c0 71 54 01                		add	#1, r5, r4
 1414 00c3 E7 A4 01                		mov.L	r4, 4[r10]
 1415                             		.loc 2 536 26
 1416 00c6 4B A5                   		add	r10, r5
 1417 00c8 FA 54 3C 02 00          		mov.B	#0, 572[r5]
 537:../src/wolfcrypt/src/pkcs12.c **** 
 538:../src/wolfcrypt/src/pkcs12.c ****     /* get hash type used and resulting size of HMAC key */
 539:../src/wolfcrypt/src/pkcs12.c ****     hashT = wc_OidGetHash(mac->oid);
 1418                             		.loc 2 539 30
 1419 00cd ED A5 04                		mov.L	16[r10], r5
 1420 00d0 A8 D5                   		mov.L	8[r5], r5
 1421                             		.loc 2 539 13
 1422 00d2 EF 51                   		mov.L	r5, r1
 1423 00d4 05 00 00 00             		bsr	_wc_OidGetHash
 1424 00d8 E7 A1 05                		mov.L	r1, 20[r10]
 540:../src/wolfcrypt/src/pkcs12.c ****     if (hashT == WC_HASH_TYPE_NONE) {
 1425                             		.loc 2 540 8
 1426 00db ED A5 05                		mov.L	20[r10], r5
 1427 00de 61 05                   		cmp	#0, r5
 1428 00e0 21 21                   		bne	.L82
 541:../src/wolfcrypt/src/pkcs12.c ****         ForceZero(unicodePasswd, MAX_UNICODE_SZ);
 1429                             		.loc 2 541 9
 1430 00e2 72 A5 3C 02             		add	#0x23c, r10, r5
 1431 00e6 FB 2A 00 01             		mov.L	#0x100, r2
 1432 00ea EF 51                   		mov.L	r5, r1
 1433 00ec 05 00 00 00             		bsr	_ForceZero
 542:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Unsupported hash used");
 1434                             		.loc 2 542 9
 1435 00f0 FB 12 56 01 00 00       		mov.L	#.LC11, r1
 1436 00f6 05 00 00 00             		bsr	_WOLFSSL_MSG
 543:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 1437                             		.loc 2 543 16
 1438 00fa FB 5A 53 FF             		mov.L	#-173, r5
 1439 00fe 38 FD 00                		bra	.L90
 1440                             	.L82:
 544:../src/wolfcrypt/src/pkcs12.c ****     }
 545:../src/wolfcrypt/src/pkcs12.c ****     kLen = wc_HashGetDigestSize(hashT);
 1441                             		.loc 2 545 12
 1442 0101 ED A1 05                		mov.L	20[r10], r1
 1443 0104 05 00 00 00             		bsr	_wc_HashGetDigestSize
 1444 0108 E7 A1 06                		mov.L	r1, 24[r10]
 546:../src/wolfcrypt/src/pkcs12.c **** 
 547:../src/wolfcrypt/src/pkcs12.c ****     /* check out buffer is large enough */
 548:../src/wolfcrypt/src/pkcs12.c ****     if (kLen < 0 || outSz < (word32)kLen) {
 1445                             		.loc 2 548 8
 1446 010b ED A5 06                		mov.L	24[r10], r5
 1447 010e 61 05                   		cmp	#0, r5
 1448 0110 29 0B                   		blt	.L83
 1449                             		.loc 2 548 29 discriminator 1
 1450 0112 ED A5 06                		mov.L	24[r10], r5
 1451                             		.loc 2 548 18 discriminator 1
 1452 0115 A8 E4                   		mov.L	8[r6], r4
 1453 0117 47 54                   		cmp	r5, r4
 1454 0119 22 17                   		bgeu	.L84
 1455                             	.L83:
 549:../src/wolfcrypt/src/pkcs12.c ****         ForceZero(unicodePasswd, MAX_UNICODE_SZ);
 1456                             		.loc 2 549 9
 1457 011b 72 A5 3C 02             		add	#0x23c, r10, r5
 1458 011f FB 2A 00 01             		mov.L	#0x100, r2
 1459 0123 EF 51                   		mov.L	r5, r1
 1460 0125 05 00 00 00             		bsr	_ForceZero
 550:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 1461                             		.loc 2 550 16
 1462 0129 FB 5A 53 FF             		mov.L	#-173, r5
 1463 012d 38 CE 00                		bra	.L90
 1464                             	.L84:
 551:../src/wolfcrypt/src/pkcs12.c ****     }
 552:../src/wolfcrypt/src/pkcs12.c **** 
 553:../src/wolfcrypt/src/pkcs12.c ****     /* idx contains size of unicodePasswd */
 554:../src/wolfcrypt/src/pkcs12.c ****     ret = wc_PKCS12_PBKDF_ex(key, unicodePasswd, idx, mac->salt, mac->saltSz,
 1465                             		.loc 2 554 58
 1466 0130 ED A5 04                		mov.L	16[r10], r5
 1467 0133 A8 5C                   		mov.L	4[r5], r4
 1468                             		.loc 2 554 69
 1469 0135 ED A5 04                		mov.L	16[r10], r5
 1470 0138 A9 55                   		mov.L	16[r5], r5
 1471                             		.loc 2 554 11
 1472 013a EF 53                   		mov.L	r5, r3
 1473 013c ED A5 04                		mov.L	16[r10], r5
 1474 013f A9 59                   		mov.L	20[r5], r1
 1475 0141 ED AB 05                		mov.L	20[r10], r11
 1476 0144 ED A5 DF                		mov.L	892[r10], r5
 1477 0147 EC 5C                   		mov.L	[r5], r12
 1478 0149 72 A2 3C 02             		add	#0x23c, r10, r2
 1479 014d 72 A5 3C 03             		add	#0x33c, r10, r5
 1480 0151 E7 0C 05                		mov.L	r12, 20[r0]
 1481 0154 ED AC 03                		mov.L	12[r10], r12
 1482 0157 E7 0C 04                		mov.L	r12, 16[r0]
 1483 015a E7 0B 03                		mov.L	r11, 12[r0]
 1484 015d ED AB 06                		mov.L	24[r10], r11
 1485 0160 E7 0B 02                		mov.L	r11, 8[r0]
 1486 0163 A0 09                   		mov.L	r1, 4[r0]
 1487 0165 E3 03                   		mov.L	r3, [r0]
 1488 0167 ED A3 01                		mov.L	4[r10], r3
 1489 016a EF 51                   		mov.L	r5, r1
 1490 016c 05 00 00 00             		bsr	_wc_PKCS12_PBKDF_ex
 1491 0170 E3 A1                   		mov.L	r1, [r10]
 555:../src/wolfcrypt/src/pkcs12.c ****                                   mac->itt, kLen, (int)hashT, id, pkcs12->heap);
 556:../src/wolfcrypt/src/pkcs12.c ****     ForceZero(unicodePasswd, MAX_UNICODE_SZ);
 1492                             		.loc 2 556 5
 1493 0172 72 A5 3C 02             		add	#0x23c, r10, r5
 1494 0176 FB 2A 00 01             		mov.L	#0x100, r2
 1495 017a EF 51                   		mov.L	r5, r1
 1496 017c 05 00 00 00             		bsr	_ForceZero
 557:../src/wolfcrypt/src/pkcs12.c ****     if (ret < 0) {
 1497                             		.loc 2 557 8
 1498 0180 EC A5                   		mov.L	[r10], r5
 1499 0182 61 05                   		cmp	#0, r5
 1500 0184 28 06                   		bge	.L85
 558:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 1501                             		.loc 2 558 16
 1502 0186 EC A5                   		mov.L	[r10], r5
 1503 0188 2E 73                   		bra	.L90
 1504                             	.L85:
 559:../src/wolfcrypt/src/pkcs12.c ****     }
 560:../src/wolfcrypt/src/pkcs12.c **** 
 561:../src/wolfcrypt/src/pkcs12.c ****     /* now that key has been created use it to get HMAC hash on data */
 562:../src/wolfcrypt/src/pkcs12.c ****     if ((ret = wc_HmacInit(&hmac, pkcs12->heap, INVALID_DEVID)) != 0) {
 1505                             		.loc 2 562 16
 1506 018a ED A5 DF                		mov.L	892[r10], r5
 1507 018d EC 54                   		mov.L	[r5], r4
 1508 018f 71 A5 1C                		add	#28, r10, r5
 1509 0192 FB 36 FE                		mov.L	#-2, r3
 1510 0195 EF 42                   		mov.L	r4, r2
 1511 0197 EF 51                   		mov.L	r5, r1
 1512 0199 05 00 00 00             		bsr	_wc_HmacInit
 1513 019d E3 A1                   		mov.L	r1, [r10]
 1514                             		.loc 2 562 8
 1515 019f EC A5                   		mov.L	[r10], r5
 1516 01a1 61 05                   		cmp	#0, r5
 1517 01a3 15                      		beq	.L86
 563:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 1518                             		.loc 2 563 16
 1519 01a4 EC A5                   		mov.L	[r10], r5
 1520 01a6 2E 55                   		bra	.L90
 1521                             	.L86:
 564:../src/wolfcrypt/src/pkcs12.c ****     }
 565:../src/wolfcrypt/src/pkcs12.c ****     ret = wc_HmacSetKey(&hmac, (int)hashT, key, kLen);
 1522                             		.loc 2 565 11
 1523 01a8 ED A2 05                		mov.L	20[r10], r2
 1524 01ab ED A4 06                		mov.L	24[r10], r4
 1525 01ae 72 A3 3C 03             		add	#0x33c, r10, r3
 1526 01b2 71 A5 1C                		add	#28, r10, r5
 1527 01b5 EF 51                   		mov.L	r5, r1
 1528 01b7 05 00 00 00             		bsr	_wc_HmacSetKey
 1529 01bb E3 A1                   		mov.L	r1, [r10]
 566:../src/wolfcrypt/src/pkcs12.c ****     if (ret == 0)
 1530                             		.loc 2 566 8
 1531 01bd EC A5                   		mov.L	[r10], r5
 1532 01bf 61 05                   		cmp	#0, r5
 1533 01c1 21 13                   		bne	.L87
 567:../src/wolfcrypt/src/pkcs12.c ****         ret = wc_HmacUpdate(&hmac, data, dataSz);
 1534                             		.loc 2 567 15
 1535 01c3 71 A5 1C                		add	#28, r10, r5
 1536 01c6 ED A3 E1                		mov.L	900[r10], r3
 1537 01c9 ED A2 E0                		mov.L	896[r10], r2
 1538 01cc EF 51                   		mov.L	r5, r1
 1539 01ce 05 00 00 00             		bsr	_wc_HmacUpdate
 1540 01d2 E3 A1                   		mov.L	r1, [r10]
 1541                             	.L87:
 568:../src/wolfcrypt/src/pkcs12.c ****     if (ret == 0)
 1542                             		.loc 2 568 8
 1543 01d4 EC A5                   		mov.L	[r10], r5
 1544 01d6 61 05                   		cmp	#0, r5
 1545 01d8 21 0F                   		bne	.L88
 569:../src/wolfcrypt/src/pkcs12.c ****         ret = wc_HmacFinal(&hmac, out);
 1546                             		.loc 2 569 15
 1547 01da 71 A5 1C                		add	#28, r10, r5
 1548 01dd A8 6A                   		mov.L	4[r6], r2
 1549 01df EF 51                   		mov.L	r5, r1
 1550 01e1 05 00 00 00             		bsr	_wc_HmacFinal
 1551 01e5 E3 A1                   		mov.L	r1, [r10]
 1552                             	.L88:
 570:../src/wolfcrypt/src/pkcs12.c ****     wc_HmacFree(&hmac);
 1553                             		.loc 2 570 5
 1554 01e7 71 A5 1C                		add	#28, r10, r5
 1555 01ea EF 51                   		mov.L	r5, r1
 1556 01ec 05 00 00 00             		bsr	_wc_HmacFree
 571:../src/wolfcrypt/src/pkcs12.c **** 
 572:../src/wolfcrypt/src/pkcs12.c ****     if (ret != 0)
 1557                             		.loc 2 572 8
 1558 01f0 EC A5                   		mov.L	[r10], r5
 1559 01f2 61 05                   		cmp	#0, r5
 1560 01f4 14                      		beq	.L89
 573:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 1561                             		.loc 2 573 16
 1562 01f5 EC A5                   		mov.L	[r10], r5
 1563 01f7 0C                      		bra	.L90
 1564                             	.L89:
 574:../src/wolfcrypt/src/pkcs12.c **** 
 575:../src/wolfcrypt/src/pkcs12.c ****     return kLen; /* same as digest size */
 1565                             		.loc 2 575 12
 1566 01f8 ED A5 06                		mov.L	24[r10], r5
 1567                             		.balign 8,3,1
 1568                             	.L90:
 576:../src/wolfcrypt/src/pkcs12.c **** }
 1569                             		.loc 2 576 1 discriminator 1
 1570 01fb EF 51                   		mov.L	r5, r1
 1571 01fd 3F 6C F3                		rtsd	#972, r6-r12
 1572                             	.LFE48:
 1574                             		.section C,"a",@progbits
 1575                             		.p2align 2
 1576                             	.LC12:
 1577 016c 50 4B 43 53 31 32 20 6D 		.string	"PKCS12 max digest size too small"
 1577      61 78 20 64 69 67 65 73 
 1577      74 20 73 69 7A 65 20 74 
 1577      6F 6F 20 73 6D 61 6C 6C 
 1577      00 
 1578                             		.section	.text.wc_PKCS12_verify,"ax",@progbits
 1580                             	_wc_PKCS12_verify:
 1581                             	.LFB49:
 577:../src/wolfcrypt/src/pkcs12.c **** 
 578:../src/wolfcrypt/src/pkcs12.c **** /* check mac on pkcs12, pkcs12->mac has been sanity checked before entering *
 579:../src/wolfcrypt/src/pkcs12.c ****  * returns the result of comparison, success is 0 */
 580:../src/wolfcrypt/src/pkcs12.c **** static int wc_PKCS12_verify(WC_PKCS12* pkcs12, byte* data, word32 dataSz,
 581:../src/wolfcrypt/src/pkcs12.c ****                             const byte* psw, word32 pswSz)
 582:../src/wolfcrypt/src/pkcs12.c **** {
 1582                             		.loc 2 582 1
 1583 0000 7E AA                   		push.l	r10
 1584                             	.LCFI17:
 1585 0002 71 0A A4                		add	#-92, r0, r10
 1586                             	.LCFI18:
 1587 0005 71 A0 F4                		add	#-12, r10, r0
 1588                             	.LCFI19:
 1589 0008 75 45 64                		mov.L	#0x64, r5
 1590 000b 4B A5                   		add	r10, r5
 1591 000d E7 A1 12                		mov.L	r1, 72[r10]
 1592 0010 E7 A2 13                		mov.L	r2, 76[r10]
 1593 0013 E7 A3 14                		mov.L	r3, 80[r10]
 1594 0016 E7 A4 15                		mov.L	r4, 84[r10]
 583:../src/wolfcrypt/src/pkcs12.c ****     MacData* mac;
 584:../src/wolfcrypt/src/pkcs12.c ****     int ret;
 585:../src/wolfcrypt/src/pkcs12.c ****     byte digest[WC_MAX_DIGEST_SIZE];
 586:../src/wolfcrypt/src/pkcs12.c **** 
 587:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12 == NULL || pkcs12->signData == NULL || data == NULL) {
 1595                             		.loc 2 587 8
 1596 0019 ED A4 12                		mov.L	72[r10], r4
 1597 001c 61 04                   		cmp	#0, r4
 1598 001e 20 10                   		beq	.L92
 1599                             		.loc 2 587 33 discriminator 1
 1600 0020 ED A4 12                		mov.L	72[r10], r4
 1601 0023 A8 C4                   		mov.L	8[r4], r4
 1602                             		.loc 2 587 24 discriminator 1
 1603 0025 61 04                   		cmp	#0, r4
 1604 0027 17                      		beq	.L92
 1605                             		.loc 2 587 52 discriminator 2
 1606 0028 ED A4 13                		mov.L	76[r10], r4
 1607 002b 61 04                   		cmp	#0, r4
 1608 002d 1F                      		bne	.L93
 1609                             	.L92:
 588:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 1610                             		.loc 2 588 16
 1611 002e FB 5A 53 FF             		mov.L	#-173, r5
 1612 0032 2E 62                   		bra	.L97
 1613                             	.L93:
 589:../src/wolfcrypt/src/pkcs12.c ****     }
 590:../src/wolfcrypt/src/pkcs12.c **** 
 591:../src/wolfcrypt/src/pkcs12.c ****     mac = pkcs12->signData;
 1614                             		.loc 2 591 9
 1615 0034 ED A4 12                		mov.L	72[r10], r4
 1616 0037 A8 C4                   		mov.L	8[r4], r4
 1617 0039 E3 A4                   		mov.L	r4, [r10]
 592:../src/wolfcrypt/src/pkcs12.c **** 
 593:../src/wolfcrypt/src/pkcs12.c **** #ifdef WOLFSSL_DEBUG_PKCS12
 594:../src/wolfcrypt/src/pkcs12.c ****     printf("Verifying MAC with OID = %d\n", mac->oid);
 595:../src/wolfcrypt/src/pkcs12.c **** #endif
 596:../src/wolfcrypt/src/pkcs12.c **** 
 597:../src/wolfcrypt/src/pkcs12.c ****     /* check if this builds digest size is too small */
 598:../src/wolfcrypt/src/pkcs12.c ****     if (mac->digestSz > WC_MAX_DIGEST_SIZE) {
 1618                             		.loc 2 598 12
 1619 003b EC A4                   		mov.L	[r10], r4
 1620 003d A8 CC                   		mov.L	12[r4], r4
 1621                             		.loc 2 598 8
 1622 003f 75 54 40                		cmp	#0x40, r4
 1623 0042 25 12                   		bleu	.L95
 599:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("PKCS12 max digest size too small");
 1624                             		.loc 2 599 9
 1625 0044 FB 12 6C 01 00 00       		mov.L	#.LC12, r1
 1626 004a 05 00 00 00             		bsr	_WOLFSSL_MSG
 600:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 1627                             		.loc 2 600 16
 1628 004e FB 5A 53 FF             		mov.L	#-173, r5
 1629 0052 2E 42                   		bra	.L97
 1630                             	.L95:
 601:../src/wolfcrypt/src/pkcs12.c ****     }
 602:../src/wolfcrypt/src/pkcs12.c **** 
 603:../src/wolfcrypt/src/pkcs12.c ****     if ((ret = wc_PKCS12_create_mac(pkcs12, data, dataSz, psw, pswSz,
 1631                             		.loc 2 603 16
 1632 0054 3E 02 40                		mov.L	#0x40, 8[r0]
 1633 0057 71 A4 08                		add	#8, r10, r4
 1634 005a A0 0C                   		mov.L	r4, 4[r0]
 1635 005c EC 55                   		mov.L	[r5], r5
 1636 005e E3 05                   		mov.L	r5, [r0]
 1637 0060 ED A4 15                		mov.L	84[r10], r4
 1638 0063 ED A3 14                		mov.L	80[r10], r3
 1639 0066 ED A2 13                		mov.L	76[r10], r2
 1640 0069 ED A1 12                		mov.L	72[r10], r1
 1641 006c 05 00 00 00             		bsr	_wc_PKCS12_create_mac
 1642 0070 E7 A1 01                		mov.L	r1, 4[r10]
 1643                             		.loc 2 603 8
 1644 0073 ED A5 01                		mov.L	4[r10], r5
 1645 0076 61 05                   		cmp	#0, r5
 1646 0078 28 07                   		bge	.L96
 604:../src/wolfcrypt/src/pkcs12.c ****             digest, WC_MAX_DIGEST_SIZE)) < 0) {
 605:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 1647                             		.loc 2 605 16
 1648 007a ED A5 01                		mov.L	4[r10], r5
 1649 007d 2E 17                   		bra	.L97
 1650                             	.L96:
 606:../src/wolfcrypt/src/pkcs12.c ****     }
 607:../src/wolfcrypt/src/pkcs12.c **** 
 608:../src/wolfcrypt/src/pkcs12.c **** #ifdef WOLFSSL_DEBUG_PKCS12
 609:../src/wolfcrypt/src/pkcs12.c ****     {
 610:../src/wolfcrypt/src/pkcs12.c ****         byte* p;
 611:../src/wolfcrypt/src/pkcs12.c ****         for (printf("\t\tHash = "), p = (byte*)digest;
 612:../src/wolfcrypt/src/pkcs12.c ****              p < (byte*)digest + mac->digestSz;
 613:../src/wolfcrypt/src/pkcs12.c ****              printf("%02X", *p), p++);
 614:../src/wolfcrypt/src/pkcs12.c ****         printf(" : size = %d\n", mac->digestSz);
 615:../src/wolfcrypt/src/pkcs12.c ****     }
 616:../src/wolfcrypt/src/pkcs12.c **** #endif
 617:../src/wolfcrypt/src/pkcs12.c **** 
 618:../src/wolfcrypt/src/pkcs12.c ****     return XMEMCMP(digest, mac->digest, mac->digestSz);
 1651                             		.loc 2 618 12
 1652 007f EC A5                   		mov.L	[r10], r5
 1653 0081 EC 54                   		mov.L	[r5], r4
 1654 0083 EC A5                   		mov.L	[r10], r5
 1655 0085 A8 DB                   		mov.L	12[r5], r3
 1656 0087 71 A5 08                		add	#8, r10, r5
 1657 008a EF 42                   		mov.L	r4, r2
 1658 008c EF 51                   		mov.L	r5, r1
 1659 008e 05 00 00 00             		bsr	_memcmp
 1660 0092 EF 15                   		mov.L	r1, r5
 1661                             		.balign 8,3,1
 1662                             	.L97:
 619:../src/wolfcrypt/src/pkcs12.c **** }
 1663                             		.loc 2 619 1 discriminator 1
 1664 0094 EF 51                   		mov.L	r5, r1
 1665 0096 3F AA 1B                		rtsd	#108, r10-r10
 1666                             	.LFE49:
 1668 0099 FD 70 40 00 00 00 80    		.section	.text.wc_PKCS12_verify_ex,"ax",@progbits
 1669                             		.global	_wc_PKCS12_verify_ex
 1671                             	_wc_PKCS12_verify_ex:
 1672                             	.LFB50:
 620:../src/wolfcrypt/src/pkcs12.c **** 
 621:../src/wolfcrypt/src/pkcs12.c **** int wc_PKCS12_verify_ex(WC_PKCS12* pkcs12, const byte* psw, word32 pswSz)
 622:../src/wolfcrypt/src/pkcs12.c **** {
 1673                             		.loc 2 622 1
 1674 0000 7E AA                   		push.l	r10
 1675                             	.LCFI20:
 1676 0002 71 0A F4                		add	#-12, r0, r10
 1677                             	.LCFI21:
 1678 0005 71 A0 FC                		add	#-4, r10, r0
 1679                             	.LCFI22:
 1680 0008 E3 A1                   		mov.L	r1, [r10]
 1681 000a E7 A2 01                		mov.L	r2, 4[r10]
 1682 000d E7 A3 02                		mov.L	r3, 8[r10]
 623:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12 == NULL || pkcs12->safe == NULL) {
 1683                             		.loc 2 623 8
 1684 0010 EC A5                   		mov.L	[r10], r5
 1685 0012 61 05                   		cmp	#0, r5
 1686 0014 10                      		beq	.L99
 1687                             		.loc 2 623 33 discriminator 1
 1688 0015 EC A5                   		mov.L	[r10], r5
 1689 0017 A8 5D                   		mov.L	4[r5], r5
 1690                             		.loc 2 623 24 discriminator 1
 1691 0019 61 05                   		cmp	#0, r5
 1692 001b 1F                      		bne	.L100
 1693                             	.L99:
 624:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 1694                             		.loc 2 624 16
 1695 001c FB 5A 53 FF             		mov.L	#-173, r5
 1696 0020 2E 20                   		bra	.L101
 1697                             	.L100:
 625:../src/wolfcrypt/src/pkcs12.c ****     }
 626:../src/wolfcrypt/src/pkcs12.c ****     return wc_PKCS12_verify(pkcs12, pkcs12->safe->data, pkcs12->safe->dataSz,
 1698                             		.loc 2 626 43
 1699 0022 EC A5                   		mov.L	[r10], r5
 1700 0024 A8 5D                   		mov.L	4[r5], r5
 1701                             		.loc 2 626 12
 1702 0026 A8 5A                   		mov.L	4[r5], r2
 1703                             		.loc 2 626 63
 1704 0028 EC A5                   		mov.L	[r10], r5
 1705 002a A8 5D                   		mov.L	4[r5], r5
 1706                             		.loc 2 626 12
 1707 002c A9 55                   		mov.L	16[r5], r5
 1708 002e ED A4 02                		mov.L	8[r10], r4
 1709 0031 E3 04                   		mov.L	r4, [r0]
 1710 0033 ED A4 01                		mov.L	4[r10], r4
 1711 0036 EF 53                   		mov.L	r5, r3
 1712 0038 EC A1                   		mov.L	[r10], r1
 1713 003a 05 00 00 00             		bsr	_wc_PKCS12_verify
 1714 003e EF 15                   		mov.L	r1, r5
 1715                             	.L101:
 627:../src/wolfcrypt/src/pkcs12.c ****             psw, pswSz);
 628:../src/wolfcrypt/src/pkcs12.c **** }
 1716                             		.loc 2 628 1
 1717 0040 EF 51                   		mov.L	r5, r1
 1718 0042 3F AA 05                		rtsd	#20, r10-r10
 1719                             	.LFE50:
 1721                             		.section C,"a",@progbits
 1722 018d 00 00 00                		.p2align 2
 1723                             	.LC13:
 1724 0190 77 6F 6C 66 53 53 4C 5F 		.string	"wolfSSL_d2i_PKCS12"
 1724      64 32 69 5F 50 4B 43 53 
 1724      31 32 00 
 1725                             	.LC14:
 1726 01a3 50 4B 43 53 31 32 20 75 		.string	"PKCS12 unsupported version!"
 1726      6E 73 75 70 70 6F 72 74 
 1726      65 64 20 76 65 72 73 69 
 1726      6F 6E 21 00 
 1727                             	.LC15:
 1728 01bf 47 65 74 53 61 66 65 43 		.string	"GetSafeContent error"
 1728      6F 6E 74 65 6E 74 20 65 
 1728      72 72 6F 72 00 
 1729                             	.LC16:
 1730 01d4 49 67 6E 6F 72 69 6E 67 		.string	"Ignoring unknown data at end of PKCS12 DER buffer"
 1730      20 75 6E 6B 6E 6F 77 6E 
 1730      20 64 61 74 61 20 61 74 
 1730      20 65 6E 64 20 6F 66 20 
 1730      50 4B 43 53 31 32 20 44 
 1731                             		.section	.text.wc_d2i_PKCS12,"ax",@progbits
 1732                             		.global	_wc_d2i_PKCS12
 1734                             	_wc_d2i_PKCS12:
 1735                             	.LFB51:
 629:../src/wolfcrypt/src/pkcs12.c **** 
 630:../src/wolfcrypt/src/pkcs12.c **** 
 631:../src/wolfcrypt/src/pkcs12.c **** /* Convert DER format stored in der buffer to WC_PKCS12 struct
 632:../src/wolfcrypt/src/pkcs12.c ****  * Puts the raw contents of Content Info into structure without completely
 633:../src/wolfcrypt/src/pkcs12.c ****  * parsing or decoding.
 634:../src/wolfcrypt/src/pkcs12.c ****  * der    : pointer to der buffer holding PKCS12
 635:../src/wolfcrypt/src/pkcs12.c ****  * derSz  : size of der buffer
 636:../src/wolfcrypt/src/pkcs12.c ****  * pkcs12 : non-null pkcs12 pointer
 637:../src/wolfcrypt/src/pkcs12.c ****  * return 0 on success and negative on failure.
 638:../src/wolfcrypt/src/pkcs12.c ****  */
 639:../src/wolfcrypt/src/pkcs12.c **** int wc_d2i_PKCS12(const byte* der, word32 derSz, WC_PKCS12* pkcs12)
 640:../src/wolfcrypt/src/pkcs12.c **** {
 1736                             		.loc 2 640 1
 1737 0000 7E AA                   		push.l	r10
 1738                             	.LCFI23:
 1739 0002 71 0A E0                		add	#-32, r0, r10
 1740                             	.LCFI24:
 1741 0005 EF A0                   		mov.L	r10, r0
 1742 0007 E7 A1 05                		mov.L	r1, 20[r10]
 1743 000a E7 A2 06                		mov.L	r2, 24[r10]
 1744 000d E7 A3 07                		mov.L	r3, 28[r10]
 641:../src/wolfcrypt/src/pkcs12.c ****     word32 idx  = 0;
 1745                             		.loc 2 641 12
 1746 0010 F9 A6 02 00             		mov.L	#0, 8[r10]
 642:../src/wolfcrypt/src/pkcs12.c ****     word32 totalSz = 0;
 1747                             		.loc 2 642 12
 1748 0014 F9 A6 01 00             		mov.L	#0, 4[r10]
 643:../src/wolfcrypt/src/pkcs12.c ****     int ret;
 644:../src/wolfcrypt/src/pkcs12.c ****     int size    = 0;
 1749                             		.loc 2 644 9
 1750 0018 F9 A6 03 00             		mov.L	#0, 12[r10]
 645:../src/wolfcrypt/src/pkcs12.c ****     int version = 0;
 1751                             		.loc 2 645 9
 1752 001c F9 A6 04 00             		mov.L	#0, 16[r10]
 646:../src/wolfcrypt/src/pkcs12.c **** 
 647:../src/wolfcrypt/src/pkcs12.c ****     WOLFSSL_ENTER("wolfSSL_d2i_PKCS12");
 1753                             		.loc 2 647 5
 1754 0020 FB 12 90 01 00 00       		mov.L	#.LC13, r1
 1755 0026 05 00 00 00             		bsr	_WOLFSSL_ENTER
 648:../src/wolfcrypt/src/pkcs12.c **** 
 649:../src/wolfcrypt/src/pkcs12.c ****     if (der == NULL || pkcs12 == NULL) {
 1756                             		.loc 2 649 8
 1757 002a ED A5 05                		mov.L	20[r10], r5
 1758 002d 61 05                   		cmp	#0, r5
 1759 002f 17                      		beq	.L103
 1760                             		.loc 2 649 21 discriminator 1
 1761 0030 ED A5 07                		mov.L	28[r10], r5
 1762 0033 61 05                   		cmp	#0, r5
 1763 0035 18                      		bne	.L104
 1764                             	.L103:
 650:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 1765                             		.loc 2 650 16
 1766 0036 FB 5A 53 FF             		mov.L	#-173, r5
 1767 003a 38 0A 01                		bra	.L113
 1768                             	.L104:
 651:../src/wolfcrypt/src/pkcs12.c ****     }
 652:../src/wolfcrypt/src/pkcs12.c **** 
 653:../src/wolfcrypt/src/pkcs12.c ****     totalSz = derSz;
 1769                             		.loc 2 653 13
 1770 003d ED A5 06                		mov.L	24[r10], r5
 1771 0040 E7 A5 01                		mov.L	r5, 4[r10]
 654:../src/wolfcrypt/src/pkcs12.c ****     if (GetSequence(der, &idx, &size, totalSz) <= 0) {
 1772                             		.loc 2 654 9
 1773 0043 71 A3 0C                		add	#12, r10, r3
 1774 0046 71 A5 08                		add	#8, r10, r5
 1775 0049 ED A4 01                		mov.L	4[r10], r4
 1776 004c EF 52                   		mov.L	r5, r2
 1777 004e ED A1 05                		mov.L	20[r10], r1
 1778 0051 05 00 00 00             		bsr	_GetSequence
 1779 0055 EF 15                   		mov.L	r1, r5
 1780                             		.loc 2 654 8
 1781 0057 61 05                   		cmp	#0, r5
 1782 0059 2A 13                   		bgt	.L106
 655:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Failed to get PKCS12 sequence");
 1783                             		.loc 2 655 9
 1784 005b FB 12 EC 00 00 00       		mov.L	#.LC7, r1
 1785 0061 05 00 00 00             		bsr	_WOLFSSL_MSG
 656:../src/wolfcrypt/src/pkcs12.c ****         return ASN_PARSE_E;
 1786                             		.loc 2 656 16
 1787 0065 FB 5A 74 FF             		mov.L	#-140, r5
 1788 0069 38 DB 00                		bra	.L113
 1789                             	.L106:
 657:../src/wolfcrypt/src/pkcs12.c ****     }
 658:../src/wolfcrypt/src/pkcs12.c **** 
 659:../src/wolfcrypt/src/pkcs12.c ****     /* get version */
 660:../src/wolfcrypt/src/pkcs12.c ****     if ((ret = GetMyVersion(der, &idx, &version, totalSz)) < 0) {
 1790                             		.loc 2 660 16
 1791 006c 71 A3 10                		add	#16, r10, r3
 1792 006f 71 A5 08                		add	#8, r10, r5
 1793 0072 ED A4 01                		mov.L	4[r10], r4
 1794 0075 EF 52                   		mov.L	r5, r2
 1795 0077 ED A1 05                		mov.L	20[r10], r1
 1796 007a 05 00 00 00             		bsr	_GetMyVersion
 1797 007e E3 A1                   		mov.L	r1, [r10]
 1798                             		.loc 2 660 8
 1799 0080 EC A5                   		mov.L	[r10], r5
 1800 0082 61 05                   		cmp	#0, r5
 1801 0084 28 07                   		bge	.L107
 661:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 1802                             		.loc 2 661 16
 1803 0086 EC A5                   		mov.L	[r10], r5
 1804 0088 38 BC 00                		bra	.L113
 1805                             	.L107:
 662:../src/wolfcrypt/src/pkcs12.c ****     }
 663:../src/wolfcrypt/src/pkcs12.c **** 
 664:../src/wolfcrypt/src/pkcs12.c **** #ifdef WOLFSSL_DEBUG_PKCS12
 665:../src/wolfcrypt/src/pkcs12.c ****     printf("\nBEGIN: PKCS12 size = %d\n", totalSz);
 666:../src/wolfcrypt/src/pkcs12.c ****     printf("version = %d\n", version);
 667:../src/wolfcrypt/src/pkcs12.c **** #endif
 668:../src/wolfcrypt/src/pkcs12.c **** 
 669:../src/wolfcrypt/src/pkcs12.c ****     if (version != WC_PKCS12_VERSION_DEFAULT) {
 1806                             		.loc 2 669 17
 1807 008b ED A5 04                		mov.L	16[r10], r5
 1808                             		.loc 2 669 8
 1809 008e 61 35                   		cmp	#3, r5
 1810 0090 20 13                   		beq	.L108
 670:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("PKCS12 unsupported version!");
 1811                             		.loc 2 670 9
 1812 0092 FB 12 A3 01 00 00       		mov.L	#.LC14, r1
 1813 0098 05 00 00 00             		bsr	_WOLFSSL_MSG
 671:../src/wolfcrypt/src/pkcs12.c ****         return ASN_VERSION_E;
 1814                             		.loc 2 671 16
 1815 009c FB 5A 73 FF             		mov.L	#-141, r5
 1816 00a0 38 A4 00                		bra	.L113
 1817                             	.L108:
 672:../src/wolfcrypt/src/pkcs12.c ****     }
 673:../src/wolfcrypt/src/pkcs12.c **** 
 674:../src/wolfcrypt/src/pkcs12.c ****     if ((ret = GetSequence(der, &idx, &size, totalSz)) < 0) {
 1818                             		.loc 2 674 16
 1819 00a3 71 A3 0C                		add	#12, r10, r3
 1820 00a6 71 A5 08                		add	#8, r10, r5
 1821 00a9 ED A4 01                		mov.L	4[r10], r4
 1822 00ac EF 52                   		mov.L	r5, r2
 1823 00ae ED A1 05                		mov.L	20[r10], r1
 1824 00b1 05 00 00 00             		bsr	_GetSequence
 1825 00b5 E3 A1                   		mov.L	r1, [r10]
 1826                             		.loc 2 674 8
 1827 00b7 EC A5                   		mov.L	[r10], r5
 1828 00b9 61 05                   		cmp	#0, r5
 1829 00bb 28 07                   		bge	.L109
 675:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 1830                             		.loc 2 675 16
 1831 00bd EC A5                   		mov.L	[r10], r5
 1832 00bf 38 85 00                		bra	.L113
 1833                             	.L109:
 676:../src/wolfcrypt/src/pkcs12.c ****     }
 677:../src/wolfcrypt/src/pkcs12.c **** 
 678:../src/wolfcrypt/src/pkcs12.c **** #ifdef WOLFSSL_DEBUG_PKCS12
 679:../src/wolfcrypt/src/pkcs12.c ****     printf("\tSEQUENCE: AuthenticatedSafe size = %d\n", size);
 680:../src/wolfcrypt/src/pkcs12.c **** #endif
 681:../src/wolfcrypt/src/pkcs12.c **** 
 682:../src/wolfcrypt/src/pkcs12.c ****     if ((ret = GetSafeContent(pkcs12, der, &idx, size + idx)) < 0) {
 1834                             		.loc 2 682 55
 1835 00c2 ED A5 03                		mov.L	12[r10], r5
 1836 00c5 EF 54                   		mov.L	r5, r4
 1837 00c7 ED A5 02                		mov.L	8[r10], r5
 1838 00ca 4B 45                   		add	r4, r5
 1839                             		.loc 2 682 16
 1840 00cc EF 54                   		mov.L	r5, r4
 1841 00ce 71 A5 08                		add	#8, r10, r5
 1842 00d1 EF 53                   		mov.L	r5, r3
 1843 00d3 ED A2 05                		mov.L	20[r10], r2
 1844 00d6 ED A1 07                		mov.L	28[r10], r1
 1845 00d9 05 00 00 00             		bsr	_GetSafeContent
 1846 00dd E3 A1                   		mov.L	r1, [r10]
 1847                             		.loc 2 682 8
 1848 00df EC A5                   		mov.L	[r10], r5
 1849 00e1 61 05                   		cmp	#0, r5
 1850 00e3 28 10                   		bge	.L110
 683:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("GetSafeContent error");
 1851                             		.loc 2 683 9
 1852 00e5 FB 12 BF 01 00 00       		mov.L	#.LC15, r1
 1853 00eb 05 00 00 00             		bsr	_WOLFSSL_MSG
 684:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 1854                             		.loc 2 684 16
 1855 00ef EC A5                   		mov.L	[r10], r5
 1856 00f1 2E 53                   		bra	.L113
 1857                             	.L110:
 685:../src/wolfcrypt/src/pkcs12.c ****     }
 686:../src/wolfcrypt/src/pkcs12.c **** 
 687:../src/wolfcrypt/src/pkcs12.c ****     /* if more buffer left check for MAC data */
 688:../src/wolfcrypt/src/pkcs12.c ****     if (idx < totalSz) {
 1858                             		.loc 2 688 13
 1859 00f3 ED A5 02                		mov.L	8[r10], r5
 1860                             		.loc 2 688 8
 1861 00f6 ED A4 01                		mov.L	4[r10], r4
 1862 00f9 47 54                   		cmp	r5, r4
 1863 00fb 25 47                   		bleu	.L111
 689:../src/wolfcrypt/src/pkcs12.c ****         if ((ret = GetSequence(der, &idx, &size, totalSz)) < 0) {
 1864                             		.loc 2 689 20
 1865 00fd 71 A3 0C                		add	#12, r10, r3
 1866 0100 71 A5 08                		add	#8, r10, r5
 1867 0103 ED A4 01                		mov.L	4[r10], r4
 1868 0106 EF 52                   		mov.L	r5, r2
 1869 0108 ED A1 05                		mov.L	20[r10], r1
 1870 010b 05 00 00 00             		bsr	_GetSequence
 1871 010f E3 A1                   		mov.L	r1, [r10]
 1872                             		.loc 2 689 12
 1873 0111 EC A5                   		mov.L	[r10], r5
 1874 0113 61 05                   		cmp	#0, r5
 1875 0115 28 0E                   		bge	.L112
 690:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Ignoring unknown data at end of PKCS12 DER buffer");
 1876                             		.loc 2 690 13
 1877 0117 FB 12 D4 01 00 00       		mov.L	#.LC16, r1
 1878 011d 05 00 00 00             		bsr	_WOLFSSL_MSG
 1879 0121 2E 21                   		bra	.L111
 1880                             	.L112:
 691:../src/wolfcrypt/src/pkcs12.c ****         }
 692:../src/wolfcrypt/src/pkcs12.c ****         else {
 693:../src/wolfcrypt/src/pkcs12.c ****         #ifdef WOLFSSL_DEBUG_PKCS12
 694:../src/wolfcrypt/src/pkcs12.c ****             printf("\tSEQUENCE: Signature size = %d\n", size);
 695:../src/wolfcrypt/src/pkcs12.c ****         #endif
 696:../src/wolfcrypt/src/pkcs12.c **** 
 697:../src/wolfcrypt/src/pkcs12.c ****             if ((ret = GetSignData(pkcs12, der, &idx, totalSz)) < 0) {
 1881                             		.loc 2 697 24
 1882 0123 71 A5 08                		add	#8, r10, r5
 1883 0126 ED A4 01                		mov.L	4[r10], r4
 1884 0129 EF 53                   		mov.L	r5, r3
 1885 012b ED A2 05                		mov.L	20[r10], r2
 1886 012e ED A1 07                		mov.L	28[r10], r1
 1887 0131 05 00 00 00             		bsr	_GetSignData
 1888 0135 E3 A1                   		mov.L	r1, [r10]
 1889                             		.loc 2 697 16
 1890 0137 EC A5                   		mov.L	[r10], r5
 1891 0139 61 05                   		cmp	#0, r5
 1892 013b 28 07                   		bge	.L111
 698:../src/wolfcrypt/src/pkcs12.c ****                 return ASN_PARSE_E;
 1893                             		.loc 2 698 24
 1894 013d FB 5A 74 FF             		mov.L	#-140, r5
 1895 0141 0B                      		bra	.L113
 1896                             	.L111:
 699:../src/wolfcrypt/src/pkcs12.c ****             }
 700:../src/wolfcrypt/src/pkcs12.c ****         }
 701:../src/wolfcrypt/src/pkcs12.c ****     }
 702:../src/wolfcrypt/src/pkcs12.c **** 
 703:../src/wolfcrypt/src/pkcs12.c **** #ifdef WOLFSSL_DEBUG_PKCS12
 704:../src/wolfcrypt/src/pkcs12.c ****     printf("END: PKCS12\n");
 705:../src/wolfcrypt/src/pkcs12.c **** #endif
 706:../src/wolfcrypt/src/pkcs12.c **** 
 707:../src/wolfcrypt/src/pkcs12.c ****     return ret;
 1897                             		.loc 2 707 12
 1898 0142 EC A5                   		mov.L	[r10], r5
 1899                             		.balign 8,3,1
 1900                             	.L113:
 708:../src/wolfcrypt/src/pkcs12.c **** }
 1901                             		.loc 2 708 1 discriminator 1
 1902 0144 EF 51                   		mov.L	r5, r1
 1903 0146 3F AA 09                		rtsd	#36, r10-r10
 1904                             	.LFE51:
 1906 0149 FD 70 40 00 00 00 80    		.section C,"a",@progbits
 1907 0206 00 00                   		.p2align 2
 1908                             	.LC17:
 1909 0208 42 75 66 66 65 72 20 70 		.string	"Buffer passed in is too small"
 1909      61 73 73 65 64 20 69 6E 
 1909      20 69 73 20 74 6F 6F 20 
 1909      73 6D 61 6C 6C 00 
 1910                             		.section	.text.wc_i2d_PKCS12,"ax",@progbits
 1911                             		.global	_wc_i2d_PKCS12
 1913                             	_wc_i2d_PKCS12:
 1914                             	.LFB52:
 709:../src/wolfcrypt/src/pkcs12.c **** 
 710:../src/wolfcrypt/src/pkcs12.c **** #ifndef NO_FILESYSTEM
 711:../src/wolfcrypt/src/pkcs12.c **** /* Parse the DER-encoded PKCS #12 object in the provided file. Populate the
 712:../src/wolfcrypt/src/pkcs12.c ****  * WC_PKCS12 object pointed to by the passed in pointer, allocating the object
 713:../src/wolfcrypt/src/pkcs12.c ****  * if necessary.
 714:../src/wolfcrypt/src/pkcs12.c ****  *
 715:../src/wolfcrypt/src/pkcs12.c ****  * file  : path to PKCS #12 file.
 716:../src/wolfcrypt/src/pkcs12.c ****  * pkcs12: pointer to a pointer to a WC_PKCS12 object to populate. If *pkcs12 is
 717:../src/wolfcrypt/src/pkcs12.c ****  *         NULL, this function will allocate a new WC_PKCS12.
 718:../src/wolfcrypt/src/pkcs12.c ****  * return 0 on success and negative on failure.
 719:../src/wolfcrypt/src/pkcs12.c ****  */
 720:../src/wolfcrypt/src/pkcs12.c **** int wc_d2i_PKCS12_fp(const char* file, WC_PKCS12** pkcs12)
 721:../src/wolfcrypt/src/pkcs12.c **** {
 722:../src/wolfcrypt/src/pkcs12.c ****     int ret = 0;
 723:../src/wolfcrypt/src/pkcs12.c ****     byte* buf = NULL;
 724:../src/wolfcrypt/src/pkcs12.c ****     size_t bufSz = 0;
 725:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12* tmpPkcs12 = NULL;
 726:../src/wolfcrypt/src/pkcs12.c ****     int callerAlloc = 1;
 727:../src/wolfcrypt/src/pkcs12.c **** 
 728:../src/wolfcrypt/src/pkcs12.c ****     WOLFSSL_ENTER("wc_d2i_PKCS12_fp");
 729:../src/wolfcrypt/src/pkcs12.c **** 
 730:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12 == NULL) {
 731:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("pkcs12 parameter NULL.");
 732:../src/wolfcrypt/src/pkcs12.c ****         ret = BAD_FUNC_ARG;
 733:../src/wolfcrypt/src/pkcs12.c ****     }
 734:../src/wolfcrypt/src/pkcs12.c **** 
 735:../src/wolfcrypt/src/pkcs12.c ****     if (ret == 0)
 736:../src/wolfcrypt/src/pkcs12.c ****         ret = wc_FileLoad(file, &buf, &bufSz, NULL);
 737:../src/wolfcrypt/src/pkcs12.c **** 
 738:../src/wolfcrypt/src/pkcs12.c ****     if (ret == 0) {
 739:../src/wolfcrypt/src/pkcs12.c ****         if (*pkcs12 == NULL) {
 740:../src/wolfcrypt/src/pkcs12.c ****             tmpPkcs12 = wc_PKCS12_new();
 741:../src/wolfcrypt/src/pkcs12.c ****             if (tmpPkcs12 == NULL) {
 742:../src/wolfcrypt/src/pkcs12.c ****                 WOLFSSL_MSG("Failed to allocate PKCS12 object.");
 743:../src/wolfcrypt/src/pkcs12.c ****                 ret = MEMORY_E;
 744:../src/wolfcrypt/src/pkcs12.c ****             }
 745:../src/wolfcrypt/src/pkcs12.c ****             else {
 746:../src/wolfcrypt/src/pkcs12.c ****                 *pkcs12 = tmpPkcs12;
 747:../src/wolfcrypt/src/pkcs12.c ****                 callerAlloc = 0;
 748:../src/wolfcrypt/src/pkcs12.c ****             }
 749:../src/wolfcrypt/src/pkcs12.c ****         }
 750:../src/wolfcrypt/src/pkcs12.c ****     }
 751:../src/wolfcrypt/src/pkcs12.c ****     if (ret == 0) {
 752:../src/wolfcrypt/src/pkcs12.c ****         ret = wc_d2i_PKCS12(buf, (word32)bufSz, *pkcs12);
 753:../src/wolfcrypt/src/pkcs12.c ****         if (ret != 0) {
 754:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("wc_d2i_PKCS12 failed.");
 755:../src/wolfcrypt/src/pkcs12.c ****         }
 756:../src/wolfcrypt/src/pkcs12.c ****     }
 757:../src/wolfcrypt/src/pkcs12.c **** 
 758:../src/wolfcrypt/src/pkcs12.c ****     if (ret != 0 && callerAlloc == 0 && *pkcs12 != NULL) {
 759:../src/wolfcrypt/src/pkcs12.c ****         wc_PKCS12_free(*pkcs12);
 760:../src/wolfcrypt/src/pkcs12.c ****         *pkcs12 = NULL;
 761:../src/wolfcrypt/src/pkcs12.c ****     }
 762:../src/wolfcrypt/src/pkcs12.c ****     if (buf != NULL) {
 763:../src/wolfcrypt/src/pkcs12.c ****         XFREE(buf, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 764:../src/wolfcrypt/src/pkcs12.c ****     }
 765:../src/wolfcrypt/src/pkcs12.c **** 
 766:../src/wolfcrypt/src/pkcs12.c ****     WOLFSSL_LEAVE("wc_d2i_PKCS12_fp", ret);
 767:../src/wolfcrypt/src/pkcs12.c **** 
 768:../src/wolfcrypt/src/pkcs12.c ****     return ret;
 769:../src/wolfcrypt/src/pkcs12.c **** }
 770:../src/wolfcrypt/src/pkcs12.c **** #endif /* NO_FILESYSTEM */
 771:../src/wolfcrypt/src/pkcs12.c **** 
 772:../src/wolfcrypt/src/pkcs12.c **** /* Convert WC_PKCS12 struct to allocated DER buffer.
 773:../src/wolfcrypt/src/pkcs12.c ****  * pkcs12 : non-null pkcs12 pointer
 774:../src/wolfcrypt/src/pkcs12.c ****  * der    : pointer-pointer to der buffer. If NULL space will be
 775:../src/wolfcrypt/src/pkcs12.c ****  *          allocated for der, which must be freed by application.
 776:../src/wolfcrypt/src/pkcs12.c ****  * derSz  : size of buffer passed in when der is not NULL. NULL arg disables
 777:../src/wolfcrypt/src/pkcs12.c ****  *          sanity checks on buffer read/writes. Max size gets set to derSz when
 778:../src/wolfcrypt/src/pkcs12.c ****  *          the "der" buffer passed in is NULL and LENGTH_ONLY_E is returned.
 779:../src/wolfcrypt/src/pkcs12.c ****  * return size of DER on success and negative on failure.
 780:../src/wolfcrypt/src/pkcs12.c ****  */
 781:../src/wolfcrypt/src/pkcs12.c **** int wc_i2d_PKCS12(WC_PKCS12* pkcs12, byte** der, int* derSz)
 782:../src/wolfcrypt/src/pkcs12.c **** {
 1915                             		.loc 2 782 1
 1916 0000 7E AA                   		push.l	r10
 1917                             	.LCFI25:
 1918 0002 71 0A 80                		add	#-128, r0, r10
 1919                             	.LCFI26:
 1920 0005 EF A0                   		mov.L	r10, r0
 1921 0007 E7 A1 1D                		mov.L	r1, 116[r10]
 1922 000a E7 A2 1E                		mov.L	r2, 120[r10]
 1923 000d E7 A3 1F                		mov.L	r3, 124[r10]
 783:../src/wolfcrypt/src/pkcs12.c ****     int ret = 0;
 1924                             		.loc 2 783 9
 1925 0010 F8 A6 00                		mov.L	#0, [r10]
 784:../src/wolfcrypt/src/pkcs12.c ****     word32 seqSz = 0, verSz = 0, totalSz = 0, idx = 0, sdBufSz = 0;
 1926                             		.loc 2 784 12
 1927 0013 F9 A6 01 00             		mov.L	#0, 4[r10]
 1928                             		.loc 2 784 23
 1929 0017 F9 A6 02 00             		mov.L	#0, 8[r10]
 1930                             		.loc 2 784 34
 1931 001b F9 A6 03 00             		mov.L	#0, 12[r10]
 1932                             		.loc 2 784 47
 1933 001f F9 A6 04 00             		mov.L	#0, 16[r10]
 1934                             		.loc 2 784 56
 1935 0023 F9 A6 05 00             		mov.L	#0, 20[r10]
 785:../src/wolfcrypt/src/pkcs12.c ****     byte *buf = NULL;
 1936                             		.loc 2 785 11
 1937 0027 F9 A6 06 00             		mov.L	#0, 24[r10]
 786:../src/wolfcrypt/src/pkcs12.c ****     byte ver[MAX_VERSION_SZ];
 787:../src/wolfcrypt/src/pkcs12.c ****     byte seq[MAX_SEQ_SZ];
 788:../src/wolfcrypt/src/pkcs12.c ****     byte *sdBuf = NULL;
 1938                             		.loc 2 788 11
 1939 002b F9 A6 07 00             		mov.L	#0, 28[r10]
 789:../src/wolfcrypt/src/pkcs12.c **** 
 790:../src/wolfcrypt/src/pkcs12.c ****     if ((pkcs12 == NULL) || (pkcs12->safe == NULL) ||
 1940                             		.loc 2 790 8
 1941 002f ED A5 1D                		mov.L	116[r10], r5
 1942 0032 61 05                   		cmp	#0, r5
 1943 0034 20 18                   		beq	.L115
 1944                             		.loc 2 790 36 discriminator 1
 1945 0036 ED A5 1D                		mov.L	116[r10], r5
 1946 0039 A8 5D                   		mov.L	4[r5], r5
 1947                             		.loc 2 790 26 discriminator 1
 1948 003b 61 05                   		cmp	#0, r5
 1949 003d 20 0F                   		beq	.L115
 1950                             		.loc 2 790 52 discriminator 2
 1951 003f ED A5 1E                		mov.L	120[r10], r5
 1952 0042 61 05                   		cmp	#0, r5
 1953 0044 21 0F                   		bne	.L116
 791:../src/wolfcrypt/src/pkcs12.c ****             (der == NULL && derSz == NULL)) {
 1954                             		.loc 2 791 26
 1955 0046 ED A5 1F                		mov.L	124[r10], r5
 1956 0049 61 05                   		cmp	#0, r5
 1957 004b 18                      		bne	.L116
 1958                             	.L115:
 792:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 1959                             		.loc 2 792 16
 1960 004c FB 5A 53 FF             		mov.L	#-173, r5
 1961 0050 38 00 05                		bra	.L136
 1962                             	.L116:
 793:../src/wolfcrypt/src/pkcs12.c ****     }
 794:../src/wolfcrypt/src/pkcs12.c **** 
 795:../src/wolfcrypt/src/pkcs12.c ****     /* Create the MAC portion */
 796:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12->signData != NULL) {
 1963                             		.loc 2 796 15
 1964 0053 ED A5 1D                		mov.L	116[r10], r5
 1965 0056 A8 D5                   		mov.L	8[r5], r5
 1966                             		.loc 2 796 8
 1967 0058 61 05                   		cmp	#0, r5
 1968 005a 3A 4D 02                		beq	.L118
 1969                             	.LBB19:
 797:../src/wolfcrypt/src/pkcs12.c ****         MacData *mac = (MacData*)pkcs12->signData;
 1970                             		.loc 2 797 18
 1971 005d ED A5 1D                		mov.L	116[r10], r5
 1972 0060 A8 D5                   		mov.L	8[r5], r5
 1973 0062 E7 A5 08                		mov.L	r5, 32[r10]
 798:../src/wolfcrypt/src/pkcs12.c ****         word32 innerSz = 0;
 1974                             		.loc 2 798 16
 1975 0065 F9 A6 09 00             		mov.L	#0, 36[r10]
 799:../src/wolfcrypt/src/pkcs12.c ****         word32 outerSz = 0;
 1976                             		.loc 2 799 16
 1977 0069 F9 A6 0A 00             		mov.L	#0, 40[r10]
 1978                             	.LBB20:
 800:../src/wolfcrypt/src/pkcs12.c **** 
 801:../src/wolfcrypt/src/pkcs12.c ****         /* get exact size */
 802:../src/wolfcrypt/src/pkcs12.c ****         {
 803:../src/wolfcrypt/src/pkcs12.c ****             byte ASNLENGTH[MAX_LENGTH_SZ];
 804:../src/wolfcrypt/src/pkcs12.c ****             byte ASNSHORT[MAX_SHORT_SZ];
 805:../src/wolfcrypt/src/pkcs12.c ****             byte ASNALGO[MAX_ALGO_SZ];
 806:../src/wolfcrypt/src/pkcs12.c ****             word32 tmpIdx = 0;
 1979                             		.loc 2 806 20
 1980 006d F9 A6 19 00             		mov.L	#0, 100[r10]
 807:../src/wolfcrypt/src/pkcs12.c **** 
 808:../src/wolfcrypt/src/pkcs12.c ****             /* algo id */
 809:../src/wolfcrypt/src/pkcs12.c ****             innerSz += SetAlgoID(mac->oid, ASNALGO, oidHashType, 0);
 1981                             		.loc 2 809 37
 1982 0071 ED A5 08                		mov.L	32[r10], r5
 1983 0074 A8 D5                   		mov.L	8[r5], r5
 1984                             		.loc 2 809 24
 1985 0076 EF 51                   		mov.L	r5, r1
 1986 0078 71 A5 50                		add	#0x50, r10, r5
 1987 007b 66 04                   		mov.L	#0, r4
 1988 007d 66 03                   		mov.L	#0, r3
 1989 007f EF 52                   		mov.L	r5, r2
 1990 0081 05 00 00 00             		bsr	_SetAlgoID
 1991 0085 EF 15                   		mov.L	r1, r5
 1992                             		.loc 2 809 21
 1993 0087 ED A4 09                		mov.L	36[r10], r4
 1994 008a 4B 45                   		add	r4, r5
 1995 008c E7 A5 09                		mov.L	r5, 36[r10]
 810:../src/wolfcrypt/src/pkcs12.c **** 
 811:../src/wolfcrypt/src/pkcs12.c ****             /* Octet string holding digest */
 812:../src/wolfcrypt/src/pkcs12.c ****             innerSz += ASN_TAG_SZ;
 1996                             		.loc 2 812 21
 1997 008f ED A5 09                		mov.L	36[r10], r5
 1998 0092 62 15                   		add	#1, r5
 1999 0094 E7 A5 09                		mov.L	r5, 36[r10]
 813:../src/wolfcrypt/src/pkcs12.c ****             innerSz += SetLength(mac->digestSz, ASNLENGTH);
 2000                             		.loc 2 813 24
 2001 0097 ED A5 08                		mov.L	32[r10], r5
 2002 009a A8 DC                   		mov.L	12[r5], r4
 2003 009c 71 A5 46                		add	#0x46, r10, r5
 2004 009f EF 52                   		mov.L	r5, r2
 2005 00a1 EF 41                   		mov.L	r4, r1
 2006 00a3 05 00 00 00             		bsr	_SetLength
 2007 00a7 EF 15                   		mov.L	r1, r5
 2008                             		.loc 2 813 21
 2009 00a9 ED A4 09                		mov.L	36[r10], r4
 2010 00ac 4B 45                   		add	r4, r5
 2011 00ae E7 A5 09                		mov.L	r5, 36[r10]
 814:../src/wolfcrypt/src/pkcs12.c ****             innerSz += mac->digestSz;
 2012                             		.loc 2 814 27
 2013 00b1 ED A5 08                		mov.L	32[r10], r5
 2014 00b4 A8 DD                   		mov.L	12[r5], r5
 2015                             		.loc 2 814 21
 2016 00b6 ED A4 09                		mov.L	36[r10], r4
 2017 00b9 4B 45                   		add	r4, r5
 2018 00bb E7 A5 09                		mov.L	r5, 36[r10]
 815:../src/wolfcrypt/src/pkcs12.c **** 
 816:../src/wolfcrypt/src/pkcs12.c ****             /* salt */
 817:../src/wolfcrypt/src/pkcs12.c ****             outerSz += ASN_TAG_SZ;
 2019                             		.loc 2 817 21
 2020 00be ED A5 0A                		mov.L	40[r10], r5
 2021 00c1 62 15                   		add	#1, r5
 2022 00c3 E7 A5 0A                		mov.L	r5, 40[r10]
 818:../src/wolfcrypt/src/pkcs12.c ****             outerSz += SetLength(mac->saltSz, ASNLENGTH);
 2023                             		.loc 2 818 24
 2024 00c6 ED A5 08                		mov.L	32[r10], r5
 2025 00c9 A9 54                   		mov.L	16[r5], r4
 2026 00cb 71 A5 46                		add	#0x46, r10, r5
 2027 00ce EF 52                   		mov.L	r5, r2
 2028 00d0 EF 41                   		mov.L	r4, r1
 2029 00d2 05 00 00 00             		bsr	_SetLength
 2030 00d6 EF 15                   		mov.L	r1, r5
 2031                             		.loc 2 818 21
 2032 00d8 ED A4 0A                		mov.L	40[r10], r4
 2033 00db 4B 45                   		add	r4, r5
 2034 00dd E7 A5 0A                		mov.L	r5, 40[r10]
 819:../src/wolfcrypt/src/pkcs12.c ****             outerSz += mac->saltSz;
 2035                             		.loc 2 819 27
 2036 00e0 ED A5 08                		mov.L	32[r10], r5
 2037 00e3 A9 55                   		mov.L	16[r5], r5
 2038                             		.loc 2 819 21
 2039 00e5 ED A4 0A                		mov.L	40[r10], r4
 2040 00e8 4B 45                   		add	r4, r5
 2041 00ea E7 A5 0A                		mov.L	r5, 40[r10]
 820:../src/wolfcrypt/src/pkcs12.c **** 
 821:../src/wolfcrypt/src/pkcs12.c ****             /* MAC iterations */
 822:../src/wolfcrypt/src/pkcs12.c ****             ret = SetShortInt(ASNSHORT, &tmpIdx, mac->itt, MAX_SHORT_SZ);
 2042                             		.loc 2 822 53
 2043 00ed ED A5 08                		mov.L	32[r10], r5
 2044 00f0 A9 5D                   		mov.L	20[r5], r5
 2045                             		.loc 2 822 19
 2046 00f2 EF 53                   		mov.L	r5, r3
 2047 00f4 71 A2 64                		add	#0x64, r10, r2
 2048 00f7 71 A5 4A                		add	#0x4a, r10, r5
 2049 00fa 66 64                   		mov.L	#6, r4
 2050 00fc EF 51                   		mov.L	r5, r1
 2051 00fe 05 00 00 00             		bsr	_SetShortInt
 2052 0102 E3 A1                   		mov.L	r1, [r10]
 823:../src/wolfcrypt/src/pkcs12.c ****             if (ret >= 0) {
 2053                             		.loc 2 823 16
 2054 0104 EC A5                   		mov.L	[r10], r5
 2055 0106 61 05                   		cmp	#0, r5
 2056 0108 29 56                   		blt	.L119
 824:../src/wolfcrypt/src/pkcs12.c ****                 outerSz += ret;
 2057                             		.loc 2 824 25
 2058 010a EC A5                   		mov.L	[r10], r5
 2059 010c ED A4 0A                		mov.L	40[r10], r4
 2060 010f 4B 45                   		add	r4, r5
 2061 0111 E7 A5 0A                		mov.L	r5, 40[r10]
 825:../src/wolfcrypt/src/pkcs12.c ****                 ret = 0;
 2062                             		.loc 2 825 21
 2063 0114 F8 A6 00                		mov.L	#0, [r10]
 826:../src/wolfcrypt/src/pkcs12.c ****             }
 827:../src/wolfcrypt/src/pkcs12.c ****             else {
 828:../src/wolfcrypt/src/pkcs12.c ****                 return ret;
 829:../src/wolfcrypt/src/pkcs12.c ****             }
 830:../src/wolfcrypt/src/pkcs12.c **** 
 831:../src/wolfcrypt/src/pkcs12.c ****             /* sequence of inner data */
 832:../src/wolfcrypt/src/pkcs12.c ****             outerSz += SetSequence(innerSz, seq);
 2064                             		.loc 2 832 24
 2065 0117 71 A5 41                		add	#0x41, r10, r5
 2066 011a EF 52                   		mov.L	r5, r2
 2067 011c ED A1 09                		mov.L	36[r10], r1
 2068 011f 05 00 00 00             		bsr	_SetSequence
 2069 0123 EF 15                   		mov.L	r1, r5
 2070                             		.loc 2 832 21
 2071 0125 ED A4 0A                		mov.L	40[r10], r4
 2072 0128 4B 45                   		add	r4, r5
 2073 012a E7 A5 0A                		mov.L	r5, 40[r10]
 833:../src/wolfcrypt/src/pkcs12.c ****             outerSz += innerSz;
 2074                             		.loc 2 833 21
 2075 012d ED A5 0A                		mov.L	40[r10], r5
 2076 0130 06 89 A5 09             		add	36[r10].L, r5
 2077 0134 E7 A5 0A                		mov.L	r5, 40[r10]
 2078                             	.LBE20:
 834:../src/wolfcrypt/src/pkcs12.c ****         }
 835:../src/wolfcrypt/src/pkcs12.c ****         sdBufSz = outerSz + SetSequence(outerSz, seq);
 2079                             		.loc 2 835 29
 2080 0137 71 A5 41                		add	#0x41, r10, r5
 2081 013a EF 52                   		mov.L	r5, r2
 2082 013c ED A1 0A                		mov.L	40[r10], r1
 2083 013f 05 00 00 00             		bsr	_SetSequence
 2084 0143 EF 15                   		mov.L	r1, r5
 2085                             		.loc 2 835 17
 2086 0145 ED A4 0A                		mov.L	40[r10], r4
 2087 0148 4B 45                   		add	r4, r5
 2088 014a E7 A5 05                		mov.L	r5, 20[r10]
 836:../src/wolfcrypt/src/pkcs12.c ****         sdBuf = (byte*)XMALLOC(sdBufSz, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 2089                             		.loc 2 836 24
 2090 014d ED A1 05                		mov.L	20[r10], r1
 2091 0150 05 00 00 00             		bsr	_wolfSSL_Malloc
 2092 0154 E7 A1 07                		mov.L	r1, 28[r10]
 837:../src/wolfcrypt/src/pkcs12.c ****         if (sdBuf == NULL) {
 2093                             		.loc 2 837 12
 2094 0157 ED A5 07                		mov.L	28[r10], r5
 2095 015a 61 05                   		cmp	#0, r5
 2096 015c 1A                      		bne	.L121
 2097 015d 0E                      		bra	.L137
 2098                             	.L119:
 2099                             	.LBB21:
 828:../src/wolfcrypt/src/pkcs12.c ****             }
 2100                             		.loc 2 828 24
 2101 015e EC A5                   		mov.L	[r10], r5
 2102 0160 38 F0 03                		bra	.L136
 2103                             	.L137:
 2104                             	.LBE21:
 838:../src/wolfcrypt/src/pkcs12.c ****             ret = MEMORY_E;
 2105                             		.loc 2 838 17
 2106 0163 F8 A6 83                		mov.L	#-125, [r10]
 2107                             	.L121:
 839:../src/wolfcrypt/src/pkcs12.c ****         }
 840:../src/wolfcrypt/src/pkcs12.c **** 
 841:../src/wolfcrypt/src/pkcs12.c ****         if (ret == 0) {
 2108                             		.loc 2 841 12
 2109 0166 EC A5                   		mov.L	[r10], r5
 2110 0168 61 05                   		cmp	#0, r5
 2111 016a 21 61                   		bne	.L122
 842:../src/wolfcrypt/src/pkcs12.c ****             idx += SetSequence(outerSz, sdBuf);
 2112                             		.loc 2 842 20
 2113 016c ED A2 07                		mov.L	28[r10], r2
 2114 016f ED A1 0A                		mov.L	40[r10], r1
 2115 0172 05 00 00 00             		bsr	_SetSequence
 2116 0176 EF 15                   		mov.L	r1, r5
 2117                             		.loc 2 842 17
 2118 0178 ED A4 04                		mov.L	16[r10], r4
 2119 017b 4B 45                   		add	r4, r5
 2120 017d E7 A5 04                		mov.L	r5, 16[r10]
 843:../src/wolfcrypt/src/pkcs12.c ****             idx += SetSequence(innerSz, &sdBuf[idx]);
 2121                             		.loc 2 843 20
 2122 0180 ED A5 07                		mov.L	28[r10], r5
 2123 0183 06 89 A5 04             		add	16[r10].L, r5
 2124 0187 EF 52                   		mov.L	r5, r2
 2125 0189 ED A1 09                		mov.L	36[r10], r1
 2126 018c 05 00 00 00             		bsr	_SetSequence
 2127 0190 EF 15                   		mov.L	r1, r5
 2128                             		.loc 2 843 17
 2129 0192 ED A4 04                		mov.L	16[r10], r4
 2130 0195 4B 45                   		add	r4, r5
 2131 0197 E7 A5 04                		mov.L	r5, 16[r10]
 2132                             	.LBB22:
 844:../src/wolfcrypt/src/pkcs12.c **** 
 845:../src/wolfcrypt/src/pkcs12.c ****             /* Set Algorithm Identifier */
 846:../src/wolfcrypt/src/pkcs12.c ****             {
 847:../src/wolfcrypt/src/pkcs12.c ****                 word32 algoIdSz;
 848:../src/wolfcrypt/src/pkcs12.c **** 
 849:../src/wolfcrypt/src/pkcs12.c ****                 algoIdSz = SetAlgoID(mac->oid, &sdBuf[idx], oidHashType, 0);
 2133                             		.loc 2 849 41
 2134 019a ED A5 08                		mov.L	32[r10], r5
 2135 019d A8 D5                   		mov.L	8[r5], r5
 2136                             		.loc 2 849 28
 2137 019f EF 51                   		mov.L	r5, r1
 2138 01a1 ED A5 07                		mov.L	28[r10], r5
 2139 01a4 06 89 A5 04             		add	16[r10].L, r5
 2140 01a8 66 04                   		mov.L	#0, r4
 2141 01aa 66 03                   		mov.L	#0, r3
 2142 01ac EF 52                   		mov.L	r5, r2
 2143 01ae 05 00 00 00             		bsr	_SetAlgoID
 2144 01b2 E7 A1 0B                		mov.L	r1, 44[r10]
 850:../src/wolfcrypt/src/pkcs12.c ****                 if (algoIdSz == 0) {
 2145                             		.loc 2 850 20
 2146 01b5 ED A5 0B                		mov.L	44[r10], r5
 2147 01b8 61 05                   		cmp	#0, r5
 2148 01ba 1F                      		bne	.L123
 851:../src/wolfcrypt/src/pkcs12.c ****                     ret = ALGO_ID_E;
 2149                             		.loc 2 851 25
 2150 01bb F8 AA 7B FF             		mov.L	#-133, [r10]
 2151 01bf 2E 0C                   		bra	.L122
 2152                             	.L123:
 852:../src/wolfcrypt/src/pkcs12.c ****                 }
 853:../src/wolfcrypt/src/pkcs12.c ****                 else {
 854:../src/wolfcrypt/src/pkcs12.c ****                     idx += algoIdSz;
 2153                             		.loc 2 854 25
 2154 01c1 ED A5 04                		mov.L	16[r10], r5
 2155 01c4 06 89 A5 0B             		add	44[r10].L, r5
 2156 01c8 E7 A5 04                		mov.L	r5, 16[r10]
 2157                             	.L122:
 2158                             	.LBE22:
 855:../src/wolfcrypt/src/pkcs12.c ****                 }
 856:../src/wolfcrypt/src/pkcs12.c ****             }
 857:../src/wolfcrypt/src/pkcs12.c ****         }
 858:../src/wolfcrypt/src/pkcs12.c **** 
 859:../src/wolfcrypt/src/pkcs12.c ****         if (ret == 0) {
 2159                             		.loc 2 859 12
 2160 01cb EC A5                   		mov.L	[r10], r5
 2161 01cd 61 05                   		cmp	#0, r5
 2162 01cf 3B D8 00                		bne	.L118
 860:../src/wolfcrypt/src/pkcs12.c **** 
 861:../src/wolfcrypt/src/pkcs12.c **** 
 862:../src/wolfcrypt/src/pkcs12.c ****             /* Octet string holding digest */
 863:../src/wolfcrypt/src/pkcs12.c ****             idx += SetOctetString(mac->digestSz, &sdBuf[idx]);
 2163                             		.loc 2 863 20
 2164 01d2 ED A5 08                		mov.L	32[r10], r5
 2165 01d5 A8 DC                   		mov.L	12[r5], r4
 2166 01d7 ED A5 07                		mov.L	28[r10], r5
 2167 01da 06 89 A5 04             		add	16[r10].L, r5
 2168 01de EF 52                   		mov.L	r5, r2
 2169 01e0 EF 41                   		mov.L	r4, r1
 2170 01e2 05 00 00 00             		bsr	_SetOctetString
 2171 01e6 EF 15                   		mov.L	r1, r5
 2172                             		.loc 2 863 17
 2173 01e8 ED A4 04                		mov.L	16[r10], r4
 2174 01eb 4B 45                   		add	r4, r5
 2175 01ed E7 A5 04                		mov.L	r5, 16[r10]
 864:../src/wolfcrypt/src/pkcs12.c ****             XMEMCPY(&sdBuf[idx], mac->digest, mac->digestSz);
 2176                             		.loc 2 864 13
 2177 01f0 ED A5 07                		mov.L	28[r10], r5
 2178 01f3 EF 54                   		mov.L	r5, r4
 2179 01f5 06 89 A4 04             		add	16[r10].L, r4
 2180 01f9 ED A5 08                		mov.L	32[r10], r5
 2181 01fc EC 52                   		mov.L	[r5], r2
 2182 01fe ED A5 08                		mov.L	32[r10], r5
 2183 0201 A8 DD                   		mov.L	12[r5], r5
 2184 0203 EF 53                   		mov.L	r5, r3
 2185 0205 EF 41                   		mov.L	r4, r1
 2186 0207 05 00 00 00             		bsr	_memcpy
 865:../src/wolfcrypt/src/pkcs12.c ****             idx += mac->digestSz;
 2187                             		.loc 2 865 23
 2188 020b ED A5 08                		mov.L	32[r10], r5
 2189 020e A8 DD                   		mov.L	12[r5], r5
 2190                             		.loc 2 865 17
 2191 0210 ED A4 04                		mov.L	16[r10], r4
 2192 0213 4B 45                   		add	r4, r5
 2193 0215 E7 A5 04                		mov.L	r5, 16[r10]
 866:../src/wolfcrypt/src/pkcs12.c **** 
 867:../src/wolfcrypt/src/pkcs12.c ****             /* Set salt */
 868:../src/wolfcrypt/src/pkcs12.c ****             idx += SetOctetString(mac->saltSz, &sdBuf[idx]);
 2194                             		.loc 2 868 20
 2195 0218 ED A5 08                		mov.L	32[r10], r5
 2196 021b A9 54                   		mov.L	16[r5], r4
 2197 021d ED A5 07                		mov.L	28[r10], r5
 2198 0220 06 89 A5 04             		add	16[r10].L, r5
 2199 0224 EF 52                   		mov.L	r5, r2
 2200 0226 EF 41                   		mov.L	r4, r1
 2201 0228 05 00 00 00             		bsr	_SetOctetString
 2202 022c EF 15                   		mov.L	r1, r5
 2203                             		.loc 2 868 17
 2204 022e ED A4 04                		mov.L	16[r10], r4
 2205 0231 4B 45                   		add	r4, r5
 2206 0233 E7 A5 04                		mov.L	r5, 16[r10]
 869:../src/wolfcrypt/src/pkcs12.c ****             XMEMCPY(&sdBuf[idx], mac->salt, mac->saltSz);
 2207                             		.loc 2 869 13
 2208 0236 ED A5 07                		mov.L	28[r10], r5
 2209 0239 EF 54                   		mov.L	r5, r4
 2210 023b 06 89 A4 04             		add	16[r10].L, r4
 2211 023f ED A5 08                		mov.L	32[r10], r5
 2212 0242 A8 5A                   		mov.L	4[r5], r2
 2213 0244 ED A5 08                		mov.L	32[r10], r5
 2214 0247 A9 55                   		mov.L	16[r5], r5
 2215 0249 EF 53                   		mov.L	r5, r3
 2216 024b EF 41                   		mov.L	r4, r1
 2217 024d 05 00 00 00             		bsr	_memcpy
 870:../src/wolfcrypt/src/pkcs12.c ****             idx += mac->saltSz;
 2218                             		.loc 2 870 23
 2219 0251 ED A5 08                		mov.L	32[r10], r5
 2220 0254 A9 55                   		mov.L	16[r5], r5
 2221                             		.loc 2 870 17
 2222 0256 ED A4 04                		mov.L	16[r10], r4
 2223 0259 4B 45                   		add	r4, r5
 2224 025b E7 A5 04                		mov.L	r5, 16[r10]
 2225                             	.LBB23:
 871:../src/wolfcrypt/src/pkcs12.c **** 
 872:../src/wolfcrypt/src/pkcs12.c ****             /* MAC iterations */
 873:../src/wolfcrypt/src/pkcs12.c ****             {
 874:../src/wolfcrypt/src/pkcs12.c ****                 int tmpSz;
 875:../src/wolfcrypt/src/pkcs12.c ****                 word32 tmpIdx = 0;
 2226                             		.loc 2 875 24
 2227 025e F9 A6 1A 00             		mov.L	#0, 104[r10]
 876:../src/wolfcrypt/src/pkcs12.c ****                 byte ar[MAX_SHORT_SZ];
 877:../src/wolfcrypt/src/pkcs12.c ****                 tmpSz = SetShortInt(ar, &tmpIdx, mac->itt, MAX_SHORT_SZ);
 2228                             		.loc 2 877 53
 2229 0262 ED A5 08                		mov.L	32[r10], r5
 2230 0265 A9 5D                   		mov.L	20[r5], r5
 2231                             		.loc 2 877 25
 2232 0267 EF 53                   		mov.L	r5, r3
 2233 0269 71 A2 68                		add	#0x68, r10, r2
 2234 026c 71 A5 6C                		add	#0x6c, r10, r5
 2235 026f 66 64                   		mov.L	#6, r4
 2236 0271 EF 51                   		mov.L	r5, r1
 2237 0273 05 00 00 00             		bsr	_SetShortInt
 2238 0277 E7 A1 0C                		mov.L	r1, 48[r10]
 878:../src/wolfcrypt/src/pkcs12.c ****                 if (tmpSz < 0) {
 2239                             		.loc 2 878 20
 2240 027a ED A5 0C                		mov.L	48[r10], r5
 2241 027d 61 05                   		cmp	#0, r5
 2242 027f 28 09                   		bge	.L124
 879:../src/wolfcrypt/src/pkcs12.c ****                     ret = tmpSz;
 2243                             		.loc 2 879 25
 2244 0281 ED A5 0C                		mov.L	48[r10], r5
 2245 0284 E3 A5                   		mov.L	r5, [r10]
 2246 0286 2E 17                   		bra	.L125
 2247                             	.L124:
 880:../src/wolfcrypt/src/pkcs12.c ****                 }
 881:../src/wolfcrypt/src/pkcs12.c ****                 else {
 882:../src/wolfcrypt/src/pkcs12.c ****                     XMEMCPY(&sdBuf[idx], ar, tmpSz);
 2248                             		.loc 2 882 21
 2249 0288 ED A5 07                		mov.L	28[r10], r5
 2250 028b 06 89 A5 04             		add	16[r10].L, r5
 2251 028f ED A3 0C                		mov.L	48[r10], r3
 2252 0292 71 A4 6C                		add	#0x6c, r10, r4
 2253 0295 EF 42                   		mov.L	r4, r2
 2254 0297 EF 51                   		mov.L	r5, r1
 2255 0299 05 00 00 00             		bsr	_memcpy
 2256                             	.L125:
 2257                             	.LBE23:
 883:../src/wolfcrypt/src/pkcs12.c ****                 }
 884:../src/wolfcrypt/src/pkcs12.c ****             }
 885:../src/wolfcrypt/src/pkcs12.c ****             totalSz += sdBufSz;
 2258                             		.loc 2 885 21
 2259 029d ED A5 03                		mov.L	12[r10], r5
 2260 02a0 06 89 A5 05             		add	20[r10].L, r5
 2261 02a4 E7 A5 03                		mov.L	r5, 12[r10]
 2262                             	.L118:
 2263                             	.LBE19:
 886:../src/wolfcrypt/src/pkcs12.c ****         }
 887:../src/wolfcrypt/src/pkcs12.c ****     }
 888:../src/wolfcrypt/src/pkcs12.c **** 
 889:../src/wolfcrypt/src/pkcs12.c ****     /* Calculate size of der */
 890:../src/wolfcrypt/src/pkcs12.c ****     if (ret == 0) {
 2264                             		.loc 2 890 8
 2265 02a7 EC A5                   		mov.L	[r10], r5
 2266 02a9 61 05                   		cmp	#0, r5
 2267 02ab 3B E3 00                		bne	.L126
 891:../src/wolfcrypt/src/pkcs12.c ****         totalSz += pkcs12->safe->dataSz;
 2268                             		.loc 2 891 26
 2269 02ae ED A5 1D                		mov.L	116[r10], r5
 2270 02b1 A8 5D                   		mov.L	4[r5], r5
 2271                             		.loc 2 891 32
 2272 02b3 A9 55                   		mov.L	16[r5], r5
 2273                             		.loc 2 891 17
 2274 02b5 ED A4 03                		mov.L	12[r10], r4
 2275 02b8 4B 45                   		add	r4, r5
 2276 02ba E7 A5 03                		mov.L	r5, 12[r10]
 892:../src/wolfcrypt/src/pkcs12.c **** 
 893:../src/wolfcrypt/src/pkcs12.c ****         totalSz += 4; /* Octet string */
 2277                             		.loc 2 893 17
 2278 02bd ED A5 03                		mov.L	12[r10], r5
 2279 02c0 62 45                   		add	#4, r5
 2280 02c2 E7 A5 03                		mov.L	r5, 12[r10]
 894:../src/wolfcrypt/src/pkcs12.c **** 
 895:../src/wolfcrypt/src/pkcs12.c ****         totalSz += 4; /* Element */
 2281                             		.loc 2 895 17
 2282 02c5 ED A5 03                		mov.L	12[r10], r5
 2283 02c8 62 45                   		add	#4, r5
 2284 02ca E7 A5 03                		mov.L	r5, 12[r10]
 896:../src/wolfcrypt/src/pkcs12.c **** 
 897:../src/wolfcrypt/src/pkcs12.c ****         totalSz += 2 + sizeof(WC_PKCS12_DATA_OID);
 2285                             		.loc 2 897 17
 2286 02cd ED A5 03                		mov.L	12[r10], r5
 2287 02d0 62 B5                   		add	#11, r5
 2288 02d2 E7 A5 03                		mov.L	r5, 12[r10]
 898:../src/wolfcrypt/src/pkcs12.c **** 
 899:../src/wolfcrypt/src/pkcs12.c ****         totalSz += 4; /* Seq */
 2289                             		.loc 2 899 17
 2290 02d5 ED A5 03                		mov.L	12[r10], r5
 2291 02d8 62 45                   		add	#4, r5
 2292 02da E7 A5 03                		mov.L	r5, 12[r10]
 900:../src/wolfcrypt/src/pkcs12.c **** 
 901:../src/wolfcrypt/src/pkcs12.c ****         ret = SetMyVersion(WC_PKCS12_VERSION_DEFAULT, ver, FALSE);
 2293                             		.loc 2 901 15
 2294 02dd 71 A5 3C                		add	#60, r10, r5
 2295 02e0 66 03                   		mov.L	#0, r3
 2296 02e2 EF 52                   		mov.L	r5, r2
 2297 02e4 66 31                   		mov.L	#3, r1
 2298 02e6 05 00 00 00             		bsr	_SetMyVersion
 2299 02ea E3 A1                   		mov.L	r1, [r10]
 902:../src/wolfcrypt/src/pkcs12.c ****         if (ret > 0) {
 2300                             		.loc 2 902 12
 2301 02ec EC A5                   		mov.L	[r10], r5
 2302 02ee 61 05                   		cmp	#0, r5
 2303 02f0 2A 05 38 9C 00          		ble	.L126
 903:../src/wolfcrypt/src/pkcs12.c ****             verSz = (word32)ret;
 2304                             		.loc 2 903 19
 2305 02f5 EC A5                   		mov.L	[r10], r5
 2306 02f7 E7 A5 02                		mov.L	r5, 8[r10]
 904:../src/wolfcrypt/src/pkcs12.c ****             ret   = 0; /* value larger than 0 is success */
 2307                             		.loc 2 904 19
 2308 02fa F8 A6 00                		mov.L	#0, [r10]
 905:../src/wolfcrypt/src/pkcs12.c ****             totalSz += verSz;
 2309                             		.loc 2 905 21
 2310 02fd ED A5 03                		mov.L	12[r10], r5
 2311 0300 06 89 A5 02             		add	8[r10].L, r5
 2312 0304 E7 A5 03                		mov.L	r5, 12[r10]
 906:../src/wolfcrypt/src/pkcs12.c **** 
 907:../src/wolfcrypt/src/pkcs12.c ****             seqSz = SetSequence(totalSz, seq);
 2313                             		.loc 2 907 21
 2314 0307 71 A5 41                		add	#0x41, r10, r5
 2315 030a EF 52                   		mov.L	r5, r2
 2316 030c ED A1 03                		mov.L	12[r10], r1
 2317 030f 05 00 00 00             		bsr	_SetSequence
 2318 0313 E7 A1 01                		mov.L	r1, 4[r10]
 908:../src/wolfcrypt/src/pkcs12.c ****             totalSz += seqSz;
 2319                             		.loc 2 908 21
 2320 0316 ED A5 03                		mov.L	12[r10], r5
 2321 0319 06 89 A5 01             		add	4[r10].L, r5
 2322 031d E7 A5 03                		mov.L	r5, 12[r10]
 909:../src/wolfcrypt/src/pkcs12.c **** 
 910:../src/wolfcrypt/src/pkcs12.c ****             /* check if getting length only */
 911:../src/wolfcrypt/src/pkcs12.c ****             if (der == NULL && derSz != NULL) {
 2323                             		.loc 2 911 16
 2324 0320 ED A5 1E                		mov.L	120[r10], r5
 2325 0323 61 05                   		cmp	#0, r5
 2326 0325 21 2B                   		bne	.L127
 2327                             		.loc 2 911 29 discriminator 1
 2328 0327 ED A5 1F                		mov.L	124[r10], r5
 2329 032a 61 05                   		cmp	#0, r5
 2330 032c 20 24                   		beq	.L127
 912:../src/wolfcrypt/src/pkcs12.c ****                 *derSz = totalSz;
 2331                             		.loc 2 912 24
 2332 032e ED A4 03                		mov.L	12[r10], r4
 2333 0331 ED A5 1F                		mov.L	124[r10], r5
 2334 0334 E3 54                   		mov.L	r4, [r5]
 2335                             	.LBB24:
 913:../src/wolfcrypt/src/pkcs12.c ****                 XFREE(sdBuf, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 2336                             		.loc 2 913 17
 2337 0336 ED A5 07                		mov.L	28[r10], r5
 2338 0339 E7 A5 0D                		mov.L	r5, 52[r10]
 2339 033c ED A5 0D                		mov.L	52[r10], r5
 2340 033f 61 05                   		cmp	#0, r5
 2341 0341 10                      		beq	.L128
 2342                             		.loc 2 913 17 is_stmt 0 discriminator 1
 2343 0342 ED A1 0D                		mov.L	52[r10], r1
 2344 0345 05 00 00 00             		bsr	_wolfSSL_Free
 2345                             	.L128:
 2346                             	.LBE24:
 914:../src/wolfcrypt/src/pkcs12.c ****                 return LENGTH_ONLY_E;
 2347                             		.loc 2 914 24 is_stmt 1
 2348 0349 FB 5A 36 FF             		mov.L	#-202, r5
 2349 034d 38 03 02                		bra	.L136
 2350                             	.L127:
 915:../src/wolfcrypt/src/pkcs12.c ****             }
 916:../src/wolfcrypt/src/pkcs12.c **** 
 917:../src/wolfcrypt/src/pkcs12.c ****             if (*der == NULL) {
 2351                             		.loc 2 917 17
 2352 0350 ED A5 1E                		mov.L	120[r10], r5
 2353 0353 EC 55                   		mov.L	[r5], r5
 2354                             		.loc 2 917 16
 2355 0355 61 05                   		cmp	#0, r5
 2356 0357 21 0E                   		bne	.L129
 918:../src/wolfcrypt/src/pkcs12.c ****                 /* Allocate if requested */
 919:../src/wolfcrypt/src/pkcs12.c ****                 buf = (byte*)XMALLOC(totalSz, NULL, DYNAMIC_TYPE_PKCS);
 2357                             		.loc 2 919 30
 2358 0359 ED A1 03                		mov.L	12[r10], r1
 2359 035c 05 00 00 00             		bsr	_wolfSSL_Malloc
 2360 0360 E7 A1 06                		mov.L	r1, 24[r10]
 2361 0363 2E 2B                   		bra	.L126
 2362                             	.L129:
 920:../src/wolfcrypt/src/pkcs12.c ****             }
 921:../src/wolfcrypt/src/pkcs12.c ****             else {
 922:../src/wolfcrypt/src/pkcs12.c ****                 buf = *der;
 2363                             		.loc 2 922 21
 2364 0365 ED A5 1E                		mov.L	120[r10], r5
 2365 0368 EC 55                   		mov.L	[r5], r5
 2366 036a E7 A5 06                		mov.L	r5, 24[r10]
 923:../src/wolfcrypt/src/pkcs12.c **** 
 924:../src/wolfcrypt/src/pkcs12.c ****                 /* sanity check on buffer size if passed in */
 925:../src/wolfcrypt/src/pkcs12.c ****                 if (derSz != NULL) {
 2367                             		.loc 2 925 20
 2368 036d ED A5 1F                		mov.L	124[r10], r5
 2369 0370 61 05                   		cmp	#0, r5
 2370 0372 20 1C                   		beq	.L126
 926:../src/wolfcrypt/src/pkcs12.c ****                     if (*derSz < (int)totalSz) {
 2371                             		.loc 2 926 25
 2372 0374 ED A5 1F                		mov.L	124[r10], r5
 2373 0377 EC 54                   		mov.L	[r5], r4
 2374                             		.loc 2 926 34
 2375 0379 ED A5 03                		mov.L	12[r10], r5
 2376                             		.loc 2 926 24
 2377 037c 47 54                   		cmp	r5, r4
 2378 037e 28 10                   		bge	.L126
 927:../src/wolfcrypt/src/pkcs12.c ****                         WOLFSSL_MSG("Buffer passed in is too small");
 2379                             		.loc 2 927 25
 2380 0380 FB 12 08 02 00 00       		mov.L	#.LC17, r1
 2381 0386 05 00 00 00             		bsr	_WOLFSSL_MSG
 928:../src/wolfcrypt/src/pkcs12.c ****                         ret = BUFFER_E;
 2382                             		.loc 2 928 29
 2383 038a F8 AA 7C FF             		mov.L	#-132, [r10]
 2384                             		.balign 8,3,1
 2385                             	.L126:
 929:../src/wolfcrypt/src/pkcs12.c ****                     }
 930:../src/wolfcrypt/src/pkcs12.c ****                 }
 931:../src/wolfcrypt/src/pkcs12.c ****             }
 932:../src/wolfcrypt/src/pkcs12.c ****         }
 933:../src/wolfcrypt/src/pkcs12.c ****     }
 934:../src/wolfcrypt/src/pkcs12.c **** 
 935:../src/wolfcrypt/src/pkcs12.c ****     if (buf == NULL) {
 2386                             		.loc 2 935 8
 2387 038e ED A5 06                		mov.L	24[r10], r5
 2388 0391 61 05                   		cmp	#0, r5
 2389 0393 1C                      		bne	.L130
 936:../src/wolfcrypt/src/pkcs12.c ****         ret = MEMORY_E;
 2390                             		.loc 2 936 13
 2391 0394 F8 A6 83                		mov.L	#-125, [r10]
 2392                             	.L130:
 937:../src/wolfcrypt/src/pkcs12.c ****     }
 938:../src/wolfcrypt/src/pkcs12.c **** 
 939:../src/wolfcrypt/src/pkcs12.c ****     if (ret == 0) {
 2393                             		.loc 2 939 8
 2394 0397 EC A5                   		mov.L	[r10], r5
 2395 0399 61 05                   		cmp	#0, r5
 2396 039b 3B 9F 01                		bne	.L131
 940:../src/wolfcrypt/src/pkcs12.c ****         idx = 0;
 2397                             		.loc 2 940 13
 2398 039e F9 A6 04 00             		mov.L	#0, 16[r10]
 941:../src/wolfcrypt/src/pkcs12.c **** 
 942:../src/wolfcrypt/src/pkcs12.c ****         /* Copy parts to buf */
 943:../src/wolfcrypt/src/pkcs12.c ****         XMEMCPY(&buf[idx], seq, seqSz);
 2399                             		.loc 2 943 9
 2400 03a2 ED A5 06                		mov.L	24[r10], r5
 2401 03a5 06 89 A5 04             		add	16[r10].L, r5
 2402 03a9 71 A4 41                		add	#0x41, r10, r4
 2403 03ac ED A3 01                		mov.L	4[r10], r3
 2404 03af EF 42                   		mov.L	r4, r2
 2405 03b1 EF 51                   		mov.L	r5, r1
 2406 03b3 05 00 00 00             		bsr	_memcpy
 944:../src/wolfcrypt/src/pkcs12.c ****         idx += seqSz;
 2407                             		.loc 2 944 13
 2408 03b7 ED A5 04                		mov.L	16[r10], r5
 2409 03ba 06 89 A5 01             		add	4[r10].L, r5
 2410 03be E7 A5 04                		mov.L	r5, 16[r10]
 945:../src/wolfcrypt/src/pkcs12.c **** 
 946:../src/wolfcrypt/src/pkcs12.c ****         XMEMCPY(&buf[idx], ver, verSz);
 2411                             		.loc 2 946 9
 2412 03c1 ED A5 06                		mov.L	24[r10], r5
 2413 03c4 06 89 A5 04             		add	16[r10].L, r5
 2414 03c8 71 A4 3C                		add	#60, r10, r4
 2415 03cb ED A3 02                		mov.L	8[r10], r3
 2416 03ce EF 42                   		mov.L	r4, r2
 2417 03d0 EF 51                   		mov.L	r5, r1
 2418 03d2 05 00 00 00             		bsr	_memcpy
 947:../src/wolfcrypt/src/pkcs12.c ****         idx += verSz;
 2419                             		.loc 2 947 13
 2420 03d6 ED A5 04                		mov.L	16[r10], r5
 2421 03d9 06 89 A5 02             		add	8[r10].L, r5
 2422 03dd E7 A5 04                		mov.L	r5, 16[r10]
 948:../src/wolfcrypt/src/pkcs12.c **** 
 949:../src/wolfcrypt/src/pkcs12.c ****         seqSz = SetSequence(totalSz - sdBufSz - idx - 4, seq);
 2423                             		.loc 2 949 37
 2424 03e0 ED A4 03                		mov.L	12[r10], r4
 2425 03e3 ED A5 05                		mov.L	20[r10], r5
 2426 03e6 FF 05 54                		sub	r5, r4, r5
 2427                             		.loc 2 949 47
 2428 03e9 ED A4 04                		mov.L	16[r10], r4
 2429 03ec 43 45                   		sub	r4, r5
 2430                             		.loc 2 949 17
 2431 03ee 60 45                   		sub	#4, r5
 2432 03f0 71 A4 41                		add	#0x41, r10, r4
 2433 03f3 EF 42                   		mov.L	r4, r2
 2434 03f5 EF 51                   		mov.L	r5, r1
 2435 03f7 05 00 00 00             		bsr	_SetSequence
 2436 03fb E7 A1 01                		mov.L	r1, 4[r10]
 950:../src/wolfcrypt/src/pkcs12.c ****         XMEMCPY(&buf[idx], seq, seqSz);
 2437                             		.loc 2 950 9
 2438 03fe ED A5 06                		mov.L	24[r10], r5
 2439 0401 06 89 A5 04             		add	16[r10].L, r5
 2440 0405 71 A4 41                		add	#0x41, r10, r4
 2441 0408 ED A3 01                		mov.L	4[r10], r3
 2442 040b EF 42                   		mov.L	r4, r2
 2443 040d EF 51                   		mov.L	r5, r1
 2444 040f 05 00 00 00             		bsr	_memcpy
 951:../src/wolfcrypt/src/pkcs12.c ****         idx += seqSz;
 2445                             		.loc 2 951 13
 2446 0413 ED A5 04                		mov.L	16[r10], r5
 2447 0416 06 89 A5 01             		add	4[r10].L, r5
 2448 041a E7 A5 04                		mov.L	r5, 16[r10]
 952:../src/wolfcrypt/src/pkcs12.c **** 
 953:../src/wolfcrypt/src/pkcs12.c ****         /* OID */
 954:../src/wolfcrypt/src/pkcs12.c ****         idx += SetObjectId(sizeof(WC_PKCS12_DATA_OID), &buf[idx]);
 2449                             		.loc 2 954 16
 2450 041d ED A5 06                		mov.L	24[r10], r5
 2451 0420 06 89 A5 04             		add	16[r10].L, r5
 2452 0424 EF 52                   		mov.L	r5, r2
 2453 0426 66 91                   		mov.L	#9, r1
 2454 0428 05 00 00 00             		bsr	_SetObjectId
 2455 042c EF 15                   		mov.L	r1, r5
 2456                             		.loc 2 954 13
 2457 042e ED A4 04                		mov.L	16[r10], r4
 2458 0431 4B 45                   		add	r4, r5
 2459 0433 E7 A5 04                		mov.L	r5, 16[r10]
 955:../src/wolfcrypt/src/pkcs12.c ****         XMEMCPY(&buf[idx], WC_PKCS12_DATA_OID, sizeof(WC_PKCS12_DATA_OID));
 2460                             		.loc 2 955 9
 2461 0436 ED A5 06                		mov.L	24[r10], r5
 2462 0439 EF 54                   		mov.L	r5, r4
 2463 043b 06 89 A4 04             		add	16[r10].L, r4
 2464 043f FB 52 00 00 00 00       		mov.L	#_WC_PKCS12_DATA_OID, r5
 2465 0445 EC 53                   		mov.L	[r5], r3
 2466 0447 E3 43                   		mov.L	r3, [r4]
 2467 0449 62 44                   		add	#4, r4
 2468 044b 62 45                   		add	#4, r5
 2469 044d EC 53                   		mov.L	[r5], r3
 2470 044f E3 43                   		mov.L	r3, [r4]
 2471 0451 62 44                   		add	#4, r4
 2472 0453 62 45                   		add	#4, r5
 2473 0455 CC 53                   		mov.B	[r5], r3
 2474 0457 C3 43                   		mov.B	r3, [r4]
 2475 0459 62 14                   		add	#1, r4
 2476 045b 62 15                   		add	#1, r5
 956:../src/wolfcrypt/src/pkcs12.c ****         idx += sizeof(WC_PKCS12_DATA_OID);
 2477                             		.loc 2 956 13
 2478 045d ED A5 04                		mov.L	16[r10], r5
 2479 0460 62 95                   		add	#9, r5
 2480 0462 E7 A5 04                		mov.L	r5, 16[r10]
 957:../src/wolfcrypt/src/pkcs12.c **** 
 958:../src/wolfcrypt/src/pkcs12.c ****         /* Element */
 959:../src/wolfcrypt/src/pkcs12.c ****         buf[idx++] = ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC;
 2481                             		.loc 2 959 16
 2482 0465 ED A5 04                		mov.L	16[r10], r5
 2483 0468 71 54 01                		add	#1, r5, r4
 2484 046b E7 A4 04                		mov.L	r4, 16[r10]
 2485                             		.loc 2 959 12
 2486 046e ED A4 06                		mov.L	24[r10], r4
 2487 0471 4B 45                   		add	r4, r5
 2488                             		.loc 2 959 20
 2489 0473 F8 54 A0                		mov.B	#-96, [r5]
 960:../src/wolfcrypt/src/pkcs12.c ****         idx += SetLength(totalSz - sdBufSz - idx - 3, &buf[idx]);
 2490                             		.loc 2 960 34
 2491 0476 ED A4 03                		mov.L	12[r10], r4
 2492 0479 ED A5 05                		mov.L	20[r10], r5
 2493 047c FF 05 54                		sub	r5, r4, r5
 2494                             		.loc 2 960 44
 2495 047f ED A4 04                		mov.L	16[r10], r4
 2496 0482 43 45                   		sub	r4, r5
 2497                             		.loc 2 960 16
 2498 0484 71 54 FD                		add	#-3, r5, r4
 2499 0487 ED A5 06                		mov.L	24[r10], r5
 2500 048a 06 89 A5 04             		add	16[r10].L, r5
 2501 048e EF 52                   		mov.L	r5, r2
 2502 0490 EF 41                   		mov.L	r4, r1
 2503 0492 05 00 00 00             		bsr	_SetLength
 2504 0496 EF 15                   		mov.L	r1, r5
 2505                             		.loc 2 960 13
 2506 0498 ED A4 04                		mov.L	16[r10], r4
 2507 049b 4B 45                   		add	r4, r5
 2508 049d E7 A5 04                		mov.L	r5, 16[r10]
 961:../src/wolfcrypt/src/pkcs12.c **** 
 962:../src/wolfcrypt/src/pkcs12.c ****         /* Octet string */
 963:../src/wolfcrypt/src/pkcs12.c ****         idx += SetOctetString(totalSz - sdBufSz - idx - 4, &buf[idx]);
 2509                             		.loc 2 963 39
 2510 04a0 ED A4 03                		mov.L	12[r10], r4
 2511 04a3 ED A5 05                		mov.L	20[r10], r5
 2512 04a6 FF 05 54                		sub	r5, r4, r5
 2513                             		.loc 2 963 49
 2514 04a9 ED A4 04                		mov.L	16[r10], r4
 2515 04ac 43 45                   		sub	r4, r5
 2516                             		.loc 2 963 16
 2517 04ae 71 54 FC                		add	#-4, r5, r4
 2518 04b1 ED A5 06                		mov.L	24[r10], r5
 2519 04b4 06 89 A5 04             		add	16[r10].L, r5
 2520 04b8 EF 52                   		mov.L	r5, r2
 2521 04ba EF 41                   		mov.L	r4, r1
 2522 04bc 05 00 00 00             		bsr	_SetOctetString
 2523 04c0 EF 15                   		mov.L	r1, r5
 2524                             		.loc 2 963 13
 2525 04c2 ED A4 04                		mov.L	16[r10], r4
 2526 04c5 4B 45                   		add	r4, r5
 2527 04c7 E7 A5 04                		mov.L	r5, 16[r10]
 964:../src/wolfcrypt/src/pkcs12.c **** 
 965:../src/wolfcrypt/src/pkcs12.c ****         XMEMCPY(&buf[idx], pkcs12->safe->data, pkcs12->safe->dataSz);
 2528                             		.loc 2 965 9
 2529 04ca ED A5 06                		mov.L	24[r10], r5
 2530 04cd EF 54                   		mov.L	r5, r4
 2531 04cf 06 89 A4 04             		add	16[r10].L, r4
 2532 04d3 ED A5 1D                		mov.L	116[r10], r5
 2533 04d6 A8 5D                   		mov.L	4[r5], r5
 2534 04d8 A8 5A                   		mov.L	4[r5], r2
 2535 04da ED A5 1D                		mov.L	116[r10], r5
 2536 04dd A8 5D                   		mov.L	4[r5], r5
 2537 04df A9 55                   		mov.L	16[r5], r5
 2538 04e1 EF 53                   		mov.L	r5, r3
 2539 04e3 EF 41                   		mov.L	r4, r1
 2540 04e5 05 00 00 00             		bsr	_memcpy
 966:../src/wolfcrypt/src/pkcs12.c ****         idx += pkcs12->safe->dataSz;
 2541                             		.loc 2 966 22
 2542 04e9 ED A5 1D                		mov.L	116[r10], r5
 2543 04ec A8 5D                   		mov.L	4[r5], r5
 2544                             		.loc 2 966 28
 2545 04ee A9 55                   		mov.L	16[r5], r5
 2546                             		.loc 2 966 13
 2547 04f0 ED A4 04                		mov.L	16[r10], r4
 2548 04f3 4B 45                   		add	r4, r5
 2549 04f5 E7 A5 04                		mov.L	r5, 16[r10]
 967:../src/wolfcrypt/src/pkcs12.c **** 
 968:../src/wolfcrypt/src/pkcs12.c ****         if (pkcs12->signData != NULL) {
 2550                             		.loc 2 968 19
 2551 04f8 ED A5 1D                		mov.L	116[r10], r5
 2552 04fb A8 D5                   		mov.L	8[r5], r5
 2553                             		.loc 2 968 12
 2554 04fd 61 05                   		cmp	#0, r5
 2555 04ff 20 15                   		beq	.L132
 969:../src/wolfcrypt/src/pkcs12.c ****             XMEMCPY(&buf[idx], sdBuf, sdBufSz);
 2556                             		.loc 2 969 13
 2557 0501 ED A5 06                		mov.L	24[r10], r5
 2558 0504 06 89 A5 04             		add	16[r10].L, r5
 2559 0508 ED A3 05                		mov.L	20[r10], r3
 2560 050b ED A2 07                		mov.L	28[r10], r2
 2561 050e EF 51                   		mov.L	r5, r1
 2562 0510 05 00 00 00             		bsr	_memcpy
 2563                             	.L132:
 970:../src/wolfcrypt/src/pkcs12.c ****         }
 971:../src/wolfcrypt/src/pkcs12.c **** 
 972:../src/wolfcrypt/src/pkcs12.c ****         if (*der == NULL) {
 2564                             		.loc 2 972 13
 2565 0514 ED A5 1E                		mov.L	120[r10], r5
 2566 0517 EC 55                   		mov.L	[r5], r5
 2567                             		.loc 2 972 12
 2568 0519 61 05                   		cmp	#0, r5
 2569 051b 21 0C                   		bne	.L133
 973:../src/wolfcrypt/src/pkcs12.c ****             /* Point to start of data allocated for DER */
 974:../src/wolfcrypt/src/pkcs12.c ****             *der = buf;
 2570                             		.loc 2 974 18
 2571 051d ED A5 1E                		mov.L	120[r10], r5
 2572 0520 ED A4 06                		mov.L	24[r10], r4
 2573 0523 E3 54                   		mov.L	r4, [r5]
 2574 0525 2E 10                   		bra	.L134
 2575                             	.L133:
 975:../src/wolfcrypt/src/pkcs12.c ****         }
 976:../src/wolfcrypt/src/pkcs12.c ****         else {
 977:../src/wolfcrypt/src/pkcs12.c ****             /* Increment pointer to byte past DER */
 978:../src/wolfcrypt/src/pkcs12.c ****             *der = &buf[totalSz];
 2576                             		.loc 2 978 20
 2577 0527 ED A5 06                		mov.L	24[r10], r5
 2578 052a EF 54                   		mov.L	r5, r4
 2579 052c 06 89 A4 03             		add	12[r10].L, r4
 2580                             		.loc 2 978 18
 2581 0530 ED A5 1E                		mov.L	120[r10], r5
 2582 0533 E3 54                   		mov.L	r4, [r5]
 2583                             	.L134:
 979:../src/wolfcrypt/src/pkcs12.c ****         }
 980:../src/wolfcrypt/src/pkcs12.c **** 
 981:../src/wolfcrypt/src/pkcs12.c ****         /* Return size of der */
 982:../src/wolfcrypt/src/pkcs12.c ****         ret = totalSz;
 2584                             		.loc 2 982 13
 2585 0535 ED A5 03                		mov.L	12[r10], r5
 2586 0538 E3 A5                   		mov.L	r5, [r10]
 2587                             	.L131:
 2588                             	.LBB25:
 983:../src/wolfcrypt/src/pkcs12.c ****     }
 984:../src/wolfcrypt/src/pkcs12.c **** 
 985:../src/wolfcrypt/src/pkcs12.c ****     XFREE(sdBuf, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 2589                             		.loc 2 985 5
 2590 053a ED A5 07                		mov.L	28[r10], r5
 2591 053d E7 A5 0E                		mov.L	r5, 56[r10]
 2592 0540 ED A5 0E                		mov.L	56[r10], r5
 2593 0543 61 05                   		cmp	#0, r5
 2594 0545 10                      		beq	.L135
 2595                             		.loc 2 985 5 is_stmt 0 discriminator 1
 2596 0546 ED A1 0E                		mov.L	56[r10], r1
 2597 0549 05 00 00 00             		bsr	_wolfSSL_Free
 2598                             	.L135:
 2599                             	.LBE25:
 986:../src/wolfcrypt/src/pkcs12.c ****     /* Allocation of buf was the last time ret could be a failure,
 987:../src/wolfcrypt/src/pkcs12.c ****      * so no need to free here */
 988:../src/wolfcrypt/src/pkcs12.c **** 
 989:../src/wolfcrypt/src/pkcs12.c ****     return ret;
 2600                             		.loc 2 989 12 is_stmt 1
 2601 054d EC A5                   		mov.L	[r10], r5
 2602 054f 03                      		.balign 8,3,1
 2603                             	.L136:
 990:../src/wolfcrypt/src/pkcs12.c **** }
 2604                             		.loc 2 990 1 discriminator 1
 2605 0550 EF 51                   		mov.L	r5, r1
 2606 0552 3F AA 21                		rtsd	#132, r10-r10
 2607                             	.LFE52:
 2609 0555 FC 13 00                		.section	.text.wc_FreeCertList,"ax",@progbits
 2610                             		.global	_wc_FreeCertList
 2612                             	_wc_FreeCertList:
 2613                             	.LFB53:
 991:../src/wolfcrypt/src/pkcs12.c **** 
 992:../src/wolfcrypt/src/pkcs12.c **** 
 993:../src/wolfcrypt/src/pkcs12.c **** /* helper function to free WC_DerCertList */
 994:../src/wolfcrypt/src/pkcs12.c **** void wc_FreeCertList(WC_DerCertList* list, void* heap)
 995:../src/wolfcrypt/src/pkcs12.c **** {
 2614                             		.loc 2 995 1
 2615 0000 7E AA                   		push.l	r10
 2616                             	.LCFI27:
 2617 0002 71 0A E8                		add	#-24, r0, r10
 2618                             	.LCFI28:
 2619 0005 EF A0                   		mov.L	r10, r0
 2620 0007 E7 A1 04                		mov.L	r1, 16[r10]
 2621 000a E7 A2 05                		mov.L	r2, 20[r10]
 996:../src/wolfcrypt/src/pkcs12.c ****     WC_DerCertList* current = list;
 2622                             		.loc 2 996 21
 2623 000d ED A5 04                		mov.L	16[r10], r5
 2624 0010 E3 A5                   		mov.L	r5, [r10]
 997:../src/wolfcrypt/src/pkcs12.c ****     WC_DerCertList* next;
 998:../src/wolfcrypt/src/pkcs12.c **** 
 999:../src/wolfcrypt/src/pkcs12.c ****     if (list == NULL) {
 2625                             		.loc 2 999 8
 2626 0012 ED A5 04                		mov.L	16[r10], r5
 2627 0015 61 05                   		cmp	#0, r5
 2628 0017 20 46                   		beq	.L145
1000:../src/wolfcrypt/src/pkcs12.c ****         return;
1001:../src/wolfcrypt/src/pkcs12.c ****     }
1002:../src/wolfcrypt/src/pkcs12.c **** 
1003:../src/wolfcrypt/src/pkcs12.c ****     while (current != NULL) {
 2629                             		.loc 2 1003 11
 2630 0019 2E 3C                   		bra	.L141
 2631                             	.L144:
1004:../src/wolfcrypt/src/pkcs12.c ****         next = current->next;
 2632                             		.loc 2 1004 14
 2633 001b EC A5                   		mov.L	[r10], r5
 2634 001d A8 D5                   		mov.L	8[r5], r5
 2635 001f E7 A5 01                		mov.L	r5, 4[r10]
1005:../src/wolfcrypt/src/pkcs12.c ****         if (current->buffer != NULL) {
 2636                             		.loc 2 1005 20
 2637 0022 EC A5                   		mov.L	[r10], r5
 2638 0024 EC 55                   		mov.L	[r5], r5
 2639                             		.loc 2 1005 12
 2640 0026 61 05                   		cmp	#0, r5
 2641 0028 20 16                   		beq	.L142
 2642                             	.LBB26:
1006:../src/wolfcrypt/src/pkcs12.c ****             XFREE(current->buffer, heap, DYNAMIC_TYPE_PKCS);
 2643                             		.loc 2 1006 13
 2644 002a EC A5                   		mov.L	[r10], r5
 2645 002c EC 55                   		mov.L	[r5], r5
 2646 002e E7 A5 02                		mov.L	r5, 8[r10]
 2647 0031 ED A5 02                		mov.L	8[r10], r5
 2648 0034 61 05                   		cmp	#0, r5
 2649 0036 10                      		beq	.L142
 2650                             		.loc 2 1006 13 is_stmt 0 discriminator 1
 2651 0037 ED A1 02                		mov.L	8[r10], r1
 2652 003a 05 00 00 00             		bsr	_wolfSSL_Free
 2653                             	.L142:
 2654                             	.LBE26:
 2655                             	.LBB27:
1007:../src/wolfcrypt/src/pkcs12.c ****         }
1008:../src/wolfcrypt/src/pkcs12.c ****         XFREE(current, heap, DYNAMIC_TYPE_PKCS);
 2656                             		.loc 2 1008 9 is_stmt 1
 2657 003e EC A5                   		mov.L	[r10], r5
 2658 0040 E7 A5 03                		mov.L	r5, 12[r10]
 2659 0043 ED A5 03                		mov.L	12[r10], r5
 2660 0046 61 05                   		cmp	#0, r5
 2661 0048 10                      		beq	.L143
 2662                             		.loc 2 1008 9 is_stmt 0 discriminator 1
 2663 0049 ED A1 03                		mov.L	12[r10], r1
 2664 004c 05 00 00 00             		bsr	_wolfSSL_Free
 2665                             	.L143:
 2666                             	.LBE27:
1009:../src/wolfcrypt/src/pkcs12.c ****         current = next;
 2667                             		.loc 2 1009 17 is_stmt 1
 2668 0050 ED A5 01                		mov.L	4[r10], r5
 2669 0053 E3 A5                   		mov.L	r5, [r10]
 2670                             	.L141:
1003:../src/wolfcrypt/src/pkcs12.c ****         next = current->next;
 2671                             		.loc 2 1003 11
 2672 0055 EC A5                   		mov.L	[r10], r5
 2673 0057 61 05                   		cmp	#0, r5
 2674 0059 21 C2                   		bne	.L144
 2675 005b 2E 03                   		bra	.L138
 2676                             	.L145:
1000:../src/wolfcrypt/src/pkcs12.c ****     }
 2677                             		.loc 2 1000 9
 2678 005d 03                      		nop
 2679                             	.L138:
1010:../src/wolfcrypt/src/pkcs12.c ****     }
1011:../src/wolfcrypt/src/pkcs12.c **** 
1012:../src/wolfcrypt/src/pkcs12.c ****     (void)heap;
1013:../src/wolfcrypt/src/pkcs12.c **** }
 2680                             		.loc 2 1013 1
 2681 005e 3F AA 07                		rtsd	#28, r10-r10
 2682                             	.LFE53:
 2684                             		.section C,"a",@progbits
 2685 0226 00 00                   		.p2align 2
 2686                             	.LC18:
 2687 0228 4B 65 79 20 50 61 69 72 		.string	"Key Pair found"
 2687      20 66 6F 75 6E 64 00 
 2688                             		.section	.text.freeDecCertList,"ax",@progbits
 2690                             	_freeDecCertList:
 2691                             	.LFB54:
1014:../src/wolfcrypt/src/pkcs12.c **** 
1015:../src/wolfcrypt/src/pkcs12.c **** static void freeDecCertList(WC_DerCertList** list, byte** pkey, word32* pkeySz,
1016:../src/wolfcrypt/src/pkcs12.c ****     byte** cert, word32* certSz, void* heap)
1017:../src/wolfcrypt/src/pkcs12.c **** {
 2692                             		.loc 2 1017 1
 2693 0000 7E AA                   		push.l	r10
 2694                             	.LCFI29:
 2695 0002 7E A6                   		push.l	r6
 2696                             	.LCFI30:
 2697 0004 72 0A 54 FC             		add	#-940, r0, r10
 2698                             	.LCFI31:
 2699 0008 EF A0                   		mov.L	r10, r0
 2700 000a FB 6A B8 03             		mov.L	#0x3b8, r6
 2701 000e 4B A6                   		add	r10, r6
 2702 0010 E7 A1 E5                		mov.L	r1, 916[r10]
 2703 0013 E7 A2 E6                		mov.L	r2, 920[r10]
 2704 0016 E7 A3 E7                		mov.L	r3, 924[r10]
 2705 0019 E7 A4 E8                		mov.L	r4, 928[r10]
1018:../src/wolfcrypt/src/pkcs12.c ****     WC_DerCertList* current  = *list;
 2706                             		.loc 2 1018 21
 2707 001c ED A5 E5                		mov.L	916[r10], r5
 2708 001f EC 55                   		mov.L	[r5], r5
 2709 0021 E3 A5                   		mov.L	r5, [r10]
1019:../src/wolfcrypt/src/pkcs12.c ****     WC_DerCertList* previous = NULL;
 2710                             		.loc 2 1019 21
 2711 0023 F9 A6 01 00             		mov.L	#0, 4[r10]
1020:../src/wolfcrypt/src/pkcs12.c ****     DecodedCert DeCert;
1021:../src/wolfcrypt/src/pkcs12.c **** 
1022:../src/wolfcrypt/src/pkcs12.c ****     while (current != NULL) {
 2712                             		.loc 2 1022 11
 2713 0027 38 AD 00                		bra	.L147
 2714                             	.L153:
1023:../src/wolfcrypt/src/pkcs12.c **** 
1024:../src/wolfcrypt/src/pkcs12.c ****         InitDecodedCert(&DeCert, current->buffer, current->bufferSz, heap);
 2715                             		.loc 2 1024 41
 2716 002a EC A5                   		mov.L	[r10], r5
 2717 002c EC 52                   		mov.L	[r5], r2
 2718                             		.loc 2 1024 9
 2719 002e EC A5                   		mov.L	[r10], r5
 2720 0030 A8 5B                   		mov.L	4[r5], r3
 2721 0032 71 A5 0C                		add	#12, r10, r5
 2722 0035 A8 6C                   		mov.L	4[r6], r4
 2723 0037 EF 51                   		mov.L	r5, r1
 2724 0039 05 00 00 00             		bsr	_InitDecodedCert
1025:../src/wolfcrypt/src/pkcs12.c ****         if (ParseCertRelative(&DeCert, CERT_TYPE, NO_VERIFY, NULL) == 0) {
 2725                             		.loc 2 1025 13
 2726 003d 71 A5 0C                		add	#12, r10, r5
 2727 0040 66 04                   		mov.L	#0, r4
 2728 0042 66 03                   		mov.L	#0, r3
 2729 0044 66 02                   		mov.L	#0, r2
 2730 0046 EF 51                   		mov.L	r5, r1
 2731 0048 05 00 00 00             		bsr	_ParseCertRelative
 2732 004c EF 15                   		mov.L	r1, r5
 2733                             		.loc 2 1025 12
 2734 004e 61 05                   		cmp	#0, r5
 2735 0050 21 70                   		bne	.L148
1026:../src/wolfcrypt/src/pkcs12.c ****             if (wc_CheckPrivateKeyCert(*pkey, *pkeySz, &DeCert) == 1) {
 2736                             		.loc 2 1026 17
 2737 0052 ED A5 E6                		mov.L	920[r10], r5
 2738 0055 EC 54                   		mov.L	[r5], r4
 2739 0057 ED A5 E7                		mov.L	924[r10], r5
 2740 005a EC 52                   		mov.L	[r5], r2
 2741 005c 71 A5 0C                		add	#12, r10, r5
 2742 005f EF 53                   		mov.L	r5, r3
 2743 0061 EF 41                   		mov.L	r4, r1
 2744 0063 05 00 00 00             		bsr	_wc_CheckPrivateKeyCert
 2745 0067 EF 15                   		mov.L	r1, r5
 2746                             		.loc 2 1026 16
 2747 0069 61 15                   		cmp	#1, r5
 2748 006b 21 55                   		bne	.L148
1027:../src/wolfcrypt/src/pkcs12.c ****                 WOLFSSL_MSG("Key Pair found");
 2749                             		.loc 2 1027 17
 2750 006d FB 12 28 02 00 00       		mov.L	#.LC18, r1
 2751 0073 05 00 00 00             		bsr	_WOLFSSL_MSG
1028:../src/wolfcrypt/src/pkcs12.c ****                 *cert = current->buffer;
 2752                             		.loc 2 1028 32
 2753 0077 EC A5                   		mov.L	[r10], r5
 2754 0079 EC 54                   		mov.L	[r5], r4
 2755                             		.loc 2 1028 23
 2756 007b ED A5 E8                		mov.L	928[r10], r5
 2757 007e E3 54                   		mov.L	r4, [r5]
1029:../src/wolfcrypt/src/pkcs12.c ****                 *certSz = current->bufferSz;
 2758                             		.loc 2 1029 34
 2759 0080 EC A5                   		mov.L	[r10], r5
 2760 0082 A8 5C                   		mov.L	4[r5], r4
 2761                             		.loc 2 1029 25
 2762 0084 EC 65                   		mov.L	[r6], r5
 2763 0086 E3 54                   		mov.L	r4, [r5]
1030:../src/wolfcrypt/src/pkcs12.c **** 
1031:../src/wolfcrypt/src/pkcs12.c ****                 if (previous == NULL) {
 2764                             		.loc 2 1031 20
 2765 0088 ED A5 01                		mov.L	4[r10], r5
 2766 008b 61 05                   		cmp	#0, r5
 2767 008d 21 0C                   		bne	.L149
1032:../src/wolfcrypt/src/pkcs12.c ****                     *list = current->next;
 2768                             		.loc 2 1032 36
 2769 008f EC A5                   		mov.L	[r10], r5
 2770 0091 A8 D4                   		mov.L	8[r5], r4
 2771                             		.loc 2 1032 27
 2772 0093 ED A5 E5                		mov.L	916[r10], r5
 2773 0096 E3 54                   		mov.L	r4, [r5]
 2774 0098 0A                      		bra	.L150
 2775                             	.L149:
1033:../src/wolfcrypt/src/pkcs12.c ****                 }
1034:../src/wolfcrypt/src/pkcs12.c ****                 else {
1035:../src/wolfcrypt/src/pkcs12.c ****                     previous->next = current->next;
 2776                             		.loc 2 1035 45
 2777 0099 EC A5                   		mov.L	[r10], r5
 2778 009b A8 D4                   		mov.L	8[r5], r4
 2779                             		.loc 2 1035 36
 2780 009d ED A5 01                		mov.L	4[r10], r5
 2781 00a0 A0 D4                   		mov.L	r4, 8[r5]
 2782                             	.L150:
1036:../src/wolfcrypt/src/pkcs12.c ****                 }
1037:../src/wolfcrypt/src/pkcs12.c ****                 FreeDecodedCert(&DeCert);
 2783                             		.loc 2 1037 17
 2784 00a2 71 A5 0C                		add	#12, r10, r5
 2785 00a5 EF 51                   		mov.L	r5, r1
 2786 00a7 05 00 00 00             		bsr	_FreeDecodedCert
 2787                             	.LBB28:
1038:../src/wolfcrypt/src/pkcs12.c ****                 XFREE(current, heap, DYNAMIC_TYPE_PKCS);
 2788                             		.loc 2 1038 17
 2789 00ab EC A5                   		mov.L	[r10], r5
 2790 00ad E7 A5 02                		mov.L	r5, 8[r10]
 2791 00b0 ED A5 02                		mov.L	8[r10], r5
 2792 00b3 61 05                   		cmp	#0, r5
 2793 00b5 20 28                   		beq	.L154
 2794                             		.loc 2 1038 17 is_stmt 0 discriminator 1
 2795 00b7 ED A1 02                		mov.L	8[r10], r1
 2796 00ba 05 00 00 00             		bsr	_wolfSSL_Free
 2797                             	.LBE28:
1039:../src/wolfcrypt/src/pkcs12.c ****                 break;
 2798                             		.loc 2 1039 17 is_stmt 1 discriminator 1
 2799 00be 2E 1F                   		bra	.L154
 2800                             	.L148:
1040:../src/wolfcrypt/src/pkcs12.c ****             }
1041:../src/wolfcrypt/src/pkcs12.c ****         }
1042:../src/wolfcrypt/src/pkcs12.c ****         FreeDecodedCert(&DeCert);
 2801                             		.loc 2 1042 9
 2802 00c0 71 A5 0C                		add	#12, r10, r5
 2803 00c3 EF 51                   		mov.L	r5, r1
 2804 00c5 05 00 00 00             		bsr	_FreeDecodedCert
1043:../src/wolfcrypt/src/pkcs12.c **** 
1044:../src/wolfcrypt/src/pkcs12.c ****         previous = current;
 2805                             		.loc 2 1044 18
 2806 00c9 EC A5                   		mov.L	[r10], r5
 2807 00cb E7 A5 01                		mov.L	r5, 4[r10]
1045:../src/wolfcrypt/src/pkcs12.c ****         current  = current->next;
 2808                             		.loc 2 1045 18
 2809 00ce EC A5                   		mov.L	[r10], r5
 2810 00d0 A8 D5                   		mov.L	8[r5], r5
 2811 00d2 E3 A5                   		mov.L	r5, [r10]
 2812                             	.L147:
1022:../src/wolfcrypt/src/pkcs12.c **** 
 2813                             		.loc 2 1022 11
 2814 00d4 EC A5                   		mov.L	[r10], r5
 2815 00d6 61 05                   		cmp	#0, r5
 2816 00d8 3B 52 FF                		bne	.L153
1046:../src/wolfcrypt/src/pkcs12.c ****     }
1047:../src/wolfcrypt/src/pkcs12.c **** }
 2817                             		.loc 2 1047 1
 2818 00db 2E 03                   		bra	.L152
 2819                             	.L154:
1039:../src/wolfcrypt/src/pkcs12.c ****             }
 2820                             		.loc 2 1039 17
 2821 00dd 03                      		nop
 2822                             	.L152:
 2823                             		.loc 2 1047 1 discriminator 1
 2824 00de 03                      		nop
 2825 00df 72 00 AC 03             		add	#0x3ac, r0
 2826 00e3 7E B6                   		pop	r6
 2827 00e5 7E BA                   		pop	r10
 2828 00e7 02                      		rts
 2829                             	.LFE54:
 2831                             		.section C,"a",@progbits
 2832 0237 00                      		.p2align 2
 2833                             	.LC19:
 2834 0238 77 63 5F 50 4B 43 53 31 		.string	"wc_PKCS12_parse"
 2834      32 5F 70 61 72 73 65 00 
 2835                             	.LC20:
 2836 0248 50 4B 43 53 31 32 20 42 		.string	"PKCS12 Bad MAC on verify"
 2836      61 64 20 4D 41 43 20 6F 
 2836      6E 20 76 65 72 69 66 79 
 2836      00 
 2837                             	.LC21:
 2838 0261 77 63 5F 50 4B 43 53 31 		.string	"wc_PKCS12_parse verify "
 2838      32 5F 70 61 72 73 65 20 
 2838      76 65 72 69 66 79 20 00 
 2839                             	.LC22:
 2840 0279 4E 6F 20 50 4B 43 53 31 		.string	"No PKCS12 safes to parse"
 2840      32 20 73 61 66 65 73 20 
 2840      74 6F 20 70 61 72 73 65 
 2840      00 
 2841                             	.LC23:
 2842 0292 44 65 63 72 79 70 74 69 		.string	"Decrypting PKCS12 Content Info Container"
 2842      6E 67 20 50 4B 43 53 31 
 2842      32 20 43 6F 6E 74 65 6E 
 2842      74 20 49 6E 66 6F 20 43 
 2842      6F 6E 74 61 69 6E 65 72 
 2843                             	.LC24:
 2844 02bb 45 78 70 65 63 74 69 6E 		.string	"Expecting 0 for Integer with Encrypted PKCS12"
 2844      67 20 30 20 66 6F 72 20 
 2844      49 6E 74 65 67 65 72 20 
 2844      77 69 74 68 20 45 6E 63 
 2844      72 79 70 74 65 64 20 50 
 2845                             	.LC25:
 2846 02e9 4E 6F 74 20 50 4B 43 53 		.string	"Not PKCS12 DATA object or get object parse error"
 2846      31 32 20 44 41 54 41 20 
 2846      6F 62 6A 65 63 74 20 6F 
 2846      72 20 67 65 74 20 6F 62 
 2846      6A 65 63 74 20 70 61 72 
 2847                             	.LC26:
 2848 031a 44 65 63 72 79 70 74 69 		.string	"Decryption failed, algorithm not compiled in?"
 2848      6F 6E 20 66 61 69 6C 65 
 2848      64 2C 20 61 6C 67 6F 72 
 2848      69 74 68 6D 20 6E 6F 74 
 2848      20 63 6F 6D 70 69 6C 65 
 2849                             	.LC27:
 2850 0348 50 61 72 73 69 6E 67 20 		.string	"Parsing PKCS12 DATA Content Info Container"
 2850      50 4B 43 53 31 32 20 44 
 2850      41 54 41 20 43 6F 6E 74 
 2850      65 6E 74 20 49 6E 66 6F 
 2850      20 43 6F 6E 74 61 69 6E 
 2851                             	.LC28:
 2852 0373 50 4B 43 53 31 32 20 4B 		.string	"PKCS12 Key Bag found"
 2852      65 79 20 42 61 67 20 66 
 2852      6F 75 6E 64 00 
 2853                             	.LC29:
 2854 0388 50 4B 43 53 31 32 20 53 		.string	"PKCS12 Shrouded Key Bag found"
 2854      68 72 6F 75 64 65 64 20 
 2854      4B 65 79 20 42 61 67 20 
 2854      66 6F 75 6E 64 00 
 2855                             	.LC30:
 2856 03a6 50 4B 43 53 31 32 20 43 		.string	"PKCS12 Cert Bag found"
 2856      65 72 74 20 42 61 67 20 
 2856      66 6F 75 6E 64 00 
 2857                             	.LC31:
 2858 03bc 50 4B 43 53 31 32 20 63 		.string	"PKCS12 cert bag type 1"
 2858      65 72 74 20 62 61 67 20 
 2858      74 79 70 65 20 31 00 
 2859                             	.LC32:
 2860 03d3 55 6E 6B 6E 6F 77 6E 20 		.string	"Unknown PKCS12 cert bag type"
 2860      50 4B 43 53 31 32 20 63 
 2860      65 72 74 20 62 61 67 20 
 2860      74 79 70 65 00 
 2861                             	.LC33:
 2862 03f0 50 75 73 68 69 6E 67 20 		.string	"Pushing new cert onto queue"
 2862      6E 65 77 20 63 65 72 74 
 2862      20 6F 6E 74 6F 20 71 75 
 2862      65 75 65 00 
 2863                             	.LC34:
 2864 040c 50 4B 43 53 31 32 20 43 		.string	"PKCS12 CRL BAG not yet supported"
 2864      52 4C 20 42 41 47 20 6E 
 2864      6F 74 20 79 65 74 20 73 
 2864      75 70 70 6F 72 74 65 64 
 2864      00 
 2865                             	.LC35:
 2866 042d 50 4B 43 53 31 32 20 53 		.string	"PKCS12 Secret BAG not yet supported"
 2866      65 63 72 65 74 20 42 41 
 2866      47 20 6E 6F 74 20 79 65 
 2866      74 20 73 75 70 70 6F 72 
 2866      74 65 64 00 
 2867                             	.LC36:
 2868 0451 50 4B 43 53 31 32 20 53 		.string	"PKCS12 Safe Contents BAG not yet supported"
 2868      61 66 65 20 43 6F 6E 74 
 2868      65 6E 74 73 20 42 41 47 
 2868      20 6E 6F 74 20 79 65 74 
 2868      20 73 75 70 70 6F 72 74 
 2869                             	.LC37:
 2870 047c 55 6E 6B 6E 6F 77 6E 20 		.string	"Unknown PKCS12 BAG type found"
 2870      50 4B 43 53 31 32 20 42 
 2870      41 47 20 74 79 70 65 20 
 2870      66 6F 75 6E 64 00 
 2871                             	.LC38:
 2872 049a 44 6F 6E 65 20 50 61 72 		.string	"Done Parsing PKCS12 Content Info Container"
 2872      73 69 6E 67 20 50 4B 43 
 2872      53 31 32 20 43 6F 6E 74 
 2872      65 6E 74 20 49 6E 66 6F 
 2872      20 43 6F 6E 74 61 69 6E 
 2873                             		.section	.text.wc_PKCS12_parse,"ax",@progbits
 2874                             		.global	_wc_PKCS12_parse
 2876                             	_wc_PKCS12_parse:
 2877                             	.LFB55:
1048:../src/wolfcrypt/src/pkcs12.c **** 
1049:../src/wolfcrypt/src/pkcs12.c **** 
1050:../src/wolfcrypt/src/pkcs12.c **** /* return 0 on success and negative on failure.
1051:../src/wolfcrypt/src/pkcs12.c ****  * By side effect returns private key, cert, and optionally ca.
1052:../src/wolfcrypt/src/pkcs12.c ****  * Parses and decodes the parts of PKCS12
1053:../src/wolfcrypt/src/pkcs12.c ****  *
1054:../src/wolfcrypt/src/pkcs12.c ****  * NOTE: can parse with USER RSA enabled but may return cert that is not the
1055:../src/wolfcrypt/src/pkcs12.c ****  *       pair for the key when using RSA key pairs.
1056:../src/wolfcrypt/src/pkcs12.c ****  *
1057:../src/wolfcrypt/src/pkcs12.c ****  * pkcs12 : non-null WC_PKCS12 struct
1058:../src/wolfcrypt/src/pkcs12.c ****  * psw    : password to use for PKCS12 decode
1059:../src/wolfcrypt/src/pkcs12.c ****  * pkey   : Private key returned
1060:../src/wolfcrypt/src/pkcs12.c ****  * cert   : x509 cert returned
1061:../src/wolfcrypt/src/pkcs12.c ****  * ca     : optional ca returned
1062:../src/wolfcrypt/src/pkcs12.c ****  */
1063:../src/wolfcrypt/src/pkcs12.c **** int wc_PKCS12_parse(WC_PKCS12* pkcs12, const char* psw,
1064:../src/wolfcrypt/src/pkcs12.c ****         byte** pkey, word32* pkeySz, byte** cert, word32* certSz,
1065:../src/wolfcrypt/src/pkcs12.c ****         WC_DerCertList** ca)
1066:../src/wolfcrypt/src/pkcs12.c **** {
 2878                             		.loc 2 1066 1
 2879 0000 7E AA                   		push.l	r10
 2880                             	.LCFI32:
 2881 0002 7E A6                   		push.l	r6
 2882                             	.LCFI33:
 2883 0004 72 0A 78 FF             		add	#-136, r0, r10
 2884                             	.LCFI34:
 2885 0008 71 A0 F8                		add	#-8, r10, r0
 2886                             	.LCFI35:
 2887 000b 75 46 94                		mov.L	#0x94, r6
 2888 000e 4B A6                   		add	r10, r6
 2889 0010 E7 A1 1B                		mov.L	r1, 108[r10]
 2890 0013 E7 A2 1C                		mov.L	r2, 112[r10]
 2891 0016 E7 A3 1D                		mov.L	r3, 116[r10]
 2892 0019 E7 A4 1E                		mov.L	r4, 120[r10]
1067:../src/wolfcrypt/src/pkcs12.c ****     ContentInfo* ci       = NULL;
 2893                             		.loc 2 1067 18
 2894 001c F8 A6 00                		mov.L	#0, [r10]
1068:../src/wolfcrypt/src/pkcs12.c ****     WC_DerCertList* certList = NULL;
 2895                             		.loc 2 1068 21
 2896 001f F9 A6 12 00             		mov.L	#0, 72[r10]
1069:../src/wolfcrypt/src/pkcs12.c ****     WC_DerCertList* tailList = NULL;
 2897                             		.loc 2 1069 21
 2898 0023 F9 A6 01 00             		mov.L	#0, 4[r10]
1070:../src/wolfcrypt/src/pkcs12.c ****     byte* buf             = NULL;
 2899                             		.loc 2 1070 11
 2900 0027 F9 A6 02 00             		mov.L	#0, 8[r10]
1071:../src/wolfcrypt/src/pkcs12.c ****     word32 i, oid;
1072:../src/wolfcrypt/src/pkcs12.c ****     int ret, pswSz;
1073:../src/wolfcrypt/src/pkcs12.c ****     word32 algId;
1074:../src/wolfcrypt/src/pkcs12.c **** 
1075:../src/wolfcrypt/src/pkcs12.c ****     WOLFSSL_ENTER("wc_PKCS12_parse");
 2901                             		.loc 2 1075 5
 2902 002b FB 12 38 02 00 00       		mov.L	#.LC19, r1
 2903 0031 05 00 00 00             		bsr	_WOLFSSL_ENTER
1076:../src/wolfcrypt/src/pkcs12.c **** 
1077:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12 == NULL || psw == NULL || cert == NULL || certSz == NULL ||
 2904                             		.loc 2 1077 8
 2905 0035 ED A5 1B                		mov.L	108[r10], r5
 2906 0038 61 05                   		cmp	#0, r5
 2907 003a 20 21                   		beq	.L156
 2908                             		.loc 2 1077 24 discriminator 1
 2909 003c ED A5 1C                		mov.L	112[r10], r5
 2910 003f 61 05                   		cmp	#0, r5
 2911 0041 20 1A                   		beq	.L156
 2912                             		.loc 2 1077 39 discriminator 2
 2913 0043 EC 65                   		mov.L	[r6], r5
 2914 0045 61 05                   		cmp	#0, r5
 2915 0047 20 14                   		beq	.L156
 2916                             		.loc 2 1077 55 discriminator 3
 2917 0049 A8 6D                   		mov.L	4[r6], r5
 2918 004b 61 05                   		cmp	#0, r5
 2919 004d 20 0E                   		beq	.L156
 2920                             		.loc 2 1077 73 discriminator 4
 2921 004f ED A5 1D                		mov.L	116[r10], r5
 2922 0052 61 05                   		cmp	#0, r5
 2923 0054 17                      		beq	.L156
1078:../src/wolfcrypt/src/pkcs12.c ****         pkey == NULL   || pkeySz == NULL) {
 2924                             		.loc 2 1078 24
 2925 0055 ED A5 1E                		mov.L	120[r10], r5
 2926 0058 61 05                   		cmp	#0, r5
 2927 005a 18                      		bne	.L157
 2928                             		.balign 8,3,2
 2929                             	.L156:
1079:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 2930                             		.loc 2 1079 16
 2931 005b FB 5A 53 FF             		mov.L	#-173, r5
 2932 005f 38 7E 09                		bra	.L249
 2933                             	.L157:
1080:../src/wolfcrypt/src/pkcs12.c ****     }
1081:../src/wolfcrypt/src/pkcs12.c **** 
1082:../src/wolfcrypt/src/pkcs12.c ****     pswSz = (int)XSTRLEN(psw);
 2934                             		.loc 2 1082 18
 2935 0062 ED A1 1C                		mov.L	112[r10], r1
 2936 0065 05 00 00 00             		bsr	_strlen
 2937 0069 EF 15                   		mov.L	r1, r5
 2938                             		.loc 2 1082 11
 2939 006b E7 A5 07                		mov.L	r5, 28[r10]
1083:../src/wolfcrypt/src/pkcs12.c ****     *cert = NULL;
 2940                             		.loc 2 1083 11
 2941 006e EC 65                   		mov.L	[r6], r5
 2942 0070 F8 56 00                		mov.L	#0, [r5]
1084:../src/wolfcrypt/src/pkcs12.c ****     *pkey = NULL;
 2943                             		.loc 2 1084 11
 2944 0073 ED A5 1D                		mov.L	116[r10], r5
 2945 0076 F8 56 00                		mov.L	#0, [r5]
1085:../src/wolfcrypt/src/pkcs12.c ****     if (ca != NULL)
 2946                             		.loc 2 1085 8
 2947 0079 A8 E5                   		mov.L	8[r6], r5
 2948 007b 61 05                   		cmp	#0, r5
 2949 007d 16                      		beq	.L159
1086:../src/wolfcrypt/src/pkcs12.c ****         *ca = NULL;
 2950                             		.loc 2 1086 13
 2951 007e A8 E5                   		mov.L	8[r6], r5
 2952 0080 F8 56 00                		mov.L	#0, [r5]
 2953                             	.L159:
1087:../src/wolfcrypt/src/pkcs12.c **** 
1088:../src/wolfcrypt/src/pkcs12.c ****     /* if there is sign data then verify the MAC */
1089:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12->signData != NULL ) {
 2954                             		.loc 2 1089 15
 2955 0083 ED A5 1B                		mov.L	108[r10], r5
 2956 0086 A8 D5                   		mov.L	8[r5], r5
 2957                             		.loc 2 1089 8
 2958 0088 61 05                   		cmp	#0, r5
 2959 008a 20 49                   		beq	.L160
1090:../src/wolfcrypt/src/pkcs12.c ****         if ((ret = wc_PKCS12_verify(pkcs12, pkcs12->safe->data,
 2960                             		.loc 2 1090 51
 2961 008c ED A5 1B                		mov.L	108[r10], r5
 2962 008f A8 5D                   		mov.L	4[r5], r5
 2963                             		.loc 2 1090 20
 2964 0091 A8 5A                   		mov.L	4[r5], r2
1091:../src/wolfcrypt/src/pkcs12.c ****                                pkcs12->safe->dataSz, (byte*)psw, pswSz)) != 0) {
 2965                             		.loc 2 1091 38
 2966 0093 ED A5 1B                		mov.L	108[r10], r5
 2967 0096 A8 5D                   		mov.L	4[r5], r5
1090:../src/wolfcrypt/src/pkcs12.c ****         if ((ret = wc_PKCS12_verify(pkcs12, pkcs12->safe->data,
 2968                             		.loc 2 1090 20
 2969 0098 A9 55                   		mov.L	16[r5], r5
 2970 009a ED A4 07                		mov.L	28[r10], r4
 2971 009d E3 04                   		mov.L	r4, [r0]
 2972 009f ED A4 1C                		mov.L	112[r10], r4
 2973 00a2 EF 53                   		mov.L	r5, r3
 2974 00a4 ED A1 1B                		mov.L	108[r10], r1
 2975 00a7 05 00 00 00             		bsr	_wc_PKCS12_verify
 2976 00ab E7 A1 04                		mov.L	r1, 16[r10]
1090:../src/wolfcrypt/src/pkcs12.c ****         if ((ret = wc_PKCS12_verify(pkcs12, pkcs12->safe->data,
 2977                             		.loc 2 1090 12
 2978 00ae ED A5 04                		mov.L	16[r10], r5
 2979 00b1 61 05                   		cmp	#0, r5
 2980 00b3 20 20                   		beq	.L160
1092:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("PKCS12 Bad MAC on verify");
 2981                             		.loc 2 1092 13
 2982 00b5 FB 12 48 02 00 00       		mov.L	#.LC20, r1
 2983 00bb 05 00 00 00             		bsr	_WOLFSSL_MSG
1093:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_LEAVE("wc_PKCS12_parse verify ", ret);
 2984                             		.loc 2 1093 13
 2985 00bf ED A2 04                		mov.L	16[r10], r2
 2986 00c2 FB 12 61 02 00 00       		mov.L	#.LC21, r1
 2987 00c8 05 00 00 00             		bsr	_WOLFSSL_LEAVE
1094:../src/wolfcrypt/src/pkcs12.c ****             (void)ret;
1095:../src/wolfcrypt/src/pkcs12.c ****             return MAC_CMP_FAILED_E;
 2988                             		.loc 2 1095 20
 2989 00cc FB 5A 2B FF             		mov.L	#-213, r5
 2990 00d0 38 0D 09                		bra	.L249
 2991                             	.L160:
1096:../src/wolfcrypt/src/pkcs12.c ****         }
1097:../src/wolfcrypt/src/pkcs12.c ****     }
1098:../src/wolfcrypt/src/pkcs12.c **** 
1099:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12->safe == NULL) {
 2992                             		.loc 2 1099 15
 2993 00d3 ED A5 1B                		mov.L	108[r10], r5
 2994 00d6 A8 5D                   		mov.L	4[r5], r5
 2995                             		.loc 2 1099 8
 2996 00d8 61 05                   		cmp	#0, r5
 2997 00da 21 13                   		bne	.L161
1100:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("No PKCS12 safes to parse");
 2998                             		.loc 2 1100 9
 2999 00dc FB 12 79 02 00 00       		mov.L	#.LC22, r1
 3000 00e2 05 00 00 00             		bsr	_WOLFSSL_MSG
1101:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 3001                             		.loc 2 1101 16
 3002 00e6 FB 5A 53 FF             		mov.L	#-173, r5
 3003 00ea 38 F3 08                		bra	.L249
 3004                             	.L161:
1102:../src/wolfcrypt/src/pkcs12.c ****     }
1103:../src/wolfcrypt/src/pkcs12.c **** 
1104:../src/wolfcrypt/src/pkcs12.c ****     /* Decode content infos */
1105:../src/wolfcrypt/src/pkcs12.c ****     ci = pkcs12->safe->CI;
 3005                             		.loc 2 1105 16
 3006 00ed ED A5 1B                		mov.L	108[r10], r5
 3007 00f0 A8 5D                   		mov.L	4[r5], r5
 3008                             		.loc 2 1105 8
 3009 00f2 EC 55                   		mov.L	[r5], r5
 3010 00f4 E3 A5                   		mov.L	r5, [r10]
1106:../src/wolfcrypt/src/pkcs12.c ****     for (i = 0; i < pkcs12->safe->numCI; i++) {
 3011                             		.loc 2 1106 12
 3012 00f6 F9 A6 03 00             		mov.L	#0, 12[r10]
 3013                             		.loc 2 1106 5
 3014 00fa 38 05 08                		bra	.L162
 3015                             	.L240:
 3016                             	.LBB29:
1107:../src/wolfcrypt/src/pkcs12.c ****         byte*  data;
1108:../src/wolfcrypt/src/pkcs12.c ****         word32 idx = 0;
 3017                             		.loc 2 1108 16
 3018 00fd F9 A6 15 00             		mov.L	#0, 84[r10]
1109:../src/wolfcrypt/src/pkcs12.c ****         int    size, totalSz;
1110:../src/wolfcrypt/src/pkcs12.c ****         byte   tag;
1111:../src/wolfcrypt/src/pkcs12.c **** 
1112:../src/wolfcrypt/src/pkcs12.c ****         if (ci->type == WC_PKCS12_ENCRYPTED_DATA) {
 3019                             		.loc 2 1112 15
 3020 0101 EC A5                   		mov.L	[r10], r5
 3021 0103 A9 55                   		mov.L	16[r5], r5
 3022                             		.loc 2 1112 12
 3023 0105 76 05 90 02             		cmp	#0x290, r5
 3024 0109 3B 87 01                		bne	.L163
 3025                             	.LBB30:
1113:../src/wolfcrypt/src/pkcs12.c ****             int number;
1114:../src/wolfcrypt/src/pkcs12.c **** 
1115:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Decrypting PKCS12 Content Info Container");
 3026                             		.loc 2 1115 13
 3027 010c FB 12 92 02 00 00       		mov.L	#.LC23, r1
 3028 0112 05 00 00 00             		bsr	_WOLFSSL_MSG
1116:../src/wolfcrypt/src/pkcs12.c ****             data = ci->data;
 3029                             		.loc 2 1116 18
 3030 0116 EC A5                   		mov.L	[r10], r5
 3031 0118 EC 55                   		mov.L	[r5], r5
 3032 011a E7 A5 05                		mov.L	r5, 20[r10]
1117:../src/wolfcrypt/src/pkcs12.c ****             if (GetASNTag(data, &idx, &tag, ci->dataSz) < 0) {
 3033                             		.loc 2 1117 17
 3034 011d EC A5                   		mov.L	[r10], r5
 3035 011f A8 DC                   		mov.L	12[r5], r4
 3036 0121 71 A3 60                		add	#0x60, r10, r3
 3037 0124 71 A5 54                		add	#0x54, r10, r5
 3038 0127 EF 52                   		mov.L	r5, r2
 3039 0129 ED A1 05                		mov.L	20[r10], r1
 3040 012c 05 00 00 00             		bsr	_GetASNTag
 3041 0130 EF 15                   		mov.L	r1, r5
 3042                             		.loc 2 1117 16
 3043 0132 61 05                   		cmp	#0, r5
 3044 0134 28 0A                   		bge	.L164
1118:../src/wolfcrypt/src/pkcs12.c ****                 ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3045                             		.loc 2 1118 17
 3046 0136 F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3047 013b 38 46 08                		bra	.L239
 3048                             	.L164:
1119:../src/wolfcrypt/src/pkcs12.c ****             }
1120:../src/wolfcrypt/src/pkcs12.c **** 
1121:../src/wolfcrypt/src/pkcs12.c ****             if (tag != (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC)) {
 3049                             		.loc 2 1121 21
 3050 013e CD A5 60                		mov.B	96[r10], r5
 3051                             		.loc 2 1121 16
 3052 0141 5B 55                   		movu.B	r5, r5
 3053 0143 75 55 A0                		cmp	#0xa0, r5
 3054 0146 11                      		beq	.L166
1122:../src/wolfcrypt/src/pkcs12.c ****                 ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3055                             		.loc 2 1122 17
 3056 0147 F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3057 014c 38 35 08                		bra	.L239
 3058                             	.L166:
1123:../src/wolfcrypt/src/pkcs12.c ****             }
1124:../src/wolfcrypt/src/pkcs12.c ****             if ((ret = GetLength(data, &idx, &size, ci->dataSz)) < 0) {
 3059                             		.loc 2 1124 24
 3060 014f EC A5                   		mov.L	[r10], r5
 3061 0151 A8 DC                   		mov.L	12[r5], r4
 3062 0153 71 A3 58                		add	#0x58, r10, r3
 3063 0156 71 A5 54                		add	#0x54, r10, r5
 3064 0159 EF 52                   		mov.L	r5, r2
 3065 015b ED A1 05                		mov.L	20[r10], r1
 3066 015e 05 00 00 00             		bsr	_GetLength
 3067 0162 E7 A1 04                		mov.L	r1, 16[r10]
 3068                             		.loc 2 1124 16
 3069 0165 ED A5 04                		mov.L	16[r10], r5
 3070 0168 61 05                   		cmp	#0, r5
 3071 016a 28 05 38 ED 07          		blt	.L250
1125:../src/wolfcrypt/src/pkcs12.c ****                 goto exit_pk12par;
1126:../src/wolfcrypt/src/pkcs12.c ****             }
1127:../src/wolfcrypt/src/pkcs12.c **** 
1128:../src/wolfcrypt/src/pkcs12.c ****             if ((ret = GetSequence(data, &idx, &size, ci->dataSz)) < 0) {
 3072                             		.loc 2 1128 24
 3073 016f EC A5                   		mov.L	[r10], r5
 3074 0171 A8 DC                   		mov.L	12[r5], r4
 3075 0173 71 A3 58                		add	#0x58, r10, r3
 3076 0176 71 A5 54                		add	#0x54, r10, r5
 3077 0179 EF 52                   		mov.L	r5, r2
 3078 017b ED A1 05                		mov.L	20[r10], r1
 3079 017e 05 00 00 00             		bsr	_GetSequence
 3080 0182 E7 A1 04                		mov.L	r1, 16[r10]
 3081                             		.loc 2 1128 16
 3082 0185 ED A5 04                		mov.L	16[r10], r5
 3083 0188 61 05                   		cmp	#0, r5
 3084 018a 28 05 38 D0 07          		blt	.L251
1129:../src/wolfcrypt/src/pkcs12.c ****                 goto exit_pk12par;
1130:../src/wolfcrypt/src/pkcs12.c ****             }
1131:../src/wolfcrypt/src/pkcs12.c **** 
1132:../src/wolfcrypt/src/pkcs12.c ****             if ((ret = GetShortInt(data, &idx, &number, ci->dataSz)) < 0) {
 3085                             		.loc 2 1132 24
 3086 018f EC A5                   		mov.L	[r10], r5
 3087 0191 A8 DC                   		mov.L	12[r5], r4
 3088 0193 71 A3 64                		add	#0x64, r10, r3
 3089 0196 71 A5 54                		add	#0x54, r10, r5
 3090 0199 EF 52                   		mov.L	r5, r2
 3091 019b ED A1 05                		mov.L	20[r10], r1
 3092 019e 05 00 00 00             		bsr	_GetShortInt
 3093 01a2 E7 A1 04                		mov.L	r1, 16[r10]
 3094                             		.loc 2 1132 16
 3095 01a5 ED A5 04                		mov.L	16[r10], r5
 3096 01a8 61 05                   		cmp	#0, r5
 3097 01aa 28 05 38 B3 07          		blt	.L252
1133:../src/wolfcrypt/src/pkcs12.c ****                 goto exit_pk12par;
1134:../src/wolfcrypt/src/pkcs12.c ****             }
1135:../src/wolfcrypt/src/pkcs12.c **** 
1136:../src/wolfcrypt/src/pkcs12.c ****             if (number != 0) {
 3098                             		.loc 2 1136 24
 3099 01af ED A5 19                		mov.L	100[r10], r5
 3100                             		.loc 2 1136 16
 3101 01b2 61 05                   		cmp	#0, r5
 3102 01b4 20 0C                   		beq	.L170
1137:../src/wolfcrypt/src/pkcs12.c ****                 WOLFSSL_MSG("Expecting 0 for Integer with Encrypted PKCS12");
 3103                             		.loc 2 1137 17
 3104 01b6 FB 12 BB 02 00 00       		mov.L	#.LC24, r1
 3105 01bc 05 00 00 00             		bsr	_WOLFSSL_MSG
 3106                             	.L170:
1138:../src/wolfcrypt/src/pkcs12.c ****             }
1139:../src/wolfcrypt/src/pkcs12.c **** 
1140:../src/wolfcrypt/src/pkcs12.c ****             if ((ret = GetSequence(data, &idx, &size, ci->dataSz)) < 0) {
 3107                             		.loc 2 1140 24
 3108 01c0 EC A5                   		mov.L	[r10], r5
 3109 01c2 A8 DC                   		mov.L	12[r5], r4
 3110 01c4 71 A3 58                		add	#0x58, r10, r3
 3111 01c7 71 A5 54                		add	#0x54, r10, r5
 3112 01ca EF 52                   		mov.L	r5, r2
 3113 01cc ED A1 05                		mov.L	20[r10], r1
 3114 01cf 05 00 00 00             		bsr	_GetSequence
 3115 01d3 E7 A1 04                		mov.L	r1, 16[r10]
 3116                             		.loc 2 1140 16
 3117 01d6 ED A5 04                		mov.L	16[r10], r5
 3118 01d9 61 05                   		cmp	#0, r5
 3119 01db 28 05 38 85 07          		blt	.L253
1141:../src/wolfcrypt/src/pkcs12.c ****                 goto exit_pk12par;
1142:../src/wolfcrypt/src/pkcs12.c ****             }
1143:../src/wolfcrypt/src/pkcs12.c **** 
1144:../src/wolfcrypt/src/pkcs12.c ****             ret = GetObjectId(data, &idx, &oid, oidIgnoreType, ci->dataSz);
 3120                             		.loc 2 1144 19
 3121 01e0 EC A5                   		mov.L	[r10], r5
 3122 01e2 A8 DC                   		mov.L	12[r5], r4
 3123 01e4 71 A3 4C                		add	#0x4c, r10, r3
 3124 01e7 71 A5 54                		add	#0x54, r10, r5
 3125 01ea E3 04                   		mov.L	r4, [r0]
 3126 01ec 75 44 15                		mov.L	#21, r4
 3127 01ef EF 52                   		mov.L	r5, r2
 3128 01f1 ED A1 05                		mov.L	20[r10], r1
 3129 01f4 05 00 00 00             		bsr	_GetObjectId
 3130 01f8 E7 A1 04                		mov.L	r1, 16[r10]
1145:../src/wolfcrypt/src/pkcs12.c ****             if (ret < 0 || oid != WC_PKCS12_DATA) {
 3131                             		.loc 2 1145 16
 3132 01fb ED A5 04                		mov.L	16[r10], r5
 3133 01fe 61 05                   		cmp	#0, r5
 3134 0200 29 0B                   		blt	.L172
 3135                             		.loc 2 1145 32 discriminator 1
 3136 0202 ED A5 13                		mov.L	76[r10], r5
 3137                             		.loc 2 1145 25 discriminator 1
 3138 0205 76 05 8B 02             		cmp	#0x28b, r5
 3139 0209 20 14                   		beq	.L173
 3140                             	.L172:
1146:../src/wolfcrypt/src/pkcs12.c ****                 WOLFSSL_MSG("Not PKCS12 DATA object or get object parse error");
 3141                             		.loc 2 1146 17
 3142 020b FB 12 E9 02 00 00       		mov.L	#.LC25, r1
 3143 0211 05 00 00 00             		bsr	_WOLFSSL_MSG
1147:../src/wolfcrypt/src/pkcs12.c ****                 ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3144                             		.loc 2 1147 17
 3145 0215 F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3146 021a 38 67 07                		bra	.L239
 3147                             	.L173:
1148:../src/wolfcrypt/src/pkcs12.c ****             }
1149:../src/wolfcrypt/src/pkcs12.c **** 
1150:../src/wolfcrypt/src/pkcs12.c ****             /* decrypted content overwrites input buffer */
1151:../src/wolfcrypt/src/pkcs12.c ****             size = ci->dataSz - idx;
 3148                             		.loc 2 1151 22
 3149 021d EC A5                   		mov.L	[r10], r5
 3150 021f A8 DC                   		mov.L	12[r5], r4
 3151                             		.loc 2 1151 31
 3152 0221 ED A5 15                		mov.L	84[r10], r5
 3153 0224 FF 05 54                		sub	r5, r4, r5
 3154                             		.loc 2 1151 18
 3155 0227 E7 A5 16                		mov.L	r5, 88[r10]
1152:../src/wolfcrypt/src/pkcs12.c ****             buf = (byte*)XMALLOC(size, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 3156                             		.loc 2 1152 26
 3157 022a ED A5 16                		mov.L	88[r10], r5
 3158 022d EF 51                   		mov.L	r5, r1
 3159 022f 05 00 00 00             		bsr	_wolfSSL_Malloc
 3160 0233 E7 A1 02                		mov.L	r1, 8[r10]
1153:../src/wolfcrypt/src/pkcs12.c ****             if (buf == NULL) {
 3161                             		.loc 2 1153 16
 3162 0236 ED A5 02                		mov.L	8[r10], r5
 3163 0239 61 05                   		cmp	#0, r5
 3164 023b 18                      		bne	.L174
1154:../src/wolfcrypt/src/pkcs12.c ****                 ERROR_OUT(MEMORY_E, exit_pk12par);
 3165                             		.loc 2 1154 17
 3166 023c F9 A6 04 83             		mov.L	#-125, 16[r10]
 3167 0240 38 41 07                		bra	.L239
 3168                             	.L174:
1155:../src/wolfcrypt/src/pkcs12.c ****             }
1156:../src/wolfcrypt/src/pkcs12.c ****             XMEMCPY(buf, data + idx, size);
 3169                             		.loc 2 1156 13
 3170 0243 ED A5 15                		mov.L	84[r10], r5
 3171 0246 ED A4 05                		mov.L	20[r10], r4
 3172 0249 4B 45                   		add	r4, r5
 3173 024b ED A4 16                		mov.L	88[r10], r4
 3174 024e EF 43                   		mov.L	r4, r3
 3175 0250 EF 52                   		mov.L	r5, r2
 3176 0252 ED A1 02                		mov.L	8[r10], r1
 3177 0255 05 00 00 00             		bsr	_memcpy
1157:../src/wolfcrypt/src/pkcs12.c **** 
1158:../src/wolfcrypt/src/pkcs12.c ****             if ((ret = DecryptContent(buf, size, psw, pswSz)) < 0) {
 3178                             		.loc 2 1158 24
 3179 0259 ED A5 16                		mov.L	88[r10], r5
 3180 025c ED A4 07                		mov.L	28[r10], r4
 3181 025f ED A3 1C                		mov.L	112[r10], r3
 3182 0262 EF 52                   		mov.L	r5, r2
 3183 0264 ED A1 02                		mov.L	8[r10], r1
 3184 0267 05 00 00 00             		bsr	_DecryptContent
 3185 026b E7 A1 04                		mov.L	r1, 16[r10]
 3186                             		.loc 2 1158 16
 3187 026e ED A5 04                		mov.L	16[r10], r5
 3188 0271 61 05                   		cmp	#0, r5
 3189 0273 28 10                   		bge	.L175
1159:../src/wolfcrypt/src/pkcs12.c ****                 WOLFSSL_MSG("Decryption failed, algorithm not compiled in?");
 3190                             		.loc 2 1159 17
 3191 0275 FB 12 1A 03 00 00       		mov.L	#.LC26, r1
 3192 027b 05 00 00 00             		bsr	_WOLFSSL_MSG
1160:../src/wolfcrypt/src/pkcs12.c ****                 goto exit_pk12par;
 3193                             		.loc 2 1160 17
 3194 027f 03                      		nop
 3195 0280 38 01 07                		bra	.L239
 3196                             	.L175:
1161:../src/wolfcrypt/src/pkcs12.c ****             }
1162:../src/wolfcrypt/src/pkcs12.c **** 
1163:../src/wolfcrypt/src/pkcs12.c ****             data = buf;
 3197                             		.loc 2 1163 18
 3198 0283 ED A5 02                		mov.L	8[r10], r5
 3199 0286 E7 A5 05                		mov.L	r5, 20[r10]
1164:../src/wolfcrypt/src/pkcs12.c ****             idx = 0;
 3200                             		.loc 2 1164 17
 3201 0289 F9 A6 15 00             		mov.L	#0, 84[r10]
 3202                             	.LBE30:
 3203 028d 38 B8 00                		bra	.L176
 3204                             	.L163:
1165:../src/wolfcrypt/src/pkcs12.c **** 
1166:../src/wolfcrypt/src/pkcs12.c ****         #ifdef WOLFSSL_DEBUG_PKCS12
1167:../src/wolfcrypt/src/pkcs12.c ****             {
1168:../src/wolfcrypt/src/pkcs12.c ****                 byte* p;
1169:../src/wolfcrypt/src/pkcs12.c ****                 for (printf("\tData = "), p = (byte*)buf;
1170:../src/wolfcrypt/src/pkcs12.c ****                     p < (byte*)buf + size;
1171:../src/wolfcrypt/src/pkcs12.c ****                     printf("%02X", *p), p++);
1172:../src/wolfcrypt/src/pkcs12.c ****                 printf("\n");
1173:../src/wolfcrypt/src/pkcs12.c ****             }
1174:../src/wolfcrypt/src/pkcs12.c ****         #endif
1175:../src/wolfcrypt/src/pkcs12.c ****         }
1176:../src/wolfcrypt/src/pkcs12.c ****         else { /* type DATA */
1177:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Parsing PKCS12 DATA Content Info Container");
 3205                             		.loc 2 1177 13
 3206 0290 FB 12 48 03 00 00       		mov.L	#.LC27, r1
 3207 0296 05 00 00 00             		bsr	_WOLFSSL_MSG
1178:../src/wolfcrypt/src/pkcs12.c ****             data = ci->data;
 3208                             		.loc 2 1178 18
 3209 029a EC A5                   		mov.L	[r10], r5
 3210 029c EC 55                   		mov.L	[r5], r5
 3211 029e E7 A5 05                		mov.L	r5, 20[r10]
1179:../src/wolfcrypt/src/pkcs12.c ****             if (GetASNTag(data, &idx, &tag, ci->dataSz) < 0) {
 3212                             		.loc 2 1179 17
 3213 02a1 EC A5                   		mov.L	[r10], r5
 3214 02a3 A8 DC                   		mov.L	12[r5], r4
 3215 02a5 71 A3 60                		add	#0x60, r10, r3
 3216 02a8 71 A5 54                		add	#0x54, r10, r5
 3217 02ab EF 52                   		mov.L	r5, r2
 3218 02ad ED A1 05                		mov.L	20[r10], r1
 3219 02b0 05 00 00 00             		bsr	_GetASNTag
 3220 02b4 EF 15                   		mov.L	r1, r5
 3221                             		.loc 2 1179 16
 3222 02b6 61 05                   		cmp	#0, r5
 3223 02b8 28 0A                   		bge	.L178
1180:../src/wolfcrypt/src/pkcs12.c ****                 ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3224                             		.loc 2 1180 17
 3225 02ba F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3226 02bf 38 C2 06                		bra	.L239
 3227                             	.L178:
1181:../src/wolfcrypt/src/pkcs12.c ****             }
1182:../src/wolfcrypt/src/pkcs12.c **** 
1183:../src/wolfcrypt/src/pkcs12.c ****             if (tag != (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC)) {
 3228                             		.loc 2 1183 21
 3229 02c2 CD A5 60                		mov.B	96[r10], r5
 3230                             		.loc 2 1183 16
 3231 02c5 5B 55                   		movu.B	r5, r5
 3232 02c7 75 55 A0                		cmp	#0xa0, r5
 3233 02ca 11                      		beq	.L179
1184:../src/wolfcrypt/src/pkcs12.c ****                 ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3234                             		.loc 2 1184 17
 3235 02cb F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3236 02d0 38 B1 06                		bra	.L239
 3237                             	.L179:
1185:../src/wolfcrypt/src/pkcs12.c ****             }
1186:../src/wolfcrypt/src/pkcs12.c ****             if (GetLength(data, &idx, &size, ci->dataSz) <= 0) {
 3238                             		.loc 2 1186 17
 3239 02d3 EC A5                   		mov.L	[r10], r5
 3240 02d5 A8 DC                   		mov.L	12[r5], r4
 3241 02d7 71 A3 58                		add	#0x58, r10, r3
 3242 02da 71 A5 54                		add	#0x54, r10, r5
 3243 02dd EF 52                   		mov.L	r5, r2
 3244 02df ED A1 05                		mov.L	20[r10], r1
 3245 02e2 05 00 00 00             		bsr	_GetLength
 3246 02e6 EF 15                   		mov.L	r1, r5
 3247                             		.loc 2 1186 16
 3248 02e8 61 05                   		cmp	#0, r5
 3249 02ea 2A 0A                   		bgt	.L180
1187:../src/wolfcrypt/src/pkcs12.c ****                 ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3250                             		.loc 2 1187 17
 3251 02ec F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3252 02f1 38 90 06                		bra	.L239
 3253                             	.L180:
1188:../src/wolfcrypt/src/pkcs12.c ****             }
1189:../src/wolfcrypt/src/pkcs12.c **** 
1190:../src/wolfcrypt/src/pkcs12.c ****             if (GetASNTag(data, &idx, &tag, ci->dataSz) < 0) {
 3254                             		.loc 2 1190 17
 3255 02f4 EC A5                   		mov.L	[r10], r5
 3256 02f6 A8 DC                   		mov.L	12[r5], r4
 3257 02f8 71 A3 60                		add	#0x60, r10, r3
 3258 02fb 71 A5 54                		add	#0x54, r10, r5
 3259 02fe EF 52                   		mov.L	r5, r2
 3260 0300 ED A1 05                		mov.L	20[r10], r1
 3261 0303 05 00 00 00             		bsr	_GetASNTag
 3262 0307 EF 15                   		mov.L	r1, r5
 3263                             		.loc 2 1190 16
 3264 0309 61 05                   		cmp	#0, r5
 3265 030b 28 0A                   		bge	.L181
1191:../src/wolfcrypt/src/pkcs12.c ****                 ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3266                             		.loc 2 1191 17
 3267 030d F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3268 0312 38 6F 06                		bra	.L239
 3269                             	.L181:
1192:../src/wolfcrypt/src/pkcs12.c ****             }
1193:../src/wolfcrypt/src/pkcs12.c ****             if (tag != ASN_OCTET_STRING) {
 3270                             		.loc 2 1193 21
 3271 0315 CD A5 60                		mov.B	96[r10], r5
 3272                             		.loc 2 1193 16
 3273 0318 5B 55                   		movu.B	r5, r5
 3274 031a 61 45                   		cmp	#4, r5
 3275 031c 11                      		beq	.L182
1194:../src/wolfcrypt/src/pkcs12.c ****                 ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3276                             		.loc 2 1194 17
 3277 031d F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3278 0322 38 5F 06                		bra	.L239
 3279                             	.L182:
1195:../src/wolfcrypt/src/pkcs12.c ****             }
1196:../src/wolfcrypt/src/pkcs12.c ****             if ((ret = GetLength(data, &idx, &size, ci->dataSz)) < 0) {
 3280                             		.loc 2 1196 24
 3281 0325 EC A5                   		mov.L	[r10], r5
 3282 0327 A8 DC                   		mov.L	12[r5], r4
 3283 0329 71 A3 58                		add	#0x58, r10, r3
 3284 032c 71 A5 54                		add	#0x54, r10, r5
 3285 032f EF 52                   		mov.L	r5, r2
 3286 0331 ED A1 05                		mov.L	20[r10], r1
 3287 0334 05 00 00 00             		bsr	_GetLength
 3288 0338 E7 A1 04                		mov.L	r1, 16[r10]
 3289                             		.loc 2 1196 16
 3290 033b ED A5 04                		mov.L	16[r10], r5
 3291 033e 61 05                   		cmp	#0, r5
 3292 0340 28 05 38 23 06          		blt	.L254
 3293                             	.L176:
1197:../src/wolfcrypt/src/pkcs12.c ****                 goto exit_pk12par;
1198:../src/wolfcrypt/src/pkcs12.c ****             }
1199:../src/wolfcrypt/src/pkcs12.c **** 
1200:../src/wolfcrypt/src/pkcs12.c ****         }
1201:../src/wolfcrypt/src/pkcs12.c **** 
1202:../src/wolfcrypt/src/pkcs12.c ****         /* parse through bags in ContentInfo */
1203:../src/wolfcrypt/src/pkcs12.c ****         if ((ret = GetSequence(data, &idx, &totalSz, ci->dataSz)) < 0) {
 3294                             		.loc 2 1203 20
 3295 0345 EC A5                   		mov.L	[r10], r5
 3296 0347 A8 DC                   		mov.L	12[r5], r4
 3297 0349 71 A3 5C                		add	#0x5c, r10, r3
 3298 034c 71 A5 54                		add	#0x54, r10, r5
 3299 034f EF 52                   		mov.L	r5, r2
 3300 0351 ED A1 05                		mov.L	20[r10], r1
 3301 0354 05 00 00 00             		bsr	_GetSequence
 3302 0358 E7 A1 04                		mov.L	r1, 16[r10]
 3303                             		.loc 2 1203 12
 3304 035b ED A5 04                		mov.L	16[r10], r5
 3305 035e 61 05                   		cmp	#0, r5
 3306 0360 28 05 38 06 06          		blt	.L255
1204:../src/wolfcrypt/src/pkcs12.c ****             goto exit_pk12par;
1205:../src/wolfcrypt/src/pkcs12.c ****         }
1206:../src/wolfcrypt/src/pkcs12.c ****         totalSz += idx;
 3307                             		.loc 2 1206 17
 3308 0365 ED A5 17                		mov.L	92[r10], r5
 3309 0368 EF 54                   		mov.L	r5, r4
 3310 036a ED A5 15                		mov.L	84[r10], r5
 3311 036d 4B 45                   		add	r4, r5
 3312 036f E7 A5 17                		mov.L	r5, 92[r10]
1207:../src/wolfcrypt/src/pkcs12.c **** 
1208:../src/wolfcrypt/src/pkcs12.c ****         while ((int)idx < totalSz) {
 3313                             		.loc 2 1208 15
 3314 0372 38 48 05                		bra	.L184
 3315                             	.L236:
 3316                             	.LBB31:
1209:../src/wolfcrypt/src/pkcs12.c ****             int bagSz;
1210:../src/wolfcrypt/src/pkcs12.c ****             if ((ret = GetSequence(data, &idx, &bagSz, ci->dataSz)) < 0) {
 3317                             		.loc 2 1210 24
 3318 0375 EC A5                   		mov.L	[r10], r5
 3319 0377 A8 DC                   		mov.L	12[r5], r4
 3320 0379 71 A3 68                		add	#0x68, r10, r3
 3321 037c 71 A5 54                		add	#0x54, r10, r5
 3322 037f EF 52                   		mov.L	r5, r2
 3323 0381 ED A1 05                		mov.L	20[r10], r1
 3324 0384 05 00 00 00             		bsr	_GetSequence
 3325 0388 E7 A1 04                		mov.L	r1, 16[r10]
 3326                             		.loc 2 1210 16
 3327 038b ED A5 04                		mov.L	16[r10], r5
 3328 038e 61 05                   		cmp	#0, r5
 3329 0390 28 05 38 D9 05          		blt	.L256
1211:../src/wolfcrypt/src/pkcs12.c ****                 goto exit_pk12par;
1212:../src/wolfcrypt/src/pkcs12.c ****             }
1213:../src/wolfcrypt/src/pkcs12.c ****             bagSz += idx;
 3330                             		.loc 2 1213 19
 3331 0395 ED A5 1A                		mov.L	104[r10], r5
 3332 0398 EF 54                   		mov.L	r5, r4
 3333 039a ED A5 15                		mov.L	84[r10], r5
 3334 039d 4B 45                   		add	r4, r5
 3335 039f E7 A5 1A                		mov.L	r5, 104[r10]
1214:../src/wolfcrypt/src/pkcs12.c **** 
1215:../src/wolfcrypt/src/pkcs12.c ****             if ((ret = GetObjectId(data, &idx, &oid, oidIgnoreType,
 3336                             		.loc 2 1215 24
 3337 03a2 EC A5                   		mov.L	[r10], r5
 3338 03a4 A8 DC                   		mov.L	12[r5], r4
 3339 03a6 71 A3 4C                		add	#0x4c, r10, r3
 3340 03a9 71 A5 54                		add	#0x54, r10, r5
 3341 03ac E3 04                   		mov.L	r4, [r0]
 3342 03ae 75 44 15                		mov.L	#21, r4
 3343 03b1 EF 52                   		mov.L	r5, r2
 3344 03b3 ED A1 05                		mov.L	20[r10], r1
 3345 03b6 05 00 00 00             		bsr	_GetObjectId
 3346 03ba E7 A1 04                		mov.L	r1, 16[r10]
 3347                             		.loc 2 1215 16
 3348 03bd ED A5 04                		mov.L	16[r10], r5
 3349 03c0 61 05                   		cmp	#0, r5
 3350 03c2 28 05 38 AA 05          		blt	.L257
1216:../src/wolfcrypt/src/pkcs12.c ****                                                              ci->dataSz)) < 0) {
1217:../src/wolfcrypt/src/pkcs12.c ****                 goto exit_pk12par;
1218:../src/wolfcrypt/src/pkcs12.c ****             }
1219:../src/wolfcrypt/src/pkcs12.c **** 
1220:../src/wolfcrypt/src/pkcs12.c ****             switch (oid) {
 3351                             		.loc 2 1220 13
 3352 03c7 ED A5 13                		mov.L	76[r10], r5
 3353 03ca 76 05 9D 02             		cmp	#0x29d, r5
 3354 03ce 3A 6F 02                		beq	.L188
 3355 03d1 76 05 9D 02             		cmp	#0x29d, r5
 3356 03d5 24 12                   		bgtu	.L189
 3357 03d7 76 05 9B 02             		cmp	#0x29b, r5
 3358 03db 20 26                   		beq	.L190
 3359 03dd 76 05 9C 02             		cmp	#0x29c, r5
 3360 03e1 3A F5 00                		beq	.L191
 3361 03e4 38 B9 04                		bra	.L192
 3362                             	.L189:
 3363 03e7 76 05 9F 02             		cmp	#0x29f, r5
 3364 03eb 3A 9A 04                		beq	.L193
 3365 03ee 76 05 9F 02             		cmp	#0x29f, r5
 3366 03f2 22 05 38 85 04          		bltu	.L194
 3367 03f7 76 05 A0 02             		cmp	#0x2a0, r5
 3368 03fb 3A 96 04                		beq	.L195
 3369 03fe 38 9F 04                		bra	.L192
 3370                             	.L190:
1221:../src/wolfcrypt/src/pkcs12.c ****                 case WC_PKCS12_KeyBag: /* 667 */
1222:../src/wolfcrypt/src/pkcs12.c ****                     WOLFSSL_MSG("PKCS12 Key Bag found");
 3371                             		.loc 2 1222 21
 3372 0401 FB 12 73 03 00 00       		mov.L	#.LC28, r1
 3373 0407 05 00 00 00             		bsr	_WOLFSSL_MSG
1223:../src/wolfcrypt/src/pkcs12.c ****                     if (GetASNTag(data, &idx, &tag, ci->dataSz) < 0) {
 3374                             		.loc 2 1223 25
 3375 040b EC A5                   		mov.L	[r10], r5
 3376 040d A8 DC                   		mov.L	12[r5], r4
 3377 040f 71 A3 60                		add	#0x60, r10, r3
 3378 0412 71 A5 54                		add	#0x54, r10, r5
 3379 0415 EF 52                   		mov.L	r5, r2
 3380 0417 ED A1 05                		mov.L	20[r10], r1
 3381 041a 05 00 00 00             		bsr	_GetASNTag
 3382 041e EF 15                   		mov.L	r1, r5
 3383                             		.loc 2 1223 24
 3384 0420 61 05                   		cmp	#0, r5
 3385 0422 28 0A                   		bge	.L196
1224:../src/wolfcrypt/src/pkcs12.c ****                         ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3386                             		.loc 2 1224 25
 3387 0424 F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3388 0429 38 58 05                		bra	.L239
 3389                             	.L196:
1225:../src/wolfcrypt/src/pkcs12.c ****                     }
1226:../src/wolfcrypt/src/pkcs12.c ****                     if (tag != (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC)) {
 3390                             		.loc 2 1226 29
 3391 042c CD A5 60                		mov.B	96[r10], r5
 3392                             		.loc 2 1226 24
 3393 042f 5B 55                   		movu.B	r5, r5
 3394 0431 75 55 A0                		cmp	#0xa0, r5
 3395 0434 11                      		beq	.L197
1227:../src/wolfcrypt/src/pkcs12.c ****                         ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3396                             		.loc 2 1227 25
 3397 0435 F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3398 043a 38 47 05                		bra	.L239
 3399                             	.L197:
1228:../src/wolfcrypt/src/pkcs12.c ****                     }
1229:../src/wolfcrypt/src/pkcs12.c ****                     if ((ret = GetLength(data, &idx, &size, ci->dataSz)) <= 0) {
 3400                             		.loc 2 1229 32
 3401 043d EC A5                   		mov.L	[r10], r5
 3402 043f A8 DC                   		mov.L	12[r5], r4
 3403 0441 71 A3 58                		add	#0x58, r10, r3
 3404 0444 71 A5 54                		add	#0x54, r10, r5
 3405 0447 EF 52                   		mov.L	r5, r2
 3406 0449 ED A1 05                		mov.L	20[r10], r1
 3407 044c 05 00 00 00             		bsr	_GetLength
 3408 0450 E7 A1 04                		mov.L	r1, 16[r10]
 3409                             		.loc 2 1229 24
 3410 0453 ED A5 04                		mov.L	16[r10], r5
 3411 0456 61 05                   		cmp	#0, r5
 3412 0458 2A 12                   		bgt	.L198
1230:../src/wolfcrypt/src/pkcs12.c ****                         if (ret == 0)
 3413                             		.loc 2 1230 28
 3414 045a ED A5 04                		mov.L	16[r10], r5
 3415 045d 61 05                   		cmp	#0, r5
 3416 045f 3B 12 05                		bne	.L258
1231:../src/wolfcrypt/src/pkcs12.c ****                             ret = ASN_PARSE_E;
 3417                             		.loc 2 1231 33
 3418 0462 F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
1232:../src/wolfcrypt/src/pkcs12.c ****                         goto exit_pk12par;
 3419                             		.loc 2 1232 25
 3420 0467 38 0A 05                		bra	.L258
 3421                             	.L198:
1233:../src/wolfcrypt/src/pkcs12.c ****                     }
1234:../src/wolfcrypt/src/pkcs12.c ****                     if (*pkey == NULL) {
 3422                             		.loc 2 1234 25
 3423 046a ED A5 1D                		mov.L	116[r10], r5
 3424 046d EC 55                   		mov.L	[r5], r5
 3425                             		.loc 2 1234 24
 3426 046f 61 05                   		cmp	#0, r5
 3427 0471 21 57                   		bne	.L200
1235:../src/wolfcrypt/src/pkcs12.c ****                         *pkey = (byte*)XMALLOC(size, pkcs12->heap,
 3428                             		.loc 2 1235 40
 3429 0473 ED A5 16                		mov.L	88[r10], r5
 3430 0476 EF 51                   		mov.L	r5, r1
 3431 0478 05 00 00 00             		bsr	_wolfSSL_Malloc
 3432 047c EF 14                   		mov.L	r1, r4
 3433                             		.loc 2 1235 31
 3434 047e ED A5 1D                		mov.L	116[r10], r5
 3435 0481 E3 54                   		mov.L	r4, [r5]
1236:../src/wolfcrypt/src/pkcs12.c ****                                                        DYNAMIC_TYPE_PUBLIC_KEY);
1237:../src/wolfcrypt/src/pkcs12.c ****                         if (*pkey == NULL) {
 3436                             		.loc 2 1237 29
 3437 0483 ED A5 1D                		mov.L	116[r10], r5
 3438 0486 EC 55                   		mov.L	[r5], r5
 3439                             		.loc 2 1237 28
 3440 0488 61 05                   		cmp	#0, r5
 3441 048a 18                      		bne	.L201
1238:../src/wolfcrypt/src/pkcs12.c ****                             ERROR_OUT(MEMORY_E, exit_pk12par);
 3442                             		.loc 2 1238 29
 3443 048b F9 A6 04 83             		mov.L	#-125, 16[r10]
 3444 048f 38 F2 04                		bra	.L239
 3445                             	.L201:
1239:../src/wolfcrypt/src/pkcs12.c ****                         }
1240:../src/wolfcrypt/src/pkcs12.c ****                         XMEMCPY(*pkey, data + idx, size);
 3446                             		.loc 2 1240 25
 3447 0492 ED A5 1D                		mov.L	116[r10], r5
 3448 0495 EC 51                   		mov.L	[r5], r1
 3449 0497 ED A5 15                		mov.L	84[r10], r5
 3450 049a ED A4 05                		mov.L	20[r10], r4
 3451 049d 4B 45                   		add	r4, r5
 3452 049f ED A4 16                		mov.L	88[r10], r4
 3453 04a2 EF 43                   		mov.L	r4, r3
 3454 04a4 EF 52                   		mov.L	r5, r2
 3455 04a6 05 00 00 00             		bsr	_memcpy
1241:../src/wolfcrypt/src/pkcs12.c ****                         *pkeySz =  ToTraditional_ex(*pkey, size, &algId);
 3456                             		.loc 2 1241 36
 3457 04aa ED A5 1D                		mov.L	116[r10], r5
 3458 04ad EC 54                   		mov.L	[r5], r4
 3459 04af ED A5 16                		mov.L	88[r10], r5
 3460 04b2 EF 52                   		mov.L	r5, r2
 3461 04b4 71 A5 50                		add	#0x50, r10, r5
 3462 04b7 EF 53                   		mov.L	r5, r3
 3463 04b9 EF 41                   		mov.L	r4, r1
 3464 04bb 05 00 00 00             		bsr	_ToTraditional_ex
 3465 04bf EF 15                   		mov.L	r1, r5
 3466 04c1 EF 54                   		mov.L	r5, r4
 3467                             		.loc 2 1241 33
 3468 04c3 ED A5 1E                		mov.L	120[r10], r5
 3469 04c6 E3 54                   		mov.L	r4, [r5]
 3470                             	.L200:
1242:../src/wolfcrypt/src/pkcs12.c ****                     }
1243:../src/wolfcrypt/src/pkcs12.c **** 
1244:../src/wolfcrypt/src/pkcs12.c ****                 #ifdef WOLFSSL_DEBUG_PKCS12
1245:../src/wolfcrypt/src/pkcs12.c ****                     {
1246:../src/wolfcrypt/src/pkcs12.c ****                         byte* p;
1247:../src/wolfcrypt/src/pkcs12.c ****                         for (printf("\tKey = "), p = (byte*)*pkey;
1248:../src/wolfcrypt/src/pkcs12.c ****                             p < (byte*)*pkey + size;
1249:../src/wolfcrypt/src/pkcs12.c ****                             printf("%02X", *p), p++);
1250:../src/wolfcrypt/src/pkcs12.c ****                         printf("\n");
1251:../src/wolfcrypt/src/pkcs12.c ****                     }
1252:../src/wolfcrypt/src/pkcs12.c ****                 #endif
1253:../src/wolfcrypt/src/pkcs12.c ****                     idx += size;
 3471                             		.loc 2 1253 25
 3472 04c8 ED A4 15                		mov.L	84[r10], r4
 3473 04cb ED A5 16                		mov.L	88[r10], r5
 3474 04ce 4B 45                   		add	r4, r5
 3475 04d0 E7 A5 15                		mov.L	r5, 84[r10]
1254:../src/wolfcrypt/src/pkcs12.c ****                     break;
 3476                             		.loc 2 1254 21
 3477 04d3 38 D5 03                		bra	.L202
 3478                             	.L191:
 3479                             	.LBB32:
1255:../src/wolfcrypt/src/pkcs12.c **** 
1256:../src/wolfcrypt/src/pkcs12.c ****                 case WC_PKCS12_ShroudedKeyBag: /* 668 */
1257:../src/wolfcrypt/src/pkcs12.c ****                     {
1258:../src/wolfcrypt/src/pkcs12.c ****                         byte* k;
1259:../src/wolfcrypt/src/pkcs12.c **** 
1260:../src/wolfcrypt/src/pkcs12.c ****                         WOLFSSL_MSG("PKCS12 Shrouded Key Bag found");
 3480                             		.loc 2 1260 25
 3481 04d6 FB 12 88 03 00 00       		mov.L	#.LC29, r1
 3482 04dc 05 00 00 00             		bsr	_WOLFSSL_MSG
1261:../src/wolfcrypt/src/pkcs12.c ****                         if (GetASNTag(data, &idx, &tag, ci->dataSz) < 0) {
 3483                             		.loc 2 1261 29
 3484 04e0 EC A5                   		mov.L	[r10], r5
 3485 04e2 A8 DC                   		mov.L	12[r5], r4
 3486 04e4 71 A3 60                		add	#0x60, r10, r3
 3487 04e7 71 A5 54                		add	#0x54, r10, r5
 3488 04ea EF 52                   		mov.L	r5, r2
 3489 04ec ED A1 05                		mov.L	20[r10], r1
 3490 04ef 05 00 00 00             		bsr	_GetASNTag
 3491 04f3 EF 15                   		mov.L	r1, r5
 3492                             		.loc 2 1261 28
 3493 04f5 61 05                   		cmp	#0, r5
 3494 04f7 28 0A                   		bge	.L203
1262:../src/wolfcrypt/src/pkcs12.c ****                             ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3495                             		.loc 2 1262 29
 3496 04f9 F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3497 04fe 38 83 04                		bra	.L239
 3498                             	.L203:
1263:../src/wolfcrypt/src/pkcs12.c ****                         }
1264:../src/wolfcrypt/src/pkcs12.c ****                         if (tag != (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC)) {
 3499                             		.loc 2 1264 33
 3500 0501 CD A5 60                		mov.B	96[r10], r5
 3501                             		.loc 2 1264 28
 3502 0504 5B 55                   		movu.B	r5, r5
 3503 0506 75 55 A0                		cmp	#0xa0, r5
 3504 0509 11                      		beq	.L204
1265:../src/wolfcrypt/src/pkcs12.c ****                             ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3505                             		.loc 2 1265 29
 3506 050a F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3507 050f 38 72 04                		bra	.L239
 3508                             	.L204:
1266:../src/wolfcrypt/src/pkcs12.c ****                         }
1267:../src/wolfcrypt/src/pkcs12.c ****                         if ((ret = GetLength(data, &idx, &size,
 3509                             		.loc 2 1267 36
 3510 0512 EC A5                   		mov.L	[r10], r5
 3511 0514 A8 DC                   		mov.L	12[r5], r4
 3512 0516 71 A3 58                		add	#0x58, r10, r3
 3513 0519 71 A5 54                		add	#0x54, r10, r5
 3514 051c EF 52                   		mov.L	r5, r2
 3515 051e ED A1 05                		mov.L	20[r10], r1
 3516 0521 05 00 00 00             		bsr	_GetLength
 3517 0525 E7 A1 04                		mov.L	r1, 16[r10]
 3518                             		.loc 2 1267 28
 3519 0528 ED A5 04                		mov.L	16[r10], r5
 3520 052b 61 05                   		cmp	#0, r5
 3521 052d 28 05 38 45 04          		blt	.L259
1268:../src/wolfcrypt/src/pkcs12.c ****                                                              ci->dataSz)) < 0) {
1269:../src/wolfcrypt/src/pkcs12.c ****                             goto exit_pk12par;
1270:../src/wolfcrypt/src/pkcs12.c ****                         }
1271:../src/wolfcrypt/src/pkcs12.c **** 
1272:../src/wolfcrypt/src/pkcs12.c ****                         k = (byte*)XMALLOC(size, pkcs12->heap,
 3522                             		.loc 2 1272 36
 3523 0532 ED A5 16                		mov.L	88[r10], r5
 3524 0535 EF 51                   		mov.L	r5, r1
 3525 0537 05 00 00 00             		bsr	_wolfSSL_Malloc
 3526 053b E7 A1 06                		mov.L	r1, 24[r10]
1273:../src/wolfcrypt/src/pkcs12.c ****                                                        DYNAMIC_TYPE_PUBLIC_KEY);
1274:../src/wolfcrypt/src/pkcs12.c ****                         if (k == NULL) {
 3527                             		.loc 2 1274 28
 3528 053e ED A5 06                		mov.L	24[r10], r5
 3529 0541 61 05                   		cmp	#0, r5
 3530 0543 18                      		bne	.L206
1275:../src/wolfcrypt/src/pkcs12.c ****                             ERROR_OUT(MEMORY_E, exit_pk12par);
 3531                             		.loc 2 1275 29
 3532 0544 F9 A6 04 83             		mov.L	#-125, 16[r10]
 3533 0548 38 39 04                		bra	.L239
 3534                             	.L206:
1276:../src/wolfcrypt/src/pkcs12.c ****                         }
1277:../src/wolfcrypt/src/pkcs12.c ****                         XMEMCPY(k, data + idx, size);
 3535                             		.loc 2 1277 25
 3536 054b ED A5 15                		mov.L	84[r10], r5
 3537 054e ED A4 05                		mov.L	20[r10], r4
 3538 0551 4B 45                   		add	r4, r5
 3539 0553 ED A4 16                		mov.L	88[r10], r4
 3540 0556 EF 43                   		mov.L	r4, r3
 3541 0558 EF 52                   		mov.L	r5, r2
 3542 055a ED A1 06                		mov.L	24[r10], r1
 3543 055d 05 00 00 00             		bsr	_memcpy
1278:../src/wolfcrypt/src/pkcs12.c **** 
1279:../src/wolfcrypt/src/pkcs12.c ****                         /* overwrites input, be warned */
1280:../src/wolfcrypt/src/pkcs12.c ****                         if ((ret = ToTraditionalEnc(k, size, psw, pswSz,
 3544                             		.loc 2 1280 36
 3545 0561 ED A5 16                		mov.L	88[r10], r5
 3546 0564 EF 52                   		mov.L	r5, r2
 3547 0566 71 A5 50                		add	#0x50, r10, r5
 3548 0569 E3 05                   		mov.L	r5, [r0]
 3549 056b ED A4 07                		mov.L	28[r10], r4
 3550 056e ED A3 1C                		mov.L	112[r10], r3
 3551 0571 ED A1 06                		mov.L	24[r10], r1
 3552 0574 05 00 00 00             		bsr	_ToTraditionalEnc
 3553 0578 E7 A1 04                		mov.L	r1, 16[r10]
 3554                             		.loc 2 1280 28
 3555 057b ED A5 04                		mov.L	16[r10], r5
 3556 057e 61 05                   		cmp	#0, r5
 3557 0580 28 1A                   		bge	.L207
 3558                             	.LBB33:
1281:../src/wolfcrypt/src/pkcs12.c ****                                                                  &algId)) < 0) {
1282:../src/wolfcrypt/src/pkcs12.c ****                             XFREE(k, pkcs12->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 3559                             		.loc 2 1282 29
 3560 0582 ED A5 06                		mov.L	24[r10], r5
 3561 0585 E7 A5 08                		mov.L	r5, 32[r10]
 3562 0588 ED A5 08                		mov.L	32[r10], r5
 3563 058b 61 05                   		cmp	#0, r5
 3564 058d 3A EA 03                		beq	.L260
 3565                             		.loc 2 1282 29 is_stmt 0 discriminator 1
 3566 0590 ED A1 08                		mov.L	32[r10], r1
 3567 0593 05 00 00 00             		bsr	_wolfSSL_Free
 3568                             	.LBE33:
1283:../src/wolfcrypt/src/pkcs12.c ****                             goto exit_pk12par;
 3569                             		.loc 2 1283 29 is_stmt 1 discriminator 1
 3570 0597 38 E0 03                		bra	.L260
 3571                             	.L207:
1284:../src/wolfcrypt/src/pkcs12.c ****                         }
1285:../src/wolfcrypt/src/pkcs12.c **** 
1286:../src/wolfcrypt/src/pkcs12.c ****                         if (ret < size) {
 3572                             		.loc 2 1286 33
 3573 059a ED A5 16                		mov.L	88[r10], r5
 3574                             		.loc 2 1286 28
 3575 059d ED A4 04                		mov.L	16[r10], r4
 3576 05a0 47 54                   		cmp	r5, r4
 3577 05a2 28 57                   		bge	.L209
 3578                             	.LBB34:
1287:../src/wolfcrypt/src/pkcs12.c ****                             /* shrink key buffer */
1288:../src/wolfcrypt/src/pkcs12.c ****                             byte* tmp = (byte*)XMALLOC(ret, pkcs12->heap,
 3579                             		.loc 2 1288 48
 3580 05a4 ED A5 04                		mov.L	16[r10], r5
 3581 05a7 EF 51                   		mov.L	r5, r1
 3582 05a9 05 00 00 00             		bsr	_wolfSSL_Malloc
 3583 05ad E7 A1 09                		mov.L	r1, 36[r10]
1289:../src/wolfcrypt/src/pkcs12.c ****                                                  DYNAMIC_TYPE_PUBLIC_KEY);
1290:../src/wolfcrypt/src/pkcs12.c ****                             if (tmp == NULL) {
 3584                             		.loc 2 1290 32
 3585 05b0 ED A5 09                		mov.L	36[r10], r5
 3586 05b3 61 05                   		cmp	#0, r5
 3587 05b5 21 1C                   		bne	.L210
 3588                             	.LBB35:
1291:../src/wolfcrypt/src/pkcs12.c ****                                 XFREE(k, pkcs12->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 3589                             		.loc 2 1291 33
 3590 05b7 ED A5 06                		mov.L	24[r10], r5
 3591 05ba E7 A5 0A                		mov.L	r5, 40[r10]
 3592 05bd ED A5 0A                		mov.L	40[r10], r5
 3593 05c0 61 05                   		cmp	#0, r5
 3594 05c2 10                      		beq	.L211
 3595                             		.loc 2 1291 33 is_stmt 0 discriminator 1
 3596 05c3 ED A1 0A                		mov.L	40[r10], r1
 3597 05c6 05 00 00 00             		bsr	_wolfSSL_Free
 3598                             	.L211:
 3599                             	.LBE35:
1292:../src/wolfcrypt/src/pkcs12.c ****                                 ERROR_OUT(MEMORY_E, exit_pk12par);
 3600                             		.loc 2 1292 33 is_stmt 1
 3601 05ca F9 A6 04 83             		mov.L	#-125, 16[r10]
 3602 05ce 38 B3 03                		bra	.L239
 3603                             	.L210:
1293:../src/wolfcrypt/src/pkcs12.c ****                             }
1294:../src/wolfcrypt/src/pkcs12.c ****                             XMEMCPY(tmp, k, ret);
 3604                             		.loc 2 1294 29
 3605 05d1 ED A5 04                		mov.L	16[r10], r5
 3606 05d4 EF 53                   		mov.L	r5, r3
 3607 05d6 ED A2 06                		mov.L	24[r10], r2
 3608 05d9 ED A1 09                		mov.L	36[r10], r1
 3609 05dc 05 00 00 00             		bsr	_memcpy
 3610                             	.LBB36:
1295:../src/wolfcrypt/src/pkcs12.c ****                             XFREE(k, pkcs12->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 3611                             		.loc 2 1295 29
 3612 05e0 ED A5 06                		mov.L	24[r10], r5
 3613 05e3 E7 A5 0B                		mov.L	r5, 44[r10]
 3614 05e6 ED A5 0B                		mov.L	44[r10], r5
 3615 05e9 61 05                   		cmp	#0, r5
 3616 05eb 10                      		beq	.L212
 3617                             		.loc 2 1295 29 is_stmt 0 discriminator 1
 3618 05ec ED A1 0B                		mov.L	44[r10], r1
 3619 05ef 05 00 00 00             		bsr	_wolfSSL_Free
 3620                             	.L212:
 3621                             	.LBE36:
1296:../src/wolfcrypt/src/pkcs12.c ****                             k = tmp;
 3622                             		.loc 2 1296 31 is_stmt 1
 3623 05f3 ED A5 09                		mov.L	36[r10], r5
 3624 05f6 E7 A5 06                		mov.L	r5, 24[r10]
 3625                             	.L209:
 3626                             	.LBE34:
1297:../src/wolfcrypt/src/pkcs12.c ****                         }
1298:../src/wolfcrypt/src/pkcs12.c ****                         size = ret;
 3627                             		.loc 2 1298 30
 3628 05f9 ED A5 04                		mov.L	16[r10], r5
 3629 05fc E7 A5 16                		mov.L	r5, 88[r10]
1299:../src/wolfcrypt/src/pkcs12.c **** 
1300:../src/wolfcrypt/src/pkcs12.c ****                         if (*pkey == NULL) {
 3630                             		.loc 2 1300 29
 3631 05ff ED A5 1D                		mov.L	116[r10], r5
 3632 0602 EC 55                   		mov.L	[r5], r5
 3633                             		.loc 2 1300 28
 3634 0604 61 05                   		cmp	#0, r5
 3635 0606 21 16                   		bne	.L213
1301:../src/wolfcrypt/src/pkcs12.c ****                             *pkey = k;
 3636                             		.loc 2 1301 35
 3637 0608 ED A5 1D                		mov.L	116[r10], r5
 3638 060b ED A4 06                		mov.L	24[r10], r4
 3639 060e E3 54                   		mov.L	r4, [r5]
1302:../src/wolfcrypt/src/pkcs12.c ****                             *pkeySz = size;
 3640                             		.loc 2 1302 37
 3641 0610 ED A5 16                		mov.L	88[r10], r5
 3642 0613 EF 54                   		mov.L	r5, r4
 3643 0615 ED A5 1E                		mov.L	120[r10], r5
 3644 0618 E3 54                   		mov.L	r4, [r5]
 3645 061a 2E 15                   		bra	.L214
 3646                             	.L213:
 3647                             	.LBB37:
1303:../src/wolfcrypt/src/pkcs12.c ****                         }
1304:../src/wolfcrypt/src/pkcs12.c ****                         else { /* only expecting one key */
1305:../src/wolfcrypt/src/pkcs12.c ****                             XFREE(k, pkcs12->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 3648                             		.loc 2 1305 29
 3649 061c ED A5 06                		mov.L	24[r10], r5
 3650 061f E7 A5 0C                		mov.L	r5, 48[r10]
 3651 0622 ED A5 0C                		mov.L	48[r10], r5
 3652 0625 61 05                   		cmp	#0, r5
 3653 0627 10                      		beq	.L214
 3654                             		.loc 2 1305 29 is_stmt 0 discriminator 1
 3655 0628 ED A1 0C                		mov.L	48[r10], r1
 3656 062b 05 00 00 00             		bsr	_wolfSSL_Free
 3657                             	.L214:
 3658                             	.LBE37:
1306:../src/wolfcrypt/src/pkcs12.c ****                         }
1307:../src/wolfcrypt/src/pkcs12.c ****                         idx += size;
 3659                             		.loc 2 1307 29 is_stmt 1
 3660 062f ED A4 15                		mov.L	84[r10], r4
 3661 0632 ED A5 16                		mov.L	88[r10], r5
 3662 0635 4B 45                   		add	r4, r5
 3663 0637 E7 A5 15                		mov.L	r5, 84[r10]
 3664                             	.LBE32:
1308:../src/wolfcrypt/src/pkcs12.c **** 
1309:../src/wolfcrypt/src/pkcs12.c ****                     #ifdef WOLFSSL_DEBUG_PKCS12
1310:../src/wolfcrypt/src/pkcs12.c ****                         {
1311:../src/wolfcrypt/src/pkcs12.c ****                             byte* p;
1312:../src/wolfcrypt/src/pkcs12.c ****                             for (printf("\tKey = "), p = (byte*)k;
1313:../src/wolfcrypt/src/pkcs12.c ****                                 p < (byte*)k + ret;
1314:../src/wolfcrypt/src/pkcs12.c ****                                 printf("%02X", *p), p++);
1315:../src/wolfcrypt/src/pkcs12.c ****                             printf("\n");
1316:../src/wolfcrypt/src/pkcs12.c ****                         }
1317:../src/wolfcrypt/src/pkcs12.c ****                     #endif
1318:../src/wolfcrypt/src/pkcs12.c ****                     }
1319:../src/wolfcrypt/src/pkcs12.c ****                     break;
 3665                             		.loc 2 1319 21
 3666 063a 38 6E 02                		bra	.L202
 3667                             	.L188:
 3668                             	.LBB38:
1320:../src/wolfcrypt/src/pkcs12.c **** 
1321:../src/wolfcrypt/src/pkcs12.c ****                 case WC_PKCS12_CertBag: /* 669 */
1322:../src/wolfcrypt/src/pkcs12.c ****                 {
1323:../src/wolfcrypt/src/pkcs12.c ****                     WC_DerCertList* node;
1324:../src/wolfcrypt/src/pkcs12.c ****                     WOLFSSL_MSG("PKCS12 Cert Bag found");
 3669                             		.loc 2 1324 21
 3670 063d FB 12 A6 03 00 00       		mov.L	#.LC30, r1
 3671 0643 05 00 00 00             		bsr	_WOLFSSL_MSG
1325:../src/wolfcrypt/src/pkcs12.c ****                     if (GetASNTag(data, &idx, &tag, ci->dataSz) < 0) {
 3672                             		.loc 2 1325 25
 3673 0647 EC A5                   		mov.L	[r10], r5
 3674 0649 A8 DC                   		mov.L	12[r5], r4
 3675 064b 71 A3 60                		add	#0x60, r10, r3
 3676 064e 71 A5 54                		add	#0x54, r10, r5
 3677 0651 EF 52                   		mov.L	r5, r2
 3678 0653 ED A1 05                		mov.L	20[r10], r1
 3679 0656 05 00 00 00             		bsr	_GetASNTag
 3680 065a EF 15                   		mov.L	r1, r5
 3681                             		.loc 2 1325 24
 3682 065c 61 05                   		cmp	#0, r5
 3683 065e 28 0A                   		bge	.L215
1326:../src/wolfcrypt/src/pkcs12.c ****                         ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3684                             		.loc 2 1326 25
 3685 0660 F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3686 0665 38 1C 03                		bra	.L239
 3687                             	.L215:
1327:../src/wolfcrypt/src/pkcs12.c ****                     }
1328:../src/wolfcrypt/src/pkcs12.c ****                     if (tag != (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC)) {
 3688                             		.loc 2 1328 29
 3689 0668 CD A5 60                		mov.B	96[r10], r5
 3690                             		.loc 2 1328 24
 3691 066b 5B 55                   		movu.B	r5, r5
 3692 066d 75 55 A0                		cmp	#0xa0, r5
 3693 0670 11                      		beq	.L216
1329:../src/wolfcrypt/src/pkcs12.c ****                         ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3694                             		.loc 2 1329 25
 3695 0671 F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3696 0676 38 0B 03                		bra	.L239
 3697                             	.L216:
1330:../src/wolfcrypt/src/pkcs12.c ****                     }
1331:../src/wolfcrypt/src/pkcs12.c ****                     if ((ret = GetLength(data, &idx, &size, ci->dataSz)) < 0) {
 3698                             		.loc 2 1331 32
 3699 0679 EC A5                   		mov.L	[r10], r5
 3700 067b A8 DC                   		mov.L	12[r5], r4
 3701 067d 71 A3 58                		add	#0x58, r10, r3
 3702 0680 71 A5 54                		add	#0x54, r10, r5
 3703 0683 EF 52                   		mov.L	r5, r2
 3704 0685 ED A1 05                		mov.L	20[r10], r1
 3705 0688 05 00 00 00             		bsr	_GetLength
 3706 068c E7 A1 04                		mov.L	r1, 16[r10]
 3707                             		.loc 2 1331 24
 3708 068f ED A5 04                		mov.L	16[r10], r5
 3709 0692 61 05                   		cmp	#0, r5
 3710 0694 28 05 38 E3 02          		blt	.L261
1332:../src/wolfcrypt/src/pkcs12.c ****                         goto exit_pk12par;
1333:../src/wolfcrypt/src/pkcs12.c ****                     }
1334:../src/wolfcrypt/src/pkcs12.c **** 
1335:../src/wolfcrypt/src/pkcs12.c ****                     /* get cert bag type */
1336:../src/wolfcrypt/src/pkcs12.c ****                     if ((ret = GetSequence(data, &idx, &size, ci->dataSz)) <0) {
 3711                             		.loc 2 1336 32
 3712 0699 EC A5                   		mov.L	[r10], r5
 3713 069b A8 DC                   		mov.L	12[r5], r4
 3714 069d 71 A3 58                		add	#0x58, r10, r3
 3715 06a0 71 A5 54                		add	#0x54, r10, r5
 3716 06a3 EF 52                   		mov.L	r5, r2
 3717 06a5 ED A1 05                		mov.L	20[r10], r1
 3718 06a8 05 00 00 00             		bsr	_GetSequence
 3719 06ac E7 A1 04                		mov.L	r1, 16[r10]
 3720                             		.loc 2 1336 24
 3721 06af ED A5 04                		mov.L	16[r10], r5
 3722 06b2 61 05                   		cmp	#0, r5
 3723 06b4 28 05 38 C5 02          		blt	.L262
1337:../src/wolfcrypt/src/pkcs12.c ****                         goto exit_pk12par;
1338:../src/wolfcrypt/src/pkcs12.c ****                     }
1339:../src/wolfcrypt/src/pkcs12.c **** 
1340:../src/wolfcrypt/src/pkcs12.c ****                     if ((ret = GetObjectId(data, &idx, &oid, oidIgnoreType,
 3724                             		.loc 2 1340 32
 3725 06b9 EC A5                   		mov.L	[r10], r5
 3726 06bb A8 DC                   		mov.L	12[r5], r4
 3727 06bd 71 A3 4C                		add	#0x4c, r10, r3
 3728 06c0 71 A5 54                		add	#0x54, r10, r5
 3729 06c3 E3 04                   		mov.L	r4, [r0]
 3730 06c5 75 44 15                		mov.L	#21, r4
 3731 06c8 EF 52                   		mov.L	r5, r2
 3732 06ca ED A1 05                		mov.L	20[r10], r1
 3733 06cd 05 00 00 00             		bsr	_GetObjectId
 3734 06d1 E7 A1 04                		mov.L	r1, 16[r10]
 3735                             		.loc 2 1340 24
 3736 06d4 ED A5 04                		mov.L	16[r10], r5
 3737 06d7 61 05                   		cmp	#0, r5
 3738 06d9 28 05 38 A2 02          		blt	.L263
1341:../src/wolfcrypt/src/pkcs12.c ****                                                              ci->dataSz)) < 0) {
1342:../src/wolfcrypt/src/pkcs12.c ****                         goto exit_pk12par;
1343:../src/wolfcrypt/src/pkcs12.c ****                     }
1344:../src/wolfcrypt/src/pkcs12.c **** 
1345:../src/wolfcrypt/src/pkcs12.c ****                     switch (oid) {
 3739                             		.loc 2 1345 21
 3740 06de ED A5 13                		mov.L	76[r10], r5
 3741 06e1 76 05 A3 02             		cmp	#0x2a3, r5
 3742 06e5 3B BD 00                		bne	.L220
1346:../src/wolfcrypt/src/pkcs12.c ****                         case WC_PKCS12_CertBag_Type1:  /* 675 */
1347:../src/wolfcrypt/src/pkcs12.c ****                             /* type 1 */
1348:../src/wolfcrypt/src/pkcs12.c ****                             WOLFSSL_MSG("PKCS12 cert bag type 1");
 3743                             		.loc 2 1348 29
 3744 06e8 FB 12 BC 03 00 00       		mov.L	#.LC31, r1
 3745 06ee 05 00 00 00             		bsr	_WOLFSSL_MSG
1349:../src/wolfcrypt/src/pkcs12.c ****                             if (GetASNTag(data, &idx, &tag, ci->dataSz) < 0) {
 3746                             		.loc 2 1349 33
 3747 06f2 EC A5                   		mov.L	[r10], r5
 3748 06f4 A8 DC                   		mov.L	12[r5], r4
 3749 06f6 71 A3 60                		add	#0x60, r10, r3
 3750 06f9 71 A5 54                		add	#0x54, r10, r5
 3751 06fc EF 52                   		mov.L	r5, r2
 3752 06fe ED A1 05                		mov.L	20[r10], r1
 3753 0701 05 00 00 00             		bsr	_GetASNTag
 3754 0705 EF 15                   		mov.L	r1, r5
 3755                             		.loc 2 1349 32
 3756 0707 61 05                   		cmp	#0, r5
 3757 0709 28 0A                   		bge	.L221
1350:../src/wolfcrypt/src/pkcs12.c ****                                 ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3758                             		.loc 2 1350 33
 3759 070b F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3760 0710 38 71 02                		bra	.L239
 3761                             	.L221:
1351:../src/wolfcrypt/src/pkcs12.c ****                             }
1352:../src/wolfcrypt/src/pkcs12.c ****                             if (tag != (ASN_CONSTRUCTED |
 3762                             		.loc 2 1352 37
 3763 0713 CD A5 60                		mov.B	96[r10], r5
 3764                             		.loc 2 1352 32
 3765 0716 5B 55                   		movu.B	r5, r5
 3766 0718 75 55 A0                		cmp	#0xa0, r5
 3767 071b 11                      		beq	.L222
1353:../src/wolfcrypt/src/pkcs12.c ****                                         ASN_CONTEXT_SPECIFIC)) {
1354:../src/wolfcrypt/src/pkcs12.c ****                                 ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3768                             		.loc 2 1354 33
 3769 071c F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3770 0721 38 60 02                		bra	.L239
 3771                             	.L222:
1355:../src/wolfcrypt/src/pkcs12.c ****                             }
1356:../src/wolfcrypt/src/pkcs12.c ****                             if ((ret = GetLength(data, &idx, &size, ci->dataSz))
 3772                             		.loc 2 1356 40
 3773 0724 EC A5                   		mov.L	[r10], r5
 3774 0726 A8 DC                   		mov.L	12[r5], r4
 3775 0728 71 A3 58                		add	#0x58, r10, r3
 3776 072b 71 A5 54                		add	#0x54, r10, r5
 3777 072e EF 52                   		mov.L	r5, r2
 3778 0730 ED A1 05                		mov.L	20[r10], r1
 3779 0733 05 00 00 00             		bsr	_GetLength
 3780 0737 E7 A1 04                		mov.L	r1, 16[r10]
 3781                             		.loc 2 1356 32
 3782 073a ED A5 04                		mov.L	16[r10], r5
 3783 073d 61 05                   		cmp	#0, r5
 3784 073f 2A 12                   		bgt	.L223
1357:../src/wolfcrypt/src/pkcs12.c ****                                                                          <= 0) {
1358:../src/wolfcrypt/src/pkcs12.c ****                                 if (ret == 0)
 3785                             		.loc 2 1358 36
 3786 0741 ED A5 04                		mov.L	16[r10], r5
 3787 0744 61 05                   		cmp	#0, r5
 3788 0746 3B 3A 02                		bne	.L264
1359:../src/wolfcrypt/src/pkcs12.c ****                                     ret = ASN_PARSE_E;
 3789                             		.loc 2 1359 41
 3790 0749 F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
1360:../src/wolfcrypt/src/pkcs12.c ****                                 goto exit_pk12par;
 3791                             		.loc 2 1360 33
 3792 074e 38 32 02                		bra	.L264
 3793                             	.L223:
1361:../src/wolfcrypt/src/pkcs12.c ****                             }
1362:../src/wolfcrypt/src/pkcs12.c ****                             if (GetASNTag(data, &idx, &tag, ci->dataSz) < 0) {
 3794                             		.loc 2 1362 33
 3795 0751 EC A5                   		mov.L	[r10], r5
 3796 0753 A8 DC                   		mov.L	12[r5], r4
 3797 0755 71 A3 60                		add	#0x60, r10, r3
 3798 0758 71 A5 54                		add	#0x54, r10, r5
 3799 075b EF 52                   		mov.L	r5, r2
 3800 075d ED A1 05                		mov.L	20[r10], r1
 3801 0760 05 00 00 00             		bsr	_GetASNTag
 3802 0764 EF 15                   		mov.L	r1, r5
 3803                             		.loc 2 1362 32
 3804 0766 61 05                   		cmp	#0, r5
 3805 0768 28 0A                   		bge	.L225
1363:../src/wolfcrypt/src/pkcs12.c ****                                 ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3806                             		.loc 2 1363 33
 3807 076a F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3808 076f 38 12 02                		bra	.L239
 3809                             	.L225:
1364:../src/wolfcrypt/src/pkcs12.c ****                             }
1365:../src/wolfcrypt/src/pkcs12.c ****                             if (tag != ASN_OCTET_STRING) {
 3810                             		.loc 2 1365 37
 3811 0772 CD A5 60                		mov.B	96[r10], r5
 3812                             		.loc 2 1365 32
 3813 0775 5B 55                   		movu.B	r5, r5
 3814 0777 61 45                   		cmp	#4, r5
 3815 0779 11                      		beq	.L226
1366:../src/wolfcrypt/src/pkcs12.c ****                                 ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3816                             		.loc 2 1366 33
 3817 077a F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3818 077f 38 02 02                		bra	.L239
 3819                             	.L226:
1367:../src/wolfcrypt/src/pkcs12.c **** 
1368:../src/wolfcrypt/src/pkcs12.c ****                             }
1369:../src/wolfcrypt/src/pkcs12.c ****                             if ((ret = GetLength(data, &idx, &size, ci->dataSz))
 3820                             		.loc 2 1369 40
 3821 0782 EC A5                   		mov.L	[r10], r5
 3822 0784 A8 DC                   		mov.L	12[r5], r4
 3823 0786 71 A3 58                		add	#0x58, r10, r3
 3824 0789 71 A5 54                		add	#0x54, r10, r5
 3825 078c EF 52                   		mov.L	r5, r2
 3826 078e ED A1 05                		mov.L	20[r10], r1
 3827 0791 05 00 00 00             		bsr	_GetLength
 3828 0795 E7 A1 04                		mov.L	r1, 16[r10]
 3829                             		.loc 2 1369 32
 3830 0798 ED A5 04                		mov.L	16[r10], r5
 3831 079b 61 05                   		cmp	#0, r5
 3832 079d 28 11                   		bge	.L265
1370:../src/wolfcrypt/src/pkcs12.c ****                                                                           < 0) {
1371:../src/wolfcrypt/src/pkcs12.c ****                                 goto exit_pk12par;
 3833                             		.loc 2 1371 33
 3834 079f 38 E2 01                		bra	.L239
 3835                             	.L220:
1372:../src/wolfcrypt/src/pkcs12.c ****                             }
1373:../src/wolfcrypt/src/pkcs12.c ****                             break;
1374:../src/wolfcrypt/src/pkcs12.c ****                        default:
1375:../src/wolfcrypt/src/pkcs12.c ****                             WOLFSSL_MSG("Unknown PKCS12 cert bag type");
 3836                             		.loc 2 1375 29
 3837 07a2 FB 12 D3 03 00 00       		mov.L	#.LC32, r1
 3838 07a8 05 00 00 00             		bsr	_WOLFSSL_MSG
 3839 07ac 2E 03                   		bra	.L228
 3840                             	.L265:
1373:../src/wolfcrypt/src/pkcs12.c ****                        default:
 3841                             		.loc 2 1373 29
 3842 07ae 03                      		nop
 3843                             	.L228:
1376:../src/wolfcrypt/src/pkcs12.c ****                     }
1377:../src/wolfcrypt/src/pkcs12.c **** 
1378:../src/wolfcrypt/src/pkcs12.c ****                     if (size + idx > (word32)bagSz) {
 3844                             		.loc 2 1378 30
 3845 07af ED A5 16                		mov.L	88[r10], r5
 3846 07b2 EF 54                   		mov.L	r5, r4
 3847 07b4 ED A5 15                		mov.L	84[r10], r5
 3848 07b7 4B 45                   		add	r4, r5
 3849                             		.loc 2 1378 38
 3850 07b9 ED A4 1A                		mov.L	104[r10], r4
 3851                             		.loc 2 1378 24
 3852 07bc 47 45                   		cmp	r4, r5
 3853 07be 25 0A                   		bleu	.L229
1379:../src/wolfcrypt/src/pkcs12.c ****                         ERROR_OUT(ASN_PARSE_E, exit_pk12par);
 3854                             		.loc 2 1379 25
 3855 07c0 F9 AA 04 74 FF          		mov.L	#-140, 16[r10]
 3856 07c5 38 BC 01                		bra	.L239
 3857                             	.L229:
1380:../src/wolfcrypt/src/pkcs12.c ****                     }
1381:../src/wolfcrypt/src/pkcs12.c **** 
1382:../src/wolfcrypt/src/pkcs12.c ****                     /* list to hold all certs found */
1383:../src/wolfcrypt/src/pkcs12.c ****                     node = (WC_DerCertList*)XMALLOC(sizeof(WC_DerCertList),
 3858                             		.loc 2 1383 45
 3859 07c8 66 C1                   		mov.L	#12, r1
 3860 07ca 05 00 00 00             		bsr	_wolfSSL_Malloc
 3861 07ce E7 A1 0D                		mov.L	r1, 52[r10]
1384:../src/wolfcrypt/src/pkcs12.c ****                                                pkcs12->heap, DYNAMIC_TYPE_PKCS);
1385:../src/wolfcrypt/src/pkcs12.c ****                     if (node == NULL) {
 3862                             		.loc 2 1385 24
 3863 07d1 ED A5 0D                		mov.L	52[r10], r5
 3864 07d4 61 05                   		cmp	#0, r5
 3865 07d6 18                      		bne	.L230
1386:../src/wolfcrypt/src/pkcs12.c ****                         ERROR_OUT(MEMORY_E, exit_pk12par);
 3866                             		.loc 2 1386 25
 3867 07d7 F9 A6 04 83             		mov.L	#-125, 16[r10]
 3868 07db 38 A6 01                		bra	.L239
 3869                             	.L230:
1387:../src/wolfcrypt/src/pkcs12.c ****                     }
1388:../src/wolfcrypt/src/pkcs12.c ****                     XMEMSET(node, 0, sizeof(WC_DerCertList));
 3870                             		.loc 2 1388 21
 3871 07de 66 C3                   		mov.L	#12, r3
 3872 07e0 66 02                   		mov.L	#0, r2
 3873 07e2 ED A1 0D                		mov.L	52[r10], r1
 3874 07e5 05 00 00 00             		bsr	_memset
1389:../src/wolfcrypt/src/pkcs12.c **** 
1390:../src/wolfcrypt/src/pkcs12.c ****                     node->buffer = (byte*)XMALLOC(size, pkcs12->heap,
 3875                             		.loc 2 1390 43
 3876 07e9 ED A5 16                		mov.L	88[r10], r5
 3877 07ec EF 51                   		mov.L	r5, r1
 3878 07ee 05 00 00 00             		bsr	_wolfSSL_Malloc
 3879 07f2 EF 14                   		mov.L	r1, r4
 3880                             		.loc 2 1390 34
 3881 07f4 ED A5 0D                		mov.L	52[r10], r5
 3882 07f7 E3 54                   		mov.L	r4, [r5]
1391:../src/wolfcrypt/src/pkcs12.c ****                                                              DYNAMIC_TYPE_PKCS);
1392:../src/wolfcrypt/src/pkcs12.c ****                     if (node->buffer == NULL) {
 3883                             		.loc 2 1392 29
 3884 07f9 ED A5 0D                		mov.L	52[r10], r5
 3885 07fc EC 55                   		mov.L	[r5], r5
 3886                             		.loc 2 1392 24
 3887 07fe 61 05                   		cmp	#0, r5
 3888 0800 21 1D                   		bne	.L231
 3889                             	.LBB39:
1393:../src/wolfcrypt/src/pkcs12.c ****                         XFREE(node, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 3890                             		.loc 2 1393 25
 3891 0802 ED A5 0D                		mov.L	52[r10], r5
 3892 0805 E7 A5 0E                		mov.L	r5, 56[r10]
 3893 0808 ED A5 0E                		mov.L	56[r10], r5
 3894 080b 61 05                   		cmp	#0, r5
 3895 080d 10                      		beq	.L232
 3896                             		.loc 2 1393 25 is_stmt 0 discriminator 1
 3897 080e ED A1 0E                		mov.L	56[r10], r1
 3898 0811 05 00 00 00             		bsr	_wolfSSL_Free
 3899                             	.L232:
 3900                             	.LBE39:
1394:../src/wolfcrypt/src/pkcs12.c ****                         ERROR_OUT(MEMORY_E, exit_pk12par);
 3901                             		.loc 2 1394 25 is_stmt 1
 3902 0815 F9 A6 04 83             		mov.L	#-125, 16[r10]
 3903 0819 03                      		nop
 3904 081a 38 67 01                		bra	.L239
 3905                             	.L231:
1395:../src/wolfcrypt/src/pkcs12.c ****                     }
1396:../src/wolfcrypt/src/pkcs12.c ****                     XMEMCPY(node->buffer, data + idx, size);
 3906                             		.loc 2 1396 21
 3907 081d ED A5 0D                		mov.L	52[r10], r5
 3908 0820 EC 51                   		mov.L	[r5], r1
 3909 0822 ED A5 15                		mov.L	84[r10], r5
 3910 0825 ED A4 05                		mov.L	20[r10], r4
 3911 0828 4B 45                   		add	r4, r5
 3912 082a ED A4 16                		mov.L	88[r10], r4
 3913 082d EF 43                   		mov.L	r4, r3
 3914 082f EF 52                   		mov.L	r5, r2
 3915 0831 05 00 00 00             		bsr	_memcpy
1397:../src/wolfcrypt/src/pkcs12.c ****                     node->bufferSz = size;
 3916                             		.loc 2 1397 36
 3917 0835 ED A5 16                		mov.L	88[r10], r5
 3918 0838 EF 54                   		mov.L	r5, r4
 3919 083a ED A5 0D                		mov.L	52[r10], r5
 3920 083d A0 5C                   		mov.L	r4, 4[r5]
1398:../src/wolfcrypt/src/pkcs12.c **** 
1399:../src/wolfcrypt/src/pkcs12.c ****                     /* put the new node into the list */
1400:../src/wolfcrypt/src/pkcs12.c ****                     if (certList != NULL) {
 3921                             		.loc 2 1400 34
 3922 083f ED A5 12                		mov.L	72[r10], r5
 3923                             		.loc 2 1400 24
 3924 0842 61 05                   		cmp	#0, r5
 3925 0844 20 1C                   		beq	.L233
1401:../src/wolfcrypt/src/pkcs12.c ****                         WOLFSSL_MSG("Pushing new cert onto queue");
 3926                             		.loc 2 1401 25
 3927 0846 FB 12 F0 03 00 00       		mov.L	#.LC33, r1
 3928 084c 05 00 00 00             		bsr	_WOLFSSL_MSG
1402:../src/wolfcrypt/src/pkcs12.c ****                         tailList->next = node;
 3929                             		.loc 2 1402 40
 3930 0850 ED A5 01                		mov.L	4[r10], r5
 3931 0853 ED A4 0D                		mov.L	52[r10], r4
 3932 0856 A0 D4                   		mov.L	r4, 8[r5]
1403:../src/wolfcrypt/src/pkcs12.c ****                         tailList = node;
 3933                             		.loc 2 1403 34
 3934 0858 ED A5 0D                		mov.L	52[r10], r5
 3935 085b E7 A5 01                		mov.L	r5, 4[r10]
 3936 085e 2E 0E                   		bra	.L234
 3937                             	.L233:
1404:../src/wolfcrypt/src/pkcs12.c ****                     }
1405:../src/wolfcrypt/src/pkcs12.c ****                     else {
1406:../src/wolfcrypt/src/pkcs12.c ****                         certList = node;
 3938                             		.loc 2 1406 34
 3939 0860 ED A5 0D                		mov.L	52[r10], r5
 3940 0863 E7 A5 12                		mov.L	r5, 72[r10]
1407:../src/wolfcrypt/src/pkcs12.c ****                         tailList = node;
 3941                             		.loc 2 1407 34
 3942 0866 ED A5 0D                		mov.L	52[r10], r5
 3943 0869 E7 A5 01                		mov.L	r5, 4[r10]
 3944                             	.L234:
1408:../src/wolfcrypt/src/pkcs12.c ****                     }
1409:../src/wolfcrypt/src/pkcs12.c **** 
1410:../src/wolfcrypt/src/pkcs12.c ****                     /* on to next */
1411:../src/wolfcrypt/src/pkcs12.c ****                     idx += size;
 3945                             		.loc 2 1411 25
 3946 086c ED A4 15                		mov.L	84[r10], r4
 3947 086f ED A5 16                		mov.L	88[r10], r5
 3948 0872 4B 45                   		add	r4, r5
 3949 0874 E7 A5 15                		mov.L	r5, 84[r10]
 3950                             	.LBE38:
1412:../src/wolfcrypt/src/pkcs12.c ****                 }
1413:../src/wolfcrypt/src/pkcs12.c ****                     break;
 3951                             		.loc 2 1413 21
 3952 0877 2E 31                   		bra	.L202
 3953                             	.L194:
1414:../src/wolfcrypt/src/pkcs12.c **** 
1415:../src/wolfcrypt/src/pkcs12.c ****                 case WC_PKCS12_CrlBag: /* 670 */
1416:../src/wolfcrypt/src/pkcs12.c ****                     WOLFSSL_MSG("PKCS12 CRL BAG not yet supported");
 3954                             		.loc 2 1416 21
 3955 0879 FB 12 0C 04 00 00       		mov.L	#.LC34, r1
 3956 087f 05 00 00 00             		bsr	_WOLFSSL_MSG
1417:../src/wolfcrypt/src/pkcs12.c ****                     break;
 3957                             		.loc 2 1417 21
 3958 0883 2E 25                   		bra	.L202
 3959                             	.L193:
1418:../src/wolfcrypt/src/pkcs12.c **** 
1419:../src/wolfcrypt/src/pkcs12.c ****                 case WC_PKCS12_SecretBag: /* 671 */
1420:../src/wolfcrypt/src/pkcs12.c ****                     WOLFSSL_MSG("PKCS12 Secret BAG not yet supported");
 3960                             		.loc 2 1420 21
 3961 0885 FB 12 2D 04 00 00       		mov.L	#.LC35, r1
 3962 088b 05 00 00 00             		bsr	_WOLFSSL_MSG
1421:../src/wolfcrypt/src/pkcs12.c ****                     break;
 3963                             		.loc 2 1421 21
 3964 088f 2E 19                   		bra	.L202
 3965                             	.L195:
1422:../src/wolfcrypt/src/pkcs12.c **** 
1423:../src/wolfcrypt/src/pkcs12.c ****                 case WC_PKCS12_SafeContentsBag: /* 672 */
1424:../src/wolfcrypt/src/pkcs12.c ****                     WOLFSSL_MSG("PKCS12 Safe Contents BAG not yet supported");
 3966                             		.loc 2 1424 21
 3967 0891 FB 12 51 04 00 00       		mov.L	#.LC36, r1
 3968 0897 05 00 00 00             		bsr	_WOLFSSL_MSG
1425:../src/wolfcrypt/src/pkcs12.c ****                     break;
 3969                             		.loc 2 1425 21
 3970 089b 2E 0D                   		bra	.L202
 3971                             	.L192:
1426:../src/wolfcrypt/src/pkcs12.c **** 
1427:../src/wolfcrypt/src/pkcs12.c ****                 default:
1428:../src/wolfcrypt/src/pkcs12.c ****                     WOLFSSL_MSG("Unknown PKCS12 BAG type found");
 3972                             		.loc 2 1428 21
 3973 089d FB 12 7C 04 00 00       		mov.L	#.LC37, r1
 3974 08a3 05 00 00 00             		bsr	_WOLFSSL_MSG
 3975 08a7 03                      		.balign 8,3,1
 3976                             	.L202:
1429:../src/wolfcrypt/src/pkcs12.c ****             }
1430:../src/wolfcrypt/src/pkcs12.c **** 
1431:../src/wolfcrypt/src/pkcs12.c ****             /* Attribute, unknown bag or unsupported */
1432:../src/wolfcrypt/src/pkcs12.c ****             if ((int)idx < bagSz) {
 3977                             		.loc 2 1432 17
 3978 08a8 ED A5 15                		mov.L	84[r10], r5
 3979 08ab EF 54                   		mov.L	r5, r4
 3980                             		.loc 2 1432 26
 3981 08ad ED A5 1A                		mov.L	104[r10], r5
 3982                             		.loc 2 1432 16
 3983 08b0 47 54                   		cmp	r5, r4
 3984 08b2 28 08                   		bge	.L184
1433:../src/wolfcrypt/src/pkcs12.c ****                 idx = bagSz; /* skip for now */
 3985                             		.loc 2 1433 21
 3986 08b4 ED A5 1A                		mov.L	104[r10], r5
 3987 08b7 E7 A5 15                		mov.L	r5, 84[r10]
 3988                             	.L184:
 3989                             	.LBE31:
1208:../src/wolfcrypt/src/pkcs12.c ****             int bagSz;
 3990                             		.loc 2 1208 16
 3991 08ba ED A5 15                		mov.L	84[r10], r5
 3992 08bd EF 54                   		mov.L	r5, r4
1208:../src/wolfcrypt/src/pkcs12.c ****             int bagSz;
 3993                             		.loc 2 1208 25
 3994 08bf ED A5 17                		mov.L	92[r10], r5
1208:../src/wolfcrypt/src/pkcs12.c ****             int bagSz;
 3995                             		.loc 2 1208 15
 3996 08c2 47 54                   		cmp	r5, r4
 3997 08c4 28 05 38 AF FA          		blt	.L236
1434:../src/wolfcrypt/src/pkcs12.c ****             }
1435:../src/wolfcrypt/src/pkcs12.c ****         }
1436:../src/wolfcrypt/src/pkcs12.c **** 
1437:../src/wolfcrypt/src/pkcs12.c ****         /* free temporary buffer */
1438:../src/wolfcrypt/src/pkcs12.c ****         if (buf != NULL) {
 3998                             		.loc 2 1438 12
 3999 08c9 ED A5 02                		mov.L	8[r10], r5
 4000 08cc 61 05                   		cmp	#0, r5
 4001 08ce 20 19                   		beq	.L237
 4002                             	.LBB42:
1439:../src/wolfcrypt/src/pkcs12.c ****             XFREE(buf, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 4003                             		.loc 2 1439 13
 4004 08d0 ED A5 02                		mov.L	8[r10], r5
 4005 08d3 E7 A5 0F                		mov.L	r5, 60[r10]
 4006 08d6 ED A5 0F                		mov.L	60[r10], r5
 4007 08d9 61 05                   		cmp	#0, r5
 4008 08db 10                      		beq	.L238
 4009                             		.loc 2 1439 13 is_stmt 0 discriminator 1
 4010 08dc ED A1 0F                		mov.L	60[r10], r1
 4011 08df 05 00 00 00             		bsr	_wolfSSL_Free
 4012                             	.L238:
 4013                             	.LBE42:
1440:../src/wolfcrypt/src/pkcs12.c ****             buf = NULL;
 4014                             		.loc 2 1440 17 is_stmt 1
 4015 08e3 F9 A6 02 00             		mov.L	#0, 8[r10]
 4016                             	.L237:
1441:../src/wolfcrypt/src/pkcs12.c ****         }
1442:../src/wolfcrypt/src/pkcs12.c **** 
1443:../src/wolfcrypt/src/pkcs12.c ****         ci = ci->next;
 4017                             		.loc 2 1443 12
 4018 08e7 EC A5                   		mov.L	[r10], r5
 4019 08e9 A8 5D                   		mov.L	4[r5], r5
 4020 08eb E3 A5                   		mov.L	r5, [r10]
1444:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Done Parsing PKCS12 Content Info Container");
 4021                             		.loc 2 1444 9
 4022 08ed FB 12 9A 04 00 00       		mov.L	#.LC38, r1
 4023 08f3 05 00 00 00             		bsr	_WOLFSSL_MSG
 4024                             	.LBE29:
1106:../src/wolfcrypt/src/pkcs12.c ****         byte*  data;
 4025                             		.loc 2 1106 43
 4026 08f7 ED A5 03                		mov.L	12[r10], r5
 4027 08fa 62 15                   		add	#1, r5
 4028 08fc E7 A5 03                		mov.L	r5, 12[r10]
 4029                             	.L162:
1106:../src/wolfcrypt/src/pkcs12.c ****         byte*  data;
 4030                             		.loc 2 1106 27 discriminator 1
 4031 08ff ED A5 1B                		mov.L	108[r10], r5
 4032 0902 A8 5D                   		mov.L	4[r5], r5
1106:../src/wolfcrypt/src/pkcs12.c ****         byte*  data;
 4033                             		.loc 2 1106 33 discriminator 1
 4034 0904 A8 DD                   		mov.L	12[r5], r5
1106:../src/wolfcrypt/src/pkcs12.c ****         byte*  data;
 4035                             		.loc 2 1106 5 discriminator 1
 4036 0906 ED A4 03                		mov.L	12[r10], r4
 4037 0909 47 54                   		cmp	r5, r4
 4038 090b 22 05 38 F0 F7          		bltu	.L240
1445:../src/wolfcrypt/src/pkcs12.c ****     }
1446:../src/wolfcrypt/src/pkcs12.c **** 
1447:../src/wolfcrypt/src/pkcs12.c ****     /* check if key pair, remove from list */
1448:../src/wolfcrypt/src/pkcs12.c ****     if (*pkey != NULL) {
 4039                             		.loc 2 1448 9
 4040 0910 ED A5 1D                		mov.L	116[r10], r5
 4041 0913 EC 55                   		mov.L	[r5], r5
 4042                             		.loc 2 1448 8
 4043 0915 61 05                   		cmp	#0, r5
 4044 0917 20 1E                   		beq	.L241
1449:../src/wolfcrypt/src/pkcs12.c ****         freeDecCertList(&certList, pkey, pkeySz, cert, certSz, pkcs12->heap);
 4045                             		.loc 2 1449 9
 4046 0919 ED A5 1B                		mov.L	108[r10], r5
 4047 091c EC 54                   		mov.L	[r5], r4
 4048 091e 71 A5 48                		add	#0x48, r10, r5
 4049 0921 A0 0C                   		mov.L	r4, 4[r0]
 4050 0923 A8 6C                   		mov.L	4[r6], r4
 4051 0925 E3 04                   		mov.L	r4, [r0]
 4052 0927 EC 64                   		mov.L	[r6], r4
 4053 0929 ED A3 1E                		mov.L	120[r10], r3
 4054 092c ED A2 1D                		mov.L	116[r10], r2
 4055 092f EF 51                   		mov.L	r5, r1
 4056 0931 05 00 00 00             		bsr	_freeDecCertList
 4057                             	.L241:
1450:../src/wolfcrypt/src/pkcs12.c ****     }
1451:../src/wolfcrypt/src/pkcs12.c **** 
1452:../src/wolfcrypt/src/pkcs12.c ****     /* if ca arg provided return certList, otherwise free it */
1453:../src/wolfcrypt/src/pkcs12.c ****     if (ca != NULL) {
 4058                             		.loc 2 1453 8
 4059 0935 A8 E5                   		mov.L	8[r6], r5
 4060 0937 61 05                   		cmp	#0, r5
 4061 0939 12                      		beq	.L242
1454:../src/wolfcrypt/src/pkcs12.c ****         *ca = certList;
 4062                             		.loc 2 1454 13
 4063 093a ED A4 12                		mov.L	72[r10], r4
 4064 093d A8 E5                   		mov.L	8[r6], r5
 4065 093f E3 54                   		mov.L	r4, [r5]
 4066 0941 2E 12                   		bra	.L243
 4067                             	.L242:
1455:../src/wolfcrypt/src/pkcs12.c ****     }
1456:../src/wolfcrypt/src/pkcs12.c ****     else {
1457:../src/wolfcrypt/src/pkcs12.c ****         /* free list, not wanted */
1458:../src/wolfcrypt/src/pkcs12.c ****         wc_FreeCertList(certList, pkcs12->heap);
 4068                             		.loc 2 1458 9
 4069 0943 ED A4 12                		mov.L	72[r10], r4
 4070 0946 ED A5 1B                		mov.L	108[r10], r5
 4071 0949 EC 55                   		mov.L	[r5], r5
 4072 094b EF 52                   		mov.L	r5, r2
 4073 094d EF 41                   		mov.L	r4, r1
 4074 094f 05 00 00 00             		bsr	_wc_FreeCertList
 4075                             	.L243:
1459:../src/wolfcrypt/src/pkcs12.c ****     }
1460:../src/wolfcrypt/src/pkcs12.c ****     (void)tailList; /* not used */
1461:../src/wolfcrypt/src/pkcs12.c **** 
1462:../src/wolfcrypt/src/pkcs12.c ****     ret = 0; /* success */
 4076                             		.loc 2 1462 9
 4077 0953 F9 A6 04 00             		mov.L	#0, 16[r10]
 4078 0957 2E 2A                   		bra	.L239
 4079                             	.L250:
 4080                             	.LBB45:
 4081                             	.LBB43:
1125:../src/wolfcrypt/src/pkcs12.c ****             }
 4082                             		.loc 2 1125 17
 4083 0959 03                      		nop
 4084 095a 2E 27                   		bra	.L239
 4085                             	.L251:
1129:../src/wolfcrypt/src/pkcs12.c ****             }
 4086                             		.loc 2 1129 17
 4087 095c 03                      		nop
 4088 095d 2E 24                   		bra	.L239
 4089                             	.L252:
1133:../src/wolfcrypt/src/pkcs12.c ****             }
 4090                             		.loc 2 1133 17
 4091 095f 03                      		nop
 4092 0960 2E 21                   		bra	.L239
 4093                             	.L253:
1141:../src/wolfcrypt/src/pkcs12.c ****             }
 4094                             		.loc 2 1141 17
 4095 0962 03                      		nop
 4096 0963 2E 1E                   		bra	.L239
 4097                             	.L254:
 4098                             	.LBE43:
1197:../src/wolfcrypt/src/pkcs12.c ****             }
 4099                             		.loc 2 1197 17
 4100 0965 03                      		nop
 4101 0966 2E 1B                   		bra	.L239
 4102                             	.L255:
1204:../src/wolfcrypt/src/pkcs12.c ****         }
 4103                             		.loc 2 1204 13
 4104 0968 03                      		nop
 4105 0969 2E 18                   		bra	.L239
 4106                             	.L256:
 4107                             	.LBB44:
1211:../src/wolfcrypt/src/pkcs12.c ****             }
 4108                             		.loc 2 1211 17
 4109 096b 03                      		nop
 4110 096c 2E 15                   		bra	.L239
 4111                             	.L257:
1217:../src/wolfcrypt/src/pkcs12.c ****             }
 4112                             		.loc 2 1217 17
 4113 096e 03                      		nop
 4114 096f 2E 12                   		bra	.L239
 4115                             	.L258:
1232:../src/wolfcrypt/src/pkcs12.c ****                     }
 4116                             		.loc 2 1232 25
 4117 0971 03                      		nop
 4118 0972 2E 0F                   		bra	.L239
 4119                             	.L259:
 4120                             	.LBB40:
1269:../src/wolfcrypt/src/pkcs12.c ****                         }
 4121                             		.loc 2 1269 29
 4122 0974 03                      		nop
 4123 0975 2E 0C                   		bra	.L239
 4124                             	.L260:
1283:../src/wolfcrypt/src/pkcs12.c ****                         }
 4125                             		.loc 2 1283 29
 4126 0977 03                      		nop
 4127 0978 09                      		bra	.L239
 4128                             	.L261:
 4129                             	.LBE40:
 4130                             	.LBB41:
1332:../src/wolfcrypt/src/pkcs12.c ****                     }
 4131                             		.loc 2 1332 25
 4132 0979 03                      		nop
 4133 097a 0F                      		bra	.L239
 4134                             	.L262:
1337:../src/wolfcrypt/src/pkcs12.c ****                     }
 4135                             		.loc 2 1337 25
 4136 097b 03                      		nop
 4137 097c 0D                      		bra	.L239
 4138                             	.L263:
1342:../src/wolfcrypt/src/pkcs12.c ****                     }
 4139                             		.loc 2 1342 25
 4140 097d 03                      		nop
 4141 097e 2E 03                   		bra	.L239
 4142                             	.L264:
1360:../src/wolfcrypt/src/pkcs12.c ****                             }
 4143                             		.loc 2 1360 33
 4144 0980 03                      		nop
 4145                             		.balign 8,3,1
 4146                             	.L239:
 4147                             	.LBE41:
 4148                             	.LBE44:
 4149                             	.LBE45:
1463:../src/wolfcrypt/src/pkcs12.c **** 
1464:../src/wolfcrypt/src/pkcs12.c **** exit_pk12par:
1465:../src/wolfcrypt/src/pkcs12.c **** 
1466:../src/wolfcrypt/src/pkcs12.c ****     if (ret != 0) {
 4150                             		.loc 2 1466 8
 4151 0981 ED A5 04                		mov.L	16[r10], r5
 4152 0984 61 05                   		cmp	#0, r5
 4153 0986 20 54                   		beq	.L244
1467:../src/wolfcrypt/src/pkcs12.c ****         /* failure cleanup */
1468:../src/wolfcrypt/src/pkcs12.c ****         if (*pkey) {
 4154                             		.loc 2 1468 13
 4155 0988 ED A5 1D                		mov.L	116[r10], r5
 4156 098b EC 55                   		mov.L	[r5], r5
 4157                             		.loc 2 1468 12
 4158 098d 61 05                   		cmp	#0, r5
 4159 098f 20 1D                   		beq	.L245
 4160                             	.LBB46:
1469:../src/wolfcrypt/src/pkcs12.c ****             XFREE(*pkey, pkcs12->heap, DYNAMIC_TYPE_PUBLIC_KEY);
 4161                             		.loc 2 1469 13
 4162 0991 ED A5 1D                		mov.L	116[r10], r5
 4163 0994 EC 55                   		mov.L	[r5], r5
 4164 0996 E7 A5 10                		mov.L	r5, 64[r10]
 4165 0999 ED A5 10                		mov.L	64[r10], r5
 4166 099c 61 05                   		cmp	#0, r5
 4167 099e 10                      		beq	.L246
 4168                             		.loc 2 1469 13 is_stmt 0 discriminator 1
 4169 099f ED A1 10                		mov.L	64[r10], r1
 4170 09a2 05 00 00 00             		bsr	_wolfSSL_Free
 4171                             	.L246:
 4172                             	.LBE46:
1470:../src/wolfcrypt/src/pkcs12.c ****             *pkey = NULL;
 4173                             		.loc 2 1470 19 is_stmt 1
 4174 09a6 ED A5 1D                		mov.L	116[r10], r5
 4175 09a9 F8 56 00                		mov.L	#0, [r5]
 4176                             	.L245:
1471:../src/wolfcrypt/src/pkcs12.c ****         }
1472:../src/wolfcrypt/src/pkcs12.c ****         if (buf) {
 4177                             		.loc 2 1472 12
 4178 09ac ED A5 02                		mov.L	8[r10], r5
 4179 09af 61 05                   		cmp	#0, r5
 4180 09b1 20 19                   		beq	.L247
 4181                             	.LBB47:
1473:../src/wolfcrypt/src/pkcs12.c ****             XFREE(buf, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 4182                             		.loc 2 1473 13
 4183 09b3 ED A5 02                		mov.L	8[r10], r5
 4184 09b6 E7 A5 11                		mov.L	r5, 68[r10]
 4185 09b9 ED A5 11                		mov.L	68[r10], r5
 4186 09bc 61 05                   		cmp	#0, r5
 4187 09be 10                      		beq	.L248
 4188                             		.loc 2 1473 13 is_stmt 0 discriminator 1
 4189 09bf ED A1 11                		mov.L	68[r10], r1
 4190 09c2 05 00 00 00             		bsr	_wolfSSL_Free
 4191                             	.L248:
 4192                             	.LBE47:
1474:../src/wolfcrypt/src/pkcs12.c ****             buf = NULL;
 4193                             		.loc 2 1474 17 is_stmt 1
 4194 09c6 F9 A6 02 00             		mov.L	#0, 8[r10]
 4195                             	.L247:
1475:../src/wolfcrypt/src/pkcs12.c ****         }
1476:../src/wolfcrypt/src/pkcs12.c **** 
1477:../src/wolfcrypt/src/pkcs12.c ****         wc_FreeCertList(certList, pkcs12->heap);
 4196                             		.loc 2 1477 9
 4197 09ca ED A4 12                		mov.L	72[r10], r4
 4198 09cd ED A5 1B                		mov.L	108[r10], r5
 4199 09d0 EC 55                   		mov.L	[r5], r5
 4200 09d2 EF 52                   		mov.L	r5, r2
 4201 09d4 EF 41                   		mov.L	r4, r1
 4202 09d6 05 00 00 00             		bsr	_wc_FreeCertList
 4203                             	.L244:
1478:../src/wolfcrypt/src/pkcs12.c ****     }
1479:../src/wolfcrypt/src/pkcs12.c **** 
1480:../src/wolfcrypt/src/pkcs12.c ****     return ret;
 4204                             		.loc 2 1480 12
 4205 09da ED A5 04                		mov.L	16[r10], r5
 4206                             		.balign 8,3,1
 4207                             	.L249:
1481:../src/wolfcrypt/src/pkcs12.c **** }
 4208                             		.loc 2 1481 1 discriminator 2
 4209 09dd EF 51                   		mov.L	r5, r1
 4210 09df 72 00 90 00             		add	#0x90, r0
 4211 09e3 7E B6                   		pop	r6
 4212 09e5 7E BA                   		pop	r10
 4213 09e7 02                      		rts
 4214                             	.LFE55:
 4216                             		.section C,"a",@progbits
 4217 04c5 00 00 00                		.p2align 2
 4218                             	.LC39:
 4219 04c8 63 72 65 61 74 69 6E 67 		.string	"creating PKCS12 Key Bag"
 4219      20 50 4B 43 53 31 32 20 
 4219      4B 65 79 20 42 61 67 00 
 4220                             	.LC40:
 4221 04e0 63 72 65 61 74 69 6E 67 		.string	"creating PKCS12 Shrouded Key Bag"
 4221      20 50 4B 43 53 31 32 20 
 4221      53 68 72 6F 75 64 65 64 
 4221      20 4B 65 79 20 42 61 67 
 4221      00 
 4222                             		.section	.text.wc_PKCS12_shroud_key,"ax",@progbits
 4224                             	_wc_PKCS12_shroud_key:
 4225                             	.LFB56:
1482:../src/wolfcrypt/src/pkcs12.c **** 
1483:../src/wolfcrypt/src/pkcs12.c **** 
1484:../src/wolfcrypt/src/pkcs12.c **** /* Helper function to shroud keys.
1485:../src/wolfcrypt/src/pkcs12.c ****  *
1486:../src/wolfcrypt/src/pkcs12.c ****  * pkcs12 structure to use with shrouding key
1487:../src/wolfcrypt/src/pkcs12.c ****  * rng    random number generator used
1488:../src/wolfcrypt/src/pkcs12.c ****  * out    buffer to hold results
1489:../src/wolfcrypt/src/pkcs12.c ****  * outSz  size of out buffer
1490:../src/wolfcrypt/src/pkcs12.c ****  * key    key that is going to be shrouded
1491:../src/wolfcrypt/src/pkcs12.c ****  * keySz  size of key buffer
1492:../src/wolfcrypt/src/pkcs12.c ****  * vAlgo  algorithm version
1493:../src/wolfcrypt/src/pkcs12.c ****  * pass   password to use
1494:../src/wolfcrypt/src/pkcs12.c ****  * passSz size of pass buffer
1495:../src/wolfcrypt/src/pkcs12.c ****  * itt    number of iterations
1496:../src/wolfcrypt/src/pkcs12.c ****  *
1497:../src/wolfcrypt/src/pkcs12.c ****  * returns the size of the shrouded key on success
1498:../src/wolfcrypt/src/pkcs12.c ****  */
1499:../src/wolfcrypt/src/pkcs12.c **** static int wc_PKCS12_shroud_key(WC_PKCS12* pkcs12, WC_RNG* rng,
1500:../src/wolfcrypt/src/pkcs12.c ****         byte* out, word32* outSz, byte* key, word32 keySz, int vAlgo,
1501:../src/wolfcrypt/src/pkcs12.c ****         const char* pass, int passSz, int itt)
1502:../src/wolfcrypt/src/pkcs12.c **** {
 4226                             		.loc 2 1502 1
 4227 0000 7E AA                   		push.l	r10
 4228                             	.LCFI36:
 4229 0002 7E A6                   		push.l	r6
 4230                             	.LCFI37:
 4231 0004 71 0A B0                		add	#-80, r0, r10
 4232                             	.LCFI38:
 4233 0007 71 A0 DC                		add	#-36, r10, r0
 4234                             	.LCFI39:
 4235 000a 75 46 5C                		mov.L	#0x5c, r6
 4236 000d 4B A6                   		add	r10, r6
 4237 000f E7 A1 0A                		mov.L	r1, 40[r10]
 4238 0012 E7 A2 0B                		mov.L	r2, 44[r10]
 4239 0015 E7 A3 0C                		mov.L	r3, 48[r10]
 4240 0018 E7 A4 0D                		mov.L	r4, 52[r10]
1503:../src/wolfcrypt/src/pkcs12.c ****     void* heap;
1504:../src/wolfcrypt/src/pkcs12.c ****     word32 tmpIdx = 0;
 4241                             		.loc 2 1504 12
 4242 001b F8 A6 00                		mov.L	#0, [r10]
1505:../src/wolfcrypt/src/pkcs12.c ****     int vPKCS     = 1; /* PKCS#12 default set to 1 */
 4243                             		.loc 2 1505 9
 4244 001e F9 A6 01 01             		mov.L	#1, 4[r10]
1506:../src/wolfcrypt/src/pkcs12.c ****     word32 sz;
1507:../src/wolfcrypt/src/pkcs12.c ****     word32 totalSz = 0;
 4245                             		.loc 2 1507 12
 4246 0022 F9 A6 04 00             		mov.L	#0, 16[r10]
1508:../src/wolfcrypt/src/pkcs12.c ****     int ret;
1509:../src/wolfcrypt/src/pkcs12.c ****     byte* pkcs8Key = NULL;
 4247                             		.loc 2 1509 11
 4248 0026 F9 A6 03 00             		mov.L	#0, 12[r10]
1510:../src/wolfcrypt/src/pkcs12.c **** 
1511:../src/wolfcrypt/src/pkcs12.c ****     if (outSz == NULL || pkcs12 == NULL || rng == NULL || key == NULL ||
 4249                             		.loc 2 1511 8
 4250 002a ED A5 0D                		mov.L	52[r10], r5
 4251 002d 61 05                   		cmp	#0, r5
 4252 002f 20 1A                   		beq	.L267
 4253                             		.loc 2 1511 23 discriminator 1
 4254 0031 ED A5 0A                		mov.L	40[r10], r5
 4255 0034 61 05                   		cmp	#0, r5
 4256 0036 20 13                   		beq	.L267
 4257                             		.loc 2 1511 41 discriminator 2
 4258 0038 ED A5 0B                		mov.L	44[r10], r5
 4259 003b 61 05                   		cmp	#0, r5
 4260 003d 20 0C                   		beq	.L267
 4261                             		.loc 2 1511 56 discriminator 3
 4262 003f EC 65                   		mov.L	[r6], r5
 4263 0041 61 05                   		cmp	#0, r5
 4264 0043 16                      		beq	.L267
 4265                             		.loc 2 1511 71 discriminator 4
 4266 0044 A8 ED                   		mov.L	12[r6], r5
 4267 0046 61 05                   		cmp	#0, r5
 4268 0048 18                      		bne	.L268
 4269                             		.balign 8,3,2
 4270                             	.L267:
1512:../src/wolfcrypt/src/pkcs12.c ****             pass == NULL) {
1513:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 4271                             		.loc 2 1513 16
 4272 0049 FB 5A 53 FF             		mov.L	#-173, r5
 4273 004d 38 6E 01                		bra	.L278
 4274                             	.L268:
1514:../src/wolfcrypt/src/pkcs12.c ****     }
1515:../src/wolfcrypt/src/pkcs12.c **** 
1516:../src/wolfcrypt/src/pkcs12.c ****     heap = wc_PKCS12_GetHeap(pkcs12);
 4275                             		.loc 2 1516 12
 4276 0050 ED A1 0A                		mov.L	40[r10], r1
 4277 0053 05 00 00 00             		bsr	_wc_PKCS12_GetHeap
 4278 0057 E7 A1 05                		mov.L	r1, 20[r10]
1517:../src/wolfcrypt/src/pkcs12.c **** 
1518:../src/wolfcrypt/src/pkcs12.c ****     /* check if trying to get size */
1519:../src/wolfcrypt/src/pkcs12.c ****     if (out != NULL) {
 4279                             		.loc 2 1519 8
 4280 005a ED A5 0C                		mov.L	48[r10], r5
 4281 005d 61 05                   		cmp	#0, r5
 4282 005f 20 1E                   		beq	.L270
1520:../src/wolfcrypt/src/pkcs12.c ****         tmpIdx += MAX_LENGTH_SZ + 1; /* save room for length and tag (+1) */
 4283                             		.loc 2 1520 16
 4284 0061 EC A5                   		mov.L	[r10], r5
 4285 0063 62 55                   		add	#5, r5
 4286 0065 E3 A5                   		mov.L	r5, [r10]
1521:../src/wolfcrypt/src/pkcs12.c ****         sz = *outSz - tmpIdx;
 4287                             		.loc 2 1521 14
 4288 0067 ED A5 0D                		mov.L	52[r10], r5
 4289 006a EC 54                   		mov.L	[r5], r4
 4290                             		.loc 2 1521 21
 4291 006c EC A5                   		mov.L	[r10], r5
 4292 006e FF 05 54                		sub	r5, r4, r5
 4293                             		.loc 2 1521 12
 4294 0071 E7 A5 06                		mov.L	r5, 24[r10]
1522:../src/wolfcrypt/src/pkcs12.c ****         pkcs8Key = out + tmpIdx;
 4295                             		.loc 2 1522 18
 4296 0074 ED A5 0C                		mov.L	48[r10], r5
 4297 0077 06 88 A5                		add	[r10].L, r5
 4298 007a E7 A5 03                		mov.L	r5, 12[r10]
 4299                             	.L270:
1523:../src/wolfcrypt/src/pkcs12.c ****     }
1524:../src/wolfcrypt/src/pkcs12.c **** 
1525:../src/wolfcrypt/src/pkcs12.c ****     /* case of no encryption */
1526:../src/wolfcrypt/src/pkcs12.c ****     if (vAlgo < 0) {
 4300                             		.loc 2 1526 8
 4301 007d A8 E5                   		mov.L	8[r6], r5
 4302 007f 61 05                   		cmp	#0, r5
 4303 0081 28 62                   		bge	.L271
 4304                             	.LBB48:
1527:../src/wolfcrypt/src/pkcs12.c ****         const byte* curveOID = NULL;
 4305                             		.loc 2 1527 21
 4306 0083 F9 A6 07 00             		mov.L	#0, 28[r10]
1528:../src/wolfcrypt/src/pkcs12.c ****         word32 oidSz = 0;
 4307                             		.loc 2 1528 16
 4308 0087 F9 A6 08 00             		mov.L	#0, 32[r10]
1529:../src/wolfcrypt/src/pkcs12.c ****         int algoID;
1530:../src/wolfcrypt/src/pkcs12.c **** 
1531:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("creating PKCS12 Key Bag");
 4309                             		.loc 2 1531 9
 4310 008b FB 12 C8 04 00 00       		mov.L	#.LC39, r1
 4311 0091 05 00 00 00             		bsr	_WOLFSSL_MSG
1532:../src/wolfcrypt/src/pkcs12.c **** 
1533:../src/wolfcrypt/src/pkcs12.c ****         /* check key type and get OID if ECC */
1534:../src/wolfcrypt/src/pkcs12.c ****         if ((ret = wc_GetKeyOID(key, keySz, &curveOID, &oidSz, &algoID, heap))
 4312                             		.loc 2 1534 20
 4313 0095 71 A4 20                		add	#32, r10, r4
 4314 0098 71 A5 1C                		add	#28, r10, r5
 4315 009b ED A3 05                		mov.L	20[r10], r3
 4316 009e A0 0B                   		mov.L	r3, 4[r0]
 4317 00a0 71 A3 24                		add	#36, r10, r3
 4318 00a3 E3 03                   		mov.L	r3, [r0]
 4319 00a5 EF 53                   		mov.L	r5, r3
 4320 00a7 A8 6A                   		mov.L	4[r6], r2
 4321 00a9 EC 61                   		mov.L	[r6], r1
 4322 00ab 05 00 00 00             		bsr	_wc_GetKeyOID
 4323 00af E7 A1 02                		mov.L	r1, 8[r10]
 4324                             		.loc 2 1534 12
 4325 00b2 ED A5 02                		mov.L	8[r10], r5
 4326 00b5 61 05                   		cmp	#0, r5
 4327 00b7 28 08                   		bge	.L272
1535:../src/wolfcrypt/src/pkcs12.c ****                 < 0) {
1536:../src/wolfcrypt/src/pkcs12.c ****             return ret;
 4328                             		.loc 2 1536 20
 4329 00b9 ED A5 02                		mov.L	8[r10], r5
 4330 00bc 38 FF 00                		bra	.L278
 4331                             	.L272:
1537:../src/wolfcrypt/src/pkcs12.c ****         }
1538:../src/wolfcrypt/src/pkcs12.c **** 
1539:../src/wolfcrypt/src/pkcs12.c ****         /* PKCS#8 wrapping around key */
1540:../src/wolfcrypt/src/pkcs12.c ****         ret = wc_CreatePKCS8Key(pkcs8Key, &sz, key, keySz, algoID, curveOID,
 4332                             		.loc 2 1540 15
 4333 00bf ED A4 09                		mov.L	36[r10], r4
 4334 00c2 ED A3 07                		mov.L	28[r10], r3
 4335 00c5 ED A2 08                		mov.L	32[r10], r2
 4336 00c8 71 A5 18                		add	#24, r10, r5
 4337 00cb A0 82                   		mov.L	r2, 8[r0]
 4338 00cd A0 0B                   		mov.L	r3, 4[r0]
 4339 00cf E3 04                   		mov.L	r4, [r0]
 4340 00d1 A8 6C                   		mov.L	4[r6], r4
 4341 00d3 EC 63                   		mov.L	[r6], r3
 4342 00d5 EF 52                   		mov.L	r5, r2
 4343 00d7 ED A1 03                		mov.L	12[r10], r1
 4344 00da 05 00 00 00             		bsr	_wc_CreatePKCS8Key
 4345 00de E7 A1 02                		mov.L	r1, 8[r10]
 4346                             	.LBE48:
 4347 00e1 2E 50                   		bra	.L273
 4348                             	.L271:
1541:../src/wolfcrypt/src/pkcs12.c ****                 oidSz);
1542:../src/wolfcrypt/src/pkcs12.c ****     }
1543:../src/wolfcrypt/src/pkcs12.c ****     else {
1544:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("creating PKCS12 Shrouded Key Bag");
 4349                             		.loc 2 1544 9
 4350 00e3 FB 12 E0 04 00 00       		mov.L	#.LC40, r1
 4351 00e9 05 00 00 00             		bsr	_WOLFSSL_MSG
1545:../src/wolfcrypt/src/pkcs12.c **** 
1546:../src/wolfcrypt/src/pkcs12.c ****         if (vAlgo == PBE_SHA1_DES) {
 4352                             		.loc 2 1546 12
 4353 00ed A8 E5                   		mov.L	8[r6], r5
 4354 00ef 61 25                   		cmp	#2, r5
 4355 00f1 18                      		bne	.L274
1547:../src/wolfcrypt/src/pkcs12.c ****             vPKCS = PKCS5;
 4356                             		.loc 2 1547 19
 4357 00f2 F9 A6 01 05             		mov.L	#5, 4[r10]
1548:../src/wolfcrypt/src/pkcs12.c ****             vAlgo = 10;
 4358                             		.loc 2 1548 19
 4359 00f6 3E 62 0A                		mov.L	#10, 8[r6]
 4360                             	.L274:
1549:../src/wolfcrypt/src/pkcs12.c ****         }
1550:../src/wolfcrypt/src/pkcs12.c **** 
1551:../src/wolfcrypt/src/pkcs12.c ****         ret = UnTraditionalEnc(key, keySz, pkcs8Key, &sz, pass, passSz,
 4361                             		.loc 2 1551 15
 4362 00f9 71 A5 18                		add	#24, r10, r5
 4363 00fc ED A4 05                		mov.L	20[r10], r4
 4364 00ff A2 04                   		mov.L	r4, 32[r0]
 4365 0101 ED A4 0B                		mov.L	44[r10], r4
 4366 0104 A1 8C                   		mov.L	r4, 28[r0]
 4367 0106 A9 6C                   		mov.L	20[r6], r4
 4368 0108 A1 84                   		mov.L	r4, 24[r0]
 4369 010a 3E 05 00                		mov.L	#0, 20[r0]
 4370 010d 3E 04 00                		mov.L	#0, 16[r0]
 4371 0110 A8 E4                   		mov.L	8[r6], r4
 4372 0112 A0 8C                   		mov.L	r4, 12[r0]
 4373 0114 ED A4 01                		mov.L	4[r10], r4
 4374 0117 A0 84                   		mov.L	r4, 8[r0]
 4375 0119 A9 64                   		mov.L	16[r6], r4
 4376 011b A0 0C                   		mov.L	r4, 4[r0]
 4377 011d A8 EC                   		mov.L	12[r6], r4
 4378 011f E3 04                   		mov.L	r4, [r0]
 4379 0121 EF 54                   		mov.L	r5, r4
 4380 0123 ED A3 03                		mov.L	12[r10], r3
 4381 0126 A8 6A                   		mov.L	4[r6], r2
 4382 0128 EC 61                   		mov.L	[r6], r1
 4383 012a 05 00 00 00             		bsr	_UnTraditionalEnc
 4384 012e E7 A1 02                		mov.L	r1, 8[r10]
 4385                             	.L273:
1552:../src/wolfcrypt/src/pkcs12.c ****                 vPKCS, vAlgo, NULL, 0, itt, rng, heap);
1553:../src/wolfcrypt/src/pkcs12.c ****     }
1554:../src/wolfcrypt/src/pkcs12.c ****     if (ret == LENGTH_ONLY_E) {
 4386                             		.loc 2 1554 8
 4387 0131 ED A5 02                		mov.L	8[r10], r5
 4388 0134 76 05 36 FF             		cmp	#-202, r5
 4389 0138 21 13                   		bne	.L275
1555:../src/wolfcrypt/src/pkcs12.c ****         *outSz =  sz + MAX_LENGTH_SZ + 1;
 4390                             		.loc 2 1555 38
 4391 013a ED A5 06                		mov.L	24[r10], r5
 4392 013d 71 54 05                		add	#5, r5, r4
 4393                             		.loc 2 1555 16
 4394 0140 ED A5 0D                		mov.L	52[r10], r5
 4395 0143 E3 54                   		mov.L	r4, [r5]
1556:../src/wolfcrypt/src/pkcs12.c ****         return LENGTH_ONLY_E;
 4396                             		.loc 2 1556 16
 4397 0145 FB 5A 36 FF             		mov.L	#-202, r5
 4398 0149 2E 72                   		bra	.L278
 4399                             	.L275:
1557:../src/wolfcrypt/src/pkcs12.c ****     }
1558:../src/wolfcrypt/src/pkcs12.c ****     if (ret < 0) {
 4400                             		.loc 2 1558 8
 4401 014b ED A5 02                		mov.L	8[r10], r5
 4402 014e 61 05                   		cmp	#0, r5
 4403 0150 28 07                   		bge	.L276
1559:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 4404                             		.loc 2 1559 16
 4405 0152 ED A5 02                		mov.L	8[r10], r5
 4406 0155 2E 66                   		bra	.L278
 4407                             	.L276:
1560:../src/wolfcrypt/src/pkcs12.c ****     }
1561:../src/wolfcrypt/src/pkcs12.c **** 
1562:../src/wolfcrypt/src/pkcs12.c ****     totalSz += ret;
 4408                             		.loc 2 1562 13
 4409 0157 ED A5 02                		mov.L	8[r10], r5
 4410 015a ED A4 04                		mov.L	16[r10], r4
 4411 015d 4B 45                   		add	r4, r5
 4412 015f E7 A5 04                		mov.L	r5, 16[r10]
1563:../src/wolfcrypt/src/pkcs12.c **** 
1564:../src/wolfcrypt/src/pkcs12.c ****     /* out should not be null at this point but check before writing */
1565:../src/wolfcrypt/src/pkcs12.c ****     if (out == NULL) {
 4413                             		.loc 2 1565 8
 4414 0162 ED A5 0C                		mov.L	48[r10], r5
 4415 0165 61 05                   		cmp	#0, r5
 4416 0167 1F                      		bne	.L277
1566:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 4417                             		.loc 2 1566 16
 4418 0168 FB 5A 53 FF             		mov.L	#-173, r5
 4419 016c 2E 4F                   		bra	.L278
 4420                             	.L277:
1567:../src/wolfcrypt/src/pkcs12.c ****     }
1568:../src/wolfcrypt/src/pkcs12.c **** 
1569:../src/wolfcrypt/src/pkcs12.c ****     /* rewind index and set tag and length */
1570:../src/wolfcrypt/src/pkcs12.c ****     tmpIdx -= MAX_LENGTH_SZ + 1;
 4421                             		.loc 2 1570 12
 4422 016e EC A5                   		mov.L	[r10], r5
 4423 0170 60 55                   		sub	#5, r5
 4424 0172 E3 A5                   		mov.L	r5, [r10]
1571:../src/wolfcrypt/src/pkcs12.c ****     sz = SetExplicit(0, ret, out + tmpIdx);
 4425                             		.loc 2 1571 10
 4426 0174 ED A4 02                		mov.L	8[r10], r4
 4427 0177 ED A5 0C                		mov.L	48[r10], r5
 4428 017a 06 88 A5                		add	[r10].L, r5
 4429 017d EF 53                   		mov.L	r5, r3
 4430 017f EF 42                   		mov.L	r4, r2
 4431 0181 66 01                   		mov	#0, r1
 4432 0183 05 00 00 00             		bsr	_SetExplicit
 4433 0187 EF 15                   		mov.L	r1, r5
 4434                             		.loc 2 1571 8
 4435 0189 E7 A5 06                		mov.L	r5, 24[r10]
1572:../src/wolfcrypt/src/pkcs12.c ****     tmpIdx += sz; totalSz += sz;
 4436                             		.loc 2 1572 12
 4437 018c ED A5 06                		mov.L	24[r10], r5
 4438 018f EC A4                   		mov.L	[r10], r4
 4439 0191 4B 45                   		add	r4, r5
 4440 0193 E3 A5                   		mov.L	r5, [r10]
 4441                             		.loc 2 1572 27
 4442 0195 ED A5 06                		mov.L	24[r10], r5
 4443 0198 ED A4 04                		mov.L	16[r10], r4
 4444 019b 4B 45                   		add	r4, r5
 4445 019d E7 A5 04                		mov.L	r5, 16[r10]
1573:../src/wolfcrypt/src/pkcs12.c ****     XMEMMOVE(out + tmpIdx, out + MAX_LENGTH_SZ + 1, ret);
 4446                             		.loc 2 1573 5
 4447 01a0 ED A5 0C                		mov.L	48[r10], r5
 4448 01a3 EF 54                   		mov.L	r5, r4
 4449 01a5 06 88 A4                		add	[r10].L, r4
 4450 01a8 ED A5 0C                		mov.L	48[r10], r5
 4451 01ab 62 55                   		add	#5, r5
 4452 01ad ED A3 02                		mov.L	8[r10], r3
 4453 01b0 EF 52                   		mov.L	r5, r2
 4454 01b2 EF 41                   		mov.L	r4, r1
 4455 01b4 05 00 00 00             		bsr	_memmove
1574:../src/wolfcrypt/src/pkcs12.c **** 
1575:../src/wolfcrypt/src/pkcs12.c ****     return totalSz;
 4456                             		.loc 2 1575 12
 4457 01b8 ED A5 04                		mov.L	16[r10], r5
 4458                             		.balign 8,3,1
 4459                             	.L278:
1576:../src/wolfcrypt/src/pkcs12.c **** }
 4460                             		.loc 2 1576 1 discriminator 2
 4461 01bb EF 51                   		mov.L	r5, r1
 4462 01bd 71 00 74                		add	#0x74, r0
 4463 01c0 7E B6                   		pop	r6
 4464 01c2 7E BA                   		pop	r10
 4465 01c4 02                      		rts
 4466                             	.LFE56:
 4468 01c5 FC 13 00                		.section	.text.wc_PKCS12_create_key_bag,"ax",@progbits
 4470                             	_wc_PKCS12_create_key_bag:
 4471                             	.LFB57:
1577:../src/wolfcrypt/src/pkcs12.c **** 
1578:../src/wolfcrypt/src/pkcs12.c **** 
1579:../src/wolfcrypt/src/pkcs12.c **** /* Helper function to create key bag.
1580:../src/wolfcrypt/src/pkcs12.c ****  *
1581:../src/wolfcrypt/src/pkcs12.c ****  * pkcs12 structure to use with key bag
1582:../src/wolfcrypt/src/pkcs12.c ****  * rng    random number generator used
1583:../src/wolfcrypt/src/pkcs12.c ****  * out    buffer to hold results
1584:../src/wolfcrypt/src/pkcs12.c ****  * outSz  size of out buffer
1585:../src/wolfcrypt/src/pkcs12.c ****  * key    key that is going into key bag
1586:../src/wolfcrypt/src/pkcs12.c ****  * keySz  size of key buffer
1587:../src/wolfcrypt/src/pkcs12.c ****  * algo   algorithm version
1588:../src/wolfcrypt/src/pkcs12.c ****  * iter   number of iterations
1589:../src/wolfcrypt/src/pkcs12.c ****  * pass   password to use
1590:../src/wolfcrypt/src/pkcs12.c ****  * passSz size of pass buffer
1591:../src/wolfcrypt/src/pkcs12.c ****  *
1592:../src/wolfcrypt/src/pkcs12.c ****  * returns the size of the key bag on success
1593:../src/wolfcrypt/src/pkcs12.c ****  */
1594:../src/wolfcrypt/src/pkcs12.c **** static int wc_PKCS12_create_key_bag(WC_PKCS12* pkcs12, WC_RNG* rng,
1595:../src/wolfcrypt/src/pkcs12.c ****         byte* out, word32* outSz, byte* key, word32 keySz, int algo, int iter,
1596:../src/wolfcrypt/src/pkcs12.c ****         char* pass, int passSz)
1597:../src/wolfcrypt/src/pkcs12.c **** {
 4472                             		.loc 2 1597 1
 4473 0000 7E AA                   		push.l	r10
 4474                             	.LCFI40:
 4475 0002 7E A6                   		push.l	r6
 4476                             	.LCFI41:
 4477 0004 71 0A AC                		add	#-84, r0, r10
 4478                             	.LCFI42:
 4479 0007 71 A0 E8                		add	#-24, r10, r0
 4480                             	.LCFI43:
 4481 000a 75 46 60                		mov.L	#0x60, r6
 4482 000d 4B A6                   		add	r10, r6
 4483 000f E7 A1 0B                		mov.L	r1, 44[r10]
 4484 0012 E7 A2 0C                		mov.L	r2, 48[r10]
 4485 0015 E7 A3 0D                		mov.L	r3, 52[r10]
 4486 0018 E7 A4 0E                		mov.L	r4, 56[r10]
1598:../src/wolfcrypt/src/pkcs12.c ****     void* heap;
1599:../src/wolfcrypt/src/pkcs12.c ****     byte* tmp;
1600:../src/wolfcrypt/src/pkcs12.c ****     word32 length  = 0;
 4487                             		.loc 2 1600 12
 4488 001b F9 A6 0A 00             		mov.L	#0, 40[r10]
1601:../src/wolfcrypt/src/pkcs12.c ****     word32 idx     = 0;
 4489                             		.loc 2 1601 12
 4490 001f F8 A6 00                		mov.L	#0, [r10]
1602:../src/wolfcrypt/src/pkcs12.c ****     word32 totalSz = 0;
 4491                             		.loc 2 1602 12
 4492 0022 F9 A6 01 00             		mov.L	#0, 4[r10]
1603:../src/wolfcrypt/src/pkcs12.c ****     word32 sz;
1604:../src/wolfcrypt/src/pkcs12.c ****     word32 i;
1605:../src/wolfcrypt/src/pkcs12.c ****     word32 tmpSz;
1606:../src/wolfcrypt/src/pkcs12.c ****     int ret;
1607:../src/wolfcrypt/src/pkcs12.c **** 
1608:../src/wolfcrypt/src/pkcs12.c ****     /* get max size for shrouded key */
1609:../src/wolfcrypt/src/pkcs12.c ****     ret =  wc_PKCS12_shroud_key(pkcs12, rng, NULL, &length, key, keySz,
 4493                             		.loc 2 1609 12
 4494 0026 71 A5 28                		add	#40, r10, r5
 4495 0029 A8 EC                   		mov.L	12[r6], r4
 4496 002b A1 0C                   		mov.L	r4, 20[r0]
 4497 002d A9 6C                   		mov.L	20[r6], r4
 4498 002f A1 04                   		mov.L	r4, 16[r0]
 4499 0031 A9 64                   		mov.L	16[r6], r4
 4500 0033 A0 8C                   		mov.L	r4, 12[r0]
 4501 0035 A8 E4                   		mov.L	8[r6], r4
 4502 0037 A0 84                   		mov.L	r4, 8[r0]
 4503 0039 A8 6C                   		mov.L	4[r6], r4
 4504 003b A0 0C                   		mov.L	r4, 4[r0]
 4505 003d EC 64                   		mov.L	[r6], r4
 4506 003f E3 04                   		mov.L	r4, [r0]
 4507 0041 EF 54                   		mov.L	r5, r4
 4508 0043 66 03                   		mov.L	#0, r3
 4509 0045 ED A2 0C                		mov.L	48[r10], r2
 4510 0048 ED A1 0B                		mov.L	44[r10], r1
 4511 004b 05 00 00 00             		bsr	_wc_PKCS12_shroud_key
 4512 004f E7 A1 03                		mov.L	r1, 12[r10]
1610:../src/wolfcrypt/src/pkcs12.c ****             algo, pass, passSz, iter);
1611:../src/wolfcrypt/src/pkcs12.c ****     if (ret != LENGTH_ONLY_E && ret < 0) {
 4513                             		.loc 2 1611 8
 4514 0052 ED A5 03                		mov.L	12[r10], r5
 4515 0055 76 05 36 FF             		cmp	#-202, r5
 4516 0059 20 0F                   		beq	.L280
 4517                             		.loc 2 1611 30 discriminator 1
 4518 005b ED A5 03                		mov.L	12[r10], r5
 4519 005e 61 05                   		cmp	#0, r5
 4520 0060 28 08                   		bge	.L280
1612:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 4521                             		.loc 2 1612 16
 4522 0062 ED A5 03                		mov.L	12[r10], r5
 4523 0065 38 DF 01                		bra	.L293
 4524                             	.L280:
1613:../src/wolfcrypt/src/pkcs12.c ****     }
1614:../src/wolfcrypt/src/pkcs12.c **** 
1615:../src/wolfcrypt/src/pkcs12.c ****     if (out == NULL) {
 4525                             		.loc 2 1615 8
 4526 0068 ED A5 0D                		mov.L	52[r10], r5
 4527 006b 61 05                   		cmp	#0, r5
 4528 006d 21 14                   		bne	.L282
1616:../src/wolfcrypt/src/pkcs12.c ****         *outSz = MAX_SEQ_SZ + WC_PKCS12_DATA_OBJ_SZ + 1 + MAX_LENGTH_SZ +
 4529                             		.loc 2 1616 73
 4530 006f ED A5 0A                		mov.L	40[r10], r5
 4531 0072 71 54 15                		add	#21, r5, r4
 4532                             		.loc 2 1616 16
 4533 0075 ED A5 0E                		mov.L	56[r10], r5
 4534 0078 E3 54                   		mov.L	r4, [r5]
1617:../src/wolfcrypt/src/pkcs12.c ****             length;
1618:../src/wolfcrypt/src/pkcs12.c ****         return LENGTH_ONLY_E;
 4535                             		.loc 2 1618 16
 4536 007a FB 5A 36 FF             		mov.L	#-202, r5
 4537 007e 38 C6 01                		bra	.L293
 4538                             	.L282:
1619:../src/wolfcrypt/src/pkcs12.c ****     }
1620:../src/wolfcrypt/src/pkcs12.c **** 
1621:../src/wolfcrypt/src/pkcs12.c ****     heap = wc_PKCS12_GetHeap(pkcs12);
 4539                             		.loc 2 1621 12
 4540 0081 ED A1 0B                		mov.L	44[r10], r1
 4541 0084 05 00 00 00             		bsr	_wc_PKCS12_GetHeap
 4542 0088 E7 A1 04                		mov.L	r1, 16[r10]
1622:../src/wolfcrypt/src/pkcs12.c **** 
1623:../src/wolfcrypt/src/pkcs12.c ****     /* leave room for sequence */
1624:../src/wolfcrypt/src/pkcs12.c ****     idx += MAX_SEQ_SZ;
 4543                             		.loc 2 1624 9
 4544 008b EC A5                   		mov.L	[r10], r5
 4545 008d 62 55                   		add	#5, r5
 4546 008f E3 A5                   		mov.L	r5, [r10]
1625:../src/wolfcrypt/src/pkcs12.c **** 
1626:../src/wolfcrypt/src/pkcs12.c ****     if (algo < 0) { /* not encrypted */
 4547                             		.loc 2 1626 8
 4548 0091 A8 E5                   		mov.L	8[r6], r5
 4549 0093 61 05                   		cmp	#0, r5
 4550 0095 28 75                   		bge	.L283
1627:../src/wolfcrypt/src/pkcs12.c ****         out[idx++] = ASN_OBJECT_ID; totalSz++;
 4551                             		.loc 2 1627 16
 4552 0097 EC A5                   		mov.L	[r10], r5
 4553 0099 71 54 01                		add	#1, r5, r4
 4554 009c E3 A4                   		mov.L	r4, [r10]
 4555                             		.loc 2 1627 12
 4556 009e ED A4 0D                		mov.L	52[r10], r4
 4557 00a1 4B 45                   		add	r4, r5
 4558                             		.loc 2 1627 20
 4559 00a3 F8 54 06                		mov.B	#6, [r5]
 4560                             		.loc 2 1627 44
 4561 00a6 ED A5 01                		mov.L	4[r10], r5
 4562 00a9 62 15                   		add	#1, r5
 4563 00ab E7 A5 01                		mov.L	r5, 4[r10]
1628:../src/wolfcrypt/src/pkcs12.c ****         sz = SetLength(sizeof(WC_PKCS12_KeyBag_OID), out + idx);
 4564                             		.loc 2 1628 14
 4565 00ae ED A5 0D                		mov.L	52[r10], r5
 4566 00b1 06 88 A5                		add	[r10].L, r5
 4567 00b4 EF 52                   		mov.L	r5, r2
 4568 00b6 66 B1                   		mov.L	#11, r1
 4569 00b8 05 00 00 00             		bsr	_SetLength
 4570 00bc E7 A1 05                		mov.L	r1, 20[r10]
1629:../src/wolfcrypt/src/pkcs12.c ****         idx += sz; totalSz += sz;
 4571                             		.loc 2 1629 13
 4572 00bf EC A5                   		mov.L	[r10], r5
 4573 00c1 06 89 A5 05             		add	20[r10].L, r5
 4574 00c5 E3 A5                   		mov.L	r5, [r10]
 4575                             		.loc 2 1629 28
 4576 00c7 ED A5 01                		mov.L	4[r10], r5
 4577 00ca 06 89 A5 05             		add	20[r10].L, r5
 4578 00ce E7 A5 01                		mov.L	r5, 4[r10]
1630:../src/wolfcrypt/src/pkcs12.c ****         for (i = 0; i < sizeof(WC_PKCS12_KeyBag_OID); i++) {
 4579                             		.loc 2 1630 16
 4580 00d1 F9 A6 02 00             		mov.L	#0, 8[r10]
 4581                             		.loc 2 1630 9
 4582 00d5 2E 2C                   		bra	.L284
 4583                             	.L285:
1631:../src/wolfcrypt/src/pkcs12.c ****             out[idx++] = WC_PKCS12_KeyBag_OID[i]; totalSz++;
 4584                             		.loc 2 1631 20 discriminator 3
 4585 00d7 EC A5                   		mov.L	[r10], r5
 4586 00d9 71 54 01                		add	#1, r5, r4
 4587 00dc E3 A4                   		mov.L	r4, [r10]
 4588                             		.loc 2 1631 16 discriminator 3
 4589 00de ED A4 0D                		mov.L	52[r10], r4
 4590 00e1 4B 45                   		add	r4, r5
 4591                             		.loc 2 1631 46 discriminator 3
 4592 00e3 FB 42 00 00 00 00       		mov.L	#_WC_PKCS12_KeyBag_OID, r4
 4593 00e9 06 89 A4 02             		add	8[r10].L, r4
 4594 00ed CC 44                   		mov.B	[r4], r4
 4595                             		.loc 2 1631 24 discriminator 3
 4596 00ef C3 54                   		mov.B	r4, [r5]
 4597                             		.loc 2 1631 58 discriminator 3
 4598 00f1 ED A5 01                		mov.L	4[r10], r5
 4599 00f4 62 15                   		add	#1, r5
 4600 00f6 E7 A5 01                		mov.L	r5, 4[r10]
1630:../src/wolfcrypt/src/pkcs12.c ****         for (i = 0; i < sizeof(WC_PKCS12_KeyBag_OID); i++) {
 4601                             		.loc 2 1630 56 discriminator 3
 4602 00f9 ED A5 02                		mov.L	8[r10], r5
 4603 00fc 62 15                   		add	#1, r5
 4604 00fe E7 A5 02                		mov.L	r5, 8[r10]
 4605                             	.L284:
1630:../src/wolfcrypt/src/pkcs12.c ****         for (i = 0; i < sizeof(WC_PKCS12_KeyBag_OID); i++) {
 4606                             		.loc 2 1630 9 discriminator 1
 4607 0101 ED A5 02                		mov.L	8[r10], r5
 4608 0104 61 A5                   		cmp	#10, r5
 4609 0106 25 D1                   		bleu	.L285
 4610 0108 2E 73                   		bra	.L286
 4611                             	.L283:
1632:../src/wolfcrypt/src/pkcs12.c ****         }
1633:../src/wolfcrypt/src/pkcs12.c ****     }
1634:../src/wolfcrypt/src/pkcs12.c ****     else { /* encrypted */
1635:../src/wolfcrypt/src/pkcs12.c ****         out[idx++] = ASN_OBJECT_ID; totalSz++;
 4612                             		.loc 2 1635 16
 4613 010a EC A5                   		mov.L	[r10], r5
 4614 010c 71 54 01                		add	#1, r5, r4
 4615 010f E3 A4                   		mov.L	r4, [r10]
 4616                             		.loc 2 1635 12
 4617 0111 ED A4 0D                		mov.L	52[r10], r4
 4618 0114 4B 45                   		add	r4, r5
 4619                             		.loc 2 1635 20
 4620 0116 F8 54 06                		mov.B	#6, [r5]
 4621                             		.loc 2 1635 44
 4622 0119 ED A5 01                		mov.L	4[r10], r5
 4623 011c 62 15                   		add	#1, r5
 4624 011e E7 A5 01                		mov.L	r5, 4[r10]
1636:../src/wolfcrypt/src/pkcs12.c ****         sz = SetLength(sizeof(WC_PKCS12_ShroudedKeyBag_OID), out + idx);
 4625                             		.loc 2 1636 14
 4626 0121 ED A5 0D                		mov.L	52[r10], r5
 4627 0124 06 88 A5                		add	[r10].L, r5
 4628 0127 EF 52                   		mov.L	r5, r2
 4629 0129 66 B1                   		mov.L	#11, r1
 4630 012b 05 00 00 00             		bsr	_SetLength
 4631 012f E7 A1 05                		mov.L	r1, 20[r10]
1637:../src/wolfcrypt/src/pkcs12.c ****         idx += sz; totalSz += sz;
 4632                             		.loc 2 1637 13
 4633 0132 EC A5                   		mov.L	[r10], r5
 4634 0134 06 89 A5 05             		add	20[r10].L, r5
 4635 0138 E3 A5                   		mov.L	r5, [r10]
 4636                             		.loc 2 1637 28
 4637 013a ED A5 01                		mov.L	4[r10], r5
 4638 013d 06 89 A5 05             		add	20[r10].L, r5
 4639 0141 E7 A5 01                		mov.L	r5, 4[r10]
1638:../src/wolfcrypt/src/pkcs12.c ****         for (i = 0; i < sizeof(WC_PKCS12_ShroudedKeyBag_OID); i++) {
 4640                             		.loc 2 1638 16
 4641 0144 F9 A6 02 00             		mov.L	#0, 8[r10]
 4642                             		.loc 2 1638 9
 4643 0148 2E 2C                   		bra	.L287
 4644                             	.L288:
1639:../src/wolfcrypt/src/pkcs12.c ****             out[idx++] = WC_PKCS12_ShroudedKeyBag_OID[i]; totalSz++;
 4645                             		.loc 2 1639 20 discriminator 3
 4646 014a EC A5                   		mov.L	[r10], r5
 4647 014c 71 54 01                		add	#1, r5, r4
 4648 014f E3 A4                   		mov.L	r4, [r10]
 4649                             		.loc 2 1639 16 discriminator 3
 4650 0151 ED A4 0D                		mov.L	52[r10], r4
 4651 0154 4B 45                   		add	r4, r5
 4652                             		.loc 2 1639 54 discriminator 3
 4653 0156 FB 42 00 00 00 00       		mov.L	#_WC_PKCS12_ShroudedKeyBag_OID, r4
 4654 015c 06 89 A4 02             		add	8[r10].L, r4
 4655 0160 CC 44                   		mov.B	[r4], r4
 4656                             		.loc 2 1639 24 discriminator 3
 4657 0162 C3 54                   		mov.B	r4, [r5]
 4658                             		.loc 2 1639 66 discriminator 3
 4659 0164 ED A5 01                		mov.L	4[r10], r5
 4660 0167 62 15                   		add	#1, r5
 4661 0169 E7 A5 01                		mov.L	r5, 4[r10]
1638:../src/wolfcrypt/src/pkcs12.c ****         for (i = 0; i < sizeof(WC_PKCS12_ShroudedKeyBag_OID); i++) {
 4662                             		.loc 2 1638 64 discriminator 3
 4663 016c ED A5 02                		mov.L	8[r10], r5
 4664 016f 62 15                   		add	#1, r5
 4665 0171 E7 A5 02                		mov.L	r5, 8[r10]
 4666                             	.L287:
1638:../src/wolfcrypt/src/pkcs12.c ****         for (i = 0; i < sizeof(WC_PKCS12_ShroudedKeyBag_OID); i++) {
 4667                             		.loc 2 1638 9 discriminator 1
 4668 0174 ED A5 02                		mov.L	8[r10], r5
 4669 0177 61 A5                   		cmp	#10, r5
 4670 0179 25 D1                   		bleu	.L288
 4671                             	.L286:
1640:../src/wolfcrypt/src/pkcs12.c ****         }
1641:../src/wolfcrypt/src/pkcs12.c ****     }
1642:../src/wolfcrypt/src/pkcs12.c **** 
1643:../src/wolfcrypt/src/pkcs12.c ****     /* shroud key */
1644:../src/wolfcrypt/src/pkcs12.c ****     tmp = (byte*)XMALLOC(length, heap, DYNAMIC_TYPE_TMP_BUFFER);
 4672                             		.loc 2 1644 18
 4673 017b ED A5 0A                		mov.L	40[r10], r5
 4674 017e EF 51                   		mov.L	r5, r1
 4675 0180 05 00 00 00             		bsr	_wolfSSL_Malloc
 4676 0184 E7 A1 06                		mov.L	r1, 24[r10]
1645:../src/wolfcrypt/src/pkcs12.c ****     if (tmp == NULL) {
 4677                             		.loc 2 1645 8
 4678 0187 ED A5 06                		mov.L	24[r10], r5
 4679 018a 61 05                   		cmp	#0, r5
 4680 018c 1F                      		bne	.L289
1646:../src/wolfcrypt/src/pkcs12.c ****         return MEMORY_E;
 4681                             		.loc 2 1646 16
 4682 018d FB 56 83                		mov.L	#-125, r5
 4683 0190 38 B4 00                		bra	.L293
 4684                             	.L289:
1647:../src/wolfcrypt/src/pkcs12.c ****     }
1648:../src/wolfcrypt/src/pkcs12.c **** 
1649:../src/wolfcrypt/src/pkcs12.c ****     ret =  wc_PKCS12_shroud_key(pkcs12, rng, tmp, &length, key, keySz,
 4685                             		.loc 2 1649 12
 4686 0193 71 A5 28                		add	#40, r10, r5
 4687 0196 A8 EC                   		mov.L	12[r6], r4
 4688 0198 A1 0C                   		mov.L	r4, 20[r0]
 4689 019a A9 6C                   		mov.L	20[r6], r4
 4690 019c A1 04                   		mov.L	r4, 16[r0]
 4691 019e A9 64                   		mov.L	16[r6], r4
 4692 01a0 A0 8C                   		mov.L	r4, 12[r0]
 4693 01a2 A8 E4                   		mov.L	8[r6], r4
 4694 01a4 A0 84                   		mov.L	r4, 8[r0]
 4695 01a6 A8 6C                   		mov.L	4[r6], r4
 4696 01a8 A0 0C                   		mov.L	r4, 4[r0]
 4697 01aa EC 64                   		mov.L	[r6], r4
 4698 01ac E3 04                   		mov.L	r4, [r0]
 4699 01ae EF 54                   		mov.L	r5, r4
 4700 01b0 ED A3 06                		mov.L	24[r10], r3
 4701 01b3 ED A2 0C                		mov.L	48[r10], r2
 4702 01b6 ED A1 0B                		mov.L	44[r10], r1
 4703 01b9 05 00 00 00             		bsr	_wc_PKCS12_shroud_key
 4704 01bd E7 A1 03                		mov.L	r1, 12[r10]
1650:../src/wolfcrypt/src/pkcs12.c ****             algo, pass, passSz, iter);
1651:../src/wolfcrypt/src/pkcs12.c ****     if (ret < 0) {
 4705                             		.loc 2 1651 8
 4706 01c0 ED A5 03                		mov.L	12[r10], r5
 4707 01c3 61 05                   		cmp	#0, r5
 4708 01c5 28 1A                   		bge	.L290
 4709                             	.LBB49:
1652:../src/wolfcrypt/src/pkcs12.c ****         XFREE(tmp, heap, DYNAMIC_TYPE_TMP_BUFFER);
 4710                             		.loc 2 1652 9
 4711 01c7 ED A5 06                		mov.L	24[r10], r5
 4712 01ca E7 A5 07                		mov.L	r5, 28[r10]
 4713 01cd ED A5 07                		mov.L	28[r10], r5
 4714 01d0 61 05                   		cmp	#0, r5
 4715 01d2 10                      		beq	.L291
 4716                             		.loc 2 1652 9 is_stmt 0 discriminator 1
 4717 01d3 ED A1 07                		mov.L	28[r10], r1
 4718 01d6 05 00 00 00             		bsr	_wolfSSL_Free
 4719                             	.L291:
 4720                             	.LBE49:
1653:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 4721                             		.loc 2 1653 16 is_stmt 1
 4722 01da ED A5 03                		mov.L	12[r10], r5
 4723 01dd 2E 67                   		bra	.L293
 4724                             	.L290:
1654:../src/wolfcrypt/src/pkcs12.c ****     }
1655:../src/wolfcrypt/src/pkcs12.c ****     length = ret;
 4725                             		.loc 2 1655 12
 4726 01df ED A5 03                		mov.L	12[r10], r5
 4727 01e2 E7 A5 0A                		mov.L	r5, 40[r10]
1656:../src/wolfcrypt/src/pkcs12.c ****     XMEMCPY(out + idx, tmp, length);
 4728                             		.loc 2 1656 5
 4729 01e5 ED A5 0D                		mov.L	52[r10], r5
 4730 01e8 06 88 A5                		add	[r10].L, r5
 4731 01eb ED A4 0A                		mov.L	40[r10], r4
 4732 01ee EF 43                   		mov.L	r4, r3
 4733 01f0 ED A2 06                		mov.L	24[r10], r2
 4734 01f3 EF 51                   		mov.L	r5, r1
 4735 01f5 05 00 00 00             		bsr	_memcpy
 4736                             	.LBB50:
1657:../src/wolfcrypt/src/pkcs12.c ****     XFREE(tmp, heap, DYNAMIC_TYPE_TMP_BUFFER);
 4737                             		.loc 2 1657 5
 4738 01f9 ED A5 06                		mov.L	24[r10], r5
 4739 01fc E7 A5 08                		mov.L	r5, 32[r10]
 4740 01ff ED A5 08                		mov.L	32[r10], r5
 4741 0202 61 05                   		cmp	#0, r5
 4742 0204 10                      		beq	.L292
 4743                             		.loc 2 1657 5 is_stmt 0 discriminator 1
 4744 0205 ED A1 08                		mov.L	32[r10], r1
 4745 0208 05 00 00 00             		bsr	_wolfSSL_Free
 4746                             	.L292:
 4747                             	.LBE50:
1658:../src/wolfcrypt/src/pkcs12.c ****     totalSz += length;
 4748                             		.loc 2 1658 13 is_stmt 1
 4749 020c ED A5 0A                		mov.L	40[r10], r5
 4750 020f ED A4 01                		mov.L	4[r10], r4
 4751 0212 4B 45                   		add	r4, r5
 4752 0214 E7 A5 01                		mov.L	r5, 4[r10]
1659:../src/wolfcrypt/src/pkcs12.c **** 
1660:../src/wolfcrypt/src/pkcs12.c ****     /* set beginning sequence */
1661:../src/wolfcrypt/src/pkcs12.c ****     tmpSz = SetSequence(totalSz, out);
 4753                             		.loc 2 1661 13
 4754 0217 ED A2 0D                		mov.L	52[r10], r2
 4755 021a ED A1 01                		mov.L	4[r10], r1
 4756 021d 05 00 00 00             		bsr	_SetSequence
 4757 0221 E7 A1 09                		mov.L	r1, 36[r10]
1662:../src/wolfcrypt/src/pkcs12.c ****     XMEMMOVE(out + tmpSz, out + MAX_SEQ_SZ, totalSz);
 4758                             		.loc 2 1662 5
 4759 0224 ED A5 0D                		mov.L	52[r10], r5
 4760 0227 EF 54                   		mov.L	r5, r4
 4761 0229 06 89 A4 09             		add	36[r10].L, r4
 4762 022d ED A5 0D                		mov.L	52[r10], r5
 4763 0230 62 55                   		add	#5, r5
 4764 0232 ED A3 01                		mov.L	4[r10], r3
 4765 0235 EF 52                   		mov.L	r5, r2
 4766 0237 EF 41                   		mov.L	r4, r1
 4767 0239 05 00 00 00             		bsr	_memmove
1663:../src/wolfcrypt/src/pkcs12.c **** 
1664:../src/wolfcrypt/src/pkcs12.c ****     (void)heap;
1665:../src/wolfcrypt/src/pkcs12.c ****     return totalSz + tmpSz;
 4768                             		.loc 2 1665 20
 4769 023d ED A5 01                		mov.L	4[r10], r5
 4770 0240 06 89 A5 09             		add	36[r10].L, r5
 4771                             		.balign 8,3,1
 4772                             	.L293:
1666:../src/wolfcrypt/src/pkcs12.c **** }
 4773                             		.loc 2 1666 1 discriminator 1
 4774 0244 EF 51                   		mov.L	r5, r1
 4775 0246 71 00 6C                		add	#0x6c, r0
 4776 0249 7E B6                   		pop	r6
 4777 024b 7E BA                   		pop	r10
 4778 024d 02                      		rts
 4779                             	.LFE57:
 4781 024e EF 00                   		.section	.text.wc_PKCS12_create_cert_bag,"ax",@progbits
 4783                             	_wc_PKCS12_create_cert_bag:
 4784                             	.LFB58:
1667:../src/wolfcrypt/src/pkcs12.c **** 
1668:../src/wolfcrypt/src/pkcs12.c **** 
1669:../src/wolfcrypt/src/pkcs12.c **** /* Helper function to create cert bag.
1670:../src/wolfcrypt/src/pkcs12.c ****  *
1671:../src/wolfcrypt/src/pkcs12.c ****  * pkcs12 structure to use with cert bag
1672:../src/wolfcrypt/src/pkcs12.c ****  * out    buffer to hold results
1673:../src/wolfcrypt/src/pkcs12.c ****  * outSz  size of out buffer
1674:../src/wolfcrypt/src/pkcs12.c ****  * cert   cert that is going into cert bag
1675:../src/wolfcrypt/src/pkcs12.c ****  * certSz size of cert buffer
1676:../src/wolfcrypt/src/pkcs12.c ****  *
1677:../src/wolfcrypt/src/pkcs12.c ****  * returns the size of the cert bag on success
1678:../src/wolfcrypt/src/pkcs12.c ****  */
1679:../src/wolfcrypt/src/pkcs12.c **** static int wc_PKCS12_create_cert_bag(WC_PKCS12* pkcs12,
1680:../src/wolfcrypt/src/pkcs12.c ****         byte* out, word32* outSz, byte* cert, word32 certSz)
1681:../src/wolfcrypt/src/pkcs12.c **** {
 4785                             		.loc 2 1681 1
 4786 0000 7E AA                   		push.l	r10
 4787                             	.LCFI44:
 4788 0002 7E A6                   		push.l	r6
 4789                             	.LCFI45:
 4790 0004 71 0A CC                		add	#-52, r0, r10
 4791                             	.LCFI46:
 4792 0007 EF A0                   		mov.L	r10, r0
 4793 0009 75 46 40                		mov.L	#0x40, r6
 4794 000c 4B A6                   		add	r10, r6
 4795 000e E7 A1 08                		mov.L	r1, 32[r10]
 4796 0011 E7 A2 09                		mov.L	r2, 36[r10]
 4797 0014 E7 A3 0A                		mov.L	r3, 40[r10]
 4798 0017 E7 A4 0B                		mov.L	r4, 44[r10]
1682:../src/wolfcrypt/src/pkcs12.c ****     word32 length = 0;
 4799                             		.loc 2 1682 12
 4800 001a F8 A6 00                		mov.L	#0, [r10]
1683:../src/wolfcrypt/src/pkcs12.c ****     word32 idx = 0;
 4801                             		.loc 2 1683 12
 4802 001d F9 A6 01 00             		mov.L	#0, 4[r10]
1684:../src/wolfcrypt/src/pkcs12.c ****     word32 totalSz = 0;
 4803                             		.loc 2 1684 12
 4804 0021 F9 A6 02 00             		mov.L	#0, 8[r10]
1685:../src/wolfcrypt/src/pkcs12.c ****     word32 sz;
1686:../src/wolfcrypt/src/pkcs12.c ****     int WC_CERTBAG_OBJECT_ID  = 13;
 4805                             		.loc 2 1686 9
 4806 0025 F9 A6 04 0D             		mov.L	#13, 16[r10]
1687:../src/wolfcrypt/src/pkcs12.c ****     int WC_CERTBAG1_OBJECT_ID = 12;
 4807                             		.loc 2 1687 9
 4808 0029 F9 A6 05 0C             		mov.L	#12, 20[r10]
1688:../src/wolfcrypt/src/pkcs12.c ****     word32 i;
1689:../src/wolfcrypt/src/pkcs12.c ****     word32 tmpSz;
1690:../src/wolfcrypt/src/pkcs12.c **** 
1691:../src/wolfcrypt/src/pkcs12.c ****     if (out == NULL) {
 4809                             		.loc 2 1691 8
 4810 002d ED A5 09                		mov.L	36[r10], r5
 4811 0030 61 05                   		cmp	#0, r5
 4812 0032 21 1D                   		bne	.L295
1692:../src/wolfcrypt/src/pkcs12.c ****         *outSz = MAX_SEQ_SZ + WC_CERTBAG_OBJECT_ID + 1 + MAX_LENGTH_SZ +
 4813                             		.loc 2 1692 72
 4814 0034 ED A5 04                		mov.L	16[r10], r5
 4815 0037 62 F5                   		add	#15, r5
1693:../src/wolfcrypt/src/pkcs12.c ****             MAX_SEQ_SZ + WC_CERTBAG1_OBJECT_ID + 1 + MAX_LENGTH_SZ + 1 +
 4816                             		.loc 2 1693 24
 4817 0039 06 89 A5 05             		add	20[r10].L, r5
1694:../src/wolfcrypt/src/pkcs12.c ****             MAX_LENGTH_SZ + certSz;
 4818                             		.loc 2 1694 27
 4819 003d 06 88 65                		add	[r6].L, r5
 4820 0040 71 54 0A                		add	#10, r5, r4
1692:../src/wolfcrypt/src/pkcs12.c ****         *outSz = MAX_SEQ_SZ + WC_CERTBAG_OBJECT_ID + 1 + MAX_LENGTH_SZ +
 4821                             		.loc 2 1692 16
 4822 0043 ED A5 0A                		mov.L	40[r10], r5
 4823 0046 E3 54                   		mov.L	r4, [r5]
1695:../src/wolfcrypt/src/pkcs12.c ****         return LENGTH_ONLY_E;
 4824                             		.loc 2 1695 16
 4825 0048 FB 5A 36 FF             		mov.L	#-202, r5
 4826 004c 38 DC 02                		bra	.L296
 4827                             	.L295:
1696:../src/wolfcrypt/src/pkcs12.c ****     }
1697:../src/wolfcrypt/src/pkcs12.c **** 
1698:../src/wolfcrypt/src/pkcs12.c ****     /* check buffer size able to handle max size */
1699:../src/wolfcrypt/src/pkcs12.c ****     if (*outSz < (MAX_SEQ_SZ + WC_CERTBAG_OBJECT_ID + 1 + MAX_LENGTH_SZ +
 4828                             		.loc 2 1699 9
 4829 004f ED A5 0A                		mov.L	40[r10], r5
 4830 0052 EC 54                   		mov.L	[r5], r4
 4831                             		.loc 2 1699 73
 4832 0054 ED A5 04                		mov.L	16[r10], r5
 4833 0057 62 F5                   		add	#15, r5
1700:../src/wolfcrypt/src/pkcs12.c ****             MAX_SEQ_SZ + WC_CERTBAG1_OBJECT_ID + 1 + MAX_LENGTH_SZ + 1 +
 4834                             		.loc 2 1700 24
 4835 0059 06 89 A5 05             		add	20[r10].L, r5
1701:../src/wolfcrypt/src/pkcs12.c ****             MAX_LENGTH_SZ + certSz)) {
 4836                             		.loc 2 1701 27
 4837 005d 06 88 65                		add	[r6].L, r5
 4838 0060 62 A5                   		add	#10, r5
1699:../src/wolfcrypt/src/pkcs12.c ****             MAX_SEQ_SZ + WC_CERTBAG1_OBJECT_ID + 1 + MAX_LENGTH_SZ + 1 +
 4839                             		.loc 2 1699 8
 4840 0062 47 54                   		cmp	r5, r4
 4841 0064 22 09                   		bgeu	.L297
1702:../src/wolfcrypt/src/pkcs12.c ****         return BUFFER_E;
 4842                             		.loc 2 1702 16
 4843 0066 FB 5A 7C FF             		mov.L	#-132, r5
 4844 006a 38 BE 02                		bra	.L296
 4845                             	.L297:
1703:../src/wolfcrypt/src/pkcs12.c ****     }
1704:../src/wolfcrypt/src/pkcs12.c **** 
1705:../src/wolfcrypt/src/pkcs12.c ****     /* save room for sequence */
1706:../src/wolfcrypt/src/pkcs12.c ****     idx += MAX_SEQ_SZ;
 4846                             		.loc 2 1706 9
 4847 006d ED A5 01                		mov.L	4[r10], r5
 4848 0070 62 55                   		add	#5, r5
 4849 0072 E7 A5 01                		mov.L	r5, 4[r10]
1707:../src/wolfcrypt/src/pkcs12.c **** 
1708:../src/wolfcrypt/src/pkcs12.c ****     /* objectId WC_PKCS12_CertBag */
1709:../src/wolfcrypt/src/pkcs12.c ****     out[idx++] = ASN_OBJECT_ID; totalSz++;
 4850                             		.loc 2 1709 12
 4851 0075 ED A5 01                		mov.L	4[r10], r5
 4852 0078 71 54 01                		add	#1, r5, r4
 4853 007b E7 A4 01                		mov.L	r4, 4[r10]
 4854                             		.loc 2 1709 8
 4855 007e ED A4 09                		mov.L	36[r10], r4
 4856 0081 4B 45                   		add	r4, r5
 4857                             		.loc 2 1709 16
 4858 0083 F8 54 06                		mov.B	#6, [r5]
 4859                             		.loc 2 1709 40
 4860 0086 ED A5 02                		mov.L	8[r10], r5
 4861 0089 62 15                   		add	#1, r5
 4862 008b E7 A5 02                		mov.L	r5, 8[r10]
1710:../src/wolfcrypt/src/pkcs12.c ****     sz = SetLength(sizeof(WC_PKCS12_CertBag_OID), out + idx);
 4863                             		.loc 2 1710 10
 4864 008e ED A5 09                		mov.L	36[r10], r5
 4865 0091 06 89 A5 01             		add	4[r10].L, r5
 4866 0095 EF 52                   		mov.L	r5, r2
 4867 0097 66 B1                   		mov.L	#11, r1
 4868 0099 05 00 00 00             		bsr	_SetLength
 4869 009d E7 A1 06                		mov.L	r1, 24[r10]
1711:../src/wolfcrypt/src/pkcs12.c ****     idx += sz; totalSz += sz;
 4870                             		.loc 2 1711 9
 4871 00a0 ED A5 01                		mov.L	4[r10], r5
 4872 00a3 06 89 A5 06             		add	24[r10].L, r5
 4873 00a7 E7 A5 01                		mov.L	r5, 4[r10]
 4874                             		.loc 2 1711 24
 4875 00aa ED A5 02                		mov.L	8[r10], r5
 4876 00ad 06 89 A5 06             		add	24[r10].L, r5
 4877 00b1 E7 A5 02                		mov.L	r5, 8[r10]
1712:../src/wolfcrypt/src/pkcs12.c ****     for (i = 0; i < sizeof(WC_PKCS12_CertBag_OID); i++) {
 4878                             		.loc 2 1712 12
 4879 00b4 F9 A6 03 00             		mov.L	#0, 12[r10]
 4880                             		.loc 2 1712 5
 4881 00b8 2E 2E                   		bra	.L298
 4882                             	.L299:
1713:../src/wolfcrypt/src/pkcs12.c ****         out[idx++] = WC_PKCS12_CertBag_OID[i]; totalSz++;
 4883                             		.loc 2 1713 16 discriminator 3
 4884 00ba ED A5 01                		mov.L	4[r10], r5
 4885 00bd 71 54 01                		add	#1, r5, r4
 4886 00c0 E7 A4 01                		mov.L	r4, 4[r10]
 4887                             		.loc 2 1713 12 discriminator 3
 4888 00c3 ED A4 09                		mov.L	36[r10], r4
 4889 00c6 4B 45                   		add	r4, r5
 4890                             		.loc 2 1713 43 discriminator 3
 4891 00c8 FB 42 00 00 00 00       		mov.L	#_WC_PKCS12_CertBag_OID, r4
 4892 00ce 06 89 A4 03             		add	12[r10].L, r4
 4893 00d2 CC 44                   		mov.B	[r4], r4
 4894                             		.loc 2 1713 20 discriminator 3
 4895 00d4 C3 54                   		mov.B	r4, [r5]
 4896                             		.loc 2 1713 55 discriminator 3
 4897 00d6 ED A5 02                		mov.L	8[r10], r5
 4898 00d9 62 15                   		add	#1, r5
 4899 00db E7 A5 02                		mov.L	r5, 8[r10]
1712:../src/wolfcrypt/src/pkcs12.c ****     for (i = 0; i < sizeof(WC_PKCS12_CertBag_OID); i++) {
 4900                             		.loc 2 1712 53 discriminator 3
 4901 00de ED A5 03                		mov.L	12[r10], r5
 4902 00e1 62 15                   		add	#1, r5
 4903 00e3 E7 A5 03                		mov.L	r5, 12[r10]
 4904                             	.L298:
1712:../src/wolfcrypt/src/pkcs12.c ****     for (i = 0; i < sizeof(WC_PKCS12_CertBag_OID); i++) {
 4905                             		.loc 2 1712 5 discriminator 1
 4906 00e6 ED A5 03                		mov.L	12[r10], r5
 4907 00e9 61 A5                   		cmp	#10, r5
 4908 00eb 25 CF                   		bleu	.L299
1714:../src/wolfcrypt/src/pkcs12.c ****     }
1715:../src/wolfcrypt/src/pkcs12.c **** 
1716:../src/wolfcrypt/src/pkcs12.c ****     /**** Cert Bag type 1 ****/
1717:../src/wolfcrypt/src/pkcs12.c ****     out[idx++] = (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC); totalSz++;
 4909                             		.loc 2 1717 12
 4910 00ed ED A5 01                		mov.L	4[r10], r5
 4911 00f0 71 54 01                		add	#1, r5, r4
 4912 00f3 E7 A4 01                		mov.L	r4, 4[r10]
 4913                             		.loc 2 1717 8
 4914 00f6 ED A4 09                		mov.L	36[r10], r4
 4915 00f9 4B 45                   		add	r4, r5
 4916                             		.loc 2 1717 16
 4917 00fb F8 54 A0                		mov.B	#-96, [r5]
 4918                             		.loc 2 1717 67
 4919 00fe ED A5 02                		mov.L	8[r10], r5
 4920 0101 62 15                   		add	#1, r5
 4921 0103 E7 A5 02                		mov.L	r5, 8[r10]
1718:../src/wolfcrypt/src/pkcs12.c **** 
1719:../src/wolfcrypt/src/pkcs12.c ****     /* save room for length and sequence */
1720:../src/wolfcrypt/src/pkcs12.c ****     idx += MAX_LENGTH_SZ;
 4922                             		.loc 2 1720 9
 4923 0106 ED A5 01                		mov.L	4[r10], r5
 4924 0109 62 45                   		add	#4, r5
 4925 010b E7 A5 01                		mov.L	r5, 4[r10]
1721:../src/wolfcrypt/src/pkcs12.c ****     idx += MAX_SEQ_SZ;
 4926                             		.loc 2 1721 9
 4927 010e ED A5 01                		mov.L	4[r10], r5
 4928 0111 62 55                   		add	#5, r5
 4929 0113 E7 A5 01                		mov.L	r5, 4[r10]
1722:../src/wolfcrypt/src/pkcs12.c **** 
1723:../src/wolfcrypt/src/pkcs12.c ****     /* object id WC_PKCS12_CertBag_Type1 */
1724:../src/wolfcrypt/src/pkcs12.c ****     out[idx++] = ASN_OBJECT_ID; length++;
 4930                             		.loc 2 1724 12
 4931 0116 ED A5 01                		mov.L	4[r10], r5
 4932 0119 71 54 01                		add	#1, r5, r4
 4933 011c E7 A4 01                		mov.L	r4, 4[r10]
 4934                             		.loc 2 1724 8
 4935 011f ED A4 09                		mov.L	36[r10], r4
 4936 0122 4B 45                   		add	r4, r5
 4937                             		.loc 2 1724 16
 4938 0124 F8 54 06                		mov.B	#6, [r5]
 4939                             		.loc 2 1724 39
 4940 0127 EC A5                   		mov.L	[r10], r5
 4941 0129 62 15                   		add	#1, r5
 4942 012b E3 A5                   		mov.L	r5, [r10]
1725:../src/wolfcrypt/src/pkcs12.c ****     sz = SetLength(sizeof(WC_PKCS12_CertBag_Type1_OID), out + idx);
 4943                             		.loc 2 1725 10
 4944 012d ED A5 09                		mov.L	36[r10], r5
 4945 0130 06 89 A5 01             		add	4[r10].L, r5
 4946 0134 EF 52                   		mov.L	r5, r2
 4947 0136 66 A1                   		mov.L	#10, r1
 4948 0138 05 00 00 00             		bsr	_SetLength
 4949 013c E7 A1 06                		mov.L	r1, 24[r10]
1726:../src/wolfcrypt/src/pkcs12.c ****     idx += sz; length += sz;
 4950                             		.loc 2 1726 9
 4951 013f ED A5 01                		mov.L	4[r10], r5
 4952 0142 06 89 A5 06             		add	24[r10].L, r5
 4953 0146 E7 A5 01                		mov.L	r5, 4[r10]
 4954                             		.loc 2 1726 23
 4955 0149 EC A5                   		mov.L	[r10], r5
 4956 014b 06 89 A5 06             		add	24[r10].L, r5
 4957 014f E3 A5                   		mov.L	r5, [r10]
1727:../src/wolfcrypt/src/pkcs12.c ****     for (i = 0; i < sizeof(WC_PKCS12_CertBag_Type1_OID); i++) {
 4958                             		.loc 2 1727 12
 4959 0151 F9 A6 03 00             		mov.L	#0, 12[r10]
 4960                             		.loc 2 1727 5
 4961 0155 2E 2C                   		bra	.L300
 4962                             	.L301:
1728:../src/wolfcrypt/src/pkcs12.c ****         out[idx++] = WC_PKCS12_CertBag_Type1_OID[i]; length++;
 4963                             		.loc 2 1728 16 discriminator 3
 4964 0157 ED A5 01                		mov.L	4[r10], r5
 4965 015a 71 54 01                		add	#1, r5, r4
 4966 015d E7 A4 01                		mov.L	r4, 4[r10]
 4967                             		.loc 2 1728 12 discriminator 3
 4968 0160 ED A4 09                		mov.L	36[r10], r4
 4969 0163 4B 45                   		add	r4, r5
 4970                             		.loc 2 1728 49 discriminator 3
 4971 0165 FB 42 00 00 00 00       		mov.L	#_WC_PKCS12_CertBag_Type1_OID, r4
 4972 016b 06 89 A4 03             		add	12[r10].L, r4
 4973 016f CC 44                   		mov.B	[r4], r4
 4974                             		.loc 2 1728 20 discriminator 3
 4975 0171 C3 54                   		mov.B	r4, [r5]
 4976                             		.loc 2 1728 60 discriminator 3
 4977 0173 EC A5                   		mov.L	[r10], r5
 4978 0175 62 15                   		add	#1, r5
 4979 0177 E3 A5                   		mov.L	r5, [r10]
1727:../src/wolfcrypt/src/pkcs12.c ****     for (i = 0; i < sizeof(WC_PKCS12_CertBag_Type1_OID); i++) {
 4980                             		.loc 2 1727 59 discriminator 3
 4981 0179 ED A5 03                		mov.L	12[r10], r5
 4982 017c 62 15                   		add	#1, r5
 4983 017e E7 A5 03                		mov.L	r5, 12[r10]
 4984                             	.L300:
1727:../src/wolfcrypt/src/pkcs12.c ****     for (i = 0; i < sizeof(WC_PKCS12_CertBag_Type1_OID); i++) {
 4985                             		.loc 2 1727 5 discriminator 1
 4986 0181 ED A5 03                		mov.L	12[r10], r5
 4987 0184 61 95                   		cmp	#9, r5
 4988 0186 25 D1                   		bleu	.L301
1729:../src/wolfcrypt/src/pkcs12.c ****     }
1730:../src/wolfcrypt/src/pkcs12.c **** 
1731:../src/wolfcrypt/src/pkcs12.c ****     out[idx++] = (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC); length++;
 4989                             		.loc 2 1731 12
 4990 0188 ED A5 01                		mov.L	4[r10], r5
 4991 018b 71 54 01                		add	#1, r5, r4
 4992 018e E7 A4 01                		mov.L	r4, 4[r10]
 4993                             		.loc 2 1731 8
 4994 0191 ED A4 09                		mov.L	36[r10], r4
 4995 0194 4B 45                   		add	r4, r5
 4996                             		.loc 2 1731 16
 4997 0196 F8 54 A0                		mov.B	#-96, [r5]
 4998                             		.loc 2 1731 66
 4999 0199 EC A5                   		mov.L	[r10], r5
 5000 019b 62 15                   		add	#1, r5
 5001 019d E3 A5                   		mov.L	r5, [r10]
1732:../src/wolfcrypt/src/pkcs12.c ****     sz = 0;
 5002                             		.loc 2 1732 8
 5003 019f F9 A6 06 00             		mov.L	#0, 24[r10]
1733:../src/wolfcrypt/src/pkcs12.c ****     idx += MAX_LENGTH_SZ; /* save room for length */
 5004                             		.loc 2 1733 9
 5005 01a3 ED A5 01                		mov.L	4[r10], r5
 5006 01a6 62 45                   		add	#4, r5
 5007 01a8 E7 A5 01                		mov.L	r5, 4[r10]
1734:../src/wolfcrypt/src/pkcs12.c **** 
1735:../src/wolfcrypt/src/pkcs12.c ****     /* place the cert in the buffer */
1736:../src/wolfcrypt/src/pkcs12.c ****     out[idx++] = ASN_OCTET_STRING; sz++;
 5008                             		.loc 2 1736 12
 5009 01ab ED A5 01                		mov.L	4[r10], r5
 5010 01ae 71 54 01                		add	#1, r5, r4
 5011 01b1 E7 A4 01                		mov.L	r4, 4[r10]
 5012                             		.loc 2 1736 8
 5013 01b4 ED A4 09                		mov.L	36[r10], r4
 5014 01b7 4B 45                   		add	r4, r5
 5015                             		.loc 2 1736 16
 5016 01b9 F8 54 04                		mov.B	#4, [r5]
 5017                             		.loc 2 1736 38
 5018 01bc ED A5 06                		mov.L	24[r10], r5
 5019 01bf 62 15                   		add	#1, r5
 5020 01c1 E7 A5 06                		mov.L	r5, 24[r10]
1737:../src/wolfcrypt/src/pkcs12.c ****     tmpSz = SetLength(certSz, out + idx);
 5021                             		.loc 2 1737 13
 5022 01c4 ED A5 09                		mov.L	36[r10], r5
 5023 01c7 06 89 A5 01             		add	4[r10].L, r5
 5024 01cb EF 52                   		mov.L	r5, r2
 5025 01cd EC 61                   		mov.L	[r6], r1
 5026 01cf 05 00 00 00             		bsr	_SetLength
 5027 01d3 E7 A1 07                		mov.L	r1, 28[r10]
1738:../src/wolfcrypt/src/pkcs12.c ****     idx += tmpSz; sz += tmpSz;
 5028                             		.loc 2 1738 9
 5029 01d6 ED A5 01                		mov.L	4[r10], r5
 5030 01d9 06 89 A5 07             		add	28[r10].L, r5
 5031 01dd E7 A5 01                		mov.L	r5, 4[r10]
 5032                             		.loc 2 1738 22
 5033 01e0 ED A5 06                		mov.L	24[r10], r5
 5034 01e3 06 89 A5 07             		add	28[r10].L, r5
 5035 01e7 E7 A5 06                		mov.L	r5, 24[r10]
1739:../src/wolfcrypt/src/pkcs12.c ****     XMEMCPY(out + idx, cert, certSz);
 5036                             		.loc 2 1739 5
 5037 01ea ED A5 09                		mov.L	36[r10], r5
 5038 01ed 06 89 A5 01             		add	4[r10].L, r5
 5039 01f1 EC 63                   		mov.L	[r6], r3
 5040 01f3 ED A2 0B                		mov.L	44[r10], r2
 5041 01f6 EF 51                   		mov.L	r5, r1
 5042 01f8 05 00 00 00             		bsr	_memcpy
1740:../src/wolfcrypt/src/pkcs12.c ****     idx += certSz; sz += certSz;
 5043                             		.loc 2 1740 9
 5044 01fc ED A5 01                		mov.L	4[r10], r5
 5045 01ff 06 88 65                		add	[r6].L, r5
 5046 0202 E7 A5 01                		mov.L	r5, 4[r10]
 5047                             		.loc 2 1740 23
 5048 0205 ED A5 06                		mov.L	24[r10], r5
 5049 0208 06 88 65                		add	[r6].L, r5
 5050 020b E7 A5 06                		mov.L	r5, 24[r10]
1741:../src/wolfcrypt/src/pkcs12.c **** 
1742:../src/wolfcrypt/src/pkcs12.c ****     /* rewind idx and place length */
1743:../src/wolfcrypt/src/pkcs12.c ****     idx -= (sz + MAX_LENGTH_SZ);
 5051                             		.loc 2 1743 9
 5052 020e ED A4 01                		mov.L	4[r10], r4
 5053 0211 ED A5 06                		mov.L	24[r10], r5
 5054 0214 FF 05 54                		sub	r5, r4, r5
 5055 0217 60 45                   		sub	#4, r5
 5056 0219 E7 A5 01                		mov.L	r5, 4[r10]
1744:../src/wolfcrypt/src/pkcs12.c ****     tmpSz = SetLength(sz, out + idx);
 5057                             		.loc 2 1744 13
 5058 021c ED A5 09                		mov.L	36[r10], r5
 5059 021f 06 89 A5 01             		add	4[r10].L, r5
 5060 0223 EF 52                   		mov.L	r5, r2
 5061 0225 ED A1 06                		mov.L	24[r10], r1
 5062 0228 05 00 00 00             		bsr	_SetLength
 5063 022c E7 A1 07                		mov.L	r1, 28[r10]
1745:../src/wolfcrypt/src/pkcs12.c ****     XMEMMOVE(out + idx + tmpSz, out + idx + MAX_LENGTH_SZ, sz);
 5064                             		.loc 2 1745 5
 5065 022f ED A5 01                		mov.L	4[r10], r5
 5066 0232 06 89 A5 07             		add	28[r10].L, r5
 5067 0236 ED A4 09                		mov.L	36[r10], r4
 5068 0239 FF 21 54                		add	r5, r4, r1
 5069 023c ED A5 01                		mov.L	4[r10], r5
 5070 023f 62 45                   		add	#4, r5
 5071 0241 ED A4 09                		mov.L	36[r10], r4
 5072 0244 4B 45                   		add	r4, r5
 5073 0246 ED A3 06                		mov.L	24[r10], r3
 5074 0249 EF 52                   		mov.L	r5, r2
 5075 024b 05 00 00 00             		bsr	_memmove
1746:../src/wolfcrypt/src/pkcs12.c ****     idx += tmpSz + sz; length += tmpSz + sz;
 5076                             		.loc 2 1746 18
 5077 024f ED A5 07                		mov.L	28[r10], r5
 5078 0252 06 89 A5 06             		add	24[r10].L, r5
 5079                             		.loc 2 1746 9
 5080 0256 ED A4 01                		mov.L	4[r10], r4
 5081 0259 4B 45                   		add	r4, r5
 5082 025b E7 A5 01                		mov.L	r5, 4[r10]
 5083                             		.loc 2 1746 40
 5084 025e ED A5 07                		mov.L	28[r10], r5
 5085 0261 06 89 A5 06             		add	24[r10].L, r5
 5086                             		.loc 2 1746 31
 5087 0265 EC A4                   		mov.L	[r10], r4
 5088 0267 4B 45                   		add	r4, r5
 5089 0269 E3 A5                   		mov.L	r5, [r10]
1747:../src/wolfcrypt/src/pkcs12.c **** 
1748:../src/wolfcrypt/src/pkcs12.c ****     /* rewind idx and set sequence */
1749:../src/wolfcrypt/src/pkcs12.c ****     idx -= (length + MAX_SEQ_SZ);
 5090                             		.loc 2 1749 9
 5091 026b ED A4 01                		mov.L	4[r10], r4
 5092 026e EC A5                   		mov.L	[r10], r5
 5093 0270 FF 05 54                		sub	r5, r4, r5
 5094 0273 60 55                   		sub	#5, r5
 5095 0275 E7 A5 01                		mov.L	r5, 4[r10]
1750:../src/wolfcrypt/src/pkcs12.c ****     tmpSz = SetSequence(length, out + idx);
 5096                             		.loc 2 1750 13
 5097 0278 ED A5 09                		mov.L	36[r10], r5
 5098 027b 06 89 A5 01             		add	4[r10].L, r5
 5099 027f EF 52                   		mov.L	r5, r2
 5100 0281 EC A1                   		mov.L	[r10], r1
 5101 0283 05 00 00 00             		bsr	_SetSequence
 5102 0287 E7 A1 07                		mov.L	r1, 28[r10]
1751:../src/wolfcrypt/src/pkcs12.c ****     XMEMMOVE(out + idx + tmpSz, out + idx + MAX_SEQ_SZ, length);
 5103                             		.loc 2 1751 5
 5104 028a ED A5 01                		mov.L	4[r10], r5
 5105 028d 06 89 A5 07             		add	28[r10].L, r5
 5106 0291 ED A4 09                		mov.L	36[r10], r4
 5107 0294 FF 21 54                		add	r5, r4, r1
 5108 0297 ED A5 01                		mov.L	4[r10], r5
 5109 029a 62 55                   		add	#5, r5
 5110 029c ED A4 09                		mov.L	36[r10], r4
 5111 029f 4B 45                   		add	r4, r5
 5112 02a1 EC A3                   		mov.L	[r10], r3
 5113 02a3 EF 52                   		mov.L	r5, r2
 5114 02a5 05 00 00 00             		bsr	_memmove
1752:../src/wolfcrypt/src/pkcs12.c ****     length += tmpSz;
 5115                             		.loc 2 1752 12
 5116 02a9 EC A5                   		mov.L	[r10], r5
 5117 02ab 06 89 A5 07             		add	28[r10].L, r5
 5118 02af E3 A5                   		mov.L	r5, [r10]
1753:../src/wolfcrypt/src/pkcs12.c **** 
1754:../src/wolfcrypt/src/pkcs12.c ****     /* place final length */
1755:../src/wolfcrypt/src/pkcs12.c ****     idx -= MAX_LENGTH_SZ;
 5119                             		.loc 2 1755 9
 5120 02b1 ED A5 01                		mov.L	4[r10], r5
 5121 02b4 60 45                   		sub	#4, r5
 5122 02b6 E7 A5 01                		mov.L	r5, 4[r10]
1756:../src/wolfcrypt/src/pkcs12.c ****     tmpSz = SetLength(length, out + idx);
 5123                             		.loc 2 1756 13
 5124 02b9 ED A5 09                		mov.L	36[r10], r5
 5125 02bc 06 89 A5 01             		add	4[r10].L, r5
 5126 02c0 EF 52                   		mov.L	r5, r2
 5127 02c2 EC A1                   		mov.L	[r10], r1
 5128 02c4 05 00 00 00             		bsr	_SetLength
 5129 02c8 E7 A1 07                		mov.L	r1, 28[r10]
1757:../src/wolfcrypt/src/pkcs12.c ****     XMEMMOVE(out + idx + tmpSz, out + idx + MAX_LENGTH_SZ, length);
 5130                             		.loc 2 1757 5
 5131 02cb ED A5 01                		mov.L	4[r10], r5
 5132 02ce 06 89 A5 07             		add	28[r10].L, r5
 5133 02d2 ED A4 09                		mov.L	36[r10], r4
 5134 02d5 FF 21 54                		add	r5, r4, r1
 5135 02d8 ED A5 01                		mov.L	4[r10], r5
 5136 02db 62 45                   		add	#4, r5
 5137 02dd ED A4 09                		mov.L	36[r10], r4
 5138 02e0 4B 45                   		add	r4, r5
 5139 02e2 EC A3                   		mov.L	[r10], r3
 5140 02e4 EF 52                   		mov.L	r5, r2
 5141 02e6 05 00 00 00             		bsr	_memmove
1758:../src/wolfcrypt/src/pkcs12.c ****     length += tmpSz;
 5142                             		.loc 2 1758 12
 5143 02ea EC A5                   		mov.L	[r10], r5
 5144 02ec 06 89 A5 07             		add	28[r10].L, r5
 5145 02f0 E3 A5                   		mov.L	r5, [r10]
1759:../src/wolfcrypt/src/pkcs12.c **** 
1760:../src/wolfcrypt/src/pkcs12.c ****     /* place final sequence */
1761:../src/wolfcrypt/src/pkcs12.c ****     totalSz += length;
 5146                             		.loc 2 1761 13
 5147 02f2 ED A5 02                		mov.L	8[r10], r5
 5148 02f5 06 88 A5                		add	[r10].L, r5
 5149 02f8 E7 A5 02                		mov.L	r5, 8[r10]
1762:../src/wolfcrypt/src/pkcs12.c ****     tmpSz = SetSequence(totalSz, out);
 5150                             		.loc 2 1762 13
 5151 02fb ED A2 09                		mov.L	36[r10], r2
 5152 02fe ED A1 02                		mov.L	8[r10], r1
 5153 0301 05 00 00 00             		bsr	_SetSequence
 5154 0305 E7 A1 07                		mov.L	r1, 28[r10]
1763:../src/wolfcrypt/src/pkcs12.c ****     XMEMMOVE(out + tmpSz, out + MAX_SEQ_SZ, totalSz);
 5155                             		.loc 2 1763 5
 5156 0308 ED A5 09                		mov.L	36[r10], r5
 5157 030b EF 54                   		mov.L	r5, r4
 5158 030d 06 89 A4 07             		add	28[r10].L, r4
 5159 0311 ED A5 09                		mov.L	36[r10], r5
 5160 0314 62 55                   		add	#5, r5
 5161 0316 ED A3 02                		mov.L	8[r10], r3
 5162 0319 EF 52                   		mov.L	r5, r2
 5163 031b EF 41                   		mov.L	r4, r1
 5164 031d 05 00 00 00             		bsr	_memmove
1764:../src/wolfcrypt/src/pkcs12.c **** 
1765:../src/wolfcrypt/src/pkcs12.c ****     (void)pkcs12;
1766:../src/wolfcrypt/src/pkcs12.c **** 
1767:../src/wolfcrypt/src/pkcs12.c ****     return totalSz + tmpSz;
 5165                             		.loc 2 1767 20
 5166 0321 ED A5 02                		mov.L	8[r10], r5
 5167 0324 06 89 A5 07             		add	28[r10].L, r5
 5168                             	.L296:
1768:../src/wolfcrypt/src/pkcs12.c **** }
 5169                             		.loc 2 1768 1
 5170 0328 EF 51                   		mov.L	r5, r1
 5171 032a 71 00 34                		add	#52, r0
 5172 032d 7E B6                   		pop	r6
 5173 032f 7E BA                   		pop	r10
 5174 0331 02                      		rts
 5175                             	.LFE58:
 5177                             		.section C,"a",@progbits
 5178 0501 00 00 00                		.p2align 2
 5179                             	.LC41:
 5180 0504 65 6E 63 72 79 70 74 69 		.string	"encrypting PKCS12 content"
 5180      6E 67 20 50 4B 43 53 31 
 5180      32 20 63 6F 6E 74 65 6E 
 5180      74 00 
 5181                             	.LC42:
 5182 051e 42 75 66 66 65 72 20 6E 		.string	"Buffer not large enough for DATA OID"
 5182      6F 74 20 6C 61 72 67 65 
 5182      20 65 6E 6F 75 67 68 20 
 5182      66 6F 72 20 44 41 54 41 
 5182      20 4F 49 44 00 
 5183                             	.LC43:
 5184 0543 55 6E 6B 6E 6F 77 6E 2F 		.string	"Unknown/Unsupported content type"
 5184      55 6E 73 75 70 70 6F 72 
 5184      74 65 64 20 63 6F 6E 74 
 5184      65 6E 74 20 74 79 70 65 
 5184      00 
 5185                             		.section	.text.wc_PKCS12_encrypt_content,"ax",@progbits
 5187                             	_wc_PKCS12_encrypt_content:
 5188                             	.LFB59:
1769:../src/wolfcrypt/src/pkcs12.c **** 
1770:../src/wolfcrypt/src/pkcs12.c **** 
1771:../src/wolfcrypt/src/pkcs12.c **** /* Helper function to encrypt content.
1772:../src/wolfcrypt/src/pkcs12.c ****  *
1773:../src/wolfcrypt/src/pkcs12.c ****  * pkcs12    structure to use with key bag
1774:../src/wolfcrypt/src/pkcs12.c ****  * rng       random number generator used
1775:../src/wolfcrypt/src/pkcs12.c ****  * out       buffer to hold results
1776:../src/wolfcrypt/src/pkcs12.c ****  * outSz     size of out buffer
1777:../src/wolfcrypt/src/pkcs12.c ****  * content   content to encrypt
1778:../src/wolfcrypt/src/pkcs12.c ****  * contentSz size of content buffer
1779:../src/wolfcrypt/src/pkcs12.c ****  * vAlgo     algorithm version
1780:../src/wolfcrypt/src/pkcs12.c ****  * pass      password to use
1781:../src/wolfcrypt/src/pkcs12.c ****  * passSz    size of pass buffer
1782:../src/wolfcrypt/src/pkcs12.c ****  * iter      number of iterations
1783:../src/wolfcrypt/src/pkcs12.c ****  * type      content type i.e WC_PKCS12_ENCRYPTED_DATA or WC_PKCS12_DATA
1784:../src/wolfcrypt/src/pkcs12.c ****  *
1785:../src/wolfcrypt/src/pkcs12.c ****  * returns the size of result on success
1786:../src/wolfcrypt/src/pkcs12.c ****  */
1787:../src/wolfcrypt/src/pkcs12.c **** static int wc_PKCS12_encrypt_content(WC_PKCS12* pkcs12, WC_RNG* rng,
1788:../src/wolfcrypt/src/pkcs12.c ****         byte* out, word32* outSz, byte* content, word32 contentSz, int vAlgo,
1789:../src/wolfcrypt/src/pkcs12.c ****         const char* pass, int passSz, int iter, int type)
1790:../src/wolfcrypt/src/pkcs12.c **** {
 5189                             		.loc 2 1790 1
 5190 0000 6E 6B                   		pushm	r6-r11
 5191                             	.LCFI47:
 5192 0002 71 0A 94                		add	#-108, r0, r10
 5193                             	.LCFI48:
 5194 0005 71 A0 DC                		add	#-36, r10, r0
 5195                             	.LCFI49:
 5196 0008 75 46 88                		mov.L	#0x88, r6
 5197 000b 4B A6                   		add	r10, r6
 5198 000d E7 A1 10                		mov.L	r1, 64[r10]
 5199 0010 E7 A2 11                		mov.L	r2, 68[r10]
 5200 0013 E7 A3 12                		mov.L	r3, 72[r10]
 5201 0016 E7 A4 13                		mov.L	r4, 76[r10]
1791:../src/wolfcrypt/src/pkcs12.c ****     void* heap;
1792:../src/wolfcrypt/src/pkcs12.c ****     int vPKCS     = 1; /* PKCS#12 is always set to 1 */
 5202                             		.loc 2 1792 9
 5203 0019 F8 A6 01                		mov.L	#1, [r10]
1793:../src/wolfcrypt/src/pkcs12.c ****     int ret;
1794:../src/wolfcrypt/src/pkcs12.c ****     byte*  tmp;
1795:../src/wolfcrypt/src/pkcs12.c ****     word32 idx = 0;
 5204                             		.loc 2 1795 12
 5205 001c F9 A6 01 00             		mov.L	#0, 4[r10]
1796:../src/wolfcrypt/src/pkcs12.c ****     word32 totalSz = 0;
 5206                             		.loc 2 1796 12
 5207 0020 F9 A6 02 00             		mov.L	#0, 8[r10]
1797:../src/wolfcrypt/src/pkcs12.c ****     word32 length = 0;
 5208                             		.loc 2 1797 12
 5209 0024 F9 A6 03 00             		mov.L	#0, 12[r10]
1798:../src/wolfcrypt/src/pkcs12.c ****     word32 tmpSz;
1799:../src/wolfcrypt/src/pkcs12.c ****     word32 encSz;
1800:../src/wolfcrypt/src/pkcs12.c **** 
1801:../src/wolfcrypt/src/pkcs12.c ****     byte seq[MAX_SEQ_SZ];
1802:../src/wolfcrypt/src/pkcs12.c **** 
1803:../src/wolfcrypt/src/pkcs12.c ****     WOLFSSL_MSG("encrypting PKCS12 content");
 5210                             		.loc 2 1803 5
 5211 0028 FB 12 04 05 00 00       		mov.L	#.LC41, r1
 5212 002e 05 00 00 00             		bsr	_WOLFSSL_MSG
1804:../src/wolfcrypt/src/pkcs12.c **** 
1805:../src/wolfcrypt/src/pkcs12.c ****     heap = wc_PKCS12_GetHeap(pkcs12);
 5213                             		.loc 2 1805 12
 5214 0032 ED A1 10                		mov.L	64[r10], r1
 5215 0035 05 00 00 00             		bsr	_wc_PKCS12_GetHeap
 5216 0039 E7 A1 04                		mov.L	r1, 16[r10]
1806:../src/wolfcrypt/src/pkcs12.c **** 
1807:../src/wolfcrypt/src/pkcs12.c ****     /* ENCRYPTED DATA
1808:../src/wolfcrypt/src/pkcs12.c ****      * ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC
1809:../src/wolfcrypt/src/pkcs12.c ****      * length
1810:../src/wolfcrypt/src/pkcs12.c ****      * sequence
1811:../src/wolfcrypt/src/pkcs12.c ****      * short int
1812:../src/wolfcrypt/src/pkcs12.c ****      * sequence
1813:../src/wolfcrypt/src/pkcs12.c ****      * get object id */
1814:../src/wolfcrypt/src/pkcs12.c ****     if (type == WC_PKCS12_ENCRYPTED_DATA) {
 5217                             		.loc 2 1814 8
 5218 003c A9 E5                   		mov.L	24[r6], r5
 5219 003e 76 05 90 02             		cmp	#0x290, r5
 5220 0042 3B A0 03                		bne	.L303
 5221                             	.LBB51:
1815:../src/wolfcrypt/src/pkcs12.c ****         word32 outerSz = 0;
 5222                             		.loc 2 1815 16
 5223 0045 F9 A6 05 00             		mov.L	#0, 20[r10]
1816:../src/wolfcrypt/src/pkcs12.c **** 
1817:../src/wolfcrypt/src/pkcs12.c ****         encSz = contentSz;
 5224                             		.loc 2 1817 15
 5225 0049 A8 6D                   		mov.L	4[r6], r5
 5226 004b E7 A5 0D                		mov.L	r5, 52[r10]
1818:../src/wolfcrypt/src/pkcs12.c ****         if ((ret = EncryptContent(NULL, contentSz, NULL, &encSz,
 5227                             		.loc 2 1818 20
 5228 004e 71 A5 34                		add	#52, r10, r5
 5229 0051 ED A4 04                		mov.L	16[r10], r4
 5230 0054 A2 04                   		mov.L	r4, 32[r0]
 5231 0056 ED A4 11                		mov.L	68[r10], r4
 5232 0059 A1 8C                   		mov.L	r4, 28[r0]
 5233 005b A9 6C                   		mov.L	20[r6], r4
 5234 005d A1 84                   		mov.L	r4, 24[r0]
 5235 005f 3E 05 00                		mov.L	#0, 20[r0]
 5236 0062 3E 04 00                		mov.L	#0, 16[r0]
 5237 0065 A8 E4                   		mov.L	8[r6], r4
 5238 0067 A0 8C                   		mov.L	r4, 12[r0]
 5239 0069 EC A4                   		mov.L	[r10], r4
 5240 006b A0 84                   		mov.L	r4, 8[r0]
 5241 006d A9 64                   		mov.L	16[r6], r4
 5242 006f A0 0C                   		mov.L	r4, 4[r0]
 5243 0071 A8 EC                   		mov.L	12[r6], r4
 5244 0073 E3 04                   		mov.L	r4, [r0]
 5245 0075 EF 54                   		mov.L	r5, r4
 5246 0077 66 03                   		mov.L	#0, r3
 5247 0079 A8 6A                   		mov.L	4[r6], r2
 5248 007b 66 01                   		mov.L	#0, r1
 5249 007d 05 00 00 00             		bsr	_EncryptContent
 5250 0081 E7 A1 06                		mov.L	r1, 24[r10]
 5251                             		.loc 2 1818 12
 5252 0084 ED A5 06                		mov.L	24[r10], r5
 5253 0087 61 05                   		cmp	#0, r5
 5254 0089 28 10                   		bge	.L304
1819:../src/wolfcrypt/src/pkcs12.c ****                    pass, passSz, vPKCS, vAlgo, NULL, 0, iter, rng, heap)) < 0) {
1820:../src/wolfcrypt/src/pkcs12.c ****             if (ret != LENGTH_ONLY_E) {
 5255                             		.loc 2 1820 16
 5256 008b ED A5 06                		mov.L	24[r10], r5
 5257 008e 76 05 36 FF             		cmp	#-202, r5
 5258 0092 17                      		beq	.L304
1821:../src/wolfcrypt/src/pkcs12.c ****                 return ret;
 5259                             		.loc 2 1821 24
 5260 0093 ED A5 06                		mov.L	24[r10], r5
 5261 0096 38 12 05                		bra	.L324
 5262                             	.L304:
1822:../src/wolfcrypt/src/pkcs12.c ****             }
1823:../src/wolfcrypt/src/pkcs12.c ****         }
1824:../src/wolfcrypt/src/pkcs12.c **** 
1825:../src/wolfcrypt/src/pkcs12.c ****         /* calculate size */
1826:../src/wolfcrypt/src/pkcs12.c ****         totalSz  = SetObjectId(sizeof(WC_PKCS12_ENCRYPTED_OID), seq);
 5263                             		.loc 2 1826 20
 5264 0099 71 A5 38                		add	#56, r10, r5
 5265 009c EF 52                   		mov.L	r5, r2
 5266 009e 66 91                   		mov.L	#9, r1
 5267 00a0 05 00 00 00             		bsr	_SetObjectId
 5268 00a4 EF 15                   		mov.L	r1, r5
 5269                             		.loc 2 1826 18
 5270 00a6 E7 A5 02                		mov.L	r5, 8[r10]
1827:../src/wolfcrypt/src/pkcs12.c ****         totalSz += sizeof(WC_PKCS12_ENCRYPTED_OID);
 5271                             		.loc 2 1827 17
 5272 00a9 ED A5 02                		mov.L	8[r10], r5
 5273 00ac 62 95                   		add	#9, r5
 5274 00ae E7 A5 02                		mov.L	r5, 8[r10]
1828:../src/wolfcrypt/src/pkcs12.c ****         totalSz += ASN_TAG_SZ;
 5275                             		.loc 2 1828 17
 5276 00b1 ED A5 02                		mov.L	8[r10], r5
 5277 00b4 62 15                   		add	#1, r5
 5278 00b6 E7 A5 02                		mov.L	r5, 8[r10]
1829:../src/wolfcrypt/src/pkcs12.c **** 
1830:../src/wolfcrypt/src/pkcs12.c ****         length  = SetMyVersion(0, seq, 0);
 5279                             		.loc 2 1830 19
 5280 00b9 71 A5 38                		add	#56, r10, r5
 5281 00bc 66 03                   		mov.L	#0, r3
 5282 00be EF 52                   		mov.L	r5, r2
 5283 00c0 66 01                   		mov.L	#0, r1
 5284 00c2 05 00 00 00             		bsr	_SetMyVersion
 5285 00c6 EF 15                   		mov.L	r1, r5
 5286                             		.loc 2 1830 17
 5287 00c8 E7 A5 03                		mov.L	r5, 12[r10]
1831:../src/wolfcrypt/src/pkcs12.c ****         tmpSz   = SetObjectId(sizeof(WC_PKCS12_DATA_OID), seq);
 5288                             		.loc 2 1831 19
 5289 00cb 71 A5 38                		add	#56, r10, r5
 5290 00ce EF 52                   		mov.L	r5, r2
 5291 00d0 66 91                   		mov.L	#9, r1
 5292 00d2 05 00 00 00             		bsr	_SetObjectId
 5293 00d6 EF 15                   		mov.L	r1, r5
 5294                             		.loc 2 1831 17
 5295 00d8 E7 A5 07                		mov.L	r5, 28[r10]
1832:../src/wolfcrypt/src/pkcs12.c ****         tmpSz  += sizeof(WC_PKCS12_DATA_OID);
 5296                             		.loc 2 1832 16
 5297 00db ED A5 07                		mov.L	28[r10], r5
 5298 00de 62 95                   		add	#9, r5
 5299 00e0 E7 A5 07                		mov.L	r5, 28[r10]
1833:../src/wolfcrypt/src/pkcs12.c ****         tmpSz  += encSz;
 5300                             		.loc 2 1833 16
 5301 00e3 ED A5 0D                		mov.L	52[r10], r5
 5302 00e6 ED A4 07                		mov.L	28[r10], r4
 5303 00e9 4B 45                   		add	r4, r5
 5304 00eb E7 A5 07                		mov.L	r5, 28[r10]
1834:../src/wolfcrypt/src/pkcs12.c ****         length += SetSequence(tmpSz, seq) + tmpSz;
 5305                             		.loc 2 1834 19
 5306 00ee 71 A5 38                		add	#56, r10, r5
 5307 00f1 EF 52                   		mov.L	r5, r2
 5308 00f3 ED A1 07                		mov.L	28[r10], r1
 5309 00f6 05 00 00 00             		bsr	_SetSequence
 5310 00fa EF 15                   		mov.L	r1, r5
 5311                             		.loc 2 1834 43
 5312 00fc 06 89 A5 07             		add	28[r10].L, r5
 5313                             		.loc 2 1834 16
 5314 0100 ED A4 03                		mov.L	12[r10], r4
 5315 0103 4B 45                   		add	r4, r5
 5316 0105 E7 A5 03                		mov.L	r5, 12[r10]
1835:../src/wolfcrypt/src/pkcs12.c ****         outerSz = SetSequence(length, seq) + length;
 5317                             		.loc 2 1835 19
 5318 0108 71 A5 38                		add	#56, r10, r5
 5319 010b EF 52                   		mov.L	r5, r2
 5320 010d ED A1 03                		mov.L	12[r10], r1
 5321 0110 05 00 00 00             		bsr	_SetSequence
 5322 0114 EF 15                   		mov.L	r1, r5
 5323                             		.loc 2 1835 17
 5324 0116 ED A4 03                		mov.L	12[r10], r4
 5325 0119 4B 45                   		add	r4, r5
 5326 011b E7 A5 05                		mov.L	r5, 20[r10]
1836:../src/wolfcrypt/src/pkcs12.c **** 
1837:../src/wolfcrypt/src/pkcs12.c ****         totalSz += SetLength(outerSz, seq) + outerSz;
 5327                             		.loc 2 1837 20
 5328 011e 71 A5 38                		add	#56, r10, r5
 5329 0121 EF 52                   		mov.L	r5, r2
 5330 0123 ED A1 05                		mov.L	20[r10], r1
 5331 0126 05 00 00 00             		bsr	_SetLength
 5332 012a EF 15                   		mov.L	r1, r5
 5333                             		.loc 2 1837 44
 5334 012c 06 89 A5 05             		add	20[r10].L, r5
 5335                             		.loc 2 1837 17
 5336 0130 ED A4 02                		mov.L	8[r10], r4
 5337 0133 4B 45                   		add	r4, r5
 5338 0135 E7 A5 02                		mov.L	r5, 8[r10]
1838:../src/wolfcrypt/src/pkcs12.c ****         if (out == NULL) {
 5339                             		.loc 2 1838 12
 5340 0138 ED A5 12                		mov.L	72[r10], r5
 5341 013b 61 05                   		cmp	#0, r5
 5342 013d 21 22                   		bne	.L306
1839:../src/wolfcrypt/src/pkcs12.c ****             *outSz = totalSz + SetSequence(totalSz, seq);
 5343                             		.loc 2 1839 32
 5344 013f 71 A5 38                		add	#56, r10, r5
 5345 0142 EF 52                   		mov.L	r5, r2
 5346 0144 ED A1 02                		mov.L	8[r10], r1
 5347 0147 05 00 00 00             		bsr	_SetSequence
 5348 014b EF 15                   		mov.L	r1, r5
 5349                             		.loc 2 1839 30
 5350 014d EF 54                   		mov.L	r5, r4
 5351 014f 06 89 A4 02             		add	8[r10].L, r4
 5352                             		.loc 2 1839 20
 5353 0153 ED A5 13                		mov.L	76[r10], r5
 5354 0156 E3 54                   		mov.L	r4, [r5]
1840:../src/wolfcrypt/src/pkcs12.c ****             return LENGTH_ONLY_E;
 5355                             		.loc 2 1840 20
 5356 0158 FB 5A 36 FF             		mov.L	#-202, r5
 5357 015c 38 4C 04                		bra	.L324
 5358                             	.L306:
1841:../src/wolfcrypt/src/pkcs12.c ****         }
1842:../src/wolfcrypt/src/pkcs12.c **** 
1843:../src/wolfcrypt/src/pkcs12.c ****         if (*outSz < totalSz + SetSequence(totalSz, seq)) {
 5359                             		.loc 2 1843 13
 5360 015f ED A5 13                		mov.L	76[r10], r5
 5361 0162 EC 5B                   		mov.L	[r5], r11
 5362                             		.loc 2 1843 32
 5363 0164 71 A5 38                		add	#56, r10, r5
 5364 0167 EF 52                   		mov.L	r5, r2
 5365 0169 ED A1 02                		mov.L	8[r10], r1
 5366 016c 05 00 00 00             		bsr	_SetSequence
 5367 0170 EF 15                   		mov.L	r1, r5
 5368                             		.loc 2 1843 30
 5369 0172 06 89 A5 02             		add	8[r10].L, r5
 5370                             		.loc 2 1843 12
 5371 0176 47 5B                   		cmp	r5, r11
 5372 0178 22 09                   		bgeu	.L307
1844:../src/wolfcrypt/src/pkcs12.c ****             return BUFFER_E;
 5373                             		.loc 2 1844 20
 5374 017a FB 5A 7C FF             		mov.L	#-132, r5
 5375 017e 38 2A 04                		bra	.L324
 5376                             	.L307:
1845:../src/wolfcrypt/src/pkcs12.c ****         }
1846:../src/wolfcrypt/src/pkcs12.c **** 
1847:../src/wolfcrypt/src/pkcs12.c ****         idx = 0;
 5377                             		.loc 2 1847 13
 5378 0181 F9 A6 01 00             		mov.L	#0, 4[r10]
1848:../src/wolfcrypt/src/pkcs12.c ****         idx += SetSequence(totalSz, out + idx);
 5379                             		.loc 2 1848 16
 5380 0185 ED A5 12                		mov.L	72[r10], r5
 5381 0188 06 89 A5 01             		add	4[r10].L, r5
 5382 018c EF 52                   		mov.L	r5, r2
 5383 018e ED A1 02                		mov.L	8[r10], r1
 5384 0191 05 00 00 00             		bsr	_SetSequence
 5385 0195 EF 15                   		mov.L	r1, r5
 5386                             		.loc 2 1848 13
 5387 0197 ED A4 01                		mov.L	4[r10], r4
 5388 019a 4B 45                   		add	r4, r5
 5389 019c E7 A5 01                		mov.L	r5, 4[r10]
1849:../src/wolfcrypt/src/pkcs12.c ****         idx += SetObjectId(sizeof(WC_PKCS12_ENCRYPTED_OID), out + idx);
 5390                             		.loc 2 1849 16
 5391 019f ED A5 12                		mov.L	72[r10], r5
 5392 01a2 06 89 A5 01             		add	4[r10].L, r5
 5393 01a6 EF 52                   		mov.L	r5, r2
 5394 01a8 66 91                   		mov.L	#9, r1
 5395 01aa 05 00 00 00             		bsr	_SetObjectId
 5396 01ae EF 15                   		mov.L	r1, r5
 5397                             		.loc 2 1849 13
 5398 01b0 ED A4 01                		mov.L	4[r10], r4
 5399 01b3 4B 45                   		add	r4, r5
 5400 01b5 E7 A5 01                		mov.L	r5, 4[r10]
1850:../src/wolfcrypt/src/pkcs12.c ****         if (idx + sizeof(WC_PKCS12_ENCRYPTED_OID) > *outSz){
 5401                             		.loc 2 1850 17
 5402 01b8 ED A5 01                		mov.L	4[r10], r5
 5403 01bb 62 95                   		add	#9, r5
 5404                             		.loc 2 1850 53
 5405 01bd ED A4 13                		mov.L	76[r10], r4
 5406 01c0 EC 44                   		mov.L	[r4], r4
 5407                             		.loc 2 1850 12
 5408 01c2 47 45                   		cmp	r4, r5
 5409 01c4 25 09                   		bleu	.L308
1851:../src/wolfcrypt/src/pkcs12.c ****             return BUFFER_E;
 5410                             		.loc 2 1851 20
 5411 01c6 FB 5A 7C FF             		mov.L	#-132, r5
 5412 01ca 38 DE 03                		bra	.L324
 5413                             	.L308:
1852:../src/wolfcrypt/src/pkcs12.c ****         }
1853:../src/wolfcrypt/src/pkcs12.c ****         XMEMCPY(out + idx, WC_PKCS12_ENCRYPTED_OID,
 5414                             		.loc 2 1853 9
 5415 01cd ED A5 12                		mov.L	72[r10], r5
 5416 01d0 EF 54                   		mov.L	r5, r4
 5417 01d2 06 89 A4 01             		add	4[r10].L, r4
 5418 01d6 FB 52 00 00 00 00       		mov.L	#_WC_PKCS12_ENCRYPTED_OID, r5
 5419 01dc EC 53                   		mov.L	[r5], r3
 5420 01de E3 43                   		mov.L	r3, [r4]
 5421 01e0 62 44                   		add	#4, r4
 5422 01e2 62 45                   		add	#4, r5
 5423 01e4 EC 53                   		mov.L	[r5], r3
 5424 01e6 E3 43                   		mov.L	r3, [r4]
 5425 01e8 62 44                   		add	#4, r4
 5426 01ea 62 45                   		add	#4, r5
 5427 01ec CC 53                   		mov.B	[r5], r3
 5428 01ee C3 43                   		mov.B	r3, [r4]
 5429 01f0 62 14                   		add	#1, r4
 5430 01f2 62 15                   		add	#1, r5
1854:../src/wolfcrypt/src/pkcs12.c ****                 sizeof(WC_PKCS12_ENCRYPTED_OID));
1855:../src/wolfcrypt/src/pkcs12.c ****         idx += sizeof(WC_PKCS12_ENCRYPTED_OID);
 5431                             		.loc 2 1855 13
 5432 01f4 ED A5 01                		mov.L	4[r10], r5
 5433 01f7 62 95                   		add	#9, r5
 5434 01f9 E7 A5 01                		mov.L	r5, 4[r10]
1856:../src/wolfcrypt/src/pkcs12.c **** 
1857:../src/wolfcrypt/src/pkcs12.c ****         if (idx + 1 > *outSz){
 5435                             		.loc 2 1857 17
 5436 01fc ED A5 01                		mov.L	4[r10], r5
 5437 01ff 62 15                   		add	#1, r5
 5438                             		.loc 2 1857 23
 5439 0201 ED A4 13                		mov.L	76[r10], r4
 5440 0204 EC 44                   		mov.L	[r4], r4
 5441                             		.loc 2 1857 12
 5442 0206 47 45                   		cmp	r4, r5
 5443 0208 25 09                   		bleu	.L309
1858:../src/wolfcrypt/src/pkcs12.c ****             return BUFFER_E;
 5444                             		.loc 2 1858 20
 5445 020a FB 5A 7C FF             		mov.L	#-132, r5
 5446 020e 38 9A 03                		bra	.L324
 5447                             	.L309:
1859:../src/wolfcrypt/src/pkcs12.c ****         }
1860:../src/wolfcrypt/src/pkcs12.c ****         out[idx++] = (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC);
 5448                             		.loc 2 1860 16
 5449 0211 ED A5 01                		mov.L	4[r10], r5
 5450 0214 71 54 01                		add	#1, r5, r4
 5451 0217 E7 A4 01                		mov.L	r4, 4[r10]
 5452                             		.loc 2 1860 12
 5453 021a ED A4 12                		mov.L	72[r10], r4
 5454 021d 4B 45                   		add	r4, r5
 5455                             		.loc 2 1860 20
 5456 021f F8 54 A0                		mov.B	#-96, [r5]
1861:../src/wolfcrypt/src/pkcs12.c ****         idx += SetLength(outerSz, out + idx);
 5457                             		.loc 2 1861 16
 5458 0222 ED A5 12                		mov.L	72[r10], r5
 5459 0225 06 89 A5 01             		add	4[r10].L, r5
 5460 0229 EF 52                   		mov.L	r5, r2
 5461 022b ED A1 05                		mov.L	20[r10], r1
 5462 022e 05 00 00 00             		bsr	_SetLength
 5463 0232 EF 15                   		mov.L	r1, r5
 5464                             		.loc 2 1861 13
 5465 0234 ED A4 01                		mov.L	4[r10], r4
 5466 0237 4B 45                   		add	r4, r5
 5467 0239 E7 A5 01                		mov.L	r5, 4[r10]
1862:../src/wolfcrypt/src/pkcs12.c **** 
1863:../src/wolfcrypt/src/pkcs12.c ****         idx += SetSequence(length, out + idx);
 5468                             		.loc 2 1863 16
 5469 023c ED A5 12                		mov.L	72[r10], r5
 5470 023f 06 89 A5 01             		add	4[r10].L, r5
 5471 0243 EF 52                   		mov.L	r5, r2
 5472 0245 ED A1 03                		mov.L	12[r10], r1
 5473 0248 05 00 00 00             		bsr	_SetSequence
 5474 024c EF 15                   		mov.L	r1, r5
 5475                             		.loc 2 1863 13
 5476 024e ED A4 01                		mov.L	4[r10], r4
 5477 0251 4B 45                   		add	r4, r5
 5478 0253 E7 A5 01                		mov.L	r5, 4[r10]
1864:../src/wolfcrypt/src/pkcs12.c ****         idx += SetMyVersion(0, out + idx, 0);
 5479                             		.loc 2 1864 16
 5480 0256 ED A5 12                		mov.L	72[r10], r5
 5481 0259 06 89 A5 01             		add	4[r10].L, r5
 5482 025d 66 03                   		mov.L	#0, r3
 5483 025f EF 52                   		mov.L	r5, r2
 5484 0261 66 01                   		mov.L	#0, r1
 5485 0263 05 00 00 00             		bsr	_SetMyVersion
 5486 0267 EF 15                   		mov.L	r1, r5
 5487                             		.loc 2 1864 13
 5488 0269 ED A4 01                		mov.L	4[r10], r4
 5489 026c 4B 45                   		add	r4, r5
 5490 026e E7 A5 01                		mov.L	r5, 4[r10]
1865:../src/wolfcrypt/src/pkcs12.c ****         tmp = (byte*)XMALLOC(encSz, heap, DYNAMIC_TYPE_TMP_BUFFER);
 5491                             		.loc 2 1865 22
 5492 0271 ED A5 0D                		mov.L	52[r10], r5
 5493 0274 EF 51                   		mov.L	r5, r1
 5494 0276 05 00 00 00             		bsr	_wolfSSL_Malloc
 5495 027a E7 A1 08                		mov.L	r1, 32[r10]
1866:../src/wolfcrypt/src/pkcs12.c ****         if (tmp == NULL) {
 5496                             		.loc 2 1866 12
 5497 027d ED A5 08                		mov.L	32[r10], r5
 5498 0280 61 05                   		cmp	#0, r5
 5499 0282 1F                      		bne	.L310
1867:../src/wolfcrypt/src/pkcs12.c ****             return MEMORY_E;
 5500                             		.loc 2 1867 20
 5501 0283 FB 56 83                		mov.L	#-125, r5
 5502 0286 38 22 03                		bra	.L324
 5503                             	.L310:
1868:../src/wolfcrypt/src/pkcs12.c ****         }
1869:../src/wolfcrypt/src/pkcs12.c **** 
1870:../src/wolfcrypt/src/pkcs12.c ****         if ((ret = EncryptContent(content, contentSz, tmp, &encSz,
 5504                             		.loc 2 1870 20
 5505 0289 71 A5 34                		add	#52, r10, r5
 5506 028c ED A4 04                		mov.L	16[r10], r4
 5507 028f A2 04                   		mov.L	r4, 32[r0]
 5508 0291 ED A4 11                		mov.L	68[r10], r4
 5509 0294 A1 8C                   		mov.L	r4, 28[r0]
 5510 0296 A9 6C                   		mov.L	20[r6], r4
 5511 0298 A1 84                   		mov.L	r4, 24[r0]
 5512 029a 3E 05 00                		mov.L	#0, 20[r0]
 5513 029d 3E 04 00                		mov.L	#0, 16[r0]
 5514 02a0 A8 E4                   		mov.L	8[r6], r4
 5515 02a2 A0 8C                   		mov.L	r4, 12[r0]
 5516 02a4 EC A4                   		mov.L	[r10], r4
 5517 02a6 A0 84                   		mov.L	r4, 8[r0]
 5518 02a8 A9 64                   		mov.L	16[r6], r4
 5519 02aa A0 0C                   		mov.L	r4, 4[r0]
 5520 02ac A8 EC                   		mov.L	12[r6], r4
 5521 02ae E3 04                   		mov.L	r4, [r0]
 5522 02b0 EF 54                   		mov.L	r5, r4
 5523 02b2 ED A3 08                		mov.L	32[r10], r3
 5524 02b5 A8 6A                   		mov.L	4[r6], r2
 5525 02b7 EC 61                   		mov.L	[r6], r1
 5526 02b9 05 00 00 00             		bsr	_EncryptContent
 5527 02bd E7 A1 06                		mov.L	r1, 24[r10]
 5528                             		.loc 2 1870 12
 5529 02c0 ED A5 06                		mov.L	24[r10], r5
 5530 02c3 61 05                   		cmp	#0, r5
 5531 02c5 28 1B                   		bge	.L311
 5532                             	.LBB52:
1871:../src/wolfcrypt/src/pkcs12.c ****                    pass, passSz, vPKCS, vAlgo, NULL, 0, iter, rng, heap)) < 0) {
1872:../src/wolfcrypt/src/pkcs12.c ****             XFREE(tmp, heap, DYNAMIC_TYPE_TMP_BUFFER);
 5533                             		.loc 2 1872 13
 5534 02c7 ED A5 08                		mov.L	32[r10], r5
 5535 02ca E7 A5 09                		mov.L	r5, 36[r10]
 5536 02cd ED A5 09                		mov.L	36[r10], r5
 5537 02d0 61 05                   		cmp	#0, r5
 5538 02d2 10                      		beq	.L312
 5539                             		.loc 2 1872 13 is_stmt 0 discriminator 1
 5540 02d3 ED A1 09                		mov.L	36[r10], r1
 5541 02d6 05 00 00 00             		bsr	_wolfSSL_Free
 5542                             	.L312:
 5543                             	.LBE52:
1873:../src/wolfcrypt/src/pkcs12.c ****             return ret;
 5544                             		.loc 2 1873 20 is_stmt 1
 5545 02da ED A5 06                		mov.L	24[r10], r5
 5546 02dd 38 CB 02                		bra	.L324
 5547                             	.L311:
1874:../src/wolfcrypt/src/pkcs12.c ****         }
1875:../src/wolfcrypt/src/pkcs12.c ****         encSz = ret;
 5548                             		.loc 2 1875 15
 5549 02e0 ED A5 06                		mov.L	24[r10], r5
 5550 02e3 E7 A5 0D                		mov.L	r5, 52[r10]
1876:../src/wolfcrypt/src/pkcs12.c **** 
1877:../src/wolfcrypt/src/pkcs12.c ****         #ifdef WOLFSSL_DEBUG_PKCS12
1878:../src/wolfcrypt/src/pkcs12.c ****         {
1879:../src/wolfcrypt/src/pkcs12.c ****             byte* p;
1880:../src/wolfcrypt/src/pkcs12.c ****             for (printf("(size %u) Encrypted Content = ", encSz),
1881:../src/wolfcrypt/src/pkcs12.c ****                     p = (byte*)tmp;
1882:../src/wolfcrypt/src/pkcs12.c ****                 p < (byte*)tmp + encSz;
1883:../src/wolfcrypt/src/pkcs12.c ****                 printf("%02X", *p), p++);
1884:../src/wolfcrypt/src/pkcs12.c ****             printf("\n");
1885:../src/wolfcrypt/src/pkcs12.c ****         }
1886:../src/wolfcrypt/src/pkcs12.c ****         #endif
1887:../src/wolfcrypt/src/pkcs12.c **** 
1888:../src/wolfcrypt/src/pkcs12.c ****         idx += SetSequence(WC_PKCS12_DATA_OBJ_SZ + encSz, out + idx);
 5551                             		.loc 2 1888 16
 5552 02e6 ED A5 0D                		mov.L	52[r10], r5
 5553 02e9 71 54 0B                		add	#11, r5, r4
 5554 02ec ED A5 12                		mov.L	72[r10], r5
 5555 02ef 06 89 A5 01             		add	4[r10].L, r5
 5556 02f3 EF 52                   		mov.L	r5, r2
 5557 02f5 EF 41                   		mov.L	r4, r1
 5558 02f7 05 00 00 00             		bsr	_SetSequence
 5559 02fb EF 15                   		mov.L	r1, r5
 5560                             		.loc 2 1888 13
 5561 02fd ED A4 01                		mov.L	4[r10], r4
 5562 0300 4B 45                   		add	r4, r5
 5563 0302 E7 A5 01                		mov.L	r5, 4[r10]
1889:../src/wolfcrypt/src/pkcs12.c ****         idx += SetObjectId(sizeof(WC_PKCS12_DATA_OID), out + idx);
 5564                             		.loc 2 1889 16
 5565 0305 ED A5 12                		mov.L	72[r10], r5
 5566 0308 06 89 A5 01             		add	4[r10].L, r5
 5567 030c EF 52                   		mov.L	r5, r2
 5568 030e 66 91                   		mov.L	#9, r1
 5569 0310 05 00 00 00             		bsr	_SetObjectId
 5570 0314 EF 15                   		mov.L	r1, r5
 5571                             		.loc 2 1889 13
 5572 0316 ED A4 01                		mov.L	4[r10], r4
 5573 0319 4B 45                   		add	r4, r5
 5574 031b E7 A5 01                		mov.L	r5, 4[r10]
1890:../src/wolfcrypt/src/pkcs12.c ****         if (idx + sizeof(WC_PKCS12_DATA_OID) > *outSz){
 5575                             		.loc 2 1890 17
 5576 031e ED A5 01                		mov.L	4[r10], r5
 5577 0321 62 95                   		add	#9, r5
 5578                             		.loc 2 1890 48
 5579 0323 ED A4 13                		mov.L	76[r10], r4
 5580 0326 EC 44                   		mov.L	[r4], r4
 5581                             		.loc 2 1890 12
 5582 0328 47 45                   		cmp	r4, r5
 5583 032a 25 26                   		bleu	.L313
1891:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Buffer not large enough for DATA OID");
 5584                             		.loc 2 1891 13
 5585 032c FB 12 1E 05 00 00       		mov.L	#.LC42, r1
 5586 0332 05 00 00 00             		bsr	_WOLFSSL_MSG
 5587                             	.LBB53:
1892:../src/wolfcrypt/src/pkcs12.c ****             XFREE(tmp, heap, DYNAMIC_TYPE_TMP_BUFFER);
 5588                             		.loc 2 1892 13
 5589 0336 ED A5 08                		mov.L	32[r10], r5
 5590 0339 E7 A5 0A                		mov.L	r5, 40[r10]
 5591 033c ED A5 0A                		mov.L	40[r10], r5
 5592 033f 61 05                   		cmp	#0, r5
 5593 0341 10                      		beq	.L314
 5594                             		.loc 2 1892 13 is_stmt 0 discriminator 1
 5595 0342 ED A1 0A                		mov.L	40[r10], r1
 5596 0345 05 00 00 00             		bsr	_wolfSSL_Free
 5597                             	.L314:
 5598                             	.LBE53:
1893:../src/wolfcrypt/src/pkcs12.c ****             return BUFFER_E;
 5599                             		.loc 2 1893 20 is_stmt 1
 5600 0349 FB 5A 7C FF             		mov.L	#-132, r5
 5601 034d 38 5B 02                		bra	.L324
 5602                             	.L313:
1894:../src/wolfcrypt/src/pkcs12.c ****         }
1895:../src/wolfcrypt/src/pkcs12.c ****         XMEMCPY(out + idx, WC_PKCS12_DATA_OID, sizeof(WC_PKCS12_DATA_OID));
 5603                             		.loc 2 1895 9
 5604 0350 ED A5 12                		mov.L	72[r10], r5
 5605 0353 EF 54                   		mov.L	r5, r4
 5606 0355 06 89 A4 01             		add	4[r10].L, r4
 5607 0359 FB 52 00 00 00 00       		mov.L	#_WC_PKCS12_DATA_OID, r5
 5608 035f EC 53                   		mov.L	[r5], r3
 5609 0361 E3 43                   		mov.L	r3, [r4]
 5610 0363 62 44                   		add	#4, r4
 5611 0365 62 45                   		add	#4, r5
 5612 0367 EC 53                   		mov.L	[r5], r3
 5613 0369 E3 43                   		mov.L	r3, [r4]
 5614 036b 62 44                   		add	#4, r4
 5615 036d 62 45                   		add	#4, r5
 5616 036f CC 53                   		mov.B	[r5], r3
 5617 0371 C3 43                   		mov.B	r3, [r4]
 5618 0373 62 14                   		add	#1, r4
 5619 0375 62 15                   		add	#1, r5
1896:../src/wolfcrypt/src/pkcs12.c ****         idx += sizeof(WC_PKCS12_DATA_OID);
 5620                             		.loc 2 1896 13
 5621 0377 ED A5 01                		mov.L	4[r10], r5
 5622 037a 62 95                   		add	#9, r5
 5623 037c E7 A5 01                		mov.L	r5, 4[r10]
1897:../src/wolfcrypt/src/pkcs12.c **** 
1898:../src/wolfcrypt/src/pkcs12.c ****         /* copy over encrypted data */
1899:../src/wolfcrypt/src/pkcs12.c ****         if (idx + encSz > *outSz){
 5624                             		.loc 2 1899 17
 5625 037f ED A5 0D                		mov.L	52[r10], r5
 5626 0382 06 89 A5 01             		add	4[r10].L, r5
 5627                             		.loc 2 1899 27
 5628 0386 ED A4 13                		mov.L	76[r10], r4
 5629 0389 EC 44                   		mov.L	[r4], r4
 5630                             		.loc 2 1899 12
 5631 038b 47 45                   		cmp	r4, r5
 5632 038d 25 1C                   		bleu	.L315
 5633                             	.LBB54:
1900:../src/wolfcrypt/src/pkcs12.c ****             XFREE(tmp, heap, DYNAMIC_TYPE_TMP_BUFFER);
 5634                             		.loc 2 1900 13
 5635 038f ED A5 08                		mov.L	32[r10], r5
 5636 0392 E7 A5 0B                		mov.L	r5, 44[r10]
 5637 0395 ED A5 0B                		mov.L	44[r10], r5
 5638 0398 61 05                   		cmp	#0, r5
 5639 039a 10                      		beq	.L316
 5640                             		.loc 2 1900 13 is_stmt 0 discriminator 1
 5641 039b ED A1 0B                		mov.L	44[r10], r1
 5642 039e 05 00 00 00             		bsr	_wolfSSL_Free
 5643                             	.L316:
 5644                             	.LBE54:
1901:../src/wolfcrypt/src/pkcs12.c ****             return BUFFER_E;
 5645                             		.loc 2 1901 20 is_stmt 1
 5646 03a2 FB 5A 7C FF             		mov.L	#-132, r5
 5647 03a6 38 02 02                		bra	.L324
 5648                             	.L315:
1902:../src/wolfcrypt/src/pkcs12.c ****         }
1903:../src/wolfcrypt/src/pkcs12.c ****         XMEMCPY(out + idx, tmp, encSz);
 5649                             		.loc 2 1903 9
 5650 03a9 ED A5 12                		mov.L	72[r10], r5
 5651 03ac 06 89 A5 01             		add	4[r10].L, r5
 5652 03b0 ED A4 0D                		mov.L	52[r10], r4
 5653 03b3 EF 43                   		mov.L	r4, r3
 5654 03b5 ED A2 08                		mov.L	32[r10], r2
 5655 03b8 EF 51                   		mov.L	r5, r1
 5656 03ba 05 00 00 00             		bsr	_memcpy
 5657                             	.LBB55:
1904:../src/wolfcrypt/src/pkcs12.c ****         XFREE(tmp, heap, DYNAMIC_TYPE_TMP_BUFFER);
 5658                             		.loc 2 1904 9
 5659 03be ED A5 08                		mov.L	32[r10], r5
 5660 03c1 E7 A5 0C                		mov.L	r5, 48[r10]
 5661 03c4 ED A5 0C                		mov.L	48[r10], r5
 5662 03c7 61 05                   		cmp	#0, r5
 5663 03c9 10                      		beq	.L317
 5664                             		.loc 2 1904 9 is_stmt 0 discriminator 1
 5665 03ca ED A1 0C                		mov.L	48[r10], r1
 5666 03cd 05 00 00 00             		bsr	_wolfSSL_Free
 5667                             	.L317:
 5668                             	.LBE55:
1905:../src/wolfcrypt/src/pkcs12.c ****         idx += encSz;
 5669                             		.loc 2 1905 13 is_stmt 1
 5670 03d1 ED A5 0D                		mov.L	52[r10], r5
 5671 03d4 ED A4 01                		mov.L	4[r10], r4
 5672 03d7 4B 45                   		add	r4, r5
 5673 03d9 E7 A5 01                		mov.L	r5, 4[r10]
1906:../src/wolfcrypt/src/pkcs12.c ****         return idx;
 5674                             		.loc 2 1906 16
 5675 03dc ED A5 01                		mov.L	4[r10], r5
 5676 03df 38 C9 01                		bra	.L324
 5677                             	.L303:
 5678                             	.LBE51:
1907:../src/wolfcrypt/src/pkcs12.c ****     }
1908:../src/wolfcrypt/src/pkcs12.c **** 
1909:../src/wolfcrypt/src/pkcs12.c ****     /* DATA
1910:../src/wolfcrypt/src/pkcs12.c ****      * ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC
1911:../src/wolfcrypt/src/pkcs12.c ****      * length
1912:../src/wolfcrypt/src/pkcs12.c ****      * ASN_OCTET_STRING
1913:../src/wolfcrypt/src/pkcs12.c ****      * length
1914:../src/wolfcrypt/src/pkcs12.c ****      * sequence containing all bags */
1915:../src/wolfcrypt/src/pkcs12.c ****     if (type == WC_PKCS12_DATA) {
 5679                             		.loc 2 1915 8
 5680 03e2 A9 E5                   		mov.L	24[r6], r5
 5681 03e4 76 05 8B 02             		cmp	#0x28b, r5
 5682 03e8 3B B2 01                		bne	.L318
1916:../src/wolfcrypt/src/pkcs12.c ****         /* calculate size */
1917:../src/wolfcrypt/src/pkcs12.c ****         totalSz = SetObjectId(sizeof(WC_PKCS12_DATA_OID), seq);
 5683                             		.loc 2 1917 19
 5684 03eb 71 A5 38                		add	#56, r10, r5
 5685 03ee EF 52                   		mov.L	r5, r2
 5686 03f0 66 91                   		mov.L	#9, r1
 5687 03f2 05 00 00 00             		bsr	_SetObjectId
 5688 03f6 EF 15                   		mov.L	r1, r5
 5689                             		.loc 2 1917 17
 5690 03f8 E7 A5 02                		mov.L	r5, 8[r10]
1918:../src/wolfcrypt/src/pkcs12.c ****         totalSz += sizeof(WC_PKCS12_DATA_OID);
 5691                             		.loc 2 1918 17
 5692 03fb ED A5 02                		mov.L	8[r10], r5
 5693 03fe 62 95                   		add	#9, r5
 5694 0400 E7 A5 02                		mov.L	r5, 8[r10]
1919:../src/wolfcrypt/src/pkcs12.c ****         totalSz += ASN_TAG_SZ;
 5695                             		.loc 2 1919 17
 5696 0403 ED A5 02                		mov.L	8[r10], r5
 5697 0406 62 15                   		add	#1, r5
 5698 0408 E7 A5 02                		mov.L	r5, 8[r10]
1920:../src/wolfcrypt/src/pkcs12.c **** 
1921:../src/wolfcrypt/src/pkcs12.c ****         length   = SetOctetString(contentSz, seq);
 5699                             		.loc 2 1921 20
 5700 040b 71 A5 38                		add	#56, r10, r5
 5701 040e EF 52                   		mov.L	r5, r2
 5702 0410 A8 69                   		mov.L	4[r6], r1
 5703 0412 05 00 00 00             		bsr	_SetOctetString
 5704 0416 E7 A1 03                		mov.L	r1, 12[r10]
1922:../src/wolfcrypt/src/pkcs12.c ****         length  += contentSz;
 5705                             		.loc 2 1922 17
 5706 0419 ED A5 03                		mov.L	12[r10], r5
 5707 041c 06 89 65 01             		add	4[r6].L, r5
 5708 0420 E7 A5 03                		mov.L	r5, 12[r10]
1923:../src/wolfcrypt/src/pkcs12.c ****         totalSz += SetLength(length, seq);
 5709                             		.loc 2 1923 20
 5710 0423 71 A5 38                		add	#56, r10, r5
 5711 0426 EF 52                   		mov.L	r5, r2
 5712 0428 ED A1 03                		mov.L	12[r10], r1
 5713 042b 05 00 00 00             		bsr	_SetLength
 5714 042f EF 15                   		mov.L	r1, r5
 5715                             		.loc 2 1923 17
 5716 0431 ED A4 02                		mov.L	8[r10], r4
 5717 0434 4B 45                   		add	r4, r5
 5718 0436 E7 A5 02                		mov.L	r5, 8[r10]
1924:../src/wolfcrypt/src/pkcs12.c ****         totalSz += length;
 5719                             		.loc 2 1924 17
 5720 0439 ED A5 02                		mov.L	8[r10], r5
 5721 043c 06 89 A5 03             		add	12[r10].L, r5
 5722 0440 E7 A5 02                		mov.L	r5, 8[r10]
1925:../src/wolfcrypt/src/pkcs12.c **** 
1926:../src/wolfcrypt/src/pkcs12.c ****         if (out == NULL) {
 5723                             		.loc 2 1926 12
 5724 0443 ED A5 12                		mov.L	72[r10], r5
 5725 0446 61 05                   		cmp	#0, r5
 5726 0448 21 22                   		bne	.L319
1927:../src/wolfcrypt/src/pkcs12.c ****             *outSz = totalSz + SetSequence(totalSz, seq);
 5727                             		.loc 2 1927 32
 5728 044a 71 A5 38                		add	#56, r10, r5
 5729 044d EF 52                   		mov.L	r5, r2
 5730 044f ED A1 02                		mov.L	8[r10], r1
 5731 0452 05 00 00 00             		bsr	_SetSequence
 5732 0456 EF 15                   		mov.L	r1, r5
 5733                             		.loc 2 1927 30
 5734 0458 EF 54                   		mov.L	r5, r4
 5735 045a 06 89 A4 02             		add	8[r10].L, r4
 5736                             		.loc 2 1927 20
 5737 045e ED A5 13                		mov.L	76[r10], r5
 5738 0461 E3 54                   		mov.L	r4, [r5]
1928:../src/wolfcrypt/src/pkcs12.c ****             return LENGTH_ONLY_E;
 5739                             		.loc 2 1928 20
 5740 0463 FB 5A 36 FF             		mov.L	#-202, r5
 5741 0467 38 41 01                		bra	.L324
 5742                             	.L319:
1929:../src/wolfcrypt/src/pkcs12.c ****         }
1930:../src/wolfcrypt/src/pkcs12.c **** 
1931:../src/wolfcrypt/src/pkcs12.c ****         if (*outSz < (totalSz + SetSequence(totalSz, seq))) {
 5743                             		.loc 2 1931 13
 5744 046a ED A5 13                		mov.L	76[r10], r5
 5745 046d EC 5B                   		mov.L	[r5], r11
 5746                             		.loc 2 1931 33
 5747 046f 71 A5 38                		add	#56, r10, r5
 5748 0472 EF 52                   		mov.L	r5, r2
 5749 0474 ED A1 02                		mov.L	8[r10], r1
 5750 0477 05 00 00 00             		bsr	_SetSequence
 5751 047b EF 15                   		mov.L	r1, r5
 5752                             		.loc 2 1931 31
 5753 047d 06 89 A5 02             		add	8[r10].L, r5
 5754                             		.loc 2 1931 12
 5755 0481 47 5B                   		cmp	r5, r11
 5756 0483 22 09                   		bgeu	.L320
1932:../src/wolfcrypt/src/pkcs12.c ****             return BUFFER_E;
 5757                             		.loc 2 1932 20
 5758 0485 FB 5A 7C FF             		mov.L	#-132, r5
 5759 0489 38 1F 01                		bra	.L324
 5760                             	.L320:
1933:../src/wolfcrypt/src/pkcs12.c ****         }
1934:../src/wolfcrypt/src/pkcs12.c **** 
1935:../src/wolfcrypt/src/pkcs12.c ****         /* place data in output buffer */
1936:../src/wolfcrypt/src/pkcs12.c ****         idx  = 0;
 5761                             		.loc 2 1936 14
 5762 048c F9 A6 01 00             		mov.L	#0, 4[r10]
1937:../src/wolfcrypt/src/pkcs12.c ****         idx += SetSequence(totalSz, out);
 5763                             		.loc 2 1937 16
 5764 0490 ED A2 12                		mov.L	72[r10], r2
 5765 0493 ED A1 02                		mov.L	8[r10], r1
 5766 0496 05 00 00 00             		bsr	_SetSequence
 5767 049a EF 15                   		mov.L	r1, r5
 5768                             		.loc 2 1937 13
 5769 049c ED A4 01                		mov.L	4[r10], r4
 5770 049f 4B 45                   		add	r4, r5
 5771 04a1 E7 A5 01                		mov.L	r5, 4[r10]
1938:../src/wolfcrypt/src/pkcs12.c ****         idx += SetObjectId(sizeof(WC_PKCS12_DATA_OID), out + idx);
 5772                             		.loc 2 1938 16
 5773 04a4 ED A5 12                		mov.L	72[r10], r5
 5774 04a7 06 89 A5 01             		add	4[r10].L, r5
 5775 04ab EF 52                   		mov.L	r5, r2
 5776 04ad 66 91                   		mov.L	#9, r1
 5777 04af 05 00 00 00             		bsr	_SetObjectId
 5778 04b3 EF 15                   		mov.L	r1, r5
 5779                             		.loc 2 1938 13
 5780 04b5 ED A4 01                		mov.L	4[r10], r4
 5781 04b8 4B 45                   		add	r4, r5
 5782 04ba E7 A5 01                		mov.L	r5, 4[r10]
1939:../src/wolfcrypt/src/pkcs12.c ****         if (idx + sizeof(WC_PKCS12_DATA_OID) > *outSz){
 5783                             		.loc 2 1939 17
 5784 04bd ED A5 01                		mov.L	4[r10], r5
 5785 04c0 62 95                   		add	#9, r5
 5786                             		.loc 2 1939 48
 5787 04c2 ED A4 13                		mov.L	76[r10], r4
 5788 04c5 EC 44                   		mov.L	[r4], r4
 5789                             		.loc 2 1939 12
 5790 04c7 47 45                   		cmp	r4, r5
 5791 04c9 25 13                   		bleu	.L321
1940:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Buffer not large enough for DATA OID");
 5792                             		.loc 2 1940 13
 5793 04cb FB 12 1E 05 00 00       		mov.L	#.LC42, r1
 5794 04d1 05 00 00 00             		bsr	_WOLFSSL_MSG
1941:../src/wolfcrypt/src/pkcs12.c ****             return BUFFER_E;
 5795                             		.loc 2 1941 20
 5796 04d5 FB 5A 7C FF             		mov.L	#-132, r5
 5797 04d9 38 CF 00                		bra	.L324
 5798                             	.L321:
1942:../src/wolfcrypt/src/pkcs12.c ****         }
1943:../src/wolfcrypt/src/pkcs12.c ****         XMEMCPY(out + idx, WC_PKCS12_DATA_OID, sizeof(WC_PKCS12_DATA_OID));
 5799                             		.loc 2 1943 9
 5800 04dc ED A5 12                		mov.L	72[r10], r5
 5801 04df EF 54                   		mov.L	r5, r4
 5802 04e1 06 89 A4 01             		add	4[r10].L, r4
 5803 04e5 FB 52 00 00 00 00       		mov.L	#_WC_PKCS12_DATA_OID, r5
 5804 04eb EC 53                   		mov.L	[r5], r3
 5805 04ed E3 43                   		mov.L	r3, [r4]
 5806 04ef 62 44                   		add	#4, r4
 5807 04f1 62 45                   		add	#4, r5
 5808 04f3 EC 53                   		mov.L	[r5], r3
 5809 04f5 E3 43                   		mov.L	r3, [r4]
 5810 04f7 62 44                   		add	#4, r4
 5811 04f9 62 45                   		add	#4, r5
 5812 04fb CC 53                   		mov.B	[r5], r3
 5813 04fd C3 43                   		mov.B	r3, [r4]
 5814 04ff 62 14                   		add	#1, r4
 5815 0501 62 15                   		add	#1, r5
1944:../src/wolfcrypt/src/pkcs12.c ****         idx += sizeof(WC_PKCS12_DATA_OID);
 5816                             		.loc 2 1944 13
 5817 0503 ED A5 01                		mov.L	4[r10], r5
 5818 0506 62 95                   		add	#9, r5
 5819 0508 E7 A5 01                		mov.L	r5, 4[r10]
1945:../src/wolfcrypt/src/pkcs12.c **** 
1946:../src/wolfcrypt/src/pkcs12.c ****         if (idx + 1 > *outSz){
 5820                             		.loc 2 1946 17
 5821 050b ED A5 01                		mov.L	4[r10], r5
 5822 050e 62 15                   		add	#1, r5
 5823                             		.loc 2 1946 23
 5824 0510 ED A4 13                		mov.L	76[r10], r4
 5825 0513 EC 44                   		mov.L	[r4], r4
 5826                             		.loc 2 1946 12
 5827 0515 47 45                   		cmp	r4, r5
 5828 0517 25 09                   		bleu	.L322
1947:../src/wolfcrypt/src/pkcs12.c ****             return BUFFER_E;
 5829                             		.loc 2 1947 20
 5830 0519 FB 5A 7C FF             		mov.L	#-132, r5
 5831 051d 38 8B 00                		bra	.L324
 5832                             	.L322:
1948:../src/wolfcrypt/src/pkcs12.c ****         }
1949:../src/wolfcrypt/src/pkcs12.c ****         out[idx++] = (ASN_CONSTRUCTED | ASN_CONTEXT_SPECIFIC);
 5833                             		.loc 2 1949 16
 5834 0520 ED A5 01                		mov.L	4[r10], r5
 5835 0523 71 54 01                		add	#1, r5, r4
 5836 0526 E7 A4 01                		mov.L	r4, 4[r10]
 5837                             		.loc 2 1949 12
 5838 0529 ED A4 12                		mov.L	72[r10], r4
 5839 052c 4B 45                   		add	r4, r5
 5840                             		.loc 2 1949 20
 5841 052e F8 54 A0                		mov.B	#-96, [r5]
1950:../src/wolfcrypt/src/pkcs12.c ****         idx += SetLength(length, out + idx);
 5842                             		.loc 2 1950 16
 5843 0531 ED A5 12                		mov.L	72[r10], r5
 5844 0534 06 89 A5 01             		add	4[r10].L, r5
 5845 0538 EF 52                   		mov.L	r5, r2
 5846 053a ED A1 03                		mov.L	12[r10], r1
 5847 053d 05 00 00 00             		bsr	_SetLength
 5848 0541 EF 15                   		mov.L	r1, r5
 5849                             		.loc 2 1950 13
 5850 0543 ED A4 01                		mov.L	4[r10], r4
 5851 0546 4B 45                   		add	r4, r5
 5852 0548 E7 A5 01                		mov.L	r5, 4[r10]
1951:../src/wolfcrypt/src/pkcs12.c ****         idx += SetOctetString(contentSz, out + idx);
 5853                             		.loc 2 1951 16
 5854 054b ED A5 12                		mov.L	72[r10], r5
 5855 054e 06 89 A5 01             		add	4[r10].L, r5
 5856 0552 EF 52                   		mov.L	r5, r2
 5857 0554 A8 69                   		mov.L	4[r6], r1
 5858 0556 05 00 00 00             		bsr	_SetOctetString
 5859 055a EF 15                   		mov.L	r1, r5
 5860                             		.loc 2 1951 13
 5861 055c ED A4 01                		mov.L	4[r10], r4
 5862 055f 4B 45                   		add	r4, r5
 5863 0561 E7 A5 01                		mov.L	r5, 4[r10]
1952:../src/wolfcrypt/src/pkcs12.c **** 
1953:../src/wolfcrypt/src/pkcs12.c ****         if (idx + contentSz > *outSz){
 5864                             		.loc 2 1953 17
 5865 0564 ED A5 01                		mov.L	4[r10], r5
 5866 0567 06 89 65 01             		add	4[r6].L, r5
 5867                             		.loc 2 1953 31
 5868 056b ED A4 13                		mov.L	76[r10], r4
 5869 056e EC 44                   		mov.L	[r4], r4
 5870                             		.loc 2 1953 12
 5871 0570 47 45                   		cmp	r4, r5
 5872 0572 25 08                   		bleu	.L323
1954:../src/wolfcrypt/src/pkcs12.c ****             return BUFFER_E;
 5873                             		.loc 2 1954 20
 5874 0574 FB 5A 7C FF             		mov.L	#-132, r5
 5875 0578 2E 30                   		bra	.L324
 5876                             	.L323:
1955:../src/wolfcrypt/src/pkcs12.c ****         }
1956:../src/wolfcrypt/src/pkcs12.c ****         XMEMCPY(out + idx, content, contentSz);
 5877                             		.loc 2 1956 9
 5878 057a ED A5 12                		mov.L	72[r10], r5
 5879 057d 06 89 A5 01             		add	4[r10].L, r5
 5880 0581 A8 6B                   		mov.L	4[r6], r3
 5881 0583 EC 62                   		mov.L	[r6], r2
 5882 0585 EF 51                   		mov.L	r5, r1
 5883 0587 05 00 00 00             		bsr	_memcpy
1957:../src/wolfcrypt/src/pkcs12.c ****         idx += contentSz;
 5884                             		.loc 2 1957 13
 5885 058b ED A5 01                		mov.L	4[r10], r5
 5886 058e 06 89 65 01             		add	4[r6].L, r5
 5887 0592 E7 A5 01                		mov.L	r5, 4[r10]
1958:../src/wolfcrypt/src/pkcs12.c **** 
1959:../src/wolfcrypt/src/pkcs12.c ****         return idx;
 5888                             		.loc 2 1959 16
 5889 0595 ED A5 01                		mov.L	4[r10], r5
 5890 0598 2E 10                   		bra	.L324
 5891                             	.L318:
1960:../src/wolfcrypt/src/pkcs12.c ****     }
1961:../src/wolfcrypt/src/pkcs12.c **** 
1962:../src/wolfcrypt/src/pkcs12.c ****     WOLFSSL_MSG("Unknown/Unsupported content type");
 5892                             		.loc 2 1962 5
 5893 059a FB 12 43 05 00 00       		mov.L	#.LC43, r1
 5894 05a0 05 00 00 00             		bsr	_WOLFSSL_MSG
1963:../src/wolfcrypt/src/pkcs12.c ****     return BAD_FUNC_ARG;
 5895                             		.loc 2 1963 12
 5896 05a4 FB 5A 53 FF             		mov.L	#-173, r5
 5897                             		.balign 8,3,1
 5898                             	.L324:
1964:../src/wolfcrypt/src/pkcs12.c **** }
 5899                             		.loc 2 1964 1 discriminator 1
 5900 05a8 EF 51                   		mov.L	r5, r1
 5901 05aa 3F 6B 2A                		rtsd	#168, r6-r11
 5902                             	.LFE59:
 5904 05ad FC 13 00                		.section C,"a",@progbits
 5905                             		.p2align 2
 5906                             	.LC44:
 5907 0564 55 6E 6B 6E 6F 77 6E 2F 		.string	"Unknown/Unsupported key encryption"
 5907      55 6E 73 75 70 70 6F 72 
 5907      74 65 64 20 6B 65 79 20 
 5907      65 6E 63 72 79 70 74 69 
 5907      6F 6E 00 
 5908                             	.LC45:
 5909 0587 45 72 72 6F 72 20 67 65 		.string	"Error getting key bag size"
 5909      74 74 69 6E 67 20 6B 65 
 5909      79 20 62 61 67 20 73 69 
 5909      7A 65 00 
 5910                             	.LC46:
 5911 05a2 4D 65 6D 6F 72 79 20 65 		.string	"Memory error creating keyBuf buffer"
 5911      72 72 6F 72 20 63 72 65 
 5911      61 74 69 6E 67 20 6B 65 
 5911      79 42 75 66 20 62 75 66 
 5911      66 65 72 00 
 5912                             	.LC47:
 5913 05c6 45 72 72 6F 72 20 63 72 		.string	"Error creating key bag"
 5913      65 61 74 69 6E 67 20 6B 
 5913      65 79 20 62 61 67 00 
 5914                             	.LC48:
 5915 05dd 45 72 72 6F 72 20 67 65 		.string	"Error getting key encrypt content size"
 5915      74 74 69 6E 67 20 6B 65 
 5915      79 20 65 6E 63 72 79 70 
 5915      74 20 63 6F 6E 74 65 6E 
 5915      74 20 73 69 7A 65 00 
 5916                             	.LC49:
 5917 0604 45 72 72 6F 72 20 63 72 		.string	"Error creating key encrypt content"
 5917      65 61 74 69 6E 67 20 6B 
 5917      65 79 20 65 6E 63 72 79 
 5917      70 74 20 63 6F 6E 74 65 
 5917      6E 74 00 
 5918                             		.section	.text.PKCS12_create_key_content,"ax",@progbits
 5920                             	_PKCS12_create_key_content:
 5921                             	.LFB60:
1965:../src/wolfcrypt/src/pkcs12.c **** 
1966:../src/wolfcrypt/src/pkcs12.c **** 
1967:../src/wolfcrypt/src/pkcs12.c **** /* helper function to create the PKCS12 key content
1968:../src/wolfcrypt/src/pkcs12.c ****  * keyCiSz is output buffer size
1969:../src/wolfcrypt/src/pkcs12.c ****  * returns a pointer to be free'd by caller on success and NULL on failure */
1970:../src/wolfcrypt/src/pkcs12.c **** static byte* PKCS12_create_key_content(WC_PKCS12* pkcs12, int nidKey,
1971:../src/wolfcrypt/src/pkcs12.c ****         word32* keyCiSz, WC_RNG* rng, char* pass, word32 passSz,
1972:../src/wolfcrypt/src/pkcs12.c ****         byte* key, word32 keySz, int iter)
1973:../src/wolfcrypt/src/pkcs12.c **** {
 5922                             		.loc 2 1973 1
 5923 0000 7E AA                   		push.l	r10
 5924                             	.LCFI50:
 5925 0002 7E A6                   		push.l	r6
 5926                             	.LCFI51:
 5927 0004 71 0A AC                		add	#-84, r0, r10
 5928                             	.LCFI52:
 5929 0007 71 A0 E4                		add	#-28, r10, r0
 5930                             	.LCFI53:
 5931 000a 75 46 60                		mov.L	#0x60, r6
 5932 000d 4B A6                   		add	r10, r6
 5933 000f E7 A1 0C                		mov.L	r1, 48[r10]
 5934 0012 E7 A2 0D                		mov.L	r2, 52[r10]
 5935 0015 E7 A3 0E                		mov.L	r3, 56[r10]
 5936 0018 E7 A4 0F                		mov.L	r4, 60[r10]
1974:../src/wolfcrypt/src/pkcs12.c ****     byte*  keyBuf;
1975:../src/wolfcrypt/src/pkcs12.c ****     word32 keyBufSz = 0;
 5937                             		.loc 2 1975 12
 5938 001b F9 A6 0B 00             		mov.L	#0, 44[r10]
1976:../src/wolfcrypt/src/pkcs12.c ****     byte* keyCi = NULL;
 5939                             		.loc 2 1976 11
 5940 001f F9 A6 01 00             		mov.L	#0, 4[r10]
1977:../src/wolfcrypt/src/pkcs12.c ****     word32 tmpSz;
1978:../src/wolfcrypt/src/pkcs12.c ****     int ret;
1979:../src/wolfcrypt/src/pkcs12.c ****     int algo;
1980:../src/wolfcrypt/src/pkcs12.c ****     void* heap;
1981:../src/wolfcrypt/src/pkcs12.c **** 
1982:../src/wolfcrypt/src/pkcs12.c ****     heap = wc_PKCS12_GetHeap(pkcs12);
 5941                             		.loc 2 1982 12
 5942 0023 ED A1 0C                		mov.L	48[r10], r1
 5943 0026 05 00 00 00             		bsr	_wc_PKCS12_GetHeap
 5944 002a E7 A1 02                		mov.L	r1, 8[r10]
1983:../src/wolfcrypt/src/pkcs12.c ****     *keyCiSz = 0;
 5945                             		.loc 2 1983 14
 5946 002d ED A5 0E                		mov.L	56[r10], r5
 5947 0030 F8 56 00                		mov.L	#0, [r5]
1984:../src/wolfcrypt/src/pkcs12.c ****     switch (nidKey) {
 5948                             		.loc 2 1984 5
 5949 0033 ED A5 0D                		mov.L	52[r10], r5
 5950 0036 61 15                   		cmp	#1, r5
 5951 0038 20 23                   		beq	.L326
 5952 003a ED A5 0D                		mov.L	52[r10], r5
 5953 003d 61 15                   		cmp	#1, r5
 5954 003f 2A 0C                   		bgt	.L327
 5955 0041 ED A5 0D                		mov.L	52[r10], r5
 5956 0044 75 05 FF                		cmp	#-1, r5
 5957 0047 20 23                   		beq	.L328
 5958 0049 2E 26                   		bra	.L329
 5959                             	.L327:
 5960 004b ED A5 0D                		mov.L	52[r10], r5
 5961 004e 61 25                   		cmp	#2, r5
 5962 0050 20 10                   		beq	.L330
 5963 0052 ED A5 0D                		mov.L	52[r10], r5
 5964 0055 61 35                   		cmp	#3, r5
 5965 0057 20 0E                   		beq	.L331
 5966 0059 2E 16                   		bra	.L329
 5967                             	.L326:
1985:../src/wolfcrypt/src/pkcs12.c ****         case PBE_SHA1_RC4_128:
1986:../src/wolfcrypt/src/pkcs12.c ****             algo = 1;
 5968                             		.loc 2 1986 18
 5969 005b F8 A6 01                		mov.L	#1, [r10]
1987:../src/wolfcrypt/src/pkcs12.c ****             break;
 5970                             		.loc 2 1987 13
 5971 005e 2E 20                   		bra	.L332
 5972                             	.L330:
1988:../src/wolfcrypt/src/pkcs12.c **** 
1989:../src/wolfcrypt/src/pkcs12.c ****         case PBE_SHA1_DES:
1990:../src/wolfcrypt/src/pkcs12.c ****             algo = 2;
 5973                             		.loc 2 1990 18
 5974 0060 F8 A6 02                		mov.L	#2, [r10]
1991:../src/wolfcrypt/src/pkcs12.c ****             break;
 5975                             		.loc 2 1991 13
 5976 0063 2E 1B                   		bra	.L332
 5977                             	.L331:
1992:../src/wolfcrypt/src/pkcs12.c **** 
1993:../src/wolfcrypt/src/pkcs12.c ****         case PBE_SHA1_DES3:
1994:../src/wolfcrypt/src/pkcs12.c ****             algo = 3;
 5978                             		.loc 2 1994 18
 5979 0065 F8 A6 03                		mov.L	#3, [r10]
1995:../src/wolfcrypt/src/pkcs12.c ****             break;
 5980                             		.loc 2 1995 13
 5981 0068 2E 16                   		bra	.L332
 5982                             	.L328:
1996:../src/wolfcrypt/src/pkcs12.c **** 
1997:../src/wolfcrypt/src/pkcs12.c ****         /* no encryption */
1998:../src/wolfcrypt/src/pkcs12.c ****         case -1:
1999:../src/wolfcrypt/src/pkcs12.c ****             algo = -1;
 5983                             		.loc 2 1999 18
 5984 006a F8 A6 FF                		mov.L	#-1, [r10]
2000:../src/wolfcrypt/src/pkcs12.c ****             break;
 5985                             		.loc 2 2000 13
 5986 006d 2E 11                   		bra	.L332
 5987                             	.L329:
2001:../src/wolfcrypt/src/pkcs12.c **** 
2002:../src/wolfcrypt/src/pkcs12.c ****         default:
2003:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Unknown/Unsupported key encryption");
 5988                             		.loc 2 2003 13
 5989 006f FB 12 64 05 00 00       		mov.L	#.LC44, r1
 5990 0075 05 00 00 00             		bsr	_WOLFSSL_MSG
2004:../src/wolfcrypt/src/pkcs12.c ****             return NULL;
 5991                             		.loc 2 2004 20
 5992 0079 66 05                   		mov.L	#0, r5
 5993 007b 38 06 02                		bra	.L345
 5994                             	.L332:
2005:../src/wolfcrypt/src/pkcs12.c ****     }
2006:../src/wolfcrypt/src/pkcs12.c **** 
2007:../src/wolfcrypt/src/pkcs12.c ****     /* get max size for key bag */
2008:../src/wolfcrypt/src/pkcs12.c ****     ret = wc_PKCS12_create_key_bag(pkcs12, rng, NULL, &keyBufSz, key, keySz,
 5995                             		.loc 2 2008 11
 5996 007e A8 6C                   		mov.L	4[r6], r4
 5997 0080 71 A5 2C                		add	#44, r10, r5
 5998 0083 A1 0C                   		mov.L	r4, 20[r0]
 5999 0085 EC 64                   		mov.L	[r6], r4
 6000 0087 A1 04                   		mov.L	r4, 16[r0]
 6001 0089 A9 64                   		mov.L	16[r6], r4
 6002 008b A0 8C                   		mov.L	r4, 12[r0]
 6003 008d EC A4                   		mov.L	[r10], r4
 6004 008f A0 84                   		mov.L	r4, 8[r0]
 6005 0091 A8 EC                   		mov.L	12[r6], r4
 6006 0093 A0 0C                   		mov.L	r4, 4[r0]
 6007 0095 A8 E4                   		mov.L	8[r6], r4
 6008 0097 E3 04                   		mov.L	r4, [r0]
 6009 0099 EF 54                   		mov.L	r5, r4
 6010 009b 66 03                   		mov.L	#0, r3
 6011 009d ED A2 0F                		mov.L	60[r10], r2
 6012 00a0 ED A1 0C                		mov.L	48[r10], r1
 6013 00a3 05 00 00 00             		bsr	_wc_PKCS12_create_key_bag
 6014 00a7 E7 A1 03                		mov.L	r1, 12[r10]
2009:../src/wolfcrypt/src/pkcs12.c ****             algo, iter, pass, passSz);
2010:../src/wolfcrypt/src/pkcs12.c ****     if (ret != LENGTH_ONLY_E && ret < 0) {
 6015                             		.loc 2 2010 8
 6016 00aa ED A5 03                		mov.L	12[r10], r5
 6017 00ad 76 05 36 FF             		cmp	#-202, r5
 6018 00b1 20 18                   		beq	.L334
 6019                             		.loc 2 2010 30 discriminator 1
 6020 00b3 ED A5 03                		mov.L	12[r10], r5
 6021 00b6 61 05                   		cmp	#0, r5
 6022 00b8 28 11                   		bge	.L334
2011:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Error getting key bag size");
 6023                             		.loc 2 2011 9
 6024 00ba FB 12 87 05 00 00       		mov.L	#.LC45, r1
 6025 00c0 05 00 00 00             		bsr	_WOLFSSL_MSG
2012:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 6026                             		.loc 2 2012 16
 6027 00c4 66 05                   		mov.L	#0, r5
 6028 00c6 38 BB 01                		bra	.L345
 6029                             	.L334:
2013:../src/wolfcrypt/src/pkcs12.c ****     }
2014:../src/wolfcrypt/src/pkcs12.c **** 
2015:../src/wolfcrypt/src/pkcs12.c ****     /* account for sequence around bag */
2016:../src/wolfcrypt/src/pkcs12.c ****     keyBufSz += MAX_SEQ_SZ;
 6030                             		.loc 2 2016 14
 6031 00c9 ED A5 0B                		mov.L	44[r10], r5
 6032 00cc 62 55                   		add	#5, r5
 6033 00ce E7 A5 0B                		mov.L	r5, 44[r10]
2017:../src/wolfcrypt/src/pkcs12.c ****     keyBuf = (byte*)XMALLOC(keyBufSz, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6034                             		.loc 2 2017 21
 6035 00d1 ED A5 0B                		mov.L	44[r10], r5
 6036 00d4 EF 51                   		mov.L	r5, r1
 6037 00d6 05 00 00 00             		bsr	_wolfSSL_Malloc
 6038 00da E7 A1 04                		mov.L	r1, 16[r10]
2018:../src/wolfcrypt/src/pkcs12.c ****     if (keyBuf == NULL) {
 6039                             		.loc 2 2018 8
 6040 00dd ED A5 04                		mov.L	16[r10], r5
 6041 00e0 61 05                   		cmp	#0, r5
 6042 00e2 21 11                   		bne	.L335
2019:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Memory error creating keyBuf buffer");
 6043                             		.loc 2 2019 9
 6044 00e4 FB 12 A2 05 00 00       		mov.L	#.LC46, r1
 6045 00ea 05 00 00 00             		bsr	_WOLFSSL_MSG
2020:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 6046                             		.loc 2 2020 16
 6047 00ee 66 05                   		mov.L	#0, r5
 6048 00f0 38 91 01                		bra	.L345
 6049                             	.L335:
2021:../src/wolfcrypt/src/pkcs12.c ****     }
2022:../src/wolfcrypt/src/pkcs12.c **** 
2023:../src/wolfcrypt/src/pkcs12.c ****     ret = wc_PKCS12_create_key_bag(pkcs12, rng, keyBuf + MAX_SEQ_SZ, &keyBufSz,
 6050                             		.loc 2 2023 11
 6051 00f3 ED A5 04                		mov.L	16[r10], r5
 6052 00f6 62 55                   		add	#5, r5
 6053 00f8 A8 6B                   		mov.L	4[r6], r3
 6054 00fa 71 A4 2C                		add	#44, r10, r4
 6055 00fd A1 0B                   		mov.L	r3, 20[r0]
 6056 00ff EC 63                   		mov.L	[r6], r3
 6057 0101 A1 03                   		mov.L	r3, 16[r0]
 6058 0103 A9 63                   		mov.L	16[r6], r3
 6059 0105 A0 8B                   		mov.L	r3, 12[r0]
 6060 0107 EC A3                   		mov.L	[r10], r3
 6061 0109 A0 83                   		mov.L	r3, 8[r0]
 6062 010b A8 EB                   		mov.L	12[r6], r3
 6063 010d A0 0B                   		mov.L	r3, 4[r0]
 6064 010f A8 E3                   		mov.L	8[r6], r3
 6065 0111 E3 03                   		mov.L	r3, [r0]
 6066 0113 EF 53                   		mov.L	r5, r3
 6067 0115 ED A2 0F                		mov.L	60[r10], r2
 6068 0118 ED A1 0C                		mov.L	48[r10], r1
 6069 011b 05 00 00 00             		bsr	_wc_PKCS12_create_key_bag
 6070 011f E7 A1 03                		mov.L	r1, 12[r10]
2024:../src/wolfcrypt/src/pkcs12.c ****             key, keySz, algo, iter, pass, passSz);
2025:../src/wolfcrypt/src/pkcs12.c ****     if (ret < 0) {
 6071                             		.loc 2 2025 8
 6072 0122 ED A5 03                		mov.L	12[r10], r5
 6073 0125 61 05                   		cmp	#0, r5
 6074 0127 28 24                   		bge	.L336
 6075                             	.LBB56:
2026:../src/wolfcrypt/src/pkcs12.c ****         XFREE(keyBuf, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6076                             		.loc 2 2026 9
 6077 0129 ED A5 04                		mov.L	16[r10], r5
 6078 012c E7 A5 05                		mov.L	r5, 20[r10]
 6079 012f ED A5 05                		mov.L	20[r10], r5
 6080 0132 61 05                   		cmp	#0, r5
 6081 0134 10                      		beq	.L337
 6082                             		.loc 2 2026 9 is_stmt 0 discriminator 1
 6083 0135 ED A1 05                		mov.L	20[r10], r1
 6084 0138 05 00 00 00             		bsr	_wolfSSL_Free
 6085                             	.L337:
 6086                             	.LBE56:
2027:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Error creating key bag");
 6087                             		.loc 2 2027 9 is_stmt 1
 6088 013c FB 12 C6 05 00 00       		mov.L	#.LC47, r1
 6089 0142 05 00 00 00             		bsr	_WOLFSSL_MSG
2028:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 6090                             		.loc 2 2028 16
 6091 0146 66 05                   		mov.L	#0, r5
 6092 0148 38 39 01                		bra	.L345
 6093                             	.L336:
2029:../src/wolfcrypt/src/pkcs12.c ****     }
2030:../src/wolfcrypt/src/pkcs12.c ****     keyBufSz = ret;
 6094                             		.loc 2 2030 14
 6095 014b ED A5 03                		mov.L	12[r10], r5
 6096 014e E7 A5 0B                		mov.L	r5, 44[r10]
2031:../src/wolfcrypt/src/pkcs12.c **** 
2032:../src/wolfcrypt/src/pkcs12.c ****     tmpSz = SetSequence(keyBufSz, keyBuf);
 6097                             		.loc 2 2032 13
 6098 0151 ED A5 0B                		mov.L	44[r10], r5
 6099 0154 ED A2 04                		mov.L	16[r10], r2
 6100 0157 EF 51                   		mov.L	r5, r1
 6101 0159 05 00 00 00             		bsr	_SetSequence
 6102 015d E7 A1 06                		mov.L	r1, 24[r10]
2033:../src/wolfcrypt/src/pkcs12.c ****     XMEMMOVE(keyBuf + tmpSz, keyBuf + MAX_SEQ_SZ, keyBufSz);
 6103                             		.loc 2 2033 5
 6104 0160 ED A5 04                		mov.L	16[r10], r5
 6105 0163 EF 54                   		mov.L	r5, r4
 6106 0165 06 89 A4 06             		add	24[r10].L, r4
 6107 0169 ED A5 04                		mov.L	16[r10], r5
 6108 016c 62 55                   		add	#5, r5
 6109 016e ED A3 0B                		mov.L	44[r10], r3
 6110 0171 EF 52                   		mov.L	r5, r2
 6111 0173 EF 41                   		mov.L	r4, r1
 6112 0175 05 00 00 00             		bsr	_memmove
2034:../src/wolfcrypt/src/pkcs12.c ****     keyBufSz += tmpSz;
 6113                             		.loc 2 2034 14
 6114 0179 ED A5 0B                		mov.L	44[r10], r5
 6115 017c 06 89 A5 06             		add	24[r10].L, r5
 6116 0180 E7 A5 0B                		mov.L	r5, 44[r10]
2035:../src/wolfcrypt/src/pkcs12.c **** 
2036:../src/wolfcrypt/src/pkcs12.c ****     #ifdef WOLFSSL_DEBUG_PKCS12
2037:../src/wolfcrypt/src/pkcs12.c ****     {
2038:../src/wolfcrypt/src/pkcs12.c ****         word32 i;
2039:../src/wolfcrypt/src/pkcs12.c ****         printf("(size %u) Key Bag = ", keyBufSz);
2040:../src/wolfcrypt/src/pkcs12.c ****         for (i = 0; i < keyBufSz; i++)
2041:../src/wolfcrypt/src/pkcs12.c ****             printf("%02X", keyBuf[i]);
2042:../src/wolfcrypt/src/pkcs12.c ****         printf("\n");
2043:../src/wolfcrypt/src/pkcs12.c ****     }
2044:../src/wolfcrypt/src/pkcs12.c ****     #endif
2045:../src/wolfcrypt/src/pkcs12.c ****     ret = wc_PKCS12_encrypt_content(pkcs12, rng, NULL, keyCiSz,
 6117                             		.loc 2 2045 11
 6118 0183 ED A5 0B                		mov.L	44[r10], r5
 6119 0186 A8 6C                   		mov.L	4[r6], r4
 6120 0188 F9 0A 06 8B 02          		mov.L	#0x28b, 24[r0]
 6121 018d A9 63                   		mov.L	16[r6], r3
 6122 018f A1 0B                   		mov.L	r3, 20[r0]
 6123 0191 A1 04                   		mov.L	r4, 16[r0]
 6124 0193 EC 64                   		mov.L	[r6], r4
 6125 0195 A0 8C                   		mov.L	r4, 12[r0]
 6126 0197 EC A4                   		mov.L	[r10], r4
 6127 0199 A0 84                   		mov.L	r4, 8[r0]
 6128 019b A0 0D                   		mov.L	r5, 4[r0]
 6129 019d F8 06 00                		mov.L	#0, [r0]
 6130 01a0 ED A4 0E                		mov.L	56[r10], r4
 6131 01a3 66 03                   		mov.L	#0, r3
 6132 01a5 ED A2 0F                		mov.L	60[r10], r2
 6133 01a8 ED A1 0C                		mov.L	48[r10], r1
 6134 01ab 05 00 00 00             		bsr	_wc_PKCS12_encrypt_content
 6135 01af E7 A1 03                		mov.L	r1, 12[r10]
2046:../src/wolfcrypt/src/pkcs12.c ****             NULL, keyBufSz, algo, pass, passSz, iter, WC_PKCS12_DATA);
2047:../src/wolfcrypt/src/pkcs12.c ****     if (ret != LENGTH_ONLY_E) {
 6136                             		.loc 2 2047 8
 6137 01b2 ED A5 03                		mov.L	12[r10], r5
 6138 01b5 76 05 36 FF             		cmp	#-202, r5
 6139 01b9 20 24                   		beq	.L338
 6140                             	.LBB57:
2048:../src/wolfcrypt/src/pkcs12.c ****         XFREE(keyBuf, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6141                             		.loc 2 2048 9
 6142 01bb ED A5 04                		mov.L	16[r10], r5
 6143 01be E7 A5 07                		mov.L	r5, 28[r10]
 6144 01c1 ED A5 07                		mov.L	28[r10], r5
 6145 01c4 61 05                   		cmp	#0, r5
 6146 01c6 10                      		beq	.L339
 6147                             		.loc 2 2048 9 is_stmt 0 discriminator 1
 6148 01c7 ED A1 07                		mov.L	28[r10], r1
 6149 01ca 05 00 00 00             		bsr	_wolfSSL_Free
 6150                             	.L339:
 6151                             	.LBE57:
2049:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Error getting key encrypt content size");
 6152                             		.loc 2 2049 9 is_stmt 1
 6153 01ce FB 12 DD 05 00 00       		mov.L	#.LC48, r1
 6154 01d4 05 00 00 00             		bsr	_WOLFSSL_MSG
2050:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 6155                             		.loc 2 2050 16
 6156 01d8 66 05                   		mov.L	#0, r5
 6157 01da 38 A7 00                		bra	.L345
 6158                             	.L338:
2051:../src/wolfcrypt/src/pkcs12.c ****     }
2052:../src/wolfcrypt/src/pkcs12.c ****     keyCi = (byte*)XMALLOC(*keyCiSz, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6159                             		.loc 2 2052 20
 6160 01dd ED A5 0E                		mov.L	56[r10], r5
 6161 01e0 EC 55                   		mov.L	[r5], r5
 6162 01e2 EF 51                   		mov.L	r5, r1
 6163 01e4 05 00 00 00             		bsr	_wolfSSL_Malloc
 6164 01e8 E7 A1 01                		mov.L	r1, 4[r10]
2053:../src/wolfcrypt/src/pkcs12.c ****     if (keyCi == NULL) {
 6165                             		.loc 2 2053 8
 6166 01eb ED A5 01                		mov.L	4[r10], r5
 6167 01ee 61 05                   		cmp	#0, r5
 6168 01f0 21 19                   		bne	.L340
 6169                             	.LBB58:
2054:../src/wolfcrypt/src/pkcs12.c ****         XFREE(keyBuf, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6170                             		.loc 2 2054 9
 6171 01f2 ED A5 04                		mov.L	16[r10], r5
 6172 01f5 E7 A5 08                		mov.L	r5, 32[r10]
 6173 01f8 ED A5 08                		mov.L	32[r10], r5
 6174 01fb 61 05                   		cmp	#0, r5
 6175 01fd 10                      		beq	.L341
 6176                             		.loc 2 2054 9 is_stmt 0 discriminator 1
 6177 01fe ED A1 08                		mov.L	32[r10], r1
 6178 0201 05 00 00 00             		bsr	_wolfSSL_Free
 6179                             	.L341:
 6180                             	.LBE58:
2055:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 6181                             		.loc 2 2055 16 is_stmt 1
 6182 0205 66 05                   		mov.L	#0, r5
 6183 0207 2E 7A                   		bra	.L345
 6184                             	.L340:
2056:../src/wolfcrypt/src/pkcs12.c ****     }
2057:../src/wolfcrypt/src/pkcs12.c **** 
2058:../src/wolfcrypt/src/pkcs12.c ****     ret = wc_PKCS12_encrypt_content(pkcs12, rng, keyCi, keyCiSz,
 6185                             		.loc 2 2058 11
 6186 0209 ED A5 0B                		mov.L	44[r10], r5
 6187 020c A8 6C                   		mov.L	4[r6], r4
 6188 020e F9 0A 06 8B 02          		mov.L	#0x28b, 24[r0]
 6189 0213 A9 63                   		mov.L	16[r6], r3
 6190 0215 A1 0B                   		mov.L	r3, 20[r0]
 6191 0217 A1 04                   		mov.L	r4, 16[r0]
 6192 0219 EC 64                   		mov.L	[r6], r4
 6193 021b A0 8C                   		mov.L	r4, 12[r0]
 6194 021d EC A4                   		mov.L	[r10], r4
 6195 021f A0 84                   		mov.L	r4, 8[r0]
 6196 0221 A0 0D                   		mov.L	r5, 4[r0]
 6197 0223 ED A5 04                		mov.L	16[r10], r5
 6198 0226 E3 05                   		mov.L	r5, [r0]
 6199 0228 ED A4 0E                		mov.L	56[r10], r4
 6200 022b ED A3 01                		mov.L	4[r10], r3
 6201 022e ED A2 0F                		mov.L	60[r10], r2
 6202 0231 ED A1 0C                		mov.L	48[r10], r1
 6203 0234 05 00 00 00             		bsr	_wc_PKCS12_encrypt_content
 6204 0238 E7 A1 03                		mov.L	r1, 12[r10]
 6205                             	.LBB59:
2059:../src/wolfcrypt/src/pkcs12.c ****             keyBuf, keyBufSz, algo, pass, passSz, iter, WC_PKCS12_DATA);
2060:../src/wolfcrypt/src/pkcs12.c ****     XFREE(keyBuf, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6206                             		.loc 2 2060 5
 6207 023b ED A5 04                		mov.L	16[r10], r5
 6208 023e E7 A5 09                		mov.L	r5, 36[r10]
 6209 0241 ED A5 09                		mov.L	36[r10], r5
 6210 0244 61 05                   		cmp	#0, r5
 6211 0246 10                      		beq	.L342
 6212                             		.loc 2 2060 5 is_stmt 0 discriminator 1
 6213 0247 ED A1 09                		mov.L	36[r10], r1
 6214 024a 05 00 00 00             		bsr	_wolfSSL_Free
 6215                             	.L342:
 6216                             	.LBE59:
2061:../src/wolfcrypt/src/pkcs12.c ****     if (ret < 0 ) {
 6217                             		.loc 2 2061 8 is_stmt 1
 6218 024e ED A5 03                		mov.L	12[r10], r5
 6219 0251 61 05                   		cmp	#0, r5
 6220 0253 28 23                   		bge	.L343
 6221                             	.LBB60:
2062:../src/wolfcrypt/src/pkcs12.c ****         XFREE(keyCi, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6222                             		.loc 2 2062 9
 6223 0255 ED A5 01                		mov.L	4[r10], r5
 6224 0258 E7 A5 0A                		mov.L	r5, 40[r10]
 6225 025b ED A5 0A                		mov.L	40[r10], r5
 6226 025e 61 05                   		cmp	#0, r5
 6227 0260 10                      		beq	.L344
 6228                             		.loc 2 2062 9 is_stmt 0 discriminator 1
 6229 0261 ED A1 0A                		mov.L	40[r10], r1
 6230 0264 05 00 00 00             		bsr	_wolfSSL_Free
 6231                             	.L344:
 6232                             	.LBE60:
2063:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Error creating key encrypt content");
 6233                             		.loc 2 2063 9 is_stmt 1
 6234 0268 FB 12 04 06 00 00       		mov.L	#.LC49, r1
 6235 026e 05 00 00 00             		bsr	_WOLFSSL_MSG
2064:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 6236                             		.loc 2 2064 16
 6237 0272 66 05                   		mov.L	#0, r5
 6238 0274 2E 0D                   		bra	.L345
 6239                             	.L343:
2065:../src/wolfcrypt/src/pkcs12.c ****     }
2066:../src/wolfcrypt/src/pkcs12.c ****     *keyCiSz = ret;
 6240                             		.loc 2 2066 14
 6241 0276 ED A4 03                		mov.L	12[r10], r4
 6242 0279 ED A5 0E                		mov.L	56[r10], r5
 6243 027c E3 54                   		mov.L	r4, [r5]
2067:../src/wolfcrypt/src/pkcs12.c **** 
2068:../src/wolfcrypt/src/pkcs12.c ****     #ifdef WOLFSSL_DEBUG_PKCS12
2069:../src/wolfcrypt/src/pkcs12.c ****     {
2070:../src/wolfcrypt/src/pkcs12.c ****         word32 i;
2071:../src/wolfcrypt/src/pkcs12.c ****         printf("(size %u) Key Content Info = ", *keyCiSz);
2072:../src/wolfcrypt/src/pkcs12.c ****         for (i = 0; i < *keyCiSz; i++)
2073:../src/wolfcrypt/src/pkcs12.c ****             printf("%02X", keyCi[i]);
2074:../src/wolfcrypt/src/pkcs12.c ****         printf("\n");
2075:../src/wolfcrypt/src/pkcs12.c ****     }
2076:../src/wolfcrypt/src/pkcs12.c ****     #endif
2077:../src/wolfcrypt/src/pkcs12.c **** 
2078:../src/wolfcrypt/src/pkcs12.c ****     (void)heap;
2079:../src/wolfcrypt/src/pkcs12.c ****     return keyCi;
 6244                             		.loc 2 2079 12
 6245 027e ED A5 01                		mov.L	4[r10], r5
 6246                             		.balign 8,3,1
 6247                             	.L345:
2080:../src/wolfcrypt/src/pkcs12.c **** }
 6248                             		.loc 2 2080 1 discriminator 1
 6249 0281 EF 51                   		mov.L	r5, r1
 6250 0283 71 00 70                		add	#0x70, r0
 6251 0286 7E B6                   		pop	r6
 6252 0288 7E BA                   		pop	r10
 6253 028a 02                      		rts
 6254                             	.LFE60:
 6256 028b 77 10 01 00 00          		.section C,"a",@progbits
 6257 0627 00                      		.p2align 2
 6258                             	.LC50:
 6259 0628 55 6E 6B 6E 6F 77 6E 2F 		.string	"Unknown/Unsupported certificate encryption"
 6259      55 6E 73 75 70 70 6F 72 
 6259      74 65 64 20 63 65 72 74 
 6259      69 66 69 63 61 74 65 20 
 6259      65 6E 63 72 79 70 74 69 
 6260                             	.LC51:
 6261 0653 4D 65 6D 6F 72 79 20 65 		.string	"Memory error creating certificate bags"
 6261      72 72 6F 72 20 63 72 65 
 6261      61 74 69 6E 67 20 63 65 
 6261      72 74 69 66 69 63 61 74 
 6261      65 20 62 61 67 73 00 
 6262                             	.LC52:
 6263 067a 77 63 5F 50 4B 43 53 31 		.string	"wc_PKCS12_create()"
 6263      32 5F 63 72 65 61 74 65 
 6263      28 29 00 
 6264                             		.section	.text.PKCS12_create_cert_content,"ax",@progbits
 6266                             	_PKCS12_create_cert_content:
 6267                             	.LFB61:
2081:../src/wolfcrypt/src/pkcs12.c **** 
2082:../src/wolfcrypt/src/pkcs12.c **** 
2083:../src/wolfcrypt/src/pkcs12.c **** /* helper function to create the PKCS12 certificate content
2084:../src/wolfcrypt/src/pkcs12.c ****  * certCiSz is output buffer size
2085:../src/wolfcrypt/src/pkcs12.c ****  * returns a pointer to be free'd by caller on success and NULL on failure */
2086:../src/wolfcrypt/src/pkcs12.c **** static byte* PKCS12_create_cert_content(WC_PKCS12* pkcs12, int nidCert,
2087:../src/wolfcrypt/src/pkcs12.c ****         WC_DerCertList* ca, byte* cert, word32 certSz, word32* certCiSz,
2088:../src/wolfcrypt/src/pkcs12.c ****         WC_RNG* rng, char* pass, word32 passSz, int iter)
2089:../src/wolfcrypt/src/pkcs12.c **** {
 6268                             		.loc 2 2089 1
 6269 0000 7E AA                   		push.l	r10
 6270                             	.LCFI54:
 6271 0002 7E A6                   		push.l	r6
 6272                             	.LCFI55:
 6273 0004 71 0A 8C                		add	#-116, r0, r10
 6274                             	.LCFI56:
 6275 0007 71 A0 E4                		add	#-28, r10, r0
 6276                             	.LCFI57:
 6277 000a 75 46 80                		mov.L	#0x80, r6
 6278 000d 4B A6                   		add	r10, r6
 6279 000f E7 A1 13                		mov.L	r1, 76[r10]
 6280 0012 E7 A2 14                		mov.L	r2, 80[r10]
 6281 0015 E7 A3 15                		mov.L	r3, 84[r10]
 6282 0018 E7 A4 16                		mov.L	r4, 88[r10]
2090:../src/wolfcrypt/src/pkcs12.c ****     int algo;
2091:../src/wolfcrypt/src/pkcs12.c ****     int ret;
2092:../src/wolfcrypt/src/pkcs12.c ****     int type;
2093:../src/wolfcrypt/src/pkcs12.c **** 
2094:../src/wolfcrypt/src/pkcs12.c ****     byte*  certBuf = NULL;
 6283                             		.loc 2 2094 12
 6284 001b F9 A6 05 00             		mov.L	#0, 20[r10]
2095:../src/wolfcrypt/src/pkcs12.c ****     word32 certBufSz;
2096:../src/wolfcrypt/src/pkcs12.c ****     word32 idx;
2097:../src/wolfcrypt/src/pkcs12.c ****     word32 sz;
2098:../src/wolfcrypt/src/pkcs12.c ****     word32 tmpSz;
2099:../src/wolfcrypt/src/pkcs12.c **** 
2100:../src/wolfcrypt/src/pkcs12.c ****     byte* certCi;
2101:../src/wolfcrypt/src/pkcs12.c ****     void* heap;
2102:../src/wolfcrypt/src/pkcs12.c **** 
2103:../src/wolfcrypt/src/pkcs12.c ****     heap = wc_PKCS12_GetHeap(pkcs12);
 6285                             		.loc 2 2103 12
 6286 001f ED A1 13                		mov.L	76[r10], r1
 6287 0022 05 00 00 00             		bsr	_wc_PKCS12_GetHeap
 6288 0026 E7 A1 06                		mov.L	r1, 24[r10]
2104:../src/wolfcrypt/src/pkcs12.c ****     switch (nidCert) {
 6289                             		.loc 2 2104 5
 6290 0029 ED A5 14                		mov.L	80[r10], r5
 6291 002c 61 15                   		cmp	#1, r5
 6292 002e 20 23                   		beq	.L347
 6293 0030 ED A5 14                		mov.L	80[r10], r5
 6294 0033 61 15                   		cmp	#1, r5
 6295 0035 2A 0C                   		bgt	.L348
 6296 0037 ED A5 14                		mov.L	80[r10], r5
 6297 003a 75 05 FF                		cmp	#-1, r5
 6298 003d 20 32                   		beq	.L349
 6299 003f 2E 3A                   		bra	.L350
 6300                             	.L348:
 6301 0041 ED A5 14                		mov.L	80[r10], r5
 6302 0044 61 25                   		cmp	#2, r5
 6303 0046 20 15                   		beq	.L351
 6304 0048 ED A5 14                		mov.L	80[r10], r5
 6305 004b 61 35                   		cmp	#3, r5
 6306 004d 20 18                   		beq	.L352
 6307 004f 2E 2A                   		bra	.L350
 6308                             	.L347:
2105:../src/wolfcrypt/src/pkcs12.c ****         case PBE_SHA1_RC4_128:
2106:../src/wolfcrypt/src/pkcs12.c ****             type = WC_PKCS12_ENCRYPTED_DATA;
 6309                             		.loc 2 2106 18
 6310 0051 F9 AA 01 90 02          		mov.L	#0x290, 4[r10]
2107:../src/wolfcrypt/src/pkcs12.c ****             algo = 1;
 6311                             		.loc 2 2107 18
 6312 0056 F8 A6 01                		mov.L	#1, [r10]
2108:../src/wolfcrypt/src/pkcs12.c ****             break;
 6313                             		.loc 2 2108 13
 6314 0059 2E 2F                   		bra	.L353
 6315                             	.L351:
2109:../src/wolfcrypt/src/pkcs12.c **** 
2110:../src/wolfcrypt/src/pkcs12.c ****         case PBE_SHA1_DES:
2111:../src/wolfcrypt/src/pkcs12.c ****             type = WC_PKCS12_ENCRYPTED_DATA;
 6316                             		.loc 2 2111 18
 6317 005b F9 AA 01 90 02          		mov.L	#0x290, 4[r10]
2112:../src/wolfcrypt/src/pkcs12.c ****             algo = 2;
 6318                             		.loc 2 2112 18
 6319 0060 F8 A6 02                		mov.L	#2, [r10]
2113:../src/wolfcrypt/src/pkcs12.c ****             break;
 6320                             		.loc 2 2113 13
 6321 0063 2E 25                   		bra	.L353
 6322                             	.L352:
2114:../src/wolfcrypt/src/pkcs12.c **** 
2115:../src/wolfcrypt/src/pkcs12.c ****         case PBE_SHA1_DES3:
2116:../src/wolfcrypt/src/pkcs12.c ****             type = WC_PKCS12_ENCRYPTED_DATA;
 6323                             		.loc 2 2116 18
 6324 0065 F9 AA 01 90 02          		mov.L	#0x290, 4[r10]
2117:../src/wolfcrypt/src/pkcs12.c ****             algo = 3;
 6325                             		.loc 2 2117 18
 6326 006a F8 A6 03                		mov.L	#3, [r10]
2118:../src/wolfcrypt/src/pkcs12.c ****             break;
 6327                             		.loc 2 2118 13
 6328 006d 2E 1B                   		bra	.L353
 6329                             	.L349:
2119:../src/wolfcrypt/src/pkcs12.c **** 
2120:../src/wolfcrypt/src/pkcs12.c ****         case -1:
2121:../src/wolfcrypt/src/pkcs12.c ****             type = WC_PKCS12_DATA;
 6330                             		.loc 2 2121 18
 6331 006f F9 AA 01 8B 02          		mov.L	#0x28b, 4[r10]
2122:../src/wolfcrypt/src/pkcs12.c ****             algo = -1;
 6332                             		.loc 2 2122 18
 6333 0074 F8 A6 FF                		mov.L	#-1, [r10]
2123:../src/wolfcrypt/src/pkcs12.c ****             break;
 6334                             		.loc 2 2123 13
 6335 0077 2E 11                   		bra	.L353
 6336                             	.L350:
2124:../src/wolfcrypt/src/pkcs12.c **** 
2125:../src/wolfcrypt/src/pkcs12.c ****         default:
2126:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Unknown/Unsupported certificate encryption");
 6337                             		.loc 2 2126 13
 6338 0079 FB 12 28 06 00 00       		mov.L	#.LC50, r1
 6339 007f 05 00 00 00             		bsr	_WOLFSSL_MSG
2127:../src/wolfcrypt/src/pkcs12.c ****             return NULL;
 6340                             		.loc 2 2127 20
 6341 0083 66 05                   		mov.L	#0, r5
 6342 0085 38 B7 02                		bra	.L375
 6343                             	.L353:
2128:../src/wolfcrypt/src/pkcs12.c ****     }
2129:../src/wolfcrypt/src/pkcs12.c **** 
2130:../src/wolfcrypt/src/pkcs12.c ****     /* get max size of buffer needed */
2131:../src/wolfcrypt/src/pkcs12.c ****     ret = wc_PKCS12_create_cert_bag(pkcs12, NULL, &certBufSz, cert, certSz);
 6344                             		.loc 2 2131 11
 6345 0088 71 A5 40                		add	#0x40, r10, r5
 6346 008b EC 64                   		mov.L	[r6], r4
 6347 008d E3 04                   		mov.L	r4, [r0]
 6348 008f ED A4 16                		mov.L	88[r10], r4
 6349 0092 EF 53                   		mov.L	r5, r3
 6350 0094 66 02                   		mov.L	#0, r2
 6351 0096 ED A1 13                		mov.L	76[r10], r1
 6352 0099 05 00 00 00             		bsr	_wc_PKCS12_create_cert_bag
 6353 009d E7 A1 07                		mov.L	r1, 28[r10]
2132:../src/wolfcrypt/src/pkcs12.c ****     if (ret != LENGTH_ONLY_E) {
 6354                             		.loc 2 2132 8
 6355 00a0 ED A5 07                		mov.L	28[r10], r5
 6356 00a3 76 05 36 FF             		cmp	#-202, r5
 6357 00a7 16                      		beq	.L355
2133:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 6358                             		.loc 2 2133 16
 6359 00a8 66 05                   		mov.L	#0, r5
 6360 00aa 38 92 02                		bra	.L375
 6361                             	.L355:
2134:../src/wolfcrypt/src/pkcs12.c ****     }
2135:../src/wolfcrypt/src/pkcs12.c **** 
2136:../src/wolfcrypt/src/pkcs12.c ****     if (ca != NULL) {
 6362                             		.loc 2 2136 8
 6363 00ad ED A5 15                		mov.L	84[r10], r5
 6364 00b0 61 05                   		cmp	#0, r5
 6365 00b2 20 52                   		beq	.L356
 6366                             	.LBB61:
2137:../src/wolfcrypt/src/pkcs12.c ****         WC_DerCertList* current = ca;
 6367                             		.loc 2 2137 25
 6368 00b4 ED A5 15                		mov.L	84[r10], r5
 6369 00b7 E7 A5 03                		mov.L	r5, 12[r10]
2138:../src/wolfcrypt/src/pkcs12.c ****         word32 curBufSz = 0;
 6370                             		.loc 2 2138 16
 6371 00ba F9 A6 12 00             		mov.L	#0, 72[r10]
2139:../src/wolfcrypt/src/pkcs12.c **** 
2140:../src/wolfcrypt/src/pkcs12.c ****         /* get max buffer size */
2141:../src/wolfcrypt/src/pkcs12.c ****         while (current != NULL) {
 6372                             		.loc 2 2141 15
 6373 00be 2E 3F                   		bra	.L357
 6374                             	.L359:
2142:../src/wolfcrypt/src/pkcs12.c ****             ret = wc_PKCS12_create_cert_bag(pkcs12, NULL, &curBufSz,
 6375                             		.loc 2 2142 19
 6376 00c0 ED A5 03                		mov.L	12[r10], r5
 6377 00c3 EC 54                   		mov.L	[r5], r4
 6378 00c5 ED A5 03                		mov.L	12[r10], r5
 6379 00c8 A8 5B                   		mov.L	4[r5], r3
 6380 00ca 71 A5 48                		add	#0x48, r10, r5
 6381 00cd E3 03                   		mov.L	r3, [r0]
 6382 00cf EF 53                   		mov.L	r5, r3
 6383 00d1 66 02                   		mov.L	#0, r2
 6384 00d3 ED A1 13                		mov.L	76[r10], r1
 6385 00d6 05 00 00 00             		bsr	_wc_PKCS12_create_cert_bag
 6386 00da E7 A1 07                		mov.L	r1, 28[r10]
2143:../src/wolfcrypt/src/pkcs12.c ****                     current->buffer, current->bufferSz);
2144:../src/wolfcrypt/src/pkcs12.c ****             if (ret != LENGTH_ONLY_E) {
 6387                             		.loc 2 2144 16
 6388 00dd ED A5 07                		mov.L	28[r10], r5
 6389 00e0 76 05 36 FF             		cmp	#-202, r5
 6390 00e4 16                      		beq	.L358
2145:../src/wolfcrypt/src/pkcs12.c ****                 return NULL;
 6391                             		.loc 2 2145 24
 6392 00e5 66 05                   		mov.L	#0, r5
 6393 00e7 38 55 02                		bra	.L375
 6394                             	.L358:
2146:../src/wolfcrypt/src/pkcs12.c ****             }
2147:../src/wolfcrypt/src/pkcs12.c ****             certBufSz += curBufSz;
 6395                             		.loc 2 2147 23
 6396 00ea ED A4 10                		mov.L	64[r10], r4
 6397 00ed ED A5 12                		mov.L	72[r10], r5
 6398 00f0 4B 45                   		add	r4, r5
 6399 00f2 E7 A5 10                		mov.L	r5, 64[r10]
2148:../src/wolfcrypt/src/pkcs12.c ****             current    = current->next;
 6400                             		.loc 2 2148 24
 6401 00f5 ED A5 03                		mov.L	12[r10], r5
 6402 00f8 A8 D5                   		mov.L	8[r5], r5
 6403 00fa E7 A5 03                		mov.L	r5, 12[r10]
 6404                             	.L357:
2141:../src/wolfcrypt/src/pkcs12.c ****             ret = wc_PKCS12_create_cert_bag(pkcs12, NULL, &curBufSz,
 6405                             		.loc 2 2141 15
 6406 00fd ED A5 03                		mov.L	12[r10], r5
 6407 0100 61 05                   		cmp	#0, r5
 6408 0102 21 BE                   		bne	.L359
 6409                             	.L356:
 6410                             	.LBE61:
2149:../src/wolfcrypt/src/pkcs12.c ****         }
2150:../src/wolfcrypt/src/pkcs12.c ****     }
2151:../src/wolfcrypt/src/pkcs12.c **** 
2152:../src/wolfcrypt/src/pkcs12.c ****     /* account for Sequence that holds all certificate bags */
2153:../src/wolfcrypt/src/pkcs12.c ****     certBufSz += MAX_SEQ_SZ;
 6411                             		.loc 2 2153 15
 6412 0104 ED A5 10                		mov.L	64[r10], r5
 6413 0107 62 55                   		add	#5, r5
 6414 0109 E7 A5 10                		mov.L	r5, 64[r10]
2154:../src/wolfcrypt/src/pkcs12.c **** 
2155:../src/wolfcrypt/src/pkcs12.c ****     /* completed getting max size, now create buffer and start adding bags */
2156:../src/wolfcrypt/src/pkcs12.c ****     certBuf = (byte*)XMALLOC(certBufSz, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6415                             		.loc 2 2156 22
 6416 010c ED A5 10                		mov.L	64[r10], r5
 6417 010f EF 51                   		mov.L	r5, r1
 6418 0111 05 00 00 00             		bsr	_wolfSSL_Malloc
 6419 0115 E7 A1 05                		mov.L	r1, 20[r10]
2157:../src/wolfcrypt/src/pkcs12.c ****     if (certBuf == NULL) {
 6420                             		.loc 2 2157 8
 6421 0118 ED A5 05                		mov.L	20[r10], r5
 6422 011b 61 05                   		cmp	#0, r5
 6423 011d 21 11                   		bne	.L360
2158:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Memory error creating certificate bags");
 6424                             		.loc 2 2158 9
 6425 011f FB 12 53 06 00 00       		mov.L	#.LC51, r1
 6426 0125 05 00 00 00             		bsr	_WOLFSSL_MSG
2159:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 6427                             		.loc 2 2159 16
 6428 0129 66 05                   		mov.L	#0, r5
 6429 012b 38 11 02                		bra	.L375
 6430                             	.L360:
2160:../src/wolfcrypt/src/pkcs12.c ****     }
2161:../src/wolfcrypt/src/pkcs12.c **** 
2162:../src/wolfcrypt/src/pkcs12.c ****     idx = 0;
 6431                             		.loc 2 2162 9
 6432 012e F9 A6 02 00             		mov.L	#0, 8[r10]
2163:../src/wolfcrypt/src/pkcs12.c ****     idx += MAX_SEQ_SZ;
 6433                             		.loc 2 2163 9
 6434 0132 ED A5 02                		mov.L	8[r10], r5
 6435 0135 62 55                   		add	#5, r5
 6436 0137 E7 A5 02                		mov.L	r5, 8[r10]
2164:../src/wolfcrypt/src/pkcs12.c **** 
2165:../src/wolfcrypt/src/pkcs12.c ****     sz = certBufSz - idx;
 6437                             		.loc 2 2165 20
 6438 013a ED A4 10                		mov.L	64[r10], r4
 6439 013d ED A5 02                		mov.L	8[r10], r5
 6440 0140 FF 05 54                		sub	r5, r4, r5
 6441                             		.loc 2 2165 8
 6442 0143 E7 A5 11                		mov.L	r5, 68[r10]
2166:../src/wolfcrypt/src/pkcs12.c ****     if ((ret = wc_PKCS12_create_cert_bag(pkcs12, certBuf + idx, &sz,
 6443                             		.loc 2 2166 16
 6444 0146 ED A5 05                		mov.L	20[r10], r5
 6445 0149 06 89 A5 02             		add	8[r10].L, r5
 6446 014d 71 A3 44                		add	#0x44, r10, r3
 6447 0150 EC 64                   		mov.L	[r6], r4
 6448 0152 E3 04                   		mov.L	r4, [r0]
 6449 0154 ED A4 16                		mov.L	88[r10], r4
 6450 0157 EF 52                   		mov.L	r5, r2
 6451 0159 ED A1 13                		mov.L	76[r10], r1
 6452 015c 05 00 00 00             		bsr	_wc_PKCS12_create_cert_bag
 6453 0160 E7 A1 07                		mov.L	r1, 28[r10]
 6454                             		.loc 2 2166 8
 6455 0163 ED A5 07                		mov.L	28[r10], r5
 6456 0166 61 05                   		cmp	#0, r5
 6457 0168 28 1A                   		bge	.L361
 6458                             	.LBB62:
2167:../src/wolfcrypt/src/pkcs12.c ****             cert, certSz)) < 0) {
2168:../src/wolfcrypt/src/pkcs12.c ****         XFREE(certBuf, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6459                             		.loc 2 2168 9
 6460 016a ED A5 05                		mov.L	20[r10], r5
 6461 016d E7 A5 08                		mov.L	r5, 32[r10]
 6462 0170 ED A5 08                		mov.L	32[r10], r5
 6463 0173 61 05                   		cmp	#0, r5
 6464 0175 10                      		beq	.L362
 6465                             		.loc 2 2168 9 is_stmt 0 discriminator 1
 6466 0176 ED A1 08                		mov.L	32[r10], r1
 6467 0179 05 00 00 00             		bsr	_wolfSSL_Free
 6468                             	.L362:
 6469                             	.LBE62:
2169:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 6470                             		.loc 2 2169 16 is_stmt 1
 6471 017d 66 05                   		mov.L	#0, r5
 6472 017f 38 BD 01                		bra	.L375
 6473                             	.L361:
2170:../src/wolfcrypt/src/pkcs12.c ****     }
2171:../src/wolfcrypt/src/pkcs12.c ****     idx += ret;
 6474                             		.loc 2 2171 9
 6475 0182 ED A5 07                		mov.L	28[r10], r5
 6476 0185 ED A4 02                		mov.L	8[r10], r4
 6477 0188 4B 45                   		add	r4, r5
 6478 018a E7 A5 02                		mov.L	r5, 8[r10]
2172:../src/wolfcrypt/src/pkcs12.c **** 
2173:../src/wolfcrypt/src/pkcs12.c ****     if (ca != NULL) {
 6479                             		.loc 2 2173 8
 6480 018d ED A5 15                		mov.L	84[r10], r5
 6481 0190 61 05                   		cmp	#0, r5
 6482 0192 20 73                   		beq	.L363
 6483                             	.LBB63:
2174:../src/wolfcrypt/src/pkcs12.c ****         WC_DerCertList* current = ca;
 6484                             		.loc 2 2174 25
 6485 0194 ED A5 15                		mov.L	84[r10], r5
 6486 0197 E7 A5 04                		mov.L	r5, 16[r10]
2175:../src/wolfcrypt/src/pkcs12.c **** 
2176:../src/wolfcrypt/src/pkcs12.c ****         while (current != NULL) {
 6487                             		.loc 2 2176 15
 6488 019a 2E 64                   		bra	.L364
 6489                             	.L367:
2177:../src/wolfcrypt/src/pkcs12.c ****             sz = certBufSz - idx;
 6490                             		.loc 2 2177 28
 6491 019c ED A4 10                		mov.L	64[r10], r4
 6492 019f ED A5 02                		mov.L	8[r10], r5
 6493 01a2 FF 05 54                		sub	r5, r4, r5
 6494                             		.loc 2 2177 16
 6495 01a5 E7 A5 11                		mov.L	r5, 68[r10]
2178:../src/wolfcrypt/src/pkcs12.c ****             if ((ret = wc_PKCS12_create_cert_bag(pkcs12, certBuf + idx, &sz,
 6496                             		.loc 2 2178 24
 6497 01a8 ED A5 05                		mov.L	20[r10], r5
 6498 01ab EF 52                   		mov.L	r5, r2
 6499 01ad 06 89 A2 02             		add	8[r10].L, r2
 6500 01b1 ED A5 04                		mov.L	16[r10], r5
 6501 01b4 EC 54                   		mov.L	[r5], r4
 6502 01b6 ED A5 04                		mov.L	16[r10], r5
 6503 01b9 A8 5B                   		mov.L	4[r5], r3
 6504 01bb 71 A5 44                		add	#0x44, r10, r5
 6505 01be E3 03                   		mov.L	r3, [r0]
 6506 01c0 EF 53                   		mov.L	r5, r3
 6507 01c2 ED A1 13                		mov.L	76[r10], r1
 6508 01c5 05 00 00 00             		bsr	_wc_PKCS12_create_cert_bag
 6509 01c9 E7 A1 07                		mov.L	r1, 28[r10]
 6510                             		.loc 2 2178 16
 6511 01cc ED A5 07                		mov.L	28[r10], r5
 6512 01cf 61 05                   		cmp	#0, r5
 6513 01d1 28 1A                   		bge	.L365
 6514                             	.LBB64:
2179:../src/wolfcrypt/src/pkcs12.c ****                current->buffer, current->bufferSz)) < 0) {
2180:../src/wolfcrypt/src/pkcs12.c ****                 XFREE(certBuf, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6515                             		.loc 2 2180 17
 6516 01d3 ED A5 05                		mov.L	20[r10], r5
 6517 01d6 E7 A5 09                		mov.L	r5, 36[r10]
 6518 01d9 ED A5 09                		mov.L	36[r10], r5
 6519 01dc 61 05                   		cmp	#0, r5
 6520 01de 10                      		beq	.L366
 6521                             		.loc 2 2180 17 is_stmt 0 discriminator 1
 6522 01df ED A1 09                		mov.L	36[r10], r1
 6523 01e2 05 00 00 00             		bsr	_wolfSSL_Free
 6524                             	.L366:
 6525                             	.LBE64:
2181:../src/wolfcrypt/src/pkcs12.c ****                 return NULL;
 6526                             		.loc 2 2181 24 is_stmt 1
 6527 01e6 66 05                   		mov.L	#0, r5
 6528 01e8 38 54 01                		bra	.L375
 6529                             	.L365:
2182:../src/wolfcrypt/src/pkcs12.c ****             }
2183:../src/wolfcrypt/src/pkcs12.c ****             idx    += ret;
 6530                             		.loc 2 2183 20
 6531 01eb ED A5 07                		mov.L	28[r10], r5
 6532 01ee ED A4 02                		mov.L	8[r10], r4
 6533 01f1 4B 45                   		add	r4, r5
 6534 01f3 E7 A5 02                		mov.L	r5, 8[r10]
2184:../src/wolfcrypt/src/pkcs12.c ****             current = current->next;
 6535                             		.loc 2 2184 21
 6536 01f6 ED A5 04                		mov.L	16[r10], r5
 6537 01f9 A8 D5                   		mov.L	8[r5], r5
 6538 01fb E7 A5 04                		mov.L	r5, 16[r10]
 6539                             	.L364:
2176:../src/wolfcrypt/src/pkcs12.c ****             sz = certBufSz - idx;
 6540                             		.loc 2 2176 15
 6541 01fe ED A5 04                		mov.L	16[r10], r5
 6542 0201 61 05                   		cmp	#0, r5
 6543 0203 21 99                   		bne	.L367
 6544                             	.L363:
 6545                             	.LBE63:
2185:../src/wolfcrypt/src/pkcs12.c ****         }
2186:../src/wolfcrypt/src/pkcs12.c ****     }
2187:../src/wolfcrypt/src/pkcs12.c **** 
2188:../src/wolfcrypt/src/pkcs12.c ****     /* set sequence and create encrypted content with all certificate bags */
2189:../src/wolfcrypt/src/pkcs12.c ****     tmpSz = SetSequence(idx - MAX_SEQ_SZ, certBuf);
 6546                             		.loc 2 2189 13
 6547 0205 ED A5 02                		mov.L	8[r10], r5
 6548 0208 60 55                   		sub	#5, r5
 6549 020a ED A2 05                		mov.L	20[r10], r2
 6550 020d EF 51                   		mov.L	r5, r1
 6551 020f 05 00 00 00             		bsr	_SetSequence
 6552 0213 E7 A1 0A                		mov.L	r1, 40[r10]
2190:../src/wolfcrypt/src/pkcs12.c ****     XMEMMOVE(certBuf + tmpSz, certBuf + MAX_SEQ_SZ, idx - MAX_SEQ_SZ);
 6553                             		.loc 2 2190 5
 6554 0216 ED A5 05                		mov.L	20[r10], r5
 6555 0219 EF 54                   		mov.L	r5, r4
 6556 021b 06 89 A4 0A             		add	40[r10].L, r4
 6557 021f ED A5 05                		mov.L	20[r10], r5
 6558 0222 71 52 05                		add	#5, r5, r2
 6559 0225 ED A5 02                		mov.L	8[r10], r5
 6560 0228 60 55                   		sub	#5, r5
 6561 022a EF 53                   		mov.L	r5, r3
 6562 022c EF 41                   		mov.L	r4, r1
 6563 022e 05 00 00 00             		bsr	_memmove
2191:../src/wolfcrypt/src/pkcs12.c ****     certBufSz = tmpSz + (idx - MAX_SEQ_SZ);
 6564                             		.loc 2 2191 23
 6565 0232 ED A5 02                		mov.L	8[r10], r5
 6566 0235 06 89 A5 0A             		add	40[r10].L, r5
 6567 0239 60 55                   		sub	#5, r5
 6568                             		.loc 2 2191 15
 6569 023b E7 A5 10                		mov.L	r5, 64[r10]
2192:../src/wolfcrypt/src/pkcs12.c **** 
2193:../src/wolfcrypt/src/pkcs12.c ****     /* get buffer size needed for content info */
2194:../src/wolfcrypt/src/pkcs12.c ****     ret = wc_PKCS12_encrypt_content(pkcs12, rng, NULL, certCiSz,
 6570                             		.loc 2 2194 11
 6571 023e ED A5 10                		mov.L	64[r10], r5
 6572 0241 A9 64                   		mov.L	16[r6], r4
 6573 0243 ED A3 01                		mov.L	4[r10], r3
 6574 0246 A1 83                   		mov.L	r3, 24[r0]
 6575 0248 A9 6B                   		mov.L	20[r6], r3
 6576 024a A1 0B                   		mov.L	r3, 20[r0]
 6577 024c A1 04                   		mov.L	r4, 16[r0]
 6578 024e A8 EC                   		mov.L	12[r6], r4
 6579 0250 A0 8C                   		mov.L	r4, 12[r0]
 6580 0252 EC A4                   		mov.L	[r10], r4
 6581 0254 A0 84                   		mov.L	r4, 8[r0]
 6582 0256 A0 0D                   		mov.L	r5, 4[r0]
 6583 0258 F8 06 00                		mov.L	#0, [r0]
 6584 025b A8 6C                   		mov.L	4[r6], r4
 6585 025d 66 03                   		mov.L	#0, r3
 6586 025f A8 E2                   		mov.L	8[r6], r2
 6587 0261 ED A1 13                		mov.L	76[r10], r1
 6588 0264 05 00 00 00             		bsr	_wc_PKCS12_encrypt_content
 6589 0268 E7 A1 07                		mov.L	r1, 28[r10]
2195:../src/wolfcrypt/src/pkcs12.c ****             NULL, certBufSz, algo, pass, passSz, iter, type);
2196:../src/wolfcrypt/src/pkcs12.c ****     if (ret != LENGTH_ONLY_E) {
 6590                             		.loc 2 2196 8
 6591 026b ED A5 07                		mov.L	28[r10], r5
 6592 026e 76 05 36 FF             		cmp	#-202, r5
 6593 0272 20 27                   		beq	.L368
 6594                             	.LBB65:
2197:../src/wolfcrypt/src/pkcs12.c ****         XFREE(certBuf, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6595                             		.loc 2 2197 9
 6596 0274 ED A5 05                		mov.L	20[r10], r5
 6597 0277 E7 A5 0B                		mov.L	r5, 44[r10]
 6598 027a ED A5 0B                		mov.L	44[r10], r5
 6599 027d 61 05                   		cmp	#0, r5
 6600 027f 10                      		beq	.L369
 6601                             		.loc 2 2197 9 is_stmt 0 discriminator 1
 6602 0280 ED A1 0B                		mov.L	44[r10], r1
 6603 0283 05 00 00 00             		bsr	_wolfSSL_Free
 6604                             	.L369:
 6605                             	.LBE65:
2198:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_LEAVE("wc_PKCS12_create()", ret);
 6606                             		.loc 2 2198 9 is_stmt 1
 6607 0287 ED A2 07                		mov.L	28[r10], r2
 6608 028a FB 12 7A 06 00 00       		mov.L	#.LC52, r1
 6609 0290 05 00 00 00             		bsr	_WOLFSSL_LEAVE
2199:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 6610                             		.loc 2 2199 16
 6611 0294 66 05                   		mov.L	#0, r5
 6612 0296 38 A6 00                		bra	.L375
 6613                             	.L368:
2200:../src/wolfcrypt/src/pkcs12.c ****     }
2201:../src/wolfcrypt/src/pkcs12.c ****     certCi = (byte*)XMALLOC(*certCiSz, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6614                             		.loc 2 2201 21
 6615 0299 A8 6D                   		mov.L	4[r6], r5
 6616 029b EC 55                   		mov.L	[r5], r5
 6617 029d EF 51                   		mov.L	r5, r1
 6618 029f 05 00 00 00             		bsr	_wolfSSL_Malloc
 6619 02a3 E7 A1 0C                		mov.L	r1, 48[r10]
2202:../src/wolfcrypt/src/pkcs12.c ****     if (certCi == NULL) {
 6620                             		.loc 2 2202 8
 6621 02a6 ED A5 0C                		mov.L	48[r10], r5
 6622 02a9 61 05                   		cmp	#0, r5
 6623 02ab 21 19                   		bne	.L370
 6624                             	.LBB66:
2203:../src/wolfcrypt/src/pkcs12.c ****         XFREE(certBuf, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6625                             		.loc 2 2203 9
 6626 02ad ED A5 05                		mov.L	20[r10], r5
 6627 02b0 E7 A5 0D                		mov.L	r5, 52[r10]
 6628 02b3 ED A5 0D                		mov.L	52[r10], r5
 6629 02b6 61 05                   		cmp	#0, r5
 6630 02b8 10                      		beq	.L371
 6631                             		.loc 2 2203 9 is_stmt 0 discriminator 1
 6632 02b9 ED A1 0D                		mov.L	52[r10], r1
 6633 02bc 05 00 00 00             		bsr	_wolfSSL_Free
 6634                             	.L371:
 6635                             	.LBE66:
2204:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 6636                             		.loc 2 2204 16 is_stmt 1
 6637 02c0 66 05                   		mov.L	#0, r5
 6638 02c2 2E 7A                   		bra	.L375
 6639                             	.L370:
2205:../src/wolfcrypt/src/pkcs12.c ****     }
2206:../src/wolfcrypt/src/pkcs12.c **** 
2207:../src/wolfcrypt/src/pkcs12.c ****     ret = wc_PKCS12_encrypt_content(pkcs12, rng, certCi, certCiSz,
 6640                             		.loc 2 2207 11
 6641 02c4 ED A5 10                		mov.L	64[r10], r5
 6642 02c7 A9 64                   		mov.L	16[r6], r4
 6643 02c9 ED A3 01                		mov.L	4[r10], r3
 6644 02cc A1 83                   		mov.L	r3, 24[r0]
 6645 02ce A9 6B                   		mov.L	20[r6], r3
 6646 02d0 A1 0B                   		mov.L	r3, 20[r0]
 6647 02d2 A1 04                   		mov.L	r4, 16[r0]
 6648 02d4 A8 EC                   		mov.L	12[r6], r4
 6649 02d6 A0 8C                   		mov.L	r4, 12[r0]
 6650 02d8 EC A4                   		mov.L	[r10], r4
 6651 02da A0 84                   		mov.L	r4, 8[r0]
 6652 02dc A0 0D                   		mov.L	r5, 4[r0]
 6653 02de ED A5 05                		mov.L	20[r10], r5
 6654 02e1 E3 05                   		mov.L	r5, [r0]
 6655 02e3 A8 6C                   		mov.L	4[r6], r4
 6656 02e5 ED A3 0C                		mov.L	48[r10], r3
 6657 02e8 A8 E2                   		mov.L	8[r6], r2
 6658 02ea ED A1 13                		mov.L	76[r10], r1
 6659 02ed 05 00 00 00             		bsr	_wc_PKCS12_encrypt_content
 6660 02f1 E7 A1 07                		mov.L	r1, 28[r10]
 6661                             	.LBB67:
2208:../src/wolfcrypt/src/pkcs12.c ****             certBuf, certBufSz, algo, pass, passSz, iter, type);
2209:../src/wolfcrypt/src/pkcs12.c ****     XFREE(certBuf, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6662                             		.loc 2 2209 5
 6663 02f4 ED A5 05                		mov.L	20[r10], r5
 6664 02f7 E7 A5 0E                		mov.L	r5, 56[r10]
 6665 02fa ED A5 0E                		mov.L	56[r10], r5
 6666 02fd 61 05                   		cmp	#0, r5
 6667 02ff 10                      		beq	.L372
 6668                             		.loc 2 2209 5 is_stmt 0 discriminator 1
 6669 0300 ED A1 0E                		mov.L	56[r10], r1
 6670 0303 05 00 00 00             		bsr	_wolfSSL_Free
 6671                             	.L372:
 6672                             	.LBE67:
2210:../src/wolfcrypt/src/pkcs12.c ****     if (ret < 0) {
 6673                             		.loc 2 2210 8 is_stmt 1
 6674 0307 ED A5 07                		mov.L	28[r10], r5
 6675 030a 61 05                   		cmp	#0, r5
 6676 030c 28 26                   		bge	.L373
2211:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_LEAVE("wc_PKCS12_create()", ret);
 6677                             		.loc 2 2211 9
 6678 030e ED A2 07                		mov.L	28[r10], r2
 6679 0311 FB 12 7A 06 00 00       		mov.L	#.LC52, r1
 6680 0317 05 00 00 00             		bsr	_WOLFSSL_LEAVE
 6681                             	.LBB68:
2212:../src/wolfcrypt/src/pkcs12.c ****         XFREE(certCi, heap, DYNAMIC_TYPE_TMP_BUFFER);
 6682                             		.loc 2 2212 9
 6683 031b ED A5 0C                		mov.L	48[r10], r5
 6684 031e E7 A5 0F                		mov.L	r5, 60[r10]
 6685 0321 ED A5 0F                		mov.L	60[r10], r5
 6686 0324 61 05                   		cmp	#0, r5
 6687 0326 10                      		beq	.L374
 6688                             		.loc 2 2212 9 is_stmt 0 discriminator 1
 6689 0327 ED A1 0F                		mov.L	60[r10], r1
 6690 032a 05 00 00 00             		bsr	_wolfSSL_Free
 6691                             	.L374:
 6692                             	.LBE68:
2213:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 6693                             		.loc 2 2213 16 is_stmt 1
 6694 032e 66 05                   		mov.L	#0, r5
 6695 0330 2E 0C                   		bra	.L375
 6696                             	.L373:
2214:../src/wolfcrypt/src/pkcs12.c ****     }
2215:../src/wolfcrypt/src/pkcs12.c ****     *certCiSz = ret;
 6697                             		.loc 2 2215 15
 6698 0332 ED A4 07                		mov.L	28[r10], r4
 6699 0335 A8 6D                   		mov.L	4[r6], r5
 6700 0337 E3 54                   		mov.L	r4, [r5]
2216:../src/wolfcrypt/src/pkcs12.c **** 
2217:../src/wolfcrypt/src/pkcs12.c ****     #ifdef WOLFSSL_DEBUG_PKCS12
2218:../src/wolfcrypt/src/pkcs12.c ****     {
2219:../src/wolfcrypt/src/pkcs12.c ****         word32 i;
2220:../src/wolfcrypt/src/pkcs12.c ****         printf("(size %u) Encrypted Certificate Content Info = ", *certCiSz);
2221:../src/wolfcrypt/src/pkcs12.c ****         for (i = 0; i < *certCiSz; i++)
2222:../src/wolfcrypt/src/pkcs12.c ****             printf("%02X", certCi[i]);
2223:../src/wolfcrypt/src/pkcs12.c ****         printf("\n");
2224:../src/wolfcrypt/src/pkcs12.c ****     }
2225:../src/wolfcrypt/src/pkcs12.c ****     #endif
2226:../src/wolfcrypt/src/pkcs12.c **** 
2227:../src/wolfcrypt/src/pkcs12.c ****     (void)heap;
2228:../src/wolfcrypt/src/pkcs12.c ****     return certCi;
 6701                             		.loc 2 2228 12
 6702 0339 ED A5 0C                		mov.L	48[r10], r5
 6703                             		.balign 8,3,1
 6704                             	.L375:
2229:../src/wolfcrypt/src/pkcs12.c **** }
 6705                             		.loc 2 2229 1 discriminator 1
 6706 033c EF 51                   		mov.L	r5, r1
 6707 033e 72 00 90 00             		add	#0x90, r0
 6708 0342 7E B6                   		pop	r6
 6709 0344 7E BA                   		pop	r10
 6710 0346 02                      		rts
 6711                             	.LFE61:
 6713 0347 03                      		.section C,"a",@progbits
 6714 068d 00 00 00                		.p2align 2
 6715                             	.LC53:
 6716 0690 45 72 72 6F 72 20 6D 61 		.string	"Error malloc'ing safe data buffer"
 6716      6C 6C 6F 63 27 69 6E 67 
 6716      20 73 61 66 65 20 64 61 
 6716      74 61 20 62 75 66 66 65 
 6716      72 00 
 6717                             	.LC54:
 6718 06b2 45 72 72 6F 72 20 6D 61 		.string	"Error malloc'ing inner data buffer"
 6718      6C 6C 6F 63 27 69 6E 67 
 6718      20 69 6E 6E 65 72 20 64 
 6718      61 74 61 20 62 75 66 66 
 6718      65 72 00 
 6719                             	.LC55:
 6720 06d5 45 72 72 6F 72 20 73 65 		.string	"Error setting data type for safe contents"
 6720      74 74 69 6E 67 20 64 61 
 6720      74 61 20 74 79 70 65 20 
 6720      66 6F 72 20 73 61 66 65 
 6720      20 63 6F 6E 74 65 6E 74 
 6721                             	.LC56:
 6722 06ff 45 72 72 6F 72 20 67 65 		.string	"Error getting first sequence of safe"
 6722      74 74 69 6E 67 20 66 69 
 6722      72 73 74 20 73 65 71 75 
 6722      65 6E 63 65 20 6F 66 20 
 6722      73 61 66 65 00 
 6723                             	.LC57:
 6724 0724 55 6E 61 62 6C 65 20 74 		.string	"Unable to create safe contents"
 6724      6F 20 63 72 65 61 74 65 
 6724      20 73 61 66 65 20 63 6F 
 6724      6E 74 65 6E 74 73 00 
 6725                             		.section	.text.PKCS12_create_safe,"ax",@progbits
 6727                             	_PKCS12_create_safe:
 6728                             	.LFB62:
2230:../src/wolfcrypt/src/pkcs12.c **** 
2231:../src/wolfcrypt/src/pkcs12.c **** 
2232:../src/wolfcrypt/src/pkcs12.c **** /* helper function to create the PKCS12 safe
2233:../src/wolfcrypt/src/pkcs12.c ****  * returns 0 on success */
2234:../src/wolfcrypt/src/pkcs12.c **** static int PKCS12_create_safe(WC_PKCS12* pkcs12, byte* certCi, word32 certCiSz,
2235:../src/wolfcrypt/src/pkcs12.c ****         byte* keyCi, word32 keyCiSz, WC_RNG* rng, char* pass, word32 passSz,
2236:../src/wolfcrypt/src/pkcs12.c ****         int iter)
2237:../src/wolfcrypt/src/pkcs12.c **** {
 6729                             		.loc 2 2237 1
 6730 0000 6E 6B                   		pushm	r6-r11
 6731                             	.LCFI58:
 6732 0002 71 0A A4                		add	#-92, r0, r10
 6733                             	.LCFI59:
 6734 0005 71 A0 E4                		add	#-28, r10, r0
 6735                             	.LCFI60:
 6736 0008 75 46 78                		mov.L	#0x78, r6
 6737 000b 4B A6                   		add	r10, r6
 6738 000d E7 A1 0E                		mov.L	r1, 56[r10]
 6739 0010 E7 A2 0F                		mov.L	r2, 60[r10]
 6740 0013 E7 A3 10                		mov.L	r3, 64[r10]
 6741 0016 E7 A4 11                		mov.L	r4, 68[r10]
2238:../src/wolfcrypt/src/pkcs12.c ****     int length;
2239:../src/wolfcrypt/src/pkcs12.c ****     int ret;
2240:../src/wolfcrypt/src/pkcs12.c ****     byte seq[MAX_SEQ_SZ];
2241:../src/wolfcrypt/src/pkcs12.c ****     word32 safeDataSz;
2242:../src/wolfcrypt/src/pkcs12.c ****     word32 innerDataSz;
2243:../src/wolfcrypt/src/pkcs12.c ****     byte *innerData = NULL;
 6742                             		.loc 2 2243 11
 6743 0019 F8 A6 00                		mov.L	#0, [r10]
2244:../src/wolfcrypt/src/pkcs12.c ****     byte *safeData  = NULL;
 6744                             		.loc 2 2244 11
 6745 001c F9 A6 01 00             		mov.L	#0, 4[r10]
2245:../src/wolfcrypt/src/pkcs12.c ****     word32 idx;
2246:../src/wolfcrypt/src/pkcs12.c **** 
2247:../src/wolfcrypt/src/pkcs12.c ****     innerDataSz = certCiSz + keyCiSz+SetSequence(certCiSz + keyCiSz, seq);
 6746                             		.loc 2 2247 28
 6747 0020 ED A5 10                		mov.L	64[r10], r5
 6748 0023 EF 5B                   		mov.L	r5, r11
 6749 0025 06 88 6B                		add	[r6].L, r11
 6750                             		.loc 2 2247 38
 6751 0028 ED A5 10                		mov.L	64[r10], r5
 6752 002b 06 88 65                		add	[r6].L, r5
 6753 002e 71 A4 28                		add	#40, r10, r4
 6754 0031 EF 42                   		mov.L	r4, r2
 6755 0033 EF 51                   		mov.L	r5, r1
 6756 0035 05 00 00 00             		bsr	_SetSequence
 6757 0039 EF 15                   		mov.L	r1, r5
 6758                             		.loc 2 2247 17
 6759 003b 4B B5                   		add	r11, r5
 6760 003d E7 A5 02                		mov.L	r5, 8[r10]
2248:../src/wolfcrypt/src/pkcs12.c **** 
2249:../src/wolfcrypt/src/pkcs12.c ****     /* add Content Info structs to safe, key first then cert */
2250:../src/wolfcrypt/src/pkcs12.c ****     ret = wc_PKCS12_encrypt_content(pkcs12, rng, NULL, &safeDataSz,
 6761                             		.loc 2 2250 11
 6762 0040 71 A5 30                		add	#48, r10, r5
 6763 0043 F9 0A 06 8B 02          		mov.L	#0x28b, 24[r0]
 6764 0048 3E 05 00                		mov.L	#0, 20[r0]
 6765 004b 3E 04 00                		mov.L	#0, 16[r0]
 6766 004e 3E 03 00                		mov.L	#0, 12[r0]
 6767 0051 3E 02 00                		mov.L	#0, 8[r0]
 6768 0054 ED A4 02                		mov.L	8[r10], r4
 6769 0057 A0 0C                   		mov.L	r4, 4[r0]
 6770 0059 F8 06 00                		mov.L	#0, [r0]
 6771 005c EF 54                   		mov.L	r5, r4
 6772 005e 66 03                   		mov.L	#0, r3
 6773 0060 A8 6A                   		mov.L	4[r6], r2
 6774 0062 ED A1 0E                		mov.L	56[r10], r1
 6775 0065 05 00 00 00             		bsr	_wc_PKCS12_encrypt_content
 6776 0069 E7 A1 03                		mov.L	r1, 12[r10]
2251:../src/wolfcrypt/src/pkcs12.c ****             NULL, innerDataSz, 0, NULL, 0, 0, WC_PKCS12_DATA);
2252:../src/wolfcrypt/src/pkcs12.c ****     if (ret != LENGTH_ONLY_E) {
 6777                             		.loc 2 2252 8
 6778 006c ED A5 03                		mov.L	12[r10], r5
 6779 006f 76 05 36 FF             		cmp	#-202, r5
 6780 0073 17                      		beq	.L377
2253:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 6781                             		.loc 2 2253 16
 6782 0074 ED A5 03                		mov.L	12[r10], r5
 6783 0077 38 8D 01                		bra	.L389
 6784                             	.L377:
2254:../src/wolfcrypt/src/pkcs12.c ****     }
2255:../src/wolfcrypt/src/pkcs12.c **** 
2256:../src/wolfcrypt/src/pkcs12.c ****     safeData = (byte*)XMALLOC(safeDataSz, pkcs12->heap, DYNAMIC_TYPE_TMP_BUFFER);
 6785                             		.loc 2 2256 23
 6786 007a ED A5 0C                		mov.L	48[r10], r5
 6787 007d EF 51                   		mov.L	r5, r1
 6788 007f 05 00 00 00             		bsr	_wolfSSL_Malloc
 6789 0083 E7 A1 01                		mov.L	r1, 4[r10]
2257:../src/wolfcrypt/src/pkcs12.c ****     if (safeData == NULL) {
 6790                             		.loc 2 2257 8
 6791 0086 ED A5 01                		mov.L	4[r10], r5
 6792 0089 61 05                   		cmp	#0, r5
 6793 008b 21 12                   		bne	.L379
2258:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Error malloc'ing safe data buffer");
 6794                             		.loc 2 2258 9
 6795 008d FB 12 90 06 00 00       		mov.L	#.LC53, r1
 6796 0093 05 00 00 00             		bsr	_WOLFSSL_MSG
2259:../src/wolfcrypt/src/pkcs12.c ****         return MEMORY_E;
 6797                             		.loc 2 2259 16
 6798 0097 FB 56 83                		mov.L	#-125, r5
 6799 009a 38 6A 01                		bra	.L389
 6800                             	.L379:
2260:../src/wolfcrypt/src/pkcs12.c ****     }
2261:../src/wolfcrypt/src/pkcs12.c **** 
2262:../src/wolfcrypt/src/pkcs12.c ****     /* create sequence of inner data */
2263:../src/wolfcrypt/src/pkcs12.c ****     innerData = (byte*)XMALLOC(innerDataSz, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 6801                             		.loc 2 2263 24
 6802 009d ED A1 02                		mov.L	8[r10], r1
 6803 00a0 05 00 00 00             		bsr	_wolfSSL_Malloc
 6804 00a4 E3 A1                   		mov.L	r1, [r10]
2264:../src/wolfcrypt/src/pkcs12.c ****     if (innerData == NULL) {
 6805                             		.loc 2 2264 8
 6806 00a6 EC A5                   		mov.L	[r10], r5
 6807 00a8 61 05                   		cmp	#0, r5
 6808 00aa 21 25                   		bne	.L380
2265:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Error malloc'ing inner data buffer");
 6809                             		.loc 2 2265 9
 6810 00ac FB 12 B2 06 00 00       		mov.L	#.LC54, r1
 6811 00b2 05 00 00 00             		bsr	_WOLFSSL_MSG
 6812                             	.LBB69:
2266:../src/wolfcrypt/src/pkcs12.c ****         XFREE(safeData, pkcs12->heap, DYNAMIC_TYPE_TMP_BUFFER);
 6813                             		.loc 2 2266 9
 6814 00b6 ED A5 01                		mov.L	4[r10], r5
 6815 00b9 E7 A5 04                		mov.L	r5, 16[r10]
 6816 00bc ED A5 04                		mov.L	16[r10], r5
 6817 00bf 61 05                   		cmp	#0, r5
 6818 00c1 10                      		beq	.L381
 6819                             		.loc 2 2266 9 is_stmt 0 discriminator 1
 6820 00c2 ED A1 04                		mov.L	16[r10], r1
 6821 00c5 05 00 00 00             		bsr	_wolfSSL_Free
 6822                             	.L381:
 6823                             	.LBE69:
2267:../src/wolfcrypt/src/pkcs12.c ****         return MEMORY_E;
 6824                             		.loc 2 2267 16 is_stmt 1
 6825 00c9 FB 56 83                		mov.L	#-125, r5
 6826 00cc 38 38 01                		bra	.L389
 6827                             	.L380:
2268:../src/wolfcrypt/src/pkcs12.c ****     }
2269:../src/wolfcrypt/src/pkcs12.c ****     idx  = 0;
 6828                             		.loc 2 2269 10
 6829 00cf F9 A6 0D 00             		mov.L	#0, 52[r10]
2270:../src/wolfcrypt/src/pkcs12.c ****     idx += SetSequence(certCiSz + keyCiSz, innerData);
 6830                             		.loc 2 2270 12
 6831 00d3 ED A5 10                		mov.L	64[r10], r5
 6832 00d6 06 88 65                		add	[r6].L, r5
 6833 00d9 EC A2                   		mov.L	[r10], r2
 6834 00db EF 51                   		mov.L	r5, r1
 6835 00dd 05 00 00 00             		bsr	_SetSequence
 6836 00e1 EF 14                   		mov.L	r1, r4
 6837                             		.loc 2 2270 9
 6838 00e3 ED A5 0D                		mov.L	52[r10], r5
 6839 00e6 4B 45                   		add	r4, r5
 6840 00e8 E7 A5 0D                		mov.L	r5, 52[r10]
2271:../src/wolfcrypt/src/pkcs12.c ****     XMEMCPY(innerData + idx, certCi, certCiSz);
 6841                             		.loc 2 2271 5
 6842 00eb ED A5 0D                		mov.L	52[r10], r5
 6843 00ee EC A4                   		mov.L	[r10], r4
 6844 00f0 4B 45                   		add	r4, r5
 6845 00f2 ED A3 10                		mov.L	64[r10], r3
 6846 00f5 ED A2 0F                		mov.L	60[r10], r2
 6847 00f8 EF 51                   		mov.L	r5, r1
 6848 00fa 05 00 00 00             		bsr	_memcpy
2272:../src/wolfcrypt/src/pkcs12.c ****     XMEMCPY(innerData + idx + certCiSz, keyCi, keyCiSz);
 6849                             		.loc 2 2272 5
 6850 00fe ED A5 0D                		mov.L	52[r10], r5
 6851 0101 06 89 A5 10             		add	64[r10].L, r5
 6852 0105 EC A4                   		mov.L	[r10], r4
 6853 0107 4B 45                   		add	r4, r5
 6854 0109 EC 63                   		mov.L	[r6], r3
 6855 010b ED A2 11                		mov.L	68[r10], r2
 6856 010e EF 51                   		mov.L	r5, r1
 6857 0110 05 00 00 00             		bsr	_memcpy
2273:../src/wolfcrypt/src/pkcs12.c **** 
2274:../src/wolfcrypt/src/pkcs12.c ****     ret = wc_PKCS12_encrypt_content(pkcs12, rng, safeData, &safeDataSz,
 6858                             		.loc 2 2274 11
 6859 0114 A8 EC                   		mov.L	12[r6], r4
 6860 0116 71 A5 30                		add	#48, r10, r5
 6861 0119 F9 0A 06 8B 02          		mov.L	#0x28b, 24[r0]
 6862 011e A9 63                   		mov.L	16[r6], r3
 6863 0120 A1 0B                   		mov.L	r3, 20[r0]
 6864 0122 A1 04                   		mov.L	r4, 16[r0]
 6865 0124 A8 E4                   		mov.L	8[r6], r4
 6866 0126 A0 8C                   		mov.L	r4, 12[r0]
 6867 0128 3E 02 00                		mov.L	#0, 8[r0]
 6868 012b ED A4 02                		mov.L	8[r10], r4
 6869 012e A0 0C                   		mov.L	r4, 4[r0]
 6870 0130 EC A4                   		mov.L	[r10], r4
 6871 0132 E3 04                   		mov.L	r4, [r0]
 6872 0134 EF 54                   		mov.L	r5, r4
 6873 0136 ED A3 01                		mov.L	4[r10], r3
 6874 0139 A8 6A                   		mov.L	4[r6], r2
 6875 013b ED A1 0E                		mov.L	56[r10], r1
 6876 013e 05 00 00 00             		bsr	_wc_PKCS12_encrypt_content
 6877 0142 E7 A1 03                		mov.L	r1, 12[r10]
 6878                             	.LBB70:
2275:../src/wolfcrypt/src/pkcs12.c ****             innerData, innerDataSz, 0, pass, passSz, iter, WC_PKCS12_DATA);
2276:../src/wolfcrypt/src/pkcs12.c ****     XFREE(innerData, pkcs12->heap, DYNAMIC_TYPE_PKCS);
 6879                             		.loc 2 2276 5
 6880 0145 EC A5                   		mov.L	[r10], r5
 6881 0147 E7 A5 05                		mov.L	r5, 20[r10]
 6882 014a ED A5 05                		mov.L	20[r10], r5
 6883 014d 61 05                   		cmp	#0, r5
 6884 014f 10                      		beq	.L382
 6885                             		.loc 2 2276 5 is_stmt 0 discriminator 1
 6886 0150 ED A1 05                		mov.L	20[r10], r1
 6887 0153 05 00 00 00             		bsr	_wolfSSL_Free
 6888                             	.L382:
 6889                             	.LBE70:
2277:../src/wolfcrypt/src/pkcs12.c ****     if (ret < 0 ) {
 6890                             		.loc 2 2277 8 is_stmt 1
 6891 0157 ED A5 03                		mov.L	12[r10], r5
 6892 015a 61 05                   		cmp	#0, r5
 6893 015c 28 25                   		bge	.L383
2278:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Error setting data type for safe contents");
 6894                             		.loc 2 2278 9
 6895 015e FB 12 D5 06 00 00       		mov.L	#.LC55, r1
 6896 0164 05 00 00 00             		bsr	_WOLFSSL_MSG
 6897                             	.LBB71:
2279:../src/wolfcrypt/src/pkcs12.c ****         XFREE(safeData, pkcs12->heap, DYNAMIC_TYPE_TMP_BUFFER);
 6898                             		.loc 2 2279 9
 6899 0168 ED A5 01                		mov.L	4[r10], r5
 6900 016b E7 A5 06                		mov.L	r5, 24[r10]
 6901 016e ED A5 06                		mov.L	24[r10], r5
 6902 0171 61 05                   		cmp	#0, r5
 6903 0173 10                      		beq	.L384
 6904                             		.loc 2 2279 9 is_stmt 0 discriminator 1
 6905 0174 ED A1 06                		mov.L	24[r10], r1
 6906 0177 05 00 00 00             		bsr	_wolfSSL_Free
 6907                             	.L384:
 6908                             	.LBE71:
2280:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 6909                             		.loc 2 2280 16 is_stmt 1
 6910 017b ED A5 03                		mov.L	12[r10], r5
 6911 017e 38 86 00                		bra	.L389
 6912                             	.L383:
2281:../src/wolfcrypt/src/pkcs12.c ****     }
2282:../src/wolfcrypt/src/pkcs12.c ****     idx = 0;
 6913                             		.loc 2 2282 9
 6914 0181 F9 A6 0D 00             		mov.L	#0, 52[r10]
2283:../src/wolfcrypt/src/pkcs12.c **** 
2284:../src/wolfcrypt/src/pkcs12.c ****     ret = GetSequence(safeData, &idx, &length, safeDataSz);
 6915                             		.loc 2 2284 11
 6916 0185 ED A4 0C                		mov.L	48[r10], r4
 6917 0188 71 A3 24                		add	#36, r10, r3
 6918 018b 71 A5 34                		add	#52, r10, r5
 6919 018e EF 52                   		mov.L	r5, r2
 6920 0190 ED A1 01                		mov.L	4[r10], r1
 6921 0193 05 00 00 00             		bsr	_GetSequence
 6922 0197 E7 A1 03                		mov.L	r1, 12[r10]
2285:../src/wolfcrypt/src/pkcs12.c ****     if (ret < 0) {
 6923                             		.loc 2 2285 8
 6924 019a ED A5 03                		mov.L	12[r10], r5
 6925 019d 61 05                   		cmp	#0, r5
 6926 019f 28 24                   		bge	.L385
2286:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Error getting first sequence of safe");
 6927                             		.loc 2 2286 9
 6928 01a1 FB 12 FF 06 00 00       		mov.L	#.LC56, r1
 6929 01a7 05 00 00 00             		bsr	_WOLFSSL_MSG
 6930                             	.LBB72:
2287:../src/wolfcrypt/src/pkcs12.c ****         XFREE(safeData, pkcs12->heap, DYNAMIC_TYPE_TMP_BUFFER);
 6931                             		.loc 2 2287 9
 6932 01ab ED A5 01                		mov.L	4[r10], r5
 6933 01ae E7 A5 07                		mov.L	r5, 28[r10]
 6934 01b1 ED A5 07                		mov.L	28[r10], r5
 6935 01b4 61 05                   		cmp	#0, r5
 6936 01b6 10                      		beq	.L386
 6937                             		.loc 2 2287 9 is_stmt 0 discriminator 1
 6938 01b7 ED A1 07                		mov.L	28[r10], r1
 6939 01ba 05 00 00 00             		bsr	_wolfSSL_Free
 6940                             	.L386:
 6941                             	.LBE72:
2288:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 6942                             		.loc 2 2288 16 is_stmt 1
 6943 01be ED A5 03                		mov.L	12[r10], r5
 6944 01c1 2E 43                   		bra	.L389
 6945                             	.L385:
2289:../src/wolfcrypt/src/pkcs12.c ****     }
2290:../src/wolfcrypt/src/pkcs12.c **** 
2291:../src/wolfcrypt/src/pkcs12.c ****     ret = GetSafeContent(pkcs12, safeData, &idx, safeDataSz);
 6946                             		.loc 2 2291 11
 6947 01c3 ED A5 0C                		mov.L	48[r10], r5
 6948 01c6 EF 54                   		mov.L	r5, r4
 6949 01c8 71 A5 34                		add	#52, r10, r5
 6950 01cb EF 53                   		mov.L	r5, r3
 6951 01cd ED A2 01                		mov.L	4[r10], r2
 6952 01d0 ED A1 0E                		mov.L	56[r10], r1
 6953 01d3 05 00 00 00             		bsr	_GetSafeContent
 6954 01d7 E7 A1 03                		mov.L	r1, 12[r10]
 6955                             	.LBB73:
2292:../src/wolfcrypt/src/pkcs12.c ****     XFREE(safeData, pkcs12->heap, DYNAMIC_TYPE_TMP_BUFFER);
 6956                             		.loc 2 2292 5
 6957 01da ED A5 01                		mov.L	4[r10], r5
 6958 01dd E7 A5 08                		mov.L	r5, 32[r10]
 6959 01e0 ED A5 08                		mov.L	32[r10], r5
 6960 01e3 61 05                   		cmp	#0, r5
 6961 01e5 10                      		beq	.L387
 6962                             		.loc 2 2292 5 is_stmt 0 discriminator 1
 6963 01e6 ED A1 08                		mov.L	32[r10], r1
 6964 01e9 05 00 00 00             		bsr	_wolfSSL_Free
 6965                             	.L387:
 6966                             	.LBE73:
2293:../src/wolfcrypt/src/pkcs12.c ****     if (ret < 0) {
 6967                             		.loc 2 2293 8 is_stmt 1
 6968 01ed ED A5 03                		mov.L	12[r10], r5
 6969 01f0 61 05                   		cmp	#0, r5
 6970 01f2 28 10                   		bge	.L388
2294:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Unable to create safe contents");
 6971                             		.loc 2 2294 9
 6972 01f4 FB 12 24 07 00 00       		mov.L	#.LC57, r1
 6973 01fa 05 00 00 00             		bsr	_WOLFSSL_MSG
2295:../src/wolfcrypt/src/pkcs12.c ****         return ret;
 6974                             		.loc 2 2295 16
 6975 01fe ED A5 03                		mov.L	12[r10], r5
 6976 0201 0B                      		bra	.L389
 6977                             	.L388:
2296:../src/wolfcrypt/src/pkcs12.c ****     }
2297:../src/wolfcrypt/src/pkcs12.c ****     return 0;
 6978                             		.loc 2 2297 12
 6979 0202 66 05                   		mov.L	#0, r5
 6980                             		.balign 8,3,1
 6981                             	.L389:
2298:../src/wolfcrypt/src/pkcs12.c **** }
 6982                             		.loc 2 2298 1 discriminator 1
 6983 0204 EF 51                   		mov.L	r5, r1
 6984 0206 3F 6B 24                		rtsd	#144, r6-r11
 6985                             	.LFE62:
 6987 0209 FD 70 40 00 00 00 80    		.section C,"a",@progbits
 6988 0743 00                      		.p2align 2
 6989                             	.LC58:
 6990 0744 77 63 5F 50 4B 43 53 31 		.string	"wc_PKCS12_create"
 6990      32 5F 63 72 65 61 74 65 
 6990      00 
 6991                             	.LC59:
 6992 0755 55 6E 61 62 6C 65 20 74 		.string	"Unable to create PKCS12 safe"
 6992      6F 20 63 72 65 61 74 65 
 6992      20 50 4B 43 53 31 32 20 
 6992      73 61 66 65 00 
 6993                             	.LC60:
 6994 0772 45 72 72 6F 72 20 6D 61 		.string	"Error malloc'ing mac data buffer"
 6994      6C 6C 6F 63 27 69 6E 67 
 6994      20 6D 61 63 20 64 61 74 
 6994      61 20 62 75 66 66 65 72 
 6994      00 
 6995                             	.LC61:
 6996 0793 45 72 72 6F 72 20 6D 61 		.string	"Error malloc'ing salt data buffer"
 6996      6C 6C 6F 63 27 69 6E 67 
 6996      20 73 61 6C 74 20 64 61 
 6996      74 61 20 62 75 66 66 65 
 6996      72 00 
 6997                             	.LC62:
 6998 07b5 45 72 72 6F 72 20 67 65 		.string	"Error generating random salt"
 6998      6E 65 72 61 74 69 6E 67 
 6998      20 72 61 6E 64 6F 6D 20 
 6998      73 61 6C 74 00 
 6999                             	.LC63:
 7000 07d2 45 72 72 6F 72 20 63 72 		.string	"Error creating mac"
 7000      65 61 74 69 6E 67 20 6D 
 7000      61 63 00 
 7001                             	.LC64:
 7002 07e5 45 72 72 6F 72 20 6D 61 		.string	"Error malloc'ing mac digest buffer"
 7002      6C 6C 6F 63 27 69 6E 67 
 7002      20 6D 61 63 20 64 69 67 
 7002      65 73 74 20 62 75 66 66 
 7002      65 72 00 
 7003                             		.section	.text.wc_PKCS12_create,"ax",@progbits
 7004                             		.global	_wc_PKCS12_create
 7006                             	_wc_PKCS12_create:
 7007                             	.LFB63:
2299:../src/wolfcrypt/src/pkcs12.c **** 
2300:../src/wolfcrypt/src/pkcs12.c **** 
2301:../src/wolfcrypt/src/pkcs12.c **** /*
2302:../src/wolfcrypt/src/pkcs12.c ****  * pass : password to use with encryption
2303:../src/wolfcrypt/src/pkcs12.c ****  * passSz : size of the password buffer
2304:../src/wolfcrypt/src/pkcs12.c ****  * name : friendlyName to use
2305:../src/wolfcrypt/src/pkcs12.c ****  * key  : DER format of key
2306:../src/wolfcrypt/src/pkcs12.c ****  * keySz : size of key buffer
2307:../src/wolfcrypt/src/pkcs12.c ****  * cert : DER format of certificate
2308:../src/wolfcrypt/src/pkcs12.c ****  * certSz : size of the certificate buffer
2309:../src/wolfcrypt/src/pkcs12.c ****  * ca   : a list of extra certificates
2310:../src/wolfcrypt/src/pkcs12.c ****  * nidKey  : type of encryption to use on the key (-1 means no encryption)
2311:../src/wolfcrypt/src/pkcs12.c ****  * nidCert : type of encryption to use on the certificate
2312:../src/wolfcrypt/src/pkcs12.c ****  *           (-1 means no encryption)
2313:../src/wolfcrypt/src/pkcs12.c ****  * iter    : number of iterations with encryption
2314:../src/wolfcrypt/src/pkcs12.c ****  * macIter : number of iterations when creating MAC
2315:../src/wolfcrypt/src/pkcs12.c ****  * keyType : flag for signature and/or encryption key
2316:../src/wolfcrypt/src/pkcs12.c ****  * heap : pointer to allocate from memory
2317:../src/wolfcrypt/src/pkcs12.c ****  *
2318:../src/wolfcrypt/src/pkcs12.c ****  * returns a pointer to a new WC_PKCS12 structure on success and NULL if failed
2319:../src/wolfcrypt/src/pkcs12.c ****  */
2320:../src/wolfcrypt/src/pkcs12.c **** WC_PKCS12* wc_PKCS12_create(char* pass, word32 passSz, char* name,
2321:../src/wolfcrypt/src/pkcs12.c ****         byte* key, word32 keySz, byte* cert, word32 certSz, WC_DerCertList* ca,
2322:../src/wolfcrypt/src/pkcs12.c ****         int nidKey, int nidCert, int iter, int macIter, int keyType, void* heap)
2323:../src/wolfcrypt/src/pkcs12.c **** {
 7008                             		.loc 2 2323 1
 7009 0000 7E AA                   		push.l	r10
 7010                             	.LCFI61:
 7011 0002 7E A6                   		push.l	r6
 7012                             	.LCFI62:
 7013 0004 72 0A 50 FF             		add	#-176, r0, r10
 7014                             	.LCFI63:
 7015 0008 71 A0 E8                		add	#-24, r10, r0
 7016                             	.LCFI64:
 7017 000b 75 46 BC                		mov.L	#0xbc, r6
 7018 000e 4B A6                   		add	r10, r6
 7019 0010 E7 A1 1E                		mov.L	r1, 120[r10]
 7020 0013 E7 A2 1F                		mov.L	r2, 124[r10]
 7021 0016 E7 A3 20                		mov.L	r3, 128[r10]
 7022 0019 E7 A4 21                		mov.L	r4, 132[r10]
2324:../src/wolfcrypt/src/pkcs12.c ****     WC_PKCS12* pkcs12;
2325:../src/wolfcrypt/src/pkcs12.c ****     WC_RNG     rng;
2326:../src/wolfcrypt/src/pkcs12.c ****     int ret;
2327:../src/wolfcrypt/src/pkcs12.c **** 
2328:../src/wolfcrypt/src/pkcs12.c ****     byte*  certCi = NULL;
 7023                             		.loc 2 2328 12
 7024 001c F8 A6 00                		mov.L	#0, [r10]
2329:../src/wolfcrypt/src/pkcs12.c ****     byte*  keyCi  = NULL;
 7025                             		.loc 2 2329 12
 7026 001f F9 A6 01 00             		mov.L	#0, 4[r10]
2330:../src/wolfcrypt/src/pkcs12.c ****     word32 certCiSz;
2331:../src/wolfcrypt/src/pkcs12.c ****     word32 keyCiSz;
2332:../src/wolfcrypt/src/pkcs12.c **** 
2333:../src/wolfcrypt/src/pkcs12.c ****     WOLFSSL_ENTER("wc_PKCS12_create()");
 7027                             		.loc 2 2333 5
 7028 0023 FB 12 7A 06 00 00       		mov.L	#.LC52, r1
 7029 0029 05 00 00 00             		bsr	_WOLFSSL_ENTER
2334:../src/wolfcrypt/src/pkcs12.c **** 
2335:../src/wolfcrypt/src/pkcs12.c ****     if (wc_InitRng_ex(&rng, heap, INVALID_DEVID) != 0) {
 7030                             		.loc 2 2335 9
 7031 002d 71 A5 20                		add	#32, r10, r5
 7032 0030 FB 36 FE                		mov.L	#-2, r3
 7033 0033 AA 6A                   		mov.L	36[r6], r2
 7034 0035 EF 51                   		mov.L	r5, r1
 7035 0037 05 00 00 00             		bsr	_wc_InitRng_ex
 7036 003b EF 15                   		mov.L	r1, r5
 7037                             		.loc 2 2335 8
 7038 003d 61 05                   		cmp	#0, r5
 7039 003f 16                      		beq	.L391
2336:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 7040                             		.loc 2 2336 16
 7041 0040 66 05                   		mov.L	#0, r5
 7042 0042 38 13 03                		bra	.L410
 7043                             	.L391:
2337:../src/wolfcrypt/src/pkcs12.c ****     }
2338:../src/wolfcrypt/src/pkcs12.c **** 
2339:../src/wolfcrypt/src/pkcs12.c ****     if ((pkcs12 = wc_PKCS12_new()) == NULL) {
 7044                             		.loc 2 2339 19
 7045 0045 05 00 00 00             		bsr	_wc_PKCS12_new
 7046 0049 E7 A1 02                		mov.L	r1, 8[r10]
 7047                             		.loc 2 2339 8
 7048 004c ED A5 02                		mov.L	8[r10], r5
 7049 004f 61 05                   		cmp	#0, r5
 7050 0051 21 1D                   		bne	.L393
2340:../src/wolfcrypt/src/pkcs12.c ****         wc_FreeRng(&rng);
 7051                             		.loc 2 2340 9
 7052 0053 71 A5 20                		add	#32, r10, r5
 7053 0056 EF 51                   		mov.L	r5, r1
 7054 0058 05 00 00 00             		bsr	_wc_FreeRng
2341:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_LEAVE("wc_PKCS12_create", MEMORY_E);
 7055                             		.loc 2 2341 9
 7056 005c FB 26 83                		mov.L	#-125, r2
 7057 005f FB 12 44 07 00 00       		mov.L	#.LC58, r1
 7058 0065 05 00 00 00             		bsr	_WOLFSSL_LEAVE
2342:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 7059                             		.loc 2 2342 16
 7060 0069 66 05                   		mov.L	#0, r5
 7061 006b 38 EA 02                		bra	.L410
 7062                             	.L393:
2343:../src/wolfcrypt/src/pkcs12.c ****     }
2344:../src/wolfcrypt/src/pkcs12.c **** 
2345:../src/wolfcrypt/src/pkcs12.c ****     if ((ret = wc_PKCS12_SetHeap(pkcs12, heap)) != 0) {
 7063                             		.loc 2 2345 16
 7064 006e AA 6A                   		mov.L	36[r6], r2
 7065 0070 ED A1 02                		mov.L	8[r10], r1
 7066 0073 05 00 00 00             		bsr	_wc_PKCS12_SetHeap
 7067 0077 E7 A1 03                		mov.L	r1, 12[r10]
 7068                             		.loc 2 2345 8
 7069 007a ED A5 03                		mov.L	12[r10], r5
 7070 007d 61 05                   		cmp	#0, r5
 7071 007f 20 24                   		beq	.L394
2346:../src/wolfcrypt/src/pkcs12.c ****         wc_PKCS12_free(pkcs12);
 7072                             		.loc 2 2346 9
 7073 0081 ED A1 02                		mov.L	8[r10], r1
 7074 0084 05 00 00 00             		bsr	_wc_PKCS12_free
2347:../src/wolfcrypt/src/pkcs12.c ****         wc_FreeRng(&rng);
 7075                             		.loc 2 2347 9
 7076 0088 71 A5 20                		add	#32, r10, r5
 7077 008b EF 51                   		mov.L	r5, r1
 7078 008d 05 00 00 00             		bsr	_wc_FreeRng
2348:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_LEAVE("wc_PKCS12_create", ret);
 7079                             		.loc 2 2348 9
 7080 0091 ED A2 03                		mov.L	12[r10], r2
 7081 0094 FB 12 44 07 00 00       		mov.L	#.LC58, r1
 7082 009a 05 00 00 00             		bsr	_WOLFSSL_LEAVE
2349:../src/wolfcrypt/src/pkcs12.c ****         (void)ret;
2350:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 7083                             		.loc 2 2350 16
 7084 009e 66 05                   		mov.L	#0, r5
 7085 00a0 38 B5 02                		bra	.L410
 7086                             	.L394:
2351:../src/wolfcrypt/src/pkcs12.c ****     }
2352:../src/wolfcrypt/src/pkcs12.c **** 
2353:../src/wolfcrypt/src/pkcs12.c ****     if (iter <= 0) {
 7087                             		.loc 2 2353 8
 7088 00a3 A9 E5                   		mov.L	24[r6], r5
 7089 00a5 61 05                   		cmp	#0, r5
 7090 00a7 2A 07                   		bgt	.L395
2354:../src/wolfcrypt/src/pkcs12.c ****         iter = WC_PKCS12_ITT_DEFAULT;
 7091                             		.loc 2 2354 14
 7092 00a9 F9 6A 06 00 08          		mov.L	#0x800, 24[r6]
 7093                             	.L395:
2355:../src/wolfcrypt/src/pkcs12.c ****     }
2356:../src/wolfcrypt/src/pkcs12.c **** 
2357:../src/wolfcrypt/src/pkcs12.c ****     /**** add private key bag ****/
2358:../src/wolfcrypt/src/pkcs12.c ****     keyCi = PKCS12_create_key_content(pkcs12, nidKey, &keyCiSz, &rng,
 7094                             		.loc 2 2358 13
 7095 00ae 71 A4 20                		add	#32, r10, r4
 7096 00b1 71 A5 34                		add	#52, r10, r5
 7097 00b4 A9 E3                   		mov.L	24[r6], r3
 7098 00b6 A1 03                   		mov.L	r3, 16[r0]
 7099 00b8 EC 63                   		mov.L	[r6], r3
 7100 00ba A0 8B                   		mov.L	r3, 12[r0]
 7101 00bc ED A3 21                		mov.L	132[r10], r3
 7102 00bf A0 83                   		mov.L	r3, 8[r0]
 7103 00c1 ED A3 1F                		mov.L	124[r10], r3
 7104 00c4 A0 0B                   		mov.L	r3, 4[r0]
 7105 00c6 ED A3 1E                		mov.L	120[r10], r3
 7106 00c9 E3 03                   		mov.L	r3, [r0]
 7107 00cb EF 53                   		mov.L	r5, r3
 7108 00cd A9 62                   		mov.L	16[r6], r2
 7109 00cf ED A1 02                		mov.L	8[r10], r1
 7110 00d2 05 00 00 00             		bsr	_PKCS12_create_key_content
 7111 00d6 E7 A1 01                		mov.L	r1, 4[r10]
2359:../src/wolfcrypt/src/pkcs12.c ****             pass, passSz, key, keySz, iter);
2360:../src/wolfcrypt/src/pkcs12.c ****     if (keyCi == NULL) {
 7112                             		.loc 2 2360 8
 7113 00d9 ED A5 01                		mov.L	4[r10], r5
 7114 00dc 61 05                   		cmp	#0, r5
 7115 00de 21 17                   		bne	.L396
2361:../src/wolfcrypt/src/pkcs12.c ****         wc_PKCS12_free(pkcs12);
 7116                             		.loc 2 2361 9
 7117 00e0 ED A1 02                		mov.L	8[r10], r1
 7118 00e3 05 00 00 00             		bsr	_wc_PKCS12_free
2362:../src/wolfcrypt/src/pkcs12.c ****         wc_FreeRng(&rng);
 7119                             		.loc 2 2362 9
 7120 00e7 71 A5 20                		add	#32, r10, r5
 7121 00ea EF 51                   		mov.L	r5, r1
 7122 00ec 05 00 00 00             		bsr	_wc_FreeRng
2363:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 7123                             		.loc 2 2363 16
 7124 00f0 66 05                   		mov.L	#0, r5
 7125 00f2 38 63 02                		bra	.L410
 7126                             	.L396:
2364:../src/wolfcrypt/src/pkcs12.c ****     }
2365:../src/wolfcrypt/src/pkcs12.c **** 
2366:../src/wolfcrypt/src/pkcs12.c ****     /**** add main certificate bag and extras ****/
2367:../src/wolfcrypt/src/pkcs12.c ****     certCi = PKCS12_create_cert_content(pkcs12, nidCert, ca, cert, certSz,
 7127                             		.loc 2 2367 14
 7128 00f5 A9 E5                   		mov.L	24[r6], r5
 7129 00f7 A1 0D                   		mov.L	r5, 20[r0]
 7130 00f9 ED A5 1F                		mov.L	124[r10], r5
 7131 00fc A1 05                   		mov.L	r5, 16[r0]
 7132 00fe ED A5 1E                		mov.L	120[r10], r5
 7133 0101 A0 8D                   		mov.L	r5, 12[r0]
 7134 0103 71 A5 20                		add	#32, r10, r5
 7135 0106 A0 85                   		mov.L	r5, 8[r0]
 7136 0108 71 A5 30                		add	#48, r10, r5
 7137 010b A0 0D                   		mov.L	r5, 4[r0]
 7138 010d A8 E5                   		mov.L	8[r6], r5
 7139 010f E3 05                   		mov.L	r5, [r0]
 7140 0111 A8 6C                   		mov.L	4[r6], r4
 7141 0113 A8 EB                   		mov.L	12[r6], r3
 7142 0115 A9 6A                   		mov.L	20[r6], r2
 7143 0117 ED A1 02                		mov.L	8[r10], r1
 7144 011a 05 00 00 00             		bsr	_PKCS12_create_cert_content
 7145 011e E3 A1                   		mov.L	r1, [r10]
2368:../src/wolfcrypt/src/pkcs12.c ****             &certCiSz, &rng, pass, passSz, iter);
2369:../src/wolfcrypt/src/pkcs12.c ****     if (certCi == NULL) {
 7146                             		.loc 2 2369 8
 7147 0120 EC A5                   		mov.L	[r10], r5
 7148 0122 61 05                   		cmp	#0, r5
 7149 0124 21 2A                   		bne	.L397
 7150                             	.LBB74:
2370:../src/wolfcrypt/src/pkcs12.c ****         XFREE(keyCi, heap, DYNAMIC_TYPE_TMP_BUFFER);
 7151                             		.loc 2 2370 9
 7152 0126 ED A5 01                		mov.L	4[r10], r5
 7153 0129 E7 A5 04                		mov.L	r5, 16[r10]
 7154 012c ED A5 04                		mov.L	16[r10], r5
 7155 012f 61 05                   		cmp	#0, r5
 7156 0131 10                      		beq	.L398
 7157                             		.loc 2 2370 9 is_stmt 0 discriminator 1
 7158 0132 ED A1 04                		mov.L	16[r10], r1
 7159 0135 05 00 00 00             		bsr	_wolfSSL_Free
 7160                             	.L398:
 7161                             	.LBE74:
2371:../src/wolfcrypt/src/pkcs12.c ****         wc_PKCS12_free(pkcs12);
 7162                             		.loc 2 2371 9 is_stmt 1
 7163 0139 ED A1 02                		mov.L	8[r10], r1
 7164 013c 05 00 00 00             		bsr	_wc_PKCS12_free
2372:../src/wolfcrypt/src/pkcs12.c ****         wc_FreeRng(&rng);
 7165                             		.loc 2 2372 9
 7166 0140 71 A5 20                		add	#32, r10, r5
 7167 0143 EF 51                   		mov.L	r5, r1
 7168 0145 05 00 00 00             		bsr	_wc_FreeRng
2373:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 7169                             		.loc 2 2373 16
 7170 0149 66 05                   		mov.L	#0, r5
 7171 014b 38 0A 02                		bra	.L410
 7172                             	.L397:
2374:../src/wolfcrypt/src/pkcs12.c ****     }
2375:../src/wolfcrypt/src/pkcs12.c **** 
2376:../src/wolfcrypt/src/pkcs12.c ****     /**** create safe and Content Info ****/
2377:../src/wolfcrypt/src/pkcs12.c ****     ret = PKCS12_create_safe(pkcs12, certCi, certCiSz, keyCi, keyCiSz, &rng,
 7173                             		.loc 2 2377 11
 7174 014e ED A3 0C                		mov.L	48[r10], r3
 7175 0151 ED A4 0D                		mov.L	52[r10], r4
 7176 0154 A9 E5                   		mov.L	24[r6], r5
 7177 0156 A1 05                   		mov.L	r5, 16[r0]
 7178 0158 ED A5 1F                		mov.L	124[r10], r5
 7179 015b A0 8D                   		mov.L	r5, 12[r0]
 7180 015d ED A5 1E                		mov.L	120[r10], r5
 7181 0160 A0 85                   		mov.L	r5, 8[r0]
 7182 0162 71 A5 20                		add	#32, r10, r5
 7183 0165 A0 0D                   		mov.L	r5, 4[r0]
 7184 0167 E3 04                   		mov.L	r4, [r0]
 7185 0169 ED A4 01                		mov.L	4[r10], r4
 7186 016c EC A2                   		mov.L	[r10], r2
 7187 016e ED A1 02                		mov.L	8[r10], r1
 7188 0171 05 00 00 00             		bsr	_PKCS12_create_safe
 7189 0175 E7 A1 03                		mov.L	r1, 12[r10]
 7190                             	.LBB75:
2378:../src/wolfcrypt/src/pkcs12.c ****             pass, passSz, iter);
2379:../src/wolfcrypt/src/pkcs12.c ****     XFREE(keyCi,  heap, DYNAMIC_TYPE_TMP_BUFFER);
 7191                             		.loc 2 2379 5
 7192 0178 ED A5 01                		mov.L	4[r10], r5
 7193 017b E7 A5 05                		mov.L	r5, 20[r10]
 7194 017e ED A5 05                		mov.L	20[r10], r5
 7195 0181 61 05                   		cmp	#0, r5
 7196 0183 10                      		beq	.L399
 7197                             		.loc 2 2379 5 is_stmt 0 discriminator 1
 7198 0184 ED A1 05                		mov.L	20[r10], r1
 7199 0187 05 00 00 00             		bsr	_wolfSSL_Free
 7200                             	.L399:
 7201                             	.LBE75:
 7202                             	.LBB76:
2380:../src/wolfcrypt/src/pkcs12.c ****     XFREE(certCi, heap, DYNAMIC_TYPE_TMP_BUFFER);
 7203                             		.loc 2 2380 5 is_stmt 1
 7204 018b EC A5                   		mov.L	[r10], r5
 7205 018d E7 A5 06                		mov.L	r5, 24[r10]
 7206 0190 ED A5 06                		mov.L	24[r10], r5
 7207 0193 61 05                   		cmp	#0, r5
 7208 0195 10                      		beq	.L400
 7209                             		.loc 2 2380 5 is_stmt 0 discriminator 1
 7210 0196 ED A1 06                		mov.L	24[r10], r1
 7211 0199 05 00 00 00             		bsr	_wolfSSL_Free
 7212                             	.L400:
 7213                             	.LBE76:
2381:../src/wolfcrypt/src/pkcs12.c ****     if (ret != 0) {
 7214                             		.loc 2 2381 8 is_stmt 1
 7215 019d ED A5 03                		mov.L	12[r10], r5
 7216 01a0 61 05                   		cmp	#0, r5
 7217 01a2 20 21                   		beq	.L401
2382:../src/wolfcrypt/src/pkcs12.c ****         WOLFSSL_MSG("Unable to create PKCS12 safe");
 7218                             		.loc 2 2382 9
 7219 01a4 FB 12 55 07 00 00       		mov.L	#.LC59, r1
 7220 01aa 05 00 00 00             		bsr	_WOLFSSL_MSG
2383:../src/wolfcrypt/src/pkcs12.c ****         wc_PKCS12_free(pkcs12);
 7221                             		.loc 2 2383 9
 7222 01ae ED A1 02                		mov.L	8[r10], r1
 7223 01b1 05 00 00 00             		bsr	_wc_PKCS12_free
2384:../src/wolfcrypt/src/pkcs12.c ****         wc_FreeRng(&rng);
 7224                             		.loc 2 2384 9
 7225 01b5 71 A5 20                		add	#32, r10, r5
 7226 01b8 EF 51                   		mov.L	r5, r1
 7227 01ba 05 00 00 00             		bsr	_wc_FreeRng
2385:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 7228                             		.loc 2 2385 16
 7229 01be 66 05                   		mov.L	#0, r5
 7230 01c0 38 95 01                		bra	.L410
 7231                             	.L401:
2386:../src/wolfcrypt/src/pkcs12.c ****     }
2387:../src/wolfcrypt/src/pkcs12.c **** 
2388:../src/wolfcrypt/src/pkcs12.c ****     /* create MAC */
2389:../src/wolfcrypt/src/pkcs12.c ****     if (macIter > 0) {
 7232                             		.loc 2 2389 8
 7233 01c3 A9 ED                   		mov.L	28[r6], r5
 7234 01c5 61 05                   		cmp	#0, r5
 7235 01c7 2A 05 38 7A 01          		ble	.L402
 7236                             	.LBB77:
2390:../src/wolfcrypt/src/pkcs12.c ****         MacData* mac;
2391:../src/wolfcrypt/src/pkcs12.c ****         byte digest[WC_MAX_DIGEST_SIZE]; /* for MAC */
2392:../src/wolfcrypt/src/pkcs12.c **** 
2393:../src/wolfcrypt/src/pkcs12.c ****         mac = (MacData*)XMALLOC(sizeof(MacData), heap, DYNAMIC_TYPE_PKCS);
 7237                             		.loc 2 2393 25
 7238 01cc 75 41 18                		mov.L	#24, r1
 7239 01cf 05 00 00 00             		bsr	_wolfSSL_Malloc
 7240 01d3 E7 A1 07                		mov.L	r1, 28[r10]
2394:../src/wolfcrypt/src/pkcs12.c ****         if (mac == NULL) {
 7241                             		.loc 2 2394 12
 7242 01d6 ED A5 07                		mov.L	28[r10], r5
 7243 01d9 61 05                   		cmp	#0, r5
 7244 01db 21 21                   		bne	.L403
2395:../src/wolfcrypt/src/pkcs12.c ****             wc_PKCS12_free(pkcs12);
 7245                             		.loc 2 2395 13
 7246 01dd ED A1 02                		mov.L	8[r10], r1
 7247 01e0 05 00 00 00             		bsr	_wc_PKCS12_free
2396:../src/wolfcrypt/src/pkcs12.c ****             wc_FreeRng(&rng);
 7248                             		.loc 2 2396 13
 7249 01e4 71 A5 20                		add	#32, r10, r5
 7250 01e7 EF 51                   		mov.L	r5, r1
 7251 01e9 05 00 00 00             		bsr	_wc_FreeRng
2397:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Error malloc'ing mac data buffer");
 7252                             		.loc 2 2397 13
 7253 01ed FB 12 72 07 00 00       		mov.L	#.LC60, r1
 7254 01f3 05 00 00 00             		bsr	_WOLFSSL_MSG
2398:../src/wolfcrypt/src/pkcs12.c ****             return NULL;
 7255                             		.loc 2 2398 20
 7256 01f7 66 05                   		mov.L	#0, r5
 7257 01f9 38 5C 01                		bra	.L410
 7258                             	.L403:
2399:../src/wolfcrypt/src/pkcs12.c ****         }
2400:../src/wolfcrypt/src/pkcs12.c ****         XMEMSET(mac, 0, sizeof(MacData));
 7259                             		.loc 2 2400 9
 7260 01fc 75 43 18                		mov.L	#24, r3
 7261 01ff 66 02                   		mov.L	#0, r2
 7262 0201 ED A1 07                		mov.L	28[r10], r1
 7263 0204 05 00 00 00             		bsr	_memset
2401:../src/wolfcrypt/src/pkcs12.c ****         pkcs12->signData = mac; /* now wc_PKCS12_free will free all mac too */
 7264                             		.loc 2 2401 26
 7265 0208 ED A5 02                		mov.L	8[r10], r5
 7266 020b ED A4 07                		mov.L	28[r10], r4
 7267 020e A0 D4                   		mov.L	r4, 8[r5]
2402:../src/wolfcrypt/src/pkcs12.c **** 
2403:../src/wolfcrypt/src/pkcs12.c ****         #ifndef NO_SHA256
2404:../src/wolfcrypt/src/pkcs12.c ****             mac->oid = SHA256h;
 7268                             		.loc 2 2404 22
 7269 0210 ED A5 07                		mov.L	28[r10], r5
 7270 0213 F9 5A 02 9E 01          		mov.L	#0x19e, 8[r5]
2405:../src/wolfcrypt/src/pkcs12.c ****         #elif !defined(NO_SHA)
2406:../src/wolfcrypt/src/pkcs12.c ****             mac->oid = SHA;
2407:../src/wolfcrypt/src/pkcs12.c ****         #elif defined(WOLFSSL_SHA384)
2408:../src/wolfcrypt/src/pkcs12.c ****             mac->oid = SHA384;
2409:../src/wolfcrypt/src/pkcs12.c ****         #elif defined(WOLFSSL_SHA512)
2410:../src/wolfcrypt/src/pkcs12.c ****             mac->oid = SHA512;
2411:../src/wolfcrypt/src/pkcs12.c ****         #else
2412:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("No supported hash algorithm compiled in!");
2413:../src/wolfcrypt/src/pkcs12.c ****             wc_PKCS12_free(pkcs12);
2414:../src/wolfcrypt/src/pkcs12.c ****             wc_FreeRng(&rng);
2415:../src/wolfcrypt/src/pkcs12.c ****             return NULL;
2416:../src/wolfcrypt/src/pkcs12.c ****         #endif
2417:../src/wolfcrypt/src/pkcs12.c **** 
2418:../src/wolfcrypt/src/pkcs12.c ****         /* store number of iterations */
2419:../src/wolfcrypt/src/pkcs12.c ****         mac->itt = macIter;
 7271                             		.loc 2 2419 18
 7272 0218 ED A5 07                		mov.L	28[r10], r5
 7273 021b A9 EC                   		mov.L	28[r6], r4
 7274 021d A1 5C                   		mov.L	r4, 20[r5]
2420:../src/wolfcrypt/src/pkcs12.c **** 
2421:../src/wolfcrypt/src/pkcs12.c ****         /* set mac salt */
2422:../src/wolfcrypt/src/pkcs12.c ****         mac->saltSz = WC_PKCS12_MAC_SALT_SZ;
 7275                             		.loc 2 2422 21
 7276 021f ED A5 07                		mov.L	28[r10], r5
 7277 0222 3E 54 08                		mov.L	#8, 16[r5]
2423:../src/wolfcrypt/src/pkcs12.c ****         mac->salt = (byte*)XMALLOC(WC_PKCS12_MAC_SALT_SZ, heap,
 7278                             		.loc 2 2423 28
 7279 0225 66 81                   		mov.L	#8, r1
 7280 0227 05 00 00 00             		bsr	_wolfSSL_Malloc
 7281 022b EF 14                   		mov.L	r1, r4
 7282                             		.loc 2 2423 19
 7283 022d ED A5 07                		mov.L	28[r10], r5
 7284 0230 A0 5C                   		mov.L	r4, 4[r5]
2424:../src/wolfcrypt/src/pkcs12.c ****                 DYNAMIC_TYPE_PKCS);
2425:../src/wolfcrypt/src/pkcs12.c ****         if (mac->salt == NULL) {
 7285                             		.loc 2 2425 16
 7286 0232 ED A5 07                		mov.L	28[r10], r5
 7287 0235 A8 5D                   		mov.L	4[r5], r5
 7288                             		.loc 2 2425 12
 7289 0237 61 05                   		cmp	#0, r5
 7290 0239 21 21                   		bne	.L405
2426:../src/wolfcrypt/src/pkcs12.c ****             wc_PKCS12_free(pkcs12);
 7291                             		.loc 2 2426 13
 7292 023b ED A1 02                		mov.L	8[r10], r1
 7293 023e 05 00 00 00             		bsr	_wc_PKCS12_free
2427:../src/wolfcrypt/src/pkcs12.c ****             wc_FreeRng(&rng);
 7294                             		.loc 2 2427 13
 7295 0242 71 A5 20                		add	#32, r10, r5
 7296 0245 EF 51                   		mov.L	r5, r1
 7297 0247 05 00 00 00             		bsr	_wc_FreeRng
2428:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Error malloc'ing salt data buffer");
 7298                             		.loc 2 2428 13
 7299 024b FB 12 93 07 00 00       		mov.L	#.LC61, r1
 7300 0251 05 00 00 00             		bsr	_WOLFSSL_MSG
2429:../src/wolfcrypt/src/pkcs12.c ****             return NULL;
 7301                             		.loc 2 2429 20
 7302 0255 66 05                   		mov.L	#0, r5
 7303 0257 38 FE 00                		bra	.L410
 7304                             	.L405:
2430:../src/wolfcrypt/src/pkcs12.c ****         }
2431:../src/wolfcrypt/src/pkcs12.c **** 
2432:../src/wolfcrypt/src/pkcs12.c ****         if (wc_RNG_GenerateBlock(&rng, mac->salt, mac->saltSz) != 0) {
 7305                             		.loc 2 2432 13
 7306 025a ED A5 07                		mov.L	28[r10], r5
 7307 025d A8 5C                   		mov.L	4[r5], r4
 7308 025f ED A5 07                		mov.L	28[r10], r5
 7309 0262 A9 53                   		mov.L	16[r5], r3
 7310 0264 71 A5 20                		add	#32, r10, r5
 7311 0267 EF 42                   		mov.L	r4, r2
 7312 0269 EF 51                   		mov.L	r5, r1
 7313 026b 05 00 00 00             		bsr	_wc_RNG_GenerateBlock
 7314 026f EF 15                   		mov.L	r1, r5
 7315                             		.loc 2 2432 12
 7316 0271 61 05                   		cmp	#0, r5
 7317 0273 20 21                   		beq	.L406
2433:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Error generating random salt");
 7318                             		.loc 2 2433 13
 7319 0275 FB 12 B5 07 00 00       		mov.L	#.LC62, r1
 7320 027b 05 00 00 00             		bsr	_WOLFSSL_MSG
2434:../src/wolfcrypt/src/pkcs12.c ****             wc_PKCS12_free(pkcs12);
 7321                             		.loc 2 2434 13
 7322 027f ED A1 02                		mov.L	8[r10], r1
 7323 0282 05 00 00 00             		bsr	_wc_PKCS12_free
2435:../src/wolfcrypt/src/pkcs12.c ****             wc_FreeRng(&rng);
 7324                             		.loc 2 2435 13
 7325 0286 71 A5 20                		add	#32, r10, r5
 7326 0289 EF 51                   		mov.L	r5, r1
 7327 028b 05 00 00 00             		bsr	_wc_FreeRng
2436:../src/wolfcrypt/src/pkcs12.c ****             return NULL;
 7328                             		.loc 2 2436 20
 7329 028f 66 05                   		mov.L	#0, r5
 7330 0291 38 C4 00                		bra	.L410
 7331                             	.L406:
2437:../src/wolfcrypt/src/pkcs12.c ****         }
2438:../src/wolfcrypt/src/pkcs12.c ****         ret = wc_PKCS12_create_mac(pkcs12, pkcs12->safe->data,
 7332                             		.loc 2 2438 50
 7333 0294 ED A5 02                		mov.L	8[r10], r5
 7334 0297 A8 5D                   		mov.L	4[r5], r5
 7335                             		.loc 2 2438 15
 7336 0299 A8 5A                   		mov.L	4[r5], r2
2439:../src/wolfcrypt/src/pkcs12.c ****                 pkcs12->safe->dataSz, (const byte*)pass, passSz, digest,
 7337                             		.loc 2 2439 23
 7338 029b ED A5 02                		mov.L	8[r10], r5
 7339 029e A8 5D                   		mov.L	4[r5], r5
2438:../src/wolfcrypt/src/pkcs12.c ****                 pkcs12->safe->dataSz, (const byte*)pass, passSz, digest,
 7340                             		.loc 2 2438 15
 7341 02a0 A9 53                   		mov.L	16[r5], r3
 7342 02a2 3E 02 40                		mov.L	#0x40, 8[r0]
 7343 02a5 71 A5 38                		add	#56, r10, r5
 7344 02a8 A0 0D                   		mov.L	r5, 4[r0]
 7345 02aa ED A5 1F                		mov.L	124[r10], r5
 7346 02ad E3 05                   		mov.L	r5, [r0]
 7347 02af ED A4 1E                		mov.L	120[r10], r4
 7348 02b2 ED A1 02                		mov.L	8[r10], r1
 7349 02b5 05 00 00 00             		bsr	_wc_PKCS12_create_mac
 7350 02b9 E7 A1 03                		mov.L	r1, 12[r10]
2440:../src/wolfcrypt/src/pkcs12.c ****                 WC_MAX_DIGEST_SIZE);
2441:../src/wolfcrypt/src/pkcs12.c ****         if (ret < 0) {
 7351                             		.loc 2 2441 12
 7352 02bc ED A5 03                		mov.L	12[r10], r5
 7353 02bf 61 05                   		cmp	#0, r5
 7354 02c1 28 2D                   		bge	.L407
2442:../src/wolfcrypt/src/pkcs12.c ****             wc_PKCS12_free(pkcs12);
 7355                             		.loc 2 2442 13
 7356 02c3 ED A1 02                		mov.L	8[r10], r1
 7357 02c6 05 00 00 00             		bsr	_wc_PKCS12_free
2443:../src/wolfcrypt/src/pkcs12.c ****             wc_FreeRng(&rng);
 7358                             		.loc 2 2443 13
 7359 02ca 71 A5 20                		add	#32, r10, r5
 7360 02cd EF 51                   		mov.L	r5, r1
 7361 02cf 05 00 00 00             		bsr	_wc_FreeRng
2444:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Error creating mac");
 7362                             		.loc 2 2444 13
 7363 02d3 FB 12 D2 07 00 00       		mov.L	#.LC63, r1
 7364 02d9 05 00 00 00             		bsr	_WOLFSSL_MSG
2445:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_LEAVE("wc_PKCS12_create", ret);
 7365                             		.loc 2 2445 13
 7366 02dd ED A2 03                		mov.L	12[r10], r2
 7367 02e0 FB 12 44 07 00 00       		mov.L	#.LC58, r1
 7368 02e6 05 00 00 00             		bsr	_WOLFSSL_LEAVE
2446:../src/wolfcrypt/src/pkcs12.c ****             return NULL;
 7369                             		.loc 2 2446 20
 7370 02ea 66 05                   		mov.L	#0, r5
 7371 02ec 2E 69                   		bra	.L410
 7372                             	.L407:
2447:../src/wolfcrypt/src/pkcs12.c ****         }
2448:../src/wolfcrypt/src/pkcs12.c **** 
2449:../src/wolfcrypt/src/pkcs12.c ****         mac->digestSz = ret;
 7373                             		.loc 2 2449 23
 7374 02ee ED A4 03                		mov.L	12[r10], r4
 7375 02f1 ED A5 07                		mov.L	28[r10], r5
 7376 02f4 A0 DC                   		mov.L	r4, 12[r5]
2450:../src/wolfcrypt/src/pkcs12.c ****         mac->digest = (byte*)XMALLOC(ret, heap, DYNAMIC_TYPE_PKCS);
 7377                             		.loc 2 2450 30
 7378 02f6 ED A5 03                		mov.L	12[r10], r5
 7379 02f9 EF 51                   		mov.L	r5, r1
 7380 02fb 05 00 00 00             		bsr	_wolfSSL_Malloc
 7381 02ff EF 14                   		mov.L	r1, r4
 7382                             		.loc 2 2450 21
 7383 0301 ED A5 07                		mov.L	28[r10], r5
 7384 0304 E3 54                   		mov.L	r4, [r5]
2451:../src/wolfcrypt/src/pkcs12.c ****         if (mac->digest == NULL) {
 7385                             		.loc 2 2451 16
 7386 0306 ED A5 07                		mov.L	28[r10], r5
 7387 0309 EC 55                   		mov.L	[r5], r5
 7388                             		.loc 2 2451 12
 7389 030b 61 05                   		cmp	#0, r5
 7390 030d 21 20                   		bne	.L408
2452:../src/wolfcrypt/src/pkcs12.c ****             WOLFSSL_MSG("Error malloc'ing mac digest buffer");
 7391                             		.loc 2 2452 13
 7392 030f FB 12 E5 07 00 00       		mov.L	#.LC64, r1
 7393 0315 05 00 00 00             		bsr	_WOLFSSL_MSG
2453:../src/wolfcrypt/src/pkcs12.c ****             wc_PKCS12_free(pkcs12);
 7394                             		.loc 2 2453 13
 7395 0319 ED A1 02                		mov.L	8[r10], r1
 7396 031c 05 00 00 00             		bsr	_wc_PKCS12_free
2454:../src/wolfcrypt/src/pkcs12.c ****             wc_FreeRng(&rng);
 7397                             		.loc 2 2454 13
 7398 0320 71 A5 20                		add	#32, r10, r5
 7399 0323 EF 51                   		mov.L	r5, r1
 7400 0325 05 00 00 00             		bsr	_wc_FreeRng
2455:../src/wolfcrypt/src/pkcs12.c ****             return NULL;
 7401                             		.loc 2 2455 20
 7402 0329 66 05                   		mov.L	#0, r5
 7403 032b 2E 2A                   		bra	.L410
 7404                             	.L408:
2456:../src/wolfcrypt/src/pkcs12.c ****         }
2457:../src/wolfcrypt/src/pkcs12.c ****         XMEMCPY(mac->digest, digest, mac->digestSz);
 7405                             		.loc 2 2457 9
 7406 032d ED A5 07                		mov.L	28[r10], r5
 7407 0330 EC 54                   		mov.L	[r5], r4
 7408 0332 ED A5 07                		mov.L	28[r10], r5
 7409 0335 A8 DB                   		mov.L	12[r5], r3
 7410 0337 71 A5 38                		add	#56, r10, r5
 7411 033a EF 52                   		mov.L	r5, r2
 7412 033c EF 41                   		mov.L	r4, r1
 7413 033e 05 00 00 00             		bsr	_memcpy
 7414                             	.LBE77:
 7415 0342 0F                      		bra	.L409
 7416                             	.L402:
2458:../src/wolfcrypt/src/pkcs12.c ****     }
2459:../src/wolfcrypt/src/pkcs12.c ****     else {
2460:../src/wolfcrypt/src/pkcs12.c ****         pkcs12->signData = NULL;
 7417                             		.loc 2 2460 26
 7418 0343 ED A5 02                		mov.L	8[r10], r5
 7419 0346 3E 52 00                		mov.L	#0, 8[r5]
 7420                             	.L409:
2461:../src/wolfcrypt/src/pkcs12.c ****     }
2462:../src/wolfcrypt/src/pkcs12.c **** 
2463:../src/wolfcrypt/src/pkcs12.c ****     wc_FreeRng(&rng);
 7421                             		.loc 2 2463 5
 7422 0349 71 A5 20                		add	#32, r10, r5
 7423 034c EF 51                   		mov.L	r5, r1
 7424 034e 05 00 00 00             		bsr	_wc_FreeRng
2464:../src/wolfcrypt/src/pkcs12.c ****     (void)name;
2465:../src/wolfcrypt/src/pkcs12.c ****     (void)keyType;
2466:../src/wolfcrypt/src/pkcs12.c **** 
2467:../src/wolfcrypt/src/pkcs12.c ****     return pkcs12;
 7425                             		.loc 2 2467 12
 7426 0352 ED A5 02                		mov.L	8[r10], r5
 7427                             		.balign 8,3,1
 7428                             	.L410:
2468:../src/wolfcrypt/src/pkcs12.c **** }
 7429                             		.loc 2 2468 1 discriminator 2
 7430 0355 EF 51                   		mov.L	r5, r1
 7431 0357 72 00 C8 00             		add	#0xc8, r0
 7432 035b 7E B6                   		pop	r6
 7433 035d 7E BA                   		pop	r10
 7434 035f 02                      		rts
 7435                             	.LFE63:
 7437                             		.section	.text.wc_PKCS12_SetHeap,"ax",@progbits
 7438                             		.global	_wc_PKCS12_SetHeap
 7440                             	_wc_PKCS12_SetHeap:
 7441                             	.LFB64:
2469:../src/wolfcrypt/src/pkcs12.c **** 
2470:../src/wolfcrypt/src/pkcs12.c **** 
2471:../src/wolfcrypt/src/pkcs12.c **** /* if using a specific memory heap */
2472:../src/wolfcrypt/src/pkcs12.c **** int wc_PKCS12_SetHeap(WC_PKCS12* pkcs12, void* heap)
2473:../src/wolfcrypt/src/pkcs12.c **** {
 7442                             		.loc 2 2473 1
 7443 0000 7E AA                   		push.l	r10
 7444                             	.LCFI65:
 7445 0002 71 0A F8                		add	#-8, r0, r10
 7446                             	.LCFI66:
 7447 0005 EF A0                   		mov.L	r10, r0
 7448 0007 E3 A1                   		mov.L	r1, [r10]
 7449 0009 E7 A2 01                		mov.L	r2, 4[r10]
2474:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12 == NULL) {
 7450                             		.loc 2 2474 8
 7451 000c EC A5                   		mov.L	[r10], r5
 7452 000e 61 05                   		cmp	#0, r5
 7453 0010 1E                      		bne	.L412
2475:../src/wolfcrypt/src/pkcs12.c ****         return BAD_FUNC_ARG;
 7454                             		.loc 2 2475 16
 7455 0011 FB 5A 53 FF             		mov.L	#-173, r5
 7456 0015 0A                      		bra	.L413
 7457                             	.L412:
2476:../src/wolfcrypt/src/pkcs12.c ****     }
2477:../src/wolfcrypt/src/pkcs12.c ****     pkcs12->heap = heap;
 7458                             		.loc 2 2477 18
 7459 0016 EC A5                   		mov.L	[r10], r5
 7460 0018 ED A4 01                		mov.L	4[r10], r4
 7461 001b E3 54                   		mov.L	r4, [r5]
2478:../src/wolfcrypt/src/pkcs12.c **** 
2479:../src/wolfcrypt/src/pkcs12.c ****     return 0;
 7462                             		.loc 2 2479 12
 7463 001d 66 05                   		mov.L	#0, r5
 7464                             	.L413:
2480:../src/wolfcrypt/src/pkcs12.c **** }
 7465                             		.loc 2 2480 1
 7466 001f EF 51                   		mov.L	r5, r1
 7467 0021 3F AA 03                		rtsd	#12, r10-r10
 7468                             	.LFE64:
 7470                             		.section	.text.wc_PKCS12_GetHeap,"ax",@progbits
 7471                             		.global	_wc_PKCS12_GetHeap
 7473                             	_wc_PKCS12_GetHeap:
 7474                             	.LFB65:
2481:../src/wolfcrypt/src/pkcs12.c **** 
2482:../src/wolfcrypt/src/pkcs12.c **** 
2483:../src/wolfcrypt/src/pkcs12.c **** /* getter for heap */
2484:../src/wolfcrypt/src/pkcs12.c **** void* wc_PKCS12_GetHeap(WC_PKCS12* pkcs12)
2485:../src/wolfcrypt/src/pkcs12.c **** {
 7475                             		.loc 2 2485 1
 7476 0000 7E AA                   		push.l	r10
 7477                             	.LCFI67:
 7478 0002 71 0A FC                		add	#-4, r0, r10
 7479                             	.LCFI68:
 7480 0005 EF A0                   		mov.L	r10, r0
 7481 0007 E3 A1                   		mov.L	r1, [r10]
2486:../src/wolfcrypt/src/pkcs12.c ****     if (pkcs12 == NULL) {
 7482                             		.loc 2 2486 8
 7483 0009 EC A5                   		mov.L	[r10], r5
 7484 000b 61 05                   		cmp	#0, r5
 7485 000d 1C                      		bne	.L415
2487:../src/wolfcrypt/src/pkcs12.c ****         return NULL;
 7486                             		.loc 2 2487 16
 7487 000e 66 05                   		mov.L	#0, r5
 7488 0010 0D                      		bra	.L416
 7489                             	.L415:
2488:../src/wolfcrypt/src/pkcs12.c ****     }
2489:../src/wolfcrypt/src/pkcs12.c **** 
2490:../src/wolfcrypt/src/pkcs12.c ****     return pkcs12->heap;
 7490                             		.loc 2 2490 18
 7491 0011 EC A5                   		mov.L	[r10], r5
 7492 0013 EC 55                   		mov.L	[r5], r5
 7493                             	.L416:
2491:../src/wolfcrypt/src/pkcs12.c **** }
 7494                             		.loc 2 2491 1
 7495 0015 EF 51                   		mov.L	r5, r1
 7496 0017 3F AA 02                		rtsd	#8, r10-r10
 7497                             	.LFE65:
 8118                             	.Letext0:
 8119                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 8120                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 8121                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 8122                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 8123                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 8124                             		.file 8 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 8125                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 8126                             		.file 10 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\incl
 8127                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sp_int.h"
 8128                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha256.h"
 8129                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/random.h"
 8130                             		.file 14 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/wolfmath.h"
 8131                             		.file 15 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/dsa.h"
 8132                             		.file 16 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha.h"
 8133                             		.file 17 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/md5.h"
 8134                             		.file 18 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/asn_public.h"
 8135                             		.file 19 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/asn.h"
 8136                             		.file 20 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
 8137                             		.file 21 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha512.h"
 8138                             		.file 22 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/md4.h"
 8139                             		.file 23 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/hmac.h"
 8140                             		.file 24 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/pkcs12.h"
