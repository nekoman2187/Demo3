   1                             		.file	"sha512.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.rotlFixed,"ax",@progbits
   6                             	_rotlFixed:
   7                             	.LFB1:
   8                             		.file 1 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfcrypt/src/misc.c"
   1:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* misc.c
   2:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   3:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   5:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * This file is part of wolfSSL.
   6:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   7:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * it under the terms of the GNU General Public License as published by
   9:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * (at your option) any later version.
  11:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  12:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * GNU General Public License for more details.
  16:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  17:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * You should have received a copy of the GNU General Public License
  18:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * along with this program; if not, write to the Free Software
  19:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  21:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /*
  22:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  23:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** DESCRIPTION
  24:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** This module implements the arithmetic-shift right, left, byte swapping, XOR,
  25:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** masking and clearing memory logic.
  26:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  27:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** */
  28:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef HAVE_CONFIG_H
  29:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <config.h>
  30:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  31:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  32:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/settings.h>
  33:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  34:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLF_CRYPT_MISC_C
  35:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #define WOLF_CRYPT_MISC_C
  36:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  37:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/misc.h>
  38:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  39:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* inlining these functions is a huge speed increase and a small size decrease,
  40:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    because the functions are smaller than function call setup/cleanup, e.g.,
  41:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    md5 benchmark is twice as fast with inline.  If you don't want it, then
  42:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    define NO_INLINE and compile this file into wolfssl, otherwise it's used as
  43:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    a source header
  44:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  45:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  46:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef NO_INLINE
  47:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC
  48:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  49:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC static
  50:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  51:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  52:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* Check for if compiling misc.c when not needed. */
  53:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if !defined(WOLFSSL_MISC_INCLUDED) && !defined(NO_INLINE)
  54:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_IGNORE_FILE_WARN
  55:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #warning misc.c does not need to be compiled when using inline (NO_INLINE not defined)
  56:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
  57:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  58:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  59:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  60:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  61:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__ICCARM__)
  62:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <intrinsics.h>
  63:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  64:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  65:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  66:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef INTEL_INTRINSICS
  67:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  68:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <stdlib.h>      /* get intrinsic definitions */
  69:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  70:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* for non visual studio probably need no long version, 32 bit only
  71:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****      * i.e., _rotl and _rotr */
  72:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #pragma intrinsic(_lrotl, _lrotr)
  73:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  74:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  75:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  76:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotl(x, y) : x;
  77:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  78:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  79:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
  80:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  81:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotr(x, y) : x;
  82:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  83:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  84:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
  85:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  86:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <builtin.h>      /* get intrinsic definitions */
  87:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  88:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if !defined(NO_INLINE)
  89:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  90:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotlFixed(x, y) _builtin_rotl(x, y)
  91:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  92:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotrFixed(x, y) _builtin_rotr(x, y)
  93:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  94:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #else /* create real function */
  95:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  96:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  97:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  98:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotl(x, y);
  99:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 100:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 101:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 102:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 103:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotr(x, y);
 104:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 105:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 106:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 107:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 108:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else /* generic */
 109:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value. */
 110:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 111:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
 112:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
   9                             		.loc 1 112 5
  10 0000 6E 7A                   		pushm	r7-r10
  11                             	.LCFI0:
  12 0002 71 0A F8                		add	#-8, r0, r10
  13                             	.LCFI1:
  14 0005 EF A0                   		mov.L	r10, r0
  15 0007 E3 A1                   		mov.L	r1, [r10]
  16 0009 E7 A2 01                		mov.L	r2, 4[r10]
 113:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x << y) | (x >> (sizeof(y) * 8 - y));
  17                             		.loc 1 113 25
  18 000c EC A4                   		mov.L	[r10], r4
  19 000e ED A5 01                		mov.L	4[r10], r5
  20 0011 EF 47                   		mov.L	r4, r7
  21 0013 FD 66 57                		rotl	r5, r7
  22 0016 EF 75                   		mov.L	r7, r5
 114:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  23                             		.loc 1 114 5
  24 0018 EF 51                   		mov.L	r5, r1
  25 001a 3F 7A 06                		rtsd	#24, r7-r10
  26                             	.LFE1:
  28                             		.section	.text.ByteReverseWord32,"ax",@progbits
  30                             	_ByteReverseWord32:
  31                             	.LFB3:
 115:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 116:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value. */
 117:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 118:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 119:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x >> y) | (x << (sizeof(y) * 8 - y));
 120:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 121:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 122:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 123:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 124:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef WC_RC2
 125:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 126:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value */
 127:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotlFixed16(word16 x, word16 y)
 128:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 129:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 130:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 131:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 132:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 133:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value */
 134:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotrFixed16(word16 x, word16 y)
 135:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 136:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 137:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 138:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 139:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WC_RC2 */
 140:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 141:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of 32-bit word value. */
 142:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__CCRX__) && !defined(NO_INLINE) /* shortest version for CC-RX */
 143:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define ByteReverseWord32(value) _builtin_revl(value)
 144:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 145:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
 146:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
  32                             		.loc 1 146 1
  33 0000 7E AA                   		push.l	r10
  34                             	.LCFI2:
  35 0002 71 0A FC                		add	#-4, r0, r10
  36                             	.LCFI3:
  37 0005 EF A0                   		mov.L	r10, r0
  38 0007 E3 A1                   		mov.L	r1, [r10]
 147:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef PPC_INTRINSICS
 148:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* PPC: load reverse indexed instruction */
 149:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__lwbrx(&value,0);
 150:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__ICCARM__)
 151:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__REV(value);
 152:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(KEIL_INTRINSICS)
 153:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__rev(value);
 154:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
 155:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)_builtin_revl(value);
 156:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLF_ALLOW_BUILTIN) && \
 157:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 158:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__builtin_bswap32(value);
 159:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 160:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       defined(__aarch64__)
 161:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 162:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV32 %0, %0  \n"
 163:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 164:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 165:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 166:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 167:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 168:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       (defined(__thumb__) || defined(__arm__))
 169:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 170:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV %0, %0  \n"
 171:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 172:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 173:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 174:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 175:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(FAST_ROTATE)
 176:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 5 instructions with rotate instruction, 9 without */
 177:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (rotrFixed(value, 8U) & 0xff00ff00) |
 178:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****            (rotlFixed(value, 8U) & 0x00ff00ff);
 179:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 180:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 6 instructions with rotate instruction, 8 without */
 181:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  39                             		.loc 1 181 35
  40 0009 EC A5                   		mov.L	[r10], r5
  41 000b 68 85                   		shlr	#8, r5
  42 000d FB 42 FF 00 FF 00       		mov.L	#0xff00ff, r4
  43 0013 53 54                   		and	r5, r4
  44                             		.loc 1 181 65
  45 0015 EC A5                   		mov.L	[r10], r5
  46 0017 6C 85                   		shll	#8, r5
  47 0019 74 25 00 FF 00 FF       		and	#-16711936, r5
  48                             		.loc 1 181 11
  49 001f 57 45                   		or	r4, r5
  50 0021 E3 A5                   		mov.L	r5, [r10]
 182:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed(value, 16U);
  51                             		.loc 1 182 12
  52 0023 75 42 10                		mov.L	#16, r2
  53 0026 EC A1                   		mov.L	[r10], r1
  54 0028 05 00 00 00             		bsr	_rotlFixed
  55 002c EF 15                   		mov.L	r1, r5
 183:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 184:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
  56                             		.loc 1 184 1
  57 002e EF 51                   		mov.L	r5, r1
  58 0030 3F AA 02                		rtsd	#8, r10-r10
  59                             	.LFE3:
  61                             		.section	.text.rotrFixed64,"ax",@progbits
  63                             	_rotrFixed64:
  64                             	.LFB6:
 185:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* __CCRX__ */
 186:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of words array of a given count. */
 187:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
 188:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                     word32 byteCount)
 189:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 190:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word32), i;
 191:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 193:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
 194:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 195:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 196:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 197:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WORD64_AVAILABLE) && !defined(WOLFSSL_NO_WORD64_OPS)
 198:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 199:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 200:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotlFixed64(word64 x, word64 y)
 201:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 202:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 203:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 204:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 205:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 206:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotrFixed64(word64 x, word64 y)
 207:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
  65                             		.loc 1 207 1
  66 0000 6E 6D                   		pushm	r6-r13
  67                             	.LCFI4:
  68 0002 71 0A F0                		add	#-16, r0, r10
  69                             	.LCFI5:
  70 0005 EF A0                   		mov.L	r10, r0
  71 0007 E3 A1                   		mov.L	r1, [r10]
  72 0009 E7 A2 01                		mov.L	r2, 4[r10]
  73 000c E7 A3 02                		mov.L	r3, 8[r10]
  74 000f E7 A4 03                		mov.L	r4, 12[r10]
 208:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
  75                             		.loc 1 208 21
  76 0012 ED A4 02                		mov.L	8[r10], r4
  77 0015 EC A5                   		mov.L	[r10], r5
  78 0017 ED A6 01                		mov.L	4[r10], r6
  79 001a 71 43 E0                		add	#-32, r4, r3
  80 001d 61 03                   		cmp	#0, r3
  81 001f 29 0B                   		blt	.L6
  82 0021 EF 68                   		mov.L	r6, r8
  83 0023 FD 60 38                		shlr	r3, r8
  84 0026 66 09                   		mov.L	#0, r9
  85 0028 2E 1D                   		bra	.L7
  86                             	.L6:
  87 002a FD C1 62                		shll	#1, r6, r2
  88 002d 75 43 1F                		mov.L	#31, r3
  89 0030 43 43                   		sub	r4, r3
  90 0032 EF 27                   		mov.L	r2, r7
  91 0034 FD 62 37                		shll	r3, r7
  92 0037 EF 73                   		mov.L	r7, r3
  93 0039 EF 58                   		mov.L	r5, r8
  94 003b FD 60 48                		shlr	r4, r8
  95 003e 57 38                   		or	r3, r8
  96 0040 EF 69                   		mov.L	r6, r9
  97 0042 FD 60 49                		shlr	r4, r9
  98                             	.L7:
  99 0045 FC 07 43                		neg	r4, r3
 100 0048 75 23 3F                		and	#63, r3
 101 004b 71 33 E0                		add	#-32, r3
 102 004e 61 03                   		cmp	#0, r3
 103 0050 29 0B                   		blt	.L8
 104 0052 EF 5C                   		mov.L	r5, r12
 105 0054 FD 62 3C                		shll	r3, r12
 106 0057 66 0B                   		mov.L	#0, r11
 107 0059 2E 2B                   		bra	.L9
 108                             	.L8:
 109 005b FD 81 52                		shlr	#1, r5, r2
 110 005e 75 41 1F                		mov.L	#31, r1
 111 0061 FC 07 43                		neg	r4, r3
 112 0064 75 23 3F                		and	#63, r3
 113 0067 FF 03 31                		sub	r3, r1, r3
 114 006a FD 60 32                		shlr	r3, r2
 115 006d FC 07 43                		neg	r4, r3
 116 0070 75 23 3F                		and	#63, r3
 117 0073 EF 6C                   		mov.L	r6, r12
 118 0075 FD 62 3C                		shll	r3, r12
 119 0078 57 2C                   		or	r2, r12
 120 007a 7E 14                   		neg	r4
 121 007c 75 24 3F                		and	#63, r4
 122 007f EF 5B                   		mov.L	r5, r11
 123 0081 FD 62 4B                		shll	r4, r11
 124                             	.L9:
 125 0084 FF 5D 8B                		or	r8, r11, r13
 126 0087 FF 5E 9C                		or	r9, r12, r14
 127 008a EF DB                   		mov.L	r13, r11
 128 008c EF EC                   		mov.L	r14, r12
 129 008e EF B5                   		mov.L	r11, r5
 130 0090 EF C6                   		mov.L	r12, r6
 209:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 131                             		.loc 1 209 1
 132 0092 EF 51                   		mov.L	r5, r1
 133 0094 EF 62                   		mov.L	r6, r2
 134 0096 3F 6D 0C                		rtsd	#48, r6-r13
 135                             	.LFE6:
 137                             		.section	.text.ByteReverseWord64,"ax",@progbits
 139                             	_ByteReverseWord64:
 140                             	.LFB7:
 210:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 211:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 212:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 ByteReverseWord64(word64 value)
 213:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 141                             		.loc 1 213 1
 142 0000 6E 6C                   		pushm	r6-r12
 143                             	.LCFI6:
 144 0002 71 0A E0                		add	#-32, r0, r10
 145                             	.LCFI7:
 146 0005 EF A0                   		mov.L	r10, r0
 147 0007 E3 A1                   		mov.L	r1, [r10]
 148 0009 E7 A2 01                		mov.L	r2, 4[r10]
 214:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WOLF_ALLOW_BUILTIN) && defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 215:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)__builtin_bswap64(value);
 216:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFCRYPT_SLOW_WORD64)
 217:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)((word64)ByteReverseWord32((word32) value)) << 32 |
 149                             		.loc 1 217 29
 150 000c EC A5                   		mov.L	[r10], r5
 151 000e EF 51                   		mov.L	r5, r1
 152 0010 05 00 00 00             		bsr	_ByteReverseWord32
 153 0014 EF 15                   		mov.L	r1, r5
 154                             		.loc 1 217 12
 155 0016 E7 A5 02                		mov.L	r5, 8[r10]
 156 0019 F9 A6 03 00             		mov.L	#0, 12[r10]
 157                             		.loc 1 217 64
 158 001d ED AC 02                		mov.L	8[r10], r12
 159 0020 6C 0C                   		shll	#0, r12
 160 0022 66 0B                   		mov.L	#0, r11
 218:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         (word64)ByteReverseWord32((word32)(value   >> 32));
 161                             		.loc 1 218 52
 162 0024 ED A5 01                		mov.L	4[r10], r5
 163 0027 68 05                   		shlr	#0, r5
 164 0029 E7 A5 04                		mov.L	r5, 16[r10]
 165 002c F9 A6 05 00             		mov.L	#0, 20[r10]
 166                             		.loc 1 218 17
 167 0030 ED A5 04                		mov.L	16[r10], r5
 168 0033 EF 51                   		mov.L	r5, r1
 169 0035 05 00 00 00             		bsr	_ByteReverseWord32
 170 0039 EF 15                   		mov.L	r1, r5
 171                             		.loc 1 218 9
 172 003b EF 58                   		mov.L	r5, r8
 173 003d 66 09                   		mov.L	#0, r9
 217:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         (word64)ByteReverseWord32((word32)(value   >> 32));
 174                             		.loc 1 217 70
 175 003f FF 57 8B                		or	r8, r11, r7
 176 0042 E7 A7 06                		mov.L	r7, 24[r10]
 177 0045 FF 57 9C                		or	r9, r12, r7
 178 0048 E7 A7 07                		mov.L	r7, 28[r10]
 179 004b ED A5 06                		mov.L	24[r10], r5
 180 004e ED A6 07                		mov.L	28[r10], r6
 219:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 220:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFF00FF00FF00FF00)) >> 8) |
 221:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x00FF00FF00FF00FF)) << 8);
 222:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFFFF0000FFFF0000)) >> 16) |
 223:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x0000FFFF0000FFFF)) << 16);
 224:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed64(value, 32U);
 225:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 226:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 181                             		.loc 1 226 1
 182 0051 EF 51                   		mov.L	r5, r1
 183 0053 EF 62                   		mov.L	r6, r2
 184 0055 3F 6C 0F                		rtsd	#60, r6-r12
 185                             	.LFE7:
 187                             		.section	.text.ByteReverseWords64,"ax",@progbits
 189                             	_ByteReverseWords64:
 190                             	.LFB8:
 227:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 228:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 229:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords64(word64* out, const word64* in,
 230:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                       word32 byteCount)
 231:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 191                             		.loc 1 231 1
 192 0000 6E 6B                   		pushm	r6-r11
 193                             	.LCFI8:
 194 0002 71 0A EC                		add	#-20, r0, r10
 195                             	.LCFI9:
 196 0005 EF A0                   		mov.L	r10, r0
 197 0007 E7 A1 02                		mov.L	r1, 8[r10]
 198 000a E7 A2 03                		mov.L	r2, 12[r10]
 199 000d E7 A3 04                		mov.L	r3, 16[r10]
 232:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word64), i;
 200                             		.loc 1 232 12
 201 0010 ED A5 04                		mov.L	16[r10], r5
 202 0013 68 35                   		shlr	#3, r5
 203 0015 E7 A5 01                		mov.L	r5, 4[r10]
 233:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 204                             		.loc 1 234 12
 205 0018 F8 A6 00                		mov.L	#0, [r10]
 206                             		.loc 1 234 5
 207 001b 2E 30                   		bra	.L14
 208                             	.L15:
 235:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 209                             		.loc 1 235 38 discriminator 3
 210 001d EC A5                   		mov.L	[r10], r5
 211 001f 6C 35                   		shll	#3, r5
 212 0021 ED A4 03                		mov.L	12[r10], r4
 213 0024 4B 54                   		add	r5, r4
 214                             		.loc 1 235 18 discriminator 3
 215 0026 EC 45                   		mov.L	[r4], r5
 216 0028 A8 4E                   		mov.L	4[r4], r6
 217                             		.loc 1 235 12 discriminator 3
 218 002a EC A4                   		mov.L	[r10], r4
 219 002c 6C 34                   		shll	#3, r4
 220 002e ED A3 02                		mov.L	8[r10], r3
 221 0031 FF 2B 43                		add	r4, r3, r11
 222                             		.loc 1 235 18 discriminator 3
 223 0034 EF 51                   		mov.L	r5, r1
 224 0036 EF 62                   		mov.L	r6, r2
 225 0038 05 00 00 00             		bsr	_ByteReverseWord64
 226 003c EF 15                   		mov.L	r1, r5
 227 003e EF 26                   		mov.L	r2, r6
 228                             		.loc 1 235 16 discriminator 3
 229 0040 E3 B5                   		mov.L	r5, [r11]
 230 0042 E7 B6 01                		mov.L	r6, 4[r11]
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 231                             		.loc 1 234 29 discriminator 3
 232 0045 EC A5                   		mov.L	[r10], r5
 233 0047 62 15                   		add	#1, r5
 234 0049 E3 A5                   		mov.L	r5, [r10]
 235                             	.L14:
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 236                             		.loc 1 234 5 discriminator 1
 237 004b EC A4                   		mov.L	[r10], r4
 238 004d ED A5 01                		mov.L	4[r10], r5
 239 0050 47 54                   		cmp	r5, r4
 240 0052 23 CB                   		bltu	.L15
 236:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 237:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 241                             		.loc 1 237 1
 242 0054 03                      		nop
 243 0055 3F 6B 0B                		rtsd	#44, r6-r11
 244                             	.LFE8:
 246                             		.section	.text.ForceZero,"ax",@progbits
 248                             	_ForceZero:
 249                             	.LFB13:
 238:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 239:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WORD64_AVAILABLE && !WOLFSSL_NO_WORD64_OPS */
 240:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 241:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_XOR_OPS
 242:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 243:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 244:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWordsOut(wolfssl_word* r, const wolfssl_word* a,
 245:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                      const wolfssl_word* b, word32 n)
 246:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 247:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 248:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 249:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] = a[i] ^ b[i];
 250:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 251:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 252:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 253:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 254:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 255:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbufout(void*out, const void* buf, const void* mask,
 256:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                    word32 count)
 257:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 258:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)out | (wc_ptr_t)buf | (wc_ptr_t)mask | count) %
 259:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                          WOLFSSL_WORD_SIZE == 0)
 260:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWordsOut( (wolfssl_word*)out, (wolfssl_word*)buf,
 261:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                      (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 262:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 263:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 264:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       o = (byte*)out;
 265:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 266:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 267:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) o[i] = b[i] ^ m[i];
 269:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 270:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 271:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 272:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 273:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 274:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWords(wolfssl_word* r, const wolfssl_word* a, word32 n)
 275:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 276:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 277:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 278:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] ^= a[i];
 279:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 280:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 281:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 282:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 283:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 284:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
 285:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 286:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)buf | (wc_ptr_t)mask | count) % WOLFSSL_WORD_SIZE == 0)
 287:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWords( (wolfssl_word*)buf,
 288:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                   (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 289:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 290:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 291:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 292:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 293:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) b[i] ^= m[i];
 295:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 296:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 297:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 298:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 299:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_FORCE_ZERO
 300:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine fills the first len bytes of the memory area pointed by mem
 301:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    with zeros. It ensures compiler optimizations doesn't skip it  */
 302:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
 303:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 250                             		.loc 1 303 1
 251 0000 7E AA                   		push.l	r10
 252                             	.LCFI10:
 253 0002 71 0A F4                		add	#-12, r0, r10
 254                             	.LCFI11:
 255 0005 EF A0                   		mov.L	r10, r0
 256 0007 E7 A1 01                		mov.L	r1, 4[r10]
 257 000a E7 A2 02                		mov.L	r2, 8[r10]
 304:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile byte* z = (volatile byte*)mem;
 258                             		.loc 1 304 20
 259 000d ED A5 01                		mov.L	4[r10], r5
 260 0010 E3 A5                   		mov.L	r5, [r10]
 305:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 306:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if (defined(WOLFSSL_X86_64_BUILD) || defined(WOLFSSL_AARCH64_BUILD)) \
 307:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****             && defined(WORD64_AVAILABLE)
 308:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile word64* w;
 309:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_UNALIGNED_64BIT_ACCESS
 310:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 l = (sizeof(word64) - ((size_t)z & (sizeof(word64)-1))) &
 311:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                              (sizeof(word64)-1);
 312:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 313:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         if (len < l) l = len;
 314:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         len -= l;
 315:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         while (l--) *z++ = 0;
 316:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 317:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
 318:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         *w++ = 0;
 319:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     z = (volatile byte*)w;
 320:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 321:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 322:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     while (len--) *z++ = 0;
 261                             		.loc 1 322 11
 262 0012 2E 0C                   		bra	.L17
 263                             	.L18:
 264                             		.loc 1 322 21 discriminator 2
 265 0014 EC A5                   		mov.L	[r10], r5
 266 0016 71 54 01                		add	#1, r5, r4
 267 0019 E3 A4                   		mov.L	r4, [r10]
 268                             		.loc 1 322 24 discriminator 2
 269 001b F8 54 00                		mov.B	#0, [r5]
 270                             	.L17:
 271                             		.loc 1 322 15 discriminator 1
 272 001e ED A5 02                		mov.L	8[r10], r5
 273 0021 71 54 FF                		add	#-1, r5, r4
 274 0024 E7 A4 02                		mov.L	r4, 8[r10]
 275                             		.loc 1 322 11 discriminator 1
 276 0027 61 05                   		cmp	#0, r5
 277 0029 21 EB                   		bne	.L18
 323:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 278                             		.loc 1 323 1
 279 002b 03                      		nop
 280 002c 3F AA 04                		rtsd	#16, r10-r10
 281                             	.LFE13:
 283                             		.section	.text.min,"ax",@progbits
 285                             	_min:
 286                             	.LFB15:
 324:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 325:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 326:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 327:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_CONST_CMP
 328:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* check all length bytes for equality, return 0 on success */
 329:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE int ConstantCompare(const byte* a, const byte* b, int length)
 330:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 331:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     int i;
 332:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     int compareSum = 0;
 333:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 334:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < length; i++) {
 335:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         compareSum |= a[i] ^ b[i];
 336:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 337:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 338:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return compareSum;
 339:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 340:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 341:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 342:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 343:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_HAVE_MIN
 344:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WOLFSSL_HAVE_MIN
 345:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
 346:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #define min min
 347:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 348:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* returns the smaller of a and b */
 349:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 min(word32 a, word32 b)
 350:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 287                             		.loc 1 350 5
 288 0000 7E AA                   		push.l	r10
 289                             	.LCFI12:
 290 0002 71 0A F8                		add	#-8, r0, r10
 291                             	.LCFI13:
 292 0005 EF A0                   		mov.L	r10, r0
 293 0007 E3 A1                   		mov.L	r1, [r10]
 294 0009 E7 A2 01                		mov.L	r2, 4[r10]
 351:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return a > b ? b : a;
 295                             		.loc 1 351 26
 296 000c ED A5 01                		mov.L	4[r10], r5
 297 000f EC A3                   		mov.L	[r10], r3
 298 0011 EC A4                   		mov.L	[r10], r4
 299 0013 47 53                   		cmp	r5, r3
 300 0015 24 04                   		bgtu 1f
 301 0017 EF 45                   		mov r4, r5
 302                             	1:
 352:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 303                             		.loc 1 352 5
 304 0019 EF 51                   		mov.L	r5, r1
 305 001b 3F AA 03                		rtsd	#12, r10-r10
 306                             	.LFE15:
 308                             		.section	.text.InitSha512,"ax",@progbits
 310                             	_InitSha512:
 311                             	.LFB43:
 312                             		.file 2 "../src/wolfcrypt/src/sha512.c"
   1:../src/wolfcrypt/src/sha512.c **** /* sha512.c
   2:../src/wolfcrypt/src/sha512.c ****  *
   3:../src/wolfcrypt/src/sha512.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/sha512.c ****  *
   5:../src/wolfcrypt/src/sha512.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/sha512.c ****  *
   7:../src/wolfcrypt/src/sha512.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/sha512.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/sha512.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/sha512.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/sha512.c ****  *
  12:../src/wolfcrypt/src/sha512.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/sha512.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/sha512.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/sha512.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/sha512.c ****  *
  17:../src/wolfcrypt/src/sha512.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/sha512.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/sha512.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/sha512.c ****  */
  21:../src/wolfcrypt/src/sha512.c **** 
  22:../src/wolfcrypt/src/sha512.c **** 
  23:../src/wolfcrypt/src/sha512.c **** #ifdef HAVE_CONFIG_H
  24:../src/wolfcrypt/src/sha512.c ****     #include <config.h>
  25:../src/wolfcrypt/src/sha512.c **** #endif
  26:../src/wolfcrypt/src/sha512.c **** 
  27:../src/wolfcrypt/src/sha512.c **** #include <wolfssl/wolfcrypt/settings.h>
  28:../src/wolfcrypt/src/sha512.c **** 
  29:../src/wolfcrypt/src/sha512.c **** #if (defined(WOLFSSL_SHA512) || defined(WOLFSSL_SHA384)) && !defined(WOLFSSL_ARMASM) && !defined(WO
  30:../src/wolfcrypt/src/sha512.c **** 
  31:../src/wolfcrypt/src/sha512.c **** #if defined(HAVE_FIPS) && defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2)
  32:../src/wolfcrypt/src/sha512.c ****     /* set NO_WRAPPERS before headers, use direct internal f()s not wrappers */
  33:../src/wolfcrypt/src/sha512.c ****     #define FIPS_NO_WRAPPERS
  34:../src/wolfcrypt/src/sha512.c **** 
  35:../src/wolfcrypt/src/sha512.c ****     #ifdef USE_WINDOWS_API
  36:../src/wolfcrypt/src/sha512.c ****         #pragma code_seg(".fipsA$k")
  37:../src/wolfcrypt/src/sha512.c ****         #pragma const_seg(".fipsB$k")
  38:../src/wolfcrypt/src/sha512.c ****     #endif
  39:../src/wolfcrypt/src/sha512.c **** #endif
  40:../src/wolfcrypt/src/sha512.c **** 
  41:../src/wolfcrypt/src/sha512.c **** #include <wolfssl/wolfcrypt/sha512.h>
  42:../src/wolfcrypt/src/sha512.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  43:../src/wolfcrypt/src/sha512.c **** #include <wolfssl/wolfcrypt/cpuid.h>
  44:../src/wolfcrypt/src/sha512.c **** #include <wolfssl/wolfcrypt/hash.h>
  45:../src/wolfcrypt/src/sha512.c **** 
  46:../src/wolfcrypt/src/sha512.c **** #ifdef WOLF_CRYPTO_CB
  47:../src/wolfcrypt/src/sha512.c ****     #include <wolfssl/wolfcrypt/cryptocb.h>
  48:../src/wolfcrypt/src/sha512.c **** #endif
  49:../src/wolfcrypt/src/sha512.c **** 
  50:../src/wolfcrypt/src/sha512.c **** /* deprecated USE_SLOW_SHA2 (replaced with USE_SLOW_SHA512) */
  51:../src/wolfcrypt/src/sha512.c **** #if defined(USE_SLOW_SHA2) && !defined(USE_SLOW_SHA512)
  52:../src/wolfcrypt/src/sha512.c ****     #define USE_SLOW_SHA512
  53:../src/wolfcrypt/src/sha512.c **** #endif
  54:../src/wolfcrypt/src/sha512.c **** 
  55:../src/wolfcrypt/src/sha512.c **** /* fips wrapper calls, user can call direct */
  56:../src/wolfcrypt/src/sha512.c **** #if defined(HAVE_FIPS) && \
  57:../src/wolfcrypt/src/sha512.c ****     (!defined(HAVE_FIPS_VERSION) || (HAVE_FIPS_VERSION < 2))
  58:../src/wolfcrypt/src/sha512.c **** 
  59:../src/wolfcrypt/src/sha512.c ****     #ifdef WOLFSSL_SHA512
  60:../src/wolfcrypt/src/sha512.c **** 
  61:../src/wolfcrypt/src/sha512.c ****         int wc_InitSha512(wc_Sha512* sha)
  62:../src/wolfcrypt/src/sha512.c ****         {
  63:../src/wolfcrypt/src/sha512.c ****             if (sha == NULL) {
  64:../src/wolfcrypt/src/sha512.c ****                 return BAD_FUNC_ARG;
  65:../src/wolfcrypt/src/sha512.c ****             }
  66:../src/wolfcrypt/src/sha512.c **** 
  67:../src/wolfcrypt/src/sha512.c ****             return InitSha512_fips(sha);
  68:../src/wolfcrypt/src/sha512.c ****         }
  69:../src/wolfcrypt/src/sha512.c ****         int wc_InitSha512_ex(wc_Sha512* sha, void* heap, int devId)
  70:../src/wolfcrypt/src/sha512.c ****         {
  71:../src/wolfcrypt/src/sha512.c ****             (void)heap;
  72:../src/wolfcrypt/src/sha512.c ****             (void)devId;
  73:../src/wolfcrypt/src/sha512.c ****             if (sha == NULL) {
  74:../src/wolfcrypt/src/sha512.c ****                 return BAD_FUNC_ARG;
  75:../src/wolfcrypt/src/sha512.c ****             }
  76:../src/wolfcrypt/src/sha512.c ****             return InitSha512_fips(sha);
  77:../src/wolfcrypt/src/sha512.c ****         }
  78:../src/wolfcrypt/src/sha512.c ****         int wc_Sha512Update(wc_Sha512* sha, const byte* data, word32 len)
  79:../src/wolfcrypt/src/sha512.c ****         {
  80:../src/wolfcrypt/src/sha512.c ****             if (sha == NULL || (data == NULL && len > 0)) {
  81:../src/wolfcrypt/src/sha512.c ****                 return BAD_FUNC_ARG;
  82:../src/wolfcrypt/src/sha512.c ****             }
  83:../src/wolfcrypt/src/sha512.c **** 
  84:../src/wolfcrypt/src/sha512.c ****             return Sha512Update_fips(sha, data, len);
  85:../src/wolfcrypt/src/sha512.c ****         }
  86:../src/wolfcrypt/src/sha512.c ****         int wc_Sha512Final(wc_Sha512* sha, byte* out)
  87:../src/wolfcrypt/src/sha512.c ****         {
  88:../src/wolfcrypt/src/sha512.c ****             if (sha == NULL || out == NULL) {
  89:../src/wolfcrypt/src/sha512.c ****                 return BAD_FUNC_ARG;
  90:../src/wolfcrypt/src/sha512.c ****             }
  91:../src/wolfcrypt/src/sha512.c **** 
  92:../src/wolfcrypt/src/sha512.c ****             return Sha512Final_fips(sha, out);
  93:../src/wolfcrypt/src/sha512.c ****         }
  94:../src/wolfcrypt/src/sha512.c ****         void wc_Sha512Free(wc_Sha512* sha)
  95:../src/wolfcrypt/src/sha512.c ****         {
  96:../src/wolfcrypt/src/sha512.c ****             (void)sha;
  97:../src/wolfcrypt/src/sha512.c ****             /* Not supported in FIPS */
  98:../src/wolfcrypt/src/sha512.c ****         }
  99:../src/wolfcrypt/src/sha512.c ****     #endif
 100:../src/wolfcrypt/src/sha512.c **** 
 101:../src/wolfcrypt/src/sha512.c ****     #if defined(WOLFSSL_SHA384) || defined(HAVE_AESGCM)
 102:../src/wolfcrypt/src/sha512.c ****         int wc_InitSha384(wc_Sha384* sha)
 103:../src/wolfcrypt/src/sha512.c ****         {
 104:../src/wolfcrypt/src/sha512.c ****             if (sha == NULL) {
 105:../src/wolfcrypt/src/sha512.c ****                 return BAD_FUNC_ARG;
 106:../src/wolfcrypt/src/sha512.c ****             }
 107:../src/wolfcrypt/src/sha512.c ****             return InitSha384_fips(sha);
 108:../src/wolfcrypt/src/sha512.c ****         }
 109:../src/wolfcrypt/src/sha512.c ****         int wc_InitSha384_ex(wc_Sha384* sha, void* heap, int devId)
 110:../src/wolfcrypt/src/sha512.c ****         {
 111:../src/wolfcrypt/src/sha512.c ****             (void)heap;
 112:../src/wolfcrypt/src/sha512.c ****             (void)devId;
 113:../src/wolfcrypt/src/sha512.c ****             if (sha == NULL) {
 114:../src/wolfcrypt/src/sha512.c ****                 return BAD_FUNC_ARG;
 115:../src/wolfcrypt/src/sha512.c ****             }
 116:../src/wolfcrypt/src/sha512.c ****             return InitSha384_fips(sha);
 117:../src/wolfcrypt/src/sha512.c ****         }
 118:../src/wolfcrypt/src/sha512.c ****         int wc_Sha384Update(wc_Sha384* sha, const byte* data, word32 len)
 119:../src/wolfcrypt/src/sha512.c ****         {
 120:../src/wolfcrypt/src/sha512.c ****             if (sha == NULL || (data == NULL && len > 0)) {
 121:../src/wolfcrypt/src/sha512.c ****                 return BAD_FUNC_ARG;
 122:../src/wolfcrypt/src/sha512.c ****             }
 123:../src/wolfcrypt/src/sha512.c ****             return Sha384Update_fips(sha, data, len);
 124:../src/wolfcrypt/src/sha512.c ****         }
 125:../src/wolfcrypt/src/sha512.c ****         int wc_Sha384Final(wc_Sha384* sha, byte* out)
 126:../src/wolfcrypt/src/sha512.c ****         {
 127:../src/wolfcrypt/src/sha512.c ****             if (sha == NULL || out == NULL) {
 128:../src/wolfcrypt/src/sha512.c ****                 return BAD_FUNC_ARG;
 129:../src/wolfcrypt/src/sha512.c ****             }
 130:../src/wolfcrypt/src/sha512.c ****             return Sha384Final_fips(sha, out);
 131:../src/wolfcrypt/src/sha512.c ****         }
 132:../src/wolfcrypt/src/sha512.c ****         void wc_Sha384Free(wc_Sha384* sha)
 133:../src/wolfcrypt/src/sha512.c ****         {
 134:../src/wolfcrypt/src/sha512.c ****             (void)sha;
 135:../src/wolfcrypt/src/sha512.c ****             /* Not supported in FIPS */
 136:../src/wolfcrypt/src/sha512.c ****         }
 137:../src/wolfcrypt/src/sha512.c ****     #endif /* WOLFSSL_SHA384 || HAVE_AESGCM */
 138:../src/wolfcrypt/src/sha512.c **** 
 139:../src/wolfcrypt/src/sha512.c **** #else /* else build without fips, or for FIPS v2 */
 140:../src/wolfcrypt/src/sha512.c **** 
 141:../src/wolfcrypt/src/sha512.c **** #include <wolfssl/wolfcrypt/logging.h>
 142:../src/wolfcrypt/src/sha512.c **** 
 143:../src/wolfcrypt/src/sha512.c **** #ifdef NO_INLINE
 144:../src/wolfcrypt/src/sha512.c ****     #include <wolfssl/wolfcrypt/misc.h>
 145:../src/wolfcrypt/src/sha512.c **** #else
 146:../src/wolfcrypt/src/sha512.c ****     #define WOLFSSL_MISC_INCLUDED
 147:../src/wolfcrypt/src/sha512.c ****     #include <wolfcrypt/src/misc.c>
 148:../src/wolfcrypt/src/sha512.c **** #endif
 149:../src/wolfcrypt/src/sha512.c **** 
 150:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_HASH)
 151:../src/wolfcrypt/src/sha512.c ****     #include <wolfssl/wolfcrypt/port/nxp/se050_port.h>
 152:../src/wolfcrypt/src/sha512.c **** #endif
 153:../src/wolfcrypt/src/sha512.c **** 
 154:../src/wolfcrypt/src/sha512.c **** 
 155:../src/wolfcrypt/src/sha512.c **** #if defined(USE_INTEL_SPEEDUP)
 156:../src/wolfcrypt/src/sha512.c ****     #if defined(__GNUC__) && ((__GNUC__ < 4) || \
 157:../src/wolfcrypt/src/sha512.c ****                               (__GNUC__ == 4 && __GNUC_MINOR__ <= 8))
 158:../src/wolfcrypt/src/sha512.c ****         #undef  NO_AVX2_SUPPORT
 159:../src/wolfcrypt/src/sha512.c ****         #define NO_AVX2_SUPPORT
 160:../src/wolfcrypt/src/sha512.c ****     #endif
 161:../src/wolfcrypt/src/sha512.c ****     #if defined(__clang__) && ((__clang_major__ < 3) || \
 162:../src/wolfcrypt/src/sha512.c ****                                (__clang_major__ == 3 && __clang_minor__ <= 5))
 163:../src/wolfcrypt/src/sha512.c ****         #define NO_AVX2_SUPPORT
 164:../src/wolfcrypt/src/sha512.c ****     #elif defined(__clang__) && defined(NO_AVX2_SUPPORT)
 165:../src/wolfcrypt/src/sha512.c ****         #undef NO_AVX2_SUPPORT
 166:../src/wolfcrypt/src/sha512.c ****     #endif
 167:../src/wolfcrypt/src/sha512.c **** 
 168:../src/wolfcrypt/src/sha512.c ****     #define HAVE_INTEL_AVX1
 169:../src/wolfcrypt/src/sha512.c ****     #ifndef NO_AVX2_SUPPORT
 170:../src/wolfcrypt/src/sha512.c ****         #define HAVE_INTEL_AVX2
 171:../src/wolfcrypt/src/sha512.c ****     #endif
 172:../src/wolfcrypt/src/sha512.c **** #endif
 173:../src/wolfcrypt/src/sha512.c **** 
 174:../src/wolfcrypt/src/sha512.c **** #if defined(HAVE_INTEL_AVX1)
 175:../src/wolfcrypt/src/sha512.c ****     /* #define DEBUG_XMM  */
 176:../src/wolfcrypt/src/sha512.c **** #endif
 177:../src/wolfcrypt/src/sha512.c **** 
 178:../src/wolfcrypt/src/sha512.c **** #if defined(HAVE_INTEL_AVX2)
 179:../src/wolfcrypt/src/sha512.c ****     #define HAVE_INTEL_RORX
 180:../src/wolfcrypt/src/sha512.c ****     /* #define DEBUG_YMM  */
 181:../src/wolfcrypt/src/sha512.c **** #endif
 182:../src/wolfcrypt/src/sha512.c **** 
 183:../src/wolfcrypt/src/sha512.c **** #if defined(HAVE_BYTEREVERSE64) && \
 184:../src/wolfcrypt/src/sha512.c ****         !defined(HAVE_INTEL_AVX1) && !defined(HAVE_INTEL_AVX2)
 185:../src/wolfcrypt/src/sha512.c ****     #define ByteReverseWords64(out, in, size) ByteReverseWords64_1(out, size)
 186:../src/wolfcrypt/src/sha512.c ****     #define ByteReverseWords64_1(buf, size) \
 187:../src/wolfcrypt/src/sha512.c ****         { unsigned int i ;\
 188:../src/wolfcrypt/src/sha512.c ****             for(i=0; i< size/sizeof(word64); i++){\
 189:../src/wolfcrypt/src/sha512.c ****                 __asm__ volatile("bswapq %0":"+r"(buf[i])::) ;\
 190:../src/wolfcrypt/src/sha512.c ****             }\
 191:../src/wolfcrypt/src/sha512.c ****         }
 192:../src/wolfcrypt/src/sha512.c **** #endif
 193:../src/wolfcrypt/src/sha512.c **** 
 194:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_IMX6_CAAM) && !defined(NO_IMX6_CAAM_HASH) && \
 195:../src/wolfcrypt/src/sha512.c ****     !defined(WOLFSSL_QNX_CAAM)
 196:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/caam/caam_sha.c */
 197:../src/wolfcrypt/src/sha512.c **** 
 198:../src/wolfcrypt/src/sha512.c **** #elif defined(WOLFSSL_SILABS_SHA384)
 199:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/silabs/silabs_hash.c */
 200:../src/wolfcrypt/src/sha512.c **** 
 201:../src/wolfcrypt/src/sha512.c **** #elif defined(WOLFSSL_KCAPI_HASH)
 202:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/kcapi/kcapi_hash.c */
 203:../src/wolfcrypt/src/sha512.c **** 
 204:../src/wolfcrypt/src/sha512.c **** #elif defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_HASH)
 205:../src/wolfcrypt/src/sha512.c ****     int wc_InitSha512(wc_Sha512* sha512)
 206:../src/wolfcrypt/src/sha512.c ****     {
 207:../src/wolfcrypt/src/sha512.c ****         if (sha512 == NULL)
 208:../src/wolfcrypt/src/sha512.c ****             return BAD_FUNC_ARG;
 209:../src/wolfcrypt/src/sha512.c ****         return se050_hash_init(&sha512->se050Ctx, NULL);
 210:../src/wolfcrypt/src/sha512.c ****     }
 211:../src/wolfcrypt/src/sha512.c ****     int wc_InitSha512_ex(wc_Sha512* sha512, void* heap, int devId)
 212:../src/wolfcrypt/src/sha512.c ****     {
 213:../src/wolfcrypt/src/sha512.c ****         if (sha512 == NULL) {
 214:../src/wolfcrypt/src/sha512.c ****             return BAD_FUNC_ARG;
 215:../src/wolfcrypt/src/sha512.c ****         }
 216:../src/wolfcrypt/src/sha512.c ****         (void)devId;
 217:../src/wolfcrypt/src/sha512.c ****         return se050_hash_init(&sha512->se050Ctx, heap);
 218:../src/wolfcrypt/src/sha512.c ****     }
 219:../src/wolfcrypt/src/sha512.c ****     int wc_Sha512Update(wc_Sha512* sha512, const byte* data, word32 len)
 220:../src/wolfcrypt/src/sha512.c ****     {
 221:../src/wolfcrypt/src/sha512.c ****         return se050_hash_update(&sha512->se050Ctx, data, len);
 222:../src/wolfcrypt/src/sha512.c ****     }
 223:../src/wolfcrypt/src/sha512.c ****     int wc_Sha512Final(wc_Sha512* sha512, byte* hash)
 224:../src/wolfcrypt/src/sha512.c ****     {
 225:../src/wolfcrypt/src/sha512.c ****         int ret = 0;
 226:../src/wolfcrypt/src/sha512.c ****         int devId = INVALID_DEVID;
 227:../src/wolfcrypt/src/sha512.c ****         if (sha512 == NULL) {
 228:../src/wolfcrypt/src/sha512.c ****             return BAD_FUNC_ARG;
 229:../src/wolfcrypt/src/sha512.c ****         }
 230:../src/wolfcrypt/src/sha512.c ****     #ifdef WOLF_CRYPTO_CB
 231:../src/wolfcrypt/src/sha512.c ****         devId = sha512->devId;
 232:../src/wolfcrypt/src/sha512.c ****     #endif
 233:../src/wolfcrypt/src/sha512.c ****         ret = se050_hash_final(&sha512->se050Ctx, hash, WC_SHA512_DIGEST_SIZE,
 234:../src/wolfcrypt/src/sha512.c ****                                kAlgorithm_SSS_SHA512);
 235:../src/wolfcrypt/src/sha512.c ****         (void)wc_InitSha512_ex(sha512, sha512->heap, devId);
 236:../src/wolfcrypt/src/sha512.c ****         return ret;
 237:../src/wolfcrypt/src/sha512.c ****     }
 238:../src/wolfcrypt/src/sha512.c ****     int wc_Sha512FinalRaw(wc_Sha512* sha512, byte* hash)
 239:../src/wolfcrypt/src/sha512.c ****     {
 240:../src/wolfcrypt/src/sha512.c ****         int ret = 0;
 241:../src/wolfcrypt/src/sha512.c ****         int devId = INVALID_DEVID;
 242:../src/wolfcrypt/src/sha512.c ****         if (sha512 == NULL) {
 243:../src/wolfcrypt/src/sha512.c ****             return BAD_FUNC_ARG;
 244:../src/wolfcrypt/src/sha512.c ****         }
 245:../src/wolfcrypt/src/sha512.c ****     #ifdef WOLF_CRYPTO_CB
 246:../src/wolfcrypt/src/sha512.c ****         devId = sha512->devId;
 247:../src/wolfcrypt/src/sha512.c ****     #endif
 248:../src/wolfcrypt/src/sha512.c ****         ret = se050_hash_final(&sha512->se050Ctx, hash, WC_SHA512_DIGEST_SIZE,
 249:../src/wolfcrypt/src/sha512.c ****                                kAlgorithm_SSS_SHA512);
 250:../src/wolfcrypt/src/sha512.c ****         (void)wc_InitSha512_ex(sha512, sha512->heap, devId);
 251:../src/wolfcrypt/src/sha512.c ****         return ret;
 252:../src/wolfcrypt/src/sha512.c ****     }
 253:../src/wolfcrypt/src/sha512.c ****     void wc_Sha512Free(wc_Sha512* sha512)
 254:../src/wolfcrypt/src/sha512.c ****     {
 255:../src/wolfcrypt/src/sha512.c ****         (void)sha512;
 256:../src/wolfcrypt/src/sha512.c ****     }
 257:../src/wolfcrypt/src/sha512.c **** 
 258:../src/wolfcrypt/src/sha512.c **** #else
 259:../src/wolfcrypt/src/sha512.c **** 
 260:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SHA512
 261:../src/wolfcrypt/src/sha512.c **** 
 262:../src/wolfcrypt/src/sha512.c **** static int InitSha512(wc_Sha512* sha512)
 263:../src/wolfcrypt/src/sha512.c **** {
 313                             		.loc 2 263 1
 314 0000 7E AA                   		push.l	r10
 315                             	.LCFI14:
 316 0002 71 0A FC                		add	#-4, r0, r10
 317                             	.LCFI15:
 318 0005 EF A0                   		mov.L	r10, r0
 319 0007 E3 A1                   		mov.L	r1, [r10]
 264:../src/wolfcrypt/src/sha512.c ****     if (sha512 == NULL)
 320                             		.loc 2 264 8
 321 0009 EC A5                   		mov.L	[r10], r5
 322 000b 61 05                   		cmp	#0, r5
 323 000d 18                      		bne	.L22
 265:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 324                             		.loc 2 265 16
 325 000e FB 5A 53 FF             		mov.L	#-173, r5
 326 0012 38 9E 00                		bra	.L23
 327                             	.L22:
 266:../src/wolfcrypt/src/sha512.c **** 
 267:../src/wolfcrypt/src/sha512.c ****     sha512->digest[0] = W64LIT(0x6a09e667f3bcc908);
 328                             		.loc 2 267 23
 329 0015 EC A5                   		mov.L	[r10], r5
 330 0017 F8 52 08 C9 BC F3       		mov.L	#-205731576, [r5]
 331 001d F9 52 01 67 E6 09 6A    		mov.L	#0x6a09e667, 4[r5]
 268:../src/wolfcrypt/src/sha512.c ****     sha512->digest[1] = W64LIT(0xbb67ae8584caa73b);
 332                             		.loc 2 268 23
 333 0024 EC A5                   		mov.L	[r10], r5
 334 0026 F9 52 02 3B A7 CA 84    		mov.L	#-2067093701, 8[r5]
 335 002d F9 52 03 85 AE 67 BB    		mov.L	#-1150833019, 12[r5]
 269:../src/wolfcrypt/src/sha512.c ****     sha512->digest[2] = W64LIT(0x3c6ef372fe94f82b);
 336                             		.loc 2 269 23
 337 0034 EC A5                   		mov.L	[r10], r5
 338 0036 F9 52 04 2B F8 94 FE    		mov.L	#-23791573, 16[r5]
 339 003d F9 52 05 72 F3 6E 3C    		mov.L	#0x3c6ef372, 20[r5]
 270:../src/wolfcrypt/src/sha512.c ****     sha512->digest[3] = W64LIT(0xa54ff53a5f1d36f1);
 340                             		.loc 2 270 23
 341 0044 EC A5                   		mov.L	[r10], r5
 342 0046 F9 52 06 F1 36 1D 5F    		mov.L	#0x5f1d36f1, 24[r5]
 343 004d F9 52 07 3A F5 4F A5    		mov.L	#-1521486534, 28[r5]
 271:../src/wolfcrypt/src/sha512.c ****     sha512->digest[4] = W64LIT(0x510e527fade682d1);
 344                             		.loc 2 271 23
 345 0054 EC A5                   		mov.L	[r10], r5
 346 0056 F9 52 08 D1 82 E6 AD    		mov.L	#-1377402159, 32[r5]
 347 005d F9 52 09 7F 52 0E 51    		mov.L	#0x510e527f, 36[r5]
 272:../src/wolfcrypt/src/sha512.c ****     sha512->digest[5] = W64LIT(0x9b05688c2b3e6c1f);
 348                             		.loc 2 272 23
 349 0064 EC A5                   		mov.L	[r10], r5
 350 0066 F9 52 0A 1F 6C 3E 2B    		mov.L	#0x2b3e6c1f, 40[r5]
 351 006d F9 52 0B 8C 68 05 9B    		mov.L	#-1694144372, 44[r5]
 273:../src/wolfcrypt/src/sha512.c ****     sha512->digest[6] = W64LIT(0x1f83d9abfb41bd6b);
 352                             		.loc 2 273 23
 353 0074 EC A5                   		mov.L	[r10], r5
 354 0076 F9 52 0C 6B BD 41 FB    		mov.L	#-79577749, 48[r5]
 355 007d F9 52 0D AB D9 83 1F    		mov.L	#0x1f83d9ab, 52[r5]
 274:../src/wolfcrypt/src/sha512.c ****     sha512->digest[7] = W64LIT(0x5be0cd19137e2179);
 356                             		.loc 2 274 23
 357 0084 EC A5                   		mov.L	[r10], r5
 358 0086 F9 52 0E 79 21 7E 13    		mov.L	#0x137e2179, 56[r5]
 359 008d F9 52 0F 19 CD E0 5B    		mov.L	#0x5be0cd19, 60[r5]
 275:../src/wolfcrypt/src/sha512.c **** 
 276:../src/wolfcrypt/src/sha512.c ****     sha512->buffLen = 0;
 360                             		.loc 2 276 21
 361 0094 EC A5                   		mov.L	[r10], r5
 362 0096 F9 56 30 00             		mov.L	#0, 192[r5]
 277:../src/wolfcrypt/src/sha512.c ****     sha512->loLen   = 0;
 363                             		.loc 2 277 21
 364 009a EC A5                   		mov.L	[r10], r5
 365 009c F9 56 31 00             		mov.L	#0, 196[r5]
 366 00a0 F9 56 32 00             		mov.L	#0, 200[r5]
 278:../src/wolfcrypt/src/sha512.c ****     sha512->hiLen   = 0;
 367                             		.loc 2 278 21
 368 00a4 EC A5                   		mov.L	[r10], r5
 369 00a6 F9 56 33 00             		mov.L	#0, 204[r5]
 370 00aa F9 56 34 00             		mov.L	#0, 208[r5]
 279:../src/wolfcrypt/src/sha512.c **** 
 280:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 281:../src/wolfcrypt/src/sha512.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 282:../src/wolfcrypt/src/sha512.c **** 
 283:../src/wolfcrypt/src/sha512.c ****     sha512->ctx.sha_type = SHA2_512;
 284:../src/wolfcrypt/src/sha512.c ****      /* always start firstblock = 1 when using hw engine */
 285:../src/wolfcrypt/src/sha512.c ****     sha512->ctx.isfirstblock = 1;
 286:../src/wolfcrypt/src/sha512.c ****     if(sha512->ctx.mode == ESP32_SHA_HW) {
 287:../src/wolfcrypt/src/sha512.c ****         /* release hw */
 288:../src/wolfcrypt/src/sha512.c ****         esp_sha_hw_unlock();
 289:../src/wolfcrypt/src/sha512.c ****     }
 290:../src/wolfcrypt/src/sha512.c ****     /* always set mode as INIT
 291:../src/wolfcrypt/src/sha512.c ****     *  whether using HW or SW is determined at first call of update()
 292:../src/wolfcrypt/src/sha512.c ****     */
 293:../src/wolfcrypt/src/sha512.c ****     sha512->ctx.mode = ESP32_SHA_INIT;
 294:../src/wolfcrypt/src/sha512.c **** #endif
 295:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_HASH_FLAGS
 296:../src/wolfcrypt/src/sha512.c ****     sha512->flags = 0;
 297:../src/wolfcrypt/src/sha512.c **** #endif
 298:../src/wolfcrypt/src/sha512.c ****     return 0;
 371                             		.loc 2 298 12
 372 00ae 66 05                   		mov.L	#0, r5
 373                             	.L23:
 299:../src/wolfcrypt/src/sha512.c **** }
 374                             		.loc 2 299 1
 375 00b0 EF 51                   		mov.L	r5, r1
 376 00b2 3F AA 02                		rtsd	#8, r10-r10
 377                             	.LFE43:
 379                             		.section	.text.InitSha512_224,"ax",@progbits
 381                             	_InitSha512_224:
 382                             	.LFB44:
 300:../src/wolfcrypt/src/sha512.c **** 
 301:../src/wolfcrypt/src/sha512.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 302:../src/wolfcrypt/src/sha512.c **** #if !defined(WOLFSSL_NOSHA512_224)
 303:../src/wolfcrypt/src/sha512.c **** /**
 304:../src/wolfcrypt/src/sha512.c ****  * Initialize given wc_Sha512 structure with value specific to sha512/224.
 305:../src/wolfcrypt/src/sha512.c ****  * Note that sha512/224 has different initial hash value from sha512.
 306:../src/wolfcrypt/src/sha512.c ****  * The initial hash value consists of eight 64bit words. They are given
 307:../src/wolfcrypt/src/sha512.c ****  * in FIPS180-4.
 308:../src/wolfcrypt/src/sha512.c ****  */
 309:../src/wolfcrypt/src/sha512.c **** static int InitSha512_224(wc_Sha512* sha512)
 310:../src/wolfcrypt/src/sha512.c **** {
 383                             		.loc 2 310 1
 384 0000 7E AA                   		push.l	r10
 385                             	.LCFI16:
 386 0002 71 0A FC                		add	#-4, r0, r10
 387                             	.LCFI17:
 388 0005 EF A0                   		mov.L	r10, r0
 389 0007 E3 A1                   		mov.L	r1, [r10]
 311:../src/wolfcrypt/src/sha512.c ****     if (sha512 == NULL)
 390                             		.loc 2 311 8
 391 0009 EC A5                   		mov.L	[r10], r5
 392 000b 61 05                   		cmp	#0, r5
 393 000d 18                      		bne	.L25
 312:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 394                             		.loc 2 312 16
 395 000e FB 5A 53 FF             		mov.L	#-173, r5
 396 0012 38 9E 00                		bra	.L26
 397                             	.L25:
 313:../src/wolfcrypt/src/sha512.c **** 
 314:../src/wolfcrypt/src/sha512.c ****     sha512->digest[0] = W64LIT(0x8c3d37c819544da2);
 398                             		.loc 2 314 23
 399 0015 EC A5                   		mov.L	[r10], r5
 400 0017 F8 52 A2 4D 54 19       		mov.L	#0x19544da2, [r5]
 401 001d F9 52 01 C8 37 3D 8C    		mov.L	#-1942145080, 4[r5]
 315:../src/wolfcrypt/src/sha512.c ****     sha512->digest[1] = W64LIT(0x73e1996689dcd4d6);
 402                             		.loc 2 315 23
 403 0024 EC A5                   		mov.L	[r10], r5
 404 0026 F9 52 02 D6 D4 DC 89    		mov.L	#-1982016298, 8[r5]
 405 002d F9 52 03 66 99 E1 73    		mov.L	#0x73e19966, 12[r5]
 316:../src/wolfcrypt/src/sha512.c ****     sha512->digest[2] = W64LIT(0x1dfab7ae32ff9c82);
 406                             		.loc 2 316 23
 407 0034 EC A5                   		mov.L	[r10], r5
 408 0036 F9 52 04 82 9C FF 32    		mov.L	#0x32ff9c82, 16[r5]
 409 003d F9 52 05 AE B7 FA 1D    		mov.L	#0x1dfab7ae, 20[r5]
 317:../src/wolfcrypt/src/sha512.c ****     sha512->digest[3] = W64LIT(0x679dd514582f9fcf);
 410                             		.loc 2 317 23
 411 0044 EC A5                   		mov.L	[r10], r5
 412 0046 F9 52 06 CF 9F 2F 58    		mov.L	#0x582f9fcf, 24[r5]
 413 004d F9 52 07 14 D5 9D 67    		mov.L	#0x679dd514, 28[r5]
 318:../src/wolfcrypt/src/sha512.c ****     sha512->digest[4] = W64LIT(0x0f6d2b697bd44da8);
 414                             		.loc 2 318 23
 415 0054 EC A5                   		mov.L	[r10], r5
 416 0056 F9 52 08 A8 4D D4 7B    		mov.L	#0x7bd44da8, 32[r5]
 417 005d F9 52 09 69 2B 6D 0F    		mov.L	#0xf6d2b69, 36[r5]
 319:../src/wolfcrypt/src/sha512.c ****     sha512->digest[5] = W64LIT(0x77e36f7304c48942);
 418                             		.loc 2 319 23
 419 0064 EC A5                   		mov.L	[r10], r5
 420 0066 F9 52 0A 42 89 C4 04    		mov.L	#0x4c48942, 40[r5]
 421 006d F9 52 0B 73 6F E3 77    		mov.L	#0x77e36f73, 44[r5]
 320:../src/wolfcrypt/src/sha512.c ****     sha512->digest[6] = W64LIT(0x3f9d85a86a1d36c8);
 422                             		.loc 2 320 23
 423 0074 EC A5                   		mov.L	[r10], r5
 424 0076 F9 52 0C C8 36 1D 6A    		mov.L	#0x6a1d36c8, 48[r5]
 425 007d F9 52 0D A8 85 9D 3F    		mov.L	#0x3f9d85a8, 52[r5]
 321:../src/wolfcrypt/src/sha512.c ****     sha512->digest[7] = W64LIT(0x1112e6ad91d692a1);
 426                             		.loc 2 321 23
 427 0084 EC A5                   		mov.L	[r10], r5
 428 0086 F9 52 0E A1 92 D6 91    		mov.L	#-1848208735, 56[r5]
 429 008d F9 52 0F AD E6 12 11    		mov.L	#0x1112e6ad, 60[r5]
 322:../src/wolfcrypt/src/sha512.c **** 
 323:../src/wolfcrypt/src/sha512.c ****     sha512->buffLen = 0;
 430                             		.loc 2 323 21
 431 0094 EC A5                   		mov.L	[r10], r5
 432 0096 F9 56 30 00             		mov.L	#0, 192[r5]
 324:../src/wolfcrypt/src/sha512.c ****     sha512->loLen   = 0;
 433                             		.loc 2 324 21
 434 009a EC A5                   		mov.L	[r10], r5
 435 009c F9 56 31 00             		mov.L	#0, 196[r5]
 436 00a0 F9 56 32 00             		mov.L	#0, 200[r5]
 325:../src/wolfcrypt/src/sha512.c ****     sha512->hiLen   = 0;
 437                             		.loc 2 325 21
 438 00a4 EC A5                   		mov.L	[r10], r5
 439 00a6 F9 56 33 00             		mov.L	#0, 204[r5]
 440 00aa F9 56 34 00             		mov.L	#0, 208[r5]
 326:../src/wolfcrypt/src/sha512.c **** 
 327:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 328:../src/wolfcrypt/src/sha512.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 329:../src/wolfcrypt/src/sha512.c **** 
 330:../src/wolfcrypt/src/sha512.c ****     sha512->ctx.sha_type = SHA2_512;
 331:../src/wolfcrypt/src/sha512.c ****      /* always start firstblock = 1 when using hw engine */
 332:../src/wolfcrypt/src/sha512.c ****     sha512->ctx.isfirstblock = 1;
 333:../src/wolfcrypt/src/sha512.c ****     if(sha512->ctx.mode == ESP32_SHA_HW) {
 334:../src/wolfcrypt/src/sha512.c ****         /* release hw */
 335:../src/wolfcrypt/src/sha512.c ****         esp_sha_hw_unlock();
 336:../src/wolfcrypt/src/sha512.c ****     }
 337:../src/wolfcrypt/src/sha512.c ****     /* always set mode as INIT
 338:../src/wolfcrypt/src/sha512.c ****     *  whether using HW or SW is determined at first call of update()
 339:../src/wolfcrypt/src/sha512.c ****     */
 340:../src/wolfcrypt/src/sha512.c ****     sha512->ctx.mode = ESP32_SHA_INIT;
 341:../src/wolfcrypt/src/sha512.c **** #endif
 342:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_HASH_FLAGS
 343:../src/wolfcrypt/src/sha512.c ****     sha512->flags = 0;
 344:../src/wolfcrypt/src/sha512.c **** #endif
 345:../src/wolfcrypt/src/sha512.c ****     return 0;
 441                             		.loc 2 345 12
 442 00ae 66 05                   		mov.L	#0, r5
 443                             	.L26:
 346:../src/wolfcrypt/src/sha512.c **** }
 444                             		.loc 2 346 1
 445 00b0 EF 51                   		mov.L	r5, r1
 446 00b2 3F AA 02                		rtsd	#8, r10-r10
 447                             	.LFE44:
 449                             		.section	.text.InitSha512_256,"ax",@progbits
 451                             	_InitSha512_256:
 452                             	.LFB45:
 347:../src/wolfcrypt/src/sha512.c **** #endif /* !WOLFSSL_NOSHA512_224 */
 348:../src/wolfcrypt/src/sha512.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 349:../src/wolfcrypt/src/sha512.c **** 
 350:../src/wolfcrypt/src/sha512.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 351:../src/wolfcrypt/src/sha512.c **** #if !defined(WOLFSSL_NOSHA512_256)
 352:../src/wolfcrypt/src/sha512.c **** /**
 353:../src/wolfcrypt/src/sha512.c ****  * Initialize given wc_Sha512 structure with value specific to sha512/256.
 354:../src/wolfcrypt/src/sha512.c ****  * Note that sha512/256 has different initial hash value from sha512.
 355:../src/wolfcrypt/src/sha512.c ****  * The initial hash value consists of eight 64bit words. They are given
 356:../src/wolfcrypt/src/sha512.c ****  * in FIPS180-4.
 357:../src/wolfcrypt/src/sha512.c ****  */
 358:../src/wolfcrypt/src/sha512.c **** static int InitSha512_256(wc_Sha512* sha512)
 359:../src/wolfcrypt/src/sha512.c **** {
 453                             		.loc 2 359 1
 454 0000 7E AA                   		push.l	r10
 455                             	.LCFI18:
 456 0002 71 0A FC                		add	#-4, r0, r10
 457                             	.LCFI19:
 458 0005 EF A0                   		mov.L	r10, r0
 459 0007 E3 A1                   		mov.L	r1, [r10]
 360:../src/wolfcrypt/src/sha512.c ****     if (sha512 == NULL)
 460                             		.loc 2 360 8
 461 0009 EC A5                   		mov.L	[r10], r5
 462 000b 61 05                   		cmp	#0, r5
 463 000d 18                      		bne	.L28
 361:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 464                             		.loc 2 361 16
 465 000e FB 5A 53 FF             		mov.L	#-173, r5
 466 0012 38 9E 00                		bra	.L29
 467                             	.L28:
 362:../src/wolfcrypt/src/sha512.c **** 
 363:../src/wolfcrypt/src/sha512.c ****     sha512->digest[0] = W64LIT(0x22312194fc2bf72c);
 468                             		.loc 2 363 23
 469 0015 EC A5                   		mov.L	[r10], r5
 470 0017 F8 52 2C F7 2B FC       		mov.L	#-64227540, [r5]
 471 001d F9 52 01 94 21 31 22    		mov.L	#0x22312194, 4[r5]
 364:../src/wolfcrypt/src/sha512.c ****     sha512->digest[1] = W64LIT(0x9f555fa3c84c64c2);
 472                             		.loc 2 364 23
 473 0024 EC A5                   		mov.L	[r10], r5
 474 0026 F9 52 02 C2 64 4C C8    		mov.L	#-934517566, 8[r5]
 475 002d F9 52 03 A3 5F 55 9F    		mov.L	#-1621794909, 12[r5]
 365:../src/wolfcrypt/src/sha512.c ****     sha512->digest[2] = W64LIT(0x2393b86b6f53b151);
 476                             		.loc 2 365 23
 477 0034 EC A5                   		mov.L	[r10], r5
 478 0036 F9 52 04 51 B1 53 6F    		mov.L	#0x6f53b151, 16[r5]
 479 003d F9 52 05 6B B8 93 23    		mov.L	#0x2393b86b, 20[r5]
 366:../src/wolfcrypt/src/sha512.c ****     sha512->digest[3] = W64LIT(0x963877195940eabd);
 480                             		.loc 2 366 23
 481 0044 EC A5                   		mov.L	[r10], r5
 482 0046 F9 52 06 BD EA 40 59    		mov.L	#0x5940eabd, 24[r5]
 483 004d F9 52 07 19 77 38 96    		mov.L	#-1774684391, 28[r5]
 367:../src/wolfcrypt/src/sha512.c ****     sha512->digest[4] = W64LIT(0x96283ee2a88effe3);
 484                             		.loc 2 367 23
 485 0054 EC A5                   		mov.L	[r10], r5
 486 0056 F9 52 08 E3 FF 8E A8    		mov.L	#-1467023389, 32[r5]
 487 005d F9 52 09 E2 3E 28 96    		mov.L	#-1775747358, 36[r5]
 368:../src/wolfcrypt/src/sha512.c ****     sha512->digest[5] = W64LIT(0xbe5e1e2553863992);
 488                             		.loc 2 368 23
 489 0064 EC A5                   		mov.L	[r10], r5
 490 0066 F9 52 0A 92 39 86 53    		mov.L	#0x53863992, 40[r5]
 491 006d F9 52 0B 25 1E 5E BE    		mov.L	#-1101128155, 44[r5]
 369:../src/wolfcrypt/src/sha512.c ****     sha512->digest[6] = W64LIT(0x2b0199fc2c85b8aa);
 492                             		.loc 2 369 23
 493 0074 EC A5                   		mov.L	[r10], r5
 494 0076 F9 52 0C AA B8 85 2C    		mov.L	#0x2c85b8aa, 48[r5]
 495 007d F9 52 0D FC 99 01 2B    		mov.L	#0x2b0199fc, 52[r5]
 370:../src/wolfcrypt/src/sha512.c ****     sha512->digest[7] = W64LIT(0x0eb72ddc81c52ca2);
 496                             		.loc 2 370 23
 497 0084 EC A5                   		mov.L	[r10], r5
 498 0086 F9 52 0E A2 2C C5 81    		mov.L	#-2117784414, 56[r5]
 499 008d F9 52 0F DC 2D B7 0E    		mov.L	#0xeb72ddc, 60[r5]
 371:../src/wolfcrypt/src/sha512.c **** 
 372:../src/wolfcrypt/src/sha512.c ****     sha512->buffLen = 0;
 500                             		.loc 2 372 21
 501 0094 EC A5                   		mov.L	[r10], r5
 502 0096 F9 56 30 00             		mov.L	#0, 192[r5]
 373:../src/wolfcrypt/src/sha512.c ****     sha512->loLen   = 0;
 503                             		.loc 2 373 21
 504 009a EC A5                   		mov.L	[r10], r5
 505 009c F9 56 31 00             		mov.L	#0, 196[r5]
 506 00a0 F9 56 32 00             		mov.L	#0, 200[r5]
 374:../src/wolfcrypt/src/sha512.c ****     sha512->hiLen   = 0;
 507                             		.loc 2 374 21
 508 00a4 EC A5                   		mov.L	[r10], r5
 509 00a6 F9 56 33 00             		mov.L	#0, 204[r5]
 510 00aa F9 56 34 00             		mov.L	#0, 208[r5]
 375:../src/wolfcrypt/src/sha512.c **** 
 376:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 377:../src/wolfcrypt/src/sha512.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 378:../src/wolfcrypt/src/sha512.c **** 
 379:../src/wolfcrypt/src/sha512.c ****     sha512->ctx.sha_type = SHA2_512;
 380:../src/wolfcrypt/src/sha512.c ****      /* always start firstblock = 1 when using hw engine */
 381:../src/wolfcrypt/src/sha512.c ****     sha512->ctx.isfirstblock = 1;
 382:../src/wolfcrypt/src/sha512.c ****     if(sha512->ctx.mode == ESP32_SHA_HW) {
 383:../src/wolfcrypt/src/sha512.c ****         /* release hw */
 384:../src/wolfcrypt/src/sha512.c ****         esp_sha_hw_unlock();
 385:../src/wolfcrypt/src/sha512.c ****     }
 386:../src/wolfcrypt/src/sha512.c ****     /* always set mode as INIT
 387:../src/wolfcrypt/src/sha512.c ****     *  whether using HW or SW is determined at first call of update()
 388:../src/wolfcrypt/src/sha512.c ****     */
 389:../src/wolfcrypt/src/sha512.c ****     sha512->ctx.mode = ESP32_SHA_INIT;
 390:../src/wolfcrypt/src/sha512.c **** #endif
 391:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_HASH_FLAGS
 392:../src/wolfcrypt/src/sha512.c ****     sha512->flags = 0;
 393:../src/wolfcrypt/src/sha512.c **** #endif
 394:../src/wolfcrypt/src/sha512.c ****     return 0;
 511                             		.loc 2 394 12
 512 00ae 66 05                   		mov.L	#0, r5
 513                             	.L29:
 395:../src/wolfcrypt/src/sha512.c **** }
 514                             		.loc 2 395 1
 515 00b0 EF 51                   		mov.L	r5, r1
 516 00b2 3F AA 02                		rtsd	#8, r10-r10
 517                             	.LFE45:
 519                             		.section	.text.InitSha512_Family,"ax",@progbits
 521                             	_InitSha512_Family:
 522                             	.LFB46:
 396:../src/wolfcrypt/src/sha512.c **** #endif /* !WOLFSSL_NOSHA512_256 */
 397:../src/wolfcrypt/src/sha512.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 398:../src/wolfcrypt/src/sha512.c **** 
 399:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_SHA512 */
 400:../src/wolfcrypt/src/sha512.c **** 
 401:../src/wolfcrypt/src/sha512.c **** /* Hardware Acceleration */
 402:../src/wolfcrypt/src/sha512.c **** #if defined(USE_INTEL_SPEEDUP) && \
 403:../src/wolfcrypt/src/sha512.c ****     (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
 404:../src/wolfcrypt/src/sha512.c **** 
 405:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SHA512
 406:../src/wolfcrypt/src/sha512.c **** 
 407:../src/wolfcrypt/src/sha512.c ****     /*****
 408:../src/wolfcrypt/src/sha512.c ****     Intel AVX1/AVX2 Macro Control Structure
 409:../src/wolfcrypt/src/sha512.c **** 
 410:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_SPEEDUP)
 411:../src/wolfcrypt/src/sha512.c ****         #define HAVE_INTEL_AVX1
 412:../src/wolfcrypt/src/sha512.c ****         #define HAVE_INTEL_AVX2
 413:../src/wolfcrypt/src/sha512.c ****     #endif
 414:../src/wolfcrypt/src/sha512.c **** 
 415:../src/wolfcrypt/src/sha512.c ****     int InitSha512(wc_Sha512* sha512) {
 416:../src/wolfcrypt/src/sha512.c ****          Save/Recover XMM, YMM
 417:../src/wolfcrypt/src/sha512.c ****          ...
 418:../src/wolfcrypt/src/sha512.c **** 
 419:../src/wolfcrypt/src/sha512.c ****          Check Intel AVX cpuid flags
 420:../src/wolfcrypt/src/sha512.c ****     }
 421:../src/wolfcrypt/src/sha512.c **** 
 422:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_AVX1)|| defined(HAVE_INTEL_AVX2)
 423:../src/wolfcrypt/src/sha512.c ****       Transform_Sha512_AVX1(); # Function prototype
 424:../src/wolfcrypt/src/sha512.c ****       Transform_Sha512_AVX2(); #
 425:../src/wolfcrypt/src/sha512.c ****     #endif
 426:../src/wolfcrypt/src/sha512.c **** 
 427:../src/wolfcrypt/src/sha512.c ****       _Transform_Sha512() {     # Native Transform Function body
 428:../src/wolfcrypt/src/sha512.c **** 
 429:../src/wolfcrypt/src/sha512.c ****       }
 430:../src/wolfcrypt/src/sha512.c **** 
 431:../src/wolfcrypt/src/sha512.c ****       int Sha512Update() {
 432:../src/wolfcrypt/src/sha512.c ****          Save/Recover XMM, YMM
 433:../src/wolfcrypt/src/sha512.c ****          ...
 434:../src/wolfcrypt/src/sha512.c ****       }
 435:../src/wolfcrypt/src/sha512.c **** 
 436:../src/wolfcrypt/src/sha512.c ****       int Sha512Final() {
 437:../src/wolfcrypt/src/sha512.c ****          Save/Recover XMM, YMM
 438:../src/wolfcrypt/src/sha512.c ****          ...
 439:../src/wolfcrypt/src/sha512.c ****       }
 440:../src/wolfcrypt/src/sha512.c **** 
 441:../src/wolfcrypt/src/sha512.c **** 
 442:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_AVX1)
 443:../src/wolfcrypt/src/sha512.c **** 
 444:../src/wolfcrypt/src/sha512.c ****        XMM Instructions/INLINE asm Definitions
 445:../src/wolfcrypt/src/sha512.c **** 
 446:../src/wolfcrypt/src/sha512.c ****     #endif
 447:../src/wolfcrypt/src/sha512.c **** 
 448:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_AVX2)
 449:../src/wolfcrypt/src/sha512.c **** 
 450:../src/wolfcrypt/src/sha512.c ****        YMM Instructions/INLINE asm Definitions
 451:../src/wolfcrypt/src/sha512.c **** 
 452:../src/wolfcrypt/src/sha512.c ****     #endif
 453:../src/wolfcrypt/src/sha512.c **** 
 454:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_AVX1)
 455:../src/wolfcrypt/src/sha512.c **** 
 456:../src/wolfcrypt/src/sha512.c ****       int Transform_Sha512_AVX1() {
 457:../src/wolfcrypt/src/sha512.c ****           Stitched Message Sched/Round
 458:../src/wolfcrypt/src/sha512.c ****       }
 459:../src/wolfcrypt/src/sha512.c **** 
 460:../src/wolfcrypt/src/sha512.c ****     #endif
 461:../src/wolfcrypt/src/sha512.c **** 
 462:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_AVX2)
 463:../src/wolfcrypt/src/sha512.c **** 
 464:../src/wolfcrypt/src/sha512.c ****       int Transform_Sha512_AVX2() {
 465:../src/wolfcrypt/src/sha512.c ****           Stitched Message Sched/Round
 466:../src/wolfcrypt/src/sha512.c ****       }
 467:../src/wolfcrypt/src/sha512.c ****     #endif
 468:../src/wolfcrypt/src/sha512.c **** 
 469:../src/wolfcrypt/src/sha512.c ****     */
 470:../src/wolfcrypt/src/sha512.c **** 
 471:../src/wolfcrypt/src/sha512.c **** 
 472:../src/wolfcrypt/src/sha512.c ****     /* Each platform needs to query info type 1 from cpuid to see if aesni is
 473:../src/wolfcrypt/src/sha512.c ****      * supported. Also, let's setup a macro for proper linkage w/o ABI conflicts
 474:../src/wolfcrypt/src/sha512.c ****      */
 475:../src/wolfcrypt/src/sha512.c **** 
 476:../src/wolfcrypt/src/sha512.c **** #ifdef __cplusplus
 477:../src/wolfcrypt/src/sha512.c ****     extern "C" {
 478:../src/wolfcrypt/src/sha512.c **** #endif
 479:../src/wolfcrypt/src/sha512.c **** 
 480:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_AVX1)
 481:../src/wolfcrypt/src/sha512.c ****         extern int Transform_Sha512_AVX1(wc_Sha512 *sha512);
 482:../src/wolfcrypt/src/sha512.c ****         extern int Transform_Sha512_AVX1_Len(wc_Sha512 *sha512, word32 len);
 483:../src/wolfcrypt/src/sha512.c ****     #endif
 484:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_AVX2)
 485:../src/wolfcrypt/src/sha512.c ****         extern int Transform_Sha512_AVX2(wc_Sha512 *sha512);
 486:../src/wolfcrypt/src/sha512.c ****         extern int Transform_Sha512_AVX2_Len(wc_Sha512 *sha512, word32 len);
 487:../src/wolfcrypt/src/sha512.c ****         #if defined(HAVE_INTEL_RORX)
 488:../src/wolfcrypt/src/sha512.c ****             extern int Transform_Sha512_AVX1_RORX(wc_Sha512 *sha512);
 489:../src/wolfcrypt/src/sha512.c ****             extern int Transform_Sha512_AVX1_RORX_Len(wc_Sha512 *sha512,
 490:../src/wolfcrypt/src/sha512.c ****                                                       word32 len);
 491:../src/wolfcrypt/src/sha512.c ****             extern int Transform_Sha512_AVX2_RORX(wc_Sha512 *sha512);
 492:../src/wolfcrypt/src/sha512.c ****             extern int Transform_Sha512_AVX2_RORX_Len(wc_Sha512 *sha512,
 493:../src/wolfcrypt/src/sha512.c ****                                                       word32 len);
 494:../src/wolfcrypt/src/sha512.c ****         #endif
 495:../src/wolfcrypt/src/sha512.c ****     #endif
 496:../src/wolfcrypt/src/sha512.c **** 
 497:../src/wolfcrypt/src/sha512.c **** #ifdef __cplusplus
 498:../src/wolfcrypt/src/sha512.c ****     }  /* extern "C" */
 499:../src/wolfcrypt/src/sha512.c **** #endif
 500:../src/wolfcrypt/src/sha512.c **** 
 501:../src/wolfcrypt/src/sha512.c ****     static int _Transform_Sha512(wc_Sha512 *sha512);
 502:../src/wolfcrypt/src/sha512.c ****     static int (*Transform_Sha512_p)(wc_Sha512* sha512) = _Transform_Sha512;
 503:../src/wolfcrypt/src/sha512.c ****     static int (*Transform_Sha512_Len_p)(wc_Sha512* sha512, word32 len) = NULL;
 504:../src/wolfcrypt/src/sha512.c ****     static int transform_check = 0;
 505:../src/wolfcrypt/src/sha512.c ****     static int intel_flags;
 506:../src/wolfcrypt/src/sha512.c ****     static int Transform_Sha512_is_vectorized = 0;
 507:../src/wolfcrypt/src/sha512.c **** 
 508:../src/wolfcrypt/src/sha512.c ****     static WC_INLINE int Transform_Sha512(wc_Sha512 *sha512) {
 509:../src/wolfcrypt/src/sha512.c ****         int ret;
 510:../src/wolfcrypt/src/sha512.c ****         ret = (*Transform_Sha512_p)(sha512);
 511:../src/wolfcrypt/src/sha512.c ****         return ret;
 512:../src/wolfcrypt/src/sha512.c ****     }
 513:../src/wolfcrypt/src/sha512.c ****     static WC_INLINE int Transform_Sha512_Len(wc_Sha512 *sha512, word32 len) {
 514:../src/wolfcrypt/src/sha512.c ****         int ret;
 515:../src/wolfcrypt/src/sha512.c ****         ret = (*Transform_Sha512_Len_p)(sha512, len);
 516:../src/wolfcrypt/src/sha512.c ****         return ret;
 517:../src/wolfcrypt/src/sha512.c ****     }
 518:../src/wolfcrypt/src/sha512.c **** 
 519:../src/wolfcrypt/src/sha512.c ****     static void Sha512_SetTransform(void)
 520:../src/wolfcrypt/src/sha512.c ****     {
 521:../src/wolfcrypt/src/sha512.c ****         if (transform_check)
 522:../src/wolfcrypt/src/sha512.c ****             return;
 523:../src/wolfcrypt/src/sha512.c **** 
 524:../src/wolfcrypt/src/sha512.c ****         intel_flags = cpuid_get_flags();
 525:../src/wolfcrypt/src/sha512.c **** 
 526:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_AVX2)
 527:../src/wolfcrypt/src/sha512.c ****         if (IS_INTEL_AVX2(intel_flags)) {
 528:../src/wolfcrypt/src/sha512.c ****         #ifdef HAVE_INTEL_RORX
 529:../src/wolfcrypt/src/sha512.c ****             if (IS_INTEL_BMI2(intel_flags)) {
 530:../src/wolfcrypt/src/sha512.c ****                 Transform_Sha512_p = Transform_Sha512_AVX2_RORX;
 531:../src/wolfcrypt/src/sha512.c ****                 Transform_Sha512_Len_p = Transform_Sha512_AVX2_RORX_Len;
 532:../src/wolfcrypt/src/sha512.c ****                 Transform_Sha512_is_vectorized = 1;
 533:../src/wolfcrypt/src/sha512.c ****             }
 534:../src/wolfcrypt/src/sha512.c ****             else
 535:../src/wolfcrypt/src/sha512.c ****         #endif
 536:../src/wolfcrypt/src/sha512.c ****             if (1) {
 537:../src/wolfcrypt/src/sha512.c ****                 Transform_Sha512_p = Transform_Sha512_AVX2;
 538:../src/wolfcrypt/src/sha512.c ****                 Transform_Sha512_Len_p = Transform_Sha512_AVX2_Len;
 539:../src/wolfcrypt/src/sha512.c ****                 Transform_Sha512_is_vectorized = 1;
 540:../src/wolfcrypt/src/sha512.c ****             }
 541:../src/wolfcrypt/src/sha512.c ****         #ifdef HAVE_INTEL_RORX
 542:../src/wolfcrypt/src/sha512.c ****             else {
 543:../src/wolfcrypt/src/sha512.c ****                 Transform_Sha512_p = Transform_Sha512_AVX1_RORX;
 544:../src/wolfcrypt/src/sha512.c ****                 Transform_Sha512_Len_p = Transform_Sha512_AVX1_RORX_Len;
 545:../src/wolfcrypt/src/sha512.c ****                 Transform_Sha512_is_vectorized = 1;
 546:../src/wolfcrypt/src/sha512.c ****             }
 547:../src/wolfcrypt/src/sha512.c ****         #endif
 548:../src/wolfcrypt/src/sha512.c ****         }
 549:../src/wolfcrypt/src/sha512.c ****         else
 550:../src/wolfcrypt/src/sha512.c ****     #endif
 551:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_AVX1)
 552:../src/wolfcrypt/src/sha512.c ****         if (IS_INTEL_AVX1(intel_flags)) {
 553:../src/wolfcrypt/src/sha512.c ****             Transform_Sha512_p = Transform_Sha512_AVX1;
 554:../src/wolfcrypt/src/sha512.c ****             Transform_Sha512_Len_p = Transform_Sha512_AVX1_Len;
 555:../src/wolfcrypt/src/sha512.c ****             Transform_Sha512_is_vectorized = 1;
 556:../src/wolfcrypt/src/sha512.c ****         }
 557:../src/wolfcrypt/src/sha512.c ****         else
 558:../src/wolfcrypt/src/sha512.c ****     #endif
 559:../src/wolfcrypt/src/sha512.c ****         {
 560:../src/wolfcrypt/src/sha512.c ****             Transform_Sha512_p = _Transform_Sha512;
 561:../src/wolfcrypt/src/sha512.c ****             Transform_Sha512_is_vectorized = 1;
 562:../src/wolfcrypt/src/sha512.c ****         }
 563:../src/wolfcrypt/src/sha512.c **** 
 564:../src/wolfcrypt/src/sha512.c ****         transform_check = 1;
 565:../src/wolfcrypt/src/sha512.c ****     }
 566:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_SHA512 */
 567:../src/wolfcrypt/src/sha512.c **** 
 568:../src/wolfcrypt/src/sha512.c **** #else
 569:../src/wolfcrypt/src/sha512.c ****     #define Transform_Sha512(sha512) _Transform_Sha512(sha512)
 570:../src/wolfcrypt/src/sha512.c **** 
 571:../src/wolfcrypt/src/sha512.c **** #endif
 572:../src/wolfcrypt/src/sha512.c **** 
 573:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SHA512
 574:../src/wolfcrypt/src/sha512.c **** 
 575:../src/wolfcrypt/src/sha512.c **** static int InitSha512_Family(wc_Sha512* sha512, void* heap, int devId,
 576:../src/wolfcrypt/src/sha512.c ****                              int (*initfp)(wc_Sha512*))
 577:../src/wolfcrypt/src/sha512.c **** {
 523                             		.loc 2 577 1
 524 0000 7E AA                   		push.l	r10
 525                             	.LCFI20:
 526 0002 71 0A EC                		add	#-20, r0, r10
 527                             	.LCFI21:
 528 0005 EF A0                   		mov.L	r10, r0
 529 0007 E7 A1 01                		mov.L	r1, 4[r10]
 530 000a E7 A2 02                		mov.L	r2, 8[r10]
 531 000d E7 A3 03                		mov.L	r3, 12[r10]
 532 0010 E7 A4 04                		mov.L	r4, 16[r10]
 578:../src/wolfcrypt/src/sha512.c ****    int ret = 0;
 533                             		.loc 2 578 8
 534 0013 F8 A6 00                		mov.L	#0, [r10]
 579:../src/wolfcrypt/src/sha512.c **** 
 580:../src/wolfcrypt/src/sha512.c ****     if (sha512 == NULL)
 535                             		.loc 2 580 8
 536 0016 ED A5 01                		mov.L	4[r10], r5
 537 0019 61 05                   		cmp	#0, r5
 538 001b 1F                      		bne	.L31
 581:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 539                             		.loc 2 581 16
 540 001c FB 5A 53 FF             		mov.L	#-173, r5
 541 0020 2E 1F                   		bra	.L32
 542                             	.L31:
 582:../src/wolfcrypt/src/sha512.c **** 
 583:../src/wolfcrypt/src/sha512.c ****     sha512->heap = heap;
 543                             		.loc 2 583 18
 544 0022 ED A5 01                		mov.L	4[r10], r5
 545 0025 ED A4 02                		mov.L	8[r10], r4
 546 0028 E7 54 35                		mov.L	r4, 212[r5]
 584:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SMALL_STACK_CACHE
 585:../src/wolfcrypt/src/sha512.c ****     sha512->W = NULL;
 586:../src/wolfcrypt/src/sha512.c **** #endif
 587:../src/wolfcrypt/src/sha512.c **** #ifdef WOLF_CRYPTO_CB
 588:../src/wolfcrypt/src/sha512.c ****     sha512->devId = devId;
 589:../src/wolfcrypt/src/sha512.c ****     sha512->devCtx = NULL;
 590:../src/wolfcrypt/src/sha512.c **** #endif
 591:../src/wolfcrypt/src/sha512.c **** 
 592:../src/wolfcrypt/src/sha512.c ****     ret = initfp(sha512);
 547                             		.loc 2 592 11
 548 002b ED A5 04                		mov.L	16[r10], r5
 549 002e ED A1 01                		mov.L	4[r10], r1
 550 0031 7F 15                   		jsr	r5
 551                             	.LVL0:
 552 0033 E3 A1                   		mov.L	r1, [r10]
 593:../src/wolfcrypt/src/sha512.c ****     if (ret != 0)
 553                             		.loc 2 593 8
 554 0035 EC A5                   		mov.L	[r10], r5
 555 0037 61 05                   		cmp	#0, r5
 556 0039 14                      		beq	.L33
 594:../src/wolfcrypt/src/sha512.c ****         return ret;
 557                             		.loc 2 594 16
 558 003a EC A5                   		mov.L	[r10], r5
 559 003c 0B                      		bra	.L32
 560                             	.L33:
 595:../src/wolfcrypt/src/sha512.c **** 
 596:../src/wolfcrypt/src/sha512.c **** #if defined(USE_INTEL_SPEEDUP) && \
 597:../src/wolfcrypt/src/sha512.c ****     (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
 598:../src/wolfcrypt/src/sha512.c ****     Sha512_SetTransform();
 599:../src/wolfcrypt/src/sha512.c **** #endif
 600:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_HASH_KEEP
 601:../src/wolfcrypt/src/sha512.c ****     sha512->msg  = NULL;
 602:../src/wolfcrypt/src/sha512.c ****     sha512->len  = 0;
 603:../src/wolfcrypt/src/sha512.c ****     sha512->used = 0;
 604:../src/wolfcrypt/src/sha512.c **** #endif
 605:../src/wolfcrypt/src/sha512.c **** 
 606:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA512)
 607:../src/wolfcrypt/src/sha512.c ****     ret = wolfAsync_DevCtxInit(&sha512->asyncDev,
 608:../src/wolfcrypt/src/sha512.c ****                         WOLFSSL_ASYNC_MARKER_SHA512, sha512->heap, devId);
 609:../src/wolfcrypt/src/sha512.c **** #else
 610:../src/wolfcrypt/src/sha512.c ****     (void)devId;
 611:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
 612:../src/wolfcrypt/src/sha512.c **** 
 613:../src/wolfcrypt/src/sha512.c ****     return ret;
 561                             		.loc 2 613 12
 562 003d EC A5                   		mov.L	[r10], r5
 563                             	.L32:
 614:../src/wolfcrypt/src/sha512.c **** }
 564                             		.loc 2 614 1
 565 003f EF 51                   		mov.L	r5, r1
 566 0041 3F AA 06                		rtsd	#24, r10-r10
 567                             	.LFE46:
 569                             		.section	.text.wc_InitSha512_ex,"ax",@progbits
 570                             		.global	_wc_InitSha512_ex
 572                             	_wc_InitSha512_ex:
 573                             	.LFB47:
 615:../src/wolfcrypt/src/sha512.c **** 
 616:../src/wolfcrypt/src/sha512.c **** int wc_InitSha512_ex(wc_Sha512* sha512, void* heap, int devId)
 617:../src/wolfcrypt/src/sha512.c **** {
 574                             		.loc 2 617 1
 575 0000 7E AA                   		push.l	r10
 576                             	.LCFI22:
 577 0002 71 0A F4                		add	#-12, r0, r10
 578                             	.LCFI23:
 579 0005 EF A0                   		mov.L	r10, r0
 580 0007 E3 A1                   		mov.L	r1, [r10]
 581 0009 E7 A2 01                		mov.L	r2, 4[r10]
 582 000c E7 A3 02                		mov.L	r3, 8[r10]
 618:../src/wolfcrypt/src/sha512.c ****     return InitSha512_Family(sha512, heap, devId, InitSha512);
 583                             		.loc 2 618 12
 584 000f FB 42 00 00 00 00       		mov.L	#_InitSha512, r4
 585 0015 ED A3 02                		mov.L	8[r10], r3
 586 0018 ED A2 01                		mov.L	4[r10], r2
 587 001b EC A1                   		mov.L	[r10], r1
 588 001d 05 00 00 00             		bsr	_InitSha512_Family
 589 0021 EF 15                   		mov.L	r1, r5
 619:../src/wolfcrypt/src/sha512.c **** }
 590                             		.loc 2 619 1
 591 0023 EF 51                   		mov.L	r5, r1
 592 0025 3F AA 04                		rtsd	#16, r10-r10
 593                             	.LFE47:
 595                             		.section	.text.wc_InitSha512_224_ex,"ax",@progbits
 596                             		.global	_wc_InitSha512_224_ex
 598                             	_wc_InitSha512_224_ex:
 599                             	.LFB48:
 620:../src/wolfcrypt/src/sha512.c **** 
 621:../src/wolfcrypt/src/sha512.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 622:../src/wolfcrypt/src/sha512.c **** #if !defined(WOLFSSL_NOSHA512_224)
 623:../src/wolfcrypt/src/sha512.c **** int wc_InitSha512_224_ex(wc_Sha512* sha512, void* heap, int devId)
 624:../src/wolfcrypt/src/sha512.c **** {
 600                             		.loc 2 624 1
 601 0000 7E AA                   		push.l	r10
 602                             	.LCFI24:
 603 0002 71 0A F4                		add	#-12, r0, r10
 604                             	.LCFI25:
 605 0005 EF A0                   		mov.L	r10, r0
 606 0007 E3 A1                   		mov.L	r1, [r10]
 607 0009 E7 A2 01                		mov.L	r2, 4[r10]
 608 000c E7 A3 02                		mov.L	r3, 8[r10]
 625:../src/wolfcrypt/src/sha512.c ****     return InitSha512_Family(sha512, heap, devId, InitSha512_224);
 609                             		.loc 2 625 12
 610 000f FB 42 00 00 00 00       		mov.L	#_InitSha512_224, r4
 611 0015 ED A3 02                		mov.L	8[r10], r3
 612 0018 ED A2 01                		mov.L	4[r10], r2
 613 001b EC A1                   		mov.L	[r10], r1
 614 001d 05 00 00 00             		bsr	_InitSha512_Family
 615 0021 EF 15                   		mov.L	r1, r5
 626:../src/wolfcrypt/src/sha512.c **** }
 616                             		.loc 2 626 1
 617 0023 EF 51                   		mov.L	r5, r1
 618 0025 3F AA 04                		rtsd	#16, r10-r10
 619                             	.LFE48:
 621                             		.section	.text.wc_InitSha512_256_ex,"ax",@progbits
 622                             		.global	_wc_InitSha512_256_ex
 624                             	_wc_InitSha512_256_ex:
 625                             	.LFB49:
 627:../src/wolfcrypt/src/sha512.c **** #endif /* !WOLFSSL_NOSHA512_224 */
 628:../src/wolfcrypt/src/sha512.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 629:../src/wolfcrypt/src/sha512.c **** 
 630:../src/wolfcrypt/src/sha512.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
 631:../src/wolfcrypt/src/sha512.c **** #if !defined(WOLFSSL_NOSHA512_256)
 632:../src/wolfcrypt/src/sha512.c **** int wc_InitSha512_256_ex(wc_Sha512* sha512, void* heap, int devId)
 633:../src/wolfcrypt/src/sha512.c **** {
 626                             		.loc 2 633 1
 627 0000 7E AA                   		push.l	r10
 628                             	.LCFI26:
 629 0002 71 0A F4                		add	#-12, r0, r10
 630                             	.LCFI27:
 631 0005 EF A0                   		mov.L	r10, r0
 632 0007 E3 A1                   		mov.L	r1, [r10]
 633 0009 E7 A2 01                		mov.L	r2, 4[r10]
 634 000c E7 A3 02                		mov.L	r3, 8[r10]
 634:../src/wolfcrypt/src/sha512.c ****     return InitSha512_Family(sha512, heap, devId, InitSha512_256);
 635                             		.loc 2 634 12
 636 000f FB 42 00 00 00 00       		mov.L	#_InitSha512_256, r4
 637 0015 ED A3 02                		mov.L	8[r10], r3
 638 0018 ED A2 01                		mov.L	4[r10], r2
 639 001b EC A1                   		mov.L	[r10], r1
 640 001d 05 00 00 00             		bsr	_InitSha512_Family
 641 0021 EF 15                   		mov.L	r1, r5
 635:../src/wolfcrypt/src/sha512.c **** }
 642                             		.loc 2 635 1
 643 0023 EF 51                   		mov.L	r5, r1
 644 0025 3F AA 04                		rtsd	#16, r10-r10
 645                             	.LFE49:
 647                             		.section	.rodata.K512,"a"
 648                             		.balign 4
 651                             	_K512:
 652 0000 22 AE 28 D7             		.long	-685199838
 653 0004 98 2F 8A 42             		.long	0x428a2f98
 654 0008 CD 65 EF 23             		.long	0x23ef65cd
 655 000c 91 44 37 71             		.long	0x71374491
 656 0010 2F 3B 4D EC             		.long	-330482897
 657 0014 CF FB C0 B5             		.long	-1245643825
 658 0018 BC DB 89 81             		.long	-2121671748
 659 001c A5 DB B5 E9             		.long	-373957723
 660 0020 38 B5 48 F3             		.long	-213338824
 661 0024 5B C2 56 39             		.long	0x3956c25b
 662 0028 19 D0 05 B6             		.long	-1241133031
 663 002c F1 11 F1 59             		.long	0x59f111f1
 664 0030 9B 4F 19 AF             		.long	-1357295717
 665 0034 A4 82 3F 92             		.long	-1841331548
 666 0038 18 81 6D DA             		.long	-630357736
 667 003c D5 5E 1C AB             		.long	-1424204075
 668 0040 42 02 03 A3             		.long	-1560083902
 669 0044 98 AA 07 D8             		.long	-670586216
 670 0048 BE 6F 70 45             		.long	0x45706fbe
 671 004c 01 5B 83 12             		.long	0x12835b01
 672 0050 8C B2 E4 4E             		.long	0x4ee4b28c
 673 0054 BE 85 31 24             		.long	0x243185be
 674 0058 E2 B4 FF D5             		.long	-704662302
 675 005c C3 7D 0C 55             		.long	0x550c7dc3
 676 0060 6F 89 7B F2             		.long	-226784913
 677 0064 74 5D BE 72             		.long	0x72be5d74
 678 0068 B1 96 16 3B             		.long	0x3b1696b1
 679 006c FE B1 DE 80             		.long	-2132889090
 680 0070 35 12 C7 25             		.long	0x25c71235
 681 0074 A7 06 DC 9B             		.long	-1680079193
 682 0078 94 26 69 CF             		.long	-815192428
 683 007c 74 F1 9B C1             		.long	-1046744716
 684 0080 D2 4A F1 9E             		.long	-1628353838
 685 0084 C1 69 9B E4             		.long	-459576895
 686 0088 E3 25 4F 38             		.long	0x384f25e3
 687 008c 86 47 BE EF             		.long	-272742522
 688 0090 B5 D5 8C 8B             		.long	-1953704523
 689 0094 C6 9D C1 0F             		.long	0xfc19dc6
 690 0098 65 9C AC 77             		.long	0x77ac9c65
 691 009c CC A1 0C 24             		.long	0x240ca1cc
 692 00a0 75 02 2B 59             		.long	0x592b0275
 693 00a4 6F 2C E9 2D             		.long	0x2de92c6f
 694 00a8 83 E4 A6 6E             		.long	0x6ea6e483
 695 00ac AA 84 74 4A             		.long	0x4a7484aa
 696 00b0 D4 FB 41 BD             		.long	-1119749164
 697 00b4 DC A9 B0 5C             		.long	0x5cb0a9dc
 698 00b8 B5 53 11 83             		.long	-2096016459
 699 00bc DA 88 F9 76             		.long	0x76f988da
 700 00c0 AB DF 66 EE             		.long	-295247957
 701 00c4 52 51 3E 98             		.long	-1740746414
 702 00c8 10 32 B4 2D             		.long	0x2db43210
 703 00cc 6D C6 31 A8             		.long	-1473132947
 704 00d0 3F 21 FB 98             		.long	-1728372417
 705 00d4 C8 27 03 B0             		.long	-1341970488
 706 00d8 E4 0E EF BE             		.long	-1091629340
 707 00dc C7 7F 59 BF             		.long	-1084653625
 708 00e0 C2 8F A8 3D             		.long	0x3da88fc2
 709 00e4 F3 0B E0 C6             		.long	-958395405
 710 00e8 25 A7 0A 93             		.long	-1828018395
 711 00ec 47 91 A7 D5             		.long	-710438585
 712 00f0 6F 82 03 E0             		.long	-536640913
 713 00f4 51 63 CA 06             		.long	0x6ca6351
 714 00f8 70 6E 0E 0A             		.long	0xa0e6e70
 715 00fc 67 29 29 14             		.long	0x14292967
 716 0100 FC 2F D2 46             		.long	0x46d22ffc
 717 0104 85 0A B7 27             		.long	0x27b70a85
 718 0108 26 C9 26 5C             		.long	0x5c26c926
 719 010c 38 21 1B 2E             		.long	0x2e1b2138
 720 0110 ED 2A C4 5A             		.long	0x5ac42aed
 721 0114 FC 6D 2C 4D             		.long	0x4d2c6dfc
 722 0118 DF B3 95 9D             		.long	-1651133473
 723 011c 13 0D 38 53             		.long	0x53380d13
 724 0120 DE 63 AF 8B             		.long	-1951439906
 725 0124 54 73 0A 65             		.long	0x650a7354
 726 0128 A8 B2 77 3C             		.long	0x3c77b2a8
 727 012c BB 0A 6A 76             		.long	0x766a0abb
 728 0130 E6 AE ED 47             		.long	0x47edaee6
 729 0134 2E C9 C2 81             		.long	-2117940946
 730 0138 3B 35 82 14             		.long	0x1482353b
 731 013c 85 2C 72 92             		.long	-1838011259
 732 0140 64 03 F1 4C             		.long	0x4cf10364
 733 0144 A1 E8 BF A2             		.long	-1564481375
 734 0148 01 30 42 BC             		.long	-1136513023
 735 014c 4B 66 1A A8             		.long	-1474664885
 736 0150 91 97 F8 D0             		.long	-789014639
 737 0154 70 8B 4B C2             		.long	-1035236496
 738 0158 30 BE 54 06             		.long	0x654be30
 739 015c A3 51 6C C7             		.long	-949202525
 740 0160 18 52 EF D6             		.long	-688958952
 741 0164 19 E8 92 D1             		.long	-778901479
 742 0168 10 A9 65 55             		.long	0x5565a910
 743 016c 24 06 99 D6             		.long	-694614492
 744 0170 2A 20 71 57             		.long	0x5771202a
 745 0174 85 35 0E F4             		.long	-200395387
 746 0178 B8 D1 BB 32             		.long	0x32bbd1b8
 747 017c 70 A0 6A 10             		.long	0x106aa070
 748 0180 C8 D0 D2 B8             		.long	-1194143544
 749 0184 16 C1 A4 19             		.long	0x19a4c116
 750 0188 53 AB 41 51             		.long	0x5141ab53
 751 018c 08 6C 37 1E             		.long	0x1e376c08
 752 0190 99 EB 8E DF             		.long	-544281703
 753 0194 4C 77 48 27             		.long	0x2748774c
 754 0198 A8 48 9B E1             		.long	-509917016
 755 019c B5 BC B0 34             		.long	0x34b0bcb5
 756 01a0 63 5A C9 C5             		.long	-976659869
 757 01a4 B3 0C 1C 39             		.long	0x391c0cb3
 758 01a8 CB 8A 41 E3             		.long	-482243893
 759 01ac 4A AA D8 4E             		.long	0x4ed8aa4a
 760 01b0 73 E3 63 77             		.long	0x7763e373
 761 01b4 4F CA 9C 5B             		.long	0x5b9cca4f
 762 01b8 A3 B8 B2 D6             		.long	-692930397
 763 01bc F3 6F 2E 68             		.long	0x682e6ff3
 764 01c0 FC B2 EF 5D             		.long	0x5defb2fc
 765 01c4 EE 82 8F 74             		.long	0x748f82ee
 766 01c8 60 2F 17 43             		.long	0x43172f60
 767 01cc 6F 63 A5 78             		.long	0x78a5636f
 768 01d0 72 AB F0 A1             		.long	-1578062990
 769 01d4 14 78 C8 84             		.long	-2067236844
 770 01d8 EC 39 64 1A             		.long	0x1a6439ec
 771 01dc 08 02 C7 8C             		.long	-1933114872
 772 01e0 28 1E 63 23             		.long	0x23631e28
 773 01e4 FA FF BE 90             		.long	-1866530822
 774 01e8 E9 BD 82 DE             		.long	-561857047
 775 01ec EB 6C 50 A4             		.long	-1538233109
 776 01f0 15 79 C6 B2             		.long	-1295615723
 777 01f4 F7 A3 F9 BE             		.long	-1090935817
 778 01f8 2B 53 72 E3             		.long	-479046869
 779 01fc F2 78 71 C6             		.long	-965641998
 780 0200 9C 61 26 EA             		.long	-366583396
 781 0204 CE 3E 27 CA             		.long	-903397682
 782 0208 07 C2 C0 21             		.long	0x21c0c207
 783 020c C7 B8 86 D1             		.long	-779700025
 784 0210 1E EB E0 CD             		.long	-840897762
 785 0214 D6 7D DA EA             		.long	-354779690
 786 0218 78 D1 6E EE             		.long	-294727304
 787 021c 7F 4F 7D F5             		.long	-176337025
 788 0220 BA 6F 17 72             		.long	0x72176fba
 789 0224 AA 67 F0 06             		.long	0x6f067aa
 790 0228 A6 98 C8 A2             		.long	-1563912026
 791 022c C5 7D 63 0A             		.long	0xa637dc5
 792 0230 AE 0D F9 BE             		.long	-1090974290
 793 0234 04 98 3F 11             		.long	0x113f9804
 794 0238 1B 47 1C 13             		.long	0x131c471b
 795 023c 35 0B 71 1B             		.long	0x1b710b35
 796 0240 84 7D 04 23             		.long	0x23047d84
 797 0244 F5 77 DB 28             		.long	0x28db77f5
 798 0248 93 24 C7 40             		.long	0x40c72493
 799 024c 7B AB CA 32             		.long	0x32caab7b
 800 0250 BC BE C9 15             		.long	0x15c9bebc
 801 0254 0A BE 9E 3C             		.long	0x3c9ebe0a
 802 0258 4C 0D 10 9C             		.long	-1676669620
 803 025c C4 67 1D 43             		.long	0x431d67c4
 804 0260 B6 42 3E CB             		.long	-885112138
 805 0264 BE D4 C5 4C             		.long	0x4cc5d4be
 806 0268 2A 7E 65 FC             		.long	-60457430
 807 026c 9C 29 7F 59             		.long	0x597f299c
 808 0270 EC FA D6 3A             		.long	0x3ad6faec
 809 0274 AB 6F CB 5F             		.long	0x5fcb6fab
 810 0278 17 58 47 4A             		.long	0x4a475817
 811 027c 8C 19 44 6C             		.long	0x6c44198c
 812                             		.section	.text._Transform_Sha512,"ax",@progbits
 814                             	__Transform_Sha512:
 815                             	.LFB50:
 636:../src/wolfcrypt/src/sha512.c **** #endif /* !WOLFSSL_NOSHA512_256 */
 637:../src/wolfcrypt/src/sha512.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
 638:../src/wolfcrypt/src/sha512.c **** 
 639:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_SHA512 */
 640:../src/wolfcrypt/src/sha512.c **** 
 641:../src/wolfcrypt/src/sha512.c **** 
 642:../src/wolfcrypt/src/sha512.c **** static const word64 K512[80] = {
 643:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x428a2f98d728ae22), W64LIT(0x7137449123ef65cd),
 644:../src/wolfcrypt/src/sha512.c ****     W64LIT(0xb5c0fbcfec4d3b2f), W64LIT(0xe9b5dba58189dbbc),
 645:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x3956c25bf348b538), W64LIT(0x59f111f1b605d019),
 646:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x923f82a4af194f9b), W64LIT(0xab1c5ed5da6d8118),
 647:../src/wolfcrypt/src/sha512.c ****     W64LIT(0xd807aa98a3030242), W64LIT(0x12835b0145706fbe),
 648:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x243185be4ee4b28c), W64LIT(0x550c7dc3d5ffb4e2),
 649:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x72be5d74f27b896f), W64LIT(0x80deb1fe3b1696b1),
 650:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x9bdc06a725c71235), W64LIT(0xc19bf174cf692694),
 651:../src/wolfcrypt/src/sha512.c ****     W64LIT(0xe49b69c19ef14ad2), W64LIT(0xefbe4786384f25e3),
 652:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x0fc19dc68b8cd5b5), W64LIT(0x240ca1cc77ac9c65),
 653:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x2de92c6f592b0275), W64LIT(0x4a7484aa6ea6e483),
 654:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x5cb0a9dcbd41fbd4), W64LIT(0x76f988da831153b5),
 655:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x983e5152ee66dfab), W64LIT(0xa831c66d2db43210),
 656:../src/wolfcrypt/src/sha512.c ****     W64LIT(0xb00327c898fb213f), W64LIT(0xbf597fc7beef0ee4),
 657:../src/wolfcrypt/src/sha512.c ****     W64LIT(0xc6e00bf33da88fc2), W64LIT(0xd5a79147930aa725),
 658:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x06ca6351e003826f), W64LIT(0x142929670a0e6e70),
 659:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x27b70a8546d22ffc), W64LIT(0x2e1b21385c26c926),
 660:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x4d2c6dfc5ac42aed), W64LIT(0x53380d139d95b3df),
 661:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x650a73548baf63de), W64LIT(0x766a0abb3c77b2a8),
 662:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x81c2c92e47edaee6), W64LIT(0x92722c851482353b),
 663:../src/wolfcrypt/src/sha512.c ****     W64LIT(0xa2bfe8a14cf10364), W64LIT(0xa81a664bbc423001),
 664:../src/wolfcrypt/src/sha512.c ****     W64LIT(0xc24b8b70d0f89791), W64LIT(0xc76c51a30654be30),
 665:../src/wolfcrypt/src/sha512.c ****     W64LIT(0xd192e819d6ef5218), W64LIT(0xd69906245565a910),
 666:../src/wolfcrypt/src/sha512.c ****     W64LIT(0xf40e35855771202a), W64LIT(0x106aa07032bbd1b8),
 667:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x19a4c116b8d2d0c8), W64LIT(0x1e376c085141ab53),
 668:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x2748774cdf8eeb99), W64LIT(0x34b0bcb5e19b48a8),
 669:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x391c0cb3c5c95a63), W64LIT(0x4ed8aa4ae3418acb),
 670:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x5b9cca4f7763e373), W64LIT(0x682e6ff3d6b2b8a3),
 671:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x748f82ee5defb2fc), W64LIT(0x78a5636f43172f60),
 672:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x84c87814a1f0ab72), W64LIT(0x8cc702081a6439ec),
 673:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x90befffa23631e28), W64LIT(0xa4506cebde82bde9),
 674:../src/wolfcrypt/src/sha512.c ****     W64LIT(0xbef9a3f7b2c67915), W64LIT(0xc67178f2e372532b),
 675:../src/wolfcrypt/src/sha512.c ****     W64LIT(0xca273eceea26619c), W64LIT(0xd186b8c721c0c207),
 676:../src/wolfcrypt/src/sha512.c ****     W64LIT(0xeada7dd6cde0eb1e), W64LIT(0xf57d4f7fee6ed178),
 677:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x06f067aa72176fba), W64LIT(0x0a637dc5a2c898a6),
 678:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x113f9804bef90dae), W64LIT(0x1b710b35131c471b),
 679:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x28db77f523047d84), W64LIT(0x32caab7b40c72493),
 680:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x3c9ebe0a15c9bebc), W64LIT(0x431d67c49c100d4c),
 681:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x4cc5d4becb3e42b6), W64LIT(0x597f299cfc657e2a),
 682:../src/wolfcrypt/src/sha512.c ****     W64LIT(0x5fcb6fab3ad6faec), W64LIT(0x6c44198c4a475817)
 683:../src/wolfcrypt/src/sha512.c **** };
 684:../src/wolfcrypt/src/sha512.c **** 
 685:../src/wolfcrypt/src/sha512.c **** #define blk0(i) (W[i] = sha512->buffer[i])
 686:../src/wolfcrypt/src/sha512.c **** 
 687:../src/wolfcrypt/src/sha512.c **** #define blk2(i) (\
 688:../src/wolfcrypt/src/sha512.c ****                W[ (i)     & 15] += \
 689:../src/wolfcrypt/src/sha512.c ****             s1(W[((i)-2)  & 15])+ \
 690:../src/wolfcrypt/src/sha512.c ****                W[((i)-7)  & 15] + \
 691:../src/wolfcrypt/src/sha512.c ****             s0(W[((i)-15) & 15])  \
 692:../src/wolfcrypt/src/sha512.c ****         )
 693:../src/wolfcrypt/src/sha512.c **** 
 694:../src/wolfcrypt/src/sha512.c **** #define Ch(x,y,z)  ((z) ^ ((x) & ((y) ^ (z))))
 695:../src/wolfcrypt/src/sha512.c **** #define Maj(x,y,z) (((x) & (y)) | ((z) & ((x) | (y))))
 696:../src/wolfcrypt/src/sha512.c **** 
 697:../src/wolfcrypt/src/sha512.c **** #define a(i) T[(0-(i)) & 7]
 698:../src/wolfcrypt/src/sha512.c **** #define b(i) T[(1-(i)) & 7]
 699:../src/wolfcrypt/src/sha512.c **** #define c(i) T[(2-(i)) & 7]
 700:../src/wolfcrypt/src/sha512.c **** #define d(i) T[(3-(i)) & 7]
 701:../src/wolfcrypt/src/sha512.c **** #define e(i) T[(4-(i)) & 7]
 702:../src/wolfcrypt/src/sha512.c **** #define f(i) T[(5-(i)) & 7]
 703:../src/wolfcrypt/src/sha512.c **** #define g(i) T[(6-(i)) & 7]
 704:../src/wolfcrypt/src/sha512.c **** #define h(i) T[(7-(i)) & 7]
 705:../src/wolfcrypt/src/sha512.c **** 
 706:../src/wolfcrypt/src/sha512.c **** #define S0(x) (rotrFixed64(x,28) ^ rotrFixed64(x,34) ^ rotrFixed64(x,39))
 707:../src/wolfcrypt/src/sha512.c **** #define S1(x) (rotrFixed64(x,14) ^ rotrFixed64(x,18) ^ rotrFixed64(x,41))
 708:../src/wolfcrypt/src/sha512.c **** #define s0(x) (rotrFixed64(x,1)  ^ rotrFixed64(x,8)  ^ ((x)>>7))
 709:../src/wolfcrypt/src/sha512.c **** #define s1(x) (rotrFixed64(x,19) ^ rotrFixed64(x,61) ^ ((x)>>6))
 710:../src/wolfcrypt/src/sha512.c **** 
 711:../src/wolfcrypt/src/sha512.c **** #define R(i) \
 712:../src/wolfcrypt/src/sha512.c ****     h(i) += S1(e(i)) + Ch(e(i),f(i),g(i)) + K[(i)+j] + (j ? blk2(i) : blk0(i)); \
 713:../src/wolfcrypt/src/sha512.c ****     d(i) += h(i); \
 714:../src/wolfcrypt/src/sha512.c ****     h(i) += S0(a(i)) + Maj(a(i),b(i),c(i))
 715:../src/wolfcrypt/src/sha512.c **** 
 716:../src/wolfcrypt/src/sha512.c **** static int _Transform_Sha512(wc_Sha512* sha512)
 717:../src/wolfcrypt/src/sha512.c **** {
 816                             		.loc 2 717 1
 817 0000 6E 6D                   		pushm	r6-r13
 818                             	.LCFI28:
 819 0002 72 0A EC F1             		add	#-3604, r0, r10
 820                             	.LCFI29:
 821 0006 EF A0                   		mov.L	r10, r0
 822 0008 E7 A1 14                		mov.L	r1, 80[r10]
 718:../src/wolfcrypt/src/sha512.c ****     const word64* K = K512;
 823                             		.loc 2 718 19
 824 000b F9 A2 01 00 00 00 00    		mov.L	#_K512, 4[r10]
 719:../src/wolfcrypt/src/sha512.c ****     word32 j;
 720:../src/wolfcrypt/src/sha512.c ****     word64 T[8];
 721:../src/wolfcrypt/src/sha512.c **** 
 722:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SMALL_STACK_CACHE
 723:../src/wolfcrypt/src/sha512.c ****     word64* W = sha512->W;
 724:../src/wolfcrypt/src/sha512.c ****     if (W == NULL) {
 725:../src/wolfcrypt/src/sha512.c ****         W = (word64*)XMALLOC(sizeof(word64) * 16, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
 726:../src/wolfcrypt/src/sha512.c ****         if (W == NULL)
 727:../src/wolfcrypt/src/sha512.c ****             return MEMORY_E;
 728:../src/wolfcrypt/src/sha512.c ****         sha512->W = W;
 729:../src/wolfcrypt/src/sha512.c ****     }
 730:../src/wolfcrypt/src/sha512.c **** #elif defined(WOLFSSL_SMALL_STACK)
 731:../src/wolfcrypt/src/sha512.c ****     word64* W;
 732:../src/wolfcrypt/src/sha512.c ****     W = (word64*) XMALLOC(sizeof(word64) * 16, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
 825                             		.loc 2 732 19
 826 0012 75 41 80                		mov.L	#0x80, r1
 827 0015 05 00 00 00             		bsr	_wolfSSL_Malloc
 828 0019 E7 A1 02                		mov.L	r1, 8[r10]
 733:../src/wolfcrypt/src/sha512.c ****     if (W == NULL)
 829                             		.loc 2 733 8
 830 001c ED A5 02                		mov.L	8[r10], r5
 831 001f 61 05                   		cmp	#0, r5
 832 0021 1F                      		bne	.L41
 734:../src/wolfcrypt/src/sha512.c ****         return MEMORY_E;
 833                             		.loc 2 734 16
 834 0022 FB 56 83                		mov.L	#-125, r5
 835 0025 38 0C 42                		bra	.L78
 836                             	.L41:
 735:../src/wolfcrypt/src/sha512.c **** #else
 736:../src/wolfcrypt/src/sha512.c ****     word64 W[16];
 737:../src/wolfcrypt/src/sha512.c **** #endif
 738:../src/wolfcrypt/src/sha512.c **** 
 739:../src/wolfcrypt/src/sha512.c ****     /* Copy digest to working vars */
 740:../src/wolfcrypt/src/sha512.c ****     XMEMCPY(T, sha512->digest, sizeof(T));
 837                             		.loc 2 740 5
 838 0028 ED A4 14                		mov.L	80[r10], r4
 839 002b 71 A5 10                		add	#16, r10, r5
 840 002e 75 43 40                		mov.L	#0x40, r3
 841 0031 EF 42                   		mov.L	r4, r2
 842 0033 EF 51                   		mov.L	r5, r1
 843 0035 05 00 00 00             		bsr	_memcpy
 741:../src/wolfcrypt/src/sha512.c **** 
 742:../src/wolfcrypt/src/sha512.c **** #ifdef USE_SLOW_SHA512
 743:../src/wolfcrypt/src/sha512.c ****     /* over twice as small, but 50% slower */
 744:../src/wolfcrypt/src/sha512.c ****     /* 80 operations, not unrolled */
 745:../src/wolfcrypt/src/sha512.c ****     for (j = 0; j < 80; j += 16) {
 746:../src/wolfcrypt/src/sha512.c ****         int m;
 747:../src/wolfcrypt/src/sha512.c ****         for (m = 0; m < 16; m++) { /* braces needed here for macros {} */
 748:../src/wolfcrypt/src/sha512.c ****             R(m);
 749:../src/wolfcrypt/src/sha512.c ****         }
 750:../src/wolfcrypt/src/sha512.c ****     }
 751:../src/wolfcrypt/src/sha512.c **** #else
 752:../src/wolfcrypt/src/sha512.c ****     /* 80 operations, partially loop unrolled */
 753:../src/wolfcrypt/src/sha512.c ****     for (j = 0; j < 80; j += 16) {
 844                             		.loc 2 753 12
 845 0039 F8 A6 00                		mov.L	#0, [r10]
 846                             		.loc 2 753 5
 847 003c 38 71 40                		bra	.L43
 848                             	.L76:
 754:../src/wolfcrypt/src/sha512.c ****         R( 0); R( 1); R( 2); R( 3);
 849                             		.loc 2 754 9
 850 003f ED A5 0C                		mov.L	48[r10], r5
 851 0042 ED A6 0D                		mov.L	52[r10], r6
 852 0045 66 E3                   		mov.L	#14, r3
 853 0047 66 04                   		mov.L	#0, r4
 854 0049 EF 51                   		mov.L	r5, r1
 855 004b EF 62                   		mov.L	r6, r2
 856 004d 05 00 00 00             		bsr	_rotrFixed64
 857 0051 EF 1B                   		mov.L	r1, r11
 858 0053 EF 2C                   		mov.L	r2, r12
 859 0055 ED A5 0C                		mov.L	48[r10], r5
 860 0058 ED A6 0D                		mov.L	52[r10], r6
 861 005b 75 43 12                		mov.L	#18, r3
 862 005e 66 04                   		mov.L	#0, r4
 863 0060 EF 51                   		mov.L	r5, r1
 864 0062 EF 62                   		mov.L	r6, r2
 865 0064 05 00 00 00             		bsr	_rotrFixed64
 866 0068 EF 15                   		mov.L	r1, r5
 867 006a EF 26                   		mov.L	r2, r6
 868 006c EF B7                   		mov.L	r11, r7
 869 006e FC 37 57                		xor	r5, r7
 870 0071 E7 A7 15                		mov.L	r7, 84[r10]
 871 0074 EF CD                   		mov.L	r12, r13
 872 0076 FC 37 6D                		xor	r6, r13
 873 0079 E7 AD 16                		mov.L	r13, 88[r10]
 874 007c ED A5 0C                		mov.L	48[r10], r5
 875 007f ED A6 0D                		mov.L	52[r10], r6
 876 0082 75 43 29                		mov.L	#41, r3
 877 0085 66 04                   		mov.L	#0, r4
 878 0087 EF 51                   		mov.L	r5, r1
 879 0089 EF 62                   		mov.L	r6, r2
 880 008b 05 00 00 00             		bsr	_rotrFixed64
 881 008f EF 15                   		mov.L	r1, r5
 882 0091 EF 26                   		mov.L	r2, r6
 883 0093 ED A7 15                		mov.L	84[r10], r7
 884 0096 FC 37 57                		xor	r5, r7
 885 0099 E7 A7 17                		mov.L	r7, 92[r10]
 886 009c ED AB 16                		mov.L	88[r10], r11
 887 009f FC 37 6B                		xor	r6, r11
 888 00a2 E7 AB 18                		mov.L	r11, 96[r10]
 889 00a5 ED AB 10                		mov.L	64[r10], r11
 890 00a8 ED AC 11                		mov.L	68[r10], r12
 891 00ab ED A3 0C                		mov.L	48[r10], r3
 892 00ae ED A4 0D                		mov.L	52[r10], r4
 893 00b1 ED A1 0E                		mov.L	56[r10], r1
 894 00b4 ED A2 0F                		mov.L	60[r10], r2
 895 00b7 ED A5 10                		mov.L	64[r10], r5
 896 00ba ED A6 11                		mov.L	68[r10], r6
 897 00bd EF 1D                   		mov.L	r1, r13
 898 00bf FC 37 5D                		xor	r5, r13
 899 00c2 E7 AD 19                		mov.L	r13, 100[r10]
 900 00c5 EF 27                   		mov.L	r2, r7
 901 00c7 FC 37 67                		xor	r6, r7
 902 00ca E7 A7 1A                		mov.L	r7, 104[r10]
 903 00cd EF 3D                   		mov.L	r3, r13
 904 00cf 06 91 AD 19             		and	100[r10], r13
 905 00d3 E7 AD 1B                		mov.L	r13, 108[r10]
 906 00d6 EF 47                   		mov.L	r4, r7
 907 00d8 06 91 A7 1A             		and	104[r10], r7
 908 00dc E7 A7 1C                		mov.L	r7, 112[r10]
 909 00df ED AD 1B                		mov.L	108[r10], r13
 910 00e2 FC 37 BD                		xor	r11, r13
 911 00e5 E7 AD 1D                		mov.L	r13, 116[r10]
 912 00e8 ED A7 1C                		mov.L	112[r10], r7
 913 00eb FC 37 C7                		xor	r12, r7
 914 00ee E7 A7 1E                		mov.L	r7, 120[r10]
 915 00f1 ED AC 18                		mov.L	96[r10], r12
 916 00f4 ED AD 17                		mov.L	92[r10], r13
 917 00f7 ED A7 1D                		mov.L	116[r10], r7
 918 00fa FF 2B 7D                		add	r7, r13, r11
 919 00fd 06 A1 02 AC 1E          		adc 120[r10],r12
 920 0102 E7 AC 20                		mov.L	r12, 128[r10]
 921 0105 E7 AB 1F                		mov.L	r11, 124[r10]
 922 0108 EC A5                   		mov.L	[r10], r5
 923 010a FD C3 54                		shll	#3, r5, r4
 924 010d ED A5 01                		mov.L	4[r10], r5
 925 0110 4B 54                   		add	r5, r4
 926 0112 EC 45                   		mov.L	[r4], r5
 927 0114 A8 4E                   		mov.L	4[r4], r6
 928 0116 ED AC 20                		mov.L	128[r10], r12
 929 0119 ED AD 1F                		mov.L	124[r10], r13
 930 011c FF 2B 5D                		add	r5, r13, r11
 931 011f FC 0B 6C                		adc	r6, r12
 932 0122 E7 AC 22                		mov.L	r12, 136[r10]
 933 0125 E7 AB 21                		mov.L	r11, 132[r10]
 934 0128 EC A5                   		mov.L	[r10], r5
 935 012a 61 05                   		cmp	#0, r5
 936 012c 3A 60 01                		beq	.L44
 937                             		.loc 2 754 9 is_stmt 0 discriminator 1
 938 012f ED A5 02                		mov.L	8[r10], r5
 939 0132 71 55 70                		add	#0x70, r5
 940 0135 EC 5B                   		mov.L	[r5], r11
 941 0137 ED 5C 01                		mov.L	4[r5], r12
 942 013a 75 43 13                		mov.L	#19, r3
 943 013d 66 04                   		mov.L	#0, r4
 944 013f EF B1                   		mov.L	r11, r1
 945 0141 EF C2                   		mov.L	r12, r2
 946 0143 05 00 00 00             		bsr	_rotrFixed64
 947 0147 EF 18                   		mov.L	r1, r8
 948 0149 EF 29                   		mov.L	r2, r9
 949 014b ED A5 02                		mov.L	8[r10], r5
 950 014e 71 55 70                		add	#0x70, r5
 951 0151 EC 5B                   		mov.L	[r5], r11
 952 0153 ED 5C 01                		mov.L	4[r5], r12
 953 0156 75 43 3D                		mov.L	#61, r3
 954 0159 66 04                   		mov.L	#0, r4
 955 015b EF B1                   		mov.L	r11, r1
 956 015d EF C2                   		mov.L	r12, r2
 957 015f 05 00 00 00             		bsr	_rotrFixed64
 958 0163 EF 15                   		mov.L	r1, r5
 959 0165 EF 26                   		mov.L	r2, r6
 960 0167 EF 8B                   		mov.L	r8, r11
 961 0169 FC 37 5B                		xor	r5, r11
 962 016c E7 AB 23                		mov.L	r11, 140[r10]
 963 016f EF 9C                   		mov.L	r9, r12
 964 0171 FC 37 6C                		xor	r6, r12
 965 0174 E7 AC 24                		mov.L	r12, 144[r10]
 966 0177 ED A5 02                		mov.L	8[r10], r5
 967 017a 71 54 70                		add	#0x70, r5, r4
 968 017d EC 45                   		mov.L	[r4], r5
 969 017f A8 4E                   		mov.L	4[r4], r6
 970 0181 FD DA 64                		shll	#26, r6, r4
 971 0184 FD 86 5D                		shlr	#6, r5, r13
 972 0187 E7 AD 25                		mov.L	r13, 148[r10]
 973 018a ED A7 25                		mov.L	148[r10], r7
 974 018d 57 47                   		or	r4, r7
 975 018f E7 A7 25                		mov.L	r7, 148[r10]
 976 0192 FD 86 6B                		shlr	#6, r6, r11
 977 0195 E7 AB 26                		mov.L	r11, 152[r10]
 978 0198 ED AC 23                		mov.L	140[r10], r12
 979 019b 06 A1 0D AC 25          		xor	148[r10].L, r12
 980 01a0 E7 AC 27                		mov.L	r12, 156[r10]
 981 01a3 ED AD 24                		mov.L	144[r10], r13
 982 01a6 06 A1 0D AD 26          		xor	152[r10].L, r13
 983 01ab E7 AD 28                		mov.L	r13, 160[r10]
 984 01ae ED A5 02                		mov.L	8[r10], r5
 985 01b1 71 54 48                		add	#0x48, r5, r4
 986 01b4 EC 45                   		mov.L	[r4], r5
 987 01b6 A8 4E                   		mov.L	4[r4], r6
 988 01b8 ED AB 28                		mov.L	160[r10], r11
 989 01bb ED AC 27                		mov.L	156[r10], r12
 990 01be FF 27 5C                		add	r5, r12, r7
 991 01c1 FC 0B 6B                		adc	r6, r11
 992 01c4 E7 AB 2A                		mov.L	r11, 168[r10]
 993 01c7 E7 A7 29                		mov.L	r7, 164[r10]
 994 01ca ED A5 02                		mov.L	8[r10], r5
 995 01cd 62 85                   		add	#8, r5
 996 01cf EC 5B                   		mov.L	[r5], r11
 997 01d1 ED 5C 01                		mov.L	4[r5], r12
 998 01d4 66 13                   		mov.L	#1, r3
 999 01d6 66 04                   		mov.L	#0, r4
 1000 01d8 EF B1                   		mov.L	r11, r1
 1001 01da EF C2                   		mov.L	r12, r2
 1002 01dc 05 00 00 00             		bsr	_rotrFixed64
 1003 01e0 EF 18                   		mov.L	r1, r8
 1004 01e2 EF 29                   		mov.L	r2, r9
 1005 01e4 ED A5 02                		mov.L	8[r10], r5
 1006 01e7 62 85                   		add	#8, r5
 1007 01e9 EC 5B                   		mov.L	[r5], r11
 1008 01eb ED 5C 01                		mov.L	4[r5], r12
 1009 01ee 66 83                   		mov.L	#8, r3
 1010 01f0 66 04                   		mov.L	#0, r4
 1011 01f2 EF B1                   		mov.L	r11, r1
 1012 01f4 EF C2                   		mov.L	r12, r2
 1013 01f6 05 00 00 00             		bsr	_rotrFixed64
 1014 01fa EF 15                   		mov.L	r1, r5
 1015 01fc EF 26                   		mov.L	r2, r6
 1016 01fe EF 87                   		mov.L	r8, r7
 1017 0200 FC 37 57                		xor	r5, r7
 1018 0203 E7 A7 2B                		mov.L	r7, 172[r10]
 1019 0206 EF 9B                   		mov.L	r9, r11
 1020 0208 FC 37 6B                		xor	r6, r11
 1021 020b E7 AB 2C                		mov.L	r11, 176[r10]
 1022 020e ED A5 02                		mov.L	8[r10], r5
 1023 0211 71 54 08                		add	#8, r5, r4
 1024 0214 EC 45                   		mov.L	[r4], r5
 1025 0216 A8 4E                   		mov.L	4[r4], r6
 1026 0218 FD D9 64                		shll	#25, r6, r4
 1027 021b FD 87 5C                		shlr	#7, r5, r12
 1028 021e E7 AC 2D                		mov.L	r12, 180[r10]
 1029 0221 ED AD 2D                		mov.L	180[r10], r13
 1030 0224 57 4D                   		or	r4, r13
 1031 0226 E7 AD 2D                		mov.L	r13, 180[r10]
 1032 0229 FD 87 67                		shlr	#7, r6, r7
 1033 022c E7 A7 2E                		mov.L	r7, 184[r10]
 1034 022f ED AB 2B                		mov.L	172[r10], r11
 1035 0232 06 A1 0D AB 2D          		xor	180[r10].L, r11
 1036 0237 E7 AB 2F                		mov.L	r11, 188[r10]
 1037 023a ED AC 2C                		mov.L	176[r10], r12
 1038 023d 06 A1 0D AC 2E          		xor	184[r10].L, r12
 1039 0242 E7 AC 30                		mov.L	r12, 192[r10]
 1040 0245 ED A7 2A                		mov.L	168[r10], r7
 1041 0248 ED AB 29                		mov.L	164[r10], r11
 1042 024b ED AC 2F                		mov.L	188[r10], r12
 1043 024e FF 2D CB                		add	r12, r11, r13
 1044 0251 06 A1 02 A7 30          		adc 192[r10],r7
 1045 0256 EB A7 26 03             		mov.L	r7, 3224[r10]
 1046 025a EB AD 25 03             		mov.L	r13, 3220[r10]
 1047 025e ED A4 02                		mov.L	8[r10], r4
 1048 0261 EC 45                   		mov.L	[r4], r5
 1049 0263 A8 4E                   		mov.L	4[r4], r6
 1050 0265 EE A7 26 03             		mov.L	3224[r10], r7
 1051 0269 EE AB 25 03             		mov.L	3220[r10], r11
 1052 026d FF 2D 5B                		add	r5, r11, r13
 1053 0270 FC 0B 67                		adc	r6, r7
 1054 0273 E7 A7 32                		mov.L	r7, 200[r10]
 1055 0276 E7 AD 31                		mov.L	r13, 196[r10]
 1056 0279 ED A5 02                		mov.L	8[r10], r5
 1057 027c E1 A5 31                		mov.L	196[r10], [r5]
 1058 027f E5 A5 32 01             		mov.L	200[r10], 4[r5]
 1059 0283 ED A4 02                		mov.L	8[r10], r4
 1060 0286 EC 45                   		mov.L	[r4], r5
 1061 0288 A8 4E                   		mov.L	4[r4], r6
 1062 028a 2E 17                   		bra	.L45
 1063                             	.L44:
 1064                             		.loc 2 754 9 discriminator 2
 1065 028c ED A5 14                		mov.L	80[r10], r5
 1066 028f AC 53                   		mov.L	64[r5], r3
 1067 0291 AC 5C                   		mov.L	68[r5], r4
 1068 0293 ED A5 02                		mov.L	8[r10], r5
 1069 0296 E3 53                   		mov.L	r3, [r5]
 1070 0298 A0 5C                   		mov.L	r4, 4[r5]
 1071 029a ED A4 02                		mov.L	8[r10], r4
 1072 029d EC 45                   		mov.L	[r4], r5
 1073 029f A8 4E                   		mov.L	4[r4], r6
 1074                             	.L45:
 1075                             		.loc 2 754 9 discriminator 4
 1076 02a1 EF 67                   		mov.L	r6, r7
 1077 02a3 ED AB 21                		mov.L	132[r10], r11
 1078 02a6 FF 2D B5                		add	r11, r5, r13
 1079 02a9 06 A1 02 A7 22          		adc 136[r10],r7
 1080 02ae EB A7 28 03             		mov.L	r7, 3232[r10]
 1081 02b2 EB AD 27 03             		mov.L	r13, 3228[r10]
 1082 02b6 ED A5 12                		mov.L	72[r10], r5
 1083 02b9 ED A6 13                		mov.L	76[r10], r6
 1084 02bc EE AD 28 03             		mov.L	3232[r10], r13
 1085 02c0 EE A7 27 03             		mov.L	3228[r10], r7
 1086 02c4 FF 2C 57                		add	r5, r7, r12
 1087 02c7 FC 0B 6D                		adc	r6, r13
 1088 02ca E7 AD 34                		mov.L	r13, 208[r10]
 1089 02cd E7 AC 33                		mov.L	r12, 204[r10]
 1090 02d0 E5 AA 33 12             		mov.L	204[r10], 72[r10]
 1091 02d4 E5 AA 34 13             		mov.L	208[r10], 76[r10]
 1092 02d8 ED A3 0A                		mov.L	40[r10], r3
 1093 02db ED A4 0B                		mov.L	44[r10], r4
 1094 02de ED A5 12                		mov.L	72[r10], r5
 1095 02e1 ED A6 13                		mov.L	76[r10], r6
 1096 02e4 EF 4D                   		mov.L	r4, r13
 1097 02e6 FF 2C 53                		add	r5, r3, r12
 1098 02e9 FC 0B 6D                		adc	r6, r13
 1099 02ec E7 AD 36                		mov.L	r13, 216[r10]
 1100 02ef E7 AC 35                		mov.L	r12, 212[r10]
 1101 02f2 E5 AA 35 0A             		mov.L	212[r10], 40[r10]
 1102 02f6 E5 AA 36 0B             		mov.L	216[r10], 44[r10]
 1103 02fa ED A5 04                		mov.L	16[r10], r5
 1104 02fd ED A6 05                		mov.L	20[r10], r6
 1105 0300 75 43 1C                		mov.L	#28, r3
 1106 0303 66 04                   		mov.L	#0, r4
 1107 0305 EF 51                   		mov.L	r5, r1
 1108 0307 EF 62                   		mov.L	r6, r2
 1109 0309 05 00 00 00             		bsr	_rotrFixed64
 1110 030d EF 1B                   		mov.L	r1, r11
 1111 030f EF 2C                   		mov.L	r2, r12
 1112 0311 ED A5 04                		mov.L	16[r10], r5
 1113 0314 ED A6 05                		mov.L	20[r10], r6
 1114 0317 75 43 22                		mov.L	#34, r3
 1115 031a 66 04                   		mov.L	#0, r4
 1116 031c EF 51                   		mov.L	r5, r1
 1117 031e EF 62                   		mov.L	r6, r2
 1118 0320 05 00 00 00             		bsr	_rotrFixed64
 1119 0324 EF 15                   		mov.L	r1, r5
 1120 0326 EF 26                   		mov.L	r2, r6
 1121 0328 EF BD                   		mov.L	r11, r13
 1122 032a FC 37 5D                		xor	r5, r13
 1123 032d E7 AD 37                		mov.L	r13, 220[r10]
 1124 0330 EF C7                   		mov.L	r12, r7
 1125 0332 FC 37 67                		xor	r6, r7
 1126 0335 E7 A7 38                		mov.L	r7, 224[r10]
 1127 0338 ED A5 04                		mov.L	16[r10], r5
 1128 033b ED A6 05                		mov.L	20[r10], r6
 1129 033e 75 43 27                		mov.L	#39, r3
 1130 0341 66 04                   		mov.L	#0, r4
 1131 0343 EF 51                   		mov.L	r5, r1
 1132 0345 EF 62                   		mov.L	r6, r2
 1133 0347 05 00 00 00             		bsr	_rotrFixed64
 1134 034b EF 15                   		mov.L	r1, r5
 1135 034d EF 26                   		mov.L	r2, r6
 1136 034f ED AB 37                		mov.L	220[r10], r11
 1137 0352 FC 37 5B                		xor	r5, r11
 1138 0355 E7 AB 39                		mov.L	r11, 228[r10]
 1139 0358 ED AC 38                		mov.L	224[r10], r12
 1140 035b FC 37 6C                		xor	r6, r12
 1141 035e E7 AC 3A                		mov.L	r12, 232[r10]
 1142 0361 ED A3 04                		mov.L	16[r10], r3
 1143 0364 ED A4 05                		mov.L	20[r10], r4
 1144 0367 ED A5 06                		mov.L	24[r10], r5
 1145 036a ED A6 07                		mov.L	28[r10], r6
 1146 036d FF 4D 53                		and	r5, r3, r13
 1147 0370 E7 AD 3B                		mov.L	r13, 236[r10]
 1148 0373 FF 47 64                		and	r6, r4, r7
 1149 0376 E7 A7 3C                		mov.L	r7, 240[r10]
 1150 0379 ED A1 08                		mov.L	32[r10], r1
 1151 037c ED A2 09                		mov.L	36[r10], r2
 1152 037f ED A3 04                		mov.L	16[r10], r3
 1153 0382 ED A4 05                		mov.L	20[r10], r4
 1154 0385 ED A5 06                		mov.L	24[r10], r5
 1155 0388 ED A6 07                		mov.L	28[r10], r6
 1156 038b FF 5B 53                		or	r5, r3, r11
 1157 038e E7 AB 3D                		mov.L	r11, 244[r10]
 1158 0391 FF 5C 64                		or	r6, r4, r12
 1159 0394 E7 AC 3E                		mov.L	r12, 248[r10]
 1160 0397 EF 1D                   		mov.L	r1, r13
 1161 0399 06 91 AD 3D             		and	244[r10], r13
 1162 039d E7 AD 3F                		mov.L	r13, 252[r10]
 1163 03a0 EF 27                   		mov.L	r2, r7
 1164 03a2 06 91 A7 3E             		and	248[r10], r7
 1165 03a6 E7 A7 40                		mov.L	r7, 256[r10]
 1166 03a9 ED AB 3B                		mov.L	236[r10], r11
 1167 03ac ED AC 3F                		mov.L	252[r10], r12
 1168 03af 57 CB                   		or	r12, r11
 1169 03b1 E7 AB 41                		mov.L	r11, 260[r10]
 1170 03b4 ED AD 3C                		mov.L	240[r10], r13
 1171 03b7 ED A7 40                		mov.L	256[r10], r7
 1172 03ba 57 7D                   		or	r7, r13
 1173 03bc E7 AD 42                		mov.L	r13, 264[r10]
 1174 03bf ED AC 3A                		mov.L	232[r10], r12
 1175 03c2 ED AD 39                		mov.L	228[r10], r13
 1176 03c5 ED A7 41                		mov.L	260[r10], r7
 1177 03c8 FF 2B 7D                		add	r7, r13, r11
 1178 03cb 06 A1 02 AC 42          		adc 264[r10],r12
 1179 03d0 EB AC 2A 03             		mov.L	r12, 3240[r10]
 1180 03d4 EB AB 29 03             		mov.L	r11, 3236[r10]
 1181 03d8 ED A5 12                		mov.L	72[r10], r5
 1182 03db ED A6 13                		mov.L	76[r10], r6
 1183 03de EE AC 2A 03             		mov.L	3240[r10], r12
 1184 03e2 EE AD 29 03             		mov.L	3236[r10], r13
 1185 03e6 FF 2B 5D                		add	r5, r13, r11
 1186 03e9 FC 0B 6C                		adc	r6, r12
 1187 03ec E7 AC 44                		mov.L	r12, 272[r10]
 1188 03ef E7 AB 43                		mov.L	r11, 268[r10]
 1189 03f2 E5 AA 43 12             		mov.L	268[r10], 72[r10]
 1190 03f6 E5 AA 44 13             		mov.L	272[r10], 76[r10]
 1191                             		.loc 2 754 16 is_stmt 1 discriminator 4
 1192 03fa ED A5 0A                		mov.L	40[r10], r5
 1193 03fd ED A6 0B                		mov.L	44[r10], r6
 1194 0400 66 E3                   		mov.L	#14, r3
 1195 0402 66 04                   		mov.L	#0, r4
 1196 0404 EF 51                   		mov.L	r5, r1
 1197 0406 EF 62                   		mov.L	r6, r2
 1198 0408 05 00 00 00             		bsr	_rotrFixed64
 1199 040c EF 1B                   		mov.L	r1, r11
 1200 040e EF 2C                   		mov.L	r2, r12
 1201 0410 ED A5 0A                		mov.L	40[r10], r5
 1202 0413 ED A6 0B                		mov.L	44[r10], r6
 1203 0416 75 43 12                		mov.L	#18, r3
 1204 0419 66 04                   		mov.L	#0, r4
 1205 041b EF 51                   		mov.L	r5, r1
 1206 041d EF 62                   		mov.L	r6, r2
 1207 041f 05 00 00 00             		bsr	_rotrFixed64
 1208 0423 EF 15                   		mov.L	r1, r5
 1209 0425 EF 26                   		mov.L	r2, r6
 1210 0427 EF BD                   		mov.L	r11, r13
 1211 0429 FC 37 5D                		xor	r5, r13
 1212 042c E7 AD 45                		mov.L	r13, 276[r10]
 1213 042f EF C7                   		mov.L	r12, r7
 1214 0431 FC 37 67                		xor	r6, r7
 1215 0434 E7 A7 46                		mov.L	r7, 280[r10]
 1216 0437 ED A5 0A                		mov.L	40[r10], r5
 1217 043a ED A6 0B                		mov.L	44[r10], r6
 1218 043d 75 43 29                		mov.L	#41, r3
 1219 0440 66 04                   		mov.L	#0, r4
 1220 0442 EF 51                   		mov.L	r5, r1
 1221 0444 EF 62                   		mov.L	r6, r2
 1222 0446 05 00 00 00             		bsr	_rotrFixed64
 1223 044a EF 15                   		mov.L	r1, r5
 1224 044c EF 26                   		mov.L	r2, r6
 1225 044e ED AB 45                		mov.L	276[r10], r11
 1226 0451 FC 37 5B                		xor	r5, r11
 1227 0454 E7 AB 47                		mov.L	r11, 284[r10]
 1228 0457 ED AC 46                		mov.L	280[r10], r12
 1229 045a FC 37 6C                		xor	r6, r12
 1230 045d E7 AC 48                		mov.L	r12, 288[r10]
 1231 0460 ED AB 0E                		mov.L	56[r10], r11
 1232 0463 ED AC 0F                		mov.L	60[r10], r12
 1233 0466 ED A3 0A                		mov.L	40[r10], r3
 1234 0469 ED A4 0B                		mov.L	44[r10], r4
 1235 046c ED A1 0C                		mov.L	48[r10], r1
 1236 046f ED A2 0D                		mov.L	52[r10], r2
 1237 0472 ED A5 0E                		mov.L	56[r10], r5
 1238 0475 ED A6 0F                		mov.L	60[r10], r6
 1239 0478 EF 1D                   		mov.L	r1, r13
 1240 047a FC 37 5D                		xor	r5, r13
 1241 047d E7 AD 49                		mov.L	r13, 292[r10]
 1242 0480 EF 27                   		mov.L	r2, r7
 1243 0482 FC 37 67                		xor	r6, r7
 1244 0485 E7 A7 4A                		mov.L	r7, 296[r10]
 1245 0488 EF 3D                   		mov.L	r3, r13
 1246 048a 06 91 AD 49             		and	292[r10], r13
 1247 048e E7 AD 4B                		mov.L	r13, 300[r10]
 1248 0491 EF 47                   		mov.L	r4, r7
 1249 0493 06 91 A7 4A             		and	296[r10], r7
 1250 0497 E7 A7 4C                		mov.L	r7, 304[r10]
 1251 049a ED AD 4B                		mov.L	300[r10], r13
 1252 049d FC 37 BD                		xor	r11, r13
 1253 04a0 E7 AD 4D                		mov.L	r13, 308[r10]
 1254 04a3 ED A7 4C                		mov.L	304[r10], r7
 1255 04a6 FC 37 C7                		xor	r12, r7
 1256 04a9 E7 A7 4E                		mov.L	r7, 312[r10]
 1257 04ac ED AC 48                		mov.L	288[r10], r12
 1258 04af ED AD 47                		mov.L	284[r10], r13
 1259 04b2 ED A7 4D                		mov.L	308[r10], r7
 1260 04b5 FF 2B 7D                		add	r7, r13, r11
 1261 04b8 06 A1 02 AC 4E          		adc 312[r10],r12
 1262 04bd E7 AC 50                		mov.L	r12, 320[r10]
 1263 04c0 E7 AB 4F                		mov.L	r11, 316[r10]
 1264 04c3 EC A5                   		mov.L	[r10], r5
 1265 04c5 62 15                   		add	#1, r5
 1266 04c7 FD C3 54                		shll	#3, r5, r4
 1267 04ca ED A5 01                		mov.L	4[r10], r5
 1268 04cd 4B 54                   		add	r5, r4
 1269 04cf EC 45                   		mov.L	[r4], r5
 1270 04d1 A8 4E                   		mov.L	4[r4], r6
 1271 04d3 ED AC 50                		mov.L	320[r10], r12
 1272 04d6 ED AD 4F                		mov.L	316[r10], r13
 1273 04d9 FF 2B 5D                		add	r5, r13, r11
 1274 04dc FC 0B 6C                		adc	r6, r12
 1275 04df E7 AC 52                		mov.L	r12, 328[r10]
 1276 04e2 E7 AB 51                		mov.L	r11, 324[r10]
 1277 04e5 EC A5                   		mov.L	[r10], r5
 1278 04e7 61 05                   		cmp	#0, r5
 1279 04e9 3A 64 01                		beq	.L46
 1280                             		.loc 2 754 16 is_stmt 0 discriminator 5
 1281 04ec ED A5 02                		mov.L	8[r10], r5
 1282 04ef 71 55 78                		add	#0x78, r5
 1283 04f2 EC 5B                   		mov.L	[r5], r11
 1284 04f4 ED 5C 01                		mov.L	4[r5], r12
 1285 04f7 75 43 13                		mov.L	#19, r3
 1286 04fa 66 04                   		mov.L	#0, r4
 1287 04fc EF B1                   		mov.L	r11, r1
 1288 04fe EF C2                   		mov.L	r12, r2
 1289 0500 05 00 00 00             		bsr	_rotrFixed64
 1290 0504 EF 18                   		mov.L	r1, r8
 1291 0506 EF 29                   		mov.L	r2, r9
 1292 0508 ED A5 02                		mov.L	8[r10], r5
 1293 050b 71 55 78                		add	#0x78, r5
 1294 050e EC 5B                   		mov.L	[r5], r11
 1295 0510 ED 5C 01                		mov.L	4[r5], r12
 1296 0513 75 43 3D                		mov.L	#61, r3
 1297 0516 66 04                   		mov.L	#0, r4
 1298 0518 EF B1                   		mov.L	r11, r1
 1299 051a EF C2                   		mov.L	r12, r2
 1300 051c 05 00 00 00             		bsr	_rotrFixed64
 1301 0520 EF 15                   		mov.L	r1, r5
 1302 0522 EF 26                   		mov.L	r2, r6
 1303 0524 EF 8B                   		mov.L	r8, r11
 1304 0526 FC 37 5B                		xor	r5, r11
 1305 0529 E7 AB 53                		mov.L	r11, 332[r10]
 1306 052c EF 9C                   		mov.L	r9, r12
 1307 052e FC 37 6C                		xor	r6, r12
 1308 0531 E7 AC 54                		mov.L	r12, 336[r10]
 1309 0534 ED A5 02                		mov.L	8[r10], r5
 1310 0537 71 54 78                		add	#0x78, r5, r4
 1311 053a EC 45                   		mov.L	[r4], r5
 1312 053c A8 4E                   		mov.L	4[r4], r6
 1313 053e FD DA 64                		shll	#26, r6, r4
 1314 0541 FD 86 5D                		shlr	#6, r5, r13
 1315 0544 E7 AD 55                		mov.L	r13, 340[r10]
 1316 0547 ED A7 55                		mov.L	340[r10], r7
 1317 054a 57 47                   		or	r4, r7
 1318 054c E7 A7 55                		mov.L	r7, 340[r10]
 1319 054f FD 86 6B                		shlr	#6, r6, r11
 1320 0552 E7 AB 56                		mov.L	r11, 344[r10]
 1321 0555 ED AC 53                		mov.L	332[r10], r12
 1322 0558 06 A1 0D AC 55          		xor	340[r10].L, r12
 1323 055d E7 AC 57                		mov.L	r12, 348[r10]
 1324 0560 ED AD 54                		mov.L	336[r10], r13
 1325 0563 06 A1 0D AD 56          		xor	344[r10].L, r13
 1326 0568 E7 AD 58                		mov.L	r13, 352[r10]
 1327 056b ED A5 02                		mov.L	8[r10], r5
 1328 056e 71 54 50                		add	#0x50, r5, r4
 1329 0571 EC 45                   		mov.L	[r4], r5
 1330 0573 A8 4E                   		mov.L	4[r4], r6
 1331 0575 ED AB 58                		mov.L	352[r10], r11
 1332 0578 ED AC 57                		mov.L	348[r10], r12
 1333 057b FF 27 5C                		add	r5, r12, r7
 1334 057e FC 0B 6B                		adc	r6, r11
 1335 0581 E7 AB 5A                		mov.L	r11, 360[r10]
 1336 0584 E7 A7 59                		mov.L	r7, 356[r10]
 1337 0587 ED A5 02                		mov.L	8[r10], r5
 1338 058a 71 55 10                		add	#16, r5
 1339 058d EC 5B                   		mov.L	[r5], r11
 1340 058f ED 5C 01                		mov.L	4[r5], r12
 1341 0592 66 13                   		mov.L	#1, r3
 1342 0594 66 04                   		mov.L	#0, r4
 1343 0596 EF B1                   		mov.L	r11, r1
 1344 0598 EF C2                   		mov.L	r12, r2
 1345 059a 05 00 00 00             		bsr	_rotrFixed64
 1346 059e EF 18                   		mov.L	r1, r8
 1347 05a0 EF 29                   		mov.L	r2, r9
 1348 05a2 ED A5 02                		mov.L	8[r10], r5
 1349 05a5 71 55 10                		add	#16, r5
 1350 05a8 EC 5B                   		mov.L	[r5], r11
 1351 05aa ED 5C 01                		mov.L	4[r5], r12
 1352 05ad 66 83                   		mov.L	#8, r3
 1353 05af 66 04                   		mov.L	#0, r4
 1354 05b1 EF B1                   		mov.L	r11, r1
 1355 05b3 EF C2                   		mov.L	r12, r2
 1356 05b5 05 00 00 00             		bsr	_rotrFixed64
 1357 05b9 EF 15                   		mov.L	r1, r5
 1358 05bb EF 26                   		mov.L	r2, r6
 1359 05bd EF 87                   		mov.L	r8, r7
 1360 05bf FC 37 57                		xor	r5, r7
 1361 05c2 E7 A7 5B                		mov.L	r7, 364[r10]
 1362 05c5 EF 9B                   		mov.L	r9, r11
 1363 05c7 FC 37 6B                		xor	r6, r11
 1364 05ca E7 AB 5C                		mov.L	r11, 368[r10]
 1365 05cd ED A5 02                		mov.L	8[r10], r5
 1366 05d0 71 54 10                		add	#16, r5, r4
 1367 05d3 EC 45                   		mov.L	[r4], r5
 1368 05d5 A8 4E                   		mov.L	4[r4], r6
 1369 05d7 FD D9 64                		shll	#25, r6, r4
 1370 05da FD 87 5C                		shlr	#7, r5, r12
 1371 05dd E7 AC 5D                		mov.L	r12, 372[r10]
 1372 05e0 ED AD 5D                		mov.L	372[r10], r13
 1373 05e3 57 4D                   		or	r4, r13
 1374 05e5 E7 AD 5D                		mov.L	r13, 372[r10]
 1375 05e8 FD 87 67                		shlr	#7, r6, r7
 1376 05eb E7 A7 5E                		mov.L	r7, 376[r10]
 1377 05ee ED AB 5B                		mov.L	364[r10], r11
 1378 05f1 06 A1 0D AB 5D          		xor	372[r10].L, r11
 1379 05f6 E7 AB 5F                		mov.L	r11, 380[r10]
 1380 05f9 ED AC 5C                		mov.L	368[r10], r12
 1381 05fc 06 A1 0D AC 5E          		xor	376[r10].L, r12
 1382 0601 E7 AC 60                		mov.L	r12, 384[r10]
 1383 0604 ED A7 5A                		mov.L	360[r10], r7
 1384 0607 ED AB 59                		mov.L	356[r10], r11
 1385 060a ED AC 5F                		mov.L	380[r10], r12
 1386 060d FF 2D CB                		add	r12, r11, r13
 1387 0610 06 A1 02 A7 60          		adc 384[r10],r7
 1388 0615 EB A7 2C 03             		mov.L	r7, 3248[r10]
 1389 0619 EB AD 2B 03             		mov.L	r13, 3244[r10]
 1390 061d ED A5 02                		mov.L	8[r10], r5
 1391 0620 62 85                   		add	#8, r5
 1392 0622 EC 52                   		mov.L	[r5], r2
 1393 0624 A8 5B                   		mov.L	4[r5], r3
 1394 0626 ED A5 02                		mov.L	8[r10], r5
 1395 0629 71 54 08                		add	#8, r5, r4
 1396 062c EE A7 2C 03             		mov.L	3248[r10], r7
 1397 0630 EE AB 2B 03             		mov.L	3244[r10], r11
 1398 0634 FF 2D 2B                		add	r2, r11, r13
 1399 0637 FC 0B 37                		adc	r3, r7
 1400 063a E7 A7 62                		mov.L	r7, 392[r10]
 1401 063d E7 AD 61                		mov.L	r13, 388[r10]
 1402 0640 E1 A4 61                		mov.L	388[r10], [r4]
 1403 0643 E5 A4 62 01             		mov.L	392[r10], 4[r4]
 1404 0647 EC 45                   		mov.L	[r4], r5
 1405 0649 A8 4E                   		mov.L	4[r4], r6
 1406 064b 2E 17                   		bra	.L47
 1407                             	.L46:
 1408                             		.loc 2 754 16 discriminator 6
 1409 064d ED A5 02                		mov.L	8[r10], r5
 1410 0650 71 54 08                		add	#8, r5, r4
 1411 0653 ED A5 14                		mov.L	80[r10], r5
 1412 0656 AC D2                   		mov.L	72[r5], r2
 1413 0658 AC DB                   		mov.L	76[r5], r3
 1414 065a E3 42                   		mov.L	r2, [r4]
 1415 065c A0 4B                   		mov.L	r3, 4[r4]
 1416 065e EC 45                   		mov.L	[r4], r5
 1417 0660 A8 4E                   		mov.L	4[r4], r6
 1418                             	.L47:
 1419                             		.loc 2 754 16 discriminator 8
 1420 0662 EF 67                   		mov.L	r6, r7
 1421 0664 ED AB 51                		mov.L	324[r10], r11
 1422 0667 FF 2D B5                		add	r11, r5, r13
 1423 066a 06 A1 02 A7 52          		adc 328[r10],r7
 1424 066f EB A7 2E 03             		mov.L	r7, 3256[r10]
 1425 0673 EB AD 2D 03             		mov.L	r13, 3252[r10]
 1426 0677 ED A5 10                		mov.L	64[r10], r5
 1427 067a ED A6 11                		mov.L	68[r10], r6
 1428 067d EE AD 2E 03             		mov.L	3256[r10], r13
 1429 0681 EE A7 2D 03             		mov.L	3252[r10], r7
 1430 0685 FF 2C 57                		add	r5, r7, r12
 1431 0688 FC 0B 6D                		adc	r6, r13
 1432 068b E7 AD 64                		mov.L	r13, 400[r10]
 1433 068e E7 AC 63                		mov.L	r12, 396[r10]
 1434 0691 E5 AA 63 10             		mov.L	396[r10], 64[r10]
 1435 0695 E5 AA 64 11             		mov.L	400[r10], 68[r10]
 1436 0699 ED A3 08                		mov.L	32[r10], r3
 1437 069c ED A4 09                		mov.L	36[r10], r4
 1438 069f ED A5 10                		mov.L	64[r10], r5
 1439 06a2 ED A6 11                		mov.L	68[r10], r6
 1440 06a5 EF 4D                   		mov.L	r4, r13
 1441 06a7 FF 2C 53                		add	r5, r3, r12
 1442 06aa FC 0B 6D                		adc	r6, r13
 1443 06ad E7 AD 66                		mov.L	r13, 408[r10]
 1444 06b0 E7 AC 65                		mov.L	r12, 404[r10]
 1445 06b3 E5 AA 65 08             		mov.L	404[r10], 32[r10]
 1446 06b7 E5 AA 66 09             		mov.L	408[r10], 36[r10]
 1447 06bb ED A5 12                		mov.L	72[r10], r5
 1448 06be ED A6 13                		mov.L	76[r10], r6
 1449 06c1 75 43 1C                		mov.L	#28, r3
 1450 06c4 66 04                   		mov.L	#0, r4
 1451 06c6 EF 51                   		mov.L	r5, r1
 1452 06c8 EF 62                   		mov.L	r6, r2
 1453 06ca 05 00 00 00             		bsr	_rotrFixed64
 1454 06ce EF 1B                   		mov.L	r1, r11
 1455 06d0 EF 2C                   		mov.L	r2, r12
 1456 06d2 ED A5 12                		mov.L	72[r10], r5
 1457 06d5 ED A6 13                		mov.L	76[r10], r6
 1458 06d8 75 43 22                		mov.L	#34, r3
 1459 06db 66 04                   		mov.L	#0, r4
 1460 06dd EF 51                   		mov.L	r5, r1
 1461 06df EF 62                   		mov.L	r6, r2
 1462 06e1 05 00 00 00             		bsr	_rotrFixed64
 1463 06e5 EF 15                   		mov.L	r1, r5
 1464 06e7 EF 26                   		mov.L	r2, r6
 1465 06e9 EF BD                   		mov.L	r11, r13
 1466 06eb FC 37 5D                		xor	r5, r13
 1467 06ee E7 AD 67                		mov.L	r13, 412[r10]
 1468 06f1 EF C7                   		mov.L	r12, r7
 1469 06f3 FC 37 67                		xor	r6, r7
 1470 06f6 E7 A7 68                		mov.L	r7, 416[r10]
 1471 06f9 ED A5 12                		mov.L	72[r10], r5
 1472 06fc ED A6 13                		mov.L	76[r10], r6
 1473 06ff 75 43 27                		mov.L	#39, r3
 1474 0702 66 04                   		mov.L	#0, r4
 1475 0704 EF 51                   		mov.L	r5, r1
 1476 0706 EF 62                   		mov.L	r6, r2
 1477 0708 05 00 00 00             		bsr	_rotrFixed64
 1478 070c EF 15                   		mov.L	r1, r5
 1479 070e EF 26                   		mov.L	r2, r6
 1480 0710 ED AB 67                		mov.L	412[r10], r11
 1481 0713 FC 37 5B                		xor	r5, r11
 1482 0716 E7 AB 69                		mov.L	r11, 420[r10]
 1483 0719 ED AC 68                		mov.L	416[r10], r12
 1484 071c FC 37 6C                		xor	r6, r12
 1485 071f E7 AC 6A                		mov.L	r12, 424[r10]
 1486 0722 ED A3 12                		mov.L	72[r10], r3
 1487 0725 ED A4 13                		mov.L	76[r10], r4
 1488 0728 ED A5 04                		mov.L	16[r10], r5
 1489 072b ED A6 05                		mov.L	20[r10], r6
 1490 072e FF 4D 53                		and	r5, r3, r13
 1491 0731 E7 AD 6B                		mov.L	r13, 428[r10]
 1492 0734 FF 47 64                		and	r6, r4, r7
 1493 0737 E7 A7 6C                		mov.L	r7, 432[r10]
 1494 073a ED A1 06                		mov.L	24[r10], r1
 1495 073d ED A2 07                		mov.L	28[r10], r2
 1496 0740 ED A3 12                		mov.L	72[r10], r3
 1497 0743 ED A4 13                		mov.L	76[r10], r4
 1498 0746 ED A5 04                		mov.L	16[r10], r5
 1499 0749 ED A6 05                		mov.L	20[r10], r6
 1500 074c FF 5B 53                		or	r5, r3, r11
 1501 074f E7 AB 6D                		mov.L	r11, 436[r10]
 1502 0752 FF 5C 64                		or	r6, r4, r12
 1503 0755 E7 AC 6E                		mov.L	r12, 440[r10]
 1504 0758 EF 1D                   		mov.L	r1, r13
 1505 075a 06 91 AD 6D             		and	436[r10], r13
 1506 075e E7 AD 6F                		mov.L	r13, 444[r10]
 1507 0761 EF 27                   		mov.L	r2, r7
 1508 0763 06 91 A7 6E             		and	440[r10], r7
 1509 0767 E7 A7 70                		mov.L	r7, 448[r10]
 1510 076a ED AB 6B                		mov.L	428[r10], r11
 1511 076d ED AC 6F                		mov.L	444[r10], r12
 1512 0770 57 CB                   		or	r12, r11
 1513 0772 E7 AB 71                		mov.L	r11, 452[r10]
 1514 0775 ED AD 6C                		mov.L	432[r10], r13
 1515 0778 ED A7 70                		mov.L	448[r10], r7
 1516 077b 57 7D                   		or	r7, r13
 1517 077d E7 AD 72                		mov.L	r13, 456[r10]
 1518 0780 ED AC 6A                		mov.L	424[r10], r12
 1519 0783 ED AD 69                		mov.L	420[r10], r13
 1520 0786 ED A7 71                		mov.L	452[r10], r7
 1521 0789 FF 2B 7D                		add	r7, r13, r11
 1522 078c 06 A1 02 AC 72          		adc 456[r10],r12
 1523 0791 EB AC 30 03             		mov.L	r12, 3264[r10]
 1524 0795 EB AB 2F 03             		mov.L	r11, 3260[r10]
 1525 0799 ED A5 10                		mov.L	64[r10], r5
 1526 079c ED A6 11                		mov.L	68[r10], r6
 1527 079f EE AC 30 03             		mov.L	3264[r10], r12
 1528 07a3 EE AD 2F 03             		mov.L	3260[r10], r13
 1529 07a7 FF 2B 5D                		add	r5, r13, r11
 1530 07aa FC 0B 6C                		adc	r6, r12
 1531 07ad E7 AC 74                		mov.L	r12, 464[r10]
 1532 07b0 E7 AB 73                		mov.L	r11, 460[r10]
 1533 07b3 E5 AA 73 10             		mov.L	460[r10], 64[r10]
 1534 07b7 E5 AA 74 11             		mov.L	464[r10], 68[r10]
 1535                             		.loc 2 754 23 is_stmt 1 discriminator 8
 1536 07bb ED A5 08                		mov.L	32[r10], r5
 1537 07be ED A6 09                		mov.L	36[r10], r6
 1538 07c1 66 E3                   		mov.L	#14, r3
 1539 07c3 66 04                   		mov.L	#0, r4
 1540 07c5 EF 51                   		mov.L	r5, r1
 1541 07c7 EF 62                   		mov.L	r6, r2
 1542 07c9 05 00 00 00             		bsr	_rotrFixed64
 1543 07cd EF 1B                   		mov.L	r1, r11
 1544 07cf EF 2C                   		mov.L	r2, r12
 1545 07d1 ED A5 08                		mov.L	32[r10], r5
 1546 07d4 ED A6 09                		mov.L	36[r10], r6
 1547 07d7 75 43 12                		mov.L	#18, r3
 1548 07da 66 04                   		mov.L	#0, r4
 1549 07dc EF 51                   		mov.L	r5, r1
 1550 07de EF 62                   		mov.L	r6, r2
 1551 07e0 05 00 00 00             		bsr	_rotrFixed64
 1552 07e4 EF 15                   		mov.L	r1, r5
 1553 07e6 EF 26                   		mov.L	r2, r6
 1554 07e8 EF BD                   		mov.L	r11, r13
 1555 07ea FC 37 5D                		xor	r5, r13
 1556 07ed E7 AD 75                		mov.L	r13, 468[r10]
 1557 07f0 EF C7                   		mov.L	r12, r7
 1558 07f2 FC 37 67                		xor	r6, r7
 1559 07f5 E7 A7 76                		mov.L	r7, 472[r10]
 1560 07f8 ED A5 08                		mov.L	32[r10], r5
 1561 07fb ED A6 09                		mov.L	36[r10], r6
 1562 07fe 75 43 29                		mov.L	#41, r3
 1563 0801 66 04                   		mov.L	#0, r4
 1564 0803 EF 51                   		mov.L	r5, r1
 1565 0805 EF 62                   		mov.L	r6, r2
 1566 0807 05 00 00 00             		bsr	_rotrFixed64
 1567 080b EF 15                   		mov.L	r1, r5
 1568 080d EF 26                   		mov.L	r2, r6
 1569 080f ED AB 75                		mov.L	468[r10], r11
 1570 0812 FC 37 5B                		xor	r5, r11
 1571 0815 E7 AB 77                		mov.L	r11, 476[r10]
 1572 0818 ED AC 76                		mov.L	472[r10], r12
 1573 081b FC 37 6C                		xor	r6, r12
 1574 081e E7 AC 78                		mov.L	r12, 480[r10]
 1575 0821 ED AB 0C                		mov.L	48[r10], r11
 1576 0824 ED AC 0D                		mov.L	52[r10], r12
 1577 0827 ED A3 08                		mov.L	32[r10], r3
 1578 082a ED A4 09                		mov.L	36[r10], r4
 1579 082d ED A1 0A                		mov.L	40[r10], r1
 1580 0830 ED A2 0B                		mov.L	44[r10], r2
 1581 0833 ED A5 0C                		mov.L	48[r10], r5
 1582 0836 ED A6 0D                		mov.L	52[r10], r6
 1583 0839 EF 1D                   		mov.L	r1, r13
 1584 083b FC 37 5D                		xor	r5, r13
 1585 083e E7 AD 79                		mov.L	r13, 484[r10]
 1586 0841 EF 27                   		mov.L	r2, r7
 1587 0843 FC 37 67                		xor	r6, r7
 1588 0846 E7 A7 7A                		mov.L	r7, 488[r10]
 1589 0849 EF 3D                   		mov.L	r3, r13
 1590 084b 06 91 AD 79             		and	484[r10], r13
 1591 084f E7 AD 7B                		mov.L	r13, 492[r10]
 1592 0852 EF 47                   		mov.L	r4, r7
 1593 0854 06 91 A7 7A             		and	488[r10], r7
 1594 0858 E7 A7 7C                		mov.L	r7, 496[r10]
 1595 085b ED AD 7B                		mov.L	492[r10], r13
 1596 085e FC 37 BD                		xor	r11, r13
 1597 0861 E7 AD 7D                		mov.L	r13, 500[r10]
 1598 0864 ED A7 7C                		mov.L	496[r10], r7
 1599 0867 FC 37 C7                		xor	r12, r7
 1600 086a E7 A7 7E                		mov.L	r7, 504[r10]
 1601 086d ED AC 78                		mov.L	480[r10], r12
 1602 0870 ED AD 77                		mov.L	476[r10], r13
 1603 0873 ED A7 7D                		mov.L	500[r10], r7
 1604 0876 FF 2B 7D                		add	r7, r13, r11
 1605 0879 06 A1 02 AC 7E          		adc 504[r10],r12
 1606 087e E7 AC 80                		mov.L	r12, 512[r10]
 1607 0881 E7 AB 7F                		mov.L	r11, 508[r10]
 1608 0884 EC A5                   		mov.L	[r10], r5
 1609 0886 62 25                   		add	#2, r5
 1610 0888 FD C3 54                		shll	#3, r5, r4
 1611 088b ED A5 01                		mov.L	4[r10], r5
 1612 088e 4B 54                   		add	r5, r4
 1613 0890 EC 45                   		mov.L	[r4], r5
 1614 0892 A8 4E                   		mov.L	4[r4], r6
 1615 0894 ED AC 80                		mov.L	512[r10], r12
 1616 0897 ED AD 7F                		mov.L	508[r10], r13
 1617 089a FF 2B 5D                		add	r5, r13, r11
 1618 089d FC 0B 6C                		adc	r6, r12
 1619 08a0 E7 AC 82                		mov.L	r12, 520[r10]
 1620 08a3 E7 AB 81                		mov.L	r11, 516[r10]
 1621 08a6 EC A5                   		mov.L	[r10], r5
 1622 08a8 61 05                   		cmp	#0, r5
 1623 08aa 3A 5C 01                		beq	.L48
 1624                             		.loc 2 754 23 is_stmt 0 discriminator 9
 1625 08ad ED A5 02                		mov.L	8[r10], r5
 1626 08b0 EC 5B                   		mov.L	[r5], r11
 1627 08b2 ED 5C 01                		mov.L	4[r5], r12
 1628 08b5 75 43 13                		mov.L	#19, r3
 1629 08b8 66 04                   		mov.L	#0, r4
 1630 08ba EF B1                   		mov.L	r11, r1
 1631 08bc EF C2                   		mov.L	r12, r2
 1632 08be 05 00 00 00             		bsr	_rotrFixed64
 1633 08c2 EF 18                   		mov.L	r1, r8
 1634 08c4 EF 29                   		mov.L	r2, r9
 1635 08c6 ED A5 02                		mov.L	8[r10], r5
 1636 08c9 EC 5B                   		mov.L	[r5], r11
 1637 08cb ED 5C 01                		mov.L	4[r5], r12
 1638 08ce 75 43 3D                		mov.L	#61, r3
 1639 08d1 66 04                   		mov.L	#0, r4
 1640 08d3 EF B1                   		mov.L	r11, r1
 1641 08d5 EF C2                   		mov.L	r12, r2
 1642 08d7 05 00 00 00             		bsr	_rotrFixed64
 1643 08db EF 15                   		mov.L	r1, r5
 1644 08dd EF 26                   		mov.L	r2, r6
 1645 08df EF 8B                   		mov.L	r8, r11
 1646 08e1 FC 37 5B                		xor	r5, r11
 1647 08e4 E7 AB 83                		mov.L	r11, 524[r10]
 1648 08e7 EF 9C                   		mov.L	r9, r12
 1649 08e9 FC 37 6C                		xor	r6, r12
 1650 08ec E7 AC 84                		mov.L	r12, 528[r10]
 1651 08ef ED A4 02                		mov.L	8[r10], r4
 1652 08f2 EC 45                   		mov.L	[r4], r5
 1653 08f4 A8 4E                   		mov.L	4[r4], r6
 1654 08f6 FD DA 64                		shll	#26, r6, r4
 1655 08f9 FD 86 5D                		shlr	#6, r5, r13
 1656 08fc E7 AD 85                		mov.L	r13, 532[r10]
 1657 08ff ED A7 85                		mov.L	532[r10], r7
 1658 0902 57 47                   		or	r4, r7
 1659 0904 E7 A7 85                		mov.L	r7, 532[r10]
 1660 0907 FD 86 6B                		shlr	#6, r6, r11
 1661 090a E7 AB 86                		mov.L	r11, 536[r10]
 1662 090d ED AC 83                		mov.L	524[r10], r12
 1663 0910 06 A1 0D AC 85          		xor	532[r10].L, r12
 1664 0915 E7 AC 87                		mov.L	r12, 540[r10]
 1665 0918 ED AD 84                		mov.L	528[r10], r13
 1666 091b 06 A1 0D AD 86          		xor	536[r10].L, r13
 1667 0920 E7 AD 88                		mov.L	r13, 544[r10]
 1668 0923 ED A5 02                		mov.L	8[r10], r5
 1669 0926 71 54 58                		add	#0x58, r5, r4
 1670 0929 EC 45                   		mov.L	[r4], r5
 1671 092b A8 4E                   		mov.L	4[r4], r6
 1672 092d ED AB 88                		mov.L	544[r10], r11
 1673 0930 ED AC 87                		mov.L	540[r10], r12
 1674 0933 FF 27 5C                		add	r5, r12, r7
 1675 0936 FC 0B 6B                		adc	r6, r11
 1676 0939 E7 AB 8A                		mov.L	r11, 552[r10]
 1677 093c E7 A7 89                		mov.L	r7, 548[r10]
 1678 093f ED A5 02                		mov.L	8[r10], r5
 1679 0942 71 55 18                		add	#24, r5
 1680 0945 EC 5B                   		mov.L	[r5], r11
 1681 0947 ED 5C 01                		mov.L	4[r5], r12
 1682 094a 66 13                   		mov.L	#1, r3
 1683 094c 66 04                   		mov.L	#0, r4
 1684 094e EF B1                   		mov.L	r11, r1
 1685 0950 EF C2                   		mov.L	r12, r2
 1686 0952 05 00 00 00             		bsr	_rotrFixed64
 1687 0956 EF 18                   		mov.L	r1, r8
 1688 0958 EF 29                   		mov.L	r2, r9
 1689 095a ED A5 02                		mov.L	8[r10], r5
 1690 095d 71 55 18                		add	#24, r5
 1691 0960 EC 5B                   		mov.L	[r5], r11
 1692 0962 ED 5C 01                		mov.L	4[r5], r12
 1693 0965 66 83                   		mov.L	#8, r3
 1694 0967 66 04                   		mov.L	#0, r4
 1695 0969 EF B1                   		mov.L	r11, r1
 1696 096b EF C2                   		mov.L	r12, r2
 1697 096d 05 00 00 00             		bsr	_rotrFixed64
 1698 0971 EF 15                   		mov.L	r1, r5
 1699 0973 EF 26                   		mov.L	r2, r6
 1700 0975 EF 87                   		mov.L	r8, r7
 1701 0977 FC 37 57                		xor	r5, r7
 1702 097a E7 A7 8B                		mov.L	r7, 556[r10]
 1703 097d EF 9B                   		mov.L	r9, r11
 1704 097f FC 37 6B                		xor	r6, r11
 1705 0982 E7 AB 8C                		mov.L	r11, 560[r10]
 1706 0985 ED A5 02                		mov.L	8[r10], r5
 1707 0988 71 54 18                		add	#24, r5, r4
 1708 098b EC 45                   		mov.L	[r4], r5
 1709 098d A8 4E                   		mov.L	4[r4], r6
 1710 098f FD D9 64                		shll	#25, r6, r4
 1711 0992 FD 87 5C                		shlr	#7, r5, r12
 1712 0995 E7 AC 8D                		mov.L	r12, 564[r10]
 1713 0998 ED AD 8D                		mov.L	564[r10], r13
 1714 099b 57 4D                   		or	r4, r13
 1715 099d E7 AD 8D                		mov.L	r13, 564[r10]
 1716 09a0 FD 87 67                		shlr	#7, r6, r7
 1717 09a3 E7 A7 8E                		mov.L	r7, 568[r10]
 1718 09a6 ED AB 8B                		mov.L	556[r10], r11
 1719 09a9 06 A1 0D AB 8D          		xor	564[r10].L, r11
 1720 09ae E7 AB 8F                		mov.L	r11, 572[r10]
 1721 09b1 ED AC 8C                		mov.L	560[r10], r12
 1722 09b4 06 A1 0D AC 8E          		xor	568[r10].L, r12
 1723 09b9 E7 AC 90                		mov.L	r12, 576[r10]
 1724 09bc ED A7 8A                		mov.L	552[r10], r7
 1725 09bf ED AB 89                		mov.L	548[r10], r11
 1726 09c2 ED AC 8F                		mov.L	572[r10], r12
 1727 09c5 FF 2D CB                		add	r12, r11, r13
 1728 09c8 06 A1 02 A7 90          		adc 576[r10],r7
 1729 09cd EB A7 32 03             		mov.L	r7, 3272[r10]
 1730 09d1 EB AD 31 03             		mov.L	r13, 3268[r10]
 1731 09d5 ED A5 02                		mov.L	8[r10], r5
 1732 09d8 71 55 10                		add	#16, r5
 1733 09db EC 52                   		mov.L	[r5], r2
 1734 09dd A8 5B                   		mov.L	4[r5], r3
 1735 09df ED A5 02                		mov.L	8[r10], r5
 1736 09e2 71 54 10                		add	#16, r5, r4
 1737 09e5 EE A7 32 03             		mov.L	3272[r10], r7
 1738 09e9 EE AB 31 03             		mov.L	3268[r10], r11
 1739 09ed FF 2D 2B                		add	r2, r11, r13
 1740 09f0 FC 0B 37                		adc	r3, r7
 1741 09f3 E7 A7 92                		mov.L	r7, 584[r10]
 1742 09f6 E7 AD 91                		mov.L	r13, 580[r10]
 1743 09f9 E1 A4 91                		mov.L	580[r10], [r4]
 1744 09fc E5 A4 92 01             		mov.L	584[r10], 4[r4]
 1745 0a00 EC 45                   		mov.L	[r4], r5
 1746 0a02 A8 4E                   		mov.L	4[r4], r6
 1747 0a04 2E 17                   		bra	.L49
 1748                             	.L48:
 1749                             		.loc 2 754 23 discriminator 10
 1750 0a06 ED A5 02                		mov.L	8[r10], r5
 1751 0a09 71 54 10                		add	#16, r5, r4
 1752 0a0c ED A5 14                		mov.L	80[r10], r5
 1753 0a0f AD 52                   		mov.L	80[r5], r2
 1754 0a11 AD 5B                   		mov.L	84[r5], r3
 1755 0a13 E3 42                   		mov.L	r2, [r4]
 1756 0a15 A0 4B                   		mov.L	r3, 4[r4]
 1757 0a17 EC 45                   		mov.L	[r4], r5
 1758 0a19 A8 4E                   		mov.L	4[r4], r6
 1759                             	.L49:
 1760                             		.loc 2 754 23 discriminator 12
 1761 0a1b EF 67                   		mov.L	r6, r7
 1762 0a1d ED AB 81                		mov.L	516[r10], r11
 1763 0a20 FF 2D B5                		add	r11, r5, r13
 1764 0a23 06 A1 02 A7 82          		adc 520[r10],r7
 1765 0a28 EB A7 34 03             		mov.L	r7, 3280[r10]
 1766 0a2c EB AD 33 03             		mov.L	r13, 3276[r10]
 1767 0a30 ED A5 0E                		mov.L	56[r10], r5
 1768 0a33 ED A6 0F                		mov.L	60[r10], r6
 1769 0a36 EE AD 34 03             		mov.L	3280[r10], r13
 1770 0a3a EE A7 33 03             		mov.L	3276[r10], r7
 1771 0a3e FF 2C 57                		add	r5, r7, r12
 1772 0a41 FC 0B 6D                		adc	r6, r13
 1773 0a44 E7 AD 94                		mov.L	r13, 592[r10]
 1774 0a47 E7 AC 93                		mov.L	r12, 588[r10]
 1775 0a4a E5 AA 93 0E             		mov.L	588[r10], 56[r10]
 1776 0a4e E5 AA 94 0F             		mov.L	592[r10], 60[r10]
 1777 0a52 ED A3 06                		mov.L	24[r10], r3
 1778 0a55 ED A4 07                		mov.L	28[r10], r4
 1779 0a58 ED A5 0E                		mov.L	56[r10], r5
 1780 0a5b ED A6 0F                		mov.L	60[r10], r6
 1781 0a5e EF 4D                   		mov.L	r4, r13
 1782 0a60 FF 2C 53                		add	r5, r3, r12
 1783 0a63 FC 0B 6D                		adc	r6, r13
 1784 0a66 E7 AD 96                		mov.L	r13, 600[r10]
 1785 0a69 E7 AC 95                		mov.L	r12, 596[r10]
 1786 0a6c E5 AA 95 06             		mov.L	596[r10], 24[r10]
 1787 0a70 E5 AA 96 07             		mov.L	600[r10], 28[r10]
 1788 0a74 ED A5 10                		mov.L	64[r10], r5
 1789 0a77 ED A6 11                		mov.L	68[r10], r6
 1790 0a7a 75 43 1C                		mov.L	#28, r3
 1791 0a7d 66 04                   		mov.L	#0, r4
 1792 0a7f EF 51                   		mov.L	r5, r1
 1793 0a81 EF 62                   		mov.L	r6, r2
 1794 0a83 05 00 00 00             		bsr	_rotrFixed64
 1795 0a87 EF 1B                   		mov.L	r1, r11
 1796 0a89 EF 2C                   		mov.L	r2, r12
 1797 0a8b ED A5 10                		mov.L	64[r10], r5
 1798 0a8e ED A6 11                		mov.L	68[r10], r6
 1799 0a91 75 43 22                		mov.L	#34, r3
 1800 0a94 66 04                   		mov.L	#0, r4
 1801 0a96 EF 51                   		mov.L	r5, r1
 1802 0a98 EF 62                   		mov.L	r6, r2
 1803 0a9a 05 00 00 00             		bsr	_rotrFixed64
 1804 0a9e EF 15                   		mov.L	r1, r5
 1805 0aa0 EF 26                   		mov.L	r2, r6
 1806 0aa2 EF BD                   		mov.L	r11, r13
 1807 0aa4 FC 37 5D                		xor	r5, r13
 1808 0aa7 E7 AD 97                		mov.L	r13, 604[r10]
 1809 0aaa EF C7                   		mov.L	r12, r7
 1810 0aac FC 37 67                		xor	r6, r7
 1811 0aaf E7 A7 98                		mov.L	r7, 608[r10]
 1812 0ab2 ED A5 10                		mov.L	64[r10], r5
 1813 0ab5 ED A6 11                		mov.L	68[r10], r6
 1814 0ab8 75 43 27                		mov.L	#39, r3
 1815 0abb 66 04                   		mov.L	#0, r4
 1816 0abd EF 51                   		mov.L	r5, r1
 1817 0abf EF 62                   		mov.L	r6, r2
 1818 0ac1 05 00 00 00             		bsr	_rotrFixed64
 1819 0ac5 EF 15                   		mov.L	r1, r5
 1820 0ac7 EF 26                   		mov.L	r2, r6
 1821 0ac9 ED AB 97                		mov.L	604[r10], r11
 1822 0acc FC 37 5B                		xor	r5, r11
 1823 0acf E7 AB 99                		mov.L	r11, 612[r10]
 1824 0ad2 ED AC 98                		mov.L	608[r10], r12
 1825 0ad5 FC 37 6C                		xor	r6, r12
 1826 0ad8 E7 AC 9A                		mov.L	r12, 616[r10]
 1827 0adb ED A3 10                		mov.L	64[r10], r3
 1828 0ade ED A4 11                		mov.L	68[r10], r4
 1829 0ae1 ED A5 12                		mov.L	72[r10], r5
 1830 0ae4 ED A6 13                		mov.L	76[r10], r6
 1831 0ae7 FF 4D 53                		and	r5, r3, r13
 1832 0aea E7 AD 9B                		mov.L	r13, 620[r10]
 1833 0aed FF 47 64                		and	r6, r4, r7
 1834 0af0 E7 A7 9C                		mov.L	r7, 624[r10]
 1835 0af3 ED A1 04                		mov.L	16[r10], r1
 1836 0af6 ED A2 05                		mov.L	20[r10], r2
 1837 0af9 ED A3 10                		mov.L	64[r10], r3
 1838 0afc ED A4 11                		mov.L	68[r10], r4
 1839 0aff ED A5 12                		mov.L	72[r10], r5
 1840 0b02 ED A6 13                		mov.L	76[r10], r6
 1841 0b05 FF 5B 53                		or	r5, r3, r11
 1842 0b08 E7 AB 9D                		mov.L	r11, 628[r10]
 1843 0b0b FF 5C 64                		or	r6, r4, r12
 1844 0b0e E7 AC 9E                		mov.L	r12, 632[r10]
 1845 0b11 EF 1D                   		mov.L	r1, r13
 1846 0b13 06 91 AD 9D             		and	628[r10], r13
 1847 0b17 E7 AD 9F                		mov.L	r13, 636[r10]
 1848 0b1a EF 27                   		mov.L	r2, r7
 1849 0b1c 06 91 A7 9E             		and	632[r10], r7
 1850 0b20 E7 A7 A0                		mov.L	r7, 640[r10]
 1851 0b23 ED AB 9B                		mov.L	620[r10], r11
 1852 0b26 ED AC 9F                		mov.L	636[r10], r12
 1853 0b29 57 CB                   		or	r12, r11
 1854 0b2b E7 AB A1                		mov.L	r11, 644[r10]
 1855 0b2e ED AD 9C                		mov.L	624[r10], r13
 1856 0b31 ED A7 A0                		mov.L	640[r10], r7
 1857 0b34 57 7D                   		or	r7, r13
 1858 0b36 E7 AD A2                		mov.L	r13, 648[r10]
 1859 0b39 ED AC 9A                		mov.L	616[r10], r12
 1860 0b3c ED AD 99                		mov.L	612[r10], r13
 1861 0b3f ED A7 A1                		mov.L	644[r10], r7
 1862 0b42 FF 2B 7D                		add	r7, r13, r11
 1863 0b45 06 A1 02 AC A2          		adc 648[r10],r12
 1864 0b4a EB AC 36 03             		mov.L	r12, 3288[r10]
 1865 0b4e EB AB 35 03             		mov.L	r11, 3284[r10]
 1866 0b52 ED A5 0E                		mov.L	56[r10], r5
 1867 0b55 ED A6 0F                		mov.L	60[r10], r6
 1868 0b58 EE AC 36 03             		mov.L	3288[r10], r12
 1869 0b5c EE AD 35 03             		mov.L	3284[r10], r13
 1870 0b60 FF 2B 5D                		add	r5, r13, r11
 1871 0b63 FC 0B 6C                		adc	r6, r12
 1872 0b66 E7 AC A4                		mov.L	r12, 656[r10]
 1873 0b69 E7 AB A3                		mov.L	r11, 652[r10]
 1874 0b6c E5 AA A3 0E             		mov.L	652[r10], 56[r10]
 1875 0b70 E5 AA A4 0F             		mov.L	656[r10], 60[r10]
 1876                             		.loc 2 754 30 is_stmt 1 discriminator 12
 1877 0b74 ED A5 06                		mov.L	24[r10], r5
 1878 0b77 ED A6 07                		mov.L	28[r10], r6
 1879 0b7a 66 E3                   		mov.L	#14, r3
 1880 0b7c 66 04                   		mov.L	#0, r4
 1881 0b7e EF 51                   		mov.L	r5, r1
 1882 0b80 EF 62                   		mov.L	r6, r2
 1883 0b82 05 00 00 00             		bsr	_rotrFixed64
 1884 0b86 EF 1B                   		mov.L	r1, r11
 1885 0b88 EF 2C                   		mov.L	r2, r12
 1886 0b8a ED A5 06                		mov.L	24[r10], r5
 1887 0b8d ED A6 07                		mov.L	28[r10], r6
 1888 0b90 75 43 12                		mov.L	#18, r3
 1889 0b93 66 04                   		mov.L	#0, r4
 1890 0b95 EF 51                   		mov.L	r5, r1
 1891 0b97 EF 62                   		mov.L	r6, r2
 1892 0b99 05 00 00 00             		bsr	_rotrFixed64
 1893 0b9d EF 15                   		mov.L	r1, r5
 1894 0b9f EF 26                   		mov.L	r2, r6
 1895 0ba1 EF BD                   		mov.L	r11, r13
 1896 0ba3 FC 37 5D                		xor	r5, r13
 1897 0ba6 E7 AD A5                		mov.L	r13, 660[r10]
 1898 0ba9 EF C7                   		mov.L	r12, r7
 1899 0bab FC 37 67                		xor	r6, r7
 1900 0bae E7 A7 A6                		mov.L	r7, 664[r10]
 1901 0bb1 ED A5 06                		mov.L	24[r10], r5
 1902 0bb4 ED A6 07                		mov.L	28[r10], r6
 1903 0bb7 75 43 29                		mov.L	#41, r3
 1904 0bba 66 04                   		mov.L	#0, r4
 1905 0bbc EF 51                   		mov.L	r5, r1
 1906 0bbe EF 62                   		mov.L	r6, r2
 1907 0bc0 05 00 00 00             		bsr	_rotrFixed64
 1908 0bc4 EF 15                   		mov.L	r1, r5
 1909 0bc6 EF 26                   		mov.L	r2, r6
 1910 0bc8 ED AB A5                		mov.L	660[r10], r11
 1911 0bcb FC 37 5B                		xor	r5, r11
 1912 0bce E7 AB A7                		mov.L	r11, 668[r10]
 1913 0bd1 ED AC A6                		mov.L	664[r10], r12
 1914 0bd4 FC 37 6C                		xor	r6, r12
 1915 0bd7 E7 AC A8                		mov.L	r12, 672[r10]
 1916 0bda ED AB 0A                		mov.L	40[r10], r11
 1917 0bdd ED AC 0B                		mov.L	44[r10], r12
 1918 0be0 ED A3 06                		mov.L	24[r10], r3
 1919 0be3 ED A4 07                		mov.L	28[r10], r4
 1920 0be6 ED A1 08                		mov.L	32[r10], r1
 1921 0be9 ED A2 09                		mov.L	36[r10], r2
 1922 0bec ED A5 0A                		mov.L	40[r10], r5
 1923 0bef ED A6 0B                		mov.L	44[r10], r6
 1924 0bf2 EF 1D                   		mov.L	r1, r13
 1925 0bf4 FC 37 5D                		xor	r5, r13
 1926 0bf7 E7 AD A9                		mov.L	r13, 676[r10]
 1927 0bfa EF 27                   		mov.L	r2, r7
 1928 0bfc FC 37 67                		xor	r6, r7
 1929 0bff E7 A7 AA                		mov.L	r7, 680[r10]
 1930 0c02 EF 3D                   		mov.L	r3, r13
 1931 0c04 06 91 AD A9             		and	676[r10], r13
 1932 0c08 E7 AD AB                		mov.L	r13, 684[r10]
 1933 0c0b EF 47                   		mov.L	r4, r7
 1934 0c0d 06 91 A7 AA             		and	680[r10], r7
 1935 0c11 E7 A7 AC                		mov.L	r7, 688[r10]
 1936 0c14 ED AD AB                		mov.L	684[r10], r13
 1937 0c17 FC 37 BD                		xor	r11, r13
 1938 0c1a E7 AD AD                		mov.L	r13, 692[r10]
 1939 0c1d ED A7 AC                		mov.L	688[r10], r7
 1940 0c20 FC 37 C7                		xor	r12, r7
 1941 0c23 E7 A7 AE                		mov.L	r7, 696[r10]
 1942 0c26 ED AC A8                		mov.L	672[r10], r12
 1943 0c29 ED AD A7                		mov.L	668[r10], r13
 1944 0c2c ED A7 AD                		mov.L	692[r10], r7
 1945 0c2f FF 2B 7D                		add	r7, r13, r11
 1946 0c32 06 A1 02 AC AE          		adc 696[r10],r12
 1947 0c37 E7 AC B0                		mov.L	r12, 704[r10]
 1948 0c3a E7 AB AF                		mov.L	r11, 700[r10]
 1949 0c3d EC A5                   		mov.L	[r10], r5
 1950 0c3f 62 35                   		add	#3, r5
 1951 0c41 FD C3 54                		shll	#3, r5, r4
 1952 0c44 ED A5 01                		mov.L	4[r10], r5
 1953 0c47 4B 54                   		add	r5, r4
 1954 0c49 EC 45                   		mov.L	[r4], r5
 1955 0c4b A8 4E                   		mov.L	4[r4], r6
 1956 0c4d ED AC B0                		mov.L	704[r10], r12
 1957 0c50 ED AD AF                		mov.L	700[r10], r13
 1958 0c53 FF 2B 5D                		add	r5, r13, r11
 1959 0c56 FC 0B 6C                		adc	r6, r12
 1960 0c59 E7 AC B2                		mov.L	r12, 712[r10]
 1961 0c5c E7 AB B1                		mov.L	r11, 708[r10]
 1962 0c5f EC A5                   		mov.L	[r10], r5
 1963 0c61 61 05                   		cmp	#0, r5
 1964 0c63 3A 63 01                		beq	.L50
 1965                             		.loc 2 754 30 is_stmt 0 discriminator 13
 1966 0c66 ED A5 02                		mov.L	8[r10], r5
 1967 0c69 62 85                   		add	#8, r5
 1968 0c6b EC 5B                   		mov.L	[r5], r11
 1969 0c6d ED 5C 01                		mov.L	4[r5], r12
 1970 0c70 75 43 13                		mov.L	#19, r3
 1971 0c73 66 04                   		mov.L	#0, r4
 1972 0c75 EF B1                   		mov.L	r11, r1
 1973 0c77 EF C2                   		mov.L	r12, r2
 1974 0c79 05 00 00 00             		bsr	_rotrFixed64
 1975 0c7d EF 18                   		mov.L	r1, r8
 1976 0c7f EF 29                   		mov.L	r2, r9
 1977 0c81 ED A5 02                		mov.L	8[r10], r5
 1978 0c84 62 85                   		add	#8, r5
 1979 0c86 EC 5B                   		mov.L	[r5], r11
 1980 0c88 ED 5C 01                		mov.L	4[r5], r12
 1981 0c8b 75 43 3D                		mov.L	#61, r3
 1982 0c8e 66 04                   		mov.L	#0, r4
 1983 0c90 EF B1                   		mov.L	r11, r1
 1984 0c92 EF C2                   		mov.L	r12, r2
 1985 0c94 05 00 00 00             		bsr	_rotrFixed64
 1986 0c98 EF 15                   		mov.L	r1, r5
 1987 0c9a EF 26                   		mov.L	r2, r6
 1988 0c9c EF 8B                   		mov.L	r8, r11
 1989 0c9e FC 37 5B                		xor	r5, r11
 1990 0ca1 E7 AB B3                		mov.L	r11, 716[r10]
 1991 0ca4 EF 9C                   		mov.L	r9, r12
 1992 0ca6 FC 37 6C                		xor	r6, r12
 1993 0ca9 E7 AC B4                		mov.L	r12, 720[r10]
 1994 0cac ED A5 02                		mov.L	8[r10], r5
 1995 0caf 71 54 08                		add	#8, r5, r4
 1996 0cb2 EC 45                   		mov.L	[r4], r5
 1997 0cb4 A8 4E                   		mov.L	4[r4], r6
 1998 0cb6 FD DA 64                		shll	#26, r6, r4
 1999 0cb9 FD 86 5D                		shlr	#6, r5, r13
 2000 0cbc E7 AD B5                		mov.L	r13, 724[r10]
 2001 0cbf ED A7 B5                		mov.L	724[r10], r7
 2002 0cc2 57 47                   		or	r4, r7
 2003 0cc4 E7 A7 B5                		mov.L	r7, 724[r10]
 2004 0cc7 FD 86 6B                		shlr	#6, r6, r11
 2005 0cca E7 AB B6                		mov.L	r11, 728[r10]
 2006 0ccd ED AC B3                		mov.L	716[r10], r12
 2007 0cd0 06 A1 0D AC B5          		xor	724[r10].L, r12
 2008 0cd5 E7 AC B7                		mov.L	r12, 732[r10]
 2009 0cd8 ED AD B4                		mov.L	720[r10], r13
 2010 0cdb 06 A1 0D AD B6          		xor	728[r10].L, r13
 2011 0ce0 E7 AD B8                		mov.L	r13, 736[r10]
 2012 0ce3 ED A5 02                		mov.L	8[r10], r5
 2013 0ce6 71 54 60                		add	#0x60, r5, r4
 2014 0ce9 EC 45                   		mov.L	[r4], r5
 2015 0ceb A8 4E                   		mov.L	4[r4], r6
 2016 0ced ED AB B8                		mov.L	736[r10], r11
 2017 0cf0 ED AC B7                		mov.L	732[r10], r12
 2018 0cf3 FF 27 5C                		add	r5, r12, r7
 2019 0cf6 FC 0B 6B                		adc	r6, r11
 2020 0cf9 E7 AB BA                		mov.L	r11, 744[r10]
 2021 0cfc E7 A7 B9                		mov.L	r7, 740[r10]
 2022 0cff ED A5 02                		mov.L	8[r10], r5
 2023 0d02 71 55 20                		add	#32, r5
 2024 0d05 EC 5B                   		mov.L	[r5], r11
 2025 0d07 ED 5C 01                		mov.L	4[r5], r12
 2026 0d0a 66 13                   		mov.L	#1, r3
 2027 0d0c 66 04                   		mov.L	#0, r4
 2028 0d0e EF B1                   		mov.L	r11, r1
 2029 0d10 EF C2                   		mov.L	r12, r2
 2030 0d12 05 00 00 00             		bsr	_rotrFixed64
 2031 0d16 EF 18                   		mov.L	r1, r8
 2032 0d18 EF 29                   		mov.L	r2, r9
 2033 0d1a ED A5 02                		mov.L	8[r10], r5
 2034 0d1d 71 55 20                		add	#32, r5
 2035 0d20 EC 5B                   		mov.L	[r5], r11
 2036 0d22 ED 5C 01                		mov.L	4[r5], r12
 2037 0d25 66 83                   		mov.L	#8, r3
 2038 0d27 66 04                   		mov.L	#0, r4
 2039 0d29 EF B1                   		mov.L	r11, r1
 2040 0d2b EF C2                   		mov.L	r12, r2
 2041 0d2d 05 00 00 00             		bsr	_rotrFixed64
 2042 0d31 EF 15                   		mov.L	r1, r5
 2043 0d33 EF 26                   		mov.L	r2, r6
 2044 0d35 EF 87                   		mov.L	r8, r7
 2045 0d37 FC 37 57                		xor	r5, r7
 2046 0d3a E7 A7 BB                		mov.L	r7, 748[r10]
 2047 0d3d EF 9B                   		mov.L	r9, r11
 2048 0d3f FC 37 6B                		xor	r6, r11
 2049 0d42 E7 AB BC                		mov.L	r11, 752[r10]
 2050 0d45 ED A5 02                		mov.L	8[r10], r5
 2051 0d48 71 54 20                		add	#32, r5, r4
 2052 0d4b EC 45                   		mov.L	[r4], r5
 2053 0d4d A8 4E                   		mov.L	4[r4], r6
 2054 0d4f FD D9 64                		shll	#25, r6, r4
 2055 0d52 FD 87 5C                		shlr	#7, r5, r12
 2056 0d55 E7 AC BD                		mov.L	r12, 756[r10]
 2057 0d58 ED AD BD                		mov.L	756[r10], r13
 2058 0d5b 57 4D                   		or	r4, r13
 2059 0d5d E7 AD BD                		mov.L	r13, 756[r10]
 2060 0d60 FD 87 67                		shlr	#7, r6, r7
 2061 0d63 E7 A7 BE                		mov.L	r7, 760[r10]
 2062 0d66 ED AB BB                		mov.L	748[r10], r11
 2063 0d69 06 A1 0D AB BD          		xor	756[r10].L, r11
 2064 0d6e E7 AB BF                		mov.L	r11, 764[r10]
 2065 0d71 ED AC BC                		mov.L	752[r10], r12
 2066 0d74 06 A1 0D AC BE          		xor	760[r10].L, r12
 2067 0d79 E7 AC C0                		mov.L	r12, 768[r10]
 2068 0d7c ED A7 BA                		mov.L	744[r10], r7
 2069 0d7f ED AB B9                		mov.L	740[r10], r11
 2070 0d82 ED AC BF                		mov.L	764[r10], r12
 2071 0d85 FF 2D CB                		add	r12, r11, r13
 2072 0d88 06 A1 02 A7 C0          		adc 768[r10],r7
 2073 0d8d EB A7 38 03             		mov.L	r7, 3296[r10]
 2074 0d91 EB AD 37 03             		mov.L	r13, 3292[r10]
 2075 0d95 ED A5 02                		mov.L	8[r10], r5
 2076 0d98 71 55 18                		add	#24, r5
 2077 0d9b EC 52                   		mov.L	[r5], r2
 2078 0d9d A8 5B                   		mov.L	4[r5], r3
 2079 0d9f ED A5 02                		mov.L	8[r10], r5
 2080 0da2 71 54 18                		add	#24, r5, r4
 2081 0da5 EE A7 38 03             		mov.L	3296[r10], r7
 2082 0da9 EE AB 37 03             		mov.L	3292[r10], r11
 2083 0dad FF 2D 2B                		add	r2, r11, r13
 2084 0db0 FC 0B 37                		adc	r3, r7
 2085 0db3 E7 A7 C2                		mov.L	r7, 776[r10]
 2086 0db6 E7 AD C1                		mov.L	r13, 772[r10]
 2087 0db9 E1 A4 C1                		mov.L	772[r10], [r4]
 2088 0dbc E5 A4 C2 01             		mov.L	776[r10], 4[r4]
 2089 0dc0 EC 45                   		mov.L	[r4], r5
 2090 0dc2 A8 4E                   		mov.L	4[r4], r6
 2091 0dc4 2E 17                   		bra	.L51
 2092                             	.L50:
 2093                             		.loc 2 754 30 discriminator 14
 2094 0dc6 ED A5 02                		mov.L	8[r10], r5
 2095 0dc9 71 54 18                		add	#24, r5, r4
 2096 0dcc ED A5 14                		mov.L	80[r10], r5
 2097 0dcf AD D2                   		mov.L	88[r5], r2
 2098 0dd1 AD DB                   		mov.L	92[r5], r3
 2099 0dd3 E3 42                   		mov.L	r2, [r4]
 2100 0dd5 A0 4B                   		mov.L	r3, 4[r4]
 2101 0dd7 EC 45                   		mov.L	[r4], r5
 2102 0dd9 A8 4E                   		mov.L	4[r4], r6
 2103                             	.L51:
 2104                             		.loc 2 754 30 discriminator 16
 2105 0ddb EF 67                   		mov.L	r6, r7
 2106 0ddd ED AB B1                		mov.L	708[r10], r11
 2107 0de0 FF 2D B5                		add	r11, r5, r13
 2108 0de3 06 A1 02 A7 B2          		adc 712[r10],r7
 2109 0de8 EB A7 3A 03             		mov.L	r7, 3304[r10]
 2110 0dec EB AD 39 03             		mov.L	r13, 3300[r10]
 2111 0df0 ED A5 0C                		mov.L	48[r10], r5
 2112 0df3 ED A6 0D                		mov.L	52[r10], r6
 2113 0df6 EE AD 3A 03             		mov.L	3304[r10], r13
 2114 0dfa EE A7 39 03             		mov.L	3300[r10], r7
 2115 0dfe FF 2C 57                		add	r5, r7, r12
 2116 0e01 FC 0B 6D                		adc	r6, r13
 2117 0e04 E7 AD C4                		mov.L	r13, 784[r10]
 2118 0e07 E7 AC C3                		mov.L	r12, 780[r10]
 2119 0e0a E5 AA C3 0C             		mov.L	780[r10], 48[r10]
 2120 0e0e E5 AA C4 0D             		mov.L	784[r10], 52[r10]
 2121 0e12 ED A3 04                		mov.L	16[r10], r3
 2122 0e15 ED A4 05                		mov.L	20[r10], r4
 2123 0e18 ED A5 0C                		mov.L	48[r10], r5
 2124 0e1b ED A6 0D                		mov.L	52[r10], r6
 2125 0e1e EF 4D                   		mov.L	r4, r13
 2126 0e20 FF 2C 53                		add	r5, r3, r12
 2127 0e23 FC 0B 6D                		adc	r6, r13
 2128 0e26 E7 AD C6                		mov.L	r13, 792[r10]
 2129 0e29 E7 AC C5                		mov.L	r12, 788[r10]
 2130 0e2c E5 AA C5 04             		mov.L	788[r10], 16[r10]
 2131 0e30 E5 AA C6 05             		mov.L	792[r10], 20[r10]
 2132 0e34 ED A5 0E                		mov.L	56[r10], r5
 2133 0e37 ED A6 0F                		mov.L	60[r10], r6
 2134 0e3a 75 43 1C                		mov.L	#28, r3
 2135 0e3d 66 04                   		mov.L	#0, r4
 2136 0e3f EF 51                   		mov.L	r5, r1
 2137 0e41 EF 62                   		mov.L	r6, r2
 2138 0e43 05 00 00 00             		bsr	_rotrFixed64
 2139 0e47 EF 1B                   		mov.L	r1, r11
 2140 0e49 EF 2C                   		mov.L	r2, r12
 2141 0e4b ED A5 0E                		mov.L	56[r10], r5
 2142 0e4e ED A6 0F                		mov.L	60[r10], r6
 2143 0e51 75 43 22                		mov.L	#34, r3
 2144 0e54 66 04                   		mov.L	#0, r4
 2145 0e56 EF 51                   		mov.L	r5, r1
 2146 0e58 EF 62                   		mov.L	r6, r2
 2147 0e5a 05 00 00 00             		bsr	_rotrFixed64
 2148 0e5e EF 15                   		mov.L	r1, r5
 2149 0e60 EF 26                   		mov.L	r2, r6
 2150 0e62 EF BD                   		mov.L	r11, r13
 2151 0e64 FC 37 5D                		xor	r5, r13
 2152 0e67 E7 AD C7                		mov.L	r13, 796[r10]
 2153 0e6a EF C7                   		mov.L	r12, r7
 2154 0e6c FC 37 67                		xor	r6, r7
 2155 0e6f E7 A7 C8                		mov.L	r7, 800[r10]
 2156 0e72 ED A5 0E                		mov.L	56[r10], r5
 2157 0e75 ED A6 0F                		mov.L	60[r10], r6
 2158 0e78 75 43 27                		mov.L	#39, r3
 2159 0e7b 66 04                   		mov.L	#0, r4
 2160 0e7d EF 51                   		mov.L	r5, r1
 2161 0e7f EF 62                   		mov.L	r6, r2
 2162 0e81 05 00 00 00             		bsr	_rotrFixed64
 2163 0e85 EF 15                   		mov.L	r1, r5
 2164 0e87 EF 26                   		mov.L	r2, r6
 2165 0e89 ED AB C7                		mov.L	796[r10], r11
 2166 0e8c FC 37 5B                		xor	r5, r11
 2167 0e8f E7 AB C9                		mov.L	r11, 804[r10]
 2168 0e92 ED AC C8                		mov.L	800[r10], r12
 2169 0e95 FC 37 6C                		xor	r6, r12
 2170 0e98 E7 AC CA                		mov.L	r12, 808[r10]
 2171 0e9b ED A3 0E                		mov.L	56[r10], r3
 2172 0e9e ED A4 0F                		mov.L	60[r10], r4
 2173 0ea1 ED A5 10                		mov.L	64[r10], r5
 2174 0ea4 ED A6 11                		mov.L	68[r10], r6
 2175 0ea7 FF 4D 53                		and	r5, r3, r13
 2176 0eaa E7 AD CB                		mov.L	r13, 812[r10]
 2177 0ead FF 47 64                		and	r6, r4, r7
 2178 0eb0 E7 A7 CC                		mov.L	r7, 816[r10]
 2179 0eb3 ED A1 12                		mov.L	72[r10], r1
 2180 0eb6 ED A2 13                		mov.L	76[r10], r2
 2181 0eb9 ED A3 0E                		mov.L	56[r10], r3
 2182 0ebc ED A4 0F                		mov.L	60[r10], r4
 2183 0ebf ED A5 10                		mov.L	64[r10], r5
 2184 0ec2 ED A6 11                		mov.L	68[r10], r6
 2185 0ec5 FF 5B 53                		or	r5, r3, r11
 2186 0ec8 E7 AB CD                		mov.L	r11, 820[r10]
 2187 0ecb FF 5C 64                		or	r6, r4, r12
 2188 0ece E7 AC CE                		mov.L	r12, 824[r10]
 2189 0ed1 EF 1D                   		mov.L	r1, r13
 2190 0ed3 06 91 AD CD             		and	820[r10], r13
 2191 0ed7 E7 AD CF                		mov.L	r13, 828[r10]
 2192 0eda EF 27                   		mov.L	r2, r7
 2193 0edc 06 91 A7 CE             		and	824[r10], r7
 2194 0ee0 E7 A7 D0                		mov.L	r7, 832[r10]
 2195 0ee3 ED AB CB                		mov.L	812[r10], r11
 2196 0ee6 ED AC CF                		mov.L	828[r10], r12
 2197 0ee9 57 CB                   		or	r12, r11
 2198 0eeb E7 AB D1                		mov.L	r11, 836[r10]
 2199 0eee ED AD CC                		mov.L	816[r10], r13
 2200 0ef1 ED A7 D0                		mov.L	832[r10], r7
 2201 0ef4 57 7D                   		or	r7, r13
 2202 0ef6 E7 AD D2                		mov.L	r13, 840[r10]
 2203 0ef9 ED AC CA                		mov.L	808[r10], r12
 2204 0efc ED AD C9                		mov.L	804[r10], r13
 2205 0eff ED A7 D1                		mov.L	836[r10], r7
 2206 0f02 FF 2B 7D                		add	r7, r13, r11
 2207 0f05 06 A1 02 AC D2          		adc 840[r10],r12
 2208 0f0a EB AC 3C 03             		mov.L	r12, 3312[r10]
 2209 0f0e EB AB 3B 03             		mov.L	r11, 3308[r10]
 2210 0f12 ED A5 0C                		mov.L	48[r10], r5
 2211 0f15 ED A6 0D                		mov.L	52[r10], r6
 2212 0f18 EE AC 3C 03             		mov.L	3312[r10], r12
 2213 0f1c EE AD 3B 03             		mov.L	3308[r10], r13
 2214 0f20 FF 2B 5D                		add	r5, r13, r11
 2215 0f23 FC 0B 6C                		adc	r6, r12
 2216 0f26 E7 AC D4                		mov.L	r12, 848[r10]
 2217 0f29 E7 AB D3                		mov.L	r11, 844[r10]
 2218 0f2c E5 AA D3 0C             		mov.L	844[r10], 48[r10]
 2219 0f30 E5 AA D4 0D             		mov.L	848[r10], 52[r10]
 755:../src/wolfcrypt/src/sha512.c ****         R( 4); R( 5); R( 6); R( 7);
 2220                             		.loc 2 755 9 is_stmt 1 discriminator 16
 2221 0f34 ED A5 04                		mov.L	16[r10], r5
 2222 0f37 ED A6 05                		mov.L	20[r10], r6
 2223 0f3a 66 E3                   		mov.L	#14, r3
 2224 0f3c 66 04                   		mov.L	#0, r4
 2225 0f3e EF 51                   		mov.L	r5, r1
 2226 0f40 EF 62                   		mov.L	r6, r2
 2227 0f42 05 00 00 00             		bsr	_rotrFixed64
 2228 0f46 EF 1B                   		mov.L	r1, r11
 2229 0f48 EF 2C                   		mov.L	r2, r12
 2230 0f4a ED A5 04                		mov.L	16[r10], r5
 2231 0f4d ED A6 05                		mov.L	20[r10], r6
 2232 0f50 75 43 12                		mov.L	#18, r3
 2233 0f53 66 04                   		mov.L	#0, r4
 2234 0f55 EF 51                   		mov.L	r5, r1
 2235 0f57 EF 62                   		mov.L	r6, r2
 2236 0f59 05 00 00 00             		bsr	_rotrFixed64
 2237 0f5d EF 15                   		mov.L	r1, r5
 2238 0f5f EF 26                   		mov.L	r2, r6
 2239 0f61 EF BD                   		mov.L	r11, r13
 2240 0f63 FC 37 5D                		xor	r5, r13
 2241 0f66 E7 AD D5                		mov.L	r13, 852[r10]
 2242 0f69 EF C7                   		mov.L	r12, r7
 2243 0f6b FC 37 67                		xor	r6, r7
 2244 0f6e E7 A7 D6                		mov.L	r7, 856[r10]
 2245 0f71 ED A5 04                		mov.L	16[r10], r5
 2246 0f74 ED A6 05                		mov.L	20[r10], r6
 2247 0f77 75 43 29                		mov.L	#41, r3
 2248 0f7a 66 04                   		mov.L	#0, r4
 2249 0f7c EF 51                   		mov.L	r5, r1
 2250 0f7e EF 62                   		mov.L	r6, r2
 2251 0f80 05 00 00 00             		bsr	_rotrFixed64
 2252 0f84 EF 15                   		mov.L	r1, r5
 2253 0f86 EF 26                   		mov.L	r2, r6
 2254 0f88 ED AB D5                		mov.L	852[r10], r11
 2255 0f8b FC 37 5B                		xor	r5, r11
 2256 0f8e E7 AB D7                		mov.L	r11, 860[r10]
 2257 0f91 ED AC D6                		mov.L	856[r10], r12
 2258 0f94 FC 37 6C                		xor	r6, r12
 2259 0f97 E7 AC D8                		mov.L	r12, 864[r10]
 2260 0f9a ED AB 08                		mov.L	32[r10], r11
 2261 0f9d ED AC 09                		mov.L	36[r10], r12
 2262 0fa0 ED A3 04                		mov.L	16[r10], r3
 2263 0fa3 ED A4 05                		mov.L	20[r10], r4
 2264 0fa6 ED A1 06                		mov.L	24[r10], r1
 2265 0fa9 ED A2 07                		mov.L	28[r10], r2
 2266 0fac ED A5 08                		mov.L	32[r10], r5
 2267 0faf ED A6 09                		mov.L	36[r10], r6
 2268 0fb2 EF 1D                   		mov.L	r1, r13
 2269 0fb4 FC 37 5D                		xor	r5, r13
 2270 0fb7 E7 AD D9                		mov.L	r13, 868[r10]
 2271 0fba EF 27                   		mov.L	r2, r7
 2272 0fbc FC 37 67                		xor	r6, r7
 2273 0fbf E7 A7 DA                		mov.L	r7, 872[r10]
 2274 0fc2 EF 3D                   		mov.L	r3, r13
 2275 0fc4 06 91 AD D9             		and	868[r10], r13
 2276 0fc8 E7 AD DB                		mov.L	r13, 876[r10]
 2277 0fcb EF 47                   		mov.L	r4, r7
 2278 0fcd 06 91 A7 DA             		and	872[r10], r7
 2279 0fd1 E7 A7 DC                		mov.L	r7, 880[r10]
 2280 0fd4 ED AD DB                		mov.L	876[r10], r13
 2281 0fd7 FC 37 BD                		xor	r11, r13
 2282 0fda E7 AD DD                		mov.L	r13, 884[r10]
 2283 0fdd ED A7 DC                		mov.L	880[r10], r7
 2284 0fe0 FC 37 C7                		xor	r12, r7
 2285 0fe3 E7 A7 DE                		mov.L	r7, 888[r10]
 2286 0fe6 ED AC D8                		mov.L	864[r10], r12
 2287 0fe9 ED AD D7                		mov.L	860[r10], r13
 2288 0fec ED A7 DD                		mov.L	884[r10], r7
 2289 0fef FF 2B 7D                		add	r7, r13, r11
 2290 0ff2 06 A1 02 AC DE          		adc 888[r10],r12
 2291 0ff7 E7 AC E0                		mov.L	r12, 896[r10]
 2292 0ffa E7 AB DF                		mov.L	r11, 892[r10]
 2293 0ffd EC A5                   		mov.L	[r10], r5
 2294 0fff 62 45                   		add	#4, r5
 2295 1001 FD C3 54                		shll	#3, r5, r4
 2296 1004 ED A5 01                		mov.L	4[r10], r5
 2297 1007 4B 54                   		add	r5, r4
 2298 1009 EC 45                   		mov.L	[r4], r5
 2299 100b A8 4E                   		mov.L	4[r4], r6
 2300 100d ED AC E0                		mov.L	896[r10], r12
 2301 1010 ED AD DF                		mov.L	892[r10], r13
 2302 1013 FF 2B 5D                		add	r5, r13, r11
 2303 1016 FC 0B 6C                		adc	r6, r12
 2304 1019 E7 AC E2                		mov.L	r12, 904[r10]
 2305 101c E7 AB E1                		mov.L	r11, 900[r10]
 2306 101f EC A5                   		mov.L	[r10], r5
 2307 1021 61 05                   		cmp	#0, r5
 2308 1023 3A 65 01                		beq	.L52
 2309                             		.loc 2 755 9 is_stmt 0 discriminator 1
 2310 1026 ED A5 02                		mov.L	8[r10], r5
 2311 1029 71 55 10                		add	#16, r5
 2312 102c EC 5B                   		mov.L	[r5], r11
 2313 102e ED 5C 01                		mov.L	4[r5], r12
 2314 1031 75 43 13                		mov.L	#19, r3
 2315 1034 66 04                   		mov.L	#0, r4
 2316 1036 EF B1                   		mov.L	r11, r1
 2317 1038 EF C2                   		mov.L	r12, r2
 2318 103a 05 00 00 00             		bsr	_rotrFixed64
 2319 103e EF 18                   		mov.L	r1, r8
 2320 1040 EF 29                   		mov.L	r2, r9
 2321 1042 ED A5 02                		mov.L	8[r10], r5
 2322 1045 71 55 10                		add	#16, r5
 2323 1048 EC 5B                   		mov.L	[r5], r11
 2324 104a ED 5C 01                		mov.L	4[r5], r12
 2325 104d 75 43 3D                		mov.L	#61, r3
 2326 1050 66 04                   		mov.L	#0, r4
 2327 1052 EF B1                   		mov.L	r11, r1
 2328 1054 EF C2                   		mov.L	r12, r2
 2329 1056 05 00 00 00             		bsr	_rotrFixed64
 2330 105a EF 15                   		mov.L	r1, r5
 2331 105c EF 26                   		mov.L	r2, r6
 2332 105e EF 8B                   		mov.L	r8, r11
 2333 1060 FC 37 5B                		xor	r5, r11
 2334 1063 E7 AB E3                		mov.L	r11, 908[r10]
 2335 1066 EF 9C                   		mov.L	r9, r12
 2336 1068 FC 37 6C                		xor	r6, r12
 2337 106b E7 AC E4                		mov.L	r12, 912[r10]
 2338 106e ED A5 02                		mov.L	8[r10], r5
 2339 1071 71 54 10                		add	#16, r5, r4
 2340 1074 EC 45                   		mov.L	[r4], r5
 2341 1076 A8 4E                   		mov.L	4[r4], r6
 2342 1078 FD DA 64                		shll	#26, r6, r4
 2343 107b FD 86 5D                		shlr	#6, r5, r13
 2344 107e E7 AD E5                		mov.L	r13, 916[r10]
 2345 1081 ED A7 E5                		mov.L	916[r10], r7
 2346 1084 57 47                   		or	r4, r7
 2347 1086 E7 A7 E5                		mov.L	r7, 916[r10]
 2348 1089 FD 86 6B                		shlr	#6, r6, r11
 2349 108c E7 AB E6                		mov.L	r11, 920[r10]
 2350 108f ED AC E3                		mov.L	908[r10], r12
 2351 1092 06 A1 0D AC E5          		xor	916[r10].L, r12
 2352 1097 E7 AC E7                		mov.L	r12, 924[r10]
 2353 109a ED AD E4                		mov.L	912[r10], r13
 2354 109d 06 A1 0D AD E6          		xor	920[r10].L, r13
 2355 10a2 E7 AD E8                		mov.L	r13, 928[r10]
 2356 10a5 ED A5 02                		mov.L	8[r10], r5
 2357 10a8 71 54 68                		add	#0x68, r5, r4
 2358 10ab EC 45                   		mov.L	[r4], r5
 2359 10ad A8 4E                   		mov.L	4[r4], r6
 2360 10af ED AB E8                		mov.L	928[r10], r11
 2361 10b2 ED AC E7                		mov.L	924[r10], r12
 2362 10b5 FF 27 5C                		add	r5, r12, r7
 2363 10b8 FC 0B 6B                		adc	r6, r11
 2364 10bb E7 AB EA                		mov.L	r11, 936[r10]
 2365 10be E7 A7 E9                		mov.L	r7, 932[r10]
 2366 10c1 ED A5 02                		mov.L	8[r10], r5
 2367 10c4 71 55 28                		add	#40, r5
 2368 10c7 EC 5B                   		mov.L	[r5], r11
 2369 10c9 ED 5C 01                		mov.L	4[r5], r12
 2370 10cc 66 13                   		mov.L	#1, r3
 2371 10ce 66 04                   		mov.L	#0, r4
 2372 10d0 EF B1                   		mov.L	r11, r1
 2373 10d2 EF C2                   		mov.L	r12, r2
 2374 10d4 05 00 00 00             		bsr	_rotrFixed64
 2375 10d8 EF 18                   		mov.L	r1, r8
 2376 10da EF 29                   		mov.L	r2, r9
 2377 10dc ED A5 02                		mov.L	8[r10], r5
 2378 10df 71 55 28                		add	#40, r5
 2379 10e2 EC 5B                   		mov.L	[r5], r11
 2380 10e4 ED 5C 01                		mov.L	4[r5], r12
 2381 10e7 66 83                   		mov.L	#8, r3
 2382 10e9 66 04                   		mov.L	#0, r4
 2383 10eb EF B1                   		mov.L	r11, r1
 2384 10ed EF C2                   		mov.L	r12, r2
 2385 10ef 05 00 00 00             		bsr	_rotrFixed64
 2386 10f3 EF 15                   		mov.L	r1, r5
 2387 10f5 EF 26                   		mov.L	r2, r6
 2388 10f7 EF 87                   		mov.L	r8, r7
 2389 10f9 FC 37 57                		xor	r5, r7
 2390 10fc E7 A7 EB                		mov.L	r7, 940[r10]
 2391 10ff EF 9B                   		mov.L	r9, r11
 2392 1101 FC 37 6B                		xor	r6, r11
 2393 1104 E7 AB EC                		mov.L	r11, 944[r10]
 2394 1107 ED A5 02                		mov.L	8[r10], r5
 2395 110a 71 54 28                		add	#40, r5, r4
 2396 110d EC 45                   		mov.L	[r4], r5
 2397 110f A8 4E                   		mov.L	4[r4], r6
 2398 1111 FD D9 64                		shll	#25, r6, r4
 2399 1114 FD 87 5C                		shlr	#7, r5, r12
 2400 1117 E7 AC ED                		mov.L	r12, 948[r10]
 2401 111a ED AD ED                		mov.L	948[r10], r13
 2402 111d 57 4D                   		or	r4, r13
 2403 111f E7 AD ED                		mov.L	r13, 948[r10]
 2404 1122 FD 87 67                		shlr	#7, r6, r7
 2405 1125 E7 A7 EE                		mov.L	r7, 952[r10]
 2406 1128 ED AB EB                		mov.L	940[r10], r11
 2407 112b 06 A1 0D AB ED          		xor	948[r10].L, r11
 2408 1130 E7 AB EF                		mov.L	r11, 956[r10]
 2409 1133 ED AC EC                		mov.L	944[r10], r12
 2410 1136 06 A1 0D AC EE          		xor	952[r10].L, r12
 2411 113b E7 AC F0                		mov.L	r12, 960[r10]
 2412 113e ED A7 EA                		mov.L	936[r10], r7
 2413 1141 ED AB E9                		mov.L	932[r10], r11
 2414 1144 ED AC EF                		mov.L	956[r10], r12
 2415 1147 FF 2D CB                		add	r12, r11, r13
 2416 114a 06 A1 02 A7 F0          		adc 960[r10],r7
 2417 114f EB A7 3E 03             		mov.L	r7, 3320[r10]
 2418 1153 EB AD 3D 03             		mov.L	r13, 3316[r10]
 2419 1157 ED A5 02                		mov.L	8[r10], r5
 2420 115a 71 55 20                		add	#32, r5
 2421 115d EC 52                   		mov.L	[r5], r2
 2422 115f A8 5B                   		mov.L	4[r5], r3
 2423 1161 ED A5 02                		mov.L	8[r10], r5
 2424 1164 71 54 20                		add	#32, r5, r4
 2425 1167 EE A7 3E 03             		mov.L	3320[r10], r7
 2426 116b EE AB 3D 03             		mov.L	3316[r10], r11
 2427 116f FF 2D 2B                		add	r2, r11, r13
 2428 1172 FC 0B 37                		adc	r3, r7
 2429 1175 E7 A7 F2                		mov.L	r7, 968[r10]
 2430 1178 E7 AD F1                		mov.L	r13, 964[r10]
 2431 117b E1 A4 F1                		mov.L	964[r10], [r4]
 2432 117e E5 A4 F2 01             		mov.L	968[r10], 4[r4]
 2433 1182 EC 45                   		mov.L	[r4], r5
 2434 1184 A8 4E                   		mov.L	4[r4], r6
 2435 1186 2E 17                   		bra	.L53
 2436                             	.L52:
 2437                             		.loc 2 755 9 discriminator 2
 2438 1188 ED A5 02                		mov.L	8[r10], r5
 2439 118b 71 54 20                		add	#32, r5, r4
 2440 118e ED A5 14                		mov.L	80[r10], r5
 2441 1191 AE 52                   		mov.L	96[r5], r2
 2442 1193 AE 5B                   		mov.L	100[r5], r3
 2443 1195 E3 42                   		mov.L	r2, [r4]
 2444 1197 A0 4B                   		mov.L	r3, 4[r4]
 2445 1199 EC 45                   		mov.L	[r4], r5
 2446 119b A8 4E                   		mov.L	4[r4], r6
 2447                             	.L53:
 2448                             		.loc 2 755 9 discriminator 4
 2449 119d EF 67                   		mov.L	r6, r7
 2450 119f ED AB E1                		mov.L	900[r10], r11
 2451 11a2 FF 2D B5                		add	r11, r5, r13
 2452 11a5 06 A1 02 A7 E2          		adc 904[r10],r7
 2453 11aa EB A7 40 03             		mov.L	r7, 3328[r10]
 2454 11ae EB AD 3F 03             		mov.L	r13, 3324[r10]
 2455 11b2 ED A5 0A                		mov.L	40[r10], r5
 2456 11b5 ED A6 0B                		mov.L	44[r10], r6
 2457 11b8 EE AD 40 03             		mov.L	3328[r10], r13
 2458 11bc EE A7 3F 03             		mov.L	3324[r10], r7
 2459 11c0 FF 2C 57                		add	r5, r7, r12
 2460 11c3 FC 0B 6D                		adc	r6, r13
 2461 11c6 E7 AD F4                		mov.L	r13, 976[r10]
 2462 11c9 E7 AC F3                		mov.L	r12, 972[r10]
 2463 11cc E5 AA F3 0A             		mov.L	972[r10], 40[r10]
 2464 11d0 E5 AA F4 0B             		mov.L	976[r10], 44[r10]
 2465 11d4 ED A3 12                		mov.L	72[r10], r3
 2466 11d7 ED A4 13                		mov.L	76[r10], r4
 2467 11da ED A5 0A                		mov.L	40[r10], r5
 2468 11dd ED A6 0B                		mov.L	44[r10], r6
 2469 11e0 EF 4D                   		mov.L	r4, r13
 2470 11e2 FF 2C 53                		add	r5, r3, r12
 2471 11e5 FC 0B 6D                		adc	r6, r13
 2472 11e8 E7 AD F6                		mov.L	r13, 984[r10]
 2473 11eb E7 AC F5                		mov.L	r12, 980[r10]
 2474 11ee E5 AA F5 12             		mov.L	980[r10], 72[r10]
 2475 11f2 E5 AA F6 13             		mov.L	984[r10], 76[r10]
 2476 11f6 ED A5 0C                		mov.L	48[r10], r5
 2477 11f9 ED A6 0D                		mov.L	52[r10], r6
 2478 11fc 75 43 1C                		mov.L	#28, r3
 2479 11ff 66 04                   		mov.L	#0, r4
 2480 1201 EF 51                   		mov.L	r5, r1
 2481 1203 EF 62                   		mov.L	r6, r2
 2482 1205 05 00 00 00             		bsr	_rotrFixed64
 2483 1209 EF 1B                   		mov.L	r1, r11
 2484 120b EF 2C                   		mov.L	r2, r12
 2485 120d ED A5 0C                		mov.L	48[r10], r5
 2486 1210 ED A6 0D                		mov.L	52[r10], r6
 2487 1213 75 43 22                		mov.L	#34, r3
 2488 1216 66 04                   		mov.L	#0, r4
 2489 1218 EF 51                   		mov.L	r5, r1
 2490 121a EF 62                   		mov.L	r6, r2
 2491 121c 05 00 00 00             		bsr	_rotrFixed64
 2492 1220 EF 15                   		mov.L	r1, r5
 2493 1222 EF 26                   		mov.L	r2, r6
 2494 1224 EF BD                   		mov.L	r11, r13
 2495 1226 FC 37 5D                		xor	r5, r13
 2496 1229 E7 AD F7                		mov.L	r13, 988[r10]
 2497 122c EF C7                   		mov.L	r12, r7
 2498 122e FC 37 67                		xor	r6, r7
 2499 1231 E7 A7 F8                		mov.L	r7, 992[r10]
 2500 1234 ED A5 0C                		mov.L	48[r10], r5
 2501 1237 ED A6 0D                		mov.L	52[r10], r6
 2502 123a 75 43 27                		mov.L	#39, r3
 2503 123d 66 04                   		mov.L	#0, r4
 2504 123f EF 51                   		mov.L	r5, r1
 2505 1241 EF 62                   		mov.L	r6, r2
 2506 1243 05 00 00 00             		bsr	_rotrFixed64
 2507 1247 EF 15                   		mov.L	r1, r5
 2508 1249 EF 26                   		mov.L	r2, r6
 2509 124b ED AB F7                		mov.L	988[r10], r11
 2510 124e FC 37 5B                		xor	r5, r11
 2511 1251 E7 AB F9                		mov.L	r11, 996[r10]
 2512 1254 ED AC F8                		mov.L	992[r10], r12
 2513 1257 FC 37 6C                		xor	r6, r12
 2514 125a E7 AC FA                		mov.L	r12, 1000[r10]
 2515 125d ED A3 0C                		mov.L	48[r10], r3
 2516 1260 ED A4 0D                		mov.L	52[r10], r4
 2517 1263 ED A5 0E                		mov.L	56[r10], r5
 2518 1266 ED A6 0F                		mov.L	60[r10], r6
 2519 1269 FF 4D 53                		and	r5, r3, r13
 2520 126c E7 AD FB                		mov.L	r13, 1004[r10]
 2521 126f FF 47 64                		and	r6, r4, r7
 2522 1272 E7 A7 FC                		mov.L	r7, 1008[r10]
 2523 1275 ED A1 10                		mov.L	64[r10], r1
 2524 1278 ED A2 11                		mov.L	68[r10], r2
 2525 127b ED A3 0C                		mov.L	48[r10], r3
 2526 127e ED A4 0D                		mov.L	52[r10], r4
 2527 1281 ED A5 0E                		mov.L	56[r10], r5
 2528 1284 ED A6 0F                		mov.L	60[r10], r6
 2529 1287 FF 5B 53                		or	r5, r3, r11
 2530 128a E7 AB FD                		mov.L	r11, 1012[r10]
 2531 128d FF 5C 64                		or	r6, r4, r12
 2532 1290 E7 AC FE                		mov.L	r12, 1016[r10]
 2533 1293 EF 1D                   		mov.L	r1, r13
 2534 1295 06 91 AD FD             		and	1012[r10], r13
 2535 1299 E7 AD FF                		mov.L	r13, 1020[r10]
 2536 129c EF 27                   		mov.L	r2, r7
 2537 129e 06 91 A7 FE             		and	1016[r10], r7
 2538 12a2 EB A7 00 01             		mov.L	r7, 1024[r10]
 2539 12a6 ED AB FB                		mov.L	1004[r10], r11
 2540 12a9 ED AC FF                		mov.L	1020[r10], r12
 2541 12ac 57 CB                   		or	r12, r11
 2542 12ae EB AB 01 01             		mov.L	r11, 1028[r10]
 2543 12b2 ED AD FC                		mov.L	1008[r10], r13
 2544 12b5 EE A7 00 01             		mov.L	1024[r10], r7
 2545 12b9 57 7D                   		or	r7, r13
 2546 12bb EB AD 02 01             		mov.L	r13, 1032[r10]
 2547 12bf ED AC FA                		mov.L	1000[r10], r12
 2548 12c2 ED AD F9                		mov.L	996[r10], r13
 2549 12c5 EE A7 01 01             		mov.L	1028[r10], r7
 2550 12c9 FF 2B 7D                		add	r7, r13, r11
 2551 12cc 06 A2 02 AC 02 01       		adc 1032[r10],r12
 2552 12d2 EB AC 42 03             		mov.L	r12, 3336[r10]
 2553 12d6 EB AB 41 03             		mov.L	r11, 3332[r10]
 2554 12da ED A5 0A                		mov.L	40[r10], r5
 2555 12dd ED A6 0B                		mov.L	44[r10], r6
 2556 12e0 EE AC 42 03             		mov.L	3336[r10], r12
 2557 12e4 EE AD 41 03             		mov.L	3332[r10], r13
 2558 12e8 FF 2B 5D                		add	r5, r13, r11
 2559 12eb FC 0B 6C                		adc	r6, r12
 2560 12ee EB AC 04 01             		mov.L	r12, 1040[r10]
 2561 12f2 EB AB 03 01             		mov.L	r11, 1036[r10]
 2562 12f6 E6 AA 03 01 0A          		mov.L	1036[r10], 40[r10]
 2563 12fb E6 AA 04 01 0B          		mov.L	1040[r10], 44[r10]
 2564                             		.loc 2 755 16 is_stmt 1 discriminator 4
 2565 1300 ED A5 12                		mov.L	72[r10], r5
 2566 1303 ED A6 13                		mov.L	76[r10], r6
 2567 1306 66 E3                   		mov.L	#14, r3
 2568 1308 66 04                   		mov.L	#0, r4
 2569 130a EF 51                   		mov.L	r5, r1
 2570 130c EF 62                   		mov.L	r6, r2
 2571 130e 05 00 00 00             		bsr	_rotrFixed64
 2572 1312 EF 1B                   		mov.L	r1, r11
 2573 1314 EF 2C                   		mov.L	r2, r12
 2574 1316 ED A5 12                		mov.L	72[r10], r5
 2575 1319 ED A6 13                		mov.L	76[r10], r6
 2576 131c 75 43 12                		mov.L	#18, r3
 2577 131f 66 04                   		mov.L	#0, r4
 2578 1321 EF 51                   		mov.L	r5, r1
 2579 1323 EF 62                   		mov.L	r6, r2
 2580 1325 05 00 00 00             		bsr	_rotrFixed64
 2581 1329 EF 15                   		mov.L	r1, r5
 2582 132b EF 26                   		mov.L	r2, r6
 2583 132d EF BD                   		mov.L	r11, r13
 2584 132f FC 37 5D                		xor	r5, r13
 2585 1332 EB AD 05 01             		mov.L	r13, 1044[r10]
 2586 1336 EF C7                   		mov.L	r12, r7
 2587 1338 FC 37 67                		xor	r6, r7
 2588 133b EB A7 06 01             		mov.L	r7, 1048[r10]
 2589 133f ED A5 12                		mov.L	72[r10], r5
 2590 1342 ED A6 13                		mov.L	76[r10], r6
 2591 1345 75 43 29                		mov.L	#41, r3
 2592 1348 66 04                   		mov.L	#0, r4
 2593 134a EF 51                   		mov.L	r5, r1
 2594 134c EF 62                   		mov.L	r6, r2
 2595 134e 05 00 00 00             		bsr	_rotrFixed64
 2596 1352 EF 15                   		mov.L	r1, r5
 2597 1354 EF 26                   		mov.L	r2, r6
 2598 1356 EE AB 05 01             		mov.L	1044[r10], r11
 2599 135a FC 37 5B                		xor	r5, r11
 2600 135d EB AB 07 01             		mov.L	r11, 1052[r10]
 2601 1361 EE AC 06 01             		mov.L	1048[r10], r12
 2602 1365 FC 37 6C                		xor	r6, r12
 2603 1368 EB AC 08 01             		mov.L	r12, 1056[r10]
 2604 136c ED AB 06                		mov.L	24[r10], r11
 2605 136f ED AC 07                		mov.L	28[r10], r12
 2606 1372 ED A3 12                		mov.L	72[r10], r3
 2607 1375 ED A4 13                		mov.L	76[r10], r4
 2608 1378 ED A1 04                		mov.L	16[r10], r1
 2609 137b ED A2 05                		mov.L	20[r10], r2
 2610 137e ED A5 06                		mov.L	24[r10], r5
 2611 1381 ED A6 07                		mov.L	28[r10], r6
 2612 1384 EF 1D                   		mov.L	r1, r13
 2613 1386 FC 37 5D                		xor	r5, r13
 2614 1389 EB AD 09 01             		mov.L	r13, 1060[r10]
 2615 138d EF 27                   		mov.L	r2, r7
 2616 138f FC 37 67                		xor	r6, r7
 2617 1392 EB A7 0A 01             		mov.L	r7, 1064[r10]
 2618 1396 EF 3D                   		mov.L	r3, r13
 2619 1398 06 92 AD 09 01          		and	1060[r10], r13
 2620 139d EB AD 0B 01             		mov.L	r13, 1068[r10]
 2621 13a1 EF 47                   		mov.L	r4, r7
 2622 13a3 06 92 A7 0A 01          		and	1064[r10], r7
 2623 13a8 EB A7 0C 01             		mov.L	r7, 1072[r10]
 2624 13ac EE AD 0B 01             		mov.L	1068[r10], r13
 2625 13b0 FC 37 BD                		xor	r11, r13
 2626 13b3 EB AD 0D 01             		mov.L	r13, 1076[r10]
 2627 13b7 EE A7 0C 01             		mov.L	1072[r10], r7
 2628 13bb FC 37 C7                		xor	r12, r7
 2629 13be EB A7 0E 01             		mov.L	r7, 1080[r10]
 2630 13c2 EE AC 08 01             		mov.L	1056[r10], r12
 2631 13c6 EE AD 07 01             		mov.L	1052[r10], r13
 2632 13ca EE A7 0D 01             		mov.L	1076[r10], r7
 2633 13ce FF 2B 7D                		add	r7, r13, r11
 2634 13d1 06 A2 02 AC 0E 01       		adc 1080[r10],r12
 2635 13d7 EB AC 10 01             		mov.L	r12, 1088[r10]
 2636 13db EB AB 0F 01             		mov.L	r11, 1084[r10]
 2637 13df EC A5                   		mov.L	[r10], r5
 2638 13e1 62 55                   		add	#5, r5
 2639 13e3 FD C3 54                		shll	#3, r5, r4
 2640 13e6 ED A5 01                		mov.L	4[r10], r5
 2641 13e9 4B 54                   		add	r5, r4
 2642 13eb EC 45                   		mov.L	[r4], r5
 2643 13ed A8 4E                   		mov.L	4[r4], r6
 2644 13ef EE AC 10 01             		mov.L	1088[r10], r12
 2645 13f3 EE AD 0F 01             		mov.L	1084[r10], r13
 2646 13f7 FF 2B 5D                		add	r5, r13, r11
 2647 13fa FC 0B 6C                		adc	r6, r12
 2648 13fd EB AC 12 01             		mov.L	r12, 1096[r10]
 2649 1401 EB AB 11 01             		mov.L	r11, 1092[r10]
 2650 1405 EC A5                   		mov.L	[r10], r5
 2651 1407 61 05                   		cmp	#0, r5
 2652 1409 3A 89 01                		beq	.L54
 2653                             		.loc 2 755 16 is_stmt 0 discriminator 5
 2654 140c ED A5 02                		mov.L	8[r10], r5
 2655 140f 71 55 18                		add	#24, r5
 2656 1412 EC 5B                   		mov.L	[r5], r11
 2657 1414 ED 5C 01                		mov.L	4[r5], r12
 2658 1417 75 43 13                		mov.L	#19, r3
 2659 141a 66 04                   		mov.L	#0, r4
 2660 141c EF B1                   		mov.L	r11, r1
 2661 141e EF C2                   		mov.L	r12, r2
 2662 1420 05 00 00 00             		bsr	_rotrFixed64
 2663 1424 EF 18                   		mov.L	r1, r8
 2664 1426 EF 29                   		mov.L	r2, r9
 2665 1428 ED A5 02                		mov.L	8[r10], r5
 2666 142b 71 55 18                		add	#24, r5
 2667 142e EC 5B                   		mov.L	[r5], r11
 2668 1430 ED 5C 01                		mov.L	4[r5], r12
 2669 1433 75 43 3D                		mov.L	#61, r3
 2670 1436 66 04                   		mov.L	#0, r4
 2671 1438 EF B1                   		mov.L	r11, r1
 2672 143a EF C2                   		mov.L	r12, r2
 2673 143c 05 00 00 00             		bsr	_rotrFixed64
 2674 1440 EF 15                   		mov.L	r1, r5
 2675 1442 EF 26                   		mov.L	r2, r6
 2676 1444 EF 8B                   		mov.L	r8, r11
 2677 1446 FC 37 5B                		xor	r5, r11
 2678 1449 EB AB 13 01             		mov.L	r11, 1100[r10]
 2679 144d EF 9C                   		mov.L	r9, r12
 2680 144f FC 37 6C                		xor	r6, r12
 2681 1452 EB AC 14 01             		mov.L	r12, 1104[r10]
 2682 1456 ED A5 02                		mov.L	8[r10], r5
 2683 1459 71 54 18                		add	#24, r5, r4
 2684 145c EC 45                   		mov.L	[r4], r5
 2685 145e A8 4E                   		mov.L	4[r4], r6
 2686 1460 FD DA 64                		shll	#26, r6, r4
 2687 1463 FD 86 5D                		shlr	#6, r5, r13
 2688 1466 EB AD 15 01             		mov.L	r13, 1108[r10]
 2689 146a EE A7 15 01             		mov.L	1108[r10], r7
 2690 146e 57 47                   		or	r4, r7
 2691 1470 EB A7 15 01             		mov.L	r7, 1108[r10]
 2692 1474 FD 86 6B                		shlr	#6, r6, r11
 2693 1477 EB AB 16 01             		mov.L	r11, 1112[r10]
 2694 147b EE AC 13 01             		mov.L	1100[r10], r12
 2695 147f 06 A2 0D AC 15 01       		xor	1108[r10].L, r12
 2696 1485 EB AC 17 01             		mov.L	r12, 1116[r10]
 2697 1489 EE AD 14 01             		mov.L	1104[r10], r13
 2698 148d 06 A2 0D AD 16 01       		xor	1112[r10].L, r13
 2699 1493 EB AD 18 01             		mov.L	r13, 1120[r10]
 2700 1497 ED A5 02                		mov.L	8[r10], r5
 2701 149a 71 54 70                		add	#0x70, r5, r4
 2702 149d EC 45                   		mov.L	[r4], r5
 2703 149f A8 4E                   		mov.L	4[r4], r6
 2704 14a1 EE AB 18 01             		mov.L	1120[r10], r11
 2705 14a5 EE AC 17 01             		mov.L	1116[r10], r12
 2706 14a9 FF 27 5C                		add	r5, r12, r7
 2707 14ac FC 0B 6B                		adc	r6, r11
 2708 14af EB AB 1A 01             		mov.L	r11, 1128[r10]
 2709 14b3 EB A7 19 01             		mov.L	r7, 1124[r10]
 2710 14b7 ED A5 02                		mov.L	8[r10], r5
 2711 14ba 71 55 30                		add	#48, r5
 2712 14bd EC 5B                   		mov.L	[r5], r11
 2713 14bf ED 5C 01                		mov.L	4[r5], r12
 2714 14c2 66 13                   		mov.L	#1, r3
 2715 14c4 66 04                   		mov.L	#0, r4
 2716 14c6 EF B1                   		mov.L	r11, r1
 2717 14c8 EF C2                   		mov.L	r12, r2
 2718 14ca 05 00 00 00             		bsr	_rotrFixed64
 2719 14ce EF 18                   		mov.L	r1, r8
 2720 14d0 EF 29                   		mov.L	r2, r9
 2721 14d2 ED A5 02                		mov.L	8[r10], r5
 2722 14d5 71 55 30                		add	#48, r5
 2723 14d8 EC 5B                   		mov.L	[r5], r11
 2724 14da ED 5C 01                		mov.L	4[r5], r12
 2725 14dd 66 83                   		mov.L	#8, r3
 2726 14df 66 04                   		mov.L	#0, r4
 2727 14e1 EF B1                   		mov.L	r11, r1
 2728 14e3 EF C2                   		mov.L	r12, r2
 2729 14e5 05 00 00 00             		bsr	_rotrFixed64
 2730 14e9 EF 15                   		mov.L	r1, r5
 2731 14eb EF 26                   		mov.L	r2, r6
 2732 14ed EF 87                   		mov.L	r8, r7
 2733 14ef FC 37 57                		xor	r5, r7
 2734 14f2 EB A7 1B 01             		mov.L	r7, 1132[r10]
 2735 14f6 EF 9B                   		mov.L	r9, r11
 2736 14f8 FC 37 6B                		xor	r6, r11
 2737 14fb EB AB 1C 01             		mov.L	r11, 1136[r10]
 2738 14ff ED A5 02                		mov.L	8[r10], r5
 2739 1502 71 54 30                		add	#48, r5, r4
 2740 1505 EC 45                   		mov.L	[r4], r5
 2741 1507 A8 4E                   		mov.L	4[r4], r6
 2742 1509 FD D9 64                		shll	#25, r6, r4
 2743 150c FD 87 5C                		shlr	#7, r5, r12
 2744 150f EB AC 1D 01             		mov.L	r12, 1140[r10]
 2745 1513 EE AD 1D 01             		mov.L	1140[r10], r13
 2746 1517 57 4D                   		or	r4, r13
 2747 1519 EB AD 1D 01             		mov.L	r13, 1140[r10]
 2748 151d FD 87 67                		shlr	#7, r6, r7
 2749 1520 EB A7 1E 01             		mov.L	r7, 1144[r10]
 2750 1524 EE AB 1B 01             		mov.L	1132[r10], r11
 2751 1528 06 A2 0D AB 1D 01       		xor	1140[r10].L, r11
 2752 152e EB AB 1F 01             		mov.L	r11, 1148[r10]
 2753 1532 EE AC 1C 01             		mov.L	1136[r10], r12
 2754 1536 06 A2 0D AC 1E 01       		xor	1144[r10].L, r12
 2755 153c EB AC 20 01             		mov.L	r12, 1152[r10]
 2756 1540 EE A7 1A 01             		mov.L	1128[r10], r7
 2757 1544 EE AB 19 01             		mov.L	1124[r10], r11
 2758 1548 EE AC 1F 01             		mov.L	1148[r10], r12
 2759 154c FF 2D CB                		add	r12, r11, r13
 2760 154f 06 A2 02 A7 20 01       		adc 1152[r10],r7
 2761 1555 EB A7 44 03             		mov.L	r7, 3344[r10]
 2762 1559 EB AD 43 03             		mov.L	r13, 3340[r10]
 2763 155d ED A5 02                		mov.L	8[r10], r5
 2764 1560 71 55 28                		add	#40, r5
 2765 1563 EC 52                   		mov.L	[r5], r2
 2766 1565 A8 5B                   		mov.L	4[r5], r3
 2767 1567 ED A5 02                		mov.L	8[r10], r5
 2768 156a 71 54 28                		add	#40, r5, r4
 2769 156d EE A7 44 03             		mov.L	3344[r10], r7
 2770 1571 EE AB 43 03             		mov.L	3340[r10], r11
 2771 1575 FF 2D 2B                		add	r2, r11, r13
 2772 1578 FC 0B 37                		adc	r3, r7
 2773 157b EB A7 22 01             		mov.L	r7, 1160[r10]
 2774 157f EB AD 21 01             		mov.L	r13, 1156[r10]
 2775 1583 E2 A4 21 01             		mov.L	1156[r10], [r4]
 2776 1587 E6 A4 22 01 01          		mov.L	1160[r10], 4[r4]
 2777 158c EC 45                   		mov.L	[r4], r5
 2778 158e A8 4E                   		mov.L	4[r4], r6
 2779 1590 2E 17                   		bra	.L55
 2780                             	.L54:
 2781                             		.loc 2 755 16 discriminator 6
 2782 1592 ED A5 02                		mov.L	8[r10], r5
 2783 1595 71 54 28                		add	#40, r5, r4
 2784 1598 ED A5 14                		mov.L	80[r10], r5
 2785 159b AE D2                   		mov.L	104[r5], r2
 2786 159d AE DB                   		mov.L	108[r5], r3
 2787 159f E3 42                   		mov.L	r2, [r4]
 2788 15a1 A0 4B                   		mov.L	r3, 4[r4]
 2789 15a3 EC 45                   		mov.L	[r4], r5
 2790 15a5 A8 4E                   		mov.L	4[r4], r6
 2791                             	.L55:
 2792                             		.loc 2 755 16 discriminator 8
 2793 15a7 EF 67                   		mov.L	r6, r7
 2794 15a9 EE AB 11 01             		mov.L	1092[r10], r11
 2795 15ad FF 2D B5                		add	r11, r5, r13
 2796 15b0 06 A2 02 A7 12 01       		adc 1096[r10],r7
 2797 15b6 EB A7 46 03             		mov.L	r7, 3352[r10]
 2798 15ba EB AD 45 03             		mov.L	r13, 3348[r10]
 2799 15be ED A5 08                		mov.L	32[r10], r5
 2800 15c1 ED A6 09                		mov.L	36[r10], r6
 2801 15c4 EE AD 46 03             		mov.L	3352[r10], r13
 2802 15c8 EE A7 45 03             		mov.L	3348[r10], r7
 2803 15cc FF 2C 57                		add	r5, r7, r12
 2804 15cf FC 0B 6D                		adc	r6, r13
 2805 15d2 EB AD 24 01             		mov.L	r13, 1168[r10]
 2806 15d6 EB AC 23 01             		mov.L	r12, 1164[r10]
 2807 15da E6 AA 23 01 08          		mov.L	1164[r10], 32[r10]
 2808 15df E6 AA 24 01 09          		mov.L	1168[r10], 36[r10]
 2809 15e4 ED A3 10                		mov.L	64[r10], r3
 2810 15e7 ED A4 11                		mov.L	68[r10], r4
 2811 15ea ED A5 08                		mov.L	32[r10], r5
 2812 15ed ED A6 09                		mov.L	36[r10], r6
 2813 15f0 EF 4D                   		mov.L	r4, r13
 2814 15f2 FF 2C 53                		add	r5, r3, r12
 2815 15f5 FC 0B 6D                		adc	r6, r13
 2816 15f8 EB AD 26 01             		mov.L	r13, 1176[r10]
 2817 15fc EB AC 25 01             		mov.L	r12, 1172[r10]
 2818 1600 E6 AA 25 01 10          		mov.L	1172[r10], 64[r10]
 2819 1605 E6 AA 26 01 11          		mov.L	1176[r10], 68[r10]
 2820 160a ED A5 0A                		mov.L	40[r10], r5
 2821 160d ED A6 0B                		mov.L	44[r10], r6
 2822 1610 75 43 1C                		mov.L	#28, r3
 2823 1613 66 04                   		mov.L	#0, r4
 2824 1615 EF 51                   		mov.L	r5, r1
 2825 1617 EF 62                   		mov.L	r6, r2
 2826 1619 05 00 00 00             		bsr	_rotrFixed64
 2827 161d EF 1B                   		mov.L	r1, r11
 2828 161f EF 2C                   		mov.L	r2, r12
 2829 1621 ED A5 0A                		mov.L	40[r10], r5
 2830 1624 ED A6 0B                		mov.L	44[r10], r6
 2831 1627 75 43 22                		mov.L	#34, r3
 2832 162a 66 04                   		mov.L	#0, r4
 2833 162c EF 51                   		mov.L	r5, r1
 2834 162e EF 62                   		mov.L	r6, r2
 2835 1630 05 00 00 00             		bsr	_rotrFixed64
 2836 1634 EF 15                   		mov.L	r1, r5
 2837 1636 EF 26                   		mov.L	r2, r6
 2838 1638 EF BD                   		mov.L	r11, r13
 2839 163a FC 37 5D                		xor	r5, r13
 2840 163d EB AD 27 01             		mov.L	r13, 1180[r10]
 2841 1641 EF C7                   		mov.L	r12, r7
 2842 1643 FC 37 67                		xor	r6, r7
 2843 1646 EB A7 28 01             		mov.L	r7, 1184[r10]
 2844 164a ED A5 0A                		mov.L	40[r10], r5
 2845 164d ED A6 0B                		mov.L	44[r10], r6
 2846 1650 75 43 27                		mov.L	#39, r3
 2847 1653 66 04                   		mov.L	#0, r4
 2848 1655 EF 51                   		mov.L	r5, r1
 2849 1657 EF 62                   		mov.L	r6, r2
 2850 1659 05 00 00 00             		bsr	_rotrFixed64
 2851 165d EF 15                   		mov.L	r1, r5
 2852 165f EF 26                   		mov.L	r2, r6
 2853 1661 EE AB 27 01             		mov.L	1180[r10], r11
 2854 1665 FC 37 5B                		xor	r5, r11
 2855 1668 EB AB 29 01             		mov.L	r11, 1188[r10]
 2856 166c EE AC 28 01             		mov.L	1184[r10], r12
 2857 1670 FC 37 6C                		xor	r6, r12
 2858 1673 EB AC 2A 01             		mov.L	r12, 1192[r10]
 2859 1677 ED A3 0A                		mov.L	40[r10], r3
 2860 167a ED A4 0B                		mov.L	44[r10], r4
 2861 167d ED A5 0C                		mov.L	48[r10], r5
 2862 1680 ED A6 0D                		mov.L	52[r10], r6
 2863 1683 FF 4D 53                		and	r5, r3, r13
 2864 1686 EB AD 2B 01             		mov.L	r13, 1196[r10]
 2865 168a FF 47 64                		and	r6, r4, r7
 2866 168d EB A7 2C 01             		mov.L	r7, 1200[r10]
 2867 1691 ED A1 0E                		mov.L	56[r10], r1
 2868 1694 ED A2 0F                		mov.L	60[r10], r2
 2869 1697 ED A3 0A                		mov.L	40[r10], r3
 2870 169a ED A4 0B                		mov.L	44[r10], r4
 2871 169d ED A5 0C                		mov.L	48[r10], r5
 2872 16a0 ED A6 0D                		mov.L	52[r10], r6
 2873 16a3 FF 5B 53                		or	r5, r3, r11
 2874 16a6 EB AB 2D 01             		mov.L	r11, 1204[r10]
 2875 16aa FF 5C 64                		or	r6, r4, r12
 2876 16ad EB AC 2E 01             		mov.L	r12, 1208[r10]
 2877 16b1 EF 1D                   		mov.L	r1, r13
 2878 16b3 06 92 AD 2D 01          		and	1204[r10], r13
 2879 16b8 EB AD 2F 01             		mov.L	r13, 1212[r10]
 2880 16bc EF 27                   		mov.L	r2, r7
 2881 16be 06 92 A7 2E 01          		and	1208[r10], r7
 2882 16c3 EB A7 30 01             		mov.L	r7, 1216[r10]
 2883 16c7 EE AB 2B 01             		mov.L	1196[r10], r11
 2884 16cb EE AC 2F 01             		mov.L	1212[r10], r12
 2885 16cf 57 CB                   		or	r12, r11
 2886 16d1 EB AB 31 01             		mov.L	r11, 1220[r10]
 2887 16d5 EE AD 2C 01             		mov.L	1200[r10], r13
 2888 16d9 EE A7 30 01             		mov.L	1216[r10], r7
 2889 16dd 57 7D                   		or	r7, r13
 2890 16df EB AD 32 01             		mov.L	r13, 1224[r10]
 2891 16e3 EE AC 2A 01             		mov.L	1192[r10], r12
 2892 16e7 EE AD 29 01             		mov.L	1188[r10], r13
 2893 16eb EE A7 31 01             		mov.L	1220[r10], r7
 2894 16ef FF 2B 7D                		add	r7, r13, r11
 2895 16f2 06 A2 02 AC 32 01       		adc 1224[r10],r12
 2896 16f8 EB AC 48 03             		mov.L	r12, 3360[r10]
 2897 16fc EB AB 47 03             		mov.L	r11, 3356[r10]
 2898 1700 ED A5 08                		mov.L	32[r10], r5
 2899 1703 ED A6 09                		mov.L	36[r10], r6
 2900 1706 EE AC 48 03             		mov.L	3360[r10], r12
 2901 170a EE AD 47 03             		mov.L	3356[r10], r13
 2902 170e FF 2B 5D                		add	r5, r13, r11
 2903 1711 FC 0B 6C                		adc	r6, r12
 2904 1714 EB AC 34 01             		mov.L	r12, 1232[r10]
 2905 1718 EB AB 33 01             		mov.L	r11, 1228[r10]
 2906 171c E6 AA 33 01 08          		mov.L	1228[r10], 32[r10]
 2907 1721 E6 AA 34 01 09          		mov.L	1232[r10], 36[r10]
 2908                             		.loc 2 755 23 is_stmt 1 discriminator 8
 2909 1726 ED A5 10                		mov.L	64[r10], r5
 2910 1729 ED A6 11                		mov.L	68[r10], r6
 2911 172c 66 E3                   		mov.L	#14, r3
 2912 172e 66 04                   		mov.L	#0, r4
 2913 1730 EF 51                   		mov.L	r5, r1
 2914 1732 EF 62                   		mov.L	r6, r2
 2915 1734 05 00 00 00             		bsr	_rotrFixed64
 2916 1738 EF 1B                   		mov.L	r1, r11
 2917 173a EF 2C                   		mov.L	r2, r12
 2918 173c ED A5 10                		mov.L	64[r10], r5
 2919 173f ED A6 11                		mov.L	68[r10], r6
 2920 1742 75 43 12                		mov.L	#18, r3
 2921 1745 66 04                   		mov.L	#0, r4
 2922 1747 EF 51                   		mov.L	r5, r1
 2923 1749 EF 62                   		mov.L	r6, r2
 2924 174b 05 00 00 00             		bsr	_rotrFixed64
 2925 174f EF 15                   		mov.L	r1, r5
 2926 1751 EF 26                   		mov.L	r2, r6
 2927 1753 EF BD                   		mov.L	r11, r13
 2928 1755 FC 37 5D                		xor	r5, r13
 2929 1758 EB AD 35 01             		mov.L	r13, 1236[r10]
 2930 175c EF C7                   		mov.L	r12, r7
 2931 175e FC 37 67                		xor	r6, r7
 2932 1761 EB A7 36 01             		mov.L	r7, 1240[r10]
 2933 1765 ED A5 10                		mov.L	64[r10], r5
 2934 1768 ED A6 11                		mov.L	68[r10], r6
 2935 176b 75 43 29                		mov.L	#41, r3
 2936 176e 66 04                   		mov.L	#0, r4
 2937 1770 EF 51                   		mov.L	r5, r1
 2938 1772 EF 62                   		mov.L	r6, r2
 2939 1774 05 00 00 00             		bsr	_rotrFixed64
 2940 1778 EF 15                   		mov.L	r1, r5
 2941 177a EF 26                   		mov.L	r2, r6
 2942 177c EE AB 35 01             		mov.L	1236[r10], r11
 2943 1780 FC 37 5B                		xor	r5, r11
 2944 1783 EB AB 37 01             		mov.L	r11, 1244[r10]
 2945 1787 EE AC 36 01             		mov.L	1240[r10], r12
 2946 178b FC 37 6C                		xor	r6, r12
 2947 178e EB AC 38 01             		mov.L	r12, 1248[r10]
 2948 1792 ED AB 04                		mov.L	16[r10], r11
 2949 1795 ED AC 05                		mov.L	20[r10], r12
 2950 1798 ED A3 10                		mov.L	64[r10], r3
 2951 179b ED A4 11                		mov.L	68[r10], r4
 2952 179e ED A1 12                		mov.L	72[r10], r1
 2953 17a1 ED A2 13                		mov.L	76[r10], r2
 2954 17a4 ED A5 04                		mov.L	16[r10], r5
 2955 17a7 ED A6 05                		mov.L	20[r10], r6
 2956 17aa EF 1D                   		mov.L	r1, r13
 2957 17ac FC 37 5D                		xor	r5, r13
 2958 17af EB AD 39 01             		mov.L	r13, 1252[r10]
 2959 17b3 EF 27                   		mov.L	r2, r7
 2960 17b5 FC 37 67                		xor	r6, r7
 2961 17b8 EB A7 3A 01             		mov.L	r7, 1256[r10]
 2962 17bc EF 3D                   		mov.L	r3, r13
 2963 17be 06 92 AD 39 01          		and	1252[r10], r13
 2964 17c3 EB AD 3B 01             		mov.L	r13, 1260[r10]
 2965 17c7 EF 47                   		mov.L	r4, r7
 2966 17c9 06 92 A7 3A 01          		and	1256[r10], r7
 2967 17ce EB A7 3C 01             		mov.L	r7, 1264[r10]
 2968 17d2 EE AD 3B 01             		mov.L	1260[r10], r13
 2969 17d6 FC 37 BD                		xor	r11, r13
 2970 17d9 EB AD 3D 01             		mov.L	r13, 1268[r10]
 2971 17dd EE A7 3C 01             		mov.L	1264[r10], r7
 2972 17e1 FC 37 C7                		xor	r12, r7
 2973 17e4 EB A7 3E 01             		mov.L	r7, 1272[r10]
 2974 17e8 EE AC 38 01             		mov.L	1248[r10], r12
 2975 17ec EE AD 37 01             		mov.L	1244[r10], r13
 2976 17f0 EE A7 3D 01             		mov.L	1268[r10], r7
 2977 17f4 FF 2B 7D                		add	r7, r13, r11
 2978 17f7 06 A2 02 AC 3E 01       		adc 1272[r10],r12
 2979 17fd EB AC 40 01             		mov.L	r12, 1280[r10]
 2980 1801 EB AB 3F 01             		mov.L	r11, 1276[r10]
 2981 1805 EC A5                   		mov.L	[r10], r5
 2982 1807 62 65                   		add	#6, r5
 2983 1809 FD C3 54                		shll	#3, r5, r4
 2984 180c ED A5 01                		mov.L	4[r10], r5
 2985 180f 4B 54                   		add	r5, r4
 2986 1811 EC 45                   		mov.L	[r4], r5
 2987 1813 A8 4E                   		mov.L	4[r4], r6
 2988 1815 EE AC 40 01             		mov.L	1280[r10], r12
 2989 1819 EE AD 3F 01             		mov.L	1276[r10], r13
 2990 181d FF 2B 5D                		add	r5, r13, r11
 2991 1820 FC 0B 6C                		adc	r6, r12
 2992 1823 EB AC 42 01             		mov.L	r12, 1288[r10]
 2993 1827 EB AB 41 01             		mov.L	r11, 1284[r10]
 2994 182b EC A5                   		mov.L	[r10], r5
 2995 182d 61 05                   		cmp	#0, r5
 2996 182f 3A 89 01                		beq	.L56
 2997                             		.loc 2 755 23 is_stmt 0 discriminator 9
 2998 1832 ED A5 02                		mov.L	8[r10], r5
 2999 1835 71 55 20                		add	#32, r5
 3000 1838 EC 5B                   		mov.L	[r5], r11
 3001 183a ED 5C 01                		mov.L	4[r5], r12
 3002 183d 75 43 13                		mov.L	#19, r3
 3003 1840 66 04                   		mov.L	#0, r4
 3004 1842 EF B1                   		mov.L	r11, r1
 3005 1844 EF C2                   		mov.L	r12, r2
 3006 1846 05 00 00 00             		bsr	_rotrFixed64
 3007 184a EF 18                   		mov.L	r1, r8
 3008 184c EF 29                   		mov.L	r2, r9
 3009 184e ED A5 02                		mov.L	8[r10], r5
 3010 1851 71 55 20                		add	#32, r5
 3011 1854 EC 5B                   		mov.L	[r5], r11
 3012 1856 ED 5C 01                		mov.L	4[r5], r12
 3013 1859 75 43 3D                		mov.L	#61, r3
 3014 185c 66 04                   		mov.L	#0, r4
 3015 185e EF B1                   		mov.L	r11, r1
 3016 1860 EF C2                   		mov.L	r12, r2
 3017 1862 05 00 00 00             		bsr	_rotrFixed64
 3018 1866 EF 15                   		mov.L	r1, r5
 3019 1868 EF 26                   		mov.L	r2, r6
 3020 186a EF 8B                   		mov.L	r8, r11
 3021 186c FC 37 5B                		xor	r5, r11
 3022 186f EB AB 43 01             		mov.L	r11, 1292[r10]
 3023 1873 EF 9C                   		mov.L	r9, r12
 3024 1875 FC 37 6C                		xor	r6, r12
 3025 1878 EB AC 44 01             		mov.L	r12, 1296[r10]
 3026 187c ED A5 02                		mov.L	8[r10], r5
 3027 187f 71 54 20                		add	#32, r5, r4
 3028 1882 EC 45                   		mov.L	[r4], r5
 3029 1884 A8 4E                   		mov.L	4[r4], r6
 3030 1886 FD DA 64                		shll	#26, r6, r4
 3031 1889 FD 86 5D                		shlr	#6, r5, r13
 3032 188c EB AD 45 01             		mov.L	r13, 1300[r10]
 3033 1890 EE A7 45 01             		mov.L	1300[r10], r7
 3034 1894 57 47                   		or	r4, r7
 3035 1896 EB A7 45 01             		mov.L	r7, 1300[r10]
 3036 189a FD 86 6B                		shlr	#6, r6, r11
 3037 189d EB AB 46 01             		mov.L	r11, 1304[r10]
 3038 18a1 EE AC 43 01             		mov.L	1292[r10], r12
 3039 18a5 06 A2 0D AC 45 01       		xor	1300[r10].L, r12
 3040 18ab EB AC 47 01             		mov.L	r12, 1308[r10]
 3041 18af EE AD 44 01             		mov.L	1296[r10], r13
 3042 18b3 06 A2 0D AD 46 01       		xor	1304[r10].L, r13
 3043 18b9 EB AD 48 01             		mov.L	r13, 1312[r10]
 3044 18bd ED A5 02                		mov.L	8[r10], r5
 3045 18c0 71 54 78                		add	#0x78, r5, r4
 3046 18c3 EC 45                   		mov.L	[r4], r5
 3047 18c5 A8 4E                   		mov.L	4[r4], r6
 3048 18c7 EE AB 48 01             		mov.L	1312[r10], r11
 3049 18cb EE AC 47 01             		mov.L	1308[r10], r12
 3050 18cf FF 27 5C                		add	r5, r12, r7
 3051 18d2 FC 0B 6B                		adc	r6, r11
 3052 18d5 EB AB 4A 01             		mov.L	r11, 1320[r10]
 3053 18d9 EB A7 49 01             		mov.L	r7, 1316[r10]
 3054 18dd ED A5 02                		mov.L	8[r10], r5
 3055 18e0 71 55 38                		add	#56, r5
 3056 18e3 EC 5B                   		mov.L	[r5], r11
 3057 18e5 ED 5C 01                		mov.L	4[r5], r12
 3058 18e8 66 13                   		mov.L	#1, r3
 3059 18ea 66 04                   		mov.L	#0, r4
 3060 18ec EF B1                   		mov.L	r11, r1
 3061 18ee EF C2                   		mov.L	r12, r2
 3062 18f0 05 00 00 00             		bsr	_rotrFixed64
 3063 18f4 EF 18                   		mov.L	r1, r8
 3064 18f6 EF 29                   		mov.L	r2, r9
 3065 18f8 ED A5 02                		mov.L	8[r10], r5
 3066 18fb 71 55 38                		add	#56, r5
 3067 18fe EC 5B                   		mov.L	[r5], r11
 3068 1900 ED 5C 01                		mov.L	4[r5], r12
 3069 1903 66 83                   		mov.L	#8, r3
 3070 1905 66 04                   		mov.L	#0, r4
 3071 1907 EF B1                   		mov.L	r11, r1
 3072 1909 EF C2                   		mov.L	r12, r2
 3073 190b 05 00 00 00             		bsr	_rotrFixed64
 3074 190f EF 15                   		mov.L	r1, r5
 3075 1911 EF 26                   		mov.L	r2, r6
 3076 1913 EF 87                   		mov.L	r8, r7
 3077 1915 FC 37 57                		xor	r5, r7
 3078 1918 EB A7 4B 01             		mov.L	r7, 1324[r10]
 3079 191c EF 9B                   		mov.L	r9, r11
 3080 191e FC 37 6B                		xor	r6, r11
 3081 1921 EB AB 4C 01             		mov.L	r11, 1328[r10]
 3082 1925 ED A5 02                		mov.L	8[r10], r5
 3083 1928 71 54 38                		add	#56, r5, r4
 3084 192b EC 45                   		mov.L	[r4], r5
 3085 192d A8 4E                   		mov.L	4[r4], r6
 3086 192f FD D9 64                		shll	#25, r6, r4
 3087 1932 FD 87 5C                		shlr	#7, r5, r12
 3088 1935 EB AC 4D 01             		mov.L	r12, 1332[r10]
 3089 1939 EE AD 4D 01             		mov.L	1332[r10], r13
 3090 193d 57 4D                   		or	r4, r13
 3091 193f EB AD 4D 01             		mov.L	r13, 1332[r10]
 3092 1943 FD 87 67                		shlr	#7, r6, r7
 3093 1946 EB A7 4E 01             		mov.L	r7, 1336[r10]
 3094 194a EE AB 4B 01             		mov.L	1324[r10], r11
 3095 194e 06 A2 0D AB 4D 01       		xor	1332[r10].L, r11
 3096 1954 EB AB 4F 01             		mov.L	r11, 1340[r10]
 3097 1958 EE AC 4C 01             		mov.L	1328[r10], r12
 3098 195c 06 A2 0D AC 4E 01       		xor	1336[r10].L, r12
 3099 1962 EB AC 50 01             		mov.L	r12, 1344[r10]
 3100 1966 EE A7 4A 01             		mov.L	1320[r10], r7
 3101 196a EE AB 49 01             		mov.L	1316[r10], r11
 3102 196e EE AC 4F 01             		mov.L	1340[r10], r12
 3103 1972 FF 2D CB                		add	r12, r11, r13
 3104 1975 06 A2 02 A7 50 01       		adc 1344[r10],r7
 3105 197b EB A7 4A 03             		mov.L	r7, 3368[r10]
 3106 197f EB AD 49 03             		mov.L	r13, 3364[r10]
 3107 1983 ED A5 02                		mov.L	8[r10], r5
 3108 1986 71 55 30                		add	#48, r5
 3109 1989 EC 52                   		mov.L	[r5], r2
 3110 198b A8 5B                   		mov.L	4[r5], r3
 3111 198d ED A5 02                		mov.L	8[r10], r5
 3112 1990 71 54 30                		add	#48, r5, r4
 3113 1993 EE A7 4A 03             		mov.L	3368[r10], r7
 3114 1997 EE AB 49 03             		mov.L	3364[r10], r11
 3115 199b FF 2D 2B                		add	r2, r11, r13
 3116 199e FC 0B 37                		adc	r3, r7
 3117 19a1 EB A7 52 01             		mov.L	r7, 1352[r10]
 3118 19a5 EB AD 51 01             		mov.L	r13, 1348[r10]
 3119 19a9 E2 A4 51 01             		mov.L	1348[r10], [r4]
 3120 19ad E6 A4 52 01 01          		mov.L	1352[r10], 4[r4]
 3121 19b2 EC 45                   		mov.L	[r4], r5
 3122 19b4 A8 4E                   		mov.L	4[r4], r6
 3123 19b6 2E 17                   		bra	.L57
 3124                             	.L56:
 3125                             		.loc 2 755 23 discriminator 10
 3126 19b8 ED A5 02                		mov.L	8[r10], r5
 3127 19bb 71 54 30                		add	#48, r5, r4
 3128 19be ED A5 14                		mov.L	80[r10], r5
 3129 19c1 AF 52                   		mov.L	112[r5], r2
 3130 19c3 AF 5B                   		mov.L	116[r5], r3
 3131 19c5 E3 42                   		mov.L	r2, [r4]
 3132 19c7 A0 4B                   		mov.L	r3, 4[r4]
 3133 19c9 EC 45                   		mov.L	[r4], r5
 3134 19cb A8 4E                   		mov.L	4[r4], r6
 3135                             	.L57:
 3136                             		.loc 2 755 23 discriminator 12
 3137 19cd EF 67                   		mov.L	r6, r7
 3138 19cf EE AB 41 01             		mov.L	1284[r10], r11
 3139 19d3 FF 2D B5                		add	r11, r5, r13
 3140 19d6 06 A2 02 A7 42 01       		adc 1288[r10],r7
 3141 19dc EB A7 4C 03             		mov.L	r7, 3376[r10]
 3142 19e0 EB AD 4B 03             		mov.L	r13, 3372[r10]
 3143 19e4 ED A5 06                		mov.L	24[r10], r5
 3144 19e7 ED A6 07                		mov.L	28[r10], r6
 3145 19ea EE AD 4C 03             		mov.L	3376[r10], r13
 3146 19ee EE A7 4B 03             		mov.L	3372[r10], r7
 3147 19f2 FF 2C 57                		add	r5, r7, r12
 3148 19f5 FC 0B 6D                		adc	r6, r13
 3149 19f8 EB AD 54 01             		mov.L	r13, 1360[r10]
 3150 19fc EB AC 53 01             		mov.L	r12, 1356[r10]
 3151 1a00 E6 AA 53 01 06          		mov.L	1356[r10], 24[r10]
 3152 1a05 E6 AA 54 01 07          		mov.L	1360[r10], 28[r10]
 3153 1a0a ED A3 0E                		mov.L	56[r10], r3
 3154 1a0d ED A4 0F                		mov.L	60[r10], r4
 3155 1a10 ED A5 06                		mov.L	24[r10], r5
 3156 1a13 ED A6 07                		mov.L	28[r10], r6
 3157 1a16 EF 4D                   		mov.L	r4, r13
 3158 1a18 FF 2C 53                		add	r5, r3, r12
 3159 1a1b FC 0B 6D                		adc	r6, r13
 3160 1a1e EB AD 56 01             		mov.L	r13, 1368[r10]
 3161 1a22 EB AC 55 01             		mov.L	r12, 1364[r10]
 3162 1a26 E6 AA 55 01 0E          		mov.L	1364[r10], 56[r10]
 3163 1a2b E6 AA 56 01 0F          		mov.L	1368[r10], 60[r10]
 3164 1a30 ED A5 08                		mov.L	32[r10], r5
 3165 1a33 ED A6 09                		mov.L	36[r10], r6
 3166 1a36 75 43 1C                		mov.L	#28, r3
 3167 1a39 66 04                   		mov.L	#0, r4
 3168 1a3b EF 51                   		mov.L	r5, r1
 3169 1a3d EF 62                   		mov.L	r6, r2
 3170 1a3f 05 00 00 00             		bsr	_rotrFixed64
 3171 1a43 EF 1B                   		mov.L	r1, r11
 3172 1a45 EF 2C                   		mov.L	r2, r12
 3173 1a47 ED A5 08                		mov.L	32[r10], r5
 3174 1a4a ED A6 09                		mov.L	36[r10], r6
 3175 1a4d 75 43 22                		mov.L	#34, r3
 3176 1a50 66 04                   		mov.L	#0, r4
 3177 1a52 EF 51                   		mov.L	r5, r1
 3178 1a54 EF 62                   		mov.L	r6, r2
 3179 1a56 05 00 00 00             		bsr	_rotrFixed64
 3180 1a5a EF 15                   		mov.L	r1, r5
 3181 1a5c EF 26                   		mov.L	r2, r6
 3182 1a5e EF BD                   		mov.L	r11, r13
 3183 1a60 FC 37 5D                		xor	r5, r13
 3184 1a63 EB AD 57 01             		mov.L	r13, 1372[r10]
 3185 1a67 EF C7                   		mov.L	r12, r7
 3186 1a69 FC 37 67                		xor	r6, r7
 3187 1a6c EB A7 58 01             		mov.L	r7, 1376[r10]
 3188 1a70 ED A5 08                		mov.L	32[r10], r5
 3189 1a73 ED A6 09                		mov.L	36[r10], r6
 3190 1a76 75 43 27                		mov.L	#39, r3
 3191 1a79 66 04                   		mov.L	#0, r4
 3192 1a7b EF 51                   		mov.L	r5, r1
 3193 1a7d EF 62                   		mov.L	r6, r2
 3194 1a7f 05 00 00 00             		bsr	_rotrFixed64
 3195 1a83 EF 15                   		mov.L	r1, r5
 3196 1a85 EF 26                   		mov.L	r2, r6
 3197 1a87 EE AB 57 01             		mov.L	1372[r10], r11
 3198 1a8b FC 37 5B                		xor	r5, r11
 3199 1a8e EB AB 59 01             		mov.L	r11, 1380[r10]
 3200 1a92 EE AC 58 01             		mov.L	1376[r10], r12
 3201 1a96 FC 37 6C                		xor	r6, r12
 3202 1a99 EB AC 5A 01             		mov.L	r12, 1384[r10]
 3203 1a9d ED A3 08                		mov.L	32[r10], r3
 3204 1aa0 ED A4 09                		mov.L	36[r10], r4
 3205 1aa3 ED A5 0A                		mov.L	40[r10], r5
 3206 1aa6 ED A6 0B                		mov.L	44[r10], r6
 3207 1aa9 FF 4D 53                		and	r5, r3, r13
 3208 1aac EB AD 5B 01             		mov.L	r13, 1388[r10]
 3209 1ab0 FF 47 64                		and	r6, r4, r7
 3210 1ab3 EB A7 5C 01             		mov.L	r7, 1392[r10]
 3211 1ab7 ED A1 0C                		mov.L	48[r10], r1
 3212 1aba ED A2 0D                		mov.L	52[r10], r2
 3213 1abd ED A3 08                		mov.L	32[r10], r3
 3214 1ac0 ED A4 09                		mov.L	36[r10], r4
 3215 1ac3 ED A5 0A                		mov.L	40[r10], r5
 3216 1ac6 ED A6 0B                		mov.L	44[r10], r6
 3217 1ac9 FF 5B 53                		or	r5, r3, r11
 3218 1acc EB AB 5D 01             		mov.L	r11, 1396[r10]
 3219 1ad0 FF 5C 64                		or	r6, r4, r12
 3220 1ad3 EB AC 5E 01             		mov.L	r12, 1400[r10]
 3221 1ad7 EF 1D                   		mov.L	r1, r13
 3222 1ad9 06 92 AD 5D 01          		and	1396[r10], r13
 3223 1ade EB AD 5F 01             		mov.L	r13, 1404[r10]
 3224 1ae2 EF 27                   		mov.L	r2, r7
 3225 1ae4 06 92 A7 5E 01          		and	1400[r10], r7
 3226 1ae9 EB A7 60 01             		mov.L	r7, 1408[r10]
 3227 1aed EE AB 5B 01             		mov.L	1388[r10], r11
 3228 1af1 EE AC 5F 01             		mov.L	1404[r10], r12
 3229 1af5 57 CB                   		or	r12, r11
 3230 1af7 EB AB 61 01             		mov.L	r11, 1412[r10]
 3231 1afb EE AD 5C 01             		mov.L	1392[r10], r13
 3232 1aff EE A7 60 01             		mov.L	1408[r10], r7
 3233 1b03 57 7D                   		or	r7, r13
 3234 1b05 EB AD 62 01             		mov.L	r13, 1416[r10]
 3235 1b09 EE AC 5A 01             		mov.L	1384[r10], r12
 3236 1b0d EE AD 59 01             		mov.L	1380[r10], r13
 3237 1b11 EE A7 61 01             		mov.L	1412[r10], r7
 3238 1b15 FF 2B 7D                		add	r7, r13, r11
 3239 1b18 06 A2 02 AC 62 01       		adc 1416[r10],r12
 3240 1b1e EB AC 4E 03             		mov.L	r12, 3384[r10]
 3241 1b22 EB AB 4D 03             		mov.L	r11, 3380[r10]
 3242 1b26 ED A5 06                		mov.L	24[r10], r5
 3243 1b29 ED A6 07                		mov.L	28[r10], r6
 3244 1b2c EE AC 4E 03             		mov.L	3384[r10], r12
 3245 1b30 EE AD 4D 03             		mov.L	3380[r10], r13
 3246 1b34 FF 2B 5D                		add	r5, r13, r11
 3247 1b37 FC 0B 6C                		adc	r6, r12
 3248 1b3a EB AC 64 01             		mov.L	r12, 1424[r10]
 3249 1b3e EB AB 63 01             		mov.L	r11, 1420[r10]
 3250 1b42 E6 AA 63 01 06          		mov.L	1420[r10], 24[r10]
 3251 1b47 E6 AA 64 01 07          		mov.L	1424[r10], 28[r10]
 3252                             		.loc 2 755 30 is_stmt 1 discriminator 12
 3253 1b4c ED A5 0E                		mov.L	56[r10], r5
 3254 1b4f ED A6 0F                		mov.L	60[r10], r6
 3255 1b52 66 E3                   		mov.L	#14, r3
 3256 1b54 66 04                   		mov.L	#0, r4
 3257 1b56 EF 51                   		mov.L	r5, r1
 3258 1b58 EF 62                   		mov.L	r6, r2
 3259 1b5a 05 00 00 00             		bsr	_rotrFixed64
 3260 1b5e EF 1B                   		mov.L	r1, r11
 3261 1b60 EF 2C                   		mov.L	r2, r12
 3262 1b62 ED A5 0E                		mov.L	56[r10], r5
 3263 1b65 ED A6 0F                		mov.L	60[r10], r6
 3264 1b68 75 43 12                		mov.L	#18, r3
 3265 1b6b 66 04                   		mov.L	#0, r4
 3266 1b6d EF 51                   		mov.L	r5, r1
 3267 1b6f EF 62                   		mov.L	r6, r2
 3268 1b71 05 00 00 00             		bsr	_rotrFixed64
 3269 1b75 EF 15                   		mov.L	r1, r5
 3270 1b77 EF 26                   		mov.L	r2, r6
 3271 1b79 EF BD                   		mov.L	r11, r13
 3272 1b7b FC 37 5D                		xor	r5, r13
 3273 1b7e EB AD 65 01             		mov.L	r13, 1428[r10]
 3274 1b82 EF C7                   		mov.L	r12, r7
 3275 1b84 FC 37 67                		xor	r6, r7
 3276 1b87 EB A7 66 01             		mov.L	r7, 1432[r10]
 3277 1b8b ED A5 0E                		mov.L	56[r10], r5
 3278 1b8e ED A6 0F                		mov.L	60[r10], r6
 3279 1b91 75 43 29                		mov.L	#41, r3
 3280 1b94 66 04                   		mov.L	#0, r4
 3281 1b96 EF 51                   		mov.L	r5, r1
 3282 1b98 EF 62                   		mov.L	r6, r2
 3283 1b9a 05 00 00 00             		bsr	_rotrFixed64
 3284 1b9e EF 15                   		mov.L	r1, r5
 3285 1ba0 EF 26                   		mov.L	r2, r6
 3286 1ba2 EE AB 65 01             		mov.L	1428[r10], r11
 3287 1ba6 FC 37 5B                		xor	r5, r11
 3288 1ba9 EB AB 67 01             		mov.L	r11, 1436[r10]
 3289 1bad EE AC 66 01             		mov.L	1432[r10], r12
 3290 1bb1 FC 37 6C                		xor	r6, r12
 3291 1bb4 EB AC 68 01             		mov.L	r12, 1440[r10]
 3292 1bb8 ED AB 12                		mov.L	72[r10], r11
 3293 1bbb ED AC 13                		mov.L	76[r10], r12
 3294 1bbe ED A3 0E                		mov.L	56[r10], r3
 3295 1bc1 ED A4 0F                		mov.L	60[r10], r4
 3296 1bc4 ED A1 10                		mov.L	64[r10], r1
 3297 1bc7 ED A2 11                		mov.L	68[r10], r2
 3298 1bca ED A5 12                		mov.L	72[r10], r5
 3299 1bcd ED A6 13                		mov.L	76[r10], r6
 3300 1bd0 EF 1D                   		mov.L	r1, r13
 3301 1bd2 FC 37 5D                		xor	r5, r13
 3302 1bd5 EB AD 69 01             		mov.L	r13, 1444[r10]
 3303 1bd9 EF 27                   		mov.L	r2, r7
 3304 1bdb FC 37 67                		xor	r6, r7
 3305 1bde EB A7 6A 01             		mov.L	r7, 1448[r10]
 3306 1be2 EF 3D                   		mov.L	r3, r13
 3307 1be4 06 92 AD 69 01          		and	1444[r10], r13
 3308 1be9 EB AD 6B 01             		mov.L	r13, 1452[r10]
 3309 1bed EF 47                   		mov.L	r4, r7
 3310 1bef 06 92 A7 6A 01          		and	1448[r10], r7
 3311 1bf4 EB A7 6C 01             		mov.L	r7, 1456[r10]
 3312 1bf8 EE AD 6B 01             		mov.L	1452[r10], r13
 3313 1bfc FC 37 BD                		xor	r11, r13
 3314 1bff EB AD 6D 01             		mov.L	r13, 1460[r10]
 3315 1c03 EE A7 6C 01             		mov.L	1456[r10], r7
 3316 1c07 FC 37 C7                		xor	r12, r7
 3317 1c0a EB A7 6E 01             		mov.L	r7, 1464[r10]
 3318 1c0e EE AC 68 01             		mov.L	1440[r10], r12
 3319 1c12 EE AD 67 01             		mov.L	1436[r10], r13
 3320 1c16 EE A7 6D 01             		mov.L	1460[r10], r7
 3321 1c1a FF 2B 7D                		add	r7, r13, r11
 3322 1c1d 06 A2 02 AC 6E 01       		adc 1464[r10],r12
 3323 1c23 EB AC 70 01             		mov.L	r12, 1472[r10]
 3324 1c27 EB AB 6F 01             		mov.L	r11, 1468[r10]
 3325 1c2b EC A5                   		mov.L	[r10], r5
 3326 1c2d 62 75                   		add	#7, r5
 3327 1c2f FD C3 54                		shll	#3, r5, r4
 3328 1c32 ED A5 01                		mov.L	4[r10], r5
 3329 1c35 4B 54                   		add	r5, r4
 3330 1c37 EC 45                   		mov.L	[r4], r5
 3331 1c39 A8 4E                   		mov.L	4[r4], r6
 3332 1c3b EE AC 70 01             		mov.L	1472[r10], r12
 3333 1c3f EE AD 6F 01             		mov.L	1468[r10], r13
 3334 1c43 FF 2B 5D                		add	r5, r13, r11
 3335 1c46 FC 0B 6C                		adc	r6, r12
 3336 1c49 EB AC 72 01             		mov.L	r12, 1480[r10]
 3337 1c4d EB AB 71 01             		mov.L	r11, 1476[r10]
 3338 1c51 EC A5                   		mov.L	[r10], r5
 3339 1c53 61 05                   		cmp	#0, r5
 3340 1c55 3A 86 01                		beq	.L58
 3341                             		.loc 2 755 30 is_stmt 0 discriminator 13
 3342 1c58 ED A5 02                		mov.L	8[r10], r5
 3343 1c5b 71 55 28                		add	#40, r5
 3344 1c5e EC 5B                   		mov.L	[r5], r11
 3345 1c60 ED 5C 01                		mov.L	4[r5], r12
 3346 1c63 75 43 13                		mov.L	#19, r3
 3347 1c66 66 04                   		mov.L	#0, r4
 3348 1c68 EF B1                   		mov.L	r11, r1
 3349 1c6a EF C2                   		mov.L	r12, r2
 3350 1c6c 05 00 00 00             		bsr	_rotrFixed64
 3351 1c70 EF 18                   		mov.L	r1, r8
 3352 1c72 EF 29                   		mov.L	r2, r9
 3353 1c74 ED A5 02                		mov.L	8[r10], r5
 3354 1c77 71 55 28                		add	#40, r5
 3355 1c7a EC 5B                   		mov.L	[r5], r11
 3356 1c7c ED 5C 01                		mov.L	4[r5], r12
 3357 1c7f 75 43 3D                		mov.L	#61, r3
 3358 1c82 66 04                   		mov.L	#0, r4
 3359 1c84 EF B1                   		mov.L	r11, r1
 3360 1c86 EF C2                   		mov.L	r12, r2
 3361 1c88 05 00 00 00             		bsr	_rotrFixed64
 3362 1c8c EF 15                   		mov.L	r1, r5
 3363 1c8e EF 26                   		mov.L	r2, r6
 3364 1c90 EF 8B                   		mov.L	r8, r11
 3365 1c92 FC 37 5B                		xor	r5, r11
 3366 1c95 EB AB 73 01             		mov.L	r11, 1484[r10]
 3367 1c99 EF 9C                   		mov.L	r9, r12
 3368 1c9b FC 37 6C                		xor	r6, r12
 3369 1c9e EB AC 74 01             		mov.L	r12, 1488[r10]
 3370 1ca2 ED A5 02                		mov.L	8[r10], r5
 3371 1ca5 71 54 28                		add	#40, r5, r4
 3372 1ca8 EC 45                   		mov.L	[r4], r5
 3373 1caa A8 4E                   		mov.L	4[r4], r6
 3374 1cac FD DA 64                		shll	#26, r6, r4
 3375 1caf FD 86 5D                		shlr	#6, r5, r13
 3376 1cb2 EB AD 75 01             		mov.L	r13, 1492[r10]
 3377 1cb6 EE A7 75 01             		mov.L	1492[r10], r7
 3378 1cba 57 47                   		or	r4, r7
 3379 1cbc EB A7 75 01             		mov.L	r7, 1492[r10]
 3380 1cc0 FD 86 6B                		shlr	#6, r6, r11
 3381 1cc3 EB AB 76 01             		mov.L	r11, 1496[r10]
 3382 1cc7 EE AC 73 01             		mov.L	1484[r10], r12
 3383 1ccb 06 A2 0D AC 75 01       		xor	1492[r10].L, r12
 3384 1cd1 EB AC 77 01             		mov.L	r12, 1500[r10]
 3385 1cd5 EE AD 74 01             		mov.L	1488[r10], r13
 3386 1cd9 06 A2 0D AD 76 01       		xor	1496[r10].L, r13
 3387 1cdf EB AD 78 01             		mov.L	r13, 1504[r10]
 3388 1ce3 ED A4 02                		mov.L	8[r10], r4
 3389 1ce6 EC 45                   		mov.L	[r4], r5
 3390 1ce8 A8 4E                   		mov.L	4[r4], r6
 3391 1cea EE AB 78 01             		mov.L	1504[r10], r11
 3392 1cee EE AC 77 01             		mov.L	1500[r10], r12
 3393 1cf2 FF 27 5C                		add	r5, r12, r7
 3394 1cf5 FC 0B 6B                		adc	r6, r11
 3395 1cf8 EB AB 7A 01             		mov.L	r11, 1512[r10]
 3396 1cfc EB A7 79 01             		mov.L	r7, 1508[r10]
 3397 1d00 ED A5 02                		mov.L	8[r10], r5
 3398 1d03 71 55 40                		add	#0x40, r5
 3399 1d06 EC 5B                   		mov.L	[r5], r11
 3400 1d08 ED 5C 01                		mov.L	4[r5], r12
 3401 1d0b 66 13                   		mov.L	#1, r3
 3402 1d0d 66 04                   		mov.L	#0, r4
 3403 1d0f EF B1                   		mov.L	r11, r1
 3404 1d11 EF C2                   		mov.L	r12, r2
 3405 1d13 05 00 00 00             		bsr	_rotrFixed64
 3406 1d17 EF 18                   		mov.L	r1, r8
 3407 1d19 EF 29                   		mov.L	r2, r9
 3408 1d1b ED A5 02                		mov.L	8[r10], r5
 3409 1d1e 71 55 40                		add	#0x40, r5
 3410 1d21 EC 5B                   		mov.L	[r5], r11
 3411 1d23 ED 5C 01                		mov.L	4[r5], r12
 3412 1d26 66 83                   		mov.L	#8, r3
 3413 1d28 66 04                   		mov.L	#0, r4
 3414 1d2a EF B1                   		mov.L	r11, r1
 3415 1d2c EF C2                   		mov.L	r12, r2
 3416 1d2e 05 00 00 00             		bsr	_rotrFixed64
 3417 1d32 EF 15                   		mov.L	r1, r5
 3418 1d34 EF 26                   		mov.L	r2, r6
 3419 1d36 EF 87                   		mov.L	r8, r7
 3420 1d38 FC 37 57                		xor	r5, r7
 3421 1d3b EB A7 7B 01             		mov.L	r7, 1516[r10]
 3422 1d3f EF 9B                   		mov.L	r9, r11
 3423 1d41 FC 37 6B                		xor	r6, r11
 3424 1d44 EB AB 7C 01             		mov.L	r11, 1520[r10]
 3425 1d48 ED A5 02                		mov.L	8[r10], r5
 3426 1d4b 71 54 40                		add	#0x40, r5, r4
 3427 1d4e EC 45                   		mov.L	[r4], r5
 3428 1d50 A8 4E                   		mov.L	4[r4], r6
 3429 1d52 FD D9 64                		shll	#25, r6, r4
 3430 1d55 FD 87 5C                		shlr	#7, r5, r12
 3431 1d58 EB AC 7D 01             		mov.L	r12, 1524[r10]
 3432 1d5c EE AD 7D 01             		mov.L	1524[r10], r13
 3433 1d60 57 4D                   		or	r4, r13
 3434 1d62 EB AD 7D 01             		mov.L	r13, 1524[r10]
 3435 1d66 FD 87 67                		shlr	#7, r6, r7
 3436 1d69 EB A7 7E 01             		mov.L	r7, 1528[r10]
 3437 1d6d EE AB 7B 01             		mov.L	1516[r10], r11
 3438 1d71 06 A2 0D AB 7D 01       		xor	1524[r10].L, r11
 3439 1d77 EB AB 7F 01             		mov.L	r11, 1532[r10]
 3440 1d7b EE AC 7C 01             		mov.L	1520[r10], r12
 3441 1d7f 06 A2 0D AC 7E 01       		xor	1528[r10].L, r12
 3442 1d85 EB AC 80 01             		mov.L	r12, 1536[r10]
 3443 1d89 EE A7 7A 01             		mov.L	1512[r10], r7
 3444 1d8d EE AB 79 01             		mov.L	1508[r10], r11
 3445 1d91 EE AC 7F 01             		mov.L	1532[r10], r12
 3446 1d95 FF 2D CB                		add	r12, r11, r13
 3447 1d98 06 A2 02 A7 80 01       		adc 1536[r10],r7
 3448 1d9e EB A7 50 03             		mov.L	r7, 3392[r10]
 3449 1da2 EB AD 4F 03             		mov.L	r13, 3388[r10]
 3450 1da6 ED A5 02                		mov.L	8[r10], r5
 3451 1da9 71 55 38                		add	#56, r5
 3452 1dac EC 52                   		mov.L	[r5], r2
 3453 1dae A8 5B                   		mov.L	4[r5], r3
 3454 1db0 ED A5 02                		mov.L	8[r10], r5
 3455 1db3 71 54 38                		add	#56, r5, r4
 3456 1db6 EE A7 50 03             		mov.L	3392[r10], r7
 3457 1dba EE AB 4F 03             		mov.L	3388[r10], r11
 3458 1dbe FF 2D 2B                		add	r2, r11, r13
 3459 1dc1 FC 0B 37                		adc	r3, r7
 3460 1dc4 EB A7 82 01             		mov.L	r7, 1544[r10]
 3461 1dc8 EB AD 81 01             		mov.L	r13, 1540[r10]
 3462 1dcc E2 A4 81 01             		mov.L	1540[r10], [r4]
 3463 1dd0 E6 A4 82 01 01          		mov.L	1544[r10], 4[r4]
 3464 1dd5 EC 45                   		mov.L	[r4], r5
 3465 1dd7 A8 4E                   		mov.L	4[r4], r6
 3466 1dd9 2E 17                   		bra	.L59
 3467                             	.L58:
 3468                             		.loc 2 755 30 discriminator 14
 3469 1ddb ED A5 02                		mov.L	8[r10], r5
 3470 1dde 71 54 38                		add	#56, r5, r4
 3471 1de1 ED A5 14                		mov.L	80[r10], r5
 3472 1de4 AF D2                   		mov.L	120[r5], r2
 3473 1de6 AF DB                   		mov.L	124[r5], r3
 3474 1de8 E3 42                   		mov.L	r2, [r4]
 3475 1dea A0 4B                   		mov.L	r3, 4[r4]
 3476 1dec EC 45                   		mov.L	[r4], r5
 3477 1dee A8 4E                   		mov.L	4[r4], r6
 3478                             	.L59:
 3479                             		.loc 2 755 30 discriminator 16
 3480 1df0 EF 67                   		mov.L	r6, r7
 3481 1df2 EE AB 71 01             		mov.L	1476[r10], r11
 3482 1df6 FF 2D B5                		add	r11, r5, r13
 3483 1df9 06 A2 02 A7 72 01       		adc 1480[r10],r7
 3484 1dff EB A7 52 03             		mov.L	r7, 3400[r10]
 3485 1e03 EB AD 51 03             		mov.L	r13, 3396[r10]
 3486 1e07 ED A5 04                		mov.L	16[r10], r5
 3487 1e0a ED A6 05                		mov.L	20[r10], r6
 3488 1e0d EE AD 52 03             		mov.L	3400[r10], r13
 3489 1e11 EE A7 51 03             		mov.L	3396[r10], r7
 3490 1e15 FF 2C 57                		add	r5, r7, r12
 3491 1e18 FC 0B 6D                		adc	r6, r13
 3492 1e1b EB AD 84 01             		mov.L	r13, 1552[r10]
 3493 1e1f EB AC 83 01             		mov.L	r12, 1548[r10]
 3494 1e23 E6 AA 83 01 04          		mov.L	1548[r10], 16[r10]
 3495 1e28 E6 AA 84 01 05          		mov.L	1552[r10], 20[r10]
 3496 1e2d ED A3 0C                		mov.L	48[r10], r3
 3497 1e30 ED A4 0D                		mov.L	52[r10], r4
 3498 1e33 ED A5 04                		mov.L	16[r10], r5
 3499 1e36 ED A6 05                		mov.L	20[r10], r6
 3500 1e39 EF 4D                   		mov.L	r4, r13
 3501 1e3b FF 2C 53                		add	r5, r3, r12
 3502 1e3e FC 0B 6D                		adc	r6, r13
 3503 1e41 EB AD 86 01             		mov.L	r13, 1560[r10]
 3504 1e45 EB AC 85 01             		mov.L	r12, 1556[r10]
 3505 1e49 E6 AA 85 01 0C          		mov.L	1556[r10], 48[r10]
 3506 1e4e E6 AA 86 01 0D          		mov.L	1560[r10], 52[r10]
 3507 1e53 ED A5 06                		mov.L	24[r10], r5
 3508 1e56 ED A6 07                		mov.L	28[r10], r6
 3509 1e59 75 43 1C                		mov.L	#28, r3
 3510 1e5c 66 04                   		mov.L	#0, r4
 3511 1e5e EF 51                   		mov.L	r5, r1
 3512 1e60 EF 62                   		mov.L	r6, r2
 3513 1e62 05 00 00 00             		bsr	_rotrFixed64
 3514 1e66 EF 1B                   		mov.L	r1, r11
 3515 1e68 EF 2C                   		mov.L	r2, r12
 3516 1e6a ED A5 06                		mov.L	24[r10], r5
 3517 1e6d ED A6 07                		mov.L	28[r10], r6
 3518 1e70 75 43 22                		mov.L	#34, r3
 3519 1e73 66 04                   		mov.L	#0, r4
 3520 1e75 EF 51                   		mov.L	r5, r1
 3521 1e77 EF 62                   		mov.L	r6, r2
 3522 1e79 05 00 00 00             		bsr	_rotrFixed64
 3523 1e7d EF 15                   		mov.L	r1, r5
 3524 1e7f EF 26                   		mov.L	r2, r6
 3525 1e81 EF BD                   		mov.L	r11, r13
 3526 1e83 FC 37 5D                		xor	r5, r13
 3527 1e86 EB AD 87 01             		mov.L	r13, 1564[r10]
 3528 1e8a EF C7                   		mov.L	r12, r7
 3529 1e8c FC 37 67                		xor	r6, r7
 3530 1e8f EB A7 88 01             		mov.L	r7, 1568[r10]
 3531 1e93 ED A5 06                		mov.L	24[r10], r5
 3532 1e96 ED A6 07                		mov.L	28[r10], r6
 3533 1e99 75 43 27                		mov.L	#39, r3
 3534 1e9c 66 04                   		mov.L	#0, r4
 3535 1e9e EF 51                   		mov.L	r5, r1
 3536 1ea0 EF 62                   		mov.L	r6, r2
 3537 1ea2 05 00 00 00             		bsr	_rotrFixed64
 3538 1ea6 EF 15                   		mov.L	r1, r5
 3539 1ea8 EF 26                   		mov.L	r2, r6
 3540 1eaa EE AB 87 01             		mov.L	1564[r10], r11
 3541 1eae FC 37 5B                		xor	r5, r11
 3542 1eb1 EB AB 89 01             		mov.L	r11, 1572[r10]
 3543 1eb5 EE AC 88 01             		mov.L	1568[r10], r12
 3544 1eb9 FC 37 6C                		xor	r6, r12
 3545 1ebc EB AC 8A 01             		mov.L	r12, 1576[r10]
 3546 1ec0 ED A3 06                		mov.L	24[r10], r3
 3547 1ec3 ED A4 07                		mov.L	28[r10], r4
 3548 1ec6 ED A5 08                		mov.L	32[r10], r5
 3549 1ec9 ED A6 09                		mov.L	36[r10], r6
 3550 1ecc FF 4D 53                		and	r5, r3, r13
 3551 1ecf EB AD 8B 01             		mov.L	r13, 1580[r10]
 3552 1ed3 FF 47 64                		and	r6, r4, r7
 3553 1ed6 EB A7 8C 01             		mov.L	r7, 1584[r10]
 3554 1eda ED A1 0A                		mov.L	40[r10], r1
 3555 1edd ED A2 0B                		mov.L	44[r10], r2
 3556 1ee0 ED A3 06                		mov.L	24[r10], r3
 3557 1ee3 ED A4 07                		mov.L	28[r10], r4
 3558 1ee6 ED A5 08                		mov.L	32[r10], r5
 3559 1ee9 ED A6 09                		mov.L	36[r10], r6
 3560 1eec FF 5B 53                		or	r5, r3, r11
 3561 1eef EB AB 8D 01             		mov.L	r11, 1588[r10]
 3562 1ef3 FF 5C 64                		or	r6, r4, r12
 3563 1ef6 EB AC 8E 01             		mov.L	r12, 1592[r10]
 3564 1efa EF 1D                   		mov.L	r1, r13
 3565 1efc 06 92 AD 8D 01          		and	1588[r10], r13
 3566 1f01 EB AD 8F 01             		mov.L	r13, 1596[r10]
 3567 1f05 EF 27                   		mov.L	r2, r7
 3568 1f07 06 92 A7 8E 01          		and	1592[r10], r7
 3569 1f0c EB A7 90 01             		mov.L	r7, 1600[r10]
 3570 1f10 EE AB 8B 01             		mov.L	1580[r10], r11
 3571 1f14 EE AC 8F 01             		mov.L	1596[r10], r12
 3572 1f18 57 CB                   		or	r12, r11
 3573 1f1a EB AB 91 01             		mov.L	r11, 1604[r10]
 3574 1f1e EE AD 8C 01             		mov.L	1584[r10], r13
 3575 1f22 EE A7 90 01             		mov.L	1600[r10], r7
 3576 1f26 57 7D                   		or	r7, r13
 3577 1f28 EB AD 92 01             		mov.L	r13, 1608[r10]
 3578 1f2c EE AC 8A 01             		mov.L	1576[r10], r12
 3579 1f30 EE AD 89 01             		mov.L	1572[r10], r13
 3580 1f34 EE A7 91 01             		mov.L	1604[r10], r7
 3581 1f38 FF 2B 7D                		add	r7, r13, r11
 3582 1f3b 06 A2 02 AC 92 01       		adc 1608[r10],r12
 3583 1f41 EB AC 54 03             		mov.L	r12, 3408[r10]
 3584 1f45 EB AB 53 03             		mov.L	r11, 3404[r10]
 3585 1f49 ED A5 04                		mov.L	16[r10], r5
 3586 1f4c ED A6 05                		mov.L	20[r10], r6
 3587 1f4f EE AC 54 03             		mov.L	3408[r10], r12
 3588 1f53 EE AD 53 03             		mov.L	3404[r10], r13
 3589 1f57 FF 2B 5D                		add	r5, r13, r11
 3590 1f5a FC 0B 6C                		adc	r6, r12
 3591 1f5d EB AC 94 01             		mov.L	r12, 1616[r10]
 3592 1f61 EB AB 93 01             		mov.L	r11, 1612[r10]
 3593 1f65 E6 AA 93 01 04          		mov.L	1612[r10], 16[r10]
 3594 1f6a E6 AA 94 01 05          		mov.L	1616[r10], 20[r10]
 756:../src/wolfcrypt/src/sha512.c ****         R( 8); R( 9); R(10); R(11);
 3595                             		.loc 2 756 9 is_stmt 1 discriminator 16
 3596 1f6f ED A5 0C                		mov.L	48[r10], r5
 3597 1f72 ED A6 0D                		mov.L	52[r10], r6
 3598 1f75 66 E3                   		mov.L	#14, r3
 3599 1f77 66 04                   		mov.L	#0, r4
 3600 1f79 EF 51                   		mov.L	r5, r1
 3601 1f7b EF 62                   		mov.L	r6, r2
 3602 1f7d 05 00 00 00             		bsr	_rotrFixed64
 3603 1f81 EF 1B                   		mov.L	r1, r11
 3604 1f83 EF 2C                   		mov.L	r2, r12
 3605 1f85 ED A5 0C                		mov.L	48[r10], r5
 3606 1f88 ED A6 0D                		mov.L	52[r10], r6
 3607 1f8b 75 43 12                		mov.L	#18, r3
 3608 1f8e 66 04                   		mov.L	#0, r4
 3609 1f90 EF 51                   		mov.L	r5, r1
 3610 1f92 EF 62                   		mov.L	r6, r2
 3611 1f94 05 00 00 00             		bsr	_rotrFixed64
 3612 1f98 EF 15                   		mov.L	r1, r5
 3613 1f9a EF 26                   		mov.L	r2, r6
 3614 1f9c EF BD                   		mov.L	r11, r13
 3615 1f9e FC 37 5D                		xor	r5, r13
 3616 1fa1 EB AD 95 01             		mov.L	r13, 1620[r10]
 3617 1fa5 EF C7                   		mov.L	r12, r7
 3618 1fa7 FC 37 67                		xor	r6, r7
 3619 1faa EB A7 96 01             		mov.L	r7, 1624[r10]
 3620 1fae ED A5 0C                		mov.L	48[r10], r5
 3621 1fb1 ED A6 0D                		mov.L	52[r10], r6
 3622 1fb4 75 43 29                		mov.L	#41, r3
 3623 1fb7 66 04                   		mov.L	#0, r4
 3624 1fb9 EF 51                   		mov.L	r5, r1
 3625 1fbb EF 62                   		mov.L	r6, r2
 3626 1fbd 05 00 00 00             		bsr	_rotrFixed64
 3627 1fc1 EF 15                   		mov.L	r1, r5
 3628 1fc3 EF 26                   		mov.L	r2, r6
 3629 1fc5 EE AB 95 01             		mov.L	1620[r10], r11
 3630 1fc9 FC 37 5B                		xor	r5, r11
 3631 1fcc EB AB 97 01             		mov.L	r11, 1628[r10]
 3632 1fd0 EE AC 96 01             		mov.L	1624[r10], r12
 3633 1fd4 FC 37 6C                		xor	r6, r12
 3634 1fd7 EB AC 98 01             		mov.L	r12, 1632[r10]
 3635 1fdb ED AB 10                		mov.L	64[r10], r11
 3636 1fde ED AC 11                		mov.L	68[r10], r12
 3637 1fe1 ED A3 0C                		mov.L	48[r10], r3
 3638 1fe4 ED A4 0D                		mov.L	52[r10], r4
 3639 1fe7 ED A1 0E                		mov.L	56[r10], r1
 3640 1fea ED A2 0F                		mov.L	60[r10], r2
 3641 1fed ED A5 10                		mov.L	64[r10], r5
 3642 1ff0 ED A6 11                		mov.L	68[r10], r6
 3643 1ff3 EF 1D                   		mov.L	r1, r13
 3644 1ff5 FC 37 5D                		xor	r5, r13
 3645 1ff8 EB AD 99 01             		mov.L	r13, 1636[r10]
 3646 1ffc EF 27                   		mov.L	r2, r7
 3647 1ffe FC 37 67                		xor	r6, r7
 3648 2001 EB A7 9A 01             		mov.L	r7, 1640[r10]
 3649 2005 EF 3D                   		mov.L	r3, r13
 3650 2007 06 92 AD 99 01          		and	1636[r10], r13
 3651 200c EB AD 9B 01             		mov.L	r13, 1644[r10]
 3652 2010 EF 47                   		mov.L	r4, r7
 3653 2012 06 92 A7 9A 01          		and	1640[r10], r7
 3654 2017 EB A7 9C 01             		mov.L	r7, 1648[r10]
 3655 201b EE AD 9B 01             		mov.L	1644[r10], r13
 3656 201f FC 37 BD                		xor	r11, r13
 3657 2022 EB AD 9D 01             		mov.L	r13, 1652[r10]
 3658 2026 EE A7 9C 01             		mov.L	1648[r10], r7
 3659 202a FC 37 C7                		xor	r12, r7
 3660 202d EB A7 9E 01             		mov.L	r7, 1656[r10]
 3661 2031 EE AC 98 01             		mov.L	1632[r10], r12
 3662 2035 EE AD 97 01             		mov.L	1628[r10], r13
 3663 2039 EE A7 9D 01             		mov.L	1652[r10], r7
 3664 203d FF 2B 7D                		add	r7, r13, r11
 3665 2040 06 A2 02 AC 9E 01       		adc 1656[r10],r12
 3666 2046 EB AC A0 01             		mov.L	r12, 1664[r10]
 3667 204a EB AB 9F 01             		mov.L	r11, 1660[r10]
 3668 204e EC A5                   		mov.L	[r10], r5
 3669 2050 62 85                   		add	#8, r5
 3670 2052 FD C3 54                		shll	#3, r5, r4
 3671 2055 ED A5 01                		mov.L	4[r10], r5
 3672 2058 4B 54                   		add	r5, r4
 3673 205a EC 45                   		mov.L	[r4], r5
 3674 205c A8 4E                   		mov.L	4[r4], r6
 3675 205e EE AC A0 01             		mov.L	1664[r10], r12
 3676 2062 EE AD 9F 01             		mov.L	1660[r10], r13
 3677 2066 FF 2B 5D                		add	r5, r13, r11
 3678 2069 FC 0B 6C                		adc	r6, r12
 3679 206c EB AC A2 01             		mov.L	r12, 1672[r10]
 3680 2070 EB AB A1 01             		mov.L	r11, 1668[r10]
 3681 2074 EC A5                   		mov.L	[r10], r5
 3682 2076 61 05                   		cmp	#0, r5
 3683 2078 3A 89 01                		beq	.L60
 3684                             		.loc 2 756 9 is_stmt 0 discriminator 1
 3685 207b ED A5 02                		mov.L	8[r10], r5
 3686 207e 71 55 30                		add	#48, r5
 3687 2081 EC 5B                   		mov.L	[r5], r11
 3688 2083 ED 5C 01                		mov.L	4[r5], r12
 3689 2086 75 43 13                		mov.L	#19, r3
 3690 2089 66 04                   		mov.L	#0, r4
 3691 208b EF B1                   		mov.L	r11, r1
 3692 208d EF C2                   		mov.L	r12, r2
 3693 208f 05 00 00 00             		bsr	_rotrFixed64
 3694 2093 EF 18                   		mov.L	r1, r8
 3695 2095 EF 29                   		mov.L	r2, r9
 3696 2097 ED A5 02                		mov.L	8[r10], r5
 3697 209a 71 55 30                		add	#48, r5
 3698 209d EC 5B                   		mov.L	[r5], r11
 3699 209f ED 5C 01                		mov.L	4[r5], r12
 3700 20a2 75 43 3D                		mov.L	#61, r3
 3701 20a5 66 04                   		mov.L	#0, r4
 3702 20a7 EF B1                   		mov.L	r11, r1
 3703 20a9 EF C2                   		mov.L	r12, r2
 3704 20ab 05 00 00 00             		bsr	_rotrFixed64
 3705 20af EF 15                   		mov.L	r1, r5
 3706 20b1 EF 26                   		mov.L	r2, r6
 3707 20b3 EF 8B                   		mov.L	r8, r11
 3708 20b5 FC 37 5B                		xor	r5, r11
 3709 20b8 EB AB A3 01             		mov.L	r11, 1676[r10]
 3710 20bc EF 9C                   		mov.L	r9, r12
 3711 20be FC 37 6C                		xor	r6, r12
 3712 20c1 EB AC A4 01             		mov.L	r12, 1680[r10]
 3713 20c5 ED A5 02                		mov.L	8[r10], r5
 3714 20c8 71 54 30                		add	#48, r5, r4
 3715 20cb EC 45                   		mov.L	[r4], r5
 3716 20cd A8 4E                   		mov.L	4[r4], r6
 3717 20cf FD DA 64                		shll	#26, r6, r4
 3718 20d2 FD 86 5D                		shlr	#6, r5, r13
 3719 20d5 EB AD A5 01             		mov.L	r13, 1684[r10]
 3720 20d9 EE A7 A5 01             		mov.L	1684[r10], r7
 3721 20dd 57 47                   		or	r4, r7
 3722 20df EB A7 A5 01             		mov.L	r7, 1684[r10]
 3723 20e3 FD 86 6B                		shlr	#6, r6, r11
 3724 20e6 EB AB A6 01             		mov.L	r11, 1688[r10]
 3725 20ea EE AC A3 01             		mov.L	1676[r10], r12
 3726 20ee 06 A2 0D AC A5 01       		xor	1684[r10].L, r12
 3727 20f4 EB AC A7 01             		mov.L	r12, 1692[r10]
 3728 20f8 EE AD A4 01             		mov.L	1680[r10], r13
 3729 20fc 06 A2 0D AD A6 01       		xor	1688[r10].L, r13
 3730 2102 EB AD A8 01             		mov.L	r13, 1696[r10]
 3731 2106 ED A5 02                		mov.L	8[r10], r5
 3732 2109 71 54 08                		add	#8, r5, r4
 3733 210c EC 45                   		mov.L	[r4], r5
 3734 210e A8 4E                   		mov.L	4[r4], r6
 3735 2110 EE AB A8 01             		mov.L	1696[r10], r11
 3736 2114 EE AC A7 01             		mov.L	1692[r10], r12
 3737 2118 FF 27 5C                		add	r5, r12, r7
 3738 211b FC 0B 6B                		adc	r6, r11
 3739 211e EB AB AA 01             		mov.L	r11, 1704[r10]
 3740 2122 EB A7 A9 01             		mov.L	r7, 1700[r10]
 3741 2126 ED A5 02                		mov.L	8[r10], r5
 3742 2129 71 55 48                		add	#0x48, r5
 3743 212c EC 5B                   		mov.L	[r5], r11
 3744 212e ED 5C 01                		mov.L	4[r5], r12
 3745 2131 66 13                   		mov.L	#1, r3
 3746 2133 66 04                   		mov.L	#0, r4
 3747 2135 EF B1                   		mov.L	r11, r1
 3748 2137 EF C2                   		mov.L	r12, r2
 3749 2139 05 00 00 00             		bsr	_rotrFixed64
 3750 213d EF 18                   		mov.L	r1, r8
 3751 213f EF 29                   		mov.L	r2, r9
 3752 2141 ED A5 02                		mov.L	8[r10], r5
 3753 2144 71 55 48                		add	#0x48, r5
 3754 2147 EC 5B                   		mov.L	[r5], r11
 3755 2149 ED 5C 01                		mov.L	4[r5], r12
 3756 214c 66 83                   		mov.L	#8, r3
 3757 214e 66 04                   		mov.L	#0, r4
 3758 2150 EF B1                   		mov.L	r11, r1
 3759 2152 EF C2                   		mov.L	r12, r2
 3760 2154 05 00 00 00             		bsr	_rotrFixed64
 3761 2158 EF 15                   		mov.L	r1, r5
 3762 215a EF 26                   		mov.L	r2, r6
 3763 215c EF 87                   		mov.L	r8, r7
 3764 215e FC 37 57                		xor	r5, r7
 3765 2161 EB A7 AB 01             		mov.L	r7, 1708[r10]
 3766 2165 EF 9B                   		mov.L	r9, r11
 3767 2167 FC 37 6B                		xor	r6, r11
 3768 216a EB AB AC 01             		mov.L	r11, 1712[r10]
 3769 216e ED A5 02                		mov.L	8[r10], r5
 3770 2171 71 54 48                		add	#0x48, r5, r4
 3771 2174 EC 45                   		mov.L	[r4], r5
 3772 2176 A8 4E                   		mov.L	4[r4], r6
 3773 2178 FD D9 64                		shll	#25, r6, r4
 3774 217b FD 87 5C                		shlr	#7, r5, r12
 3775 217e EB AC AD 01             		mov.L	r12, 1716[r10]
 3776 2182 EE AD AD 01             		mov.L	1716[r10], r13
 3777 2186 57 4D                   		or	r4, r13
 3778 2188 EB AD AD 01             		mov.L	r13, 1716[r10]
 3779 218c FD 87 67                		shlr	#7, r6, r7
 3780 218f EB A7 AE 01             		mov.L	r7, 1720[r10]
 3781 2193 EE AB AB 01             		mov.L	1708[r10], r11
 3782 2197 06 A2 0D AB AD 01       		xor	1716[r10].L, r11
 3783 219d EB AB AF 01             		mov.L	r11, 1724[r10]
 3784 21a1 EE AC AC 01             		mov.L	1712[r10], r12
 3785 21a5 06 A2 0D AC AE 01       		xor	1720[r10].L, r12
 3786 21ab EB AC B0 01             		mov.L	r12, 1728[r10]
 3787 21af EE A7 AA 01             		mov.L	1704[r10], r7
 3788 21b3 EE AB A9 01             		mov.L	1700[r10], r11
 3789 21b7 EE AC AF 01             		mov.L	1724[r10], r12
 3790 21bb FF 2D CB                		add	r12, r11, r13
 3791 21be 06 A2 02 A7 B0 01       		adc 1728[r10],r7
 3792 21c4 EB A7 56 03             		mov.L	r7, 3416[r10]
 3793 21c8 EB AD 55 03             		mov.L	r13, 3412[r10]
 3794 21cc ED A5 02                		mov.L	8[r10], r5
 3795 21cf 71 55 40                		add	#0x40, r5
 3796 21d2 EC 52                   		mov.L	[r5], r2
 3797 21d4 A8 5B                   		mov.L	4[r5], r3
 3798 21d6 ED A5 02                		mov.L	8[r10], r5
 3799 21d9 71 54 40                		add	#0x40, r5, r4
 3800 21dc EE A7 56 03             		mov.L	3416[r10], r7
 3801 21e0 EE AB 55 03             		mov.L	3412[r10], r11
 3802 21e4 FF 2D 2B                		add	r2, r11, r13
 3803 21e7 FC 0B 37                		adc	r3, r7
 3804 21ea EB A7 B2 01             		mov.L	r7, 1736[r10]
 3805 21ee EB AD B1 01             		mov.L	r13, 1732[r10]
 3806 21f2 E2 A4 B1 01             		mov.L	1732[r10], [r4]
 3807 21f6 E6 A4 B2 01 01          		mov.L	1736[r10], 4[r4]
 3808 21fb EC 45                   		mov.L	[r4], r5
 3809 21fd A8 4E                   		mov.L	4[r4], r6
 3810 21ff 2E 19                   		bra	.L61
 3811                             	.L60:
 3812                             		.loc 2 756 9 discriminator 2
 3813 2201 ED A5 02                		mov.L	8[r10], r5
 3814 2204 71 54 40                		add	#0x40, r5, r4
 3815 2207 ED A5 14                		mov.L	80[r10], r5
 3816 220a ED 52 20                		mov.L	128[r5], r2
 3817 220d ED 53 21                		mov.L	132[r5], r3
 3818 2210 E3 42                   		mov.L	r2, [r4]
 3819 2212 A0 4B                   		mov.L	r3, 4[r4]
 3820 2214 EC 45                   		mov.L	[r4], r5
 3821 2216 A8 4E                   		mov.L	4[r4], r6
 3822                             	.L61:
 3823                             		.loc 2 756 9 discriminator 4
 3824 2218 EF 67                   		mov.L	r6, r7
 3825 221a EE AB A1 01             		mov.L	1668[r10], r11
 3826 221e FF 2D B5                		add	r11, r5, r13
 3827 2221 06 A2 02 A7 A2 01       		adc 1672[r10],r7
 3828 2227 EB A7 58 03             		mov.L	r7, 3424[r10]
 3829 222b EB AD 57 03             		mov.L	r13, 3420[r10]
 3830 222f ED A5 12                		mov.L	72[r10], r5
 3831 2232 ED A6 13                		mov.L	76[r10], r6
 3832 2235 EE AD 58 03             		mov.L	3424[r10], r13
 3833 2239 EE A7 57 03             		mov.L	3420[r10], r7
 3834 223d FF 2C 57                		add	r5, r7, r12
 3835 2240 FC 0B 6D                		adc	r6, r13
 3836 2243 EB AD B4 01             		mov.L	r13, 1744[r10]
 3837 2247 EB AC B3 01             		mov.L	r12, 1740[r10]
 3838 224b E6 AA B3 01 12          		mov.L	1740[r10], 72[r10]
 3839 2250 E6 AA B4 01 13          		mov.L	1744[r10], 76[r10]
 3840 2255 ED A3 0A                		mov.L	40[r10], r3
 3841 2258 ED A4 0B                		mov.L	44[r10], r4
 3842 225b ED A5 12                		mov.L	72[r10], r5
 3843 225e ED A6 13                		mov.L	76[r10], r6
 3844 2261 EF 4D                   		mov.L	r4, r13
 3845 2263 FF 2C 53                		add	r5, r3, r12
 3846 2266 FC 0B 6D                		adc	r6, r13
 3847 2269 EB AD B6 01             		mov.L	r13, 1752[r10]
 3848 226d EB AC B5 01             		mov.L	r12, 1748[r10]
 3849 2271 E6 AA B5 01 0A          		mov.L	1748[r10], 40[r10]
 3850 2276 E6 AA B6 01 0B          		mov.L	1752[r10], 44[r10]
 3851 227b ED A5 04                		mov.L	16[r10], r5
 3852 227e ED A6 05                		mov.L	20[r10], r6
 3853 2281 75 43 1C                		mov.L	#28, r3
 3854 2284 66 04                   		mov.L	#0, r4
 3855 2286 EF 51                   		mov.L	r5, r1
 3856 2288 EF 62                   		mov.L	r6, r2
 3857 228a 05 00 00 00             		bsr	_rotrFixed64
 3858 228e EF 1B                   		mov.L	r1, r11
 3859 2290 EF 2C                   		mov.L	r2, r12
 3860 2292 ED A5 04                		mov.L	16[r10], r5
 3861 2295 ED A6 05                		mov.L	20[r10], r6
 3862 2298 75 43 22                		mov.L	#34, r3
 3863 229b 66 04                   		mov.L	#0, r4
 3864 229d EF 51                   		mov.L	r5, r1
 3865 229f EF 62                   		mov.L	r6, r2
 3866 22a1 05 00 00 00             		bsr	_rotrFixed64
 3867 22a5 EF 15                   		mov.L	r1, r5
 3868 22a7 EF 26                   		mov.L	r2, r6
 3869 22a9 EF BD                   		mov.L	r11, r13
 3870 22ab FC 37 5D                		xor	r5, r13
 3871 22ae EB AD B7 01             		mov.L	r13, 1756[r10]
 3872 22b2 EF C7                   		mov.L	r12, r7
 3873 22b4 FC 37 67                		xor	r6, r7
 3874 22b7 EB A7 B8 01             		mov.L	r7, 1760[r10]
 3875 22bb ED A5 04                		mov.L	16[r10], r5
 3876 22be ED A6 05                		mov.L	20[r10], r6
 3877 22c1 75 43 27                		mov.L	#39, r3
 3878 22c4 66 04                   		mov.L	#0, r4
 3879 22c6 EF 51                   		mov.L	r5, r1
 3880 22c8 EF 62                   		mov.L	r6, r2
 3881 22ca 05 00 00 00             		bsr	_rotrFixed64
 3882 22ce EF 15                   		mov.L	r1, r5
 3883 22d0 EF 26                   		mov.L	r2, r6
 3884 22d2 EE AB B7 01             		mov.L	1756[r10], r11
 3885 22d6 FC 37 5B                		xor	r5, r11
 3886 22d9 EB AB B9 01             		mov.L	r11, 1764[r10]
 3887 22dd EE AC B8 01             		mov.L	1760[r10], r12
 3888 22e1 FC 37 6C                		xor	r6, r12
 3889 22e4 EB AC BA 01             		mov.L	r12, 1768[r10]
 3890 22e8 ED A3 04                		mov.L	16[r10], r3
 3891 22eb ED A4 05                		mov.L	20[r10], r4
 3892 22ee ED A5 06                		mov.L	24[r10], r5
 3893 22f1 ED A6 07                		mov.L	28[r10], r6
 3894 22f4 FF 4D 53                		and	r5, r3, r13
 3895 22f7 EB AD BB 01             		mov.L	r13, 1772[r10]
 3896 22fb FF 47 64                		and	r6, r4, r7
 3897 22fe EB A7 BC 01             		mov.L	r7, 1776[r10]
 3898 2302 ED A1 08                		mov.L	32[r10], r1
 3899 2305 ED A2 09                		mov.L	36[r10], r2
 3900 2308 ED A3 04                		mov.L	16[r10], r3
 3901 230b ED A4 05                		mov.L	20[r10], r4
 3902 230e ED A5 06                		mov.L	24[r10], r5
 3903 2311 ED A6 07                		mov.L	28[r10], r6
 3904 2314 FF 5B 53                		or	r5, r3, r11
 3905 2317 EB AB BD 01             		mov.L	r11, 1780[r10]
 3906 231b FF 5C 64                		or	r6, r4, r12
 3907 231e EB AC BE 01             		mov.L	r12, 1784[r10]
 3908 2322 EF 1D                   		mov.L	r1, r13
 3909 2324 06 92 AD BD 01          		and	1780[r10], r13
 3910 2329 EB AD BF 01             		mov.L	r13, 1788[r10]
 3911 232d EF 27                   		mov.L	r2, r7
 3912 232f 06 92 A7 BE 01          		and	1784[r10], r7
 3913 2334 EB A7 C0 01             		mov.L	r7, 1792[r10]
 3914 2338 EE AB BB 01             		mov.L	1772[r10], r11
 3915 233c EE AC BF 01             		mov.L	1788[r10], r12
 3916 2340 57 CB                   		or	r12, r11
 3917 2342 EB AB C1 01             		mov.L	r11, 1796[r10]
 3918 2346 EE AD BC 01             		mov.L	1776[r10], r13
 3919 234a EE A7 C0 01             		mov.L	1792[r10], r7
 3920 234e 57 7D                   		or	r7, r13
 3921 2350 EB AD C2 01             		mov.L	r13, 1800[r10]
 3922 2354 EE AC BA 01             		mov.L	1768[r10], r12
 3923 2358 EE AD B9 01             		mov.L	1764[r10], r13
 3924 235c EE A7 C1 01             		mov.L	1796[r10], r7
 3925 2360 FF 2B 7D                		add	r7, r13, r11
 3926 2363 06 A2 02 AC C2 01       		adc 1800[r10],r12
 3927 2369 EB AC 5A 03             		mov.L	r12, 3432[r10]
 3928 236d EB AB 59 03             		mov.L	r11, 3428[r10]
 3929 2371 ED A5 12                		mov.L	72[r10], r5
 3930 2374 ED A6 13                		mov.L	76[r10], r6
 3931 2377 EE AC 5A 03             		mov.L	3432[r10], r12
 3932 237b EE AD 59 03             		mov.L	3428[r10], r13
 3933 237f FF 2B 5D                		add	r5, r13, r11
 3934 2382 FC 0B 6C                		adc	r6, r12
 3935 2385 EB AC C4 01             		mov.L	r12, 1808[r10]
 3936 2389 EB AB C3 01             		mov.L	r11, 1804[r10]
 3937 238d E6 AA C3 01 12          		mov.L	1804[r10], 72[r10]
 3938 2392 E6 AA C4 01 13          		mov.L	1808[r10], 76[r10]
 3939                             		.loc 2 756 16 is_stmt 1 discriminator 4
 3940 2397 ED A5 0A                		mov.L	40[r10], r5
 3941 239a ED A6 0B                		mov.L	44[r10], r6
 3942 239d 66 E3                   		mov.L	#14, r3
 3943 239f 66 04                   		mov.L	#0, r4
 3944 23a1 EF 51                   		mov.L	r5, r1
 3945 23a3 EF 62                   		mov.L	r6, r2
 3946 23a5 05 00 00 00             		bsr	_rotrFixed64
 3947 23a9 EF 1B                   		mov.L	r1, r11
 3948 23ab EF 2C                   		mov.L	r2, r12
 3949 23ad ED A5 0A                		mov.L	40[r10], r5
 3950 23b0 ED A6 0B                		mov.L	44[r10], r6
 3951 23b3 75 43 12                		mov.L	#18, r3
 3952 23b6 66 04                   		mov.L	#0, r4
 3953 23b8 EF 51                   		mov.L	r5, r1
 3954 23ba EF 62                   		mov.L	r6, r2
 3955 23bc 05 00 00 00             		bsr	_rotrFixed64
 3956 23c0 EF 15                   		mov.L	r1, r5
 3957 23c2 EF 26                   		mov.L	r2, r6
 3958 23c4 EF BD                   		mov.L	r11, r13
 3959 23c6 FC 37 5D                		xor	r5, r13
 3960 23c9 EB AD C5 01             		mov.L	r13, 1812[r10]
 3961 23cd EF C7                   		mov.L	r12, r7
 3962 23cf FC 37 67                		xor	r6, r7
 3963 23d2 EB A7 C6 01             		mov.L	r7, 1816[r10]
 3964 23d6 ED A5 0A                		mov.L	40[r10], r5
 3965 23d9 ED A6 0B                		mov.L	44[r10], r6
 3966 23dc 75 43 29                		mov.L	#41, r3
 3967 23df 66 04                   		mov.L	#0, r4
 3968 23e1 EF 51                   		mov.L	r5, r1
 3969 23e3 EF 62                   		mov.L	r6, r2
 3970 23e5 05 00 00 00             		bsr	_rotrFixed64
 3971 23e9 EF 15                   		mov.L	r1, r5
 3972 23eb EF 26                   		mov.L	r2, r6
 3973 23ed EE AB C5 01             		mov.L	1812[r10], r11
 3974 23f1 FC 37 5B                		xor	r5, r11
 3975 23f4 EB AB C7 01             		mov.L	r11, 1820[r10]
 3976 23f8 EE AC C6 01             		mov.L	1816[r10], r12
 3977 23fc FC 37 6C                		xor	r6, r12
 3978 23ff EB AC C8 01             		mov.L	r12, 1824[r10]
 3979 2403 ED AB 0E                		mov.L	56[r10], r11
 3980 2406 ED AC 0F                		mov.L	60[r10], r12
 3981 2409 ED A3 0A                		mov.L	40[r10], r3
 3982 240c ED A4 0B                		mov.L	44[r10], r4
 3983 240f ED A1 0C                		mov.L	48[r10], r1
 3984 2412 ED A2 0D                		mov.L	52[r10], r2
 3985 2415 ED A5 0E                		mov.L	56[r10], r5
 3986 2418 ED A6 0F                		mov.L	60[r10], r6
 3987 241b EF 1D                   		mov.L	r1, r13
 3988 241d FC 37 5D                		xor	r5, r13
 3989 2420 EB AD C9 01             		mov.L	r13, 1828[r10]
 3990 2424 EF 27                   		mov.L	r2, r7
 3991 2426 FC 37 67                		xor	r6, r7
 3992 2429 EB A7 CA 01             		mov.L	r7, 1832[r10]
 3993 242d EF 3D                   		mov.L	r3, r13
 3994 242f 06 92 AD C9 01          		and	1828[r10], r13
 3995 2434 EB AD CB 01             		mov.L	r13, 1836[r10]
 3996 2438 EF 47                   		mov.L	r4, r7
 3997 243a 06 92 A7 CA 01          		and	1832[r10], r7
 3998 243f EB A7 CC 01             		mov.L	r7, 1840[r10]
 3999 2443 EE AD CB 01             		mov.L	1836[r10], r13
 4000 2447 FC 37 BD                		xor	r11, r13
 4001 244a EB AD CD 01             		mov.L	r13, 1844[r10]
 4002 244e EE A7 CC 01             		mov.L	1840[r10], r7
 4003 2452 FC 37 C7                		xor	r12, r7
 4004 2455 EB A7 CE 01             		mov.L	r7, 1848[r10]
 4005 2459 EE AC C8 01             		mov.L	1824[r10], r12
 4006 245d EE AD C7 01             		mov.L	1820[r10], r13
 4007 2461 EE A7 CD 01             		mov.L	1844[r10], r7
 4008 2465 FF 2B 7D                		add	r7, r13, r11
 4009 2468 06 A2 02 AC CE 01       		adc 1848[r10],r12
 4010 246e EB AC D0 01             		mov.L	r12, 1856[r10]
 4011 2472 EB AB CF 01             		mov.L	r11, 1852[r10]
 4012 2476 EC A5                   		mov.L	[r10], r5
 4013 2478 62 95                   		add	#9, r5
 4014 247a FD C3 54                		shll	#3, r5, r4
 4015 247d ED A5 01                		mov.L	4[r10], r5
 4016 2480 4B 54                   		add	r5, r4
 4017 2482 EC 45                   		mov.L	[r4], r5
 4018 2484 A8 4E                   		mov.L	4[r4], r6
 4019 2486 EE AC D0 01             		mov.L	1856[r10], r12
 4020 248a EE AD CF 01             		mov.L	1852[r10], r13
 4021 248e FF 2B 5D                		add	r5, r13, r11
 4022 2491 FC 0B 6C                		adc	r6, r12
 4023 2494 EB AC D2 01             		mov.L	r12, 1864[r10]
 4024 2498 EB AB D1 01             		mov.L	r11, 1860[r10]
 4025 249c EC A5                   		mov.L	[r10], r5
 4026 249e 61 05                   		cmp	#0, r5
 4027 24a0 3A 89 01                		beq	.L62
 4028                             		.loc 2 756 16 is_stmt 0 discriminator 5
 4029 24a3 ED A5 02                		mov.L	8[r10], r5
 4030 24a6 71 55 38                		add	#56, r5
 4031 24a9 EC 5B                   		mov.L	[r5], r11
 4032 24ab ED 5C 01                		mov.L	4[r5], r12
 4033 24ae 75 43 13                		mov.L	#19, r3
 4034 24b1 66 04                   		mov.L	#0, r4
 4035 24b3 EF B1                   		mov.L	r11, r1
 4036 24b5 EF C2                   		mov.L	r12, r2
 4037 24b7 05 00 00 00             		bsr	_rotrFixed64
 4038 24bb EF 18                   		mov.L	r1, r8
 4039 24bd EF 29                   		mov.L	r2, r9
 4040 24bf ED A5 02                		mov.L	8[r10], r5
 4041 24c2 71 55 38                		add	#56, r5
 4042 24c5 EC 5B                   		mov.L	[r5], r11
 4043 24c7 ED 5C 01                		mov.L	4[r5], r12
 4044 24ca 75 43 3D                		mov.L	#61, r3
 4045 24cd 66 04                   		mov.L	#0, r4
 4046 24cf EF B1                   		mov.L	r11, r1
 4047 24d1 EF C2                   		mov.L	r12, r2
 4048 24d3 05 00 00 00             		bsr	_rotrFixed64
 4049 24d7 EF 15                   		mov.L	r1, r5
 4050 24d9 EF 26                   		mov.L	r2, r6
 4051 24db EF 8B                   		mov.L	r8, r11
 4052 24dd FC 37 5B                		xor	r5, r11
 4053 24e0 EB AB D3 01             		mov.L	r11, 1868[r10]
 4054 24e4 EF 9C                   		mov.L	r9, r12
 4055 24e6 FC 37 6C                		xor	r6, r12
 4056 24e9 EB AC D4 01             		mov.L	r12, 1872[r10]
 4057 24ed ED A5 02                		mov.L	8[r10], r5
 4058 24f0 71 54 38                		add	#56, r5, r4
 4059 24f3 EC 45                   		mov.L	[r4], r5
 4060 24f5 A8 4E                   		mov.L	4[r4], r6
 4061 24f7 FD DA 64                		shll	#26, r6, r4
 4062 24fa FD 86 5D                		shlr	#6, r5, r13
 4063 24fd EB AD D5 01             		mov.L	r13, 1876[r10]
 4064 2501 EE A7 D5 01             		mov.L	1876[r10], r7
 4065 2505 57 47                   		or	r4, r7
 4066 2507 EB A7 D5 01             		mov.L	r7, 1876[r10]
 4067 250b FD 86 6B                		shlr	#6, r6, r11
 4068 250e EB AB D6 01             		mov.L	r11, 1880[r10]
 4069 2512 EE AC D3 01             		mov.L	1868[r10], r12
 4070 2516 06 A2 0D AC D5 01       		xor	1876[r10].L, r12
 4071 251c EB AC D7 01             		mov.L	r12, 1884[r10]
 4072 2520 EE AD D4 01             		mov.L	1872[r10], r13
 4073 2524 06 A2 0D AD D6 01       		xor	1880[r10].L, r13
 4074 252a EB AD D8 01             		mov.L	r13, 1888[r10]
 4075 252e ED A5 02                		mov.L	8[r10], r5
 4076 2531 71 54 10                		add	#16, r5, r4
 4077 2534 EC 45                   		mov.L	[r4], r5
 4078 2536 A8 4E                   		mov.L	4[r4], r6
 4079 2538 EE AB D8 01             		mov.L	1888[r10], r11
 4080 253c EE AC D7 01             		mov.L	1884[r10], r12
 4081 2540 FF 27 5C                		add	r5, r12, r7
 4082 2543 FC 0B 6B                		adc	r6, r11
 4083 2546 EB AB DA 01             		mov.L	r11, 1896[r10]
 4084 254a EB A7 D9 01             		mov.L	r7, 1892[r10]
 4085 254e ED A5 02                		mov.L	8[r10], r5
 4086 2551 71 55 50                		add	#0x50, r5
 4087 2554 EC 5B                   		mov.L	[r5], r11
 4088 2556 ED 5C 01                		mov.L	4[r5], r12
 4089 2559 66 13                   		mov.L	#1, r3
 4090 255b 66 04                   		mov.L	#0, r4
 4091 255d EF B1                   		mov.L	r11, r1
 4092 255f EF C2                   		mov.L	r12, r2
 4093 2561 05 00 00 00             		bsr	_rotrFixed64
 4094 2565 EF 18                   		mov.L	r1, r8
 4095 2567 EF 29                   		mov.L	r2, r9
 4096 2569 ED A5 02                		mov.L	8[r10], r5
 4097 256c 71 55 50                		add	#0x50, r5
 4098 256f EC 5B                   		mov.L	[r5], r11
 4099 2571 ED 5C 01                		mov.L	4[r5], r12
 4100 2574 66 83                   		mov.L	#8, r3
 4101 2576 66 04                   		mov.L	#0, r4
 4102 2578 EF B1                   		mov.L	r11, r1
 4103 257a EF C2                   		mov.L	r12, r2
 4104 257c 05 00 00 00             		bsr	_rotrFixed64
 4105 2580 EF 15                   		mov.L	r1, r5
 4106 2582 EF 26                   		mov.L	r2, r6
 4107 2584 EF 87                   		mov.L	r8, r7
 4108 2586 FC 37 57                		xor	r5, r7
 4109 2589 EB A7 DB 01             		mov.L	r7, 1900[r10]
 4110 258d EF 9B                   		mov.L	r9, r11
 4111 258f FC 37 6B                		xor	r6, r11
 4112 2592 EB AB DC 01             		mov.L	r11, 1904[r10]
 4113 2596 ED A5 02                		mov.L	8[r10], r5
 4114 2599 71 54 50                		add	#0x50, r5, r4
 4115 259c EC 45                   		mov.L	[r4], r5
 4116 259e A8 4E                   		mov.L	4[r4], r6
 4117 25a0 FD D9 64                		shll	#25, r6, r4
 4118 25a3 FD 87 5C                		shlr	#7, r5, r12
 4119 25a6 EB AC DD 01             		mov.L	r12, 1908[r10]
 4120 25aa EE AD DD 01             		mov.L	1908[r10], r13
 4121 25ae 57 4D                   		or	r4, r13
 4122 25b0 EB AD DD 01             		mov.L	r13, 1908[r10]
 4123 25b4 FD 87 67                		shlr	#7, r6, r7
 4124 25b7 EB A7 DE 01             		mov.L	r7, 1912[r10]
 4125 25bb EE AB DB 01             		mov.L	1900[r10], r11
 4126 25bf 06 A2 0D AB DD 01       		xor	1908[r10].L, r11
 4127 25c5 EB AB DF 01             		mov.L	r11, 1916[r10]
 4128 25c9 EE AC DC 01             		mov.L	1904[r10], r12
 4129 25cd 06 A2 0D AC DE 01       		xor	1912[r10].L, r12
 4130 25d3 EB AC E0 01             		mov.L	r12, 1920[r10]
 4131 25d7 EE A7 DA 01             		mov.L	1896[r10], r7
 4132 25db EE AB D9 01             		mov.L	1892[r10], r11
 4133 25df EE AC DF 01             		mov.L	1916[r10], r12
 4134 25e3 FF 2D CB                		add	r12, r11, r13
 4135 25e6 06 A2 02 A7 E0 01       		adc 1920[r10],r7
 4136 25ec EB A7 5C 03             		mov.L	r7, 3440[r10]
 4137 25f0 EB AD 5B 03             		mov.L	r13, 3436[r10]
 4138 25f4 ED A5 02                		mov.L	8[r10], r5
 4139 25f7 71 55 48                		add	#0x48, r5
 4140 25fa EC 52                   		mov.L	[r5], r2
 4141 25fc A8 5B                   		mov.L	4[r5], r3
 4142 25fe ED A5 02                		mov.L	8[r10], r5
 4143 2601 71 54 48                		add	#0x48, r5, r4
 4144 2604 EE A7 5C 03             		mov.L	3440[r10], r7
 4145 2608 EE AB 5B 03             		mov.L	3436[r10], r11
 4146 260c FF 2D 2B                		add	r2, r11, r13
 4147 260f FC 0B 37                		adc	r3, r7
 4148 2612 EB A7 E2 01             		mov.L	r7, 1928[r10]
 4149 2616 EB AD E1 01             		mov.L	r13, 1924[r10]
 4150 261a E2 A4 E1 01             		mov.L	1924[r10], [r4]
 4151 261e E6 A4 E2 01 01          		mov.L	1928[r10], 4[r4]
 4152 2623 EC 45                   		mov.L	[r4], r5
 4153 2625 A8 4E                   		mov.L	4[r4], r6
 4154 2627 2E 19                   		bra	.L63
 4155                             	.L62:
 4156                             		.loc 2 756 16 discriminator 6
 4157 2629 ED A5 02                		mov.L	8[r10], r5
 4158 262c 71 54 48                		add	#0x48, r5, r4
 4159 262f ED A5 14                		mov.L	80[r10], r5
 4160 2632 ED 52 22                		mov.L	136[r5], r2
 4161 2635 ED 53 23                		mov.L	140[r5], r3
 4162 2638 E3 42                   		mov.L	r2, [r4]
 4163 263a A0 4B                   		mov.L	r3, 4[r4]
 4164 263c EC 45                   		mov.L	[r4], r5
 4165 263e A8 4E                   		mov.L	4[r4], r6
 4166                             	.L63:
 4167                             		.loc 2 756 16 discriminator 8
 4168 2640 EF 67                   		mov.L	r6, r7
 4169 2642 EE AB D1 01             		mov.L	1860[r10], r11
 4170 2646 FF 2D B5                		add	r11, r5, r13
 4171 2649 06 A2 02 A7 D2 01       		adc 1864[r10],r7
 4172 264f EB A7 5E 03             		mov.L	r7, 3448[r10]
 4173 2653 EB AD 5D 03             		mov.L	r13, 3444[r10]
 4174 2657 ED A5 10                		mov.L	64[r10], r5
 4175 265a ED A6 11                		mov.L	68[r10], r6
 4176 265d EE AD 5E 03             		mov.L	3448[r10], r13
 4177 2661 EE A7 5D 03             		mov.L	3444[r10], r7
 4178 2665 FF 2C 57                		add	r5, r7, r12
 4179 2668 FC 0B 6D                		adc	r6, r13
 4180 266b EB AD E4 01             		mov.L	r13, 1936[r10]
 4181 266f EB AC E3 01             		mov.L	r12, 1932[r10]
 4182 2673 E6 AA E3 01 10          		mov.L	1932[r10], 64[r10]
 4183 2678 E6 AA E4 01 11          		mov.L	1936[r10], 68[r10]
 4184 267d ED A3 08                		mov.L	32[r10], r3
 4185 2680 ED A4 09                		mov.L	36[r10], r4
 4186 2683 ED A5 10                		mov.L	64[r10], r5
 4187 2686 ED A6 11                		mov.L	68[r10], r6
 4188 2689 EF 4D                   		mov.L	r4, r13
 4189 268b FF 2C 53                		add	r5, r3, r12
 4190 268e FC 0B 6D                		adc	r6, r13
 4191 2691 EB AD E6 01             		mov.L	r13, 1944[r10]
 4192 2695 EB AC E5 01             		mov.L	r12, 1940[r10]
 4193 2699 E6 AA E5 01 08          		mov.L	1940[r10], 32[r10]
 4194 269e E6 AA E6 01 09          		mov.L	1944[r10], 36[r10]
 4195 26a3 ED A5 12                		mov.L	72[r10], r5
 4196 26a6 ED A6 13                		mov.L	76[r10], r6
 4197 26a9 75 43 1C                		mov.L	#28, r3
 4198 26ac 66 04                   		mov.L	#0, r4
 4199 26ae EF 51                   		mov.L	r5, r1
 4200 26b0 EF 62                   		mov.L	r6, r2
 4201 26b2 05 00 00 00             		bsr	_rotrFixed64
 4202 26b6 EF 1B                   		mov.L	r1, r11
 4203 26b8 EF 2C                   		mov.L	r2, r12
 4204 26ba ED A5 12                		mov.L	72[r10], r5
 4205 26bd ED A6 13                		mov.L	76[r10], r6
 4206 26c0 75 43 22                		mov.L	#34, r3
 4207 26c3 66 04                   		mov.L	#0, r4
 4208 26c5 EF 51                   		mov.L	r5, r1
 4209 26c7 EF 62                   		mov.L	r6, r2
 4210 26c9 05 00 00 00             		bsr	_rotrFixed64
 4211 26cd EF 15                   		mov.L	r1, r5
 4212 26cf EF 26                   		mov.L	r2, r6
 4213 26d1 EF BD                   		mov.L	r11, r13
 4214 26d3 FC 37 5D                		xor	r5, r13
 4215 26d6 EB AD E7 01             		mov.L	r13, 1948[r10]
 4216 26da EF C7                   		mov.L	r12, r7
 4217 26dc FC 37 67                		xor	r6, r7
 4218 26df EB A7 E8 01             		mov.L	r7, 1952[r10]
 4219 26e3 ED A5 12                		mov.L	72[r10], r5
 4220 26e6 ED A6 13                		mov.L	76[r10], r6
 4221 26e9 75 43 27                		mov.L	#39, r3
 4222 26ec 66 04                   		mov.L	#0, r4
 4223 26ee EF 51                   		mov.L	r5, r1
 4224 26f0 EF 62                   		mov.L	r6, r2
 4225 26f2 05 00 00 00             		bsr	_rotrFixed64
 4226 26f6 EF 15                   		mov.L	r1, r5
 4227 26f8 EF 26                   		mov.L	r2, r6
 4228 26fa EE AB E7 01             		mov.L	1948[r10], r11
 4229 26fe FC 37 5B                		xor	r5, r11
 4230 2701 EB AB E9 01             		mov.L	r11, 1956[r10]
 4231 2705 EE AC E8 01             		mov.L	1952[r10], r12
 4232 2709 FC 37 6C                		xor	r6, r12
 4233 270c EB AC EA 01             		mov.L	r12, 1960[r10]
 4234 2710 ED A3 12                		mov.L	72[r10], r3
 4235 2713 ED A4 13                		mov.L	76[r10], r4
 4236 2716 ED A5 04                		mov.L	16[r10], r5
 4237 2719 ED A6 05                		mov.L	20[r10], r6
 4238 271c FF 4D 53                		and	r5, r3, r13
 4239 271f EB AD EB 01             		mov.L	r13, 1964[r10]
 4240 2723 FF 47 64                		and	r6, r4, r7
 4241 2726 EB A7 EC 01             		mov.L	r7, 1968[r10]
 4242 272a ED A1 06                		mov.L	24[r10], r1
 4243 272d ED A2 07                		mov.L	28[r10], r2
 4244 2730 ED A3 12                		mov.L	72[r10], r3
 4245 2733 ED A4 13                		mov.L	76[r10], r4
 4246 2736 ED A5 04                		mov.L	16[r10], r5
 4247 2739 ED A6 05                		mov.L	20[r10], r6
 4248 273c FF 5B 53                		or	r5, r3, r11
 4249 273f EB AB ED 01             		mov.L	r11, 1972[r10]
 4250 2743 FF 5C 64                		or	r6, r4, r12
 4251 2746 EB AC EE 01             		mov.L	r12, 1976[r10]
 4252 274a EF 1D                   		mov.L	r1, r13
 4253 274c 06 92 AD ED 01          		and	1972[r10], r13
 4254 2751 EB AD EF 01             		mov.L	r13, 1980[r10]
 4255 2755 EF 27                   		mov.L	r2, r7
 4256 2757 06 92 A7 EE 01          		and	1976[r10], r7
 4257 275c EB A7 F0 01             		mov.L	r7, 1984[r10]
 4258 2760 EE AB EB 01             		mov.L	1964[r10], r11
 4259 2764 EE AC EF 01             		mov.L	1980[r10], r12
 4260 2768 57 CB                   		or	r12, r11
 4261 276a EB AB F1 01             		mov.L	r11, 1988[r10]
 4262 276e EE AD EC 01             		mov.L	1968[r10], r13
 4263 2772 EE A7 F0 01             		mov.L	1984[r10], r7
 4264 2776 57 7D                   		or	r7, r13
 4265 2778 EB AD F2 01             		mov.L	r13, 1992[r10]
 4266 277c EE AC EA 01             		mov.L	1960[r10], r12
 4267 2780 EE AD E9 01             		mov.L	1956[r10], r13
 4268 2784 EE A7 F1 01             		mov.L	1988[r10], r7
 4269 2788 FF 2B 7D                		add	r7, r13, r11
 4270 278b 06 A2 02 AC F2 01       		adc 1992[r10],r12
 4271 2791 EB AC 60 03             		mov.L	r12, 3456[r10]
 4272 2795 EB AB 5F 03             		mov.L	r11, 3452[r10]
 4273 2799 ED A5 10                		mov.L	64[r10], r5
 4274 279c ED A6 11                		mov.L	68[r10], r6
 4275 279f EE AC 60 03             		mov.L	3456[r10], r12
 4276 27a3 EE AD 5F 03             		mov.L	3452[r10], r13
 4277 27a7 FF 2B 5D                		add	r5, r13, r11
 4278 27aa FC 0B 6C                		adc	r6, r12
 4279 27ad EB AC F4 01             		mov.L	r12, 2000[r10]
 4280 27b1 EB AB F3 01             		mov.L	r11, 1996[r10]
 4281 27b5 E6 AA F3 01 10          		mov.L	1996[r10], 64[r10]
 4282 27ba E6 AA F4 01 11          		mov.L	2000[r10], 68[r10]
 4283                             		.loc 2 756 23 is_stmt 1 discriminator 8
 4284 27bf ED A5 08                		mov.L	32[r10], r5
 4285 27c2 ED A6 09                		mov.L	36[r10], r6
 4286 27c5 66 E3                   		mov.L	#14, r3
 4287 27c7 66 04                   		mov.L	#0, r4
 4288 27c9 EF 51                   		mov.L	r5, r1
 4289 27cb EF 62                   		mov.L	r6, r2
 4290 27cd 05 00 00 00             		bsr	_rotrFixed64
 4291 27d1 EF 1B                   		mov.L	r1, r11
 4292 27d3 EF 2C                   		mov.L	r2, r12
 4293 27d5 ED A5 08                		mov.L	32[r10], r5
 4294 27d8 ED A6 09                		mov.L	36[r10], r6
 4295 27db 75 43 12                		mov.L	#18, r3
 4296 27de 66 04                   		mov.L	#0, r4
 4297 27e0 EF 51                   		mov.L	r5, r1
 4298 27e2 EF 62                   		mov.L	r6, r2
 4299 27e4 05 00 00 00             		bsr	_rotrFixed64
 4300 27e8 EF 15                   		mov.L	r1, r5
 4301 27ea EF 26                   		mov.L	r2, r6
 4302 27ec EF BD                   		mov.L	r11, r13
 4303 27ee FC 37 5D                		xor	r5, r13
 4304 27f1 EB AD F5 01             		mov.L	r13, 2004[r10]
 4305 27f5 EF C7                   		mov.L	r12, r7
 4306 27f7 FC 37 67                		xor	r6, r7
 4307 27fa EB A7 F6 01             		mov.L	r7, 2008[r10]
 4308 27fe ED A5 08                		mov.L	32[r10], r5
 4309 2801 ED A6 09                		mov.L	36[r10], r6
 4310 2804 75 43 29                		mov.L	#41, r3
 4311 2807 66 04                   		mov.L	#0, r4
 4312 2809 EF 51                   		mov.L	r5, r1
 4313 280b EF 62                   		mov.L	r6, r2
 4314 280d 05 00 00 00             		bsr	_rotrFixed64
 4315 2811 EF 15                   		mov.L	r1, r5
 4316 2813 EF 26                   		mov.L	r2, r6
 4317 2815 EE AB F5 01             		mov.L	2004[r10], r11
 4318 2819 FC 37 5B                		xor	r5, r11
 4319 281c EB AB F7 01             		mov.L	r11, 2012[r10]
 4320 2820 EE AC F6 01             		mov.L	2008[r10], r12
 4321 2824 FC 37 6C                		xor	r6, r12
 4322 2827 EB AC F8 01             		mov.L	r12, 2016[r10]
 4323 282b ED AB 0C                		mov.L	48[r10], r11
 4324 282e ED AC 0D                		mov.L	52[r10], r12
 4325 2831 ED A3 08                		mov.L	32[r10], r3
 4326 2834 ED A4 09                		mov.L	36[r10], r4
 4327 2837 ED A1 0A                		mov.L	40[r10], r1
 4328 283a ED A2 0B                		mov.L	44[r10], r2
 4329 283d ED A5 0C                		mov.L	48[r10], r5
 4330 2840 ED A6 0D                		mov.L	52[r10], r6
 4331 2843 EF 1D                   		mov.L	r1, r13
 4332 2845 FC 37 5D                		xor	r5, r13
 4333 2848 EB AD F9 01             		mov.L	r13, 2020[r10]
 4334 284c EF 27                   		mov.L	r2, r7
 4335 284e FC 37 67                		xor	r6, r7
 4336 2851 EB A7 FA 01             		mov.L	r7, 2024[r10]
 4337 2855 EF 3D                   		mov.L	r3, r13
 4338 2857 06 92 AD F9 01          		and	2020[r10], r13
 4339 285c EB AD FB 01             		mov.L	r13, 2028[r10]
 4340 2860 EF 47                   		mov.L	r4, r7
 4341 2862 06 92 A7 FA 01          		and	2024[r10], r7
 4342 2867 EB A7 FC 01             		mov.L	r7, 2032[r10]
 4343 286b EE AD FB 01             		mov.L	2028[r10], r13
 4344 286f FC 37 BD                		xor	r11, r13
 4345 2872 EB AD FD 01             		mov.L	r13, 2036[r10]
 4346 2876 EE A7 FC 01             		mov.L	2032[r10], r7
 4347 287a FC 37 C7                		xor	r12, r7
 4348 287d EB A7 FE 01             		mov.L	r7, 2040[r10]
 4349 2881 EE AC F8 01             		mov.L	2016[r10], r12
 4350 2885 EE AD F7 01             		mov.L	2012[r10], r13
 4351 2889 EE A7 FD 01             		mov.L	2036[r10], r7
 4352 288d FF 2B 7D                		add	r7, r13, r11
 4353 2890 06 A2 02 AC FE 01       		adc 2040[r10],r12
 4354 2896 EB AC 00 02             		mov.L	r12, 2048[r10]
 4355 289a EB AB FF 01             		mov.L	r11, 2044[r10]
 4356 289e EC A5                   		mov.L	[r10], r5
 4357 28a0 62 A5                   		add	#10, r5
 4358 28a2 FD C3 54                		shll	#3, r5, r4
 4359 28a5 ED A5 01                		mov.L	4[r10], r5
 4360 28a8 4B 54                   		add	r5, r4
 4361 28aa EC 45                   		mov.L	[r4], r5
 4362 28ac A8 4E                   		mov.L	4[r4], r6
 4363 28ae EE AC 00 02             		mov.L	2048[r10], r12
 4364 28b2 EE AD FF 01             		mov.L	2044[r10], r13
 4365 28b6 FF 2B 5D                		add	r5, r13, r11
 4366 28b9 FC 0B 6C                		adc	r6, r12
 4367 28bc EB AC 02 02             		mov.L	r12, 2056[r10]
 4368 28c0 EB AB 01 02             		mov.L	r11, 2052[r10]
 4369 28c4 EC A5                   		mov.L	[r10], r5
 4370 28c6 61 05                   		cmp	#0, r5
 4371 28c8 3A 89 01                		beq	.L64
 4372                             		.loc 2 756 23 is_stmt 0 discriminator 9
 4373 28cb ED A5 02                		mov.L	8[r10], r5
 4374 28ce 71 55 40                		add	#0x40, r5
 4375 28d1 EC 5B                   		mov.L	[r5], r11
 4376 28d3 ED 5C 01                		mov.L	4[r5], r12
 4377 28d6 75 43 13                		mov.L	#19, r3
 4378 28d9 66 04                   		mov.L	#0, r4
 4379 28db EF B1                   		mov.L	r11, r1
 4380 28dd EF C2                   		mov.L	r12, r2
 4381 28df 05 00 00 00             		bsr	_rotrFixed64
 4382 28e3 EF 18                   		mov.L	r1, r8
 4383 28e5 EF 29                   		mov.L	r2, r9
 4384 28e7 ED A5 02                		mov.L	8[r10], r5
 4385 28ea 71 55 40                		add	#0x40, r5
 4386 28ed EC 5B                   		mov.L	[r5], r11
 4387 28ef ED 5C 01                		mov.L	4[r5], r12
 4388 28f2 75 43 3D                		mov.L	#61, r3
 4389 28f5 66 04                   		mov.L	#0, r4
 4390 28f7 EF B1                   		mov.L	r11, r1
 4391 28f9 EF C2                   		mov.L	r12, r2
 4392 28fb 05 00 00 00             		bsr	_rotrFixed64
 4393 28ff EF 15                   		mov.L	r1, r5
 4394 2901 EF 26                   		mov.L	r2, r6
 4395 2903 EF 8B                   		mov.L	r8, r11
 4396 2905 FC 37 5B                		xor	r5, r11
 4397 2908 EB AB 03 02             		mov.L	r11, 2060[r10]
 4398 290c EF 9C                   		mov.L	r9, r12
 4399 290e FC 37 6C                		xor	r6, r12
 4400 2911 EB AC 04 02             		mov.L	r12, 2064[r10]
 4401 2915 ED A5 02                		mov.L	8[r10], r5
 4402 2918 71 54 40                		add	#0x40, r5, r4
 4403 291b EC 45                   		mov.L	[r4], r5
 4404 291d A8 4E                   		mov.L	4[r4], r6
 4405 291f FD DA 64                		shll	#26, r6, r4
 4406 2922 FD 86 5D                		shlr	#6, r5, r13
 4407 2925 EB AD 05 02             		mov.L	r13, 2068[r10]
 4408 2929 EE A7 05 02             		mov.L	2068[r10], r7
 4409 292d 57 47                   		or	r4, r7
 4410 292f EB A7 05 02             		mov.L	r7, 2068[r10]
 4411 2933 FD 86 6B                		shlr	#6, r6, r11
 4412 2936 EB AB 06 02             		mov.L	r11, 2072[r10]
 4413 293a EE AC 03 02             		mov.L	2060[r10], r12
 4414 293e 06 A2 0D AC 05 02       		xor	2068[r10].L, r12
 4415 2944 EB AC 07 02             		mov.L	r12, 2076[r10]
 4416 2948 EE AD 04 02             		mov.L	2064[r10], r13
 4417 294c 06 A2 0D AD 06 02       		xor	2072[r10].L, r13
 4418 2952 EB AD 08 02             		mov.L	r13, 2080[r10]
 4419 2956 ED A5 02                		mov.L	8[r10], r5
 4420 2959 71 54 18                		add	#24, r5, r4
 4421 295c EC 45                   		mov.L	[r4], r5
 4422 295e A8 4E                   		mov.L	4[r4], r6
 4423 2960 EE AB 08 02             		mov.L	2080[r10], r11
 4424 2964 EE AC 07 02             		mov.L	2076[r10], r12
 4425 2968 FF 27 5C                		add	r5, r12, r7
 4426 296b FC 0B 6B                		adc	r6, r11
 4427 296e EB AB 0A 02             		mov.L	r11, 2088[r10]
 4428 2972 EB A7 09 02             		mov.L	r7, 2084[r10]
 4429 2976 ED A5 02                		mov.L	8[r10], r5
 4430 2979 71 55 58                		add	#0x58, r5
 4431 297c EC 5B                   		mov.L	[r5], r11
 4432 297e ED 5C 01                		mov.L	4[r5], r12
 4433 2981 66 13                   		mov.L	#1, r3
 4434 2983 66 04                   		mov.L	#0, r4
 4435 2985 EF B1                   		mov.L	r11, r1
 4436 2987 EF C2                   		mov.L	r12, r2
 4437 2989 05 00 00 00             		bsr	_rotrFixed64
 4438 298d EF 18                   		mov.L	r1, r8
 4439 298f EF 29                   		mov.L	r2, r9
 4440 2991 ED A5 02                		mov.L	8[r10], r5
 4441 2994 71 55 58                		add	#0x58, r5
 4442 2997 EC 5B                   		mov.L	[r5], r11
 4443 2999 ED 5C 01                		mov.L	4[r5], r12
 4444 299c 66 83                   		mov.L	#8, r3
 4445 299e 66 04                   		mov.L	#0, r4
 4446 29a0 EF B1                   		mov.L	r11, r1
 4447 29a2 EF C2                   		mov.L	r12, r2
 4448 29a4 05 00 00 00             		bsr	_rotrFixed64
 4449 29a8 EF 15                   		mov.L	r1, r5
 4450 29aa EF 26                   		mov.L	r2, r6
 4451 29ac EF 87                   		mov.L	r8, r7
 4452 29ae FC 37 57                		xor	r5, r7
 4453 29b1 EB A7 0B 02             		mov.L	r7, 2092[r10]
 4454 29b5 EF 9B                   		mov.L	r9, r11
 4455 29b7 FC 37 6B                		xor	r6, r11
 4456 29ba EB AB 0C 02             		mov.L	r11, 2096[r10]
 4457 29be ED A5 02                		mov.L	8[r10], r5
 4458 29c1 71 54 58                		add	#0x58, r5, r4
 4459 29c4 EC 45                   		mov.L	[r4], r5
 4460 29c6 A8 4E                   		mov.L	4[r4], r6
 4461 29c8 FD D9 64                		shll	#25, r6, r4
 4462 29cb FD 87 5C                		shlr	#7, r5, r12
 4463 29ce EB AC 0D 02             		mov.L	r12, 2100[r10]
 4464 29d2 EE AD 0D 02             		mov.L	2100[r10], r13
 4465 29d6 57 4D                   		or	r4, r13
 4466 29d8 EB AD 0D 02             		mov.L	r13, 2100[r10]
 4467 29dc FD 87 67                		shlr	#7, r6, r7
 4468 29df EB A7 0E 02             		mov.L	r7, 2104[r10]
 4469 29e3 EE AB 0B 02             		mov.L	2092[r10], r11
 4470 29e7 06 A2 0D AB 0D 02       		xor	2100[r10].L, r11
 4471 29ed EB AB 0F 02             		mov.L	r11, 2108[r10]
 4472 29f1 EE AC 0C 02             		mov.L	2096[r10], r12
 4473 29f5 06 A2 0D AC 0E 02       		xor	2104[r10].L, r12
 4474 29fb EB AC 10 02             		mov.L	r12, 2112[r10]
 4475 29ff EE A7 0A 02             		mov.L	2088[r10], r7
 4476 2a03 EE AB 09 02             		mov.L	2084[r10], r11
 4477 2a07 EE AC 0F 02             		mov.L	2108[r10], r12
 4478 2a0b FF 2D CB                		add	r12, r11, r13
 4479 2a0e 06 A2 02 A7 10 02       		adc 2112[r10],r7
 4480 2a14 EB A7 62 03             		mov.L	r7, 3464[r10]
 4481 2a18 EB AD 61 03             		mov.L	r13, 3460[r10]
 4482 2a1c ED A5 02                		mov.L	8[r10], r5
 4483 2a1f 71 55 50                		add	#0x50, r5
 4484 2a22 EC 52                   		mov.L	[r5], r2
 4485 2a24 A8 5B                   		mov.L	4[r5], r3
 4486 2a26 ED A5 02                		mov.L	8[r10], r5
 4487 2a29 71 54 50                		add	#0x50, r5, r4
 4488 2a2c EE A7 62 03             		mov.L	3464[r10], r7
 4489 2a30 EE AB 61 03             		mov.L	3460[r10], r11
 4490 2a34 FF 2D 2B                		add	r2, r11, r13
 4491 2a37 FC 0B 37                		adc	r3, r7
 4492 2a3a EB A7 12 02             		mov.L	r7, 2120[r10]
 4493 2a3e EB AD 11 02             		mov.L	r13, 2116[r10]
 4494 2a42 E2 A4 11 02             		mov.L	2116[r10], [r4]
 4495 2a46 E6 A4 12 02 01          		mov.L	2120[r10], 4[r4]
 4496 2a4b EC 45                   		mov.L	[r4], r5
 4497 2a4d A8 4E                   		mov.L	4[r4], r6
 4498 2a4f 2E 19                   		bra	.L65
 4499                             	.L64:
 4500                             		.loc 2 756 23 discriminator 10
 4501 2a51 ED A5 02                		mov.L	8[r10], r5
 4502 2a54 71 54 50                		add	#0x50, r5, r4
 4503 2a57 ED A5 14                		mov.L	80[r10], r5
 4504 2a5a ED 52 24                		mov.L	144[r5], r2
 4505 2a5d ED 53 25                		mov.L	148[r5], r3
 4506 2a60 E3 42                   		mov.L	r2, [r4]
 4507 2a62 A0 4B                   		mov.L	r3, 4[r4]
 4508 2a64 EC 45                   		mov.L	[r4], r5
 4509 2a66 A8 4E                   		mov.L	4[r4], r6
 4510                             	.L65:
 4511                             		.loc 2 756 23 discriminator 12
 4512 2a68 EF 67                   		mov.L	r6, r7
 4513 2a6a EE AB 01 02             		mov.L	2052[r10], r11
 4514 2a6e FF 2D B5                		add	r11, r5, r13
 4515 2a71 06 A2 02 A7 02 02       		adc 2056[r10],r7
 4516 2a77 EB A7 64 03             		mov.L	r7, 3472[r10]
 4517 2a7b EB AD 63 03             		mov.L	r13, 3468[r10]
 4518 2a7f ED A5 0E                		mov.L	56[r10], r5
 4519 2a82 ED A6 0F                		mov.L	60[r10], r6
 4520 2a85 EE AD 64 03             		mov.L	3472[r10], r13
 4521 2a89 EE A7 63 03             		mov.L	3468[r10], r7
 4522 2a8d FF 2C 57                		add	r5, r7, r12
 4523 2a90 FC 0B 6D                		adc	r6, r13
 4524 2a93 EB AD 14 02             		mov.L	r13, 2128[r10]
 4525 2a97 EB AC 13 02             		mov.L	r12, 2124[r10]
 4526 2a9b E6 AA 13 02 0E          		mov.L	2124[r10], 56[r10]
 4527 2aa0 E6 AA 14 02 0F          		mov.L	2128[r10], 60[r10]
 4528 2aa5 ED A3 06                		mov.L	24[r10], r3
 4529 2aa8 ED A4 07                		mov.L	28[r10], r4
 4530 2aab ED A5 0E                		mov.L	56[r10], r5
 4531 2aae ED A6 0F                		mov.L	60[r10], r6
 4532 2ab1 EF 4D                   		mov.L	r4, r13
 4533 2ab3 FF 2C 53                		add	r5, r3, r12
 4534 2ab6 FC 0B 6D                		adc	r6, r13
 4535 2ab9 EB AD 16 02             		mov.L	r13, 2136[r10]
 4536 2abd EB AC 15 02             		mov.L	r12, 2132[r10]
 4537 2ac1 E6 AA 15 02 06          		mov.L	2132[r10], 24[r10]
 4538 2ac6 E6 AA 16 02 07          		mov.L	2136[r10], 28[r10]
 4539 2acb ED A5 10                		mov.L	64[r10], r5
 4540 2ace ED A6 11                		mov.L	68[r10], r6
 4541 2ad1 75 43 1C                		mov.L	#28, r3
 4542 2ad4 66 04                   		mov.L	#0, r4
 4543 2ad6 EF 51                   		mov.L	r5, r1
 4544 2ad8 EF 62                   		mov.L	r6, r2
 4545 2ada 05 00 00 00             		bsr	_rotrFixed64
 4546 2ade EF 1B                   		mov.L	r1, r11
 4547 2ae0 EF 2C                   		mov.L	r2, r12
 4548 2ae2 ED A5 10                		mov.L	64[r10], r5
 4549 2ae5 ED A6 11                		mov.L	68[r10], r6
 4550 2ae8 75 43 22                		mov.L	#34, r3
 4551 2aeb 66 04                   		mov.L	#0, r4
 4552 2aed EF 51                   		mov.L	r5, r1
 4553 2aef EF 62                   		mov.L	r6, r2
 4554 2af1 05 00 00 00             		bsr	_rotrFixed64
 4555 2af5 EF 15                   		mov.L	r1, r5
 4556 2af7 EF 26                   		mov.L	r2, r6
 4557 2af9 EF BD                   		mov.L	r11, r13
 4558 2afb FC 37 5D                		xor	r5, r13
 4559 2afe EB AD 17 02             		mov.L	r13, 2140[r10]
 4560 2b02 EF C7                   		mov.L	r12, r7
 4561 2b04 FC 37 67                		xor	r6, r7
 4562 2b07 EB A7 18 02             		mov.L	r7, 2144[r10]
 4563 2b0b ED A5 10                		mov.L	64[r10], r5
 4564 2b0e ED A6 11                		mov.L	68[r10], r6
 4565 2b11 75 43 27                		mov.L	#39, r3
 4566 2b14 66 04                   		mov.L	#0, r4
 4567 2b16 EF 51                   		mov.L	r5, r1
 4568 2b18 EF 62                   		mov.L	r6, r2
 4569 2b1a 05 00 00 00             		bsr	_rotrFixed64
 4570 2b1e EF 15                   		mov.L	r1, r5
 4571 2b20 EF 26                   		mov.L	r2, r6
 4572 2b22 EE AB 17 02             		mov.L	2140[r10], r11
 4573 2b26 FC 37 5B                		xor	r5, r11
 4574 2b29 EB AB 19 02             		mov.L	r11, 2148[r10]
 4575 2b2d EE AC 18 02             		mov.L	2144[r10], r12
 4576 2b31 FC 37 6C                		xor	r6, r12
 4577 2b34 EB AC 1A 02             		mov.L	r12, 2152[r10]
 4578 2b38 ED A3 10                		mov.L	64[r10], r3
 4579 2b3b ED A4 11                		mov.L	68[r10], r4
 4580 2b3e ED A5 12                		mov.L	72[r10], r5
 4581 2b41 ED A6 13                		mov.L	76[r10], r6
 4582 2b44 FF 4D 53                		and	r5, r3, r13
 4583 2b47 EB AD 1B 02             		mov.L	r13, 2156[r10]
 4584 2b4b FF 47 64                		and	r6, r4, r7
 4585 2b4e EB A7 1C 02             		mov.L	r7, 2160[r10]
 4586 2b52 ED A1 04                		mov.L	16[r10], r1
 4587 2b55 ED A2 05                		mov.L	20[r10], r2
 4588 2b58 ED A3 10                		mov.L	64[r10], r3
 4589 2b5b ED A4 11                		mov.L	68[r10], r4
 4590 2b5e ED A5 12                		mov.L	72[r10], r5
 4591 2b61 ED A6 13                		mov.L	76[r10], r6
 4592 2b64 FF 5B 53                		or	r5, r3, r11
 4593 2b67 EB AB 1D 02             		mov.L	r11, 2164[r10]
 4594 2b6b FF 5C 64                		or	r6, r4, r12
 4595 2b6e EB AC 1E 02             		mov.L	r12, 2168[r10]
 4596 2b72 EF 1D                   		mov.L	r1, r13
 4597 2b74 06 92 AD 1D 02          		and	2164[r10], r13
 4598 2b79 EB AD 1F 02             		mov.L	r13, 2172[r10]
 4599 2b7d EF 27                   		mov.L	r2, r7
 4600 2b7f 06 92 A7 1E 02          		and	2168[r10], r7
 4601 2b84 EB A7 20 02             		mov.L	r7, 2176[r10]
 4602 2b88 EE AB 1B 02             		mov.L	2156[r10], r11
 4603 2b8c EE AC 1F 02             		mov.L	2172[r10], r12
 4604 2b90 57 CB                   		or	r12, r11
 4605 2b92 EB AB 21 02             		mov.L	r11, 2180[r10]
 4606 2b96 EE AD 1C 02             		mov.L	2160[r10], r13
 4607 2b9a EE A7 20 02             		mov.L	2176[r10], r7
 4608 2b9e 57 7D                   		or	r7, r13
 4609 2ba0 EB AD 22 02             		mov.L	r13, 2184[r10]
 4610 2ba4 EE AC 1A 02             		mov.L	2152[r10], r12
 4611 2ba8 EE AD 19 02             		mov.L	2148[r10], r13
 4612 2bac EE A7 21 02             		mov.L	2180[r10], r7
 4613 2bb0 FF 2B 7D                		add	r7, r13, r11
 4614 2bb3 06 A2 02 AC 22 02       		adc 2184[r10],r12
 4615 2bb9 EB AC 66 03             		mov.L	r12, 3480[r10]
 4616 2bbd EB AB 65 03             		mov.L	r11, 3476[r10]
 4617 2bc1 ED A5 0E                		mov.L	56[r10], r5
 4618 2bc4 ED A6 0F                		mov.L	60[r10], r6
 4619 2bc7 EE AC 66 03             		mov.L	3480[r10], r12
 4620 2bcb EE AD 65 03             		mov.L	3476[r10], r13
 4621 2bcf FF 2B 5D                		add	r5, r13, r11
 4622 2bd2 FC 0B 6C                		adc	r6, r12
 4623 2bd5 EB AC 24 02             		mov.L	r12, 2192[r10]
 4624 2bd9 EB AB 23 02             		mov.L	r11, 2188[r10]
 4625 2bdd E6 AA 23 02 0E          		mov.L	2188[r10], 56[r10]
 4626 2be2 E6 AA 24 02 0F          		mov.L	2192[r10], 60[r10]
 4627                             		.loc 2 756 30 is_stmt 1 discriminator 12
 4628 2be7 ED A5 06                		mov.L	24[r10], r5
 4629 2bea ED A6 07                		mov.L	28[r10], r6
 4630 2bed 66 E3                   		mov.L	#14, r3
 4631 2bef 66 04                   		mov.L	#0, r4
 4632 2bf1 EF 51                   		mov.L	r5, r1
 4633 2bf3 EF 62                   		mov.L	r6, r2
 4634 2bf5 05 00 00 00             		bsr	_rotrFixed64
 4635 2bf9 EF 1B                   		mov.L	r1, r11
 4636 2bfb EF 2C                   		mov.L	r2, r12
 4637 2bfd ED A5 06                		mov.L	24[r10], r5
 4638 2c00 ED A6 07                		mov.L	28[r10], r6
 4639 2c03 75 43 12                		mov.L	#18, r3
 4640 2c06 66 04                   		mov.L	#0, r4
 4641 2c08 EF 51                   		mov.L	r5, r1
 4642 2c0a EF 62                   		mov.L	r6, r2
 4643 2c0c 05 00 00 00             		bsr	_rotrFixed64
 4644 2c10 EF 15                   		mov.L	r1, r5
 4645 2c12 EF 26                   		mov.L	r2, r6
 4646 2c14 EF BD                   		mov.L	r11, r13
 4647 2c16 FC 37 5D                		xor	r5, r13
 4648 2c19 EB AD 25 02             		mov.L	r13, 2196[r10]
 4649 2c1d EF C7                   		mov.L	r12, r7
 4650 2c1f FC 37 67                		xor	r6, r7
 4651 2c22 EB A7 26 02             		mov.L	r7, 2200[r10]
 4652 2c26 ED A5 06                		mov.L	24[r10], r5
 4653 2c29 ED A6 07                		mov.L	28[r10], r6
 4654 2c2c 75 43 29                		mov.L	#41, r3
 4655 2c2f 66 04                   		mov.L	#0, r4
 4656 2c31 EF 51                   		mov.L	r5, r1
 4657 2c33 EF 62                   		mov.L	r6, r2
 4658 2c35 05 00 00 00             		bsr	_rotrFixed64
 4659 2c39 EF 15                   		mov.L	r1, r5
 4660 2c3b EF 26                   		mov.L	r2, r6
 4661 2c3d EE AB 25 02             		mov.L	2196[r10], r11
 4662 2c41 FC 37 5B                		xor	r5, r11
 4663 2c44 EB AB 27 02             		mov.L	r11, 2204[r10]
 4664 2c48 EE AC 26 02             		mov.L	2200[r10], r12
 4665 2c4c FC 37 6C                		xor	r6, r12
 4666 2c4f EB AC 28 02             		mov.L	r12, 2208[r10]
 4667 2c53 ED AB 0A                		mov.L	40[r10], r11
 4668 2c56 ED AC 0B                		mov.L	44[r10], r12
 4669 2c59 ED A3 06                		mov.L	24[r10], r3
 4670 2c5c ED A4 07                		mov.L	28[r10], r4
 4671 2c5f ED A1 08                		mov.L	32[r10], r1
 4672 2c62 ED A2 09                		mov.L	36[r10], r2
 4673 2c65 ED A5 0A                		mov.L	40[r10], r5
 4674 2c68 ED A6 0B                		mov.L	44[r10], r6
 4675 2c6b EF 1D                   		mov.L	r1, r13
 4676 2c6d FC 37 5D                		xor	r5, r13
 4677 2c70 EB AD 29 02             		mov.L	r13, 2212[r10]
 4678 2c74 EF 27                   		mov.L	r2, r7
 4679 2c76 FC 37 67                		xor	r6, r7
 4680 2c79 EB A7 2A 02             		mov.L	r7, 2216[r10]
 4681 2c7d EF 3D                   		mov.L	r3, r13
 4682 2c7f 06 92 AD 29 02          		and	2212[r10], r13
 4683 2c84 EB AD 2B 02             		mov.L	r13, 2220[r10]
 4684 2c88 EF 47                   		mov.L	r4, r7
 4685 2c8a 06 92 A7 2A 02          		and	2216[r10], r7
 4686 2c8f EB A7 2C 02             		mov.L	r7, 2224[r10]
 4687 2c93 EE AD 2B 02             		mov.L	2220[r10], r13
 4688 2c97 FC 37 BD                		xor	r11, r13
 4689 2c9a EB AD 2D 02             		mov.L	r13, 2228[r10]
 4690 2c9e EE A7 2C 02             		mov.L	2224[r10], r7
 4691 2ca2 FC 37 C7                		xor	r12, r7
 4692 2ca5 EB A7 2E 02             		mov.L	r7, 2232[r10]
 4693 2ca9 EE AC 28 02             		mov.L	2208[r10], r12
 4694 2cad EE AD 27 02             		mov.L	2204[r10], r13
 4695 2cb1 EE A7 2D 02             		mov.L	2228[r10], r7
 4696 2cb5 FF 2B 7D                		add	r7, r13, r11
 4697 2cb8 06 A2 02 AC 2E 02       		adc 2232[r10],r12
 4698 2cbe EB AC 30 02             		mov.L	r12, 2240[r10]
 4699 2cc2 EB AB 2F 02             		mov.L	r11, 2236[r10]
 4700 2cc6 EC A5                   		mov.L	[r10], r5
 4701 2cc8 62 B5                   		add	#11, r5
 4702 2cca FD C3 54                		shll	#3, r5, r4
 4703 2ccd ED A5 01                		mov.L	4[r10], r5
 4704 2cd0 4B 54                   		add	r5, r4
 4705 2cd2 EC 45                   		mov.L	[r4], r5
 4706 2cd4 A8 4E                   		mov.L	4[r4], r6
 4707 2cd6 EE AC 30 02             		mov.L	2240[r10], r12
 4708 2cda EE AD 2F 02             		mov.L	2236[r10], r13
 4709 2cde FF 2B 5D                		add	r5, r13, r11
 4710 2ce1 FC 0B 6C                		adc	r6, r12
 4711 2ce4 EB AC 32 02             		mov.L	r12, 2248[r10]
 4712 2ce8 EB AB 31 02             		mov.L	r11, 2244[r10]
 4713 2cec EC A5                   		mov.L	[r10], r5
 4714 2cee 61 05                   		cmp	#0, r5
 4715 2cf0 3A 89 01                		beq	.L66
 4716                             		.loc 2 756 30 is_stmt 0 discriminator 13
 4717 2cf3 ED A5 02                		mov.L	8[r10], r5
 4718 2cf6 71 55 48                		add	#0x48, r5
 4719 2cf9 EC 5B                   		mov.L	[r5], r11
 4720 2cfb ED 5C 01                		mov.L	4[r5], r12
 4721 2cfe 75 43 13                		mov.L	#19, r3
 4722 2d01 66 04                   		mov.L	#0, r4
 4723 2d03 EF B1                   		mov.L	r11, r1
 4724 2d05 EF C2                   		mov.L	r12, r2
 4725 2d07 05 00 00 00             		bsr	_rotrFixed64
 4726 2d0b EF 18                   		mov.L	r1, r8
 4727 2d0d EF 29                   		mov.L	r2, r9
 4728 2d0f ED A5 02                		mov.L	8[r10], r5
 4729 2d12 71 55 48                		add	#0x48, r5
 4730 2d15 EC 5B                   		mov.L	[r5], r11
 4731 2d17 ED 5C 01                		mov.L	4[r5], r12
 4732 2d1a 75 43 3D                		mov.L	#61, r3
 4733 2d1d 66 04                   		mov.L	#0, r4
 4734 2d1f EF B1                   		mov.L	r11, r1
 4735 2d21 EF C2                   		mov.L	r12, r2
 4736 2d23 05 00 00 00             		bsr	_rotrFixed64
 4737 2d27 EF 15                   		mov.L	r1, r5
 4738 2d29 EF 26                   		mov.L	r2, r6
 4739 2d2b EF 8B                   		mov.L	r8, r11
 4740 2d2d FC 37 5B                		xor	r5, r11
 4741 2d30 EB AB 33 02             		mov.L	r11, 2252[r10]
 4742 2d34 EF 9C                   		mov.L	r9, r12
 4743 2d36 FC 37 6C                		xor	r6, r12
 4744 2d39 EB AC 34 02             		mov.L	r12, 2256[r10]
 4745 2d3d ED A5 02                		mov.L	8[r10], r5
 4746 2d40 71 54 48                		add	#0x48, r5, r4
 4747 2d43 EC 45                   		mov.L	[r4], r5
 4748 2d45 A8 4E                   		mov.L	4[r4], r6
 4749 2d47 FD DA 64                		shll	#26, r6, r4
 4750 2d4a FD 86 5D                		shlr	#6, r5, r13
 4751 2d4d EB AD 35 02             		mov.L	r13, 2260[r10]
 4752 2d51 EE A7 35 02             		mov.L	2260[r10], r7
 4753 2d55 57 47                   		or	r4, r7
 4754 2d57 EB A7 35 02             		mov.L	r7, 2260[r10]
 4755 2d5b FD 86 6B                		shlr	#6, r6, r11
 4756 2d5e EB AB 36 02             		mov.L	r11, 2264[r10]
 4757 2d62 EE AC 33 02             		mov.L	2252[r10], r12
 4758 2d66 06 A2 0D AC 35 02       		xor	2260[r10].L, r12
 4759 2d6c EB AC 37 02             		mov.L	r12, 2268[r10]
 4760 2d70 EE AD 34 02             		mov.L	2256[r10], r13
 4761 2d74 06 A2 0D AD 36 02       		xor	2264[r10].L, r13
 4762 2d7a EB AD 38 02             		mov.L	r13, 2272[r10]
 4763 2d7e ED A5 02                		mov.L	8[r10], r5
 4764 2d81 71 54 20                		add	#32, r5, r4
 4765 2d84 EC 45                   		mov.L	[r4], r5
 4766 2d86 A8 4E                   		mov.L	4[r4], r6
 4767 2d88 EE AB 38 02             		mov.L	2272[r10], r11
 4768 2d8c EE AC 37 02             		mov.L	2268[r10], r12
 4769 2d90 FF 27 5C                		add	r5, r12, r7
 4770 2d93 FC 0B 6B                		adc	r6, r11
 4771 2d96 EB AB 3A 02             		mov.L	r11, 2280[r10]
 4772 2d9a EB A7 39 02             		mov.L	r7, 2276[r10]
 4773 2d9e ED A5 02                		mov.L	8[r10], r5
 4774 2da1 71 55 60                		add	#0x60, r5
 4775 2da4 EC 5B                   		mov.L	[r5], r11
 4776 2da6 ED 5C 01                		mov.L	4[r5], r12
 4777 2da9 66 13                   		mov.L	#1, r3
 4778 2dab 66 04                   		mov.L	#0, r4
 4779 2dad EF B1                   		mov.L	r11, r1
 4780 2daf EF C2                   		mov.L	r12, r2
 4781 2db1 05 00 00 00             		bsr	_rotrFixed64
 4782 2db5 EF 18                   		mov.L	r1, r8
 4783 2db7 EF 29                   		mov.L	r2, r9
 4784 2db9 ED A5 02                		mov.L	8[r10], r5
 4785 2dbc 71 55 60                		add	#0x60, r5
 4786 2dbf EC 5B                   		mov.L	[r5], r11
 4787 2dc1 ED 5C 01                		mov.L	4[r5], r12
 4788 2dc4 66 83                   		mov.L	#8, r3
 4789 2dc6 66 04                   		mov.L	#0, r4
 4790 2dc8 EF B1                   		mov.L	r11, r1
 4791 2dca EF C2                   		mov.L	r12, r2
 4792 2dcc 05 00 00 00             		bsr	_rotrFixed64
 4793 2dd0 EF 15                   		mov.L	r1, r5
 4794 2dd2 EF 26                   		mov.L	r2, r6
 4795 2dd4 EF 87                   		mov.L	r8, r7
 4796 2dd6 FC 37 57                		xor	r5, r7
 4797 2dd9 EB A7 3B 02             		mov.L	r7, 2284[r10]
 4798 2ddd EF 9B                   		mov.L	r9, r11
 4799 2ddf FC 37 6B                		xor	r6, r11
 4800 2de2 EB AB 3C 02             		mov.L	r11, 2288[r10]
 4801 2de6 ED A5 02                		mov.L	8[r10], r5
 4802 2de9 71 54 60                		add	#0x60, r5, r4
 4803 2dec EC 45                   		mov.L	[r4], r5
 4804 2dee A8 4E                   		mov.L	4[r4], r6
 4805 2df0 FD D9 64                		shll	#25, r6, r4
 4806 2df3 FD 87 5C                		shlr	#7, r5, r12
 4807 2df6 EB AC 3D 02             		mov.L	r12, 2292[r10]
 4808 2dfa EE AD 3D 02             		mov.L	2292[r10], r13
 4809 2dfe 57 4D                   		or	r4, r13
 4810 2e00 EB AD 3D 02             		mov.L	r13, 2292[r10]
 4811 2e04 FD 87 67                		shlr	#7, r6, r7
 4812 2e07 EB A7 3E 02             		mov.L	r7, 2296[r10]
 4813 2e0b EE AB 3B 02             		mov.L	2284[r10], r11
 4814 2e0f 06 A2 0D AB 3D 02       		xor	2292[r10].L, r11
 4815 2e15 EB AB 3F 02             		mov.L	r11, 2300[r10]
 4816 2e19 EE AC 3C 02             		mov.L	2288[r10], r12
 4817 2e1d 06 A2 0D AC 3E 02       		xor	2296[r10].L, r12
 4818 2e23 EB AC 40 02             		mov.L	r12, 2304[r10]
 4819 2e27 EE A7 3A 02             		mov.L	2280[r10], r7
 4820 2e2b EE AB 39 02             		mov.L	2276[r10], r11
 4821 2e2f EE AC 3F 02             		mov.L	2300[r10], r12
 4822 2e33 FF 2D CB                		add	r12, r11, r13
 4823 2e36 06 A2 02 A7 40 02       		adc 2304[r10],r7
 4824 2e3c EB A7 68 03             		mov.L	r7, 3488[r10]
 4825 2e40 EB AD 67 03             		mov.L	r13, 3484[r10]
 4826 2e44 ED A5 02                		mov.L	8[r10], r5
 4827 2e47 71 55 58                		add	#0x58, r5
 4828 2e4a EC 52                   		mov.L	[r5], r2
 4829 2e4c A8 5B                   		mov.L	4[r5], r3
 4830 2e4e ED A5 02                		mov.L	8[r10], r5
 4831 2e51 71 54 58                		add	#0x58, r5, r4
 4832 2e54 EE A7 68 03             		mov.L	3488[r10], r7
 4833 2e58 EE AB 67 03             		mov.L	3484[r10], r11
 4834 2e5c FF 2D 2B                		add	r2, r11, r13
 4835 2e5f FC 0B 37                		adc	r3, r7
 4836 2e62 EB A7 42 02             		mov.L	r7, 2312[r10]
 4837 2e66 EB AD 41 02             		mov.L	r13, 2308[r10]
 4838 2e6a E2 A4 41 02             		mov.L	2308[r10], [r4]
 4839 2e6e E6 A4 42 02 01          		mov.L	2312[r10], 4[r4]
 4840 2e73 EC 45                   		mov.L	[r4], r5
 4841 2e75 A8 4E                   		mov.L	4[r4], r6
 4842 2e77 2E 19                   		bra	.L67
 4843                             	.L66:
 4844                             		.loc 2 756 30 discriminator 14
 4845 2e79 ED A5 02                		mov.L	8[r10], r5
 4846 2e7c 71 54 58                		add	#0x58, r5, r4
 4847 2e7f ED A5 14                		mov.L	80[r10], r5
 4848 2e82 ED 52 26                		mov.L	152[r5], r2
 4849 2e85 ED 53 27                		mov.L	156[r5], r3
 4850 2e88 E3 42                   		mov.L	r2, [r4]
 4851 2e8a A0 4B                   		mov.L	r3, 4[r4]
 4852 2e8c EC 45                   		mov.L	[r4], r5
 4853 2e8e A8 4E                   		mov.L	4[r4], r6
 4854                             	.L67:
 4855                             		.loc 2 756 30 discriminator 16
 4856 2e90 EF 67                   		mov.L	r6, r7
 4857 2e92 EE AB 31 02             		mov.L	2244[r10], r11
 4858 2e96 FF 2D B5                		add	r11, r5, r13
 4859 2e99 06 A2 02 A7 32 02       		adc 2248[r10],r7
 4860 2e9f EB A7 6A 03             		mov.L	r7, 3496[r10]
 4861 2ea3 EB AD 69 03             		mov.L	r13, 3492[r10]
 4862 2ea7 ED A5 0C                		mov.L	48[r10], r5
 4863 2eaa ED A6 0D                		mov.L	52[r10], r6
 4864 2ead EE AD 6A 03             		mov.L	3496[r10], r13
 4865 2eb1 EE A7 69 03             		mov.L	3492[r10], r7
 4866 2eb5 FF 2C 57                		add	r5, r7, r12
 4867 2eb8 FC 0B 6D                		adc	r6, r13
 4868 2ebb EB AD 44 02             		mov.L	r13, 2320[r10]
 4869 2ebf EB AC 43 02             		mov.L	r12, 2316[r10]
 4870 2ec3 E6 AA 43 02 0C          		mov.L	2316[r10], 48[r10]
 4871 2ec8 E6 AA 44 02 0D          		mov.L	2320[r10], 52[r10]
 4872 2ecd ED A3 04                		mov.L	16[r10], r3
 4873 2ed0 ED A4 05                		mov.L	20[r10], r4
 4874 2ed3 ED A5 0C                		mov.L	48[r10], r5
 4875 2ed6 ED A6 0D                		mov.L	52[r10], r6
 4876 2ed9 EF 4D                   		mov.L	r4, r13
 4877 2edb FF 2C 53                		add	r5, r3, r12
 4878 2ede FC 0B 6D                		adc	r6, r13
 4879 2ee1 EB AD 46 02             		mov.L	r13, 2328[r10]
 4880 2ee5 EB AC 45 02             		mov.L	r12, 2324[r10]
 4881 2ee9 E6 AA 45 02 04          		mov.L	2324[r10], 16[r10]
 4882 2eee E6 AA 46 02 05          		mov.L	2328[r10], 20[r10]
 4883 2ef3 ED A5 0E                		mov.L	56[r10], r5
 4884 2ef6 ED A6 0F                		mov.L	60[r10], r6
 4885 2ef9 75 43 1C                		mov.L	#28, r3
 4886 2efc 66 04                   		mov.L	#0, r4
 4887 2efe EF 51                   		mov.L	r5, r1
 4888 2f00 EF 62                   		mov.L	r6, r2
 4889 2f02 05 00 00 00             		bsr	_rotrFixed64
 4890 2f06 EF 1B                   		mov.L	r1, r11
 4891 2f08 EF 2C                   		mov.L	r2, r12
 4892 2f0a ED A5 0E                		mov.L	56[r10], r5
 4893 2f0d ED A6 0F                		mov.L	60[r10], r6
 4894 2f10 75 43 22                		mov.L	#34, r3
 4895 2f13 66 04                   		mov.L	#0, r4
 4896 2f15 EF 51                   		mov.L	r5, r1
 4897 2f17 EF 62                   		mov.L	r6, r2
 4898 2f19 05 00 00 00             		bsr	_rotrFixed64
 4899 2f1d EF 15                   		mov.L	r1, r5
 4900 2f1f EF 26                   		mov.L	r2, r6
 4901 2f21 EF BD                   		mov.L	r11, r13
 4902 2f23 FC 37 5D                		xor	r5, r13
 4903 2f26 EB AD 47 02             		mov.L	r13, 2332[r10]
 4904 2f2a EF C7                   		mov.L	r12, r7
 4905 2f2c FC 37 67                		xor	r6, r7
 4906 2f2f EB A7 48 02             		mov.L	r7, 2336[r10]
 4907 2f33 ED A5 0E                		mov.L	56[r10], r5
 4908 2f36 ED A6 0F                		mov.L	60[r10], r6
 4909 2f39 75 43 27                		mov.L	#39, r3
 4910 2f3c 66 04                   		mov.L	#0, r4
 4911 2f3e EF 51                   		mov.L	r5, r1
 4912 2f40 EF 62                   		mov.L	r6, r2
 4913 2f42 05 00 00 00             		bsr	_rotrFixed64
 4914 2f46 EF 15                   		mov.L	r1, r5
 4915 2f48 EF 26                   		mov.L	r2, r6
 4916 2f4a EE AB 47 02             		mov.L	2332[r10], r11
 4917 2f4e FC 37 5B                		xor	r5, r11
 4918 2f51 EB AB 49 02             		mov.L	r11, 2340[r10]
 4919 2f55 EE AC 48 02             		mov.L	2336[r10], r12
 4920 2f59 FC 37 6C                		xor	r6, r12
 4921 2f5c EB AC 4A 02             		mov.L	r12, 2344[r10]
 4922 2f60 ED A3 0E                		mov.L	56[r10], r3
 4923 2f63 ED A4 0F                		mov.L	60[r10], r4
 4924 2f66 ED A5 10                		mov.L	64[r10], r5
 4925 2f69 ED A6 11                		mov.L	68[r10], r6
 4926 2f6c FF 4D 53                		and	r5, r3, r13
 4927 2f6f EB AD 4B 02             		mov.L	r13, 2348[r10]
 4928 2f73 FF 47 64                		and	r6, r4, r7
 4929 2f76 EB A7 4C 02             		mov.L	r7, 2352[r10]
 4930 2f7a ED A1 12                		mov.L	72[r10], r1
 4931 2f7d ED A2 13                		mov.L	76[r10], r2
 4932 2f80 ED A3 0E                		mov.L	56[r10], r3
 4933 2f83 ED A4 0F                		mov.L	60[r10], r4
 4934 2f86 ED A5 10                		mov.L	64[r10], r5
 4935 2f89 ED A6 11                		mov.L	68[r10], r6
 4936 2f8c FF 5B 53                		or	r5, r3, r11
 4937 2f8f EB AB 4D 02             		mov.L	r11, 2356[r10]
 4938 2f93 FF 5C 64                		or	r6, r4, r12
 4939 2f96 EB AC 4E 02             		mov.L	r12, 2360[r10]
 4940 2f9a EF 1D                   		mov.L	r1, r13
 4941 2f9c 06 92 AD 4D 02          		and	2356[r10], r13
 4942 2fa1 EB AD 4F 02             		mov.L	r13, 2364[r10]
 4943 2fa5 EF 27                   		mov.L	r2, r7
 4944 2fa7 06 92 A7 4E 02          		and	2360[r10], r7
 4945 2fac EB A7 50 02             		mov.L	r7, 2368[r10]
 4946 2fb0 EE AB 4B 02             		mov.L	2348[r10], r11
 4947 2fb4 EE AC 4F 02             		mov.L	2364[r10], r12
 4948 2fb8 57 CB                   		or	r12, r11
 4949 2fba EB AB 51 02             		mov.L	r11, 2372[r10]
 4950 2fbe EE AD 4C 02             		mov.L	2352[r10], r13
 4951 2fc2 EE A7 50 02             		mov.L	2368[r10], r7
 4952 2fc6 57 7D                   		or	r7, r13
 4953 2fc8 EB AD 52 02             		mov.L	r13, 2376[r10]
 4954 2fcc EE AC 4A 02             		mov.L	2344[r10], r12
 4955 2fd0 EE AD 49 02             		mov.L	2340[r10], r13
 4956 2fd4 EE A7 51 02             		mov.L	2372[r10], r7
 4957 2fd8 FF 2B 7D                		add	r7, r13, r11
 4958 2fdb 06 A2 02 AC 52 02       		adc 2376[r10],r12
 4959 2fe1 EB AC 6C 03             		mov.L	r12, 3504[r10]
 4960 2fe5 EB AB 6B 03             		mov.L	r11, 3500[r10]
 4961 2fe9 ED A5 0C                		mov.L	48[r10], r5
 4962 2fec ED A6 0D                		mov.L	52[r10], r6
 4963 2fef EE AC 6C 03             		mov.L	3504[r10], r12
 4964 2ff3 EE AD 6B 03             		mov.L	3500[r10], r13
 4965 2ff7 FF 2B 5D                		add	r5, r13, r11
 4966 2ffa FC 0B 6C                		adc	r6, r12
 4967 2ffd EB AC 54 02             		mov.L	r12, 2384[r10]
 4968 3001 EB AB 53 02             		mov.L	r11, 2380[r10]
 4969 3005 E6 AA 53 02 0C          		mov.L	2380[r10], 48[r10]
 4970 300a E6 AA 54 02 0D          		mov.L	2384[r10], 52[r10]
 757:../src/wolfcrypt/src/sha512.c ****         R(12); R(13); R(14); R(15);
 4971                             		.loc 2 757 9 is_stmt 1 discriminator 16
 4972 300f ED A5 04                		mov.L	16[r10], r5
 4973 3012 ED A6 05                		mov.L	20[r10], r6
 4974 3015 66 E3                   		mov.L	#14, r3
 4975 3017 66 04                   		mov.L	#0, r4
 4976 3019 EF 51                   		mov.L	r5, r1
 4977 301b EF 62                   		mov.L	r6, r2
 4978 301d 05 00 00 00             		bsr	_rotrFixed64
 4979 3021 EF 1B                   		mov.L	r1, r11
 4980 3023 EF 2C                   		mov.L	r2, r12
 4981 3025 ED A5 04                		mov.L	16[r10], r5
 4982 3028 ED A6 05                		mov.L	20[r10], r6
 4983 302b 75 43 12                		mov.L	#18, r3
 4984 302e 66 04                   		mov.L	#0, r4
 4985 3030 EF 51                   		mov.L	r5, r1
 4986 3032 EF 62                   		mov.L	r6, r2
 4987 3034 05 00 00 00             		bsr	_rotrFixed64
 4988 3038 EF 15                   		mov.L	r1, r5
 4989 303a EF 26                   		mov.L	r2, r6
 4990 303c EF BD                   		mov.L	r11, r13
 4991 303e FC 37 5D                		xor	r5, r13
 4992 3041 EB AD 55 02             		mov.L	r13, 2388[r10]
 4993 3045 EF C7                   		mov.L	r12, r7
 4994 3047 FC 37 67                		xor	r6, r7
 4995 304a EB A7 56 02             		mov.L	r7, 2392[r10]
 4996 304e ED A5 04                		mov.L	16[r10], r5
 4997 3051 ED A6 05                		mov.L	20[r10], r6
 4998 3054 75 43 29                		mov.L	#41, r3
 4999 3057 66 04                   		mov.L	#0, r4
 5000 3059 EF 51                   		mov.L	r5, r1
 5001 305b EF 62                   		mov.L	r6, r2
 5002 305d 05 00 00 00             		bsr	_rotrFixed64
 5003 3061 EF 15                   		mov.L	r1, r5
 5004 3063 EF 26                   		mov.L	r2, r6
 5005 3065 EE AB 55 02             		mov.L	2388[r10], r11
 5006 3069 FC 37 5B                		xor	r5, r11
 5007 306c EB AB 57 02             		mov.L	r11, 2396[r10]
 5008 3070 EE AC 56 02             		mov.L	2392[r10], r12
 5009 3074 FC 37 6C                		xor	r6, r12
 5010 3077 EB AC 58 02             		mov.L	r12, 2400[r10]
 5011 307b ED AB 08                		mov.L	32[r10], r11
 5012 307e ED AC 09                		mov.L	36[r10], r12
 5013 3081 ED A3 04                		mov.L	16[r10], r3
 5014 3084 ED A4 05                		mov.L	20[r10], r4
 5015 3087 ED A1 06                		mov.L	24[r10], r1
 5016 308a ED A2 07                		mov.L	28[r10], r2
 5017 308d ED A5 08                		mov.L	32[r10], r5
 5018 3090 ED A6 09                		mov.L	36[r10], r6
 5019 3093 EF 1D                   		mov.L	r1, r13
 5020 3095 FC 37 5D                		xor	r5, r13
 5021 3098 EB AD 59 02             		mov.L	r13, 2404[r10]
 5022 309c EF 27                   		mov.L	r2, r7
 5023 309e FC 37 67                		xor	r6, r7
 5024 30a1 EB A7 5A 02             		mov.L	r7, 2408[r10]
 5025 30a5 EF 3D                   		mov.L	r3, r13
 5026 30a7 06 92 AD 59 02          		and	2404[r10], r13
 5027 30ac EB AD 5B 02             		mov.L	r13, 2412[r10]
 5028 30b0 EF 47                   		mov.L	r4, r7
 5029 30b2 06 92 A7 5A 02          		and	2408[r10], r7
 5030 30b7 EB A7 5C 02             		mov.L	r7, 2416[r10]
 5031 30bb EE AD 5B 02             		mov.L	2412[r10], r13
 5032 30bf FC 37 BD                		xor	r11, r13
 5033 30c2 EB AD 5D 02             		mov.L	r13, 2420[r10]
 5034 30c6 EE A7 5C 02             		mov.L	2416[r10], r7
 5035 30ca FC 37 C7                		xor	r12, r7
 5036 30cd EB A7 5E 02             		mov.L	r7, 2424[r10]
 5037 30d1 EE AC 58 02             		mov.L	2400[r10], r12
 5038 30d5 EE AD 57 02             		mov.L	2396[r10], r13
 5039 30d9 EE A7 5D 02             		mov.L	2420[r10], r7
 5040 30dd FF 2B 7D                		add	r7, r13, r11
 5041 30e0 06 A2 02 AC 5E 02       		adc 2424[r10],r12
 5042 30e6 EB AC 60 02             		mov.L	r12, 2432[r10]
 5043 30ea EB AB 5F 02             		mov.L	r11, 2428[r10]
 5044 30ee EC A5                   		mov.L	[r10], r5
 5045 30f0 62 C5                   		add	#12, r5
 5046 30f2 FD C3 54                		shll	#3, r5, r4
 5047 30f5 ED A5 01                		mov.L	4[r10], r5
 5048 30f8 4B 54                   		add	r5, r4
 5049 30fa EC 45                   		mov.L	[r4], r5
 5050 30fc A8 4E                   		mov.L	4[r4], r6
 5051 30fe EE AC 60 02             		mov.L	2432[r10], r12
 5052 3102 EE AD 5F 02             		mov.L	2428[r10], r13
 5053 3106 FF 2B 5D                		add	r5, r13, r11
 5054 3109 FC 0B 6C                		adc	r6, r12
 5055 310c EB AC 62 02             		mov.L	r12, 2440[r10]
 5056 3110 EB AB 61 02             		mov.L	r11, 2436[r10]
 5057 3114 EC A5                   		mov.L	[r10], r5
 5058 3116 61 05                   		cmp	#0, r5
 5059 3118 3A 89 01                		beq	.L68
 5060                             		.loc 2 757 9 is_stmt 0 discriminator 1
 5061 311b ED A5 02                		mov.L	8[r10], r5
 5062 311e 71 55 50                		add	#0x50, r5
 5063 3121 EC 5B                   		mov.L	[r5], r11
 5064 3123 ED 5C 01                		mov.L	4[r5], r12
 5065 3126 75 43 13                		mov.L	#19, r3
 5066 3129 66 04                   		mov.L	#0, r4
 5067 312b EF B1                   		mov.L	r11, r1
 5068 312d EF C2                   		mov.L	r12, r2
 5069 312f 05 00 00 00             		bsr	_rotrFixed64
 5070 3133 EF 18                   		mov.L	r1, r8
 5071 3135 EF 29                   		mov.L	r2, r9
 5072 3137 ED A5 02                		mov.L	8[r10], r5
 5073 313a 71 55 50                		add	#0x50, r5
 5074 313d EC 5B                   		mov.L	[r5], r11
 5075 313f ED 5C 01                		mov.L	4[r5], r12
 5076 3142 75 43 3D                		mov.L	#61, r3
 5077 3145 66 04                   		mov.L	#0, r4
 5078 3147 EF B1                   		mov.L	r11, r1
 5079 3149 EF C2                   		mov.L	r12, r2
 5080 314b 05 00 00 00             		bsr	_rotrFixed64
 5081 314f EF 15                   		mov.L	r1, r5
 5082 3151 EF 26                   		mov.L	r2, r6
 5083 3153 EF 8B                   		mov.L	r8, r11
 5084 3155 FC 37 5B                		xor	r5, r11
 5085 3158 EB AB 63 02             		mov.L	r11, 2444[r10]
 5086 315c EF 9C                   		mov.L	r9, r12
 5087 315e FC 37 6C                		xor	r6, r12
 5088 3161 EB AC 64 02             		mov.L	r12, 2448[r10]
 5089 3165 ED A5 02                		mov.L	8[r10], r5
 5090 3168 71 54 50                		add	#0x50, r5, r4
 5091 316b EC 45                   		mov.L	[r4], r5
 5092 316d A8 4E                   		mov.L	4[r4], r6
 5093 316f FD DA 64                		shll	#26, r6, r4
 5094 3172 FD 86 5D                		shlr	#6, r5, r13
 5095 3175 EB AD 65 02             		mov.L	r13, 2452[r10]
 5096 3179 EE A7 65 02             		mov.L	2452[r10], r7
 5097 317d 57 47                   		or	r4, r7
 5098 317f EB A7 65 02             		mov.L	r7, 2452[r10]
 5099 3183 FD 86 6B                		shlr	#6, r6, r11
 5100 3186 EB AB 66 02             		mov.L	r11, 2456[r10]
 5101 318a EE AC 63 02             		mov.L	2444[r10], r12
 5102 318e 06 A2 0D AC 65 02       		xor	2452[r10].L, r12
 5103 3194 EB AC 67 02             		mov.L	r12, 2460[r10]
 5104 3198 EE AD 64 02             		mov.L	2448[r10], r13
 5105 319c 06 A2 0D AD 66 02       		xor	2456[r10].L, r13
 5106 31a2 EB AD 68 02             		mov.L	r13, 2464[r10]
 5107 31a6 ED A5 02                		mov.L	8[r10], r5
 5108 31a9 71 54 28                		add	#40, r5, r4
 5109 31ac EC 45                   		mov.L	[r4], r5
 5110 31ae A8 4E                   		mov.L	4[r4], r6
 5111 31b0 EE AB 68 02             		mov.L	2464[r10], r11
 5112 31b4 EE AC 67 02             		mov.L	2460[r10], r12
 5113 31b8 FF 27 5C                		add	r5, r12, r7
 5114 31bb FC 0B 6B                		adc	r6, r11
 5115 31be EB AB 6A 02             		mov.L	r11, 2472[r10]
 5116 31c2 EB A7 69 02             		mov.L	r7, 2468[r10]
 5117 31c6 ED A5 02                		mov.L	8[r10], r5
 5118 31c9 71 55 68                		add	#0x68, r5
 5119 31cc EC 5B                   		mov.L	[r5], r11
 5120 31ce ED 5C 01                		mov.L	4[r5], r12
 5121 31d1 66 13                   		mov.L	#1, r3
 5122 31d3 66 04                   		mov.L	#0, r4
 5123 31d5 EF B1                   		mov.L	r11, r1
 5124 31d7 EF C2                   		mov.L	r12, r2
 5125 31d9 05 00 00 00             		bsr	_rotrFixed64
 5126 31dd EF 18                   		mov.L	r1, r8
 5127 31df EF 29                   		mov.L	r2, r9
 5128 31e1 ED A5 02                		mov.L	8[r10], r5
 5129 31e4 71 55 68                		add	#0x68, r5
 5130 31e7 EC 5B                   		mov.L	[r5], r11
 5131 31e9 ED 5C 01                		mov.L	4[r5], r12
 5132 31ec 66 83                   		mov.L	#8, r3
 5133 31ee 66 04                   		mov.L	#0, r4
 5134 31f0 EF B1                   		mov.L	r11, r1
 5135 31f2 EF C2                   		mov.L	r12, r2
 5136 31f4 05 00 00 00             		bsr	_rotrFixed64
 5137 31f8 EF 15                   		mov.L	r1, r5
 5138 31fa EF 26                   		mov.L	r2, r6
 5139 31fc EF 87                   		mov.L	r8, r7
 5140 31fe FC 37 57                		xor	r5, r7
 5141 3201 EB A7 6B 02             		mov.L	r7, 2476[r10]
 5142 3205 EF 9B                   		mov.L	r9, r11
 5143 3207 FC 37 6B                		xor	r6, r11
 5144 320a EB AB 6C 02             		mov.L	r11, 2480[r10]
 5145 320e ED A5 02                		mov.L	8[r10], r5
 5146 3211 71 54 68                		add	#0x68, r5, r4
 5147 3214 EC 45                   		mov.L	[r4], r5
 5148 3216 A8 4E                   		mov.L	4[r4], r6
 5149 3218 FD D9 64                		shll	#25, r6, r4
 5150 321b FD 87 5C                		shlr	#7, r5, r12
 5151 321e EB AC 6D 02             		mov.L	r12, 2484[r10]
 5152 3222 EE AD 6D 02             		mov.L	2484[r10], r13
 5153 3226 57 4D                   		or	r4, r13
 5154 3228 EB AD 6D 02             		mov.L	r13, 2484[r10]
 5155 322c FD 87 67                		shlr	#7, r6, r7
 5156 322f EB A7 6E 02             		mov.L	r7, 2488[r10]
 5157 3233 EE AB 6B 02             		mov.L	2476[r10], r11
 5158 3237 06 A2 0D AB 6D 02       		xor	2484[r10].L, r11
 5159 323d EB AB 6F 02             		mov.L	r11, 2492[r10]
 5160 3241 EE AC 6C 02             		mov.L	2480[r10], r12
 5161 3245 06 A2 0D AC 6E 02       		xor	2488[r10].L, r12
 5162 324b EB AC 70 02             		mov.L	r12, 2496[r10]
 5163 324f EE A7 6A 02             		mov.L	2472[r10], r7
 5164 3253 EE AB 69 02             		mov.L	2468[r10], r11
 5165 3257 EE AC 6F 02             		mov.L	2492[r10], r12
 5166 325b FF 2D CB                		add	r12, r11, r13
 5167 325e 06 A2 02 A7 70 02       		adc 2496[r10],r7
 5168 3264 EB A7 6E 03             		mov.L	r7, 3512[r10]
 5169 3268 EB AD 6D 03             		mov.L	r13, 3508[r10]
 5170 326c ED A5 02                		mov.L	8[r10], r5
 5171 326f 71 55 60                		add	#0x60, r5
 5172 3272 EC 52                   		mov.L	[r5], r2
 5173 3274 A8 5B                   		mov.L	4[r5], r3
 5174 3276 ED A5 02                		mov.L	8[r10], r5
 5175 3279 71 54 60                		add	#0x60, r5, r4
 5176 327c EE A7 6E 03             		mov.L	3512[r10], r7
 5177 3280 EE AB 6D 03             		mov.L	3508[r10], r11
 5178 3284 FF 2D 2B                		add	r2, r11, r13
 5179 3287 FC 0B 37                		adc	r3, r7
 5180 328a EB A7 72 02             		mov.L	r7, 2504[r10]
 5181 328e EB AD 71 02             		mov.L	r13, 2500[r10]
 5182 3292 E2 A4 71 02             		mov.L	2500[r10], [r4]
 5183 3296 E6 A4 72 02 01          		mov.L	2504[r10], 4[r4]
 5184 329b EC 45                   		mov.L	[r4], r5
 5185 329d A8 4E                   		mov.L	4[r4], r6
 5186 329f 2E 19                   		bra	.L69
 5187                             	.L68:
 5188                             		.loc 2 757 9 discriminator 2
 5189 32a1 ED A5 02                		mov.L	8[r10], r5
 5190 32a4 71 54 60                		add	#0x60, r5, r4
 5191 32a7 ED A5 14                		mov.L	80[r10], r5
 5192 32aa ED 52 28                		mov.L	160[r5], r2
 5193 32ad ED 53 29                		mov.L	164[r5], r3
 5194 32b0 E3 42                   		mov.L	r2, [r4]
 5195 32b2 A0 4B                   		mov.L	r3, 4[r4]
 5196 32b4 EC 45                   		mov.L	[r4], r5
 5197 32b6 A8 4E                   		mov.L	4[r4], r6
 5198                             	.L69:
 5199                             		.loc 2 757 9 discriminator 4
 5200 32b8 EF 67                   		mov.L	r6, r7
 5201 32ba EE AB 61 02             		mov.L	2436[r10], r11
 5202 32be FF 2D B5                		add	r11, r5, r13
 5203 32c1 06 A2 02 A7 62 02       		adc 2440[r10],r7
 5204 32c7 EB A7 70 03             		mov.L	r7, 3520[r10]
 5205 32cb EB AD 6F 03             		mov.L	r13, 3516[r10]
 5206 32cf ED A5 0A                		mov.L	40[r10], r5
 5207 32d2 ED A6 0B                		mov.L	44[r10], r6
 5208 32d5 EE AD 70 03             		mov.L	3520[r10], r13
 5209 32d9 EE A7 6F 03             		mov.L	3516[r10], r7
 5210 32dd FF 2C 57                		add	r5, r7, r12
 5211 32e0 FC 0B 6D                		adc	r6, r13
 5212 32e3 EB AD 74 02             		mov.L	r13, 2512[r10]
 5213 32e7 EB AC 73 02             		mov.L	r12, 2508[r10]
 5214 32eb E6 AA 73 02 0A          		mov.L	2508[r10], 40[r10]
 5215 32f0 E6 AA 74 02 0B          		mov.L	2512[r10], 44[r10]
 5216 32f5 ED A3 12                		mov.L	72[r10], r3
 5217 32f8 ED A4 13                		mov.L	76[r10], r4
 5218 32fb ED A5 0A                		mov.L	40[r10], r5
 5219 32fe ED A6 0B                		mov.L	44[r10], r6
 5220 3301 EF 4D                   		mov.L	r4, r13
 5221 3303 FF 2C 53                		add	r5, r3, r12
 5222 3306 FC 0B 6D                		adc	r6, r13
 5223 3309 EB AD 76 02             		mov.L	r13, 2520[r10]
 5224 330d EB AC 75 02             		mov.L	r12, 2516[r10]
 5225 3311 E6 AA 75 02 12          		mov.L	2516[r10], 72[r10]
 5226 3316 E6 AA 76 02 13          		mov.L	2520[r10], 76[r10]
 5227 331b ED A5 0C                		mov.L	48[r10], r5
 5228 331e ED A6 0D                		mov.L	52[r10], r6
 5229 3321 75 43 1C                		mov.L	#28, r3
 5230 3324 66 04                   		mov.L	#0, r4
 5231 3326 EF 51                   		mov.L	r5, r1
 5232 3328 EF 62                   		mov.L	r6, r2
 5233 332a 05 00 00 00             		bsr	_rotrFixed64
 5234 332e EF 1B                   		mov.L	r1, r11
 5235 3330 EF 2C                   		mov.L	r2, r12
 5236 3332 ED A5 0C                		mov.L	48[r10], r5
 5237 3335 ED A6 0D                		mov.L	52[r10], r6
 5238 3338 75 43 22                		mov.L	#34, r3
 5239 333b 66 04                   		mov.L	#0, r4
 5240 333d EF 51                   		mov.L	r5, r1
 5241 333f EF 62                   		mov.L	r6, r2
 5242 3341 05 00 00 00             		bsr	_rotrFixed64
 5243 3345 EF 15                   		mov.L	r1, r5
 5244 3347 EF 26                   		mov.L	r2, r6
 5245 3349 EF BD                   		mov.L	r11, r13
 5246 334b FC 37 5D                		xor	r5, r13
 5247 334e EB AD 77 02             		mov.L	r13, 2524[r10]
 5248 3352 EF C7                   		mov.L	r12, r7
 5249 3354 FC 37 67                		xor	r6, r7
 5250 3357 EB A7 78 02             		mov.L	r7, 2528[r10]
 5251 335b ED A5 0C                		mov.L	48[r10], r5
 5252 335e ED A6 0D                		mov.L	52[r10], r6
 5253 3361 75 43 27                		mov.L	#39, r3
 5254 3364 66 04                   		mov.L	#0, r4
 5255 3366 EF 51                   		mov.L	r5, r1
 5256 3368 EF 62                   		mov.L	r6, r2
 5257 336a 05 00 00 00             		bsr	_rotrFixed64
 5258 336e EF 15                   		mov.L	r1, r5
 5259 3370 EF 26                   		mov.L	r2, r6
 5260 3372 EE AB 77 02             		mov.L	2524[r10], r11
 5261 3376 FC 37 5B                		xor	r5, r11
 5262 3379 EB AB 79 02             		mov.L	r11, 2532[r10]
 5263 337d EE AC 78 02             		mov.L	2528[r10], r12
 5264 3381 FC 37 6C                		xor	r6, r12
 5265 3384 EB AC 7A 02             		mov.L	r12, 2536[r10]
 5266 3388 ED A3 0C                		mov.L	48[r10], r3
 5267 338b ED A4 0D                		mov.L	52[r10], r4
 5268 338e ED A5 0E                		mov.L	56[r10], r5
 5269 3391 ED A6 0F                		mov.L	60[r10], r6
 5270 3394 FF 4D 53                		and	r5, r3, r13
 5271 3397 EB AD 7B 02             		mov.L	r13, 2540[r10]
 5272 339b FF 47 64                		and	r6, r4, r7
 5273 339e EB A7 7C 02             		mov.L	r7, 2544[r10]
 5274 33a2 ED A1 10                		mov.L	64[r10], r1
 5275 33a5 ED A2 11                		mov.L	68[r10], r2
 5276 33a8 ED A3 0C                		mov.L	48[r10], r3
 5277 33ab ED A4 0D                		mov.L	52[r10], r4
 5278 33ae ED A5 0E                		mov.L	56[r10], r5
 5279 33b1 ED A6 0F                		mov.L	60[r10], r6
 5280 33b4 FF 5B 53                		or	r5, r3, r11
 5281 33b7 EB AB 7D 02             		mov.L	r11, 2548[r10]
 5282 33bb FF 5C 64                		or	r6, r4, r12
 5283 33be EB AC 7E 02             		mov.L	r12, 2552[r10]
 5284 33c2 EF 1D                   		mov.L	r1, r13
 5285 33c4 06 92 AD 7D 02          		and	2548[r10], r13
 5286 33c9 EB AD 7F 02             		mov.L	r13, 2556[r10]
 5287 33cd EF 27                   		mov.L	r2, r7
 5288 33cf 06 92 A7 7E 02          		and	2552[r10], r7
 5289 33d4 EB A7 80 02             		mov.L	r7, 2560[r10]
 5290 33d8 EE AB 7B 02             		mov.L	2540[r10], r11
 5291 33dc EE AC 7F 02             		mov.L	2556[r10], r12
 5292 33e0 57 CB                   		or	r12, r11
 5293 33e2 EB AB 81 02             		mov.L	r11, 2564[r10]
 5294 33e6 EE AD 7C 02             		mov.L	2544[r10], r13
 5295 33ea EE A7 80 02             		mov.L	2560[r10], r7
 5296 33ee 57 7D                   		or	r7, r13
 5297 33f0 EB AD 82 02             		mov.L	r13, 2568[r10]
 5298 33f4 EE AC 7A 02             		mov.L	2536[r10], r12
 5299 33f8 EE AD 79 02             		mov.L	2532[r10], r13
 5300 33fc EE A7 81 02             		mov.L	2564[r10], r7
 5301 3400 FF 2B 7D                		add	r7, r13, r11
 5302 3403 06 A2 02 AC 82 02       		adc 2568[r10],r12
 5303 3409 EB AC 72 03             		mov.L	r12, 3528[r10]
 5304 340d EB AB 71 03             		mov.L	r11, 3524[r10]
 5305 3411 ED A5 0A                		mov.L	40[r10], r5
 5306 3414 ED A6 0B                		mov.L	44[r10], r6
 5307 3417 EE AC 72 03             		mov.L	3528[r10], r12
 5308 341b EE AD 71 03             		mov.L	3524[r10], r13
 5309 341f FF 2B 5D                		add	r5, r13, r11
 5310 3422 FC 0B 6C                		adc	r6, r12
 5311 3425 EB AC 84 02             		mov.L	r12, 2576[r10]
 5312 3429 EB AB 83 02             		mov.L	r11, 2572[r10]
 5313 342d E6 AA 83 02 0A          		mov.L	2572[r10], 40[r10]
 5314 3432 E6 AA 84 02 0B          		mov.L	2576[r10], 44[r10]
 5315                             		.loc 2 757 16 is_stmt 1 discriminator 4
 5316 3437 ED A5 12                		mov.L	72[r10], r5
 5317 343a ED A6 13                		mov.L	76[r10], r6
 5318 343d 66 E3                   		mov.L	#14, r3
 5319 343f 66 04                   		mov.L	#0, r4
 5320 3441 EF 51                   		mov.L	r5, r1
 5321 3443 EF 62                   		mov.L	r6, r2
 5322 3445 05 00 00 00             		bsr	_rotrFixed64
 5323 3449 EF 1B                   		mov.L	r1, r11
 5324 344b EF 2C                   		mov.L	r2, r12
 5325 344d ED A5 12                		mov.L	72[r10], r5
 5326 3450 ED A6 13                		mov.L	76[r10], r6
 5327 3453 75 43 12                		mov.L	#18, r3
 5328 3456 66 04                   		mov.L	#0, r4
 5329 3458 EF 51                   		mov.L	r5, r1
 5330 345a EF 62                   		mov.L	r6, r2
 5331 345c 05 00 00 00             		bsr	_rotrFixed64
 5332 3460 EF 15                   		mov.L	r1, r5
 5333 3462 EF 26                   		mov.L	r2, r6
 5334 3464 EF BD                   		mov.L	r11, r13
 5335 3466 FC 37 5D                		xor	r5, r13
 5336 3469 EB AD 85 02             		mov.L	r13, 2580[r10]
 5337 346d EF C7                   		mov.L	r12, r7
 5338 346f FC 37 67                		xor	r6, r7
 5339 3472 EB A7 86 02             		mov.L	r7, 2584[r10]
 5340 3476 ED A5 12                		mov.L	72[r10], r5
 5341 3479 ED A6 13                		mov.L	76[r10], r6
 5342 347c 75 43 29                		mov.L	#41, r3
 5343 347f 66 04                   		mov.L	#0, r4
 5344 3481 EF 51                   		mov.L	r5, r1
 5345 3483 EF 62                   		mov.L	r6, r2
 5346 3485 05 00 00 00             		bsr	_rotrFixed64
 5347 3489 EF 15                   		mov.L	r1, r5
 5348 348b EF 26                   		mov.L	r2, r6
 5349 348d EE AB 85 02             		mov.L	2580[r10], r11
 5350 3491 FC 37 5B                		xor	r5, r11
 5351 3494 EB AB 87 02             		mov.L	r11, 2588[r10]
 5352 3498 EE AC 86 02             		mov.L	2584[r10], r12
 5353 349c FC 37 6C                		xor	r6, r12
 5354 349f EB AC 88 02             		mov.L	r12, 2592[r10]
 5355 34a3 ED AB 06                		mov.L	24[r10], r11
 5356 34a6 ED AC 07                		mov.L	28[r10], r12
 5357 34a9 ED A3 12                		mov.L	72[r10], r3
 5358 34ac ED A4 13                		mov.L	76[r10], r4
 5359 34af ED A1 04                		mov.L	16[r10], r1
 5360 34b2 ED A2 05                		mov.L	20[r10], r2
 5361 34b5 ED A5 06                		mov.L	24[r10], r5
 5362 34b8 ED A6 07                		mov.L	28[r10], r6
 5363 34bb EF 1D                   		mov.L	r1, r13
 5364 34bd FC 37 5D                		xor	r5, r13
 5365 34c0 EB AD 89 02             		mov.L	r13, 2596[r10]
 5366 34c4 EF 27                   		mov.L	r2, r7
 5367 34c6 FC 37 67                		xor	r6, r7
 5368 34c9 EB A7 8A 02             		mov.L	r7, 2600[r10]
 5369 34cd EF 3D                   		mov.L	r3, r13
 5370 34cf 06 92 AD 89 02          		and	2596[r10], r13
 5371 34d4 EB AD 8B 02             		mov.L	r13, 2604[r10]
 5372 34d8 EF 47                   		mov.L	r4, r7
 5373 34da 06 92 A7 8A 02          		and	2600[r10], r7
 5374 34df EB A7 8C 02             		mov.L	r7, 2608[r10]
 5375 34e3 EE AD 8B 02             		mov.L	2604[r10], r13
 5376 34e7 FC 37 BD                		xor	r11, r13
 5377 34ea EB AD 8D 02             		mov.L	r13, 2612[r10]
 5378 34ee EE A7 8C 02             		mov.L	2608[r10], r7
 5379 34f2 FC 37 C7                		xor	r12, r7
 5380 34f5 EB A7 8E 02             		mov.L	r7, 2616[r10]
 5381 34f9 EE AC 88 02             		mov.L	2592[r10], r12
 5382 34fd EE AD 87 02             		mov.L	2588[r10], r13
 5383 3501 EE A7 8D 02             		mov.L	2612[r10], r7
 5384 3505 FF 2B 7D                		add	r7, r13, r11
 5385 3508 06 A2 02 AC 8E 02       		adc 2616[r10],r12
 5386 350e EB AC 90 02             		mov.L	r12, 2624[r10]
 5387 3512 EB AB 8F 02             		mov.L	r11, 2620[r10]
 5388 3516 EC A5                   		mov.L	[r10], r5
 5389 3518 62 D5                   		add	#13, r5
 5390 351a FD C3 54                		shll	#3, r5, r4
 5391 351d ED A5 01                		mov.L	4[r10], r5
 5392 3520 4B 54                   		add	r5, r4
 5393 3522 EC 45                   		mov.L	[r4], r5
 5394 3524 A8 4E                   		mov.L	4[r4], r6
 5395 3526 EE AC 90 02             		mov.L	2624[r10], r12
 5396 352a EE AD 8F 02             		mov.L	2620[r10], r13
 5397 352e FF 2B 5D                		add	r5, r13, r11
 5398 3531 FC 0B 6C                		adc	r6, r12
 5399 3534 EB AC 92 02             		mov.L	r12, 2632[r10]
 5400 3538 EB AB 91 02             		mov.L	r11, 2628[r10]
 5401 353c EC A5                   		mov.L	[r10], r5
 5402 353e 61 05                   		cmp	#0, r5
 5403 3540 3A 89 01                		beq	.L70
 5404                             		.loc 2 757 16 is_stmt 0 discriminator 5
 5405 3543 ED A5 02                		mov.L	8[r10], r5
 5406 3546 71 55 58                		add	#0x58, r5
 5407 3549 EC 5B                   		mov.L	[r5], r11
 5408 354b ED 5C 01                		mov.L	4[r5], r12
 5409 354e 75 43 13                		mov.L	#19, r3
 5410 3551 66 04                   		mov.L	#0, r4
 5411 3553 EF B1                   		mov.L	r11, r1
 5412 3555 EF C2                   		mov.L	r12, r2
 5413 3557 05 00 00 00             		bsr	_rotrFixed64
 5414 355b EF 18                   		mov.L	r1, r8
 5415 355d EF 29                   		mov.L	r2, r9
 5416 355f ED A5 02                		mov.L	8[r10], r5
 5417 3562 71 55 58                		add	#0x58, r5
 5418 3565 EC 5B                   		mov.L	[r5], r11
 5419 3567 ED 5C 01                		mov.L	4[r5], r12
 5420 356a 75 43 3D                		mov.L	#61, r3
 5421 356d 66 04                   		mov.L	#0, r4
 5422 356f EF B1                   		mov.L	r11, r1
 5423 3571 EF C2                   		mov.L	r12, r2
 5424 3573 05 00 00 00             		bsr	_rotrFixed64
 5425 3577 EF 15                   		mov.L	r1, r5
 5426 3579 EF 26                   		mov.L	r2, r6
 5427 357b EF 8B                   		mov.L	r8, r11
 5428 357d FC 37 5B                		xor	r5, r11
 5429 3580 EB AB 93 02             		mov.L	r11, 2636[r10]
 5430 3584 EF 9C                   		mov.L	r9, r12
 5431 3586 FC 37 6C                		xor	r6, r12
 5432 3589 EB AC 94 02             		mov.L	r12, 2640[r10]
 5433 358d ED A5 02                		mov.L	8[r10], r5
 5434 3590 71 54 58                		add	#0x58, r5, r4
 5435 3593 EC 45                   		mov.L	[r4], r5
 5436 3595 A8 4E                   		mov.L	4[r4], r6
 5437 3597 FD DA 64                		shll	#26, r6, r4
 5438 359a FD 86 5D                		shlr	#6, r5, r13
 5439 359d EB AD 95 02             		mov.L	r13, 2644[r10]
 5440 35a1 EE A7 95 02             		mov.L	2644[r10], r7
 5441 35a5 57 47                   		or	r4, r7
 5442 35a7 EB A7 95 02             		mov.L	r7, 2644[r10]
 5443 35ab FD 86 6B                		shlr	#6, r6, r11
 5444 35ae EB AB 96 02             		mov.L	r11, 2648[r10]
 5445 35b2 EE AC 93 02             		mov.L	2636[r10], r12
 5446 35b6 06 A2 0D AC 95 02       		xor	2644[r10].L, r12
 5447 35bc EB AC 97 02             		mov.L	r12, 2652[r10]
 5448 35c0 EE AD 94 02             		mov.L	2640[r10], r13
 5449 35c4 06 A2 0D AD 96 02       		xor	2648[r10].L, r13
 5450 35ca EB AD 98 02             		mov.L	r13, 2656[r10]
 5451 35ce ED A5 02                		mov.L	8[r10], r5
 5452 35d1 71 54 30                		add	#48, r5, r4
 5453 35d4 EC 45                   		mov.L	[r4], r5
 5454 35d6 A8 4E                   		mov.L	4[r4], r6
 5455 35d8 EE AB 98 02             		mov.L	2656[r10], r11
 5456 35dc EE AC 97 02             		mov.L	2652[r10], r12
 5457 35e0 FF 27 5C                		add	r5, r12, r7
 5458 35e3 FC 0B 6B                		adc	r6, r11
 5459 35e6 EB AB 9A 02             		mov.L	r11, 2664[r10]
 5460 35ea EB A7 99 02             		mov.L	r7, 2660[r10]
 5461 35ee ED A5 02                		mov.L	8[r10], r5
 5462 35f1 71 55 70                		add	#0x70, r5
 5463 35f4 EC 5B                   		mov.L	[r5], r11
 5464 35f6 ED 5C 01                		mov.L	4[r5], r12
 5465 35f9 66 13                   		mov.L	#1, r3
 5466 35fb 66 04                   		mov.L	#0, r4
 5467 35fd EF B1                   		mov.L	r11, r1
 5468 35ff EF C2                   		mov.L	r12, r2
 5469 3601 05 00 00 00             		bsr	_rotrFixed64
 5470 3605 EF 18                   		mov.L	r1, r8
 5471 3607 EF 29                   		mov.L	r2, r9
 5472 3609 ED A5 02                		mov.L	8[r10], r5
 5473 360c 71 55 70                		add	#0x70, r5
 5474 360f EC 5B                   		mov.L	[r5], r11
 5475 3611 ED 5C 01                		mov.L	4[r5], r12
 5476 3614 66 83                   		mov.L	#8, r3
 5477 3616 66 04                   		mov.L	#0, r4
 5478 3618 EF B1                   		mov.L	r11, r1
 5479 361a EF C2                   		mov.L	r12, r2
 5480 361c 05 00 00 00             		bsr	_rotrFixed64
 5481 3620 EF 15                   		mov.L	r1, r5
 5482 3622 EF 26                   		mov.L	r2, r6
 5483 3624 EF 87                   		mov.L	r8, r7
 5484 3626 FC 37 57                		xor	r5, r7
 5485 3629 EB A7 9B 02             		mov.L	r7, 2668[r10]
 5486 362d EF 9B                   		mov.L	r9, r11
 5487 362f FC 37 6B                		xor	r6, r11
 5488 3632 EB AB 9C 02             		mov.L	r11, 2672[r10]
 5489 3636 ED A5 02                		mov.L	8[r10], r5
 5490 3639 71 54 70                		add	#0x70, r5, r4
 5491 363c EC 45                   		mov.L	[r4], r5
 5492 363e A8 4E                   		mov.L	4[r4], r6
 5493 3640 FD D9 64                		shll	#25, r6, r4
 5494 3643 FD 87 5C                		shlr	#7, r5, r12
 5495 3646 EB AC 9D 02             		mov.L	r12, 2676[r10]
 5496 364a EE AD 9D 02             		mov.L	2676[r10], r13
 5497 364e 57 4D                   		or	r4, r13
 5498 3650 EB AD 9D 02             		mov.L	r13, 2676[r10]
 5499 3654 FD 87 67                		shlr	#7, r6, r7
 5500 3657 EB A7 9E 02             		mov.L	r7, 2680[r10]
 5501 365b EE AB 9B 02             		mov.L	2668[r10], r11
 5502 365f 06 A2 0D AB 9D 02       		xor	2676[r10].L, r11
 5503 3665 EB AB 9F 02             		mov.L	r11, 2684[r10]
 5504 3669 EE AC 9C 02             		mov.L	2672[r10], r12
 5505 366d 06 A2 0D AC 9E 02       		xor	2680[r10].L, r12
 5506 3673 EB AC A0 02             		mov.L	r12, 2688[r10]
 5507 3677 EE A7 9A 02             		mov.L	2664[r10], r7
 5508 367b EE AB 99 02             		mov.L	2660[r10], r11
 5509 367f EE AC 9F 02             		mov.L	2684[r10], r12
 5510 3683 FF 2D CB                		add	r12, r11, r13
 5511 3686 06 A2 02 A7 A0 02       		adc 2688[r10],r7
 5512 368c EB A7 74 03             		mov.L	r7, 3536[r10]
 5513 3690 EB AD 73 03             		mov.L	r13, 3532[r10]
 5514 3694 ED A5 02                		mov.L	8[r10], r5
 5515 3697 71 55 68                		add	#0x68, r5
 5516 369a EC 52                   		mov.L	[r5], r2
 5517 369c A8 5B                   		mov.L	4[r5], r3
 5518 369e ED A5 02                		mov.L	8[r10], r5
 5519 36a1 71 54 68                		add	#0x68, r5, r4
 5520 36a4 EE A7 74 03             		mov.L	3536[r10], r7
 5521 36a8 EE AB 73 03             		mov.L	3532[r10], r11
 5522 36ac FF 2D 2B                		add	r2, r11, r13
 5523 36af FC 0B 37                		adc	r3, r7
 5524 36b2 EB A7 A2 02             		mov.L	r7, 2696[r10]
 5525 36b6 EB AD A1 02             		mov.L	r13, 2692[r10]
 5526 36ba E2 A4 A1 02             		mov.L	2692[r10], [r4]
 5527 36be E6 A4 A2 02 01          		mov.L	2696[r10], 4[r4]
 5528 36c3 EC 45                   		mov.L	[r4], r5
 5529 36c5 A8 4E                   		mov.L	4[r4], r6
 5530 36c7 2E 19                   		bra	.L71
 5531                             	.L70:
 5532                             		.loc 2 757 16 discriminator 6
 5533 36c9 ED A5 02                		mov.L	8[r10], r5
 5534 36cc 71 54 68                		add	#0x68, r5, r4
 5535 36cf ED A5 14                		mov.L	80[r10], r5
 5536 36d2 ED 52 2A                		mov.L	168[r5], r2
 5537 36d5 ED 53 2B                		mov.L	172[r5], r3
 5538 36d8 E3 42                   		mov.L	r2, [r4]
 5539 36da A0 4B                   		mov.L	r3, 4[r4]
 5540 36dc EC 45                   		mov.L	[r4], r5
 5541 36de A8 4E                   		mov.L	4[r4], r6
 5542                             	.L71:
 5543                             		.loc 2 757 16 discriminator 8
 5544 36e0 EF 67                   		mov.L	r6, r7
 5545 36e2 EE AB 91 02             		mov.L	2628[r10], r11
 5546 36e6 FF 2D B5                		add	r11, r5, r13
 5547 36e9 06 A2 02 A7 92 02       		adc 2632[r10],r7
 5548 36ef EB A7 76 03             		mov.L	r7, 3544[r10]
 5549 36f3 EB AD 75 03             		mov.L	r13, 3540[r10]
 5550 36f7 ED A5 08                		mov.L	32[r10], r5
 5551 36fa ED A6 09                		mov.L	36[r10], r6
 5552 36fd EE AD 76 03             		mov.L	3544[r10], r13
 5553 3701 EE A7 75 03             		mov.L	3540[r10], r7
 5554 3705 FF 2C 57                		add	r5, r7, r12
 5555 3708 FC 0B 6D                		adc	r6, r13
 5556 370b EB AD A4 02             		mov.L	r13, 2704[r10]
 5557 370f EB AC A3 02             		mov.L	r12, 2700[r10]
 5558 3713 E6 AA A3 02 08          		mov.L	2700[r10], 32[r10]
 5559 3718 E6 AA A4 02 09          		mov.L	2704[r10], 36[r10]
 5560 371d ED A3 10                		mov.L	64[r10], r3
 5561 3720 ED A4 11                		mov.L	68[r10], r4
 5562 3723 ED A5 08                		mov.L	32[r10], r5
 5563 3726 ED A6 09                		mov.L	36[r10], r6
 5564 3729 EF 4D                   		mov.L	r4, r13
 5565 372b FF 2C 53                		add	r5, r3, r12
 5566 372e FC 0B 6D                		adc	r6, r13
 5567 3731 EB AD A6 02             		mov.L	r13, 2712[r10]
 5568 3735 EB AC A5 02             		mov.L	r12, 2708[r10]
 5569 3739 E6 AA A5 02 10          		mov.L	2708[r10], 64[r10]
 5570 373e E6 AA A6 02 11          		mov.L	2712[r10], 68[r10]
 5571 3743 ED A5 0A                		mov.L	40[r10], r5
 5572 3746 ED A6 0B                		mov.L	44[r10], r6
 5573 3749 75 43 1C                		mov.L	#28, r3
 5574 374c 66 04                   		mov.L	#0, r4
 5575 374e EF 51                   		mov.L	r5, r1
 5576 3750 EF 62                   		mov.L	r6, r2
 5577 3752 05 00 00 00             		bsr	_rotrFixed64
 5578 3756 EF 1B                   		mov.L	r1, r11
 5579 3758 EF 2C                   		mov.L	r2, r12
 5580 375a ED A5 0A                		mov.L	40[r10], r5
 5581 375d ED A6 0B                		mov.L	44[r10], r6
 5582 3760 75 43 22                		mov.L	#34, r3
 5583 3763 66 04                   		mov.L	#0, r4
 5584 3765 EF 51                   		mov.L	r5, r1
 5585 3767 EF 62                   		mov.L	r6, r2
 5586 3769 05 00 00 00             		bsr	_rotrFixed64
 5587 376d EF 15                   		mov.L	r1, r5
 5588 376f EF 26                   		mov.L	r2, r6
 5589 3771 EF BD                   		mov.L	r11, r13
 5590 3773 FC 37 5D                		xor	r5, r13
 5591 3776 EB AD A7 02             		mov.L	r13, 2716[r10]
 5592 377a EF C7                   		mov.L	r12, r7
 5593 377c FC 37 67                		xor	r6, r7
 5594 377f EB A7 A8 02             		mov.L	r7, 2720[r10]
 5595 3783 ED A5 0A                		mov.L	40[r10], r5
 5596 3786 ED A6 0B                		mov.L	44[r10], r6
 5597 3789 75 43 27                		mov.L	#39, r3
 5598 378c 66 04                   		mov.L	#0, r4
 5599 378e EF 51                   		mov.L	r5, r1
 5600 3790 EF 62                   		mov.L	r6, r2
 5601 3792 05 00 00 00             		bsr	_rotrFixed64
 5602 3796 EF 15                   		mov.L	r1, r5
 5603 3798 EF 26                   		mov.L	r2, r6
 5604 379a EE AB A7 02             		mov.L	2716[r10], r11
 5605 379e FC 37 5B                		xor	r5, r11
 5606 37a1 EB AB A9 02             		mov.L	r11, 2724[r10]
 5607 37a5 EE AC A8 02             		mov.L	2720[r10], r12
 5608 37a9 FC 37 6C                		xor	r6, r12
 5609 37ac EB AC AA 02             		mov.L	r12, 2728[r10]
 5610 37b0 ED A3 0A                		mov.L	40[r10], r3
 5611 37b3 ED A4 0B                		mov.L	44[r10], r4
 5612 37b6 ED A5 0C                		mov.L	48[r10], r5
 5613 37b9 ED A6 0D                		mov.L	52[r10], r6
 5614 37bc FF 4D 53                		and	r5, r3, r13
 5615 37bf EB AD AB 02             		mov.L	r13, 2732[r10]
 5616 37c3 FF 47 64                		and	r6, r4, r7
 5617 37c6 EB A7 AC 02             		mov.L	r7, 2736[r10]
 5618 37ca ED A1 0E                		mov.L	56[r10], r1
 5619 37cd ED A2 0F                		mov.L	60[r10], r2
 5620 37d0 ED A3 0A                		mov.L	40[r10], r3
 5621 37d3 ED A4 0B                		mov.L	44[r10], r4
 5622 37d6 ED A5 0C                		mov.L	48[r10], r5
 5623 37d9 ED A6 0D                		mov.L	52[r10], r6
 5624 37dc FF 5B 53                		or	r5, r3, r11
 5625 37df EB AB AD 02             		mov.L	r11, 2740[r10]
 5626 37e3 FF 5C 64                		or	r6, r4, r12
 5627 37e6 EB AC AE 02             		mov.L	r12, 2744[r10]
 5628 37ea EF 1D                   		mov.L	r1, r13
 5629 37ec 06 92 AD AD 02          		and	2740[r10], r13
 5630 37f1 EB AD AF 02             		mov.L	r13, 2748[r10]
 5631 37f5 EF 27                   		mov.L	r2, r7
 5632 37f7 06 92 A7 AE 02          		and	2744[r10], r7
 5633 37fc EB A7 B0 02             		mov.L	r7, 2752[r10]
 5634 3800 EE AB AB 02             		mov.L	2732[r10], r11
 5635 3804 EE AC AF 02             		mov.L	2748[r10], r12
 5636 3808 57 CB                   		or	r12, r11
 5637 380a EB AB B1 02             		mov.L	r11, 2756[r10]
 5638 380e EE AD AC 02             		mov.L	2736[r10], r13
 5639 3812 EE A7 B0 02             		mov.L	2752[r10], r7
 5640 3816 57 7D                   		or	r7, r13
 5641 3818 EB AD B2 02             		mov.L	r13, 2760[r10]
 5642 381c EE AC AA 02             		mov.L	2728[r10], r12
 5643 3820 EE AD A9 02             		mov.L	2724[r10], r13
 5644 3824 EE A7 B1 02             		mov.L	2756[r10], r7
 5645 3828 FF 2B 7D                		add	r7, r13, r11
 5646 382b 06 A2 02 AC B2 02       		adc 2760[r10],r12
 5647 3831 EB AC 78 03             		mov.L	r12, 3552[r10]
 5648 3835 EB AB 77 03             		mov.L	r11, 3548[r10]
 5649 3839 ED A5 08                		mov.L	32[r10], r5
 5650 383c ED A6 09                		mov.L	36[r10], r6
 5651 383f EE AC 78 03             		mov.L	3552[r10], r12
 5652 3843 EE AD 77 03             		mov.L	3548[r10], r13
 5653 3847 FF 2B 5D                		add	r5, r13, r11
 5654 384a FC 0B 6C                		adc	r6, r12
 5655 384d EB AC B4 02             		mov.L	r12, 2768[r10]
 5656 3851 EB AB B3 02             		mov.L	r11, 2764[r10]
 5657 3855 E6 AA B3 02 08          		mov.L	2764[r10], 32[r10]
 5658 385a E6 AA B4 02 09          		mov.L	2768[r10], 36[r10]
 5659                             		.loc 2 757 23 is_stmt 1 discriminator 8
 5660 385f ED A5 10                		mov.L	64[r10], r5
 5661 3862 ED A6 11                		mov.L	68[r10], r6
 5662 3865 66 E3                   		mov.L	#14, r3
 5663 3867 66 04                   		mov.L	#0, r4
 5664 3869 EF 51                   		mov.L	r5, r1
 5665 386b EF 62                   		mov.L	r6, r2
 5666 386d 05 00 00 00             		bsr	_rotrFixed64
 5667 3871 EF 1B                   		mov.L	r1, r11
 5668 3873 EF 2C                   		mov.L	r2, r12
 5669 3875 ED A5 10                		mov.L	64[r10], r5
 5670 3878 ED A6 11                		mov.L	68[r10], r6
 5671 387b 75 43 12                		mov.L	#18, r3
 5672 387e 66 04                   		mov.L	#0, r4
 5673 3880 EF 51                   		mov.L	r5, r1
 5674 3882 EF 62                   		mov.L	r6, r2
 5675 3884 05 00 00 00             		bsr	_rotrFixed64
 5676 3888 EF 15                   		mov.L	r1, r5
 5677 388a EF 26                   		mov.L	r2, r6
 5678 388c EF BD                   		mov.L	r11, r13
 5679 388e FC 37 5D                		xor	r5, r13
 5680 3891 EB AD B5 02             		mov.L	r13, 2772[r10]
 5681 3895 EF C7                   		mov.L	r12, r7
 5682 3897 FC 37 67                		xor	r6, r7
 5683 389a EB A7 B6 02             		mov.L	r7, 2776[r10]
 5684 389e ED A5 10                		mov.L	64[r10], r5
 5685 38a1 ED A6 11                		mov.L	68[r10], r6
 5686 38a4 75 43 29                		mov.L	#41, r3
 5687 38a7 66 04                   		mov.L	#0, r4
 5688 38a9 EF 51                   		mov.L	r5, r1
 5689 38ab EF 62                   		mov.L	r6, r2
 5690 38ad 05 00 00 00             		bsr	_rotrFixed64
 5691 38b1 EF 15                   		mov.L	r1, r5
 5692 38b3 EF 26                   		mov.L	r2, r6
 5693 38b5 EE AB B5 02             		mov.L	2772[r10], r11
 5694 38b9 FC 37 5B                		xor	r5, r11
 5695 38bc EB AB B7 02             		mov.L	r11, 2780[r10]
 5696 38c0 EE AC B6 02             		mov.L	2776[r10], r12
 5697 38c4 FC 37 6C                		xor	r6, r12
 5698 38c7 EB AC B8 02             		mov.L	r12, 2784[r10]
 5699 38cb ED AB 04                		mov.L	16[r10], r11
 5700 38ce ED AC 05                		mov.L	20[r10], r12
 5701 38d1 ED A3 10                		mov.L	64[r10], r3
 5702 38d4 ED A4 11                		mov.L	68[r10], r4
 5703 38d7 ED A1 12                		mov.L	72[r10], r1
 5704 38da ED A2 13                		mov.L	76[r10], r2
 5705 38dd ED A5 04                		mov.L	16[r10], r5
 5706 38e0 ED A6 05                		mov.L	20[r10], r6
 5707 38e3 EF 1D                   		mov.L	r1, r13
 5708 38e5 FC 37 5D                		xor	r5, r13
 5709 38e8 EB AD B9 02             		mov.L	r13, 2788[r10]
 5710 38ec EF 27                   		mov.L	r2, r7
 5711 38ee FC 37 67                		xor	r6, r7
 5712 38f1 EB A7 BA 02             		mov.L	r7, 2792[r10]
 5713 38f5 EF 3D                   		mov.L	r3, r13
 5714 38f7 06 92 AD B9 02          		and	2788[r10], r13
 5715 38fc EB AD BB 02             		mov.L	r13, 2796[r10]
 5716 3900 EF 47                   		mov.L	r4, r7
 5717 3902 06 92 A7 BA 02          		and	2792[r10], r7
 5718 3907 EB A7 BC 02             		mov.L	r7, 2800[r10]
 5719 390b EE AD BB 02             		mov.L	2796[r10], r13
 5720 390f FC 37 BD                		xor	r11, r13
 5721 3912 EB AD BD 02             		mov.L	r13, 2804[r10]
 5722 3916 EE A7 BC 02             		mov.L	2800[r10], r7
 5723 391a FC 37 C7                		xor	r12, r7
 5724 391d EB A7 BE 02             		mov.L	r7, 2808[r10]
 5725 3921 EE AC B8 02             		mov.L	2784[r10], r12
 5726 3925 EE AD B7 02             		mov.L	2780[r10], r13
 5727 3929 EE A7 BD 02             		mov.L	2804[r10], r7
 5728 392d FF 2B 7D                		add	r7, r13, r11
 5729 3930 06 A2 02 AC BE 02       		adc 2808[r10],r12
 5730 3936 EB AC C0 02             		mov.L	r12, 2816[r10]
 5731 393a EB AB BF 02             		mov.L	r11, 2812[r10]
 5732 393e EC A5                   		mov.L	[r10], r5
 5733 3940 62 E5                   		add	#14, r5
 5734 3942 FD C3 54                		shll	#3, r5, r4
 5735 3945 ED A5 01                		mov.L	4[r10], r5
 5736 3948 4B 54                   		add	r5, r4
 5737 394a EC 45                   		mov.L	[r4], r5
 5738 394c A8 4E                   		mov.L	4[r4], r6
 5739 394e EE AC C0 02             		mov.L	2816[r10], r12
 5740 3952 EE AD BF 02             		mov.L	2812[r10], r13
 5741 3956 FF 2B 5D                		add	r5, r13, r11
 5742 3959 FC 0B 6C                		adc	r6, r12
 5743 395c EB AC C2 02             		mov.L	r12, 2824[r10]
 5744 3960 EB AB C1 02             		mov.L	r11, 2820[r10]
 5745 3964 EC A5                   		mov.L	[r10], r5
 5746 3966 61 05                   		cmp	#0, r5
 5747 3968 3A 89 01                		beq	.L72
 5748                             		.loc 2 757 23 is_stmt 0 discriminator 9
 5749 396b ED A5 02                		mov.L	8[r10], r5
 5750 396e 71 55 60                		add	#0x60, r5
 5751 3971 EC 5B                   		mov.L	[r5], r11
 5752 3973 ED 5C 01                		mov.L	4[r5], r12
 5753 3976 75 43 13                		mov.L	#19, r3
 5754 3979 66 04                   		mov.L	#0, r4
 5755 397b EF B1                   		mov.L	r11, r1
 5756 397d EF C2                   		mov.L	r12, r2
 5757 397f 05 00 00 00             		bsr	_rotrFixed64
 5758 3983 EF 18                   		mov.L	r1, r8
 5759 3985 EF 29                   		mov.L	r2, r9
 5760 3987 ED A5 02                		mov.L	8[r10], r5
 5761 398a 71 55 60                		add	#0x60, r5
 5762 398d EC 5B                   		mov.L	[r5], r11
 5763 398f ED 5C 01                		mov.L	4[r5], r12
 5764 3992 75 43 3D                		mov.L	#61, r3
 5765 3995 66 04                   		mov.L	#0, r4
 5766 3997 EF B1                   		mov.L	r11, r1
 5767 3999 EF C2                   		mov.L	r12, r2
 5768 399b 05 00 00 00             		bsr	_rotrFixed64
 5769 399f EF 15                   		mov.L	r1, r5
 5770 39a1 EF 26                   		mov.L	r2, r6
 5771 39a3 EF 8B                   		mov.L	r8, r11
 5772 39a5 FC 37 5B                		xor	r5, r11
 5773 39a8 EB AB C3 02             		mov.L	r11, 2828[r10]
 5774 39ac EF 9C                   		mov.L	r9, r12
 5775 39ae FC 37 6C                		xor	r6, r12
 5776 39b1 EB AC C4 02             		mov.L	r12, 2832[r10]
 5777 39b5 ED A5 02                		mov.L	8[r10], r5
 5778 39b8 71 54 60                		add	#0x60, r5, r4
 5779 39bb EC 45                   		mov.L	[r4], r5
 5780 39bd A8 4E                   		mov.L	4[r4], r6
 5781 39bf FD DA 64                		shll	#26, r6, r4
 5782 39c2 FD 86 5D                		shlr	#6, r5, r13
 5783 39c5 EB AD C5 02             		mov.L	r13, 2836[r10]
 5784 39c9 EE A7 C5 02             		mov.L	2836[r10], r7
 5785 39cd 57 47                   		or	r4, r7
 5786 39cf EB A7 C5 02             		mov.L	r7, 2836[r10]
 5787 39d3 FD 86 6B                		shlr	#6, r6, r11
 5788 39d6 EB AB C6 02             		mov.L	r11, 2840[r10]
 5789 39da EE AC C3 02             		mov.L	2828[r10], r12
 5790 39de 06 A2 0D AC C5 02       		xor	2836[r10].L, r12
 5791 39e4 EB AC C7 02             		mov.L	r12, 2844[r10]
 5792 39e8 EE AD C4 02             		mov.L	2832[r10], r13
 5793 39ec 06 A2 0D AD C6 02       		xor	2840[r10].L, r13
 5794 39f2 EB AD C8 02             		mov.L	r13, 2848[r10]
 5795 39f6 ED A5 02                		mov.L	8[r10], r5
 5796 39f9 71 54 38                		add	#56, r5, r4
 5797 39fc EC 45                   		mov.L	[r4], r5
 5798 39fe A8 4E                   		mov.L	4[r4], r6
 5799 3a00 EE AB C8 02             		mov.L	2848[r10], r11
 5800 3a04 EE AC C7 02             		mov.L	2844[r10], r12
 5801 3a08 FF 27 5C                		add	r5, r12, r7
 5802 3a0b FC 0B 6B                		adc	r6, r11
 5803 3a0e EB AB CA 02             		mov.L	r11, 2856[r10]
 5804 3a12 EB A7 C9 02             		mov.L	r7, 2852[r10]
 5805 3a16 ED A5 02                		mov.L	8[r10], r5
 5806 3a19 71 55 78                		add	#0x78, r5
 5807 3a1c EC 5B                   		mov.L	[r5], r11
 5808 3a1e ED 5C 01                		mov.L	4[r5], r12
 5809 3a21 66 13                   		mov.L	#1, r3
 5810 3a23 66 04                   		mov.L	#0, r4
 5811 3a25 EF B1                   		mov.L	r11, r1
 5812 3a27 EF C2                   		mov.L	r12, r2
 5813 3a29 05 00 00 00             		bsr	_rotrFixed64
 5814 3a2d EF 18                   		mov.L	r1, r8
 5815 3a2f EF 29                   		mov.L	r2, r9
 5816 3a31 ED A5 02                		mov.L	8[r10], r5
 5817 3a34 71 55 78                		add	#0x78, r5
 5818 3a37 EC 5B                   		mov.L	[r5], r11
 5819 3a39 ED 5C 01                		mov.L	4[r5], r12
 5820 3a3c 66 83                   		mov.L	#8, r3
 5821 3a3e 66 04                   		mov.L	#0, r4
 5822 3a40 EF B1                   		mov.L	r11, r1
 5823 3a42 EF C2                   		mov.L	r12, r2
 5824 3a44 05 00 00 00             		bsr	_rotrFixed64
 5825 3a48 EF 15                   		mov.L	r1, r5
 5826 3a4a EF 26                   		mov.L	r2, r6
 5827 3a4c EF 87                   		mov.L	r8, r7
 5828 3a4e FC 37 57                		xor	r5, r7
 5829 3a51 EB A7 CB 02             		mov.L	r7, 2860[r10]
 5830 3a55 EF 9B                   		mov.L	r9, r11
 5831 3a57 FC 37 6B                		xor	r6, r11
 5832 3a5a EB AB CC 02             		mov.L	r11, 2864[r10]
 5833 3a5e ED A5 02                		mov.L	8[r10], r5
 5834 3a61 71 54 78                		add	#0x78, r5, r4
 5835 3a64 EC 45                   		mov.L	[r4], r5
 5836 3a66 A8 4E                   		mov.L	4[r4], r6
 5837 3a68 FD D9 64                		shll	#25, r6, r4
 5838 3a6b FD 87 5C                		shlr	#7, r5, r12
 5839 3a6e EB AC CD 02             		mov.L	r12, 2868[r10]
 5840 3a72 EE AD CD 02             		mov.L	2868[r10], r13
 5841 3a76 57 4D                   		or	r4, r13
 5842 3a78 EB AD CD 02             		mov.L	r13, 2868[r10]
 5843 3a7c FD 87 67                		shlr	#7, r6, r7
 5844 3a7f EB A7 CE 02             		mov.L	r7, 2872[r10]
 5845 3a83 EE AB CB 02             		mov.L	2860[r10], r11
 5846 3a87 06 A2 0D AB CD 02       		xor	2868[r10].L, r11
 5847 3a8d EB AB CF 02             		mov.L	r11, 2876[r10]
 5848 3a91 EE AC CC 02             		mov.L	2864[r10], r12
 5849 3a95 06 A2 0D AC CE 02       		xor	2872[r10].L, r12
 5850 3a9b EB AC D0 02             		mov.L	r12, 2880[r10]
 5851 3a9f EE A7 CA 02             		mov.L	2856[r10], r7
 5852 3aa3 EE AB C9 02             		mov.L	2852[r10], r11
 5853 3aa7 EE AC CF 02             		mov.L	2876[r10], r12
 5854 3aab FF 2D CB                		add	r12, r11, r13
 5855 3aae 06 A2 02 A7 D0 02       		adc 2880[r10],r7
 5856 3ab4 EB A7 7A 03             		mov.L	r7, 3560[r10]
 5857 3ab8 EB AD 79 03             		mov.L	r13, 3556[r10]
 5858 3abc ED A5 02                		mov.L	8[r10], r5
 5859 3abf 71 55 70                		add	#0x70, r5
 5860 3ac2 EC 52                   		mov.L	[r5], r2
 5861 3ac4 A8 5B                   		mov.L	4[r5], r3
 5862 3ac6 ED A5 02                		mov.L	8[r10], r5
 5863 3ac9 71 54 70                		add	#0x70, r5, r4
 5864 3acc EE A7 7A 03             		mov.L	3560[r10], r7
 5865 3ad0 EE AB 79 03             		mov.L	3556[r10], r11
 5866 3ad4 FF 2D 2B                		add	r2, r11, r13
 5867 3ad7 FC 0B 37                		adc	r3, r7
 5868 3ada EB A7 D2 02             		mov.L	r7, 2888[r10]
 5869 3ade EB AD D1 02             		mov.L	r13, 2884[r10]
 5870 3ae2 E2 A4 D1 02             		mov.L	2884[r10], [r4]
 5871 3ae6 E6 A4 D2 02 01          		mov.L	2888[r10], 4[r4]
 5872 3aeb EC 45                   		mov.L	[r4], r5
 5873 3aed A8 4E                   		mov.L	4[r4], r6
 5874 3aef 2E 19                   		bra	.L73
 5875                             	.L72:
 5876                             		.loc 2 757 23 discriminator 10
 5877 3af1 ED A5 02                		mov.L	8[r10], r5
 5878 3af4 71 54 70                		add	#0x70, r5, r4
 5879 3af7 ED A5 14                		mov.L	80[r10], r5
 5880 3afa ED 52 2C                		mov.L	176[r5], r2
 5881 3afd ED 53 2D                		mov.L	180[r5], r3
 5882 3b00 E3 42                   		mov.L	r2, [r4]
 5883 3b02 A0 4B                   		mov.L	r3, 4[r4]
 5884 3b04 EC 45                   		mov.L	[r4], r5
 5885 3b06 A8 4E                   		mov.L	4[r4], r6
 5886                             	.L73:
 5887                             		.loc 2 757 23 discriminator 12
 5888 3b08 EF 67                   		mov.L	r6, r7
 5889 3b0a EE AB C1 02             		mov.L	2820[r10], r11
 5890 3b0e FF 2D B5                		add	r11, r5, r13
 5891 3b11 06 A2 02 A7 C2 02       		adc 2824[r10],r7
 5892 3b17 EB A7 7C 03             		mov.L	r7, 3568[r10]
 5893 3b1b EB AD 7B 03             		mov.L	r13, 3564[r10]
 5894 3b1f ED A5 06                		mov.L	24[r10], r5
 5895 3b22 ED A6 07                		mov.L	28[r10], r6
 5896 3b25 EE AD 7C 03             		mov.L	3568[r10], r13
 5897 3b29 EE A7 7B 03             		mov.L	3564[r10], r7
 5898 3b2d FF 2C 57                		add	r5, r7, r12
 5899 3b30 FC 0B 6D                		adc	r6, r13
 5900 3b33 EB AD D4 02             		mov.L	r13, 2896[r10]
 5901 3b37 EB AC D3 02             		mov.L	r12, 2892[r10]
 5902 3b3b E6 AA D3 02 06          		mov.L	2892[r10], 24[r10]
 5903 3b40 E6 AA D4 02 07          		mov.L	2896[r10], 28[r10]
 5904 3b45 ED A3 0E                		mov.L	56[r10], r3
 5905 3b48 ED A4 0F                		mov.L	60[r10], r4
 5906 3b4b ED A5 06                		mov.L	24[r10], r5
 5907 3b4e ED A6 07                		mov.L	28[r10], r6
 5908 3b51 EF 4D                   		mov.L	r4, r13
 5909 3b53 FF 2C 53                		add	r5, r3, r12
 5910 3b56 FC 0B 6D                		adc	r6, r13
 5911 3b59 EB AD D6 02             		mov.L	r13, 2904[r10]
 5912 3b5d EB AC D5 02             		mov.L	r12, 2900[r10]
 5913 3b61 E6 AA D5 02 0E          		mov.L	2900[r10], 56[r10]
 5914 3b66 E6 AA D6 02 0F          		mov.L	2904[r10], 60[r10]
 5915 3b6b ED A5 08                		mov.L	32[r10], r5
 5916 3b6e ED A6 09                		mov.L	36[r10], r6
 5917 3b71 75 43 1C                		mov.L	#28, r3
 5918 3b74 66 04                   		mov.L	#0, r4
 5919 3b76 EF 51                   		mov.L	r5, r1
 5920 3b78 EF 62                   		mov.L	r6, r2
 5921 3b7a 05 00 00 00             		bsr	_rotrFixed64
 5922 3b7e EF 1B                   		mov.L	r1, r11
 5923 3b80 EF 2C                   		mov.L	r2, r12
 5924 3b82 ED A5 08                		mov.L	32[r10], r5
 5925 3b85 ED A6 09                		mov.L	36[r10], r6
 5926 3b88 75 43 22                		mov.L	#34, r3
 5927 3b8b 66 04                   		mov.L	#0, r4
 5928 3b8d EF 51                   		mov.L	r5, r1
 5929 3b8f EF 62                   		mov.L	r6, r2
 5930 3b91 05 00 00 00             		bsr	_rotrFixed64
 5931 3b95 EF 15                   		mov.L	r1, r5
 5932 3b97 EF 26                   		mov.L	r2, r6
 5933 3b99 EF BD                   		mov.L	r11, r13
 5934 3b9b FC 37 5D                		xor	r5, r13
 5935 3b9e EB AD D7 02             		mov.L	r13, 2908[r10]
 5936 3ba2 EF C7                   		mov.L	r12, r7
 5937 3ba4 FC 37 67                		xor	r6, r7
 5938 3ba7 EB A7 D8 02             		mov.L	r7, 2912[r10]
 5939 3bab ED A5 08                		mov.L	32[r10], r5
 5940 3bae ED A6 09                		mov.L	36[r10], r6
 5941 3bb1 75 43 27                		mov.L	#39, r3
 5942 3bb4 66 04                   		mov.L	#0, r4
 5943 3bb6 EF 51                   		mov.L	r5, r1
 5944 3bb8 EF 62                   		mov.L	r6, r2
 5945 3bba 05 00 00 00             		bsr	_rotrFixed64
 5946 3bbe EF 15                   		mov.L	r1, r5
 5947 3bc0 EF 26                   		mov.L	r2, r6
 5948 3bc2 EE AB D7 02             		mov.L	2908[r10], r11
 5949 3bc6 FC 37 5B                		xor	r5, r11
 5950 3bc9 EB AB D9 02             		mov.L	r11, 2916[r10]
 5951 3bcd EE AC D8 02             		mov.L	2912[r10], r12
 5952 3bd1 FC 37 6C                		xor	r6, r12
 5953 3bd4 EB AC DA 02             		mov.L	r12, 2920[r10]
 5954 3bd8 ED A3 08                		mov.L	32[r10], r3
 5955 3bdb ED A4 09                		mov.L	36[r10], r4
 5956 3bde ED A5 0A                		mov.L	40[r10], r5
 5957 3be1 ED A6 0B                		mov.L	44[r10], r6
 5958 3be4 FF 4D 53                		and	r5, r3, r13
 5959 3be7 EB AD DB 02             		mov.L	r13, 2924[r10]
 5960 3beb FF 47 64                		and	r6, r4, r7
 5961 3bee EB A7 DC 02             		mov.L	r7, 2928[r10]
 5962 3bf2 ED A1 0C                		mov.L	48[r10], r1
 5963 3bf5 ED A2 0D                		mov.L	52[r10], r2
 5964 3bf8 ED A3 08                		mov.L	32[r10], r3
 5965 3bfb ED A4 09                		mov.L	36[r10], r4
 5966 3bfe ED A5 0A                		mov.L	40[r10], r5
 5967 3c01 ED A6 0B                		mov.L	44[r10], r6
 5968 3c04 FF 5B 53                		or	r5, r3, r11
 5969 3c07 EB AB DD 02             		mov.L	r11, 2932[r10]
 5970 3c0b FF 5C 64                		or	r6, r4, r12
 5971 3c0e EB AC DE 02             		mov.L	r12, 2936[r10]
 5972 3c12 EF 1D                   		mov.L	r1, r13
 5973 3c14 06 92 AD DD 02          		and	2932[r10], r13
 5974 3c19 EB AD DF 02             		mov.L	r13, 2940[r10]
 5975 3c1d EF 27                   		mov.L	r2, r7
 5976 3c1f 06 92 A7 DE 02          		and	2936[r10], r7
 5977 3c24 EB A7 E0 02             		mov.L	r7, 2944[r10]
 5978 3c28 EE AB DB 02             		mov.L	2924[r10], r11
 5979 3c2c EE AC DF 02             		mov.L	2940[r10], r12
 5980 3c30 57 CB                   		or	r12, r11
 5981 3c32 EB AB E1 02             		mov.L	r11, 2948[r10]
 5982 3c36 EE AD DC 02             		mov.L	2928[r10], r13
 5983 3c3a EE A7 E0 02             		mov.L	2944[r10], r7
 5984 3c3e 57 7D                   		or	r7, r13
 5985 3c40 EB AD E2 02             		mov.L	r13, 2952[r10]
 5986 3c44 EE AC DA 02             		mov.L	2920[r10], r12
 5987 3c48 EE AD D9 02             		mov.L	2916[r10], r13
 5988 3c4c EE A7 E1 02             		mov.L	2948[r10], r7
 5989 3c50 FF 2B 7D                		add	r7, r13, r11
 5990 3c53 06 A2 02 AC E2 02       		adc 2952[r10],r12
 5991 3c59 EB AC 7E 03             		mov.L	r12, 3576[r10]
 5992 3c5d EB AB 7D 03             		mov.L	r11, 3572[r10]
 5993 3c61 ED A5 06                		mov.L	24[r10], r5
 5994 3c64 ED A6 07                		mov.L	28[r10], r6
 5995 3c67 EE AC 7E 03             		mov.L	3576[r10], r12
 5996 3c6b EE AD 7D 03             		mov.L	3572[r10], r13
 5997 3c6f FF 2B 5D                		add	r5, r13, r11
 5998 3c72 FC 0B 6C                		adc	r6, r12
 5999 3c75 EB AC E4 02             		mov.L	r12, 2960[r10]
 6000 3c79 EB AB E3 02             		mov.L	r11, 2956[r10]
 6001 3c7d E6 AA E3 02 06          		mov.L	2956[r10], 24[r10]
 6002 3c82 E6 AA E4 02 07          		mov.L	2960[r10], 28[r10]
 6003                             		.loc 2 757 30 is_stmt 1 discriminator 12
 6004 3c87 ED A5 0E                		mov.L	56[r10], r5
 6005 3c8a ED A6 0F                		mov.L	60[r10], r6
 6006 3c8d 66 E3                   		mov.L	#14, r3
 6007 3c8f 66 04                   		mov.L	#0, r4
 6008 3c91 EF 51                   		mov.L	r5, r1
 6009 3c93 EF 62                   		mov.L	r6, r2
 6010 3c95 05 00 00 00             		bsr	_rotrFixed64
 6011 3c99 EF 1B                   		mov.L	r1, r11
 6012 3c9b EF 2C                   		mov.L	r2, r12
 6013 3c9d ED A5 0E                		mov.L	56[r10], r5
 6014 3ca0 ED A6 0F                		mov.L	60[r10], r6
 6015 3ca3 75 43 12                		mov.L	#18, r3
 6016 3ca6 66 04                   		mov.L	#0, r4
 6017 3ca8 EF 51                   		mov.L	r5, r1
 6018 3caa EF 62                   		mov.L	r6, r2
 6019 3cac 05 00 00 00             		bsr	_rotrFixed64
 6020 3cb0 EF 15                   		mov.L	r1, r5
 6021 3cb2 EF 26                   		mov.L	r2, r6
 6022 3cb4 EF BD                   		mov.L	r11, r13
 6023 3cb6 FC 37 5D                		xor	r5, r13
 6024 3cb9 EB AD E5 02             		mov.L	r13, 2964[r10]
 6025 3cbd EF C7                   		mov.L	r12, r7
 6026 3cbf FC 37 67                		xor	r6, r7
 6027 3cc2 EB A7 E6 02             		mov.L	r7, 2968[r10]
 6028 3cc6 ED A5 0E                		mov.L	56[r10], r5
 6029 3cc9 ED A6 0F                		mov.L	60[r10], r6
 6030 3ccc 75 43 29                		mov.L	#41, r3
 6031 3ccf 66 04                   		mov.L	#0, r4
 6032 3cd1 EF 51                   		mov.L	r5, r1
 6033 3cd3 EF 62                   		mov.L	r6, r2
 6034 3cd5 05 00 00 00             		bsr	_rotrFixed64
 6035 3cd9 EF 15                   		mov.L	r1, r5
 6036 3cdb EF 26                   		mov.L	r2, r6
 6037 3cdd EE AB E5 02             		mov.L	2964[r10], r11
 6038 3ce1 FC 37 5B                		xor	r5, r11
 6039 3ce4 EB AB E7 02             		mov.L	r11, 2972[r10]
 6040 3ce8 EE AC E6 02             		mov.L	2968[r10], r12
 6041 3cec FC 37 6C                		xor	r6, r12
 6042 3cef EB AC E8 02             		mov.L	r12, 2976[r10]
 6043 3cf3 ED AB 12                		mov.L	72[r10], r11
 6044 3cf6 ED AC 13                		mov.L	76[r10], r12
 6045 3cf9 ED A3 0E                		mov.L	56[r10], r3
 6046 3cfc ED A4 0F                		mov.L	60[r10], r4
 6047 3cff ED A1 10                		mov.L	64[r10], r1
 6048 3d02 ED A2 11                		mov.L	68[r10], r2
 6049 3d05 ED A5 12                		mov.L	72[r10], r5
 6050 3d08 ED A6 13                		mov.L	76[r10], r6
 6051 3d0b EF 1D                   		mov.L	r1, r13
 6052 3d0d FC 37 5D                		xor	r5, r13
 6053 3d10 EB AD E9 02             		mov.L	r13, 2980[r10]
 6054 3d14 EF 27                   		mov.L	r2, r7
 6055 3d16 FC 37 67                		xor	r6, r7
 6056 3d19 EB A7 EA 02             		mov.L	r7, 2984[r10]
 6057 3d1d EF 3D                   		mov.L	r3, r13
 6058 3d1f 06 92 AD E9 02          		and	2980[r10], r13
 6059 3d24 EB AD EB 02             		mov.L	r13, 2988[r10]
 6060 3d28 EF 47                   		mov.L	r4, r7
 6061 3d2a 06 92 A7 EA 02          		and	2984[r10], r7
 6062 3d2f EB A7 EC 02             		mov.L	r7, 2992[r10]
 6063 3d33 EE AD EB 02             		mov.L	2988[r10], r13
 6064 3d37 FC 37 BD                		xor	r11, r13
 6065 3d3a EB AD ED 02             		mov.L	r13, 2996[r10]
 6066 3d3e EE A7 EC 02             		mov.L	2992[r10], r7
 6067 3d42 FC 37 C7                		xor	r12, r7
 6068 3d45 EB A7 EE 02             		mov.L	r7, 3000[r10]
 6069 3d49 EE AC E8 02             		mov.L	2976[r10], r12
 6070 3d4d EE AD E7 02             		mov.L	2972[r10], r13
 6071 3d51 EE A7 ED 02             		mov.L	2996[r10], r7
 6072 3d55 FF 2B 7D                		add	r7, r13, r11
 6073 3d58 06 A2 02 AC EE 02       		adc 3000[r10],r12
 6074 3d5e EB AC F0 02             		mov.L	r12, 3008[r10]
 6075 3d62 EB AB EF 02             		mov.L	r11, 3004[r10]
 6076 3d66 EC A5                   		mov.L	[r10], r5
 6077 3d68 62 F5                   		add	#15, r5
 6078 3d6a FD C3 54                		shll	#3, r5, r4
 6079 3d6d ED A5 01                		mov.L	4[r10], r5
 6080 3d70 4B 54                   		add	r5, r4
 6081 3d72 EC 45                   		mov.L	[r4], r5
 6082 3d74 A8 4E                   		mov.L	4[r4], r6
 6083 3d76 EE AC F0 02             		mov.L	3008[r10], r12
 6084 3d7a EE AD EF 02             		mov.L	3004[r10], r13
 6085 3d7e FF 2B 5D                		add	r5, r13, r11
 6086 3d81 FC 0B 6C                		adc	r6, r12
 6087 3d84 EB AC F2 02             		mov.L	r12, 3016[r10]
 6088 3d88 EB AB F1 02             		mov.L	r11, 3012[r10]
 6089 3d8c EC A5                   		mov.L	[r10], r5
 6090 3d8e 61 05                   		cmp	#0, r5
 6091 3d90 3A 80 01                		beq	.L74
 6092                             		.loc 2 757 30 is_stmt 0 discriminator 13
 6093 3d93 ED A5 02                		mov.L	8[r10], r5
 6094 3d96 71 55 68                		add	#0x68, r5
 6095 3d99 EC 5B                   		mov.L	[r5], r11
 6096 3d9b ED 5C 01                		mov.L	4[r5], r12
 6097 3d9e 75 43 13                		mov.L	#19, r3
 6098 3da1 66 04                   		mov.L	#0, r4
 6099 3da3 EF B1                   		mov.L	r11, r1
 6100 3da5 EF C2                   		mov.L	r12, r2
 6101 3da7 05 00 00 00             		bsr	_rotrFixed64
 6102 3dab EF 18                   		mov.L	r1, r8
 6103 3dad EF 29                   		mov.L	r2, r9
 6104 3daf ED A5 02                		mov.L	8[r10], r5
 6105 3db2 71 55 68                		add	#0x68, r5
 6106 3db5 EC 5B                   		mov.L	[r5], r11
 6107 3db7 ED 5C 01                		mov.L	4[r5], r12
 6108 3dba 75 43 3D                		mov.L	#61, r3
 6109 3dbd 66 04                   		mov.L	#0, r4
 6110 3dbf EF B1                   		mov.L	r11, r1
 6111 3dc1 EF C2                   		mov.L	r12, r2
 6112 3dc3 05 00 00 00             		bsr	_rotrFixed64
 6113 3dc7 EF 15                   		mov.L	r1, r5
 6114 3dc9 EF 26                   		mov.L	r2, r6
 6115 3dcb EF 8B                   		mov.L	r8, r11
 6116 3dcd FC 37 5B                		xor	r5, r11
 6117 3dd0 EB AB F3 02             		mov.L	r11, 3020[r10]
 6118 3dd4 EF 9C                   		mov.L	r9, r12
 6119 3dd6 FC 37 6C                		xor	r6, r12
 6120 3dd9 EB AC F4 02             		mov.L	r12, 3024[r10]
 6121 3ddd ED A5 02                		mov.L	8[r10], r5
 6122 3de0 71 54 68                		add	#0x68, r5, r4
 6123 3de3 EC 45                   		mov.L	[r4], r5
 6124 3de5 A8 4E                   		mov.L	4[r4], r6
 6125 3de7 FD DA 64                		shll	#26, r6, r4
 6126 3dea FD 86 5D                		shlr	#6, r5, r13
 6127 3ded EB AD F5 02             		mov.L	r13, 3028[r10]
 6128 3df1 EE A7 F5 02             		mov.L	3028[r10], r7
 6129 3df5 57 47                   		or	r4, r7
 6130 3df7 EB A7 F5 02             		mov.L	r7, 3028[r10]
 6131 3dfb FD 86 6B                		shlr	#6, r6, r11
 6132 3dfe EB AB F6 02             		mov.L	r11, 3032[r10]
 6133 3e02 EE AC F3 02             		mov.L	3020[r10], r12
 6134 3e06 06 A2 0D AC F5 02       		xor	3028[r10].L, r12
 6135 3e0c EB AC F7 02             		mov.L	r12, 3036[r10]
 6136 3e10 EE AD F4 02             		mov.L	3024[r10], r13
 6137 3e14 06 A2 0D AD F6 02       		xor	3032[r10].L, r13
 6138 3e1a EB AD F8 02             		mov.L	r13, 3040[r10]
 6139 3e1e ED A5 02                		mov.L	8[r10], r5
 6140 3e21 71 54 40                		add	#0x40, r5, r4
 6141 3e24 EC 45                   		mov.L	[r4], r5
 6142 3e26 A8 4E                   		mov.L	4[r4], r6
 6143 3e28 EE AB F8 02             		mov.L	3040[r10], r11
 6144 3e2c EE AC F7 02             		mov.L	3036[r10], r12
 6145 3e30 FF 27 5C                		add	r5, r12, r7
 6146 3e33 FC 0B 6B                		adc	r6, r11
 6147 3e36 EB AB FA 02             		mov.L	r11, 3048[r10]
 6148 3e3a EB A7 F9 02             		mov.L	r7, 3044[r10]
 6149 3e3e ED A5 02                		mov.L	8[r10], r5
 6150 3e41 EC 5B                   		mov.L	[r5], r11
 6151 3e43 ED 5C 01                		mov.L	4[r5], r12
 6152 3e46 66 13                   		mov.L	#1, r3
 6153 3e48 66 04                   		mov.L	#0, r4
 6154 3e4a EF B1                   		mov.L	r11, r1
 6155 3e4c EF C2                   		mov.L	r12, r2
 6156 3e4e 05 00 00 00             		bsr	_rotrFixed64
 6157 3e52 EF 18                   		mov.L	r1, r8
 6158 3e54 EF 29                   		mov.L	r2, r9
 6159 3e56 ED A5 02                		mov.L	8[r10], r5
 6160 3e59 EC 5B                   		mov.L	[r5], r11
 6161 3e5b ED 5C 01                		mov.L	4[r5], r12
 6162 3e5e 66 83                   		mov.L	#8, r3
 6163 3e60 66 04                   		mov.L	#0, r4
 6164 3e62 EF B1                   		mov.L	r11, r1
 6165 3e64 EF C2                   		mov.L	r12, r2
 6166 3e66 05 00 00 00             		bsr	_rotrFixed64
 6167 3e6a EF 15                   		mov.L	r1, r5
 6168 3e6c EF 26                   		mov.L	r2, r6
 6169 3e6e EF 87                   		mov.L	r8, r7
 6170 3e70 FC 37 57                		xor	r5, r7
 6171 3e73 EB A7 FB 02             		mov.L	r7, 3052[r10]
 6172 3e77 EF 9B                   		mov.L	r9, r11
 6173 3e79 FC 37 6B                		xor	r6, r11
 6174 3e7c EB AB FC 02             		mov.L	r11, 3056[r10]
 6175 3e80 ED A4 02                		mov.L	8[r10], r4
 6176 3e83 EC 45                   		mov.L	[r4], r5
 6177 3e85 A8 4E                   		mov.L	4[r4], r6
 6178 3e87 FD D9 64                		shll	#25, r6, r4
 6179 3e8a FD 87 5C                		shlr	#7, r5, r12
 6180 3e8d EB AC FD 02             		mov.L	r12, 3060[r10]
 6181 3e91 EE AD FD 02             		mov.L	3060[r10], r13
 6182 3e95 57 4D                   		or	r4, r13
 6183 3e97 EB AD FD 02             		mov.L	r13, 3060[r10]
 6184 3e9b FD 87 67                		shlr	#7, r6, r7
 6185 3e9e EB A7 FE 02             		mov.L	r7, 3064[r10]
 6186 3ea2 EE AB FB 02             		mov.L	3052[r10], r11
 6187 3ea6 06 A2 0D AB FD 02       		xor	3060[r10].L, r11
 6188 3eac EB AB FF 02             		mov.L	r11, 3068[r10]
 6189 3eb0 EE AC FC 02             		mov.L	3056[r10], r12
 6190 3eb4 06 A2 0D AC FE 02       		xor	3064[r10].L, r12
 6191 3eba EB AC 00 03             		mov.L	r12, 3072[r10]
 6192 3ebe EE A7 FA 02             		mov.L	3048[r10], r7
 6193 3ec2 EE AB F9 02             		mov.L	3044[r10], r11
 6194 3ec6 EE AC FF 02             		mov.L	3068[r10], r12
 6195 3eca FF 2D CB                		add	r12, r11, r13
 6196 3ecd 06 A2 02 A7 00 03       		adc 3072[r10],r7
 6197 3ed3 EB A7 80 03             		mov.L	r7, 3584[r10]
 6198 3ed7 EB AD 7F 03             		mov.L	r13, 3580[r10]
 6199 3edb ED A5 02                		mov.L	8[r10], r5
 6200 3ede 71 55 78                		add	#0x78, r5
 6201 3ee1 EC 52                   		mov.L	[r5], r2
 6202 3ee3 A8 5B                   		mov.L	4[r5], r3
 6203 3ee5 ED A5 02                		mov.L	8[r10], r5
 6204 3ee8 71 54 78                		add	#0x78, r5, r4
 6205 3eeb EE A7 80 03             		mov.L	3584[r10], r7
 6206 3eef EE AB 7F 03             		mov.L	3580[r10], r11
 6207 3ef3 FF 2D 2B                		add	r2, r11, r13
 6208 3ef6 FC 0B 37                		adc	r3, r7
 6209 3ef9 EB A7 02 03             		mov.L	r7, 3080[r10]
 6210 3efd EB AD 01 03             		mov.L	r13, 3076[r10]
 6211 3f01 E2 A4 01 03             		mov.L	3076[r10], [r4]
 6212 3f05 E6 A4 02 03 01          		mov.L	3080[r10], 4[r4]
 6213 3f0a EC 45                   		mov.L	[r4], r5
 6214 3f0c A8 4E                   		mov.L	4[r4], r6
 6215 3f0e 2E 19                   		bra	.L75
 6216                             	.L74:
 6217                             		.loc 2 757 30 discriminator 14
 6218 3f10 ED A5 02                		mov.L	8[r10], r5
 6219 3f13 71 54 78                		add	#0x78, r5, r4
 6220 3f16 ED A5 14                		mov.L	80[r10], r5
 6221 3f19 ED 52 2E                		mov.L	184[r5], r2
 6222 3f1c ED 53 2F                		mov.L	188[r5], r3
 6223 3f1f E3 42                   		mov.L	r2, [r4]
 6224 3f21 A0 4B                   		mov.L	r3, 4[r4]
 6225 3f23 EC 45                   		mov.L	[r4], r5
 6226 3f25 A8 4E                   		mov.L	4[r4], r6
 6227                             	.L75:
 6228                             		.loc 2 757 30 discriminator 16
 6229 3f27 EF 67                   		mov.L	r6, r7
 6230 3f29 EE AB F1 02             		mov.L	3012[r10], r11
 6231 3f2d FF 2D B5                		add	r11, r5, r13
 6232 3f30 06 A2 02 A7 F2 02       		adc 3016[r10],r7
 6233 3f36 EB A7 82 03             		mov.L	r7, 3592[r10]
 6234 3f3a EB AD 81 03             		mov.L	r13, 3588[r10]
 6235 3f3e ED A5 04                		mov.L	16[r10], r5
 6236 3f41 ED A6 05                		mov.L	20[r10], r6
 6237 3f44 EE AD 82 03             		mov.L	3592[r10], r13
 6238 3f48 EE A7 81 03             		mov.L	3588[r10], r7
 6239 3f4c FF 2C 57                		add	r5, r7, r12
 6240 3f4f FC 0B 6D                		adc	r6, r13
 6241 3f52 EB AD 04 03             		mov.L	r13, 3088[r10]
 6242 3f56 EB AC 03 03             		mov.L	r12, 3084[r10]
 6243 3f5a E6 AA 03 03 04          		mov.L	3084[r10], 16[r10]
 6244 3f5f E6 AA 04 03 05          		mov.L	3088[r10], 20[r10]
 6245 3f64 ED A3 0C                		mov.L	48[r10], r3
 6246 3f67 ED A4 0D                		mov.L	52[r10], r4
 6247 3f6a ED A5 04                		mov.L	16[r10], r5
 6248 3f6d ED A6 05                		mov.L	20[r10], r6
 6249 3f70 EF 4D                   		mov.L	r4, r13
 6250 3f72 FF 2C 53                		add	r5, r3, r12
 6251 3f75 FC 0B 6D                		adc	r6, r13
 6252 3f78 EB AD 06 03             		mov.L	r13, 3096[r10]
 6253 3f7c EB AC 05 03             		mov.L	r12, 3092[r10]
 6254 3f80 E6 AA 05 03 0C          		mov.L	3092[r10], 48[r10]
 6255 3f85 E6 AA 06 03 0D          		mov.L	3096[r10], 52[r10]
 6256 3f8a ED A5 06                		mov.L	24[r10], r5
 6257 3f8d ED A6 07                		mov.L	28[r10], r6
 6258 3f90 75 43 1C                		mov.L	#28, r3
 6259 3f93 66 04                   		mov.L	#0, r4
 6260 3f95 EF 51                   		mov.L	r5, r1
 6261 3f97 EF 62                   		mov.L	r6, r2
 6262 3f99 05 00 00 00             		bsr	_rotrFixed64
 6263 3f9d EF 1B                   		mov.L	r1, r11
 6264 3f9f EF 2C                   		mov.L	r2, r12
 6265 3fa1 ED A5 06                		mov.L	24[r10], r5
 6266 3fa4 ED A6 07                		mov.L	28[r10], r6
 6267 3fa7 75 43 22                		mov.L	#34, r3
 6268 3faa 66 04                   		mov.L	#0, r4
 6269 3fac EF 51                   		mov.L	r5, r1
 6270 3fae EF 62                   		mov.L	r6, r2
 6271 3fb0 05 00 00 00             		bsr	_rotrFixed64
 6272 3fb4 EF 15                   		mov.L	r1, r5
 6273 3fb6 EF 26                   		mov.L	r2, r6
 6274 3fb8 EF BD                   		mov.L	r11, r13
 6275 3fba FC 37 5D                		xor	r5, r13
 6276 3fbd EB AD 07 03             		mov.L	r13, 3100[r10]
 6277 3fc1 EF C7                   		mov.L	r12, r7
 6278 3fc3 FC 37 67                		xor	r6, r7
 6279 3fc6 EB A7 08 03             		mov.L	r7, 3104[r10]
 6280 3fca ED A5 06                		mov.L	24[r10], r5
 6281 3fcd ED A6 07                		mov.L	28[r10], r6
 6282 3fd0 75 43 27                		mov.L	#39, r3
 6283 3fd3 66 04                   		mov.L	#0, r4
 6284 3fd5 EF 51                   		mov.L	r5, r1
 6285 3fd7 EF 62                   		mov.L	r6, r2
 6286 3fd9 05 00 00 00             		bsr	_rotrFixed64
 6287 3fdd EF 15                   		mov.L	r1, r5
 6288 3fdf EF 26                   		mov.L	r2, r6
 6289 3fe1 EE AB 07 03             		mov.L	3100[r10], r11
 6290 3fe5 FC 37 5B                		xor	r5, r11
 6291 3fe8 EB AB 09 03             		mov.L	r11, 3108[r10]
 6292 3fec EE AC 08 03             		mov.L	3104[r10], r12
 6293 3ff0 FC 37 6C                		xor	r6, r12
 6294 3ff3 EB AC 0A 03             		mov.L	r12, 3112[r10]
 6295 3ff7 ED A3 06                		mov.L	24[r10], r3
 6296 3ffa ED A4 07                		mov.L	28[r10], r4
 6297 3ffd ED A5 08                		mov.L	32[r10], r5
 6298 4000 ED A6 09                		mov.L	36[r10], r6
 6299 4003 FF 4D 53                		and	r5, r3, r13
 6300 4006 EB AD 0B 03             		mov.L	r13, 3116[r10]
 6301 400a FF 47 64                		and	r6, r4, r7
 6302 400d EB A7 0C 03             		mov.L	r7, 3120[r10]
 6303 4011 ED A1 0A                		mov.L	40[r10], r1
 6304 4014 ED A2 0B                		mov.L	44[r10], r2
 6305 4017 ED A3 06                		mov.L	24[r10], r3
 6306 401a ED A4 07                		mov.L	28[r10], r4
 6307 401d ED A5 08                		mov.L	32[r10], r5
 6308 4020 ED A6 09                		mov.L	36[r10], r6
 6309 4023 FF 5B 53                		or	r5, r3, r11
 6310 4026 EB AB 0D 03             		mov.L	r11, 3124[r10]
 6311 402a FF 5C 64                		or	r6, r4, r12
 6312 402d EB AC 0E 03             		mov.L	r12, 3128[r10]
 6313 4031 EF 1D                   		mov.L	r1, r13
 6314 4033 06 92 AD 0D 03          		and	3124[r10], r13
 6315 4038 EB AD 0F 03             		mov.L	r13, 3132[r10]
 6316 403c EF 27                   		mov.L	r2, r7
 6317 403e 06 92 A7 0E 03          		and	3128[r10], r7
 6318 4043 EB A7 10 03             		mov.L	r7, 3136[r10]
 6319 4047 EE AB 0B 03             		mov.L	3116[r10], r11
 6320 404b EE AC 0F 03             		mov.L	3132[r10], r12
 6321 404f 57 CB                   		or	r12, r11
 6322 4051 EB AB 11 03             		mov.L	r11, 3140[r10]
 6323 4055 EE AD 0C 03             		mov.L	3120[r10], r13
 6324 4059 EE A7 10 03             		mov.L	3136[r10], r7
 6325 405d 57 7D                   		or	r7, r13
 6326 405f EB AD 12 03             		mov.L	r13, 3144[r10]
 6327 4063 EE AC 0A 03             		mov.L	3112[r10], r12
 6328 4067 EE AD 09 03             		mov.L	3108[r10], r13
 6329 406b EE A7 11 03             		mov.L	3140[r10], r7
 6330 406f FF 2B 7D                		add	r7, r13, r11
 6331 4072 06 A2 02 AC 12 03       		adc 3144[r10],r12
 6332 4078 EB AC 84 03             		mov.L	r12, 3600[r10]
 6333 407c EB AB 83 03             		mov.L	r11, 3596[r10]
 6334 4080 ED A5 04                		mov.L	16[r10], r5
 6335 4083 ED A6 05                		mov.L	20[r10], r6
 6336 4086 EE AC 84 03             		mov.L	3600[r10], r12
 6337 408a EE AD 83 03             		mov.L	3596[r10], r13
 6338 408e FF 2B 5D                		add	r5, r13, r11
 6339 4091 FC 0B 6C                		adc	r6, r12
 6340 4094 EB AC 14 03             		mov.L	r12, 3152[r10]
 6341 4098 EB AB 13 03             		mov.L	r11, 3148[r10]
 6342 409c E6 AA 13 03 04          		mov.L	3148[r10], 16[r10]
 6343 40a1 E6 AA 14 03 05          		mov.L	3152[r10], 20[r10]
 753:../src/wolfcrypt/src/sha512.c ****         R( 0); R( 1); R( 2); R( 3);
 6344                             		.loc 2 753 27 is_stmt 1 discriminator 16
 6345 40a6 EC A5                   		mov.L	[r10], r5
 6346 40a8 71 55 10                		add	#16, r5
 6347 40ab E3 A5                   		mov.L	r5, [r10]
 6348                             	.L43:
 753:../src/wolfcrypt/src/sha512.c ****         R( 0); R( 1); R( 2); R( 3);
 6349                             		.loc 2 753 5 discriminator 2
 6350 40ad EC A5                   		mov.L	[r10], r5
 6351 40af 75 55 4F                		cmp	#0x4f, r5
 6352 40b2 24 05 38 8B BF          		bleu	.L76
 758:../src/wolfcrypt/src/sha512.c ****     }
 759:../src/wolfcrypt/src/sha512.c **** #endif /* USE_SLOW_SHA512 */
 760:../src/wolfcrypt/src/sha512.c **** 
 761:../src/wolfcrypt/src/sha512.c ****     /* Add the working vars back into digest */
 762:../src/wolfcrypt/src/sha512.c ****     sha512->digest[0] += a(0);
 6353                             		.loc 2 762 23
 6354 40b7 ED A5 14                		mov.L	80[r10], r5
 6355 40ba EC 53                   		mov.L	[r5], r3
 6356 40bc A8 5C                   		mov.L	4[r5], r4
 6357                             		.loc 2 762 26
 6358 40be ED A5 04                		mov.L	16[r10], r5
 6359 40c1 ED A6 05                		mov.L	20[r10], r6
 6360                             		.loc 2 762 23
 6361 40c4 EF 4C                   		mov.L	r4, r12
 6362 40c6 FF 2B 53                		add	r5, r3, r11
 6363 40c9 FC 0B 6C                		adc	r6, r12
 6364 40cc EB AC 16 03             		mov.L	r12, 3160[r10]
 6365 40d0 EB AB 15 03             		mov.L	r11, 3156[r10]
 6366 40d4 ED A5 14                		mov.L	80[r10], r5
 6367 40d7 E2 A5 15 03             		mov.L	3156[r10], [r5]
 6368 40db E6 A5 16 03 01          		mov.L	3160[r10], 4[r5]
 763:../src/wolfcrypt/src/sha512.c ****     sha512->digest[1] += b(0);
 6369                             		.loc 2 763 23
 6370 40e0 ED A5 14                		mov.L	80[r10], r5
 6371 40e3 A8 D3                   		mov.L	8[r5], r3
 6372 40e5 A8 DC                   		mov.L	12[r5], r4
 6373                             		.loc 2 763 26
 6374 40e7 ED A5 06                		mov.L	24[r10], r5
 6375 40ea ED A6 07                		mov.L	28[r10], r6
 6376                             		.loc 2 763 23
 6377 40ed EF 4B                   		mov.L	r4, r11
 6378 40ef FF 27 53                		add	r5, r3, r7
 6379 40f2 FC 0B 6B                		adc	r6, r11
 6380 40f5 EB AB 18 03             		mov.L	r11, 3168[r10]
 6381 40f9 EB A7 17 03             		mov.L	r7, 3164[r10]
 6382 40fd ED A5 14                		mov.L	80[r10], r5
 6383 4100 E6 A5 17 03 02          		mov.L	3164[r10], 8[r5]
 6384 4105 E6 A5 18 03 03          		mov.L	3168[r10], 12[r5]
 764:../src/wolfcrypt/src/sha512.c ****     sha512->digest[2] += c(0);
 6385                             		.loc 2 764 23
 6386 410a ED A4 14                		mov.L	80[r10], r4
 6387 410d A9 45                   		mov.L	16[r4], r5
 6388 410f A9 4E                   		mov.L	20[r4], r6
 6389                             		.loc 2 764 26
 6390 4111 ED A3 08                		mov.L	32[r10], r3
 6391 4114 ED A4 09                		mov.L	36[r10], r4
 6392                             		.loc 2 764 23
 6393 4117 EF 67                   		mov.L	r6, r7
 6394 4119 FF 2D 35                		add	r3, r5, r13
 6395 411c FC 0B 47                		adc	r4, r7
 6396 411f EB A7 1A 03             		mov.L	r7, 3176[r10]
 6397 4123 EB AD 19 03             		mov.L	r13, 3172[r10]
 6398 4127 ED A5 14                		mov.L	80[r10], r5
 6399 412a E6 A5 19 03 04          		mov.L	3172[r10], 16[r5]
 6400 412f E6 A5 1A 03 05          		mov.L	3176[r10], 20[r5]
 765:../src/wolfcrypt/src/sha512.c ****     sha512->digest[3] += d(0);
 6401                             		.loc 2 765 23
 6402 4134 ED A4 14                		mov.L	80[r10], r4
 6403 4137 A9 C5                   		mov.L	24[r4], r5
 6404 4139 A9 CE                   		mov.L	28[r4], r6
 6405                             		.loc 2 765 26
 6406 413b ED A3 0A                		mov.L	40[r10], r3
 6407 413e ED A4 0B                		mov.L	44[r10], r4
 6408                             		.loc 2 765 23
 6409 4141 EF 6D                   		mov.L	r6, r13
 6410 4143 FF 2C 35                		add	r3, r5, r12
 6411 4146 FC 0B 4D                		adc	r4, r13
 6412 4149 EB AD 1C 03             		mov.L	r13, 3184[r10]
 6413 414d EB AC 1B 03             		mov.L	r12, 3180[r10]
 6414 4151 ED A5 14                		mov.L	80[r10], r5
 6415 4154 E6 A5 1B 03 06          		mov.L	3180[r10], 24[r5]
 6416 4159 E6 A5 1C 03 07          		mov.L	3184[r10], 28[r5]
 766:../src/wolfcrypt/src/sha512.c ****     sha512->digest[4] += e(0);
 6417                             		.loc 2 766 23
 6418 415e ED A4 14                		mov.L	80[r10], r4
 6419 4161 AA 45                   		mov.L	32[r4], r5
 6420 4163 AA 4E                   		mov.L	36[r4], r6
 6421                             		.loc 2 766 26
 6422 4165 ED A3 0C                		mov.L	48[r10], r3
 6423 4168 ED A4 0D                		mov.L	52[r10], r4
 6424                             		.loc 2 766 23
 6425 416b EF 6C                   		mov.L	r6, r12
 6426 416d FF 2B 35                		add	r3, r5, r11
 6427 4170 FC 0B 4C                		adc	r4, r12
 6428 4173 EB AC 1E 03             		mov.L	r12, 3192[r10]
 6429 4177 EB AB 1D 03             		mov.L	r11, 3188[r10]
 6430 417b ED A5 14                		mov.L	80[r10], r5
 6431 417e E6 A5 1D 03 08          		mov.L	3188[r10], 32[r5]
 6432 4183 E6 A5 1E 03 09          		mov.L	3192[r10], 36[r5]
 767:../src/wolfcrypt/src/sha512.c ****     sha512->digest[5] += f(0);
 6433                             		.loc 2 767 23
 6434 4188 ED A4 14                		mov.L	80[r10], r4
 6435 418b AA C5                   		mov.L	40[r4], r5
 6436 418d AA CE                   		mov.L	44[r4], r6
 6437                             		.loc 2 767 26
 6438 418f ED A3 0E                		mov.L	56[r10], r3
 6439 4192 ED A4 0F                		mov.L	60[r10], r4
 6440                             		.loc 2 767 23
 6441 4195 EF 6B                   		mov.L	r6, r11
 6442 4197 FF 27 35                		add	r3, r5, r7
 6443 419a FC 0B 4B                		adc	r4, r11
 6444 419d EB AB 20 03             		mov.L	r11, 3200[r10]
 6445 41a1 EB A7 1F 03             		mov.L	r7, 3196[r10]
 6446 41a5 ED A5 14                		mov.L	80[r10], r5
 6447 41a8 E6 A5 1F 03 0A          		mov.L	3196[r10], 40[r5]
 6448 41ad E6 A5 20 03 0B          		mov.L	3200[r10], 44[r5]
 768:../src/wolfcrypt/src/sha512.c ****     sha512->digest[6] += g(0);
 6449                             		.loc 2 768 23
 6450 41b2 ED A4 14                		mov.L	80[r10], r4
 6451 41b5 AB 45                   		mov.L	48[r4], r5
 6452 41b7 AB 4E                   		mov.L	52[r4], r6
 6453                             		.loc 2 768 26
 6454 41b9 ED A3 10                		mov.L	64[r10], r3
 6455 41bc ED A4 11                		mov.L	68[r10], r4
 6456                             		.loc 2 768 23
 6457 41bf EF 67                   		mov.L	r6, r7
 6458 41c1 FF 2D 35                		add	r3, r5, r13
 6459 41c4 FC 0B 47                		adc	r4, r7
 6460 41c7 EB A7 22 03             		mov.L	r7, 3208[r10]
 6461 41cb EB AD 21 03             		mov.L	r13, 3204[r10]
 6462 41cf ED A5 14                		mov.L	80[r10], r5
 6463 41d2 E6 A5 21 03 0C          		mov.L	3204[r10], 48[r5]
 6464 41d7 E6 A5 22 03 0D          		mov.L	3208[r10], 52[r5]
 769:../src/wolfcrypt/src/sha512.c ****     sha512->digest[7] += h(0);
 6465                             		.loc 2 769 23
 6466 41dc ED A4 14                		mov.L	80[r10], r4
 6467 41df AB C5                   		mov.L	56[r4], r5
 6468 41e1 AB CE                   		mov.L	60[r4], r6
 6469                             		.loc 2 769 26
 6470 41e3 ED A3 12                		mov.L	72[r10], r3
 6471 41e6 ED A4 13                		mov.L	76[r10], r4
 6472                             		.loc 2 769 23
 6473 41e9 EF 6D                   		mov.L	r6, r13
 6474 41eb FF 2C 35                		add	r3, r5, r12
 6475 41ee FC 0B 4D                		adc	r4, r13
 6476 41f1 EB AD 24 03             		mov.L	r13, 3216[r10]
 6477 41f5 EB AC 23 03             		mov.L	r12, 3212[r10]
 6478 41f9 ED A5 14                		mov.L	80[r10], r5
 6479 41fc E6 A5 23 03 0E          		mov.L	3212[r10], 56[r5]
 6480 4201 E6 A5 24 03 0F          		mov.L	3216[r10], 60[r5]
 770:../src/wolfcrypt/src/sha512.c **** 
 771:../src/wolfcrypt/src/sha512.c ****     /* Wipe variables */
 772:../src/wolfcrypt/src/sha512.c ****     ForceZero(W, sizeof(word64) * 16);
 6481                             		.loc 2 772 5
 6482 4206 75 42 80                		mov.L	#0x80, r2
 6483 4209 ED A1 02                		mov.L	8[r10], r1
 6484 420c 05 00 00 00             		bsr	_ForceZero
 773:../src/wolfcrypt/src/sha512.c ****     ForceZero(T, sizeof(T));
 6485                             		.loc 2 773 5
 6486 4210 71 A5 10                		add	#16, r10, r5
 6487 4213 75 42 40                		mov.L	#0x40, r2
 6488 4216 EF 51                   		mov.L	r5, r1
 6489 4218 05 00 00 00             		bsr	_ForceZero
 6490                             	.LBB2:
 774:../src/wolfcrypt/src/sha512.c **** 
 775:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SMALL_STACK_CACHE)
 776:../src/wolfcrypt/src/sha512.c ****     XFREE(W, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
 6491                             		.loc 2 776 5
 6492 421c ED A5 02                		mov.L	8[r10], r5
 6493 421f E7 A5 03                		mov.L	r5, 12[r10]
 6494 4222 ED A5 03                		mov.L	12[r10], r5
 6495 4225 61 05                   		cmp	#0, r5
 6496 4227 10                      		beq	.L77
 6497                             		.loc 2 776 5 is_stmt 0 discriminator 1
 6498 4228 ED A1 03                		mov.L	12[r10], r1
 6499 422b 05 00 00 00             		bsr	_wolfSSL_Free
 6500                             	.L77:
 6501                             	.LBE2:
 777:../src/wolfcrypt/src/sha512.c **** #endif
 778:../src/wolfcrypt/src/sha512.c **** 
 779:../src/wolfcrypt/src/sha512.c ****     return 0;
 6502                             		.loc 2 779 12 is_stmt 1
 6503 422f 66 05                   		mov.L	#0, r5
 6504                             	.L78:
 780:../src/wolfcrypt/src/sha512.c **** }
 6505                             		.loc 2 780 1 discriminator 1
 6506 4231 EF 51                   		mov.L	r5, r1
 6507 4233 72 00 14 0E             		add	#0xe14, r0
 6508 4237 3F 6D 08                		rtsd	#32, r6-r13
 6509                             	.LFE50:
 6511                             		.section	.text.AddLength,"ax",@progbits
 6513                             	_AddLength:
 6514                             	.LFB51:
 781:../src/wolfcrypt/src/sha512.c **** 
 782:../src/wolfcrypt/src/sha512.c **** 
 783:../src/wolfcrypt/src/sha512.c **** static WC_INLINE void AddLength(wc_Sha512* sha512, word32 len)
 784:../src/wolfcrypt/src/sha512.c **** {
 6515                             		.loc 2 784 1
 6516 0000 6E 6C                   		pushm	r6-r12
 6517                             	.LCFI30:
 6518 0002 71 0A F0                		add	#-16, r0, r10
 6519                             	.LCFI31:
 6520 0005 EF A0                   		mov.L	r10, r0
 6521 0007 E7 A1 02                		mov.L	r1, 8[r10]
 6522 000a E7 A2 03                		mov.L	r2, 12[r10]
 785:../src/wolfcrypt/src/sha512.c ****     word64 tmp = sha512->loLen;
 6523                             		.loc 2 785 12
 6524 000d ED A5 02                		mov.L	8[r10], r5
 6525 0010 ED 52 31                		mov.L	196[r5], r2
 6526 0013 E3 A2                   		mov.L	r2, [r10]
 6527 0015 ED 55 32                		mov.L	200[r5], r5
 6528 0018 E7 A5 01                		mov.L	r5, 4[r10]
 786:../src/wolfcrypt/src/sha512.c ****     if ( (sha512->loLen += len) < tmp)
 6529                             		.loc 2 786 25
 6530 001b ED A2 02                		mov.L	8[r10], r2
 6531 001e ED 25 31                		mov.L	196[r2], r5
 6532 0021 ED 26 32                		mov.L	200[r2], r6
 6533 0024 ED A2 03                		mov.L	12[r10], r2
 6534 0027 EF 23                   		mov.L	r2, r3
 6535 0029 66 04                   		mov.L	#0, r4
 6536 002b EF 69                   		mov.L	r6, r9
 6537 002d FF 28 35                		add	r3, r5, r8
 6538 0030 FC 0B 49                		adc	r4, r9
 6539 0033 ED A5 02                		mov.L	8[r10], r5
 6540 0036 E7 58 31                		mov.L	r8, 196[r5]
 6541 0039 E7 59 32                		mov.L	r9, 200[r5]
 6542 003c ED A4 02                		mov.L	8[r10], r4
 6543 003f ED 45 31                		mov.L	196[r4], r5
 6544 0042 ED 46 32                		mov.L	200[r4], r6
 6545                             		.loc 2 786 8
 6546 0045 ED A4 01                		mov.L	4[r10], r4
 6547 0048 47 64                   		cmp	r6, r4
 6548 004a 24 11                   		bgtu	.L82
 6549 004c ED A4 01                		mov.L	4[r10], r4
 6550 004f 47 64                   		cmp	r6, r4
 6551 0051 21 25                   		bne	.L83
 6552 0053 EC A4                   		mov.L	[r10], r4
 6553 0055 47 54                   		cmp	r5, r4
 6554 0057 24 04                   		bgtu	.L82
 787:../src/wolfcrypt/src/sha512.c ****         sha512->hiLen++;                       /* carry low to high */
 788:../src/wolfcrypt/src/sha512.c **** }
 6555                             		.loc 2 788 1
 6556 0059 2E 1D                   		bra	.L83
 6557                             	.L82:
 787:../src/wolfcrypt/src/sha512.c ****         sha512->hiLen++;                       /* carry low to high */
 6558                             		.loc 2 787 15
 6559 005b ED A4 02                		mov.L	8[r10], r4
 6560 005e ED 45 33                		mov.L	204[r4], r5
 6561 0061 ED 46 34                		mov.L	208[r4], r6
 787:../src/wolfcrypt/src/sha512.c ****         sha512->hiLen++;                       /* carry low to high */
 6562                             		.loc 2 787 22
 6563 0064 EF 6C                   		mov.L	r6, r12
 6564 0066 71 5B 01                		add	#1, r5, r11
 6565 0069 FD 74 2C 00             		adc	#0, r12
 6566 006d ED A5 02                		mov.L	8[r10], r5
 6567 0070 E7 5B 33                		mov.L	r11, 204[r5]
 6568 0073 E7 5C 34                		mov.L	r12, 208[r5]
 6569                             	.L83:
 6570                             		.loc 2 788 1
 6571 0076 03                      		nop
 6572 0077 3F 6C 0B                		rtsd	#44, r6-r12
 6573                             	.LFE51:
 6575                             		.section	.text.Sha512Update,"ax",@progbits
 6577                             	_Sha512Update:
 6578                             	.LFB52:
 789:../src/wolfcrypt/src/sha512.c **** 
 790:../src/wolfcrypt/src/sha512.c **** static WC_INLINE int Sha512Update(wc_Sha512* sha512, const byte* data, word32 len)
 791:../src/wolfcrypt/src/sha512.c **** {
 6579                             		.loc 2 791 1
 6580 0000 7E AA                   		push.l	r10
 6581                             	.LCFI32:
 6582 0002 71 0A E8                		add	#-24, r0, r10
 6583                             	.LCFI33:
 6584 0005 EF A0                   		mov.L	r10, r0
 6585 0007 E7 A1 03                		mov.L	r1, 12[r10]
 6586 000a E7 A2 04                		mov.L	r2, 16[r10]
 6587 000d E7 A3 05                		mov.L	r3, 20[r10]
 792:../src/wolfcrypt/src/sha512.c ****     int ret = 0;
 6588                             		.loc 2 792 9
 6589 0010 F8 A6 00                		mov.L	#0, [r10]
 793:../src/wolfcrypt/src/sha512.c ****     /* do block size increments */
 794:../src/wolfcrypt/src/sha512.c ****     byte* local = (byte*)sha512->buffer;
 6590                             		.loc 2 794 11
 6591 0013 ED A5 03                		mov.L	12[r10], r5
 6592 0016 71 55 40                		add	#0x40, r5
 6593 0019 E7 A5 01                		mov.L	r5, 4[r10]
 795:../src/wolfcrypt/src/sha512.c **** 
 796:../src/wolfcrypt/src/sha512.c ****     /* check that internal buffLen is valid */
 797:../src/wolfcrypt/src/sha512.c ****     if (sha512->buffLen >= WC_SHA512_BLOCK_SIZE)
 6594                             		.loc 2 797 15
 6595 001c ED A5 03                		mov.L	12[r10], r5
 6596 001f ED 55 30                		mov.L	192[r5], r5
 6597                             		.loc 2 797 8
 6598 0022 75 55 7F                		cmp	#0x7f, r5
 6599 0025 25 09                   		bleu	.L85
 798:../src/wolfcrypt/src/sha512.c ****         return BUFFER_E;
 6600                             		.loc 2 798 16
 6601 0027 FB 5A 7C FF             		mov.L	#-132, r5
 6602 002b 38 36 01                		bra	.L86
 6603                             	.L85:
 799:../src/wolfcrypt/src/sha512.c **** 
 800:../src/wolfcrypt/src/sha512.c ****     if (len == 0)
 6604                             		.loc 2 800 8
 6605 002e ED A5 05                		mov.L	20[r10], r5
 6606 0031 61 05                   		cmp	#0, r5
 6607 0033 1E                      		bne	.L87
 801:../src/wolfcrypt/src/sha512.c ****         return 0;
 6608                             		.loc 2 801 16
 6609 0034 66 05                   		mov.L	#0, r5
 6610 0036 38 2B 01                		bra	.L86
 6611                             	.L87:
 802:../src/wolfcrypt/src/sha512.c **** 
 803:../src/wolfcrypt/src/sha512.c ****     AddLength(sha512, len);
 6612                             		.loc 2 803 5
 6613 0039 ED A2 05                		mov.L	20[r10], r2
 6614 003c ED A1 03                		mov.L	12[r10], r1
 6615 003f 05 00 00 00             		bsr	_AddLength
 804:../src/wolfcrypt/src/sha512.c **** 
 805:../src/wolfcrypt/src/sha512.c ****     if (sha512->buffLen > 0) {
 6616                             		.loc 2 805 15
 6617 0043 ED A5 03                		mov.L	12[r10], r5
 6618 0046 ED 55 30                		mov.L	192[r5], r5
 6619                             		.loc 2 805 8
 6620 0049 61 05                   		cmp	#0, r5
 6621 004b 3A E6 00                		beq	.L91
 6622                             	.LBB3:
 806:../src/wolfcrypt/src/sha512.c ****         word32 add = min(len, WC_SHA512_BLOCK_SIZE - sha512->buffLen);
 6623                             		.loc 2 806 60
 6624 004e ED A5 03                		mov.L	12[r10], r5
 6625 0051 ED 55 30                		mov.L	192[r5], r5
 6626                             		.loc 2 806 22
 6627 0054 75 44 80                		mov.L	#0x80, r4
 6628 0057 FF 05 54                		sub	r5, r4, r5
 6629 005a EF 52                   		mov.L	r5, r2
 6630 005c ED A1 05                		mov.L	20[r10], r1
 6631 005f 05 00 00 00             		bsr	_min
 6632 0063 E7 A1 02                		mov.L	r1, 8[r10]
 807:../src/wolfcrypt/src/sha512.c ****         if (add > 0) {
 6633                             		.loc 2 807 12
 6634 0066 ED A5 02                		mov.L	8[r10], r5
 6635 0069 61 05                   		cmp	#0, r5
 6636 006b 20 41                   		beq	.L89
 808:../src/wolfcrypt/src/sha512.c ****             XMEMCPY(&local[sha512->buffLen], data, add);
 6637                             		.loc 2 808 13
 6638 006d ED A5 03                		mov.L	12[r10], r5
 6639 0070 ED 55 30                		mov.L	192[r5], r5
 6640 0073 ED A4 01                		mov.L	4[r10], r4
 6641 0076 4B 45                   		add	r4, r5
 6642 0078 ED A3 02                		mov.L	8[r10], r3
 6643 007b ED A2 04                		mov.L	16[r10], r2
 6644 007e EF 51                   		mov.L	r5, r1
 6645 0080 05 00 00 00             		bsr	_memcpy
 809:../src/wolfcrypt/src/sha512.c **** 
 810:../src/wolfcrypt/src/sha512.c ****             sha512->buffLen += add;
 6646                             		.loc 2 810 29
 6647 0084 ED A5 03                		mov.L	12[r10], r5
 6648 0087 ED 55 30                		mov.L	192[r5], r5
 6649 008a EF 54                   		mov.L	r5, r4
 6650 008c 06 89 A4 02             		add	8[r10].L, r4
 6651 0090 ED A5 03                		mov.L	12[r10], r5
 6652 0093 E7 54 30                		mov.L	r4, 192[r5]
 811:../src/wolfcrypt/src/sha512.c ****             data            += add;
 6653                             		.loc 2 811 29
 6654 0096 ED A5 04                		mov.L	16[r10], r5
 6655 0099 06 89 A5 02             		add	8[r10].L, r5
 6656 009d E7 A5 04                		mov.L	r5, 16[r10]
 812:../src/wolfcrypt/src/sha512.c ****             len             -= add;
 6657                             		.loc 2 812 29
 6658 00a0 ED A4 05                		mov.L	20[r10], r4
 6659 00a3 ED A5 02                		mov.L	8[r10], r5
 6660 00a6 FF 05 54                		sub	r5, r4, r5
 6661 00a9 E7 A5 05                		mov.L	r5, 20[r10]
 6662                             	.L89:
 813:../src/wolfcrypt/src/sha512.c ****         }
 814:../src/wolfcrypt/src/sha512.c **** 
 815:../src/wolfcrypt/src/sha512.c ****         if (sha512->buffLen == WC_SHA512_BLOCK_SIZE) {
 6663                             		.loc 2 815 19
 6664 00ac ED A5 03                		mov.L	12[r10], r5
 6665 00af ED 55 30                		mov.L	192[r5], r5
 6666                             		.loc 2 815 12
 6667 00b2 75 55 80                		cmp	#0x80, r5
 6668 00b5 21 7C                   		bne	.L91
 816:../src/wolfcrypt/src/sha512.c ****     #if defined(LITTLE_ENDIAN_ORDER)
 817:../src/wolfcrypt/src/sha512.c ****         #if defined(USE_INTEL_SPEEDUP) && \
 818:../src/wolfcrypt/src/sha512.c ****             (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
 819:../src/wolfcrypt/src/sha512.c ****             if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
 820:../src/wolfcrypt/src/sha512.c ****         #endif
 821:../src/wolfcrypt/src/sha512.c ****             {
 822:../src/wolfcrypt/src/sha512.c ****         #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
 823:../src/wolfcrypt/src/sha512.c ****              defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 824:../src/wolfcrypt/src/sha512.c ****                 ByteReverseWords64(sha512->buffer, sha512->buffer,
 6669                             		.loc 2 824 42
 6670 00b7 ED A5 03                		mov.L	12[r10], r5
 6671 00ba 71 54 40                		add	#0x40, r5, r4
 6672                             		.loc 2 824 58
 6673 00bd ED A5 03                		mov.L	12[r10], r5
 6674 00c0 71 55 40                		add	#0x40, r5
 6675                             		.loc 2 824 17
 6676 00c3 75 43 80                		mov.L	#0x80, r3
 6677 00c6 EF 52                   		mov.L	r5, r2
 6678 00c8 EF 41                   		mov.L	r4, r1
 6679 00ca 05 00 00 00             		bsr	_ByteReverseWords64
 825:../src/wolfcrypt/src/sha512.c ****                                                          WC_SHA512_BLOCK_SIZE);
 826:../src/wolfcrypt/src/sha512.c ****         #endif
 827:../src/wolfcrypt/src/sha512.c ****             }
 828:../src/wolfcrypt/src/sha512.c ****     #endif
 829:../src/wolfcrypt/src/sha512.c ****     #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
 830:../src/wolfcrypt/src/sha512.c ****          defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 831:../src/wolfcrypt/src/sha512.c ****             ret = Transform_Sha512(sha512);
 6680                             		.loc 2 831 19
 6681 00ce ED A1 03                		mov.L	12[r10], r1
 6682 00d1 05 00 00 00             		bsr	__Transform_Sha512
 6683 00d5 E3 A1                   		mov.L	r1, [r10]
 832:../src/wolfcrypt/src/sha512.c ****     #else
 833:../src/wolfcrypt/src/sha512.c ****             if(sha512->ctx.mode == ESP32_SHA_INIT) {
 834:../src/wolfcrypt/src/sha512.c ****                 esp_sha_try_hw_lock(&sha512->ctx);
 835:../src/wolfcrypt/src/sha512.c ****             }
 836:../src/wolfcrypt/src/sha512.c ****             ret = esp_sha512_process(sha512);
 837:../src/wolfcrypt/src/sha512.c ****             if(ret == 0 && sha512->ctx.mode == ESP32_SHA_SW){
 838:../src/wolfcrypt/src/sha512.c ****                 ret = Transform_Sha512(sha512);
 839:../src/wolfcrypt/src/sha512.c ****             }
 840:../src/wolfcrypt/src/sha512.c ****     #endif
 841:../src/wolfcrypt/src/sha512.c ****             if (ret == 0)
 6684                             		.loc 2 841 16
 6685 00d7 EC A5                   		mov.L	[r10], r5
 6686 00d9 61 05                   		cmp	#0, r5
 6687 00db 1A                      		bne	.L90
 842:../src/wolfcrypt/src/sha512.c ****                 sha512->buffLen = 0;
 6688                             		.loc 2 842 33
 6689 00dc ED A5 03                		mov.L	12[r10], r5
 6690 00df F9 56 30 00             		mov.L	#0, 192[r5]
 6691 00e3 2E 4E                   		bra	.L91
 6692                             	.L90:
 843:../src/wolfcrypt/src/sha512.c ****             else
 844:../src/wolfcrypt/src/sha512.c ****                 len = 0;
 6693                             		.loc 2 844 21
 6694 00e5 F9 A6 05 00             		mov.L	#0, 20[r10]
 6695                             	.LBE3:
 845:../src/wolfcrypt/src/sha512.c ****         }
 846:../src/wolfcrypt/src/sha512.c ****     }
 847:../src/wolfcrypt/src/sha512.c **** 
 848:../src/wolfcrypt/src/sha512.c **** #if defined(USE_INTEL_SPEEDUP) && \
 849:../src/wolfcrypt/src/sha512.c ****     (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
 850:../src/wolfcrypt/src/sha512.c ****     if (Transform_Sha512_Len_p != NULL) {
 851:../src/wolfcrypt/src/sha512.c ****         word32 blocksLen = len & ~(WC_SHA512_BLOCK_SIZE-1);
 852:../src/wolfcrypt/src/sha512.c **** 
 853:../src/wolfcrypt/src/sha512.c ****         if (blocksLen > 0) {
 854:../src/wolfcrypt/src/sha512.c ****             sha512->data = data;
 855:../src/wolfcrypt/src/sha512.c ****             /* Byte reversal performed in function if required. */
 856:../src/wolfcrypt/src/sha512.c ****             Transform_Sha512_Len(sha512, blocksLen);
 857:../src/wolfcrypt/src/sha512.c ****             data += blocksLen;
 858:../src/wolfcrypt/src/sha512.c ****             len  -= blocksLen;
 859:../src/wolfcrypt/src/sha512.c ****         }
 860:../src/wolfcrypt/src/sha512.c ****     }
 861:../src/wolfcrypt/src/sha512.c ****     else
 862:../src/wolfcrypt/src/sha512.c **** #endif
 863:../src/wolfcrypt/src/sha512.c **** #if !defined(LITTLE_ENDIAN_ORDER) || (defined(USE_INTEL_SPEEDUP) && \
 864:../src/wolfcrypt/src/sha512.c ****         (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2)))
 865:../src/wolfcrypt/src/sha512.c ****     {
 866:../src/wolfcrypt/src/sha512.c ****         while (len >= WC_SHA512_BLOCK_SIZE) {
 867:../src/wolfcrypt/src/sha512.c ****             XMEMCPY(local, data, WC_SHA512_BLOCK_SIZE);
 868:../src/wolfcrypt/src/sha512.c **** 
 869:../src/wolfcrypt/src/sha512.c ****             data += WC_SHA512_BLOCK_SIZE;
 870:../src/wolfcrypt/src/sha512.c ****             len  -= WC_SHA512_BLOCK_SIZE;
 871:../src/wolfcrypt/src/sha512.c **** 
 872:../src/wolfcrypt/src/sha512.c ****         #if defined(USE_INTEL_SPEEDUP) && \
 873:../src/wolfcrypt/src/sha512.c ****             (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
 874:../src/wolfcrypt/src/sha512.c ****             if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
 875:../src/wolfcrypt/src/sha512.c ****             {
 876:../src/wolfcrypt/src/sha512.c ****                 ByteReverseWords64(sha512->buffer, sha512->buffer,
 877:../src/wolfcrypt/src/sha512.c ****                                                           WC_SHA512_BLOCK_SIZE);
 878:../src/wolfcrypt/src/sha512.c ****             }
 879:../src/wolfcrypt/src/sha512.c ****         #endif
 880:../src/wolfcrypt/src/sha512.c ****             /* Byte reversal performed in function if required. */
 881:../src/wolfcrypt/src/sha512.c ****             ret = Transform_Sha512(sha512);
 882:../src/wolfcrypt/src/sha512.c ****             if (ret != 0)
 883:../src/wolfcrypt/src/sha512.c ****                 break;
 884:../src/wolfcrypt/src/sha512.c ****         }
 885:../src/wolfcrypt/src/sha512.c ****     }
 886:../src/wolfcrypt/src/sha512.c **** #else
 887:../src/wolfcrypt/src/sha512.c ****     {
 888:../src/wolfcrypt/src/sha512.c ****         while (len >= WC_SHA512_BLOCK_SIZE) {
 6696                             		.loc 2 888 15
 6697 00e9 2E 48                   		bra	.L91
 6698                             	.L93:
 889:../src/wolfcrypt/src/sha512.c ****             XMEMCPY(local, data, WC_SHA512_BLOCK_SIZE);
 6699                             		.loc 2 889 13
 6700 00eb 75 43 80                		mov.L	#0x80, r3
 6701 00ee ED A2 04                		mov.L	16[r10], r2
 6702 00f1 ED A1 01                		mov.L	4[r10], r1
 6703 00f4 05 00 00 00             		bsr	_memcpy
 890:../src/wolfcrypt/src/sha512.c **** 
 891:../src/wolfcrypt/src/sha512.c ****             data += WC_SHA512_BLOCK_SIZE;
 6704                             		.loc 2 891 18
 6705 00f8 ED A5 04                		mov.L	16[r10], r5
 6706 00fb 72 55 80 00             		add	#0x80, r5
 6707 00ff E7 A5 04                		mov.L	r5, 16[r10]
 892:../src/wolfcrypt/src/sha512.c ****             len  -= WC_SHA512_BLOCK_SIZE;
 6708                             		.loc 2 892 18
 6709 0102 ED A5 05                		mov.L	20[r10], r5
 6710 0105 71 55 80                		add	#-128, r5
 6711 0108 E7 A5 05                		mov.L	r5, 20[r10]
 893:../src/wolfcrypt/src/sha512.c ****     #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
 894:../src/wolfcrypt/src/sha512.c ****          defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 895:../src/wolfcrypt/src/sha512.c ****             ByteReverseWords64(sha512->buffer, sha512->buffer,
 6712                             		.loc 2 895 38
 6713 010b ED A5 03                		mov.L	12[r10], r5
 6714 010e 71 54 40                		add	#0x40, r5, r4
 6715                             		.loc 2 895 54
 6716 0111 ED A5 03                		mov.L	12[r10], r5
 6717 0114 71 55 40                		add	#0x40, r5
 6718                             		.loc 2 895 13
 6719 0117 75 43 80                		mov.L	#0x80, r3
 6720 011a EF 52                   		mov.L	r5, r2
 6721 011c EF 41                   		mov.L	r4, r1
 6722 011e 05 00 00 00             		bsr	_ByteReverseWords64
 896:../src/wolfcrypt/src/sha512.c ****                                                        WC_SHA512_BLOCK_SIZE);
 897:../src/wolfcrypt/src/sha512.c ****     #endif
 898:../src/wolfcrypt/src/sha512.c ****     #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
 899:../src/wolfcrypt/src/sha512.c ****          defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 900:../src/wolfcrypt/src/sha512.c ****             ret = Transform_Sha512(sha512);
 6723                             		.loc 2 900 19
 6724 0122 ED A1 03                		mov.L	12[r10], r1
 6725 0125 05 00 00 00             		bsr	__Transform_Sha512
 6726 0129 E3 A1                   		mov.L	r1, [r10]
 901:../src/wolfcrypt/src/sha512.c ****     #else
 902:../src/wolfcrypt/src/sha512.c ****             if(sha512->ctx.mode == ESP32_SHA_INIT) {
 903:../src/wolfcrypt/src/sha512.c ****                 esp_sha_try_hw_lock(&sha512->ctx);
 904:../src/wolfcrypt/src/sha512.c ****             }
 905:../src/wolfcrypt/src/sha512.c ****             ret = esp_sha512_process(sha512);
 906:../src/wolfcrypt/src/sha512.c ****             if(ret == 0 && sha512->ctx.mode == ESP32_SHA_SW){
 907:../src/wolfcrypt/src/sha512.c ****                 ret = Transform_Sha512(sha512);
 908:../src/wolfcrypt/src/sha512.c ****             }
 909:../src/wolfcrypt/src/sha512.c ****     #endif
 910:../src/wolfcrypt/src/sha512.c ****             if (ret != 0)
 6727                             		.loc 2 910 16
 6728 012b EC A5                   		mov.L	[r10], r5
 6729 012d 61 05                   		cmp	#0, r5
 6730 012f 21 0C                   		bne	.L95
 6731                             		.balign 8,3,1
 6732                             	.L91:
 888:../src/wolfcrypt/src/sha512.c ****             XMEMCPY(local, data, WC_SHA512_BLOCK_SIZE);
 6733                             		.loc 2 888 15
 6734 0131 ED A5 05                		mov.L	20[r10], r5
 6735 0134 75 55 7F                		cmp	#0x7f, r5
 6736 0137 24 B4                   		bgtu	.L93
 6737 0139 2E 03                   		bra	.L92
 6738                             	.L95:
 911:../src/wolfcrypt/src/sha512.c ****                 break;
 6739                             		.loc 2 911 17
 6740 013b 03                      		nop
 6741                             	.L92:
 912:../src/wolfcrypt/src/sha512.c ****         }
 913:../src/wolfcrypt/src/sha512.c ****     }
 914:../src/wolfcrypt/src/sha512.c **** #endif
 915:../src/wolfcrypt/src/sha512.c **** 
 916:../src/wolfcrypt/src/sha512.c ****     if (ret == 0 && len > 0) {
 6742                             		.loc 2 916 8
 6743 013c EC A5                   		mov.L	[r10], r5
 6744 013e 61 05                   		cmp	#0, r5
 6745 0140 21 1F                   		bne	.L94
 6746                             		.loc 2 916 18 discriminator 1
 6747 0142 ED A5 05                		mov.L	20[r10], r5
 6748 0145 61 05                   		cmp	#0, r5
 6749 0147 20 18                   		beq	.L94
 917:../src/wolfcrypt/src/sha512.c ****         XMEMCPY(local, data, len);
 6750                             		.loc 2 917 9
 6751 0149 ED A3 05                		mov.L	20[r10], r3
 6752 014c ED A2 04                		mov.L	16[r10], r2
 6753 014f ED A1 01                		mov.L	4[r10], r1
 6754 0152 05 00 00 00             		bsr	_memcpy
 918:../src/wolfcrypt/src/sha512.c ****         sha512->buffLen = len;
 6755                             		.loc 2 918 25
 6756 0156 ED A5 03                		mov.L	12[r10], r5
 6757 0159 ED A4 05                		mov.L	20[r10], r4
 6758 015c E7 54 30                		mov.L	r4, 192[r5]
 6759                             	.L94:
 919:../src/wolfcrypt/src/sha512.c ****     }
 920:../src/wolfcrypt/src/sha512.c **** 
 921:../src/wolfcrypt/src/sha512.c ****     return ret;
 6760                             		.loc 2 921 12
 6761 015f EC A5                   		mov.L	[r10], r5
 6762                             	.L86:
 922:../src/wolfcrypt/src/sha512.c **** }
 6763                             		.loc 2 922 1
 6764 0161 EF 51                   		mov.L	r5, r1
 6765 0163 3F AA 07                		rtsd	#28, r10-r10
 6766                             	.LFE52:
 6768 0166 EF 00                   		.section	.text.wc_Sha512Update,"ax",@progbits
 6769                             		.global	_wc_Sha512Update
 6771                             	_wc_Sha512Update:
 6772                             	.LFB53:
 923:../src/wolfcrypt/src/sha512.c **** 
 924:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SHA512
 925:../src/wolfcrypt/src/sha512.c **** 
 926:../src/wolfcrypt/src/sha512.c **** int wc_Sha512Update(wc_Sha512* sha512, const byte* data, word32 len)
 927:../src/wolfcrypt/src/sha512.c **** {
 6773                             		.loc 2 927 1
 6774 0000 7E AA                   		push.l	r10
 6775                             	.LCFI34:
 6776 0002 71 0A F4                		add	#-12, r0, r10
 6777                             	.LCFI35:
 6778 0005 EF A0                   		mov.L	r10, r0
 6779 0007 E3 A1                   		mov.L	r1, [r10]
 6780 0009 E7 A2 01                		mov.L	r2, 4[r10]
 6781 000c E7 A3 02                		mov.L	r3, 8[r10]
 928:../src/wolfcrypt/src/sha512.c ****     if (sha512 == NULL || (data == NULL && len > 0)) {
 6782                             		.loc 2 928 8
 6783 000f EC A5                   		mov.L	[r10], r5
 6784 0011 61 05                   		cmp	#0, r5
 6785 0013 20 0F                   		beq	.L97
 6786                             		.loc 2 928 24 discriminator 1
 6787 0015 ED A5 01                		mov.L	4[r10], r5
 6788 0018 61 05                   		cmp	#0, r5
 6789 001a 21 0E                   		bne	.L98
 6790                             		.loc 2 928 41 discriminator 2
 6791 001c ED A5 02                		mov.L	8[r10], r5
 6792 001f 61 05                   		cmp	#0, r5
 6793 0021 17                      		beq	.L98
 6794                             	.L97:
 929:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 6795                             		.loc 2 929 16
 6796 0022 FB 5A 53 FF             		mov.L	#-173, r5
 6797 0026 2E 10                   		bra	.L99
 6798                             	.L98:
 930:../src/wolfcrypt/src/sha512.c ****     }
 931:../src/wolfcrypt/src/sha512.c **** 
 932:../src/wolfcrypt/src/sha512.c **** #ifdef WOLF_CRYPTO_CB
 933:../src/wolfcrypt/src/sha512.c ****     if (sha512->devId != INVALID_DEVID) {
 934:../src/wolfcrypt/src/sha512.c ****         int ret = wc_CryptoCb_Sha512Hash(sha512, data, len, NULL);
 935:../src/wolfcrypt/src/sha512.c ****         if (ret != CRYPTOCB_UNAVAILABLE)
 936:../src/wolfcrypt/src/sha512.c ****             return ret;
 937:../src/wolfcrypt/src/sha512.c ****         /* fall-through when unavailable */
 938:../src/wolfcrypt/src/sha512.c ****     }
 939:../src/wolfcrypt/src/sha512.c **** #endif
 940:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA512)
 941:../src/wolfcrypt/src/sha512.c ****     if (sha512->asyncDev.marker == WOLFSSL_ASYNC_MARKER_SHA512) {
 942:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_QA)
 943:../src/wolfcrypt/src/sha512.c ****         return IntelQaSymSha512(&sha512->asyncDev, NULL, data, len);
 944:../src/wolfcrypt/src/sha512.c ****     #endif
 945:../src/wolfcrypt/src/sha512.c ****     }
 946:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
 947:../src/wolfcrypt/src/sha512.c **** 
 948:../src/wolfcrypt/src/sha512.c ****     return Sha512Update(sha512, data, len);
 6799                             		.loc 2 948 12
 6800 0028 ED A3 02                		mov.L	8[r10], r3
 6801 002b ED A2 01                		mov.L	4[r10], r2
 6802 002e EC A1                   		mov.L	[r10], r1
 6803 0030 05 00 00 00             		bsr	_Sha512Update
 6804 0034 EF 15                   		mov.L	r1, r5
 6805                             	.L99:
 949:../src/wolfcrypt/src/sha512.c **** }
 6806                             		.loc 2 949 1
 6807 0036 EF 51                   		mov.L	r5, r1
 6808 0038 3F AA 04                		rtsd	#16, r10-r10
 6809                             	.LFE53:
 6811                             		.section	.text.Sha512Final,"ax",@progbits
 6813                             	_Sha512Final:
 6814                             	.LFB54:
 950:../src/wolfcrypt/src/sha512.c **** 
 951:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_SHA512 */
 952:../src/wolfcrypt/src/sha512.c **** 
 953:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_IMX6_CAAM || WOLFSSL_SILABS_SHA384 */
 954:../src/wolfcrypt/src/sha512.c **** 
 955:../src/wolfcrypt/src/sha512.c **** 
 956:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_KCAPI_HASH)
 957:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/kcapi/kcapi_hash.c */
 958:../src/wolfcrypt/src/sha512.c **** #elif defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_HASH)
 959:../src/wolfcrypt/src/sha512.c **** 
 960:../src/wolfcrypt/src/sha512.c **** #else
 961:../src/wolfcrypt/src/sha512.c **** 
 962:../src/wolfcrypt/src/sha512.c **** static WC_INLINE int Sha512Final(wc_Sha512* sha512)
 963:../src/wolfcrypt/src/sha512.c **** {
 6815                             		.loc 2 963 1
 6816 0000 6E 6D                   		pushm	r6-r13
 6817                             	.LCFI36:
 6818 0002 71 0A C4                		add	#-60, r0, r10
 6819                             	.LCFI37:
 6820 0005 EF A0                   		mov.L	r10, r0
 6821 0007 E7 A1 02                		mov.L	r1, 8[r10]
 964:../src/wolfcrypt/src/sha512.c ****     byte* local;
 965:../src/wolfcrypt/src/sha512.c ****     int ret;
 966:../src/wolfcrypt/src/sha512.c **** 
 967:../src/wolfcrypt/src/sha512.c ****     if (sha512 == NULL) {
 6822                             		.loc 2 967 8
 6823 000a ED A5 02                		mov.L	8[r10], r5
 6824 000d 61 05                   		cmp	#0, r5
 6825 000f 18                      		bne	.L101
 968:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 6826                             		.loc 2 968 16
 6827 0010 FB 5A 53 FF             		mov.L	#-173, r5
 6828 0014 38 B8 01                		bra	.L102
 6829                             	.L101:
 969:../src/wolfcrypt/src/sha512.c ****     }
 970:../src/wolfcrypt/src/sha512.c **** 
 971:../src/wolfcrypt/src/sha512.c ****     local = (byte*)sha512->buffer;
 6830                             		.loc 2 971 11
 6831 0017 ED A5 02                		mov.L	8[r10], r5
 6832 001a 71 55 40                		add	#0x40, r5
 6833 001d E3 A5                   		mov.L	r5, [r10]
 972:../src/wolfcrypt/src/sha512.c **** 
 973:../src/wolfcrypt/src/sha512.c ****     local[sha512->buffLen++] = 0x80;  /* add 1 */
 6834                             		.loc 2 973 17
 6835 001f ED A5 02                		mov.L	8[r10], r5
 6836 0022 ED 54 30                		mov.L	192[r5], r4
 6837                             		.loc 2 973 26
 6838 0025 71 43 01                		add	#1, r4, r3
 6839 0028 ED A5 02                		mov.L	8[r10], r5
 6840 002b E7 53 30                		mov.L	r3, 192[r5]
 6841                             		.loc 2 973 10
 6842 002e EC A5                   		mov.L	[r10], r5
 6843 0030 4B 45                   		add	r4, r5
 6844                             		.loc 2 973 30
 6845 0032 F8 54 80                		mov.B	#-128, [r5]
 974:../src/wolfcrypt/src/sha512.c **** 
 975:../src/wolfcrypt/src/sha512.c ****     /* pad with zeros */
 976:../src/wolfcrypt/src/sha512.c ****     if (sha512->buffLen > WC_SHA512_PAD_SIZE) {
 6846                             		.loc 2 976 15
 6847 0035 ED A5 02                		mov.L	8[r10], r5
 6848 0038 ED 55 30                		mov.L	192[r5], r5
 6849                             		.loc 2 976 8
 6850 003b 75 55 70                		cmp	#0x70, r5
 6851 003e 25 5C                   		bleu	.L103
 977:../src/wolfcrypt/src/sha512.c ****         XMEMSET(&local[sha512->buffLen], 0, WC_SHA512_BLOCK_SIZE - sha512->buffLen);
 6852                             		.loc 2 977 9
 6853 0040 ED A5 02                		mov.L	8[r10], r5
 6854 0043 ED 54 30                		mov.L	192[r5], r4
 6855 0046 EC A5                   		mov.L	[r10], r5
 6856 0048 FF 21 45                		add	r4, r5, r1
 6857 004b ED A5 02                		mov.L	8[r10], r5
 6858 004e ED 54 30                		mov.L	192[r5], r4
 6859 0051 75 45 80                		mov.L	#0x80, r5
 6860 0054 43 45                   		sub	r4, r5
 6861 0056 EF 53                   		mov.L	r5, r3
 6862 0058 66 02                   		mov.L	#0, r2
 6863 005a 05 00 00 00             		bsr	_memset
 978:../src/wolfcrypt/src/sha512.c ****         sha512->buffLen += WC_SHA512_BLOCK_SIZE - sha512->buffLen;
 6864                             		.loc 2 978 25
 6865 005e ED A5 02                		mov.L	8[r10], r5
 6866 0061 F9 5A 30 80 00          		mov.L	#0x80, 192[r5]
 979:../src/wolfcrypt/src/sha512.c **** #if defined(LITTLE_ENDIAN_ORDER)
 980:../src/wolfcrypt/src/sha512.c ****     #if defined(USE_INTEL_SPEEDUP) && \
 981:../src/wolfcrypt/src/sha512.c ****         (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
 982:../src/wolfcrypt/src/sha512.c ****         if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
 983:../src/wolfcrypt/src/sha512.c ****     #endif
 984:../src/wolfcrypt/src/sha512.c ****         {
 985:../src/wolfcrypt/src/sha512.c **** 
 986:../src/wolfcrypt/src/sha512.c ****        #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
 987:../src/wolfcrypt/src/sha512.c ****             defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 988:../src/wolfcrypt/src/sha512.c ****             ByteReverseWords64(sha512->buffer,sha512->buffer,
 6867                             		.loc 2 988 38
 6868 0066 ED A5 02                		mov.L	8[r10], r5
 6869 0069 71 54 40                		add	#0x40, r5, r4
 6870                             		.loc 2 988 53
 6871 006c ED A5 02                		mov.L	8[r10], r5
 6872 006f 71 55 40                		add	#0x40, r5
 6873                             		.loc 2 988 13
 6874 0072 75 43 80                		mov.L	#0x80, r3
 6875 0075 EF 52                   		mov.L	r5, r2
 6876 0077 EF 41                   		mov.L	r4, r1
 6877 0079 05 00 00 00             		bsr	_ByteReverseWords64
 989:../src/wolfcrypt/src/sha512.c ****                                                          WC_SHA512_BLOCK_SIZE);
 990:../src/wolfcrypt/src/sha512.c ****        #endif
 991:../src/wolfcrypt/src/sha512.c ****         }
 992:../src/wolfcrypt/src/sha512.c **** #endif /* LITTLE_ENDIAN_ORDER */
 993:../src/wolfcrypt/src/sha512.c **** #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
 994:../src/wolfcrypt/src/sha512.c ****      defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
 995:../src/wolfcrypt/src/sha512.c ****         ret = Transform_Sha512(sha512);
 6878                             		.loc 2 995 15
 6879 007d ED A1 02                		mov.L	8[r10], r1
 6880 0080 05 00 00 00             		bsr	__Transform_Sha512
 6881 0084 E7 A1 01                		mov.L	r1, 4[r10]
 996:../src/wolfcrypt/src/sha512.c **** #else
 997:../src/wolfcrypt/src/sha512.c ****        if(sha512->ctx.mode == ESP32_SHA_INIT) {
 998:../src/wolfcrypt/src/sha512.c ****             esp_sha_try_hw_lock(&sha512->ctx);
 999:../src/wolfcrypt/src/sha512.c ****        }
1000:../src/wolfcrypt/src/sha512.c ****         ret = esp_sha512_process(sha512);
1001:../src/wolfcrypt/src/sha512.c ****         if(ret == 0 && sha512->ctx.mode == ESP32_SHA_SW){
1002:../src/wolfcrypt/src/sha512.c ****             ret = Transform_Sha512(sha512);
1003:../src/wolfcrypt/src/sha512.c ****         }
1004:../src/wolfcrypt/src/sha512.c **** #endif
1005:../src/wolfcrypt/src/sha512.c ****         if (ret != 0)
 6882                             		.loc 2 1005 12
 6883 0087 ED A5 01                		mov.L	4[r10], r5
 6884 008a 61 05                   		cmp	#0, r5
 6885 008c 17                      		beq	.L104
1006:../src/wolfcrypt/src/sha512.c ****             return ret;
 6886                             		.loc 2 1006 20
 6887 008d ED A5 01                		mov.L	4[r10], r5
 6888 0090 38 3C 01                		bra	.L102
 6889                             	.L104:
1007:../src/wolfcrypt/src/sha512.c **** 
1008:../src/wolfcrypt/src/sha512.c ****         sha512->buffLen = 0;
 6890                             		.loc 2 1008 25
 6891 0093 ED A5 02                		mov.L	8[r10], r5
 6892 0096 F9 56 30 00             		mov.L	#0, 192[r5]
 6893                             	.L103:
1009:../src/wolfcrypt/src/sha512.c ****     }
1010:../src/wolfcrypt/src/sha512.c ****     XMEMSET(&local[sha512->buffLen], 0, WC_SHA512_PAD_SIZE - sha512->buffLen);
 6894                             		.loc 2 1010 5
 6895 009a ED A5 02                		mov.L	8[r10], r5
 6896 009d ED 54 30                		mov.L	192[r5], r4
 6897 00a0 EC A5                   		mov.L	[r10], r5
 6898 00a2 FF 21 45                		add	r4, r5, r1
 6899 00a5 ED A5 02                		mov.L	8[r10], r5
 6900 00a8 ED 54 30                		mov.L	192[r5], r4
 6901 00ab 75 45 70                		mov.L	#0x70, r5
 6902 00ae 43 45                   		sub	r4, r5
 6903 00b0 EF 53                   		mov.L	r5, r3
 6904 00b2 66 02                   		mov.L	#0, r2
 6905 00b4 05 00 00 00             		bsr	_memset
1011:../src/wolfcrypt/src/sha512.c **** 
1012:../src/wolfcrypt/src/sha512.c ****     /* put lengths in bits */
1013:../src/wolfcrypt/src/sha512.c ****     sha512->hiLen = (sha512->loLen >> (8 * sizeof(sha512->loLen) - 3)) +
 6906                             		.loc 2 1013 28
 6907 00b8 ED A4 02                		mov.L	8[r10], r4
 6908 00bb ED 45 31                		mov.L	196[r4], r5
 6909 00be ED 46 32                		mov.L	200[r4], r6
 6910                             		.loc 2 1013 36
 6911 00c1 FD 9D 67                		shlr	#29, r6, r7
 6912 00c4 E7 A7 03                		mov.L	r7, 12[r10]
 6913 00c7 F9 A6 04 00             		mov.L	#0, 16[r10]
1014:../src/wolfcrypt/src/sha512.c ****                                                          (sha512->hiLen << 3);
 6914                             		.loc 2 1014 65
 6915 00cb ED A4 02                		mov.L	8[r10], r4
 6916 00ce ED 45 33                		mov.L	204[r4], r5
 6917 00d1 ED 46 34                		mov.L	208[r4], r6
 6918                             		.loc 2 1014 73
 6919 00d4 EF 6C                   		mov.L	r6, r12
 6920 00d6 FF 2B 55                		add	r5, r5, r11
 6921 00d9 FC 0B 6C                		adc	r6, r12
 6922 00dc EF C7                   		mov.L	r12, r7
 6923 00de FF 2E BB                		add	r11, r11, r14
 6924 00e1 FC 0B C7                		adc	r12, r7
 6925 00e4 E7 A7 08                		mov.L	r7, 32[r10]
 6926 00e7 E7 AE 07                		mov.L	r14, 28[r10]
 6927 00ea ED A7 08                		mov.L	32[r10], r7
 6928 00ed ED AB 07                		mov.L	28[r10], r11
 6929 00f0 ED AC 07                		mov.L	28[r10], r12
 6930 00f3 FF 2E CB                		add	r12, r11, r14
 6931 00f6 06 A1 02 A7 08          		adc 32[r10],r7
 6932 00fb E7 A7 0A                		mov.L	r7, 40[r10]
 6933 00fe E7 AE 09                		mov.L	r14, 36[r10]
 6934 0101 ED A5 09                		mov.L	36[r10], r5
 6935 0104 ED A6 0A                		mov.L	40[r10], r6
1013:../src/wolfcrypt/src/sha512.c ****                                                          (sha512->hiLen << 3);
 6936                             		.loc 2 1013 72
 6937 0107 ED AE 04                		mov.L	16[r10], r14
 6938 010a ED A7 03                		mov.L	12[r10], r7
 6939 010d FF 2D 57                		add	r5, r7, r13
 6940 0110 FC 0B 6E                		adc	r6, r14
 6941 0113 E7 AE 06                		mov.L	r14, 24[r10]
 6942 0116 E7 AD 05                		mov.L	r13, 20[r10]
1013:../src/wolfcrypt/src/sha512.c ****                                                          (sha512->hiLen << 3);
 6943                             		.loc 2 1013 19
 6944 0119 ED A5 02                		mov.L	8[r10], r5
 6945 011c E5 A5 05 33             		mov.L	20[r10], 204[r5]
 6946 0120 E5 A5 06 34             		mov.L	24[r10], 208[r5]
1015:../src/wolfcrypt/src/sha512.c ****     sha512->loLen = sha512->loLen << 3;
 6947                             		.loc 2 1015 27
 6948 0124 ED A4 02                		mov.L	8[r10], r4
 6949 0127 ED 45 31                		mov.L	196[r4], r5
 6950 012a ED 46 32                		mov.L	200[r4], r6
 6951                             		.loc 2 1015 35
 6952 012d EF 6D                   		mov.L	r6, r13
 6953 012f FF 2C 55                		add	r5, r5, r12
 6954 0132 FC 0B 6D                		adc	r6, r13
 6955 0135 E7 AD 0C                		mov.L	r13, 48[r10]
 6956 0138 E7 AC 0B                		mov.L	r12, 44[r10]
 6957 013b ED A9 0C                		mov.L	48[r10], r9
 6958 013e ED A7 0B                		mov.L	44[r10], r7
 6959 0141 ED AB 0B                		mov.L	44[r10], r11
 6960 0144 FF 28 B7                		add	r11, r7, r8
 6961 0147 06 A1 02 A9 0C          		adc 48[r10],r9
 6962 014c EF 9D                   		mov.L	r9, r13
 6963 014e FF 2C 88                		add	r8, r8, r12
 6964 0151 FC 0B 9D                		adc	r9, r13
 6965 0154 E7 AD 0E                		mov.L	r13, 56[r10]
 6966 0157 E7 AC 0D                		mov.L	r12, 52[r10]
 6967 015a ED A5 0D                		mov.L	52[r10], r5
 6968 015d ED A6 0E                		mov.L	56[r10], r6
 6969                             		.loc 2 1015 19
 6970 0160 ED A4 02                		mov.L	8[r10], r4
 6971 0163 E7 45 31                		mov.L	r5, 196[r4]
 6972 0166 E7 46 32                		mov.L	r6, 200[r4]
1016:../src/wolfcrypt/src/sha512.c **** 
1017:../src/wolfcrypt/src/sha512.c ****     /* store lengths */
1018:../src/wolfcrypt/src/sha512.c **** #if defined(LITTLE_ENDIAN_ORDER)
1019:../src/wolfcrypt/src/sha512.c ****     #if defined(USE_INTEL_SPEEDUP) && \
1020:../src/wolfcrypt/src/sha512.c ****         (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
1021:../src/wolfcrypt/src/sha512.c ****         if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
1022:../src/wolfcrypt/src/sha512.c ****     #endif
1023:../src/wolfcrypt/src/sha512.c ****     #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
1024:../src/wolfcrypt/src/sha512.c ****          defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
1025:../src/wolfcrypt/src/sha512.c ****             ByteReverseWords64(sha512->buffer, sha512->buffer, WC_SHA512_PAD_SIZE);
 6973                             		.loc 2 1025 38
 6974 0169 ED A5 02                		mov.L	8[r10], r5
 6975 016c 71 54 40                		add	#0x40, r5, r4
 6976                             		.loc 2 1025 54
 6977 016f ED A5 02                		mov.L	8[r10], r5
 6978 0172 71 55 40                		add	#0x40, r5
 6979                             		.loc 2 1025 13
 6980 0175 75 43 70                		mov.L	#0x70, r3
 6981 0178 EF 52                   		mov.L	r5, r2
 6982 017a EF 41                   		mov.L	r4, r1
 6983 017c 05 00 00 00             		bsr	_ByteReverseWords64
1026:../src/wolfcrypt/src/sha512.c ****     #endif
1027:../src/wolfcrypt/src/sha512.c **** #endif
1028:../src/wolfcrypt/src/sha512.c ****     /* ! length ordering dependent on digest endian type ! */
1029:../src/wolfcrypt/src/sha512.c **** 
1030:../src/wolfcrypt/src/sha512.c **** #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
1031:../src/wolfcrypt/src/sha512.c ****      defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
1032:../src/wolfcrypt/src/sha512.c ****     sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 2] = sha512->hiLen;
 6984                             		.loc 2 1032 71
 6985 0180 ED A4 02                		mov.L	8[r10], r4
 6986 0183 ED 45 33                		mov.L	204[r4], r5
 6987 0186 ED 46 34                		mov.L	208[r4], r6
 6988                             		.loc 2 1032 63
 6989 0189 ED A4 02                		mov.L	8[r10], r4
 6990 018c E7 45 2C                		mov.L	r5, 176[r4]
 6991 018f E7 46 2D                		mov.L	r6, 180[r4]
1033:../src/wolfcrypt/src/sha512.c ****     sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 1] = sha512->loLen;
 6992                             		.loc 2 1033 71
 6993 0192 ED A4 02                		mov.L	8[r10], r4
 6994 0195 ED 45 31                		mov.L	196[r4], r5
 6995 0198 ED 46 32                		mov.L	200[r4], r6
 6996                             		.loc 2 1033 63
 6997 019b ED A4 02                		mov.L	8[r10], r4
 6998 019e E7 45 2E                		mov.L	r5, 184[r4]
 6999 01a1 E7 46 2F                		mov.L	r6, 188[r4]
1034:../src/wolfcrypt/src/sha512.c **** #endif
1035:../src/wolfcrypt/src/sha512.c **** 
1036:../src/wolfcrypt/src/sha512.c **** #if defined(USE_INTEL_SPEEDUP) && \
1037:../src/wolfcrypt/src/sha512.c ****     (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
1038:../src/wolfcrypt/src/sha512.c ****     if (IS_INTEL_AVX1(intel_flags) || IS_INTEL_AVX2(intel_flags))
1039:../src/wolfcrypt/src/sha512.c ****         ByteReverseWords64(&(sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 2]),
1040:../src/wolfcrypt/src/sha512.c ****                            &(sha512->buffer[WC_SHA512_BLOCK_SIZE / sizeof(word64) - 2]),
1041:../src/wolfcrypt/src/sha512.c ****                            WC_SHA512_BLOCK_SIZE - WC_SHA512_PAD_SIZE);
1042:../src/wolfcrypt/src/sha512.c **** #endif
1043:../src/wolfcrypt/src/sha512.c **** #if !defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
1044:../src/wolfcrypt/src/sha512.c ****     defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
1045:../src/wolfcrypt/src/sha512.c ****     ret = Transform_Sha512(sha512);
 7000                             		.loc 2 1045 11
 7001 01a4 ED A1 02                		mov.L	8[r10], r1
 7002 01a7 05 00 00 00             		bsr	__Transform_Sha512
 7003 01ab E7 A1 01                		mov.L	r1, 4[r10]
1046:../src/wolfcrypt/src/sha512.c **** #else
1047:../src/wolfcrypt/src/sha512.c ****     if(sha512->ctx.mode == ESP32_SHA_INIT) {
1048:../src/wolfcrypt/src/sha512.c ****         esp_sha_try_hw_lock(&sha512->ctx);
1049:../src/wolfcrypt/src/sha512.c ****     }
1050:../src/wolfcrypt/src/sha512.c ****     ret = esp_sha512_digest_process(sha512, 1);
1051:../src/wolfcrypt/src/sha512.c ****     if(ret == 0 && sha512->ctx.mode == ESP32_SHA_SW) {
1052:../src/wolfcrypt/src/sha512.c ****         ret = Transform_Sha512(sha512);
1053:../src/wolfcrypt/src/sha512.c ****     }
1054:../src/wolfcrypt/src/sha512.c **** #endif
1055:../src/wolfcrypt/src/sha512.c ****     if (ret != 0)
 7004                             		.loc 2 1055 8
 7005 01ae ED A5 01                		mov.L	4[r10], r5
 7006 01b1 61 05                   		cmp	#0, r5
 7007 01b3 16                      		beq	.L105
1056:../src/wolfcrypt/src/sha512.c ****         return ret;
 7008                             		.loc 2 1056 16
 7009 01b4 ED A5 01                		mov.L	4[r10], r5
 7010 01b7 2E 15                   		bra	.L102
 7011                             	.L105:
1057:../src/wolfcrypt/src/sha512.c **** 
1058:../src/wolfcrypt/src/sha512.c ****     #ifdef LITTLE_ENDIAN_ORDER
1059:../src/wolfcrypt/src/sha512.c ****         ByteReverseWords64(sha512->digest, sha512->digest, WC_SHA512_DIGEST_SIZE);
 7012                             		.loc 2 1059 34
 7013 01b9 ED A5 02                		mov.L	8[r10], r5
 7014                             		.loc 2 1059 50
 7015 01bc ED A4 02                		mov.L	8[r10], r4
 7016                             		.loc 2 1059 9
 7017 01bf 75 43 40                		mov.L	#0x40, r3
 7018 01c2 EF 42                   		mov.L	r4, r2
 7019 01c4 EF 51                   		mov.L	r5, r1
 7020 01c6 05 00 00 00             		bsr	_ByteReverseWords64
1060:../src/wolfcrypt/src/sha512.c ****     #endif
1061:../src/wolfcrypt/src/sha512.c **** 
1062:../src/wolfcrypt/src/sha512.c ****     return 0;
 7021                             		.loc 2 1062 12
 7022 01ca 66 05                   		mov.L	#0, r5
 7023                             		.balign 8,3,1
 7024                             	.L102:
1063:../src/wolfcrypt/src/sha512.c **** }
 7025                             		.loc 2 1063 1
 7026 01cc EF 51                   		mov.L	r5, r1
 7027 01ce 3F 6D 17                		rtsd	#92, r6-r13
 7028                             	.LFE54:
 7030 01d1 FD 70 40 00 00 00 80    		.section	.text.Sha512FinalRaw,"ax",@progbits
 7032                             	_Sha512FinalRaw:
 7033                             	.LFB55:
1064:../src/wolfcrypt/src/sha512.c **** 
1065:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_KCAPI_HASH */
1066:../src/wolfcrypt/src/sha512.c **** 
1067:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SHA512
1068:../src/wolfcrypt/src/sha512.c **** 
1069:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_KCAPI_HASH)
1070:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/kcapi/kcapi_hash.c */
1071:../src/wolfcrypt/src/sha512.c **** #elif defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_HASH)
1072:../src/wolfcrypt/src/sha512.c **** 
1073:../src/wolfcrypt/src/sha512.c **** #else
1074:../src/wolfcrypt/src/sha512.c **** 
1075:../src/wolfcrypt/src/sha512.c **** static int Sha512FinalRaw(wc_Sha512* sha512, byte* hash, int digestSz)
1076:../src/wolfcrypt/src/sha512.c **** {
 7034                             		.loc 2 1076 1
 7035 0000 7E AA                   		push.l	r10
 7036                             	.LCFI38:
 7037 0002 71 0A B4                		add	#-76, r0, r10
 7038                             	.LCFI39:
 7039 0005 EF A0                   		mov.L	r10, r0
 7040 0007 E7 A1 10                		mov.L	r1, 64[r10]
 7041 000a E7 A2 11                		mov.L	r2, 68[r10]
 7042 000d E7 A3 12                		mov.L	r3, 72[r10]
1077:../src/wolfcrypt/src/sha512.c **** #ifdef LITTLE_ENDIAN_ORDER
1078:../src/wolfcrypt/src/sha512.c ****     word64 digest[WC_SHA512_DIGEST_SIZE / sizeof(word64)];
1079:../src/wolfcrypt/src/sha512.c **** #endif
1080:../src/wolfcrypt/src/sha512.c **** 
1081:../src/wolfcrypt/src/sha512.c ****     if (sha512 == NULL || hash == NULL) {
 7043                             		.loc 2 1081 8
 7044 0010 ED A5 10                		mov.L	64[r10], r5
 7045 0013 61 05                   		cmp	#0, r5
 7046 0015 17                      		beq	.L107
 7047                             		.loc 2 1081 24 discriminator 1
 7048 0016 ED A5 11                		mov.L	68[r10], r5
 7049 0019 61 05                   		cmp	#0, r5
 7050 001b 1F                      		bne	.L108
 7051                             	.L107:
1082:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 7052                             		.loc 2 1082 16
 7053 001c FB 5A 53 FF             		mov.L	#-173, r5
 7054 0020 2E 20                   		bra	.L110
 7055                             	.L108:
1083:../src/wolfcrypt/src/sha512.c ****     }
1084:../src/wolfcrypt/src/sha512.c **** 
1085:../src/wolfcrypt/src/sha512.c **** #ifdef LITTLE_ENDIAN_ORDER
1086:../src/wolfcrypt/src/sha512.c ****     ByteReverseWords64((word64*)digest, (word64*)sha512->digest,
 7056                             		.loc 2 1086 50
 7057 0022 ED A5 10                		mov.L	64[r10], r5
 7058                             		.loc 2 1086 5
 7059 0025 75 43 40                		mov.L	#0x40, r3
 7060 0028 EF 52                   		mov.L	r5, r2
 7061 002a EF A1                   		mov.L	r10, r1
 7062 002c 05 00 00 00             		bsr	_ByteReverseWords64
1087:../src/wolfcrypt/src/sha512.c ****                                                          WC_SHA512_DIGEST_SIZE);
1088:../src/wolfcrypt/src/sha512.c ****     XMEMCPY(hash, digest, digestSz);
 7063                             		.loc 2 1088 5
 7064 0030 ED A5 12                		mov.L	72[r10], r5
 7065 0033 EF 53                   		mov.L	r5, r3
 7066 0035 EF A2                   		mov.L	r10, r2
 7067 0037 ED A1 11                		mov.L	68[r10], r1
 7068 003a 05 00 00 00             		bsr	_memcpy
1089:../src/wolfcrypt/src/sha512.c **** #else
1090:../src/wolfcrypt/src/sha512.c ****     XMEMCPY(hash, sha512->digest, digestSz);
1091:../src/wolfcrypt/src/sha512.c **** #endif
1092:../src/wolfcrypt/src/sha512.c **** 
1093:../src/wolfcrypt/src/sha512.c ****     return 0;
 7069                             		.loc 2 1093 12
 7070 003e 66 05                   		mov.L	#0, r5
 7071                             	.L110:
1094:../src/wolfcrypt/src/sha512.c **** }
 7072                             		.loc 2 1094 1 discriminator 1
 7073 0040 EF 51                   		mov.L	r5, r1
 7074 0042 3F AA 14                		rtsd	#80, r10-r10
 7075                             	.LFE55:
 7077                             		.section	.text.wc_Sha512FinalRaw,"ax",@progbits
 7078                             		.global	_wc_Sha512FinalRaw
 7080                             	_wc_Sha512FinalRaw:
 7081                             	.LFB56:
1095:../src/wolfcrypt/src/sha512.c **** 
1096:../src/wolfcrypt/src/sha512.c **** int wc_Sha512FinalRaw(wc_Sha512* sha512, byte* hash)
1097:../src/wolfcrypt/src/sha512.c **** {
 7082                             		.loc 2 1097 1
 7083 0000 7E AA                   		push.l	r10
 7084                             	.LCFI40:
 7085 0002 71 0A F8                		add	#-8, r0, r10
 7086                             	.LCFI41:
 7087 0005 EF A0                   		mov.L	r10, r0
 7088 0007 E3 A1                   		mov.L	r1, [r10]
 7089 0009 E7 A2 01                		mov.L	r2, 4[r10]
1098:../src/wolfcrypt/src/sha512.c ****     return Sha512FinalRaw(sha512, hash, WC_SHA512_DIGEST_SIZE);
 7090                             		.loc 2 1098 12
 7091 000c 75 43 40                		mov.L	#0x40, r3
 7092 000f ED A2 01                		mov.L	4[r10], r2
 7093 0012 EC A1                   		mov.L	[r10], r1
 7094 0014 05 00 00 00             		bsr	_Sha512FinalRaw
 7095 0018 EF 15                   		mov.L	r1, r5
1099:../src/wolfcrypt/src/sha512.c **** }
 7096                             		.loc 2 1099 1
 7097 001a EF 51                   		mov.L	r5, r1
 7098 001c 3F AA 03                		rtsd	#12, r10-r10
 7099                             	.LFE56:
 7101                             		.section	.text.Sha512_Family_Final,"ax",@progbits
 7103                             	_Sha512_Family_Final:
 7104                             	.LFB57:
1100:../src/wolfcrypt/src/sha512.c **** 
1101:../src/wolfcrypt/src/sha512.c **** static int Sha512_Family_Final(wc_Sha512* sha512, byte* hash, int digestSz,
1102:../src/wolfcrypt/src/sha512.c ****                                int (*initfp)(wc_Sha512*))
1103:../src/wolfcrypt/src/sha512.c **** {
 7105                             		.loc 2 1103 1
 7106 0000 7E AA                   		push.l	r10
 7107                             	.LCFI42:
 7108 0002 71 0A EC                		add	#-20, r0, r10
 7109                             	.LCFI43:
 7110 0005 EF A0                   		mov.L	r10, r0
 7111 0007 E7 A1 01                		mov.L	r1, 4[r10]
 7112 000a E7 A2 02                		mov.L	r2, 8[r10]
 7113 000d E7 A3 03                		mov.L	r3, 12[r10]
 7114 0010 E7 A4 04                		mov.L	r4, 16[r10]
1104:../src/wolfcrypt/src/sha512.c ****     int ret;
1105:../src/wolfcrypt/src/sha512.c **** 
1106:../src/wolfcrypt/src/sha512.c ****     if (sha512 == NULL || hash == NULL) {
 7115                             		.loc 2 1106 8
 7116 0013 ED A5 01                		mov.L	4[r10], r5
 7117 0016 61 05                   		cmp	#0, r5
 7118 0018 17                      		beq	.L114
 7119                             		.loc 2 1106 24 discriminator 1
 7120 0019 ED A5 02                		mov.L	8[r10], r5
 7121 001c 61 05                   		cmp	#0, r5
 7122 001e 1F                      		bne	.L115
 7123                             	.L114:
1107:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 7124                             		.loc 2 1107 16
 7125 001f FB 5A 53 FF             		mov.L	#-173, r5
 7126 0023 2E 2F                   		bra	.L116
 7127                             	.L115:
1108:../src/wolfcrypt/src/sha512.c ****     }
1109:../src/wolfcrypt/src/sha512.c **** 
1110:../src/wolfcrypt/src/sha512.c **** #ifdef WOLF_CRYPTO_CB
1111:../src/wolfcrypt/src/sha512.c ****     if (sha512->devId != INVALID_DEVID) {
1112:../src/wolfcrypt/src/sha512.c ****         ret = wc_CryptoCb_Sha512Hash(sha512, NULL, 0, hash);
1113:../src/wolfcrypt/src/sha512.c ****         if (ret != CRYPTOCB_UNAVAILABLE)
1114:../src/wolfcrypt/src/sha512.c ****             return ret;
1115:../src/wolfcrypt/src/sha512.c ****         /* fall-through when unavailable */
1116:../src/wolfcrypt/src/sha512.c ****     }
1117:../src/wolfcrypt/src/sha512.c **** #endif
1118:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA512)
1119:../src/wolfcrypt/src/sha512.c ****     if (sha512->asyncDev.marker == WOLFSSL_ASYNC_MARKER_SHA512) {
1120:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_QA)
1121:../src/wolfcrypt/src/sha512.c ****         return IntelQaSymSha512(&sha512->asyncDev, hash, NULL, digestSz);
1122:../src/wolfcrypt/src/sha512.c ****     #endif
1123:../src/wolfcrypt/src/sha512.c ****     }
1124:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
1125:../src/wolfcrypt/src/sha512.c **** 
1126:../src/wolfcrypt/src/sha512.c ****     ret = Sha512Final(sha512);
 7128                             		.loc 2 1126 11
 7129 0025 ED A1 01                		mov.L	4[r10], r1
 7130 0028 05 00 00 00             		bsr	_Sha512Final
 7131 002c E3 A1                   		mov.L	r1, [r10]
1127:../src/wolfcrypt/src/sha512.c ****     if (ret != 0)
 7132                             		.loc 2 1127 8
 7133 002e EC A5                   		mov.L	[r10], r5
 7134 0030 61 05                   		cmp	#0, r5
 7135 0032 15                      		beq	.L117
1128:../src/wolfcrypt/src/sha512.c ****         return ret;
 7136                             		.loc 2 1128 16
 7137 0033 EC A5                   		mov.L	[r10], r5
 7138 0035 2E 1D                   		bra	.L116
 7139                             	.L117:
1129:../src/wolfcrypt/src/sha512.c **** 
1130:../src/wolfcrypt/src/sha512.c ****     XMEMCPY(hash, sha512->digest, digestSz);
 7140                             		.loc 2 1130 5
 7141 0037 ED A5 01                		mov.L	4[r10], r5
 7142 003a ED A4 03                		mov.L	12[r10], r4
 7143 003d EF 43                   		mov.L	r4, r3
 7144 003f EF 52                   		mov.L	r5, r2
 7145 0041 ED A1 02                		mov.L	8[r10], r1
 7146 0044 05 00 00 00             		bsr	_memcpy
1131:../src/wolfcrypt/src/sha512.c **** 
1132:../src/wolfcrypt/src/sha512.c ****     /* initialize Sha512 structure for the next use */
1133:../src/wolfcrypt/src/sha512.c ****     return initfp(sha512);
 7147                             		.loc 2 1133 12
 7148 0048 ED A5 04                		mov.L	16[r10], r5
 7149 004b ED A1 01                		mov.L	4[r10], r1
 7150 004e 7F 15                   		jsr	r5
 7151                             	.LVL1:
 7152 0050 EF 15                   		mov.L	r1, r5
 7153                             	.L116:
1134:../src/wolfcrypt/src/sha512.c **** }
 7154                             		.loc 2 1134 1
 7155 0052 EF 51                   		mov.L	r5, r1
 7156 0054 3F AA 06                		rtsd	#24, r10-r10
 7157                             	.LFE57:
 7159                             		.section	.text.wc_Sha512Final,"ax",@progbits
 7160                             		.global	_wc_Sha512Final
 7162                             	_wc_Sha512Final:
 7163                             	.LFB58:
1135:../src/wolfcrypt/src/sha512.c **** 
1136:../src/wolfcrypt/src/sha512.c **** int wc_Sha512Final(wc_Sha512* sha512, byte* hash)
1137:../src/wolfcrypt/src/sha512.c **** {
 7164                             		.loc 2 1137 1
 7165 0000 7E AA                   		push.l	r10
 7166                             	.LCFI44:
 7167 0002 71 0A F8                		add	#-8, r0, r10
 7168                             	.LCFI45:
 7169 0005 EF A0                   		mov.L	r10, r0
 7170 0007 E3 A1                   		mov.L	r1, [r10]
 7171 0009 E7 A2 01                		mov.L	r2, 4[r10]
1138:../src/wolfcrypt/src/sha512.c ****     return Sha512_Family_Final(sha512, hash, WC_SHA512_DIGEST_SIZE, InitSha512);
 7172                             		.loc 2 1138 12
 7173 000c FB 42 00 00 00 00       		mov.L	#_InitSha512, r4
 7174 0012 75 43 40                		mov.L	#0x40, r3
 7175 0015 ED A2 01                		mov.L	4[r10], r2
 7176 0018 EC A1                   		mov.L	[r10], r1
 7177 001a 05 00 00 00             		bsr	_Sha512_Family_Final
 7178 001e EF 15                   		mov.L	r1, r5
1139:../src/wolfcrypt/src/sha512.c **** }
 7179                             		.loc 2 1139 1
 7180 0020 EF 51                   		mov.L	r5, r1
 7181 0022 3F AA 03                		rtsd	#12, r10-r10
 7182                             	.LFE58:
 7184                             		.section	.text.wc_InitSha512,"ax",@progbits
 7185                             		.global	_wc_InitSha512
 7187                             	_wc_InitSha512:
 7188                             	.LFB59:
1140:../src/wolfcrypt/src/sha512.c **** 
1141:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_KCAPI_HASH */
1142:../src/wolfcrypt/src/sha512.c **** 
1143:../src/wolfcrypt/src/sha512.c **** #if !defined(WOLFSSL_SE050) || !defined(WOLFSSL_SE050_HASH)
1144:../src/wolfcrypt/src/sha512.c **** int wc_InitSha512(wc_Sha512* sha512)
1145:../src/wolfcrypt/src/sha512.c **** {
 7189                             		.loc 2 1145 1
 7190 0000 7E AA                   		push.l	r10
 7191                             	.LCFI46:
 7192 0002 71 0A F8                		add	#-8, r0, r10
 7193                             	.LCFI47:
 7194 0005 EF A0                   		mov.L	r10, r0
 7195 0007 E7 A1 01                		mov.L	r1, 4[r10]
1146:../src/wolfcrypt/src/sha512.c ****     int devId = INVALID_DEVID;
 7196                             		.loc 2 1146 9
 7197 000a F8 A6 FE                		mov.L	#-2, [r10]
1147:../src/wolfcrypt/src/sha512.c **** 
1148:../src/wolfcrypt/src/sha512.c **** #ifdef WOLF_CRYPTO_CB
1149:../src/wolfcrypt/src/sha512.c ****     devId = wc_CryptoCb_DefaultDevID();
1150:../src/wolfcrypt/src/sha512.c **** #endif
1151:../src/wolfcrypt/src/sha512.c ****     return wc_InitSha512_ex(sha512, NULL, devId);
 7198                             		.loc 2 1151 12
 7199 000d EC A3                   		mov.L	[r10], r3
 7200 000f 66 02                   		mov.L	#0, r2
 7201 0011 ED A1 01                		mov.L	4[r10], r1
 7202 0014 05 00 00 00             		bsr	_wc_InitSha512_ex
 7203 0018 EF 15                   		mov.L	r1, r5
1152:../src/wolfcrypt/src/sha512.c **** }
 7204                             		.loc 2 1152 1
 7205 001a EF 51                   		mov.L	r5, r1
 7206 001c 3F AA 03                		rtsd	#12, r10-r10
 7207                             	.LFE59:
 7209                             		.section	.text.wc_Sha512Free,"ax",@progbits
 7210                             		.global	_wc_Sha512Free
 7212                             	_wc_Sha512Free:
 7213                             	.LFB60:
1153:../src/wolfcrypt/src/sha512.c **** 
1154:../src/wolfcrypt/src/sha512.c **** void wc_Sha512Free(wc_Sha512* sha512)
1155:../src/wolfcrypt/src/sha512.c **** {
 7214                             		.loc 2 1155 1
 7215 0000 7E AA                   		push.l	r10
 7216                             	.LCFI48:
 7217 0002 71 0A FC                		add	#-4, r0, r10
 7218                             	.LCFI49:
 7219 0005 EF A0                   		mov.L	r10, r0
 7220 0007 E3 A1                   		mov.L	r1, [r10]
1156:../src/wolfcrypt/src/sha512.c ****     if (sha512 == NULL)
1157:../src/wolfcrypt/src/sha512.c ****         return;
1158:../src/wolfcrypt/src/sha512.c **** 
1159:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SMALL_STACK_CACHE
1160:../src/wolfcrypt/src/sha512.c ****     if (sha512->W != NULL) {
1161:../src/wolfcrypt/src/sha512.c ****         XFREE(sha512->W, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
1162:../src/wolfcrypt/src/sha512.c ****         sha512->W = NULL;
1163:../src/wolfcrypt/src/sha512.c ****     }
1164:../src/wolfcrypt/src/sha512.c **** #endif
1165:../src/wolfcrypt/src/sha512.c **** 
1166:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_KCAPI_HASH)
1167:../src/wolfcrypt/src/sha512.c ****     KcapiHashFree(&sha512->kcapi);
1168:../src/wolfcrypt/src/sha512.c **** #endif
1169:../src/wolfcrypt/src/sha512.c **** 
1170:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_HASH_KEEP)
1171:../src/wolfcrypt/src/sha512.c ****     if (sha512->msg != NULL) {
1172:../src/wolfcrypt/src/sha512.c ****         XFREE(sha512->msg, sha512->heap, DYNAMIC_TYPE_TMP_BUFFER);
1173:../src/wolfcrypt/src/sha512.c ****         sha512->msg = NULL;
1174:../src/wolfcrypt/src/sha512.c ****     }
1175:../src/wolfcrypt/src/sha512.c **** #endif
1176:../src/wolfcrypt/src/sha512.c **** 
1177:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA512)
1178:../src/wolfcrypt/src/sha512.c ****     wolfAsync_DevCtxFree(&sha512->asyncDev, WOLFSSL_ASYNC_MARKER_SHA512);
1179:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
1180:../src/wolfcrypt/src/sha512.c **** }
 7221                             		.loc 2 1180 1
 7222 0009 3F AA 02                		rtsd	#8, r10-r10
 7223                             	.LFE60:
 7225                             		.section	.text.InitSha384,"ax",@progbits
 7227                             	_InitSha384:
 7228                             	.LFB61:
1181:../src/wolfcrypt/src/sha512.c **** #if defined(OPENSSL_EXTRA)
1182:../src/wolfcrypt/src/sha512.c **** /* Apply SHA512 transformation to the data                */
1183:../src/wolfcrypt/src/sha512.c **** /* @param sha  a pointer to wc_Sha512 structure           */
1184:../src/wolfcrypt/src/sha512.c **** /* @param data data to be applied SHA512 transformation   */
1185:../src/wolfcrypt/src/sha512.c **** /* @return 0 on successful, otherwise non-zero on failure */
1186:../src/wolfcrypt/src/sha512.c **** int wc_Sha512Transform(wc_Sha512* sha, const unsigned char* data)
1187:../src/wolfcrypt/src/sha512.c **** {
1188:../src/wolfcrypt/src/sha512.c ****     int ret;
1189:../src/wolfcrypt/src/sha512.c ****     /* back up buffer */
1190:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SMALL_STACK
1191:../src/wolfcrypt/src/sha512.c ****     word64 *buffer;
1192:../src/wolfcrypt/src/sha512.c **** #else
1193:../src/wolfcrypt/src/sha512.c ****     word64  buffer[WC_SHA512_BLOCK_SIZE  / sizeof(word64)];
1194:../src/wolfcrypt/src/sha512.c **** #endif
1195:../src/wolfcrypt/src/sha512.c **** 
1196:../src/wolfcrypt/src/sha512.c ****     /* sanity check */
1197:../src/wolfcrypt/src/sha512.c ****     if (sha == NULL || data == NULL) {
1198:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
1199:../src/wolfcrypt/src/sha512.c ****     }
1200:../src/wolfcrypt/src/sha512.c **** 
1201:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SMALL_STACK
1202:../src/wolfcrypt/src/sha512.c ****     buffer = (word64 *)XMALLOC(sizeof(word64) * 16, sha->heap,
1203:../src/wolfcrypt/src/sha512.c ****                                DYNAMIC_TYPE_TMP_BUFFER);
1204:../src/wolfcrypt/src/sha512.c ****     if (buffer == NULL)
1205:../src/wolfcrypt/src/sha512.c ****         return MEMORY_E;
1206:../src/wolfcrypt/src/sha512.c **** #endif
1207:../src/wolfcrypt/src/sha512.c **** 
1208:../src/wolfcrypt/src/sha512.c **** #if defined(USE_INTEL_SPEEDUP) && \
1209:../src/wolfcrypt/src/sha512.c ****     (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
1210:../src/wolfcrypt/src/sha512.c ****     Sha512_SetTransform();
1211:../src/wolfcrypt/src/sha512.c **** #endif
1212:../src/wolfcrypt/src/sha512.c **** 
1213:../src/wolfcrypt/src/sha512.c **** #if defined(LITTLE_ENDIAN_ORDER)
1214:../src/wolfcrypt/src/sha512.c **** #if defined(USE_INTEL_SPEEDUP) && \
1215:../src/wolfcrypt/src/sha512.c ****     (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
1216:../src/wolfcrypt/src/sha512.c ****     if (!IS_INTEL_AVX1(intel_flags) && !IS_INTEL_AVX2(intel_flags))
1217:../src/wolfcrypt/src/sha512.c **** #endif
1218:../src/wolfcrypt/src/sha512.c ****     {
1219:../src/wolfcrypt/src/sha512.c ****         ByteReverseWords64((word64*)data, (word64*)data,
1220:../src/wolfcrypt/src/sha512.c ****                                                 WC_SHA512_BLOCK_SIZE);
1221:../src/wolfcrypt/src/sha512.c ****     }
1222:../src/wolfcrypt/src/sha512.c **** #endif /* !LITTLE_ENDIAN_ORDER */
1223:../src/wolfcrypt/src/sha512.c **** 
1224:../src/wolfcrypt/src/sha512.c ****     XMEMCPY(buffer, sha->buffer, WC_SHA512_BLOCK_SIZE);
1225:../src/wolfcrypt/src/sha512.c ****     XMEMCPY(sha->buffer, data, WC_SHA512_BLOCK_SIZE);
1226:../src/wolfcrypt/src/sha512.c **** 
1227:../src/wolfcrypt/src/sha512.c ****     ret = Transform_Sha512(sha);
1228:../src/wolfcrypt/src/sha512.c **** 
1229:../src/wolfcrypt/src/sha512.c ****     XMEMCPY(sha->buffer, buffer, WC_SHA512_BLOCK_SIZE);
1230:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SMALL_STACK
1231:../src/wolfcrypt/src/sha512.c ****     XFREE(buffer, sha->heap, DYNAMIC_TYPE_TMP_BUFFER);
1232:../src/wolfcrypt/src/sha512.c **** #endif
1233:../src/wolfcrypt/src/sha512.c ****     return ret;
1234:../src/wolfcrypt/src/sha512.c **** }
1235:../src/wolfcrypt/src/sha512.c **** #endif /* OPENSSL_EXTRA */
1236:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_SHA512 */
1237:../src/wolfcrypt/src/sha512.c **** #endif /* !WOLFSSL_SE050 || !WOLFSSL_SE050_HASH */
1238:../src/wolfcrypt/src/sha512.c **** 
1239:../src/wolfcrypt/src/sha512.c **** 
1240:../src/wolfcrypt/src/sha512.c **** /* -------------------------------------------------------------------------- */
1241:../src/wolfcrypt/src/sha512.c **** /* SHA384 */
1242:../src/wolfcrypt/src/sha512.c **** /* -------------------------------------------------------------------------- */
1243:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SHA384
1244:../src/wolfcrypt/src/sha512.c **** 
1245:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_IMX6_CAAM) && !defined(NO_IMX6_CAAM_HASH) && \
1246:../src/wolfcrypt/src/sha512.c ****     !defined(WOLFSSL_QNX_CAAM)
1247:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/caam/caam_sha.c */
1248:../src/wolfcrypt/src/sha512.c **** #elif defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_HASH)
1249:../src/wolfcrypt/src/sha512.c ****     int wc_InitSha384_ex(wc_Sha384* sha384, void* heap, int devId)
1250:../src/wolfcrypt/src/sha512.c ****     {
1251:../src/wolfcrypt/src/sha512.c ****         if (sha384 == NULL) {
1252:../src/wolfcrypt/src/sha512.c ****             return BAD_FUNC_ARG;
1253:../src/wolfcrypt/src/sha512.c ****         }
1254:../src/wolfcrypt/src/sha512.c ****         (void)devId;
1255:../src/wolfcrypt/src/sha512.c ****         return se050_hash_init(&sha384->se050Ctx, heap);
1256:../src/wolfcrypt/src/sha512.c ****     }
1257:../src/wolfcrypt/src/sha512.c ****     int wc_Sha384Update(wc_Sha384* sha384, const byte* data, word32 len)
1258:../src/wolfcrypt/src/sha512.c ****     {
1259:../src/wolfcrypt/src/sha512.c ****         return se050_hash_update(&sha384->se050Ctx, data, len);
1260:../src/wolfcrypt/src/sha512.c **** 
1261:../src/wolfcrypt/src/sha512.c ****     }
1262:../src/wolfcrypt/src/sha512.c ****     int wc_Sha384Final(wc_Sha384* sha384, byte* hash)
1263:../src/wolfcrypt/src/sha512.c ****     {
1264:../src/wolfcrypt/src/sha512.c ****         int ret = 0;
1265:../src/wolfcrypt/src/sha512.c ****         ret = se050_hash_final(&sha384->se050Ctx, hash, WC_SHA384_DIGEST_SIZE,
1266:../src/wolfcrypt/src/sha512.c ****                                kAlgorithm_SSS_SHA384);
1267:../src/wolfcrypt/src/sha512.c ****         (void)wc_InitSha384(sha384);
1268:../src/wolfcrypt/src/sha512.c ****         return ret;
1269:../src/wolfcrypt/src/sha512.c ****     }
1270:../src/wolfcrypt/src/sha512.c ****     int wc_Sha384FinalRaw(wc_Sha384* sha384, byte* hash)
1271:../src/wolfcrypt/src/sha512.c ****     {
1272:../src/wolfcrypt/src/sha512.c ****         int ret = 0;
1273:../src/wolfcrypt/src/sha512.c ****         ret = se050_hash_final(&sha384->se050Ctx, hash, WC_SHA384_DIGEST_SIZE,
1274:../src/wolfcrypt/src/sha512.c ****                                kAlgorithm_SSS_SHA384);
1275:../src/wolfcrypt/src/sha512.c ****         (void)wc_InitSha384(sha384);
1276:../src/wolfcrypt/src/sha512.c ****         return ret;
1277:../src/wolfcrypt/src/sha512.c ****     }
1278:../src/wolfcrypt/src/sha512.c **** 
1279:../src/wolfcrypt/src/sha512.c **** #elif defined(WOLFSSL_SILABS_SHA512)
1280:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/silabs/silabs_hash.c */
1281:../src/wolfcrypt/src/sha512.c **** 
1282:../src/wolfcrypt/src/sha512.c **** #elif defined(WOLFSSL_KCAPI_HASH)
1283:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/kcapi/kcapi_hash.c */
1284:../src/wolfcrypt/src/sha512.c **** 
1285:../src/wolfcrypt/src/sha512.c **** #else
1286:../src/wolfcrypt/src/sha512.c **** 
1287:../src/wolfcrypt/src/sha512.c **** static int InitSha384(wc_Sha384* sha384)
1288:../src/wolfcrypt/src/sha512.c **** {
 7229                             		.loc 2 1288 1
 7230 0000 7E AA                   		push.l	r10
 7231                             	.LCFI50:
 7232 0002 71 0A FC                		add	#-4, r0, r10
 7233                             	.LCFI51:
 7234 0005 EF A0                   		mov.L	r10, r0
 7235 0007 E3 A1                   		mov.L	r1, [r10]
1289:../src/wolfcrypt/src/sha512.c ****     if (sha384 == NULL) {
 7236                             		.loc 2 1289 8
 7237 0009 EC A5                   		mov.L	[r10], r5
 7238 000b 61 05                   		cmp	#0, r5
 7239 000d 18                      		bne	.L125
1290:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 7240                             		.loc 2 1290 16
 7241 000e FB 5A 53 FF             		mov.L	#-173, r5
 7242 0012 38 9D 00                		bra	.L126
 7243                             	.L125:
1291:../src/wolfcrypt/src/sha512.c ****     }
1292:../src/wolfcrypt/src/sha512.c **** 
1293:../src/wolfcrypt/src/sha512.c ****     sha384->digest[0] = W64LIT(0xcbbb9d5dc1059ed8);
 7244                             		.loc 2 1293 23
 7245 0015 EC A5                   		mov.L	[r10], r5
 7246 0017 F8 52 D8 9E 05 C1       		mov.L	#-1056596264, [r5]
 7247 001d F9 52 01 5D 9D BB CB    		mov.L	#-876896931, 4[r5]
1294:../src/wolfcrypt/src/sha512.c ****     sha384->digest[1] = W64LIT(0x629a292a367cd507);
 7248                             		.loc 2 1294 23
 7249 0024 EC A5                   		mov.L	[r10], r5
 7250 0026 F9 52 02 07 D5 7C 36    		mov.L	#0x367cd507, 8[r5]
 7251 002d F9 52 03 2A 29 9A 62    		mov.L	#0x629a292a, 12[r5]
1295:../src/wolfcrypt/src/sha512.c ****     sha384->digest[2] = W64LIT(0x9159015a3070dd17);
 7252                             		.loc 2 1295 23
 7253 0034 EC A5                   		mov.L	[r10], r5
 7254 0036 F9 52 04 17 DD 70 30    		mov.L	#0x3070dd17, 16[r5]
 7255 003d F9 52 05 5A 01 59 91    		mov.L	#-1856437926, 20[r5]
1296:../src/wolfcrypt/src/sha512.c ****     sha384->digest[3] = W64LIT(0x152fecd8f70e5939);
 7256                             		.loc 2 1296 23
 7257 0044 EC A5                   		mov.L	[r10], r5
 7258 0046 F9 52 06 39 59 0E F7    		mov.L	#-150054599, 24[r5]
 7259 004d F9 52 07 D8 EC 2F 15    		mov.L	#0x152fecd8, 28[r5]
1297:../src/wolfcrypt/src/sha512.c ****     sha384->digest[4] = W64LIT(0x67332667ffc00b31);
 7260                             		.loc 2 1297 23
 7261 0054 EC A5                   		mov.L	[r10], r5
 7262 0056 F9 5E 08 31 0B C0       		mov.L	#-4191439, 32[r5]
 7263 005c F9 52 09 67 26 33 67    		mov.L	#0x67332667, 36[r5]
1298:../src/wolfcrypt/src/sha512.c ****     sha384->digest[5] = W64LIT(0x8eb44a8768581511);
 7264                             		.loc 2 1298 23
 7265 0063 EC A5                   		mov.L	[r10], r5
 7266 0065 F9 52 0A 11 15 58 68    		mov.L	#0x68581511, 40[r5]
 7267 006c F9 52 0B 87 4A B4 8E    		mov.L	#-1900787065, 44[r5]
1299:../src/wolfcrypt/src/sha512.c ****     sha384->digest[6] = W64LIT(0xdb0c2e0d64f98fa7);
 7268                             		.loc 2 1299 23
 7269 0073 EC A5                   		mov.L	[r10], r5
 7270 0075 F9 52 0C A7 8F F9 64    		mov.L	#0x64f98fa7, 48[r5]
 7271 007c F9 52 0D 0D 2E 0C DB    		mov.L	#-619958771, 52[r5]
1300:../src/wolfcrypt/src/sha512.c ****     sha384->digest[7] = W64LIT(0x47b5481dbefa4fa4);
 7272                             		.loc 2 1300 23
 7273 0083 EC A5                   		mov.L	[r10], r5
 7274 0085 F9 52 0E A4 4F FA BE    		mov.L	#-1090891868, 56[r5]
 7275 008c F9 52 0F 1D 48 B5 47    		mov.L	#0x47b5481d, 60[r5]
1301:../src/wolfcrypt/src/sha512.c **** 
1302:../src/wolfcrypt/src/sha512.c ****     sha384->buffLen = 0;
 7276                             		.loc 2 1302 21
 7277 0093 EC A5                   		mov.L	[r10], r5
 7278 0095 F9 56 30 00             		mov.L	#0, 192[r5]
1303:../src/wolfcrypt/src/sha512.c ****     sha384->loLen   = 0;
 7279                             		.loc 2 1303 21
 7280 0099 EC A5                   		mov.L	[r10], r5
 7281 009b F9 56 31 00             		mov.L	#0, 196[r5]
 7282 009f F9 56 32 00             		mov.L	#0, 200[r5]
1304:../src/wolfcrypt/src/sha512.c ****     sha384->hiLen   = 0;
 7283                             		.loc 2 1304 21
 7284 00a3 EC A5                   		mov.L	[r10], r5
 7285 00a5 F9 56 33 00             		mov.L	#0, 204[r5]
 7286 00a9 F9 56 34 00             		mov.L	#0, 208[r5]
1305:../src/wolfcrypt/src/sha512.c **** 
1306:../src/wolfcrypt/src/sha512.c **** #if  defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
1307:../src/wolfcrypt/src/sha512.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
1308:../src/wolfcrypt/src/sha512.c ****     sha384->ctx.sha_type = SHA2_384;
1309:../src/wolfcrypt/src/sha512.c ****      /* always start firstblock = 1 when using hw engine */
1310:../src/wolfcrypt/src/sha512.c ****     sha384->ctx.isfirstblock = 1;
1311:../src/wolfcrypt/src/sha512.c ****     if(sha384->ctx.mode == ESP32_SHA_HW) {
1312:../src/wolfcrypt/src/sha512.c ****         /* release hw */
1313:../src/wolfcrypt/src/sha512.c ****         esp_sha_hw_unlock();
1314:../src/wolfcrypt/src/sha512.c ****     }
1315:../src/wolfcrypt/src/sha512.c ****     /* always set mode as INIT
1316:../src/wolfcrypt/src/sha512.c ****     *  whether using HW or SW is determined at first call of update()
1317:../src/wolfcrypt/src/sha512.c ****     */
1318:../src/wolfcrypt/src/sha512.c ****     sha384->ctx.mode = ESP32_SHA_INIT;
1319:../src/wolfcrypt/src/sha512.c **** 
1320:../src/wolfcrypt/src/sha512.c **** #endif
1321:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_HASH_FLAGS
1322:../src/wolfcrypt/src/sha512.c ****     sha384->flags = 0;
1323:../src/wolfcrypt/src/sha512.c **** #endif
1324:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_HASH_KEEP
1325:../src/wolfcrypt/src/sha512.c ****     sha384->msg  = NULL;
1326:../src/wolfcrypt/src/sha512.c ****     sha384->len  = 0;
1327:../src/wolfcrypt/src/sha512.c ****     sha384->used = 0;
1328:../src/wolfcrypt/src/sha512.c **** #endif
1329:../src/wolfcrypt/src/sha512.c **** 
1330:../src/wolfcrypt/src/sha512.c ****     return 0;
 7287                             		.loc 2 1330 12
 7288 00ad 66 05                   		mov.L	#0, r5
 7289                             	.L126:
1331:../src/wolfcrypt/src/sha512.c **** }
 7290                             		.loc 2 1331 1
 7291 00af EF 51                   		mov.L	r5, r1
 7292 00b1 3F AA 02                		rtsd	#8, r10-r10
 7293                             	.LFE61:
 7295                             		.section	.text.wc_Sha384Update,"ax",@progbits
 7296                             		.global	_wc_Sha384Update
 7298                             	_wc_Sha384Update:
 7299                             	.LFB62:
1332:../src/wolfcrypt/src/sha512.c **** 
1333:../src/wolfcrypt/src/sha512.c **** int wc_Sha384Update(wc_Sha384* sha384, const byte* data, word32 len)
1334:../src/wolfcrypt/src/sha512.c **** {
 7300                             		.loc 2 1334 1
 7301 0000 7E AA                   		push.l	r10
 7302                             	.LCFI52:
 7303 0002 71 0A F4                		add	#-12, r0, r10
 7304                             	.LCFI53:
 7305 0005 EF A0                   		mov.L	r10, r0
 7306 0007 E3 A1                   		mov.L	r1, [r10]
 7307 0009 E7 A2 01                		mov.L	r2, 4[r10]
 7308 000c E7 A3 02                		mov.L	r3, 8[r10]
1335:../src/wolfcrypt/src/sha512.c ****     if (sha384 == NULL || (data == NULL && len > 0)) {
 7309                             		.loc 2 1335 8
 7310 000f EC A5                   		mov.L	[r10], r5
 7311 0011 61 05                   		cmp	#0, r5
 7312 0013 20 0F                   		beq	.L128
 7313                             		.loc 2 1335 24 discriminator 1
 7314 0015 ED A5 01                		mov.L	4[r10], r5
 7315 0018 61 05                   		cmp	#0, r5
 7316 001a 21 0E                   		bne	.L129
 7317                             		.loc 2 1335 41 discriminator 2
 7318 001c ED A5 02                		mov.L	8[r10], r5
 7319 001f 61 05                   		cmp	#0, r5
 7320 0021 17                      		beq	.L129
 7321                             	.L128:
1336:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 7322                             		.loc 2 1336 16
 7323 0022 FB 5A 53 FF             		mov.L	#-173, r5
 7324 0026 2E 10                   		bra	.L130
 7325                             	.L129:
1337:../src/wolfcrypt/src/sha512.c ****     }
1338:../src/wolfcrypt/src/sha512.c **** 
1339:../src/wolfcrypt/src/sha512.c **** #ifdef WOLF_CRYPTO_CB
1340:../src/wolfcrypt/src/sha512.c ****     if (sha384->devId != INVALID_DEVID) {
1341:../src/wolfcrypt/src/sha512.c ****         int ret = wc_CryptoCb_Sha384Hash(sha384, data, len, NULL);
1342:../src/wolfcrypt/src/sha512.c ****         if (ret != CRYPTOCB_UNAVAILABLE)
1343:../src/wolfcrypt/src/sha512.c ****             return ret;
1344:../src/wolfcrypt/src/sha512.c ****         /* fall-through when unavailable */
1345:../src/wolfcrypt/src/sha512.c ****     }
1346:../src/wolfcrypt/src/sha512.c **** #endif
1347:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA384)
1348:../src/wolfcrypt/src/sha512.c ****     if (sha384->asyncDev.marker == WOLFSSL_ASYNC_MARKER_SHA384) {
1349:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_QA)
1350:../src/wolfcrypt/src/sha512.c ****         return IntelQaSymSha384(&sha384->asyncDev, NULL, data, len);
1351:../src/wolfcrypt/src/sha512.c ****     #endif
1352:../src/wolfcrypt/src/sha512.c ****     }
1353:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
1354:../src/wolfcrypt/src/sha512.c **** 
1355:../src/wolfcrypt/src/sha512.c ****     return Sha512Update((wc_Sha512*)sha384, data, len);
 7326                             		.loc 2 1355 12
 7327 0028 ED A3 02                		mov.L	8[r10], r3
 7328 002b ED A2 01                		mov.L	4[r10], r2
 7329 002e EC A1                   		mov.L	[r10], r1
 7330 0030 05 00 00 00             		bsr	_Sha512Update
 7331 0034 EF 15                   		mov.L	r1, r5
 7332                             	.L130:
1356:../src/wolfcrypt/src/sha512.c **** }
 7333                             		.loc 2 1356 1
 7334 0036 EF 51                   		mov.L	r5, r1
 7335 0038 3F AA 04                		rtsd	#16, r10-r10
 7336                             	.LFE62:
 7338                             		.section	.text.wc_Sha384FinalRaw,"ax",@progbits
 7339                             		.global	_wc_Sha384FinalRaw
 7341                             	_wc_Sha384FinalRaw:
 7342                             	.LFB63:
1357:../src/wolfcrypt/src/sha512.c **** 
1358:../src/wolfcrypt/src/sha512.c **** 
1359:../src/wolfcrypt/src/sha512.c **** int wc_Sha384FinalRaw(wc_Sha384* sha384, byte* hash)
1360:../src/wolfcrypt/src/sha512.c **** {
 7343                             		.loc 2 1360 1
 7344 0000 7E AA                   		push.l	r10
 7345                             	.LCFI54:
 7346 0002 71 0A C8                		add	#-56, r0, r10
 7347                             	.LCFI55:
 7348 0005 EF A0                   		mov.L	r10, r0
 7349 0007 E7 A1 0C                		mov.L	r1, 48[r10]
 7350 000a E7 A2 0D                		mov.L	r2, 52[r10]
1361:../src/wolfcrypt/src/sha512.c **** #ifdef LITTLE_ENDIAN_ORDER
1362:../src/wolfcrypt/src/sha512.c ****     word64 digest[WC_SHA384_DIGEST_SIZE / sizeof(word64)];
1363:../src/wolfcrypt/src/sha512.c **** #endif
1364:../src/wolfcrypt/src/sha512.c **** 
1365:../src/wolfcrypt/src/sha512.c ****     if (sha384 == NULL || hash == NULL) {
 7351                             		.loc 2 1365 8
 7352 000d ED A5 0C                		mov.L	48[r10], r5
 7353 0010 61 05                   		cmp	#0, r5
 7354 0012 17                      		beq	.L132
 7355                             		.loc 2 1365 24 discriminator 1
 7356 0013 ED A5 0D                		mov.L	52[r10], r5
 7357 0016 61 05                   		cmp	#0, r5
 7358 0018 1F                      		bne	.L133
 7359                             	.L132:
1366:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 7360                             		.loc 2 1366 16
 7361 0019 FB 5A 53 FF             		mov.L	#-173, r5
 7362 001d 2E 20                   		bra	.L135
 7363                             	.L133:
1367:../src/wolfcrypt/src/sha512.c ****     }
1368:../src/wolfcrypt/src/sha512.c **** 
1369:../src/wolfcrypt/src/sha512.c **** #ifdef LITTLE_ENDIAN_ORDER
1370:../src/wolfcrypt/src/sha512.c ****     ByteReverseWords64((word64*)digest, (word64*)sha384->digest,
 7364                             		.loc 2 1370 50
 7365 001f ED A5 0C                		mov.L	48[r10], r5
 7366                             		.loc 2 1370 5
 7367 0022 75 43 30                		mov.L	#48, r3
 7368 0025 EF 52                   		mov.L	r5, r2
 7369 0027 EF A1                   		mov.L	r10, r1
 7370 0029 05 00 00 00             		bsr	_ByteReverseWords64
1371:../src/wolfcrypt/src/sha512.c ****                                                          WC_SHA384_DIGEST_SIZE);
1372:../src/wolfcrypt/src/sha512.c ****     XMEMCPY(hash, digest, WC_SHA384_DIGEST_SIZE);
 7371                             		.loc 2 1372 5
 7372 002d ED A4 0D                		mov.L	52[r10], r4
 7373 0030 75 45 30                		mov.L	#48, r5
 7374 0033 EF 41                   		mov.L	r4, r1
 7375 0035 EF A2                   		mov.L	r10, r2
 7376 0037 EF 53                   		mov.L	r5, r3
 7377 0039 7F 8F                   		smovf
1373:../src/wolfcrypt/src/sha512.c **** #else
1374:../src/wolfcrypt/src/sha512.c ****     XMEMCPY(hash, sha384->digest, WC_SHA384_DIGEST_SIZE);
1375:../src/wolfcrypt/src/sha512.c **** #endif
1376:../src/wolfcrypt/src/sha512.c **** 
1377:../src/wolfcrypt/src/sha512.c ****     return 0;
 7378                             		.loc 2 1377 12
 7379 003b 66 05                   		mov.L	#0, r5
 7380                             	.L135:
1378:../src/wolfcrypt/src/sha512.c **** }
 7381                             		.loc 2 1378 1 discriminator 1
 7382 003d EF 51                   		mov.L	r5, r1
 7383 003f 3F AA 0F                		rtsd	#60, r10-r10
 7384                             	.LFE63:
 7386                             		.section	.text.wc_Sha384Final,"ax",@progbits
 7387                             		.global	_wc_Sha384Final
 7389                             	_wc_Sha384Final:
 7390                             	.LFB64:
1379:../src/wolfcrypt/src/sha512.c **** 
1380:../src/wolfcrypt/src/sha512.c **** int wc_Sha384Final(wc_Sha384* sha384, byte* hash)
1381:../src/wolfcrypt/src/sha512.c **** {
 7391                             		.loc 2 1381 1
 7392 0000 7E AA                   		push.l	r10
 7393                             	.LCFI56:
 7394 0002 71 0A F4                		add	#-12, r0, r10
 7395                             	.LCFI57:
 7396 0005 EF A0                   		mov.L	r10, r0
 7397 0007 E7 A1 01                		mov.L	r1, 4[r10]
 7398 000a E7 A2 02                		mov.L	r2, 8[r10]
1382:../src/wolfcrypt/src/sha512.c ****     int ret;
1383:../src/wolfcrypt/src/sha512.c **** 
1384:../src/wolfcrypt/src/sha512.c ****     if (sha384 == NULL || hash == NULL) {
 7399                             		.loc 2 1384 8
 7400 000d ED A5 01                		mov.L	4[r10], r5
 7401 0010 61 05                   		cmp	#0, r5
 7402 0012 17                      		beq	.L137
 7403                             		.loc 2 1384 24 discriminator 1
 7404 0013 ED A5 02                		mov.L	8[r10], r5
 7405 0016 61 05                   		cmp	#0, r5
 7406 0018 1F                      		bne	.L138
 7407                             	.L137:
1385:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 7408                             		.loc 2 1385 16
 7409 0019 FB 5A 53 FF             		mov.L	#-173, r5
 7410 001d 2E 2C                   		bra	.L139
 7411                             	.L138:
1386:../src/wolfcrypt/src/sha512.c ****     }
1387:../src/wolfcrypt/src/sha512.c **** 
1388:../src/wolfcrypt/src/sha512.c **** #ifdef WOLF_CRYPTO_CB
1389:../src/wolfcrypt/src/sha512.c ****     if (sha384->devId != INVALID_DEVID) {
1390:../src/wolfcrypt/src/sha512.c ****         ret = wc_CryptoCb_Sha384Hash(sha384, NULL, 0, hash);
1391:../src/wolfcrypt/src/sha512.c ****         if (ret != CRYPTOCB_UNAVAILABLE)
1392:../src/wolfcrypt/src/sha512.c ****             return ret;
1393:../src/wolfcrypt/src/sha512.c ****         /* fall-through when unavailable */
1394:../src/wolfcrypt/src/sha512.c ****     }
1395:../src/wolfcrypt/src/sha512.c **** #endif
1396:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA384)
1397:../src/wolfcrypt/src/sha512.c ****     if (sha384->asyncDev.marker == WOLFSSL_ASYNC_MARKER_SHA384) {
1398:../src/wolfcrypt/src/sha512.c ****     #if defined(HAVE_INTEL_QA)
1399:../src/wolfcrypt/src/sha512.c ****         return IntelQaSymSha384(&sha384->asyncDev, hash, NULL,
1400:../src/wolfcrypt/src/sha512.c ****                                             WC_SHA384_DIGEST_SIZE);
1401:../src/wolfcrypt/src/sha512.c ****     #endif
1402:../src/wolfcrypt/src/sha512.c ****     }
1403:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
1404:../src/wolfcrypt/src/sha512.c **** 
1405:../src/wolfcrypt/src/sha512.c ****     ret = Sha512Final((wc_Sha512*)sha384);
 7412                             		.loc 2 1405 11
 7413 001f ED A1 01                		mov.L	4[r10], r1
 7414 0022 05 00 00 00             		bsr	_Sha512Final
 7415 0026 E3 A1                   		mov.L	r1, [r10]
1406:../src/wolfcrypt/src/sha512.c ****     if (ret != 0)
 7416                             		.loc 2 1406 8
 7417 0028 EC A5                   		mov.L	[r10], r5
 7418 002a 61 05                   		cmp	#0, r5
 7419 002c 15                      		beq	.L140
1407:../src/wolfcrypt/src/sha512.c ****         return ret;
 7420                             		.loc 2 1407 16
 7421 002d EC A5                   		mov.L	[r10], r5
 7422 002f 2E 1A                   		bra	.L139
 7423                             	.L140:
1408:../src/wolfcrypt/src/sha512.c **** 
1409:../src/wolfcrypt/src/sha512.c ****     XMEMCPY(hash, sha384->digest, WC_SHA384_DIGEST_SIZE);
 7424                             		.loc 2 1409 5
 7425 0031 ED A5 01                		mov.L	4[r10], r5
 7426 0034 75 43 30                		mov.L	#48, r3
 7427 0037 EF 52                   		mov.L	r5, r2
 7428 0039 ED A1 02                		mov.L	8[r10], r1
 7429 003c 05 00 00 00             		bsr	_memcpy
1410:../src/wolfcrypt/src/sha512.c **** 
1411:../src/wolfcrypt/src/sha512.c ****     return InitSha384(sha384);  /* reset state */
 7430                             		.loc 2 1411 12
 7431 0040 ED A1 01                		mov.L	4[r10], r1
 7432 0043 05 00 00 00             		bsr	_InitSha384
 7433 0047 EF 15                   		mov.L	r1, r5
 7434                             	.L139:
1412:../src/wolfcrypt/src/sha512.c **** }
 7435                             		.loc 2 1412 1
 7436 0049 EF 51                   		mov.L	r5, r1
 7437 004b 3F AA 04                		rtsd	#16, r10-r10
 7438                             	.LFE64:
 7440                             		.section	.text.wc_InitSha384_ex,"ax",@progbits
 7441                             		.global	_wc_InitSha384_ex
 7443                             	_wc_InitSha384_ex:
 7444                             	.LFB65:
1413:../src/wolfcrypt/src/sha512.c **** 
1414:../src/wolfcrypt/src/sha512.c **** int wc_InitSha384_ex(wc_Sha384* sha384, void* heap, int devId)
1415:../src/wolfcrypt/src/sha512.c **** {
 7445                             		.loc 2 1415 1
 7446 0000 7E AA                   		push.l	r10
 7447                             	.LCFI58:
 7448 0002 71 0A F0                		add	#-16, r0, r10
 7449                             	.LCFI59:
 7450 0005 EF A0                   		mov.L	r10, r0
 7451 0007 E7 A1 01                		mov.L	r1, 4[r10]
 7452 000a E7 A2 02                		mov.L	r2, 8[r10]
 7453 000d E7 A3 03                		mov.L	r3, 12[r10]
1416:../src/wolfcrypt/src/sha512.c ****     int ret;
1417:../src/wolfcrypt/src/sha512.c **** 
1418:../src/wolfcrypt/src/sha512.c ****     if (sha384 == NULL) {
 7454                             		.loc 2 1418 8
 7455 0010 ED A5 01                		mov.L	4[r10], r5
 7456 0013 61 05                   		cmp	#0, r5
 7457 0015 1F                      		bne	.L142
1419:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 7458                             		.loc 2 1419 16
 7459 0016 FB 5A 53 FF             		mov.L	#-173, r5
 7460 001a 2E 1E                   		bra	.L143
 7461                             	.L142:
1420:../src/wolfcrypt/src/sha512.c ****     }
1421:../src/wolfcrypt/src/sha512.c **** 
1422:../src/wolfcrypt/src/sha512.c ****     sha384->heap = heap;
 7462                             		.loc 2 1422 18
 7463 001c ED A5 01                		mov.L	4[r10], r5
 7464 001f ED A4 02                		mov.L	8[r10], r4
 7465 0022 E7 54 35                		mov.L	r4, 212[r5]
1423:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SMALL_STACK_CACHE
1424:../src/wolfcrypt/src/sha512.c ****     sha384->W = NULL;
1425:../src/wolfcrypt/src/sha512.c **** #endif
1426:../src/wolfcrypt/src/sha512.c **** #ifdef WOLF_CRYPTO_CB
1427:../src/wolfcrypt/src/sha512.c ****     sha384->devId = devId;
1428:../src/wolfcrypt/src/sha512.c ****     sha384->devCtx = NULL;
1429:../src/wolfcrypt/src/sha512.c **** #endif
1430:../src/wolfcrypt/src/sha512.c **** 
1431:../src/wolfcrypt/src/sha512.c ****     ret = InitSha384(sha384);
 7466                             		.loc 2 1431 11
 7467 0025 ED A1 01                		mov.L	4[r10], r1
 7468 0028 05 00 00 00             		bsr	_InitSha384
 7469 002c E3 A1                   		mov.L	r1, [r10]
1432:../src/wolfcrypt/src/sha512.c ****     if (ret != 0)
 7470                             		.loc 2 1432 8
 7471 002e EC A5                   		mov.L	[r10], r5
 7472 0030 61 05                   		cmp	#0, r5
 7473 0032 14                      		beq	.L144
1433:../src/wolfcrypt/src/sha512.c ****         return ret;
 7474                             		.loc 2 1433 16
 7475 0033 EC A5                   		mov.L	[r10], r5
 7476 0035 0B                      		bra	.L143
 7477                             	.L144:
1434:../src/wolfcrypt/src/sha512.c **** 
1435:../src/wolfcrypt/src/sha512.c **** #if defined(USE_INTEL_SPEEDUP) && \
1436:../src/wolfcrypt/src/sha512.c ****     (defined(HAVE_INTEL_AVX1) || defined(HAVE_INTEL_AVX2))
1437:../src/wolfcrypt/src/sha512.c ****     Sha512_SetTransform();
1438:../src/wolfcrypt/src/sha512.c **** #endif
1439:../src/wolfcrypt/src/sha512.c **** 
1440:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA384)
1441:../src/wolfcrypt/src/sha512.c ****     ret = wolfAsync_DevCtxInit(&sha384->asyncDev, WOLFSSL_ASYNC_MARKER_SHA384,
1442:../src/wolfcrypt/src/sha512.c ****                                                            sha384->heap, devId);
1443:../src/wolfcrypt/src/sha512.c **** #else
1444:../src/wolfcrypt/src/sha512.c ****     (void)devId;
1445:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
1446:../src/wolfcrypt/src/sha512.c **** 
1447:../src/wolfcrypt/src/sha512.c ****     return ret;
 7478                             		.loc 2 1447 12
 7479 0036 EC A5                   		mov.L	[r10], r5
 7480                             	.L143:
1448:../src/wolfcrypt/src/sha512.c **** }
 7481                             		.loc 2 1448 1
 7482 0038 EF 51                   		mov.L	r5, r1
 7483 003a 3F AA 05                		rtsd	#20, r10-r10
 7484                             	.LFE65:
 7486                             		.section	.text.wc_InitSha384,"ax",@progbits
 7487                             		.global	_wc_InitSha384
 7489                             	_wc_InitSha384:
 7490                             	.LFB66:
1449:../src/wolfcrypt/src/sha512.c **** 
1450:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_IMX6_CAAM || WOLFSSL_SILABS_SHA512 || WOLFSSL_KCAPI_HASH */
1451:../src/wolfcrypt/src/sha512.c **** 
1452:../src/wolfcrypt/src/sha512.c **** int wc_InitSha384(wc_Sha384* sha384)
1453:../src/wolfcrypt/src/sha512.c **** {
 7491                             		.loc 2 1453 1
 7492 0000 7E AA                   		push.l	r10
 7493                             	.LCFI60:
 7494 0002 71 0A F8                		add	#-8, r0, r10
 7495                             	.LCFI61:
 7496 0005 EF A0                   		mov.L	r10, r0
 7497 0007 E7 A1 01                		mov.L	r1, 4[r10]
1454:../src/wolfcrypt/src/sha512.c ****     int devId = INVALID_DEVID;
 7498                             		.loc 2 1454 9
 7499 000a F8 A6 FE                		mov.L	#-2, [r10]
1455:../src/wolfcrypt/src/sha512.c **** 
1456:../src/wolfcrypt/src/sha512.c **** #ifdef WOLF_CRYPTO_CB
1457:../src/wolfcrypt/src/sha512.c ****     devId = wc_CryptoCb_DefaultDevID();
1458:../src/wolfcrypt/src/sha512.c **** #endif
1459:../src/wolfcrypt/src/sha512.c ****     return wc_InitSha384_ex(sha384, NULL, devId);
 7500                             		.loc 2 1459 12
 7501 000d EC A3                   		mov.L	[r10], r3
 7502 000f 66 02                   		mov.L	#0, r2
 7503 0011 ED A1 01                		mov.L	4[r10], r1
 7504 0014 05 00 00 00             		bsr	_wc_InitSha384_ex
 7505 0018 EF 15                   		mov.L	r1, r5
1460:../src/wolfcrypt/src/sha512.c **** }
 7506                             		.loc 2 1460 1
 7507 001a EF 51                   		mov.L	r5, r1
 7508 001c 3F AA 03                		rtsd	#12, r10-r10
 7509                             	.LFE66:
 7511                             		.section	.text.wc_Sha384Free,"ax",@progbits
 7512                             		.global	_wc_Sha384Free
 7514                             	_wc_Sha384Free:
 7515                             	.LFB67:
1461:../src/wolfcrypt/src/sha512.c **** 
1462:../src/wolfcrypt/src/sha512.c **** void wc_Sha384Free(wc_Sha384* sha384)
1463:../src/wolfcrypt/src/sha512.c **** {
 7516                             		.loc 2 1463 1
 7517 0000 7E AA                   		push.l	r10
 7518                             	.LCFI62:
 7519 0002 71 0A FC                		add	#-4, r0, r10
 7520                             	.LCFI63:
 7521 0005 EF A0                   		mov.L	r10, r0
 7522 0007 E3 A1                   		mov.L	r1, [r10]
1464:../src/wolfcrypt/src/sha512.c ****     if (sha384 == NULL)
1465:../src/wolfcrypt/src/sha512.c ****         return;
1466:../src/wolfcrypt/src/sha512.c **** 
1467:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SMALL_STACK_CACHE
1468:../src/wolfcrypt/src/sha512.c ****     if (sha384->W != NULL) {
1469:../src/wolfcrypt/src/sha512.c ****         XFREE(sha384->W, sha384->heap, DYNAMIC_TYPE_TMP_BUFFER);
1470:../src/wolfcrypt/src/sha512.c ****         sha384->W = NULL;
1471:../src/wolfcrypt/src/sha512.c ****     }
1472:../src/wolfcrypt/src/sha512.c **** #endif
1473:../src/wolfcrypt/src/sha512.c **** 
1474:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_KCAPI_HASH)
1475:../src/wolfcrypt/src/sha512.c ****     KcapiHashFree(&sha384->kcapi);
1476:../src/wolfcrypt/src/sha512.c **** #endif
1477:../src/wolfcrypt/src/sha512.c **** 
1478:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_HASH_KEEP)
1479:../src/wolfcrypt/src/sha512.c ****     if (sha384->msg != NULL) {
1480:../src/wolfcrypt/src/sha512.c ****         XFREE(sha384->msg, sha384->heap, DYNAMIC_TYPE_TMP_BUFFER);
1481:../src/wolfcrypt/src/sha512.c ****         sha384->msg = NULL;
1482:../src/wolfcrypt/src/sha512.c ****     }
1483:../src/wolfcrypt/src/sha512.c **** #endif
1484:../src/wolfcrypt/src/sha512.c **** 
1485:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA384)
1486:../src/wolfcrypt/src/sha512.c ****     wolfAsync_DevCtxFree(&sha384->asyncDev, WOLFSSL_ASYNC_MARKER_SHA384);
1487:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
1488:../src/wolfcrypt/src/sha512.c **** }
 7523                             		.loc 2 1488 1
 7524 0009 3F AA 02                		rtsd	#8, r10-r10
 7525                             	.LFE67:
 7527                             		.section	.text.Sha512_Family_GetHash,"ax",@progbits
 7529                             	_Sha512_Family_GetHash:
 7530                             	.LFB68:
1489:../src/wolfcrypt/src/sha512.c **** 
1490:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_SHA384 */
1491:../src/wolfcrypt/src/sha512.c **** 
1492:../src/wolfcrypt/src/sha512.c **** #endif /* HAVE_FIPS */
1493:../src/wolfcrypt/src/sha512.c **** 
1494:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SHA512
1495:../src/wolfcrypt/src/sha512.c **** 
1496:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_KCAPI_HASH)
1497:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/kcapi/kcapi_hash.c */
1498:../src/wolfcrypt/src/sha512.c **** 
1499:../src/wolfcrypt/src/sha512.c **** #else
1500:../src/wolfcrypt/src/sha512.c **** 
1501:../src/wolfcrypt/src/sha512.c **** static int Sha512_Family_GetHash(wc_Sha512* sha512, byte* hash,
1502:../src/wolfcrypt/src/sha512.c ****                                  int (*finalfp)(wc_Sha512*, byte*))
1503:../src/wolfcrypt/src/sha512.c **** {
 7531                             		.loc 2 1503 1
 7532 0000 7E AA                   		push.l	r10
 7533                             	.LCFI64:
 7534 0002 72 0A 18 FF             		add	#-232, r0, r10
 7535                             	.LCFI65:
 7536 0006 EF A0                   		mov.L	r10, r0
 7537 0008 E7 A1 37                		mov.L	r1, 220[r10]
 7538 000b E7 A2 38                		mov.L	r2, 224[r10]
 7539 000e E7 A3 39                		mov.L	r3, 228[r10]
1504:../src/wolfcrypt/src/sha512.c ****     int ret;
1505:../src/wolfcrypt/src/sha512.c ****     wc_Sha512 tmpSha512;
1506:../src/wolfcrypt/src/sha512.c **** 
1507:../src/wolfcrypt/src/sha512.c ****     if (sha512 == NULL || hash == NULL)
 7540                             		.loc 2 1507 8
 7541 0011 ED A5 37                		mov.L	220[r10], r5
 7542 0014 61 05                   		cmp	#0, r5
 7543 0016 17                      		beq	.L150
 7544                             		.loc 2 1507 24 discriminator 1
 7545 0017 ED A5 38                		mov.L	224[r10], r5
 7546 001a 61 05                   		cmp	#0, r5
 7547 001c 1F                      		bne	.L151
 7548                             	.L150:
1508:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 7549                             		.loc 2 1508 16
 7550 001d FB 5A 53 FF             		mov.L	#-173, r5
 7551 0021 2E 30                   		bra	.L154
 7552                             	.L151:
1509:../src/wolfcrypt/src/sha512.c **** 
1510:../src/wolfcrypt/src/sha512.c **** #if  defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
1511:../src/wolfcrypt/src/sha512.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
1512:../src/wolfcrypt/src/sha512.c ****     if(sha512->ctx.mode == ESP32_SHA_INIT) {
1513:../src/wolfcrypt/src/sha512.c ****         esp_sha_try_hw_lock(&sha512->ctx);
1514:../src/wolfcrypt/src/sha512.c ****     }
1515:../src/wolfcrypt/src/sha512.c ****     if(sha512->ctx.mode != ESP32_SHA_SW)
1516:../src/wolfcrypt/src/sha512.c ****        esp_sha512_digest_process(sha512, 0);
1517:../src/wolfcrypt/src/sha512.c **** #endif
1518:../src/wolfcrypt/src/sha512.c **** 
1519:../src/wolfcrypt/src/sha512.c ****     ret = wc_Sha512Copy(sha512, &tmpSha512);
 7553                             		.loc 2 1519 11
 7554 0023 71 A5 04                		add	#4, r10, r5
 7555 0026 EF 52                   		mov.L	r5, r2
 7556 0028 ED A1 37                		mov.L	220[r10], r1
 7557 002b 05 00 00 00             		bsr	_wc_Sha512Copy
 7558 002f E3 A1                   		mov.L	r1, [r10]
1520:../src/wolfcrypt/src/sha512.c ****     if (ret == 0) {
 7559                             		.loc 2 1520 8
 7560 0031 EC A5                   		mov.L	[r10], r5
 7561 0033 61 05                   		cmp	#0, r5
 7562 0035 21 1A                   		bne	.L153
1521:../src/wolfcrypt/src/sha512.c ****         ret = finalfp(&tmpSha512, hash);
 7563                             		.loc 2 1521 15
 7564 0037 71 A4 04                		add	#4, r10, r4
 7565 003a ED A5 39                		mov.L	228[r10], r5
 7566 003d ED A2 38                		mov.L	224[r10], r2
 7567 0040 EF 41                   		mov.L	r4, r1
 7568 0042 7F 15                   		jsr	r5
 7569                             	.LVL2:
 7570 0044 E3 A1                   		mov.L	r1, [r10]
1522:../src/wolfcrypt/src/sha512.c **** #if  defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
1523:../src/wolfcrypt/src/sha512.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
1524:../src/wolfcrypt/src/sha512.c ****         sha512->ctx.mode = ESP32_SHA_SW;;
1525:../src/wolfcrypt/src/sha512.c **** #endif
1526:../src/wolfcrypt/src/sha512.c ****         wc_Sha512Free(&tmpSha512);
 7571                             		.loc 2 1526 9
 7572 0046 71 A5 04                		add	#4, r10, r5
 7573 0049 EF 51                   		mov.L	r5, r1
 7574 004b 05 00 00 00             		bsr	_wc_Sha512Free
 7575                             	.L153:
1527:../src/wolfcrypt/src/sha512.c ****     }
1528:../src/wolfcrypt/src/sha512.c ****     return ret;
 7576                             		.loc 2 1528 12
 7577 004f EC A5                   		mov.L	[r10], r5
 7578                             	.L154:
1529:../src/wolfcrypt/src/sha512.c **** }
 7579                             		.loc 2 1529 1 discriminator 1
 7580 0051 EF 51                   		mov.L	r5, r1
 7581 0053 3F AA 3B                		rtsd	#236, r10-r10
 7582                             	.LFE68:
 7584                             		.section	.text.wc_Sha512GetHash,"ax",@progbits
 7585                             		.global	_wc_Sha512GetHash
 7587                             	_wc_Sha512GetHash:
 7588                             	.LFB69:
1530:../src/wolfcrypt/src/sha512.c **** 
1531:../src/wolfcrypt/src/sha512.c **** int wc_Sha512GetHash(wc_Sha512* sha512, byte* hash)
1532:../src/wolfcrypt/src/sha512.c **** {
 7589                             		.loc 2 1532 1
 7590 0000 7E AA                   		push.l	r10
 7591                             	.LCFI66:
 7592 0002 71 0A F8                		add	#-8, r0, r10
 7593                             	.LCFI67:
 7594 0005 EF A0                   		mov.L	r10, r0
 7595 0007 E3 A1                   		mov.L	r1, [r10]
 7596 0009 E7 A2 01                		mov.L	r2, 4[r10]
1533:../src/wolfcrypt/src/sha512.c ****     return Sha512_Family_GetHash(sha512, hash, wc_Sha512Final);
 7597                             		.loc 2 1533 12
 7598 000c FB 32 00 00 00 00       		mov.L	#_wc_Sha512Final, r3
 7599 0012 ED A2 01                		mov.L	4[r10], r2
 7600 0015 EC A1                   		mov.L	[r10], r1
 7601 0017 05 00 00 00             		bsr	_Sha512_Family_GetHash
 7602 001b EF 15                   		mov.L	r1, r5
1534:../src/wolfcrypt/src/sha512.c **** }
 7603                             		.loc 2 1534 1
 7604 001d EF 51                   		mov.L	r5, r1
 7605 001f 3F AA 03                		rtsd	#12, r10-r10
 7606                             	.LFE69:
 7608                             		.section	.text.wc_Sha512Copy,"ax",@progbits
 7609                             		.global	_wc_Sha512Copy
 7611                             	_wc_Sha512Copy:
 7612                             	.LFB70:
1535:../src/wolfcrypt/src/sha512.c **** 
1536:../src/wolfcrypt/src/sha512.c **** int wc_Sha512Copy(wc_Sha512* src, wc_Sha512* dst)
1537:../src/wolfcrypt/src/sha512.c **** {
 7613                             		.loc 2 1537 1
 7614 0000 7E AA                   		push.l	r10
 7615                             	.LCFI68:
 7616 0002 71 0A F4                		add	#-12, r0, r10
 7617                             	.LCFI69:
 7618 0005 EF A0                   		mov.L	r10, r0
 7619 0007 E7 A1 01                		mov.L	r1, 4[r10]
 7620 000a E7 A2 02                		mov.L	r2, 8[r10]
1538:../src/wolfcrypt/src/sha512.c ****     int ret = 0;
 7621                             		.loc 2 1538 9
 7622 000d F8 A6 00                		mov.L	#0, [r10]
1539:../src/wolfcrypt/src/sha512.c **** 
1540:../src/wolfcrypt/src/sha512.c ****     if (src == NULL || dst == NULL)
 7623                             		.loc 2 1540 8
 7624 0010 ED A5 01                		mov.L	4[r10], r5
 7625 0013 61 05                   		cmp	#0, r5
 7626 0015 17                      		beq	.L158
 7627                             		.loc 2 1540 21 discriminator 1
 7628 0016 ED A5 02                		mov.L	8[r10], r5
 7629 0019 61 05                   		cmp	#0, r5
 7630 001b 1F                      		bne	.L159
 7631                             	.L158:
1541:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 7632                             		.loc 2 1541 16
 7633 001c FB 5A 53 FF             		mov.L	#-173, r5
 7634 0020 2E 11                   		bra	.L160
 7635                             	.L159:
1542:../src/wolfcrypt/src/sha512.c **** 
1543:../src/wolfcrypt/src/sha512.c ****     XMEMCPY(dst, src, sizeof(wc_Sha512));
 7636                             		.loc 2 1543 5
 7637 0022 75 43 D8                		mov.L	#0xd8, r3
 7638 0025 ED A2 01                		mov.L	4[r10], r2
 7639 0028 ED A1 02                		mov.L	8[r10], r1
 7640 002b 05 00 00 00             		bsr	_memcpy
1544:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SMALL_STACK_CACHE
1545:../src/wolfcrypt/src/sha512.c ****     dst->W = NULL;
1546:../src/wolfcrypt/src/sha512.c **** #endif
1547:../src/wolfcrypt/src/sha512.c **** 
1548:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SILABS_SHA512
1549:../src/wolfcrypt/src/sha512.c ****     dst->silabsCtx.hash_ctx.cmd_ctx = &(dst->silabsCtx.cmd_ctx);
1550:../src/wolfcrypt/src/sha512.c ****     dst->silabsCtx.hash_ctx.hash_type_ctx = &(dst->silabsCtx.hash_type_ctx);
1551:../src/wolfcrypt/src/sha512.c **** #endif
1552:../src/wolfcrypt/src/sha512.c **** 
1553:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA512)
1554:../src/wolfcrypt/src/sha512.c ****     ret = wolfAsync_DevCopy(&src->asyncDev, &dst->asyncDev);
1555:../src/wolfcrypt/src/sha512.c **** #endif
1556:../src/wolfcrypt/src/sha512.c **** #if  defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
1557:../src/wolfcrypt/src/sha512.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
1558:../src/wolfcrypt/src/sha512.c ****     dst->ctx.mode = src->ctx.mode;
1559:../src/wolfcrypt/src/sha512.c ****     dst->ctx.isfirstblock = src->ctx.isfirstblock;
1560:../src/wolfcrypt/src/sha512.c ****     dst->ctx.sha_type = src->ctx.sha_type;
1561:../src/wolfcrypt/src/sha512.c **** #endif
1562:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_HASH_FLAGS
1563:../src/wolfcrypt/src/sha512.c ****      dst->flags |= WC_HASH_FLAG_ISCOPY;
1564:../src/wolfcrypt/src/sha512.c **** #endif
1565:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_HASH_KEEP)
1566:../src/wolfcrypt/src/sha512.c ****     if (src->msg != NULL) {
1567:../src/wolfcrypt/src/sha512.c ****         dst->msg = (byte*)XMALLOC(src->len, dst->heap, DYNAMIC_TYPE_TMP_BUFFER);
1568:../src/wolfcrypt/src/sha512.c ****         if (dst->msg == NULL)
1569:../src/wolfcrypt/src/sha512.c ****             return MEMORY_E;
1570:../src/wolfcrypt/src/sha512.c ****         XMEMCPY(dst->msg, src->msg, src->len);
1571:../src/wolfcrypt/src/sha512.c ****     }
1572:../src/wolfcrypt/src/sha512.c **** #endif
1573:../src/wolfcrypt/src/sha512.c **** 
1574:../src/wolfcrypt/src/sha512.c ****     return ret;
 7641                             		.loc 2 1574 12
 7642 002f EC A5                   		mov.L	[r10], r5
 7643                             	.L160:
1575:../src/wolfcrypt/src/sha512.c **** }
 7644                             		.loc 2 1575 1
 7645 0031 EF 51                   		mov.L	r5, r1
 7646 0033 3F AA 04                		rtsd	#16, r10-r10
 7647                             	.LFE70:
 7649                             		.section	.text.wc_InitSha512_224,"ax",@progbits
 7650                             		.global	_wc_InitSha512_224
 7652                             	_wc_InitSha512_224:
 7653                             	.LFB71:
1576:../src/wolfcrypt/src/sha512.c **** 
1577:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_KCAPI_HASH */
1578:../src/wolfcrypt/src/sha512.c **** 
1579:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_HASH_FLAGS
1580:../src/wolfcrypt/src/sha512.c **** int wc_Sha512SetFlags(wc_Sha512* sha512, word32 flags)
1581:../src/wolfcrypt/src/sha512.c **** {
1582:../src/wolfcrypt/src/sha512.c ****     if (sha512) {
1583:../src/wolfcrypt/src/sha512.c ****         sha512->flags = flags;
1584:../src/wolfcrypt/src/sha512.c ****     }
1585:../src/wolfcrypt/src/sha512.c ****     return 0;
1586:../src/wolfcrypt/src/sha512.c **** }
1587:../src/wolfcrypt/src/sha512.c **** int wc_Sha512GetFlags(wc_Sha512* sha512, word32* flags)
1588:../src/wolfcrypt/src/sha512.c **** {
1589:../src/wolfcrypt/src/sha512.c ****     if (sha512 && flags) {
1590:../src/wolfcrypt/src/sha512.c ****         *flags = sha512->flags;
1591:../src/wolfcrypt/src/sha512.c ****     }
1592:../src/wolfcrypt/src/sha512.c ****     return 0;
1593:../src/wolfcrypt/src/sha512.c **** }
1594:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_HASH_FLAGS */
1595:../src/wolfcrypt/src/sha512.c **** 
1596:../src/wolfcrypt/src/sha512.c **** #if !defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)
1597:../src/wolfcrypt/src/sha512.c **** 
1598:../src/wolfcrypt/src/sha512.c **** #if !defined(WOLFSSL_NOSHA512_224)
1599:../src/wolfcrypt/src/sha512.c **** int wc_InitSha512_224(wc_Sha512* sha)
1600:../src/wolfcrypt/src/sha512.c **** {
 7654                             		.loc 2 1600 1
 7655 0000 7E AA                   		push.l	r10
 7656                             	.LCFI70:
 7657 0002 71 0A FC                		add	#-4, r0, r10
 7658                             	.LCFI71:
 7659 0005 EF A0                   		mov.L	r10, r0
 7660 0007 E3 A1                   		mov.L	r1, [r10]
1601:../src/wolfcrypt/src/sha512.c ****     return wc_InitSha512_224_ex(sha, NULL, INVALID_DEVID);
 7661                             		.loc 2 1601 12
 7662 0009 FB 36 FE                		mov.L	#-2, r3
 7663 000c 66 02                   		mov.L	#0, r2
 7664 000e EC A1                   		mov.L	[r10], r1
 7665 0010 05 00 00 00             		bsr	_wc_InitSha512_224_ex
 7666 0014 EF 15                   		mov.L	r1, r5
1602:../src/wolfcrypt/src/sha512.c **** }
 7667                             		.loc 2 1602 1
 7668 0016 EF 51                   		mov.L	r5, r1
 7669 0018 3F AA 02                		rtsd	#8, r10-r10
 7670                             	.LFE71:
 7672                             		.section	.text.wc_Sha512_224Update,"ax",@progbits
 7673                             		.global	_wc_Sha512_224Update
 7675                             	_wc_Sha512_224Update:
 7676                             	.LFB72:
1603:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_224Update(wc_Sha512* sha, const byte* data, word32 len)
1604:../src/wolfcrypt/src/sha512.c **** {
 7677                             		.loc 2 1604 1
 7678 0000 7E AA                   		push.l	r10
 7679                             	.LCFI72:
 7680 0002 71 0A F4                		add	#-12, r0, r10
 7681                             	.LCFI73:
 7682 0005 EF A0                   		mov.L	r10, r0
 7683 0007 E3 A1                   		mov.L	r1, [r10]
 7684 0009 E7 A2 01                		mov.L	r2, 4[r10]
 7685 000c E7 A3 02                		mov.L	r3, 8[r10]
1605:../src/wolfcrypt/src/sha512.c ****     return wc_Sha512Update(sha, data, len);
 7686                             		.loc 2 1605 12
 7687 000f ED A3 02                		mov.L	8[r10], r3
 7688 0012 ED A2 01                		mov.L	4[r10], r2
 7689 0015 EC A1                   		mov.L	[r10], r1
 7690 0017 05 00 00 00             		bsr	_wc_Sha512Update
 7691 001b EF 15                   		mov.L	r1, r5
1606:../src/wolfcrypt/src/sha512.c **** }
 7692                             		.loc 2 1606 1
 7693 001d EF 51                   		mov.L	r5, r1
 7694 001f 3F AA 04                		rtsd	#16, r10-r10
 7695                             	.LFE72:
 7697                             		.section	.text.wc_Sha512_224FinalRaw,"ax",@progbits
 7698                             		.global	_wc_Sha512_224FinalRaw
 7700                             	_wc_Sha512_224FinalRaw:
 7701                             	.LFB73:
1607:../src/wolfcrypt/src/sha512.c **** 
1608:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_KCAPI_HASH)
1609:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/kcapi/kcapi_hash.c */
1610:../src/wolfcrypt/src/sha512.c **** #elif defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_HASH)
1611:../src/wolfcrypt/src/sha512.c **** 
1612:../src/wolfcrypt/src/sha512.c **** #else
1613:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_224FinalRaw(wc_Sha512* sha, byte* hash)
1614:../src/wolfcrypt/src/sha512.c **** {
 7702                             		.loc 2 1614 1
 7703 0000 7E AA                   		push.l	r10
 7704                             	.LCFI74:
 7705 0002 71 0A F8                		add	#-8, r0, r10
 7706                             	.LCFI75:
 7707 0005 EF A0                   		mov.L	r10, r0
 7708 0007 E3 A1                   		mov.L	r1, [r10]
 7709 0009 E7 A2 01                		mov.L	r2, 4[r10]
1615:../src/wolfcrypt/src/sha512.c ****     return Sha512FinalRaw(sha, hash, WC_SHA512_224_DIGEST_SIZE);
 7710                             		.loc 2 1615 12
 7711 000c 75 43 1C                		mov.L	#28, r3
 7712 000f ED A2 01                		mov.L	4[r10], r2
 7713 0012 EC A1                   		mov.L	[r10], r1
 7714 0014 05 00 00 00             		bsr	_Sha512FinalRaw
 7715 0018 EF 15                   		mov.L	r1, r5
1616:../src/wolfcrypt/src/sha512.c **** }
 7716                             		.loc 2 1616 1
 7717 001a EF 51                   		mov.L	r5, r1
 7718 001c 3F AA 03                		rtsd	#12, r10-r10
 7719                             	.LFE73:
 7721                             		.section	.text.wc_Sha512_224Final,"ax",@progbits
 7722                             		.global	_wc_Sha512_224Final
 7724                             	_wc_Sha512_224Final:
 7725                             	.LFB74:
1617:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_224Final(wc_Sha512* sha512, byte* hash)
1618:../src/wolfcrypt/src/sha512.c **** {
 7726                             		.loc 2 1618 1
 7727 0000 7E AA                   		push.l	r10
 7728                             	.LCFI76:
 7729 0002 71 0A F8                		add	#-8, r0, r10
 7730                             	.LCFI77:
 7731 0005 EF A0                   		mov.L	r10, r0
 7732 0007 E3 A1                   		mov.L	r1, [r10]
 7733 0009 E7 A2 01                		mov.L	r2, 4[r10]
1619:../src/wolfcrypt/src/sha512.c ****     return Sha512_Family_Final(sha512, hash, WC_SHA512_224_DIGEST_SIZE,
 7734                             		.loc 2 1619 12
 7735 000c FB 42 00 00 00 00       		mov.L	#_InitSha512_224, r4
 7736 0012 75 43 1C                		mov.L	#28, r3
 7737 0015 ED A2 01                		mov.L	4[r10], r2
 7738 0018 EC A1                   		mov.L	[r10], r1
 7739 001a 05 00 00 00             		bsr	_Sha512_Family_Final
 7740 001e EF 15                   		mov.L	r1, r5
1620:../src/wolfcrypt/src/sha512.c ****                                InitSha512_224);
1621:../src/wolfcrypt/src/sha512.c **** }
 7741                             		.loc 2 1621 1
 7742 0020 EF 51                   		mov.L	r5, r1
 7743 0022 3F AA 03                		rtsd	#12, r10-r10
 7744                             	.LFE74:
 7746                             		.section	.text.wc_Sha512_224Free,"ax",@progbits
 7747                             		.global	_wc_Sha512_224Free
 7749                             	_wc_Sha512_224Free:
 7750                             	.LFB75:
1622:../src/wolfcrypt/src/sha512.c **** #endif
1623:../src/wolfcrypt/src/sha512.c **** void wc_Sha512_224Free(wc_Sha512* sha)
1624:../src/wolfcrypt/src/sha512.c **** {
 7751                             		.loc 2 1624 1
 7752 0000 7E AA                   		push.l	r10
 7753                             	.LCFI78:
 7754 0002 71 0A FC                		add	#-4, r0, r10
 7755                             	.LCFI79:
 7756 0005 EF A0                   		mov.L	r10, r0
 7757 0007 E3 A1                   		mov.L	r1, [r10]
1625:../src/wolfcrypt/src/sha512.c ****     wc_Sha512Free(sha);
 7758                             		.loc 2 1625 5
 7759 0009 EC A1                   		mov.L	[r10], r1
 7760 000b 05 00 00 00             		bsr	_wc_Sha512Free
1626:../src/wolfcrypt/src/sha512.c **** }
 7761                             		.loc 2 1626 1
 7762 000f 03                      		nop
 7763 0010 3F AA 02                		rtsd	#8, r10-r10
 7764                             	.LFE75:
 7766                             		.section	.text.wc_Sha512_224GetHash,"ax",@progbits
 7767                             		.global	_wc_Sha512_224GetHash
 7769                             	_wc_Sha512_224GetHash:
 7770                             	.LFB76:
1627:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_KCAPI_HASH)
1628:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/kcapi/kcapi_hash.c */
1629:../src/wolfcrypt/src/sha512.c **** #elif defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_HASH)
1630:../src/wolfcrypt/src/sha512.c **** 
1631:../src/wolfcrypt/src/sha512.c **** 
1632:../src/wolfcrypt/src/sha512.c **** #else
1633:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_224GetHash(wc_Sha512* sha512, byte* hash)
1634:../src/wolfcrypt/src/sha512.c **** {
 7771                             		.loc 2 1634 1
 7772 0000 7E AA                   		push.l	r10
 7773                             	.LCFI80:
 7774 0002 71 0A F8                		add	#-8, r0, r10
 7775                             	.LCFI81:
 7776 0005 EF A0                   		mov.L	r10, r0
 7777 0007 E3 A1                   		mov.L	r1, [r10]
 7778 0009 E7 A2 01                		mov.L	r2, 4[r10]
1635:../src/wolfcrypt/src/sha512.c ****     return Sha512_Family_GetHash(sha512, hash, wc_Sha512_224Final);
 7779                             		.loc 2 1635 12
 7780 000c FB 32 00 00 00 00       		mov.L	#_wc_Sha512_224Final, r3
 7781 0012 ED A2 01                		mov.L	4[r10], r2
 7782 0015 EC A1                   		mov.L	[r10], r1
 7783 0017 05 00 00 00             		bsr	_Sha512_Family_GetHash
 7784 001b EF 15                   		mov.L	r1, r5
1636:../src/wolfcrypt/src/sha512.c **** }
 7785                             		.loc 2 1636 1
 7786 001d EF 51                   		mov.L	r5, r1
 7787 001f 3F AA 03                		rtsd	#12, r10-r10
 7788                             	.LFE76:
 7790                             		.section	.text.wc_Sha512_224Copy,"ax",@progbits
 7791                             		.global	_wc_Sha512_224Copy
 7793                             	_wc_Sha512_224Copy:
 7794                             	.LFB77:
1637:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_224Copy(wc_Sha512* src, wc_Sha512* dst)
1638:../src/wolfcrypt/src/sha512.c **** {
 7795                             		.loc 2 1638 1
 7796 0000 7E AA                   		push.l	r10
 7797                             	.LCFI82:
 7798 0002 71 0A F8                		add	#-8, r0, r10
 7799                             	.LCFI83:
 7800 0005 EF A0                   		mov.L	r10, r0
 7801 0007 E3 A1                   		mov.L	r1, [r10]
 7802 0009 E7 A2 01                		mov.L	r2, 4[r10]
1639:../src/wolfcrypt/src/sha512.c ****     return wc_Sha512Copy(src, dst);
 7803                             		.loc 2 1639 12
 7804 000c ED A2 01                		mov.L	4[r10], r2
 7805 000f EC A1                   		mov.L	[r10], r1
 7806 0011 05 00 00 00             		bsr	_wc_Sha512Copy
 7807 0015 EF 15                   		mov.L	r1, r5
1640:../src/wolfcrypt/src/sha512.c **** }
 7808                             		.loc 2 1640 1
 7809 0017 EF 51                   		mov.L	r5, r1
 7810 0019 3F AA 03                		rtsd	#12, r10-r10
 7811                             	.LFE77:
 7813                             		.section	.text.wc_InitSha512_256,"ax",@progbits
 7814                             		.global	_wc_InitSha512_256
 7816                             	_wc_InitSha512_256:
 7817                             	.LFB78:
1641:../src/wolfcrypt/src/sha512.c **** #endif
1642:../src/wolfcrypt/src/sha512.c **** 
1643:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_HASH_FLAGS
1644:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_224SetFlags(wc_Sha512* sha, word32 flags)
1645:../src/wolfcrypt/src/sha512.c **** {
1646:../src/wolfcrypt/src/sha512.c ****     return wc_Sha512SetFlags(sha, flags);
1647:../src/wolfcrypt/src/sha512.c **** }
1648:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_224GetFlags(wc_Sha512* sha, word32* flags)
1649:../src/wolfcrypt/src/sha512.c **** {
1650:../src/wolfcrypt/src/sha512.c ****     return wc_Sha512GetFlags(sha, flags);
1651:../src/wolfcrypt/src/sha512.c **** }
1652:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_HASH_FLAGS */
1653:../src/wolfcrypt/src/sha512.c **** 
1654:../src/wolfcrypt/src/sha512.c **** #if defined(OPENSSL_EXTRA)
1655:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_224Transform(wc_Sha512* sha, const unsigned char* data)
1656:../src/wolfcrypt/src/sha512.c **** {
1657:../src/wolfcrypt/src/sha512.c ****     return wc_Sha512Transform(sha, data);
1658:../src/wolfcrypt/src/sha512.c **** }
1659:../src/wolfcrypt/src/sha512.c **** #endif /* OPENSSL_EXTRA */
1660:../src/wolfcrypt/src/sha512.c **** 
1661:../src/wolfcrypt/src/sha512.c **** #endif /* !WOLFSSL_NOSHA512_224 */
1662:../src/wolfcrypt/src/sha512.c **** 
1663:../src/wolfcrypt/src/sha512.c **** #if !defined(WOLFSSL_NOSHA512_256)
1664:../src/wolfcrypt/src/sha512.c **** int wc_InitSha512_256(wc_Sha512* sha)
1665:../src/wolfcrypt/src/sha512.c **** {
 7818                             		.loc 2 1665 1
 7819 0000 7E AA                   		push.l	r10
 7820                             	.LCFI84:
 7821 0002 71 0A FC                		add	#-4, r0, r10
 7822                             	.LCFI85:
 7823 0005 EF A0                   		mov.L	r10, r0
 7824 0007 E3 A1                   		mov.L	r1, [r10]
1666:../src/wolfcrypt/src/sha512.c ****     return wc_InitSha512_256_ex(sha, NULL, INVALID_DEVID);
 7825                             		.loc 2 1666 12
 7826 0009 FB 36 FE                		mov.L	#-2, r3
 7827 000c 66 02                   		mov.L	#0, r2
 7828 000e EC A1                   		mov.L	[r10], r1
 7829 0010 05 00 00 00             		bsr	_wc_InitSha512_256_ex
 7830 0014 EF 15                   		mov.L	r1, r5
1667:../src/wolfcrypt/src/sha512.c **** }
 7831                             		.loc 2 1667 1
 7832 0016 EF 51                   		mov.L	r5, r1
 7833 0018 3F AA 02                		rtsd	#8, r10-r10
 7834                             	.LFE78:
 7836                             		.section	.text.wc_Sha512_256Update,"ax",@progbits
 7837                             		.global	_wc_Sha512_256Update
 7839                             	_wc_Sha512_256Update:
 7840                             	.LFB79:
1668:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_256Update(wc_Sha512* sha, const byte* data, word32 len)
1669:../src/wolfcrypt/src/sha512.c **** {
 7841                             		.loc 2 1669 1
 7842 0000 7E AA                   		push.l	r10
 7843                             	.LCFI86:
 7844 0002 71 0A F4                		add	#-12, r0, r10
 7845                             	.LCFI87:
 7846 0005 EF A0                   		mov.L	r10, r0
 7847 0007 E3 A1                   		mov.L	r1, [r10]
 7848 0009 E7 A2 01                		mov.L	r2, 4[r10]
 7849 000c E7 A3 02                		mov.L	r3, 8[r10]
1670:../src/wolfcrypt/src/sha512.c ****     return wc_Sha512Update(sha, data, len);
 7850                             		.loc 2 1670 12
 7851 000f ED A3 02                		mov.L	8[r10], r3
 7852 0012 ED A2 01                		mov.L	4[r10], r2
 7853 0015 EC A1                   		mov.L	[r10], r1
 7854 0017 05 00 00 00             		bsr	_wc_Sha512Update
 7855 001b EF 15                   		mov.L	r1, r5
1671:../src/wolfcrypt/src/sha512.c **** }
 7856                             		.loc 2 1671 1
 7857 001d EF 51                   		mov.L	r5, r1
 7858 001f 3F AA 04                		rtsd	#16, r10-r10
 7859                             	.LFE79:
 7861                             		.section	.text.wc_Sha512_256FinalRaw,"ax",@progbits
 7862                             		.global	_wc_Sha512_256FinalRaw
 7864                             	_wc_Sha512_256FinalRaw:
 7865                             	.LFB80:
1672:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_KCAPI_HASH)
1673:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/kcapi/kcapi_hash.c */
1674:../src/wolfcrypt/src/sha512.c **** #elif defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_HASH)
1675:../src/wolfcrypt/src/sha512.c **** 
1676:../src/wolfcrypt/src/sha512.c **** #else
1677:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_256FinalRaw(wc_Sha512* sha, byte* hash)
1678:../src/wolfcrypt/src/sha512.c **** {
 7866                             		.loc 2 1678 1
 7867 0000 7E AA                   		push.l	r10
 7868                             	.LCFI88:
 7869 0002 71 0A F8                		add	#-8, r0, r10
 7870                             	.LCFI89:
 7871 0005 EF A0                   		mov.L	r10, r0
 7872 0007 E3 A1                   		mov.L	r1, [r10]
 7873 0009 E7 A2 01                		mov.L	r2, 4[r10]
1679:../src/wolfcrypt/src/sha512.c ****     return Sha512FinalRaw(sha, hash, WC_SHA512_256_DIGEST_SIZE);
 7874                             		.loc 2 1679 12
 7875 000c 75 43 20                		mov.L	#32, r3
 7876 000f ED A2 01                		mov.L	4[r10], r2
 7877 0012 EC A1                   		mov.L	[r10], r1
 7878 0014 05 00 00 00             		bsr	_Sha512FinalRaw
 7879 0018 EF 15                   		mov.L	r1, r5
1680:../src/wolfcrypt/src/sha512.c **** }
 7880                             		.loc 2 1680 1
 7881 001a EF 51                   		mov.L	r5, r1
 7882 001c 3F AA 03                		rtsd	#12, r10-r10
 7883                             	.LFE80:
 7885                             		.section	.text.wc_Sha512_256Final,"ax",@progbits
 7886                             		.global	_wc_Sha512_256Final
 7888                             	_wc_Sha512_256Final:
 7889                             	.LFB81:
1681:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_256Final(wc_Sha512* sha512, byte* hash)
1682:../src/wolfcrypt/src/sha512.c **** {
 7890                             		.loc 2 1682 1
 7891 0000 7E AA                   		push.l	r10
 7892                             	.LCFI90:
 7893 0002 71 0A F8                		add	#-8, r0, r10
 7894                             	.LCFI91:
 7895 0005 EF A0                   		mov.L	r10, r0
 7896 0007 E3 A1                   		mov.L	r1, [r10]
 7897 0009 E7 A2 01                		mov.L	r2, 4[r10]
1683:../src/wolfcrypt/src/sha512.c ****     return Sha512_Family_Final(sha512, hash, WC_SHA512_256_DIGEST_SIZE,
 7898                             		.loc 2 1683 12
 7899 000c FB 42 00 00 00 00       		mov.L	#_InitSha512_256, r4
 7900 0012 75 43 20                		mov.L	#32, r3
 7901 0015 ED A2 01                		mov.L	4[r10], r2
 7902 0018 EC A1                   		mov.L	[r10], r1
 7903 001a 05 00 00 00             		bsr	_Sha512_Family_Final
 7904 001e EF 15                   		mov.L	r1, r5
1684:../src/wolfcrypt/src/sha512.c ****                                InitSha512_256);
1685:../src/wolfcrypt/src/sha512.c **** }
 7905                             		.loc 2 1685 1
 7906 0020 EF 51                   		mov.L	r5, r1
 7907 0022 3F AA 03                		rtsd	#12, r10-r10
 7908                             	.LFE81:
 7910                             		.section	.text.wc_Sha512_256Free,"ax",@progbits
 7911                             		.global	_wc_Sha512_256Free
 7913                             	_wc_Sha512_256Free:
 7914                             	.LFB82:
1686:../src/wolfcrypt/src/sha512.c **** #endif
1687:../src/wolfcrypt/src/sha512.c **** void wc_Sha512_256Free(wc_Sha512* sha)
1688:../src/wolfcrypt/src/sha512.c **** {
 7915                             		.loc 2 1688 1
 7916 0000 7E AA                   		push.l	r10
 7917                             	.LCFI92:
 7918 0002 71 0A FC                		add	#-4, r0, r10
 7919                             	.LCFI93:
 7920 0005 EF A0                   		mov.L	r10, r0
 7921 0007 E3 A1                   		mov.L	r1, [r10]
1689:../src/wolfcrypt/src/sha512.c ****     wc_Sha512Free(sha);
 7922                             		.loc 2 1689 5
 7923 0009 EC A1                   		mov.L	[r10], r1
 7924 000b 05 00 00 00             		bsr	_wc_Sha512Free
1690:../src/wolfcrypt/src/sha512.c **** }
 7925                             		.loc 2 1690 1
 7926 000f 03                      		nop
 7927 0010 3F AA 02                		rtsd	#8, r10-r10
 7928                             	.LFE82:
 7930                             		.section	.text.wc_Sha512_256GetHash,"ax",@progbits
 7931                             		.global	_wc_Sha512_256GetHash
 7933                             	_wc_Sha512_256GetHash:
 7934                             	.LFB83:
1691:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_KCAPI_HASH)
1692:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/kcapi/kcapi_hash.c */
1693:../src/wolfcrypt/src/sha512.c **** 
1694:../src/wolfcrypt/src/sha512.c **** #else
1695:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_256GetHash(wc_Sha512* sha512, byte* hash)
1696:../src/wolfcrypt/src/sha512.c **** {
 7935                             		.loc 2 1696 1
 7936 0000 7E AA                   		push.l	r10
 7937                             	.LCFI94:
 7938 0002 71 0A F8                		add	#-8, r0, r10
 7939                             	.LCFI95:
 7940 0005 EF A0                   		mov.L	r10, r0
 7941 0007 E3 A1                   		mov.L	r1, [r10]
 7942 0009 E7 A2 01                		mov.L	r2, 4[r10]
1697:../src/wolfcrypt/src/sha512.c ****     return Sha512_Family_GetHash(sha512, hash, wc_Sha512_256Final);
 7943                             		.loc 2 1697 12
 7944 000c FB 32 00 00 00 00       		mov.L	#_wc_Sha512_256Final, r3
 7945 0012 ED A2 01                		mov.L	4[r10], r2
 7946 0015 EC A1                   		mov.L	[r10], r1
 7947 0017 05 00 00 00             		bsr	_Sha512_Family_GetHash
 7948 001b EF 15                   		mov.L	r1, r5
1698:../src/wolfcrypt/src/sha512.c **** }
 7949                             		.loc 2 1698 1
 7950 001d EF 51                   		mov.L	r5, r1
 7951 001f 3F AA 03                		rtsd	#12, r10-r10
 7952                             	.LFE83:
 7954                             		.section	.text.wc_Sha512_256Copy,"ax",@progbits
 7955                             		.global	_wc_Sha512_256Copy
 7957                             	_wc_Sha512_256Copy:
 7958                             	.LFB84:
1699:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_256Copy(wc_Sha512* src, wc_Sha512* dst)
1700:../src/wolfcrypt/src/sha512.c **** {
 7959                             		.loc 2 1700 1
 7960 0000 7E AA                   		push.l	r10
 7961                             	.LCFI96:
 7962 0002 71 0A F8                		add	#-8, r0, r10
 7963                             	.LCFI97:
 7964 0005 EF A0                   		mov.L	r10, r0
 7965 0007 E3 A1                   		mov.L	r1, [r10]
 7966 0009 E7 A2 01                		mov.L	r2, 4[r10]
1701:../src/wolfcrypt/src/sha512.c ****     return wc_Sha512Copy(src, dst);
 7967                             		.loc 2 1701 12
 7968 000c ED A2 01                		mov.L	4[r10], r2
 7969 000f EC A1                   		mov.L	[r10], r1
 7970 0011 05 00 00 00             		bsr	_wc_Sha512Copy
 7971 0015 EF 15                   		mov.L	r1, r5
1702:../src/wolfcrypt/src/sha512.c **** }
 7972                             		.loc 2 1702 1
 7973 0017 EF 51                   		mov.L	r5, r1
 7974 0019 3F AA 03                		rtsd	#12, r10-r10
 7975                             	.LFE84:
 7977                             		.section	.text.wc_Sha384GetHash,"ax",@progbits
 7978                             		.global	_wc_Sha384GetHash
 7980                             	_wc_Sha384GetHash:
 7981                             	.LFB85:
1703:../src/wolfcrypt/src/sha512.c **** #endif
1704:../src/wolfcrypt/src/sha512.c **** 
1705:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_HASH_FLAGS
1706:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_256SetFlags(wc_Sha512* sha, word32 flags)
1707:../src/wolfcrypt/src/sha512.c **** {
1708:../src/wolfcrypt/src/sha512.c ****     return wc_Sha512SetFlags(sha, flags);
1709:../src/wolfcrypt/src/sha512.c **** }
1710:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_256GetFlags(wc_Sha512* sha, word32* flags)
1711:../src/wolfcrypt/src/sha512.c **** {
1712:../src/wolfcrypt/src/sha512.c ****     return wc_Sha512GetFlags(sha, flags);
1713:../src/wolfcrypt/src/sha512.c **** }
1714:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_HASH_FLAGS */
1715:../src/wolfcrypt/src/sha512.c **** 
1716:../src/wolfcrypt/src/sha512.c **** #if defined(OPENSSL_EXTRA)
1717:../src/wolfcrypt/src/sha512.c **** int wc_Sha512_256Transform(wc_Sha512* sha, const unsigned char* data)
1718:../src/wolfcrypt/src/sha512.c **** {
1719:../src/wolfcrypt/src/sha512.c ****     return wc_Sha512Transform(sha, data);
1720:../src/wolfcrypt/src/sha512.c **** }
1721:../src/wolfcrypt/src/sha512.c **** #endif /* OPENSSL_EXTRA */
1722:../src/wolfcrypt/src/sha512.c **** 
1723:../src/wolfcrypt/src/sha512.c **** #endif /* !WOLFSSL_NOSHA512_224 */
1724:../src/wolfcrypt/src/sha512.c **** #endif /* !HAVE_FIPS && !HAVE_SELFTEST */
1725:../src/wolfcrypt/src/sha512.c **** 
1726:../src/wolfcrypt/src/sha512.c **** #endif /* WOLFSSL_SHA512 */
1727:../src/wolfcrypt/src/sha512.c **** 
1728:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SHA384
1729:../src/wolfcrypt/src/sha512.c **** 
1730:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_KCAPI_HASH)
1731:../src/wolfcrypt/src/sha512.c ****     /* functions defined in wolfcrypt/src/port/kcapi/kcapi_hash.c */
1732:../src/wolfcrypt/src/sha512.c **** 
1733:../src/wolfcrypt/src/sha512.c **** #else
1734:../src/wolfcrypt/src/sha512.c **** 
1735:../src/wolfcrypt/src/sha512.c **** int wc_Sha384GetHash(wc_Sha384* sha384, byte* hash)
1736:../src/wolfcrypt/src/sha512.c **** {
 7982                             		.loc 2 1736 1
 7983 0000 7E AA                   		push.l	r10
 7984                             	.LCFI98:
 7985 0002 72 0A 1C FF             		add	#-228, r0, r10
 7986                             	.LCFI99:
 7987 0006 EF A0                   		mov.L	r10, r0
 7988 0008 E7 A1 37                		mov.L	r1, 220[r10]
 7989 000b E7 A2 38                		mov.L	r2, 224[r10]
1737:../src/wolfcrypt/src/sha512.c ****     int ret;
1738:../src/wolfcrypt/src/sha512.c ****     wc_Sha384 tmpSha384;
1739:../src/wolfcrypt/src/sha512.c **** 
1740:../src/wolfcrypt/src/sha512.c ****     if (sha384 == NULL || hash == NULL)
 7990                             		.loc 2 1740 8
 7991 000e ED A5 37                		mov.L	220[r10], r5
 7992 0011 61 05                   		cmp	#0, r5
 7993 0013 17                      		beq	.L188
 7994                             		.loc 2 1740 24 discriminator 1
 7995 0014 ED A5 38                		mov.L	224[r10], r5
 7996 0017 61 05                   		cmp	#0, r5
 7997 0019 1F                      		bne	.L189
 7998                             	.L188:
1741:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 7999                             		.loc 2 1741 16
 8000 001a FB 5A 53 FF             		mov.L	#-173, r5
 8001 001e 2E 2F                   		bra	.L192
 8002                             	.L189:
1742:../src/wolfcrypt/src/sha512.c **** #if  defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
1743:../src/wolfcrypt/src/sha512.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
1744:../src/wolfcrypt/src/sha512.c ****     if(sha384->ctx.mode == ESP32_SHA_INIT) {
1745:../src/wolfcrypt/src/sha512.c ****         esp_sha_try_hw_lock(&sha384->ctx);
1746:../src/wolfcrypt/src/sha512.c ****     }
1747:../src/wolfcrypt/src/sha512.c ****     if(sha384->ctx.mode != ESP32_SHA_SW) {
1748:../src/wolfcrypt/src/sha512.c ****         esp_sha512_digest_process(sha384, 0);
1749:../src/wolfcrypt/src/sha512.c ****     }
1750:../src/wolfcrypt/src/sha512.c **** #endif
1751:../src/wolfcrypt/src/sha512.c ****     ret = wc_Sha384Copy(sha384, &tmpSha384);
 8003                             		.loc 2 1751 11
 8004 0020 71 A5 04                		add	#4, r10, r5
 8005 0023 EF 52                   		mov.L	r5, r2
 8006 0025 ED A1 37                		mov.L	220[r10], r1
 8007 0028 05 00 00 00             		bsr	_wc_Sha384Copy
 8008 002c E3 A1                   		mov.L	r1, [r10]
1752:../src/wolfcrypt/src/sha512.c ****     if (ret == 0) {
 8009                             		.loc 2 1752 8
 8010 002e EC A5                   		mov.L	[r10], r5
 8011 0030 61 05                   		cmp	#0, r5
 8012 0032 21 19                   		bne	.L191
1753:../src/wolfcrypt/src/sha512.c ****         ret = wc_Sha384Final(&tmpSha384, hash);
 8013                             		.loc 2 1753 15
 8014 0034 71 A5 04                		add	#4, r10, r5
 8015 0037 ED A2 38                		mov.L	224[r10], r2
 8016 003a EF 51                   		mov.L	r5, r1
 8017 003c 05 00 00 00             		bsr	_wc_Sha384Final
 8018 0040 E3 A1                   		mov.L	r1, [r10]
1754:../src/wolfcrypt/src/sha512.c **** #if  defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
1755:../src/wolfcrypt/src/sha512.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
1756:../src/wolfcrypt/src/sha512.c ****         sha384->ctx.mode = ESP32_SHA_SW;
1757:../src/wolfcrypt/src/sha512.c **** #endif
1758:../src/wolfcrypt/src/sha512.c ****         wc_Sha384Free(&tmpSha384);
 8019                             		.loc 2 1758 9
 8020 0042 71 A5 04                		add	#4, r10, r5
 8021 0045 EF 51                   		mov.L	r5, r1
 8022 0047 05 00 00 00             		bsr	_wc_Sha384Free
 8023                             	.L191:
1759:../src/wolfcrypt/src/sha512.c ****     }
1760:../src/wolfcrypt/src/sha512.c ****     return ret;
 8024                             		.loc 2 1760 12
 8025 004b EC A5                   		mov.L	[r10], r5
 8026                             	.L192:
1761:../src/wolfcrypt/src/sha512.c **** }
 8027                             		.loc 2 1761 1 discriminator 1
 8028 004d EF 51                   		mov.L	r5, r1
 8029 004f 3F AA 3A                		rtsd	#232, r10-r10
 8030                             	.LFE85:
 8032                             		.section	.text.wc_Sha384Copy,"ax",@progbits
 8033                             		.global	_wc_Sha384Copy
 8035                             	_wc_Sha384Copy:
 8036                             	.LFB86:
1762:../src/wolfcrypt/src/sha512.c **** int wc_Sha384Copy(wc_Sha384* src, wc_Sha384* dst)
1763:../src/wolfcrypt/src/sha512.c **** {
 8037                             		.loc 2 1763 1
 8038 0000 7E AA                   		push.l	r10
 8039                             	.LCFI100:
 8040 0002 71 0A F4                		add	#-12, r0, r10
 8041                             	.LCFI101:
 8042 0005 EF A0                   		mov.L	r10, r0
 8043 0007 E7 A1 01                		mov.L	r1, 4[r10]
 8044 000a E7 A2 02                		mov.L	r2, 8[r10]
1764:../src/wolfcrypt/src/sha512.c ****     int ret = 0;
 8045                             		.loc 2 1764 9
 8046 000d F8 A6 00                		mov.L	#0, [r10]
1765:../src/wolfcrypt/src/sha512.c **** 
1766:../src/wolfcrypt/src/sha512.c ****     if (src == NULL || dst == NULL)
 8047                             		.loc 2 1766 8
 8048 0010 ED A5 01                		mov.L	4[r10], r5
 8049 0013 61 05                   		cmp	#0, r5
 8050 0015 17                      		beq	.L194
 8051                             		.loc 2 1766 21 discriminator 1
 8052 0016 ED A5 02                		mov.L	8[r10], r5
 8053 0019 61 05                   		cmp	#0, r5
 8054 001b 1F                      		bne	.L195
 8055                             	.L194:
1767:../src/wolfcrypt/src/sha512.c ****         return BAD_FUNC_ARG;
 8056                             		.loc 2 1767 16
 8057 001c FB 5A 53 FF             		mov.L	#-173, r5
 8058 0020 2E 11                   		bra	.L196
 8059                             	.L195:
1768:../src/wolfcrypt/src/sha512.c **** 
1769:../src/wolfcrypt/src/sha512.c ****     XMEMCPY(dst, src, sizeof(wc_Sha384));
 8060                             		.loc 2 1769 5
 8061 0022 75 43 D8                		mov.L	#0xd8, r3
 8062 0025 ED A2 01                		mov.L	4[r10], r2
 8063 0028 ED A1 02                		mov.L	8[r10], r1
 8064 002b 05 00 00 00             		bsr	_memcpy
1770:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SMALL_STACK_CACHE
1771:../src/wolfcrypt/src/sha512.c ****     dst->W = NULL;
1772:../src/wolfcrypt/src/sha512.c **** #endif
1773:../src/wolfcrypt/src/sha512.c **** 
1774:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_SILABS_SHA384
1775:../src/wolfcrypt/src/sha512.c ****     dst->silabsCtx.hash_ctx.cmd_ctx = &(dst->silabsCtx.cmd_ctx);
1776:../src/wolfcrypt/src/sha512.c ****     dst->silabsCtx.hash_ctx.hash_type_ctx = &(dst->silabsCtx.hash_type_ctx);
1777:../src/wolfcrypt/src/sha512.c **** #endif
1778:../src/wolfcrypt/src/sha512.c **** 
1779:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_SHA384)
1780:../src/wolfcrypt/src/sha512.c ****     ret = wolfAsync_DevCopy(&src->asyncDev, &dst->asyncDev);
1781:../src/wolfcrypt/src/sha512.c **** #endif
1782:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
1783:../src/wolfcrypt/src/sha512.c ****    !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_HASH)
1784:../src/wolfcrypt/src/sha512.c ****     dst->ctx.mode = src->ctx.mode;
1785:../src/wolfcrypt/src/sha512.c ****     dst->ctx.isfirstblock = src->ctx.isfirstblock;
1786:../src/wolfcrypt/src/sha512.c ****     dst->ctx.sha_type = src->ctx.sha_type;
1787:../src/wolfcrypt/src/sha512.c **** #endif
1788:../src/wolfcrypt/src/sha512.c **** #ifdef WOLFSSL_HASH_FLAGS
1789:../src/wolfcrypt/src/sha512.c ****      dst->flags |= WC_HASH_FLAG_ISCOPY;
1790:../src/wolfcrypt/src/sha512.c **** #endif
1791:../src/wolfcrypt/src/sha512.c **** #if defined(WOLFSSL_HASH_KEEP)
1792:../src/wolfcrypt/src/sha512.c ****     if (src->msg != NULL) {
1793:../src/wolfcrypt/src/sha512.c ****         dst->msg = (byte*)XMALLOC(src->len, dst->heap, DYNAMIC_TYPE_TMP_BUFFER);
1794:../src/wolfcrypt/src/sha512.c ****         if (dst->msg == NULL)
1795:../src/wolfcrypt/src/sha512.c ****             return MEMORY_E;
1796:../src/wolfcrypt/src/sha512.c ****         XMEMCPY(dst->msg, src->msg, src->len);
1797:../src/wolfcrypt/src/sha512.c ****     }
1798:../src/wolfcrypt/src/sha512.c **** #endif
1799:../src/wolfcrypt/src/sha512.c **** 
1800:../src/wolfcrypt/src/sha512.c ****     return ret;
 8065                             		.loc 2 1800 12
 8066 002f EC A5                   		mov.L	[r10], r5
 8067                             	.L196:
1801:../src/wolfcrypt/src/sha512.c **** }
 8068                             		.loc 2 1801 1
 8069 0031 EF 51                   		mov.L	r5, r1
 8070 0033 3F AA 04                		rtsd	#16, r10-r10
 8071                             	.LFE86:
 9142                             	.Letext0:
 9143                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 9144                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 9145                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 9146                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 9147                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 9148                             		.file 8 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 9149                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 9150                             		.file 10 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\incl
 9151                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha512.h"
 9152                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
 9153                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/md5.h"
 9154                             		.file 14 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha.h"
 9155                             		.file 15 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha256.h"
 9156                             		.file 16 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/md4.h"
