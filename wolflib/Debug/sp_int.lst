   1                             		.file	"sp_int.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.ForceZero,"ax",@progbits
   6                             	_ForceZero:
   7                             	.LFB13:
   8                             		.file 1 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfcrypt/src/misc.c"
   1:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* misc.c
   2:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   3:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   5:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * This file is part of wolfSSL.
   6:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   7:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * it under the terms of the GNU General Public License as published by
   9:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * (at your option) any later version.
  11:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  12:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * GNU General Public License for more details.
  16:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  17:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * You should have received a copy of the GNU General Public License
  18:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * along with this program; if not, write to the Free Software
  19:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  21:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /*
  22:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  23:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** DESCRIPTION
  24:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** This module implements the arithmetic-shift right, left, byte swapping, XOR,
  25:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** masking and clearing memory logic.
  26:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  27:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** */
  28:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef HAVE_CONFIG_H
  29:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <config.h>
  30:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  31:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  32:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/settings.h>
  33:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  34:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLF_CRYPT_MISC_C
  35:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #define WOLF_CRYPT_MISC_C
  36:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  37:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/misc.h>
  38:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  39:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* inlining these functions is a huge speed increase and a small size decrease,
  40:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    because the functions are smaller than function call setup/cleanup, e.g.,
  41:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    md5 benchmark is twice as fast with inline.  If you don't want it, then
  42:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    define NO_INLINE and compile this file into wolfssl, otherwise it's used as
  43:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    a source header
  44:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  45:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  46:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef NO_INLINE
  47:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC
  48:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  49:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC static
  50:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  51:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  52:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* Check for if compiling misc.c when not needed. */
  53:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if !defined(WOLFSSL_MISC_INCLUDED) && !defined(NO_INLINE)
  54:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_IGNORE_FILE_WARN
  55:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #warning misc.c does not need to be compiled when using inline (NO_INLINE not defined)
  56:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
  57:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  58:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  59:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  60:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  61:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__ICCARM__)
  62:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <intrinsics.h>
  63:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  64:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  65:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  66:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef INTEL_INTRINSICS
  67:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  68:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <stdlib.h>      /* get intrinsic definitions */
  69:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  70:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* for non visual studio probably need no long version, 32 bit only
  71:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****      * i.e., _rotl and _rotr */
  72:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #pragma intrinsic(_lrotl, _lrotr)
  73:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  74:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  75:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  76:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotl(x, y) : x;
  77:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  78:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  79:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
  80:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  81:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotr(x, y) : x;
  82:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  83:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  84:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
  85:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  86:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <builtin.h>      /* get intrinsic definitions */
  87:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  88:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if !defined(NO_INLINE)
  89:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  90:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotlFixed(x, y) _builtin_rotl(x, y)
  91:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  92:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotrFixed(x, y) _builtin_rotr(x, y)
  93:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  94:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #else /* create real function */
  95:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  96:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  97:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  98:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotl(x, y);
  99:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 100:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 101:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 102:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 103:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotr(x, y);
 104:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 105:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 106:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 107:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 108:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else /* generic */
 109:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value. */
 110:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 111:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
 112:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 113:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x << y) | (x >> (sizeof(y) * 8 - y));
 114:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 115:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 116:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value. */
 117:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 118:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 119:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x >> y) | (x << (sizeof(y) * 8 - y));
 120:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 121:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 122:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 123:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 124:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef WC_RC2
 125:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 126:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value */
 127:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotlFixed16(word16 x, word16 y)
 128:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 129:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 130:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 131:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 132:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 133:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value */
 134:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotrFixed16(word16 x, word16 y)
 135:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 136:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 137:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 138:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 139:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WC_RC2 */
 140:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 141:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of 32-bit word value. */
 142:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__CCRX__) && !defined(NO_INLINE) /* shortest version for CC-RX */
 143:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define ByteReverseWord32(value) _builtin_revl(value)
 144:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 145:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
 146:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 147:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef PPC_INTRINSICS
 148:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* PPC: load reverse indexed instruction */
 149:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__lwbrx(&value,0);
 150:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__ICCARM__)
 151:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__REV(value);
 152:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(KEIL_INTRINSICS)
 153:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__rev(value);
 154:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
 155:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)_builtin_revl(value);
 156:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLF_ALLOW_BUILTIN) && \
 157:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 158:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__builtin_bswap32(value);
 159:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 160:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       defined(__aarch64__)
 161:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 162:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV32 %0, %0  \n"
 163:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 164:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 165:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 166:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 167:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 168:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       (defined(__thumb__) || defined(__arm__))
 169:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 170:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV %0, %0  \n"
 171:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 172:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 173:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 174:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 175:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(FAST_ROTATE)
 176:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 5 instructions with rotate instruction, 9 without */
 177:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (rotrFixed(value, 8U) & 0xff00ff00) |
 178:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****            (rotlFixed(value, 8U) & 0x00ff00ff);
 179:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 180:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 6 instructions with rotate instruction, 8 without */
 181:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 182:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed(value, 16U);
 183:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 184:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 185:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* __CCRX__ */
 186:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of words array of a given count. */
 187:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
 188:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                     word32 byteCount)
 189:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 190:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word32), i;
 191:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 193:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
 194:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 195:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 196:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 197:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WORD64_AVAILABLE) && !defined(WOLFSSL_NO_WORD64_OPS)
 198:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 199:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 200:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotlFixed64(word64 x, word64 y)
 201:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 202:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 203:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 204:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 205:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 206:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotrFixed64(word64 x, word64 y)
 207:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 208:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 209:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 210:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 211:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 212:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 ByteReverseWord64(word64 value)
 213:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 214:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WOLF_ALLOW_BUILTIN) && defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 215:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)__builtin_bswap64(value);
 216:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFCRYPT_SLOW_WORD64)
 217:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)((word64)ByteReverseWord32((word32) value)) << 32 |
 218:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         (word64)ByteReverseWord32((word32)(value   >> 32));
 219:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 220:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFF00FF00FF00FF00)) >> 8) |
 221:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x00FF00FF00FF00FF)) << 8);
 222:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFFFF0000FFFF0000)) >> 16) |
 223:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x0000FFFF0000FFFF)) << 16);
 224:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed64(value, 32U);
 225:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 226:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 227:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 228:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 229:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords64(word64* out, const word64* in,
 230:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                       word32 byteCount)
 231:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 232:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word64), i;
 233:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 235:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 236:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 237:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 238:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 239:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WORD64_AVAILABLE && !WOLFSSL_NO_WORD64_OPS */
 240:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 241:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_XOR_OPS
 242:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 243:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 244:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWordsOut(wolfssl_word* r, const wolfssl_word* a,
 245:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                      const wolfssl_word* b, word32 n)
 246:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 247:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 248:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 249:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] = a[i] ^ b[i];
 250:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 251:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 252:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 253:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 254:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 255:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbufout(void*out, const void* buf, const void* mask,
 256:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                    word32 count)
 257:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 258:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)out | (wc_ptr_t)buf | (wc_ptr_t)mask | count) %
 259:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                          WOLFSSL_WORD_SIZE == 0)
 260:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWordsOut( (wolfssl_word*)out, (wolfssl_word*)buf,
 261:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                      (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 262:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 263:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 264:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       o = (byte*)out;
 265:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 266:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 267:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) o[i] = b[i] ^ m[i];
 269:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 270:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 271:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 272:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 273:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 274:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWords(wolfssl_word* r, const wolfssl_word* a, word32 n)
 275:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 276:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 277:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 278:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] ^= a[i];
 279:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 280:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 281:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 282:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 283:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 284:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
 285:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 286:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)buf | (wc_ptr_t)mask | count) % WOLFSSL_WORD_SIZE == 0)
 287:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWords( (wolfssl_word*)buf,
 288:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                   (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 289:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 290:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 291:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 292:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 293:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) b[i] ^= m[i];
 295:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 296:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 297:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 298:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 299:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_FORCE_ZERO
 300:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine fills the first len bytes of the memory area pointed by mem
 301:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    with zeros. It ensures compiler optimizations doesn't skip it  */
 302:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
 303:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
   9                             		.loc 1 303 1
  10 0000 7E AA                   		push.l	r10
  11                             	.LCFI0:
  12 0002 71 0A F4                		add	#-12, r0, r10
  13                             	.LCFI1:
  14 0005 EF A0                   		mov.L	r10, r0
  15 0007 E7 A1 01                		mov.L	r1, 4[r10]
  16 000a E7 A2 02                		mov.L	r2, 8[r10]
 304:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile byte* z = (volatile byte*)mem;
  17                             		.loc 1 304 20
  18 000d ED A5 01                		mov.L	4[r10], r5
  19 0010 E3 A5                   		mov.L	r5, [r10]
 305:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 306:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if (defined(WOLFSSL_X86_64_BUILD) || defined(WOLFSSL_AARCH64_BUILD)) \
 307:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****             && defined(WORD64_AVAILABLE)
 308:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile word64* w;
 309:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_UNALIGNED_64BIT_ACCESS
 310:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 l = (sizeof(word64) - ((size_t)z & (sizeof(word64)-1))) &
 311:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                              (sizeof(word64)-1);
 312:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 313:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         if (len < l) l = len;
 314:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         len -= l;
 315:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         while (l--) *z++ = 0;
 316:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 317:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
 318:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         *w++ = 0;
 319:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     z = (volatile byte*)w;
 320:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 321:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 322:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     while (len--) *z++ = 0;
  20                             		.loc 1 322 11
  21 0012 2E 0C                   		bra	.L2
  22                             	.L3:
  23                             		.loc 1 322 21 discriminator 2
  24 0014 EC A5                   		mov.L	[r10], r5
  25 0016 71 54 01                		add	#1, r5, r4
  26 0019 E3 A4                   		mov.L	r4, [r10]
  27                             		.loc 1 322 24 discriminator 2
  28 001b F8 54 00                		mov.B	#0, [r5]
  29                             	.L2:
  30                             		.loc 1 322 15 discriminator 1
  31 001e ED A5 02                		mov.L	8[r10], r5
  32 0021 71 54 FF                		add	#-1, r5, r4
  33 0024 E7 A4 02                		mov.L	r4, 8[r10]
  34                             		.loc 1 322 11 discriminator 1
  35 0027 61 05                   		cmp	#0, r5
  36 0029 21 EB                   		bne	.L3
 323:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
  37                             		.loc 1 323 1
  38 002b 03                      		nop
  39 002c 3F AA 04                		rtsd	#16, r10-r10
  40                             	.LFE13:
  42                             		.section	.text.HexCharToByte,"ax",@progbits
  44                             	_HexCharToByte:
  45                             	.LFB25:
 324:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 325:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 326:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 327:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_CONST_CMP
 328:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* check all length bytes for equality, return 0 on success */
 329:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE int ConstantCompare(const byte* a, const byte* b, int length)
 330:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 331:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     int i;
 332:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     int compareSum = 0;
 333:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 334:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < length; i++) {
 335:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         compareSum |= a[i] ^ b[i];
 336:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 337:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 338:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return compareSum;
 339:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 340:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 341:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 342:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 343:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_HAVE_MIN
 344:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WOLFSSL_HAVE_MIN
 345:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if defined(HAVE_FIPS) && !defined(min) /* so ifdef check passes */
 346:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #define min min
 347:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 348:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* returns the smaller of a and b */
 349:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 min(word32 a, word32 b)
 350:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 351:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return a > b ? b : a;
 352:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 353:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* !WOLFSSL_HAVE_MIN */
 354:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 355:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_HAVE_MAX
 356:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WOLFSSL_HAVE_MAX
 357:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if defined(HAVE_FIPS) && !defined(max) /* so ifdef check passes */
 358:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #define max max
 359:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 360:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 max(word32 a, word32 b)
 361:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 362:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return a > b ? a : b;
 363:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 364:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* !WOLFSSL_HAVE_MAX */
 365:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 366:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_INT_ENCODE
 367:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* converts a 32 bit integer to 24 bit */
 368:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void c32to24(word32 in, word24 out)
 369:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 370:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     out[0] = (in >> 16) & 0xff;
 371:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     out[1] = (in >>  8) & 0xff;
 372:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     out[2] =  in & 0xff;
 373:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 374:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 375:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* convert 16 bit integer to opaque */
 376:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void c16toa(word16 wc_u16, byte* c)
 377:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 378:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     c[0] = (wc_u16 >> 8) & 0xff;
 379:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     c[1] =  wc_u16 & 0xff;
 380:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 381:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 382:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* convert 32 bit integer to opaque */
 383:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void c32toa(word32 wc_u32, byte* c)
 384:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 385:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     c[0] = (wc_u32 >> 24) & 0xff;
 386:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     c[1] = (wc_u32 >> 16) & 0xff;
 387:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     c[2] = (wc_u32 >>  8) & 0xff;
 388:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     c[3] =  wc_u32 & 0xff;
 389:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 390:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 391:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 392:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_INT_DECODE
 393:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* convert a 24 bit integer into a 32 bit one */
 394:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void c24to32(const word24 wc_u24, word32* wc_u32)
 395:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 396:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     *wc_u32 = ((word32)wc_u24[0] << 16) | (wc_u24[1] << 8) | wc_u24[2];
 397:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 398:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 399:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 400:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* convert opaque to 24 bit integer */
 401:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ato24(const byte* c, word32* wc_u24)
 402:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 403:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     *wc_u24 = ((word32)c[0] << 16) | (c[1] << 8) | c[2];
 404:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 405:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 406:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* convert opaque to 16 bit integer */
 407:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ato16(const byte* c, word16* wc_u16)
 408:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 409:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     *wc_u16 = (word16) ((c[0] << 8) | (c[1]));
 410:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 411:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 412:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* convert opaque to 32 bit integer */
 413:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ato32(const byte* c, word32* wc_u32)
 414:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 415:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     *wc_u32 = ((word32)c[0] << 24) | ((word32)c[1] << 16) | (c[2] << 8) | c[3];
 416:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 417:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 418:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 419:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word32 btoi(byte b)
 420:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 421:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)(b - 0x30);
 422:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 423:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 424:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 425:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE signed char HexCharToByte(char ch)
 426:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
  46                             		.loc 1 426 1
  47 0000 7E AA                   		push.l	r10
  48                             	.LCFI2:
  49 0002 71 0A F8                		add	#-8, r0, r10
  50                             	.LCFI3:
  51 0005 EF A0                   		mov.L	r10, r0
  52 0007 C7 A1 04                		mov.B	r1, 4[r10]
 427:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     signed char ret = (signed char)ch;
  53                             		.loc 1 427 17
  54 000a CD A5 04                		mov.B	4[r10], r5
  55 000d C3 A5                   		mov.B	r5, [r10]
 428:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (ret >= '0' && ret <= '9')
  56                             		.loc 1 428 8
  57 000f CC A5                   		mov.B	[r10], r5
  58 0011 75 55 2F                		cmp	#47, r5
  59 0014 2B 12                   		ble	.L5
  60                             		.loc 1 428 20 discriminator 1
  61 0016 CC A5                   		mov.B	[r10], r5
  62 0018 75 55 39                		cmp	#57, r5
  63 001b 2A 0B                   		bgt	.L5
 429:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ret -= '0';
  64                             		.loc 1 429 13
  65 001d CC A5                   		mov.B	[r10], r5
  66 001f 71 55 D0                		add	#-48, r5
  67 0022 C3 A5                   		mov.B	r5, [r10]
  68 0024 2E 32                   		bra	.L6
  69                             	.L5:
 430:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else if (ret >= 'A' && ret <= 'F')
  70                             		.loc 1 430 13
  71 0026 CC A5                   		mov.B	[r10], r5
  72 0028 75 55 40                		cmp	#0x40, r5
  73 002b 2B 12                   		ble	.L7
  74                             		.loc 1 430 25 discriminator 1
  75 002d CC A5                   		mov.B	[r10], r5
  76 002f 75 55 46                		cmp	#0x46, r5
  77 0032 2A 0B                   		bgt	.L7
 431:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ret -= 'A' - 10;
  78                             		.loc 1 431 13
  79 0034 CC A5                   		mov.B	[r10], r5
  80 0036 71 55 C9                		add	#-55, r5
  81 0039 C3 A5                   		mov.B	r5, [r10]
  82 003b 2E 1B                   		bra	.L6
  83                             	.L7:
 432:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else if (ret >= 'a' && ret <= 'f')
  84                             		.loc 1 432 13
  85 003d CC A5                   		mov.B	[r10], r5
  86 003f 75 55 60                		cmp	#0x60, r5
  87 0042 2B 11                   		ble	.L8
  88                             		.loc 1 432 25 discriminator 1
  89 0044 CC A5                   		mov.B	[r10], r5
  90 0046 75 55 66                		cmp	#0x66, r5
  91 0049 2A 0A                   		bgt	.L8
 433:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ret -= 'a' - 10;
  92                             		.loc 1 433 13
  93 004b CC A5                   		mov.B	[r10], r5
  94 004d 71 55 A9                		add	#-87, r5
  95 0050 C3 A5                   		mov.B	r5, [r10]
  96 0052 0C                      		bra	.L6
  97                             	.L8:
 434:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else
 435:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ret = -1; /* error case - return code must be signed */
  98                             		.loc 1 435 13
  99 0053 F8 A4 FF                		mov.B	#-1, [r10]
 100                             		.balign 8,3,1
 101                             	.L6:
 436:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return ret;
 102                             		.loc 1 436 12
 103 0056 CC A5                   		mov.B	[r10], r5
 104 0058 CF 55                   		mov.B	r5, r5
 437:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 105                             		.loc 1 437 1
 106 005a EF 51                   		mov.L	r5, r1
 107 005c 3F AA 03                		rtsd	#12, r10-r10
 108                             	.LFE25:
 110 005f 03                      		.section	.text.ByteToHex,"ax",@progbits
 112                             	_ByteToHex:
 113                             	.LFB26:
 438:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 439:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE char ByteToHex(byte in)
 440:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 114                             		.loc 1 440 1
 115 0000 7E AA                   		push.l	r10
 116                             	.LCFI4:
 117 0002 71 0A FC                		add	#-4, r0, r10
 118                             	.LCFI5:
 119 0005 EF A0                   		mov.L	r10, r0
 120 0007 C3 A1                   		mov.B	r1, [r10]
 441:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     static const char kHexChar[] = { '0', '1', '2', '3', '4', '5', '6', '7',
 442:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                      '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };
 443:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (char)(kHexChar[in & 0xF]);
 121                             		.loc 1 443 31
 122 0009 58 A5                   		movu.B	[r10], r5
 123 000b 64 F5                   		and	#15, r5
 124                             		.loc 1 443 12
 125 000d FB 42 00 00 00 00       		mov.L	#_kHexChar.3118, r4
 126 0013 FE 45 45                		mov.B	[r5,r4], r5
 127 0016 5B 55                   		movu.B	r5, r5
 444:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 128                             		.loc 1 444 1
 129 0018 EF 51                   		mov.L	r5, r1
 130 001a 3F AA 02                		rtsd	#8, r10-r10
 131                             	.LFE26:
 133                             		.global	_sp_off_on_addr
 134                             		.section	.rodata.sp_off_on_addr,"a"
 135                             		.balign 4
 138                             	_sp_off_on_addr:
 139 0000 00 00 00 00             		.long	0
 140 0004 FF FF FF FF             		.long	-1
 141                             		.section	.text._sp_zero,"ax",@progbits
 143                             	__sp_zero:
 144                             	.LFB43:
 145                             		.file 2 "../src/wolfcrypt/src/sp_int.c"
   1:../src/wolfcrypt/src/sp_int.c **** /* sp_int.c
   2:../src/wolfcrypt/src/sp_int.c ****  *
   3:../src/wolfcrypt/src/sp_int.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/sp_int.c ****  *
   5:../src/wolfcrypt/src/sp_int.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/sp_int.c ****  *
   7:../src/wolfcrypt/src/sp_int.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/sp_int.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/sp_int.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/sp_int.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/sp_int.c ****  *
  12:../src/wolfcrypt/src/sp_int.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/sp_int.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/sp_int.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/sp_int.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/sp_int.c ****  *
  17:../src/wolfcrypt/src/sp_int.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/sp_int.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/sp_int.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/sp_int.c ****  */
  21:../src/wolfcrypt/src/sp_int.c **** 
  22:../src/wolfcrypt/src/sp_int.c **** /* Implementation by Sean Parkinson. */
  23:../src/wolfcrypt/src/sp_int.c **** 
  24:../src/wolfcrypt/src/sp_int.c **** /*
  25:../src/wolfcrypt/src/sp_int.c **** DESCRIPTION
  26:../src/wolfcrypt/src/sp_int.c **** This library provides single precision (SP) integer math functions.
  27:../src/wolfcrypt/src/sp_int.c **** 
  28:../src/wolfcrypt/src/sp_int.c **** */
  29:../src/wolfcrypt/src/sp_int.c **** #ifdef HAVE_CONFIG_H
  30:../src/wolfcrypt/src/sp_int.c ****     #include <config.h>
  31:../src/wolfcrypt/src/sp_int.c **** #endif
  32:../src/wolfcrypt/src/sp_int.c **** 
  33:../src/wolfcrypt/src/sp_int.c **** #include <wolfssl/wolfcrypt/settings.h>
  34:../src/wolfcrypt/src/sp_int.c **** 
  35:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH) || defined(WOLFSSL_SP_MATH_ALL)
  36:../src/wolfcrypt/src/sp_int.c **** 
  37:../src/wolfcrypt/src/sp_int.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  38:../src/wolfcrypt/src/sp_int.c **** #ifdef NO_INLINE
  39:../src/wolfcrypt/src/sp_int.c ****     #include <wolfssl/wolfcrypt/misc.h>
  40:../src/wolfcrypt/src/sp_int.c **** #else
  41:../src/wolfcrypt/src/sp_int.c ****     #define WOLFSSL_MISC_INCLUDED
  42:../src/wolfcrypt/src/sp_int.c ****     #include <wolfcrypt/src/misc.c>
  43:../src/wolfcrypt/src/sp_int.c **** #endif
  44:../src/wolfcrypt/src/sp_int.c **** 
  45:../src/wolfcrypt/src/sp_int.c **** /* SP Build Options:
  46:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_HAVE_SP_RSA:         Enable SP RSA support
  47:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_HAVE_SP_DH:          Enable SP DH support
  48:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_HAVE_SP_ECC:         Enable SP ECC support
  49:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_MATH:             Use only single precision math and algorithms
  50:../src/wolfcrypt/src/sp_int.c ****  *      it supports (no fastmath tfm.c or normal integer.c)
  51:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_MATH_ALL          Implementation of all MP functions
  52:../src/wolfcrypt/src/sp_int.c ****  *      (replacement for tfm.c and integer.c)
  53:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_SMALL:            Use smaller version of code and avoid large
  54:../src/wolfcrypt/src/sp_int.c ****  *      stack variables
  55:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_NO_MALLOC:        Always use stack, no heap XMALLOC/XFREE allowed
  56:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_NO_2048:          Disable RSA/DH 2048-bit support
  57:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_NO_3072:          Disable RSA/DH 3072-bit support
  58:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_4096:             Enable RSA/RH 4096-bit support
  59:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_NO_256            Disable ECC 256-bit SECP256R1 support
  60:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_384               Enable ECC 384-bit SECP384R1 support
  61:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_521               Enable ECC 521-bit SECP521R1 support
  62:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_ASM               Enable assembly speedups (detect platform)
  63:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_X86_64_ASM        Enable Intel x64 assembly implementation
  64:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_ARM32_ASM         Enable Aarch32 assembly implementation
  65:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_ARM64_ASM         Enable Aarch64 assembly implementation
  66:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_ARM_CORTEX_M_ASM  Enable Cortex-M assembly implementation
  67:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_ARM_THUMB_ASM     Enable ARM Thumb assembly implementation
  68:../src/wolfcrypt/src/sp_int.c ****  *      (used with -mthumb)
  69:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_X86_64            Enable Intel x86 64-bit assembly speedups
  70:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_X86               Enable Intel x86 assembly speedups
  71:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_ARM64             Enable Aarch64 assembly speedups
  72:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_ARM32             Enable ARM32 assembly speedups
  73:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_ARM32_UDIV        Enable word divide asm that uses UDIV instr
  74:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_ARM_THUMB         Enable ARM Thumb assembly speedups
  75:../src/wolfcrypt/src/sp_int.c ****  *                              (explicitly uses register 'r7')
  76:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_PPC64             Enable PPC64 assembly speedups
  77:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_PPC               Enable PPC assembly speedups
  78:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_MIPS64            Enable MIPS64 assembly speedups
  79:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_MIPS              Enable MIPS assembly speedups
  80:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_RISCV64           Enable RISCV64 assembly speedups
  81:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_RISCV32           Enable RISCV32 assembly speedups
  82:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_S390X             Enable S390X assembly speedups
  83:../src/wolfcrypt/src/sp_int.c ****  * SP_WORD_SIZE                 Force 32 or 64 bit mode
  84:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_NONBLOCK          Enables "non blocking" mode for SP math, which
  85:../src/wolfcrypt/src/sp_int.c ****  *      will return FP_WOULDBLOCK for long operations and function must be
  86:../src/wolfcrypt/src/sp_int.c ****  *      called again until complete.
  87:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_FAST_NCT_EXPTMOD  Enables the faster non-constant time modular
  88:../src/wolfcrypt/src/sp_int.c ****  *      exponentation implementation.
  89:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_INT_NEGATIVE      Enables negative values to be used.
  90:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_INT_DIGIT_ALIGN   Enable when unaligned access of sp_int_digit
  91:../src/wolfcrypt/src/sp_int.c ****  *                              pointer is not allowed.
  92:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_NO_DYN_STACK      Disable use of dynamic stack items.
  93:../src/wolfcrypt/src/sp_int.c ****  *                              Used with small code size and not small stack.
  94:../src/wolfcrypt/src/sp_int.c ****  * WOLFSSL_SP_FAST_MODEXP       Allow fast mod_exp with small C code
  95:../src/wolfcrypt/src/sp_int.c ****  */
  96:../src/wolfcrypt/src/sp_int.c **** 
  97:../src/wolfcrypt/src/sp_int.c **** /* TODO: WOLFSSL_SP_SMALL is incompatible with clang-12+ -Os. */
  98:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) && defined(__clang_major__) && \
  99:../src/wolfcrypt/src/sp_int.c ****     (__clang_major__ >= 12) && defined(WOLFSSL_SP_SMALL)
 100:../src/wolfcrypt/src/sp_int.c ****     #undef WOLFSSL_SP_SMALL
 101:../src/wolfcrypt/src/sp_int.c **** #endif
 102:../src/wolfcrypt/src/sp_int.c **** 
 103:../src/wolfcrypt/src/sp_int.c **** #include <wolfssl/wolfcrypt/sp_int.h>
 104:../src/wolfcrypt/src/sp_int.c **** 
 105:../src/wolfcrypt/src/sp_int.c **** /* DECL_SP_INT: Declare one variable of type 'sp_int'. */
 106:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SMALL_STACK) || defined(SP_ALLOC)) && \
 107:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_SP_NO_MALLOC)
 108:../src/wolfcrypt/src/sp_int.c ****     /* Declare a variable that will be assigned a value on XMALLOC. */
 109:../src/wolfcrypt/src/sp_int.c ****     #define DECL_SP_INT(n, s)   \
 110:../src/wolfcrypt/src/sp_int.c ****         sp_int* n = NULL
 111:../src/wolfcrypt/src/sp_int.c **** #else
 112:../src/wolfcrypt/src/sp_int.c ****     #if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && \
 113:../src/wolfcrypt/src/sp_int.c ****         defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SP_NO_DYN_STACK)
 114:../src/wolfcrypt/src/sp_int.c ****         /* Declare a variable on the stack with the required data size. */
 115:../src/wolfcrypt/src/sp_int.c ****         #define DECL_SP_INT(n, s)               \
 116:../src/wolfcrypt/src/sp_int.c ****             byte    n##d[MP_INT_SIZEOF(s)];     \
 117:../src/wolfcrypt/src/sp_int.c ****             sp_int* n = (sp_int*)n##d
 118:../src/wolfcrypt/src/sp_int.c ****     #else
 119:../src/wolfcrypt/src/sp_int.c ****         /* Declare a variable on the stack. */
 120:../src/wolfcrypt/src/sp_int.c ****         #define DECL_SP_INT(n, s)               \
 121:../src/wolfcrypt/src/sp_int.c ****             sp_int n[1]
 122:../src/wolfcrypt/src/sp_int.c ****     #endif
 123:../src/wolfcrypt/src/sp_int.c **** #endif
 124:../src/wolfcrypt/src/sp_int.c **** 
 125:../src/wolfcrypt/src/sp_int.c **** /* ALLOC_SP_INT: Allocate an 'sp_int' of reqired size. */
 126:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SMALL_STACK) || defined(SP_ALLOC)) && \
 127:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_SP_NO_MALLOC)
 128:../src/wolfcrypt/src/sp_int.c ****     /* Dynamically allocate just enough data to support size. */
 129:../src/wolfcrypt/src/sp_int.c ****     #define ALLOC_SP_INT(n, s, err, h)                                         \
 130:../src/wolfcrypt/src/sp_int.c ****     do {                                                                       \
 131:../src/wolfcrypt/src/sp_int.c ****         if ((err) == MP_OKAY) {                                                \
 132:../src/wolfcrypt/src/sp_int.c ****             (n) = (sp_int*)XMALLOC(MP_INT_SIZEOF(s), (h), DYNAMIC_TYPE_BIGINT); \
 133:../src/wolfcrypt/src/sp_int.c ****             if ((n) == NULL) {                                                 \
 134:../src/wolfcrypt/src/sp_int.c ****                 (err) = MP_MEM;                                                \
 135:../src/wolfcrypt/src/sp_int.c ****             }                                                                  \
 136:../src/wolfcrypt/src/sp_int.c ****         }                                                                      \
 137:../src/wolfcrypt/src/sp_int.c ****     }                                                                          \
 138:../src/wolfcrypt/src/sp_int.c ****     while (0)
 139:../src/wolfcrypt/src/sp_int.c **** 
 140:../src/wolfcrypt/src/sp_int.c ****     /* Dynamically allocate just enough data to support size - and set size. */
 141:../src/wolfcrypt/src/sp_int.c ****     #define ALLOC_SP_INT_SIZE(n, s, err, h)                                    \
 142:../src/wolfcrypt/src/sp_int.c ****     do {                                                                       \
 143:../src/wolfcrypt/src/sp_int.c ****         ALLOC_SP_INT(n, s, err, h);                                            \
 144:../src/wolfcrypt/src/sp_int.c ****         if ((err) == MP_OKAY) {                                                \
 145:../src/wolfcrypt/src/sp_int.c ****             (n)->size = (s);                                                   \
 146:../src/wolfcrypt/src/sp_int.c ****         }                                                                      \
 147:../src/wolfcrypt/src/sp_int.c ****     }                                                                          \
 148:../src/wolfcrypt/src/sp_int.c ****     while (0)
 149:../src/wolfcrypt/src/sp_int.c **** #else
 150:../src/wolfcrypt/src/sp_int.c ****     /* Array declared on stack - nothing to do. */
 151:../src/wolfcrypt/src/sp_int.c ****     #define ALLOC_SP_INT(n, s, err, h)
 152:../src/wolfcrypt/src/sp_int.c ****     /* Array declared on stack - set the size field. */
 153:../src/wolfcrypt/src/sp_int.c ****     #define ALLOC_SP_INT_SIZE(n, s, err, h)     \
 154:../src/wolfcrypt/src/sp_int.c ****         n->size = s;
 155:../src/wolfcrypt/src/sp_int.c **** #endif
 156:../src/wolfcrypt/src/sp_int.c **** 
 157:../src/wolfcrypt/src/sp_int.c **** /* FREE_SP_INT: Free an 'sp_int' variable. */
 158:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SMALL_STACK) || defined(SP_ALLOC)) && \
 159:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_SP_NO_MALLOC)
 160:../src/wolfcrypt/src/sp_int.c ****     /* Free dynamically allocated data. */
 161:../src/wolfcrypt/src/sp_int.c ****     #define FREE_SP_INT(n, h)                   \
 162:../src/wolfcrypt/src/sp_int.c ****     do {                                        \
 163:../src/wolfcrypt/src/sp_int.c ****         if ((n) != NULL) {                      \
 164:../src/wolfcrypt/src/sp_int.c ****             XFREE(n, h, DYNAMIC_TYPE_BIGINT);   \
 165:../src/wolfcrypt/src/sp_int.c ****         }                                       \
 166:../src/wolfcrypt/src/sp_int.c ****     }                                           \
 167:../src/wolfcrypt/src/sp_int.c ****     while (0)
 168:../src/wolfcrypt/src/sp_int.c **** #else
 169:../src/wolfcrypt/src/sp_int.c ****     /* Nothing to do as declared on stack. */
 170:../src/wolfcrypt/src/sp_int.c ****     #define FREE_SP_INT(n, h)
 171:../src/wolfcrypt/src/sp_int.c **** #endif
 172:../src/wolfcrypt/src/sp_int.c **** 
 173:../src/wolfcrypt/src/sp_int.c **** 
 174:../src/wolfcrypt/src/sp_int.c **** /* DECL_SP_INT_ARRAY: Declare array of 'sp_int'. */
 175:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SMALL_STACK) || defined(SP_ALLOC)) && \
 176:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_SP_NO_MALLOC)
 177:../src/wolfcrypt/src/sp_int.c ****     /* Declare a variable that will be assigned a value on XMALLOC. */
 178:../src/wolfcrypt/src/sp_int.c ****     #define DECL_SP_INT_ARRAY(n, s, c)  \
 179:../src/wolfcrypt/src/sp_int.c ****         sp_int* n##d = NULL;            \
 180:../src/wolfcrypt/src/sp_int.c ****         sp_int* (n)[c] = { NULL, }
 181:../src/wolfcrypt/src/sp_int.c **** #else
 182:../src/wolfcrypt/src/sp_int.c ****     #if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && \
 183:../src/wolfcrypt/src/sp_int.c ****         defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SP_NO_DYN_STACK)
 184:../src/wolfcrypt/src/sp_int.c ****         /* Declare a variable on the stack with the required data size. */
 185:../src/wolfcrypt/src/sp_int.c ****         #define DECL_SP_INT_ARRAY(n, s, c)          \
 186:../src/wolfcrypt/src/sp_int.c ****             byte    n##d[MP_INT_SIZEOF(s) * (c)];   \
 187:../src/wolfcrypt/src/sp_int.c ****             sp_int* (n)[c]
 188:../src/wolfcrypt/src/sp_int.c ****     #else
 189:../src/wolfcrypt/src/sp_int.c ****         /* Declare a variable on the stack. */
 190:../src/wolfcrypt/src/sp_int.c ****         #define DECL_SP_INT_ARRAY(n, s, c)      \
 191:../src/wolfcrypt/src/sp_int.c ****             sp_int n##d[c];                     \
 192:../src/wolfcrypt/src/sp_int.c ****             sp_int* (n)[c]
 193:../src/wolfcrypt/src/sp_int.c ****     #endif
 194:../src/wolfcrypt/src/sp_int.c **** #endif
 195:../src/wolfcrypt/src/sp_int.c **** 
 196:../src/wolfcrypt/src/sp_int.c **** /* ALLOC_SP_INT_ARRAY: Allocate an array of 'sp_int's of reqired size. */
 197:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SMALL_STACK) || defined(SP_ALLOC)) && \
 198:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_SP_NO_MALLOC)
 199:../src/wolfcrypt/src/sp_int.c ****     /* Dynamically allocate just enough data to support multiple sp_ints of the
 200:../src/wolfcrypt/src/sp_int.c ****      * required size. Use pointers into data to make up array and set sizes.
 201:../src/wolfcrypt/src/sp_int.c ****      */
 202:../src/wolfcrypt/src/sp_int.c ****     #define ALLOC_SP_INT_ARRAY(n, s, c, err, h)                                \
 203:../src/wolfcrypt/src/sp_int.c ****     do {                                                                       \
 204:../src/wolfcrypt/src/sp_int.c ****         if ((err) == MP_OKAY) {                                                \
 205:../src/wolfcrypt/src/sp_int.c ****             n##d = (sp_int*)XMALLOC(MP_INT_SIZEOF(s) * (c), (h),               \
 206:../src/wolfcrypt/src/sp_int.c ****                                                          DYNAMIC_TYPE_BIGINT); \
 207:../src/wolfcrypt/src/sp_int.c ****             if (n##d == NULL) {                                                \
 208:../src/wolfcrypt/src/sp_int.c ****                 (err) = MP_MEM;                                                \
 209:../src/wolfcrypt/src/sp_int.c ****             }                                                                  \
 210:../src/wolfcrypt/src/sp_int.c ****             else {                                                             \
 211:../src/wolfcrypt/src/sp_int.c ****                 int n##ii;                                                     \
 212:../src/wolfcrypt/src/sp_int.c ****                 (n)[0] = n##d;                                                 \
 213:../src/wolfcrypt/src/sp_int.c ****                 (n)[0]->size = (s);                                            \
 214:../src/wolfcrypt/src/sp_int.c ****                 for (n##ii = 1; n##ii < (c); n##ii++) {                        \
 215:../src/wolfcrypt/src/sp_int.c ****                     (n)[n##ii] = MP_INT_NEXT((n)[n##ii-1], s);                 \
 216:../src/wolfcrypt/src/sp_int.c ****                     (n)[n##ii]->size = (s);                                    \
 217:../src/wolfcrypt/src/sp_int.c ****                 }                                                              \
 218:../src/wolfcrypt/src/sp_int.c ****             }                                                                  \
 219:../src/wolfcrypt/src/sp_int.c ****         }                                                                      \
 220:../src/wolfcrypt/src/sp_int.c ****     }                                                                          \
 221:../src/wolfcrypt/src/sp_int.c ****     while (0)
 222:../src/wolfcrypt/src/sp_int.c **** #else
 223:../src/wolfcrypt/src/sp_int.c ****     #if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && \
 224:../src/wolfcrypt/src/sp_int.c ****         defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SP_NO_DYN_STACK)
 225:../src/wolfcrypt/src/sp_int.c ****         /* Data declared on stack that supports multiple sp_ints of the
 226:../src/wolfcrypt/src/sp_int.c ****          * required size. Use pointers into data to make up array and set sizes.
 227:../src/wolfcrypt/src/sp_int.c ****          */
 228:../src/wolfcrypt/src/sp_int.c ****         #define ALLOC_SP_INT_ARRAY(n, s, c, err, h)                            \
 229:../src/wolfcrypt/src/sp_int.c ****         do {                                                                   \
 230:../src/wolfcrypt/src/sp_int.c ****             if ((err) == MP_OKAY) {                                            \
 231:../src/wolfcrypt/src/sp_int.c ****                 int n##ii;                                                     \
 232:../src/wolfcrypt/src/sp_int.c ****                 (n)[0] = (sp_int*)n##d;                                        \
 233:../src/wolfcrypt/src/sp_int.c ****                 (n)[0]->size = (s);                                            \
 234:../src/wolfcrypt/src/sp_int.c ****                 for (n##ii = 1; n##ii < (c); n##ii++) {                        \
 235:../src/wolfcrypt/src/sp_int.c ****                     (n)[n##ii] = MP_INT_NEXT((n)[n##ii-1], s);                 \
 236:../src/wolfcrypt/src/sp_int.c ****                     (n)[n##ii]->size = (s);                                    \
 237:../src/wolfcrypt/src/sp_int.c ****                 }                                                              \
 238:../src/wolfcrypt/src/sp_int.c ****             }                                                                  \
 239:../src/wolfcrypt/src/sp_int.c ****         }                                                                      \
 240:../src/wolfcrypt/src/sp_int.c ****         while (0)
 241:../src/wolfcrypt/src/sp_int.c ****     #else
 242:../src/wolfcrypt/src/sp_int.c ****         /* Data declared on stack that supports multiple sp_ints of the
 243:../src/wolfcrypt/src/sp_int.c ****          * required size. Set into array and set sizes.
 244:../src/wolfcrypt/src/sp_int.c ****          */
 245:../src/wolfcrypt/src/sp_int.c ****         #define ALLOC_SP_INT_ARRAY(n, s, c, err, h)                            \
 246:../src/wolfcrypt/src/sp_int.c ****         do {                                                                   \
 247:../src/wolfcrypt/src/sp_int.c ****             if ((err) == MP_OKAY) {                                            \
 248:../src/wolfcrypt/src/sp_int.c ****                 int n##ii;                                                     \
 249:../src/wolfcrypt/src/sp_int.c ****                 for (n##ii = 0; n##ii < (c); n##ii++) {                        \
 250:../src/wolfcrypt/src/sp_int.c ****                     (n)[n##ii] = &n##d[n##ii];                                 \
 251:../src/wolfcrypt/src/sp_int.c ****                     (n)[n##ii]->size = (s);                                    \
 252:../src/wolfcrypt/src/sp_int.c ****                 }                                                              \
 253:../src/wolfcrypt/src/sp_int.c ****             }                                                                  \
 254:../src/wolfcrypt/src/sp_int.c ****         }                                                                      \
 255:../src/wolfcrypt/src/sp_int.c ****         while (0)
 256:../src/wolfcrypt/src/sp_int.c ****     #endif
 257:../src/wolfcrypt/src/sp_int.c **** #endif
 258:../src/wolfcrypt/src/sp_int.c **** 
 259:../src/wolfcrypt/src/sp_int.c **** /* FREE_SP_INT_ARRAY: Free an array of 'sp_int'. */
 260:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SMALL_STACK) || defined(SP_ALLOC)) && \
 261:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_SP_NO_MALLOC)
 262:../src/wolfcrypt/src/sp_int.c ****     /* Free data variable that was dynamically allocated. */
 263:../src/wolfcrypt/src/sp_int.c ****     #define FREE_SP_INT_ARRAY(n, h)                 \
 264:../src/wolfcrypt/src/sp_int.c ****     do {                                            \
 265:../src/wolfcrypt/src/sp_int.c ****         if (n##d != NULL) {                         \
 266:../src/wolfcrypt/src/sp_int.c ****             XFREE(n##d, h, DYNAMIC_TYPE_BIGINT);    \
 267:../src/wolfcrypt/src/sp_int.c ****         }                                           \
 268:../src/wolfcrypt/src/sp_int.c ****     }                                               \
 269:../src/wolfcrypt/src/sp_int.c ****     while (0)
 270:../src/wolfcrypt/src/sp_int.c **** #else
 271:../src/wolfcrypt/src/sp_int.c ****     /* Nothing to do as data declared on stack. */
 272:../src/wolfcrypt/src/sp_int.c ****     #define FREE_SP_INT_ARRAY(n, h)
 273:../src/wolfcrypt/src/sp_int.c **** #endif
 274:../src/wolfcrypt/src/sp_int.c **** 
 275:../src/wolfcrypt/src/sp_int.c **** 
 276:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_NO_ASM
 277:../src/wolfcrypt/src/sp_int.c ****     #ifdef __IAR_SYSTEMS_ICC__
 278:../src/wolfcrypt/src/sp_int.c ****         #define __asm__        asm
 279:../src/wolfcrypt/src/sp_int.c ****         #define __volatile__   volatile
 280:../src/wolfcrypt/src/sp_int.c ****     #endif /* __IAR_SYSTEMS_ICC__ */
 281:../src/wolfcrypt/src/sp_int.c ****     #ifdef __KEIL__
 282:../src/wolfcrypt/src/sp_int.c ****         #define __asm__        __asm
 283:../src/wolfcrypt/src/sp_int.c ****         #define __volatile__   volatile
 284:../src/wolfcrypt/src/sp_int.c ****     #endif
 285:../src/wolfcrypt/src/sp_int.c **** 
 286:../src/wolfcrypt/src/sp_int.c ****     #if defined(WOLFSSL_SP_X86_64) && SP_WORD_SIZE == 64
 287:../src/wolfcrypt/src/sp_int.c **** /*
 288:../src/wolfcrypt/src/sp_int.c ****  * CPU: x86_64
 289:../src/wolfcrypt/src/sp_int.c ****  */
 290:../src/wolfcrypt/src/sp_int.c **** 
 291:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
 292:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
 293:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 294:../src/wolfcrypt/src/sp_int.c ****         "movq	%[b], %%rax	\n\t"                    \
 295:../src/wolfcrypt/src/sp_int.c ****         "mulq	%[a]		\n\t"                    \
 296:../src/wolfcrypt/src/sp_int.c ****         "movq	%%rax, %[l]	\n\t"                    \
 297:../src/wolfcrypt/src/sp_int.c ****         "movq	%%rdx, %[h]	\n\t"                    \
 298:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
 299:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va), [b] "m" (vb)                     \
 300:../src/wolfcrypt/src/sp_int.c ****         : "memory", "%rax", "%rdx", "cc"                 \
 301:../src/wolfcrypt/src/sp_int.c ****     )
 302:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
 303:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
 304:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 305:../src/wolfcrypt/src/sp_int.c ****         "movq	%[b], %%rax	\n\t"                    \
 306:../src/wolfcrypt/src/sp_int.c ****         "mulq	%[a]		\n\t"                    \
 307:../src/wolfcrypt/src/sp_int.c ****         "movq	$0   , %[o]	\n\t"                    \
 308:../src/wolfcrypt/src/sp_int.c ****         "movq	%%rax, %[l]	\n\t"                    \
 309:../src/wolfcrypt/src/sp_int.c ****         "movq	%%rdx, %[h]	\n\t"                    \
 310:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "=r" (vo)    \
 311:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va), [b] "m" (vb)                     \
 312:../src/wolfcrypt/src/sp_int.c ****         : "%rax", "%rdx", "cc"                           \
 313:../src/wolfcrypt/src/sp_int.c ****     )
 314:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
 315:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
 316:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 317:../src/wolfcrypt/src/sp_int.c ****         "movq	%[b], %%rax	\n\t"                    \
 318:../src/wolfcrypt/src/sp_int.c ****         "mulq	%[a]		\n\t"                    \
 319:../src/wolfcrypt/src/sp_int.c ****         "addq	%%rax, %[l]	\n\t"                    \
 320:../src/wolfcrypt/src/sp_int.c ****         "adcq	%%rdx, %[h]	\n\t"                    \
 321:../src/wolfcrypt/src/sp_int.c ****         "adcq	$0   , %[o]	\n\t"                    \
 322:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 323:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va), [b] "m" (vb)                     \
 324:../src/wolfcrypt/src/sp_int.c ****         : "%rax", "%rdx", "cc"                           \
 325:../src/wolfcrypt/src/sp_int.c ****     )
 326:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
 327:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
 328:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 329:../src/wolfcrypt/src/sp_int.c ****         "movq	%[b], %%rax	\n\t"                    \
 330:../src/wolfcrypt/src/sp_int.c ****         "mulq	%[a]		\n\t"                    \
 331:../src/wolfcrypt/src/sp_int.c ****         "addq	%%rax, %[l]	\n\t"                    \
 332:../src/wolfcrypt/src/sp_int.c ****         "adcq	%%rdx, %[h]	\n\t"                    \
 333:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 334:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va), [b] "m" (vb)                     \
 335:../src/wolfcrypt/src/sp_int.c ****         : "%rax", "%rdx", "cc"                           \
 336:../src/wolfcrypt/src/sp_int.c ****     )
 337:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
 338:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
 339:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 340:../src/wolfcrypt/src/sp_int.c ****         "movq	%[b], %%rax	\n\t"                    \
 341:../src/wolfcrypt/src/sp_int.c ****         "mulq	%[a]		\n\t"                    \
 342:../src/wolfcrypt/src/sp_int.c ****         "addq	%%rax, %[l]	\n\t"                    \
 343:../src/wolfcrypt/src/sp_int.c ****         "adcq	%%rdx, %[h]	\n\t"                    \
 344:../src/wolfcrypt/src/sp_int.c ****         "adcq	$0   , %[o]	\n\t"                    \
 345:../src/wolfcrypt/src/sp_int.c ****         "addq	%%rax, %[l]	\n\t"                    \
 346:../src/wolfcrypt/src/sp_int.c ****         "adcq	%%rdx, %[h]	\n\t"                    \
 347:../src/wolfcrypt/src/sp_int.c ****         "adcq	$0   , %[o]	\n\t"                    \
 348:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 349:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va), [b] "m" (vb)                     \
 350:../src/wolfcrypt/src/sp_int.c ****         : "%rax", "%rdx", "cc"                           \
 351:../src/wolfcrypt/src/sp_int.c ****     )
 352:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
 353:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
 354:../src/wolfcrypt/src/sp_int.c ****  */
 355:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
 356:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 357:../src/wolfcrypt/src/sp_int.c ****         "movq	%[b], %%rax	\n\t"                    \
 358:../src/wolfcrypt/src/sp_int.c ****         "mulq	%[a]		\n\t"                    \
 359:../src/wolfcrypt/src/sp_int.c ****         "addq	%%rax, %[l]	\n\t"                    \
 360:../src/wolfcrypt/src/sp_int.c ****         "adcq	%%rdx, %[h]	\n\t"                    \
 361:../src/wolfcrypt/src/sp_int.c ****         "addq	%%rax, %[l]	\n\t"                    \
 362:../src/wolfcrypt/src/sp_int.c ****         "adcq	%%rdx, %[h]	\n\t"                    \
 363:../src/wolfcrypt/src/sp_int.c ****         "adcq	$0   , %[o]	\n\t"                    \
 364:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 365:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va), [b] "m" (vb)                     \
 366:../src/wolfcrypt/src/sp_int.c ****         : "%rax", "%rdx", "cc"                           \
 367:../src/wolfcrypt/src/sp_int.c ****     )
 368:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
 369:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
 370:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 371:../src/wolfcrypt/src/sp_int.c ****         "movq	%[a], %%rax	\n\t"                    \
 372:../src/wolfcrypt/src/sp_int.c ****         "mulq	%%rax		\n\t"                    \
 373:../src/wolfcrypt/src/sp_int.c ****         "movq	%%rax, %[l]	\n\t"                    \
 374:../src/wolfcrypt/src/sp_int.c ****         "movq	%%rdx, %[h]	\n\t"                    \
 375:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
 376:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va)                                   \
 377:../src/wolfcrypt/src/sp_int.c ****         : "memory", "%rax", "%rdx", "cc"                 \
 378:../src/wolfcrypt/src/sp_int.c ****     )
 379:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
 380:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
 381:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 382:../src/wolfcrypt/src/sp_int.c ****         "movq	%[a], %%rax	\n\t"                    \
 383:../src/wolfcrypt/src/sp_int.c ****         "mulq	%%rax		\n\t"                    \
 384:../src/wolfcrypt/src/sp_int.c ****         "addq	%%rax, %[l]	\n\t"                    \
 385:../src/wolfcrypt/src/sp_int.c ****         "adcq	%%rdx, %[h]	\n\t"                    \
 386:../src/wolfcrypt/src/sp_int.c ****         "adcq	$0   , %[o]	\n\t"                    \
 387:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 388:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va)                                   \
 389:../src/wolfcrypt/src/sp_int.c ****         : "%rax", "%rdx", "cc"                           \
 390:../src/wolfcrypt/src/sp_int.c ****     )
 391:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
 392:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
 393:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 394:../src/wolfcrypt/src/sp_int.c ****         "movq	%[a], %%rax	\n\t"                    \
 395:../src/wolfcrypt/src/sp_int.c ****         "mulq	%%rax		\n\t"                    \
 396:../src/wolfcrypt/src/sp_int.c ****         "addq	%%rax, %[l]	\n\t"                    \
 397:../src/wolfcrypt/src/sp_int.c ****         "adcq	%%rdx, %[h]	\n\t"                    \
 398:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 399:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va)                                   \
 400:../src/wolfcrypt/src/sp_int.c ****         : "%rax", "%rdx", "cc"                           \
 401:../src/wolfcrypt/src/sp_int.c ****     )
 402:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
 403:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
 404:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 405:../src/wolfcrypt/src/sp_int.c ****         "addq	%[a], %[l]	\n\t"                    \
 406:../src/wolfcrypt/src/sp_int.c ****         "adcq	$0  , %[h]	\n\t"                    \
 407:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 408:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va)                                   \
 409:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 410:../src/wolfcrypt/src/sp_int.c ****     )
 411:../src/wolfcrypt/src/sp_int.c **** /* Add va, variable in a register, into: vh | vl */
 412:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC_REG(vl, vh, va)                      \
 413:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 414:../src/wolfcrypt/src/sp_int.c ****         "addq	%[a], %[l]	\n\t"                    \
 415:../src/wolfcrypt/src/sp_int.c ****         "adcq	$0  , %[h]	\n\t"                    \
 416:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 417:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
 418:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 419:../src/wolfcrypt/src/sp_int.c ****     )
 420:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
 421:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
 422:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 423:../src/wolfcrypt/src/sp_int.c ****         "subq	%[a], %[l]	\n\t"                    \
 424:../src/wolfcrypt/src/sp_int.c ****         "sbbq	$0  , %[h]	\n\t"                    \
 425:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 426:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va)                                   \
 427:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 428:../src/wolfcrypt/src/sp_int.c ****     )
 429:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
 430:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
 431:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 432:../src/wolfcrypt/src/sp_int.c ****         "addq	%[a], %[l]	\n\t"                    \
 433:../src/wolfcrypt/src/sp_int.c ****         "adcq	%[b], %[h]	\n\t"                    \
 434:../src/wolfcrypt/src/sp_int.c ****         "adcq	%[c], %[o]	\n\t"                    \
 435:../src/wolfcrypt/src/sp_int.c ****         "addq	%[a], %[l]	\n\t"                    \
 436:../src/wolfcrypt/src/sp_int.c ****         "adcq	%[b], %[h]	\n\t"                    \
 437:../src/wolfcrypt/src/sp_int.c ****         "adcq	%[c], %[o]	\n\t"                    \
 438:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 439:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb), [c] "r" (vc)       \
 440:../src/wolfcrypt/src/sp_int.c ****         : "%rax", "%rdx", "cc"                           \
 441:../src/wolfcrypt/src/sp_int.c ****     )
 442:../src/wolfcrypt/src/sp_int.c **** 
 443:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_DIV_WORD_HALF
 444:../src/wolfcrypt/src/sp_int.c **** /* Divide a two digit number by a digit number and return. (hi | lo) / d
 445:../src/wolfcrypt/src/sp_int.c ****  *
 446:../src/wolfcrypt/src/sp_int.c ****  * Using divq instruction on Intel x64.
 447:../src/wolfcrypt/src/sp_int.c ****  *
 448:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  hi  SP integer digit. High digit of the dividend.
 449:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  lo  SP integer digit. Lower digit of the dividend.
 450:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  d   SP integer digit. Number to divide by.
 451:../src/wolfcrypt/src/sp_int.c ****  * @return  The division result.
 452:../src/wolfcrypt/src/sp_int.c ****  */
 453:../src/wolfcrypt/src/sp_int.c **** static WC_INLINE sp_int_digit sp_div_word(sp_int_digit hi, sp_int_digit lo,
 454:../src/wolfcrypt/src/sp_int.c ****                                           sp_int_digit d)
 455:../src/wolfcrypt/src/sp_int.c **** {
 456:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (
 457:../src/wolfcrypt/src/sp_int.c ****         "divq %2"
 458:../src/wolfcrypt/src/sp_int.c ****         : "+a" (lo)
 459:../src/wolfcrypt/src/sp_int.c ****         : "d" (hi), "r" (d)
 460:../src/wolfcrypt/src/sp_int.c ****         : "cc"
 461:../src/wolfcrypt/src/sp_int.c ****     );
 462:../src/wolfcrypt/src/sp_int.c ****     return lo;
 463:../src/wolfcrypt/src/sp_int.c **** }
 464:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_DIV_WORD
 465:../src/wolfcrypt/src/sp_int.c **** #endif
 466:../src/wolfcrypt/src/sp_int.c **** 
 467:../src/wolfcrypt/src/sp_int.c **** #define SP_INT_ASM_AVAILABLE
 468:../src/wolfcrypt/src/sp_int.c **** 
 469:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_X86_64 && SP_WORD_SIZE == 64 */
 470:../src/wolfcrypt/src/sp_int.c **** 
 471:../src/wolfcrypt/src/sp_int.c ****     #if defined(WOLFSSL_SP_X86) && SP_WORD_SIZE == 32
 472:../src/wolfcrypt/src/sp_int.c **** /*
 473:../src/wolfcrypt/src/sp_int.c ****  * CPU: x86
 474:../src/wolfcrypt/src/sp_int.c ****  */
 475:../src/wolfcrypt/src/sp_int.c **** 
 476:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
 477:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
 478:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 479:../src/wolfcrypt/src/sp_int.c ****         "movl	%[b], %%eax	\n\t"                    \
 480:../src/wolfcrypt/src/sp_int.c ****         "mull	%[a]		\n\t"                    \
 481:../src/wolfcrypt/src/sp_int.c ****         "movl	%%eax, %[l]	\n\t"                    \
 482:../src/wolfcrypt/src/sp_int.c ****         "movl	%%edx, %[h]	\n\t"                    \
 483:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
 484:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va), [b] "m" (vb)                     \
 485:../src/wolfcrypt/src/sp_int.c ****         : "memory", "eax", "edx", "cc"                   \
 486:../src/wolfcrypt/src/sp_int.c ****     )
 487:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
 488:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
 489:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 490:../src/wolfcrypt/src/sp_int.c ****         "movl	%[b], %%eax	\n\t"                    \
 491:../src/wolfcrypt/src/sp_int.c ****         "mull	%[a]		\n\t"                    \
 492:../src/wolfcrypt/src/sp_int.c ****         "movl	$0   , %[o]	\n\t"                    \
 493:../src/wolfcrypt/src/sp_int.c ****         "movl	%%eax, %[l]	\n\t"                    \
 494:../src/wolfcrypt/src/sp_int.c ****         "movl	%%edx, %[h]	\n\t"                    \
 495:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "=r" (vo)    \
 496:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va), [b] "m" (vb)                     \
 497:../src/wolfcrypt/src/sp_int.c ****         : "eax", "edx", "cc"                             \
 498:../src/wolfcrypt/src/sp_int.c ****     )
 499:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
 500:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
 501:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 502:../src/wolfcrypt/src/sp_int.c ****         "movl	%[b], %%eax	\n\t"                    \
 503:../src/wolfcrypt/src/sp_int.c ****         "mull	%[a]		\n\t"                    \
 504:../src/wolfcrypt/src/sp_int.c ****         "addl	%%eax, %[l]	\n\t"                    \
 505:../src/wolfcrypt/src/sp_int.c ****         "adcl	%%edx, %[h]	\n\t"                    \
 506:../src/wolfcrypt/src/sp_int.c ****         "adcl	$0   , %[o]	\n\t"                    \
 507:../src/wolfcrypt/src/sp_int.c ****         : [l] "+rm" (vl), [h] "+rm" (vh), [o] "+rm" (vo) \
 508:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 509:../src/wolfcrypt/src/sp_int.c ****         : "eax", "edx", "cc"                             \
 510:../src/wolfcrypt/src/sp_int.c ****     )
 511:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
 512:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
 513:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 514:../src/wolfcrypt/src/sp_int.c ****         "movl	%[b], %%eax	\n\t"                    \
 515:../src/wolfcrypt/src/sp_int.c ****         "mull	%[a]		\n\t"                    \
 516:../src/wolfcrypt/src/sp_int.c ****         "addl	%%eax, %[l]	\n\t"                    \
 517:../src/wolfcrypt/src/sp_int.c ****         "adcl	%%edx, %[h]	\n\t"                    \
 518:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 519:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va), [b] "m" (vb)                     \
 520:../src/wolfcrypt/src/sp_int.c ****         : "eax", "edx", "cc"                             \
 521:../src/wolfcrypt/src/sp_int.c ****     )
 522:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
 523:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
 524:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 525:../src/wolfcrypt/src/sp_int.c ****         "movl	%[b], %%eax	\n\t"                    \
 526:../src/wolfcrypt/src/sp_int.c ****         "mull	%[a]		\n\t"                    \
 527:../src/wolfcrypt/src/sp_int.c ****         "addl	%%eax, %[l]	\n\t"                    \
 528:../src/wolfcrypt/src/sp_int.c ****         "adcl	%%edx, %[h]	\n\t"                    \
 529:../src/wolfcrypt/src/sp_int.c ****         "adcl	$0   , %[o]	\n\t"                    \
 530:../src/wolfcrypt/src/sp_int.c ****         "addl	%%eax, %[l]	\n\t"                    \
 531:../src/wolfcrypt/src/sp_int.c ****         "adcl	%%edx, %[h]	\n\t"                    \
 532:../src/wolfcrypt/src/sp_int.c ****         "adcl	$0   , %[o]	\n\t"                    \
 533:../src/wolfcrypt/src/sp_int.c ****         : [l] "+rm" (vl), [h] "+rm" (vh), [o] "+rm" (vo) \
 534:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 535:../src/wolfcrypt/src/sp_int.c ****         : "eax", "edx", "cc"                             \
 536:../src/wolfcrypt/src/sp_int.c ****     )
 537:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
 538:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
 539:../src/wolfcrypt/src/sp_int.c ****  */
 540:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
 541:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 542:../src/wolfcrypt/src/sp_int.c ****         "movl	%[b], %%eax	\n\t"                    \
 543:../src/wolfcrypt/src/sp_int.c ****         "mull	%[a]		\n\t"                    \
 544:../src/wolfcrypt/src/sp_int.c ****         "addl	%%eax, %[l]	\n\t"                    \
 545:../src/wolfcrypt/src/sp_int.c ****         "adcl	%%edx, %[h]	\n\t"                    \
 546:../src/wolfcrypt/src/sp_int.c ****         "addl	%%eax, %[l]	\n\t"                    \
 547:../src/wolfcrypt/src/sp_int.c ****         "adcl	%%edx, %[h]	\n\t"                    \
 548:../src/wolfcrypt/src/sp_int.c ****         "adcl	$0   , %[o]	\n\t"                    \
 549:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 550:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va), [b] "m" (vb)                     \
 551:../src/wolfcrypt/src/sp_int.c ****         : "eax", "edx", "cc"                             \
 552:../src/wolfcrypt/src/sp_int.c ****     )
 553:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
 554:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
 555:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 556:../src/wolfcrypt/src/sp_int.c ****         "movl	%[a], %%eax	\n\t"                    \
 557:../src/wolfcrypt/src/sp_int.c ****         "mull	%%eax		\n\t"                    \
 558:../src/wolfcrypt/src/sp_int.c ****         "movl	%%eax, %[l]	\n\t"                    \
 559:../src/wolfcrypt/src/sp_int.c ****         "movl	%%edx, %[h]	\n\t"                    \
 560:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
 561:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va)                                   \
 562:../src/wolfcrypt/src/sp_int.c ****         : "memory", "eax", "edx", "cc"                   \
 563:../src/wolfcrypt/src/sp_int.c ****     )
 564:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
 565:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
 566:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 567:../src/wolfcrypt/src/sp_int.c ****         "movl	%[a], %%eax	\n\t"                    \
 568:../src/wolfcrypt/src/sp_int.c ****         "mull	%%eax		\n\t"                    \
 569:../src/wolfcrypt/src/sp_int.c ****         "addl	%%eax, %[l]	\n\t"                    \
 570:../src/wolfcrypt/src/sp_int.c ****         "adcl	%%edx, %[h]	\n\t"                    \
 571:../src/wolfcrypt/src/sp_int.c ****         "adcl	$0   , %[o]	\n\t"                    \
 572:../src/wolfcrypt/src/sp_int.c ****         : [l] "+rm" (vl), [h] "+rm" (vh), [o] "+rm" (vo) \
 573:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va)                                   \
 574:../src/wolfcrypt/src/sp_int.c ****         : "eax", "edx", "cc"                             \
 575:../src/wolfcrypt/src/sp_int.c ****     )
 576:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
 577:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
 578:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 579:../src/wolfcrypt/src/sp_int.c ****         "movl	%[a], %%eax	\n\t"                    \
 580:../src/wolfcrypt/src/sp_int.c ****         "mull	%%eax		\n\t"                    \
 581:../src/wolfcrypt/src/sp_int.c ****         "addl	%%eax, %[l]	\n\t"                    \
 582:../src/wolfcrypt/src/sp_int.c ****         "adcl	%%edx, %[h]	\n\t"                    \
 583:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 584:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va)                                   \
 585:../src/wolfcrypt/src/sp_int.c ****         : "eax", "edx", "cc"                             \
 586:../src/wolfcrypt/src/sp_int.c ****     )
 587:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
 588:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
 589:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 590:../src/wolfcrypt/src/sp_int.c ****         "addl	%[a], %[l]	\n\t"                    \
 591:../src/wolfcrypt/src/sp_int.c ****         "adcl	$0  , %[h]	\n\t"                    \
 592:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 593:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va)                                   \
 594:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 595:../src/wolfcrypt/src/sp_int.c ****     )
 596:../src/wolfcrypt/src/sp_int.c **** /* Add va, variable in a register, into: vh | vl */
 597:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC_REG(vl, vh, va)                      \
 598:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 599:../src/wolfcrypt/src/sp_int.c ****         "addl	%[a], %[l]	\n\t"                    \
 600:../src/wolfcrypt/src/sp_int.c ****         "adcl	$0  , %[h]	\n\t"                    \
 601:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 602:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
 603:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 604:../src/wolfcrypt/src/sp_int.c ****     )
 605:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
 606:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
 607:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 608:../src/wolfcrypt/src/sp_int.c ****         "subl	%[a], %[l]	\n\t"                    \
 609:../src/wolfcrypt/src/sp_int.c ****         "sbbl	$0  , %[h]	\n\t"                    \
 610:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 611:../src/wolfcrypt/src/sp_int.c ****         : [a] "m" (va)                                   \
 612:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 613:../src/wolfcrypt/src/sp_int.c ****     )
 614:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
 615:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
 616:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 617:../src/wolfcrypt/src/sp_int.c ****         "addl	%[a], %[l]	\n\t"                    \
 618:../src/wolfcrypt/src/sp_int.c ****         "adcl	%[b], %[h]	\n\t"                    \
 619:../src/wolfcrypt/src/sp_int.c ****         "adcl	%[c], %[o]	\n\t"                    \
 620:../src/wolfcrypt/src/sp_int.c ****         "addl	%[a], %[l]	\n\t"                    \
 621:../src/wolfcrypt/src/sp_int.c ****         "adcl	%[b], %[h]	\n\t"                    \
 622:../src/wolfcrypt/src/sp_int.c ****         "adcl	%[c], %[o]	\n\t"                    \
 623:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 624:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb), [c] "r" (vc)       \
 625:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 626:../src/wolfcrypt/src/sp_int.c ****     )
 627:../src/wolfcrypt/src/sp_int.c **** 
 628:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_DIV_WORD_HALF
 629:../src/wolfcrypt/src/sp_int.c **** /* Divide a two digit number by a digit number and return. (hi | lo) / d
 630:../src/wolfcrypt/src/sp_int.c ****  *
 631:../src/wolfcrypt/src/sp_int.c ****  * Using divl instruction on Intel x64.
 632:../src/wolfcrypt/src/sp_int.c ****  *
 633:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  hi  SP integer digit. High digit of the dividend.
 634:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  lo  SP integer digit. Lower digit of the dividend.
 635:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  d   SP integer digit. Number to divide by.
 636:../src/wolfcrypt/src/sp_int.c ****  * @return  The division result.
 637:../src/wolfcrypt/src/sp_int.c ****  */
 638:../src/wolfcrypt/src/sp_int.c **** static WC_INLINE sp_int_digit sp_div_word(sp_int_digit hi, sp_int_digit lo,
 639:../src/wolfcrypt/src/sp_int.c ****                                           sp_int_digit d)
 640:../src/wolfcrypt/src/sp_int.c **** {
 641:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (
 642:../src/wolfcrypt/src/sp_int.c ****         "divl %2"
 643:../src/wolfcrypt/src/sp_int.c ****         : "+a" (lo)
 644:../src/wolfcrypt/src/sp_int.c ****         : "d" (hi), "r" (d)
 645:../src/wolfcrypt/src/sp_int.c ****         : "cc"
 646:../src/wolfcrypt/src/sp_int.c ****     );
 647:../src/wolfcrypt/src/sp_int.c ****     return lo;
 648:../src/wolfcrypt/src/sp_int.c **** }
 649:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_DIV_WORD
 650:../src/wolfcrypt/src/sp_int.c **** #endif
 651:../src/wolfcrypt/src/sp_int.c **** 
 652:../src/wolfcrypt/src/sp_int.c **** #define SP_INT_ASM_AVAILABLE
 653:../src/wolfcrypt/src/sp_int.c **** 
 654:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_X86 && SP_WORD_SIZE == 32 */
 655:../src/wolfcrypt/src/sp_int.c **** 
 656:../src/wolfcrypt/src/sp_int.c ****     #if defined(WOLFSSL_SP_ARM64) && SP_WORD_SIZE == 64
 657:../src/wolfcrypt/src/sp_int.c **** /*
 658:../src/wolfcrypt/src/sp_int.c ****  * CPU: Aarch64
 659:../src/wolfcrypt/src/sp_int.c ****  */
 660:../src/wolfcrypt/src/sp_int.c **** 
 661:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
 662:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
 663:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 664:../src/wolfcrypt/src/sp_int.c ****         "mul	%[l], %[a], %[b]	\n\t"            \
 665:../src/wolfcrypt/src/sp_int.c ****         "umulh	%[h], %[a], %[b]	\n\t"            \
 666:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
 667:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 668:../src/wolfcrypt/src/sp_int.c ****         : "memory", "cc"                                 \
 669:../src/wolfcrypt/src/sp_int.c ****     )
 670:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
 671:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
 672:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 673:../src/wolfcrypt/src/sp_int.c ****         "mul	x8, %[a], %[b]		\n\t"            \
 674:../src/wolfcrypt/src/sp_int.c ****         "umulh	%[h], %[a], %[b]	\n\t"            \
 675:../src/wolfcrypt/src/sp_int.c ****         "mov	%[l], x8		\n\t"            \
 676:../src/wolfcrypt/src/sp_int.c ****         "mov	%[o], xzr		\n\t"            \
 677:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "=r" (vo)    \
 678:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 679:../src/wolfcrypt/src/sp_int.c ****         : "x8"                                           \
 680:../src/wolfcrypt/src/sp_int.c ****     )
 681:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
 682:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
 683:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 684:../src/wolfcrypt/src/sp_int.c ****         "mul	x8, %[a], %[b]		\n\t"            \
 685:../src/wolfcrypt/src/sp_int.c ****         "umulh	x9, %[a], %[b]		\n\t"            \
 686:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], x8		\n\t"            \
 687:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], x9		\n\t"            \
 688:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], xzr		\n\t"            \
 689:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 690:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 691:../src/wolfcrypt/src/sp_int.c ****         : "x8", "x9", "cc"                               \
 692:../src/wolfcrypt/src/sp_int.c ****     )
 693:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
 694:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
 695:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 696:../src/wolfcrypt/src/sp_int.c ****         "mul	x8, %[a], %[b]		\n\t"            \
 697:../src/wolfcrypt/src/sp_int.c ****         "umulh	x9, %[a], %[b]		\n\t"            \
 698:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], x8		\n\t"            \
 699:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], %[h], x9		\n\t"            \
 700:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 701:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 702:../src/wolfcrypt/src/sp_int.c ****         : "x8", "x9", "cc"                               \
 703:../src/wolfcrypt/src/sp_int.c ****     )
 704:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
 705:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
 706:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 707:../src/wolfcrypt/src/sp_int.c ****         "mul	x8, %[a], %[b]		\n\t"            \
 708:../src/wolfcrypt/src/sp_int.c ****         "umulh	x9, %[a], %[b]		\n\t"            \
 709:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], x8		\n\t"            \
 710:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], x9		\n\t"            \
 711:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], xzr		\n\t"            \
 712:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], x8		\n\t"            \
 713:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], x9		\n\t"            \
 714:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], xzr		\n\t"            \
 715:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 716:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 717:../src/wolfcrypt/src/sp_int.c ****         : "x8", "x9", "cc"                               \
 718:../src/wolfcrypt/src/sp_int.c ****     )
 719:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
 720:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
 721:../src/wolfcrypt/src/sp_int.c ****  */
 722:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
 723:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 724:../src/wolfcrypt/src/sp_int.c ****         "mul	x8, %[a], %[b]		\n\t"            \
 725:../src/wolfcrypt/src/sp_int.c ****         "umulh	x9, %[a], %[b]		\n\t"            \
 726:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], x8		\n\t"            \
 727:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], %[h], x9		\n\t"            \
 728:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], x8		\n\t"            \
 729:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], x9		\n\t"            \
 730:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], xzr		\n\t"            \
 731:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 732:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 733:../src/wolfcrypt/src/sp_int.c ****         : "x8", "x9", "cc"                               \
 734:../src/wolfcrypt/src/sp_int.c ****     )
 735:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
 736:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
 737:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 738:../src/wolfcrypt/src/sp_int.c ****         "mul	%[l], %[a], %[a]	\n\t"            \
 739:../src/wolfcrypt/src/sp_int.c ****         "umulh	%[h], %[a], %[a]	\n\t"            \
 740:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
 741:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
 742:../src/wolfcrypt/src/sp_int.c ****         : "memory"                                       \
 743:../src/wolfcrypt/src/sp_int.c ****     )
 744:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
 745:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
 746:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 747:../src/wolfcrypt/src/sp_int.c ****         "mul	x8, %[a], %[a]		\n\t"            \
 748:../src/wolfcrypt/src/sp_int.c ****         "umulh	x9, %[a], %[a]		\n\t"            \
 749:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], x8		\n\t"            \
 750:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], x9		\n\t"            \
 751:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], xzr		\n\t"            \
 752:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 753:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
 754:../src/wolfcrypt/src/sp_int.c ****         : "x8", "x9", "cc"                               \
 755:../src/wolfcrypt/src/sp_int.c ****     )
 756:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
 757:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
 758:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 759:../src/wolfcrypt/src/sp_int.c ****         "mul	x8, %[a], %[a]		\n\t"            \
 760:../src/wolfcrypt/src/sp_int.c ****         "umulh	x9, %[a], %[a]		\n\t"            \
 761:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], x8		\n\t"            \
 762:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], %[h], x9		\n\t"            \
 763:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 764:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
 765:../src/wolfcrypt/src/sp_int.c ****         : "x8", "x9", "cc"                               \
 766:../src/wolfcrypt/src/sp_int.c ****     )
 767:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
 768:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
 769:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 770:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], %[a]	\n\t"            \
 771:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], %[h], xzr		\n\t"            \
 772:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 773:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
 774:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 775:../src/wolfcrypt/src/sp_int.c ****     )
 776:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
 777:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
 778:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 779:../src/wolfcrypt/src/sp_int.c ****         "subs	%[l], %[l], %[a]	\n\t"            \
 780:../src/wolfcrypt/src/sp_int.c ****         "sbc	%[h], %[h], xzr		\n\t"            \
 781:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 782:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
 783:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 784:../src/wolfcrypt/src/sp_int.c ****     )
 785:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
 786:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
 787:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 788:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], %[a]	\n\t"            \
 789:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], %[b]	\n\t"            \
 790:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], %[c]	\n\t"            \
 791:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], %[a]	\n\t"            \
 792:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], %[b]	\n\t"            \
 793:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], %[c]	\n\t"            \
 794:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 795:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb), [c] "r" (vc)       \
 796:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 797:../src/wolfcrypt/src/sp_int.c ****     )
 798:../src/wolfcrypt/src/sp_int.c **** 
 799:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_DIV_WORD_HALF
 800:../src/wolfcrypt/src/sp_int.c **** /* Divide a two digit number by a digit number and return. (hi | lo) / d
 801:../src/wolfcrypt/src/sp_int.c ****  *
 802:../src/wolfcrypt/src/sp_int.c ****  * Using udiv instruction on Aarch64.
 803:../src/wolfcrypt/src/sp_int.c ****  * Constant time.
 804:../src/wolfcrypt/src/sp_int.c ****  *
 805:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  hi  SP integer digit. High digit of the dividend.
 806:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  lo  SP integer digit. Lower digit of the dividend.
 807:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  d   SP integer digit. Number to divide by.
 808:../src/wolfcrypt/src/sp_int.c ****  * @return  The division result.
 809:../src/wolfcrypt/src/sp_int.c ****  */
 810:../src/wolfcrypt/src/sp_int.c **** static WC_INLINE sp_int_digit sp_div_word(sp_int_digit hi, sp_int_digit lo,
 811:../src/wolfcrypt/src/sp_int.c ****                                           sp_int_digit d)
 812:../src/wolfcrypt/src/sp_int.c **** {
 813:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (
 814:../src/wolfcrypt/src/sp_int.c ****         "lsr	x3, %[d], 48\n\t"
 815:../src/wolfcrypt/src/sp_int.c ****         "mov	x5, 16\n\t"
 816:../src/wolfcrypt/src/sp_int.c ****         "cmp	x3, 0\n\t"
 817:../src/wolfcrypt/src/sp_int.c ****         "mov	x4, 63\n\t"
 818:../src/wolfcrypt/src/sp_int.c ****         "csel	x3, x5, xzr, eq\n\t"
 819:../src/wolfcrypt/src/sp_int.c ****         "sub	x4, x4, x3\n\t"
 820:../src/wolfcrypt/src/sp_int.c ****         "lsl	%[d], %[d], x3\n\t"
 821:../src/wolfcrypt/src/sp_int.c ****         "lsl	%[hi], %[hi], x3\n\t"
 822:../src/wolfcrypt/src/sp_int.c ****         "lsr	x5, %[lo], x4\n\t"
 823:../src/wolfcrypt/src/sp_int.c ****         "lsl	%[lo], %[lo], x3\n\t"
 824:../src/wolfcrypt/src/sp_int.c ****         "orr	%[hi], %[hi], x5, lsr 1\n\t"
 825:../src/wolfcrypt/src/sp_int.c **** 
 826:../src/wolfcrypt/src/sp_int.c ****         "lsr	x5, %[d], 32\n\t"
 827:../src/wolfcrypt/src/sp_int.c ****         "add	x5, x5, 1\n\t"
 828:../src/wolfcrypt/src/sp_int.c **** 
 829:../src/wolfcrypt/src/sp_int.c ****         "udiv	x3, %[hi], x5\n\t"
 830:../src/wolfcrypt/src/sp_int.c ****         "lsl	x6, x3, 32\n\t"
 831:../src/wolfcrypt/src/sp_int.c ****         "mul	x4, %[d], x6\n\t"
 832:../src/wolfcrypt/src/sp_int.c ****         "umulh	x3, %[d], x6\n\t"
 833:../src/wolfcrypt/src/sp_int.c ****         "subs	%[lo], %[lo], x4\n\t"
 834:../src/wolfcrypt/src/sp_int.c ****         "sbc	%[hi], %[hi], x3\n\t"
 835:../src/wolfcrypt/src/sp_int.c **** 
 836:../src/wolfcrypt/src/sp_int.c ****         "udiv	x3, %[hi], x5\n\t"
 837:../src/wolfcrypt/src/sp_int.c ****         "lsl	x3, x3, 32\n\t"
 838:../src/wolfcrypt/src/sp_int.c ****         "add	x6, x6, x3\n\t"
 839:../src/wolfcrypt/src/sp_int.c ****         "mul	x4, %[d], x3\n\t"
 840:../src/wolfcrypt/src/sp_int.c ****         "umulh	x3, %[d], x3\n\t"
 841:../src/wolfcrypt/src/sp_int.c ****         "subs	%[lo], %[lo], x4\n\t"
 842:../src/wolfcrypt/src/sp_int.c ****         "sbc	%[hi], %[hi], x3\n\t"
 843:../src/wolfcrypt/src/sp_int.c **** 
 844:../src/wolfcrypt/src/sp_int.c ****         "lsr	x3, %[lo], 32\n\t"
 845:../src/wolfcrypt/src/sp_int.c ****         "orr	x3, x3, %[hi], lsl 32\n\t"
 846:../src/wolfcrypt/src/sp_int.c **** 
 847:../src/wolfcrypt/src/sp_int.c ****         "udiv	x3, x3, x5\n\t"
 848:../src/wolfcrypt/src/sp_int.c ****         "add	x6, x6, x3\n\t"
 849:../src/wolfcrypt/src/sp_int.c ****         "mul	x4, %[d], x3\n\t"
 850:../src/wolfcrypt/src/sp_int.c ****         "umulh	x3, %[d], x3\n\t"
 851:../src/wolfcrypt/src/sp_int.c ****         "subs	%[lo], %[lo], x4\n\t"
 852:../src/wolfcrypt/src/sp_int.c ****         "sbc	%[hi], %[hi], x3\n\t"
 853:../src/wolfcrypt/src/sp_int.c **** 
 854:../src/wolfcrypt/src/sp_int.c ****         "lsr	x3, %[lo], 32\n\t"
 855:../src/wolfcrypt/src/sp_int.c ****         "orr	x3, x3, %[hi], lsl 32\n\t"
 856:../src/wolfcrypt/src/sp_int.c **** 
 857:../src/wolfcrypt/src/sp_int.c ****         "udiv	x3, x3, x5\n\t"
 858:../src/wolfcrypt/src/sp_int.c ****         "add	x6, x6, x3\n\t"
 859:../src/wolfcrypt/src/sp_int.c ****         "mul	x4, %[d], x3\n\t"
 860:../src/wolfcrypt/src/sp_int.c ****         "sub	%[lo], %[lo], x4\n\t"
 861:../src/wolfcrypt/src/sp_int.c **** 
 862:../src/wolfcrypt/src/sp_int.c ****         "udiv	x3, %[lo], %[d]\n\t"
 863:../src/wolfcrypt/src/sp_int.c ****         "add	%[hi], x6, x3\n\t"
 864:../src/wolfcrypt/src/sp_int.c **** 
 865:../src/wolfcrypt/src/sp_int.c ****         : [hi] "+r" (hi), [lo] "+r" (lo), [d] "+r" (d)
 866:../src/wolfcrypt/src/sp_int.c ****         :
 867:../src/wolfcrypt/src/sp_int.c ****         : "x3", "x4", "x5", "x6"
 868:../src/wolfcrypt/src/sp_int.c ****     );
 869:../src/wolfcrypt/src/sp_int.c **** 
 870:../src/wolfcrypt/src/sp_int.c ****     return hi;
 871:../src/wolfcrypt/src/sp_int.c **** }
 872:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_DIV_WORD
 873:../src/wolfcrypt/src/sp_int.c **** #endif
 874:../src/wolfcrypt/src/sp_int.c **** 
 875:../src/wolfcrypt/src/sp_int.c **** #define SP_INT_ASM_AVAILABLE
 876:../src/wolfcrypt/src/sp_int.c **** 
 877:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_ARM64 && SP_WORD_SIZE == 64 */
 878:../src/wolfcrypt/src/sp_int.c **** 
 879:../src/wolfcrypt/src/sp_int.c ****     #if (defined(WOLFSSL_SP_ARM32) || defined(WOLFSSL_SP_ARM_CORTEX_M)) && \
 880:../src/wolfcrypt/src/sp_int.c ****         SP_WORD_SIZE == 32
 881:../src/wolfcrypt/src/sp_int.c **** /*
 882:../src/wolfcrypt/src/sp_int.c ****  * CPU: ARM32 or Cortex-M4 and similar
 883:../src/wolfcrypt/src/sp_int.c ****  */
 884:../src/wolfcrypt/src/sp_int.c **** 
 885:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
 886:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
 887:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 888:../src/wolfcrypt/src/sp_int.c ****         "umull	%[l], %[h], %[a], %[b]	\n\t"            \
 889:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
 890:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 891:../src/wolfcrypt/src/sp_int.c ****         : "memory"                                       \
 892:../src/wolfcrypt/src/sp_int.c ****     )
 893:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
 894:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
 895:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 896:../src/wolfcrypt/src/sp_int.c ****         "umull	%[l], %[h], %[a], %[b]	\n\t"            \
 897:../src/wolfcrypt/src/sp_int.c ****         "mov	%[o], #0		\n\t"            \
 898:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "=r" (vo)    \
 899:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 900:../src/wolfcrypt/src/sp_int.c ****         :                                                \
 901:../src/wolfcrypt/src/sp_int.c ****     )
 902:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
 903:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
 904:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 905:../src/wolfcrypt/src/sp_int.c ****         "umull	r8, r9, %[a], %[b]	\n\t"            \
 906:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r8		\n\t"            \
 907:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r9		\n\t"            \
 908:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], #0		\n\t"            \
 909:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 910:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 911:../src/wolfcrypt/src/sp_int.c ****         : "r8", "r9", "cc"                               \
 912:../src/wolfcrypt/src/sp_int.c ****     )
 913:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
 914:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
 915:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 916:../src/wolfcrypt/src/sp_int.c ****         "umlal	%[l], %[h], %[a], %[b]	\n\t"            \
 917:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 918:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 919:../src/wolfcrypt/src/sp_int.c ****         :                                                \
 920:../src/wolfcrypt/src/sp_int.c ****     )
 921:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
 922:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
 923:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 924:../src/wolfcrypt/src/sp_int.c ****         "umull	r8, r9, %[a], %[b]	\n\t"            \
 925:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r8		\n\t"            \
 926:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r9		\n\t"            \
 927:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], #0		\n\t"            \
 928:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r8		\n\t"            \
 929:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r9		\n\t"            \
 930:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], #0		\n\t"            \
 931:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 932:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 933:../src/wolfcrypt/src/sp_int.c ****         : "r8", "r9", "cc"                               \
 934:../src/wolfcrypt/src/sp_int.c ****     )
 935:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
 936:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
 937:../src/wolfcrypt/src/sp_int.c ****  */
 938:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
 939:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 940:../src/wolfcrypt/src/sp_int.c ****         "umull	r8, r9, %[a], %[b]	\n\t"            \
 941:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r8		\n\t"            \
 942:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], %[h], r9		\n\t"            \
 943:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r8		\n\t"            \
 944:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r9		\n\t"            \
 945:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], #0		\n\t"            \
 946:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 947:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
 948:../src/wolfcrypt/src/sp_int.c ****         : "r8", "r9", "cc"                               \
 949:../src/wolfcrypt/src/sp_int.c ****     )
 950:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
 951:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
 952:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 953:../src/wolfcrypt/src/sp_int.c ****         "umull	%[l], %[h], %[a], %[a]	\n\t"            \
 954:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
 955:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
 956:../src/wolfcrypt/src/sp_int.c ****         : "memory"                                       \
 957:../src/wolfcrypt/src/sp_int.c ****     )
 958:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
 959:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
 960:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 961:../src/wolfcrypt/src/sp_int.c ****         "umull	r8, r9, %[a], %[a]	\n\t"            \
 962:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r8		\n\t"            \
 963:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r9		\n\t"            \
 964:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], #0		\n\t"            \
 965:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
 966:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
 967:../src/wolfcrypt/src/sp_int.c ****         : "r8", "r9", "cc"                               \
 968:../src/wolfcrypt/src/sp_int.c ****     )
 969:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
 970:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
 971:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 972:../src/wolfcrypt/src/sp_int.c ****         "umlal	%[l], %[h], %[a], %[a]	\n\t"            \
 973:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 974:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
 975:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 976:../src/wolfcrypt/src/sp_int.c ****     )
 977:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
 978:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
 979:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 980:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], %[a]	\n\t"            \
 981:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], %[h], #0		\n\t"            \
 982:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 983:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
 984:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 985:../src/wolfcrypt/src/sp_int.c ****     )
 986:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
 987:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
 988:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 989:../src/wolfcrypt/src/sp_int.c ****         "subs	%[l], %[l], %[a]	\n\t"            \
 990:../src/wolfcrypt/src/sp_int.c ****         "sbc	%[h], %[h], #0		\n\t"            \
 991:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
 992:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
 993:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
 994:../src/wolfcrypt/src/sp_int.c ****     )
 995:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
 996:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
 997:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
 998:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], %[a]	\n\t"            \
 999:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], %[b]	\n\t"            \
1000:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], %[c]	\n\t"            \
1001:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], %[a]	\n\t"            \
1002:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], %[b]	\n\t"            \
1003:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[o], %[c]	\n\t"            \
1004:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
1005:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb), [c] "r" (vc)       \
1006:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
1007:../src/wolfcrypt/src/sp_int.c ****     )
1008:../src/wolfcrypt/src/sp_int.c **** 
1009:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_DIV_WORD_HALF
1010:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_ARM32_UDIV
1011:../src/wolfcrypt/src/sp_int.c **** /* Divide a two digit number by a digit number and return. (hi | lo) / d
1012:../src/wolfcrypt/src/sp_int.c ****  *
1013:../src/wolfcrypt/src/sp_int.c ****  * No division instruction used - does operation bit by bit.
1014:../src/wolfcrypt/src/sp_int.c ****  * Constant time.
1015:../src/wolfcrypt/src/sp_int.c ****  *
1016:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  hi  SP integer digit. High digit of the dividend.
1017:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  lo  SP integer digit. Lower digit of the dividend.
1018:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  d   SP integer digit. Number to divide by.
1019:../src/wolfcrypt/src/sp_int.c ****  * @return  The division result.
1020:../src/wolfcrypt/src/sp_int.c ****  */
1021:../src/wolfcrypt/src/sp_int.c **** static WC_INLINE sp_int_digit sp_div_word(sp_int_digit hi, sp_int_digit lo,
1022:../src/wolfcrypt/src/sp_int.c ****                                           sp_int_digit d)
1023:../src/wolfcrypt/src/sp_int.c **** {
1024:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit r = 0;
1025:../src/wolfcrypt/src/sp_int.c **** 
1026:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (
1027:../src/wolfcrypt/src/sp_int.c ****         /* Shift d so that top bit is set. */
1028:../src/wolfcrypt/src/sp_int.c ****         "clz	r5, %[d]\n\t"
1029:../src/wolfcrypt/src/sp_int.c ****         "rsb	r6, r5, #31\n\t"
1030:../src/wolfcrypt/src/sp_int.c ****         "lsl	%[d], %[d], r5\n\t"
1031:../src/wolfcrypt/src/sp_int.c ****         "lsl	%[hi], %[hi], r5\n\t"
1032:../src/wolfcrypt/src/sp_int.c ****         "lsr	r9, %[lo], r6\n\t"
1033:../src/wolfcrypt/src/sp_int.c ****         "lsl	%[lo], %[lo], r5\n\t"
1034:../src/wolfcrypt/src/sp_int.c ****         "orr	%[hi], %[hi], r9, lsr #1\n\t"
1035:../src/wolfcrypt/src/sp_int.c **** 
1036:../src/wolfcrypt/src/sp_int.c ****         "lsr	r5, %[d], #1\n\t"
1037:../src/wolfcrypt/src/sp_int.c ****         "add	r5, r5, #1\n\t"
1038:../src/wolfcrypt/src/sp_int.c ****         "mov	r6, %[lo]\n\t"
1039:../src/wolfcrypt/src/sp_int.c ****         "mov	r9, %[hi]\n\t"
1040:../src/wolfcrypt/src/sp_int.c ****         /* Do top 32 */
1041:../src/wolfcrypt/src/sp_int.c ****         "subs	r8, r5, r9\n\t"
1042:../src/wolfcrypt/src/sp_int.c ****         "sbc	r8, r8, r8\n\t"
1043:../src/wolfcrypt/src/sp_int.c ****         "add	%[r], %[r], %[r]\n\t"
1044:../src/wolfcrypt/src/sp_int.c ****         "sub	%[r], %[r], r8\n\t"
1045:../src/wolfcrypt/src/sp_int.c ****         "and	r8, r8, r5\n\t"
1046:../src/wolfcrypt/src/sp_int.c ****         "subs	r9, r9, r8\n\t"
1047:../src/wolfcrypt/src/sp_int.c ****         /* Next 30 bits */
1048:../src/wolfcrypt/src/sp_int.c ****         "mov	r4, #29\n\t"
1049:../src/wolfcrypt/src/sp_int.c ****         "\n1:\n\t"
1050:../src/wolfcrypt/src/sp_int.c ****         "movs	r6, r6, lsl #1\n\t"
1051:../src/wolfcrypt/src/sp_int.c ****         "adc	r9, r9, r9\n\t"
1052:../src/wolfcrypt/src/sp_int.c ****         "subs	r8, r5, r9\n\t"
1053:../src/wolfcrypt/src/sp_int.c ****         "sbc	r8, r8, r8\n\t"
1054:../src/wolfcrypt/src/sp_int.c ****         "add	%[r], %[r], %[r]\n\t"
1055:../src/wolfcrypt/src/sp_int.c ****         "sub	%[r], %[r], r8\n\t"
1056:../src/wolfcrypt/src/sp_int.c ****         "and	r8, r8, r5\n\t"
1057:../src/wolfcrypt/src/sp_int.c ****         "subs	r9, r9, r8\n\t"
1058:../src/wolfcrypt/src/sp_int.c ****         "subs	r4, r4, #1\n\t"
1059:../src/wolfcrypt/src/sp_int.c ****         "bpl	1b\n\t"
1060:../src/wolfcrypt/src/sp_int.c **** 
1061:../src/wolfcrypt/src/sp_int.c ****         "add	%[r], %[r], %[r]\n\t"
1062:../src/wolfcrypt/src/sp_int.c ****         "add	%[r], %[r], #1\n\t"
1063:../src/wolfcrypt/src/sp_int.c **** 
1064:../src/wolfcrypt/src/sp_int.c ****         /* Handle difference has hi word > 0. */
1065:../src/wolfcrypt/src/sp_int.c ****         "umull	r4, r5, %[r], %[d]\n\t"
1066:../src/wolfcrypt/src/sp_int.c ****         "subs	r4, %[lo], r4\n\t"
1067:../src/wolfcrypt/src/sp_int.c ****         "sbc	r5, %[hi], r5\n\t"
1068:../src/wolfcrypt/src/sp_int.c ****         "add	%[r], %[r], r5\n\t"
1069:../src/wolfcrypt/src/sp_int.c ****         "umull	r4, r5, %[r], %[d]\n\t"
1070:../src/wolfcrypt/src/sp_int.c ****         "subs	r4, %[lo], r4\n\t"
1071:../src/wolfcrypt/src/sp_int.c ****         "sbc	r5, %[hi], r5\n\t"
1072:../src/wolfcrypt/src/sp_int.c ****         "add	%[r], %[r], r5\n\t"
1073:../src/wolfcrypt/src/sp_int.c **** 
1074:../src/wolfcrypt/src/sp_int.c ****         /* Add 1 to result if bottom half of difference is >= d. */
1075:../src/wolfcrypt/src/sp_int.c ****         "mul	r4, %[r], %[d]\n\t"
1076:../src/wolfcrypt/src/sp_int.c ****         "subs	r4, %[lo], r4\n\t"
1077:../src/wolfcrypt/src/sp_int.c ****         "subs	r9, %[d], r4\n\t"
1078:../src/wolfcrypt/src/sp_int.c ****         "sbc	r8, r8, r8\n\t"
1079:../src/wolfcrypt/src/sp_int.c ****         "sub	%[r], %[r], r8\n\t"
1080:../src/wolfcrypt/src/sp_int.c ****         "subs	r9, r9, #1\n\t"
1081:../src/wolfcrypt/src/sp_int.c ****         "sbc	r8, r8, r8\n\t"
1082:../src/wolfcrypt/src/sp_int.c ****         "sub	%[r], %[r], r8\n\t"
1083:../src/wolfcrypt/src/sp_int.c ****         : [r] "+r" (r), [hi] "+r" (hi), [lo] "+r" (lo), [d] "+r" (d)
1084:../src/wolfcrypt/src/sp_int.c ****         :
1085:../src/wolfcrypt/src/sp_int.c ****         : "r4", "r5", "r6", "r8", "r9"
1086:../src/wolfcrypt/src/sp_int.c ****     );
1087:../src/wolfcrypt/src/sp_int.c **** 
1088:../src/wolfcrypt/src/sp_int.c ****     return r;
1089:../src/wolfcrypt/src/sp_int.c **** }
1090:../src/wolfcrypt/src/sp_int.c **** #else
1091:../src/wolfcrypt/src/sp_int.c **** /* Divide a two digit number by a digit number and return. (hi | lo) / d
1092:../src/wolfcrypt/src/sp_int.c ****  *
1093:../src/wolfcrypt/src/sp_int.c ****  * Using udiv instruction on arm32
1094:../src/wolfcrypt/src/sp_int.c ****  * Constant time.
1095:../src/wolfcrypt/src/sp_int.c ****  *
1096:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  hi  SP integer digit. High digit of the dividend.
1097:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  lo  SP integer digit. Lower digit of the dividend.
1098:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  d   SP integer digit. Number to divide by.
1099:../src/wolfcrypt/src/sp_int.c ****  * @return  The division result.
1100:../src/wolfcrypt/src/sp_int.c ****  */
1101:../src/wolfcrypt/src/sp_int.c **** static WC_INLINE sp_int_digit sp_div_word(sp_int_digit hi, sp_int_digit lo,
1102:../src/wolfcrypt/src/sp_int.c ****                                           sp_int_digit d)
1103:../src/wolfcrypt/src/sp_int.c **** {
1104:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (
1105:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r3, %[d], #24\n\t"
1106:../src/wolfcrypt/src/sp_int.c **** 	"it	eq\n\t"
1107:../src/wolfcrypt/src/sp_int.c ****         "moveq	r3, #8\n\t"
1108:../src/wolfcrypt/src/sp_int.c **** 	"it	ne\n\t"
1109:../src/wolfcrypt/src/sp_int.c ****         "movne	r3, #0\n\t"
1110:../src/wolfcrypt/src/sp_int.c ****         "rsb	r4, r3, #31\n\t"
1111:../src/wolfcrypt/src/sp_int.c ****         "lsl	%[d], %[d], r3\n\t"
1112:../src/wolfcrypt/src/sp_int.c ****         "lsl	%[hi], %[hi], r3\n\t"
1113:../src/wolfcrypt/src/sp_int.c ****         "lsr	r5, %[lo], r4\n\t"
1114:../src/wolfcrypt/src/sp_int.c ****         "lsl	%[lo], %[lo], r3\n\t"
1115:../src/wolfcrypt/src/sp_int.c ****         "orr	%[hi], %[hi], r5, lsr #1\n\t"
1116:../src/wolfcrypt/src/sp_int.c **** 
1117:../src/wolfcrypt/src/sp_int.c ****         "lsr	r5, %[d], 16\n\t"
1118:../src/wolfcrypt/src/sp_int.c ****         "add	r5, r5, 1\n\t"
1119:../src/wolfcrypt/src/sp_int.c **** 
1120:../src/wolfcrypt/src/sp_int.c ****         "udiv	r3, %[hi], r5\n\t"
1121:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r3, 16\n\t"
1122:../src/wolfcrypt/src/sp_int.c ****         "umull	r4, r3, %[d], r6\n\t"
1123:../src/wolfcrypt/src/sp_int.c ****         "subs	%[lo], %[lo], r4\n\t"
1124:../src/wolfcrypt/src/sp_int.c ****         "sbc	%[hi], %[hi], r3\n\t"
1125:../src/wolfcrypt/src/sp_int.c **** 
1126:../src/wolfcrypt/src/sp_int.c ****         "udiv	r3, %[hi], r5\n\t"
1127:../src/wolfcrypt/src/sp_int.c ****         "lsl	r3, r3, 16\n\t"
1128:../src/wolfcrypt/src/sp_int.c ****         "add	r6, r6, r3\n\t"
1129:../src/wolfcrypt/src/sp_int.c ****         "umull	r4, r3, %[d], r3\n\t"
1130:../src/wolfcrypt/src/sp_int.c ****         "subs	%[lo], %[lo], r4\n\t"
1131:../src/wolfcrypt/src/sp_int.c ****         "sbc	%[hi], %[hi], r3\n\t"
1132:../src/wolfcrypt/src/sp_int.c **** 
1133:../src/wolfcrypt/src/sp_int.c ****         "lsr	r3, %[lo], 16\n\t"
1134:../src/wolfcrypt/src/sp_int.c ****         "orr	r3, r3, %[hi], lsl 16\n\t"
1135:../src/wolfcrypt/src/sp_int.c **** 
1136:../src/wolfcrypt/src/sp_int.c ****         "udiv	r3, r3, r5\n\t"
1137:../src/wolfcrypt/src/sp_int.c ****         "add	r6, r6, r3\n\t"
1138:../src/wolfcrypt/src/sp_int.c ****         "umull	r4, r3, %[d], r3\n\t"
1139:../src/wolfcrypt/src/sp_int.c ****         "subs	%[lo], %[lo], r4\n\t"
1140:../src/wolfcrypt/src/sp_int.c ****         "sbc	%[hi], %[hi], r3\n\t"
1141:../src/wolfcrypt/src/sp_int.c **** 
1142:../src/wolfcrypt/src/sp_int.c ****         "lsr	r3, %[lo], 16\n\t"
1143:../src/wolfcrypt/src/sp_int.c ****         "orr	r3, r3, %[hi], lsl 16\n\t"
1144:../src/wolfcrypt/src/sp_int.c **** 
1145:../src/wolfcrypt/src/sp_int.c ****         "udiv	r3, r3, r5\n\t"
1146:../src/wolfcrypt/src/sp_int.c ****         "add	r6, r6, r3\n\t"
1147:../src/wolfcrypt/src/sp_int.c ****         "mul	r4, %[d], r3\n\t"
1148:../src/wolfcrypt/src/sp_int.c ****         "sub	%[lo], %[lo], r4\n\t"
1149:../src/wolfcrypt/src/sp_int.c **** 
1150:../src/wolfcrypt/src/sp_int.c ****         "udiv	r3, %[lo], %[d]\n\t"
1151:../src/wolfcrypt/src/sp_int.c ****         "add	%[hi], r6, r3\n\t"
1152:../src/wolfcrypt/src/sp_int.c **** 
1153:../src/wolfcrypt/src/sp_int.c ****         : [hi] "+r" (hi), [lo] "+r" (lo), [d] "+r" (d)
1154:../src/wolfcrypt/src/sp_int.c ****         :
1155:../src/wolfcrypt/src/sp_int.c ****         : "r3", "r4", "r5", "r6"
1156:../src/wolfcrypt/src/sp_int.c ****     );
1157:../src/wolfcrypt/src/sp_int.c **** 
1158:../src/wolfcrypt/src/sp_int.c ****     return hi;
1159:../src/wolfcrypt/src/sp_int.c **** }
1160:../src/wolfcrypt/src/sp_int.c **** #endif
1161:../src/wolfcrypt/src/sp_int.c **** 
1162:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_DIV_WORD
1163:../src/wolfcrypt/src/sp_int.c **** #endif
1164:../src/wolfcrypt/src/sp_int.c **** 
1165:../src/wolfcrypt/src/sp_int.c **** #define SP_INT_ASM_AVAILABLE
1166:../src/wolfcrypt/src/sp_int.c **** 
1167:../src/wolfcrypt/src/sp_int.c ****     #endif /* (WOLFSSL_SP_ARM32 || ARM_CORTEX_M) && SP_WORD_SIZE == 32 */
1168:../src/wolfcrypt/src/sp_int.c **** 
1169:../src/wolfcrypt/src/sp_int.c ****     #if defined(WOLFSSL_SP_ARM_THUMB) && SP_WORD_SIZE == 32
1170:../src/wolfcrypt/src/sp_int.c **** /*
1171:../src/wolfcrypt/src/sp_int.c ****  * CPU: ARM Thumb (like Cortex-M0)
1172:../src/wolfcrypt/src/sp_int.c ****  */
1173:../src/wolfcrypt/src/sp_int.c **** 
1174:../src/wolfcrypt/src/sp_int.c **** /* Compile with -fomit-frame-pointer, or similar, if compiler complains about
1175:../src/wolfcrypt/src/sp_int.c ****  * usage of register 'r7'.
1176:../src/wolfcrypt/src/sp_int.c ****  */
1177:../src/wolfcrypt/src/sp_int.c **** 
1178:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__)
1179:../src/wolfcrypt/src/sp_int.c **** 
1180:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
1181:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
1182:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1183:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1184:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1185:../src/wolfcrypt/src/sp_int.c ****         "uxth	%[l], %[b]		\n\t"            \
1186:../src/wolfcrypt/src/sp_int.c ****         "muls	%[l], r6		\n\t"            \
1187:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1188:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, %[b], #16		\n\t"            \
1189:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r4			\n\t"            \
1190:../src/wolfcrypt/src/sp_int.c ****         "lsrs	%[h], r6, #16		\n\t"            \
1191:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1192:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1193:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1194:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1195:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1196:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1197:../src/wolfcrypt/src/sp_int.c ****         "muls	r4, r6			\n\t"            \
1198:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r4		\n\t"            \
1199:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1200:../src/wolfcrypt/src/sp_int.c ****         "uxth	r4, %[b]		\n\t"            \
1201:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r4			\n\t"            \
1202:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, r6, #16		\n\t"            \
1203:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1204:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1205:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r4		\n\t"            \
1206:../src/wolfcrypt/src/sp_int.c ****         : [h] "+l" (vh), [l] "+l" (vl)                   \
1207:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1208:../src/wolfcrypt/src/sp_int.c ****         : "r4", "r5", "r6", "cc"                         \
1209:../src/wolfcrypt/src/sp_int.c ****     )
1210:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
1211:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
1212:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1213:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1214:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1215:../src/wolfcrypt/src/sp_int.c ****         "uxth	%[l], %[b]		\n\t"            \
1216:../src/wolfcrypt/src/sp_int.c ****         "muls	%[l], r6		\n\t"            \
1217:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1218:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1219:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7			\n\t"            \
1220:../src/wolfcrypt/src/sp_int.c ****         "lsrs	%[h], r6, #16		\n\t"            \
1221:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1222:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1223:../src/wolfcrypt/src/sp_int.c ****         "movs	%[o], #0		\n\t"            \
1224:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[o]		\n\t"            \
1225:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1226:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1227:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6			\n\t"            \
1228:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r7		\n\t"            \
1229:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1230:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1231:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7			\n\t"            \
1232:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1233:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1234:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1235:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1236:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1237:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1238:../src/wolfcrypt/src/sp_int.c ****         : "r6", "r7", "cc"                               \
1239:../src/wolfcrypt/src/sp_int.c ****     )
1240:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_SMALL
1241:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
1242:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
1243:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1244:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1245:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1246:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1247:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6			\n\t"            \
1248:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r7		\n\t"            \
1249:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1250:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1251:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1252:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1253:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1254:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7			\n\t"            \
1255:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1256:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1257:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1258:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1259:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1260:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1261:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1262:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1263:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6			\n\t"            \
1264:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r7		\n\t"            \
1265:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1266:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1267:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1268:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7			\n\t"            \
1269:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1270:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1271:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1272:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1273:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1274:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1275:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1276:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "r7", "cc"                         \
1277:../src/wolfcrypt/src/sp_int.c ****     )
1278:../src/wolfcrypt/src/sp_int.c **** #else
1279:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
1280:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
1281:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1282:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1283:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1284:../src/wolfcrypt/src/sp_int.c ****         "uxth	r5, %[b]		\n\t"            \
1285:../src/wolfcrypt/src/sp_int.c ****         "muls	r5, r6			\n\t"            \
1286:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r5		\n\t"            \
1287:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1288:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1289:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1290:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1291:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, %[b], #16		\n\t"            \
1292:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r5			\n\t"            \
1293:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, r6, #16		\n\t"            \
1294:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1295:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1296:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1297:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1298:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1299:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1300:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1301:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, %[b], #16		\n\t"            \
1302:../src/wolfcrypt/src/sp_int.c ****         "muls	r5, r6			\n\t"            \
1303:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r5		\n\t"            \
1304:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1305:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1306:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1307:../src/wolfcrypt/src/sp_int.c ****         "uxth	r5, %[b]		\n\t"            \
1308:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r5			\n\t"            \
1309:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, r6, #16		\n\t"            \
1310:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1311:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1312:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1313:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1314:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1315:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1316:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1317:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "cc"                               \
1318:../src/wolfcrypt/src/sp_int.c ****     )
1319:../src/wolfcrypt/src/sp_int.c **** #endif
1320:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
1321:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
1322:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1323:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1324:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1325:../src/wolfcrypt/src/sp_int.c ****         "uxth	r4, %[b]		\n\t"            \
1326:../src/wolfcrypt/src/sp_int.c ****         "muls	r4, r6			\n\t"            \
1327:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r4		\n\t"            \
1328:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1329:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1330:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1331:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, %[b], #16		\n\t"            \
1332:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r4			\n\t"            \
1333:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, r6, #16		\n\t"            \
1334:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1335:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1336:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r4		\n\t"            \
1337:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1338:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1339:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, %[b], #16		\n\t"            \
1340:../src/wolfcrypt/src/sp_int.c ****         "muls	r4, r6			\n\t"            \
1341:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r4		\n\t"            \
1342:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1343:../src/wolfcrypt/src/sp_int.c ****         "uxth	r4, %[b]		\n\t"            \
1344:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r4			\n\t"            \
1345:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, r6, #16		\n\t"            \
1346:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1347:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1348:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r4		\n\t"            \
1349:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh)                   \
1350:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1351:../src/wolfcrypt/src/sp_int.c ****         : "r4", "r5", "r6", "cc"                         \
1352:../src/wolfcrypt/src/sp_int.c ****     )
1353:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_SMALL
1354:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
1355:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
1356:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1357:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1358:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1359:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1360:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6			\n\t"            \
1361:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r7		\n\t"            \
1362:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1363:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1364:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1365:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r7		\n\t"            \
1366:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1367:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1368:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1369:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1370:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7			\n\t"            \
1371:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1372:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1373:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1374:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1375:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1376:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1377:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1378:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1379:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1380:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1381:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1382:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6			\n\t"            \
1383:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r7		\n\t"            \
1384:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1385:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r7		\n\t"            \
1386:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1387:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1388:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1389:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7			\n\t"            \
1390:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1391:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1392:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1393:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1394:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1395:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1396:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1397:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1398:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1399:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1400:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "r7", "cc"                         \
1401:../src/wolfcrypt/src/sp_int.c ****     )
1402:../src/wolfcrypt/src/sp_int.c **** #else
1403:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
1404:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
1405:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1406:../src/wolfcrypt/src/sp_int.c ****         "movs	r8, %[a]		\n\t"            \
1407:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1408:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1409:../src/wolfcrypt/src/sp_int.c ****         "uxth	r5, %[b]		\n\t"            \
1410:../src/wolfcrypt/src/sp_int.c ****         "muls	r5, r6			\n\t"            \
1411:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r5		\n\t"            \
1412:../src/wolfcrypt/src/sp_int.c ****         "movs	%[a], #0		\n\t"            \
1413:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[a]		\n\t"            \
1414:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[a]		\n\t"            \
1415:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r5		\n\t"            \
1416:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[a]		\n\t"            \
1417:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[a]		\n\t"            \
1418:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1419:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, %[b], #16		\n\t"            \
1420:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r5			\n\t"            \
1421:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, r6, #16		\n\t"            \
1422:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1423:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1424:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1425:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[a]		\n\t"            \
1426:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1427:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1428:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[a]		\n\t"            \
1429:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1430:../src/wolfcrypt/src/sp_int.c ****         "movs	%[a], r8		\n\t"            \
1431:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1432:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, %[b], #16		\n\t"            \
1433:../src/wolfcrypt/src/sp_int.c ****         "muls	r5, r6			\n\t"            \
1434:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r5		\n\t"            \
1435:../src/wolfcrypt/src/sp_int.c ****         "movs	%[a], #0		\n\t"            \
1436:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[a]		\n\t"            \
1437:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r5		\n\t"            \
1438:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[a]		\n\t"            \
1439:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1440:../src/wolfcrypt/src/sp_int.c ****         "uxth	r5, %[b]		\n\t"            \
1441:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r5			\n\t"            \
1442:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, r6, #16		\n\t"            \
1443:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1444:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1445:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1446:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[a]		\n\t"            \
1447:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1448:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1449:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[a]		\n\t"            \
1450:../src/wolfcrypt/src/sp_int.c ****         "movs	%[a], r8		\n\t"            \
1451:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1452:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1453:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "r8", "cc"                         \
1454:../src/wolfcrypt/src/sp_int.c ****     )
1455:../src/wolfcrypt/src/sp_int.c **** #endif
1456:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
1457:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
1458:../src/wolfcrypt/src/sp_int.c ****  */
1459:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
1460:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1461:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1462:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1463:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1464:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6			\n\t"            \
1465:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r7		\n\t"            \
1466:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1467:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1468:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r7		\n\t"            \
1469:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1470:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1471:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1472:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7			\n\t"            \
1473:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1474:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1475:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1476:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1477:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1478:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1479:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1480:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1481:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1482:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1483:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6			\n\t"            \
1484:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r7		\n\t"            \
1485:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1486:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r7		\n\t"            \
1487:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1488:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1489:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1490:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7			\n\t"            \
1491:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1492:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1493:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1494:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1495:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1496:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1497:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1498:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1499:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1500:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1501:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "r7", "cc"                         \
1502:../src/wolfcrypt/src/sp_int.c ****     )
1503:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
1504:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
1505:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1506:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, %[a], #16		\n\t"            \
1507:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1508:../src/wolfcrypt/src/sp_int.c ****         "mov	%[l], r6		\n\t"            \
1509:../src/wolfcrypt/src/sp_int.c ****         "mov	%[h], r5		\n\t"            \
1510:../src/wolfcrypt/src/sp_int.c ****         /* al * al */                                    \
1511:../src/wolfcrypt/src/sp_int.c ****         "muls	%[l], %[l]		\n\t"            \
1512:../src/wolfcrypt/src/sp_int.c ****         /* ah * ah */                                    \
1513:../src/wolfcrypt/src/sp_int.c ****         "muls	%[h], %[h]		\n\t"            \
1514:../src/wolfcrypt/src/sp_int.c ****         /* 2 * al * ah */                                \
1515:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r5			\n\t"            \
1516:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, r6, #15		\n\t"            \
1517:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #17		\n\t"            \
1518:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1519:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1520:../src/wolfcrypt/src/sp_int.c ****         : [h] "+l" (vh), [l] "+l" (vl)                   \
1521:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
1522:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "cc"                               \
1523:../src/wolfcrypt/src/sp_int.c ****     )
1524:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
1525:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
1526:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1527:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, %[a], #16		\n\t"            \
1528:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1529:../src/wolfcrypt/src/sp_int.c ****         /* al * al */                                    \
1530:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r6			\n\t"            \
1531:../src/wolfcrypt/src/sp_int.c ****         /* ah * ah */                                    \
1532:../src/wolfcrypt/src/sp_int.c ****         "muls	r4, r4			\n\t"            \
1533:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1534:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r4		\n\t"            \
1535:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1536:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1537:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, %[a], #16		\n\t"            \
1538:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1539:../src/wolfcrypt/src/sp_int.c ****         /* 2 * al * ah */                                \
1540:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r4			\n\t"            \
1541:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, r6, #15		\n\t"            \
1542:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #17		\n\t"            \
1543:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1544:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r4		\n\t"            \
1545:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], r5		\n\t"            \
1546:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1547:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
1548:../src/wolfcrypt/src/sp_int.c ****         : "r4", "r5", "r6", "cc"                         \
1549:../src/wolfcrypt/src/sp_int.c ****     )
1550:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
1551:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
1552:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1553:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[a], #16		\n\t"            \
1554:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1555:../src/wolfcrypt/src/sp_int.c ****         /* al * al */                                    \
1556:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r6			\n\t"            \
1557:../src/wolfcrypt/src/sp_int.c ****         /* ah * ah */                                    \
1558:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r7			\n\t"            \
1559:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1560:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1561:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[a], #16		\n\t"            \
1562:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1563:../src/wolfcrypt/src/sp_int.c ****         /* 2 * al * ah */                                \
1564:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7			\n\t"            \
1565:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #15		\n\t"            \
1566:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #17		\n\t"            \
1567:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1568:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r7		\n\t"            \
1569:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh)                   \
1570:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
1571:../src/wolfcrypt/src/sp_int.c ****         : "r6", "r7", "cc"                               \
1572:../src/wolfcrypt/src/sp_int.c ****     )
1573:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
1574:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
1575:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1576:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], %[a]	\n\t"            \
1577:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1578:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], r5		\n\t"            \
1579:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh)                   \
1580:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
1581:../src/wolfcrypt/src/sp_int.c ****         : "r5", "cc"                                     \
1582:../src/wolfcrypt/src/sp_int.c ****     )
1583:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
1584:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
1585:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1586:../src/wolfcrypt/src/sp_int.c ****         "subs	%[l], %[l], %[a]	\n\t"            \
1587:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1588:../src/wolfcrypt/src/sp_int.c ****         "sbcs	%[h], r5		\n\t"            \
1589:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh)                   \
1590:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
1591:../src/wolfcrypt/src/sp_int.c ****         : "r5", "cc"                                     \
1592:../src/wolfcrypt/src/sp_int.c ****     )
1593:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
1594:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
1595:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1596:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], %[a]	\n\t"            \
1597:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[b]		\n\t"            \
1598:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[c]		\n\t"            \
1599:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], %[a]	\n\t"            \
1600:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[b]		\n\t"            \
1601:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[c]		\n\t"            \
1602:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1603:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb), [c] "l" (vc)       \
1604:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
1605:../src/wolfcrypt/src/sp_int.c ****     )
1606:../src/wolfcrypt/src/sp_int.c **** 
1607:../src/wolfcrypt/src/sp_int.c **** #elif defined(WOLFSSL_KEIL)
1608:../src/wolfcrypt/src/sp_int.c **** 
1609:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
1610:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
1611:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1612:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1613:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1614:../src/wolfcrypt/src/sp_int.c ****         "uxth	%[l], %[b]		\n\t"            \
1615:../src/wolfcrypt/src/sp_int.c ****         "muls	%[l], r6, %[l]		\n\t"            \
1616:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1617:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, %[b], #16		\n\t"            \
1618:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r4, r6		\n\t"            \
1619:../src/wolfcrypt/src/sp_int.c ****         "lsrs	%[h], r6, #16		\n\t"            \
1620:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1621:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1622:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1623:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
1624:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1625:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1626:../src/wolfcrypt/src/sp_int.c ****         "muls	r4, r6, r4		\n\t"            \
1627:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r4		\n\t"            \
1628:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1629:../src/wolfcrypt/src/sp_int.c ****         "uxth	r4, %[b]		\n\t"            \
1630:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r4, r6		\n\t"            \
1631:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, r6, #16		\n\t"            \
1632:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1633:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1634:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r4		\n\t"            \
1635:../src/wolfcrypt/src/sp_int.c ****         : [h] "+l" (vh), [l] "+l" (vl)                   \
1636:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1637:../src/wolfcrypt/src/sp_int.c ****         : "r4", "r5", "r6", "cc"                         \
1638:../src/wolfcrypt/src/sp_int.c ****     )
1639:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
1640:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
1641:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1642:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1643:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1644:../src/wolfcrypt/src/sp_int.c ****         "uxth	%[l], %[b]		\n\t"            \
1645:../src/wolfcrypt/src/sp_int.c ****         "muls	%[l], r6, %[l]		\n\t"            \
1646:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1647:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1648:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7, r6		\n\t"            \
1649:../src/wolfcrypt/src/sp_int.c ****         "lsrs	%[h], r6, #16		\n\t"            \
1650:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1651:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1652:../src/wolfcrypt/src/sp_int.c ****         "movs	%[o], #0		\n\t"            \
1653:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], %[o]	\n\t"            \
1654:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1655:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1656:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6, r7		\n\t"            \
1657:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r7		\n\t"            \
1658:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1659:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1660:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7, r6		\n\t"            \
1661:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1662:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1663:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1664:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1665:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1666:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1667:../src/wolfcrypt/src/sp_int.c ****         : "r6", "r7", "cc"                               \
1668:../src/wolfcrypt/src/sp_int.c ****     )
1669:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_SMALL
1670:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
1671:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
1672:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1673:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1674:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1675:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1676:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6, r7		\n\t"            \
1677:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r7		\n\t"            \
1678:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1679:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
1680:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1681:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1682:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1683:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7, r6		\n\t"            \
1684:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1685:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1686:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1687:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1688:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1689:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1690:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1691:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1692:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6, r7		\n\t"            \
1693:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r7		\n\t"            \
1694:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1695:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1696:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1697:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7, r6		\n\t"            \
1698:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1699:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1700:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1701:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1702:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1703:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1704:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1705:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "r7", "cc"                         \
1706:../src/wolfcrypt/src/sp_int.c ****     )
1707:../src/wolfcrypt/src/sp_int.c **** #else
1708:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
1709:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1710:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1711:../src/wolfcrypt/src/sp_int.c ****         "uxth   r6, %[a]                \n\t"            \
1712:../src/wolfcrypt/src/sp_int.c ****         "uxth   r5, %[b]                \n\t"            \
1713:../src/wolfcrypt/src/sp_int.c ****         "muls   r5, r6, r5              \n\t"            \
1714:../src/wolfcrypt/src/sp_int.c ****         "adds   %[l], %[l], r5          \n\t"            \
1715:../src/wolfcrypt/src/sp_int.c ****         "movs   r5, #0                  \n\t"            \
1716:../src/wolfcrypt/src/sp_int.c ****         "adcs   %[h], %[h], r5          \n\t"            \
1717:../src/wolfcrypt/src/sp_int.c ****         "adcs   %[o], %[o], r5          \n\t"            \
1718:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1719:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r5, %[b], #16           \n\t"            \
1720:../src/wolfcrypt/src/sp_int.c ****         "muls   r6, r5, r6              \n\t"            \
1721:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r5, r6, #16             \n\t"            \
1722:../src/wolfcrypt/src/sp_int.c ****         "lsls   r6, r6, #16             \n\t"            \
1723:../src/wolfcrypt/src/sp_int.c ****         "adds   %[l], %[l], r6          \n\t"            \
1724:../src/wolfcrypt/src/sp_int.c ****         "adcs   %[h], %[h], r5          \n\t"            \
1725:../src/wolfcrypt/src/sp_int.c ****         "movs   r5, #0                  \n\t"            \
1726:../src/wolfcrypt/src/sp_int.c ****         "adcs   %[o], %[o], r5          \n\t"            \
1727:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1728:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r6, %[a], #16           \n\t"            \
1729:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r5, %[b], #16           \n\t"            \
1730:../src/wolfcrypt/src/sp_int.c ****         "muls   r5, r6, r5              \n\t"            \
1731:../src/wolfcrypt/src/sp_int.c ****         "adds   %[h], %[h], r5          \n\t"            \
1732:../src/wolfcrypt/src/sp_int.c ****         "movs   r5, #0                  \n\t"            \
1733:../src/wolfcrypt/src/sp_int.c ****         "adcs   %[o], %[o], r5          \n\t"            \
1734:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1735:../src/wolfcrypt/src/sp_int.c ****         "uxth   r5, %[b]                \n\t"            \
1736:../src/wolfcrypt/src/sp_int.c ****         "muls   r6, r5, r6              \n\t"            \
1737:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r5, r6, #16             \n\t"            \
1738:../src/wolfcrypt/src/sp_int.c ****         "lsls   r6, r6, #16             \n\t"            \
1739:../src/wolfcrypt/src/sp_int.c ****         "adds   %[l], %[l], r6          \n\t"            \
1740:../src/wolfcrypt/src/sp_int.c ****         "adcs   %[h], %[h], r5          \n\t"            \
1741:../src/wolfcrypt/src/sp_int.c ****         "movs   r5, #0                  \n\t"            \
1742:../src/wolfcrypt/src/sp_int.c ****         "adcs   %[o], %[o], r5          \n\t"            \
1743:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1744:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1745:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "cc"                               \
1746:../src/wolfcrypt/src/sp_int.c ****     )
1747:../src/wolfcrypt/src/sp_int.c **** #endif
1748:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
1749:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
1750:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1751:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1752:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1753:../src/wolfcrypt/src/sp_int.c ****         "uxth	r4, %[b]		\n\t"            \
1754:../src/wolfcrypt/src/sp_int.c ****         "muls	r4, r6, r4		\n\t"            \
1755:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r4		\n\t"            \
1756:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1757:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
1758:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1759:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, %[b], #16		\n\t"            \
1760:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r4, r6		\n\t"            \
1761:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, r6, #16		\n\t"            \
1762:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1763:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1764:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r4		\n\t"            \
1765:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1766:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1767:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, %[b], #16		\n\t"            \
1768:../src/wolfcrypt/src/sp_int.c ****         "muls	r4, r6, r4		\n\t"            \
1769:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r4		\n\t"            \
1770:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1771:../src/wolfcrypt/src/sp_int.c ****         "uxth	r4, %[b]		\n\t"            \
1772:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r4, r6		\n\t"            \
1773:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, r6, #16		\n\t"            \
1774:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1775:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1776:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r4		\n\t"            \
1777:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh)                   \
1778:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1779:../src/wolfcrypt/src/sp_int.c ****         : "r4", "r5", "r6", "cc"                         \
1780:../src/wolfcrypt/src/sp_int.c ****     )
1781:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_SMALL
1782:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
1783:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
1784:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1785:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1786:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1787:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1788:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6, r7		\n\t"            \
1789:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r7		\n\t"            \
1790:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1791:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
1792:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1793:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r7		\n\t"            \
1794:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
1795:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1796:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1797:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1798:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7, r6		\n\t"            \
1799:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1800:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1801:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1802:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1803:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1804:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1805:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1806:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1807:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1808:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1809:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1810:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6, r7		\n\t"            \
1811:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r7		\n\t"            \
1812:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1813:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r7		\n\t"            \
1814:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1815:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1816:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1817:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7, r6		\n\t"            \
1818:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1819:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1820:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1821:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1822:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1823:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1824:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1825:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1826:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1827:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1828:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "r7", "cc"                         \
1829:../src/wolfcrypt/src/sp_int.c ****     )
1830:../src/wolfcrypt/src/sp_int.c **** #else
1831:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
1832:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
1833:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1834:../src/wolfcrypt/src/sp_int.c ****         "movs	r8, %[a]		\n\t"            \
1835:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1836:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1837:../src/wolfcrypt/src/sp_int.c ****         "uxth	r5, %[b]		\n\t"            \
1838:../src/wolfcrypt/src/sp_int.c ****         "muls	r5, r6, r5		\n\t"            \
1839:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r5		\n\t"            \
1840:../src/wolfcrypt/src/sp_int.c ****         "movs	%[a], #0		\n\t"            \
1841:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], %[a]	\n\t"            \
1842:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], %[a]	\n\t"            \
1843:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r5		\n\t"            \
1844:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], %[a]	\n\t"            \
1845:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], %[a]	\n\t"            \
1846:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1847:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, %[b], #16		\n\t"            \
1848:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r5, r6		\n\t"            \
1849:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, r6, #16		\n\t"            \
1850:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1851:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1852:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
1853:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], %[a]	\n\t"            \
1854:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1855:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
1856:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], %[a]	\n\t"            \
1857:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1858:../src/wolfcrypt/src/sp_int.c ****         "movs	%[a], r8		\n\t"            \
1859:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1860:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, %[b], #16		\n\t"            \
1861:../src/wolfcrypt/src/sp_int.c ****         "muls	r5, r6, r5		\n\t"            \
1862:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r5		\n\t"            \
1863:../src/wolfcrypt/src/sp_int.c ****         "movs	%[a], #0		\n\t"            \
1864:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], %[a]	\n\t"            \
1865:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r5		\n\t"            \
1866:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], %[a]	\n\t"            \
1867:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1868:../src/wolfcrypt/src/sp_int.c ****         "uxth	r5, %[b]		\n\t"            \
1869:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r5, r6		\n\t"            \
1870:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, r6, #16		\n\t"            \
1871:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1872:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1873:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
1874:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], %[a]	\n\t"            \
1875:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1876:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
1877:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], %[a]	\n\t"            \
1878:../src/wolfcrypt/src/sp_int.c ****         "movs	%[a], r8		\n\t"            \
1879:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1880:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1881:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "r8", "cc"                         \
1882:../src/wolfcrypt/src/sp_int.c ****     )
1883:../src/wolfcrypt/src/sp_int.c **** #endif
1884:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
1885:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
1886:../src/wolfcrypt/src/sp_int.c ****  */
1887:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
1888:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1889:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
1890:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1891:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1892:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6, r7		\n\t"            \
1893:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r7		\n\t"            \
1894:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1895:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
1896:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r7		\n\t"            \
1897:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
1898:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
1899:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1900:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7, r6		\n\t"            \
1901:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1902:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1903:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1904:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1905:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1906:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1907:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1908:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
1909:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r6, %[a], #16		\n\t"            \
1910:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[b], #16		\n\t"            \
1911:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r6, r7		\n\t"            \
1912:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r7		\n\t"            \
1913:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1914:../src/wolfcrypt/src/sp_int.c ****         "adds	%[h], %[h], r7		\n\t"            \
1915:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1916:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
1917:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
1918:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7, r6		\n\t"            \
1919:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #16		\n\t"            \
1920:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #16		\n\t"            \
1921:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1922:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1923:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1924:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1925:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1926:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1927:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1928:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
1929:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "r7", "cc"                         \
1930:../src/wolfcrypt/src/sp_int.c ****     )
1931:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
1932:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
1933:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1934:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, %[a], #16		\n\t"            \
1935:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1936:../src/wolfcrypt/src/sp_int.c ****         "mov	%[l], r6		\n\t"            \
1937:../src/wolfcrypt/src/sp_int.c ****         "mov	%[h], r5		\n\t"            \
1938:../src/wolfcrypt/src/sp_int.c ****         /* al * al */                                    \
1939:../src/wolfcrypt/src/sp_int.c ****         "muls	%[l], %[l], %[l]	\n\t"            \
1940:../src/wolfcrypt/src/sp_int.c ****         /* ah * ah */                                    \
1941:../src/wolfcrypt/src/sp_int.c ****         "muls	%[h], %[h], %[h]	\n\t"            \
1942:../src/wolfcrypt/src/sp_int.c ****         /* 2 * al * ah */                                \
1943:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r5, r6		\n\t"            \
1944:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, r6, #15		\n\t"            \
1945:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #17		\n\t"            \
1946:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1947:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
1948:../src/wolfcrypt/src/sp_int.c ****         : [h] "+l" (vh), [l] "+l" (vl)                   \
1949:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
1950:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "cc"                               \
1951:../src/wolfcrypt/src/sp_int.c ****     )
1952:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
1953:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
1954:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1955:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, %[a], #16		\n\t"            \
1956:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1957:../src/wolfcrypt/src/sp_int.c ****         /* al * al */                                    \
1958:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r6, r6		\n\t"            \
1959:../src/wolfcrypt/src/sp_int.c ****         /* ah * ah */                                    \
1960:../src/wolfcrypt/src/sp_int.c ****         "muls	r4, r4, r4		\n\t"            \
1961:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1962:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r4		\n\t"            \
1963:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
1964:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1965:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, %[a], #16		\n\t"            \
1966:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1967:../src/wolfcrypt/src/sp_int.c ****         /* 2 * al * ah */                                \
1968:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r4, r6		\n\t"            \
1969:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r4, r6, #15		\n\t"            \
1970:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #17		\n\t"            \
1971:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1972:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r4		\n\t"            \
1973:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], r5		\n\t"            \
1974:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
1975:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
1976:../src/wolfcrypt/src/sp_int.c ****         : "r4", "r5", "r6", "cc"                         \
1977:../src/wolfcrypt/src/sp_int.c ****     )
1978:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
1979:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
1980:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
1981:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[a], #16		\n\t"            \
1982:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1983:../src/wolfcrypt/src/sp_int.c ****         /* al * al */                                    \
1984:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r6, r6		\n\t"            \
1985:../src/wolfcrypt/src/sp_int.c ****         /* ah * ah */                                    \
1986:../src/wolfcrypt/src/sp_int.c ****         "muls	r7, r7, r7		\n\t"            \
1987:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1988:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1989:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, %[a], #16		\n\t"            \
1990:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
1991:../src/wolfcrypt/src/sp_int.c ****         /* 2 * al * ah */                                \
1992:../src/wolfcrypt/src/sp_int.c ****         "muls	r6, r7, r6		\n\t"            \
1993:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r7, r6, #15		\n\t"            \
1994:../src/wolfcrypt/src/sp_int.c ****         "lsls	r6, r6, #17		\n\t"            \
1995:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], r6		\n\t"            \
1996:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r7		\n\t"            \
1997:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh)                   \
1998:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
1999:../src/wolfcrypt/src/sp_int.c ****         : "r6", "r7", "cc"                               \
2000:../src/wolfcrypt/src/sp_int.c ****     )
2001:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
2002:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
2003:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2004:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], %[a]	\n\t"            \
2005:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
2006:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], r5		\n\t"            \
2007:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh)                   \
2008:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
2009:../src/wolfcrypt/src/sp_int.c ****         : "r5", "cc"                                     \
2010:../src/wolfcrypt/src/sp_int.c ****     )
2011:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
2012:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
2013:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2014:../src/wolfcrypt/src/sp_int.c ****         "subs	%[l], %[l], %[a]	\n\t"            \
2015:../src/wolfcrypt/src/sp_int.c ****         "movs	r5, #0			\n\t"            \
2016:../src/wolfcrypt/src/sp_int.c ****         "sbcs	%[h], %[h], r5		\n\t"            \
2017:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh)                   \
2018:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
2019:../src/wolfcrypt/src/sp_int.c ****         : "r5", "cc"                                     \
2020:../src/wolfcrypt/src/sp_int.c ****     )
2021:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
2022:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
2023:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2024:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], %[a]	\n\t"            \
2025:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], %[b]	\n\t"            \
2026:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], %[c]	\n\t"            \
2027:../src/wolfcrypt/src/sp_int.c ****         "adds	%[l], %[l], %[a]	\n\t"            \
2028:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[h], %[h], %[b]	\n\t"            \
2029:../src/wolfcrypt/src/sp_int.c ****         "adcs	%[o], %[o], %[c]	\n\t"            \
2030:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
2031:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb), [c] "l" (vc)       \
2032:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
2033:../src/wolfcrypt/src/sp_int.c ****     )
2034:../src/wolfcrypt/src/sp_int.c **** 
2035:../src/wolfcrypt/src/sp_int.c **** #elif defined(__GNUC__)
2036:../src/wolfcrypt/src/sp_int.c **** 
2037:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
2038:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
2039:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2040:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
2041:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
2042:../src/wolfcrypt/src/sp_int.c ****         "uxth	%[l], %[b]		\n\t"            \
2043:../src/wolfcrypt/src/sp_int.c ****         "mul	%[l], r6		\n\t"            \
2044:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
2045:../src/wolfcrypt/src/sp_int.c ****         "lsr	r4, %[b], #16		\n\t"            \
2046:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r4			\n\t"            \
2047:../src/wolfcrypt/src/sp_int.c ****         "lsr	%[h], r6, #16		\n\t"            \
2048:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #16		\n\t"            \
2049:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2050:../src/wolfcrypt/src/sp_int.c ****         "mov	r5, #0			\n\t"            \
2051:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r5		\n\t"            \
2052:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
2053:../src/wolfcrypt/src/sp_int.c ****         "lsr	r6, %[a], #16		\n\t"            \
2054:../src/wolfcrypt/src/sp_int.c ****         "mul	r4, r6			\n\t"            \
2055:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], r4		\n\t"            \
2056:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
2057:../src/wolfcrypt/src/sp_int.c ****         "uxth	r4, %[b]		\n\t"            \
2058:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r4			\n\t"            \
2059:../src/wolfcrypt/src/sp_int.c ****         "lsr	r4, r6, #16		\n\t"            \
2060:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #16		\n\t"            \
2061:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2062:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r4		\n\t"            \
2063:../src/wolfcrypt/src/sp_int.c ****         : [h] "+l" (vh), [l] "+l" (vl)                   \
2064:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
2065:../src/wolfcrypt/src/sp_int.c ****         : "r4", "r5", "r6", "cc"                         \
2066:../src/wolfcrypt/src/sp_int.c ****     )
2067:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
2068:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
2069:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2070:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
2071:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
2072:../src/wolfcrypt/src/sp_int.c ****         "uxth	%[l], %[b]		\n\t"            \
2073:../src/wolfcrypt/src/sp_int.c ****         "mul	%[l], r6		\n\t"            \
2074:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
2075:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, %[b], #16		\n\t"            \
2076:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r7			\n\t"            \
2077:../src/wolfcrypt/src/sp_int.c ****         "lsr	%[h], r6, #16		\n\t"            \
2078:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #16		\n\t"            \
2079:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2080:../src/wolfcrypt/src/sp_int.c ****         "mov	%[o], #0		\n\t"            \
2081:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], %[o]		\n\t"            \
2082:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
2083:../src/wolfcrypt/src/sp_int.c ****         "lsr	r6, %[a], #16		\n\t"            \
2084:../src/wolfcrypt/src/sp_int.c ****         "mul	r7, r6			\n\t"            \
2085:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], r7		\n\t"            \
2086:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
2087:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
2088:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r7			\n\t"            \
2089:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, r6, #16		\n\t"            \
2090:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #16		\n\t"            \
2091:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2092:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2093:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
2094:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
2095:../src/wolfcrypt/src/sp_int.c ****         : "r6", "r7", "cc"                               \
2096:../src/wolfcrypt/src/sp_int.c ****     )
2097:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_SMALL
2098:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
2099:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
2100:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2101:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
2102:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
2103:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
2104:../src/wolfcrypt/src/sp_int.c ****         "mul	r7, r6			\n\t"            \
2105:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r7		\n\t"            \
2106:../src/wolfcrypt/src/sp_int.c ****         "mov	r5, #0			\n\t"            \
2107:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r5		\n\t"            \
2108:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2109:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
2110:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, %[b], #16		\n\t"            \
2111:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r7			\n\t"            \
2112:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, r6, #16		\n\t"            \
2113:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #16		\n\t"            \
2114:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2115:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2116:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2117:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
2118:../src/wolfcrypt/src/sp_int.c ****         "lsr	r6, %[a], #16		\n\t"            \
2119:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, %[b], #16		\n\t"            \
2120:../src/wolfcrypt/src/sp_int.c ****         "mul	r7, r6			\n\t"            \
2121:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], r7		\n\t"            \
2122:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2123:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
2124:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
2125:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r7			\n\t"            \
2126:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, r6, #16		\n\t"            \
2127:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #16		\n\t"            \
2128:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2129:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2130:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2131:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
2132:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
2133:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "r7", "cc"                         \
2134:../src/wolfcrypt/src/sp_int.c ****     )
2135:../src/wolfcrypt/src/sp_int.c **** #else
2136:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
2137:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
2138:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2139:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
2140:../src/wolfcrypt/src/sp_int.c ****         "uxth   r6, %[a]                \n\t"            \
2141:../src/wolfcrypt/src/sp_int.c ****         "uxth   r5, %[b]                \n\t"            \
2142:../src/wolfcrypt/src/sp_int.c ****         "mul    r5, r6                  \n\t"            \
2143:../src/wolfcrypt/src/sp_int.c ****         "add    %[l], %[l], r5          \n\t"            \
2144:../src/wolfcrypt/src/sp_int.c ****         "mov    r5, #0                  \n\t"            \
2145:../src/wolfcrypt/src/sp_int.c ****         "adc    %[h], r5                \n\t"            \
2146:../src/wolfcrypt/src/sp_int.c ****         "adc    %[o], r5                \n\t"            \
2147:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
2148:../src/wolfcrypt/src/sp_int.c ****         "lsr    r5, %[b], #16           \n\t"            \
2149:../src/wolfcrypt/src/sp_int.c ****         "mul    r6, r5                  \n\t"            \
2150:../src/wolfcrypt/src/sp_int.c ****         "lsr    r5, r6, #16             \n\t"            \
2151:../src/wolfcrypt/src/sp_int.c ****         "lsl    r6, r6, #16             \n\t"            \
2152:../src/wolfcrypt/src/sp_int.c ****         "add    %[l], %[l], r6          \n\t"            \
2153:../src/wolfcrypt/src/sp_int.c ****         "adc    %[h], r5                \n\t"            \
2154:../src/wolfcrypt/src/sp_int.c ****         "mov    r5, #0                  \n\t"            \
2155:../src/wolfcrypt/src/sp_int.c ****         "adc    %[o], r5                \n\t"            \
2156:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
2157:../src/wolfcrypt/src/sp_int.c ****         "lsr    r6, %[a], #16           \n\t"            \
2158:../src/wolfcrypt/src/sp_int.c ****         "lsr    r5, %[b], #16           \n\t"            \
2159:../src/wolfcrypt/src/sp_int.c ****         "mul    r5, r6                  \n\t"            \
2160:../src/wolfcrypt/src/sp_int.c ****         "add    %[h], %[h], r5          \n\t"            \
2161:../src/wolfcrypt/src/sp_int.c ****         "mov    r5, #0                  \n\t"            \
2162:../src/wolfcrypt/src/sp_int.c ****         "adc    %[o], r5                \n\t"            \
2163:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
2164:../src/wolfcrypt/src/sp_int.c ****         "uxth   r5, %[b]                \n\t"            \
2165:../src/wolfcrypt/src/sp_int.c ****         "mul    r6, r5                  \n\t"            \
2166:../src/wolfcrypt/src/sp_int.c ****         "lsr    r5, r6, #16             \n\t"            \
2167:../src/wolfcrypt/src/sp_int.c ****         "lsl    r6, r6, #16             \n\t"            \
2168:../src/wolfcrypt/src/sp_int.c ****         "add    %[l], %[l], r6          \n\t"            \
2169:../src/wolfcrypt/src/sp_int.c ****         "adc    %[h], r5                \n\t"            \
2170:../src/wolfcrypt/src/sp_int.c ****         "mov    r5, #0                  \n\t"            \
2171:../src/wolfcrypt/src/sp_int.c ****         "adc    %[o], r5                \n\t"            \
2172:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
2173:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
2174:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "cc"                               \
2175:../src/wolfcrypt/src/sp_int.c ****     )
2176:../src/wolfcrypt/src/sp_int.c **** #endif
2177:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
2178:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
2179:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2180:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
2181:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
2182:../src/wolfcrypt/src/sp_int.c ****         "uxth	r4, %[b]		\n\t"            \
2183:../src/wolfcrypt/src/sp_int.c ****         "mul	r4, r6			\n\t"            \
2184:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r4		\n\t"            \
2185:../src/wolfcrypt/src/sp_int.c ****         "mov	r5, #0			\n\t"            \
2186:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r5		\n\t"            \
2187:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
2188:../src/wolfcrypt/src/sp_int.c ****         "lsr	r4, %[b], #16		\n\t"            \
2189:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r4			\n\t"            \
2190:../src/wolfcrypt/src/sp_int.c ****         "lsr	r4, r6, #16		\n\t"            \
2191:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #16		\n\t"            \
2192:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2193:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r4		\n\t"            \
2194:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
2195:../src/wolfcrypt/src/sp_int.c ****         "lsr	r6, %[a], #16		\n\t"            \
2196:../src/wolfcrypt/src/sp_int.c ****         "lsr	r4, %[b], #16		\n\t"            \
2197:../src/wolfcrypt/src/sp_int.c ****         "mul	r4, r6			\n\t"            \
2198:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], r4		\n\t"            \
2199:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
2200:../src/wolfcrypt/src/sp_int.c ****         "uxth	r4, %[b]		\n\t"            \
2201:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r4			\n\t"            \
2202:../src/wolfcrypt/src/sp_int.c ****         "lsr	r4, r6, #16		\n\t"            \
2203:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #16		\n\t"            \
2204:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2205:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r4		\n\t"            \
2206:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh)                   \
2207:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
2208:../src/wolfcrypt/src/sp_int.c ****         : "r4", "r5", "r6", "cc"                         \
2209:../src/wolfcrypt/src/sp_int.c ****     )
2210:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_SMALL
2211:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
2212:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
2213:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2214:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
2215:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
2216:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
2217:../src/wolfcrypt/src/sp_int.c ****         "mul	r7, r6			\n\t"            \
2218:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r7		\n\t"            \
2219:../src/wolfcrypt/src/sp_int.c ****         "mov	r5, #0			\n\t"            \
2220:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r5		\n\t"            \
2221:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2222:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r7		\n\t"            \
2223:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r5		\n\t"            \
2224:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2225:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
2226:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, %[b], #16		\n\t"            \
2227:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r7			\n\t"            \
2228:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, r6, #16		\n\t"            \
2229:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #16		\n\t"            \
2230:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2231:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2232:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2233:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2234:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2235:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2236:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
2237:../src/wolfcrypt/src/sp_int.c ****         "lsr	r6, %[a], #16		\n\t"            \
2238:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, %[b], #16		\n\t"            \
2239:../src/wolfcrypt/src/sp_int.c ****         "mul	r7, r6			\n\t"            \
2240:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], r7		\n\t"            \
2241:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2242:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], r7		\n\t"            \
2243:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2244:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
2245:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
2246:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r7			\n\t"            \
2247:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, r6, #16		\n\t"            \
2248:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #16		\n\t"            \
2249:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2250:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2251:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2252:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2253:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2254:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2255:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
2256:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
2257:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "r7", "cc"                         \
2258:../src/wolfcrypt/src/sp_int.c ****     )
2259:../src/wolfcrypt/src/sp_int.c **** #else
2260:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
2261:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
2262:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2263:../src/wolfcrypt/src/sp_int.c ****         "mov    r8, %[a]                \n\t"            \
2264:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
2265:../src/wolfcrypt/src/sp_int.c ****         "uxth   r6, %[a]                \n\t"            \
2266:../src/wolfcrypt/src/sp_int.c ****         "uxth   r5, %[b]                \n\t"            \
2267:../src/wolfcrypt/src/sp_int.c ****         "mul    r5, r6                  \n\t"            \
2268:../src/wolfcrypt/src/sp_int.c ****         "add    %[l], %[l], r5          \n\t"            \
2269:../src/wolfcrypt/src/sp_int.c ****         "mov    %[a], #0                \n\t"            \
2270:../src/wolfcrypt/src/sp_int.c ****         "adc    %[h], %[a]              \n\t"            \
2271:../src/wolfcrypt/src/sp_int.c ****         "adc    %[o], %[a]              \n\t"            \
2272:../src/wolfcrypt/src/sp_int.c ****         "add    %[l], %[l], r5          \n\t"            \
2273:../src/wolfcrypt/src/sp_int.c ****         "adc    %[h], %[a]              \n\t"            \
2274:../src/wolfcrypt/src/sp_int.c ****         "adc    %[o], %[a]              \n\t"            \
2275:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
2276:../src/wolfcrypt/src/sp_int.c ****         "lsr    r5, %[b], #16           \n\t"            \
2277:../src/wolfcrypt/src/sp_int.c ****         "mul    r6, r5                  \n\t"            \
2278:../src/wolfcrypt/src/sp_int.c ****         "lsr    r5, r6, #16             \n\t"            \
2279:../src/wolfcrypt/src/sp_int.c ****         "lsl    r6, r6, #16             \n\t"            \
2280:../src/wolfcrypt/src/sp_int.c ****         "add    %[l], %[l], r6          \n\t"            \
2281:../src/wolfcrypt/src/sp_int.c ****         "adc    %[h], r5                \n\t"            \
2282:../src/wolfcrypt/src/sp_int.c ****         "adc    %[o], %[a]              \n\t"            \
2283:../src/wolfcrypt/src/sp_int.c ****         "add    %[l], %[l], r6          \n\t"            \
2284:../src/wolfcrypt/src/sp_int.c ****         "adc    %[h], r5                \n\t"            \
2285:../src/wolfcrypt/src/sp_int.c ****         "adc    %[o], %[a]              \n\t"            \
2286:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
2287:../src/wolfcrypt/src/sp_int.c ****         "mov    %[a], r8                \n\t"            \
2288:../src/wolfcrypt/src/sp_int.c ****         "lsr    r6, %[a], #16           \n\t"            \
2289:../src/wolfcrypt/src/sp_int.c ****         "lsr    r5, %[b], #16           \n\t"            \
2290:../src/wolfcrypt/src/sp_int.c ****         "mul    r5, r6                  \n\t"            \
2291:../src/wolfcrypt/src/sp_int.c ****         "add    %[h], %[h], r5          \n\t"            \
2292:../src/wolfcrypt/src/sp_int.c ****         "mov    %[a], #0                \n\t"            \
2293:../src/wolfcrypt/src/sp_int.c ****         "adc    %[o], %[a]              \n\t"            \
2294:../src/wolfcrypt/src/sp_int.c ****         "add    %[h], %[h], r5          \n\t"            \
2295:../src/wolfcrypt/src/sp_int.c ****         "adc    %[o], %[a]              \n\t"            \
2296:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
2297:../src/wolfcrypt/src/sp_int.c ****         "uxth   r5, %[b]                \n\t"            \
2298:../src/wolfcrypt/src/sp_int.c ****         "mul    r6, r5                  \n\t"            \
2299:../src/wolfcrypt/src/sp_int.c ****         "lsr    r5, r6, #16             \n\t"            \
2300:../src/wolfcrypt/src/sp_int.c ****         "lsl    r6, r6, #16             \n\t"            \
2301:../src/wolfcrypt/src/sp_int.c ****         "add    %[l], %[l], r6          \n\t"            \
2302:../src/wolfcrypt/src/sp_int.c ****         "adc    %[h], r5                \n\t"            \
2303:../src/wolfcrypt/src/sp_int.c ****         "adc    %[o], %[a]              \n\t"            \
2304:../src/wolfcrypt/src/sp_int.c ****         "add    %[l], %[l], r6          \n\t"            \
2305:../src/wolfcrypt/src/sp_int.c ****         "adc    %[h], r5                \n\t"            \
2306:../src/wolfcrypt/src/sp_int.c ****         "adc    %[o], %[a]              \n\t"            \
2307:../src/wolfcrypt/src/sp_int.c ****         "mov    %[a], r8                \n\t"            \
2308:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
2309:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
2310:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "r8", "cc"                         \
2311:../src/wolfcrypt/src/sp_int.c ****     )
2312:../src/wolfcrypt/src/sp_int.c **** #endif
2313:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
2314:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
2315:../src/wolfcrypt/src/sp_int.c ****  */
2316:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
2317:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2318:../src/wolfcrypt/src/sp_int.c ****         /* al * bl */                                    \
2319:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
2320:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
2321:../src/wolfcrypt/src/sp_int.c ****         "mul	r7, r6			\n\t"            \
2322:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r7		\n\t"            \
2323:../src/wolfcrypt/src/sp_int.c ****         "mov	r5, #0			\n\t"            \
2324:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r5		\n\t"            \
2325:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r7		\n\t"            \
2326:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r5		\n\t"            \
2327:../src/wolfcrypt/src/sp_int.c ****         /* al * bh */                                    \
2328:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, %[b], #16		\n\t"            \
2329:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r7			\n\t"            \
2330:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, r6, #16		\n\t"            \
2331:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #16		\n\t"            \
2332:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2333:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2334:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2335:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2336:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2337:../src/wolfcrypt/src/sp_int.c ****         /* ah * bh */                                    \
2338:../src/wolfcrypt/src/sp_int.c ****         "lsr	r6, %[a], #16		\n\t"            \
2339:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, %[b], #16		\n\t"            \
2340:../src/wolfcrypt/src/sp_int.c ****         "mul	r7, r6			\n\t"            \
2341:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], r7		\n\t"            \
2342:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2343:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], r7		\n\t"            \
2344:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2345:../src/wolfcrypt/src/sp_int.c ****         /* ah * bl */                                    \
2346:../src/wolfcrypt/src/sp_int.c ****         "uxth	r7, %[b]		\n\t"            \
2347:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r7			\n\t"            \
2348:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, r6, #16		\n\t"            \
2349:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #16		\n\t"            \
2350:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2351:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2352:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2353:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2354:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2355:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2356:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
2357:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb)                     \
2358:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "r7", "cc"                         \
2359:../src/wolfcrypt/src/sp_int.c ****     )
2360:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
2361:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
2362:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2363:../src/wolfcrypt/src/sp_int.c ****         "lsr	r5, %[a], #16		\n\t"            \
2364:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
2365:../src/wolfcrypt/src/sp_int.c ****         "mov	%[l], r6		\n\t"            \
2366:../src/wolfcrypt/src/sp_int.c ****         "mov	%[h], r5		\n\t"            \
2367:../src/wolfcrypt/src/sp_int.c ****         /* al * al */                                    \
2368:../src/wolfcrypt/src/sp_int.c ****         "mul	%[l], %[l]		\n\t"            \
2369:../src/wolfcrypt/src/sp_int.c ****         /* ah * ah */                                    \
2370:../src/wolfcrypt/src/sp_int.c ****         "mul	%[h], %[h]		\n\t"            \
2371:../src/wolfcrypt/src/sp_int.c ****         /* 2 * al * ah */                                \
2372:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r5			\n\t"            \
2373:../src/wolfcrypt/src/sp_int.c ****         "lsr	r5, r6, #15		\n\t"            \
2374:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #17		\n\t"            \
2375:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2376:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r5		\n\t"            \
2377:../src/wolfcrypt/src/sp_int.c ****         : [h] "+l" (vh), [l] "+l" (vl)                   \
2378:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
2379:../src/wolfcrypt/src/sp_int.c ****         : "r5", "r6", "cc"                               \
2380:../src/wolfcrypt/src/sp_int.c ****     )
2381:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
2382:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
2383:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2384:../src/wolfcrypt/src/sp_int.c ****         "lsr	r4, %[a], #16		\n\t"            \
2385:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
2386:../src/wolfcrypt/src/sp_int.c ****         /* al * al */                                    \
2387:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r6			\n\t"            \
2388:../src/wolfcrypt/src/sp_int.c ****         /* ah * ah */                                    \
2389:../src/wolfcrypt/src/sp_int.c ****         "mul	r4, r4			\n\t"            \
2390:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2391:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r4		\n\t"            \
2392:../src/wolfcrypt/src/sp_int.c ****         "mov	r5, #0			\n\t"            \
2393:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2394:../src/wolfcrypt/src/sp_int.c ****         "lsr	r4, %[a], #16		\n\t"            \
2395:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
2396:../src/wolfcrypt/src/sp_int.c ****         /* 2 * al * ah */                                \
2397:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r4			\n\t"            \
2398:../src/wolfcrypt/src/sp_int.c ****         "lsr	r4, r6, #15		\n\t"            \
2399:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #17		\n\t"            \
2400:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2401:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r4		\n\t"            \
2402:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], r5		\n\t"            \
2403:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
2404:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
2405:../src/wolfcrypt/src/sp_int.c ****         : "r4", "r5", "r6", "cc"                         \
2406:../src/wolfcrypt/src/sp_int.c ****     )
2407:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
2408:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
2409:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2410:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, %[a], #16		\n\t"            \
2411:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
2412:../src/wolfcrypt/src/sp_int.c ****         /* al * al */                                    \
2413:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r6			\n\t"            \
2414:../src/wolfcrypt/src/sp_int.c ****         /* ah * ah */                                    \
2415:../src/wolfcrypt/src/sp_int.c ****         "mul	r7, r7			\n\t"            \
2416:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2417:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2418:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, %[a], #16		\n\t"            \
2419:../src/wolfcrypt/src/sp_int.c ****         "uxth	r6, %[a]		\n\t"            \
2420:../src/wolfcrypt/src/sp_int.c ****         /* 2 * al * ah */                                \
2421:../src/wolfcrypt/src/sp_int.c ****         "mul	r6, r7			\n\t"            \
2422:../src/wolfcrypt/src/sp_int.c ****         "lsr	r7, r6, #15		\n\t"            \
2423:../src/wolfcrypt/src/sp_int.c ****         "lsl	r6, r6, #17		\n\t"            \
2424:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], r6		\n\t"            \
2425:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r7		\n\t"            \
2426:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh)                   \
2427:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
2428:../src/wolfcrypt/src/sp_int.c ****         : "r6", "r7", "cc"                               \
2429:../src/wolfcrypt/src/sp_int.c ****     )
2430:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
2431:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
2432:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2433:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], %[a]	\n\t"            \
2434:../src/wolfcrypt/src/sp_int.c ****         "mov	r5, #0			\n\t"            \
2435:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], r5		\n\t"            \
2436:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh)                   \
2437:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
2438:../src/wolfcrypt/src/sp_int.c ****         : "r5", "cc"                                     \
2439:../src/wolfcrypt/src/sp_int.c ****     )
2440:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
2441:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
2442:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2443:../src/wolfcrypt/src/sp_int.c ****         "sub	%[l], %[l], %[a]	\n\t"            \
2444:../src/wolfcrypt/src/sp_int.c ****         "mov	r5, #0			\n\t"            \
2445:../src/wolfcrypt/src/sp_int.c ****         "sbc	%[h], r5		\n\t"            \
2446:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh)                   \
2447:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va)                                   \
2448:../src/wolfcrypt/src/sp_int.c ****         : "r5", "cc"                                     \
2449:../src/wolfcrypt/src/sp_int.c ****     )
2450:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
2451:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
2452:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
2453:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], %[a]	\n\t"            \
2454:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], %[b]		\n\t"            \
2455:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[c]		\n\t"            \
2456:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], %[a]	\n\t"            \
2457:../src/wolfcrypt/src/sp_int.c ****         "adc	%[h], %[b]		\n\t"            \
2458:../src/wolfcrypt/src/sp_int.c ****         "adc	%[o], %[c]		\n\t"            \
2459:../src/wolfcrypt/src/sp_int.c ****         : [l] "+l" (vl), [h] "+l" (vh), [o] "+l" (vo)    \
2460:../src/wolfcrypt/src/sp_int.c ****         : [a] "l" (va), [b] "l" (vb), [c] "l" (vc)       \
2461:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
2462:../src/wolfcrypt/src/sp_int.c ****     )
2463:../src/wolfcrypt/src/sp_int.c **** 
2464:../src/wolfcrypt/src/sp_int.c **** #endif
2465:../src/wolfcrypt/src/sp_int.c **** 
2466:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_DIV_WORD_HALF
2467:../src/wolfcrypt/src/sp_int.c **** /* Divide a two digit number by a digit number and return. (hi | lo) / d
2468:../src/wolfcrypt/src/sp_int.c ****  *
2469:../src/wolfcrypt/src/sp_int.c ****  * No division instruction used - does operation bit by bit.
2470:../src/wolfcrypt/src/sp_int.c ****  * Constant time.
2471:../src/wolfcrypt/src/sp_int.c ****  *
2472:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  hi  SP integer digit. High digit of the dividend.
2473:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  lo  SP integer digit. Lower digit of the dividend.
2474:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  d   SP integer digit. Number to divide by.
2475:../src/wolfcrypt/src/sp_int.c ****  * @return  The division result.
2476:../src/wolfcrypt/src/sp_int.c ****  */
2477:../src/wolfcrypt/src/sp_int.c **** static WC_INLINE sp_int_digit sp_div_word(sp_int_digit hi, sp_int_digit lo,
2478:../src/wolfcrypt/src/sp_int.c ****                                           sp_int_digit d)
2479:../src/wolfcrypt/src/sp_int.c **** {
2480:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (
2481:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2482:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r3, %[d], #24\n\t"
2483:../src/wolfcrypt/src/sp_int.c **** #else
2484:../src/wolfcrypt/src/sp_int.c ****         "lsr	r3, %[d], #24\n\t"
2485:../src/wolfcrypt/src/sp_int.c **** #endif
2486:../src/wolfcrypt/src/sp_int.c ****         "beq	2%=f\n\t"
2487:../src/wolfcrypt/src/sp_int.c **** 	"\n1%=:\n\t"
2488:../src/wolfcrypt/src/sp_int.c ****         "movs	r3, #0\n\t"
2489:../src/wolfcrypt/src/sp_int.c ****         "b	3%=f\n\t"
2490:../src/wolfcrypt/src/sp_int.c **** 	"\n2%=:\n\t"
2491:../src/wolfcrypt/src/sp_int.c ****         "mov	r3, #8\n\t"
2492:../src/wolfcrypt/src/sp_int.c **** 	"\n3%=:\n\t"
2493:../src/wolfcrypt/src/sp_int.c ****         "movs	r4, #31\n\t"
2494:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2495:../src/wolfcrypt/src/sp_int.c ****         "subs	r4, r4, r3\n\t"
2496:../src/wolfcrypt/src/sp_int.c **** #else
2497:../src/wolfcrypt/src/sp_int.c ****         "sub	r4, r4, r3\n\t"
2498:../src/wolfcrypt/src/sp_int.c **** #endif
2499:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2500:../src/wolfcrypt/src/sp_int.c ****         "lsls	%[d], %[d], r3\n\t"
2501:../src/wolfcrypt/src/sp_int.c **** #else
2502:../src/wolfcrypt/src/sp_int.c ****         "lsl	%[d], %[d], r3\n\t"
2503:../src/wolfcrypt/src/sp_int.c **** #endif
2504:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2505:../src/wolfcrypt/src/sp_int.c ****         "lsls	%[hi], %[hi], r3\n\t"
2506:../src/wolfcrypt/src/sp_int.c **** #else
2507:../src/wolfcrypt/src/sp_int.c ****         "lsl	%[hi], %[hi], r3\n\t"
2508:../src/wolfcrypt/src/sp_int.c **** #endif
2509:../src/wolfcrypt/src/sp_int.c ****         "mov	r5, %[lo]\n\t"
2510:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2511:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, r5, r4\n\t"
2512:../src/wolfcrypt/src/sp_int.c **** #else
2513:../src/wolfcrypt/src/sp_int.c ****         "lsr	r5, r5, r4\n\t"
2514:../src/wolfcrypt/src/sp_int.c **** #endif
2515:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2516:../src/wolfcrypt/src/sp_int.c ****         "lsls	%[lo], %[lo], r3\n\t"
2517:../src/wolfcrypt/src/sp_int.c **** #else
2518:../src/wolfcrypt/src/sp_int.c ****         "lsl	%[lo], %[lo], r3\n\t"
2519:../src/wolfcrypt/src/sp_int.c **** #endif
2520:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2521:../src/wolfcrypt/src/sp_int.c ****         "lsrs	r5, r5, #1\n\t"
2522:../src/wolfcrypt/src/sp_int.c **** #else
2523:../src/wolfcrypt/src/sp_int.c ****         "lsr	r5, r5, #1\n\t"
2524:../src/wolfcrypt/src/sp_int.c **** #endif
2525:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_KEIL)
2526:../src/wolfcrypt/src/sp_int.c ****         "orrs	%[hi], %[hi], r5\n\t"
2527:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2528:../src/wolfcrypt/src/sp_int.c ****         "orrs	%[hi], r5\n\t"
2529:../src/wolfcrypt/src/sp_int.c **** #else
2530:../src/wolfcrypt/src/sp_int.c ****         "orr	%[hi], r5\n\t"
2531:../src/wolfcrypt/src/sp_int.c **** #endif
2532:../src/wolfcrypt/src/sp_int.c **** 
2533:../src/wolfcrypt/src/sp_int.c ****         "movs   r3, #0\n\t"
2534:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2535:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r5, %[d], #1\n\t"
2536:../src/wolfcrypt/src/sp_int.c **** #else
2537:../src/wolfcrypt/src/sp_int.c ****         "lsr    r5, %[d], #1\n\t"
2538:../src/wolfcrypt/src/sp_int.c **** #endif
2539:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2540:../src/wolfcrypt/src/sp_int.c ****         "adds   r5, r5, #1\n\t"
2541:../src/wolfcrypt/src/sp_int.c **** #else
2542:../src/wolfcrypt/src/sp_int.c ****         "add    r5, r5, #1\n\t"
2543:../src/wolfcrypt/src/sp_int.c **** #endif
2544:../src/wolfcrypt/src/sp_int.c ****         "mov    r8, %[lo]\n\t"
2545:../src/wolfcrypt/src/sp_int.c ****         "mov    r9, %[hi]\n\t"
2546:../src/wolfcrypt/src/sp_int.c ****         /* Do top 32 */
2547:../src/wolfcrypt/src/sp_int.c ****         "movs   r6, r5\n\t"
2548:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2549:../src/wolfcrypt/src/sp_int.c ****         "subs   r6, r6, %[hi]\n\t"
2550:../src/wolfcrypt/src/sp_int.c **** #else
2551:../src/wolfcrypt/src/sp_int.c ****         "sub    r6, r6, %[hi]\n\t"
2552:../src/wolfcrypt/src/sp_int.c **** #endif
2553:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2554:../src/wolfcrypt/src/sp_int.c ****         "sbcs   r6, r6, r6\n\t"
2555:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2556:../src/wolfcrypt/src/sp_int.c ****         "sbcs   r6, r6\n\t"
2557:../src/wolfcrypt/src/sp_int.c **** #else
2558:../src/wolfcrypt/src/sp_int.c ****         "sbc    r6, r6\n\t"
2559:../src/wolfcrypt/src/sp_int.c **** #endif
2560:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2561:../src/wolfcrypt/src/sp_int.c ****         "adds   r3, r3, r3\n\t"
2562:../src/wolfcrypt/src/sp_int.c **** #else
2563:../src/wolfcrypt/src/sp_int.c ****         "add    r3, r3, r3\n\t"
2564:../src/wolfcrypt/src/sp_int.c **** #endif
2565:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2566:../src/wolfcrypt/src/sp_int.c ****         "subs   r3, r3, r6\n\t"
2567:../src/wolfcrypt/src/sp_int.c **** #else
2568:../src/wolfcrypt/src/sp_int.c ****         "sub    r3, r3, r6\n\t"
2569:../src/wolfcrypt/src/sp_int.c **** #endif
2570:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2571:../src/wolfcrypt/src/sp_int.c ****         "ands   r6, r6, r5\n\t"
2572:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2573:../src/wolfcrypt/src/sp_int.c ****         "ands   r6, r5\n\t"
2574:../src/wolfcrypt/src/sp_int.c **** #else
2575:../src/wolfcrypt/src/sp_int.c ****         "and    r6, r5\n\t"
2576:../src/wolfcrypt/src/sp_int.c **** #endif
2577:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2578:../src/wolfcrypt/src/sp_int.c ****         "subs   %[hi], %[hi], r6\n\t"
2579:../src/wolfcrypt/src/sp_int.c **** #else
2580:../src/wolfcrypt/src/sp_int.c ****         "sub    %[hi], %[hi], r6\n\t"
2581:../src/wolfcrypt/src/sp_int.c **** #endif
2582:../src/wolfcrypt/src/sp_int.c ****         "movs   r4, #29\n\t"
2583:../src/wolfcrypt/src/sp_int.c ****         "\n"
2584:../src/wolfcrypt/src/sp_int.c ****     "L_sp_div_word_loop%=:\n\t"
2585:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2586:../src/wolfcrypt/src/sp_int.c ****         "lsls   %[lo], %[lo], #1\n\t"
2587:../src/wolfcrypt/src/sp_int.c **** #else
2588:../src/wolfcrypt/src/sp_int.c ****         "lsl    %[lo], %[lo], #1\n\t"
2589:../src/wolfcrypt/src/sp_int.c **** #endif
2590:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2591:../src/wolfcrypt/src/sp_int.c ****         "adcs   %[hi], %[hi], %[hi]\n\t"
2592:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2593:../src/wolfcrypt/src/sp_int.c ****         "adcs   %[hi], %[hi]\n\t"
2594:../src/wolfcrypt/src/sp_int.c **** #else
2595:../src/wolfcrypt/src/sp_int.c ****         "adc    %[hi], %[hi]\n\t"
2596:../src/wolfcrypt/src/sp_int.c **** #endif
2597:../src/wolfcrypt/src/sp_int.c ****         "movs   r6, r5\n\t"
2598:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2599:../src/wolfcrypt/src/sp_int.c ****         "subs   r6, r6, %[hi]\n\t"
2600:../src/wolfcrypt/src/sp_int.c **** #else
2601:../src/wolfcrypt/src/sp_int.c ****         "sub    r6, r6, %[hi]\n\t"
2602:../src/wolfcrypt/src/sp_int.c **** #endif
2603:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2604:../src/wolfcrypt/src/sp_int.c ****         "sbcs   r6, r6, r6\n\t"
2605:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2606:../src/wolfcrypt/src/sp_int.c ****         "sbcs   r6, r6\n\t"
2607:../src/wolfcrypt/src/sp_int.c **** #else
2608:../src/wolfcrypt/src/sp_int.c ****         "sbc    r6, r6\n\t"
2609:../src/wolfcrypt/src/sp_int.c **** #endif
2610:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2611:../src/wolfcrypt/src/sp_int.c ****         "adds   r3, r3, r3\n\t"
2612:../src/wolfcrypt/src/sp_int.c **** #else
2613:../src/wolfcrypt/src/sp_int.c ****         "add    r3, r3, r3\n\t"
2614:../src/wolfcrypt/src/sp_int.c **** #endif
2615:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2616:../src/wolfcrypt/src/sp_int.c ****         "subs   r3, r3, r6\n\t"
2617:../src/wolfcrypt/src/sp_int.c **** #else
2618:../src/wolfcrypt/src/sp_int.c ****         "sub    r3, r3, r6\n\t"
2619:../src/wolfcrypt/src/sp_int.c **** #endif
2620:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2621:../src/wolfcrypt/src/sp_int.c ****         "ands   r6, r6, r5\n\t"
2622:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2623:../src/wolfcrypt/src/sp_int.c ****         "ands   r6, r5\n\t"
2624:../src/wolfcrypt/src/sp_int.c **** #else
2625:../src/wolfcrypt/src/sp_int.c ****         "and    r6, r5\n\t"
2626:../src/wolfcrypt/src/sp_int.c **** #endif
2627:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2628:../src/wolfcrypt/src/sp_int.c ****         "subs   %[hi], %[hi], r6\n\t"
2629:../src/wolfcrypt/src/sp_int.c **** #else
2630:../src/wolfcrypt/src/sp_int.c ****         "sub    %[hi], %[hi], r6\n\t"
2631:../src/wolfcrypt/src/sp_int.c **** #endif
2632:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2633:../src/wolfcrypt/src/sp_int.c ****         "subs   r4, r4, #1\n\t"
2634:../src/wolfcrypt/src/sp_int.c **** #else
2635:../src/wolfcrypt/src/sp_int.c ****         "sub    r4, r4, #1\n\t"
2636:../src/wolfcrypt/src/sp_int.c **** #endif
2637:../src/wolfcrypt/src/sp_int.c ****         "bpl    L_sp_div_word_loop%=\n\t"
2638:../src/wolfcrypt/src/sp_int.c ****         "movs   r7, #0\n\t"
2639:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2640:../src/wolfcrypt/src/sp_int.c ****         "adds   r3, r3, r3\n\t"
2641:../src/wolfcrypt/src/sp_int.c **** #else
2642:../src/wolfcrypt/src/sp_int.c ****         "add    r3, r3, r3\n\t"
2643:../src/wolfcrypt/src/sp_int.c **** #endif
2644:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2645:../src/wolfcrypt/src/sp_int.c ****         "adds   r3, r3, #1\n\t"
2646:../src/wolfcrypt/src/sp_int.c **** #else
2647:../src/wolfcrypt/src/sp_int.c ****         "add    r3, r3, #1\n\t"
2648:../src/wolfcrypt/src/sp_int.c **** #endif
2649:../src/wolfcrypt/src/sp_int.c ****         /* r * d - Start */
2650:../src/wolfcrypt/src/sp_int.c ****         "uxth   %[hi], r3\n\t"
2651:../src/wolfcrypt/src/sp_int.c ****         "uxth   r4, %[d]\n\t"
2652:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2653:../src/wolfcrypt/src/sp_int.c ****         "muls   r4, %[hi], r4\n\t"
2654:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2655:../src/wolfcrypt/src/sp_int.c ****         "muls   r4, %[hi]\n\t"
2656:../src/wolfcrypt/src/sp_int.c **** #else
2657:../src/wolfcrypt/src/sp_int.c ****         "mul    r4, %[hi]\n\t"
2658:../src/wolfcrypt/src/sp_int.c **** #endif
2659:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2660:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r6, %[d], #16\n\t"
2661:../src/wolfcrypt/src/sp_int.c **** #else
2662:../src/wolfcrypt/src/sp_int.c ****         "lsr    r6, %[d], #16\n\t"
2663:../src/wolfcrypt/src/sp_int.c **** #endif
2664:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2665:../src/wolfcrypt/src/sp_int.c ****         "muls   %[hi], r6, %[hi]\n\t"
2666:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2667:../src/wolfcrypt/src/sp_int.c ****         "muls   %[hi], r6\n\t"
2668:../src/wolfcrypt/src/sp_int.c **** #else
2669:../src/wolfcrypt/src/sp_int.c ****         "mul    %[hi], r6\n\t"
2670:../src/wolfcrypt/src/sp_int.c **** #endif
2671:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2672:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r5, %[hi], #16\n\t"
2673:../src/wolfcrypt/src/sp_int.c **** #else
2674:../src/wolfcrypt/src/sp_int.c ****         "lsr    r5, %[hi], #16\n\t"
2675:../src/wolfcrypt/src/sp_int.c **** #endif
2676:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2677:../src/wolfcrypt/src/sp_int.c ****         "lsls   %[hi], %[hi], #16\n\t"
2678:../src/wolfcrypt/src/sp_int.c **** #else
2679:../src/wolfcrypt/src/sp_int.c ****         "lsl    %[hi], %[hi], #16\n\t"
2680:../src/wolfcrypt/src/sp_int.c **** #endif
2681:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2682:../src/wolfcrypt/src/sp_int.c ****         "adds   r4, r4, %[hi]\n\t"
2683:../src/wolfcrypt/src/sp_int.c **** #else
2684:../src/wolfcrypt/src/sp_int.c ****         "add    r4, r4, %[hi]\n\t"
2685:../src/wolfcrypt/src/sp_int.c **** #endif
2686:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2687:../src/wolfcrypt/src/sp_int.c ****         "adcs   r5, r5, r7\n\t"
2688:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2689:../src/wolfcrypt/src/sp_int.c ****         "adcs   r5, r7\n\t"
2690:../src/wolfcrypt/src/sp_int.c **** #else
2691:../src/wolfcrypt/src/sp_int.c ****         "adc    r5, r7\n\t"
2692:../src/wolfcrypt/src/sp_int.c **** #endif
2693:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2694:../src/wolfcrypt/src/sp_int.c ****         "lsrs   %[hi], r3, #16\n\t"
2695:../src/wolfcrypt/src/sp_int.c **** #else
2696:../src/wolfcrypt/src/sp_int.c ****         "lsr    %[hi], r3, #16\n\t"
2697:../src/wolfcrypt/src/sp_int.c **** #endif
2698:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2699:../src/wolfcrypt/src/sp_int.c ****         "muls   r6, %[hi], r6\n\t"
2700:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2701:../src/wolfcrypt/src/sp_int.c ****         "muls   r6, %[hi]\n\t"
2702:../src/wolfcrypt/src/sp_int.c **** #else
2703:../src/wolfcrypt/src/sp_int.c ****         "mul    r6, %[hi]\n\t"
2704:../src/wolfcrypt/src/sp_int.c **** #endif
2705:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2706:../src/wolfcrypt/src/sp_int.c ****         "adds   r5, r5, r6\n\t"
2707:../src/wolfcrypt/src/sp_int.c **** #else
2708:../src/wolfcrypt/src/sp_int.c ****         "add    r5, r5, r6\n\t"
2709:../src/wolfcrypt/src/sp_int.c **** #endif
2710:../src/wolfcrypt/src/sp_int.c ****         "uxth   r6, %[d]\n\t"
2711:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2712:../src/wolfcrypt/src/sp_int.c ****         "muls   %[hi], r6, %[hi]\n\t"
2713:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2714:../src/wolfcrypt/src/sp_int.c ****         "muls   %[hi], r6\n\t"
2715:../src/wolfcrypt/src/sp_int.c **** #else
2716:../src/wolfcrypt/src/sp_int.c ****         "mul    %[hi], r6\n\t"
2717:../src/wolfcrypt/src/sp_int.c **** #endif
2718:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2719:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r6, %[hi], #16\n\t"
2720:../src/wolfcrypt/src/sp_int.c **** #else
2721:../src/wolfcrypt/src/sp_int.c ****         "lsr    r6, %[hi], #16\n\t"
2722:../src/wolfcrypt/src/sp_int.c **** #endif
2723:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2724:../src/wolfcrypt/src/sp_int.c ****         "lsls   %[hi], %[hi], #16\n\t"
2725:../src/wolfcrypt/src/sp_int.c **** #else
2726:../src/wolfcrypt/src/sp_int.c ****         "lsl    %[hi], %[hi], #16\n\t"
2727:../src/wolfcrypt/src/sp_int.c **** #endif
2728:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2729:../src/wolfcrypt/src/sp_int.c ****         "adds   r4, r4, %[hi]\n\t"
2730:../src/wolfcrypt/src/sp_int.c **** #else
2731:../src/wolfcrypt/src/sp_int.c ****         "add    r4, r4, %[hi]\n\t"
2732:../src/wolfcrypt/src/sp_int.c **** #endif
2733:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2734:../src/wolfcrypt/src/sp_int.c ****         "adcs   r5, r5, r6\n\t"
2735:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2736:../src/wolfcrypt/src/sp_int.c ****         "adcs   r5, r6\n\t"
2737:../src/wolfcrypt/src/sp_int.c **** #else
2738:../src/wolfcrypt/src/sp_int.c ****         "adc    r5, r6\n\t"
2739:../src/wolfcrypt/src/sp_int.c **** #endif
2740:../src/wolfcrypt/src/sp_int.c ****         /* r * d - Done */
2741:../src/wolfcrypt/src/sp_int.c ****         "mov    %[hi], r8\n\t"
2742:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2743:../src/wolfcrypt/src/sp_int.c ****         "subs   %[hi], %[hi], r4\n\t"
2744:../src/wolfcrypt/src/sp_int.c **** #else
2745:../src/wolfcrypt/src/sp_int.c ****         "sub    %[hi], %[hi], r4\n\t"
2746:../src/wolfcrypt/src/sp_int.c **** #endif
2747:../src/wolfcrypt/src/sp_int.c ****         "movs   r4, %[hi]\n\t"
2748:../src/wolfcrypt/src/sp_int.c ****         "mov    %[hi], r9\n\t"
2749:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2750:../src/wolfcrypt/src/sp_int.c ****         "sbcs   %[hi], %[hi], r5\n\t"
2751:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2752:../src/wolfcrypt/src/sp_int.c ****         "sbcs   %[hi], r5\n\t"
2753:../src/wolfcrypt/src/sp_int.c **** #else
2754:../src/wolfcrypt/src/sp_int.c ****         "sbc    %[hi], r5\n\t"
2755:../src/wolfcrypt/src/sp_int.c **** #endif
2756:../src/wolfcrypt/src/sp_int.c ****         "movs   r5, %[hi]\n\t"
2757:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2758:../src/wolfcrypt/src/sp_int.c ****         "adds   r3, r3, r5\n\t"
2759:../src/wolfcrypt/src/sp_int.c **** #else
2760:../src/wolfcrypt/src/sp_int.c ****         "add    r3, r3, r5\n\t"
2761:../src/wolfcrypt/src/sp_int.c **** #endif
2762:../src/wolfcrypt/src/sp_int.c ****         /* r * d - Start */
2763:../src/wolfcrypt/src/sp_int.c ****         "uxth   %[hi], r3\n\t"
2764:../src/wolfcrypt/src/sp_int.c ****         "uxth   r4, %[d]\n\t"
2765:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2766:../src/wolfcrypt/src/sp_int.c ****         "muls   r4, %[hi], r4\n\t"
2767:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2768:../src/wolfcrypt/src/sp_int.c ****         "muls   r4, %[hi]\n\t"
2769:../src/wolfcrypt/src/sp_int.c **** #else
2770:../src/wolfcrypt/src/sp_int.c ****         "mul    r4, %[hi]\n\t"
2771:../src/wolfcrypt/src/sp_int.c **** #endif
2772:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2773:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r6, %[d], #16\n\t"
2774:../src/wolfcrypt/src/sp_int.c **** #else
2775:../src/wolfcrypt/src/sp_int.c ****         "lsr    r6, %[d], #16\n\t"
2776:../src/wolfcrypt/src/sp_int.c **** #endif
2777:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2778:../src/wolfcrypt/src/sp_int.c ****         "muls   %[hi], r6, %[hi]\n\t"
2779:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2780:../src/wolfcrypt/src/sp_int.c ****         "muls   %[hi], r6\n\t"
2781:../src/wolfcrypt/src/sp_int.c **** #else
2782:../src/wolfcrypt/src/sp_int.c ****         "mul    %[hi], r6\n\t"
2783:../src/wolfcrypt/src/sp_int.c **** #endif
2784:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2785:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r5, %[hi], #16\n\t"
2786:../src/wolfcrypt/src/sp_int.c **** #else
2787:../src/wolfcrypt/src/sp_int.c ****         "lsr    r5, %[hi], #16\n\t"
2788:../src/wolfcrypt/src/sp_int.c **** #endif
2789:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2790:../src/wolfcrypt/src/sp_int.c ****         "lsls   %[hi], %[hi], #16\n\t"
2791:../src/wolfcrypt/src/sp_int.c **** #else
2792:../src/wolfcrypt/src/sp_int.c ****         "lsl    %[hi], %[hi], #16\n\t"
2793:../src/wolfcrypt/src/sp_int.c **** #endif
2794:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2795:../src/wolfcrypt/src/sp_int.c ****         "adds   r4, r4, %[hi]\n\t"
2796:../src/wolfcrypt/src/sp_int.c **** #else
2797:../src/wolfcrypt/src/sp_int.c ****         "add    r4, r4, %[hi]\n\t"
2798:../src/wolfcrypt/src/sp_int.c **** #endif
2799:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2800:../src/wolfcrypt/src/sp_int.c ****         "adcs   r5, r5, r7\n\t"
2801:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2802:../src/wolfcrypt/src/sp_int.c ****         "adcs   r5, r7\n\t"
2803:../src/wolfcrypt/src/sp_int.c **** #else
2804:../src/wolfcrypt/src/sp_int.c ****         "adc    r5, r7\n\t"
2805:../src/wolfcrypt/src/sp_int.c **** #endif
2806:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2807:../src/wolfcrypt/src/sp_int.c ****         "lsrs   %[hi], r3, #16\n\t"
2808:../src/wolfcrypt/src/sp_int.c **** #else
2809:../src/wolfcrypt/src/sp_int.c ****         "lsr    %[hi], r3, #16\n\t"
2810:../src/wolfcrypt/src/sp_int.c **** #endif
2811:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2812:../src/wolfcrypt/src/sp_int.c ****         "muls   r6, %[hi], r6\n\t"
2813:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2814:../src/wolfcrypt/src/sp_int.c ****         "muls   r6, %[hi]\n\t"
2815:../src/wolfcrypt/src/sp_int.c **** #else
2816:../src/wolfcrypt/src/sp_int.c ****         "mul    r6, %[hi]\n\t"
2817:../src/wolfcrypt/src/sp_int.c **** #endif
2818:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2819:../src/wolfcrypt/src/sp_int.c ****         "adds   r5, r5, r6\n\t"
2820:../src/wolfcrypt/src/sp_int.c **** #else
2821:../src/wolfcrypt/src/sp_int.c ****         "add    r5, r5, r6\n\t"
2822:../src/wolfcrypt/src/sp_int.c **** #endif
2823:../src/wolfcrypt/src/sp_int.c ****         "uxth   r6, %[d]\n\t"
2824:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2825:../src/wolfcrypt/src/sp_int.c ****         "muls   %[hi], r6, %[hi]\n\t"
2826:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2827:../src/wolfcrypt/src/sp_int.c ****         "muls   %[hi], r6\n\t"
2828:../src/wolfcrypt/src/sp_int.c **** #else
2829:../src/wolfcrypt/src/sp_int.c ****         "mul    %[hi], r6\n\t"
2830:../src/wolfcrypt/src/sp_int.c **** #endif
2831:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2832:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r6, %[hi], #16\n\t"
2833:../src/wolfcrypt/src/sp_int.c **** #else
2834:../src/wolfcrypt/src/sp_int.c ****         "lsr    r6, %[hi], #16\n\t"
2835:../src/wolfcrypt/src/sp_int.c **** #endif
2836:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2837:../src/wolfcrypt/src/sp_int.c ****         "lsls   %[hi], %[hi], #16\n\t"
2838:../src/wolfcrypt/src/sp_int.c **** #else
2839:../src/wolfcrypt/src/sp_int.c ****         "lsl    %[hi], %[hi], #16\n\t"
2840:../src/wolfcrypt/src/sp_int.c **** #endif
2841:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2842:../src/wolfcrypt/src/sp_int.c ****         "adds   r4, r4, %[hi]\n\t"
2843:../src/wolfcrypt/src/sp_int.c **** #else
2844:../src/wolfcrypt/src/sp_int.c ****         "add    r4, r4, %[hi]\n\t"
2845:../src/wolfcrypt/src/sp_int.c **** #endif
2846:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2847:../src/wolfcrypt/src/sp_int.c ****         "adcs   r5, r5, r6\n\t"
2848:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2849:../src/wolfcrypt/src/sp_int.c ****         "adcs   r5, r6\n\t"
2850:../src/wolfcrypt/src/sp_int.c **** #else
2851:../src/wolfcrypt/src/sp_int.c ****         "adc    r5, r6\n\t"
2852:../src/wolfcrypt/src/sp_int.c **** #endif
2853:../src/wolfcrypt/src/sp_int.c ****         /* r * d - Done */
2854:../src/wolfcrypt/src/sp_int.c ****         "mov    %[hi], r8\n\t"
2855:../src/wolfcrypt/src/sp_int.c ****         "mov    r6, r9\n\t"
2856:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2857:../src/wolfcrypt/src/sp_int.c ****         "subs   r4, %[hi], r4\n\t"
2858:../src/wolfcrypt/src/sp_int.c **** #else
2859:../src/wolfcrypt/src/sp_int.c **** #ifdef __clang__
2860:../src/wolfcrypt/src/sp_int.c ****         "subs   r4, %[hi], r4\n\t"
2861:../src/wolfcrypt/src/sp_int.c **** #else
2862:../src/wolfcrypt/src/sp_int.c ****         "sub    r4, %[hi], r4\n\t"
2863:../src/wolfcrypt/src/sp_int.c **** #endif
2864:../src/wolfcrypt/src/sp_int.c **** #endif
2865:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2866:../src/wolfcrypt/src/sp_int.c ****         "sbcs   r6, r6, r5\n\t"
2867:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2868:../src/wolfcrypt/src/sp_int.c ****         "sbcs   r6, r5\n\t"
2869:../src/wolfcrypt/src/sp_int.c **** #else
2870:../src/wolfcrypt/src/sp_int.c ****         "sbc    r6, r5\n\t"
2871:../src/wolfcrypt/src/sp_int.c **** #endif
2872:../src/wolfcrypt/src/sp_int.c ****         "movs   r5, r6\n\t"
2873:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2874:../src/wolfcrypt/src/sp_int.c ****         "adds   r3, r3, r5\n\t"
2875:../src/wolfcrypt/src/sp_int.c **** #else
2876:../src/wolfcrypt/src/sp_int.c ****         "add    r3, r3, r5\n\t"
2877:../src/wolfcrypt/src/sp_int.c **** #endif
2878:../src/wolfcrypt/src/sp_int.c ****         /* r * d - Start */
2879:../src/wolfcrypt/src/sp_int.c ****         "uxth   %[hi], r3\n\t"
2880:../src/wolfcrypt/src/sp_int.c ****         "uxth   r4, %[d]\n\t"
2881:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2882:../src/wolfcrypt/src/sp_int.c ****         "muls   r4, %[hi], r4\n\t"
2883:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2884:../src/wolfcrypt/src/sp_int.c ****         "muls   r4, %[hi]\n\t"
2885:../src/wolfcrypt/src/sp_int.c **** #else
2886:../src/wolfcrypt/src/sp_int.c ****         "mul    r4, %[hi]\n\t"
2887:../src/wolfcrypt/src/sp_int.c **** #endif
2888:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2889:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r6, %[d], #16\n\t"
2890:../src/wolfcrypt/src/sp_int.c **** #else
2891:../src/wolfcrypt/src/sp_int.c ****         "lsr    r6, %[d], #16\n\t"
2892:../src/wolfcrypt/src/sp_int.c **** #endif
2893:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2894:../src/wolfcrypt/src/sp_int.c ****         "muls   %[hi], r6, %[hi]\n\t"
2895:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2896:../src/wolfcrypt/src/sp_int.c ****         "muls   %[hi], r6\n\t"
2897:../src/wolfcrypt/src/sp_int.c **** #else
2898:../src/wolfcrypt/src/sp_int.c ****         "mul    %[hi], r6\n\t"
2899:../src/wolfcrypt/src/sp_int.c **** #endif
2900:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2901:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r5, %[hi], #16\n\t"
2902:../src/wolfcrypt/src/sp_int.c **** #else
2903:../src/wolfcrypt/src/sp_int.c ****         "lsr    r5, %[hi], #16\n\t"
2904:../src/wolfcrypt/src/sp_int.c **** #endif
2905:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2906:../src/wolfcrypt/src/sp_int.c ****         "lsls   %[hi], %[hi], #16\n\t"
2907:../src/wolfcrypt/src/sp_int.c **** #else
2908:../src/wolfcrypt/src/sp_int.c ****         "lsl    %[hi], %[hi], #16\n\t"
2909:../src/wolfcrypt/src/sp_int.c **** #endif
2910:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2911:../src/wolfcrypt/src/sp_int.c ****         "adds   r4, r4, %[hi]\n\t"
2912:../src/wolfcrypt/src/sp_int.c **** #else
2913:../src/wolfcrypt/src/sp_int.c ****         "add    r4, r4, %[hi]\n\t"
2914:../src/wolfcrypt/src/sp_int.c **** #endif
2915:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2916:../src/wolfcrypt/src/sp_int.c ****         "adcs   r5, r5, r7\n\t"
2917:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2918:../src/wolfcrypt/src/sp_int.c ****         "adcs   r5, r7\n\t"
2919:../src/wolfcrypt/src/sp_int.c **** #else
2920:../src/wolfcrypt/src/sp_int.c ****         "adc    r5, r7\n\t"
2921:../src/wolfcrypt/src/sp_int.c **** #endif
2922:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2923:../src/wolfcrypt/src/sp_int.c ****         "lsrs   %[hi], r3, #16\n\t"
2924:../src/wolfcrypt/src/sp_int.c **** #else
2925:../src/wolfcrypt/src/sp_int.c ****         "lsr    %[hi], r3, #16\n\t"
2926:../src/wolfcrypt/src/sp_int.c **** #endif
2927:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2928:../src/wolfcrypt/src/sp_int.c ****         "muls   r6, %[hi], r6\n\t"
2929:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2930:../src/wolfcrypt/src/sp_int.c ****         "muls   r6, %[hi]\n\t"
2931:../src/wolfcrypt/src/sp_int.c **** #else
2932:../src/wolfcrypt/src/sp_int.c ****         "mul    r6, %[hi]\n\t"
2933:../src/wolfcrypt/src/sp_int.c **** #endif
2934:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2935:../src/wolfcrypt/src/sp_int.c ****         "adds   r5, r5, r6\n\t"
2936:../src/wolfcrypt/src/sp_int.c **** #else
2937:../src/wolfcrypt/src/sp_int.c ****         "add    r5, r5, r6\n\t"
2938:../src/wolfcrypt/src/sp_int.c **** #endif
2939:../src/wolfcrypt/src/sp_int.c ****         "uxth   r6, %[d]\n\t"
2940:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2941:../src/wolfcrypt/src/sp_int.c ****         "muls   %[hi], r6, %[hi]\n\t"
2942:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2943:../src/wolfcrypt/src/sp_int.c ****         "muls   %[hi], r6\n\t"
2944:../src/wolfcrypt/src/sp_int.c **** #else
2945:../src/wolfcrypt/src/sp_int.c ****         "mul    %[hi], r6\n\t"
2946:../src/wolfcrypt/src/sp_int.c **** #endif
2947:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2948:../src/wolfcrypt/src/sp_int.c ****         "lsrs   r6, %[hi], #16\n\t"
2949:../src/wolfcrypt/src/sp_int.c **** #else
2950:../src/wolfcrypt/src/sp_int.c ****         "lsr    r6, %[hi], #16\n\t"
2951:../src/wolfcrypt/src/sp_int.c **** #endif
2952:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2953:../src/wolfcrypt/src/sp_int.c ****         "lsls   %[hi], %[hi], #16\n\t"
2954:../src/wolfcrypt/src/sp_int.c **** #else
2955:../src/wolfcrypt/src/sp_int.c ****         "lsl    %[hi], %[hi], #16\n\t"
2956:../src/wolfcrypt/src/sp_int.c **** #endif
2957:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2958:../src/wolfcrypt/src/sp_int.c ****         "adds   r4, r4, %[hi]\n\t"
2959:../src/wolfcrypt/src/sp_int.c **** #else
2960:../src/wolfcrypt/src/sp_int.c ****         "add    r4, r4, %[hi]\n\t"
2961:../src/wolfcrypt/src/sp_int.c **** #endif
2962:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2963:../src/wolfcrypt/src/sp_int.c ****         "adcs   r5, r5, r6\n\t"
2964:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2965:../src/wolfcrypt/src/sp_int.c ****         "adcs   r5, r6\n\t"
2966:../src/wolfcrypt/src/sp_int.c **** #else
2967:../src/wolfcrypt/src/sp_int.c ****         "adc    r5, r6\n\t"
2968:../src/wolfcrypt/src/sp_int.c **** #endif
2969:../src/wolfcrypt/src/sp_int.c ****         /* r * d - Done */
2970:../src/wolfcrypt/src/sp_int.c ****         "mov    %[hi], r8\n\t"
2971:../src/wolfcrypt/src/sp_int.c ****         "mov    r6, r9\n\t"
2972:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2973:../src/wolfcrypt/src/sp_int.c ****         "subs   r4, %[hi], r4\n\t"
2974:../src/wolfcrypt/src/sp_int.c **** #else
2975:../src/wolfcrypt/src/sp_int.c **** #ifdef __clang__
2976:../src/wolfcrypt/src/sp_int.c ****         "subs   r4, %[hi], r4\n\t"
2977:../src/wolfcrypt/src/sp_int.c **** #else
2978:../src/wolfcrypt/src/sp_int.c ****         "sub    r4, %[hi], r4\n\t"
2979:../src/wolfcrypt/src/sp_int.c **** #endif
2980:../src/wolfcrypt/src/sp_int.c **** #endif
2981:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
2982:../src/wolfcrypt/src/sp_int.c ****         "sbcs   r6, r6, r5\n\t"
2983:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
2984:../src/wolfcrypt/src/sp_int.c ****         "sbcs   r6, r5\n\t"
2985:../src/wolfcrypt/src/sp_int.c **** #else
2986:../src/wolfcrypt/src/sp_int.c ****         "sbc    r6, r5\n\t"
2987:../src/wolfcrypt/src/sp_int.c **** #endif
2988:../src/wolfcrypt/src/sp_int.c ****         "movs   r5, r6\n\t"
2989:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2990:../src/wolfcrypt/src/sp_int.c ****         "adds   r3, r3, r5\n\t"
2991:../src/wolfcrypt/src/sp_int.c **** #else
2992:../src/wolfcrypt/src/sp_int.c ****         "add    r3, r3, r5\n\t"
2993:../src/wolfcrypt/src/sp_int.c **** #endif
2994:../src/wolfcrypt/src/sp_int.c ****         "movs   r6, %[d]\n\t"
2995:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
2996:../src/wolfcrypt/src/sp_int.c ****         "subs   r6, r6, r4\n\t"
2997:../src/wolfcrypt/src/sp_int.c **** #else
2998:../src/wolfcrypt/src/sp_int.c ****         "sub    r6, r6, r4\n\t"
2999:../src/wolfcrypt/src/sp_int.c **** #endif
3000:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_KEIL
3001:../src/wolfcrypt/src/sp_int.c ****         "sbcs   r6, r6, r6\n\t"
3002:../src/wolfcrypt/src/sp_int.c **** #elif defined(__clang__)
3003:../src/wolfcrypt/src/sp_int.c ****         "sbcs   r6, r6\n\t"
3004:../src/wolfcrypt/src/sp_int.c **** #else
3005:../src/wolfcrypt/src/sp_int.c ****         "sbc    r6, r6\n\t"
3006:../src/wolfcrypt/src/sp_int.c **** #endif
3007:../src/wolfcrypt/src/sp_int.c **** #if defined(__clang__) || defined(WOLFSSL_KEIL)
3008:../src/wolfcrypt/src/sp_int.c ****         "subs   r3, r3, r6\n\t"
3009:../src/wolfcrypt/src/sp_int.c **** #else
3010:../src/wolfcrypt/src/sp_int.c ****         "sub    r3, r3, r6\n\t"
3011:../src/wolfcrypt/src/sp_int.c **** #endif
3012:../src/wolfcrypt/src/sp_int.c ****         "movs   %[hi], r3\n\t"
3013:../src/wolfcrypt/src/sp_int.c ****         : [hi] "+l" (hi), [lo] "+l" (lo), [d] "+l" (d)
3014:../src/wolfcrypt/src/sp_int.c ****         :
3015:../src/wolfcrypt/src/sp_int.c ****         : "r3", "r4", "r5", "r6", "r7", "r8", "r9"
3016:../src/wolfcrypt/src/sp_int.c ****     );
3017:../src/wolfcrypt/src/sp_int.c ****     return (uint32_t)(size_t)hi;
3018:../src/wolfcrypt/src/sp_int.c **** }
3019:../src/wolfcrypt/src/sp_int.c **** 
3020:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_DIV_WORD
3021:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_SP_DIV_WORD_HALF */
3022:../src/wolfcrypt/src/sp_int.c **** 
3023:../src/wolfcrypt/src/sp_int.c **** #define SP_INT_ASM_AVAILABLE
3024:../src/wolfcrypt/src/sp_int.c **** 
3025:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_ARM_THUMB && SP_WORD_SIZE == 32 */
3026:../src/wolfcrypt/src/sp_int.c **** 
3027:../src/wolfcrypt/src/sp_int.c ****     #if defined(WOLFSSL_SP_PPC64) && SP_WORD_SIZE == 64
3028:../src/wolfcrypt/src/sp_int.c **** /*
3029:../src/wolfcrypt/src/sp_int.c ****  * CPU: PPC64
3030:../src/wolfcrypt/src/sp_int.c ****  */
3031:../src/wolfcrypt/src/sp_int.c **** 
3032:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
3033:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
3034:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3035:../src/wolfcrypt/src/sp_int.c ****         "mulld	%[l], %[a], %[b]	\n\t"            \
3036:../src/wolfcrypt/src/sp_int.c ****         "mulhdu	%[h], %[a], %[b]	\n\t"            \
3037:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
3038:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3039:../src/wolfcrypt/src/sp_int.c ****         : "memory"                                       \
3040:../src/wolfcrypt/src/sp_int.c ****     )
3041:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
3042:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
3043:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3044:../src/wolfcrypt/src/sp_int.c ****         "mulhdu	%[h], %[a], %[b]	\n\t"            \
3045:../src/wolfcrypt/src/sp_int.c ****         "mulld	%[l], %[a], %[b]	\n\t"            \
3046:../src/wolfcrypt/src/sp_int.c ****         "li	%[o], 0			\n\t"            \
3047:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "=r" (vo)    \
3048:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3049:../src/wolfcrypt/src/sp_int.c ****         :                                                \
3050:../src/wolfcrypt/src/sp_int.c ****     )
3051:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
3052:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
3053:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3054:../src/wolfcrypt/src/sp_int.c ****         "mulld	16, %[a], %[b]		\n\t"            \
3055:../src/wolfcrypt/src/sp_int.c ****         "mulhdu	17, %[a], %[b]		\n\t"            \
3056:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3057:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3058:../src/wolfcrypt/src/sp_int.c ****         "addze	%[o], %[o]		\n\t"            \
3059:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3060:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3061:../src/wolfcrypt/src/sp_int.c ****         : "16", "17", "cc"                               \
3062:../src/wolfcrypt/src/sp_int.c ****     )
3063:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
3064:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
3065:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3066:../src/wolfcrypt/src/sp_int.c ****         "mulld	16, %[a], %[b]		\n\t"            \
3067:../src/wolfcrypt/src/sp_int.c ****         "mulhdu	17, %[a], %[b]		\n\t"            \
3068:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3069:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3070:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3071:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3072:../src/wolfcrypt/src/sp_int.c ****         : "16", "17", "cc"                               \
3073:../src/wolfcrypt/src/sp_int.c ****     )
3074:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
3075:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
3076:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3077:../src/wolfcrypt/src/sp_int.c ****         "mulld	16, %[a], %[b]		\n\t"            \
3078:../src/wolfcrypt/src/sp_int.c ****         "mulhdu	17, %[a], %[b]		\n\t"            \
3079:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3080:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3081:../src/wolfcrypt/src/sp_int.c ****         "addze	%[o], %[o]		\n\t"            \
3082:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3083:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3084:../src/wolfcrypt/src/sp_int.c ****         "addze	%[o], %[o]		\n\t"            \
3085:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3086:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3087:../src/wolfcrypt/src/sp_int.c ****         : "16", "17", "cc"                               \
3088:../src/wolfcrypt/src/sp_int.c ****     )
3089:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
3090:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
3091:../src/wolfcrypt/src/sp_int.c ****  */
3092:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
3093:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3094:../src/wolfcrypt/src/sp_int.c ****         "mulld	16, %[a], %[b]		\n\t"            \
3095:../src/wolfcrypt/src/sp_int.c ****         "mulhdu	17, %[a], %[b]		\n\t"            \
3096:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3097:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3098:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3099:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3100:../src/wolfcrypt/src/sp_int.c ****         "addze	%[o], %[o]		\n\t"            \
3101:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3102:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3103:../src/wolfcrypt/src/sp_int.c ****         : "16", "17", "cc"                               \
3104:../src/wolfcrypt/src/sp_int.c ****     )
3105:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
3106:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
3107:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3108:../src/wolfcrypt/src/sp_int.c ****         "mulld	%[l], %[a], %[a]	\n\t"            \
3109:../src/wolfcrypt/src/sp_int.c ****         "mulhdu	%[h], %[a], %[a]	\n\t"            \
3110:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
3111:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3112:../src/wolfcrypt/src/sp_int.c ****         : "memory"                                       \
3113:../src/wolfcrypt/src/sp_int.c ****     )
3114:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
3115:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
3116:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3117:../src/wolfcrypt/src/sp_int.c ****         "mulld	16, %[a], %[a]		\n\t"            \
3118:../src/wolfcrypt/src/sp_int.c ****         "mulhdu	17, %[a], %[a]		\n\t"            \
3119:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3120:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3121:../src/wolfcrypt/src/sp_int.c ****         "addze	%[o], %[o]		\n\t"            \
3122:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3123:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3124:../src/wolfcrypt/src/sp_int.c ****         : "16", "17", "cc"                               \
3125:../src/wolfcrypt/src/sp_int.c ****     )
3126:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
3127:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
3128:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3129:../src/wolfcrypt/src/sp_int.c ****         "mulld	16, %[a], %[a]		\n\t"            \
3130:../src/wolfcrypt/src/sp_int.c ****         "mulhdu	17, %[a], %[a]		\n\t"            \
3131:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3132:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3133:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3134:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3135:../src/wolfcrypt/src/sp_int.c ****         : "16", "17", "cc"                               \
3136:../src/wolfcrypt/src/sp_int.c ****     )
3137:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
3138:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
3139:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3140:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], %[a]	\n\t"            \
3141:../src/wolfcrypt/src/sp_int.c ****         "addze	%[h], %[h]		\n\t"            \
3142:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3143:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3144:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
3145:../src/wolfcrypt/src/sp_int.c ****     )
3146:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
3147:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
3148:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3149:../src/wolfcrypt/src/sp_int.c ****         "subfc	%[l], %[a], %[l]	\n\t"            \
3150:../src/wolfcrypt/src/sp_int.c ****         "li    16, 0			\n\t"            \
3151:../src/wolfcrypt/src/sp_int.c ****         "subfe %[h], 16, %[h]		\n\t"            \
3152:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3153:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3154:../src/wolfcrypt/src/sp_int.c ****         : "16", "cc"                                     \
3155:../src/wolfcrypt/src/sp_int.c ****     )
3156:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
3157:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
3158:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3159:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], %[a]	\n\t"            \
3160:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], %[b]	\n\t"            \
3161:../src/wolfcrypt/src/sp_int.c ****         "adde	%[o], %[o], %[c]	\n\t"            \
3162:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], %[a]	\n\t"            \
3163:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], %[b]	\n\t"            \
3164:../src/wolfcrypt/src/sp_int.c ****         "adde	%[o], %[o], %[c]	\n\t"            \
3165:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3166:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb), [c] "r" (vc)       \
3167:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
3168:../src/wolfcrypt/src/sp_int.c ****     )
3169:../src/wolfcrypt/src/sp_int.c **** 
3170:../src/wolfcrypt/src/sp_int.c **** #define SP_INT_ASM_AVAILABLE
3171:../src/wolfcrypt/src/sp_int.c **** 
3172:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_PPC64 && SP_WORD_SIZE == 64 */
3173:../src/wolfcrypt/src/sp_int.c **** 
3174:../src/wolfcrypt/src/sp_int.c ****     #if defined(WOLFSSL_SP_PPC) && SP_WORD_SIZE == 32
3175:../src/wolfcrypt/src/sp_int.c **** /*
3176:../src/wolfcrypt/src/sp_int.c ****  * CPU: PPC 32-bit
3177:../src/wolfcrypt/src/sp_int.c ****  */
3178:../src/wolfcrypt/src/sp_int.c **** 
3179:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
3180:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
3181:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3182:../src/wolfcrypt/src/sp_int.c ****         "mullw	%[l], %[a], %[b]	\n\t"            \
3183:../src/wolfcrypt/src/sp_int.c ****         "mulhwu	%[h], %[a], %[b]	\n\t"            \
3184:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
3185:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3186:../src/wolfcrypt/src/sp_int.c ****         : "memory"                                       \
3187:../src/wolfcrypt/src/sp_int.c ****     )
3188:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
3189:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
3190:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3191:../src/wolfcrypt/src/sp_int.c ****         "mulhwu	%[h], %[a], %[b]	\n\t"            \
3192:../src/wolfcrypt/src/sp_int.c ****         "mullw	%[l], %[a], %[b]	\n\t"            \
3193:../src/wolfcrypt/src/sp_int.c ****         "li	%[o], 0			\n\t"            \
3194:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "=r" (vo)    \
3195:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3196:../src/wolfcrypt/src/sp_int.c ****         :                                                \
3197:../src/wolfcrypt/src/sp_int.c ****     )
3198:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
3199:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
3200:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3201:../src/wolfcrypt/src/sp_int.c ****         "mullw	16, %[a], %[b]		\n\t"            \
3202:../src/wolfcrypt/src/sp_int.c ****         "mulhwu	17, %[a], %[b]		\n\t"            \
3203:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3204:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3205:../src/wolfcrypt/src/sp_int.c ****         "addze	%[o], %[o]		\n\t"            \
3206:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3207:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3208:../src/wolfcrypt/src/sp_int.c ****         : "16", "17", "cc"                               \
3209:../src/wolfcrypt/src/sp_int.c ****     )
3210:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
3211:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
3212:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3213:../src/wolfcrypt/src/sp_int.c ****         "mullw	16, %[a], %[b]		\n\t"            \
3214:../src/wolfcrypt/src/sp_int.c ****         "mulhwu	17, %[a], %[b]		\n\t"            \
3215:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3216:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3217:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3218:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3219:../src/wolfcrypt/src/sp_int.c ****         : "16", "17", "cc"                               \
3220:../src/wolfcrypt/src/sp_int.c ****     )
3221:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
3222:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
3223:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3224:../src/wolfcrypt/src/sp_int.c ****         "mullw	16, %[a], %[b]		\n\t"            \
3225:../src/wolfcrypt/src/sp_int.c ****         "mulhwu	17, %[a], %[b]		\n\t"            \
3226:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3227:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3228:../src/wolfcrypt/src/sp_int.c ****         "addze	%[o], %[o]		\n\t"            \
3229:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3230:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3231:../src/wolfcrypt/src/sp_int.c ****         "addze	%[o], %[o]		\n\t"            \
3232:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3233:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3234:../src/wolfcrypt/src/sp_int.c ****         : "16", "17", "cc"                               \
3235:../src/wolfcrypt/src/sp_int.c ****     )
3236:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
3237:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
3238:../src/wolfcrypt/src/sp_int.c ****  */
3239:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
3240:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3241:../src/wolfcrypt/src/sp_int.c ****         "mullw	16, %[a], %[b]		\n\t"            \
3242:../src/wolfcrypt/src/sp_int.c ****         "mulhwu	17, %[a], %[b]		\n\t"            \
3243:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3244:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3245:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3246:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3247:../src/wolfcrypt/src/sp_int.c ****         "addze	%[o], %[o]		\n\t"            \
3248:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3249:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3250:../src/wolfcrypt/src/sp_int.c ****         : "16", "17", "cc"                               \
3251:../src/wolfcrypt/src/sp_int.c ****     )
3252:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
3253:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
3254:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3255:../src/wolfcrypt/src/sp_int.c ****         "mullw	%[l], %[a], %[a]	\n\t"            \
3256:../src/wolfcrypt/src/sp_int.c ****         "mulhwu	%[h], %[a], %[a]	\n\t"            \
3257:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
3258:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3259:../src/wolfcrypt/src/sp_int.c ****         : "memory"                                       \
3260:../src/wolfcrypt/src/sp_int.c ****     )
3261:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
3262:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
3263:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3264:../src/wolfcrypt/src/sp_int.c ****         "mullw	16, %[a], %[a]		\n\t"            \
3265:../src/wolfcrypt/src/sp_int.c ****         "mulhwu	17, %[a], %[a]		\n\t"            \
3266:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3267:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3268:../src/wolfcrypt/src/sp_int.c ****         "addze	%[o], %[o]		\n\t"            \
3269:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3270:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3271:../src/wolfcrypt/src/sp_int.c ****         : "16", "17", "cc"                               \
3272:../src/wolfcrypt/src/sp_int.c ****     )
3273:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
3274:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
3275:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3276:../src/wolfcrypt/src/sp_int.c ****         "mullw	16, %[a], %[a]		\n\t"            \
3277:../src/wolfcrypt/src/sp_int.c ****         "mulhwu	17, %[a], %[a]		\n\t"            \
3278:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], 16		\n\t"            \
3279:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], 17		\n\t"            \
3280:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3281:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3282:../src/wolfcrypt/src/sp_int.c ****         : "16", "17", "cc"                               \
3283:../src/wolfcrypt/src/sp_int.c ****     )
3284:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
3285:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
3286:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3287:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], %[a]	\n\t"            \
3288:../src/wolfcrypt/src/sp_int.c ****         "addze	%[h], %[h]		\n\t"            \
3289:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3290:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3291:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
3292:../src/wolfcrypt/src/sp_int.c ****     )
3293:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
3294:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
3295:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3296:../src/wolfcrypt/src/sp_int.c ****         "subfc	%[l], %[a], %[l]	\n\t"            \
3297:../src/wolfcrypt/src/sp_int.c ****         "li	16, 0			\n\t"            \
3298:../src/wolfcrypt/src/sp_int.c ****         "subfe	%[h], 16, %[h]		\n\t"            \
3299:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3300:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3301:../src/wolfcrypt/src/sp_int.c ****         : "16", "cc"                                     \
3302:../src/wolfcrypt/src/sp_int.c ****     )
3303:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
3304:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
3305:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3306:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], %[a]	\n\t"            \
3307:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], %[b]	\n\t"            \
3308:../src/wolfcrypt/src/sp_int.c ****         "adde	%[o], %[o], %[c]	\n\t"            \
3309:../src/wolfcrypt/src/sp_int.c ****         "addc	%[l], %[l], %[a]	\n\t"            \
3310:../src/wolfcrypt/src/sp_int.c ****         "adde	%[h], %[h], %[b]	\n\t"            \
3311:../src/wolfcrypt/src/sp_int.c ****         "adde	%[o], %[o], %[c]	\n\t"            \
3312:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3313:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb), [c] "r" (vc)       \
3314:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
3315:../src/wolfcrypt/src/sp_int.c ****     )
3316:../src/wolfcrypt/src/sp_int.c **** 
3317:../src/wolfcrypt/src/sp_int.c **** #define SP_INT_ASM_AVAILABLE
3318:../src/wolfcrypt/src/sp_int.c **** 
3319:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_PPC && SP_WORD_SIZE == 64 */
3320:../src/wolfcrypt/src/sp_int.c **** 
3321:../src/wolfcrypt/src/sp_int.c ****     #if defined(WOLFSSL_SP_MIPS64) && SP_WORD_SIZE == 64
3322:../src/wolfcrypt/src/sp_int.c **** /*
3323:../src/wolfcrypt/src/sp_int.c ****  * CPU: MIPS 64-bit
3324:../src/wolfcrypt/src/sp_int.c ****  */
3325:../src/wolfcrypt/src/sp_int.c **** 
3326:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
3327:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
3328:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3329:../src/wolfcrypt/src/sp_int.c ****         "dmultu	%[a], %[b]		\n\t"            \
3330:../src/wolfcrypt/src/sp_int.c ****         "mflo	%[l]			\n\t"            \
3331:../src/wolfcrypt/src/sp_int.c ****         "mfhi	%[h]			\n\t"            \
3332:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
3333:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3334:../src/wolfcrypt/src/sp_int.c ****         : "memory", "$lo", "$hi"                         \
3335:../src/wolfcrypt/src/sp_int.c ****     )
3336:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
3337:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
3338:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3339:../src/wolfcrypt/src/sp_int.c ****         "dmultu	%[a], %[b]		\n\t"            \
3340:../src/wolfcrypt/src/sp_int.c ****         "mflo	%[l]			\n\t"            \
3341:../src/wolfcrypt/src/sp_int.c ****         "mfhi	%[h]			\n\t"            \
3342:../src/wolfcrypt/src/sp_int.c ****         "move	%[o], $0		\n\t"            \
3343:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "=r" (vo)    \
3344:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3345:../src/wolfcrypt/src/sp_int.c ****         : "$lo", "$hi"                                   \
3346:../src/wolfcrypt/src/sp_int.c ****     )
3347:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
3348:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
3349:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3350:../src/wolfcrypt/src/sp_int.c ****         "dmultu	%[a], %[b]		\n\t"            \
3351:../src/wolfcrypt/src/sp_int.c ****         "mflo	$10			\n\t"            \
3352:../src/wolfcrypt/src/sp_int.c ****         "mfhi	$11			\n\t"            \
3353:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[l], %[l], $10		\n\t"            \
3354:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3355:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $12		\n\t"            \
3356:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3357:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3358:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $11		\n\t"            \
3359:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $11		\n\t"            \
3360:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3361:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3362:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3363:../src/wolfcrypt/src/sp_int.c ****         : "$10", "$11", "$12", "$lo", "$hi"              \
3364:../src/wolfcrypt/src/sp_int.c ****     )
3365:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
3366:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
3367:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3368:../src/wolfcrypt/src/sp_int.c ****         "dmultu	%[a], %[b]		\n\t"            \
3369:../src/wolfcrypt/src/sp_int.c ****         "mflo	$10			\n\t"            \
3370:../src/wolfcrypt/src/sp_int.c ****         "mfhi	$11			\n\t"            \
3371:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[l], %[l], $10		\n\t"            \
3372:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3373:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $11		\n\t"            \
3374:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $12		\n\t"            \
3375:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3376:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3377:../src/wolfcrypt/src/sp_int.c ****         : "$10", "$11", "$12", "$lo", "$hi"              \
3378:../src/wolfcrypt/src/sp_int.c ****     )
3379:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
3380:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
3381:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3382:../src/wolfcrypt/src/sp_int.c ****         "dmultu	%[a], %[b]		\n\t"            \
3383:../src/wolfcrypt/src/sp_int.c ****         "mflo	$10			\n\t"            \
3384:../src/wolfcrypt/src/sp_int.c ****         "mfhi	$11			\n\t"            \
3385:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[l], %[l], $10		\n\t"            \
3386:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3387:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $12		\n\t"            \
3388:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3389:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3390:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $11		\n\t"            \
3391:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $11		\n\t"            \
3392:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3393:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[l], %[l], $10		\n\t"            \
3394:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3395:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $12		\n\t"            \
3396:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3397:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3398:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $11		\n\t"            \
3399:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $11		\n\t"            \
3400:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3401:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3402:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3403:../src/wolfcrypt/src/sp_int.c ****         : "$10", "$11", "$12", "$lo", "$hi"              \
3404:../src/wolfcrypt/src/sp_int.c ****     )
3405:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
3406:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
3407:../src/wolfcrypt/src/sp_int.c ****  */
3408:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
3409:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3410:../src/wolfcrypt/src/sp_int.c ****         "dmultu	%[a], %[b]		\n\t"            \
3411:../src/wolfcrypt/src/sp_int.c ****         "mflo	$10			\n\t"            \
3412:../src/wolfcrypt/src/sp_int.c ****         "mfhi	$11			\n\t"            \
3413:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[l], %[l], $10		\n\t"            \
3414:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3415:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $11		\n\t"            \
3416:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $12		\n\t"            \
3417:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[l], %[l], $10		\n\t"            \
3418:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3419:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $12		\n\t"            \
3420:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3421:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3422:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $11		\n\t"            \
3423:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $11		\n\t"            \
3424:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3425:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3426:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3427:../src/wolfcrypt/src/sp_int.c ****         : "$10", "$11", "$12", "$lo", "$hi"              \
3428:../src/wolfcrypt/src/sp_int.c ****     )
3429:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
3430:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
3431:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3432:../src/wolfcrypt/src/sp_int.c ****         "dmultu	%[a], %[a]		\n\t"            \
3433:../src/wolfcrypt/src/sp_int.c ****         "mflo	%[l]			\n\t"            \
3434:../src/wolfcrypt/src/sp_int.c ****         "mfhi	%[h]			\n\t"            \
3435:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
3436:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3437:../src/wolfcrypt/src/sp_int.c ****         : "memory", "$lo", "$hi"                         \
3438:../src/wolfcrypt/src/sp_int.c ****     )
3439:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
3440:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
3441:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3442:../src/wolfcrypt/src/sp_int.c ****         "dmultu	%[a], %[a]		\n\t"            \
3443:../src/wolfcrypt/src/sp_int.c ****         "mflo	$10			\n\t"            \
3444:../src/wolfcrypt/src/sp_int.c ****         "mfhi	$11			\n\t"            \
3445:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[l], %[l], $10		\n\t"            \
3446:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3447:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $12		\n\t"            \
3448:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3449:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3450:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $11		\n\t"            \
3451:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $11		\n\t"            \
3452:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3453:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3454:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3455:../src/wolfcrypt/src/sp_int.c ****         : "$10", "$11", "$12", "$lo", "$hi"              \
3456:../src/wolfcrypt/src/sp_int.c ****     )
3457:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
3458:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
3459:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3460:../src/wolfcrypt/src/sp_int.c ****         "dmultu	%[a], %[a]		\n\t"            \
3461:../src/wolfcrypt/src/sp_int.c ****         "mflo	$10			\n\t"            \
3462:../src/wolfcrypt/src/sp_int.c ****         "mfhi	$11			\n\t"            \
3463:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[l], %[l], $10		\n\t"            \
3464:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3465:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $11		\n\t"            \
3466:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $12		\n\t"            \
3467:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3468:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3469:../src/wolfcrypt/src/sp_int.c ****         : "$10", "$11", "$12", "$lo", "$hi"              \
3470:../src/wolfcrypt/src/sp_int.c ****     )
3471:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
3472:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
3473:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3474:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[l], %[l], %[a]	\n\t"            \
3475:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], %[a]		\n\t"            \
3476:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $12		\n\t"            \
3477:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3478:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3479:../src/wolfcrypt/src/sp_int.c ****         : "$12"                                          \
3480:../src/wolfcrypt/src/sp_int.c ****     )
3481:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
3482:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
3483:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3484:../src/wolfcrypt/src/sp_int.c ****         "move	$12, %[l]		\n\t"            \
3485:../src/wolfcrypt/src/sp_int.c ****         "dsubu	%[l], $12, %[a]		\n\t"            \
3486:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, $12, %[l]		\n\t"            \
3487:../src/wolfcrypt/src/sp_int.c ****         "dsubu	%[h], %[h], $12		\n\t"            \
3488:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3489:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3490:../src/wolfcrypt/src/sp_int.c ****         : "$12"                                          \
3491:../src/wolfcrypt/src/sp_int.c ****     )
3492:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
3493:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
3494:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3495:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[l], %[l], %[a]	\n\t"            \
3496:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], %[a]		\n\t"            \
3497:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $12		\n\t"            \
3498:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3499:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3500:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], %[b]	\n\t"            \
3501:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], %[b]		\n\t"            \
3502:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], %[c]	\n\t"            \
3503:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3504:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[l], %[l], %[a]	\n\t"            \
3505:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], %[a]		\n\t"            \
3506:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], $12		\n\t"            \
3507:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3508:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3509:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[h], %[h], %[b]	\n\t"            \
3510:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], %[b]		\n\t"            \
3511:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], %[c]	\n\t"            \
3512:../src/wolfcrypt/src/sp_int.c ****         "daddu	%[o], %[o], $12		\n\t"            \
3513:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3514:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb), [c] "r" (vc)       \
3515:../src/wolfcrypt/src/sp_int.c ****         : "$12"                                          \
3516:../src/wolfcrypt/src/sp_int.c ****     )
3517:../src/wolfcrypt/src/sp_int.c **** 
3518:../src/wolfcrypt/src/sp_int.c **** #define SP_INT_ASM_AVAILABLE
3519:../src/wolfcrypt/src/sp_int.c **** 
3520:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_MIPS64 && SP_WORD_SIZE == 64 */
3521:../src/wolfcrypt/src/sp_int.c **** 
3522:../src/wolfcrypt/src/sp_int.c ****     #if defined(WOLFSSL_SP_MIPS) && SP_WORD_SIZE == 32
3523:../src/wolfcrypt/src/sp_int.c **** /*
3524:../src/wolfcrypt/src/sp_int.c ****  * CPU: MIPS 32-bit
3525:../src/wolfcrypt/src/sp_int.c ****  */
3526:../src/wolfcrypt/src/sp_int.c **** 
3527:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
3528:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
3529:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3530:../src/wolfcrypt/src/sp_int.c ****         "multu	%[a], %[b]		\n\t"            \
3531:../src/wolfcrypt/src/sp_int.c ****         "mflo	%[l]			\n\t"            \
3532:../src/wolfcrypt/src/sp_int.c ****         "mfhi	%[h]			\n\t"            \
3533:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
3534:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3535:../src/wolfcrypt/src/sp_int.c ****         : "memory", "%lo", "%hi"                         \
3536:../src/wolfcrypt/src/sp_int.c ****     )
3537:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
3538:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
3539:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3540:../src/wolfcrypt/src/sp_int.c ****         "multu	%[a], %[b]		\n\t"            \
3541:../src/wolfcrypt/src/sp_int.c ****         "mflo	%[l]			\n\t"            \
3542:../src/wolfcrypt/src/sp_int.c ****         "mfhi	%[h]			\n\t"            \
3543:../src/wolfcrypt/src/sp_int.c ****         "move	%[o], $0		\n\t"            \
3544:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "=r" (vo)    \
3545:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3546:../src/wolfcrypt/src/sp_int.c ****         : "%lo", "%hi"                                   \
3547:../src/wolfcrypt/src/sp_int.c ****     )
3548:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
3549:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
3550:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3551:../src/wolfcrypt/src/sp_int.c ****         "multu	%[a], %[b]		\n\t"            \
3552:../src/wolfcrypt/src/sp_int.c ****         "mflo	$10			\n\t"            \
3553:../src/wolfcrypt/src/sp_int.c ****         "mfhi	$11			\n\t"            \
3554:../src/wolfcrypt/src/sp_int.c ****         "addu	%[l], %[l], $10		\n\t"            \
3555:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3556:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $12		\n\t"            \
3557:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3558:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3559:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $11		\n\t"            \
3560:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $11		\n\t"            \
3561:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3562:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3563:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3564:../src/wolfcrypt/src/sp_int.c ****         : "$10", "$11", "$12", "%lo", "%hi"              \
3565:../src/wolfcrypt/src/sp_int.c ****     )
3566:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
3567:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
3568:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3569:../src/wolfcrypt/src/sp_int.c ****         "multu	%[a], %[b]		\n\t"            \
3570:../src/wolfcrypt/src/sp_int.c ****         "mflo	$10			\n\t"            \
3571:../src/wolfcrypt/src/sp_int.c ****         "mfhi	$11			\n\t"            \
3572:../src/wolfcrypt/src/sp_int.c ****         "addu	%[l], %[l], $10		\n\t"            \
3573:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3574:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $11		\n\t"            \
3575:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $12		\n\t"            \
3576:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3577:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3578:../src/wolfcrypt/src/sp_int.c ****         : "$10", "$11", "$12", "%lo", "%hi"              \
3579:../src/wolfcrypt/src/sp_int.c ****     )
3580:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
3581:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
3582:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3583:../src/wolfcrypt/src/sp_int.c ****         "multu	%[a], %[b]		\n\t"            \
3584:../src/wolfcrypt/src/sp_int.c ****         "mflo	$10			\n\t"            \
3585:../src/wolfcrypt/src/sp_int.c ****         "mfhi	$11			\n\t"            \
3586:../src/wolfcrypt/src/sp_int.c ****         "addu	%[l], %[l], $10		\n\t"            \
3587:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3588:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $12		\n\t"            \
3589:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3590:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3591:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $11		\n\t"            \
3592:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $11		\n\t"            \
3593:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3594:../src/wolfcrypt/src/sp_int.c ****         "addu	%[l], %[l], $10		\n\t"            \
3595:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3596:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $12		\n\t"            \
3597:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3598:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3599:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $11		\n\t"            \
3600:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $11		\n\t"            \
3601:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3602:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3603:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3604:../src/wolfcrypt/src/sp_int.c ****         : "$10", "$11", "$12", "%lo", "%hi"              \
3605:../src/wolfcrypt/src/sp_int.c ****     )
3606:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
3607:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
3608:../src/wolfcrypt/src/sp_int.c ****  */
3609:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
3610:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3611:../src/wolfcrypt/src/sp_int.c ****         "multu	%[a], %[b]		\n\t"            \
3612:../src/wolfcrypt/src/sp_int.c ****         "mflo	$10			\n\t"            \
3613:../src/wolfcrypt/src/sp_int.c ****         "mfhi	$11			\n\t"            \
3614:../src/wolfcrypt/src/sp_int.c ****         "addu	%[l], %[l], $10		\n\t"            \
3615:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3616:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $11		\n\t"            \
3617:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $12		\n\t"            \
3618:../src/wolfcrypt/src/sp_int.c ****         "addu	%[l], %[l], $10		\n\t"            \
3619:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3620:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $12		\n\t"            \
3621:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3622:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3623:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $11		\n\t"            \
3624:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $11		\n\t"            \
3625:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3626:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3627:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3628:../src/wolfcrypt/src/sp_int.c ****         : "$10", "$11", "$12", "%lo", "%hi"              \
3629:../src/wolfcrypt/src/sp_int.c ****     )
3630:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
3631:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
3632:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3633:../src/wolfcrypt/src/sp_int.c ****         "multu	%[a], %[a]		\n\t"            \
3634:../src/wolfcrypt/src/sp_int.c ****         "mflo	%[l]			\n\t"            \
3635:../src/wolfcrypt/src/sp_int.c ****         "mfhi	%[h]			\n\t"            \
3636:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
3637:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3638:../src/wolfcrypt/src/sp_int.c ****         : "memory", "%lo", "%hi"                         \
3639:../src/wolfcrypt/src/sp_int.c ****     )
3640:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
3641:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
3642:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3643:../src/wolfcrypt/src/sp_int.c ****         "multu	%[a], %[a]		\n\t"            \
3644:../src/wolfcrypt/src/sp_int.c ****         "mflo	$10			\n\t"            \
3645:../src/wolfcrypt/src/sp_int.c ****         "mfhi	$11			\n\t"            \
3646:../src/wolfcrypt/src/sp_int.c ****         "addu	%[l], %[l], $10		\n\t"            \
3647:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3648:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $12		\n\t"            \
3649:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3650:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3651:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $11		\n\t"            \
3652:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $11		\n\t"            \
3653:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3654:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3655:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3656:../src/wolfcrypt/src/sp_int.c ****         : "$10", "$11", "$12", "%lo", "%hi"              \
3657:../src/wolfcrypt/src/sp_int.c ****     )
3658:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
3659:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
3660:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3661:../src/wolfcrypt/src/sp_int.c ****         "multu	%[a], %[a]		\n\t"            \
3662:../src/wolfcrypt/src/sp_int.c ****         "mflo	$10			\n\t"            \
3663:../src/wolfcrypt/src/sp_int.c ****         "mfhi	$11			\n\t"            \
3664:../src/wolfcrypt/src/sp_int.c ****         "addu	%[l], %[l], $10		\n\t"            \
3665:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], $10		\n\t"            \
3666:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $11		\n\t"            \
3667:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $12		\n\t"            \
3668:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3669:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3670:../src/wolfcrypt/src/sp_int.c ****         : "$10", "$11", "$12", "%lo", "%hi"              \
3671:../src/wolfcrypt/src/sp_int.c ****     )
3672:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
3673:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
3674:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3675:../src/wolfcrypt/src/sp_int.c ****         "addu	%[l], %[l], %[a]	\n\t"            \
3676:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], %[a]		\n\t"            \
3677:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $12		\n\t"            \
3678:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3679:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3680:../src/wolfcrypt/src/sp_int.c ****         : "$12"                                          \
3681:../src/wolfcrypt/src/sp_int.c ****     )
3682:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
3683:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
3684:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3685:../src/wolfcrypt/src/sp_int.c ****         "move	$12, %[l]		\n\t"            \
3686:../src/wolfcrypt/src/sp_int.c ****         "subu	%[l], $12, %[a]		\n\t"            \
3687:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, $12, %[l]		\n\t"            \
3688:../src/wolfcrypt/src/sp_int.c ****         "subu	%[h], %[h], $12		\n\t"            \
3689:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3690:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3691:../src/wolfcrypt/src/sp_int.c ****         : "$12"                                          \
3692:../src/wolfcrypt/src/sp_int.c ****     )
3693:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
3694:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
3695:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3696:../src/wolfcrypt/src/sp_int.c ****         "addu	%[l], %[l], %[a]	\n\t"            \
3697:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], %[a]		\n\t"            \
3698:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $12		\n\t"            \
3699:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3700:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3701:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], %[b]	\n\t"            \
3702:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], %[b]		\n\t"            \
3703:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], %[c]	\n\t"            \
3704:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3705:../src/wolfcrypt/src/sp_int.c ****         "addu	%[l], %[l], %[a]	\n\t"            \
3706:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[l], %[a]		\n\t"            \
3707:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], $12		\n\t"            \
3708:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], $12		\n\t"            \
3709:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3710:../src/wolfcrypt/src/sp_int.c ****         "addu	%[h], %[h], %[b]	\n\t"            \
3711:../src/wolfcrypt/src/sp_int.c ****         "sltu	$12, %[h], %[b]		\n\t"            \
3712:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], %[c]	\n\t"            \
3713:../src/wolfcrypt/src/sp_int.c ****         "addu	%[o], %[o], $12		\n\t"            \
3714:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3715:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb), [c] "r" (vc)       \
3716:../src/wolfcrypt/src/sp_int.c ****         : "$12"                                          \
3717:../src/wolfcrypt/src/sp_int.c ****     )
3718:../src/wolfcrypt/src/sp_int.c **** 
3719:../src/wolfcrypt/src/sp_int.c **** #define SP_INT_ASM_AVAILABLE
3720:../src/wolfcrypt/src/sp_int.c **** 
3721:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_MIPS && SP_WORD_SIZE == 32 */
3722:../src/wolfcrypt/src/sp_int.c **** 
3723:../src/wolfcrypt/src/sp_int.c ****     #if defined(WOLFSSL_SP_RISCV64) && SP_WORD_SIZE == 64
3724:../src/wolfcrypt/src/sp_int.c **** /*
3725:../src/wolfcrypt/src/sp_int.c ****  * CPU: RISCV 64-bit
3726:../src/wolfcrypt/src/sp_int.c ****  */
3727:../src/wolfcrypt/src/sp_int.c **** 
3728:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
3729:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
3730:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3731:../src/wolfcrypt/src/sp_int.c ****         "mul	%[l], %[a], %[b]	\n\t"            \
3732:../src/wolfcrypt/src/sp_int.c ****         "mulhu	%[h], %[a], %[b]	\n\t"            \
3733:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
3734:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3735:../src/wolfcrypt/src/sp_int.c ****         : "memory"                                       \
3736:../src/wolfcrypt/src/sp_int.c ****     )
3737:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
3738:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
3739:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3740:../src/wolfcrypt/src/sp_int.c ****         "mulhu	%[h], %[a], %[b]	\n\t"            \
3741:../src/wolfcrypt/src/sp_int.c ****         "mul	%[l], %[a], %[b]	\n\t"            \
3742:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], zero, zero	\n\t"            \
3743:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "=r" (vo)    \
3744:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3745:../src/wolfcrypt/src/sp_int.c ****         :                                                \
3746:../src/wolfcrypt/src/sp_int.c ****     )
3747:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
3748:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
3749:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3750:../src/wolfcrypt/src/sp_int.c ****         "mul	a5, %[a], %[b]		\n\t"            \
3751:../src/wolfcrypt/src/sp_int.c ****         "mulhu	a6, %[a], %[b]		\n\t"            \
3752:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
3753:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
3754:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3755:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
3756:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3757:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
3758:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a6		\n\t"            \
3759:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3760:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3761:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3762:../src/wolfcrypt/src/sp_int.c ****         : "a5", "a6", "a7"                               \
3763:../src/wolfcrypt/src/sp_int.c ****     )
3764:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
3765:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
3766:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3767:../src/wolfcrypt/src/sp_int.c ****         "mul	a5, %[a], %[b]		\n\t"            \
3768:../src/wolfcrypt/src/sp_int.c ****         "mulhu	a6, %[a], %[b]		\n\t"            \
3769:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
3770:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
3771:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
3772:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3773:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3774:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3775:../src/wolfcrypt/src/sp_int.c ****         : "a5", "a6", "a7"                               \
3776:../src/wolfcrypt/src/sp_int.c ****     )
3777:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
3778:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
3779:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3780:../src/wolfcrypt/src/sp_int.c ****         "mul	a5, %[a], %[b]		\n\t"            \
3781:../src/wolfcrypt/src/sp_int.c ****         "mulhu	a6, %[a], %[b]		\n\t"            \
3782:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
3783:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
3784:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3785:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
3786:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3787:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
3788:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a6		\n\t"            \
3789:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3790:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
3791:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
3792:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3793:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
3794:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3795:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
3796:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a6		\n\t"            \
3797:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3798:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3799:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3800:../src/wolfcrypt/src/sp_int.c ****         : "a5", "a6", "a7"                               \
3801:../src/wolfcrypt/src/sp_int.c ****     )
3802:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
3803:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
3804:../src/wolfcrypt/src/sp_int.c ****  */
3805:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
3806:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3807:../src/wolfcrypt/src/sp_int.c ****         "mul	a5, %[a], %[b]		\n\t"            \
3808:../src/wolfcrypt/src/sp_int.c ****         "mulhu	a6, %[a], %[b]		\n\t"            \
3809:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
3810:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
3811:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
3812:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3813:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
3814:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
3815:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3816:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
3817:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3818:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
3819:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a6		\n\t"            \
3820:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3821:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3822:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3823:../src/wolfcrypt/src/sp_int.c ****         : "a5", "a6", "a7"                               \
3824:../src/wolfcrypt/src/sp_int.c ****     )
3825:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
3826:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
3827:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3828:../src/wolfcrypt/src/sp_int.c ****         "mul	%[l], %[a], %[a]	\n\t"            \
3829:../src/wolfcrypt/src/sp_int.c ****         "mulhu	%[h], %[a], %[a]	\n\t"            \
3830:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
3831:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3832:../src/wolfcrypt/src/sp_int.c ****         : "memory"                                       \
3833:../src/wolfcrypt/src/sp_int.c ****     )
3834:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
3835:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
3836:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3837:../src/wolfcrypt/src/sp_int.c ****         "mul	a5, %[a], %[a]		\n\t"            \
3838:../src/wolfcrypt/src/sp_int.c ****         "mulhu	a6, %[a], %[a]		\n\t"            \
3839:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
3840:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
3841:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3842:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
3843:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3844:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
3845:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a6		\n\t"            \
3846:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3847:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3848:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3849:../src/wolfcrypt/src/sp_int.c ****         : "a5", "a6", "a7"                               \
3850:../src/wolfcrypt/src/sp_int.c ****     )
3851:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
3852:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
3853:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3854:../src/wolfcrypt/src/sp_int.c ****         "mul	a5, %[a], %[a]		\n\t"            \
3855:../src/wolfcrypt/src/sp_int.c ****         "mulhu	a6, %[a], %[a]		\n\t"            \
3856:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
3857:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
3858:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
3859:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3860:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3861:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3862:../src/wolfcrypt/src/sp_int.c ****         : "a5", "a6", "a7"                               \
3863:../src/wolfcrypt/src/sp_int.c ****     )
3864:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
3865:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
3866:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3867:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], %[a]	\n\t"            \
3868:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], %[a]		\n\t"            \
3869:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3870:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3871:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3872:../src/wolfcrypt/src/sp_int.c ****         : "a7"                                           \
3873:../src/wolfcrypt/src/sp_int.c ****     )
3874:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
3875:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
3876:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3877:../src/wolfcrypt/src/sp_int.c ****         "add	a7, %[l], zero		\n\t"            \
3878:../src/wolfcrypt/src/sp_int.c ****         "sub	%[l], a7, %[a]		\n\t"            \
3879:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, a7, %[l]		\n\t"            \
3880:../src/wolfcrypt/src/sp_int.c ****         "sub	%[h], %[h], a7		\n\t"            \
3881:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3882:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
3883:../src/wolfcrypt/src/sp_int.c ****         : "a7"                                           \
3884:../src/wolfcrypt/src/sp_int.c ****     )
3885:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
3886:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
3887:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3888:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], %[a]	\n\t"            \
3889:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], %[a]		\n\t"            \
3890:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3891:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
3892:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3893:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], %[b]	\n\t"            \
3894:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], %[b]		\n\t"            \
3895:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], %[c]	\n\t"            \
3896:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3897:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], %[a]	\n\t"            \
3898:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], %[a]		\n\t"            \
3899:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3900:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
3901:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3902:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], %[b]	\n\t"            \
3903:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], %[b]		\n\t"            \
3904:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], %[c]	\n\t"            \
3905:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3906:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3907:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb), [c] "r" (vc)       \
3908:../src/wolfcrypt/src/sp_int.c ****         : "a7"                                           \
3909:../src/wolfcrypt/src/sp_int.c ****     )
3910:../src/wolfcrypt/src/sp_int.c **** 
3911:../src/wolfcrypt/src/sp_int.c **** #define SP_INT_ASM_AVAILABLE
3912:../src/wolfcrypt/src/sp_int.c **** 
3913:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_RISCV64 && SP_WORD_SIZE == 64 */
3914:../src/wolfcrypt/src/sp_int.c **** 
3915:../src/wolfcrypt/src/sp_int.c ****     #if defined(WOLFSSL_SP_RISCV32) && SP_WORD_SIZE == 32
3916:../src/wolfcrypt/src/sp_int.c **** /*
3917:../src/wolfcrypt/src/sp_int.c ****  * CPU: RISCV 32-bit
3918:../src/wolfcrypt/src/sp_int.c ****  */
3919:../src/wolfcrypt/src/sp_int.c **** 
3920:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
3921:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
3922:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3923:../src/wolfcrypt/src/sp_int.c ****         "mul	%[l], %[a], %[b]	\n\t"            \
3924:../src/wolfcrypt/src/sp_int.c ****         "mulhu	%[h], %[a], %[b]	\n\t"            \
3925:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
3926:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3927:../src/wolfcrypt/src/sp_int.c ****         : "memory"                                       \
3928:../src/wolfcrypt/src/sp_int.c ****     )
3929:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
3930:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
3931:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3932:../src/wolfcrypt/src/sp_int.c ****         "mulhu	%[h], %[a], %[b]	\n\t"            \
3933:../src/wolfcrypt/src/sp_int.c ****         "mul	%[l], %[a], %[b]	\n\t"            \
3934:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], zero, zero	\n\t"            \
3935:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "=r" (vo)    \
3936:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3937:../src/wolfcrypt/src/sp_int.c ****         :                                                \
3938:../src/wolfcrypt/src/sp_int.c ****     )
3939:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
3940:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
3941:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3942:../src/wolfcrypt/src/sp_int.c ****         "mul	a5, %[a], %[b]		\n\t"            \
3943:../src/wolfcrypt/src/sp_int.c ****         "mulhu	a6, %[a], %[b]		\n\t"            \
3944:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
3945:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
3946:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3947:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
3948:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3949:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
3950:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a6		\n\t"            \
3951:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3952:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3953:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3954:../src/wolfcrypt/src/sp_int.c ****         : "a5", "a6", "a7"                               \
3955:../src/wolfcrypt/src/sp_int.c ****     )
3956:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
3957:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
3958:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3959:../src/wolfcrypt/src/sp_int.c ****         "mul	a5, %[a], %[b]		\n\t"            \
3960:../src/wolfcrypt/src/sp_int.c ****         "mulhu	a6, %[a], %[b]		\n\t"            \
3961:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
3962:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
3963:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
3964:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3965:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
3966:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3967:../src/wolfcrypt/src/sp_int.c ****         : "a5", "a6", "a7"                               \
3968:../src/wolfcrypt/src/sp_int.c ****     )
3969:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
3970:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
3971:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3972:../src/wolfcrypt/src/sp_int.c ****         "mul	a5, %[a], %[b]		\n\t"            \
3973:../src/wolfcrypt/src/sp_int.c ****         "mulhu	a6, %[a], %[b]		\n\t"            \
3974:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
3975:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
3976:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3977:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
3978:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3979:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
3980:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a6		\n\t"            \
3981:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3982:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
3983:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
3984:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
3985:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
3986:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3987:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
3988:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a6		\n\t"            \
3989:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
3990:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
3991:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
3992:../src/wolfcrypt/src/sp_int.c ****         : "a5", "a6", "a7"                               \
3993:../src/wolfcrypt/src/sp_int.c ****     )
3994:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
3995:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
3996:../src/wolfcrypt/src/sp_int.c ****  */
3997:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
3998:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
3999:../src/wolfcrypt/src/sp_int.c ****         "mul	a5, %[a], %[b]		\n\t"            \
4000:../src/wolfcrypt/src/sp_int.c ****         "mulhu	a6, %[a], %[b]		\n\t"            \
4001:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
4002:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
4003:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
4004:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
4005:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
4006:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
4007:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
4008:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
4009:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
4010:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
4011:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a6		\n\t"            \
4012:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
4013:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
4014:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
4015:../src/wolfcrypt/src/sp_int.c ****         : "a5", "a6", "a7"                               \
4016:../src/wolfcrypt/src/sp_int.c ****     )
4017:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
4018:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
4019:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4020:../src/wolfcrypt/src/sp_int.c ****         "mul	%[l], %[a], %[a]	\n\t"            \
4021:../src/wolfcrypt/src/sp_int.c ****         "mulhu	%[h], %[a], %[a]	\n\t"            \
4022:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
4023:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
4024:../src/wolfcrypt/src/sp_int.c ****         : "memory"                                       \
4025:../src/wolfcrypt/src/sp_int.c ****     )
4026:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
4027:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
4028:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4029:../src/wolfcrypt/src/sp_int.c ****         "mul	a5, %[a], %[a]		\n\t"            \
4030:../src/wolfcrypt/src/sp_int.c ****         "mulhu	a6, %[a], %[a]		\n\t"            \
4031:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
4032:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
4033:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
4034:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
4035:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
4036:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
4037:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a6		\n\t"            \
4038:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
4039:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
4040:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
4041:../src/wolfcrypt/src/sp_int.c ****         : "a5", "a6", "a7"                               \
4042:../src/wolfcrypt/src/sp_int.c ****     )
4043:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
4044:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
4045:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4046:../src/wolfcrypt/src/sp_int.c ****         "mul	a5, %[a], %[a]		\n\t"            \
4047:../src/wolfcrypt/src/sp_int.c ****         "mulhu	a6, %[a], %[a]		\n\t"            \
4048:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], a5		\n\t"            \
4049:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], a5		\n\t"            \
4050:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a6		\n\t"            \
4051:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
4052:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
4053:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
4054:../src/wolfcrypt/src/sp_int.c ****         : "a5", "a6", "a7"                               \
4055:../src/wolfcrypt/src/sp_int.c ****     )
4056:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
4057:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
4058:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4059:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], %[a]	\n\t"            \
4060:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], %[a]		\n\t"            \
4061:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
4062:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
4063:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
4064:../src/wolfcrypt/src/sp_int.c ****         : "a7"                                           \
4065:../src/wolfcrypt/src/sp_int.c ****     )
4066:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
4067:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
4068:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4069:../src/wolfcrypt/src/sp_int.c ****         "add	a7, %[l], zero		\n\t"            \
4070:../src/wolfcrypt/src/sp_int.c ****         "sub	%[l], a7, %[a]		\n\t"            \
4071:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, a7, %[l]		\n\t"            \
4072:../src/wolfcrypt/src/sp_int.c ****         "sub	%[h], %[h], a7		\n\t"            \
4073:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
4074:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
4075:../src/wolfcrypt/src/sp_int.c ****         : "a7"                                           \
4076:../src/wolfcrypt/src/sp_int.c ****     )
4077:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
4078:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
4079:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4080:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], %[a]	\n\t"            \
4081:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], %[a]		\n\t"            \
4082:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
4083:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
4084:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
4085:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], %[b]	\n\t"            \
4086:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], %[b]		\n\t"            \
4087:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], %[c]	\n\t"            \
4088:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
4089:../src/wolfcrypt/src/sp_int.c ****         "add	%[l], %[l], %[a]	\n\t"            \
4090:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[l], %[a]		\n\t"            \
4091:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], a7		\n\t"            \
4092:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], a7		\n\t"            \
4093:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
4094:../src/wolfcrypt/src/sp_int.c ****         "add	%[h], %[h], %[b]	\n\t"            \
4095:../src/wolfcrypt/src/sp_int.c ****         "sltu	a7, %[h], %[b]		\n\t"            \
4096:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], %[c]	\n\t"            \
4097:../src/wolfcrypt/src/sp_int.c ****         "add	%[o], %[o], a7		\n\t"            \
4098:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
4099:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb), [c] "r" (vc)       \
4100:../src/wolfcrypt/src/sp_int.c ****         : "a7"                                           \
4101:../src/wolfcrypt/src/sp_int.c ****     )
4102:../src/wolfcrypt/src/sp_int.c **** 
4103:../src/wolfcrypt/src/sp_int.c **** #define SP_INT_ASM_AVAILABLE
4104:../src/wolfcrypt/src/sp_int.c **** 
4105:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_RISCV32 && SP_WORD_SIZE == 32 */
4106:../src/wolfcrypt/src/sp_int.c **** 
4107:../src/wolfcrypt/src/sp_int.c ****     #if defined(WOLFSSL_SP_S390X) && SP_WORD_SIZE == 64
4108:../src/wolfcrypt/src/sp_int.c **** /*
4109:../src/wolfcrypt/src/sp_int.c ****  * CPU: Intel s390x
4110:../src/wolfcrypt/src/sp_int.c ****  */
4111:../src/wolfcrypt/src/sp_int.c **** 
4112:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vh | vl */
4113:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL(vl, vh, va, vb)                       \
4114:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4115:../src/wolfcrypt/src/sp_int.c ****         "lgr	%%r1, %[a]		\n\t"            \
4116:../src/wolfcrypt/src/sp_int.c ****         "mlgr	%%r0, %[b]		\n\t"            \
4117:../src/wolfcrypt/src/sp_int.c ****         "lgr	%[l], %%r1		\n\t"            \
4118:../src/wolfcrypt/src/sp_int.c ****         "lgr	%[h], %%r0		\n\t"            \
4119:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
4120:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
4121:../src/wolfcrypt/src/sp_int.c ****         : "memory", "r0", "r1"                           \
4122:../src/wolfcrypt/src/sp_int.c ****     )
4123:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and store double size result in: vo | vh | vl */
4124:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_SET(vl, vh, vo, va, vb)               \
4125:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4126:../src/wolfcrypt/src/sp_int.c ****         "lgr	%%r1, %[a]		\n\t"            \
4127:../src/wolfcrypt/src/sp_int.c ****         "mlgr	%%r0, %[b]		\n\t"            \
4128:../src/wolfcrypt/src/sp_int.c ****         "lghi	%[o], 0			\n\t"            \
4129:../src/wolfcrypt/src/sp_int.c ****         "lgr	%[l], %%r1		\n\t"            \
4130:../src/wolfcrypt/src/sp_int.c ****         "lgr	%[h], %%r0		\n\t"            \
4131:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "=r" (vo)    \
4132:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
4133:../src/wolfcrypt/src/sp_int.c ****         : "r0", "r1"                                     \
4134:../src/wolfcrypt/src/sp_int.c ****     )
4135:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vo | vh | vl */
4136:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD(vl, vh, vo, va, vb)               \
4137:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4138:../src/wolfcrypt/src/sp_int.c ****         "lghi	%%r10, 0	\n\t"                    \
4139:../src/wolfcrypt/src/sp_int.c ****         "lgr	%%r1, %[a]		\n\t"            \
4140:../src/wolfcrypt/src/sp_int.c ****         "mlgr	%%r0, %[b]		\n\t"            \
4141:../src/wolfcrypt/src/sp_int.c ****         "algr	%[l], %%r1	\n\t"                    \
4142:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[h], %%r0	\n\t"                    \
4143:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[o], %%r10	\n\t"                    \
4144:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
4145:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
4146:../src/wolfcrypt/src/sp_int.c ****         : "r0", "r1", "r10", "cc"                        \
4147:../src/wolfcrypt/src/sp_int.c ****     )
4148:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result into: vh | vl */
4149:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD_NO(vl, vh, va, vb)                \
4150:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4151:../src/wolfcrypt/src/sp_int.c ****         "lgr	%%r1, %[a]		\n\t"            \
4152:../src/wolfcrypt/src/sp_int.c ****         "mlgr	%%r0, %[b]		\n\t"            \
4153:../src/wolfcrypt/src/sp_int.c ****         "algr	%[l], %%r1	\n\t"                    \
4154:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[h], %%r0	\n\t"                    \
4155:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
4156:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
4157:../src/wolfcrypt/src/sp_int.c ****         : "r0", "r1", "cc"                               \
4158:../src/wolfcrypt/src/sp_int.c ****     )
4159:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl */
4160:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2(vl, vh, vo, va, vb)              \
4161:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4162:../src/wolfcrypt/src/sp_int.c ****         "lghi	%%r10, 0	\n\t"                    \
4163:../src/wolfcrypt/src/sp_int.c ****         "lgr	%%r1, %[a]		\n\t"            \
4164:../src/wolfcrypt/src/sp_int.c ****         "mlgr	%%r0, %[b]		\n\t"            \
4165:../src/wolfcrypt/src/sp_int.c ****         "algr	%[l], %%r1	\n\t"                    \
4166:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[h], %%r0	\n\t"                    \
4167:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[o], %%r10	\n\t"                    \
4168:../src/wolfcrypt/src/sp_int.c ****         "algr	%[l], %%r1	\n\t"                    \
4169:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[h], %%r0	\n\t"                    \
4170:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[o], %%r10	\n\t"                    \
4171:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
4172:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
4173:../src/wolfcrypt/src/sp_int.c ****         : "r0", "r1", "r10", "cc"                        \
4174:../src/wolfcrypt/src/sp_int.c ****     )
4175:../src/wolfcrypt/src/sp_int.c **** /* Multiply va by vb and add double size result twice into: vo | vh | vl
4176:../src/wolfcrypt/src/sp_int.c ****  * Assumes first add will not overflow vh | vl
4177:../src/wolfcrypt/src/sp_int.c ****  */
4178:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_MUL_ADD2_NO(vl, vh, vo, va, vb)           \
4179:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4180:../src/wolfcrypt/src/sp_int.c ****         "lghi	%%r10, 0	\n\t"                    \
4181:../src/wolfcrypt/src/sp_int.c ****         "lgr	%%r1, %[a]		\n\t"            \
4182:../src/wolfcrypt/src/sp_int.c ****         "mlgr	%%r0, %[b]		\n\t"            \
4183:../src/wolfcrypt/src/sp_int.c ****         "algr	%[l], %%r1	\n\t"                    \
4184:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[h], %%r0	\n\t"                    \
4185:../src/wolfcrypt/src/sp_int.c ****         "algr	%[l], %%r1	\n\t"                    \
4186:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[h], %%r0	\n\t"                    \
4187:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[o], %%r10	\n\t"                    \
4188:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
4189:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb)                     \
4190:../src/wolfcrypt/src/sp_int.c ****         : "r0", "r1", "r10", "cc"                        \
4191:../src/wolfcrypt/src/sp_int.c ****     )
4192:../src/wolfcrypt/src/sp_int.c **** /* Square va and store double size result in: vh | vl */
4193:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR(vl, vh, va)                           \
4194:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4195:../src/wolfcrypt/src/sp_int.c ****         "lgr	%%r1, %[a]		\n\t"            \
4196:../src/wolfcrypt/src/sp_int.c ****         "mlgr	%%r0, %%r1		\n\t"            \
4197:../src/wolfcrypt/src/sp_int.c ****         "lgr	%[l], %%r1		\n\t"            \
4198:../src/wolfcrypt/src/sp_int.c ****         "lgr	%[h], %%r0		\n\t"            \
4199:../src/wolfcrypt/src/sp_int.c ****         : [h] "+r" (vh), [l] "+r" (vl)                   \
4200:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
4201:../src/wolfcrypt/src/sp_int.c ****         : "memory", "r0", "r1"                           \
4202:../src/wolfcrypt/src/sp_int.c ****     )
4203:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vo | vh | vl */
4204:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD(vl, vh, vo, va)                   \
4205:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4206:../src/wolfcrypt/src/sp_int.c ****         "lghi	%%r10, 0	\n\t"                    \
4207:../src/wolfcrypt/src/sp_int.c ****         "lgr	%%r1, %[a]		\n\t"            \
4208:../src/wolfcrypt/src/sp_int.c ****         "mlgr	%%r0, %%r1		\n\t"            \
4209:../src/wolfcrypt/src/sp_int.c ****         "algr	%[l], %%r1	\n\t"                    \
4210:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[h], %%r0	\n\t"                    \
4211:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[o], %%r10	\n\t"                    \
4212:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
4213:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
4214:../src/wolfcrypt/src/sp_int.c ****         : "r0", "r1", "r10", "cc"                        \
4215:../src/wolfcrypt/src/sp_int.c ****     )
4216:../src/wolfcrypt/src/sp_int.c **** /* Square va and add double size result into: vh | vl */
4217:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SQR_ADD_NO(vl, vh, va)                    \
4218:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4219:../src/wolfcrypt/src/sp_int.c ****         "lgr	%%r1, %[a]		\n\t"            \
4220:../src/wolfcrypt/src/sp_int.c ****         "mlgr	%%r0, %%r1		\n\t"            \
4221:../src/wolfcrypt/src/sp_int.c ****         "algr	%[l], %%r1	\n\t"                    \
4222:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[h], %%r0	\n\t"                    \
4223:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
4224:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
4225:../src/wolfcrypt/src/sp_int.c ****         : "r0", "r1", "cc"                               \
4226:../src/wolfcrypt/src/sp_int.c ****     )
4227:../src/wolfcrypt/src/sp_int.c **** /* Add va into: vh | vl */
4228:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADDC(vl, vh, va)                          \
4229:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4230:../src/wolfcrypt/src/sp_int.c ****         "lghi	%%r10, 0	\n\t"                    \
4231:../src/wolfcrypt/src/sp_int.c ****         "algr	%[l], %[a]	\n\t"                    \
4232:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[h], %%r10	\n\t"                    \
4233:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
4234:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
4235:../src/wolfcrypt/src/sp_int.c ****         : "r10", "cc"                                    \
4236:../src/wolfcrypt/src/sp_int.c ****     )
4237:../src/wolfcrypt/src/sp_int.c **** /* Sub va from: vh | vl */
4238:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_SUBC(vl, vh, va)                          \
4239:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4240:../src/wolfcrypt/src/sp_int.c ****         "lghi	%%r10, 0	\n\t"                    \
4241:../src/wolfcrypt/src/sp_int.c ****         "slgr	%[l], %[a]	\n\t"                    \
4242:../src/wolfcrypt/src/sp_int.c ****         "slbgr	%[h], %%r10	\n\t"                    \
4243:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh)                   \
4244:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va)                                   \
4245:../src/wolfcrypt/src/sp_int.c ****         : "r10", "cc"                                    \
4246:../src/wolfcrypt/src/sp_int.c ****     )
4247:../src/wolfcrypt/src/sp_int.c **** /* Add two times vc | vb | va into vo | vh | vl */
4248:../src/wolfcrypt/src/sp_int.c **** #define SP_ASM_ADD_DBL_3(vl, vh, vo, va, vb, vc)         \
4249:../src/wolfcrypt/src/sp_int.c ****     __asm__ __volatile__ (                               \
4250:../src/wolfcrypt/src/sp_int.c ****         "algr	%[l], %[a]	\n\t"                    \
4251:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[h], %[b]	\n\t"                    \
4252:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[o], %[c]	\n\t"                    \
4253:../src/wolfcrypt/src/sp_int.c ****         "algr	%[l], %[a]	\n\t"                    \
4254:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[h], %[b]	\n\t"                    \
4255:../src/wolfcrypt/src/sp_int.c ****         "alcgr	%[o], %[c]	\n\t"                    \
4256:../src/wolfcrypt/src/sp_int.c ****         : [l] "+r" (vl), [h] "+r" (vh), [o] "+r" (vo)    \
4257:../src/wolfcrypt/src/sp_int.c ****         : [a] "r" (va), [b] "r" (vb), [c] "r" (vc)       \
4258:../src/wolfcrypt/src/sp_int.c ****         : "cc"                                           \
4259:../src/wolfcrypt/src/sp_int.c ****     )
4260:../src/wolfcrypt/src/sp_int.c **** 
4261:../src/wolfcrypt/src/sp_int.c **** #define SP_INT_ASM_AVAILABLE
4262:../src/wolfcrypt/src/sp_int.c **** 
4263:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_S390X && SP_WORD_SIZE == 64 */
4264:../src/wolfcrypt/src/sp_int.c **** 
4265:../src/wolfcrypt/src/sp_int.c **** #ifdef SP_INT_ASM_AVAILABLE
4266:../src/wolfcrypt/src/sp_int.c ****     #ifndef SP_INT_NO_ASM
4267:../src/wolfcrypt/src/sp_int.c ****         #define SQR_MUL_ASM
4268:../src/wolfcrypt/src/sp_int.c ****     #endif
4269:../src/wolfcrypt/src/sp_int.c ****     #ifndef SP_ASM_ADDC_REG
4270:../src/wolfcrypt/src/sp_int.c ****         #define SP_ASM_ADDC_REG  SP_ASM_ADDC
4271:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_ASM_ADDC_REG */
4272:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
4273:../src/wolfcrypt/src/sp_int.c **** 
4274:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_NO_ASM */
4275:../src/wolfcrypt/src/sp_int.c **** 
4276:../src/wolfcrypt/src/sp_int.c **** 
4277:../src/wolfcrypt/src/sp_int.c **** #if (!defined(NO_RSA) && !defined(WOLFSSL_RSA_PUBLIC_ONLY)) || \
4278:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_DSA) || !defined(NO_DH) || \
4279:../src/wolfcrypt/src/sp_int.c ****     (defined(HAVE_ECC) && defined(HAVE_COMP_KEY)) || defined(OPENSSL_EXTRA) || \
4280:../src/wolfcrypt/src/sp_int.c ****     (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_PUBLIC_ONLY))
4281:../src/wolfcrypt/src/sp_int.c **** #ifndef WC_NO_CACHE_RESISTANT
4282:../src/wolfcrypt/src/sp_int.c ****     /* Mask of address for constant time operations. */
4283:../src/wolfcrypt/src/sp_int.c ****     const size_t sp_off_on_addr[2] =
4284:../src/wolfcrypt/src/sp_int.c ****     {
4285:../src/wolfcrypt/src/sp_int.c ****         (size_t) 0,
4286:../src/wolfcrypt/src/sp_int.c ****         (size_t)-1
4287:../src/wolfcrypt/src/sp_int.c ****     };
4288:../src/wolfcrypt/src/sp_int.c **** #endif
4289:../src/wolfcrypt/src/sp_int.c **** #endif
4290:../src/wolfcrypt/src/sp_int.c **** 
4291:../src/wolfcrypt/src/sp_int.c **** 
4292:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_HAVE_SP_DH) || defined(WOLFSSL_HAVE_SP_RSA)
4293:../src/wolfcrypt/src/sp_int.c **** 
4294:../src/wolfcrypt/src/sp_int.c **** #ifdef __cplusplus
4295:../src/wolfcrypt/src/sp_int.c **** extern "C" {
4296:../src/wolfcrypt/src/sp_int.c **** #endif
4297:../src/wolfcrypt/src/sp_int.c **** 
4298:../src/wolfcrypt/src/sp_int.c **** /* Modular exponentiation implementations using Single Precision. */
4299:../src/wolfcrypt/src/sp_int.c **** WOLFSSL_LOCAL int sp_ModExp_1024(sp_int* base, sp_int* exp, sp_int* mod,
4300:../src/wolfcrypt/src/sp_int.c ****     sp_int* res);
4301:../src/wolfcrypt/src/sp_int.c **** WOLFSSL_LOCAL int sp_ModExp_1536(sp_int* base, sp_int* exp, sp_int* mod,
4302:../src/wolfcrypt/src/sp_int.c ****     sp_int* res);
4303:../src/wolfcrypt/src/sp_int.c **** WOLFSSL_LOCAL int sp_ModExp_2048(sp_int* base, sp_int* exp, sp_int* mod,
4304:../src/wolfcrypt/src/sp_int.c ****     sp_int* res);
4305:../src/wolfcrypt/src/sp_int.c **** WOLFSSL_LOCAL int sp_ModExp_3072(sp_int* base, sp_int* exp, sp_int* mod,
4306:../src/wolfcrypt/src/sp_int.c ****     sp_int* res);
4307:../src/wolfcrypt/src/sp_int.c **** WOLFSSL_LOCAL int sp_ModExp_4096(sp_int* base, sp_int* exp, sp_int* mod,
4308:../src/wolfcrypt/src/sp_int.c ****     sp_int* res);
4309:../src/wolfcrypt/src/sp_int.c **** 
4310:../src/wolfcrypt/src/sp_int.c **** #ifdef __cplusplus
4311:../src/wolfcrypt/src/sp_int.c **** } /* extern "C" */
4312:../src/wolfcrypt/src/sp_int.c **** #endif
4313:../src/wolfcrypt/src/sp_int.c **** 
4314:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_HAVE_SP_DH || WOLFSSL_HAVE_SP_RSA */
4315:../src/wolfcrypt/src/sp_int.c **** 
4316:../src/wolfcrypt/src/sp_int.c **** 
4317:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || defined(WOLFSSL_HAVE_SP_DH)
4318:../src/wolfcrypt/src/sp_int.c **** static int _sp_mont_red(sp_int* a, sp_int* m, sp_int_digit mp);
4319:../src/wolfcrypt/src/sp_int.c **** #endif
4320:../src/wolfcrypt/src/sp_int.c **** 
4321:../src/wolfcrypt/src/sp_int.c **** /* Set the multi-precision number to zero.
4322:../src/wolfcrypt/src/sp_int.c ****  *
4323:../src/wolfcrypt/src/sp_int.c ****  * Assumes a is not NULL.
4324:../src/wolfcrypt/src/sp_int.c ****  *
4325:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  a  SP integer to set to zero.
4326:../src/wolfcrypt/src/sp_int.c ****  */
4327:../src/wolfcrypt/src/sp_int.c **** static void _sp_zero(sp_int* a)
4328:../src/wolfcrypt/src/sp_int.c **** {
 146                             		.loc 2 4328 1
 147 0000 7E AA                   		push.l	r10
 148                             	.LCFI6:
 149 0002 71 0A FC                		add	#-4, r0, r10
 150                             	.LCFI7:
 151 0005 EF A0                   		mov.L	r10, r0
 152 0007 E3 A1                   		mov.L	r1, [r10]
4329:../src/wolfcrypt/src/sp_int.c ****     a->used = 0;
 153                             		.loc 2 4329 13
 154 0009 EC A5                   		mov.L	[r10], r5
 155 000b F8 56 00                		mov.L	#0, [r5]
4330:../src/wolfcrypt/src/sp_int.c ****     a->dp[0] = 0;
 156                             		.loc 2 4330 14
 157 000e EC A5                   		mov.L	[r10], r5
 158 0010 3E 52 00                		mov.L	#0, 8[r5]
4331:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
4332:../src/wolfcrypt/src/sp_int.c ****     a->sign = MP_ZPOS;
4333:../src/wolfcrypt/src/sp_int.c **** #endif
4334:../src/wolfcrypt/src/sp_int.c **** }
 159                             		.loc 2 4334 1
 160 0013 03                      		nop
 161 0014 3F AA 02                		rtsd	#8, r10-r10
 162                             	.LFE43:
 164                             		.section	.text.sp_init,"ax",@progbits
 165                             		.global	_sp_init
 167                             	_sp_init:
 168                             	.LFB44:
4335:../src/wolfcrypt/src/sp_int.c **** 
4336:../src/wolfcrypt/src/sp_int.c **** /* Initialize the multi-precision number to be zero.
4337:../src/wolfcrypt/src/sp_int.c ****  *
4338:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  a  SP integer.
4339:../src/wolfcrypt/src/sp_int.c ****  *
4340:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
4341:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a is NULL.
4342:../src/wolfcrypt/src/sp_int.c ****  */
4343:../src/wolfcrypt/src/sp_int.c **** int sp_init(sp_int* a)
4344:../src/wolfcrypt/src/sp_int.c **** {
 169                             		.loc 2 4344 1
 170 0000 7E AA                   		push.l	r10
 171                             	.LCFI8:
 172 0002 71 0A F8                		add	#-8, r0, r10
 173                             	.LCFI9:
 174 0005 EF A0                   		mov.L	r10, r0
 175 0007 E7 A1 01                		mov.L	r1, 4[r10]
4345:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 176                             		.loc 2 4345 9
 177 000a F8 A6 00                		mov.L	#0, [r10]
4346:../src/wolfcrypt/src/sp_int.c **** 
4347:../src/wolfcrypt/src/sp_int.c ****     if (a == NULL) {
 178                             		.loc 2 4347 8
 179 000d ED A5 01                		mov.L	4[r10], r5
 180 0010 61 05                   		cmp	#0, r5
 181 0012 1C                      		bne	.L14
4348:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 182                             		.loc 2 4348 13
 183 0013 F8 A6 FD                		mov.L	#-3, [r10]
 184                             	.L14:
4349:../src/wolfcrypt/src/sp_int.c ****     }
4350:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 185                             		.loc 2 4350 8
 186 0016 EC A5                   		mov.L	[r10], r5
 187 0018 61 05                   		cmp	#0, r5
 188 001a 21 0F                   		bne	.L15
4351:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4352:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&a->raw);
4353:../src/wolfcrypt/src/sp_int.c ****     #endif
4354:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(a);
 189                             		.loc 2 4354 9
 190 001c ED A1 01                		mov.L	4[r10], r1
 191 001f 05 00 00 00             		bsr	__sp_zero
4355:../src/wolfcrypt/src/sp_int.c ****         a->size = SP_INT_DIGITS;
 192                             		.loc 2 4355 17
 193 0023 ED A5 01                		mov.L	4[r10], r5
 194 0026 3E 51 C2                		mov.L	#0xc2, 4[r5]
 195                             	.L15:
4356:../src/wolfcrypt/src/sp_int.c ****     }
4357:../src/wolfcrypt/src/sp_int.c **** 
4358:../src/wolfcrypt/src/sp_int.c ****     return err;
 196                             		.loc 2 4358 12
 197 0029 EC A5                   		mov.L	[r10], r5
4359:../src/wolfcrypt/src/sp_int.c **** }
 198                             		.loc 2 4359 1
 199 002b EF 51                   		mov.L	r5, r1
 200 002d 3F AA 03                		rtsd	#12, r10-r10
 201                             	.LFE44:
 203                             		.section	.text.sp_init_size,"ax",@progbits
 204                             		.global	_sp_init_size
 206                             	_sp_init_size:
 207                             	.LFB45:
4360:../src/wolfcrypt/src/sp_int.c **** 
4361:../src/wolfcrypt/src/sp_int.c **** /* Initialize the multi-precision number to be zero and have a maximum size.
4362:../src/wolfcrypt/src/sp_int.c ****  *
4363:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  a     SP integer.
4364:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   size  Number of words to say are available.
4365:../src/wolfcrypt/src/sp_int.c ****  *
4366:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
4367:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a is NULL.
4368:../src/wolfcrypt/src/sp_int.c ****  */
4369:../src/wolfcrypt/src/sp_int.c **** int sp_init_size(sp_int* a, int size)
4370:../src/wolfcrypt/src/sp_int.c **** {
 208                             		.loc 2 4370 1
 209 0000 7E AA                   		push.l	r10
 210                             	.LCFI10:
 211 0002 71 0A F4                		add	#-12, r0, r10
 212                             	.LCFI11:
 213 0005 EF A0                   		mov.L	r10, r0
 214 0007 E7 A1 01                		mov.L	r1, 4[r10]
 215 000a E7 A2 02                		mov.L	r2, 8[r10]
4371:../src/wolfcrypt/src/sp_int.c ****     int err = sp_init(a);
 216                             		.loc 2 4371 15
 217 000d ED A1 01                		mov.L	4[r10], r1
 218 0010 05 00 00 00             		bsr	_sp_init
 219 0014 E3 A1                   		mov.L	r1, [r10]
4372:../src/wolfcrypt/src/sp_int.c **** 
4373:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 220                             		.loc 2 4373 8
 221 0016 EC A5                   		mov.L	[r10], r5
 222 0018 61 05                   		cmp	#0, r5
 223 001a 19                      		bne	.L18
4374:../src/wolfcrypt/src/sp_int.c ****         a->size = size;
 224                             		.loc 2 4374 17
 225 001b ED A5 01                		mov.L	4[r10], r5
 226 001e ED A4 02                		mov.L	8[r10], r4
 227 0021 A0 5C                   		mov.L	r4, 4[r5]
 228                             	.L18:
4375:../src/wolfcrypt/src/sp_int.c ****     }
4376:../src/wolfcrypt/src/sp_int.c **** 
4377:../src/wolfcrypt/src/sp_int.c ****     return err;
 229                             		.loc 2 4377 12
 230 0023 EC A5                   		mov.L	[r10], r5
4378:../src/wolfcrypt/src/sp_int.c **** }
 231                             		.loc 2 4378 1
 232 0025 EF 51                   		mov.L	r5, r1
 233 0027 3F AA 04                		rtsd	#16, r10-r10
 234                             	.LFE45:
 236                             		.section	.text.sp_init_multi,"ax",@progbits
 237                             		.global	_sp_init_multi
 239                             	_sp_init_multi:
 240                             	.LFB46:
4379:../src/wolfcrypt/src/sp_int.c **** 
4380:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_RSA_PUBLIC_ONLY) || !defined(NO_DH) || defined(HAVE_ECC)
4381:../src/wolfcrypt/src/sp_int.c **** /* Initialize up to six multi-precision numbers to be zero.
4382:../src/wolfcrypt/src/sp_int.c ****  *
4383:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  n1  SP integer.
4384:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  n2  SP integer.
4385:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  n3  SP integer.
4386:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  n4  SP integer.
4387:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  n5  SP integer.
4388:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  n6  SP integer.
4389:../src/wolfcrypt/src/sp_int.c ****  *
4390:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
4391:../src/wolfcrypt/src/sp_int.c ****  */
4392:../src/wolfcrypt/src/sp_int.c **** int sp_init_multi(sp_int* n1, sp_int* n2, sp_int* n3, sp_int* n4, sp_int* n5,
4393:../src/wolfcrypt/src/sp_int.c ****                   sp_int* n6)
4394:../src/wolfcrypt/src/sp_int.c **** {
 241                             		.loc 2 4394 1
 242 0000 7E AA                   		push.l	r10
 243                             	.LCFI12:
 244 0002 7E A6                   		push.l	r6
 245                             	.LCFI13:
 246 0004 71 0A E8                		add	#-24, r0, r10
 247                             	.LCFI14:
 248 0007 EF A0                   		mov.L	r10, r0
 249 0009 75 46 24                		mov.L	#36, r6
 250 000c 4B A6                   		add	r10, r6
 251 000e E3 A1                   		mov.L	r1, [r10]
 252 0010 E7 A2 01                		mov.L	r2, 4[r10]
 253 0013 E7 A3 02                		mov.L	r3, 8[r10]
 254 0016 E7 A4 03                		mov.L	r4, 12[r10]
4395:../src/wolfcrypt/src/sp_int.c ****     if (n1 != NULL) {
 255                             		.loc 2 4395 8
 256 0019 EC A5                   		mov.L	[r10], r5
 257 001b 61 05                   		cmp	#0, r5
 258 001d 20 12                   		beq	.L21
4396:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4397:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&n1->raw);
4398:../src/wolfcrypt/src/sp_int.c ****     #endif
4399:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(n1);
 259                             		.loc 2 4399 9
 260 001f EC A1                   		mov.L	[r10], r1
 261 0021 05 00 00 00             		bsr	__sp_zero
4400:../src/wolfcrypt/src/sp_int.c ****         n1->dp[0] = 0;
 262                             		.loc 2 4400 19
 263 0025 EC A5                   		mov.L	[r10], r5
 264 0027 3E 52 00                		mov.L	#0, 8[r5]
4401:../src/wolfcrypt/src/sp_int.c ****         n1->size = SP_INT_DIGITS;
 265                             		.loc 2 4401 18
 266 002a EC A5                   		mov.L	[r10], r5
 267 002c 3E 51 C2                		mov.L	#0xc2, 4[r5]
 268                             	.L21:
4402:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4403:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&n1->raw);
4404:../src/wolfcrypt/src/sp_int.c ****     #endif
4405:../src/wolfcrypt/src/sp_int.c ****     }
4406:../src/wolfcrypt/src/sp_int.c ****     if (n2 != NULL) {
 269                             		.loc 2 4406 8
 270 002f ED A5 01                		mov.L	4[r10], r5
 271 0032 61 05                   		cmp	#0, r5
 272 0034 20 15                   		beq	.L22
4407:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4408:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&n2->raw);
4409:../src/wolfcrypt/src/sp_int.c ****     #endif
4410:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(n2);
 273                             		.loc 2 4410 9
 274 0036 ED A1 01                		mov.L	4[r10], r1
 275 0039 05 00 00 00             		bsr	__sp_zero
4411:../src/wolfcrypt/src/sp_int.c ****         n2->dp[0] = 0;
 276                             		.loc 2 4411 19
 277 003d ED A5 01                		mov.L	4[r10], r5
 278 0040 3E 52 00                		mov.L	#0, 8[r5]
4412:../src/wolfcrypt/src/sp_int.c ****         n2->size = SP_INT_DIGITS;
 279                             		.loc 2 4412 18
 280 0043 ED A5 01                		mov.L	4[r10], r5
 281 0046 3E 51 C2                		mov.L	#0xc2, 4[r5]
 282                             	.L22:
4413:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4414:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&n2->raw);
4415:../src/wolfcrypt/src/sp_int.c ****     #endif
4416:../src/wolfcrypt/src/sp_int.c ****     }
4417:../src/wolfcrypt/src/sp_int.c ****     if (n3 != NULL) {
 283                             		.loc 2 4417 8
 284 0049 ED A5 02                		mov.L	8[r10], r5
 285 004c 61 05                   		cmp	#0, r5
 286 004e 20 15                   		beq	.L23
4418:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4419:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&n3->raw);
4420:../src/wolfcrypt/src/sp_int.c ****     #endif
4421:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(n3);
 287                             		.loc 2 4421 9
 288 0050 ED A1 02                		mov.L	8[r10], r1
 289 0053 05 00 00 00             		bsr	__sp_zero
4422:../src/wolfcrypt/src/sp_int.c ****         n3->dp[0] = 0;
 290                             		.loc 2 4422 19
 291 0057 ED A5 02                		mov.L	8[r10], r5
 292 005a 3E 52 00                		mov.L	#0, 8[r5]
4423:../src/wolfcrypt/src/sp_int.c ****         n3->size = SP_INT_DIGITS;
 293                             		.loc 2 4423 18
 294 005d ED A5 02                		mov.L	8[r10], r5
 295 0060 3E 51 C2                		mov.L	#0xc2, 4[r5]
 296                             	.L23:
4424:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4425:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&n3->raw);
4426:../src/wolfcrypt/src/sp_int.c ****     #endif
4427:../src/wolfcrypt/src/sp_int.c ****     }
4428:../src/wolfcrypt/src/sp_int.c ****     if (n4 != NULL) {
 297                             		.loc 2 4428 8
 298 0063 ED A5 03                		mov.L	12[r10], r5
 299 0066 61 05                   		cmp	#0, r5
 300 0068 20 15                   		beq	.L24
4429:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4430:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&n4->raw);
4431:../src/wolfcrypt/src/sp_int.c ****     #endif
4432:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(n4);
 301                             		.loc 2 4432 9
 302 006a ED A1 03                		mov.L	12[r10], r1
 303 006d 05 00 00 00             		bsr	__sp_zero
4433:../src/wolfcrypt/src/sp_int.c ****         n4->dp[0] = 0;
 304                             		.loc 2 4433 19
 305 0071 ED A5 03                		mov.L	12[r10], r5
 306 0074 3E 52 00                		mov.L	#0, 8[r5]
4434:../src/wolfcrypt/src/sp_int.c ****         n4->size = SP_INT_DIGITS;
 307                             		.loc 2 4434 18
 308 0077 ED A5 03                		mov.L	12[r10], r5
 309 007a 3E 51 C2                		mov.L	#0xc2, 4[r5]
 310                             	.L24:
4435:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4436:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&n4->raw);
4437:../src/wolfcrypt/src/sp_int.c ****     #endif
4438:../src/wolfcrypt/src/sp_int.c ****     }
4439:../src/wolfcrypt/src/sp_int.c ****     if (n5 != NULL) {
 311                             		.loc 2 4439 8
 312 007d EC 65                   		mov.L	[r6], r5
 313 007f 61 05                   		cmp	#0, r5
 314 0081 20 12                   		beq	.L25
4440:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4441:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&n5->raw);
4442:../src/wolfcrypt/src/sp_int.c ****     #endif
4443:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(n5);
 315                             		.loc 2 4443 9
 316 0083 EC 61                   		mov.L	[r6], r1
 317 0085 05 00 00 00             		bsr	__sp_zero
4444:../src/wolfcrypt/src/sp_int.c ****         n5->dp[0] = 0;
 318                             		.loc 2 4444 19
 319 0089 EC 65                   		mov.L	[r6], r5
 320 008b 3E 52 00                		mov.L	#0, 8[r5]
4445:../src/wolfcrypt/src/sp_int.c ****         n5->size = SP_INT_DIGITS;
 321                             		.loc 2 4445 18
 322 008e EC 65                   		mov.L	[r6], r5
 323 0090 3E 51 C2                		mov.L	#0xc2, 4[r5]
 324                             	.L25:
4446:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4447:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&n5->raw);
4448:../src/wolfcrypt/src/sp_int.c ****     #endif
4449:../src/wolfcrypt/src/sp_int.c ****     }
4450:../src/wolfcrypt/src/sp_int.c ****     if (n6 != NULL) {
 325                             		.loc 2 4450 8
 326 0093 A8 6D                   		mov.L	4[r6], r5
 327 0095 61 05                   		cmp	#0, r5
 328 0097 20 12                   		beq	.L26
4451:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4452:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&n6->raw);
4453:../src/wolfcrypt/src/sp_int.c ****     #endif
4454:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(n6);
 329                             		.loc 2 4454 9
 330 0099 A8 69                   		mov.L	4[r6], r1
 331 009b 05 00 00 00             		bsr	__sp_zero
4455:../src/wolfcrypt/src/sp_int.c ****         n6->dp[0] = 0;
 332                             		.loc 2 4455 19
 333 009f A8 6D                   		mov.L	4[r6], r5
 334 00a1 3E 52 00                		mov.L	#0, 8[r5]
4456:../src/wolfcrypt/src/sp_int.c ****         n6->size = SP_INT_DIGITS;
 335                             		.loc 2 4456 18
 336 00a4 A8 6D                   		mov.L	4[r6], r5
 337 00a6 3E 51 C2                		mov.L	#0xc2, 4[r5]
 338                             	.L26:
4457:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4458:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_init(&n6->raw);
4459:../src/wolfcrypt/src/sp_int.c ****     #endif
4460:../src/wolfcrypt/src/sp_int.c ****     }
4461:../src/wolfcrypt/src/sp_int.c **** 
4462:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
 339                             		.loc 2 4462 12
 340 00a9 66 05                   		mov.L	#0, r5
4463:../src/wolfcrypt/src/sp_int.c **** }
 341                             		.loc 2 4463 1
 342 00ab EF 51                   		mov.L	r5, r1
 343 00ad 71 00 18                		add	#24, r0
 344 00b0 7E B6                   		pop	r6
 345 00b2 7E BA                   		pop	r10
 346 00b4 02                      		rts
 347                             	.LFE46:
 349                             		.section	.text.sp_free,"ax",@progbits
 350                             		.global	_sp_free
 352                             	_sp_free:
 353                             	.LFB47:
4464:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_RSA_PUBLIC_ONLY || !NO_DH || HAVE_ECC */
4465:../src/wolfcrypt/src/sp_int.c **** 
4466:../src/wolfcrypt/src/sp_int.c **** /* Free the memory allocated in the multi-precision number.
4467:../src/wolfcrypt/src/sp_int.c ****  *
4468:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer.
4469:../src/wolfcrypt/src/sp_int.c ****  */
4470:../src/wolfcrypt/src/sp_int.c **** void sp_free(sp_int* a)
4471:../src/wolfcrypt/src/sp_int.c **** {
 354                             		.loc 2 4471 1
 355 0000 7E AA                   		push.l	r10
 356                             	.LCFI15:
 357 0002 71 0A FC                		add	#-4, r0, r10
 358                             	.LCFI16:
 359 0005 EF A0                   		mov.L	r10, r0
 360 0007 E3 A1                   		mov.L	r1, [r10]
4472:../src/wolfcrypt/src/sp_int.c ****     if (a != NULL) {
4473:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4474:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_free(&a->raw);
4475:../src/wolfcrypt/src/sp_int.c ****     #endif
4476:../src/wolfcrypt/src/sp_int.c ****     }
4477:../src/wolfcrypt/src/sp_int.c **** }
 361                             		.loc 2 4477 1
 362 0009 03                      		nop
 363 000a 3F AA 02                		rtsd	#8, r10-r10
 364                             	.LFE47:
 366                             		.section	.text.sp_grow,"ax",@progbits
 367                             		.global	_sp_grow
 369                             	_sp_grow:
 370                             	.LFB48:
4478:../src/wolfcrypt/src/sp_int.c **** 
4479:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_RSA_VERIFY_ONLY) || !defined(NO_DH) || defined(HAVE_ECC)
4480:../src/wolfcrypt/src/sp_int.c **** /* Grow multi-precision number to be able to hold l digits.
4481:../src/wolfcrypt/src/sp_int.c ****  * This function does nothing as the number of digits is fixed.
4482:../src/wolfcrypt/src/sp_int.c ****  *
4483:../src/wolfcrypt/src/sp_int.c ****  * @param  [in,out]  a  SP integer.
4484:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]      l  Number of digits to grow to.
4485:../src/wolfcrypt/src/sp_int.c ****  *
4486:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success
4487:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM if the number of digits requested is more than available.
4488:../src/wolfcrypt/src/sp_int.c ****  */
4489:../src/wolfcrypt/src/sp_int.c **** int sp_grow(sp_int* a, int l)
4490:../src/wolfcrypt/src/sp_int.c **** {
 371                             		.loc 2 4490 1
 372 0000 6E 7A                   		pushm	r7-r10
 373                             	.LCFI17:
 374 0002 71 0A F0                		add	#-16, r0, r10
 375                             	.LCFI18:
 376 0005 EF A0                   		mov.L	r10, r0
 377 0007 E7 A1 02                		mov.L	r1, 8[r10]
 378 000a E7 A2 03                		mov.L	r2, 12[r10]
4491:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 379                             		.loc 2 4491 9
 380 000d F8 A6 00                		mov.L	#0, [r10]
4492:../src/wolfcrypt/src/sp_int.c **** 
4493:../src/wolfcrypt/src/sp_int.c ****     if (a == NULL) {
 381                             		.loc 2 4493 8
 382 0010 ED A5 02                		mov.L	8[r10], r5
 383 0013 61 05                   		cmp	#0, r5
 384 0015 1C                      		bne	.L30
4494:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 385                             		.loc 2 4494 13
 386 0016 F8 A6 FD                		mov.L	#-3, [r10]
 387                             	.L30:
4495:../src/wolfcrypt/src/sp_int.c ****     }
4496:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (l > a->size)) {
 388                             		.loc 2 4496 8
 389 0019 EC A5                   		mov.L	[r10], r5
 390 001b 61 05                   		cmp	#0, r5
 391 001d 21 11                   		bne	.L31
 392                             		.loc 2 4496 35 discriminator 1
 393 001f ED A5 02                		mov.L	8[r10], r5
 394 0022 A8 5D                   		mov.L	4[r5], r5
 395                             		.loc 2 4496 26 discriminator 1
 396 0024 ED A4 03                		mov.L	12[r10], r4
 397 0027 47 54                   		cmp	r5, r4
 398 0029 2B 05                   		ble	.L31
4497:../src/wolfcrypt/src/sp_int.c ****         err = MP_MEM;
 399                             		.loc 2 4497 13
 400 002b F8 A6 FE                		mov.L	#-2, [r10]
 401                             	.L31:
4498:../src/wolfcrypt/src/sp_int.c ****     }
4499:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 402                             		.loc 2 4499 8
 403 002e EC A5                   		mov.L	[r10], r5
 404 0030 61 05                   		cmp	#0, r5
 405 0032 21 2B                   		bne	.L32
 406                             	.LBB2:
4500:../src/wolfcrypt/src/sp_int.c ****         int i;
4501:../src/wolfcrypt/src/sp_int.c **** 
4502:../src/wolfcrypt/src/sp_int.c ****         for (i = a->used; i < l; i++) {
 407                             		.loc 2 4502 16
 408 0034 ED A5 02                		mov.L	8[r10], r5
 409 0037 EC 55                   		mov.L	[r5], r5
 410 0039 E7 A5 01                		mov.L	r5, 4[r10]
 411                             		.loc 2 4502 9
 412 003c 2E 17                   		bra	.L33
 413                             	.L34:
4503:../src/wolfcrypt/src/sp_int.c ****             a->dp[i] = 0;
 414                             		.loc 2 4503 22 discriminator 3
 415 003e ED A4 02                		mov.L	8[r10], r4
 416 0041 ED A5 01                		mov.L	4[r10], r5
 417 0044 62 25                   		add	#2, r5
 418 0046 66 07                   		mov.L	#0, r7
 419 0048 FE 25 47                		mov.L	r7, [r5,r4]
4502:../src/wolfcrypt/src/sp_int.c ****             a->dp[i] = 0;
 420                             		.loc 2 4502 35 discriminator 3
 421 004b ED A5 01                		mov.L	4[r10], r5
 422 004e 62 15                   		add	#1, r5
 423 0050 E7 A5 01                		mov.L	r5, 4[r10]
 424                             	.L33:
4502:../src/wolfcrypt/src/sp_int.c ****             a->dp[i] = 0;
 425                             		.loc 2 4502 9 discriminator 1
 426 0053 ED A4 01                		mov.L	4[r10], r4
 427 0056 ED A5 03                		mov.L	12[r10], r5
 428 0059 47 54                   		cmp	r5, r4
 429 005b 29 E3                   		blt	.L34
 430                             	.L32:
 431                             	.LBE2:
4504:../src/wolfcrypt/src/sp_int.c ****         }
4505:../src/wolfcrypt/src/sp_int.c ****     }
4506:../src/wolfcrypt/src/sp_int.c **** 
4507:../src/wolfcrypt/src/sp_int.c ****     return err;
 432                             		.loc 2 4507 12
 433 005d EC A5                   		mov.L	[r10], r5
4508:../src/wolfcrypt/src/sp_int.c **** }
 434                             		.loc 2 4508 1
 435 005f EF 51                   		mov.L	r5, r1
 436 0061 3F 7A 08                		rtsd	#32, r7-r10
 437                             	.LFE48:
 439                             		.section	.text.sp_zero,"ax",@progbits
 440                             		.global	_sp_zero
 442                             	_sp_zero:
 443                             	.LFB49:
4509:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_RSA_VERIFY_ONLY || !NO_DH || HAVE_ECC */
4510:../src/wolfcrypt/src/sp_int.c **** 
4511:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_RSA_VERIFY_ONLY) || defined(HAVE_ECC)
4512:../src/wolfcrypt/src/sp_int.c **** /* Set the multi-precision number to zero.
4513:../src/wolfcrypt/src/sp_int.c ****  *
4514:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  a  SP integer to set to zero.
4515:../src/wolfcrypt/src/sp_int.c ****  */
4516:../src/wolfcrypt/src/sp_int.c **** void sp_zero(sp_int* a)
4517:../src/wolfcrypt/src/sp_int.c **** {
 444                             		.loc 2 4517 1
 445 0000 7E AA                   		push.l	r10
 446                             	.LCFI19:
 447 0002 71 0A FC                		add	#-4, r0, r10
 448                             	.LCFI20:
 449 0005 EF A0                   		mov.L	r10, r0
 450 0007 E3 A1                   		mov.L	r1, [r10]
4518:../src/wolfcrypt/src/sp_int.c ****     if (a != NULL) {
 451                             		.loc 2 4518 8
 452 0009 EC A5                   		mov.L	[r10], r5
 453 000b 61 05                   		cmp	#0, r5
 454 000d 17                      		beq	.L38
4519:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(a);
 455                             		.loc 2 4519 9
 456 000e EC A1                   		mov.L	[r10], r1
 457 0010 05 00 00 00             		bsr	__sp_zero
 458                             	.L38:
4520:../src/wolfcrypt/src/sp_int.c ****     }
4521:../src/wolfcrypt/src/sp_int.c **** }
 459                             		.loc 2 4521 1
 460 0014 03                      		nop
 461 0015 3F AA 02                		rtsd	#8, r10-r10
 462                             	.LFE49:
 464                             		.section	.text.sp_clear,"ax",@progbits
 465                             		.global	_sp_clear
 467                             	_sp_clear:
 468                             	.LFB50:
4522:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_RSA_VERIFY_ONLY */
4523:../src/wolfcrypt/src/sp_int.c **** 
4524:../src/wolfcrypt/src/sp_int.c **** /* Clear the data from the multi-precision number and set to zero.
4525:../src/wolfcrypt/src/sp_int.c ****  *
4526:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  a  SP integer.
4527:../src/wolfcrypt/src/sp_int.c ****  */
4528:../src/wolfcrypt/src/sp_int.c **** void sp_clear(sp_int* a)
4529:../src/wolfcrypt/src/sp_int.c **** {
 469                             		.loc 2 4529 1
 470 0000 6E 7A                   		pushm	r7-r10
 471                             	.LCFI21:
 472 0002 71 0A F8                		add	#-8, r0, r10
 473                             	.LCFI22:
 474 0005 EF A0                   		mov.L	r10, r0
 475 0007 E7 A1 01                		mov.L	r1, 4[r10]
4530:../src/wolfcrypt/src/sp_int.c ****     if (a != NULL) {
 476                             		.loc 2 4530 8
 477 000a ED A5 01                		mov.L	4[r10], r5
 478 000d 61 05                   		cmp	#0, r5
 479 000f 20 32                   		beq	.L43
 480                             	.LBB3:
4531:../src/wolfcrypt/src/sp_int.c ****         int i;
4532:../src/wolfcrypt/src/sp_int.c **** 
4533:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < a->used; i++) {
 481                             		.loc 2 4533 16
 482 0011 F8 A6 00                		mov.L	#0, [r10]
 483                             		.loc 2 4533 9
 484 0014 2E 14                   		bra	.L41
 485                             	.L42:
4534:../src/wolfcrypt/src/sp_int.c ****             a->dp[i] = 0;
 486                             		.loc 2 4534 22 discriminator 3
 487 0016 ED A4 01                		mov.L	4[r10], r4
 488 0019 EC A5                   		mov.L	[r10], r5
 489 001b 62 25                   		add	#2, r5
 490 001d 66 07                   		mov.L	#0, r7
 491 001f FE 25 47                		mov.L	r7, [r5,r4]
4533:../src/wolfcrypt/src/sp_int.c ****             a->dp[i] = 0;
 492                             		.loc 2 4533 35 discriminator 3
 493 0022 EC A5                   		mov.L	[r10], r5
 494 0024 62 15                   		add	#1, r5
 495 0026 E3 A5                   		mov.L	r5, [r10]
 496                             	.L41:
4533:../src/wolfcrypt/src/sp_int.c ****             a->dp[i] = 0;
 497                             		.loc 2 4533 26 discriminator 1
 498 0028 ED A5 01                		mov.L	4[r10], r5
 499 002b EC 55                   		mov.L	[r5], r5
4533:../src/wolfcrypt/src/sp_int.c ****             a->dp[i] = 0;
 500                             		.loc 2 4533 9 discriminator 1
 501 002d EC A4                   		mov.L	[r10], r4
 502 002f 47 54                   		cmp	r5, r4
 503 0031 29 E5                   		blt	.L42
4535:../src/wolfcrypt/src/sp_int.c ****         }
4536:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(a);
 504                             		.loc 2 4536 9
 505 0033 ED A1 01                		mov.L	4[r10], r1
 506 0036 05 00 00 00             		bsr	__sp_zero
4537:../src/wolfcrypt/src/sp_int.c ****         sp_free(a);
 507                             		.loc 2 4537 9
 508 003a ED A1 01                		mov.L	4[r10], r1
 509 003d 05 00 00 00             		bsr	_sp_free
 510                             	.L43:
 511                             	.LBE3:
4538:../src/wolfcrypt/src/sp_int.c ****     }
4539:../src/wolfcrypt/src/sp_int.c **** }
 512                             		.loc 2 4539 1
 513 0041 03                      		nop
 514 0042 3F 7A 06                		rtsd	#24, r7-r10
 515                             	.LFE50:
 517                             		.section	.text.sp_forcezero,"ax",@progbits
 518                             		.global	_sp_forcezero
 520                             	_sp_forcezero:
 521                             	.LFB51:
4540:../src/wolfcrypt/src/sp_int.c **** 
4541:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_RSA_PUBLIC_ONLY) || !defined(NO_DH) || defined(HAVE_ECC)
4542:../src/wolfcrypt/src/sp_int.c **** /* Ensure the data in the multi-precision number is zeroed.
4543:../src/wolfcrypt/src/sp_int.c ****  *
4544:../src/wolfcrypt/src/sp_int.c ****  * Use when security sensitive data needs to be wiped.
4545:../src/wolfcrypt/src/sp_int.c ****  *
4546:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer.
4547:../src/wolfcrypt/src/sp_int.c ****  */
4548:../src/wolfcrypt/src/sp_int.c **** void sp_forcezero(sp_int* a)
4549:../src/wolfcrypt/src/sp_int.c **** {
 522                             		.loc 2 4549 1
 523 0000 7E AA                   		push.l	r10
 524                             	.LCFI23:
 525 0002 71 0A FC                		add	#-4, r0, r10
 526                             	.LCFI24:
 527 0005 EF A0                   		mov.L	r10, r0
 528 0007 E3 A1                   		mov.L	r1, [r10]
4550:../src/wolfcrypt/src/sp_int.c ****     if (a != NULL) {
 529                             		.loc 2 4550 8
 530 0009 EC A5                   		mov.L	[r10], r5
 531 000b 61 05                   		cmp	#0, r5
 532 000d 20 21                   		beq	.L46
4551:../src/wolfcrypt/src/sp_int.c ****         /* Ensure all data zeroized - data not zeroed when used decreases. */
4552:../src/wolfcrypt/src/sp_int.c ****         ForceZero(a->dp, a->used * sizeof(sp_int_digit));
 533                             		.loc 2 4552 20
 534 000f EC A5                   		mov.L	[r10], r5
 535 0011 71 54 08                		add	#8, r5, r4
 536                             		.loc 2 4552 27
 537 0014 EC A5                   		mov.L	[r10], r5
 538 0016 EC 55                   		mov.L	[r5], r5
 539                             		.loc 2 4552 34
 540 0018 6C 25                   		shll	#2, r5
 541                             		.loc 2 4552 9
 542 001a EF 52                   		mov.L	r5, r2
 543 001c EF 41                   		mov.L	r4, r1
 544 001e 05 00 00 00             		bsr	_ForceZero
4553:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(a);
 545                             		.loc 2 4553 9
 546 0022 EC A1                   		mov.L	[r10], r1
 547 0024 05 00 00 00             		bsr	__sp_zero
4554:../src/wolfcrypt/src/sp_int.c ****     #ifdef HAVE_WOLF_BIGINT
4555:../src/wolfcrypt/src/sp_int.c ****         wc_bigint_zero(&a->raw);
4556:../src/wolfcrypt/src/sp_int.c ****     #endif
4557:../src/wolfcrypt/src/sp_int.c ****         sp_free(a);
 548                             		.loc 2 4557 9
 549 0028 EC A1                   		mov.L	[r10], r1
 550 002a 05 00 00 00             		bsr	_sp_free
 551                             	.L46:
4558:../src/wolfcrypt/src/sp_int.c ****     }
4559:../src/wolfcrypt/src/sp_int.c **** }
 552                             		.loc 2 4559 1
 553 002e 03                      		nop
 554 002f 3F AA 02                		rtsd	#8, r10-r10
 555                             	.LFE51:
 557                             		.section	.text.sp_copy,"ax",@progbits
 558                             		.global	_sp_copy
 560                             	_sp_copy:
 561                             	.LFB52:
4560:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_RSA_VERIFY_ONLY || !NO_DH || HAVE_ECC */
4561:../src/wolfcrypt/src/sp_int.c **** 
4562:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || !defined(NO_DH) || defined(HAVE_ECC) || \
4563:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_RSA) || defined(WOLFSSL_KEY_GEN) || defined(HAVE_COMP_KEY)
4564:../src/wolfcrypt/src/sp_int.c **** /* Copy value of multi-precision number a into r.
4565:../src/wolfcrypt/src/sp_int.c ****  *
4566:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer - source.
4567:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer - destination.
4568:../src/wolfcrypt/src/sp_int.c ****  *
4569:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
4570:../src/wolfcrypt/src/sp_int.c ****  */
4571:../src/wolfcrypt/src/sp_int.c **** int sp_copy(const sp_int* a, sp_int* r)
4572:../src/wolfcrypt/src/sp_int.c **** {
 562                             		.loc 2 4572 1
 563 0000 7E AA                   		push.l	r10
 564                             	.LCFI25:
 565 0002 71 0A F4                		add	#-12, r0, r10
 566                             	.LCFI26:
 567 0005 EF A0                   		mov.L	r10, r0
 568 0007 E7 A1 01                		mov.L	r1, 4[r10]
 569 000a E7 A2 02                		mov.L	r2, 8[r10]
4573:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 570                             		.loc 2 4573 9
 571 000d F8 A6 00                		mov.L	#0, [r10]
4574:../src/wolfcrypt/src/sp_int.c **** 
4575:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (r == NULL)) {
 572                             		.loc 2 4575 8
 573 0010 ED A5 01                		mov.L	4[r10], r5
 574 0013 61 05                   		cmp	#0, r5
 575 0015 17                      		beq	.L48
 576                             		.loc 2 4575 21 discriminator 1
 577 0016 ED A5 02                		mov.L	8[r10], r5
 578 0019 61 05                   		cmp	#0, r5
 579 001b 1E                      		bne	.L49
 580                             	.L48:
4576:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 581                             		.loc 2 4576 13
 582 001c F8 A6 FD                		mov.L	#-3, [r10]
 583 001f 2E 3F                   		bra	.L50
 584                             	.L49:
4577:../src/wolfcrypt/src/sp_int.c ****     }
4578:../src/wolfcrypt/src/sp_int.c ****     else if (a != r) {
 585                             		.loc 2 4578 13
 586 0021 ED A4 01                		mov.L	4[r10], r4
 587 0024 ED A5 02                		mov.L	8[r10], r5
 588 0027 47 54                   		cmp	r5, r4
 589 0029 20 35                   		beq	.L50
4579:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(r->dp, a->dp, a->used * sizeof(sp_int_digit));
 590                             		.loc 2 4579 9
 591 002b ED A5 02                		mov.L	8[r10], r5
 592 002e 71 54 08                		add	#8, r5, r4
 593 0031 ED A5 01                		mov.L	4[r10], r5
 594 0034 71 52 08                		add	#8, r5, r2
 595 0037 ED A5 01                		mov.L	4[r10], r5
 596 003a EC 55                   		mov.L	[r5], r5
 597 003c 6C 25                   		shll	#2, r5
 598 003e EF 53                   		mov.L	r5, r3
 599 0040 EF 41                   		mov.L	r4, r1
 600 0042 05 00 00 00             		bsr	_memcpy
4580:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 0)
 601                             		.loc 2 4580 14
 602 0046 ED A5 01                		mov.L	4[r10], r5
 603 0049 EC 55                   		mov.L	[r5], r5
 604                             		.loc 2 4580 12
 605 004b 61 05                   		cmp	#0, r5
 606 004d 1F                      		bne	.L51
4581:../src/wolfcrypt/src/sp_int.c ****             r->dp[0] = 0;
 607                             		.loc 2 4581 22
 608 004e ED A5 02                		mov.L	8[r10], r5
 609 0051 3E 52 00                		mov.L	#0, 8[r5]
 610                             	.L51:
4582:../src/wolfcrypt/src/sp_int.c ****         r->used = a->used;
 611                             		.loc 2 4582 20
 612 0054 ED A5 01                		mov.L	4[r10], r5
 613 0057 EC 54                   		mov.L	[r5], r4
 614                             		.loc 2 4582 17
 615 0059 ED A5 02                		mov.L	8[r10], r5
 616 005c E3 54                   		mov.L	r4, [r5]
 617                             	.L50:
4583:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
4584:../src/wolfcrypt/src/sp_int.c ****         r->sign = a->sign;
4585:../src/wolfcrypt/src/sp_int.c **** #endif
4586:../src/wolfcrypt/src/sp_int.c ****     }
4587:../src/wolfcrypt/src/sp_int.c **** 
4588:../src/wolfcrypt/src/sp_int.c ****     return err;
 618                             		.loc 2 4588 12
 619 005e EC A5                   		mov.L	[r10], r5
4589:../src/wolfcrypt/src/sp_int.c **** }
 620                             		.loc 2 4589 1
 621 0060 EF 51                   		mov.L	r5, r1
 622 0062 3F AA 04                		rtsd	#16, r10-r10
 623                             	.LFE52:
 625                             		.section	.text.sp_init_copy,"ax",@progbits
 626                             		.global	_sp_init_copy
 628                             	_sp_init_copy:
 629                             	.LFB53:
4590:../src/wolfcrypt/src/sp_int.c **** #endif
4591:../src/wolfcrypt/src/sp_int.c **** 
4592:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || (defined(HAVE_ECC) && defined(FP_ECC))
4593:../src/wolfcrypt/src/sp_int.c **** /* Initializes r and copies in value from a.
4594:../src/wolfcrypt/src/sp_int.c ****  *
4595:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer - destination.
4596:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer - source.
4597:../src/wolfcrypt/src/sp_int.c ****  *
4598:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
4599:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or r is NULL.
4600:../src/wolfcrypt/src/sp_int.c ****  */
4601:../src/wolfcrypt/src/sp_int.c **** int sp_init_copy(sp_int* r, sp_int* a)
4602:../src/wolfcrypt/src/sp_int.c **** {
 630                             		.loc 2 4602 1
 631 0000 7E AA                   		push.l	r10
 632                             	.LCFI27:
 633 0002 71 0A F4                		add	#-12, r0, r10
 634                             	.LCFI28:
 635 0005 EF A0                   		mov.L	r10, r0
 636 0007 E7 A1 01                		mov.L	r1, 4[r10]
 637 000a E7 A2 02                		mov.L	r2, 8[r10]
4603:../src/wolfcrypt/src/sp_int.c ****     int err;
4604:../src/wolfcrypt/src/sp_int.c **** 
4605:../src/wolfcrypt/src/sp_int.c ****     err = sp_init(r);
 638                             		.loc 2 4605 11
 639 000d ED A1 01                		mov.L	4[r10], r1
 640 0010 05 00 00 00             		bsr	_sp_init
 641 0014 E3 A1                   		mov.L	r1, [r10]
4606:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 642                             		.loc 2 4606 8
 643 0016 EC A5                   		mov.L	[r10], r5
 644 0018 61 05                   		cmp	#0, r5
 645 001a 21 0E                   		bne	.L54
4607:../src/wolfcrypt/src/sp_int.c ****         err = sp_copy(a, r);
 646                             		.loc 2 4607 15
 647 001c ED A2 01                		mov.L	4[r10], r2
 648 001f ED A1 02                		mov.L	8[r10], r1
 649 0022 05 00 00 00             		bsr	_sp_copy
 650 0026 E3 A1                   		mov.L	r1, [r10]
 651                             	.L54:
4608:../src/wolfcrypt/src/sp_int.c ****     }
4609:../src/wolfcrypt/src/sp_int.c ****     return err;
 652                             		.loc 2 4609 12
 653 0028 EC A5                   		mov.L	[r10], r5
4610:../src/wolfcrypt/src/sp_int.c **** }
 654                             		.loc 2 4610 1
 655 002a EF 51                   		mov.L	r5, r1
 656 002c 3F AA 04                		rtsd	#16, r10-r10
 657                             	.LFE53:
 659                             		.section	.text.sp_exch,"ax",@progbits
 660                             		.global	_sp_exch
 662                             	_sp_exch:
 663                             	.LFB54:
4611:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || (HAVE_ECC && FP_ECC) */
4612:../src/wolfcrypt/src/sp_int.c **** 
4613:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
4614:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_DH) || !defined(NO_DSA)
4615:../src/wolfcrypt/src/sp_int.c **** /* Exchange the values in a and b.
4616:../src/wolfcrypt/src/sp_int.c ****  *
4617:../src/wolfcrypt/src/sp_int.c ****  * @param  [in,out]  a  SP integer to swap.
4618:../src/wolfcrypt/src/sp_int.c ****  * @param  [in,out]  b  SP integer to swap.
4619:../src/wolfcrypt/src/sp_int.c ****  *
4620:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
4621:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or b is NULL.
4622:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
4623:../src/wolfcrypt/src/sp_int.c ****  */
4624:../src/wolfcrypt/src/sp_int.c **** int sp_exch(sp_int* a, sp_int* b)
4625:../src/wolfcrypt/src/sp_int.c **** {
 664                             		.loc 2 4625 1
 665 0000 7E AA                   		push.l	r10
 666                             	.LCFI29:
 667 0002 71 0A E4                		add	#-28, r0, r10
 668                             	.LCFI30:
 669 0005 EF A0                   		mov.L	r10, r0
 670 0007 E7 A1 05                		mov.L	r1, 20[r10]
 671 000a E7 A2 06                		mov.L	r2, 24[r10]
4626:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 672                             		.loc 2 4626 9
 673 000d F8 A6 00                		mov.L	#0, [r10]
4627:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT(t, (a != NULL) ? a->used : 1);
 674                             		.loc 2 4627 5
 675 0010 F9 A6 01 00             		mov.L	#0, 4[r10]
4628:../src/wolfcrypt/src/sp_int.c **** 
4629:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (b == NULL)) {
 676                             		.loc 2 4629 8
 677 0014 ED A5 05                		mov.L	20[r10], r5
 678 0017 61 05                   		cmp	#0, r5
 679 0019 17                      		beq	.L57
 680                             		.loc 2 4629 21 discriminator 1
 681 001a ED A5 06                		mov.L	24[r10], r5
 682 001d 61 05                   		cmp	#0, r5
 683 001f 1C                      		bne	.L58
 684                             	.L57:
4630:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 685                             		.loc 2 4630 13
 686 0020 F8 A6 FD                		mov.L	#-3, [r10]
 687                             	.L58:
4631:../src/wolfcrypt/src/sp_int.c ****     }
4632:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && ((a->size < b->used) || (b->size < a->used))) {
 688                             		.loc 2 4632 8
 689 0023 EC A5                   		mov.L	[r10], r5
 690 0025 61 05                   		cmp	#0, r5
 691 0027 21 21                   		bne	.L59
 692                             		.loc 2 4632 32 discriminator 1
 693 0029 ED A5 05                		mov.L	20[r10], r5
 694 002c A8 5C                   		mov.L	4[r5], r4
 695                             		.loc 2 4632 42 discriminator 1
 696 002e ED A5 06                		mov.L	24[r10], r5
 697 0031 EC 55                   		mov.L	[r5], r5
 698                             		.loc 2 4632 26 discriminator 1
 699 0033 47 54                   		cmp	r5, r4
 700 0035 29 10                   		blt	.L60
 701                             		.loc 2 4632 55 discriminator 2
 702 0037 ED A5 06                		mov.L	24[r10], r5
 703 003a A8 5C                   		mov.L	4[r5], r4
 704                             		.loc 2 4632 65 discriminator 2
 705 003c ED A5 05                		mov.L	20[r10], r5
 706 003f EC 55                   		mov.L	[r5], r5
 707                             		.loc 2 4632 50 discriminator 2
 708 0041 47 54                   		cmp	r5, r4
 709 0043 28 05                   		bge	.L59
 710                             	.L60:
4633:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 711                             		.loc 2 4633 13
 712 0045 F8 A6 FD                		mov.L	#-3, [r10]
 713                             	.L59:
4634:../src/wolfcrypt/src/sp_int.c ****     }
4635:../src/wolfcrypt/src/sp_int.c **** 
4636:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT(t, a->used, err, NULL);
 714                             		.loc 2 4636 5
 715 0048 EC A5                   		mov.L	[r10], r5
 716 004a 61 05                   		cmp	#0, r5
 717 004c 21 29                   		bne	.L61
 718                             		.loc 2 4636 5 is_stmt 0 discriminator 1
 719 004e ED A5 05                		mov.L	20[r10], r5
 720 0051 EC 55                   		mov.L	[r5], r5
 721 0053 61 05                   		cmp	#0, r5
 722 0055 20 0C                   		beq	.L62
 723                             		.loc 2 4636 5 discriminator 2
 724 0057 ED A5 05                		mov.L	20[r10], r5
 725 005a EC 55                   		mov.L	[r5], r5
 726 005c 62 25                   		add	#2, r5
 727 005e 6C 25                   		shll	#2, r5
 728 0060 0B                      		bra	.L63
 729                             	.L62:
 730                             		.loc 2 4636 5 discriminator 3
 731 0061 66 C5                   		mov.L	#12, r5
 732                             	.L63:
 733                             		.loc 2 4636 5 discriminator 5
 734 0063 EF 51                   		mov.L	r5, r1
 735 0065 05 00 00 00             		bsr	_wolfSSL_Malloc
 736 0069 E7 A1 01                		mov.L	r1, 4[r10]
 737 006c ED A5 01                		mov.L	4[r10], r5
 738 006f 61 05                   		cmp	#0, r5
 739 0071 1C                      		bne	.L61
 740                             		.loc 2 4636 5 discriminator 6
 741 0072 F8 A6 FE                		mov.L	#-2, [r10]
 742                             	.L61:
4637:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 743                             		.loc 2 4637 8 is_stmt 1
 744 0075 EC A5                   		mov.L	[r10], r5
 745 0077 61 05                   		cmp	#0, r5
 746 0079 3B 86 00                		bne	.L64
 747                             	.LBB4:
4638:../src/wolfcrypt/src/sp_int.c ****         int asize = a->size;
 748                             		.loc 2 4638 13
 749 007c ED A5 05                		mov.L	20[r10], r5
 750 007f A8 5D                   		mov.L	4[r5], r5
 751 0081 E7 A5 02                		mov.L	r5, 8[r10]
4639:../src/wolfcrypt/src/sp_int.c ****         int bsize = b->size;
 752                             		.loc 2 4639 13
 753 0084 ED A5 06                		mov.L	24[r10], r5
 754 0087 A8 5D                   		mov.L	4[r5], r5
 755 0089 E7 A5 03                		mov.L	r5, 12[r10]
4640:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(t, a, MP_INT_SIZEOF(a->used));
 756                             		.loc 2 4640 9
 757 008c ED A5 05                		mov.L	20[r10], r5
 758 008f EC 55                   		mov.L	[r5], r5
 759 0091 61 05                   		cmp	#0, r5
 760 0093 20 0C                   		beq	.L65
 761                             		.loc 2 4640 9 is_stmt 0 discriminator 1
 762 0095 ED A5 05                		mov.L	20[r10], r5
 763 0098 EC 55                   		mov.L	[r5], r5
 764 009a 62 25                   		add	#2, r5
 765 009c 6C 25                   		shll	#2, r5
 766 009e 0B                      		bra	.L66
 767                             	.L65:
 768                             		.loc 2 4640 9 discriminator 2
 769 009f 66 C5                   		mov.L	#12, r5
 770                             	.L66:
 771                             		.loc 2 4640 9 discriminator 4
 772 00a1 EF 53                   		mov.L	r5, r3
 773 00a3 ED A2 05                		mov.L	20[r10], r2
 774 00a6 ED A1 01                		mov.L	4[r10], r1
 775 00a9 05 00 00 00             		bsr	_memcpy
4641:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(a, b, MP_INT_SIZEOF(b->used));
 776                             		.loc 2 4641 9 is_stmt 1 discriminator 4
 777 00ad ED A5 06                		mov.L	24[r10], r5
 778 00b0 EC 55                   		mov.L	[r5], r5
 779 00b2 61 05                   		cmp	#0, r5
 780 00b4 20 0C                   		beq	.L67
 781                             		.loc 2 4641 9 is_stmt 0 discriminator 1
 782 00b6 ED A5 06                		mov.L	24[r10], r5
 783 00b9 EC 55                   		mov.L	[r5], r5
 784 00bb 62 25                   		add	#2, r5
 785 00bd 6C 25                   		shll	#2, r5
 786 00bf 0B                      		bra	.L68
 787                             	.L67:
 788                             		.loc 2 4641 9 discriminator 2
 789 00c0 66 C5                   		mov.L	#12, r5
 790                             	.L68:
 791                             		.loc 2 4641 9 discriminator 4
 792 00c2 EF 53                   		mov.L	r5, r3
 793 00c4 ED A2 06                		mov.L	24[r10], r2
 794 00c7 ED A1 05                		mov.L	20[r10], r1
 795 00ca 05 00 00 00             		bsr	_memcpy
4642:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(b, t, MP_INT_SIZEOF(t->used));
 796                             		.loc 2 4642 9 is_stmt 1 discriminator 4
 797 00ce ED A5 01                		mov.L	4[r10], r5
 798 00d1 EC 55                   		mov.L	[r5], r5
 799 00d3 61 05                   		cmp	#0, r5
 800 00d5 20 0C                   		beq	.L69
 801                             		.loc 2 4642 9 is_stmt 0 discriminator 1
 802 00d7 ED A5 01                		mov.L	4[r10], r5
 803 00da EC 55                   		mov.L	[r5], r5
 804 00dc 62 25                   		add	#2, r5
 805 00de 6C 25                   		shll	#2, r5
 806 00e0 0B                      		bra	.L70
 807                             	.L69:
 808                             		.loc 2 4642 9 discriminator 2
 809 00e1 66 C5                   		mov.L	#12, r5
 810                             	.L70:
 811                             		.loc 2 4642 9 discriminator 4
 812 00e3 EF 53                   		mov.L	r5, r3
 813 00e5 ED A2 01                		mov.L	4[r10], r2
 814 00e8 ED A1 06                		mov.L	24[r10], r1
 815 00eb 05 00 00 00             		bsr	_memcpy
4643:../src/wolfcrypt/src/sp_int.c ****         a->size = asize;
 816                             		.loc 2 4643 17 is_stmt 1 discriminator 4
 817 00ef ED A5 05                		mov.L	20[r10], r5
 818 00f2 ED A4 02                		mov.L	8[r10], r4
 819 00f5 A0 5C                   		mov.L	r4, 4[r5]
4644:../src/wolfcrypt/src/sp_int.c ****         b->size = bsize;
 820                             		.loc 2 4644 17 discriminator 4
 821 00f7 ED A5 06                		mov.L	24[r10], r5
 822 00fa ED A4 03                		mov.L	12[r10], r4
 823 00fd A0 5C                   		mov.L	r4, 4[r5]
 824                             	.L64:
 825                             	.LBE4:
4645:../src/wolfcrypt/src/sp_int.c ****     }
4646:../src/wolfcrypt/src/sp_int.c **** 
4647:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT(t, NULL);
 826                             		.loc 2 4647 5
 827 00ff ED A5 01                		mov.L	4[r10], r5
 828 0102 61 05                   		cmp	#0, r5
 829 0104 20 15                   		beq	.L71
 830                             	.LBB5:
 831                             		.loc 2 4647 5 is_stmt 0 discriminator 1
 832 0106 ED A5 01                		mov.L	4[r10], r5
 833 0109 E7 A5 04                		mov.L	r5, 16[r10]
 834 010c ED A5 04                		mov.L	16[r10], r5
 835 010f 61 05                   		cmp	#0, r5
 836 0111 10                      		beq	.L71
 837                             		.loc 2 4647 5 discriminator 2
 838 0112 ED A1 04                		mov.L	16[r10], r1
 839 0115 05 00 00 00             		bsr	_wolfSSL_Free
 840                             	.L71:
 841                             	.LBE5:
4648:../src/wolfcrypt/src/sp_int.c ****     return err;
 842                             		.loc 2 4648 12 is_stmt 1
 843 0119 EC A5                   		mov.L	[r10], r5
4649:../src/wolfcrypt/src/sp_int.c **** }
 844                             		.loc 2 4649 1
 845 011b EF 51                   		mov.L	r5, r1
 846 011d 3F AA 08                		rtsd	#32, r10-r10
 847                             	.LFE54:
 849                             		.section	.text.sp_cond_swap_ct,"ax",@progbits
 850                             		.global	_sp_cond_swap_ct
 852                             	_sp_cond_swap_ct:
 853                             	.LFB55:
4650:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY) || !NO_DH ||
4651:../src/wolfcrypt/src/sp_int.c ****         * !NO_DSA */
4652:../src/wolfcrypt/src/sp_int.c **** 
4653:../src/wolfcrypt/src/sp_int.c **** #if defined(HAVE_ECC) && defined(ECC_TIMING_RESISTANT) && \
4654:../src/wolfcrypt/src/sp_int.c ****     !defined(WC_NO_CACHE_RESISTANT)
4655:../src/wolfcrypt/src/sp_int.c **** int sp_cond_swap_ct(sp_int * a, sp_int * b, int c, int m)
4656:../src/wolfcrypt/src/sp_int.c **** {
 854                             		.loc 2 4656 1
 855 0000 7E AA                   		push.l	r10
 856                             	.LCFI31:
 857 0002 71 0A DC                		add	#-36, r0, r10
 858                             	.LCFI32:
 859 0005 EF A0                   		mov.L	r10, r0
 860 0007 E7 A1 05                		mov.L	r1, 20[r10]
 861 000a E7 A2 06                		mov.L	r2, 24[r10]
 862 000d E7 A3 07                		mov.L	r3, 28[r10]
 863 0010 E7 A4 08                		mov.L	r4, 32[r10]
4657:../src/wolfcrypt/src/sp_int.c ****     int i;
4658:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 864                             		.loc 2 4658 9
 865 0013 F9 A6 01 00             		mov.L	#0, 4[r10]
4659:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit mask = (sp_int_digit)0 - m;
 866                             		.loc 2 4659 41
 867 0017 ED A5 08                		mov.L	32[r10], r5
 868                             		.loc 2 4659 18
 869 001a 7E 15                   		neg	r5
 870 001c E7 A5 03                		mov.L	r5, 12[r10]
4660:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT(t, c);
 871                             		.loc 2 4660 5
 872 001f F9 A6 02 00             		mov.L	#0, 8[r10]
4661:../src/wolfcrypt/src/sp_int.c **** 
4662:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT(t, c, err, NULL);
 873                             		.loc 2 4662 5
 874 0023 ED A5 01                		mov.L	4[r10], r5
 875 0026 61 05                   		cmp	#0, r5
 876 0028 21 25                   		bne	.L74
 877                             		.loc 2 4662 5 is_stmt 0 discriminator 1
 878 002a ED A5 07                		mov.L	28[r10], r5
 879 002d 61 05                   		cmp	#0, r5
 880 002f 11                      		beq	.L75
 881                             		.loc 2 4662 5 discriminator 2
 882 0030 ED A5 07                		mov.L	28[r10], r5
 883 0033 62 25                   		add	#2, r5
 884 0035 6C 25                   		shll	#2, r5
 885 0037 0B                      		bra	.L76
 886                             	.L75:
 887                             		.loc 2 4662 5 discriminator 3
 888 0038 66 C5                   		mov.L	#12, r5
 889                             	.L76:
 890                             		.loc 2 4662 5 discriminator 5
 891 003a EF 51                   		mov.L	r5, r1
 892 003c 05 00 00 00             		bsr	_wolfSSL_Malloc
 893 0040 E7 A1 02                		mov.L	r1, 8[r10]
 894 0043 ED A5 02                		mov.L	8[r10], r5
 895 0046 61 05                   		cmp	#0, r5
 896 0048 1D                      		bne	.L74
 897                             		.loc 2 4662 5 discriminator 6
 898 0049 F9 A6 01 FE             		mov.L	#-2, 4[r10]
 899                             	.L74:
4663:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 900                             		.loc 2 4663 8 is_stmt 1
 901 004d ED A5 01                		mov.L	4[r10], r5
 902 0050 61 05                   		cmp	#0, r5
 903 0052 3B E7 00                		bne	.L77
4664:../src/wolfcrypt/src/sp_int.c ****         t->used = (int)((a->used ^ b->used) & mask);
 904                             		.loc 2 4664 27
 905 0055 ED A5 05                		mov.L	20[r10], r5
 906 0058 EC 54                   		mov.L	[r5], r4
 907                             		.loc 2 4664 37
 908 005a ED A5 06                		mov.L	24[r10], r5
 909 005d EC 55                   		mov.L	[r5], r5
 910                             		.loc 2 4664 34
 911 005f FC 37 45                		xor	r4, r5
 912 0062 EF 54                   		mov.L	r5, r4
 913                             		.loc 2 4664 45
 914 0064 ED A5 03                		mov.L	12[r10], r5
 915 0067 53 45                   		and	r4, r5
 916                             		.loc 2 4664 19
 917 0069 EF 54                   		mov.L	r5, r4
 918                             		.loc 2 4664 17
 919 006b ED A5 02                		mov.L	8[r10], r5
 920 006e E3 54                   		mov.L	r4, [r5]
4665:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
4666:../src/wolfcrypt/src/sp_int.c ****         t->sign = (int)((a->sign ^ b->sign) & mask);
4667:../src/wolfcrypt/src/sp_int.c ****     #endif
4668:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < c; i++) {
 921                             		.loc 2 4668 16
 922 0070 F8 A6 00                		mov.L	#0, [r10]
 923                             		.loc 2 4668 9
 924 0073 2E 2F                   		bra	.L78
 925                             	.L79:
4669:../src/wolfcrypt/src/sp_int.c ****             t->dp[i] = (a->dp[i] ^ b->dp[i]) & mask;
 926                             		.loc 2 4669 30 discriminator 3
 927 0075 ED A4 05                		mov.L	20[r10], r4
 928 0078 EC A5                   		mov.L	[r10], r5
 929 007a 62 25                   		add	#2, r5
 930 007c FE 65 43                		mov.L	[r5,r4], r3
 931                             		.loc 2 4669 41 discriminator 3
 932 007f ED A4 06                		mov.L	24[r10], r4
 933 0082 EC A5                   		mov.L	[r10], r5
 934 0084 62 25                   		add	#2, r5
 935 0086 FE 65 45                		mov.L	[r5,r4], r5
 936                             		.loc 2 4669 34 discriminator 3
 937 0089 FC 37 35                		xor	r3, r5
 938                             		.loc 2 4669 46 discriminator 3
 939 008c ED A4 03                		mov.L	12[r10], r4
 940 008f FF 43 45                		and	r4, r5, r3
 941                             		.loc 2 4669 22 discriminator 3
 942 0092 ED A4 02                		mov.L	8[r10], r4
 943 0095 EC A5                   		mov.L	[r10], r5
 944 0097 62 25                   		add	#2, r5
 945 0099 FE 25 43                		mov.L	r3, [r5,r4]
4668:../src/wolfcrypt/src/sp_int.c ****             t->dp[i] = (a->dp[i] ^ b->dp[i]) & mask;
 946                             		.loc 2 4668 29 discriminator 3
 947 009c EC A5                   		mov.L	[r10], r5
 948 009e 62 15                   		add	#1, r5
 949 00a0 E3 A5                   		mov.L	r5, [r10]
 950                             	.L78:
4668:../src/wolfcrypt/src/sp_int.c ****             t->dp[i] = (a->dp[i] ^ b->dp[i]) & mask;
 951                             		.loc 2 4668 9 discriminator 1
 952 00a2 EC A4                   		mov.L	[r10], r4
 953 00a4 ED A5 07                		mov.L	28[r10], r5
 954 00a7 47 54                   		cmp	r5, r4
 955 00a9 29 CC                   		blt	.L79
4670:../src/wolfcrypt/src/sp_int.c ****         }
4671:../src/wolfcrypt/src/sp_int.c ****         a->used ^= t->used;
 956                             		.loc 2 4671 17
 957 00ab ED A5 05                		mov.L	20[r10], r5
 958 00ae EC 54                   		mov.L	[r5], r4
 959                             		.loc 2 4671 21
 960 00b0 ED A5 02                		mov.L	8[r10], r5
 961 00b3 EC 55                   		mov.L	[r5], r5
 962                             		.loc 2 4671 17
 963 00b5 FC 37 54                		xor	r5, r4
 964 00b8 ED A5 05                		mov.L	20[r10], r5
 965 00bb E3 54                   		mov.L	r4, [r5]
4672:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
4673:../src/wolfcrypt/src/sp_int.c ****         a->sign ^= t->sign;
4674:../src/wolfcrypt/src/sp_int.c ****     #endif
4675:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < c; i++) {
 966                             		.loc 2 4675 16
 967 00bd F8 A6 00                		mov.L	#0, [r10]
 968                             		.loc 2 4675 9
 969 00c0 2E 29                   		bra	.L80
 970                             	.L81:
4676:../src/wolfcrypt/src/sp_int.c ****             a->dp[i] ^= t->dp[i];
 971                             		.loc 2 4676 22 discriminator 3
 972 00c2 ED A4 05                		mov.L	20[r10], r4
 973 00c5 EC A5                   		mov.L	[r10], r5
 974 00c7 62 25                   		add	#2, r5
 975 00c9 FE 65 43                		mov.L	[r5,r4], r3
 976                             		.loc 2 4676 30 discriminator 3
 977 00cc ED A4 02                		mov.L	8[r10], r4
 978 00cf EC A5                   		mov.L	[r10], r5
 979 00d1 62 25                   		add	#2, r5
 980 00d3 FE 65 45                		mov.L	[r5,r4], r5
 981                             		.loc 2 4676 22 discriminator 3
 982 00d6 FC 37 53                		xor	r5, r3
 983 00d9 ED A4 05                		mov.L	20[r10], r4
 984 00dc EC A5                   		mov.L	[r10], r5
 985 00de 62 25                   		add	#2, r5
 986 00e0 FE 25 43                		mov.L	r3, [r5,r4]
4675:../src/wolfcrypt/src/sp_int.c ****             a->dp[i] ^= t->dp[i];
 987                             		.loc 2 4675 29 discriminator 3
 988 00e3 EC A5                   		mov.L	[r10], r5
 989 00e5 62 15                   		add	#1, r5
 990 00e7 E3 A5                   		mov.L	r5, [r10]
 991                             	.L80:
4675:../src/wolfcrypt/src/sp_int.c ****             a->dp[i] ^= t->dp[i];
 992                             		.loc 2 4675 9 discriminator 1
 993 00e9 EC A4                   		mov.L	[r10], r4
 994 00eb ED A5 07                		mov.L	28[r10], r5
 995 00ee 47 54                   		cmp	r5, r4
 996 00f0 29 D2                   		blt	.L81
4677:../src/wolfcrypt/src/sp_int.c ****         }
4678:../src/wolfcrypt/src/sp_int.c ****         b->used ^= t->used;
 997                             		.loc 2 4678 17
 998 00f2 ED A5 06                		mov.L	24[r10], r5
 999 00f5 EC 54                   		mov.L	[r5], r4
 1000                             		.loc 2 4678 21
 1001 00f7 ED A5 02                		mov.L	8[r10], r5
 1002 00fa EC 55                   		mov.L	[r5], r5
 1003                             		.loc 2 4678 17
 1004 00fc FC 37 54                		xor	r5, r4
 1005 00ff ED A5 06                		mov.L	24[r10], r5
 1006 0102 E3 54                   		mov.L	r4, [r5]
4679:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
4680:../src/wolfcrypt/src/sp_int.c ****         b->sign ^= b->sign;
4681:../src/wolfcrypt/src/sp_int.c ****     #endif
4682:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < c; i++) {
 1007                             		.loc 2 4682 16
 1008 0104 F8 A6 00                		mov.L	#0, [r10]
 1009                             		.loc 2 4682 9
 1010 0107 2E 29                   		bra	.L82
 1011                             	.L83:
4683:../src/wolfcrypt/src/sp_int.c ****             b->dp[i] ^= t->dp[i];
 1012                             		.loc 2 4683 22 discriminator 3
 1013 0109 ED A4 06                		mov.L	24[r10], r4
 1014 010c EC A5                   		mov.L	[r10], r5
 1015 010e 62 25                   		add	#2, r5
 1016 0110 FE 65 43                		mov.L	[r5,r4], r3
 1017                             		.loc 2 4683 30 discriminator 3
 1018 0113 ED A4 02                		mov.L	8[r10], r4
 1019 0116 EC A5                   		mov.L	[r10], r5
 1020 0118 62 25                   		add	#2, r5
 1021 011a FE 65 45                		mov.L	[r5,r4], r5
 1022                             		.loc 2 4683 22 discriminator 3
 1023 011d FC 37 53                		xor	r5, r3
 1024 0120 ED A4 06                		mov.L	24[r10], r4
 1025 0123 EC A5                   		mov.L	[r10], r5
 1026 0125 62 25                   		add	#2, r5
 1027 0127 FE 25 43                		mov.L	r3, [r5,r4]
4682:../src/wolfcrypt/src/sp_int.c ****             b->dp[i] ^= t->dp[i];
 1028                             		.loc 2 4682 29 discriminator 3
 1029 012a EC A5                   		mov.L	[r10], r5
 1030 012c 62 15                   		add	#1, r5
 1031 012e E3 A5                   		mov.L	r5, [r10]
 1032                             	.L82:
4682:../src/wolfcrypt/src/sp_int.c ****             b->dp[i] ^= t->dp[i];
 1033                             		.loc 2 4682 9 discriminator 1
 1034 0130 EC A4                   		mov.L	[r10], r4
 1035 0132 ED A5 07                		mov.L	28[r10], r5
 1036 0135 47 54                   		cmp	r5, r4
 1037 0137 29 D2                   		blt	.L83
 1038                             	.L77:
4684:../src/wolfcrypt/src/sp_int.c ****         }
4685:../src/wolfcrypt/src/sp_int.c ****     }
4686:../src/wolfcrypt/src/sp_int.c **** 
4687:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT(t, NULL);
 1039                             		.loc 2 4687 5
 1040 0139 ED A5 02                		mov.L	8[r10], r5
 1041 013c 61 05                   		cmp	#0, r5
 1042 013e 20 15                   		beq	.L84
 1043                             	.LBB6:
 1044                             		.loc 2 4687 5 is_stmt 0 discriminator 1
 1045 0140 ED A5 02                		mov.L	8[r10], r5
 1046 0143 E7 A5 04                		mov.L	r5, 16[r10]
 1047 0146 ED A5 04                		mov.L	16[r10], r5
 1048 0149 61 05                   		cmp	#0, r5
 1049 014b 10                      		beq	.L84
 1050                             		.loc 2 4687 5 discriminator 2
 1051 014c ED A1 04                		mov.L	16[r10], r1
 1052 014f 05 00 00 00             		bsr	_wolfSSL_Free
 1053                             	.L84:
 1054                             	.LBE6:
4688:../src/wolfcrypt/src/sp_int.c ****     return err;
 1055                             		.loc 2 4688 12 is_stmt 1
 1056 0153 ED A5 01                		mov.L	4[r10], r5
4689:../src/wolfcrypt/src/sp_int.c **** }
 1057                             		.loc 2 4689 1
 1058 0156 EF 51                   		mov.L	r5, r1
 1059 0158 3F AA 0A                		rtsd	#40, r10-r10
 1060                             	.LFE55:
 1062                             		.section	.text._sp_cmp_abs,"ax",@progbits
 1064                             	__sp_cmp_abs:
 1065                             	.LFB56:
4690:../src/wolfcrypt/src/sp_int.c **** #endif /* HAVE_ECC && ECC_TIMING_RESISTANT && !WC_NO_CACHE_RESISTANT */
4691:../src/wolfcrypt/src/sp_int.c **** 
4692:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
4693:../src/wolfcrypt/src/sp_int.c **** /* Calculate the absolute value of the multi-precision number.
4694:../src/wolfcrypt/src/sp_int.c ****  *
4695:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to calculate absolute value of.
4696:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
4697:../src/wolfcrypt/src/sp_int.c ****  *
4698:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
4699:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or r is NULL.
4700:../src/wolfcrypt/src/sp_int.c ****  */
4701:../src/wolfcrypt/src/sp_int.c **** int sp_abs(sp_int* a, sp_int* r)
4702:../src/wolfcrypt/src/sp_int.c **** {
4703:../src/wolfcrypt/src/sp_int.c ****     int err;
4704:../src/wolfcrypt/src/sp_int.c **** 
4705:../src/wolfcrypt/src/sp_int.c ****     err = sp_copy(a, r);
4706:../src/wolfcrypt/src/sp_int.c ****     if (r != NULL) {
4707:../src/wolfcrypt/src/sp_int.c ****         r->sign = MP_ZPOS;
4708:../src/wolfcrypt/src/sp_int.c ****     }
4709:../src/wolfcrypt/src/sp_int.c **** 
4710:../src/wolfcrypt/src/sp_int.c ****     return err;
4711:../src/wolfcrypt/src/sp_int.c **** }
4712:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_INT_NEGATIVE */
4713:../src/wolfcrypt/src/sp_int.c **** 
4714:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || !defined(NO_DH) || defined(HAVE_ECC) || \
4715:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY))
4716:../src/wolfcrypt/src/sp_int.c **** /* Compare absolute value of two multi-precision numbers.
4717:../src/wolfcrypt/src/sp_int.c ****  *
4718:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer.
4719:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  b  SP integer.
4720:../src/wolfcrypt/src/sp_int.c ****  *
4721:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_GT when a is greater than b.
4722:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_LT when a is less than b.
4723:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_EQ when a is equals b.
4724:../src/wolfcrypt/src/sp_int.c ****  */
4725:../src/wolfcrypt/src/sp_int.c **** static int _sp_cmp_abs(sp_int* a, sp_int* b)
4726:../src/wolfcrypt/src/sp_int.c **** {
 1066                             		.loc 2 4726 1
 1067 0000 7E AA                   		push.l	r10
 1068                             	.LCFI33:
 1069 0002 71 0A F0                		add	#-16, r0, r10
 1070                             	.LCFI34:
 1071 0005 EF A0                   		mov.L	r10, r0
 1072 0007 E7 A1 02                		mov.L	r1, 8[r10]
 1073 000a E7 A2 03                		mov.L	r2, 12[r10]
4727:../src/wolfcrypt/src/sp_int.c ****     int ret = MP_EQ;
 1074                             		.loc 2 4727 9
 1075 000d F8 A6 00                		mov.L	#0, [r10]
4728:../src/wolfcrypt/src/sp_int.c **** 
4729:../src/wolfcrypt/src/sp_int.c ****     if (a->used > b->used) {
 1076                             		.loc 2 4729 10
 1077 0010 ED A5 02                		mov.L	8[r10], r5
 1078 0013 EC 54                   		mov.L	[r5], r4
 1079                             		.loc 2 4729 20
 1080 0015 ED A5 03                		mov.L	12[r10], r5
 1081 0018 EC 55                   		mov.L	[r5], r5
 1082                             		.loc 2 4729 8
 1083 001a 47 54                   		cmp	r5, r4
 1084 001c 2B 07                   		ble	.L87
4730:../src/wolfcrypt/src/sp_int.c ****         ret = MP_GT;
 1085                             		.loc 2 4730 13
 1086 001e F8 A6 01                		mov.L	#1, [r10]
 1087 0021 2E 6F                   		bra	.L88
 1088                             	.L87:
4731:../src/wolfcrypt/src/sp_int.c ****     }
4732:../src/wolfcrypt/src/sp_int.c ****     else if (a->used < b->used) {
 1089                             		.loc 2 4732 15
 1090 0023 ED A5 02                		mov.L	8[r10], r5
 1091 0026 EC 54                   		mov.L	[r5], r4
 1092                             		.loc 2 4732 25
 1093 0028 ED A5 03                		mov.L	12[r10], r5
 1094 002b EC 55                   		mov.L	[r5], r5
 1095                             		.loc 2 4732 13
 1096 002d 47 54                   		cmp	r5, r4
 1097 002f 28 07                   		bge	.L89
4733:../src/wolfcrypt/src/sp_int.c ****         ret = MP_LT;
 1098                             		.loc 2 4733 13
 1099 0031 F8 A6 FF                		mov.L	#-1, [r10]
 1100 0034 2E 5C                   		bra	.L88
 1101                             	.L89:
 1102                             	.LBB7:
4734:../src/wolfcrypt/src/sp_int.c ****     }
4735:../src/wolfcrypt/src/sp_int.c ****     else {
4736:../src/wolfcrypt/src/sp_int.c ****         int i;
4737:../src/wolfcrypt/src/sp_int.c **** 
4738:../src/wolfcrypt/src/sp_int.c ****         for (i = a->used - 1; i >= 0; i--) {
 1103                             		.loc 2 4738 19
 1104 0036 ED A5 02                		mov.L	8[r10], r5
 1105 0039 EC 55                   		mov.L	[r5], r5
 1106                             		.loc 2 4738 16
 1107 003b 60 15                   		sub	#1, r5
 1108 003d E7 A5 01                		mov.L	r5, 4[r10]
 1109                             		.loc 2 4738 9
 1110 0040 2E 48                   		bra	.L90
 1111                             	.L93:
4739:../src/wolfcrypt/src/sp_int.c ****             if (a->dp[i] > b->dp[i]) {
 1112                             		.loc 2 4739 22
 1113 0042 ED A4 02                		mov.L	8[r10], r4
 1114 0045 ED A5 01                		mov.L	4[r10], r5
 1115 0048 62 25                   		add	#2, r5
 1116 004a FE 65 44                		mov.L	[r5,r4], r4
 1117                             		.loc 2 4739 33
 1118 004d ED A3 03                		mov.L	12[r10], r3
 1119 0050 ED A5 01                		mov.L	4[r10], r5
 1120 0053 62 25                   		add	#2, r5
 1121 0055 FE 65 35                		mov.L	[r5,r3], r5
 1122                             		.loc 2 4739 16
 1123 0058 47 54                   		cmp	r5, r4
 1124 005a 25 07                   		bleu	.L91
4740:../src/wolfcrypt/src/sp_int.c ****                 ret = MP_GT;
 1125                             		.loc 2 4740 21
 1126 005c F8 A6 01                		mov.L	#1, [r10]
4741:../src/wolfcrypt/src/sp_int.c ****                 break;
 1127                             		.loc 2 4741 17
 1128 005f 2E 31                   		bra	.L88
 1129                             	.L91:
4742:../src/wolfcrypt/src/sp_int.c ****             }
4743:../src/wolfcrypt/src/sp_int.c ****             else if (a->dp[i] < b->dp[i]) {
 1130                             		.loc 2 4743 27
 1131 0061 ED A4 02                		mov.L	8[r10], r4
 1132 0064 ED A5 01                		mov.L	4[r10], r5
 1133 0067 62 25                   		add	#2, r5
 1134 0069 FE 65 44                		mov.L	[r5,r4], r4
 1135                             		.loc 2 4743 38
 1136 006c ED A3 03                		mov.L	12[r10], r3
 1137 006f ED A5 01                		mov.L	4[r10], r5
 1138 0072 62 25                   		add	#2, r5
 1139 0074 FE 65 35                		mov.L	[r5,r3], r5
 1140                             		.loc 2 4743 21
 1141 0077 47 54                   		cmp	r5, r4
 1142 0079 22 07                   		bgeu	.L92
4744:../src/wolfcrypt/src/sp_int.c ****                 ret = MP_LT;
 1143                             		.loc 2 4744 21
 1144 007b F8 A6 FF                		mov.L	#-1, [r10]
4745:../src/wolfcrypt/src/sp_int.c ****                 break;
 1145                             		.loc 2 4745 17
 1146 007e 2E 12                   		bra	.L88
 1147                             	.L92:
4738:../src/wolfcrypt/src/sp_int.c ****             if (a->dp[i] > b->dp[i]) {
 1148                             		.loc 2 4738 40 discriminator 2
 1149 0080 ED A5 01                		mov.L	4[r10], r5
 1150 0083 60 15                   		sub	#1, r5
 1151 0085 E7 A5 01                		mov.L	r5, 4[r10]
 1152                             	.L90:
4738:../src/wolfcrypt/src/sp_int.c ****             if (a->dp[i] > b->dp[i]) {
 1153                             		.loc 2 4738 9 discriminator 1
 1154 0088 ED A5 01                		mov.L	4[r10], r5
 1155 008b 61 05                   		cmp	#0, r5
 1156 008d 28 B5                   		bge	.L93
 1157 008f 03                      		.balign 8,3,1
 1158                             	.L88:
 1159                             	.LBE7:
4746:../src/wolfcrypt/src/sp_int.c ****             }
4747:../src/wolfcrypt/src/sp_int.c ****         }
4748:../src/wolfcrypt/src/sp_int.c ****     }
4749:../src/wolfcrypt/src/sp_int.c **** 
4750:../src/wolfcrypt/src/sp_int.c ****     return ret;
 1160                             		.loc 2 4750 12
 1161 0090 EC A5                   		mov.L	[r10], r5
4751:../src/wolfcrypt/src/sp_int.c **** }
 1162                             		.loc 2 4751 1
 1163 0092 EF 51                   		mov.L	r5, r1
 1164 0094 3F AA 05                		rtsd	#20, r10-r10
 1165                             	.LFE56:
 1167 0097 03                      		.section	.text.sp_cmp_mag,"ax",@progbits
 1168                             		.global	_sp_cmp_mag
 1170                             	_sp_cmp_mag:
 1171                             	.LFB57:
4752:../src/wolfcrypt/src/sp_int.c **** #endif
4753:../src/wolfcrypt/src/sp_int.c **** 
4754:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_PUBLIC_ONLY)
4755:../src/wolfcrypt/src/sp_int.c **** /* Compare absolute value of two multi-precision numbers.
4756:../src/wolfcrypt/src/sp_int.c ****  *
4757:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer.
4758:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  b  SP integer.
4759:../src/wolfcrypt/src/sp_int.c ****  *
4760:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_GT when a is greater than b.
4761:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_LT when a is less than b.
4762:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_EQ when a is equals b.
4763:../src/wolfcrypt/src/sp_int.c ****  */
4764:../src/wolfcrypt/src/sp_int.c **** int sp_cmp_mag(sp_int* a, sp_int* b)
4765:../src/wolfcrypt/src/sp_int.c **** {
 1172                             		.loc 2 4765 1
 1173 0000 7E AA                   		push.l	r10
 1174                             	.LCFI35:
 1175 0002 71 0A F4                		add	#-12, r0, r10
 1176                             	.LCFI36:
 1177 0005 EF A0                   		mov.L	r10, r0
 1178 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1179 000a E7 A2 02                		mov.L	r2, 8[r10]
4766:../src/wolfcrypt/src/sp_int.c ****     int ret;
4767:../src/wolfcrypt/src/sp_int.c **** 
4768:../src/wolfcrypt/src/sp_int.c ****     if (a == b) {
 1180                             		.loc 2 4768 8
 1181 000d ED A4 01                		mov.L	4[r10], r4
 1182 0010 ED A5 02                		mov.L	8[r10], r5
 1183 0013 47 54                   		cmp	r5, r4
 1184 0015 1E                      		bne	.L96
4769:../src/wolfcrypt/src/sp_int.c ****         ret = MP_EQ;
 1185                             		.loc 2 4769 13
 1186 0016 F8 A6 00                		mov.L	#0, [r10]
 1187 0019 2E 24                   		bra	.L97
 1188                             	.L96:
4770:../src/wolfcrypt/src/sp_int.c ****     }
4771:../src/wolfcrypt/src/sp_int.c ****     else if (a == NULL) {
 1189                             		.loc 2 4771 13
 1190 001b ED A5 01                		mov.L	4[r10], r5
 1191 001e 61 05                   		cmp	#0, r5
 1192 0020 1E                      		bne	.L98
4772:../src/wolfcrypt/src/sp_int.c ****         ret = MP_LT;
 1193                             		.loc 2 4772 13
 1194 0021 F8 A6 FF                		mov.L	#-1, [r10]
 1195 0024 2E 19                   		bra	.L97
 1196                             	.L98:
4773:../src/wolfcrypt/src/sp_int.c ****     }
4774:../src/wolfcrypt/src/sp_int.c ****     else if (b == NULL) {
 1197                             		.loc 2 4774 13
 1198 0026 ED A5 02                		mov.L	8[r10], r5
 1199 0029 61 05                   		cmp	#0, r5
 1200 002b 1E                      		bne	.L99
4775:../src/wolfcrypt/src/sp_int.c ****         ret = MP_GT;
 1201                             		.loc 2 4775 13
 1202 002c F8 A6 01                		mov.L	#1, [r10]
 1203 002f 2E 0E                   		bra	.L97
 1204                             	.L99:
4776:../src/wolfcrypt/src/sp_int.c ****     }
4777:../src/wolfcrypt/src/sp_int.c ****     else
4778:../src/wolfcrypt/src/sp_int.c ****     {
4779:../src/wolfcrypt/src/sp_int.c ****         ret = _sp_cmp_abs(a, b);
 1205                             		.loc 2 4779 15
 1206 0031 ED A2 02                		mov.L	8[r10], r2
 1207 0034 ED A1 01                		mov.L	4[r10], r1
 1208 0037 05 00 00 00             		bsr	__sp_cmp_abs
 1209 003b E3 A1                   		mov.L	r1, [r10]
 1210                             		.balign 8,3,1
 1211                             	.L97:
4780:../src/wolfcrypt/src/sp_int.c ****     }
4781:../src/wolfcrypt/src/sp_int.c **** 
4782:../src/wolfcrypt/src/sp_int.c ****     return ret;
 1212                             		.loc 2 4782 12
 1213 003d EC A5                   		mov.L	[r10], r5
4783:../src/wolfcrypt/src/sp_int.c **** }
 1214                             		.loc 2 4783 1
 1215 003f EF 51                   		mov.L	r5, r1
 1216 0041 3F AA 04                		rtsd	#16, r10-r10
 1217                             	.LFE57:
 1219 0044 76 10 01 00             		.section	.text._sp_cmp,"ax",@progbits
 1221                             	__sp_cmp:
 1222                             	.LFB58:
4784:../src/wolfcrypt/src/sp_int.c **** #endif
4785:../src/wolfcrypt/src/sp_int.c **** 
4786:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || defined(HAVE_ECC) || !defined(NO_DSA) || \
4787:../src/wolfcrypt/src/sp_int.c ****     defined(OPENSSL_EXTRA) || !defined(NO_DH) || \
4788:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY))
4789:../src/wolfcrypt/src/sp_int.c **** /* Compare two multi-precision numbers.
4790:../src/wolfcrypt/src/sp_int.c ****  *
4791:../src/wolfcrypt/src/sp_int.c ****  * Assumes a and b are not NULL.
4792:../src/wolfcrypt/src/sp_int.c ****  *
4793:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer.
4794:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer.
4795:../src/wolfcrypt/src/sp_int.c ****  *
4796:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_GT when a is greater than b.
4797:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_LT when a is less than b.
4798:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_EQ when a is equals b.
4799:../src/wolfcrypt/src/sp_int.c ****  */
4800:../src/wolfcrypt/src/sp_int.c **** static int _sp_cmp(sp_int* a, sp_int* b)
4801:../src/wolfcrypt/src/sp_int.c **** {
 1223                             		.loc 2 4801 1
 1224 0000 7E AA                   		push.l	r10
 1225                             	.LCFI37:
 1226 0002 71 0A F4                		add	#-12, r0, r10
 1227                             	.LCFI38:
 1228 0005 EF A0                   		mov.L	r10, r0
 1229 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1230 000a E7 A2 02                		mov.L	r2, 8[r10]
4802:../src/wolfcrypt/src/sp_int.c ****     int ret;
4803:../src/wolfcrypt/src/sp_int.c **** 
4804:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
4805:../src/wolfcrypt/src/sp_int.c ****     if (a->sign == b->sign) {
4806:../src/wolfcrypt/src/sp_int.c **** #endif
4807:../src/wolfcrypt/src/sp_int.c ****         ret = _sp_cmp_abs(a, b);
 1231                             		.loc 2 4807 15
 1232 000d ED A2 02                		mov.L	8[r10], r2
 1233 0010 ED A1 01                		mov.L	4[r10], r1
 1234 0013 05 00 00 00             		bsr	__sp_cmp_abs
 1235 0017 E3 A1                   		mov.L	r1, [r10]
4808:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
4809:../src/wolfcrypt/src/sp_int.c ****         if (a->sign == MP_NEG) {
4810:../src/wolfcrypt/src/sp_int.c ****             /* MP_GT = 1, MP_LT = -1, MP_EQ = 0
4811:../src/wolfcrypt/src/sp_int.c ****              * Swapping MP_GT and MP_LT results.
4812:../src/wolfcrypt/src/sp_int.c ****              */
4813:../src/wolfcrypt/src/sp_int.c ****             ret = -ret;
4814:../src/wolfcrypt/src/sp_int.c ****         }
4815:../src/wolfcrypt/src/sp_int.c ****     }
4816:../src/wolfcrypt/src/sp_int.c ****     else if (a->sign > b->sign) {
4817:../src/wolfcrypt/src/sp_int.c ****         ret = MP_LT;
4818:../src/wolfcrypt/src/sp_int.c ****     }
4819:../src/wolfcrypt/src/sp_int.c ****     else /* (a->sign < b->sign) */ {
4820:../src/wolfcrypt/src/sp_int.c ****         ret = MP_GT;
4821:../src/wolfcrypt/src/sp_int.c ****     }
4822:../src/wolfcrypt/src/sp_int.c **** #endif
4823:../src/wolfcrypt/src/sp_int.c **** 
4824:../src/wolfcrypt/src/sp_int.c ****     return ret;
 1236                             		.loc 2 4824 12
 1237 0019 EC A5                   		mov.L	[r10], r5
4825:../src/wolfcrypt/src/sp_int.c **** }
 1238                             		.loc 2 4825 1
 1239 001b EF 51                   		mov.L	r5, r1
 1240 001d 3F AA 04                		rtsd	#16, r10-r10
 1241                             	.LFE58:
 1243                             		.section	.text.sp_cmp,"ax",@progbits
 1244                             		.global	_sp_cmp
 1246                             	_sp_cmp:
 1247                             	.LFB59:
4826:../src/wolfcrypt/src/sp_int.c **** #endif
4827:../src/wolfcrypt/src/sp_int.c **** 
4828:../src/wolfcrypt/src/sp_int.c **** #if (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
4829:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_DSA) || defined(HAVE_ECC) || !defined(NO_DH) || \
4830:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_SP_MATH_ALL)
4831:../src/wolfcrypt/src/sp_int.c **** /* Compare two multi-precision numbers.
4832:../src/wolfcrypt/src/sp_int.c ****  *
4833:../src/wolfcrypt/src/sp_int.c ****  * Pointers are compared such that NULL is less than not NULL.
4834:../src/wolfcrypt/src/sp_int.c ****  *
4835:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer.
4836:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer.
4837:../src/wolfcrypt/src/sp_int.c ****  *
4838:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_GT when a is greater than b.
4839:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_LT when a is less than b.
4840:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_EQ when a is equals b.
4841:../src/wolfcrypt/src/sp_int.c ****  */
4842:../src/wolfcrypt/src/sp_int.c **** int sp_cmp(sp_int* a, sp_int* b)
4843:../src/wolfcrypt/src/sp_int.c **** {
 1248                             		.loc 2 4843 1
 1249 0000 7E AA                   		push.l	r10
 1250                             	.LCFI39:
 1251 0002 71 0A F4                		add	#-12, r0, r10
 1252                             	.LCFI40:
 1253 0005 EF A0                   		mov.L	r10, r0
 1254 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1255 000a E7 A2 02                		mov.L	r2, 8[r10]
4844:../src/wolfcrypt/src/sp_int.c ****     int ret;
4845:../src/wolfcrypt/src/sp_int.c **** 
4846:../src/wolfcrypt/src/sp_int.c ****     if (a == b) {
 1256                             		.loc 2 4846 8
 1257 000d ED A4 01                		mov.L	4[r10], r4
 1258 0010 ED A5 02                		mov.L	8[r10], r5
 1259 0013 47 54                   		cmp	r5, r4
 1260 0015 1E                      		bne	.L104
4847:../src/wolfcrypt/src/sp_int.c ****         ret = MP_EQ;
 1261                             		.loc 2 4847 13
 1262 0016 F8 A6 00                		mov.L	#0, [r10]
 1263 0019 2E 24                   		bra	.L105
 1264                             	.L104:
4848:../src/wolfcrypt/src/sp_int.c ****     }
4849:../src/wolfcrypt/src/sp_int.c ****     else if (a == NULL) {
 1265                             		.loc 2 4849 13
 1266 001b ED A5 01                		mov.L	4[r10], r5
 1267 001e 61 05                   		cmp	#0, r5
 1268 0020 1E                      		bne	.L106
4850:../src/wolfcrypt/src/sp_int.c ****         ret = MP_LT;
 1269                             		.loc 2 4850 13
 1270 0021 F8 A6 FF                		mov.L	#-1, [r10]
 1271 0024 2E 19                   		bra	.L105
 1272                             	.L106:
4851:../src/wolfcrypt/src/sp_int.c ****     }
4852:../src/wolfcrypt/src/sp_int.c ****     else if (b == NULL) {
 1273                             		.loc 2 4852 13
 1274 0026 ED A5 02                		mov.L	8[r10], r5
 1275 0029 61 05                   		cmp	#0, r5
 1276 002b 1E                      		bne	.L107
4853:../src/wolfcrypt/src/sp_int.c ****         ret = MP_GT;
 1277                             		.loc 2 4853 13
 1278 002c F8 A6 01                		mov.L	#1, [r10]
 1279 002f 2E 0E                   		bra	.L105
 1280                             	.L107:
4854:../src/wolfcrypt/src/sp_int.c ****     }
4855:../src/wolfcrypt/src/sp_int.c ****     else
4856:../src/wolfcrypt/src/sp_int.c ****     {
4857:../src/wolfcrypt/src/sp_int.c ****         ret = _sp_cmp(a, b);
 1281                             		.loc 2 4857 15
 1282 0031 ED A2 02                		mov.L	8[r10], r2
 1283 0034 ED A1 01                		mov.L	4[r10], r1
 1284 0037 05 00 00 00             		bsr	__sp_cmp
 1285 003b E3 A1                   		mov.L	r1, [r10]
 1286                             		.balign 8,3,1
 1287                             	.L105:
4858:../src/wolfcrypt/src/sp_int.c ****     }
4859:../src/wolfcrypt/src/sp_int.c **** 
4860:../src/wolfcrypt/src/sp_int.c ****     return ret;
 1288                             		.loc 2 4860 12
 1289 003d EC A5                   		mov.L	[r10], r5
4861:../src/wolfcrypt/src/sp_int.c **** }
 1290                             		.loc 2 4861 1
 1291 003f EF 51                   		mov.L	r5, r1
 1292 0041 3F AA 04                		rtsd	#16, r10-r10
 1293                             	.LFE59:
 1295 0044 76 10 01 00             		.section	.text.sp_is_bit_set,"ax",@progbits
 1296                             		.global	_sp_is_bit_set
 1298                             	_sp_is_bit_set:
 1299                             	.LFB60:
4862:../src/wolfcrypt/src/sp_int.c **** #endif
4863:../src/wolfcrypt/src/sp_int.c **** 
4864:../src/wolfcrypt/src/sp_int.c **** /*************************
4865:../src/wolfcrypt/src/sp_int.c ****  * Bit check/set functions
4866:../src/wolfcrypt/src/sp_int.c ****  *************************/
4867:../src/wolfcrypt/src/sp_int.c **** 
4868:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_RSA_VERIFY_ONLY) || (defined(WOLFSSL_SP_MATH_ALL) && \
4869:../src/wolfcrypt/src/sp_int.c ****     defined(HAVE_ECC))
4870:../src/wolfcrypt/src/sp_int.c **** /* Check if a bit is set
4871:../src/wolfcrypt/src/sp_int.c ****  *
4872:../src/wolfcrypt/src/sp_int.c ****  * When a is NULL, result is 0.
4873:../src/wolfcrypt/src/sp_int.c ****  *
4874:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer.
4875:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  b  Bit position to check.
4876:../src/wolfcrypt/src/sp_int.c ****  *
4877:../src/wolfcrypt/src/sp_int.c ****  * @return  0 when bit is not set.
4878:../src/wolfcrypt/src/sp_int.c ****  * @return  1 when bit is set.
4879:../src/wolfcrypt/src/sp_int.c ****  */
4880:../src/wolfcrypt/src/sp_int.c **** int sp_is_bit_set(sp_int* a, unsigned int b)
4881:../src/wolfcrypt/src/sp_int.c **** {
 1300                             		.loc 2 4881 1
 1301 0000 6E 7A                   		pushm	r7-r10
 1302                             	.LCFI41:
 1303 0002 71 0A EC                		add	#-20, r0, r10
 1304                             	.LCFI42:
 1305 0005 EF A0                   		mov.L	r10, r0
 1306 0007 E7 A1 03                		mov.L	r1, 12[r10]
 1307 000a E7 A2 04                		mov.L	r2, 16[r10]
4882:../src/wolfcrypt/src/sp_int.c ****     int ret = 0;
 1308                             		.loc 2 4882 9
 1309 000d F8 A6 00                		mov.L	#0, [r10]
4883:../src/wolfcrypt/src/sp_int.c ****     int i = (int)(b >> SP_WORD_SHIFT);
 1310                             		.loc 2 4883 21
 1311 0010 ED A5 04                		mov.L	16[r10], r5
 1312 0013 68 55                   		shlr	#5, r5
 1313                             		.loc 2 4883 9
 1314 0015 E7 A5 01                		mov.L	r5, 4[r10]
4884:../src/wolfcrypt/src/sp_int.c ****     int s = (int)(b & SP_WORD_MASK);
 1315                             		.loc 2 4884 21
 1316 0018 ED A5 04                		mov.L	16[r10], r5
 1317                             		.loc 2 4884 9
 1318 001b 75 25 1F                		and	#31, r5
 1319 001e E7 A5 02                		mov.L	r5, 8[r10]
4885:../src/wolfcrypt/src/sp_int.c **** 
4886:../src/wolfcrypt/src/sp_int.c ****     if ((a != NULL) && (i < a->used)) {
 1320                             		.loc 2 4886 8
 1321 0021 ED A5 03                		mov.L	12[r10], r5
 1322 0024 61 05                   		cmp	#0, r5
 1323 0026 20 27                   		beq	.L110
 1324                             		.loc 2 4886 30 discriminator 1
 1325 0028 ED A5 03                		mov.L	12[r10], r5
 1326 002b EC 55                   		mov.L	[r5], r5
 1327                             		.loc 2 4886 21 discriminator 1
 1328 002d ED A4 01                		mov.L	4[r10], r4
 1329 0030 47 54                   		cmp	r5, r4
 1330 0032 28 1B                   		bge	.L110
4887:../src/wolfcrypt/src/sp_int.c ****         ret = (int)((a->dp[i] >> s) & (sp_int_digit)1);
 1331                             		.loc 2 4887 27
 1332 0034 ED A4 03                		mov.L	12[r10], r4
 1333 0037 ED A5 01                		mov.L	4[r10], r5
 1334 003a 62 25                   		add	#2, r5
 1335 003c FE 65 44                		mov.L	[r5,r4], r4
 1336                             		.loc 2 4887 31
 1337 003f ED A5 02                		mov.L	8[r10], r5
 1338 0042 EF 47                   		mov.L	r4, r7
 1339 0044 FD 60 57                		shlr	r5, r7
 1340 0047 EF 75                   		mov.L	r7, r5
 1341                             		.loc 2 4887 13
 1342 0049 64 15                   		and	#1, r5
 1343 004b E3 A5                   		mov.L	r5, [r10]
 1344                             	.L110:
4888:../src/wolfcrypt/src/sp_int.c ****     }
4889:../src/wolfcrypt/src/sp_int.c **** 
4890:../src/wolfcrypt/src/sp_int.c ****     return ret;
 1345                             		.loc 2 4890 12
 1346 004d EC A5                   		mov.L	[r10], r5
4891:../src/wolfcrypt/src/sp_int.c **** }
 1347                             		.loc 2 4891 1
 1348 004f EF 51                   		mov.L	r5, r1
 1349 0051 3F 7A 09                		rtsd	#36, r7-r10
 1350                             	.LFE60:
 1352                             		.section	.text.sp_count_bits,"ax",@progbits
 1353                             		.global	_sp_count_bits
 1355                             	_sp_count_bits:
 1356                             	.LFB61:
4892:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_RSA_VERIFY_ONLY */
4893:../src/wolfcrypt/src/sp_int.c **** 
4894:../src/wolfcrypt/src/sp_int.c **** /* Count the number of bits in the multi-precision number.
4895:../src/wolfcrypt/src/sp_int.c ****  *
4896:../src/wolfcrypt/src/sp_int.c ****  * When a is not NULL, result is 0.
4897:../src/wolfcrypt/src/sp_int.c ****  *
4898:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer.
4899:../src/wolfcrypt/src/sp_int.c ****  *
4900:../src/wolfcrypt/src/sp_int.c ****  * @return  The number of bits in the number.
4901:../src/wolfcrypt/src/sp_int.c ****  */
4902:../src/wolfcrypt/src/sp_int.c **** int sp_count_bits(const sp_int* a)
4903:../src/wolfcrypt/src/sp_int.c **** {
 1357                             		.loc 2 4903 1
 1358 0000 7E AA                   		push.l	r10
 1359                             	.LCFI43:
 1360 0002 71 0A F4                		add	#-12, r0, r10
 1361                             	.LCFI44:
 1362 0005 EF A0                   		mov.L	r10, r0
 1363 0007 E7 A1 02                		mov.L	r1, 8[r10]
4904:../src/wolfcrypt/src/sp_int.c ****     int r = 0;
 1364                             		.loc 2 4904 9
 1365 000a F8 A6 00                		mov.L	#0, [r10]
4905:../src/wolfcrypt/src/sp_int.c **** 
4906:../src/wolfcrypt/src/sp_int.c ****     if (a != NULL) {
 1366                             		.loc 2 4906 8
 1367 000d ED A5 02                		mov.L	8[r10], r5
 1368 0010 61 05                   		cmp	#0, r5
 1369 0012 3A 84 00                		beq	.L113
4907:../src/wolfcrypt/src/sp_int.c ****         r = a->used - 1;
 1370                             		.loc 2 4907 14
 1371 0015 ED A5 02                		mov.L	8[r10], r5
 1372 0018 EC 55                   		mov.L	[r5], r5
 1373                             		.loc 2 4907 11
 1374 001a 60 15                   		sub	#1, r5
 1375 001c E3 A5                   		mov.L	r5, [r10]
4908:../src/wolfcrypt/src/sp_int.c ****         while ((r >= 0) && (a->dp[r] == 0)) {
 1376                             		.loc 2 4908 15
 1377 001e 0F                      		bra	.L114
 1378                             	.L116:
4909:../src/wolfcrypt/src/sp_int.c ****             r--;
 1379                             		.loc 2 4909 14
 1380 001f EC A5                   		mov.L	[r10], r5
 1381 0021 60 15                   		sub	#1, r5
 1382 0023 E3 A5                   		mov.L	r5, [r10]
 1383                             	.L114:
4908:../src/wolfcrypt/src/sp_int.c ****         while ((r >= 0) && (a->dp[r] == 0)) {
 1384                             		.loc 2 4908 15
 1385 0025 EC A5                   		mov.L	[r10], r5
 1386 0027 61 05                   		cmp	#0, r5
 1387 0029 29 10                   		blt	.L115
4908:../src/wolfcrypt/src/sp_int.c ****         while ((r >= 0) && (a->dp[r] == 0)) {
 1388                             		.loc 2 4908 34 discriminator 1
 1389 002b ED A4 02                		mov.L	8[r10], r4
 1390 002e EC A5                   		mov.L	[r10], r5
 1391 0030 62 25                   		add	#2, r5
 1392 0032 FE 65 45                		mov.L	[r5,r4], r5
4908:../src/wolfcrypt/src/sp_int.c ****         while ((r >= 0) && (a->dp[r] == 0)) {
 1393                             		.loc 2 4908 25 discriminator 1
 1394 0035 61 05                   		cmp	#0, r5
 1395 0037 20 E8                   		beq	.L116
 1396                             	.L115:
4910:../src/wolfcrypt/src/sp_int.c ****         }
4911:../src/wolfcrypt/src/sp_int.c ****         if (r < 0) {
 1397                             		.loc 2 4911 12
 1398 0039 EC A5                   		mov.L	[r10], r5
 1399 003b 61 05                   		cmp	#0, r5
 1400 003d 28 07                   		bge	.L117
4912:../src/wolfcrypt/src/sp_int.c ****             r = 0;
 1401                             		.loc 2 4912 15
 1402 003f F8 A6 00                		mov.L	#0, [r10]
 1403 0042 2E 54                   		bra	.L113
 1404                             	.L117:
 1405                             	.LBB8:
4913:../src/wolfcrypt/src/sp_int.c ****         }
4914:../src/wolfcrypt/src/sp_int.c ****         else {
4915:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit d;
4916:../src/wolfcrypt/src/sp_int.c **** 
4917:../src/wolfcrypt/src/sp_int.c ****             d = a->dp[r];
 1406                             		.loc 2 4917 15
 1407 0044 ED A4 02                		mov.L	8[r10], r4
 1408 0047 EC A5                   		mov.L	[r10], r5
 1409 0049 62 25                   		add	#2, r5
 1410 004b FE 65 45                		mov.L	[r5,r4], r5
 1411 004e E7 A5 01                		mov.L	r5, 4[r10]
4918:../src/wolfcrypt/src/sp_int.c ****             r *= SP_WORD_SIZE;
 1412                             		.loc 2 4918 15
 1413 0051 EC A5                   		mov.L	[r10], r5
 1414 0053 6C 55                   		shll	#5, r5
 1415 0055 E3 A5                   		mov.L	r5, [r10]
4919:../src/wolfcrypt/src/sp_int.c ****             if (d > SP_HALF_MAX) {
 1416                             		.loc 2 4919 16
 1417 0057 ED A5 01                		mov.L	4[r10], r5
 1418 005a 77 05 FF FF 00          		cmp	#0xffff, r5
 1419 005f 25 30                   		bleu	.L121
4920:../src/wolfcrypt/src/sp_int.c ****                 r += SP_WORD_SIZE;
 1420                             		.loc 2 4920 19
 1421 0061 EC A5                   		mov.L	[r10], r5
 1422 0063 71 55 20                		add	#32, r5
 1423 0066 E3 A5                   		mov.L	r5, [r10]
4921:../src/wolfcrypt/src/sp_int.c ****                 while ((d & ((sp_int_digit)1 << (SP_WORD_SIZE - 1))) == 0) {
 1424                             		.loc 2 4921 23
 1425 0068 2E 10                   		bra	.L119
 1426                             	.L120:
4922:../src/wolfcrypt/src/sp_int.c ****                     r--;
 1427                             		.loc 2 4922 22
 1428 006a EC A5                   		mov.L	[r10], r5
 1429 006c 60 15                   		sub	#1, r5
 1430 006e E3 A5                   		mov.L	r5, [r10]
4923:../src/wolfcrypt/src/sp_int.c ****                     d <<= 1;
 1431                             		.loc 2 4923 23
 1432 0070 ED A5 01                		mov.L	4[r10], r5
 1433 0073 4B 55                   		add	r5, r5
 1434 0075 E7 A5 01                		mov.L	r5, 4[r10]
 1435                             	.L119:
4921:../src/wolfcrypt/src/sp_int.c ****                 while ((d & ((sp_int_digit)1 << (SP_WORD_SIZE - 1))) == 0) {
 1436                             		.loc 2 4921 70
 1437 0078 ED A5 01                		mov.L	4[r10], r5
4921:../src/wolfcrypt/src/sp_int.c ****                 while ((d & ((sp_int_digit)1 << (SP_WORD_SIZE - 1))) == 0) {
 1438                             		.loc 2 4921 23
 1439 007b 61 05                   		cmp	#0, r5
 1440 007d 28 ED                   		bge	.L120
 1441 007f 2E 17                   		bra	.L113
 1442                             	.L122:
4924:../src/wolfcrypt/src/sp_int.c ****                 }
4925:../src/wolfcrypt/src/sp_int.c ****             }
4926:../src/wolfcrypt/src/sp_int.c ****             else {
4927:../src/wolfcrypt/src/sp_int.c ****                 while (d != 0) {
4928:../src/wolfcrypt/src/sp_int.c ****                     r++;
 1443                             		.loc 2 4928 22
 1444 0081 EC A5                   		mov.L	[r10], r5
 1445 0083 62 15                   		add	#1, r5
 1446 0085 E3 A5                   		mov.L	r5, [r10]
4929:../src/wolfcrypt/src/sp_int.c ****                     d >>= 1;
 1447                             		.loc 2 4929 23
 1448 0087 ED A5 01                		mov.L	4[r10], r5
 1449 008a 68 15                   		shlr	#1, r5
 1450 008c E7 A5 01                		mov.L	r5, 4[r10]
 1451                             	.L121:
4927:../src/wolfcrypt/src/sp_int.c ****                     r++;
 1452                             		.loc 2 4927 23
 1453 008f ED A5 01                		mov.L	4[r10], r5
 1454 0092 61 05                   		cmp	#0, r5
 1455 0094 21 ED                   		bne	.L122
 1456                             		.balign 8,3,1
 1457                             	.L113:
 1458                             	.LBE8:
4930:../src/wolfcrypt/src/sp_int.c ****                 }
4931:../src/wolfcrypt/src/sp_int.c ****             }
4932:../src/wolfcrypt/src/sp_int.c ****         }
4933:../src/wolfcrypt/src/sp_int.c ****     }
4934:../src/wolfcrypt/src/sp_int.c **** 
4935:../src/wolfcrypt/src/sp_int.c ****     return r;
 1459                             		.loc 2 4935 12
 1460 0096 EC A5                   		mov.L	[r10], r5
4936:../src/wolfcrypt/src/sp_int.c **** }
 1461                             		.loc 2 4936 1
 1462 0098 EF 51                   		mov.L	r5, r1
 1463 009a 3F AA 04                		rtsd	#16, r10-r10
 1464                             	.LFE61:
 1466 009d FC 13 00                		.section	.rodata.sp_lnz,"a"
 1467                             		.balign 4
 1470                             	_sp_lnz:
 1471 0000 04 00 00 00             		.long	4
 1472 0004 00 00 00 00             		.long	0
 1473 0008 01 00 00 00             		.long	1
 1474 000c 00 00 00 00             		.long	0
 1475 0010 02 00 00 00             		.long	2
 1476 0014 00 00 00 00             		.long	0
 1477 0018 01 00 00 00             		.long	1
 1478 001c 00 00 00 00             		.long	0
 1479 0020 03 00 00 00             		.long	3
 1480 0024 00 00 00 00             		.long	0
 1481 0028 01 00 00 00             		.long	1
 1482 002c 00 00 00 00             		.long	0
 1483 0030 02 00 00 00             		.long	2
 1484 0034 00 00 00 00             		.long	0
 1485 0038 01 00 00 00             		.long	1
 1486 003c 00 00 00 00             		.long	0
 1487                             		.section	.text.sp_cnt_lsb,"ax",@progbits
 1489                             	_sp_cnt_lsb:
 1490                             	.LFB62:
4937:../src/wolfcrypt/src/sp_int.c **** 
4938:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY) && \
4939:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_RSA_PUBLIC_ONLY)) || !defined(NO_DH) || \
4940:../src/wolfcrypt/src/sp_int.c ****     (defined(HAVE_ECC) && defined(FP_ECC)) || \
4941:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && defined(WOLFSSL_KEY_GEN))
4942:../src/wolfcrypt/src/sp_int.c **** 
4943:../src/wolfcrypt/src/sp_int.c **** /* Number of entries in array of number of least significant zero bits. */
4944:../src/wolfcrypt/src/sp_int.c **** #define SP_LNZ_CNT      16
4945:../src/wolfcrypt/src/sp_int.c **** /* Number of bits the array checks. */
4946:../src/wolfcrypt/src/sp_int.c **** #define SP_LNZ_BITS     4
4947:../src/wolfcrypt/src/sp_int.c **** /* Mask to apply to check with array. */
4948:../src/wolfcrypt/src/sp_int.c **** #define SP_LNZ_MASK     0xf
4949:../src/wolfcrypt/src/sp_int.c **** /* Number of least significant zero bits in first SP_LNZ_CNT numbers. */
4950:../src/wolfcrypt/src/sp_int.c **** static const int sp_lnz[SP_LNZ_CNT] = {
4951:../src/wolfcrypt/src/sp_int.c ****    4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0
4952:../src/wolfcrypt/src/sp_int.c **** };
4953:../src/wolfcrypt/src/sp_int.c **** 
4954:../src/wolfcrypt/src/sp_int.c **** /* Count the number of least significant zero bits.
4955:../src/wolfcrypt/src/sp_int.c ****  *
4956:../src/wolfcrypt/src/sp_int.c ****  * When a is not NULL, result is 0.
4957:../src/wolfcrypt/src/sp_int.c ****  *
4958:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to use.
4959:../src/wolfcrypt/src/sp_int.c ****  *
4960:../src/wolfcrypt/src/sp_int.c ****  * @return  Number of leas significant zero bits.
4961:../src/wolfcrypt/src/sp_int.c ****  */
4962:../src/wolfcrypt/src/sp_int.c **** #if !defined(HAVE_ECC) || !defined(HAVE_COMP_KEY)
4963:../src/wolfcrypt/src/sp_int.c **** static
4964:../src/wolfcrypt/src/sp_int.c **** #endif /* !HAVE_ECC || HAVE_COMP_KEY */
4965:../src/wolfcrypt/src/sp_int.c **** int sp_cnt_lsb(sp_int* a)
4966:../src/wolfcrypt/src/sp_int.c **** {
 1491                             		.loc 2 4966 1
 1492 0000 6E 7A                   		pushm	r7-r10
 1493                             	.LCFI45:
 1494 0002 71 0A EC                		add	#-20, r0, r10
 1495                             	.LCFI46:
 1496 0005 EF A0                   		mov.L	r10, r0
 1497 0007 E7 A1 04                		mov.L	r1, 16[r10]
4967:../src/wolfcrypt/src/sp_int.c ****     int bc = 0;
 1498                             		.loc 2 4967 9
 1499 000a F8 A6 00                		mov.L	#0, [r10]
4968:../src/wolfcrypt/src/sp_int.c **** 
4969:../src/wolfcrypt/src/sp_int.c ****     if ((a != NULL) && (!sp_iszero(a))) {
 1500                             		.loc 2 4969 8
 1501 000d ED A5 04                		mov.L	16[r10], r5
 1502 0010 61 05                   		cmp	#0, r5
 1503 0012 3A 90 00                		beq	.L125
 1504                             		.loc 2 4969 26 discriminator 1
 1505 0015 ED A5 04                		mov.L	16[r10], r5
 1506 0018 EC 55                   		mov.L	[r5], r5
 1507                             		.loc 2 4969 21 discriminator 1
 1508 001a 61 05                   		cmp	#0, r5
 1509 001c 3A 86 00                		beq	.L125
 1510                             	.LBB9:
4970:../src/wolfcrypt/src/sp_int.c ****         int i;
4971:../src/wolfcrypt/src/sp_int.c ****         int j;
4972:../src/wolfcrypt/src/sp_int.c ****         int cnt = 0;
 1511                             		.loc 2 4972 13
 1512 001f F9 A6 03 00             		mov.L	#0, 12[r10]
4973:../src/wolfcrypt/src/sp_int.c **** 
4974:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < a->used && a->dp[i] == 0; i++, cnt += SP_WORD_SIZE) {
 1513                             		.loc 2 4974 16
 1514 0023 F9 A6 01 00             		mov.L	#0, 4[r10]
 1515                             		.loc 2 4974 9
 1516 0027 2E 13                   		bra	.L126
 1517                             	.L128:
 1518                             		.loc 2 4974 52 discriminator 4
 1519 0029 ED A5 01                		mov.L	4[r10], r5
 1520 002c 62 15                   		add	#1, r5
 1521 002e E7 A5 01                		mov.L	r5, 4[r10]
 1522                             		.loc 2 4974 60 discriminator 4
 1523 0031 ED A5 03                		mov.L	12[r10], r5
 1524 0034 71 55 20                		add	#32, r5
 1525 0037 E7 A5 03                		mov.L	r5, 12[r10]
 1526                             	.L126:
 1527                             		.loc 2 4974 26 discriminator 1
 1528 003a ED A5 04                		mov.L	16[r10], r5
 1529 003d EC 55                   		mov.L	[r5], r5
 1530                             		.loc 2 4974 9 discriminator 1
 1531 003f ED A4 01                		mov.L	4[r10], r4
 1532 0042 47 54                   		cmp	r5, r4
 1533 0044 28 11                   		bge	.L127
 1534                             		.loc 2 4974 41 discriminator 3
 1535 0046 ED A4 04                		mov.L	16[r10], r4
 1536 0049 ED A5 01                		mov.L	4[r10], r5
 1537 004c 62 25                   		add	#2, r5
 1538 004e FE 65 45                		mov.L	[r5,r4], r5
 1539                             		.loc 2 4974 33 discriminator 3
 1540 0051 61 05                   		cmp	#0, r5
 1541 0053 20 D6                   		beq	.L128
 1542                             	.L127:
4975:../src/wolfcrypt/src/sp_int.c ****         }
4976:../src/wolfcrypt/src/sp_int.c **** 
4977:../src/wolfcrypt/src/sp_int.c ****         for (j = 0; j < SP_WORD_SIZE; j += SP_LNZ_BITS) {
 1543                             		.loc 2 4977 16
 1544 0055 F9 A6 02 00             		mov.L	#0, 8[r10]
 1545                             		.loc 2 4977 9
 1546 0059 2E 41                   		bra	.L129
 1547                             	.L131:
4978:../src/wolfcrypt/src/sp_int.c ****             bc = sp_lnz[(a->dp[i] >> j) & SP_LNZ_MASK];
 1548                             		.loc 2 4978 31
 1549 005b ED A4 04                		mov.L	16[r10], r4
 1550 005e ED A5 01                		mov.L	4[r10], r5
 1551 0061 62 25                   		add	#2, r5
 1552 0063 FE 65 44                		mov.L	[r5,r4], r4
 1553                             		.loc 2 4978 35
 1554 0066 ED A5 02                		mov.L	8[r10], r5
 1555 0069 EF 47                   		mov.L	r4, r7
 1556 006b FD 60 57                		shlr	r5, r7
 1557 006e EF 75                   		mov.L	r7, r5
 1558                             		.loc 2 4978 41
 1559 0070 64 F5                   		and	#15, r5
 1560                             		.loc 2 4978 16
 1561 0072 FB 42 00 00 00 00       		mov.L	#_sp_lnz, r4
 1562 0078 FE 65 45                		mov.L	[r5,r4], r5
 1563 007b E3 A5                   		mov.L	r5, [r10]
4979:../src/wolfcrypt/src/sp_int.c ****             if (bc != 4) {
 1564                             		.loc 2 4979 16
 1565 007d EC A5                   		mov.L	[r10], r5
 1566 007f 61 45                   		cmp	#4, r5
 1567 0081 20 11                   		beq	.L130
4980:../src/wolfcrypt/src/sp_int.c ****                 bc += cnt + j;
 1568                             		.loc 2 4980 27
 1569 0083 ED A5 03                		mov.L	12[r10], r5
 1570 0086 06 89 A5 02             		add	8[r10].L, r5
 1571                             		.loc 2 4980 20
 1572 008a EC A4                   		mov.L	[r10], r4
 1573 008c 4B 45                   		add	r4, r5
 1574 008e E3 A5                   		mov.L	r5, [r10]
4981:../src/wolfcrypt/src/sp_int.c ****                 break;
 1575                             		.loc 2 4981 17
 1576 0090 2E 12                   		bra	.L125
 1577                             	.L130:
4977:../src/wolfcrypt/src/sp_int.c ****             bc = sp_lnz[(a->dp[i] >> j) & SP_LNZ_MASK];
 1578                             		.loc 2 4977 41 discriminator 2
 1579 0092 ED A5 02                		mov.L	8[r10], r5
 1580 0095 62 45                   		add	#4, r5
 1581 0097 E7 A5 02                		mov.L	r5, 8[r10]
 1582                             	.L129:
4977:../src/wolfcrypt/src/sp_int.c ****             bc = sp_lnz[(a->dp[i] >> j) & SP_LNZ_MASK];
 1583                             		.loc 2 4977 9 discriminator 1
 1584 009a ED A5 02                		mov.L	8[r10], r5
 1585 009d 75 55 1F                		cmp	#31, r5
 1586 00a0 2B BB                   		ble	.L131
 1587                             		.balign 8,3,1
 1588                             	.L125:
 1589                             	.LBE9:
4982:../src/wolfcrypt/src/sp_int.c ****             }
4983:../src/wolfcrypt/src/sp_int.c ****         }
4984:../src/wolfcrypt/src/sp_int.c ****     }
4985:../src/wolfcrypt/src/sp_int.c **** 
4986:../src/wolfcrypt/src/sp_int.c ****     return bc;
 1590                             		.loc 2 4986 12
 1591 00a2 EC A5                   		mov.L	[r10], r5
4987:../src/wolfcrypt/src/sp_int.c **** }
 1592                             		.loc 2 4987 1
 1593 00a4 EF 51                   		mov.L	r5, r1
 1594 00a6 3F 7A 09                		rtsd	#36, r7-r10
 1595                             	.LFE62:
 1597 00a9 FD 70 40 00 00 00 80    		.section	.text.sp_leading_bit,"ax",@progbits
 1598                             		.global	_sp_leading_bit
 1600                             	_sp_leading_bit:
 1601                             	.LFB63:
4988:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_HAVE_SP_DH || (HAVE_ECC && FP_ECC) */
4989:../src/wolfcrypt/src/sp_int.c **** 
4990:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_RSA_VERIFY_ONLY) || \
4991:../src/wolfcrypt/src/sp_int.c ****     (defined(WOLFSSL_SP_MATH_ALL) && !defined(NO_ASN))
4992:../src/wolfcrypt/src/sp_int.c **** /* Determine if the most significant byte of the encoded multi-precision number
4993:../src/wolfcrypt/src/sp_int.c ****  * has the top bit set.
4994:../src/wolfcrypt/src/sp_int.c ****  *
4995:../src/wolfcrypt/src/sp_int.c ****  * When A is NULL, result is 0.
4996:../src/wolfcrypt/src/sp_int.c ****  *
4997:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer.
4998:../src/wolfcrypt/src/sp_int.c ****  *
4999:../src/wolfcrypt/src/sp_int.c ****  * @return  1 when the top bit of top byte is set.
5000:../src/wolfcrypt/src/sp_int.c ****  * @return  0 when the top bit of top byte is not set.
5001:../src/wolfcrypt/src/sp_int.c ****  */
5002:../src/wolfcrypt/src/sp_int.c **** int sp_leading_bit(sp_int* a)
5003:../src/wolfcrypt/src/sp_int.c **** {
 1602                             		.loc 2 5003 1
 1603 0000 7E AA                   		push.l	r10
 1604                             	.LCFI47:
 1605 0002 71 0A F4                		add	#-12, r0, r10
 1606                             	.LCFI48:
 1607 0005 EF A0                   		mov.L	r10, r0
 1608 0007 E7 A1 02                		mov.L	r1, 8[r10]
5004:../src/wolfcrypt/src/sp_int.c ****     int bit = 0;
 1609                             		.loc 2 5004 9
 1610 000a F8 A6 00                		mov.L	#0, [r10]
5005:../src/wolfcrypt/src/sp_int.c **** 
5006:../src/wolfcrypt/src/sp_int.c ****     if ((a != NULL) && (a->used > 0)) {
 1611                             		.loc 2 5006 8
 1612 000d ED A5 02                		mov.L	8[r10], r5
 1613 0010 61 05                   		cmp	#0, r5
 1614 0012 20 35                   		beq	.L134
 1615                             		.loc 2 5006 26 discriminator 1
 1616 0014 ED A5 02                		mov.L	8[r10], r5
 1617 0017 EC 55                   		mov.L	[r5], r5
 1618                             		.loc 2 5006 21 discriminator 1
 1619 0019 61 05                   		cmp	#0, r5
 1620 001b 2B 2C                   		ble	.L134
 1621                             	.LBB10:
5007:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit d = a->dp[a->used - 1];
 1622                             		.loc 2 5007 33
 1623 001d ED A5 02                		mov.L	8[r10], r5
 1624 0020 EC 55                   		mov.L	[r5], r5
 1625                             		.loc 2 5007 40
 1626 0022 60 15                   		sub	#1, r5
 1627                             		.loc 2 5007 22
 1628 0024 ED A4 02                		mov.L	8[r10], r4
 1629 0027 62 25                   		add	#2, r5
 1630 0029 FE 65 45                		mov.L	[r5,r4], r5
 1631 002c E7 A5 01                		mov.L	r5, 4[r10]
5008:../src/wolfcrypt/src/sp_int.c ****     #if SP_WORD_SIZE > 8
5009:../src/wolfcrypt/src/sp_int.c ****         while (d > (sp_int_digit)0xff) {
 1632                             		.loc 2 5009 15
 1633 002f 09                      		bra	.L135
 1634                             	.L136:
5010:../src/wolfcrypt/src/sp_int.c ****             d >>= 8;
 1635                             		.loc 2 5010 15
 1636 0030 ED A5 01                		mov.L	4[r10], r5
 1637 0033 68 85                   		shlr	#8, r5
 1638 0035 E7 A5 01                		mov.L	r5, 4[r10]
 1639                             	.L135:
5009:../src/wolfcrypt/src/sp_int.c ****             d >>= 8;
 1640                             		.loc 2 5009 15
 1641 0038 ED A5 01                		mov.L	4[r10], r5
 1642 003b 75 55 FF                		cmp	#0xff, r5
 1643 003e 24 F2                   		bgtu	.L136
5011:../src/wolfcrypt/src/sp_int.c ****         }
5012:../src/wolfcrypt/src/sp_int.c ****     #endif
5013:../src/wolfcrypt/src/sp_int.c ****         bit = (int)(d >> 7);
 1644                             		.loc 2 5013 23
 1645 0040 ED A5 01                		mov.L	4[r10], r5
 1646 0043 68 75                   		shlr	#7, r5
 1647                             		.loc 2 5013 13
 1648 0045 E3 A5                   		mov.L	r5, [r10]
 1649                             	.L134:
 1650                             	.LBE10:
5014:../src/wolfcrypt/src/sp_int.c ****     }
5015:../src/wolfcrypt/src/sp_int.c **** 
5016:../src/wolfcrypt/src/sp_int.c ****     return bit;
 1651                             		.loc 2 5016 12
 1652 0047 EC A5                   		mov.L	[r10], r5
5017:../src/wolfcrypt/src/sp_int.c **** }
 1653                             		.loc 2 5017 1
 1654 0049 EF 51                   		mov.L	r5, r1
 1655 004b 3F AA 04                		rtsd	#16, r10-r10
 1656                             	.LFE63:
 1658                             		.section	.text.sp_set_bit,"ax",@progbits
 1659                             		.global	_sp_set_bit
 1661                             	_sp_set_bit:
 1662                             	.LFB64:
5018:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_RSA_VERIFY_ONLY */
5019:../src/wolfcrypt/src/sp_int.c **** 
5020:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || defined(WOLFSSL_HAVE_SP_DH) || \
5021:../src/wolfcrypt/src/sp_int.c ****     defined(HAVE_ECC) || defined(WOLFSSL_KEY_GEN) || defined(OPENSSL_EXTRA) || \
5022:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_RSA)
5023:../src/wolfcrypt/src/sp_int.c **** /* Set a bit of a: a |= 1 << i
5024:../src/wolfcrypt/src/sp_int.c ****  * The field 'used' is updated in a.
5025:../src/wolfcrypt/src/sp_int.c ****  *
5026:../src/wolfcrypt/src/sp_int.c ****  * @param  [in,out]  a  SP integer to set bit into.
5027:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]      i  Index of bit to set.
5028:../src/wolfcrypt/src/sp_int.c ****  *
5029:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
5030:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a is NULL or index is too large.
5031:../src/wolfcrypt/src/sp_int.c ****  */
5032:../src/wolfcrypt/src/sp_int.c **** int sp_set_bit(sp_int* a, int i)
5033:../src/wolfcrypt/src/sp_int.c **** {
 1663                             		.loc 2 5033 1
 1664 0000 6E 7A                   		pushm	r7-r10
 1665                             	.LCFI49:
 1666 0002 71 0A E8                		add	#-24, r0, r10
 1667                             	.LCFI50:
 1668 0005 EF A0                   		mov.L	r10, r0
 1669 0007 E7 A1 04                		mov.L	r1, 16[r10]
 1670 000a E7 A2 05                		mov.L	r2, 20[r10]
5034:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 1671                             		.loc 2 5034 9
 1672 000d F8 A6 00                		mov.L	#0, [r10]
5035:../src/wolfcrypt/src/sp_int.c ****     int w = (int)(i >> SP_WORD_SHIFT);
 1673                             		.loc 2 5035 9
 1674 0010 ED A5 05                		mov.L	20[r10], r5
 1675 0013 6A 55                   		shar	#5, r5
 1676 0015 E7 A5 02                		mov.L	r5, 8[r10]
5036:../src/wolfcrypt/src/sp_int.c **** 
5037:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (w >= a->size)) {
 1677                             		.loc 2 5037 8
 1678 0018 ED A5 04                		mov.L	16[r10], r5
 1679 001b 61 05                   		cmp	#0, r5
 1680 001d 20 0E                   		beq	.L139
 1681                             		.loc 2 5037 31 discriminator 1
 1682 001f ED A5 04                		mov.L	16[r10], r5
 1683 0022 A8 5D                   		mov.L	4[r5], r5
 1684                             		.loc 2 5037 21 discriminator 1
 1685 0024 ED A4 02                		mov.L	8[r10], r4
 1686 0027 47 54                   		cmp	r5, r4
 1687 0029 29 07                   		blt	.L140
 1688                             	.L139:
5038:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 1689                             		.loc 2 5038 13
 1690 002b F8 A6 FD                		mov.L	#-3, [r10]
 1691 002e 2E 70                   		bra	.L141
 1692                             	.L140:
 1693                             	.LBB11:
5039:../src/wolfcrypt/src/sp_int.c ****     }
5040:../src/wolfcrypt/src/sp_int.c ****     else {
5041:../src/wolfcrypt/src/sp_int.c ****         int s = (int)(i & (SP_WORD_SIZE - 1));
 1694                             		.loc 2 5041 13
 1695 0030 ED A5 05                		mov.L	20[r10], r5
 1696 0033 75 25 1F                		and	#31, r5
 1697 0036 E7 A5 03                		mov.L	r5, 12[r10]
5042:../src/wolfcrypt/src/sp_int.c ****         int j;
5043:../src/wolfcrypt/src/sp_int.c **** 
5044:../src/wolfcrypt/src/sp_int.c ****         for (j = a->used; j <= w; j++) {
 1698                             		.loc 2 5044 16
 1699 0039 ED A5 04                		mov.L	16[r10], r5
 1700 003c EC 55                   		mov.L	[r5], r5
 1701 003e E7 A5 01                		mov.L	r5, 4[r10]
 1702                             		.loc 2 5044 9
 1703 0041 2E 17                   		bra	.L142
 1704                             	.L143:
5045:../src/wolfcrypt/src/sp_int.c ****             a->dp[j] = 0;
 1705                             		.loc 2 5045 22 discriminator 3
 1706 0043 ED A4 04                		mov.L	16[r10], r4
 1707 0046 ED A5 01                		mov.L	4[r10], r5
 1708 0049 62 25                   		add	#2, r5
 1709 004b 66 07                   		mov.L	#0, r7
 1710 004d FE 25 47                		mov.L	r7, [r5,r4]
5044:../src/wolfcrypt/src/sp_int.c ****             a->dp[j] = 0;
 1711                             		.loc 2 5044 36 discriminator 3
 1712 0050 ED A5 01                		mov.L	4[r10], r5
 1713 0053 62 15                   		add	#1, r5
 1714 0055 E7 A5 01                		mov.L	r5, 4[r10]
 1715                             	.L142:
5044:../src/wolfcrypt/src/sp_int.c ****             a->dp[j] = 0;
 1716                             		.loc 2 5044 9 discriminator 1
 1717 0058 ED A4 01                		mov.L	4[r10], r4
 1718 005b ED A5 02                		mov.L	8[r10], r5
 1719 005e 47 54                   		cmp	r5, r4
 1720 0060 2B E3                   		ble	.L143
5046:../src/wolfcrypt/src/sp_int.c ****         }
5047:../src/wolfcrypt/src/sp_int.c ****         a->dp[w] |= (sp_int_digit)1 << s;
 1721                             		.loc 2 5047 18
 1722 0062 ED A4 04                		mov.L	16[r10], r4
 1723 0065 ED A5 02                		mov.L	8[r10], r5
 1724 0068 62 25                   		add	#2, r5
 1725 006a FE 65 44                		mov.L	[r5,r4], r4
 1726                             		.loc 2 5047 37
 1727 006d 66 13                   		mov.L	#1, r3
 1728 006f ED A5 03                		mov.L	12[r10], r5
 1729 0072 EF 37                   		mov.L	r3, r7
 1730 0074 FD 62 57                		shll	r5, r7
 1731 0077 EF 75                   		mov.L	r7, r5
 1732                             		.loc 2 5047 18
 1733 0079 FF 53 54                		or	r5, r4, r3
 1734 007c ED A4 04                		mov.L	16[r10], r4
 1735 007f ED A5 02                		mov.L	8[r10], r5
 1736 0082 62 25                   		add	#2, r5
 1737 0084 FE 25 43                		mov.L	r3, [r5,r4]
5048:../src/wolfcrypt/src/sp_int.c ****         if (a->used <= w) {
 1738                             		.loc 2 5048 14
 1739 0087 ED A5 04                		mov.L	16[r10], r5
 1740 008a EC 55                   		mov.L	[r5], r5
 1741                             		.loc 2 5048 12
 1742 008c ED A4 02                		mov.L	8[r10], r4
 1743 008f 47 54                   		cmp	r5, r4
 1744 0091 29 0D                   		blt	.L141
5049:../src/wolfcrypt/src/sp_int.c ****             a->used = w + 1;
 1745                             		.loc 2 5049 25
 1746 0093 ED A5 02                		mov.L	8[r10], r5
 1747 0096 71 54 01                		add	#1, r5, r4
 1748                             		.loc 2 5049 21
 1749 0099 ED A5 04                		mov.L	16[r10], r5
 1750 009c E3 54                   		mov.L	r4, [r5]
 1751                             	.L141:
 1752                             	.LBE11:
5050:../src/wolfcrypt/src/sp_int.c ****         }
5051:../src/wolfcrypt/src/sp_int.c ****     }
5052:../src/wolfcrypt/src/sp_int.c ****     return err;
 1753                             		.loc 2 5052 12
 1754 009e EC A5                   		mov.L	[r10], r5
5053:../src/wolfcrypt/src/sp_int.c **** }
 1755                             		.loc 2 5053 1
 1756 00a0 EF 51                   		mov.L	r5, r1
 1757 00a2 3F 7A 0A                		rtsd	#40, r7-r10
 1758                             	.LFE64:
 1760                             		.section	.text.sp_2expt,"ax",@progbits
 1761                             		.global	_sp_2expt
 1763                             	_sp_2expt:
 1764                             	.LFB65:
5054:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_HAVE_SP_DH || HAVE_ECC ||
5055:../src/wolfcrypt/src/sp_int.c ****         * WOLFSSL_KEY_GEN || OPENSSL_EXTRA || !NO_RSA */
5056:../src/wolfcrypt/src/sp_int.c **** 
5057:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
5058:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_KEY_GEN) || !defined(NO_DH)
5059:../src/wolfcrypt/src/sp_int.c **** /* Exponentiate 2 to the power of e: a = 2^e
5060:../src/wolfcrypt/src/sp_int.c ****  * This is done by setting the 'e'th bit.
5061:../src/wolfcrypt/src/sp_int.c ****  *
5062:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  a  SP integer to hold result.
5063:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e  Exponent.
5064:../src/wolfcrypt/src/sp_int.c ****  *
5065:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
5066:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a is NULL or 2^exponent is too large.
5067:../src/wolfcrypt/src/sp_int.c ****  */
5068:../src/wolfcrypt/src/sp_int.c **** int sp_2expt(sp_int* a, int e)
5069:../src/wolfcrypt/src/sp_int.c **** {
 1765                             		.loc 2 5069 1
 1766 0000 7E AA                   		push.l	r10
 1767                             	.LCFI51:
 1768 0002 71 0A F4                		add	#-12, r0, r10
 1769                             	.LCFI52:
 1770 0005 EF A0                   		mov.L	r10, r0
 1771 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1772 000a E7 A2 02                		mov.L	r2, 8[r10]
5070:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 1773                             		.loc 2 5070 9
 1774 000d F8 A6 00                		mov.L	#0, [r10]
5071:../src/wolfcrypt/src/sp_int.c **** 
5072:../src/wolfcrypt/src/sp_int.c ****     if (a == NULL) {
 1775                             		.loc 2 5072 8
 1776 0010 ED A5 01                		mov.L	4[r10], r5
 1777 0013 61 05                   		cmp	#0, r5
 1778 0015 1C                      		bne	.L146
5073:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 1779                             		.loc 2 5073 13
 1780 0016 F8 A6 FD                		mov.L	#-3, [r10]
 1781                             	.L146:
5074:../src/wolfcrypt/src/sp_int.c ****     }
5075:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 1782                             		.loc 2 5075 8
 1783 0019 EC A5                   		mov.L	[r10], r5
 1784 001b 61 05                   		cmp	#0, r5
 1785 001d 21 15                   		bne	.L147
5076:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(a);
 1786                             		.loc 2 5076 9
 1787 001f ED A1 01                		mov.L	4[r10], r1
 1788 0022 05 00 00 00             		bsr	__sp_zero
5077:../src/wolfcrypt/src/sp_int.c ****         err = sp_set_bit(a, e);
 1789                             		.loc 2 5077 15
 1790 0026 ED A2 02                		mov.L	8[r10], r2
 1791 0029 ED A1 01                		mov.L	4[r10], r1
 1792 002c 05 00 00 00             		bsr	_sp_set_bit
 1793 0030 E3 A1                   		mov.L	r1, [r10]
 1794                             	.L147:
5078:../src/wolfcrypt/src/sp_int.c ****     }
5079:../src/wolfcrypt/src/sp_int.c **** 
5080:../src/wolfcrypt/src/sp_int.c ****     return err;
 1795                             		.loc 2 5080 12
 1796 0032 EC A5                   		mov.L	[r10], r5
5081:../src/wolfcrypt/src/sp_int.c **** }
 1797                             		.loc 2 5081 1
 1798 0034 EF 51                   		mov.L	r5, r1
 1799 0036 3F AA 04                		rtsd	#16, r10-r10
 1800                             	.LFE65:
 1802                             		.section	.text.sp_set,"ax",@progbits
 1803                             		.global	_sp_set
 1805                             	_sp_set:
 1806                             	.LFB66:
5082:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY) ||
5083:../src/wolfcrypt/src/sp_int.c ****         * WOLFSSL_KEY_GEN || !NO_DH */
5084:../src/wolfcrypt/src/sp_int.c **** 
5085:../src/wolfcrypt/src/sp_int.c **** /**********************
5086:../src/wolfcrypt/src/sp_int.c ****  * Digit/Long functions
5087:../src/wolfcrypt/src/sp_int.c ****  **********************/
5088:../src/wolfcrypt/src/sp_int.c **** 
5089:../src/wolfcrypt/src/sp_int.c **** /* Set the multi-precision number to be the value of the digit.
5090:../src/wolfcrypt/src/sp_int.c ****  *
5091:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  a  SP integer to become number.
5092:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   d  Digit to be set.
5093:../src/wolfcrypt/src/sp_int.c ****  *
5094:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
5095:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a is NULL.
5096:../src/wolfcrypt/src/sp_int.c ****  */
5097:../src/wolfcrypt/src/sp_int.c **** int sp_set(sp_int* a, sp_int_digit d)
5098:../src/wolfcrypt/src/sp_int.c **** {
 1807                             		.loc 2 5098 1
 1808 0000 7E AA                   		push.l	r10
 1809                             	.LCFI53:
 1810 0002 71 0A F4                		add	#-12, r0, r10
 1811                             	.LCFI54:
 1812 0005 EF A0                   		mov.L	r10, r0
 1813 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1814 000a E7 A2 02                		mov.L	r2, 8[r10]
5099:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 1815                             		.loc 2 5099 9
 1816 000d F8 A6 00                		mov.L	#0, [r10]
5100:../src/wolfcrypt/src/sp_int.c **** 
5101:../src/wolfcrypt/src/sp_int.c ****     if (a == NULL) {
 1817                             		.loc 2 5101 8
 1818 0010 ED A5 01                		mov.L	4[r10], r5
 1819 0013 61 05                   		cmp	#0, r5
 1820 0015 1C                      		bne	.L150
5102:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 1821                             		.loc 2 5102 13
 1822 0016 F8 A6 FD                		mov.L	#-3, [r10]
 1823                             	.L150:
5103:../src/wolfcrypt/src/sp_int.c ****     }
5104:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 1824                             		.loc 2 5104 8
 1825 0019 EC A5                   		mov.L	[r10], r5
 1826 001b 61 05                   		cmp	#0, r5
 1827 001d 21 19                   		bne	.L151
5105:../src/wolfcrypt/src/sp_int.c ****         /* gcc-11 reports out-of-bounds array access if the byte array backing
5106:../src/wolfcrypt/src/sp_int.c ****          * the sp_int* is smaller than sizeof(sp_int), as occurs when
5107:../src/wolfcrypt/src/sp_int.c ****          * WOLFSSL_SP_SMALL.
5108:../src/wolfcrypt/src/sp_int.c ****          */
5109:../src/wolfcrypt/src/sp_int.c ****         PRAGMA_GCC_DIAG_PUSH;
5110:../src/wolfcrypt/src/sp_int.c ****         PRAGMA_GCC("GCC diagnostic ignored \"-Warray-bounds\"");
5111:../src/wolfcrypt/src/sp_int.c ****         a->dp[0] = d;
 1828                             		.loc 2 5111 18
 1829 001f ED A5 01                		mov.L	4[r10], r5
 1830 0022 ED A4 02                		mov.L	8[r10], r4
 1831 0025 A0 D4                   		mov.L	r4, 8[r5]
5112:../src/wolfcrypt/src/sp_int.c ****         a->used = d > 0;
 1832                             		.loc 2 5112 21
 1833 0027 ED A5 02                		mov.L	8[r10], r5
 1834 002a 61 05                   		cmp	#0, r5
 1835 002c FC DB 51                		scne.L	r5
 1836 002f 5B 54                   		movu.B	r5, r4
 1837                             		.loc 2 5112 17
 1838 0031 ED A5 01                		mov.L	4[r10], r5
 1839 0034 E3 54                   		mov.L	r4, [r5]
 1840                             	.L151:
5113:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
5114:../src/wolfcrypt/src/sp_int.c ****         a->sign = MP_ZPOS;
5115:../src/wolfcrypt/src/sp_int.c ****     #endif
5116:../src/wolfcrypt/src/sp_int.c ****         PRAGMA_GCC_DIAG_POP;
5117:../src/wolfcrypt/src/sp_int.c ****     }
5118:../src/wolfcrypt/src/sp_int.c **** 
5119:../src/wolfcrypt/src/sp_int.c ****     return err;
 1841                             		.loc 2 5119 12
 1842 0036 EC A5                   		mov.L	[r10], r5
5120:../src/wolfcrypt/src/sp_int.c **** }
 1843                             		.loc 2 5120 1
 1844 0038 EF 51                   		mov.L	r5, r1
 1845 003a 3F AA 04                		rtsd	#16, r10-r10
 1846                             	.LFE66:
 1848                             		.section	.text.sp_set_int,"ax",@progbits
 1849                             		.global	_sp_set_int
 1851                             	_sp_set_int:
 1852                             	.LFB67:
5121:../src/wolfcrypt/src/sp_int.c **** 
5122:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || !defined(NO_RSA)
5123:../src/wolfcrypt/src/sp_int.c **** /* Set a number into the multi-precision number.
5124:../src/wolfcrypt/src/sp_int.c ****  *
5125:../src/wolfcrypt/src/sp_int.c ****  * Number may be larger than the size of a digit.
5126:../src/wolfcrypt/src/sp_int.c ****  *
5127:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  a  SP integer to set.
5128:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   n  Long value to set.
5129:../src/wolfcrypt/src/sp_int.c ****  *
5130:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
5131:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a is NULL.
5132:../src/wolfcrypt/src/sp_int.c ****  */
5133:../src/wolfcrypt/src/sp_int.c **** int sp_set_int(sp_int* a, unsigned long n)
5134:../src/wolfcrypt/src/sp_int.c **** {
 1853                             		.loc 2 5134 1
 1854 0000 7E AA                   		push.l	r10
 1855                             	.LCFI55:
 1856 0002 71 0A F4                		add	#-12, r0, r10
 1857                             	.LCFI56:
 1858 0005 EF A0                   		mov.L	r10, r0
 1859 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1860 000a E7 A2 02                		mov.L	r2, 8[r10]
5135:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 1861                             		.loc 2 5135 9
 1862 000d F8 A6 00                		mov.L	#0, [r10]
5136:../src/wolfcrypt/src/sp_int.c **** 
5137:../src/wolfcrypt/src/sp_int.c ****     if (a == NULL) {
 1863                             		.loc 2 5137 8
 1864 0010 ED A5 01                		mov.L	4[r10], r5
 1865 0013 61 05                   		cmp	#0, r5
 1866 0015 1C                      		bne	.L154
5138:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 1867                             		.loc 2 5138 13
 1868 0016 F8 A6 FD                		mov.L	#-3, [r10]
 1869                             	.L154:
5139:../src/wolfcrypt/src/sp_int.c ****     }
5140:../src/wolfcrypt/src/sp_int.c **** 
5141:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 1870                             		.loc 2 5141 8
 1871 0019 EC A5                   		mov.L	[r10], r5
 1872 001b 61 05                   		cmp	#0, r5
 1873 001d 21 19                   		bne	.L155
5142:../src/wolfcrypt/src/sp_int.c ****     #if SP_WORD_SIZE < SP_ULONG_BITS
5143:../src/wolfcrypt/src/sp_int.c ****         if (n <= (sp_int_digit)SP_DIGIT_MAX) {
5144:../src/wolfcrypt/src/sp_int.c ****     #endif
5145:../src/wolfcrypt/src/sp_int.c ****             a->dp[0] = (sp_int_digit)n;
 1874                             		.loc 2 5145 22
 1875 001f ED A5 01                		mov.L	4[r10], r5
 1876 0022 ED A4 02                		mov.L	8[r10], r4
 1877 0025 A0 D4                   		mov.L	r4, 8[r5]
5146:../src/wolfcrypt/src/sp_int.c ****             a->used = (n != 0);
 1878                             		.loc 2 5146 26
 1879 0027 ED A5 02                		mov.L	8[r10], r5
 1880 002a 61 05                   		cmp	#0, r5
 1881 002c FC DB 51                		scne.L	r5
 1882 002f 5B 54                   		movu.B	r5, r4
 1883                             		.loc 2 5146 21
 1884 0031 ED A5 01                		mov.L	4[r10], r5
 1885 0034 E3 54                   		mov.L	r4, [r5]
 1886                             	.L155:
5147:../src/wolfcrypt/src/sp_int.c ****     #if SP_WORD_SIZE < SP_ULONG_BITS
5148:../src/wolfcrypt/src/sp_int.c ****         }
5149:../src/wolfcrypt/src/sp_int.c ****         else {
5150:../src/wolfcrypt/src/sp_int.c ****             int i;
5151:../src/wolfcrypt/src/sp_int.c **** 
5152:../src/wolfcrypt/src/sp_int.c ****             for (i = 0; n > 0; i++,n >>= SP_WORD_SIZE) {
5153:../src/wolfcrypt/src/sp_int.c ****                 a->dp[i] = (sp_int_digit)n;
5154:../src/wolfcrypt/src/sp_int.c ****             }
5155:../src/wolfcrypt/src/sp_int.c ****             a->used = i;
5156:../src/wolfcrypt/src/sp_int.c ****         }
5157:../src/wolfcrypt/src/sp_int.c ****     #endif
5158:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
5159:../src/wolfcrypt/src/sp_int.c ****         a->sign = MP_ZPOS;
5160:../src/wolfcrypt/src/sp_int.c ****     #endif
5161:../src/wolfcrypt/src/sp_int.c ****     }
5162:../src/wolfcrypt/src/sp_int.c **** 
5163:../src/wolfcrypt/src/sp_int.c ****     return err;
 1887                             		.loc 2 5163 12
 1888 0036 EC A5                   		mov.L	[r10], r5
5164:../src/wolfcrypt/src/sp_int.c **** }
 1889                             		.loc 2 5164 1
 1890 0038 EF 51                   		mov.L	r5, r1
 1891 003a 3F AA 04                		rtsd	#16, r10-r10
 1892                             	.LFE67:
 1894                             		.section	.text.sp_cmp_d,"ax",@progbits
 1895                             		.global	_sp_cmp_d
 1897                             	_sp_cmp_d:
 1898                             	.LFB68:
5165:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || !NO_RSA  */
5166:../src/wolfcrypt/src/sp_int.c **** 
5167:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_RSA_VERIFY_ONLY) || \
5168:../src/wolfcrypt/src/sp_int.c ****     (defined(WOLFSSL_SP_MATH_ALL) && !defined(NO_DH))
5169:../src/wolfcrypt/src/sp_int.c **** /* Compare a one digit number with a multi-precision number.
5170:../src/wolfcrypt/src/sp_int.c ****  *
5171:../src/wolfcrypt/src/sp_int.c ****  * When a is NULL, MP_LT is returned.
5172:../src/wolfcrypt/src/sp_int.c ****  *
5173:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer to compare.
5174:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  d  Digit to compare with.
5175:../src/wolfcrypt/src/sp_int.c ****  *
5176:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_GT when a is greater than d.
5177:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_LT when a is less than d.
5178:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_EQ when a is equals d.
5179:../src/wolfcrypt/src/sp_int.c ****  */
5180:../src/wolfcrypt/src/sp_int.c **** int sp_cmp_d(sp_int* a, sp_int_digit d)
5181:../src/wolfcrypt/src/sp_int.c **** {
 1899                             		.loc 2 5181 1
 1900 0000 7E AA                   		push.l	r10
 1901                             	.LCFI57:
 1902 0002 71 0A F4                		add	#-12, r0, r10
 1903                             	.LCFI58:
 1904 0005 EF A0                   		mov.L	r10, r0
 1905 0007 E7 A1 01                		mov.L	r1, 4[r10]
 1906 000a E7 A2 02                		mov.L	r2, 8[r10]
5182:../src/wolfcrypt/src/sp_int.c ****     int ret = MP_EQ;
 1907                             		.loc 2 5182 9
 1908 000d F8 A6 00                		mov.L	#0, [r10]
5183:../src/wolfcrypt/src/sp_int.c **** 
5184:../src/wolfcrypt/src/sp_int.c ****     if (a == NULL) {
 1909                             		.loc 2 5184 8
 1910 0010 ED A5 01                		mov.L	4[r10], r5
 1911 0013 61 05                   		cmp	#0, r5
 1912 0015 1E                      		bne	.L158
5185:../src/wolfcrypt/src/sp_int.c ****         ret = MP_LT;
 1913                             		.loc 2 5185 13
 1914 0016 F8 A6 FF                		mov.L	#-1, [r10]
 1915 0019 2E 49                   		bra	.L159
 1916                             	.L158:
5186:../src/wolfcrypt/src/sp_int.c ****     }
5187:../src/wolfcrypt/src/sp_int.c ****     else
5188:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
5189:../src/wolfcrypt/src/sp_int.c ****     if (a->sign == MP_NEG) {
5190:../src/wolfcrypt/src/sp_int.c ****         ret = MP_LT;
5191:../src/wolfcrypt/src/sp_int.c ****     }
5192:../src/wolfcrypt/src/sp_int.c ****     else
5193:../src/wolfcrypt/src/sp_int.c **** #endif
5194:../src/wolfcrypt/src/sp_int.c ****     {
5195:../src/wolfcrypt/src/sp_int.c ****         /* special case for zero*/
5196:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 0) {
 1917                             		.loc 2 5196 14
 1918 001b ED A5 01                		mov.L	4[r10], r5
 1919 001e EC 55                   		mov.L	[r5], r5
 1920                             		.loc 2 5196 12
 1921 0020 61 05                   		cmp	#0, r5
 1922 0022 21 12                   		bne	.L160
5197:../src/wolfcrypt/src/sp_int.c ****             if (d == 0) {
 1923                             		.loc 2 5197 16
 1924 0024 ED A5 02                		mov.L	8[r10], r5
 1925 0027 61 05                   		cmp	#0, r5
 1926 0029 1E                      		bne	.L161
5198:../src/wolfcrypt/src/sp_int.c ****                 ret = MP_EQ;
 1927                             		.loc 2 5198 21
 1928 002a F8 A6 00                		mov.L	#0, [r10]
 1929 002d 2E 35                   		bra	.L159
 1930                             	.L161:
5199:../src/wolfcrypt/src/sp_int.c ****             }
5200:../src/wolfcrypt/src/sp_int.c ****             else {
5201:../src/wolfcrypt/src/sp_int.c ****                 ret = MP_LT;
 1931                             		.loc 2 5201 21
 1932 002f F8 A6 FF                		mov.L	#-1, [r10]
 1933 0032 2E 30                   		bra	.L159
 1934                             	.L160:
5202:../src/wolfcrypt/src/sp_int.c ****             }
5203:../src/wolfcrypt/src/sp_int.c ****         }
5204:../src/wolfcrypt/src/sp_int.c ****         else if (a->used > 1) {
 1935                             		.loc 2 5204 19
 1936 0034 ED A5 01                		mov.L	4[r10], r5
 1937 0037 EC 55                   		mov.L	[r5], r5
 1938                             		.loc 2 5204 17
 1939 0039 61 15                   		cmp	#1, r5
 1940 003b 2B 07                   		ble	.L163
5205:../src/wolfcrypt/src/sp_int.c ****             ret = MP_GT;
 1941                             		.loc 2 5205 17
 1942 003d F8 A6 01                		mov.L	#1, [r10]
 1943 0040 2E 22                   		bra	.L159
 1944                             	.L163:
5206:../src/wolfcrypt/src/sp_int.c ****         }
5207:../src/wolfcrypt/src/sp_int.c ****         else {
5208:../src/wolfcrypt/src/sp_int.c ****             if (a->dp[0] > d) {
 1945                             		.loc 2 5208 22
 1946 0042 ED A5 01                		mov.L	4[r10], r5
 1947 0045 A8 D5                   		mov.L	8[r5], r5
 1948                             		.loc 2 5208 16
 1949 0047 ED A4 02                		mov.L	8[r10], r4
 1950 004a 47 54                   		cmp	r5, r4
 1951 004c 22 07                   		bgeu	.L164
5209:../src/wolfcrypt/src/sp_int.c ****                 ret = MP_GT;
 1952                             		.loc 2 5209 21
 1953 004e F8 A6 01                		mov.L	#1, [r10]
 1954 0051 2E 11                   		bra	.L159
 1955                             	.L164:
5210:../src/wolfcrypt/src/sp_int.c ****             }
5211:../src/wolfcrypt/src/sp_int.c ****             else if (a->dp[0] < d) {
 1956                             		.loc 2 5211 27
 1957 0053 ED A5 01                		mov.L	4[r10], r5
 1958 0056 A8 D5                   		mov.L	8[r5], r5
 1959                             		.loc 2 5211 21
 1960 0058 ED A4 02                		mov.L	8[r10], r4
 1961 005b 47 54                   		cmp	r5, r4
 1962 005d 25 05                   		bleu	.L159
5212:../src/wolfcrypt/src/sp_int.c ****                 ret = MP_LT;
 1963                             		.loc 2 5212 21
 1964 005f F8 A6 FF                		mov.L	#-1, [r10]
 1965                             		.balign 8,3,1
 1966                             	.L159:
5213:../src/wolfcrypt/src/sp_int.c ****             }
5214:../src/wolfcrypt/src/sp_int.c ****         }
5215:../src/wolfcrypt/src/sp_int.c ****     }
5216:../src/wolfcrypt/src/sp_int.c **** 
5217:../src/wolfcrypt/src/sp_int.c ****     return ret;
 1967                             		.loc 2 5217 12
 1968 0062 EC A5                   		mov.L	[r10], r5
5218:../src/wolfcrypt/src/sp_int.c **** }
 1969                             		.loc 2 5218 1
 1970 0064 EF 51                   		mov.L	r5, r1
 1971 0066 3F AA 04                		rtsd	#16, r10-r10
 1972                             	.LFE68:
 1974 0069 FD 70 40 00 00 00 80    		.section	.text._sp_add_d,"ax",@progbits
 1976                             	__sp_add_d:
 1977                             	.LFB69:
5219:../src/wolfcrypt/src/sp_int.c **** #endif
5220:../src/wolfcrypt/src/sp_int.c **** 
5221:../src/wolfcrypt/src/sp_int.c **** #if !defined(NO_PWDBASED) || defined(WOLFSSL_KEY_GEN) || !defined(NO_DH) || \
5222:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_DSA) || \
5223:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
5224:../src/wolfcrypt/src/sp_int.c ****     defined(OPENSSL_EXTRA)
5225:../src/wolfcrypt/src/sp_int.c **** #define WOLFSSL_SP_ADD_D
5226:../src/wolfcrypt/src/sp_int.c **** #endif
5227:../src/wolfcrypt/src/sp_int.c **** #if (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
5228:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_DH) || defined(HAVE_ECC) || !defined(NO_DSA)
5229:../src/wolfcrypt/src/sp_int.c **** #define WOLFSSL_SP_SUB_D
5230:../src/wolfcrypt/src/sp_int.c **** #endif
5231:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && !defined(NO_RSA) && \
5232:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_RSA_VERIFY_ONLY)
5233:../src/wolfcrypt/src/sp_int.c **** #define WOLFSSL_SP_READ_RADIX_10
5234:../src/wolfcrypt/src/sp_int.c **** #endif
5235:../src/wolfcrypt/src/sp_int.c **** #if defined(HAVE_ECC) || !defined(NO_DSA) || defined(OPENSSL_EXTRA) || \
5236:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY) && \
5237:../src/wolfcrypt/src/sp_int.c ****      !defined(WOLFSSL_RSA_PUBLIC_ONLY))
5238:../src/wolfcrypt/src/sp_int.c **** #define WOLFSSL_SP_INVMOD
5239:../src/wolfcrypt/src/sp_int.c **** #endif
5240:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && defined(HAVE_ECC)
5241:../src/wolfcrypt/src/sp_int.c **** #define WOLFSSL_SP_INVMOD_MONT_CT
5242:../src/wolfcrypt/src/sp_int.c **** #endif
5243:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY) && \
5244:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_RSA_PUBLIC_ONLY)) || !defined(NO_DH) || \
5245:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && defined(WOLFSSL_KEY_GEN))
5246:../src/wolfcrypt/src/sp_int.c **** #define WOLFSSL_SP_PRIME_GEN
5247:../src/wolfcrypt/src/sp_int.c **** #endif
5248:../src/wolfcrypt/src/sp_int.c **** 
5249:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_ADD_D) || (defined(WOLFSSL_SP_INT_NEGATIVE) && \
5250:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_SP_SUB_D)) || defined(WOLFSSL_SP_READ_RADIX_10)
5251:../src/wolfcrypt/src/sp_int.c **** /* Add a one digit number to the multi-precision number.
5252:../src/wolfcrypt/src/sp_int.c ****  *
5253:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer be added to.
5254:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   d  Digit to add.
5255:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to store result in.
5256:../src/wolfcrypt/src/sp_int.c ****  *
5257:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
5258:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when result is too large for fixed size dp array.
5259:../src/wolfcrypt/src/sp_int.c ****  */
5260:../src/wolfcrypt/src/sp_int.c **** static int _sp_add_d(sp_int* a, sp_int_digit d, sp_int* r)
5261:../src/wolfcrypt/src/sp_int.c **** {
 1978                             		.loc 2 5261 1
 1979 0000 6E 7A                   		pushm	r7-r10
 1980                             	.LCFI59:
 1981 0002 71 0A E8                		add	#-24, r0, r10
 1982                             	.LCFI60:
 1983 0005 EF A0                   		mov.L	r10, r0
 1984 0007 E7 A1 03                		mov.L	r1, 12[r10]
 1985 000a E7 A2 04                		mov.L	r2, 16[r10]
 1986 000d E7 A3 05                		mov.L	r3, 20[r10]
5262:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 1987                             		.loc 2 5262 9
 1988 0010 F8 A6 00                		mov.L	#0, [r10]
5263:../src/wolfcrypt/src/sp_int.c ****     int i = 0;
 1989                             		.loc 2 5263 9
 1990 0013 F9 A6 01 00             		mov.L	#0, 4[r10]
5264:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t;
5265:../src/wolfcrypt/src/sp_int.c **** 
5266:../src/wolfcrypt/src/sp_int.c ****     r->used = a->used;
 1991                             		.loc 2 5266 16
 1992 0017 ED A5 03                		mov.L	12[r10], r5
 1993 001a EC 54                   		mov.L	[r5], r4
 1994                             		.loc 2 5266 13
 1995 001c ED A5 05                		mov.L	20[r10], r5
 1996 001f E3 54                   		mov.L	r4, [r5]
5267:../src/wolfcrypt/src/sp_int.c ****     if (a->used == 0) {
 1997                             		.loc 2 5267 10
 1998 0021 ED A5 03                		mov.L	12[r10], r5
 1999 0024 EC 55                   		mov.L	[r5], r5
 2000                             		.loc 2 5267 8
 2001 0026 61 05                   		cmp	#0, r5
 2002 0028 21 11                   		bne	.L167
5268:../src/wolfcrypt/src/sp_int.c ****         r->used = d > 0;
 2003                             		.loc 2 5268 21
 2004 002a ED A5 04                		mov.L	16[r10], r5
 2005 002d 61 05                   		cmp	#0, r5
 2006 002f FC DB 51                		scne.L	r5
 2007 0032 5B 54                   		movu.B	r5, r4
 2008                             		.loc 2 5268 17
 2009 0034 ED A5 05                		mov.L	20[r10], r5
 2010 0037 E3 54                   		mov.L	r4, [r5]
 2011                             	.L167:
5269:../src/wolfcrypt/src/sp_int.c ****     }
5270:../src/wolfcrypt/src/sp_int.c ****     t = a->dp[0] + d;
 2012                             		.loc 2 5270 14
 2013 0039 ED A5 03                		mov.L	12[r10], r5
 2014 003c A8 D5                   		mov.L	8[r5], r5
 2015                             		.loc 2 5270 7
 2016 003e ED A4 04                		mov.L	16[r10], r4
 2017 0041 4B 45                   		add	r4, r5
 2018 0043 E7 A5 02                		mov.L	r5, 8[r10]
5271:../src/wolfcrypt/src/sp_int.c ****     if (t < a->dp[0]) {
 2019                             		.loc 2 5271 18
 2020 0046 ED A5 03                		mov.L	12[r10], r5
 2021 0049 A8 D5                   		mov.L	8[r5], r5
 2022                             		.loc 2 5271 8
 2023 004b ED A4 02                		mov.L	8[r10], r4
 2024 004e 47 54                   		cmp	r5, r4
 2025 0050 23 05 38 82 00          		bgeu	.L168
5272:../src/wolfcrypt/src/sp_int.c ****         for (++i; i < a->used; i++) {
 2026                             		.loc 2 5272 14
 2027 0055 ED A5 01                		mov.L	4[r10], r5
 2028 0058 62 15                   		add	#1, r5
 2029 005a E7 A5 01                		mov.L	r5, 4[r10]
 2030                             		.loc 2 5272 9
 2031 005d 2E 32                   		bra	.L169
 2032                             	.L172:
5273:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = a->dp[i] + 1;
 2033                             		.loc 2 5273 29
 2034 005f ED A4 03                		mov.L	12[r10], r4
 2035 0062 ED A5 01                		mov.L	4[r10], r5
 2036 0065 62 25                   		add	#2, r5
 2037 0067 FE 65 45                		mov.L	[r5,r4], r5
 2038                             		.loc 2 5273 33
 2039 006a 71 53 01                		add	#1, r5, r3
 2040                             		.loc 2 5273 22
 2041 006d ED A4 05                		mov.L	20[r10], r4
 2042 0070 ED A5 01                		mov.L	4[r10], r5
 2043 0073 62 25                   		add	#2, r5
 2044 0075 FE 25 43                		mov.L	r3, [r5,r4]
5274:../src/wolfcrypt/src/sp_int.c ****             if (r->dp[i] != 0) {
 2045                             		.loc 2 5274 22
 2046 0078 ED A4 05                		mov.L	20[r10], r4
 2047 007b ED A5 01                		mov.L	4[r10], r5
 2048 007e 62 25                   		add	#2, r5
 2049 0080 FE 65 45                		mov.L	[r5,r4], r5
 2050                             		.loc 2 5274 16
 2051 0083 61 05                   		cmp	#0, r5
 2052 0085 21 18                   		bne	.L178
5272:../src/wolfcrypt/src/sp_int.c ****         for (++i; i < a->used; i++) {
 2053                             		.loc 2 5272 33 discriminator 2
 2054 0087 ED A5 01                		mov.L	4[r10], r5
 2055 008a 62 15                   		add	#1, r5
 2056 008c E7 A5 01                		mov.L	r5, 4[r10]
 2057                             	.L169:
5272:../src/wolfcrypt/src/sp_int.c ****         for (++i; i < a->used; i++) {
 2058                             		.loc 2 5272 24 discriminator 1
 2059 008f ED A5 03                		mov.L	12[r10], r5
 2060 0092 EC 55                   		mov.L	[r5], r5
5272:../src/wolfcrypt/src/sp_int.c ****         for (++i; i < a->used; i++) {
 2061                             		.loc 2 5272 9 discriminator 1
 2062 0094 ED A4 01                		mov.L	4[r10], r4
 2063 0097 47 54                   		cmp	r5, r4
 2064 0099 29 C6                   		blt	.L172
 2065 009b 2E 03                   		bra	.L171
 2066                             	.L178:
5275:../src/wolfcrypt/src/sp_int.c ****                break;
 2067                             		.loc 2 5275 16
 2068 009d 03                      		nop
 2069                             	.L171:
5276:../src/wolfcrypt/src/sp_int.c ****             }
5277:../src/wolfcrypt/src/sp_int.c ****         }
5278:../src/wolfcrypt/src/sp_int.c ****         if (i == a->used) {
 2070                             		.loc 2 5278 19
 2071 009e ED A5 03                		mov.L	12[r10], r5
 2072 00a1 EC 55                   		mov.L	[r5], r5
 2073                             		.loc 2 5278 12
 2074 00a3 ED A4 01                		mov.L	4[r10], r4
 2075 00a6 47 54                   		cmp	r5, r4
 2076 00a8 21 2C                   		bne	.L168
5279:../src/wolfcrypt/src/sp_int.c ****             if (i < r->size) {
 2077                             		.loc 2 5279 22
 2078 00aa ED A5 05                		mov.L	20[r10], r5
 2079 00ad A8 5D                   		mov.L	4[r5], r5
 2080                             		.loc 2 5279 16
 2081 00af ED A4 01                		mov.L	4[r10], r4
 2082 00b2 47 54                   		cmp	r5, r4
 2083 00b4 28 1D                   		bge	.L173
5280:../src/wolfcrypt/src/sp_int.c ****                 r->used++;
 2084                             		.loc 2 5280 18
 2085 00b6 ED A5 05                		mov.L	20[r10], r5
 2086 00b9 EC 55                   		mov.L	[r5], r5
 2087                             		.loc 2 5280 24
 2088 00bb 71 54 01                		add	#1, r5, r4
 2089 00be ED A5 05                		mov.L	20[r10], r5
 2090 00c1 E3 54                   		mov.L	r4, [r5]
5281:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = 1;
 2091                             		.loc 2 5281 26
 2092 00c3 ED A4 05                		mov.L	20[r10], r4
 2093 00c6 ED A5 01                		mov.L	4[r10], r5
 2094 00c9 62 25                   		add	#2, r5
 2095 00cb 66 17                   		mov.L	#1, r7
 2096 00cd FE 25 47                		mov.L	r7, [r5,r4]
 2097 00d0 0C                      		bra	.L168
 2098                             	.L173:
5282:../src/wolfcrypt/src/sp_int.c ****             }
5283:../src/wolfcrypt/src/sp_int.c ****             else {
5284:../src/wolfcrypt/src/sp_int.c ****                 err = MP_VAL;
 2099                             		.loc 2 5284 21
 2100 00d1 F8 A6 FD                		mov.L	#-3, [r10]
 2101                             		.balign 8,3,1
 2102                             	.L168:
5285:../src/wolfcrypt/src/sp_int.c ****             }
5286:../src/wolfcrypt/src/sp_int.c ****         }
5287:../src/wolfcrypt/src/sp_int.c ****     }
5288:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 2103                             		.loc 2 5288 8
 2104 00d4 EC A5                   		mov.L	[r10], r5
 2105 00d6 61 05                   		cmp	#0, r5
 2106 00d8 21 48                   		bne	.L174
5289:../src/wolfcrypt/src/sp_int.c ****         r->dp[0] = t;
 2107                             		.loc 2 5289 18
 2108 00da ED A5 05                		mov.L	20[r10], r5
 2109 00dd ED A4 02                		mov.L	8[r10], r4
 2110 00e0 A0 D4                   		mov.L	r4, 8[r5]
5290:../src/wolfcrypt/src/sp_int.c ****         if (r != a) {
 2111                             		.loc 2 5290 12
 2112 00e2 ED A4 05                		mov.L	20[r10], r4
 2113 00e5 ED A5 03                		mov.L	12[r10], r5
 2114 00e8 47 54                   		cmp	r5, r4
 2115 00ea 20 36                   		beq	.L174
5291:../src/wolfcrypt/src/sp_int.c ****             for (++i; i < a->used; i++) {
 2116                             		.loc 2 5291 18
 2117 00ec ED A5 01                		mov.L	4[r10], r5
 2118 00ef 62 15                   		add	#1, r5
 2119 00f1 E7 A5 01                		mov.L	r5, 4[r10]
 2120                             		.loc 2 5291 13
 2121 00f4 2E 20                   		bra	.L175
 2122                             	.L176:
5292:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i];
 2123                             		.loc 2 5292 33 discriminator 3
 2124 00f6 ED A4 03                		mov.L	12[r10], r4
 2125 00f9 ED A5 01                		mov.L	4[r10], r5
 2126 00fc 62 25                   		add	#2, r5
 2127 00fe FE 65 43                		mov.L	[r5,r4], r3
 2128                             		.loc 2 5292 26 discriminator 3
 2129 0101 ED A4 05                		mov.L	20[r10], r4
 2130 0104 ED A5 01                		mov.L	4[r10], r5
 2131 0107 62 25                   		add	#2, r5
 2132 0109 FE 25 43                		mov.L	r3, [r5,r4]
5291:../src/wolfcrypt/src/sp_int.c ****             for (++i; i < a->used; i++) {
 2133                             		.loc 2 5291 37 discriminator 3
 2134 010c ED A5 01                		mov.L	4[r10], r5
 2135 010f 62 15                   		add	#1, r5
 2136 0111 E7 A5 01                		mov.L	r5, 4[r10]
 2137                             	.L175:
5291:../src/wolfcrypt/src/sp_int.c ****             for (++i; i < a->used; i++) {
 2138                             		.loc 2 5291 28 discriminator 1
 2139 0114 ED A5 03                		mov.L	12[r10], r5
 2140 0117 EC 55                   		mov.L	[r5], r5
5291:../src/wolfcrypt/src/sp_int.c ****             for (++i; i < a->used; i++) {
 2141                             		.loc 2 5291 13 discriminator 1
 2142 0119 ED A4 01                		mov.L	4[r10], r4
 2143 011c 47 54                   		cmp	r5, r4
 2144 011e 29 D8                   		blt	.L176
 2145                             	.L174:
5293:../src/wolfcrypt/src/sp_int.c ****             }
5294:../src/wolfcrypt/src/sp_int.c ****         }
5295:../src/wolfcrypt/src/sp_int.c ****     }
5296:../src/wolfcrypt/src/sp_int.c **** 
5297:../src/wolfcrypt/src/sp_int.c ****     return err;
 2146                             		.loc 2 5297 12
 2147 0120 EC A5                   		mov.L	[r10], r5
5298:../src/wolfcrypt/src/sp_int.c **** }
 2148                             		.loc 2 5298 1
 2149 0122 EF 51                   		mov.L	r5, r1
 2150 0124 3F 7A 0A                		rtsd	#40, r7-r10
 2151                             	.LFE69:
 2153 0127 03                      		.section	.text._sp_sub_d,"ax",@progbits
 2155                             	__sp_sub_d:
 2156                             	.LFB70:
5299:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_ADD_D || (WOLFSSL_SP_INT_NEGATIVE && WOLFSSL_SP_SUB_D) ||
5300:../src/wolfcrypt/src/sp_int.c ****         * defined(WOLFSSL_SP_READ_RADIX_10) */
5301:../src/wolfcrypt/src/sp_int.c **** 
5302:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_INT_NEGATIVE) && defined(WOLFSSL_SP_ADD_D)) || \
5303:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_SP_SUB_D) || defined(WOLFSSL_SP_INVMOD) || \
5304:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_SP_INVMOD_MONT_CT) || defined(WOLFSSL_SP_PRIME_GEN)
5305:../src/wolfcrypt/src/sp_int.c **** /* Sub a one digit number from the multi-precision number.
5306:../src/wolfcrypt/src/sp_int.c ****  *
5307:../src/wolfcrypt/src/sp_int.c ****  * returns MP_OKAY always.
5308:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer be subtracted from.
5309:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   d  Digit to subtract.
5310:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to store result in.
5311:../src/wolfcrypt/src/sp_int.c ****  */
5312:../src/wolfcrypt/src/sp_int.c **** static void _sp_sub_d(sp_int* a, sp_int_digit d, sp_int* r)
5313:../src/wolfcrypt/src/sp_int.c **** {
 2157                             		.loc 2 5313 1
 2158 0000 7E AA                   		push.l	r10
 2159                             	.LCFI61:
 2160 0002 71 0A E8                		add	#-24, r0, r10
 2161                             	.LCFI62:
 2162 0005 EF A0                   		mov.L	r10, r0
 2163 0007 E7 A1 03                		mov.L	r1, 12[r10]
 2164 000a E7 A2 04                		mov.L	r2, 16[r10]
 2165 000d E7 A3 05                		mov.L	r3, 20[r10]
5314:../src/wolfcrypt/src/sp_int.c ****     int i = 0;
 2166                             		.loc 2 5314 9
 2167 0010 F8 A6 00                		mov.L	#0, [r10]
5315:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t;
5316:../src/wolfcrypt/src/sp_int.c **** 
5317:../src/wolfcrypt/src/sp_int.c ****     r->used = a->used;
 2168                             		.loc 2 5317 16
 2169 0013 ED A5 03                		mov.L	12[r10], r5
 2170 0016 EC 54                   		mov.L	[r5], r4
 2171                             		.loc 2 5317 13
 2172 0018 ED A5 05                		mov.L	20[r10], r5
 2173 001b E3 54                   		mov.L	r4, [r5]
5318:../src/wolfcrypt/src/sp_int.c ****     if (a->used == 0) {
 2174                             		.loc 2 5318 10
 2175 001d ED A5 03                		mov.L	12[r10], r5
 2176 0020 EC 55                   		mov.L	[r5], r5
 2177                             		.loc 2 5318 8
 2178 0022 61 05                   		cmp	#0, r5
 2179 0024 1A                      		bne	.L180
5319:../src/wolfcrypt/src/sp_int.c ****         r->dp[0] = 0;
 2180                             		.loc 2 5319 18
 2181 0025 ED A5 05                		mov.L	20[r10], r5
 2182 0028 3E 52 00                		mov.L	#0, 8[r5]
5320:../src/wolfcrypt/src/sp_int.c ****     }
5321:../src/wolfcrypt/src/sp_int.c ****     else {
5322:../src/wolfcrypt/src/sp_int.c ****         t = a->dp[0] - d;
5323:../src/wolfcrypt/src/sp_int.c ****         if (t > a->dp[0]) {
5324:../src/wolfcrypt/src/sp_int.c ****             for (++i; i < a->used; i++) {
5325:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i] - 1;
5326:../src/wolfcrypt/src/sp_int.c ****                 if (r->dp[i] != SP_DIGIT_MAX) {
5327:../src/wolfcrypt/src/sp_int.c ****                    break;
5328:../src/wolfcrypt/src/sp_int.c ****                 }
5329:../src/wolfcrypt/src/sp_int.c ****             }
5330:../src/wolfcrypt/src/sp_int.c ****         }
5331:../src/wolfcrypt/src/sp_int.c ****         r->dp[0] = t;
5332:../src/wolfcrypt/src/sp_int.c ****         if (r != a) {
5333:../src/wolfcrypt/src/sp_int.c ****             for (++i; i < a->used; i++) {
5334:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i];
5335:../src/wolfcrypt/src/sp_int.c ****             }
5336:../src/wolfcrypt/src/sp_int.c ****         }
5337:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
5338:../src/wolfcrypt/src/sp_int.c ****     }
5339:../src/wolfcrypt/src/sp_int.c **** }
 2183                             		.loc 2 5339 1
 2184 002b 38 D2 00                		bra	.L193
 2185                             	.L180:
5322:../src/wolfcrypt/src/sp_int.c ****         if (t > a->dp[0]) {
 2186                             		.loc 2 5322 18
 2187 002e ED A5 03                		mov.L	12[r10], r5
 2188 0031 A8 D4                   		mov.L	8[r5], r4
5322:../src/wolfcrypt/src/sp_int.c ****         if (t > a->dp[0]) {
 2189                             		.loc 2 5322 11
 2190 0033 ED A5 04                		mov.L	16[r10], r5
 2191 0036 FF 05 54                		sub	r5, r4, r5
 2192 0039 E7 A5 02                		mov.L	r5, 8[r10]
5323:../src/wolfcrypt/src/sp_int.c ****             for (++i; i < a->used; i++) {
 2193                             		.loc 2 5323 22
 2194 003c ED A5 03                		mov.L	12[r10], r5
 2195 003f A8 D5                   		mov.L	8[r5], r5
5323:../src/wolfcrypt/src/sp_int.c ****             for (++i; i < a->used; i++) {
 2196                             		.loc 2 5323 12
 2197 0041 ED A4 02                		mov.L	8[r10], r4
 2198 0044 47 54                   		cmp	r5, r4
 2199 0046 25 44                   		bleu	.L182
5324:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i] - 1;
 2200                             		.loc 2 5324 18
 2201 0048 EC A5                   		mov.L	[r10], r5
 2202 004a 62 15                   		add	#1, r5
 2203 004c E3 A5                   		mov.L	r5, [r10]
5324:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i] - 1;
 2204                             		.loc 2 5324 13
 2205 004e 2E 2E                   		bra	.L183
 2206                             	.L185:
5325:../src/wolfcrypt/src/sp_int.c ****                 if (r->dp[i] != SP_DIGIT_MAX) {
 2207                             		.loc 2 5325 33
 2208 0050 ED A4 03                		mov.L	12[r10], r4
 2209 0053 EC A5                   		mov.L	[r10], r5
 2210 0055 62 25                   		add	#2, r5
 2211 0057 FE 65 45                		mov.L	[r5,r4], r5
5325:../src/wolfcrypt/src/sp_int.c ****                 if (r->dp[i] != SP_DIGIT_MAX) {
 2212                             		.loc 2 5325 37
 2213 005a 71 53 FF                		add	#-1, r5, r3
5325:../src/wolfcrypt/src/sp_int.c ****                 if (r->dp[i] != SP_DIGIT_MAX) {
 2214                             		.loc 2 5325 26
 2215 005d ED A4 05                		mov.L	20[r10], r4
 2216 0060 EC A5                   		mov.L	[r10], r5
 2217 0062 62 25                   		add	#2, r5
 2218 0064 FE 25 43                		mov.L	r3, [r5,r4]
5326:../src/wolfcrypt/src/sp_int.c ****                    break;
 2219                             		.loc 2 5326 26
 2220 0067 ED A4 05                		mov.L	20[r10], r4
 2221 006a EC A5                   		mov.L	[r10], r5
 2222 006c 62 25                   		add	#2, r5
 2223 006e FE 65 45                		mov.L	[r5,r4], r5
5326:../src/wolfcrypt/src/sp_int.c ****                    break;
 2224                             		.loc 2 5326 20
 2225 0071 75 05 FF                		cmp	#-1, r5
 2226 0074 21 15                   		bne	.L192
5324:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i] - 1;
 2227                             		.loc 2 5324 37 discriminator 2
 2228 0076 EC A5                   		mov.L	[r10], r5
 2229 0078 62 15                   		add	#1, r5
 2230 007a E3 A5                   		mov.L	r5, [r10]
 2231                             	.L183:
5324:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i] - 1;
 2232                             		.loc 2 5324 28 discriminator 1
 2233 007c ED A5 03                		mov.L	12[r10], r5
 2234 007f EC 55                   		mov.L	[r5], r5
5324:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i] - 1;
 2235                             		.loc 2 5324 13 discriminator 1
 2236 0081 EC A4                   		mov.L	[r10], r4
 2237 0083 47 54                   		cmp	r5, r4
 2238 0085 29 CB                   		blt	.L185
 2239 0087 2E 03                   		bra	.L182
 2240                             	.L192:
5327:../src/wolfcrypt/src/sp_int.c ****                 }
 2241                             		.loc 2 5327 20
 2242 0089 03                      		nop
 2243                             	.L182:
5331:../src/wolfcrypt/src/sp_int.c ****         if (r != a) {
 2244                             		.loc 2 5331 18
 2245 008a ED A5 05                		mov.L	20[r10], r5
 2246 008d ED A4 02                		mov.L	8[r10], r4
 2247 0090 A0 D4                   		mov.L	r4, 8[r5]
5332:../src/wolfcrypt/src/sp_int.c ****             for (++i; i < a->used; i++) {
 2248                             		.loc 2 5332 12
 2249 0092 ED A4 05                		mov.L	20[r10], r4
 2250 0095 ED A5 03                		mov.L	12[r10], r5
 2251 0098 47 54                   		cmp	r5, r4
 2252 009a 20 2F                   		beq	.L186
5333:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i];
 2253                             		.loc 2 5333 18
 2254 009c EC A5                   		mov.L	[r10], r5
 2255 009e 62 15                   		add	#1, r5
 2256 00a0 E3 A5                   		mov.L	r5, [r10]
5333:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i];
 2257                             		.loc 2 5333 13
 2258 00a2 2E 1C                   		bra	.L187
 2259                             	.L188:
5334:../src/wolfcrypt/src/sp_int.c ****             }
 2260                             		.loc 2 5334 33 discriminator 3
 2261 00a4 ED A4 03                		mov.L	12[r10], r4
 2262 00a7 EC A5                   		mov.L	[r10], r5
 2263 00a9 62 25                   		add	#2, r5
 2264 00ab FE 65 43                		mov.L	[r5,r4], r3
5334:../src/wolfcrypt/src/sp_int.c ****             }
 2265                             		.loc 2 5334 26 discriminator 3
 2266 00ae ED A4 05                		mov.L	20[r10], r4
 2267 00b1 EC A5                   		mov.L	[r10], r5
 2268 00b3 62 25                   		add	#2, r5
 2269 00b5 FE 25 43                		mov.L	r3, [r5,r4]
5333:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i];
 2270                             		.loc 2 5333 37 discriminator 3
 2271 00b8 EC A5                   		mov.L	[r10], r5
 2272 00ba 62 15                   		add	#1, r5
 2273 00bc E3 A5                   		mov.L	r5, [r10]
 2274                             	.L187:
5333:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i];
 2275                             		.loc 2 5333 28 discriminator 1
 2276 00be ED A5 03                		mov.L	12[r10], r5
 2277 00c1 EC 55                   		mov.L	[r5], r5
5333:../src/wolfcrypt/src/sp_int.c ****                 r->dp[i] = a->dp[i];
 2278                             		.loc 2 5333 13 discriminator 1
 2279 00c3 EC A4                   		mov.L	[r10], r4
 2280 00c5 47 54                   		cmp	r5, r4
 2281 00c7 29 DD                   		blt	.L188
 2282                             	.L186:
 2283                             	.LBB12:
5337:../src/wolfcrypt/src/sp_int.c ****     }
 2284                             		.loc 2 5337 9
 2285 00c9 ED A5 05                		mov.L	20[r10], r5
 2286 00cc EC 55                   		mov.L	[r5], r5
 2287 00ce 60 15                   		sub	#1, r5
 2288 00d0 E7 A5 01                		mov.L	r5, 4[r10]
 2289 00d3 09                      		bra	.L189
 2290                             	.L191:
5337:../src/wolfcrypt/src/sp_int.c ****     }
 2291                             		.loc 2 5337 9 is_stmt 0 discriminator 5
 2292 00d4 ED A5 01                		mov.L	4[r10], r5
 2293 00d7 60 15                   		sub	#1, r5
 2294 00d9 E7 A5 01                		mov.L	r5, 4[r10]
 2295                             	.L189:
5337:../src/wolfcrypt/src/sp_int.c ****     }
 2296                             		.loc 2 5337 9 discriminator 1
 2297 00dc ED A5 01                		mov.L	4[r10], r5
 2298 00df 61 05                   		cmp	#0, r5
 2299 00e1 29 11                   		blt	.L190
5337:../src/wolfcrypt/src/sp_int.c ****     }
 2300                             		.loc 2 5337 9 discriminator 3
 2301 00e3 ED A4 05                		mov.L	20[r10], r4
 2302 00e6 ED A5 01                		mov.L	4[r10], r5
 2303 00e9 62 25                   		add	#2, r5
 2304 00eb FE 65 45                		mov.L	[r5,r4], r5
 2305 00ee 61 05                   		cmp	#0, r5
 2306 00f0 20 E4                   		beq	.L191
 2307                             	.L190:
5337:../src/wolfcrypt/src/sp_int.c ****     }
 2308                             		.loc 2 5337 9 discriminator 6
 2309 00f2 ED A5 01                		mov.L	4[r10], r5
 2310 00f5 71 54 01                		add	#1, r5, r4
 2311 00f8 ED A5 05                		mov.L	20[r10], r5
 2312 00fb E3 54                   		mov.L	r4, [r5]
 2313                             	.L193:
 2314                             	.LBE12:
 2315                             		.loc 2 5339 1 is_stmt 1
 2316 00fd 03                      		nop
 2317 00fe 3F AA 07                		rtsd	#28, r10-r10
 2318                             	.LFE70:
 2320                             		.section	.text.sp_add_d,"ax",@progbits
 2321                             		.global	_sp_add_d
 2323                             	_sp_add_d:
 2324                             	.LFB71:
5340:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_INT_NEGATIVE && WOLFSSL_SP_ADD_D) || WOLFSSL_SP_SUB_D
5341:../src/wolfcrypt/src/sp_int.c ****         * WOLFSSL_SP_INVMOD || WOLFSSL_SP_INVMOD_MONT_CT ||
5342:../src/wolfcrypt/src/sp_int.c ****         * WOLFSSL_SP_PRIME_GEN */
5343:../src/wolfcrypt/src/sp_int.c **** 
5344:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_ADD_D
5345:../src/wolfcrypt/src/sp_int.c **** /* Add a one digit number to the multi-precision number.
5346:../src/wolfcrypt/src/sp_int.c ****  *
5347:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer be added to.
5348:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   d  Digit to add.
5349:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to store result in.
5350:../src/wolfcrypt/src/sp_int.c ****  *
5351:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
5352:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when result is too large for fixed size dp array.
5353:../src/wolfcrypt/src/sp_int.c ****  */
5354:../src/wolfcrypt/src/sp_int.c **** int sp_add_d(sp_int* a, sp_int_digit d, sp_int* r)
5355:../src/wolfcrypt/src/sp_int.c **** {
 2325                             		.loc 2 5355 1
 2326 0000 7E AA                   		push.l	r10
 2327                             	.LCFI63:
 2328 0002 71 0A F0                		add	#-16, r0, r10
 2329                             	.LCFI64:
 2330 0005 EF A0                   		mov.L	r10, r0
 2331 0007 E7 A1 01                		mov.L	r1, 4[r10]
 2332 000a E7 A2 02                		mov.L	r2, 8[r10]
 2333 000d E7 A3 03                		mov.L	r3, 12[r10]
5356:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 2334                             		.loc 2 5356 9
 2335 0010 F8 A6 00                		mov.L	#0, [r10]
5357:../src/wolfcrypt/src/sp_int.c **** 
5358:../src/wolfcrypt/src/sp_int.c ****     /* Check validity of parameters. */
5359:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (r == NULL)) {
 2336                             		.loc 2 5359 8
 2337 0013 ED A5 01                		mov.L	4[r10], r5
 2338 0016 61 05                   		cmp	#0, r5
 2339 0018 17                      		beq	.L195
 2340                             		.loc 2 5359 21 discriminator 1
 2341 0019 ED A5 03                		mov.L	12[r10], r5
 2342 001c 61 05                   		cmp	#0, r5
 2343 001e 1E                      		bne	.L196
 2344                             	.L195:
5360:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 2345                             		.loc 2 5360 13
 2346 001f F8 A6 FD                		mov.L	#-3, [r10]
 2347 0022 2E 11                   		bra	.L197
 2348                             	.L196:
5361:../src/wolfcrypt/src/sp_int.c ****     }
5362:../src/wolfcrypt/src/sp_int.c ****     else
5363:../src/wolfcrypt/src/sp_int.c ****     {
5364:../src/wolfcrypt/src/sp_int.c ****     #ifndef WOLFSSL_SP_INT_NEGATIVE
5365:../src/wolfcrypt/src/sp_int.c ****         /* Positive only so just use internal function. */
5366:../src/wolfcrypt/src/sp_int.c ****         err = _sp_add_d(a, d, r);
 2349                             		.loc 2 5366 15
 2350 0024 ED A3 03                		mov.L	12[r10], r3
 2351 0027 ED A2 02                		mov.L	8[r10], r2
 2352 002a ED A1 01                		mov.L	4[r10], r1
 2353 002d 05 00 00 00             		bsr	__sp_add_d
 2354 0031 E3 A1                   		mov.L	r1, [r10]
 2355                             	.L197:
5367:../src/wolfcrypt/src/sp_int.c ****     #else
5368:../src/wolfcrypt/src/sp_int.c ****         if (a->sign == MP_ZPOS) {
5369:../src/wolfcrypt/src/sp_int.c ****             /* Positive so use interal function. */
5370:../src/wolfcrypt/src/sp_int.c ****             r->sign = MP_ZPOS;
5371:../src/wolfcrypt/src/sp_int.c ****             err = _sp_add_d(a, d, r);
5372:../src/wolfcrypt/src/sp_int.c ****         }
5373:../src/wolfcrypt/src/sp_int.c ****         else if ((a->used > 1) || (a->dp[0] > d)) {
5374:../src/wolfcrypt/src/sp_int.c ****             /* Negative value bigger than digit so subtract digit. */
5375:../src/wolfcrypt/src/sp_int.c ****             r->sign = MP_NEG;
5376:../src/wolfcrypt/src/sp_int.c ****             _sp_sub_d(a, d, r);
5377:../src/wolfcrypt/src/sp_int.c ****         }
5378:../src/wolfcrypt/src/sp_int.c ****         else {
5379:../src/wolfcrypt/src/sp_int.c ****             /* Negative value smaller or equal to digit. */
5380:../src/wolfcrypt/src/sp_int.c ****             r->sign = MP_ZPOS;
5381:../src/wolfcrypt/src/sp_int.c ****             /* Subtract negative value from digit. */
5382:../src/wolfcrypt/src/sp_int.c ****             r->dp[0] = d - a->dp[0];
5383:../src/wolfcrypt/src/sp_int.c ****             /* Result is a digit equal to or greater than zero. */
5384:../src/wolfcrypt/src/sp_int.c ****             r->used = ((r->dp[0] == 0) ? 0 : 1);
5385:../src/wolfcrypt/src/sp_int.c ****         }
5386:../src/wolfcrypt/src/sp_int.c ****     #endif
5387:../src/wolfcrypt/src/sp_int.c ****     }
5388:../src/wolfcrypt/src/sp_int.c **** 
5389:../src/wolfcrypt/src/sp_int.c ****     return err;
 2356                             		.loc 2 5389 12
 2357 0033 EC A5                   		mov.L	[r10], r5
5390:../src/wolfcrypt/src/sp_int.c **** }
 2358                             		.loc 2 5390 1
 2359 0035 EF 51                   		mov.L	r5, r1
 2360 0037 3F AA 05                		rtsd	#20, r10-r10
 2361                             	.LFE71:
 2363                             		.section	.text.sp_sub_d,"ax",@progbits
 2364                             		.global	_sp_sub_d
 2366                             	_sp_sub_d:
 2367                             	.LFB72:
5391:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_ADD_D */
5392:../src/wolfcrypt/src/sp_int.c **** 
5393:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_SUB_D
5394:../src/wolfcrypt/src/sp_int.c **** /* Sub a one digit number from the multi-precision number.
5395:../src/wolfcrypt/src/sp_int.c ****  *
5396:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer be subtracted from.
5397:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   d  Digit to subtract.
5398:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to store result in.
5399:../src/wolfcrypt/src/sp_int.c ****  *
5400:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
5401:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or r is NULL.
5402:../src/wolfcrypt/src/sp_int.c ****  */
5403:../src/wolfcrypt/src/sp_int.c **** int sp_sub_d(sp_int* a, sp_int_digit d, sp_int* r)
5404:../src/wolfcrypt/src/sp_int.c **** {
 2368                             		.loc 2 5404 1
 2369 0000 7E AA                   		push.l	r10
 2370                             	.LCFI65:
 2371 0002 71 0A F0                		add	#-16, r0, r10
 2372                             	.LCFI66:
 2373 0005 EF A0                   		mov.L	r10, r0
 2374 0007 E7 A1 01                		mov.L	r1, 4[r10]
 2375 000a E7 A2 02                		mov.L	r2, 8[r10]
 2376 000d E7 A3 03                		mov.L	r3, 12[r10]
5405:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 2377                             		.loc 2 5405 9
 2378 0010 F8 A6 00                		mov.L	#0, [r10]
5406:../src/wolfcrypt/src/sp_int.c **** 
5407:../src/wolfcrypt/src/sp_int.c ****     /* Check validity of parameters. */
5408:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (r == NULL)) {
 2379                             		.loc 2 5408 8
 2380 0013 ED A5 01                		mov.L	4[r10], r5
 2381 0016 61 05                   		cmp	#0, r5
 2382 0018 17                      		beq	.L200
 2383                             		.loc 2 5408 21 discriminator 1
 2384 0019 ED A5 03                		mov.L	12[r10], r5
 2385 001c 61 05                   		cmp	#0, r5
 2386 001e 1E                      		bne	.L201
 2387                             	.L200:
5409:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 2388                             		.loc 2 5409 13
 2389 001f F8 A6 FD                		mov.L	#-3, [r10]
 2390 0022 2E 0F                   		bra	.L202
 2391                             	.L201:
5410:../src/wolfcrypt/src/sp_int.c ****     }
5411:../src/wolfcrypt/src/sp_int.c ****     else {
5412:../src/wolfcrypt/src/sp_int.c ****     #ifndef WOLFSSL_SP_INT_NEGATIVE
5413:../src/wolfcrypt/src/sp_int.c ****         /* Positive only so just use internal function. */
5414:../src/wolfcrypt/src/sp_int.c ****         _sp_sub_d(a, d, r);
 2392                             		.loc 2 5414 9
 2393 0024 ED A3 03                		mov.L	12[r10], r3
 2394 0027 ED A2 02                		mov.L	8[r10], r2
 2395 002a ED A1 01                		mov.L	4[r10], r1
 2396 002d 05 00 00 00             		bsr	__sp_sub_d
 2397                             	.L202:
5415:../src/wolfcrypt/src/sp_int.c ****     #else
5416:../src/wolfcrypt/src/sp_int.c ****         if (a->sign == MP_NEG) {
5417:../src/wolfcrypt/src/sp_int.c ****             /* Subtracting from negative use interal add. */
5418:../src/wolfcrypt/src/sp_int.c ****             r->sign = MP_NEG;
5419:../src/wolfcrypt/src/sp_int.c ****             err = _sp_add_d(a, d, r);
5420:../src/wolfcrypt/src/sp_int.c ****         }
5421:../src/wolfcrypt/src/sp_int.c ****         else if ((a->used > 1) || (a->dp[0] >= d)) {
5422:../src/wolfcrypt/src/sp_int.c ****             /* Positive number greater than digit so add digit. */
5423:../src/wolfcrypt/src/sp_int.c ****             r->sign = MP_ZPOS;
5424:../src/wolfcrypt/src/sp_int.c ****             _sp_sub_d(a, d, r);
5425:../src/wolfcrypt/src/sp_int.c ****         }
5426:../src/wolfcrypt/src/sp_int.c ****         else {
5427:../src/wolfcrypt/src/sp_int.c ****             /* Negative value smaller than digit. */
5428:../src/wolfcrypt/src/sp_int.c ****             r->sign = MP_NEG;
5429:../src/wolfcrypt/src/sp_int.c ****             /* Subtract positive value from digit. */
5430:../src/wolfcrypt/src/sp_int.c ****             r->dp[0] = d - a->dp[0];
5431:../src/wolfcrypt/src/sp_int.c ****             /* Result is a digit equal to or greater than zero. */
5432:../src/wolfcrypt/src/sp_int.c ****             r->used = 1;
5433:../src/wolfcrypt/src/sp_int.c ****         }
5434:../src/wolfcrypt/src/sp_int.c ****     #endif
5435:../src/wolfcrypt/src/sp_int.c ****     }
5436:../src/wolfcrypt/src/sp_int.c **** 
5437:../src/wolfcrypt/src/sp_int.c ****     return err;
 2398                             		.loc 2 5437 12
 2399 0031 EC A5                   		mov.L	[r10], r5
5438:../src/wolfcrypt/src/sp_int.c **** }
 2400                             		.loc 2 5438 1
 2401 0033 EF 51                   		mov.L	r5, r1
 2402 0035 3F AA 05                		rtsd	#20, r10-r10
 2403                             	.LFE72:
 2405                             		.section	.text._sp_mul_d,"ax",@progbits
 2407                             	__sp_mul_d:
 2408                             	.LFB73:
5439:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_SUB_D */
5440:../src/wolfcrypt/src/sp_int.c **** 
5441:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
5442:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_SP_SMALL) && (defined(WOLFSSL_SP_MATH_ALL) || \
5443:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_DH) || defined(HAVE_ECC) || \
5444:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY) && \
5445:../src/wolfcrypt/src/sp_int.c ****      !defined(WOLFSSL_RSA_PUBLIC_ONLY))) || \
5446:../src/wolfcrypt/src/sp_int.c ****     (defined(WOLFSSL_KEY_GEN) && !defined(NO_RSA))
5447:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by digit n and put result into r shifting up o digits.
5448:../src/wolfcrypt/src/sp_int.c ****  *   r = (a * n) << (o * SP_WORD_SIZE)
5449:../src/wolfcrypt/src/sp_int.c ****  *
5450:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to be multiplied.
5451:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   n  Number (SP digit) to multiply by.
5452:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
5453:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   o  Number of digits to move result up by.
5454:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
5455:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when result is too large for sp_int.
5456:../src/wolfcrypt/src/sp_int.c ****  */
5457:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_d(sp_int* a, sp_int_digit n, sp_int* r, int o)
5458:../src/wolfcrypt/src/sp_int.c **** {
 2409                             		.loc 2 5458 1
 2410 0000 6E 6C                   		pushm	r6-r12
 2411                             	.LCFI67:
 2412 0002 71 0A DC                		add	#-36, r0, r10
 2413                             	.LCFI68:
 2414 0005 EF A0                   		mov.L	r10, r0
 2415 0007 E7 A1 05                		mov.L	r1, 20[r10]
 2416 000a E7 A2 06                		mov.L	r2, 24[r10]
 2417 000d E7 A3 07                		mov.L	r3, 28[r10]
 2418 0010 E7 A4 08                		mov.L	r4, 32[r10]
5459:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 2419                             		.loc 2 5459 9
 2420 0013 F8 A6 00                		mov.L	#0, [r10]
5460:../src/wolfcrypt/src/sp_int.c ****     int i;
5461:../src/wolfcrypt/src/sp_int.c **** #ifndef SQR_MUL_ASM
5462:../src/wolfcrypt/src/sp_int.c ****     sp_int_word t = 0;
 2421                             		.loc 2 5462 17
 2422 0016 F9 A6 02 00             		mov.L	#0, 8[r10]
 2423 001a F9 A6 03 00             		mov.L	#0, 12[r10]
5463:../src/wolfcrypt/src/sp_int.c **** #else
5464:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
5465:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
5466:../src/wolfcrypt/src/sp_int.c **** #endif
5467:../src/wolfcrypt/src/sp_int.c **** 
5468:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_SMALL
5469:../src/wolfcrypt/src/sp_int.c ****     for (i = 0; i < o; i++) {
5470:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = 0;
5471:../src/wolfcrypt/src/sp_int.c ****     }
5472:../src/wolfcrypt/src/sp_int.c **** #else
5473:../src/wolfcrypt/src/sp_int.c ****     /* Don't use the offset. Only when doing small code size div. */
5474:../src/wolfcrypt/src/sp_int.c ****     (void)o;
5475:../src/wolfcrypt/src/sp_int.c **** #endif
5476:../src/wolfcrypt/src/sp_int.c **** 
5477:../src/wolfcrypt/src/sp_int.c ****     for (i = 0; i < a->used; i++, o++) {
 2424                             		.loc 2 5477 12
 2425 001e F9 A6 01 00             		mov.L	#0, 4[r10]
 2426                             		.loc 2 5477 5
 2427 0022 2E 6C                   		bra	.L205
 2428                             	.L206:
5478:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
5479:../src/wolfcrypt/src/sp_int.c ****         t += (sp_int_word)a->dp[i] * n;
 2429                             		.loc 2 5479 32 discriminator 3
 2430 0024 ED A3 05                		mov.L	20[r10], r3
 2431 0027 ED A4 01                		mov.L	4[r10], r4
 2432 002a 62 24                   		add	#2, r4
 2433 002c FE 64 34                		mov.L	[r4,r3], r4
 2434                             		.loc 2 5479 14 discriminator 3
 2435 002f EF 45                   		mov.L	r4, r5
 2436 0031 66 06                   		mov.L	#0, r6
 2437                             		.loc 2 5479 36 discriminator 3
 2438 0033 ED A4 06                		mov.L	24[r10], r4
 2439 0036 EF 4B                   		mov.L	r4, r11
 2440 0038 66 0C                   		mov.L	#0, r12
 2441 003a FF 33 B6                		mul	r11, r6, r3
 2442 003d FF 34 5C                		mul	r5, r12, r4
 2443 0040 FF 22 43                		add	r4, r3, r2
 2444 0043 EF 57                   		mov.L	r5, r7
 2445 0045 FC 1F B7                		emulu	r11, r7
 2446 0048 EF 73                   		mov.L	r7, r3
 2447 004a EF 84                   		mov.L	r8, r4
 2448 004c 4B 42                   		add	r4, r2
 2449 004e EF 24                   		mov.L	r2, r4
 2450                             		.loc 2 5479 11 discriminator 3
 2451 0050 ED A1 02                		mov.L	8[r10], r1
 2452 0053 ED A2 03                		mov.L	12[r10], r2
 2453 0056 EF 29                   		mov.L	r2, r9
 2454 0058 FF 28 31                		add	r3, r1, r8
 2455 005b FC 0B 49                		adc	r4, r9
 2456 005e E7 A8 02                		mov.L	r8, 8[r10]
 2457 0061 E7 A9 03                		mov.L	r9, 12[r10]
5480:../src/wolfcrypt/src/sp_int.c ****         r->dp[o] = (sp_int_digit)t;
 2458                             		.loc 2 5480 20 discriminator 3
 2459 0064 ED A2 02                		mov.L	8[r10], r2
 2460                             		.loc 2 5480 18 discriminator 3
 2461 0067 ED A3 07                		mov.L	28[r10], r3
 2462 006a ED A4 08                		mov.L	32[r10], r4
 2463 006d 62 24                   		add	#2, r4
 2464 006f FE 24 32                		mov.L	r2, [r4,r3]
5481:../src/wolfcrypt/src/sp_int.c ****         t >>= SP_WORD_SIZE;
 2465                             		.loc 2 5481 11 discriminator 3
 2466 0072 ED A4 03                		mov.L	12[r10], r4
 2467 0075 68 04                   		shlr	#0, r4
 2468 0077 E7 A4 02                		mov.L	r4, 8[r10]
 2469 007a F9 A6 03 00             		mov.L	#0, 12[r10]
5477:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2470                             		.loc 2 5477 31 discriminator 3
 2471 007e ED A4 01                		mov.L	4[r10], r4
 2472 0081 62 14                   		add	#1, r4
 2473 0083 E7 A4 01                		mov.L	r4, 4[r10]
5477:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2474                             		.loc 2 5477 36 discriminator 3
 2475 0086 ED A4 08                		mov.L	32[r10], r4
 2476 0089 62 14                   		add	#1, r4
 2477 008b E7 A4 08                		mov.L	r4, 32[r10]
 2478                             	.L205:
5477:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2479                             		.loc 2 5477 22 discriminator 1
 2480 008e ED A4 05                		mov.L	20[r10], r4
 2481 0091 EC 44                   		mov.L	[r4], r4
5477:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2482                             		.loc 2 5477 5 discriminator 1
 2483 0093 ED A3 01                		mov.L	4[r10], r3
 2484 0096 47 43                   		cmp	r4, r3
 2485 0098 29 8C                   		blt	.L206
5482:../src/wolfcrypt/src/sp_int.c ****     #else
5483:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD_NO(l, h, a->dp[i], n);
5484:../src/wolfcrypt/src/sp_int.c ****         r->dp[o] = l;
5485:../src/wolfcrypt/src/sp_int.c ****         l = h;
5486:../src/wolfcrypt/src/sp_int.c ****         h = 0;
5487:../src/wolfcrypt/src/sp_int.c ****     #endif
5488:../src/wolfcrypt/src/sp_int.c ****     }
5489:../src/wolfcrypt/src/sp_int.c **** 
5490:../src/wolfcrypt/src/sp_int.c **** #ifndef SQR_MUL_ASM
5491:../src/wolfcrypt/src/sp_int.c ****     if (t > 0)
 2486                             		.loc 2 5491 8
 2487 009a ED A5 02                		mov.L	8[r10], r5
 2488 009d ED A4 03                		mov.L	12[r10], r4
 2489 00a0 57 45                   		or	r4, r5
 2490 00a2 61 05                   		cmp	#0, r5
 2491 00a4 20 26                   		beq	.L207
5492:../src/wolfcrypt/src/sp_int.c **** #else
5493:../src/wolfcrypt/src/sp_int.c ****     if (l > 0)
5494:../src/wolfcrypt/src/sp_int.c **** #endif
5495:../src/wolfcrypt/src/sp_int.c ****     {
5496:../src/wolfcrypt/src/sp_int.c ****         if (o == r->size) {
 2492                             		.loc 2 5496 19
 2493 00a6 ED A5 07                		mov.L	28[r10], r5
 2494 00a9 A8 5D                   		mov.L	4[r5], r5
 2495                             		.loc 2 5496 12
 2496 00ab ED A4 08                		mov.L	32[r10], r4
 2497 00ae 47 54                   		cmp	r5, r4
 2498 00b0 1E                      		bne	.L209
5497:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
 2499                             		.loc 2 5497 17
 2500 00b1 F8 A6 FD                		mov.L	#-3, [r10]
 2501 00b4 2E 16                   		bra	.L207
 2502                             	.L209:
5498:../src/wolfcrypt/src/sp_int.c ****         }
5499:../src/wolfcrypt/src/sp_int.c ****         else {
5500:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
5501:../src/wolfcrypt/src/sp_int.c ****             r->dp[o++] = (sp_int_digit)t;
 2503                             		.loc 2 5501 20
 2504 00b6 ED A5 08                		mov.L	32[r10], r5
 2505 00b9 71 54 01                		add	#1, r5, r4
 2506 00bc E7 A4 08                		mov.L	r4, 32[r10]
 2507                             		.loc 2 5501 26
 2508 00bf ED A3 02                		mov.L	8[r10], r3
 2509                             		.loc 2 5501 24
 2510 00c2 ED A4 07                		mov.L	28[r10], r4
 2511 00c5 62 25                   		add	#2, r5
 2512 00c7 FE 25 43                		mov.L	r3, [r5,r4]
 2513                             	.L207:
5502:../src/wolfcrypt/src/sp_int.c ****         #else
5503:../src/wolfcrypt/src/sp_int.c ****             r->dp[o++] = l;
5504:../src/wolfcrypt/src/sp_int.c ****         #endif
5505:../src/wolfcrypt/src/sp_int.c ****         }
5506:../src/wolfcrypt/src/sp_int.c ****     }
5507:../src/wolfcrypt/src/sp_int.c ****     r->used = o;
 2514                             		.loc 2 5507 13
 2515 00ca ED A5 07                		mov.L	28[r10], r5
 2516 00cd ED A4 08                		mov.L	32[r10], r4
 2517 00d0 E3 54                   		mov.L	r4, [r5]
 2518                             	.LBB13:
5508:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(r);
 2519                             		.loc 2 5508 5
 2520 00d2 ED A5 07                		mov.L	28[r10], r5
 2521 00d5 EC 55                   		mov.L	[r5], r5
 2522 00d7 60 15                   		sub	#1, r5
 2523 00d9 E7 A5 04                		mov.L	r5, 16[r10]
 2524 00dc 09                      		bra	.L210
 2525                             	.L212:
 2526                             		.loc 2 5508 5 is_stmt 0 discriminator 5
 2527 00dd ED A5 04                		mov.L	16[r10], r5
 2528 00e0 60 15                   		sub	#1, r5
 2529 00e2 E7 A5 04                		mov.L	r5, 16[r10]
 2530                             	.L210:
 2531                             		.loc 2 5508 5 discriminator 1
 2532 00e5 ED A5 04                		mov.L	16[r10], r5
 2533 00e8 61 05                   		cmp	#0, r5
 2534 00ea 29 11                   		blt	.L211
 2535                             		.loc 2 5508 5 discriminator 3
 2536 00ec ED A4 07                		mov.L	28[r10], r4
 2537 00ef ED A5 04                		mov.L	16[r10], r5
 2538 00f2 62 25                   		add	#2, r5
 2539 00f4 FE 65 45                		mov.L	[r5,r4], r5
 2540 00f7 61 05                   		cmp	#0, r5
 2541 00f9 20 E4                   		beq	.L212
 2542                             	.L211:
 2543                             		.loc 2 5508 5 discriminator 6
 2544 00fb ED A5 04                		mov.L	16[r10], r5
 2545 00fe 71 54 01                		add	#1, r5, r4
 2546 0101 ED A5 07                		mov.L	28[r10], r5
 2547 0104 E3 54                   		mov.L	r4, [r5]
 2548                             	.LBE13:
5509:../src/wolfcrypt/src/sp_int.c **** 
5510:../src/wolfcrypt/src/sp_int.c ****     return err;
 2549                             		.loc 2 5510 12 is_stmt 1 discriminator 6
 2550 0106 EC A5                   		mov.L	[r10], r5
5511:../src/wolfcrypt/src/sp_int.c **** }
 2551                             		.loc 2 5511 1 discriminator 6
 2552 0108 EF 51                   		mov.L	r5, r1
 2553 010a 3F 6C 10                		rtsd	#64, r6-r12
 2554                             	.LFE73:
 2556                             		.section	.text.sp_mul_d,"ax",@progbits
 2557                             		.global	_sp_mul_d
 2559                             	_sp_mul_d:
 2560                             	.LFB74:
5512:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY) ||
5513:../src/wolfcrypt/src/sp_int.c ****         *  WOLFSSL_SP_SMALL || (WOLFSSL_KEY_GEN && !NO_RSA) */
5514:../src/wolfcrypt/src/sp_int.c **** 
5515:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
5516:../src/wolfcrypt/src/sp_int.c ****     (defined(WOLFSSL_KEY_GEN) && !defined(NO_RSA))
5517:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by digit n and put result into r. r = a * n
5518:../src/wolfcrypt/src/sp_int.c ****  *
5519:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
5520:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   n  Digit to multiply by.
5521:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
5522:../src/wolfcrypt/src/sp_int.c ****  *
5523:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
5524:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or b is NULL, or a has maximum number of digits used.
5525:../src/wolfcrypt/src/sp_int.c ****  */
5526:../src/wolfcrypt/src/sp_int.c **** int sp_mul_d(sp_int* a, sp_int_digit d, sp_int* r)
5527:../src/wolfcrypt/src/sp_int.c **** {
 2561                             		.loc 2 5527 1
 2562 0000 7E AA                   		push.l	r10
 2563                             	.LCFI69:
 2564 0002 71 0A F0                		add	#-16, r0, r10
 2565                             	.LCFI70:
 2566 0005 EF A0                   		mov.L	r10, r0
 2567 0007 E7 A1 01                		mov.L	r1, 4[r10]
 2568 000a E7 A2 02                		mov.L	r2, 8[r10]
 2569 000d E7 A3 03                		mov.L	r3, 12[r10]
5528:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 2570                             		.loc 2 5528 9
 2571 0010 F8 A6 00                		mov.L	#0, [r10]
5529:../src/wolfcrypt/src/sp_int.c **** 
5530:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (r == NULL)) {
 2572                             		.loc 2 5530 8
 2573 0013 ED A5 01                		mov.L	4[r10], r5
 2574 0016 61 05                   		cmp	#0, r5
 2575 0018 17                      		beq	.L215
 2576                             		.loc 2 5530 21 discriminator 1
 2577 0019 ED A5 03                		mov.L	12[r10], r5
 2578 001c 61 05                   		cmp	#0, r5
 2579 001e 1C                      		bne	.L216
 2580                             	.L215:
5531:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 2581                             		.loc 2 5531 13
 2582 001f F8 A6 FD                		mov.L	#-3, [r10]
 2583                             	.L216:
5532:../src/wolfcrypt/src/sp_int.c ****     }
5533:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (a->used + 1 > r->size)) {
 2584                             		.loc 2 5533 8
 2585 0022 EC A5                   		mov.L	[r10], r5
 2586 0024 61 05                   		cmp	#0, r5
 2587 0026 21 13                   		bne	.L217
 2588                             		.loc 2 5533 31 discriminator 1
 2589 0028 ED A5 01                		mov.L	4[r10], r5
 2590 002b EC 54                   		mov.L	[r5], r4
 2591                             		.loc 2 5533 45 discriminator 1
 2592 002d ED A5 03                		mov.L	12[r10], r5
 2593 0030 A8 5D                   		mov.L	4[r5], r5
 2594                             		.loc 2 5533 26 discriminator 1
 2595 0032 47 54                   		cmp	r5, r4
 2596 0034 29 05                   		blt	.L217
5534:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 2597                             		.loc 2 5534 13
 2598 0036 F8 A6 FD                		mov.L	#-3, [r10]
 2599                             	.L217:
5535:../src/wolfcrypt/src/sp_int.c ****     }
5536:../src/wolfcrypt/src/sp_int.c **** 
5537:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 2600                             		.loc 2 5537 8
 2601 0039 EC A5                   		mov.L	[r10], r5
 2602 003b 61 05                   		cmp	#0, r5
 2603 003d 21 13                   		bne	.L218
5538:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_d(a, d, r, 0);
 2604                             		.loc 2 5538 15
 2605 003f 66 04                   		mov.L	#0, r4
 2606 0041 ED A3 03                		mov.L	12[r10], r3
 2607 0044 ED A2 02                		mov.L	8[r10], r2
 2608 0047 ED A1 01                		mov.L	4[r10], r1
 2609 004a 05 00 00 00             		bsr	__sp_mul_d
 2610 004e E3 A1                   		mov.L	r1, [r10]
 2611                             	.L218:
5539:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
5540:../src/wolfcrypt/src/sp_int.c ****         if (d == 0) {
5541:../src/wolfcrypt/src/sp_int.c ****             r->sign = MP_ZPOS;
5542:../src/wolfcrypt/src/sp_int.c ****         }
5543:../src/wolfcrypt/src/sp_int.c ****         else {
5544:../src/wolfcrypt/src/sp_int.c ****             r->sign = a->sign;
5545:../src/wolfcrypt/src/sp_int.c ****         }
5546:../src/wolfcrypt/src/sp_int.c ****     #endif
5547:../src/wolfcrypt/src/sp_int.c ****     }
5548:../src/wolfcrypt/src/sp_int.c **** 
5549:../src/wolfcrypt/src/sp_int.c ****     return err;
 2612                             		.loc 2 5549 12
 2613 0050 EC A5                   		mov.L	[r10], r5
5550:../src/wolfcrypt/src/sp_int.c **** }
 2614                             		.loc 2 5550 1
 2615 0052 EF 51                   		mov.L	r5, r1
 2616 0054 3F AA 05                		rtsd	#20, r10-r10
 2617                             	.LFE74:
 2619                             		.global	___udivdi3
 2620                             		.section	.text.sp_div_word,"ax",@progbits
 2622                             	_sp_div_word:
 2623                             	.LFB75:
5551:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY) ||
5552:../src/wolfcrypt/src/sp_int.c ****         * (WOLFSSL_KEY_GEN && !NO_RSA) */
5553:../src/wolfcrypt/src/sp_int.c **** 
5554:../src/wolfcrypt/src/sp_int.c **** /* Predefine complicated rules of when to compile in sp_div_d and sp_mod_d. */
5555:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
5556:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_KEY_GEN) || defined(HAVE_COMP_KEY) || \
5557:../src/wolfcrypt/src/sp_int.c ****     defined(WC_MP_TO_RADIX)
5558:../src/wolfcrypt/src/sp_int.c **** #define WOLFSSL_SP_DIV_D
5559:../src/wolfcrypt/src/sp_int.c **** #endif
5560:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
5561:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_DH) || \
5562:../src/wolfcrypt/src/sp_int.c ****     (defined(HAVE_ECC) && (defined(FP_ECC) || defined(HAVE_COMP_KEY))) || \
5563:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && defined(WOLFSSL_KEY_GEN))
5564:../src/wolfcrypt/src/sp_int.c **** #define WOLFSSL_SP_MOD_D
5565:../src/wolfcrypt/src/sp_int.c **** #endif
5566:../src/wolfcrypt/src/sp_int.c **** 
5567:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) || !defined(NO_DH) || defined(HAVE_ECC) || \
5568:../src/wolfcrypt/src/sp_int.c ****      (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY) && \
5569:../src/wolfcrypt/src/sp_int.c ****       !defined(WOLFSSL_RSA_PUBLIC_ONLY))) || \
5570:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_SP_DIV_D) || defined(WOLFSSL_SP_MOD_D)
5571:../src/wolfcrypt/src/sp_int.c **** #ifndef SP_ASM_DIV_WORD
5572:../src/wolfcrypt/src/sp_int.c **** /* Divide a two digit number by a digit number and return. (hi | lo) / d
5573:../src/wolfcrypt/src/sp_int.c ****  *
5574:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  hi  SP integer digit. High digit of the dividend.
5575:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  lo  SP integer digit. Lower digit of the dividend.
5576:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  d   SP integer digit. Number to divide by.
5577:../src/wolfcrypt/src/sp_int.c ****  * @return  The division result.
5578:../src/wolfcrypt/src/sp_int.c ****  */
5579:../src/wolfcrypt/src/sp_int.c **** static WC_INLINE sp_int_digit sp_div_word(sp_int_digit hi, sp_int_digit lo,
5580:../src/wolfcrypt/src/sp_int.c ****                                           sp_int_digit d)
5581:../src/wolfcrypt/src/sp_int.c **** {
 2624                             		.loc 2 5581 1
 2625 0000 6E 6D                   		pushm	r6-r13
 2626                             	.LCFI71:
 2627 0002 71 0A E8                		add	#-24, r0, r10
 2628                             	.LCFI72:
 2629 0005 EF A0                   		mov.L	r10, r0
 2630 0007 E7 A1 03                		mov.L	r1, 12[r10]
 2631 000a E7 A2 04                		mov.L	r2, 16[r10]
 2632 000d E7 A3 05                		mov.L	r3, 20[r10]
5582:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_DIV_WORD_HALF
5583:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit r;
5584:../src/wolfcrypt/src/sp_int.c **** 
5585:../src/wolfcrypt/src/sp_int.c ****     if (hi != 0) {
5586:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit divsz = d >> SP_HALF_SIZE;
5587:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit r2;
5588:../src/wolfcrypt/src/sp_int.c ****         sp_int_word w = ((sp_int_word)hi << SP_WORD_SIZE) | lo;
5589:../src/wolfcrypt/src/sp_int.c ****         sp_int_word trial;
5590:../src/wolfcrypt/src/sp_int.c **** 
5591:../src/wolfcrypt/src/sp_int.c ****         r = hi / divsz;
5592:../src/wolfcrypt/src/sp_int.c ****         if (r > SP_HALF_MAX) {
5593:../src/wolfcrypt/src/sp_int.c ****             r = SP_HALF_MAX;
5594:../src/wolfcrypt/src/sp_int.c ****         }
5595:../src/wolfcrypt/src/sp_int.c ****         r <<= SP_HALF_SIZE;
5596:../src/wolfcrypt/src/sp_int.c ****         trial = r * (sp_int_word)d;
5597:../src/wolfcrypt/src/sp_int.c ****         while (trial > w) {
5598:../src/wolfcrypt/src/sp_int.c ****             r -= (sp_int_digit)1 << SP_HALF_SIZE;
5599:../src/wolfcrypt/src/sp_int.c ****             trial -= (sp_int_word)d << SP_HALF_SIZE;
5600:../src/wolfcrypt/src/sp_int.c ****         }
5601:../src/wolfcrypt/src/sp_int.c ****         w -= trial;
5602:../src/wolfcrypt/src/sp_int.c ****         r2 = ((sp_int_digit)(w >> SP_HALF_SIZE)) / divsz;
5603:../src/wolfcrypt/src/sp_int.c ****         trial = r2 * (sp_int_word)d;
5604:../src/wolfcrypt/src/sp_int.c ****         while (trial > w) {
5605:../src/wolfcrypt/src/sp_int.c ****             r2--;
5606:../src/wolfcrypt/src/sp_int.c ****             trial -= d;
5607:../src/wolfcrypt/src/sp_int.c ****         }
5608:../src/wolfcrypt/src/sp_int.c ****         w -= trial;
5609:../src/wolfcrypt/src/sp_int.c ****         r += r2;
5610:../src/wolfcrypt/src/sp_int.c ****         r2 = ((sp_int_digit)w) / d;
5611:../src/wolfcrypt/src/sp_int.c ****         r += r2;
5612:../src/wolfcrypt/src/sp_int.c ****     }
5613:../src/wolfcrypt/src/sp_int.c ****     else {
5614:../src/wolfcrypt/src/sp_int.c ****         r = lo / d;
5615:../src/wolfcrypt/src/sp_int.c ****     }
5616:../src/wolfcrypt/src/sp_int.c **** 
5617:../src/wolfcrypt/src/sp_int.c ****     return r;
5618:../src/wolfcrypt/src/sp_int.c **** #else
5619:../src/wolfcrypt/src/sp_int.c ****     sp_int_word w;
5620:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit r;
5621:../src/wolfcrypt/src/sp_int.c **** 
5622:../src/wolfcrypt/src/sp_int.c ****     w = ((sp_int_word)hi << SP_WORD_SIZE) | lo;
 2633                             		.loc 2 5622 10
 2634 0010 ED A4 03                		mov.L	12[r10], r4
 2635 0013 EF 4D                   		mov.L	r4, r13
 2636 0015 66 0E                   		mov.L	#0, r14
 2637                             		.loc 2 5622 26
 2638 0017 FD C0 D6                		shll	#0, r13, r6
 2639 001a 66 05                   		mov.L	#0, r5
 2640                             		.loc 2 5622 43
 2641 001c ED A4 04                		mov.L	16[r10], r4
 2642 001f EF 4B                   		mov.L	r4, r11
 2643 0021 66 0C                   		mov.L	#0, r12
 2644                             		.loc 2 5622 7
 2645 0023 FF 54 B5                		or	r11, r5, r4
 2646 0026 E3 A4                   		mov.L	r4, [r10]
 2647 0028 FF 55 C6                		or	r12, r6, r5
 2648 002b E7 A5 01                		mov.L	r5, 4[r10]
5623:../src/wolfcrypt/src/sp_int.c ****     w /= d;
 2649                             		.loc 2 5623 7
 2650 002e ED A5 05                		mov.L	20[r10], r5
 2651 0031 EF 58                   		mov.L	r5, r8
 2652 0033 66 09                   		mov.L	#0, r9
 2653 0035 EF 83                   		mov.L	r8, r3
 2654 0037 EF 94                   		mov.L	r9, r4
 2655 0039 EC A1                   		mov.L	[r10], r1
 2656 003b ED A2 01                		mov.L	4[r10], r2
 2657 003e 05 00 00 00             		bsr	___udivdi3
 2658                             	.LVL0:
 2659 0042 EF 15                   		mov.L	r1, r5
 2660 0044 EF 26                   		mov.L	r2, r6
 2661 0046 E3 A5                   		mov.L	r5, [r10]
 2662 0048 E7 A6 01                		mov.L	r6, 4[r10]
5624:../src/wolfcrypt/src/sp_int.c ****     r = (sp_int_digit)w;
 2663                             		.loc 2 5624 7
 2664 004b EC A5                   		mov.L	[r10], r5
 2665 004d E7 A5 02                		mov.L	r5, 8[r10]
5625:../src/wolfcrypt/src/sp_int.c **** 
5626:../src/wolfcrypt/src/sp_int.c ****     return r;
 2666                             		.loc 2 5626 12
 2667 0050 ED A5 02                		mov.L	8[r10], r5
5627:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_DIV_WORD_HALF */
5628:../src/wolfcrypt/src/sp_int.c **** }
 2668                             		.loc 2 5628 1
 2669 0053 EF 51                   		mov.L	r5, r1
 2670 0055 3F 6D 0E                		rtsd	#56, r6-r13
 2671                             	.LFE75:
 2673                             		.section	.text._sp_div_3,"ax",@progbits
 2675                             	__sp_div_3:
 2676                             	.LFB76:
5629:../src/wolfcrypt/src/sp_int.c **** #endif /* !SP_ASM_DIV_WORD */
5630:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || !NO_DH || HAVE_ECC ||
5631:../src/wolfcrypt/src/sp_int.c ****         * (!NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY) */
5632:../src/wolfcrypt/src/sp_int.c **** 
5633:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_DIV_D) || defined(WOLFSSL_SP_MOD_D)) && \
5634:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_SP_SMALL)
5635:../src/wolfcrypt/src/sp_int.c **** 
5636:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 64
5637:../src/wolfcrypt/src/sp_int.c ****     #define SP_DIV_3_CONST      0x5555555555555555L
5638:../src/wolfcrypt/src/sp_int.c ****     #define SP_DIV_10_CONST     0x1999999999999999L
5639:../src/wolfcrypt/src/sp_int.c **** #elif SP_WORD_SIZE == 32
5640:../src/wolfcrypt/src/sp_int.c ****     #define SP_DIV_3_CONST      0x55555555
5641:../src/wolfcrypt/src/sp_int.c ****     #define SP_DIV_10_CONST     0x19999999
5642:../src/wolfcrypt/src/sp_int.c **** #elif SP_WORD_SIZE == 16
5643:../src/wolfcrypt/src/sp_int.c ****     #define SP_DIV_3_CONST      0x5555
5644:../src/wolfcrypt/src/sp_int.c ****     #define SP_DIV_10_CONST     0x1999
5645:../src/wolfcrypt/src/sp_int.c **** #elif SP_WORD_SIZE == 8
5646:../src/wolfcrypt/src/sp_int.c ****     #define SP_DIV_3_CONST      0x55
5647:../src/wolfcrypt/src/sp_int.c ****     #define SP_DIV_10_CONST     0x19
5648:../src/wolfcrypt/src/sp_int.c **** #endif
5649:../src/wolfcrypt/src/sp_int.c **** 
5650:../src/wolfcrypt/src/sp_int.c **** /* Divide by 3: r = a / 3 and rem = a % 3
5651:../src/wolfcrypt/src/sp_int.c ****  *
5652:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer to be divided.
5653:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r    SP integer that is the quotient. May be NULL.
5654:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  rem  SP integer that is the remainder. May be NULL.
5655:../src/wolfcrypt/src/sp_int.c ****  */
5656:../src/wolfcrypt/src/sp_int.c **** static void _sp_div_3(sp_int* a, sp_int* r, sp_int_digit* rem)
5657:../src/wolfcrypt/src/sp_int.c **** {
 2677                             		.loc 2 5657 1
 2678 0000 6E 6D                   		pushm	r6-r13
 2679                             	.LCFI73:
 2680 0002 71 0A B4                		add	#-76, r0, r10
 2681                             	.LCFI74:
 2682 0005 EF A0                   		mov.L	r10, r0
 2683 0007 E7 A1 06                		mov.L	r1, 24[r10]
 2684 000a E7 A2 07                		mov.L	r2, 28[r10]
 2685 000d E7 A3 08                		mov.L	r3, 32[r10]
5658:../src/wolfcrypt/src/sp_int.c ****     int i;
5659:../src/wolfcrypt/src/sp_int.c **** #ifndef SQR_MUL_ASM
5660:../src/wolfcrypt/src/sp_int.c ****     sp_int_word t;
5661:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tt;
5662:../src/wolfcrypt/src/sp_int.c **** #else
5663:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
5664:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tt = 0;
5665:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t;
5666:../src/wolfcrypt/src/sp_int.c **** #endif
5667:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tr = 0;
 2686                             		.loc 2 5667 18
 2687 0010 F9 A6 01 00             		mov.L	#0, 4[r10]
5668:../src/wolfcrypt/src/sp_int.c ****     static const unsigned char sp_r6[6] = { 0, 0, 0, 1, 1, 1 };
5669:../src/wolfcrypt/src/sp_int.c ****     static const unsigned char sp_rem6[6] = { 0, 1, 2, 0, 1, 2 };
5670:../src/wolfcrypt/src/sp_int.c **** 
5671:../src/wolfcrypt/src/sp_int.c ****     if (r == NULL) {
 2688                             		.loc 2 5671 8
 2689 0014 ED A5 07                		mov.L	28[r10], r5
 2690 0017 61 05                   		cmp	#0, r5
 2691 0019 3B AA 00                		bne	.L223
5672:../src/wolfcrypt/src/sp_int.c ****         for (i = a->used - 1; i >= 0; i--) {
 2692                             		.loc 2 5672 19
 2693 001c ED A5 06                		mov.L	24[r10], r5
 2694 001f EC 55                   		mov.L	[r5], r5
 2695                             		.loc 2 5672 16
 2696 0021 60 15                   		sub	#1, r5
 2697 0023 E3 A5                   		mov.L	r5, [r10]
 2698                             		.loc 2 5672 9
 2699 0025 38 8A 00                		bra	.L224
 2700                             	.L225:
5673:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
5674:../src/wolfcrypt/src/sp_int.c ****             t = ((sp_int_word)tr << SP_WORD_SIZE) | a->dp[i];
 2701                             		.loc 2 5674 18 discriminator 3
 2702 0028 ED A5 01                		mov.L	4[r10], r5
 2703 002b E7 A5 09                		mov.L	r5, 36[r10]
 2704 002e F9 A6 0A 00             		mov.L	#0, 40[r10]
 2705                             		.loc 2 5674 34 discriminator 3
 2706 0032 ED A9 09                		mov.L	36[r10], r9
 2707 0035 6C 09                   		shll	#0, r9
 2708 0037 66 08                   		mov.L	#0, r8
 2709                             		.loc 2 5674 58 discriminator 3
 2710 0039 ED A4 06                		mov.L	24[r10], r4
 2711 003c EC A5                   		mov.L	[r10], r5
 2712 003e 62 25                   		add	#2, r5
 2713 0040 FE 65 45                		mov.L	[r5,r4], r5
 2714 0043 E7 A5 0B                		mov.L	r5, 44[r10]
 2715 0046 F9 A6 0C 00             		mov.L	#0, 48[r10]
 2716                             		.loc 2 5674 15 discriminator 3
 2717 004a ED A5 0B                		mov.L	44[r10], r5
 2718 004d 57 85                   		or	r8, r5
 2719 004f E7 A5 03                		mov.L	r5, 12[r10]
 2720 0052 ED A5 0C                		mov.L	48[r10], r5
 2721 0055 57 95                   		or	r9, r5
 2722 0057 E7 A5 04                		mov.L	r5, 16[r10]
5675:../src/wolfcrypt/src/sp_int.c ****             tt = (t * SP_DIV_3_CONST) >> SP_WORD_SIZE;
 2723                             		.loc 2 5675 21 discriminator 3
 2724 005a ED A5 04                		mov.L	16[r10], r5
 2725 005d FB 42 55 55 55 55       		mov.L	#0x55555555, r4
 2726 0063 4F 54                   		mul	r5, r4
 2727 0065 ED A5 03                		mov.L	12[r10], r5
 2728 0068 63 05                   		mul	#0, r5
 2729 006a 4B 54                   		add	r5, r4
 2730 006c ED A3 03                		mov.L	12[r10], r3
 2731 006f FB 52 55 55 55 55       		mov.L	#0x55555555, r5
 2732 0075 FC 1F 35                		emulu	r3, r5
 2733 0078 4B 64                   		add	r6, r4
 2734 007a EF 46                   		mov.L	r4, r6
 2735                             		.loc 2 5675 39 discriminator 3
 2736 007c FD 80 67                		shlr	#0, r6, r7
 2737 007f E7 A7 0D                		mov.L	r7, 52[r10]
 2738 0082 F9 A6 0E 00             		mov.L	#0, 56[r10]
 2739                             		.loc 2 5675 16 discriminator 3
 2740 0086 E5 AA 0D 05             		mov.L	52[r10], 20[r10]
5676:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - (sp_int_word)tt * 3);
 2741                             		.loc 2 5676 18 discriminator 3
 2742 008a ED A4 03                		mov.L	12[r10], r4
 2743                             		.loc 2 5676 53 discriminator 3
 2744 008d ED A5 05                		mov.L	20[r10], r5
 2745 0090 63 35                   		mul	#3, r5
 2746                             		.loc 2 5676 16 discriminator 3
 2747 0092 FF 05 54                		sub	r5, r4, r5
 2748 0095 E7 A5 01                		mov.L	r5, 4[r10]
5677:../src/wolfcrypt/src/sp_int.c ****     #else
5678:../src/wolfcrypt/src/sp_int.c ****             t = SP_DIV_3_CONST;
5679:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL(l, tt, a->dp[i], t);
5680:../src/wolfcrypt/src/sp_int.c ****             tt += tr * SP_DIV_3_CONST;
5681:../src/wolfcrypt/src/sp_int.c ****             tr = a->dp[i] - (tt * 3);
5682:../src/wolfcrypt/src/sp_int.c ****     #endif
5683:../src/wolfcrypt/src/sp_int.c ****             tr = sp_rem6[tr];
 2749                             		.loc 2 5683 25 discriminator 3
 2750 0098 FB 52 00 00 00 00       		mov.L	#_sp_rem6.3867, r5
 2751 009e 06 89 A5 01             		add	4[r10].L, r5
 2752 00a2 CC 55                   		mov.B	[r5], r5
 2753                             		.loc 2 5683 16 discriminator 3
 2754 00a4 5B 55                   		movu.B	r5, r5
 2755 00a6 E7 A5 01                		mov.L	r5, 4[r10]
5672:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2756                             		.loc 2 5672 40 discriminator 3
 2757 00a9 EC A5                   		mov.L	[r10], r5
 2758 00ab 60 15                   		sub	#1, r5
 2759 00ad E3 A5                   		mov.L	r5, [r10]
 2760                             	.L224:
5672:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2761                             		.loc 2 5672 9 discriminator 1
 2762 00af EC A5                   		mov.L	[r10], r5
 2763 00b1 61 05                   		cmp	#0, r5
 2764 00b3 29 05 38 73 FF          		bge	.L225
5684:../src/wolfcrypt/src/sp_int.c ****         }
5685:../src/wolfcrypt/src/sp_int.c ****         *rem = tr;
 2765                             		.loc 2 5685 14
 2766 00b8 ED A5 08                		mov.L	32[r10], r5
 2767 00bb ED A4 01                		mov.L	4[r10], r4
 2768 00be E3 54                   		mov.L	r4, [r5]
5686:../src/wolfcrypt/src/sp_int.c ****     }
5687:../src/wolfcrypt/src/sp_int.c ****     else {
5688:../src/wolfcrypt/src/sp_int.c ****         for (i = a->used - 1; i >= 0; i--) {
5689:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
5690:../src/wolfcrypt/src/sp_int.c ****             t = ((sp_int_word)tr << SP_WORD_SIZE) | a->dp[i];
5691:../src/wolfcrypt/src/sp_int.c ****             tt = (t * SP_DIV_3_CONST) >> SP_WORD_SIZE;
5692:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - (sp_int_word)tt * 3);
5693:../src/wolfcrypt/src/sp_int.c ****     #else
5694:../src/wolfcrypt/src/sp_int.c ****             t = SP_DIV_3_CONST;
5695:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL(l, tt, a->dp[i], t);
5696:../src/wolfcrypt/src/sp_int.c ****             tt += tr * SP_DIV_3_CONST;
5697:../src/wolfcrypt/src/sp_int.c ****             tr = a->dp[i] - (tt * 3);
5698:../src/wolfcrypt/src/sp_int.c ****     #endif
5699:../src/wolfcrypt/src/sp_int.c ****             tt += sp_r6[tr];
5700:../src/wolfcrypt/src/sp_int.c ****             tr = sp_rem6[tr];
5701:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = tt;
5702:../src/wolfcrypt/src/sp_int.c ****         }
5703:../src/wolfcrypt/src/sp_int.c ****         r->used = a->used;
5704:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
5705:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
5706:../src/wolfcrypt/src/sp_int.c ****             *rem = tr;
5707:../src/wolfcrypt/src/sp_int.c ****         }
5708:../src/wolfcrypt/src/sp_int.c ****     }
5709:../src/wolfcrypt/src/sp_int.c **** }
 2769                             		.loc 2 5709 1
 2770 00c0 38 07 01                		bra	.L232
 2771                             	.L223:
5688:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2772                             		.loc 2 5688 19
 2773 00c3 ED A5 06                		mov.L	24[r10], r5
 2774 00c6 EC 55                   		mov.L	[r5], r5
5688:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2775                             		.loc 2 5688 16
 2776 00c8 60 15                   		sub	#1, r5
 2777 00ca E3 A5                   		mov.L	r5, [r10]
5688:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2778                             		.loc 2 5688 9
 2779 00cc 38 A6 00                		bra	.L227
 2780                             	.L228:
5690:../src/wolfcrypt/src/sp_int.c ****             tt = (t * SP_DIV_3_CONST) >> SP_WORD_SIZE;
 2781                             		.loc 2 5690 18 discriminator 3
 2782 00cf ED A5 01                		mov.L	4[r10], r5
 2783 00d2 E7 A5 0F                		mov.L	r5, 60[r10]
 2784 00d5 F9 A6 10 00             		mov.L	#0, 64[r10]
5690:../src/wolfcrypt/src/sp_int.c ****             tt = (t * SP_DIV_3_CONST) >> SP_WORD_SIZE;
 2785                             		.loc 2 5690 34 discriminator 3
 2786 00d9 ED AC 0F                		mov.L	60[r10], r12
 2787 00dc 6C 0C                   		shll	#0, r12
 2788 00de 66 0B                   		mov.L	#0, r11
5690:../src/wolfcrypt/src/sp_int.c ****             tt = (t * SP_DIV_3_CONST) >> SP_WORD_SIZE;
 2789                             		.loc 2 5690 58 discriminator 3
 2790 00e0 ED A4 06                		mov.L	24[r10], r4
 2791 00e3 EC A5                   		mov.L	[r10], r5
 2792 00e5 62 25                   		add	#2, r5
 2793 00e7 FE 65 45                		mov.L	[r5,r4], r5
 2794 00ea EF 5D                   		mov.L	r5, r13
 2795 00ec 66 0E                   		mov.L	#0, r14
5690:../src/wolfcrypt/src/sp_int.c ****             tt = (t * SP_DIV_3_CONST) >> SP_WORD_SIZE;
 2796                             		.loc 2 5690 15 discriminator 3
 2797 00ee FF 55 DB                		or	r13, r11, r5
 2798 00f1 E7 A5 03                		mov.L	r5, 12[r10]
 2799 00f4 FF 55 EC                		or	r14, r12, r5
 2800 00f7 E7 A5 04                		mov.L	r5, 16[r10]
5691:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - (sp_int_word)tt * 3);
 2801                             		.loc 2 5691 21 discriminator 3
 2802 00fa ED A5 04                		mov.L	16[r10], r5
 2803 00fd FB 42 55 55 55 55       		mov.L	#0x55555555, r4
 2804 0103 4F 54                   		mul	r5, r4
 2805 0105 ED A5 03                		mov.L	12[r10], r5
 2806 0108 63 05                   		mul	#0, r5
 2807 010a 4B 54                   		add	r5, r4
 2808 010c ED A3 03                		mov.L	12[r10], r3
 2809 010f FB 52 55 55 55 55       		mov.L	#0x55555555, r5
 2810 0115 FC 1F 35                		emulu	r3, r5
 2811 0118 4B 64                   		add	r6, r4
 2812 011a EF 46                   		mov.L	r4, r6
5691:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - (sp_int_word)tt * 3);
 2813                             		.loc 2 5691 39 discriminator 3
 2814 011c FD 80 67                		shlr	#0, r6, r7
 2815 011f E7 A7 11                		mov.L	r7, 68[r10]
 2816 0122 F9 A6 12 00             		mov.L	#0, 72[r10]
5691:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - (sp_int_word)tt * 3);
 2817                             		.loc 2 5691 16 discriminator 3
 2818 0126 E5 AA 11 05             		mov.L	68[r10], 20[r10]
5692:../src/wolfcrypt/src/sp_int.c ****     #else
 2819                             		.loc 2 5692 18 discriminator 3
 2820 012a ED A4 03                		mov.L	12[r10], r4
5692:../src/wolfcrypt/src/sp_int.c ****     #else
 2821                             		.loc 2 5692 53 discriminator 3
 2822 012d ED A5 05                		mov.L	20[r10], r5
 2823 0130 63 35                   		mul	#3, r5
5692:../src/wolfcrypt/src/sp_int.c ****     #else
 2824                             		.loc 2 5692 16 discriminator 3
 2825 0132 FF 05 54                		sub	r5, r4, r5
 2826 0135 E7 A5 01                		mov.L	r5, 4[r10]
5699:../src/wolfcrypt/src/sp_int.c ****             tr = sp_rem6[tr];
 2827                             		.loc 2 5699 24 discriminator 3
 2828 0138 FB 52 00 00 00 00       		mov.L	#_sp_r6.3866, r5
 2829 013e 06 89 A5 01             		add	4[r10].L, r5
 2830 0142 CC 55                   		mov.B	[r5], r5
 2831 0144 5B 55                   		movu.B	r5, r5
5699:../src/wolfcrypt/src/sp_int.c ****             tr = sp_rem6[tr];
 2832                             		.loc 2 5699 16 discriminator 3
 2833 0146 ED A4 05                		mov.L	20[r10], r4
 2834 0149 4B 45                   		add	r4, r5
 2835 014b E7 A5 05                		mov.L	r5, 20[r10]
5700:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = tt;
 2836                             		.loc 2 5700 25 discriminator 3
 2837 014e FB 52 00 00 00 00       		mov.L	#_sp_rem6.3867, r5
 2838 0154 06 89 A5 01             		add	4[r10].L, r5
 2839 0158 CC 55                   		mov.B	[r5], r5
5700:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = tt;
 2840                             		.loc 2 5700 16 discriminator 3
 2841 015a 5B 55                   		movu.B	r5, r5
 2842 015c E7 A5 01                		mov.L	r5, 4[r10]
5701:../src/wolfcrypt/src/sp_int.c ****         }
 2843                             		.loc 2 5701 22 discriminator 3
 2844 015f ED A4 07                		mov.L	28[r10], r4
 2845 0162 EC A5                   		mov.L	[r10], r5
 2846 0164 62 25                   		add	#2, r5
 2847 0166 ED A3 05                		mov.L	20[r10], r3
 2848 0169 FE 25 43                		mov.L	r3, [r5,r4]
5688:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2849                             		.loc 2 5688 40 discriminator 3
 2850 016c EC A5                   		mov.L	[r10], r5
 2851 016e 60 15                   		sub	#1, r5
 2852 0170 E3 A5                   		mov.L	r5, [r10]
 2853                             	.L227:
5688:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2854                             		.loc 2 5688 9 discriminator 1
 2855 0172 EC A5                   		mov.L	[r10], r5
 2856 0174 61 05                   		cmp	#0, r5
 2857 0176 29 05 38 57 FF          		bge	.L228
5703:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
 2858                             		.loc 2 5703 20
 2859 017b ED A5 06                		mov.L	24[r10], r5
 2860 017e EC 54                   		mov.L	[r5], r4
5703:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
 2861                             		.loc 2 5703 17
 2862 0180 ED A5 07                		mov.L	28[r10], r5
 2863 0183 E3 54                   		mov.L	r4, [r5]
 2864                             	.LBB14:
5704:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 2865                             		.loc 2 5704 9
 2866 0185 ED A5 07                		mov.L	28[r10], r5
 2867 0188 EC 55                   		mov.L	[r5], r5
 2868 018a 60 15                   		sub	#1, r5
 2869 018c E7 A5 02                		mov.L	r5, 8[r10]
 2870 018f 09                      		bra	.L229
 2871                             	.L231:
5704:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 2872                             		.loc 2 5704 9 is_stmt 0 discriminator 5
 2873 0190 ED A5 02                		mov.L	8[r10], r5
 2874 0193 60 15                   		sub	#1, r5
 2875 0195 E7 A5 02                		mov.L	r5, 8[r10]
 2876                             	.L229:
5704:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 2877                             		.loc 2 5704 9 discriminator 1
 2878 0198 ED A5 02                		mov.L	8[r10], r5
 2879 019b 61 05                   		cmp	#0, r5
 2880 019d 29 11                   		blt	.L230
5704:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 2881                             		.loc 2 5704 9 discriminator 3
 2882 019f ED A4 07                		mov.L	28[r10], r4
 2883 01a2 ED A5 02                		mov.L	8[r10], r5
 2884 01a5 62 25                   		add	#2, r5
 2885 01a7 FE 65 45                		mov.L	[r5,r4], r5
 2886 01aa 61 05                   		cmp	#0, r5
 2887 01ac 20 E4                   		beq	.L231
 2888                             	.L230:
5704:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 2889                             		.loc 2 5704 9 discriminator 6
 2890 01ae ED A5 02                		mov.L	8[r10], r5
 2891 01b1 71 54 01                		add	#1, r5, r4
 2892 01b4 ED A5 07                		mov.L	28[r10], r5
 2893 01b7 E3 54                   		mov.L	r4, [r5]
 2894                             	.LBE14:
5705:../src/wolfcrypt/src/sp_int.c ****             *rem = tr;
 2895                             		.loc 2 5705 12 is_stmt 1 discriminator 6
 2896 01b9 ED A5 08                		mov.L	32[r10], r5
 2897 01bc 61 05                   		cmp	#0, r5
 2898 01be 11                      		beq	.L232
5706:../src/wolfcrypt/src/sp_int.c ****         }
 2899                             		.loc 2 5706 18
 2900 01bf ED A5 08                		mov.L	32[r10], r5
 2901 01c2 ED A4 01                		mov.L	4[r10], r4
 2902 01c5 E3 54                   		mov.L	r4, [r5]
 2903                             	.L232:
 2904                             		.loc 2 5709 1
 2905 01c7 03                      		nop
 2906 01c8 3F 6D 1B                		rtsd	#108, r6-r13
 2907                             	.LFE76:
 2909                             		.section	.text._sp_div_10,"ax",@progbits
 2911                             	__sp_div_10:
 2912                             	.LFB77:
5710:../src/wolfcrypt/src/sp_int.c **** 
5711:../src/wolfcrypt/src/sp_int.c **** /* Divide by 10: r = a / 10 and rem = a % 10
5712:../src/wolfcrypt/src/sp_int.c ****  *
5713:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer to be divided.
5714:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r    SP integer that is the quotient. May be NULL.
5715:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  rem  SP integer that is the remainder. May be NULL.
5716:../src/wolfcrypt/src/sp_int.c ****  */
5717:../src/wolfcrypt/src/sp_int.c **** static void _sp_div_10(sp_int* a, sp_int* r, sp_int_digit* rem)
5718:../src/wolfcrypt/src/sp_int.c **** {
 2913                             		.loc 2 5718 1
 2914 0000 6E 6D                   		pushm	r6-r13
 2915                             	.LCFI75:
 2916 0002 71 0A B4                		add	#-76, r0, r10
 2917                             	.LCFI76:
 2918 0005 EF A0                   		mov.L	r10, r0
 2919 0007 E7 A1 06                		mov.L	r1, 24[r10]
 2920 000a E7 A2 07                		mov.L	r2, 28[r10]
 2921 000d E7 A3 08                		mov.L	r3, 32[r10]
5719:../src/wolfcrypt/src/sp_int.c ****     int i;
5720:../src/wolfcrypt/src/sp_int.c **** #ifndef SQR_MUL_ASM
5721:../src/wolfcrypt/src/sp_int.c ****     sp_int_word t;
5722:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tt;
5723:../src/wolfcrypt/src/sp_int.c **** #else
5724:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
5725:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tt = 0;
5726:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t;
5727:../src/wolfcrypt/src/sp_int.c **** #endif
5728:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tr = 0;
 2922                             		.loc 2 5728 18
 2923 0010 F9 A6 01 00             		mov.L	#0, 4[r10]
5729:../src/wolfcrypt/src/sp_int.c **** 
5730:../src/wolfcrypt/src/sp_int.c ****     if (r == NULL) {
 2924                             		.loc 2 5730 8
 2925 0014 ED A5 07                		mov.L	28[r10], r5
 2926 0017 61 05                   		cmp	#0, r5
 2927 0019 3B B0 00                		bne	.L234
5731:../src/wolfcrypt/src/sp_int.c ****         for (i = a->used - 1; i >= 0; i--) {
 2928                             		.loc 2 5731 19
 2929 001c ED A5 06                		mov.L	24[r10], r5
 2930 001f EC 55                   		mov.L	[r5], r5
 2931                             		.loc 2 5731 16
 2932 0021 60 15                   		sub	#1, r5
 2933 0023 E3 A5                   		mov.L	r5, [r10]
 2934                             		.loc 2 5731 9
 2935 0025 38 90 00                		bra	.L235
 2936                             	.L236:
5732:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
5733:../src/wolfcrypt/src/sp_int.c ****             t = ((sp_int_word)tr << SP_WORD_SIZE) | a->dp[i];
 2937                             		.loc 2 5733 18 discriminator 3
 2938 0028 ED A5 01                		mov.L	4[r10], r5
 2939 002b E7 A5 09                		mov.L	r5, 36[r10]
 2940 002e F9 A6 0A 00             		mov.L	#0, 40[r10]
 2941                             		.loc 2 5733 34 discriminator 3
 2942 0032 ED A9 09                		mov.L	36[r10], r9
 2943 0035 6C 09                   		shll	#0, r9
 2944 0037 66 08                   		mov.L	#0, r8
 2945                             		.loc 2 5733 58 discriminator 3
 2946 0039 ED A4 06                		mov.L	24[r10], r4
 2947 003c EC A5                   		mov.L	[r10], r5
 2948 003e 62 25                   		add	#2, r5
 2949 0040 FE 65 45                		mov.L	[r5,r4], r5
 2950 0043 E7 A5 0B                		mov.L	r5, 44[r10]
 2951 0046 F9 A6 0C 00             		mov.L	#0, 48[r10]
 2952                             		.loc 2 5733 15 discriminator 3
 2953 004a ED A5 0B                		mov.L	44[r10], r5
 2954 004d 57 85                   		or	r8, r5
 2955 004f E7 A5 03                		mov.L	r5, 12[r10]
 2956 0052 ED A5 0C                		mov.L	48[r10], r5
 2957 0055 57 95                   		or	r9, r5
 2958 0057 E7 A5 04                		mov.L	r5, 16[r10]
5734:../src/wolfcrypt/src/sp_int.c ****             tt = (t * SP_DIV_10_CONST) >> SP_WORD_SIZE;
 2959                             		.loc 2 5734 21 discriminator 3
 2960 005a ED A5 04                		mov.L	16[r10], r5
 2961 005d FB 42 99 99 99 19       		mov.L	#0x19999999, r4
 2962 0063 4F 54                   		mul	r5, r4
 2963 0065 ED A5 03                		mov.L	12[r10], r5
 2964 0068 63 05                   		mul	#0, r5
 2965 006a 4B 54                   		add	r5, r4
 2966 006c ED A3 03                		mov.L	12[r10], r3
 2967 006f FB 52 99 99 99 19       		mov.L	#0x19999999, r5
 2968 0075 FC 1F 35                		emulu	r3, r5
 2969 0078 4B 64                   		add	r6, r4
 2970 007a EF 46                   		mov.L	r4, r6
 2971                             		.loc 2 5734 40 discriminator 3
 2972 007c FD 80 67                		shlr	#0, r6, r7
 2973 007f E7 A7 0D                		mov.L	r7, 52[r10]
 2974 0082 F9 A6 0E 00             		mov.L	#0, 56[r10]
 2975                             		.loc 2 5734 16 discriminator 3
 2976 0086 E5 AA 0D 05             		mov.L	52[r10], 20[r10]
5735:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - (sp_int_word)tt * 10);
 2977                             		.loc 2 5735 18 discriminator 3
 2978 008a ED A4 03                		mov.L	12[r10], r4
 2979                             		.loc 2 5735 53 discriminator 3
 2980 008d ED A5 05                		mov.L	20[r10], r5
 2981 0090 63 A5                   		mul	#10, r5
 2982                             		.loc 2 5735 16 discriminator 3
 2983 0092 FF 05 54                		sub	r5, r4, r5
 2984 0095 E7 A5 01                		mov.L	r5, 4[r10]
5736:../src/wolfcrypt/src/sp_int.c ****     #else
5737:../src/wolfcrypt/src/sp_int.c ****             t = SP_DIV_10_CONST;
5738:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL(l, tt, a->dp[i], t);
5739:../src/wolfcrypt/src/sp_int.c ****             tt += tr * SP_DIV_10_CONST;
5740:../src/wolfcrypt/src/sp_int.c ****             tr = a->dp[i] - (tt * 10);
5741:../src/wolfcrypt/src/sp_int.c ****     #endif
5742:../src/wolfcrypt/src/sp_int.c ****             tr = tr % 10;
 2985                             		.loc 2 5742 16 discriminator 3
 2986 0098 ED A4 01                		mov.L	4[r10], r4
 2987 009b FB 52 CD CC CC CC       		mov.L	#-858993459, r5
 2988 00a1 FC 1F 45                		emulu	r4, r5
 2989 00a4 FD 83 65                		shlr	#3, r6, r5
 2990 00a7 63 A5                   		mul	#10, r5
 2991 00a9 FF 05 54                		sub	r5, r4, r5
 2992 00ac E7 A5 01                		mov.L	r5, 4[r10]
5731:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2993                             		.loc 2 5731 40 discriminator 3
 2994 00af EC A5                   		mov.L	[r10], r5
 2995 00b1 60 15                   		sub	#1, r5
 2996 00b3 E3 A5                   		mov.L	r5, [r10]
 2997                             	.L235:
5731:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 2998                             		.loc 2 5731 9 discriminator 1
 2999 00b5 EC A5                   		mov.L	[r10], r5
 3000 00b7 61 05                   		cmp	#0, r5
 3001 00b9 29 05 38 6D FF          		bge	.L236
5743:../src/wolfcrypt/src/sp_int.c ****         }
5744:../src/wolfcrypt/src/sp_int.c ****         *rem = tr;
 3002                             		.loc 2 5744 14
 3003 00be ED A5 08                		mov.L	32[r10], r5
 3004 00c1 ED A4 01                		mov.L	4[r10], r4
 3005 00c4 E3 54                   		mov.L	r4, [r5]
5745:../src/wolfcrypt/src/sp_int.c ****     }
5746:../src/wolfcrypt/src/sp_int.c ****     else {
5747:../src/wolfcrypt/src/sp_int.c ****         for (i = a->used - 1; i >= 0; i--) {
5748:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
5749:../src/wolfcrypt/src/sp_int.c ****             t = ((sp_int_word)tr << SP_WORD_SIZE) | a->dp[i];
5750:../src/wolfcrypt/src/sp_int.c ****             tt = (t * SP_DIV_10_CONST) >> SP_WORD_SIZE;
5751:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - (sp_int_word)tt * 10);
5752:../src/wolfcrypt/src/sp_int.c ****     #else
5753:../src/wolfcrypt/src/sp_int.c ****             t = SP_DIV_10_CONST;
5754:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL(l, tt, a->dp[i], t);
5755:../src/wolfcrypt/src/sp_int.c ****             tt += tr * SP_DIV_10_CONST;
5756:../src/wolfcrypt/src/sp_int.c ****             tr = a->dp[i] - (tt * 10);
5757:../src/wolfcrypt/src/sp_int.c ****     #endif
5758:../src/wolfcrypt/src/sp_int.c ****             tt += tr / 10;
5759:../src/wolfcrypt/src/sp_int.c ****             tr = tr % 10;
5760:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = tt;
5761:../src/wolfcrypt/src/sp_int.c ****         }
5762:../src/wolfcrypt/src/sp_int.c ****         r->used = a->used;
5763:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
5764:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
5765:../src/wolfcrypt/src/sp_int.c ****             *rem = tr;
5766:../src/wolfcrypt/src/sp_int.c ****         }
5767:../src/wolfcrypt/src/sp_int.c ****     }
5768:../src/wolfcrypt/src/sp_int.c **** }
 3006                             		.loc 2 5768 1
 3007 00c6 38 0E 01                		bra	.L243
 3008                             	.L234:
5747:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 3009                             		.loc 2 5747 19
 3010 00c9 ED A5 06                		mov.L	24[r10], r5
 3011 00cc EC 55                   		mov.L	[r5], r5
5747:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 3012                             		.loc 2 5747 16
 3013 00ce 60 15                   		sub	#1, r5
 3014 00d0 E3 A5                   		mov.L	r5, [r10]
5747:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 3015                             		.loc 2 5747 9
 3016 00d2 38 AD 00                		bra	.L238
 3017                             	.L239:
5749:../src/wolfcrypt/src/sp_int.c ****             tt = (t * SP_DIV_10_CONST) >> SP_WORD_SIZE;
 3018                             		.loc 2 5749 18 discriminator 3
 3019 00d5 ED A5 01                		mov.L	4[r10], r5
 3020 00d8 E7 A5 0F                		mov.L	r5, 60[r10]
 3021 00db F9 A6 10 00             		mov.L	#0, 64[r10]
5749:../src/wolfcrypt/src/sp_int.c ****             tt = (t * SP_DIV_10_CONST) >> SP_WORD_SIZE;
 3022                             		.loc 2 5749 34 discriminator 3
 3023 00df ED AC 0F                		mov.L	60[r10], r12
 3024 00e2 6C 0C                   		shll	#0, r12
 3025 00e4 66 0B                   		mov.L	#0, r11
5749:../src/wolfcrypt/src/sp_int.c ****             tt = (t * SP_DIV_10_CONST) >> SP_WORD_SIZE;
 3026                             		.loc 2 5749 58 discriminator 3
 3027 00e6 ED A4 06                		mov.L	24[r10], r4
 3028 00e9 EC A5                   		mov.L	[r10], r5
 3029 00eb 62 25                   		add	#2, r5
 3030 00ed FE 65 45                		mov.L	[r5,r4], r5
 3031 00f0 EF 5D                   		mov.L	r5, r13
 3032 00f2 66 0E                   		mov.L	#0, r14
5749:../src/wolfcrypt/src/sp_int.c ****             tt = (t * SP_DIV_10_CONST) >> SP_WORD_SIZE;
 3033                             		.loc 2 5749 15 discriminator 3
 3034 00f4 FF 55 DB                		or	r13, r11, r5
 3035 00f7 E7 A5 03                		mov.L	r5, 12[r10]
 3036 00fa FF 55 EC                		or	r14, r12, r5
 3037 00fd E7 A5 04                		mov.L	r5, 16[r10]
5750:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - (sp_int_word)tt * 10);
 3038                             		.loc 2 5750 21 discriminator 3
 3039 0100 ED A5 04                		mov.L	16[r10], r5
 3040 0103 FB 42 99 99 99 19       		mov.L	#0x19999999, r4
 3041 0109 4F 54                   		mul	r5, r4
 3042 010b ED A5 03                		mov.L	12[r10], r5
 3043 010e 63 05                   		mul	#0, r5
 3044 0110 4B 54                   		add	r5, r4
 3045 0112 ED A3 03                		mov.L	12[r10], r3
 3046 0115 FB 52 99 99 99 19       		mov.L	#0x19999999, r5
 3047 011b FC 1F 35                		emulu	r3, r5
 3048 011e 4B 64                   		add	r6, r4
 3049 0120 EF 46                   		mov.L	r4, r6
5750:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - (sp_int_word)tt * 10);
 3050                             		.loc 2 5750 40 discriminator 3
 3051 0122 FD 80 67                		shlr	#0, r6, r7
 3052 0125 E7 A7 11                		mov.L	r7, 68[r10]
 3053 0128 F9 A6 12 00             		mov.L	#0, 72[r10]
5750:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - (sp_int_word)tt * 10);
 3054                             		.loc 2 5750 16 discriminator 3
 3055 012c E5 AA 11 05             		mov.L	68[r10], 20[r10]
5751:../src/wolfcrypt/src/sp_int.c ****     #else
 3056                             		.loc 2 5751 18 discriminator 3
 3057 0130 ED A4 03                		mov.L	12[r10], r4
5751:../src/wolfcrypt/src/sp_int.c ****     #else
 3058                             		.loc 2 5751 53 discriminator 3
 3059 0133 ED A5 05                		mov.L	20[r10], r5
 3060 0136 63 A5                   		mul	#10, r5
5751:../src/wolfcrypt/src/sp_int.c ****     #else
 3061                             		.loc 2 5751 16 discriminator 3
 3062 0138 FF 05 54                		sub	r5, r4, r5
 3063 013b E7 A5 01                		mov.L	r5, 4[r10]
5758:../src/wolfcrypt/src/sp_int.c ****             tr = tr % 10;
 3064                             		.loc 2 5758 22 discriminator 3
 3065 013e ED A4 01                		mov.L	4[r10], r4
 3066 0141 FB 52 CD CC CC CC       		mov.L	#-858993459, r5
 3067 0147 FC 1F 45                		emulu	r4, r5
 3068 014a FD 83 65                		shlr	#3, r6, r5
5758:../src/wolfcrypt/src/sp_int.c ****             tr = tr % 10;
 3069                             		.loc 2 5758 16 discriminator 3
 3070 014d ED A4 05                		mov.L	20[r10], r4
 3071 0150 4B 45                   		add	r4, r5
 3072 0152 E7 A5 05                		mov.L	r5, 20[r10]
5759:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = tt;
 3073                             		.loc 2 5759 16 discriminator 3
 3074 0155 ED A4 01                		mov.L	4[r10], r4
 3075 0158 FB 52 CD CC CC CC       		mov.L	#-858993459, r5
 3076 015e FC 1F 45                		emulu	r4, r5
 3077 0161 FD 83 65                		shlr	#3, r6, r5
 3078 0164 63 A5                   		mul	#10, r5
 3079 0166 FF 05 54                		sub	r5, r4, r5
 3080 0169 E7 A5 01                		mov.L	r5, 4[r10]
5760:../src/wolfcrypt/src/sp_int.c ****         }
 3081                             		.loc 2 5760 22 discriminator 3
 3082 016c ED A4 07                		mov.L	28[r10], r4
 3083 016f EC A5                   		mov.L	[r10], r5
 3084 0171 62 25                   		add	#2, r5
 3085 0173 ED A3 05                		mov.L	20[r10], r3
 3086 0176 FE 25 43                		mov.L	r3, [r5,r4]
5747:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 3087                             		.loc 2 5747 40 discriminator 3
 3088 0179 EC A5                   		mov.L	[r10], r5
 3089 017b 60 15                   		sub	#1, r5
 3090 017d E3 A5                   		mov.L	r5, [r10]
 3091                             	.L238:
5747:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 3092                             		.loc 2 5747 9 discriminator 1
 3093 017f EC A5                   		mov.L	[r10], r5
 3094 0181 61 05                   		cmp	#0, r5
 3095 0183 29 05 38 50 FF          		bge	.L239
5762:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
 3096                             		.loc 2 5762 20
 3097 0188 ED A5 06                		mov.L	24[r10], r5
 3098 018b EC 54                   		mov.L	[r5], r4
5762:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
 3099                             		.loc 2 5762 17
 3100 018d ED A5 07                		mov.L	28[r10], r5
 3101 0190 E3 54                   		mov.L	r4, [r5]
 3102                             	.LBB15:
5763:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 3103                             		.loc 2 5763 9
 3104 0192 ED A5 07                		mov.L	28[r10], r5
 3105 0195 EC 55                   		mov.L	[r5], r5
 3106 0197 60 15                   		sub	#1, r5
 3107 0199 E7 A5 02                		mov.L	r5, 8[r10]
 3108 019c 09                      		bra	.L240
 3109                             	.L242:
5763:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 3110                             		.loc 2 5763 9 is_stmt 0 discriminator 5
 3111 019d ED A5 02                		mov.L	8[r10], r5
 3112 01a0 60 15                   		sub	#1, r5
 3113 01a2 E7 A5 02                		mov.L	r5, 8[r10]
 3114                             	.L240:
5763:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 3115                             		.loc 2 5763 9 discriminator 1
 3116 01a5 ED A5 02                		mov.L	8[r10], r5
 3117 01a8 61 05                   		cmp	#0, r5
 3118 01aa 29 11                   		blt	.L241
5763:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 3119                             		.loc 2 5763 9 discriminator 3
 3120 01ac ED A4 07                		mov.L	28[r10], r4
 3121 01af ED A5 02                		mov.L	8[r10], r5
 3122 01b2 62 25                   		add	#2, r5
 3123 01b4 FE 65 45                		mov.L	[r5,r4], r5
 3124 01b7 61 05                   		cmp	#0, r5
 3125 01b9 20 E4                   		beq	.L242
 3126                             	.L241:
5763:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 3127                             		.loc 2 5763 9 discriminator 6
 3128 01bb ED A5 02                		mov.L	8[r10], r5
 3129 01be 71 54 01                		add	#1, r5, r4
 3130 01c1 ED A5 07                		mov.L	28[r10], r5
 3131 01c4 E3 54                   		mov.L	r4, [r5]
 3132                             	.LBE15:
5764:../src/wolfcrypt/src/sp_int.c ****             *rem = tr;
 3133                             		.loc 2 5764 12 is_stmt 1 discriminator 6
 3134 01c6 ED A5 08                		mov.L	32[r10], r5
 3135 01c9 61 05                   		cmp	#0, r5
 3136 01cb 11                      		beq	.L243
5765:../src/wolfcrypt/src/sp_int.c ****         }
 3137                             		.loc 2 5765 18
 3138 01cc ED A5 08                		mov.L	32[r10], r5
 3139 01cf ED A4 01                		mov.L	4[r10], r4
 3140 01d2 E3 54                   		mov.L	r4, [r5]
 3141                             	.L243:
 3142                             		.loc 2 5768 1
 3143 01d4 03                      		nop
 3144 01d5 3F 6D 1B                		rtsd	#108, r6-r13
 3145                             	.LFE77:
 3147                             		.section	.text._sp_div_small,"ax",@progbits
 3149                             	__sp_div_small:
 3150                             	.LFB78:
5769:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_DIV_D || WOLFSSL_SP_MOD_D) && !WOLFSSL_SP_SMALL */
5770:../src/wolfcrypt/src/sp_int.c **** 
5771:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_DIV_D) || defined(WOLFSSL_SP_MOD_D)
5772:../src/wolfcrypt/src/sp_int.c **** /* Divide by small number: r = a / d and rem = a % d
5773:../src/wolfcrypt/src/sp_int.c ****  *
5774:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer to be divided.
5775:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   d    Digit to divide by.
5776:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r    SP integer that is the quotient. May be NULL.
5777:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  rem  SP integer that is the remainder. May be NULL.
5778:../src/wolfcrypt/src/sp_int.c ****  */
5779:../src/wolfcrypt/src/sp_int.c **** static void _sp_div_small(sp_int* a, sp_int_digit d, sp_int* r,
5780:../src/wolfcrypt/src/sp_int.c ****                          sp_int_digit* rem)
5781:../src/wolfcrypt/src/sp_int.c **** {
 3151                             		.loc 2 5781 1
 3152 0000 6E 6D                   		pushm	r6-r13
 3153                             	.LCFI77:
 3154 0002 71 0A 9C                		add	#-100, r0, r10
 3155                             	.LCFI78:
 3156 0005 EF A0                   		mov.L	r10, r0
 3157 0007 E7 A1 07                		mov.L	r1, 28[r10]
 3158 000a E7 A2 08                		mov.L	r2, 32[r10]
 3159 000d E7 A3 09                		mov.L	r3, 36[r10]
 3160 0010 E7 A4 0A                		mov.L	r4, 40[r10]
5782:../src/wolfcrypt/src/sp_int.c ****     int i;
5783:../src/wolfcrypt/src/sp_int.c **** #ifndef SQR_MUL_ASM
5784:../src/wolfcrypt/src/sp_int.c ****     sp_int_word t;
5785:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tt;
5786:../src/wolfcrypt/src/sp_int.c **** #else
5787:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
5788:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tt = 0;
5789:../src/wolfcrypt/src/sp_int.c **** #endif
5790:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tr = 0;
 3161                             		.loc 2 5790 18
 3162 0013 F9 A6 01 00             		mov.L	#0, 4[r10]
5791:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit m;
5792:../src/wolfcrypt/src/sp_int.c **** 
5793:../src/wolfcrypt/src/sp_int.c ****     if (r == NULL) {
 3163                             		.loc 2 5793 8
 3164 0017 ED A5 09                		mov.L	36[r10], r5
 3165 001a 61 05                   		cmp	#0, r5
 3166 001c 3B CA 00                		bne	.L245
5794:../src/wolfcrypt/src/sp_int.c ****         m = SP_DIGIT_MAX / d;
 3167                             		.loc 2 5794 11
 3168 001f FB 46 FF                		mov.L	#-1, r4
 3169 0022 ED A5 08                		mov.L	32[r10], r5
 3170 0025 EF 47                   		mov.L	r4, r7
 3171 0027 FC 27 57                		divu	r5, r7
 3172 002a EF 75                   		mov.L	r7, r5
 3173 002c E7 A5 03                		mov.L	r5, 12[r10]
5795:../src/wolfcrypt/src/sp_int.c ****         for (i = a->used - 1; i >= 0; i--) {
 3174                             		.loc 2 5795 19
 3175 002f ED A5 07                		mov.L	28[r10], r5
 3176 0032 EC 55                   		mov.L	[r5], r5
 3177                             		.loc 2 5795 16
 3178 0034 60 15                   		sub	#1, r5
 3179 0036 E3 A5                   		mov.L	r5, [r10]
 3180                             		.loc 2 5795 9
 3181 0038 38 9A 00                		bra	.L246
 3182                             	.L247:
5796:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
5797:../src/wolfcrypt/src/sp_int.c ****             t = ((sp_int_word)tr << SP_WORD_SIZE) | a->dp[i];
 3183                             		.loc 2 5797 18 discriminator 3
 3184 003b ED A5 01                		mov.L	4[r10], r5
 3185 003e E7 A5 0B                		mov.L	r5, 44[r10]
 3186 0041 F9 A6 0C 00             		mov.L	#0, 48[r10]
 3187                             		.loc 2 5797 34 discriminator 3
 3188 0045 ED A7 0B                		mov.L	44[r10], r7
 3189 0048 6C 07                   		shll	#0, r7
 3190 004a E7 A7 0E                		mov.L	r7, 56[r10]
 3191 004d F9 A6 0D 00             		mov.L	#0, 52[r10]
 3192                             		.loc 2 5797 58 discriminator 3
 3193 0051 ED A4 07                		mov.L	28[r10], r4
 3194 0054 EC A5                   		mov.L	[r10], r5
 3195 0056 62 25                   		add	#2, r5
 3196 0058 FE 65 45                		mov.L	[r5,r4], r5
 3197 005b E7 A5 0F                		mov.L	r5, 60[r10]
 3198 005e F9 A6 10 00             		mov.L	#0, 64[r10]
 3199                             		.loc 2 5797 15 discriminator 3
 3200 0062 ED A5 0D                		mov.L	52[r10], r5
 3201 0065 ED A7 0F                		mov.L	60[r10], r7
 3202 0068 57 75                   		or	r7, r5
 3203 006a E7 A5 04                		mov.L	r5, 16[r10]
 3204 006d ED A5 0E                		mov.L	56[r10], r5
 3205 0070 ED A7 10                		mov.L	64[r10], r7
 3206 0073 57 75                   		or	r7, r5
 3207 0075 E7 A5 05                		mov.L	r5, 20[r10]
5798:../src/wolfcrypt/src/sp_int.c ****             tt = (t * m) >> SP_WORD_SIZE;
 3208                             		.loc 2 5798 21 discriminator 3
 3209 0078 ED A5 03                		mov.L	12[r10], r5
 3210 007b EF 58                   		mov.L	r5, r8
 3211 007d 66 09                   		mov.L	#0, r9
 3212 007f ED A5 04                		mov.L	16[r10], r5
 3213 0082 FF 34 95                		mul	r9, r5, r4
 3214 0085 ED A5 05                		mov.L	20[r10], r5
 3215 0088 4F 85                   		mul	r8, r5
 3216 008a 4B 54                   		add	r5, r4
 3217 008c ED A5 04                		mov.L	16[r10], r5
 3218 008f FC 1F 85                		emulu	r8, r5
 3219 0092 4B 64                   		add	r6, r4
 3220 0094 EF 46                   		mov.L	r4, r6
 3221                             		.loc 2 5798 26 discriminator 3
 3222 0096 FD 80 67                		shlr	#0, r6, r7
 3223 0099 E7 A7 11                		mov.L	r7, 68[r10]
 3224 009c F9 A6 12 00             		mov.L	#0, 72[r10]
 3225                             		.loc 2 5798 16 discriminator 3
 3226 00a0 E5 AA 11 06             		mov.L	68[r10], 24[r10]
5799:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - tt * d);
 3227                             		.loc 2 5799 18 discriminator 3
 3228 00a4 ED A4 04                		mov.L	16[r10], r4
 3229                             		.loc 2 5799 40 discriminator 3
 3230 00a7 ED A3 06                		mov.L	24[r10], r3
 3231 00aa ED A5 08                		mov.L	32[r10], r5
 3232 00ad 4F 35                   		mul	r3, r5
 3233                             		.loc 2 5799 16 discriminator 3
 3234 00af FF 05 54                		sub	r5, r4, r5
 3235 00b2 E7 A5 01                		mov.L	r5, 4[r10]
5800:../src/wolfcrypt/src/sp_int.c ****     #else
5801:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL(l, tt, a->dp[i], m);
5802:../src/wolfcrypt/src/sp_int.c ****             tt += tr * m;
5803:../src/wolfcrypt/src/sp_int.c ****             tr = a->dp[i] - (tt * d);
5804:../src/wolfcrypt/src/sp_int.c ****     #endif
5805:../src/wolfcrypt/src/sp_int.c ****             tr = tr % d;
 3236                             		.loc 2 5805 16 discriminator 3
 3237 00b5 ED A5 01                		mov.L	4[r10], r5
 3238 00b8 ED A4 08                		mov.L	32[r10], r4
 3239 00bb EF 57                   		mov.L	r5, r7
 3240 00bd FC 27 47                		divu	r4, r7
 3241 00c0 EF 74                   		mov.L	r7, r4
 3242 00c2 ED A3 08                		mov.L	32[r10], r3
 3243 00c5 4F 34                   		mul	r3, r4
 3244 00c7 43 45                   		sub	r4, r5
 3245 00c9 E7 A5 01                		mov.L	r5, 4[r10]
5795:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 3246                             		.loc 2 5795 40 discriminator 3
 3247 00cc EC A5                   		mov.L	[r10], r5
 3248 00ce 60 15                   		sub	#1, r5
 3249 00d0 E3 A5                   		mov.L	r5, [r10]
 3250                             	.L246:
5795:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 3251                             		.loc 2 5795 9 discriminator 1
 3252 00d2 EC A5                   		mov.L	[r10], r5
 3253 00d4 61 05                   		cmp	#0, r5
 3254 00d6 29 05 38 63 FF          		bge	.L247
5806:../src/wolfcrypt/src/sp_int.c ****         }
5807:../src/wolfcrypt/src/sp_int.c ****         *rem = tr;
 3255                             		.loc 2 5807 14
 3256 00db ED A5 0A                		mov.L	40[r10], r5
 3257 00de ED A4 01                		mov.L	4[r10], r4
 3258 00e1 E3 54                   		mov.L	r4, [r5]
5808:../src/wolfcrypt/src/sp_int.c ****     }
5809:../src/wolfcrypt/src/sp_int.c ****     else {
5810:../src/wolfcrypt/src/sp_int.c ****         m = SP_DIGIT_MAX / d;
5811:../src/wolfcrypt/src/sp_int.c ****         for (i = a->used - 1; i >= 0; i--) {
5812:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
5813:../src/wolfcrypt/src/sp_int.c ****             t = ((sp_int_word)tr << SP_WORD_SIZE) | a->dp[i];
5814:../src/wolfcrypt/src/sp_int.c ****             tt = (t * m) >> SP_WORD_SIZE;
5815:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - tt * d);
5816:../src/wolfcrypt/src/sp_int.c ****     #else
5817:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL(l, tt, a->dp[i], m);
5818:../src/wolfcrypt/src/sp_int.c ****             tt += tr * m;
5819:../src/wolfcrypt/src/sp_int.c ****             tr = a->dp[i] - (tt * d);
5820:../src/wolfcrypt/src/sp_int.c ****     #endif
5821:../src/wolfcrypt/src/sp_int.c ****             tt += tr / d;
5822:../src/wolfcrypt/src/sp_int.c ****             tr = tr % d;
5823:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = tt;
5824:../src/wolfcrypt/src/sp_int.c ****         }
5825:../src/wolfcrypt/src/sp_int.c ****         r->used = a->used;
5826:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
5827:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
5828:../src/wolfcrypt/src/sp_int.c ****             *rem = tr;
5829:../src/wolfcrypt/src/sp_int.c ****         }
5830:../src/wolfcrypt/src/sp_int.c ****     }
5831:../src/wolfcrypt/src/sp_int.c **** }
 3259                             		.loc 2 5831 1
 3260 00e3 38 22 01                		bra	.L254
 3261                             	.L245:
5810:../src/wolfcrypt/src/sp_int.c ****         for (i = a->used - 1; i >= 0; i--) {
 3262                             		.loc 2 5810 11
 3263 00e6 FB 46 FF                		mov.L	#-1, r4
 3264 00e9 ED A5 08                		mov.L	32[r10], r5
 3265 00ec EF 47                   		mov.L	r4, r7
 3266 00ee FC 27 57                		divu	r5, r7
 3267 00f1 EF 75                   		mov.L	r7, r5
 3268 00f3 E7 A5 03                		mov.L	r5, 12[r10]
5811:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 3269                             		.loc 2 5811 19
 3270 00f6 ED A5 07                		mov.L	28[r10], r5
 3271 00f9 EC 55                   		mov.L	[r5], r5
5811:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 3272                             		.loc 2 5811 16
 3273 00fb 60 15                   		sub	#1, r5
 3274 00fd E3 A5                   		mov.L	r5, [r10]
5811:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 3275                             		.loc 2 5811 9
 3276 00ff 38 B1 00                		bra	.L249
 3277                             	.L250:
5813:../src/wolfcrypt/src/sp_int.c ****             tt = (t * m) >> SP_WORD_SIZE;
 3278                             		.loc 2 5813 18 discriminator 3
 3279 0102 ED A5 01                		mov.L	4[r10], r5
 3280 0105 E7 A5 13                		mov.L	r5, 76[r10]
 3281 0108 F9 A6 14 00             		mov.L	#0, 80[r10]
5813:../src/wolfcrypt/src/sp_int.c ****             tt = (t * m) >> SP_WORD_SIZE;
 3282                             		.loc 2 5813 34 discriminator 3
 3283 010c ED AE 13                		mov.L	76[r10], r14
 3284 010f 6C 0E                   		shll	#0, r14
 3285 0111 66 0D                   		mov.L	#0, r13
5813:../src/wolfcrypt/src/sp_int.c ****             tt = (t * m) >> SP_WORD_SIZE;
 3286                             		.loc 2 5813 58 discriminator 3
 3287 0113 ED A4 07                		mov.L	28[r10], r4
 3288 0116 EC A5                   		mov.L	[r10], r5
 3289 0118 62 25                   		add	#2, r5
 3290 011a FE 65 45                		mov.L	[r5,r4], r5
 3291 011d E7 A5 15                		mov.L	r5, 84[r10]
 3292 0120 F9 A6 16 00             		mov.L	#0, 88[r10]
5813:../src/wolfcrypt/src/sp_int.c ****             tt = (t * m) >> SP_WORD_SIZE;
 3293                             		.loc 2 5813 15 discriminator 3
 3294 0124 ED A5 15                		mov.L	84[r10], r5
 3295 0127 57 D5                   		or	r13, r5
 3296 0129 E7 A5 04                		mov.L	r5, 16[r10]
 3297 012c ED A5 16                		mov.L	88[r10], r5
 3298 012f 57 E5                   		or	r14, r5
 3299 0131 E7 A5 05                		mov.L	r5, 20[r10]
5814:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - tt * d);
 3300                             		.loc 2 5814 21 discriminator 3
 3301 0134 ED A5 03                		mov.L	12[r10], r5
 3302 0137 EF 5B                   		mov.L	r5, r11
 3303 0139 66 0C                   		mov.L	#0, r12
 3304 013b ED A5 04                		mov.L	16[r10], r5
 3305 013e FF 34 C5                		mul	r12, r5, r4
 3306 0141 ED A5 05                		mov.L	20[r10], r5
 3307 0144 4F B5                   		mul	r11, r5
 3308 0146 4B 54                   		add	r5, r4
 3309 0148 ED A5 04                		mov.L	16[r10], r5
 3310 014b FC 1F B5                		emulu	r11, r5
 3311 014e 4B 64                   		add	r6, r4
 3312 0150 EF 46                   		mov.L	r4, r6
5814:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - tt * d);
 3313                             		.loc 2 5814 26 discriminator 3
 3314 0152 FD 80 67                		shlr	#0, r6, r7
 3315 0155 E7 A7 17                		mov.L	r7, 92[r10]
 3316 0158 F9 A6 18 00             		mov.L	#0, 96[r10]
5814:../src/wolfcrypt/src/sp_int.c ****             tr = (sp_int_digit)(t - tt * d);
 3317                             		.loc 2 5814 16 discriminator 3
 3318 015c E5 AA 17 06             		mov.L	92[r10], 24[r10]
5815:../src/wolfcrypt/src/sp_int.c ****     #else
 3319                             		.loc 2 5815 18 discriminator 3
 3320 0160 ED A4 04                		mov.L	16[r10], r4
5815:../src/wolfcrypt/src/sp_int.c ****     #else
 3321                             		.loc 2 5815 40 discriminator 3
 3322 0163 ED A3 06                		mov.L	24[r10], r3
 3323 0166 ED A5 08                		mov.L	32[r10], r5
 3324 0169 4F 35                   		mul	r3, r5
5815:../src/wolfcrypt/src/sp_int.c ****     #else
 3325                             		.loc 2 5815 16 discriminator 3
 3326 016b FF 05 54                		sub	r5, r4, r5
 3327 016e E7 A5 01                		mov.L	r5, 4[r10]
5821:../src/wolfcrypt/src/sp_int.c ****             tr = tr % d;
 3328                             		.loc 2 5821 22 discriminator 3
 3329 0171 ED A4 01                		mov.L	4[r10], r4
 3330 0174 ED A5 08                		mov.L	32[r10], r5
 3331 0177 EF 47                   		mov.L	r4, r7
 3332 0179 FC 27 57                		divu	r5, r7
 3333 017c EF 75                   		mov.L	r7, r5
5821:../src/wolfcrypt/src/sp_int.c ****             tr = tr % d;
 3334                             		.loc 2 5821 16 discriminator 3
 3335 017e ED A4 06                		mov.L	24[r10], r4
 3336 0181 4B 45                   		add	r4, r5
 3337 0183 E7 A5 06                		mov.L	r5, 24[r10]
5822:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = tt;
 3338                             		.loc 2 5822 16 discriminator 3
 3339 0186 ED A5 01                		mov.L	4[r10], r5
 3340 0189 ED A4 08                		mov.L	32[r10], r4
 3341 018c EF 57                   		mov.L	r5, r7
 3342 018e FC 27 47                		divu	r4, r7
 3343 0191 EF 74                   		mov.L	r7, r4
 3344 0193 ED A3 08                		mov.L	32[r10], r3
 3345 0196 4F 34                   		mul	r3, r4
 3346 0198 43 45                   		sub	r4, r5
 3347 019a E7 A5 01                		mov.L	r5, 4[r10]
5823:../src/wolfcrypt/src/sp_int.c ****         }
 3348                             		.loc 2 5823 22 discriminator 3
 3349 019d ED A4 09                		mov.L	36[r10], r4
 3350 01a0 EC A5                   		mov.L	[r10], r5
 3351 01a2 62 25                   		add	#2, r5
 3352 01a4 ED A3 06                		mov.L	24[r10], r3
 3353 01a7 FE 25 43                		mov.L	r3, [r5,r4]
5811:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 3354                             		.loc 2 5811 40 discriminator 3
 3355 01aa EC A5                   		mov.L	[r10], r5
 3356 01ac 60 15                   		sub	#1, r5
 3357 01ae E3 A5                   		mov.L	r5, [r10]
 3358                             	.L249:
5811:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 3359                             		.loc 2 5811 9 discriminator 1
 3360 01b0 EC A5                   		mov.L	[r10], r5
 3361 01b2 61 05                   		cmp	#0, r5
 3362 01b4 29 05 38 4C FF          		bge	.L250
5825:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
 3363                             		.loc 2 5825 20
 3364 01b9 ED A5 07                		mov.L	28[r10], r5
 3365 01bc EC 54                   		mov.L	[r5], r4
5825:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
 3366                             		.loc 2 5825 17
 3367 01be ED A5 09                		mov.L	36[r10], r5
 3368 01c1 E3 54                   		mov.L	r4, [r5]
 3369                             	.LBB16:
5826:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 3370                             		.loc 2 5826 9
 3371 01c3 ED A5 09                		mov.L	36[r10], r5
 3372 01c6 EC 55                   		mov.L	[r5], r5
 3373 01c8 60 15                   		sub	#1, r5
 3374 01ca E7 A5 02                		mov.L	r5, 8[r10]
 3375 01cd 09                      		bra	.L251
 3376                             	.L253:
5826:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 3377                             		.loc 2 5826 9 is_stmt 0 discriminator 5
 3378 01ce ED A5 02                		mov.L	8[r10], r5
 3379 01d1 60 15                   		sub	#1, r5
 3380 01d3 E7 A5 02                		mov.L	r5, 8[r10]
 3381                             	.L251:
5826:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 3382                             		.loc 2 5826 9 discriminator 1
 3383 01d6 ED A5 02                		mov.L	8[r10], r5
 3384 01d9 61 05                   		cmp	#0, r5
 3385 01db 29 11                   		blt	.L252
5826:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 3386                             		.loc 2 5826 9 discriminator 3
 3387 01dd ED A4 09                		mov.L	36[r10], r4
 3388 01e0 ED A5 02                		mov.L	8[r10], r5
 3389 01e3 62 25                   		add	#2, r5
 3390 01e5 FE 65 45                		mov.L	[r5,r4], r5
 3391 01e8 61 05                   		cmp	#0, r5
 3392 01ea 20 E4                   		beq	.L253
 3393                             	.L252:
5826:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
 3394                             		.loc 2 5826 9 discriminator 6
 3395 01ec ED A5 02                		mov.L	8[r10], r5
 3396 01ef 71 54 01                		add	#1, r5, r4
 3397 01f2 ED A5 09                		mov.L	36[r10], r5
 3398 01f5 E3 54                   		mov.L	r4, [r5]
 3399                             	.LBE16:
5827:../src/wolfcrypt/src/sp_int.c ****             *rem = tr;
 3400                             		.loc 2 5827 12 is_stmt 1 discriminator 6
 3401 01f7 ED A5 0A                		mov.L	40[r10], r5
 3402 01fa 61 05                   		cmp	#0, r5
 3403 01fc 11                      		beq	.L254
5828:../src/wolfcrypt/src/sp_int.c ****         }
 3404                             		.loc 2 5828 18
 3405 01fd ED A5 0A                		mov.L	40[r10], r5
 3406 0200 ED A4 01                		mov.L	4[r10], r4
 3407 0203 E3 54                   		mov.L	r4, [r5]
 3408                             	.L254:
 3409                             		.loc 2 5831 1
 3410 0205 03                      		nop
 3411 0206 3F 6D 21                		rtsd	#132, r6-r13
 3412                             	.LFE78:
 3414                             		.section	.text.sp_div_d,"ax",@progbits
 3415                             		.global	_sp_div_d
 3417                             	_sp_div_d:
 3418                             	.LFB79:
5832:../src/wolfcrypt/src/sp_int.c **** #endif
5833:../src/wolfcrypt/src/sp_int.c **** 
5834:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_DIV_D
5835:../src/wolfcrypt/src/sp_int.c **** /* Divide a multi-precision number by a digit size number and calculate
5836:../src/wolfcrypt/src/sp_int.c ****  * remainder.
5837:../src/wolfcrypt/src/sp_int.c ****  *   r = a / d; rem = a % d
5838:../src/wolfcrypt/src/sp_int.c ****  *
5839:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer to be divided.
5840:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   d    Digit to divide by.
5841:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r    SP integer that is the quotient. May be NULL.
5842:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  rem  Digit that is the remainder. May be NULL.
5843:../src/wolfcrypt/src/sp_int.c ****  *
5844:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
5845:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a is NULL or d is 0.
5846:../src/wolfcrypt/src/sp_int.c ****  */
5847:../src/wolfcrypt/src/sp_int.c **** int sp_div_d(sp_int* a, sp_int_digit d, sp_int* r, sp_int_digit* rem)
5848:../src/wolfcrypt/src/sp_int.c **** {
 3419                             		.loc 2 5848 1
 3420 0000 6E 6D                   		pushm	r6-r13
 3421                             	.LCFI79:
 3422 0002 71 0A C0                		add	#-64, r0, r10
 3423                             	.LCFI80:
 3424 0005 EF A0                   		mov.L	r10, r0
 3425 0007 E7 A1 06                		mov.L	r1, 24[r10]
 3426 000a E7 A2 07                		mov.L	r2, 28[r10]
 3427 000d E7 A3 08                		mov.L	r3, 32[r10]
 3428 0010 E7 A4 09                		mov.L	r4, 36[r10]
5849:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 3429                             		.loc 2 5849 9
 3430 0013 F8 A6 00                		mov.L	#0, [r10]
5850:../src/wolfcrypt/src/sp_int.c **** 
5851:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (d == 0)) {
 3431                             		.loc 2 5851 8
 3432 0016 ED A5 06                		mov.L	24[r10], r5
 3433 0019 61 05                   		cmp	#0, r5
 3434 001b 17                      		beq	.L256
 3435                             		.loc 2 5851 21 discriminator 1
 3436 001c ED A5 07                		mov.L	28[r10], r5
 3437 001f 61 05                   		cmp	#0, r5
 3438 0021 1C                      		bne	.L257
 3439                             	.L256:
5852:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 3440                             		.loc 2 5852 13
 3441 0022 F8 A6 FD                		mov.L	#-3, [r10]
 3442                             	.L257:
5853:../src/wolfcrypt/src/sp_int.c ****     }
5854:../src/wolfcrypt/src/sp_int.c **** 
5855:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 3443                             		.loc 2 5855 8
 3444 0025 EC A5                   		mov.L	[r10], r5
 3445 0027 61 05                   		cmp	#0, r5
 3446 0029 3B 6A 01                		bne	.L258
5856:../src/wolfcrypt/src/sp_int.c ****     #if !defined(WOLFSSL_SP_SMALL)
5857:../src/wolfcrypt/src/sp_int.c ****         if (d == 3) {
 3447                             		.loc 2 5857 12
 3448 002c ED A5 07                		mov.L	28[r10], r5
 3449 002f 61 35                   		cmp	#3, r5
 3450 0031 21 12                   		bne	.L259
5858:../src/wolfcrypt/src/sp_int.c ****             _sp_div_3(a, r, rem);
 3451                             		.loc 2 5858 13
 3452 0033 ED A3 09                		mov.L	36[r10], r3
 3453 0036 ED A2 08                		mov.L	32[r10], r2
 3454 0039 ED A1 06                		mov.L	24[r10], r1
 3455 003c 05 00 00 00             		bsr	__sp_div_3
 3456 0040 38 53 01                		bra	.L258
 3457                             	.L259:
5859:../src/wolfcrypt/src/sp_int.c ****         }
5860:../src/wolfcrypt/src/sp_int.c ****         else if (d == 10) {
 3458                             		.loc 2 5860 17
 3459 0043 ED A5 07                		mov.L	28[r10], r5
 3460 0046 61 A5                   		cmp	#10, r5
 3461 0048 21 12                   		bne	.L260
5861:../src/wolfcrypt/src/sp_int.c ****             _sp_div_10(a, r, rem);
 3462                             		.loc 2 5861 13
 3463 004a ED A3 09                		mov.L	36[r10], r3
 3464 004d ED A2 08                		mov.L	32[r10], r2
 3465 0050 ED A1 06                		mov.L	24[r10], r1
 3466 0053 05 00 00 00             		bsr	__sp_div_10
 3467 0057 38 3C 01                		bra	.L258
 3468                             	.L260:
5862:../src/wolfcrypt/src/sp_int.c ****         }
5863:../src/wolfcrypt/src/sp_int.c ****         else
5864:../src/wolfcrypt/src/sp_int.c ****     #endif
5865:../src/wolfcrypt/src/sp_int.c ****         if (d <= SP_HALF_MAX) {
 3469                             		.loc 2 5865 12
 3470 005a ED A5 07                		mov.L	28[r10], r5
 3471 005d 77 05 FF FF 00          		cmp	#0xffff, r5
 3472 0062 24 15                   		bgtu	.L261
5866:../src/wolfcrypt/src/sp_int.c ****             _sp_div_small(a, d, r, rem);
 3473                             		.loc 2 5866 13
 3474 0064 ED A4 09                		mov.L	36[r10], r4
 3475 0067 ED A3 08                		mov.L	32[r10], r3
 3476 006a ED A2 07                		mov.L	28[r10], r2
 3477 006d ED A1 06                		mov.L	24[r10], r1
 3478 0070 05 00 00 00             		bsr	__sp_div_small
 3479 0074 38 1F 01                		bra	.L258
 3480                             	.L261:
 3481                             	.LBB17:
5867:../src/wolfcrypt/src/sp_int.c ****         }
5868:../src/wolfcrypt/src/sp_int.c ****         else
5869:../src/wolfcrypt/src/sp_int.c ****         {
5870:../src/wolfcrypt/src/sp_int.c ****             int i;
5871:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
5872:../src/wolfcrypt/src/sp_int.c ****             sp_int_word w = 0;
 3482                             		.loc 2 5872 25
 3483 0077 F9 A6 02 00             		mov.L	#0, 8[r10]
 3484 007b F9 A6 03 00             		mov.L	#0, 12[r10]
5873:../src/wolfcrypt/src/sp_int.c ****         #else
5874:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit l;
5875:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit h = 0;
5876:../src/wolfcrypt/src/sp_int.c ****         #endif
5877:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit t;
5878:../src/wolfcrypt/src/sp_int.c **** 
5879:../src/wolfcrypt/src/sp_int.c ****             for (i = a->used - 1; i >= 0; i--) {
 3485                             		.loc 2 5879 23
 3486 007f ED A5 06                		mov.L	24[r10], r5
 3487 0082 EC 55                   		mov.L	[r5], r5
 3488                             		.loc 2 5879 20
 3489 0084 60 15                   		sub	#1, r5
 3490 0086 E7 A5 01                		mov.L	r5, 4[r10]
 3491                             		.loc 2 5879 13
 3492 0089 38 AD 00                		bra	.L262
 3493                             	.L264:
5880:../src/wolfcrypt/src/sp_int.c ****             #ifndef SQR_MUL_ASM
5881:../src/wolfcrypt/src/sp_int.c ****                 t = sp_div_word((sp_int_digit)w, a->dp[i], d);
 3494                             		.loc 2 5881 21
 3495 008c ED A1 02                		mov.L	8[r10], r1
 3496 008f ED A4 06                		mov.L	24[r10], r4
 3497 0092 ED A5 01                		mov.L	4[r10], r5
 3498 0095 62 25                   		add	#2, r5
 3499 0097 FE 65 45                		mov.L	[r5,r4], r5
 3500 009a ED A3 07                		mov.L	28[r10], r3
 3501 009d EF 52                   		mov.L	r5, r2
 3502 009f 05 00 00 00             		bsr	_sp_div_word
 3503 00a3 E7 A1 05                		mov.L	r1, 20[r10]
5882:../src/wolfcrypt/src/sp_int.c ****                 w = (w << SP_WORD_SIZE) | a->dp[i];
 3504                             		.loc 2 5882 24
 3505 00a6 ED A5 02                		mov.L	8[r10], r5
 3506 00a9 6C 05                   		shll	#0, r5
 3507 00ab E7 A5 0B                		mov.L	r5, 44[r10]
 3508 00ae F9 A6 0A 00             		mov.L	#0, 40[r10]
 3509                             		.loc 2 5882 48
 3510 00b2 ED A4 06                		mov.L	24[r10], r4
 3511 00b5 ED A5 01                		mov.L	4[r10], r5
 3512 00b8 62 25                   		add	#2, r5
 3513 00ba FE 65 45                		mov.L	[r5,r4], r5
 3514 00bd E7 A5 0C                		mov.L	r5, 48[r10]
 3515 00c0 F9 A6 0D 00             		mov.L	#0, 52[r10]
 3516                             		.loc 2 5882 19
 3517 00c4 ED A5 0A                		mov.L	40[r10], r5
 3518 00c7 ED A7 0C                		mov.L	48[r10], r7
 3519 00ca 57 75                   		or	r7, r5
 3520 00cc E7 A5 02                		mov.L	r5, 8[r10]
 3521 00cf ED A5 0B                		mov.L	44[r10], r5
 3522 00d2 ED AD 0D                		mov.L	52[r10], r13
 3523 00d5 57 D5                   		or	r13, r5
 3524 00d7 E7 A5 03                		mov.L	r5, 12[r10]
5883:../src/wolfcrypt/src/sp_int.c ****                 w -= (sp_int_word)t * d;
 3525                             		.loc 2 5883 22
 3526 00da ED A5 05                		mov.L	20[r10], r5
 3527 00dd EF 5B                   		mov.L	r5, r11
 3528 00df 66 0C                   		mov.L	#0, r12
 3529                             		.loc 2 5883 37
 3530 00e1 ED A5 07                		mov.L	28[r10], r5
 3531 00e4 EF 58                   		mov.L	r5, r8
 3532 00e6 66 09                   		mov.L	#0, r9
 3533 00e8 FF 34 8C                		mul	r8, r12, r4
 3534 00eb FF 35 B9                		mul	r11, r9, r5
 3535 00ee 4B 54                   		add	r5, r4
 3536 00f0 EF BD                   		mov.L	r11, r13
 3537 00f2 FC 1F 8D                		emulu	r8, r13
 3538 00f5 EF D5                   		mov.L	r13, r5
 3539 00f7 EF E6                   		mov.L	r14, r6
 3540 00f9 4B 64                   		add	r6, r4
 3541 00fb EF 46                   		mov.L	r4, r6
 3542                             		.loc 2 5883 19
 3543 00fd ED A3 02                		mov.L	8[r10], r3
 3544 0100 ED A4 03                		mov.L	12[r10], r4
 3545 0103 EF 47                   		mov.L	r4, r7
 3546 0105 FF 0E 53                		sub	r5, r3, r14
 3547 0108 FC 03 67                		sbb	r6, r7
 3548 010b E7 A7 0F                		mov.L	r7, 60[r10]
 3549 010e E7 AE 0E                		mov.L	r14, 56[r10]
 3550 0111 E5 AA 0E 02             		mov.L	56[r10], 8[r10]
 3551 0115 E5 AA 0F 03             		mov.L	60[r10], 12[r10]
5884:../src/wolfcrypt/src/sp_int.c ****             #else
5885:../src/wolfcrypt/src/sp_int.c ****                 l = a->dp[i];
5886:../src/wolfcrypt/src/sp_int.c ****                 t = sp_div_word(h, l, d);
5887:../src/wolfcrypt/src/sp_int.c ****                 h = l - t * d;
5888:../src/wolfcrypt/src/sp_int.c ****             #endif
5889:../src/wolfcrypt/src/sp_int.c ****                 if (r != NULL) {
 3552                             		.loc 2 5889 20
 3553 0119 ED A5 08                		mov.L	32[r10], r5
 3554 011c 61 05                   		cmp	#0, r5
 3555 011e 20 10                   		beq	.L263
5890:../src/wolfcrypt/src/sp_int.c ****                     r->dp[i] = t;
 3556                             		.loc 2 5890 30
 3557 0120 ED A4 08                		mov.L	32[r10], r4
 3558 0123 ED A5 01                		mov.L	4[r10], r5
 3559 0126 62 25                   		add	#2, r5
 3560 0128 ED A3 05                		mov.L	20[r10], r3
 3561 012b FE 25 43                		mov.L	r3, [r5,r4]
 3562                             	.L263:
5879:../src/wolfcrypt/src/sp_int.c ****             #ifndef SQR_MUL_ASM
 3563                             		.loc 2 5879 44 discriminator 2
 3564 012e ED A5 01                		mov.L	4[r10], r5
 3565 0131 60 15                   		sub	#1, r5
 3566 0133 E7 A5 01                		mov.L	r5, 4[r10]
 3567                             	.L262:
5879:../src/wolfcrypt/src/sp_int.c ****             #ifndef SQR_MUL_ASM
 3568                             		.loc 2 5879 13 discriminator 1
 3569 0136 ED A5 01                		mov.L	4[r10], r5
 3570 0139 61 05                   		cmp	#0, r5
 3571 013b 29 05 38 4F FF          		bge	.L264
5891:../src/wolfcrypt/src/sp_int.c ****                 }
5892:../src/wolfcrypt/src/sp_int.c ****             }
5893:../src/wolfcrypt/src/sp_int.c ****             if (r != NULL) {
 3572                             		.loc 2 5893 16
 3573 0140 ED A5 08                		mov.L	32[r10], r5
 3574 0143 61 05                   		cmp	#0, r5
 3575 0145 20 40                   		beq	.L265
5894:../src/wolfcrypt/src/sp_int.c ****                 r->used = a->used;
 3576                             		.loc 2 5894 28
 3577 0147 ED A5 06                		mov.L	24[r10], r5
 3578 014a EC 54                   		mov.L	[r5], r4
 3579                             		.loc 2 5894 25
 3580 014c ED A5 08                		mov.L	32[r10], r5
 3581 014f E3 54                   		mov.L	r4, [r5]
 3582                             	.LBB18:
5895:../src/wolfcrypt/src/sp_int.c ****                 sp_clamp(r);
 3583                             		.loc 2 5895 17
 3584 0151 ED A5 08                		mov.L	32[r10], r5
 3585 0154 EC 55                   		mov.L	[r5], r5
 3586 0156 60 15                   		sub	#1, r5
 3587 0158 E7 A5 04                		mov.L	r5, 16[r10]
 3588 015b 09                      		bra	.L266
 3589                             	.L268:
 3590                             		.loc 2 5895 17 is_stmt 0 discriminator 5
 3591 015c ED A5 04                		mov.L	16[r10], r5
 3592 015f 60 15                   		sub	#1, r5
 3593 0161 E7 A5 04                		mov.L	r5, 16[r10]
 3594                             	.L266:
 3595                             		.loc 2 5895 17 discriminator 1
 3596 0164 ED A5 04                		mov.L	16[r10], r5
 3597 0167 61 05                   		cmp	#0, r5
 3598 0169 29 11                   		blt	.L267
 3599                             		.loc 2 5895 17 discriminator 3
 3600 016b ED A4 08                		mov.L	32[r10], r4
 3601 016e ED A5 04                		mov.L	16[r10], r5
 3602 0171 62 25                   		add	#2, r5
 3603 0173 FE 65 45                		mov.L	[r5,r4], r5
 3604 0176 61 05                   		cmp	#0, r5
 3605 0178 20 E4                   		beq	.L268
 3606                             	.L267:
 3607                             		.loc 2 5895 17 discriminator 6
 3608 017a ED A5 04                		mov.L	16[r10], r5
 3609 017d 71 54 01                		add	#1, r5, r4
 3610 0180 ED A5 08                		mov.L	32[r10], r5
 3611 0183 E3 54                   		mov.L	r4, [r5]
 3612                             	.L265:
 3613                             	.LBE18:
5896:../src/wolfcrypt/src/sp_int.c ****             }
5897:../src/wolfcrypt/src/sp_int.c **** 
5898:../src/wolfcrypt/src/sp_int.c ****             if (rem != NULL) {
 3614                             		.loc 2 5898 16 is_stmt 1
 3615 0185 ED A5 09                		mov.L	36[r10], r5
 3616 0188 61 05                   		cmp	#0, r5
 3617 018a 11                      		beq	.L258
5899:../src/wolfcrypt/src/sp_int.c ****             #ifndef SQR_MUL_ASM
5900:../src/wolfcrypt/src/sp_int.c ****                 *rem = (sp_int_digit)w;
 3618                             		.loc 2 5900 24
 3619 018b ED A4 02                		mov.L	8[r10], r4
 3620                             		.loc 2 5900 22
 3621 018e ED A5 09                		mov.L	36[r10], r5
 3622 0191 E3 54                   		mov.L	r4, [r5]
 3623                             		.balign 8,3,1
 3624                             	.L258:
 3625                             	.LBE17:
5901:../src/wolfcrypt/src/sp_int.c ****             #else
5902:../src/wolfcrypt/src/sp_int.c ****                 *rem = h;
5903:../src/wolfcrypt/src/sp_int.c ****             #endif
5904:../src/wolfcrypt/src/sp_int.c ****             }
5905:../src/wolfcrypt/src/sp_int.c ****         }
5906:../src/wolfcrypt/src/sp_int.c **** 
5907:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
5908:../src/wolfcrypt/src/sp_int.c ****         if (r != NULL) {
5909:../src/wolfcrypt/src/sp_int.c ****             r->sign = a->sign;
5910:../src/wolfcrypt/src/sp_int.c ****         }
5911:../src/wolfcrypt/src/sp_int.c ****     #endif
5912:../src/wolfcrypt/src/sp_int.c ****     }
5913:../src/wolfcrypt/src/sp_int.c **** 
5914:../src/wolfcrypt/src/sp_int.c ****     return err;
 3626                             		.loc 2 5914 12
 3627 0193 EC A5                   		mov.L	[r10], r5
5915:../src/wolfcrypt/src/sp_int.c **** }
 3628                             		.loc 2 5915 1
 3629 0195 EF 51                   		mov.L	r5, r1
 3630 0197 3F 6D 18                		rtsd	#96, r6-r13
 3631                             	.LFE79:
 3633 019a 74 10 01 00 00 00       		.section	.text.sp_mod_d,"ax",@progbits
 3634                             		.global	_sp_mod_d
 3636                             	_sp_mod_d:
 3637                             	.LFB80:
5916:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_DIV_D */
5917:../src/wolfcrypt/src/sp_int.c **** 
5918:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_MOD_D
5919:../src/wolfcrypt/src/sp_int.c **** /* Calculate a modulo the digit d into r: r = a mod d
5920:../src/wolfcrypt/src/sp_int.c ****  *
5921:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to reduce.
5922:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   d  Digit to that is the modulus.
5923:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  Digit that is the result..
5924:../src/wolfcrypt/src/sp_int.c ****  *
5925:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
5926:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a is NULL or d is 0.
5927:../src/wolfcrypt/src/sp_int.c ****  */
5928:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_SP_MATH_ALL) && (!defined(HAVE_ECC) || \
5929:../src/wolfcrypt/src/sp_int.c ****     !defined(HAVE_COMP_KEY))
5930:../src/wolfcrypt/src/sp_int.c **** static
5931:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_SP_MATH_ALL && (!HAVE_ECC || !HAVE_COMP_KEY) */
5932:../src/wolfcrypt/src/sp_int.c **** int sp_mod_d(sp_int* a, const sp_int_digit d, sp_int_digit* r)
5933:../src/wolfcrypt/src/sp_int.c **** {
 3638                             		.loc 2 5933 1
 3639 0000 6E 6D                   		pushm	r6-r13
 3640                             	.LCFI81:
 3641 0002 71 0A C8                		add	#-56, r0, r10
 3642                             	.LCFI82:
 3643 0005 EF A0                   		mov.L	r10, r0
 3644 0007 E7 A1 05                		mov.L	r1, 20[r10]
 3645 000a E7 A2 06                		mov.L	r2, 24[r10]
 3646 000d E7 A3 07                		mov.L	r3, 28[r10]
5934:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 3647                             		.loc 2 5934 9
 3648 0010 F8 A6 00                		mov.L	#0, [r10]
5935:../src/wolfcrypt/src/sp_int.c **** 
5936:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (r == NULL) || (d == 0)) {
 3649                             		.loc 2 5936 8
 3650 0013 ED A5 05                		mov.L	20[r10], r5
 3651 0016 61 05                   		cmp	#0, r5
 3652 0018 20 0E                   		beq	.L271
 3653                             		.loc 2 5936 21 discriminator 1
 3654 001a ED A5 07                		mov.L	28[r10], r5
 3655 001d 61 05                   		cmp	#0, r5
 3656 001f 17                      		beq	.L271
 3657                             		.loc 2 5936 36 discriminator 2
 3658 0020 ED A5 06                		mov.L	24[r10], r5
 3659 0023 61 05                   		cmp	#0, r5
 3660 0025 1C                      		bne	.L272
 3661                             	.L271:
5937:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 3662                             		.loc 2 5937 13
 3663 0026 F8 A6 FD                		mov.L	#-3, [r10]
 3664                             	.L272:
5938:../src/wolfcrypt/src/sp_int.c ****     }
5939:../src/wolfcrypt/src/sp_int.c **** 
5940:../src/wolfcrypt/src/sp_int.c **** #if 0
5941:../src/wolfcrypt/src/sp_int.c ****     sp_print(a, "a");
5942:../src/wolfcrypt/src/sp_int.c ****     sp_print_digit(d, "m");
5943:../src/wolfcrypt/src/sp_int.c **** #endif
5944:../src/wolfcrypt/src/sp_int.c **** 
5945:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 3665                             		.loc 2 5945 8
 3666 0029 EC A5                   		mov.L	[r10], r5
 3667 002b 61 05                   		cmp	#0, r5
 3668 002d 3B 3B 01                		bne	.L273
5946:../src/wolfcrypt/src/sp_int.c ****         /* Check whether d is a power of 2. */
5947:../src/wolfcrypt/src/sp_int.c ****         if ((d & (d - 1)) == 0) {
 3669                             		.loc 2 5947 21
 3670 0030 ED A5 06                		mov.L	24[r10], r5
 3671 0033 60 15                   		sub	#1, r5
 3672                             		.loc 2 5947 16
 3673 0035 ED A4 06                		mov.L	24[r10], r4
 3674 0038 53 45                   		and	r4, r5
 3675                             		.loc 2 5947 12
 3676 003a 61 05                   		cmp	#0, r5
 3677 003c 21 27                   		bne	.L274
5948:../src/wolfcrypt/src/sp_int.c ****             if (a->used == 0) {
 3678                             		.loc 2 5948 18
 3679 003e ED A5 05                		mov.L	20[r10], r5
 3680 0041 EC 55                   		mov.L	[r5], r5
 3681                             		.loc 2 5948 16
 3682 0043 61 05                   		cmp	#0, r5
 3683 0045 1A                      		bne	.L275
5949:../src/wolfcrypt/src/sp_int.c ****                 *r = 0;
 3684                             		.loc 2 5949 20
 3685 0046 ED A5 07                		mov.L	28[r10], r5
 3686 0049 F8 56 00                		mov.L	#0, [r5]
 3687 004c 38 1C 01                		bra	.L273
 3688                             	.L275:
5950:../src/wolfcrypt/src/sp_int.c ****             }
5951:../src/wolfcrypt/src/sp_int.c ****             else {
5952:../src/wolfcrypt/src/sp_int.c ****                 *r = a->dp[0] & (d - 1);
 3689                             		.loc 2 5952 27
 3690 004f ED A5 05                		mov.L	20[r10], r5
 3691 0052 A8 D4                   		mov.L	8[r5], r4
 3692                             		.loc 2 5952 36
 3693 0054 ED A5 06                		mov.L	24[r10], r5
 3694 0057 60 15                   		sub	#1, r5
 3695                             		.loc 2 5952 31
 3696 0059 53 54                   		and	r5, r4
 3697                             		.loc 2 5952 20
 3698 005b ED A5 07                		mov.L	28[r10], r5
 3699 005e E3 54                   		mov.L	r4, [r5]
 3700 0060 38 08 01                		bra	.L273
 3701                             	.L274:
5953:../src/wolfcrypt/src/sp_int.c ****             }
5954:../src/wolfcrypt/src/sp_int.c ****         }
5955:../src/wolfcrypt/src/sp_int.c ****     #if !defined(WOLFSSL_SP_SMALL)
5956:../src/wolfcrypt/src/sp_int.c ****         else if (d == 3) {
 3702                             		.loc 2 5956 17
 3703 0063 ED A5 06                		mov.L	24[r10], r5
 3704 0066 61 35                   		cmp	#3, r5
 3705 0068 21 11                   		bne	.L277
5957:../src/wolfcrypt/src/sp_int.c ****             _sp_div_3(a, NULL, r);
 3706                             		.loc 2 5957 13
 3707 006a ED A3 07                		mov.L	28[r10], r3
 3708 006d 66 02                   		mov.L	#0, r2
 3709 006f ED A1 05                		mov.L	20[r10], r1
 3710 0072 05 00 00 00             		bsr	__sp_div_3
 3711 0076 38 F2 00                		bra	.L273
 3712                             	.L277:
5958:../src/wolfcrypt/src/sp_int.c ****         }
5959:../src/wolfcrypt/src/sp_int.c ****         else if (d == 10) {
 3713                             		.loc 2 5959 17
 3714 0079 ED A5 06                		mov.L	24[r10], r5
 3715 007c 61 A5                   		cmp	#10, r5
 3716 007e 21 11                   		bne	.L278
5960:../src/wolfcrypt/src/sp_int.c ****             _sp_div_10(a, NULL, r);
 3717                             		.loc 2 5960 13
 3718 0080 ED A3 07                		mov.L	28[r10], r3
 3719 0083 66 02                   		mov.L	#0, r2
 3720 0085 ED A1 05                		mov.L	20[r10], r1
 3721 0088 05 00 00 00             		bsr	__sp_div_10
 3722 008c 38 DC 00                		bra	.L273
 3723                             	.L278:
5961:../src/wolfcrypt/src/sp_int.c ****         }
5962:../src/wolfcrypt/src/sp_int.c ****     #endif
5963:../src/wolfcrypt/src/sp_int.c ****         else if (d <= SP_HALF_MAX) {
 3724                             		.loc 2 5963 17
 3725 008f ED A5 06                		mov.L	24[r10], r5
 3726 0092 77 05 FF FF 00          		cmp	#0xffff, r5
 3727 0097 24 14                   		bgtu	.L279
5964:../src/wolfcrypt/src/sp_int.c ****             _sp_div_small(a, d, NULL, r);
 3728                             		.loc 2 5964 13
 3729 0099 ED A4 07                		mov.L	28[r10], r4
 3730 009c 66 03                   		mov.L	#0, r3
 3731 009e ED A2 06                		mov.L	24[r10], r2
 3732 00a1 ED A1 05                		mov.L	20[r10], r1
 3733 00a4 05 00 00 00             		bsr	__sp_div_small
 3734 00a8 38 C0 00                		bra	.L273
 3735                             	.L279:
 3736                             	.LBB19:
5965:../src/wolfcrypt/src/sp_int.c ****         }
5966:../src/wolfcrypt/src/sp_int.c ****         else {
5967:../src/wolfcrypt/src/sp_int.c ****             int i;
5968:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
5969:../src/wolfcrypt/src/sp_int.c ****             sp_int_word w = 0;
 3737                             		.loc 2 5969 25
 3738 00ab F9 A6 02 00             		mov.L	#0, 8[r10]
 3739 00af F9 A6 03 00             		mov.L	#0, 12[r10]
5970:../src/wolfcrypt/src/sp_int.c ****         #else
5971:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit l;
5972:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit h = 0;
5973:../src/wolfcrypt/src/sp_int.c ****         #endif
5974:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit t;
5975:../src/wolfcrypt/src/sp_int.c **** 
5976:../src/wolfcrypt/src/sp_int.c ****             for (i = a->used - 1; i >= 0; i--) {
 3740                             		.loc 2 5976 23
 3741 00b3 ED A5 05                		mov.L	20[r10], r5
 3742 00b6 EC 55                   		mov.L	[r5], r5
 3743                             		.loc 2 5976 20
 3744 00b8 60 15                   		sub	#1, r5
 3745 00ba E7 A5 01                		mov.L	r5, 4[r10]
 3746                             		.loc 2 5976 13
 3747 00bd 38 98 00                		bra	.L280
 3748                             	.L281:
5977:../src/wolfcrypt/src/sp_int.c ****             #ifndef SQR_MUL_ASM
5978:../src/wolfcrypt/src/sp_int.c ****                 t = sp_div_word((sp_int_digit)w, a->dp[i], d);
 3749                             		.loc 2 5978 21 discriminator 3
 3750 00c0 ED A1 02                		mov.L	8[r10], r1
 3751 00c3 ED A4 05                		mov.L	20[r10], r4
 3752 00c6 ED A5 01                		mov.L	4[r10], r5
 3753 00c9 62 25                   		add	#2, r5
 3754 00cb FE 65 45                		mov.L	[r5,r4], r5
 3755 00ce ED A3 06                		mov.L	24[r10], r3
 3756 00d1 EF 52                   		mov.L	r5, r2
 3757 00d3 05 00 00 00             		bsr	_sp_div_word
 3758 00d7 E7 A1 04                		mov.L	r1, 16[r10]
5979:../src/wolfcrypt/src/sp_int.c ****                 w = (w << SP_WORD_SIZE) | a->dp[i];
 3759                             		.loc 2 5979 24 discriminator 3
 3760 00da ED A5 02                		mov.L	8[r10], r5
 3761 00dd 6C 05                   		shll	#0, r5
 3762 00df E7 A5 09                		mov.L	r5, 36[r10]
 3763 00e2 F9 A6 08 00             		mov.L	#0, 32[r10]
 3764                             		.loc 2 5979 48 discriminator 3
 3765 00e6 ED A4 05                		mov.L	20[r10], r4
 3766 00e9 ED A5 01                		mov.L	4[r10], r5
 3767 00ec 62 25                   		add	#2, r5
 3768 00ee FE 65 45                		mov.L	[r5,r4], r5
 3769 00f1 E7 A5 0A                		mov.L	r5, 40[r10]
 3770 00f4 F9 A6 0B 00             		mov.L	#0, 44[r10]
 3771                             		.loc 2 5979 19 discriminator 3
 3772 00f8 ED A5 08                		mov.L	32[r10], r5
 3773 00fb ED A7 0A                		mov.L	40[r10], r7
 3774 00fe 57 75                   		or	r7, r5
 3775 0100 E7 A5 02                		mov.L	r5, 8[r10]
 3776 0103 ED A5 09                		mov.L	36[r10], r5
 3777 0106 ED AD 0B                		mov.L	44[r10], r13
 3778 0109 57 D5                   		or	r13, r5
 3779 010b E7 A5 03                		mov.L	r5, 12[r10]
5980:../src/wolfcrypt/src/sp_int.c ****                 w -= (sp_int_word)t * d;
 3780                             		.loc 2 5980 22 discriminator 3
 3781 010e ED A5 04                		mov.L	16[r10], r5
 3782 0111 EF 5B                   		mov.L	r5, r11
 3783 0113 66 0C                   		mov.L	#0, r12
 3784                             		.loc 2 5980 37 discriminator 3
 3785 0115 ED A5 06                		mov.L	24[r10], r5
 3786 0118 EF 58                   		mov.L	r5, r8
 3787 011a 66 09                   		mov.L	#0, r9
 3788 011c FF 34 8C                		mul	r8, r12, r4
 3789 011f FF 35 B9                		mul	r11, r9, r5
 3790 0122 4B 54                   		add	r5, r4
 3791 0124 EF BD                   		mov.L	r11, r13
 3792 0126 FC 1F 8D                		emulu	r8, r13
 3793 0129 EF D5                   		mov.L	r13, r5
 3794 012b EF E6                   		mov.L	r14, r6
 3795 012d 4B 64                   		add	r6, r4
 3796 012f EF 46                   		mov.L	r4, r6
 3797                             		.loc 2 5980 19 discriminator 3
 3798 0131 ED A3 02                		mov.L	8[r10], r3
 3799 0134 ED A4 03                		mov.L	12[r10], r4
 3800 0137 EF 47                   		mov.L	r4, r7
 3801 0139 FF 0E 53                		sub	r5, r3, r14
 3802 013c FC 03 67                		sbb	r6, r7
 3803 013f E7 A7 0D                		mov.L	r7, 52[r10]
 3804 0142 E7 AE 0C                		mov.L	r14, 48[r10]
 3805 0145 E5 AA 0C 02             		mov.L	48[r10], 8[r10]
 3806 0149 E5 AA 0D 03             		mov.L	52[r10], 12[r10]
5976:../src/wolfcrypt/src/sp_int.c ****             #ifndef SQR_MUL_ASM
 3807                             		.loc 2 5976 44 discriminator 3
 3808 014d ED A5 01                		mov.L	4[r10], r5
 3809 0150 60 15                   		sub	#1, r5
 3810 0152 E7 A5 01                		mov.L	r5, 4[r10]
 3811                             	.L280:
5976:../src/wolfcrypt/src/sp_int.c ****             #ifndef SQR_MUL_ASM
 3812                             		.loc 2 5976 13 discriminator 1
 3813 0155 ED A5 01                		mov.L	4[r10], r5
 3814 0158 61 05                   		cmp	#0, r5
 3815 015a 29 05 38 64 FF          		bge	.L281
5981:../src/wolfcrypt/src/sp_int.c ****             #else
5982:../src/wolfcrypt/src/sp_int.c ****                 l = a->dp[i];
5983:../src/wolfcrypt/src/sp_int.c ****                 t = sp_div_word(h, l, d);
5984:../src/wolfcrypt/src/sp_int.c ****                 h = l - t * d;
5985:../src/wolfcrypt/src/sp_int.c ****             #endif
5986:../src/wolfcrypt/src/sp_int.c ****             }
5987:../src/wolfcrypt/src/sp_int.c **** 
5988:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
5989:../src/wolfcrypt/src/sp_int.c ****             *r = (sp_int_digit)w;
 3816                             		.loc 2 5989 18
 3817 015f ED A4 02                		mov.L	8[r10], r4
 3818                             		.loc 2 5989 16
 3819 0162 ED A5 07                		mov.L	28[r10], r5
 3820 0165 E3 54                   		mov.L	r4, [r5]
 3821 0167 03                      		.balign 8,3,1
 3822                             	.L273:
 3823                             	.LBE19:
5990:../src/wolfcrypt/src/sp_int.c ****         #else
5991:../src/wolfcrypt/src/sp_int.c ****             *r = h;
5992:../src/wolfcrypt/src/sp_int.c ****         #endif
5993:../src/wolfcrypt/src/sp_int.c ****         }
5994:../src/wolfcrypt/src/sp_int.c **** 
5995:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
5996:../src/wolfcrypt/src/sp_int.c ****         if (a->sign == MP_NEG) {
5997:../src/wolfcrypt/src/sp_int.c ****             *r = d - *r;
5998:../src/wolfcrypt/src/sp_int.c ****         }
5999:../src/wolfcrypt/src/sp_int.c ****     #endif
6000:../src/wolfcrypt/src/sp_int.c ****     }
6001:../src/wolfcrypt/src/sp_int.c **** 
6002:../src/wolfcrypt/src/sp_int.c **** #if 0
6003:../src/wolfcrypt/src/sp_int.c ****     sp_print_digit(*r, "rmod");
6004:../src/wolfcrypt/src/sp_int.c **** #endif
6005:../src/wolfcrypt/src/sp_int.c **** 
6006:../src/wolfcrypt/src/sp_int.c ****     return err;
 3824                             		.loc 2 6006 12
 3825 0168 EC A5                   		mov.L	[r10], r5
6007:../src/wolfcrypt/src/sp_int.c **** }
 3826                             		.loc 2 6007 1
 3827 016a EF 51                   		mov.L	r5, r1
 3828 016c 3F 6D 16                		rtsd	#88, r6-r13
 3829                             	.LFE80:
 3831 016f 03                      		.section	.text.sp_div_2_mod_ct,"ax",@progbits
 3832                             		.global	_sp_div_2_mod_ct
 3834                             	_sp_div_2_mod_ct:
 3835                             	.LFB81:
6008:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MOD_D */
6009:../src/wolfcrypt/src/sp_int.c **** 
6010:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && defined(HAVE_ECC)
6011:../src/wolfcrypt/src/sp_int.c **** /* Divides a by 2 mod m and stores in r: r = (a / 2) mod m
6012:../src/wolfcrypt/src/sp_int.c ****  *
6013:../src/wolfcrypt/src/sp_int.c ****  * r = a / 2 (mod m) - constant time (a < m and positive)
6014:../src/wolfcrypt/src/sp_int.c ****  *
6015:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to divide.
6016:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m  SP integer that is modulus.
6017:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
6018:../src/wolfcrypt/src/sp_int.c ****  *
6019:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6020:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, m or r is NULL.
6021:../src/wolfcrypt/src/sp_int.c ****  */
6022:../src/wolfcrypt/src/sp_int.c **** int sp_div_2_mod_ct(sp_int* a, sp_int* m, sp_int* r)
6023:../src/wolfcrypt/src/sp_int.c **** {
 3836                             		.loc 2 6023 1
 3837 0000 6E 6D                   		pushm	r6-r13
 3838                             	.LCFI83:
 3839 0002 71 0A D0                		add	#-48, r0, r10
 3840                             	.LCFI84:
 3841 0005 EF A0                   		mov.L	r10, r0
 3842 0007 E7 A1 07                		mov.L	r1, 28[r10]
 3843 000a E7 A2 08                		mov.L	r2, 32[r10]
 3844 000d E7 A3 09                		mov.L	r3, 36[r10]
6024:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 3845                             		.loc 2 6024 9
 3846 0010 F8 A6 00                		mov.L	#0, [r10]
6025:../src/wolfcrypt/src/sp_int.c **** 
6026:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (m == NULL) || (r == NULL)) {
 3847                             		.loc 2 6026 8
 3848 0013 ED A5 07                		mov.L	28[r10], r5
 3849 0016 61 05                   		cmp	#0, r5
 3850 0018 20 0E                   		beq	.L284
 3851                             		.loc 2 6026 21 discriminator 1
 3852 001a ED A5 08                		mov.L	32[r10], r5
 3853 001d 61 05                   		cmp	#0, r5
 3854 001f 17                      		beq	.L284
 3855                             		.loc 2 6026 36 discriminator 2
 3856 0020 ED A5 09                		mov.L	36[r10], r5
 3857 0023 61 05                   		cmp	#0, r5
 3858 0025 1C                      		bne	.L285
 3859                             	.L284:
6027:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 3860                             		.loc 2 6027 13
 3861 0026 F8 A6 FD                		mov.L	#-3, [r10]
 3862                             	.L285:
6028:../src/wolfcrypt/src/sp_int.c ****     }
6029:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (r->size < m->used + 1)) {
 3863                             		.loc 2 6029 8
 3864 0029 EC A5                   		mov.L	[r10], r5
 3865 002b 61 05                   		cmp	#0, r5
 3866 002d 21 13                   		bne	.L286
 3867                             		.loc 2 6029 41 discriminator 1
 3868 002f ED A5 08                		mov.L	32[r10], r5
 3869 0032 EC 54                   		mov.L	[r5], r4
 3870                             		.loc 2 6029 31 discriminator 1
 3871 0034 ED A5 09                		mov.L	36[r10], r5
 3872 0037 A8 5D                   		mov.L	4[r5], r5
 3873                             		.loc 2 6029 26 discriminator 1
 3874 0039 47 54                   		cmp	r5, r4
 3875 003b 29 05                   		blt	.L286
6030:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 3876                             		.loc 2 6030 13
 3877 003d F8 A6 FD                		mov.L	#-3, [r10]
 3878                             	.L286:
6031:../src/wolfcrypt/src/sp_int.c ****     }
6032:../src/wolfcrypt/src/sp_int.c **** 
6033:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 3879                             		.loc 2 6033 8
 3880 0040 EC A5                   		mov.L	[r10], r5
 3881 0042 61 05                   		cmp	#0, r5
 3882 0044 3B 12 01                		bne	.L287
 3883                             	.LBB20:
6034:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6035:../src/wolfcrypt/src/sp_int.c ****         sp_int_word  w = 0;
 3884                             		.loc 2 6035 22
 3885 0047 F9 A6 01 00             		mov.L	#0, 4[r10]
 3886 004b F9 A6 02 00             		mov.L	#0, 8[r10]
6036:../src/wolfcrypt/src/sp_int.c ****     #else
6037:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit l = 0;
6038:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit h = 0;
6039:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit t;
6040:../src/wolfcrypt/src/sp_int.c ****     #endif
6041:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit mask;
6042:../src/wolfcrypt/src/sp_int.c ****         int i;
6043:../src/wolfcrypt/src/sp_int.c **** 
6044:../src/wolfcrypt/src/sp_int.c ****     #if 0
6045:../src/wolfcrypt/src/sp_int.c ****         sp_print(a, "a");
6046:../src/wolfcrypt/src/sp_int.c ****         sp_print(m, "m");
6047:../src/wolfcrypt/src/sp_int.c ****     #endif
6048:../src/wolfcrypt/src/sp_int.c **** 
6049:../src/wolfcrypt/src/sp_int.c ****         mask = (sp_int_digit)0 - (a->dp[0] & 1);
 3887                             		.loc 2 6049 40
 3888 004f ED A5 07                		mov.L	28[r10], r5
 3889 0052 A8 D5                   		mov.L	8[r5], r5
 3890                             		.loc 2 6049 44
 3891 0054 64 15                   		and	#1, r5
 3892                             		.loc 2 6049 14
 3893 0056 7E 15                   		neg	r5
 3894 0058 E7 A5 05                		mov.L	r5, 20[r10]
6050:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < m->used; i++) {
 3895                             		.loc 2 6050 16
 3896 005b F9 A6 03 00             		mov.L	#0, 12[r10]
 3897                             		.loc 2 6050 9
 3898 005f 38 91 00                		bra	.L288
 3899                             	.L289:
 3900                             	.LBB21:
6051:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit mask_a = (sp_int_digit)0 - (i < a->used);
 3901                             		.loc 2 6051 59 discriminator 3
 3902 0062 ED A5 07                		mov.L	28[r10], r5
 3903 0065 EC 55                   		mov.L	[r5], r5
 3904                             		.loc 2 6051 56 discriminator 3
 3905 0067 ED A4 03                		mov.L	12[r10], r4
 3906 006a 47 54                   		cmp	r5, r4
 3907 006c FC DB 59                		sclt.L	r5
 3908 006f 5B 55                   		movu.B	r5, r5
 3909                             		.loc 2 6051 26 discriminator 3
 3910 0071 7E 15                   		neg	r5
 3911 0073 E7 A5 06                		mov.L	r5, 24[r10]
6052:../src/wolfcrypt/src/sp_int.c **** 
6053:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
6054:../src/wolfcrypt/src/sp_int.c ****             w         += m->dp[i] & mask;
 3912                             		.loc 2 6054 31 discriminator 3
 3913 0076 ED A4 08                		mov.L	32[r10], r4
 3914 0079 ED A5 03                		mov.L	12[r10], r5
 3915 007c 62 25                   		add	#2, r5
 3916 007e FE 65 44                		mov.L	[r5,r4], r4
 3917                             		.loc 2 6054 35 discriminator 3
 3918 0081 ED A5 05                		mov.L	20[r10], r5
 3919 0084 53 45                   		and	r4, r5
 3920 0086 EF 5B                   		mov.L	r5, r11
 3921 0088 66 0C                   		mov.L	#0, r12
 3922                             		.loc 2 6054 23 discriminator 3
 3923 008a ED A5 01                		mov.L	4[r10], r5
 3924 008d ED A6 02                		mov.L	8[r10], r6
 3925 0090 EF 6E                   		mov.L	r6, r14
 3926 0092 FF 2D B5                		add	r11, r5, r13
 3927 0095 FC 0B CE                		adc	r12, r14
 3928 0098 E7 AD 01                		mov.L	r13, 4[r10]
 3929 009b E7 AE 02                		mov.L	r14, 8[r10]
6055:../src/wolfcrypt/src/sp_int.c ****             w         += a->dp[i] & mask_a;
 3930                             		.loc 2 6055 31 discriminator 3
 3931 009e ED A4 07                		mov.L	28[r10], r4
 3932 00a1 ED A5 03                		mov.L	12[r10], r5
 3933 00a4 62 25                   		add	#2, r5
 3934 00a6 FE 65 44                		mov.L	[r5,r4], r4
 3935                             		.loc 2 6055 35 discriminator 3
 3936 00a9 ED A5 06                		mov.L	24[r10], r5
 3937 00ac 53 45                   		and	r4, r5
 3938 00ae EF 58                   		mov.L	r5, r8
 3939 00b0 66 09                   		mov.L	#0, r9
 3940                             		.loc 2 6055 23 discriminator 3
 3941 00b2 ED A5 01                		mov.L	4[r10], r5
 3942 00b5 ED A6 02                		mov.L	8[r10], r6
 3943 00b8 EF 67                   		mov.L	r6, r7
 3944 00ba FF 24 85                		add	r8, r5, r4
 3945 00bd FC 0B 97                		adc	r9, r7
 3946 00c0 E7 A7 0B                		mov.L	r7, 44[r10]
 3947 00c3 E7 A4 0A                		mov.L	r4, 40[r10]
 3948 00c6 E5 AA 0A 01             		mov.L	40[r10], 4[r10]
 3949 00ca E5 AA 0B 02             		mov.L	44[r10], 8[r10]
6056:../src/wolfcrypt/src/sp_int.c ****             r->dp[i]   = (sp_int_digit)w;
 3950                             		.loc 2 6056 26 discriminator 3
 3951 00ce ED A3 01                		mov.L	4[r10], r3
 3952                             		.loc 2 6056 24 discriminator 3
 3953 00d1 ED A4 09                		mov.L	36[r10], r4
 3954 00d4 ED A5 03                		mov.L	12[r10], r5
 3955 00d7 62 25                   		add	#2, r5
 3956 00d9 FE 25 43                		mov.L	r3, [r5,r4]
6057:../src/wolfcrypt/src/sp_int.c ****             w        >>= DIGIT_BIT;
 3957                             		.loc 2 6057 22 discriminator 3
 3958 00dc ED A5 02                		mov.L	8[r10], r5
 3959 00df 68 05                   		shlr	#0, r5
 3960 00e1 E7 A5 01                		mov.L	r5, 4[r10]
 3961 00e4 F9 A6 02 00             		mov.L	#0, 8[r10]
 3962                             	.LBE21:
6050:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit mask_a = (sp_int_digit)0 - (i < a->used);
 3963                             		.loc 2 6050 35 discriminator 3
 3964 00e8 ED A5 03                		mov.L	12[r10], r5
 3965 00eb 62 15                   		add	#1, r5
 3966 00ed E7 A5 03                		mov.L	r5, 12[r10]
 3967                             	.L288:
6050:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit mask_a = (sp_int_digit)0 - (i < a->used);
 3968                             		.loc 2 6050 26 discriminator 1
 3969 00f0 ED A5 08                		mov.L	32[r10], r5
 3970 00f3 EC 55                   		mov.L	[r5], r5
6050:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit mask_a = (sp_int_digit)0 - (i < a->used);
 3971                             		.loc 2 6050 9 discriminator 1
 3972 00f5 ED A4 03                		mov.L	12[r10], r4
 3973 00f8 47 54                   		cmp	r5, r4
 3974 00fa 28 05 38 66 FF          		blt	.L289
6058:../src/wolfcrypt/src/sp_int.c ****         #else
6059:../src/wolfcrypt/src/sp_int.c ****             t        = m->dp[i] & mask;
6060:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, t);
6061:../src/wolfcrypt/src/sp_int.c ****             t        = a->dp[i] & mask_a;
6062:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, t);
6063:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = l;
6064:../src/wolfcrypt/src/sp_int.c ****             l        = h;
6065:../src/wolfcrypt/src/sp_int.c ****             h        = 0;
6066:../src/wolfcrypt/src/sp_int.c ****         #endif
6067:../src/wolfcrypt/src/sp_int.c ****         }
6068:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6069:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = (sp_int_digit)w;
 3975                             		.loc 2 6069 20
 3976 00ff ED A3 01                		mov.L	4[r10], r3
 3977                             		.loc 2 6069 18
 3978 0102 ED A4 09                		mov.L	36[r10], r4
 3979 0105 ED A5 03                		mov.L	12[r10], r5
 3980 0108 62 25                   		add	#2, r5
 3981 010a FE 25 43                		mov.L	r3, [r5,r4]
6070:../src/wolfcrypt/src/sp_int.c ****     #else
6071:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = l;
6072:../src/wolfcrypt/src/sp_int.c ****     #endif
6073:../src/wolfcrypt/src/sp_int.c ****         r->used = i + 1;
 3982                             		.loc 2 6073 21
 3983 010d ED A5 03                		mov.L	12[r10], r5
 3984 0110 71 54 01                		add	#1, r5, r4
 3985                             		.loc 2 6073 17
 3986 0113 ED A5 09                		mov.L	36[r10], r5
 3987 0116 E3 54                   		mov.L	r4, [r5]
 3988                             	.LBB22:
6074:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
6075:../src/wolfcrypt/src/sp_int.c ****         r->sign = MP_ZPOS;
6076:../src/wolfcrypt/src/sp_int.c ****     #endif
6077:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
 3989                             		.loc 2 6077 9
 3990 0118 ED A5 09                		mov.L	36[r10], r5
 3991 011b EC 55                   		mov.L	[r5], r5
 3992 011d 60 15                   		sub	#1, r5
 3993 011f E7 A5 04                		mov.L	r5, 16[r10]
 3994 0122 09                      		bra	.L290
 3995                             	.L292:
 3996                             		.loc 2 6077 9 is_stmt 0 discriminator 5
 3997 0123 ED A5 04                		mov.L	16[r10], r5
 3998 0126 60 15                   		sub	#1, r5
 3999 0128 E7 A5 04                		mov.L	r5, 16[r10]
 4000                             	.L290:
 4001                             		.loc 2 6077 9 discriminator 1
 4002 012b ED A5 04                		mov.L	16[r10], r5
 4003 012e 61 05                   		cmp	#0, r5
 4004 0130 29 11                   		blt	.L291
 4005                             		.loc 2 6077 9 discriminator 3
 4006 0132 ED A4 09                		mov.L	36[r10], r4
 4007 0135 ED A5 04                		mov.L	16[r10], r5
 4008 0138 62 25                   		add	#2, r5
 4009 013a FE 65 45                		mov.L	[r5,r4], r5
 4010 013d 61 05                   		cmp	#0, r5
 4011 013f 20 E4                   		beq	.L292
 4012                             	.L291:
 4013                             		.loc 2 6077 9 discriminator 6
 4014 0141 ED A5 04                		mov.L	16[r10], r5
 4015 0144 71 54 01                		add	#1, r5, r4
 4016 0147 ED A5 09                		mov.L	36[r10], r5
 4017 014a E3 54                   		mov.L	r4, [r5]
 4018                             	.LBE22:
6078:../src/wolfcrypt/src/sp_int.c ****         sp_div_2(r, r);
 4019                             		.loc 2 6078 9 is_stmt 1 discriminator 6
 4020 014c ED A2 09                		mov.L	36[r10], r2
 4021 014f ED A1 09                		mov.L	36[r10], r1
 4022 0152 05 00 00 00             		bsr	_sp_div_2
 4023                             	.L287:
 4024                             	.LBE20:
6079:../src/wolfcrypt/src/sp_int.c **** 
6080:../src/wolfcrypt/src/sp_int.c ****     #if 0
6081:../src/wolfcrypt/src/sp_int.c ****         sp_print(r, "rd2");
6082:../src/wolfcrypt/src/sp_int.c ****     #endif
6083:../src/wolfcrypt/src/sp_int.c ****     }
6084:../src/wolfcrypt/src/sp_int.c **** 
6085:../src/wolfcrypt/src/sp_int.c ****     return err;
 4025                             		.loc 2 6085 12
 4026 0156 EC A5                   		mov.L	[r10], r5
6086:../src/wolfcrypt/src/sp_int.c **** }
 4027                             		.loc 2 6086 1
 4028 0158 EF 51                   		mov.L	r5, r1
 4029 015a 3F 6D 14                		rtsd	#80, r6-r13
 4030                             	.LFE81:
 4032                             		.section	.text.sp_div_2,"ax",@progbits
 4033                             		.global	_sp_div_2
 4035                             	_sp_div_2:
 4036                             	.LFB82:
6087:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL && HAVE_ECC */
6088:../src/wolfcrypt/src/sp_int.c **** 
6089:../src/wolfcrypt/src/sp_int.c **** #if defined(HAVE_ECC) || !defined(NO_DSA) || defined(OPENSSL_EXTRA) || \
6090:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY) && \
6091:../src/wolfcrypt/src/sp_int.c ****      !defined(WOLFSSL_RSA_PUBLIC_ONLY))
6092:../src/wolfcrypt/src/sp_int.c **** /* Divides a by 2 and stores in r: r = a >> 1
6093:../src/wolfcrypt/src/sp_int.c ****  *
6094:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to divide.
6095:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
6096:../src/wolfcrypt/src/sp_int.c ****  *
6097:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6098:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or r is NULL.
6099:../src/wolfcrypt/src/sp_int.c ****  */
6100:../src/wolfcrypt/src/sp_int.c **** #if !(defined(WOLFSSL_SP_MATH_ALL) && defined(HAVE_ECC))
6101:../src/wolfcrypt/src/sp_int.c **** static
6102:../src/wolfcrypt/src/sp_int.c **** #endif
6103:../src/wolfcrypt/src/sp_int.c **** int sp_div_2(sp_int* a, sp_int* r)
6104:../src/wolfcrypt/src/sp_int.c **** {
 4037                             		.loc 2 6104 1
 4038 0000 7E AA                   		push.l	r10
 4039                             	.LCFI85:
 4040 0002 71 0A EC                		add	#-20, r0, r10
 4041                             	.LCFI86:
 4042 0005 EF A0                   		mov.L	r10, r0
 4043 0007 E7 A1 03                		mov.L	r1, 12[r10]
 4044 000a E7 A2 04                		mov.L	r2, 16[r10]
6105:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 4045                             		.loc 2 6105 9
 4046 000d F8 A6 00                		mov.L	#0, [r10]
6106:../src/wolfcrypt/src/sp_int.c **** 
6107:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && defined(HAVE_ECC)
6108:../src/wolfcrypt/src/sp_int.c ****     /* Only when a public API. */
6109:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (r == NULL)) {
 4047                             		.loc 2 6109 8
 4048 0010 ED A5 03                		mov.L	12[r10], r5
 4049 0013 61 05                   		cmp	#0, r5
 4050 0015 17                      		beq	.L295
 4051                             		.loc 2 6109 21 discriminator 1
 4052 0016 ED A5 04                		mov.L	16[r10], r5
 4053 0019 61 05                   		cmp	#0, r5
 4054 001b 1C                      		bne	.L296
 4055                             	.L295:
6110:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 4056                             		.loc 2 6110 13
 4057 001c F8 A6 FD                		mov.L	#-3, [r10]
 4058                             	.L296:
6111:../src/wolfcrypt/src/sp_int.c ****     }
6112:../src/wolfcrypt/src/sp_int.c **** #endif
6113:../src/wolfcrypt/src/sp_int.c **** 
6114:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 4059                             		.loc 2 6114 8
 4060 001f EC A5                   		mov.L	[r10], r5
 4061 0021 61 05                   		cmp	#0, r5
 4062 0023 3B AC 00                		bne	.L297
 4063                             	.LBB23:
6115:../src/wolfcrypt/src/sp_int.c ****         int i;
6116:../src/wolfcrypt/src/sp_int.c **** 
6117:../src/wolfcrypt/src/sp_int.c ****         r->used = a->used;
 4064                             		.loc 2 6117 20
 4065 0026 ED A5 03                		mov.L	12[r10], r5
 4066 0029 EC 54                   		mov.L	[r5], r4
 4067                             		.loc 2 6117 17
 4068 002b ED A5 04                		mov.L	16[r10], r5
 4069 002e E3 54                   		mov.L	r4, [r5]
6118:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < a->used - 1; i++) {
 4070                             		.loc 2 6118 16
 4071 0030 F9 A6 01 00             		mov.L	#0, 4[r10]
 4072                             		.loc 2 6118 9
 4073 0034 2E 35                   		bra	.L298
 4074                             	.L299:
6119:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = (a->dp[i] >> 1) | (a->dp[i+1] << (SP_WORD_SIZE - 1));
 4075                             		.loc 2 6119 30 discriminator 3
 4076 0036 ED A4 03                		mov.L	12[r10], r4
 4077 0039 ED A5 01                		mov.L	4[r10], r5
 4078 003c 62 25                   		add	#2, r5
 4079 003e FE 65 45                		mov.L	[r5,r4], r5
 4080                             		.loc 2 6119 34 discriminator 3
 4081 0041 FD 81 54                		shlr	#1, r5, r4
 4082                             		.loc 2 6119 50 discriminator 3
 4083 0044 ED A5 01                		mov.L	4[r10], r5
 4084 0047 62 15                   		add	#1, r5
 4085                             		.loc 2 6119 48 discriminator 3
 4086 0049 ED A3 03                		mov.L	12[r10], r3
 4087 004c 62 25                   		add	#2, r5
 4088 004e FE 65 35                		mov.L	[r5,r3], r5
 4089                             		.loc 2 6119 54 discriminator 3
 4090 0051 6D F5                   		shll	#31, r5
 4091                             		.loc 2 6119 40 discriminator 3
 4092 0053 FF 53 54                		or	r5, r4, r3
 4093                             		.loc 2 6119 22 discriminator 3
 4094 0056 ED A4 04                		mov.L	16[r10], r4
 4095 0059 ED A5 01                		mov.L	4[r10], r5
 4096 005c 62 25                   		add	#2, r5
 4097 005e FE 25 43                		mov.L	r3, [r5,r4]
6118:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < a->used - 1; i++) {
 4098                             		.loc 2 6118 39 discriminator 3
 4099 0061 ED A5 01                		mov.L	4[r10], r5
 4100 0064 62 15                   		add	#1, r5
 4101 0066 E7 A5 01                		mov.L	r5, 4[r10]
 4102                             	.L298:
6118:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < a->used - 1; i++) {
 4103                             		.loc 2 6118 26 discriminator 1
 4104 0069 ED A5 03                		mov.L	12[r10], r5
 4105 006c EC 55                   		mov.L	[r5], r5
6118:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < a->used - 1; i++) {
 4106                             		.loc 2 6118 33 discriminator 1
 4107 006e 60 15                   		sub	#1, r5
6118:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < a->used - 1; i++) {
 4108                             		.loc 2 6118 9 discriminator 1
 4109 0070 ED A4 01                		mov.L	4[r10], r4
 4110 0073 47 54                   		cmp	r5, r4
 4111 0075 29 C1                   		blt	.L299
6120:../src/wolfcrypt/src/sp_int.c ****         }
6121:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = a->dp[i] >> 1;
 4112                             		.loc 2 6121 25
 4113 0077 ED A4 03                		mov.L	12[r10], r4
 4114 007a ED A5 01                		mov.L	4[r10], r5
 4115 007d 62 25                   		add	#2, r5
 4116 007f FE 65 45                		mov.L	[r5,r4], r5
 4117                             		.loc 2 6121 29
 4118 0082 FD 81 53                		shlr	#1, r5, r3
 4119                             		.loc 2 6121 18
 4120 0085 ED A4 04                		mov.L	16[r10], r4
 4121 0088 ED A5 01                		mov.L	4[r10], r5
 4122 008b 62 25                   		add	#2, r5
 4123 008d FE 25 43                		mov.L	r3, [r5,r4]
6122:../src/wolfcrypt/src/sp_int.c ****         r->used = i + 1;
 4124                             		.loc 2 6122 21
 4125 0090 ED A5 01                		mov.L	4[r10], r5
 4126 0093 71 54 01                		add	#1, r5, r4
 4127                             		.loc 2 6122 17
 4128 0096 ED A5 04                		mov.L	16[r10], r5
 4129 0099 E3 54                   		mov.L	r4, [r5]
 4130                             	.LBB24:
6123:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
 4131                             		.loc 2 6123 9
 4132 009b ED A5 04                		mov.L	16[r10], r5
 4133 009e EC 55                   		mov.L	[r5], r5
 4134 00a0 60 15                   		sub	#1, r5
 4135 00a2 E7 A5 02                		mov.L	r5, 8[r10]
 4136 00a5 09                      		bra	.L300
 4137                             	.L302:
 4138                             		.loc 2 6123 9 is_stmt 0 discriminator 5
 4139 00a6 ED A5 02                		mov.L	8[r10], r5
 4140 00a9 60 15                   		sub	#1, r5
 4141 00ab E7 A5 02                		mov.L	r5, 8[r10]
 4142                             	.L300:
 4143                             		.loc 2 6123 9 discriminator 1
 4144 00ae ED A5 02                		mov.L	8[r10], r5
 4145 00b1 61 05                   		cmp	#0, r5
 4146 00b3 29 11                   		blt	.L301
 4147                             		.loc 2 6123 9 discriminator 3
 4148 00b5 ED A4 04                		mov.L	16[r10], r4
 4149 00b8 ED A5 02                		mov.L	8[r10], r5
 4150 00bb 62 25                   		add	#2, r5
 4151 00bd FE 65 45                		mov.L	[r5,r4], r5
 4152 00c0 61 05                   		cmp	#0, r5
 4153 00c2 20 E4                   		beq	.L302
 4154                             	.L301:
 4155                             		.loc 2 6123 9 discriminator 6
 4156 00c4 ED A5 02                		mov.L	8[r10], r5
 4157 00c7 71 54 01                		add	#1, r5, r4
 4158 00ca ED A5 04                		mov.L	16[r10], r5
 4159 00cd E3 54                   		mov.L	r4, [r5]
 4160                             	.L297:
 4161                             	.LBE24:
 4162                             	.LBE23:
6124:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
6125:../src/wolfcrypt/src/sp_int.c ****         r->sign = a->sign;
6126:../src/wolfcrypt/src/sp_int.c ****     #endif
6127:../src/wolfcrypt/src/sp_int.c ****     }
6128:../src/wolfcrypt/src/sp_int.c **** 
6129:../src/wolfcrypt/src/sp_int.c ****     return err;
 4163                             		.loc 2 6129 12 is_stmt 1
 4164 00cf EC A5                   		mov.L	[r10], r5
6130:../src/wolfcrypt/src/sp_int.c **** }
 4165                             		.loc 2 6130 1
 4166 00d1 EF 51                   		mov.L	r5, r1
 4167 00d3 3F AA 06                		rtsd	#24, r10-r10
 4168                             	.LFE82:
 4170                             		.section	.text._sp_add_off,"ax",@progbits
 4172                             	__sp_add_off:
 4173                             	.LFB83:
6131:../src/wolfcrypt/src/sp_int.c **** #endif /* HAVE_ECC || !NO_DSA || OPENSSL_EXTRA ||
6132:../src/wolfcrypt/src/sp_int.c ****         * (!NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY) */
6133:../src/wolfcrypt/src/sp_int.c **** 
6134:../src/wolfcrypt/src/sp_int.c **** /************************
6135:../src/wolfcrypt/src/sp_int.c ****  * Add/Subtract Functions
6136:../src/wolfcrypt/src/sp_int.c ****  ************************/
6137:../src/wolfcrypt/src/sp_int.c **** 
6138:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_RSA_VERIFY_ONLY) || defined(WOLFSSL_SP_INVMOD)
6139:../src/wolfcrypt/src/sp_int.c **** /* Add offset b to a into r: r = a + (b << (o * SP_WORD_SIZEOF))
6140:../src/wolfcrypt/src/sp_int.c ****  *
6141:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to add to.
6142:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to add.
6143:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to store result in.
6144:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   o  Number of digits to offset b.
6145:../src/wolfcrypt/src/sp_int.c ****  *
6146:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6147:../src/wolfcrypt/src/sp_int.c ****  */
6148:../src/wolfcrypt/src/sp_int.c **** static int _sp_add_off(sp_int* a, sp_int* b, sp_int* r, int o)
6149:../src/wolfcrypt/src/sp_int.c **** {
 4174                             		.loc 2 6149 1
 4175 0000 6E 6D                   		pushm	r6-r13
 4176                             	.LCFI87:
 4177 0002 71 0A B4                		add	#-76, r0, r10
 4178                             	.LCFI88:
 4179 0005 EF A0                   		mov.L	r10, r0
 4180 0007 E7 A1 05                		mov.L	r1, 20[r10]
 4181 000a E7 A2 06                		mov.L	r2, 24[r10]
 4182 000d E7 A3 07                		mov.L	r3, 28[r10]
 4183 0010 E7 A4 08                		mov.L	r4, 32[r10]
6150:../src/wolfcrypt/src/sp_int.c ****     int i;
6151:../src/wolfcrypt/src/sp_int.c ****     int j;
6152:../src/wolfcrypt/src/sp_int.c **** #ifndef SQR_MUL_ASM
6153:../src/wolfcrypt/src/sp_int.c ****     sp_int_word t = 0;
 4184                             		.loc 2 6153 17
 4185 0013 F9 A6 02 00             		mov.L	#0, 8[r10]
 4186 0017 F9 A6 03 00             		mov.L	#0, 12[r10]
6154:../src/wolfcrypt/src/sp_int.c **** #else
6155:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
6156:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
6157:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t = 0;
6158:../src/wolfcrypt/src/sp_int.c **** #endif
6159:../src/wolfcrypt/src/sp_int.c **** 
6160:../src/wolfcrypt/src/sp_int.c **** #ifdef SP_MATH_NEED_ADD_OFF
6161:../src/wolfcrypt/src/sp_int.c ****     for (i = 0; (i < o) && (i < a->used); i++) {
6162:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = a->dp[i];
6163:../src/wolfcrypt/src/sp_int.c ****     }
6164:../src/wolfcrypt/src/sp_int.c ****     for (; i < o; i++) {
6165:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = 0;
6166:../src/wolfcrypt/src/sp_int.c ****     }
6167:../src/wolfcrypt/src/sp_int.c **** #else
6168:../src/wolfcrypt/src/sp_int.c ****     i = 0;
 4187                             		.loc 2 6168 7
 4188 001b F8 A6 00                		mov.L	#0, [r10]
6169:../src/wolfcrypt/src/sp_int.c ****     (void)o;
6170:../src/wolfcrypt/src/sp_int.c **** #endif
6171:../src/wolfcrypt/src/sp_int.c **** 
6172:../src/wolfcrypt/src/sp_int.c ****     for (j = 0; (i < a->used) && (j < b->used); i++, j++) {
 4189                             		.loc 2 6172 12
 4190 001e F9 A6 01 00             		mov.L	#0, 4[r10]
 4191                             		.loc 2 6172 5
 4192 0022 38 87 00                		bra	.L305
 4193                             	.L307:
6173:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6174:../src/wolfcrypt/src/sp_int.c ****         t += a->dp[i];
 4194                             		.loc 2 6174 19 discriminator 4
 4195 0025 ED A4 05                		mov.L	20[r10], r4
 4196 0028 EC A5                   		mov.L	[r10], r5
 4197 002a 62 25                   		add	#2, r5
 4198 002c FE 65 45                		mov.L	[r5,r4], r5
 4199 002f EF 5D                   		mov.L	r5, r13
 4200 0031 66 0E                   		mov.L	#0, r14
 4201                             		.loc 2 6174 11 discriminator 4
 4202 0033 ED A5 02                		mov.L	8[r10], r5
 4203 0036 ED A6 03                		mov.L	12[r10], r6
 4204 0039 EF 64                   		mov.L	r6, r4
 4205 003b FF 23 D5                		add	r13, r5, r3
 4206 003e FC 0B E4                		adc	r14, r4
 4207 0041 E7 A4 0C                		mov.L	r4, 48[r10]
 4208 0044 E7 A3 0B                		mov.L	r3, 44[r10]
 4209 0047 E5 AA 0B 02             		mov.L	44[r10], 8[r10]
 4210 004b E5 AA 0C 03             		mov.L	48[r10], 12[r10]
6175:../src/wolfcrypt/src/sp_int.c ****         t += b->dp[j];
 4211                             		.loc 2 6175 19 discriminator 4
 4212 004f ED A4 06                		mov.L	24[r10], r4
 4213 0052 ED A5 01                		mov.L	4[r10], r5
 4214 0055 62 25                   		add	#2, r5
 4215 0057 FE 65 45                		mov.L	[r5,r4], r5
 4216 005a E7 A5 09                		mov.L	r5, 36[r10]
 4217 005d F9 A6 0A 00             		mov.L	#0, 40[r10]
 4218                             		.loc 2 6175 11 discriminator 4
 4219 0061 ED A5 02                		mov.L	8[r10], r5
 4220 0064 ED A6 03                		mov.L	12[r10], r6
 4221 0067 EF 64                   		mov.L	r6, r4
 4222 0069 ED A7 09                		mov.L	36[r10], r7
 4223 006c FF 23 75                		add	r7, r5, r3
 4224 006f 06 A1 02 A4 0A          		adc 40[r10],r4
 4225 0074 E7 A4 0E                		mov.L	r4, 56[r10]
 4226 0077 E7 A3 0D                		mov.L	r3, 52[r10]
 4227 007a E5 AA 0D 02             		mov.L	52[r10], 8[r10]
 4228 007e E5 AA 0E 03             		mov.L	56[r10], 12[r10]
6176:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = (sp_int_digit)t;
 4229                             		.loc 2 6176 20 discriminator 4
 4230 0082 ED A3 02                		mov.L	8[r10], r3
 4231                             		.loc 2 6176 18 discriminator 4
 4232 0085 ED A4 07                		mov.L	28[r10], r4
 4233 0088 EC A5                   		mov.L	[r10], r5
 4234 008a 62 25                   		add	#2, r5
 4235 008c FE 25 43                		mov.L	r3, [r5,r4]
6177:../src/wolfcrypt/src/sp_int.c ****         t >>= SP_WORD_SIZE;
 4236                             		.loc 2 6177 11 discriminator 4
 4237 008f ED A5 03                		mov.L	12[r10], r5
 4238 0092 68 05                   		shlr	#0, r5
 4239 0094 E7 A5 02                		mov.L	r5, 8[r10]
 4240 0097 F9 A6 03 00             		mov.L	#0, 12[r10]
6172:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4241                             		.loc 2 6172 50 discriminator 4
 4242 009b EC A5                   		mov.L	[r10], r5
 4243 009d 62 15                   		add	#1, r5
 4244 009f E3 A5                   		mov.L	r5, [r10]
6172:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4245                             		.loc 2 6172 55 discriminator 4
 4246 00a1 ED A5 01                		mov.L	4[r10], r5
 4247 00a4 62 15                   		add	#1, r5
 4248 00a6 E7 A5 01                		mov.L	r5, 4[r10]
 4249                             	.L305:
6172:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4250                             		.loc 2 6172 23 discriminator 1
 4251 00a9 ED A5 05                		mov.L	20[r10], r5
 4252 00ac EC 54                   		mov.L	[r5], r4
6172:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4253                             		.loc 2 6172 5 discriminator 1
 4254 00ae EC A5                   		mov.L	[r10], r5
 4255 00b0 47 45                   		cmp	r4, r5
 4256 00b2 28 5C                   		bge	.L308
6172:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4257                             		.loc 2 6172 40 discriminator 3
 4258 00b4 ED A5 06                		mov.L	24[r10], r5
 4259 00b7 EC 54                   		mov.L	[r5], r4
6172:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4260                             		.loc 2 6172 31 discriminator 3
 4261 00b9 ED A5 01                		mov.L	4[r10], r5
 4262 00bc 47 45                   		cmp	r4, r5
 4263 00be 28 05 38 65 FF          		blt	.L307
6178:../src/wolfcrypt/src/sp_int.c ****     #else
6179:../src/wolfcrypt/src/sp_int.c ****         t = a->dp[i];
6180:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, t);
6181:../src/wolfcrypt/src/sp_int.c ****         t = b->dp[j];
6182:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, t);
6183:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = l;
6184:../src/wolfcrypt/src/sp_int.c ****         l = h;
6185:../src/wolfcrypt/src/sp_int.c ****         h = 0;
6186:../src/wolfcrypt/src/sp_int.c ****     #endif
6187:../src/wolfcrypt/src/sp_int.c ****     }
6188:../src/wolfcrypt/src/sp_int.c ****     for (; i < a->used; i++) {
 4264                             		.loc 2 6188 5
 4265 00c3 2E 4B                   		bra	.L308
 4266                             	.L309:
6189:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6190:../src/wolfcrypt/src/sp_int.c ****         t += a->dp[i];
 4267                             		.loc 2 6190 19 discriminator 2
 4268 00c5 ED A4 05                		mov.L	20[r10], r4
 4269 00c8 EC A5                   		mov.L	[r10], r5
 4270 00ca 62 25                   		add	#2, r5
 4271 00cc FE 65 45                		mov.L	[r5,r4], r5
 4272 00cf EF 58                   		mov.L	r5, r8
 4273 00d1 66 09                   		mov.L	#0, r9
 4274                             		.loc 2 6190 11 discriminator 2
 4275 00d3 ED A5 02                		mov.L	8[r10], r5
 4276 00d6 ED A6 03                		mov.L	12[r10], r6
 4277 00d9 EF 6E                   		mov.L	r6, r14
 4278 00db FF 2D 85                		add	r8, r5, r13
 4279 00de FC 0B 9E                		adc	r9, r14
 4280 00e1 E7 AE 10                		mov.L	r14, 64[r10]
 4281 00e4 E7 AD 0F                		mov.L	r13, 60[r10]
 4282 00e7 E5 AA 0F 02             		mov.L	60[r10], 8[r10]
 4283 00eb E5 AA 10 03             		mov.L	64[r10], 12[r10]
6191:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = (sp_int_digit)t;
 4284                             		.loc 2 6191 20 discriminator 2
 4285 00ef ED A3 02                		mov.L	8[r10], r3
 4286                             		.loc 2 6191 18 discriminator 2
 4287 00f2 ED A4 07                		mov.L	28[r10], r4
 4288 00f5 EC A5                   		mov.L	[r10], r5
 4289 00f7 62 25                   		add	#2, r5
 4290 00f9 FE 25 43                		mov.L	r3, [r5,r4]
6192:../src/wolfcrypt/src/sp_int.c ****         t >>= SP_WORD_SIZE;
 4291                             		.loc 2 6192 11 discriminator 2
 4292 00fc ED A5 03                		mov.L	12[r10], r5
 4293 00ff 68 05                   		shlr	#0, r5
 4294 0101 E7 A5 02                		mov.L	r5, 8[r10]
 4295 0104 F9 A6 03 00             		mov.L	#0, 12[r10]
6188:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4296                             		.loc 2 6188 26 discriminator 2
 4297 0108 EC A5                   		mov.L	[r10], r5
 4298 010a 62 15                   		add	#1, r5
 4299 010c E3 A5                   		mov.L	r5, [r10]
 4300                             	.L308:
6188:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4301                             		.loc 2 6188 17 discriminator 1
 4302 010e ED A5 05                		mov.L	20[r10], r5
 4303 0111 EC 55                   		mov.L	[r5], r5
6188:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4304                             		.loc 2 6188 5 discriminator 1
 4305 0113 EC A4                   		mov.L	[r10], r4
 4306 0115 47 54                   		cmp	r5, r4
 4307 0117 29 AE                   		blt	.L309
6193:../src/wolfcrypt/src/sp_int.c ****     #else
6194:../src/wolfcrypt/src/sp_int.c ****         t = a->dp[i];
6195:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, t);
6196:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = l;
6197:../src/wolfcrypt/src/sp_int.c ****         l = h;
6198:../src/wolfcrypt/src/sp_int.c ****         h = 0;
6199:../src/wolfcrypt/src/sp_int.c ****     #endif
6200:../src/wolfcrypt/src/sp_int.c ****     }
6201:../src/wolfcrypt/src/sp_int.c ****     for (; j < b->used; i++, j++) {
 4308                             		.loc 2 6201 5
 4309 0119 2E 54                   		bra	.L310
 4310                             	.L311:
6202:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6203:../src/wolfcrypt/src/sp_int.c ****         t += b->dp[j];
 4311                             		.loc 2 6203 19 discriminator 2
 4312 011b ED A4 06                		mov.L	24[r10], r4
 4313 011e ED A5 01                		mov.L	4[r10], r5
 4314 0121 62 25                   		add	#2, r5
 4315 0123 FE 65 45                		mov.L	[r5,r4], r5
 4316 0126 EF 5B                   		mov.L	r5, r11
 4317 0128 66 0C                   		mov.L	#0, r12
 4318                             		.loc 2 6203 11 discriminator 2
 4319 012a ED A5 02                		mov.L	8[r10], r5
 4320 012d ED A6 03                		mov.L	12[r10], r6
 4321 0130 EF 67                   		mov.L	r6, r7
 4322 0132 FF 24 B5                		add	r11, r5, r4
 4323 0135 FC 0B C7                		adc	r12, r7
 4324 0138 E7 A7 12                		mov.L	r7, 72[r10]
 4325 013b E7 A4 11                		mov.L	r4, 68[r10]
 4326 013e E5 AA 11 02             		mov.L	68[r10], 8[r10]
 4327 0142 E5 AA 12 03             		mov.L	72[r10], 12[r10]
6204:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = (sp_int_digit)t;
 4328                             		.loc 2 6204 20 discriminator 2
 4329 0146 ED A3 02                		mov.L	8[r10], r3
 4330                             		.loc 2 6204 18 discriminator 2
 4331 0149 ED A4 07                		mov.L	28[r10], r4
 4332 014c EC A5                   		mov.L	[r10], r5
 4333 014e 62 25                   		add	#2, r5
 4334 0150 FE 25 43                		mov.L	r3, [r5,r4]
6205:../src/wolfcrypt/src/sp_int.c ****         t >>= SP_WORD_SIZE;
 4335                             		.loc 2 6205 11 discriminator 2
 4336 0153 ED A5 03                		mov.L	12[r10], r5
 4337 0156 68 05                   		shlr	#0, r5
 4338 0158 E7 A5 02                		mov.L	r5, 8[r10]
 4339 015b F9 A6 03 00             		mov.L	#0, 12[r10]
6201:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4340                             		.loc 2 6201 26 discriminator 2
 4341 015f EC A5                   		mov.L	[r10], r5
 4342 0161 62 15                   		add	#1, r5
 4343 0163 E3 A5                   		mov.L	r5, [r10]
6201:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4344                             		.loc 2 6201 31 discriminator 2
 4345 0165 ED A5 01                		mov.L	4[r10], r5
 4346 0168 62 15                   		add	#1, r5
 4347 016a E7 A5 01                		mov.L	r5, 4[r10]
 4348                             	.L310:
6201:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4349                             		.loc 2 6201 17 discriminator 1
 4350 016d ED A5 06                		mov.L	24[r10], r5
 4351 0170 EC 55                   		mov.L	[r5], r5
6201:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4352                             		.loc 2 6201 5 discriminator 1
 4353 0172 ED A4 01                		mov.L	4[r10], r4
 4354 0175 47 54                   		cmp	r5, r4
 4355 0177 29 A4                   		blt	.L311
6206:../src/wolfcrypt/src/sp_int.c ****     #else
6207:../src/wolfcrypt/src/sp_int.c ****         t = b->dp[j];
6208:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, t);
6209:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = l;
6210:../src/wolfcrypt/src/sp_int.c ****         l = h;
6211:../src/wolfcrypt/src/sp_int.c ****         h = 0;
6212:../src/wolfcrypt/src/sp_int.c ****     #endif
6213:../src/wolfcrypt/src/sp_int.c ****     }
6214:../src/wolfcrypt/src/sp_int.c ****     r->used = i;
 4356                             		.loc 2 6214 13
 4357 0179 ED A5 07                		mov.L	28[r10], r5
 4358 017c EC A4                   		mov.L	[r10], r4
 4359 017e E3 54                   		mov.L	r4, [r5]
6215:../src/wolfcrypt/src/sp_int.c **** #ifndef SQR_MUL_ASM
6216:../src/wolfcrypt/src/sp_int.c ****     if (t != 0) {
 4360                             		.loc 2 6216 8
 4361 0180 ED A5 02                		mov.L	8[r10], r5
 4362 0183 ED A4 03                		mov.L	12[r10], r4
 4363 0186 57 45                   		or	r4, r5
 4364 0188 61 05                   		cmp	#0, r5
 4365 018a 20 1C                   		beq	.L312
6217:../src/wolfcrypt/src/sp_int.c ****        r->dp[i] = (sp_int_digit)t;
 4366                             		.loc 2 6217 19
 4367 018c ED A3 02                		mov.L	8[r10], r3
 4368                             		.loc 2 6217 17
 4369 018f ED A4 07                		mov.L	28[r10], r4
 4370 0192 EC A5                   		mov.L	[r10], r5
 4371 0194 62 25                   		add	#2, r5
 4372 0196 FE 25 43                		mov.L	r3, [r5,r4]
6218:../src/wolfcrypt/src/sp_int.c ****        r->used++;
 4373                             		.loc 2 6218 9
 4374 0199 ED A5 07                		mov.L	28[r10], r5
 4375 019c EC 55                   		mov.L	[r5], r5
 4376                             		.loc 2 6218 15
 4377 019e 71 54 01                		add	#1, r5, r4
 4378 01a1 ED A5 07                		mov.L	28[r10], r5
 4379 01a4 E3 54                   		mov.L	r4, [r5]
 4380                             	.L312:
 4381                             	.LBB25:
6219:../src/wolfcrypt/src/sp_int.c ****     }
6220:../src/wolfcrypt/src/sp_int.c **** #else
6221:../src/wolfcrypt/src/sp_int.c ****     if (l != 0) {
6222:../src/wolfcrypt/src/sp_int.c ****        r->dp[i] = l;
6223:../src/wolfcrypt/src/sp_int.c ****        r->used++;
6224:../src/wolfcrypt/src/sp_int.c ****     }
6225:../src/wolfcrypt/src/sp_int.c **** #endif
6226:../src/wolfcrypt/src/sp_int.c **** 
6227:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(r);
 4382                             		.loc 2 6227 5
 4383 01a6 ED A5 07                		mov.L	28[r10], r5
 4384 01a9 EC 55                   		mov.L	[r5], r5
 4385 01ab 60 15                   		sub	#1, r5
 4386 01ad E7 A5 04                		mov.L	r5, 16[r10]
 4387 01b0 09                      		bra	.L314
 4388                             	.L316:
 4389                             		.loc 2 6227 5 is_stmt 0 discriminator 5
 4390 01b1 ED A5 04                		mov.L	16[r10], r5
 4391 01b4 60 15                   		sub	#1, r5
 4392 01b6 E7 A5 04                		mov.L	r5, 16[r10]
 4393                             	.L314:
 4394                             		.loc 2 6227 5 discriminator 1
 4395 01b9 ED A5 04                		mov.L	16[r10], r5
 4396 01bc 61 05                   		cmp	#0, r5
 4397 01be 29 11                   		blt	.L315
 4398                             		.loc 2 6227 5 discriminator 3
 4399 01c0 ED A4 07                		mov.L	28[r10], r4
 4400 01c3 ED A5 04                		mov.L	16[r10], r5
 4401 01c6 62 25                   		add	#2, r5
 4402 01c8 FE 65 45                		mov.L	[r5,r4], r5
 4403 01cb 61 05                   		cmp	#0, r5
 4404 01cd 20 E4                   		beq	.L316
 4405                             	.L315:
 4406                             		.loc 2 6227 5 discriminator 6
 4407 01cf ED A5 04                		mov.L	16[r10], r5
 4408 01d2 71 54 01                		add	#1, r5, r4
 4409 01d5 ED A5 07                		mov.L	28[r10], r5
 4410 01d8 E3 54                   		mov.L	r4, [r5]
 4411                             	.LBE25:
6228:../src/wolfcrypt/src/sp_int.c **** 
6229:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
 4412                             		.loc 2 6229 12 is_stmt 1 discriminator 6
 4413 01da 66 05                   		mov.L	#0, r5
6230:../src/wolfcrypt/src/sp_int.c **** }
 4414                             		.loc 2 6230 1 discriminator 6
 4415 01dc EF 51                   		mov.L	r5, r1
 4416 01de 3F 6D 1B                		rtsd	#108, r6-r13
 4417                             	.LFE83:
 4419                             		.section	.text._sp_sub_off,"ax",@progbits
 4421                             	__sp_sub_off:
 4422                             	.LFB84:
6231:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_RSA_VERIFY_ONLY */
6232:../src/wolfcrypt/src/sp_int.c **** 
6233:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || defined(WOLFSSL_SP_INT_NEGATIVE) || \
6234:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_DH) || defined(HAVE_ECC) || (!defined(NO_RSA) && \
6235:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_RSA_VERIFY_ONLY))
6236:../src/wolfcrypt/src/sp_int.c **** /* Sub offset b from a into r: r = a - (b << (o * SP_WORD_SIZEOF))
6237:../src/wolfcrypt/src/sp_int.c ****  * a must be greater than b.
6238:../src/wolfcrypt/src/sp_int.c ****  *
6239:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to subtract from.
6240:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to subtract.
6241:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to store result in.
6242:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   o  Number of digits to offset b.
6243:../src/wolfcrypt/src/sp_int.c ****  *
6244:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6245:../src/wolfcrypt/src/sp_int.c ****  */
6246:../src/wolfcrypt/src/sp_int.c **** static int _sp_sub_off(sp_int* a, sp_int* b, sp_int* r, int o)
6247:../src/wolfcrypt/src/sp_int.c **** {
 4423                             		.loc 2 6247 1
 4424 0000 6E 6D                   		pushm	r6-r13
 4425                             	.LCFI89:
 4426 0002 71 0A C4                		add	#-60, r0, r10
 4427                             	.LCFI90:
 4428 0005 EF A0                   		mov.L	r10, r0
 4429 0007 E7 A1 05                		mov.L	r1, 20[r10]
 4430 000a E7 A2 06                		mov.L	r2, 24[r10]
 4431 000d E7 A3 07                		mov.L	r3, 28[r10]
 4432 0010 E7 A4 08                		mov.L	r4, 32[r10]
6248:../src/wolfcrypt/src/sp_int.c ****     int i;
6249:../src/wolfcrypt/src/sp_int.c ****     int j;
6250:../src/wolfcrypt/src/sp_int.c **** #ifndef SQR_MUL_ASM
6251:../src/wolfcrypt/src/sp_int.c ****     sp_int_sword t = 0;
 4433                             		.loc 2 6251 18
 4434 0013 F9 A6 02 00             		mov.L	#0, 8[r10]
 4435 0017 F9 A6 03 00             		mov.L	#0, 12[r10]
6252:../src/wolfcrypt/src/sp_int.c **** #else
6253:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
6254:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
6255:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t = 0;
6256:../src/wolfcrypt/src/sp_int.c **** #endif
6257:../src/wolfcrypt/src/sp_int.c **** 
6258:../src/wolfcrypt/src/sp_int.c ****     for (i = 0; (i < o) && (i < a->used); i++) {
 4436                             		.loc 2 6258 12
 4437 001b F8 A6 00                		mov.L	#0, [r10]
 4438                             		.loc 2 6258 5
 4439 001e 2E 1C                   		bra	.L319
 4440                             	.L321:
6259:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = a->dp[i];
 4441                             		.loc 2 6259 25 discriminator 4
 4442 0020 ED A4 05                		mov.L	20[r10], r4
 4443 0023 EC A5                   		mov.L	[r10], r5
 4444 0025 62 25                   		add	#2, r5
 4445 0027 FE 65 43                		mov.L	[r5,r4], r3
 4446                             		.loc 2 6259 18 discriminator 4
 4447 002a ED A4 07                		mov.L	28[r10], r4
 4448 002d EC A5                   		mov.L	[r10], r5
 4449 002f 62 25                   		add	#2, r5
 4450 0031 FE 25 43                		mov.L	r3, [r5,r4]
6258:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = a->dp[i];
 4451                             		.loc 2 6258 44 discriminator 4
 4452 0034 EC A5                   		mov.L	[r10], r5
 4453 0036 62 15                   		add	#1, r5
 4454 0038 E3 A5                   		mov.L	r5, [r10]
 4455                             	.L319:
6258:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = a->dp[i];
 4456                             		.loc 2 6258 5 discriminator 1
 4457 003a EC A4                   		mov.L	[r10], r4
 4458 003c ED A5 08                		mov.L	32[r10], r5
 4459 003f 47 54                   		cmp	r5, r4
 4460 0041 28 0D                   		bge	.L320
6258:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = a->dp[i];
 4461                             		.loc 2 6258 34 discriminator 3
 4462 0043 ED A5 05                		mov.L	20[r10], r5
 4463 0046 EC 55                   		mov.L	[r5], r5
6258:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = a->dp[i];
 4464                             		.loc 2 6258 25 discriminator 3
 4465 0048 EC A4                   		mov.L	[r10], r4
 4466 004a 47 54                   		cmp	r5, r4
 4467 004c 29 D4                   		blt	.L321
 4468                             	.L320:
6260:../src/wolfcrypt/src/sp_int.c ****     }
6261:../src/wolfcrypt/src/sp_int.c ****     for (j = 0; (i < a->used) && (j < b->used); i++, j++) {
 4469                             		.loc 2 6261 12
 4470 004e F9 A6 01 00             		mov.L	#0, 4[r10]
 4471                             		.loc 2 6261 5
 4472 0052 38 83 00                		bra	.L322
 4473                             	.L324:
6262:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6263:../src/wolfcrypt/src/sp_int.c ****         t += a->dp[i];
 4474                             		.loc 2 6263 19 discriminator 4
 4475 0055 ED A4 05                		mov.L	20[r10], r4
 4476 0058 EC A5                   		mov.L	[r10], r5
 4477 005a 62 25                   		add	#2, r5
 4478 005c FE 65 45                		mov.L	[r5,r4], r5
 4479 005f EF 5D                   		mov.L	r5, r13
 4480 0061 66 0E                   		mov.L	#0, r14
 4481                             		.loc 2 6263 11 discriminator 4
 4482 0063 ED A5 02                		mov.L	8[r10], r5
 4483 0066 ED A6 03                		mov.L	12[r10], r6
 4484 0069 EF 67                   		mov.L	r6, r7
 4485 006b FF 24 D5                		add	r13, r5, r4
 4486 006e FC 0B E7                		adc	r14, r7
 4487 0071 E7 A7 0A                		mov.L	r7, 40[r10]
 4488 0074 E7 A4 09                		mov.L	r4, 36[r10]
 4489 0077 E5 AA 09 02             		mov.L	36[r10], 8[r10]
 4490 007b E5 AA 0A 03             		mov.L	40[r10], 12[r10]
6264:../src/wolfcrypt/src/sp_int.c ****         t -= b->dp[j];
 4491                             		.loc 2 6264 19 discriminator 4
 4492 007f ED A4 06                		mov.L	24[r10], r4
 4493 0082 ED A5 01                		mov.L	4[r10], r5
 4494 0085 62 25                   		add	#2, r5
 4495 0087 FE 65 45                		mov.L	[r5,r4], r5
 4496 008a EF 5B                   		mov.L	r5, r11
 4497 008c 66 0C                   		mov.L	#0, r12
 4498                             		.loc 2 6264 11 discriminator 4
 4499 008e ED A5 02                		mov.L	8[r10], r5
 4500 0091 ED A6 03                		mov.L	12[r10], r6
 4501 0094 EF 67                   		mov.L	r6, r7
 4502 0096 FF 04 B5                		sub	r11, r5, r4
 4503 0099 FC 03 C7                		sbb	r12, r7
 4504 009c E7 A7 0C                		mov.L	r7, 48[r10]
 4505 009f E7 A4 0B                		mov.L	r4, 44[r10]
 4506 00a2 E5 AA 0B 02             		mov.L	44[r10], 8[r10]
 4507 00a6 E5 AA 0C 03             		mov.L	48[r10], 12[r10]
6265:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = (sp_int_digit)t;
 4508                             		.loc 2 6265 20 discriminator 4
 4509 00aa ED A3 02                		mov.L	8[r10], r3
 4510                             		.loc 2 6265 18 discriminator 4
 4511 00ad ED A4 07                		mov.L	28[r10], r4
 4512 00b0 EC A5                   		mov.L	[r10], r5
 4513 00b2 62 25                   		add	#2, r5
 4514 00b4 FE 25 43                		mov.L	r3, [r5,r4]
6266:../src/wolfcrypt/src/sp_int.c ****         t >>= SP_WORD_SIZE;
 4515                             		.loc 2 6266 11 discriminator 4
 4516 00b7 ED A5 03                		mov.L	12[r10], r5
 4517 00ba 6A 05                   		shar	#0, r5
 4518 00bc E7 A5 02                		mov.L	r5, 8[r10]
 4519 00bf ED A5 03                		mov.L	12[r10], r5
 4520 00c2 6B F5                   		shar	#31, r5
 4521 00c4 E7 A5 03                		mov.L	r5, 12[r10]
6261:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4522                             		.loc 2 6261 50 discriminator 4
 4523 00c7 EC A5                   		mov.L	[r10], r5
 4524 00c9 62 15                   		add	#1, r5
 4525 00cb E3 A5                   		mov.L	r5, [r10]
6261:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4526                             		.loc 2 6261 55 discriminator 4
 4527 00cd ED A5 01                		mov.L	4[r10], r5
 4528 00d0 62 15                   		add	#1, r5
 4529 00d2 E7 A5 01                		mov.L	r5, 4[r10]
 4530                             	.L322:
6261:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4531                             		.loc 2 6261 23 discriminator 1
 4532 00d5 ED A5 05                		mov.L	20[r10], r5
 4533 00d8 EC 55                   		mov.L	[r5], r5
6261:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4534                             		.loc 2 6261 5 discriminator 1
 4535 00da EC A4                   		mov.L	[r10], r4
 4536 00dc 47 54                   		cmp	r5, r4
 4537 00de 28 60                   		bge	.L325
6261:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4538                             		.loc 2 6261 40 discriminator 3
 4539 00e0 ED A5 06                		mov.L	24[r10], r5
 4540 00e3 EC 55                   		mov.L	[r5], r5
6261:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4541                             		.loc 2 6261 31 discriminator 3
 4542 00e5 ED A4 01                		mov.L	4[r10], r4
 4543 00e8 47 54                   		cmp	r5, r4
 4544 00ea 28 05 38 69 FF          		blt	.L324
6267:../src/wolfcrypt/src/sp_int.c ****     #else
6268:../src/wolfcrypt/src/sp_int.c ****         t = a->dp[i];
6269:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, t);
6270:../src/wolfcrypt/src/sp_int.c ****         t = b->dp[j];
6271:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SUBC(l, h, t);
6272:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = l;
6273:../src/wolfcrypt/src/sp_int.c ****         l = h;
6274:../src/wolfcrypt/src/sp_int.c ****         h = (sp_int_digit)0 - (l >> (SP_WORD_SIZE - 1));
6275:../src/wolfcrypt/src/sp_int.c ****     #endif
6276:../src/wolfcrypt/src/sp_int.c ****     }
6277:../src/wolfcrypt/src/sp_int.c ****     for (; i < a->used; i++) {
 4545                             		.loc 2 6277 5
 4546 00ef 2E 4F                   		bra	.L325
 4547                             	.L326:
6278:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6279:../src/wolfcrypt/src/sp_int.c ****         t += a->dp[i];
 4548                             		.loc 2 6279 19 discriminator 2
 4549 00f1 ED A4 05                		mov.L	20[r10], r4
 4550 00f4 EC A5                   		mov.L	[r10], r5
 4551 00f6 62 25                   		add	#2, r5
 4552 00f8 FE 65 45                		mov.L	[r5,r4], r5
 4553 00fb EF 58                   		mov.L	r5, r8
 4554 00fd 66 09                   		mov.L	#0, r9
 4555                             		.loc 2 6279 11 discriminator 2
 4556 00ff ED A5 02                		mov.L	8[r10], r5
 4557 0102 ED A6 03                		mov.L	12[r10], r6
 4558 0105 EF 6C                   		mov.L	r6, r12
 4559 0107 FF 2B 85                		add	r8, r5, r11
 4560 010a FC 0B 9C                		adc	r9, r12
 4561 010d E7 AC 0E                		mov.L	r12, 56[r10]
 4562 0110 E7 AB 0D                		mov.L	r11, 52[r10]
 4563 0113 E5 AA 0D 02             		mov.L	52[r10], 8[r10]
 4564 0117 E5 AA 0E 03             		mov.L	56[r10], 12[r10]
6280:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = (sp_int_digit)t;
 4565                             		.loc 2 6280 20 discriminator 2
 4566 011b ED A3 02                		mov.L	8[r10], r3
 4567                             		.loc 2 6280 18 discriminator 2
 4568 011e ED A4 07                		mov.L	28[r10], r4
 4569 0121 EC A5                   		mov.L	[r10], r5
 4570 0123 62 25                   		add	#2, r5
 4571 0125 FE 25 43                		mov.L	r3, [r5,r4]
6281:../src/wolfcrypt/src/sp_int.c ****         t >>= SP_WORD_SIZE;
 4572                             		.loc 2 6281 11 discriminator 2
 4573 0128 ED A5 03                		mov.L	12[r10], r5
 4574 012b 6A 05                   		shar	#0, r5
 4575 012d E7 A5 02                		mov.L	r5, 8[r10]
 4576 0130 ED A5 03                		mov.L	12[r10], r5
 4577 0133 6B F5                   		shar	#31, r5
 4578 0135 E7 A5 03                		mov.L	r5, 12[r10]
6277:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4579                             		.loc 2 6277 26 discriminator 2
 4580 0138 EC A5                   		mov.L	[r10], r5
 4581 013a 62 15                   		add	#1, r5
 4582 013c E3 A5                   		mov.L	r5, [r10]
 4583                             	.L325:
6277:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4584                             		.loc 2 6277 17 discriminator 1
 4585 013e ED A5 05                		mov.L	20[r10], r5
 4586 0141 EC 55                   		mov.L	[r5], r5
6277:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
 4587                             		.loc 2 6277 5 discriminator 1
 4588 0143 EC A4                   		mov.L	[r10], r4
 4589 0145 47 54                   		cmp	r5, r4
 4590 0147 29 AA                   		blt	.L326
6282:../src/wolfcrypt/src/sp_int.c ****     #else
6283:../src/wolfcrypt/src/sp_int.c ****         t = a->dp[i];
6284:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, t);
6285:../src/wolfcrypt/src/sp_int.c ****         r->dp[i] = l;
6286:../src/wolfcrypt/src/sp_int.c ****         l = h;
6287:../src/wolfcrypt/src/sp_int.c ****         h = (sp_int_digit)0 - (l >> (SP_WORD_SIZE - 1));
6288:../src/wolfcrypt/src/sp_int.c ****     #endif
6289:../src/wolfcrypt/src/sp_int.c ****     }
6290:../src/wolfcrypt/src/sp_int.c ****     r->used = i;
 4591                             		.loc 2 6290 13
 4592 0149 ED A5 07                		mov.L	28[r10], r5
 4593 014c EC A4                   		mov.L	[r10], r4
 4594 014e E3 54                   		mov.L	r4, [r5]
 4595                             	.LBB26:
6291:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(r);
 4596                             		.loc 2 6291 5
 4597 0150 ED A5 07                		mov.L	28[r10], r5
 4598 0153 EC 55                   		mov.L	[r5], r5
 4599 0155 60 15                   		sub	#1, r5
 4600 0157 E7 A5 04                		mov.L	r5, 16[r10]
 4601 015a 09                      		bra	.L327
 4602                             	.L329:
 4603                             		.loc 2 6291 5 is_stmt 0 discriminator 5
 4604 015b ED A5 04                		mov.L	16[r10], r5
 4605 015e 60 15                   		sub	#1, r5
 4606 0160 E7 A5 04                		mov.L	r5, 16[r10]
 4607                             	.L327:
 4608                             		.loc 2 6291 5 discriminator 1
 4609 0163 ED A5 04                		mov.L	16[r10], r5
 4610 0166 61 05                   		cmp	#0, r5
 4611 0168 29 11                   		blt	.L328
 4612                             		.loc 2 6291 5 discriminator 3
 4613 016a ED A4 07                		mov.L	28[r10], r4
 4614 016d ED A5 04                		mov.L	16[r10], r5
 4615 0170 62 25                   		add	#2, r5
 4616 0172 FE 65 45                		mov.L	[r5,r4], r5
 4617 0175 61 05                   		cmp	#0, r5
 4618 0177 20 E4                   		beq	.L329
 4619                             	.L328:
 4620                             		.loc 2 6291 5 discriminator 6
 4621 0179 ED A5 04                		mov.L	16[r10], r5
 4622 017c 71 54 01                		add	#1, r5, r4
 4623 017f ED A5 07                		mov.L	28[r10], r5
 4624 0182 E3 54                   		mov.L	r4, [r5]
 4625                             	.LBE26:
6292:../src/wolfcrypt/src/sp_int.c **** 
6293:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
 4626                             		.loc 2 6293 12 is_stmt 1 discriminator 6
 4627 0184 66 05                   		mov.L	#0, r5
6294:../src/wolfcrypt/src/sp_int.c **** }
 4628                             		.loc 2 6294 1 discriminator 6
 4629 0186 EF 51                   		mov.L	r5, r1
 4630 0188 3F 6D 17                		rtsd	#92, r6-r13
 4631                             	.LFE84:
 4633                             		.section	.text.sp_add,"ax",@progbits
 4634                             		.global	_sp_add
 4636                             	_sp_add:
 4637                             	.LFB85:
6295:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_SP_INT_NEGATIVE || !NO_DH ||
6296:../src/wolfcrypt/src/sp_int.c ****         * HAVE_ECC || (!NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY) */
6297:../src/wolfcrypt/src/sp_int.c **** 
6298:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_RSA_VERIFY_ONLY) || defined(WOLFSSL_SP_INVMOD)
6299:../src/wolfcrypt/src/sp_int.c **** /* Add b to a into r: r = a + b
6300:../src/wolfcrypt/src/sp_int.c ****  *
6301:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to add to.
6302:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to add.
6303:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to store result in.
6304:../src/wolfcrypt/src/sp_int.c ****  *
6305:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6306:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, b, or r is NULL.
6307:../src/wolfcrypt/src/sp_int.c ****  */
6308:../src/wolfcrypt/src/sp_int.c **** int sp_add(sp_int* a, sp_int* b, sp_int* r)
6309:../src/wolfcrypt/src/sp_int.c **** {
 4638                             		.loc 2 6309 1
 4639 0000 7E AA                   		push.l	r10
 4640                             	.LCFI91:
 4641 0002 71 0A F0                		add	#-16, r0, r10
 4642                             	.LCFI92:
 4643 0005 EF A0                   		mov.L	r10, r0
 4644 0007 E7 A1 01                		mov.L	r1, 4[r10]
 4645 000a E7 A2 02                		mov.L	r2, 8[r10]
 4646 000d E7 A3 03                		mov.L	r3, 12[r10]
6310:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 4647                             		.loc 2 6310 9
 4648 0010 F8 A6 00                		mov.L	#0, [r10]
6311:../src/wolfcrypt/src/sp_int.c **** 
6312:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (b == NULL) || (r == NULL)) {
 4649                             		.loc 2 6312 8
 4650 0013 ED A5 01                		mov.L	4[r10], r5
 4651 0016 61 05                   		cmp	#0, r5
 4652 0018 20 0E                   		beq	.L332
 4653                             		.loc 2 6312 21 discriminator 1
 4654 001a ED A5 02                		mov.L	8[r10], r5
 4655 001d 61 05                   		cmp	#0, r5
 4656 001f 17                      		beq	.L332
 4657                             		.loc 2 6312 36 discriminator 2
 4658 0020 ED A5 03                		mov.L	12[r10], r5
 4659 0023 61 05                   		cmp	#0, r5
 4660 0025 1C                      		bne	.L333
 4661                             	.L332:
6313:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 4662                             		.loc 2 6313 13
 4663 0026 F8 A6 FD                		mov.L	#-3, [r10]
 4664                             	.L333:
6314:../src/wolfcrypt/src/sp_int.c ****     }
6315:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && ((a->used >= r->size) || (b->used >= r->size))) {
 4665                             		.loc 2 6315 8
 4666 0029 EC A5                   		mov.L	[r10], r5
 4667 002b 61 05                   		cmp	#0, r5
 4668 002d 21 21                   		bne	.L334
 4669                             		.loc 2 6315 32 discriminator 1
 4670 002f ED A5 01                		mov.L	4[r10], r5
 4671 0032 EC 54                   		mov.L	[r5], r4
 4672                             		.loc 2 6315 43 discriminator 1
 4673 0034 ED A5 03                		mov.L	12[r10], r5
 4674 0037 A8 5D                   		mov.L	4[r5], r5
 4675                             		.loc 2 6315 26 discriminator 1
 4676 0039 47 54                   		cmp	r5, r4
 4677 003b 28 10                   		bge	.L335
 4678                             		.loc 2 6315 56 discriminator 2
 4679 003d ED A5 02                		mov.L	8[r10], r5
 4680 0040 EC 54                   		mov.L	[r5], r4
 4681                             		.loc 2 6315 67 discriminator 2
 4682 0042 ED A5 03                		mov.L	12[r10], r5
 4683 0045 A8 5D                   		mov.L	4[r5], r5
 4684                             		.loc 2 6315 51 discriminator 2
 4685 0047 47 54                   		cmp	r5, r4
 4686 0049 29 05                   		blt	.L334
 4687                             	.L335:
6316:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 4688                             		.loc 2 6316 13
 4689 004b F8 A6 FD                		mov.L	#-3, [r10]
 4690                             	.L334:
6317:../src/wolfcrypt/src/sp_int.c ****     }
6318:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 4691                             		.loc 2 6318 8
 4692 004e EC A5                   		mov.L	[r10], r5
 4693 0050 61 05                   		cmp	#0, r5
 4694 0052 21 13                   		bne	.L336
6319:../src/wolfcrypt/src/sp_int.c ****     #ifndef WOLFSSL_SP_INT_NEGATIVE
6320:../src/wolfcrypt/src/sp_int.c ****         err = _sp_add_off(a, b, r, 0);
 4695                             		.loc 2 6320 15
 4696 0054 66 04                   		mov.L	#0, r4
 4697 0056 ED A3 03                		mov.L	12[r10], r3
 4698 0059 ED A2 02                		mov.L	8[r10], r2
 4699 005c ED A1 01                		mov.L	4[r10], r1
 4700 005f 05 00 00 00             		bsr	__sp_add_off
 4701 0063 E3 A1                   		mov.L	r1, [r10]
 4702                             	.L336:
6321:../src/wolfcrypt/src/sp_int.c ****     #else
6322:../src/wolfcrypt/src/sp_int.c ****         if (a->sign == b->sign) {
6323:../src/wolfcrypt/src/sp_int.c ****             r->sign = a->sign;
6324:../src/wolfcrypt/src/sp_int.c ****             err = _sp_add_off(a, b, r, 0);
6325:../src/wolfcrypt/src/sp_int.c ****         }
6326:../src/wolfcrypt/src/sp_int.c ****         else if (_sp_cmp_abs(a, b) != MP_LT) {
6327:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sub_off(a, b, r, 0);
6328:../src/wolfcrypt/src/sp_int.c ****             if (sp_iszero(r)) {
6329:../src/wolfcrypt/src/sp_int.c ****                 r->sign = MP_ZPOS;
6330:../src/wolfcrypt/src/sp_int.c ****             }
6331:../src/wolfcrypt/src/sp_int.c ****             else {
6332:../src/wolfcrypt/src/sp_int.c ****                 r->sign = a->sign;
6333:../src/wolfcrypt/src/sp_int.c ****             }
6334:../src/wolfcrypt/src/sp_int.c ****         }
6335:../src/wolfcrypt/src/sp_int.c ****         else {
6336:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sub_off(b, a, r, 0);
6337:../src/wolfcrypt/src/sp_int.c ****             if (sp_iszero(r)) {
6338:../src/wolfcrypt/src/sp_int.c ****                 r->sign = MP_ZPOS;
6339:../src/wolfcrypt/src/sp_int.c ****             }
6340:../src/wolfcrypt/src/sp_int.c ****             else {
6341:../src/wolfcrypt/src/sp_int.c ****                 r->sign = b->sign;
6342:../src/wolfcrypt/src/sp_int.c ****             }
6343:../src/wolfcrypt/src/sp_int.c ****         }
6344:../src/wolfcrypt/src/sp_int.c ****     #endif
6345:../src/wolfcrypt/src/sp_int.c ****     }
6346:../src/wolfcrypt/src/sp_int.c **** 
6347:../src/wolfcrypt/src/sp_int.c ****     return err;
 4703                             		.loc 2 6347 12
 4704 0065 EC A5                   		mov.L	[r10], r5
6348:../src/wolfcrypt/src/sp_int.c **** }
 4705                             		.loc 2 6348 1
 4706 0067 EF 51                   		mov.L	r5, r1
 4707 0069 3F AA 05                		rtsd	#20, r10-r10
 4708                             	.LFE85:
 4710                             		.section	.text.sp_sub,"ax",@progbits
 4711                             		.global	_sp_sub
 4713                             	_sp_sub:
 4714                             	.LFB86:
6349:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_RSA_VERIFY_ONLY */
6350:../src/wolfcrypt/src/sp_int.c **** 
6351:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || !defined(NO_DH) || defined(HAVE_ECC) || \
6352:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY))
6353:../src/wolfcrypt/src/sp_int.c **** /* Subtract b from a into r: r = a - b
6354:../src/wolfcrypt/src/sp_int.c ****  *
6355:../src/wolfcrypt/src/sp_int.c ****  * a must be greater than b unless WOLFSSL_SP_INT_NEGATIVE is defined.
6356:../src/wolfcrypt/src/sp_int.c ****  *
6357:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to subtract from.
6358:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to subtract.
6359:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to store result in.
6360:../src/wolfcrypt/src/sp_int.c ****  *
6361:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6362:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, b, or r is NULL.
6363:../src/wolfcrypt/src/sp_int.c ****  */
6364:../src/wolfcrypt/src/sp_int.c **** int sp_sub(sp_int* a, sp_int* b, sp_int* r)
6365:../src/wolfcrypt/src/sp_int.c **** {
 4715                             		.loc 2 6365 1
 4716 0000 7E AA                   		push.l	r10
 4717                             	.LCFI93:
 4718 0002 71 0A F0                		add	#-16, r0, r10
 4719                             	.LCFI94:
 4720 0005 EF A0                   		mov.L	r10, r0
 4721 0007 E7 A1 01                		mov.L	r1, 4[r10]
 4722 000a E7 A2 02                		mov.L	r2, 8[r10]
 4723 000d E7 A3 03                		mov.L	r3, 12[r10]
6366:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 4724                             		.loc 2 6366 9
 4725 0010 F8 A6 00                		mov.L	#0, [r10]
6367:../src/wolfcrypt/src/sp_int.c **** 
6368:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (b == NULL) || (r == NULL)) {
 4726                             		.loc 2 6368 8
 4727 0013 ED A5 01                		mov.L	4[r10], r5
 4728 0016 61 05                   		cmp	#0, r5
 4729 0018 20 0E                   		beq	.L339
 4730                             		.loc 2 6368 21 discriminator 1
 4731 001a ED A5 02                		mov.L	8[r10], r5
 4732 001d 61 05                   		cmp	#0, r5
 4733 001f 17                      		beq	.L339
 4734                             		.loc 2 6368 36 discriminator 2
 4735 0020 ED A5 03                		mov.L	12[r10], r5
 4736 0023 61 05                   		cmp	#0, r5
 4737 0025 1E                      		bne	.L340
 4738                             	.L339:
6369:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 4739                             		.loc 2 6369 13
 4740 0026 F8 A6 FD                		mov.L	#-3, [r10]
 4741 0029 2E 13                   		bra	.L341
 4742                             	.L340:
6370:../src/wolfcrypt/src/sp_int.c ****     }
6371:../src/wolfcrypt/src/sp_int.c ****     else {
6372:../src/wolfcrypt/src/sp_int.c ****     #ifndef WOLFSSL_SP_INT_NEGATIVE
6373:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sub_off(a, b, r, 0);
 4743                             		.loc 2 6373 15
 4744 002b 66 04                   		mov.L	#0, r4
 4745 002d ED A3 03                		mov.L	12[r10], r3
 4746 0030 ED A2 02                		mov.L	8[r10], r2
 4747 0033 ED A1 01                		mov.L	4[r10], r1
 4748 0036 05 00 00 00             		bsr	__sp_sub_off
 4749 003a E3 A1                   		mov.L	r1, [r10]
 4750                             	.L341:
6374:../src/wolfcrypt/src/sp_int.c ****     #else
6375:../src/wolfcrypt/src/sp_int.c ****         if (a->sign != b->sign) {
6376:../src/wolfcrypt/src/sp_int.c ****             r->sign = a->sign;
6377:../src/wolfcrypt/src/sp_int.c ****             err = _sp_add_off(a, b, r, 0);
6378:../src/wolfcrypt/src/sp_int.c ****         }
6379:../src/wolfcrypt/src/sp_int.c ****         else if (_sp_cmp_abs(a, b) != MP_LT) {
6380:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sub_off(a, b, r, 0);
6381:../src/wolfcrypt/src/sp_int.c ****             if (sp_iszero(r)) {
6382:../src/wolfcrypt/src/sp_int.c ****                 r->sign = MP_ZPOS;
6383:../src/wolfcrypt/src/sp_int.c ****             }
6384:../src/wolfcrypt/src/sp_int.c ****             else {
6385:../src/wolfcrypt/src/sp_int.c ****                 r->sign = a->sign;
6386:../src/wolfcrypt/src/sp_int.c ****             }
6387:../src/wolfcrypt/src/sp_int.c ****         }
6388:../src/wolfcrypt/src/sp_int.c ****         else {
6389:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sub_off(b, a, r, 0);
6390:../src/wolfcrypt/src/sp_int.c ****             if (sp_iszero(r)) {
6391:../src/wolfcrypt/src/sp_int.c ****                 r->sign = MP_ZPOS;
6392:../src/wolfcrypt/src/sp_int.c ****             }
6393:../src/wolfcrypt/src/sp_int.c ****             else {
6394:../src/wolfcrypt/src/sp_int.c ****                 r->sign = 1 - a->sign;
6395:../src/wolfcrypt/src/sp_int.c ****             }
6396:../src/wolfcrypt/src/sp_int.c ****         }
6397:../src/wolfcrypt/src/sp_int.c ****     #endif
6398:../src/wolfcrypt/src/sp_int.c ****     }
6399:../src/wolfcrypt/src/sp_int.c **** 
6400:../src/wolfcrypt/src/sp_int.c ****     return err;
 4751                             		.loc 2 6400 12
 4752 003c EC A5                   		mov.L	[r10], r5
6401:../src/wolfcrypt/src/sp_int.c **** }
 4753                             		.loc 2 6401 1
 4754 003e EF 51                   		mov.L	r5, r1
 4755 0040 3F AA 05                		rtsd	#20, r10-r10
 4756                             	.LFE86:
 4758                             		.section	.text.sp_addmod,"ax",@progbits
 4759                             		.global	_sp_addmod
 4761                             	_sp_addmod:
 4762                             	.LFB87:
6402:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || !NO_DH || HAVE_ECC ||
6403:../src/wolfcrypt/src/sp_int.c ****         * (!NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY)*/
6404:../src/wolfcrypt/src/sp_int.c **** 
6405:../src/wolfcrypt/src/sp_int.c **** /****************************
6406:../src/wolfcrypt/src/sp_int.c ****  * Add/Subtract mod functions
6407:../src/wolfcrypt/src/sp_int.c ****  ****************************/
6408:../src/wolfcrypt/src/sp_int.c **** 
6409:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
6410:../src/wolfcrypt/src/sp_int.c ****     (!defined(WOLFSSL_SP_MATH) && defined(WOLFSSL_CUSTOM_CURVES)) || \
6411:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFCRYPT_HAVE_ECCSI) || defined(WOLFCRYPT_HAVE_SAKKE)
6412:../src/wolfcrypt/src/sp_int.c **** /* Add two value and reduce: r = (a + b) % m
6413:../src/wolfcrypt/src/sp_int.c ****  *
6414:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to add.
6415:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to add with.
6416:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m  SP integer that is the modulus.
6417:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
6418:../src/wolfcrypt/src/sp_int.c ****  *
6419:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6420:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, b, m or r is NULL.
6421:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
6422:../src/wolfcrypt/src/sp_int.c ****  */
6423:../src/wolfcrypt/src/sp_int.c **** int sp_addmod(sp_int* a, sp_int* b, sp_int* m, sp_int* r)
6424:../src/wolfcrypt/src/sp_int.c **** {
 4763                             		.loc 2 6424 1
 4764 0000 7E AA                   		push.l	r10
 4765                             	.LCFI95:
 4766 0002 71 0A E0                		add	#-32, r0, r10
 4767                             	.LCFI96:
 4768 0005 EF A0                   		mov.L	r10, r0
 4769 0007 E7 A1 04                		mov.L	r1, 16[r10]
 4770 000a E7 A2 05                		mov.L	r2, 20[r10]
 4771 000d E7 A3 06                		mov.L	r3, 24[r10]
 4772 0010 E7 A4 07                		mov.L	r4, 28[r10]
6425:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 4773                             		.loc 2 6425 9
 4774 0013 F8 A6 00                		mov.L	#0, [r10]
6426:../src/wolfcrypt/src/sp_int.c ****     int used = ((a == NULL) || (b == NULL)) ? 1 :
 4775                             		.loc 2 6426 49
 4776 0016 ED A5 04                		mov.L	16[r10], r5
 4777 0019 61 05                   		cmp	#0, r5
 4778 001b 20 28                   		beq	.L344
 4779                             		.loc 2 6426 29 discriminator 1
 4780 001d ED A5 05                		mov.L	20[r10], r5
 4781 0020 61 05                   		cmp	#0, r5
 4782 0022 20 21                   		beq	.L344
6427:../src/wolfcrypt/src/sp_int.c ****                    ((a->used >= b->used) ? a->used + 1 : b->used + 1);
 4783                             		.loc 2 6427 23
 4784 0024 ED A5 04                		mov.L	16[r10], r5
 4785 0027 EC 54                   		mov.L	[r5], r4
 4786                             		.loc 2 6427 34
 4787 0029 ED A5 05                		mov.L	20[r10], r5
 4788 002c EC 55                   		mov.L	[r5], r5
 4789                             		.loc 2 6427 56
 4790 002e 47 54                   		cmp	r5, r4
 4791 0030 29 0B                   		blt	.L345
 4792                             		.loc 2 6427 45 discriminator 1
 4793 0032 ED A5 04                		mov.L	16[r10], r5
 4794 0035 EC 55                   		mov.L	[r5], r5
 4795                             		.loc 2 6427 56 discriminator 1
 4796 0037 62 15                   		add	#1, r5
6426:../src/wolfcrypt/src/sp_int.c ****     int used = ((a == NULL) || (b == NULL)) ? 1 :
 4797                             		.loc 2 6426 49 discriminator 1
 4798 0039 2E 0C                   		bra	.L347
 4799                             	.L345:
 4800                             		.loc 2 6427 59 discriminator 2
 4801 003b ED A5 05                		mov.L	20[r10], r5
 4802 003e EC 55                   		mov.L	[r5], r5
 4803                             		.loc 2 6427 56 discriminator 2
 4804 0040 62 15                   		add	#1, r5
6426:../src/wolfcrypt/src/sp_int.c ****     int used = ((a == NULL) || (b == NULL)) ? 1 :
 4805                             		.loc 2 6426 49 discriminator 2
 4806 0042 0B                      		bra	.L347
 4807                             	.L344:
6426:../src/wolfcrypt/src/sp_int.c ****     int used = ((a == NULL) || (b == NULL)) ? 1 :
 4808                             		.loc 2 6426 49 is_stmt 0 discriminator 3
 4809 0043 66 15                   		mov.L	#1, r5
 4810                             	.L347:
6426:../src/wolfcrypt/src/sp_int.c ****     int used = ((a == NULL) || (b == NULL)) ? 1 :
 4811                             		.loc 2 6426 9 is_stmt 1 discriminator 5
 4812 0045 E7 A5 02                		mov.L	r5, 8[r10]
6428:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT(t, used);
 4813                             		.loc 2 6428 5 discriminator 5
 4814 0048 F9 A6 01 00             		mov.L	#0, 4[r10]
6429:../src/wolfcrypt/src/sp_int.c **** 
6430:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (b == NULL) || (m == NULL) || (r == NULL)) {
 4815                             		.loc 2 6430 8 discriminator 5
 4816 004c ED A5 04                		mov.L	16[r10], r5
 4817 004f 61 05                   		cmp	#0, r5
 4818 0051 20 17                   		beq	.L348
 4819                             		.loc 2 6430 21 discriminator 1
 4820 0053 ED A5 05                		mov.L	20[r10], r5
 4821 0056 61 05                   		cmp	#0, r5
 4822 0058 20 10                   		beq	.L348
 4823                             		.loc 2 6430 36 discriminator 2
 4824 005a ED A5 06                		mov.L	24[r10], r5
 4825 005d 61 05                   		cmp	#0, r5
 4826 005f 11                      		beq	.L348
 4827                             		.loc 2 6430 51 discriminator 3
 4828 0060 ED A5 07                		mov.L	28[r10], r5
 4829 0063 61 05                   		cmp	#0, r5
 4830 0065 1E                      		bne	.L349
 4831 0066 EF 00                   		.balign 8,3,4
 4832                             	.L348:
6431:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 4833                             		.loc 2 6431 13
 4834 0068 F8 A6 FD                		mov.L	#-3, [r10]
 4835                             	.L349:
6432:../src/wolfcrypt/src/sp_int.c ****     }
6433:../src/wolfcrypt/src/sp_int.c **** 
6434:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_SIZE(t, used, err, NULL);
 4836                             		.loc 2 6434 5
 4837 006b EC A5                   		mov.L	[r10], r5
 4838 006d 61 05                   		cmp	#0, r5
 4839 006f 21 24                   		bne	.L350
 4840                             		.loc 2 6434 5 is_stmt 0 discriminator 1
 4841 0071 ED A5 02                		mov.L	8[r10], r5
 4842 0074 61 05                   		cmp	#0, r5
 4843 0076 11                      		beq	.L351
 4844                             		.loc 2 6434 5 discriminator 3
 4845 0077 ED A5 02                		mov.L	8[r10], r5
 4846 007a 62 25                   		add	#2, r5
 4847 007c 6C 25                   		shll	#2, r5
 4848 007e 0B                      		bra	.L352
 4849                             	.L351:
 4850                             		.loc 2 6434 5 discriminator 4
 4851 007f 66 C5                   		mov.L	#12, r5
 4852                             	.L352:
 4853                             		.loc 2 6434 5 discriminator 6
 4854 0081 EF 51                   		mov.L	r5, r1
 4855 0083 05 00 00 00             		bsr	_wolfSSL_Malloc
 4856 0087 E7 A1 01                		mov.L	r1, 4[r10]
 4857 008a ED A5 01                		mov.L	4[r10], r5
 4858 008d 61 05                   		cmp	#0, r5
 4859 008f 1C                      		bne	.L350
 4860                             		.loc 2 6434 5 discriminator 7
 4861 0090 F8 A6 FE                		mov.L	#-2, [r10]
 4862                             	.L350:
 4863                             		.loc 2 6434 5 discriminator 9
 4864 0093 EC A5                   		mov.L	[r10], r5
 4865 0095 61 05                   		cmp	#0, r5
 4866 0097 19                      		bne	.L353
 4867                             		.loc 2 6434 5 discriminator 10
 4868 0098 ED A5 01                		mov.L	4[r10], r5
 4869 009b ED A4 02                		mov.L	8[r10], r4
 4870 009e A0 5C                   		mov.L	r4, 4[r5]
 4871                             	.L353:
6435:../src/wolfcrypt/src/sp_int.c **** #if 0
6436:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
6437:../src/wolfcrypt/src/sp_int.c ****         sp_print(a, "a");
6438:../src/wolfcrypt/src/sp_int.c ****         sp_print(b, "b");
6439:../src/wolfcrypt/src/sp_int.c ****         sp_print(m, "m");
6440:../src/wolfcrypt/src/sp_int.c ****     }
6441:../src/wolfcrypt/src/sp_int.c **** #endif
6442:../src/wolfcrypt/src/sp_int.c **** 
6443:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 4872                             		.loc 2 6443 8 is_stmt 1
 4873 00a0 EC A5                   		mov.L	[r10], r5
 4874 00a2 61 05                   		cmp	#0, r5
 4875 00a4 21 11                   		bne	.L354
6444:../src/wolfcrypt/src/sp_int.c ****         err = sp_add(a, b, t);
 4876                             		.loc 2 6444 15
 4877 00a6 ED A3 01                		mov.L	4[r10], r3
 4878 00a9 ED A2 05                		mov.L	20[r10], r2
 4879 00ac ED A1 04                		mov.L	16[r10], r1
 4880 00af 05 00 00 00             		bsr	_sp_add
 4881 00b3 E3 A1                   		mov.L	r1, [r10]
 4882                             	.L354:
6445:../src/wolfcrypt/src/sp_int.c ****     }
6446:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 4883                             		.loc 2 6446 8
 4884 00b5 EC A5                   		mov.L	[r10], r5
 4885 00b7 61 05                   		cmp	#0, r5
 4886 00b9 21 11                   		bne	.L355
6447:../src/wolfcrypt/src/sp_int.c ****         err = sp_mod(t, m, r);
 4887                             		.loc 2 6447 15
 4888 00bb ED A3 07                		mov.L	28[r10], r3
 4889 00be ED A2 06                		mov.L	24[r10], r2
 4890 00c1 ED A1 01                		mov.L	4[r10], r1
 4891 00c4 05 00 00 00             		bsr	_sp_mod
 4892 00c8 E3 A1                   		mov.L	r1, [r10]
 4893                             	.L355:
6448:../src/wolfcrypt/src/sp_int.c ****     }
6449:../src/wolfcrypt/src/sp_int.c **** 
6450:../src/wolfcrypt/src/sp_int.c **** #if 0
6451:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
6452:../src/wolfcrypt/src/sp_int.c ****         sp_print(r, "rma");
6453:../src/wolfcrypt/src/sp_int.c ****     }
6454:../src/wolfcrypt/src/sp_int.c **** #endif
6455:../src/wolfcrypt/src/sp_int.c **** 
6456:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT(t, NULL);
 4894                             		.loc 2 6456 5
 4895 00ca ED A5 01                		mov.L	4[r10], r5
 4896 00cd 61 05                   		cmp	#0, r5
 4897 00cf 20 15                   		beq	.L356
 4898                             	.LBB27:
 4899                             		.loc 2 6456 5 is_stmt 0 discriminator 1
 4900 00d1 ED A5 01                		mov.L	4[r10], r5
 4901 00d4 E7 A5 03                		mov.L	r5, 12[r10]
 4902 00d7 ED A5 03                		mov.L	12[r10], r5
 4903 00da 61 05                   		cmp	#0, r5
 4904 00dc 10                      		beq	.L356
 4905                             		.loc 2 6456 5 discriminator 2
 4906 00dd ED A1 03                		mov.L	12[r10], r1
 4907 00e0 05 00 00 00             		bsr	_wolfSSL_Free
 4908                             	.L356:
 4909                             	.LBE27:
6457:../src/wolfcrypt/src/sp_int.c ****     return err;
 4910                             		.loc 2 6457 12 is_stmt 1
 4911 00e4 EC A5                   		mov.L	[r10], r5
6458:../src/wolfcrypt/src/sp_int.c **** }
 4912                             		.loc 2 6458 1
 4913 00e6 EF 51                   		mov.L	r5, r1
 4914 00e8 3F AA 09                		rtsd	#36, r10-r10
 4915                             	.LFE87:
 4917 00eb 77 10 01 00 00          		.section	.text.sp_submod,"ax",@progbits
 4918                             		.global	_sp_submod
 4920                             	_sp_submod:
 4921                             	.LFB88:
6459:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_CUSTOM_CURVES) ||
6460:../src/wolfcrypt/src/sp_int.c ****         * WOLFCRYPT_HAVE_ECCSI || WOLFCRYPT_HAVE_SAKKE */
6461:../src/wolfcrypt/src/sp_int.c **** 
6462:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && (!defined(WOLFSSL_RSA_VERIFY_ONLY) || \
6463:../src/wolfcrypt/src/sp_int.c ****     defined(HAVE_ECC))
6464:../src/wolfcrypt/src/sp_int.c **** /* Sub b from a and reduce: r = (a - b) % m
6465:../src/wolfcrypt/src/sp_int.c ****  * Result is always positive.
6466:../src/wolfcrypt/src/sp_int.c ****  *
6467:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to subtract from
6468:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to subtract.
6469:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m  SP integer that is the modulus.
6470:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
6471:../src/wolfcrypt/src/sp_int.c ****  *
6472:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6473:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, b, m or r is NULL.
6474:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
6475:../src/wolfcrypt/src/sp_int.c ****  */
6476:../src/wolfcrypt/src/sp_int.c **** int sp_submod(sp_int* a, sp_int* b, sp_int* m, sp_int* r)
6477:../src/wolfcrypt/src/sp_int.c **** {
 4922                             		.loc 2 6477 1
 4923 0000 7E AA                   		push.l	r10
 4924                             	.LCFI97:
 4925 0002 7E A6                   		push.l	r6
 4926                             	.LCFI98:
 4927 0004 71 0A D4                		add	#-44, r0, r10
 4928                             	.LCFI99:
 4929 0007 EF A0                   		mov.L	r10, r0
 4930 0009 E7 A1 07                		mov.L	r1, 28[r10]
 4931 000c E7 A2 08                		mov.L	r2, 32[r10]
 4932 000f E7 A3 09                		mov.L	r3, 36[r10]
 4933 0012 E7 A4 0A                		mov.L	r4, 40[r10]
6478:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_INT_NEGATIVE
6479:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 4934                             		.loc 2 6479 9
 4935 0015 F8 A6 00                		mov.L	#0, [r10]
6480:../src/wolfcrypt/src/sp_int.c ****     int used = ((a == NULL) || (b == NULL) || (m == NULL)) ? 1 :
 4936                             		.loc 2 6480 64
 4937 0018 ED A5 07                		mov.L	28[r10], r5
 4938 001b 61 05                   		cmp	#0, r5
 4939 001d 20 5D                   		beq	.L359
 4940                             		.loc 2 6480 29 discriminator 1
 4941 001f ED A5 08                		mov.L	32[r10], r5
 4942 0022 61 05                   		cmp	#0, r5
 4943 0024 20 56                   		beq	.L359
 4944                             		.loc 2 6480 44 discriminator 3
 4945 0026 ED A5 09                		mov.L	36[r10], r5
 4946 0029 61 05                   		cmp	#0, r5
 4947 002b 20 4F                   		beq	.L359
6481:../src/wolfcrypt/src/sp_int.c ****                    ((a->used >= m->used) ?
 4948                             		.loc 2 6481 23
 4949 002d ED A5 07                		mov.L	28[r10], r5
 4950 0030 EC 54                   		mov.L	[r5], r4
 4951                             		.loc 2 6481 34
 4952 0032 ED A5 09                		mov.L	36[r10], r5
 4953 0035 EC 55                   		mov.L	[r5], r5
6482:../src/wolfcrypt/src/sp_int.c ****                        ((a->used >= b->used) ? (a->used + 1) : (b->used + 1)) :
 4954                             		.loc 2 6482 79
 4955 0037 47 54                   		cmp	r5, r4
 4956 0039 29 22                   		blt	.L360
 4957                             		.loc 2 6482 27 discriminator 1
 4958 003b ED A5 07                		mov.L	28[r10], r5
 4959 003e EC 54                   		mov.L	[r5], r4
 4960                             		.loc 2 6482 38 discriminator 1
 4961 0040 ED A5 08                		mov.L	32[r10], r5
 4962 0043 EC 55                   		mov.L	[r5], r5
 4963                             		.loc 2 6482 62 discriminator 1
 4964 0045 47 54                   		cmp	r5, r4
 4965 0047 29 0B                   		blt	.L361
 4966                             		.loc 2 6482 50 discriminator 2
 4967 0049 ED A5 07                		mov.L	28[r10], r5
 4968 004c EC 55                   		mov.L	[r5], r5
 4969                             		.loc 2 6482 62 discriminator 2
 4970 004e 62 15                   		add	#1, r5
6480:../src/wolfcrypt/src/sp_int.c ****     int used = ((a == NULL) || (b == NULL) || (m == NULL)) ? 1 :
 4971                             		.loc 2 6480 64 discriminator 2
 4972 0050 2E 30                   		bra	.L366
 4973                             	.L361:
 4974                             		.loc 2 6482 66 discriminator 3
 4975 0052 ED A5 08                		mov.L	32[r10], r5
 4976 0055 EC 55                   		mov.L	[r5], r5
 4977                             		.loc 2 6482 62 discriminator 3
 4978 0057 62 15                   		add	#1, r5
6480:../src/wolfcrypt/src/sp_int.c ****     int used = ((a == NULL) || (b == NULL) || (m == NULL)) ? 1 :
 4979                             		.loc 2 6480 64 discriminator 3
 4980 0059 2E 27                   		bra	.L366
 4981                             	.L360:
6483:../src/wolfcrypt/src/sp_int.c ****                    ((b->used >= m->used)) ? (b->used + 1) : (m->used + 1));
 4982                             		.loc 2 6483 23
 4983 005b ED A5 08                		mov.L	32[r10], r5
 4984 005e EC 54                   		mov.L	[r5], r4
 4985                             		.loc 2 6483 34
 4986 0060 ED A5 09                		mov.L	36[r10], r5
 4987 0063 EC 55                   		mov.L	[r5], r5
 4988                             		.loc 2 6483 59
 4989 0065 47 54                   		cmp	r5, r4
 4990 0067 29 0B                   		blt	.L364
 4991                             		.loc 2 6483 47 discriminator 1
 4992 0069 ED A5 08                		mov.L	32[r10], r5
 4993 006c EC 55                   		mov.L	[r5], r5
 4994                             		.loc 2 6483 59 discriminator 1
 4995 006e 62 15                   		add	#1, r5
6480:../src/wolfcrypt/src/sp_int.c ****                    ((a->used >= m->used) ?
 4996                             		.loc 2 6480 64 discriminator 1
 4997 0070 2E 10                   		bra	.L366
 4998                             	.L364:
 4999                             		.loc 2 6483 63 discriminator 2
 5000 0072 ED A5 09                		mov.L	36[r10], r5
 5001 0075 EC 55                   		mov.L	[r5], r5
 5002                             		.loc 2 6483 59 discriminator 2
 5003 0077 62 15                   		add	#1, r5
6480:../src/wolfcrypt/src/sp_int.c ****                    ((a->used >= m->used) ?
 5004                             		.loc 2 6480 64 discriminator 2
 5005 0079 0F                      		bra	.L366
 5006                             	.L359:
6480:../src/wolfcrypt/src/sp_int.c ****                    ((a->used >= m->used) ?
 5007                             		.loc 2 6480 64 is_stmt 0 discriminator 5
 5008 007a 66 15                   		mov.L	#1, r5
 5009 007c 76 10 01 00             		.balign 8,3,5
 5010                             	.L366:
6480:../src/wolfcrypt/src/sp_int.c ****                    ((a->used >= m->used) ?
 5011                             		.loc 2 6480 9 is_stmt 1 discriminator 7
 5012 0080 E7 A5 03                		mov.L	r5, 12[r10]
6484:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, used, 2);
 5013                             		.loc 2 6484 5 discriminator 7
 5014 0083 F9 A6 01 00             		mov.L	#0, 4[r10]
 5015 0087 66 05                   		mov.L	#0, r5
 5016 0089 66 06                   		mov.L	#0, r6
 5017 008b E7 A5 05                		mov.L	r5, 20[r10]
 5018 008e E7 A6 06                		mov.L	r6, 24[r10]
6485:../src/wolfcrypt/src/sp_int.c **** 
6486:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (b == NULL) || (m == NULL) || (r == NULL)) {
 5019                             		.loc 2 6486 8 discriminator 7
 5020 0091 ED A5 07                		mov.L	28[r10], r5
 5021 0094 61 05                   		cmp	#0, r5
 5022 0096 20 1A                   		beq	.L367
 5023                             		.loc 2 6486 21 discriminator 1
 5024 0098 ED A5 08                		mov.L	32[r10], r5
 5025 009b 61 05                   		cmp	#0, r5
 5026 009d 20 13                   		beq	.L367
 5027                             		.loc 2 6486 36 discriminator 2
 5028 009f ED A5 09                		mov.L	36[r10], r5
 5029 00a2 61 05                   		cmp	#0, r5
 5030 00a4 20 0C                   		beq	.L367
 5031                             		.loc 2 6486 51 discriminator 3
 5032 00a6 ED A5 0A                		mov.L	40[r10], r5
 5033 00a9 61 05                   		cmp	#0, r5
 5034 00ab 18                      		bne	.L368
 5035 00ac 76 10 01 00             		.balign 8,3,4
 5036                             	.L367:
6487:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 5037                             		.loc 2 6487 13
 5038 00b0 F8 A6 FD                		mov.L	#-3, [r10]
 5039                             	.L368:
6488:../src/wolfcrypt/src/sp_int.c ****     }
6489:../src/wolfcrypt/src/sp_int.c **** 
6490:../src/wolfcrypt/src/sp_int.c **** #if 0
6491:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
6492:../src/wolfcrypt/src/sp_int.c ****         sp_print(a, "a");
6493:../src/wolfcrypt/src/sp_int.c ****         sp_print(b, "b");
6494:../src/wolfcrypt/src/sp_int.c ****         sp_print(m, "m");
6495:../src/wolfcrypt/src/sp_int.c ****     }
6496:../src/wolfcrypt/src/sp_int.c **** #endif
6497:../src/wolfcrypt/src/sp_int.c **** 
6498:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, used, 2, err, NULL);
 5040                             		.loc 2 6498 5
 5041 00b3 EC A5                   		mov.L	[r10], r5
 5042 00b5 61 05                   		cmp	#0, r5
 5043 00b7 21 7E                   		bne	.L369
 5044                             		.loc 2 6498 5 is_stmt 0 discriminator 1
 5045 00b9 ED A5 03                		mov.L	12[r10], r5
 5046 00bc 61 05                   		cmp	#0, r5
 5047 00be 11                      		beq	.L370
 5048                             		.loc 2 6498 5 discriminator 2
 5049 00bf ED A5 03                		mov.L	12[r10], r5
 5050 00c2 62 25                   		add	#2, r5
 5051 00c4 6C 35                   		shll	#3, r5
 5052 00c6 0C                      		bra	.L371
 5053                             	.L370:
 5054                             		.loc 2 6498 5 discriminator 3
 5055 00c7 75 45 18                		mov.L	#24, r5
 5056                             	.L371:
 5057                             		.loc 2 6498 5 discriminator 5
 5058 00ca EF 51                   		mov.L	r5, r1
 5059 00cc 05 00 00 00             		bsr	_wolfSSL_Malloc
 5060 00d0 E7 A1 01                		mov.L	r1, 4[r10]
 5061 00d3 ED A5 01                		mov.L	4[r10], r5
 5062 00d6 61 05                   		cmp	#0, r5
 5063 00d8 1E                      		bne	.L372
 5064                             		.loc 2 6498 5 discriminator 6
 5065 00d9 F8 A6 FE                		mov.L	#-2, [r10]
 5066 00dc 2E 59                   		bra	.L369
 5067                             	.L372:
 5068                             	.LBB28:
 5069                             		.loc 2 6498 5 discriminator 7
 5070 00de ED A5 01                		mov.L	4[r10], r5
 5071 00e1 E7 A5 05                		mov.L	r5, 20[r10]
 5072 00e4 ED A5 05                		mov.L	20[r10], r5
 5073 00e7 ED A4 03                		mov.L	12[r10], r4
 5074 00ea A0 5C                   		mov.L	r4, 4[r5]
 5075 00ec F9 A6 02 01             		mov.L	#1, 8[r10]
 5076 00f0 2E 3E                   		bra	.L373
 5077                             	.L376:
 5078                             		.loc 2 6498 5 discriminator 14
 5079 00f2 ED A5 02                		mov.L	8[r10], r5
 5080 00f5 60 15                   		sub	#1, r5
 5081 00f7 6C 25                   		shll	#2, r5
 5082 00f9 4B A5                   		add	r10, r5
 5083 00fb A9 5C                   		mov.L	20[r5], r4
 5084 00fd ED A5 03                		mov.L	12[r10], r5
 5085 0100 61 05                   		cmp	#0, r5
 5086 0102 11                      		beq	.L374
 5087                             		.loc 2 6498 5 discriminator 9
 5088 0103 ED A5 03                		mov.L	12[r10], r5
 5089 0106 62 25                   		add	#2, r5
 5090 0108 6C 25                   		shll	#2, r5
 5091 010a 0B                      		bra	.L375
 5092                             	.L374:
 5093                             		.loc 2 6498 5 discriminator 10
 5094 010b 66 C5                   		mov.L	#12, r5
 5095                             	.L375:
 5096                             		.loc 2 6498 5 discriminator 12
 5097 010d 4B 54                   		add	r5, r4
 5098 010f ED A5 02                		mov.L	8[r10], r5
 5099 0112 6C 25                   		shll	#2, r5
 5100 0114 4B A5                   		add	r10, r5
 5101 0116 A1 5C                   		mov.L	r4, 20[r5]
 5102 0118 ED A5 02                		mov.L	8[r10], r5
 5103 011b 6C 25                   		shll	#2, r5
 5104 011d 4B A5                   		add	r10, r5
 5105 011f A9 5D                   		mov.L	20[r5], r5
 5106 0121 ED A4 03                		mov.L	12[r10], r4
 5107 0124 A0 5C                   		mov.L	r4, 4[r5]
 5108 0126 ED A5 02                		mov.L	8[r10], r5
 5109 0129 62 15                   		add	#1, r5
 5110 012b E7 A5 02                		mov.L	r5, 8[r10]
 5111                             	.L373:
 5112                             		.loc 2 6498 5 discriminator 13
 5113 012e ED A5 02                		mov.L	8[r10], r5
 5114 0131 61 15                   		cmp	#1, r5
 5115 0133 2B BF                   		ble	.L376
 5116                             	.L369:
 5117                             	.LBE28:
6499:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 5118                             		.loc 2 6499 8 is_stmt 1
 5119 0135 EC A5                   		mov.L	[r10], r5
 5120 0137 61 05                   		cmp	#0, r5
 5121 0139 21 2A                   		bne	.L377
6500:../src/wolfcrypt/src/sp_int.c ****         if (_sp_cmp(a, m) != MP_LT) {
 5122                             		.loc 2 6500 13
 5123 013b ED A2 09                		mov.L	36[r10], r2
 5124 013e ED A1 07                		mov.L	28[r10], r1
 5125 0141 05 00 00 00             		bsr	__sp_cmp
 5126 0145 EF 15                   		mov.L	r1, r5
 5127                             		.loc 2 6500 12
 5128 0147 75 05 FF                		cmp	#-1, r5
 5129 014a 20 19                   		beq	.L377
6501:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod(a, m, t[0]);
 5130                             		.loc 2 6501 19
 5131 014c ED A5 05                		mov.L	20[r10], r5
 5132 014f EF 53                   		mov.L	r5, r3
 5133 0151 ED A2 09                		mov.L	36[r10], r2
 5134 0154 ED A1 07                		mov.L	28[r10], r1
 5135 0157 05 00 00 00             		bsr	_sp_mod
 5136 015b E3 A1                   		mov.L	r1, [r10]
6502:../src/wolfcrypt/src/sp_int.c ****             a = t[0];
 5137                             		.loc 2 6502 15
 5138 015d ED A5 05                		mov.L	20[r10], r5
 5139 0160 E7 A5 07                		mov.L	r5, 28[r10]
 5140                             	.L377:
6503:../src/wolfcrypt/src/sp_int.c ****         }
6504:../src/wolfcrypt/src/sp_int.c ****     }
6505:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 5141                             		.loc 2 6505 8
 5142 0163 EC A5                   		mov.L	[r10], r5
 5143 0165 61 05                   		cmp	#0, r5
 5144 0167 21 2A                   		bne	.L378
6506:../src/wolfcrypt/src/sp_int.c ****         if (_sp_cmp(b, m) != MP_LT) {
 5145                             		.loc 2 6506 13
 5146 0169 ED A2 09                		mov.L	36[r10], r2
 5147 016c ED A1 08                		mov.L	32[r10], r1
 5148 016f 05 00 00 00             		bsr	__sp_cmp
 5149 0173 EF 15                   		mov.L	r1, r5
 5150                             		.loc 2 6506 12
 5151 0175 75 05 FF                		cmp	#-1, r5
 5152 0178 20 19                   		beq	.L378
6507:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod(b, m, t[1]);
 5153                             		.loc 2 6507 19
 5154 017a ED A5 06                		mov.L	24[r10], r5
 5155 017d EF 53                   		mov.L	r5, r3
 5156 017f ED A2 09                		mov.L	36[r10], r2
 5157 0182 ED A1 08                		mov.L	32[r10], r1
 5158 0185 05 00 00 00             		bsr	_sp_mod
 5159 0189 E3 A1                   		mov.L	r1, [r10]
6508:../src/wolfcrypt/src/sp_int.c ****             b = t[1];
 5160                             		.loc 2 6508 15
 5161 018b ED A5 06                		mov.L	24[r10], r5
 5162 018e E7 A5 08                		mov.L	r5, 32[r10]
 5163                             	.L378:
6509:../src/wolfcrypt/src/sp_int.c ****         }
6510:../src/wolfcrypt/src/sp_int.c ****     }
6511:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 5164                             		.loc 2 6511 8
 5165 0191 EC A5                   		mov.L	[r10], r5
 5166 0193 61 05                   		cmp	#0, r5
 5167 0195 21 2A                   		bne	.L379
6512:../src/wolfcrypt/src/sp_int.c ****         if (_sp_cmp(a, b) == MP_LT) {
 5168                             		.loc 2 6512 13
 5169 0197 ED A2 08                		mov.L	32[r10], r2
 5170 019a ED A1 07                		mov.L	28[r10], r1
 5171 019d 05 00 00 00             		bsr	__sp_cmp
 5172 01a1 EF 15                   		mov.L	r1, r5
 5173                             		.loc 2 6512 12
 5174 01a3 75 05 FF                		cmp	#-1, r5
 5175 01a6 21 19                   		bne	.L379
6513:../src/wolfcrypt/src/sp_int.c ****             err = sp_add(a, m, t[0]);
 5176                             		.loc 2 6513 19
 5177 01a8 ED A5 05                		mov.L	20[r10], r5
 5178 01ab EF 53                   		mov.L	r5, r3
 5179 01ad ED A2 09                		mov.L	36[r10], r2
 5180 01b0 ED A1 07                		mov.L	28[r10], r1
 5181 01b3 05 00 00 00             		bsr	_sp_add
 5182 01b7 E3 A1                   		mov.L	r1, [r10]
6514:../src/wolfcrypt/src/sp_int.c ****             a = t[0];
 5183                             		.loc 2 6514 15
 5184 01b9 ED A5 05                		mov.L	20[r10], r5
 5185 01bc E7 A5 07                		mov.L	r5, 28[r10]
 5186                             	.L379:
6515:../src/wolfcrypt/src/sp_int.c ****         }
6516:../src/wolfcrypt/src/sp_int.c ****     }
6517:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 5187                             		.loc 2 6517 8
 5188 01bf EC A5                   		mov.L	[r10], r5
 5189 01c1 61 05                   		cmp	#0, r5
 5190 01c3 21 11                   		bne	.L380
6518:../src/wolfcrypt/src/sp_int.c ****         err = sp_sub(a, b, r);
 5191                             		.loc 2 6518 15
 5192 01c5 ED A3 0A                		mov.L	40[r10], r3
 5193 01c8 ED A2 08                		mov.L	32[r10], r2
 5194 01cb ED A1 07                		mov.L	28[r10], r1
 5195 01ce 05 00 00 00             		bsr	_sp_sub
 5196 01d2 E3 A1                   		mov.L	r1, [r10]
 5197                             	.L380:
6519:../src/wolfcrypt/src/sp_int.c ****     }
6520:../src/wolfcrypt/src/sp_int.c **** 
6521:../src/wolfcrypt/src/sp_int.c **** #if 0
6522:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
6523:../src/wolfcrypt/src/sp_int.c ****         sp_print(r, "rms");
6524:../src/wolfcrypt/src/sp_int.c ****     }
6525:../src/wolfcrypt/src/sp_int.c **** #endif
6526:../src/wolfcrypt/src/sp_int.c **** 
6527:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
 5198                             		.loc 2 6527 5
 5199 01d4 ED A5 01                		mov.L	4[r10], r5
 5200 01d7 61 05                   		cmp	#0, r5
 5201 01d9 20 15                   		beq	.L381
 5202                             	.LBB29:
 5203                             		.loc 2 6527 5 is_stmt 0 discriminator 1
 5204 01db ED A5 01                		mov.L	4[r10], r5
 5205 01de E7 A5 04                		mov.L	r5, 16[r10]
 5206 01e1 ED A5 04                		mov.L	16[r10], r5
 5207 01e4 61 05                   		cmp	#0, r5
 5208 01e6 10                      		beq	.L381
 5209                             		.loc 2 6527 5 discriminator 2
 5210 01e7 ED A1 04                		mov.L	16[r10], r1
 5211 01ea 05 00 00 00             		bsr	_wolfSSL_Free
 5212                             	.L381:
 5213                             	.LBE29:
6528:../src/wolfcrypt/src/sp_int.c ****     return err;
 5214                             		.loc 2 6528 12 is_stmt 1
 5215 01ee EC A5                   		mov.L	[r10], r5
6529:../src/wolfcrypt/src/sp_int.c **** 
6530:../src/wolfcrypt/src/sp_int.c **** #else /* WOLFSSL_SP_INT_NEGATIVE */
6531:../src/wolfcrypt/src/sp_int.c **** 
6532:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
6533:../src/wolfcrypt/src/sp_int.c ****     int used = ((a == NULL) || (b == NULL)) ? 1 :
6534:../src/wolfcrypt/src/sp_int.c ****                    ((a->used >= b->used) ? a->used + 1 : b->used + 1);
6535:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT(t, used);
6536:../src/wolfcrypt/src/sp_int.c **** 
6537:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (b == NULL) || (m == NULL) || (r == NULL)) {
6538:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
6539:../src/wolfcrypt/src/sp_int.c ****     }
6540:../src/wolfcrypt/src/sp_int.c **** 
6541:../src/wolfcrypt/src/sp_int.c **** #if 0
6542:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
6543:../src/wolfcrypt/src/sp_int.c ****         sp_print(a, "a");
6544:../src/wolfcrypt/src/sp_int.c ****         sp_print(b, "b");
6545:../src/wolfcrypt/src/sp_int.c ****         sp_print(m, "m");
6546:../src/wolfcrypt/src/sp_int.c ****     }
6547:../src/wolfcrypt/src/sp_int.c **** #endif
6548:../src/wolfcrypt/src/sp_int.c **** 
6549:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_SIZE(t, used, err, NULL);
6550:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
6551:../src/wolfcrypt/src/sp_int.c ****         err = sp_sub(a, b, t);
6552:../src/wolfcrypt/src/sp_int.c ****     }
6553:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
6554:../src/wolfcrypt/src/sp_int.c ****         err = sp_mod(t, m, r);
6555:../src/wolfcrypt/src/sp_int.c ****     }
6556:../src/wolfcrypt/src/sp_int.c **** 
6557:../src/wolfcrypt/src/sp_int.c **** #if 0
6558:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
6559:../src/wolfcrypt/src/sp_int.c ****         sp_print(r, "rms");
6560:../src/wolfcrypt/src/sp_int.c ****     }
6561:../src/wolfcrypt/src/sp_int.c **** #endif
6562:../src/wolfcrypt/src/sp_int.c **** 
6563:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT(t, NULL);
6564:../src/wolfcrypt/src/sp_int.c ****     return err;
6565:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_INT_NEGATIVE */
6566:../src/wolfcrypt/src/sp_int.c **** }
 5216                             		.loc 2 6566 1
 5217 01f0 EF 51                   		mov.L	r5, r1
 5218 01f2 71 00 2C                		add	#44, r0
 5219 01f5 7E B6                   		pop	r6
 5220 01f7 7E BA                   		pop	r10
 5221 01f9 02                      		rts
 5222                             	.LFE88:
 5224 01fa 74 10 01 00 00 00       		.section	.text.sp_addmod_ct,"ax",@progbits
 5225                             		.global	_sp_addmod_ct
 5227                             	_sp_addmod_ct:
 5228                             	.LFB89:
6567:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL */
6568:../src/wolfcrypt/src/sp_int.c **** 
6569:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && defined(HAVE_ECC)
6570:../src/wolfcrypt/src/sp_int.c **** /* Add two value and reduce: r = (a + b) % m
6571:../src/wolfcrypt/src/sp_int.c ****  *
6572:../src/wolfcrypt/src/sp_int.c ****  * r = a + b (mod m) - constant time (a < m and b < m, a, b and m are positive)
6573:../src/wolfcrypt/src/sp_int.c ****  *
6574:../src/wolfcrypt/src/sp_int.c ****  * Assumes a, b, m and r are not NULL.
6575:../src/wolfcrypt/src/sp_int.c ****  * m and r must not be the same pointer.
6576:../src/wolfcrypt/src/sp_int.c ****  *
6577:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to add.
6578:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to add with.
6579:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m  SP integer that is the modulus.
6580:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
6581:../src/wolfcrypt/src/sp_int.c ****  *
6582:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6583:../src/wolfcrypt/src/sp_int.c ****  */
6584:../src/wolfcrypt/src/sp_int.c **** int sp_addmod_ct(sp_int* a, sp_int* b, sp_int* m, sp_int* r)
6585:../src/wolfcrypt/src/sp_int.c **** {
 5229                             		.loc 2 6585 1
 5230 0000 6E 6D                   		pushm	r6-r13
 5231                             	.LCFI100:
 5232 0002 72 0A 70 FF             		add	#-144, r0, r10
 5233                             	.LCFI101:
 5234 0006 EF A0                   		mov.L	r10, r0
 5235 0008 E7 A1 0A                		mov.L	r1, 40[r10]
 5236 000b E7 A2 0B                		mov.L	r2, 44[r10]
 5237 000e E7 A3 0C                		mov.L	r3, 48[r10]
 5238 0011 E7 A4 0D                		mov.L	r4, 52[r10]
6586:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 5239                             		.loc 2 6586 9
 5240 0014 F8 A6 00                		mov.L	#0, [r10]
6587:../src/wolfcrypt/src/sp_int.c **** #ifndef SQR_MUL_ASM
6588:../src/wolfcrypt/src/sp_int.c ****     sp_int_sword w;
6589:../src/wolfcrypt/src/sp_int.c ****     sp_int_sword s;
6590:../src/wolfcrypt/src/sp_int.c **** #else
6591:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit wl;
6592:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit wh;
6593:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit sl;
6594:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit sh;
6595:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t;
6596:../src/wolfcrypt/src/sp_int.c **** #endif
6597:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit mask;
6598:../src/wolfcrypt/src/sp_int.c ****     int i;
6599:../src/wolfcrypt/src/sp_int.c **** 
6600:../src/wolfcrypt/src/sp_int.c ****     if (r->size < m->used) {
 5241                             		.loc 2 6600 10
 5242 0017 ED A5 0D                		mov.L	52[r10], r5
 5243 001a A8 5C                   		mov.L	4[r5], r4
 5244                             		.loc 2 6600 20
 5245 001c ED A5 0C                		mov.L	48[r10], r5
 5246 001f EC 55                   		mov.L	[r5], r5
 5247                             		.loc 2 6600 8
 5248 0021 47 54                   		cmp	r5, r4
 5249 0023 28 05                   		bge	.L384
6601:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 5250                             		.loc 2 6601 13
 5251 0025 F8 A6 FD                		mov.L	#-3, [r10]
 5252                             	.L384:
6602:../src/wolfcrypt/src/sp_int.c ****     }
6603:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (r == m)) {
 5253                             		.loc 2 6603 8
 5254 0028 EC A5                   		mov.L	[r10], r5
 5255 002a 61 05                   		cmp	#0, r5
 5256 002c 21 0E                   		bne	.L385
 5257                             		.loc 2 6603 26 discriminator 1
 5258 002e ED A4 0D                		mov.L	52[r10], r4
 5259 0031 ED A5 0C                		mov.L	48[r10], r5
 5260 0034 47 54                   		cmp	r5, r4
 5261 0036 1C                      		bne	.L385
6604:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 5262                             		.loc 2 6604 13
 5263 0037 F8 A6 FD                		mov.L	#-3, [r10]
 5264                             	.L385:
6605:../src/wolfcrypt/src/sp_int.c ****     }
6606:../src/wolfcrypt/src/sp_int.c **** 
6607:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 5265                             		.loc 2 6607 8
 5266 003a EC A5                   		mov.L	[r10], r5
 5267 003c 61 05                   		cmp	#0, r5
 5268 003e 3B 62 02                		bne	.L386
6608:../src/wolfcrypt/src/sp_int.c ****         if (0) {
6609:../src/wolfcrypt/src/sp_int.c ****             sp_print(a, "a");
6610:../src/wolfcrypt/src/sp_int.c ****             sp_print(b, "b");
6611:../src/wolfcrypt/src/sp_int.c ****             sp_print(m, "m");
6612:../src/wolfcrypt/src/sp_int.c ****         }
6613:../src/wolfcrypt/src/sp_int.c **** 
6614:../src/wolfcrypt/src/sp_int.c ****         /* Add a to b into r. Do the subtract of modulus but don't store result.
6615:../src/wolfcrypt/src/sp_int.c ****          * When subtract result is negative, the overflow will be negative.
6616:../src/wolfcrypt/src/sp_int.c ****          * Only need to subtract mod when result is positive - overflow is
6617:../src/wolfcrypt/src/sp_int.c ****          * positive.
6618:../src/wolfcrypt/src/sp_int.c ****          */
6619:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6620:../src/wolfcrypt/src/sp_int.c ****         w = 0;
 5269                             		.loc 2 6620 11
 5270 0041 F9 A6 01 00             		mov.L	#0, 4[r10]
 5271 0045 F9 A6 02 00             		mov.L	#0, 8[r10]
6621:../src/wolfcrypt/src/sp_int.c ****         s = 0;
 5272                             		.loc 2 6621 11
 5273 0049 F9 A6 03 00             		mov.L	#0, 12[r10]
 5274 004d F9 A6 04 00             		mov.L	#0, 16[r10]
6622:../src/wolfcrypt/src/sp_int.c ****     #else
6623:../src/wolfcrypt/src/sp_int.c ****         wl = 0;
6624:../src/wolfcrypt/src/sp_int.c ****         wh = 0;
6625:../src/wolfcrypt/src/sp_int.c ****         sl = 0;
6626:../src/wolfcrypt/src/sp_int.c ****         sh = 0;
6627:../src/wolfcrypt/src/sp_int.c ****     #endif
6628:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < m->used; i++) {
 5275                             		.loc 2 6628 16
 5276 0051 F9 A6 05 00             		mov.L	#0, 20[r10]
 5277                             		.loc 2 6628 9
 5278 0055 38 30 01                		bra	.L387
 5279                             	.L388:
 5280                             	.LBB30:
6629:../src/wolfcrypt/src/sp_int.c ****             /* Values past 'used' are not initialized. */
6630:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit mask_a = (sp_int_digit)0 - (i < a->used);
 5281                             		.loc 2 6630 59 discriminator 3
 5282 0058 ED A5 0A                		mov.L	40[r10], r5
 5283 005b EC 54                   		mov.L	[r5], r4
 5284                             		.loc 2 6630 56 discriminator 3
 5285 005d ED A5 05                		mov.L	20[r10], r5
 5286 0060 47 45                   		cmp	r4, r5
 5287 0062 FC DB 59                		sclt.L	r5
 5288 0065 5B 55                   		movu.B	r5, r5
 5289                             		.loc 2 6630 26 discriminator 3
 5290 0067 7E 15                   		neg	r5
 5291 0069 E7 A5 07                		mov.L	r5, 28[r10]
6631:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit mask_b = (sp_int_digit)0 - (i < b->used);
 5292                             		.loc 2 6631 59 discriminator 3
 5293 006c ED A5 0B                		mov.L	44[r10], r5
 5294 006f EC 54                   		mov.L	[r5], r4
 5295                             		.loc 2 6631 56 discriminator 3
 5296 0071 ED A5 05                		mov.L	20[r10], r5
 5297 0074 47 45                   		cmp	r4, r5
 5298 0076 FC DB 59                		sclt.L	r5
 5299 0079 5B 55                   		movu.B	r5, r5
 5300                             		.loc 2 6631 26 discriminator 3
 5301 007b 7E 15                   		neg	r5
 5302 007d E7 A5 08                		mov.L	r5, 32[r10]
6632:../src/wolfcrypt/src/sp_int.c **** 
6633:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
6634:../src/wolfcrypt/src/sp_int.c ****             w         += a->dp[i] & mask_a;
 5303                             		.loc 2 6634 31 discriminator 3
 5304 0080 ED A4 0A                		mov.L	40[r10], r4
 5305 0083 ED A5 05                		mov.L	20[r10], r5
 5306 0086 62 25                   		add	#2, r5
 5307 0088 FE 65 44                		mov.L	[r5,r4], r4
 5308                             		.loc 2 6634 35 discriminator 3
 5309 008b ED A5 07                		mov.L	28[r10], r5
 5310 008e 53 45                   		and	r4, r5
 5311 0090 E7 A5 0E                		mov.L	r5, 56[r10]
 5312 0093 F9 A6 0F 00             		mov.L	#0, 60[r10]
 5313                             		.loc 2 6634 23 discriminator 3
 5314 0097 ED A5 01                		mov.L	4[r10], r5
 5315 009a ED A6 02                		mov.L	8[r10], r6
 5316 009d EF 63                   		mov.L	r6, r3
 5317 009f ED A4 0E                		mov.L	56[r10], r4
 5318 00a2 FF 22 45                		add	r4, r5, r2
 5319 00a5 06 A1 02 A3 0F          		adc 60[r10],r3
 5320 00aa E7 A3 17                		mov.L	r3, 92[r10]
 5321 00ad E7 A2 16                		mov.L	r2, 88[r10]
 5322 00b0 E5 AA 16 01             		mov.L	88[r10], 4[r10]
 5323 00b4 E5 AA 17 02             		mov.L	92[r10], 8[r10]
6635:../src/wolfcrypt/src/sp_int.c ****             w         += b->dp[i] & mask_b;
 5324                             		.loc 2 6635 31 discriminator 3
 5325 00b8 ED A4 0B                		mov.L	44[r10], r4
 5326 00bb ED A5 05                		mov.L	20[r10], r5
 5327 00be 62 25                   		add	#2, r5
 5328 00c0 FE 65 44                		mov.L	[r5,r4], r4
 5329                             		.loc 2 6635 35 discriminator 3
 5330 00c3 ED A5 08                		mov.L	32[r10], r5
 5331 00c6 53 45                   		and	r4, r5
 5332 00c8 E7 A5 10                		mov.L	r5, 64[r10]
 5333 00cb F9 A6 11 00             		mov.L	#0, 68[r10]
 5334                             		.loc 2 6635 23 discriminator 3
 5335 00cf ED A5 01                		mov.L	4[r10], r5
 5336 00d2 ED A6 02                		mov.L	8[r10], r6
 5337 00d5 EF 62                   		mov.L	r6, r2
 5338 00d7 ED A3 10                		mov.L	64[r10], r3
 5339 00da FF 27 35                		add	r3, r5, r7
 5340 00dd 06 A1 02 A2 11          		adc 68[r10],r2
 5341 00e2 E7 A2 19                		mov.L	r2, 100[r10]
 5342 00e5 E7 A7 18                		mov.L	r7, 96[r10]
 5343 00e8 E5 AA 18 01             		mov.L	96[r10], 4[r10]
 5344 00ec E5 AA 19 02             		mov.L	100[r10], 8[r10]
6636:../src/wolfcrypt/src/sp_int.c ****             r->dp[i]   = (sp_int_digit)w;
 5345                             		.loc 2 6636 26 discriminator 3
 5346 00f0 ED A3 01                		mov.L	4[r10], r3
 5347                             		.loc 2 6636 24 discriminator 3
 5348 00f3 ED A4 0D                		mov.L	52[r10], r4
 5349 00f6 ED A5 05                		mov.L	20[r10], r5
 5350 00f9 62 25                   		add	#2, r5
 5351 00fb FE 25 43                		mov.L	r3, [r5,r4]
6637:../src/wolfcrypt/src/sp_int.c ****             s         += (sp_int_digit)w;
 5352                             		.loc 2 6637 26 discriminator 3
 5353 00fe ED A5 01                		mov.L	4[r10], r5
 5354 0101 E7 A5 12                		mov.L	r5, 72[r10]
 5355 0104 F9 A6 13 00             		mov.L	#0, 76[r10]
 5356                             		.loc 2 6637 23 discriminator 3
 5357 0108 ED A5 03                		mov.L	12[r10], r5
 5358 010b ED A6 04                		mov.L	16[r10], r6
 5359 010e EF 67                   		mov.L	r6, r7
 5360 0110 ED A2 12                		mov.L	72[r10], r2
 5361 0113 FF 24 25                		add	r2, r5, r4
 5362 0116 06 A1 02 A7 13          		adc 76[r10],r7
 5363 011b E7 A7 1B                		mov.L	r7, 108[r10]
 5364 011e E7 A4 1A                		mov.L	r4, 104[r10]
 5365 0121 E5 AA 1A 03             		mov.L	104[r10], 12[r10]
 5366 0125 E5 AA 1B 04             		mov.L	108[r10], 16[r10]
6638:../src/wolfcrypt/src/sp_int.c ****             s         -= m->dp[i];
 5367                             		.loc 2 6638 31 discriminator 3
 5368 0129 ED A4 0C                		mov.L	48[r10], r4
 5369 012c ED A5 05                		mov.L	20[r10], r5
 5370 012f 62 25                   		add	#2, r5
 5371 0131 FE 65 45                		mov.L	[r5,r4], r5
 5372 0134 E7 A5 14                		mov.L	r5, 80[r10]
 5373 0137 F9 A6 15 00             		mov.L	#0, 84[r10]
 5374                             		.loc 2 6638 23 discriminator 3
 5375 013b ED A5 03                		mov.L	12[r10], r5
 5376 013e ED A6 04                		mov.L	16[r10], r6
 5377 0141 EF 64                   		mov.L	r6, r4
 5378 0143 ED A7 14                		mov.L	80[r10], r7
 5379 0146 ED A2 15                		mov.L	84[r10], r2
 5380 0149 FF 03 75                		sub	r7, r5, r3
 5381 014c FC 03 24                		sbb	r2, r4
 5382 014f E7 A4 1D                		mov.L	r4, 116[r10]
 5383 0152 E7 A3 1C                		mov.L	r3, 112[r10]
 5384 0155 E5 AA 1C 03             		mov.L	112[r10], 12[r10]
 5385 0159 E5 AA 1D 04             		mov.L	116[r10], 16[r10]
6639:../src/wolfcrypt/src/sp_int.c ****             s        >>= DIGIT_BIT;
 5386                             		.loc 2 6639 22 discriminator 3
 5387 015d ED A5 04                		mov.L	16[r10], r5
 5388 0160 6A 05                   		shar	#0, r5
 5389 0162 E7 A5 03                		mov.L	r5, 12[r10]
 5390 0165 ED A5 04                		mov.L	16[r10], r5
 5391 0168 6B F5                   		shar	#31, r5
 5392 016a E7 A5 04                		mov.L	r5, 16[r10]
6640:../src/wolfcrypt/src/sp_int.c ****             w        >>= DIGIT_BIT;
 5393                             		.loc 2 6640 22 discriminator 3
 5394 016d ED A5 02                		mov.L	8[r10], r5
 5395 0170 6A 05                   		shar	#0, r5
 5396 0172 E7 A5 01                		mov.L	r5, 4[r10]
 5397 0175 ED A5 02                		mov.L	8[r10], r5
 5398 0178 6B F5                   		shar	#31, r5
 5399 017a E7 A5 02                		mov.L	r5, 8[r10]
 5400                             	.LBE30:
6628:../src/wolfcrypt/src/sp_int.c ****             /* Values past 'used' are not initialized. */
 5401                             		.loc 2 6628 35 discriminator 3
 5402 017d ED A5 05                		mov.L	20[r10], r5
 5403 0180 62 15                   		add	#1, r5
 5404 0182 E7 A5 05                		mov.L	r5, 20[r10]
 5405                             	.L387:
6628:../src/wolfcrypt/src/sp_int.c ****             /* Values past 'used' are not initialized. */
 5406                             		.loc 2 6628 26 discriminator 1
 5407 0185 ED A5 0C                		mov.L	48[r10], r5
 5408 0188 EC 54                   		mov.L	[r5], r4
6628:../src/wolfcrypt/src/sp_int.c ****             /* Values past 'used' are not initialized. */
 5409                             		.loc 2 6628 9 discriminator 1
 5410 018a ED A5 05                		mov.L	20[r10], r5
 5411 018d 47 45                   		cmp	r4, r5
 5412 018f 28 05 38 C7 FE          		blt	.L388
6641:../src/wolfcrypt/src/sp_int.c ****         #else
6642:../src/wolfcrypt/src/sp_int.c ****             t = a->dp[i] & mask_a;
6643:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(wl, wh, t);
6644:../src/wolfcrypt/src/sp_int.c ****             t = b->dp[i] & mask_b;
6645:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(wl, wh, t);
6646:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = wl;
6647:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(sl, sh, wl);
6648:../src/wolfcrypt/src/sp_int.c ****             t = m->dp[i];
6649:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(sl, sh, t);
6650:../src/wolfcrypt/src/sp_int.c ****             sl = sh;
6651:../src/wolfcrypt/src/sp_int.c ****             sh = (sp_int_digit)0 - (sl >> (SP_WORD_SIZE-1));
6652:../src/wolfcrypt/src/sp_int.c ****             wl = wh;
6653:../src/wolfcrypt/src/sp_int.c ****             wh = 0;
6654:../src/wolfcrypt/src/sp_int.c ****         #endif
6655:../src/wolfcrypt/src/sp_int.c ****         }
6656:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6657:../src/wolfcrypt/src/sp_int.c ****         s += (sp_int_digit)w;
 5413                             		.loc 2 6657 14
 5414 0194 ED A5 01                		mov.L	4[r10], r5
 5415 0197 EF 5D                   		mov.L	r5, r13
 5416 0199 66 0E                   		mov.L	#0, r14
 5417                             		.loc 2 6657 11
 5418 019b ED A5 03                		mov.L	12[r10], r5
 5419 019e ED A6 04                		mov.L	16[r10], r6
 5420 01a1 EF 64                   		mov.L	r6, r4
 5421 01a3 FF 23 D5                		add	r13, r5, r3
 5422 01a6 FC 0B E4                		adc	r14, r4
 5423 01a9 E7 A4 1F                		mov.L	r4, 124[r10]
 5424 01ac E7 A3 1E                		mov.L	r3, 120[r10]
 5425 01af E5 AA 1E 03             		mov.L	120[r10], 12[r10]
 5426 01b3 E5 AA 1F 04             		mov.L	124[r10], 16[r10]
6658:../src/wolfcrypt/src/sp_int.c ****         /* s will be positive when subtracting modulus is needed. */
6659:../src/wolfcrypt/src/sp_int.c ****         mask = (sp_int_digit)0 - (s >= 0);
 5427                             		.loc 2 6659 37
 5428 01b7 ED A5 04                		mov.L	16[r10], r5
 5429 01ba 7E 05                   		not	r5
 5430 01bc 69 F5                   		shlr	#31, r5
 5431 01be 5B 55                   		movu.B	r5, r5
 5432                             		.loc 2 6659 14
 5433 01c0 7E 15                   		neg	r5
 5434 01c2 E7 A5 09                		mov.L	r5, 36[r10]
6660:../src/wolfcrypt/src/sp_int.c ****     #else
6661:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(sl, sh, wl);
6662:../src/wolfcrypt/src/sp_int.c ****         /* s will be positive when subtracting modulus is needed. */
6663:../src/wolfcrypt/src/sp_int.c ****         mask = (sh >> (SP_WORD_SIZE-1)) - 1;
6664:../src/wolfcrypt/src/sp_int.c ****     #endif
6665:../src/wolfcrypt/src/sp_int.c **** 
6666:../src/wolfcrypt/src/sp_int.c ****         /* Constant time, conditionally, subtract modulus from sum. */
6667:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6668:../src/wolfcrypt/src/sp_int.c ****         w = 0;
 5435                             		.loc 2 6668 11
 5436 01c5 F9 A6 01 00             		mov.L	#0, 4[r10]
 5437 01c9 F9 A6 02 00             		mov.L	#0, 8[r10]
6669:../src/wolfcrypt/src/sp_int.c ****     #else
6670:../src/wolfcrypt/src/sp_int.c ****         wl = 0;
6671:../src/wolfcrypt/src/sp_int.c ****         wh = 0;
6672:../src/wolfcrypt/src/sp_int.c ****     #endif
6673:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < m->used; i++) {
 5438                             		.loc 2 6673 16
 5439 01cd F9 A6 05 00             		mov.L	#0, 20[r10]
 5440                             		.loc 2 6673 9
 5441 01d1 38 84 00                		bra	.L389
 5442                             	.L390:
6674:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
6675:../src/wolfcrypt/src/sp_int.c ****             w         += r->dp[i];
 5443                             		.loc 2 6675 31 discriminator 3
 5444 01d4 ED A4 0D                		mov.L	52[r10], r4
 5445 01d7 ED A5 05                		mov.L	20[r10], r5
 5446 01da 62 25                   		add	#2, r5
 5447 01dc FE 65 45                		mov.L	[r5,r4], r5
 5448 01df EF 58                   		mov.L	r5, r8
 5449 01e1 66 09                   		mov.L	#0, r9
 5450                             		.loc 2 6675 23 discriminator 3
 5451 01e3 ED A5 01                		mov.L	4[r10], r5
 5452 01e6 ED A6 02                		mov.L	8[r10], r6
 5453 01e9 EF 6C                   		mov.L	r6, r12
 5454 01eb FF 2B 85                		add	r8, r5, r11
 5455 01ee FC 0B 9C                		adc	r9, r12
 5456 01f1 E7 AC 21                		mov.L	r12, 132[r10]
 5457 01f4 E7 AB 20                		mov.L	r11, 128[r10]
 5458 01f7 E5 AA 20 01             		mov.L	128[r10], 4[r10]
 5459 01fb E5 AA 21 02             		mov.L	132[r10], 8[r10]
6676:../src/wolfcrypt/src/sp_int.c ****             w         -= m->dp[i] & mask;
 5460                             		.loc 2 6676 31 discriminator 3
 5461 01ff ED A4 0C                		mov.L	48[r10], r4
 5462 0202 ED A5 05                		mov.L	20[r10], r5
 5463 0205 62 25                   		add	#2, r5
 5464 0207 FE 65 44                		mov.L	[r5,r4], r4
 5465                             		.loc 2 6676 35 discriminator 3
 5466 020a ED A5 09                		mov.L	36[r10], r5
 5467 020d 53 45                   		and	r4, r5
 5468 020f EF 5B                   		mov.L	r5, r11
 5469 0211 66 0C                   		mov.L	#0, r12
 5470                             		.loc 2 6676 23 discriminator 3
 5471 0213 ED A5 01                		mov.L	4[r10], r5
 5472 0216 ED A6 02                		mov.L	8[r10], r6
 5473 0219 EF 63                   		mov.L	r6, r3
 5474 021b FF 02 B5                		sub	r11, r5, r2
 5475 021e FC 03 C3                		sbb	r12, r3
 5476 0221 E7 A3 23                		mov.L	r3, 140[r10]
 5477 0224 E7 A2 22                		mov.L	r2, 136[r10]
 5478 0227 E5 AA 22 01             		mov.L	136[r10], 4[r10]
 5479 022b E5 AA 23 02             		mov.L	140[r10], 8[r10]
6677:../src/wolfcrypt/src/sp_int.c ****             r->dp[i]   = (sp_int_digit)w;
 5480                             		.loc 2 6677 26 discriminator 3
 5481 022f ED A3 01                		mov.L	4[r10], r3
 5482                             		.loc 2 6677 24 discriminator 3
 5483 0232 ED A4 0D                		mov.L	52[r10], r4
 5484 0235 ED A5 05                		mov.L	20[r10], r5
 5485 0238 62 25                   		add	#2, r5
 5486 023a FE 25 43                		mov.L	r3, [r5,r4]
6678:../src/wolfcrypt/src/sp_int.c ****             w        >>= DIGIT_BIT;
 5487                             		.loc 2 6678 22 discriminator 3
 5488 023d ED A5 02                		mov.L	8[r10], r5
 5489 0240 6A 05                   		shar	#0, r5
 5490 0242 E7 A5 01                		mov.L	r5, 4[r10]
 5491 0245 ED A5 02                		mov.L	8[r10], r5
 5492 0248 6B F5                   		shar	#31, r5
 5493 024a E7 A5 02                		mov.L	r5, 8[r10]
6673:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
 5494                             		.loc 2 6673 35 discriminator 3
 5495 024d ED A5 05                		mov.L	20[r10], r5
 5496 0250 62 15                   		add	#1, r5
 5497 0252 E7 A5 05                		mov.L	r5, 20[r10]
 5498                             	.L389:
6673:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
 5499                             		.loc 2 6673 26 discriminator 1
 5500 0255 ED A5 0C                		mov.L	48[r10], r5
 5501 0258 EC 55                   		mov.L	[r5], r5
6673:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
 5502                             		.loc 2 6673 9 discriminator 1
 5503 025a ED A4 05                		mov.L	20[r10], r4
 5504 025d 47 54                   		cmp	r5, r4
 5505 025f 28 05 38 73 FF          		blt	.L390
6679:../src/wolfcrypt/src/sp_int.c ****         #else
6680:../src/wolfcrypt/src/sp_int.c ****             t = r->dp[i];
6681:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(wl, wh, t);
6682:../src/wolfcrypt/src/sp_int.c ****             t = m->dp[i] & mask;
6683:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(wl, wh, t);
6684:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = wl;
6685:../src/wolfcrypt/src/sp_int.c ****             wl = wh;
6686:../src/wolfcrypt/src/sp_int.c ****             wh = (sp_int_digit)0 - (wl >> (SP_WORD_SIZE-1));
6687:../src/wolfcrypt/src/sp_int.c ****         #endif
6688:../src/wolfcrypt/src/sp_int.c ****         }
6689:../src/wolfcrypt/src/sp_int.c ****         /* Result will always have digits equal to or less than those in
6690:../src/wolfcrypt/src/sp_int.c ****          * modulus. */
6691:../src/wolfcrypt/src/sp_int.c ****         r->used = i;
 5506                             		.loc 2 6691 17
 5507 0264 ED A5 0D                		mov.L	52[r10], r5
 5508 0267 ED A4 05                		mov.L	20[r10], r4
 5509 026a E3 54                   		mov.L	r4, [r5]
 5510                             	.LBB31:
6692:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
6693:../src/wolfcrypt/src/sp_int.c ****         r->sign = MP_ZPOS;
6694:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_INT_NEGATIVE */
6695:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
 5511                             		.loc 2 6695 9
 5512 026c ED A5 0D                		mov.L	52[r10], r5
 5513 026f EC 55                   		mov.L	[r5], r5
 5514 0271 60 15                   		sub	#1, r5
 5515 0273 E7 A5 06                		mov.L	r5, 24[r10]
 5516 0276 09                      		bra	.L391
 5517                             	.L393:
 5518                             		.loc 2 6695 9 is_stmt 0 discriminator 5
 5519 0277 ED A5 06                		mov.L	24[r10], r5
 5520 027a 60 15                   		sub	#1, r5
 5521 027c E7 A5 06                		mov.L	r5, 24[r10]
 5522                             	.L391:
 5523                             		.loc 2 6695 9 discriminator 1
 5524 027f ED A5 06                		mov.L	24[r10], r5
 5525 0282 61 05                   		cmp	#0, r5
 5526 0284 29 11                   		blt	.L392
 5527                             		.loc 2 6695 9 discriminator 3
 5528 0286 ED A4 0D                		mov.L	52[r10], r4
 5529 0289 ED A5 06                		mov.L	24[r10], r5
 5530 028c 62 25                   		add	#2, r5
 5531 028e FE 65 45                		mov.L	[r5,r4], r5
 5532 0291 61 05                   		cmp	#0, r5
 5533 0293 20 E4                   		beq	.L393
 5534                             	.L392:
 5535                             		.loc 2 6695 9 discriminator 6
 5536 0295 ED A5 06                		mov.L	24[r10], r5
 5537 0298 71 54 01                		add	#1, r5, r4
 5538 029b ED A5 0D                		mov.L	52[r10], r5
 5539 029e E3 54                   		mov.L	r4, [r5]
 5540                             	.L386:
 5541                             	.LBE31:
6696:../src/wolfcrypt/src/sp_int.c **** 
6697:../src/wolfcrypt/src/sp_int.c ****         if (0) {
6698:../src/wolfcrypt/src/sp_int.c ****             sp_print(r, "rma");
6699:../src/wolfcrypt/src/sp_int.c ****         }
6700:../src/wolfcrypt/src/sp_int.c ****     }
6701:../src/wolfcrypt/src/sp_int.c **** 
6702:../src/wolfcrypt/src/sp_int.c ****     return err;
 5542                             		.loc 2 6702 12 is_stmt 1
 5543 02a0 EC A5                   		mov.L	[r10], r5
6703:../src/wolfcrypt/src/sp_int.c **** }
 5544                             		.loc 2 6703 1
 5545 02a2 EF 51                   		mov.L	r5, r1
 5546 02a4 3F 6D 2C                		rtsd	#176, r6-r13
 5547                             	.LFE89:
 5549                             		.section	.text.sp_submod_ct,"ax",@progbits
 5550                             		.global	_sp_submod_ct
 5552                             	_sp_submod_ct:
 5553                             	.LFB90:
6704:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL && HAVE_ECC */
6705:../src/wolfcrypt/src/sp_int.c **** 
6706:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && defined(HAVE_ECC)
6707:../src/wolfcrypt/src/sp_int.c **** /* Sub b from a and reduce: r = (a - b) % m
6708:../src/wolfcrypt/src/sp_int.c ****  * Result is always positive.
6709:../src/wolfcrypt/src/sp_int.c ****  *
6710:../src/wolfcrypt/src/sp_int.c ****  * r = a - b (mod m) - constant time (a < m and b < m, a, b and m are positive)
6711:../src/wolfcrypt/src/sp_int.c ****  *
6712:../src/wolfcrypt/src/sp_int.c ****  * Assumes a, b, m and r are not NULL.
6713:../src/wolfcrypt/src/sp_int.c ****  * m and r must not be the same pointer.
6714:../src/wolfcrypt/src/sp_int.c ****  *
6715:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to subtract from
6716:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to subtract.
6717:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m  SP integer that is the modulus.
6718:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
6719:../src/wolfcrypt/src/sp_int.c ****  *
6720:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6721:../src/wolfcrypt/src/sp_int.c ****  */
6722:../src/wolfcrypt/src/sp_int.c **** int sp_submod_ct(sp_int* a, sp_int* b, sp_int* m, sp_int* r)
6723:../src/wolfcrypt/src/sp_int.c **** {
 5554                             		.loc 2 6723 1
 5555 0000 6E 6D                   		pushm	r6-r13
 5556                             	.LCFI102:
 5557 0002 71 0A A8                		add	#-88, r0, r10
 5558                             	.LCFI103:
 5559 0005 EF A0                   		mov.L	r10, r0
 5560 0007 E7 A1 08                		mov.L	r1, 32[r10]
 5561 000a E7 A2 09                		mov.L	r2, 36[r10]
 5562 000d E7 A3 0A                		mov.L	r3, 40[r10]
 5563 0010 E7 A4 0B                		mov.L	r4, 44[r10]
6724:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 5564                             		.loc 2 6724 9
 5565 0013 F8 A6 00                		mov.L	#0, [r10]
6725:../src/wolfcrypt/src/sp_int.c **** #ifndef SQR_MUL_ASM
6726:../src/wolfcrypt/src/sp_int.c ****     sp_int_sword w;
6727:../src/wolfcrypt/src/sp_int.c **** #else
6728:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l;
6729:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h;
6730:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t;
6731:../src/wolfcrypt/src/sp_int.c **** #endif
6732:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit mask;
6733:../src/wolfcrypt/src/sp_int.c ****     int i;
6734:../src/wolfcrypt/src/sp_int.c **** 
6735:../src/wolfcrypt/src/sp_int.c ****     if (r->size < m->used + 1) {
 5566                             		.loc 2 6735 20
 5567 0016 ED A5 0A                		mov.L	40[r10], r5
 5568 0019 EC 54                   		mov.L	[r5], r4
 5569                             		.loc 2 6735 10
 5570 001b ED A5 0B                		mov.L	44[r10], r5
 5571 001e A8 5D                   		mov.L	4[r5], r5
 5572                             		.loc 2 6735 8
 5573 0020 47 54                   		cmp	r5, r4
 5574 0022 29 05                   		blt	.L396
6736:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 5575                             		.loc 2 6736 13
 5576 0024 F8 A6 FD                		mov.L	#-3, [r10]
 5577                             	.L396:
6737:../src/wolfcrypt/src/sp_int.c ****     }
6738:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (r == m)) {
 5578                             		.loc 2 6738 8
 5579 0027 EC A5                   		mov.L	[r10], r5
 5580 0029 61 05                   		cmp	#0, r5
 5581 002b 21 0E                   		bne	.L397
 5582                             		.loc 2 6738 26 discriminator 1
 5583 002d ED A4 0B                		mov.L	44[r10], r4
 5584 0030 ED A5 0A                		mov.L	40[r10], r5
 5585 0033 47 54                   		cmp	r5, r4
 5586 0035 1C                      		bne	.L397
6739:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 5587                             		.loc 2 6739 13
 5588 0036 F8 A6 FD                		mov.L	#-3, [r10]
 5589                             	.L397:
6740:../src/wolfcrypt/src/sp_int.c ****     }
6741:../src/wolfcrypt/src/sp_int.c **** 
6742:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 5590                             		.loc 2 6742 8
 5591 0039 EC A5                   		mov.L	[r10], r5
 5592 003b 61 05                   		cmp	#0, r5
 5593 003d 3B BE 01                		bne	.L398
6743:../src/wolfcrypt/src/sp_int.c ****         if (0) {
6744:../src/wolfcrypt/src/sp_int.c ****             sp_print(a, "a");
6745:../src/wolfcrypt/src/sp_int.c ****             sp_print(b, "b");
6746:../src/wolfcrypt/src/sp_int.c ****             sp_print(m, "m");
6747:../src/wolfcrypt/src/sp_int.c ****         }
6748:../src/wolfcrypt/src/sp_int.c **** 
6749:../src/wolfcrypt/src/sp_int.c ****         /* In constant time, subtract b from a putting result in r. */
6750:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6751:../src/wolfcrypt/src/sp_int.c ****         w = 0;
 5594                             		.loc 2 6751 11
 5595 0040 F9 A6 01 00             		mov.L	#0, 4[r10]
 5596 0044 F9 A6 02 00             		mov.L	#0, 8[r10]
6752:../src/wolfcrypt/src/sp_int.c ****     #else
6753:../src/wolfcrypt/src/sp_int.c ****         l = 0;
6754:../src/wolfcrypt/src/sp_int.c ****         h = 0;
6755:../src/wolfcrypt/src/sp_int.c ****     #endif
6756:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < m->used; i++) {
 5597                             		.loc 2 6756 16
 5598 0048 F9 A6 03 00             		mov.L	#0, 12[r10]
 5599                             		.loc 2 6756 9
 5600 004c 38 B9 00                		bra	.L399
 5601                             	.L400:
 5602                             	.LBB32:
6757:../src/wolfcrypt/src/sp_int.c ****             /* Values past 'used' are not initialized. */
6758:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit mask_a = (sp_int_digit)0 - (i < a->used);
 5603                             		.loc 2 6758 59 discriminator 3
 5604 004f ED A5 08                		mov.L	32[r10], r5
 5605 0052 EC 54                   		mov.L	[r5], r4
 5606                             		.loc 2 6758 56 discriminator 3
 5607 0054 ED A5 03                		mov.L	12[r10], r5
 5608 0057 47 45                   		cmp	r4, r5
 5609 0059 FC DB 59                		sclt.L	r5
 5610 005c 5B 55                   		movu.B	r5, r5
 5611                             		.loc 2 6758 26 discriminator 3
 5612 005e 7E 15                   		neg	r5
 5613 0060 E7 A5 05                		mov.L	r5, 20[r10]
6759:../src/wolfcrypt/src/sp_int.c ****             sp_int_digit mask_b = (sp_int_digit)0 - (i < b->used);
 5614                             		.loc 2 6759 59 discriminator 3
 5615 0063 ED A5 09                		mov.L	36[r10], r5
 5616 0066 EC 54                   		mov.L	[r5], r4
 5617                             		.loc 2 6759 56 discriminator 3
 5618 0068 ED A5 03                		mov.L	12[r10], r5
 5619 006b 47 45                   		cmp	r4, r5
 5620 006d FC DB 59                		sclt.L	r5
 5621 0070 5B 55                   		movu.B	r5, r5
 5622                             		.loc 2 6759 26 discriminator 3
 5623 0072 7E 15                   		neg	r5
 5624 0074 E7 A5 06                		mov.L	r5, 24[r10]
6760:../src/wolfcrypt/src/sp_int.c **** 
6761:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
6762:../src/wolfcrypt/src/sp_int.c ****             w         += a->dp[i] & mask_a;
 5625                             		.loc 2 6762 31 discriminator 3
 5626 0077 ED A4 08                		mov.L	32[r10], r4
 5627 007a ED A5 03                		mov.L	12[r10], r5
 5628 007d 62 25                   		add	#2, r5
 5629 007f FE 65 44                		mov.L	[r5,r4], r4
 5630                             		.loc 2 6762 35 discriminator 3
 5631 0082 ED A5 05                		mov.L	20[r10], r5
 5632 0085 53 45                   		and	r4, r5
 5633 0087 E7 A5 0C                		mov.L	r5, 48[r10]
 5634 008a F9 A6 0D 00             		mov.L	#0, 52[r10]
 5635                             		.loc 2 6762 23 discriminator 3
 5636 008e ED A5 01                		mov.L	4[r10], r5
 5637 0091 ED A6 02                		mov.L	8[r10], r6
 5638 0094 EF 67                   		mov.L	r6, r7
 5639 0096 ED AB 0C                		mov.L	48[r10], r11
 5640 0099 FF 24 B5                		add	r11, r5, r4
 5641 009c 06 A1 02 A7 0D          		adc 52[r10],r7
 5642 00a1 E7 A7 0F                		mov.L	r7, 60[r10]
 5643 00a4 E7 A4 0E                		mov.L	r4, 56[r10]
 5644 00a7 E5 AA 0E 01             		mov.L	56[r10], 4[r10]
 5645 00ab E5 AA 0F 02             		mov.L	60[r10], 8[r10]
6763:../src/wolfcrypt/src/sp_int.c ****             w         -= b->dp[i] & mask_b;
 5646                             		.loc 2 6763 31 discriminator 3
 5647 00af ED A4 09                		mov.L	36[r10], r4
 5648 00b2 ED A5 03                		mov.L	12[r10], r5
 5649 00b5 62 25                   		add	#2, r5
 5650 00b7 FE 65 44                		mov.L	[r5,r4], r4
 5651                             		.loc 2 6763 35 discriminator 3
 5652 00ba ED A5 06                		mov.L	24[r10], r5
 5653 00bd 53 45                   		and	r4, r5
 5654 00bf EF 5B                   		mov.L	r5, r11
 5655 00c1 66 0C                   		mov.L	#0, r12
 5656                             		.loc 2 6763 23 discriminator 3
 5657 00c3 ED A5 01                		mov.L	4[r10], r5
 5658 00c6 ED A6 02                		mov.L	8[r10], r6
 5659 00c9 EF 67                   		mov.L	r6, r7
 5660 00cb FF 04 B5                		sub	r11, r5, r4
 5661 00ce FC 03 C7                		sbb	r12, r7
 5662 00d1 E7 A7 11                		mov.L	r7, 68[r10]
 5663 00d4 E7 A4 10                		mov.L	r4, 64[r10]
 5664 00d7 E5 AA 10 01             		mov.L	64[r10], 4[r10]
 5665 00db E5 AA 11 02             		mov.L	68[r10], 8[r10]
6764:../src/wolfcrypt/src/sp_int.c ****             r->dp[i]   = (sp_int_digit)w;
 5666                             		.loc 2 6764 26 discriminator 3
 5667 00df ED A3 01                		mov.L	4[r10], r3
 5668                             		.loc 2 6764 24 discriminator 3
 5669 00e2 ED A4 0B                		mov.L	44[r10], r4
 5670 00e5 ED A5 03                		mov.L	12[r10], r5
 5671 00e8 62 25                   		add	#2, r5
 5672 00ea FE 25 43                		mov.L	r3, [r5,r4]
6765:../src/wolfcrypt/src/sp_int.c ****             w        >>= DIGIT_BIT;
 5673                             		.loc 2 6765 22 discriminator 3
 5674 00ed ED A5 02                		mov.L	8[r10], r5
 5675 00f0 6A 05                   		shar	#0, r5
 5676 00f2 E7 A5 01                		mov.L	r5, 4[r10]
 5677 00f5 ED A5 02                		mov.L	8[r10], r5
 5678 00f8 6B F5                   		shar	#31, r5
 5679 00fa E7 A5 02                		mov.L	r5, 8[r10]
 5680                             	.LBE32:
6756:../src/wolfcrypt/src/sp_int.c ****             /* Values past 'used' are not initialized. */
 5681                             		.loc 2 6756 35 discriminator 3
 5682 00fd ED A5 03                		mov.L	12[r10], r5
 5683 0100 62 15                   		add	#1, r5
 5684 0102 E7 A5 03                		mov.L	r5, 12[r10]
 5685                             	.L399:
6756:../src/wolfcrypt/src/sp_int.c ****             /* Values past 'used' are not initialized. */
 5686                             		.loc 2 6756 26 discriminator 1
 5687 0105 ED A5 0A                		mov.L	40[r10], r5
 5688 0108 EC 54                   		mov.L	[r5], r4
6756:../src/wolfcrypt/src/sp_int.c ****             /* Values past 'used' are not initialized. */
 5689                             		.loc 2 6756 9 discriminator 1
 5690 010a ED A5 03                		mov.L	12[r10], r5
 5691 010d 47 45                   		cmp	r4, r5
 5692 010f 28 05 38 3E FF          		blt	.L400
6766:../src/wolfcrypt/src/sp_int.c ****         #else
6767:../src/wolfcrypt/src/sp_int.c ****             t = a->dp[i] & mask_a;
6768:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, t);
6769:../src/wolfcrypt/src/sp_int.c ****             t = b->dp[i] & mask_b;
6770:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, t);
6771:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = l;
6772:../src/wolfcrypt/src/sp_int.c ****             l = h;
6773:../src/wolfcrypt/src/sp_int.c ****             h = (sp_int_digit)0 - (l >> (SP_WORD_SIZE - 1));
6774:../src/wolfcrypt/src/sp_int.c ****         #endif
6775:../src/wolfcrypt/src/sp_int.c ****         }
6776:../src/wolfcrypt/src/sp_int.c ****         /* When w is negative then we need to add modulus to make result
6777:../src/wolfcrypt/src/sp_int.c ****          * positive. */
6778:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6779:../src/wolfcrypt/src/sp_int.c ****         mask = (sp_int_digit)0 - (w < 0);
 5693                             		.loc 2 6779 37
 5694 0114 ED A5 02                		mov.L	8[r10], r5
 5695 0117 69 F5                   		shlr	#31, r5
 5696 0119 5B 55                   		movu.B	r5, r5
 5697                             		.loc 2 6779 14
 5698 011b 7E 15                   		neg	r5
 5699 011d E7 A5 07                		mov.L	r5, 28[r10]
6780:../src/wolfcrypt/src/sp_int.c ****     #else
6781:../src/wolfcrypt/src/sp_int.c ****         mask = h;
6782:../src/wolfcrypt/src/sp_int.c ****     #endif
6783:../src/wolfcrypt/src/sp_int.c ****         /* Constant time, conditionally, add modulus to difference. */
6784:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
6785:../src/wolfcrypt/src/sp_int.c ****         w = 0;
 5700                             		.loc 2 6785 11
 5701 0120 F9 A6 01 00             		mov.L	#0, 4[r10]
 5702 0124 F9 A6 02 00             		mov.L	#0, 8[r10]
6786:../src/wolfcrypt/src/sp_int.c ****     #else
6787:../src/wolfcrypt/src/sp_int.c ****         l = 0;
6788:../src/wolfcrypt/src/sp_int.c ****         h = 0;
6789:../src/wolfcrypt/src/sp_int.c ****     #endif
6790:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < m->used; i++) {
 5703                             		.loc 2 6790 16
 5704 0128 F9 A6 03 00             		mov.L	#0, 12[r10]
 5705                             		.loc 2 6790 9
 5706 012c 38 84 00                		bra	.L401
 5707                             	.L402:
6791:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
6792:../src/wolfcrypt/src/sp_int.c ****             w         += r->dp[i];
 5708                             		.loc 2 6792 31 discriminator 3
 5709 012f ED A4 0B                		mov.L	44[r10], r4
 5710 0132 ED A5 03                		mov.L	12[r10], r5
 5711 0135 62 25                   		add	#2, r5
 5712 0137 FE 65 45                		mov.L	[r5,r4], r5
 5713 013a EF 58                   		mov.L	r5, r8
 5714 013c 66 09                   		mov.L	#0, r9
 5715                             		.loc 2 6792 23 discriminator 3
 5716 013e ED A5 01                		mov.L	4[r10], r5
 5717 0141 ED A6 02                		mov.L	8[r10], r6
 5718 0144 EF 6C                   		mov.L	r6, r12
 5719 0146 FF 2B 85                		add	r8, r5, r11
 5720 0149 FC 0B 9C                		adc	r9, r12
 5721 014c E7 AC 13                		mov.L	r12, 76[r10]
 5722 014f E7 AB 12                		mov.L	r11, 72[r10]
 5723 0152 E5 AA 12 01             		mov.L	72[r10], 4[r10]
 5724 0156 E5 AA 13 02             		mov.L	76[r10], 8[r10]
6793:../src/wolfcrypt/src/sp_int.c ****             w         += m->dp[i] & mask;
 5725                             		.loc 2 6793 31 discriminator 3
 5726 015a ED A4 0A                		mov.L	40[r10], r4
 5727 015d ED A5 03                		mov.L	12[r10], r5
 5728 0160 62 25                   		add	#2, r5
 5729 0162 FE 65 44                		mov.L	[r5,r4], r4
 5730                             		.loc 2 6793 35 discriminator 3
 5731 0165 ED A5 07                		mov.L	28[r10], r5
 5732 0168 53 45                   		and	r4, r5
 5733 016a EF 5D                   		mov.L	r5, r13
 5734 016c 66 0E                   		mov.L	#0, r14
 5735                             		.loc 2 6793 23 discriminator 3
 5736 016e ED A5 01                		mov.L	4[r10], r5
 5737 0171 ED A6 02                		mov.L	8[r10], r6
 5738 0174 EF 6B                   		mov.L	r6, r11
 5739 0176 FF 27 D5                		add	r13, r5, r7
 5740 0179 FC 0B EB                		adc	r14, r11
 5741 017c E7 AB 15                		mov.L	r11, 84[r10]
 5742 017f E7 A7 14                		mov.L	r7, 80[r10]
 5743 0182 E5 AA 14 01             		mov.L	80[r10], 4[r10]
 5744 0186 E5 AA 15 02             		mov.L	84[r10], 8[r10]
6794:../src/wolfcrypt/src/sp_int.c ****             r->dp[i]   = (sp_int_digit)w;
 5745                             		.loc 2 6794 26 discriminator 3
 5746 018a ED A3 01                		mov.L	4[r10], r3
 5747                             		.loc 2 6794 24 discriminator 3
 5748 018d ED A4 0B                		mov.L	44[r10], r4
 5749 0190 ED A5 03                		mov.L	12[r10], r5
 5750 0193 62 25                   		add	#2, r5
 5751 0195 FE 25 43                		mov.L	r3, [r5,r4]
6795:../src/wolfcrypt/src/sp_int.c ****             w        >>= DIGIT_BIT;
 5752                             		.loc 2 6795 22 discriminator 3
 5753 0198 ED A5 02                		mov.L	8[r10], r5
 5754 019b 6A 05                   		shar	#0, r5
 5755 019d E7 A5 01                		mov.L	r5, 4[r10]
 5756 01a0 ED A5 02                		mov.L	8[r10], r5
 5757 01a3 6B F5                   		shar	#31, r5
 5758 01a5 E7 A5 02                		mov.L	r5, 8[r10]
6790:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
 5759                             		.loc 2 6790 35 discriminator 3
 5760 01a8 ED A5 03                		mov.L	12[r10], r5
 5761 01ab 62 15                   		add	#1, r5
 5762 01ad E7 A5 03                		mov.L	r5, 12[r10]
 5763                             	.L401:
6790:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
 5764                             		.loc 2 6790 26 discriminator 1
 5765 01b0 ED A5 0A                		mov.L	40[r10], r5
 5766 01b3 EC 55                   		mov.L	[r5], r5
6790:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
 5767                             		.loc 2 6790 9 discriminator 1
 5768 01b5 ED A4 03                		mov.L	12[r10], r4
 5769 01b8 47 54                   		cmp	r5, r4
 5770 01ba 28 05 38 73 FF          		blt	.L402
6796:../src/wolfcrypt/src/sp_int.c ****         #else
6797:../src/wolfcrypt/src/sp_int.c ****             t = r->dp[i];
6798:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, t);
6799:../src/wolfcrypt/src/sp_int.c ****             t = m->dp[i] & mask;
6800:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, t);
6801:../src/wolfcrypt/src/sp_int.c ****             r->dp[i] = l;
6802:../src/wolfcrypt/src/sp_int.c ****             l = h;
6803:../src/wolfcrypt/src/sp_int.c ****             h = 0;
6804:../src/wolfcrypt/src/sp_int.c ****         #endif
6805:../src/wolfcrypt/src/sp_int.c ****         }
6806:../src/wolfcrypt/src/sp_int.c ****         r->used = i;
 5771                             		.loc 2 6806 17
 5772 01bf ED A5 0B                		mov.L	44[r10], r5
 5773 01c2 ED A4 03                		mov.L	12[r10], r4
 5774 01c5 E3 54                   		mov.L	r4, [r5]
 5775                             	.LBB33:
6807:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
6808:../src/wolfcrypt/src/sp_int.c ****         r->sign = MP_ZPOS;
6809:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_INT_NEGATIVE */
6810:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
 5776                             		.loc 2 6810 9
 5777 01c7 ED A5 0B                		mov.L	44[r10], r5
 5778 01ca EC 55                   		mov.L	[r5], r5
 5779 01cc 60 15                   		sub	#1, r5
 5780 01ce E7 A5 04                		mov.L	r5, 16[r10]
 5781 01d1 09                      		bra	.L403
 5782                             	.L405:
 5783                             		.loc 2 6810 9 is_stmt 0 discriminator 5
 5784 01d2 ED A5 04                		mov.L	16[r10], r5
 5785 01d5 60 15                   		sub	#1, r5
 5786 01d7 E7 A5 04                		mov.L	r5, 16[r10]
 5787                             	.L403:
 5788                             		.loc 2 6810 9 discriminator 1
 5789 01da ED A5 04                		mov.L	16[r10], r5
 5790 01dd 61 05                   		cmp	#0, r5
 5791 01df 29 11                   		blt	.L404
 5792                             		.loc 2 6810 9 discriminator 3
 5793 01e1 ED A4 0B                		mov.L	44[r10], r4
 5794 01e4 ED A5 04                		mov.L	16[r10], r5
 5795 01e7 62 25                   		add	#2, r5
 5796 01e9 FE 65 45                		mov.L	[r5,r4], r5
 5797 01ec 61 05                   		cmp	#0, r5
 5798 01ee 20 E4                   		beq	.L405
 5799                             	.L404:
 5800                             		.loc 2 6810 9 discriminator 6
 5801 01f0 ED A5 04                		mov.L	16[r10], r5
 5802 01f3 71 54 01                		add	#1, r5, r4
 5803 01f6 ED A5 0B                		mov.L	44[r10], r5
 5804 01f9 E3 54                   		mov.L	r4, [r5]
 5805                             	.L398:
 5806                             	.LBE33:
6811:../src/wolfcrypt/src/sp_int.c **** 
6812:../src/wolfcrypt/src/sp_int.c ****         if (0) {
6813:../src/wolfcrypt/src/sp_int.c ****             sp_print(r, "rms");
6814:../src/wolfcrypt/src/sp_int.c ****         }
6815:../src/wolfcrypt/src/sp_int.c ****     }
6816:../src/wolfcrypt/src/sp_int.c **** 
6817:../src/wolfcrypt/src/sp_int.c ****     return err;
 5807                             		.loc 2 6817 12 is_stmt 1
 5808 01fb EC A5                   		mov.L	[r10], r5
6818:../src/wolfcrypt/src/sp_int.c **** }
 5809                             		.loc 2 6818 1
 5810 01fd EF 51                   		mov.L	r5, r1
 5811 01ff 3F 6D 1E                		rtsd	#120, r6-r13
 5812                             	.LFE90:
 5814                             		.section	.text.sp_lshd,"ax",@progbits
 5815                             		.global	_sp_lshd
 5817                             	_sp_lshd:
 5818                             	.LFB91:
6819:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL && HAVE_ECC */
6820:../src/wolfcrypt/src/sp_int.c **** 
6821:../src/wolfcrypt/src/sp_int.c **** /********************
6822:../src/wolfcrypt/src/sp_int.c ****  * Shifting functoins
6823:../src/wolfcrypt/src/sp_int.c ****  ********************/
6824:../src/wolfcrypt/src/sp_int.c **** 
6825:../src/wolfcrypt/src/sp_int.c **** #if !defined(NO_DH) || defined(HAVE_ECC) || (defined(WC_RSA_BLINDING) && \
6826:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_RSA_VERIFY_ONLY))
6827:../src/wolfcrypt/src/sp_int.c **** /* Left shift the multi-precision number by a number of digits.
6828:../src/wolfcrypt/src/sp_int.c ****  *
6829:../src/wolfcrypt/src/sp_int.c ****  * @param  [in,out]  a  SP integer to shift.
6830:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]      s  Number of digits to shift.
6831:../src/wolfcrypt/src/sp_int.c ****  *
6832:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6833:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a is NULL or the result is too big to fit in an SP.
6834:../src/wolfcrypt/src/sp_int.c ****  */
6835:../src/wolfcrypt/src/sp_int.c **** int sp_lshd(sp_int* a, int s)
6836:../src/wolfcrypt/src/sp_int.c **** {
 5819                             		.loc 2 6836 1
 5820 0000 7E AA                   		push.l	r10
 5821                             	.LCFI104:
 5822 0002 71 0A F0                		add	#-16, r0, r10
 5823                             	.LCFI105:
 5824 0005 EF A0                   		mov.L	r10, r0
 5825 0007 E7 A1 02                		mov.L	r1, 8[r10]
 5826 000a E7 A2 03                		mov.L	r2, 12[r10]
6837:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 5827                             		.loc 2 6837 9
 5828 000d F8 A6 00                		mov.L	#0, [r10]
6838:../src/wolfcrypt/src/sp_int.c **** 
6839:../src/wolfcrypt/src/sp_int.c ****     if (a == NULL) {
 5829                             		.loc 2 6839 8
 5830 0010 ED A5 02                		mov.L	8[r10], r5
 5831 0013 61 05                   		cmp	#0, r5
 5832 0015 1C                      		bne	.L408
6840:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 5833                             		.loc 2 6840 13
 5834 0016 F8 A6 FD                		mov.L	#-3, [r10]
 5835                             	.L408:
6841:../src/wolfcrypt/src/sp_int.c ****     }
6842:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (a->used + s > a->size)) {
 5836                             		.loc 2 6842 8
 5837 0019 EC A5                   		mov.L	[r10], r5
 5838 001b 61 05                   		cmp	#0, r5
 5839 001d 21 17                   		bne	.L409
 5840                             		.loc 2 6842 31 discriminator 1
 5841 001f ED A5 02                		mov.L	8[r10], r5
 5842 0022 EC 55                   		mov.L	[r5], r5
 5843                             		.loc 2 6842 38 discriminator 1
 5844 0024 06 89 A5 03             		add	12[r10].L, r5
 5845                             		.loc 2 6842 45 discriminator 1
 5846 0028 ED A4 02                		mov.L	8[r10], r4
 5847 002b A8 4C                   		mov.L	4[r4], r4
 5848                             		.loc 2 6842 26 discriminator 1
 5849 002d 47 45                   		cmp	r4, r5
 5850 002f 2B 05                   		ble	.L409
6843:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 5851                             		.loc 2 6843 13
 5852 0031 F8 A6 FD                		mov.L	#-3, [r10]
 5853                             	.L409:
6844:../src/wolfcrypt/src/sp_int.c ****     }
6845:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 5854                             		.loc 2 6845 8
 5855 0034 EC A5                   		mov.L	[r10], r5
 5856 0036 61 05                   		cmp	#0, r5
 5857 0038 21 7D                   		bne	.L410
6846:../src/wolfcrypt/src/sp_int.c ****         XMEMMOVE(a->dp + s, a->dp, a->used * sizeof(sp_int_digit));
 5858                             		.loc 2 6846 9
 5859 003a ED A5 02                		mov.L	8[r10], r5
 5860 003d 71 54 08                		add	#8, r5, r4
 5861 0040 ED A5 03                		mov.L	12[r10], r5
 5862 0043 6C 25                   		shll	#2, r5
 5863 0045 4B 54                   		add	r5, r4
 5864 0047 ED A5 02                		mov.L	8[r10], r5
 5865 004a 71 52 08                		add	#8, r5, r2
 5866 004d ED A5 02                		mov.L	8[r10], r5
 5867 0050 EC 55                   		mov.L	[r5], r5
 5868 0052 6C 25                   		shll	#2, r5
 5869 0054 EF 53                   		mov.L	r5, r3
 5870 0056 EF 41                   		mov.L	r4, r1
 5871 0058 05 00 00 00             		bsr	_memmove
6847:../src/wolfcrypt/src/sp_int.c ****         a->used += s;
 5872                             		.loc 2 6847 17
 5873 005c ED A5 02                		mov.L	8[r10], r5
 5874 005f EC 55                   		mov.L	[r5], r5
 5875 0061 EF 54                   		mov.L	r5, r4
 5876 0063 06 89 A4 03             		add	12[r10].L, r4
 5877 0067 ED A5 02                		mov.L	8[r10], r5
 5878 006a E3 54                   		mov.L	r4, [r5]
6848:../src/wolfcrypt/src/sp_int.c ****         XMEMSET(a->dp, 0, s * sizeof(sp_int_digit));
 5879                             		.loc 2 6848 9
 5880 006c ED A5 02                		mov.L	8[r10], r5
 5881 006f 71 54 08                		add	#8, r5, r4
 5882 0072 ED A5 03                		mov.L	12[r10], r5
 5883 0075 6C 25                   		shll	#2, r5
 5884 0077 EF 53                   		mov.L	r5, r3
 5885 0079 66 02                   		mov.L	#0, r2
 5886 007b EF 41                   		mov.L	r4, r1
 5887 007d 05 00 00 00             		bsr	_memset
 5888                             	.LBB34:
6849:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(a);
 5889                             		.loc 2 6849 9
 5890 0081 ED A5 02                		mov.L	8[r10], r5
 5891 0084 EC 55                   		mov.L	[r5], r5
 5892 0086 60 15                   		sub	#1, r5
 5893 0088 E7 A5 01                		mov.L	r5, 4[r10]
 5894 008b 09                      		bra	.L411
 5895                             	.L413:
 5896                             		.loc 2 6849 9 is_stmt 0 discriminator 5
 5897 008c ED A5 01                		mov.L	4[r10], r5
 5898 008f 60 15                   		sub	#1, r5
 5899 0091 E7 A5 01                		mov.L	r5, 4[r10]
 5900                             	.L411:
 5901                             		.loc 2 6849 9 discriminator 1
 5902 0094 ED A5 01                		mov.L	4[r10], r5
 5903 0097 61 05                   		cmp	#0, r5
 5904 0099 29 11                   		blt	.L412
 5905                             		.loc 2 6849 9 discriminator 3
 5906 009b ED A4 02                		mov.L	8[r10], r4
 5907 009e ED A5 01                		mov.L	4[r10], r5
 5908 00a1 62 25                   		add	#2, r5
 5909 00a3 FE 65 45                		mov.L	[r5,r4], r5
 5910 00a6 61 05                   		cmp	#0, r5
 5911 00a8 20 E4                   		beq	.L413
 5912                             	.L412:
 5913                             		.loc 2 6849 9 discriminator 6
 5914 00aa ED A5 01                		mov.L	4[r10], r5
 5915 00ad 71 54 01                		add	#1, r5, r4
 5916 00b0 ED A5 02                		mov.L	8[r10], r5
 5917 00b3 E3 54                   		mov.L	r4, [r5]
 5918                             	.L410:
 5919                             	.LBE34:
6850:../src/wolfcrypt/src/sp_int.c ****     }
6851:../src/wolfcrypt/src/sp_int.c **** 
6852:../src/wolfcrypt/src/sp_int.c ****     return err;
 5920                             		.loc 2 6852 12 is_stmt 1
 5921 00b5 EC A5                   		mov.L	[r10], r5
6853:../src/wolfcrypt/src/sp_int.c **** }
 5922                             		.loc 2 6853 1
 5923 00b7 EF 51                   		mov.L	r5, r1
 5924 00b9 3F AA 05                		rtsd	#20, r10-r10
 5925                             	.LFE91:
 5927                             		.section	.text.sp_lshb,"ax",@progbits
 5929                             	_sp_lshb:
 5930                             	.LFB92:
6854:../src/wolfcrypt/src/sp_int.c **** #endif
6855:../src/wolfcrypt/src/sp_int.c **** 
6856:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || !defined(NO_DH) || defined(HAVE_ECC) || \
6857:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY) && \
6858:../src/wolfcrypt/src/sp_int.c ****      !defined(WOLFSSL_RSA_PUBLIC_ONLY))
6859:../src/wolfcrypt/src/sp_int.c **** /* Left shift the multi-precision number by n bits.
6860:../src/wolfcrypt/src/sp_int.c ****  * Bits may be larger than the word size.
6861:../src/wolfcrypt/src/sp_int.c ****  *
6862:../src/wolfcrypt/src/sp_int.c ****  * @param  [in,out]  a  SP integer to shift.
6863:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]      n  Number of bits to shift left.
6864:../src/wolfcrypt/src/sp_int.c ****  *
6865:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6866:../src/wolfcrypt/src/sp_int.c ****  */
6867:../src/wolfcrypt/src/sp_int.c **** static int sp_lshb(sp_int* a, int n)
6868:../src/wolfcrypt/src/sp_int.c **** {
 5931                             		.loc 2 6868 1
 5932 0000 6E 7A                   		pushm	r7-r10
 5933                             	.LCFI106:
 5934 0002 71 0A E8                		add	#-24, r0, r10
 5935                             	.LCFI107:
 5936 0005 EF A0                   		mov.L	r10, r0
 5937 0007 E7 A1 04                		mov.L	r1, 16[r10]
 5938 000a E7 A2 05                		mov.L	r2, 20[r10]
6869:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 5939                             		.loc 2 6869 9
 5940 000d F8 A6 00                		mov.L	#0, [r10]
6870:../src/wolfcrypt/src/sp_int.c **** 
6871:../src/wolfcrypt/src/sp_int.c ****     if (a->used != 0) {
 5941                             		.loc 2 6871 10
 5942 0010 ED A5 04                		mov.L	16[r10], r5
 5943 0013 EC 55                   		mov.L	[r5], r5
 5944                             		.loc 2 6871 8
 5945 0015 61 05                   		cmp	#0, r5
 5946 0017 3A 83 01                		beq	.L416
 5947                             	.LBB35:
6872:../src/wolfcrypt/src/sp_int.c ****         int s = n >> SP_WORD_SHIFT;
 5948                             		.loc 2 6872 13
 5949 001a ED A5 05                		mov.L	20[r10], r5
 5950 001d 6A 55                   		shar	#5, r5
 5951 001f E7 A5 02                		mov.L	r5, 8[r10]
6873:../src/wolfcrypt/src/sp_int.c ****         int i;
6874:../src/wolfcrypt/src/sp_int.c **** 
6875:../src/wolfcrypt/src/sp_int.c ****         if (a->used + s >= a->size) {
 5952                             		.loc 2 6875 14
 5953 0022 ED A5 04                		mov.L	16[r10], r5
 5954 0025 EC 55                   		mov.L	[r5], r5
 5955                             		.loc 2 6875 21
 5956 0027 06 89 A5 02             		add	8[r10].L, r5
 5957                             		.loc 2 6875 29
 5958 002b ED A4 04                		mov.L	16[r10], r4
 5959 002e A8 4C                   		mov.L	4[r4], r4
 5960                             		.loc 2 6875 12
 5961 0030 47 45                   		cmp	r4, r5
 5962 0032 29 05                   		blt	.L417
6876:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
 5963                             		.loc 2 6876 17
 5964 0034 F8 A6 FD                		mov.L	#-3, [r10]
 5965                             	.L417:
6877:../src/wolfcrypt/src/sp_int.c ****         }
6878:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 5966                             		.loc 2 6878 12
 5967 0037 EC A5                   		mov.L	[r10], r5
 5968 0039 61 05                   		cmp	#0, r5
 5969 003b 3B 5F 01                		bne	.L416
6879:../src/wolfcrypt/src/sp_int.c ****             n &= SP_WORD_MASK;
 5970                             		.loc 2 6879 15
 5971 003e ED A5 05                		mov.L	20[r10], r5
 5972 0041 75 25 1F                		and	#31, r5
 5973 0044 E7 A5 05                		mov.L	r5, 20[r10]
6880:../src/wolfcrypt/src/sp_int.c ****             if (n != 0) {
 5974                             		.loc 2 6880 16
 5975 0047 ED A5 05                		mov.L	20[r10], r5
 5976 004a 61 05                   		cmp	#0, r5
 5977 004c 3A ED 00                		beq	.L418
 5978                             	.LBB36:
6881:../src/wolfcrypt/src/sp_int.c ****                 sp_int_digit v;
6882:../src/wolfcrypt/src/sp_int.c **** 
6883:../src/wolfcrypt/src/sp_int.c ****                 v = a->dp[a->used - 1] >> (SP_WORD_SIZE - n);
 5979                             		.loc 2 6883 28
 5980 004f ED A5 04                		mov.L	16[r10], r5
 5981 0052 EC 55                   		mov.L	[r5], r5
 5982                             		.loc 2 6883 35
 5983 0054 60 15                   		sub	#1, r5
 5984                             		.loc 2 6883 26
 5985 0056 ED A4 04                		mov.L	16[r10], r4
 5986 0059 62 25                   		add	#2, r5
 5987 005b FE 65 44                		mov.L	[r5,r4], r4
 5988                             		.loc 2 6883 57
 5989 005e 75 43 20                		mov.L	#32, r3
 5990 0061 ED A5 05                		mov.L	20[r10], r5
 5991 0064 FF 05 53                		sub	r5, r3, r5
 5992                             		.loc 2 6883 19
 5993 0067 EF 47                   		mov.L	r4, r7
 5994 0069 FD 60 57                		shlr	r5, r7
 5995 006c EF 75                   		mov.L	r7, r5
 5996 006e E7 A5 03                		mov.L	r5, 12[r10]
6884:../src/wolfcrypt/src/sp_int.c ****                 a->dp[a->used - 1 + s] = a->dp[a->used - 1] << n;
 5997                             		.loc 2 6884 49
 5998 0071 ED A5 04                		mov.L	16[r10], r5
 5999 0074 EC 55                   		mov.L	[r5], r5
 6000                             		.loc 2 6884 56
 6001 0076 60 15                   		sub	#1, r5
 6002                             		.loc 2 6884 47
 6003 0078 ED A4 04                		mov.L	16[r10], r4
 6004 007b 62 25                   		add	#2, r5
 6005 007d FE 65 43                		mov.L	[r5,r4], r3
 6006                             		.loc 2 6884 24
 6007 0080 ED A5 04                		mov.L	16[r10], r5
 6008 0083 EC 55                   		mov.L	[r5], r5
 6009                             		.loc 2 6884 31
 6010 0085 60 15                   		sub	#1, r5
 6011                             		.loc 2 6884 35
 6012 0087 06 89 A5 02             		add	8[r10].L, r5
 6013                             		.loc 2 6884 61
 6014 008b ED A4 05                		mov.L	20[r10], r4
 6015 008e FD 62 43                		shll	r4, r3
 6016                             		.loc 2 6884 40
 6017 0091 ED A4 04                		mov.L	16[r10], r4
 6018 0094 62 25                   		add	#2, r5
 6019 0096 FE 25 43                		mov.L	r3, [r5,r4]
6885:../src/wolfcrypt/src/sp_int.c ****                 for (i = a->used - 2; i >= 0; i--) {
 6020                             		.loc 2 6885 27
 6021 0099 ED A5 04                		mov.L	16[r10], r5
 6022 009c EC 55                   		mov.L	[r5], r5
 6023                             		.loc 2 6885 24
 6024 009e 60 25                   		sub	#2, r5
 6025 00a0 E7 A5 01                		mov.L	r5, 4[r10]
 6026                             		.loc 2 6885 17
 6027 00a3 2E 65                   		bra	.L419
 6028                             	.L420:
6886:../src/wolfcrypt/src/sp_int.c ****                     a->dp[i + 1 + s] |= a->dp[i] >> (SP_WORD_SIZE - n);
 6029                             		.loc 2 6886 38 discriminator 3
 6030 00a5 ED A5 01                		mov.L	4[r10], r5
 6031 00a8 62 15                   		add	#1, r5
 6032 00aa 06 89 A5 02             		add	8[r10].L, r5
 6033 00ae ED A4 04                		mov.L	16[r10], r4
 6034 00b1 62 25                   		add	#2, r5
 6035 00b3 FE 65 43                		mov.L	[r5,r4], r3
 6036                             		.loc 2 6886 46 discriminator 3
 6037 00b6 ED A4 04                		mov.L	16[r10], r4
 6038 00b9 ED A5 01                		mov.L	4[r10], r5
 6039 00bc 62 25                   		add	#2, r5
 6040 00be FE 65 44                		mov.L	[r5,r4], r4
 6041                             		.loc 2 6886 67 discriminator 3
 6042 00c1 75 42 20                		mov.L	#32, r2
 6043 00c4 ED A5 05                		mov.L	20[r10], r5
 6044 00c7 FF 05 52                		sub	r5, r2, r5
 6045                             		.loc 2 6886 50 discriminator 3
 6046 00ca FD 60 54                		shlr	r5, r4
 6047                             		.loc 2 6886 38 discriminator 3
 6048 00cd ED A5 01                		mov.L	4[r10], r5
 6049 00d0 62 15                   		add	#1, r5
 6050 00d2 06 89 A5 02             		add	8[r10].L, r5
 6051 00d6 57 43                   		or	r4, r3
 6052 00d8 ED A4 04                		mov.L	16[r10], r4
 6053 00db 62 25                   		add	#2, r5
 6054 00dd FE 25 43                		mov.L	r3, [r5,r4]
6887:../src/wolfcrypt/src/sp_int.c ****                     a->dp[i     + s] = a->dp[i] << n;
 6055                             		.loc 2 6887 45 discriminator 3
 6056 00e0 ED A4 04                		mov.L	16[r10], r4
 6057 00e3 ED A5 01                		mov.L	4[r10], r5
 6058 00e6 62 25                   		add	#2, r5
 6059 00e8 FE 65 43                		mov.L	[r5,r4], r3
 6060                             		.loc 2 6887 33 discriminator 3
 6061 00eb ED A5 01                		mov.L	4[r10], r5
 6062 00ee 06 89 A5 02             		add	8[r10].L, r5
 6063                             		.loc 2 6887 49 discriminator 3
 6064 00f2 ED A4 05                		mov.L	20[r10], r4
 6065 00f5 FD 62 43                		shll	r4, r3
 6066                             		.loc 2 6887 38 discriminator 3
 6067 00f8 ED A4 04                		mov.L	16[r10], r4
 6068 00fb 62 25                   		add	#2, r5
 6069 00fd FE 25 43                		mov.L	r3, [r5,r4]
6885:../src/wolfcrypt/src/sp_int.c ****                 for (i = a->used - 2; i >= 0; i--) {
 6070                             		.loc 2 6885 48 discriminator 3
 6071 0100 ED A5 01                		mov.L	4[r10], r5
 6072 0103 60 15                   		sub	#1, r5
 6073 0105 E7 A5 01                		mov.L	r5, 4[r10]
 6074                             	.L419:
6885:../src/wolfcrypt/src/sp_int.c ****                 for (i = a->used - 2; i >= 0; i--) {
 6075                             		.loc 2 6885 17 discriminator 1
 6076 0108 ED A5 01                		mov.L	4[r10], r5
 6077 010b 61 05                   		cmp	#0, r5
 6078 010d 28 98                   		bge	.L420
6888:../src/wolfcrypt/src/sp_int.c ****                 }
6889:../src/wolfcrypt/src/sp_int.c ****                 if (v != 0) {
 6079                             		.loc 2 6889 20
 6080 010f ED A5 03                		mov.L	12[r10], r5
 6081 0112 61 05                   		cmp	#0, r5
 6082 0114 20 61                   		beq	.L422
6890:../src/wolfcrypt/src/sp_int.c ****                     a->dp[a->used + s] = v;
 6083                             		.loc 2 6890 28
 6084 0116 ED A5 04                		mov.L	16[r10], r5
 6085 0119 EC 55                   		mov.L	[r5], r5
 6086                             		.loc 2 6890 35
 6087 011b 06 89 A5 02             		add	8[r10].L, r5
 6088                             		.loc 2 6890 40
 6089 011f ED A4 04                		mov.L	16[r10], r4
 6090 0122 62 25                   		add	#2, r5
 6091 0124 ED A3 03                		mov.L	12[r10], r3
 6092 0127 FE 25 43                		mov.L	r3, [r5,r4]
6891:../src/wolfcrypt/src/sp_int.c ****                     a->used++;
 6093                             		.loc 2 6891 22
 6094 012a ED A5 04                		mov.L	16[r10], r5
 6095 012d EC 55                   		mov.L	[r5], r5
 6096                             		.loc 2 6891 28
 6097 012f 71 54 01                		add	#1, r5, r4
 6098 0132 ED A5 04                		mov.L	16[r10], r5
 6099 0135 E3 54                   		mov.L	r4, [r5]
 6100 0137 2E 3E                   		bra	.L422
 6101                             	.L418:
 6102                             	.LBE36:
6892:../src/wolfcrypt/src/sp_int.c ****                 }
6893:../src/wolfcrypt/src/sp_int.c ****             }
6894:../src/wolfcrypt/src/sp_int.c ****             else if (s > 0) {
 6103                             		.loc 2 6894 21
 6104 0139 ED A5 02                		mov.L	8[r10], r5
 6105 013c 61 05                   		cmp	#0, r5
 6106 013e 2B 37                   		ble	.L422
6895:../src/wolfcrypt/src/sp_int.c ****                 for (i = a->used - 1; i >= 0; i--) {
 6107                             		.loc 2 6895 27
 6108 0140 ED A5 04                		mov.L	16[r10], r5
 6109 0143 EC 55                   		mov.L	[r5], r5
 6110                             		.loc 2 6895 24
 6111 0145 60 15                   		sub	#1, r5
 6112 0147 E7 A5 01                		mov.L	r5, 4[r10]
 6113                             		.loc 2 6895 17
 6114 014a 2E 24                   		bra	.L423
 6115                             	.L424:
6896:../src/wolfcrypt/src/sp_int.c ****                     a->dp[i + s] = a->dp[i];
 6116                             		.loc 2 6896 29 discriminator 3
 6117 014c ED A5 01                		mov.L	4[r10], r5
 6118 014f 06 89 A5 02             		add	8[r10].L, r5
 6119                             		.loc 2 6896 41 discriminator 3
 6120 0153 ED A3 04                		mov.L	16[r10], r3
 6121 0156 ED A4 01                		mov.L	4[r10], r4
 6122 0159 62 24                   		add	#2, r4
 6123 015b FE 64 33                		mov.L	[r4,r3], r3
 6124                             		.loc 2 6896 34 discriminator 3
 6125 015e ED A4 04                		mov.L	16[r10], r4
 6126 0161 62 25                   		add	#2, r5
 6127 0163 FE 25 43                		mov.L	r3, [r5,r4]
6895:../src/wolfcrypt/src/sp_int.c ****                 for (i = a->used - 1; i >= 0; i--) {
 6128                             		.loc 2 6895 48 discriminator 3
 6129 0166 ED A5 01                		mov.L	4[r10], r5
 6130 0169 60 15                   		sub	#1, r5
 6131 016b E7 A5 01                		mov.L	r5, 4[r10]
 6132                             	.L423:
6895:../src/wolfcrypt/src/sp_int.c ****                 for (i = a->used - 1; i >= 0; i--) {
 6133                             		.loc 2 6895 17 discriminator 1
 6134 016e ED A5 01                		mov.L	4[r10], r5
 6135 0171 61 05                   		cmp	#0, r5
 6136 0173 28 D9                   		bge	.L424
 6137                             		.balign 8,3,1
 6138                             	.L422:
6897:../src/wolfcrypt/src/sp_int.c ****                 }
6898:../src/wolfcrypt/src/sp_int.c ****             }
6899:../src/wolfcrypt/src/sp_int.c ****             a->used += s;
 6139                             		.loc 2 6899 21
 6140 0175 ED A5 04                		mov.L	16[r10], r5
 6141 0178 EC 55                   		mov.L	[r5], r5
 6142 017a EF 54                   		mov.L	r5, r4
 6143 017c 06 89 A4 02             		add	8[r10].L, r4
 6144 0180 ED A5 04                		mov.L	16[r10], r5
 6145 0183 E3 54                   		mov.L	r4, [r5]
6900:../src/wolfcrypt/src/sp_int.c ****             XMEMSET(a->dp, 0, SP_WORD_SIZEOF * s);
 6146                             		.loc 2 6900 13
 6147 0185 ED A5 04                		mov.L	16[r10], r5
 6148 0188 71 54 08                		add	#8, r5, r4
 6149 018b ED A5 02                		mov.L	8[r10], r5
 6150 018e 6C 25                   		shll	#2, r5
 6151 0190 EF 53                   		mov.L	r5, r3
 6152 0192 66 02                   		mov.L	#0, r2
 6153 0194 EF 41                   		mov.L	r4, r1
 6154 0196 05 00 00 00             		bsr	_memset
 6155                             	.L416:
 6156                             	.LBE35:
6901:../src/wolfcrypt/src/sp_int.c ****         }
6902:../src/wolfcrypt/src/sp_int.c ****     }
6903:../src/wolfcrypt/src/sp_int.c **** 
6904:../src/wolfcrypt/src/sp_int.c ****     return err;
 6157                             		.loc 2 6904 12
 6158 019a EC A5                   		mov.L	[r10], r5
6905:../src/wolfcrypt/src/sp_int.c **** }
 6159                             		.loc 2 6905 1
 6160 019c EF 51                   		mov.L	r5, r1
 6161 019e 3F 7A 0A                		rtsd	#40, r7-r10
 6162                             	.LFE92:
 6164 01a1 FD 70 40 00 00 00 80    		.section	.text.sp_rshd,"ax",@progbits
 6165                             		.global	_sp_rshd
 6167                             	_sp_rshd:
 6168                             	.LFB93:
6906:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || !NO_DH || HAVE_ECC ||
6907:../src/wolfcrypt/src/sp_int.c ****         * (!NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY) */
6908:../src/wolfcrypt/src/sp_int.c **** 
6909:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
6910:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_DH) || defined(HAVE_ECC) || \
6911:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY))
6912:../src/wolfcrypt/src/sp_int.c **** /* Shift a right by n digits into r: r = a >> (n * SP_WORD_SIZE)
6913:../src/wolfcrypt/src/sp_int.c ****  *
6914:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to shift.
6915:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   n  Number of digits to shift.
6916:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to store result in.
6917:../src/wolfcrypt/src/sp_int.c ****  */
6918:../src/wolfcrypt/src/sp_int.c **** void sp_rshd(sp_int* a, int c)
6919:../src/wolfcrypt/src/sp_int.c **** {
 6169                             		.loc 2 6919 1
 6170 0000 7E AA                   		push.l	r10
 6171                             	.LCFI108:
 6172 0002 71 0A F0                		add	#-16, r0, r10
 6173                             	.LCFI109:
 6174 0005 EF A0                   		mov.L	r10, r0
 6175 0007 E7 A1 02                		mov.L	r1, 8[r10]
 6176 000a E7 A2 03                		mov.L	r2, 12[r10]
6920:../src/wolfcrypt/src/sp_int.c ****     if (a != NULL) {
 6177                             		.loc 2 6920 8
 6178 000d ED A5 02                		mov.L	8[r10], r5
 6179 0010 61 05                   		cmp	#0, r5
 6180 0012 20 5F                   		beq	.L431
 6181                             	.LBB37:
6921:../src/wolfcrypt/src/sp_int.c ****         int i;
6922:../src/wolfcrypt/src/sp_int.c ****         int j;
6923:../src/wolfcrypt/src/sp_int.c **** 
6924:../src/wolfcrypt/src/sp_int.c ****         if (c >= a->used) {
 6182                             		.loc 2 6924 19
 6183 0014 ED A5 02                		mov.L	8[r10], r5
 6184 0017 EC 55                   		mov.L	[r5], r5
 6185                             		.loc 2 6924 12
 6186 0019 ED A4 03                		mov.L	12[r10], r4
 6187 001c 47 54                   		cmp	r5, r4
 6188 001e 29 0B                   		blt	.L428
6925:../src/wolfcrypt/src/sp_int.c ****             _sp_zero(a);
 6189                             		.loc 2 6925 13
 6190 0020 ED A1 02                		mov.L	8[r10], r1
 6191 0023 05 00 00 00             		bsr	__sp_zero
 6192                             	.LBE37:
6926:../src/wolfcrypt/src/sp_int.c ****         }
6927:../src/wolfcrypt/src/sp_int.c ****         else {
6928:../src/wolfcrypt/src/sp_int.c ****             for (i = c, j = 0; i < a->used; i++, j++) {
6929:../src/wolfcrypt/src/sp_int.c ****                 a->dp[j] = a->dp[i];
6930:../src/wolfcrypt/src/sp_int.c ****             }
6931:../src/wolfcrypt/src/sp_int.c ****             a->used -= c;
6932:../src/wolfcrypt/src/sp_int.c ****         }
6933:../src/wolfcrypt/src/sp_int.c ****     }
6934:../src/wolfcrypt/src/sp_int.c **** }
 6193                             		.loc 2 6934 1
 6194 0027 2E 4A                   		bra	.L431
 6195                             	.L428:
 6196                             	.LBB38:
6928:../src/wolfcrypt/src/sp_int.c ****                 a->dp[j] = a->dp[i];
 6197                             		.loc 2 6928 20
 6198 0029 ED A5 03                		mov.L	12[r10], r5
 6199 002c E3 A5                   		mov.L	r5, [r10]
6928:../src/wolfcrypt/src/sp_int.c ****                 a->dp[j] = a->dp[i];
 6200                             		.loc 2 6928 27
 6201 002e F9 A6 01 00             		mov.L	#0, 4[r10]
6928:../src/wolfcrypt/src/sp_int.c ****                 a->dp[j] = a->dp[i];
 6202                             		.loc 2 6928 13
 6203 0032 2E 25                   		bra	.L429
 6204                             	.L430:
6929:../src/wolfcrypt/src/sp_int.c ****             }
 6205                             		.loc 2 6929 33 discriminator 3
 6206 0034 ED A4 02                		mov.L	8[r10], r4
 6207 0037 EC A5                   		mov.L	[r10], r5
 6208 0039 62 25                   		add	#2, r5
 6209 003b FE 65 43                		mov.L	[r5,r4], r3
6929:../src/wolfcrypt/src/sp_int.c ****             }
 6210                             		.loc 2 6929 26 discriminator 3
 6211 003e ED A4 02                		mov.L	8[r10], r4
 6212 0041 ED A5 01                		mov.L	4[r10], r5
 6213 0044 62 25                   		add	#2, r5
 6214 0046 FE 25 43                		mov.L	r3, [r5,r4]
6928:../src/wolfcrypt/src/sp_int.c ****                 a->dp[j] = a->dp[i];
 6215                             		.loc 2 6928 46 discriminator 3
 6216 0049 EC A5                   		mov.L	[r10], r5
 6217 004b 62 15                   		add	#1, r5
 6218 004d E3 A5                   		mov.L	r5, [r10]
6928:../src/wolfcrypt/src/sp_int.c ****                 a->dp[j] = a->dp[i];
 6219                             		.loc 2 6928 51 discriminator 3
 6220 004f ED A5 01                		mov.L	4[r10], r5
 6221 0052 62 15                   		add	#1, r5
 6222 0054 E7 A5 01                		mov.L	r5, 4[r10]
 6223                             	.L429:
6928:../src/wolfcrypt/src/sp_int.c ****                 a->dp[j] = a->dp[i];
 6224                             		.loc 2 6928 37 discriminator 1
 6225 0057 ED A5 02                		mov.L	8[r10], r5
 6226 005a EC 55                   		mov.L	[r5], r5
6928:../src/wolfcrypt/src/sp_int.c ****                 a->dp[j] = a->dp[i];
 6227                             		.loc 2 6928 13 discriminator 1
 6228 005c EC A4                   		mov.L	[r10], r4
 6229 005e 47 54                   		cmp	r5, r4
 6230 0060 29 D4                   		blt	.L430
6931:../src/wolfcrypt/src/sp_int.c ****         }
 6231                             		.loc 2 6931 21
 6232 0062 ED A5 02                		mov.L	8[r10], r5
 6233 0065 EC 54                   		mov.L	[r5], r4
 6234 0067 ED A5 03                		mov.L	12[r10], r5
 6235 006a 43 54                   		sub	r5, r4
 6236 006c ED A5 02                		mov.L	8[r10], r5
 6237 006f E3 54                   		mov.L	r4, [r5]
 6238                             	.L431:
 6239                             	.LBE38:
 6240                             		.loc 2 6934 1
 6241 0071 03                      		nop
 6242 0072 3F AA 05                		rtsd	#20, r10-r10
 6243                             	.LFE93:
 6245                             		.section	.text.sp_rshb,"ax",@progbits
 6246                             		.global	_sp_rshb
 6248                             	_sp_rshb:
 6249                             	.LFB94:
6935:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY) || !NO_DH ||
6936:../src/wolfcrypt/src/sp_int.c ****         * HAVE_ECC || (!NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY) */
6937:../src/wolfcrypt/src/sp_int.c **** 
6938:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || !defined(NO_DH) || defined(HAVE_ECC) || \
6939:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
6940:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_HAVE_SP_DH)
6941:../src/wolfcrypt/src/sp_int.c **** /* Shift a right by n bits into r: r = a >> n
6942:../src/wolfcrypt/src/sp_int.c ****  *
6943:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to shift.
6944:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   n  Number of bits to shift.
6945:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to store result in.
6946:../src/wolfcrypt/src/sp_int.c ****  */
6947:../src/wolfcrypt/src/sp_int.c **** void sp_rshb(sp_int* a, int n, sp_int* r)
6948:../src/wolfcrypt/src/sp_int.c **** {
 6250                             		.loc 2 6948 1
 6251 0000 6E 7A                   		pushm	r7-r10
 6252                             	.LCFI110:
 6253 0002 71 0A E8                		add	#-24, r0, r10
 6254                             	.LCFI111:
 6255 0005 EF A0                   		mov.L	r10, r0
 6256 0007 E7 A1 03                		mov.L	r1, 12[r10]
 6257 000a E7 A2 04                		mov.L	r2, 16[r10]
 6258 000d E7 A3 05                		mov.L	r3, 20[r10]
6949:../src/wolfcrypt/src/sp_int.c ****     int i = n >> SP_WORD_SHIFT;
 6259                             		.loc 2 6949 9
 6260 0010 ED A5 04                		mov.L	16[r10], r5
 6261 0013 6A 55                   		shar	#5, r5
 6262 0015 E3 A5                   		mov.L	r5, [r10]
6950:../src/wolfcrypt/src/sp_int.c **** 
6951:../src/wolfcrypt/src/sp_int.c ****     if (i >= a->used) {
 6263                             		.loc 2 6951 15
 6264 0017 ED A5 03                		mov.L	12[r10], r5
 6265 001a EC 55                   		mov.L	[r5], r5
 6266                             		.loc 2 6951 8
 6267 001c EC A4                   		mov.L	[r10], r4
 6268 001e 47 54                   		cmp	r5, r4
 6269 0020 29 0C                   		blt	.L433
6952:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(r);
 6270                             		.loc 2 6952 9
 6271 0022 ED A1 05                		mov.L	20[r10], r1
 6272 0025 05 00 00 00             		bsr	__sp_zero
6953:../src/wolfcrypt/src/sp_int.c ****     }
6954:../src/wolfcrypt/src/sp_int.c ****     else {
6955:../src/wolfcrypt/src/sp_int.c ****         int j;
6956:../src/wolfcrypt/src/sp_int.c **** 
6957:../src/wolfcrypt/src/sp_int.c ****         n &= SP_WORD_SIZE - 1;
6958:../src/wolfcrypt/src/sp_int.c ****         if (n == 0) {
6959:../src/wolfcrypt/src/sp_int.c ****             for (j = 0; i < a->used; i++, j++)
6960:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = a->dp[i];
6961:../src/wolfcrypt/src/sp_int.c ****             r->used = j;
6962:../src/wolfcrypt/src/sp_int.c ****         }
6963:../src/wolfcrypt/src/sp_int.c ****         else if (n > 0) {
6964:../src/wolfcrypt/src/sp_int.c ****             for (j = 0; i < a->used-1; i++, j++)
6965:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = (a->dp[i] >> n) | (a->dp[i+1] << (SP_WORD_SIZE - n));
6966:../src/wolfcrypt/src/sp_int.c ****             r->dp[j] = a->dp[i] >> n;
6967:../src/wolfcrypt/src/sp_int.c ****             r->used = j + 1;
6968:../src/wolfcrypt/src/sp_int.c ****             sp_clamp(r);
6969:../src/wolfcrypt/src/sp_int.c ****         }
6970:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
6971:../src/wolfcrypt/src/sp_int.c ****         if (sp_iszero(r)) {
6972:../src/wolfcrypt/src/sp_int.c ****             r->sign = MP_ZPOS;
6973:../src/wolfcrypt/src/sp_int.c ****         }
6974:../src/wolfcrypt/src/sp_int.c ****         else {
6975:../src/wolfcrypt/src/sp_int.c ****             r->sign = a->sign;
6976:../src/wolfcrypt/src/sp_int.c ****         }
6977:../src/wolfcrypt/src/sp_int.c **** #endif
6978:../src/wolfcrypt/src/sp_int.c ****     }
6979:../src/wolfcrypt/src/sp_int.c **** }
 6273                             		.loc 2 6979 1
 6274 0029 38 13 01                		bra	.L443
 6275                             	.L433:
 6276                             	.LBB39:
6957:../src/wolfcrypt/src/sp_int.c ****         if (n == 0) {
 6277                             		.loc 2 6957 11
 6278 002c ED A5 04                		mov.L	16[r10], r5
 6279 002f 75 25 1F                		and	#31, r5
 6280 0032 E7 A5 04                		mov.L	r5, 16[r10]
6958:../src/wolfcrypt/src/sp_int.c ****             for (j = 0; i < a->used; i++, j++)
 6281                             		.loc 2 6958 12
 6282 0035 ED A5 04                		mov.L	16[r10], r5
 6283 0038 61 05                   		cmp	#0, r5
 6284 003a 21 41                   		bne	.L435
6959:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = a->dp[i];
 6285                             		.loc 2 6959 20
 6286 003c F9 A6 01 00             		mov.L	#0, 4[r10]
6959:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = a->dp[i];
 6287                             		.loc 2 6959 13
 6288 0040 2E 25                   		bra	.L436
 6289                             	.L437:
6960:../src/wolfcrypt/src/sp_int.c ****             r->used = j;
 6290                             		.loc 2 6960 33 discriminator 3
 6291 0042 ED A4 03                		mov.L	12[r10], r4
 6292 0045 EC A5                   		mov.L	[r10], r5
 6293 0047 62 25                   		add	#2, r5
 6294 0049 FE 65 43                		mov.L	[r5,r4], r3
6960:../src/wolfcrypt/src/sp_int.c ****             r->used = j;
 6295                             		.loc 2 6960 26 discriminator 3
 6296 004c ED A4 05                		mov.L	20[r10], r4
 6297 004f ED A5 01                		mov.L	4[r10], r5
 6298 0052 62 25                   		add	#2, r5
 6299 0054 FE 25 43                		mov.L	r3, [r5,r4]
6959:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = a->dp[i];
 6300                             		.loc 2 6959 39 discriminator 3
 6301 0057 EC A5                   		mov.L	[r10], r5
 6302 0059 62 15                   		add	#1, r5
 6303 005b E3 A5                   		mov.L	r5, [r10]
6959:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = a->dp[i];
 6304                             		.loc 2 6959 44 discriminator 3
 6305 005d ED A5 01                		mov.L	4[r10], r5
 6306 0060 62 15                   		add	#1, r5
 6307 0062 E7 A5 01                		mov.L	r5, 4[r10]
 6308                             	.L436:
6959:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = a->dp[i];
 6309                             		.loc 2 6959 30 discriminator 1
 6310 0065 ED A5 03                		mov.L	12[r10], r5
 6311 0068 EC 55                   		mov.L	[r5], r5
6959:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = a->dp[i];
 6312                             		.loc 2 6959 13 discriminator 1
 6313 006a EC A4                   		mov.L	[r10], r4
 6314 006c 47 54                   		cmp	r5, r4
 6315 006e 29 D4                   		blt	.L437
6961:../src/wolfcrypt/src/sp_int.c ****         }
 6316                             		.loc 2 6961 21
 6317 0070 ED A5 05                		mov.L	20[r10], r5
 6318 0073 ED A4 01                		mov.L	4[r10], r4
 6319 0076 E3 54                   		mov.L	r4, [r5]
 6320                             	.LBE39:
 6321                             		.loc 2 6979 1
 6322 0078 38 C4 00                		bra	.L443
 6323                             	.L435:
 6324                             	.LBB41:
6963:../src/wolfcrypt/src/sp_int.c ****             for (j = 0; i < a->used-1; i++, j++)
 6325                             		.loc 2 6963 17
 6326 007b ED A5 04                		mov.L	16[r10], r5
 6327 007e 61 05                   		cmp	#0, r5
 6328 0080 2A 05 38 BA 00          		ble	.L443
6964:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = (a->dp[i] >> n) | (a->dp[i+1] << (SP_WORD_SIZE - n));
 6329                             		.loc 2 6964 20
 6330 0085 F9 A6 01 00             		mov.L	#0, 4[r10]
6964:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = (a->dp[i] >> n) | (a->dp[i+1] << (SP_WORD_SIZE - n));
 6331                             		.loc 2 6964 13
 6332 0089 2E 4A                   		bra	.L438
 6333                             	.L439:
6965:../src/wolfcrypt/src/sp_int.c ****             r->dp[j] = a->dp[i] >> n;
 6334                             		.loc 2 6965 34 discriminator 3
 6335 008b ED A4 03                		mov.L	12[r10], r4
 6336 008e EC A5                   		mov.L	[r10], r5
 6337 0090 62 25                   		add	#2, r5
 6338 0092 FE 65 44                		mov.L	[r5,r4], r4
6965:../src/wolfcrypt/src/sp_int.c ****             r->dp[j] = a->dp[i] >> n;
 6339                             		.loc 2 6965 38 discriminator 3
 6340 0095 ED A5 04                		mov.L	16[r10], r5
 6341 0098 FD 60 54                		shlr	r5, r4
6965:../src/wolfcrypt/src/sp_int.c ****             r->dp[j] = a->dp[i] >> n;
 6342                             		.loc 2 6965 54 discriminator 3
 6343 009b EC A5                   		mov.L	[r10], r5
 6344 009d 62 15                   		add	#1, r5
6965:../src/wolfcrypt/src/sp_int.c ****             r->dp[j] = a->dp[i] >> n;
 6345                             		.loc 2 6965 52 discriminator 3
 6346 009f ED A3 03                		mov.L	12[r10], r3
 6347 00a2 62 25                   		add	#2, r5
 6348 00a4 FE 65 33                		mov.L	[r5,r3], r3
6965:../src/wolfcrypt/src/sp_int.c ****             r->dp[j] = a->dp[i] >> n;
 6349                             		.loc 2 6965 75 discriminator 3
 6350 00a7 75 42 20                		mov.L	#32, r2
 6351 00aa ED A5 04                		mov.L	16[r10], r5
 6352 00ad FF 05 52                		sub	r5, r2, r5
6965:../src/wolfcrypt/src/sp_int.c ****             r->dp[j] = a->dp[i] >> n;
 6353                             		.loc 2 6965 58 discriminator 3
 6354 00b0 EF 37                   		mov.L	r3, r7
 6355 00b2 FD 62 57                		shll	r5, r7
 6356 00b5 EF 75                   		mov.L	r7, r5
6965:../src/wolfcrypt/src/sp_int.c ****             r->dp[j] = a->dp[i] >> n;
 6357                             		.loc 2 6965 44 discriminator 3
 6358 00b7 FF 53 54                		or	r5, r4, r3
6965:../src/wolfcrypt/src/sp_int.c ****             r->dp[j] = a->dp[i] >> n;
 6359                             		.loc 2 6965 26 discriminator 3
 6360 00ba ED A4 05                		mov.L	20[r10], r4
 6361 00bd ED A5 01                		mov.L	4[r10], r5
 6362 00c0 62 25                   		add	#2, r5
 6363 00c2 FE 25 43                		mov.L	r3, [r5,r4]
6964:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = (a->dp[i] >> n) | (a->dp[i+1] << (SP_WORD_SIZE - n));
 6364                             		.loc 2 6964 41 discriminator 3
 6365 00c5 EC A5                   		mov.L	[r10], r5
 6366 00c7 62 15                   		add	#1, r5
 6367 00c9 E3 A5                   		mov.L	r5, [r10]
6964:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = (a->dp[i] >> n) | (a->dp[i+1] << (SP_WORD_SIZE - n));
 6368                             		.loc 2 6964 46 discriminator 3
 6369 00cb ED A5 01                		mov.L	4[r10], r5
 6370 00ce 62 15                   		add	#1, r5
 6371 00d0 E7 A5 01                		mov.L	r5, 4[r10]
 6372                             	.L438:
6964:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = (a->dp[i] >> n) | (a->dp[i+1] << (SP_WORD_SIZE - n));
 6373                             		.loc 2 6964 30 discriminator 1
 6374 00d3 ED A5 03                		mov.L	12[r10], r5
 6375 00d6 EC 55                   		mov.L	[r5], r5
6964:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = (a->dp[i] >> n) | (a->dp[i+1] << (SP_WORD_SIZE - n));
 6376                             		.loc 2 6964 36 discriminator 1
 6377 00d8 60 15                   		sub	#1, r5
6964:../src/wolfcrypt/src/sp_int.c ****                 r->dp[j] = (a->dp[i] >> n) | (a->dp[i+1] << (SP_WORD_SIZE - n));
 6378                             		.loc 2 6964 13 discriminator 1
 6379 00da EC A4                   		mov.L	[r10], r4
 6380 00dc 47 54                   		cmp	r5, r4
 6381 00de 29 AD                   		blt	.L439
6966:../src/wolfcrypt/src/sp_int.c ****             r->used = j + 1;
 6382                             		.loc 2 6966 29
 6383 00e0 ED A4 03                		mov.L	12[r10], r4
 6384 00e3 EC A5                   		mov.L	[r10], r5
 6385 00e5 62 25                   		add	#2, r5
 6386 00e7 FE 65 44                		mov.L	[r5,r4], r4
6966:../src/wolfcrypt/src/sp_int.c ****             r->used = j + 1;
 6387                             		.loc 2 6966 33
 6388 00ea ED A5 04                		mov.L	16[r10], r5
 6389 00ed EF 43                   		mov.L	r4, r3
 6390 00ef FD 60 53                		shlr	r5, r3
6966:../src/wolfcrypt/src/sp_int.c ****             r->used = j + 1;
 6391                             		.loc 2 6966 22
 6392 00f2 ED A4 05                		mov.L	20[r10], r4
 6393 00f5 ED A5 01                		mov.L	4[r10], r5
 6394 00f8 62 25                   		add	#2, r5
 6395 00fa FE 25 43                		mov.L	r3, [r5,r4]
6967:../src/wolfcrypt/src/sp_int.c ****             sp_clamp(r);
 6396                             		.loc 2 6967 25
 6397 00fd ED A5 01                		mov.L	4[r10], r5
 6398 0100 71 54 01                		add	#1, r5, r4
6967:../src/wolfcrypt/src/sp_int.c ****             sp_clamp(r);
 6399                             		.loc 2 6967 21
 6400 0103 ED A5 05                		mov.L	20[r10], r5
 6401 0106 E3 54                   		mov.L	r4, [r5]
 6402                             	.LBB40:
6968:../src/wolfcrypt/src/sp_int.c ****         }
 6403                             		.loc 2 6968 13
 6404 0108 ED A5 05                		mov.L	20[r10], r5
 6405 010b EC 55                   		mov.L	[r5], r5
 6406 010d 60 15                   		sub	#1, r5
 6407 010f E7 A5 02                		mov.L	r5, 8[r10]
 6408 0112 09                      		bra	.L440
 6409                             	.L442:
6968:../src/wolfcrypt/src/sp_int.c ****         }
 6410                             		.loc 2 6968 13 is_stmt 0 discriminator 5
 6411 0113 ED A5 02                		mov.L	8[r10], r5
 6412 0116 60 15                   		sub	#1, r5
 6413 0118 E7 A5 02                		mov.L	r5, 8[r10]
 6414                             	.L440:
6968:../src/wolfcrypt/src/sp_int.c ****         }
 6415                             		.loc 2 6968 13 discriminator 1
 6416 011b ED A5 02                		mov.L	8[r10], r5
 6417 011e 61 05                   		cmp	#0, r5
 6418 0120 29 11                   		blt	.L441
6968:../src/wolfcrypt/src/sp_int.c ****         }
 6419                             		.loc 2 6968 13 discriminator 3
 6420 0122 ED A4 05                		mov.L	20[r10], r4
 6421 0125 ED A5 02                		mov.L	8[r10], r5
 6422 0128 62 25                   		add	#2, r5
 6423 012a FE 65 45                		mov.L	[r5,r4], r5
 6424 012d 61 05                   		cmp	#0, r5
 6425 012f 20 E4                   		beq	.L442
 6426                             	.L441:
6968:../src/wolfcrypt/src/sp_int.c ****         }
 6427                             		.loc 2 6968 13 discriminator 6
 6428 0131 ED A5 02                		mov.L	8[r10], r5
 6429 0134 71 54 01                		add	#1, r5, r4
 6430 0137 ED A5 05                		mov.L	20[r10], r5
 6431 013a E3 54                   		mov.L	r4, [r5]
 6432                             	.L443:
 6433                             	.LBE40:
 6434                             	.LBE41:
 6435                             		.loc 2 6979 1 is_stmt 1
 6436 013c 03                      		nop
 6437 013d 3F 7A 0A                		rtsd	#40, r7-r10
 6438                             	.LFE94:
 6440                             		.section	.text.sp_div,"ax",@progbits
 6441                             		.global	_sp_div
 6443                             	_sp_div:
 6444                             	.LFB95:
6980:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || !NO_DH || HAVE_ECC ||
6981:../src/wolfcrypt/src/sp_int.c ****         * (!NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY) || WOLFSSL_HAVE_SP_DH */
6982:../src/wolfcrypt/src/sp_int.c **** 
6983:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || !defined(NO_DH) || defined(HAVE_ECC) || \
6984:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY) && \
6985:../src/wolfcrypt/src/sp_int.c ****      !defined(WOLFSSL_RSA_PUBLIC_ONLY))
6986:../src/wolfcrypt/src/sp_int.c **** /* Divide a by d and return the quotient in r and the remainder in rem.
6987:../src/wolfcrypt/src/sp_int.c ****  *   r = a / d; rem = a % d
6988:../src/wolfcrypt/src/sp_int.c ****  *
6989:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer to be divided.
6990:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   d    SP integer to divide by.
6991:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r    SP integer that is the quotient.
6992:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  rem  SP integer that is the remainder.
6993:../src/wolfcrypt/src/sp_int.c ****  *
6994:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
6995:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or d is NULL, r and rem are NULL, or d is 0.
6996:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
6997:../src/wolfcrypt/src/sp_int.c ****  */
6998:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_MATH_ALL
6999:../src/wolfcrypt/src/sp_int.c **** static
7000:../src/wolfcrypt/src/sp_int.c **** #endif
7001:../src/wolfcrypt/src/sp_int.c **** int sp_div(sp_int* a, sp_int* d, sp_int* r, sp_int* rem)
7002:../src/wolfcrypt/src/sp_int.c **** {
 6445                             		.loc 2 7002 1
 6446 0000 6E 6D                   		pushm	r6-r13
 6447                             	.LCFI112:
 6448 0002 72 0A 58 FF             		add	#-168, r0, r10
 6449                             	.LCFI113:
 6450 0006 EF A0                   		mov.L	r10, r0
 6451 0008 E7 A1 1C                		mov.L	r1, 112[r10]
 6452 000b E7 A2 1D                		mov.L	r2, 116[r10]
 6453 000e E7 A3 1E                		mov.L	r3, 120[r10]
 6454 0011 E7 A4 1F                		mov.L	r4, 124[r10]
7003:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 6455                             		.loc 2 7003 9
 6456 0014 F8 A6 00                		mov.L	#0, [r10]
7004:../src/wolfcrypt/src/sp_int.c ****     int ret;
7005:../src/wolfcrypt/src/sp_int.c ****     int done = 0;
 6457                             		.loc 2 7005 9
 6458 0017 F9 A6 01 00             		mov.L	#0, 4[r10]
7006:../src/wolfcrypt/src/sp_int.c ****     int i;
7007:../src/wolfcrypt/src/sp_int.c ****     int s = 0;
 6459                             		.loc 2 7007 9
 6460 001b F9 A6 03 00             		mov.L	#0, 12[r10]
7008:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit dt;
7009:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t;
7010:../src/wolfcrypt/src/sp_int.c ****     sp_int* sa = NULL;
 6461                             		.loc 2 7010 13
 6462 001f F9 A6 05 00             		mov.L	#0, 20[r10]
7011:../src/wolfcrypt/src/sp_int.c ****     sp_int* sd = NULL;
 6463                             		.loc 2 7011 13
 6464 0023 F9 A6 12 00             		mov.L	#0, 72[r10]
7012:../src/wolfcrypt/src/sp_int.c ****     sp_int* tr = NULL;
 6465                             		.loc 2 7012 13
 6466 0027 F9 A6 06 00             		mov.L	#0, 24[r10]
7013:../src/wolfcrypt/src/sp_int.c ****     sp_int* trial = NULL;
 6467                             		.loc 2 7013 13
 6468 002b F9 A6 07 00             		mov.L	#0, 28[r10]
7014:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
7015:../src/wolfcrypt/src/sp_int.c ****     int aSign = MP_ZPOS;
7016:../src/wolfcrypt/src/sp_int.c ****     int dSign = MP_ZPOS;
7017:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_INT_NEGATIVE */
7018:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(td, (a == NULL) ? 1 : a->used + 1, 4);
 6469                             		.loc 2 7018 5
 6470 002f F9 A6 08 00             		mov.L	#0, 32[r10]
 6471 0033 71 A5 60                		add	#0x60, r10, r5
 6472 0036 EF 51                   		mov.L	r5, r1
 6473 0038 75 43 10                		mov.L	#16, r3
 6474 003b 66 02                   		mov	#0, r2
 6475 003d 7F 88                   		sstr.b
7019:../src/wolfcrypt/src/sp_int.c **** 
7020:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (d == NULL) || ((r == NULL) && (rem == NULL))) {
 6476                             		.loc 2 7020 8
 6477 003f ED A5 1C                		mov.L	112[r10], r5
 6478 0042 61 05                   		cmp	#0, r5
 6479 0044 20 15                   		beq	.L445
 6480                             		.loc 2 7020 21 discriminator 1
 6481 0046 ED A5 1D                		mov.L	116[r10], r5
 6482 0049 61 05                   		cmp	#0, r5
 6483 004b 20 0E                   		beq	.L445
 6484                             		.loc 2 7020 36 discriminator 2
 6485 004d ED A5 1E                		mov.L	120[r10], r5
 6486 0050 61 05                   		cmp	#0, r5
 6487 0052 1A                      		bne	.L446
 6488                             		.loc 2 7020 52 discriminator 3
 6489 0053 ED A5 1F                		mov.L	124[r10], r5
 6490 0056 61 05                   		cmp	#0, r5
 6491 0058 1C                      		bne	.L446
 6492                             	.L445:
7021:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 6493                             		.loc 2 7021 13
 6494 0059 F8 A6 FD                		mov.L	#-3, [r10]
 6495                             	.L446:
7022:../src/wolfcrypt/src/sp_int.c ****     }
7023:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && sp_iszero(d)) {
 6496                             		.loc 2 7023 8
 6497 005c EC A5                   		mov.L	[r10], r5
 6498 005e 61 05                   		cmp	#0, r5
 6499 0060 21 0D                   		bne	.L447
 6500                             		.loc 2 7023 29 discriminator 1
 6501 0062 ED A5 1D                		mov.L	116[r10], r5
 6502 0065 EC 55                   		mov.L	[r5], r5
 6503                             		.loc 2 7023 26 discriminator 1
 6504 0067 61 05                   		cmp	#0, r5
 6505 0069 1C                      		bne	.L447
7024:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 6506                             		.loc 2 7024 13
 6507 006a F8 A6 FD                		mov.L	#-3, [r10]
 6508                             	.L447:
7025:../src/wolfcrypt/src/sp_int.c ****     }
7026:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (r != NULL) && (r->size < a->used - d->used + 2)) {
 6509                             		.loc 2 7026 8
 6510 006d EC A5                   		mov.L	[r10], r5
 6511 006f 61 05                   		cmp	#0, r5
 6512 0071 21 25                   		bne	.L448
 6513                             		.loc 2 7026 26 discriminator 1
 6514 0073 ED A5 1E                		mov.L	120[r10], r5
 6515 0076 61 05                   		cmp	#0, r5
 6516 0078 20 1E                   		beq	.L448
 6517                             		.loc 2 7026 56 discriminator 2
 6518 007a ED A5 1C                		mov.L	112[r10], r5
 6519 007d EC 54                   		mov.L	[r5], r4
 6520                             		.loc 2 7026 66 discriminator 2
 6521 007f ED A5 1D                		mov.L	116[r10], r5
 6522 0082 EC 55                   		mov.L	[r5], r5
 6523                             		.loc 2 7026 63 discriminator 2
 6524 0084 FF 05 54                		sub	r5, r4, r5
 6525                             		.loc 2 7026 53 discriminator 2
 6526 0087 71 54 01                		add	#1, r5, r4
 6527                             		.loc 2 7026 46 discriminator 2
 6528 008a ED A5 1E                		mov.L	120[r10], r5
 6529 008d A8 5D                   		mov.L	4[r5], r5
 6530                             		.loc 2 7026 41 discriminator 2
 6531 008f 47 54                   		cmp	r5, r4
 6532 0091 29 05                   		blt	.L448
7027:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 6533                             		.loc 2 7027 13
 6534 0093 F8 A6 FD                		mov.L	#-3, [r10]
 6535                             		.balign 8,3,1
 6536                             	.L448:
7028:../src/wolfcrypt/src/sp_int.c ****     }
7029:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (rem != NULL)) {
 6537                             		.loc 2 7029 8
 6538 0096 EC A5                   		mov.L	[r10], r5
 6539 0098 61 05                   		cmp	#0, r5
 6540 009a 21 49                   		bne	.L449
 6541                             		.loc 2 7029 26 discriminator 1
 6542 009c ED A5 1F                		mov.L	124[r10], r5
 6543 009f 61 05                   		cmp	#0, r5
 6544 00a1 20 42                   		beq	.L449
7030:../src/wolfcrypt/src/sp_int.c ****         if ((a->used <= d->used) && (rem->size < a->used + 1)) {
 6545                             		.loc 2 7030 15
 6546 00a3 ED A5 1C                		mov.L	112[r10], r5
 6547 00a6 EC 54                   		mov.L	[r5], r4
 6548                             		.loc 2 7030 26
 6549 00a8 ED A5 1D                		mov.L	116[r10], r5
 6550 00ab EC 55                   		mov.L	[r5], r5
 6551                             		.loc 2 7030 12
 6552 00ad 47 54                   		cmp	r5, r4
 6553 00af 2A 15                   		bgt	.L450
 6554                             		.loc 2 7030 51 discriminator 1
 6555 00b1 ED A5 1C                		mov.L	112[r10], r5
 6556 00b4 EC 54                   		mov.L	[r5], r4
 6557                             		.loc 2 7030 41 discriminator 1
 6558 00b6 ED A5 1F                		mov.L	124[r10], r5
 6559 00b9 A8 5D                   		mov.L	4[r5], r5
 6560                             		.loc 2 7030 34 discriminator 1
 6561 00bb 47 54                   		cmp	r5, r4
 6562 00bd 29 07                   		blt	.L450
7031:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
 6563                             		.loc 2 7031 17
 6564 00bf F8 A6 FD                		mov.L	#-3, [r10]
 6565 00c2 2E 21                   		bra	.L449
 6566                             	.L450:
7032:../src/wolfcrypt/src/sp_int.c ****         }
7033:../src/wolfcrypt/src/sp_int.c ****         else if ((a->used > d->used) && (rem->size < d->used + 1)) {
 6567                             		.loc 2 7033 20
 6568 00c4 ED A5 1C                		mov.L	112[r10], r5
 6569 00c7 EC 54                   		mov.L	[r5], r4
 6570                             		.loc 2 7033 30
 6571 00c9 ED A5 1D                		mov.L	116[r10], r5
 6572 00cc EC 55                   		mov.L	[r5], r5
 6573                             		.loc 2 7033 17
 6574 00ce 47 54                   		cmp	r5, r4
 6575 00d0 2B 13                   		ble	.L449
 6576                             		.loc 2 7033 55 discriminator 1
 6577 00d2 ED A5 1D                		mov.L	116[r10], r5
 6578 00d5 EC 54                   		mov.L	[r5], r4
 6579                             		.loc 2 7033 45 discriminator 1
 6580 00d7 ED A5 1F                		mov.L	124[r10], r5
 6581 00da A8 5D                   		mov.L	4[r5], r5
 6582                             		.loc 2 7033 38 discriminator 1
 6583 00dc 47 54                   		cmp	r5, r4
 6584 00de 29 05                   		blt	.L449
7034:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
 6585                             		.loc 2 7034 17
 6586 00e0 F8 A6 FD                		mov.L	#-3, [r10]
 6587                             		.balign 8,3,1
 6588                             	.L449:
7035:../src/wolfcrypt/src/sp_int.c ****         }
7036:../src/wolfcrypt/src/sp_int.c ****     }
7037:../src/wolfcrypt/src/sp_int.c ****     /* May need to shift number being divided left into a new word. */
7038:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (a->used == SP_INT_DIGITS)) {
 6589                             		.loc 2 7038 8
 6590 00e3 EC A5                   		mov.L	[r10], r5
 6591 00e5 61 05                   		cmp	#0, r5
 6592 00e7 21 4E                   		bne	.L451
 6593                             		.loc 2 7038 31 discriminator 1
 6594 00e9 ED A5 1C                		mov.L	112[r10], r5
 6595 00ec EC 55                   		mov.L	[r5], r5
 6596                             		.loc 2 7038 26 discriminator 1
 6597 00ee 75 55 C2                		cmp	#0xc2, r5
 6598 00f1 21 44                   		bne	.L451
 6599                             	.LBB42:
7039:../src/wolfcrypt/src/sp_int.c ****         int bits = SP_WORD_SIZE - (sp_count_bits(d) % SP_WORD_SIZE);
 6600                             		.loc 2 7039 36
 6601 00f3 ED A1 1D                		mov.L	116[r10], r1
 6602 00f6 05 00 00 00             		bsr	_sp_count_bits
 6603 00fa EF 15                   		mov.L	r1, r5
 6604                             		.loc 2 7039 53
 6605 00fc 74 25 1F 00 00 80       		and	#-2147483617, r5
 6606 0102 61 05                   		cmp	#0, r5
 6607 0104 28 09                   		bge	.L452
 6608 0106 60 15                   		sub	#1, r5
 6609 0108 75 35 E0                		or	#-32, r5
 6610 010b 62 15                   		add	#1, r5
 6611                             	.L452:
 6612 010d EF 54                   		mov.L	r5, r4
 6613                             		.loc 2 7039 13
 6614 010f 75 45 20                		mov.L	#32, r5
 6615 0112 43 45                   		sub	r4, r5
 6616 0114 E7 A5 13                		mov.L	r5, 76[r10]
7040:../src/wolfcrypt/src/sp_int.c ****         if ((bits != SP_WORD_SIZE) &&
 6617                             		.loc 2 7040 12
 6618 0117 ED A5 13                		mov.L	76[r10], r5
 6619 011a 75 55 20                		cmp	#32, r5
 6620 011d 20 18                   		beq	.L451
7041:../src/wolfcrypt/src/sp_int.c ****                 (sp_count_bits(a) + bits > SP_INT_DIGITS * SP_WORD_SIZE)) {
 6621                             		.loc 2 7041 18 discriminator 1
 6622 011f ED A1 1C                		mov.L	112[r10], r1
 6623 0122 05 00 00 00             		bsr	_sp_count_bits
 6624 0126 EF 15                   		mov.L	r1, r5
 6625                             		.loc 2 7041 35 discriminator 1
 6626 0128 06 89 A5 13             		add	76[r10].L, r5
7040:../src/wolfcrypt/src/sp_int.c ****         if ((bits != SP_WORD_SIZE) &&
 6627                             		.loc 2 7040 36 discriminator 1
 6628 012c 76 05 40 18             		cmp	#0x1840, r5
 6629 0130 2B 05                   		ble	.L451
7042:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
 6630                             		.loc 2 7042 17
 6631 0132 F8 A6 FD                		mov.L	#-3, [r10]
 6632                             		.balign 8,3,1
 6633                             	.L451:
 6634                             	.LBE42:
7043:../src/wolfcrypt/src/sp_int.c ****         }
7044:../src/wolfcrypt/src/sp_int.c ****     }
7045:../src/wolfcrypt/src/sp_int.c **** 
7046:../src/wolfcrypt/src/sp_int.c **** #if 0
7047:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
7048:../src/wolfcrypt/src/sp_int.c ****         sp_print(a, "a");
7049:../src/wolfcrypt/src/sp_int.c ****         sp_print(d, "b");
7050:../src/wolfcrypt/src/sp_int.c ****     }
7051:../src/wolfcrypt/src/sp_int.c **** #endif
7052:../src/wolfcrypt/src/sp_int.c **** 
7053:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 6635                             		.loc 2 7053 8
 6636 0135 EC A5                   		mov.L	[r10], r5
 6637 0137 61 05                   		cmp	#0, r5
 6638 0139 3B A8 00                		bne	.L453
7054:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
7055:../src/wolfcrypt/src/sp_int.c ****         aSign = a->sign;
7056:../src/wolfcrypt/src/sp_int.c ****         dSign = d->sign;
7057:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_INT_NEGATIVE */
7058:../src/wolfcrypt/src/sp_int.c **** 
7059:../src/wolfcrypt/src/sp_int.c ****         ret = _sp_cmp_abs(a, d);
 6639                             		.loc 2 7059 15
 6640 013c ED A2 1D                		mov.L	116[r10], r2
 6641 013f ED A1 1C                		mov.L	112[r10], r1
 6642 0142 05 00 00 00             		bsr	__sp_cmp_abs
 6643 0146 E7 A1 14                		mov.L	r1, 80[r10]
7060:../src/wolfcrypt/src/sp_int.c ****         if (ret == MP_LT) {
 6644                             		.loc 2 7060 12
 6645 0149 ED A5 14                		mov.L	80[r10], r5
 6646 014c 75 05 FF                		cmp	#-1, r5
 6647 014f 21 28                   		bne	.L454
7061:../src/wolfcrypt/src/sp_int.c ****             if (rem != NULL) {
 6648                             		.loc 2 7061 16
 6649 0151 ED A5 1F                		mov.L	124[r10], r5
 6650 0154 61 05                   		cmp	#0, r5
 6651 0156 20 0C                   		beq	.L455
7062:../src/wolfcrypt/src/sp_int.c ****                 sp_copy(a, rem);
 6652                             		.loc 2 7062 17
 6653 0158 ED A2 1F                		mov.L	124[r10], r2
 6654 015b ED A1 1C                		mov.L	112[r10], r1
 6655 015e 05 00 00 00             		bsr	_sp_copy
 6656                             	.L455:
7063:../src/wolfcrypt/src/sp_int.c ****             }
7064:../src/wolfcrypt/src/sp_int.c ****             if (r != NULL) {
 6657                             		.loc 2 7064 16
 6658 0162 ED A5 1E                		mov.L	120[r10], r5
 6659 0165 61 05                   		cmp	#0, r5
 6660 0167 12                      		beq	.L456
7065:../src/wolfcrypt/src/sp_int.c ****                 sp_set(r, 0);
 6661                             		.loc 2 7065 17
 6662 0168 66 02                   		mov.L	#0, r2
 6663 016a ED A1 1E                		mov.L	120[r10], r1
 6664 016d 05 00 00 00             		bsr	_sp_set
 6665                             	.L456:
7066:../src/wolfcrypt/src/sp_int.c ****             }
7067:../src/wolfcrypt/src/sp_int.c ****             done = 1;
 6666                             		.loc 2 7067 18
 6667 0171 F9 A6 01 01             		mov.L	#1, 4[r10]
 6668 0175 2E 6C                   		bra	.L453
 6669                             	.L454:
7068:../src/wolfcrypt/src/sp_int.c ****         }
7069:../src/wolfcrypt/src/sp_int.c ****         else if (ret == MP_EQ) {
 6670                             		.loc 2 7069 17
 6671 0177 ED A5 14                		mov.L	80[r10], r5
 6672 017a 61 05                   		cmp	#0, r5
 6673 017c 21 26                   		bne	.L457
7070:../src/wolfcrypt/src/sp_int.c ****             if (rem != NULL) {
 6674                             		.loc 2 7070 16
 6675 017e ED A5 1F                		mov.L	124[r10], r5
 6676 0181 61 05                   		cmp	#0, r5
 6677 0183 12                      		beq	.L458
7071:../src/wolfcrypt/src/sp_int.c ****                 sp_set(rem, 0);
 6678                             		.loc 2 7071 17
 6679 0184 66 02                   		mov.L	#0, r2
 6680 0186 ED A1 1F                		mov.L	124[r10], r1
 6681 0189 05 00 00 00             		bsr	_sp_set
 6682                             	.L458:
7072:../src/wolfcrypt/src/sp_int.c ****             }
7073:../src/wolfcrypt/src/sp_int.c ****             if (r != NULL) {
 6683                             		.loc 2 7073 16
 6684 018d ED A5 1E                		mov.L	120[r10], r5
 6685 0190 61 05                   		cmp	#0, r5
 6686 0192 12                      		beq	.L459
7074:../src/wolfcrypt/src/sp_int.c ****                 sp_set(r, 1);
 6687                             		.loc 2 7074 17
 6688 0193 66 12                   		mov.L	#1, r2
 6689 0195 ED A1 1E                		mov.L	120[r10], r1
 6690 0198 05 00 00 00             		bsr	_sp_set
 6691                             	.L459:
7075:../src/wolfcrypt/src/sp_int.c ****             #ifdef WOLFSSL_SP_INT_NEGATIVE
7076:../src/wolfcrypt/src/sp_int.c ****                 r->sign = (aSign == dSign) ? MP_ZPOS : MP_NEG;
7077:../src/wolfcrypt/src/sp_int.c ****             #endif /* WOLFSSL_SP_INT_NEGATIVE */
7078:../src/wolfcrypt/src/sp_int.c ****             }
7079:../src/wolfcrypt/src/sp_int.c ****             done = 1;
 6692                             		.loc 2 7079 18
 6693 019c F9 A6 01 01             		mov.L	#1, 4[r10]
 6694 01a0 2E 41                   		bra	.L453
 6695                             	.L457:
7080:../src/wolfcrypt/src/sp_int.c ****         }
7081:../src/wolfcrypt/src/sp_int.c ****         else if (sp_count_bits(a) == sp_count_bits(d)) {
 6696                             		.loc 2 7081 18
 6697 01a2 ED A1 1C                		mov.L	112[r10], r1
 6698 01a5 05 00 00 00             		bsr	_sp_count_bits
 6699 01a9 EF 16                   		mov.L	r1, r6
 6700                             		.loc 2 7081 38
 6701 01ab ED A1 1D                		mov.L	116[r10], r1
 6702 01ae 05 00 00 00             		bsr	_sp_count_bits
 6703 01b2 EF 15                   		mov.L	r1, r5
 6704                             		.loc 2 7081 17
 6705 01b4 47 56                   		cmp	r5, r6
 6706 01b6 21 2B                   		bne	.L453
7082:../src/wolfcrypt/src/sp_int.c ****             /* a is greater than d but same bit length */
7083:../src/wolfcrypt/src/sp_int.c ****             if (rem != NULL) {
 6707                             		.loc 2 7083 16
 6708 01b8 ED A5 1F                		mov.L	124[r10], r5
 6709 01bb 61 05                   		cmp	#0, r5
 6710 01bd 20 11                   		beq	.L460
7084:../src/wolfcrypt/src/sp_int.c ****                 _sp_sub_off(a, d, rem, 0);
 6711                             		.loc 2 7084 17
 6712 01bf 66 04                   		mov.L	#0, r4
 6713 01c1 ED A3 1F                		mov.L	124[r10], r3
 6714 01c4 ED A2 1D                		mov.L	116[r10], r2
 6715 01c7 ED A1 1C                		mov.L	112[r10], r1
 6716 01ca 05 00 00 00             		bsr	__sp_sub_off
 6717                             	.L460:
7085:../src/wolfcrypt/src/sp_int.c ****             #ifdef WOLFSSL_SP_INT_NEGATIVE
7086:../src/wolfcrypt/src/sp_int.c ****                 rem->sign = aSign;
7087:../src/wolfcrypt/src/sp_int.c ****             #endif
7088:../src/wolfcrypt/src/sp_int.c ****             }
7089:../src/wolfcrypt/src/sp_int.c ****             if (r != NULL) {
 6718                             		.loc 2 7089 16
 6719 01ce ED A5 1E                		mov.L	120[r10], r5
 6720 01d1 61 05                   		cmp	#0, r5
 6721 01d3 12                      		beq	.L461
7090:../src/wolfcrypt/src/sp_int.c ****                 sp_set(r, 1);
 6722                             		.loc 2 7090 17
 6723 01d4 66 12                   		mov.L	#1, r2
 6724 01d6 ED A1 1E                		mov.L	120[r10], r1
 6725 01d9 05 00 00 00             		bsr	_sp_set
 6726                             	.L461:
7091:../src/wolfcrypt/src/sp_int.c ****             #ifdef WOLFSSL_SP_INT_NEGATIVE
7092:../src/wolfcrypt/src/sp_int.c ****                 r->sign = (aSign == dSign) ? MP_ZPOS : MP_NEG;
7093:../src/wolfcrypt/src/sp_int.c ****             #endif /* WOLFSSL_SP_INT_NEGATIVE */
7094:../src/wolfcrypt/src/sp_int.c ****             }
7095:../src/wolfcrypt/src/sp_int.c ****             done = 1;
 6727                             		.loc 2 7095 18
 6728 01dd F9 A6 01 01             		mov.L	#1, 4[r10]
 6729                             		.balign 8,3,1
 6730                             	.L453:
7096:../src/wolfcrypt/src/sp_int.c ****         }
7097:../src/wolfcrypt/src/sp_int.c ****     }
7098:../src/wolfcrypt/src/sp_int.c **** 
7099:../src/wolfcrypt/src/sp_int.c ****     if (!done) {
 6731                             		.loc 2 7099 8
 6732 01e1 ED A5 01                		mov.L	4[r10], r5
 6733 01e4 61 05                   		cmp	#0, r5
 6734 01e6 3B D7 00                		bne	.L462
 6735                             	.LBB43:
7100:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SMALL_STACK) || defined(SP_ALLOC)) && \
7101:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_SP_NO_MALLOC)
7102:../src/wolfcrypt/src/sp_int.c ****         int cnt = 4;
 6736                             		.loc 2 7102 13
 6737 01e9 F9 A6 09 04             		mov.L	#4, 36[r10]
7103:../src/wolfcrypt/src/sp_int.c ****         if ((rem != NULL) && (rem != d)) {
 6738                             		.loc 2 7103 12
 6739 01ed ED A5 1F                		mov.L	124[r10], r5
 6740 01f0 61 05                   		cmp	#0, r5
 6741 01f2 20 13                   		beq	.L463
 6742                             		.loc 2 7103 27 discriminator 1
 6743 01f4 ED A4 1F                		mov.L	124[r10], r4
 6744 01f7 ED A5 1D                		mov.L	116[r10], r5
 6745 01fa 47 54                   		cmp	r5, r4
 6746 01fc 11                      		beq	.L463
7104:../src/wolfcrypt/src/sp_int.c ****             cnt--;
 6747                             		.loc 2 7104 16
 6748 01fd ED A5 09                		mov.L	36[r10], r5
 6749 0200 60 15                   		sub	#1, r5
 6750 0202 E7 A5 09                		mov.L	r5, 36[r10]
 6751                             	.L463:
7105:../src/wolfcrypt/src/sp_int.c ****         }
7106:../src/wolfcrypt/src/sp_int.c ****         if ((r != NULL) && (r != d)) {
 6752                             		.loc 2 7106 12
 6753 0205 ED A5 1E                		mov.L	120[r10], r5
 6754 0208 61 05                   		cmp	#0, r5
 6755 020a 20 13                   		beq	.L464
 6756                             		.loc 2 7106 25 discriminator 1
 6757 020c ED A4 1E                		mov.L	120[r10], r4
 6758 020f ED A5 1D                		mov.L	116[r10], r5
 6759 0212 47 54                   		cmp	r5, r4
 6760 0214 11                      		beq	.L464
7107:../src/wolfcrypt/src/sp_int.c ****             cnt--;
 6761                             		.loc 2 7107 16
 6762 0215 ED A5 09                		mov.L	36[r10], r5
 6763 0218 60 15                   		sub	#1, r5
 6764 021a E7 A5 09                		mov.L	r5, 36[r10]
 6765                             	.L464:
7108:../src/wolfcrypt/src/sp_int.c ****         }
7109:../src/wolfcrypt/src/sp_int.c ****         /* Macro always has code associated with it and checks err first. */
7110:../src/wolfcrypt/src/sp_int.c ****         ALLOC_SP_INT_ARRAY(td, a->used + 1, cnt, err, NULL);
 6766                             		.loc 2 7110 9
 6767 021d EC A5                   		mov.L	[r10], r5
 6768 021f 61 05                   		cmp	#0, r5
 6769 0221 3B 9C 00                		bne	.L462
 6770                             		.loc 2 7110 9 is_stmt 0 discriminator 1
 6771 0224 ED A5 1C                		mov.L	112[r10], r5
 6772 0227 EC 55                   		mov.L	[r5], r5
 6773 0229 75 05 FF                		cmp	#-1, r5
 6774 022c 20 0D                   		beq	.L465
 6775                             		.loc 2 7110 9 discriminator 2
 6776 022e ED A5 1C                		mov.L	112[r10], r5
 6777 0231 EC 55                   		mov.L	[r5], r5
 6778 0233 62 35                   		add	#3, r5
 6779 0235 FD C2 54                		shll	#2, r5, r4
 6780 0238 0B                      		bra	.L466
 6781                             	.L465:
 6782                             		.loc 2 7110 9 discriminator 3
 6783 0239 66 C4                   		mov.L	#12, r4
 6784                             	.L466:
 6785                             		.loc 2 7110 9 discriminator 5
 6786 023b ED A5 09                		mov.L	36[r10], r5
 6787 023e 4F 45                   		mul	r4, r5
 6788 0240 EF 51                   		mov.L	r5, r1
 6789 0242 05 00 00 00             		bsr	_wolfSSL_Malloc
 6790 0246 E7 A1 08                		mov.L	r1, 32[r10]
 6791 0249 ED A5 08                		mov.L	32[r10], r5
 6792 024c 61 05                   		cmp	#0, r5
 6793 024e 1E                      		bne	.L467
 6794                             		.loc 2 7110 9 discriminator 6
 6795 024f F8 A6 FE                		mov.L	#-2, [r10]
 6796 0252 2E 6B                   		bra	.L462
 6797                             	.L467:
 6798                             	.LBB44:
 6799                             		.loc 2 7110 9 discriminator 7
 6800 0254 ED A5 08                		mov.L	32[r10], r5
 6801 0257 E7 A5 18                		mov.L	r5, 96[r10]
 6802 025a ED A5 1C                		mov.L	112[r10], r5
 6803 025d EC 55                   		mov.L	[r5], r5
 6804 025f ED A4 18                		mov.L	96[r10], r4
 6805 0262 62 15                   		add	#1, r5
 6806 0264 A0 4D                   		mov.L	r5, 4[r4]
 6807 0266 F9 A6 0A 01             		mov.L	#1, 40[r10]
 6808 026a 2E 49                   		bra	.L468
 6809                             	.L471:
 6810                             		.loc 2 7110 9 discriminator 14
 6811 026c ED A5 0A                		mov.L	40[r10], r5
 6812 026f 60 15                   		sub	#1, r5
 6813 0271 6C 25                   		shll	#2, r5
 6814 0273 4B A5                   		add	r10, r5
 6815 0275 AE 54                   		mov.L	96[r5], r4
 6816 0277 ED A5 1C                		mov.L	112[r10], r5
 6817 027a EC 55                   		mov.L	[r5], r5
 6818 027c 75 05 FF                		cmp	#-1, r5
 6819 027f 20 0C                   		beq	.L469
 6820                             		.loc 2 7110 9 discriminator 9
 6821 0281 ED A5 1C                		mov.L	112[r10], r5
 6822 0284 EC 55                   		mov.L	[r5], r5
 6823 0286 62 35                   		add	#3, r5
 6824 0288 6C 25                   		shll	#2, r5
 6825 028a 0B                      		bra	.L470
 6826                             	.L469:
 6827                             		.loc 2 7110 9 discriminator 10
 6828 028b 66 C5                   		mov.L	#12, r5
 6829                             	.L470:
 6830                             		.loc 2 7110 9 discriminator 12
 6831 028d 4B 54                   		add	r5, r4
 6832 028f ED A5 0A                		mov.L	40[r10], r5
 6833 0292 6C 25                   		shll	#2, r5
 6834 0294 4B A5                   		add	r10, r5
 6835 0296 A6 54                   		mov.L	r4, 96[r5]
 6836 0298 ED A5 1C                		mov.L	112[r10], r5
 6837 029b EC 53                   		mov.L	[r5], r3
 6838 029d ED A5 0A                		mov.L	40[r10], r5
 6839 02a0 6C 25                   		shll	#2, r5
 6840 02a2 4B A5                   		add	r10, r5
 6841 02a4 AE 54                   		mov.L	96[r5], r4
 6842 02a6 71 35 01                		add	#1, r3, r5
 6843 02a9 A0 4D                   		mov.L	r5, 4[r4]
 6844 02ab ED A5 0A                		mov.L	40[r10], r5
 6845 02ae 62 15                   		add	#1, r5
 6846 02b0 E7 A5 0A                		mov.L	r5, 40[r10]
 6847                             	.L468:
 6848                             		.loc 2 7110 9 discriminator 13
 6849 02b3 ED A4 0A                		mov.L	40[r10], r4
 6850 02b6 ED A5 09                		mov.L	36[r10], r5
 6851 02b9 47 54                   		cmp	r5, r4
 6852 02bb 29 B1                   		blt	.L471
 6853                             		.balign 8,3,1
 6854                             	.L462:
 6855                             	.LBE44:
 6856                             	.LBE43:
7111:../src/wolfcrypt/src/sp_int.c **** #else
7112:../src/wolfcrypt/src/sp_int.c ****         ALLOC_SP_INT_ARRAY(td, a->used + 1, 4, err, NULL);
7113:../src/wolfcrypt/src/sp_int.c **** #endif
7114:../src/wolfcrypt/src/sp_int.c ****     }
7115:../src/wolfcrypt/src/sp_int.c **** 
7116:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
 6857                             		.loc 2 7116 8 is_stmt 1
 6858 02bd ED A5 01                		mov.L	4[r10], r5
 6859 02c0 61 05                   		cmp	#0, r5
 6860 02c2 3B 26 01                		bne	.L472
 6861                             		.loc 2 7116 17 discriminator 1
 6862 02c5 EC A5                   		mov.L	[r10], r5
 6863 02c7 61 05                   		cmp	#0, r5
 6864 02c9 3B 1F 01                		bne	.L472
7117:../src/wolfcrypt/src/sp_int.c ****         sd    = td[0];
 6865                             		.loc 2 7117 15
 6866 02cc ED A5 18                		mov.L	96[r10], r5
 6867 02cf E7 A5 12                		mov.L	r5, 72[r10]
7118:../src/wolfcrypt/src/sp_int.c ****         trial = td[1];
 6868                             		.loc 2 7118 15
 6869 02d2 ED A5 19                		mov.L	100[r10], r5
 6870 02d5 E7 A5 07                		mov.L	r5, 28[r10]
7119:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SMALL_STACK) || defined(SP_ALLOC)) && \
7120:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_SP_NO_MALLOC)
7121:../src/wolfcrypt/src/sp_int.c ****         i = 2;
 6871                             		.loc 2 7121 11
 6872 02d8 F9 A6 02 02             		mov.L	#2, 8[r10]
7122:../src/wolfcrypt/src/sp_int.c ****         sa    = ((rem != NULL) && (rem != d)) ? rem : td[i++];
 6873                             		.loc 2 7122 53
 6874 02dc ED A5 1F                		mov.L	124[r10], r5
 6875 02df 61 05                   		cmp	#0, r5
 6876 02e1 20 0C                   		beq	.L473
 6877                             		.loc 2 7122 32 discriminator 2
 6878 02e3 ED A4 1F                		mov.L	124[r10], r4
 6879 02e6 ED A5 1D                		mov.L	116[r10], r5
 6880 02e9 47 54                   		cmp	r5, r4
 6881 02eb 21 12                   		bne	.L474
 6882                             	.L473:
 6883                             		.loc 2 7122 59 discriminator 3
 6884 02ed ED A5 02                		mov.L	8[r10], r5
 6885 02f0 71 54 01                		add	#1, r5, r4
 6886 02f3 E7 A4 02                		mov.L	r4, 8[r10]
 6887                             		.loc 2 7122 53 discriminator 3
 6888 02f6 6C 25                   		shll	#2, r5
 6889 02f8 4B A5                   		add	r10, r5
 6890 02fa AE 55                   		mov.L	96[r5], r5
 6891 02fc 0C                      		bra	.L475
 6892                             	.L474:
 6893                             		.loc 2 7122 53 is_stmt 0 discriminator 4
 6894 02fd ED A5 1F                		mov.L	124[r10], r5
 6895                             	.L475:
 6896                             		.loc 2 7122 15 is_stmt 1 discriminator 6
 6897 0300 E7 A5 05                		mov.L	r5, 20[r10]
7123:../src/wolfcrypt/src/sp_int.c ****         tr    = ((r != NULL) && (r != d))     ? r   : td[i];
 6898                             		.loc 2 7123 53 discriminator 6
 6899 0303 ED A5 1E                		mov.L	120[r10], r5
 6900 0306 61 05                   		cmp	#0, r5
 6901 0308 20 0C                   		beq	.L476
 6902                             		.loc 2 7123 30 discriminator 2
 6903 030a ED A4 1E                		mov.L	120[r10], r4
 6904 030d ED A5 1D                		mov.L	116[r10], r5
 6905 0310 47 54                   		cmp	r5, r4
 6906 0312 21 0C                   		bne	.L477
 6907                             	.L476:
 6908                             		.loc 2 7123 53 discriminator 3
 6909 0314 ED A5 02                		mov.L	8[r10], r5
 6910 0317 6C 25                   		shll	#2, r5
 6911 0319 4B A5                   		add	r10, r5
 6912 031b AE 55                   		mov.L	96[r5], r5
 6913 031d 0C                      		bra	.L478
 6914                             	.L477:
 6915                             		.loc 2 7123 53 is_stmt 0 discriminator 4
 6916 031e ED A5 1E                		mov.L	120[r10], r5
 6917                             	.L478:
 6918                             		.loc 2 7123 15 is_stmt 1 discriminator 6
 6919 0321 E7 A5 06                		mov.L	r5, 24[r10]
7124:../src/wolfcrypt/src/sp_int.c **** #else
7125:../src/wolfcrypt/src/sp_int.c ****         sa    = td[2];
7126:../src/wolfcrypt/src/sp_int.c ****         tr    = td[3];
7127:../src/wolfcrypt/src/sp_int.c **** #endif
7128:../src/wolfcrypt/src/sp_int.c **** 
7129:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(sd, d->used + 1);
 6920                             		.loc 2 7129 27 discriminator 6
 6921 0324 ED A5 1D                		mov.L	116[r10], r5
 6922 0327 EC 55                   		mov.L	[r5], r5
 6923                             		.loc 2 7129 9 discriminator 6
 6924 0329 62 15                   		add	#1, r5
 6925 032b EF 52                   		mov.L	r5, r2
 6926 032d ED A1 12                		mov.L	72[r10], r1
 6927 0330 05 00 00 00             		bsr	_sp_init_size
7130:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(trial, a->used + 1);
 6928                             		.loc 2 7130 30 discriminator 6
 6929 0334 ED A5 1C                		mov.L	112[r10], r5
 6930 0337 EC 55                   		mov.L	[r5], r5
 6931                             		.loc 2 7130 9 discriminator 6
 6932 0339 62 15                   		add	#1, r5
 6933 033b EF 52                   		mov.L	r5, r2
 6934 033d ED A1 07                		mov.L	28[r10], r1
 6935 0340 05 00 00 00             		bsr	_sp_init_size
7131:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SMALL_STACK) || defined(SP_ALLOC)) && \
7132:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_SP_NO_MALLOC)
7133:../src/wolfcrypt/src/sp_int.c ****         if ((rem == NULL) || (rem == d)) {
 6936                             		.loc 2 7133 12 discriminator 6
 6937 0344 ED A5 1F                		mov.L	124[r10], r5
 6938 0347 61 05                   		cmp	#0, r5
 6939 0349 20 0C                   		beq	.L479
 6940                             		.loc 2 7133 27 discriminator 1
 6941 034b ED A4 1F                		mov.L	124[r10], r4
 6942 034e ED A5 1D                		mov.L	116[r10], r5
 6943 0351 47 54                   		cmp	r5, r4
 6944 0353 21 12                   		bne	.L480
 6945                             	.L479:
7134:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(sa, a->used + 1);
 6946                             		.loc 2 7134 31
 6947 0355 ED A5 1C                		mov.L	112[r10], r5
 6948 0358 EC 55                   		mov.L	[r5], r5
 6949                             		.loc 2 7134 13
 6950 035a 62 15                   		add	#1, r5
 6951 035c EF 52                   		mov.L	r5, r2
 6952 035e ED A1 05                		mov.L	20[r10], r1
 6953 0361 05 00 00 00             		bsr	_sp_init_size
 6954                             	.L480:
7135:../src/wolfcrypt/src/sp_int.c ****         }
7136:../src/wolfcrypt/src/sp_int.c ****         if ((r == NULL) || (r == d)) {
 6955                             		.loc 2 7136 12
 6956 0365 ED A5 1E                		mov.L	120[r10], r5
 6957 0368 61 05                   		cmp	#0, r5
 6958 036a 20 0C                   		beq	.L481
 6959                             		.loc 2 7136 25 discriminator 1
 6960 036c ED A4 1E                		mov.L	120[r10], r4
 6961 036f ED A5 1D                		mov.L	116[r10], r5
 6962 0372 47 54                   		cmp	r5, r4
 6963 0374 21 1A                   		bne	.L482
 6964                             	.L481:
7137:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(tr, a->used - d->used + 2);
 6965                             		.loc 2 7137 31
 6966 0376 ED A5 1C                		mov.L	112[r10], r5
 6967 0379 EC 54                   		mov.L	[r5], r4
 6968                             		.loc 2 7137 41
 6969 037b ED A5 1D                		mov.L	116[r10], r5
 6970 037e EC 55                   		mov.L	[r5], r5
 6971                             		.loc 2 7137 38
 6972 0380 FF 05 54                		sub	r5, r4, r5
 6973                             		.loc 2 7137 13
 6974 0383 62 25                   		add	#2, r5
 6975 0385 EF 52                   		mov.L	r5, r2
 6976 0387 ED A1 06                		mov.L	24[r10], r1
 6977 038a 05 00 00 00             		bsr	_sp_init_size
 6978                             	.L482:
7138:../src/wolfcrypt/src/sp_int.c ****         }
7139:../src/wolfcrypt/src/sp_int.c **** #else
7140:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(sa, a->used + 1);
7141:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(tr, a->used - d->used + 2);
7142:../src/wolfcrypt/src/sp_int.c **** #endif
7143:../src/wolfcrypt/src/sp_int.c **** 
7144:../src/wolfcrypt/src/sp_int.c ****         s = sp_count_bits(d);
 6979                             		.loc 2 7144 13
 6980 038e ED A1 1D                		mov.L	116[r10], r1
 6981 0391 05 00 00 00             		bsr	_sp_count_bits
 6982 0395 E7 A1 03                		mov.L	r1, 12[r10]
7145:../src/wolfcrypt/src/sp_int.c ****         s = SP_WORD_SIZE - (s & SP_WORD_MASK);
 6983                             		.loc 2 7145 31
 6984 0398 ED A5 03                		mov.L	12[r10], r5
 6985 039b 75 44 1F                		mov.L	#31, r4
 6986 039e 53 54                   		and	r5, r4
 6987                             		.loc 2 7145 11
 6988 03a0 75 45 20                		mov.L	#32, r5
 6989 03a3 43 45                   		sub	r4, r5
 6990 03a5 E7 A5 03                		mov.L	r5, 12[r10]
7146:../src/wolfcrypt/src/sp_int.c ****         sp_copy(a, sa);
 6991                             		.loc 2 7146 9
 6992 03a8 ED A2 05                		mov.L	20[r10], r2
 6993 03ab ED A1 1C                		mov.L	112[r10], r1
 6994 03ae 05 00 00 00             		bsr	_sp_copy
7147:../src/wolfcrypt/src/sp_int.c ****         if (s != SP_WORD_SIZE) {
 6995                             		.loc 2 7147 12
 6996 03b2 ED A5 03                		mov.L	12[r10], r5
 6997 03b5 75 55 20                		cmp	#32, r5
 6998 03b8 20 30                   		beq	.L472
7148:../src/wolfcrypt/src/sp_int.c ****             err = sp_lshb(sa, s);
 6999                             		.loc 2 7148 19
 7000 03ba ED A2 03                		mov.L	12[r10], r2
 7001 03bd ED A1 05                		mov.L	20[r10], r1
 7002 03c0 05 00 00 00             		bsr	_sp_lshb
 7003 03c4 E3 A1                   		mov.L	r1, [r10]
7149:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 7004                             		.loc 2 7149 16
 7005 03c6 EC A5                   		mov.L	[r10], r5
 7006 03c8 61 05                   		cmp	#0, r5
 7007 03ca 21 1E                   		bne	.L472
7150:../src/wolfcrypt/src/sp_int.c ****                 sp_copy(d, sd);
 7008                             		.loc 2 7150 17
 7009 03cc ED A2 12                		mov.L	72[r10], r2
 7010 03cf ED A1 1D                		mov.L	116[r10], r1
 7011 03d2 05 00 00 00             		bsr	_sp_copy
7151:../src/wolfcrypt/src/sp_int.c ****                 d = sd;
 7012                             		.loc 2 7151 19
 7013 03d6 ED A5 12                		mov.L	72[r10], r5
 7014 03d9 E7 A5 1D                		mov.L	r5, 116[r10]
7152:../src/wolfcrypt/src/sp_int.c ****                 err = sp_lshb(sd, s);
 7015                             		.loc 2 7152 23
 7016 03dc ED A2 03                		mov.L	12[r10], r2
 7017 03df ED A1 12                		mov.L	72[r10], r1
 7018 03e2 05 00 00 00             		bsr	_sp_lshb
 7019 03e6 E3 A1                   		mov.L	r1, [r10]
 7020                             		.balign 8,3,1
 7021                             	.L472:
7153:../src/wolfcrypt/src/sp_int.c ****             }
7154:../src/wolfcrypt/src/sp_int.c ****         }
7155:../src/wolfcrypt/src/sp_int.c ****     }
7156:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY) && (d->used > 0)) {
 7022                             		.loc 2 7156 8
 7023 03e8 ED A5 01                		mov.L	4[r10], r5
 7024 03eb 61 05                   		cmp	#0, r5
 7025 03ed 3B 06 04                		bne	.L483
 7026                             		.loc 2 7156 17 discriminator 1
 7027 03f0 EC A5                   		mov.L	[r10], r5
 7028 03f2 61 05                   		cmp	#0, r5
 7029 03f4 3B FF 03                		bne	.L483
 7030                             		.loc 2 7156 42 discriminator 2
 7031 03f7 ED A5 1D                		mov.L	116[r10], r5
 7032 03fa EC 55                   		mov.L	[r5], r5
 7033                             		.loc 2 7156 37 discriminator 2
 7034 03fc 61 05                   		cmp	#0, r5
 7035 03fe 2A 05 38 F3 03          		ble	.L483
 7036                             	.LBB45:
7157:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_SMALL
7158:../src/wolfcrypt/src/sp_int.c ****         int c;
7159:../src/wolfcrypt/src/sp_int.c **** #else
7160:../src/wolfcrypt/src/sp_int.c ****         int j;
7161:../src/wolfcrypt/src/sp_int.c ****         int o;
7162:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
7163:../src/wolfcrypt/src/sp_int.c ****         sp_int_sword sw;
7164:../src/wolfcrypt/src/sp_int.c ****     #else
7165:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit sl;
7166:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit sh;
7167:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit st;
7168:../src/wolfcrypt/src/sp_int.c ****     #endif
7169:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_SMALL */
7170:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
7171:../src/wolfcrypt/src/sp_int.c ****         sa->sign = MP_ZPOS;
7172:../src/wolfcrypt/src/sp_int.c ****         sd->sign = MP_ZPOS;
7173:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_INT_NEGATIVE */
7174:../src/wolfcrypt/src/sp_int.c **** 
7175:../src/wolfcrypt/src/sp_int.c ****         tr->used = sa->used - d->used + 1;
 7037                             		.loc 2 7175 22
 7038 0403 ED A5 05                		mov.L	20[r10], r5
 7039 0406 EC 54                   		mov.L	[r5], r4
 7040                             		.loc 2 7175 32
 7041 0408 ED A5 1D                		mov.L	116[r10], r5
 7042 040b EC 55                   		mov.L	[r5], r5
 7043                             		.loc 2 7175 29
 7044 040d FF 05 54                		sub	r5, r4, r5
 7045                             		.loc 2 7175 39
 7046 0410 71 54 01                		add	#1, r5, r4
 7047                             		.loc 2 7175 18
 7048 0413 ED A5 06                		mov.L	24[r10], r5
 7049 0416 E3 54                   		mov.L	r4, [r5]
7176:../src/wolfcrypt/src/sp_int.c ****         sp_clear(tr);
 7050                             		.loc 2 7176 9
 7051 0418 ED A1 06                		mov.L	24[r10], r1
 7052 041b 05 00 00 00             		bsr	_sp_clear
7177:../src/wolfcrypt/src/sp_int.c ****         tr->used = sa->used - d->used + 1;
 7053                             		.loc 2 7177 22
 7054 041f ED A5 05                		mov.L	20[r10], r5
 7055 0422 EC 54                   		mov.L	[r5], r4
 7056                             		.loc 2 7177 32
 7057 0424 ED A5 1D                		mov.L	116[r10], r5
 7058 0427 EC 55                   		mov.L	[r5], r5
 7059                             		.loc 2 7177 29
 7060 0429 FF 05 54                		sub	r5, r4, r5
 7061                             		.loc 2 7177 39
 7062 042c 71 54 01                		add	#1, r5, r4
 7063                             		.loc 2 7177 18
 7064 042f ED A5 06                		mov.L	24[r10], r5
 7065 0432 E3 54                   		mov.L	r4, [r5]
7178:../src/wolfcrypt/src/sp_int.c ****         dt = d->dp[d->used-1];
 7066                             		.loc 2 7178 21
 7067 0434 ED A5 1D                		mov.L	116[r10], r5
 7068 0437 EC 55                   		mov.L	[r5], r5
 7069                             		.loc 2 7178 27
 7070 0439 60 15                   		sub	#1, r5
 7071                             		.loc 2 7178 12
 7072 043b ED A4 1D                		mov.L	116[r10], r4
 7073 043e 62 25                   		add	#2, r5
 7074 0440 FE 65 45                		mov.L	[r5,r4], r5
 7075 0443 E7 A5 15                		mov.L	r5, 84[r10]
7179:../src/wolfcrypt/src/sp_int.c **** 
7180:../src/wolfcrypt/src/sp_int.c ****         for (i = d->used - 1; i > 0; i--) {
 7076                             		.loc 2 7180 19
 7077 0446 ED A5 1D                		mov.L	116[r10], r5
 7078 0449 EC 55                   		mov.L	[r5], r5
 7079                             		.loc 2 7180 16
 7080 044b 60 15                   		sub	#1, r5
 7081 044d E7 A5 02                		mov.L	r5, 8[r10]
 7082                             		.loc 2 7180 9
 7083 0450 2E 32                   		bra	.L484
 7084                             	.L487:
7181:../src/wolfcrypt/src/sp_int.c ****             if (sa->dp[sa->used - d->used + i] != d->dp[i]) {
 7085                             		.loc 2 7181 26
 7086 0452 ED A5 05                		mov.L	20[r10], r5
 7087 0455 EC 54                   		mov.L	[r5], r4
 7088                             		.loc 2 7181 36
 7089 0457 ED A5 1D                		mov.L	116[r10], r5
 7090 045a EC 55                   		mov.L	[r5], r5
 7091                             		.loc 2 7181 33
 7092 045c FF 05 54                		sub	r5, r4, r5
 7093                             		.loc 2 7181 43
 7094 045f 06 89 A5 02             		add	8[r10].L, r5
 7095                             		.loc 2 7181 23
 7096 0463 ED A4 05                		mov.L	20[r10], r4
 7097 0466 62 25                   		add	#2, r5
 7098 0468 FE 65 43                		mov.L	[r5,r4], r3
 7099                             		.loc 2 7181 56
 7100 046b ED A4 1D                		mov.L	116[r10], r4
 7101 046e ED A5 02                		mov.L	8[r10], r5
 7102 0471 62 25                   		add	#2, r5
 7103 0473 FE 65 45                		mov.L	[r5,r4], r5
 7104                             		.loc 2 7181 16
 7105 0476 47 53                   		cmp	r5, r3
 7106 0478 21 13                   		bne	.L513
7180:../src/wolfcrypt/src/sp_int.c ****             if (sa->dp[sa->used - d->used + i] != d->dp[i]) {
 7107                             		.loc 2 7180 39 discriminator 2
 7108 047a ED A5 02                		mov.L	8[r10], r5
 7109 047d 60 15                   		sub	#1, r5
 7110 047f E7 A5 02                		mov.L	r5, 8[r10]
 7111                             	.L484:
7180:../src/wolfcrypt/src/sp_int.c ****             if (sa->dp[sa->used - d->used + i] != d->dp[i]) {
 7112                             		.loc 2 7180 9 discriminator 1
 7113 0482 ED A5 02                		mov.L	8[r10], r5
 7114 0485 61 05                   		cmp	#0, r5
 7115 0487 2A CB                   		bgt	.L487
 7116 0489 2E 03                   		bra	.L486
 7117                             	.L513:
7182:../src/wolfcrypt/src/sp_int.c ****                 break;
 7118                             		.loc 2 7182 17
 7119 048b 03                      		nop
 7120                             	.L486:
7183:../src/wolfcrypt/src/sp_int.c ****             }
7184:../src/wolfcrypt/src/sp_int.c ****         }
7185:../src/wolfcrypt/src/sp_int.c ****         if (sa->dp[sa->used - d->used + i] >= d->dp[i]) {
 7121                             		.loc 2 7185 22
 7122 048c ED A5 05                		mov.L	20[r10], r5
 7123 048f EC 54                   		mov.L	[r5], r4
 7124                             		.loc 2 7185 32
 7125 0491 ED A5 1D                		mov.L	116[r10], r5
 7126 0494 EC 55                   		mov.L	[r5], r5
 7127                             		.loc 2 7185 29
 7128 0496 FF 05 54                		sub	r5, r4, r5
 7129                             		.loc 2 7185 39
 7130 0499 06 89 A5 02             		add	8[r10].L, r5
 7131                             		.loc 2 7185 19
 7132 049d ED A4 05                		mov.L	20[r10], r4
 7133 04a0 62 25                   		add	#2, r5
 7134 04a2 FE 65 43                		mov.L	[r5,r4], r3
 7135                             		.loc 2 7185 52
 7136 04a5 ED A4 1D                		mov.L	116[r10], r4
 7137 04a8 ED A5 02                		mov.L	8[r10], r5
 7138 04ab 62 25                   		add	#2, r5
 7139 04ad FE 65 45                		mov.L	[r5,r4], r5
 7140                             		.loc 2 7185 12
 7141 04b0 47 53                   		cmp	r5, r3
 7142 04b2 23 4C                   		bltu	.L488
7186:../src/wolfcrypt/src/sp_int.c ****             i = sa->used;
 7143                             		.loc 2 7186 15
 7144 04b4 ED A5 05                		mov.L	20[r10], r5
 7145 04b7 EC 55                   		mov.L	[r5], r5
 7146 04b9 E7 A5 02                		mov.L	r5, 8[r10]
7187:../src/wolfcrypt/src/sp_int.c ****             _sp_sub_off(sa, d, sa, sa->used - d->used);
 7147                             		.loc 2 7187 38
 7148 04bc ED A5 05                		mov.L	20[r10], r5
 7149 04bf EC 54                   		mov.L	[r5], r4
 7150                             		.loc 2 7187 48
 7151 04c1 ED A5 1D                		mov.L	116[r10], r5
 7152 04c4 EC 55                   		mov.L	[r5], r5
 7153                             		.loc 2 7187 13
 7154 04c6 FF 05 54                		sub	r5, r4, r5
 7155 04c9 EF 54                   		mov.L	r5, r4
 7156 04cb ED A3 05                		mov.L	20[r10], r3
 7157 04ce ED A2 1D                		mov.L	116[r10], r2
 7158 04d1 ED A1 05                		mov.L	20[r10], r1
 7159 04d4 05 00 00 00             		bsr	__sp_sub_off
7188:../src/wolfcrypt/src/sp_int.c ****             /* Keep the same used so that 0 zeros will be put in. */
7189:../src/wolfcrypt/src/sp_int.c ****             sa->used = i;
 7160                             		.loc 2 7189 22
 7161 04d8 ED A5 05                		mov.L	20[r10], r5
 7162 04db ED A4 02                		mov.L	8[r10], r4
 7163 04de E3 54                   		mov.L	r4, [r5]
7190:../src/wolfcrypt/src/sp_int.c ****             if (r != NULL) {
 7164                             		.loc 2 7190 16
 7165 04e0 ED A5 1E                		mov.L	120[r10], r5
 7166 04e3 61 05                   		cmp	#0, r5
 7167 04e5 20 19                   		beq	.L488
7191:../src/wolfcrypt/src/sp_int.c ****                 tr->dp[sa->used - d->used] = 1;
 7168                             		.loc 2 7191 26
 7169 04e7 ED A5 05                		mov.L	20[r10], r5
 7170 04ea EC 54                   		mov.L	[r5], r4
 7171                             		.loc 2 7191 36
 7172 04ec ED A5 1D                		mov.L	116[r10], r5
 7173 04ef EC 55                   		mov.L	[r5], r5
 7174                             		.loc 2 7191 33
 7175 04f1 FF 05 54                		sub	r5, r4, r5
 7176                             		.loc 2 7191 44
 7177 04f4 ED A4 06                		mov.L	24[r10], r4
 7178 04f7 62 25                   		add	#2, r5
 7179 04f9 66 17                   		mov.L	#1, r7
 7180 04fb FE 25 47                		mov.L	r7, [r5,r4]
 7181                             	.L488:
7192:../src/wolfcrypt/src/sp_int.c ****             }
7193:../src/wolfcrypt/src/sp_int.c ****         }
7194:../src/wolfcrypt/src/sp_int.c ****         for (i = sa->used - 1; i >= d->used; i--) {
 7182                             		.loc 2 7194 20
 7183 04fe ED A5 05                		mov.L	20[r10], r5
 7184 0501 EC 55                   		mov.L	[r5], r5
 7185                             		.loc 2 7194 16
 7186 0503 60 15                   		sub	#1, r5
 7187 0505 E7 A5 02                		mov.L	r5, 8[r10]
 7188                             		.loc 2 7194 9
 7189 0508 38 26 02                		bra	.L489
 7190                             	.L502:
7195:../src/wolfcrypt/src/sp_int.c ****             if (sa->dp[i] == dt) {
 7191                             		.loc 2 7195 23
 7192 050b ED A4 05                		mov.L	20[r10], r4
 7193 050e ED A5 02                		mov.L	8[r10], r5
 7194 0511 62 25                   		add	#2, r5
 7195 0513 FE 65 44                		mov.L	[r5,r4], r4
 7196                             		.loc 2 7195 16
 7197 0516 ED A5 15                		mov.L	84[r10], r5
 7198 0519 47 45                   		cmp	r4, r5
 7199 051b 1F                      		bne	.L490
7196:../src/wolfcrypt/src/sp_int.c ****                 t = SP_DIGIT_MAX;
 7200                             		.loc 2 7196 19
 7201 051c F9 A6 04 FF             		mov.L	#-1, 16[r10]
 7202 0520 2E 26                   		bra	.L491
 7203                             	.L490:
7197:../src/wolfcrypt/src/sp_int.c ****             }
7198:../src/wolfcrypt/src/sp_int.c ****             else {
7199:../src/wolfcrypt/src/sp_int.c ****                 t = sp_div_word(sa->dp[i], sa->dp[i-1], dt);
 7204                             		.loc 2 7199 21
 7205 0522 ED A4 05                		mov.L	20[r10], r4
 7206 0525 ED A5 02                		mov.L	8[r10], r5
 7207 0528 62 25                   		add	#2, r5
 7208 052a FE 65 41                		mov.L	[r5,r4], r1
 7209                             		.loc 2 7199 52
 7210 052d ED A5 02                		mov.L	8[r10], r5
 7211 0530 60 15                   		sub	#1, r5
 7212                             		.loc 2 7199 21
 7213 0532 ED A4 05                		mov.L	20[r10], r4
 7214 0535 62 25                   		add	#2, r5
 7215 0537 FE 65 45                		mov.L	[r5,r4], r5
 7216 053a ED A3 15                		mov.L	84[r10], r3
 7217 053d EF 52                   		mov.L	r5, r2
 7218 053f 05 00 00 00             		bsr	_sp_div_word
 7219 0543 E7 A1 04                		mov.L	r1, 16[r10]
 7220                             	.L491:
7200:../src/wolfcrypt/src/sp_int.c ****             }
7201:../src/wolfcrypt/src/sp_int.c **** 
7202:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_SMALL
7203:../src/wolfcrypt/src/sp_int.c ****             do {
7204:../src/wolfcrypt/src/sp_int.c ****                 err = _sp_mul_d(d, t, trial, i - d->used);
7205:../src/wolfcrypt/src/sp_int.c ****                 if (err != MP_OKAY) {
7206:../src/wolfcrypt/src/sp_int.c ****                     break;
7207:../src/wolfcrypt/src/sp_int.c ****                 }
7208:../src/wolfcrypt/src/sp_int.c ****                 c = _sp_cmp_abs(trial, sa);
7209:../src/wolfcrypt/src/sp_int.c ****                 if (c == MP_GT) {
7210:../src/wolfcrypt/src/sp_int.c ****                     t--;
7211:../src/wolfcrypt/src/sp_int.c ****                 }
7212:../src/wolfcrypt/src/sp_int.c ****             }
7213:../src/wolfcrypt/src/sp_int.c ****             while (c == MP_GT);
7214:../src/wolfcrypt/src/sp_int.c **** 
7215:../src/wolfcrypt/src/sp_int.c ****             if (err != MP_OKAY) {
7216:../src/wolfcrypt/src/sp_int.c ****                 break;
7217:../src/wolfcrypt/src/sp_int.c ****             }
7218:../src/wolfcrypt/src/sp_int.c **** 
7219:../src/wolfcrypt/src/sp_int.c ****             _sp_sub_off(sa, trial, sa, 0);
7220:../src/wolfcrypt/src/sp_int.c ****             tr->dp[i - d->used] += t;
7221:../src/wolfcrypt/src/sp_int.c ****             if (tr->dp[i - d->used] < t) {
7222:../src/wolfcrypt/src/sp_int.c ****                 tr->dp[i + 1 - d->used]++;
7223:../src/wolfcrypt/src/sp_int.c ****             }
7224:../src/wolfcrypt/src/sp_int.c **** #else
7225:../src/wolfcrypt/src/sp_int.c ****             o = i - d->used;
 7221                             		.loc 2 7225 22
 7222 0546 ED A5 1D                		mov.L	116[r10], r5
 7223 0549 EC 54                   		mov.L	[r5], r4
 7224                             		.loc 2 7225 15
 7225 054b ED A5 02                		mov.L	8[r10], r5
 7226 054e 43 45                   		sub	r4, r5
 7227 0550 E7 A5 16                		mov.L	r5, 88[r10]
 7228                             	.L499:
 7229                             	.LBB46:
7226:../src/wolfcrypt/src/sp_int.c ****             do {
7227:../src/wolfcrypt/src/sp_int.c ****             #ifndef SQR_MUL_ASM
7228:../src/wolfcrypt/src/sp_int.c ****                 sp_int_word tw = 0;
 7230                             		.loc 2 7228 29
 7231 0553 F9 A6 0E 00             		mov.L	#0, 56[r10]
 7232 0557 F9 A6 0F 00             		mov.L	#0, 60[r10]
7229:../src/wolfcrypt/src/sp_int.c ****             #else
7230:../src/wolfcrypt/src/sp_int.c ****                 sp_int_digit tl = 0;
7231:../src/wolfcrypt/src/sp_int.c ****                 sp_int_digit th = 0;
7232:../src/wolfcrypt/src/sp_int.c ****             #endif
7233:../src/wolfcrypt/src/sp_int.c ****                 for (j = 0; j < d->used; j++) {
 7233                             		.loc 2 7233 24
 7234 055b F9 A6 0B 00             		mov.L	#0, 44[r10]
 7235                             		.loc 2 7233 17
 7236 055f 2E 6B                   		bra	.L492
 7237                             	.L493:
7234:../src/wolfcrypt/src/sp_int.c ****                 #ifndef SQR_MUL_ASM
7235:../src/wolfcrypt/src/sp_int.c ****                     tw += (sp_int_word)d->dp[j] * t;
 7238                             		.loc 2 7235 45 discriminator 3
 7239 0561 ED A4 1D                		mov.L	116[r10], r4
 7240 0564 ED A5 0B                		mov.L	44[r10], r5
 7241 0567 62 25                   		add	#2, r5
 7242 0569 FE 65 45                		mov.L	[r5,r4], r5
 7243                             		.loc 2 7235 27 discriminator 3
 7244 056c EF 5B                   		mov.L	r5, r11
 7245 056e 66 0C                   		mov.L	#0, r12
 7246                             		.loc 2 7235 49 discriminator 3
 7247 0570 ED A5 04                		mov.L	16[r10], r5
 7248 0573 EF 58                   		mov.L	r5, r8
 7249 0575 66 09                   		mov.L	#0, r9
 7250 0577 FF 34 8C                		mul	r8, r12, r4
 7251 057a FF 35 B9                		mul	r11, r9, r5
 7252 057d 4B 45                   		add	r4, r5
 7253 057f EF BD                   		mov.L	r11, r13
 7254 0581 FC 1F 8D                		emulu	r8, r13
 7255 0584 EF D3                   		mov.L	r13, r3
 7256 0586 EF E4                   		mov.L	r14, r4
 7257 0588 4B 45                   		add	r4, r5
 7258 058a EF 54                   		mov.L	r5, r4
 7259                             		.loc 2 7235 24 discriminator 3
 7260 058c ED A5 0E                		mov.L	56[r10], r5
 7261 058f ED A6 0F                		mov.L	60[r10], r6
 7262 0592 EF 67                   		mov.L	r6, r7
 7263 0594 FF 2E 35                		add	r3, r5, r14
 7264 0597 FC 0B 47                		adc	r4, r7
 7265 059a E7 A7 25                		mov.L	r7, 148[r10]
 7266 059d E7 AE 24                		mov.L	r14, 144[r10]
 7267 05a0 E5 AA 24 0E             		mov.L	144[r10], 56[r10]
 7268 05a4 E5 AA 25 0F             		mov.L	148[r10], 60[r10]
7236:../src/wolfcrypt/src/sp_int.c ****                     trial->dp[j] = (sp_int_digit)tw;
 7269                             		.loc 2 7236 36 discriminator 3
 7270 05a8 ED A3 0E                		mov.L	56[r10], r3
 7271                             		.loc 2 7236 34 discriminator 3
 7272 05ab ED A4 07                		mov.L	28[r10], r4
 7273 05ae ED A5 0B                		mov.L	44[r10], r5
 7274 05b1 62 25                   		add	#2, r5
 7275 05b3 FE 25 43                		mov.L	r3, [r5,r4]
7237:../src/wolfcrypt/src/sp_int.c ****                     tw >>= SP_WORD_SIZE;
 7276                             		.loc 2 7237 24 discriminator 3
 7277 05b6 ED A5 0F                		mov.L	60[r10], r5
 7278 05b9 68 05                   		shlr	#0, r5
 7279 05bb E7 A5 0E                		mov.L	r5, 56[r10]
 7280 05be F9 A6 0F 00             		mov.L	#0, 60[r10]
7233:../src/wolfcrypt/src/sp_int.c ****                 #ifndef SQR_MUL_ASM
 7281                             		.loc 2 7233 43 discriminator 3
 7282 05c2 ED A5 0B                		mov.L	44[r10], r5
 7283 05c5 62 15                   		add	#1, r5
 7284 05c7 E7 A5 0B                		mov.L	r5, 44[r10]
 7285                             	.L492:
7233:../src/wolfcrypt/src/sp_int.c ****                 #ifndef SQR_MUL_ASM
 7286                             		.loc 2 7233 34 discriminator 1
 7287 05ca ED A5 1D                		mov.L	116[r10], r5
 7288 05cd EC 54                   		mov.L	[r5], r4
7233:../src/wolfcrypt/src/sp_int.c ****                 #ifndef SQR_MUL_ASM
 7289                             		.loc 2 7233 17 discriminator 1
 7290 05cf ED A5 0B                		mov.L	44[r10], r5
 7291 05d2 47 45                   		cmp	r4, r5
 7292 05d4 29 8D                   		blt	.L493
7238:../src/wolfcrypt/src/sp_int.c ****                 #else
7239:../src/wolfcrypt/src/sp_int.c ****                     SP_ASM_MUL_ADD_NO(tl, th, d->dp[j], t);
7240:../src/wolfcrypt/src/sp_int.c ****                     trial->dp[j] = tl;
7241:../src/wolfcrypt/src/sp_int.c ****                     tl = th;
7242:../src/wolfcrypt/src/sp_int.c ****                     th = 0;
7243:../src/wolfcrypt/src/sp_int.c ****                 #endif
7244:../src/wolfcrypt/src/sp_int.c ****                 }
7245:../src/wolfcrypt/src/sp_int.c ****               #ifndef SQR_MUL_ASM
7246:../src/wolfcrypt/src/sp_int.c ****                 trial->dp[j] = (sp_int_digit)tw;
 7293                             		.loc 2 7246 32
 7294 05d6 ED A3 0E                		mov.L	56[r10], r3
 7295                             		.loc 2 7246 30
 7296 05d9 ED A4 07                		mov.L	28[r10], r4
 7297 05dc ED A5 0B                		mov.L	44[r10], r5
 7298 05df 62 25                   		add	#2, r5
 7299 05e1 FE 25 43                		mov.L	r3, [r5,r4]
7247:../src/wolfcrypt/src/sp_int.c ****               #else
7248:../src/wolfcrypt/src/sp_int.c ****                 trial->dp[j] = tl;
7249:../src/wolfcrypt/src/sp_int.c ****               #endif
7250:../src/wolfcrypt/src/sp_int.c **** 
7251:../src/wolfcrypt/src/sp_int.c ****                 for (j = d->used; j > 0; j--) {
 7300                             		.loc 2 7251 24
 7301 05e4 ED A5 1D                		mov.L	116[r10], r5
 7302 05e7 EC 55                   		mov.L	[r5], r5
 7303 05e9 E7 A5 0B                		mov.L	r5, 44[r10]
 7304                             		.loc 2 7251 17
 7305 05ec 2E 28                   		bra	.L494
 7306                             	.L497:
7252:../src/wolfcrypt/src/sp_int.c ****                     if (trial->dp[j] != sa->dp[j + o]) {
 7307                             		.loc 2 7252 34
 7308 05ee ED A4 07                		mov.L	28[r10], r4
 7309 05f1 ED A5 0B                		mov.L	44[r10], r5
 7310 05f4 62 25                   		add	#2, r5
 7311 05f6 FE 65 43                		mov.L	[r5,r4], r3
 7312                             		.loc 2 7252 50
 7313 05f9 ED A5 0B                		mov.L	44[r10], r5
 7314 05fc 06 89 A5 16             		add	88[r10].L, r5
 7315                             		.loc 2 7252 47
 7316 0600 ED A4 05                		mov.L	20[r10], r4
 7317 0603 62 25                   		add	#2, r5
 7318 0605 FE 65 45                		mov.L	[r5,r4], r5
 7319                             		.loc 2 7252 24
 7320 0608 47 53                   		cmp	r5, r3
 7321 060a 21 13                   		bne	.L514
7251:../src/wolfcrypt/src/sp_int.c ****                     if (trial->dp[j] != sa->dp[j + o]) {
 7322                             		.loc 2 7251 43 discriminator 2
 7323 060c ED A5 0B                		mov.L	44[r10], r5
 7324 060f 60 15                   		sub	#1, r5
 7325 0611 E7 A5 0B                		mov.L	r5, 44[r10]
 7326                             	.L494:
7251:../src/wolfcrypt/src/sp_int.c ****                     if (trial->dp[j] != sa->dp[j + o]) {
 7327                             		.loc 2 7251 17 discriminator 1
 7328 0614 ED A5 0B                		mov.L	44[r10], r5
 7329 0617 61 05                   		cmp	#0, r5
 7330 0619 2A D5                   		bgt	.L497
 7331 061b 2E 03                   		bra	.L496
 7332                             	.L514:
7253:../src/wolfcrypt/src/sp_int.c ****                         break;
 7333                             		.loc 2 7253 25
 7334 061d 03                      		nop
 7335                             	.L496:
7254:../src/wolfcrypt/src/sp_int.c ****                     }
7255:../src/wolfcrypt/src/sp_int.c ****                 }
7256:../src/wolfcrypt/src/sp_int.c ****                 if (trial->dp[j] > sa->dp[j + o]) {
 7336                             		.loc 2 7256 30
 7337 061e ED A4 07                		mov.L	28[r10], r4
 7338 0621 ED A5 0B                		mov.L	44[r10], r5
 7339 0624 62 25                   		add	#2, r5
 7340 0626 FE 65 43                		mov.L	[r5,r4], r3
 7341                             		.loc 2 7256 45
 7342 0629 ED A5 0B                		mov.L	44[r10], r5
 7343 062c 06 89 A5 16             		add	88[r10].L, r5
 7344                             		.loc 2 7256 42
 7345 0630 ED A4 05                		mov.L	20[r10], r4
 7346 0633 62 25                   		add	#2, r5
 7347 0635 FE 65 45                		mov.L	[r5,r4], r5
 7348                             		.loc 2 7256 20
 7349 0638 47 53                   		cmp	r5, r3
 7350 063a 25 0A                   		bleu	.L498
7257:../src/wolfcrypt/src/sp_int.c ****                     t--;
 7351                             		.loc 2 7257 22
 7352 063c ED A5 04                		mov.L	16[r10], r5
 7353 063f 60 15                   		sub	#1, r5
 7354 0641 E7 A5 04                		mov.L	r5, 16[r10]
 7355                             	.L498:
 7356                             	.LBE46:
7258:../src/wolfcrypt/src/sp_int.c ****                 }
7259:../src/wolfcrypt/src/sp_int.c ****             }
7260:../src/wolfcrypt/src/sp_int.c ****             while (trial->dp[j] > sa->dp[j + o]);
 7357                             		.loc 2 7260 29
 7358 0644 ED A4 07                		mov.L	28[r10], r4
 7359 0647 ED A5 0B                		mov.L	44[r10], r5
 7360 064a 62 25                   		add	#2, r5
 7361 064c FE 65 43                		mov.L	[r5,r4], r3
 7362                             		.loc 2 7260 44
 7363 064f ED A5 0B                		mov.L	44[r10], r5
 7364 0652 06 89 A5 16             		add	88[r10].L, r5
 7365                             		.loc 2 7260 41
 7366 0656 ED A4 05                		mov.L	20[r10], r4
 7367 0659 62 25                   		add	#2, r5
 7368 065b FE 65 45                		mov.L	[r5,r4], r5
 7369                             		.loc 2 7260 13
 7370 065e 47 53                   		cmp	r5, r3
 7371 0660 25 05 38 F1 FE          		bgtu	.L499
7261:../src/wolfcrypt/src/sp_int.c **** 
7262:../src/wolfcrypt/src/sp_int.c ****         #ifndef SQR_MUL_ASM
7263:../src/wolfcrypt/src/sp_int.c ****             sw = 0;
 7372                             		.loc 2 7263 16
 7373 0665 F9 A6 0C 00             		mov.L	#0, 48[r10]
 7374 0669 F9 A6 0D 00             		mov.L	#0, 52[r10]
7264:../src/wolfcrypt/src/sp_int.c ****         #else
7265:../src/wolfcrypt/src/sp_int.c ****             sl = 0;
7266:../src/wolfcrypt/src/sp_int.c ****             sh = 0;
7267:../src/wolfcrypt/src/sp_int.c ****         #endif
7268:../src/wolfcrypt/src/sp_int.c ****             for (j = 0; j <= d->used; j++) {
 7375                             		.loc 2 7268 20
 7376 066d F9 A6 0B 00             		mov.L	#0, 44[r10]
 7377                             		.loc 2 7268 13
 7378 0671 38 98 00                		bra	.L500
 7379                             	.L501:
7269:../src/wolfcrypt/src/sp_int.c ****             #ifndef SQR_MUL_ASM
7270:../src/wolfcrypt/src/sp_int.c ****                 sw += sa->dp[j + o];
 7380                             		.loc 2 7270 32 discriminator 3
 7381 0674 ED A5 0B                		mov.L	44[r10], r5
 7382 0677 06 89 A5 16             		add	88[r10].L, r5
 7383                             		.loc 2 7270 29 discriminator 3
 7384 067b ED A4 05                		mov.L	20[r10], r4
 7385 067e 62 25                   		add	#2, r5
 7386 0680 FE 65 45                		mov.L	[r5,r4], r5
 7387 0683 E7 A5 20                		mov.L	r5, 128[r10]
 7388 0686 F9 A6 21 00             		mov.L	#0, 132[r10]
 7389                             		.loc 2 7270 20 discriminator 3
 7390 068a ED A5 0C                		mov.L	48[r10], r5
 7391 068d ED A6 0D                		mov.L	52[r10], r6
 7392 0690 EF 64                   		mov.L	r6, r4
 7393 0692 ED A7 20                		mov.L	128[r10], r7
 7394 0695 FF 2E 75                		add	r7, r5, r14
 7395 0698 06 A1 02 A4 21          		adc 132[r10],r4
 7396 069d E7 A4 27                		mov.L	r4, 156[r10]
 7397 06a0 E7 AE 26                		mov.L	r14, 152[r10]
 7398 06a3 E5 AA 26 0C             		mov.L	152[r10], 48[r10]
 7399 06a7 E5 AA 27 0D             		mov.L	156[r10], 52[r10]
7271:../src/wolfcrypt/src/sp_int.c ****                 sw -= trial->dp[j];
 7400                             		.loc 2 7271 32 discriminator 3
 7401 06ab ED A4 07                		mov.L	28[r10], r4
 7402 06ae ED A5 0B                		mov.L	44[r10], r5
 7403 06b1 62 25                   		add	#2, r5
 7404 06b3 FE 65 45                		mov.L	[r5,r4], r5
 7405 06b6 E7 A5 22                		mov.L	r5, 136[r10]
 7406 06b9 F9 A6 23 00             		mov.L	#0, 140[r10]
 7407                             		.loc 2 7271 20 discriminator 3
 7408 06bd ED A5 0C                		mov.L	48[r10], r5
 7409 06c0 ED A6 0D                		mov.L	52[r10], r6
 7410 06c3 EF 6E                   		mov.L	r6, r14
 7411 06c5 ED A4 22                		mov.L	136[r10], r4
 7412 06c8 ED A7 23                		mov.L	140[r10], r7
 7413 06cb FF 0D 45                		sub	r4, r5, r13
 7414 06ce FC 03 7E                		sbb	r7, r14
 7415 06d1 E7 AE 29                		mov.L	r14, 164[r10]
 7416 06d4 E7 AD 28                		mov.L	r13, 160[r10]
 7417 06d7 E5 AA 28 0C             		mov.L	160[r10], 48[r10]
 7418 06db E5 AA 29 0D             		mov.L	164[r10], 52[r10]
7272:../src/wolfcrypt/src/sp_int.c ****                 sa->dp[j + o] = (sp_int_digit)sw;
 7419                             		.loc 2 7272 26 discriminator 3
 7420 06df ED A5 0B                		mov.L	44[r10], r5
 7421 06e2 06 89 A5 16             		add	88[r10].L, r5
 7422                             		.loc 2 7272 33 discriminator 3
 7423 06e6 ED A3 0C                		mov.L	48[r10], r3
 7424                             		.loc 2 7272 31 discriminator 3
 7425 06e9 ED A4 05                		mov.L	20[r10], r4
 7426 06ec 62 25                   		add	#2, r5
 7427 06ee FE 25 43                		mov.L	r3, [r5,r4]
7273:../src/wolfcrypt/src/sp_int.c ****                 sw >>= SP_WORD_SIZE;
 7428                             		.loc 2 7273 20 discriminator 3
 7429 06f1 ED A5 0D                		mov.L	52[r10], r5
 7430 06f4 6A 05                   		shar	#0, r5
 7431 06f6 E7 A5 0C                		mov.L	r5, 48[r10]
 7432 06f9 ED A5 0D                		mov.L	52[r10], r5
 7433 06fc 6B F5                   		shar	#31, r5
 7434 06fe E7 A5 0D                		mov.L	r5, 52[r10]
7268:../src/wolfcrypt/src/sp_int.c ****             #ifndef SQR_MUL_ASM
 7435                             		.loc 2 7268 40 discriminator 3
 7436 0701 ED A5 0B                		mov.L	44[r10], r5
 7437 0704 62 15                   		add	#1, r5
 7438 0706 E7 A5 0B                		mov.L	r5, 44[r10]
 7439                             	.L500:
7268:../src/wolfcrypt/src/sp_int.c ****             #ifndef SQR_MUL_ASM
 7440                             		.loc 2 7268 31 discriminator 1
 7441 0709 ED A5 1D                		mov.L	116[r10], r5
 7442 070c EC 54                   		mov.L	[r5], r4
7268:../src/wolfcrypt/src/sp_int.c ****             #ifndef SQR_MUL_ASM
 7443                             		.loc 2 7268 13 discriminator 1
 7444 070e ED A5 0B                		mov.L	44[r10], r5
 7445 0711 47 45                   		cmp	r4, r5
 7446 0713 2A 05 38 5F FF          		ble	.L501
7274:../src/wolfcrypt/src/sp_int.c ****             #else
7275:../src/wolfcrypt/src/sp_int.c ****                 st = sa->dp[j + o];
7276:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(sl, sh, st);
7277:../src/wolfcrypt/src/sp_int.c ****                 st = trial->dp[j];
7278:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_SUBC(sl, sh, st);
7279:../src/wolfcrypt/src/sp_int.c ****                 sa->dp[j + o] = sl;
7280:../src/wolfcrypt/src/sp_int.c ****                 sl = sh;
7281:../src/wolfcrypt/src/sp_int.c ****                 sh = (sp_int_digit)0 - (sl >> (SP_WORD_SIZE - 1));
7282:../src/wolfcrypt/src/sp_int.c ****             #endif
7283:../src/wolfcrypt/src/sp_int.c ****             }
7284:../src/wolfcrypt/src/sp_int.c **** 
7285:../src/wolfcrypt/src/sp_int.c ****             tr->dp[o] = t;
 7447                             		.loc 2 7285 23 discriminator 2
 7448 0718 ED A3 06                		mov.L	24[r10], r3
 7449 071b ED A5 16                		mov.L	88[r10], r5
 7450 071e 62 25                   		add	#2, r5
 7451 0720 ED A4 04                		mov.L	16[r10], r4
 7452 0723 FE 25 34                		mov.L	r4, [r5,r3]
7194:../src/wolfcrypt/src/sp_int.c ****             if (sa->dp[i] == dt) {
 7453                             		.loc 2 7194 47 discriminator 2
 7454 0726 ED A5 02                		mov.L	8[r10], r5
 7455 0729 60 15                   		sub	#1, r5
 7456 072b E7 A5 02                		mov.L	r5, 8[r10]
 7457                             	.L489:
7194:../src/wolfcrypt/src/sp_int.c ****             if (sa->dp[i] == dt) {
 7458                             		.loc 2 7194 38 discriminator 1
 7459 072e ED A5 1D                		mov.L	116[r10], r5
 7460 0731 EC 54                   		mov.L	[r5], r4
7194:../src/wolfcrypt/src/sp_int.c ****             if (sa->dp[i] == dt) {
 7461                             		.loc 2 7194 9 discriminator 1
 7462 0733 ED A5 02                		mov.L	8[r10], r5
 7463 0736 47 45                   		cmp	r4, r5
 7464 0738 29 05 38 D1 FD          		bge	.L502
7286:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_SMALL */
7287:../src/wolfcrypt/src/sp_int.c ****         }
7288:../src/wolfcrypt/src/sp_int.c ****         sa->used = i + 1;
 7465                             		.loc 2 7288 22
 7466 073d ED A5 02                		mov.L	8[r10], r5
 7467 0740 71 54 01                		add	#1, r5, r4
 7468                             		.loc 2 7288 18
 7469 0743 ED A5 05                		mov.L	20[r10], r5
 7470 0746 E3 54                   		mov.L	r4, [r5]
7289:../src/wolfcrypt/src/sp_int.c **** 
7290:../src/wolfcrypt/src/sp_int.c ****         if ((err == MP_OKAY) && (rem != NULL)) {
 7471                             		.loc 2 7290 12
 7472 0748 EC A5                   		mov.L	[r10], r5
 7473 074a 61 05                   		cmp	#0, r5
 7474 074c 21 5C                   		bne	.L503
 7475                             		.loc 2 7290 30 discriminator 1
 7476 074e ED A5 1F                		mov.L	124[r10], r5
 7477 0751 61 05                   		cmp	#0, r5
 7478 0753 20 55                   		beq	.L503
7291:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
7292:../src/wolfcrypt/src/sp_int.c ****             sa->sign = (sa->used == 0) ? MP_ZPOS : aSign;
7293:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_INT_NEGATIVE */
7294:../src/wolfcrypt/src/sp_int.c ****             if (s != SP_WORD_SIZE) {
 7479                             		.loc 2 7294 16
 7480 0755 ED A5 03                		mov.L	12[r10], r5
 7481 0758 75 55 20                		cmp	#32, r5
 7482 075b 20 0F                   		beq	.L504
7295:../src/wolfcrypt/src/sp_int.c ****                 sp_rshb(sa, s, sa);
 7483                             		.loc 2 7295 17
 7484 075d ED A3 05                		mov.L	20[r10], r3
 7485 0760 ED A2 03                		mov.L	12[r10], r2
 7486 0763 ED A1 05                		mov.L	20[r10], r1
 7487 0766 05 00 00 00             		bsr	_sp_rshb
 7488                             	.L504:
7296:../src/wolfcrypt/src/sp_int.c ****             }
7297:../src/wolfcrypt/src/sp_int.c ****             sp_copy(sa, rem);
 7489                             		.loc 2 7297 13
 7490 076a ED A2 1F                		mov.L	124[r10], r2
 7491 076d ED A1 05                		mov.L	20[r10], r1
 7492 0770 05 00 00 00             		bsr	_sp_copy
 7493                             	.LBB47:
7298:../src/wolfcrypt/src/sp_int.c ****             sp_clamp(rem);
 7494                             		.loc 2 7298 13
 7495 0774 ED A5 1F                		mov.L	124[r10], r5
 7496 0777 EC 55                   		mov.L	[r5], r5
 7497 0779 60 15                   		sub	#1, r5
 7498 077b E7 A5 10                		mov.L	r5, 64[r10]
 7499 077e 09                      		bra	.L505
 7500                             	.L507:
 7501                             		.loc 2 7298 13 is_stmt 0 discriminator 5
 7502 077f ED A5 10                		mov.L	64[r10], r5
 7503 0782 60 15                   		sub	#1, r5
 7504 0784 E7 A5 10                		mov.L	r5, 64[r10]
 7505                             	.L505:
 7506                             		.loc 2 7298 13 discriminator 1
 7507 0787 ED A5 10                		mov.L	64[r10], r5
 7508 078a 61 05                   		cmp	#0, r5
 7509 078c 29 11                   		blt	.L506
 7510                             		.loc 2 7298 13 discriminator 3
 7511 078e ED A4 1F                		mov.L	124[r10], r4
 7512 0791 ED A5 10                		mov.L	64[r10], r5
 7513 0794 62 25                   		add	#2, r5
 7514 0796 FE 65 45                		mov.L	[r5,r4], r5
 7515 0799 61 05                   		cmp	#0, r5
 7516 079b 20 E4                   		beq	.L507
 7517                             	.L506:
 7518                             		.loc 2 7298 13 discriminator 6
 7519 079d ED A5 10                		mov.L	64[r10], r5
 7520 07a0 71 54 01                		add	#1, r5, r4
 7521 07a3 ED A5 1F                		mov.L	124[r10], r5
 7522 07a6 E3 54                   		mov.L	r4, [r5]
 7523                             	.L503:
 7524                             	.LBE47:
7299:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
7300:../src/wolfcrypt/src/sp_int.c ****             if (sp_iszero(rem)) {
7301:../src/wolfcrypt/src/sp_int.c ****                 rem->sign = MP_ZPOS;
7302:../src/wolfcrypt/src/sp_int.c ****             }
7303:../src/wolfcrypt/src/sp_int.c **** #endif
7304:../src/wolfcrypt/src/sp_int.c ****         }
7305:../src/wolfcrypt/src/sp_int.c ****         if ((err == MP_OKAY) && (r != NULL)) {
 7525                             		.loc 2 7305 12 is_stmt 1
 7526 07a8 EC A5                   		mov.L	[r10], r5
 7527 07aa 61 05                   		cmp	#0, r5
 7528 07ac 21 47                   		bne	.L483
 7529                             		.loc 2 7305 30 discriminator 1
 7530 07ae ED A5 1E                		mov.L	120[r10], r5
 7531 07b1 61 05                   		cmp	#0, r5
 7532 07b3 20 40                   		beq	.L483
7306:../src/wolfcrypt/src/sp_int.c ****             sp_copy(tr, r);
 7533                             		.loc 2 7306 13
 7534 07b5 ED A2 1E                		mov.L	120[r10], r2
 7535 07b8 ED A1 06                		mov.L	24[r10], r1
 7536 07bb 05 00 00 00             		bsr	_sp_copy
 7537                             	.LBB48:
7307:../src/wolfcrypt/src/sp_int.c ****             sp_clamp(r);
 7538                             		.loc 2 7307 13
 7539 07bf ED A5 1E                		mov.L	120[r10], r5
 7540 07c2 EC 55                   		mov.L	[r5], r5
 7541 07c4 60 15                   		sub	#1, r5
 7542 07c6 E7 A5 11                		mov.L	r5, 68[r10]
 7543 07c9 09                      		bra	.L508
 7544                             	.L510:
 7545                             		.loc 2 7307 13 is_stmt 0 discriminator 5
 7546 07ca ED A5 11                		mov.L	68[r10], r5
 7547 07cd 60 15                   		sub	#1, r5
 7548 07cf E7 A5 11                		mov.L	r5, 68[r10]
 7549                             	.L508:
 7550                             		.loc 2 7307 13 discriminator 1
 7551 07d2 ED A5 11                		mov.L	68[r10], r5
 7552 07d5 61 05                   		cmp	#0, r5
 7553 07d7 29 11                   		blt	.L509
 7554                             		.loc 2 7307 13 discriminator 3
 7555 07d9 ED A4 1E                		mov.L	120[r10], r4
 7556 07dc ED A5 11                		mov.L	68[r10], r5
 7557 07df 62 25                   		add	#2, r5
 7558 07e1 FE 65 45                		mov.L	[r5,r4], r5
 7559 07e4 61 05                   		cmp	#0, r5
 7560 07e6 20 E4                   		beq	.L510
 7561                             	.L509:
 7562                             		.loc 2 7307 13 discriminator 6
 7563 07e8 ED A5 11                		mov.L	68[r10], r5
 7564 07eb 71 54 01                		add	#1, r5, r4
 7565 07ee ED A5 1E                		mov.L	120[r10], r5
 7566 07f1 E3 54                   		mov.L	r4, [r5]
 7567                             		.balign 8,3,1
 7568                             	.L483:
 7569                             	.LBE48:
 7570                             	.LBE45:
7308:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
7309:../src/wolfcrypt/src/sp_int.c ****             if (sp_iszero(r)) {
7310:../src/wolfcrypt/src/sp_int.c ****                 r->sign = MP_ZPOS;
7311:../src/wolfcrypt/src/sp_int.c ****             }
7312:../src/wolfcrypt/src/sp_int.c ****             else {
7313:../src/wolfcrypt/src/sp_int.c ****                 r->sign = (aSign == dSign) ? MP_ZPOS : MP_NEG;
7314:../src/wolfcrypt/src/sp_int.c ****             }
7315:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_INT_NEGATIVE */
7316:../src/wolfcrypt/src/sp_int.c ****         }
7317:../src/wolfcrypt/src/sp_int.c ****     }
7318:../src/wolfcrypt/src/sp_int.c **** 
7319:../src/wolfcrypt/src/sp_int.c **** #if 0
7320:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
7321:../src/wolfcrypt/src/sp_int.c ****         if (rem != NULL) {
7322:../src/wolfcrypt/src/sp_int.c ****             sp_print(rem, "rdr");
7323:../src/wolfcrypt/src/sp_int.c ****         }
7324:../src/wolfcrypt/src/sp_int.c ****         if (r != NULL) {
7325:../src/wolfcrypt/src/sp_int.c ****             sp_print(r, "rdw");
7326:../src/wolfcrypt/src/sp_int.c ****         }
7327:../src/wolfcrypt/src/sp_int.c ****     }
7328:../src/wolfcrypt/src/sp_int.c **** #endif
7329:../src/wolfcrypt/src/sp_int.c **** 
7330:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(td, NULL);
 7571                             		.loc 2 7330 5 is_stmt 1
 7572 07f3 ED A5 08                		mov.L	32[r10], r5
 7573 07f6 61 05                   		cmp	#0, r5
 7574 07f8 20 15                   		beq	.L511
 7575                             	.LBB49:
 7576                             		.loc 2 7330 5 is_stmt 0 discriminator 1
 7577 07fa ED A5 08                		mov.L	32[r10], r5
 7578 07fd E7 A5 17                		mov.L	r5, 92[r10]
 7579 0800 ED A5 17                		mov.L	92[r10], r5
 7580 0803 61 05                   		cmp	#0, r5
 7581 0805 10                      		beq	.L511
 7582                             		.loc 2 7330 5 discriminator 2
 7583 0806 ED A1 17                		mov.L	92[r10], r1
 7584 0809 05 00 00 00             		bsr	_wolfSSL_Free
 7585                             	.L511:
 7586                             	.LBE49:
7331:../src/wolfcrypt/src/sp_int.c ****     return err;
 7587                             		.loc 2 7331 12 is_stmt 1
 7588 080d EC A5                   		mov.L	[r10], r5
7332:../src/wolfcrypt/src/sp_int.c **** }
 7589                             		.loc 2 7332 1
 7590 080f EF 51                   		mov.L	r5, r1
 7591 0811 3F 6D 32                		rtsd	#200, r6-r13
 7592                             	.LFE95:
 7594 0814 76 10 01 00             		.section	.text.sp_mod,"ax",@progbits
 7595                             		.global	_sp_mod
 7597                             	_sp_mod:
 7598                             	.LFB96:
7333:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || !NO_DH || HAVE_ECC || \
7334:../src/wolfcrypt/src/sp_int.c ****         * (!NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY) */
7335:../src/wolfcrypt/src/sp_int.c **** 
7336:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || !defined(NO_DH) || defined(HAVE_ECC) || \
7337:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY) && \
7338:../src/wolfcrypt/src/sp_int.c ****      !defined(WOLFSSL_RSA_PUBLIC_ONLY))
7339:../src/wolfcrypt/src/sp_int.c **** #ifndef FREESCALE_LTC_TFM
7340:../src/wolfcrypt/src/sp_int.c **** /* Calculate the remainder of dividing a by m: r = a mod m.
7341:../src/wolfcrypt/src/sp_int.c ****  *
7342:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to reduce.
7343:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m  SP integer that is the modulus.
7344:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to store result in.
7345:../src/wolfcrypt/src/sp_int.c ****  *
7346:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
7347:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, m or r is NULL or m is 0.
7348:../src/wolfcrypt/src/sp_int.c ****  */
7349:../src/wolfcrypt/src/sp_int.c **** int sp_mod(sp_int* a, sp_int* m, sp_int* r)
7350:../src/wolfcrypt/src/sp_int.c **** {
 7599                             		.loc 2 7350 1
 7600 0000 7E AA                   		push.l	r10
 7601                             	.LCFI114:
 7602 0002 71 0A F0                		add	#-16, r0, r10
 7603                             	.LCFI115:
 7604 0005 EF A0                   		mov.L	r10, r0
 7605 0007 E7 A1 01                		mov.L	r1, 4[r10]
 7606 000a E7 A2 02                		mov.L	r2, 8[r10]
 7607 000d E7 A3 03                		mov.L	r3, 12[r10]
7351:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 7608                             		.loc 2 7351 9
 7609 0010 F8 A6 00                		mov.L	#0, [r10]
7352:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
7353:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT(t, (a == NULL) ? 1 : a->used + 1);
7354:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_INT_NEGATIVE */
7355:../src/wolfcrypt/src/sp_int.c **** 
7356:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (m == NULL) || (r == NULL)) {
 7610                             		.loc 2 7356 8
 7611 0013 ED A5 01                		mov.L	4[r10], r5
 7612 0016 61 05                   		cmp	#0, r5
 7613 0018 20 0E                   		beq	.L516
 7614                             		.loc 2 7356 21 discriminator 1
 7615 001a ED A5 02                		mov.L	8[r10], r5
 7616 001d 61 05                   		cmp	#0, r5
 7617 001f 17                      		beq	.L516
 7618                             		.loc 2 7356 36 discriminator 2
 7619 0020 ED A5 03                		mov.L	12[r10], r5
 7620 0023 61 05                   		cmp	#0, r5
 7621 0025 1C                      		bne	.L517
 7622                             	.L516:
7357:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 7623                             		.loc 2 7357 13
 7624 0026 F8 A6 FD                		mov.L	#-3, [r10]
 7625                             	.L517:
7358:../src/wolfcrypt/src/sp_int.c ****     }
7359:../src/wolfcrypt/src/sp_int.c **** 
7360:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_INT_NEGATIVE
7361:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 7626                             		.loc 2 7361 8
 7627 0029 EC A5                   		mov.L	[r10], r5
 7628 002b 61 05                   		cmp	#0, r5
 7629 002d 21 13                   		bne	.L518
7362:../src/wolfcrypt/src/sp_int.c ****         err = sp_div(a, m, NULL, r);
 7630                             		.loc 2 7362 15
 7631 002f ED A4 03                		mov.L	12[r10], r4
 7632 0032 66 03                   		mov.L	#0, r3
 7633 0034 ED A2 02                		mov.L	8[r10], r2
 7634 0037 ED A1 01                		mov.L	4[r10], r1
 7635 003a 05 00 00 00             		bsr	_sp_div
 7636 003e E3 A1                   		mov.L	r1, [r10]
 7637                             	.L518:
7363:../src/wolfcrypt/src/sp_int.c ****     }
7364:../src/wolfcrypt/src/sp_int.c **** #else
7365:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT(t, a->used + 1, err, NULL);
7366:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
7367:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t, a->used + 1);
7368:../src/wolfcrypt/src/sp_int.c ****         err = sp_div(a, m, NULL, t);
7369:../src/wolfcrypt/src/sp_int.c ****     }
7370:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
7371:../src/wolfcrypt/src/sp_int.c ****         if ((!sp_iszero(t)) && (t->sign != m->sign)) {
7372:../src/wolfcrypt/src/sp_int.c ****             err = sp_add(t, m, r);
7373:../src/wolfcrypt/src/sp_int.c ****         }
7374:../src/wolfcrypt/src/sp_int.c ****         else {
7375:../src/wolfcrypt/src/sp_int.c ****             err = sp_copy(t, r);
7376:../src/wolfcrypt/src/sp_int.c ****         }
7377:../src/wolfcrypt/src/sp_int.c ****     }
7378:../src/wolfcrypt/src/sp_int.c **** 
7379:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT(t, NULL);
7380:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_INT_NEGATIVE */
7381:../src/wolfcrypt/src/sp_int.c **** 
7382:../src/wolfcrypt/src/sp_int.c ****     return err;
 7638                             		.loc 2 7382 12
 7639 0040 EC A5                   		mov.L	[r10], r5
7383:../src/wolfcrypt/src/sp_int.c **** }
 7640                             		.loc 2 7383 1
 7641 0042 EF 51                   		mov.L	r5, r1
 7642 0044 3F AA 05                		rtsd	#20, r10-r10
 7643                             	.LFE96:
 7645                             		.section	.text._sp_mul,"ax",@progbits
 7647                             	__sp_mul:
 7648                             	.LFB97:
7384:../src/wolfcrypt/src/sp_int.c **** #endif /* !FREESCALE_LTC_TFM */
7385:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || !NO_DH || HAVE_ECC || \
7386:../src/wolfcrypt/src/sp_int.c ****         * (!NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY) */
7387:../src/wolfcrypt/src/sp_int.c **** 
7388:../src/wolfcrypt/src/sp_int.c **** /* START SP_MUL implementations. */
7389:../src/wolfcrypt/src/sp_int.c **** /* This code is generated.
7390:../src/wolfcrypt/src/sp_int.c ****  * To generate:
7391:../src/wolfcrypt/src/sp_int.c ****  *   cd scripts/sp/sp_int
7392:../src/wolfcrypt/src/sp_int.c ****  *   ./gen.sh
7393:../src/wolfcrypt/src/sp_int.c ****  * File sp_mul.c contains code.
7394:../src/wolfcrypt/src/sp_int.c ****  */
7395:../src/wolfcrypt/src/sp_int.c **** 
7396:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
7397:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b into r where a and b have same no. digits. r = a * b
7398:../src/wolfcrypt/src/sp_int.c ****  *
7399:../src/wolfcrypt/src/sp_int.c ****  * Optimised code for when number of digits in a and b are the same.
7400:../src/wolfcrypt/src/sp_int.c ****  *
7401:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer to mulitply.
7402:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b    SP integer to mulitply by.
7403:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r    SP integer to hod reult.
7404:../src/wolfcrypt/src/sp_int.c ****  *
7405:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY otherwise.
7406:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
7407:../src/wolfcrypt/src/sp_int.c ****  */
7408:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_nxn(sp_int* a, sp_int* b, sp_int* r)
7409:../src/wolfcrypt/src/sp_int.c **** {
7410:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
7411:../src/wolfcrypt/src/sp_int.c ****     int i;
7412:../src/wolfcrypt/src/sp_int.c ****     int j;
7413:../src/wolfcrypt/src/sp_int.c ****     int k;
7414:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
7415:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit* t = NULL;
7416:../src/wolfcrypt/src/sp_int.c **** #elif defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && \
7417:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SP_NO_DYN_STACK)
7418:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[a->used * 2];
7419:../src/wolfcrypt/src/sp_int.c **** #else
7420:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[SP_INT_DIGITS];
7421:../src/wolfcrypt/src/sp_int.c **** #endif
7422:../src/wolfcrypt/src/sp_int.c **** 
7423:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
7424:../src/wolfcrypt/src/sp_int.c ****     t = (sp_int_digit*)XMALLOC(sizeof(sp_int_digit) * (a->used * 2), NULL,
7425:../src/wolfcrypt/src/sp_int.c ****         DYNAMIC_TYPE_BIGINT);
7426:../src/wolfcrypt/src/sp_int.c ****     if (t == NULL) {
7427:../src/wolfcrypt/src/sp_int.c ****         err = MP_MEM;
7428:../src/wolfcrypt/src/sp_int.c ****     }
7429:../src/wolfcrypt/src/sp_int.c **** #endif
7430:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
7431:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit l, h, o;
7432:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit* dp;
7433:../src/wolfcrypt/src/sp_int.c **** 
7434:../src/wolfcrypt/src/sp_int.c ****         h = 0;
7435:../src/wolfcrypt/src/sp_int.c ****         l = 0;
7436:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL(h, l, a->dp[0], b->dp[0]);
7437:../src/wolfcrypt/src/sp_int.c ****         t[0] = h;
7438:../src/wolfcrypt/src/sp_int.c ****         h = 0;
7439:../src/wolfcrypt/src/sp_int.c ****         o = 0;
7440:../src/wolfcrypt/src/sp_int.c ****         for (k = 1; k <= a->used - 1; k++) {
7441:../src/wolfcrypt/src/sp_int.c ****             j = k;
7442:../src/wolfcrypt/src/sp_int.c ****             dp = a->dp;
7443:../src/wolfcrypt/src/sp_int.c ****             for (; j >= 0; dp++, j--) {
7444:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD(l, h, o, dp[0], b->dp[j]);
7445:../src/wolfcrypt/src/sp_int.c ****             }
7446:../src/wolfcrypt/src/sp_int.c ****             t[k] = l;
7447:../src/wolfcrypt/src/sp_int.c ****             l = h;
7448:../src/wolfcrypt/src/sp_int.c ****             h = o;
7449:../src/wolfcrypt/src/sp_int.c ****             o = 0;
7450:../src/wolfcrypt/src/sp_int.c ****         }
7451:../src/wolfcrypt/src/sp_int.c ****         for (; k <= (a->used - 1) * 2; k++) {
7452:../src/wolfcrypt/src/sp_int.c ****             i = k - (b->used - 1);
7453:../src/wolfcrypt/src/sp_int.c ****             dp = &b->dp[b->used - 1];
7454:../src/wolfcrypt/src/sp_int.c ****             for (; i < a->used; i++, dp--) {
7455:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD(l, h, o, a->dp[i], dp[0]);
7456:../src/wolfcrypt/src/sp_int.c ****             }
7457:../src/wolfcrypt/src/sp_int.c ****             t[k] = l;
7458:../src/wolfcrypt/src/sp_int.c ****             l = h;
7459:../src/wolfcrypt/src/sp_int.c ****             h = o;
7460:../src/wolfcrypt/src/sp_int.c ****             o = 0;
7461:../src/wolfcrypt/src/sp_int.c ****         }
7462:../src/wolfcrypt/src/sp_int.c ****         t[k] = l;
7463:../src/wolfcrypt/src/sp_int.c ****         r->used = k + 1;
7464:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(r->dp, t, r->used * sizeof(sp_int_digit));
7465:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
7466:../src/wolfcrypt/src/sp_int.c ****     }
7467:../src/wolfcrypt/src/sp_int.c **** 
7468:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
7469:../src/wolfcrypt/src/sp_int.c ****     if (t != NULL) {
7470:../src/wolfcrypt/src/sp_int.c ****         XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
7471:../src/wolfcrypt/src/sp_int.c ****     }
7472:../src/wolfcrypt/src/sp_int.c **** #endif
7473:../src/wolfcrypt/src/sp_int.c ****     return err;
7474:../src/wolfcrypt/src/sp_int.c **** }
7475:../src/wolfcrypt/src/sp_int.c **** 
7476:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b into r. r = a * b
7477:../src/wolfcrypt/src/sp_int.c ****  *
7478:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer to mulitply.
7479:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b    SP integer to mulitply by.
7480:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r    SP integer to hod reult.
7481:../src/wolfcrypt/src/sp_int.c ****  *
7482:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY otherwise.
7483:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
7484:../src/wolfcrypt/src/sp_int.c ****  */
7485:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul(sp_int* a, sp_int* b, sp_int* r)
7486:../src/wolfcrypt/src/sp_int.c **** {
7487:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
7488:../src/wolfcrypt/src/sp_int.c ****     int i;
7489:../src/wolfcrypt/src/sp_int.c ****     int j;
7490:../src/wolfcrypt/src/sp_int.c ****     int k;
7491:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
7492:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit* t = NULL;
7493:../src/wolfcrypt/src/sp_int.c **** #elif defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && \
7494:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SP_NO_DYN_STACK)
7495:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[a->used + b->used];
7496:../src/wolfcrypt/src/sp_int.c **** #else
7497:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[SP_INT_DIGITS];
7498:../src/wolfcrypt/src/sp_int.c **** #endif
7499:../src/wolfcrypt/src/sp_int.c **** 
7500:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
7501:../src/wolfcrypt/src/sp_int.c ****     t = (sp_int_digit*)XMALLOC(sizeof(sp_int_digit) * (a->used + b->used), NULL,
7502:../src/wolfcrypt/src/sp_int.c ****         DYNAMIC_TYPE_BIGINT);
7503:../src/wolfcrypt/src/sp_int.c ****     if (t == NULL) {
7504:../src/wolfcrypt/src/sp_int.c ****         err = MP_MEM;
7505:../src/wolfcrypt/src/sp_int.c ****     }
7506:../src/wolfcrypt/src/sp_int.c **** #endif
7507:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
7508:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit l;
7509:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit h;
7510:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit o;
7511:../src/wolfcrypt/src/sp_int.c **** 
7512:../src/wolfcrypt/src/sp_int.c ****         h = 0;
7513:../src/wolfcrypt/src/sp_int.c ****         l = 0;
7514:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL(h, l, a->dp[0], b->dp[0]);
7515:../src/wolfcrypt/src/sp_int.c ****         t[0] = h;
7516:../src/wolfcrypt/src/sp_int.c ****         h = 0;
7517:../src/wolfcrypt/src/sp_int.c ****         o = 0;
7518:../src/wolfcrypt/src/sp_int.c ****         for (k = 1; k <= b->used - 1; k++) {
7519:../src/wolfcrypt/src/sp_int.c ****             i = 0;
7520:../src/wolfcrypt/src/sp_int.c ****             j = k;
7521:../src/wolfcrypt/src/sp_int.c ****             for (; (i < a->used) && (j >= 0); i++, j--) {
7522:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD(l, h, o, a->dp[i], b->dp[j]);
7523:../src/wolfcrypt/src/sp_int.c ****             }
7524:../src/wolfcrypt/src/sp_int.c ****             t[k] = l;
7525:../src/wolfcrypt/src/sp_int.c ****             l = h;
7526:../src/wolfcrypt/src/sp_int.c ****             h = o;
7527:../src/wolfcrypt/src/sp_int.c ****             o = 0;
7528:../src/wolfcrypt/src/sp_int.c ****         }
7529:../src/wolfcrypt/src/sp_int.c ****         for (; k <= (a->used - 1) + (b->used - 1); k++) {
7530:../src/wolfcrypt/src/sp_int.c ****             j = b->used - 1;
7531:../src/wolfcrypt/src/sp_int.c ****             i = k - j;
7532:../src/wolfcrypt/src/sp_int.c ****             for (; (i < a->used) && (j >= 0); i++, j--) {
7533:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD(l, h, o, a->dp[i], b->dp[j]);
7534:../src/wolfcrypt/src/sp_int.c ****             }
7535:../src/wolfcrypt/src/sp_int.c ****             t[k] = l;
7536:../src/wolfcrypt/src/sp_int.c ****             l = h;
7537:../src/wolfcrypt/src/sp_int.c ****             h = o;
7538:../src/wolfcrypt/src/sp_int.c ****             o = 0;
7539:../src/wolfcrypt/src/sp_int.c ****         }
7540:../src/wolfcrypt/src/sp_int.c ****         t[k] = l;
7541:../src/wolfcrypt/src/sp_int.c ****         r->used = k + 1;
7542:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(r->dp, t, r->used * sizeof(sp_int_digit));
7543:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
7544:../src/wolfcrypt/src/sp_int.c ****     }
7545:../src/wolfcrypt/src/sp_int.c **** 
7546:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
7547:../src/wolfcrypt/src/sp_int.c ****     if (t != NULL) {
7548:../src/wolfcrypt/src/sp_int.c ****         XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
7549:../src/wolfcrypt/src/sp_int.c ****     }
7550:../src/wolfcrypt/src/sp_int.c **** #endif
7551:../src/wolfcrypt/src/sp_int.c ****     return err;
7552:../src/wolfcrypt/src/sp_int.c **** }
7553:../src/wolfcrypt/src/sp_int.c **** #else
7554:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b into r. r = a * b
7555:../src/wolfcrypt/src/sp_int.c ****  *
7556:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer to mulitply.
7557:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b    SP integer to mulitply by.
7558:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r    SP integer to hod reult.
7559:../src/wolfcrypt/src/sp_int.c ****  *
7560:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY otherwise.
7561:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
7562:../src/wolfcrypt/src/sp_int.c ****  */
7563:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul(sp_int* a, sp_int* b, sp_int* r)
7564:../src/wolfcrypt/src/sp_int.c **** {
 7649                             		.loc 2 7564 1
 7650 0000 6E 6D                   		pushm	r6-r13
 7651                             	.LCFI116:
 7652 0002 72 0A 70 FF             		add	#-144, r0, r10
 7653                             	.LCFI117:
 7654 0006 EF A0                   		mov.L	r10, r0
 7655 0008 E7 A1 0D                		mov.L	r1, 52[r10]
 7656 000b E7 A2 0E                		mov.L	r2, 56[r10]
 7657 000e E7 A3 0F                		mov.L	r3, 60[r10]
7565:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 7658                             		.loc 2 7565 9
 7659 0011 F8 A6 00                		mov.L	#0, [r10]
7566:../src/wolfcrypt/src/sp_int.c ****     int i;
7567:../src/wolfcrypt/src/sp_int.c ****     int j;
7568:../src/wolfcrypt/src/sp_int.c ****     int k;
7569:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
7570:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit* t = NULL;
 7660                             		.loc 2 7570 19
 7661 0014 F9 A6 09 00             		mov.L	#0, 36[r10]
7571:../src/wolfcrypt/src/sp_int.c **** #elif defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && \
7572:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SP_NO_DYN_STACK)
7573:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[a->used + b->used];
7574:../src/wolfcrypt/src/sp_int.c **** #else
7575:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[SP_INT_DIGITS];
7576:../src/wolfcrypt/src/sp_int.c **** #endif
7577:../src/wolfcrypt/src/sp_int.c **** 
7578:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
7579:../src/wolfcrypt/src/sp_int.c ****     t = (sp_int_digit*)XMALLOC(sizeof(sp_int_digit) * (a->used + b->used), NULL,
 7662                             		.loc 2 7579 24
 7663 0018 ED A5 0D                		mov.L	52[r10], r5
 7664 001b EC 54                   		mov.L	[r5], r4
 7665 001d ED A5 0E                		mov.L	56[r10], r5
 7666 0020 EC 55                   		mov.L	[r5], r5
 7667 0022 4B 45                   		add	r4, r5
 7668 0024 6C 25                   		shll	#2, r5
 7669 0026 EF 51                   		mov.L	r5, r1
 7670 0028 05 00 00 00             		bsr	_wolfSSL_Malloc
 7671 002c E7 A1 09                		mov.L	r1, 36[r10]
7580:../src/wolfcrypt/src/sp_int.c ****         DYNAMIC_TYPE_BIGINT);
7581:../src/wolfcrypt/src/sp_int.c ****     if (t == NULL) {
 7672                             		.loc 2 7581 8
 7673 002f ED A5 09                		mov.L	36[r10], r5
 7674 0032 61 05                   		cmp	#0, r5
 7675 0034 1C                      		bne	.L521
7582:../src/wolfcrypt/src/sp_int.c ****         err = MP_MEM;
 7676                             		.loc 2 7582 13
 7677 0035 F8 A6 FE                		mov.L	#-2, [r10]
 7678                             	.L521:
7583:../src/wolfcrypt/src/sp_int.c ****     }
7584:../src/wolfcrypt/src/sp_int.c **** #endif
7585:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 7679                             		.loc 2 7585 8
 7680 0038 EC A5                   		mov.L	[r10], r5
 7681 003a 61 05                   		cmp	#0, r5
 7682 003c 3B 3D 02                		bne	.L522
 7683                             	.LBB50:
7586:../src/wolfcrypt/src/sp_int.c ****         sp_int_word w;
7587:../src/wolfcrypt/src/sp_int.c ****         sp_int_word l;
7588:../src/wolfcrypt/src/sp_int.c ****         sp_int_word h;
7589:../src/wolfcrypt/src/sp_int.c ****     #ifdef SP_WORD_OVERFLOW
7590:../src/wolfcrypt/src/sp_int.c ****         sp_int_word o;
7591:../src/wolfcrypt/src/sp_int.c ****     #endif
7592:../src/wolfcrypt/src/sp_int.c **** 
7593:../src/wolfcrypt/src/sp_int.c ****         w = (sp_int_word)a->dp[0] * b->dp[0];
 7684                             		.loc 2 7593 31
 7685 003f ED A5 0D                		mov.L	52[r10], r5
 7686 0042 A8 D5                   		mov.L	8[r5], r5
 7687                             		.loc 2 7593 13
 7688 0044 EF 58                   		mov.L	r5, r8
 7689 0046 66 09                   		mov.L	#0, r9
 7690                             		.loc 2 7593 42
 7691 0048 ED A5 0E                		mov.L	56[r10], r5
 7692 004b A8 D5                   		mov.L	8[r5], r5
 7693 004d EF 5B                   		mov.L	r5, r11
 7694 004f 66 0C                   		mov.L	#0, r12
 7695                             		.loc 2 7593 11
 7696 0051 FF 34 B9                		mul	r11, r9, r4
 7697 0054 FF 35 8C                		mul	r8, r12, r5
 7698 0057 4B 54                   		add	r5, r4
 7699 0059 EF 8D                   		mov.L	r8, r13
 7700 005b FC 1F BD                		emulu	r11, r13
 7701 005e EF D5                   		mov.L	r13, r5
 7702 0060 EF E6                   		mov.L	r14, r6
 7703 0062 4B 64                   		add	r6, r4
 7704 0064 EF 46                   		mov.L	r4, r6
 7705 0066 E7 A5 0A                		mov.L	r5, 40[r10]
 7706 0069 E7 A6 0B                		mov.L	r6, 44[r10]
7594:../src/wolfcrypt/src/sp_int.c ****         t[0] = (sp_int_digit)w;
 7707                             		.loc 2 7594 16
 7708 006c ED A4 0A                		mov.L	40[r10], r4
 7709                             		.loc 2 7594 14
 7710 006f ED A5 09                		mov.L	36[r10], r5
 7711 0072 E3 54                   		mov.L	r4, [r5]
7595:../src/wolfcrypt/src/sp_int.c ****         l = (sp_int_digit)(w >> SP_WORD_SIZE);
 7712                             		.loc 2 7595 30
 7713 0074 ED A5 0B                		mov.L	44[r10], r5
 7714 0077 68 05                   		shlr	#0, r5
 7715 0079 E7 A5 10                		mov.L	r5, 64[r10]
 7716 007c F9 A6 11 00             		mov.L	#0, 68[r10]
 7717                             		.loc 2 7595 13
 7718 0080 ED A5 10                		mov.L	64[r10], r5
 7719                             		.loc 2 7595 11
 7720 0083 E7 A5 04                		mov.L	r5, 16[r10]
 7721 0086 F9 A6 05 00             		mov.L	#0, 20[r10]
7596:../src/wolfcrypt/src/sp_int.c ****         h = 0;
 7722                             		.loc 2 7596 11
 7723 008a F9 A6 06 00             		mov.L	#0, 24[r10]
 7724 008e F9 A6 07 00             		mov.L	#0, 28[r10]
7597:../src/wolfcrypt/src/sp_int.c ****     #ifdef SP_WORD_OVERFLOW
7598:../src/wolfcrypt/src/sp_int.c ****         o = 0;
7599:../src/wolfcrypt/src/sp_int.c ****     #endif
7600:../src/wolfcrypt/src/sp_int.c ****         for (k = 1; k <= (a->used - 1) + (b->used - 1); k++) {
 7725                             		.loc 2 7600 16
 7726 0092 F9 A6 03 01             		mov.L	#1, 12[r10]
 7727                             		.loc 2 7600 9
 7728 0096 38 62 01                		bra	.L523
 7729                             	.L527:
7601:../src/wolfcrypt/src/sp_int.c ****             i = k - (b->used - 1);
 7730                             		.loc 2 7601 23
 7731 0099 ED A5 0E                		mov.L	56[r10], r5
 7732 009c EC 55                   		mov.L	[r5], r5
 7733                             		.loc 2 7601 30
 7734 009e 71 54 FF                		add	#-1, r5, r4
 7735                             		.loc 2 7601 15
 7736 00a1 ED A5 03                		mov.L	12[r10], r5
 7737 00a4 43 45                   		sub	r4, r5
 7738 00a6 E7 A5 01                		mov.L	r5, 4[r10]
7602:../src/wolfcrypt/src/sp_int.c ****             i &= (((unsigned int)i >> (sizeof(i) * 8 - 1)) - 1U);
 7739                             		.loc 2 7602 20
 7740 00a9 ED A5 01                		mov.L	4[r10], r5
 7741                             		.loc 2 7602 36
 7742 00ac 69 F5                   		shlr	#31, r5
 7743                             		.loc 2 7602 60
 7744 00ae 71 54 FF                		add	#-1, r5, r4
 7745                             		.loc 2 7602 15
 7746 00b1 ED A5 01                		mov.L	4[r10], r5
 7747 00b4 53 45                   		and	r4, r5
 7748 00b6 E7 A5 01                		mov.L	r5, 4[r10]
7603:../src/wolfcrypt/src/sp_int.c ****             j = k - i;
 7749                             		.loc 2 7603 15
 7750 00b9 ED A4 03                		mov.L	12[r10], r4
 7751 00bc ED A5 01                		mov.L	4[r10], r5
 7752 00bf FF 05 54                		sub	r5, r4, r5
 7753 00c2 E7 A5 02                		mov.L	r5, 8[r10]
7604:../src/wolfcrypt/src/sp_int.c ****             for (; (i < a->used) && (j >= 0); i++, j--) {
 7754                             		.loc 2 7604 13
 7755 00c5 38 C2 00                		bra	.L524
 7756                             	.L526:
7605:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * b->dp[j];
 7757                             		.loc 2 7605 39 discriminator 3
 7758 00c8 ED A4 0D                		mov.L	52[r10], r4
 7759 00cb ED A5 01                		mov.L	4[r10], r5
 7760 00ce 62 25                   		add	#2, r5
 7761 00d0 FE 65 45                		mov.L	[r5,r4], r5
 7762                             		.loc 2 7605 21 discriminator 3
 7763 00d3 E7 A5 12                		mov.L	r5, 72[r10]
 7764 00d6 F9 A6 13 00             		mov.L	#0, 76[r10]
 7765                             		.loc 2 7605 50 discriminator 3
 7766 00da ED A4 0E                		mov.L	56[r10], r4
 7767 00dd ED A5 02                		mov.L	8[r10], r5
 7768 00e0 62 25                   		add	#2, r5
 7769 00e2 FE 65 45                		mov.L	[r5,r4], r5
 7770 00e5 E7 A5 14                		mov.L	r5, 80[r10]
 7771 00e8 F9 A6 15 00             		mov.L	#0, 84[r10]
 7772                             		.loc 2 7605 19 discriminator 3
 7773 00ec ED A4 13                		mov.L	76[r10], r4
 7774 00ef ED AE 14                		mov.L	80[r10], r14
 7775 00f2 4F E4                   		mul	r14, r4
 7776 00f4 ED A5 15                		mov.L	84[r10], r5
 7777 00f7 ED A7 12                		mov.L	72[r10], r7
 7778 00fa 4F 75                   		mul	r7, r5
 7779 00fc 4B 54                   		add	r5, r4
 7780 00fe ED AB 12                		mov.L	72[r10], r11
 7781 0101 ED AD 14                		mov.L	80[r10], r13
 7782 0104 FC 1F DB                		emulu	r13, r11
 7783 0107 EF B5                   		mov.L	r11, r5
 7784 0109 EF C6                   		mov.L	r12, r6
 7785 010b 4B 64                   		add	r6, r4
 7786 010d EF 46                   		mov.L	r4, r6
 7787 010f E7 A5 0A                		mov.L	r5, 40[r10]
 7788 0112 E7 A6 0B                		mov.L	r6, 44[r10]
7606:../src/wolfcrypt/src/sp_int.c ****                 l += (sp_int_digit)w;
 7789                             		.loc 2 7606 22 discriminator 3
 7790 0115 ED A5 0A                		mov.L	40[r10], r5
 7791 0118 E7 A5 16                		mov.L	r5, 88[r10]
 7792 011b F9 A6 17 00             		mov.L	#0, 92[r10]
 7793                             		.loc 2 7606 19 discriminator 3
 7794 011f ED A5 04                		mov.L	16[r10], r5
 7795 0122 ED A6 05                		mov.L	20[r10], r6
 7796 0125 EF 67                   		mov.L	r6, r7
 7797 0127 ED A8 16                		mov.L	88[r10], r8
 7798 012a FF 2E 85                		add	r8, r5, r14
 7799 012d 06 A1 02 A7 17          		adc 92[r10],r7
 7800 0132 E7 A7 1F                		mov.L	r7, 124[r10]
 7801 0135 E7 AE 1E                		mov.L	r14, 120[r10]
 7802 0138 E5 AA 1E 04             		mov.L	120[r10], 16[r10]
 7803 013c E5 AA 1F 05             		mov.L	124[r10], 20[r10]
7607:../src/wolfcrypt/src/sp_int.c ****                 h += (sp_int_digit)(w >> SP_WORD_SIZE);
 7804                             		.loc 2 7607 39 discriminator 3
 7805 0140 ED A5 0B                		mov.L	44[r10], r5
 7806 0143 68 05                   		shlr	#0, r5
 7807 0145 E7 A5 18                		mov.L	r5, 96[r10]
 7808 0148 F9 A6 19 00             		mov.L	#0, 100[r10]
 7809                             		.loc 2 7607 22 discriminator 3
 7810 014c ED A5 18                		mov.L	96[r10], r5
 7811 014f E7 A5 1A                		mov.L	r5, 104[r10]
 7812 0152 F9 A6 1B 00             		mov.L	#0, 108[r10]
 7813                             		.loc 2 7607 19 discriminator 3
 7814 0156 ED A5 06                		mov.L	24[r10], r5
 7815 0159 ED A6 07                		mov.L	28[r10], r6
 7816 015c EF 6C                   		mov.L	r6, r12
 7817 015e ED AD 1A                		mov.L	104[r10], r13
 7818 0161 FF 2B D5                		add	r13, r5, r11
 7819 0164 06 A1 02 AC 1B          		adc 108[r10],r12
 7820 0169 E7 AC 21                		mov.L	r12, 132[r10]
 7821 016c E7 AB 20                		mov.L	r11, 128[r10]
 7822 016f E5 AA 20 06             		mov.L	128[r10], 24[r10]
 7823 0173 E5 AA 21 07             		mov.L	132[r10], 28[r10]
7604:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * b->dp[j];
 7824                             		.loc 2 7604 48 discriminator 3
 7825 0177 ED A5 01                		mov.L	4[r10], r5
 7826 017a 62 15                   		add	#1, r5
 7827 017c E7 A5 01                		mov.L	r5, 4[r10]
7604:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * b->dp[j];
 7828                             		.loc 2 7604 53 discriminator 3
 7829 017f ED A5 02                		mov.L	8[r10], r5
 7830 0182 60 15                   		sub	#1, r5
 7831 0184 E7 A5 02                		mov.L	r5, 8[r10]
 7832                             	.L524:
7604:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * b->dp[j];
 7833                             		.loc 2 7604 26 discriminator 1
 7834 0187 ED A5 0D                		mov.L	52[r10], r5
 7835 018a EC 54                   		mov.L	[r5], r4
7604:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * b->dp[j];
 7836                             		.loc 2 7604 13 discriminator 1
 7837 018c ED A5 01                		mov.L	4[r10], r5
 7838 018f 47 45                   		cmp	r4, r5
 7839 0191 28 0C                   		bge	.L525
7604:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * b->dp[j];
 7840                             		.loc 2 7604 34 discriminator 2
 7841 0193 ED A5 02                		mov.L	8[r10], r5
 7842 0196 61 05                   		cmp	#0, r5
 7843 0198 29 05 38 2E FF          		bge	.L526
 7844                             	.L525:
7608:../src/wolfcrypt/src/sp_int.c ****             #ifdef SP_WORD_OVERFLOW
7609:../src/wolfcrypt/src/sp_int.c ****                 h += (sp_int_digit)(l >> SP_WORD_SIZE);
7610:../src/wolfcrypt/src/sp_int.c ****                 l &= SP_MASK;
7611:../src/wolfcrypt/src/sp_int.c ****                 o += (sp_int_digit)(h >> SP_WORD_SIZE);
7612:../src/wolfcrypt/src/sp_int.c ****                 h &= SP_MASK;
7613:../src/wolfcrypt/src/sp_int.c ****             #endif
7614:../src/wolfcrypt/src/sp_int.c ****             }
7615:../src/wolfcrypt/src/sp_int.c ****             t[k] = (sp_int_digit)l;
 7845                             		.loc 2 7615 14 discriminator 2
 7846 019d ED A5 03                		mov.L	12[r10], r5
 7847 01a0 FD C2 54                		shll	#2, r5, r4
 7848 01a3 ED A5 09                		mov.L	36[r10], r5
 7849 01a6 4B 45                   		add	r4, r5
 7850                             		.loc 2 7615 20 discriminator 2
 7851 01a8 ED A4 04                		mov.L	16[r10], r4
 7852                             		.loc 2 7615 18 discriminator 2
 7853 01ab E3 54                   		mov.L	r4, [r5]
7616:../src/wolfcrypt/src/sp_int.c ****             l >>= SP_WORD_SIZE;
 7854                             		.loc 2 7616 15 discriminator 2
 7855 01ad ED A5 05                		mov.L	20[r10], r5
 7856 01b0 68 05                   		shlr	#0, r5
 7857 01b2 E7 A5 04                		mov.L	r5, 16[r10]
 7858 01b5 F9 A6 05 00             		mov.L	#0, 20[r10]
7617:../src/wolfcrypt/src/sp_int.c ****             l += (sp_int_digit)h;
 7859                             		.loc 2 7617 18 discriminator 2
 7860 01b9 ED A5 06                		mov.L	24[r10], r5
 7861 01bc E7 A5 1C                		mov.L	r5, 112[r10]
 7862 01bf F9 A6 1D 00             		mov.L	#0, 116[r10]
 7863                             		.loc 2 7617 15 discriminator 2
 7864 01c3 ED A5 04                		mov.L	16[r10], r5
 7865 01c6 ED A6 05                		mov.L	20[r10], r6
 7866 01c9 EF 67                   		mov.L	r6, r7
 7867 01cb ED A8 1C                		mov.L	112[r10], r8
 7868 01ce FF 2E 85                		add	r8, r5, r14
 7869 01d1 06 A1 02 A7 1D          		adc 116[r10],r7
 7870 01d6 E7 A7 23                		mov.L	r7, 140[r10]
 7871 01d9 E7 AE 22                		mov.L	r14, 136[r10]
 7872 01dc E5 AA 22 04             		mov.L	136[r10], 16[r10]
 7873 01e0 E5 AA 23 05             		mov.L	140[r10], 20[r10]
7618:../src/wolfcrypt/src/sp_int.c ****             h >>= SP_WORD_SIZE;
 7874                             		.loc 2 7618 15 discriminator 2
 7875 01e4 ED A5 07                		mov.L	28[r10], r5
 7876 01e7 68 05                   		shlr	#0, r5
 7877 01e9 E7 A5 06                		mov.L	r5, 24[r10]
 7878 01ec F9 A6 07 00             		mov.L	#0, 28[r10]
7600:../src/wolfcrypt/src/sp_int.c ****             i = k - (b->used - 1);
 7879                             		.loc 2 7600 58 discriminator 2
 7880 01f0 ED A5 03                		mov.L	12[r10], r5
 7881 01f3 62 15                   		add	#1, r5
 7882 01f5 E7 A5 03                		mov.L	r5, 12[r10]
 7883                             	.L523:
7600:../src/wolfcrypt/src/sp_int.c ****             i = k - (b->used - 1);
 7884                             		.loc 2 7600 28 discriminator 1
 7885 01f8 ED A5 0D                		mov.L	52[r10], r5
 7886 01fb EC 55                   		mov.L	[r5], r5
7600:../src/wolfcrypt/src/sp_int.c ****             i = k - (b->used - 1);
 7887                             		.loc 2 7600 35 discriminator 1
 7888 01fd 71 54 FF                		add	#-1, r5, r4
7600:../src/wolfcrypt/src/sp_int.c ****             i = k - (b->used - 1);
 7889                             		.loc 2 7600 44 discriminator 1
 7890 0200 ED A5 0E                		mov.L	56[r10], r5
 7891 0203 EC 55                   		mov.L	[r5], r5
7600:../src/wolfcrypt/src/sp_int.c ****             i = k - (b->used - 1);
 7892                             		.loc 2 7600 51 discriminator 1
 7893 0205 60 15                   		sub	#1, r5
7600:../src/wolfcrypt/src/sp_int.c ****             i = k - (b->used - 1);
 7894                             		.loc 2 7600 40 discriminator 1
 7895 0207 4B 54                   		add	r5, r4
7600:../src/wolfcrypt/src/sp_int.c ****             i = k - (b->used - 1);
 7896                             		.loc 2 7600 9 discriminator 1
 7897 0209 ED A5 03                		mov.L	12[r10], r5
 7898 020c 47 45                   		cmp	r4, r5
 7899 020e 2A 05 38 89 FE          		ble	.L527
7619:../src/wolfcrypt/src/sp_int.c ****         #ifdef SP_WORD_OVERFLOW
7620:../src/wolfcrypt/src/sp_int.c ****             h += o & SP_MASK;
7621:../src/wolfcrypt/src/sp_int.c ****             o >>= SP_WORD_SIZE;
7622:../src/wolfcrypt/src/sp_int.c ****         #endif
7623:../src/wolfcrypt/src/sp_int.c ****         }
7624:../src/wolfcrypt/src/sp_int.c ****         t[k] = (sp_int_digit)l;
 7900                             		.loc 2 7624 10
 7901 0213 ED A5 03                		mov.L	12[r10], r5
 7902 0216 6C 25                   		shll	#2, r5
 7903 0218 ED A4 09                		mov.L	36[r10], r4
 7904 021b 4B 45                   		add	r4, r5
 7905                             		.loc 2 7624 16
 7906 021d ED A4 04                		mov.L	16[r10], r4
 7907                             		.loc 2 7624 14
 7908 0220 E3 54                   		mov.L	r4, [r5]
7625:../src/wolfcrypt/src/sp_int.c ****         r->used = k + 1;
 7909                             		.loc 2 7625 21
 7910 0222 ED A5 03                		mov.L	12[r10], r5
 7911 0225 71 54 01                		add	#1, r5, r4
 7912                             		.loc 2 7625 17
 7913 0228 ED A5 0F                		mov.L	60[r10], r5
 7914 022b E3 54                   		mov.L	r4, [r5]
7626:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(r->dp, t, r->used * sizeof(sp_int_digit));
 7915                             		.loc 2 7626 9
 7916 022d ED A5 0F                		mov.L	60[r10], r5
 7917 0230 71 54 08                		add	#8, r5, r4
 7918 0233 ED A5 0F                		mov.L	60[r10], r5
 7919 0236 EC 55                   		mov.L	[r5], r5
 7920 0238 6C 25                   		shll	#2, r5
 7921 023a EF 53                   		mov.L	r5, r3
 7922 023c ED A2 09                		mov.L	36[r10], r2
 7923 023f EF 41                   		mov.L	r4, r1
 7924 0241 05 00 00 00             		bsr	_memcpy
 7925                             	.LBB51:
7627:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
 7926                             		.loc 2 7627 9
 7927 0245 ED A5 0F                		mov.L	60[r10], r5
 7928 0248 EC 55                   		mov.L	[r5], r5
 7929 024a 60 15                   		sub	#1, r5
 7930 024c E7 A5 08                		mov.L	r5, 32[r10]
 7931 024f 09                      		bra	.L528
 7932                             	.L530:
 7933                             		.loc 2 7627 9 is_stmt 0 discriminator 5
 7934 0250 ED A5 08                		mov.L	32[r10], r5
 7935 0253 60 15                   		sub	#1, r5
 7936 0255 E7 A5 08                		mov.L	r5, 32[r10]
 7937                             	.L528:
 7938                             		.loc 2 7627 9 discriminator 1
 7939 0258 ED A5 08                		mov.L	32[r10], r5
 7940 025b 61 05                   		cmp	#0, r5
 7941 025d 29 11                   		blt	.L529
 7942                             		.loc 2 7627 9 discriminator 3
 7943 025f ED A4 0F                		mov.L	60[r10], r4
 7944 0262 ED A5 08                		mov.L	32[r10], r5
 7945 0265 62 25                   		add	#2, r5
 7946 0267 FE 65 45                		mov.L	[r5,r4], r5
 7947 026a 61 05                   		cmp	#0, r5
 7948 026c 20 E4                   		beq	.L530
 7949                             	.L529:
 7950                             		.loc 2 7627 9 discriminator 6
 7951 026e ED A5 08                		mov.L	32[r10], r5
 7952 0271 71 54 01                		add	#1, r5, r4
 7953 0274 ED A5 0F                		mov.L	60[r10], r5
 7954 0277 E3 54                   		mov.L	r4, [r5]
 7955                             	.L522:
 7956                             	.LBE51:
 7957                             	.LBE50:
7628:../src/wolfcrypt/src/sp_int.c ****     }
7629:../src/wolfcrypt/src/sp_int.c **** 
7630:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
7631:../src/wolfcrypt/src/sp_int.c ****     if (t != NULL) {
 7958                             		.loc 2 7631 8 is_stmt 1
 7959 0279 ED A5 09                		mov.L	36[r10], r5
 7960 027c 61 05                   		cmp	#0, r5
 7961 027e 20 15                   		beq	.L531
 7962                             	.LBB52:
7632:../src/wolfcrypt/src/sp_int.c ****         XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 7963                             		.loc 2 7632 9
 7964 0280 ED A5 09                		mov.L	36[r10], r5
 7965 0283 E7 A5 0C                		mov.L	r5, 48[r10]
 7966 0286 ED A5 0C                		mov.L	48[r10], r5
 7967 0289 61 05                   		cmp	#0, r5
 7968 028b 10                      		beq	.L531
 7969                             		.loc 2 7632 9 is_stmt 0 discriminator 1
 7970 028c ED A1 0C                		mov.L	48[r10], r1
 7971 028f 05 00 00 00             		bsr	_wolfSSL_Free
 7972                             	.L531:
 7973                             	.LBE52:
7633:../src/wolfcrypt/src/sp_int.c ****     }
7634:../src/wolfcrypt/src/sp_int.c **** #endif
7635:../src/wolfcrypt/src/sp_int.c ****     return err;
 7974                             		.loc 2 7635 12 is_stmt 1
 7975 0293 EC A5                   		mov.L	[r10], r5
7636:../src/wolfcrypt/src/sp_int.c **** }
 7976                             		.loc 2 7636 1
 7977 0295 EF 51                   		mov.L	r5, r1
 7978 0297 3F 6D 2C                		rtsd	#176, r6-r13
 7979                             	.LFE97:
 7981                             		.section	.text.sp_mul,"ax",@progbits
 7982                             		.global	_sp_mul
 7984                             	_sp_mul:
 7985                             	.LFB98:
7637:../src/wolfcrypt/src/sp_int.c **** #endif
7638:../src/wolfcrypt/src/sp_int.c **** 
7639:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_SMALL
7640:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_HAVE_SP_ECC) && defined(HAVE_ECC)
7641:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 64
7642:../src/wolfcrypt/src/sp_int.c **** #ifndef SQR_MUL_ASM
7643:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b and store in r: r = a * b
7644:../src/wolfcrypt/src/sp_int.c ****  *
7645:../src/wolfcrypt/src/sp_int.c ****  * Long-hand implementation.
7646:../src/wolfcrypt/src/sp_int.c ****  *
7647:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
7648:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
7649:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
7650:../src/wolfcrypt/src/sp_int.c ****  *
7651:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
7652:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
7653:../src/wolfcrypt/src/sp_int.c ****  */
7654:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_4(sp_int* a, sp_int* b, sp_int* r)
7655:../src/wolfcrypt/src/sp_int.c **** {
7656:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
7657:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
7658:../src/wolfcrypt/src/sp_int.c ****     sp_int_word* w = NULL;
7659:../src/wolfcrypt/src/sp_int.c **** #else
7660:../src/wolfcrypt/src/sp_int.c ****     sp_int_word w[16];
7661:../src/wolfcrypt/src/sp_int.c **** #endif
7662:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit* da = a->dp;
7663:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit* db = b->dp;
7664:../src/wolfcrypt/src/sp_int.c **** 
7665:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
7666:../src/wolfcrypt/src/sp_int.c ****     w = (sp_int_word*)XMALLOC(sizeof(sp_int_word) * 16, NULL,
7667:../src/wolfcrypt/src/sp_int.c ****         DYNAMIC_TYPE_BIGINT);
7668:../src/wolfcrypt/src/sp_int.c ****     if (w == NULL) {
7669:../src/wolfcrypt/src/sp_int.c ****         err = MP_MEM;
7670:../src/wolfcrypt/src/sp_int.c ****     }
7671:../src/wolfcrypt/src/sp_int.c **** #endif
7672:../src/wolfcrypt/src/sp_int.c **** 
7673:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
7674:../src/wolfcrypt/src/sp_int.c ****         w[0] = (sp_int_word)da[0] * db[0];
7675:../src/wolfcrypt/src/sp_int.c ****         w[1] = (sp_int_word)da[0] * db[1];
7676:../src/wolfcrypt/src/sp_int.c ****         w[2] = (sp_int_word)da[1] * db[0];
7677:../src/wolfcrypt/src/sp_int.c ****         w[3] = (sp_int_word)da[0] * db[2];
7678:../src/wolfcrypt/src/sp_int.c ****         w[4] = (sp_int_word)da[1] * db[1];
7679:../src/wolfcrypt/src/sp_int.c ****         w[5] = (sp_int_word)da[2] * db[0];
7680:../src/wolfcrypt/src/sp_int.c ****         w[6] = (sp_int_word)da[0] * db[3];
7681:../src/wolfcrypt/src/sp_int.c ****         w[7] = (sp_int_word)da[1] * db[2];
7682:../src/wolfcrypt/src/sp_int.c ****         w[8] = (sp_int_word)da[2] * db[1];
7683:../src/wolfcrypt/src/sp_int.c ****         w[9] = (sp_int_word)da[3] * db[0];
7684:../src/wolfcrypt/src/sp_int.c ****         w[10] = (sp_int_word)da[1] * db[3];
7685:../src/wolfcrypt/src/sp_int.c ****         w[11] = (sp_int_word)da[2] * db[2];
7686:../src/wolfcrypt/src/sp_int.c ****         w[12] = (sp_int_word)da[3] * db[1];
7687:../src/wolfcrypt/src/sp_int.c ****         w[13] = (sp_int_word)da[2] * db[3];
7688:../src/wolfcrypt/src/sp_int.c ****         w[14] = (sp_int_word)da[3] * db[2];
7689:../src/wolfcrypt/src/sp_int.c ****         w[15] = (sp_int_word)da[3] * db[3];
7690:../src/wolfcrypt/src/sp_int.c **** 
7691:../src/wolfcrypt/src/sp_int.c ****         r->dp[0] = w[0];
7692:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
7693:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[1];
7694:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[2];
7695:../src/wolfcrypt/src/sp_int.c ****         r->dp[1] = w[0];
7696:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
7697:../src/wolfcrypt/src/sp_int.c ****         w[1] >>= SP_WORD_SIZE;
7698:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[1];
7699:../src/wolfcrypt/src/sp_int.c ****         w[2] >>= SP_WORD_SIZE;
7700:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[2];
7701:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[3];
7702:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[4];
7703:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[5];
7704:../src/wolfcrypt/src/sp_int.c ****         r->dp[2] = w[0];
7705:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
7706:../src/wolfcrypt/src/sp_int.c ****         w[3] >>= SP_WORD_SIZE;
7707:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[3];
7708:../src/wolfcrypt/src/sp_int.c ****         w[4] >>= SP_WORD_SIZE;
7709:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[4];
7710:../src/wolfcrypt/src/sp_int.c ****         w[5] >>= SP_WORD_SIZE;
7711:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[5];
7712:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[6];
7713:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[7];
7714:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[8];
7715:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[9];
7716:../src/wolfcrypt/src/sp_int.c ****         r->dp[3] = w[0];
7717:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
7718:../src/wolfcrypt/src/sp_int.c ****         w[6] >>= SP_WORD_SIZE;
7719:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[6];
7720:../src/wolfcrypt/src/sp_int.c ****         w[7] >>= SP_WORD_SIZE;
7721:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[7];
7722:../src/wolfcrypt/src/sp_int.c ****         w[8] >>= SP_WORD_SIZE;
7723:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[8];
7724:../src/wolfcrypt/src/sp_int.c ****         w[9] >>= SP_WORD_SIZE;
7725:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[9];
7726:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[10];
7727:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[11];
7728:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[12];
7729:../src/wolfcrypt/src/sp_int.c ****         r->dp[4] = w[0];
7730:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
7731:../src/wolfcrypt/src/sp_int.c ****         w[10] >>= SP_WORD_SIZE;
7732:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[10];
7733:../src/wolfcrypt/src/sp_int.c ****         w[11] >>= SP_WORD_SIZE;
7734:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[11];
7735:../src/wolfcrypt/src/sp_int.c ****         w[12] >>= SP_WORD_SIZE;
7736:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[12];
7737:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[13];
7738:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[14];
7739:../src/wolfcrypt/src/sp_int.c ****         r->dp[5] = w[0];
7740:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
7741:../src/wolfcrypt/src/sp_int.c ****         w[13] >>= SP_WORD_SIZE;
7742:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[13];
7743:../src/wolfcrypt/src/sp_int.c ****         w[14] >>= SP_WORD_SIZE;
7744:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[14];
7745:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[15];
7746:../src/wolfcrypt/src/sp_int.c ****         r->dp[6] = w[0];
7747:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
7748:../src/wolfcrypt/src/sp_int.c ****         w[15] >>= SP_WORD_SIZE;
7749:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[15];
7750:../src/wolfcrypt/src/sp_int.c ****         r->dp[7] = w[0];
7751:../src/wolfcrypt/src/sp_int.c **** 
7752:../src/wolfcrypt/src/sp_int.c ****         r->used = 8;
7753:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
7754:../src/wolfcrypt/src/sp_int.c ****     }
7755:../src/wolfcrypt/src/sp_int.c **** 
7756:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
7757:../src/wolfcrypt/src/sp_int.c ****     if (w != NULL) {
7758:../src/wolfcrypt/src/sp_int.c ****         XFREE(w, NULL, DYNAMIC_TYPE_BIGINT);
7759:../src/wolfcrypt/src/sp_int.c ****     }
7760:../src/wolfcrypt/src/sp_int.c **** #endif
7761:../src/wolfcrypt/src/sp_int.c ****     return err;
7762:../src/wolfcrypt/src/sp_int.c **** }
7763:../src/wolfcrypt/src/sp_int.c **** #else /* SQR_MUL_ASM */
7764:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b and store in r: r = a * b
7765:../src/wolfcrypt/src/sp_int.c ****  *
7766:../src/wolfcrypt/src/sp_int.c ****  * Comba implementation.
7767:../src/wolfcrypt/src/sp_int.c ****  *
7768:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
7769:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
7770:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
7771:../src/wolfcrypt/src/sp_int.c ****  *
7772:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
7773:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
7774:../src/wolfcrypt/src/sp_int.c ****  */
7775:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_4(sp_int* a, sp_int* b, sp_int* r)
7776:../src/wolfcrypt/src/sp_int.c **** {
7777:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
7778:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
7779:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o = 0;
7780:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[4];
7781:../src/wolfcrypt/src/sp_int.c **** 
7782:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL(h, l, a->dp[0], b->dp[0]);
7783:../src/wolfcrypt/src/sp_int.c ****     t[0] = h;
7784:../src/wolfcrypt/src/sp_int.c ****     h = 0;
7785:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD_NO(l, h, a->dp[0], b->dp[1]);
7786:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[0]);
7787:../src/wolfcrypt/src/sp_int.c ****     t[1] = l;
7788:../src/wolfcrypt/src/sp_int.c ****     l = h;
7789:../src/wolfcrypt/src/sp_int.c ****     h = o;
7790:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7791:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD_NO(l, h, a->dp[0], b->dp[2]);
7792:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[1]);
7793:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[0]);
7794:../src/wolfcrypt/src/sp_int.c ****     t[2] = l;
7795:../src/wolfcrypt/src/sp_int.c ****     l = h;
7796:../src/wolfcrypt/src/sp_int.c ****     h = o;
7797:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7798:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[3]);
7799:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[2]);
7800:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[1]);
7801:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[0]);
7802:../src/wolfcrypt/src/sp_int.c ****     t[3] = l;
7803:../src/wolfcrypt/src/sp_int.c ****     l = h;
7804:../src/wolfcrypt/src/sp_int.c ****     h = o;
7805:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7806:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[3]);
7807:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[2]);
7808:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[1]);
7809:../src/wolfcrypt/src/sp_int.c ****     r->dp[4] = l;
7810:../src/wolfcrypt/src/sp_int.c ****     l = h;
7811:../src/wolfcrypt/src/sp_int.c ****     h = o;
7812:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7813:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[3]);
7814:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[2]);
7815:../src/wolfcrypt/src/sp_int.c ****     r->dp[5] = l;
7816:../src/wolfcrypt/src/sp_int.c ****     l = h;
7817:../src/wolfcrypt/src/sp_int.c ****     h = o;
7818:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD_NO(l, h, a->dp[3], b->dp[3]);
7819:../src/wolfcrypt/src/sp_int.c ****     r->dp[6] = l;
7820:../src/wolfcrypt/src/sp_int.c ****     r->dp[7] = h;
7821:../src/wolfcrypt/src/sp_int.c ****     XMEMCPY(r->dp, t, 4 * sizeof(sp_int_digit));
7822:../src/wolfcrypt/src/sp_int.c ****     r->used = 8;
7823:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(r);
7824:../src/wolfcrypt/src/sp_int.c **** 
7825:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
7826:../src/wolfcrypt/src/sp_int.c **** }
7827:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
7828:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 64 */
7829:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 64
7830:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
7831:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b and store in r: r = a * b
7832:../src/wolfcrypt/src/sp_int.c ****  *
7833:../src/wolfcrypt/src/sp_int.c ****  * Comba implementation.
7834:../src/wolfcrypt/src/sp_int.c ****  *
7835:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
7836:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
7837:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
7838:../src/wolfcrypt/src/sp_int.c ****  *
7839:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
7840:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
7841:../src/wolfcrypt/src/sp_int.c ****  */
7842:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_6(sp_int* a, sp_int* b, sp_int* r)
7843:../src/wolfcrypt/src/sp_int.c **** {
7844:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
7845:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
7846:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o = 0;
7847:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[6];
7848:../src/wolfcrypt/src/sp_int.c **** 
7849:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL(h, l, a->dp[0], b->dp[0]);
7850:../src/wolfcrypt/src/sp_int.c ****     t[0] = h;
7851:../src/wolfcrypt/src/sp_int.c ****     h = 0;
7852:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD_NO(l, h, a->dp[0], b->dp[1]);
7853:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[0]);
7854:../src/wolfcrypt/src/sp_int.c ****     t[1] = l;
7855:../src/wolfcrypt/src/sp_int.c ****     l = h;
7856:../src/wolfcrypt/src/sp_int.c ****     h = o;
7857:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7858:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD_NO(l, h, a->dp[0], b->dp[2]);
7859:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[1]);
7860:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[0]);
7861:../src/wolfcrypt/src/sp_int.c ****     t[2] = l;
7862:../src/wolfcrypt/src/sp_int.c ****     l = h;
7863:../src/wolfcrypt/src/sp_int.c ****     h = o;
7864:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7865:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[3]);
7866:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[2]);
7867:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[1]);
7868:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[0]);
7869:../src/wolfcrypt/src/sp_int.c ****     t[3] = l;
7870:../src/wolfcrypt/src/sp_int.c ****     l = h;
7871:../src/wolfcrypt/src/sp_int.c ****     h = o;
7872:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7873:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[4]);
7874:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[3]);
7875:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[2]);
7876:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[1]);
7877:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[0]);
7878:../src/wolfcrypt/src/sp_int.c ****     t[4] = l;
7879:../src/wolfcrypt/src/sp_int.c ****     l = h;
7880:../src/wolfcrypt/src/sp_int.c ****     h = o;
7881:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7882:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[5]);
7883:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[4]);
7884:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[3]);
7885:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[2]);
7886:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[1]);
7887:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[0]);
7888:../src/wolfcrypt/src/sp_int.c ****     t[5] = l;
7889:../src/wolfcrypt/src/sp_int.c ****     l = h;
7890:../src/wolfcrypt/src/sp_int.c ****     h = o;
7891:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7892:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[5]);
7893:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[4]);
7894:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[3]);
7895:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[2]);
7896:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[1]);
7897:../src/wolfcrypt/src/sp_int.c ****     r->dp[6] = l;
7898:../src/wolfcrypt/src/sp_int.c ****     l = h;
7899:../src/wolfcrypt/src/sp_int.c ****     h = o;
7900:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7901:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[5]);
7902:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[4]);
7903:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[3]);
7904:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[2]);
7905:../src/wolfcrypt/src/sp_int.c ****     r->dp[7] = l;
7906:../src/wolfcrypt/src/sp_int.c ****     l = h;
7907:../src/wolfcrypt/src/sp_int.c ****     h = o;
7908:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7909:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[5]);
7910:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[4]);
7911:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[3]);
7912:../src/wolfcrypt/src/sp_int.c ****     r->dp[8] = l;
7913:../src/wolfcrypt/src/sp_int.c ****     l = h;
7914:../src/wolfcrypt/src/sp_int.c ****     h = o;
7915:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7916:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[5]);
7917:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[4]);
7918:../src/wolfcrypt/src/sp_int.c ****     r->dp[9] = l;
7919:../src/wolfcrypt/src/sp_int.c ****     l = h;
7920:../src/wolfcrypt/src/sp_int.c ****     h = o;
7921:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD_NO(l, h, a->dp[5], b->dp[5]);
7922:../src/wolfcrypt/src/sp_int.c ****     r->dp[10] = l;
7923:../src/wolfcrypt/src/sp_int.c ****     r->dp[11] = h;
7924:../src/wolfcrypt/src/sp_int.c ****     XMEMCPY(r->dp, t, 6 * sizeof(sp_int_digit));
7925:../src/wolfcrypt/src/sp_int.c ****     r->used = 12;
7926:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(r);
7927:../src/wolfcrypt/src/sp_int.c **** 
7928:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
7929:../src/wolfcrypt/src/sp_int.c **** }
7930:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
7931:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 64 */
7932:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 32
7933:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
7934:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b and store in r: r = a * b
7935:../src/wolfcrypt/src/sp_int.c ****  *
7936:../src/wolfcrypt/src/sp_int.c ****  * Comba implementation.
7937:../src/wolfcrypt/src/sp_int.c ****  *
7938:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
7939:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
7940:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
7941:../src/wolfcrypt/src/sp_int.c ****  *
7942:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
7943:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
7944:../src/wolfcrypt/src/sp_int.c ****  */
7945:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_8(sp_int* a, sp_int* b, sp_int* r)
7946:../src/wolfcrypt/src/sp_int.c **** {
7947:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
7948:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
7949:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o = 0;
7950:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[8];
7951:../src/wolfcrypt/src/sp_int.c **** 
7952:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL(h, l, a->dp[0], b->dp[0]);
7953:../src/wolfcrypt/src/sp_int.c ****     t[0] = h;
7954:../src/wolfcrypt/src/sp_int.c ****     h = 0;
7955:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD_NO(l, h, a->dp[0], b->dp[1]);
7956:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[0]);
7957:../src/wolfcrypt/src/sp_int.c ****     t[1] = l;
7958:../src/wolfcrypt/src/sp_int.c ****     l = h;
7959:../src/wolfcrypt/src/sp_int.c ****     h = o;
7960:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7961:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD_NO(l, h, a->dp[0], b->dp[2]);
7962:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[1]);
7963:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[0]);
7964:../src/wolfcrypt/src/sp_int.c ****     t[2] = l;
7965:../src/wolfcrypt/src/sp_int.c ****     l = h;
7966:../src/wolfcrypt/src/sp_int.c ****     h = o;
7967:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7968:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[3]);
7969:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[2]);
7970:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[1]);
7971:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[0]);
7972:../src/wolfcrypt/src/sp_int.c ****     t[3] = l;
7973:../src/wolfcrypt/src/sp_int.c ****     l = h;
7974:../src/wolfcrypt/src/sp_int.c ****     h = o;
7975:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7976:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[4]);
7977:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[3]);
7978:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[2]);
7979:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[1]);
7980:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[0]);
7981:../src/wolfcrypt/src/sp_int.c ****     t[4] = l;
7982:../src/wolfcrypt/src/sp_int.c ****     l = h;
7983:../src/wolfcrypt/src/sp_int.c ****     h = o;
7984:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7985:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[5]);
7986:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[4]);
7987:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[3]);
7988:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[2]);
7989:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[1]);
7990:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[0]);
7991:../src/wolfcrypt/src/sp_int.c ****     t[5] = l;
7992:../src/wolfcrypt/src/sp_int.c ****     l = h;
7993:../src/wolfcrypt/src/sp_int.c ****     h = o;
7994:../src/wolfcrypt/src/sp_int.c ****     o = 0;
7995:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[6]);
7996:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[5]);
7997:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[4]);
7998:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[3]);
7999:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[2]);
8000:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[1]);
8001:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[0]);
8002:../src/wolfcrypt/src/sp_int.c ****     t[6] = l;
8003:../src/wolfcrypt/src/sp_int.c ****     l = h;
8004:../src/wolfcrypt/src/sp_int.c ****     h = o;
8005:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8006:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[7]);
8007:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[6]);
8008:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[5]);
8009:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[4]);
8010:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[3]);
8011:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[2]);
8012:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[1]);
8013:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[0]);
8014:../src/wolfcrypt/src/sp_int.c ****     t[7] = l;
8015:../src/wolfcrypt/src/sp_int.c ****     l = h;
8016:../src/wolfcrypt/src/sp_int.c ****     h = o;
8017:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8018:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[7]);
8019:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[6]);
8020:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[5]);
8021:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[4]);
8022:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[3]);
8023:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[2]);
8024:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[1]);
8025:../src/wolfcrypt/src/sp_int.c ****     r->dp[8] = l;
8026:../src/wolfcrypt/src/sp_int.c ****     l = h;
8027:../src/wolfcrypt/src/sp_int.c ****     h = o;
8028:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8029:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[7]);
8030:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[6]);
8031:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[5]);
8032:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[4]);
8033:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[3]);
8034:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[2]);
8035:../src/wolfcrypt/src/sp_int.c ****     r->dp[9] = l;
8036:../src/wolfcrypt/src/sp_int.c ****     l = h;
8037:../src/wolfcrypt/src/sp_int.c ****     h = o;
8038:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8039:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[7]);
8040:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[6]);
8041:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[5]);
8042:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[4]);
8043:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[3]);
8044:../src/wolfcrypt/src/sp_int.c ****     r->dp[10] = l;
8045:../src/wolfcrypt/src/sp_int.c ****     l = h;
8046:../src/wolfcrypt/src/sp_int.c ****     h = o;
8047:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8048:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[7]);
8049:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[6]);
8050:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[5]);
8051:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[4]);
8052:../src/wolfcrypt/src/sp_int.c ****     r->dp[11] = l;
8053:../src/wolfcrypt/src/sp_int.c ****     l = h;
8054:../src/wolfcrypt/src/sp_int.c ****     h = o;
8055:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8056:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[7]);
8057:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[6]);
8058:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[5]);
8059:../src/wolfcrypt/src/sp_int.c ****     r->dp[12] = l;
8060:../src/wolfcrypt/src/sp_int.c ****     l = h;
8061:../src/wolfcrypt/src/sp_int.c ****     h = o;
8062:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8063:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[7]);
8064:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[6]);
8065:../src/wolfcrypt/src/sp_int.c ****     r->dp[13] = l;
8066:../src/wolfcrypt/src/sp_int.c ****     l = h;
8067:../src/wolfcrypt/src/sp_int.c ****     h = o;
8068:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD_NO(l, h, a->dp[7], b->dp[7]);
8069:../src/wolfcrypt/src/sp_int.c ****     r->dp[14] = l;
8070:../src/wolfcrypt/src/sp_int.c ****     r->dp[15] = h;
8071:../src/wolfcrypt/src/sp_int.c ****     XMEMCPY(r->dp, t, 8 * sizeof(sp_int_digit));
8072:../src/wolfcrypt/src/sp_int.c ****     r->used = 16;
8073:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(r);
8074:../src/wolfcrypt/src/sp_int.c **** 
8075:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
8076:../src/wolfcrypt/src/sp_int.c **** }
8077:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
8078:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 32 */
8079:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 32
8080:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
8081:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b and store in r: r = a * b
8082:../src/wolfcrypt/src/sp_int.c ****  *
8083:../src/wolfcrypt/src/sp_int.c ****  * Comba implementation.
8084:../src/wolfcrypt/src/sp_int.c ****  *
8085:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
8086:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
8087:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
8088:../src/wolfcrypt/src/sp_int.c ****  *
8089:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
8090:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
8091:../src/wolfcrypt/src/sp_int.c ****  */
8092:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_12(sp_int* a, sp_int* b, sp_int* r)
8093:../src/wolfcrypt/src/sp_int.c **** {
8094:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
8095:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
8096:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o = 0;
8097:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[12];
8098:../src/wolfcrypt/src/sp_int.c **** 
8099:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL(h, l, a->dp[0], b->dp[0]);
8100:../src/wolfcrypt/src/sp_int.c ****     t[0] = h;
8101:../src/wolfcrypt/src/sp_int.c ****     h = 0;
8102:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD_NO(l, h, a->dp[0], b->dp[1]);
8103:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[0]);
8104:../src/wolfcrypt/src/sp_int.c ****     t[1] = l;
8105:../src/wolfcrypt/src/sp_int.c ****     l = h;
8106:../src/wolfcrypt/src/sp_int.c ****     h = o;
8107:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8108:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD_NO(l, h, a->dp[0], b->dp[2]);
8109:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[1]);
8110:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[0]);
8111:../src/wolfcrypt/src/sp_int.c ****     t[2] = l;
8112:../src/wolfcrypt/src/sp_int.c ****     l = h;
8113:../src/wolfcrypt/src/sp_int.c ****     h = o;
8114:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8115:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[3]);
8116:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[2]);
8117:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[1]);
8118:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[0]);
8119:../src/wolfcrypt/src/sp_int.c ****     t[3] = l;
8120:../src/wolfcrypt/src/sp_int.c ****     l = h;
8121:../src/wolfcrypt/src/sp_int.c ****     h = o;
8122:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8123:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[4]);
8124:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[3]);
8125:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[2]);
8126:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[1]);
8127:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[0]);
8128:../src/wolfcrypt/src/sp_int.c ****     t[4] = l;
8129:../src/wolfcrypt/src/sp_int.c ****     l = h;
8130:../src/wolfcrypt/src/sp_int.c ****     h = o;
8131:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8132:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[5]);
8133:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[4]);
8134:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[3]);
8135:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[2]);
8136:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[1]);
8137:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[0]);
8138:../src/wolfcrypt/src/sp_int.c ****     t[5] = l;
8139:../src/wolfcrypt/src/sp_int.c ****     l = h;
8140:../src/wolfcrypt/src/sp_int.c ****     h = o;
8141:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8142:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[6]);
8143:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[5]);
8144:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[4]);
8145:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[3]);
8146:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[2]);
8147:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[1]);
8148:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[0]);
8149:../src/wolfcrypt/src/sp_int.c ****     t[6] = l;
8150:../src/wolfcrypt/src/sp_int.c ****     l = h;
8151:../src/wolfcrypt/src/sp_int.c ****     h = o;
8152:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8153:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[7]);
8154:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[6]);
8155:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[5]);
8156:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[4]);
8157:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[3]);
8158:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[2]);
8159:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[1]);
8160:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[0]);
8161:../src/wolfcrypt/src/sp_int.c ****     t[7] = l;
8162:../src/wolfcrypt/src/sp_int.c ****     l = h;
8163:../src/wolfcrypt/src/sp_int.c ****     h = o;
8164:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8165:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[8]);
8166:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[7]);
8167:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[6]);
8168:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[5]);
8169:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[4]);
8170:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[3]);
8171:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[2]);
8172:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[1]);
8173:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[0]);
8174:../src/wolfcrypt/src/sp_int.c ****     t[8] = l;
8175:../src/wolfcrypt/src/sp_int.c ****     l = h;
8176:../src/wolfcrypt/src/sp_int.c ****     h = o;
8177:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8178:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[9]);
8179:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[8]);
8180:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[7]);
8181:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[6]);
8182:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[5]);
8183:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[4]);
8184:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[3]);
8185:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[2]);
8186:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[1]);
8187:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[0]);
8188:../src/wolfcrypt/src/sp_int.c ****     t[9] = l;
8189:../src/wolfcrypt/src/sp_int.c ****     l = h;
8190:../src/wolfcrypt/src/sp_int.c ****     h = o;
8191:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8192:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[10]);
8193:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[9]);
8194:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[8]);
8195:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[7]);
8196:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[6]);
8197:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[5]);
8198:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[4]);
8199:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[3]);
8200:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[2]);
8201:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[1]);
8202:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[0]);
8203:../src/wolfcrypt/src/sp_int.c ****     t[10] = l;
8204:../src/wolfcrypt/src/sp_int.c ****     l = h;
8205:../src/wolfcrypt/src/sp_int.c ****     h = o;
8206:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8207:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[11]);
8208:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[10]);
8209:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[9]);
8210:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[8]);
8211:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[7]);
8212:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[6]);
8213:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[5]);
8214:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[4]);
8215:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[3]);
8216:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[2]);
8217:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[1]);
8218:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[0]);
8219:../src/wolfcrypt/src/sp_int.c ****     t[11] = l;
8220:../src/wolfcrypt/src/sp_int.c ****     l = h;
8221:../src/wolfcrypt/src/sp_int.c ****     h = o;
8222:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8223:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[11]);
8224:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[10]);
8225:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[9]);
8226:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[8]);
8227:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[7]);
8228:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[6]);
8229:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[5]);
8230:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[4]);
8231:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[3]);
8232:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[2]);
8233:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[1]);
8234:../src/wolfcrypt/src/sp_int.c ****     r->dp[12] = l;
8235:../src/wolfcrypt/src/sp_int.c ****     l = h;
8236:../src/wolfcrypt/src/sp_int.c ****     h = o;
8237:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8238:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[11]);
8239:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[10]);
8240:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[9]);
8241:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[8]);
8242:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[7]);
8243:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[6]);
8244:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[5]);
8245:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[4]);
8246:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[3]);
8247:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[2]);
8248:../src/wolfcrypt/src/sp_int.c ****     r->dp[13] = l;
8249:../src/wolfcrypt/src/sp_int.c ****     l = h;
8250:../src/wolfcrypt/src/sp_int.c ****     h = o;
8251:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8252:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[11]);
8253:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[10]);
8254:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[9]);
8255:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[8]);
8256:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[7]);
8257:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[6]);
8258:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[5]);
8259:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[4]);
8260:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[3]);
8261:../src/wolfcrypt/src/sp_int.c ****     r->dp[14] = l;
8262:../src/wolfcrypt/src/sp_int.c ****     l = h;
8263:../src/wolfcrypt/src/sp_int.c ****     h = o;
8264:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8265:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[11]);
8266:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[10]);
8267:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[9]);
8268:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[8]);
8269:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[7]);
8270:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[6]);
8271:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[5]);
8272:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[4]);
8273:../src/wolfcrypt/src/sp_int.c ****     r->dp[15] = l;
8274:../src/wolfcrypt/src/sp_int.c ****     l = h;
8275:../src/wolfcrypt/src/sp_int.c ****     h = o;
8276:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8277:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[11]);
8278:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[10]);
8279:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[9]);
8280:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[8]);
8281:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[7]);
8282:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[6]);
8283:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[5]);
8284:../src/wolfcrypt/src/sp_int.c ****     r->dp[16] = l;
8285:../src/wolfcrypt/src/sp_int.c ****     l = h;
8286:../src/wolfcrypt/src/sp_int.c ****     h = o;
8287:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8288:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[11]);
8289:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[10]);
8290:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[9]);
8291:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[8]);
8292:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[7]);
8293:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[6]);
8294:../src/wolfcrypt/src/sp_int.c ****     r->dp[17] = l;
8295:../src/wolfcrypt/src/sp_int.c ****     l = h;
8296:../src/wolfcrypt/src/sp_int.c ****     h = o;
8297:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8298:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[11]);
8299:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[10]);
8300:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[9]);
8301:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[8]);
8302:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[7]);
8303:../src/wolfcrypt/src/sp_int.c ****     r->dp[18] = l;
8304:../src/wolfcrypt/src/sp_int.c ****     l = h;
8305:../src/wolfcrypt/src/sp_int.c ****     h = o;
8306:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8307:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[11]);
8308:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[10]);
8309:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[9]);
8310:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[8]);
8311:../src/wolfcrypt/src/sp_int.c ****     r->dp[19] = l;
8312:../src/wolfcrypt/src/sp_int.c ****     l = h;
8313:../src/wolfcrypt/src/sp_int.c ****     h = o;
8314:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8315:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[11]);
8316:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[10]);
8317:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[9]);
8318:../src/wolfcrypt/src/sp_int.c ****     r->dp[20] = l;
8319:../src/wolfcrypt/src/sp_int.c ****     l = h;
8320:../src/wolfcrypt/src/sp_int.c ****     h = o;
8321:../src/wolfcrypt/src/sp_int.c ****     o = 0;
8322:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[11]);
8323:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[10]);
8324:../src/wolfcrypt/src/sp_int.c ****     r->dp[21] = l;
8325:../src/wolfcrypt/src/sp_int.c ****     l = h;
8326:../src/wolfcrypt/src/sp_int.c ****     h = o;
8327:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD_NO(l, h, a->dp[11], b->dp[11]);
8328:../src/wolfcrypt/src/sp_int.c ****     r->dp[22] = l;
8329:../src/wolfcrypt/src/sp_int.c ****     r->dp[23] = h;
8330:../src/wolfcrypt/src/sp_int.c ****     XMEMCPY(r->dp, t, 12 * sizeof(sp_int_digit));
8331:../src/wolfcrypt/src/sp_int.c ****     r->used = 24;
8332:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(r);
8333:../src/wolfcrypt/src/sp_int.c **** 
8334:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
8335:../src/wolfcrypt/src/sp_int.c **** }
8336:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
8337:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 32 */
8338:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_HAVE_SP_ECC && HAVE_ECC */
8339:../src/wolfcrypt/src/sp_int.c **** 
8340:../src/wolfcrypt/src/sp_int.c **** #if defined(SQR_MUL_ASM) && defined(WOLFSSL_SP_INT_LARGE_COMBA)
8341:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 32
8342:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b and store in r: r = a * b
8343:../src/wolfcrypt/src/sp_int.c ****  *
8344:../src/wolfcrypt/src/sp_int.c ****  * Comba implementation.
8345:../src/wolfcrypt/src/sp_int.c ****  *
8346:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
8347:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
8348:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
8349:../src/wolfcrypt/src/sp_int.c ****  *
8350:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
8351:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
8352:../src/wolfcrypt/src/sp_int.c ****  */
8353:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_16(sp_int* a, sp_int* b, sp_int* r)
8354:../src/wolfcrypt/src/sp_int.c **** {
8355:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
8356:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
8357:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
8358:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o = 0;
8359:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
8360:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit* t = NULL;
8361:../src/wolfcrypt/src/sp_int.c **** #else
8362:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[16];
8363:../src/wolfcrypt/src/sp_int.c **** #endif
8364:../src/wolfcrypt/src/sp_int.c **** 
8365:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
8366:../src/wolfcrypt/src/sp_int.c ****      t = (sp_int_digit*)XMALLOC(sizeof(sp_int_digit) * 16, NULL,
8367:../src/wolfcrypt/src/sp_int.c ****          DYNAMIC_TYPE_BIGINT);
8368:../src/wolfcrypt/src/sp_int.c ****      if (t == NULL) {
8369:../src/wolfcrypt/src/sp_int.c ****          err = MP_MEM;
8370:../src/wolfcrypt/src/sp_int.c ****      }
8371:../src/wolfcrypt/src/sp_int.c **** #endif
8372:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
8373:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL(h, l, a->dp[0], b->dp[0]);
8374:../src/wolfcrypt/src/sp_int.c ****         t[0] = h;
8375:../src/wolfcrypt/src/sp_int.c ****         h = 0;
8376:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD_NO(l, h, a->dp[0], b->dp[1]);
8377:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[0]);
8378:../src/wolfcrypt/src/sp_int.c ****         t[1] = l;
8379:../src/wolfcrypt/src/sp_int.c ****         l = h;
8380:../src/wolfcrypt/src/sp_int.c ****         h = o;
8381:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8382:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD_NO(l, h, a->dp[0], b->dp[2]);
8383:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[1]);
8384:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[0]);
8385:../src/wolfcrypt/src/sp_int.c ****         t[2] = l;
8386:../src/wolfcrypt/src/sp_int.c ****         l = h;
8387:../src/wolfcrypt/src/sp_int.c ****         h = o;
8388:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8389:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[3]);
8390:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[2]);
8391:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[1]);
8392:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[0]);
8393:../src/wolfcrypt/src/sp_int.c ****         t[3] = l;
8394:../src/wolfcrypt/src/sp_int.c ****         l = h;
8395:../src/wolfcrypt/src/sp_int.c ****         h = o;
8396:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8397:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[4]);
8398:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[3]);
8399:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[2]);
8400:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[1]);
8401:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[0]);
8402:../src/wolfcrypt/src/sp_int.c ****         t[4] = l;
8403:../src/wolfcrypt/src/sp_int.c ****         l = h;
8404:../src/wolfcrypt/src/sp_int.c ****         h = o;
8405:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8406:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[5]);
8407:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[4]);
8408:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[3]);
8409:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[2]);
8410:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[1]);
8411:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[0]);
8412:../src/wolfcrypt/src/sp_int.c ****         t[5] = l;
8413:../src/wolfcrypt/src/sp_int.c ****         l = h;
8414:../src/wolfcrypt/src/sp_int.c ****         h = o;
8415:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8416:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[6]);
8417:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[5]);
8418:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[4]);
8419:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[3]);
8420:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[2]);
8421:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[1]);
8422:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[0]);
8423:../src/wolfcrypt/src/sp_int.c ****         t[6] = l;
8424:../src/wolfcrypt/src/sp_int.c ****         l = h;
8425:../src/wolfcrypt/src/sp_int.c ****         h = o;
8426:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8427:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[7]);
8428:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[6]);
8429:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[5]);
8430:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[4]);
8431:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[3]);
8432:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[2]);
8433:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[1]);
8434:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[0]);
8435:../src/wolfcrypt/src/sp_int.c ****         t[7] = l;
8436:../src/wolfcrypt/src/sp_int.c ****         l = h;
8437:../src/wolfcrypt/src/sp_int.c ****         h = o;
8438:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8439:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[8]);
8440:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[7]);
8441:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[6]);
8442:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[5]);
8443:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[4]);
8444:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[3]);
8445:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[2]);
8446:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[1]);
8447:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[0]);
8448:../src/wolfcrypt/src/sp_int.c ****         t[8] = l;
8449:../src/wolfcrypt/src/sp_int.c ****         l = h;
8450:../src/wolfcrypt/src/sp_int.c ****         h = o;
8451:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8452:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[9]);
8453:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[8]);
8454:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[7]);
8455:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[6]);
8456:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[5]);
8457:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[4]);
8458:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[3]);
8459:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[2]);
8460:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[1]);
8461:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[0]);
8462:../src/wolfcrypt/src/sp_int.c ****         t[9] = l;
8463:../src/wolfcrypt/src/sp_int.c ****         l = h;
8464:../src/wolfcrypt/src/sp_int.c ****         h = o;
8465:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8466:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[10]);
8467:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[9]);
8468:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[8]);
8469:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[7]);
8470:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[6]);
8471:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[5]);
8472:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[4]);
8473:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[3]);
8474:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[2]);
8475:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[1]);
8476:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[0]);
8477:../src/wolfcrypt/src/sp_int.c ****         t[10] = l;
8478:../src/wolfcrypt/src/sp_int.c ****         l = h;
8479:../src/wolfcrypt/src/sp_int.c ****         h = o;
8480:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8481:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[11]);
8482:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[10]);
8483:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[9]);
8484:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[8]);
8485:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[7]);
8486:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[6]);
8487:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[5]);
8488:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[4]);
8489:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[3]);
8490:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[2]);
8491:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[1]);
8492:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[0]);
8493:../src/wolfcrypt/src/sp_int.c ****         t[11] = l;
8494:../src/wolfcrypt/src/sp_int.c ****         l = h;
8495:../src/wolfcrypt/src/sp_int.c ****         h = o;
8496:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8497:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[12]);
8498:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[11]);
8499:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[10]);
8500:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[9]);
8501:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[8]);
8502:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[7]);
8503:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[6]);
8504:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[5]);
8505:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[4]);
8506:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[3]);
8507:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[2]);
8508:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[1]);
8509:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[0]);
8510:../src/wolfcrypt/src/sp_int.c ****         t[12] = l;
8511:../src/wolfcrypt/src/sp_int.c ****         l = h;
8512:../src/wolfcrypt/src/sp_int.c ****         h = o;
8513:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8514:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[13]);
8515:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[12]);
8516:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[11]);
8517:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[10]);
8518:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[9]);
8519:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[8]);
8520:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[7]);
8521:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[6]);
8522:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[5]);
8523:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[4]);
8524:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[3]);
8525:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[2]);
8526:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[1]);
8527:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[0]);
8528:../src/wolfcrypt/src/sp_int.c ****         t[13] = l;
8529:../src/wolfcrypt/src/sp_int.c ****         l = h;
8530:../src/wolfcrypt/src/sp_int.c ****         h = o;
8531:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8532:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[14]);
8533:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[13]);
8534:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[12]);
8535:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[11]);
8536:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[10]);
8537:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[9]);
8538:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[8]);
8539:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[7]);
8540:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[6]);
8541:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[5]);
8542:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[4]);
8543:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[3]);
8544:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[2]);
8545:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[1]);
8546:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[0]);
8547:../src/wolfcrypt/src/sp_int.c ****         t[14] = l;
8548:../src/wolfcrypt/src/sp_int.c ****         l = h;
8549:../src/wolfcrypt/src/sp_int.c ****         h = o;
8550:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8551:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[15]);
8552:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[14]);
8553:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[13]);
8554:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[12]);
8555:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[11]);
8556:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[10]);
8557:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[9]);
8558:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[8]);
8559:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[7]);
8560:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[6]);
8561:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[5]);
8562:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[4]);
8563:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[3]);
8564:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[2]);
8565:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[1]);
8566:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[0]);
8567:../src/wolfcrypt/src/sp_int.c ****         t[15] = l;
8568:../src/wolfcrypt/src/sp_int.c ****         l = h;
8569:../src/wolfcrypt/src/sp_int.c ****         h = o;
8570:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8571:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[15]);
8572:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[14]);
8573:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[13]);
8574:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[12]);
8575:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[11]);
8576:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[10]);
8577:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[9]);
8578:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[8]);
8579:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[7]);
8580:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[6]);
8581:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[5]);
8582:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[4]);
8583:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[3]);
8584:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[2]);
8585:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[1]);
8586:../src/wolfcrypt/src/sp_int.c ****         r->dp[16] = l;
8587:../src/wolfcrypt/src/sp_int.c ****         l = h;
8588:../src/wolfcrypt/src/sp_int.c ****         h = o;
8589:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8590:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[15]);
8591:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[14]);
8592:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[13]);
8593:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[12]);
8594:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[11]);
8595:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[10]);
8596:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[9]);
8597:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[8]);
8598:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[7]);
8599:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[6]);
8600:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[5]);
8601:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[4]);
8602:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[3]);
8603:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[2]);
8604:../src/wolfcrypt/src/sp_int.c ****         r->dp[17] = l;
8605:../src/wolfcrypt/src/sp_int.c ****         l = h;
8606:../src/wolfcrypt/src/sp_int.c ****         h = o;
8607:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8608:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[15]);
8609:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[14]);
8610:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[13]);
8611:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[12]);
8612:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[11]);
8613:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[10]);
8614:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[9]);
8615:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[8]);
8616:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[7]);
8617:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[6]);
8618:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[5]);
8619:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[4]);
8620:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[3]);
8621:../src/wolfcrypt/src/sp_int.c ****         r->dp[18] = l;
8622:../src/wolfcrypt/src/sp_int.c ****         l = h;
8623:../src/wolfcrypt/src/sp_int.c ****         h = o;
8624:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8625:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[15]);
8626:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[14]);
8627:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[13]);
8628:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[12]);
8629:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[11]);
8630:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[10]);
8631:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[9]);
8632:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[8]);
8633:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[7]);
8634:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[6]);
8635:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[5]);
8636:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[4]);
8637:../src/wolfcrypt/src/sp_int.c ****         r->dp[19] = l;
8638:../src/wolfcrypt/src/sp_int.c ****         l = h;
8639:../src/wolfcrypt/src/sp_int.c ****         h = o;
8640:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8641:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[15]);
8642:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[14]);
8643:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[13]);
8644:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[12]);
8645:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[11]);
8646:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[10]);
8647:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[9]);
8648:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[8]);
8649:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[7]);
8650:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[6]);
8651:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[5]);
8652:../src/wolfcrypt/src/sp_int.c ****         r->dp[20] = l;
8653:../src/wolfcrypt/src/sp_int.c ****         l = h;
8654:../src/wolfcrypt/src/sp_int.c ****         h = o;
8655:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8656:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[15]);
8657:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[14]);
8658:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[13]);
8659:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[12]);
8660:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[11]);
8661:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[10]);
8662:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[9]);
8663:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[8]);
8664:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[7]);
8665:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[6]);
8666:../src/wolfcrypt/src/sp_int.c ****         r->dp[21] = l;
8667:../src/wolfcrypt/src/sp_int.c ****         l = h;
8668:../src/wolfcrypt/src/sp_int.c ****         h = o;
8669:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8670:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[15]);
8671:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[14]);
8672:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[13]);
8673:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[12]);
8674:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[11]);
8675:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[10]);
8676:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[9]);
8677:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[8]);
8678:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[7]);
8679:../src/wolfcrypt/src/sp_int.c ****         r->dp[22] = l;
8680:../src/wolfcrypt/src/sp_int.c ****         l = h;
8681:../src/wolfcrypt/src/sp_int.c ****         h = o;
8682:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8683:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[15]);
8684:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[14]);
8685:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[13]);
8686:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[12]);
8687:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[11]);
8688:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[10]);
8689:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[9]);
8690:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[8]);
8691:../src/wolfcrypt/src/sp_int.c ****         r->dp[23] = l;
8692:../src/wolfcrypt/src/sp_int.c ****         l = h;
8693:../src/wolfcrypt/src/sp_int.c ****         h = o;
8694:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8695:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[15]);
8696:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[14]);
8697:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[13]);
8698:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[12]);
8699:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[11]);
8700:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[10]);
8701:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[9]);
8702:../src/wolfcrypt/src/sp_int.c ****         r->dp[24] = l;
8703:../src/wolfcrypt/src/sp_int.c ****         l = h;
8704:../src/wolfcrypt/src/sp_int.c ****         h = o;
8705:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8706:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[15]);
8707:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[14]);
8708:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[13]);
8709:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[12]);
8710:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[11]);
8711:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[10]);
8712:../src/wolfcrypt/src/sp_int.c ****         r->dp[25] = l;
8713:../src/wolfcrypt/src/sp_int.c ****         l = h;
8714:../src/wolfcrypt/src/sp_int.c ****         h = o;
8715:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8716:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[15]);
8717:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[14]);
8718:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[13]);
8719:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[12]);
8720:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[11]);
8721:../src/wolfcrypt/src/sp_int.c ****         r->dp[26] = l;
8722:../src/wolfcrypt/src/sp_int.c ****         l = h;
8723:../src/wolfcrypt/src/sp_int.c ****         h = o;
8724:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8725:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[15]);
8726:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[14]);
8727:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[13]);
8728:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[12]);
8729:../src/wolfcrypt/src/sp_int.c ****         r->dp[27] = l;
8730:../src/wolfcrypt/src/sp_int.c ****         l = h;
8731:../src/wolfcrypt/src/sp_int.c ****         h = o;
8732:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8733:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[15]);
8734:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[14]);
8735:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[13]);
8736:../src/wolfcrypt/src/sp_int.c ****         r->dp[28] = l;
8737:../src/wolfcrypt/src/sp_int.c ****         l = h;
8738:../src/wolfcrypt/src/sp_int.c ****         h = o;
8739:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8740:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[15]);
8741:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[14]);
8742:../src/wolfcrypt/src/sp_int.c ****         r->dp[29] = l;
8743:../src/wolfcrypt/src/sp_int.c ****         l = h;
8744:../src/wolfcrypt/src/sp_int.c ****         h = o;
8745:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD_NO(l, h, a->dp[15], b->dp[15]);
8746:../src/wolfcrypt/src/sp_int.c ****         r->dp[30] = l;
8747:../src/wolfcrypt/src/sp_int.c ****         r->dp[31] = h;
8748:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(r->dp, t, 16 * sizeof(sp_int_digit));
8749:../src/wolfcrypt/src/sp_int.c ****         r->used = 32;
8750:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
8751:../src/wolfcrypt/src/sp_int.c ****     }
8752:../src/wolfcrypt/src/sp_int.c **** 
8753:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
8754:../src/wolfcrypt/src/sp_int.c ****     if (t != NULL) {
8755:../src/wolfcrypt/src/sp_int.c ****         XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
8756:../src/wolfcrypt/src/sp_int.c ****     }
8757:../src/wolfcrypt/src/sp_int.c **** #endif
8758:../src/wolfcrypt/src/sp_int.c ****     return err;
8759:../src/wolfcrypt/src/sp_int.c **** }
8760:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 32 */
8761:../src/wolfcrypt/src/sp_int.c **** 
8762:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 48
8763:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b and store in r: r = a * b
8764:../src/wolfcrypt/src/sp_int.c ****  *
8765:../src/wolfcrypt/src/sp_int.c ****  * Comba implementation.
8766:../src/wolfcrypt/src/sp_int.c ****  *
8767:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
8768:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
8769:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
8770:../src/wolfcrypt/src/sp_int.c ****  *
8771:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
8772:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
8773:../src/wolfcrypt/src/sp_int.c ****  */
8774:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_24(sp_int* a, sp_int* b, sp_int* r)
8775:../src/wolfcrypt/src/sp_int.c **** {
8776:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
8777:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
8778:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
8779:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o = 0;
8780:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
8781:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit* t = NULL;
8782:../src/wolfcrypt/src/sp_int.c **** #else
8783:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[24];
8784:../src/wolfcrypt/src/sp_int.c **** #endif
8785:../src/wolfcrypt/src/sp_int.c **** 
8786:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
8787:../src/wolfcrypt/src/sp_int.c ****      t = (sp_int_digit*)XMALLOC(sizeof(sp_int_digit) * 24, NULL,
8788:../src/wolfcrypt/src/sp_int.c ****          DYNAMIC_TYPE_BIGINT);
8789:../src/wolfcrypt/src/sp_int.c ****      if (t == NULL) {
8790:../src/wolfcrypt/src/sp_int.c ****          err = MP_MEM;
8791:../src/wolfcrypt/src/sp_int.c ****      }
8792:../src/wolfcrypt/src/sp_int.c **** #endif
8793:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
8794:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL(h, l, a->dp[0], b->dp[0]);
8795:../src/wolfcrypt/src/sp_int.c ****         t[0] = h;
8796:../src/wolfcrypt/src/sp_int.c ****         h = 0;
8797:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD_NO(l, h, a->dp[0], b->dp[1]);
8798:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[0]);
8799:../src/wolfcrypt/src/sp_int.c ****         t[1] = l;
8800:../src/wolfcrypt/src/sp_int.c ****         l = h;
8801:../src/wolfcrypt/src/sp_int.c ****         h = o;
8802:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8803:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD_NO(l, h, a->dp[0], b->dp[2]);
8804:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[1]);
8805:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[0]);
8806:../src/wolfcrypt/src/sp_int.c ****         t[2] = l;
8807:../src/wolfcrypt/src/sp_int.c ****         l = h;
8808:../src/wolfcrypt/src/sp_int.c ****         h = o;
8809:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8810:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[3]);
8811:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[2]);
8812:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[1]);
8813:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[0]);
8814:../src/wolfcrypt/src/sp_int.c ****         t[3] = l;
8815:../src/wolfcrypt/src/sp_int.c ****         l = h;
8816:../src/wolfcrypt/src/sp_int.c ****         h = o;
8817:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8818:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[4]);
8819:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[3]);
8820:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[2]);
8821:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[1]);
8822:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[0]);
8823:../src/wolfcrypt/src/sp_int.c ****         t[4] = l;
8824:../src/wolfcrypt/src/sp_int.c ****         l = h;
8825:../src/wolfcrypt/src/sp_int.c ****         h = o;
8826:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8827:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[5]);
8828:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[4]);
8829:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[3]);
8830:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[2]);
8831:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[1]);
8832:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[0]);
8833:../src/wolfcrypt/src/sp_int.c ****         t[5] = l;
8834:../src/wolfcrypt/src/sp_int.c ****         l = h;
8835:../src/wolfcrypt/src/sp_int.c ****         h = o;
8836:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8837:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[6]);
8838:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[5]);
8839:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[4]);
8840:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[3]);
8841:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[2]);
8842:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[1]);
8843:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[0]);
8844:../src/wolfcrypt/src/sp_int.c ****         t[6] = l;
8845:../src/wolfcrypt/src/sp_int.c ****         l = h;
8846:../src/wolfcrypt/src/sp_int.c ****         h = o;
8847:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8848:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[7]);
8849:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[6]);
8850:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[5]);
8851:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[4]);
8852:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[3]);
8853:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[2]);
8854:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[1]);
8855:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[0]);
8856:../src/wolfcrypt/src/sp_int.c ****         t[7] = l;
8857:../src/wolfcrypt/src/sp_int.c ****         l = h;
8858:../src/wolfcrypt/src/sp_int.c ****         h = o;
8859:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8860:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[8]);
8861:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[7]);
8862:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[6]);
8863:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[5]);
8864:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[4]);
8865:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[3]);
8866:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[2]);
8867:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[1]);
8868:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[0]);
8869:../src/wolfcrypt/src/sp_int.c ****         t[8] = l;
8870:../src/wolfcrypt/src/sp_int.c ****         l = h;
8871:../src/wolfcrypt/src/sp_int.c ****         h = o;
8872:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8873:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[9]);
8874:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[8]);
8875:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[7]);
8876:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[6]);
8877:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[5]);
8878:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[4]);
8879:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[3]);
8880:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[2]);
8881:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[1]);
8882:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[0]);
8883:../src/wolfcrypt/src/sp_int.c ****         t[9] = l;
8884:../src/wolfcrypt/src/sp_int.c ****         l = h;
8885:../src/wolfcrypt/src/sp_int.c ****         h = o;
8886:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8887:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[10]);
8888:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[9]);
8889:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[8]);
8890:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[7]);
8891:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[6]);
8892:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[5]);
8893:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[4]);
8894:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[3]);
8895:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[2]);
8896:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[1]);
8897:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[0]);
8898:../src/wolfcrypt/src/sp_int.c ****         t[10] = l;
8899:../src/wolfcrypt/src/sp_int.c ****         l = h;
8900:../src/wolfcrypt/src/sp_int.c ****         h = o;
8901:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8902:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[11]);
8903:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[10]);
8904:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[9]);
8905:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[8]);
8906:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[7]);
8907:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[6]);
8908:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[5]);
8909:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[4]);
8910:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[3]);
8911:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[2]);
8912:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[1]);
8913:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[0]);
8914:../src/wolfcrypt/src/sp_int.c ****         t[11] = l;
8915:../src/wolfcrypt/src/sp_int.c ****         l = h;
8916:../src/wolfcrypt/src/sp_int.c ****         h = o;
8917:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8918:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[12]);
8919:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[11]);
8920:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[10]);
8921:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[9]);
8922:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[8]);
8923:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[7]);
8924:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[6]);
8925:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[5]);
8926:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[4]);
8927:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[3]);
8928:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[2]);
8929:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[1]);
8930:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[0]);
8931:../src/wolfcrypt/src/sp_int.c ****         t[12] = l;
8932:../src/wolfcrypt/src/sp_int.c ****         l = h;
8933:../src/wolfcrypt/src/sp_int.c ****         h = o;
8934:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8935:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[13]);
8936:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[12]);
8937:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[11]);
8938:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[10]);
8939:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[9]);
8940:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[8]);
8941:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[7]);
8942:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[6]);
8943:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[5]);
8944:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[4]);
8945:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[3]);
8946:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[2]);
8947:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[1]);
8948:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[0]);
8949:../src/wolfcrypt/src/sp_int.c ****         t[13] = l;
8950:../src/wolfcrypt/src/sp_int.c ****         l = h;
8951:../src/wolfcrypt/src/sp_int.c ****         h = o;
8952:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8953:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[14]);
8954:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[13]);
8955:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[12]);
8956:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[11]);
8957:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[10]);
8958:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[9]);
8959:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[8]);
8960:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[7]);
8961:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[6]);
8962:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[5]);
8963:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[4]);
8964:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[3]);
8965:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[2]);
8966:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[1]);
8967:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[0]);
8968:../src/wolfcrypt/src/sp_int.c ****         t[14] = l;
8969:../src/wolfcrypt/src/sp_int.c ****         l = h;
8970:../src/wolfcrypt/src/sp_int.c ****         h = o;
8971:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8972:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[15]);
8973:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[14]);
8974:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[13]);
8975:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[12]);
8976:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[11]);
8977:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[10]);
8978:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[9]);
8979:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[8]);
8980:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[7]);
8981:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[6]);
8982:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[5]);
8983:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[4]);
8984:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[3]);
8985:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[2]);
8986:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[1]);
8987:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[0]);
8988:../src/wolfcrypt/src/sp_int.c ****         t[15] = l;
8989:../src/wolfcrypt/src/sp_int.c ****         l = h;
8990:../src/wolfcrypt/src/sp_int.c ****         h = o;
8991:../src/wolfcrypt/src/sp_int.c ****         o = 0;
8992:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[16]);
8993:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[15]);
8994:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[14]);
8995:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[13]);
8996:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[12]);
8997:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[11]);
8998:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[10]);
8999:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[9]);
9000:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[8]);
9001:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[7]);
9002:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[6]);
9003:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[5]);
9004:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[4]);
9005:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[3]);
9006:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[2]);
9007:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[1]);
9008:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[0]);
9009:../src/wolfcrypt/src/sp_int.c ****         t[16] = l;
9010:../src/wolfcrypt/src/sp_int.c ****         l = h;
9011:../src/wolfcrypt/src/sp_int.c ****         h = o;
9012:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9013:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[17]);
9014:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[16]);
9015:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[15]);
9016:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[14]);
9017:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[13]);
9018:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[12]);
9019:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[11]);
9020:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[10]);
9021:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[9]);
9022:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[8]);
9023:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[7]);
9024:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[6]);
9025:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[5]);
9026:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[4]);
9027:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[3]);
9028:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[2]);
9029:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[1]);
9030:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[0]);
9031:../src/wolfcrypt/src/sp_int.c ****         t[17] = l;
9032:../src/wolfcrypt/src/sp_int.c ****         l = h;
9033:../src/wolfcrypt/src/sp_int.c ****         h = o;
9034:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9035:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[18]);
9036:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[17]);
9037:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[16]);
9038:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[15]);
9039:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[14]);
9040:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[13]);
9041:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[12]);
9042:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[11]);
9043:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[10]);
9044:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[9]);
9045:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[8]);
9046:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[7]);
9047:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[6]);
9048:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[5]);
9049:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[4]);
9050:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[3]);
9051:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[2]);
9052:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[1]);
9053:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[0]);
9054:../src/wolfcrypt/src/sp_int.c ****         t[18] = l;
9055:../src/wolfcrypt/src/sp_int.c ****         l = h;
9056:../src/wolfcrypt/src/sp_int.c ****         h = o;
9057:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9058:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[19]);
9059:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[18]);
9060:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[17]);
9061:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[16]);
9062:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[15]);
9063:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[14]);
9064:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[13]);
9065:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[12]);
9066:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[11]);
9067:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[10]);
9068:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[9]);
9069:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[8]);
9070:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[7]);
9071:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[6]);
9072:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[5]);
9073:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[4]);
9074:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[3]);
9075:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[2]);
9076:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[1]);
9077:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[0]);
9078:../src/wolfcrypt/src/sp_int.c ****         t[19] = l;
9079:../src/wolfcrypt/src/sp_int.c ****         l = h;
9080:../src/wolfcrypt/src/sp_int.c ****         h = o;
9081:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9082:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[20]);
9083:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[19]);
9084:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[18]);
9085:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[17]);
9086:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[16]);
9087:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[15]);
9088:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[14]);
9089:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[13]);
9090:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[12]);
9091:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[11]);
9092:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[10]);
9093:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[9]);
9094:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[8]);
9095:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[7]);
9096:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[6]);
9097:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[5]);
9098:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[4]);
9099:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[3]);
9100:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[2]);
9101:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[1]);
9102:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[0]);
9103:../src/wolfcrypt/src/sp_int.c ****         t[20] = l;
9104:../src/wolfcrypt/src/sp_int.c ****         l = h;
9105:../src/wolfcrypt/src/sp_int.c ****         h = o;
9106:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9107:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[21]);
9108:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[20]);
9109:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[19]);
9110:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[18]);
9111:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[17]);
9112:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[16]);
9113:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[15]);
9114:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[14]);
9115:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[13]);
9116:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[12]);
9117:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[11]);
9118:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[10]);
9119:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[9]);
9120:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[8]);
9121:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[7]);
9122:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[6]);
9123:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[5]);
9124:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[4]);
9125:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[3]);
9126:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[2]);
9127:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[1]);
9128:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[0]);
9129:../src/wolfcrypt/src/sp_int.c ****         t[21] = l;
9130:../src/wolfcrypt/src/sp_int.c ****         l = h;
9131:../src/wolfcrypt/src/sp_int.c ****         h = o;
9132:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9133:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[22]);
9134:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[21]);
9135:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[20]);
9136:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[19]);
9137:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[18]);
9138:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[17]);
9139:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[16]);
9140:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[15]);
9141:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[14]);
9142:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[13]);
9143:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[12]);
9144:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[11]);
9145:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[10]);
9146:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[9]);
9147:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[8]);
9148:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[7]);
9149:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[6]);
9150:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[5]);
9151:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[4]);
9152:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[3]);
9153:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[2]);
9154:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[1]);
9155:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[0]);
9156:../src/wolfcrypt/src/sp_int.c ****         t[22] = l;
9157:../src/wolfcrypt/src/sp_int.c ****         l = h;
9158:../src/wolfcrypt/src/sp_int.c ****         h = o;
9159:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9160:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[0], b->dp[23]);
9161:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[22]);
9162:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[21]);
9163:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[20]);
9164:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[19]);
9165:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[18]);
9166:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[17]);
9167:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[16]);
9168:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[15]);
9169:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[14]);
9170:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[13]);
9171:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[12]);
9172:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[11]);
9173:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[10]);
9174:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[9]);
9175:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[8]);
9176:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[7]);
9177:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[6]);
9178:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[5]);
9179:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[4]);
9180:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[3]);
9181:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[2]);
9182:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[1]);
9183:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[0]);
9184:../src/wolfcrypt/src/sp_int.c ****         t[23] = l;
9185:../src/wolfcrypt/src/sp_int.c ****         l = h;
9186:../src/wolfcrypt/src/sp_int.c ****         h = o;
9187:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9188:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[1], b->dp[23]);
9189:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[22]);
9190:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[21]);
9191:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[20]);
9192:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[19]);
9193:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[18]);
9194:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[17]);
9195:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[16]);
9196:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[15]);
9197:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[14]);
9198:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[13]);
9199:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[12]);
9200:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[11]);
9201:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[10]);
9202:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[9]);
9203:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[8]);
9204:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[7]);
9205:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[6]);
9206:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[5]);
9207:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[4]);
9208:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[3]);
9209:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[2]);
9210:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[1]);
9211:../src/wolfcrypt/src/sp_int.c ****         r->dp[24] = l;
9212:../src/wolfcrypt/src/sp_int.c ****         l = h;
9213:../src/wolfcrypt/src/sp_int.c ****         h = o;
9214:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9215:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[2], b->dp[23]);
9216:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[22]);
9217:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[21]);
9218:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[20]);
9219:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[19]);
9220:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[18]);
9221:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[17]);
9222:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[16]);
9223:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[15]);
9224:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[14]);
9225:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[13]);
9226:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[12]);
9227:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[11]);
9228:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[10]);
9229:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[9]);
9230:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[8]);
9231:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[7]);
9232:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[6]);
9233:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[5]);
9234:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[4]);
9235:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[3]);
9236:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[2]);
9237:../src/wolfcrypt/src/sp_int.c ****         r->dp[25] = l;
9238:../src/wolfcrypt/src/sp_int.c ****         l = h;
9239:../src/wolfcrypt/src/sp_int.c ****         h = o;
9240:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9241:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[3], b->dp[23]);
9242:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[22]);
9243:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[21]);
9244:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[20]);
9245:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[19]);
9246:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[18]);
9247:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[17]);
9248:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[16]);
9249:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[15]);
9250:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[14]);
9251:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[13]);
9252:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[12]);
9253:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[11]);
9254:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[10]);
9255:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[9]);
9256:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[8]);
9257:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[7]);
9258:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[6]);
9259:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[5]);
9260:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[4]);
9261:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[3]);
9262:../src/wolfcrypt/src/sp_int.c ****         r->dp[26] = l;
9263:../src/wolfcrypt/src/sp_int.c ****         l = h;
9264:../src/wolfcrypt/src/sp_int.c ****         h = o;
9265:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9266:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[4], b->dp[23]);
9267:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[22]);
9268:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[21]);
9269:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[20]);
9270:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[19]);
9271:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[18]);
9272:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[17]);
9273:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[16]);
9274:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[15]);
9275:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[14]);
9276:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[13]);
9277:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[12]);
9278:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[11]);
9279:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[10]);
9280:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[9]);
9281:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[8]);
9282:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[7]);
9283:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[6]);
9284:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[5]);
9285:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[4]);
9286:../src/wolfcrypt/src/sp_int.c ****         r->dp[27] = l;
9287:../src/wolfcrypt/src/sp_int.c ****         l = h;
9288:../src/wolfcrypt/src/sp_int.c ****         h = o;
9289:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9290:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[5], b->dp[23]);
9291:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[22]);
9292:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[21]);
9293:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[20]);
9294:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[19]);
9295:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[18]);
9296:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[17]);
9297:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[16]);
9298:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[15]);
9299:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[14]);
9300:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[13]);
9301:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[12]);
9302:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[11]);
9303:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[10]);
9304:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[9]);
9305:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[8]);
9306:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[7]);
9307:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[6]);
9308:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[5]);
9309:../src/wolfcrypt/src/sp_int.c ****         r->dp[28] = l;
9310:../src/wolfcrypt/src/sp_int.c ****         l = h;
9311:../src/wolfcrypt/src/sp_int.c ****         h = o;
9312:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9313:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[6], b->dp[23]);
9314:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[22]);
9315:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[21]);
9316:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[20]);
9317:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[19]);
9318:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[18]);
9319:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[17]);
9320:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[16]);
9321:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[15]);
9322:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[14]);
9323:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[13]);
9324:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[12]);
9325:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[11]);
9326:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[10]);
9327:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[9]);
9328:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[8]);
9329:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[7]);
9330:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[6]);
9331:../src/wolfcrypt/src/sp_int.c ****         r->dp[29] = l;
9332:../src/wolfcrypt/src/sp_int.c ****         l = h;
9333:../src/wolfcrypt/src/sp_int.c ****         h = o;
9334:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9335:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[7], b->dp[23]);
9336:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[22]);
9337:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[21]);
9338:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[20]);
9339:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[19]);
9340:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[18]);
9341:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[17]);
9342:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[16]);
9343:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[15]);
9344:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[14]);
9345:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[13]);
9346:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[12]);
9347:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[11]);
9348:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[10]);
9349:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[9]);
9350:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[8]);
9351:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[7]);
9352:../src/wolfcrypt/src/sp_int.c ****         r->dp[30] = l;
9353:../src/wolfcrypt/src/sp_int.c ****         l = h;
9354:../src/wolfcrypt/src/sp_int.c ****         h = o;
9355:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9356:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[8], b->dp[23]);
9357:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[22]);
9358:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[21]);
9359:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[20]);
9360:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[19]);
9361:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[18]);
9362:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[17]);
9363:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[16]);
9364:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[15]);
9365:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[14]);
9366:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[13]);
9367:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[12]);
9368:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[11]);
9369:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[10]);
9370:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[9]);
9371:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[8]);
9372:../src/wolfcrypt/src/sp_int.c ****         r->dp[31] = l;
9373:../src/wolfcrypt/src/sp_int.c ****         l = h;
9374:../src/wolfcrypt/src/sp_int.c ****         h = o;
9375:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9376:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[9], b->dp[23]);
9377:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[22]);
9378:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[21]);
9379:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[20]);
9380:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[19]);
9381:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[18]);
9382:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[17]);
9383:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[16]);
9384:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[15]);
9385:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[14]);
9386:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[13]);
9387:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[12]);
9388:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[11]);
9389:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[10]);
9390:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[9]);
9391:../src/wolfcrypt/src/sp_int.c ****         r->dp[32] = l;
9392:../src/wolfcrypt/src/sp_int.c ****         l = h;
9393:../src/wolfcrypt/src/sp_int.c ****         h = o;
9394:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9395:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[10], b->dp[23]);
9396:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[22]);
9397:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[21]);
9398:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[20]);
9399:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[19]);
9400:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[18]);
9401:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[17]);
9402:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[16]);
9403:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[15]);
9404:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[14]);
9405:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[13]);
9406:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[12]);
9407:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[11]);
9408:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[10]);
9409:../src/wolfcrypt/src/sp_int.c ****         r->dp[33] = l;
9410:../src/wolfcrypt/src/sp_int.c ****         l = h;
9411:../src/wolfcrypt/src/sp_int.c ****         h = o;
9412:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9413:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[11], b->dp[23]);
9414:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[22]);
9415:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[21]);
9416:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[20]);
9417:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[19]);
9418:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[18]);
9419:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[17]);
9420:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[16]);
9421:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[15]);
9422:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[14]);
9423:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[13]);
9424:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[12]);
9425:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[11]);
9426:../src/wolfcrypt/src/sp_int.c ****         r->dp[34] = l;
9427:../src/wolfcrypt/src/sp_int.c ****         l = h;
9428:../src/wolfcrypt/src/sp_int.c ****         h = o;
9429:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9430:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[12], b->dp[23]);
9431:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[22]);
9432:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[21]);
9433:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[20]);
9434:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[19]);
9435:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[18]);
9436:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[17]);
9437:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[16]);
9438:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[15]);
9439:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[14]);
9440:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[13]);
9441:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[12]);
9442:../src/wolfcrypt/src/sp_int.c ****         r->dp[35] = l;
9443:../src/wolfcrypt/src/sp_int.c ****         l = h;
9444:../src/wolfcrypt/src/sp_int.c ****         h = o;
9445:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9446:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[13], b->dp[23]);
9447:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[22]);
9448:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[21]);
9449:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[20]);
9450:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[19]);
9451:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[18]);
9452:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[17]);
9453:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[16]);
9454:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[15]);
9455:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[14]);
9456:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[13]);
9457:../src/wolfcrypt/src/sp_int.c ****         r->dp[36] = l;
9458:../src/wolfcrypt/src/sp_int.c ****         l = h;
9459:../src/wolfcrypt/src/sp_int.c ****         h = o;
9460:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9461:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[14], b->dp[23]);
9462:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[22]);
9463:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[21]);
9464:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[20]);
9465:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[19]);
9466:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[18]);
9467:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[17]);
9468:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[16]);
9469:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[15]);
9470:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[14]);
9471:../src/wolfcrypt/src/sp_int.c ****         r->dp[37] = l;
9472:../src/wolfcrypt/src/sp_int.c ****         l = h;
9473:../src/wolfcrypt/src/sp_int.c ****         h = o;
9474:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9475:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[15], b->dp[23]);
9476:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[22]);
9477:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[21]);
9478:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[20]);
9479:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[19]);
9480:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[18]);
9481:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[17]);
9482:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[16]);
9483:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[15]);
9484:../src/wolfcrypt/src/sp_int.c ****         r->dp[38] = l;
9485:../src/wolfcrypt/src/sp_int.c ****         l = h;
9486:../src/wolfcrypt/src/sp_int.c ****         h = o;
9487:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9488:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[16], b->dp[23]);
9489:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[22]);
9490:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[21]);
9491:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[20]);
9492:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[19]);
9493:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[18]);
9494:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[17]);
9495:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[16]);
9496:../src/wolfcrypt/src/sp_int.c ****         r->dp[39] = l;
9497:../src/wolfcrypt/src/sp_int.c ****         l = h;
9498:../src/wolfcrypt/src/sp_int.c ****         h = o;
9499:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9500:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[17], b->dp[23]);
9501:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[22]);
9502:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[21]);
9503:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[20]);
9504:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[19]);
9505:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[18]);
9506:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[17]);
9507:../src/wolfcrypt/src/sp_int.c ****         r->dp[40] = l;
9508:../src/wolfcrypt/src/sp_int.c ****         l = h;
9509:../src/wolfcrypt/src/sp_int.c ****         h = o;
9510:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9511:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[18], b->dp[23]);
9512:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[22]);
9513:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[21]);
9514:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[20]);
9515:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[19]);
9516:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[18]);
9517:../src/wolfcrypt/src/sp_int.c ****         r->dp[41] = l;
9518:../src/wolfcrypt/src/sp_int.c ****         l = h;
9519:../src/wolfcrypt/src/sp_int.c ****         h = o;
9520:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9521:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[19], b->dp[23]);
9522:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[22]);
9523:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[21]);
9524:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[20]);
9525:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[19]);
9526:../src/wolfcrypt/src/sp_int.c ****         r->dp[42] = l;
9527:../src/wolfcrypt/src/sp_int.c ****         l = h;
9528:../src/wolfcrypt/src/sp_int.c ****         h = o;
9529:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9530:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[20], b->dp[23]);
9531:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[22]);
9532:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[21]);
9533:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[20]);
9534:../src/wolfcrypt/src/sp_int.c ****         r->dp[43] = l;
9535:../src/wolfcrypt/src/sp_int.c ****         l = h;
9536:../src/wolfcrypt/src/sp_int.c ****         h = o;
9537:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9538:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[21], b->dp[23]);
9539:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[22]);
9540:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[21]);
9541:../src/wolfcrypt/src/sp_int.c ****         r->dp[44] = l;
9542:../src/wolfcrypt/src/sp_int.c ****         l = h;
9543:../src/wolfcrypt/src/sp_int.c ****         h = o;
9544:../src/wolfcrypt/src/sp_int.c ****         o = 0;
9545:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[22], b->dp[23]);
9546:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(l, h, o, a->dp[23], b->dp[22]);
9547:../src/wolfcrypt/src/sp_int.c ****         r->dp[45] = l;
9548:../src/wolfcrypt/src/sp_int.c ****         l = h;
9549:../src/wolfcrypt/src/sp_int.c ****         h = o;
9550:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD_NO(l, h, a->dp[23], b->dp[23]);
9551:../src/wolfcrypt/src/sp_int.c ****         r->dp[46] = l;
9552:../src/wolfcrypt/src/sp_int.c ****         r->dp[47] = h;
9553:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(r->dp, t, 24 * sizeof(sp_int_digit));
9554:../src/wolfcrypt/src/sp_int.c ****         r->used = 48;
9555:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
9556:../src/wolfcrypt/src/sp_int.c ****     }
9557:../src/wolfcrypt/src/sp_int.c **** 
9558:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
9559:../src/wolfcrypt/src/sp_int.c ****     if (t != NULL) {
9560:../src/wolfcrypt/src/sp_int.c ****         XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
9561:../src/wolfcrypt/src/sp_int.c ****     }
9562:../src/wolfcrypt/src/sp_int.c **** #endif
9563:../src/wolfcrypt/src/sp_int.c ****     return err;
9564:../src/wolfcrypt/src/sp_int.c **** }
9565:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 48 */
9566:../src/wolfcrypt/src/sp_int.c **** 
9567:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 64
9568:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b and store in r: r = a * b
9569:../src/wolfcrypt/src/sp_int.c ****  *
9570:../src/wolfcrypt/src/sp_int.c ****  * Karatsuba implementaiton.
9571:../src/wolfcrypt/src/sp_int.c ****  *
9572:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
9573:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
9574:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
9575:../src/wolfcrypt/src/sp_int.c ****  *
9576:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
9577:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
9578:../src/wolfcrypt/src/sp_int.c ****  */
9579:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_32(sp_int* a, sp_int* b, sp_int* r)
9580:../src/wolfcrypt/src/sp_int.c **** {
9581:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
9582:../src/wolfcrypt/src/sp_int.c ****     int i;
9583:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l;
9584:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h;
9585:../src/wolfcrypt/src/sp_int.c ****     sp_int* a1;
9586:../src/wolfcrypt/src/sp_int.c ****     sp_int* b1;
9587:../src/wolfcrypt/src/sp_int.c ****     sp_int* z0;
9588:../src/wolfcrypt/src/sp_int.c ****     sp_int* z1;
9589:../src/wolfcrypt/src/sp_int.c ****     sp_int* z2;
9590:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit ca;
9591:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit cb;
9592:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, 16, 2);
9593:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(z, 33, 2);
9594:../src/wolfcrypt/src/sp_int.c **** 
9595:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, 16, 2, err, NULL);
9596:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(z, 33, 2, err, NULL);
9597:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
9598:../src/wolfcrypt/src/sp_int.c ****         a1 = t[0];
9599:../src/wolfcrypt/src/sp_int.c ****         b1 = t[1];
9600:../src/wolfcrypt/src/sp_int.c ****         z1 = z[0];
9601:../src/wolfcrypt/src/sp_int.c ****         z2 = z[1];
9602:../src/wolfcrypt/src/sp_int.c ****         z0 = r;
9603:../src/wolfcrypt/src/sp_int.c **** 
9604:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(a1->dp, &a->dp[16], sizeof(sp_int_digit) * 16);
9605:../src/wolfcrypt/src/sp_int.c ****         a1->used = 16;
9606:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(b1->dp, &b->dp[16], sizeof(sp_int_digit) * 16);
9607:../src/wolfcrypt/src/sp_int.c ****         b1->used = 16;
9608:../src/wolfcrypt/src/sp_int.c **** 
9609:../src/wolfcrypt/src/sp_int.c ****         /* z2 = a1 * b1 */
9610:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_16(a1, b1, z2);
9611:../src/wolfcrypt/src/sp_int.c ****     }
9612:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
9613:../src/wolfcrypt/src/sp_int.c ****         l = a1->dp[0];
9614:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9615:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, a->dp[0]);
9616:../src/wolfcrypt/src/sp_int.c ****         a1->dp[0] = l;
9617:../src/wolfcrypt/src/sp_int.c ****         l = h;
9618:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9619:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; i < 16; i++) {
9620:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[i]);
9621:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[i]);
9622:../src/wolfcrypt/src/sp_int.c ****             a1->dp[i] = l;
9623:../src/wolfcrypt/src/sp_int.c ****             l = h;
9624:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9625:../src/wolfcrypt/src/sp_int.c ****         }
9626:../src/wolfcrypt/src/sp_int.c ****         ca = l;
9627:../src/wolfcrypt/src/sp_int.c ****         /* b01 = b0 + b1 */
9628:../src/wolfcrypt/src/sp_int.c ****         l = b1->dp[0];
9629:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9630:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, b->dp[0]);
9631:../src/wolfcrypt/src/sp_int.c ****         b1->dp[0] = l;
9632:../src/wolfcrypt/src/sp_int.c ****         l = h;
9633:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9634:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; i < 16; i++) {
9635:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, b1->dp[i]);
9636:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, b->dp[i]);
9637:../src/wolfcrypt/src/sp_int.c ****             b1->dp[i] = l;
9638:../src/wolfcrypt/src/sp_int.c ****             l = h;
9639:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9640:../src/wolfcrypt/src/sp_int.c ****         }
9641:../src/wolfcrypt/src/sp_int.c ****         cb = l;
9642:../src/wolfcrypt/src/sp_int.c **** 
9643:../src/wolfcrypt/src/sp_int.c ****         /* z0 = a0 * b0 */
9644:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_16(a, b, z0);
9645:../src/wolfcrypt/src/sp_int.c ****     }
9646:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
9647:../src/wolfcrypt/src/sp_int.c ****         /* z1 = (a0 + a1) * (b0 + b1) */
9648:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_16(a1, b1, z1);
9649:../src/wolfcrypt/src/sp_int.c ****     }
9650:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
9651:../src/wolfcrypt/src/sp_int.c ****         /* r = (z2 << 32) + (z1 - z0 - z2) << 16) + z0 */
9652:../src/wolfcrypt/src/sp_int.c ****         /* r = z0 */
9653:../src/wolfcrypt/src/sp_int.c ****         /* r += (z1 - z0 - z2) << 16 */
9654:../src/wolfcrypt/src/sp_int.c ****         z1->dp[32] = ca & cb;
9655:../src/wolfcrypt/src/sp_int.c ****         l = 0;
9656:../src/wolfcrypt/src/sp_int.c ****         if (ca) {
9657:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9658:../src/wolfcrypt/src/sp_int.c ****             for (i = 0; i < 16; i++) {
9659:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, z1->dp[i + 16]);
9660:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, b1->dp[i]);
9661:../src/wolfcrypt/src/sp_int.c ****                 z1->dp[i + 16] = l;
9662:../src/wolfcrypt/src/sp_int.c ****                 l = h;
9663:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
9664:../src/wolfcrypt/src/sp_int.c ****             }
9665:../src/wolfcrypt/src/sp_int.c ****         }
9666:../src/wolfcrypt/src/sp_int.c ****         z1->dp[32] += l;
9667:../src/wolfcrypt/src/sp_int.c ****         l = 0;
9668:../src/wolfcrypt/src/sp_int.c ****         if (cb) {
9669:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9670:../src/wolfcrypt/src/sp_int.c ****             for (i = 0; i < 16; i++) {
9671:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, z1->dp[i + 16]);
9672:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, a1->dp[i]);
9673:../src/wolfcrypt/src/sp_int.c ****                 z1->dp[i + 16] = l;
9674:../src/wolfcrypt/src/sp_int.c ****                 l = h;
9675:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
9676:../src/wolfcrypt/src/sp_int.c ****             }
9677:../src/wolfcrypt/src/sp_int.c ****         }
9678:../src/wolfcrypt/src/sp_int.c ****         z1->dp[32] += l;
9679:../src/wolfcrypt/src/sp_int.c ****         /* z1 = z1 - z0 - z1 */
9680:../src/wolfcrypt/src/sp_int.c ****         l = 0;
9681:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9682:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 32; i++) {
9683:../src/wolfcrypt/src/sp_int.c ****             l += z1->dp[i];
9684:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z0->dp[i]);
9685:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z2->dp[i]);
9686:../src/wolfcrypt/src/sp_int.c ****             z1->dp[i] = l;
9687:../src/wolfcrypt/src/sp_int.c ****             l = h;
9688:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9689:../src/wolfcrypt/src/sp_int.c ****         }
9690:../src/wolfcrypt/src/sp_int.c ****         z1->dp[i] += l;
9691:../src/wolfcrypt/src/sp_int.c ****         /* r += z1 << 16 */
9692:../src/wolfcrypt/src/sp_int.c ****         l = 0;
9693:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9694:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 16; i++) {
9695:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 16]);
9696:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
9697:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 16] = l;
9698:../src/wolfcrypt/src/sp_int.c ****             l = h;
9699:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9700:../src/wolfcrypt/src/sp_int.c ****         }
9701:../src/wolfcrypt/src/sp_int.c ****         for (; i < 33; i++) {
9702:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
9703:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 16] = l;
9704:../src/wolfcrypt/src/sp_int.c ****             l = h;
9705:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9706:../src/wolfcrypt/src/sp_int.c ****         }
9707:../src/wolfcrypt/src/sp_int.c ****         /* r += z2 << 32  */
9708:../src/wolfcrypt/src/sp_int.c ****         l = 0;
9709:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9710:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 17; i++) {
9711:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 32]);
9712:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
9713:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 32] = l;
9714:../src/wolfcrypt/src/sp_int.c ****             l = h;
9715:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9716:../src/wolfcrypt/src/sp_int.c ****         }
9717:../src/wolfcrypt/src/sp_int.c ****         for (; i < 32; i++) {
9718:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
9719:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 32] = l;
9720:../src/wolfcrypt/src/sp_int.c ****             l = h;
9721:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9722:../src/wolfcrypt/src/sp_int.c ****         }
9723:../src/wolfcrypt/src/sp_int.c ****         r->used = 64;
9724:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
9725:../src/wolfcrypt/src/sp_int.c ****     }
9726:../src/wolfcrypt/src/sp_int.c **** 
9727:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(z, NULL);
9728:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
9729:../src/wolfcrypt/src/sp_int.c ****     return err;
9730:../src/wolfcrypt/src/sp_int.c **** }
9731:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 64 */
9732:../src/wolfcrypt/src/sp_int.c **** 
9733:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 96
9734:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b and store in r: r = a * b
9735:../src/wolfcrypt/src/sp_int.c ****  *
9736:../src/wolfcrypt/src/sp_int.c ****  * Karatsuba implementaiton.
9737:../src/wolfcrypt/src/sp_int.c ****  *
9738:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
9739:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
9740:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
9741:../src/wolfcrypt/src/sp_int.c ****  *
9742:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
9743:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
9744:../src/wolfcrypt/src/sp_int.c ****  */
9745:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_48(sp_int* a, sp_int* b, sp_int* r)
9746:../src/wolfcrypt/src/sp_int.c **** {
9747:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
9748:../src/wolfcrypt/src/sp_int.c ****     int i;
9749:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l;
9750:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h;
9751:../src/wolfcrypt/src/sp_int.c ****     sp_int* a1;
9752:../src/wolfcrypt/src/sp_int.c ****     sp_int* b1;
9753:../src/wolfcrypt/src/sp_int.c ****     sp_int* z0;
9754:../src/wolfcrypt/src/sp_int.c ****     sp_int* z1;
9755:../src/wolfcrypt/src/sp_int.c ****     sp_int* z2;
9756:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit ca;
9757:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit cb;
9758:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, 24, 2);
9759:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(z, 49, 2);
9760:../src/wolfcrypt/src/sp_int.c **** 
9761:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, 24, 2, err, NULL);
9762:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(z, 49, 2, err, NULL);
9763:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
9764:../src/wolfcrypt/src/sp_int.c ****         a1 = t[0];
9765:../src/wolfcrypt/src/sp_int.c ****         b1 = t[1];
9766:../src/wolfcrypt/src/sp_int.c ****         z1 = z[0];
9767:../src/wolfcrypt/src/sp_int.c ****         z2 = z[1];
9768:../src/wolfcrypt/src/sp_int.c ****         z0 = r;
9769:../src/wolfcrypt/src/sp_int.c **** 
9770:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(a1->dp, &a->dp[24], sizeof(sp_int_digit) * 24);
9771:../src/wolfcrypt/src/sp_int.c ****         a1->used = 24;
9772:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(b1->dp, &b->dp[24], sizeof(sp_int_digit) * 24);
9773:../src/wolfcrypt/src/sp_int.c ****         b1->used = 24;
9774:../src/wolfcrypt/src/sp_int.c **** 
9775:../src/wolfcrypt/src/sp_int.c ****         /* z2 = a1 * b1 */
9776:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_24(a1, b1, z2);
9777:../src/wolfcrypt/src/sp_int.c ****     }
9778:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
9779:../src/wolfcrypt/src/sp_int.c ****         l = a1->dp[0];
9780:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9781:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, a->dp[0]);
9782:../src/wolfcrypt/src/sp_int.c ****         a1->dp[0] = l;
9783:../src/wolfcrypt/src/sp_int.c ****         l = h;
9784:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9785:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; i < 24; i++) {
9786:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[i]);
9787:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[i]);
9788:../src/wolfcrypt/src/sp_int.c ****             a1->dp[i] = l;
9789:../src/wolfcrypt/src/sp_int.c ****             l = h;
9790:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9791:../src/wolfcrypt/src/sp_int.c ****         }
9792:../src/wolfcrypt/src/sp_int.c ****         ca = l;
9793:../src/wolfcrypt/src/sp_int.c ****         /* b01 = b0 + b1 */
9794:../src/wolfcrypt/src/sp_int.c ****         l = b1->dp[0];
9795:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9796:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, b->dp[0]);
9797:../src/wolfcrypt/src/sp_int.c ****         b1->dp[0] = l;
9798:../src/wolfcrypt/src/sp_int.c ****         l = h;
9799:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9800:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; i < 24; i++) {
9801:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, b1->dp[i]);
9802:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, b->dp[i]);
9803:../src/wolfcrypt/src/sp_int.c ****             b1->dp[i] = l;
9804:../src/wolfcrypt/src/sp_int.c ****             l = h;
9805:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9806:../src/wolfcrypt/src/sp_int.c ****         }
9807:../src/wolfcrypt/src/sp_int.c ****         cb = l;
9808:../src/wolfcrypt/src/sp_int.c **** 
9809:../src/wolfcrypt/src/sp_int.c ****         /* z0 = a0 * b0 */
9810:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_24(a, b, z0);
9811:../src/wolfcrypt/src/sp_int.c ****     }
9812:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
9813:../src/wolfcrypt/src/sp_int.c ****         /* z1 = (a0 + a1) * (b0 + b1) */
9814:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_24(a1, b1, z1);
9815:../src/wolfcrypt/src/sp_int.c ****     }
9816:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
9817:../src/wolfcrypt/src/sp_int.c ****         /* r = (z2 << 48) + (z1 - z0 - z2) << 24) + z0 */
9818:../src/wolfcrypt/src/sp_int.c ****         /* r = z0 */
9819:../src/wolfcrypt/src/sp_int.c ****         /* r += (z1 - z0 - z2) << 24 */
9820:../src/wolfcrypt/src/sp_int.c ****         z1->dp[48] = ca & cb;
9821:../src/wolfcrypt/src/sp_int.c ****         l = 0;
9822:../src/wolfcrypt/src/sp_int.c ****         if (ca) {
9823:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9824:../src/wolfcrypt/src/sp_int.c ****             for (i = 0; i < 24; i++) {
9825:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, z1->dp[i + 24]);
9826:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, b1->dp[i]);
9827:../src/wolfcrypt/src/sp_int.c ****                 z1->dp[i + 24] = l;
9828:../src/wolfcrypt/src/sp_int.c ****                 l = h;
9829:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
9830:../src/wolfcrypt/src/sp_int.c ****             }
9831:../src/wolfcrypt/src/sp_int.c ****         }
9832:../src/wolfcrypt/src/sp_int.c ****         z1->dp[48] += l;
9833:../src/wolfcrypt/src/sp_int.c ****         l = 0;
9834:../src/wolfcrypt/src/sp_int.c ****         if (cb) {
9835:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9836:../src/wolfcrypt/src/sp_int.c ****             for (i = 0; i < 24; i++) {
9837:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, z1->dp[i + 24]);
9838:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, a1->dp[i]);
9839:../src/wolfcrypt/src/sp_int.c ****                 z1->dp[i + 24] = l;
9840:../src/wolfcrypt/src/sp_int.c ****                 l = h;
9841:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
9842:../src/wolfcrypt/src/sp_int.c ****             }
9843:../src/wolfcrypt/src/sp_int.c ****         }
9844:../src/wolfcrypt/src/sp_int.c ****         z1->dp[48] += l;
9845:../src/wolfcrypt/src/sp_int.c ****         /* z1 = z1 - z0 - z1 */
9846:../src/wolfcrypt/src/sp_int.c ****         l = 0;
9847:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9848:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 48; i++) {
9849:../src/wolfcrypt/src/sp_int.c ****             l += z1->dp[i];
9850:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z0->dp[i]);
9851:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z2->dp[i]);
9852:../src/wolfcrypt/src/sp_int.c ****             z1->dp[i] = l;
9853:../src/wolfcrypt/src/sp_int.c ****             l = h;
9854:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9855:../src/wolfcrypt/src/sp_int.c ****         }
9856:../src/wolfcrypt/src/sp_int.c ****         z1->dp[i] += l;
9857:../src/wolfcrypt/src/sp_int.c ****         /* r += z1 << 16 */
9858:../src/wolfcrypt/src/sp_int.c ****         l = 0;
9859:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9860:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 24; i++) {
9861:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 24]);
9862:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
9863:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 24] = l;
9864:../src/wolfcrypt/src/sp_int.c ****             l = h;
9865:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9866:../src/wolfcrypt/src/sp_int.c ****         }
9867:../src/wolfcrypt/src/sp_int.c ****         for (; i < 49; i++) {
9868:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
9869:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 24] = l;
9870:../src/wolfcrypt/src/sp_int.c ****             l = h;
9871:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9872:../src/wolfcrypt/src/sp_int.c ****         }
9873:../src/wolfcrypt/src/sp_int.c ****         /* r += z2 << 48  */
9874:../src/wolfcrypt/src/sp_int.c ****         l = 0;
9875:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9876:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 25; i++) {
9877:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 48]);
9878:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
9879:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 48] = l;
9880:../src/wolfcrypt/src/sp_int.c ****             l = h;
9881:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9882:../src/wolfcrypt/src/sp_int.c ****         }
9883:../src/wolfcrypt/src/sp_int.c ****         for (; i < 48; i++) {
9884:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
9885:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 48] = l;
9886:../src/wolfcrypt/src/sp_int.c ****             l = h;
9887:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9888:../src/wolfcrypt/src/sp_int.c ****         }
9889:../src/wolfcrypt/src/sp_int.c ****         r->used = 96;
9890:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
9891:../src/wolfcrypt/src/sp_int.c ****     }
9892:../src/wolfcrypt/src/sp_int.c **** 
9893:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(z, NULL);
9894:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
9895:../src/wolfcrypt/src/sp_int.c ****     return err;
9896:../src/wolfcrypt/src/sp_int.c **** }
9897:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 96 */
9898:../src/wolfcrypt/src/sp_int.c **** 
9899:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 128
9900:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b and store in r: r = a * b
9901:../src/wolfcrypt/src/sp_int.c ****  *
9902:../src/wolfcrypt/src/sp_int.c ****  * Karatsuba implementaiton.
9903:../src/wolfcrypt/src/sp_int.c ****  *
9904:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
9905:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
9906:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
9907:../src/wolfcrypt/src/sp_int.c ****  *
9908:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
9909:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
9910:../src/wolfcrypt/src/sp_int.c ****  */
9911:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_64(sp_int* a, sp_int* b, sp_int* r)
9912:../src/wolfcrypt/src/sp_int.c **** {
9913:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
9914:../src/wolfcrypt/src/sp_int.c ****     int i;
9915:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l;
9916:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h;
9917:../src/wolfcrypt/src/sp_int.c ****     sp_int* a1;
9918:../src/wolfcrypt/src/sp_int.c ****     sp_int* b1;
9919:../src/wolfcrypt/src/sp_int.c ****     sp_int* z0;
9920:../src/wolfcrypt/src/sp_int.c ****     sp_int* z1;
9921:../src/wolfcrypt/src/sp_int.c ****     sp_int* z2;
9922:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit ca;
9923:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit cb;
9924:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, 32, 2);
9925:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(z, 65, 2);
9926:../src/wolfcrypt/src/sp_int.c **** 
9927:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, 32, 2, err, NULL);
9928:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(z, 65, 2, err, NULL);
9929:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
9930:../src/wolfcrypt/src/sp_int.c ****         a1 = t[0];
9931:../src/wolfcrypt/src/sp_int.c ****         b1 = t[1];
9932:../src/wolfcrypt/src/sp_int.c ****         z1 = z[0];
9933:../src/wolfcrypt/src/sp_int.c ****         z2 = z[1];
9934:../src/wolfcrypt/src/sp_int.c ****         z0 = r;
9935:../src/wolfcrypt/src/sp_int.c **** 
9936:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(a1->dp, &a->dp[32], sizeof(sp_int_digit) * 32);
9937:../src/wolfcrypt/src/sp_int.c ****         a1->used = 32;
9938:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(b1->dp, &b->dp[32], sizeof(sp_int_digit) * 32);
9939:../src/wolfcrypt/src/sp_int.c ****         b1->used = 32;
9940:../src/wolfcrypt/src/sp_int.c **** 
9941:../src/wolfcrypt/src/sp_int.c ****         /* z2 = a1 * b1 */
9942:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_32(a1, b1, z2);
9943:../src/wolfcrypt/src/sp_int.c ****     }
9944:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
9945:../src/wolfcrypt/src/sp_int.c ****         l = a1->dp[0];
9946:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9947:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, a->dp[0]);
9948:../src/wolfcrypt/src/sp_int.c ****         a1->dp[0] = l;
9949:../src/wolfcrypt/src/sp_int.c ****         l = h;
9950:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9951:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; i < 32; i++) {
9952:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[i]);
9953:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[i]);
9954:../src/wolfcrypt/src/sp_int.c ****             a1->dp[i] = l;
9955:../src/wolfcrypt/src/sp_int.c ****             l = h;
9956:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9957:../src/wolfcrypt/src/sp_int.c ****         }
9958:../src/wolfcrypt/src/sp_int.c ****         ca = l;
9959:../src/wolfcrypt/src/sp_int.c ****         /* b01 = b0 + b1 */
9960:../src/wolfcrypt/src/sp_int.c ****         l = b1->dp[0];
9961:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9962:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, b->dp[0]);
9963:../src/wolfcrypt/src/sp_int.c ****         b1->dp[0] = l;
9964:../src/wolfcrypt/src/sp_int.c ****         l = h;
9965:../src/wolfcrypt/src/sp_int.c ****         h = 0;
9966:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; i < 32; i++) {
9967:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, b1->dp[i]);
9968:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, b->dp[i]);
9969:../src/wolfcrypt/src/sp_int.c ****             b1->dp[i] = l;
9970:../src/wolfcrypt/src/sp_int.c ****             l = h;
9971:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9972:../src/wolfcrypt/src/sp_int.c ****         }
9973:../src/wolfcrypt/src/sp_int.c ****         cb = l;
9974:../src/wolfcrypt/src/sp_int.c **** 
9975:../src/wolfcrypt/src/sp_int.c ****         /* z0 = a0 * b0 */
9976:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_32(a, b, z0);
9977:../src/wolfcrypt/src/sp_int.c ****     }
9978:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
9979:../src/wolfcrypt/src/sp_int.c ****         /* z1 = (a0 + a1) * (b0 + b1) */
9980:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_32(a1, b1, z1);
9981:../src/wolfcrypt/src/sp_int.c ****     }
9982:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
9983:../src/wolfcrypt/src/sp_int.c ****         /* r = (z2 << 64) + (z1 - z0 - z2) << 32) + z0 */
9984:../src/wolfcrypt/src/sp_int.c ****         /* r = z0 */
9985:../src/wolfcrypt/src/sp_int.c ****         /* r += (z1 - z0 - z2) << 32 */
9986:../src/wolfcrypt/src/sp_int.c ****         z1->dp[64] = ca & cb;
9987:../src/wolfcrypt/src/sp_int.c ****         l = 0;
9988:../src/wolfcrypt/src/sp_int.c ****         if (ca) {
9989:../src/wolfcrypt/src/sp_int.c ****             h = 0;
9990:../src/wolfcrypt/src/sp_int.c ****             for (i = 0; i < 32; i++) {
9991:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, z1->dp[i + 32]);
9992:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, b1->dp[i]);
9993:../src/wolfcrypt/src/sp_int.c ****                 z1->dp[i + 32] = l;
9994:../src/wolfcrypt/src/sp_int.c ****                 l = h;
9995:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
9996:../src/wolfcrypt/src/sp_int.c ****             }
9997:../src/wolfcrypt/src/sp_int.c ****         }
9998:../src/wolfcrypt/src/sp_int.c ****         z1->dp[64] += l;
9999:../src/wolfcrypt/src/sp_int.c ****         l = 0;
10000:../src/wolfcrypt/src/sp_int.c ****         if (cb) {
10001:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10002:../src/wolfcrypt/src/sp_int.c ****             for (i = 0; i < 32; i++) {
10003:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, z1->dp[i + 32]);
10004:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, a1->dp[i]);
10005:../src/wolfcrypt/src/sp_int.c ****                 z1->dp[i + 32] = l;
10006:../src/wolfcrypt/src/sp_int.c ****                 l = h;
10007:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
10008:../src/wolfcrypt/src/sp_int.c ****             }
10009:../src/wolfcrypt/src/sp_int.c ****         }
10010:../src/wolfcrypt/src/sp_int.c ****         z1->dp[64] += l;
10011:../src/wolfcrypt/src/sp_int.c ****         /* z1 = z1 - z0 - z1 */
10012:../src/wolfcrypt/src/sp_int.c ****         l = 0;
10013:../src/wolfcrypt/src/sp_int.c ****         h = 0;
10014:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 64; i++) {
10015:../src/wolfcrypt/src/sp_int.c ****             l += z1->dp[i];
10016:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z0->dp[i]);
10017:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z2->dp[i]);
10018:../src/wolfcrypt/src/sp_int.c ****             z1->dp[i] = l;
10019:../src/wolfcrypt/src/sp_int.c ****             l = h;
10020:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10021:../src/wolfcrypt/src/sp_int.c ****         }
10022:../src/wolfcrypt/src/sp_int.c ****         z1->dp[i] += l;
10023:../src/wolfcrypt/src/sp_int.c ****         /* r += z1 << 16 */
10024:../src/wolfcrypt/src/sp_int.c ****         l = 0;
10025:../src/wolfcrypt/src/sp_int.c ****         h = 0;
10026:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 32; i++) {
10027:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 32]);
10028:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
10029:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 32] = l;
10030:../src/wolfcrypt/src/sp_int.c ****             l = h;
10031:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10032:../src/wolfcrypt/src/sp_int.c ****         }
10033:../src/wolfcrypt/src/sp_int.c ****         for (; i < 65; i++) {
10034:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
10035:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 32] = l;
10036:../src/wolfcrypt/src/sp_int.c ****             l = h;
10037:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10038:../src/wolfcrypt/src/sp_int.c ****         }
10039:../src/wolfcrypt/src/sp_int.c ****         /* r += z2 << 64  */
10040:../src/wolfcrypt/src/sp_int.c ****         l = 0;
10041:../src/wolfcrypt/src/sp_int.c ****         h = 0;
10042:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 33; i++) {
10043:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 64]);
10044:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
10045:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 64] = l;
10046:../src/wolfcrypt/src/sp_int.c ****             l = h;
10047:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10048:../src/wolfcrypt/src/sp_int.c ****         }
10049:../src/wolfcrypt/src/sp_int.c ****         for (; i < 64; i++) {
10050:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
10051:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 64] = l;
10052:../src/wolfcrypt/src/sp_int.c ****             l = h;
10053:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10054:../src/wolfcrypt/src/sp_int.c ****         }
10055:../src/wolfcrypt/src/sp_int.c ****         r->used = 128;
10056:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
10057:../src/wolfcrypt/src/sp_int.c ****     }
10058:../src/wolfcrypt/src/sp_int.c **** 
10059:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(z, NULL);
10060:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
10061:../src/wolfcrypt/src/sp_int.c ****     return err;
10062:../src/wolfcrypt/src/sp_int.c **** }
10063:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 128 */
10064:../src/wolfcrypt/src/sp_int.c **** 
10065:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 192
10066:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b and store in r: r = a * b
10067:../src/wolfcrypt/src/sp_int.c ****  *
10068:../src/wolfcrypt/src/sp_int.c ****  * Karatsuba implementaiton.
10069:../src/wolfcrypt/src/sp_int.c ****  *
10070:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
10071:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
10072:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
10073:../src/wolfcrypt/src/sp_int.c ****  *
10074:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
10075:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
10076:../src/wolfcrypt/src/sp_int.c ****  */
10077:../src/wolfcrypt/src/sp_int.c **** static int _sp_mul_96(sp_int* a, sp_int* b, sp_int* r)
10078:../src/wolfcrypt/src/sp_int.c **** {
10079:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
10080:../src/wolfcrypt/src/sp_int.c ****     int i;
10081:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l;
10082:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h;
10083:../src/wolfcrypt/src/sp_int.c ****     sp_int* a1;
10084:../src/wolfcrypt/src/sp_int.c ****     sp_int* b1;
10085:../src/wolfcrypt/src/sp_int.c ****     sp_int* z0;
10086:../src/wolfcrypt/src/sp_int.c ****     sp_int* z1;
10087:../src/wolfcrypt/src/sp_int.c ****     sp_int* z2;
10088:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit ca;
10089:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit cb;
10090:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, 48, 2);
10091:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(z, 97, 2);
10092:../src/wolfcrypt/src/sp_int.c **** 
10093:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, 48, 2, err, NULL);
10094:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(z, 97, 2, err, NULL);
10095:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
10096:../src/wolfcrypt/src/sp_int.c ****         a1 = t[0];
10097:../src/wolfcrypt/src/sp_int.c ****         b1 = t[1];
10098:../src/wolfcrypt/src/sp_int.c ****         z1 = z[0];
10099:../src/wolfcrypt/src/sp_int.c ****         z2 = z[1];
10100:../src/wolfcrypt/src/sp_int.c ****         z0 = r;
10101:../src/wolfcrypt/src/sp_int.c **** 
10102:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(a1->dp, &a->dp[48], sizeof(sp_int_digit) * 48);
10103:../src/wolfcrypt/src/sp_int.c ****         a1->used = 48;
10104:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(b1->dp, &b->dp[48], sizeof(sp_int_digit) * 48);
10105:../src/wolfcrypt/src/sp_int.c ****         b1->used = 48;
10106:../src/wolfcrypt/src/sp_int.c **** 
10107:../src/wolfcrypt/src/sp_int.c ****         /* z2 = a1 * b1 */
10108:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_48(a1, b1, z2);
10109:../src/wolfcrypt/src/sp_int.c ****     }
10110:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
10111:../src/wolfcrypt/src/sp_int.c ****         l = a1->dp[0];
10112:../src/wolfcrypt/src/sp_int.c ****         h = 0;
10113:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, a->dp[0]);
10114:../src/wolfcrypt/src/sp_int.c ****         a1->dp[0] = l;
10115:../src/wolfcrypt/src/sp_int.c ****         l = h;
10116:../src/wolfcrypt/src/sp_int.c ****         h = 0;
10117:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; i < 48; i++) {
10118:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[i]);
10119:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[i]);
10120:../src/wolfcrypt/src/sp_int.c ****             a1->dp[i] = l;
10121:../src/wolfcrypt/src/sp_int.c ****             l = h;
10122:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10123:../src/wolfcrypt/src/sp_int.c ****         }
10124:../src/wolfcrypt/src/sp_int.c ****         ca = l;
10125:../src/wolfcrypt/src/sp_int.c ****         /* b01 = b0 + b1 */
10126:../src/wolfcrypt/src/sp_int.c ****         l = b1->dp[0];
10127:../src/wolfcrypt/src/sp_int.c ****         h = 0;
10128:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, b->dp[0]);
10129:../src/wolfcrypt/src/sp_int.c ****         b1->dp[0] = l;
10130:../src/wolfcrypt/src/sp_int.c ****         l = h;
10131:../src/wolfcrypt/src/sp_int.c ****         h = 0;
10132:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; i < 48; i++) {
10133:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, b1->dp[i]);
10134:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, b->dp[i]);
10135:../src/wolfcrypt/src/sp_int.c ****             b1->dp[i] = l;
10136:../src/wolfcrypt/src/sp_int.c ****             l = h;
10137:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10138:../src/wolfcrypt/src/sp_int.c ****         }
10139:../src/wolfcrypt/src/sp_int.c ****         cb = l;
10140:../src/wolfcrypt/src/sp_int.c **** 
10141:../src/wolfcrypt/src/sp_int.c ****         /* z0 = a0 * b0 */
10142:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_48(a, b, z0);
10143:../src/wolfcrypt/src/sp_int.c ****     }
10144:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
10145:../src/wolfcrypt/src/sp_int.c ****         /* z1 = (a0 + a1) * (b0 + b1) */
10146:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_48(a1, b1, z1);
10147:../src/wolfcrypt/src/sp_int.c ****     }
10148:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
10149:../src/wolfcrypt/src/sp_int.c ****         /* r = (z2 << 96) + (z1 - z0 - z2) << 48) + z0 */
10150:../src/wolfcrypt/src/sp_int.c ****         /* r = z0 */
10151:../src/wolfcrypt/src/sp_int.c ****         /* r += (z1 - z0 - z2) << 48 */
10152:../src/wolfcrypt/src/sp_int.c ****         z1->dp[96] = ca & cb;
10153:../src/wolfcrypt/src/sp_int.c ****         l = 0;
10154:../src/wolfcrypt/src/sp_int.c ****         if (ca) {
10155:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10156:../src/wolfcrypt/src/sp_int.c ****             for (i = 0; i < 48; i++) {
10157:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, z1->dp[i + 48]);
10158:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, b1->dp[i]);
10159:../src/wolfcrypt/src/sp_int.c ****                 z1->dp[i + 48] = l;
10160:../src/wolfcrypt/src/sp_int.c ****                 l = h;
10161:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
10162:../src/wolfcrypt/src/sp_int.c ****             }
10163:../src/wolfcrypt/src/sp_int.c ****         }
10164:../src/wolfcrypt/src/sp_int.c ****         z1->dp[96] += l;
10165:../src/wolfcrypt/src/sp_int.c ****         l = 0;
10166:../src/wolfcrypt/src/sp_int.c ****         if (cb) {
10167:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10168:../src/wolfcrypt/src/sp_int.c ****             for (i = 0; i < 48; i++) {
10169:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, z1->dp[i + 48]);
10170:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, a1->dp[i]);
10171:../src/wolfcrypt/src/sp_int.c ****                 z1->dp[i + 48] = l;
10172:../src/wolfcrypt/src/sp_int.c ****                 l = h;
10173:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
10174:../src/wolfcrypt/src/sp_int.c ****             }
10175:../src/wolfcrypt/src/sp_int.c ****         }
10176:../src/wolfcrypt/src/sp_int.c ****         z1->dp[96] += l;
10177:../src/wolfcrypt/src/sp_int.c ****         /* z1 = z1 - z0 - z1 */
10178:../src/wolfcrypt/src/sp_int.c ****         l = 0;
10179:../src/wolfcrypt/src/sp_int.c ****         h = 0;
10180:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 96; i++) {
10181:../src/wolfcrypt/src/sp_int.c ****             l += z1->dp[i];
10182:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z0->dp[i]);
10183:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z2->dp[i]);
10184:../src/wolfcrypt/src/sp_int.c ****             z1->dp[i] = l;
10185:../src/wolfcrypt/src/sp_int.c ****             l = h;
10186:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10187:../src/wolfcrypt/src/sp_int.c ****         }
10188:../src/wolfcrypt/src/sp_int.c ****         z1->dp[i] += l;
10189:../src/wolfcrypt/src/sp_int.c ****         /* r += z1 << 16 */
10190:../src/wolfcrypt/src/sp_int.c ****         l = 0;
10191:../src/wolfcrypt/src/sp_int.c ****         h = 0;
10192:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 48; i++) {
10193:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 48]);
10194:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
10195:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 48] = l;
10196:../src/wolfcrypt/src/sp_int.c ****             l = h;
10197:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10198:../src/wolfcrypt/src/sp_int.c ****         }
10199:../src/wolfcrypt/src/sp_int.c ****         for (; i < 97; i++) {
10200:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
10201:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 48] = l;
10202:../src/wolfcrypt/src/sp_int.c ****             l = h;
10203:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10204:../src/wolfcrypt/src/sp_int.c ****         }
10205:../src/wolfcrypt/src/sp_int.c ****         /* r += z2 << 96  */
10206:../src/wolfcrypt/src/sp_int.c ****         l = 0;
10207:../src/wolfcrypt/src/sp_int.c ****         h = 0;
10208:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 49; i++) {
10209:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 96]);
10210:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
10211:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 96] = l;
10212:../src/wolfcrypt/src/sp_int.c ****             l = h;
10213:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10214:../src/wolfcrypt/src/sp_int.c ****         }
10215:../src/wolfcrypt/src/sp_int.c ****         for (; i < 96; i++) {
10216:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
10217:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 96] = l;
10218:../src/wolfcrypt/src/sp_int.c ****             l = h;
10219:../src/wolfcrypt/src/sp_int.c ****             h = 0;
10220:../src/wolfcrypt/src/sp_int.c ****         }
10221:../src/wolfcrypt/src/sp_int.c ****         r->used = 192;
10222:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
10223:../src/wolfcrypt/src/sp_int.c ****     }
10224:../src/wolfcrypt/src/sp_int.c **** 
10225:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(z, NULL);
10226:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
10227:../src/wolfcrypt/src/sp_int.c ****     return err;
10228:../src/wolfcrypt/src/sp_int.c **** }
10229:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 192 */
10230:../src/wolfcrypt/src/sp_int.c **** 
10231:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM && WOLFSSL_SP_INT_LARGE_COMBA */
10232:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_SP_SMALL */
10233:../src/wolfcrypt/src/sp_int.c **** 
10234:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b and store in r: r = a * b
10235:../src/wolfcrypt/src/sp_int.c ****  *
10236:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
10237:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
10238:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
10239:../src/wolfcrypt/src/sp_int.c ****  *
10240:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
10241:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, b or is NULL; or the result will be too big for fixed
10242:../src/wolfcrypt/src/sp_int.c ****  *          data length.
10243:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
10244:../src/wolfcrypt/src/sp_int.c ****  */
10245:../src/wolfcrypt/src/sp_int.c **** int sp_mul(sp_int* a, sp_int* b, sp_int* r)
10246:../src/wolfcrypt/src/sp_int.c **** {
 7986                             		.loc 2 10246 1
 7987 0000 7E AA                   		push.l	r10
 7988                             	.LCFI118:
 7989 0002 71 0A F0                		add	#-16, r0, r10
 7990                             	.LCFI119:
 7991 0005 EF A0                   		mov.L	r10, r0
 7992 0007 E7 A1 01                		mov.L	r1, 4[r10]
 7993 000a E7 A2 02                		mov.L	r2, 8[r10]
 7994 000d E7 A3 03                		mov.L	r3, 12[r10]
10247:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 7995                             		.loc 2 10247 9
 7996 0010 F8 A6 00                		mov.L	#0, [r10]
10248:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
10249:../src/wolfcrypt/src/sp_int.c ****     int sign = MP_ZPOS;
10250:../src/wolfcrypt/src/sp_int.c **** #endif
10251:../src/wolfcrypt/src/sp_int.c **** 
10252:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (b == NULL) || (r == NULL)) {
 7997                             		.loc 2 10252 8
 7998 0013 ED A5 01                		mov.L	4[r10], r5
 7999 0016 61 05                   		cmp	#0, r5
 8000 0018 20 0E                   		beq	.L534
 8001                             		.loc 2 10252 21 discriminator 1
 8002 001a ED A5 02                		mov.L	8[r10], r5
 8003 001d 61 05                   		cmp	#0, r5
 8004 001f 17                      		beq	.L534
 8005                             		.loc 2 10252 36 discriminator 2
 8006 0020 ED A5 03                		mov.L	12[r10], r5
 8007 0023 61 05                   		cmp	#0, r5
 8008 0025 1C                      		bne	.L535
 8009                             	.L534:
10253:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 8010                             		.loc 2 10253 13
 8011 0026 F8 A6 FD                		mov.L	#-3, [r10]
 8012                             	.L535:
10254:../src/wolfcrypt/src/sp_int.c ****     }
10255:../src/wolfcrypt/src/sp_int.c **** 
10256:../src/wolfcrypt/src/sp_int.c ****     /* Need extra digit during calculation. */
10257:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (a->used + b->used > r->size)) {
 8013                             		.loc 2 10257 8
 8014 0029 EC A5                   		mov.L	[r10], r5
 8015 002b 61 05                   		cmp	#0, r5
 8016 002d 21 1A                   		bne	.L536
 8017                             		.loc 2 10257 31 discriminator 1
 8018 002f ED A5 01                		mov.L	4[r10], r5
 8019 0032 EC 54                   		mov.L	[r5], r4
 8020                             		.loc 2 10257 41 discriminator 1
 8021 0034 ED A5 02                		mov.L	8[r10], r5
 8022 0037 EC 55                   		mov.L	[r5], r5
 8023                             		.loc 2 10257 38 discriminator 1
 8024 0039 4B 45                   		add	r4, r5
 8025                             		.loc 2 10257 51 discriminator 1
 8026 003b ED A4 03                		mov.L	12[r10], r4
 8027 003e A8 4C                   		mov.L	4[r4], r4
 8028                             		.loc 2 10257 26 discriminator 1
 8029 0040 47 45                   		cmp	r4, r5
 8030 0042 2B 05                   		ble	.L536
10258:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 8031                             		.loc 2 10258 13
 8032 0044 F8 A6 FD                		mov.L	#-3, [r10]
 8033                             	.L536:
10259:../src/wolfcrypt/src/sp_int.c ****     }
10260:../src/wolfcrypt/src/sp_int.c **** 
10261:../src/wolfcrypt/src/sp_int.c **** #if 0
10262:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
10263:../src/wolfcrypt/src/sp_int.c ****         sp_print(a, "a");
10264:../src/wolfcrypt/src/sp_int.c ****         sp_print(b, "b");
10265:../src/wolfcrypt/src/sp_int.c ****     }
10266:../src/wolfcrypt/src/sp_int.c **** #endif
10267:../src/wolfcrypt/src/sp_int.c **** 
10268:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 8034                             		.loc 2 10268 8
 8035 0047 EC A5                   		mov.L	[r10], r5
 8036 0049 61 05                   		cmp	#0, r5
 8037 004b 21 2A                   		bne	.L537
10269:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
10270:../src/wolfcrypt/src/sp_int.c ****         sign = a->sign ^ b->sign;
10271:../src/wolfcrypt/src/sp_int.c ****     #endif
10272:../src/wolfcrypt/src/sp_int.c **** 
10273:../src/wolfcrypt/src/sp_int.c ****         if ((a->used == 0) || (b->used == 0)) {
 8038                             		.loc 2 10273 15
 8039 004d ED A5 01                		mov.L	4[r10], r5
 8040 0050 EC 55                   		mov.L	[r5], r5
 8041                             		.loc 2 10273 12
 8042 0052 61 05                   		cmp	#0, r5
 8043 0054 11                      		beq	.L538
 8044                             		.loc 2 10273 33 discriminator 1
 8045 0055 ED A5 02                		mov.L	8[r10], r5
 8046 0058 EC 55                   		mov.L	[r5], r5
 8047                             		.loc 2 10273 28 discriminator 1
 8048 005a 61 05                   		cmp	#0, r5
 8049 005c 1A                      		bne	.L539
 8050                             	.L538:
10274:../src/wolfcrypt/src/sp_int.c ****             _sp_zero(r);
 8051                             		.loc 2 10274 13
 8052 005d ED A1 03                		mov.L	12[r10], r1
 8053 0060 05 00 00 00             		bsr	__sp_zero
 8054 0064 2E 11                   		bra	.L537
 8055                             	.L539:
10275:../src/wolfcrypt/src/sp_int.c ****         }
10276:../src/wolfcrypt/src/sp_int.c ****         else
10277:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_SMALL
10278:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_HAVE_SP_ECC) && defined(HAVE_ECC)
10279:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 64
10280:../src/wolfcrypt/src/sp_int.c ****         if ((a->used == 4) && (b->used == 4)) {
10281:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mul_4(a, b, r);
10282:../src/wolfcrypt/src/sp_int.c ****         }
10283:../src/wolfcrypt/src/sp_int.c ****         else
10284:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 64 */
10285:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 64
10286:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
10287:../src/wolfcrypt/src/sp_int.c ****         if ((a->used == 6) && (b->used == 6)) {
10288:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mul_6(a, b, r);
10289:../src/wolfcrypt/src/sp_int.c ****         }
10290:../src/wolfcrypt/src/sp_int.c ****         else
10291:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
10292:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 64 */
10293:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 32
10294:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
10295:../src/wolfcrypt/src/sp_int.c ****         if ((a->used == 8) && (b->used == 8)) {
10296:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mul_8(a, b, r);
10297:../src/wolfcrypt/src/sp_int.c ****         }
10298:../src/wolfcrypt/src/sp_int.c ****         else
10299:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
10300:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 32 */
10301:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 32
10302:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
10303:../src/wolfcrypt/src/sp_int.c ****         if ((a->used == 12) && (b->used == 12)) {
10304:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mul_12(a, b, r);
10305:../src/wolfcrypt/src/sp_int.c ****         }
10306:../src/wolfcrypt/src/sp_int.c ****         else
10307:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
10308:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 32 */
10309:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_HAVE_SP_ECC && HAVE_ECC */
10310:../src/wolfcrypt/src/sp_int.c **** #if defined(SQR_MUL_ASM) && defined(WOLFSSL_SP_INT_LARGE_COMBA)
10311:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 32
10312:../src/wolfcrypt/src/sp_int.c ****         if ((a->used == 16) && (b->used == 16)) {
10313:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mul_16(a, b, r);
10314:../src/wolfcrypt/src/sp_int.c ****         }
10315:../src/wolfcrypt/src/sp_int.c ****         else
10316:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 32 */
10317:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 48
10318:../src/wolfcrypt/src/sp_int.c ****         if ((a->used == 24) && (b->used == 24)) {
10319:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mul_24(a, b, r);
10320:../src/wolfcrypt/src/sp_int.c ****         }
10321:../src/wolfcrypt/src/sp_int.c ****         else
10322:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 48 */
10323:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 64
10324:../src/wolfcrypt/src/sp_int.c ****         if ((a->used == 32) && (b->used == 32)) {
10325:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mul_32(a, b, r);
10326:../src/wolfcrypt/src/sp_int.c ****         }
10327:../src/wolfcrypt/src/sp_int.c ****         else
10328:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 64 */
10329:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 96
10330:../src/wolfcrypt/src/sp_int.c ****         if ((a->used == 48) && (b->used == 48)) {
10331:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mul_48(a, b, r);
10332:../src/wolfcrypt/src/sp_int.c ****         }
10333:../src/wolfcrypt/src/sp_int.c ****         else
10334:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 96 */
10335:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 128
10336:../src/wolfcrypt/src/sp_int.c ****         if ((a->used == 64) && (b->used == 64)) {
10337:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mul_64(a, b, r);
10338:../src/wolfcrypt/src/sp_int.c ****         }
10339:../src/wolfcrypt/src/sp_int.c ****         else
10340:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 128 */
10341:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 192
10342:../src/wolfcrypt/src/sp_int.c ****         if ((a->used == 96) && (b->used == 96)) {
10343:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mul_96(a, b, r);
10344:../src/wolfcrypt/src/sp_int.c ****         }
10345:../src/wolfcrypt/src/sp_int.c ****         else
10346:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 192 */
10347:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM && WOLFSSL_SP_INT_LARGE_COMBA */
10348:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_SP_SMALL */
10349:../src/wolfcrypt/src/sp_int.c **** 
10350:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
10351:../src/wolfcrypt/src/sp_int.c ****         if (a->used == b->used) {
10352:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mul_nxn(a, b, r);
10353:../src/wolfcrypt/src/sp_int.c ****         }
10354:../src/wolfcrypt/src/sp_int.c ****         else
10355:../src/wolfcrypt/src/sp_int.c **** #endif
10356:../src/wolfcrypt/src/sp_int.c ****         {
10357:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mul(a, b, r);
 8056                             		.loc 2 10357 19
 8057 0066 ED A3 03                		mov.L	12[r10], r3
 8058 0069 ED A2 02                		mov.L	8[r10], r2
 8059 006c ED A1 01                		mov.L	4[r10], r1
 8060 006f 05 00 00 00             		bsr	__sp_mul
 8061 0073 E3 A1                   		mov.L	r1, [r10]
 8062                             	.L537:
10358:../src/wolfcrypt/src/sp_int.c ****         }
10359:../src/wolfcrypt/src/sp_int.c ****     }
10360:../src/wolfcrypt/src/sp_int.c **** 
10361:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
10362:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
10363:../src/wolfcrypt/src/sp_int.c ****         r->sign = (r->used == 0) ? MP_ZPOS : sign;
10364:../src/wolfcrypt/src/sp_int.c ****     }
10365:../src/wolfcrypt/src/sp_int.c **** #endif
10366:../src/wolfcrypt/src/sp_int.c **** 
10367:../src/wolfcrypt/src/sp_int.c **** #if 0
10368:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
10369:../src/wolfcrypt/src/sp_int.c ****         sp_print(r, "rmul");
10370:../src/wolfcrypt/src/sp_int.c ****     }
10371:../src/wolfcrypt/src/sp_int.c **** #endif
10372:../src/wolfcrypt/src/sp_int.c **** 
10373:../src/wolfcrypt/src/sp_int.c ****     return err;
 8063                             		.loc 2 10373 12
 8064 0075 EC A5                   		mov.L	[r10], r5
10374:../src/wolfcrypt/src/sp_int.c **** }
 8065                             		.loc 2 10374 1
 8066 0077 EF 51                   		mov.L	r5, r1
 8067 0079 3F AA 05                		rtsd	#20, r10-r10
 8068                             	.LFE98:
 8070                             		.section	.text.sp_mulmod,"ax",@progbits
 8071                             		.global	_sp_mulmod
 8073                             	_sp_mulmod:
 8074                             	.LFB99:
10375:../src/wolfcrypt/src/sp_int.c **** /* END SP_MUL implementations. */
10376:../src/wolfcrypt/src/sp_int.c **** 
10377:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || defined(WOLFSSL_HAVE_SP_DH) || \
10378:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFCRYPT_HAVE_ECCSI) || \
10379:../src/wolfcrypt/src/sp_int.c ****     (!defined(NO_RSA) && defined(WOLFSSL_KEY_GEN))
10380:../src/wolfcrypt/src/sp_int.c **** /* Multiply a by b mod m and store in r: r = (a * b) mod m
10381:../src/wolfcrypt/src/sp_int.c ****  *
10382:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
10383:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer to multiply.
10384:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m  SP integer that is the modulus.
10385:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
10386:../src/wolfcrypt/src/sp_int.c ****  *
10387:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
10388:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, b, m or r is NULL; m is 0; or a * b is too big for
10389:../src/wolfcrypt/src/sp_int.c ****  *          fixed data length.
10390:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
10391:../src/wolfcrypt/src/sp_int.c ****  */
10392:../src/wolfcrypt/src/sp_int.c **** int sp_mulmod(sp_int* a, sp_int* b, sp_int* m, sp_int* r)
10393:../src/wolfcrypt/src/sp_int.c **** {
 8075                             		.loc 2 10393 1
 8076 0000 7E AA                   		push.l	r10
 8077                             	.LCFI120:
 8078 0002 71 0A E4                		add	#-28, r0, r10
 8079                             	.LCFI121:
 8080 0005 EF A0                   		mov.L	r10, r0
 8081 0007 E7 A1 03                		mov.L	r1, 12[r10]
 8082 000a E7 A2 04                		mov.L	r2, 16[r10]
 8083 000d E7 A3 05                		mov.L	r3, 20[r10]
 8084 0010 E7 A4 06                		mov.L	r4, 24[r10]
10394:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 8085                             		.loc 2 10394 9
 8086 0013 F8 A6 00                		mov.L	#0, [r10]
10395:../src/wolfcrypt/src/sp_int.c **** 
10396:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (b == NULL) || (m == NULL) || (r == NULL)) {
 8087                             		.loc 2 10396 8
 8088 0016 ED A5 03                		mov.L	12[r10], r5
 8089 0019 61 05                   		cmp	#0, r5
 8090 001b 20 15                   		beq	.L542
 8091                             		.loc 2 10396 21 discriminator 1
 8092 001d ED A5 04                		mov.L	16[r10], r5
 8093 0020 61 05                   		cmp	#0, r5
 8094 0022 20 0E                   		beq	.L542
 8095                             		.loc 2 10396 36 discriminator 2
 8096 0024 ED A5 05                		mov.L	20[r10], r5
 8097 0027 61 05                   		cmp	#0, r5
 8098 0029 17                      		beq	.L542
 8099                             		.loc 2 10396 51 discriminator 3
 8100 002a ED A5 06                		mov.L	24[r10], r5
 8101 002d 61 05                   		cmp	#0, r5
 8102 002f 1C                      		bne	.L543
 8103                             		.balign 8,3,4
 8104                             	.L542:
10397:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 8105                             		.loc 2 10397 13
 8106 0030 F8 A6 FD                		mov.L	#-3, [r10]
 8107                             	.L543:
10398:../src/wolfcrypt/src/sp_int.c ****     }
10399:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (a->used + b->used > r->size)) {
 8108                             		.loc 2 10399 8
 8109 0033 EC A5                   		mov.L	[r10], r5
 8110 0035 61 05                   		cmp	#0, r5
 8111 0037 21 1A                   		bne	.L544
 8112                             		.loc 2 10399 31 discriminator 1
 8113 0039 ED A5 03                		mov.L	12[r10], r5
 8114 003c EC 54                   		mov.L	[r5], r4
 8115                             		.loc 2 10399 41 discriminator 1
 8116 003e ED A5 04                		mov.L	16[r10], r5
 8117 0041 EC 55                   		mov.L	[r5], r5
 8118                             		.loc 2 10399 38 discriminator 1
 8119 0043 4B 45                   		add	r4, r5
 8120                             		.loc 2 10399 51 discriminator 1
 8121 0045 ED A4 06                		mov.L	24[r10], r4
 8122 0048 A8 4C                   		mov.L	4[r4], r4
 8123                             		.loc 2 10399 26 discriminator 1
 8124 004a 47 45                   		cmp	r4, r5
 8125 004c 2B 05                   		ble	.L544
10400:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 8126                             		.loc 2 10400 13
 8127 004e F8 A6 FD                		mov.L	#-3, [r10]
 8128                             	.L544:
10401:../src/wolfcrypt/src/sp_int.c ****     }
10402:../src/wolfcrypt/src/sp_int.c **** 
10403:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 8129                             		.loc 2 10403 8
 8130 0051 EC A5                   		mov.L	[r10], r5
 8131 0053 61 05                   		cmp	#0, r5
 8132 0055 3B EF 00                		bne	.L545
10404:../src/wolfcrypt/src/sp_int.c ****         if ((r == m) || (r->size < a->used + b->used)) {
 8133                             		.loc 2 10404 12
 8134 0058 ED A4 06                		mov.L	24[r10], r4
 8135 005b ED A5 05                		mov.L	20[r10], r5
 8136 005e 47 54                   		cmp	r5, r4
 8137 0060 20 1A                   		beq	.L546
 8138                             		.loc 2 10404 27 discriminator 1
 8139 0062 ED A5 06                		mov.L	24[r10], r5
 8140 0065 A8 5C                   		mov.L	4[r5], r4
 8141                             		.loc 2 10404 37 discriminator 1
 8142 0067 ED A5 03                		mov.L	12[r10], r5
 8143 006a EC 53                   		mov.L	[r5], r3
 8144                             		.loc 2 10404 47 discriminator 1
 8145 006c ED A5 04                		mov.L	16[r10], r5
 8146 006f EC 55                   		mov.L	[r5], r5
 8147                             		.loc 2 10404 44 discriminator 1
 8148 0071 4B 35                   		add	r3, r5
 8149                             		.loc 2 10404 22 discriminator 1
 8150 0073 47 54                   		cmp	r5, r4
 8151 0075 29 05 38 A6 00          		bge	.L547
 8152                             	.L546:
 8153                             	.LBB53:
10405:../src/wolfcrypt/src/sp_int.c ****             DECL_SP_INT(t, ((a == NULL) || (b == NULL)) ? 1 :
 8154                             		.loc 2 10405 13
 8155 007a F9 A6 01 00             		mov.L	#0, 4[r10]
10406:../src/wolfcrypt/src/sp_int.c ****                 a->used + b->used);
10407:../src/wolfcrypt/src/sp_int.c ****             ALLOC_SP_INT(t, a->used + b->used, err, NULL);
 8156                             		.loc 2 10407 13
 8157 007e EC A5                   		mov.L	[r10], r5
 8158 0080 61 05                   		cmp	#0, r5
 8159 0082 21 37                   		bne	.L548
 8160                             		.loc 2 10407 13 is_stmt 0 discriminator 1
 8161 0084 ED A5 03                		mov.L	12[r10], r5
 8162 0087 EC 54                   		mov.L	[r5], r4
 8163 0089 ED A5 04                		mov.L	16[r10], r5
 8164 008c EC 55                   		mov.L	[r5], r5
 8165 008e 4B 45                   		add	r4, r5
 8166 0090 61 05                   		cmp	#0, r5
 8167 0092 20 13                   		beq	.L549
 8168                             		.loc 2 10407 13 discriminator 2
 8169 0094 ED A5 03                		mov.L	12[r10], r5
 8170 0097 EC 54                   		mov.L	[r5], r4
 8171 0099 ED A5 04                		mov.L	16[r10], r5
 8172 009c EC 55                   		mov.L	[r5], r5
 8173 009e 4B 45                   		add	r4, r5
 8174 00a0 62 25                   		add	#2, r5
 8175 00a2 6C 25                   		shll	#2, r5
 8176 00a4 0B                      		bra	.L550
 8177                             	.L549:
 8178                             		.loc 2 10407 13 discriminator 3
 8179 00a5 66 C5                   		mov.L	#12, r5
 8180                             	.L550:
 8181                             		.loc 2 10407 13 discriminator 5
 8182 00a7 EF 51                   		mov.L	r5, r1
 8183 00a9 05 00 00 00             		bsr	_wolfSSL_Malloc
 8184 00ad E7 A1 01                		mov.L	r1, 4[r10]
 8185 00b0 ED A5 01                		mov.L	4[r10], r5
 8186 00b3 61 05                   		cmp	#0, r5
 8187 00b5 1C                      		bne	.L548
 8188                             		.loc 2 10407 13 discriminator 6
 8189 00b6 F8 A6 FE                		mov.L	#-2, [r10]
 8190                             	.L548:
10408:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 8191                             		.loc 2 10408 16 is_stmt 1
 8192 00b9 EC A5                   		mov.L	[r10], r5
 8193 00bb 61 05                   		cmp	#0, r5
 8194 00bd 21 19                   		bne	.L551
10409:../src/wolfcrypt/src/sp_int.c ****                 err = sp_init_size(t, a->used + b->used);
 8195                             		.loc 2 10409 40
 8196 00bf ED A5 03                		mov.L	12[r10], r5
 8197 00c2 EC 54                   		mov.L	[r5], r4
 8198                             		.loc 2 10409 50
 8199 00c4 ED A5 04                		mov.L	16[r10], r5
 8200 00c7 EC 55                   		mov.L	[r5], r5
 8201                             		.loc 2 10409 23
 8202 00c9 4B 45                   		add	r4, r5
 8203 00cb EF 52                   		mov.L	r5, r2
 8204 00cd ED A1 01                		mov.L	4[r10], r1
 8205 00d0 05 00 00 00             		bsr	_sp_init_size
 8206 00d4 E3 A1                   		mov.L	r1, [r10]
 8207                             	.L551:
10410:../src/wolfcrypt/src/sp_int.c ****             }
10411:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 8208                             		.loc 2 10411 16
 8209 00d6 EC A5                   		mov.L	[r10], r5
 8210 00d8 61 05                   		cmp	#0, r5
 8211 00da 21 11                   		bne	.L552
10412:../src/wolfcrypt/src/sp_int.c ****                 err = sp_mul(a, b, t);
 8212                             		.loc 2 10412 23
 8213 00dc ED A3 01                		mov.L	4[r10], r3
 8214 00df ED A2 04                		mov.L	16[r10], r2
 8215 00e2 ED A1 03                		mov.L	12[r10], r1
 8216 00e5 05 00 00 00             		bsr	_sp_mul
 8217 00e9 E3 A1                   		mov.L	r1, [r10]
 8218                             	.L552:
10413:../src/wolfcrypt/src/sp_int.c ****             }
10414:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 8219                             		.loc 2 10414 16
 8220 00eb EC A5                   		mov.L	[r10], r5
 8221 00ed 61 05                   		cmp	#0, r5
 8222 00ef 21 11                   		bne	.L553
10415:../src/wolfcrypt/src/sp_int.c ****                 err = sp_mod(t, m, r);
 8223                             		.loc 2 10415 23
 8224 00f1 ED A3 06                		mov.L	24[r10], r3
 8225 00f4 ED A2 05                		mov.L	20[r10], r2
 8226 00f7 ED A1 01                		mov.L	4[r10], r1
 8227 00fa 05 00 00 00             		bsr	_sp_mod
 8228 00fe E3 A1                   		mov.L	r1, [r10]
 8229                             	.L553:
10416:../src/wolfcrypt/src/sp_int.c ****             }
10417:../src/wolfcrypt/src/sp_int.c **** 
10418:../src/wolfcrypt/src/sp_int.c ****             FREE_SP_INT(t, NULL);
 8230                             		.loc 2 10418 13
 8231 0100 ED A5 01                		mov.L	4[r10], r5
 8232 0103 61 05                   		cmp	#0, r5
 8233 0105 20 3E                   		beq	.L556
 8234                             	.LBB54:
 8235                             		.loc 2 10418 13 is_stmt 0 discriminator 1
 8236 0107 ED A5 01                		mov.L	4[r10], r5
 8237 010a E7 A5 02                		mov.L	r5, 8[r10]
 8238 010d ED A5 02                		mov.L	8[r10], r5
 8239 0110 61 05                   		cmp	#0, r5
 8240 0112 20 31                   		beq	.L556
 8241                             		.loc 2 10418 13 discriminator 2
 8242 0114 ED A1 02                		mov.L	8[r10], r1
 8243 0117 05 00 00 00             		bsr	_wolfSSL_Free
 8244                             	.LBE54:
 8245                             	.LBE53:
10404:../src/wolfcrypt/src/sp_int.c ****             DECL_SP_INT(t, ((a == NULL) || (b == NULL)) ? 1 :
 8246                             		.loc 2 10404 56 is_stmt 1 discriminator 2
 8247 011b 2E 28                   		bra	.L556
 8248                             	.L547:
10419:../src/wolfcrypt/src/sp_int.c ****         }
10420:../src/wolfcrypt/src/sp_int.c ****         else {
10421:../src/wolfcrypt/src/sp_int.c ****             err = sp_mul(a, b, r);
 8249                             		.loc 2 10421 19
 8250 011d ED A3 06                		mov.L	24[r10], r3
 8251 0120 ED A2 04                		mov.L	16[r10], r2
 8252 0123 ED A1 03                		mov.L	12[r10], r1
 8253 0126 05 00 00 00             		bsr	_sp_mul
 8254 012a E3 A1                   		mov.L	r1, [r10]
10422:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 8255                             		.loc 2 10422 16
 8256 012c EC A5                   		mov.L	[r10], r5
 8257 012e 61 05                   		cmp	#0, r5
 8258 0130 21 14                   		bne	.L545
10423:../src/wolfcrypt/src/sp_int.c ****                 err = sp_mod(r, m, r);
 8259                             		.loc 2 10423 23
 8260 0132 ED A3 06                		mov.L	24[r10], r3
 8261 0135 ED A2 05                		mov.L	20[r10], r2
 8262 0138 ED A1 06                		mov.L	24[r10], r1
 8263 013b 05 00 00 00             		bsr	_sp_mod
 8264 013f E3 A1                   		mov.L	r1, [r10]
 8265 0141 2E 03                   		bra	.L545
 8266                             	.L556:
10404:../src/wolfcrypt/src/sp_int.c ****             DECL_SP_INT(t, ((a == NULL) || (b == NULL)) ? 1 :
 8267                             		.loc 2 10404 56
 8268 0143 03                      		nop
 8269                             		.balign 8,3,1
 8270                             	.L545:
10424:../src/wolfcrypt/src/sp_int.c ****             }
10425:../src/wolfcrypt/src/sp_int.c ****         }
10426:../src/wolfcrypt/src/sp_int.c ****     }
10427:../src/wolfcrypt/src/sp_int.c ****     return err;
 8271                             		.loc 2 10427 12
 8272 0144 EC A5                   		mov.L	[r10], r5
10428:../src/wolfcrypt/src/sp_int.c **** }
 8273                             		.loc 2 10428 1
 8274 0146 EF 51                   		mov.L	r5, r1
 8275 0148 3F AA 08                		rtsd	#32, r10-r10
 8276                             	.LFE99:
 8278 014b 77 10 01 00 00          		.section	.text.sp_invmod,"ax",@progbits
 8279                             		.global	_sp_invmod
 8281                             	_sp_invmod:
 8282                             	.LFB100:
10429:../src/wolfcrypt/src/sp_int.c **** #endif
10430:../src/wolfcrypt/src/sp_int.c **** 
10431:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INVMOD
10432:../src/wolfcrypt/src/sp_int.c **** /* Calculates the multiplicative inverse in the field.
10433:../src/wolfcrypt/src/sp_int.c ****  *
10434:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to find inverse of.
10435:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m  SP integer this is the modulus.
10436:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result. r cannot be m.
10437:../src/wolfcrypt/src/sp_int.c ****  *
10438:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
10439:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, m or r is NULL; a or m is zero; a and m are even or
10440:../src/wolfcrypt/src/sp_int.c ****  *          m is negative.
10441:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
10442:../src/wolfcrypt/src/sp_int.c ****  */
10443:../src/wolfcrypt/src/sp_int.c **** int sp_invmod(sp_int* a, sp_int* m, sp_int* r)
10444:../src/wolfcrypt/src/sp_int.c **** {
 8283                             		.loc 2 10444 1
 8284 0000 7E AA                   		push.l	r10
 8285                             	.LCFI122:
 8286 0002 71 0A BC                		add	#-68, r0, r10
 8287                             	.LCFI123:
 8288 0005 EF A0                   		mov.L	r10, r0
 8289 0007 E7 A1 0E                		mov.L	r1, 56[r10]
 8290 000a E7 A2 0F                		mov.L	r2, 60[r10]
 8291 000d E7 A3 10                		mov.L	r3, 64[r10]
10445:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 8292                             		.loc 2 10445 9
 8293 0010 F8 A6 00                		mov.L	#0, [r10]
10446:../src/wolfcrypt/src/sp_int.c ****     sp_int* u = NULL;
 8294                             		.loc 2 10446 13
 8295 0013 F9 A6 01 00             		mov.L	#0, 4[r10]
10447:../src/wolfcrypt/src/sp_int.c ****     sp_int* v = NULL;
 8296                             		.loc 2 10447 13
 8297 0017 F9 A6 02 00             		mov.L	#0, 8[r10]
10448:../src/wolfcrypt/src/sp_int.c ****     sp_int* b = NULL;
 8298                             		.loc 2 10448 13
 8299 001b F9 A6 03 00             		mov.L	#0, 12[r10]
10449:../src/wolfcrypt/src/sp_int.c ****     sp_int* mm;
10450:../src/wolfcrypt/src/sp_int.c ****     int evenMod = 0;
 8300                             		.loc 2 10450 9
 8301 001f F9 A6 05 00             		mov.L	#0, 20[r10]
10451:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, (m == NULL) ? 1 : (m->used + 1), 3);
 8302                             		.loc 2 10451 5
 8303 0023 F9 A6 06 00             		mov.L	#0, 24[r10]
 8304 0027 71 A5 2C                		add	#44, r10, r5
 8305 002a EF 51                   		mov.L	r5, r1
 8306 002c 66 C3                   		mov.L	#12, r3
 8307 002e 66 02                   		mov	#0, r2
 8308 0030 7F 88                   		sstr.b
10452:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT(c, (m == NULL) ? 1 : (2 * m->used + 1));
 8309                             		.loc 2 10452 5
 8310 0032 F9 A6 07 00             		mov.L	#0, 28[r10]
10453:../src/wolfcrypt/src/sp_int.c **** 
10454:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (m == NULL) || (r == NULL) || (r == m)) {
 8311                             		.loc 2 10454 8
 8312 0036 ED A5 0E                		mov.L	56[r10], r5
 8313 0039 61 05                   		cmp	#0, r5
 8314 003b 20 18                   		beq	.L558
 8315                             		.loc 2 10454 21 discriminator 1
 8316 003d ED A5 0F                		mov.L	60[r10], r5
 8317 0040 61 05                   		cmp	#0, r5
 8318 0042 20 11                   		beq	.L558
 8319                             		.loc 2 10454 36 discriminator 2
 8320 0044 ED A5 10                		mov.L	64[r10], r5
 8321 0047 61 05                   		cmp	#0, r5
 8322 0049 12                      		beq	.L558
 8323                             		.loc 2 10454 51 discriminator 3
 8324 004a ED A4 10                		mov.L	64[r10], r4
 8325 004d ED A5 0F                		mov.L	60[r10], r5
 8326 0050 47 54                   		cmp	r5, r4
 8327 0052 1C                      		bne	.L559
 8328                             		.balign 8,3,4
 8329                             	.L558:
10455:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 8330                             		.loc 2 10455 13
 8331 0053 F8 A6 FD                		mov.L	#-3, [r10]
 8332                             	.L559:
10456:../src/wolfcrypt/src/sp_int.c ****     }
10457:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (m->used * 2 > r->size)) {
 8333                             		.loc 2 10457 8
 8334 0056 EC A5                   		mov.L	[r10], r5
 8335 0058 61 05                   		cmp	#0, r5
 8336 005a 21 17                   		bne	.L560
 8337                             		.loc 2 10457 31 discriminator 1
 8338 005c ED A5 0F                		mov.L	60[r10], r5
 8339 005f EC 55                   		mov.L	[r5], r5
 8340                             		.loc 2 10457 38 discriminator 1
 8341 0061 4B 55                   		add	r5, r5
 8342 0063 EF 54                   		mov.L	r5, r4
 8343                             		.loc 2 10457 45 discriminator 1
 8344 0065 ED A5 10                		mov.L	64[r10], r5
 8345 0068 A8 5D                   		mov.L	4[r5], r5
 8346                             		.loc 2 10457 26 discriminator 1
 8347 006a 47 54                   		cmp	r5, r4
 8348 006c 2B 05                   		ble	.L560
10458:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 8349                             		.loc 2 10458 13
 8350 006e F8 A6 FD                		mov.L	#-3, [r10]
 8351                             	.L560:
10459:../src/wolfcrypt/src/sp_int.c ****     }
10460:../src/wolfcrypt/src/sp_int.c **** 
10461:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
10462:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (m->sign == MP_NEG)) {
10463:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
10464:../src/wolfcrypt/src/sp_int.c ****     }
10465:../src/wolfcrypt/src/sp_int.c **** #endif
10466:../src/wolfcrypt/src/sp_int.c **** 
10467:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, m->used + 1, 3, err, NULL);
 8352                             		.loc 2 10467 5
 8353 0071 EC A5                   		mov.L	[r10], r5
 8354 0073 61 05                   		cmp	#0, r5
 8355 0075 3B 94 00                		bne	.L561
 8356                             		.loc 2 10467 5 is_stmt 0 discriminator 1
 8357 0078 ED A5 0F                		mov.L	60[r10], r5
 8358 007b EC 55                   		mov.L	[r5], r5
 8359 007d 75 05 FF                		cmp	#-1, r5
 8360 0080 20 0D                   		beq	.L562
 8361                             		.loc 2 10467 5 discriminator 2
 8362 0082 ED A5 0F                		mov.L	60[r10], r5
 8363 0085 EC 55                   		mov.L	[r5], r5
 8364 0087 63 C5                   		mul	#12, r5
 8365 0089 71 55 24                		add	#36, r5
 8366 008c 0C                      		bra	.L563
 8367                             	.L562:
 8368                             		.loc 2 10467 5 discriminator 3
 8369 008d 75 45 24                		mov.L	#36, r5
 8370                             	.L563:
 8371                             		.loc 2 10467 5 discriminator 5
 8372 0090 EF 51                   		mov.L	r5, r1
 8373 0092 05 00 00 00             		bsr	_wolfSSL_Malloc
 8374 0096 E7 A1 06                		mov.L	r1, 24[r10]
 8375 0099 ED A5 06                		mov.L	24[r10], r5
 8376 009c 61 05                   		cmp	#0, r5
 8377 009e 1E                      		bne	.L564
 8378                             		.loc 2 10467 5 discriminator 6
 8379 009f F8 A6 FE                		mov.L	#-2, [r10]
 8380 00a2 2E 67                   		bra	.L561
 8381                             	.L564:
 8382                             	.LBB55:
 8383                             		.loc 2 10467 5 discriminator 7
 8384 00a4 ED A5 06                		mov.L	24[r10], r5
 8385 00a7 E7 A5 0B                		mov.L	r5, 44[r10]
 8386 00aa ED A5 0F                		mov.L	60[r10], r5
 8387 00ad EC 54                   		mov.L	[r5], r4
 8388 00af ED A5 0B                		mov.L	44[r10], r5
 8389 00b2 62 14                   		add	#1, r4
 8390 00b4 A0 5C                   		mov.L	r4, 4[r5]
 8391 00b6 F9 A6 08 01             		mov.L	#1, 32[r10]
 8392 00ba 2E 48                   		bra	.L565
 8393                             	.L568:
 8394                             		.loc 2 10467 5 discriminator 14
 8395 00bc ED A5 08                		mov.L	32[r10], r5
 8396 00bf 60 15                   		sub	#1, r5
 8397 00c1 6C 25                   		shll	#2, r5
 8398 00c3 4B A5                   		add	r10, r5
 8399 00c5 AA DC                   		mov.L	44[r5], r4
 8400 00c7 ED A5 0F                		mov.L	60[r10], r5
 8401 00ca EC 55                   		mov.L	[r5], r5
 8402 00cc 75 05 FF                		cmp	#-1, r5
 8403 00cf 20 0C                   		beq	.L566
 8404                             		.loc 2 10467 5 discriminator 9
 8405 00d1 ED A5 0F                		mov.L	60[r10], r5
 8406 00d4 EC 55                   		mov.L	[r5], r5
 8407 00d6 62 35                   		add	#3, r5
 8408 00d8 6C 25                   		shll	#2, r5
 8409 00da 0B                      		bra	.L567
 8410                             	.L566:
 8411                             		.loc 2 10467 5 discriminator 10
 8412 00db 66 C5                   		mov.L	#12, r5
 8413                             	.L567:
 8414                             		.loc 2 10467 5 discriminator 12
 8415 00dd 4B 54                   		add	r5, r4
 8416 00df ED A5 08                		mov.L	32[r10], r5
 8417 00e2 6C 25                   		shll	#2, r5
 8418 00e4 4B A5                   		add	r10, r5
 8419 00e6 A2 DC                   		mov.L	r4, 44[r5]
 8420 00e8 ED A5 0F                		mov.L	60[r10], r5
 8421 00eb EC 54                   		mov.L	[r5], r4
 8422 00ed ED A5 08                		mov.L	32[r10], r5
 8423 00f0 6C 25                   		shll	#2, r5
 8424 00f2 4B A5                   		add	r10, r5
 8425 00f4 AA DD                   		mov.L	44[r5], r5
 8426 00f6 62 14                   		add	#1, r4
 8427 00f8 A0 5C                   		mov.L	r4, 4[r5]
 8428 00fa ED A5 08                		mov.L	32[r10], r5
 8429 00fd 62 15                   		add	#1, r5
 8430 00ff E7 A5 08                		mov.L	r5, 32[r10]
 8431                             	.L565:
 8432                             		.loc 2 10467 5 discriminator 13
 8433 0102 ED A5 08                		mov.L	32[r10], r5
 8434 0105 61 25                   		cmp	#2, r5
 8435 0107 2B B5                   		ble	.L568
 8436                             	.L561:
 8437                             	.LBE55:
10468:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT(c, 2 * m->used + 1, err, NULL);
 8438                             		.loc 2 10468 5 is_stmt 1
 8439 0109 EC A5                   		mov.L	[r10], r5
 8440 010b 61 05                   		cmp	#0, r5
 8441 010d 21 2C                   		bne	.L569
 8442                             		.loc 2 10468 5 is_stmt 0 discriminator 1
 8443 010f ED A5 0F                		mov.L	60[r10], r5
 8444 0112 EC 55                   		mov.L	[r5], r5
 8445 0114 4B 55                   		add	r5, r5
 8446 0116 75 05 FF                		cmp	#-1, r5
 8447 0119 20 0C                   		beq	.L570
 8448                             		.loc 2 10468 5 discriminator 2
 8449 011b ED A5 0F                		mov.L	60[r10], r5
 8450 011e EC 55                   		mov.L	[r5], r5
 8451 0120 6C 35                   		shll	#3, r5
 8452 0122 62 C5                   		add	#12, r5
 8453 0124 0B                      		bra	.L571
 8454                             	.L570:
 8455                             		.loc 2 10468 5 discriminator 3
 8456 0125 66 C5                   		mov.L	#12, r5
 8457                             	.L571:
 8458                             		.loc 2 10468 5 discriminator 5
 8459 0127 EF 51                   		mov.L	r5, r1
 8460 0129 05 00 00 00             		bsr	_wolfSSL_Malloc
 8461 012d E7 A1 07                		mov.L	r1, 28[r10]
 8462 0130 ED A5 07                		mov.L	28[r10], r5
 8463 0133 61 05                   		cmp	#0, r5
 8464 0135 1C                      		bne	.L569
 8465                             		.loc 2 10468 5 discriminator 6
 8466 0136 F8 A6 FE                		mov.L	#-2, [r10]
 8467                             	.L569:
10469:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 8468                             		.loc 2 10469 8 is_stmt 1
 8469 0139 EC A5                   		mov.L	[r10], r5
 8470 013b 61 05                   		cmp	#0, r5
 8471 013d 21 3A                   		bne	.L572
10470:../src/wolfcrypt/src/sp_int.c ****         u = t[0];
 8472                             		.loc 2 10470 11
 8473 013f ED A5 0B                		mov.L	44[r10], r5
 8474 0142 E7 A5 01                		mov.L	r5, 4[r10]
10471:../src/wolfcrypt/src/sp_int.c ****         v = t[1];
 8475                             		.loc 2 10471 11
 8476 0145 ED A5 0C                		mov.L	48[r10], r5
 8477 0148 E7 A5 02                		mov.L	r5, 8[r10]
10472:../src/wolfcrypt/src/sp_int.c ****         b = t[2];
 8478                             		.loc 2 10472 11
 8479 014b ED A5 0D                		mov.L	52[r10], r5
 8480 014e E7 A5 03                		mov.L	r5, 12[r10]
10473:../src/wolfcrypt/src/sp_int.c ****         /* c allocated separately and larger for even mod case. */
10474:../src/wolfcrypt/src/sp_int.c **** 
10475:../src/wolfcrypt/src/sp_int.c ****         if (_sp_cmp_abs(a, m) != MP_LT) {
 8481                             		.loc 2 10475 13
 8482 0151 ED A2 0F                		mov.L	60[r10], r2
 8483 0154 ED A1 0E                		mov.L	56[r10], r1
 8484 0157 05 00 00 00             		bsr	__sp_cmp_abs
 8485 015b EF 15                   		mov.L	r1, r5
 8486                             		.loc 2 10475 12
 8487 015d 75 05 FF                		cmp	#-1, r5
 8488 0160 20 17                   		beq	.L572
10476:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod(a, m, r);
 8489                             		.loc 2 10476 19
 8490 0162 ED A3 10                		mov.L	64[r10], r3
 8491 0165 ED A2 0F                		mov.L	60[r10], r2
 8492 0168 ED A1 0E                		mov.L	56[r10], r1
 8493 016b 05 00 00 00             		bsr	_sp_mod
 8494 016f E3 A1                   		mov.L	r1, [r10]
10477:../src/wolfcrypt/src/sp_int.c ****             a = r;
 8495                             		.loc 2 10477 15
 8496 0171 ED A5 10                		mov.L	64[r10], r5
 8497 0174 E7 A5 0E                		mov.L	r5, 56[r10]
 8498                             	.L572:
10478:../src/wolfcrypt/src/sp_int.c ****         }
10479:../src/wolfcrypt/src/sp_int.c ****     }
10480:../src/wolfcrypt/src/sp_int.c **** 
10481:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
10482:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (a->sign == MP_NEG)) {
10483:../src/wolfcrypt/src/sp_int.c ****         /* Make 'a' positive */
10484:../src/wolfcrypt/src/sp_int.c ****         err = sp_add(m, a, r);
10485:../src/wolfcrypt/src/sp_int.c ****         a = r;
10486:../src/wolfcrypt/src/sp_int.c ****     }
10487:../src/wolfcrypt/src/sp_int.c **** #endif
10488:../src/wolfcrypt/src/sp_int.c **** 
10489:../src/wolfcrypt/src/sp_int.c ****     /* 0 != n*m + 1 (+ve m), r*a mod 0 is always 0 (never 1)  */
10490:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (sp_iszero(a) || sp_iszero(m))) {
 8499                             		.loc 2 10490 8
 8500 0177 EC A5                   		mov.L	[r10], r5
 8501 0179 61 05                   		cmp	#0, r5
 8502 017b 21 15                   		bne	.L573
 8503                             		.loc 2 10490 30 discriminator 1
 8504 017d ED A5 0E                		mov.L	56[r10], r5
 8505 0180 EC 55                   		mov.L	[r5], r5
 8506                             		.loc 2 10490 26 discriminator 1
 8507 0182 61 05                   		cmp	#0, r5
 8508 0184 11                      		beq	.L574
 8509                             		.loc 2 10490 46 discriminator 2
 8510 0185 ED A5 0F                		mov.L	60[r10], r5
 8511 0188 EC 55                   		mov.L	[r5], r5
 8512                             		.loc 2 10490 43 discriminator 2
 8513 018a 61 05                   		cmp	#0, r5
 8514 018c 1C                      		bne	.L573
 8515                             	.L574:
10491:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 8516                             		.loc 2 10491 13
 8517 018d F8 A6 FD                		mov.L	#-3, [r10]
 8518                             	.L573:
10492:../src/wolfcrypt/src/sp_int.c ****     }
10493:../src/wolfcrypt/src/sp_int.c ****     /* r*2*x != n*2*y + 1 for integer x,y */
10494:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && sp_iseven(a) && sp_iseven(m)) {
 8519                             		.loc 2 10494 8
 8520 0190 EC A5                   		mov.L	[r10], r5
 8521 0192 61 05                   		cmp	#0, r5
 8522 0194 21 2C                   		bne	.L575
 8523                             		.loc 2 10494 29 discriminator 1
 8524 0196 ED A5 0E                		mov.L	56[r10], r5
 8525 0199 EC 55                   		mov.L	[r5], r5
 8526                             		.loc 2 10494 26 discriminator 1
 8527 019b 61 05                   		cmp	#0, r5
 8528 019d 20 23                   		beq	.L575
 8529                             		.loc 2 10494 29 discriminator 2
 8530 019f ED A5 0E                		mov.L	56[r10], r5
 8531 01a2 A8 D5                   		mov.L	8[r5], r5
 8532 01a4 64 15                   		and	#1, r5
 8533 01a6 61 05                   		cmp	#0, r5
 8534 01a8 21 18                   		bne	.L575
 8535                             		.loc 2 10494 45 discriminator 3
 8536 01aa ED A5 0F                		mov.L	60[r10], r5
 8537 01ad EC 55                   		mov.L	[r5], r5
 8538                             		.loc 2 10494 42 discriminator 3
 8539 01af 61 05                   		cmp	#0, r5
 8540 01b1 20 0F                   		beq	.L575
 8541                             		.loc 2 10494 45 discriminator 4
 8542 01b3 ED A5 0F                		mov.L	60[r10], r5
 8543 01b6 A8 D5                   		mov.L	8[r5], r5
 8544 01b8 64 15                   		and	#1, r5
 8545 01ba 61 05                   		cmp	#0, r5
 8546 01bc 1C                      		bne	.L575
10495:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 8547                             		.loc 2 10495 13
 8548 01bd F8 A6 FD                		mov.L	#-3, [r10]
 8549                             		.balign 8,3,1
 8550                             	.L575:
10496:../src/wolfcrypt/src/sp_int.c ****     }
10497:../src/wolfcrypt/src/sp_int.c **** 
10498:../src/wolfcrypt/src/sp_int.c ****     /* 1*1 = 0*m + 1  */
10499:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && sp_isone(a)) {
 8551                             		.loc 2 10499 8
 8552 01c0 EC A5                   		mov.L	[r10], r5
 8553 01c2 61 05                   		cmp	#0, r5
 8554 01c4 21 20                   		bne	.L576
 8555                             		.loc 2 10499 29 discriminator 1
 8556 01c6 ED A5 0E                		mov.L	56[r10], r5
 8557 01c9 EC 55                   		mov.L	[r5], r5
 8558                             		.loc 2 10499 26 discriminator 1
 8559 01cb 61 15                   		cmp	#1, r5
 8560 01cd 21 17                   		bne	.L576
 8561                             		.loc 2 10499 29 discriminator 2
 8562 01cf ED A5 0E                		mov.L	56[r10], r5
 8563 01d2 A8 D5                   		mov.L	8[r5], r5
 8564 01d4 61 15                   		cmp	#1, r5
 8565 01d6 21 0E                   		bne	.L576
10500:../src/wolfcrypt/src/sp_int.c ****         sp_set(r, 1);
 8566                             		.loc 2 10500 9
 8567 01d8 66 12                   		mov.L	#1, r2
 8568 01da ED A1 10                		mov.L	64[r10], r1
 8569 01dd 05 00 00 00             		bsr	_sp_set
 8570 01e1 38 6F 02                		bra	.L577
 8571                             	.L576:
10501:../src/wolfcrypt/src/sp_int.c ****     }
10502:../src/wolfcrypt/src/sp_int.c ****     else if (err != MP_OKAY) {
 8572                             		.loc 2 10502 13
 8573 01e4 EC A5                   		mov.L	[r10], r5
 8574 01e6 61 05                   		cmp	#0, r5
 8575 01e8 3B 68 02                		bne	.L577
10503:../src/wolfcrypt/src/sp_int.c ****     }
10504:../src/wolfcrypt/src/sp_int.c ****     else {
10505:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(u, m->used + 1);
 8576                             		.loc 2 10505 26
 8577 01eb ED A5 0F                		mov.L	60[r10], r5
 8578 01ee EC 55                   		mov.L	[r5], r5
 8579                             		.loc 2 10505 9
 8580 01f0 62 15                   		add	#1, r5
 8581 01f2 EF 52                   		mov.L	r5, r2
 8582 01f4 ED A1 01                		mov.L	4[r10], r1
 8583 01f7 05 00 00 00             		bsr	_sp_init_size
10506:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(v, m->used + 1);
 8584                             		.loc 2 10506 26
 8585 01fb ED A5 0F                		mov.L	60[r10], r5
 8586 01fe EC 55                   		mov.L	[r5], r5
 8587                             		.loc 2 10506 9
 8588 0200 62 15                   		add	#1, r5
 8589 0202 EF 52                   		mov.L	r5, r2
 8590 0204 ED A1 02                		mov.L	8[r10], r1
 8591 0207 05 00 00 00             		bsr	_sp_init_size
10507:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(b, m->used + 1);
 8592                             		.loc 2 10507 26
 8593 020b ED A5 0F                		mov.L	60[r10], r5
 8594 020e EC 55                   		mov.L	[r5], r5
 8595                             		.loc 2 10507 9
 8596 0210 62 15                   		add	#1, r5
 8597 0212 EF 52                   		mov.L	r5, r2
 8598 0214 ED A1 03                		mov.L	12[r10], r1
 8599 0217 05 00 00 00             		bsr	_sp_init_size
10508:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(c, 2 * m->used + 1);
 8600                             		.loc 2 10508 30
 8601 021b ED A5 0F                		mov.L	60[r10], r5
 8602 021e EC 55                   		mov.L	[r5], r5
 8603                             		.loc 2 10508 27
 8604 0220 4B 55                   		add	r5, r5
 8605                             		.loc 2 10508 9
 8606 0222 62 15                   		add	#1, r5
 8607 0224 EF 52                   		mov.L	r5, r2
 8608 0226 ED A1 07                		mov.L	28[r10], r1
 8609 0229 05 00 00 00             		bsr	_sp_init_size
10509:../src/wolfcrypt/src/sp_int.c **** 
10510:../src/wolfcrypt/src/sp_int.c ****         if (sp_iseven(m)) {
 8610                             		.loc 2 10510 13
 8611 022d ED A5 0F                		mov.L	60[r10], r5
 8612 0230 EC 55                   		mov.L	[r5], r5
 8613                             		.loc 2 10510 12
 8614 0232 61 05                   		cmp	#0, r5
 8615 0234 20 41                   		beq	.L578
 8616                             		.loc 2 10510 13 discriminator 1
 8617 0236 ED A5 0F                		mov.L	60[r10], r5
 8618 0239 A8 D5                   		mov.L	8[r5], r5
 8619 023b 64 15                   		and	#1, r5
 8620 023d 61 05                   		cmp	#0, r5
 8621 023f 21 36                   		bne	.L578
10511:../src/wolfcrypt/src/sp_int.c ****             /* a^-1 mod m = m + ((1 - m*(m^-1 % a)) / a) */
10512:../src/wolfcrypt/src/sp_int.c ****             mm = a;
 8622                             		.loc 2 10512 16
 8623 0241 ED A5 0E                		mov.L	56[r10], r5
 8624 0244 E7 A5 04                		mov.L	r5, 16[r10]
10513:../src/wolfcrypt/src/sp_int.c ****             sp_copy(a, u);
 8625                             		.loc 2 10513 13
 8626 0247 ED A2 01                		mov.L	4[r10], r2
 8627 024a ED A1 0E                		mov.L	56[r10], r1
 8628 024d 05 00 00 00             		bsr	_sp_copy
10514:../src/wolfcrypt/src/sp_int.c ****             sp_mod(m, a, v);
 8629                             		.loc 2 10514 13
 8630 0251 ED A3 02                		mov.L	8[r10], r3
 8631 0254 ED A2 0E                		mov.L	56[r10], r2
 8632 0257 ED A1 0F                		mov.L	60[r10], r1
 8633 025a 05 00 00 00             		bsr	_sp_mod
10515:../src/wolfcrypt/src/sp_int.c ****             /* v == 0 when a divides m evenly - no inverse.  */
10516:../src/wolfcrypt/src/sp_int.c ****             if (sp_iszero(v)) {
 8634                             		.loc 2 10516 17
 8635 025e ED A5 02                		mov.L	8[r10], r5
 8636 0261 EC 55                   		mov.L	[r5], r5
 8637                             		.loc 2 10516 16
 8638 0263 61 05                   		cmp	#0, r5
 8639 0265 1A                      		bne	.L579
10517:../src/wolfcrypt/src/sp_int.c ****                 /* Force u to no inverse answer. */
10518:../src/wolfcrypt/src/sp_int.c ****                 sp_set(u, 0);
 8640                             		.loc 2 10518 17
 8641 0266 66 02                   		mov.L	#0, r2
 8642 0268 ED A1 01                		mov.L	4[r10], r1
 8643 026b 05 00 00 00             		bsr	_sp_set
 8644                             	.L579:
10519:../src/wolfcrypt/src/sp_int.c ****             }
10520:../src/wolfcrypt/src/sp_int.c ****             evenMod = 1;
 8645                             		.loc 2 10520 21
 8646 026f F9 A6 05 01             		mov.L	#1, 20[r10]
 8647 0273 2E 1C                   		bra	.L580
 8648                             	.L578:
10521:../src/wolfcrypt/src/sp_int.c ****         }
10522:../src/wolfcrypt/src/sp_int.c ****         else {
10523:../src/wolfcrypt/src/sp_int.c ****             mm = m;
 8649                             		.loc 2 10523 16
 8650 0275 ED A5 0F                		mov.L	60[r10], r5
 8651 0278 E7 A5 04                		mov.L	r5, 16[r10]
10524:../src/wolfcrypt/src/sp_int.c ****             sp_copy(m, u);
 8652                             		.loc 2 10524 13
 8653 027b ED A2 01                		mov.L	4[r10], r2
 8654 027e ED A1 0F                		mov.L	60[r10], r1
 8655 0281 05 00 00 00             		bsr	_sp_copy
10525:../src/wolfcrypt/src/sp_int.c ****             sp_copy(a, v);
 8656                             		.loc 2 10525 13
 8657 0285 ED A2 02                		mov.L	8[r10], r2
 8658 0288 ED A1 0E                		mov.L	56[r10], r1
 8659 028b 05 00 00 00             		bsr	_sp_copy
 8660                             	.L580:
10526:../src/wolfcrypt/src/sp_int.c ****         }
10527:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(b);
 8661                             		.loc 2 10527 9
 8662 028f ED A1 03                		mov.L	12[r10], r1
 8663 0292 05 00 00 00             		bsr	__sp_zero
10528:../src/wolfcrypt/src/sp_int.c ****         sp_set(c, 1);
 8664                             		.loc 2 10528 9
 8665 0296 66 12                   		mov.L	#1, r2
 8666 0298 ED A1 07                		mov.L	28[r10], r1
 8667 029b 05 00 00 00             		bsr	_sp_set
10529:../src/wolfcrypt/src/sp_int.c **** 
10530:../src/wolfcrypt/src/sp_int.c ****         while (!sp_isone(v) && !sp_iszero(u)) {
 8668                             		.loc 2 10530 15
 8669 029f 38 2E 01                		bra	.L581
 8670                             	.L591:
10531:../src/wolfcrypt/src/sp_int.c ****             if (sp_iseven(u)) {
 8671                             		.loc 2 10531 17
 8672 02a2 ED A5 01                		mov.L	4[r10], r5
 8673 02a5 EC 55                   		mov.L	[r5], r5
 8674                             		.loc 2 10531 16
 8675 02a7 61 05                   		cmp	#0, r5
 8676 02a9 20 47                   		beq	.L582
 8677                             		.loc 2 10531 17 discriminator 1
 8678 02ab ED A5 01                		mov.L	4[r10], r5
 8679 02ae A8 D5                   		mov.L	8[r5], r5
 8680 02b0 64 15                   		and	#1, r5
 8681 02b2 61 05                   		cmp	#0, r5
 8682 02b4 21 3C                   		bne	.L582
10532:../src/wolfcrypt/src/sp_int.c ****                 sp_div_2(u, u);
 8683                             		.loc 2 10532 17
 8684 02b6 ED A2 01                		mov.L	4[r10], r2
 8685 02b9 ED A1 01                		mov.L	4[r10], r1
 8686 02bc 05 00 00 00             		bsr	_sp_div_2
10533:../src/wolfcrypt/src/sp_int.c ****                 if (sp_isodd(b)) {
 8687                             		.loc 2 10533 21
 8688 02c0 ED A5 03                		mov.L	12[r10], r5
 8689 02c3 EC 55                   		mov.L	[r5], r5
 8690                             		.loc 2 10533 20
 8691 02c5 61 05                   		cmp	#0, r5
 8692 02c7 20 1C                   		beq	.L583
 8693                             		.loc 2 10533 21 discriminator 1
 8694 02c9 ED A5 03                		mov.L	12[r10], r5
 8695 02cc A8 D5                   		mov.L	8[r5], r5
 8696 02ce 64 15                   		and	#1, r5
 8697 02d0 61 05                   		cmp	#0, r5
 8698 02d2 20 11                   		beq	.L583
10534:../src/wolfcrypt/src/sp_int.c ****                     _sp_add_off(b, mm, b, 0);
 8699                             		.loc 2 10534 21
 8700 02d4 66 04                   		mov.L	#0, r4
 8701 02d6 ED A3 03                		mov.L	12[r10], r3
 8702 02d9 ED A2 04                		mov.L	16[r10], r2
 8703 02dc ED A1 03                		mov.L	12[r10], r1
 8704 02df 05 00 00 00             		bsr	__sp_add_off
 8705                             	.L583:
10535:../src/wolfcrypt/src/sp_int.c ****                 }
10536:../src/wolfcrypt/src/sp_int.c ****                 sp_div_2(b, b);
 8706                             		.loc 2 10536 17
 8707 02e3 ED A2 03                		mov.L	12[r10], r2
 8708 02e6 ED A1 03                		mov.L	12[r10], r1
 8709 02e9 05 00 00 00             		bsr	_sp_div_2
 8710 02ed 38 E0 00                		bra	.L581
 8711                             	.L582:
10537:../src/wolfcrypt/src/sp_int.c ****             }
10538:../src/wolfcrypt/src/sp_int.c ****             else if (sp_iseven(v)) {
 8712                             		.loc 2 10538 22
 8713 02f0 ED A5 02                		mov.L	8[r10], r5
 8714 02f3 EC 55                   		mov.L	[r5], r5
 8715                             		.loc 2 10538 21
 8716 02f5 61 05                   		cmp	#0, r5
 8717 02f7 20 47                   		beq	.L584
 8718                             		.loc 2 10538 22 discriminator 1
 8719 02f9 ED A5 02                		mov.L	8[r10], r5
 8720 02fc A8 D5                   		mov.L	8[r5], r5
 8721 02fe 64 15                   		and	#1, r5
 8722 0300 61 05                   		cmp	#0, r5
 8723 0302 21 3C                   		bne	.L584
10539:../src/wolfcrypt/src/sp_int.c ****                 sp_div_2(v, v);
 8724                             		.loc 2 10539 17
 8725 0304 ED A2 02                		mov.L	8[r10], r2
 8726 0307 ED A1 02                		mov.L	8[r10], r1
 8727 030a 05 00 00 00             		bsr	_sp_div_2
10540:../src/wolfcrypt/src/sp_int.c ****                 if (sp_isodd(c)) {
 8728                             		.loc 2 10540 21
 8729 030e ED A5 07                		mov.L	28[r10], r5
 8730 0311 EC 55                   		mov.L	[r5], r5
 8731                             		.loc 2 10540 20
 8732 0313 61 05                   		cmp	#0, r5
 8733 0315 20 1C                   		beq	.L585
 8734                             		.loc 2 10540 21 discriminator 1
 8735 0317 ED A5 07                		mov.L	28[r10], r5
 8736 031a A8 D5                   		mov.L	8[r5], r5
 8737 031c 64 15                   		and	#1, r5
 8738 031e 61 05                   		cmp	#0, r5
 8739 0320 20 11                   		beq	.L585
10541:../src/wolfcrypt/src/sp_int.c ****                     _sp_add_off(c, mm, c, 0);
 8740                             		.loc 2 10541 21
 8741 0322 66 04                   		mov.L	#0, r4
 8742 0324 ED A3 07                		mov.L	28[r10], r3
 8743 0327 ED A2 04                		mov.L	16[r10], r2
 8744 032a ED A1 07                		mov.L	28[r10], r1
 8745 032d 05 00 00 00             		bsr	__sp_add_off
 8746                             	.L585:
10542:../src/wolfcrypt/src/sp_int.c ****                 }
10543:../src/wolfcrypt/src/sp_int.c ****                 sp_div_2(c, c);
 8747                             		.loc 2 10543 17
 8748 0331 ED A2 07                		mov.L	28[r10], r2
 8749 0334 ED A1 07                		mov.L	28[r10], r1
 8750 0337 05 00 00 00             		bsr	_sp_div_2
 8751 033b 38 92 00                		bra	.L581
 8752                             	.L584:
10544:../src/wolfcrypt/src/sp_int.c ****             }
10545:../src/wolfcrypt/src/sp_int.c ****             else if (_sp_cmp(u, v) != MP_LT) {
 8753                             		.loc 2 10545 22
 8754 033e ED A2 02                		mov.L	8[r10], r2
 8755 0341 ED A1 01                		mov.L	4[r10], r1
 8756 0344 05 00 00 00             		bsr	__sp_cmp
 8757 0348 EF 15                   		mov.L	r1, r5
 8758                             		.loc 2 10545 21
 8759 034a 75 05 FF                		cmp	#-1, r5
 8760 034d 20 42                   		beq	.L586
10546:../src/wolfcrypt/src/sp_int.c ****                 _sp_sub_off(u, v, u, 0);
 8761                             		.loc 2 10546 17
 8762 034f 66 04                   		mov.L	#0, r4
 8763 0351 ED A3 01                		mov.L	4[r10], r3
 8764 0354 ED A2 02                		mov.L	8[r10], r2
 8765 0357 ED A1 01                		mov.L	4[r10], r1
 8766 035a 05 00 00 00             		bsr	__sp_sub_off
10547:../src/wolfcrypt/src/sp_int.c ****                 if (_sp_cmp(b, c) == MP_LT) {
 8767                             		.loc 2 10547 21
 8768 035e ED A2 07                		mov.L	28[r10], r2
 8769 0361 ED A1 03                		mov.L	12[r10], r1
 8770 0364 05 00 00 00             		bsr	__sp_cmp
 8771 0368 EF 15                   		mov.L	r1, r5
 8772                             		.loc 2 10547 20
 8773 036a 75 05 FF                		cmp	#-1, r5
 8774 036d 21 11                   		bne	.L587
10548:../src/wolfcrypt/src/sp_int.c ****                     _sp_add_off(b, mm, b, 0);
 8775                             		.loc 2 10548 21
 8776 036f 66 04                   		mov.L	#0, r4
 8777 0371 ED A3 03                		mov.L	12[r10], r3
 8778 0374 ED A2 04                		mov.L	16[r10], r2
 8779 0377 ED A1 03                		mov.L	12[r10], r1
 8780 037a 05 00 00 00             		bsr	__sp_add_off
 8781                             	.L587:
10549:../src/wolfcrypt/src/sp_int.c ****                 }
10550:../src/wolfcrypt/src/sp_int.c ****                 _sp_sub_off(b, c, b, 0);
 8782                             		.loc 2 10550 17
 8783 037e 66 04                   		mov.L	#0, r4
 8784 0380 ED A3 03                		mov.L	12[r10], r3
 8785 0383 ED A2 07                		mov.L	28[r10], r2
 8786 0386 ED A1 03                		mov.L	12[r10], r1
 8787 0389 05 00 00 00             		bsr	__sp_sub_off
 8788 038d 2E 40                   		bra	.L581
 8789                             	.L586:
10551:../src/wolfcrypt/src/sp_int.c ****             }
10552:../src/wolfcrypt/src/sp_int.c ****             else {
10553:../src/wolfcrypt/src/sp_int.c ****                 _sp_sub_off(v, u, v, 0);
 8790                             		.loc 2 10553 17
 8791 038f 66 04                   		mov.L	#0, r4
 8792 0391 ED A3 02                		mov.L	8[r10], r3
 8793 0394 ED A2 01                		mov.L	4[r10], r2
 8794 0397 ED A1 02                		mov.L	8[r10], r1
 8795 039a 05 00 00 00             		bsr	__sp_sub_off
10554:../src/wolfcrypt/src/sp_int.c ****                 if (_sp_cmp(c, b) == MP_LT) {
 8796                             		.loc 2 10554 21
 8797 039e ED A2 03                		mov.L	12[r10], r2
 8798 03a1 ED A1 07                		mov.L	28[r10], r1
 8799 03a4 05 00 00 00             		bsr	__sp_cmp
 8800 03a8 EF 15                   		mov.L	r1, r5
 8801                             		.loc 2 10554 20
 8802 03aa 75 05 FF                		cmp	#-1, r5
 8803 03ad 21 11                   		bne	.L588
10555:../src/wolfcrypt/src/sp_int.c ****                     _sp_add_off(c, mm, c, 0);
 8804                             		.loc 2 10555 21
 8805 03af 66 04                   		mov.L	#0, r4
 8806 03b1 ED A3 07                		mov.L	28[r10], r3
 8807 03b4 ED A2 04                		mov.L	16[r10], r2
 8808 03b7 ED A1 07                		mov.L	28[r10], r1
 8809 03ba 05 00 00 00             		bsr	__sp_add_off
 8810                             	.L588:
10556:../src/wolfcrypt/src/sp_int.c ****                 }
10557:../src/wolfcrypt/src/sp_int.c ****                 _sp_sub_off(c, b, c, 0);
 8811                             		.loc 2 10557 17
 8812 03be 66 04                   		mov.L	#0, r4
 8813 03c0 ED A3 07                		mov.L	28[r10], r3
 8814 03c3 ED A2 03                		mov.L	12[r10], r2
 8815 03c6 ED A1 07                		mov.L	28[r10], r1
 8816 03c9 05 00 00 00             		bsr	__sp_sub_off
 8817                             		.balign 8,3,1
 8818                             	.L581:
10530:../src/wolfcrypt/src/sp_int.c ****             if (sp_iseven(u)) {
 8819                             		.loc 2 10530 17
 8820 03cd ED A5 02                		mov.L	8[r10], r5
 8821 03d0 EC 55                   		mov.L	[r5], r5
10530:../src/wolfcrypt/src/sp_int.c ****             if (sp_iseven(u)) {
 8822                             		.loc 2 10530 15
 8823 03d2 61 15                   		cmp	#1, r5
 8824 03d4 1A                      		bne	.L589
10530:../src/wolfcrypt/src/sp_int.c ****             if (sp_iseven(u)) {
 8825                             		.loc 2 10530 17 discriminator 2
 8826 03d5 ED A5 02                		mov.L	8[r10], r5
 8827 03d8 A8 D5                   		mov.L	8[r5], r5
10530:../src/wolfcrypt/src/sp_int.c ****             if (sp_iseven(u)) {
 8828                             		.loc 2 10530 16 discriminator 2
 8829 03da 61 15                   		cmp	#1, r5
 8830 03dc 20 0C                   		beq	.L590
 8831                             	.L589:
10530:../src/wolfcrypt/src/sp_int.c ****             if (sp_iseven(u)) {
 8832                             		.loc 2 10530 33 discriminator 3
 8833 03de ED A5 01                		mov.L	4[r10], r5
 8834 03e1 EC 55                   		mov.L	[r5], r5
10530:../src/wolfcrypt/src/sp_int.c ****             if (sp_iseven(u)) {
 8835                             		.loc 2 10530 29 discriminator 3
 8836 03e3 61 05                   		cmp	#0, r5
 8837 03e5 3B BD FE                		bne	.L591
 8838                             	.L590:
10558:../src/wolfcrypt/src/sp_int.c ****             }
10559:../src/wolfcrypt/src/sp_int.c ****         }
10560:../src/wolfcrypt/src/sp_int.c ****         if (sp_iszero(u)) {
 8839                             		.loc 2 10560 13
 8840 03e8 ED A5 01                		mov.L	4[r10], r5
 8841 03eb EC 55                   		mov.L	[r5], r5
 8842                             		.loc 2 10560 12
 8843 03ed 61 05                   		cmp	#0, r5
 8844 03ef 1E                      		bne	.L592
10561:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
 8845                             		.loc 2 10561 17
 8846 03f0 F8 A6 FD                		mov.L	#-3, [r10]
 8847 03f3 2E 5D                   		bra	.L577
 8848                             	.L592:
10562:../src/wolfcrypt/src/sp_int.c ****         }
10563:../src/wolfcrypt/src/sp_int.c ****         else if (evenMod) {
 8849                             		.loc 2 10563 17
 8850 03f5 ED A5 05                		mov.L	20[r10], r5
 8851 03f8 61 05                   		cmp	#0, r5
 8852 03fa 20 49                   		beq	.L593
10564:../src/wolfcrypt/src/sp_int.c ****             /* Finish operation.
10565:../src/wolfcrypt/src/sp_int.c ****              *    a^-1 mod m = m + ((1 - m*c) / a)
10566:../src/wolfcrypt/src/sp_int.c ****              * => a^-1 mod m = m - ((m*c - 1) / a)
10567:../src/wolfcrypt/src/sp_int.c ****              */
10568:../src/wolfcrypt/src/sp_int.c ****             err = sp_mul(c, m, c);
 8853                             		.loc 2 10568 19
 8854 03fc ED A3 07                		mov.L	28[r10], r3
 8855 03ff ED A2 0F                		mov.L	60[r10], r2
 8856 0402 ED A1 07                		mov.L	28[r10], r1
 8857 0405 05 00 00 00             		bsr	_sp_mul
 8858 0409 E3 A1                   		mov.L	r1, [r10]
10569:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 8859                             		.loc 2 10569 16
 8860 040b EC A5                   		mov.L	[r10], r5
 8861 040d 61 05                   		cmp	#0, r5
 8862 040f 21 1F                   		bne	.L594
10570:../src/wolfcrypt/src/sp_int.c ****                 _sp_sub_d(c, 1, c);
 8863                             		.loc 2 10570 17
 8864 0411 ED A3 07                		mov.L	28[r10], r3
 8865 0414 66 12                   		mov.L	#1, r2
 8866 0416 ED A1 07                		mov.L	28[r10], r1
 8867 0419 05 00 00 00             		bsr	__sp_sub_d
10571:../src/wolfcrypt/src/sp_int.c ****                 err = sp_div(c, a, c, NULL);
 8868                             		.loc 2 10571 23
 8869 041d 66 04                   		mov.L	#0, r4
 8870 041f ED A3 07                		mov.L	28[r10], r3
 8871 0422 ED A2 0E                		mov.L	56[r10], r2
 8872 0425 ED A1 07                		mov.L	28[r10], r1
 8873 0428 05 00 00 00             		bsr	_sp_div
 8874 042c E3 A1                   		mov.L	r1, [r10]
 8875                             	.L594:
10572:../src/wolfcrypt/src/sp_int.c ****             }
10573:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 8876                             		.loc 2 10573 16
 8877 042e EC A5                   		mov.L	[r10], r5
 8878 0430 61 05                   		cmp	#0, r5
 8879 0432 21 1E                   		bne	.L577
10574:../src/wolfcrypt/src/sp_int.c ****                 sp_sub(m, c, r);
 8880                             		.loc 2 10574 17
 8881 0434 ED A3 10                		mov.L	64[r10], r3
 8882 0437 ED A2 07                		mov.L	28[r10], r2
 8883 043a ED A1 0F                		mov.L	60[r10], r1
 8884 043d 05 00 00 00             		bsr	_sp_sub
 8885 0441 2E 0F                   		bra	.L577
 8886                             	.L593:
10575:../src/wolfcrypt/src/sp_int.c ****             }
10576:../src/wolfcrypt/src/sp_int.c ****         }
10577:../src/wolfcrypt/src/sp_int.c ****         else {
10578:../src/wolfcrypt/src/sp_int.c ****             err = sp_copy(c, r);
 8887                             		.loc 2 10578 19
 8888 0443 ED A2 10                		mov.L	64[r10], r2
 8889 0446 ED A1 07                		mov.L	28[r10], r1
 8890 0449 05 00 00 00             		bsr	_sp_copy
 8891 044d E3 A1                   		mov.L	r1, [r10]
 8892 044f 03                      		.balign 8,3,1
 8893                             	.L577:
10579:../src/wolfcrypt/src/sp_int.c ****         }
10580:../src/wolfcrypt/src/sp_int.c ****     }
10581:../src/wolfcrypt/src/sp_int.c **** 
10582:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT(c, NULL);
 8894                             		.loc 2 10582 5
 8895 0450 ED A5 07                		mov.L	28[r10], r5
 8896 0453 61 05                   		cmp	#0, r5
 8897 0455 20 15                   		beq	.L596
 8898                             	.LBB56:
 8899                             		.loc 2 10582 5 is_stmt 0 discriminator 1
 8900 0457 ED A5 07                		mov.L	28[r10], r5
 8901 045a E7 A5 09                		mov.L	r5, 36[r10]
 8902 045d ED A5 09                		mov.L	36[r10], r5
 8903 0460 61 05                   		cmp	#0, r5
 8904 0462 10                      		beq	.L596
 8905                             		.loc 2 10582 5 discriminator 2
 8906 0463 ED A1 09                		mov.L	36[r10], r1
 8907 0466 05 00 00 00             		bsr	_wolfSSL_Free
 8908                             	.L596:
 8909                             	.LBE56:
10583:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
 8910                             		.loc 2 10583 5 is_stmt 1
 8911 046a ED A5 06                		mov.L	24[r10], r5
 8912 046d 61 05                   		cmp	#0, r5
 8913 046f 20 15                   		beq	.L597
 8914                             	.LBB57:
 8915                             		.loc 2 10583 5 is_stmt 0 discriminator 1
 8916 0471 ED A5 06                		mov.L	24[r10], r5
 8917 0474 E7 A5 0A                		mov.L	r5, 40[r10]
 8918 0477 ED A5 0A                		mov.L	40[r10], r5
 8919 047a 61 05                   		cmp	#0, r5
 8920 047c 10                      		beq	.L597
 8921                             		.loc 2 10583 5 discriminator 2
 8922 047d ED A1 0A                		mov.L	40[r10], r1
 8923 0480 05 00 00 00             		bsr	_wolfSSL_Free
 8924                             	.L597:
 8925                             	.LBE57:
10584:../src/wolfcrypt/src/sp_int.c ****     return err;
 8926                             		.loc 2 10584 12 is_stmt 1
 8927 0484 EC A5                   		mov.L	[r10], r5
10585:../src/wolfcrypt/src/sp_int.c **** }
 8928                             		.loc 2 10585 1
 8929 0486 EF 51                   		mov.L	r5, r1
 8930 0488 3F AA 12                		rtsd	#72, r10-r10
 8931                             	.LFE100:
 8933 048b 77 10 01 00 00          		.section	.text.sp_invmod_mont_ct,"ax",@progbits
 8934                             		.global	_sp_invmod_mont_ct
 8936                             	_sp_invmod_mont_ct:
 8937                             	.LFB101:
10586:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_INVMOD */
10587:../src/wolfcrypt/src/sp_int.c **** 
10588:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INVMOD_MONT_CT
10589:../src/wolfcrypt/src/sp_int.c **** 
10590:../src/wolfcrypt/src/sp_int.c **** #define CT_INV_MOD_PRE_CNT      8
10591:../src/wolfcrypt/src/sp_int.c **** 
10592:../src/wolfcrypt/src/sp_int.c **** /* Calculates the multiplicative inverse in the field - constant time.
10593:../src/wolfcrypt/src/sp_int.c ****  *
10594:../src/wolfcrypt/src/sp_int.c ****  * Modulus (m) must be a prime and greater than 2.
10595:../src/wolfcrypt/src/sp_int.c ****  *
10596:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a   SP integer, Montgomery form, to find inverse of.
10597:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m   SP integer this is the modulus.
10598:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r   SP integer to hold result.
10599:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   mp  SP integer digit that is the bottom digit of inv(-m).
10600:../src/wolfcrypt/src/sp_int.c ****  *
10601:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
10602:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, m or r is NULL; a is 0 or m is less than 3.
10603:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
10604:../src/wolfcrypt/src/sp_int.c ****  */
10605:../src/wolfcrypt/src/sp_int.c **** int sp_invmod_mont_ct(sp_int* a, sp_int* m, sp_int* r, sp_int_digit mp)
10606:../src/wolfcrypt/src/sp_int.c **** {
 8938                             		.loc 2 10606 1
 8939 0000 7E AA                   		push.l	r10
 8940                             	.LCFI124:
 8941 0002 71 0A A4                		add	#-92, r0, r10
 8942                             	.LCFI125:
 8943 0005 EF A0                   		mov.L	r10, r0
 8944 0007 E7 A1 13                		mov.L	r1, 76[r10]
 8945 000a E7 A2 14                		mov.L	r2, 80[r10]
 8946 000d E7 A3 15                		mov.L	r3, 84[r10]
 8947 0010 E7 A4 16                		mov.L	r4, 88[r10]
10607:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 8948                             		.loc 2 10607 9
 8949 0013 F8 A6 00                		mov.L	#0, [r10]
10608:../src/wolfcrypt/src/sp_int.c ****     int i;
10609:../src/wolfcrypt/src/sp_int.c ****     int j = 0;
 8950                             		.loc 2 10609 9
 8951 0016 F9 A6 02 00             		mov.L	#0, 8[r10]
10610:../src/wolfcrypt/src/sp_int.c ****     sp_int* t = NULL;
 8952                             		.loc 2 10610 13
 8953 001a F9 A6 03 00             		mov.L	#0, 12[r10]
10611:../src/wolfcrypt/src/sp_int.c ****     sp_int* e = NULL;
 8954                             		.loc 2 10611 13
 8955 001e F9 A6 04 00             		mov.L	#0, 16[r10]
10612:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(pre, (m == NULL) ? 1 : m->used * 2 + 1,
 8956                             		.loc 2 10612 5
 8957 0022 F9 A6 05 00             		mov.L	#0, 20[r10]
 8958 0026 71 A5 24                		add	#36, r10, r5
 8959 0029 EF 51                   		mov.L	r5, r1
 8960 002b 75 43 28                		mov.L	#40, r3
 8961 002e 66 02                   		mov	#0, r2
 8962 0030 7F 88                   		sstr.b
10613:../src/wolfcrypt/src/sp_int.c ****                                                         CT_INV_MOD_PRE_CNT + 2);
10614:../src/wolfcrypt/src/sp_int.c **** 
10615:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (m == NULL) || (r == NULL)) {
 8963                             		.loc 2 10615 8
 8964 0032 ED A5 13                		mov.L	76[r10], r5
 8965 0035 61 05                   		cmp	#0, r5
 8966 0037 20 0E                   		beq	.L600
 8967                             		.loc 2 10615 21 discriminator 1
 8968 0039 ED A5 14                		mov.L	80[r10], r5
 8969 003c 61 05                   		cmp	#0, r5
 8970 003e 17                      		beq	.L600
 8971                             		.loc 2 10615 36 discriminator 2
 8972 003f ED A5 15                		mov.L	84[r10], r5
 8973 0042 61 05                   		cmp	#0, r5
 8974 0044 1C                      		bne	.L601
 8975                             	.L600:
10616:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 8976                             		.loc 2 10616 13
 8977 0045 F8 A6 FD                		mov.L	#-3, [r10]
 8978                             	.L601:
10617:../src/wolfcrypt/src/sp_int.c ****     }
10618:../src/wolfcrypt/src/sp_int.c **** 
10619:../src/wolfcrypt/src/sp_int.c ****     /* 0 != n*m + 1 (+ve m), r*a mod 0 is always 0 (never 1) */
10620:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (sp_iszero(a) || sp_iszero(m) ||
 8979                             		.loc 2 10620 8
 8980 0048 EC A5                   		mov.L	[r10], r5
 8981 004a 61 05                   		cmp	#0, r5
 8982 004c 21 29                   		bne	.L602
 8983                             		.loc 2 10620 30 discriminator 1
 8984 004e ED A5 13                		mov.L	76[r10], r5
 8985 0051 EC 55                   		mov.L	[r5], r5
 8986                             		.loc 2 10620 26 discriminator 1
 8987 0053 61 05                   		cmp	#0, r5
 8988 0055 20 1D                   		beq	.L603
 8989                             		.loc 2 10620 46 discriminator 2
 8990 0057 ED A5 14                		mov.L	80[r10], r5
 8991 005a EC 55                   		mov.L	[r5], r5
 8992                             		.loc 2 10620 43 discriminator 2
 8993 005c 61 05                   		cmp	#0, r5
 8994 005e 20 14                   		beq	.L603
10621:../src/wolfcrypt/src/sp_int.c ****                                               (m->used == 1 && m->dp[0] < 3))) {
 8995                             		.loc 2 10621 49 discriminator 3
 8996 0060 ED A5 14                		mov.L	80[r10], r5
 8997 0063 EC 55                   		mov.L	[r5], r5
10620:../src/wolfcrypt/src/sp_int.c ****                                               (m->used == 1 && m->dp[0] < 3))) {
 8998                             		.loc 2 10620 59 discriminator 3
 8999 0065 61 15                   		cmp	#1, r5
 9000 0067 21 0E                   		bne	.L602
 9001                             		.loc 2 10621 69
 9002 0069 ED A5 14                		mov.L	80[r10], r5
 9003 006c A8 D5                   		mov.L	8[r5], r5
 9004                             		.loc 2 10621 61
 9005 006e 61 25                   		cmp	#2, r5
 9006 0070 24 05                   		bgtu	.L602
 9007                             	.L603:
10622:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 9008                             		.loc 2 10622 13
 9009 0072 F8 A6 FD                		mov.L	#-3, [r10]
 9010                             		.balign 8,3,1
 9011                             	.L602:
10623:../src/wolfcrypt/src/sp_int.c ****     }
10624:../src/wolfcrypt/src/sp_int.c **** 
10625:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(pre, m->used * 2 + 1, CT_INV_MOD_PRE_CNT + 2, err, NULL);
 9012                             		.loc 2 10625 5
 9013 0075 EC A5                   		mov.L	[r10], r5
 9014 0077 61 05                   		cmp	#0, r5
 9015 0079 3B A1 00                		bne	.L604
 9016                             		.loc 2 10625 5 is_stmt 0 discriminator 1
 9017 007c ED A5 14                		mov.L	80[r10], r5
 9018 007f EC 55                   		mov.L	[r5], r5
 9019 0081 4B 55                   		add	r5, r5
 9020 0083 75 05 FF                		cmp	#-1, r5
 9021 0086 20 0E                   		beq	.L605
 9022                             		.loc 2 10625 5 discriminator 2
 9023 0088 ED A5 14                		mov.L	80[r10], r5
 9024 008b EC 55                   		mov.L	[r5], r5
 9025 008d 75 15 50                		mul	#0x50, r5
 9026 0090 71 55 78                		add	#0x78, r5
 9027 0093 0C                      		bra	.L606
 9028                             	.L605:
 9029                             		.loc 2 10625 5 discriminator 3
 9030 0094 75 45 78                		mov.L	#0x78, r5
 9031                             	.L606:
 9032                             		.loc 2 10625 5 discriminator 5
 9033 0097 EF 51                   		mov.L	r5, r1
 9034 0099 05 00 00 00             		bsr	_wolfSSL_Malloc
 9035 009d E7 A1 05                		mov.L	r1, 20[r10]
 9036 00a0 ED A5 05                		mov.L	20[r10], r5
 9037 00a3 61 05                   		cmp	#0, r5
 9038 00a5 1E                      		bne	.L607
 9039                             		.loc 2 10625 5 discriminator 6
 9040 00a6 F8 A6 FE                		mov.L	#-2, [r10]
 9041 00a9 2E 71                   		bra	.L604
 9042                             	.L607:
 9043                             	.LBB58:
 9044                             		.loc 2 10625 5 discriminator 7
 9045 00ab ED A5 05                		mov.L	20[r10], r5
 9046 00ae E7 A5 09                		mov.L	r5, 36[r10]
 9047 00b1 ED A5 14                		mov.L	80[r10], r5
 9048 00b4 EC 55                   		mov.L	[r5], r5
 9049 00b6 4B 55                   		add	r5, r5
 9050 00b8 EF 54                   		mov.L	r5, r4
 9051 00ba ED A5 09                		mov.L	36[r10], r5
 9052 00bd 62 14                   		add	#1, r4
 9053 00bf A0 5C                   		mov.L	r4, 4[r5]
 9054 00c1 F9 A6 06 01             		mov.L	#1, 24[r10]
 9055 00c5 2E 4E                   		bra	.L608
 9056                             	.L611:
 9057                             		.loc 2 10625 5 discriminator 14
 9058 00c7 ED A5 06                		mov.L	24[r10], r5
 9059 00ca 60 15                   		sub	#1, r5
 9060 00cc 6C 25                   		shll	#2, r5
 9061 00ce 4B A5                   		add	r10, r5
 9062 00d0 AA 5C                   		mov.L	36[r5], r4
 9063 00d2 ED A5 14                		mov.L	80[r10], r5
 9064 00d5 EC 55                   		mov.L	[r5], r5
 9065 00d7 4B 55                   		add	r5, r5
 9066 00d9 75 05 FF                		cmp	#-1, r5
 9067 00dc 20 0C                   		beq	.L609
 9068                             		.loc 2 10625 5 discriminator 9
 9069 00de ED A5 14                		mov.L	80[r10], r5
 9070 00e1 EC 55                   		mov.L	[r5], r5
 9071 00e3 6C 35                   		shll	#3, r5
 9072 00e5 62 C5                   		add	#12, r5
 9073 00e7 0B                      		bra	.L610
 9074                             	.L609:
 9075                             		.loc 2 10625 5 discriminator 10
 9076 00e8 66 C5                   		mov.L	#12, r5
 9077                             	.L610:
 9078                             		.loc 2 10625 5 discriminator 12
 9079 00ea 4B 54                   		add	r5, r4
 9080 00ec ED A5 06                		mov.L	24[r10], r5
 9081 00ef 6C 25                   		shll	#2, r5
 9082 00f1 4B A5                   		add	r10, r5
 9083 00f3 A2 5C                   		mov.L	r4, 36[r5]
 9084 00f5 ED A5 14                		mov.L	80[r10], r5
 9085 00f8 EC 55                   		mov.L	[r5], r5
 9086 00fa 4B 55                   		add	r5, r5
 9087 00fc EF 54                   		mov.L	r5, r4
 9088 00fe ED A5 06                		mov.L	24[r10], r5
 9089 0101 6C 25                   		shll	#2, r5
 9090 0103 4B A5                   		add	r10, r5
 9091 0105 AA 5D                   		mov.L	36[r5], r5
 9092 0107 62 14                   		add	#1, r4
 9093 0109 A0 5C                   		mov.L	r4, 4[r5]
 9094 010b ED A5 06                		mov.L	24[r10], r5
 9095 010e 62 15                   		add	#1, r5
 9096 0110 E7 A5 06                		mov.L	r5, 24[r10]
 9097                             	.L608:
 9098                             		.loc 2 10625 5 discriminator 13
 9099 0113 ED A5 06                		mov.L	24[r10], r5
 9100 0116 61 95                   		cmp	#9, r5
 9101 0118 2B AF                   		ble	.L611
 9102                             	.L604:
 9103                             	.LBE58:
10626:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 9104                             		.loc 2 10626 8 is_stmt 1
 9105 011a EC A5                   		mov.L	[r10], r5
 9106 011c 61 05                   		cmp	#0, r5
 9107 011e 3B 0B 01                		bne	.L612
10627:../src/wolfcrypt/src/sp_int.c ****         t = pre[CT_INV_MOD_PRE_CNT + 0];
 9108                             		.loc 2 10627 11
 9109 0121 ED A5 11                		mov.L	68[r10], r5
 9110 0124 E7 A5 03                		mov.L	r5, 12[r10]
10628:../src/wolfcrypt/src/sp_int.c ****         e = pre[CT_INV_MOD_PRE_CNT + 1];
 9111                             		.loc 2 10628 11
 9112 0127 ED A5 12                		mov.L	72[r10], r5
 9113 012a E7 A5 04                		mov.L	r5, 16[r10]
10629:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t, m->used * 2 + 1);
 9114                             		.loc 2 10629 26
 9115 012d ED A5 14                		mov.L	80[r10], r5
 9116 0130 EC 55                   		mov.L	[r5], r5
 9117                             		.loc 2 10629 33
 9118 0132 4B 55                   		add	r5, r5
 9119                             		.loc 2 10629 9
 9120 0134 62 15                   		add	#1, r5
 9121 0136 EF 52                   		mov.L	r5, r2
 9122 0138 ED A1 03                		mov.L	12[r10], r1
 9123 013b 05 00 00 00             		bsr	_sp_init_size
10630:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(e, m->used * 2 + 1);
 9124                             		.loc 2 10630 26
 9125 013f ED A5 14                		mov.L	80[r10], r5
 9126 0142 EC 55                   		mov.L	[r5], r5
 9127                             		.loc 2 10630 33
 9128 0144 4B 55                   		add	r5, r5
 9129                             		.loc 2 10630 9
 9130 0146 62 15                   		add	#1, r5
 9131 0148 EF 52                   		mov.L	r5, r2
 9132 014a ED A1 04                		mov.L	16[r10], r1
 9133 014d 05 00 00 00             		bsr	_sp_init_size
10631:../src/wolfcrypt/src/sp_int.c **** 
10632:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(pre[0], m->used * 2 + 1);
 9134                             		.loc 2 10632 9
 9135 0151 ED A4 09                		mov.L	36[r10], r4
 9136                             		.loc 2 10632 31
 9137 0154 ED A5 14                		mov.L	80[r10], r5
 9138 0157 EC 55                   		mov.L	[r5], r5
 9139                             		.loc 2 10632 38
 9140 0159 4B 55                   		add	r5, r5
 9141                             		.loc 2 10632 9
 9142 015b 62 15                   		add	#1, r5
 9143 015d EF 52                   		mov.L	r5, r2
 9144 015f EF 41                   		mov.L	r4, r1
 9145 0161 05 00 00 00             		bsr	_sp_init_size
10633:../src/wolfcrypt/src/sp_int.c ****         err = sp_copy(a, pre[0]);
 9146                             		.loc 2 10633 15
 9147 0165 ED A5 09                		mov.L	36[r10], r5
 9148 0168 EF 52                   		mov.L	r5, r2
 9149 016a ED A1 13                		mov.L	76[r10], r1
 9150 016d 05 00 00 00             		bsr	_sp_copy
 9151 0171 E3 A1                   		mov.L	r1, [r10]
10634:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; (err == MP_OKAY) && (i < CT_INV_MOD_PRE_CNT); i++) {
 9152                             		.loc 2 10634 16
 9153 0173 F9 A6 01 01             		mov.L	#1, 4[r10]
 9154                             		.loc 2 10634 9
 9155 0177 38 A2 00                		bra	.L613
 9156                             	.L617:
10635:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(pre[i], m->used * 2 + 1);
 9157                             		.loc 2 10635 13
 9158 017a ED A5 01                		mov.L	4[r10], r5
 9159 017d 6C 25                   		shll	#2, r5
 9160 017f 4B A5                   		add	r10, r5
 9161 0181 AA 5C                   		mov.L	36[r5], r4
 9162                             		.loc 2 10635 35
 9163 0183 ED A5 14                		mov.L	80[r10], r5
 9164 0186 EC 55                   		mov.L	[r5], r5
 9165                             		.loc 2 10635 42
 9166 0188 4B 55                   		add	r5, r5
 9167                             		.loc 2 10635 13
 9168 018a 62 15                   		add	#1, r5
 9169 018c EF 52                   		mov.L	r5, r2
 9170 018e EF 41                   		mov.L	r4, r1
 9171 0190 05 00 00 00             		bsr	_sp_init_size
10636:../src/wolfcrypt/src/sp_int.c ****             err = sp_sqr(pre[i-1], pre[i]);
 9172                             		.loc 2 10636 31
 9173 0194 ED A5 01                		mov.L	4[r10], r5
 9174 0197 60 15                   		sub	#1, r5
 9175                             		.loc 2 10636 19
 9176 0199 6C 25                   		shll	#2, r5
 9177 019b 4B A5                   		add	r10, r5
 9178 019d AA 5C                   		mov.L	36[r5], r4
 9179 019f ED A5 01                		mov.L	4[r10], r5
 9180 01a2 6C 25                   		shll	#2, r5
 9181 01a4 4B A5                   		add	r10, r5
 9182 01a6 AA 5D                   		mov.L	36[r5], r5
 9183 01a8 EF 52                   		mov.L	r5, r2
 9184 01aa EF 41                   		mov.L	r4, r1
 9185 01ac 05 00 00 00             		bsr	_sp_sqr
 9186 01b0 E3 A1                   		mov.L	r1, [r10]
10637:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 9187                             		.loc 2 10637 16
 9188 01b2 EC A5                   		mov.L	[r10], r5
 9189 01b4 61 05                   		cmp	#0, r5
 9190 01b6 21 19                   		bne	.L614
10638:../src/wolfcrypt/src/sp_int.c ****                 err = _sp_mont_red(pre[i], m, mp);
 9191                             		.loc 2 10638 23
 9192 01b8 ED A5 01                		mov.L	4[r10], r5
 9193 01bb 6C 25                   		shll	#2, r5
 9194 01bd 4B A5                   		add	r10, r5
 9195 01bf AA 5D                   		mov.L	36[r5], r5
 9196 01c1 ED A3 16                		mov.L	88[r10], r3
 9197 01c4 ED A2 14                		mov.L	80[r10], r2
 9198 01c7 EF 51                   		mov.L	r5, r1
 9199 01c9 05 00 00 00             		bsr	__sp_mont_red
 9200 01cd E3 A1                   		mov.L	r1, [r10]
 9201                             	.L614:
10639:../src/wolfcrypt/src/sp_int.c ****             }
10640:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 9202                             		.loc 2 10640 16
 9203 01cf EC A5                   		mov.L	[r10], r5
 9204 01d1 61 05                   		cmp	#0, r5
 9205 01d3 21 21                   		bne	.L615
10641:../src/wolfcrypt/src/sp_int.c ****                 err = sp_mul(pre[i], a, pre[i]);
 9206                             		.loc 2 10641 23
 9207 01d5 ED A5 01                		mov.L	4[r10], r5
 9208 01d8 6C 25                   		shll	#2, r5
 9209 01da 4B A5                   		add	r10, r5
 9210 01dc AA 5C                   		mov.L	36[r5], r4
 9211 01de ED A5 01                		mov.L	4[r10], r5
 9212 01e1 6C 25                   		shll	#2, r5
 9213 01e3 4B A5                   		add	r10, r5
 9214 01e5 AA 5D                   		mov.L	36[r5], r5
 9215 01e7 EF 53                   		mov.L	r5, r3
 9216 01e9 ED A2 13                		mov.L	76[r10], r2
 9217 01ec EF 41                   		mov.L	r4, r1
 9218 01ee 05 00 00 00             		bsr	_sp_mul
 9219 01f2 E3 A1                   		mov.L	r1, [r10]
 9220                             	.L615:
10642:../src/wolfcrypt/src/sp_int.c ****             }
10643:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 9221                             		.loc 2 10643 16
 9222 01f4 EC A5                   		mov.L	[r10], r5
 9223 01f6 61 05                   		cmp	#0, r5
 9224 01f8 21 19                   		bne	.L616
10644:../src/wolfcrypt/src/sp_int.c ****                 err = _sp_mont_red(pre[i], m, mp);
 9225                             		.loc 2 10644 23
 9226 01fa ED A5 01                		mov.L	4[r10], r5
 9227 01fd 6C 25                   		shll	#2, r5
 9228 01ff 4B A5                   		add	r10, r5
 9229 0201 AA 5D                   		mov.L	36[r5], r5
 9230 0203 ED A3 16                		mov.L	88[r10], r3
 9231 0206 ED A2 14                		mov.L	80[r10], r2
 9232 0209 EF 51                   		mov.L	r5, r1
 9233 020b 05 00 00 00             		bsr	__sp_mont_red
 9234 020f E3 A1                   		mov.L	r1, [r10]
 9235                             	.L616:
10634:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(pre[i], m->used * 2 + 1);
 9236                             		.loc 2 10634 68 discriminator 2
 9237 0211 ED A5 01                		mov.L	4[r10], r5
 9238 0214 62 15                   		add	#1, r5
 9239 0216 E7 A5 01                		mov.L	r5, 4[r10]
 9240                             	.L613:
10634:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(pre[i], m->used * 2 + 1);
 9241                             		.loc 2 10634 9 discriminator 1
 9242 0219 EC A5                   		mov.L	[r10], r5
 9243 021b 61 05                   		cmp	#0, r5
 9244 021d 21 0C                   		bne	.L612
10634:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(pre[i], m->used * 2 + 1);
 9245                             		.loc 2 10634 38 discriminator 3
 9246 021f ED A5 01                		mov.L	4[r10], r5
 9247 0222 61 75                   		cmp	#7, r5
 9248 0224 2A 05 38 54 FF          		ble	.L617
 9249                             	.L612:
10645:../src/wolfcrypt/src/sp_int.c ****             }
10646:../src/wolfcrypt/src/sp_int.c ****         }
10647:../src/wolfcrypt/src/sp_int.c ****     }
10648:../src/wolfcrypt/src/sp_int.c **** 
10649:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 9250                             		.loc 2 10649 8
 9251 0229 EC A5                   		mov.L	[r10], r5
 9252 022b 61 05                   		cmp	#0, r5
 9253 022d 3B 0F 01                		bne	.L618
10650:../src/wolfcrypt/src/sp_int.c ****         _sp_sub_d(m, 2, e);
 9254                             		.loc 2 10650 9
 9255 0230 ED A3 04                		mov.L	16[r10], r3
 9256 0233 66 22                   		mov.L	#2, r2
 9257 0235 ED A1 14                		mov.L	80[r10], r1
 9258 0238 05 00 00 00             		bsr	__sp_sub_d
10651:../src/wolfcrypt/src/sp_int.c ****         for (i = sp_count_bits(e)-1, j = 0; i >= 0; i--, j++) {
 9259                             		.loc 2 10651 18
 9260 023c ED A1 04                		mov.L	16[r10], r1
 9261 023f 05 00 00 00             		bsr	_sp_count_bits
 9262 0243 EF 15                   		mov.L	r1, r5
 9263                             		.loc 2 10651 16
 9264 0245 60 15                   		sub	#1, r5
 9265 0247 E7 A5 01                		mov.L	r5, 4[r10]
 9266                             		.loc 2 10651 40
 9267 024a F9 A6 02 00             		mov.L	#0, 8[r10]
 9268                             		.loc 2 10651 9
 9269 024e 2E 2B                   		bra	.L619
 9270                             	.L621:
10652:../src/wolfcrypt/src/sp_int.c ****               if ((!sp_is_bit_set(e, i)) || (j == CT_INV_MOD_PRE_CNT)) {
 9271                             		.loc 2 10652 21
 9272 0250 ED A5 01                		mov.L	4[r10], r5
 9273 0253 EF 52                   		mov.L	r5, r2
 9274 0255 ED A1 04                		mov.L	16[r10], r1
 9275 0258 05 00 00 00             		bsr	_sp_is_bit_set
 9276 025c EF 15                   		mov.L	r1, r5
 9277                             		.loc 2 10652 18
 9278 025e 61 05                   		cmp	#0, r5
 9279 0260 20 20                   		beq	.L620
 9280                             		.loc 2 10652 42 discriminator 1
 9281 0262 ED A5 02                		mov.L	8[r10], r5
 9282 0265 61 85                   		cmp	#8, r5
 9283 0267 20 19                   		beq	.L620
10651:../src/wolfcrypt/src/sp_int.c ****         for (i = sp_count_bits(e)-1, j = 0; i >= 0; i--, j++) {
 9284                             		.loc 2 10651 54 discriminator 2
 9285 0269 ED A5 01                		mov.L	4[r10], r5
 9286 026c 60 15                   		sub	#1, r5
 9287 026e E7 A5 01                		mov.L	r5, 4[r10]
10651:../src/wolfcrypt/src/sp_int.c ****         for (i = sp_count_bits(e)-1, j = 0; i >= 0; i--, j++) {
 9288                             		.loc 2 10651 59 discriminator 2
 9289 0271 ED A5 02                		mov.L	8[r10], r5
 9290 0274 62 15                   		add	#1, r5
 9291 0276 E7 A5 02                		mov.L	r5, 8[r10]
 9292                             	.L619:
10651:../src/wolfcrypt/src/sp_int.c ****         for (i = sp_count_bits(e)-1, j = 0; i >= 0; i--, j++) {
 9293                             		.loc 2 10651 9 discriminator 1
 9294 0279 ED A5 01                		mov.L	4[r10], r5
 9295 027c 61 05                   		cmp	#0, r5
 9296 027e 28 D2                   		bge	.L621
 9297                             	.L620:
10653:../src/wolfcrypt/src/sp_int.c ****                   break;
10654:../src/wolfcrypt/src/sp_int.c ****               }
10655:../src/wolfcrypt/src/sp_int.c ****         }
10656:../src/wolfcrypt/src/sp_int.c ****         err = sp_copy(pre[j-1], t);
 9298                             		.loc 2 10656 28
 9299 0280 ED A5 02                		mov.L	8[r10], r5
 9300 0283 60 15                   		sub	#1, r5
 9301                             		.loc 2 10656 26
 9302 0285 6C 25                   		shll	#2, r5
 9303 0287 4B A5                   		add	r10, r5
 9304 0289 AA 5D                   		mov.L	36[r5], r5
 9305                             		.loc 2 10656 15
 9306 028b ED A2 03                		mov.L	12[r10], r2
 9307 028e EF 51                   		mov.L	r5, r1
 9308 0290 05 00 00 00             		bsr	_sp_copy
 9309 0294 E3 A1                   		mov.L	r1, [r10]
10657:../src/wolfcrypt/src/sp_int.c ****         for (j = 0; (err == MP_OKAY) && (i >= 0); i--) {
 9310                             		.loc 2 10657 16
 9311 0296 F9 A6 02 00             		mov.L	#0, 8[r10]
 9312                             		.loc 2 10657 9
 9313 029a 38 92 00                		bra	.L622
 9314                             	.L627:
 9315                             	.LBB59:
10658:../src/wolfcrypt/src/sp_int.c ****             int set = sp_is_bit_set(e, i);
 9316                             		.loc 2 10658 23
 9317 029d ED A5 01                		mov.L	4[r10], r5
 9318 02a0 EF 52                   		mov.L	r5, r2
 9319 02a2 ED A1 04                		mov.L	16[r10], r1
 9320 02a5 05 00 00 00             		bsr	_sp_is_bit_set
 9321 02a9 E7 A1 07                		mov.L	r1, 28[r10]
10659:../src/wolfcrypt/src/sp_int.c **** 
10660:../src/wolfcrypt/src/sp_int.c ****             if ((j == CT_INV_MOD_PRE_CNT) || ((!set) && j > 0)) {
 9322                             		.loc 2 10660 16
 9323 02ac ED A5 02                		mov.L	8[r10], r5
 9324 02af 61 85                   		cmp	#8, r5
 9325 02b1 20 10                   		beq	.L623
 9326                             		.loc 2 10660 43 discriminator 1
 9327 02b3 ED A5 07                		mov.L	28[r10], r5
 9328 02b6 61 05                   		cmp	#0, r5
 9329 02b8 21 3B                   		bne	.L624
 9330                             		.loc 2 10660 54 discriminator 2
 9331 02ba ED A5 02                		mov.L	8[r10], r5
 9332 02bd 61 05                   		cmp	#0, r5
 9333 02bf 2B 34                   		ble	.L624
 9334                             	.L623:
10661:../src/wolfcrypt/src/sp_int.c ****                 err = sp_mul(t, pre[j-1], t);
 9335                             		.loc 2 10661 38
 9336 02c1 ED A5 02                		mov.L	8[r10], r5
 9337 02c4 60 15                   		sub	#1, r5
 9338                             		.loc 2 10661 23
 9339 02c6 6C 25                   		shll	#2, r5
 9340 02c8 4B A5                   		add	r10, r5
 9341 02ca AA 5D                   		mov.L	36[r5], r5
 9342 02cc ED A3 03                		mov.L	12[r10], r3
 9343 02cf EF 52                   		mov.L	r5, r2
 9344 02d1 ED A1 03                		mov.L	12[r10], r1
 9345 02d4 05 00 00 00             		bsr	_sp_mul
 9346 02d8 E3 A1                   		mov.L	r1, [r10]
10662:../src/wolfcrypt/src/sp_int.c ****                 if (err == MP_OKAY) {
 9347                             		.loc 2 10662 20
 9348 02da EC A5                   		mov.L	[r10], r5
 9349 02dc 61 05                   		cmp	#0, r5
 9350 02de 21 11                   		bne	.L625
10663:../src/wolfcrypt/src/sp_int.c ****                     err = _sp_mont_red(t, m, mp);
 9351                             		.loc 2 10663 27
 9352 02e0 ED A3 16                		mov.L	88[r10], r3
 9353 02e3 ED A2 14                		mov.L	80[r10], r2
 9354 02e6 ED A1 03                		mov.L	12[r10], r1
 9355 02e9 05 00 00 00             		bsr	__sp_mont_red
 9356 02ed E3 A1                   		mov.L	r1, [r10]
 9357                             	.L625:
10664:../src/wolfcrypt/src/sp_int.c ****                 }
10665:../src/wolfcrypt/src/sp_int.c ****                 j = 0;
 9358                             		.loc 2 10665 19
 9359 02ef F9 A6 02 00             		mov.L	#0, 8[r10]
 9360                             	.L624:
10666:../src/wolfcrypt/src/sp_int.c ****             }
10667:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 9361                             		.loc 2 10667 16
 9362 02f3 EC A5                   		mov.L	[r10], r5
 9363 02f5 61 05                   		cmp	#0, r5
 9364 02f7 21 23                   		bne	.L626
10668:../src/wolfcrypt/src/sp_int.c ****                 err = sp_sqr(t, t);
 9365                             		.loc 2 10668 23
 9366 02f9 ED A2 03                		mov.L	12[r10], r2
 9367 02fc ED A1 03                		mov.L	12[r10], r1
 9368 02ff 05 00 00 00             		bsr	_sp_sqr
 9369 0303 E3 A1                   		mov.L	r1, [r10]
10669:../src/wolfcrypt/src/sp_int.c ****                 if (err == MP_OKAY) {
 9370                             		.loc 2 10669 20
 9371 0305 EC A5                   		mov.L	[r10], r5
 9372 0307 61 05                   		cmp	#0, r5
 9373 0309 21 11                   		bne	.L626
10670:../src/wolfcrypt/src/sp_int.c ****                     err = _sp_mont_red(t, m, mp);
 9374                             		.loc 2 10670 27
 9375 030b ED A3 16                		mov.L	88[r10], r3
 9376 030e ED A2 14                		mov.L	80[r10], r2
 9377 0311 ED A1 03                		mov.L	12[r10], r1
 9378 0314 05 00 00 00             		bsr	__sp_mont_red
 9379 0318 E3 A1                   		mov.L	r1, [r10]
 9380                             	.L626:
10671:../src/wolfcrypt/src/sp_int.c ****                 }
10672:../src/wolfcrypt/src/sp_int.c ****             }
10673:../src/wolfcrypt/src/sp_int.c ****             j += set;
 9381                             		.loc 2 10673 15 discriminator 2
 9382 031a ED A5 02                		mov.L	8[r10], r5
 9383 031d 06 89 A5 07             		add	28[r10].L, r5
 9384 0321 E7 A5 02                		mov.L	r5, 8[r10]
 9385                             	.LBE59:
10657:../src/wolfcrypt/src/sp_int.c ****             int set = sp_is_bit_set(e, i);
 9386                             		.loc 2 10657 52 discriminator 2
 9387 0324 ED A5 01                		mov.L	4[r10], r5
 9388 0327 60 15                   		sub	#1, r5
 9389 0329 E7 A5 01                		mov.L	r5, 4[r10]
 9390                             	.L622:
10657:../src/wolfcrypt/src/sp_int.c ****             int set = sp_is_bit_set(e, i);
 9391                             		.loc 2 10657 9 discriminator 1
 9392 032c EC A5                   		mov.L	[r10], r5
 9393 032e 61 05                   		cmp	#0, r5
 9394 0330 21 0C                   		bne	.L618
10657:../src/wolfcrypt/src/sp_int.c ****             int set = sp_is_bit_set(e, i);
 9395                             		.loc 2 10657 38 discriminator 3
 9396 0332 ED A5 01                		mov.L	4[r10], r5
 9397 0335 61 05                   		cmp	#0, r5
 9398 0337 29 05 38 64 FF          		bge	.L627
 9399                             	.L618:
10674:../src/wolfcrypt/src/sp_int.c ****         }
10675:../src/wolfcrypt/src/sp_int.c ****     }
10676:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 9400                             		.loc 2 10676 8
 9401 033c EC A5                   		mov.L	[r10], r5
 9402 033e 61 05                   		cmp	#0, r5
 9403 0340 21 45                   		bne	.L628
10677:../src/wolfcrypt/src/sp_int.c ****         if (j > 0) {
 9404                             		.loc 2 10677 12
 9405 0342 ED A5 02                		mov.L	8[r10], r5
 9406 0345 61 05                   		cmp	#0, r5
 9407 0347 2B 32                   		ble	.L629
10678:../src/wolfcrypt/src/sp_int.c ****             err = sp_mul(t, pre[j-1], r);
 9408                             		.loc 2 10678 34
 9409 0349 ED A5 02                		mov.L	8[r10], r5
 9410 034c 60 15                   		sub	#1, r5
 9411                             		.loc 2 10678 19
 9412 034e 6C 25                   		shll	#2, r5
 9413 0350 4B A5                   		add	r10, r5
 9414 0352 AA 5D                   		mov.L	36[r5], r5
 9415 0354 ED A3 15                		mov.L	84[r10], r3
 9416 0357 EF 52                   		mov.L	r5, r2
 9417 0359 ED A1 03                		mov.L	12[r10], r1
 9418 035c 05 00 00 00             		bsr	_sp_mul
 9419 0360 E3 A1                   		mov.L	r1, [r10]
10679:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 9420                             		.loc 2 10679 16
 9421 0362 EC A5                   		mov.L	[r10], r5
 9422 0364 61 05                   		cmp	#0, r5
 9423 0366 21 1F                   		bne	.L628
10680:../src/wolfcrypt/src/sp_int.c ****                 err = _sp_mont_red(r, m, mp);
 9424                             		.loc 2 10680 23
 9425 0368 ED A3 16                		mov.L	88[r10], r3
 9426 036b ED A2 14                		mov.L	80[r10], r2
 9427 036e ED A1 15                		mov.L	84[r10], r1
 9428 0371 05 00 00 00             		bsr	__sp_mont_red
 9429 0375 E3 A1                   		mov.L	r1, [r10]
 9430 0377 2E 0E                   		bra	.L628
 9431                             	.L629:
10681:../src/wolfcrypt/src/sp_int.c ****             }
10682:../src/wolfcrypt/src/sp_int.c ****         }
10683:../src/wolfcrypt/src/sp_int.c ****         else {
10684:../src/wolfcrypt/src/sp_int.c ****             err = sp_copy(t, r);
 9432                             		.loc 2 10684 19
 9433 0379 ED A2 15                		mov.L	84[r10], r2
 9434 037c ED A1 03                		mov.L	12[r10], r1
 9435 037f 05 00 00 00             		bsr	_sp_copy
 9436 0383 E3 A1                   		mov.L	r1, [r10]
 9437                             		.balign 8,3,1
 9438                             	.L628:
10685:../src/wolfcrypt/src/sp_int.c ****         }
10686:../src/wolfcrypt/src/sp_int.c ****     }
10687:../src/wolfcrypt/src/sp_int.c **** 
10688:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(pre, NULL);
 9439                             		.loc 2 10688 5
 9440 0385 ED A5 05                		mov.L	20[r10], r5
 9441 0388 61 05                   		cmp	#0, r5
 9442 038a 20 15                   		beq	.L631
 9443                             	.LBB60:
 9444                             		.loc 2 10688 5 is_stmt 0 discriminator 1
 9445 038c ED A5 05                		mov.L	20[r10], r5
 9446 038f E7 A5 08                		mov.L	r5, 32[r10]
 9447 0392 ED A5 08                		mov.L	32[r10], r5
 9448 0395 61 05                   		cmp	#0, r5
 9449 0397 10                      		beq	.L631
 9450                             		.loc 2 10688 5 discriminator 2
 9451 0398 ED A1 08                		mov.L	32[r10], r1
 9452 039b 05 00 00 00             		bsr	_wolfSSL_Free
 9453                             	.L631:
 9454                             	.LBE60:
10689:../src/wolfcrypt/src/sp_int.c ****     return err;
 9455                             		.loc 2 10689 12 is_stmt 1
 9456 039f EC A5                   		mov.L	[r10], r5
10690:../src/wolfcrypt/src/sp_int.c **** }
 9457                             		.loc 2 10690 1
 9458 03a1 EF 51                   		mov.L	r5, r1
 9459 03a3 3F AA 18                		rtsd	#96, r10-r10
 9460                             	.LFE101:
 9462 03a6 EF 00                   		.section	.text._sp_exptmod_ex,"ax",@progbits
 9464                             	__sp_exptmod_ex:
 9465                             	.LFB102:
10691:../src/wolfcrypt/src/sp_int.c **** 
10692:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_INVMOD_MONT_CT */
10693:../src/wolfcrypt/src/sp_int.c **** 
10694:../src/wolfcrypt/src/sp_int.c **** 
10695:../src/wolfcrypt/src/sp_int.c **** /**************************
10696:../src/wolfcrypt/src/sp_int.c ****  * Exponentiation functions
10697:../src/wolfcrypt/src/sp_int.c ****  **************************/
10698:../src/wolfcrypt/src/sp_int.c **** 
10699:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY) && \
10700:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_RSA_PUBLIC_ONLY)) || !defined(NO_DH)
10701:../src/wolfcrypt/src/sp_int.c **** /* Internal. Exponentiates b to the power of e modulo m into r: r = b ^ e mod m
10702:../src/wolfcrypt/src/sp_int.c ****  * Process the exponent one bit at a time.
10703:../src/wolfcrypt/src/sp_int.c ****  * Is constant time and can be cache attack resistant.
10704:../src/wolfcrypt/src/sp_int.c ****  *
10705:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b     SP integer that is the base.
10706:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e     SP integer that is the exponent.
10707:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   bits  Number of bits in base to use. May be greater than
10708:../src/wolfcrypt/src/sp_int.c ****  *                      count of bits in b.
10709:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m     SP integer that is the modulus.
10710:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r     SP integer to hold result.
10711:../src/wolfcrypt/src/sp_int.c ****  *
10712:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
10713:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
10714:../src/wolfcrypt/src/sp_int.c ****  */
10715:../src/wolfcrypt/src/sp_int.c **** static int _sp_exptmod_ex(sp_int* b, sp_int* e, int bits, sp_int* m, sp_int* r)
10716:../src/wolfcrypt/src/sp_int.c **** {
 9466                             		.loc 2 10716 1
 9467 0000 6E 6A                   		pushm	r6-r10
 9468                             	.LCFI126:
 9469 0002 71 0A BC                		add	#-68, r0, r10
 9470                             	.LCFI127:
 9471 0005 EF A0                   		mov.L	r10, r0
 9472 0007 75 46 5C                		mov.L	#0x5c, r6
 9473 000a 4B A6                   		add	r10, r6
 9474 000c E7 A1 0C                		mov.L	r1, 48[r10]
 9475 000f E7 A2 0D                		mov.L	r2, 52[r10]
 9476 0012 E7 A3 0E                		mov.L	r3, 56[r10]
 9477 0015 E7 A4 0F                		mov.L	r4, 60[r10]
10717:../src/wolfcrypt/src/sp_int.c ****     int i;
10718:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 9478                             		.loc 2 10718 9
 9479 0018 F9 A6 01 00             		mov.L	#0, 4[r10]
10719:../src/wolfcrypt/src/sp_int.c ****     int done = 0;
 9480                             		.loc 2 10719 9
 9481 001c F9 A6 02 00             		mov.L	#0, 8[r10]
10720:../src/wolfcrypt/src/sp_int.c ****     int j;
10721:../src/wolfcrypt/src/sp_int.c ****     int y;
10722:../src/wolfcrypt/src/sp_int.c ****     int seenTopBit = 0;
 9482                             		.loc 2 10722 9
 9483 0020 F9 A6 03 00             		mov.L	#0, 12[r10]
10723:../src/wolfcrypt/src/sp_int.c **** #ifdef WC_NO_CACHE_RESISTANT
10724:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, 2 * m->used + 1, 2);
10725:../src/wolfcrypt/src/sp_int.c **** #else
10726:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, 2 * m->used + 1, 3);
 9484                             		.loc 2 10726 5
 9485 0024 F9 A6 04 00             		mov.L	#0, 16[r10]
 9486 0028 71 A5 24                		add	#36, r10, r5
 9487 002b EF 51                   		mov.L	r5, r1
 9488 002d 66 C3                   		mov.L	#12, r3
 9489 002f 66 02                   		mov	#0, r2
 9490 0031 7F 88                   		sstr.b
10727:../src/wolfcrypt/src/sp_int.c **** #endif
10728:../src/wolfcrypt/src/sp_int.c **** 
10729:../src/wolfcrypt/src/sp_int.c **** #ifdef WC_NO_CACHE_RESISTANT
10730:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, 2 * m->used + 1, 2, err, NULL);
10731:../src/wolfcrypt/src/sp_int.c **** #else
10732:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, 2 * m->used + 1, 3, err, NULL);
 9491                             		.loc 2 10732 5
 9492 0033 ED A5 01                		mov.L	4[r10], r5
 9493 0036 61 05                   		cmp	#0, r5
 9494 0038 3B A2 00                		bne	.L634
 9495                             		.loc 2 10732 5 is_stmt 0 discriminator 1
 9496 003b ED A5 0F                		mov.L	60[r10], r5
 9497 003e EC 55                   		mov.L	[r5], r5
 9498 0040 4B 55                   		add	r5, r5
 9499 0042 75 05 FF                		cmp	#-1, r5
 9500 0045 20 0E                   		beq	.L635
 9501                             		.loc 2 10732 5 discriminator 2
 9502 0047 ED A5 0F                		mov.L	60[r10], r5
 9503 004a EC 55                   		mov.L	[r5], r5
 9504 004c 75 15 18                		mul	#24, r5
 9505 004f 71 55 24                		add	#36, r5
 9506 0052 0C                      		bra	.L636
 9507                             	.L635:
 9508                             		.loc 2 10732 5 discriminator 3
 9509 0053 75 45 24                		mov.L	#36, r5
 9510                             	.L636:
 9511                             		.loc 2 10732 5 discriminator 5
 9512 0056 EF 51                   		mov.L	r5, r1
 9513 0058 05 00 00 00             		bsr	_wolfSSL_Malloc
 9514 005c E7 A1 04                		mov.L	r1, 16[r10]
 9515 005f ED A5 04                		mov.L	16[r10], r5
 9516 0062 61 05                   		cmp	#0, r5
 9517 0064 1F                      		bne	.L637
 9518                             		.loc 2 10732 5 discriminator 6
 9519 0065 F9 A6 01 FE             		mov.L	#-2, 4[r10]
 9520 0069 2E 71                   		bra	.L634
 9521                             	.L637:
 9522                             	.LBB61:
 9523                             		.loc 2 10732 5 discriminator 7
 9524 006b ED A5 04                		mov.L	16[r10], r5
 9525 006e E7 A5 09                		mov.L	r5, 36[r10]
 9526 0071 ED A5 0F                		mov.L	60[r10], r5
 9527 0074 EC 55                   		mov.L	[r5], r5
 9528 0076 4B 55                   		add	r5, r5
 9529 0078 EF 54                   		mov.L	r5, r4
 9530 007a ED A5 09                		mov.L	36[r10], r5
 9531 007d 62 14                   		add	#1, r4
 9532 007f A0 5C                   		mov.L	r4, 4[r5]
 9533 0081 F9 A6 05 01             		mov.L	#1, 20[r10]
 9534 0085 2E 4E                   		bra	.L638
 9535                             	.L641:
 9536                             		.loc 2 10732 5 discriminator 14
 9537 0087 ED A5 05                		mov.L	20[r10], r5
 9538 008a 60 15                   		sub	#1, r5
 9539 008c 6C 25                   		shll	#2, r5
 9540 008e 4B A5                   		add	r10, r5
 9541 0090 AA 5C                   		mov.L	36[r5], r4
 9542 0092 ED A5 0F                		mov.L	60[r10], r5
 9543 0095 EC 55                   		mov.L	[r5], r5
 9544 0097 4B 55                   		add	r5, r5
 9545 0099 75 05 FF                		cmp	#-1, r5
 9546 009c 20 0C                   		beq	.L639
 9547                             		.loc 2 10732 5 discriminator 9
 9548 009e ED A5 0F                		mov.L	60[r10], r5
 9549 00a1 EC 55                   		mov.L	[r5], r5
 9550 00a3 6C 35                   		shll	#3, r5
 9551 00a5 62 C5                   		add	#12, r5
 9552 00a7 0B                      		bra	.L640
 9553                             	.L639:
 9554                             		.loc 2 10732 5 discriminator 10
 9555 00a8 66 C5                   		mov.L	#12, r5
 9556                             	.L640:
 9557                             		.loc 2 10732 5 discriminator 12
 9558 00aa 4B 54                   		add	r5, r4
 9559 00ac ED A5 05                		mov.L	20[r10], r5
 9560 00af 6C 25                   		shll	#2, r5
 9561 00b1 4B A5                   		add	r10, r5
 9562 00b3 A2 5C                   		mov.L	r4, 36[r5]
 9563 00b5 ED A5 0F                		mov.L	60[r10], r5
 9564 00b8 EC 55                   		mov.L	[r5], r5
 9565 00ba 4B 55                   		add	r5, r5
 9566 00bc EF 54                   		mov.L	r5, r4
 9567 00be ED A5 05                		mov.L	20[r10], r5
 9568 00c1 6C 25                   		shll	#2, r5
 9569 00c3 4B A5                   		add	r10, r5
 9570 00c5 AA 5D                   		mov.L	36[r5], r5
 9571 00c7 62 14                   		add	#1, r4
 9572 00c9 A0 5C                   		mov.L	r4, 4[r5]
 9573 00cb ED A5 05                		mov.L	20[r10], r5
 9574 00ce 62 15                   		add	#1, r5
 9575 00d0 E7 A5 05                		mov.L	r5, 20[r10]
 9576                             	.L638:
 9577                             		.loc 2 10732 5 discriminator 13
 9578 00d3 ED A5 05                		mov.L	20[r10], r5
 9579 00d6 61 25                   		cmp	#2, r5
 9580 00d8 2B AF                   		ble	.L641
 9581                             	.L634:
 9582                             	.LBE61:
10733:../src/wolfcrypt/src/sp_int.c **** #endif
10734:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 9583                             		.loc 2 10734 8 is_stmt 1
 9584 00da ED A5 01                		mov.L	4[r10], r5
 9585 00dd 61 05                   		cmp	#0, r5
 9586 00df 3B 8F 00                		bne	.L642
10735:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t[0], 2 * m->used + 1);
 9587                             		.loc 2 10735 9
 9588 00e2 ED A4 09                		mov.L	36[r10], r4
 9589                             		.loc 2 10735 33
 9590 00e5 ED A5 0F                		mov.L	60[r10], r5
 9591 00e8 EC 55                   		mov.L	[r5], r5
 9592                             		.loc 2 10735 30
 9593 00ea 4B 55                   		add	r5, r5
 9594                             		.loc 2 10735 9
 9595 00ec 62 15                   		add	#1, r5
 9596 00ee EF 52                   		mov.L	r5, r2
 9597 00f0 EF 41                   		mov.L	r4, r1
 9598 00f2 05 00 00 00             		bsr	_sp_init_size
10736:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t[1], 2 * m->used + 1);
 9599                             		.loc 2 10736 9
 9600 00f6 ED A4 0A                		mov.L	40[r10], r4
 9601                             		.loc 2 10736 33
 9602 00f9 ED A5 0F                		mov.L	60[r10], r5
 9603 00fc EC 55                   		mov.L	[r5], r5
 9604                             		.loc 2 10736 30
 9605 00fe 4B 55                   		add	r5, r5
 9606                             		.loc 2 10736 9
 9607 0100 62 15                   		add	#1, r5
 9608 0102 EF 52                   		mov.L	r5, r2
 9609 0104 EF 41                   		mov.L	r4, r1
 9610 0106 05 00 00 00             		bsr	_sp_init_size
10737:../src/wolfcrypt/src/sp_int.c ****     #ifndef WC_NO_CACHE_RESISTANT
10738:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t[2], 2 * m->used + 1);
 9611                             		.loc 2 10738 9
 9612 010a ED A4 0B                		mov.L	44[r10], r4
 9613                             		.loc 2 10738 33
 9614 010d ED A5 0F                		mov.L	60[r10], r5
 9615 0110 EC 55                   		mov.L	[r5], r5
 9616                             		.loc 2 10738 30
 9617 0112 4B 55                   		add	r5, r5
 9618                             		.loc 2 10738 9
 9619 0114 62 15                   		add	#1, r5
 9620 0116 EF 52                   		mov.L	r5, r2
 9621 0118 EF 41                   		mov.L	r4, r1
 9622 011a 05 00 00 00             		bsr	_sp_init_size
10739:../src/wolfcrypt/src/sp_int.c ****     #endif
10740:../src/wolfcrypt/src/sp_int.c **** 
10741:../src/wolfcrypt/src/sp_int.c ****         /* Ensure base is less than exponent. */
10742:../src/wolfcrypt/src/sp_int.c ****         if (_sp_cmp_abs(b, m) != MP_LT) {
 9623                             		.loc 2 10742 13
 9624 011e ED A2 0F                		mov.L	60[r10], r2
 9625 0121 ED A1 0C                		mov.L	48[r10], r1
 9626 0124 05 00 00 00             		bsr	__sp_cmp_abs
 9627 0128 EF 15                   		mov.L	r1, r5
 9628                             		.loc 2 10742 12
 9629 012a 75 05 FF                		cmp	#-1, r5
 9630 012d 20 32                   		beq	.L643
10743:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod(b, m, t[0]);
 9631                             		.loc 2 10743 19
 9632 012f ED A5 09                		mov.L	36[r10], r5
 9633 0132 EF 53                   		mov.L	r5, r3
 9634 0134 ED A2 0F                		mov.L	60[r10], r2
 9635 0137 ED A1 0C                		mov.L	48[r10], r1
 9636 013a 05 00 00 00             		bsr	_sp_mod
 9637 013e E7 A1 01                		mov.L	r1, 4[r10]
10744:../src/wolfcrypt/src/sp_int.c ****             if ((err == MP_OKAY) && sp_iszero(t[0])) {
 9638                             		.loc 2 10744 16
 9639 0141 ED A5 01                		mov.L	4[r10], r5
 9640 0144 61 05                   		cmp	#0, r5
 9641 0146 21 28                   		bne	.L642
 9642                             		.loc 2 10744 37 discriminator 1
 9643 0148 ED A5 09                		mov.L	36[r10], r5
 9644 014b EC 55                   		mov.L	[r5], r5
 9645                             		.loc 2 10744 34 discriminator 1
 9646 014d 61 05                   		cmp	#0, r5
 9647 014f 21 1F                   		bne	.L642
10745:../src/wolfcrypt/src/sp_int.c ****                 sp_set(r, 0);
 9648                             		.loc 2 10745 17
 9649 0151 66 02                   		mov.L	#0, r2
 9650 0153 EC 61                   		mov.L	[r6], r1
 9651 0155 05 00 00 00             		bsr	_sp_set
10746:../src/wolfcrypt/src/sp_int.c ****                 done = 1;
 9652                             		.loc 2 10746 22
 9653 0159 F9 A6 02 01             		mov.L	#1, 8[r10]
 9654 015d 2E 11                   		bra	.L642
 9655                             	.L643:
10747:../src/wolfcrypt/src/sp_int.c ****             }
10748:../src/wolfcrypt/src/sp_int.c ****         }
10749:../src/wolfcrypt/src/sp_int.c ****         else {
10750:../src/wolfcrypt/src/sp_int.c ****             err = sp_copy(b, t[0]);
 9656                             		.loc 2 10750 19
 9657 015f ED A5 09                		mov.L	36[r10], r5
 9658 0162 EF 52                   		mov.L	r5, r2
 9659 0164 ED A1 0C                		mov.L	48[r10], r1
 9660 0167 05 00 00 00             		bsr	_sp_copy
 9661 016b E7 A1 01                		mov.L	r1, 4[r10]
 9662                             		.balign 8,3,1
 9663                             	.L642:
10751:../src/wolfcrypt/src/sp_int.c ****         }
10752:../src/wolfcrypt/src/sp_int.c ****     }
10753:../src/wolfcrypt/src/sp_int.c **** 
10754:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
 9664                             		.loc 2 10754 8
 9665 016e ED A5 02                		mov.L	8[r10], r5
 9666 0171 61 05                   		cmp	#0, r5
 9667 0173 3B 7B 01                		bne	.L645
 9668                             		.loc 2 10754 17 discriminator 1
 9669 0176 ED A5 01                		mov.L	4[r10], r5
 9670 0179 61 05                   		cmp	#0, r5
 9671 017b 3B 73 01                		bne	.L645
10755:../src/wolfcrypt/src/sp_int.c ****         /* t[0] is dummy value and t[1] is result */
10756:../src/wolfcrypt/src/sp_int.c ****         err = sp_copy(t[0], t[1]);
 9672                             		.loc 2 10756 24
 9673 017e ED A5 09                		mov.L	36[r10], r5
 9674                             		.loc 2 10756 15
 9675 0181 ED A4 0A                		mov.L	40[r10], r4
 9676 0184 EF 42                   		mov.L	r4, r2
 9677 0186 EF 51                   		mov.L	r5, r1
 9678 0188 05 00 00 00             		bsr	_sp_copy
 9679 018c E7 A1 01                		mov.L	r1, 4[r10]
10757:../src/wolfcrypt/src/sp_int.c **** 
10758:../src/wolfcrypt/src/sp_int.c ****         for (i = bits - 1; (err == MP_OKAY) && (i >= 0); i--) {
 9680                             		.loc 2 10758 16
 9681 018f ED A5 0E                		mov.L	56[r10], r5
 9682 0192 60 15                   		sub	#1, r5
 9683 0194 E3 A5                   		mov.L	r5, [r10]
 9684                             		.loc 2 10758 9
 9685 0196 38 49 01                		bra	.L646
 9686                             	.L648:
10759:../src/wolfcrypt/src/sp_int.c **** #ifdef WC_NO_CACHE_RESISTANT
10760:../src/wolfcrypt/src/sp_int.c ****             /* Square real result if seen the top bit. */
10761:../src/wolfcrypt/src/sp_int.c ****             err = sp_sqrmod(t[seenTopBit], m, t[seenTopBit]);
10762:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
10763:../src/wolfcrypt/src/sp_int.c ****                 y = (e->dp[i >> SP_WORD_SHIFT] >> (i & SP_WORD_MASK)) & 1;
10764:../src/wolfcrypt/src/sp_int.c ****                 j = y & seenTopBit;
10765:../src/wolfcrypt/src/sp_int.c ****                 seenTopBit |= y;
10766:../src/wolfcrypt/src/sp_int.c ****                 /* Multiply real result if bit is set and seen the top bit. */
10767:../src/wolfcrypt/src/sp_int.c ****                 err = sp_mulmod(t[j], b, m, t[j]);
10768:../src/wolfcrypt/src/sp_int.c ****             }
10769:../src/wolfcrypt/src/sp_int.c **** #else
10770:../src/wolfcrypt/src/sp_int.c ****             /* Square real result if seen the top bit. */
10771:../src/wolfcrypt/src/sp_int.c ****             sp_copy((sp_int*)(((size_t)t[0] & sp_off_on_addr[seenTopBit^1]) +
 9687                             		.loc 2 10771 41
 9688 0199 ED A5 09                		mov.L	36[r10], r5
 9689                             		.loc 2 10771 32
 9690 019c EF 53                   		mov.L	r5, r3
 9691                             		.loc 2 10771 72
 9692 019e ED A5 03                		mov.L	12[r10], r5
 9693 01a1 FD 74 D5 01             		xor	#1, r5
 9694                             		.loc 2 10771 61
 9695 01a5 FB 42 00 00 00 00       		mov.L	#_sp_off_on_addr, r4
 9696 01ab FE 65 45                		mov.L	[r5,r4], r5
 9697                             		.loc 2 10771 45
 9698 01ae FF 44 53                		and	r5, r3, r4
10772:../src/wolfcrypt/src/sp_int.c ****                               ((size_t)t[1] & sp_off_on_addr[seenTopBit  ])),
 9699                             		.loc 2 10772 41
 9700 01b1 ED A5 0A                		mov.L	40[r10], r5
 9701                             		.loc 2 10772 32
 9702 01b4 EF 52                   		mov.L	r5, r2
 9703                             		.loc 2 10772 61
 9704 01b6 FB 52 00 00 00 00       		mov.L	#_sp_off_on_addr, r5
 9705 01bc ED A3 03                		mov.L	12[r10], r3
 9706 01bf FE 63 55                		mov.L	[r3,r5], r5
 9707                             		.loc 2 10772 45
 9708 01c2 53 25                   		and	r2, r5
10771:../src/wolfcrypt/src/sp_int.c ****                               ((size_t)t[1] & sp_off_on_addr[seenTopBit  ])),
 9709                             		.loc 2 10771 77
 9710 01c4 4B 45                   		add	r4, r5
10771:../src/wolfcrypt/src/sp_int.c ****                               ((size_t)t[1] & sp_off_on_addr[seenTopBit  ])),
 9711                             		.loc 2 10771 13
 9712 01c6 ED A4 0B                		mov.L	44[r10], r4
 9713 01c9 EF 42                   		mov.L	r4, r2
 9714 01cb EF 51                   		mov.L	r5, r1
 9715 01cd 05 00 00 00             		bsr	_sp_copy
10773:../src/wolfcrypt/src/sp_int.c ****                     t[2]);
10774:../src/wolfcrypt/src/sp_int.c ****             err = sp_sqrmod(t[2], m, t[2]);
 9716                             		.loc 2 10774 19
 9717 01d1 ED A5 0B                		mov.L	44[r10], r5
 9718 01d4 ED A4 0B                		mov.L	44[r10], r4
 9719 01d7 EF 43                   		mov.L	r4, r3
 9720 01d9 ED A2 0F                		mov.L	60[r10], r2
 9721 01dc EF 51                   		mov.L	r5, r1
 9722 01de 05 00 00 00             		bsr	_sp_sqrmod
 9723 01e2 E7 A1 01                		mov.L	r1, 4[r10]
10775:../src/wolfcrypt/src/sp_int.c ****             sp_copy(t[2],
 9724                             		.loc 2 10775 22
 9725 01e5 ED A1 0B                		mov.L	44[r10], r1
10776:../src/wolfcrypt/src/sp_int.c ****                     (sp_int*)(((size_t)t[0] & sp_off_on_addr[seenTopBit^1]) +
 9726                             		.loc 2 10776 41
 9727 01e8 ED A5 09                		mov.L	36[r10], r5
 9728                             		.loc 2 10776 32
 9729 01eb EF 53                   		mov.L	r5, r3
 9730                             		.loc 2 10776 72
 9731 01ed ED A5 03                		mov.L	12[r10], r5
 9732 01f0 FD 74 D5 01             		xor	#1, r5
 9733                             		.loc 2 10776 61
 9734 01f4 FB 42 00 00 00 00       		mov.L	#_sp_off_on_addr, r4
 9735 01fa FE 65 45                		mov.L	[r5,r4], r5
 9736                             		.loc 2 10776 45
 9737 01fd FF 44 53                		and	r5, r3, r4
10777:../src/wolfcrypt/src/sp_int.c ****                               ((size_t)t[1] & sp_off_on_addr[seenTopBit  ])));
 9738                             		.loc 2 10777 41
 9739 0200 ED A5 0A                		mov.L	40[r10], r5
 9740                             		.loc 2 10777 32
 9741 0203 EF 52                   		mov.L	r5, r2
 9742                             		.loc 2 10777 61
 9743 0205 FB 52 00 00 00 00       		mov.L	#_sp_off_on_addr, r5
 9744 020b ED A3 03                		mov.L	12[r10], r3
 9745 020e FE 63 55                		mov.L	[r3,r5], r5
 9746                             		.loc 2 10777 45
 9747 0211 53 25                   		and	r2, r5
10776:../src/wolfcrypt/src/sp_int.c ****                     (sp_int*)(((size_t)t[0] & sp_off_on_addr[seenTopBit^1]) +
 9748                             		.loc 2 10776 77
 9749 0213 4B 45                   		add	r4, r5
10775:../src/wolfcrypt/src/sp_int.c ****             sp_copy(t[2],
 9750                             		.loc 2 10775 13
 9751 0215 EF 52                   		mov.L	r5, r2
 9752 0217 05 00 00 00             		bsr	_sp_copy
10778:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 9753                             		.loc 2 10778 16
 9754 021b ED A5 01                		mov.L	4[r10], r5
 9755 021e 61 05                   		cmp	#0, r5
 9756 0220 3B B9 00                		bne	.L647
10779:../src/wolfcrypt/src/sp_int.c ****                 y = (e->dp[i >> SP_WORD_SHIFT] >> (i & SP_WORD_MASK)) & 1;
 9757                             		.loc 2 10779 30
 9758 0223 EC A5                   		mov.L	[r10], r5
 9759 0225 6A 55                   		shar	#5, r5
 9760                             		.loc 2 10779 27
 9761 0227 ED A4 0D                		mov.L	52[r10], r4
 9762 022a 62 25                   		add	#2, r5
 9763 022c FE 65 44                		mov.L	[r5,r4], r4
 9764                             		.loc 2 10779 54
 9765 022f EC A5                   		mov.L	[r10], r5
 9766 0231 75 25 1F                		and	#31, r5
 9767                             		.loc 2 10779 48
 9768 0234 EF 47                   		mov.L	r4, r7
 9769 0236 FD 60 57                		shlr	r5, r7
 9770 0239 EF 75                   		mov.L	r7, r5
 9771                             		.loc 2 10779 19
 9772 023b 64 15                   		and	#1, r5
 9773 023d E7 A5 06                		mov.L	r5, 24[r10]
10780:../src/wolfcrypt/src/sp_int.c ****                 j = y & seenTopBit;
 9774                             		.loc 2 10780 19
 9775 0240 ED A4 06                		mov.L	24[r10], r4
 9776 0243 ED A5 03                		mov.L	12[r10], r5
 9777 0246 53 45                   		and	r4, r5
 9778 0248 E7 A5 07                		mov.L	r5, 28[r10]
10781:../src/wolfcrypt/src/sp_int.c ****                 seenTopBit |= y;
 9779                             		.loc 2 10781 28
 9780 024b ED A4 03                		mov.L	12[r10], r4
 9781 024e ED A5 06                		mov.L	24[r10], r5
 9782 0251 57 45                   		or	r4, r5
 9783 0253 E7 A5 03                		mov.L	r5, 12[r10]
10782:../src/wolfcrypt/src/sp_int.c ****                 /* Multiply real result if bit is set and seen the top bit. */
10783:../src/wolfcrypt/src/sp_int.c ****                 sp_copy((sp_int*)(((size_t)t[0] & sp_off_on_addr[j^1]) +
 9784                             		.loc 2 10783 45
 9785 0256 ED A5 09                		mov.L	36[r10], r5
 9786                             		.loc 2 10783 36
 9787 0259 EF 53                   		mov.L	r5, r3
 9788                             		.loc 2 10783 67
 9789 025b ED A5 07                		mov.L	28[r10], r5
 9790 025e FD 74 D5 01             		xor	#1, r5
 9791                             		.loc 2 10783 65
 9792 0262 FB 42 00 00 00 00       		mov.L	#_sp_off_on_addr, r4
 9793 0268 FE 65 45                		mov.L	[r5,r4], r5
 9794                             		.loc 2 10783 49
 9795 026b FF 44 53                		and	r5, r3, r4
10784:../src/wolfcrypt/src/sp_int.c ****                                   ((size_t)t[1] & sp_off_on_addr[j  ])),
 9796                             		.loc 2 10784 45
 9797 026e ED A5 0A                		mov.L	40[r10], r5
 9798                             		.loc 2 10784 36
 9799 0271 EF 52                   		mov.L	r5, r2
 9800                             		.loc 2 10784 65
 9801 0273 FB 52 00 00 00 00       		mov.L	#_sp_off_on_addr, r5
 9802 0279 ED A3 07                		mov.L	28[r10], r3
 9803 027c FE 63 55                		mov.L	[r3,r5], r5
 9804                             		.loc 2 10784 49
 9805 027f 53 25                   		and	r2, r5
10783:../src/wolfcrypt/src/sp_int.c ****                                   ((size_t)t[1] & sp_off_on_addr[j  ])),
 9806                             		.loc 2 10783 72
 9807 0281 4B 45                   		add	r4, r5
10783:../src/wolfcrypt/src/sp_int.c ****                                   ((size_t)t[1] & sp_off_on_addr[j  ])),
 9808                             		.loc 2 10783 17
 9809 0283 ED A4 0B                		mov.L	44[r10], r4
 9810 0286 EF 42                   		mov.L	r4, r2
 9811 0288 EF 51                   		mov.L	r5, r1
 9812 028a 05 00 00 00             		bsr	_sp_copy
10785:../src/wolfcrypt/src/sp_int.c ****                         t[2]);
10786:../src/wolfcrypt/src/sp_int.c ****                 err = sp_mulmod(t[2], b, m, t[2]);
 9813                             		.loc 2 10786 23
 9814 028e ED A5 0B                		mov.L	44[r10], r5
 9815 0291 ED A4 0B                		mov.L	44[r10], r4
 9816 0294 ED A3 0F                		mov.L	60[r10], r3
 9817 0297 ED A2 0C                		mov.L	48[r10], r2
 9818 029a EF 51                   		mov.L	r5, r1
 9819 029c 05 00 00 00             		bsr	_sp_mulmod
 9820 02a0 E7 A1 01                		mov.L	r1, 4[r10]
10787:../src/wolfcrypt/src/sp_int.c ****                 sp_copy(t[2],
 9821                             		.loc 2 10787 26
 9822 02a3 ED A1 0B                		mov.L	44[r10], r1
10788:../src/wolfcrypt/src/sp_int.c ****                         (sp_int*)(((size_t)t[0] & sp_off_on_addr[j^1]) +
 9823                             		.loc 2 10788 45
 9824 02a6 ED A5 09                		mov.L	36[r10], r5
 9825                             		.loc 2 10788 36
 9826 02a9 EF 53                   		mov.L	r5, r3
 9827                             		.loc 2 10788 67
 9828 02ab ED A5 07                		mov.L	28[r10], r5
 9829 02ae FD 74 D5 01             		xor	#1, r5
 9830                             		.loc 2 10788 65
 9831 02b2 FB 42 00 00 00 00       		mov.L	#_sp_off_on_addr, r4
 9832 02b8 FE 65 45                		mov.L	[r5,r4], r5
 9833                             		.loc 2 10788 49
 9834 02bb FF 44 53                		and	r5, r3, r4
10789:../src/wolfcrypt/src/sp_int.c ****                                   ((size_t)t[1] & sp_off_on_addr[j  ])));
 9835                             		.loc 2 10789 45
 9836 02be ED A5 0A                		mov.L	40[r10], r5
 9837                             		.loc 2 10789 36
 9838 02c1 EF 52                   		mov.L	r5, r2
 9839                             		.loc 2 10789 65
 9840 02c3 FB 52 00 00 00 00       		mov.L	#_sp_off_on_addr, r5
 9841 02c9 ED A3 07                		mov.L	28[r10], r3
 9842 02cc FE 63 55                		mov.L	[r3,r5], r5
 9843                             		.loc 2 10789 49
 9844 02cf 53 25                   		and	r2, r5
10788:../src/wolfcrypt/src/sp_int.c ****                         (sp_int*)(((size_t)t[0] & sp_off_on_addr[j^1]) +
 9845                             		.loc 2 10788 72
 9846 02d1 4B 45                   		add	r4, r5
10787:../src/wolfcrypt/src/sp_int.c ****                 sp_copy(t[2],
 9847                             		.loc 2 10787 17
 9848 02d3 EF 52                   		mov.L	r5, r2
 9849 02d5 05 00 00 00             		bsr	_sp_copy
 9850                             	.L647:
10758:../src/wolfcrypt/src/sp_int.c **** #ifdef WC_NO_CACHE_RESISTANT
 9851                             		.loc 2 10758 59 discriminator 2
 9852 02d9 EC A5                   		mov.L	[r10], r5
 9853 02db 60 15                   		sub	#1, r5
 9854 02dd E3 A5                   		mov.L	r5, [r10]
 9855                             	.L646:
10758:../src/wolfcrypt/src/sp_int.c **** #ifdef WC_NO_CACHE_RESISTANT
 9856                             		.loc 2 10758 9 discriminator 1
 9857 02df ED A5 01                		mov.L	4[r10], r5
 9858 02e2 61 05                   		cmp	#0, r5
 9859 02e4 1A                      		bne	.L645
10758:../src/wolfcrypt/src/sp_int.c **** #ifdef WC_NO_CACHE_RESISTANT
 9860                             		.loc 2 10758 45 discriminator 3
 9861 02e5 EC A5                   		mov.L	[r10], r5
 9862 02e7 61 05                   		cmp	#0, r5
 9863 02e9 29 05 38 AE FE          		bge	.L648
 9864                             		.balign 8,3,1
 9865                             	.L645:
10790:../src/wolfcrypt/src/sp_int.c ****             }
10791:../src/wolfcrypt/src/sp_int.c **** #endif
10792:../src/wolfcrypt/src/sp_int.c ****         }
10793:../src/wolfcrypt/src/sp_int.c ****     }
10794:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
 9866                             		.loc 2 10794 8
 9867 02ee ED A5 02                		mov.L	8[r10], r5
 9868 02f1 61 05                   		cmp	#0, r5
 9869 02f3 21 17                   		bne	.L649
 9870                             		.loc 2 10794 17 discriminator 1
 9871 02f5 ED A5 01                		mov.L	4[r10], r5
 9872 02f8 61 05                   		cmp	#0, r5
 9873 02fa 21 10                   		bne	.L649
10795:../src/wolfcrypt/src/sp_int.c ****         err = sp_copy(t[1], r);
 9874                             		.loc 2 10795 24
 9875 02fc ED A5 0A                		mov.L	40[r10], r5
 9876                             		.loc 2 10795 15
 9877 02ff EC 62                   		mov.L	[r6], r2
 9878 0301 EF 51                   		mov.L	r5, r1
 9879 0303 05 00 00 00             		bsr	_sp_copy
 9880 0307 E7 A1 01                		mov.L	r1, 4[r10]
 9881                             	.L649:
10796:../src/wolfcrypt/src/sp_int.c ****     }
10797:../src/wolfcrypt/src/sp_int.c **** 
10798:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
 9882                             		.loc 2 10798 5
 9883 030a ED A5 04                		mov.L	16[r10], r5
 9884 030d 61 05                   		cmp	#0, r5
 9885 030f 20 15                   		beq	.L650
 9886                             	.LBB62:
 9887                             		.loc 2 10798 5 is_stmt 0 discriminator 1
 9888 0311 ED A5 04                		mov.L	16[r10], r5
 9889 0314 E7 A5 08                		mov.L	r5, 32[r10]
 9890 0317 ED A5 08                		mov.L	32[r10], r5
 9891 031a 61 05                   		cmp	#0, r5
 9892 031c 10                      		beq	.L650
 9893                             		.loc 2 10798 5 discriminator 2
 9894 031d ED A1 08                		mov.L	32[r10], r1
 9895 0320 05 00 00 00             		bsr	_wolfSSL_Free
 9896                             	.L650:
 9897                             	.LBE62:
10799:../src/wolfcrypt/src/sp_int.c ****     return err;
 9898                             		.loc 2 10799 12 is_stmt 1
 9899 0324 ED A5 01                		mov.L	4[r10], r5
10800:../src/wolfcrypt/src/sp_int.c **** }
 9900                             		.loc 2 10800 1
 9901 0327 EF 51                   		mov.L	r5, r1
 9902 0329 3F 6A 16                		rtsd	#88, r6-r10
 9903                             	.LFE102:
 9905 032c 76 10 01 00             		.section	.text._sp_exptmod_mont_ex,"ax",@progbits
 9907                             	__sp_exptmod_mont_ex:
 9908                             	.LFB103:
10801:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY) ||
10802:../src/wolfcrypt/src/sp_int.c ****         * WOLFSSL_HAVE_SP_DH */
10803:../src/wolfcrypt/src/sp_int.c **** 
10804:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && ((!defined(WOLFSSL_RSA_VERIFY_ONLY) && \
10805:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_RSA_PUBLIC_ONLY)) || !defined(NO_DH))
10806:../src/wolfcrypt/src/sp_int.c **** #ifndef WC_NO_HARDEN
10807:../src/wolfcrypt/src/sp_int.c **** #if !defined(WC_NO_CACHE_RESISTANT)
10808:../src/wolfcrypt/src/sp_int.c **** /* Internal. Exponentiates b to the power of e modulo m into r: r = b ^ e mod m
10809:../src/wolfcrypt/src/sp_int.c ****  * Process the exponent one bit at a time with base in montgomery form.
10810:../src/wolfcrypt/src/sp_int.c ****  * Is constant time and cache attack resistant.
10811:../src/wolfcrypt/src/sp_int.c ****  *
10812:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b     SP integer that is the base.
10813:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e     SP integer that is the exponent.
10814:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   bits  Number of bits in base to use. May be greater than
10815:../src/wolfcrypt/src/sp_int.c ****  *                      count of bits in b.
10816:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m     SP integer that is the modulus.
10817:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r     SP integer to hold result.
10818:../src/wolfcrypt/src/sp_int.c ****  *
10819:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
10820:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
10821:../src/wolfcrypt/src/sp_int.c ****  */
10822:../src/wolfcrypt/src/sp_int.c **** static int _sp_exptmod_mont_ex(sp_int* b, sp_int* e, int bits, sp_int* m,
10823:../src/wolfcrypt/src/sp_int.c ****                                sp_int* r)
10824:../src/wolfcrypt/src/sp_int.c **** {
 9909                             		.loc 2 10824 1
 9910 0000 6E 6A                   		pushm	r6-r10
 9911                             	.LCFI128:
 9912 0002 71 0A B4                		add	#-76, r0, r10
 9913                             	.LCFI129:
 9914 0005 EF A0                   		mov.L	r10, r0
 9915 0007 75 46 64                		mov.L	#0x64, r6
 9916 000a 4B A6                   		add	r10, r6
 9917 000c E7 A1 0E                		mov.L	r1, 56[r10]
 9918 000f E7 A2 0F                		mov.L	r2, 60[r10]
 9919 0012 E7 A3 10                		mov.L	r3, 64[r10]
 9920 0015 E7 A4 11                		mov.L	r4, 68[r10]
10825:../src/wolfcrypt/src/sp_int.c ****     int i;
10826:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 9921                             		.loc 2 10826 9
 9922 0018 F9 A6 01 00             		mov.L	#0, 4[r10]
10827:../src/wolfcrypt/src/sp_int.c ****     int done = 0;
 9923                             		.loc 2 10827 9
 9924 001c F9 A6 02 00             		mov.L	#0, 8[r10]
10828:../src/wolfcrypt/src/sp_int.c ****     int j;
10829:../src/wolfcrypt/src/sp_int.c ****     int y;
10830:../src/wolfcrypt/src/sp_int.c ****     int seenTopBit = 0;
 9925                             		.loc 2 10830 9
 9926 0020 F9 A6 03 00             		mov.L	#0, 12[r10]
10831:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit mp;
10832:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, m->used * 2 + 1, 4);
 9927                             		.loc 2 10832 5
 9928 0024 F9 A6 04 00             		mov.L	#0, 16[r10]
 9929 0028 71 A5 28                		add	#40, r10, r5
 9930 002b EF 51                   		mov.L	r5, r1
 9931 002d 75 43 10                		mov.L	#16, r3
 9932 0030 66 02                   		mov	#0, r2
 9933 0032 7F 88                   		sstr.b
10833:../src/wolfcrypt/src/sp_int.c **** 
10834:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, m->used * 2 + 1, 4, err, NULL);
 9934                             		.loc 2 10834 5
 9935 0034 ED A5 01                		mov.L	4[r10], r5
 9936 0037 61 05                   		cmp	#0, r5
 9937 0039 3B A1 00                		bne	.L653
 9938                             		.loc 2 10834 5 is_stmt 0 discriminator 1
 9939 003c ED A5 11                		mov.L	68[r10], r5
 9940 003f EC 55                   		mov.L	[r5], r5
 9941 0041 4B 55                   		add	r5, r5
 9942 0043 75 05 FF                		cmp	#-1, r5
 9943 0046 20 0D                   		beq	.L654
 9944                             		.loc 2 10834 5 discriminator 2
 9945 0048 ED A5 11                		mov.L	68[r10], r5
 9946 004b EC 55                   		mov.L	[r5], r5
 9947 004d 6C 55                   		shll	#5, r5
 9948 004f 71 55 30                		add	#48, r5
 9949 0052 0C                      		bra	.L655
 9950                             	.L654:
 9951                             		.loc 2 10834 5 discriminator 3
 9952 0053 75 45 30                		mov.L	#48, r5
 9953                             	.L655:
 9954                             		.loc 2 10834 5 discriminator 5
 9955 0056 EF 51                   		mov.L	r5, r1
 9956 0058 05 00 00 00             		bsr	_wolfSSL_Malloc
 9957 005c E7 A1 04                		mov.L	r1, 16[r10]
 9958 005f ED A5 04                		mov.L	16[r10], r5
 9959 0062 61 05                   		cmp	#0, r5
 9960 0064 1F                      		bne	.L656
 9961                             		.loc 2 10834 5 discriminator 6
 9962 0065 F9 A6 01 FE             		mov.L	#-2, 4[r10]
 9963 0069 2E 71                   		bra	.L653
 9964                             	.L656:
 9965                             	.LBB63:
 9966                             		.loc 2 10834 5 discriminator 7
 9967 006b ED A5 04                		mov.L	16[r10], r5
 9968 006e E7 A5 0A                		mov.L	r5, 40[r10]
 9969 0071 ED A5 11                		mov.L	68[r10], r5
 9970 0074 EC 55                   		mov.L	[r5], r5
 9971 0076 4B 55                   		add	r5, r5
 9972 0078 EF 54                   		mov.L	r5, r4
 9973 007a ED A5 0A                		mov.L	40[r10], r5
 9974 007d 62 14                   		add	#1, r4
 9975 007f A0 5C                   		mov.L	r4, 4[r5]
 9976 0081 F9 A6 05 01             		mov.L	#1, 20[r10]
 9977 0085 2E 4E                   		bra	.L657
 9978                             	.L660:
 9979                             		.loc 2 10834 5 discriminator 14
 9980 0087 ED A5 05                		mov.L	20[r10], r5
 9981 008a 60 15                   		sub	#1, r5
 9982 008c 6C 25                   		shll	#2, r5
 9983 008e 4B A5                   		add	r10, r5
 9984 0090 AA D4                   		mov.L	40[r5], r4
 9985 0092 ED A5 11                		mov.L	68[r10], r5
 9986 0095 EC 55                   		mov.L	[r5], r5
 9987 0097 4B 55                   		add	r5, r5
 9988 0099 75 05 FF                		cmp	#-1, r5
 9989 009c 20 0C                   		beq	.L658
 9990                             		.loc 2 10834 5 discriminator 9
 9991 009e ED A5 11                		mov.L	68[r10], r5
 9992 00a1 EC 55                   		mov.L	[r5], r5
 9993 00a3 6C 35                   		shll	#3, r5
 9994 00a5 62 C5                   		add	#12, r5
 9995 00a7 0B                      		bra	.L659
 9996                             	.L658:
 9997                             		.loc 2 10834 5 discriminator 10
 9998 00a8 66 C5                   		mov.L	#12, r5
 9999                             	.L659:
 10000                             		.loc 2 10834 5 discriminator 12
 10001 00aa 4B 54                   		add	r5, r4
 10002 00ac ED A5 05                		mov.L	20[r10], r5
 10003 00af 6C 25                   		shll	#2, r5
 10004 00b1 4B A5                   		add	r10, r5
 10005 00b3 A2 D4                   		mov.L	r4, 40[r5]
 10006 00b5 ED A5 11                		mov.L	68[r10], r5
 10007 00b8 EC 55                   		mov.L	[r5], r5
 10008 00ba 4B 55                   		add	r5, r5
 10009 00bc EF 54                   		mov.L	r5, r4
 10010 00be ED A5 05                		mov.L	20[r10], r5
 10011 00c1 6C 25                   		shll	#2, r5
 10012 00c3 4B A5                   		add	r10, r5
 10013 00c5 AA D5                   		mov.L	40[r5], r5
 10014 00c7 62 14                   		add	#1, r4
 10015 00c9 A0 5C                   		mov.L	r4, 4[r5]
 10016 00cb ED A5 05                		mov.L	20[r10], r5
 10017 00ce 62 15                   		add	#1, r5
 10018 00d0 E7 A5 05                		mov.L	r5, 20[r10]
 10019                             	.L657:
 10020                             		.loc 2 10834 5 discriminator 13
 10021 00d3 ED A5 05                		mov.L	20[r10], r5
 10022 00d6 61 35                   		cmp	#3, r5
 10023 00d8 2B AF                   		ble	.L660
 10024                             	.L653:
 10025                             	.LBE63:
10835:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 10026                             		.loc 2 10835 8 is_stmt 1
 10027 00da ED A5 01                		mov.L	4[r10], r5
 10028 00dd 61 05                   		cmp	#0, r5
 10029 00df 3B A3 00                		bne	.L661
10836:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t[0], m->used * 2 + 1);
 10030                             		.loc 2 10836 9
 10031 00e2 ED A4 0A                		mov.L	40[r10], r4
 10032                             		.loc 2 10836 29
 10033 00e5 ED A5 11                		mov.L	68[r10], r5
 10034 00e8 EC 55                   		mov.L	[r5], r5
 10035                             		.loc 2 10836 36
 10036 00ea 4B 55                   		add	r5, r5
 10037                             		.loc 2 10836 9
 10038 00ec 62 15                   		add	#1, r5
 10039 00ee EF 52                   		mov.L	r5, r2
 10040 00f0 EF 41                   		mov.L	r4, r1
 10041 00f2 05 00 00 00             		bsr	_sp_init_size
10837:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t[1], m->used * 2 + 1);
 10042                             		.loc 2 10837 9
 10043 00f6 ED A4 0B                		mov.L	44[r10], r4
 10044                             		.loc 2 10837 29
 10045 00f9 ED A5 11                		mov.L	68[r10], r5
 10046 00fc EC 55                   		mov.L	[r5], r5
 10047                             		.loc 2 10837 36
 10048 00fe 4B 55                   		add	r5, r5
 10049                             		.loc 2 10837 9
 10050 0100 62 15                   		add	#1, r5
 10051 0102 EF 52                   		mov.L	r5, r2
 10052 0104 EF 41                   		mov.L	r4, r1
 10053 0106 05 00 00 00             		bsr	_sp_init_size
10838:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t[2], m->used * 2 + 1);
 10054                             		.loc 2 10838 9
 10055 010a ED A4 0C                		mov.L	48[r10], r4
 10056                             		.loc 2 10838 29
 10057 010d ED A5 11                		mov.L	68[r10], r5
 10058 0110 EC 55                   		mov.L	[r5], r5
 10059                             		.loc 2 10838 36
 10060 0112 4B 55                   		add	r5, r5
 10061                             		.loc 2 10838 9
 10062 0114 62 15                   		add	#1, r5
 10063 0116 EF 52                   		mov.L	r5, r2
 10064 0118 EF 41                   		mov.L	r4, r1
 10065 011a 05 00 00 00             		bsr	_sp_init_size
10839:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t[3], m->used * 2 + 1);
 10066                             		.loc 2 10839 9
 10067 011e ED A4 0D                		mov.L	52[r10], r4
 10068                             		.loc 2 10839 29
 10069 0121 ED A5 11                		mov.L	68[r10], r5
 10070 0124 EC 55                   		mov.L	[r5], r5
 10071                             		.loc 2 10839 36
 10072 0126 4B 55                   		add	r5, r5
 10073                             		.loc 2 10839 9
 10074 0128 62 15                   		add	#1, r5
 10075 012a EF 52                   		mov.L	r5, r2
 10076 012c EF 41                   		mov.L	r4, r1
 10077 012e 05 00 00 00             		bsr	_sp_init_size
10840:../src/wolfcrypt/src/sp_int.c **** 
10841:../src/wolfcrypt/src/sp_int.c ****         /* Ensure base is less than exponent. */
10842:../src/wolfcrypt/src/sp_int.c ****         if (_sp_cmp_abs(b, m) != MP_LT) {
 10078                             		.loc 2 10842 13
 10079 0132 ED A2 11                		mov.L	68[r10], r2
 10080 0135 ED A1 0E                		mov.L	56[r10], r1
 10081 0138 05 00 00 00             		bsr	__sp_cmp_abs
 10082 013c EF 15                   		mov.L	r1, r5
 10083                             		.loc 2 10842 12
 10084 013e 75 05 FF                		cmp	#-1, r5
 10085 0141 20 32                   		beq	.L662
10843:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod(b, m, t[0]);
 10086                             		.loc 2 10843 19
 10087 0143 ED A5 0A                		mov.L	40[r10], r5
 10088 0146 EF 53                   		mov.L	r5, r3
 10089 0148 ED A2 11                		mov.L	68[r10], r2
 10090 014b ED A1 0E                		mov.L	56[r10], r1
 10091 014e 05 00 00 00             		bsr	_sp_mod
 10092 0152 E7 A1 01                		mov.L	r1, 4[r10]
10844:../src/wolfcrypt/src/sp_int.c ****             if ((err == MP_OKAY) && sp_iszero(t[0])) {
 10093                             		.loc 2 10844 16
 10094 0155 ED A5 01                		mov.L	4[r10], r5
 10095 0158 61 05                   		cmp	#0, r5
 10096 015a 21 28                   		bne	.L661
 10097                             		.loc 2 10844 37 discriminator 1
 10098 015c ED A5 0A                		mov.L	40[r10], r5
 10099 015f EC 55                   		mov.L	[r5], r5
 10100                             		.loc 2 10844 34 discriminator 1
 10101 0161 61 05                   		cmp	#0, r5
 10102 0163 21 1F                   		bne	.L661
10845:../src/wolfcrypt/src/sp_int.c ****                 sp_set(r, 0);
 10103                             		.loc 2 10845 17
 10104 0165 66 02                   		mov.L	#0, r2
 10105 0167 EC 61                   		mov.L	[r6], r1
 10106 0169 05 00 00 00             		bsr	_sp_set
10846:../src/wolfcrypt/src/sp_int.c ****                 done = 1;
 10107                             		.loc 2 10846 22
 10108 016d F9 A6 02 01             		mov.L	#1, 8[r10]
 10109 0171 2E 11                   		bra	.L661
 10110                             	.L662:
10847:../src/wolfcrypt/src/sp_int.c ****             }
10848:../src/wolfcrypt/src/sp_int.c ****         }
10849:../src/wolfcrypt/src/sp_int.c ****         else {
10850:../src/wolfcrypt/src/sp_int.c ****             err = sp_copy(b, t[0]);
 10111                             		.loc 2 10850 19
 10112 0173 ED A5 0A                		mov.L	40[r10], r5
 10113 0176 EF 52                   		mov.L	r5, r2
 10114 0178 ED A1 0E                		mov.L	56[r10], r1
 10115 017b 05 00 00 00             		bsr	_sp_copy
 10116 017f E7 A1 01                		mov.L	r1, 4[r10]
 10117                             		.balign 8,3,1
 10118                             	.L661:
10851:../src/wolfcrypt/src/sp_int.c ****         }
10852:../src/wolfcrypt/src/sp_int.c ****     }
10853:../src/wolfcrypt/src/sp_int.c **** 
10854:../src/wolfcrypt/src/sp_int.c **** 
10855:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
 10119                             		.loc 2 10855 8
 10120 0182 ED A5 02                		mov.L	8[r10], r5
 10121 0185 61 05                   		cmp	#0, r5
 10122 0187 3B 1B 02                		bne	.L664
 10123                             		.loc 2 10855 17 discriminator 1
 10124 018a ED A5 01                		mov.L	4[r10], r5
 10125 018d 61 05                   		cmp	#0, r5
 10126 018f 3B 13 02                		bne	.L664
10856:../src/wolfcrypt/src/sp_int.c ****         err = sp_mont_setup(m, &mp);
 10127                             		.loc 2 10856 15
 10128 0192 71 A5 24                		add	#36, r10, r5
 10129 0195 EF 52                   		mov.L	r5, r2
 10130 0197 ED A1 11                		mov.L	68[r10], r1
 10131 019a 05 00 00 00             		bsr	_sp_mont_setup
 10132 019e E7 A1 01                		mov.L	r1, 4[r10]
10857:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 10133                             		.loc 2 10857 12
 10134 01a1 ED A5 01                		mov.L	4[r10], r5
 10135 01a4 61 05                   		cmp	#0, r5
 10136 01a6 21 11                   		bne	.L665
10858:../src/wolfcrypt/src/sp_int.c ****             err = sp_mont_norm(t[1], m);
 10137                             		.loc 2 10858 19
 10138 01a8 ED A5 0B                		mov.L	44[r10], r5
 10139 01ab ED A2 11                		mov.L	68[r10], r2
 10140 01ae EF 51                   		mov.L	r5, r1
 10141 01b0 05 00 00 00             		bsr	_sp_mont_norm
 10142 01b4 E7 A1 01                		mov.L	r1, 4[r10]
 10143                             	.L665:
10859:../src/wolfcrypt/src/sp_int.c ****         }
10860:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 10144                             		.loc 2 10860 12
 10145 01b7 ED A5 01                		mov.L	4[r10], r5
 10146 01ba 61 05                   		cmp	#0, r5
 10147 01bc 21 17                   		bne	.L666
10861:../src/wolfcrypt/src/sp_int.c ****             /* Convert to montgomery form. */
10862:../src/wolfcrypt/src/sp_int.c ****             err = sp_mulmod(t[0], t[1], m, t[0]);
 10148                             		.loc 2 10862 19
 10149 01be ED A5 0A                		mov.L	40[r10], r5
 10150 01c1 ED A2 0B                		mov.L	44[r10], r2
 10151 01c4 ED A4 0A                		mov.L	40[r10], r4
 10152 01c7 ED A3 11                		mov.L	68[r10], r3
 10153 01ca EF 51                   		mov.L	r5, r1
 10154 01cc 05 00 00 00             		bsr	_sp_mulmod
 10155 01d0 E7 A1 01                		mov.L	r1, 4[r10]
 10156                             	.L666:
10863:../src/wolfcrypt/src/sp_int.c ****         }
10864:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 10157                             		.loc 2 10864 12
 10158 01d3 ED A5 01                		mov.L	4[r10], r5
 10159 01d6 61 05                   		cmp	#0, r5
 10160 01d8 21 1E                   		bne	.L667
10865:../src/wolfcrypt/src/sp_int.c ****             /* t[0] is fake working value and t[1] is real working value. */
10866:../src/wolfcrypt/src/sp_int.c ****             sp_copy(t[0], t[1]);
 10161                             		.loc 2 10866 22
 10162 01da ED A5 0A                		mov.L	40[r10], r5
 10163                             		.loc 2 10866 13
 10164 01dd ED A4 0B                		mov.L	44[r10], r4
 10165 01e0 EF 42                   		mov.L	r4, r2
 10166 01e2 EF 51                   		mov.L	r5, r1
 10167 01e4 05 00 00 00             		bsr	_sp_copy
10867:../src/wolfcrypt/src/sp_int.c ****             /* Montgomert form of base to multiply by. */
10868:../src/wolfcrypt/src/sp_int.c ****             sp_copy(t[0], t[2]);
 10168                             		.loc 2 10868 22
 10169 01e8 ED A5 0A                		mov.L	40[r10], r5
 10170                             		.loc 2 10868 13
 10171 01eb ED A4 0C                		mov.L	48[r10], r4
 10172 01ee EF 42                   		mov.L	r4, r2
 10173 01f0 EF 51                   		mov.L	r5, r1
 10174 01f2 05 00 00 00             		bsr	_sp_copy
 10175                             	.L667:
10869:../src/wolfcrypt/src/sp_int.c ****         }
10870:../src/wolfcrypt/src/sp_int.c **** 
10871:../src/wolfcrypt/src/sp_int.c ****         for (i = bits - 1; (err == MP_OKAY) && (i >= 0); i--) {
 10176                             		.loc 2 10871 16
 10177 01f6 ED A5 10                		mov.L	64[r10], r5
 10178 01f9 60 15                   		sub	#1, r5
 10179 01fb E3 A5                   		mov.L	r5, [r10]
 10180                             		.loc 2 10871 9
 10181 01fd 38 7B 01                		bra	.L668
 10182                             	.L673:
10872:../src/wolfcrypt/src/sp_int.c ****             /* Square real working value if seen the top bit. */
10873:../src/wolfcrypt/src/sp_int.c ****             sp_copy((sp_int*)(((size_t)t[0] & sp_off_on_addr[seenTopBit^1]) +
 10183                             		.loc 2 10873 41
 10184 0200 ED A5 0A                		mov.L	40[r10], r5
 10185                             		.loc 2 10873 32
 10186 0203 EF 53                   		mov.L	r5, r3
 10187                             		.loc 2 10873 72
 10188 0205 ED A5 03                		mov.L	12[r10], r5
 10189 0208 FD 74 D5 01             		xor	#1, r5
 10190                             		.loc 2 10873 61
 10191 020c FB 42 00 00 00 00       		mov.L	#_sp_off_on_addr, r4
 10192 0212 FE 65 45                		mov.L	[r5,r4], r5
 10193                             		.loc 2 10873 45
 10194 0215 FF 44 53                		and	r5, r3, r4
10874:../src/wolfcrypt/src/sp_int.c ****                               ((size_t)t[1] & sp_off_on_addr[seenTopBit  ])),
 10195                             		.loc 2 10874 41
 10196 0218 ED A5 0B                		mov.L	44[r10], r5
 10197                             		.loc 2 10874 32
 10198 021b EF 52                   		mov.L	r5, r2
 10199                             		.loc 2 10874 61
 10200 021d FB 52 00 00 00 00       		mov.L	#_sp_off_on_addr, r5
 10201 0223 ED A3 03                		mov.L	12[r10], r3
 10202 0226 FE 63 55                		mov.L	[r3,r5], r5
 10203                             		.loc 2 10874 45
 10204 0229 53 25                   		and	r2, r5
10873:../src/wolfcrypt/src/sp_int.c ****                               ((size_t)t[1] & sp_off_on_addr[seenTopBit  ])),
 10205                             		.loc 2 10873 77
 10206 022b 4B 45                   		add	r4, r5
10873:../src/wolfcrypt/src/sp_int.c ****                               ((size_t)t[1] & sp_off_on_addr[seenTopBit  ])),
 10207                             		.loc 2 10873 13
 10208 022d ED A4 0D                		mov.L	52[r10], r4
 10209 0230 EF 42                   		mov.L	r4, r2
 10210 0232 EF 51                   		mov.L	r5, r1
 10211 0234 05 00 00 00             		bsr	_sp_copy
10875:../src/wolfcrypt/src/sp_int.c ****                     t[3]);
10876:../src/wolfcrypt/src/sp_int.c ****             err = sp_sqr(t[3], t[3]);
 10212                             		.loc 2 10876 19
 10213 0238 ED A5 0D                		mov.L	52[r10], r5
 10214 023b ED A4 0D                		mov.L	52[r10], r4
 10215 023e EF 42                   		mov.L	r4, r2
 10216 0240 EF 51                   		mov.L	r5, r1
 10217 0242 05 00 00 00             		bsr	_sp_sqr
 10218 0246 E7 A1 01                		mov.L	r1, 4[r10]
10877:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 10219                             		.loc 2 10877 16
 10220 0249 ED A5 01                		mov.L	4[r10], r5
 10221 024c 61 05                   		cmp	#0, r5
 10222 024e 21 16                   		bne	.L669
10878:../src/wolfcrypt/src/sp_int.c ****                 err = _sp_mont_red(t[3], m, mp);
 10223                             		.loc 2 10878 23
 10224 0250 ED A5 0D                		mov.L	52[r10], r5
 10225 0253 ED A4 09                		mov.L	36[r10], r4
 10226 0256 EF 43                   		mov.L	r4, r3
 10227 0258 ED A2 11                		mov.L	68[r10], r2
 10228 025b EF 51                   		mov.L	r5, r1
 10229 025d 05 00 00 00             		bsr	__sp_mont_red
 10230 0261 E7 A1 01                		mov.L	r1, 4[r10]
 10231                             	.L669:
10879:../src/wolfcrypt/src/sp_int.c ****             }
10880:../src/wolfcrypt/src/sp_int.c ****             sp_copy(t[3],
 10232                             		.loc 2 10880 22
 10233 0264 ED A1 0D                		mov.L	52[r10], r1
10881:../src/wolfcrypt/src/sp_int.c ****                     (sp_int*)(((size_t)t[0] & sp_off_on_addr[seenTopBit^1]) +
 10234                             		.loc 2 10881 41
 10235 0267 ED A5 0A                		mov.L	40[r10], r5
 10236                             		.loc 2 10881 32
 10237 026a EF 53                   		mov.L	r5, r3
 10238                             		.loc 2 10881 72
 10239 026c ED A5 03                		mov.L	12[r10], r5
 10240 026f FD 74 D5 01             		xor	#1, r5
 10241                             		.loc 2 10881 61
 10242 0273 FB 42 00 00 00 00       		mov.L	#_sp_off_on_addr, r4
 10243 0279 FE 65 45                		mov.L	[r5,r4], r5
 10244                             		.loc 2 10881 45
 10245 027c FF 44 53                		and	r5, r3, r4
10882:../src/wolfcrypt/src/sp_int.c ****                               ((size_t)t[1] & sp_off_on_addr[seenTopBit  ])));
 10246                             		.loc 2 10882 41
 10247 027f ED A5 0B                		mov.L	44[r10], r5
 10248                             		.loc 2 10882 32
 10249 0282 EF 52                   		mov.L	r5, r2
 10250                             		.loc 2 10882 61
 10251 0284 FB 52 00 00 00 00       		mov.L	#_sp_off_on_addr, r5
 10252 028a ED A3 03                		mov.L	12[r10], r3
 10253 028d FE 63 55                		mov.L	[r3,r5], r5
 10254                             		.loc 2 10882 45
 10255 0290 53 25                   		and	r2, r5
10881:../src/wolfcrypt/src/sp_int.c ****                     (sp_int*)(((size_t)t[0] & sp_off_on_addr[seenTopBit^1]) +
 10256                             		.loc 2 10881 77
 10257 0292 4B 45                   		add	r4, r5
10880:../src/wolfcrypt/src/sp_int.c ****                     (sp_int*)(((size_t)t[0] & sp_off_on_addr[seenTopBit^1]) +
 10258                             		.loc 2 10880 13
 10259 0294 EF 52                   		mov.L	r5, r2
 10260 0296 05 00 00 00             		bsr	_sp_copy
10883:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 10261                             		.loc 2 10883 16
 10262 029a ED A5 01                		mov.L	4[r10], r5
 10263 029d 61 05                   		cmp	#0, r5
 10264 029f 3B D3 00                		bne	.L670
10884:../src/wolfcrypt/src/sp_int.c ****                 y = (e->dp[i >> SP_WORD_SHIFT] >> (i & SP_WORD_MASK)) & 1;
 10265                             		.loc 2 10884 30
 10266 02a2 EC A5                   		mov.L	[r10], r5
 10267 02a4 6A 55                   		shar	#5, r5
 10268                             		.loc 2 10884 27
 10269 02a6 ED A4 0F                		mov.L	60[r10], r4
 10270 02a9 62 25                   		add	#2, r5
 10271 02ab FE 65 44                		mov.L	[r5,r4], r4
 10272                             		.loc 2 10884 54
 10273 02ae EC A5                   		mov.L	[r10], r5
 10274 02b0 75 25 1F                		and	#31, r5
 10275                             		.loc 2 10884 48
 10276 02b3 EF 47                   		mov.L	r4, r7
 10277 02b5 FD 60 57                		shlr	r5, r7
 10278 02b8 EF 75                   		mov.L	r7, r5
 10279                             		.loc 2 10884 19
 10280 02ba 64 15                   		and	#1, r5
 10281 02bc E7 A5 06                		mov.L	r5, 24[r10]
10885:../src/wolfcrypt/src/sp_int.c ****                 j = y & seenTopBit;
 10282                             		.loc 2 10885 19
 10283 02bf ED A4 06                		mov.L	24[r10], r4
 10284 02c2 ED A5 03                		mov.L	12[r10], r5
 10285 02c5 53 45                   		and	r4, r5
 10286 02c7 E7 A5 07                		mov.L	r5, 28[r10]
10886:../src/wolfcrypt/src/sp_int.c ****                 seenTopBit |= y;
 10287                             		.loc 2 10886 28
 10288 02ca ED A4 03                		mov.L	12[r10], r4
 10289 02cd ED A5 06                		mov.L	24[r10], r5
 10290 02d0 57 45                   		or	r4, r5
 10291 02d2 E7 A5 03                		mov.L	r5, 12[r10]
10887:../src/wolfcrypt/src/sp_int.c ****                 /* Multiply real value if bit is set and seen the top bit. */
10888:../src/wolfcrypt/src/sp_int.c ****                 sp_copy((sp_int*)(((size_t)t[0] & sp_off_on_addr[j^1]) +
 10292                             		.loc 2 10888 45
 10293 02d5 ED A5 0A                		mov.L	40[r10], r5
 10294                             		.loc 2 10888 36
 10295 02d8 EF 53                   		mov.L	r5, r3
 10296                             		.loc 2 10888 67
 10297 02da ED A5 07                		mov.L	28[r10], r5
 10298 02dd FD 74 D5 01             		xor	#1, r5
 10299                             		.loc 2 10888 65
 10300 02e1 FB 42 00 00 00 00       		mov.L	#_sp_off_on_addr, r4
 10301 02e7 FE 65 45                		mov.L	[r5,r4], r5
 10302                             		.loc 2 10888 49
 10303 02ea FF 44 53                		and	r5, r3, r4
10889:../src/wolfcrypt/src/sp_int.c ****                                   ((size_t)t[1] & sp_off_on_addr[j  ])),
 10304                             		.loc 2 10889 45
 10305 02ed ED A5 0B                		mov.L	44[r10], r5
 10306                             		.loc 2 10889 36
 10307 02f0 EF 52                   		mov.L	r5, r2
 10308                             		.loc 2 10889 65
 10309 02f2 FB 52 00 00 00 00       		mov.L	#_sp_off_on_addr, r5
 10310 02f8 ED A3 07                		mov.L	28[r10], r3
 10311 02fb FE 63 55                		mov.L	[r3,r5], r5
 10312                             		.loc 2 10889 49
 10313 02fe 53 25                   		and	r2, r5
10888:../src/wolfcrypt/src/sp_int.c ****                                   ((size_t)t[1] & sp_off_on_addr[j  ])),
 10314                             		.loc 2 10888 72
 10315 0300 4B 45                   		add	r4, r5
10888:../src/wolfcrypt/src/sp_int.c ****                                   ((size_t)t[1] & sp_off_on_addr[j  ])),
 10316                             		.loc 2 10888 17
 10317 0302 ED A4 0D                		mov.L	52[r10], r4
 10318 0305 EF 42                   		mov.L	r4, r2
 10319 0307 EF 51                   		mov.L	r5, r1
 10320 0309 05 00 00 00             		bsr	_sp_copy
10890:../src/wolfcrypt/src/sp_int.c ****                         t[3]);
10891:../src/wolfcrypt/src/sp_int.c ****                 err = sp_mul(t[3], t[2], t[3]);
 10321                             		.loc 2 10891 23
 10322 030d ED A5 0D                		mov.L	52[r10], r5
 10323 0310 ED A4 0C                		mov.L	48[r10], r4
 10324 0313 ED A3 0D                		mov.L	52[r10], r3
 10325 0316 EF 42                   		mov.L	r4, r2
 10326 0318 EF 51                   		mov.L	r5, r1
 10327 031a 05 00 00 00             		bsr	_sp_mul
 10328 031e E7 A1 01                		mov.L	r1, 4[r10]
10892:../src/wolfcrypt/src/sp_int.c ****                 if (err == MP_OKAY) {
 10329                             		.loc 2 10892 20
 10330 0321 ED A5 01                		mov.L	4[r10], r5
 10331 0324 61 05                   		cmp	#0, r5
 10332 0326 21 16                   		bne	.L671
10893:../src/wolfcrypt/src/sp_int.c ****                     err = _sp_mont_red(t[3], m, mp);
 10333                             		.loc 2 10893 27
 10334 0328 ED A5 0D                		mov.L	52[r10], r5
 10335 032b ED A4 09                		mov.L	36[r10], r4
 10336 032e EF 43                   		mov.L	r4, r3
 10337 0330 ED A2 11                		mov.L	68[r10], r2
 10338 0333 EF 51                   		mov.L	r5, r1
 10339 0335 05 00 00 00             		bsr	__sp_mont_red
 10340 0339 E7 A1 01                		mov.L	r1, 4[r10]
 10341                             	.L671:
10894:../src/wolfcrypt/src/sp_int.c ****                 }
10895:../src/wolfcrypt/src/sp_int.c ****                 sp_copy(t[3],
 10342                             		.loc 2 10895 26
 10343 033c ED A1 0D                		mov.L	52[r10], r1
10896:../src/wolfcrypt/src/sp_int.c ****                         (sp_int*)(((size_t)t[0] & sp_off_on_addr[j^1]) +
 10344                             		.loc 2 10896 45
 10345 033f ED A5 0A                		mov.L	40[r10], r5
 10346                             		.loc 2 10896 36
 10347 0342 EF 53                   		mov.L	r5, r3
 10348                             		.loc 2 10896 67
 10349 0344 ED A5 07                		mov.L	28[r10], r5
 10350 0347 FD 74 D5 01             		xor	#1, r5
 10351                             		.loc 2 10896 65
 10352 034b FB 42 00 00 00 00       		mov.L	#_sp_off_on_addr, r4
 10353 0351 FE 65 45                		mov.L	[r5,r4], r5
 10354                             		.loc 2 10896 49
 10355 0354 FF 44 53                		and	r5, r3, r4
10897:../src/wolfcrypt/src/sp_int.c ****                                   ((size_t)t[1] & sp_off_on_addr[j  ])));
 10356                             		.loc 2 10897 45
 10357 0357 ED A5 0B                		mov.L	44[r10], r5
 10358                             		.loc 2 10897 36
 10359 035a EF 52                   		mov.L	r5, r2
 10360                             		.loc 2 10897 65
 10361 035c FB 52 00 00 00 00       		mov.L	#_sp_off_on_addr, r5
 10362 0362 ED A3 07                		mov.L	28[r10], r3
 10363 0365 FE 63 55                		mov.L	[r3,r5], r5
 10364                             		.loc 2 10897 49
 10365 0368 53 25                   		and	r2, r5
10896:../src/wolfcrypt/src/sp_int.c ****                         (sp_int*)(((size_t)t[0] & sp_off_on_addr[j^1]) +
 10366                             		.loc 2 10896 72
 10367 036a 4B 45                   		add	r4, r5
10895:../src/wolfcrypt/src/sp_int.c ****                         (sp_int*)(((size_t)t[0] & sp_off_on_addr[j^1]) +
 10368                             		.loc 2 10895 17
 10369 036c EF 52                   		mov.L	r5, r2
 10370 036e 05 00 00 00             		bsr	_sp_copy
 10371                             	.L670:
10871:../src/wolfcrypt/src/sp_int.c ****             /* Square real working value if seen the top bit. */
 10372                             		.loc 2 10871 59 discriminator 2
 10373 0372 EC A5                   		mov.L	[r10], r5
 10374 0374 60 15                   		sub	#1, r5
 10375 0376 E3 A5                   		mov.L	r5, [r10]
 10376                             	.L668:
10871:../src/wolfcrypt/src/sp_int.c ****             /* Square real working value if seen the top bit. */
 10377                             		.loc 2 10871 9 discriminator 1
 10378 0378 ED A5 01                		mov.L	4[r10], r5
 10379 037b 61 05                   		cmp	#0, r5
 10380 037d 1A                      		bne	.L672
10871:../src/wolfcrypt/src/sp_int.c ****             /* Square real working value if seen the top bit. */
 10381                             		.loc 2 10871 45 discriminator 3
 10382 037e EC A5                   		mov.L	[r10], r5
 10383 0380 61 05                   		cmp	#0, r5
 10384 0382 29 05 38 7C FE          		bge	.L673
 10385                             	.L672:
10898:../src/wolfcrypt/src/sp_int.c ****             }
10899:../src/wolfcrypt/src/sp_int.c ****         }
10900:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 10386                             		.loc 2 10900 12
 10387 0387 ED A5 01                		mov.L	4[r10], r5
 10388 038a 61 05                   		cmp	#0, r5
 10389 038c 21 16                   		bne	.L664
10901:../src/wolfcrypt/src/sp_int.c ****             /* Convert from montgomery form. */
10902:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mont_red(t[1], m, mp);
 10390                             		.loc 2 10902 19
 10391 038e ED A5 0B                		mov.L	44[r10], r5
 10392 0391 ED A4 09                		mov.L	36[r10], r4
 10393 0394 EF 43                   		mov.L	r4, r3
 10394 0396 ED A2 11                		mov.L	68[r10], r2
 10395 0399 EF 51                   		mov.L	r5, r1
 10396 039b 05 00 00 00             		bsr	__sp_mont_red
 10397 039f E7 A1 01                		mov.L	r1, 4[r10]
 10398                             		.balign 8,3,1
 10399                             	.L664:
10903:../src/wolfcrypt/src/sp_int.c ****             /* Reduction implementation returns number to range < m. */
10904:../src/wolfcrypt/src/sp_int.c ****         }
10905:../src/wolfcrypt/src/sp_int.c ****     }
10906:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
 10400                             		.loc 2 10906 8
 10401 03a2 ED A5 02                		mov.L	8[r10], r5
 10402 03a5 61 05                   		cmp	#0, r5
 10403 03a7 21 17                   		bne	.L674
 10404                             		.loc 2 10906 17 discriminator 1
 10405 03a9 ED A5 01                		mov.L	4[r10], r5
 10406 03ac 61 05                   		cmp	#0, r5
 10407 03ae 21 10                   		bne	.L674
10907:../src/wolfcrypt/src/sp_int.c ****         err = sp_copy(t[1], r);
 10408                             		.loc 2 10907 24
 10409 03b0 ED A5 0B                		mov.L	44[r10], r5
 10410                             		.loc 2 10907 15
 10411 03b3 EC 62                   		mov.L	[r6], r2
 10412 03b5 EF 51                   		mov.L	r5, r1
 10413 03b7 05 00 00 00             		bsr	_sp_copy
 10414 03bb E7 A1 01                		mov.L	r1, 4[r10]
 10415                             	.L674:
10908:../src/wolfcrypt/src/sp_int.c ****     }
10909:../src/wolfcrypt/src/sp_int.c **** 
10910:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
 10416                             		.loc 2 10910 5
 10417 03be ED A5 04                		mov.L	16[r10], r5
 10418 03c1 61 05                   		cmp	#0, r5
 10419 03c3 20 15                   		beq	.L675
 10420                             	.LBB64:
 10421                             		.loc 2 10910 5 is_stmt 0 discriminator 1
 10422 03c5 ED A5 04                		mov.L	16[r10], r5
 10423 03c8 E7 A5 08                		mov.L	r5, 32[r10]
 10424 03cb ED A5 08                		mov.L	32[r10], r5
 10425 03ce 61 05                   		cmp	#0, r5
 10426 03d0 10                      		beq	.L675
 10427                             		.loc 2 10910 5 discriminator 2
 10428 03d1 ED A1 08                		mov.L	32[r10], r1
 10429 03d4 05 00 00 00             		bsr	_wolfSSL_Free
 10430                             	.L675:
 10431                             	.LBE64:
10911:../src/wolfcrypt/src/sp_int.c ****     return err;
 10432                             		.loc 2 10911 12 is_stmt 1
 10433 03d8 ED A5 01                		mov.L	4[r10], r5
10912:../src/wolfcrypt/src/sp_int.c **** }
 10434                             		.loc 2 10912 1
 10435 03db EF 51                   		mov.L	r5, r1
 10436 03dd 3F 6A 18                		rtsd	#96, r6-r10
 10437                             	.LFE103:
 10439                             		.section	.text._sp_exptmod_base_2,"ax",@progbits
 10441                             	__sp_exptmod_base_2:
 10442                             	.LFB104:
10913:../src/wolfcrypt/src/sp_int.c **** #else
10914:../src/wolfcrypt/src/sp_int.c **** 
10915:../src/wolfcrypt/src/sp_int.c **** /* Always allocate large array of sp_ints unless defined WOLFSSL_SP_NO_MALLOC */
10916:../src/wolfcrypt/src/sp_int.c **** #define SP_ALLOC
10917:../src/wolfcrypt/src/sp_int.c **** 
10918:../src/wolfcrypt/src/sp_int.c **** /* Internal. Exponentiates b to the power of e modulo m into r: r = b ^ e mod m
10919:../src/wolfcrypt/src/sp_int.c ****  * Creates a window of precalculated exponents with base in montgomery form.
10920:../src/wolfcrypt/src/sp_int.c ****  * Is constant time but NOT cache attack resistant.
10921:../src/wolfcrypt/src/sp_int.c ****  *
10922:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b     SP integer that is the base.
10923:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e     SP integer that is the exponent.
10924:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   bits  Number of bits in base to use. May be greater than
10925:../src/wolfcrypt/src/sp_int.c ****  *                      count of bits in b.
10926:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m     SP integer that is the modulus.
10927:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r     SP integer to hold result.
10928:../src/wolfcrypt/src/sp_int.c ****  *
10929:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
10930:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
10931:../src/wolfcrypt/src/sp_int.c ****  */
10932:../src/wolfcrypt/src/sp_int.c **** static int _sp_exptmod_mont_ex(sp_int* b, sp_int* e, int bits, sp_int* m,
10933:../src/wolfcrypt/src/sp_int.c ****                                sp_int* r)
10934:../src/wolfcrypt/src/sp_int.c **** {
10935:../src/wolfcrypt/src/sp_int.c ****     int i;
10936:../src/wolfcrypt/src/sp_int.c ****     int j;
10937:../src/wolfcrypt/src/sp_int.c ****     int c;
10938:../src/wolfcrypt/src/sp_int.c ****     int y;
10939:../src/wolfcrypt/src/sp_int.c ****     int winBits;
10940:../src/wolfcrypt/src/sp_int.c ****     int preCnt;
10941:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
10942:../src/wolfcrypt/src/sp_int.c ****     int done = 0;
10943:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit mp;
10944:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit n;
10945:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit mask;
10946:../src/wolfcrypt/src/sp_int.c ****     sp_int* tr = NULL;
10947:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, m->used * 2 + 1, (1 << 6) + 1);
10948:../src/wolfcrypt/src/sp_int.c **** 
10949:../src/wolfcrypt/src/sp_int.c ****     if (bits > 450) {
10950:../src/wolfcrypt/src/sp_int.c ****         winBits = 6;
10951:../src/wolfcrypt/src/sp_int.c ****     }
10952:../src/wolfcrypt/src/sp_int.c ****     else if (bits <= 21) {
10953:../src/wolfcrypt/src/sp_int.c ****         winBits = 1;
10954:../src/wolfcrypt/src/sp_int.c ****     }
10955:../src/wolfcrypt/src/sp_int.c ****     else if (bits <= 36) {
10956:../src/wolfcrypt/src/sp_int.c ****         winBits = 3;
10957:../src/wolfcrypt/src/sp_int.c ****     }
10958:../src/wolfcrypt/src/sp_int.c ****     else if (bits <= 140) {
10959:../src/wolfcrypt/src/sp_int.c ****         winBits = 4;
10960:../src/wolfcrypt/src/sp_int.c ****     }
10961:../src/wolfcrypt/src/sp_int.c ****     else {
10962:../src/wolfcrypt/src/sp_int.c ****         winBits = 5;
10963:../src/wolfcrypt/src/sp_int.c ****     }
10964:../src/wolfcrypt/src/sp_int.c ****     preCnt = 1 << winBits;
10965:../src/wolfcrypt/src/sp_int.c ****     mask = preCnt - 1;
10966:../src/wolfcrypt/src/sp_int.c **** 
10967:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, m->used * 2 + 1, preCnt + 1, err, NULL);
10968:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
10969:../src/wolfcrypt/src/sp_int.c ****         tr = t[preCnt];
10970:../src/wolfcrypt/src/sp_int.c **** 
10971:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < preCnt; i++) {
10972:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(t[i], m->used * 2 + 1);
10973:../src/wolfcrypt/src/sp_int.c ****         }
10974:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(tr, m->used * 2 + 1);
10975:../src/wolfcrypt/src/sp_int.c **** 
10976:../src/wolfcrypt/src/sp_int.c ****         /* Ensure base is less than exponent. */
10977:../src/wolfcrypt/src/sp_int.c ****         if (_sp_cmp_abs(b, m) != MP_LT) {
10978:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod(b, m, t[1]);
10979:../src/wolfcrypt/src/sp_int.c ****             if ((err == MP_OKAY) && sp_iszero(t[1])) {
10980:../src/wolfcrypt/src/sp_int.c ****                 sp_set(r, 0);
10981:../src/wolfcrypt/src/sp_int.c ****                 done = 1;
10982:../src/wolfcrypt/src/sp_int.c ****             }
10983:../src/wolfcrypt/src/sp_int.c ****         }
10984:../src/wolfcrypt/src/sp_int.c ****         else {
10985:../src/wolfcrypt/src/sp_int.c ****             err = sp_copy(b, t[1]);
10986:../src/wolfcrypt/src/sp_int.c ****         }
10987:../src/wolfcrypt/src/sp_int.c ****     }
10988:../src/wolfcrypt/src/sp_int.c **** 
10989:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
10990:../src/wolfcrypt/src/sp_int.c ****         err = sp_mont_setup(m, &mp);
10991:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
10992:../src/wolfcrypt/src/sp_int.c ****             /* Norm value is 1 in montgomery form. */
10993:../src/wolfcrypt/src/sp_int.c ****             err = sp_mont_norm(t[0], m);
10994:../src/wolfcrypt/src/sp_int.c ****         }
10995:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
10996:../src/wolfcrypt/src/sp_int.c ****             /* Convert base to montgomery form. */
10997:../src/wolfcrypt/src/sp_int.c ****             err = sp_mulmod(t[1], t[0], m, t[1]);
10998:../src/wolfcrypt/src/sp_int.c ****         }
10999:../src/wolfcrypt/src/sp_int.c **** 
11000:../src/wolfcrypt/src/sp_int.c ****         /* Pre-calculate values */
11001:../src/wolfcrypt/src/sp_int.c ****         for (i = 2; (i < preCnt) && (err == MP_OKAY); i++) {
11002:../src/wolfcrypt/src/sp_int.c ****             if ((i & 1) == 0) {
11003:../src/wolfcrypt/src/sp_int.c ****                 err = sp_sqr(t[i/2], t[i]);
11004:../src/wolfcrypt/src/sp_int.c ****             }
11005:../src/wolfcrypt/src/sp_int.c ****             else {
11006:../src/wolfcrypt/src/sp_int.c ****                 err = sp_mul(t[i-1], t[1], t[i]);
11007:../src/wolfcrypt/src/sp_int.c ****             }
11008:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
11009:../src/wolfcrypt/src/sp_int.c ****                 err = _sp_mont_red(t[i], m, mp);
11010:../src/wolfcrypt/src/sp_int.c ****             }
11011:../src/wolfcrypt/src/sp_int.c ****         }
11012:../src/wolfcrypt/src/sp_int.c **** 
11013:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
11014:../src/wolfcrypt/src/sp_int.c ****             /* Bits from the top that - possibly left over. */
11015:../src/wolfcrypt/src/sp_int.c ****             i = (bits - 1) >> SP_WORD_SHIFT;
11016:../src/wolfcrypt/src/sp_int.c ****             n = e->dp[i--];
11017:../src/wolfcrypt/src/sp_int.c ****             c = bits & (SP_WORD_SIZE - 1);
11018:../src/wolfcrypt/src/sp_int.c ****             if (c == 0) {
11019:../src/wolfcrypt/src/sp_int.c ****                 c = SP_WORD_SIZE;
11020:../src/wolfcrypt/src/sp_int.c ****             }
11021:../src/wolfcrypt/src/sp_int.c ****             c -= bits % winBits;
11022:../src/wolfcrypt/src/sp_int.c ****             y = (int)(n >> c);
11023:../src/wolfcrypt/src/sp_int.c ****             n <<= SP_WORD_SIZE - c;
11024:../src/wolfcrypt/src/sp_int.c ****             /* Copy window number for top bits. */
11025:../src/wolfcrypt/src/sp_int.c ****             sp_copy(t[y], tr);
11026:../src/wolfcrypt/src/sp_int.c ****             for (; (i >= 0) || (c >= winBits); ) {
11027:../src/wolfcrypt/src/sp_int.c ****                 if (c == 0) {
11028:../src/wolfcrypt/src/sp_int.c ****                     /* Bits up to end of digit */
11029:../src/wolfcrypt/src/sp_int.c ****                     n = e->dp[i--];
11030:../src/wolfcrypt/src/sp_int.c ****                     y = (int)(n >> (SP_WORD_SIZE - winBits));
11031:../src/wolfcrypt/src/sp_int.c ****                     n <<= winBits;
11032:../src/wolfcrypt/src/sp_int.c ****                     c = SP_WORD_SIZE - winBits;
11033:../src/wolfcrypt/src/sp_int.c ****                 }
11034:../src/wolfcrypt/src/sp_int.c ****                 else if (c < winBits) {
11035:../src/wolfcrypt/src/sp_int.c ****                     /* Bits to end of digit and part of next */
11036:../src/wolfcrypt/src/sp_int.c ****                     y = (int)(n >> (SP_WORD_SIZE - winBits));
11037:../src/wolfcrypt/src/sp_int.c ****                     n = e->dp[i--];
11038:../src/wolfcrypt/src/sp_int.c ****                     c = winBits - c;
11039:../src/wolfcrypt/src/sp_int.c ****                     y |= (int)(n >> (SP_WORD_SIZE - c));
11040:../src/wolfcrypt/src/sp_int.c ****                     n <<= c;
11041:../src/wolfcrypt/src/sp_int.c ****                     c = SP_WORD_SIZE - c;
11042:../src/wolfcrypt/src/sp_int.c ****                 }
11043:../src/wolfcrypt/src/sp_int.c ****                 else {
11044:../src/wolfcrypt/src/sp_int.c ****                     /* Bits from middle of digit */
11045:../src/wolfcrypt/src/sp_int.c ****                     y = (int)((n >> (SP_WORD_SIZE - winBits)) & mask);
11046:../src/wolfcrypt/src/sp_int.c ****                     n <<= winBits;
11047:../src/wolfcrypt/src/sp_int.c ****                     c -= winBits;
11048:../src/wolfcrypt/src/sp_int.c ****                 }
11049:../src/wolfcrypt/src/sp_int.c **** 
11050:../src/wolfcrypt/src/sp_int.c ****                 /* Square for number of bits in window. */
11051:../src/wolfcrypt/src/sp_int.c ****                 for (j = 0; (j < winBits) && (err == MP_OKAY); j++) {
11052:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
11053:../src/wolfcrypt/src/sp_int.c ****                     if (err == MP_OKAY) {
11054:../src/wolfcrypt/src/sp_int.c ****                         err = _sp_mont_red(tr, m, mp);
11055:../src/wolfcrypt/src/sp_int.c ****                     }
11056:../src/wolfcrypt/src/sp_int.c ****                 }
11057:../src/wolfcrypt/src/sp_int.c ****                 /* Multiply by window number for next set of bits. */
11058:../src/wolfcrypt/src/sp_int.c ****                 if (err == MP_OKAY) {
11059:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mul(tr, t[y], tr);
11060:../src/wolfcrypt/src/sp_int.c ****                 }
11061:../src/wolfcrypt/src/sp_int.c ****                 if (err == MP_OKAY) {
11062:../src/wolfcrypt/src/sp_int.c ****                     err = _sp_mont_red(tr, m, mp);
11063:../src/wolfcrypt/src/sp_int.c ****                 }
11064:../src/wolfcrypt/src/sp_int.c ****             }
11065:../src/wolfcrypt/src/sp_int.c ****         }
11066:../src/wolfcrypt/src/sp_int.c **** 
11067:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
11068:../src/wolfcrypt/src/sp_int.c ****             /* Convert from montgomery form. */
11069:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mont_red(tr, m, mp);
11070:../src/wolfcrypt/src/sp_int.c ****             /* Reduction implementation returns number to range < m. */
11071:../src/wolfcrypt/src/sp_int.c ****         }
11072:../src/wolfcrypt/src/sp_int.c ****     }
11073:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
11074:../src/wolfcrypt/src/sp_int.c ****         err = sp_copy(tr, r);
11075:../src/wolfcrypt/src/sp_int.c ****     }
11076:../src/wolfcrypt/src/sp_int.c **** 
11077:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
11078:../src/wolfcrypt/src/sp_int.c ****     return err;
11079:../src/wolfcrypt/src/sp_int.c **** }
11080:../src/wolfcrypt/src/sp_int.c **** 
11081:../src/wolfcrypt/src/sp_int.c **** #undef SP_ALLOC
11082:../src/wolfcrypt/src/sp_int.c **** 
11083:../src/wolfcrypt/src/sp_int.c **** #endif /* !WC_NO_CACHE_RESISTANT */
11084:../src/wolfcrypt/src/sp_int.c **** #endif /* !WC_NO_HARDEN */
11085:../src/wolfcrypt/src/sp_int.c **** 
11086:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE <= 16
11087:../src/wolfcrypt/src/sp_int.c ****     #define EXP2_WINSIZE    2
11088:../src/wolfcrypt/src/sp_int.c **** #elif SP_WORD_SIZE <= 32
11089:../src/wolfcrypt/src/sp_int.c ****     #define EXP2_WINSIZE    3
11090:../src/wolfcrypt/src/sp_int.c **** #elif SP_WORD_SIZE <= 64
11091:../src/wolfcrypt/src/sp_int.c ****     #define EXP2_WINSIZE    4
11092:../src/wolfcrypt/src/sp_int.c **** #elif SP_WORD_SIZE <= 128
11093:../src/wolfcrypt/src/sp_int.c ****     #define EXP2_WINSIZE    5
11094:../src/wolfcrypt/src/sp_int.c **** #endif
11095:../src/wolfcrypt/src/sp_int.c **** 
11096:../src/wolfcrypt/src/sp_int.c **** /* Internal. Exponentiates 2 to the power of e modulo m into r: r = 2 ^ e mod m
11097:../src/wolfcrypt/src/sp_int.c ****  * Is constant time and cache attack resistant.
11098:../src/wolfcrypt/src/sp_int.c ****  *
11099:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e       SP integer that is the exponent.
11100:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   digits  Number of digits in base to use. May be greater than
11101:../src/wolfcrypt/src/sp_int.c ****  *                        count of bits in b.
11102:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m       SP integer that is the modulus.
11103:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r       SP integer to hold result.
11104:../src/wolfcrypt/src/sp_int.c ****  *
11105:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
11106:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
11107:../src/wolfcrypt/src/sp_int.c ****  */
11108:../src/wolfcrypt/src/sp_int.c **** static int _sp_exptmod_base_2(sp_int* e, int digits, sp_int* m, sp_int* r)
11109:../src/wolfcrypt/src/sp_int.c **** {
 10443                             		.loc 2 11109 1
 10444 0000 6E 6A                   		pushm	r6-r10
 10445                             	.LCFI130:
 10446 0002 71 0A B8                		add	#-72, r0, r10
 10447                             	.LCFI131:
 10448 0005 EF A0                   		mov.L	r10, r0
 10449 0007 E7 A1 0E                		mov.L	r1, 56[r10]
 10450 000a E7 A2 0F                		mov.L	r2, 60[r10]
 10451 000d E7 A3 10                		mov.L	r3, 64[r10]
 10452 0010 E7 A4 11                		mov.L	r4, 68[r10]
11110:../src/wolfcrypt/src/sp_int.c ****     int i = 0;
 10453                             		.loc 2 11110 9
 10454 0013 F8 A6 00                		mov.L	#0, [r10]
11111:../src/wolfcrypt/src/sp_int.c ****     int j;
11112:../src/wolfcrypt/src/sp_int.c ****     int c = 0;
 10455                             		.loc 2 11112 9
 10456 0016 F9 A6 02 00             		mov.L	#0, 8[r10]
11113:../src/wolfcrypt/src/sp_int.c ****     int y;
11114:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 10457                             		.loc 2 11114 9
 10458 001a F9 A6 04 00             		mov.L	#0, 16[r10]
11115:../src/wolfcrypt/src/sp_int.c ****     sp_int* t = NULL;
 10459                             		.loc 2 11115 13
 10460 001e F9 A6 09 00             		mov.L	#0, 36[r10]
11116:../src/wolfcrypt/src/sp_int.c ****     sp_int* tr = NULL;
 10461                             		.loc 2 11116 13
 10462 0022 F9 A6 05 00             		mov.L	#0, 20[r10]
11117:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit mp = 0, n = 0;
 10463                             		.loc 2 11117 18
 10464 0026 F9 A6 0B 00             		mov.L	#0, 44[r10]
 10465                             		.loc 2 11117 26
 10466 002a F9 A6 06 00             		mov.L	#0, 24[r10]
11118:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(d, m->used * 2 + 1, 2);
 10467                             		.loc 2 11118 5
 10468 002e F9 A6 07 00             		mov.L	#0, 28[r10]
 10469 0032 66 05                   		mov.L	#0, r5
 10470 0034 66 06                   		mov.L	#0, r6
 10471 0036 E7 A5 0C                		mov.L	r5, 48[r10]
 10472 0039 E7 A6 0D                		mov.L	r6, 52[r10]
11119:../src/wolfcrypt/src/sp_int.c **** 
11120:../src/wolfcrypt/src/sp_int.c ****     if (0) {
11121:../src/wolfcrypt/src/sp_int.c ****         sp_print_int(2, "a");
11122:../src/wolfcrypt/src/sp_int.c ****         sp_print(e, "b");
11123:../src/wolfcrypt/src/sp_int.c ****         sp_print(m, "m");
11124:../src/wolfcrypt/src/sp_int.c ****     }
11125:../src/wolfcrypt/src/sp_int.c **** 
11126:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(d, m->used * 2 + 1, 2, err, NULL);
 10473                             		.loc 2 11126 5
 10474 003c ED A5 04                		mov.L	16[r10], r5
 10475 003f 61 05                   		cmp	#0, r5
 10476 0041 3B A1 00                		bne	.L678
 10477                             		.loc 2 11126 5 is_stmt 0 discriminator 1
 10478 0044 ED A5 10                		mov.L	64[r10], r5
 10479 0047 EC 55                   		mov.L	[r5], r5
 10480 0049 4B 55                   		add	r5, r5
 10481 004b 75 05 FF                		cmp	#-1, r5
 10482 004e 20 0D                   		beq	.L679
 10483                             		.loc 2 11126 5 discriminator 2
 10484 0050 ED A5 10                		mov.L	64[r10], r5
 10485 0053 EC 55                   		mov.L	[r5], r5
 10486 0055 6C 45                   		shll	#4, r5
 10487 0057 71 55 18                		add	#24, r5
 10488 005a 0C                      		bra	.L680
 10489                             	.L679:
 10490                             		.loc 2 11126 5 discriminator 3
 10491 005b 75 45 18                		mov.L	#24, r5
 10492                             	.L680:
 10493                             		.loc 2 11126 5 discriminator 5
 10494 005e EF 51                   		mov.L	r5, r1
 10495 0060 05 00 00 00             		bsr	_wolfSSL_Malloc
 10496 0064 E7 A1 07                		mov.L	r1, 28[r10]
 10497 0067 ED A5 07                		mov.L	28[r10], r5
 10498 006a 61 05                   		cmp	#0, r5
 10499 006c 1F                      		bne	.L681
 10500                             		.loc 2 11126 5 discriminator 6
 10501 006d F9 A6 04 FE             		mov.L	#-2, 16[r10]
 10502 0071 2E 71                   		bra	.L678
 10503                             	.L681:
 10504                             	.LBB65:
 10505                             		.loc 2 11126 5 discriminator 7
 10506 0073 ED A5 07                		mov.L	28[r10], r5
 10507 0076 E7 A5 0C                		mov.L	r5, 48[r10]
 10508 0079 ED A5 10                		mov.L	64[r10], r5
 10509 007c EC 55                   		mov.L	[r5], r5
 10510 007e 4B 55                   		add	r5, r5
 10511 0080 EF 54                   		mov.L	r5, r4
 10512 0082 ED A5 0C                		mov.L	48[r10], r5
 10513 0085 62 14                   		add	#1, r4
 10514 0087 A0 5C                   		mov.L	r4, 4[r5]
 10515 0089 F9 A6 08 01             		mov.L	#1, 32[r10]
 10516 008d 2E 4E                   		bra	.L682
 10517                             	.L685:
 10518                             		.loc 2 11126 5 discriminator 14
 10519 008f ED A5 08                		mov.L	32[r10], r5
 10520 0092 60 15                   		sub	#1, r5
 10521 0094 6C 25                   		shll	#2, r5
 10522 0096 4B A5                   		add	r10, r5
 10523 0098 AB 54                   		mov.L	48[r5], r4
 10524 009a ED A5 10                		mov.L	64[r10], r5
 10525 009d EC 55                   		mov.L	[r5], r5
 10526 009f 4B 55                   		add	r5, r5
 10527 00a1 75 05 FF                		cmp	#-1, r5
 10528 00a4 20 0C                   		beq	.L683
 10529                             		.loc 2 11126 5 discriminator 9
 10530 00a6 ED A5 10                		mov.L	64[r10], r5
 10531 00a9 EC 55                   		mov.L	[r5], r5
 10532 00ab 6C 35                   		shll	#3, r5
 10533 00ad 62 C5                   		add	#12, r5
 10534 00af 0B                      		bra	.L684
 10535                             	.L683:
 10536                             		.loc 2 11126 5 discriminator 10
 10537 00b0 66 C5                   		mov.L	#12, r5
 10538                             	.L684:
 10539                             		.loc 2 11126 5 discriminator 12
 10540 00b2 4B 54                   		add	r5, r4
 10541 00b4 ED A5 08                		mov.L	32[r10], r5
 10542 00b7 6C 25                   		shll	#2, r5
 10543 00b9 4B A5                   		add	r10, r5
 10544 00bb A3 54                   		mov.L	r4, 48[r5]
 10545 00bd ED A5 10                		mov.L	64[r10], r5
 10546 00c0 EC 55                   		mov.L	[r5], r5
 10547 00c2 4B 55                   		add	r5, r5
 10548 00c4 EF 54                   		mov.L	r5, r4
 10549 00c6 ED A5 08                		mov.L	32[r10], r5
 10550 00c9 6C 25                   		shll	#2, r5
 10551 00cb 4B A5                   		add	r10, r5
 10552 00cd AB 55                   		mov.L	48[r5], r5
 10553 00cf 62 14                   		add	#1, r4
 10554 00d1 A0 5C                   		mov.L	r4, 4[r5]
 10555 00d3 ED A5 08                		mov.L	32[r10], r5
 10556 00d6 62 15                   		add	#1, r5
 10557 00d8 E7 A5 08                		mov.L	r5, 32[r10]
 10558                             	.L682:
 10559                             		.loc 2 11126 5 discriminator 13
 10560 00db ED A5 08                		mov.L	32[r10], r5
 10561 00de 61 15                   		cmp	#1, r5
 10562 00e0 2B AF                   		ble	.L685
 10563                             	.L678:
 10564                             	.LBE65:
11127:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 10565                             		.loc 2 11127 8 is_stmt 1
 10566 00e2 ED A5 04                		mov.L	16[r10], r5
 10567 00e5 61 05                   		cmp	#0, r5
 10568 00e7 3B EA 02                		bne	.L686
11128:../src/wolfcrypt/src/sp_int.c ****         t  = d[0];
 10569                             		.loc 2 11128 12
 10570 00ea ED A5 0C                		mov.L	48[r10], r5
 10571 00ed E7 A5 09                		mov.L	r5, 36[r10]
11129:../src/wolfcrypt/src/sp_int.c ****         tr = d[1];
 10572                             		.loc 2 11129 12
 10573 00f0 ED A5 0D                		mov.L	52[r10], r5
 10574 00f3 E7 A5 05                		mov.L	r5, 20[r10]
11130:../src/wolfcrypt/src/sp_int.c **** 
11131:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t, m->used * 2 + 1);
 10575                             		.loc 2 11131 26
 10576 00f6 ED A5 10                		mov.L	64[r10], r5
 10577 00f9 EC 55                   		mov.L	[r5], r5
 10578                             		.loc 2 11131 33
 10579 00fb 4B 55                   		add	r5, r5
 10580                             		.loc 2 11131 9
 10581 00fd 62 15                   		add	#1, r5
 10582 00ff EF 52                   		mov.L	r5, r2
 10583 0101 ED A1 09                		mov.L	36[r10], r1
 10584 0104 05 00 00 00             		bsr	_sp_init_size
11132:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(tr, m->used * 2 + 1);
 10585                             		.loc 2 11132 27
 10586 0108 ED A5 10                		mov.L	64[r10], r5
 10587 010b EC 55                   		mov.L	[r5], r5
 10588                             		.loc 2 11132 34
 10589 010d 4B 55                   		add	r5, r5
 10590                             		.loc 2 11132 9
 10591 010f 62 15                   		add	#1, r5
 10592 0111 EF 52                   		mov.L	r5, r2
 10593 0113 ED A1 05                		mov.L	20[r10], r1
 10594 0116 05 00 00 00             		bsr	_sp_init_size
11133:../src/wolfcrypt/src/sp_int.c **** 
11134:../src/wolfcrypt/src/sp_int.c ****         if (m->used > 1) {
 10595                             		.loc 2 11134 14
 10596 011a ED A5 10                		mov.L	64[r10], r5
 10597 011d EC 55                   		mov.L	[r5], r5
 10598                             		.loc 2 11134 12
 10599 011f 61 15                   		cmp	#1, r5
 10600 0121 2B 3D                   		ble	.L687
11135:../src/wolfcrypt/src/sp_int.c ****             err = sp_mont_setup(m, &mp);
 10601                             		.loc 2 11135 19
 10602 0123 71 A5 2C                		add	#44, r10, r5
 10603 0126 EF 52                   		mov.L	r5, r2
 10604 0128 ED A1 10                		mov.L	64[r10], r1
 10605 012b 05 00 00 00             		bsr	_sp_mont_setup
 10606 012f E7 A1 04                		mov.L	r1, 16[r10]
11136:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 10607                             		.loc 2 11136 16
 10608 0132 ED A5 04                		mov.L	16[r10], r5
 10609 0135 61 05                   		cmp	#0, r5
 10610 0137 21 0F                   		bne	.L688
11137:../src/wolfcrypt/src/sp_int.c ****                 /* Norm value is 1 in montgomery form. */
11138:../src/wolfcrypt/src/sp_int.c ****                 err = sp_mont_norm(tr, m);
 10611                             		.loc 2 11138 23
 10612 0139 ED A2 10                		mov.L	64[r10], r2
 10613 013c ED A1 05                		mov.L	20[r10], r1
 10614 013f 05 00 00 00             		bsr	_sp_mont_norm
 10615 0143 E7 A1 04                		mov.L	r1, 16[r10]
 10616                             	.L688:
11139:../src/wolfcrypt/src/sp_int.c ****             }
11140:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 10617                             		.loc 2 11140 16
 10618 0146 ED A5 04                		mov.L	16[r10], r5
 10619 0149 61 05                   		cmp	#0, r5
 10620 014b 21 1F                   		bne	.L690
11141:../src/wolfcrypt/src/sp_int.c ****                 err = sp_mul_2d(m, 1 << EXP2_WINSIZE, t);
 10621                             		.loc 2 11141 23
 10622 014d ED A3 09                		mov.L	36[r10], r3
 10623 0150 66 82                   		mov.L	#8, r2
 10624 0152 ED A1 10                		mov.L	64[r10], r1
 10625 0155 05 00 00 00             		bsr	_sp_mul_2d
 10626 0159 E7 A1 04                		mov.L	r1, 16[r10]
 10627 015c 2E 0E                   		bra	.L690
 10628                             	.L687:
11142:../src/wolfcrypt/src/sp_int.c ****             }
11143:../src/wolfcrypt/src/sp_int.c ****         }
11144:../src/wolfcrypt/src/sp_int.c ****         else {
11145:../src/wolfcrypt/src/sp_int.c ****             err = sp_set(tr, 1);
 10629                             		.loc 2 11145 19
 10630 015e 66 12                   		mov.L	#1, r2
 10631 0160 ED A1 05                		mov.L	20[r10], r1
 10632 0163 05 00 00 00             		bsr	_sp_set
 10633 0167 E7 A1 04                		mov.L	r1, 16[r10]
 10634                             	.L690:
11146:../src/wolfcrypt/src/sp_int.c ****         }
11147:../src/wolfcrypt/src/sp_int.c **** 
11148:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 10635                             		.loc 2 11148 12
 10636 016a ED A5 04                		mov.L	16[r10], r5
 10637 016d 61 05                   		cmp	#0, r5
 10638 016f 3B 87 00                		bne	.L691
11149:../src/wolfcrypt/src/sp_int.c ****             /* Bits from the top. */
11150:../src/wolfcrypt/src/sp_int.c ****             i = digits - 1;
 10639                             		.loc 2 11150 15
 10640 0172 ED A5 0F                		mov.L	60[r10], r5
 10641 0175 60 15                   		sub	#1, r5
 10642 0177 E3 A5                   		mov.L	r5, [r10]
11151:../src/wolfcrypt/src/sp_int.c ****             n = e->dp[i--];
 10643                             		.loc 2 11151 24
 10644 0179 EC A5                   		mov.L	[r10], r5
 10645 017b 71 54 FF                		add	#-1, r5, r4
 10646 017e E3 A4                   		mov.L	r4, [r10]
 10647                             		.loc 2 11151 15
 10648 0180 ED A4 0E                		mov.L	56[r10], r4
 10649 0183 62 25                   		add	#2, r5
 10650 0185 FE 65 45                		mov.L	[r5,r4], r5
 10651 0188 E7 A5 06                		mov.L	r5, 24[r10]
11152:../src/wolfcrypt/src/sp_int.c ****             c = SP_WORD_SIZE;
 10652                             		.loc 2 11152 15
 10653 018b F9 A6 02 20             		mov.L	#32, 8[r10]
11153:../src/wolfcrypt/src/sp_int.c **** #if (EXP2_WINSIZE != 1) && (EXP2_WINSIZE != 2) && (EXP2_WINSIZE != 4)
11154:../src/wolfcrypt/src/sp_int.c ****             c -= (digits * SP_WORD_SIZE) % EXP2_WINSIZE;
 10654                             		.loc 2 11154 26
 10655 018f ED A5 0F                		mov.L	60[r10], r5
 10656 0192 6C 55                   		shll	#5, r5
 10657                             		.loc 2 11154 42
 10658 0194 FB 72 56 55 55 55       		mov.L	#0x55555556, r7
 10659 019a FC 1B 57                		emul	r5, r7
 10660 019d EF 73                   		mov.L	r7, r3
 10661 019f EF 84                   		mov.L	r8, r4
 10662 01a1 FD BF 52                		shar	#31, r5, r2
 10663 01a4 43 24                   		sub	r2, r4
 10664 01a6 63 34                   		mul	#3, r4
 10665 01a8 FF 04 45                		sub	r4, r5, r4
 10666                             		.loc 2 11154 15
 10667 01ab ED A5 02                		mov.L	8[r10], r5
 10668 01ae 43 45                   		sub	r4, r5
 10669 01b0 E7 A5 02                		mov.L	r5, 8[r10]
11155:../src/wolfcrypt/src/sp_int.c ****             if (c != SP_WORD_SIZE) {
 10670                             		.loc 2 11155 16
 10671 01b3 ED A5 02                		mov.L	8[r10], r5
 10672 01b6 75 55 20                		cmp	#32, r5
 10673 01b9 20 29                   		beq	.L692
11156:../src/wolfcrypt/src/sp_int.c ****                 y = (int)(n >> c);
 10674                             		.loc 2 11156 29
 10675 01bb ED A4 06                		mov.L	24[r10], r4
 10676 01be ED A5 02                		mov.L	8[r10], r5
 10677 01c1 EF 48                   		mov.L	r4, r8
 10678 01c3 FD 60 58                		shlr	r5, r8
 10679 01c6 EF 85                   		mov.L	r8, r5
 10680                             		.loc 2 11156 19
 10681 01c8 E7 A5 03                		mov.L	r5, 12[r10]
11157:../src/wolfcrypt/src/sp_int.c ****                 n <<= SP_WORD_SIZE - c;
 10682                             		.loc 2 11157 36
 10683 01cb 75 44 20                		mov.L	#32, r4
 10684 01ce ED A5 02                		mov.L	8[r10], r5
 10685 01d1 FF 05 54                		sub	r5, r4, r5
 10686                             		.loc 2 11157 19
 10687 01d4 ED A4 06                		mov.L	24[r10], r4
 10688 01d7 EF 47                   		mov.L	r4, r7
 10689 01d9 FD 62 57                		shll	r5, r7
 10690 01dc EF 75                   		mov.L	r7, r5
 10691 01de E7 A5 06                		mov.L	r5, 24[r10]
 10692 01e1 0D                      		bra	.L693
 10693                             	.L692:
11158:../src/wolfcrypt/src/sp_int.c ****             }
11159:../src/wolfcrypt/src/sp_int.c ****             else
11160:../src/wolfcrypt/src/sp_int.c **** #endif
11161:../src/wolfcrypt/src/sp_int.c ****             {
11162:../src/wolfcrypt/src/sp_int.c ****                 y = 0;
 10694                             		.loc 2 11162 19
 10695 01e2 F9 A6 03 00             		mov.L	#0, 12[r10]
 10696                             	.L693:
11163:../src/wolfcrypt/src/sp_int.c ****             }
11164:../src/wolfcrypt/src/sp_int.c **** 
11165:../src/wolfcrypt/src/sp_int.c ****             /* Multiply montgomery representation of 1 by 2 ^ top */
11166:../src/wolfcrypt/src/sp_int.c ****             err = sp_mul_2d(tr, y, tr);
 10697                             		.loc 2 11166 19
 10698 01e6 ED A3 05                		mov.L	20[r10], r3
 10699 01e9 ED A2 03                		mov.L	12[r10], r2
 10700 01ec ED A1 05                		mov.L	20[r10], r1
 10701 01ef 05 00 00 00             		bsr	_sp_mul_2d
 10702 01f3 E7 A1 04                		mov.L	r1, 16[r10]
 10703                             	.L691:
11167:../src/wolfcrypt/src/sp_int.c ****         }
11168:../src/wolfcrypt/src/sp_int.c ****         if ((err == MP_OKAY) && (m->used > 1)) {
 10704                             		.loc 2 11168 12
 10705 01f6 ED A5 04                		mov.L	16[r10], r5
 10706 01f9 61 05                   		cmp	#0, r5
 10707 01fb 21 1B                   		bne	.L694
 10708                             		.loc 2 11168 35 discriminator 1
 10709 01fd ED A5 10                		mov.L	64[r10], r5
 10710 0200 EC 55                   		mov.L	[r5], r5
 10711                             		.loc 2 11168 30 discriminator 1
 10712 0202 61 15                   		cmp	#1, r5
 10713 0204 2B 12                   		ble	.L694
11169:../src/wolfcrypt/src/sp_int.c ****             err = sp_add(tr, t, tr);
 10714                             		.loc 2 11169 19
 10715 0206 ED A3 05                		mov.L	20[r10], r3
 10716 0209 ED A2 09                		mov.L	36[r10], r2
 10717 020c ED A1 05                		mov.L	20[r10], r1
 10718 020f 05 00 00 00             		bsr	_sp_add
 10719 0213 E7 A1 04                		mov.L	r1, 16[r10]
 10720                             	.L694:
11170:../src/wolfcrypt/src/sp_int.c ****         }
11171:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 10721                             		.loc 2 11171 12
 10722 0216 ED A5 04                		mov.L	16[r10], r5
 10723 0219 61 05                   		cmp	#0, r5
 10724 021b 21 12                   		bne	.L695
11172:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod(tr, m, tr);
 10725                             		.loc 2 11172 19
 10726 021d ED A3 05                		mov.L	20[r10], r3
 10727 0220 ED A2 10                		mov.L	64[r10], r2
 10728 0223 ED A1 05                		mov.L	20[r10], r1
 10729 0226 05 00 00 00             		bsr	_sp_mod
 10730 022a E7 A1 04                		mov.L	r1, 16[r10]
 10731                             	.L695:
11173:../src/wolfcrypt/src/sp_int.c ****         }
11174:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 10732                             		.loc 2 11174 12
 10733 022d ED A5 04                		mov.L	16[r10], r5
 10734 0230 61 05                   		cmp	#0, r5
 10735 0232 3B 7D 01                		bne	.L696
11175:../src/wolfcrypt/src/sp_int.c ****             for (; (i >= 0) || (c >= EXP2_WINSIZE); ) {
 10736                             		.loc 2 11175 13
 10737 0235 38 64 01                		bra	.L697
 10738                             	.L710:
11176:../src/wolfcrypt/src/sp_int.c ****                 if (c == 0) {
 10739                             		.loc 2 11176 20
 10740 0238 ED A5 02                		mov.L	8[r10], r5
 10741 023b 61 05                   		cmp	#0, r5
 10742 023d 21 2A                   		bne	.L698
11177:../src/wolfcrypt/src/sp_int.c ****                     /* Bits up to end of digit */
11178:../src/wolfcrypt/src/sp_int.c ****                     n = e->dp[i--];
 10743                             		.loc 2 11178 32
 10744 023f EC A5                   		mov.L	[r10], r5
 10745 0241 71 54 FF                		add	#-1, r5, r4
 10746 0244 E3 A4                   		mov.L	r4, [r10]
 10747                             		.loc 2 11178 23
 10748 0246 ED A4 0E                		mov.L	56[r10], r4
 10749 0249 62 25                   		add	#2, r5
 10750 024b FE 65 45                		mov.L	[r5,r4], r5
 10751 024e E7 A5 06                		mov.L	r5, 24[r10]
11179:../src/wolfcrypt/src/sp_int.c ****                     y = (int)(n >> (SP_WORD_SIZE - EXP2_WINSIZE));
 10752                             		.loc 2 11179 33
 10753 0251 ED A5 06                		mov.L	24[r10], r5
 10754 0254 69 D5                   		shlr	#29, r5
 10755                             		.loc 2 11179 23
 10756 0256 E7 A5 03                		mov.L	r5, 12[r10]
11180:../src/wolfcrypt/src/sp_int.c ****                     n <<= EXP2_WINSIZE;
 10757                             		.loc 2 11180 23
 10758 0259 ED A5 06                		mov.L	24[r10], r5
 10759 025c 6C 35                   		shll	#3, r5
 10760 025e E7 A5 06                		mov.L	r5, 24[r10]
11181:../src/wolfcrypt/src/sp_int.c ****                     c = SP_WORD_SIZE - EXP2_WINSIZE;
 10761                             		.loc 2 11181 23
 10762 0261 F9 A6 02 1D             		mov.L	#29, 8[r10]
 10763 0265 2E 7F                   		bra	.L699
 10764                             	.L698:
11182:../src/wolfcrypt/src/sp_int.c ****                 }
11183:../src/wolfcrypt/src/sp_int.c **** #if (EXP2_WINSIZE != 1) && (EXP2_WINSIZE != 2) && (EXP2_WINSIZE != 4)
11184:../src/wolfcrypt/src/sp_int.c ****                 else if (c < EXP2_WINSIZE) {
 10765                             		.loc 2 11184 25
 10766 0267 ED A5 02                		mov.L	8[r10], r5
 10767 026a 61 25                   		cmp	#2, r5
 10768 026c 2A 60                   		bgt	.L700
11185:../src/wolfcrypt/src/sp_int.c ****                     /* Bits to end of digit and part of next */
11186:../src/wolfcrypt/src/sp_int.c ****                     y = (int)(n >> (SP_WORD_SIZE - EXP2_WINSIZE));
 10769                             		.loc 2 11186 33
 10770 026e ED A5 06                		mov.L	24[r10], r5
 10771 0271 69 D5                   		shlr	#29, r5
 10772                             		.loc 2 11186 23
 10773 0273 E7 A5 03                		mov.L	r5, 12[r10]
11187:../src/wolfcrypt/src/sp_int.c ****                     n = e->dp[i--];
 10774                             		.loc 2 11187 32
 10775 0276 EC A5                   		mov.L	[r10], r5
 10776 0278 71 54 FF                		add	#-1, r5, r4
 10777 027b E3 A4                   		mov.L	r4, [r10]
 10778                             		.loc 2 11187 23
 10779 027d ED A4 0E                		mov.L	56[r10], r4
 10780 0280 62 25                   		add	#2, r5
 10781 0282 FE 65 45                		mov.L	[r5,r4], r5
 10782 0285 E7 A5 06                		mov.L	r5, 24[r10]
11188:../src/wolfcrypt/src/sp_int.c ****                     c = EXP2_WINSIZE - c;
 10783                             		.loc 2 11188 23
 10784 0288 66 34                   		mov.L	#3, r4
 10785 028a ED A5 02                		mov.L	8[r10], r5
 10786 028d FF 05 54                		sub	r5, r4, r5
 10787 0290 E7 A5 02                		mov.L	r5, 8[r10]
11189:../src/wolfcrypt/src/sp_int.c ****                     y |= (int)(n >> (SP_WORD_SIZE - c));
 10788                             		.loc 2 11189 51
 10789 0293 75 44 20                		mov.L	#32, r4
 10790 0296 ED A5 02                		mov.L	8[r10], r5
 10791 0299 FF 05 54                		sub	r5, r4, r5
 10792                             		.loc 2 11189 34
 10793 029c ED A4 06                		mov.L	24[r10], r4
 10794 029f EF 48                   		mov.L	r4, r8
 10795 02a1 FD 60 58                		shlr	r5, r8
 10796 02a4 EF 85                   		mov.L	r8, r5
 10797                             		.loc 2 11189 23
 10798 02a6 ED A4 03                		mov.L	12[r10], r4
 10799 02a9 57 45                   		or	r4, r5
 10800 02ab E7 A5 03                		mov.L	r5, 12[r10]
11190:../src/wolfcrypt/src/sp_int.c ****                     n <<= c;
 10801                             		.loc 2 11190 23
 10802 02ae ED A4 06                		mov.L	24[r10], r4
 10803 02b1 ED A5 02                		mov.L	8[r10], r5
 10804 02b4 EF 47                   		mov.L	r4, r7
 10805 02b6 FD 62 57                		shll	r5, r7
 10806 02b9 EF 75                   		mov.L	r7, r5
 10807 02bb E7 A5 06                		mov.L	r5, 24[r10]
11191:../src/wolfcrypt/src/sp_int.c ****                     c = SP_WORD_SIZE - c;
 10808                             		.loc 2 11191 23
 10809 02be 75 44 20                		mov.L	#32, r4
 10810 02c1 ED A5 02                		mov.L	8[r10], r5
 10811 02c4 FF 05 54                		sub	r5, r4, r5
 10812 02c7 E7 A5 02                		mov.L	r5, 8[r10]
 10813 02ca 2E 1A                   		bra	.L699
 10814                             	.L700:
11192:../src/wolfcrypt/src/sp_int.c ****                 }
11193:../src/wolfcrypt/src/sp_int.c **** #endif
11194:../src/wolfcrypt/src/sp_int.c ****                 else {
11195:../src/wolfcrypt/src/sp_int.c ****                     /* Bits from middle of digit */
11196:../src/wolfcrypt/src/sp_int.c ****                     y = (int)((n >> (SP_WORD_SIZE - EXP2_WINSIZE)) &
 10815                             		.loc 2 11196 34
 10816 02cc ED A5 06                		mov.L	24[r10], r5
 10817 02cf 69 D5                   		shlr	#29, r5
 10818                             		.loc 2 11196 23
 10819 02d1 E7 A5 03                		mov.L	r5, 12[r10]
11197:../src/wolfcrypt/src/sp_int.c ****                               ((1 << EXP2_WINSIZE) - 1));
11198:../src/wolfcrypt/src/sp_int.c ****                     n <<= EXP2_WINSIZE;
 10820                             		.loc 2 11198 23
 10821 02d4 ED A5 06                		mov.L	24[r10], r5
 10822 02d7 6C 35                   		shll	#3, r5
 10823 02d9 E7 A5 06                		mov.L	r5, 24[r10]
11199:../src/wolfcrypt/src/sp_int.c ****                     c -= EXP2_WINSIZE;
 10824                             		.loc 2 11199 23
 10825 02dc ED A5 02                		mov.L	8[r10], r5
 10826 02df 60 35                   		sub	#3, r5
 10827 02e1 E7 A5 02                		mov.L	r5, 8[r10]
 10828                             	.L699:
11200:../src/wolfcrypt/src/sp_int.c ****                 }
11201:../src/wolfcrypt/src/sp_int.c **** 
11202:../src/wolfcrypt/src/sp_int.c ****                 /* Square for number of bits in window. */
11203:../src/wolfcrypt/src/sp_int.c ****                 for (j = 0; (j < EXP2_WINSIZE) && (err == MP_OKAY); j++) {
 10829                             		.loc 2 11203 24
 10830 02e4 F9 A6 01 00             		mov.L	#0, 4[r10]
 10831                             		.loc 2 11203 17
 10832 02e8 2E 4B                   		bra	.L701
 10833                             	.L706:
11204:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 10834                             		.loc 2 11204 27
 10835 02ea ED A2 05                		mov.L	20[r10], r2
 10836 02ed ED A1 05                		mov.L	20[r10], r1
 10837 02f0 05 00 00 00             		bsr	_sp_sqr
 10838 02f4 E7 A1 04                		mov.L	r1, 16[r10]
11205:../src/wolfcrypt/src/sp_int.c ****                     if (err != MP_OKAY) {
 10839                             		.loc 2 11205 24
 10840 02f7 ED A5 04                		mov.L	16[r10], r5
 10841 02fa 61 05                   		cmp	#0, r5
 10842 02fc 21 47                   		bne	.L715
11206:../src/wolfcrypt/src/sp_int.c ****                         break;
11207:../src/wolfcrypt/src/sp_int.c ****                     }
11208:../src/wolfcrypt/src/sp_int.c ****                     if (m->used > 1) {
 10843                             		.loc 2 11208 26
 10844 02fe ED A5 10                		mov.L	64[r10], r5
 10845 0301 EC 55                   		mov.L	[r5], r5
 10846                             		.loc 2 11208 24
 10847 0303 61 15                   		cmp	#1, r5
 10848 0305 2B 16                   		ble	.L704
11209:../src/wolfcrypt/src/sp_int.c ****                         err = _sp_mont_red(tr, m, mp);
 10849                             		.loc 2 11209 31
 10850 0307 ED A5 0B                		mov.L	44[r10], r5
 10851 030a EF 53                   		mov.L	r5, r3
 10852 030c ED A2 10                		mov.L	64[r10], r2
 10853 030f ED A1 05                		mov.L	20[r10], r1
 10854 0312 05 00 00 00             		bsr	__sp_mont_red
 10855 0316 E7 A1 04                		mov.L	r1, 16[r10]
 10856 0319 2E 12                   		bra	.L705
 10857                             	.L704:
11210:../src/wolfcrypt/src/sp_int.c ****                     }
11211:../src/wolfcrypt/src/sp_int.c ****                     else {
11212:../src/wolfcrypt/src/sp_int.c ****                         err = sp_mod(tr, m, tr);
 10858                             		.loc 2 11212 31
 10859 031b ED A3 05                		mov.L	20[r10], r3
 10860 031e ED A2 10                		mov.L	64[r10], r2
 10861 0321 ED A1 05                		mov.L	20[r10], r1
 10862 0324 05 00 00 00             		bsr	_sp_mod
 10863 0328 E7 A1 04                		mov.L	r1, 16[r10]
 10864                             	.L705:
11203:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 10865                             		.loc 2 11203 70 discriminator 2
 10866 032b ED A5 01                		mov.L	4[r10], r5
 10867 032e 62 15                   		add	#1, r5
 10868 0330 E7 A5 01                		mov.L	r5, 4[r10]
 10869                             	.L701:
11203:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 10870                             		.loc 2 11203 17 discriminator 1
 10871 0333 ED A5 01                		mov.L	4[r10], r5
 10872 0336 61 25                   		cmp	#2, r5
 10873 0338 2A 0C                   		bgt	.L703
11203:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 10874                             		.loc 2 11203 48 discriminator 3
 10875 033a ED A5 04                		mov.L	16[r10], r5
 10876 033d 61 05                   		cmp	#0, r5
 10877 033f 20 AB                   		beq	.L706
 10878 0341 2E 03                   		bra	.L703
 10879                             	.L715:
11206:../src/wolfcrypt/src/sp_int.c ****                     }
 10880                             		.loc 2 11206 25
 10881 0343 03                      		nop
 10882                             	.L703:
11213:../src/wolfcrypt/src/sp_int.c ****                     }
11214:../src/wolfcrypt/src/sp_int.c ****                 }
11215:../src/wolfcrypt/src/sp_int.c **** 
11216:../src/wolfcrypt/src/sp_int.c ****                 if (err == MP_OKAY) {
 10883                             		.loc 2 11216 20
 10884 0344 ED A5 04                		mov.L	16[r10], r5
 10885 0347 61 05                   		cmp	#0, r5
 10886 0349 21 12                   		bne	.L707
11217:../src/wolfcrypt/src/sp_int.c ****                     /* then multiply by 2^y */
11218:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mul_2d(tr, y, tr);
 10887                             		.loc 2 11218 27
 10888 034b ED A3 05                		mov.L	20[r10], r3
 10889 034e ED A2 03                		mov.L	12[r10], r2
 10890 0351 ED A1 05                		mov.L	20[r10], r1
 10891 0354 05 00 00 00             		bsr	_sp_mul_2d
 10892 0358 E7 A1 04                		mov.L	r1, 16[r10]
 10893                             	.L707:
11219:../src/wolfcrypt/src/sp_int.c ****                 }
11220:../src/wolfcrypt/src/sp_int.c ****                 if ((err == MP_OKAY) && (m->used > 1)) {
 10894                             		.loc 2 11220 20
 10895 035b ED A5 04                		mov.L	16[r10], r5
 10896 035e 61 05                   		cmp	#0, r5
 10897 0360 21 1B                   		bne	.L708
 10898                             		.loc 2 11220 43 discriminator 1
 10899 0362 ED A5 10                		mov.L	64[r10], r5
 10900 0365 EC 55                   		mov.L	[r5], r5
 10901                             		.loc 2 11220 38 discriminator 1
 10902 0367 61 15                   		cmp	#1, r5
 10903 0369 2B 12                   		ble	.L708
11221:../src/wolfcrypt/src/sp_int.c ****                     /* Add in value to make mod operation take same time */
11222:../src/wolfcrypt/src/sp_int.c ****                     err = sp_add(tr, t, tr);
 10904                             		.loc 2 11222 27
 10905 036b ED A3 05                		mov.L	20[r10], r3
 10906 036e ED A2 09                		mov.L	36[r10], r2
 10907 0371 ED A1 05                		mov.L	20[r10], r1
 10908 0374 05 00 00 00             		bsr	_sp_add
 10909 0378 E7 A1 04                		mov.L	r1, 16[r10]
 10910                             	.L708:
11223:../src/wolfcrypt/src/sp_int.c ****                 }
11224:../src/wolfcrypt/src/sp_int.c ****                 if (err == MP_OKAY) {
 10911                             		.loc 2 11224 20
 10912 037b ED A5 04                		mov.L	16[r10], r5
 10913 037e 61 05                   		cmp	#0, r5
 10914 0380 21 12                   		bne	.L709
11225:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mod(tr, m, tr);
 10915                             		.loc 2 11225 27
 10916 0382 ED A3 05                		mov.L	20[r10], r3
 10917 0385 ED A2 10                		mov.L	64[r10], r2
 10918 0388 ED A1 05                		mov.L	20[r10], r1
 10919 038b 05 00 00 00             		bsr	_sp_mod
 10920 038f E7 A1 04                		mov.L	r1, 16[r10]
 10921                             	.L709:
11226:../src/wolfcrypt/src/sp_int.c ****                 }
11227:../src/wolfcrypt/src/sp_int.c ****                 if (err != MP_OKAY) {
 10922                             		.loc 2 11227 20
 10923 0392 ED A5 04                		mov.L	16[r10], r5
 10924 0395 61 05                   		cmp	#0, r5
 10925 0397 21 17                   		bne	.L716
 10926                             	.L697:
11175:../src/wolfcrypt/src/sp_int.c ****                 if (c == 0) {
 10927                             		.loc 2 11175 13
 10928 0399 EC A5                   		mov.L	[r10], r5
 10929 039b 61 05                   		cmp	#0, r5
 10930 039d 29 05 38 99 FE          		bge	.L710
11175:../src/wolfcrypt/src/sp_int.c ****                 if (c == 0) {
 10931                             		.loc 2 11175 29 discriminator 1
 10932 03a2 ED A5 02                		mov.L	8[r10], r5
 10933 03a5 61 25                   		cmp	#2, r5
 10934 03a7 2B 05 38 8F FE          		bgt	.L710
 10935 03ac 2E 03                   		bra	.L696
 10936                             	.L716:
11228:../src/wolfcrypt/src/sp_int.c ****                     break;
 10937                             		.loc 2 11228 21
 10938 03ae 03                      		nop
 10939                             	.L696:
11229:../src/wolfcrypt/src/sp_int.c ****                 }
11230:../src/wolfcrypt/src/sp_int.c ****             }
11231:../src/wolfcrypt/src/sp_int.c ****         }
11232:../src/wolfcrypt/src/sp_int.c **** 
11233:../src/wolfcrypt/src/sp_int.c ****         if ((err == MP_OKAY) && (m->used > 1)) {
 10940                             		.loc 2 11233 12
 10941 03af ED A5 04                		mov.L	16[r10], r5
 10942 03b2 61 05                   		cmp	#0, r5
 10943 03b4 21 1D                   		bne	.L686
 10944                             		.loc 2 11233 35 discriminator 1
 10945 03b6 ED A5 10                		mov.L	64[r10], r5
 10946 03b9 EC 55                   		mov.L	[r5], r5
 10947                             		.loc 2 11233 30 discriminator 1
 10948 03bb 61 15                   		cmp	#1, r5
 10949 03bd 2B 14                   		ble	.L686
11234:../src/wolfcrypt/src/sp_int.c ****             /* Convert from montgomery form. */
11235:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mont_red(tr, m, mp);
 10950                             		.loc 2 11235 19
 10951 03bf ED A5 0B                		mov.L	44[r10], r5
 10952 03c2 EF 53                   		mov.L	r5, r3
 10953 03c4 ED A2 10                		mov.L	64[r10], r2
 10954 03c7 ED A1 05                		mov.L	20[r10], r1
 10955 03ca 05 00 00 00             		bsr	__sp_mont_red
 10956 03ce E7 A1 04                		mov.L	r1, 16[r10]
 10957                             		.balign 8,3,1
 10958                             	.L686:
11236:../src/wolfcrypt/src/sp_int.c ****             /* Reduction implementation returns number to range < m. */
11237:../src/wolfcrypt/src/sp_int.c ****         }
11238:../src/wolfcrypt/src/sp_int.c ****     }
11239:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 10959                             		.loc 2 11239 8
 10960 03d1 ED A5 04                		mov.L	16[r10], r5
 10961 03d4 61 05                   		cmp	#0, r5
 10962 03d6 21 0F                   		bne	.L714
11240:../src/wolfcrypt/src/sp_int.c ****         err = sp_copy(tr, r);
 10963                             		.loc 2 11240 15
 10964 03d8 ED A2 11                		mov.L	68[r10], r2
 10965 03db ED A1 05                		mov.L	20[r10], r1
 10966 03de 05 00 00 00             		bsr	_sp_copy
 10967 03e2 E7 A1 04                		mov.L	r1, 16[r10]
 10968                             	.L714:
11241:../src/wolfcrypt/src/sp_int.c ****     }
11242:../src/wolfcrypt/src/sp_int.c **** 
11243:../src/wolfcrypt/src/sp_int.c ****     if (0) {
11244:../src/wolfcrypt/src/sp_int.c ****         sp_print(r, "rme");
11245:../src/wolfcrypt/src/sp_int.c ****     }
11246:../src/wolfcrypt/src/sp_int.c **** 
11247:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(d, NULL);
 10969                             		.loc 2 11247 5
 10970 03e5 ED A5 07                		mov.L	28[r10], r5
 10971 03e8 61 05                   		cmp	#0, r5
 10972 03ea 20 15                   		beq	.L712
 10973                             	.LBB66:
 10974                             		.loc 2 11247 5 is_stmt 0 discriminator 1
 10975 03ec ED A5 07                		mov.L	28[r10], r5
 10976 03ef E7 A5 0A                		mov.L	r5, 40[r10]
 10977 03f2 ED A5 0A                		mov.L	40[r10], r5
 10978 03f5 61 05                   		cmp	#0, r5
 10979 03f7 10                      		beq	.L712
 10980                             		.loc 2 11247 5 discriminator 2
 10981 03f8 ED A1 0A                		mov.L	40[r10], r1
 10982 03fb 05 00 00 00             		bsr	_wolfSSL_Free
 10983                             	.L712:
 10984                             	.LBE66:
11248:../src/wolfcrypt/src/sp_int.c ****     return err;
 10985                             		.loc 2 11248 12 is_stmt 1
 10986 03ff ED A5 04                		mov.L	16[r10], r5
11249:../src/wolfcrypt/src/sp_int.c **** }
 10987                             		.loc 2 11249 1
 10988 0402 EF 51                   		mov.L	r5, r1
 10989 0404 3F 6A 17                		rtsd	#92, r6-r10
 10990                             	.LFE104:
 10992 0407 03                      		.section	.text.sp_exptmod_ex,"ax",@progbits
 10993                             		.global	_sp_exptmod_ex
 10995                             	_sp_exptmod_ex:
 10996                             	.LFB105:
11250:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY */
11251:../src/wolfcrypt/src/sp_int.c **** 
11252:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
11253:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_DH) || (!defined(NO_RSA) && defined(WOLFSSL_KEY_GEN))
11254:../src/wolfcrypt/src/sp_int.c **** /* Exponentiates b to the power of e modulo m into r: r = b ^ e mod m
11255:../src/wolfcrypt/src/sp_int.c ****  *
11256:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b     SP integer that is the base.
11257:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e     SP integer that is the exponent.
11258:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   bits  Number of bits in base to use. May be greater than
11259:../src/wolfcrypt/src/sp_int.c ****  *                      count of bits in b.
11260:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m     SP integer that is the modulus.
11261:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r     SP integer to hold result.
11262:../src/wolfcrypt/src/sp_int.c ****  *
11263:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
11264:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when b, e, m or r is NULL; or m <= 0 or e is negative.
11265:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
11266:../src/wolfcrypt/src/sp_int.c ****  */
11267:../src/wolfcrypt/src/sp_int.c **** int sp_exptmod_ex(sp_int* b, sp_int* e, int digits, sp_int* m, sp_int* r)
11268:../src/wolfcrypt/src/sp_int.c **** {
 10997                             		.loc 2 11268 1
 10998 0000 7E AA                   		push.l	r10
 10999                             	.LCFI132:
 11000 0002 7E A6                   		push.l	r6
 11001                             	.LCFI133:
 11002 0004 71 0A D8                		add	#-40, r0, r10
 11003                             	.LCFI134:
 11004 0007 71 A0 FC                		add	#-4, r10, r0
 11005                             	.LCFI135:
 11006 000a 75 46 34                		mov.L	#52, r6
 11007 000d 4B A6                   		add	r10, r6
 11008 000f E7 A1 05                		mov.L	r1, 20[r10]
 11009 0012 E7 A2 06                		mov.L	r2, 24[r10]
 11010 0015 E7 A3 07                		mov.L	r3, 28[r10]
 11011 0018 E7 A4 08                		mov.L	r4, 32[r10]
11269:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 11012                             		.loc 2 11269 9
 11013 001b F8 A6 00                		mov.L	#0, [r10]
11270:../src/wolfcrypt/src/sp_int.c ****     int done = 0;
 11014                             		.loc 2 11270 9
 11015 001e F9 A6 01 00             		mov.L	#0, 4[r10]
11271:../src/wolfcrypt/src/sp_int.c ****     int mBits = sp_count_bits(m);
 11016                             		.loc 2 11271 17
 11017 0022 ED A1 08                		mov.L	32[r10], r1
 11018 0025 05 00 00 00             		bsr	_sp_count_bits
 11019 0029 E7 A1 02                		mov.L	r1, 8[r10]
11272:../src/wolfcrypt/src/sp_int.c ****     int bBits = sp_count_bits(b);
 11020                             		.loc 2 11272 17
 11021 002c ED A1 05                		mov.L	20[r10], r1
 11022 002f 05 00 00 00             		bsr	_sp_count_bits
 11023 0033 E7 A1 03                		mov.L	r1, 12[r10]
11273:../src/wolfcrypt/src/sp_int.c ****     int eBits = sp_count_bits(e);
 11024                             		.loc 2 11273 17
 11025 0036 ED A1 06                		mov.L	24[r10], r1
 11026 0039 05 00 00 00             		bsr	_sp_count_bits
 11027 003d E7 A1 04                		mov.L	r1, 16[r10]
11274:../src/wolfcrypt/src/sp_int.c **** 
11275:../src/wolfcrypt/src/sp_int.c ****     if ((b == NULL) || (e == NULL) || (m == NULL) || (r == NULL)) {
 11028                             		.loc 2 11275 8
 11029 0040 ED A5 05                		mov.L	20[r10], r5
 11030 0043 61 05                   		cmp	#0, r5
 11031 0045 20 14                   		beq	.L718
 11032                             		.loc 2 11275 21 discriminator 1
 11033 0047 ED A5 06                		mov.L	24[r10], r5
 11034 004a 61 05                   		cmp	#0, r5
 11035 004c 20 0D                   		beq	.L718
 11036                             		.loc 2 11275 36 discriminator 2
 11037 004e ED A5 08                		mov.L	32[r10], r5
 11038 0051 61 05                   		cmp	#0, r5
 11039 0053 16                      		beq	.L718
 11040                             		.loc 2 11275 51 discriminator 3
 11041 0054 EC 65                   		mov.L	[r6], r5
 11042 0056 61 05                   		cmp	#0, r5
 11043 0058 1C                      		bne	.L719
 11044                             		.balign 8,3,4
 11045                             	.L718:
11276:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 11046                             		.loc 2 11276 13
 11047 0059 F8 A6 FD                		mov.L	#-3, [r10]
 11048                             	.L719:
11277:../src/wolfcrypt/src/sp_int.c ****     }
11278:../src/wolfcrypt/src/sp_int.c **** 
11279:../src/wolfcrypt/src/sp_int.c **** #if 0
11280:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
11281:../src/wolfcrypt/src/sp_int.c ****         sp_print(b, "a");
11282:../src/wolfcrypt/src/sp_int.c ****         sp_print(e, "b");
11283:../src/wolfcrypt/src/sp_int.c ****         sp_print(m, "m");
11284:../src/wolfcrypt/src/sp_int.c ****     }
11285:../src/wolfcrypt/src/sp_int.c **** #endif
11286:../src/wolfcrypt/src/sp_int.c **** 
11287:../src/wolfcrypt/src/sp_int.c ****     if (err != MP_OKAY) {
 11049                             		.loc 2 11287 8
 11050 005c EC A5                   		mov.L	[r10], r5
 11051 005e 61 05                   		cmp	#0, r5
 11052 0060 21 71                   		bne	.L729
11288:../src/wolfcrypt/src/sp_int.c ****     }
11289:../src/wolfcrypt/src/sp_int.c ****     /* Handle special cases. */
11290:../src/wolfcrypt/src/sp_int.c ****     else if (sp_iszero(m)) {
 11053                             		.loc 2 11290 14
 11054 0062 ED A5 08                		mov.L	32[r10], r5
 11055 0065 EC 55                   		mov.L	[r5], r5
 11056                             		.loc 2 11290 13
 11057 0067 61 05                   		cmp	#0, r5
 11058 0069 1E                      		bne	.L721
11291:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 11059                             		.loc 2 11291 13
 11060 006a F8 A6 FD                		mov.L	#-3, [r10]
 11061 006d 2E 64                   		bra	.L729
 11062                             	.L721:
11292:../src/wolfcrypt/src/sp_int.c ****     }
11293:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
11294:../src/wolfcrypt/src/sp_int.c ****     else if ((e->sign == MP_NEG) || (m->sign == MP_NEG)) {
11295:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
11296:../src/wolfcrypt/src/sp_int.c ****     }
11297:../src/wolfcrypt/src/sp_int.c **** #endif
11298:../src/wolfcrypt/src/sp_int.c ****     else if (sp_isone(m)) {
 11063                             		.loc 2 11298 14
 11064 006f ED A5 08                		mov.L	32[r10], r5
 11065 0072 EC 55                   		mov.L	[r5], r5
 11066                             		.loc 2 11298 13
 11067 0074 61 15                   		cmp	#1, r5
 11068 0076 21 19                   		bne	.L722
 11069                             		.loc 2 11298 14 discriminator 1
 11070 0078 ED A5 08                		mov.L	32[r10], r5
 11071 007b A8 D5                   		mov.L	8[r5], r5
 11072 007d 61 15                   		cmp	#1, r5
 11073 007f 21 10                   		bne	.L722
11299:../src/wolfcrypt/src/sp_int.c ****         sp_set(r, 0);
 11074                             		.loc 2 11299 9
 11075 0081 66 02                   		mov.L	#0, r2
 11076 0083 EC 61                   		mov.L	[r6], r1
 11077 0085 05 00 00 00             		bsr	_sp_set
11300:../src/wolfcrypt/src/sp_int.c ****         done = 1;
 11078                             		.loc 2 11300 14
 11079 0089 F9 A6 01 01             		mov.L	#1, 4[r10]
 11080 008d 2E 44                   		bra	.L729
 11081                             	.L722:
11301:../src/wolfcrypt/src/sp_int.c ****     }
11302:../src/wolfcrypt/src/sp_int.c ****     else if (sp_iszero(e)) {
 11082                             		.loc 2 11302 14
 11083 008f ED A5 06                		mov.L	24[r10], r5
 11084 0092 EC 55                   		mov.L	[r5], r5
 11085                             		.loc 2 11302 13
 11086 0094 61 05                   		cmp	#0, r5
 11087 0096 21 10                   		bne	.L723
11303:../src/wolfcrypt/src/sp_int.c ****         sp_set(r, 1);
 11088                             		.loc 2 11303 9
 11089 0098 66 12                   		mov.L	#1, r2
 11090 009a EC 61                   		mov.L	[r6], r1
 11091 009c 05 00 00 00             		bsr	_sp_set
11304:../src/wolfcrypt/src/sp_int.c ****         done = 1;
 11092                             		.loc 2 11304 14
 11093 00a0 F9 A6 01 01             		mov.L	#1, 4[r10]
 11094 00a4 2E 2D                   		bra	.L729
 11095                             	.L723:
11305:../src/wolfcrypt/src/sp_int.c ****     }
11306:../src/wolfcrypt/src/sp_int.c ****     else if (sp_iszero(b)) {
 11096                             		.loc 2 11306 14
 11097 00a6 ED A5 05                		mov.L	20[r10], r5
 11098 00a9 EC 55                   		mov.L	[r5], r5
 11099                             		.loc 2 11306 13
 11100 00ab 61 05                   		cmp	#0, r5
 11101 00ad 21 10                   		bne	.L724
11307:../src/wolfcrypt/src/sp_int.c ****         sp_set(r, 0);
 11102                             		.loc 2 11307 9
 11103 00af 66 02                   		mov.L	#0, r2
 11104 00b1 EC 61                   		mov.L	[r6], r1
 11105 00b3 05 00 00 00             		bsr	_sp_set
11308:../src/wolfcrypt/src/sp_int.c ****         done = 1;
 11106                             		.loc 2 11308 14
 11107 00b7 F9 A6 01 01             		mov.L	#1, 4[r10]
 11108 00bb 2E 16                   		bra	.L729
 11109                             	.L724:
11309:../src/wolfcrypt/src/sp_int.c ****     }
11310:../src/wolfcrypt/src/sp_int.c ****     /* Ensure SP integers have space for intermediate values. */
11311:../src/wolfcrypt/src/sp_int.c ****     else if (m->used * 2 >= r->size) {
 11110                             		.loc 2 11311 15
 11111 00bd ED A5 08                		mov.L	32[r10], r5
 11112 00c0 EC 55                   		mov.L	[r5], r5
 11113                             		.loc 2 11311 22
 11114 00c2 4B 55                   		add	r5, r5
 11115 00c4 EF 54                   		mov.L	r5, r4
 11116                             		.loc 2 11311 30
 11117 00c6 EC 65                   		mov.L	[r6], r5
 11118 00c8 A8 5D                   		mov.L	4[r5], r5
 11119                             		.loc 2 11311 13
 11120 00ca 47 54                   		cmp	r5, r4
 11121 00cc 29 05                   		blt	.L729
11312:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 11122                             		.loc 2 11312 13
 11123 00ce F8 A6 FD                		mov.L	#-3, [r10]
 11124                             		.balign 8,3,1
 11125                             	.L729:
11313:../src/wolfcrypt/src/sp_int.c ****     }
11314:../src/wolfcrypt/src/sp_int.c **** 
11315:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
11316:../src/wolfcrypt/src/sp_int.c ****         /* Use code optimized for specific sizes if possible */
11317:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH) || defined(WOLFSSL_SP_MATH_ALL)) && \
11318:../src/wolfcrypt/src/sp_int.c ****     (defined(WOLFSSL_HAVE_SP_RSA) || defined(WOLFSSL_HAVE_SP_DH))
11319:../src/wolfcrypt/src/sp_int.c ****     #ifndef WOLFSSL_SP_NO_2048
11320:../src/wolfcrypt/src/sp_int.c ****         if ((mBits == 1024) && sp_isodd(m) && (bBits <= 1024) &&
11321:../src/wolfcrypt/src/sp_int.c ****             (eBits <= 1024)) {
11322:../src/wolfcrypt/src/sp_int.c ****             err = sp_ModExp_1024(b, e, m, r);
11323:../src/wolfcrypt/src/sp_int.c ****             done = 1;
11324:../src/wolfcrypt/src/sp_int.c ****         }
11325:../src/wolfcrypt/src/sp_int.c ****         else if ((mBits == 2048) && sp_isodd(m) && (bBits <= 2048) &&
11326:../src/wolfcrypt/src/sp_int.c ****                  (eBits <= 2048)) {
11327:../src/wolfcrypt/src/sp_int.c ****             err = sp_ModExp_2048(b, e, m, r);
11328:../src/wolfcrypt/src/sp_int.c ****             done = 1;
11329:../src/wolfcrypt/src/sp_int.c ****         }
11330:../src/wolfcrypt/src/sp_int.c ****         else
11331:../src/wolfcrypt/src/sp_int.c ****     #endif
11332:../src/wolfcrypt/src/sp_int.c ****     #ifndef WOLFSSL_SP_NO_3072
11333:../src/wolfcrypt/src/sp_int.c ****         if ((mBits == 1536) && sp_isodd(m) && (bBits <= 1536) &&
11334:../src/wolfcrypt/src/sp_int.c ****             (eBits <= 1536)) {
11335:../src/wolfcrypt/src/sp_int.c ****             err = sp_ModExp_1536(b, e, m, r);
11336:../src/wolfcrypt/src/sp_int.c ****             done = 1;
11337:../src/wolfcrypt/src/sp_int.c ****         }
11338:../src/wolfcrypt/src/sp_int.c ****         else if ((mBits == 3072) && sp_isodd(m) && (bBits <= 3072) &&
11339:../src/wolfcrypt/src/sp_int.c ****                  (eBits <= 3072)) {
11340:../src/wolfcrypt/src/sp_int.c ****             err = sp_ModExp_3072(b, e, m, r);
11341:../src/wolfcrypt/src/sp_int.c ****             done = 1;
11342:../src/wolfcrypt/src/sp_int.c ****         }
11343:../src/wolfcrypt/src/sp_int.c ****         else
11344:../src/wolfcrypt/src/sp_int.c ****     #endif
11345:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_4096
11346:../src/wolfcrypt/src/sp_int.c ****         if ((mBits == 4096) && sp_isodd(m) && (bBits <= 4096) &&
11347:../src/wolfcrypt/src/sp_int.c ****             (eBits <= 4096)) {
11348:../src/wolfcrypt/src/sp_int.c ****             err = sp_ModExp_4096(b, e, m, r);
11349:../src/wolfcrypt/src/sp_int.c ****             done = 1;
11350:../src/wolfcrypt/src/sp_int.c ****         }
11351:../src/wolfcrypt/src/sp_int.c ****         else
11352:../src/wolfcrypt/src/sp_int.c ****     #endif
11353:../src/wolfcrypt/src/sp_int.c **** #endif
11354:../src/wolfcrypt/src/sp_int.c ****         {
11355:../src/wolfcrypt/src/sp_int.c ****         }
11356:../src/wolfcrypt/src/sp_int.c ****     }
11357:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || !defined(NO_DH)
11358:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_RSA_VERIFY_ONLY) || defined(WOLFSSL_RSA_PUBLIC_ONLY)) && \
11359:../src/wolfcrypt/src/sp_int.c ****     defined(NO_DH)
11360:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY))
11361:../src/wolfcrypt/src/sp_int.c ****         err = sp_exptmod_nct(b, e, m, r);
11362:../src/wolfcrypt/src/sp_int.c ****     }
11363:../src/wolfcrypt/src/sp_int.c **** #else
11364:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL)
11365:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY) && (b->used == 1) && (b->dp[0] == 2) &&
 11126                             		.loc 2 11365 8
 11127 00d1 ED A5 01                		mov.L	4[r10], r5
 11128 00d4 61 05                   		cmp	#0, r5
 11129 00d6 21 41                   		bne	.L725
 11130                             		.loc 2 11365 17 discriminator 1
 11131 00d8 EC A5                   		mov.L	[r10], r5
 11132 00da 61 05                   		cmp	#0, r5
 11133 00dc 21 3B                   		bne	.L725
 11134                             		.loc 2 11365 42 discriminator 2
 11135 00de ED A5 05                		mov.L	20[r10], r5
 11136 00e1 EC 55                   		mov.L	[r5], r5
 11137                             		.loc 2 11365 37 discriminator 2
 11138 00e3 61 15                   		cmp	#1, r5
 11139 00e5 21 32                   		bne	.L725
 11140                             		.loc 2 11365 64 discriminator 3
 11141 00e7 ED A5 05                		mov.L	20[r10], r5
 11142 00ea A8 D5                   		mov.L	8[r5], r5
 11143                             		.loc 2 11365 55 discriminator 3
 11144 00ec 61 25                   		cmp	#2, r5
 11145 00ee 21 29                   		bne	.L725
11366:../src/wolfcrypt/src/sp_int.c ****          mp_isodd(m)) {
 11146                             		.loc 2 11366 10 discriminator 4
 11147 00f0 ED A5 08                		mov.L	32[r10], r5
 11148 00f3 EC 55                   		mov.L	[r5], r5
11365:../src/wolfcrypt/src/sp_int.c ****          mp_isodd(m)) {
 11149                             		.loc 2 11365 74 discriminator 4
 11150 00f5 61 05                   		cmp	#0, r5
 11151 00f7 20 20                   		beq	.L725
 11152                             		.loc 2 11366 10
 11153 00f9 ED A5 08                		mov.L	32[r10], r5
 11154 00fc A8 D5                   		mov.L	8[r5], r5
 11155 00fe 64 15                   		and	#1, r5
 11156 0100 61 05                   		cmp	#0, r5
 11157 0102 20 15                   		beq	.L725
11367:../src/wolfcrypt/src/sp_int.c ****         /* Use the generic base 2 implementation. */
11368:../src/wolfcrypt/src/sp_int.c ****         err = _sp_exptmod_base_2(e, digits, m, r);
 11158                             		.loc 2 11368 15
 11159 0104 EC 64                   		mov.L	[r6], r4
 11160 0106 ED A3 08                		mov.L	32[r10], r3
 11161 0109 ED A2 07                		mov.L	28[r10], r2
 11162 010c ED A1 06                		mov.L	24[r10], r1
 11163 010f 05 00 00 00             		bsr	__sp_exptmod_base_2
 11164 0113 E3 A1                   		mov.L	r1, [r10]
 11165                             		.loc 2 11368 13
 11166 0115 2E 6F                   		bra	.L726
 11167                             	.L725:
11369:../src/wolfcrypt/src/sp_int.c ****     }
11370:../src/wolfcrypt/src/sp_int.c ****     else if ((!done) && (err == MP_OKAY) && ((m->used > 1) && mp_isodd(m))) {
 11168                             		.loc 2 11370 13
 11169 0117 ED A5 01                		mov.L	4[r10], r5
 11170 011a 61 05                   		cmp	#0, r5
 11171 011c 21 41                   		bne	.L727
 11172                             		.loc 2 11370 22 discriminator 1
 11173 011e EC A5                   		mov.L	[r10], r5
 11174 0120 61 05                   		cmp	#0, r5
 11175 0122 21 3B                   		bne	.L727
 11176                             		.loc 2 11370 48 discriminator 2
 11177 0124 ED A5 08                		mov.L	32[r10], r5
 11178 0127 EC 55                   		mov.L	[r5], r5
 11179                             		.loc 2 11370 42 discriminator 2
 11180 0129 61 15                   		cmp	#1, r5
 11181 012b 2B 32                   		ble	.L727
 11182                             		.loc 2 11370 63 discriminator 3
 11183 012d ED A5 08                		mov.L	32[r10], r5
 11184 0130 EC 55                   		mov.L	[r5], r5
 11185                             		.loc 2 11370 60 discriminator 3
 11186 0132 61 05                   		cmp	#0, r5
 11187 0134 20 29                   		beq	.L727
 11188                             		.loc 2 11370 63 discriminator 4
 11189 0136 ED A5 08                		mov.L	32[r10], r5
 11190 0139 A8 D5                   		mov.L	8[r5], r5
 11191 013b 64 15                   		and	#1, r5
 11192 013d 61 05                   		cmp	#0, r5
 11193 013f 20 1E                   		beq	.L727
11371:../src/wolfcrypt/src/sp_int.c ****     #ifndef WC_NO_HARDEN
11372:../src/wolfcrypt/src/sp_int.c ****         err = _sp_exptmod_mont_ex(b, e, digits * SP_WORD_SIZE, m, r);
 11194                             		.loc 2 11372 15
 11195 0141 ED A5 07                		mov.L	28[r10], r5
 11196 0144 6C 55                   		shll	#5, r5
 11197 0146 EC 64                   		mov.L	[r6], r4
 11198 0148 E3 04                   		mov.L	r4, [r0]
 11199 014a ED A4 08                		mov.L	32[r10], r4
 11200 014d EF 53                   		mov.L	r5, r3
 11201 014f ED A2 06                		mov.L	24[r10], r2
 11202 0152 ED A1 05                		mov.L	20[r10], r1
 11203 0155 05 00 00 00             		bsr	__sp_exptmod_mont_ex
 11204 0159 E3 A1                   		mov.L	r1, [r10]
 11205                             		.loc 2 11372 13
 11206 015b 2E 29                   		bra	.L726
 11207                             	.L727:
11373:../src/wolfcrypt/src/sp_int.c ****     #else
11374:../src/wolfcrypt/src/sp_int.c ****         err = sp_exptmod_nct(b, e, m, r);
11375:../src/wolfcrypt/src/sp_int.c ****     #endif
11376:../src/wolfcrypt/src/sp_int.c ****     }
11377:../src/wolfcrypt/src/sp_int.c ****     else
11378:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL */
11379:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
 11208                             		.loc 2 11379 8
 11209 015d ED A5 01                		mov.L	4[r10], r5
 11210 0160 61 05                   		cmp	#0, r5
 11211 0162 21 22                   		bne	.L726
 11212                             		.loc 2 11379 17 discriminator 1
 11213 0164 EC A5                   		mov.L	[r10], r5
 11214 0166 61 05                   		cmp	#0, r5
 11215 0168 21 1C                   		bne	.L726
11380:../src/wolfcrypt/src/sp_int.c ****         /* Otherwise use the generic implementation. */
11381:../src/wolfcrypt/src/sp_int.c ****         err = _sp_exptmod_ex(b, e, digits * SP_WORD_SIZE, m, r);
 11216                             		.loc 2 11381 15
 11217 016a ED A5 07                		mov.L	28[r10], r5
 11218 016d 6C 55                   		shll	#5, r5
 11219 016f EC 64                   		mov.L	[r6], r4
 11220 0171 E3 04                   		mov.L	r4, [r0]
 11221 0173 ED A4 08                		mov.L	32[r10], r4
 11222 0176 EF 53                   		mov.L	r5, r3
 11223 0178 ED A2 06                		mov.L	24[r10], r2
 11224 017b ED A1 05                		mov.L	20[r10], r1
 11225 017e 05 00 00 00             		bsr	__sp_exptmod_ex
 11226 0182 E3 A1                   		mov.L	r1, [r10]
 11227                             		.balign 8,3,1
 11228                             	.L726:
11382:../src/wolfcrypt/src/sp_int.c ****     }
11383:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_RSA_VERIFY_ONLY || WOLFSSL_RSA_PUBLIC_ONLY */
11384:../src/wolfcrypt/src/sp_int.c **** #else
11385:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
11386:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
11387:../src/wolfcrypt/src/sp_int.c ****     }
11388:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_HAVE_SP_DH */
11389:../src/wolfcrypt/src/sp_int.c **** 
11390:../src/wolfcrypt/src/sp_int.c ****     (void)mBits;
11391:../src/wolfcrypt/src/sp_int.c ****     (void)bBits;
11392:../src/wolfcrypt/src/sp_int.c ****     (void)eBits;
11393:../src/wolfcrypt/src/sp_int.c ****     (void)digits;
11394:../src/wolfcrypt/src/sp_int.c **** 
11395:../src/wolfcrypt/src/sp_int.c **** #if 0
11396:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
11397:../src/wolfcrypt/src/sp_int.c ****         sp_print(r, "rme");
11398:../src/wolfcrypt/src/sp_int.c ****     }
11399:../src/wolfcrypt/src/sp_int.c **** #endif
11400:../src/wolfcrypt/src/sp_int.c ****     return err;
 11229                             		.loc 2 11400 12
 11230 0184 EC A5                   		mov.L	[r10], r5
11401:../src/wolfcrypt/src/sp_int.c **** }
 11231                             		.loc 2 11401 1
 11232 0186 EF 51                   		mov.L	r5, r1
 11233 0188 71 00 2C                		add	#44, r0
 11234 018b 7E B6                   		pop	r6
 11235 018d 7E BA                   		pop	r10
 11236 018f 02                      		rts
 11237                             	.LFE105:
 11239                             		.section	.text.sp_exptmod,"ax",@progbits
 11240                             		.global	_sp_exptmod
 11242                             	_sp_exptmod:
 11243                             	.LFB106:
11402:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_HAVE_SP_DH */
11403:../src/wolfcrypt/src/sp_int.c **** 
11404:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
11405:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_DH) || (!defined(NO_RSA) && defined(WOLFSSL_KEY_GEN))
11406:../src/wolfcrypt/src/sp_int.c **** /* Exponentiates b to the power of e modulo m into r: r = b ^ e mod m
11407:../src/wolfcrypt/src/sp_int.c ****  *
11408:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer that is the base.
11409:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e  SP integer that is the exponent.
11410:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m  SP integer that is the modulus.
11411:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
11412:../src/wolfcrypt/src/sp_int.c ****  *
11413:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
11414:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when b, e, m or r is NULL; or m <= 0 or e is negative.
11415:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
11416:../src/wolfcrypt/src/sp_int.c ****  */
11417:../src/wolfcrypt/src/sp_int.c **** int sp_exptmod(sp_int* b, sp_int* e, sp_int* m, sp_int* r)
11418:../src/wolfcrypt/src/sp_int.c **** {
 11244                             		.loc 2 11418 1
 11245 0000 7E AA                   		push.l	r10
 11246                             	.LCFI136:
 11247 0002 71 0A EC                		add	#-20, r0, r10
 11248                             	.LCFI137:
 11249 0005 71 A0 FC                		add	#-4, r10, r0
 11250                             	.LCFI138:
 11251 0008 E7 A1 01                		mov.L	r1, 4[r10]
 11252 000b E7 A2 02                		mov.L	r2, 8[r10]
 11253 000e E7 A3 03                		mov.L	r3, 12[r10]
 11254 0011 E7 A4 04                		mov.L	r4, 16[r10]
11419:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 11255                             		.loc 2 11419 9
 11256 0014 F8 A6 00                		mov.L	#0, [r10]
11420:../src/wolfcrypt/src/sp_int.c **** 
11421:../src/wolfcrypt/src/sp_int.c ****     if ((b == NULL) || (e == NULL) || (m == NULL) || (r == NULL)) {
 11257                             		.loc 2 11421 8
 11258 0017 ED A5 01                		mov.L	4[r10], r5
 11259 001a 61 05                   		cmp	#0, r5
 11260 001c 20 15                   		beq	.L731
 11261                             		.loc 2 11421 21 discriminator 1
 11262 001e ED A5 02                		mov.L	8[r10], r5
 11263 0021 61 05                   		cmp	#0, r5
 11264 0023 20 0E                   		beq	.L731
 11265                             		.loc 2 11421 36 discriminator 2
 11266 0025 ED A5 03                		mov.L	12[r10], r5
 11267 0028 61 05                   		cmp	#0, r5
 11268 002a 17                      		beq	.L731
 11269                             		.loc 2 11421 51 discriminator 3
 11270 002b ED A5 04                		mov.L	16[r10], r5
 11271 002e 61 05                   		cmp	#0, r5
 11272 0030 1C                      		bne	.L732
 11273                             		.balign 8,3,4
 11274                             	.L731:
11422:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 11275                             		.loc 2 11422 13
 11276 0031 F8 A6 FD                		mov.L	#-3, [r10]
 11277                             	.L732:
11423:../src/wolfcrypt/src/sp_int.c ****     }
11424:../src/wolfcrypt/src/sp_int.c ****     SAVE_VECTOR_REGISTERS(err = _svr_ret;);
11425:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 11278                             		.loc 2 11425 8
 11279 0034 EC A5                   		mov.L	[r10], r5
 11280 0036 61 05                   		cmp	#0, r5
 11281 0038 21 1D                   		bne	.L733
11426:../src/wolfcrypt/src/sp_int.c ****         err = sp_exptmod_ex(b, e, e->used, m, r);
 11282                             		.loc 2 11426 15
 11283 003a ED A5 02                		mov.L	8[r10], r5
 11284 003d EC 55                   		mov.L	[r5], r5
 11285 003f ED A4 04                		mov.L	16[r10], r4
 11286 0042 E3 04                   		mov.L	r4, [r0]
 11287 0044 ED A4 03                		mov.L	12[r10], r4
 11288 0047 EF 53                   		mov.L	r5, r3
 11289 0049 ED A2 02                		mov.L	8[r10], r2
 11290 004c ED A1 01                		mov.L	4[r10], r1
 11291 004f 05 00 00 00             		bsr	_sp_exptmod_ex
 11292 0053 E3 A1                   		mov.L	r1, [r10]
 11293                             	.L733:
11427:../src/wolfcrypt/src/sp_int.c ****     }
11428:../src/wolfcrypt/src/sp_int.c ****     RESTORE_VECTOR_REGISTERS();
11429:../src/wolfcrypt/src/sp_int.c ****     return err;
 11294                             		.loc 2 11429 12
 11295 0055 EC A5                   		mov.L	[r10], r5
11430:../src/wolfcrypt/src/sp_int.c **** }
 11296                             		.loc 2 11430 1
 11297 0057 EF 51                   		mov.L	r5, r1
 11298 0059 3F AA 07                		rtsd	#28, r10-r10
 11299                             	.LFE106:
 11301 005c 76 10 01 00             		.section	.text._sp_exptmod_nct,"ax",@progbits
 11303                             	__sp_exptmod_nct:
 11304                             	.LFB107:
11431:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY) ||
11432:../src/wolfcrypt/src/sp_int.c ****         * WOLFSSL_HAVE_SP_DH */
11433:../src/wolfcrypt/src/sp_int.c **** 
11434:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || defined(WOLFSSL_HAVE_SP_DH)
11435:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_FAST_NCT_EXPTMOD) || !defined(WOLFSSL_SP_SMALL)
11436:../src/wolfcrypt/src/sp_int.c **** 
11437:../src/wolfcrypt/src/sp_int.c **** /* Always allocate large array of sp_ints unless defined WOLFSSL_SP_NO_MALLOC */
11438:../src/wolfcrypt/src/sp_int.c **** #define SP_ALLOC
11439:../src/wolfcrypt/src/sp_int.c **** 
11440:../src/wolfcrypt/src/sp_int.c **** /* Internal. Exponentiates b to the power of e modulo m into r: r = b ^ e mod m
11441:../src/wolfcrypt/src/sp_int.c ****  * Creates a window of precalculated exponents with base in montgomery form.
11442:../src/wolfcrypt/src/sp_int.c ****  * Sliding window and is NOT constant time.
11443:../src/wolfcrypt/src/sp_int.c ****  *
11444:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b     SP integer that is the base.
11445:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e     SP integer that is the exponent.
11446:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   bits  Number of bits in base to use. May be greater than
11447:../src/wolfcrypt/src/sp_int.c ****  *                      count of bits in b.
11448:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m     SP integer that is the modulus.
11449:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r     SP integer to hold result.
11450:../src/wolfcrypt/src/sp_int.c ****  *
11451:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
11452:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
11453:../src/wolfcrypt/src/sp_int.c ****  */
11454:../src/wolfcrypt/src/sp_int.c **** static int _sp_exptmod_nct(sp_int* b, sp_int* e, sp_int* m, sp_int* r)
11455:../src/wolfcrypt/src/sp_int.c **** {
 11305                             		.loc 2 11455 1
 11306 0000 6E 7A                   		pushm	r7-r10
 11307                             	.LCFI139:
 11308 0002 72 0A 18 FF             		add	#-232, r0, r10
 11309                             	.LCFI140:
 11310 0006 EF A0                   		mov.L	r10, r0
 11311 0008 E7 A1 36                		mov.L	r1, 216[r10]
 11312 000b E7 A2 37                		mov.L	r2, 220[r10]
 11313 000e E7 A3 38                		mov.L	r3, 224[r10]
 11314 0011 E7 A4 39                		mov.L	r4, 228[r10]
11456:../src/wolfcrypt/src/sp_int.c ****     int i = 0;
 11315                             		.loc 2 11456 9
 11316 0014 F8 A6 00                		mov.L	#0, [r10]
11457:../src/wolfcrypt/src/sp_int.c ****     int j = 0;
 11317                             		.loc 2 11457 9
 11318 0017 F9 A6 01 00             		mov.L	#0, 4[r10]
11458:../src/wolfcrypt/src/sp_int.c ****     int c = 0;
 11319                             		.loc 2 11458 9
 11320 001b F9 A6 02 00             		mov.L	#0, 8[r10]
11459:../src/wolfcrypt/src/sp_int.c ****     int y = 0;
 11321                             		.loc 2 11459 9
 11322 001f F9 A6 03 00             		mov.L	#0, 12[r10]
11460:../src/wolfcrypt/src/sp_int.c ****     int bits;
11461:../src/wolfcrypt/src/sp_int.c ****     int winBits;
11462:../src/wolfcrypt/src/sp_int.c ****     int preCnt;
11463:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 11323                             		.loc 2 11463 9
 11324 0023 F9 A6 05 00             		mov.L	#0, 20[r10]
11464:../src/wolfcrypt/src/sp_int.c ****     int done = 0;
 11325                             		.loc 2 11464 9
 11326 0027 F9 A6 06 00             		mov.L	#0, 24[r10]
11465:../src/wolfcrypt/src/sp_int.c ****     sp_int* tr = NULL;
 11327                             		.loc 2 11465 13
 11328 002b F9 A6 07 00             		mov.L	#0, 28[r10]
11466:../src/wolfcrypt/src/sp_int.c ****     sp_int* bm = NULL;
 11329                             		.loc 2 11466 13
 11330 002f F9 A6 08 00             		mov.L	#0, 32[r10]
11467:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit mask;
11468:../src/wolfcrypt/src/sp_int.c ****     /* Maximum winBits is 6 and preCnt is (1 << (winBits - 1)). */
11469:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, m->used * 2 + 1, (1 << 5) + 2);
 11331                             		.loc 2 11469 5
 11332 0033 F9 A6 09 00             		mov.L	#0, 36[r10]
 11333 0037 71 A5 4C                		add	#0x4c, r10, r5
 11334 003a EF 51                   		mov.L	r5, r1
 11335 003c 75 43 88                		mov.L	#0x88, r3
 11336 003f 66 02                   		mov	#0, r2
 11337 0041 7F 88                   		sstr.b
11470:../src/wolfcrypt/src/sp_int.c **** 
11471:../src/wolfcrypt/src/sp_int.c ****     bits = sp_count_bits(e);
 11338                             		.loc 2 11471 12
 11339 0043 ED A1 37                		mov.L	220[r10], r1
 11340 0046 05 00 00 00             		bsr	_sp_count_bits
 11341 004a E7 A1 0F                		mov.L	r1, 60[r10]
11472:../src/wolfcrypt/src/sp_int.c **** 
11473:../src/wolfcrypt/src/sp_int.c ****     if (bits > 450) {
 11342                             		.loc 2 11473 8
 11343 004d ED A5 0F                		mov.L	60[r10], r5
 11344 0050 76 05 C2 01             		cmp	#0x1c2, r5
 11345 0054 2B 08                   		ble	.L736
11474:../src/wolfcrypt/src/sp_int.c ****         winBits = 6;
 11346                             		.loc 2 11474 17
 11347 0056 F9 A6 04 06             		mov.L	#6, 16[r10]
 11348 005a 2E 2F                   		bra	.L737
 11349                             	.L736:
11475:../src/wolfcrypt/src/sp_int.c ****     }
11476:../src/wolfcrypt/src/sp_int.c ****     else if (bits <= 21) {
 11350                             		.loc 2 11476 13
 11351 005c ED A5 0F                		mov.L	60[r10], r5
 11352 005f 75 55 15                		cmp	#21, r5
 11353 0062 2A 08                   		bgt	.L738
11477:../src/wolfcrypt/src/sp_int.c ****         winBits = 1;
 11354                             		.loc 2 11477 17
 11355 0064 F9 A6 04 01             		mov.L	#1, 16[r10]
 11356 0068 2E 21                   		bra	.L737
 11357                             	.L738:
11478:../src/wolfcrypt/src/sp_int.c ****     }
11479:../src/wolfcrypt/src/sp_int.c ****     else if (bits <= 36) {
 11358                             		.loc 2 11479 13
 11359 006a ED A5 0F                		mov.L	60[r10], r5
 11360 006d 75 55 24                		cmp	#36, r5
 11361 0070 2A 08                   		bgt	.L739
11480:../src/wolfcrypt/src/sp_int.c ****         winBits = 3;
 11362                             		.loc 2 11480 17
 11363 0072 F9 A6 04 03             		mov.L	#3, 16[r10]
 11364 0076 2E 13                   		bra	.L737
 11365                             	.L739:
11481:../src/wolfcrypt/src/sp_int.c ****     }
11482:../src/wolfcrypt/src/sp_int.c ****     else if (bits <= 140) {
 11366                             		.loc 2 11482 13
 11367 0078 ED A5 0F                		mov.L	60[r10], r5
 11368 007b 75 55 8C                		cmp	#0x8c, r5
 11369 007e 2A 07                   		bgt	.L740
11483:../src/wolfcrypt/src/sp_int.c ****         winBits = 4;
 11370                             		.loc 2 11483 17
 11371 0080 F9 A6 04 04             		mov.L	#4, 16[r10]
 11372 0084 0D                      		bra	.L737
 11373                             	.L740:
11484:../src/wolfcrypt/src/sp_int.c ****     }
11485:../src/wolfcrypt/src/sp_int.c ****     else {
11486:../src/wolfcrypt/src/sp_int.c ****         winBits = 5;
 11374                             		.loc 2 11486 17
 11375 0085 F9 A6 04 05             		mov.L	#5, 16[r10]
 11376                             		.balign 8,3,1
 11377                             	.L737:
11487:../src/wolfcrypt/src/sp_int.c ****     }
11488:../src/wolfcrypt/src/sp_int.c ****     preCnt = 1 << (winBits - 1);
 11378                             		.loc 2 11488 28
 11379 0089 ED A5 04                		mov.L	16[r10], r5
 11380 008c 60 15                   		sub	#1, r5
 11381                             		.loc 2 11488 12
 11382 008e 66 14                   		mov.L	#1, r4
 11383 0090 EF 47                   		mov.L	r4, r7
 11384 0092 FD 62 57                		shll	r5, r7
 11385 0095 EF 75                   		mov.L	r7, r5
 11386 0097 E7 A5 10                		mov.L	r5, 64[r10]
11489:../src/wolfcrypt/src/sp_int.c ****     mask = preCnt - 1;
 11387                             		.loc 2 11489 19
 11388 009a ED A5 10                		mov.L	64[r10], r5
 11389 009d 60 15                   		sub	#1, r5
 11390                             		.loc 2 11489 10
 11391 009f E7 A5 11                		mov.L	r5, 68[r10]
11490:../src/wolfcrypt/src/sp_int.c **** 
11491:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, m->used * 2 + 1, preCnt + 2, err, NULL);
 11392                             		.loc 2 11491 5
 11393 00a2 ED A5 05                		mov.L	20[r10], r5
 11394 00a5 61 05                   		cmp	#0, r5
 11395 00a7 3B AB 00                		bne	.L741
 11396                             		.loc 2 11491 5 is_stmt 0 discriminator 1
 11397 00aa ED A5 38                		mov.L	224[r10], r5
 11398 00ad EC 55                   		mov.L	[r5], r5
 11399 00af 4B 55                   		add	r5, r5
 11400 00b1 75 05 FF                		cmp	#-1, r5
 11401 00b4 20 0C                   		beq	.L742
 11402                             		.loc 2 11491 5 discriminator 2
 11403 00b6 ED A5 38                		mov.L	224[r10], r5
 11404 00b9 EC 55                   		mov.L	[r5], r5
 11405 00bb 6C 35                   		shll	#3, r5
 11406 00bd 62 C5                   		add	#12, r5
 11407 00bf 0B                      		bra	.L743
 11408                             	.L742:
 11409                             		.loc 2 11491 5 discriminator 3
 11410 00c0 66 C5                   		mov.L	#12, r5
 11411                             	.L743:
 11412                             		.loc 2 11491 5 discriminator 5
 11413 00c2 ED A4 10                		mov.L	64[r10], r4
 11414 00c5 62 24                   		add	#2, r4
 11415 00c7 4F 45                   		mul	r4, r5
 11416 00c9 EF 51                   		mov.L	r5, r1
 11417 00cb 05 00 00 00             		bsr	_wolfSSL_Malloc
 11418 00cf E7 A1 09                		mov.L	r1, 36[r10]
 11419 00d2 ED A5 09                		mov.L	36[r10], r5
 11420 00d5 61 05                   		cmp	#0, r5
 11421 00d7 1F                      		bne	.L744
 11422                             		.loc 2 11491 5 discriminator 6
 11423 00d8 F9 A6 05 FE             		mov.L	#-2, 20[r10]
 11424 00dc 2E 76                   		bra	.L741
 11425                             	.L744:
 11426                             	.LBB67:
 11427                             		.loc 2 11491 5 discriminator 7
 11428 00de ED A5 09                		mov.L	36[r10], r5
 11429 00e1 E7 A5 13                		mov.L	r5, 76[r10]
 11430 00e4 ED A5 38                		mov.L	224[r10], r5
 11431 00e7 EC 55                   		mov.L	[r5], r5
 11432 00e9 4B 55                   		add	r5, r5
 11433 00eb EF 54                   		mov.L	r5, r4
 11434 00ed ED A5 13                		mov.L	76[r10], r5
 11435 00f0 62 14                   		add	#1, r4
 11436 00f2 A0 5C                   		mov.L	r4, 4[r5]
 11437 00f4 F9 A6 0A 01             		mov.L	#1, 40[r10]
 11438 00f8 2E 4E                   		bra	.L745
 11439                             	.L748:
 11440                             		.loc 2 11491 5 discriminator 14
 11441 00fa ED A5 0A                		mov.L	40[r10], r5
 11442 00fd 60 15                   		sub	#1, r5
 11443 00ff 6C 25                   		shll	#2, r5
 11444 0101 4B A5                   		add	r10, r5
 11445 0103 AC DC                   		mov.L	76[r5], r4
 11446 0105 ED A5 38                		mov.L	224[r10], r5
 11447 0108 EC 55                   		mov.L	[r5], r5
 11448 010a 4B 55                   		add	r5, r5
 11449 010c 75 05 FF                		cmp	#-1, r5
 11450 010f 20 0C                   		beq	.L746
 11451                             		.loc 2 11491 5 discriminator 9
 11452 0111 ED A5 38                		mov.L	224[r10], r5
 11453 0114 EC 55                   		mov.L	[r5], r5
 11454 0116 6C 35                   		shll	#3, r5
 11455 0118 62 C5                   		add	#12, r5
 11456 011a 0B                      		bra	.L747
 11457                             	.L746:
 11458                             		.loc 2 11491 5 discriminator 10
 11459 011b 66 C5                   		mov.L	#12, r5
 11460                             	.L747:
 11461                             		.loc 2 11491 5 discriminator 12
 11462 011d 4B 54                   		add	r5, r4
 11463 011f ED A5 0A                		mov.L	40[r10], r5
 11464 0122 6C 25                   		shll	#2, r5
 11465 0124 4B A5                   		add	r10, r5
 11466 0126 A4 DC                   		mov.L	r4, 76[r5]
 11467 0128 ED A5 38                		mov.L	224[r10], r5
 11468 012b EC 55                   		mov.L	[r5], r5
 11469 012d 4B 55                   		add	r5, r5
 11470 012f EF 54                   		mov.L	r5, r4
 11471 0131 ED A5 0A                		mov.L	40[r10], r5
 11472 0134 6C 25                   		shll	#2, r5
 11473 0136 4B A5                   		add	r10, r5
 11474 0138 AC DD                   		mov.L	76[r5], r5
 11475 013a 62 14                   		add	#1, r4
 11476 013c A0 5C                   		mov.L	r4, 4[r5]
 11477 013e ED A5 0A                		mov.L	40[r10], r5
 11478 0141 62 15                   		add	#1, r5
 11479 0143 E7 A5 0A                		mov.L	r5, 40[r10]
 11480                             	.L745:
 11481                             		.loc 2 11491 5 discriminator 13
 11482 0146 ED A5 10                		mov.L	64[r10], r5
 11483 0149 62 15                   		add	#1, r5
 11484 014b ED A4 0A                		mov.L	40[r10], r4
 11485 014e 47 54                   		cmp	r5, r4
 11486 0150 2B AA                   		ble	.L748
 11487                             	.L741:
 11488                             	.LBE67:
11492:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 11489                             		.loc 2 11492 8 is_stmt 1
 11490 0152 ED A5 05                		mov.L	20[r10], r5
 11491 0155 61 05                   		cmp	#0, r5
 11492 0157 3B BB 00                		bne	.L749
11493:../src/wolfcrypt/src/sp_int.c ****         /* Initialize window numbers and temporary result. */
11494:../src/wolfcrypt/src/sp_int.c ****         tr = t[preCnt + 0];
 11493                             		.loc 2 11494 12
 11494 015a ED A5 10                		mov.L	64[r10], r5
 11495 015d 6C 25                   		shll	#2, r5
 11496 015f 4B A5                   		add	r10, r5
 11497 0161 AC DD                   		mov.L	76[r5], r5
 11498 0163 E7 A5 07                		mov.L	r5, 28[r10]
11495:../src/wolfcrypt/src/sp_int.c ****         bm = t[preCnt + 1];
 11499                             		.loc 2 11495 23
 11500 0166 ED A5 10                		mov.L	64[r10], r5
 11501 0169 62 15                   		add	#1, r5
 11502                             		.loc 2 11495 12
 11503 016b 6C 25                   		shll	#2, r5
 11504 016d 4B A5                   		add	r10, r5
 11505 016f AC DD                   		mov.L	76[r5], r5
 11506 0171 E7 A5 08                		mov.L	r5, 32[r10]
11496:../src/wolfcrypt/src/sp_int.c **** 
11497:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < preCnt; i++) {
 11507                             		.loc 2 11497 16
 11508 0174 F8 A6 00                		mov.L	#0, [r10]
 11509                             		.loc 2 11497 9
 11510 0177 2E 21                   		bra	.L750
 11511                             	.L751:
11498:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(t[i], m->used * 2 + 1);
 11512                             		.loc 2 11498 13 discriminator 3
 11513 0179 EC A5                   		mov.L	[r10], r5
 11514 017b 6C 25                   		shll	#2, r5
 11515 017d 4B A5                   		add	r10, r5
 11516 017f AC DC                   		mov.L	76[r5], r4
 11517                             		.loc 2 11498 33 discriminator 3
 11518 0181 ED A5 38                		mov.L	224[r10], r5
 11519 0184 EC 55                   		mov.L	[r5], r5
 11520                             		.loc 2 11498 40 discriminator 3
 11521 0186 4B 55                   		add	r5, r5
 11522                             		.loc 2 11498 13 discriminator 3
 11523 0188 62 15                   		add	#1, r5
 11524 018a EF 52                   		mov.L	r5, r2
 11525 018c EF 41                   		mov.L	r4, r1
 11526 018e 05 00 00 00             		bsr	_sp_init_size
11497:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(t[i], m->used * 2 + 1);
 11527                             		.loc 2 11497 34 discriminator 3
 11528 0192 EC A5                   		mov.L	[r10], r5
 11529 0194 62 15                   		add	#1, r5
 11530 0196 E3 A5                   		mov.L	r5, [r10]
 11531                             	.L750:
11497:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(t[i], m->used * 2 + 1);
 11532                             		.loc 2 11497 9 discriminator 1
 11533 0198 EC A4                   		mov.L	[r10], r4
 11534 019a ED A5 10                		mov.L	64[r10], r5
 11535 019d 47 54                   		cmp	r5, r4
 11536 019f 29 DA                   		blt	.L751
11499:../src/wolfcrypt/src/sp_int.c ****         }
11500:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(tr, m->used * 2 + 1);
 11537                             		.loc 2 11500 27
 11538 01a1 ED A5 38                		mov.L	224[r10], r5
 11539 01a4 EC 55                   		mov.L	[r5], r5
 11540                             		.loc 2 11500 34
 11541 01a6 4B 55                   		add	r5, r5
 11542                             		.loc 2 11500 9
 11543 01a8 62 15                   		add	#1, r5
 11544 01aa EF 52                   		mov.L	r5, r2
 11545 01ac ED A1 07                		mov.L	28[r10], r1
 11546 01af 05 00 00 00             		bsr	_sp_init_size
11501:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(bm, m->used * 2 + 1);
 11547                             		.loc 2 11501 27
 11548 01b3 ED A5 38                		mov.L	224[r10], r5
 11549 01b6 EC 55                   		mov.L	[r5], r5
 11550                             		.loc 2 11501 34
 11551 01b8 4B 55                   		add	r5, r5
 11552                             		.loc 2 11501 9
 11553 01ba 62 15                   		add	#1, r5
 11554 01bc EF 52                   		mov.L	r5, r2
 11555 01be ED A1 08                		mov.L	32[r10], r1
 11556 01c1 05 00 00 00             		bsr	_sp_init_size
11502:../src/wolfcrypt/src/sp_int.c **** 
11503:../src/wolfcrypt/src/sp_int.c ****         /* Ensure base is less than exponent. */
11504:../src/wolfcrypt/src/sp_int.c ****         if (_sp_cmp_abs(b, m) != MP_LT) {
 11557                             		.loc 2 11504 13
 11558 01c5 ED A2 38                		mov.L	224[r10], r2
 11559 01c8 ED A1 36                		mov.L	216[r10], r1
 11560 01cb 05 00 00 00             		bsr	__sp_cmp_abs
 11561 01cf EF 15                   		mov.L	r1, r5
 11562                             		.loc 2 11504 12
 11563 01d1 75 05 FF                		cmp	#-1, r5
 11564 01d4 20 31                   		beq	.L752
11505:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod(b, m, bm);
 11565                             		.loc 2 11505 19
 11566 01d6 ED A3 08                		mov.L	32[r10], r3
 11567 01d9 ED A2 38                		mov.L	224[r10], r2
 11568 01dc ED A1 36                		mov.L	216[r10], r1
 11569 01df 05 00 00 00             		bsr	_sp_mod
 11570 01e3 E7 A1 05                		mov.L	r1, 20[r10]
11506:../src/wolfcrypt/src/sp_int.c ****             if ((err == MP_OKAY) && sp_iszero(bm)) {
 11571                             		.loc 2 11506 16
 11572 01e6 ED A5 05                		mov.L	20[r10], r5
 11573 01e9 61 05                   		cmp	#0, r5
 11574 01eb 21 27                   		bne	.L749
 11575                             		.loc 2 11506 37 discriminator 1
 11576 01ed ED A5 08                		mov.L	32[r10], r5
 11577 01f0 EC 55                   		mov.L	[r5], r5
 11578                             		.loc 2 11506 34 discriminator 1
 11579 01f2 61 05                   		cmp	#0, r5
 11580 01f4 21 1E                   		bne	.L749
11507:../src/wolfcrypt/src/sp_int.c ****                 sp_set(r, 0);
 11581                             		.loc 2 11507 17
 11582 01f6 66 02                   		mov.L	#0, r2
 11583 01f8 ED A1 39                		mov.L	228[r10], r1
 11584 01fb 05 00 00 00             		bsr	_sp_set
11508:../src/wolfcrypt/src/sp_int.c ****                 done = 1;
 11585                             		.loc 2 11508 22
 11586 01ff F9 A6 06 01             		mov.L	#1, 24[r10]
 11587 0203 2E 0F                   		bra	.L749
 11588                             	.L752:
11509:../src/wolfcrypt/src/sp_int.c ****             }
11510:../src/wolfcrypt/src/sp_int.c ****         }
11511:../src/wolfcrypt/src/sp_int.c ****         else {
11512:../src/wolfcrypt/src/sp_int.c ****             err = sp_copy(b, bm);
 11589                             		.loc 2 11512 19
 11590 0205 ED A2 08                		mov.L	32[r10], r2
 11591 0208 ED A1 36                		mov.L	216[r10], r1
 11592 020b 05 00 00 00             		bsr	_sp_copy
 11593 020f E7 A1 05                		mov.L	r1, 20[r10]
 11594                             		.balign 8,3,1
 11595                             	.L749:
11513:../src/wolfcrypt/src/sp_int.c ****         }
11514:../src/wolfcrypt/src/sp_int.c ****     }
11515:../src/wolfcrypt/src/sp_int.c **** 
11516:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
 11596                             		.loc 2 11516 8
 11597 0212 ED A5 06                		mov.L	24[r10], r5
 11598 0215 61 05                   		cmp	#0, r5
 11599 0217 3B 42 05                		bne	.L754
 11600                             		.loc 2 11516 17 discriminator 1
 11601 021a ED A5 05                		mov.L	20[r10], r5
 11602 021d 61 05                   		cmp	#0, r5
 11603 021f 3B 3A 05                		bne	.L754
 11604                             	.LBB68:
11517:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit mp;
11518:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit n;
11519:../src/wolfcrypt/src/sp_int.c **** 
11520:../src/wolfcrypt/src/sp_int.c ****         err = sp_mont_setup(m, &mp);
 11605                             		.loc 2 11520 15
 11606 0222 72 A5 D4 00             		add	#0xd4, r10, r5
 11607 0226 EF 52                   		mov.L	r5, r2
 11608 0228 ED A1 38                		mov.L	224[r10], r1
 11609 022b 05 00 00 00             		bsr	_sp_mont_setup
 11610 022f E7 A1 05                		mov.L	r1, 20[r10]
11521:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 11611                             		.loc 2 11521 12
 11612 0232 ED A5 05                		mov.L	20[r10], r5
 11613 0235 61 05                   		cmp	#0, r5
 11614 0237 21 11                   		bne	.L755
11522:../src/wolfcrypt/src/sp_int.c ****             err = sp_mont_norm(t[0], m);
 11615                             		.loc 2 11522 19
 11616 0239 ED A5 13                		mov.L	76[r10], r5
 11617 023c ED A2 38                		mov.L	224[r10], r2
 11618 023f EF 51                   		mov.L	r5, r1
 11619 0241 05 00 00 00             		bsr	_sp_mont_norm
 11620 0245 E7 A1 05                		mov.L	r1, 20[r10]
 11621                             	.L755:
11523:../src/wolfcrypt/src/sp_int.c ****         }
11524:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 11622                             		.loc 2 11524 12
 11623 0248 ED A5 05                		mov.L	20[r10], r5
 11624 024b 61 05                   		cmp	#0, r5
 11625 024d 21 17                   		bne	.L756
11525:../src/wolfcrypt/src/sp_int.c ****             err = sp_mulmod(bm, t[0], m, bm);
 11626                             		.loc 2 11525 19
 11627 024f ED A5 13                		mov.L	76[r10], r5
 11628 0252 ED A4 08                		mov.L	32[r10], r4
 11629 0255 ED A3 38                		mov.L	224[r10], r3
 11630 0258 EF 52                   		mov.L	r5, r2
 11631 025a ED A1 08                		mov.L	32[r10], r1
 11632 025d 05 00 00 00             		bsr	_sp_mulmod
 11633 0261 E7 A1 05                		mov.L	r1, 20[r10]
 11634                             	.L756:
11526:../src/wolfcrypt/src/sp_int.c ****         }
11527:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 11635                             		.loc 2 11527 12
 11636 0264 ED A5 05                		mov.L	20[r10], r5
 11637 0267 61 05                   		cmp	#0, r5
 11638 0269 21 11                   		bne	.L757
11528:../src/wolfcrypt/src/sp_int.c ****             err = sp_copy(bm, t[0]);
 11639                             		.loc 2 11528 19
 11640 026b ED A5 13                		mov.L	76[r10], r5
 11641 026e EF 52                   		mov.L	r5, r2
 11642 0270 ED A1 08                		mov.L	32[r10], r1
 11643 0273 05 00 00 00             		bsr	_sp_copy
 11644 0277 E7 A1 05                		mov.L	r1, 20[r10]
 11645                             	.L757:
11529:../src/wolfcrypt/src/sp_int.c ****         }
11530:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; (i < winBits) && (err == MP_OKAY); i++) {
 11646                             		.loc 2 11530 16
 11647 027a F8 A6 01                		mov.L	#1, [r10]
 11648                             		.loc 2 11530 9
 11649 027d 2E 34                   		bra	.L758
 11650                             	.L761:
11531:../src/wolfcrypt/src/sp_int.c ****             err = sp_sqr(t[0], t[0]);
 11651                             		.loc 2 11531 19
 11652 027f ED A5 13                		mov.L	76[r10], r5
 11653 0282 ED A4 13                		mov.L	76[r10], r4
 11654 0285 EF 42                   		mov.L	r4, r2
 11655 0287 EF 51                   		mov.L	r5, r1
 11656 0289 05 00 00 00             		bsr	_sp_sqr
 11657 028d E7 A1 05                		mov.L	r1, 20[r10]
11532:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 11658                             		.loc 2 11532 16
 11659 0290 ED A5 05                		mov.L	20[r10], r5
 11660 0293 61 05                   		cmp	#0, r5
 11661 0295 21 16                   		bne	.L759
11533:../src/wolfcrypt/src/sp_int.c ****                 err = _sp_mont_red(t[0], m, mp);
 11662                             		.loc 2 11533 23
 11663 0297 ED A5 13                		mov.L	76[r10], r5
 11664 029a ED A4 35                		mov.L	212[r10], r4
 11665 029d EF 43                   		mov.L	r4, r3
 11666 029f ED A2 38                		mov.L	224[r10], r2
 11667 02a2 EF 51                   		mov.L	r5, r1
 11668 02a4 05 00 00 00             		bsr	__sp_mont_red
 11669 02a8 E7 A1 05                		mov.L	r1, 20[r10]
 11670                             	.L759:
11530:../src/wolfcrypt/src/sp_int.c ****             err = sp_sqr(t[0], t[0]);
 11671                             		.loc 2 11530 57 discriminator 2
 11672 02ab EC A5                   		mov.L	[r10], r5
 11673 02ad 62 15                   		add	#1, r5
 11674 02af E3 A5                   		mov.L	r5, [r10]
 11675                             	.L758:
11530:../src/wolfcrypt/src/sp_int.c ****             err = sp_sqr(t[0], t[0]);
 11676                             		.loc 2 11530 9 discriminator 1
 11677 02b1 EC A4                   		mov.L	[r10], r4
 11678 02b3 ED A5 04                		mov.L	16[r10], r5
 11679 02b6 47 54                   		cmp	r5, r4
 11680 02b8 28 09                   		bge	.L760
11530:../src/wolfcrypt/src/sp_int.c ****             err = sp_sqr(t[0], t[0]);
 11681                             		.loc 2 11530 35 discriminator 3
 11682 02ba ED A5 05                		mov.L	20[r10], r5
 11683 02bd 61 05                   		cmp	#0, r5
 11684 02bf 20 C0                   		beq	.L761
 11685                             	.L760:
11534:../src/wolfcrypt/src/sp_int.c ****             }
11535:../src/wolfcrypt/src/sp_int.c ****         }
11536:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; (i < preCnt) && (err == MP_OKAY); i++) {
 11686                             		.loc 2 11536 16
 11687 02c1 F8 A6 01                		mov.L	#1, [r10]
 11688                             		.loc 2 11536 9
 11689 02c4 2E 48                   		bra	.L762
 11690                             	.L765:
11537:../src/wolfcrypt/src/sp_int.c ****             err = sp_mul(t[i-1], bm, t[i]);
 11691                             		.loc 2 11537 29
 11692 02c6 EC A5                   		mov.L	[r10], r5
 11693 02c8 60 15                   		sub	#1, r5
 11694                             		.loc 2 11537 19
 11695 02ca 6C 25                   		shll	#2, r5
 11696 02cc 4B A5                   		add	r10, r5
 11697 02ce AC DC                   		mov.L	76[r5], r4
 11698 02d0 EC A5                   		mov.L	[r10], r5
 11699 02d2 6C 25                   		shll	#2, r5
 11700 02d4 4B A5                   		add	r10, r5
 11701 02d6 AC DD                   		mov.L	76[r5], r5
 11702 02d8 EF 53                   		mov.L	r5, r3
 11703 02da ED A2 08                		mov.L	32[r10], r2
 11704 02dd EF 41                   		mov.L	r4, r1
 11705 02df 05 00 00 00             		bsr	_sp_mul
 11706 02e3 E7 A1 05                		mov.L	r1, 20[r10]
11538:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 11707                             		.loc 2 11538 16
 11708 02e6 ED A5 05                		mov.L	20[r10], r5
 11709 02e9 61 05                   		cmp	#0, r5
 11710 02eb 21 1B                   		bne	.L763
11539:../src/wolfcrypt/src/sp_int.c ****                 err = _sp_mont_red(t[i], m, mp);
 11711                             		.loc 2 11539 23
 11712 02ed EC A5                   		mov.L	[r10], r5
 11713 02ef 6C 25                   		shll	#2, r5
 11714 02f1 4B A5                   		add	r10, r5
 11715 02f3 AC DD                   		mov.L	76[r5], r5
 11716 02f5 ED A4 35                		mov.L	212[r10], r4
 11717 02f8 EF 43                   		mov.L	r4, r3
 11718 02fa ED A2 38                		mov.L	224[r10], r2
 11719 02fd EF 51                   		mov.L	r5, r1
 11720 02ff 05 00 00 00             		bsr	__sp_mont_red
 11721 0303 E7 A1 05                		mov.L	r1, 20[r10]
 11722                             	.L763:
11536:../src/wolfcrypt/src/sp_int.c ****             err = sp_mul(t[i-1], bm, t[i]);
 11723                             		.loc 2 11536 56 discriminator 2
 11724 0306 EC A5                   		mov.L	[r10], r5
 11725 0308 62 15                   		add	#1, r5
 11726 030a E3 A5                   		mov.L	r5, [r10]
 11727                             	.L762:
11536:../src/wolfcrypt/src/sp_int.c ****             err = sp_mul(t[i-1], bm, t[i]);
 11728                             		.loc 2 11536 9 discriminator 1
 11729 030c EC A4                   		mov.L	[r10], r4
 11730 030e ED A5 10                		mov.L	64[r10], r5
 11731 0311 47 54                   		cmp	r5, r4
 11732 0313 28 09                   		bge	.L764
11536:../src/wolfcrypt/src/sp_int.c ****             err = sp_mul(t[i-1], bm, t[i]);
 11733                             		.loc 2 11536 34 discriminator 3
 11734 0315 ED A5 05                		mov.L	20[r10], r5
 11735 0318 61 05                   		cmp	#0, r5
 11736 031a 20 AC                   		beq	.L765
 11737                             	.L764:
11540:../src/wolfcrypt/src/sp_int.c ****             }
11541:../src/wolfcrypt/src/sp_int.c ****         }
11542:../src/wolfcrypt/src/sp_int.c **** 
11543:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 11738                             		.loc 2 11543 12
 11739 031c ED A5 05                		mov.L	20[r10], r5
 11740 031f 61 05                   		cmp	#0, r5
 11741 0321 3B 1F 04                		bne	.L766
11544:../src/wolfcrypt/src/sp_int.c ****             /* Find the top bit. */
11545:../src/wolfcrypt/src/sp_int.c ****             i = (bits - 1) >> SP_WORD_SHIFT;
 11742                             		.loc 2 11545 23
 11743 0324 ED A5 0F                		mov.L	60[r10], r5
 11744 0327 60 15                   		sub	#1, r5
 11745                             		.loc 2 11545 15
 11746 0329 6A 55                   		shar	#5, r5
 11747 032b E3 A5                   		mov.L	r5, [r10]
11546:../src/wolfcrypt/src/sp_int.c ****             n = e->dp[i--];
 11748                             		.loc 2 11546 24
 11749 032d EC A5                   		mov.L	[r10], r5
 11750 032f 71 54 FF                		add	#-1, r5, r4
 11751 0332 E3 A4                   		mov.L	r4, [r10]
 11752                             		.loc 2 11546 15
 11753 0334 ED A4 37                		mov.L	220[r10], r4
 11754 0337 62 25                   		add	#2, r5
 11755 0339 FE 65 45                		mov.L	[r5,r4], r5
 11756 033c E7 A5 0B                		mov.L	r5, 44[r10]
11547:../src/wolfcrypt/src/sp_int.c ****             c = bits % SP_WORD_SIZE;
 11757                             		.loc 2 11547 15
 11758 033f ED A5 0F                		mov.L	60[r10], r5
 11759 0342 74 25 1F 00 00 80       		and	#-2147483617, r5
 11760 0348 61 05                   		cmp	#0, r5
 11761 034a 28 09                   		bge	.L767
 11762 034c 60 15                   		sub	#1, r5
 11763 034e 75 35 E0                		or	#-32, r5
 11764 0351 62 15                   		add	#1, r5
 11765                             	.L767:
 11766 0353 E7 A5 02                		mov.L	r5, 8[r10]
11548:../src/wolfcrypt/src/sp_int.c ****             if (c == 0) {
 11767                             		.loc 2 11548 16
 11768 0356 ED A5 02                		mov.L	8[r10], r5
 11769 0359 61 05                   		cmp	#0, r5
 11770 035b 1D                      		bne	.L768
11549:../src/wolfcrypt/src/sp_int.c ****                 c = SP_WORD_SIZE;
 11771                             		.loc 2 11549 19
 11772 035c F9 A6 02 20             		mov.L	#32, 8[r10]
 11773                             	.L768:
11550:../src/wolfcrypt/src/sp_int.c ****             }
11551:../src/wolfcrypt/src/sp_int.c ****             /* Put top bit at highest offset in digit. */
11552:../src/wolfcrypt/src/sp_int.c ****             n <<= SP_WORD_SIZE - c;
 11774                             		.loc 2 11552 32
 11775 0360 75 44 20                		mov.L	#32, r4
 11776 0363 ED A5 02                		mov.L	8[r10], r5
 11777 0366 FF 05 54                		sub	r5, r4, r5
 11778                             		.loc 2 11552 15
 11779 0369 ED A4 0B                		mov.L	44[r10], r4
 11780 036c EF 47                   		mov.L	r4, r7
 11781 036e FD 62 57                		shll	r5, r7
 11782 0371 EF 75                   		mov.L	r7, r5
 11783 0373 E7 A5 0B                		mov.L	r5, 44[r10]
11553:../src/wolfcrypt/src/sp_int.c **** 
11554:../src/wolfcrypt/src/sp_int.c ****             if (bits >= winBits) {
 11784                             		.loc 2 11554 16
 11785 0376 ED A4 0F                		mov.L	60[r10], r4
 11786 0379 ED A5 04                		mov.L	16[r10], r5
 11787 037c 47 54                   		cmp	r5, r4
 11788 037e 28 05 38 CE 00          		blt	.L769
11555:../src/wolfcrypt/src/sp_int.c ****                 /* Top bit set. Copy from window. */
11556:../src/wolfcrypt/src/sp_int.c ****                 if (c < winBits) {
 11789                             		.loc 2 11556 20
 11790 0383 ED A4 02                		mov.L	8[r10], r4
 11791 0386 ED A5 04                		mov.L	16[r10], r5
 11792 0389 47 54                   		cmp	r5, r4
 11793 038b 28 74                   		bge	.L770
11557:../src/wolfcrypt/src/sp_int.c ****                     /* Bits to end of digit and part of next */
11558:../src/wolfcrypt/src/sp_int.c ****                     y = (int)((n >> (SP_WORD_SIZE - winBits)) & mask);
 11794                             		.loc 2 11558 51
 11795 038d 75 44 20                		mov.L	#32, r4
 11796 0390 ED A5 04                		mov.L	16[r10], r5
 11797 0393 FF 05 54                		sub	r5, r4, r5
 11798                             		.loc 2 11558 34
 11799 0396 ED A4 0B                		mov.L	44[r10], r4
 11800 0399 EF 47                   		mov.L	r4, r7
 11801 039b FD 60 57                		shlr	r5, r7
 11802 039e EF 75                   		mov.L	r7, r5
 11803                             		.loc 2 11558 63
 11804 03a0 ED A4 11                		mov.L	68[r10], r4
 11805 03a3 53 45                   		and	r4, r5
 11806                             		.loc 2 11558 23
 11807 03a5 E7 A5 03                		mov.L	r5, 12[r10]
11559:../src/wolfcrypt/src/sp_int.c ****                     n = e->dp[i--];
 11808                             		.loc 2 11559 32
 11809 03a8 EC A5                   		mov.L	[r10], r5
 11810 03aa 71 54 FF                		add	#-1, r5, r4
 11811 03ad E3 A4                   		mov.L	r4, [r10]
 11812                             		.loc 2 11559 23
 11813 03af ED A4 37                		mov.L	220[r10], r4
 11814 03b2 62 25                   		add	#2, r5
 11815 03b4 FE 65 45                		mov.L	[r5,r4], r5
 11816 03b7 E7 A5 0B                		mov.L	r5, 44[r10]
11560:../src/wolfcrypt/src/sp_int.c ****                     c = winBits - c;
 11817                             		.loc 2 11560 23
 11818 03ba ED A4 04                		mov.L	16[r10], r4
 11819 03bd ED A5 02                		mov.L	8[r10], r5
 11820 03c0 FF 05 54                		sub	r5, r4, r5
 11821 03c3 E7 A5 02                		mov.L	r5, 8[r10]
11561:../src/wolfcrypt/src/sp_int.c ****                     y |= (int)(n >> (SP_WORD_SIZE - c));
 11822                             		.loc 2 11561 51
 11823 03c6 75 44 20                		mov.L	#32, r4
 11824 03c9 ED A5 02                		mov.L	8[r10], r5
 11825 03cc FF 05 54                		sub	r5, r4, r5
 11826                             		.loc 2 11561 34
 11827 03cf ED A4 0B                		mov.L	44[r10], r4
 11828 03d2 EF 47                   		mov.L	r4, r7
 11829 03d4 FD 60 57                		shlr	r5, r7
 11830 03d7 EF 75                   		mov.L	r7, r5
 11831                             		.loc 2 11561 23
 11832 03d9 ED A4 03                		mov.L	12[r10], r4
 11833 03dc 57 45                   		or	r4, r5
 11834 03de E7 A5 03                		mov.L	r5, 12[r10]
11562:../src/wolfcrypt/src/sp_int.c ****                     n <<= c;
 11835                             		.loc 2 11562 23
 11836 03e1 ED A4 0B                		mov.L	44[r10], r4
 11837 03e4 ED A5 02                		mov.L	8[r10], r5
 11838 03e7 EF 47                   		mov.L	r4, r7
 11839 03e9 FD 62 57                		shll	r5, r7
 11840 03ec EF 75                   		mov.L	r7, r5
 11841 03ee E7 A5 0B                		mov.L	r5, 44[r10]
11563:../src/wolfcrypt/src/sp_int.c ****                     c = SP_WORD_SIZE - c;
 11842                             		.loc 2 11563 23
 11843 03f1 75 44 20                		mov.L	#32, r4
 11844 03f4 ED A5 02                		mov.L	8[r10], r5
 11845 03f7 FF 05 54                		sub	r5, r4, r5
 11846 03fa E7 A5 02                		mov.L	r5, 8[r10]
 11847 03fd 2E 39                   		bra	.L771
 11848                             	.L770:
11564:../src/wolfcrypt/src/sp_int.c ****                 }
11565:../src/wolfcrypt/src/sp_int.c ****                 else {
11566:../src/wolfcrypt/src/sp_int.c ****                     /* Bits from middle of digit */
11567:../src/wolfcrypt/src/sp_int.c ****                     y = (int)((n >> (SP_WORD_SIZE - winBits)) & mask);
 11849                             		.loc 2 11567 51
 11850 03ff 75 44 20                		mov.L	#32, r4
 11851 0402 ED A5 04                		mov.L	16[r10], r5
 11852 0405 FF 05 54                		sub	r5, r4, r5
 11853                             		.loc 2 11567 34
 11854 0408 ED A4 0B                		mov.L	44[r10], r4
 11855 040b EF 47                   		mov.L	r4, r7
 11856 040d FD 60 57                		shlr	r5, r7
 11857 0410 EF 75                   		mov.L	r7, r5
 11858                             		.loc 2 11567 63
 11859 0412 ED A4 11                		mov.L	68[r10], r4
 11860 0415 53 45                   		and	r4, r5
 11861                             		.loc 2 11567 23
 11862 0417 E7 A5 03                		mov.L	r5, 12[r10]
11568:../src/wolfcrypt/src/sp_int.c ****                     n <<= winBits;
 11863                             		.loc 2 11568 23
 11864 041a ED A4 0B                		mov.L	44[r10], r4
 11865 041d ED A5 04                		mov.L	16[r10], r5
 11866 0420 EF 47                   		mov.L	r4, r7
 11867 0422 FD 62 57                		shll	r5, r7
 11868 0425 EF 75                   		mov.L	r7, r5
 11869 0427 E7 A5 0B                		mov.L	r5, 44[r10]
11569:../src/wolfcrypt/src/sp_int.c ****                     c -= winBits;
 11870                             		.loc 2 11569 23
 11871 042a ED A4 02                		mov.L	8[r10], r4
 11872 042d ED A5 04                		mov.L	16[r10], r5
 11873 0430 FF 05 54                		sub	r5, r4, r5
 11874 0433 E7 A5 02                		mov.L	r5, 8[r10]
 11875                             	.L771:
11570:../src/wolfcrypt/src/sp_int.c ****                 }
11571:../src/wolfcrypt/src/sp_int.c ****                 err = sp_copy(t[y], tr);
 11876                             		.loc 2 11571 32
 11877 0436 ED A5 03                		mov.L	12[r10], r5
 11878 0439 6C 25                   		shll	#2, r5
 11879 043b 4B A5                   		add	r10, r5
 11880 043d AC DD                   		mov.L	76[r5], r5
 11881                             		.loc 2 11571 23
 11882 043f ED A2 07                		mov.L	28[r10], r2
 11883 0442 EF 51                   		mov.L	r5, r1
 11884 0444 05 00 00 00             		bsr	_sp_copy
 11885 0448 E7 A1 05                		mov.L	r1, 20[r10]
 11886 044b 38 47 02                		bra	.L773
 11887                             	.L769:
11572:../src/wolfcrypt/src/sp_int.c ****             }
11573:../src/wolfcrypt/src/sp_int.c ****             else {
11574:../src/wolfcrypt/src/sp_int.c ****                 /* 1 in Montgomery form. */
11575:../src/wolfcrypt/src/sp_int.c ****                 err = sp_mont_norm(tr, m);
 11888                             		.loc 2 11575 23
 11889 044e ED A2 38                		mov.L	224[r10], r2
 11890 0451 ED A1 07                		mov.L	28[r10], r1
 11891 0454 05 00 00 00             		bsr	_sp_mont_norm
 11892 0458 E7 A1 05                		mov.L	r1, 20[r10]
11576:../src/wolfcrypt/src/sp_int.c ****             }
11577:../src/wolfcrypt/src/sp_int.c ****             while (err == MP_OKAY) {
 11893                             		.loc 2 11577 19
 11894 045b 38 37 02                		bra	.L773
 11895                             	.L779:
 11896                             	.LBB69:
11578:../src/wolfcrypt/src/sp_int.c ****                 /* Sqaure until we find bit that is 1 or there's less than a
11579:../src/wolfcrypt/src/sp_int.c ****                  * window of bits left.
11580:../src/wolfcrypt/src/sp_int.c ****                  */
11581:../src/wolfcrypt/src/sp_int.c ****                 while (err == MP_OKAY && ((i >= 0) || (c >= winBits))) {
11582:../src/wolfcrypt/src/sp_int.c ****                     sp_int_digit n2 = n;
 11897                             		.loc 2 11582 34
 11898 045e ED A5 0B                		mov.L	44[r10], r5
 11899 0461 E7 A5 0C                		mov.L	r5, 48[r10]
11583:../src/wolfcrypt/src/sp_int.c ****                     int c2 = c;
 11900                             		.loc 2 11583 25
 11901 0464 ED A5 02                		mov.L	8[r10], r5
 11902 0467 E7 A5 0D                		mov.L	r5, 52[r10]
11584:../src/wolfcrypt/src/sp_int.c ****                     int i2 = i;
 11903                             		.loc 2 11584 25
 11904 046a EC A5                   		mov.L	[r10], r5
 11905 046c E7 A5 0E                		mov.L	r5, 56[r10]
11585:../src/wolfcrypt/src/sp_int.c **** 
11586:../src/wolfcrypt/src/sp_int.c ****                     /* Make sure n2 has bits from the right digit. */
11587:../src/wolfcrypt/src/sp_int.c ****                     if (c2 == 0) {
 11906                             		.loc 2 11587 24
 11907 046f ED A5 0D                		mov.L	52[r10], r5
 11908 0472 61 05                   		cmp	#0, r5
 11909 0474 21 1A                   		bne	.L775
11588:../src/wolfcrypt/src/sp_int.c ****                         n2 = e->dp[i2--];
 11910                             		.loc 2 11588 38
 11911 0476 ED A5 0E                		mov.L	56[r10], r5
 11912 0479 71 54 FF                		add	#-1, r5, r4
 11913 047c E7 A4 0E                		mov.L	r4, 56[r10]
 11914                             		.loc 2 11588 28
 11915 047f ED A4 37                		mov.L	220[r10], r4
 11916 0482 62 25                   		add	#2, r5
 11917 0484 FE 65 45                		mov.L	[r5,r4], r5
 11918 0487 E7 A5 0C                		mov.L	r5, 48[r10]
11589:../src/wolfcrypt/src/sp_int.c ****                         c2 = SP_WORD_SIZE;
 11919                             		.loc 2 11589 28
 11920 048a F9 A6 0D 20             		mov.L	#32, 52[r10]
 11921                             	.L775:
11590:../src/wolfcrypt/src/sp_int.c ****                     }
11591:../src/wolfcrypt/src/sp_int.c ****                     /* Mask off the next bit. */
11592:../src/wolfcrypt/src/sp_int.c ****                     y = (int)((n2 >> (SP_WORD_SIZE - 1)) & 1);
 11922                             		.loc 2 11592 35
 11923 048e ED A5 0C                		mov.L	48[r10], r5
 11924 0491 69 F5                   		shlr	#31, r5
 11925                             		.loc 2 11592 23
 11926 0493 E7 A5 03                		mov.L	r5, 12[r10]
11593:../src/wolfcrypt/src/sp_int.c ****                     if (y == 1) {
 11927                             		.loc 2 11593 24
 11928 0496 ED A5 03                		mov.L	12[r10], r5
 11929 0499 61 15                   		cmp	#1, r5
 11930 049b 20 5C                   		beq	.L800
11594:../src/wolfcrypt/src/sp_int.c ****                         break;
11595:../src/wolfcrypt/src/sp_int.c ****                     }
11596:../src/wolfcrypt/src/sp_int.c **** 
11597:../src/wolfcrypt/src/sp_int.c ****                     /* Square and update position. */
11598:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 11931                             		.loc 2 11598 27
 11932 049d ED A2 07                		mov.L	28[r10], r2
 11933 04a0 ED A1 07                		mov.L	28[r10], r1
 11934 04a3 05 00 00 00             		bsr	_sp_sqr
 11935 04a7 E7 A1 05                		mov.L	r1, 20[r10]
11599:../src/wolfcrypt/src/sp_int.c ****                     if (err == MP_OKAY) {
 11936                             		.loc 2 11599 24
 11937 04aa ED A5 05                		mov.L	20[r10], r5
 11938 04ad 61 05                   		cmp	#0, r5
 11939 04af 21 14                   		bne	.L778
11600:../src/wolfcrypt/src/sp_int.c ****                         err = _sp_mont_red(tr, m, mp);
 11940                             		.loc 2 11600 31
 11941 04b1 ED A5 35                		mov.L	212[r10], r5
 11942 04b4 EF 53                   		mov.L	r5, r3
 11943 04b6 ED A2 38                		mov.L	224[r10], r2
 11944 04b9 ED A1 07                		mov.L	28[r10], r1
 11945 04bc 05 00 00 00             		bsr	__sp_mont_red
 11946 04c0 E7 A1 05                		mov.L	r1, 20[r10]
 11947                             	.L778:
11601:../src/wolfcrypt/src/sp_int.c ****                     }
11602:../src/wolfcrypt/src/sp_int.c ****                     n = n2 << 1;
 11948                             		.loc 2 11602 23
 11949 04c3 ED A5 0C                		mov.L	48[r10], r5
 11950 04c6 4B 55                   		add	r5, r5
 11951 04c8 E7 A5 0B                		mov.L	r5, 44[r10]
11603:../src/wolfcrypt/src/sp_int.c ****                     c = c2 - 1;
 11952                             		.loc 2 11603 23
 11953 04cb ED A5 0D                		mov.L	52[r10], r5
 11954 04ce 60 15                   		sub	#1, r5
 11955 04d0 E7 A5 02                		mov.L	r5, 8[r10]
11604:../src/wolfcrypt/src/sp_int.c ****                     i = i2;
 11956                             		.loc 2 11604 23
 11957 04d3 ED A5 0E                		mov.L	56[r10], r5
 11958 04d6 E3 A5                   		mov.L	r5, [r10]
 11959                             	.L774:
 11960                             	.LBE69:
11581:../src/wolfcrypt/src/sp_int.c ****                     sp_int_digit n2 = n;
 11961                             		.loc 2 11581 23
 11962 04d8 ED A5 05                		mov.L	20[r10], r5
 11963 04db 61 05                   		cmp	#0, r5
 11964 04dd 21 1B                   		bne	.L777
11581:../src/wolfcrypt/src/sp_int.c ****                     sp_int_digit n2 = n;
 11965                             		.loc 2 11581 39 discriminator 1
 11966 04df EC A5                   		mov.L	[r10], r5
 11967 04e1 61 05                   		cmp	#0, r5
 11968 04e3 29 05 38 79 FF          		bge	.L779
11581:../src/wolfcrypt/src/sp_int.c ****                     sp_int_digit n2 = n;
 11969                             		.loc 2 11581 52 discriminator 2
 11970 04e8 ED A4 02                		mov.L	8[r10], r4
 11971 04eb ED A5 04                		mov.L	16[r10], r5
 11972 04ee 47 54                   		cmp	r5, r4
 11973 04f0 29 05 38 6C FF          		bge	.L779
 11974 04f5 2E 03                   		bra	.L777
 11975                             	.L800:
 11976                             	.LBB70:
11594:../src/wolfcrypt/src/sp_int.c ****                     }
 11977                             		.loc 2 11594 25
 11978 04f7 03                      		nop
 11979                             	.L777:
 11980                             	.LBE70:
11605:../src/wolfcrypt/src/sp_int.c ****                 }
11606:../src/wolfcrypt/src/sp_int.c **** 
11607:../src/wolfcrypt/src/sp_int.c ****                 if (err == MP_OKAY) {
 11981                             		.loc 2 11607 20
 11982 04f8 ED A5 05                		mov.L	20[r10], r5
 11983 04fb 61 05                   		cmp	#0, r5
 11984 04fd 3B 18 01                		bne	.L780
11608:../src/wolfcrypt/src/sp_int.c ****                     /* Check we have enough bits left for a window. */
11609:../src/wolfcrypt/src/sp_int.c ****                     if ((i < 0) && (c < winBits)) {
 11985                             		.loc 2 11609 24
 11986 0500 EC A5                   		mov.L	[r10], r5
 11987 0502 61 05                   		cmp	#0, r5
 11988 0504 28 0F                   		bge	.L781
 11989                             		.loc 2 11609 33 discriminator 1
 11990 0506 ED A4 02                		mov.L	8[r10], r4
 11991 0509 ED A5 04                		mov.L	16[r10], r5
 11992 050c 47 54                   		cmp	r5, r4
 11993 050e 28 05 38 8C 01          		blt	.L801
 11994                             	.L781:
11610:../src/wolfcrypt/src/sp_int.c ****                         break;
11611:../src/wolfcrypt/src/sp_int.c ****                     }
11612:../src/wolfcrypt/src/sp_int.c **** 
11613:../src/wolfcrypt/src/sp_int.c ****                     if (c == 0) {
 11995                             		.loc 2 11613 24
 11996 0513 ED A5 02                		mov.L	8[r10], r5
 11997 0516 61 05                   		cmp	#0, r5
 11998 0518 21 49                   		bne	.L783
11614:../src/wolfcrypt/src/sp_int.c ****                         /* Bits up to end of digit */
11615:../src/wolfcrypt/src/sp_int.c ****                         n = e->dp[i--];
 11999                             		.loc 2 11615 36
 12000 051a EC A5                   		mov.L	[r10], r5
 12001 051c 71 54 FF                		add	#-1, r5, r4
 12002 051f E3 A4                   		mov.L	r4, [r10]
 12003                             		.loc 2 11615 27
 12004 0521 ED A4 37                		mov.L	220[r10], r4
 12005 0524 62 25                   		add	#2, r5
 12006 0526 FE 65 45                		mov.L	[r5,r4], r5
 12007 0529 E7 A5 0B                		mov.L	r5, 44[r10]
11616:../src/wolfcrypt/src/sp_int.c ****                         y = (int)(n >> (SP_WORD_SIZE - winBits));
 12008                             		.loc 2 11616 54
 12009 052c 75 44 20                		mov.L	#32, r4
 12010 052f ED A5 04                		mov.L	16[r10], r5
 12011 0532 FF 05 54                		sub	r5, r4, r5
 12012                             		.loc 2 11616 37
 12013 0535 ED A4 0B                		mov.L	44[r10], r4
 12014 0538 EF 47                   		mov.L	r4, r7
 12015 053a FD 60 57                		shlr	r5, r7
 12016 053d EF 75                   		mov.L	r7, r5
 12017                             		.loc 2 11616 27
 12018 053f E7 A5 03                		mov.L	r5, 12[r10]
11617:../src/wolfcrypt/src/sp_int.c ****                         n <<= winBits;
 12019                             		.loc 2 11617 27
 12020 0542 ED A4 0B                		mov.L	44[r10], r4
 12021 0545 ED A5 04                		mov.L	16[r10], r5
 12022 0548 EF 47                   		mov.L	r4, r7
 12023 054a FD 62 57                		shll	r5, r7
 12024 054d EF 75                   		mov.L	r7, r5
 12025 054f E7 A5 0B                		mov.L	r5, 44[r10]
11618:../src/wolfcrypt/src/sp_int.c ****                         c = SP_WORD_SIZE - winBits;
 12026                             		.loc 2 11618 27
 12027 0552 75 44 20                		mov.L	#32, r4
 12028 0555 ED A5 04                		mov.L	16[r10], r5
 12029 0558 FF 05 54                		sub	r5, r4, r5
 12030 055b E7 A5 02                		mov.L	r5, 8[r10]
 12031 055e 38 AC 00                		bra	.L784
 12032                             	.L783:
11619:../src/wolfcrypt/src/sp_int.c ****                     }
11620:../src/wolfcrypt/src/sp_int.c ****                     else if (c < winBits) {
 12033                             		.loc 2 11620 29
 12034 0561 ED A4 02                		mov.L	8[r10], r4
 12035 0564 ED A5 04                		mov.L	16[r10], r5
 12036 0567 47 54                   		cmp	r5, r4
 12037 0569 28 6F                   		bge	.L785
11621:../src/wolfcrypt/src/sp_int.c ****                         /* Bits to end of digit and part of next */
11622:../src/wolfcrypt/src/sp_int.c ****                         y = (int)(n >> (SP_WORD_SIZE - winBits));
 12038                             		.loc 2 11622 54
 12039 056b 75 44 20                		mov.L	#32, r4
 12040 056e ED A5 04                		mov.L	16[r10], r5
 12041 0571 FF 05 54                		sub	r5, r4, r5
 12042                             		.loc 2 11622 37
 12043 0574 ED A4 0B                		mov.L	44[r10], r4
 12044 0577 EF 47                   		mov.L	r4, r7
 12045 0579 FD 60 57                		shlr	r5, r7
 12046 057c EF 75                   		mov.L	r7, r5
 12047                             		.loc 2 11622 27
 12048 057e E7 A5 03                		mov.L	r5, 12[r10]
11623:../src/wolfcrypt/src/sp_int.c ****                         n = e->dp[i--];
 12049                             		.loc 2 11623 36
 12050 0581 EC A5                   		mov.L	[r10], r5
 12051 0583 71 54 FF                		add	#-1, r5, r4
 12052 0586 E3 A4                   		mov.L	r4, [r10]
 12053                             		.loc 2 11623 27
 12054 0588 ED A4 37                		mov.L	220[r10], r4
 12055 058b 62 25                   		add	#2, r5
 12056 058d FE 65 45                		mov.L	[r5,r4], r5
 12057 0590 E7 A5 0B                		mov.L	r5, 44[r10]
11624:../src/wolfcrypt/src/sp_int.c ****                         c = winBits - c;
 12058                             		.loc 2 11624 27
 12059 0593 ED A4 04                		mov.L	16[r10], r4
 12060 0596 ED A5 02                		mov.L	8[r10], r5
 12061 0599 FF 05 54                		sub	r5, r4, r5
 12062 059c E7 A5 02                		mov.L	r5, 8[r10]
11625:../src/wolfcrypt/src/sp_int.c ****                         y |= (int)(n >> (SP_WORD_SIZE - c));
 12063                             		.loc 2 11625 55
 12064 059f 75 44 20                		mov.L	#32, r4
 12065 05a2 ED A5 02                		mov.L	8[r10], r5
 12066 05a5 FF 05 54                		sub	r5, r4, r5
 12067                             		.loc 2 11625 38
 12068 05a8 ED A4 0B                		mov.L	44[r10], r4
 12069 05ab EF 47                   		mov.L	r4, r7
 12070 05ad FD 60 57                		shlr	r5, r7
 12071 05b0 EF 75                   		mov.L	r7, r5
 12072                             		.loc 2 11625 27
 12073 05b2 ED A4 03                		mov.L	12[r10], r4
 12074 05b5 57 45                   		or	r4, r5
 12075 05b7 E7 A5 03                		mov.L	r5, 12[r10]
11626:../src/wolfcrypt/src/sp_int.c ****                         n <<= c;
 12076                             		.loc 2 11626 27
 12077 05ba ED A4 0B                		mov.L	44[r10], r4
 12078 05bd ED A5 02                		mov.L	8[r10], r5
 12079 05c0 EF 47                   		mov.L	r4, r7
 12080 05c2 FD 62 57                		shll	r5, r7
 12081 05c5 EF 75                   		mov.L	r7, r5
 12082 05c7 E7 A5 0B                		mov.L	r5, 44[r10]
11627:../src/wolfcrypt/src/sp_int.c ****                         c = SP_WORD_SIZE - c;
 12083                             		.loc 2 11627 27
 12084 05ca 75 44 20                		mov.L	#32, r4
 12085 05cd ED A5 02                		mov.L	8[r10], r5
 12086 05d0 FF 05 54                		sub	r5, r4, r5
 12087 05d3 E7 A5 02                		mov.L	r5, 8[r10]
 12088 05d6 2E 34                   		bra	.L784
 12089                             	.L785:
11628:../src/wolfcrypt/src/sp_int.c ****                     }
11629:../src/wolfcrypt/src/sp_int.c ****                     else {
11630:../src/wolfcrypt/src/sp_int.c ****                         /* Bits from middle of digit */
11631:../src/wolfcrypt/src/sp_int.c ****                         y = (int)(n >> (SP_WORD_SIZE - winBits));
 12090                             		.loc 2 11631 54
 12091 05d8 75 44 20                		mov.L	#32, r4
 12092 05db ED A5 04                		mov.L	16[r10], r5
 12093 05de FF 05 54                		sub	r5, r4, r5
 12094                             		.loc 2 11631 37
 12095 05e1 ED A4 0B                		mov.L	44[r10], r4
 12096 05e4 EF 47                   		mov.L	r4, r7
 12097 05e6 FD 60 57                		shlr	r5, r7
 12098 05e9 EF 75                   		mov.L	r7, r5
 12099                             		.loc 2 11631 27
 12100 05eb E7 A5 03                		mov.L	r5, 12[r10]
11632:../src/wolfcrypt/src/sp_int.c ****                         n <<= winBits;
 12101                             		.loc 2 11632 27
 12102 05ee ED A4 0B                		mov.L	44[r10], r4
 12103 05f1 ED A5 04                		mov.L	16[r10], r5
 12104 05f4 EF 47                   		mov.L	r4, r7
 12105 05f6 FD 62 57                		shll	r5, r7
 12106 05f9 EF 75                   		mov.L	r7, r5
 12107 05fb E7 A5 0B                		mov.L	r5, 44[r10]
11633:../src/wolfcrypt/src/sp_int.c ****                         c -= winBits;
 12108                             		.loc 2 11633 27
 12109 05fe ED A4 02                		mov.L	8[r10], r4
 12110 0601 ED A5 04                		mov.L	16[r10], r5
 12111 0604 FF 05 54                		sub	r5, r4, r5
 12112 0607 E7 A5 02                		mov.L	r5, 8[r10]
 12113                             	.L784:
11634:../src/wolfcrypt/src/sp_int.c ****                     }
11635:../src/wolfcrypt/src/sp_int.c ****                     y &= mask;
 12114                             		.loc 2 11635 23
 12115 060a ED A4 03                		mov.L	12[r10], r4
 12116 060d ED A5 11                		mov.L	68[r10], r5
 12117 0610 53 45                   		and	r4, r5
 12118 0612 E7 A5 03                		mov.L	r5, 12[r10]
 12119                             	.L780:
11636:../src/wolfcrypt/src/sp_int.c ****                 }
11637:../src/wolfcrypt/src/sp_int.c **** 
11638:../src/wolfcrypt/src/sp_int.c ****                 /* Square for number of bits in window. */
11639:../src/wolfcrypt/src/sp_int.c ****                 for (j = 0; (j < winBits) && (err == MP_OKAY); j++) {
 12120                             		.loc 2 11639 24
 12121 0615 F9 A6 01 00             		mov.L	#0, 4[r10]
 12122                             		.loc 2 11639 17
 12123 0619 2E 30                   		bra	.L786
 12124                             	.L789:
11640:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 12125                             		.loc 2 11640 27
 12126 061b ED A2 07                		mov.L	28[r10], r2
 12127 061e ED A1 07                		mov.L	28[r10], r1
 12128 0621 05 00 00 00             		bsr	_sp_sqr
 12129 0625 E7 A1 05                		mov.L	r1, 20[r10]
11641:../src/wolfcrypt/src/sp_int.c ****                     if (err == MP_OKAY) {
 12130                             		.loc 2 11641 24
 12131 0628 ED A5 05                		mov.L	20[r10], r5
 12132 062b 61 05                   		cmp	#0, r5
 12133 062d 21 14                   		bne	.L787
11642:../src/wolfcrypt/src/sp_int.c ****                         err = _sp_mont_red(tr, m, mp);
 12134                             		.loc 2 11642 31
 12135 062f ED A5 35                		mov.L	212[r10], r5
 12136 0632 EF 53                   		mov.L	r5, r3
 12137 0634 ED A2 38                		mov.L	224[r10], r2
 12138 0637 ED A1 07                		mov.L	28[r10], r1
 12139 063a 05 00 00 00             		bsr	__sp_mont_red
 12140 063e E7 A1 05                		mov.L	r1, 20[r10]
 12141                             	.L787:
11639:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 12142                             		.loc 2 11639 65 discriminator 2
 12143 0641 ED A5 01                		mov.L	4[r10], r5
 12144 0644 62 15                   		add	#1, r5
 12145 0646 E7 A5 01                		mov.L	r5, 4[r10]
 12146                             	.L786:
11639:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 12147                             		.loc 2 11639 17 discriminator 1
 12148 0649 ED A4 01                		mov.L	4[r10], r4
 12149 064c ED A5 04                		mov.L	16[r10], r5
 12150 064f 47 54                   		cmp	r5, r4
 12151 0651 28 09                   		bge	.L788
11639:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 12152                             		.loc 2 11639 43 discriminator 3
 12153 0653 ED A5 05                		mov.L	20[r10], r5
 12154 0656 61 05                   		cmp	#0, r5
 12155 0658 20 C3                   		beq	.L789
 12156                             	.L788:
11643:../src/wolfcrypt/src/sp_int.c ****                     }
11644:../src/wolfcrypt/src/sp_int.c ****                 }
11645:../src/wolfcrypt/src/sp_int.c ****                 /* Multiply by window number for next set of bits. */
11646:../src/wolfcrypt/src/sp_int.c ****                 if (err == MP_OKAY) {
 12157                             		.loc 2 11646 20
 12158 065a ED A5 05                		mov.L	20[r10], r5
 12159 065d 61 05                   		cmp	#0, r5
 12160 065f 21 1A                   		bne	.L790
11647:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mul(tr, t[y], tr);
 12161                             		.loc 2 11647 27
 12162 0661 ED A5 03                		mov.L	12[r10], r5
 12163 0664 6C 25                   		shll	#2, r5
 12164 0666 4B A5                   		add	r10, r5
 12165 0668 AC DD                   		mov.L	76[r5], r5
 12166 066a ED A3 07                		mov.L	28[r10], r3
 12167 066d EF 52                   		mov.L	r5, r2
 12168 066f ED A1 07                		mov.L	28[r10], r1
 12169 0672 05 00 00 00             		bsr	_sp_mul
 12170 0676 E7 A1 05                		mov.L	r1, 20[r10]
 12171                             	.L790:
11648:../src/wolfcrypt/src/sp_int.c ****                 }
11649:../src/wolfcrypt/src/sp_int.c ****                 if (err == MP_OKAY) {
 12172                             		.loc 2 11649 20
 12173 0679 ED A5 05                		mov.L	20[r10], r5
 12174 067c 61 05                   		cmp	#0, r5
 12175 067e 21 14                   		bne	.L773
11650:../src/wolfcrypt/src/sp_int.c ****                     err = _sp_mont_red(tr, m, mp);
 12176                             		.loc 2 11650 27
 12177 0680 ED A5 35                		mov.L	212[r10], r5
 12178 0683 EF 53                   		mov.L	r5, r3
 12179 0685 ED A2 38                		mov.L	224[r10], r2
 12180 0688 ED A1 07                		mov.L	28[r10], r1
 12181 068b 05 00 00 00             		bsr	__sp_mont_red
 12182 068f E7 A1 05                		mov.L	r1, 20[r10]
 12183                             		.balign 8,3,1
 12184                             	.L773:
11577:../src/wolfcrypt/src/sp_int.c ****                 /* Sqaure until we find bit that is 1 or there's less than a
 12185                             		.loc 2 11577 19
 12186 0692 ED A5 05                		mov.L	20[r10], r5
 12187 0695 61 05                   		cmp	#0, r5
 12188 0697 3A 41 FE                		beq	.L774
 12189 069a 2E 03                   		bra	.L782
 12190                             	.L801:
11610:../src/wolfcrypt/src/sp_int.c ****                     }
 12191                             		.loc 2 11610 25
 12192 069c 03                      		nop
 12193                             	.L782:
11651:../src/wolfcrypt/src/sp_int.c ****                 }
11652:../src/wolfcrypt/src/sp_int.c ****             }
11653:../src/wolfcrypt/src/sp_int.c ****             if ((err == MP_OKAY) && (c > 0)) {
 12194                             		.loc 2 11653 16
 12195 069d ED A5 05                		mov.L	20[r10], r5
 12196 06a0 61 05                   		cmp	#0, r5
 12197 06a2 3B 9E 00                		bne	.L766
 12198                             		.loc 2 11653 34 discriminator 1
 12199 06a5 ED A5 02                		mov.L	8[r10], r5
 12200 06a8 61 05                   		cmp	#0, r5
 12201 06aa 2A 05 38 94 00          		ble	.L766
11654:../src/wolfcrypt/src/sp_int.c ****                 /* Handle remaining bits.
11655:../src/wolfcrypt/src/sp_int.c ****                  * Window values have top bit set and can't be used. */
11656:../src/wolfcrypt/src/sp_int.c ****                 n = e->dp[0];
 12202                             		.loc 2 11656 19
 12203 06af ED A5 37                		mov.L	220[r10], r5
 12204 06b2 A8 D5                   		mov.L	8[r5], r5
 12205 06b4 E7 A5 0B                		mov.L	r5, 44[r10]
11657:../src/wolfcrypt/src/sp_int.c ****                 for (--c; (err == MP_OKAY) && (c >= 0); c--) {
 12206                             		.loc 2 11657 22
 12207 06b7 ED A5 02                		mov.L	8[r10], r5
 12208 06ba 60 15                   		sub	#1, r5
 12209 06bc E7 A5 02                		mov.L	r5, 8[r10]
 12210                             		.loc 2 11657 17
 12211 06bf 2E 73                   		bra	.L792
 12212                             	.L795:
11658:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 12213                             		.loc 2 11658 27
 12214 06c1 ED A2 07                		mov.L	28[r10], r2
 12215 06c4 ED A1 07                		mov.L	28[r10], r1
 12216 06c7 05 00 00 00             		bsr	_sp_sqr
 12217 06cb E7 A1 05                		mov.L	r1, 20[r10]
11659:../src/wolfcrypt/src/sp_int.c ****                     if (err == MP_OKAY) {
 12218                             		.loc 2 11659 24
 12219 06ce ED A5 05                		mov.L	20[r10], r5
 12220 06d1 61 05                   		cmp	#0, r5
 12221 06d3 21 14                   		bne	.L793
11660:../src/wolfcrypt/src/sp_int.c ****                         err = _sp_mont_red(tr, m, mp);
 12222                             		.loc 2 11660 31
 12223 06d5 ED A5 35                		mov.L	212[r10], r5
 12224 06d8 EF 53                   		mov.L	r5, r3
 12225 06da ED A2 38                		mov.L	224[r10], r2
 12226 06dd ED A1 07                		mov.L	28[r10], r1
 12227 06e0 05 00 00 00             		bsr	__sp_mont_red
 12228 06e4 E7 A1 05                		mov.L	r1, 20[r10]
 12229                             	.L793:
11661:../src/wolfcrypt/src/sp_int.c ****                     }
11662:../src/wolfcrypt/src/sp_int.c ****                     if ((err == MP_OKAY) && ((n >> c) & 1)) {
 12230                             		.loc 2 11662 24
 12231 06e7 ED A5 05                		mov.L	20[r10], r5
 12232 06ea 61 05                   		cmp	#0, r5
 12233 06ec 21 3E                   		bne	.L794
 12234                             		.loc 2 11662 49 discriminator 1
 12235 06ee ED A4 0B                		mov.L	44[r10], r4
 12236 06f1 ED A5 02                		mov.L	8[r10], r5
 12237 06f4 EF 47                   		mov.L	r4, r7
 12238 06f6 FD 60 57                		shlr	r5, r7
 12239 06f9 EF 75                   		mov.L	r7, r5
 12240                             		.loc 2 11662 55 discriminator 1
 12241 06fb 64 15                   		and	#1, r5
 12242                             		.loc 2 11662 42 discriminator 1
 12243 06fd 61 05                   		cmp	#0, r5
 12244 06ff 20 2B                   		beq	.L794
11663:../src/wolfcrypt/src/sp_int.c ****                         err = sp_mul(tr, bm, tr);
 12245                             		.loc 2 11663 31
 12246 0701 ED A3 07                		mov.L	28[r10], r3
 12247 0704 ED A2 08                		mov.L	32[r10], r2
 12248 0707 ED A1 07                		mov.L	28[r10], r1
 12249 070a 05 00 00 00             		bsr	_sp_mul
 12250 070e E7 A1 05                		mov.L	r1, 20[r10]
11664:../src/wolfcrypt/src/sp_int.c ****                         if (err == MP_OKAY) {
 12251                             		.loc 2 11664 28
 12252 0711 ED A5 05                		mov.L	20[r10], r5
 12253 0714 61 05                   		cmp	#0, r5
 12254 0716 21 14                   		bne	.L794
11665:../src/wolfcrypt/src/sp_int.c ****                             err = _sp_mont_red(tr, m, mp);
 12255                             		.loc 2 11665 35
 12256 0718 ED A5 35                		mov.L	212[r10], r5
 12257 071b EF 53                   		mov.L	r5, r3
 12258 071d ED A2 38                		mov.L	224[r10], r2
 12259 0720 ED A1 07                		mov.L	28[r10], r1
 12260 0723 05 00 00 00             		bsr	__sp_mont_red
 12261 0727 E7 A1 05                		mov.L	r1, 20[r10]
 12262                             		.balign 8,3,1
 12263                             	.L794:
11657:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 12264                             		.loc 2 11657 58 discriminator 2
 12265 072a ED A5 02                		mov.L	8[r10], r5
 12266 072d 60 15                   		sub	#1, r5
 12267 072f E7 A5 02                		mov.L	r5, 8[r10]
 12268                             	.L792:
11657:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 12269                             		.loc 2 11657 17 discriminator 1
 12270 0732 ED A5 05                		mov.L	20[r10], r5
 12271 0735 61 05                   		cmp	#0, r5
 12272 0737 19                      		bne	.L766
11657:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqr(tr, tr);
 12273                             		.loc 2 11657 44 discriminator 3
 12274 0738 ED A5 02                		mov.L	8[r10], r5
 12275 073b 61 05                   		cmp	#0, r5
 12276 073d 28 84                   		bge	.L795
 12277 073f 03                      		.balign 8,3,1
 12278                             	.L766:
11666:../src/wolfcrypt/src/sp_int.c ****                         }
11667:../src/wolfcrypt/src/sp_int.c ****                     }
11668:../src/wolfcrypt/src/sp_int.c ****                 }
11669:../src/wolfcrypt/src/sp_int.c ****             }
11670:../src/wolfcrypt/src/sp_int.c ****         }
11671:../src/wolfcrypt/src/sp_int.c **** 
11672:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 12279                             		.loc 2 11672 12
 12280 0740 ED A5 05                		mov.L	20[r10], r5
 12281 0743 61 05                   		cmp	#0, r5
 12282 0745 21 14                   		bne	.L754
11673:../src/wolfcrypt/src/sp_int.c ****             /* Convert from montgomery form. */
11674:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mont_red(tr, m, mp);
 12283                             		.loc 2 11674 19
 12284 0747 ED A5 35                		mov.L	212[r10], r5
 12285 074a EF 53                   		mov.L	r5, r3
 12286 074c ED A2 38                		mov.L	224[r10], r2
 12287 074f ED A1 07                		mov.L	28[r10], r1
 12288 0752 05 00 00 00             		bsr	__sp_mont_red
 12289 0756 E7 A1 05                		mov.L	r1, 20[r10]
 12290                             		.balign 8,3,1
 12291                             	.L754:
 12292                             	.LBE68:
11675:../src/wolfcrypt/src/sp_int.c ****             /* Reduction implementation returns number to range < m. */
11676:../src/wolfcrypt/src/sp_int.c ****         }
11677:../src/wolfcrypt/src/sp_int.c ****     }
11678:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
 12293                             		.loc 2 11678 8
 12294 0759 ED A5 06                		mov.L	24[r10], r5
 12295 075c 61 05                   		cmp	#0, r5
 12296 075e 21 16                   		bne	.L797
 12297                             		.loc 2 11678 17 discriminator 1
 12298 0760 ED A5 05                		mov.L	20[r10], r5
 12299 0763 61 05                   		cmp	#0, r5
 12300 0765 21 0F                   		bne	.L797
11679:../src/wolfcrypt/src/sp_int.c ****         err = sp_copy(tr, r);
 12301                             		.loc 2 11679 15
 12302 0767 ED A2 39                		mov.L	228[r10], r2
 12303 076a ED A1 07                		mov.L	28[r10], r1
 12304 076d 05 00 00 00             		bsr	_sp_copy
 12305 0771 E7 A1 05                		mov.L	r1, 20[r10]
 12306                             	.L797:
11680:../src/wolfcrypt/src/sp_int.c ****     }
11681:../src/wolfcrypt/src/sp_int.c **** 
11682:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
 12307                             		.loc 2 11682 5
 12308 0774 ED A5 09                		mov.L	36[r10], r5
 12309 0777 61 05                   		cmp	#0, r5
 12310 0779 20 15                   		beq	.L798
 12311                             	.LBB71:
 12312                             		.loc 2 11682 5 is_stmt 0 discriminator 1
 12313 077b ED A5 09                		mov.L	36[r10], r5
 12314 077e E7 A5 12                		mov.L	r5, 72[r10]
 12315 0781 ED A5 12                		mov.L	72[r10], r5
 12316 0784 61 05                   		cmp	#0, r5
 12317 0786 10                      		beq	.L798
 12318                             		.loc 2 11682 5 discriminator 2
 12319 0787 ED A1 12                		mov.L	72[r10], r1
 12320 078a 05 00 00 00             		bsr	_wolfSSL_Free
 12321                             	.L798:
 12322                             	.LBE71:
11683:../src/wolfcrypt/src/sp_int.c ****     return err;
 12323                             		.loc 2 11683 12 is_stmt 1
 12324 078e ED A5 05                		mov.L	20[r10], r5
11684:../src/wolfcrypt/src/sp_int.c **** }
 12325                             		.loc 2 11684 1
 12326 0791 EF 51                   		mov.L	r5, r1
 12327 0793 3F 7A 3E                		rtsd	#248, r7-r10
 12328                             	.LFE107:
 12330 0796 EF 00                   		.section	.text.sp_exptmod_nct,"ax",@progbits
 12331                             		.global	_sp_exptmod_nct
 12333                             	_sp_exptmod_nct:
 12334                             	.LFB108:
11685:../src/wolfcrypt/src/sp_int.c **** 
11686:../src/wolfcrypt/src/sp_int.c **** #undef SP_ALLOC
11687:../src/wolfcrypt/src/sp_int.c **** 
11688:../src/wolfcrypt/src/sp_int.c **** #else
11689:../src/wolfcrypt/src/sp_int.c **** /* Exponentiates b to the power of e modulo m into r: r = b ^ e mod m
11690:../src/wolfcrypt/src/sp_int.c ****  * Non-constant time implementation.
11691:../src/wolfcrypt/src/sp_int.c ****  *
11692:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer that is the base.
11693:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e  SP integer that is the exponent.
11694:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m  SP integer that is the modulus.
11695:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
11696:../src/wolfcrypt/src/sp_int.c ****  *
11697:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
11698:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when b, e, m or r is NULL; or m <= 0 or e is negative.
11699:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
11700:../src/wolfcrypt/src/sp_int.c ****  */
11701:../src/wolfcrypt/src/sp_int.c **** static int _sp_exptmod_nct(sp_int* b, sp_int* e, sp_int* m, sp_int* r)
11702:../src/wolfcrypt/src/sp_int.c **** {
11703:../src/wolfcrypt/src/sp_int.c ****     int i;
11704:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
11705:../src/wolfcrypt/src/sp_int.c ****     int done = 0;
11706:../src/wolfcrypt/src/sp_int.c ****     int y = 0;
11707:../src/wolfcrypt/src/sp_int.c ****     int bits = sp_count_bits(e);
11708:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit mp;
11709:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, m->used * 2 + 1, 2);
11710:../src/wolfcrypt/src/sp_int.c **** 
11711:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, m->used * 2 + 1, 2, err, NULL);
11712:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
11713:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t[0], m->used * 2 + 1);
11714:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t[1], m->used * 2 + 1);
11715:../src/wolfcrypt/src/sp_int.c **** 
11716:../src/wolfcrypt/src/sp_int.c ****         /* Ensure base is less than exponent. */
11717:../src/wolfcrypt/src/sp_int.c ****         if (_sp_cmp_abs(b, m) != MP_LT) {
11718:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod(b, m, t[0]);
11719:../src/wolfcrypt/src/sp_int.c ****             if ((err == MP_OKAY) && sp_iszero(t[0])) {
11720:../src/wolfcrypt/src/sp_int.c ****                 sp_set(r, 0);
11721:../src/wolfcrypt/src/sp_int.c ****                 done = 1;
11722:../src/wolfcrypt/src/sp_int.c ****             }
11723:../src/wolfcrypt/src/sp_int.c ****         }
11724:../src/wolfcrypt/src/sp_int.c ****         else {
11725:../src/wolfcrypt/src/sp_int.c ****             err = sp_copy(b, t[0]);
11726:../src/wolfcrypt/src/sp_int.c ****         }
11727:../src/wolfcrypt/src/sp_int.c ****     }
11728:../src/wolfcrypt/src/sp_int.c **** 
11729:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
11730:../src/wolfcrypt/src/sp_int.c ****         err = sp_mont_setup(m, &mp);
11731:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
11732:../src/wolfcrypt/src/sp_int.c ****             err = sp_mont_norm(t[1], m);
11733:../src/wolfcrypt/src/sp_int.c ****         }
11734:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
11735:../src/wolfcrypt/src/sp_int.c ****             /* Convert to montgomery form. */
11736:../src/wolfcrypt/src/sp_int.c ****             err = sp_mulmod(t[0], t[1], m, t[0]);
11737:../src/wolfcrypt/src/sp_int.c ****         }
11738:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
11739:../src/wolfcrypt/src/sp_int.c ****             /* Montgomert form of base to multiply by. */
11740:../src/wolfcrypt/src/sp_int.c ****             sp_copy(t[0], t[1]);
11741:../src/wolfcrypt/src/sp_int.c ****         }
11742:../src/wolfcrypt/src/sp_int.c **** 
11743:../src/wolfcrypt/src/sp_int.c ****         for (i = bits - 2; (err == MP_OKAY) && (i >= 0); i--) {
11744:../src/wolfcrypt/src/sp_int.c ****             err = sp_sqr(t[0], t[0]);
11745:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
11746:../src/wolfcrypt/src/sp_int.c ****                 err = _sp_mont_red(t[0], m, mp);
11747:../src/wolfcrypt/src/sp_int.c ****             }
11748:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
11749:../src/wolfcrypt/src/sp_int.c ****                 y = (e->dp[i >> SP_WORD_SHIFT] >> (i & SP_WORD_MASK)) & 1;
11750:../src/wolfcrypt/src/sp_int.c ****                 if (y != 0) {
11751:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mul(t[0], t[1], t[0]);
11752:../src/wolfcrypt/src/sp_int.c ****                     if (err == MP_OKAY) {
11753:../src/wolfcrypt/src/sp_int.c ****                         err = _sp_mont_red(t[0], m, mp);
11754:../src/wolfcrypt/src/sp_int.c ****                     }
11755:../src/wolfcrypt/src/sp_int.c ****                 }
11756:../src/wolfcrypt/src/sp_int.c ****             }
11757:../src/wolfcrypt/src/sp_int.c ****         }
11758:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
11759:../src/wolfcrypt/src/sp_int.c ****             /* Convert from montgomery form. */
11760:../src/wolfcrypt/src/sp_int.c ****             err = _sp_mont_red(t[0], m, mp);
11761:../src/wolfcrypt/src/sp_int.c ****             /* Reduction implementation returns number to range < m. */
11762:../src/wolfcrypt/src/sp_int.c ****         }
11763:../src/wolfcrypt/src/sp_int.c ****     }
11764:../src/wolfcrypt/src/sp_int.c ****     if ((!done) && (err == MP_OKAY)) {
11765:../src/wolfcrypt/src/sp_int.c ****         err = sp_copy(t[0], r);
11766:../src/wolfcrypt/src/sp_int.c ****     }
11767:../src/wolfcrypt/src/sp_int.c **** 
11768:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
11769:../src/wolfcrypt/src/sp_int.c ****     return err;
11770:../src/wolfcrypt/src/sp_int.c **** }
11771:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_FAST_NCT_EXPTMOD || !WOLFSSL_SP_SMALL */
11772:../src/wolfcrypt/src/sp_int.c **** 
11773:../src/wolfcrypt/src/sp_int.c **** /* Exponentiates b to the power of e modulo m into r: r = b ^ e mod m
11774:../src/wolfcrypt/src/sp_int.c ****  * Non-constant time implementation.
11775:../src/wolfcrypt/src/sp_int.c ****  *
11776:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer that is the base.
11777:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e  SP integer that is the exponent.
11778:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m  SP integer that is the modulus.
11779:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
11780:../src/wolfcrypt/src/sp_int.c ****  *
11781:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
11782:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when b, e, m or r is NULL; or m <= 0 or e is negative.
11783:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
11784:../src/wolfcrypt/src/sp_int.c ****  */
11785:../src/wolfcrypt/src/sp_int.c **** int sp_exptmod_nct(sp_int* b, sp_int* e, sp_int* m, sp_int* r)
11786:../src/wolfcrypt/src/sp_int.c **** {
 12335                             		.loc 2 11786 1
 12336 0000 7E AA                   		push.l	r10
 12337                             	.LCFI141:
 12338 0002 71 0A EC                		add	#-20, r0, r10
 12339                             	.LCFI142:
 12340 0005 71 A0 FC                		add	#-4, r10, r0
 12341                             	.LCFI143:
 12342 0008 E7 A1 01                		mov.L	r1, 4[r10]
 12343 000b E7 A2 02                		mov.L	r2, 8[r10]
 12344 000e E7 A3 03                		mov.L	r3, 12[r10]
 12345 0011 E7 A4 04                		mov.L	r4, 16[r10]
11787:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 12346                             		.loc 2 11787 9
 12347 0014 F8 A6 00                		mov.L	#0, [r10]
11788:../src/wolfcrypt/src/sp_int.c **** 
11789:../src/wolfcrypt/src/sp_int.c ****     if ((b == NULL) || (e == NULL) || (m == NULL) || (r == NULL)) {
 12348                             		.loc 2 11789 8
 12349 0017 ED A5 01                		mov.L	4[r10], r5
 12350 001a 61 05                   		cmp	#0, r5
 12351 001c 20 15                   		beq	.L803
 12352                             		.loc 2 11789 21 discriminator 1
 12353 001e ED A5 02                		mov.L	8[r10], r5
 12354 0021 61 05                   		cmp	#0, r5
 12355 0023 20 0E                   		beq	.L803
 12356                             		.loc 2 11789 36 discriminator 2
 12357 0025 ED A5 03                		mov.L	12[r10], r5
 12358 0028 61 05                   		cmp	#0, r5
 12359 002a 17                      		beq	.L803
 12360                             		.loc 2 11789 51 discriminator 3
 12361 002b ED A5 04                		mov.L	16[r10], r5
 12362 002e 61 05                   		cmp	#0, r5
 12363 0030 1C                      		bne	.L804
 12364                             		.balign 8,3,4
 12365                             	.L803:
11790:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 12366                             		.loc 2 11790 13
 12367 0031 F8 A6 FD                		mov.L	#-3, [r10]
 12368                             	.L804:
11791:../src/wolfcrypt/src/sp_int.c ****     }
11792:../src/wolfcrypt/src/sp_int.c **** 
11793:../src/wolfcrypt/src/sp_int.c **** #if 0
11794:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
11795:../src/wolfcrypt/src/sp_int.c ****         sp_print(b, "a");
11796:../src/wolfcrypt/src/sp_int.c ****         sp_print(e, "b");
11797:../src/wolfcrypt/src/sp_int.c ****         sp_print(m, "m");
11798:../src/wolfcrypt/src/sp_int.c ****     }
11799:../src/wolfcrypt/src/sp_int.c **** #endif
11800:../src/wolfcrypt/src/sp_int.c **** 
11801:../src/wolfcrypt/src/sp_int.c ****     if (err != MP_OKAY) {
 12369                             		.loc 2 11801 8
 12370 0034 EC A5                   		mov.L	[r10], r5
 12371 0036 61 05                   		cmp	#0, r5
 12372 0038 3B B3 00                		bne	.L805
11802:../src/wolfcrypt/src/sp_int.c ****     }
11803:../src/wolfcrypt/src/sp_int.c ****     /* Handle special cases. */
11804:../src/wolfcrypt/src/sp_int.c ****     else if (sp_iszero(m)) {
 12373                             		.loc 2 11804 14
 12374 003b ED A5 03                		mov.L	12[r10], r5
 12375 003e EC 55                   		mov.L	[r5], r5
 12376                             		.loc 2 11804 13
 12377 0040 61 05                   		cmp	#0, r5
 12378 0042 1F                      		bne	.L806
11805:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 12379                             		.loc 2 11805 13
 12380 0043 F8 A6 FD                		mov.L	#-3, [r10]
 12381 0046 38 A5 00                		bra	.L805
 12382                             	.L806:
11806:../src/wolfcrypt/src/sp_int.c ****     }
11807:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
11808:../src/wolfcrypt/src/sp_int.c ****     else if ((e->sign == MP_NEG) || (m->sign == MP_NEG)) {
11809:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
11810:../src/wolfcrypt/src/sp_int.c ****     }
11811:../src/wolfcrypt/src/sp_int.c **** #endif
11812:../src/wolfcrypt/src/sp_int.c ****     else if (sp_isone(m)) {
 12383                             		.loc 2 11812 14
 12384 0049 ED A5 03                		mov.L	12[r10], r5
 12385 004c EC 55                   		mov.L	[r5], r5
 12386                             		.loc 2 11812 13
 12387 004e 61 15                   		cmp	#1, r5
 12388 0050 21 17                   		bne	.L807
 12389                             		.loc 2 11812 14 discriminator 1
 12390 0052 ED A5 03                		mov.L	12[r10], r5
 12391 0055 A8 D5                   		mov.L	8[r5], r5
 12392 0057 61 15                   		cmp	#1, r5
 12393 0059 21 0E                   		bne	.L807
11813:../src/wolfcrypt/src/sp_int.c ****         sp_set(r, 0);
 12394                             		.loc 2 11813 9
 12395 005b 66 02                   		mov.L	#0, r2
 12396 005d ED A1 04                		mov.L	16[r10], r1
 12397 0060 05 00 00 00             		bsr	_sp_set
 12398 0064 38 87 00                		bra	.L805
 12399                             	.L807:
11814:../src/wolfcrypt/src/sp_int.c ****     }
11815:../src/wolfcrypt/src/sp_int.c ****     else if (sp_iszero(e)) {
 12400                             		.loc 2 11815 14
 12401 0067 ED A5 02                		mov.L	8[r10], r5
 12402 006a EC 55                   		mov.L	[r5], r5
 12403                             		.loc 2 11815 13
 12404 006c 61 05                   		cmp	#0, r5
 12405 006e 21 0D                   		bne	.L808
11816:../src/wolfcrypt/src/sp_int.c ****         sp_set(r, 1);
 12406                             		.loc 2 11816 9
 12407 0070 66 12                   		mov.L	#1, r2
 12408 0072 ED A1 04                		mov.L	16[r10], r1
 12409 0075 05 00 00 00             		bsr	_sp_set
 12410 0079 2E 72                   		bra	.L805
 12411                             	.L808:
11817:../src/wolfcrypt/src/sp_int.c ****     }
11818:../src/wolfcrypt/src/sp_int.c ****     else if (sp_iszero(b)) {
 12412                             		.loc 2 11818 14
 12413 007b ED A5 01                		mov.L	4[r10], r5
 12414 007e EC 55                   		mov.L	[r5], r5
 12415                             		.loc 2 11818 13
 12416 0080 61 05                   		cmp	#0, r5
 12417 0082 21 0D                   		bne	.L809
11819:../src/wolfcrypt/src/sp_int.c ****         sp_set(r, 0);
 12418                             		.loc 2 11819 9
 12419 0084 66 02                   		mov.L	#0, r2
 12420 0086 ED A1 04                		mov.L	16[r10], r1
 12421 0089 05 00 00 00             		bsr	_sp_set
 12422 008d 2E 5E                   		bra	.L805
 12423                             	.L809:
11820:../src/wolfcrypt/src/sp_int.c ****     }
11821:../src/wolfcrypt/src/sp_int.c ****     /* Ensure SP integers have space for intermediate values. */
11822:../src/wolfcrypt/src/sp_int.c ****     else if (m->used * 2 >= r->size) {
 12424                             		.loc 2 11822 15
 12425 008f ED A5 03                		mov.L	12[r10], r5
 12426 0092 EC 55                   		mov.L	[r5], r5
 12427                             		.loc 2 11822 22
 12428 0094 4B 55                   		add	r5, r5
 12429 0096 EF 54                   		mov.L	r5, r4
 12430                             		.loc 2 11822 30
 12431 0098 ED A5 04                		mov.L	16[r10], r5
 12432 009b A8 5D                   		mov.L	4[r5], r5
 12433                             		.loc 2 11822 13
 12434 009d 47 54                   		cmp	r5, r4
 12435 009f 29 07                   		blt	.L810
11823:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 12436                             		.loc 2 11823 13
 12437 00a1 F8 A6 FD                		mov.L	#-3, [r10]
 12438 00a4 2E 47                   		bra	.L805
 12439                             	.L810:
11824:../src/wolfcrypt/src/sp_int.c ****     }
11825:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_RSA_VERIFY_ONLY) && !defined(WOLFSSL_RSA_PUBLIC_ONLY)
11826:../src/wolfcrypt/src/sp_int.c ****     else if (mp_iseven(m)) {
 12440                             		.loc 2 11826 14
 12441 00a6 ED A5 03                		mov.L	12[r10], r5
 12442 00a9 EC 55                   		mov.L	[r5], r5
 12443                             		.loc 2 11826 13
 12444 00ab 61 05                   		cmp	#0, r5
 12445 00ad 20 2C                   		beq	.L811
 12446                             		.loc 2 11826 14 discriminator 1
 12447 00af ED A5 03                		mov.L	12[r10], r5
 12448 00b2 A8 D5                   		mov.L	8[r5], r5
 12449 00b4 64 15                   		and	#1, r5
 12450 00b6 61 05                   		cmp	#0, r5
 12451 00b8 21 21                   		bne	.L811
11827:../src/wolfcrypt/src/sp_int.c ****         err = _sp_exptmod_ex(b, e, e->used * SP_WORD_SIZE, m, r);
 12452                             		.loc 2 11827 37
 12453 00ba ED A5 02                		mov.L	8[r10], r5
 12454 00bd EC 55                   		mov.L	[r5], r5
 12455                             		.loc 2 11827 15
 12456 00bf 6C 55                   		shll	#5, r5
 12457 00c1 ED A4 04                		mov.L	16[r10], r4
 12458 00c4 E3 04                   		mov.L	r4, [r0]
 12459 00c6 ED A4 03                		mov.L	12[r10], r4
 12460 00c9 EF 53                   		mov.L	r5, r3
 12461 00cb ED A2 02                		mov.L	8[r10], r2
 12462 00ce ED A1 01                		mov.L	4[r10], r1
 12463 00d1 05 00 00 00             		bsr	__sp_exptmod_ex
 12464 00d5 E3 A1                   		mov.L	r1, [r10]
 12465                             		.loc 2 11827 13
 12466 00d7 2E 14                   		bra	.L805
 12467                             	.L811:
11828:../src/wolfcrypt/src/sp_int.c ****     }
11829:../src/wolfcrypt/src/sp_int.c **** #endif
11830:../src/wolfcrypt/src/sp_int.c ****     else {
11831:../src/wolfcrypt/src/sp_int.c ****         err = _sp_exptmod_nct(b, e, m, r);
 12468                             		.loc 2 11831 15
 12469 00d9 ED A4 04                		mov.L	16[r10], r4
 12470 00dc ED A3 03                		mov.L	12[r10], r3
 12471 00df ED A2 02                		mov.L	8[r10], r2
 12472 00e2 ED A1 01                		mov.L	4[r10], r1
 12473 00e5 05 00 00 00             		bsr	__sp_exptmod_nct
 12474 00e9 E3 A1                   		mov.L	r1, [r10]
 12475                             		.balign 8,3,1
 12476                             	.L805:
11832:../src/wolfcrypt/src/sp_int.c ****     }
11833:../src/wolfcrypt/src/sp_int.c **** 
11834:../src/wolfcrypt/src/sp_int.c **** #if 0
11835:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
11836:../src/wolfcrypt/src/sp_int.c ****         sp_print(r, "rme");
11837:../src/wolfcrypt/src/sp_int.c ****     }
11838:../src/wolfcrypt/src/sp_int.c **** #endif
11839:../src/wolfcrypt/src/sp_int.c **** 
11840:../src/wolfcrypt/src/sp_int.c ****     return err;
 12477                             		.loc 2 11840 12
 12478 00eb EC A5                   		mov.L	[r10], r5
11841:../src/wolfcrypt/src/sp_int.c **** }
 12479                             		.loc 2 11841 1
 12480 00ed EF 51                   		mov.L	r5, r1
 12481 00ef 3F AA 07                		rtsd	#28, r10-r10
 12482                             	.LFE108:
 12484 00f2 74 10 01 00 00 00       		.section	.text.sp_div_2d,"ax",@progbits
 12485                             		.global	_sp_div_2d
 12487                             	_sp_div_2d:
 12488                             	.LFB109:
11842:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_HAVE_SP_DH */
11843:../src/wolfcrypt/src/sp_int.c **** 
11844:../src/wolfcrypt/src/sp_int.c **** /***************
11845:../src/wolfcrypt/src/sp_int.c ****  * 2^e functions
11846:../src/wolfcrypt/src/sp_int.c ****  ***************/
11847:../src/wolfcrypt/src/sp_int.c **** 
11848:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)
11849:../src/wolfcrypt/src/sp_int.c **** /* Divide by 2^e: r = a >> e and rem = bits shifted out
11850:../src/wolfcrypt/src/sp_int.c ****  *
11851:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer to divide.
11852:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e    Exponent bits (dividing by 2^e).
11853:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m    SP integer that is the modulus.
11854:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r    SP integer to hold result.
11855:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  rem  SP integer to hold remainder.
11856:../src/wolfcrypt/src/sp_int.c ****  *
11857:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
11858:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a is NULL.
11859:../src/wolfcrypt/src/sp_int.c ****  */
11860:../src/wolfcrypt/src/sp_int.c **** int sp_div_2d(sp_int* a, int e, sp_int* r, sp_int* rem)
11861:../src/wolfcrypt/src/sp_int.c **** {
 12489                             		.loc 2 11861 1
 12490 0000 6E 7A                   		pushm	r7-r10
 12491                             	.LCFI144:
 12492 0002 71 0A E4                		add	#-28, r0, r10
 12493                             	.LCFI145:
 12494 0005 EF A0                   		mov.L	r10, r0
 12495 0007 E7 A1 03                		mov.L	r1, 12[r10]
 12496 000a E7 A2 04                		mov.L	r2, 16[r10]
 12497 000d E7 A3 05                		mov.L	r3, 20[r10]
 12498 0010 E7 A4 06                		mov.L	r4, 24[r10]
11862:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 12499                             		.loc 2 11862 9
 12500 0013 F8 A6 00                		mov.L	#0, [r10]
11863:../src/wolfcrypt/src/sp_int.c **** 
11864:../src/wolfcrypt/src/sp_int.c ****     if (a == NULL) {
 12501                             		.loc 2 11864 8
 12502 0016 ED A5 03                		mov.L	12[r10], r5
 12503 0019 61 05                   		cmp	#0, r5
 12504 001b 1C                      		bne	.L814
11865:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 12505                             		.loc 2 11865 13
 12506 001c F8 A6 FD                		mov.L	#-3, [r10]
 12507                             	.L814:
11866:../src/wolfcrypt/src/sp_int.c ****     }
11867:../src/wolfcrypt/src/sp_int.c **** 
11868:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 12508                             		.loc 2 11868 8
 12509 001f EC A5                   		mov.L	[r10], r5
 12510 0021 61 05                   		cmp	#0, r5
 12511 0023 3B D9 00                		bne	.L815
 12512                             	.LBB72:
11869:../src/wolfcrypt/src/sp_int.c ****         int remBits = sp_count_bits(a) - e;
 12513                             		.loc 2 11869 23
 12514 0026 ED A1 03                		mov.L	12[r10], r1
 12515 0029 05 00 00 00             		bsr	_sp_count_bits
 12516 002d EF 14                   		mov.L	r1, r4
 12517                             		.loc 2 11869 13
 12518 002f ED A5 04                		mov.L	16[r10], r5
 12519 0032 FF 05 54                		sub	r5, r4, r5
 12520 0035 E7 A5 02                		mov.L	r5, 8[r10]
11870:../src/wolfcrypt/src/sp_int.c **** 
11871:../src/wolfcrypt/src/sp_int.c ****         if (remBits <= 0) {
 12521                             		.loc 2 11871 12
 12522 0038 ED A5 02                		mov.L	8[r10], r5
 12523 003b 61 05                   		cmp	#0, r5
 12524 003d 2A 16                   		bgt	.L816
11872:../src/wolfcrypt/src/sp_int.c ****             /* Shifting down by more bits than in number. */
11873:../src/wolfcrypt/src/sp_int.c ****             _sp_zero(r);
 12525                             		.loc 2 11873 13
 12526 003f ED A1 05                		mov.L	20[r10], r1
 12527 0042 05 00 00 00             		bsr	__sp_zero
11874:../src/wolfcrypt/src/sp_int.c ****             sp_copy(a, rem);
 12528                             		.loc 2 11874 13
 12529 0046 ED A2 06                		mov.L	24[r10], r2
 12530 0049 ED A1 03                		mov.L	12[r10], r1
 12531 004c 05 00 00 00             		bsr	_sp_copy
 12532 0050 38 AC 00                		bra	.L815
 12533                             	.L816:
11875:../src/wolfcrypt/src/sp_int.c ****         }
11876:../src/wolfcrypt/src/sp_int.c ****         else {
11877:../src/wolfcrypt/src/sp_int.c ****             if (rem != NULL) {
 12534                             		.loc 2 11877 16
 12535 0053 ED A5 06                		mov.L	24[r10], r5
 12536 0056 61 05                   		cmp	#0, r5
 12537 0058 20 0E                   		beq	.L817
11878:../src/wolfcrypt/src/sp_int.c ****                 /* Copy a in to remainder. */
11879:../src/wolfcrypt/src/sp_int.c ****                 err = sp_copy(a, rem);
 12538                             		.loc 2 11879 23
 12539 005a ED A2 06                		mov.L	24[r10], r2
 12540 005d ED A1 03                		mov.L	12[r10], r1
 12541 0060 05 00 00 00             		bsr	_sp_copy
 12542 0064 E3 A1                   		mov.L	r1, [r10]
 12543                             	.L817:
11880:../src/wolfcrypt/src/sp_int.c ****             }
11881:../src/wolfcrypt/src/sp_int.c ****             /* Shift a down by into result. */
11882:../src/wolfcrypt/src/sp_int.c ****             sp_rshb(a, e, r);
 12544                             		.loc 2 11882 13
 12545 0066 ED A3 05                		mov.L	20[r10], r3
 12546 0069 ED A2 04                		mov.L	16[r10], r2
 12547 006c ED A1 03                		mov.L	12[r10], r1
 12548 006f 05 00 00 00             		bsr	_sp_rshb
11883:../src/wolfcrypt/src/sp_int.c ****             if (rem != NULL) {
 12549                             		.loc 2 11883 16
 12550 0073 ED A5 06                		mov.L	24[r10], r5
 12551 0076 61 05                   		cmp	#0, r5
 12552 0078 3A 84 00                		beq	.L815
11884:../src/wolfcrypt/src/sp_int.c ****                 /* Set used and mask off top digit of remainder. */
11885:../src/wolfcrypt/src/sp_int.c ****                 rem->used = (e + SP_WORD_SIZE - 1) >> SP_WORD_SHIFT;
 12553                             		.loc 2 11885 47
 12554 007b ED A5 04                		mov.L	16[r10], r5
 12555 007e 71 55 1F                		add	#31, r5
 12556                             		.loc 2 11885 52
 12557 0081 FD A5 54                		shar	#5, r5, r4
 12558                             		.loc 2 11885 27
 12559 0084 ED A5 06                		mov.L	24[r10], r5
 12560 0087 E3 54                   		mov.L	r4, [r5]
11886:../src/wolfcrypt/src/sp_int.c ****                 e &= SP_WORD_MASK;
 12561                             		.loc 2 11886 19
 12562 0089 ED A5 04                		mov.L	16[r10], r5
 12563 008c 75 25 1F                		and	#31, r5
 12564 008f E7 A5 04                		mov.L	r5, 16[r10]
11887:../src/wolfcrypt/src/sp_int.c ****                 if (e > 0) {
 12565                             		.loc 2 11887 20
 12566 0092 ED A5 04                		mov.L	16[r10], r5
 12567 0095 61 05                   		cmp	#0, r5
 12568 0097 2B 31                   		ble	.L818
11888:../src/wolfcrypt/src/sp_int.c ****                     rem->dp[rem->used - 1] &= ((sp_int_digit)1 << e) - 1;
 12569                             		.loc 2 11888 32
 12570 0099 ED A5 06                		mov.L	24[r10], r5
 12571 009c EC 55                   		mov.L	[r5], r5
 12572                             		.loc 2 11888 44
 12573 009e 60 15                   		sub	#1, r5
 12574 00a0 ED A4 06                		mov.L	24[r10], r4
 12575 00a3 62 25                   		add	#2, r5
 12576 00a5 FE 65 43                		mov.L	[r5,r4], r3
 12577                             		.loc 2 11888 64
 12578 00a8 66 14                   		mov.L	#1, r4
 12579 00aa ED A5 04                		mov.L	16[r10], r5
 12580 00ad EF 47                   		mov.L	r4, r7
 12581 00af FD 62 57                		shll	r5, r7
 12582 00b2 EF 75                   		mov.L	r7, r5
 12583                             		.loc 2 11888 70
 12584 00b4 71 54 FF                		add	#-1, r5, r4
 12585                             		.loc 2 11888 32
 12586 00b7 ED A5 06                		mov.L	24[r10], r5
 12587 00ba EC 55                   		mov.L	[r5], r5
 12588                             		.loc 2 11888 44
 12589 00bc 60 15                   		sub	#1, r5
 12590 00be 53 43                   		and	r4, r3
 12591 00c0 ED A4 06                		mov.L	24[r10], r4
 12592 00c3 62 25                   		add	#2, r5
 12593 00c5 FE 25 43                		mov.L	r3, [r5,r4]
 12594                             	.L818:
 12595                             	.LBB73:
11889:../src/wolfcrypt/src/sp_int.c ****                 }
11890:../src/wolfcrypt/src/sp_int.c ****                 sp_clamp(rem);
 12596                             		.loc 2 11890 17
 12597 00c8 ED A5 06                		mov.L	24[r10], r5
 12598 00cb EC 55                   		mov.L	[r5], r5
 12599 00cd 60 15                   		sub	#1, r5
 12600 00cf E7 A5 01                		mov.L	r5, 4[r10]
 12601 00d2 09                      		bra	.L819
 12602                             	.L821:
 12603                             		.loc 2 11890 17 is_stmt 0 discriminator 5
 12604 00d3 ED A5 01                		mov.L	4[r10], r5
 12605 00d6 60 15                   		sub	#1, r5
 12606 00d8 E7 A5 01                		mov.L	r5, 4[r10]
 12607                             	.L819:
 12608                             		.loc 2 11890 17 discriminator 1
 12609 00db ED A5 01                		mov.L	4[r10], r5
 12610 00de 61 05                   		cmp	#0, r5
 12611 00e0 29 11                   		blt	.L820
 12612                             		.loc 2 11890 17 discriminator 3
 12613 00e2 ED A4 06                		mov.L	24[r10], r4
 12614 00e5 ED A5 01                		mov.L	4[r10], r5
 12615 00e8 62 25                   		add	#2, r5
 12616 00ea FE 65 45                		mov.L	[r5,r4], r5
 12617 00ed 61 05                   		cmp	#0, r5
 12618 00ef 20 E4                   		beq	.L821
 12619                             	.L820:
 12620                             		.loc 2 11890 17 discriminator 6
 12621 00f1 ED A5 01                		mov.L	4[r10], r5
 12622 00f4 71 54 01                		add	#1, r5, r4
 12623 00f7 ED A5 06                		mov.L	24[r10], r5
 12624 00fa E3 54                   		mov.L	r4, [r5]
 12625                             		.balign 8,3,1
 12626                             	.L815:
 12627                             	.LBE73:
 12628                             	.LBE72:
11891:../src/wolfcrypt/src/sp_int.c ****             #ifdef WOLFSSL_SP_INT_NEGATIVE
11892:../src/wolfcrypt/src/sp_int.c ****                 rem->sign = MP_ZPOS;
11893:../src/wolfcrypt/src/sp_int.c ****             #endif
11894:../src/wolfcrypt/src/sp_int.c ****             }
11895:../src/wolfcrypt/src/sp_int.c ****         }
11896:../src/wolfcrypt/src/sp_int.c ****     }
11897:../src/wolfcrypt/src/sp_int.c **** 
11898:../src/wolfcrypt/src/sp_int.c ****     return err;
 12629                             		.loc 2 11898 12 is_stmt 1
 12630 00fc EC A5                   		mov.L	[r10], r5
11899:../src/wolfcrypt/src/sp_int.c **** }
 12631                             		.loc 2 11899 1
 12632 00fe EF 51                   		mov.L	r5, r1
 12633 0100 3F 7A 0B                		rtsd	#44, r7-r10
 12634                             	.LFE109:
 12636 0103 77 10 01 00 00          		.section	.text.sp_mod_2d,"ax",@progbits
 12637                             		.global	_sp_mod_2d
 12639                             	_sp_mod_2d:
 12640                             	.LFB110:
11900:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY */
11901:../src/wolfcrypt/src/sp_int.c **** 
11902:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)
11903:../src/wolfcrypt/src/sp_int.c **** /* The bottom e bits: r = a & ((1 << e) - 1)
11904:../src/wolfcrypt/src/sp_int.c ****  *
11905:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to reduce.
11906:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e  Modulus bits (modulus equals 2^e).
11907:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
11908:../src/wolfcrypt/src/sp_int.c ****  *
11909:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
11910:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or r is NULL.
11911:../src/wolfcrypt/src/sp_int.c ****  */
11912:../src/wolfcrypt/src/sp_int.c **** int sp_mod_2d(sp_int* a, int e, sp_int* r)
11913:../src/wolfcrypt/src/sp_int.c **** {
 12641                             		.loc 2 11913 1
 12642 0000 6E 7A                   		pushm	r7-r10
 12643                             	.LCFI146:
 12644 0002 71 0A E8                		add	#-24, r0, r10
 12645                             	.LCFI147:
 12646 0005 EF A0                   		mov.L	r10, r0
 12647 0007 E7 A1 03                		mov.L	r1, 12[r10]
 12648 000a E7 A2 04                		mov.L	r2, 16[r10]
 12649 000d E7 A3 05                		mov.L	r3, 20[r10]
11914:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 12650                             		.loc 2 11914 9
 12651 0010 F8 A6 00                		mov.L	#0, [r10]
11915:../src/wolfcrypt/src/sp_int.c **** 
11916:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (r == NULL)) {
 12652                             		.loc 2 11916 8
 12653 0013 ED A5 03                		mov.L	12[r10], r5
 12654 0016 61 05                   		cmp	#0, r5
 12655 0018 17                      		beq	.L824
 12656                             		.loc 2 11916 21 discriminator 1
 12657 0019 ED A5 05                		mov.L	20[r10], r5
 12658 001c 61 05                   		cmp	#0, r5
 12659 001e 1C                      		bne	.L825
 12660                             	.L824:
11917:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 12661                             		.loc 2 11917 13
 12662 001f F8 A6 FD                		mov.L	#-3, [r10]
 12663                             	.L825:
11918:../src/wolfcrypt/src/sp_int.c ****     }
11919:../src/wolfcrypt/src/sp_int.c **** 
11920:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 12664                             		.loc 2 11920 8
 12665 0022 EC A5                   		mov.L	[r10], r5
 12666 0024 61 05                   		cmp	#0, r5
 12667 0026 3B C2 00                		bne	.L826
 12668                             	.LBB74:
11921:../src/wolfcrypt/src/sp_int.c ****         int digits = (e + SP_WORD_SIZE - 1) >> SP_WORD_SHIFT;
 12669                             		.loc 2 11921 40
 12670 0029 ED A5 04                		mov.L	16[r10], r5
 12671 002c 71 55 1F                		add	#31, r5
 12672                             		.loc 2 11921 13
 12673 002f 6A 55                   		shar	#5, r5
 12674 0031 E7 A5 02                		mov.L	r5, 8[r10]
11922:../src/wolfcrypt/src/sp_int.c ****         if (a != r) {
 12675                             		.loc 2 11922 12
 12676 0034 ED A4 03                		mov.L	12[r10], r4
 12677 0037 ED A5 05                		mov.L	20[r10], r5
 12678 003a 47 54                   		cmp	r5, r4
 12679 003c 20 25                   		beq	.L827
11923:../src/wolfcrypt/src/sp_int.c ****             XMEMCPY(r->dp, a->dp, digits * sizeof(sp_int_digit));
 12680                             		.loc 2 11923 13
 12681 003e ED A5 05                		mov.L	20[r10], r5
 12682 0041 71 54 08                		add	#8, r5, r4
 12683 0044 ED A5 03                		mov.L	12[r10], r5
 12684 0047 71 52 08                		add	#8, r5, r2
 12685 004a ED A5 02                		mov.L	8[r10], r5
 12686 004d 6C 25                   		shll	#2, r5
 12687 004f EF 53                   		mov.L	r5, r3
 12688 0051 EF 41                   		mov.L	r4, r1
 12689 0053 05 00 00 00             		bsr	_memcpy
11924:../src/wolfcrypt/src/sp_int.c ****             r->used = a->used;
 12690                             		.loc 2 11924 24
 12691 0057 ED A5 03                		mov.L	12[r10], r5
 12692 005a EC 54                   		mov.L	[r5], r4
 12693                             		.loc 2 11924 21
 12694 005c ED A5 05                		mov.L	20[r10], r5
 12695 005f E3 54                   		mov.L	r4, [r5]
 12696                             	.L827:
11925:../src/wolfcrypt/src/sp_int.c ****         #ifdef WOLFSSL_SP_INT_NEGATIVE
11926:../src/wolfcrypt/src/sp_int.c ****             r->sign = a->sign;
11927:../src/wolfcrypt/src/sp_int.c ****         #endif
11928:../src/wolfcrypt/src/sp_int.c ****         }
11929:../src/wolfcrypt/src/sp_int.c ****     #ifndef WOLFSSL_SP_INT_NEGATIVE
11930:../src/wolfcrypt/src/sp_int.c ****         if (digits <= a->used)
 12697                             		.loc 2 11930 24
 12698 0061 ED A5 03                		mov.L	12[r10], r5
 12699 0064 EC 55                   		mov.L	[r5], r5
 12700                             		.loc 2 11930 12
 12701 0066 ED A4 02                		mov.L	8[r10], r4
 12702 0069 47 54                   		cmp	r5, r4
 12703 006b 2A 7D                   		bgt	.L826
11931:../src/wolfcrypt/src/sp_int.c ****     #else
11932:../src/wolfcrypt/src/sp_int.c ****         if ((a->sign != MP_ZPOS) || (digits <= a->used))
11933:../src/wolfcrypt/src/sp_int.c ****     #endif
11934:../src/wolfcrypt/src/sp_int.c ****         {
11935:../src/wolfcrypt/src/sp_int.c ****         #ifdef WOLFSSL_SP_INT_NEGATIVE
11936:../src/wolfcrypt/src/sp_int.c ****             if (a->sign == MP_NEG) {
11937:../src/wolfcrypt/src/sp_int.c ****                 int i;
11938:../src/wolfcrypt/src/sp_int.c ****                 sp_int_digit carry = 0;
11939:../src/wolfcrypt/src/sp_int.c **** 
11940:../src/wolfcrypt/src/sp_int.c ****                 /* Negate value. */
11941:../src/wolfcrypt/src/sp_int.c ****                 for (i = 0; i < r->used; i++) {
11942:../src/wolfcrypt/src/sp_int.c ****                     sp_int_digit next = r->dp[i] > 0;
11943:../src/wolfcrypt/src/sp_int.c ****                     r->dp[i] = (sp_int_digit)0 - r->dp[i] - carry;
11944:../src/wolfcrypt/src/sp_int.c ****                     carry |= next;
11945:../src/wolfcrypt/src/sp_int.c ****                 }
11946:../src/wolfcrypt/src/sp_int.c ****                 for (; i < digits; i++) {
11947:../src/wolfcrypt/src/sp_int.c ****                     r->dp[i] = (sp_int_digit)0 - carry;
11948:../src/wolfcrypt/src/sp_int.c ****                 }
11949:../src/wolfcrypt/src/sp_int.c ****                 r->sign = MP_ZPOS;
11950:../src/wolfcrypt/src/sp_int.c ****             }
11951:../src/wolfcrypt/src/sp_int.c ****         #endif
11952:../src/wolfcrypt/src/sp_int.c ****             /* Set used and mask off top digit of result. */
11953:../src/wolfcrypt/src/sp_int.c ****             r->used = digits;
 12704                             		.loc 2 11953 21
 12705 006d ED A5 05                		mov.L	20[r10], r5
 12706 0070 ED A4 02                		mov.L	8[r10], r4
 12707 0073 E3 54                   		mov.L	r4, [r5]
11954:../src/wolfcrypt/src/sp_int.c ****             e &= SP_WORD_MASK;
 12708                             		.loc 2 11954 15
 12709 0075 ED A5 04                		mov.L	16[r10], r5
 12710 0078 75 25 1F                		and	#31, r5
 12711 007b E7 A5 04                		mov.L	r5, 16[r10]
11955:../src/wolfcrypt/src/sp_int.c ****             if (e > 0) {
 12712                             		.loc 2 11955 16
 12713 007e ED A5 04                		mov.L	16[r10], r5
 12714 0081 61 05                   		cmp	#0, r5
 12715 0083 2B 31                   		ble	.L828
11956:../src/wolfcrypt/src/sp_int.c ****                 r->dp[r->used - 1] &= ((sp_int_digit)1 << e) - 1;
 12716                             		.loc 2 11956 24
 12717 0085 ED A5 05                		mov.L	20[r10], r5
 12718 0088 EC 55                   		mov.L	[r5], r5
 12719                             		.loc 2 11956 36
 12720 008a 60 15                   		sub	#1, r5
 12721 008c ED A4 05                		mov.L	20[r10], r4
 12722 008f 62 25                   		add	#2, r5
 12723 0091 FE 65 43                		mov.L	[r5,r4], r3
 12724                             		.loc 2 11956 56
 12725 0094 66 14                   		mov.L	#1, r4
 12726 0096 ED A5 04                		mov.L	16[r10], r5
 12727 0099 EF 47                   		mov.L	r4, r7
 12728 009b FD 62 57                		shll	r5, r7
 12729 009e EF 75                   		mov.L	r7, r5
 12730                             		.loc 2 11956 62
 12731 00a0 71 54 FF                		add	#-1, r5, r4
 12732                             		.loc 2 11956 24
 12733 00a3 ED A5 05                		mov.L	20[r10], r5
 12734 00a6 EC 55                   		mov.L	[r5], r5
 12735                             		.loc 2 11956 36
 12736 00a8 60 15                   		sub	#1, r5
 12737 00aa 53 43                   		and	r4, r3
 12738 00ac ED A4 05                		mov.L	20[r10], r4
 12739 00af 62 25                   		add	#2, r5
 12740 00b1 FE 25 43                		mov.L	r3, [r5,r4]
 12741                             	.L828:
 12742                             	.LBB75:
11957:../src/wolfcrypt/src/sp_int.c ****             }
11958:../src/wolfcrypt/src/sp_int.c ****             sp_clamp(r);
 12743                             		.loc 2 11958 13
 12744 00b4 ED A5 05                		mov.L	20[r10], r5
 12745 00b7 EC 55                   		mov.L	[r5], r5
 12746 00b9 60 15                   		sub	#1, r5
 12747 00bb E7 A5 01                		mov.L	r5, 4[r10]
 12748 00be 09                      		bra	.L829
 12749                             	.L831:
 12750                             		.loc 2 11958 13 is_stmt 0 discriminator 5
 12751 00bf ED A5 01                		mov.L	4[r10], r5
 12752 00c2 60 15                   		sub	#1, r5
 12753 00c4 E7 A5 01                		mov.L	r5, 4[r10]
 12754                             	.L829:
 12755                             		.loc 2 11958 13 discriminator 1
 12756 00c7 ED A5 01                		mov.L	4[r10], r5
 12757 00ca 61 05                   		cmp	#0, r5
 12758 00cc 29 11                   		blt	.L830
 12759                             		.loc 2 11958 13 discriminator 3
 12760 00ce ED A4 05                		mov.L	20[r10], r4
 12761 00d1 ED A5 01                		mov.L	4[r10], r5
 12762 00d4 62 25                   		add	#2, r5
 12763 00d6 FE 65 45                		mov.L	[r5,r4], r5
 12764 00d9 61 05                   		cmp	#0, r5
 12765 00db 20 E4                   		beq	.L831
 12766                             	.L830:
 12767                             		.loc 2 11958 13 discriminator 6
 12768 00dd ED A5 01                		mov.L	4[r10], r5
 12769 00e0 71 54 01                		add	#1, r5, r4
 12770 00e3 ED A5 05                		mov.L	20[r10], r5
 12771 00e6 E3 54                   		mov.L	r4, [r5]
 12772                             	.L826:
 12773                             	.LBE75:
 12774                             	.LBE74:
11959:../src/wolfcrypt/src/sp_int.c ****         }
11960:../src/wolfcrypt/src/sp_int.c ****     }
11961:../src/wolfcrypt/src/sp_int.c **** 
11962:../src/wolfcrypt/src/sp_int.c ****     return err;
 12775                             		.loc 2 11962 12 is_stmt 1
 12776 00e8 EC A5                   		mov.L	[r10], r5
11963:../src/wolfcrypt/src/sp_int.c **** }
 12777                             		.loc 2 11963 1
 12778 00ea EF 51                   		mov.L	r5, r1
 12779 00ec 3F 7A 0A                		rtsd	#40, r7-r10
 12780                             	.LFE110:
 12782                             		.section	.text.sp_mul_2d,"ax",@progbits
 12783                             		.global	_sp_mul_2d
 12785                             	_sp_mul_2d:
 12786                             	.LFB111:
11964:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY */
11965:../src/wolfcrypt/src/sp_int.c **** 
11966:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && (!defined(WOLFSSL_RSA_VERIFY_ONLY) || \
11967:../src/wolfcrypt/src/sp_int.c ****     !defined(NO_DH))
11968:../src/wolfcrypt/src/sp_int.c **** /* Multiply by 2^e: r = a << e
11969:../src/wolfcrypt/src/sp_int.c ****  *
11970:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to multiply.
11971:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   e  Multiplier bits (multiplier equals 2^e).
11972:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
11973:../src/wolfcrypt/src/sp_int.c ****  *
11974:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
11975:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or r is NULL, or result is too big for fixed data
11976:../src/wolfcrypt/src/sp_int.c ****  *          length.
11977:../src/wolfcrypt/src/sp_int.c ****  */
11978:../src/wolfcrypt/src/sp_int.c **** int sp_mul_2d(sp_int* a, int e, sp_int* r)
11979:../src/wolfcrypt/src/sp_int.c **** {
 12787                             		.loc 2 11979 1
 12788 0000 7E AA                   		push.l	r10
 12789                             	.LCFI148:
 12790 0002 71 0A F0                		add	#-16, r0, r10
 12791                             	.LCFI149:
 12792 0005 EF A0                   		mov.L	r10, r0
 12793 0007 E7 A1 01                		mov.L	r1, 4[r10]
 12794 000a E7 A2 02                		mov.L	r2, 8[r10]
 12795 000d E7 A3 03                		mov.L	r3, 12[r10]
11980:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 12796                             		.loc 2 11980 9
 12797 0010 F8 A6 00                		mov.L	#0, [r10]
11981:../src/wolfcrypt/src/sp_int.c **** 
11982:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (r == NULL)) {
 12798                             		.loc 2 11982 8
 12799 0013 ED A5 01                		mov.L	4[r10], r5
 12800 0016 61 05                   		cmp	#0, r5
 12801 0018 17                      		beq	.L834
 12802                             		.loc 2 11982 21 discriminator 1
 12803 0019 ED A5 03                		mov.L	12[r10], r5
 12804 001c 61 05                   		cmp	#0, r5
 12805 001e 1C                      		bne	.L835
 12806                             	.L834:
11983:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 12807                             		.loc 2 11983 13
 12808 001f F8 A6 FD                		mov.L	#-3, [r10]
 12809                             	.L835:
11984:../src/wolfcrypt/src/sp_int.c ****     }
11985:../src/wolfcrypt/src/sp_int.c **** 
11986:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (sp_count_bits(a) + e > r->size * SP_WORD_SIZE)) {
 12810                             		.loc 2 11986 8
 12811 0022 EC A5                   		mov.L	[r10], r5
 12812 0024 61 05                   		cmp	#0, r5
 12813 0026 21 1F                   		bne	.L836
 12814                             		.loc 2 11986 30 discriminator 1
 12815 0028 ED A1 01                		mov.L	4[r10], r1
 12816 002b 05 00 00 00             		bsr	_sp_count_bits
 12817 002f EF 15                   		mov.L	r1, r5
 12818                             		.loc 2 11986 47 discriminator 1
 12819 0031 EF 54                   		mov.L	r5, r4
 12820 0033 06 89 A4 02             		add	8[r10].L, r4
 12821                             		.loc 2 11986 54 discriminator 1
 12822 0037 ED A5 03                		mov.L	12[r10], r5
 12823 003a A8 5D                   		mov.L	4[r5], r5
 12824                             		.loc 2 11986 61 discriminator 1
 12825 003c 6C 55                   		shll	#5, r5
 12826                             		.loc 2 11986 26 discriminator 1
 12827 003e 47 54                   		cmp	r5, r4
 12828 0040 2B 05                   		ble	.L836
11987:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 12829                             		.loc 2 11987 13
 12830 0042 F8 A6 FD                		mov.L	#-3, [r10]
 12831                             	.L836:
11988:../src/wolfcrypt/src/sp_int.c ****     }
11989:../src/wolfcrypt/src/sp_int.c **** 
11990:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 12832                             		.loc 2 11990 8
 12833 0045 EC A5                   		mov.L	[r10], r5
 12834 0047 61 05                   		cmp	#0, r5
 12835 0049 21 18                   		bne	.L837
11991:../src/wolfcrypt/src/sp_int.c ****         /* Copy a into r as left shift function works on the number. */
11992:../src/wolfcrypt/src/sp_int.c ****         if (a != r) {
 12836                             		.loc 2 11992 12
 12837 004b ED A4 01                		mov.L	4[r10], r4
 12838 004e ED A5 03                		mov.L	12[r10], r5
 12839 0051 47 54                   		cmp	r5, r4
 12840 0053 20 0E                   		beq	.L837
11993:../src/wolfcrypt/src/sp_int.c ****             err = sp_copy(a, r);
 12841                             		.loc 2 11993 19
 12842 0055 ED A2 03                		mov.L	12[r10], r2
 12843 0058 ED A1 01                		mov.L	4[r10], r1
 12844 005b 05 00 00 00             		bsr	_sp_copy
 12845 005f E3 A1                   		mov.L	r1, [r10]
 12846                             	.L837:
11994:../src/wolfcrypt/src/sp_int.c ****         }
11995:../src/wolfcrypt/src/sp_int.c ****     }
11996:../src/wolfcrypt/src/sp_int.c **** 
11997:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 12847                             		.loc 2 11997 8
 12848 0061 EC A5                   		mov.L	[r10], r5
 12849 0063 61 05                   		cmp	#0, r5
 12850 0065 21 0E                   		bne	.L838
11998:../src/wolfcrypt/src/sp_int.c ****         if (0) {
11999:../src/wolfcrypt/src/sp_int.c ****             sp_print(a, "a");
12000:../src/wolfcrypt/src/sp_int.c ****             sp_print_int(e, "n");
12001:../src/wolfcrypt/src/sp_int.c ****         }
12002:../src/wolfcrypt/src/sp_int.c ****         err = sp_lshb(r, e);
 12851                             		.loc 2 12002 15
 12852 0067 ED A2 02                		mov.L	8[r10], r2
 12853 006a ED A1 03                		mov.L	12[r10], r1
 12854 006d 05 00 00 00             		bsr	_sp_lshb
 12855 0071 E3 A1                   		mov.L	r1, [r10]
 12856                             	.L838:
12003:../src/wolfcrypt/src/sp_int.c ****         if (0) {
12004:../src/wolfcrypt/src/sp_int.c ****             sp_print(r, "rsl");
12005:../src/wolfcrypt/src/sp_int.c ****         }
12006:../src/wolfcrypt/src/sp_int.c ****     }
12007:../src/wolfcrypt/src/sp_int.c **** 
12008:../src/wolfcrypt/src/sp_int.c ****     return err;
 12857                             		.loc 2 12008 12
 12858 0073 EC A5                   		mov.L	[r10], r5
12009:../src/wolfcrypt/src/sp_int.c **** }
 12859                             		.loc 2 12009 1
 12860 0075 EF 51                   		mov.L	r5, r1
 12861 0077 3F AA 05                		rtsd	#20, r10-r10
 12862                             	.LFE111:
 12864                             		.section	.text._sp_sqr,"ax",@progbits
 12866                             	__sp_sqr:
 12867                             	.LFB112:
12010:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY */
12011:../src/wolfcrypt/src/sp_int.c **** 
12012:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || defined(WOLFSSL_HAVE_SP_DH) || \
12013:../src/wolfcrypt/src/sp_int.c ****     defined(HAVE_ECC) || (!defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY))
12014:../src/wolfcrypt/src/sp_int.c **** 
12015:../src/wolfcrypt/src/sp_int.c **** /* START SP_SQR implementations */
12016:../src/wolfcrypt/src/sp_int.c **** /* This code is generated.
12017:../src/wolfcrypt/src/sp_int.c ****  * To generate:
12018:../src/wolfcrypt/src/sp_int.c ****  *   cd scripts/sp/sp_int
12019:../src/wolfcrypt/src/sp_int.c ****  *   ./gen.sh
12020:../src/wolfcrypt/src/sp_int.c ****  * File sp_sqr.c contains code.
12021:../src/wolfcrypt/src/sp_int.c ****  */
12022:../src/wolfcrypt/src/sp_int.c **** 
12023:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_SP_MATH) || !defined(WOLFSSL_SP_SMALL)
12024:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
12025:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
12026:../src/wolfcrypt/src/sp_int.c ****  *
12027:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
12028:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
12029:../src/wolfcrypt/src/sp_int.c ****  *
12030:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
12031:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
12032:../src/wolfcrypt/src/sp_int.c ****  */
12033:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr(sp_int* a, sp_int* r)
12034:../src/wolfcrypt/src/sp_int.c **** {
12035:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
12036:../src/wolfcrypt/src/sp_int.c ****     int i;
12037:../src/wolfcrypt/src/sp_int.c ****     int j;
12038:../src/wolfcrypt/src/sp_int.c ****     int k;
12039:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
12040:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit* t = NULL;
12041:../src/wolfcrypt/src/sp_int.c **** #elif defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && \
12042:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SP_NO_DYN_STACK)
12043:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[a->used * 2];
12044:../src/wolfcrypt/src/sp_int.c **** #else
12045:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[SP_INT_DIGITS];
12046:../src/wolfcrypt/src/sp_int.c **** #endif
12047:../src/wolfcrypt/src/sp_int.c **** 
12048:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
12049:../src/wolfcrypt/src/sp_int.c ****     t = (sp_int_digit*)XMALLOC(sizeof(sp_int_digit) * (a->used * 2), NULL,
12050:../src/wolfcrypt/src/sp_int.c ****         DYNAMIC_TYPE_BIGINT);
12051:../src/wolfcrypt/src/sp_int.c ****     if (t == NULL) {
12052:../src/wolfcrypt/src/sp_int.c ****         err = MP_MEM;
12053:../src/wolfcrypt/src/sp_int.c ****     }
12054:../src/wolfcrypt/src/sp_int.c **** #endif
12055:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (a->used <= 1)) {
12056:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit l, h;
12057:../src/wolfcrypt/src/sp_int.c **** 
12058:../src/wolfcrypt/src/sp_int.c ****         h = 0;
12059:../src/wolfcrypt/src/sp_int.c ****         l = 0;
12060:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR(h, l, a->dp[0]);
12061:../src/wolfcrypt/src/sp_int.c ****         t[0] = h;
12062:../src/wolfcrypt/src/sp_int.c ****         t[1] = l;
12063:../src/wolfcrypt/src/sp_int.c ****     }
12064:../src/wolfcrypt/src/sp_int.c ****     else if (err == MP_OKAY) {
12065:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit l, h, o;
12066:../src/wolfcrypt/src/sp_int.c **** 
12067:../src/wolfcrypt/src/sp_int.c ****         h = 0;
12068:../src/wolfcrypt/src/sp_int.c ****         l = 0;
12069:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR(h, l, a->dp[0]);
12070:../src/wolfcrypt/src/sp_int.c ****         t[0] = h;
12071:../src/wolfcrypt/src/sp_int.c ****         h = 0;
12072:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12073:../src/wolfcrypt/src/sp_int.c ****         for (k = 1; k < (a->used + 1) / 2; k++) {
12074:../src/wolfcrypt/src/sp_int.c ****             i = k;
12075:../src/wolfcrypt/src/sp_int.c ****             j = k - 1;
12076:../src/wolfcrypt/src/sp_int.c ****             for (; (j >= 0); i++, j--) {
12077:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD2(l, h, o, a->dp[i], a->dp[j]);
12078:../src/wolfcrypt/src/sp_int.c ****             }
12079:../src/wolfcrypt/src/sp_int.c ****             t[k * 2 - 1] = l;
12080:../src/wolfcrypt/src/sp_int.c ****             l = h;
12081:../src/wolfcrypt/src/sp_int.c ****             h = o;
12082:../src/wolfcrypt/src/sp_int.c ****             o = 0;
12083:../src/wolfcrypt/src/sp_int.c **** 
12084:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SQR_ADD(l, h, o, a->dp[k]);
12085:../src/wolfcrypt/src/sp_int.c ****             i = k + 1;
12086:../src/wolfcrypt/src/sp_int.c ****             j = k - 1;
12087:../src/wolfcrypt/src/sp_int.c ****             for (; (j >= 0); i++, j--) {
12088:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD2(l, h, o, a->dp[i], a->dp[j]);
12089:../src/wolfcrypt/src/sp_int.c ****             }
12090:../src/wolfcrypt/src/sp_int.c ****             t[k * 2] = l;
12091:../src/wolfcrypt/src/sp_int.c ****             l = h;
12092:../src/wolfcrypt/src/sp_int.c ****             h = o;
12093:../src/wolfcrypt/src/sp_int.c ****             o = 0;
12094:../src/wolfcrypt/src/sp_int.c ****         }
12095:../src/wolfcrypt/src/sp_int.c ****         for (; k < a->used; k++) {
12096:../src/wolfcrypt/src/sp_int.c ****             i = k;
12097:../src/wolfcrypt/src/sp_int.c ****             j = k - 1;
12098:../src/wolfcrypt/src/sp_int.c ****             for (; (i < a->used); i++, j--) {
12099:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD2(l, h, o, a->dp[i], a->dp[j]);
12100:../src/wolfcrypt/src/sp_int.c ****             }
12101:../src/wolfcrypt/src/sp_int.c ****             t[k * 2 - 1] = l;
12102:../src/wolfcrypt/src/sp_int.c ****             l = h;
12103:../src/wolfcrypt/src/sp_int.c ****             h = o;
12104:../src/wolfcrypt/src/sp_int.c ****             o = 0;
12105:../src/wolfcrypt/src/sp_int.c **** 
12106:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SQR_ADD(l, h, o, a->dp[k]);
12107:../src/wolfcrypt/src/sp_int.c ****             i = k + 1;
12108:../src/wolfcrypt/src/sp_int.c ****             j = k - 1;
12109:../src/wolfcrypt/src/sp_int.c ****             for (; (i < a->used); i++, j--) {
12110:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD2(l, h, o, a->dp[i], a->dp[j]);
12111:../src/wolfcrypt/src/sp_int.c ****             }
12112:../src/wolfcrypt/src/sp_int.c ****             t[k * 2] = l;
12113:../src/wolfcrypt/src/sp_int.c ****             l = h;
12114:../src/wolfcrypt/src/sp_int.c ****             h = o;
12115:../src/wolfcrypt/src/sp_int.c ****             o = 0;
12116:../src/wolfcrypt/src/sp_int.c ****         }
12117:../src/wolfcrypt/src/sp_int.c ****         t[k * 2 - 1] = l;
12118:../src/wolfcrypt/src/sp_int.c ****     }
12119:../src/wolfcrypt/src/sp_int.c **** 
12120:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
12121:../src/wolfcrypt/src/sp_int.c ****         r->used = a->used * 2;
12122:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(r->dp, t, r->used * sizeof(sp_int_digit));
12123:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
12124:../src/wolfcrypt/src/sp_int.c ****     }
12125:../src/wolfcrypt/src/sp_int.c **** 
12126:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
12127:../src/wolfcrypt/src/sp_int.c ****     if (t != NULL) {
12128:../src/wolfcrypt/src/sp_int.c ****         XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
12129:../src/wolfcrypt/src/sp_int.c ****     }
12130:../src/wolfcrypt/src/sp_int.c **** #endif
12131:../src/wolfcrypt/src/sp_int.c ****     return err;
12132:../src/wolfcrypt/src/sp_int.c **** }
12133:../src/wolfcrypt/src/sp_int.c **** #else /* !SQR_MUL_ASM */
12134:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
12135:../src/wolfcrypt/src/sp_int.c ****  *
12136:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
12137:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
12138:../src/wolfcrypt/src/sp_int.c ****  *
12139:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
12140:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
12141:../src/wolfcrypt/src/sp_int.c ****  */
12142:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr(sp_int* a, sp_int* r)
12143:../src/wolfcrypt/src/sp_int.c **** {
 12868                             		.loc 2 12143 1
 12869 0000 6E 6D                   		pushm	r6-r13
 12870                             	.LCFI150:
 12871 0002 72 0A 14 FF             		add	#-236, r0, r10
 12872                             	.LCFI151:
 12873 0006 EF A0                   		mov.L	r10, r0
 12874 0008 E7 A1 0D                		mov.L	r1, 52[r10]
 12875 000b E7 A2 0E                		mov.L	r2, 56[r10]
12144:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 12876                             		.loc 2 12144 9
 12877 000e F8 A6 00                		mov.L	#0, [r10]
12145:../src/wolfcrypt/src/sp_int.c ****     int i;
12146:../src/wolfcrypt/src/sp_int.c ****     int j;
12147:../src/wolfcrypt/src/sp_int.c ****     int k;
12148:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
12149:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit* t = NULL;
 12878                             		.loc 2 12149 19
 12879 0011 F9 A6 09 00             		mov.L	#0, 36[r10]
12150:../src/wolfcrypt/src/sp_int.c **** #elif defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) && \
12151:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_SP_SMALL) && !defined(WOLFSSL_SP_NO_DYN_STACK)
12152:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[a->used * 2];
12153:../src/wolfcrypt/src/sp_int.c **** #else
12154:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[SP_INT_DIGITS];
12155:../src/wolfcrypt/src/sp_int.c **** #endif
12156:../src/wolfcrypt/src/sp_int.c **** 
12157:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
12158:../src/wolfcrypt/src/sp_int.c ****     t = (sp_int_digit*)XMALLOC(sizeof(sp_int_digit) * (a->used * 2), NULL,
 12880                             		.loc 2 12158 24
 12881 0015 ED A5 0D                		mov.L	52[r10], r5
 12882 0018 EC 55                   		mov.L	[r5], r5
 12883 001a 6C 35                   		shll	#3, r5
 12884 001c EF 51                   		mov.L	r5, r1
 12885 001e 05 00 00 00             		bsr	_wolfSSL_Malloc
 12886 0022 E7 A1 09                		mov.L	r1, 36[r10]
12159:../src/wolfcrypt/src/sp_int.c ****         DYNAMIC_TYPE_BIGINT);
12160:../src/wolfcrypt/src/sp_int.c ****     if (t == NULL) {
 12887                             		.loc 2 12160 8
 12888 0025 ED A5 09                		mov.L	36[r10], r5
 12889 0028 61 05                   		cmp	#0, r5
 12890 002a 1C                      		bne	.L841
12161:../src/wolfcrypt/src/sp_int.c ****         err = MP_MEM;
 12891                             		.loc 2 12161 13
 12892 002b F8 A6 FE                		mov.L	#-2, [r10]
 12893                             	.L841:
12162:../src/wolfcrypt/src/sp_int.c ****     }
12163:../src/wolfcrypt/src/sp_int.c **** #endif
12164:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 12894                             		.loc 2 12164 8
 12895 002e EC A5                   		mov.L	[r10], r5
 12896 0030 61 05                   		cmp	#0, r5
 12897 0032 3B 50 03                		bne	.L842
 12898                             	.LBB76:
12165:../src/wolfcrypt/src/sp_int.c ****         sp_int_word w;
12166:../src/wolfcrypt/src/sp_int.c ****         sp_int_word l;
12167:../src/wolfcrypt/src/sp_int.c ****         sp_int_word h;
12168:../src/wolfcrypt/src/sp_int.c ****     #ifdef SP_WORD_OVERFLOW
12169:../src/wolfcrypt/src/sp_int.c ****         sp_int_word o;
12170:../src/wolfcrypt/src/sp_int.c ****     #endif
12171:../src/wolfcrypt/src/sp_int.c **** 
12172:../src/wolfcrypt/src/sp_int.c ****         w = (sp_int_word)a->dp[0] * a->dp[0];
 12899                             		.loc 2 12172 31
 12900 0035 ED A5 0D                		mov.L	52[r10], r5
 12901 0038 A8 D5                   		mov.L	8[r5], r5
 12902                             		.loc 2 12172 13
 12903 003a EF 58                   		mov.L	r5, r8
 12904 003c 66 09                   		mov.L	#0, r9
 12905                             		.loc 2 12172 42
 12906 003e ED A5 0D                		mov.L	52[r10], r5
 12907 0041 A8 D5                   		mov.L	8[r5], r5
 12908 0043 EF 5B                   		mov.L	r5, r11
 12909 0045 66 0C                   		mov.L	#0, r12
 12910                             		.loc 2 12172 11
 12911 0047 FF 34 B9                		mul	r11, r9, r4
 12912 004a FF 35 8C                		mul	r8, r12, r5
 12913 004d 4B 54                   		add	r5, r4
 12914 004f EF 8D                   		mov.L	r8, r13
 12915 0051 FC 1F BD                		emulu	r11, r13
 12916 0054 EF D5                   		mov.L	r13, r5
 12917 0056 EF E6                   		mov.L	r14, r6
 12918 0058 4B 64                   		add	r6, r4
 12919 005a EF 46                   		mov.L	r4, r6
 12920 005c E7 A5 0A                		mov.L	r5, 40[r10]
 12921 005f E7 A6 0B                		mov.L	r6, 44[r10]
12173:../src/wolfcrypt/src/sp_int.c ****         t[0] = (sp_int_digit)w;
 12922                             		.loc 2 12173 16
 12923 0062 ED A4 0A                		mov.L	40[r10], r4
 12924                             		.loc 2 12173 14
 12925 0065 ED A5 09                		mov.L	36[r10], r5
 12926 0068 E3 54                   		mov.L	r4, [r5]
12174:../src/wolfcrypt/src/sp_int.c ****         l = (sp_int_digit)(w >> SP_WORD_SIZE);
 12927                             		.loc 2 12174 30
 12928 006a ED A5 0B                		mov.L	44[r10], r5
 12929 006d 68 05                   		shlr	#0, r5
 12930 006f E7 A5 0F                		mov.L	r5, 60[r10]
 12931 0072 F9 A6 10 00             		mov.L	#0, 64[r10]
 12932                             		.loc 2 12174 13
 12933 0076 ED A5 0F                		mov.L	60[r10], r5
 12934                             		.loc 2 12174 11
 12935 0079 E7 A5 04                		mov.L	r5, 16[r10]
 12936 007c F9 A6 05 00             		mov.L	#0, 20[r10]
12175:../src/wolfcrypt/src/sp_int.c ****         h = 0;
 12937                             		.loc 2 12175 11
 12938 0080 F9 A6 06 00             		mov.L	#0, 24[r10]
 12939 0084 F9 A6 07 00             		mov.L	#0, 28[r10]
12176:../src/wolfcrypt/src/sp_int.c ****     #ifdef SP_WORD_OVERFLOW
12177:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12178:../src/wolfcrypt/src/sp_int.c ****     #endif
12179:../src/wolfcrypt/src/sp_int.c ****         for (k = 1; k <= (a->used - 1) * 2; k++) {
 12940                             		.loc 2 12179 16
 12941 0088 F9 A6 03 01             		mov.L	#1, 12[r10]
 12942                             		.loc 2 12179 9
 12943 008c 38 7B 02                		bra	.L843
 12944                             	.L848:
12180:../src/wolfcrypt/src/sp_int.c ****             i = k / 2;
 12945                             		.loc 2 12180 15
 12946 008f ED A4 03                		mov.L	12[r10], r4
 12947 0092 FD 9F 45                		shlr	#31, r4, r5
 12948 0095 4B 45                   		add	r4, r5
 12949 0097 6A 15                   		shar	#1, r5
 12950 0099 E7 A5 01                		mov.L	r5, 4[r10]
12181:../src/wolfcrypt/src/sp_int.c ****             j = k - i;
 12951                             		.loc 2 12181 15
 12952 009c ED A4 03                		mov.L	12[r10], r4
 12953 009f ED A5 01                		mov.L	4[r10], r5
 12954 00a2 FF 05 54                		sub	r5, r4, r5
 12955 00a5 E7 A5 02                		mov.L	r5, 8[r10]
12182:../src/wolfcrypt/src/sp_int.c ****             if (i == j) {
 12956                             		.loc 2 12182 16
 12957 00a8 ED A4 01                		mov.L	4[r10], r4
 12958 00ab ED A5 02                		mov.L	8[r10], r5
 12959 00ae 47 54                   		cmp	r5, r4
 12960 00b0 3B B2 00                		bne	.L844
12183:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * a->dp[j];
 12961                             		.loc 2 12183 39
 12962 00b3 ED A4 0D                		mov.L	52[r10], r4
 12963 00b6 ED A5 01                		mov.L	4[r10], r5
 12964 00b9 62 25                   		add	#2, r5
 12965 00bb FE 65 45                		mov.L	[r5,r4], r5
 12966                             		.loc 2 12183 21
 12967 00be E7 A5 11                		mov.L	r5, 68[r10]
 12968 00c1 F9 A6 12 00             		mov.L	#0, 72[r10]
 12969                             		.loc 2 12183 50
 12970 00c5 ED A4 0D                		mov.L	52[r10], r4
 12971 00c8 ED A5 02                		mov.L	8[r10], r5
 12972 00cb 62 25                   		add	#2, r5
 12973 00cd FE 65 45                		mov.L	[r5,r4], r5
 12974 00d0 E7 A5 13                		mov.L	r5, 76[r10]
 12975 00d3 F9 A6 14 00             		mov.L	#0, 80[r10]
 12976                             		.loc 2 12183 19
 12977 00d7 ED A4 12                		mov.L	72[r10], r4
 12978 00da ED AE 13                		mov.L	76[r10], r14
 12979 00dd 4F E4                   		mul	r14, r4
 12980 00df ED A5 14                		mov.L	80[r10], r5
 12981 00e2 ED A7 11                		mov.L	68[r10], r7
 12982 00e5 4F 75                   		mul	r7, r5
 12983 00e7 4B 54                   		add	r5, r4
 12984 00e9 ED AB 11                		mov.L	68[r10], r11
 12985 00ec ED AD 13                		mov.L	76[r10], r13
 12986 00ef FC 1F DB                		emulu	r13, r11
 12987 00f2 EF B5                   		mov.L	r11, r5
 12988 00f4 EF C6                   		mov.L	r12, r6
 12989 00f6 4B 64                   		add	r6, r4
 12990 00f8 EF 46                   		mov.L	r4, r6
 12991 00fa E7 A5 0A                		mov.L	r5, 40[r10]
 12992 00fd E7 A6 0B                		mov.L	r6, 44[r10]
12184:../src/wolfcrypt/src/sp_int.c ****                 l += (sp_int_digit)w;
 12993                             		.loc 2 12184 22
 12994 0100 ED A5 0A                		mov.L	40[r10], r5
 12995 0103 E7 A5 15                		mov.L	r5, 84[r10]
 12996 0106 F9 A6 16 00             		mov.L	#0, 88[r10]
 12997                             		.loc 2 12184 19
 12998 010a ED A5 04                		mov.L	16[r10], r5
 12999 010d ED A6 05                		mov.L	20[r10], r6
 13000 0110 EF 67                   		mov.L	r6, r7
 13001 0112 ED A8 15                		mov.L	84[r10], r8
 13002 0115 FF 2E 85                		add	r8, r5, r14
 13003 0118 06 A1 02 A7 16          		adc 88[r10],r7
 13004 011d E7 A7 2E                		mov.L	r7, 184[r10]
 13005 0120 E7 AE 2D                		mov.L	r14, 180[r10]
 13006 0123 E5 AA 2D 04             		mov.L	180[r10], 16[r10]
 13007 0127 E5 AA 2E 05             		mov.L	184[r10], 20[r10]
12185:../src/wolfcrypt/src/sp_int.c ****                 h += (sp_int_digit)(w >> SP_WORD_SIZE);
 13008                             		.loc 2 12185 39
 13009 012b ED A5 0B                		mov.L	44[r10], r5
 13010 012e 68 05                   		shlr	#0, r5
 13011 0130 E7 A5 17                		mov.L	r5, 92[r10]
 13012 0133 F9 A6 18 00             		mov.L	#0, 96[r10]
 13013                             		.loc 2 12185 22
 13014 0137 ED A5 17                		mov.L	92[r10], r5
 13015 013a E7 A5 19                		mov.L	r5, 100[r10]
 13016 013d F9 A6 1A 00             		mov.L	#0, 104[r10]
 13017                             		.loc 2 12185 19
 13018 0141 ED A5 06                		mov.L	24[r10], r5
 13019 0144 ED A6 07                		mov.L	28[r10], r6
 13020 0147 EF 6C                   		mov.L	r6, r12
 13021 0149 ED AD 19                		mov.L	100[r10], r13
 13022 014c FF 2B D5                		add	r13, r5, r11
 13023 014f 06 A1 02 AC 1A          		adc 104[r10],r12
 13024 0154 E7 AC 30                		mov.L	r12, 192[r10]
 13025 0157 E7 AB 2F                		mov.L	r11, 188[r10]
 13026 015a E5 AA 2F 06             		mov.L	188[r10], 24[r10]
 13027 015e E5 AA 30 07             		mov.L	192[r10], 28[r10]
 13028                             	.L844:
12186:../src/wolfcrypt/src/sp_int.c ****             #ifdef SP_WORD_OVERFLOW
12187:../src/wolfcrypt/src/sp_int.c ****                 h += (sp_int_digit)(l >> SP_WORD_SIZE);
12188:../src/wolfcrypt/src/sp_int.c ****                 l &= SP_MASK;
12189:../src/wolfcrypt/src/sp_int.c ****                 o += (sp_int_digit)(h >> SP_WORD_SIZE);
12190:../src/wolfcrypt/src/sp_int.c ****                 h &= SP_MASK;
12191:../src/wolfcrypt/src/sp_int.c ****             #endif
12192:../src/wolfcrypt/src/sp_int.c ****             }
12193:../src/wolfcrypt/src/sp_int.c ****             for (++i, --j; (i < a->used) && (j >= 0); i++, j--) {
 13029                             		.loc 2 12193 18
 13030 0162 ED A5 01                		mov.L	4[r10], r5
 13031 0165 62 15                   		add	#1, r5
 13032 0167 E7 A5 01                		mov.L	r5, 4[r10]
 13033                             		.loc 2 12193 23
 13034 016a ED A5 02                		mov.L	8[r10], r5
 13035 016d 60 15                   		sub	#1, r5
 13036 016f E7 A5 02                		mov.L	r5, 8[r10]
 13037                             		.loc 2 12193 13
 13038 0172 38 24 01                		bra	.L845
 13039                             	.L847:
12194:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * a->dp[j];
 13040                             		.loc 2 12194 39 discriminator 4
 13041 0175 ED A4 0D                		mov.L	52[r10], r4
 13042 0178 ED A5 01                		mov.L	4[r10], r5
 13043 017b 62 25                   		add	#2, r5
 13044 017d FE 65 45                		mov.L	[r5,r4], r5
 13045                             		.loc 2 12194 21 discriminator 4
 13046 0180 E7 A5 1B                		mov.L	r5, 108[r10]
 13047 0183 F9 A6 1C 00             		mov.L	#0, 112[r10]
 13048                             		.loc 2 12194 50 discriminator 4
 13049 0187 ED A4 0D                		mov.L	52[r10], r4
 13050 018a ED A5 02                		mov.L	8[r10], r5
 13051 018d 62 25                   		add	#2, r5
 13052 018f FE 65 45                		mov.L	[r5,r4], r5
 13053 0192 E7 A5 1D                		mov.L	r5, 116[r10]
 13054 0195 F9 A6 1E 00             		mov.L	#0, 120[r10]
 13055                             		.loc 2 12194 19 discriminator 4
 13056 0199 ED A4 1C                		mov.L	112[r10], r4
 13057 019c ED AE 1D                		mov.L	116[r10], r14
 13058 019f 4F E4                   		mul	r14, r4
 13059 01a1 ED A5 1E                		mov.L	120[r10], r5
 13060 01a4 ED A7 1B                		mov.L	108[r10], r7
 13061 01a7 4F 75                   		mul	r7, r5
 13062 01a9 4B 54                   		add	r5, r4
 13063 01ab ED AB 1B                		mov.L	108[r10], r11
 13064 01ae ED AD 1D                		mov.L	116[r10], r13
 13065 01b1 FC 1F DB                		emulu	r13, r11
 13066 01b4 EF B5                   		mov.L	r11, r5
 13067 01b6 EF C6                   		mov.L	r12, r6
 13068 01b8 4B 64                   		add	r6, r4
 13069 01ba EF 46                   		mov.L	r4, r6
 13070 01bc E7 A5 0A                		mov.L	r5, 40[r10]
 13071 01bf E7 A6 0B                		mov.L	r6, 44[r10]
12195:../src/wolfcrypt/src/sp_int.c ****                 l += (sp_int_digit)w;
 13072                             		.loc 2 12195 22 discriminator 4
 13073 01c2 ED A5 0A                		mov.L	40[r10], r5
 13074 01c5 E7 A5 1F                		mov.L	r5, 124[r10]
 13075 01c8 F9 A6 20 00             		mov.L	#0, 128[r10]
 13076                             		.loc 2 12195 19 discriminator 4
 13077 01cc ED A5 04                		mov.L	16[r10], r5
 13078 01cf ED A6 05                		mov.L	20[r10], r6
 13079 01d2 EF 67                   		mov.L	r6, r7
 13080 01d4 ED A8 1F                		mov.L	124[r10], r8
 13081 01d7 FF 2E 85                		add	r8, r5, r14
 13082 01da 06 A1 02 A7 20          		adc 128[r10],r7
 13083 01df E7 A7 32                		mov.L	r7, 200[r10]
 13084 01e2 E7 AE 31                		mov.L	r14, 196[r10]
 13085 01e5 E5 AA 31 04             		mov.L	196[r10], 16[r10]
 13086 01e9 E5 AA 32 05             		mov.L	200[r10], 20[r10]
12196:../src/wolfcrypt/src/sp_int.c ****                 h += (sp_int_digit)(w >> SP_WORD_SIZE);
 13087                             		.loc 2 12196 39 discriminator 4
 13088 01ed ED A5 0B                		mov.L	44[r10], r5
 13089 01f0 68 05                   		shlr	#0, r5
 13090 01f2 E7 A5 21                		mov.L	r5, 132[r10]
 13091 01f5 F9 A6 22 00             		mov.L	#0, 136[r10]
 13092                             		.loc 2 12196 22 discriminator 4
 13093 01f9 ED A5 21                		mov.L	132[r10], r5
 13094 01fc E7 A5 23                		mov.L	r5, 140[r10]
 13095 01ff F9 A6 24 00             		mov.L	#0, 144[r10]
 13096                             		.loc 2 12196 19 discriminator 4
 13097 0203 ED A5 06                		mov.L	24[r10], r5
 13098 0206 ED A6 07                		mov.L	28[r10], r6
 13099 0209 EF 6C                   		mov.L	r6, r12
 13100 020b ED AD 23                		mov.L	140[r10], r13
 13101 020e FF 2B D5                		add	r13, r5, r11
 13102 0211 06 A1 02 AC 24          		adc 144[r10],r12
 13103 0216 E7 AC 34                		mov.L	r12, 208[r10]
 13104 0219 E7 AB 33                		mov.L	r11, 204[r10]
 13105 021c E5 AA 33 06             		mov.L	204[r10], 24[r10]
 13106 0220 E5 AA 34 07             		mov.L	208[r10], 28[r10]
12197:../src/wolfcrypt/src/sp_int.c ****             #ifdef SP_WORD_OVERFLOW
12198:../src/wolfcrypt/src/sp_int.c ****                 h += (sp_int_digit)(l >> SP_WORD_SIZE);
12199:../src/wolfcrypt/src/sp_int.c ****                 l &= SP_MASK;
12200:../src/wolfcrypt/src/sp_int.c ****                 o += (sp_int_digit)(h >> SP_WORD_SIZE);
12201:../src/wolfcrypt/src/sp_int.c ****                 h &= SP_MASK;
12202:../src/wolfcrypt/src/sp_int.c ****             #endif
12203:../src/wolfcrypt/src/sp_int.c ****                 l += (sp_int_digit)w;
 13107                             		.loc 2 12203 22 discriminator 4
 13108 0224 ED A5 0A                		mov.L	40[r10], r5
 13109 0227 E7 A5 25                		mov.L	r5, 148[r10]
 13110 022a F9 A6 26 00             		mov.L	#0, 152[r10]
 13111                             		.loc 2 12203 19 discriminator 4
 13112 022e ED A5 04                		mov.L	16[r10], r5
 13113 0231 ED A6 05                		mov.L	20[r10], r6
 13114 0234 EF 67                   		mov.L	r6, r7
 13115 0236 ED A8 25                		mov.L	148[r10], r8
 13116 0239 FF 2E 85                		add	r8, r5, r14
 13117 023c 06 A1 02 A7 26          		adc 152[r10],r7
 13118 0241 E7 A7 36                		mov.L	r7, 216[r10]
 13119 0244 E7 AE 35                		mov.L	r14, 212[r10]
 13120 0247 E5 AA 35 04             		mov.L	212[r10], 16[r10]
 13121 024b E5 AA 36 05             		mov.L	216[r10], 20[r10]
12204:../src/wolfcrypt/src/sp_int.c ****                 h += (sp_int_digit)(w >> SP_WORD_SIZE);
 13122                             		.loc 2 12204 39 discriminator 4
 13123 024f ED A5 0B                		mov.L	44[r10], r5
 13124 0252 68 05                   		shlr	#0, r5
 13125 0254 E7 A5 27                		mov.L	r5, 156[r10]
 13126 0257 F9 A6 28 00             		mov.L	#0, 160[r10]
 13127                             		.loc 2 12204 22 discriminator 4
 13128 025b ED A5 27                		mov.L	156[r10], r5
 13129 025e E7 A5 29                		mov.L	r5, 164[r10]
 13130 0261 F9 A6 2A 00             		mov.L	#0, 168[r10]
 13131                             		.loc 2 12204 19 discriminator 4
 13132 0265 ED A5 06                		mov.L	24[r10], r5
 13133 0268 ED A6 07                		mov.L	28[r10], r6
 13134 026b EF 6C                   		mov.L	r6, r12
 13135 026d ED AD 29                		mov.L	164[r10], r13
 13136 0270 FF 2B D5                		add	r13, r5, r11
 13137 0273 06 A1 02 AC 2A          		adc 168[r10],r12
 13138 0278 E7 AC 38                		mov.L	r12, 224[r10]
 13139 027b E7 AB 37                		mov.L	r11, 220[r10]
 13140 027e E5 AA 37 06             		mov.L	220[r10], 24[r10]
 13141 0282 E5 AA 38 07             		mov.L	224[r10], 28[r10]
12193:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * a->dp[j];
 13142                             		.loc 2 12193 56 discriminator 4
 13143 0286 ED A5 01                		mov.L	4[r10], r5
 13144 0289 62 15                   		add	#1, r5
 13145 028b E7 A5 01                		mov.L	r5, 4[r10]
12193:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * a->dp[j];
 13146                             		.loc 2 12193 61 discriminator 4
 13147 028e ED A5 02                		mov.L	8[r10], r5
 13148 0291 60 15                   		sub	#1, r5
 13149 0293 E7 A5 02                		mov.L	r5, 8[r10]
 13150                             	.L845:
12193:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * a->dp[j];
 13151                             		.loc 2 12193 34 discriminator 1
 13152 0296 ED A5 0D                		mov.L	52[r10], r5
 13153 0299 EC 54                   		mov.L	[r5], r4
12193:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * a->dp[j];
 13154                             		.loc 2 12193 13 discriminator 1
 13155 029b ED A5 01                		mov.L	4[r10], r5
 13156 029e 47 45                   		cmp	r4, r5
 13157 02a0 28 0C                   		bge	.L846
12193:../src/wolfcrypt/src/sp_int.c ****                 w = (sp_int_word)a->dp[i] * a->dp[j];
 13158                             		.loc 2 12193 42 discriminator 3
 13159 02a2 ED A5 02                		mov.L	8[r10], r5
 13160 02a5 61 05                   		cmp	#0, r5
 13161 02a7 29 05 38 CC FE          		bge	.L847
 13162                             	.L846:
12205:../src/wolfcrypt/src/sp_int.c ****             #ifdef SP_WORD_OVERFLOW
12206:../src/wolfcrypt/src/sp_int.c ****                 h += (sp_int_digit)(l >> SP_WORD_SIZE);
12207:../src/wolfcrypt/src/sp_int.c ****                 l &= SP_MASK;
12208:../src/wolfcrypt/src/sp_int.c ****                 o += (sp_int_digit)(h >> SP_WORD_SIZE);
12209:../src/wolfcrypt/src/sp_int.c ****                 h &= SP_MASK;
12210:../src/wolfcrypt/src/sp_int.c ****             #endif
12211:../src/wolfcrypt/src/sp_int.c ****             }
12212:../src/wolfcrypt/src/sp_int.c ****             t[k] = (sp_int_digit)l;
 13163                             		.loc 2 12212 14 discriminator 2
 13164 02ac ED A5 03                		mov.L	12[r10], r5
 13165 02af FD C2 54                		shll	#2, r5, r4
 13166 02b2 ED A5 09                		mov.L	36[r10], r5
 13167 02b5 4B 45                   		add	r4, r5
 13168                             		.loc 2 12212 20 discriminator 2
 13169 02b7 ED A4 04                		mov.L	16[r10], r4
 13170                             		.loc 2 12212 18 discriminator 2
 13171 02ba E3 54                   		mov.L	r4, [r5]
12213:../src/wolfcrypt/src/sp_int.c ****             l >>= SP_WORD_SIZE;
 13172                             		.loc 2 12213 15 discriminator 2
 13173 02bc ED A5 05                		mov.L	20[r10], r5
 13174 02bf 68 05                   		shlr	#0, r5
 13175 02c1 E7 A5 04                		mov.L	r5, 16[r10]
 13176 02c4 F9 A6 05 00             		mov.L	#0, 20[r10]
12214:../src/wolfcrypt/src/sp_int.c ****             l += (sp_int_digit)h;
 13177                             		.loc 2 12214 18 discriminator 2
 13178 02c8 ED A5 06                		mov.L	24[r10], r5
 13179 02cb E7 A5 2B                		mov.L	r5, 172[r10]
 13180 02ce F9 A6 2C 00             		mov.L	#0, 176[r10]
 13181                             		.loc 2 12214 15 discriminator 2
 13182 02d2 ED A5 04                		mov.L	16[r10], r5
 13183 02d5 ED A6 05                		mov.L	20[r10], r6
 13184 02d8 EF 67                   		mov.L	r6, r7
 13185 02da ED A8 2B                		mov.L	172[r10], r8
 13186 02dd FF 2E 85                		add	r8, r5, r14
 13187 02e0 06 A1 02 A7 2C          		adc 176[r10],r7
 13188 02e5 E7 A7 3A                		mov.L	r7, 232[r10]
 13189 02e8 E7 AE 39                		mov.L	r14, 228[r10]
 13190 02eb E5 AA 39 04             		mov.L	228[r10], 16[r10]
 13191 02ef E5 AA 3A 05             		mov.L	232[r10], 20[r10]
12215:../src/wolfcrypt/src/sp_int.c ****             h >>= SP_WORD_SIZE;
 13192                             		.loc 2 12215 15 discriminator 2
 13193 02f3 ED A5 07                		mov.L	28[r10], r5
 13194 02f6 68 05                   		shlr	#0, r5
 13195 02f8 E7 A5 06                		mov.L	r5, 24[r10]
 13196 02fb F9 A6 07 00             		mov.L	#0, 28[r10]
12179:../src/wolfcrypt/src/sp_int.c ****             i = k / 2;
 13197                             		.loc 2 12179 46 discriminator 2
 13198 02ff ED A5 03                		mov.L	12[r10], r5
 13199 0302 62 15                   		add	#1, r5
 13200 0304 E7 A5 03                		mov.L	r5, 12[r10]
 13201                             	.L843:
12179:../src/wolfcrypt/src/sp_int.c ****             i = k / 2;
 13202                             		.loc 2 12179 28 discriminator 1
 13203 0307 ED A5 0D                		mov.L	52[r10], r5
 13204 030a EC 55                   		mov.L	[r5], r5
12179:../src/wolfcrypt/src/sp_int.c ****             i = k / 2;
 13205                             		.loc 2 12179 35 discriminator 1
 13206 030c 60 15                   		sub	#1, r5
12179:../src/wolfcrypt/src/sp_int.c ****             i = k / 2;
 13207                             		.loc 2 12179 40 discriminator 1
 13208 030e 4B 55                   		add	r5, r5
 13209 0310 EF 54                   		mov.L	r5, r4
12179:../src/wolfcrypt/src/sp_int.c ****             i = k / 2;
 13210                             		.loc 2 12179 9 discriminator 1
 13211 0312 ED A5 03                		mov.L	12[r10], r5
 13212 0315 47 45                   		cmp	r4, r5
 13213 0317 2A 05 38 76 FD          		ble	.L848
12216:../src/wolfcrypt/src/sp_int.c ****         #ifdef SP_WORD_OVERFLOW
12217:../src/wolfcrypt/src/sp_int.c ****             h += o & SP_MASK;
12218:../src/wolfcrypt/src/sp_int.c ****             o >>= SP_WORD_SIZE;
12219:../src/wolfcrypt/src/sp_int.c ****         #endif
12220:../src/wolfcrypt/src/sp_int.c ****         }
12221:../src/wolfcrypt/src/sp_int.c ****         t[k] = (sp_int_digit)l;
 13214                             		.loc 2 12221 10
 13215 031c ED A5 03                		mov.L	12[r10], r5
 13216 031f 6C 25                   		shll	#2, r5
 13217 0321 ED A4 09                		mov.L	36[r10], r4
 13218 0324 4B 45                   		add	r4, r5
 13219                             		.loc 2 12221 16
 13220 0326 ED A4 04                		mov.L	16[r10], r4
 13221                             		.loc 2 12221 14
 13222 0329 E3 54                   		mov.L	r4, [r5]
12222:../src/wolfcrypt/src/sp_int.c ****         r->used = k + 1;
 13223                             		.loc 2 12222 21
 13224 032b ED A5 03                		mov.L	12[r10], r5
 13225 032e 71 54 01                		add	#1, r5, r4
 13226                             		.loc 2 12222 17
 13227 0331 ED A5 0E                		mov.L	56[r10], r5
 13228 0334 E3 54                   		mov.L	r4, [r5]
12223:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(r->dp, t, r->used * sizeof(sp_int_digit));
 13229                             		.loc 2 12223 9
 13230 0336 ED A5 0E                		mov.L	56[r10], r5
 13231 0339 71 54 08                		add	#8, r5, r4
 13232 033c ED A5 0E                		mov.L	56[r10], r5
 13233 033f EC 55                   		mov.L	[r5], r5
 13234 0341 6C 25                   		shll	#2, r5
 13235 0343 EF 53                   		mov.L	r5, r3
 13236 0345 ED A2 09                		mov.L	36[r10], r2
 13237 0348 EF 41                   		mov.L	r4, r1
 13238 034a 05 00 00 00             		bsr	_memcpy
 13239                             	.LBB77:
12224:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
 13240                             		.loc 2 12224 9
 13241 034e ED A5 0E                		mov.L	56[r10], r5
 13242 0351 EC 55                   		mov.L	[r5], r5
 13243 0353 60 15                   		sub	#1, r5
 13244 0355 E7 A5 08                		mov.L	r5, 32[r10]
 13245 0358 09                      		bra	.L849
 13246                             	.L851:
 13247                             		.loc 2 12224 9 is_stmt 0 discriminator 5
 13248 0359 ED A5 08                		mov.L	32[r10], r5
 13249 035c 60 15                   		sub	#1, r5
 13250 035e E7 A5 08                		mov.L	r5, 32[r10]
 13251                             	.L849:
 13252                             		.loc 2 12224 9 discriminator 1
 13253 0361 ED A5 08                		mov.L	32[r10], r5
 13254 0364 61 05                   		cmp	#0, r5
 13255 0366 29 11                   		blt	.L850
 13256                             		.loc 2 12224 9 discriminator 3
 13257 0368 ED A4 0E                		mov.L	56[r10], r4
 13258 036b ED A5 08                		mov.L	32[r10], r5
 13259 036e 62 25                   		add	#2, r5
 13260 0370 FE 65 45                		mov.L	[r5,r4], r5
 13261 0373 61 05                   		cmp	#0, r5
 13262 0375 20 E4                   		beq	.L851
 13263                             	.L850:
 13264                             		.loc 2 12224 9 discriminator 6
 13265 0377 ED A5 08                		mov.L	32[r10], r5
 13266 037a 71 54 01                		add	#1, r5, r4
 13267 037d ED A5 0E                		mov.L	56[r10], r5
 13268 0380 E3 54                   		mov.L	r4, [r5]
 13269                             	.L842:
 13270                             	.LBE77:
 13271                             	.LBE76:
12225:../src/wolfcrypt/src/sp_int.c ****     }
12226:../src/wolfcrypt/src/sp_int.c **** 
12227:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
12228:../src/wolfcrypt/src/sp_int.c ****     if (t != NULL) {
 13272                             		.loc 2 12228 8 is_stmt 1
 13273 0382 ED A5 09                		mov.L	36[r10], r5
 13274 0385 61 05                   		cmp	#0, r5
 13275 0387 20 15                   		beq	.L852
 13276                             	.LBB78:
12229:../src/wolfcrypt/src/sp_int.c ****         XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
 13277                             		.loc 2 12229 9
 13278 0389 ED A5 09                		mov.L	36[r10], r5
 13279 038c E7 A5 0C                		mov.L	r5, 48[r10]
 13280 038f ED A5 0C                		mov.L	48[r10], r5
 13281 0392 61 05                   		cmp	#0, r5
 13282 0394 10                      		beq	.L852
 13283                             		.loc 2 12229 9 is_stmt 0 discriminator 1
 13284 0395 ED A1 0C                		mov.L	48[r10], r1
 13285 0398 05 00 00 00             		bsr	_wolfSSL_Free
 13286                             	.L852:
 13287                             	.LBE78:
12230:../src/wolfcrypt/src/sp_int.c ****     }
12231:../src/wolfcrypt/src/sp_int.c **** #endif
12232:../src/wolfcrypt/src/sp_int.c ****     return err;
 13288                             		.loc 2 12232 12 is_stmt 1
 13289 039c EC A5                   		mov.L	[r10], r5
12233:../src/wolfcrypt/src/sp_int.c **** }
 13290                             		.loc 2 12233 1
 13291 039e EF 51                   		mov.L	r5, r1
 13292 03a0 3F 6D 43                		rtsd	#268, r6-r13
 13293                             	.LFE112:
 13295                             		.section	.text.sp_sqr,"ax",@progbits
 13296                             		.global	_sp_sqr
 13298                             	_sp_sqr:
 13299                             	.LFB113:
12234:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
12235:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_SP_MATH || !WOLFSSL_SP_SMALL */
12236:../src/wolfcrypt/src/sp_int.c **** 
12237:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_SMALL
12238:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_HAVE_SP_ECC) && defined(HAVE_ECC)
12239:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 64
12240:../src/wolfcrypt/src/sp_int.c **** #ifndef SQR_MUL_ASM
12241:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
12242:../src/wolfcrypt/src/sp_int.c ****  *
12243:../src/wolfcrypt/src/sp_int.c ****  * Long-hand implementation.
12244:../src/wolfcrypt/src/sp_int.c ****  *
12245:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
12246:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
12247:../src/wolfcrypt/src/sp_int.c ****  *
12248:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
12249:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
12250:../src/wolfcrypt/src/sp_int.c ****  */
12251:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr_4(sp_int* a, sp_int* r)
12252:../src/wolfcrypt/src/sp_int.c **** {
12253:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
12254:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
12255:../src/wolfcrypt/src/sp_int.c ****     sp_int_word* w = NULL;
12256:../src/wolfcrypt/src/sp_int.c **** #else
12257:../src/wolfcrypt/src/sp_int.c ****     sp_int_word w[10];
12258:../src/wolfcrypt/src/sp_int.c **** #endif
12259:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit* da = a->dp;
12260:../src/wolfcrypt/src/sp_int.c **** 
12261:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
12262:../src/wolfcrypt/src/sp_int.c ****     w = (sp_int_word*)XMALLOC(sizeof(sp_int_word) * 10, NULL,
12263:../src/wolfcrypt/src/sp_int.c ****         DYNAMIC_TYPE_BIGINT);
12264:../src/wolfcrypt/src/sp_int.c ****     if (w == NULL) {
12265:../src/wolfcrypt/src/sp_int.c ****         err = MP_MEM;
12266:../src/wolfcrypt/src/sp_int.c ****     }
12267:../src/wolfcrypt/src/sp_int.c **** #endif
12268:../src/wolfcrypt/src/sp_int.c **** 
12269:../src/wolfcrypt/src/sp_int.c **** 
12270:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
12271:../src/wolfcrypt/src/sp_int.c ****         w[0] = (sp_int_word)da[0] * da[0];
12272:../src/wolfcrypt/src/sp_int.c ****         w[1] = (sp_int_word)da[0] * da[1];
12273:../src/wolfcrypt/src/sp_int.c ****         w[2] = (sp_int_word)da[0] * da[2];
12274:../src/wolfcrypt/src/sp_int.c ****         w[3] = (sp_int_word)da[1] * da[1];
12275:../src/wolfcrypt/src/sp_int.c ****         w[4] = (sp_int_word)da[0] * da[3];
12276:../src/wolfcrypt/src/sp_int.c ****         w[5] = (sp_int_word)da[1] * da[2];
12277:../src/wolfcrypt/src/sp_int.c ****         w[6] = (sp_int_word)da[1] * da[3];
12278:../src/wolfcrypt/src/sp_int.c ****         w[7] = (sp_int_word)da[2] * da[2];
12279:../src/wolfcrypt/src/sp_int.c ****         w[8] = (sp_int_word)da[2] * da[3];
12280:../src/wolfcrypt/src/sp_int.c ****         w[9] = (sp_int_word)da[3] * da[3];
12281:../src/wolfcrypt/src/sp_int.c **** 
12282:../src/wolfcrypt/src/sp_int.c ****         r->dp[0] = w[0];
12283:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
12284:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[1];
12285:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[1];
12286:../src/wolfcrypt/src/sp_int.c ****         r->dp[1] = w[0];
12287:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
12288:../src/wolfcrypt/src/sp_int.c ****         w[1] >>= SP_WORD_SIZE;
12289:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[1];
12290:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[1];
12291:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[2];
12292:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[2];
12293:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[3];
12294:../src/wolfcrypt/src/sp_int.c ****         r->dp[2] = w[0];
12295:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
12296:../src/wolfcrypt/src/sp_int.c ****         w[2] >>= SP_WORD_SIZE;
12297:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[2];
12298:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[2];
12299:../src/wolfcrypt/src/sp_int.c ****         w[3] >>= SP_WORD_SIZE;
12300:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[3];
12301:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[4];
12302:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[4];
12303:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[5];
12304:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[5];
12305:../src/wolfcrypt/src/sp_int.c ****         r->dp[3] = w[0];
12306:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
12307:../src/wolfcrypt/src/sp_int.c ****         w[4] >>= SP_WORD_SIZE;
12308:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[4];
12309:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[4];
12310:../src/wolfcrypt/src/sp_int.c ****         w[5] >>= SP_WORD_SIZE;
12311:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[5];
12312:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[5];
12313:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[6];
12314:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[6];
12315:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[7];
12316:../src/wolfcrypt/src/sp_int.c ****         r->dp[4] = w[0];
12317:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
12318:../src/wolfcrypt/src/sp_int.c ****         w[6] >>= SP_WORD_SIZE;
12319:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[6];
12320:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[6];
12321:../src/wolfcrypt/src/sp_int.c ****         w[7] >>= SP_WORD_SIZE;
12322:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[7];
12323:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[8];
12324:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[8];
12325:../src/wolfcrypt/src/sp_int.c ****         r->dp[5] = w[0];
12326:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
12327:../src/wolfcrypt/src/sp_int.c ****         w[8] >>= SP_WORD_SIZE;
12328:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[8];
12329:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[8];
12330:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[9];
12331:../src/wolfcrypt/src/sp_int.c ****         r->dp[6] = w[0];
12332:../src/wolfcrypt/src/sp_int.c ****         w[0] >>= SP_WORD_SIZE;
12333:../src/wolfcrypt/src/sp_int.c ****         w[9] >>= SP_WORD_SIZE;
12334:../src/wolfcrypt/src/sp_int.c ****         w[0] += (sp_int_digit)w[9];
12335:../src/wolfcrypt/src/sp_int.c ****         r->dp[7] = w[0];
12336:../src/wolfcrypt/src/sp_int.c **** 
12337:../src/wolfcrypt/src/sp_int.c ****         r->used = 8;
12338:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
12339:../src/wolfcrypt/src/sp_int.c ****     }
12340:../src/wolfcrypt/src/sp_int.c **** 
12341:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
12342:../src/wolfcrypt/src/sp_int.c ****     if (w != NULL) {
12343:../src/wolfcrypt/src/sp_int.c ****         XFREE(w, NULL, DYNAMIC_TYPE_BIGINT);
12344:../src/wolfcrypt/src/sp_int.c ****     }
12345:../src/wolfcrypt/src/sp_int.c **** #endif
12346:../src/wolfcrypt/src/sp_int.c ****     return err;
12347:../src/wolfcrypt/src/sp_int.c **** }
12348:../src/wolfcrypt/src/sp_int.c **** #else /* SQR_MUL_ASM */
12349:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
12350:../src/wolfcrypt/src/sp_int.c ****  *
12351:../src/wolfcrypt/src/sp_int.c ****  * Comba implementation.
12352:../src/wolfcrypt/src/sp_int.c ****  *
12353:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
12354:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
12355:../src/wolfcrypt/src/sp_int.c ****  *
12356:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
12357:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
12358:../src/wolfcrypt/src/sp_int.c ****  */
12359:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr_4(sp_int* a, sp_int* r)
12360:../src/wolfcrypt/src/sp_int.c **** {
12361:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
12362:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
12363:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o = 0;
12364:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[4];
12365:../src/wolfcrypt/src/sp_int.c **** 
12366:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR(h, l, a->dp[0]);
12367:../src/wolfcrypt/src/sp_int.c ****     t[0] = h;
12368:../src/wolfcrypt/src/sp_int.c ****     h = 0;
12369:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2_NO(l, h, o, a->dp[0], a->dp[1]);
12370:../src/wolfcrypt/src/sp_int.c ****     t[1] = l;
12371:../src/wolfcrypt/src/sp_int.c ****     l = h;
12372:../src/wolfcrypt/src/sp_int.c ****     h = o;
12373:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12374:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2_NO(l, h, o, a->dp[0], a->dp[2]);
12375:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[1]);
12376:../src/wolfcrypt/src/sp_int.c ****     t[2] = l;
12377:../src/wolfcrypt/src/sp_int.c ****     l = h;
12378:../src/wolfcrypt/src/sp_int.c ****     h = o;
12379:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12380:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[0], a->dp[3]);
12381:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[2]);
12382:../src/wolfcrypt/src/sp_int.c ****     t[3] = l;
12383:../src/wolfcrypt/src/sp_int.c ****     l = h;
12384:../src/wolfcrypt/src/sp_int.c ****     h = o;
12385:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12386:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[3]);
12387:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[2]);
12388:../src/wolfcrypt/src/sp_int.c ****     r->dp[4] = l;
12389:../src/wolfcrypt/src/sp_int.c ****     l = h;
12390:../src/wolfcrypt/src/sp_int.c ****     h = o;
12391:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12392:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[2], a->dp[3]);
12393:../src/wolfcrypt/src/sp_int.c ****     r->dp[5] = l;
12394:../src/wolfcrypt/src/sp_int.c ****     l = h;
12395:../src/wolfcrypt/src/sp_int.c ****     h = o;
12396:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD_NO(l, h, a->dp[3]);
12397:../src/wolfcrypt/src/sp_int.c ****     r->dp[6] = l;
12398:../src/wolfcrypt/src/sp_int.c ****     r->dp[7] = h;
12399:../src/wolfcrypt/src/sp_int.c ****     XMEMCPY(r->dp, t, 4 * sizeof(sp_int_digit));
12400:../src/wolfcrypt/src/sp_int.c ****     r->used = 8;
12401:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(r);
12402:../src/wolfcrypt/src/sp_int.c **** 
12403:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
12404:../src/wolfcrypt/src/sp_int.c **** }
12405:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
12406:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 64 */
12407:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 64
12408:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
12409:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
12410:../src/wolfcrypt/src/sp_int.c ****  *
12411:../src/wolfcrypt/src/sp_int.c ****  * Comba implementation.
12412:../src/wolfcrypt/src/sp_int.c ****  *
12413:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
12414:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
12415:../src/wolfcrypt/src/sp_int.c ****  *
12416:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
12417:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
12418:../src/wolfcrypt/src/sp_int.c ****  */
12419:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr_6(sp_int* a, sp_int* r)
12420:../src/wolfcrypt/src/sp_int.c **** {
12421:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
12422:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
12423:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o = 0;
12424:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tl = 0;
12425:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit th = 0;
12426:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit to;
12427:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[6];
12428:../src/wolfcrypt/src/sp_int.c **** 
12429:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_ARM_THUMB) && SP_WORD_SIZE == 32
12430:../src/wolfcrypt/src/sp_int.c ****     to = 0;
12431:../src/wolfcrypt/src/sp_int.c **** #endif
12432:../src/wolfcrypt/src/sp_int.c **** 
12433:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR(h, l, a->dp[0]);
12434:../src/wolfcrypt/src/sp_int.c ****     t[0] = h;
12435:../src/wolfcrypt/src/sp_int.c ****     h = 0;
12436:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2_NO(l, h, o, a->dp[0], a->dp[1]);
12437:../src/wolfcrypt/src/sp_int.c ****     t[1] = l;
12438:../src/wolfcrypt/src/sp_int.c ****     l = h;
12439:../src/wolfcrypt/src/sp_int.c ****     h = o;
12440:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12441:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2_NO(l, h, o, a->dp[0], a->dp[2]);
12442:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[1]);
12443:../src/wolfcrypt/src/sp_int.c ****     t[2] = l;
12444:../src/wolfcrypt/src/sp_int.c ****     l = h;
12445:../src/wolfcrypt/src/sp_int.c ****     h = o;
12446:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12447:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[0], a->dp[3]);
12448:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[2]);
12449:../src/wolfcrypt/src/sp_int.c ****     t[3] = l;
12450:../src/wolfcrypt/src/sp_int.c ****     l = h;
12451:../src/wolfcrypt/src/sp_int.c ****     h = o;
12452:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12453:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[0], a->dp[4]);
12454:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[3]);
12455:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[2]);
12456:../src/wolfcrypt/src/sp_int.c ****     t[4] = l;
12457:../src/wolfcrypt/src/sp_int.c ****     l = h;
12458:../src/wolfcrypt/src/sp_int.c ****     h = o;
12459:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12460:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[5]);
12461:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[4]);
12462:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[3]);
12463:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12464:../src/wolfcrypt/src/sp_int.c ****     t[5] = l;
12465:../src/wolfcrypt/src/sp_int.c ****     l = h;
12466:../src/wolfcrypt/src/sp_int.c ****     h = o;
12467:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12468:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[5]);
12469:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[2], a->dp[4]);
12470:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[3]);
12471:../src/wolfcrypt/src/sp_int.c ****     r->dp[6] = l;
12472:../src/wolfcrypt/src/sp_int.c ****     l = h;
12473:../src/wolfcrypt/src/sp_int.c ****     h = o;
12474:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12475:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[2], a->dp[5]);
12476:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[3], a->dp[4]);
12477:../src/wolfcrypt/src/sp_int.c ****     r->dp[7] = l;
12478:../src/wolfcrypt/src/sp_int.c ****     l = h;
12479:../src/wolfcrypt/src/sp_int.c ****     h = o;
12480:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12481:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[3], a->dp[5]);
12482:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[4]);
12483:../src/wolfcrypt/src/sp_int.c ****     r->dp[8] = l;
12484:../src/wolfcrypt/src/sp_int.c ****     l = h;
12485:../src/wolfcrypt/src/sp_int.c ****     h = o;
12486:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12487:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[4], a->dp[5]);
12488:../src/wolfcrypt/src/sp_int.c ****     r->dp[9] = l;
12489:../src/wolfcrypt/src/sp_int.c ****     l = h;
12490:../src/wolfcrypt/src/sp_int.c ****     h = o;
12491:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD_NO(l, h, a->dp[5]);
12492:../src/wolfcrypt/src/sp_int.c ****     r->dp[10] = l;
12493:../src/wolfcrypt/src/sp_int.c ****     r->dp[11] = h;
12494:../src/wolfcrypt/src/sp_int.c ****     XMEMCPY(r->dp, t, 6 * sizeof(sp_int_digit));
12495:../src/wolfcrypt/src/sp_int.c ****     r->used = 12;
12496:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(r);
12497:../src/wolfcrypt/src/sp_int.c **** 
12498:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
12499:../src/wolfcrypt/src/sp_int.c **** }
12500:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
12501:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 64 */
12502:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 32
12503:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
12504:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
12505:../src/wolfcrypt/src/sp_int.c ****  *
12506:../src/wolfcrypt/src/sp_int.c ****  * Comba implementation.
12507:../src/wolfcrypt/src/sp_int.c ****  *
12508:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
12509:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
12510:../src/wolfcrypt/src/sp_int.c ****  *
12511:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
12512:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
12513:../src/wolfcrypt/src/sp_int.c ****  */
12514:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr_8(sp_int* a, sp_int* r)
12515:../src/wolfcrypt/src/sp_int.c **** {
12516:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
12517:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
12518:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o = 0;
12519:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tl = 0;
12520:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit th = 0;
12521:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit to;
12522:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[8];
12523:../src/wolfcrypt/src/sp_int.c **** 
12524:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_ARM_THUMB) && SP_WORD_SIZE == 32
12525:../src/wolfcrypt/src/sp_int.c ****     to = 0;
12526:../src/wolfcrypt/src/sp_int.c **** #endif
12527:../src/wolfcrypt/src/sp_int.c **** 
12528:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR(h, l, a->dp[0]);
12529:../src/wolfcrypt/src/sp_int.c ****     t[0] = h;
12530:../src/wolfcrypt/src/sp_int.c ****     h = 0;
12531:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2_NO(l, h, o, a->dp[0], a->dp[1]);
12532:../src/wolfcrypt/src/sp_int.c ****     t[1] = l;
12533:../src/wolfcrypt/src/sp_int.c ****     l = h;
12534:../src/wolfcrypt/src/sp_int.c ****     h = o;
12535:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12536:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2_NO(l, h, o, a->dp[0], a->dp[2]);
12537:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[1]);
12538:../src/wolfcrypt/src/sp_int.c ****     t[2] = l;
12539:../src/wolfcrypt/src/sp_int.c ****     l = h;
12540:../src/wolfcrypt/src/sp_int.c ****     h = o;
12541:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12542:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[0], a->dp[3]);
12543:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[2]);
12544:../src/wolfcrypt/src/sp_int.c ****     t[3] = l;
12545:../src/wolfcrypt/src/sp_int.c ****     l = h;
12546:../src/wolfcrypt/src/sp_int.c ****     h = o;
12547:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12548:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[0], a->dp[4]);
12549:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[3]);
12550:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[2]);
12551:../src/wolfcrypt/src/sp_int.c ****     t[4] = l;
12552:../src/wolfcrypt/src/sp_int.c ****     l = h;
12553:../src/wolfcrypt/src/sp_int.c ****     h = o;
12554:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12555:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[5]);
12556:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[4]);
12557:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[3]);
12558:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12559:../src/wolfcrypt/src/sp_int.c ****     t[5] = l;
12560:../src/wolfcrypt/src/sp_int.c ****     l = h;
12561:../src/wolfcrypt/src/sp_int.c ****     h = o;
12562:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12563:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[6]);
12564:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[5]);
12565:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[4]);
12566:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[3]);
12567:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12568:../src/wolfcrypt/src/sp_int.c ****     t[6] = l;
12569:../src/wolfcrypt/src/sp_int.c ****     l = h;
12570:../src/wolfcrypt/src/sp_int.c ****     h = o;
12571:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12572:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[7]);
12573:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[6]);
12574:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[5]);
12575:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[4]);
12576:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12577:../src/wolfcrypt/src/sp_int.c ****     t[7] = l;
12578:../src/wolfcrypt/src/sp_int.c ****     l = h;
12579:../src/wolfcrypt/src/sp_int.c ****     h = o;
12580:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12581:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[1], a->dp[7]);
12582:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[6]);
12583:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[5]);
12584:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[4]);
12585:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12586:../src/wolfcrypt/src/sp_int.c ****     r->dp[8] = l;
12587:../src/wolfcrypt/src/sp_int.c ****     l = h;
12588:../src/wolfcrypt/src/sp_int.c ****     h = o;
12589:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12590:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[2], a->dp[7]);
12591:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[6]);
12592:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[5]);
12593:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12594:../src/wolfcrypt/src/sp_int.c ****     r->dp[9] = l;
12595:../src/wolfcrypt/src/sp_int.c ****     l = h;
12596:../src/wolfcrypt/src/sp_int.c ****     h = o;
12597:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12598:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[3], a->dp[7]);
12599:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[4], a->dp[6]);
12600:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[5]);
12601:../src/wolfcrypt/src/sp_int.c ****     r->dp[10] = l;
12602:../src/wolfcrypt/src/sp_int.c ****     l = h;
12603:../src/wolfcrypt/src/sp_int.c ****     h = o;
12604:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12605:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[4], a->dp[7]);
12606:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[5], a->dp[6]);
12607:../src/wolfcrypt/src/sp_int.c ****     r->dp[11] = l;
12608:../src/wolfcrypt/src/sp_int.c ****     l = h;
12609:../src/wolfcrypt/src/sp_int.c ****     h = o;
12610:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12611:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[5], a->dp[7]);
12612:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[6]);
12613:../src/wolfcrypt/src/sp_int.c ****     r->dp[12] = l;
12614:../src/wolfcrypt/src/sp_int.c ****     l = h;
12615:../src/wolfcrypt/src/sp_int.c ****     h = o;
12616:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12617:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[6], a->dp[7]);
12618:../src/wolfcrypt/src/sp_int.c ****     r->dp[13] = l;
12619:../src/wolfcrypt/src/sp_int.c ****     l = h;
12620:../src/wolfcrypt/src/sp_int.c ****     h = o;
12621:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD_NO(l, h, a->dp[7]);
12622:../src/wolfcrypt/src/sp_int.c ****     r->dp[14] = l;
12623:../src/wolfcrypt/src/sp_int.c ****     r->dp[15] = h;
12624:../src/wolfcrypt/src/sp_int.c ****     XMEMCPY(r->dp, t, 8 * sizeof(sp_int_digit));
12625:../src/wolfcrypt/src/sp_int.c ****     r->used = 16;
12626:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(r);
12627:../src/wolfcrypt/src/sp_int.c **** 
12628:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
12629:../src/wolfcrypt/src/sp_int.c **** }
12630:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
12631:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 32 */
12632:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 32
12633:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
12634:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
12635:../src/wolfcrypt/src/sp_int.c ****  *
12636:../src/wolfcrypt/src/sp_int.c ****  * Comba implementation.
12637:../src/wolfcrypt/src/sp_int.c ****  *
12638:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
12639:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
12640:../src/wolfcrypt/src/sp_int.c ****  *
12641:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
12642:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
12643:../src/wolfcrypt/src/sp_int.c ****  */
12644:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr_12(sp_int* a, sp_int* r)
12645:../src/wolfcrypt/src/sp_int.c **** {
12646:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
12647:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
12648:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o = 0;
12649:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tl = 0;
12650:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit th = 0;
12651:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit to;
12652:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[12];
12653:../src/wolfcrypt/src/sp_int.c **** 
12654:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_ARM_THUMB) && SP_WORD_SIZE == 32
12655:../src/wolfcrypt/src/sp_int.c ****     to = 0;
12656:../src/wolfcrypt/src/sp_int.c **** #endif
12657:../src/wolfcrypt/src/sp_int.c **** 
12658:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR(h, l, a->dp[0]);
12659:../src/wolfcrypt/src/sp_int.c ****     t[0] = h;
12660:../src/wolfcrypt/src/sp_int.c ****     h = 0;
12661:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2_NO(l, h, o, a->dp[0], a->dp[1]);
12662:../src/wolfcrypt/src/sp_int.c ****     t[1] = l;
12663:../src/wolfcrypt/src/sp_int.c ****     l = h;
12664:../src/wolfcrypt/src/sp_int.c ****     h = o;
12665:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12666:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2_NO(l, h, o, a->dp[0], a->dp[2]);
12667:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[1]);
12668:../src/wolfcrypt/src/sp_int.c ****     t[2] = l;
12669:../src/wolfcrypt/src/sp_int.c ****     l = h;
12670:../src/wolfcrypt/src/sp_int.c ****     h = o;
12671:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12672:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[0], a->dp[3]);
12673:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[2]);
12674:../src/wolfcrypt/src/sp_int.c ****     t[3] = l;
12675:../src/wolfcrypt/src/sp_int.c ****     l = h;
12676:../src/wolfcrypt/src/sp_int.c ****     h = o;
12677:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12678:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[0], a->dp[4]);
12679:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[3]);
12680:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[2]);
12681:../src/wolfcrypt/src/sp_int.c ****     t[4] = l;
12682:../src/wolfcrypt/src/sp_int.c ****     l = h;
12683:../src/wolfcrypt/src/sp_int.c ****     h = o;
12684:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12685:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[5]);
12686:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[4]);
12687:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[3]);
12688:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12689:../src/wolfcrypt/src/sp_int.c ****     t[5] = l;
12690:../src/wolfcrypt/src/sp_int.c ****     l = h;
12691:../src/wolfcrypt/src/sp_int.c ****     h = o;
12692:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12693:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[6]);
12694:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[5]);
12695:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[4]);
12696:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[3]);
12697:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12698:../src/wolfcrypt/src/sp_int.c ****     t[6] = l;
12699:../src/wolfcrypt/src/sp_int.c ****     l = h;
12700:../src/wolfcrypt/src/sp_int.c ****     h = o;
12701:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12702:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[7]);
12703:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[6]);
12704:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[5]);
12705:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[4]);
12706:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12707:../src/wolfcrypt/src/sp_int.c ****     t[7] = l;
12708:../src/wolfcrypt/src/sp_int.c ****     l = h;
12709:../src/wolfcrypt/src/sp_int.c ****     h = o;
12710:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12711:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[8]);
12712:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[7]);
12713:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[6]);
12714:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[5]);
12715:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[4]);
12716:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12717:../src/wolfcrypt/src/sp_int.c ****     t[8] = l;
12718:../src/wolfcrypt/src/sp_int.c ****     l = h;
12719:../src/wolfcrypt/src/sp_int.c ****     h = o;
12720:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12721:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[9]);
12722:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[8]);
12723:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[7]);
12724:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[6]);
12725:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[5]);
12726:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12727:../src/wolfcrypt/src/sp_int.c ****     t[9] = l;
12728:../src/wolfcrypt/src/sp_int.c ****     l = h;
12729:../src/wolfcrypt/src/sp_int.c ****     h = o;
12730:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12731:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[10]);
12732:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[9]);
12733:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[8]);
12734:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[7]);
12735:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[6]);
12736:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[5]);
12737:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12738:../src/wolfcrypt/src/sp_int.c ****     t[10] = l;
12739:../src/wolfcrypt/src/sp_int.c ****     l = h;
12740:../src/wolfcrypt/src/sp_int.c ****     h = o;
12741:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12742:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[11]);
12743:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[10]);
12744:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[9]);
12745:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[8]);
12746:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[7]);
12747:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[6]);
12748:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12749:../src/wolfcrypt/src/sp_int.c ****     t[11] = l;
12750:../src/wolfcrypt/src/sp_int.c ****     l = h;
12751:../src/wolfcrypt/src/sp_int.c ****     h = o;
12752:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12753:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[1], a->dp[11]);
12754:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[10]);
12755:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[9]);
12756:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[8]);
12757:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[7]);
12758:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[6]);
12759:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12760:../src/wolfcrypt/src/sp_int.c ****     r->dp[12] = l;
12761:../src/wolfcrypt/src/sp_int.c ****     l = h;
12762:../src/wolfcrypt/src/sp_int.c ****     h = o;
12763:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12764:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[2], a->dp[11]);
12765:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[10]);
12766:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[9]);
12767:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[8]);
12768:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[7]);
12769:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12770:../src/wolfcrypt/src/sp_int.c ****     r->dp[13] = l;
12771:../src/wolfcrypt/src/sp_int.c ****     l = h;
12772:../src/wolfcrypt/src/sp_int.c ****     h = o;
12773:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12774:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[3], a->dp[11]);
12775:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[10]);
12776:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[9]);
12777:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[8]);
12778:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[7]);
12779:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12780:../src/wolfcrypt/src/sp_int.c ****     r->dp[14] = l;
12781:../src/wolfcrypt/src/sp_int.c ****     l = h;
12782:../src/wolfcrypt/src/sp_int.c ****     h = o;
12783:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12784:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[4], a->dp[11]);
12785:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[10]);
12786:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[9]);
12787:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[8]);
12788:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12789:../src/wolfcrypt/src/sp_int.c ****     r->dp[15] = l;
12790:../src/wolfcrypt/src/sp_int.c ****     l = h;
12791:../src/wolfcrypt/src/sp_int.c ****     h = o;
12792:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12793:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[5], a->dp[11]);
12794:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[10]);
12795:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[9]);
12796:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[8]);
12797:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12798:../src/wolfcrypt/src/sp_int.c ****     r->dp[16] = l;
12799:../src/wolfcrypt/src/sp_int.c ****     l = h;
12800:../src/wolfcrypt/src/sp_int.c ****     h = o;
12801:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12802:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_SET(tl, th, to, a->dp[6], a->dp[11]);
12803:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[10]);
12804:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[9]);
12805:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12806:../src/wolfcrypt/src/sp_int.c ****     r->dp[17] = l;
12807:../src/wolfcrypt/src/sp_int.c ****     l = h;
12808:../src/wolfcrypt/src/sp_int.c ****     h = o;
12809:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12810:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[7], a->dp[11]);
12811:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[8], a->dp[10]);
12812:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[9]);
12813:../src/wolfcrypt/src/sp_int.c ****     r->dp[18] = l;
12814:../src/wolfcrypt/src/sp_int.c ****     l = h;
12815:../src/wolfcrypt/src/sp_int.c ****     h = o;
12816:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12817:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[8], a->dp[11]);
12818:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[9], a->dp[10]);
12819:../src/wolfcrypt/src/sp_int.c ****     r->dp[19] = l;
12820:../src/wolfcrypt/src/sp_int.c ****     l = h;
12821:../src/wolfcrypt/src/sp_int.c ****     h = o;
12822:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12823:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[9], a->dp[11]);
12824:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD(l, h, o, a->dp[10]);
12825:../src/wolfcrypt/src/sp_int.c ****     r->dp[20] = l;
12826:../src/wolfcrypt/src/sp_int.c ****     l = h;
12827:../src/wolfcrypt/src/sp_int.c ****     h = o;
12828:../src/wolfcrypt/src/sp_int.c ****     o = 0;
12829:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_MUL_ADD2(l, h, o, a->dp[10], a->dp[11]);
12830:../src/wolfcrypt/src/sp_int.c ****     r->dp[21] = l;
12831:../src/wolfcrypt/src/sp_int.c ****     l = h;
12832:../src/wolfcrypt/src/sp_int.c ****     h = o;
12833:../src/wolfcrypt/src/sp_int.c ****     SP_ASM_SQR_ADD_NO(l, h, a->dp[11]);
12834:../src/wolfcrypt/src/sp_int.c ****     r->dp[22] = l;
12835:../src/wolfcrypt/src/sp_int.c ****     r->dp[23] = h;
12836:../src/wolfcrypt/src/sp_int.c ****     XMEMCPY(r->dp, t, 12 * sizeof(sp_int_digit));
12837:../src/wolfcrypt/src/sp_int.c ****     r->used = 24;
12838:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(r);
12839:../src/wolfcrypt/src/sp_int.c **** 
12840:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
12841:../src/wolfcrypt/src/sp_int.c **** }
12842:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
12843:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 32 */
12844:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_HAVE_SP_ECC && HAVE_ECC */
12845:../src/wolfcrypt/src/sp_int.c **** 
12846:../src/wolfcrypt/src/sp_int.c **** #if defined(SQR_MUL_ASM) && defined(WOLFSSL_SP_INT_LARGE_COMBA)
12847:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 32
12848:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
12849:../src/wolfcrypt/src/sp_int.c ****  *
12850:../src/wolfcrypt/src/sp_int.c ****  * Comba implementation.
12851:../src/wolfcrypt/src/sp_int.c ****  *
12852:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
12853:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
12854:../src/wolfcrypt/src/sp_int.c ****  *
12855:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
12856:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
12857:../src/wolfcrypt/src/sp_int.c ****  */
12858:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr_16(sp_int* a, sp_int* r)
12859:../src/wolfcrypt/src/sp_int.c **** {
12860:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
12861:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
12862:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
12863:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o = 0;
12864:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tl = 0;
12865:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit th = 0;
12866:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit to;
12867:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
12868:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit* t = NULL;
12869:../src/wolfcrypt/src/sp_int.c **** #else
12870:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[16];
12871:../src/wolfcrypt/src/sp_int.c **** #endif
12872:../src/wolfcrypt/src/sp_int.c **** 
12873:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_ARM_THUMB) && SP_WORD_SIZE == 32
12874:../src/wolfcrypt/src/sp_int.c ****     to = 0;
12875:../src/wolfcrypt/src/sp_int.c **** #endif
12876:../src/wolfcrypt/src/sp_int.c **** 
12877:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
12878:../src/wolfcrypt/src/sp_int.c ****      t = (sp_int_digit*)XMALLOC(sizeof(sp_int_digit) * 16, NULL,
12879:../src/wolfcrypt/src/sp_int.c ****          DYNAMIC_TYPE_BIGINT);
12880:../src/wolfcrypt/src/sp_int.c ****      if (t == NULL) {
12881:../src/wolfcrypt/src/sp_int.c ****          err = MP_MEM;
12882:../src/wolfcrypt/src/sp_int.c ****      }
12883:../src/wolfcrypt/src/sp_int.c **** #endif
12884:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
12885:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR(h, l, a->dp[0]);
12886:../src/wolfcrypt/src/sp_int.c ****         t[0] = h;
12887:../src/wolfcrypt/src/sp_int.c ****         h = 0;
12888:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2_NO(l, h, o, a->dp[0], a->dp[1]);
12889:../src/wolfcrypt/src/sp_int.c ****         t[1] = l;
12890:../src/wolfcrypt/src/sp_int.c ****         l = h;
12891:../src/wolfcrypt/src/sp_int.c ****         h = o;
12892:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12893:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2_NO(l, h, o, a->dp[0], a->dp[2]);
12894:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[1]);
12895:../src/wolfcrypt/src/sp_int.c ****         t[2] = l;
12896:../src/wolfcrypt/src/sp_int.c ****         l = h;
12897:../src/wolfcrypt/src/sp_int.c ****         h = o;
12898:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12899:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[0], a->dp[3]);
12900:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[2]);
12901:../src/wolfcrypt/src/sp_int.c ****         t[3] = l;
12902:../src/wolfcrypt/src/sp_int.c ****         l = h;
12903:../src/wolfcrypt/src/sp_int.c ****         h = o;
12904:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12905:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[0], a->dp[4]);
12906:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[3]);
12907:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[2]);
12908:../src/wolfcrypt/src/sp_int.c ****         t[4] = l;
12909:../src/wolfcrypt/src/sp_int.c ****         l = h;
12910:../src/wolfcrypt/src/sp_int.c ****         h = o;
12911:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12912:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[5]);
12913:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[4]);
12914:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[3]);
12915:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12916:../src/wolfcrypt/src/sp_int.c ****         t[5] = l;
12917:../src/wolfcrypt/src/sp_int.c ****         l = h;
12918:../src/wolfcrypt/src/sp_int.c ****         h = o;
12919:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12920:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[6]);
12921:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[5]);
12922:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[4]);
12923:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[3]);
12924:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12925:../src/wolfcrypt/src/sp_int.c ****         t[6] = l;
12926:../src/wolfcrypt/src/sp_int.c ****         l = h;
12927:../src/wolfcrypt/src/sp_int.c ****         h = o;
12928:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12929:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[7]);
12930:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[6]);
12931:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[5]);
12932:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[4]);
12933:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12934:../src/wolfcrypt/src/sp_int.c ****         t[7] = l;
12935:../src/wolfcrypt/src/sp_int.c ****         l = h;
12936:../src/wolfcrypt/src/sp_int.c ****         h = o;
12937:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12938:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[8]);
12939:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[7]);
12940:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[6]);
12941:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[5]);
12942:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[4]);
12943:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12944:../src/wolfcrypt/src/sp_int.c ****         t[8] = l;
12945:../src/wolfcrypt/src/sp_int.c ****         l = h;
12946:../src/wolfcrypt/src/sp_int.c ****         h = o;
12947:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12948:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[9]);
12949:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[8]);
12950:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[7]);
12951:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[6]);
12952:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[5]);
12953:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12954:../src/wolfcrypt/src/sp_int.c ****         t[9] = l;
12955:../src/wolfcrypt/src/sp_int.c ****         l = h;
12956:../src/wolfcrypt/src/sp_int.c ****         h = o;
12957:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12958:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[10]);
12959:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[9]);
12960:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[8]);
12961:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[7]);
12962:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[6]);
12963:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[5]);
12964:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12965:../src/wolfcrypt/src/sp_int.c ****         t[10] = l;
12966:../src/wolfcrypt/src/sp_int.c ****         l = h;
12967:../src/wolfcrypt/src/sp_int.c ****         h = o;
12968:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12969:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[11]);
12970:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[10]);
12971:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[9]);
12972:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[8]);
12973:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[7]);
12974:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[6]);
12975:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12976:../src/wolfcrypt/src/sp_int.c ****         t[11] = l;
12977:../src/wolfcrypt/src/sp_int.c ****         l = h;
12978:../src/wolfcrypt/src/sp_int.c ****         h = o;
12979:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12980:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[12]);
12981:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[11]);
12982:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[10]);
12983:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[9]);
12984:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[8]);
12985:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[7]);
12986:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[6]);
12987:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
12988:../src/wolfcrypt/src/sp_int.c ****         t[12] = l;
12989:../src/wolfcrypt/src/sp_int.c ****         l = h;
12990:../src/wolfcrypt/src/sp_int.c ****         h = o;
12991:../src/wolfcrypt/src/sp_int.c ****         o = 0;
12992:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[13]);
12993:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[12]);
12994:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[11]);
12995:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[10]);
12996:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[9]);
12997:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[8]);
12998:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[7]);
12999:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13000:../src/wolfcrypt/src/sp_int.c ****         t[13] = l;
13001:../src/wolfcrypt/src/sp_int.c ****         l = h;
13002:../src/wolfcrypt/src/sp_int.c ****         h = o;
13003:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13004:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[14]);
13005:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[13]);
13006:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[12]);
13007:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[11]);
13008:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[10]);
13009:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[9]);
13010:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[8]);
13011:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[7]);
13012:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13013:../src/wolfcrypt/src/sp_int.c ****         t[14] = l;
13014:../src/wolfcrypt/src/sp_int.c ****         l = h;
13015:../src/wolfcrypt/src/sp_int.c ****         h = o;
13016:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13017:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[15]);
13018:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[14]);
13019:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[13]);
13020:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[12]);
13021:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[11]);
13022:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[10]);
13023:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[9]);
13024:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[8]);
13025:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13026:../src/wolfcrypt/src/sp_int.c ****         t[15] = l;
13027:../src/wolfcrypt/src/sp_int.c ****         l = h;
13028:../src/wolfcrypt/src/sp_int.c ****         h = o;
13029:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13030:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[1], a->dp[15]);
13031:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[14]);
13032:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[13]);
13033:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[12]);
13034:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[11]);
13035:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[10]);
13036:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[9]);
13037:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[8]);
13038:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13039:../src/wolfcrypt/src/sp_int.c ****         r->dp[16] = l;
13040:../src/wolfcrypt/src/sp_int.c ****         l = h;
13041:../src/wolfcrypt/src/sp_int.c ****         h = o;
13042:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13043:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[2], a->dp[15]);
13044:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[14]);
13045:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[13]);
13046:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[12]);
13047:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[11]);
13048:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[10]);
13049:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[9]);
13050:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13051:../src/wolfcrypt/src/sp_int.c ****         r->dp[17] = l;
13052:../src/wolfcrypt/src/sp_int.c ****         l = h;
13053:../src/wolfcrypt/src/sp_int.c ****         h = o;
13054:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13055:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[3], a->dp[15]);
13056:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[14]);
13057:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[13]);
13058:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[12]);
13059:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[11]);
13060:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[10]);
13061:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[9]);
13062:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13063:../src/wolfcrypt/src/sp_int.c ****         r->dp[18] = l;
13064:../src/wolfcrypt/src/sp_int.c ****         l = h;
13065:../src/wolfcrypt/src/sp_int.c ****         h = o;
13066:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13067:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[4], a->dp[15]);
13068:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[14]);
13069:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[13]);
13070:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[12]);
13071:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[11]);
13072:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[10]);
13073:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13074:../src/wolfcrypt/src/sp_int.c ****         r->dp[19] = l;
13075:../src/wolfcrypt/src/sp_int.c ****         l = h;
13076:../src/wolfcrypt/src/sp_int.c ****         h = o;
13077:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13078:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[5], a->dp[15]);
13079:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[14]);
13080:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[13]);
13081:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[12]);
13082:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[11]);
13083:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[10]);
13084:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13085:../src/wolfcrypt/src/sp_int.c ****         r->dp[20] = l;
13086:../src/wolfcrypt/src/sp_int.c ****         l = h;
13087:../src/wolfcrypt/src/sp_int.c ****         h = o;
13088:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13089:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[6], a->dp[15]);
13090:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[14]);
13091:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[13]);
13092:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[12]);
13093:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[11]);
13094:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13095:../src/wolfcrypt/src/sp_int.c ****         r->dp[21] = l;
13096:../src/wolfcrypt/src/sp_int.c ****         l = h;
13097:../src/wolfcrypt/src/sp_int.c ****         h = o;
13098:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13099:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[7], a->dp[15]);
13100:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[14]);
13101:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[13]);
13102:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[12]);
13103:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[11]);
13104:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13105:../src/wolfcrypt/src/sp_int.c ****         r->dp[22] = l;
13106:../src/wolfcrypt/src/sp_int.c ****         l = h;
13107:../src/wolfcrypt/src/sp_int.c ****         h = o;
13108:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13109:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[8], a->dp[15]);
13110:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[14]);
13111:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[13]);
13112:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[12]);
13113:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13114:../src/wolfcrypt/src/sp_int.c ****         r->dp[23] = l;
13115:../src/wolfcrypt/src/sp_int.c ****         l = h;
13116:../src/wolfcrypt/src/sp_int.c ****         h = o;
13117:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13118:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[9], a->dp[15]);
13119:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[14]);
13120:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[13]);
13121:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[12]);
13122:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13123:../src/wolfcrypt/src/sp_int.c ****         r->dp[24] = l;
13124:../src/wolfcrypt/src/sp_int.c ****         l = h;
13125:../src/wolfcrypt/src/sp_int.c ****         h = o;
13126:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13127:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[10], a->dp[15]);
13128:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[14]);
13129:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[12], a->dp[13]);
13130:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13131:../src/wolfcrypt/src/sp_int.c ****         r->dp[25] = l;
13132:../src/wolfcrypt/src/sp_int.c ****         l = h;
13133:../src/wolfcrypt/src/sp_int.c ****         h = o;
13134:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13135:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[11], a->dp[15]);
13136:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[12], a->dp[14]);
13137:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[13]);
13138:../src/wolfcrypt/src/sp_int.c ****         r->dp[26] = l;
13139:../src/wolfcrypt/src/sp_int.c ****         l = h;
13140:../src/wolfcrypt/src/sp_int.c ****         h = o;
13141:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13142:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[12], a->dp[15]);
13143:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[13], a->dp[14]);
13144:../src/wolfcrypt/src/sp_int.c ****         r->dp[27] = l;
13145:../src/wolfcrypt/src/sp_int.c ****         l = h;
13146:../src/wolfcrypt/src/sp_int.c ****         h = o;
13147:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13148:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[13], a->dp[15]);
13149:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[14]);
13150:../src/wolfcrypt/src/sp_int.c ****         r->dp[28] = l;
13151:../src/wolfcrypt/src/sp_int.c ****         l = h;
13152:../src/wolfcrypt/src/sp_int.c ****         h = o;
13153:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13154:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[14], a->dp[15]);
13155:../src/wolfcrypt/src/sp_int.c ****         r->dp[29] = l;
13156:../src/wolfcrypt/src/sp_int.c ****         l = h;
13157:../src/wolfcrypt/src/sp_int.c ****         h = o;
13158:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD_NO(l, h, a->dp[15]);
13159:../src/wolfcrypt/src/sp_int.c ****         r->dp[30] = l;
13160:../src/wolfcrypt/src/sp_int.c ****         r->dp[31] = h;
13161:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(r->dp, t, 16 * sizeof(sp_int_digit));
13162:../src/wolfcrypt/src/sp_int.c ****         r->used = 32;
13163:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
13164:../src/wolfcrypt/src/sp_int.c ****     }
13165:../src/wolfcrypt/src/sp_int.c **** 
13166:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
13167:../src/wolfcrypt/src/sp_int.c ****     if (t != NULL) {
13168:../src/wolfcrypt/src/sp_int.c ****         XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
13169:../src/wolfcrypt/src/sp_int.c ****     }
13170:../src/wolfcrypt/src/sp_int.c **** #endif
13171:../src/wolfcrypt/src/sp_int.c ****     return err;
13172:../src/wolfcrypt/src/sp_int.c **** }
13173:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 32 */
13174:../src/wolfcrypt/src/sp_int.c **** 
13175:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 48
13176:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
13177:../src/wolfcrypt/src/sp_int.c ****  *
13178:../src/wolfcrypt/src/sp_int.c ****  * Comba implementation.
13179:../src/wolfcrypt/src/sp_int.c ****  *
13180:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
13181:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
13182:../src/wolfcrypt/src/sp_int.c ****  *
13183:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
13184:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
13185:../src/wolfcrypt/src/sp_int.c ****  */
13186:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr_24(sp_int* a, sp_int* r)
13187:../src/wolfcrypt/src/sp_int.c **** {
13188:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
13189:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l = 0;
13190:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h = 0;
13191:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o = 0;
13192:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit tl = 0;
13193:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit th = 0;
13194:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit to;
13195:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
13196:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit* t = NULL;
13197:../src/wolfcrypt/src/sp_int.c **** #else
13198:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit t[24];
13199:../src/wolfcrypt/src/sp_int.c **** #endif
13200:../src/wolfcrypt/src/sp_int.c **** 
13201:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_ARM_THUMB) && SP_WORD_SIZE == 32
13202:../src/wolfcrypt/src/sp_int.c ****     to = 0;
13203:../src/wolfcrypt/src/sp_int.c **** #endif
13204:../src/wolfcrypt/src/sp_int.c **** 
13205:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
13206:../src/wolfcrypt/src/sp_int.c ****      t = (sp_int_digit*)XMALLOC(sizeof(sp_int_digit) * 24, NULL,
13207:../src/wolfcrypt/src/sp_int.c ****          DYNAMIC_TYPE_BIGINT);
13208:../src/wolfcrypt/src/sp_int.c ****      if (t == NULL) {
13209:../src/wolfcrypt/src/sp_int.c ****          err = MP_MEM;
13210:../src/wolfcrypt/src/sp_int.c ****      }
13211:../src/wolfcrypt/src/sp_int.c **** #endif
13212:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
13213:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR(h, l, a->dp[0]);
13214:../src/wolfcrypt/src/sp_int.c ****         t[0] = h;
13215:../src/wolfcrypt/src/sp_int.c ****         h = 0;
13216:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2_NO(l, h, o, a->dp[0], a->dp[1]);
13217:../src/wolfcrypt/src/sp_int.c ****         t[1] = l;
13218:../src/wolfcrypt/src/sp_int.c ****         l = h;
13219:../src/wolfcrypt/src/sp_int.c ****         h = o;
13220:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13221:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2_NO(l, h, o, a->dp[0], a->dp[2]);
13222:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[1]);
13223:../src/wolfcrypt/src/sp_int.c ****         t[2] = l;
13224:../src/wolfcrypt/src/sp_int.c ****         l = h;
13225:../src/wolfcrypt/src/sp_int.c ****         h = o;
13226:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13227:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[0], a->dp[3]);
13228:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[2]);
13229:../src/wolfcrypt/src/sp_int.c ****         t[3] = l;
13230:../src/wolfcrypt/src/sp_int.c ****         l = h;
13231:../src/wolfcrypt/src/sp_int.c ****         h = o;
13232:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13233:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[0], a->dp[4]);
13234:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[1], a->dp[3]);
13235:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[2]);
13236:../src/wolfcrypt/src/sp_int.c ****         t[4] = l;
13237:../src/wolfcrypt/src/sp_int.c ****         l = h;
13238:../src/wolfcrypt/src/sp_int.c ****         h = o;
13239:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13240:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[5]);
13241:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[4]);
13242:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[3]);
13243:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13244:../src/wolfcrypt/src/sp_int.c ****         t[5] = l;
13245:../src/wolfcrypt/src/sp_int.c ****         l = h;
13246:../src/wolfcrypt/src/sp_int.c ****         h = o;
13247:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13248:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[6]);
13249:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[5]);
13250:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[4]);
13251:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[3]);
13252:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13253:../src/wolfcrypt/src/sp_int.c ****         t[6] = l;
13254:../src/wolfcrypt/src/sp_int.c ****         l = h;
13255:../src/wolfcrypt/src/sp_int.c ****         h = o;
13256:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13257:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[7]);
13258:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[6]);
13259:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[5]);
13260:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[4]);
13261:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13262:../src/wolfcrypt/src/sp_int.c ****         t[7] = l;
13263:../src/wolfcrypt/src/sp_int.c ****         l = h;
13264:../src/wolfcrypt/src/sp_int.c ****         h = o;
13265:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13266:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[8]);
13267:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[7]);
13268:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[6]);
13269:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[5]);
13270:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[4]);
13271:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13272:../src/wolfcrypt/src/sp_int.c ****         t[8] = l;
13273:../src/wolfcrypt/src/sp_int.c ****         l = h;
13274:../src/wolfcrypt/src/sp_int.c ****         h = o;
13275:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13276:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[9]);
13277:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[8]);
13278:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[7]);
13279:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[6]);
13280:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[5]);
13281:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13282:../src/wolfcrypt/src/sp_int.c ****         t[9] = l;
13283:../src/wolfcrypt/src/sp_int.c ****         l = h;
13284:../src/wolfcrypt/src/sp_int.c ****         h = o;
13285:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13286:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[10]);
13287:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[9]);
13288:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[8]);
13289:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[7]);
13290:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[6]);
13291:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[5]);
13292:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13293:../src/wolfcrypt/src/sp_int.c ****         t[10] = l;
13294:../src/wolfcrypt/src/sp_int.c ****         l = h;
13295:../src/wolfcrypt/src/sp_int.c ****         h = o;
13296:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13297:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[11]);
13298:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[10]);
13299:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[9]);
13300:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[8]);
13301:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[7]);
13302:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[6]);
13303:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13304:../src/wolfcrypt/src/sp_int.c ****         t[11] = l;
13305:../src/wolfcrypt/src/sp_int.c ****         l = h;
13306:../src/wolfcrypt/src/sp_int.c ****         h = o;
13307:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13308:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[12]);
13309:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[11]);
13310:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[10]);
13311:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[9]);
13312:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[8]);
13313:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[7]);
13314:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[6]);
13315:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13316:../src/wolfcrypt/src/sp_int.c ****         t[12] = l;
13317:../src/wolfcrypt/src/sp_int.c ****         l = h;
13318:../src/wolfcrypt/src/sp_int.c ****         h = o;
13319:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13320:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[13]);
13321:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[12]);
13322:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[11]);
13323:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[10]);
13324:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[9]);
13325:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[8]);
13326:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[7]);
13327:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13328:../src/wolfcrypt/src/sp_int.c ****         t[13] = l;
13329:../src/wolfcrypt/src/sp_int.c ****         l = h;
13330:../src/wolfcrypt/src/sp_int.c ****         h = o;
13331:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13332:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[14]);
13333:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[13]);
13334:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[12]);
13335:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[11]);
13336:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[10]);
13337:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[9]);
13338:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[8]);
13339:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[7]);
13340:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13341:../src/wolfcrypt/src/sp_int.c ****         t[14] = l;
13342:../src/wolfcrypt/src/sp_int.c ****         l = h;
13343:../src/wolfcrypt/src/sp_int.c ****         h = o;
13344:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13345:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[15]);
13346:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[14]);
13347:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[13]);
13348:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[12]);
13349:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[11]);
13350:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[10]);
13351:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[9]);
13352:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[8]);
13353:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13354:../src/wolfcrypt/src/sp_int.c ****         t[15] = l;
13355:../src/wolfcrypt/src/sp_int.c ****         l = h;
13356:../src/wolfcrypt/src/sp_int.c ****         h = o;
13357:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13358:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[16]);
13359:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[15]);
13360:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[14]);
13361:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[13]);
13362:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[12]);
13363:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[11]);
13364:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[10]);
13365:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[9]);
13366:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[8]);
13367:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13368:../src/wolfcrypt/src/sp_int.c ****         t[16] = l;
13369:../src/wolfcrypt/src/sp_int.c ****         l = h;
13370:../src/wolfcrypt/src/sp_int.c ****         h = o;
13371:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13372:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[17]);
13373:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[16]);
13374:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[15]);
13375:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[14]);
13376:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[13]);
13377:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[12]);
13378:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[11]);
13379:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[10]);
13380:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[9]);
13381:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13382:../src/wolfcrypt/src/sp_int.c ****         t[17] = l;
13383:../src/wolfcrypt/src/sp_int.c ****         l = h;
13384:../src/wolfcrypt/src/sp_int.c ****         h = o;
13385:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13386:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[18]);
13387:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[17]);
13388:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[16]);
13389:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[15]);
13390:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[14]);
13391:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[13]);
13392:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[12]);
13393:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[11]);
13394:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[10]);
13395:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[9]);
13396:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13397:../src/wolfcrypt/src/sp_int.c ****         t[18] = l;
13398:../src/wolfcrypt/src/sp_int.c ****         l = h;
13399:../src/wolfcrypt/src/sp_int.c ****         h = o;
13400:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13401:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[19]);
13402:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[18]);
13403:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[17]);
13404:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[16]);
13405:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[15]);
13406:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[14]);
13407:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[13]);
13408:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[12]);
13409:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[11]);
13410:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[10]);
13411:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13412:../src/wolfcrypt/src/sp_int.c ****         t[19] = l;
13413:../src/wolfcrypt/src/sp_int.c ****         l = h;
13414:../src/wolfcrypt/src/sp_int.c ****         h = o;
13415:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13416:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[20]);
13417:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[19]);
13418:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[18]);
13419:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[17]);
13420:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[16]);
13421:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[15]);
13422:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[14]);
13423:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[13]);
13424:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[12]);
13425:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[11]);
13426:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[10]);
13427:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13428:../src/wolfcrypt/src/sp_int.c ****         t[20] = l;
13429:../src/wolfcrypt/src/sp_int.c ****         l = h;
13430:../src/wolfcrypt/src/sp_int.c ****         h = o;
13431:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13432:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[21]);
13433:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[20]);
13434:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[19]);
13435:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[18]);
13436:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[17]);
13437:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[16]);
13438:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[15]);
13439:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[14]);
13440:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[13]);
13441:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[12]);
13442:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[11]);
13443:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13444:../src/wolfcrypt/src/sp_int.c ****         t[21] = l;
13445:../src/wolfcrypt/src/sp_int.c ****         l = h;
13446:../src/wolfcrypt/src/sp_int.c ****         h = o;
13447:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13448:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[22]);
13449:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[21]);
13450:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[20]);
13451:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[19]);
13452:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[18]);
13453:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[17]);
13454:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[16]);
13455:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[15]);
13456:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[14]);
13457:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[13]);
13458:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[12]);
13459:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[11]);
13460:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13461:../src/wolfcrypt/src/sp_int.c ****         t[22] = l;
13462:../src/wolfcrypt/src/sp_int.c ****         l = h;
13463:../src/wolfcrypt/src/sp_int.c ****         h = o;
13464:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13465:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[0], a->dp[23]);
13466:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[1], a->dp[22]);
13467:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[21]);
13468:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[20]);
13469:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[19]);
13470:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[18]);
13471:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[17]);
13472:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[16]);
13473:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[15]);
13474:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[14]);
13475:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[13]);
13476:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[12]);
13477:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13478:../src/wolfcrypt/src/sp_int.c ****         t[23] = l;
13479:../src/wolfcrypt/src/sp_int.c ****         l = h;
13480:../src/wolfcrypt/src/sp_int.c ****         h = o;
13481:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13482:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[1], a->dp[23]);
13483:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[2], a->dp[22]);
13484:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[21]);
13485:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[20]);
13486:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[19]);
13487:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[18]);
13488:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[17]);
13489:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[16]);
13490:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[15]);
13491:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[14]);
13492:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[13]);
13493:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[12]);
13494:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13495:../src/wolfcrypt/src/sp_int.c ****         r->dp[24] = l;
13496:../src/wolfcrypt/src/sp_int.c ****         l = h;
13497:../src/wolfcrypt/src/sp_int.c ****         h = o;
13498:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13499:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[2], a->dp[23]);
13500:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[3], a->dp[22]);
13501:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[21]);
13502:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[20]);
13503:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[19]);
13504:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[18]);
13505:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[17]);
13506:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[16]);
13507:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[15]);
13508:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[14]);
13509:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[12], a->dp[13]);
13510:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13511:../src/wolfcrypt/src/sp_int.c ****         r->dp[25] = l;
13512:../src/wolfcrypt/src/sp_int.c ****         l = h;
13513:../src/wolfcrypt/src/sp_int.c ****         h = o;
13514:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13515:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[3], a->dp[23]);
13516:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[4], a->dp[22]);
13517:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[21]);
13518:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[20]);
13519:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[19]);
13520:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[18]);
13521:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[17]);
13522:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[16]);
13523:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[15]);
13524:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[12], a->dp[14]);
13525:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[13]);
13526:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13527:../src/wolfcrypt/src/sp_int.c ****         r->dp[26] = l;
13528:../src/wolfcrypt/src/sp_int.c ****         l = h;
13529:../src/wolfcrypt/src/sp_int.c ****         h = o;
13530:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13531:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[4], a->dp[23]);
13532:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[5], a->dp[22]);
13533:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[21]);
13534:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[20]);
13535:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[19]);
13536:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[18]);
13537:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[17]);
13538:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[16]);
13539:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[12], a->dp[15]);
13540:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[13], a->dp[14]);
13541:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13542:../src/wolfcrypt/src/sp_int.c ****         r->dp[27] = l;
13543:../src/wolfcrypt/src/sp_int.c ****         l = h;
13544:../src/wolfcrypt/src/sp_int.c ****         h = o;
13545:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13546:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[5], a->dp[23]);
13547:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[6], a->dp[22]);
13548:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[21]);
13549:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[20]);
13550:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[19]);
13551:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[18]);
13552:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[17]);
13553:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[12], a->dp[16]);
13554:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[13], a->dp[15]);
13555:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[14]);
13556:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13557:../src/wolfcrypt/src/sp_int.c ****         r->dp[28] = l;
13558:../src/wolfcrypt/src/sp_int.c ****         l = h;
13559:../src/wolfcrypt/src/sp_int.c ****         h = o;
13560:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13561:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[6], a->dp[23]);
13562:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[7], a->dp[22]);
13563:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[21]);
13564:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[20]);
13565:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[19]);
13566:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[18]);
13567:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[12], a->dp[17]);
13568:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[13], a->dp[16]);
13569:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[14], a->dp[15]);
13570:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13571:../src/wolfcrypt/src/sp_int.c ****         r->dp[29] = l;
13572:../src/wolfcrypt/src/sp_int.c ****         l = h;
13573:../src/wolfcrypt/src/sp_int.c ****         h = o;
13574:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13575:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[7], a->dp[23]);
13576:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[8], a->dp[22]);
13577:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[21]);
13578:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[20]);
13579:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[19]);
13580:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[12], a->dp[18]);
13581:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[13], a->dp[17]);
13582:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[14], a->dp[16]);
13583:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[15]);
13584:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13585:../src/wolfcrypt/src/sp_int.c ****         r->dp[30] = l;
13586:../src/wolfcrypt/src/sp_int.c ****         l = h;
13587:../src/wolfcrypt/src/sp_int.c ****         h = o;
13588:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13589:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[8], a->dp[23]);
13590:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[9], a->dp[22]);
13591:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[21]);
13592:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[20]);
13593:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[12], a->dp[19]);
13594:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[13], a->dp[18]);
13595:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[14], a->dp[17]);
13596:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[15], a->dp[16]);
13597:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13598:../src/wolfcrypt/src/sp_int.c ****         r->dp[31] = l;
13599:../src/wolfcrypt/src/sp_int.c ****         l = h;
13600:../src/wolfcrypt/src/sp_int.c ****         h = o;
13601:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13602:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[9], a->dp[23]);
13603:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[10], a->dp[22]);
13604:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[21]);
13605:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[12], a->dp[20]);
13606:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[13], a->dp[19]);
13607:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[14], a->dp[18]);
13608:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[15], a->dp[17]);
13609:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[16]);
13610:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13611:../src/wolfcrypt/src/sp_int.c ****         r->dp[32] = l;
13612:../src/wolfcrypt/src/sp_int.c ****         l = h;
13613:../src/wolfcrypt/src/sp_int.c ****         h = o;
13614:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13615:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[10], a->dp[23]);
13616:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[11], a->dp[22]);
13617:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[12], a->dp[21]);
13618:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[13], a->dp[20]);
13619:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[14], a->dp[19]);
13620:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[15], a->dp[18]);
13621:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[16], a->dp[17]);
13622:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13623:../src/wolfcrypt/src/sp_int.c ****         r->dp[33] = l;
13624:../src/wolfcrypt/src/sp_int.c ****         l = h;
13625:../src/wolfcrypt/src/sp_int.c ****         h = o;
13626:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13627:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[11], a->dp[23]);
13628:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[12], a->dp[22]);
13629:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[13], a->dp[21]);
13630:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[14], a->dp[20]);
13631:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[15], a->dp[19]);
13632:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[16], a->dp[18]);
13633:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[17]);
13634:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13635:../src/wolfcrypt/src/sp_int.c ****         r->dp[34] = l;
13636:../src/wolfcrypt/src/sp_int.c ****         l = h;
13637:../src/wolfcrypt/src/sp_int.c ****         h = o;
13638:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13639:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[12], a->dp[23]);
13640:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[13], a->dp[22]);
13641:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[14], a->dp[21]);
13642:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[15], a->dp[20]);
13643:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[16], a->dp[19]);
13644:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[17], a->dp[18]);
13645:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13646:../src/wolfcrypt/src/sp_int.c ****         r->dp[35] = l;
13647:../src/wolfcrypt/src/sp_int.c ****         l = h;
13648:../src/wolfcrypt/src/sp_int.c ****         h = o;
13649:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13650:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[13], a->dp[23]);
13651:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[14], a->dp[22]);
13652:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[15], a->dp[21]);
13653:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[16], a->dp[20]);
13654:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[17], a->dp[19]);
13655:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[18]);
13656:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13657:../src/wolfcrypt/src/sp_int.c ****         r->dp[36] = l;
13658:../src/wolfcrypt/src/sp_int.c ****         l = h;
13659:../src/wolfcrypt/src/sp_int.c ****         h = o;
13660:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13661:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[14], a->dp[23]);
13662:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[15], a->dp[22]);
13663:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[16], a->dp[21]);
13664:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[17], a->dp[20]);
13665:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[18], a->dp[19]);
13666:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13667:../src/wolfcrypt/src/sp_int.c ****         r->dp[37] = l;
13668:../src/wolfcrypt/src/sp_int.c ****         l = h;
13669:../src/wolfcrypt/src/sp_int.c ****         h = o;
13670:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13671:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[15], a->dp[23]);
13672:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[16], a->dp[22]);
13673:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[17], a->dp[21]);
13674:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[18], a->dp[20]);
13675:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[19]);
13676:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13677:../src/wolfcrypt/src/sp_int.c ****         r->dp[38] = l;
13678:../src/wolfcrypt/src/sp_int.c ****         l = h;
13679:../src/wolfcrypt/src/sp_int.c ****         h = o;
13680:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13681:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[16], a->dp[23]);
13682:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[17], a->dp[22]);
13683:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[18], a->dp[21]);
13684:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[19], a->dp[20]);
13685:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13686:../src/wolfcrypt/src/sp_int.c ****         r->dp[39] = l;
13687:../src/wolfcrypt/src/sp_int.c ****         l = h;
13688:../src/wolfcrypt/src/sp_int.c ****         h = o;
13689:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13690:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[17], a->dp[23]);
13691:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[18], a->dp[22]);
13692:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[19], a->dp[21]);
13693:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[20]);
13694:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13695:../src/wolfcrypt/src/sp_int.c ****         r->dp[40] = l;
13696:../src/wolfcrypt/src/sp_int.c ****         l = h;
13697:../src/wolfcrypt/src/sp_int.c ****         h = o;
13698:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13699:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_SET(tl, th, to, a->dp[18], a->dp[23]);
13700:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[19], a->dp[22]);
13701:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD(tl, th, to, a->dp[20], a->dp[21]);
13702:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADD_DBL_3(l, h, o, tl, th, to);
13703:../src/wolfcrypt/src/sp_int.c ****         r->dp[41] = l;
13704:../src/wolfcrypt/src/sp_int.c ****         l = h;
13705:../src/wolfcrypt/src/sp_int.c ****         h = o;
13706:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13707:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[19], a->dp[23]);
13708:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[20], a->dp[22]);
13709:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[21]);
13710:../src/wolfcrypt/src/sp_int.c ****         r->dp[42] = l;
13711:../src/wolfcrypt/src/sp_int.c ****         l = h;
13712:../src/wolfcrypt/src/sp_int.c ****         h = o;
13713:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13714:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[20], a->dp[23]);
13715:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[21], a->dp[22]);
13716:../src/wolfcrypt/src/sp_int.c ****         r->dp[43] = l;
13717:../src/wolfcrypt/src/sp_int.c ****         l = h;
13718:../src/wolfcrypt/src/sp_int.c ****         h = o;
13719:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13720:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[21], a->dp[23]);
13721:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD(l, h, o, a->dp[22]);
13722:../src/wolfcrypt/src/sp_int.c ****         r->dp[44] = l;
13723:../src/wolfcrypt/src/sp_int.c ****         l = h;
13724:../src/wolfcrypt/src/sp_int.c ****         h = o;
13725:../src/wolfcrypt/src/sp_int.c ****         o = 0;
13726:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD2(l, h, o, a->dp[22], a->dp[23]);
13727:../src/wolfcrypt/src/sp_int.c ****         r->dp[45] = l;
13728:../src/wolfcrypt/src/sp_int.c ****         l = h;
13729:../src/wolfcrypt/src/sp_int.c ****         h = o;
13730:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SQR_ADD_NO(l, h, a->dp[23]);
13731:../src/wolfcrypt/src/sp_int.c ****         r->dp[46] = l;
13732:../src/wolfcrypt/src/sp_int.c ****         r->dp[47] = h;
13733:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(r->dp, t, 24 * sizeof(sp_int_digit));
13734:../src/wolfcrypt/src/sp_int.c ****         r->used = 48;
13735:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
13736:../src/wolfcrypt/src/sp_int.c ****     }
13737:../src/wolfcrypt/src/sp_int.c **** 
13738:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
13739:../src/wolfcrypt/src/sp_int.c ****     if (t != NULL) {
13740:../src/wolfcrypt/src/sp_int.c ****         XFREE(t, NULL, DYNAMIC_TYPE_BIGINT);
13741:../src/wolfcrypt/src/sp_int.c ****     }
13742:../src/wolfcrypt/src/sp_int.c **** #endif
13743:../src/wolfcrypt/src/sp_int.c ****     return err;
13744:../src/wolfcrypt/src/sp_int.c **** }
13745:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 48 */
13746:../src/wolfcrypt/src/sp_int.c **** 
13747:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 64
13748:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
13749:../src/wolfcrypt/src/sp_int.c ****  *
13750:../src/wolfcrypt/src/sp_int.c ****  * Karatsuba implementation.
13751:../src/wolfcrypt/src/sp_int.c ****  *
13752:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
13753:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
13754:../src/wolfcrypt/src/sp_int.c ****  *
13755:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
13756:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
13757:../src/wolfcrypt/src/sp_int.c ****  */
13758:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr_32(sp_int* a, sp_int* r)
13759:../src/wolfcrypt/src/sp_int.c **** {
13760:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
13761:../src/wolfcrypt/src/sp_int.c ****     int i;
13762:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l;
13763:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h;
13764:../src/wolfcrypt/src/sp_int.c ****     sp_int* z0;
13765:../src/wolfcrypt/src/sp_int.c ****     sp_int* z1;
13766:../src/wolfcrypt/src/sp_int.c ****     sp_int* z2;
13767:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit ca;
13768:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT(a1, 16);
13769:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(z, 33, 2);
13770:../src/wolfcrypt/src/sp_int.c **** 
13771:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT(a1, 16, err, NULL);
13772:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(z, 33, 2, err, NULL);
13773:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
13774:../src/wolfcrypt/src/sp_int.c ****         z1 = z[0];
13775:../src/wolfcrypt/src/sp_int.c ****         z2 = z[1];
13776:../src/wolfcrypt/src/sp_int.c ****         z0 = r;
13777:../src/wolfcrypt/src/sp_int.c **** 
13778:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(a1->dp, &a->dp[16], sizeof(sp_int_digit) * 16);
13779:../src/wolfcrypt/src/sp_int.c ****         a1->used = 16;
13780:../src/wolfcrypt/src/sp_int.c **** 
13781:../src/wolfcrypt/src/sp_int.c ****         /* z2 = a1 ^ 2 */
13782:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sqr_16(a1, z2);
13783:../src/wolfcrypt/src/sp_int.c ****     }
13784:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
13785:../src/wolfcrypt/src/sp_int.c ****         l = 0;
13786:../src/wolfcrypt/src/sp_int.c ****         h = 0;
13787:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 16; i++) {
13788:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[i]);
13789:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[i]);
13790:../src/wolfcrypt/src/sp_int.c ****             a1->dp[i] = l;
13791:../src/wolfcrypt/src/sp_int.c ****             l = h;
13792:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13793:../src/wolfcrypt/src/sp_int.c ****         }
13794:../src/wolfcrypt/src/sp_int.c ****         ca = l;
13795:../src/wolfcrypt/src/sp_int.c **** 
13796:../src/wolfcrypt/src/sp_int.c ****         /* z0 = a0 ^ 2 */
13797:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sqr_16(a, z0);
13798:../src/wolfcrypt/src/sp_int.c ****     }
13799:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
13800:../src/wolfcrypt/src/sp_int.c ****         /* z1 = (a0 + a1) ^ 2 */
13801:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sqr_16(a1, z1);
13802:../src/wolfcrypt/src/sp_int.c ****     }
13803:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
13804:../src/wolfcrypt/src/sp_int.c ****         /* r = (z2 << 32) + (z1 - z0 - z2) << 16) + z0 */
13805:../src/wolfcrypt/src/sp_int.c ****         /* r = z0 */
13806:../src/wolfcrypt/src/sp_int.c ****         /* r += (z1 - z0 - z2) << 16 */
13807:../src/wolfcrypt/src/sp_int.c ****         z1->dp[32] = ca;
13808:../src/wolfcrypt/src/sp_int.c ****         l = 0;
13809:../src/wolfcrypt/src/sp_int.c ****         if (ca) {
13810:../src/wolfcrypt/src/sp_int.c ****             l = z1->dp[0 + 16];
13811:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13812:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[0]);
13813:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[0]);
13814:../src/wolfcrypt/src/sp_int.c ****             z1->dp[0 + 16] = l;
13815:../src/wolfcrypt/src/sp_int.c ****             l = h;
13816:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13817:../src/wolfcrypt/src/sp_int.c ****             for (i = 1; i < 16; i++) {
13818:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, z1->dp[i + 16]);
13819:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, a1->dp[i]);
13820:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, a1->dp[i]);
13821:../src/wolfcrypt/src/sp_int.c ****                 z1->dp[i + 16] = l;
13822:../src/wolfcrypt/src/sp_int.c ****                 l = h;
13823:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
13824:../src/wolfcrypt/src/sp_int.c ****             }
13825:../src/wolfcrypt/src/sp_int.c ****         }
13826:../src/wolfcrypt/src/sp_int.c ****         z1->dp[32] += l;
13827:../src/wolfcrypt/src/sp_int.c ****         /* z1 = z1 - z0 - z1 */
13828:../src/wolfcrypt/src/sp_int.c ****         l = z1->dp[0];
13829:../src/wolfcrypt/src/sp_int.c ****         h = 0;
13830:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SUBC(l, h, z0->dp[0]);
13831:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SUBC(l, h, z2->dp[0]);
13832:../src/wolfcrypt/src/sp_int.c ****         z1->dp[0] = l;
13833:../src/wolfcrypt/src/sp_int.c ****         l = h;
13834:../src/wolfcrypt/src/sp_int.c ****         h = 0;
13835:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; i < 32; i++) {
13836:../src/wolfcrypt/src/sp_int.c ****             l += z1->dp[i];
13837:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z0->dp[i]);
13838:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z2->dp[i]);
13839:../src/wolfcrypt/src/sp_int.c ****             z1->dp[i] = l;
13840:../src/wolfcrypt/src/sp_int.c ****             l = h;
13841:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13842:../src/wolfcrypt/src/sp_int.c ****         }
13843:../src/wolfcrypt/src/sp_int.c ****         z1->dp[i] += l;
13844:../src/wolfcrypt/src/sp_int.c ****         /* r += z1 << 16 */
13845:../src/wolfcrypt/src/sp_int.c ****         l = 0;
13846:../src/wolfcrypt/src/sp_int.c ****         h = 0;
13847:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 16; i++) {
13848:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 16]);
13849:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
13850:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 16] = l;
13851:../src/wolfcrypt/src/sp_int.c ****             l = h;
13852:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13853:../src/wolfcrypt/src/sp_int.c ****         }
13854:../src/wolfcrypt/src/sp_int.c ****         for (; i < 33; i++) {
13855:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
13856:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 16] = l;
13857:../src/wolfcrypt/src/sp_int.c ****             l = h;
13858:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13859:../src/wolfcrypt/src/sp_int.c ****         }
13860:../src/wolfcrypt/src/sp_int.c ****         /* r += z2 << 32  */
13861:../src/wolfcrypt/src/sp_int.c ****         l = 0;
13862:../src/wolfcrypt/src/sp_int.c ****         h = 0;
13863:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 17; i++) {
13864:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 32]);
13865:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
13866:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 32] = l;
13867:../src/wolfcrypt/src/sp_int.c ****             l = h;
13868:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13869:../src/wolfcrypt/src/sp_int.c ****         }
13870:../src/wolfcrypt/src/sp_int.c ****         for (; i < 32; i++) {
13871:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
13872:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 32] = l;
13873:../src/wolfcrypt/src/sp_int.c ****             l = h;
13874:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13875:../src/wolfcrypt/src/sp_int.c ****         }
13876:../src/wolfcrypt/src/sp_int.c ****         r->used = 64;
13877:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
13878:../src/wolfcrypt/src/sp_int.c ****     }
13879:../src/wolfcrypt/src/sp_int.c **** 
13880:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(z, NULL);
13881:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT(a1, NULL);
13882:../src/wolfcrypt/src/sp_int.c ****     return err;
13883:../src/wolfcrypt/src/sp_int.c **** }
13884:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 64 */
13885:../src/wolfcrypt/src/sp_int.c **** 
13886:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 96
13887:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
13888:../src/wolfcrypt/src/sp_int.c ****  *
13889:../src/wolfcrypt/src/sp_int.c ****  * Karatsuba implementation.
13890:../src/wolfcrypt/src/sp_int.c ****  *
13891:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
13892:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
13893:../src/wolfcrypt/src/sp_int.c ****  *
13894:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
13895:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
13896:../src/wolfcrypt/src/sp_int.c ****  */
13897:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr_48(sp_int* a, sp_int* r)
13898:../src/wolfcrypt/src/sp_int.c **** {
13899:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
13900:../src/wolfcrypt/src/sp_int.c ****     int i;
13901:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l;
13902:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h;
13903:../src/wolfcrypt/src/sp_int.c ****     sp_int* z0;
13904:../src/wolfcrypt/src/sp_int.c ****     sp_int* z1;
13905:../src/wolfcrypt/src/sp_int.c ****     sp_int* z2;
13906:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit ca;
13907:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT(a1, 24);
13908:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(z, 49, 2);
13909:../src/wolfcrypt/src/sp_int.c **** 
13910:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT(a1, 24, err, NULL);
13911:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(z, 49, 2, err, NULL);
13912:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
13913:../src/wolfcrypt/src/sp_int.c ****         z1 = z[0];
13914:../src/wolfcrypt/src/sp_int.c ****         z2 = z[1];
13915:../src/wolfcrypt/src/sp_int.c ****         z0 = r;
13916:../src/wolfcrypt/src/sp_int.c **** 
13917:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(a1->dp, &a->dp[24], sizeof(sp_int_digit) * 24);
13918:../src/wolfcrypt/src/sp_int.c ****         a1->used = 24;
13919:../src/wolfcrypt/src/sp_int.c **** 
13920:../src/wolfcrypt/src/sp_int.c ****         /* z2 = a1 ^ 2 */
13921:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sqr_24(a1, z2);
13922:../src/wolfcrypt/src/sp_int.c ****     }
13923:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
13924:../src/wolfcrypt/src/sp_int.c ****         l = 0;
13925:../src/wolfcrypt/src/sp_int.c ****         h = 0;
13926:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 24; i++) {
13927:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[i]);
13928:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[i]);
13929:../src/wolfcrypt/src/sp_int.c ****             a1->dp[i] = l;
13930:../src/wolfcrypt/src/sp_int.c ****             l = h;
13931:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13932:../src/wolfcrypt/src/sp_int.c ****         }
13933:../src/wolfcrypt/src/sp_int.c ****         ca = l;
13934:../src/wolfcrypt/src/sp_int.c **** 
13935:../src/wolfcrypt/src/sp_int.c ****         /* z0 = a0 ^ 2 */
13936:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sqr_24(a, z0);
13937:../src/wolfcrypt/src/sp_int.c ****     }
13938:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
13939:../src/wolfcrypt/src/sp_int.c ****         /* z1 = (a0 + a1) ^ 2 */
13940:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sqr_24(a1, z1);
13941:../src/wolfcrypt/src/sp_int.c ****     }
13942:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
13943:../src/wolfcrypt/src/sp_int.c ****         /* r = (z2 << 48) + (z1 - z0 - z2) << 24) + z0 */
13944:../src/wolfcrypt/src/sp_int.c ****         /* r = z0 */
13945:../src/wolfcrypt/src/sp_int.c ****         /* r += (z1 - z0 - z2) << 24 */
13946:../src/wolfcrypt/src/sp_int.c ****         z1->dp[48] = ca;
13947:../src/wolfcrypt/src/sp_int.c ****         l = 0;
13948:../src/wolfcrypt/src/sp_int.c ****         if (ca) {
13949:../src/wolfcrypt/src/sp_int.c ****             l = z1->dp[0 + 24];
13950:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13951:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[0]);
13952:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[0]);
13953:../src/wolfcrypt/src/sp_int.c ****             z1->dp[0 + 24] = l;
13954:../src/wolfcrypt/src/sp_int.c ****             l = h;
13955:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13956:../src/wolfcrypt/src/sp_int.c ****             for (i = 1; i < 24; i++) {
13957:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, z1->dp[i + 24]);
13958:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, a1->dp[i]);
13959:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, a1->dp[i]);
13960:../src/wolfcrypt/src/sp_int.c ****                 z1->dp[i + 24] = l;
13961:../src/wolfcrypt/src/sp_int.c ****                 l = h;
13962:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
13963:../src/wolfcrypt/src/sp_int.c ****             }
13964:../src/wolfcrypt/src/sp_int.c ****         }
13965:../src/wolfcrypt/src/sp_int.c ****         z1->dp[48] += l;
13966:../src/wolfcrypt/src/sp_int.c ****         /* z1 = z1 - z0 - z1 */
13967:../src/wolfcrypt/src/sp_int.c ****         l = z1->dp[0];
13968:../src/wolfcrypt/src/sp_int.c ****         h = 0;
13969:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SUBC(l, h, z0->dp[0]);
13970:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SUBC(l, h, z2->dp[0]);
13971:../src/wolfcrypt/src/sp_int.c ****         z1->dp[0] = l;
13972:../src/wolfcrypt/src/sp_int.c ****         l = h;
13973:../src/wolfcrypt/src/sp_int.c ****         h = 0;
13974:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; i < 48; i++) {
13975:../src/wolfcrypt/src/sp_int.c ****             l += z1->dp[i];
13976:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z0->dp[i]);
13977:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z2->dp[i]);
13978:../src/wolfcrypt/src/sp_int.c ****             z1->dp[i] = l;
13979:../src/wolfcrypt/src/sp_int.c ****             l = h;
13980:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13981:../src/wolfcrypt/src/sp_int.c ****         }
13982:../src/wolfcrypt/src/sp_int.c ****         z1->dp[i] += l;
13983:../src/wolfcrypt/src/sp_int.c ****         /* r += z1 << 16 */
13984:../src/wolfcrypt/src/sp_int.c ****         l = 0;
13985:../src/wolfcrypt/src/sp_int.c ****         h = 0;
13986:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 24; i++) {
13987:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 24]);
13988:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
13989:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 24] = l;
13990:../src/wolfcrypt/src/sp_int.c ****             l = h;
13991:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13992:../src/wolfcrypt/src/sp_int.c ****         }
13993:../src/wolfcrypt/src/sp_int.c ****         for (; i < 49; i++) {
13994:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
13995:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 24] = l;
13996:../src/wolfcrypt/src/sp_int.c ****             l = h;
13997:../src/wolfcrypt/src/sp_int.c ****             h = 0;
13998:../src/wolfcrypt/src/sp_int.c ****         }
13999:../src/wolfcrypt/src/sp_int.c ****         /* r += z2 << 48  */
14000:../src/wolfcrypt/src/sp_int.c ****         l = 0;
14001:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14002:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 25; i++) {
14003:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 48]);
14004:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
14005:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 48] = l;
14006:../src/wolfcrypt/src/sp_int.c ****             l = h;
14007:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14008:../src/wolfcrypt/src/sp_int.c ****         }
14009:../src/wolfcrypt/src/sp_int.c ****         for (; i < 48; i++) {
14010:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
14011:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 48] = l;
14012:../src/wolfcrypt/src/sp_int.c ****             l = h;
14013:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14014:../src/wolfcrypt/src/sp_int.c ****         }
14015:../src/wolfcrypt/src/sp_int.c ****         r->used = 96;
14016:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
14017:../src/wolfcrypt/src/sp_int.c ****     }
14018:../src/wolfcrypt/src/sp_int.c **** 
14019:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(z, NULL);
14020:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT(a1, NULL);
14021:../src/wolfcrypt/src/sp_int.c ****     return err;
14022:../src/wolfcrypt/src/sp_int.c **** }
14023:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 96 */
14024:../src/wolfcrypt/src/sp_int.c **** 
14025:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 128
14026:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
14027:../src/wolfcrypt/src/sp_int.c ****  *
14028:../src/wolfcrypt/src/sp_int.c ****  * Karatsuba implementation.
14029:../src/wolfcrypt/src/sp_int.c ****  *
14030:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
14031:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
14032:../src/wolfcrypt/src/sp_int.c ****  *
14033:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
14034:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
14035:../src/wolfcrypt/src/sp_int.c ****  */
14036:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr_64(sp_int* a, sp_int* r)
14037:../src/wolfcrypt/src/sp_int.c **** {
14038:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
14039:../src/wolfcrypt/src/sp_int.c ****     int i;
14040:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l;
14041:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h;
14042:../src/wolfcrypt/src/sp_int.c ****     sp_int* z0;
14043:../src/wolfcrypt/src/sp_int.c ****     sp_int* z1;
14044:../src/wolfcrypt/src/sp_int.c ****     sp_int* z2;
14045:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit ca;
14046:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT(a1, 32);
14047:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(z, 65, 2);
14048:../src/wolfcrypt/src/sp_int.c **** 
14049:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT(a1, 32, err, NULL);
14050:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(z, 65, 2, err, NULL);
14051:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
14052:../src/wolfcrypt/src/sp_int.c ****         z1 = z[0];
14053:../src/wolfcrypt/src/sp_int.c ****         z2 = z[1];
14054:../src/wolfcrypt/src/sp_int.c ****         z0 = r;
14055:../src/wolfcrypt/src/sp_int.c **** 
14056:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(a1->dp, &a->dp[32], sizeof(sp_int_digit) * 32);
14057:../src/wolfcrypt/src/sp_int.c ****         a1->used = 32;
14058:../src/wolfcrypt/src/sp_int.c **** 
14059:../src/wolfcrypt/src/sp_int.c ****         /* z2 = a1 ^ 2 */
14060:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sqr_32(a1, z2);
14061:../src/wolfcrypt/src/sp_int.c ****     }
14062:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
14063:../src/wolfcrypt/src/sp_int.c ****         l = 0;
14064:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14065:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 32; i++) {
14066:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[i]);
14067:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[i]);
14068:../src/wolfcrypt/src/sp_int.c ****             a1->dp[i] = l;
14069:../src/wolfcrypt/src/sp_int.c ****             l = h;
14070:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14071:../src/wolfcrypt/src/sp_int.c ****         }
14072:../src/wolfcrypt/src/sp_int.c ****         ca = l;
14073:../src/wolfcrypt/src/sp_int.c **** 
14074:../src/wolfcrypt/src/sp_int.c ****         /* z0 = a0 ^ 2 */
14075:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sqr_32(a, z0);
14076:../src/wolfcrypt/src/sp_int.c ****     }
14077:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
14078:../src/wolfcrypt/src/sp_int.c ****         /* z1 = (a0 + a1) ^ 2 */
14079:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sqr_32(a1, z1);
14080:../src/wolfcrypt/src/sp_int.c ****     }
14081:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
14082:../src/wolfcrypt/src/sp_int.c ****         /* r = (z2 << 64) + (z1 - z0 - z2) << 32) + z0 */
14083:../src/wolfcrypt/src/sp_int.c ****         /* r = z0 */
14084:../src/wolfcrypt/src/sp_int.c ****         /* r += (z1 - z0 - z2) << 32 */
14085:../src/wolfcrypt/src/sp_int.c ****         z1->dp[64] = ca;
14086:../src/wolfcrypt/src/sp_int.c ****         l = 0;
14087:../src/wolfcrypt/src/sp_int.c ****         if (ca) {
14088:../src/wolfcrypt/src/sp_int.c ****             l = z1->dp[0 + 32];
14089:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14090:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[0]);
14091:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[0]);
14092:../src/wolfcrypt/src/sp_int.c ****             z1->dp[0 + 32] = l;
14093:../src/wolfcrypt/src/sp_int.c ****             l = h;
14094:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14095:../src/wolfcrypt/src/sp_int.c ****             for (i = 1; i < 32; i++) {
14096:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, z1->dp[i + 32]);
14097:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, a1->dp[i]);
14098:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, a1->dp[i]);
14099:../src/wolfcrypt/src/sp_int.c ****                 z1->dp[i + 32] = l;
14100:../src/wolfcrypt/src/sp_int.c ****                 l = h;
14101:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
14102:../src/wolfcrypt/src/sp_int.c ****             }
14103:../src/wolfcrypt/src/sp_int.c ****         }
14104:../src/wolfcrypt/src/sp_int.c ****         z1->dp[64] += l;
14105:../src/wolfcrypt/src/sp_int.c ****         /* z1 = z1 - z0 - z1 */
14106:../src/wolfcrypt/src/sp_int.c ****         l = z1->dp[0];
14107:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14108:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SUBC(l, h, z0->dp[0]);
14109:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SUBC(l, h, z2->dp[0]);
14110:../src/wolfcrypt/src/sp_int.c ****         z1->dp[0] = l;
14111:../src/wolfcrypt/src/sp_int.c ****         l = h;
14112:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14113:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; i < 64; i++) {
14114:../src/wolfcrypt/src/sp_int.c ****             l += z1->dp[i];
14115:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z0->dp[i]);
14116:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z2->dp[i]);
14117:../src/wolfcrypt/src/sp_int.c ****             z1->dp[i] = l;
14118:../src/wolfcrypt/src/sp_int.c ****             l = h;
14119:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14120:../src/wolfcrypt/src/sp_int.c ****         }
14121:../src/wolfcrypt/src/sp_int.c ****         z1->dp[i] += l;
14122:../src/wolfcrypt/src/sp_int.c ****         /* r += z1 << 16 */
14123:../src/wolfcrypt/src/sp_int.c ****         l = 0;
14124:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14125:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 32; i++) {
14126:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 32]);
14127:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
14128:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 32] = l;
14129:../src/wolfcrypt/src/sp_int.c ****             l = h;
14130:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14131:../src/wolfcrypt/src/sp_int.c ****         }
14132:../src/wolfcrypt/src/sp_int.c ****         for (; i < 65; i++) {
14133:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
14134:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 32] = l;
14135:../src/wolfcrypt/src/sp_int.c ****             l = h;
14136:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14137:../src/wolfcrypt/src/sp_int.c ****         }
14138:../src/wolfcrypt/src/sp_int.c ****         /* r += z2 << 64  */
14139:../src/wolfcrypt/src/sp_int.c ****         l = 0;
14140:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14141:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 33; i++) {
14142:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 64]);
14143:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
14144:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 64] = l;
14145:../src/wolfcrypt/src/sp_int.c ****             l = h;
14146:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14147:../src/wolfcrypt/src/sp_int.c ****         }
14148:../src/wolfcrypt/src/sp_int.c ****         for (; i < 64; i++) {
14149:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
14150:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 64] = l;
14151:../src/wolfcrypt/src/sp_int.c ****             l = h;
14152:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14153:../src/wolfcrypt/src/sp_int.c ****         }
14154:../src/wolfcrypt/src/sp_int.c ****         r->used = 128;
14155:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
14156:../src/wolfcrypt/src/sp_int.c ****     }
14157:../src/wolfcrypt/src/sp_int.c **** 
14158:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(z, NULL);
14159:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT(a1, NULL);
14160:../src/wolfcrypt/src/sp_int.c ****     return err;
14161:../src/wolfcrypt/src/sp_int.c **** }
14162:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 128 */
14163:../src/wolfcrypt/src/sp_int.c **** 
14164:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 192
14165:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
14166:../src/wolfcrypt/src/sp_int.c ****  *
14167:../src/wolfcrypt/src/sp_int.c ****  * Karatsuba implementation.
14168:../src/wolfcrypt/src/sp_int.c ****  *
14169:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
14170:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
14171:../src/wolfcrypt/src/sp_int.c ****  *
14172:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
14173:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
14174:../src/wolfcrypt/src/sp_int.c ****  */
14175:../src/wolfcrypt/src/sp_int.c **** static int _sp_sqr_96(sp_int* a, sp_int* r)
14176:../src/wolfcrypt/src/sp_int.c **** {
14177:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
14178:../src/wolfcrypt/src/sp_int.c ****     int i;
14179:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit l;
14180:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit h;
14181:../src/wolfcrypt/src/sp_int.c ****     sp_int* z0;
14182:../src/wolfcrypt/src/sp_int.c ****     sp_int* z1;
14183:../src/wolfcrypt/src/sp_int.c ****     sp_int* z2;
14184:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit ca;
14185:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT(a1, 48);
14186:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(z, 97, 2);
14187:../src/wolfcrypt/src/sp_int.c **** 
14188:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT(a1, 48, err, NULL);
14189:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(z, 97, 2, err, NULL);
14190:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
14191:../src/wolfcrypt/src/sp_int.c ****         z1 = z[0];
14192:../src/wolfcrypt/src/sp_int.c ****         z2 = z[1];
14193:../src/wolfcrypt/src/sp_int.c ****         z0 = r;
14194:../src/wolfcrypt/src/sp_int.c **** 
14195:../src/wolfcrypt/src/sp_int.c ****         XMEMCPY(a1->dp, &a->dp[48], sizeof(sp_int_digit) * 48);
14196:../src/wolfcrypt/src/sp_int.c ****         a1->used = 48;
14197:../src/wolfcrypt/src/sp_int.c **** 
14198:../src/wolfcrypt/src/sp_int.c ****         /* z2 = a1 ^ 2 */
14199:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sqr_48(a1, z2);
14200:../src/wolfcrypt/src/sp_int.c ****     }
14201:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
14202:../src/wolfcrypt/src/sp_int.c ****         l = 0;
14203:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14204:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 48; i++) {
14205:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[i]);
14206:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[i]);
14207:../src/wolfcrypt/src/sp_int.c ****             a1->dp[i] = l;
14208:../src/wolfcrypt/src/sp_int.c ****             l = h;
14209:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14210:../src/wolfcrypt/src/sp_int.c ****         }
14211:../src/wolfcrypt/src/sp_int.c ****         ca = l;
14212:../src/wolfcrypt/src/sp_int.c **** 
14213:../src/wolfcrypt/src/sp_int.c ****         /* z0 = a0 ^ 2 */
14214:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sqr_48(a, z0);
14215:../src/wolfcrypt/src/sp_int.c ****     }
14216:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
14217:../src/wolfcrypt/src/sp_int.c ****         /* z1 = (a0 + a1) ^ 2 */
14218:../src/wolfcrypt/src/sp_int.c ****         err = _sp_sqr_48(a1, z1);
14219:../src/wolfcrypt/src/sp_int.c ****     }
14220:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
14221:../src/wolfcrypt/src/sp_int.c ****         /* r = (z2 << 96) + (z1 - z0 - z2) << 48) + z0 */
14222:../src/wolfcrypt/src/sp_int.c ****         /* r = z0 */
14223:../src/wolfcrypt/src/sp_int.c ****         /* r += (z1 - z0 - z2) << 48 */
14224:../src/wolfcrypt/src/sp_int.c ****         z1->dp[96] = ca;
14225:../src/wolfcrypt/src/sp_int.c ****         l = 0;
14226:../src/wolfcrypt/src/sp_int.c ****         if (ca) {
14227:../src/wolfcrypt/src/sp_int.c ****             l = z1->dp[0 + 48];
14228:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14229:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[0]);
14230:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a1->dp[0]);
14231:../src/wolfcrypt/src/sp_int.c ****             z1->dp[0 + 48] = l;
14232:../src/wolfcrypt/src/sp_int.c ****             l = h;
14233:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14234:../src/wolfcrypt/src/sp_int.c ****             for (i = 1; i < 48; i++) {
14235:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, z1->dp[i + 48]);
14236:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, a1->dp[i]);
14237:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, a1->dp[i]);
14238:../src/wolfcrypt/src/sp_int.c ****                 z1->dp[i + 48] = l;
14239:../src/wolfcrypt/src/sp_int.c ****                 l = h;
14240:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
14241:../src/wolfcrypt/src/sp_int.c ****             }
14242:../src/wolfcrypt/src/sp_int.c ****         }
14243:../src/wolfcrypt/src/sp_int.c ****         z1->dp[96] += l;
14244:../src/wolfcrypt/src/sp_int.c ****         /* z1 = z1 - z0 - z1 */
14245:../src/wolfcrypt/src/sp_int.c ****         l = z1->dp[0];
14246:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14247:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SUBC(l, h, z0->dp[0]);
14248:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_SUBC(l, h, z2->dp[0]);
14249:../src/wolfcrypt/src/sp_int.c ****         z1->dp[0] = l;
14250:../src/wolfcrypt/src/sp_int.c ****         l = h;
14251:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14252:../src/wolfcrypt/src/sp_int.c ****         for (i = 1; i < 96; i++) {
14253:../src/wolfcrypt/src/sp_int.c ****             l += z1->dp[i];
14254:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z0->dp[i]);
14255:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_SUBC(l, h, z2->dp[i]);
14256:../src/wolfcrypt/src/sp_int.c ****             z1->dp[i] = l;
14257:../src/wolfcrypt/src/sp_int.c ****             l = h;
14258:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14259:../src/wolfcrypt/src/sp_int.c ****         }
14260:../src/wolfcrypt/src/sp_int.c ****         z1->dp[i] += l;
14261:../src/wolfcrypt/src/sp_int.c ****         /* r += z1 << 16 */
14262:../src/wolfcrypt/src/sp_int.c ****         l = 0;
14263:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14264:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 48; i++) {
14265:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 48]);
14266:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
14267:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 48] = l;
14268:../src/wolfcrypt/src/sp_int.c ****             l = h;
14269:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14270:../src/wolfcrypt/src/sp_int.c ****         }
14271:../src/wolfcrypt/src/sp_int.c ****         for (; i < 97; i++) {
14272:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z1->dp[i]);
14273:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 48] = l;
14274:../src/wolfcrypt/src/sp_int.c ****             l = h;
14275:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14276:../src/wolfcrypt/src/sp_int.c ****         }
14277:../src/wolfcrypt/src/sp_int.c ****         /* r += z2 << 96  */
14278:../src/wolfcrypt/src/sp_int.c ****         l = 0;
14279:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14280:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 49; i++) {
14281:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, r->dp[i + 96]);
14282:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
14283:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 96] = l;
14284:../src/wolfcrypt/src/sp_int.c ****             l = h;
14285:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14286:../src/wolfcrypt/src/sp_int.c ****         }
14287:../src/wolfcrypt/src/sp_int.c ****         for (; i < 96; i++) {
14288:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, z2->dp[i]);
14289:../src/wolfcrypt/src/sp_int.c ****             r->dp[i + 96] = l;
14290:../src/wolfcrypt/src/sp_int.c ****             l = h;
14291:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14292:../src/wolfcrypt/src/sp_int.c ****         }
14293:../src/wolfcrypt/src/sp_int.c ****         r->used = 192;
14294:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(r);
14295:../src/wolfcrypt/src/sp_int.c ****     }
14296:../src/wolfcrypt/src/sp_int.c **** 
14297:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(z, NULL);
14298:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT(a1, NULL);
14299:../src/wolfcrypt/src/sp_int.c ****     return err;
14300:../src/wolfcrypt/src/sp_int.c **** }
14301:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 192 */
14302:../src/wolfcrypt/src/sp_int.c **** 
14303:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM && WOLFSSL_SP_INT_LARGE_COMBA */
14304:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_SP_SMALL */
14305:../src/wolfcrypt/src/sp_int.c **** 
14306:../src/wolfcrypt/src/sp_int.c **** /* Square a and store in r. r = a * a
14307:../src/wolfcrypt/src/sp_int.c ****  *
14308:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
14309:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
14310:../src/wolfcrypt/src/sp_int.c ****  *
14311:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
14312:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or r is NULL, or the result will be too big for fixed
14313:../src/wolfcrypt/src/sp_int.c ****  *          data length.
14314:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
14315:../src/wolfcrypt/src/sp_int.c ****  */
14316:../src/wolfcrypt/src/sp_int.c **** int sp_sqr(sp_int* a, sp_int* r)
14317:../src/wolfcrypt/src/sp_int.c **** {
 13300                             		.loc 2 14317 1
 13301 0000 7E AA                   		push.l	r10
 13302                             	.LCFI152:
 13303 0002 71 0A F4                		add	#-12, r0, r10
 13304                             	.LCFI153:
 13305 0005 EF A0                   		mov.L	r10, r0
 13306 0007 E7 A1 01                		mov.L	r1, 4[r10]
 13307 000a E7 A2 02                		mov.L	r2, 8[r10]
14318:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH) && defined(WOLFSSL_SP_SMALL)
14319:../src/wolfcrypt/src/sp_int.c ****     return sp_mul(a, a, r);
14320:../src/wolfcrypt/src/sp_int.c **** #else
14321:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 13308                             		.loc 2 14321 9
 13309 000d F8 A6 00                		mov.L	#0, [r10]
14322:../src/wolfcrypt/src/sp_int.c **** 
14323:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (r == NULL)) {
 13310                             		.loc 2 14323 8
 13311 0010 ED A5 01                		mov.L	4[r10], r5
 13312 0013 61 05                   		cmp	#0, r5
 13313 0015 17                      		beq	.L855
 13314                             		.loc 2 14323 21 discriminator 1
 13315 0016 ED A5 02                		mov.L	8[r10], r5
 13316 0019 61 05                   		cmp	#0, r5
 13317 001b 1C                      		bne	.L856
 13318                             	.L855:
14324:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 13319                             		.loc 2 14324 13
 13320 001c F8 A6 FD                		mov.L	#-3, [r10]
 13321                             	.L856:
14325:../src/wolfcrypt/src/sp_int.c ****     }
14326:../src/wolfcrypt/src/sp_int.c ****     /* Need extra digit during calculation. */
14327:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (a->used * 2 > r->size)) {
 13322                             		.loc 2 14327 8
 13323 001f EC A5                   		mov.L	[r10], r5
 13324 0021 61 05                   		cmp	#0, r5
 13325 0023 21 17                   		bne	.L857
 13326                             		.loc 2 14327 31 discriminator 1
 13327 0025 ED A5 01                		mov.L	4[r10], r5
 13328 0028 EC 55                   		mov.L	[r5], r5
 13329                             		.loc 2 14327 38 discriminator 1
 13330 002a 4B 55                   		add	r5, r5
 13331 002c EF 54                   		mov.L	r5, r4
 13332                             		.loc 2 14327 45 discriminator 1
 13333 002e ED A5 02                		mov.L	8[r10], r5
 13334 0031 A8 5D                   		mov.L	4[r5], r5
 13335                             		.loc 2 14327 26 discriminator 1
 13336 0033 47 54                   		cmp	r5, r4
 13337 0035 2B 05                   		ble	.L857
14328:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 13338                             		.loc 2 14328 13
 13339 0037 F8 A6 FD                		mov.L	#-3, [r10]
 13340                             	.L857:
14329:../src/wolfcrypt/src/sp_int.c ****     }
14330:../src/wolfcrypt/src/sp_int.c **** 
14331:../src/wolfcrypt/src/sp_int.c **** #if 0
14332:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
14333:../src/wolfcrypt/src/sp_int.c ****         sp_print(a, "a");
14334:../src/wolfcrypt/src/sp_int.c ****     }
14335:../src/wolfcrypt/src/sp_int.c **** #endif
14336:../src/wolfcrypt/src/sp_int.c **** 
14337:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 13341                             		.loc 2 14337 8
 13342 003a EC A5                   		mov.L	[r10], r5
 13343 003c 61 05                   		cmp	#0, r5
 13344 003e 21 1F                   		bne	.L858
14338:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 0) {
 13345                             		.loc 2 14338 14
 13346 0040 ED A5 01                		mov.L	4[r10], r5
 13347 0043 EC 55                   		mov.L	[r5], r5
 13348                             		.loc 2 14338 12
 13349 0045 61 05                   		cmp	#0, r5
 13350 0047 1A                      		bne	.L859
14339:../src/wolfcrypt/src/sp_int.c ****             _sp_zero(r);
 13351                             		.loc 2 14339 13
 13352 0048 ED A1 02                		mov.L	8[r10], r1
 13353 004b 05 00 00 00             		bsr	__sp_zero
 13354 004f 2E 0E                   		bra	.L858
 13355                             	.L859:
14340:../src/wolfcrypt/src/sp_int.c ****         }
14341:../src/wolfcrypt/src/sp_int.c ****     else
14342:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_SP_SMALL
14343:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_HAVE_SP_ECC) && defined(HAVE_ECC)
14344:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 64
14345:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 4) {
14346:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sqr_4(a, r);
14347:../src/wolfcrypt/src/sp_int.c ****         }
14348:../src/wolfcrypt/src/sp_int.c ****         else
14349:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 64 */
14350:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 64
14351:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
14352:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 6) {
14353:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sqr_6(a, r);
14354:../src/wolfcrypt/src/sp_int.c ****         }
14355:../src/wolfcrypt/src/sp_int.c ****         else
14356:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
14357:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 64 */
14358:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 32
14359:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
14360:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 8) {
14361:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sqr_8(a, r);
14362:../src/wolfcrypt/src/sp_int.c ****         }
14363:../src/wolfcrypt/src/sp_int.c ****         else
14364:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
14365:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 32 */
14366:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 32
14367:../src/wolfcrypt/src/sp_int.c **** #ifdef SQR_MUL_ASM
14368:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 12) {
14369:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sqr_12(a, r);
14370:../src/wolfcrypt/src/sp_int.c ****         }
14371:../src/wolfcrypt/src/sp_int.c ****         else
14372:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM */
14373:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 32 */
14374:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_HAVE_SP_ECC && HAVE_ECC */
14375:../src/wolfcrypt/src/sp_int.c **** #if defined(SQR_MUL_ASM) && defined(WOLFSSL_SP_INT_LARGE_COMBA)
14376:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 32
14377:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 16) {
14378:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sqr_16(a, r);
14379:../src/wolfcrypt/src/sp_int.c ****         }
14380:../src/wolfcrypt/src/sp_int.c ****         else
14381:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 32 */
14382:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 48
14383:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 24) {
14384:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sqr_24(a, r);
14385:../src/wolfcrypt/src/sp_int.c ****         }
14386:../src/wolfcrypt/src/sp_int.c ****         else
14387:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 48 */
14388:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 64
14389:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 32) {
14390:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sqr_32(a, r);
14391:../src/wolfcrypt/src/sp_int.c ****         }
14392:../src/wolfcrypt/src/sp_int.c ****         else
14393:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 64 */
14394:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 96
14395:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 48) {
14396:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sqr_48(a, r);
14397:../src/wolfcrypt/src/sp_int.c ****         }
14398:../src/wolfcrypt/src/sp_int.c ****         else
14399:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 96 */
14400:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 128
14401:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 64) {
14402:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sqr_64(a, r);
14403:../src/wolfcrypt/src/sp_int.c ****         }
14404:../src/wolfcrypt/src/sp_int.c ****         else
14405:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 128 */
14406:../src/wolfcrypt/src/sp_int.c ****     #if SP_INT_DIGITS >= 192
14407:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 96) {
14408:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sqr_96(a, r);
14409:../src/wolfcrypt/src/sp_int.c ****         }
14410:../src/wolfcrypt/src/sp_int.c ****         else
14411:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_INT_DIGITS >= 192 */
14412:../src/wolfcrypt/src/sp_int.c **** #endif /* SQR_MUL_ASM && WOLFSSL_SP_INT_LARGE_COMBA */
14413:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_SP_SMALL */
14414:../src/wolfcrypt/src/sp_int.c ****         {
14415:../src/wolfcrypt/src/sp_int.c ****             err = _sp_sqr(a, r);
 13356                             		.loc 2 14415 19
 13357 0051 ED A2 02                		mov.L	8[r10], r2
 13358 0054 ED A1 01                		mov.L	4[r10], r1
 13359 0057 05 00 00 00             		bsr	__sp_sqr
 13360 005b E3 A1                   		mov.L	r1, [r10]
 13361                             	.L858:
14416:../src/wolfcrypt/src/sp_int.c ****         }
14417:../src/wolfcrypt/src/sp_int.c ****     }
14418:../src/wolfcrypt/src/sp_int.c **** 
14419:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
14420:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
14421:../src/wolfcrypt/src/sp_int.c ****         r->sign = MP_ZPOS;
14422:../src/wolfcrypt/src/sp_int.c ****     }
14423:../src/wolfcrypt/src/sp_int.c **** #endif
14424:../src/wolfcrypt/src/sp_int.c **** 
14425:../src/wolfcrypt/src/sp_int.c **** #if 0
14426:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
14427:../src/wolfcrypt/src/sp_int.c ****         sp_print(r, "rsqr");
14428:../src/wolfcrypt/src/sp_int.c ****     }
14429:../src/wolfcrypt/src/sp_int.c **** #endif
14430:../src/wolfcrypt/src/sp_int.c **** 
14431:../src/wolfcrypt/src/sp_int.c ****     return err;
 13362                             		.loc 2 14431 12
 13363 005d EC A5                   		mov.L	[r10], r5
14432:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH && WOLFSSL_SP_SMALL */
14433:../src/wolfcrypt/src/sp_int.c **** }
 13364                             		.loc 2 14433 1
 13365 005f EF 51                   		mov.L	r5, r1
 13366 0061 3F AA 04                		rtsd	#16, r10-r10
 13367                             	.LFE113:
 13369                             		.section	.text.sp_sqrmod,"ax",@progbits
 13370                             		.global	_sp_sqrmod
 13372                             	_sp_sqrmod:
 13373                             	.LFB114:
14434:../src/wolfcrypt/src/sp_int.c **** /* END SP_SQR implementations */
14435:../src/wolfcrypt/src/sp_int.c **** 
14436:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_HAVE_SP_DH || HAVE_ECC ||
14437:../src/wolfcrypt/src/sp_int.c ****         * (!NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY) */
14438:../src/wolfcrypt/src/sp_int.c **** 
14439:../src/wolfcrypt/src/sp_int.c **** #if (!defined(WOLFSSL_RSA_VERIFY_ONLY) && \
14440:../src/wolfcrypt/src/sp_int.c ****      !defined(WOLFSSL_RSA_PUBLIC_ONLY)) || !defined(NO_DH)
14441:../src/wolfcrypt/src/sp_int.c **** /* Square a mod m and store in r: r = (a * a) mod m
14442:../src/wolfcrypt/src/sp_int.c ****  *
14443:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer to square.
14444:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m  SP integer that is the modulus.
14445:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer result.
14446:../src/wolfcrypt/src/sp_int.c ****  *
14447:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
14448:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, m or r is NULL; or m is 0; or a squared is too big
14449:../src/wolfcrypt/src/sp_int.c ****  *          for fixed data length.
14450:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
14451:../src/wolfcrypt/src/sp_int.c ****  */
14452:../src/wolfcrypt/src/sp_int.c **** int sp_sqrmod(sp_int* a, sp_int* m, sp_int* r)
14453:../src/wolfcrypt/src/sp_int.c **** {
 13374                             		.loc 2 14453 1
 13375 0000 7E AA                   		push.l	r10
 13376                             	.LCFI154:
 13377 0002 71 0A F0                		add	#-16, r0, r10
 13378                             	.LCFI155:
 13379 0005 EF A0                   		mov.L	r10, r0
 13380 0007 E7 A1 01                		mov.L	r1, 4[r10]
 13381 000a E7 A2 02                		mov.L	r2, 8[r10]
 13382 000d E7 A3 03                		mov.L	r3, 12[r10]
14454:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 13383                             		.loc 2 14454 9
 13384 0010 F8 A6 00                		mov.L	#0, [r10]
14455:../src/wolfcrypt/src/sp_int.c **** 
14456:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (m == NULL) || (r == NULL)) {
 13385                             		.loc 2 14456 8
 13386 0013 ED A5 01                		mov.L	4[r10], r5
 13387 0016 61 05                   		cmp	#0, r5
 13388 0018 20 0E                   		beq	.L862
 13389                             		.loc 2 14456 21 discriminator 1
 13390 001a ED A5 02                		mov.L	8[r10], r5
 13391 001d 61 05                   		cmp	#0, r5
 13392 001f 17                      		beq	.L862
 13393                             		.loc 2 14456 36 discriminator 2
 13394 0020 ED A5 03                		mov.L	12[r10], r5
 13395 0023 61 05                   		cmp	#0, r5
 13396 0025 1C                      		bne	.L863
 13397                             	.L862:
14457:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 13398                             		.loc 2 14457 13
 13399 0026 F8 A6 FD                		mov.L	#-3, [r10]
 13400                             	.L863:
14458:../src/wolfcrypt/src/sp_int.c ****     }
14459:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (a->used * 2 > r->size)) {
 13401                             		.loc 2 14459 8
 13402 0029 EC A5                   		mov.L	[r10], r5
 13403 002b 61 05                   		cmp	#0, r5
 13404 002d 21 17                   		bne	.L864
 13405                             		.loc 2 14459 31 discriminator 1
 13406 002f ED A5 01                		mov.L	4[r10], r5
 13407 0032 EC 55                   		mov.L	[r5], r5
 13408                             		.loc 2 14459 38 discriminator 1
 13409 0034 4B 55                   		add	r5, r5
 13410 0036 EF 54                   		mov.L	r5, r4
 13411                             		.loc 2 14459 45 discriminator 1
 13412 0038 ED A5 03                		mov.L	12[r10], r5
 13413 003b A8 5D                   		mov.L	4[r5], r5
 13414                             		.loc 2 14459 26 discriminator 1
 13415 003d 47 54                   		cmp	r5, r4
 13416 003f 2B 05                   		ble	.L864
14460:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 13417                             		.loc 2 14460 13
 13418 0041 F8 A6 FD                		mov.L	#-3, [r10]
 13419                             	.L864:
14461:../src/wolfcrypt/src/sp_int.c ****     }
14462:../src/wolfcrypt/src/sp_int.c **** 
14463:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 13420                             		.loc 2 14463 8
 13421 0044 EC A5                   		mov.L	[r10], r5
 13422 0046 61 05                   		cmp	#0, r5
 13423 0048 21 0E                   		bne	.L865
14464:../src/wolfcrypt/src/sp_int.c ****         err = sp_sqr(a, r);
 13424                             		.loc 2 14464 15
 13425 004a ED A2 03                		mov.L	12[r10], r2
 13426 004d ED A1 01                		mov.L	4[r10], r1
 13427 0050 05 00 00 00             		bsr	_sp_sqr
 13428 0054 E3 A1                   		mov.L	r1, [r10]
 13429                             	.L865:
14465:../src/wolfcrypt/src/sp_int.c ****     }
14466:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 13430                             		.loc 2 14466 8
 13431 0056 EC A5                   		mov.L	[r10], r5
 13432 0058 61 05                   		cmp	#0, r5
 13433 005a 21 11                   		bne	.L866
14467:../src/wolfcrypt/src/sp_int.c ****         err = sp_mod(r, m, r);
 13434                             		.loc 2 14467 15
 13435 005c ED A3 03                		mov.L	12[r10], r3
 13436 005f ED A2 02                		mov.L	8[r10], r2
 13437 0062 ED A1 03                		mov.L	12[r10], r1
 13438 0065 05 00 00 00             		bsr	_sp_mod
 13439 0069 E3 A1                   		mov.L	r1, [r10]
 13440                             	.L866:
14468:../src/wolfcrypt/src/sp_int.c ****     }
14469:../src/wolfcrypt/src/sp_int.c **** 
14470:../src/wolfcrypt/src/sp_int.c ****     return err;
 13441                             		.loc 2 14470 12
 13442 006b EC A5                   		mov.L	[r10], r5
14471:../src/wolfcrypt/src/sp_int.c **** }
 13443                             		.loc 2 14471 1
 13444 006d EF 51                   		mov.L	r5, r1
 13445 006f 3F AA 05                		rtsd	#20, r10-r10
 13446                             	.LFE114:
 13448                             		.section	.text._sp_mont_red,"ax",@progbits
 13450                             	__sp_mont_red:
 13451                             	.LFB115:
14472:../src/wolfcrypt/src/sp_int.c **** #endif /* !WOLFSSL_RSA_VERIFY_ONLY */
14473:../src/wolfcrypt/src/sp_int.c **** 
14474:../src/wolfcrypt/src/sp_int.c **** /**********************
14475:../src/wolfcrypt/src/sp_int.c ****  * Montgomery functions
14476:../src/wolfcrypt/src/sp_int.c ****  **********************/
14477:../src/wolfcrypt/src/sp_int.c **** 
14478:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || defined(WOLFSSL_HAVE_SP_DH) || \
14479:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFCRYPT_HAVE_ECCSI) || defined(WOLFCRYPT_HAVE_SAKKE)
14480:../src/wolfcrypt/src/sp_int.c **** /* Reduce a number in montgomery form.
14481:../src/wolfcrypt/src/sp_int.c ****  *
14482:../src/wolfcrypt/src/sp_int.c ****  * Assumes a and m are not NULL and m is not 0.
14483:../src/wolfcrypt/src/sp_int.c ****  *
14484:../src/wolfcrypt/src/sp_int.c ****  * @param  [in,out]  a   SP integer to Montgomery reduce.
14485:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]      m   SP integer that is the modulus.
14486:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]      mp  SP integer digit that is the bottom digit of inv(-m).
14487:../src/wolfcrypt/src/sp_int.c ****  *
14488:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
14489:../src/wolfcrypt/src/sp_int.c ****  */
14490:../src/wolfcrypt/src/sp_int.c **** static int _sp_mont_red(sp_int* a, sp_int* m, sp_int_digit mp)
14491:../src/wolfcrypt/src/sp_int.c **** {
 13452                             		.loc 2 14491 1
 13453 0000 6E 6D                   		pushm	r6-r13
 13454                             	.LCFI156:
 13455 0002 72 0A 1C FF             		add	#-228, r0, r10
 13456                             	.LCFI157:
 13457 0006 EF A0                   		mov.L	r10, r0
 13458 0008 E7 A1 0A                		mov.L	r1, 40[r10]
 13459 000b E7 A2 0B                		mov.L	r2, 44[r10]
 13460 000e E7 A3 0C                		mov.L	r3, 48[r10]
14492:../src/wolfcrypt/src/sp_int.c **** #if !defined(SQR_MUL_ASM)
14493:../src/wolfcrypt/src/sp_int.c ****     int i;
14494:../src/wolfcrypt/src/sp_int.c ****     int bits;
14495:../src/wolfcrypt/src/sp_int.c ****     sp_int_word w;
14496:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit mu;
14497:../src/wolfcrypt/src/sp_int.c **** 
14498:../src/wolfcrypt/src/sp_int.c ****     if (0) {
14499:../src/wolfcrypt/src/sp_int.c ****         sp_print(a, "a");
14500:../src/wolfcrypt/src/sp_int.c ****         sp_print(m, "m");
14501:../src/wolfcrypt/src/sp_int.c ****     }
14502:../src/wolfcrypt/src/sp_int.c **** 
14503:../src/wolfcrypt/src/sp_int.c ****     bits = sp_count_bits(m);
 13461                             		.loc 2 14503 12
 13462 0011 ED A1 0B                		mov.L	44[r10], r1
 13463 0014 05 00 00 00             		bsr	_sp_count_bits
 13464 0018 E7 A1 01                		mov.L	r1, 4[r10]
14504:../src/wolfcrypt/src/sp_int.c **** 
14505:../src/wolfcrypt/src/sp_int.c ****     for (i = a->used; i < m->used * 2; i++) {
 13465                             		.loc 2 14505 12
 13466 001b ED A5 0A                		mov.L	40[r10], r5
 13467 001e EC 55                   		mov.L	[r5], r5
 13468 0020 E3 A5                   		mov.L	r5, [r10]
 13469                             		.loc 2 14505 5
 13470 0022 2E 14                   		bra	.L869
 13471                             	.L870:
14506:../src/wolfcrypt/src/sp_int.c ****         a->dp[i] = 0;
 13472                             		.loc 2 14506 18 discriminator 3
 13473 0024 ED A4 0A                		mov.L	40[r10], r4
 13474 0027 EC A5                   		mov.L	[r10], r5
 13475 0029 62 25                   		add	#2, r5
 13476 002b 66 07                   		mov.L	#0, r7
 13477 002d FE 25 47                		mov.L	r7, [r5,r4]
14505:../src/wolfcrypt/src/sp_int.c ****         a->dp[i] = 0;
 13478                             		.loc 2 14505 41 discriminator 3
 13479 0030 EC A5                   		mov.L	[r10], r5
 13480 0032 62 15                   		add	#1, r5
 13481 0034 E3 A5                   		mov.L	r5, [r10]
 13482                             	.L869:
14505:../src/wolfcrypt/src/sp_int.c ****         a->dp[i] = 0;
 13483                             		.loc 2 14505 28 discriminator 1
 13484 0036 ED A5 0B                		mov.L	44[r10], r5
 13485 0039 EC 55                   		mov.L	[r5], r5
14505:../src/wolfcrypt/src/sp_int.c ****         a->dp[i] = 0;
 13486                             		.loc 2 14505 35 discriminator 1
 13487 003b 4B 55                   		add	r5, r5
 13488 003d EF 54                   		mov.L	r5, r4
14505:../src/wolfcrypt/src/sp_int.c ****         a->dp[i] = 0;
 13489                             		.loc 2 14505 5 discriminator 1
 13490 003f EC A5                   		mov.L	[r10], r5
 13491 0041 47 45                   		cmp	r4, r5
 13492 0043 29 E1                   		blt	.L870
14507:../src/wolfcrypt/src/sp_int.c ****     }
14508:../src/wolfcrypt/src/sp_int.c **** 
14509:../src/wolfcrypt/src/sp_int.c ****     if (m->used == 1) {
 13493                             		.loc 2 14509 10
 13494 0045 ED A5 0B                		mov.L	44[r10], r5
 13495 0048 EC 55                   		mov.L	[r5], r5
 13496                             		.loc 2 14509 8
 13497 004a 61 15                   		cmp	#1, r5
 13498 004c 3B C7 00                		bne	.L871
14510:../src/wolfcrypt/src/sp_int.c ****         mu = mp * a->dp[0];
 13499                             		.loc 2 14510 24
 13500 004f ED A5 0A                		mov.L	40[r10], r5
 13501 0052 A8 D5                   		mov.L	8[r5], r5
 13502                             		.loc 2 14510 12
 13503 0054 ED A4 0C                		mov.L	48[r10], r4
 13504 0057 4F 45                   		mul	r4, r5
 13505 0059 E7 A5 04                		mov.L	r5, 16[r10]
14511:../src/wolfcrypt/src/sp_int.c ****         w = a->dp[0];
 13506                             		.loc 2 14511 18
 13507 005c ED A5 0A                		mov.L	40[r10], r5
 13508 005f A8 D5                   		mov.L	8[r5], r5
 13509                             		.loc 2 14511 11
 13510 0061 E7 A5 02                		mov.L	r5, 8[r10]
 13511 0064 F9 A6 03 00             		mov.L	#0, 12[r10]
14512:../src/wolfcrypt/src/sp_int.c ****         w += (sp_int_word)mu * m->dp[0];
 13512                             		.loc 2 14512 14
 13513 0068 ED A5 04                		mov.L	16[r10], r5
 13514 006b EF 58                   		mov.L	r5, r8
 13515 006d 66 09                   		mov.L	#0, r9
 13516                             		.loc 2 14512 37
 13517 006f ED A5 0B                		mov.L	44[r10], r5
 13518 0072 A8 D5                   		mov.L	8[r5], r5
 13519 0074 EF 5B                   		mov.L	r5, r11
 13520 0076 66 0C                   		mov.L	#0, r12
 13521                             		.loc 2 14512 30
 13522 0078 FF 34 B9                		mul	r11, r9, r4
 13523 007b FF 35 8C                		mul	r8, r12, r5
 13524 007e 4B 54                   		add	r5, r4
 13525 0080 EF 8D                   		mov.L	r8, r13
 13526 0082 FC 1F BD                		emulu	r11, r13
 13527 0085 EF D5                   		mov.L	r13, r5
 13528 0087 EF E6                   		mov.L	r14, r6
 13529 0089 4B 64                   		add	r6, r4
 13530 008b EF 46                   		mov.L	r4, r6
 13531                             		.loc 2 14512 11
 13532 008d ED A3 02                		mov.L	8[r10], r3
 13533 0090 ED A4 03                		mov.L	12[r10], r4
 13534 0093 EF 47                   		mov.L	r4, r7
 13535 0095 FF 2E 53                		add	r5, r3, r14
 13536 0098 FC 0B 67                		adc	r6, r7
 13537 009b E7 A7 26                		mov.L	r7, 152[r10]
 13538 009e E7 AE 25                		mov.L	r14, 148[r10]
 13539 00a1 E5 AA 25 02             		mov.L	148[r10], 8[r10]
 13540 00a5 E5 AA 26 03             		mov.L	152[r10], 12[r10]
14513:../src/wolfcrypt/src/sp_int.c ****         a->dp[0] = (sp_int_digit)w;
 13541                             		.loc 2 14513 20
 13542 00a9 ED A4 02                		mov.L	8[r10], r4
 13543                             		.loc 2 14513 18
 13544 00ac ED A5 0A                		mov.L	40[r10], r5
 13545 00af A0 D4                   		mov.L	r4, 8[r5]
14514:../src/wolfcrypt/src/sp_int.c ****         w >>= SP_WORD_SIZE;
 13546                             		.loc 2 14514 11
 13547 00b1 ED A5 03                		mov.L	12[r10], r5
 13548 00b4 68 05                   		shlr	#0, r5
 13549 00b6 E7 A5 02                		mov.L	r5, 8[r10]
 13550 00b9 F9 A6 03 00             		mov.L	#0, 12[r10]
14515:../src/wolfcrypt/src/sp_int.c ****         w += a->dp[1];
 13551                             		.loc 2 14515 19
 13552 00bd ED A5 0A                		mov.L	40[r10], r5
 13553 00c0 A8 DD                   		mov.L	12[r5], r5
 13554 00c2 E7 A5 0D                		mov.L	r5, 52[r10]
 13555 00c5 F9 A6 0E 00             		mov.L	#0, 56[r10]
 13556                             		.loc 2 14515 11
 13557 00c9 ED A5 02                		mov.L	8[r10], r5
 13558 00cc ED A6 03                		mov.L	12[r10], r6
 13559 00cf EF 6C                   		mov.L	r6, r12
 13560 00d1 ED AD 0D                		mov.L	52[r10], r13
 13561 00d4 FF 2B D5                		add	r13, r5, r11
 13562 00d7 06 A1 02 AC 0E          		adc 56[r10],r12
 13563 00dc E7 AC 28                		mov.L	r12, 160[r10]
 13564 00df E7 AB 27                		mov.L	r11, 156[r10]
 13565 00e2 E5 AA 27 02             		mov.L	156[r10], 8[r10]
 13566 00e6 E5 AA 28 03             		mov.L	160[r10], 12[r10]
14516:../src/wolfcrypt/src/sp_int.c ****         a->dp[1] = (sp_int_digit)w;
 13567                             		.loc 2 14516 20
 13568 00ea ED A4 02                		mov.L	8[r10], r4
 13569                             		.loc 2 14516 18
 13570 00ed ED A5 0A                		mov.L	40[r10], r5
 13571 00f0 A0 DC                   		mov.L	r4, 12[r5]
14517:../src/wolfcrypt/src/sp_int.c ****         w >>= SP_WORD_SIZE;
 13572                             		.loc 2 14517 11
 13573 00f2 ED A5 03                		mov.L	12[r10], r5
 13574 00f5 68 05                   		shlr	#0, r5
 13575 00f7 E7 A5 02                		mov.L	r5, 8[r10]
 13576 00fa F9 A6 03 00             		mov.L	#0, 12[r10]
14518:../src/wolfcrypt/src/sp_int.c ****         a->dp[2] = (sp_int_digit)w;
 13577                             		.loc 2 14518 20
 13578 00fe ED A4 02                		mov.L	8[r10], r4
 13579                             		.loc 2 14518 18
 13580 0101 ED A5 0A                		mov.L	40[r10], r5
 13581 0104 A1 54                   		mov.L	r4, 16[r5]
14519:../src/wolfcrypt/src/sp_int.c ****         a->used = 3;
 13582                             		.loc 2 14519 17
 13583 0106 ED A5 0A                		mov.L	40[r10], r5
 13584 0109 F8 56 03                		mov.L	#3, [r5]
14520:../src/wolfcrypt/src/sp_int.c ****         /* mp is SP_WORD_SIZE */
14521:../src/wolfcrypt/src/sp_int.c ****         bits = SP_WORD_SIZE;
 13585                             		.loc 2 14521 14
 13586 010c F9 A6 01 20             		mov.L	#32, 4[r10]
 13587 0110 38 42 03                		bra	.L872
 13588                             	.L871:
 13589                             	.LBB79:
14522:../src/wolfcrypt/src/sp_int.c ****     }
14523:../src/wolfcrypt/src/sp_int.c ****     else {
14524:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit mask = (sp_int_digit)
14525:../src/wolfcrypt/src/sp_int.c ****                             ((1UL << (bits & (SP_WORD_SIZE - 1))) - 1);
 13590                             		.loc 2 14525 44
 13591 0113 ED A5 01                		mov.L	4[r10], r5
 13592 0116 75 44 1F                		mov.L	#31, r4
 13593 0119 53 54                   		and	r5, r4
 13594                             		.loc 2 14525 35
 13595 011b 66 15                   		mov.L	#1, r5
 13596 011d FD 62 45                		shll	r4, r5
14524:../src/wolfcrypt/src/sp_int.c ****                             ((1UL << (bits & (SP_WORD_SIZE - 1))) - 1);
 13597                             		.loc 2 14524 22
 13598 0120 60 15                   		sub	#1, r5
 13599 0122 E7 A5 09                		mov.L	r5, 36[r10]
14526:../src/wolfcrypt/src/sp_int.c ****         sp_int_word o = 0;
 13600                             		.loc 2 14526 21
 13601 0125 F9 A6 05 00             		mov.L	#0, 20[r10]
 13602 0129 F9 A6 06 00             		mov.L	#0, 24[r10]
14527:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < m->used; i++) {
 13603                             		.loc 2 14527 16
 13604 012d F8 A6 00                		mov.L	#0, [r10]
 13605                             		.loc 2 14527 9
 13606 0130 38 9A 02                		bra	.L873
 13607                             	.L877:
 13608                             	.LBB80:
14528:../src/wolfcrypt/src/sp_int.c ****             int j;
14529:../src/wolfcrypt/src/sp_int.c **** 
14530:../src/wolfcrypt/src/sp_int.c ****             mu = mp * a->dp[i];
 13609                             		.loc 2 14530 28
 13610 0133 ED A4 0A                		mov.L	40[r10], r4
 13611 0136 EC A5                   		mov.L	[r10], r5
 13612 0138 62 25                   		add	#2, r5
 13613 013a FE 65 44                		mov.L	[r5,r4], r4
 13614                             		.loc 2 14530 16
 13615 013d ED A5 0C                		mov.L	48[r10], r5
 13616 0140 4F 45                   		mul	r4, r5
 13617 0142 E7 A5 04                		mov.L	r5, 16[r10]
14531:../src/wolfcrypt/src/sp_int.c ****             if ((i == m->used - 1) && (mask != 0)) {
 13618                             		.loc 2 14531 24
 13619 0145 ED A5 0B                		mov.L	44[r10], r5
 13620 0148 EC 55                   		mov.L	[r5], r5
 13621                             		.loc 2 14531 31
 13622 014a 71 54 FF                		add	#-1, r5, r4
 13623                             		.loc 2 14531 16
 13624 014d EC A5                   		mov.L	[r10], r5
 13625 014f 47 45                   		cmp	r4, r5
 13626 0151 21 14                   		bne	.L874
 13627                             		.loc 2 14531 36 discriminator 1
 13628 0153 ED A5 09                		mov.L	36[r10], r5
 13629 0156 61 05                   		cmp	#0, r5
 13630 0158 20 0D                   		beq	.L874
14532:../src/wolfcrypt/src/sp_int.c ****                 mu &= mask;
 13631                             		.loc 2 14532 20
 13632 015a ED A4 04                		mov.L	16[r10], r4
 13633 015d ED A5 09                		mov.L	36[r10], r5
 13634 0160 53 45                   		and	r4, r5
 13635 0162 E7 A5 04                		mov.L	r5, 16[r10]
 13636                             	.L874:
14533:../src/wolfcrypt/src/sp_int.c ****             }
14534:../src/wolfcrypt/src/sp_int.c ****             w = a->dp[i];
 13637                             		.loc 2 14534 22
 13638 0165 ED A4 0A                		mov.L	40[r10], r4
 13639 0168 EC A5                   		mov.L	[r10], r5
 13640 016a 62 25                   		add	#2, r5
 13641 016c FE 65 45                		mov.L	[r5,r4], r5
 13642                             		.loc 2 14534 15
 13643 016f E7 A5 02                		mov.L	r5, 8[r10]
 13644 0172 F9 A6 03 00             		mov.L	#0, 12[r10]
14535:../src/wolfcrypt/src/sp_int.c ****             w += (sp_int_word)mu * m->dp[0];
 13645                             		.loc 2 14535 18
 13646 0176 ED A5 04                		mov.L	16[r10], r5
 13647 0179 E7 A5 0F                		mov.L	r5, 60[r10]
 13648 017c F9 A6 10 00             		mov.L	#0, 64[r10]
 13649                             		.loc 2 14535 41
 13650 0180 ED A5 0B                		mov.L	44[r10], r5
 13651 0183 A8 D5                   		mov.L	8[r5], r5
 13652 0185 E7 A5 11                		mov.L	r5, 68[r10]
 13653 0188 F9 A6 12 00             		mov.L	#0, 72[r10]
 13654                             		.loc 2 14535 34
 13655 018c ED A4 10                		mov.L	64[r10], r4
 13656 018f ED AE 11                		mov.L	68[r10], r14
 13657 0192 4F E4                   		mul	r14, r4
 13658 0194 ED A5 12                		mov.L	72[r10], r5
 13659 0197 ED A7 0F                		mov.L	60[r10], r7
 13660 019a 4F 75                   		mul	r7, r5
 13661 019c 4B 45                   		add	r4, r5
 13662 019e ED AB 0F                		mov.L	60[r10], r11
 13663 01a1 ED AD 11                		mov.L	68[r10], r13
 13664 01a4 FC 1F DB                		emulu	r13, r11
 13665 01a7 EF B3                   		mov.L	r11, r3
 13666 01a9 EF C4                   		mov.L	r12, r4
 13667 01ab 4B 45                   		add	r4, r5
 13668 01ad EF 54                   		mov.L	r5, r4
 13669                             		.loc 2 14535 15
 13670 01af ED A5 02                		mov.L	8[r10], r5
 13671 01b2 ED A6 03                		mov.L	12[r10], r6
 13672 01b5 EF 67                   		mov.L	r6, r7
 13673 01b7 FF 2E 35                		add	r3, r5, r14
 13674 01ba FC 0B 47                		adc	r4, r7
 13675 01bd E7 A7 2A                		mov.L	r7, 168[r10]
 13676 01c0 E7 AE 29                		mov.L	r14, 164[r10]
 13677 01c3 E5 AA 29 02             		mov.L	164[r10], 8[r10]
 13678 01c7 E5 AA 2A 03             		mov.L	168[r10], 12[r10]
14536:../src/wolfcrypt/src/sp_int.c ****             a->dp[i] = (sp_int_digit)w;
 13679                             		.loc 2 14536 24
 13680 01cb ED A3 02                		mov.L	8[r10], r3
 13681                             		.loc 2 14536 22
 13682 01ce ED A4 0A                		mov.L	40[r10], r4
 13683 01d1 EC A5                   		mov.L	[r10], r5
 13684 01d3 62 25                   		add	#2, r5
 13685 01d5 FE 25 43                		mov.L	r3, [r5,r4]
14537:../src/wolfcrypt/src/sp_int.c ****             w >>= SP_WORD_SIZE;
 13686                             		.loc 2 14537 15
 13687 01d8 ED A5 03                		mov.L	12[r10], r5
 13688 01db 68 05                   		shlr	#0, r5
 13689 01dd E7 A5 02                		mov.L	r5, 8[r10]
 13690 01e0 F9 A6 03 00             		mov.L	#0, 12[r10]
14538:../src/wolfcrypt/src/sp_int.c ****             for (j = 1; j < m->used - 1; j++) {
 13691                             		.loc 2 14538 20
 13692 01e4 F9 A6 07 01             		mov.L	#1, 28[r10]
 13693                             		.loc 2 14538 13
 13694 01e8 38 B9 00                		bra	.L875
 13695                             	.L876:
14539:../src/wolfcrypt/src/sp_int.c ****                 w += a->dp[i + j];
 13696                             		.loc 2 14539 30 discriminator 3
 13697 01eb EC A5                   		mov.L	[r10], r5
 13698 01ed 06 89 A5 07             		add	28[r10].L, r5
 13699                             		.loc 2 14539 27 discriminator 3
 13700 01f1 ED A4 0A                		mov.L	40[r10], r4
 13701 01f4 62 25                   		add	#2, r5
 13702 01f6 FE 65 45                		mov.L	[r5,r4], r5
 13703 01f9 E7 A5 13                		mov.L	r5, 76[r10]
 13704 01fc F9 A6 14 00             		mov.L	#0, 80[r10]
 13705                             		.loc 2 14539 19 discriminator 3
 13706 0200 ED A5 02                		mov.L	8[r10], r5
 13707 0203 ED A6 03                		mov.L	12[r10], r6
 13708 0206 EF 6C                   		mov.L	r6, r12
 13709 0208 ED AD 13                		mov.L	76[r10], r13
 13710 020b FF 2B D5                		add	r13, r5, r11
 13711 020e 06 A1 02 AC 14          		adc 80[r10],r12
 13712 0213 E7 AC 2C                		mov.L	r12, 176[r10]
 13713 0216 E7 AB 2B                		mov.L	r11, 172[r10]
 13714 0219 E5 AA 2B 02             		mov.L	172[r10], 8[r10]
 13715 021d E5 AA 2C 03             		mov.L	176[r10], 12[r10]
14540:../src/wolfcrypt/src/sp_int.c ****                 w += (sp_int_word)mu * m->dp[j];
 13716                             		.loc 2 14540 22 discriminator 3
 13717 0221 ED A5 04                		mov.L	16[r10], r5
 13718 0224 E7 A5 15                		mov.L	r5, 84[r10]
 13719 0227 F9 A6 16 00             		mov.L	#0, 88[r10]
 13720                             		.loc 2 14540 45 discriminator 3
 13721 022b ED A4 0B                		mov.L	44[r10], r4
 13722 022e ED A5 07                		mov.L	28[r10], r5
 13723 0231 62 25                   		add	#2, r5
 13724 0233 FE 65 45                		mov.L	[r5,r4], r5
 13725 0236 E7 A5 17                		mov.L	r5, 92[r10]
 13726 0239 F9 A6 18 00             		mov.L	#0, 96[r10]
 13727                             		.loc 2 14540 38 discriminator 3
 13728 023d ED A4 16                		mov.L	88[r10], r4
 13729 0240 ED AE 17                		mov.L	92[r10], r14
 13730 0243 4F E4                   		mul	r14, r4
 13731 0245 ED A5 18                		mov.L	96[r10], r5
 13732 0248 ED A7 15                		mov.L	84[r10], r7
 13733 024b 4F 75                   		mul	r7, r5
 13734 024d 4B 45                   		add	r4, r5
 13735 024f ED AB 15                		mov.L	84[r10], r11
 13736 0252 ED AD 17                		mov.L	92[r10], r13
 13737 0255 FC 1F DB                		emulu	r13, r11
 13738 0258 EF B3                   		mov.L	r11, r3
 13739 025a EF C4                   		mov.L	r12, r4
 13740 025c 4B 45                   		add	r4, r5
 13741 025e EF 54                   		mov.L	r5, r4
 13742                             		.loc 2 14540 19 discriminator 3
 13743 0260 ED A5 02                		mov.L	8[r10], r5
 13744 0263 ED A6 03                		mov.L	12[r10], r6
 13745 0266 EF 67                   		mov.L	r6, r7
 13746 0268 FF 2E 35                		add	r3, r5, r14
 13747 026b FC 0B 47                		adc	r4, r7
 13748 026e E7 A7 2E                		mov.L	r7, 184[r10]
 13749 0271 E7 AE 2D                		mov.L	r14, 180[r10]
 13750 0274 E5 AA 2D 02             		mov.L	180[r10], 8[r10]
 13751 0278 E5 AA 2E 03             		mov.L	184[r10], 12[r10]
14541:../src/wolfcrypt/src/sp_int.c ****                 a->dp[i + j] = (sp_int_digit)w;
 13752                             		.loc 2 14541 25 discriminator 3
 13753 027c EC A5                   		mov.L	[r10], r5
 13754 027e 06 89 A5 07             		add	28[r10].L, r5
 13755                             		.loc 2 14541 32 discriminator 3
 13756 0282 ED A3 02                		mov.L	8[r10], r3
 13757                             		.loc 2 14541 30 discriminator 3
 13758 0285 ED A4 0A                		mov.L	40[r10], r4
 13759 0288 62 25                   		add	#2, r5
 13760 028a FE 25 43                		mov.L	r3, [r5,r4]
14542:../src/wolfcrypt/src/sp_int.c ****                 w >>= SP_WORD_SIZE;
 13761                             		.loc 2 14542 19 discriminator 3
 13762 028d ED A5 03                		mov.L	12[r10], r5
 13763 0290 68 05                   		shlr	#0, r5
 13764 0292 E7 A5 02                		mov.L	r5, 8[r10]
 13765 0295 F9 A6 03 00             		mov.L	#0, 12[r10]
14538:../src/wolfcrypt/src/sp_int.c ****                 w += a->dp[i + j];
 13766                             		.loc 2 14538 43 discriminator 3
 13767 0299 ED A5 07                		mov.L	28[r10], r5
 13768 029c 62 15                   		add	#1, r5
 13769 029e E7 A5 07                		mov.L	r5, 28[r10]
 13770                             	.L875:
14538:../src/wolfcrypt/src/sp_int.c ****                 w += a->dp[i + j];
 13771                             		.loc 2 14538 30 discriminator 1
 13772 02a1 ED A5 0B                		mov.L	44[r10], r5
 13773 02a4 EC 55                   		mov.L	[r5], r5
14538:../src/wolfcrypt/src/sp_int.c ****                 w += a->dp[i + j];
 13774                             		.loc 2 14538 37 discriminator 1
 13775 02a6 71 54 FF                		add	#-1, r5, r4
14538:../src/wolfcrypt/src/sp_int.c ****                 w += a->dp[i + j];
 13776                             		.loc 2 14538 13 discriminator 1
 13777 02a9 ED A5 07                		mov.L	28[r10], r5
 13778 02ac 47 45                   		cmp	r4, r5
 13779 02ae 28 05 38 3B FF          		blt	.L876
14543:../src/wolfcrypt/src/sp_int.c ****             }
14544:../src/wolfcrypt/src/sp_int.c ****             w += o;
 13780                             		.loc 2 14544 15 discriminator 2
 13781 02b3 ED A3 02                		mov.L	8[r10], r3
 13782 02b6 ED A4 03                		mov.L	12[r10], r4
 13783 02b9 ED A5 05                		mov.L	20[r10], r5
 13784 02bc ED A6 06                		mov.L	24[r10], r6
 13785 02bf EF 4C                   		mov.L	r4, r12
 13786 02c1 FF 2B 53                		add	r5, r3, r11
 13787 02c4 FC 0B 6C                		adc	r6, r12
 13788 02c7 E7 AC 30                		mov.L	r12, 192[r10]
 13789 02ca E7 AB 2F                		mov.L	r11, 188[r10]
 13790 02cd E5 AA 2F 02             		mov.L	188[r10], 8[r10]
 13791 02d1 E5 AA 30 03             		mov.L	192[r10], 12[r10]
14545:../src/wolfcrypt/src/sp_int.c ****             w += a->dp[i + j];
 13792                             		.loc 2 14545 26 discriminator 2
 13793 02d5 EC A5                   		mov.L	[r10], r5
 13794 02d7 06 89 A5 07             		add	28[r10].L, r5
 13795                             		.loc 2 14545 23 discriminator 2
 13796 02db ED A4 0A                		mov.L	40[r10], r4
 13797 02de 62 25                   		add	#2, r5
 13798 02e0 FE 65 45                		mov.L	[r5,r4], r5
 13799 02e3 E7 A5 19                		mov.L	r5, 100[r10]
 13800 02e6 F9 A6 1A 00             		mov.L	#0, 104[r10]
 13801                             		.loc 2 14545 15 discriminator 2
 13802 02ea ED A5 02                		mov.L	8[r10], r5
 13803 02ed ED A6 03                		mov.L	12[r10], r6
 13804 02f0 EF 67                   		mov.L	r6, r7
 13805 02f2 ED A8 19                		mov.L	100[r10], r8
 13806 02f5 FF 2E 85                		add	r8, r5, r14
 13807 02f8 06 A1 02 A7 1A          		adc 104[r10],r7
 13808 02fd E7 A7 32                		mov.L	r7, 200[r10]
 13809 0300 E7 AE 31                		mov.L	r14, 196[r10]
 13810 0303 E5 AA 31 02             		mov.L	196[r10], 8[r10]
 13811 0307 E5 AA 32 03             		mov.L	200[r10], 12[r10]
14546:../src/wolfcrypt/src/sp_int.c ****             o = (sp_int_digit)(w >> SP_WORD_SIZE);
 13812                             		.loc 2 14546 34 discriminator 2
 13813 030b ED A5 03                		mov.L	12[r10], r5
 13814 030e 68 05                   		shlr	#0, r5
 13815 0310 E7 A5 1B                		mov.L	r5, 108[r10]
 13816 0313 F9 A6 1C 00             		mov.L	#0, 112[r10]
 13817                             		.loc 2 14546 17 discriminator 2
 13818 0317 ED A5 1B                		mov.L	108[r10], r5
 13819                             		.loc 2 14546 15 discriminator 2
 13820 031a E7 A5 05                		mov.L	r5, 20[r10]
 13821 031d F9 A6 06 00             		mov.L	#0, 24[r10]
14547:../src/wolfcrypt/src/sp_int.c ****             w = ((sp_int_word)mu * m->dp[j]) + (sp_int_digit)w;
 13822                             		.loc 2 14547 18 discriminator 2
 13823 0321 ED A5 04                		mov.L	16[r10], r5
 13824 0324 E7 A5 1D                		mov.L	r5, 116[r10]
 13825 0327 F9 A6 1E 00             		mov.L	#0, 120[r10]
 13826                             		.loc 2 14547 41 discriminator 2
 13827 032b ED A4 0B                		mov.L	44[r10], r4
 13828 032e ED A5 07                		mov.L	28[r10], r5
 13829 0331 62 25                   		add	#2, r5
 13830 0333 FE 65 45                		mov.L	[r5,r4], r5
 13831 0336 E7 A5 1F                		mov.L	r5, 124[r10]
 13832 0339 F9 A6 20 00             		mov.L	#0, 128[r10]
 13833                             		.loc 2 14547 34 discriminator 2
 13834 033d ED A4 1E                		mov.L	120[r10], r4
 13835 0340 ED AB 1F                		mov.L	124[r10], r11
 13836 0343 4F B4                   		mul	r11, r4
 13837 0345 ED A5 20                		mov.L	128[r10], r5
 13838 0348 ED AC 1D                		mov.L	116[r10], r12
 13839 034b 4F C5                   		mul	r12, r5
 13840 034d 4B 54                   		add	r5, r4
 13841 034f ED AD 1D                		mov.L	116[r10], r13
 13842 0352 ED A7 1F                		mov.L	124[r10], r7
 13843 0355 FC 1F 7D                		emulu	r7, r13
 13844 0358 EF D5                   		mov.L	r13, r5
 13845 035a EF E6                   		mov.L	r14, r6
 13846 035c 4B 64                   		add	r6, r4
 13847 035e EF 46                   		mov.L	r4, r6
 13848                             		.loc 2 14547 48 discriminator 2
 13849 0360 ED A4 02                		mov.L	8[r10], r4
 13850 0363 E7 A4 21                		mov.L	r4, 132[r10]
 13851 0366 F9 A6 22 00             		mov.L	#0, 136[r10]
 13852                             		.loc 2 14547 15 discriminator 2
 13853 036a EF 6B                   		mov.L	r6, r11
 13854 036c ED AC 21                		mov.L	132[r10], r12
 13855 036f FF 28 C5                		add	r12, r5, r8
 13856 0372 06 A1 02 AB 22          		adc 136[r10],r11
 13857 0377 E7 AB 34                		mov.L	r11, 208[r10]
 13858 037a E7 A8 33                		mov.L	r8, 204[r10]
 13859 037d E5 AA 33 02             		mov.L	204[r10], 8[r10]
 13860 0381 E5 AA 34 03             		mov.L	208[r10], 12[r10]
14548:../src/wolfcrypt/src/sp_int.c ****             a->dp[i + j] = (sp_int_digit)w;
 13861                             		.loc 2 14548 21 discriminator 2
 13862 0385 EC A5                   		mov.L	[r10], r5
 13863 0387 06 89 A5 07             		add	28[r10].L, r5
 13864                             		.loc 2 14548 28 discriminator 2
 13865 038b ED A3 02                		mov.L	8[r10], r3
 13866                             		.loc 2 14548 26 discriminator 2
 13867 038e ED A4 0A                		mov.L	40[r10], r4
 13868 0391 62 25                   		add	#2, r5
 13869 0393 FE 25 43                		mov.L	r3, [r5,r4]
14549:../src/wolfcrypt/src/sp_int.c ****             w >>= SP_WORD_SIZE;
 13870                             		.loc 2 14549 15 discriminator 2
 13871 0396 ED A5 03                		mov.L	12[r10], r5
 13872 0399 68 05                   		shlr	#0, r5
 13873 039b E7 A5 02                		mov.L	r5, 8[r10]
 13874 039e F9 A6 03 00             		mov.L	#0, 12[r10]
14550:../src/wolfcrypt/src/sp_int.c ****             o += w;
 13875                             		.loc 2 14550 15 discriminator 2
 13876 03a2 ED A3 05                		mov.L	20[r10], r3
 13877 03a5 ED A4 06                		mov.L	24[r10], r4
 13878 03a8 ED A5 02                		mov.L	8[r10], r5
 13879 03ab ED A6 03                		mov.L	12[r10], r6
 13880 03ae EF 4E                   		mov.L	r4, r14
 13881 03b0 FF 2D 53                		add	r5, r3, r13
 13882 03b3 FC 0B 6E                		adc	r6, r14
 13883 03b6 E7 AE 36                		mov.L	r14, 216[r10]
 13884 03b9 E7 AD 35                		mov.L	r13, 212[r10]
 13885 03bc E5 AA 35 05             		mov.L	212[r10], 20[r10]
 13886 03c0 E5 AA 36 06             		mov.L	216[r10], 24[r10]
 13887                             	.LBE80:
14527:../src/wolfcrypt/src/sp_int.c ****             int j;
 13888                             		.loc 2 14527 35 discriminator 2
 13889 03c4 EC A5                   		mov.L	[r10], r5
 13890 03c6 62 15                   		add	#1, r5
 13891 03c8 E3 A5                   		mov.L	r5, [r10]
 13892                             	.L873:
14527:../src/wolfcrypt/src/sp_int.c ****             int j;
 13893                             		.loc 2 14527 26 discriminator 1
 13894 03ca ED A5 0B                		mov.L	44[r10], r5
 13895 03cd EC 54                   		mov.L	[r5], r4
14527:../src/wolfcrypt/src/sp_int.c ****             int j;
 13896                             		.loc 2 14527 9 discriminator 1
 13897 03cf EC A5                   		mov.L	[r10], r5
 13898 03d1 47 45                   		cmp	r4, r5
 13899 03d3 28 05 38 5E FD          		blt	.L877
14551:../src/wolfcrypt/src/sp_int.c ****         }
14552:../src/wolfcrypt/src/sp_int.c ****         o += a->dp[m->used * 2 - 1];
 13900                             		.loc 2 14552 21
 13901 03d8 ED A5 0B                		mov.L	44[r10], r5
 13902 03db EC 55                   		mov.L	[r5], r5
 13903                             		.loc 2 14552 28
 13904 03dd 4B 55                   		add	r5, r5
 13905                             		.loc 2 14552 32
 13906 03df 60 15                   		sub	#1, r5
 13907                             		.loc 2 14552 19
 13908 03e1 ED A4 0A                		mov.L	40[r10], r4
 13909 03e4 62 25                   		add	#2, r5
 13910 03e6 FE 65 45                		mov.L	[r5,r4], r5
 13911 03e9 E7 A5 23                		mov.L	r5, 140[r10]
 13912 03ec F9 A6 24 00             		mov.L	#0, 144[r10]
 13913                             		.loc 2 14552 11
 13914 03f0 ED A5 05                		mov.L	20[r10], r5
 13915 03f3 ED A6 06                		mov.L	24[r10], r6
 13916 03f6 EF 6B                   		mov.L	r6, r11
 13917 03f8 ED AC 23                		mov.L	140[r10], r12
 13918 03fb FF 28 C5                		add	r12, r5, r8
 13919 03fe 06 A1 02 AB 24          		adc 144[r10],r11
 13920 0403 E7 AB 38                		mov.L	r11, 224[r10]
 13921 0406 E7 A8 37                		mov.L	r8, 220[r10]
 13922 0409 E5 AA 37 05             		mov.L	220[r10], 20[r10]
 13923 040d E5 AA 38 06             		mov.L	224[r10], 24[r10]
14553:../src/wolfcrypt/src/sp_int.c ****         a->dp[m->used * 2 - 1] = (sp_int_digit)o;
 13924                             		.loc 2 14553 16
 13925 0411 ED A5 0B                		mov.L	44[r10], r5
 13926 0414 EC 55                   		mov.L	[r5], r5
 13927                             		.loc 2 14553 23
 13928 0416 4B 55                   		add	r5, r5
 13929                             		.loc 2 14553 27
 13930 0418 60 15                   		sub	#1, r5
 13931                             		.loc 2 14553 34
 13932 041a ED A3 05                		mov.L	20[r10], r3
 13933                             		.loc 2 14553 32
 13934 041d ED A4 0A                		mov.L	40[r10], r4
 13935 0420 62 25                   		add	#2, r5
 13936 0422 FE 25 43                		mov.L	r3, [r5,r4]
14554:../src/wolfcrypt/src/sp_int.c ****         o >>= SP_WORD_SIZE;
 13937                             		.loc 2 14554 11
 13938 0425 ED A5 06                		mov.L	24[r10], r5
 13939 0428 68 05                   		shlr	#0, r5
 13940 042a E7 A5 05                		mov.L	r5, 20[r10]
 13941 042d F9 A6 06 00             		mov.L	#0, 24[r10]
14555:../src/wolfcrypt/src/sp_int.c ****         a->dp[m->used * 2] = (sp_int_digit)o;
 13942                             		.loc 2 14555 16
 13943 0431 ED A5 0B                		mov.L	44[r10], r5
 13944 0434 EC 55                   		mov.L	[r5], r5
 13945                             		.loc 2 14555 23
 13946 0436 4B 55                   		add	r5, r5
 13947                             		.loc 2 14555 30
 13948 0438 ED A3 05                		mov.L	20[r10], r3
 13949                             		.loc 2 14555 28
 13950 043b ED A4 0A                		mov.L	40[r10], r4
 13951 043e 62 25                   		add	#2, r5
 13952 0440 FE 25 43                		mov.L	r3, [r5,r4]
14556:../src/wolfcrypt/src/sp_int.c ****         a->used = m->used * 2 + 1;
 13953                             		.loc 2 14556 20
 13954 0443 ED A5 0B                		mov.L	44[r10], r5
 13955 0446 EC 55                   		mov.L	[r5], r5
 13956                             		.loc 2 14556 27
 13957 0448 4B 55                   		add	r5, r5
 13958                             		.loc 2 14556 31
 13959 044a 71 54 01                		add	#1, r5, r4
 13960                             		.loc 2 14556 17
 13961 044d ED A5 0A                		mov.L	40[r10], r5
 13962 0450 E3 54                   		mov.L	r4, [r5]
 13963                             	.L872:
 13964                             	.LBE79:
 13965                             	.LBB81:
14557:../src/wolfcrypt/src/sp_int.c ****     }
14558:../src/wolfcrypt/src/sp_int.c **** 
14559:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(a);
 13966                             		.loc 2 14559 5
 13967 0452 ED A5 0A                		mov.L	40[r10], r5
 13968 0455 EC 55                   		mov.L	[r5], r5
 13969 0457 60 15                   		sub	#1, r5
 13970 0459 E7 A5 08                		mov.L	r5, 32[r10]
 13971 045c 09                      		bra	.L878
 13972                             	.L880:
 13973                             		.loc 2 14559 5 is_stmt 0 discriminator 5
 13974 045d ED A5 08                		mov.L	32[r10], r5
 13975 0460 60 15                   		sub	#1, r5
 13976 0462 E7 A5 08                		mov.L	r5, 32[r10]
 13977                             	.L878:
 13978                             		.loc 2 14559 5 discriminator 1
 13979 0465 ED A5 08                		mov.L	32[r10], r5
 13980 0468 61 05                   		cmp	#0, r5
 13981 046a 29 11                   		blt	.L879
 13982                             		.loc 2 14559 5 discriminator 3
 13983 046c ED A4 0A                		mov.L	40[r10], r4
 13984 046f ED A5 08                		mov.L	32[r10], r5
 13985 0472 62 25                   		add	#2, r5
 13986 0474 FE 65 45                		mov.L	[r5,r4], r5
 13987 0477 61 05                   		cmp	#0, r5
 13988 0479 20 E4                   		beq	.L880
 13989                             	.L879:
 13990                             		.loc 2 14559 5 discriminator 6
 13991 047b ED A5 08                		mov.L	32[r10], r5
 13992 047e 71 54 01                		add	#1, r5, r4
 13993 0481 ED A5 0A                		mov.L	40[r10], r5
 13994 0484 E3 54                   		mov.L	r4, [r5]
 13995                             	.LBE81:
14560:../src/wolfcrypt/src/sp_int.c ****     sp_rshb(a, bits, a);
 13996                             		.loc 2 14560 5 is_stmt 1 discriminator 6
 13997 0486 ED A3 0A                		mov.L	40[r10], r3
 13998 0489 ED A2 01                		mov.L	4[r10], r2
 13999 048c ED A1 0A                		mov.L	40[r10], r1
 14000 048f 05 00 00 00             		bsr	_sp_rshb
14561:../src/wolfcrypt/src/sp_int.c **** 
14562:../src/wolfcrypt/src/sp_int.c ****     if (_sp_cmp_abs(a, m) != MP_LT) {
 14001                             		.loc 2 14562 9 discriminator 6
 14002 0493 ED A2 0B                		mov.L	44[r10], r2
 14003 0496 ED A1 0A                		mov.L	40[r10], r1
 14004 0499 05 00 00 00             		bsr	__sp_cmp_abs
 14005 049d EF 15                   		mov.L	r1, r5
 14006                             		.loc 2 14562 8 discriminator 6
 14007 049f 75 05 FF                		cmp	#-1, r5
 14008 04a2 20 11                   		beq	.L883
14563:../src/wolfcrypt/src/sp_int.c ****         _sp_sub_off(a, m, a, 0);
 14009                             		.loc 2 14563 9
 14010 04a4 66 04                   		mov.L	#0, r4
 14011 04a6 ED A3 0A                		mov.L	40[r10], r3
 14012 04a9 ED A2 0B                		mov.L	44[r10], r2
 14013 04ac ED A1 0A                		mov.L	40[r10], r1
 14014 04af 05 00 00 00             		bsr	__sp_sub_off
 14015                             	.L883:
14564:../src/wolfcrypt/src/sp_int.c ****     }
14565:../src/wolfcrypt/src/sp_int.c **** 
14566:../src/wolfcrypt/src/sp_int.c ****     if (0) {
14567:../src/wolfcrypt/src/sp_int.c ****         sp_print(a, "rr");
14568:../src/wolfcrypt/src/sp_int.c ****     }
14569:../src/wolfcrypt/src/sp_int.c **** 
14570:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
 14016                             		.loc 2 14570 12
 14017 04b3 66 05                   		mov.L	#0, r5
14571:../src/wolfcrypt/src/sp_int.c **** #else /* !SQR_MUL_ASM */
14572:../src/wolfcrypt/src/sp_int.c ****     int i;
14573:../src/wolfcrypt/src/sp_int.c ****     int j;
14574:../src/wolfcrypt/src/sp_int.c ****     int bits;
14575:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit mu;
14576:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit o;
14577:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit mask;
14578:../src/wolfcrypt/src/sp_int.c **** 
14579:../src/wolfcrypt/src/sp_int.c ****     bits = sp_count_bits(m);
14580:../src/wolfcrypt/src/sp_int.c ****     mask = ((sp_int_digit)1 << (bits & (SP_WORD_SIZE - 1))) - 1;
14581:../src/wolfcrypt/src/sp_int.c **** 
14582:../src/wolfcrypt/src/sp_int.c ****     for (i = a->used; i < m->used * 2; i++) {
14583:../src/wolfcrypt/src/sp_int.c ****         a->dp[i] = 0;
14584:../src/wolfcrypt/src/sp_int.c ****     }
14585:../src/wolfcrypt/src/sp_int.c **** 
14586:../src/wolfcrypt/src/sp_int.c ****     if (m->used <= 1) {
14587:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
14588:../src/wolfcrypt/src/sp_int.c ****         sp_int_word w;
14589:../src/wolfcrypt/src/sp_int.c ****     #else
14590:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit l;
14591:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit h;
14592:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit t;
14593:../src/wolfcrypt/src/sp_int.c ****     #endif
14594:../src/wolfcrypt/src/sp_int.c **** 
14595:../src/wolfcrypt/src/sp_int.c ****         mu = mp * a->dp[0];
14596:../src/wolfcrypt/src/sp_int.c ****     #ifndef SQR_MUL_ASM
14597:../src/wolfcrypt/src/sp_int.c ****         w = a->dp[0];
14598:../src/wolfcrypt/src/sp_int.c ****         w += (sp_int_word)mu * m->dp[0];
14599:../src/wolfcrypt/src/sp_int.c ****         a->dp[0] = (sp_int_digit)w;
14600:../src/wolfcrypt/src/sp_int.c ****         w >>= SP_WORD_SIZE;
14601:../src/wolfcrypt/src/sp_int.c ****         w += a->dp[1];
14602:../src/wolfcrypt/src/sp_int.c ****         a->dp[1] = (sp_int_digit)w;
14603:../src/wolfcrypt/src/sp_int.c ****         w >>= SP_WORD_SIZE;
14604:../src/wolfcrypt/src/sp_int.c ****         a->dp[2] = (sp_int_digit)w;
14605:../src/wolfcrypt/src/sp_int.c ****     #else
14606:../src/wolfcrypt/src/sp_int.c ****         l = a->dp[0];
14607:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14608:../src/wolfcrypt/src/sp_int.c ****         t = m->dp[0];
14609:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_MUL_ADD_NO(l, h, mu, t);
14610:../src/wolfcrypt/src/sp_int.c ****         a->dp[0] = l;
14611:../src/wolfcrypt/src/sp_int.c ****         l = h;
14612:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14613:../src/wolfcrypt/src/sp_int.c ****         t = a->dp[1];
14614:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, t);
14615:../src/wolfcrypt/src/sp_int.c ****         a->dp[1] = l;
14616:../src/wolfcrypt/src/sp_int.c ****         a->dp[2] = h;
14617:../src/wolfcrypt/src/sp_int.c ****     #endif
14618:../src/wolfcrypt/src/sp_int.c ****         a->used = m->used * 2 + 1;
14619:../src/wolfcrypt/src/sp_int.c ****         /* mp is SP_WORD_SIZE */
14620:../src/wolfcrypt/src/sp_int.c ****         bits = SP_WORD_SIZE;
14621:../src/wolfcrypt/src/sp_int.c ****     }
14622:../src/wolfcrypt/src/sp_int.c **** #ifndef WOLFSSL_HAVE_SP_ECC
14623:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 64
14624:../src/wolfcrypt/src/sp_int.c ****     else if ((m->used == 4) && (mask == 0)) {
14625:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit l;
14626:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit h;
14627:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit o2;
14628:../src/wolfcrypt/src/sp_int.c **** 
14629:../src/wolfcrypt/src/sp_int.c ****         l = 0;
14630:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14631:../src/wolfcrypt/src/sp_int.c ****         o = 0;
14632:../src/wolfcrypt/src/sp_int.c ****         o2 = 0;
14633:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 4; i++) {
14634:../src/wolfcrypt/src/sp_int.c ****             mu = mp * a->dp[0];
14635:../src/wolfcrypt/src/sp_int.c ****             l = a->dp[0];
14636:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD_NO(l, h, mu, m->dp[0]);
14637:../src/wolfcrypt/src/sp_int.c ****             l = h;
14638:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14639:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[1]);
14640:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD_NO(l, h, mu, m->dp[1]);
14641:../src/wolfcrypt/src/sp_int.c ****             a->dp[0] = l;
14642:../src/wolfcrypt/src/sp_int.c ****             l = h;
14643:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14644:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[2]);
14645:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD_NO(l, h, mu, m->dp[2]);
14646:../src/wolfcrypt/src/sp_int.c ****             a->dp[1] = l;
14647:../src/wolfcrypt/src/sp_int.c ****             l = h;
14648:../src/wolfcrypt/src/sp_int.c ****             h = o2;
14649:../src/wolfcrypt/src/sp_int.c ****             o2 = 0;
14650:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC_REG(l, h, o);
14651:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[i + 3]);
14652:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD(l, h, o2, mu, m->dp[3]);
14653:../src/wolfcrypt/src/sp_int.c ****             a->dp[2] = l;
14654:../src/wolfcrypt/src/sp_int.c ****             o = h;
14655:../src/wolfcrypt/src/sp_int.c ****             l = h;
14656:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14657:../src/wolfcrypt/src/sp_int.c ****         }
14658:../src/wolfcrypt/src/sp_int.c ****         h = o2;
14659:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, a->dp[7]);
14660:../src/wolfcrypt/src/sp_int.c ****         a->dp[3] = l;
14661:../src/wolfcrypt/src/sp_int.c ****         a->dp[4] = h;
14662:../src/wolfcrypt/src/sp_int.c ****         a->used = 5;
14663:../src/wolfcrypt/src/sp_int.c **** 
14664:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(a);
14665:../src/wolfcrypt/src/sp_int.c **** 
14666:../src/wolfcrypt/src/sp_int.c ****         if (_sp_cmp_abs(a, m) != MP_LT) {
14667:../src/wolfcrypt/src/sp_int.c ****             sp_sub(a, m, a);
14668:../src/wolfcrypt/src/sp_int.c ****         }
14669:../src/wolfcrypt/src/sp_int.c **** 
14670:../src/wolfcrypt/src/sp_int.c ****         return MP_OKAY;
14671:../src/wolfcrypt/src/sp_int.c ****     }
14672:../src/wolfcrypt/src/sp_int.c ****     else if ((m->used == 6) && (mask == 0)) {
14673:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit l;
14674:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit h;
14675:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit o2;
14676:../src/wolfcrypt/src/sp_int.c **** 
14677:../src/wolfcrypt/src/sp_int.c ****         l = 0;
14678:../src/wolfcrypt/src/sp_int.c ****         h = 0;
14679:../src/wolfcrypt/src/sp_int.c ****         o = 0;
14680:../src/wolfcrypt/src/sp_int.c ****         o2 = 0;
14681:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < 6; i++) {
14682:../src/wolfcrypt/src/sp_int.c ****             mu = mp * a->dp[0];
14683:../src/wolfcrypt/src/sp_int.c ****             l = a->dp[0];
14684:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD_NO(l, h, mu, m->dp[0]);
14685:../src/wolfcrypt/src/sp_int.c ****             l = h;
14686:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14687:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[1]);
14688:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD_NO(l, h, mu, m->dp[1]);
14689:../src/wolfcrypt/src/sp_int.c ****             a->dp[0] = l;
14690:../src/wolfcrypt/src/sp_int.c ****             l = h;
14691:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14692:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[2]);
14693:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD_NO(l, h, mu, m->dp[2]);
14694:../src/wolfcrypt/src/sp_int.c ****             a->dp[1] = l;
14695:../src/wolfcrypt/src/sp_int.c ****             l = h;
14696:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14697:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[3]);
14698:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD_NO(l, h, mu, m->dp[3]);
14699:../src/wolfcrypt/src/sp_int.c ****             a->dp[2] = l;
14700:../src/wolfcrypt/src/sp_int.c ****             l = h;
14701:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14702:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[4]);
14703:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD_NO(l, h, mu, m->dp[4]);
14704:../src/wolfcrypt/src/sp_int.c ****             a->dp[3] = l;
14705:../src/wolfcrypt/src/sp_int.c ****             l = h;
14706:../src/wolfcrypt/src/sp_int.c ****             h = o2;
14707:../src/wolfcrypt/src/sp_int.c ****             o2 = 0;
14708:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC_REG(l, h, o);
14709:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, a->dp[i + 5]);
14710:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD(l, h, o2, mu, m->dp[5]);
14711:../src/wolfcrypt/src/sp_int.c ****             a->dp[4] = l;
14712:../src/wolfcrypt/src/sp_int.c ****             o = h;
14713:../src/wolfcrypt/src/sp_int.c ****             l = h;
14714:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14715:../src/wolfcrypt/src/sp_int.c ****         }
14716:../src/wolfcrypt/src/sp_int.c ****         h = o2;
14717:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, a->dp[11]);
14718:../src/wolfcrypt/src/sp_int.c ****         a->dp[5] = l;
14719:../src/wolfcrypt/src/sp_int.c ****         a->dp[6] = h;
14720:../src/wolfcrypt/src/sp_int.c ****         a->used = 7;
14721:../src/wolfcrypt/src/sp_int.c **** 
14722:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(a);
14723:../src/wolfcrypt/src/sp_int.c **** 
14724:../src/wolfcrypt/src/sp_int.c ****         if (_sp_cmp_abs(a, m) != MP_LT) {
14725:../src/wolfcrypt/src/sp_int.c ****             sp_sub(a, m, a);
14726:../src/wolfcrypt/src/sp_int.c ****         }
14727:../src/wolfcrypt/src/sp_int.c **** 
14728:../src/wolfcrypt/src/sp_int.c ****         return MP_OKAY;
14729:../src/wolfcrypt/src/sp_int.c ****     }
14730:../src/wolfcrypt/src/sp_int.c **** #elif SP_WORD_SIZE == 32
14731:../src/wolfcrypt/src/sp_int.c ****     else if ((m->used <= 12) && (mask == 0)) {
14732:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit l;
14733:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit h;
14734:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit o2;
14735:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit* ad;
14736:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit* md;
14737:../src/wolfcrypt/src/sp_int.c **** 
14738:../src/wolfcrypt/src/sp_int.c ****         o = 0;
14739:../src/wolfcrypt/src/sp_int.c ****         o2 = 0;
14740:../src/wolfcrypt/src/sp_int.c ****         ad = a->dp;
14741:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < m->used; i++) {
14742:../src/wolfcrypt/src/sp_int.c ****             md = m->dp;
14743:../src/wolfcrypt/src/sp_int.c ****             mu = mp * ad[0];
14744:../src/wolfcrypt/src/sp_int.c ****             l = ad[0];
14745:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14746:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD_NO(l, h, mu, *(md++));
14747:../src/wolfcrypt/src/sp_int.c ****             l = h;
14748:../src/wolfcrypt/src/sp_int.c ****             for (j = 1; j + 1 < m->used - 1; j += 2) {
14749:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
14750:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, ad[j]);
14751:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD_NO(l, h, mu, *(md++));
14752:../src/wolfcrypt/src/sp_int.c ****                 ad[j - 1] = l;
14753:../src/wolfcrypt/src/sp_int.c ****                 l = 0;
14754:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(h, l, ad[j + 1]);
14755:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD_NO(h, l, mu, *(md++));
14756:../src/wolfcrypt/src/sp_int.c ****                 ad[j] = h;
14757:../src/wolfcrypt/src/sp_int.c ****             }
14758:../src/wolfcrypt/src/sp_int.c ****             for (; j < m->used - 1; j++) {
14759:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
14760:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, ad[j]);
14761:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD_NO(l, h, mu, *(md++));
14762:../src/wolfcrypt/src/sp_int.c ****                 ad[j - 1] = l;
14763:../src/wolfcrypt/src/sp_int.c ****                 l = h;
14764:../src/wolfcrypt/src/sp_int.c ****             }
14765:../src/wolfcrypt/src/sp_int.c ****             h = o2;
14766:../src/wolfcrypt/src/sp_int.c ****             o2 = 0;
14767:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC_REG(l, h, o);
14768:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, ad[i + j]);
14769:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD(l, h, o2, mu, *md);
14770:../src/wolfcrypt/src/sp_int.c ****             ad[j - 1] = l;
14771:../src/wolfcrypt/src/sp_int.c ****             o = h;
14772:../src/wolfcrypt/src/sp_int.c ****         }
14773:../src/wolfcrypt/src/sp_int.c ****         l = o;
14774:../src/wolfcrypt/src/sp_int.c ****         h = o2;
14775:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, a->dp[m->used * 2 - 1]);
14776:../src/wolfcrypt/src/sp_int.c ****         a->dp[m->used  - 1] = l;
14777:../src/wolfcrypt/src/sp_int.c ****         a->dp[m->used] = h;
14778:../src/wolfcrypt/src/sp_int.c ****         a->used = m->used + 1;
14779:../src/wolfcrypt/src/sp_int.c **** 
14780:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(a);
14781:../src/wolfcrypt/src/sp_int.c **** 
14782:../src/wolfcrypt/src/sp_int.c ****         if (_sp_cmp_abs(a, m) != MP_LT) {
14783:../src/wolfcrypt/src/sp_int.c ****             sp_sub(a, m, a);
14784:../src/wolfcrypt/src/sp_int.c ****         }
14785:../src/wolfcrypt/src/sp_int.c **** 
14786:../src/wolfcrypt/src/sp_int.c ****         return MP_OKAY;
14787:../src/wolfcrypt/src/sp_int.c ****     }
14788:../src/wolfcrypt/src/sp_int.c **** #endif /* SP_WORD_SIZE == 64 | 32 */
14789:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_HAVE_SP_ECC */
14790:../src/wolfcrypt/src/sp_int.c ****     else {
14791:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit l;
14792:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit h;
14793:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit o2;
14794:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit* ad;
14795:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit* md;
14796:../src/wolfcrypt/src/sp_int.c **** 
14797:../src/wolfcrypt/src/sp_int.c ****         o = 0;
14798:../src/wolfcrypt/src/sp_int.c ****         o2 = 0;
14799:../src/wolfcrypt/src/sp_int.c ****         ad = a->dp;
14800:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < m->used; i++, ad++) {
14801:../src/wolfcrypt/src/sp_int.c ****             md = m->dp;
14802:../src/wolfcrypt/src/sp_int.c ****             mu = mp * ad[0];
14803:../src/wolfcrypt/src/sp_int.c ****             if ((i == m->used - 1) && (mask != 0)) {
14804:../src/wolfcrypt/src/sp_int.c ****                 mu &= mask;
14805:../src/wolfcrypt/src/sp_int.c ****             }
14806:../src/wolfcrypt/src/sp_int.c ****             l = ad[0];
14807:../src/wolfcrypt/src/sp_int.c ****             h = 0;
14808:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD_NO(l, h, mu, *(md++));
14809:../src/wolfcrypt/src/sp_int.c ****             ad[0] = l;
14810:../src/wolfcrypt/src/sp_int.c ****             l = h;
14811:../src/wolfcrypt/src/sp_int.c ****             for (j = 1; j + 1 < m->used - 1; j += 2) {
14812:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
14813:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, ad[j + 0]);
14814:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD_NO(l, h, mu, *(md++));
14815:../src/wolfcrypt/src/sp_int.c ****                 ad[j + 0] = l;
14816:../src/wolfcrypt/src/sp_int.c ****                 l = 0;
14817:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(h, l, ad[j + 1]);
14818:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD_NO(h, l, mu, *(md++));
14819:../src/wolfcrypt/src/sp_int.c ****                 ad[j + 1] = h;
14820:../src/wolfcrypt/src/sp_int.c ****             }
14821:../src/wolfcrypt/src/sp_int.c ****             for (; j < m->used - 1; j++) {
14822:../src/wolfcrypt/src/sp_int.c ****                 h = 0;
14823:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_ADDC(l, h, ad[j]);
14824:../src/wolfcrypt/src/sp_int.c ****                 SP_ASM_MUL_ADD_NO(l, h, mu, *(md++));
14825:../src/wolfcrypt/src/sp_int.c ****                 ad[j] = l;
14826:../src/wolfcrypt/src/sp_int.c ****                 l = h;
14827:../src/wolfcrypt/src/sp_int.c ****             }
14828:../src/wolfcrypt/src/sp_int.c ****             h = o2;
14829:../src/wolfcrypt/src/sp_int.c ****             o2 = 0;
14830:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC_REG(l, h, o);
14831:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_ADDC(l, h, ad[j]);
14832:../src/wolfcrypt/src/sp_int.c ****             SP_ASM_MUL_ADD(l, h, o2, mu, *md);
14833:../src/wolfcrypt/src/sp_int.c ****             ad[j] = l;
14834:../src/wolfcrypt/src/sp_int.c ****             o = h;
14835:../src/wolfcrypt/src/sp_int.c ****         }
14836:../src/wolfcrypt/src/sp_int.c ****         l = o;
14837:../src/wolfcrypt/src/sp_int.c ****         h = o2;
14838:../src/wolfcrypt/src/sp_int.c ****         SP_ASM_ADDC(l, h, a->dp[m->used * 2 - 1]);
14839:../src/wolfcrypt/src/sp_int.c ****         a->dp[m->used * 2 - 1] = l;
14840:../src/wolfcrypt/src/sp_int.c ****         a->dp[m->used * 2] = h;
14841:../src/wolfcrypt/src/sp_int.c ****         a->used = m->used * 2 + 1;
14842:../src/wolfcrypt/src/sp_int.c ****     }
14843:../src/wolfcrypt/src/sp_int.c **** 
14844:../src/wolfcrypt/src/sp_int.c ****     sp_clamp(a);
14845:../src/wolfcrypt/src/sp_int.c ****     sp_rshb(a, bits, a);
14846:../src/wolfcrypt/src/sp_int.c **** 
14847:../src/wolfcrypt/src/sp_int.c ****     if (_sp_cmp_abs(a, m) != MP_LT) {
14848:../src/wolfcrypt/src/sp_int.c ****         sp_sub(a, m, a);
14849:../src/wolfcrypt/src/sp_int.c ****     }
14850:../src/wolfcrypt/src/sp_int.c **** 
14851:../src/wolfcrypt/src/sp_int.c ****     return MP_OKAY;
14852:../src/wolfcrypt/src/sp_int.c **** #endif /* !SQR_MUL_ASM */
14853:../src/wolfcrypt/src/sp_int.c **** }
 14018                             		.loc 2 14853 1
 14019 04b5 EF 51                   		mov.L	r5, r1
 14020 04b7 3F 6D 41                		rtsd	#260, r6-r13
 14021                             	.LFE115:
 14023                             		.section	.text.sp_mont_red,"ax",@progbits
 14024                             		.global	_sp_mont_red
 14026                             	_sp_mont_red:
 14027                             	.LFB116:
14854:../src/wolfcrypt/src/sp_int.c **** 
14855:../src/wolfcrypt/src/sp_int.c **** #if !defined(WOLFSSL_RSA_VERIFY_ONLY) || \
14856:../src/wolfcrypt/src/sp_int.c ****     (defined(WOLFSSL_SP_MATH_ALL) && defined(HAVE_ECC))
14857:../src/wolfcrypt/src/sp_int.c **** /* Reduce a number in montgomery form.
14858:../src/wolfcrypt/src/sp_int.c ****  *
14859:../src/wolfcrypt/src/sp_int.c ****  * @param  [in,out]  a   SP integer to Montgomery reduce.
14860:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]      m   SP integer that is the modulus.
14861:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]      mp  SP integer digit that is the bottom digit of inv(-m).
14862:../src/wolfcrypt/src/sp_int.c ****  *
14863:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
14864:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or m is NULL or m is zero.
14865:../src/wolfcrypt/src/sp_int.c ****  */
14866:../src/wolfcrypt/src/sp_int.c **** int sp_mont_red(sp_int* a, sp_int* m, sp_int_digit mp)
14867:../src/wolfcrypt/src/sp_int.c **** {
 14028                             		.loc 2 14867 1
 14029 0000 7E AA                   		push.l	r10
 14030                             	.LCFI158:
 14031 0002 71 0A F0                		add	#-16, r0, r10
 14032                             	.LCFI159:
 14033 0005 EF A0                   		mov.L	r10, r0
 14034 0007 E7 A1 01                		mov.L	r1, 4[r10]
 14035 000a E7 A2 02                		mov.L	r2, 8[r10]
 14036 000d E7 A3 03                		mov.L	r3, 12[r10]
14868:../src/wolfcrypt/src/sp_int.c ****     int err;
14869:../src/wolfcrypt/src/sp_int.c **** 
14870:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (m == NULL) || sp_iszero(m)) {
 14037                             		.loc 2 14870 8
 14038 0010 ED A5 01                		mov.L	4[r10], r5
 14039 0013 61 05                   		cmp	#0, r5
 14040 0015 20 10                   		beq	.L885
 14041                             		.loc 2 14870 21 discriminator 1
 14042 0017 ED A5 02                		mov.L	8[r10], r5
 14043 001a 61 05                   		cmp	#0, r5
 14044 001c 11                      		beq	.L885
 14045                             		.loc 2 14870 39 discriminator 2
 14046 001d ED A5 02                		mov.L	8[r10], r5
 14047 0020 EC 55                   		mov.L	[r5], r5
 14048                             		.loc 2 14870 36 discriminator 2
 14049 0022 61 05                   		cmp	#0, r5
 14050 0024 1E                      		bne	.L886
 14051                             	.L885:
14871:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 14052                             		.loc 2 14871 13
 14053 0025 F8 A6 FD                		mov.L	#-3, [r10]
 14054 0028 2E 28                   		bra	.L887
 14055                             	.L886:
14872:../src/wolfcrypt/src/sp_int.c ****     }
14873:../src/wolfcrypt/src/sp_int.c ****     else if (a->size < m->used * 2 + 1) {
 14056                             		.loc 2 14873 25
 14057 002a ED A5 02                		mov.L	8[r10], r5
 14058 002d EC 55                   		mov.L	[r5], r5
 14059                             		.loc 2 14873 32
 14060 002f 4B 55                   		add	r5, r5
 14061 0031 EF 54                   		mov.L	r5, r4
 14062                             		.loc 2 14873 15
 14063 0033 ED A5 01                		mov.L	4[r10], r5
 14064 0036 A8 5D                   		mov.L	4[r5], r5
 14065                             		.loc 2 14873 13
 14066 0038 47 54                   		cmp	r5, r4
 14067 003a 29 07                   		blt	.L888
14874:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 14068                             		.loc 2 14874 13
 14069 003c F8 A6 FD                		mov.L	#-3, [r10]
 14070 003f 2E 11                   		bra	.L887
 14071                             	.L888:
14875:../src/wolfcrypt/src/sp_int.c ****     }
14876:../src/wolfcrypt/src/sp_int.c ****     else {
14877:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mont_red(a, m, mp);
 14072                             		.loc 2 14877 15
 14073 0041 ED A3 03                		mov.L	12[r10], r3
 14074 0044 ED A2 02                		mov.L	8[r10], r2
 14075 0047 ED A1 01                		mov.L	4[r10], r1
 14076 004a 05 00 00 00             		bsr	__sp_mont_red
 14077 004e E3 A1                   		mov.L	r1, [r10]
 14078                             	.L887:
14878:../src/wolfcrypt/src/sp_int.c ****     }
14879:../src/wolfcrypt/src/sp_int.c **** 
14880:../src/wolfcrypt/src/sp_int.c ****     return err;
 14079                             		.loc 2 14880 12
 14080 0050 EC A5                   		mov.L	[r10], r5
14881:../src/wolfcrypt/src/sp_int.c **** }
 14081                             		.loc 2 14881 1
 14082 0052 EF 51                   		mov.L	r5, r1
 14083 0054 3F AA 05                		rtsd	#20, r10-r10
 14084                             	.LFE116:
 14086                             		.section	.text.sp_mont_setup,"ax",@progbits
 14087                             		.global	_sp_mont_setup
 14089                             	_sp_mont_setup:
 14090                             	.LFB117:
14882:../src/wolfcrypt/src/sp_int.c **** #endif
14883:../src/wolfcrypt/src/sp_int.c **** 
14884:../src/wolfcrypt/src/sp_int.c **** /* Calculate the bottom digit of the inverse of negative m.
14885:../src/wolfcrypt/src/sp_int.c ****  *
14886:../src/wolfcrypt/src/sp_int.c ****  * Used when performing Montgomery Reduction.
14887:../src/wolfcrypt/src/sp_int.c ****  *
14888:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m   SP integer that is the modulus.
14889:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  mp  SP integer digit that is the bottom digit of inv(-m).
14890:../src/wolfcrypt/src/sp_int.c ****  *
14891:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
14892:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when m or rho is NULL.
14893:../src/wolfcrypt/src/sp_int.c ****  */
14894:../src/wolfcrypt/src/sp_int.c **** int sp_mont_setup(sp_int* m, sp_int_digit* rho)
14895:../src/wolfcrypt/src/sp_int.c **** {
 14091                             		.loc 2 14895 1
 14092 0000 7E AA                   		push.l	r10
 14093                             	.LCFI160:
 14094 0002 71 0A EC                		add	#-20, r0, r10
 14095                             	.LCFI161:
 14096 0005 EF A0                   		mov.L	r10, r0
 14097 0007 E7 A1 03                		mov.L	r1, 12[r10]
 14098 000a E7 A2 04                		mov.L	r2, 16[r10]
14896:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 14099                             		.loc 2 14896 9
 14100 000d F8 A6 00                		mov.L	#0, [r10]
14897:../src/wolfcrypt/src/sp_int.c **** 
14898:../src/wolfcrypt/src/sp_int.c ****     if ((m == NULL) || (rho == NULL)) {
 14101                             		.loc 2 14898 8
 14102 0010 ED A5 03                		mov.L	12[r10], r5
 14103 0013 61 05                   		cmp	#0, r5
 14104 0015 17                      		beq	.L891
 14105                             		.loc 2 14898 21 discriminator 1
 14106 0016 ED A5 04                		mov.L	16[r10], r5
 14107 0019 61 05                   		cmp	#0, r5
 14108 001b 1C                      		bne	.L892
 14109                             	.L891:
14899:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 14110                             		.loc 2 14899 13
 14111 001c F8 A6 FD                		mov.L	#-3, [r10]
 14112                             	.L892:
14900:../src/wolfcrypt/src/sp_int.c ****     }
14901:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && !sp_isodd(m)) {
 14113                             		.loc 2 14901 8
 14114 001f EC A5                   		mov.L	[r10], r5
 14115 0021 61 05                   		cmp	#0, r5
 14116 0023 21 18                   		bne	.L893
 14117                             		.loc 2 14901 30 discriminator 1
 14118 0025 ED A5 03                		mov.L	12[r10], r5
 14119 0028 EC 55                   		mov.L	[r5], r5
 14120                             		.loc 2 14901 26 discriminator 1
 14121 002a 61 05                   		cmp	#0, r5
 14122 002c 20 0C                   		beq	.L894
 14123                             		.loc 2 14901 30 discriminator 2
 14124 002e ED A5 03                		mov.L	12[r10], r5
 14125 0031 A8 D5                   		mov.L	8[r5], r5
 14126 0033 64 15                   		and	#1, r5
 14127                             		.loc 2 14901 29 discriminator 2
 14128 0035 61 05                   		cmp	#0, r5
 14129 0037 1C                      		bne	.L893
 14130                             	.L894:
14902:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 14131                             		.loc 2 14902 13
 14132 0038 F8 A6 FD                		mov.L	#-3, [r10]
 14133                             	.L893:
14903:../src/wolfcrypt/src/sp_int.c ****     }
14904:../src/wolfcrypt/src/sp_int.c **** 
14905:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 14134                             		.loc 2 14905 8
 14135 003b EC A5                   		mov.L	[r10], r5
 14136 003d 61 05                   		cmp	#0, r5
 14137 003f 21 65                   		bne	.L895
 14138                             	.LBB82:
14906:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit x;
14907:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit b;
14908:../src/wolfcrypt/src/sp_int.c **** 
14909:../src/wolfcrypt/src/sp_int.c ****         b = m->dp[0];
 14139                             		.loc 2 14909 11
 14140 0041 ED A5 03                		mov.L	12[r10], r5
 14141 0044 A8 D5                   		mov.L	8[r5], r5
 14142 0046 E7 A5 01                		mov.L	r5, 4[r10]
14910:../src/wolfcrypt/src/sp_int.c ****         x = (((b + 2) & 4) << 1) + b; /* here x*a==1 mod 2**4 */
 14143                             		.loc 2 14910 18
 14144 0049 ED A5 01                		mov.L	4[r10], r5
 14145 004c 62 25                   		add	#2, r5
 14146                             		.loc 2 14910 28
 14147 004e 4B 55                   		add	r5, r5
 14148 0050 64 85                   		and	#8, r5
 14149                             		.loc 2 14910 11
 14150 0052 ED A4 01                		mov.L	4[r10], r4
 14151 0055 4B 45                   		add	r4, r5
 14152 0057 E7 A5 02                		mov.L	r5, 8[r10]
14911:../src/wolfcrypt/src/sp_int.c ****         x *= 2 - b * x;               /* here x*a==1 mod 2**8 */
 14153                             		.loc 2 14911 20
 14154 005a ED A4 01                		mov.L	4[r10], r4
 14155 005d ED A5 02                		mov.L	8[r10], r5
 14156 0060 4F 45                   		mul	r4, r5
 14157                             		.loc 2 14911 16
 14158 0062 66 24                   		mov.L	#2, r4
 14159 0064 FF 05 54                		sub	r5, r4, r5
 14160                             		.loc 2 14911 11
 14161 0067 ED A4 02                		mov.L	8[r10], r4
 14162 006a 4F 45                   		mul	r4, r5
 14163 006c E7 A5 02                		mov.L	r5, 8[r10]
14912:../src/wolfcrypt/src/sp_int.c ****     #if SP_WORD_SIZE >= 16
14913:../src/wolfcrypt/src/sp_int.c ****         x *= 2 - b * x;               /* here x*a==1 mod 2**16 */
 14164                             		.loc 2 14913 20
 14165 006f ED A4 01                		mov.L	4[r10], r4
 14166 0072 ED A5 02                		mov.L	8[r10], r5
 14167 0075 4F 45                   		mul	r4, r5
 14168                             		.loc 2 14913 16
 14169 0077 66 24                   		mov.L	#2, r4
 14170 0079 FF 05 54                		sub	r5, r4, r5
 14171                             		.loc 2 14913 11
 14172 007c ED A4 02                		mov.L	8[r10], r4
 14173 007f 4F 45                   		mul	r4, r5
 14174 0081 E7 A5 02                		mov.L	r5, 8[r10]
14914:../src/wolfcrypt/src/sp_int.c ****     #if SP_WORD_SIZE >= 32
14915:../src/wolfcrypt/src/sp_int.c ****         x *= 2 - b * x;               /* here x*a==1 mod 2**32 */
 14175                             		.loc 2 14915 20
 14176 0084 ED A4 01                		mov.L	4[r10], r4
 14177 0087 ED A5 02                		mov.L	8[r10], r5
 14178 008a 4F 45                   		mul	r4, r5
 14179                             		.loc 2 14915 16
 14180 008c 66 24                   		mov.L	#2, r4
 14181 008e FF 05 54                		sub	r5, r4, r5
 14182                             		.loc 2 14915 11
 14183 0091 ED A4 02                		mov.L	8[r10], r4
 14184 0094 4F 45                   		mul	r4, r5
 14185 0096 E7 A5 02                		mov.L	r5, 8[r10]
14916:../src/wolfcrypt/src/sp_int.c ****     #if SP_WORD_SIZE >= 64
14917:../src/wolfcrypt/src/sp_int.c ****         x *= 2 - b * x;               /* here x*a==1 mod 2**64 */
14918:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_WORD_SIZE >= 64 */
14919:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_WORD_SIZE >= 32 */
14920:../src/wolfcrypt/src/sp_int.c ****     #endif /* SP_WORD_SIZE >= 16 */
14921:../src/wolfcrypt/src/sp_int.c **** 
14922:../src/wolfcrypt/src/sp_int.c ****         /* rho = -1/m mod b, subtract x (unsigned) from 0, assign negative */
14923:../src/wolfcrypt/src/sp_int.c ****         *rho = (sp_int_digit)((sp_int_digit)0 - (sp_sint_digit)x);
 14186                             		.loc 2 14923 16
 14187 0099 ED A5 02                		mov.L	8[r10], r5
 14188 009c FC 07 54                		neg	r5, r4
 14189                             		.loc 2 14923 14
 14190 009f ED A5 04                		mov.L	16[r10], r5
 14191 00a2 E3 54                   		mov.L	r4, [r5]
 14192                             	.L895:
 14193                             	.LBE82:
14924:../src/wolfcrypt/src/sp_int.c ****     }
14925:../src/wolfcrypt/src/sp_int.c **** 
14926:../src/wolfcrypt/src/sp_int.c ****     return err;
 14194                             		.loc 2 14926 12
 14195 00a4 EC A5                   		mov.L	[r10], r5
14927:../src/wolfcrypt/src/sp_int.c **** }
 14196                             		.loc 2 14927 1
 14197 00a6 EF 51                   		mov.L	r5, r1
 14198 00a8 3F AA 06                		rtsd	#24, r10-r10
 14199                             	.LFE117:
 14201                             		.section	.text.sp_mont_norm,"ax",@progbits
 14202                             		.global	_sp_mont_norm
 14204                             	_sp_mont_norm:
 14205                             	.LFB118:
14928:../src/wolfcrypt/src/sp_int.c **** 
14929:../src/wolfcrypt/src/sp_int.c **** /* Calculate the normalization value of m.
14930:../src/wolfcrypt/src/sp_int.c ****  *   norm = 2^k - m, where k is the number of bits in m
14931:../src/wolfcrypt/src/sp_int.c ****  *
14932:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  norm   SP integer that normalises numbers into Montgomery
14933:../src/wolfcrypt/src/sp_int.c ****  *                       form.
14934:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   m      SP integer that is the modulus.
14935:../src/wolfcrypt/src/sp_int.c ****  *
14936:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
14937:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when norm or m is NULL, or number of bits in m is maximual.
14938:../src/wolfcrypt/src/sp_int.c ****  */
14939:../src/wolfcrypt/src/sp_int.c **** int sp_mont_norm(sp_int* norm, sp_int* m)
14940:../src/wolfcrypt/src/sp_int.c **** {
 14206                             		.loc 2 14940 1
 14207 0000 7E AA                   		push.l	r10
 14208                             	.LCFI162:
 14209 0002 71 0A EC                		add	#-20, r0, r10
 14210                             	.LCFI163:
 14211 0005 EF A0                   		mov.L	r10, r0
 14212 0007 E7 A1 03                		mov.L	r1, 12[r10]
 14213 000a E7 A2 04                		mov.L	r2, 16[r10]
14941:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 14214                             		.loc 2 14941 9
 14215 000d F8 A6 00                		mov.L	#0, [r10]
14942:../src/wolfcrypt/src/sp_int.c ****     int bits = 0;
 14216                             		.loc 2 14942 9
 14217 0010 F9 A6 01 00             		mov.L	#0, 4[r10]
14943:../src/wolfcrypt/src/sp_int.c **** 
14944:../src/wolfcrypt/src/sp_int.c ****     if ((norm == NULL) || (m == NULL)) {
 14218                             		.loc 2 14944 8
 14219 0014 ED A5 03                		mov.L	12[r10], r5
 14220 0017 61 05                   		cmp	#0, r5
 14221 0019 17                      		beq	.L898
 14222                             		.loc 2 14944 24 discriminator 1
 14223 001a ED A5 04                		mov.L	16[r10], r5
 14224 001d 61 05                   		cmp	#0, r5
 14225 001f 1C                      		bne	.L899
 14226                             	.L898:
14945:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 14227                             		.loc 2 14945 13
 14228 0020 F8 A6 FD                		mov.L	#-3, [r10]
 14229                             	.L899:
14946:../src/wolfcrypt/src/sp_int.c ****     }
14947:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 14230                             		.loc 2 14947 8
 14231 0023 EC A5                   		mov.L	[r10], r5
 14232 0025 61 05                   		cmp	#0, r5
 14233 0027 21 1C                   		bne	.L900
14948:../src/wolfcrypt/src/sp_int.c ****         bits = sp_count_bits(m);
 14234                             		.loc 2 14948 16
 14235 0029 ED A1 04                		mov.L	16[r10], r1
 14236 002c 05 00 00 00             		bsr	_sp_count_bits
 14237 0030 E7 A1 01                		mov.L	r1, 4[r10]
14949:../src/wolfcrypt/src/sp_int.c ****         if (bits == m->size * SP_WORD_SIZE) {
 14238                             		.loc 2 14949 22
 14239 0033 ED A5 04                		mov.L	16[r10], r5
 14240 0036 A8 5D                   		mov.L	4[r5], r5
 14241                             		.loc 2 14949 29
 14242 0038 6C 55                   		shll	#5, r5
 14243                             		.loc 2 14949 12
 14244 003a ED A4 01                		mov.L	4[r10], r4
 14245 003d 47 54                   		cmp	r5, r4
 14246 003f 1C                      		bne	.L900
14950:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
 14247                             		.loc 2 14950 17
 14248 0040 F8 A6 FD                		mov.L	#-3, [r10]
 14249                             	.L900:
14951:../src/wolfcrypt/src/sp_int.c ****         }
14952:../src/wolfcrypt/src/sp_int.c ****     }
14953:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 14250                             		.loc 2 14953 8
 14251 0043 EC A5                   		mov.L	[r10], r5
 14252 0045 61 05                   		cmp	#0, r5
 14253 0047 21 2E                   		bne	.L901
14954:../src/wolfcrypt/src/sp_int.c ****         if (bits < SP_WORD_SIZE) {
 14254                             		.loc 2 14954 12
 14255 0049 ED A5 01                		mov.L	4[r10], r5
 14256 004c 75 55 1F                		cmp	#31, r5
 14257 004f 2A 06                   		bgt	.L902
14955:../src/wolfcrypt/src/sp_int.c ****             bits = SP_WORD_SIZE;
 14258                             		.loc 2 14955 18
 14259 0051 F9 A6 01 20             		mov.L	#32, 4[r10]
 14260                             	.L902:
14956:../src/wolfcrypt/src/sp_int.c ****         }
14957:../src/wolfcrypt/src/sp_int.c ****         _sp_zero(norm);
 14261                             		.loc 2 14957 9
 14262 0055 ED A1 03                		mov.L	12[r10], r1
 14263 0058 05 00 00 00             		bsr	__sp_zero
14958:../src/wolfcrypt/src/sp_int.c ****         sp_set_bit(norm, bits);
 14264                             		.loc 2 14958 9
 14265 005c ED A2 01                		mov.L	4[r10], r2
 14266 005f ED A1 03                		mov.L	12[r10], r1
 14267 0062 05 00 00 00             		bsr	_sp_set_bit
14959:../src/wolfcrypt/src/sp_int.c ****         err = sp_sub(norm, m, norm);
 14268                             		.loc 2 14959 15
 14269 0066 ED A3 03                		mov.L	12[r10], r3
 14270 0069 ED A2 04                		mov.L	16[r10], r2
 14271 006c ED A1 03                		mov.L	12[r10], r1
 14272 006f 05 00 00 00             		bsr	_sp_sub
 14273 0073 E3 A1                   		mov.L	r1, [r10]
 14274                             	.L901:
14960:../src/wolfcrypt/src/sp_int.c ****     }
14961:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (bits == SP_WORD_SIZE)) {
 14275                             		.loc 2 14961 8
 14276 0075 EC A5                   		mov.L	[r10], r5
 14277 0077 61 05                   		cmp	#0, r5
 14278 0079 21 23                   		bne	.L903
 14279                             		.loc 2 14961 26 discriminator 1
 14280 007b ED A5 01                		mov.L	4[r10], r5
 14281 007e 75 55 20                		cmp	#32, r5
 14282 0081 21 1B                   		bne	.L903
14962:../src/wolfcrypt/src/sp_int.c ****         norm->dp[0] %= m->dp[0];
 14283                             		.loc 2 14962 21
 14284 0083 ED A5 03                		mov.L	12[r10], r5
 14285 0086 A8 D5                   		mov.L	8[r5], r5
 14286                             		.loc 2 14962 29
 14287 0088 ED A4 04                		mov.L	16[r10], r4
 14288 008b A8 C4                   		mov.L	8[r4], r4
 14289                             		.loc 2 14962 21
 14290 008d EF 53                   		mov.L	r5, r3
 14291 008f FC 27 43                		divu	r4, r3
 14292 0092 4F 34                   		mul	r3, r4
 14293 0094 FF 04 45                		sub	r4, r5, r4
 14294 0097 ED A5 03                		mov.L	12[r10], r5
 14295 009a A0 D4                   		mov.L	r4, 8[r5]
 14296                             	.L903:
14963:../src/wolfcrypt/src/sp_int.c ****     }
14964:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 14297                             		.loc 2 14964 8
 14298 009c EC A5                   		mov.L	[r10], r5
 14299 009e 61 05                   		cmp	#0, r5
 14300 00a0 21 36                   		bne	.L904
 14301                             	.LBB83:
14965:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(norm);
 14302                             		.loc 2 14965 9
 14303 00a2 ED A5 03                		mov.L	12[r10], r5
 14304 00a5 EC 55                   		mov.L	[r5], r5
 14305 00a7 60 15                   		sub	#1, r5
 14306 00a9 E7 A5 02                		mov.L	r5, 8[r10]
 14307 00ac 09                      		bra	.L905
 14308                             	.L907:
 14309                             		.loc 2 14965 9 is_stmt 0 discriminator 5
 14310 00ad ED A5 02                		mov.L	8[r10], r5
 14311 00b0 60 15                   		sub	#1, r5
 14312 00b2 E7 A5 02                		mov.L	r5, 8[r10]
 14313                             	.L905:
 14314                             		.loc 2 14965 9 discriminator 1
 14315 00b5 ED A5 02                		mov.L	8[r10], r5
 14316 00b8 61 05                   		cmp	#0, r5
 14317 00ba 29 11                   		blt	.L906
 14318                             		.loc 2 14965 9 discriminator 3
 14319 00bc ED A4 03                		mov.L	12[r10], r4
 14320 00bf ED A5 02                		mov.L	8[r10], r5
 14321 00c2 62 25                   		add	#2, r5
 14322 00c4 FE 65 45                		mov.L	[r5,r4], r5
 14323 00c7 61 05                   		cmp	#0, r5
 14324 00c9 20 E4                   		beq	.L907
 14325                             	.L906:
 14326                             		.loc 2 14965 9 discriminator 6
 14327 00cb ED A5 02                		mov.L	8[r10], r5
 14328 00ce 71 54 01                		add	#1, r5, r4
 14329 00d1 ED A5 03                		mov.L	12[r10], r5
 14330 00d4 E3 54                   		mov.L	r4, [r5]
 14331                             	.L904:
 14332                             	.LBE83:
14966:../src/wolfcrypt/src/sp_int.c ****     }
14967:../src/wolfcrypt/src/sp_int.c **** 
14968:../src/wolfcrypt/src/sp_int.c ****     return err;
 14333                             		.loc 2 14968 12 is_stmt 1
 14334 00d6 EC A5                   		mov.L	[r10], r5
14969:../src/wolfcrypt/src/sp_int.c **** }
 14335                             		.loc 2 14969 1
 14336 00d8 EF 51                   		mov.L	r5, r1
 14337 00da 3F AA 06                		rtsd	#24, r10-r10
 14338                             	.LFE118:
 14340                             		.section	.text.sp_unsigned_bin_size,"ax",@progbits
 14341                             		.global	_sp_unsigned_bin_size
 14343                             	_sp_unsigned_bin_size:
 14344                             	.LFB119:
14970:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_HAVE_SP_DH ||
14971:../src/wolfcrypt/src/sp_int.c ****         * WOLFCRYPT_HAVE_ECCSI || WOLFCRYPT_HAVE_SAKKE */
14972:../src/wolfcrypt/src/sp_int.c **** 
14973:../src/wolfcrypt/src/sp_int.c **** /*********************************
14974:../src/wolfcrypt/src/sp_int.c ****  * To and from binary and strings.
14975:../src/wolfcrypt/src/sp_int.c ****  *********************************/
14976:../src/wolfcrypt/src/sp_int.c **** 
14977:../src/wolfcrypt/src/sp_int.c **** /* Calculate the number of 8-bit values required to represent the
14978:../src/wolfcrypt/src/sp_int.c ****  * multi-precision number.
14979:../src/wolfcrypt/src/sp_int.c ****  *
14980:../src/wolfcrypt/src/sp_int.c ****  * When a is NULL, return s 0.
14981:../src/wolfcrypt/src/sp_int.c ****  *
14982:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]  a  SP integer.
14983:../src/wolfcrypt/src/sp_int.c ****  *
14984:../src/wolfcrypt/src/sp_int.c ****  * @return  The count of 8-bit values.
14985:../src/wolfcrypt/src/sp_int.c ****  */
14986:../src/wolfcrypt/src/sp_int.c **** int sp_unsigned_bin_size(const sp_int* a)
14987:../src/wolfcrypt/src/sp_int.c **** {
 14345                             		.loc 2 14987 1
 14346 0000 7E AA                   		push.l	r10
 14347                             	.LCFI164:
 14348 0002 71 0A F8                		add	#-8, r0, r10
 14349                             	.LCFI165:
 14350 0005 EF A0                   		mov.L	r10, r0
 14351 0007 E7 A1 01                		mov.L	r1, 4[r10]
14988:../src/wolfcrypt/src/sp_int.c ****     int cnt = 0;
 14352                             		.loc 2 14988 9
 14353 000a F8 A6 00                		mov.L	#0, [r10]
14989:../src/wolfcrypt/src/sp_int.c **** 
14990:../src/wolfcrypt/src/sp_int.c ****     if (a != NULL) {
 14354                             		.loc 2 14990 8
 14355 000d ED A5 01                		mov.L	4[r10], r5
 14356 0010 61 05                   		cmp	#0, r5
 14357 0012 20 17                   		beq	.L910
14991:../src/wolfcrypt/src/sp_int.c ****         cnt = (sp_count_bits(a) + 7) / 8;
 14358                             		.loc 2 14991 16
 14359 0014 ED A1 01                		mov.L	4[r10], r1
 14360 0017 05 00 00 00             		bsr	_sp_count_bits
 14361 001b EF 15                   		mov.L	r1, r5
 14362                             		.loc 2 14991 33
 14363 001d 62 75                   		add	#7, r5
 14364                             		.loc 2 14991 13
 14365 001f 61 05                   		cmp	#0, r5
 14366 0021 28 04                   		bge	.L911
 14367 0023 62 75                   		add	#7, r5
 14368                             	.L911:
 14369 0025 6A 35                   		shar	#3, r5
 14370 0027 E3 A5                   		mov.L	r5, [r10]
 14371                             	.L910:
14992:../src/wolfcrypt/src/sp_int.c ****     }
14993:../src/wolfcrypt/src/sp_int.c **** 
14994:../src/wolfcrypt/src/sp_int.c ****     return cnt;
 14372                             		.loc 2 14994 12
 14373 0029 EC A5                   		mov.L	[r10], r5
14995:../src/wolfcrypt/src/sp_int.c **** }
 14374                             		.loc 2 14995 1
 14375 002b EF 51                   		mov.L	r5, r1
 14376 002d 3F AA 03                		rtsd	#12, r10-r10
 14377                             	.LFE119:
 14379                             		.section	.text.sp_read_unsigned_bin,"ax",@progbits
 14380                             		.global	_sp_read_unsigned_bin
 14382                             	_sp_read_unsigned_bin:
 14383                             	.LFB120:
14996:../src/wolfcrypt/src/sp_int.c **** 
14997:../src/wolfcrypt/src/sp_int.c **** /* Convert a number as an array of bytes in big-endian format to a
14998:../src/wolfcrypt/src/sp_int.c ****  * multi-precision number.
14999:../src/wolfcrypt/src/sp_int.c ****  *
15000:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  a     SP integer.
15001:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   in    Array of bytes.
15002:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   inSz  Number of data bytes in array.
15003:../src/wolfcrypt/src/sp_int.c ****  *
15004:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15005:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when the number is too big to fit in an SP.
15006:../src/wolfcrypt/src/sp_int.c ****  */
15007:../src/wolfcrypt/src/sp_int.c **** int sp_read_unsigned_bin(sp_int* a, const byte* in, word32 inSz)
15008:../src/wolfcrypt/src/sp_int.c **** {
 14384                             		.loc 2 15008 1
 14385 0000 6E 7A                   		pushm	r7-r10
 14386                             	.LCFI166:
 14387 0002 71 0A E0                		add	#-32, r0, r10
 14388                             	.LCFI167:
 14389 0005 EF A0                   		mov.L	r10, r0
 14390 0007 E7 A1 05                		mov.L	r1, 20[r10]
 14391 000a E7 A2 06                		mov.L	r2, 24[r10]
 14392 000d E7 A3 07                		mov.L	r3, 28[r10]
15009:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 14393                             		.loc 2 15009 9
 14394 0010 F8 A6 00                		mov.L	#0, [r10]
15010:../src/wolfcrypt/src/sp_int.c **** 
15011:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || ((in == NULL) && (inSz > 0))) {
 14395                             		.loc 2 15011 8
 14396 0013 ED A5 05                		mov.L	20[r10], r5
 14397 0016 61 05                   		cmp	#0, r5
 14398 0018 20 0E                   		beq	.L914
 14399                             		.loc 2 15011 21 discriminator 1
 14400 001a ED A5 06                		mov.L	24[r10], r5
 14401 001d 61 05                   		cmp	#0, r5
 14402 001f 1A                      		bne	.L915
 14403                             		.loc 2 15011 38 discriminator 2
 14404 0020 ED A5 07                		mov.L	28[r10], r5
 14405 0023 61 05                   		cmp	#0, r5
 14406 0025 14                      		beq	.L915
 14407                             	.L914:
15012:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 14408                             		.loc 2 15012 13
 14409 0026 F8 A6 FD                		mov.L	#-3, [r10]
 14410                             	.L915:
15013:../src/wolfcrypt/src/sp_int.c ****     }
15014:../src/wolfcrypt/src/sp_int.c **** 
15015:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (inSz > (word32)a->size * SP_WORD_SIZEOF)) {
 14411                             		.loc 2 15015 8
 14412 0029 EC A5                   		mov.L	[r10], r5
 14413 002b 61 05                   		cmp	#0, r5
 14414 002d 21 13                   		bne	.L916
 14415                             		.loc 2 15015 46 discriminator 1
 14416 002f ED A5 05                		mov.L	20[r10], r5
 14417 0032 A8 5D                   		mov.L	4[r5], r5
 14418                             		.loc 2 15015 53 discriminator 1
 14419 0034 6C 25                   		shll	#2, r5
 14420                             		.loc 2 15015 26 discriminator 1
 14421 0036 ED A4 07                		mov.L	28[r10], r4
 14422 0039 47 54                   		cmp	r5, r4
 14423 003b 25 05                   		bleu	.L916
15016:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 14424                             		.loc 2 15016 13
 14425 003d F8 A6 FD                		mov.L	#-3, [r10]
 14426                             	.L916:
15017:../src/wolfcrypt/src/sp_int.c ****     }
15018:../src/wolfcrypt/src/sp_int.c **** 
15019:../src/wolfcrypt/src/sp_int.c **** #ifndef LITTLE_ENDIAN_ORDER
15020:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
15021:../src/wolfcrypt/src/sp_int.c ****         int i;
15022:../src/wolfcrypt/src/sp_int.c ****         int j;
15023:../src/wolfcrypt/src/sp_int.c ****         int s;
15024:../src/wolfcrypt/src/sp_int.c **** 
15025:../src/wolfcrypt/src/sp_int.c ****         a->used = (inSz + SP_WORD_SIZEOF - 1) / SP_WORD_SIZEOF;
15026:../src/wolfcrypt/src/sp_int.c **** 
15027:../src/wolfcrypt/src/sp_int.c ****     #ifndef WOLFSSL_SP_INT_DIGIT_ALIGN
15028:../src/wolfcrypt/src/sp_int.c ****         for (i = inSz-1,j = 0; i > SP_WORD_SIZEOF-1; i -= SP_WORD_SIZEOF,j++) {
15029:../src/wolfcrypt/src/sp_int.c ****             a->dp[j] = *(sp_int_digit*)(in + i - (SP_WORD_SIZEOF - 1));
15030:../src/wolfcrypt/src/sp_int.c ****         }
15031:../src/wolfcrypt/src/sp_int.c ****     #else
15032:../src/wolfcrypt/src/sp_int.c ****         for (i = inSz-1, j = 0; i >= SP_WORD_SIZEOF - 1; i -= SP_WORD_SIZEOF) {
15033:../src/wolfcrypt/src/sp_int.c ****             a->dp[j]  = ((sp_int_digit)in[i - 0] <<  0);
15034:../src/wolfcrypt/src/sp_int.c ****         #if SP_WORD_SIZE >= 16
15035:../src/wolfcrypt/src/sp_int.c ****             a->dp[j] |= ((sp_int_digit)in[i - 1] <<  8);
15036:../src/wolfcrypt/src/sp_int.c ****         #endif
15037:../src/wolfcrypt/src/sp_int.c ****         #if SP_WORD_SIZE >= 32
15038:../src/wolfcrypt/src/sp_int.c ****             a->dp[j] |= ((sp_int_digit)in[i - 2] << 16) |
15039:../src/wolfcrypt/src/sp_int.c ****                         ((sp_int_digit)in[i - 3] << 24);
15040:../src/wolfcrypt/src/sp_int.c ****         #endif
15041:../src/wolfcrypt/src/sp_int.c ****         #if SP_WORD_SIZE >= 64
15042:../src/wolfcrypt/src/sp_int.c ****             a->dp[j] |= ((sp_int_digit)in[i - 4] << 32) |
15043:../src/wolfcrypt/src/sp_int.c ****                         ((sp_int_digit)in[i - 5] << 40) |
15044:../src/wolfcrypt/src/sp_int.c ****                         ((sp_int_digit)in[i - 6] << 48) |
15045:../src/wolfcrypt/src/sp_int.c ****                         ((sp_int_digit)in[i - 7] << 56);
15046:../src/wolfcrypt/src/sp_int.c ****         #endif
15047:../src/wolfcrypt/src/sp_int.c ****             j++;
15048:../src/wolfcrypt/src/sp_int.c ****         }
15049:../src/wolfcrypt/src/sp_int.c ****     #endif
15050:../src/wolfcrypt/src/sp_int.c ****         if (i >= 0) {
15051:../src/wolfcrypt/src/sp_int.c ****             a->dp[a->used - 1] = 0;
15052:../src/wolfcrypt/src/sp_int.c ****             for (s = 0; i >= 0; i--,s += 8) {
15053:../src/wolfcrypt/src/sp_int.c ****                 a->dp[j] |= ((sp_int_digit)in[i]) << s;
15054:../src/wolfcrypt/src/sp_int.c ****             }
15055:../src/wolfcrypt/src/sp_int.c ****         }
15056:../src/wolfcrypt/src/sp_int.c **** 
15057:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(a);
15058:../src/wolfcrypt/src/sp_int.c ****     }
15059:../src/wolfcrypt/src/sp_int.c **** #else
15060:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 14427                             		.loc 2 15060 8
 14428 0040 EC A5                   		mov.L	[r10], r5
 14429 0042 61 05                   		cmp	#0, r5
 14430 0044 3B C0 01                		bne	.L917
 14431                             	.LBB84:
15061:../src/wolfcrypt/src/sp_int.c ****         int i;
15062:../src/wolfcrypt/src/sp_int.c ****         int j;
15063:../src/wolfcrypt/src/sp_int.c **** 
15064:../src/wolfcrypt/src/sp_int.c ****         a->used = (inSz + SP_WORD_SIZEOF - 1) / SP_WORD_SIZEOF;
 14432                             		.loc 2 15064 42
 14433 0047 ED A5 07                		mov.L	28[r10], r5
 14434 004a 62 35                   		add	#3, r5
 14435                             		.loc 2 15064 47
 14436 004c 68 25                   		shlr	#2, r5
 14437 004e EF 54                   		mov.L	r5, r4
 14438                             		.loc 2 15064 17
 14439 0050 ED A5 05                		mov.L	20[r10], r5
 14440 0053 E3 54                   		mov.L	r4, [r5]
15065:../src/wolfcrypt/src/sp_int.c **** 
15066:../src/wolfcrypt/src/sp_int.c ****         for (i = inSz-1, j = 0; i >= SP_WORD_SIZEOF - 1; i -= SP_WORD_SIZEOF) {
 14441                             		.loc 2 15066 22
 14442 0055 ED A5 07                		mov.L	28[r10], r5
 14443 0058 60 15                   		sub	#1, r5
 14444                             		.loc 2 15066 16
 14445 005a E7 A5 01                		mov.L	r5, 4[r10]
 14446                             		.loc 2 15066 28
 14447 005d F9 A6 02 00             		mov.L	#0, 8[r10]
 14448                             		.loc 2 15066 9
 14449 0061 38 8E 00                		bra	.L918
 14450                             	.L919:
15067:../src/wolfcrypt/src/sp_int.c ****             a->dp[j]  = ((sp_int_digit)in[i - 0] <<  0);
 14451                             		.loc 2 15067 42 discriminator 3
 14452 0064 ED A5 01                		mov.L	4[r10], r5
 14453 0067 ED A4 06                		mov.L	24[r10], r4
 14454 006a 4B 45                   		add	r4, r5
 14455 006c CC 55                   		mov.B	[r5], r5
 14456                             		.loc 2 15067 50 discriminator 3
 14457 006e 5B 53                   		movu.B	r5, r3
 14458                             		.loc 2 15067 23 discriminator 3
 14459 0070 ED A4 05                		mov.L	20[r10], r4
 14460 0073 ED A5 02                		mov.L	8[r10], r5
 14461 0076 62 25                   		add	#2, r5
 14462 0078 FE 25 43                		mov.L	r3, [r5,r4]
15068:../src/wolfcrypt/src/sp_int.c ****         #if SP_WORD_SIZE >= 16
15069:../src/wolfcrypt/src/sp_int.c ****             a->dp[j] |= ((sp_int_digit)in[i - 1] <<  8);
 14463                             		.loc 2 15069 22 discriminator 3
 14464 007b ED A4 05                		mov.L	20[r10], r4
 14465 007e ED A5 02                		mov.L	8[r10], r5
 14466 0081 62 25                   		add	#2, r5
 14467 0083 FE 65 44                		mov.L	[r5,r4], r4
 14468                             		.loc 2 15069 42 discriminator 3
 14469 0086 ED A5 01                		mov.L	4[r10], r5
 14470 0089 60 15                   		sub	#1, r5
 14471 008b ED A3 06                		mov.L	24[r10], r3
 14472 008e 4B 35                   		add	r3, r5
 14473 0090 CC 55                   		mov.B	[r5], r5
 14474                             		.loc 2 15069 26 discriminator 3
 14475 0092 5B 55                   		movu.B	r5, r5
 14476                             		.loc 2 15069 50 discriminator 3
 14477 0094 6C 85                   		shll	#8, r5
 14478                             		.loc 2 15069 22 discriminator 3
 14479 0096 FF 53 54                		or	r5, r4, r3
 14480 0099 ED A4 05                		mov.L	20[r10], r4
 14481 009c ED A5 02                		mov.L	8[r10], r5
 14482 009f 62 25                   		add	#2, r5
 14483 00a1 FE 25 43                		mov.L	r3, [r5,r4]
15070:../src/wolfcrypt/src/sp_int.c ****         #endif
15071:../src/wolfcrypt/src/sp_int.c ****         #if SP_WORD_SIZE >= 32
15072:../src/wolfcrypt/src/sp_int.c ****             a->dp[j] |= ((sp_int_digit)in[i - 2] << 16) |
 14484                             		.loc 2 15072 22 discriminator 3
 14485 00a4 ED A4 05                		mov.L	20[r10], r4
 14486 00a7 ED A5 02                		mov.L	8[r10], r5
 14487 00aa 62 25                   		add	#2, r5
 14488 00ac FE 65 43                		mov.L	[r5,r4], r3
 14489                             		.loc 2 15072 42 discriminator 3
 14490 00af ED A5 01                		mov.L	4[r10], r5
 14491 00b2 60 25                   		sub	#2, r5
 14492 00b4 ED A4 06                		mov.L	24[r10], r4
 14493 00b7 4B 45                   		add	r4, r5
 14494 00b9 CC 55                   		mov.B	[r5], r5
 14495                             		.loc 2 15072 26 discriminator 3
 14496 00bb 5B 55                   		movu.B	r5, r5
 14497                             		.loc 2 15072 50 discriminator 3
 14498 00bd FD D0 54                		shll	#16, r5, r4
15073:../src/wolfcrypt/src/sp_int.c ****                         ((sp_int_digit)in[i - 3] << 24);
 14499                             		.loc 2 15073 42 discriminator 3
 14500 00c0 ED A5 01                		mov.L	4[r10], r5
 14501 00c3 60 35                   		sub	#3, r5
 14502 00c5 ED A2 06                		mov.L	24[r10], r2
 14503 00c8 4B 25                   		add	r2, r5
 14504 00ca CC 55                   		mov.B	[r5], r5
 14505                             		.loc 2 15073 26 discriminator 3
 14506 00cc 5B 55                   		movu.B	r5, r5
 14507                             		.loc 2 15073 50 discriminator 3
 14508 00ce 6D 85                   		shll	#24, r5
15072:../src/wolfcrypt/src/sp_int.c ****                         ((sp_int_digit)in[i - 3] << 24);
 14509                             		.loc 2 15072 57 discriminator 3
 14510 00d0 57 45                   		or	r4, r5
15072:../src/wolfcrypt/src/sp_int.c ****                         ((sp_int_digit)in[i - 3] << 24);
 14511                             		.loc 2 15072 22 discriminator 3
 14512 00d2 57 53                   		or	r5, r3
 14513 00d4 ED A4 05                		mov.L	20[r10], r4
 14514 00d7 ED A5 02                		mov.L	8[r10], r5
 14515 00da 62 25                   		add	#2, r5
 14516 00dc FE 25 43                		mov.L	r3, [r5,r4]
15074:../src/wolfcrypt/src/sp_int.c ****         #endif
15075:../src/wolfcrypt/src/sp_int.c ****         #if SP_WORD_SIZE >= 64
15076:../src/wolfcrypt/src/sp_int.c ****             a->dp[j] |= ((sp_int_digit)in[i - 4] << 32) |
15077:../src/wolfcrypt/src/sp_int.c ****                         ((sp_int_digit)in[i - 5] << 40) |
15078:../src/wolfcrypt/src/sp_int.c ****                         ((sp_int_digit)in[i - 6] << 48) |
15079:../src/wolfcrypt/src/sp_int.c ****                         ((sp_int_digit)in[i - 7] << 56);
15080:../src/wolfcrypt/src/sp_int.c ****         #endif
15081:../src/wolfcrypt/src/sp_int.c ****             j++;
 14517                             		.loc 2 15081 14 discriminator 3
 14518 00df ED A5 02                		mov.L	8[r10], r5
 14519 00e2 62 15                   		add	#1, r5
 14520 00e4 E7 A5 02                		mov.L	r5, 8[r10]
15066:../src/wolfcrypt/src/sp_int.c ****             a->dp[j]  = ((sp_int_digit)in[i - 0] <<  0);
 14521                             		.loc 2 15066 60 discriminator 3
 14522 00e7 ED A5 01                		mov.L	4[r10], r5
 14523 00ea 60 45                   		sub	#4, r5
 14524 00ec E7 A5 01                		mov.L	r5, 4[r10]
 14525                             	.L918:
15066:../src/wolfcrypt/src/sp_int.c ****             a->dp[j]  = ((sp_int_digit)in[i - 0] <<  0);
 14526                             		.loc 2 15066 9 discriminator 1
 14527 00ef ED A5 01                		mov.L	4[r10], r5
 14528 00f2 61 25                   		cmp	#2, r5
 14529 00f4 2B 05 38 6E FF          		bgt	.L919
15082:../src/wolfcrypt/src/sp_int.c ****         }
15083:../src/wolfcrypt/src/sp_int.c **** 
15084:../src/wolfcrypt/src/sp_int.c ****     #if SP_WORD_SIZE >= 16
15085:../src/wolfcrypt/src/sp_int.c ****         if (i >= 0) {
 14530                             		.loc 2 15085 12
 14531 00f9 ED A5 01                		mov.L	4[r10], r5
 14532 00fc 61 05                   		cmp	#0, r5
 14533 00fe 28 05 38 D0 00          		blt	.L920
 14534                             	.LBB85:
15086:../src/wolfcrypt/src/sp_int.c ****             byte *d = (byte*)a->dp;
 14535                             		.loc 2 15086 19
 14536 0103 ED A5 05                		mov.L	20[r10], r5
 14537 0106 62 85                   		add	#8, r5
 14538 0108 E7 A5 04                		mov.L	r5, 16[r10]
15087:../src/wolfcrypt/src/sp_int.c **** 
15088:../src/wolfcrypt/src/sp_int.c ****             a->dp[a->used - 1] = 0;
 14539                             		.loc 2 15088 20
 14540 010b ED A5 05                		mov.L	20[r10], r5
 14541 010e EC 55                   		mov.L	[r5], r5
 14542                             		.loc 2 15088 27
 14543 0110 60 15                   		sub	#1, r5
 14544                             		.loc 2 15088 32
 14545 0112 ED A4 05                		mov.L	20[r10], r4
 14546 0115 62 25                   		add	#2, r5
 14547 0117 66 07                   		mov.L	#0, r7
 14548 0119 FE 25 47                		mov.L	r7, [r5,r4]
15089:../src/wolfcrypt/src/sp_int.c ****             switch (i) {
 14549                             		.loc 2 15089 13
 14550 011c ED A5 01                		mov.L	4[r10], r5
 14551 011f 61 35                   		cmp	#3, r5
 14552 0121 20 6A                   		beq	.L921
 14553 0123 ED A5 01                		mov.L	4[r10], r5
 14554 0126 61 35                   		cmp	#3, r5
 14555 0128 2A 1B                   		bgt	.L922
 14556 012a ED A5 01                		mov.L	4[r10], r5
 14557 012d 61 15                   		cmp	#1, r5
 14558 012f 20 7E                   		beq	.L923
 14559 0131 ED A5 01                		mov.L	4[r10], r5
 14560 0134 61 15                   		cmp	#1, r5
 14561 0136 2A 66                   		bgt	.L924
 14562 0138 ED A5 01                		mov.L	4[r10], r5
 14563 013b 61 05                   		cmp	#0, r5
 14564 013d 3A 81 00                		beq	.L925
 14565 0140 38 90 00                		bra	.L920
 14566                             	.L922:
 14567 0143 ED A5 01                		mov.L	4[r10], r5
 14568 0146 61 55                   		cmp	#5, r5
 14569 0148 20 21                   		beq	.L926
 14570 014a ED A5 01                		mov.L	4[r10], r5
 14571 014d 61 55                   		cmp	#5, r5
 14572 014f 29 2B                   		blt	.L927
 14573 0151 ED A5 01                		mov.L	4[r10], r5
 14574 0154 61 65                   		cmp	#6, r5
 14575 0156 21 7A                   		bne	.L920
15090:../src/wolfcrypt/src/sp_int.c ****                 case 6: d[inSz - 1 - 6] = in[6]; FALL_THROUGH;
 14576                             		.loc 2 15090 26
 14577 0158 ED A5 07                		mov.L	28[r10], r5
 14578 015b 60 75                   		sub	#7, r5
 14579 015d ED A4 04                		mov.L	16[r10], r4
 14580 0160 4B 45                   		add	r4, r5
 14581                             		.loc 2 15090 41
 14582 0162 ED A4 06                		mov.L	24[r10], r4
 14583 0165 89 C4                   		mov.B	6[r4], r4
 14584 0167 C3 54                   		mov.B	r4, [r5]
 14585                             	.L926:
15091:../src/wolfcrypt/src/sp_int.c ****                 case 5: d[inSz - 1 - 5] = in[5]; FALL_THROUGH;
 14586                             		.loc 2 15091 26
 14587 0169 ED A5 07                		mov.L	28[r10], r5
 14588 016c 60 65                   		sub	#6, r5
 14589 016e ED A4 04                		mov.L	16[r10], r4
 14590 0171 4B 45                   		add	r4, r5
 14591                             		.loc 2 15091 41
 14592 0173 ED A4 06                		mov.L	24[r10], r4
 14593 0176 89 4C                   		mov.B	5[r4], r4
 14594 0178 C3 54                   		mov.B	r4, [r5]
 14595                             	.L927:
15092:../src/wolfcrypt/src/sp_int.c ****                 case 4: d[inSz - 1 - 4] = in[4]; FALL_THROUGH;
 14596                             		.loc 2 15092 26
 14597 017a ED A5 07                		mov.L	28[r10], r5
 14598 017d 60 55                   		sub	#5, r5
 14599 017f ED A4 04                		mov.L	16[r10], r4
 14600 0182 4B 45                   		add	r4, r5
 14601                             		.loc 2 15092 41
 14602 0184 ED A4 06                		mov.L	24[r10], r4
 14603 0187 89 44                   		mov.B	4[r4], r4
 14604 0189 C3 54                   		mov.B	r4, [r5]
 14605                             	.L921:
15093:../src/wolfcrypt/src/sp_int.c ****                 case 3: d[inSz - 1 - 3] = in[3]; FALL_THROUGH;
 14606                             		.loc 2 15093 26
 14607 018b ED A5 07                		mov.L	28[r10], r5
 14608 018e 60 45                   		sub	#4, r5
 14609 0190 ED A4 04                		mov.L	16[r10], r4
 14610 0193 4B 45                   		add	r4, r5
 14611                             		.loc 2 15093 41
 14612 0195 ED A4 06                		mov.L	24[r10], r4
 14613 0198 88 CC                   		mov.B	3[r4], r4
 14614 019a C3 54                   		mov.B	r4, [r5]
 14615                             	.L924:
15094:../src/wolfcrypt/src/sp_int.c ****                 case 2: d[inSz - 1 - 2] = in[2]; FALL_THROUGH;
 14616                             		.loc 2 15094 26
 14617 019c ED A5 07                		mov.L	28[r10], r5
 14618 019f 60 35                   		sub	#3, r5
 14619 01a1 ED A4 04                		mov.L	16[r10], r4
 14620 01a4 4B 45                   		add	r4, r5
 14621                             		.loc 2 15094 41
 14622 01a6 ED A4 06                		mov.L	24[r10], r4
 14623 01a9 88 C4                   		mov.B	2[r4], r4
 14624 01ab C3 54                   		mov.B	r4, [r5]
 14625                             	.L923:
15095:../src/wolfcrypt/src/sp_int.c ****                 case 1: d[inSz - 1 - 1] = in[1]; FALL_THROUGH;
 14626                             		.loc 2 15095 26
 14627 01ad ED A5 07                		mov.L	28[r10], r5
 14628 01b0 60 25                   		sub	#2, r5
 14629 01b2 ED A4 04                		mov.L	16[r10], r4
 14630 01b5 4B 45                   		add	r4, r5
 14631                             		.loc 2 15095 41
 14632 01b7 ED A4 06                		mov.L	24[r10], r4
 14633 01ba 88 4C                   		mov.B	1[r4], r4
 14634 01bc C3 54                   		mov.B	r4, [r5]
 14635                             	.L925:
15096:../src/wolfcrypt/src/sp_int.c ****                 case 0: d[inSz - 1 - 0] = in[0];
 14636                             		.loc 2 15096 32
 14637 01be ED A5 07                		mov.L	28[r10], r5
 14638 01c1 60 15                   		sub	#1, r5
 14639                             		.loc 2 15096 26
 14640 01c3 ED A4 04                		mov.L	16[r10], r4
 14641 01c6 4B 45                   		add	r4, r5
 14642                             		.loc 2 15096 45
 14643 01c8 ED A4 06                		mov.L	24[r10], r4
 14644 01cb CC 44                   		mov.B	[r4], r4
 14645                             		.loc 2 15096 41
 14646 01cd C3 54                   		mov.B	r4, [r5]
 14647 01cf 03                      		.balign 8,3,1
 14648                             	.L920:
 14649                             	.LBE85:
 14650                             	.LBB86:
15097:../src/wolfcrypt/src/sp_int.c ****             }
15098:../src/wolfcrypt/src/sp_int.c ****         }
15099:../src/wolfcrypt/src/sp_int.c ****     #endif
15100:../src/wolfcrypt/src/sp_int.c **** 
15101:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(a);
 14651                             		.loc 2 15101 9
 14652 01d0 ED A5 05                		mov.L	20[r10], r5
 14653 01d3 EC 55                   		mov.L	[r5], r5
 14654 01d5 60 15                   		sub	#1, r5
 14655 01d7 E7 A5 03                		mov.L	r5, 12[r10]
 14656 01da 09                      		bra	.L928
 14657                             	.L930:
 14658                             		.loc 2 15101 9 is_stmt 0 discriminator 5
 14659 01db ED A5 03                		mov.L	12[r10], r5
 14660 01de 60 15                   		sub	#1, r5
 14661 01e0 E7 A5 03                		mov.L	r5, 12[r10]
 14662                             	.L928:
 14663                             		.loc 2 15101 9 discriminator 1
 14664 01e3 ED A5 03                		mov.L	12[r10], r5
 14665 01e6 61 05                   		cmp	#0, r5
 14666 01e8 29 11                   		blt	.L929
 14667                             		.loc 2 15101 9 discriminator 3
 14668 01ea ED A4 05                		mov.L	20[r10], r4
 14669 01ed ED A5 03                		mov.L	12[r10], r5
 14670 01f0 62 25                   		add	#2, r5
 14671 01f2 FE 65 45                		mov.L	[r5,r4], r5
 14672 01f5 61 05                   		cmp	#0, r5
 14673 01f7 20 E4                   		beq	.L930
 14674                             	.L929:
 14675                             		.loc 2 15101 9 discriminator 6
 14676 01f9 ED A5 03                		mov.L	12[r10], r5
 14677 01fc 71 54 01                		add	#1, r5, r4
 14678 01ff ED A5 05                		mov.L	20[r10], r5
 14679 0202 E3 54                   		mov.L	r4, [r5]
 14680                             	.L917:
 14681                             	.LBE86:
 14682                             	.LBE84:
15102:../src/wolfcrypt/src/sp_int.c ****     }
15103:../src/wolfcrypt/src/sp_int.c **** #endif /* LITTLE_ENDIAN_ORDER */
15104:../src/wolfcrypt/src/sp_int.c **** 
15105:../src/wolfcrypt/src/sp_int.c ****     return err;
 14683                             		.loc 2 15105 12 is_stmt 1
 14684 0204 EC A5                   		mov.L	[r10], r5
15106:../src/wolfcrypt/src/sp_int.c **** }
 14685                             		.loc 2 15106 1
 14686 0206 EF 51                   		mov.L	r5, r1
 14687 0208 3F 7A 0C                		rtsd	#48, r7-r10
 14688                             	.LFE120:
 14690 020b 77 10 01 00 00          		.section	.text.sp_to_unsigned_bin,"ax",@progbits
 14691                             		.global	_sp_to_unsigned_bin
 14693                             	_sp_to_unsigned_bin:
 14694                             	.LFB121:
15107:../src/wolfcrypt/src/sp_int.c **** 
15108:../src/wolfcrypt/src/sp_int.c **** /* Convert the multi-precision number to an array of bytes in big-endian format.
15109:../src/wolfcrypt/src/sp_int.c ****  *
15110:../src/wolfcrypt/src/sp_int.c ****  * The array must be large enough for encoded number - use mp_unsigned_bin_size
15111:../src/wolfcrypt/src/sp_int.c ****  * to calculate the number of bytes required.
15112:../src/wolfcrypt/src/sp_int.c ****  *
15113:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer.
15114:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  out  Array to put encoding into.
15115:../src/wolfcrypt/src/sp_int.c ****  *
15116:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15117:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or out is NULL.
15118:../src/wolfcrypt/src/sp_int.c ****  */
15119:../src/wolfcrypt/src/sp_int.c **** int sp_to_unsigned_bin(sp_int* a, byte* out)
15120:../src/wolfcrypt/src/sp_int.c **** {
 14695                             		.loc 2 15120 1
 14696 0000 7E AA                   		push.l	r10
 14697                             	.LCFI168:
 14698 0002 71 0A F8                		add	#-8, r0, r10
 14699                             	.LCFI169:
 14700 0005 EF A0                   		mov.L	r10, r0
 14701 0007 E3 A1                   		mov.L	r1, [r10]
 14702 0009 E7 A2 01                		mov.L	r2, 4[r10]
15121:../src/wolfcrypt/src/sp_int.c ****     return sp_to_unsigned_bin_len(a, out, sp_unsigned_bin_size(a));
 14703                             		.loc 2 15121 12
 14704 000c EC A1                   		mov.L	[r10], r1
 14705 000e 05 00 00 00             		bsr	_sp_unsigned_bin_size
 14706 0012 EF 15                   		mov.L	r1, r5
 14707 0014 EF 53                   		mov.L	r5, r3
 14708 0016 ED A2 01                		mov.L	4[r10], r2
 14709 0019 EC A1                   		mov.L	[r10], r1
 14710 001b 05 00 00 00             		bsr	_sp_to_unsigned_bin_len
 14711 001f EF 15                   		mov.L	r1, r5
15122:../src/wolfcrypt/src/sp_int.c **** }
 14712                             		.loc 2 15122 1
 14713 0021 EF 51                   		mov.L	r5, r1
 14714 0023 3F AA 03                		rtsd	#12, r10-r10
 14715                             	.LFE121:
 14717                             		.section	.text.sp_to_unsigned_bin_len,"ax",@progbits
 14718                             		.global	_sp_to_unsigned_bin_len
 14720                             	_sp_to_unsigned_bin_len:
 14721                             	.LFB122:
15123:../src/wolfcrypt/src/sp_int.c **** 
15124:../src/wolfcrypt/src/sp_int.c **** /* Convert the multi-precision number to an array of bytes in big-endian format.
15125:../src/wolfcrypt/src/sp_int.c ****  *
15126:../src/wolfcrypt/src/sp_int.c ****  * The array must be large enough for encoded number - use mp_unsigned_bin_size
15127:../src/wolfcrypt/src/sp_int.c ****  * to calculate the number of bytes required.
15128:../src/wolfcrypt/src/sp_int.c ****  * Front-pads the output array with zeros make number the size of the array.
15129:../src/wolfcrypt/src/sp_int.c ****  *
15130:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a      SP integer.
15131:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  out    Array to put encoding into.
15132:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   outSz  Size of the array in bytes.
15133:../src/wolfcrypt/src/sp_int.c ****  *
15134:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15135:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or out is NULL.
15136:../src/wolfcrypt/src/sp_int.c ****  */
15137:../src/wolfcrypt/src/sp_int.c **** int sp_to_unsigned_bin_len(sp_int* a, byte* out, int outSz)
15138:../src/wolfcrypt/src/sp_int.c **** {
 14722                             		.loc 2 15138 1
 14723 0000 7E AA                   		push.l	r10
 14724                             	.LCFI170:
 14725 0002 71 0A E4                		add	#-28, r0, r10
 14726                             	.LCFI171:
 14727 0005 EF A0                   		mov.L	r10, r0
 14728 0007 E7 A1 04                		mov.L	r1, 16[r10]
 14729 000a E7 A2 05                		mov.L	r2, 20[r10]
 14730 000d E7 A3 06                		mov.L	r3, 24[r10]
15139:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 14731                             		.loc 2 15139 9
 14732 0010 F8 A6 00                		mov.L	#0, [r10]
15140:../src/wolfcrypt/src/sp_int.c **** 
15141:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (out == NULL)) {
 14733                             		.loc 2 15141 8
 14734 0013 ED A5 04                		mov.L	16[r10], r5
 14735 0016 61 05                   		cmp	#0, r5
 14736 0018 17                      		beq	.L935
 14737                             		.loc 2 15141 21 discriminator 1
 14738 0019 ED A5 05                		mov.L	20[r10], r5
 14739 001c 61 05                   		cmp	#0, r5
 14740 001e 1C                      		bne	.L936
 14741                             	.L935:
15142:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 14742                             		.loc 2 15142 13
 14743 001f F8 A6 FD                		mov.L	#-3, [r10]
 14744                             	.L936:
15143:../src/wolfcrypt/src/sp_int.c ****     }
15144:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 14745                             		.loc 2 15144 8
 14746 0022 EC A5                   		mov.L	[r10], r5
 14747 0024 61 05                   		cmp	#0, r5
 14748 0026 3B 96 00                		bne	.L937
 14749                             	.LBB87:
15145:../src/wolfcrypt/src/sp_int.c ****         int j = outSz - 1;
 14750                             		.loc 2 15145 13
 14751 0029 ED A5 06                		mov.L	24[r10], r5
 14752 002c 60 15                   		sub	#1, r5
 14753 002e E7 A5 01                		mov.L	r5, 4[r10]
15146:../src/wolfcrypt/src/sp_int.c **** 
15147:../src/wolfcrypt/src/sp_int.c ****         if (!sp_iszero(a)) {
 14754                             		.loc 2 15147 14
 14755 0031 ED A5 04                		mov.L	16[r10], r5
 14756 0034 EC 55                   		mov.L	[r5], r5
 14757                             		.loc 2 15147 12
 14758 0036 61 05                   		cmp	#0, r5
 14759 0038 20 7D                   		beq	.L945
 14760                             	.LBB88:
15148:../src/wolfcrypt/src/sp_int.c ****             int i;
15149:../src/wolfcrypt/src/sp_int.c ****             for (i = 0; (j >= 0) && (i < a->used); i++) {
 14761                             		.loc 2 15149 20
 14762 003a F9 A6 02 00             		mov.L	#0, 8[r10]
 14763                             		.loc 2 15149 13
 14764 003e 2E 4F                   		bra	.L939
 14765                             	.L944:
 14766                             	.LBB89:
15150:../src/wolfcrypt/src/sp_int.c ****                 int b;
15151:../src/wolfcrypt/src/sp_int.c ****                 for (b = 0; b < SP_WORD_SIZE; b += 8) {
 14767                             		.loc 2 15151 24
 14768 0040 F9 A6 03 00             		mov.L	#0, 12[r10]
 14769                             		.loc 2 15151 17
 14770 0044 2E 36                   		bra	.L940
 14771                             	.L943:
15152:../src/wolfcrypt/src/sp_int.c ****                     out[j--] = (byte)(a->dp[i] >> b);
 14772                             		.loc 2 15152 44
 14773 0046 ED A4 04                		mov.L	16[r10], r4
 14774 0049 ED A5 02                		mov.L	8[r10], r5
 14775 004c 62 25                   		add	#2, r5
 14776 004e FE 65 44                		mov.L	[r5,r4], r4
 14777                             		.loc 2 15152 48
 14778 0051 ED A5 03                		mov.L	12[r10], r5
 14779 0054 EF 43                   		mov.L	r4, r3
 14780 0056 FD 60 53                		shlr	r5, r3
 14781                             		.loc 2 15152 26
 14782 0059 ED A5 01                		mov.L	4[r10], r5
 14783 005c 71 54 FF                		add	#-1, r5, r4
 14784 005f E7 A4 01                		mov.L	r4, 4[r10]
 14785                             		.loc 2 15152 24
 14786 0062 ED A4 05                		mov.L	20[r10], r4
 14787 0065 4B 45                   		add	r4, r5
 14788                             		.loc 2 15152 32
 14789 0067 CF 34                   		mov.B	r3, r4
 14790                             		.loc 2 15152 30
 14791 0069 C3 54                   		mov.B	r4, [r5]
15153:../src/wolfcrypt/src/sp_int.c ****                     if (j < 0) {
 14792                             		.loc 2 15153 24
 14793 006b ED A5 01                		mov.L	4[r10], r5
 14794 006e 61 05                   		cmp	#0, r5
 14795 0070 29 14                   		blt	.L948
15151:../src/wolfcrypt/src/sp_int.c ****                     out[j--] = (byte)(a->dp[i] >> b);
 14796                             		.loc 2 15151 49 discriminator 2
 14797 0072 ED A5 03                		mov.L	12[r10], r5
 14798 0075 62 85                   		add	#8, r5
 14799 0077 E7 A5 03                		mov.L	r5, 12[r10]
 14800                             	.L940:
15151:../src/wolfcrypt/src/sp_int.c ****                     out[j--] = (byte)(a->dp[i] >> b);
 14801                             		.loc 2 15151 17 discriminator 1
 14802 007a ED A5 03                		mov.L	12[r10], r5
 14803 007d 75 55 1F                		cmp	#31, r5
 14804 0080 2B C6                   		ble	.L943
 14805 0082 2E 03                   		bra	.L942
 14806                             	.L948:
15154:../src/wolfcrypt/src/sp_int.c ****                         break;
 14807                             		.loc 2 15154 25
 14808 0084 03                      		nop
 14809                             	.L942:
 14810                             	.LBE89:
15149:../src/wolfcrypt/src/sp_int.c ****                 int b;
 14811                             		.loc 2 15149 53 discriminator 2
 14812 0085 ED A5 02                		mov.L	8[r10], r5
 14813 0088 62 15                   		add	#1, r5
 14814 008a E7 A5 02                		mov.L	r5, 8[r10]
 14815                             	.L939:
15149:../src/wolfcrypt/src/sp_int.c ****                 int b;
 14816                             		.loc 2 15149 13 discriminator 1
 14817 008d ED A5 01                		mov.L	4[r10], r5
 14818 0090 61 05                   		cmp	#0, r5
 14819 0092 29 23                   		blt	.L945
15149:../src/wolfcrypt/src/sp_int.c ****                 int b;
 14820                             		.loc 2 15149 43 discriminator 3
 14821 0094 ED A5 04                		mov.L	16[r10], r5
 14822 0097 EC 55                   		mov.L	[r5], r5
15149:../src/wolfcrypt/src/sp_int.c ****                 int b;
 14823                             		.loc 2 15149 34 discriminator 3
 14824 0099 ED A4 02                		mov.L	8[r10], r4
 14825 009c 47 54                   		cmp	r5, r4
 14826 009e 29 A2                   		blt	.L944
 14827                             	.LBE88:
15155:../src/wolfcrypt/src/sp_int.c ****                     }
15156:../src/wolfcrypt/src/sp_int.c ****                 }
15157:../src/wolfcrypt/src/sp_int.c ****             }
15158:../src/wolfcrypt/src/sp_int.c ****         }
15159:../src/wolfcrypt/src/sp_int.c ****         for (; j >= 0; j--) {
 14828                             		.loc 2 15159 9
 14829 00a0 2E 15                   		bra	.L945
 14830                             	.L946:
15160:../src/wolfcrypt/src/sp_int.c ****             out[j] = 0;
 14831                             		.loc 2 15160 16 discriminator 2
 14832 00a2 ED A5 01                		mov.L	4[r10], r5
 14833 00a5 ED A4 05                		mov.L	20[r10], r4
 14834 00a8 4B 45                   		add	r4, r5
 14835                             		.loc 2 15160 20 discriminator 2
 14836 00aa F8 54 00                		mov.B	#0, [r5]
15159:../src/wolfcrypt/src/sp_int.c ****             out[j] = 0;
 14837                             		.loc 2 15159 25 discriminator 2
 14838 00ad ED A5 01                		mov.L	4[r10], r5
 14839 00b0 60 15                   		sub	#1, r5
 14840 00b2 E7 A5 01                		mov.L	r5, 4[r10]
 14841                             		.balign 8,3,1
 14842                             	.L945:
15159:../src/wolfcrypt/src/sp_int.c ****             out[j] = 0;
 14843                             		.loc 2 15159 9 discriminator 1
 14844 00b5 ED A5 01                		mov.L	4[r10], r5
 14845 00b8 61 05                   		cmp	#0, r5
 14846 00ba 28 E8                   		bge	.L946
 14847                             	.L937:
 14848                             	.LBE87:
15161:../src/wolfcrypt/src/sp_int.c ****         }
15162:../src/wolfcrypt/src/sp_int.c ****     }
15163:../src/wolfcrypt/src/sp_int.c **** 
15164:../src/wolfcrypt/src/sp_int.c ****     return err;
 14849                             		.loc 2 15164 12
 14850 00bc EC A5                   		mov.L	[r10], r5
15165:../src/wolfcrypt/src/sp_int.c **** }
 14851                             		.loc 2 15165 1
 14852 00be EF 51                   		mov.L	r5, r1
 14853 00c0 3F AA 08                		rtsd	#32, r10-r10
 14854                             	.LFE122:
 14856 00c3 77 10 01 00 00          		.section	.text.sp_to_unsigned_bin_at_pos,"ax",@progbits
 14857                             		.global	_sp_to_unsigned_bin_at_pos
 14859                             	_sp_to_unsigned_bin_at_pos:
 14860                             	.LFB123:
15166:../src/wolfcrypt/src/sp_int.c **** 
15167:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) && !defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY)
15168:../src/wolfcrypt/src/sp_int.c **** /* Store the number in big-endian format in array at an offset.
15169:../src/wolfcrypt/src/sp_int.c ****  * The array must be large enough for encoded number - use mp_unsigned_bin_size
15170:../src/wolfcrypt/src/sp_int.c ****  * to calculate the number of bytes required.
15171:../src/wolfcrypt/src/sp_int.c ****  *
15172:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   o    Offset into array o start encoding.
15173:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer.
15174:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  out  Array to put encoding into.
15175:../src/wolfcrypt/src/sp_int.c ****  *
15176:../src/wolfcrypt/src/sp_int.c ****  * @return  Index of next byte after data.
15177:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or out is NULL.
15178:../src/wolfcrypt/src/sp_int.c ****  */
15179:../src/wolfcrypt/src/sp_int.c **** int sp_to_unsigned_bin_at_pos(int o, sp_int*a, unsigned char* out)
15180:../src/wolfcrypt/src/sp_int.c **** {
 14861                             		.loc 2 15180 1
 14862 0000 7E AA                   		push.l	r10
 14863                             	.LCFI172:
 14864 0002 71 0A F0                		add	#-16, r0, r10
 14865                             	.LCFI173:
 14866 0005 EF A0                   		mov.L	r10, r0
 14867 0007 E7 A1 01                		mov.L	r1, 4[r10]
 14868 000a E7 A2 02                		mov.L	r2, 8[r10]
 14869 000d E7 A3 03                		mov.L	r3, 12[r10]
15181:../src/wolfcrypt/src/sp_int.c ****     int ret = sp_to_unsigned_bin(a, out + o);
 14870                             		.loc 2 15181 15
 14871 0010 ED A5 01                		mov.L	4[r10], r5
 14872                             		.loc 2 15181 41
 14873 0013 ED A4 03                		mov.L	12[r10], r4
 14874 0016 4B 45                   		add	r4, r5
 14875                             		.loc 2 15181 15
 14876 0018 EF 52                   		mov.L	r5, r2
 14877 001a ED A1 02                		mov.L	8[r10], r1
 14878 001d 05 00 00 00             		bsr	_sp_to_unsigned_bin
 14879 0021 E3 A1                   		mov.L	r1, [r10]
15182:../src/wolfcrypt/src/sp_int.c **** 
15183:../src/wolfcrypt/src/sp_int.c ****     if (ret == MP_OKAY) {
 14880                             		.loc 2 15183 8
 14881 0023 EC A5                   		mov.L	[r10], r5
 14882 0025 61 05                   		cmp	#0, r5
 14883 0027 21 12                   		bne	.L950
15184:../src/wolfcrypt/src/sp_int.c ****         ret = o + sp_unsigned_bin_size(a);
 14884                             		.loc 2 15184 19
 14885 0029 ED A1 02                		mov.L	8[r10], r1
 14886 002c 05 00 00 00             		bsr	_sp_unsigned_bin_size
 14887 0030 EF 15                   		mov.L	r1, r5
 14888                             		.loc 2 15184 13
 14889 0032 ED A4 01                		mov.L	4[r10], r4
 14890 0035 4B 45                   		add	r4, r5
 14891 0037 E3 A5                   		mov.L	r5, [r10]
 14892                             	.L950:
15185:../src/wolfcrypt/src/sp_int.c ****     }
15186:../src/wolfcrypt/src/sp_int.c **** 
15187:../src/wolfcrypt/src/sp_int.c ****     return ret;
 14893                             		.loc 2 15187 12
 14894 0039 EC A5                   		mov.L	[r10], r5
15188:../src/wolfcrypt/src/sp_int.c **** }
 14895                             		.loc 2 15188 1
 14896 003b EF 51                   		mov.L	r5, r1
 14897 003d 3F AA 05                		rtsd	#20, r10-r10
 14898                             	.LFE123:
 14900                             		.section	.text._sp_read_radix_16,"ax",@progbits
 14902                             	__sp_read_radix_16:
 14903                             	.LFB124:
15189:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL && !NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY */
15190:../src/wolfcrypt/src/sp_int.c **** 
15191:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(NO_RSA) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
15192:../src/wolfcrypt/src/sp_int.c ****     defined(HAVE_ECC) || !defined(NO_DSA)
15193:../src/wolfcrypt/src/sp_int.c **** /* Convert hexadecimal number as string in big-endian format to a
15194:../src/wolfcrypt/src/sp_int.c ****  * multi-precision number.
15195:../src/wolfcrypt/src/sp_int.c ****  *
15196:../src/wolfcrypt/src/sp_int.c ****  * Negative values supported when compiled with WOLFSSL_SP_INT_NEGATIVE.
15197:../src/wolfcrypt/src/sp_int.c ****  *
15198:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  a   SP integer.
15199:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   in  NUL terminated string.
15200:../src/wolfcrypt/src/sp_int.c ****  *
15201:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15202:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when radix not supported, value is negative, or a character
15203:../src/wolfcrypt/src/sp_int.c ****  *          is not valid.
15204:../src/wolfcrypt/src/sp_int.c ****  */
15205:../src/wolfcrypt/src/sp_int.c **** static int _sp_read_radix_16(sp_int* a, const char* in)
15206:../src/wolfcrypt/src/sp_int.c **** {
 14904                             		.loc 2 15206 1
 14905 0000 6E 7A                   		pushm	r7-r10
 14906                             	.LCFI174:
 14907 0002 71 0A E0                		add	#-32, r0, r10
 14908                             	.LCFI175:
 14909 0005 EF A0                   		mov.L	r10, r0
 14910 0007 E7 A1 06                		mov.L	r1, 24[r10]
 14911 000a E7 A2 07                		mov.L	r2, 28[r10]
15207:../src/wolfcrypt/src/sp_int.c ****     int  err = MP_OKAY;
 14912                             		.loc 2 15207 10
 14913 000d F8 A6 00                		mov.L	#0, [r10]
15208:../src/wolfcrypt/src/sp_int.c ****     int  i;
15209:../src/wolfcrypt/src/sp_int.c ****     int  s = 0;
 14914                             		.loc 2 15209 10
 14915 0010 F9 A6 02 00             		mov.L	#0, 8[r10]
15210:../src/wolfcrypt/src/sp_int.c ****     int  j = 0;
 14916                             		.loc 2 15210 10
 14917 0014 F9 A6 03 00             		mov.L	#0, 12[r10]
15211:../src/wolfcrypt/src/sp_int.c **** 
15212:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
15213:../src/wolfcrypt/src/sp_int.c ****     if (*in == '-') {
15214:../src/wolfcrypt/src/sp_int.c ****         a->sign = MP_NEG;
15215:../src/wolfcrypt/src/sp_int.c ****         in++;
15216:../src/wolfcrypt/src/sp_int.c ****     }
15217:../src/wolfcrypt/src/sp_int.c **** #endif
15218:../src/wolfcrypt/src/sp_int.c **** 
15219:../src/wolfcrypt/src/sp_int.c ****     while (*in == '0') {
 14918                             		.loc 2 15219 11
 14919 0018 09                      		bra	.L953
 14920                             	.L954:
15220:../src/wolfcrypt/src/sp_int.c ****         in++;
 14921                             		.loc 2 15220 11
 14922 0019 ED A5 07                		mov.L	28[r10], r5
 14923 001c 62 15                   		add	#1, r5
 14924 001e E7 A5 07                		mov.L	r5, 28[r10]
 14925                             	.L953:
15219:../src/wolfcrypt/src/sp_int.c ****         in++;
 14926                             		.loc 2 15219 12
 14927 0021 ED A5 07                		mov.L	28[r10], r5
 14928 0024 CC 55                   		mov.B	[r5], r5
15219:../src/wolfcrypt/src/sp_int.c ****         in++;
 14929                             		.loc 2 15219 11
 14930 0026 5B 55                   		movu.B	r5, r5
 14931 0028 75 55 30                		cmp	#48, r5
 14932 002b 20 EE                   		beq	.L954
15221:../src/wolfcrypt/src/sp_int.c ****     }
15222:../src/wolfcrypt/src/sp_int.c **** 
15223:../src/wolfcrypt/src/sp_int.c ****     a->dp[0] = 0;
 14933                             		.loc 2 15223 14
 14934 002d ED A5 06                		mov.L	24[r10], r5
 14935 0030 3E 52 00                		mov.L	#0, 8[r5]
15224:../src/wolfcrypt/src/sp_int.c ****     for (i = (int)(XSTRLEN(in) - 1); i >= 0; i--) {
 14936                             		.loc 2 15224 20
 14937 0033 ED A1 07                		mov.L	28[r10], r1
 14938 0036 05 00 00 00             		bsr	_strlen
 14939 003a EF 15                   		mov.L	r1, r5
 14940                             		.loc 2 15224 32
 14941 003c 60 15                   		sub	#1, r5
 14942                             		.loc 2 15224 12
 14943 003e E7 A5 01                		mov.L	r5, 4[r10]
 14944                             		.loc 2 15224 5
 14945 0041 38 8E 00                		bra	.L955
 14946                             	.L960:
 14947                             	.LBB90:
15225:../src/wolfcrypt/src/sp_int.c ****         int ch = (int)HexCharToByte(in[i]);
 14948                             		.loc 2 15225 39
 14949 0044 ED A5 01                		mov.L	4[r10], r5
 14950 0047 ED A4 07                		mov.L	28[r10], r4
 14951 004a 4B 45                   		add	r4, r5
 14952                             		.loc 2 15225 23
 14953 004c CC 55                   		mov.B	[r5], r5
 14954 004e CF 51                   		mov.B	r5, r1
 14955 0050 05 00 00 00             		bsr	_HexCharToByte
 14956 0054 EF 15                   		mov.L	r1, r5
 14957                             		.loc 2 15225 13
 14958 0056 CF 55                   		mov.B	r5, r5
 14959 0058 E7 A5 05                		mov.L	r5, 20[r10]
15226:../src/wolfcrypt/src/sp_int.c ****         if (ch < 0) {
 14960                             		.loc 2 15226 12
 14961 005b ED A5 05                		mov.L	20[r10], r5
 14962 005e 61 05                   		cmp	#0, r5
 14963 0060 28 07                   		bge	.L956
15227:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
 14964                             		.loc 2 15227 17
 14965 0062 F8 A6 FD                		mov.L	#-3, [r10]
15228:../src/wolfcrypt/src/sp_int.c ****             break;
 14966                             		.loc 2 15228 13
 14967 0065 2E 74                   		bra	.L957
 14968                             	.L956:
15229:../src/wolfcrypt/src/sp_int.c ****         }
15230:../src/wolfcrypt/src/sp_int.c **** 
15231:../src/wolfcrypt/src/sp_int.c ****         if (s == SP_WORD_SIZE) {
 14969                             		.loc 2 15231 12
 14970 0067 ED A5 02                		mov.L	8[r10], r5
 14971 006a 75 55 20                		cmp	#32, r5
 14972 006d 21 2C                   		bne	.L958
15232:../src/wolfcrypt/src/sp_int.c ****             j++;
 14973                             		.loc 2 15232 14
 14974 006f ED A5 03                		mov.L	12[r10], r5
 14975 0072 62 15                   		add	#1, r5
 14976 0074 E7 A5 03                		mov.L	r5, 12[r10]
15233:../src/wolfcrypt/src/sp_int.c ****             if (j >= a->size) {
 14977                             		.loc 2 15233 23
 14978 0077 ED A5 06                		mov.L	24[r10], r5
 14979 007a A8 5D                   		mov.L	4[r5], r5
 14980                             		.loc 2 15233 16
 14981 007c ED A4 03                		mov.L	12[r10], r4
 14982 007f 47 54                   		cmp	r5, r4
 14983 0081 29 07                   		blt	.L959
15234:../src/wolfcrypt/src/sp_int.c ****                 err = MP_VAL;
 14984                             		.loc 2 15234 21
 14985 0083 F8 A6 FD                		mov.L	#-3, [r10]
15235:../src/wolfcrypt/src/sp_int.c ****                 break;
 14986                             		.loc 2 15235 17
 14987 0086 2E 53                   		bra	.L957
 14988                             	.L959:
15236:../src/wolfcrypt/src/sp_int.c ****             }
15237:../src/wolfcrypt/src/sp_int.c ****             s = 0;
 14989                             		.loc 2 15237 15
 14990 0088 F9 A6 02 00             		mov.L	#0, 8[r10]
15238:../src/wolfcrypt/src/sp_int.c ****             a->dp[j] = 0;
 14991                             		.loc 2 15238 22
 14992 008c ED A4 06                		mov.L	24[r10], r4
 14993 008f ED A5 03                		mov.L	12[r10], r5
 14994 0092 62 25                   		add	#2, r5
 14995 0094 66 07                   		mov.L	#0, r7
 14996 0096 FE 25 47                		mov.L	r7, [r5,r4]
 14997                             	.L958:
15239:../src/wolfcrypt/src/sp_int.c ****         }
15240:../src/wolfcrypt/src/sp_int.c **** 
15241:../src/wolfcrypt/src/sp_int.c ****         a->dp[j] |= ((sp_int_digit)ch) << s;
 14998                             		.loc 2 15241 18 discriminator 2
 14999 0099 ED A4 06                		mov.L	24[r10], r4
 15000 009c ED A5 03                		mov.L	12[r10], r5
 15001 009f 62 25                   		add	#2, r5
 15002 00a1 FE 65 44                		mov.L	[r5,r4], r4
 15003                             		.loc 2 15241 22 discriminator 2
 15004 00a4 ED A3 05                		mov.L	20[r10], r3
 15005                             		.loc 2 15241 40 discriminator 2
 15006 00a7 ED A5 02                		mov.L	8[r10], r5
 15007 00aa EF 37                   		mov.L	r3, r7
 15008 00ac FD 62 57                		shll	r5, r7
 15009 00af EF 75                   		mov.L	r7, r5
 15010                             		.loc 2 15241 18 discriminator 2
 15011 00b1 FF 53 54                		or	r5, r4, r3
 15012 00b4 ED A4 06                		mov.L	24[r10], r4
 15013 00b7 ED A5 03                		mov.L	12[r10], r5
 15014 00ba 62 25                   		add	#2, r5
 15015 00bc FE 25 43                		mov.L	r3, [r5,r4]
15242:../src/wolfcrypt/src/sp_int.c ****         s += 4;
 15016                             		.loc 2 15242 11 discriminator 2
 15017 00bf ED A5 02                		mov.L	8[r10], r5
 15018 00c2 62 45                   		add	#4, r5
 15019 00c4 E7 A5 02                		mov.L	r5, 8[r10]
 15020                             	.LBE90:
15224:../src/wolfcrypt/src/sp_int.c ****         int ch = (int)HexCharToByte(in[i]);
 15021                             		.loc 2 15224 47 discriminator 2
 15022 00c7 ED A5 01                		mov.L	4[r10], r5
 15023 00ca 60 15                   		sub	#1, r5
 15024 00cc E7 A5 01                		mov.L	r5, 4[r10]
 15025                             	.L955:
15224:../src/wolfcrypt/src/sp_int.c ****         int ch = (int)HexCharToByte(in[i]);
 15026                             		.loc 2 15224 5 discriminator 1
 15027 00cf ED A5 01                		mov.L	4[r10], r5
 15028 00d2 61 05                   		cmp	#0, r5
 15029 00d4 29 05 38 6E FF          		bge	.L960
 15030                             	.L957:
15243:../src/wolfcrypt/src/sp_int.c ****     }
15244:../src/wolfcrypt/src/sp_int.c **** 
15245:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 15031                             		.loc 2 15245 8
 15032 00d9 EC A5                   		mov.L	[r10], r5
 15033 00db 61 05                   		cmp	#0, r5
 15034 00dd 21 41                   		bne	.L961
15246:../src/wolfcrypt/src/sp_int.c ****         a->used = j + 1;
 15035                             		.loc 2 15246 21
 15036 00df ED A5 03                		mov.L	12[r10], r5
 15037 00e2 71 54 01                		add	#1, r5, r4
 15038                             		.loc 2 15246 17
 15039 00e5 ED A5 06                		mov.L	24[r10], r5
 15040 00e8 E3 54                   		mov.L	r4, [r5]
 15041                             	.LBB91:
15247:../src/wolfcrypt/src/sp_int.c ****         sp_clamp(a);
 15042                             		.loc 2 15247 9
 15043 00ea ED A5 06                		mov.L	24[r10], r5
 15044 00ed EC 55                   		mov.L	[r5], r5
 15045 00ef 60 15                   		sub	#1, r5
 15046 00f1 E7 A5 04                		mov.L	r5, 16[r10]
 15047 00f4 09                      		bra	.L962
 15048                             	.L964:
 15049                             		.loc 2 15247 9 is_stmt 0 discriminator 5
 15050 00f5 ED A5 04                		mov.L	16[r10], r5
 15051 00f8 60 15                   		sub	#1, r5
 15052 00fa E7 A5 04                		mov.L	r5, 16[r10]
 15053                             	.L962:
 15054                             		.loc 2 15247 9 discriminator 1
 15055 00fd ED A5 04                		mov.L	16[r10], r5
 15056 0100 61 05                   		cmp	#0, r5
 15057 0102 29 11                   		blt	.L963
 15058                             		.loc 2 15247 9 discriminator 3
 15059 0104 ED A4 06                		mov.L	24[r10], r4
 15060 0107 ED A5 04                		mov.L	16[r10], r5
 15061 010a 62 25                   		add	#2, r5
 15062 010c FE 65 45                		mov.L	[r5,r4], r5
 15063 010f 61 05                   		cmp	#0, r5
 15064 0111 20 E4                   		beq	.L964
 15065                             	.L963:
 15066                             		.loc 2 15247 9 discriminator 6
 15067 0113 ED A5 04                		mov.L	16[r10], r5
 15068 0116 71 54 01                		add	#1, r5, r4
 15069 0119 ED A5 06                		mov.L	24[r10], r5
 15070 011c E3 54                   		mov.L	r4, [r5]
 15071                             	.L961:
 15072                             	.LBE91:
15248:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
15249:../src/wolfcrypt/src/sp_int.c ****         if (sp_iszero(a)) {
15250:../src/wolfcrypt/src/sp_int.c ****             a->sign = MP_ZPOS;
15251:../src/wolfcrypt/src/sp_int.c ****         }
15252:../src/wolfcrypt/src/sp_int.c ****     #endif
15253:../src/wolfcrypt/src/sp_int.c ****     }
15254:../src/wolfcrypt/src/sp_int.c ****     return err;
 15073                             		.loc 2 15254 12 is_stmt 1
 15074 011e EC A5                   		mov.L	[r10], r5
15255:../src/wolfcrypt/src/sp_int.c **** }
 15075                             		.loc 2 15255 1
 15076 0120 EF 51                   		mov.L	r5, r1
 15077 0122 3F 7A 0C                		rtsd	#48, r7-r10
 15078                             	.LFE124:
 15080                             		.section	.text._sp_read_radix_10,"ax",@progbits
 15082                             	__sp_read_radix_10:
 15083                             	.LFB125:
15256:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_MATH_ALL && !NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY) || HAVE_ECC */
15257:../src/wolfcrypt/src/sp_int.c **** 
15258:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_READ_RADIX_10
15259:../src/wolfcrypt/src/sp_int.c **** /* Convert decimal number as string in big-endian format to a multi-precision
15260:../src/wolfcrypt/src/sp_int.c ****  * number.
15261:../src/wolfcrypt/src/sp_int.c ****  *
15262:../src/wolfcrypt/src/sp_int.c ****  * Negative values supported when compiled with WOLFSSL_SP_INT_NEGATIVE.
15263:../src/wolfcrypt/src/sp_int.c ****  *
15264:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  a   SP integer.
15265:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   in  NUL terminated string.
15266:../src/wolfcrypt/src/sp_int.c ****  *
15267:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15268:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when radix not supported, value is negative, or a character
15269:../src/wolfcrypt/src/sp_int.c ****  *          is not valid.
15270:../src/wolfcrypt/src/sp_int.c ****  */
15271:../src/wolfcrypt/src/sp_int.c **** static int _sp_read_radix_10(sp_int* a, const char* in)
15272:../src/wolfcrypt/src/sp_int.c **** {
 15084                             		.loc 2 15272 1
 15085 0000 7E AA                   		push.l	r10
 15086                             	.LCFI176:
 15087 0002 71 0A E8                		add	#-24, r0, r10
 15088                             	.LCFI177:
 15089 0005 EF A0                   		mov.L	r10, r0
 15090 0007 E7 A1 04                		mov.L	r1, 16[r10]
 15091 000a E7 A2 05                		mov.L	r2, 20[r10]
15273:../src/wolfcrypt/src/sp_int.c ****     int  err = MP_OKAY;
 15092                             		.loc 2 15273 10
 15093 000d F8 A6 00                		mov.L	#0, [r10]
15274:../src/wolfcrypt/src/sp_int.c ****     int  i;
15275:../src/wolfcrypt/src/sp_int.c ****     int  len;
15276:../src/wolfcrypt/src/sp_int.c ****     char ch;
15277:../src/wolfcrypt/src/sp_int.c **** 
15278:../src/wolfcrypt/src/sp_int.c ****     _sp_zero(a);
 15094                             		.loc 2 15278 5
 15095 0010 ED A1 04                		mov.L	16[r10], r1
 15096 0013 05 00 00 00             		bsr	__sp_zero
15279:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
15280:../src/wolfcrypt/src/sp_int.c ****     if (*in == '-') {
15281:../src/wolfcrypt/src/sp_int.c ****         a->sign = MP_NEG;
15282:../src/wolfcrypt/src/sp_int.c ****         in++;
15283:../src/wolfcrypt/src/sp_int.c ****     }
15284:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_INT_NEGATIVE */
15285:../src/wolfcrypt/src/sp_int.c **** 
15286:../src/wolfcrypt/src/sp_int.c ****     while (*in == '0') {
 15097                             		.loc 2 15286 11
 15098 0017 09                      		bra	.L967
 15099                             	.L968:
15287:../src/wolfcrypt/src/sp_int.c ****         in++;
 15100                             		.loc 2 15287 11
 15101 0018 ED A5 05                		mov.L	20[r10], r5
 15102 001b 62 15                   		add	#1, r5
 15103 001d E7 A5 05                		mov.L	r5, 20[r10]
 15104                             	.L967:
15286:../src/wolfcrypt/src/sp_int.c ****         in++;
 15105                             		.loc 2 15286 12
 15106 0020 ED A5 05                		mov.L	20[r10], r5
 15107 0023 CC 55                   		mov.B	[r5], r5
15286:../src/wolfcrypt/src/sp_int.c ****         in++;
 15108                             		.loc 2 15286 11
 15109 0025 5B 55                   		movu.B	r5, r5
 15110 0027 75 55 30                		cmp	#48, r5
 15111 002a 20 EE                   		beq	.L968
15288:../src/wolfcrypt/src/sp_int.c ****     }
15289:../src/wolfcrypt/src/sp_int.c **** 
15290:../src/wolfcrypt/src/sp_int.c ****     len = (int)XSTRLEN(in);
 15112                             		.loc 2 15290 16
 15113 002c ED A1 05                		mov.L	20[r10], r1
 15114 002f 05 00 00 00             		bsr	_strlen
 15115 0033 EF 15                   		mov.L	r1, r5
 15116                             		.loc 2 15290 9
 15117 0035 E7 A5 02                		mov.L	r5, 8[r10]
15291:../src/wolfcrypt/src/sp_int.c ****     for (i = 0; i < len; i++) {
 15118                             		.loc 2 15291 12
 15119 0038 F9 A6 01 00             		mov.L	#0, 4[r10]
 15120                             		.loc 2 15291 5
 15121 003c 2E 63                   		bra	.L969
 15122                             	.L975:
15292:../src/wolfcrypt/src/sp_int.c ****         ch = in[i];
 15123                             		.loc 2 15292 16
 15124 003e ED A5 01                		mov.L	4[r10], r5
 15125 0041 ED A4 05                		mov.L	20[r10], r4
 15126 0044 4B 45                   		add	r4, r5
 15127                             		.loc 2 15292 12
 15128 0046 CC 55                   		mov.B	[r5], r5
 15129 0048 C7 A5 0C                		mov.B	r5, 12[r10]
15293:../src/wolfcrypt/src/sp_int.c ****         if ((ch >= '0') && (ch <= '9')) {
 15130                             		.loc 2 15293 12
 15131 004b 59 A5 0C                		movu.B	12[r10], r5
 15132 004e 75 55 2F                		cmp	#47, r5
 15133 0051 25 2A                   		bleu	.L970
 15134                             		.loc 2 15293 25 discriminator 1
 15135 0053 59 A5 0C                		movu.B	12[r10], r5
 15136 0056 75 55 39                		cmp	#57, r5
 15137 0059 24 22                   		bgtu	.L970
15294:../src/wolfcrypt/src/sp_int.c ****             ch -= '0';
 15138                             		.loc 2 15294 16
 15139 005b CD A5 0C                		mov.B	12[r10], r5
 15140 005e 71 55 D0                		add	#-48, r5
 15141 0061 C7 A5 0C                		mov.B	r5, 12[r10]
15295:../src/wolfcrypt/src/sp_int.c ****         }
15296:../src/wolfcrypt/src/sp_int.c ****         else {
15297:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
15298:../src/wolfcrypt/src/sp_int.c ****             break;
15299:../src/wolfcrypt/src/sp_int.c ****         }
15300:../src/wolfcrypt/src/sp_int.c ****         err = _sp_mul_d(a, 10, a, 0);
 15142                             		.loc 2 15300 15
 15143 0064 66 04                   		mov.L	#0, r4
 15144 0066 ED A3 04                		mov.L	16[r10], r3
 15145 0069 66 A2                   		mov.L	#10, r2
 15146 006b ED A1 04                		mov.L	16[r10], r1
 15147 006e 05 00 00 00             		bsr	__sp_mul_d
 15148 0072 E3 A1                   		mov.L	r1, [r10]
15301:../src/wolfcrypt/src/sp_int.c ****         if (err != MP_OKAY) {
 15149                             		.loc 2 15301 12
 15150 0074 EC A5                   		mov.L	[r10], r5
 15151 0076 61 05                   		cmp	#0, r5
 15152 0078 21 32                   		bne	.L978
 15153 007a 0E                      		bra	.L977
 15154                             	.L970:
15297:../src/wolfcrypt/src/sp_int.c ****             break;
 15155                             		.loc 2 15297 17
 15156 007b F8 A6 FD                		mov.L	#-3, [r10]
15298:../src/wolfcrypt/src/sp_int.c ****         }
 15157                             		.loc 2 15298 13
 15158 007e 2E 30                   		bra	.L973
 15159                             	.L977:
15302:../src/wolfcrypt/src/sp_int.c ****             break;
15303:../src/wolfcrypt/src/sp_int.c ****         }
15304:../src/wolfcrypt/src/sp_int.c ****         err = _sp_add_d(a, ch, a);
 15160                             		.loc 2 15304 15
 15161 0080 59 A5 0C                		movu.B	12[r10], r5
 15162 0083 ED A3 04                		mov.L	16[r10], r3
 15163 0086 EF 52                   		mov.L	r5, r2
 15164 0088 ED A1 04                		mov.L	16[r10], r1
 15165 008b 05 00 00 00             		bsr	__sp_add_d
 15166 008f E3 A1                   		mov.L	r1, [r10]
15305:../src/wolfcrypt/src/sp_int.c ****         if (err != MP_OKAY) {
 15167                             		.loc 2 15305 12
 15168 0091 EC A5                   		mov.L	[r10], r5
 15169 0093 61 05                   		cmp	#0, r5
 15170 0095 21 18                   		bne	.L979
15291:../src/wolfcrypt/src/sp_int.c ****         ch = in[i];
 15171                             		.loc 2 15291 27 discriminator 2
 15172 0097 ED A5 01                		mov.L	4[r10], r5
 15173 009a 62 15                   		add	#1, r5
 15174 009c E7 A5 01                		mov.L	r5, 4[r10]
 15175                             	.L969:
15291:../src/wolfcrypt/src/sp_int.c ****         ch = in[i];
 15176                             		.loc 2 15291 5 discriminator 1
 15177 009f ED A4 01                		mov.L	4[r10], r4
 15178 00a2 ED A5 02                		mov.L	8[r10], r5
 15179 00a5 47 54                   		cmp	r5, r4
 15180 00a7 29 97                   		blt	.L975
 15181 00a9 0D                      		bra	.L973
 15182                             	.L978:
15302:../src/wolfcrypt/src/sp_int.c ****             break;
 15183                             		.loc 2 15302 13
 15184 00aa 03                      		nop
 15185 00ab 2E 03                   		bra	.L973
 15186                             	.L979:
15306:../src/wolfcrypt/src/sp_int.c ****             break;
 15187                             		.loc 2 15306 13
 15188 00ad 03                      		nop
 15189                             		.balign 8,3,1
 15190                             	.L973:
15307:../src/wolfcrypt/src/sp_int.c ****         }
15308:../src/wolfcrypt/src/sp_int.c ****     }
15309:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
15310:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && sp_iszero(a)) {
15311:../src/wolfcrypt/src/sp_int.c ****         a->sign = MP_ZPOS;
15312:../src/wolfcrypt/src/sp_int.c ****     }
15313:../src/wolfcrypt/src/sp_int.c **** #endif
15314:../src/wolfcrypt/src/sp_int.c **** 
15315:../src/wolfcrypt/src/sp_int.c ****     return err;
 15191                             		.loc 2 15315 12
 15192 00ae EC A5                   		mov.L	[r10], r5
15316:../src/wolfcrypt/src/sp_int.c **** }
 15193                             		.loc 2 15316 1
 15194 00b0 EF 51                   		mov.L	r5, r1
 15195 00b2 3F AA 07                		rtsd	#28, r10-r10
 15196                             	.LFE125:
 15198 00b5 FC 13 00                		.section	.text.sp_read_radix,"ax",@progbits
 15199                             		.global	_sp_read_radix
 15201                             	_sp_read_radix:
 15202                             	.LFB126:
15317:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_READ_RADIX_10 */
15318:../src/wolfcrypt/src/sp_int.c **** 
15319:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(NO_RSA) && \
15320:../src/wolfcrypt/src/sp_int.c ****     !defined(WOLFSSL_RSA_VERIFY_ONLY)) || defined(HAVE_ECC) || !defined(NO_DSA)
15321:../src/wolfcrypt/src/sp_int.c **** /* Convert a number as string in big-endian format to a big number.
15322:../src/wolfcrypt/src/sp_int.c ****  * Only supports base-16 (hexadecimal) and base-10 (decimal).
15323:../src/wolfcrypt/src/sp_int.c ****  *
15324:../src/wolfcrypt/src/sp_int.c ****  * Negative values supported when WOLFSSL_SP_INT_NEGATIVE is defined.
15325:../src/wolfcrypt/src/sp_int.c ****  *
15326:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  a      SP integer.
15327:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   in     NUL terminated string.
15328:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   radix  Number of values in a digit.
15329:../src/wolfcrypt/src/sp_int.c ****  *
15330:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15331:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or in is NULL, radix not supported, value is negative,
15332:../src/wolfcrypt/src/sp_int.c ****  *          or a character is not valid.
15333:../src/wolfcrypt/src/sp_int.c ****  */
15334:../src/wolfcrypt/src/sp_int.c **** int sp_read_radix(sp_int* a, const char* in, int radix)
15335:../src/wolfcrypt/src/sp_int.c **** {
 15203                             		.loc 2 15335 1
 15204 0000 7E AA                   		push.l	r10
 15205                             	.LCFI178:
 15206 0002 71 0A F0                		add	#-16, r0, r10
 15207                             	.LCFI179:
 15208 0005 EF A0                   		mov.L	r10, r0
 15209 0007 E7 A1 01                		mov.L	r1, 4[r10]
 15210 000a E7 A2 02                		mov.L	r2, 8[r10]
 15211 000d E7 A3 03                		mov.L	r3, 12[r10]
15336:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 15212                             		.loc 2 15336 9
 15213 0010 F8 A6 00                		mov.L	#0, [r10]
15337:../src/wolfcrypt/src/sp_int.c **** 
15338:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (in == NULL)) {
 15214                             		.loc 2 15338 8
 15215 0013 ED A5 01                		mov.L	4[r10], r5
 15216 0016 61 05                   		cmp	#0, r5
 15217 0018 17                      		beq	.L981
 15218                             		.loc 2 15338 21 discriminator 1
 15219 0019 ED A5 02                		mov.L	8[r10], r5
 15220 001c 61 05                   		cmp	#0, r5
 15221 001e 1C                      		bne	.L982
 15222                             	.L981:
15339:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 15223                             		.loc 2 15339 13
 15224 001f F8 A6 FD                		mov.L	#-3, [r10]
 15225                             	.L982:
15340:../src/wolfcrypt/src/sp_int.c ****     }
15341:../src/wolfcrypt/src/sp_int.c **** 
15342:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 15226                             		.loc 2 15342 8
 15227 0022 EC A5                   		mov.L	[r10], r5
 15228 0024 61 05                   		cmp	#0, r5
 15229 0026 21 3F                   		bne	.L983
15343:../src/wolfcrypt/src/sp_int.c ****     #ifndef WOLFSSL_SP_INT_NEGATIVE
15344:../src/wolfcrypt/src/sp_int.c ****         if (*in == '-') {
 15230                             		.loc 2 15344 13
 15231 0028 ED A5 02                		mov.L	8[r10], r5
 15232 002b CC 55                   		mov.B	[r5], r5
 15233                             		.loc 2 15344 12
 15234 002d 5B 55                   		movu.B	r5, r5
 15235 002f 75 55 2D                		cmp	#45, r5
 15236 0032 1E                      		bne	.L984
15345:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
 15237                             		.loc 2 15345 17
 15238 0033 F8 A6 FD                		mov.L	#-3, [r10]
 15239 0036 2E 2F                   		bra	.L983
 15240                             	.L984:
15346:../src/wolfcrypt/src/sp_int.c ****         }
15347:../src/wolfcrypt/src/sp_int.c ****         else
15348:../src/wolfcrypt/src/sp_int.c ****     #endif
15349:../src/wolfcrypt/src/sp_int.c ****         if (radix == 16) {
 15241                             		.loc 2 15349 12
 15242 0038 ED A5 03                		mov.L	12[r10], r5
 15243 003b 75 55 10                		cmp	#16, r5
 15244 003e 21 10                   		bne	.L985
15350:../src/wolfcrypt/src/sp_int.c ****             err = _sp_read_radix_16(a, in);
 15245                             		.loc 2 15350 19
 15246 0040 ED A2 02                		mov.L	8[r10], r2
 15247 0043 ED A1 01                		mov.L	4[r10], r1
 15248 0046 05 00 00 00             		bsr	__sp_read_radix_16
 15249 004a E3 A1                   		mov.L	r1, [r10]
 15250 004c 2E 19                   		bra	.L983
 15251                             	.L985:
15351:../src/wolfcrypt/src/sp_int.c ****         }
15352:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_READ_RADIX_10
15353:../src/wolfcrypt/src/sp_int.c ****         else if (radix == 10) {
 15252                             		.loc 2 15353 17
 15253 004e ED A5 03                		mov.L	12[r10], r5
 15254 0051 61 A5                   		cmp	#10, r5
 15255 0053 21 0F                   		bne	.L986
15354:../src/wolfcrypt/src/sp_int.c ****             err = _sp_read_radix_10(a, in);
 15256                             		.loc 2 15354 19
 15257 0055 ED A2 02                		mov.L	8[r10], r2
 15258 0058 ED A1 01                		mov.L	4[r10], r1
 15259 005b 05 00 00 00             		bsr	__sp_read_radix_10
 15260 005f E3 A1                   		mov.L	r1, [r10]
 15261 0061 0C                      		bra	.L983
 15262                             	.L986:
15355:../src/wolfcrypt/src/sp_int.c ****         }
15356:../src/wolfcrypt/src/sp_int.c ****     #endif
15357:../src/wolfcrypt/src/sp_int.c ****         else {
15358:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
 15263                             		.loc 2 15358 17
 15264 0062 F8 A6 FD                		mov.L	#-3, [r10]
 15265                             		.balign 8,3,1
 15266                             	.L983:
15359:../src/wolfcrypt/src/sp_int.c ****         }
15360:../src/wolfcrypt/src/sp_int.c ****     }
15361:../src/wolfcrypt/src/sp_int.c **** 
15362:../src/wolfcrypt/src/sp_int.c ****     return err;
 15267                             		.loc 2 15362 12
 15268 0065 EC A5                   		mov.L	[r10], r5
15363:../src/wolfcrypt/src/sp_int.c **** }
 15269                             		.loc 2 15363 1
 15270 0067 EF 51                   		mov.L	r5, r1
 15271 0069 3F AA 05                		rtsd	#20, r10-r10
 15272                             	.LFE126:
 15274 006c 76 10 01 00             		.section	.text.sp_tohex,"ax",@progbits
 15275                             		.global	_sp_tohex
 15277                             	_sp_tohex:
 15278                             	.LFB127:
15364:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_MATH_ALL && !NO_RSA && !WOLFSSL_RSA_VERIFY_ONLY) || HAVE_ECC */
15365:../src/wolfcrypt/src/sp_int.c **** 
15366:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
15367:../src/wolfcrypt/src/sp_int.c ****     defined(WC_MP_TO_RADIX)
15368:../src/wolfcrypt/src/sp_int.c **** 
15369:../src/wolfcrypt/src/sp_int.c **** /* Put the big-endian, hex string encoding of a into str.
15370:../src/wolfcrypt/src/sp_int.c ****  *
15371:../src/wolfcrypt/src/sp_int.c ****  * Assumes str is large enough for result.
15372:../src/wolfcrypt/src/sp_int.c ****  * Use sp_radix_size() to calculate required length.
15373:../src/wolfcrypt/src/sp_int.c ****  *
15374:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer to convert.
15375:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  str  String to hold hex string result.
15376:../src/wolfcrypt/src/sp_int.c ****  *
15377:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15378:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or str is NULL.
15379:../src/wolfcrypt/src/sp_int.c ****  */
15380:../src/wolfcrypt/src/sp_int.c **** int sp_tohex(sp_int* a, char* str)
15381:../src/wolfcrypt/src/sp_int.c **** {
 15279                             		.loc 2 15381 1
 15280 0000 6E 6A                   		pushm	r6-r10
 15281                             	.LCFI180:
 15282 0002 71 0A EC                		add	#-20, r0, r10
 15283                             	.LCFI181:
 15284 0005 EF A0                   		mov.L	r10, r0
 15285 0007 E7 A1 03                		mov.L	r1, 12[r10]
 15286 000a E7 A2 04                		mov.L	r2, 16[r10]
15382:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 15287                             		.loc 2 15382 9
 15288 000d F8 A6 00                		mov.L	#0, [r10]
15383:../src/wolfcrypt/src/sp_int.c ****     int i;
15384:../src/wolfcrypt/src/sp_int.c ****     int j;
15385:../src/wolfcrypt/src/sp_int.c **** 
15386:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (str == NULL)) {
 15289                             		.loc 2 15386 8
 15290 0010 ED A5 03                		mov.L	12[r10], r5
 15291 0013 61 05                   		cmp	#0, r5
 15292 0015 17                      		beq	.L989
 15293                             		.loc 2 15386 21 discriminator 1
 15294 0016 ED A5 04                		mov.L	16[r10], r5
 15295 0019 61 05                   		cmp	#0, r5
 15296 001b 1C                      		bne	.L990
 15297                             	.L989:
15387:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 15298                             		.loc 2 15387 13
 15299 001c F8 A6 FD                		mov.L	#-3, [r10]
 15300                             	.L990:
15388:../src/wolfcrypt/src/sp_int.c ****     }
15389:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 15301                             		.loc 2 15389 8
 15302 001f EC A5                   		mov.L	[r10], r5
 15303 0021 61 05                   		cmp	#0, r5
 15304 0023 3B 20 01                		bne	.L991
15390:../src/wolfcrypt/src/sp_int.c ****         /* quick out if its zero */
15391:../src/wolfcrypt/src/sp_int.c ****         if (sp_iszero(a) == MP_YES) {
 15305                             		.loc 2 15391 13
 15306 0026 ED A5 03                		mov.L	12[r10], r5
 15307 0029 EC 55                   		mov.L	[r5], r5
 15308                             		.loc 2 15391 12
 15309 002b 61 05                   		cmp	#0, r5
 15310 002d 21 23                   		bne	.L992
15392:../src/wolfcrypt/src/sp_int.c ****     #ifndef WC_DISABLE_RADIX_ZERO_PAD
15393:../src/wolfcrypt/src/sp_int.c ****             *str++ = '0';
 15311                             		.loc 2 15393 17
 15312 002f ED A5 04                		mov.L	16[r10], r5
 15313 0032 71 54 01                		add	#1, r5, r4
 15314 0035 E7 A4 04                		mov.L	r4, 16[r10]
 15315                             		.loc 2 15393 20
 15316 0038 F8 54 30                		mov.B	#48, [r5]
15394:../src/wolfcrypt/src/sp_int.c ****     #endif /* WC_DISABLE_RADIX_ZERO_PAD */
15395:../src/wolfcrypt/src/sp_int.c ****             *str++ = '0';
 15317                             		.loc 2 15395 17
 15318 003b ED A5 04                		mov.L	16[r10], r5
 15319 003e 71 54 01                		add	#1, r5, r4
 15320 0041 E7 A4 04                		mov.L	r4, 16[r10]
 15321                             		.loc 2 15395 20
 15322 0044 F8 54 30                		mov.B	#48, [r5]
15396:../src/wolfcrypt/src/sp_int.c ****             *str = '\0';
 15323                             		.loc 2 15396 18
 15324 0047 ED A5 04                		mov.L	16[r10], r5
 15325 004a F8 54 00                		mov.B	#0, [r5]
 15326 004d 38 F6 00                		bra	.L991
 15327                             	.L992:
15397:../src/wolfcrypt/src/sp_int.c ****         }
15398:../src/wolfcrypt/src/sp_int.c ****         else {
15399:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
15400:../src/wolfcrypt/src/sp_int.c ****             if (a->sign == MP_NEG) {
15401:../src/wolfcrypt/src/sp_int.c ****                 *str = '-';
15402:../src/wolfcrypt/src/sp_int.c ****                 str++;
15403:../src/wolfcrypt/src/sp_int.c ****             }
15404:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_INT_NEGATIVE */
15405:../src/wolfcrypt/src/sp_int.c **** 
15406:../src/wolfcrypt/src/sp_int.c ****             i = a->used - 1;
 15328                             		.loc 2 15406 18
 15329 0050 ED A5 03                		mov.L	12[r10], r5
 15330 0053 EC 55                   		mov.L	[r5], r5
 15331                             		.loc 2 15406 15
 15332 0055 60 15                   		sub	#1, r5
 15333 0057 E7 A5 01                		mov.L	r5, 4[r10]
15407:../src/wolfcrypt/src/sp_int.c ****     #ifndef WC_DISABLE_RADIX_ZERO_PAD
15408:../src/wolfcrypt/src/sp_int.c ****             /* Find highest non-zero byte in most-significant word. */
15409:../src/wolfcrypt/src/sp_int.c ****             for (j = SP_WORD_SIZE - 8; j >= 0; j -= 8) {
 15334                             		.loc 2 15409 20
 15335 005a F9 A6 02 18             		mov.L	#24, 8[r10]
 15336                             		.loc 2 15409 13
 15337 005e 2E 3A                   		bra	.L993
 15338                             	.L997:
15410:../src/wolfcrypt/src/sp_int.c ****                 if (((a->dp[i] >> j) & 0xff) != 0) {
 15339                             		.loc 2 15410 28
 15340 0060 ED A4 03                		mov.L	12[r10], r4
 15341 0063 ED A5 01                		mov.L	4[r10], r5
 15342 0066 62 25                   		add	#2, r5
 15343 0068 FE 65 44                		mov.L	[r5,r4], r4
 15344                             		.loc 2 15410 32
 15345 006b ED A5 02                		mov.L	8[r10], r5
 15346 006e EF 47                   		mov.L	r4, r7
 15347 0070 FD 60 57                		shlr	r5, r7
 15348 0073 EF 75                   		mov.L	r7, r5
 15349                             		.loc 2 15410 38
 15350 0075 76 25 FF 00             		and	#0xff, r5
 15351                             		.loc 2 15410 20
 15352 0079 61 05                   		cmp	#0, r5
 15353 007b 21 26                   		bne	.L1005
15411:../src/wolfcrypt/src/sp_int.c ****                     break;
15412:../src/wolfcrypt/src/sp_int.c ****                 }
15413:../src/wolfcrypt/src/sp_int.c ****                 else if (j == 0) {
 15354                             		.loc 2 15413 25
 15355 007d ED A5 02                		mov.L	8[r10], r5
 15356 0080 61 05                   		cmp	#0, r5
 15357 0082 21 0E                   		bne	.L996
15414:../src/wolfcrypt/src/sp_int.c ****                     j = SP_WORD_SIZE - 8;
 15358                             		.loc 2 15414 23
 15359 0084 F9 A6 02 18             		mov.L	#24, 8[r10]
15415:../src/wolfcrypt/src/sp_int.c ****                     --i;
 15360                             		.loc 2 15415 21
 15361 0088 ED A5 01                		mov.L	4[r10], r5
 15362 008b 60 15                   		sub	#1, r5
 15363 008d E7 A5 01                		mov.L	r5, 4[r10]
 15364                             	.L996:
15409:../src/wolfcrypt/src/sp_int.c ****                 if (((a->dp[i] >> j) & 0xff) != 0) {
 15365                             		.loc 2 15409 50 discriminator 2
 15366 0090 ED A5 02                		mov.L	8[r10], r5
 15367 0093 60 85                   		sub	#8, r5
 15368 0095 E7 A5 02                		mov.L	r5, 8[r10]
 15369                             	.L993:
15409:../src/wolfcrypt/src/sp_int.c ****                 if (((a->dp[i] >> j) & 0xff) != 0) {
 15370                             		.loc 2 15409 13 discriminator 1
 15371 0098 ED A5 02                		mov.L	8[r10], r5
 15372 009b 61 05                   		cmp	#0, r5
 15373 009d 28 C3                   		bge	.L997
 15374 009f 2E 03                   		bra	.L995
 15375                             	.L1005:
15411:../src/wolfcrypt/src/sp_int.c ****                 }
 15376                             		.loc 2 15411 21
 15377 00a1 03                      		nop
 15378                             	.L995:
15416:../src/wolfcrypt/src/sp_int.c ****                 }
15417:../src/wolfcrypt/src/sp_int.c ****             }
15418:../src/wolfcrypt/src/sp_int.c ****             /* Start with high nibble of byte. */
15419:../src/wolfcrypt/src/sp_int.c ****             j += 4;
 15379                             		.loc 2 15419 15
 15380 00a2 ED A5 02                		mov.L	8[r10], r5
 15381 00a5 62 45                   		add	#4, r5
 15382 00a7 E7 A5 02                		mov.L	r5, 8[r10]
15420:../src/wolfcrypt/src/sp_int.c ****     #else
15421:../src/wolfcrypt/src/sp_int.c ****             /* Find highest non-zero nibble in most-significant word. */
15422:../src/wolfcrypt/src/sp_int.c ****             for (j = SP_WORD_SIZE - 4; j >= 0; j -= 4) {
15423:../src/wolfcrypt/src/sp_int.c ****                 if (((a->dp[i] >> j) & 0xf) != 0) {
15424:../src/wolfcrypt/src/sp_int.c ****                     break;
15425:../src/wolfcrypt/src/sp_int.c ****                 }
15426:../src/wolfcrypt/src/sp_int.c ****                 else if (j == 0) {
15427:../src/wolfcrypt/src/sp_int.c ****                     j = SP_WORD_SIZE - 4;
15428:../src/wolfcrypt/src/sp_int.c ****                     --i;
15429:../src/wolfcrypt/src/sp_int.c ****                 }
15430:../src/wolfcrypt/src/sp_int.c ****             }
15431:../src/wolfcrypt/src/sp_int.c ****     #endif /* WC_DISABLE_RADIX_ZERO_PAD */
15432:../src/wolfcrypt/src/sp_int.c ****             /* Most-significant word. */
15433:../src/wolfcrypt/src/sp_int.c ****             for (; j >= 0; j -= 4) {
 15383                             		.loc 2 15433 13
 15384 00aa 2E 34                   		bra	.L998
 15385                             	.L999:
15434:../src/wolfcrypt/src/sp_int.c ****                 *(str++) = ByteToHex((byte)(a->dp[i] >> j));
 15386                             		.loc 2 15434 50 discriminator 2
 15387 00ac ED A4 03                		mov.L	12[r10], r4
 15388 00af ED A5 01                		mov.L	4[r10], r5
 15389 00b2 62 25                   		add	#2, r5
 15390 00b4 FE 65 44                		mov.L	[r5,r4], r4
 15391                             		.loc 2 15434 54 discriminator 2
 15392 00b7 ED A5 02                		mov.L	8[r10], r5
 15393 00ba EF 47                   		mov.L	r4, r7
 15394 00bc FD 60 57                		shlr	r5, r7
 15395 00bf EF 75                   		mov.L	r7, r5
 15396                             		.loc 2 15434 28 discriminator 2
 15397 00c1 CF 54                   		mov.B	r5, r4
 15398                             		.loc 2 15434 22 discriminator 2
 15399 00c3 ED A6 04                		mov.L	16[r10], r6
 15400 00c6 71 65 01                		add	#1, r6, r5
 15401 00c9 E7 A5 04                		mov.L	r5, 16[r10]
 15402                             		.loc 2 15434 28 discriminator 2
 15403 00cc CF 41                   		mov.B	r4, r1
 15404 00ce 05 00 00 00             		bsr	_ByteToHex
 15405 00d2 EF 15                   		mov.L	r1, r5
 15406                             		.loc 2 15434 26 discriminator 2
 15407 00d4 C3 65                   		mov.B	r5, [r6]
15433:../src/wolfcrypt/src/sp_int.c ****                 *(str++) = ByteToHex((byte)(a->dp[i] >> j));
 15408                             		.loc 2 15433 30 discriminator 2
 15409 00d6 ED A5 02                		mov.L	8[r10], r5
 15410 00d9 60 45                   		sub	#4, r5
 15411 00db E7 A5 02                		mov.L	r5, 8[r10]
 15412                             	.L998:
15433:../src/wolfcrypt/src/sp_int.c ****                 *(str++) = ByteToHex((byte)(a->dp[i] >> j));
 15413                             		.loc 2 15433 13 discriminator 1
 15414 00de ED A5 02                		mov.L	8[r10], r5
 15415 00e1 61 05                   		cmp	#0, r5
 15416 00e3 28 C9                   		bge	.L999
15435:../src/wolfcrypt/src/sp_int.c ****             }
15436:../src/wolfcrypt/src/sp_int.c ****             for (--i; i >= 0; i--) {
 15417                             		.loc 2 15436 18
 15418 00e5 ED A5 01                		mov.L	4[r10], r5
 15419 00e8 60 15                   		sub	#1, r5
 15420 00ea E7 A5 01                		mov.L	r5, 4[r10]
 15421                             		.loc 2 15436 13
 15422 00ed 2E 49                   		bra	.L1000
 15423                             	.L1003:
15437:../src/wolfcrypt/src/sp_int.c ****                 for (j = SP_WORD_SIZE - 4; j >= 0; j -= 4) {
 15424                             		.loc 2 15437 24
 15425 00ef F9 A6 02 1C             		mov.L	#28, 8[r10]
 15426                             		.loc 2 15437 17
 15427 00f3 2E 34                   		bra	.L1001
 15428                             	.L1002:
15438:../src/wolfcrypt/src/sp_int.c ****                     *(str++) = (byte)ByteToHex((byte)(a->dp[i] >> j));
 15429                             		.loc 2 15438 60 discriminator 3
 15430 00f5 ED A4 03                		mov.L	12[r10], r4
 15431 00f8 ED A5 01                		mov.L	4[r10], r5
 15432 00fb 62 25                   		add	#2, r5
 15433 00fd FE 65 44                		mov.L	[r5,r4], r4
 15434                             		.loc 2 15438 64 discriminator 3
 15435 0100 ED A5 02                		mov.L	8[r10], r5
 15436 0103 EF 47                   		mov.L	r4, r7
 15437 0105 FD 60 57                		shlr	r5, r7
 15438 0108 EF 75                   		mov.L	r7, r5
 15439                             		.loc 2 15438 38 discriminator 3
 15440 010a CF 54                   		mov.B	r5, r4
 15441                             		.loc 2 15438 26 discriminator 3
 15442 010c ED A6 04                		mov.L	16[r10], r6
 15443 010f 71 65 01                		add	#1, r6, r5
 15444 0112 E7 A5 04                		mov.L	r5, 16[r10]
 15445                             		.loc 2 15438 38 discriminator 3
 15446 0115 CF 41                   		mov.B	r4, r1
 15447 0117 05 00 00 00             		bsr	_ByteToHex
 15448 011b EF 15                   		mov.L	r1, r5
 15449                             		.loc 2 15438 30 discriminator 3
 15450 011d C3 65                   		mov.B	r5, [r6]
15437:../src/wolfcrypt/src/sp_int.c ****                 for (j = SP_WORD_SIZE - 4; j >= 0; j -= 4) {
 15451                             		.loc 2 15437 54 discriminator 3
 15452 011f ED A5 02                		mov.L	8[r10], r5
 15453 0122 60 45                   		sub	#4, r5
 15454 0124 E7 A5 02                		mov.L	r5, 8[r10]
 15455                             	.L1001:
15437:../src/wolfcrypt/src/sp_int.c ****                 for (j = SP_WORD_SIZE - 4; j >= 0; j -= 4) {
 15456                             		.loc 2 15437 17 discriminator 1
 15457 0127 ED A5 02                		mov.L	8[r10], r5
 15458 012a 61 05                   		cmp	#0, r5
 15459 012c 28 C9                   		bge	.L1002
15436:../src/wolfcrypt/src/sp_int.c ****                 for (j = SP_WORD_SIZE - 4; j >= 0; j -= 4) {
 15460                             		.loc 2 15436 32 discriminator 2
 15461 012e ED A5 01                		mov.L	4[r10], r5
 15462 0131 60 15                   		sub	#1, r5
 15463 0133 E7 A5 01                		mov.L	r5, 4[r10]
 15464                             	.L1000:
15436:../src/wolfcrypt/src/sp_int.c ****                 for (j = SP_WORD_SIZE - 4; j >= 0; j -= 4) {
 15465                             		.loc 2 15436 13 discriminator 1
 15466 0136 ED A5 01                		mov.L	4[r10], r5
 15467 0139 61 05                   		cmp	#0, r5
 15468 013b 28 B4                   		bge	.L1003
15439:../src/wolfcrypt/src/sp_int.c ****                 }
15440:../src/wolfcrypt/src/sp_int.c ****             }
15441:../src/wolfcrypt/src/sp_int.c ****             *str = '\0';
 15469                             		.loc 2 15441 18
 15470 013d ED A5 04                		mov.L	16[r10], r5
 15471 0140 F8 54 00                		mov.B	#0, [r5]
 15472                             	.L991:
15442:../src/wolfcrypt/src/sp_int.c ****         }
15443:../src/wolfcrypt/src/sp_int.c ****     }
15444:../src/wolfcrypt/src/sp_int.c **** 
15445:../src/wolfcrypt/src/sp_int.c ****     return err;
 15473                             		.loc 2 15445 12
 15474 0143 EC A5                   		mov.L	[r10], r5
15446:../src/wolfcrypt/src/sp_int.c **** }
 15475                             		.loc 2 15446 1
 15476 0145 EF 51                   		mov.L	r5, r1
 15477 0147 3F 6A 0A                		rtsd	#40, r6-r10
 15478                             	.LFE127:
 15480                             		.section	.text.sp_todecimal,"ax",@progbits
 15481                             		.global	_sp_todecimal
 15483                             	_sp_todecimal:
 15484                             	.LFB128:
15447:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY) || WC_MP_TO_RADIX */
15448:../src/wolfcrypt/src/sp_int.c **** 
15449:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
15450:../src/wolfcrypt/src/sp_int.c ****     defined(WOLFSSL_KEY_GEN) || defined(HAVE_COMP_KEY) || \
15451:../src/wolfcrypt/src/sp_int.c ****     defined(WC_MP_TO_RADIX)
15452:../src/wolfcrypt/src/sp_int.c **** /* Put the big-endian, decimal string encoding of a into str.
15453:../src/wolfcrypt/src/sp_int.c ****  *
15454:../src/wolfcrypt/src/sp_int.c ****  * Assumes str is large enough for result.
15455:../src/wolfcrypt/src/sp_int.c ****  * Use sp_radix_size() to calculate required length.
15456:../src/wolfcrypt/src/sp_int.c ****  *
15457:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a    SP integer to convert.
15458:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  str  String to hold hex string result.
15459:../src/wolfcrypt/src/sp_int.c ****  *
15460:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15461:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or str is NULL.
15462:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
15463:../src/wolfcrypt/src/sp_int.c ****  */
15464:../src/wolfcrypt/src/sp_int.c **** int sp_todecimal(sp_int* a, char* str)
15465:../src/wolfcrypt/src/sp_int.c **** {
 15485                             		.loc 2 15465 1
 15486 0000 7E AA                   		push.l	r10
 15487                             	.LCFI182:
 15488 0002 71 0A DC                		add	#-36, r0, r10
 15489                             	.LCFI183:
 15490 0005 EF A0                   		mov.L	r10, r0
 15491 0007 E7 A1 07                		mov.L	r1, 28[r10]
 15492 000a E7 A2 08                		mov.L	r2, 32[r10]
15466:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 15493                             		.loc 2 15466 9
 15494 000d F8 A6 00                		mov.L	#0, [r10]
15467:../src/wolfcrypt/src/sp_int.c ****     int i;
15468:../src/wolfcrypt/src/sp_int.c ****     int j;
15469:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit d;
15470:../src/wolfcrypt/src/sp_int.c **** 
15471:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (str == NULL)) {
 15495                             		.loc 2 15471 8
 15496 0010 ED A5 07                		mov.L	28[r10], r5
 15497 0013 61 05                   		cmp	#0, r5
 15498 0015 17                      		beq	.L1007
 15499                             		.loc 2 15471 21 discriminator 1
 15500 0016 ED A5 08                		mov.L	32[r10], r5
 15501 0019 61 05                   		cmp	#0, r5
 15502 001b 1F                      		bne	.L1008
 15503                             	.L1007:
15472:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 15504                             		.loc 2 15472 13
 15505 001c F8 A6 FD                		mov.L	#-3, [r10]
 15506 001f 38 3B 01                		bra	.L1009
 15507                             	.L1008:
15473:../src/wolfcrypt/src/sp_int.c ****     }
15474:../src/wolfcrypt/src/sp_int.c ****     /* quick out if its zero */
15475:../src/wolfcrypt/src/sp_int.c ****     else if (sp_iszero(a) == MP_YES) {
 15508                             		.loc 2 15475 14
 15509 0022 ED A5 07                		mov.L	28[r10], r5
 15510 0025 EC 55                   		mov.L	[r5], r5
 15511                             		.loc 2 15475 13
 15512 0027 61 05                   		cmp	#0, r5
 15513 0029 21 17                   		bne	.L1010
15476:../src/wolfcrypt/src/sp_int.c ****         *str++ = '0';
 15514                             		.loc 2 15476 13
 15515 002b ED A5 08                		mov.L	32[r10], r5
 15516 002e 71 54 01                		add	#1, r5, r4
 15517 0031 E7 A4 08                		mov.L	r4, 32[r10]
 15518                             		.loc 2 15476 16
 15519 0034 F8 54 30                		mov.B	#48, [r5]
15477:../src/wolfcrypt/src/sp_int.c ****         *str = '\0';
 15520                             		.loc 2 15477 14
 15521 0037 ED A5 08                		mov.L	32[r10], r5
 15522 003a F8 54 00                		mov.B	#0, [r5]
 15523 003d 38 1D 01                		bra	.L1009
 15524                             	.L1010:
 15525                             	.LBB92:
15478:../src/wolfcrypt/src/sp_int.c ****     }
15479:../src/wolfcrypt/src/sp_int.c ****     else {
15480:../src/wolfcrypt/src/sp_int.c ****         DECL_SP_INT(t, a->used + 1);
 15526                             		.loc 2 15480 9
 15527 0040 F9 A6 03 00             		mov.L	#0, 12[r10]
15481:../src/wolfcrypt/src/sp_int.c **** 
15482:../src/wolfcrypt/src/sp_int.c ****         ALLOC_SP_INT_SIZE(t, a->used + 1, err, NULL);
 15528                             		.loc 2 15482 9
 15529 0044 EC A5                   		mov.L	[r10], r5
 15530 0046 61 05                   		cmp	#0, r5
 15531 0048 21 2A                   		bne	.L1011
 15532                             		.loc 2 15482 9 is_stmt 0 discriminator 1
 15533 004a ED A5 07                		mov.L	28[r10], r5
 15534 004d EC 55                   		mov.L	[r5], r5
 15535 004f 75 05 FF                		cmp	#-1, r5
 15536 0052 20 0C                   		beq	.L1012
 15537                             		.loc 2 15482 9 discriminator 3
 15538 0054 ED A5 07                		mov.L	28[r10], r5
 15539 0057 EC 55                   		mov.L	[r5], r5
 15540 0059 62 35                   		add	#3, r5
 15541 005b 6C 25                   		shll	#2, r5
 15542 005d 0B                      		bra	.L1013
 15543                             	.L1012:
 15544                             		.loc 2 15482 9 discriminator 4
 15545 005e 66 C5                   		mov.L	#12, r5
 15546                             	.L1013:
 15547                             		.loc 2 15482 9 discriminator 6
 15548 0060 EF 51                   		mov.L	r5, r1
 15549 0062 05 00 00 00             		bsr	_wolfSSL_Malloc
 15550 0066 E7 A1 03                		mov.L	r1, 12[r10]
 15551 0069 ED A5 03                		mov.L	12[r10], r5
 15552 006c 61 05                   		cmp	#0, r5
 15553 006e 1C                      		bne	.L1011
 15554                             		.loc 2 15482 9 discriminator 7
 15555 006f F8 A6 FE                		mov.L	#-2, [r10]
 15556                             	.L1011:
 15557                             		.loc 2 15482 9 discriminator 9
 15558 0072 EC A5                   		mov.L	[r10], r5
 15559 0074 61 05                   		cmp	#0, r5
 15560 0076 21 0F                   		bne	.L1014
 15561                             		.loc 2 15482 9 discriminator 10
 15562 0078 ED A5 07                		mov.L	28[r10], r5
 15563 007b EC 55                   		mov.L	[r5], r5
 15564 007d 71 54 01                		add	#1, r5, r4
 15565 0080 ED A5 03                		mov.L	12[r10], r5
 15566 0083 A0 5C                   		mov.L	r4, 4[r5]
 15567                             	.L1014:
15483:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 15568                             		.loc 2 15483 12 is_stmt 1
 15569 0085 EC A5                   		mov.L	[r10], r5
 15570 0087 61 05                   		cmp	#0, r5
 15571 0089 21 0E                   		bne	.L1015
15484:../src/wolfcrypt/src/sp_int.c ****             err = sp_copy(a, t);
 15572                             		.loc 2 15484 19
 15573 008b ED A2 03                		mov.L	12[r10], r2
 15574 008e ED A1 07                		mov.L	28[r10], r1
 15575 0091 05 00 00 00             		bsr	_sp_copy
 15576 0095 E3 A1                   		mov.L	r1, [r10]
 15577                             	.L1015:
15485:../src/wolfcrypt/src/sp_int.c ****         }
15486:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 15578                             		.loc 2 15486 12
 15579 0097 EC A5                   		mov.L	[r10], r5
 15580 0099 61 05                   		cmp	#0, r5
 15581 009b 3B A5 00                		bne	.L1016
15487:../src/wolfcrypt/src/sp_int.c **** 
15488:../src/wolfcrypt/src/sp_int.c ****         #ifdef WOLFSSL_SP_INT_NEGATIVE
15489:../src/wolfcrypt/src/sp_int.c ****             if (a->sign == MP_NEG) {
15490:../src/wolfcrypt/src/sp_int.c ****                 *str = '-';
15491:../src/wolfcrypt/src/sp_int.c ****                 str++;
15492:../src/wolfcrypt/src/sp_int.c ****             }
15493:../src/wolfcrypt/src/sp_int.c ****         #endif /* WOLFSSL_SP_INT_NEGATIVE */
15494:../src/wolfcrypt/src/sp_int.c **** 
15495:../src/wolfcrypt/src/sp_int.c ****             i = 0;
 15582                             		.loc 2 15495 15
 15583 009e F9 A6 01 00             		mov.L	#0, 4[r10]
15496:../src/wolfcrypt/src/sp_int.c ****             while (!sp_iszero(t)) {
 15584                             		.loc 2 15496 19
 15585 00a2 2E 2B                   		bra	.L1017
 15586                             	.L1018:
15497:../src/wolfcrypt/src/sp_int.c ****                 sp_div_d(t, 10, t, &d);
 15587                             		.loc 2 15497 17
 15588 00a4 71 A5 18                		add	#24, r10, r5
 15589 00a7 EF 54                   		mov.L	r5, r4
 15590 00a9 ED A3 03                		mov.L	12[r10], r3
 15591 00ac 66 A2                   		mov.L	#10, r2
 15592 00ae ED A1 03                		mov.L	12[r10], r1
 15593 00b1 05 00 00 00             		bsr	_sp_div_d
15498:../src/wolfcrypt/src/sp_int.c ****                 str[i++] = (char)('0' + d);
 15594                             		.loc 2 15498 28
 15595 00b5 ED A5 06                		mov.L	24[r10], r5
 15596 00b8 CF 54                   		mov.B	r5, r4
 15597                             		.loc 2 15498 22
 15598 00ba ED A5 01                		mov.L	4[r10], r5
 15599 00bd 71 53 01                		add	#1, r5, r3
 15600 00c0 E7 A3 01                		mov.L	r3, 4[r10]
 15601                             		.loc 2 15498 20
 15602 00c3 ED A3 08                		mov.L	32[r10], r3
 15603 00c6 4B 35                   		add	r3, r5
 15604                             		.loc 2 15498 28
 15605 00c8 71 44 30                		add	#48, r4
 15606                             		.loc 2 15498 26
 15607 00cb C3 54                   		mov.B	r4, [r5]
 15608                             	.L1017:
15496:../src/wolfcrypt/src/sp_int.c ****             while (!sp_iszero(t)) {
 15609                             		.loc 2 15496 21
 15610 00cd ED A5 03                		mov.L	12[r10], r5
 15611 00d0 EC 55                   		mov.L	[r5], r5
15496:../src/wolfcrypt/src/sp_int.c ****             while (!sp_iszero(t)) {
 15612                             		.loc 2 15496 19
 15613 00d2 61 05                   		cmp	#0, r5
 15614 00d4 21 D0                   		bne	.L1018
15499:../src/wolfcrypt/src/sp_int.c ****             }
15500:../src/wolfcrypt/src/sp_int.c ****             str[i] = '\0';
 15615                             		.loc 2 15500 16
 15616 00d6 ED A5 01                		mov.L	4[r10], r5
 15617 00d9 ED A4 08                		mov.L	32[r10], r4
 15618 00dc 4B 45                   		add	r4, r5
 15619                             		.loc 2 15500 20
 15620 00de F8 54 00                		mov.B	#0, [r5]
15501:../src/wolfcrypt/src/sp_int.c **** 
15502:../src/wolfcrypt/src/sp_int.c ****             for (j = 0; j <= (i - 1) / 2; j++) {
 15621                             		.loc 2 15502 20
 15622 00e1 F9 A6 02 00             		mov.L	#0, 8[r10]
 15623                             		.loc 2 15502 13
 15624 00e5 2E 48                   		bra	.L1019
 15625                             	.L1020:
 15626                             	.LBB93:
15503:../src/wolfcrypt/src/sp_int.c ****                 int c = (unsigned char)str[j];
 15627                             		.loc 2 15503 43 discriminator 3
 15628 00e7 ED A5 02                		mov.L	8[r10], r5
 15629 00ea ED A4 08                		mov.L	32[r10], r4
 15630 00ed 4B 45                   		add	r4, r5
 15631 00ef CC 55                   		mov.B	[r5], r5
 15632                             		.loc 2 15503 21 discriminator 3
 15633 00f1 5B 55                   		movu.B	r5, r5
 15634 00f3 E7 A5 04                		mov.L	r5, 16[r10]
15504:../src/wolfcrypt/src/sp_int.c ****                 str[j] = str[i - 1 - j];
 15635                             		.loc 2 15504 32 discriminator 3
 15636 00f6 ED A5 01                		mov.L	4[r10], r5
 15637 00f9 60 15                   		sub	#1, r5
 15638                             		.loc 2 15504 36 discriminator 3
 15639 00fb ED A4 02                		mov.L	8[r10], r4
 15640 00fe 43 45                   		sub	r4, r5
 15641                             		.loc 2 15504 29 discriminator 3
 15642 0100 ED A4 08                		mov.L	32[r10], r4
 15643 0103 4B 54                   		add	r5, r4
 15644                             		.loc 2 15504 20 discriminator 3
 15645 0105 ED A5 02                		mov.L	8[r10], r5
 15646 0108 ED A3 08                		mov.L	32[r10], r3
 15647 010b 4B 35                   		add	r3, r5
 15648                             		.loc 2 15504 29 discriminator 3
 15649 010d CC 44                   		mov.B	[r4], r4
 15650                             		.loc 2 15504 24 discriminator 3
 15651 010f C3 54                   		mov.B	r4, [r5]
15505:../src/wolfcrypt/src/sp_int.c ****                 str[i - 1 - j] = (char)c;
 15652                             		.loc 2 15505 23 discriminator 3
 15653 0111 ED A5 01                		mov.L	4[r10], r5
 15654 0114 60 15                   		sub	#1, r5
 15655                             		.loc 2 15505 27 discriminator 3
 15656 0116 ED A4 02                		mov.L	8[r10], r4
 15657 0119 43 45                   		sub	r4, r5
 15658                             		.loc 2 15505 20 discriminator 3
 15659 011b ED A4 08                		mov.L	32[r10], r4
 15660 011e 4B 45                   		add	r4, r5
 15661                             		.loc 2 15505 34 discriminator 3
 15662 0120 ED A4 04                		mov.L	16[r10], r4
 15663                             		.loc 2 15505 32 discriminator 3
 15664 0123 C3 54                   		mov.B	r4, [r5]
 15665                             	.LBE93:
15502:../src/wolfcrypt/src/sp_int.c ****                 int c = (unsigned char)str[j];
 15666                             		.loc 2 15502 44 discriminator 3
 15667 0125 ED A5 02                		mov.L	8[r10], r5
 15668 0128 62 15                   		add	#1, r5
 15669 012a E7 A5 02                		mov.L	r5, 8[r10]
 15670                             	.L1019:
15502:../src/wolfcrypt/src/sp_int.c ****                 int c = (unsigned char)str[j];
 15671                             		.loc 2 15502 33 discriminator 1
 15672 012d ED A5 01                		mov.L	4[r10], r5
 15673 0130 60 15                   		sub	#1, r5
15502:../src/wolfcrypt/src/sp_int.c ****                 int c = (unsigned char)str[j];
 15674                             		.loc 2 15502 38 discriminator 1
 15675 0132 FD 9F 54                		shlr	#31, r5, r4
 15676 0135 4B 45                   		add	r4, r5
 15677 0137 6A 15                   		shar	#1, r5
15502:../src/wolfcrypt/src/sp_int.c ****                 int c = (unsigned char)str[j];
 15678                             		.loc 2 15502 13 discriminator 1
 15679 0139 ED A4 02                		mov.L	8[r10], r4
 15680 013c 47 54                   		cmp	r5, r4
 15681 013e 2B A9                   		ble	.L1020
 15682                             	.L1016:
15506:../src/wolfcrypt/src/sp_int.c ****             }
15507:../src/wolfcrypt/src/sp_int.c ****         }
15508:../src/wolfcrypt/src/sp_int.c **** 
15509:../src/wolfcrypt/src/sp_int.c ****         FREE_SP_INT(t, NULL);
 15683                             		.loc 2 15509 9
 15684 0140 ED A5 03                		mov.L	12[r10], r5
 15685 0143 61 05                   		cmp	#0, r5
 15686 0145 20 15                   		beq	.L1009
 15687                             	.LBB94:
 15688                             		.loc 2 15509 9 is_stmt 0 discriminator 1
 15689 0147 ED A5 03                		mov.L	12[r10], r5
 15690 014a E7 A5 05                		mov.L	r5, 20[r10]
 15691 014d ED A5 05                		mov.L	20[r10], r5
 15692 0150 61 05                   		cmp	#0, r5
 15693 0152 10                      		beq	.L1009
 15694                             		.loc 2 15509 9 discriminator 2
 15695 0153 ED A1 05                		mov.L	20[r10], r1
 15696 0156 05 00 00 00             		bsr	_wolfSSL_Free
 15697                             		.balign 8,3,1
 15698                             	.L1009:
 15699                             	.LBE94:
 15700                             	.LBE92:
15510:../src/wolfcrypt/src/sp_int.c ****     }
15511:../src/wolfcrypt/src/sp_int.c **** 
15512:../src/wolfcrypt/src/sp_int.c ****     return err;
 15701                             		.loc 2 15512 12 is_stmt 1
 15702 015a EC A5                   		mov.L	[r10], r5
15513:../src/wolfcrypt/src/sp_int.c **** }
 15703                             		.loc 2 15513 1
 15704 015c EF 51                   		mov.L	r5, r1
 15705 015e 3F AA 0A                		rtsd	#40, r10-r10
 15706                             	.LFE128:
 15708 0161 FD 70 40 00 00 00 80    		.section	.text.sp_toradix,"ax",@progbits
 15709                             		.global	_sp_toradix
 15711                             	_sp_toradix:
 15712                             	.LFB129:
15514:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_KEY_GEN || HAVE_COMP_KEY */
15515:../src/wolfcrypt/src/sp_int.c **** 
15516:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
15517:../src/wolfcrypt/src/sp_int.c ****     defined(WC_MP_TO_RADIX)
15518:../src/wolfcrypt/src/sp_int.c **** /* Put the string version, big-endian, of a in str using the given radix.
15519:../src/wolfcrypt/src/sp_int.c ****  *
15520:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a      SP integer to convert.
15521:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  str    String to hold hex string result.
15522:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   radix  Base of character.
15523:../src/wolfcrypt/src/sp_int.c ****  *                       Valid values: MP_RADIX_HEX, MP_RADIX_DEC.
15524:../src/wolfcrypt/src/sp_int.c ****  *
15525:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15526:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or str is NULL, or radix not supported.
15527:../src/wolfcrypt/src/sp_int.c ****  */
15528:../src/wolfcrypt/src/sp_int.c **** int sp_toradix(sp_int* a, char* str, int radix)
15529:../src/wolfcrypt/src/sp_int.c **** {
 15713                             		.loc 2 15529 1
 15714 0000 7E AA                   		push.l	r10
 15715                             	.LCFI184:
 15716 0002 71 0A F0                		add	#-16, r0, r10
 15717                             	.LCFI185:
 15718 0005 EF A0                   		mov.L	r10, r0
 15719 0007 E7 A1 01                		mov.L	r1, 4[r10]
 15720 000a E7 A2 02                		mov.L	r2, 8[r10]
 15721 000d E7 A3 03                		mov.L	r3, 12[r10]
15530:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 15722                             		.loc 2 15530 9
 15723 0010 F8 A6 00                		mov.L	#0, [r10]
15531:../src/wolfcrypt/src/sp_int.c **** 
15532:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (str == NULL)) {
 15724                             		.loc 2 15532 8
 15725 0013 ED A5 01                		mov.L	4[r10], r5
 15726 0016 61 05                   		cmp	#0, r5
 15727 0018 17                      		beq	.L1023
 15728                             		.loc 2 15532 21 discriminator 1
 15729 0019 ED A5 02                		mov.L	8[r10], r5
 15730 001c 61 05                   		cmp	#0, r5
 15731 001e 1E                      		bne	.L1024
 15732                             	.L1023:
15533:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 15733                             		.loc 2 15533 13
 15734 001f F8 A6 FD                		mov.L	#-3, [r10]
 15735 0022 2E 2F                   		bra	.L1025
 15736                             	.L1024:
15534:../src/wolfcrypt/src/sp_int.c ****     }
15535:../src/wolfcrypt/src/sp_int.c ****     else if (radix == MP_RADIX_HEX) {
 15737                             		.loc 2 15535 13
 15738 0024 ED A5 03                		mov.L	12[r10], r5
 15739 0027 75 55 10                		cmp	#16, r5
 15740 002a 21 10                   		bne	.L1026
15536:../src/wolfcrypt/src/sp_int.c ****         err = sp_tohex(a, str);
 15741                             		.loc 2 15536 15
 15742 002c ED A2 02                		mov.L	8[r10], r2
 15743 002f ED A1 01                		mov.L	4[r10], r1
 15744 0032 05 00 00 00             		bsr	_sp_tohex
 15745 0036 E3 A1                   		mov.L	r1, [r10]
 15746 0038 2E 19                   		bra	.L1025
 15747                             	.L1026:
15537:../src/wolfcrypt/src/sp_int.c ****     }
15538:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || defined(WOLFSSL_KEY_GEN) || \
15539:../src/wolfcrypt/src/sp_int.c ****     defined(HAVE_COMP_KEY)
15540:../src/wolfcrypt/src/sp_int.c ****     else if (radix == MP_RADIX_DEC) {
 15748                             		.loc 2 15540 13
 15749 003a ED A5 03                		mov.L	12[r10], r5
 15750 003d 61 A5                   		cmp	#10, r5
 15751 003f 21 0F                   		bne	.L1027
15541:../src/wolfcrypt/src/sp_int.c ****         err = sp_todecimal(a, str);
 15752                             		.loc 2 15541 15
 15753 0041 ED A2 02                		mov.L	8[r10], r2
 15754 0044 ED A1 01                		mov.L	4[r10], r1
 15755 0047 05 00 00 00             		bsr	_sp_todecimal
 15756 004b E3 A1                   		mov.L	r1, [r10]
 15757 004d 0C                      		bra	.L1025
 15758                             	.L1027:
15542:../src/wolfcrypt/src/sp_int.c ****     }
15543:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_KEY_GEN || HAVE_COMP_KEY */
15544:../src/wolfcrypt/src/sp_int.c ****     else {
15545:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 15759                             		.loc 2 15545 13
 15760 004e F8 A6 FD                		mov.L	#-3, [r10]
 15761                             		.balign 8,3,1
 15762                             	.L1025:
15546:../src/wolfcrypt/src/sp_int.c ****     }
15547:../src/wolfcrypt/src/sp_int.c **** 
15548:../src/wolfcrypt/src/sp_int.c ****     return err;
 15763                             		.loc 2 15548 12
 15764 0051 EC A5                   		mov.L	[r10], r5
15549:../src/wolfcrypt/src/sp_int.c **** }
 15765                             		.loc 2 15549 1
 15766 0053 EF 51                   		mov.L	r5, r1
 15767 0055 3F AA 05                		rtsd	#20, r10-r10
 15768                             	.LFE129:
 15770                             		.section	.text.sp_radix_size,"ax",@progbits
 15771                             		.global	_sp_radix_size
 15773                             	_sp_radix_size:
 15774                             	.LFB130:
15550:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY) || WC_MP_TO_RADIX */
15551:../src/wolfcrypt/src/sp_int.c **** 
15552:../src/wolfcrypt/src/sp_int.c **** #if (defined(WOLFSSL_SP_MATH_ALL) && !defined(WOLFSSL_RSA_VERIFY_ONLY)) || \
15553:../src/wolfcrypt/src/sp_int.c ****     defined(WC_MP_TO_RADIX)
15554:../src/wolfcrypt/src/sp_int.c **** /* Calculate the length of the string version, big-endian, of a using the given
15555:../src/wolfcrypt/src/sp_int.c ****  * radix.
15556:../src/wolfcrypt/src/sp_int.c ****  *
15557:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a      SP integer to convert.
15558:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   radix  Base of character.
15559:../src/wolfcrypt/src/sp_int.c ****  *                       Valid values: MP_RADIX_HEX, MP_RADIX_DEC.
15560:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  size   The number of characters in encoding.
15561:../src/wolfcrypt/src/sp_int.c ****  *
15562:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15563:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or size is NULL, or radix not supported.
15564:../src/wolfcrypt/src/sp_int.c ****  */
15565:../src/wolfcrypt/src/sp_int.c **** int sp_radix_size(sp_int* a, int radix, int* size)
15566:../src/wolfcrypt/src/sp_int.c **** {
 15775                             		.loc 2 15566 1
 15776 0000 7E AA                   		push.l	r10
 15777                             	.LCFI186:
 15778 0002 71 0A DC                		add	#-36, r0, r10
 15779                             	.LCFI187:
 15780 0005 EF A0                   		mov.L	r10, r0
 15781 0007 E7 A1 06                		mov.L	r1, 24[r10]
 15782 000a E7 A2 07                		mov.L	r2, 28[r10]
 15783 000d E7 A3 08                		mov.L	r3, 32[r10]
15567:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 15784                             		.loc 2 15567 9
 15785 0010 F8 A6 00                		mov.L	#0, [r10]
15568:../src/wolfcrypt/src/sp_int.c **** 
15569:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (size == NULL)) {
 15786                             		.loc 2 15569 8
 15787 0013 ED A5 06                		mov.L	24[r10], r5
 15788 0016 61 05                   		cmp	#0, r5
 15789 0018 17                      		beq	.L1030
 15790                             		.loc 2 15569 21 discriminator 1
 15791 0019 ED A5 08                		mov.L	32[r10], r5
 15792 001c 61 05                   		cmp	#0, r5
 15793 001e 1F                      		bne	.L1031
 15794                             	.L1030:
15570:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 15795                             		.loc 2 15570 13
 15796 001f F8 A6 FD                		mov.L	#-3, [r10]
 15797 0022 38 12 01                		bra	.L1032
 15798                             	.L1031:
15571:../src/wolfcrypt/src/sp_int.c ****     }
15572:../src/wolfcrypt/src/sp_int.c ****     else if (radix == MP_RADIX_HEX) {
 15799                             		.loc 2 15572 13
 15800 0025 ED A5 07                		mov.L	28[r10], r5
 15801 0028 75 55 10                		cmp	#16, r5
 15802 002b 21 47                   		bne	.L1033
15573:../src/wolfcrypt/src/sp_int.c ****         if (a->used == 0) {
 15803                             		.loc 2 15573 14
 15804 002d ED A5 06                		mov.L	24[r10], r5
 15805 0030 EC 55                   		mov.L	[r5], r5
 15806                             		.loc 2 15573 12
 15807 0032 61 05                   		cmp	#0, r5
 15808 0034 1A                      		bne	.L1034
15574:../src/wolfcrypt/src/sp_int.c ****         #ifndef WC_DISABLE_RADIX_ZERO_PAD
15575:../src/wolfcrypt/src/sp_int.c ****             /* 00 and '\0' */
15576:../src/wolfcrypt/src/sp_int.c ****             *size = 2 + 1;
 15809                             		.loc 2 15576 19
 15810 0035 ED A5 08                		mov.L	32[r10], r5
 15811 0038 F8 56 03                		mov.L	#3, [r5]
 15812 003b 38 F9 00                		bra	.L1032
 15813                             	.L1034:
 15814                             	.LBB95:
15577:../src/wolfcrypt/src/sp_int.c ****         #else
15578:../src/wolfcrypt/src/sp_int.c ****             /* Zero and '\0' */
15579:../src/wolfcrypt/src/sp_int.c ****             *size = 1 + 1;
15580:../src/wolfcrypt/src/sp_int.c ****         #endif /* WC_DISABLE_RADIX_ZERO_PAD */
15581:../src/wolfcrypt/src/sp_int.c ****         }
15582:../src/wolfcrypt/src/sp_int.c ****         else {
15583:../src/wolfcrypt/src/sp_int.c ****             int nibbles = (sp_count_bits(a) + 3) / 4;
 15815                             		.loc 2 15583 28
 15816 003e ED A1 06                		mov.L	24[r10], r1
 15817 0041 05 00 00 00             		bsr	_sp_count_bits
 15818 0045 EF 15                   		mov.L	r1, r5
 15819                             		.loc 2 15583 45
 15820 0047 62 35                   		add	#3, r5
 15821                             		.loc 2 15583 17
 15822 0049 61 05                   		cmp	#0, r5
 15823 004b 28 04                   		bge	.L1036
 15824 004d 62 35                   		add	#3, r5
 15825                             	.L1036:
 15826 004f 6A 25                   		shar	#2, r5
 15827 0051 E7 A5 01                		mov.L	r5, 4[r10]
15584:../src/wolfcrypt/src/sp_int.c ****         #ifndef WC_DISABLE_RADIX_ZERO_PAD
15585:../src/wolfcrypt/src/sp_int.c ****             if (nibbles & 1) {
 15828                             		.loc 2 15585 25
 15829 0054 ED A5 01                		mov.L	4[r10], r5
 15830 0057 64 15                   		and	#1, r5
 15831                             		.loc 2 15585 16
 15832 0059 61 05                   		cmp	#0, r5
 15833 005b 11                      		beq	.L1037
15586:../src/wolfcrypt/src/sp_int.c ****                 nibbles++;
 15834                             		.loc 2 15586 24
 15835 005c ED A5 01                		mov.L	4[r10], r5
 15836 005f 62 15                   		add	#1, r5
 15837 0061 E7 A5 01                		mov.L	r5, 4[r10]
 15838                             	.L1037:
15587:../src/wolfcrypt/src/sp_int.c ****             }
15588:../src/wolfcrypt/src/sp_int.c ****         #endif /* WC_DISABLE_RADIX_ZERO_PAD */
15589:../src/wolfcrypt/src/sp_int.c ****         #ifdef WOLFSSL_SP_INT_NEGATIVE
15590:../src/wolfcrypt/src/sp_int.c ****             if (a->sign == MP_NEG) {
15591:../src/wolfcrypt/src/sp_int.c ****                 nibbles++;
15592:../src/wolfcrypt/src/sp_int.c ****             }
15593:../src/wolfcrypt/src/sp_int.c ****         #endif /* WOLFSSL_SP_INT_NEGATIVE */
15594:../src/wolfcrypt/src/sp_int.c ****             /* One more for \0 */
15595:../src/wolfcrypt/src/sp_int.c ****             *size = nibbles + 1;
 15839                             		.loc 2 15595 29
 15840 0064 ED A5 01                		mov.L	4[r10], r5
 15841 0067 71 54 01                		add	#1, r5, r4
 15842                             		.loc 2 15595 19
 15843 006a ED A5 08                		mov.L	32[r10], r5
 15844 006d E3 54                   		mov.L	r4, [r5]
 15845 006f 38 C5 00                		bra	.L1032
 15846                             	.L1033:
 15847                             	.LBE95:
15596:../src/wolfcrypt/src/sp_int.c ****         }
15597:../src/wolfcrypt/src/sp_int.c ****     }
15598:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_SP_MATH_ALL) || defined(WOLFSSL_KEY_GEN) || \
15599:../src/wolfcrypt/src/sp_int.c ****     defined(HAVE_COMP_KEY)
15600:../src/wolfcrypt/src/sp_int.c ****     else if (radix == MP_RADIX_DEC) {
 15848                             		.loc 2 15600 13
 15849 0072 ED A5 07                		mov.L	28[r10], r5
 15850 0075 61 A5                   		cmp	#10, r5
 15851 0077 3B BA 00                		bne	.L1038
 15852                             	.LBB96:
15601:../src/wolfcrypt/src/sp_int.c ****         int i;
15602:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit d;
15603:../src/wolfcrypt/src/sp_int.c **** 
15604:../src/wolfcrypt/src/sp_int.c ****         /* quick out if its zero */
15605:../src/wolfcrypt/src/sp_int.c ****         if (sp_iszero(a) == MP_YES) {
 15853                             		.loc 2 15605 13
 15854 007a ED A5 06                		mov.L	24[r10], r5
 15855 007d EC 55                   		mov.L	[r5], r5
 15856                             		.loc 2 15605 12
 15857 007f 61 05                   		cmp	#0, r5
 15858 0081 1A                      		bne	.L1039
15606:../src/wolfcrypt/src/sp_int.c ****             /* Zero and '\0' */
15607:../src/wolfcrypt/src/sp_int.c ****             *size = 1 + 1;
 15859                             		.loc 2 15607 19
 15860 0082 ED A5 08                		mov.L	32[r10], r5
 15861 0085 F8 56 02                		mov.L	#2, [r5]
 15862 0088 38 AC 00                		bra	.L1032
 15863                             	.L1039:
 15864                             	.LBB97:
15608:../src/wolfcrypt/src/sp_int.c ****         }
15609:../src/wolfcrypt/src/sp_int.c ****         else {
15610:../src/wolfcrypt/src/sp_int.c ****             DECL_SP_INT(t, a->used + 1);
 15865                             		.loc 2 15610 13
 15866 008b F9 A6 03 00             		mov.L	#0, 12[r10]
15611:../src/wolfcrypt/src/sp_int.c **** 
15612:../src/wolfcrypt/src/sp_int.c ****             ALLOC_SP_INT(t, a->used + 1, err, NULL);
 15867                             		.loc 2 15612 13
 15868 008f EC A5                   		mov.L	[r10], r5
 15869 0091 61 05                   		cmp	#0, r5
 15870 0093 21 2A                   		bne	.L1041
 15871                             		.loc 2 15612 13 is_stmt 0 discriminator 1
 15872 0095 ED A5 06                		mov.L	24[r10], r5
 15873 0098 EC 55                   		mov.L	[r5], r5
 15874 009a 75 05 FF                		cmp	#-1, r5
 15875 009d 20 0C                   		beq	.L1042
 15876                             		.loc 2 15612 13 discriminator 2
 15877 009f ED A5 06                		mov.L	24[r10], r5
 15878 00a2 EC 55                   		mov.L	[r5], r5
 15879 00a4 62 35                   		add	#3, r5
 15880 00a6 6C 25                   		shll	#2, r5
 15881 00a8 0B                      		bra	.L1043
 15882                             	.L1042:
 15883                             		.loc 2 15612 13 discriminator 3
 15884 00a9 66 C5                   		mov.L	#12, r5
 15885                             	.L1043:
 15886                             		.loc 2 15612 13 discriminator 5
 15887 00ab EF 51                   		mov.L	r5, r1
 15888 00ad 05 00 00 00             		bsr	_wolfSSL_Malloc
 15889 00b1 E7 A1 03                		mov.L	r1, 12[r10]
 15890 00b4 ED A5 03                		mov.L	12[r10], r5
 15891 00b7 61 05                   		cmp	#0, r5
 15892 00b9 1C                      		bne	.L1041
 15893                             		.loc 2 15612 13 discriminator 6
 15894 00ba F8 A6 FE                		mov.L	#-2, [r10]
 15895                             	.L1041:
15613:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 15896                             		.loc 2 15613 16 is_stmt 1
 15897 00bd EC A5                   		mov.L	[r10], r5
 15898 00bf 61 05                   		cmp	#0, r5
 15899 00c1 21 1B                   		bne	.L1044
15614:../src/wolfcrypt/src/sp_int.c ****         #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_SP_NO_MALLOC)
15615:../src/wolfcrypt/src/sp_int.c ****                 t->size = a->used + 1;
 15900                             		.loc 2 15615 28
 15901 00c3 ED A5 06                		mov.L	24[r10], r5
 15902 00c6 EC 55                   		mov.L	[r5], r5
 15903                             		.loc 2 15615 35
 15904 00c8 71 54 01                		add	#1, r5, r4
 15905                             		.loc 2 15615 25
 15906 00cb ED A5 03                		mov.L	12[r10], r5
 15907 00ce A0 5C                   		mov.L	r4, 4[r5]
15616:../src/wolfcrypt/src/sp_int.c ****         #endif /* WOLFSSL_SMALL_STACK && !WOLFSSL_SP_NO_MALLOC */
15617:../src/wolfcrypt/src/sp_int.c ****                 err = sp_copy(a, t);
 15908                             		.loc 2 15617 23
 15909 00d0 ED A2 03                		mov.L	12[r10], r2
 15910 00d3 ED A1 06                		mov.L	24[r10], r1
 15911 00d6 05 00 00 00             		bsr	_sp_copy
 15912 00da E3 A1                   		mov.L	r1, [r10]
 15913                             	.L1044:
15618:../src/wolfcrypt/src/sp_int.c ****             }
15619:../src/wolfcrypt/src/sp_int.c **** 
15620:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY) {
 15914                             		.loc 2 15620 16
 15915 00dc EC A5                   		mov.L	[r10], r5
 15916 00de 61 05                   		cmp	#0, r5
 15917 00e0 21 35                   		bne	.L1045
15621:../src/wolfcrypt/src/sp_int.c **** 
15622:../src/wolfcrypt/src/sp_int.c ****                 for (i = 0; !sp_iszero(t); i++) {
 15918                             		.loc 2 15622 24
 15919 00e2 F9 A6 02 00             		mov.L	#0, 8[r10]
 15920                             		.loc 2 15622 17
 15921 00e6 2E 1B                   		bra	.L1046
 15922                             	.L1047:
15623:../src/wolfcrypt/src/sp_int.c ****                     sp_div_d(t, 10, t, &d);
 15923                             		.loc 2 15623 21 discriminator 3
 15924 00e8 71 A5 14                		add	#20, r10, r5
 15925 00eb EF 54                   		mov.L	r5, r4
 15926 00ed ED A3 03                		mov.L	12[r10], r3
 15927 00f0 66 A2                   		mov.L	#10, r2
 15928 00f2 ED A1 03                		mov.L	12[r10], r1
 15929 00f5 05 00 00 00             		bsr	_sp_div_d
15622:../src/wolfcrypt/src/sp_int.c ****                     sp_div_d(t, 10, t, &d);
 15930                             		.loc 2 15622 45 discriminator 3
 15931 00f9 ED A5 02                		mov.L	8[r10], r5
 15932 00fc 62 15                   		add	#1, r5
 15933 00fe E7 A5 02                		mov.L	r5, 8[r10]
 15934                             	.L1046:
15622:../src/wolfcrypt/src/sp_int.c ****                     sp_div_d(t, 10, t, &d);
 15935                             		.loc 2 15622 30 discriminator 1
 15936 0101 ED A5 03                		mov.L	12[r10], r5
 15937 0104 EC 55                   		mov.L	[r5], r5
15622:../src/wolfcrypt/src/sp_int.c ****                     sp_div_d(t, 10, t, &d);
 15938                             		.loc 2 15622 17 discriminator 1
 15939 0106 61 05                   		cmp	#0, r5
 15940 0108 21 E0                   		bne	.L1047
15624:../src/wolfcrypt/src/sp_int.c ****                 }
15625:../src/wolfcrypt/src/sp_int.c ****             #ifdef WOLFSSL_SP_INT_NEGATIVE
15626:../src/wolfcrypt/src/sp_int.c ****                 if (a->sign == MP_NEG) {
15627:../src/wolfcrypt/src/sp_int.c ****                     i++;
15628:../src/wolfcrypt/src/sp_int.c ****                 }
15629:../src/wolfcrypt/src/sp_int.c ****             #endif /* WOLFSSL_SP_INT_NEGATIVE */
15630:../src/wolfcrypt/src/sp_int.c ****                 /* One more for \0 */
15631:../src/wolfcrypt/src/sp_int.c ****                 *size = i + 1;
 15941                             		.loc 2 15631 27
 15942 010a ED A5 02                		mov.L	8[r10], r5
 15943 010d 71 54 01                		add	#1, r5, r4
 15944                             		.loc 2 15631 23
 15945 0110 ED A5 08                		mov.L	32[r10], r5
 15946 0113 E3 54                   		mov.L	r4, [r5]
 15947                             	.L1045:
15632:../src/wolfcrypt/src/sp_int.c ****             }
15633:../src/wolfcrypt/src/sp_int.c **** 
15634:../src/wolfcrypt/src/sp_int.c ****             FREE_SP_INT(t, NULL);
 15948                             		.loc 2 15634 13
 15949 0115 ED A5 03                		mov.L	12[r10], r5
 15950 0118 61 05                   		cmp	#0, r5
 15951 011a 20 1A                   		beq	.L1032
 15952                             	.LBB98:
 15953                             		.loc 2 15634 13 is_stmt 0 discriminator 1
 15954 011c ED A5 03                		mov.L	12[r10], r5
 15955 011f E7 A5 04                		mov.L	r5, 16[r10]
 15956 0122 ED A5 04                		mov.L	16[r10], r5
 15957 0125 61 05                   		cmp	#0, r5
 15958 0127 20 0D                   		beq	.L1032
 15959                             		.loc 2 15634 13 discriminator 2
 15960 0129 ED A1 04                		mov.L	16[r10], r1
 15961 012c 05 00 00 00             		bsr	_wolfSSL_Free
 15962 0130 0C                      		bra	.L1032
 15963                             	.L1038:
 15964                             	.LBE98:
 15965                             	.LBE97:
 15966                             	.LBE96:
15635:../src/wolfcrypt/src/sp_int.c ****         }
15636:../src/wolfcrypt/src/sp_int.c ****     }
15637:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL || WOLFSSL_KEY_GEN || HAVE_COMP_KEY */
15638:../src/wolfcrypt/src/sp_int.c ****     else {
15639:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 15967                             		.loc 2 15639 13 is_stmt 1
 15968 0131 F8 A6 FD                		mov.L	#-3, [r10]
 15969                             		.balign 8,3,1
 15970                             	.L1032:
15640:../src/wolfcrypt/src/sp_int.c ****     }
15641:../src/wolfcrypt/src/sp_int.c **** 
15642:../src/wolfcrypt/src/sp_int.c ****     return err;
 15971                             		.loc 2 15642 12
 15972 0134 EC A5                   		mov.L	[r10], r5
15643:../src/wolfcrypt/src/sp_int.c **** }
 15973                             		.loc 2 15643 1
 15974 0136 EF 51                   		mov.L	r5, r1
 15975 0138 3F AA 0A                		rtsd	#40, r10-r10
 15976                             	.LFE130:
 15978 013b 77 10 01 00 00          		.section	.text.sp_prime_miller_rabin_ex,"ax",@progbits
 15980                             	_sp_prime_miller_rabin_ex:
 15981                             	.LFB131:
15644:../src/wolfcrypt/src/sp_int.c **** #endif /* (WOLFSSL_SP_MATH_ALL && !WOLFSSL_RSA_VERIFY_ONLY) || WC_MP_TO_RADIX */
15645:../src/wolfcrypt/src/sp_int.c **** 
15646:../src/wolfcrypt/src/sp_int.c **** /***************************************
15647:../src/wolfcrypt/src/sp_int.c ****  * Prime number generation and checking.
15648:../src/wolfcrypt/src/sp_int.c ****  ***************************************/
15649:../src/wolfcrypt/src/sp_int.c **** 
15650:../src/wolfcrypt/src/sp_int.c **** #if defined(WOLFSSL_KEY_GEN) && (!defined(NO_DH) || !defined(NO_DSA)) && \
15651:../src/wolfcrypt/src/sp_int.c ****     !defined(WC_NO_RNG)
15652:../src/wolfcrypt/src/sp_int.c **** /* Generate a random prime for RSA only.
15653:../src/wolfcrypt/src/sp_int.c ****  *
15654:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r     SP integer to hold result.
15655:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   len   Number of bytes in prime.
15656:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   rng   Random number generator.
15657:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   heap  Heap hint. Unused.
15658:../src/wolfcrypt/src/sp_int.c ****  *
15659:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success
15660:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when r or rng is NULL, length is not supported or random
15661:../src/wolfcrypt/src/sp_int.c ****  *          number generator fails.
15662:../src/wolfcrypt/src/sp_int.c ****  */
15663:../src/wolfcrypt/src/sp_int.c **** int sp_rand_prime(sp_int* r, int len, WC_RNG* rng, void* heap)
15664:../src/wolfcrypt/src/sp_int.c **** {
15665:../src/wolfcrypt/src/sp_int.c ****     static const int USE_BBS = 1;
15666:../src/wolfcrypt/src/sp_int.c ****     int   err = MP_OKAY;
15667:../src/wolfcrypt/src/sp_int.c ****     int   type = 0;
15668:../src/wolfcrypt/src/sp_int.c ****     int   isPrime = MP_NO;
15669:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_MATH_ALL
15670:../src/wolfcrypt/src/sp_int.c ****     int   bits = 0;
15671:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL */
15672:../src/wolfcrypt/src/sp_int.c **** 
15673:../src/wolfcrypt/src/sp_int.c ****     (void)heap;
15674:../src/wolfcrypt/src/sp_int.c **** 
15675:../src/wolfcrypt/src/sp_int.c ****     /* Check NULL parameters and 0 is not prime so 0 bytes is invalid. */
15676:../src/wolfcrypt/src/sp_int.c ****     if ((r == NULL) || (rng == NULL) || (len == 0)) {
15677:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
15678:../src/wolfcrypt/src/sp_int.c ****     }
15679:../src/wolfcrypt/src/sp_int.c **** 
15680:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
15681:../src/wolfcrypt/src/sp_int.c ****         /* get type */
15682:../src/wolfcrypt/src/sp_int.c ****         if (len < 0) {
15683:../src/wolfcrypt/src/sp_int.c ****             type = USE_BBS;
15684:../src/wolfcrypt/src/sp_int.c ****             len = -len;
15685:../src/wolfcrypt/src/sp_int.c ****         }
15686:../src/wolfcrypt/src/sp_int.c **** 
15687:../src/wolfcrypt/src/sp_int.c ****     #ifndef WOLFSSL_SP_MATH_ALL
15688:../src/wolfcrypt/src/sp_int.c ****         /* For minimal maths, support only what's in SP and needed for DH. */
15689:../src/wolfcrypt/src/sp_int.c ****     #if defined(WOLFSSL_HAVE_SP_DH) && defined(WOLFSSL_KEY_GEN)
15690:../src/wolfcrypt/src/sp_int.c ****         if (len == 32) {
15691:../src/wolfcrypt/src/sp_int.c ****         }
15692:../src/wolfcrypt/src/sp_int.c ****         else
15693:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_HAVE_SP_DH && WOLFSSL_KEY_GEN */
15694:../src/wolfcrypt/src/sp_int.c ****         /* Generate RSA primes that are half the modulus length. */
15695:../src/wolfcrypt/src/sp_int.c ****     #ifndef WOLFSSL_SP_NO_3072
15696:../src/wolfcrypt/src/sp_int.c ****         if ((len != 128) && (len != 192))
15697:../src/wolfcrypt/src/sp_int.c ****     #else
15698:../src/wolfcrypt/src/sp_int.c ****         if (len != 128)
15699:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_NO_3072 */
15700:../src/wolfcrypt/src/sp_int.c ****         {
15701:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
15702:../src/wolfcrypt/src/sp_int.c ****         }
15703:../src/wolfcrypt/src/sp_int.c ****     #endif /* !WOLFSSL_SP_MATH_ALL */
15704:../src/wolfcrypt/src/sp_int.c **** 
15705:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_INT_NEGATIVE
15706:../src/wolfcrypt/src/sp_int.c ****         r->sign = MP_ZPOS;
15707:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_INT_NEGATIVE */
15708:../src/wolfcrypt/src/sp_int.c ****         r->used = (len + SP_WORD_SIZEOF - 1) / SP_WORD_SIZEOF;
15709:../src/wolfcrypt/src/sp_int.c ****     #ifdef WOLFSSL_SP_MATH_ALL
15710:../src/wolfcrypt/src/sp_int.c ****         bits = (len * 8) & SP_WORD_MASK;
15711:../src/wolfcrypt/src/sp_int.c ****     #endif /* WOLFSSL_SP_MATH_ALL */
15712:../src/wolfcrypt/src/sp_int.c ****     }
15713:../src/wolfcrypt/src/sp_int.c **** 
15714:../src/wolfcrypt/src/sp_int.c ****     /* Assume the candidate is probably prime and then test until
15715:../src/wolfcrypt/src/sp_int.c ****      * it is proven composite. */
15716:../src/wolfcrypt/src/sp_int.c ****     while (err == MP_OKAY && isPrime == MP_NO) {
15717:../src/wolfcrypt/src/sp_int.c **** #ifdef SHOW_GEN
15718:../src/wolfcrypt/src/sp_int.c ****         printf(".");
15719:../src/wolfcrypt/src/sp_int.c ****         fflush(stdout);
15720:../src/wolfcrypt/src/sp_int.c **** #endif /* SHOW_GEN */
15721:../src/wolfcrypt/src/sp_int.c ****         /* generate value */
15722:../src/wolfcrypt/src/sp_int.c ****         err = wc_RNG_GenerateBlock(rng, (byte*)r->dp, len);
15723:../src/wolfcrypt/src/sp_int.c ****         if (err != 0) {
15724:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
15725:../src/wolfcrypt/src/sp_int.c ****             break;
15726:../src/wolfcrypt/src/sp_int.c ****         }
15727:../src/wolfcrypt/src/sp_int.c **** 
15728:../src/wolfcrypt/src/sp_int.c ****         /* munge bits */
15729:../src/wolfcrypt/src/sp_int.c **** #ifndef LITTLE_ENDIAN_ORDER
15730:../src/wolfcrypt/src/sp_int.c ****         ((byte*)(r->dp + r->used - 1))[0] |= 0x80 | 0x40;
15731:../src/wolfcrypt/src/sp_int.c **** #else
15732:../src/wolfcrypt/src/sp_int.c ****         ((byte*)r->dp)[len-1] |= 0x80 | 0x40;
15733:../src/wolfcrypt/src/sp_int.c **** #endif /* LITTLE_ENDIAN_ORDER */
15734:../src/wolfcrypt/src/sp_int.c ****         r->dp[0]              |= 0x01 | ((type & USE_BBS) ? 0x02 : 0x00);
15735:../src/wolfcrypt/src/sp_int.c **** 
15736:../src/wolfcrypt/src/sp_int.c **** #ifndef LITTLE_ENDIAN_ORDER
15737:../src/wolfcrypt/src/sp_int.c ****         if (((len * 8) & SP_WORD_MASK) != 0) {
15738:../src/wolfcrypt/src/sp_int.c ****             r->dp[r->used-1] >>= SP_WORD_SIZE - ((len * 8) & SP_WORD_MASK);
15739:../src/wolfcrypt/src/sp_int.c ****         }
15740:../src/wolfcrypt/src/sp_int.c **** #endif /* LITTLE_ENDIAN_ORDER */
15741:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_MATH_ALL
15742:../src/wolfcrypt/src/sp_int.c ****         if (bits > 0) {
15743:../src/wolfcrypt/src/sp_int.c ****             r->dp[r->used - 1] &= ((sp_int_digit)1 << bits) - 1;
15744:../src/wolfcrypt/src/sp_int.c ****         }
15745:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL */
15746:../src/wolfcrypt/src/sp_int.c **** 
15747:../src/wolfcrypt/src/sp_int.c ****         /* test */
15748:../src/wolfcrypt/src/sp_int.c ****         /* Running Miller-Rabin up to 3 times gives us a 2^{-80} chance
15749:../src/wolfcrypt/src/sp_int.c ****          * of a 1024-bit candidate being a false positive, when it is our
15750:../src/wolfcrypt/src/sp_int.c ****          * prime candidate. (Note 4.49 of Handbook of Applied Cryptography.)
15751:../src/wolfcrypt/src/sp_int.c ****          * Using 8 because we've always used 8 */
15752:../src/wolfcrypt/src/sp_int.c ****         sp_prime_is_prime_ex(r, 8, &isPrime, rng);
15753:../src/wolfcrypt/src/sp_int.c ****     }
15754:../src/wolfcrypt/src/sp_int.c **** 
15755:../src/wolfcrypt/src/sp_int.c ****     return err;
15756:../src/wolfcrypt/src/sp_int.c **** }
15757:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_KEY_GEN && (!NO_DH || !NO_DSA) && !WC_NO_RNG */
15758:../src/wolfcrypt/src/sp_int.c **** 
15759:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_PRIME_GEN
15760:../src/wolfcrypt/src/sp_int.c **** /* Miller-Rabin test of "a" to the base of "b" as described in
15761:../src/wolfcrypt/src/sp_int.c ****  * HAC pp. 139 Algorithm 4.24
15762:../src/wolfcrypt/src/sp_int.c ****  *
15763:../src/wolfcrypt/src/sp_int.c ****  * Sets result to 0 if definitely composite or 1 if probably prime.
15764:../src/wolfcrypt/src/sp_int.c ****  * Randomly the chance of error is no more than 1/4 and often
15765:../src/wolfcrypt/src/sp_int.c ****  * very much lower.
15766:../src/wolfcrypt/src/sp_int.c ****  *
15767:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a       SP integer to check.
15768:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b       SP integer that is a small prime.
15769:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  result  MP_YES when number is likey prime.
15770:../src/wolfcrypt/src/sp_int.c ****  *                        MP_NO otherwise.
15771:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   n1      SP integer temporary.
15772:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   y       SP integer temporary.
15773:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   r       SP integer temporary.
15774:../src/wolfcrypt/src/sp_int.c ****  *
15775:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15776:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
15777:../src/wolfcrypt/src/sp_int.c ****  */
15778:../src/wolfcrypt/src/sp_int.c **** static int sp_prime_miller_rabin_ex(sp_int* a, sp_int* b, int* result,
15779:../src/wolfcrypt/src/sp_int.c ****                                     sp_int* n1, sp_int* y, sp_int* r)
15780:../src/wolfcrypt/src/sp_int.c **** {
 15982                             		.loc 2 15780 1
 15983 0000 7E AA                   		push.l	r10
 15984                             	.LCFI188:
 15985 0002 7E A6                   		push.l	r6
 15986                             	.LCFI189:
 15987 0004 71 0A DC                		add	#-36, r0, r10
 15988                             	.LCFI190:
 15989 0007 EF A0                   		mov.L	r10, r0
 15990 0009 75 46 30                		mov.L	#48, r6
 15991 000c 4B A6                   		add	r10, r6
 15992 000e E7 A1 03                		mov.L	r1, 12[r10]
 15993 0011 E7 A2 04                		mov.L	r2, 16[r10]
 15994 0014 E7 A3 05                		mov.L	r3, 20[r10]
 15995 0017 E7 A4 06                		mov.L	r4, 24[r10]
15781:../src/wolfcrypt/src/sp_int.c ****     int s;
15782:../src/wolfcrypt/src/sp_int.c ****     int j;
15783:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 15996                             		.loc 2 15783 9
 15997 001a F9 A6 01 00             		mov.L	#0, 4[r10]
15784:../src/wolfcrypt/src/sp_int.c **** 
15785:../src/wolfcrypt/src/sp_int.c ****     /* default */
15786:../src/wolfcrypt/src/sp_int.c ****     *result = MP_NO;
 15998                             		.loc 2 15786 13
 15999 001e ED A5 05                		mov.L	20[r10], r5
 16000 0021 F8 56 00                		mov.L	#0, [r5]
15787:../src/wolfcrypt/src/sp_int.c **** 
15788:../src/wolfcrypt/src/sp_int.c ****     /* ensure b > 1 */
15789:../src/wolfcrypt/src/sp_int.c ****     if (sp_cmp_d(b, 1) == MP_GT) {
 16001                             		.loc 2 15789 9
 16002 0024 66 12                   		mov.L	#1, r2
 16003 0026 ED A1 04                		mov.L	16[r10], r1
 16004 0029 05 00 00 00             		bsr	_sp_cmp_d
 16005 002d EF 15                   		mov.L	r1, r5
 16006                             		.loc 2 15789 8
 16007 002f 61 15                   		cmp	#1, r5
 16008 0031 3B DF 00                		bne	.L1050
15790:../src/wolfcrypt/src/sp_int.c ****         /* get n1 = a - 1 */
15791:../src/wolfcrypt/src/sp_int.c ****         (void)sp_copy(a, n1);
 16009                             		.loc 2 15791 15
 16010 0034 ED A2 06                		mov.L	24[r10], r2
 16011 0037 ED A1 03                		mov.L	12[r10], r1
 16012 003a 05 00 00 00             		bsr	_sp_copy
15792:../src/wolfcrypt/src/sp_int.c ****         _sp_sub_d(n1, 1, n1);
 16013                             		.loc 2 15792 9
 16014 003e ED A3 06                		mov.L	24[r10], r3
 16015 0041 66 12                   		mov.L	#1, r2
 16016 0043 ED A1 06                		mov.L	24[r10], r1
 16017 0046 05 00 00 00             		bsr	__sp_sub_d
15793:../src/wolfcrypt/src/sp_int.c ****         /* set 2**s * r = n1 */
15794:../src/wolfcrypt/src/sp_int.c ****         (void)sp_copy(n1, r);
 16018                             		.loc 2 15794 15
 16019 004a A8 6A                   		mov.L	4[r6], r2
 16020 004c ED A1 06                		mov.L	24[r10], r1
 16021 004f 05 00 00 00             		bsr	_sp_copy
15795:../src/wolfcrypt/src/sp_int.c **** 
15796:../src/wolfcrypt/src/sp_int.c ****         /* count the number of least significant bits
15797:../src/wolfcrypt/src/sp_int.c ****          * which are zero
15798:../src/wolfcrypt/src/sp_int.c ****          */
15799:../src/wolfcrypt/src/sp_int.c ****         s = sp_cnt_lsb(r);
 16022                             		.loc 2 15799 13
 16023 0053 A8 69                   		mov.L	4[r6], r1
 16024 0055 05 00 00 00             		bsr	_sp_cnt_lsb
 16025 0059 E7 A1 02                		mov.L	r1, 8[r10]
15800:../src/wolfcrypt/src/sp_int.c **** 
15801:../src/wolfcrypt/src/sp_int.c ****         /* now divide n - 1 by 2**s */
15802:../src/wolfcrypt/src/sp_int.c ****         sp_rshb(r, s, r);
 16026                             		.loc 2 15802 9
 16027 005c A8 6B                   		mov.L	4[r6], r3
 16028 005e ED A2 02                		mov.L	8[r10], r2
 16029 0061 A8 69                   		mov.L	4[r6], r1
 16030 0063 05 00 00 00             		bsr	_sp_rshb
15803:../src/wolfcrypt/src/sp_int.c **** 
15804:../src/wolfcrypt/src/sp_int.c ****         /* compute y = b**r mod a */
15805:../src/wolfcrypt/src/sp_int.c ****         err = sp_exptmod(b, r, a, y);
 16031                             		.loc 2 15805 15
 16032 0067 EC 64                   		mov.L	[r6], r4
 16033 0069 ED A3 03                		mov.L	12[r10], r3
 16034 006c A8 6A                   		mov.L	4[r6], r2
 16035 006e ED A1 04                		mov.L	16[r10], r1
 16036 0071 05 00 00 00             		bsr	_sp_exptmod
 16037 0075 E7 A1 01                		mov.L	r1, 4[r10]
15806:../src/wolfcrypt/src/sp_int.c **** 
15807:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 16038                             		.loc 2 15807 12
 16039 0078 ED A5 01                		mov.L	4[r10], r5
 16040 007b 61 05                   		cmp	#0, r5
 16041 007d 3B 93 00                		bne	.L1050
15808:../src/wolfcrypt/src/sp_int.c ****             /* probably prime until shown otherwise */
15809:../src/wolfcrypt/src/sp_int.c ****             *result = MP_YES;
 16042                             		.loc 2 15809 21
 16043 0080 ED A5 05                		mov.L	20[r10], r5
 16044 0083 F8 56 01                		mov.L	#1, [r5]
15810:../src/wolfcrypt/src/sp_int.c **** 
15811:../src/wolfcrypt/src/sp_int.c ****             /* if y != 1 and y != n1 do */
15812:../src/wolfcrypt/src/sp_int.c ****             if ((sp_cmp_d(y, 1) != MP_EQ) && (_sp_cmp(y, n1) != MP_EQ)) {
 16045                             		.loc 2 15812 18
 16046 0086 66 12                   		mov.L	#1, r2
 16047 0088 EC 61                   		mov.L	[r6], r1
 16048 008a 05 00 00 00             		bsr	_sp_cmp_d
 16049 008e EF 15                   		mov.L	r1, r5
 16050                             		.loc 2 15812 16
 16051 0090 61 05                   		cmp	#0, r5
 16052 0092 20 7E                   		beq	.L1050
 16053                             		.loc 2 15812 47 discriminator 1
 16054 0094 ED A2 06                		mov.L	24[r10], r2
 16055 0097 EC 61                   		mov.L	[r6], r1
 16056 0099 05 00 00 00             		bsr	__sp_cmp
 16057 009d EF 15                   		mov.L	r1, r5
 16058                             		.loc 2 15812 43 discriminator 1
 16059 009f 61 05                   		cmp	#0, r5
 16060 00a1 20 6F                   		beq	.L1050
15813:../src/wolfcrypt/src/sp_int.c ****                 j = 1;
 16061                             		.loc 2 15813 19
 16062 00a3 F8 A6 01                		mov.L	#1, [r10]
15814:../src/wolfcrypt/src/sp_int.c ****                 /* while j <= s-1 and y != n1 */
15815:../src/wolfcrypt/src/sp_int.c ****                 while ((j <= (s - 1)) && (_sp_cmp(y, n1) != MP_EQ)) {
 16063                             		.loc 2 15815 23
 16064 00a6 2E 32                   		bra	.L1051
 16065                             	.L1055:
15816:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqrmod(y, a, y);
 16066                             		.loc 2 15816 27
 16067 00a8 EC 63                   		mov.L	[r6], r3
 16068 00aa ED A2 03                		mov.L	12[r10], r2
 16069 00ad EC 61                   		mov.L	[r6], r1
 16070 00af 05 00 00 00             		bsr	_sp_sqrmod
 16071 00b3 E7 A1 01                		mov.L	r1, 4[r10]
15817:../src/wolfcrypt/src/sp_int.c ****                     if (err != MP_OKAY) {
 16072                             		.loc 2 15817 24
 16073 00b6 ED A5 01                		mov.L	4[r10], r5
 16074 00b9 61 05                   		cmp	#0, r5
 16075 00bb 21 37                   		bne	.L1057
15818:../src/wolfcrypt/src/sp_int.c ****                         break;
15819:../src/wolfcrypt/src/sp_int.c ****                     }
15820:../src/wolfcrypt/src/sp_int.c **** 
15821:../src/wolfcrypt/src/sp_int.c ****                     /* if y == 1 then composite */
15822:../src/wolfcrypt/src/sp_int.c ****                     if (sp_cmp_d(y, 1) == MP_EQ) {
 16076                             		.loc 2 15822 25
 16077 00bd 66 12                   		mov.L	#1, r2
 16078 00bf EC 61                   		mov.L	[r6], r1
 16079 00c1 05 00 00 00             		bsr	_sp_cmp_d
 16080 00c5 EF 15                   		mov.L	r1, r5
 16081                             		.loc 2 15822 24
 16082 00c7 61 05                   		cmp	#0, r5
 16083 00c9 19                      		bne	.L1054
15823:../src/wolfcrypt/src/sp_int.c ****                         *result = MP_NO;
 16084                             		.loc 2 15823 33
 16085 00ca ED A5 05                		mov.L	20[r10], r5
 16086 00cd F8 56 00                		mov.L	#0, [r5]
15824:../src/wolfcrypt/src/sp_int.c ****                         break;
 16087                             		.loc 2 15824 25
 16088 00d0 2E 23                   		bra	.L1053
 16089                             	.L1054:
15825:../src/wolfcrypt/src/sp_int.c ****                     }
15826:../src/wolfcrypt/src/sp_int.c ****                     ++j;
 16090                             		.loc 2 15826 21
 16091 00d2 EC A5                   		mov.L	[r10], r5
 16092 00d4 62 15                   		add	#1, r5
 16093 00d6 E3 A5                   		mov.L	r5, [r10]
 16094                             	.L1051:
15815:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqrmod(y, a, y);
 16095                             		.loc 2 15815 23
 16096 00d8 ED A4 02                		mov.L	8[r10], r4
 16097 00db EC A5                   		mov.L	[r10], r5
 16098 00dd 47 54                   		cmp	r5, r4
 16099 00df 2B 14                   		ble	.L1053
15815:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqrmod(y, a, y);
 16100                             		.loc 2 15815 43 discriminator 1
 16101 00e1 ED A2 06                		mov.L	24[r10], r2
 16102 00e4 EC 61                   		mov.L	[r6], r1
 16103 00e6 05 00 00 00             		bsr	__sp_cmp
 16104 00ea EF 15                   		mov.L	r1, r5
15815:../src/wolfcrypt/src/sp_int.c ****                     err = sp_sqrmod(y, a, y);
 16105                             		.loc 2 15815 39 discriminator 1
 16106 00ec 61 05                   		cmp	#0, r5
 16107 00ee 21 BA                   		bne	.L1055
 16108 00f0 2E 03                   		bra	.L1053
 16109                             	.L1057:
15818:../src/wolfcrypt/src/sp_int.c ****                     }
 16110                             		.loc 2 15818 25
 16111 00f2 03                      		nop
 16112                             		.balign 8,3,1
 16113                             	.L1053:
15827:../src/wolfcrypt/src/sp_int.c ****                 }
15828:../src/wolfcrypt/src/sp_int.c **** 
15829:../src/wolfcrypt/src/sp_int.c ****                 /* if y != n1 then composite */
15830:../src/wolfcrypt/src/sp_int.c ****                 if ((*result == MP_YES) && (_sp_cmp(y, n1) != MP_EQ)) {
 16114                             		.loc 2 15830 22
 16115 00f3 ED A5 05                		mov.L	20[r10], r5
 16116 00f6 EC 55                   		mov.L	[r5], r5
 16117                             		.loc 2 15830 20
 16118 00f8 61 15                   		cmp	#1, r5
 16119 00fa 21 16                   		bne	.L1050
 16120                             		.loc 2 15830 45 discriminator 1
 16121 00fc ED A2 06                		mov.L	24[r10], r2
 16122 00ff EC 61                   		mov.L	[r6], r1
 16123 0101 05 00 00 00             		bsr	__sp_cmp
 16124 0105 EF 15                   		mov.L	r1, r5
 16125                             		.loc 2 15830 41 discriminator 1
 16126 0107 61 05                   		cmp	#0, r5
 16127 0109 17                      		beq	.L1050
15831:../src/wolfcrypt/src/sp_int.c ****                     *result = MP_NO;
 16128                             		.loc 2 15831 29
 16129 010a ED A5 05                		mov.L	20[r10], r5
 16130 010d F8 56 00                		mov.L	#0, [r5]
 16131                             		.balign 8,3,1
 16132                             	.L1050:
15832:../src/wolfcrypt/src/sp_int.c ****                 }
15833:../src/wolfcrypt/src/sp_int.c ****             }
15834:../src/wolfcrypt/src/sp_int.c ****         }
15835:../src/wolfcrypt/src/sp_int.c ****     }
15836:../src/wolfcrypt/src/sp_int.c **** 
15837:../src/wolfcrypt/src/sp_int.c ****     return err;
 16133                             		.loc 2 15837 12
 16134 0110 ED A5 01                		mov.L	4[r10], r5
15838:../src/wolfcrypt/src/sp_int.c **** }
 16135                             		.loc 2 15838 1
 16136 0113 EF 51                   		mov.L	r5, r1
 16137 0115 71 00 24                		add	#36, r0
 16138 0118 7E B6                   		pop	r6
 16139 011a 7E BA                   		pop	r10
 16140 011c 02                      		rts
 16141                             	.LFE131:
 16143 011d FC 13 00                		.section	.text.sp_prime_miller_rabin,"ax",@progbits
 16145                             	_sp_prime_miller_rabin:
 16146                             	.LFB132:
15839:../src/wolfcrypt/src/sp_int.c **** 
15840:../src/wolfcrypt/src/sp_int.c **** /* Miller-Rabin test of "a" to the base of "b" as described in
15841:../src/wolfcrypt/src/sp_int.c ****  * HAC pp. 139 Algorithm 4.24
15842:../src/wolfcrypt/src/sp_int.c ****  *
15843:../src/wolfcrypt/src/sp_int.c ****  * Sets result to 0 if definitely composite or 1 if probably prime.
15844:../src/wolfcrypt/src/sp_int.c ****  * Randomly the chance of error is no more than 1/4 and often
15845:../src/wolfcrypt/src/sp_int.c ****  * very much lower.
15846:../src/wolfcrypt/src/sp_int.c ****  *
15847:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a       SP integer to check.
15848:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b       SP integer that is a small prime.
15849:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  result  MP_YES when number is likey prime.
15850:../src/wolfcrypt/src/sp_int.c ****  *                        MP_NO otherwise.
15851:../src/wolfcrypt/src/sp_int.c ****  *
15852:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15853:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
15854:../src/wolfcrypt/src/sp_int.c ****  */
15855:../src/wolfcrypt/src/sp_int.c **** static int sp_prime_miller_rabin(sp_int* a, sp_int* b, int* result)
15856:../src/wolfcrypt/src/sp_int.c **** {
 16147                             		.loc 2 15856 1
 16148 0000 7E AA                   		push.l	r10
 16149                             	.LCFI191:
 16150 0002 71 0A CC                		add	#-52, r0, r10
 16151                             	.LCFI192:
 16152 0005 71 A0 F8                		add	#-8, r10, r0
 16153                             	.LCFI193:
 16154 0008 E7 A1 0A                		mov.L	r1, 40[r10]
 16155 000b E7 A2 0B                		mov.L	r2, 44[r10]
 16156 000e E7 A3 0C                		mov.L	r3, 48[r10]
15857:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 16157                             		.loc 2 15857 9
 16158 0011 F8 A6 00                		mov.L	#0, [r10]
15858:../src/wolfcrypt/src/sp_int.c ****     sp_int *n1;
15859:../src/wolfcrypt/src/sp_int.c ****     sp_int *y;
15860:../src/wolfcrypt/src/sp_int.c ****     sp_int *r;
15861:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, a->used * 2 + 1, 3);
 16159                             		.loc 2 15861 5
 16160 0014 F9 A6 01 00             		mov.L	#0, 4[r10]
 16161 0018 71 A5 1C                		add	#28, r10, r5
 16162 001b EF 51                   		mov.L	r5, r1
 16163 001d 66 C3                   		mov.L	#12, r3
 16164 001f 66 02                   		mov	#0, r2
 16165 0021 7F 88                   		sstr.b
15862:../src/wolfcrypt/src/sp_int.c **** 
15863:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, a->used * 2 + 1, 3, err, NULL);
 16166                             		.loc 2 15863 5
 16167 0023 EC A5                   		mov.L	[r10], r5
 16168 0025 61 05                   		cmp	#0, r5
 16169 0027 3B A1 00                		bne	.L1059
 16170                             		.loc 2 15863 5 is_stmt 0 discriminator 1
 16171 002a ED A5 0A                		mov.L	40[r10], r5
 16172 002d EC 55                   		mov.L	[r5], r5
 16173 002f 4B 55                   		add	r5, r5
 16174 0031 75 05 FF                		cmp	#-1, r5
 16175 0034 20 0E                   		beq	.L1060
 16176                             		.loc 2 15863 5 discriminator 2
 16177 0036 ED A5 0A                		mov.L	40[r10], r5
 16178 0039 EC 55                   		mov.L	[r5], r5
 16179 003b 75 15 18                		mul	#24, r5
 16180 003e 71 55 24                		add	#36, r5
 16181 0041 0C                      		bra	.L1061
 16182                             	.L1060:
 16183                             		.loc 2 15863 5 discriminator 3
 16184 0042 75 45 24                		mov.L	#36, r5
 16185                             	.L1061:
 16186                             		.loc 2 15863 5 discriminator 5
 16187 0045 EF 51                   		mov.L	r5, r1
 16188 0047 05 00 00 00             		bsr	_wolfSSL_Malloc
 16189 004b E7 A1 01                		mov.L	r1, 4[r10]
 16190 004e ED A5 01                		mov.L	4[r10], r5
 16191 0051 61 05                   		cmp	#0, r5
 16192 0053 1E                      		bne	.L1062
 16193                             		.loc 2 15863 5 discriminator 6
 16194 0054 F8 A6 FE                		mov.L	#-2, [r10]
 16195 0057 2E 71                   		bra	.L1059
 16196                             	.L1062:
 16197                             	.LBB99:
 16198                             		.loc 2 15863 5 discriminator 7
 16199 0059 ED A5 01                		mov.L	4[r10], r5
 16200 005c E7 A5 07                		mov.L	r5, 28[r10]
 16201 005f ED A5 0A                		mov.L	40[r10], r5
 16202 0062 EC 55                   		mov.L	[r5], r5
 16203 0064 4B 55                   		add	r5, r5
 16204 0066 EF 54                   		mov.L	r5, r4
 16205 0068 ED A5 07                		mov.L	28[r10], r5
 16206 006b 62 14                   		add	#1, r4
 16207 006d A0 5C                   		mov.L	r4, 4[r5]
 16208 006f F9 A6 02 01             		mov.L	#1, 8[r10]
 16209 0073 2E 4E                   		bra	.L1063
 16210                             	.L1066:
 16211                             		.loc 2 15863 5 discriminator 14
 16212 0075 ED A5 02                		mov.L	8[r10], r5
 16213 0078 60 15                   		sub	#1, r5
 16214 007a 6C 25                   		shll	#2, r5
 16215 007c 4B A5                   		add	r10, r5
 16216 007e A9 DC                   		mov.L	28[r5], r4
 16217 0080 ED A5 0A                		mov.L	40[r10], r5
 16218 0083 EC 55                   		mov.L	[r5], r5
 16219 0085 4B 55                   		add	r5, r5
 16220 0087 75 05 FF                		cmp	#-1, r5
 16221 008a 20 0C                   		beq	.L1064
 16222                             		.loc 2 15863 5 discriminator 9
 16223 008c ED A5 0A                		mov.L	40[r10], r5
 16224 008f EC 55                   		mov.L	[r5], r5
 16225 0091 6C 35                   		shll	#3, r5
 16226 0093 62 C5                   		add	#12, r5
 16227 0095 0B                      		bra	.L1065
 16228                             	.L1064:
 16229                             		.loc 2 15863 5 discriminator 10
 16230 0096 66 C5                   		mov.L	#12, r5
 16231                             	.L1065:
 16232                             		.loc 2 15863 5 discriminator 12
 16233 0098 4B 54                   		add	r5, r4
 16234 009a ED A5 02                		mov.L	8[r10], r5
 16235 009d 6C 25                   		shll	#2, r5
 16236 009f 4B A5                   		add	r10, r5
 16237 00a1 A1 DC                   		mov.L	r4, 28[r5]
 16238 00a3 ED A5 0A                		mov.L	40[r10], r5
 16239 00a6 EC 55                   		mov.L	[r5], r5
 16240 00a8 4B 55                   		add	r5, r5
 16241 00aa EF 54                   		mov.L	r5, r4
 16242 00ac ED A5 02                		mov.L	8[r10], r5
 16243 00af 6C 25                   		shll	#2, r5
 16244 00b1 4B A5                   		add	r10, r5
 16245 00b3 A9 DD                   		mov.L	28[r5], r5
 16246 00b5 62 14                   		add	#1, r4
 16247 00b7 A0 5C                   		mov.L	r4, 4[r5]
 16248 00b9 ED A5 02                		mov.L	8[r10], r5
 16249 00bc 62 15                   		add	#1, r5
 16250 00be E7 A5 02                		mov.L	r5, 8[r10]
 16251                             	.L1063:
 16252                             		.loc 2 15863 5 discriminator 13
 16253 00c1 ED A5 02                		mov.L	8[r10], r5
 16254 00c4 61 25                   		cmp	#2, r5
 16255 00c6 2B AF                   		ble	.L1066
 16256                             	.L1059:
 16257                             	.LBE99:
15864:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
 16258                             		.loc 2 15864 8 is_stmt 1
 16259 00c8 EC A5                   		mov.L	[r10], r5
 16260 00ca 61 05                   		cmp	#0, r5
 16261 00cc 21 7B                   		bne	.L1067
15865:../src/wolfcrypt/src/sp_int.c ****         n1 = t[0];
 16262                             		.loc 2 15865 12
 16263 00ce ED A5 07                		mov.L	28[r10], r5
 16264 00d1 E7 A5 03                		mov.L	r5, 12[r10]
15866:../src/wolfcrypt/src/sp_int.c ****         y  = t[1];
 16265                             		.loc 2 15866 12
 16266 00d4 ED A5 08                		mov.L	32[r10], r5
 16267 00d7 E7 A5 04                		mov.L	r5, 16[r10]
15867:../src/wolfcrypt/src/sp_int.c ****         r  = t[2];
 16268                             		.loc 2 15867 12
 16269 00da ED A5 09                		mov.L	36[r10], r5
 16270 00dd E7 A5 05                		mov.L	r5, 20[r10]
15868:../src/wolfcrypt/src/sp_int.c **** 
15869:../src/wolfcrypt/src/sp_int.c ****         /* Only 'y' needs to be twice as big. */
15870:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(n1, a->used * 2 + 1);
 16271                             		.loc 2 15870 27
 16272 00e0 ED A5 0A                		mov.L	40[r10], r5
 16273 00e3 EC 55                   		mov.L	[r5], r5
 16274                             		.loc 2 15870 34
 16275 00e5 4B 55                   		add	r5, r5
 16276                             		.loc 2 15870 9
 16277 00e7 62 15                   		add	#1, r5
 16278 00e9 EF 52                   		mov.L	r5, r2
 16279 00eb ED A1 03                		mov.L	12[r10], r1
 16280 00ee 05 00 00 00             		bsr	_sp_init_size
15871:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(y, a->used * 2 + 1);
 16281                             		.loc 2 15871 26
 16282 00f2 ED A5 0A                		mov.L	40[r10], r5
 16283 00f5 EC 55                   		mov.L	[r5], r5
 16284                             		.loc 2 15871 33
 16285 00f7 4B 55                   		add	r5, r5
 16286                             		.loc 2 15871 9
 16287 00f9 62 15                   		add	#1, r5
 16288 00fb EF 52                   		mov.L	r5, r2
 16289 00fd ED A1 04                		mov.L	16[r10], r1
 16290 0100 05 00 00 00             		bsr	_sp_init_size
15872:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(r, a->used * 2 + 1);
 16291                             		.loc 2 15872 26
 16292 0104 ED A5 0A                		mov.L	40[r10], r5
 16293 0107 EC 55                   		mov.L	[r5], r5
 16294                             		.loc 2 15872 33
 16295 0109 4B 55                   		add	r5, r5
 16296                             		.loc 2 15872 9
 16297 010b 62 15                   		add	#1, r5
 16298 010d EF 52                   		mov.L	r5, r2
 16299 010f ED A1 05                		mov.L	20[r10], r1
 16300 0112 05 00 00 00             		bsr	_sp_init_size
15873:../src/wolfcrypt/src/sp_int.c **** 
15874:../src/wolfcrypt/src/sp_int.c ****         err = sp_prime_miller_rabin_ex(a, b, result, n1, y, r);
 16301                             		.loc 2 15874 15
 16302 0116 ED A5 05                		mov.L	20[r10], r5
 16303 0119 A0 0D                   		mov.L	r5, 4[r0]
 16304 011b ED A5 04                		mov.L	16[r10], r5
 16305 011e E3 05                   		mov.L	r5, [r0]
 16306 0120 ED A4 03                		mov.L	12[r10], r4
 16307 0123 ED A3 0C                		mov.L	48[r10], r3
 16308 0126 ED A2 0B                		mov.L	44[r10], r2
 16309 0129 ED A1 0A                		mov.L	40[r10], r1
 16310 012c 05 00 00 00             		bsr	_sp_prime_miller_rabin_ex
 16311 0130 E3 A1                   		mov.L	r1, [r10]
15875:../src/wolfcrypt/src/sp_int.c **** 
15876:../src/wolfcrypt/src/sp_int.c ****         sp_clear(n1);
 16312                             		.loc 2 15876 9
 16313 0132 ED A1 03                		mov.L	12[r10], r1
 16314 0135 05 00 00 00             		bsr	_sp_clear
15877:../src/wolfcrypt/src/sp_int.c ****         sp_clear(y);
 16315                             		.loc 2 15877 9
 16316 0139 ED A1 04                		mov.L	16[r10], r1
 16317 013c 05 00 00 00             		bsr	_sp_clear
15878:../src/wolfcrypt/src/sp_int.c ****         sp_clear(r);
 16318                             		.loc 2 15878 9
 16319 0140 ED A1 05                		mov.L	20[r10], r1
 16320 0143 05 00 00 00             		bsr	_sp_clear
 16321                             	.L1067:
15879:../src/wolfcrypt/src/sp_int.c ****     }
15880:../src/wolfcrypt/src/sp_int.c **** 
15881:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
 16322                             		.loc 2 15881 5
 16323 0147 ED A5 01                		mov.L	4[r10], r5
 16324 014a 61 05                   		cmp	#0, r5
 16325 014c 20 15                   		beq	.L1068
 16326                             	.LBB100:
 16327                             		.loc 2 15881 5 is_stmt 0 discriminator 1
 16328 014e ED A5 01                		mov.L	4[r10], r5
 16329 0151 E7 A5 06                		mov.L	r5, 24[r10]
 16330 0154 ED A5 06                		mov.L	24[r10], r5
 16331 0157 61 05                   		cmp	#0, r5
 16332 0159 10                      		beq	.L1068
 16333                             		.loc 2 15881 5 discriminator 2
 16334 015a ED A1 06                		mov.L	24[r10], r1
 16335 015d 05 00 00 00             		bsr	_wolfSSL_Free
 16336                             	.L1068:
 16337                             	.LBE100:
15882:../src/wolfcrypt/src/sp_int.c ****     return err;
 16338                             		.loc 2 15882 12 is_stmt 1
 16339 0161 EC A5                   		mov.L	[r10], r5
15883:../src/wolfcrypt/src/sp_int.c **** }
 16340                             		.loc 2 15883 1
 16341 0163 EF 51                   		mov.L	r5, r1
 16342 0165 3F AA 10                		rtsd	#64, r10-r10
 16343                             	.LFE132:
 16345                             		.section	.rodata.sp_primes,"a"
 16346                             		.balign 4
 16349                             	_sp_primes:
 16350 0000 02 00 00 00             		.long	2
 16351 0004 03 00 00 00             		.long	3
 16352 0008 05 00 00 00             		.long	5
 16353 000c 07 00 00 00             		.long	7
 16354 0010 0B 00 00 00             		.long	11
 16355 0014 0D 00 00 00             		.long	13
 16356 0018 11 00 00 00             		.long	17
 16357 001c 13 00 00 00             		.long	19
 16358 0020 17 00 00 00             		.long	23
 16359 0024 1D 00 00 00             		.long	29
 16360 0028 1F 00 00 00             		.long	31
 16361 002c 25 00 00 00             		.long	37
 16362 0030 29 00 00 00             		.long	41
 16363 0034 2B 00 00 00             		.long	43
 16364 0038 2F 00 00 00             		.long	47
 16365 003c 35 00 00 00             		.long	53
 16366 0040 3B 00 00 00             		.long	59
 16367 0044 3D 00 00 00             		.long	61
 16368 0048 43 00 00 00             		.long	0x43
 16369 004c 47 00 00 00             		.long	0x47
 16370 0050 49 00 00 00             		.long	0x49
 16371 0054 4F 00 00 00             		.long	0x4f
 16372 0058 53 00 00 00             		.long	0x53
 16373 005c 59 00 00 00             		.long	0x59
 16374 0060 61 00 00 00             		.long	0x61
 16375 0064 65 00 00 00             		.long	0x65
 16376 0068 67 00 00 00             		.long	0x67
 16377 006c 6B 00 00 00             		.long	0x6b
 16378 0070 6D 00 00 00             		.long	0x6d
 16379 0074 71 00 00 00             		.long	0x71
 16380 0078 7F 00 00 00             		.long	0x7f
 16381 007c 83 00 00 00             		.long	0x83
 16382 0080 89 00 00 00             		.long	0x89
 16383 0084 8B 00 00 00             		.long	0x8b
 16384 0088 95 00 00 00             		.long	0x95
 16385 008c 97 00 00 00             		.long	0x97
 16386 0090 9D 00 00 00             		.long	0x9d
 16387 0094 A3 00 00 00             		.long	0xa3
 16388 0098 A7 00 00 00             		.long	0xa7
 16389 009c AD 00 00 00             		.long	0xad
 16390 00a0 B3 00 00 00             		.long	0xb3
 16391 00a4 B5 00 00 00             		.long	0xb5
 16392 00a8 BF 00 00 00             		.long	0xbf
 16393 00ac C1 00 00 00             		.long	0xc1
 16394 00b0 C5 00 00 00             		.long	0xc5
 16395 00b4 C7 00 00 00             		.long	0xc7
 16396 00b8 D3 00 00 00             		.long	0xd3
 16397 00bc DF 00 00 00             		.long	0xdf
 16398 00c0 E3 00 00 00             		.long	0xe3
 16399 00c4 E5 00 00 00             		.long	0xe5
 16400 00c8 E9 00 00 00             		.long	0xe9
 16401 00cc EF 00 00 00             		.long	0xef
 16402 00d0 F1 00 00 00             		.long	0xf1
 16403 00d4 FB 00 00 00             		.long	0xfb
 16404 00d8 01 01 00 00             		.long	0x101
 16405 00dc 07 01 00 00             		.long	0x107
 16406 00e0 0D 01 00 00             		.long	0x10d
 16407 00e4 0F 01 00 00             		.long	0x10f
 16408 00e8 15 01 00 00             		.long	0x115
 16409 00ec 19 01 00 00             		.long	0x119
 16410 00f0 1B 01 00 00             		.long	0x11b
 16411 00f4 25 01 00 00             		.long	0x125
 16412 00f8 33 01 00 00             		.long	0x133
 16413 00fc 37 01 00 00             		.long	0x137
 16414 0100 39 01 00 00             		.long	0x139
 16415 0104 3D 01 00 00             		.long	0x13d
 16416 0108 4B 01 00 00             		.long	0x14b
 16417 010c 51 01 00 00             		.long	0x151
 16418 0110 5B 01 00 00             		.long	0x15b
 16419 0114 5D 01 00 00             		.long	0x15d
 16420 0118 61 01 00 00             		.long	0x161
 16421 011c 67 01 00 00             		.long	0x167
 16422 0120 6F 01 00 00             		.long	0x16f
 16423 0124 75 01 00 00             		.long	0x175
 16424 0128 7B 01 00 00             		.long	0x17b
 16425 012c 7F 01 00 00             		.long	0x17f
 16426 0130 85 01 00 00             		.long	0x185
 16427 0134 8D 01 00 00             		.long	0x18d
 16428 0138 91 01 00 00             		.long	0x191
 16429 013c 99 01 00 00             		.long	0x199
 16430 0140 A3 01 00 00             		.long	0x1a3
 16431 0144 A5 01 00 00             		.long	0x1a5
 16432 0148 AF 01 00 00             		.long	0x1af
 16433 014c B1 01 00 00             		.long	0x1b1
 16434 0150 B7 01 00 00             		.long	0x1b7
 16435 0154 BB 01 00 00             		.long	0x1bb
 16436 0158 C1 01 00 00             		.long	0x1c1
 16437 015c C9 01 00 00             		.long	0x1c9
 16438 0160 CD 01 00 00             		.long	0x1cd
 16439 0164 CF 01 00 00             		.long	0x1cf
 16440 0168 D3 01 00 00             		.long	0x1d3
 16441 016c DF 01 00 00             		.long	0x1df
 16442 0170 E7 01 00 00             		.long	0x1e7
 16443 0174 EB 01 00 00             		.long	0x1eb
 16444 0178 F3 01 00 00             		.long	0x1f3
 16445 017c F7 01 00 00             		.long	0x1f7
 16446 0180 FD 01 00 00             		.long	0x1fd
 16447 0184 09 02 00 00             		.long	0x209
 16448 0188 0B 02 00 00             		.long	0x20b
 16449 018c 1D 02 00 00             		.long	0x21d
 16450 0190 23 02 00 00             		.long	0x223
 16451 0194 2D 02 00 00             		.long	0x22d
 16452 0198 33 02 00 00             		.long	0x233
 16453 019c 39 02 00 00             		.long	0x239
 16454 01a0 3B 02 00 00             		.long	0x23b
 16455 01a4 41 02 00 00             		.long	0x241
 16456 01a8 4B 02 00 00             		.long	0x24b
 16457 01ac 51 02 00 00             		.long	0x251
 16458 01b0 57 02 00 00             		.long	0x257
 16459 01b4 59 02 00 00             		.long	0x259
 16460 01b8 5F 02 00 00             		.long	0x25f
 16461 01bc 65 02 00 00             		.long	0x265
 16462 01c0 69 02 00 00             		.long	0x269
 16463 01c4 6B 02 00 00             		.long	0x26b
 16464 01c8 77 02 00 00             		.long	0x277
 16465 01cc 81 02 00 00             		.long	0x281
 16466 01d0 83 02 00 00             		.long	0x283
 16467 01d4 87 02 00 00             		.long	0x287
 16468 01d8 8D 02 00 00             		.long	0x28d
 16469 01dc 93 02 00 00             		.long	0x293
 16470 01e0 95 02 00 00             		.long	0x295
 16471 01e4 A1 02 00 00             		.long	0x2a1
 16472 01e8 A5 02 00 00             		.long	0x2a5
 16473 01ec AB 02 00 00             		.long	0x2ab
 16474 01f0 B3 02 00 00             		.long	0x2b3
 16475 01f4 BD 02 00 00             		.long	0x2bd
 16476 01f8 C5 02 00 00             		.long	0x2c5
 16477 01fc CF 02 00 00             		.long	0x2cf
 16478 0200 D7 02 00 00             		.long	0x2d7
 16479 0204 DD 02 00 00             		.long	0x2dd
 16480 0208 E3 02 00 00             		.long	0x2e3
 16481 020c E7 02 00 00             		.long	0x2e7
 16482 0210 EF 02 00 00             		.long	0x2ef
 16483 0214 F5 02 00 00             		.long	0x2f5
 16484 0218 F9 02 00 00             		.long	0x2f9
 16485 021c 01 03 00 00             		.long	0x301
 16486 0220 05 03 00 00             		.long	0x305
 16487 0224 13 03 00 00             		.long	0x313
 16488 0228 1D 03 00 00             		.long	0x31d
 16489 022c 29 03 00 00             		.long	0x329
 16490 0230 2B 03 00 00             		.long	0x32b
 16491 0234 35 03 00 00             		.long	0x335
 16492 0238 37 03 00 00             		.long	0x337
 16493 023c 3B 03 00 00             		.long	0x33b
 16494 0240 3D 03 00 00             		.long	0x33d
 16495 0244 47 03 00 00             		.long	0x347
 16496 0248 55 03 00 00             		.long	0x355
 16497 024c 59 03 00 00             		.long	0x359
 16498 0250 5B 03 00 00             		.long	0x35b
 16499 0254 5F 03 00 00             		.long	0x35f
 16500 0258 6D 03 00 00             		.long	0x36d
 16501 025c 71 03 00 00             		.long	0x371
 16502 0260 73 03 00 00             		.long	0x373
 16503 0264 77 03 00 00             		.long	0x377
 16504 0268 8B 03 00 00             		.long	0x38b
 16505 026c 8F 03 00 00             		.long	0x38f
 16506 0270 97 03 00 00             		.long	0x397
 16507 0274 A1 03 00 00             		.long	0x3a1
 16508 0278 A9 03 00 00             		.long	0x3a9
 16509 027c AD 03 00 00             		.long	0x3ad
 16510 0280 B3 03 00 00             		.long	0x3b3
 16511 0284 B9 03 00 00             		.long	0x3b9
 16512 0288 C7 03 00 00             		.long	0x3c7
 16513 028c CB 03 00 00             		.long	0x3cb
 16514 0290 D1 03 00 00             		.long	0x3d1
 16515 0294 D7 03 00 00             		.long	0x3d7
 16516 0298 DF 03 00 00             		.long	0x3df
 16517 029c E5 03 00 00             		.long	0x3e5
 16518 02a0 F1 03 00 00             		.long	0x3f1
 16519 02a4 F5 03 00 00             		.long	0x3f5
 16520 02a8 FB 03 00 00             		.long	0x3fb
 16521 02ac FD 03 00 00             		.long	0x3fd
 16522 02b0 07 04 00 00             		.long	0x407
 16523 02b4 09 04 00 00             		.long	0x409
 16524 02b8 0F 04 00 00             		.long	0x40f
 16525 02bc 19 04 00 00             		.long	0x419
 16526 02c0 1B 04 00 00             		.long	0x41b
 16527 02c4 25 04 00 00             		.long	0x425
 16528 02c8 27 04 00 00             		.long	0x427
 16529 02cc 2D 04 00 00             		.long	0x42d
 16530 02d0 3F 04 00 00             		.long	0x43f
 16531 02d4 43 04 00 00             		.long	0x443
 16532 02d8 45 04 00 00             		.long	0x445
 16533 02dc 49 04 00 00             		.long	0x449
 16534 02e0 4F 04 00 00             		.long	0x44f
 16535 02e4 55 04 00 00             		.long	0x455
 16536 02e8 5D 04 00 00             		.long	0x45d
 16537 02ec 63 04 00 00             		.long	0x463
 16538 02f0 69 04 00 00             		.long	0x469
 16539 02f4 7F 04 00 00             		.long	0x47f
 16540 02f8 81 04 00 00             		.long	0x481
 16541 02fc 8B 04 00 00             		.long	0x48b
 16542 0300 93 04 00 00             		.long	0x493
 16543 0304 9D 04 00 00             		.long	0x49d
 16544 0308 A3 04 00 00             		.long	0x4a3
 16545 030c A9 04 00 00             		.long	0x4a9
 16546 0310 B1 04 00 00             		.long	0x4b1
 16547 0314 BD 04 00 00             		.long	0x4bd
 16548 0318 C1 04 00 00             		.long	0x4c1
 16549 031c C7 04 00 00             		.long	0x4c7
 16550 0320 CD 04 00 00             		.long	0x4cd
 16551 0324 CF 04 00 00             		.long	0x4cf
 16552 0328 D5 04 00 00             		.long	0x4d5
 16553 032c E1 04 00 00             		.long	0x4e1
 16554 0330 EB 04 00 00             		.long	0x4eb
 16555 0334 FD 04 00 00             		.long	0x4fd
 16556 0338 FF 04 00 00             		.long	0x4ff
 16557 033c 03 05 00 00             		.long	0x503
 16558 0340 09 05 00 00             		.long	0x509
 16559 0344 0B 05 00 00             		.long	0x50b
 16560 0348 11 05 00 00             		.long	0x511
 16561 034c 15 05 00 00             		.long	0x515
 16562 0350 17 05 00 00             		.long	0x517
 16563 0354 1B 05 00 00             		.long	0x51b
 16564 0358 27 05 00 00             		.long	0x527
 16565 035c 29 05 00 00             		.long	0x529
 16566 0360 2F 05 00 00             		.long	0x52f
 16567 0364 51 05 00 00             		.long	0x551
 16568 0368 57 05 00 00             		.long	0x557
 16569 036c 5D 05 00 00             		.long	0x55d
 16570 0370 65 05 00 00             		.long	0x565
 16571 0374 77 05 00 00             		.long	0x577
 16572 0378 81 05 00 00             		.long	0x581
 16573 037c 8F 05 00 00             		.long	0x58f
 16574 0380 93 05 00 00             		.long	0x593
 16575 0384 95 05 00 00             		.long	0x595
 16576 0388 99 05 00 00             		.long	0x599
 16577 038c 9F 05 00 00             		.long	0x59f
 16578 0390 A7 05 00 00             		.long	0x5a7
 16579 0394 AB 05 00 00             		.long	0x5ab
 16580 0398 AD 05 00 00             		.long	0x5ad
 16581 039c B3 05 00 00             		.long	0x5b3
 16582 03a0 BF 05 00 00             		.long	0x5bf
 16583 03a4 C9 05 00 00             		.long	0x5c9
 16584 03a8 CB 05 00 00             		.long	0x5cb
 16585 03ac CF 05 00 00             		.long	0x5cf
 16586 03b0 D1 05 00 00             		.long	0x5d1
 16587 03b4 D5 05 00 00             		.long	0x5d5
 16588 03b8 DB 05 00 00             		.long	0x5db
 16589 03bc E7 05 00 00             		.long	0x5e7
 16590 03c0 F3 05 00 00             		.long	0x5f3
 16591 03c4 FB 05 00 00             		.long	0x5fb
 16592 03c8 07 06 00 00             		.long	0x607
 16593 03cc 0D 06 00 00             		.long	0x60d
 16594 03d0 11 06 00 00             		.long	0x611
 16595 03d4 17 06 00 00             		.long	0x617
 16596 03d8 1F 06 00 00             		.long	0x61f
 16597 03dc 23 06 00 00             		.long	0x623
 16598 03e0 2B 06 00 00             		.long	0x62b
 16599 03e4 2F 06 00 00             		.long	0x62f
 16600 03e8 3D 06 00 00             		.long	0x63d
 16601 03ec 41 06 00 00             		.long	0x641
 16602 03f0 47 06 00 00             		.long	0x647
 16603 03f4 49 06 00 00             		.long	0x649
 16604 03f8 4D 06 00 00             		.long	0x64d
 16605 03fc 53 06 00 00             		.long	0x653
 16606                             		.section	.text.sp_prime_is_prime,"ax",@progbits
 16607                             		.global	_sp_prime_is_prime
 16609                             	_sp_prime_is_prime:
 16610                             	.LFB133:
15884:../src/wolfcrypt/src/sp_int.c **** 
15885:../src/wolfcrypt/src/sp_int.c **** #if SP_WORD_SIZE == 8
15886:../src/wolfcrypt/src/sp_int.c **** /* Number of pre-computed primes. First n primes - fitting in a digit. */
15887:../src/wolfcrypt/src/sp_int.c **** #define SP_PRIME_SIZE      54
15888:../src/wolfcrypt/src/sp_int.c **** 
15889:../src/wolfcrypt/src/sp_int.c **** static const sp_int_digit sp_primes[SP_PRIME_SIZE] = {
15890:../src/wolfcrypt/src/sp_int.c ****     0x02, 0x03, 0x05, 0x07, 0x0B, 0x0D, 0x11, 0x13,
15891:../src/wolfcrypt/src/sp_int.c ****     0x17, 0x1D, 0x1F, 0x25, 0x29, 0x2B, 0x2F, 0x35,
15892:../src/wolfcrypt/src/sp_int.c ****     0x3B, 0x3D, 0x43, 0x47, 0x49, 0x4F, 0x53, 0x59,
15893:../src/wolfcrypt/src/sp_int.c ****     0x61, 0x65, 0x67, 0x6B, 0x6D, 0x71, 0x7F, 0x83,
15894:../src/wolfcrypt/src/sp_int.c ****     0x89, 0x8B, 0x95, 0x97, 0x9D, 0xA3, 0xA7, 0xAD,
15895:../src/wolfcrypt/src/sp_int.c ****     0xB3, 0xB5, 0xBF, 0xC1, 0xC5, 0xC7, 0xD3, 0xDF,
15896:../src/wolfcrypt/src/sp_int.c ****     0xE3, 0xE5, 0xE9, 0xEF, 0xF1, 0xFB
15897:../src/wolfcrypt/src/sp_int.c **** };
15898:../src/wolfcrypt/src/sp_int.c **** #else
15899:../src/wolfcrypt/src/sp_int.c **** /* Number of pre-computed primes. First n primes. */
15900:../src/wolfcrypt/src/sp_int.c **** #define SP_PRIME_SIZE      256
15901:../src/wolfcrypt/src/sp_int.c **** 
15902:../src/wolfcrypt/src/sp_int.c **** /* The first 256 primes. */
15903:../src/wolfcrypt/src/sp_int.c **** static const sp_int_digit sp_primes[SP_PRIME_SIZE] = {
15904:../src/wolfcrypt/src/sp_int.c ****     0x0002, 0x0003, 0x0005, 0x0007, 0x000B, 0x000D, 0x0011, 0x0013,
15905:../src/wolfcrypt/src/sp_int.c ****     0x0017, 0x001D, 0x001F, 0x0025, 0x0029, 0x002B, 0x002F, 0x0035,
15906:../src/wolfcrypt/src/sp_int.c ****     0x003B, 0x003D, 0x0043, 0x0047, 0x0049, 0x004F, 0x0053, 0x0059,
15907:../src/wolfcrypt/src/sp_int.c ****     0x0061, 0x0065, 0x0067, 0x006B, 0x006D, 0x0071, 0x007F, 0x0083,
15908:../src/wolfcrypt/src/sp_int.c ****     0x0089, 0x008B, 0x0095, 0x0097, 0x009D, 0x00A3, 0x00A7, 0x00AD,
15909:../src/wolfcrypt/src/sp_int.c ****     0x00B3, 0x00B5, 0x00BF, 0x00C1, 0x00C5, 0x00C7, 0x00D3, 0x00DF,
15910:../src/wolfcrypt/src/sp_int.c ****     0x00E3, 0x00E5, 0x00E9, 0x00EF, 0x00F1, 0x00FB, 0x0101, 0x0107,
15911:../src/wolfcrypt/src/sp_int.c ****     0x010D, 0x010F, 0x0115, 0x0119, 0x011B, 0x0125, 0x0133, 0x0137,
15912:../src/wolfcrypt/src/sp_int.c **** 
15913:../src/wolfcrypt/src/sp_int.c ****     0x0139, 0x013D, 0x014B, 0x0151, 0x015B, 0x015D, 0x0161, 0x0167,
15914:../src/wolfcrypt/src/sp_int.c ****     0x016F, 0x0175, 0x017B, 0x017F, 0x0185, 0x018D, 0x0191, 0x0199,
15915:../src/wolfcrypt/src/sp_int.c ****     0x01A3, 0x01A5, 0x01AF, 0x01B1, 0x01B7, 0x01BB, 0x01C1, 0x01C9,
15916:../src/wolfcrypt/src/sp_int.c ****     0x01CD, 0x01CF, 0x01D3, 0x01DF, 0x01E7, 0x01EB, 0x01F3, 0x01F7,
15917:../src/wolfcrypt/src/sp_int.c ****     0x01FD, 0x0209, 0x020B, 0x021D, 0x0223, 0x022D, 0x0233, 0x0239,
15918:../src/wolfcrypt/src/sp_int.c ****     0x023B, 0x0241, 0x024B, 0x0251, 0x0257, 0x0259, 0x025F, 0x0265,
15919:../src/wolfcrypt/src/sp_int.c ****     0x0269, 0x026B, 0x0277, 0x0281, 0x0283, 0x0287, 0x028D, 0x0293,
15920:../src/wolfcrypt/src/sp_int.c ****     0x0295, 0x02A1, 0x02A5, 0x02AB, 0x02B3, 0x02BD, 0x02C5, 0x02CF,
15921:../src/wolfcrypt/src/sp_int.c **** 
15922:../src/wolfcrypt/src/sp_int.c ****     0x02D7, 0x02DD, 0x02E3, 0x02E7, 0x02EF, 0x02F5, 0x02F9, 0x0301,
15923:../src/wolfcrypt/src/sp_int.c ****     0x0305, 0x0313, 0x031D, 0x0329, 0x032B, 0x0335, 0x0337, 0x033B,
15924:../src/wolfcrypt/src/sp_int.c ****     0x033D, 0x0347, 0x0355, 0x0359, 0x035B, 0x035F, 0x036D, 0x0371,
15925:../src/wolfcrypt/src/sp_int.c ****     0x0373, 0x0377, 0x038B, 0x038F, 0x0397, 0x03A1, 0x03A9, 0x03AD,
15926:../src/wolfcrypt/src/sp_int.c ****     0x03B3, 0x03B9, 0x03C7, 0x03CB, 0x03D1, 0x03D7, 0x03DF, 0x03E5,
15927:../src/wolfcrypt/src/sp_int.c ****     0x03F1, 0x03F5, 0x03FB, 0x03FD, 0x0407, 0x0409, 0x040F, 0x0419,
15928:../src/wolfcrypt/src/sp_int.c ****     0x041B, 0x0425, 0x0427, 0x042D, 0x043F, 0x0443, 0x0445, 0x0449,
15929:../src/wolfcrypt/src/sp_int.c ****     0x044F, 0x0455, 0x045D, 0x0463, 0x0469, 0x047F, 0x0481, 0x048B,
15930:../src/wolfcrypt/src/sp_int.c **** 
15931:../src/wolfcrypt/src/sp_int.c ****     0x0493, 0x049D, 0x04A3, 0x04A9, 0x04B1, 0x04BD, 0x04C1, 0x04C7,
15932:../src/wolfcrypt/src/sp_int.c ****     0x04CD, 0x04CF, 0x04D5, 0x04E1, 0x04EB, 0x04FD, 0x04FF, 0x0503,
15933:../src/wolfcrypt/src/sp_int.c ****     0x0509, 0x050B, 0x0511, 0x0515, 0x0517, 0x051B, 0x0527, 0x0529,
15934:../src/wolfcrypt/src/sp_int.c ****     0x052F, 0x0551, 0x0557, 0x055D, 0x0565, 0x0577, 0x0581, 0x058F,
15935:../src/wolfcrypt/src/sp_int.c ****     0x0593, 0x0595, 0x0599, 0x059F, 0x05A7, 0x05AB, 0x05AD, 0x05B3,
15936:../src/wolfcrypt/src/sp_int.c ****     0x05BF, 0x05C9, 0x05CB, 0x05CF, 0x05D1, 0x05D5, 0x05DB, 0x05E7,
15937:../src/wolfcrypt/src/sp_int.c ****     0x05F3, 0x05FB, 0x0607, 0x060D, 0x0611, 0x0617, 0x061F, 0x0623,
15938:../src/wolfcrypt/src/sp_int.c ****     0x062B, 0x062F, 0x063D, 0x0641, 0x0647, 0x0649, 0x064D, 0x0653
15939:../src/wolfcrypt/src/sp_int.c **** };
15940:../src/wolfcrypt/src/sp_int.c **** #endif
15941:../src/wolfcrypt/src/sp_int.c **** 
15942:../src/wolfcrypt/src/sp_int.c **** /* Check whether a is prime.
15943:../src/wolfcrypt/src/sp_int.c ****  * Checks against a number of small primes and does t iterations of
15944:../src/wolfcrypt/src/sp_int.c ****  * Miller-Rabin.
15945:../src/wolfcrypt/src/sp_int.c ****  *
15946:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a       SP integer to check.
15947:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   t       Number of iterations of Miller-Rabin test to perform.
15948:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  result  MP_YES when number is prime.
15949:../src/wolfcrypt/src/sp_int.c ****  *                        MP_NO otherwise.
15950:../src/wolfcrypt/src/sp_int.c ****  *
15951:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
15952:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a or result is NULL, or t is out of range.
15953:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
15954:../src/wolfcrypt/src/sp_int.c ****  */
15955:../src/wolfcrypt/src/sp_int.c **** int sp_prime_is_prime(sp_int* a, int t, int* result)
15956:../src/wolfcrypt/src/sp_int.c **** {
 16611                             		.loc 2 15956 1
 16612 0000 7E AA                   		push.l	r10
 16613                             	.LCFI194:
 16614 0002 71 0A DC                		add	#-36, r0, r10
 16615                             	.LCFI195:
 16616 0005 EF A0                   		mov.L	r10, r0
 16617 0007 E7 A1 06                		mov.L	r1, 24[r10]
 16618 000a E7 A2 07                		mov.L	r2, 28[r10]
 16619 000d E7 A3 08                		mov.L	r3, 32[r10]
15957:../src/wolfcrypt/src/sp_int.c ****     int         err = MP_OKAY;
 16620                             		.loc 2 15957 17
 16621 0010 F8 A6 00                		mov.L	#0, [r10]
15958:../src/wolfcrypt/src/sp_int.c ****     int         i;
15959:../src/wolfcrypt/src/sp_int.c ****     int         haveRes = 0;
 16622                             		.loc 2 15959 17
 16623 0013 F9 A6 02 00             		mov.L	#0, 8[r10]
15960:../src/wolfcrypt/src/sp_int.c ****     sp_int_digit d;
15961:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT(b, 2);
 16624                             		.loc 2 15961 5
 16625 0017 F9 A6 03 00             		mov.L	#0, 12[r10]
15962:../src/wolfcrypt/src/sp_int.c **** 
15963:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (result == NULL)) {
 16626                             		.loc 2 15963 8
 16627 001b ED A5 06                		mov.L	24[r10], r5
 16628 001e 61 05                   		cmp	#0, r5
 16629 0020 10                      		beq	.L1071
 16630                             		.loc 2 15963 21 discriminator 1
 16631 0021 ED A5 08                		mov.L	32[r10], r5
 16632 0024 61 05                   		cmp	#0, r5
 16633 0026 21 11                   		bne	.L1072
 16634                             	.L1071:
15964:../src/wolfcrypt/src/sp_int.c ****         if (result != NULL) {
 16635                             		.loc 2 15964 12
 16636 0028 ED A5 08                		mov.L	32[r10], r5
 16637 002b 61 05                   		cmp	#0, r5
 16638 002d 17                      		beq	.L1073
15965:../src/wolfcrypt/src/sp_int.c ****             *result = MP_NO;
 16639                             		.loc 2 15965 21
 16640 002e ED A5 08                		mov.L	32[r10], r5
 16641 0031 F8 56 00                		mov.L	#0, [r5]
 16642                             	.L1073:
15966:../src/wolfcrypt/src/sp_int.c ****         }
15967:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 16643                             		.loc 2 15967 13
 16644 0034 F8 A6 FD                		mov.L	#-3, [r10]
 16645                             	.L1072:
15968:../src/wolfcrypt/src/sp_int.c ****     }
15969:../src/wolfcrypt/src/sp_int.c **** 
15970:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && ((t <= 0) || (t > SP_PRIME_SIZE))) {
 16646                             		.loc 2 15970 8
 16647 0037 EC A5                   		mov.L	[r10], r5
 16648 0039 61 05                   		cmp	#0, r5
 16649 003b 21 1B                   		bne	.L1074
 16650                             		.loc 2 15970 26 discriminator 1
 16651 003d ED A5 07                		mov.L	28[r10], r5
 16652 0040 61 05                   		cmp	#0, r5
 16653 0042 2B 0B                   		ble	.L1075
 16654                             		.loc 2 15970 39 discriminator 2
 16655 0044 ED A5 07                		mov.L	28[r10], r5
 16656 0047 76 05 00 01             		cmp	#0x100, r5
 16657 004b 2B 0B                   		ble	.L1074
 16658                             	.L1075:
15971:../src/wolfcrypt/src/sp_int.c ****         *result = MP_NO;
 16659                             		.loc 2 15971 17
 16660 004d ED A5 08                		mov.L	32[r10], r5
 16661 0050 F8 56 00                		mov.L	#0, [r5]
15972:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 16662                             		.loc 2 15972 13
 16663 0053 F8 A6 FD                		mov.L	#-3, [r10]
 16664                             	.L1074:
15973:../src/wolfcrypt/src/sp_int.c ****     }
15974:../src/wolfcrypt/src/sp_int.c **** 
15975:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && sp_isone(a)) {
 16665                             		.loc 2 15975 8
 16666 0056 EC A5                   		mov.L	[r10], r5
 16667 0058 61 05                   		cmp	#0, r5
 16668 005a 21 1E                   		bne	.L1076
 16669                             		.loc 2 15975 29 discriminator 1
 16670 005c ED A5 06                		mov.L	24[r10], r5
 16671 005f EC 55                   		mov.L	[r5], r5
 16672                             		.loc 2 15975 26 discriminator 1
 16673 0061 61 15                   		cmp	#1, r5
 16674 0063 21 15                   		bne	.L1076
 16675                             		.loc 2 15975 29 discriminator 2
 16676 0065 ED A5 06                		mov.L	24[r10], r5
 16677 0068 A8 D5                   		mov.L	8[r5], r5
 16678 006a 61 15                   		cmp	#1, r5
 16679 006c 21 0C                   		bne	.L1076
15976:../src/wolfcrypt/src/sp_int.c ****         *result = MP_NO;
 16680                             		.loc 2 15976 17
 16681 006e ED A5 08                		mov.L	32[r10], r5
 16682 0071 F8 56 00                		mov.L	#0, [r5]
15977:../src/wolfcrypt/src/sp_int.c ****         haveRes = 1;
 16683                             		.loc 2 15977 17
 16684 0074 F9 A6 02 01             		mov.L	#1, 8[r10]
 16685                             		.balign 8,3,1
 16686                             	.L1076:
15978:../src/wolfcrypt/src/sp_int.c ****     }
15979:../src/wolfcrypt/src/sp_int.c **** 
15980:../src/wolfcrypt/src/sp_int.c ****     SAVE_VECTOR_REGISTERS(err = _svr_ret;);
15981:../src/wolfcrypt/src/sp_int.c **** 
15982:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (!haveRes) && (a->used == 1)) {
 16687                             		.loc 2 15982 8
 16688 0078 EC A5                   		mov.L	[r10], r5
 16689 007a 61 05                   		cmp	#0, r5
 16690 007c 21 4F                   		bne	.L1077
 16691                             		.loc 2 15982 26 discriminator 1
 16692 007e ED A5 02                		mov.L	8[r10], r5
 16693 0081 61 05                   		cmp	#0, r5
 16694 0083 21 48                   		bne	.L1077
 16695                             		.loc 2 15982 45 discriminator 2
 16696 0085 ED A5 06                		mov.L	24[r10], r5
 16697 0088 EC 55                   		mov.L	[r5], r5
 16698                             		.loc 2 15982 40 discriminator 2
 16699 008a 61 15                   		cmp	#1, r5
 16700 008c 21 3F                   		bne	.L1077
15983:../src/wolfcrypt/src/sp_int.c ****         /* check against primes table */
15984:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < SP_PRIME_SIZE; i++) {
 16701                             		.loc 2 15984 16
 16702 008e F9 A6 01 00             		mov.L	#0, 4[r10]
 16703                             		.loc 2 15984 9
 16704 0092 2E 31                   		bra	.L1078
 16705                             	.L1080:
15985:../src/wolfcrypt/src/sp_int.c ****             if (sp_cmp_d(a, sp_primes[i]) == MP_EQ) {
 16706                             		.loc 2 15985 17
 16707 0094 FB 52 00 00 00 00       		mov.L	#_sp_primes, r5
 16708 009a ED A4 01                		mov.L	4[r10], r4
 16709 009d FE 64 55                		mov.L	[r4,r5], r5
 16710 00a0 EF 52                   		mov.L	r5, r2
 16711 00a2 ED A1 06                		mov.L	24[r10], r1
 16712 00a5 05 00 00 00             		bsr	_sp_cmp_d
 16713 00a9 EF 15                   		mov.L	r1, r5
 16714                             		.loc 2 15985 16
 16715 00ab 61 05                   		cmp	#0, r5
 16716 00ad 21 0E                   		bne	.L1079
15986:../src/wolfcrypt/src/sp_int.c ****                 *result = MP_YES;
 16717                             		.loc 2 15986 25
 16718 00af ED A5 08                		mov.L	32[r10], r5
 16719 00b2 F8 56 01                		mov.L	#1, [r5]
15987:../src/wolfcrypt/src/sp_int.c ****                 haveRes = 1;
 16720                             		.loc 2 15987 25
 16721 00b5 F9 A6 02 01             		mov.L	#1, 8[r10]
15988:../src/wolfcrypt/src/sp_int.c ****                 break;
 16722                             		.loc 2 15988 17
 16723 00b9 2E 12                   		bra	.L1077
 16724                             	.L1079:
15984:../src/wolfcrypt/src/sp_int.c ****             if (sp_cmp_d(a, sp_primes[i]) == MP_EQ) {
 16725                             		.loc 2 15984 41 discriminator 2
 16726 00bb ED A5 01                		mov.L	4[r10], r5
 16727 00be 62 15                   		add	#1, r5
 16728 00c0 E7 A5 01                		mov.L	r5, 4[r10]
 16729                             	.L1078:
15984:../src/wolfcrypt/src/sp_int.c ****             if (sp_cmp_d(a, sp_primes[i]) == MP_EQ) {
 16730                             		.loc 2 15984 9 discriminator 1
 16731 00c3 ED A5 01                		mov.L	4[r10], r5
 16732 00c6 75 55 FF                		cmp	#0xff, r5
 16733 00c9 2B CB                   		ble	.L1080
 16734                             		.balign 8,3,1
 16735                             	.L1077:
15989:../src/wolfcrypt/src/sp_int.c ****             }
15990:../src/wolfcrypt/src/sp_int.c ****         }
15991:../src/wolfcrypt/src/sp_int.c ****     }
15992:../src/wolfcrypt/src/sp_int.c **** 
15993:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (!haveRes)) {
 16736                             		.loc 2 15993 8
 16737 00cb EC A5                   		mov.L	[r10], r5
 16738 00cd 61 05                   		cmp	#0, r5
 16739 00cf 21 53                   		bne	.L1081
 16740                             		.loc 2 15993 26 discriminator 1
 16741 00d1 ED A5 02                		mov.L	8[r10], r5
 16742 00d4 61 05                   		cmp	#0, r5
 16743 00d6 21 4C                   		bne	.L1081
15994:../src/wolfcrypt/src/sp_int.c ****         /* do trial division */
15995:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < SP_PRIME_SIZE; i++) {
 16744                             		.loc 2 15995 16
 16745 00d8 F9 A6 01 00             		mov.L	#0, 4[r10]
 16746                             		.loc 2 15995 9
 16747 00dc 2E 3E                   		bra	.L1082
 16748                             	.L1085:
15996:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod_d(a, sp_primes[i], &d);
 16749                             		.loc 2 15996 19
 16750 00de FB 52 00 00 00 00       		mov.L	#_sp_primes, r5
 16751 00e4 ED A4 01                		mov.L	4[r10], r4
 16752 00e7 FE 64 54                		mov.L	[r4,r5], r4
 16753 00ea 71 A5 14                		add	#20, r10, r5
 16754 00ed EF 53                   		mov.L	r5, r3
 16755 00ef EF 42                   		mov.L	r4, r2
 16756 00f1 ED A1 06                		mov.L	24[r10], r1
 16757 00f4 05 00 00 00             		bsr	_sp_mod_d
 16758 00f8 E3 A1                   		mov.L	r1, [r10]
15997:../src/wolfcrypt/src/sp_int.c ****             if ((err != MP_OKAY) || (d == 0)) {
 16759                             		.loc 2 15997 16
 16760 00fa EC A5                   		mov.L	[r10], r5
 16761 00fc 61 05                   		cmp	#0, r5
 16762 00fe 18                      		bne	.L1083
 16763                             		.loc 2 15997 40 discriminator 1
 16764 00ff ED A5 05                		mov.L	20[r10], r5
 16765                             		.loc 2 15997 34 discriminator 1
 16766 0102 61 05                   		cmp	#0, r5
 16767 0104 21 0E                   		bne	.L1084
 16768                             	.L1083:
15998:../src/wolfcrypt/src/sp_int.c ****                 *result = MP_NO;
 16769                             		.loc 2 15998 25
 16770 0106 ED A5 08                		mov.L	32[r10], r5
 16771 0109 F8 56 00                		mov.L	#0, [r5]
15999:../src/wolfcrypt/src/sp_int.c ****                 haveRes = 1;
 16772                             		.loc 2 15999 25
 16773 010c F9 A6 02 01             		mov.L	#1, 8[r10]
16000:../src/wolfcrypt/src/sp_int.c ****                 break;
 16774                             		.loc 2 16000 17
 16775 0110 2E 12                   		bra	.L1081
 16776                             	.L1084:
15995:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod_d(a, sp_primes[i], &d);
 16777                             		.loc 2 15995 41 discriminator 2
 16778 0112 ED A5 01                		mov.L	4[r10], r5
 16779 0115 62 15                   		add	#1, r5
 16780 0117 E7 A5 01                		mov.L	r5, 4[r10]
 16781                             	.L1082:
15995:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod_d(a, sp_primes[i], &d);
 16782                             		.loc 2 15995 9 discriminator 1
 16783 011a ED A5 01                		mov.L	4[r10], r5
 16784 011d 75 55 FF                		cmp	#0xff, r5
 16785 0120 2B BE                   		ble	.L1085
 16786                             		.balign 8,3,1
 16787                             	.L1081:
16001:../src/wolfcrypt/src/sp_int.c ****             }
16002:../src/wolfcrypt/src/sp_int.c ****         }
16003:../src/wolfcrypt/src/sp_int.c ****     }
16004:../src/wolfcrypt/src/sp_int.c **** 
16005:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (!haveRes)) {
 16788                             		.loc 2 16005 8
 16789 0122 EC A5                   		mov.L	[r10], r5
 16790 0124 61 05                   		cmp	#0, r5
 16791 0126 21 7B                   		bne	.L1086
 16792                             		.loc 2 16005 26 discriminator 1
 16793 0128 ED A5 02                		mov.L	8[r10], r5
 16794 012b 61 05                   		cmp	#0, r5
 16795 012d 21 74                   		bne	.L1086
16006:../src/wolfcrypt/src/sp_int.c ****         ALLOC_SP_INT(b, 1, err, NULL);
 16796                             		.loc 2 16006 9
 16797 012f EC A5                   		mov.L	[r10], r5
 16798 0131 61 05                   		cmp	#0, r5
 16799 0133 21 14                   		bne	.L1087
 16800                             		.loc 2 16006 9 is_stmt 0 discriminator 1
 16801 0135 66 C1                   		mov.L	#12, r1
 16802 0137 05 00 00 00             		bsr	_wolfSSL_Malloc
 16803 013b E7 A1 03                		mov.L	r1, 12[r10]
 16804 013e ED A5 03                		mov.L	12[r10], r5
 16805 0141 61 05                   		cmp	#0, r5
 16806 0143 1C                      		bne	.L1087
 16807                             		.loc 2 16006 9 discriminator 2
 16808 0144 F8 A6 FE                		mov.L	#-2, [r10]
 16809                             	.L1087:
16007:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 16810                             		.loc 2 16007 12 is_stmt 1
 16811 0147 EC A5                   		mov.L	[r10], r5
 16812 0149 61 05                   		cmp	#0, r5
 16813 014b 21 56                   		bne	.L1086
16008:../src/wolfcrypt/src/sp_int.c ****             /* now do 't' miller rabins */
16009:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(b, 1);
 16814                             		.loc 2 16009 13
 16815 014d 66 12                   		mov.L	#1, r2
 16816 014f ED A1 03                		mov.L	12[r10], r1
 16817 0152 05 00 00 00             		bsr	_sp_init_size
16010:../src/wolfcrypt/src/sp_int.c ****             for (i = 0; i < t; i++) {
 16818                             		.loc 2 16010 20
 16819 0156 F9 A6 01 00             		mov.L	#0, 4[r10]
 16820                             		.loc 2 16010 13
 16821 015a 2E 3D                   		bra	.L1088
 16822                             	.L1089:
16011:../src/wolfcrypt/src/sp_int.c ****                 sp_set(b, sp_primes[i]);
 16823                             		.loc 2 16011 17
 16824 015c FB 52 00 00 00 00       		mov.L	#_sp_primes, r5
 16825 0162 ED A4 01                		mov.L	4[r10], r4
 16826 0165 FE 64 55                		mov.L	[r4,r5], r5
 16827 0168 EF 52                   		mov.L	r5, r2
 16828 016a ED A1 03                		mov.L	12[r10], r1
 16829 016d 05 00 00 00             		bsr	_sp_set
16012:../src/wolfcrypt/src/sp_int.c ****                 err = sp_prime_miller_rabin(a, b, result);
 16830                             		.loc 2 16012 23
 16831 0171 ED A3 08                		mov.L	32[r10], r3
 16832 0174 ED A2 03                		mov.L	12[r10], r2
 16833 0177 ED A1 06                		mov.L	24[r10], r1
 16834 017a 05 00 00 00             		bsr	_sp_prime_miller_rabin
 16835 017e E3 A1                   		mov.L	r1, [r10]
16013:../src/wolfcrypt/src/sp_int.c ****                 if ((err != MP_OKAY) || (*result == MP_NO)) {
 16836                             		.loc 2 16013 20
 16837 0180 EC A5                   		mov.L	[r10], r5
 16838 0182 61 05                   		cmp	#0, r5
 16839 0184 21 1D                   		bne	.L1086
 16840                             		.loc 2 16013 42 discriminator 1
 16841 0186 ED A5 08                		mov.L	32[r10], r5
 16842 0189 EC 55                   		mov.L	[r5], r5
 16843                             		.loc 2 16013 38 discriminator 1
 16844 018b 61 05                   		cmp	#0, r5
 16845 018d 20 14                   		beq	.L1086
16010:../src/wolfcrypt/src/sp_int.c ****                 sp_set(b, sp_primes[i]);
 16846                             		.loc 2 16010 33 discriminator 2
 16847 018f ED A5 01                		mov.L	4[r10], r5
 16848 0192 62 15                   		add	#1, r5
 16849 0194 E7 A5 01                		mov.L	r5, 4[r10]
 16850                             	.L1088:
16010:../src/wolfcrypt/src/sp_int.c ****                 sp_set(b, sp_primes[i]);
 16851                             		.loc 2 16010 13 discriminator 1
 16852 0197 ED A4 01                		mov.L	4[r10], r4
 16853 019a ED A5 07                		mov.L	28[r10], r5
 16854 019d 47 54                   		cmp	r5, r4
 16855 019f 29 BD                   		blt	.L1089
 16856                             		.balign 8,3,1
 16857                             	.L1086:
16014:../src/wolfcrypt/src/sp_int.c ****                     break;
16015:../src/wolfcrypt/src/sp_int.c ****                 }
16016:../src/wolfcrypt/src/sp_int.c ****             }
16017:../src/wolfcrypt/src/sp_int.c ****         }
16018:../src/wolfcrypt/src/sp_int.c ****      }
16019:../src/wolfcrypt/src/sp_int.c **** 
16020:../src/wolfcrypt/src/sp_int.c ****      RESTORE_VECTOR_REGISTERS();
16021:../src/wolfcrypt/src/sp_int.c **** 
16022:../src/wolfcrypt/src/sp_int.c ****      FREE_SP_INT(b, NULL);
 16858                             		.loc 2 16022 6
 16859 01a1 ED A5 03                		mov.L	12[r10], r5
 16860 01a4 61 05                   		cmp	#0, r5
 16861 01a6 20 15                   		beq	.L1090
 16862                             	.LBB101:
 16863                             		.loc 2 16022 6 is_stmt 0 discriminator 1
 16864 01a8 ED A5 03                		mov.L	12[r10], r5
 16865 01ab E7 A5 04                		mov.L	r5, 16[r10]
 16866 01ae ED A5 04                		mov.L	16[r10], r5
 16867 01b1 61 05                   		cmp	#0, r5
 16868 01b3 10                      		beq	.L1090
 16869                             		.loc 2 16022 6 discriminator 2
 16870 01b4 ED A1 04                		mov.L	16[r10], r1
 16871 01b7 05 00 00 00             		bsr	_wolfSSL_Free
 16872                             	.L1090:
 16873                             	.LBE101:
16023:../src/wolfcrypt/src/sp_int.c ****      return err;
 16874                             		.loc 2 16023 13 is_stmt 1
 16875 01bb EC A5                   		mov.L	[r10], r5
16024:../src/wolfcrypt/src/sp_int.c **** }
 16876                             		.loc 2 16024 1
 16877 01bd EF 51                   		mov.L	r5, r1
 16878 01bf 3F AA 0A                		rtsd	#40, r10-r10
 16879                             	.LFE133:
 16881 01c2 74 10 01 00 00 00       		.section	.text.sp_prime_is_prime_ex,"ax",@progbits
 16882                             		.global	_sp_prime_is_prime_ex
 16884                             	_sp_prime_is_prime_ex:
 16885                             	.LFB134:
16025:../src/wolfcrypt/src/sp_int.c **** 
16026:../src/wolfcrypt/src/sp_int.c **** /* Check whether a is prime.
16027:../src/wolfcrypt/src/sp_int.c ****  * Checks against a number of small primes and does t iterations of
16028:../src/wolfcrypt/src/sp_int.c ****  * Miller-Rabin.
16029:../src/wolfcrypt/src/sp_int.c ****  *
16030:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a       SP integer to check.
16031:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   t       Number of iterations of Miller-Rabin test to perform.
16032:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  result  MP_YES when number is prime.
16033:../src/wolfcrypt/src/sp_int.c ****  *                        MP_NO otherwise.
16034:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   rng     Random number generator for Miller-Rabin testing.
16035:../src/wolfcrypt/src/sp_int.c ****  *
16036:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
16037:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, result or rng is NULL.
16038:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
16039:../src/wolfcrypt/src/sp_int.c ****  */
16040:../src/wolfcrypt/src/sp_int.c **** int sp_prime_is_prime_ex(sp_int* a, int t, int* result, WC_RNG* rng)
16041:../src/wolfcrypt/src/sp_int.c **** {
 16886                             		.loc 2 16041 1
 16887 0000 6E 6A                   		pushm	r6-r10
 16888                             	.LCFI196:
 16889 0002 71 0A 90                		add	#-112, r0, r10
 16890                             	.LCFI197:
 16891 0005 71 A0 F8                		add	#-8, r10, r0
 16892                             	.LCFI198:
 16893 0008 E7 A1 18                		mov.L	r1, 96[r10]
 16894 000b E7 A2 19                		mov.L	r2, 100[r10]
 16895 000e E7 A3 1A                		mov.L	r3, 104[r10]
 16896 0011 E7 A4 1B                		mov.L	r4, 108[r10]
16042:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
 16897                             		.loc 2 16042 9
 16898 0014 F8 A6 00                		mov.L	#0, [r10]
16043:../src/wolfcrypt/src/sp_int.c ****     int ret = MP_YES;
 16899                             		.loc 2 16043 9
 16900 0017 F9 A6 11 01             		mov.L	#1, 68[r10]
16044:../src/wolfcrypt/src/sp_int.c ****     int haveRes = 0;
 16901                             		.loc 2 16044 9
 16902 001b F9 A6 01 00             		mov.L	#0, 4[r10]
16045:../src/wolfcrypt/src/sp_int.c ****     int i;
16046:../src/wolfcrypt/src/sp_int.c **** #ifndef WC_NO_RNG
16047:../src/wolfcrypt/src/sp_int.c ****     sp_int *b = NULL;
 16903                             		.loc 2 16047 13
 16904 001f F9 A6 08 00             		mov.L	#0, 32[r10]
16048:../src/wolfcrypt/src/sp_int.c ****     sp_int *c = NULL;
 16905                             		.loc 2 16048 13
 16906 0023 F9 A6 09 00             		mov.L	#0, 36[r10]
16049:../src/wolfcrypt/src/sp_int.c ****     sp_int *n1 = NULL;
 16907                             		.loc 2 16049 13
 16908 0027 F9 A6 0A 00             		mov.L	#0, 40[r10]
16050:../src/wolfcrypt/src/sp_int.c ****     sp_int *y = NULL;
 16909                             		.loc 2 16050 13
 16910 002b F9 A6 0B 00             		mov.L	#0, 44[r10]
16051:../src/wolfcrypt/src/sp_int.c ****     sp_int *r = NULL;
 16911                             		.loc 2 16051 13
 16912 002f F9 A6 0C 00             		mov.L	#0, 48[r10]
16052:../src/wolfcrypt/src/sp_int.c **** #endif /* WC_NO_RNG */
16053:../src/wolfcrypt/src/sp_int.c **** 
16054:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (result == NULL) || (rng == NULL)) {
 16913                             		.loc 2 16054 8
 16914 0033 ED A5 18                		mov.L	96[r10], r5
 16915 0036 61 05                   		cmp	#0, r5
 16916 0038 20 0E                   		beq	.L1093
 16917                             		.loc 2 16054 21 discriminator 1
 16918 003a ED A5 1A                		mov.L	104[r10], r5
 16919 003d 61 05                   		cmp	#0, r5
 16920 003f 17                      		beq	.L1093
 16921                             		.loc 2 16054 41 discriminator 2
 16922 0040 ED A5 1B                		mov.L	108[r10], r5
 16923 0043 61 05                   		cmp	#0, r5
 16924 0045 1C                      		bne	.L1094
 16925                             	.L1093:
16055:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
 16926                             		.loc 2 16055 13
 16927 0046 F8 A6 FD                		mov.L	#-3, [r10]
 16928                             	.L1094:
16056:../src/wolfcrypt/src/sp_int.c ****     }
16057:../src/wolfcrypt/src/sp_int.c **** 
16058:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
16059:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (a->sign == MP_NEG)) {
16060:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
16061:../src/wolfcrypt/src/sp_int.c ****     }
16062:../src/wolfcrypt/src/sp_int.c **** #endif
16063:../src/wolfcrypt/src/sp_int.c **** 
16064:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && sp_isone(a)) {
 16929                             		.loc 2 16064 8
 16930 0049 EC A5                   		mov.L	[r10], r5
 16931 004b 61 05                   		cmp	#0, r5
 16932 004d 21 1B                   		bne	.L1095
 16933                             		.loc 2 16064 29 discriminator 1
 16934 004f ED A5 18                		mov.L	96[r10], r5
 16935 0052 EC 55                   		mov.L	[r5], r5
 16936                             		.loc 2 16064 26 discriminator 1
 16937 0054 61 15                   		cmp	#1, r5
 16938 0056 21 12                   		bne	.L1095
 16939                             		.loc 2 16064 29 discriminator 2
 16940 0058 ED A5 18                		mov.L	96[r10], r5
 16941 005b A8 D5                   		mov.L	8[r5], r5
 16942 005d 61 15                   		cmp	#1, r5
 16943 005f 19                      		bne	.L1095
16065:../src/wolfcrypt/src/sp_int.c ****         ret = MP_NO;
 16944                             		.loc 2 16065 13
 16945 0060 F9 A6 11 00             		mov.L	#0, 68[r10]
16066:../src/wolfcrypt/src/sp_int.c ****         haveRes = 1;
 16946                             		.loc 2 16066 17
 16947 0064 F9 A6 01 01             		mov.L	#1, 4[r10]
 16948                             		.balign 8,3,1
 16949                             	.L1095:
16067:../src/wolfcrypt/src/sp_int.c ****     }
16068:../src/wolfcrypt/src/sp_int.c **** 
16069:../src/wolfcrypt/src/sp_int.c ****     SAVE_VECTOR_REGISTERS(err = _svr_ret;);
16070:../src/wolfcrypt/src/sp_int.c **** 
16071:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (!haveRes) && (a->used == 1)) {
 16950                             		.loc 2 16071 8
 16951 0068 EC A5                   		mov.L	[r10], r5
 16952 006a 61 05                   		cmp	#0, r5
 16953 006c 21 4D                   		bne	.L1096
 16954                             		.loc 2 16071 26 discriminator 1
 16955 006e ED A5 01                		mov.L	4[r10], r5
 16956 0071 61 05                   		cmp	#0, r5
 16957 0073 21 46                   		bne	.L1096
 16958                             		.loc 2 16071 45 discriminator 2
 16959 0075 ED A5 18                		mov.L	96[r10], r5
 16960 0078 EC 55                   		mov.L	[r5], r5
 16961                             		.loc 2 16071 40 discriminator 2
 16962 007a 61 15                   		cmp	#1, r5
 16963 007c 21 3D                   		bne	.L1096
16072:../src/wolfcrypt/src/sp_int.c ****         /* check against primes table */
16073:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < SP_PRIME_SIZE; i++) {
 16964                             		.loc 2 16073 16
 16965 007e F9 A6 02 00             		mov.L	#0, 8[r10]
 16966                             		.loc 2 16073 9
 16967 0082 2E 2F                   		bra	.L1097
 16968                             	.L1099:
16074:../src/wolfcrypt/src/sp_int.c ****             if (sp_cmp_d(a, sp_primes[i]) == MP_EQ) {
 16969                             		.loc 2 16074 17
 16970 0084 FB 52 00 00 00 00       		mov.L	#_sp_primes, r5
 16971 008a ED A4 02                		mov.L	8[r10], r4
 16972 008d FE 64 55                		mov.L	[r4,r5], r5
 16973 0090 EF 52                   		mov.L	r5, r2
 16974 0092 ED A1 18                		mov.L	96[r10], r1
 16975 0095 05 00 00 00             		bsr	_sp_cmp_d
 16976 0099 EF 15                   		mov.L	r1, r5
 16977                             		.loc 2 16074 16
 16978 009b 61 05                   		cmp	#0, r5
 16979 009d 21 0C                   		bne	.L1098
16075:../src/wolfcrypt/src/sp_int.c ****                 ret = MP_YES;
 16980                             		.loc 2 16075 21
 16981 009f F9 A6 11 01             		mov.L	#1, 68[r10]
16076:../src/wolfcrypt/src/sp_int.c ****                 haveRes = 1;
 16982                             		.loc 2 16076 25
 16983 00a3 F9 A6 01 01             		mov.L	#1, 4[r10]
16077:../src/wolfcrypt/src/sp_int.c ****                 break;
 16984                             		.loc 2 16077 17
 16985 00a7 2E 12                   		bra	.L1096
 16986                             	.L1098:
16073:../src/wolfcrypt/src/sp_int.c ****             if (sp_cmp_d(a, sp_primes[i]) == MP_EQ) {
 16987                             		.loc 2 16073 41 discriminator 2
 16988 00a9 ED A5 02                		mov.L	8[r10], r5
 16989 00ac 62 15                   		add	#1, r5
 16990 00ae E7 A5 02                		mov.L	r5, 8[r10]
 16991                             	.L1097:
16073:../src/wolfcrypt/src/sp_int.c ****             if (sp_cmp_d(a, sp_primes[i]) == MP_EQ) {
 16992                             		.loc 2 16073 9 discriminator 1
 16993 00b1 ED A5 02                		mov.L	8[r10], r5
 16994 00b4 75 55 FF                		cmp	#0xff, r5
 16995 00b7 2B CD                   		ble	.L1099
 16996                             		.balign 8,3,1
 16997                             	.L1096:
16078:../src/wolfcrypt/src/sp_int.c ****             }
16079:../src/wolfcrypt/src/sp_int.c ****         }
16080:../src/wolfcrypt/src/sp_int.c ****     }
16081:../src/wolfcrypt/src/sp_int.c **** 
16082:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (!haveRes)) {
 16998                             		.loc 2 16082 8
 16999 00b9 EC A5                   		mov.L	[r10], r5
 17000 00bb 61 05                   		cmp	#0, r5
 17001 00bd 21 51                   		bne	.L1100
 17002                             		.loc 2 16082 26 discriminator 1
 17003 00bf ED A5 01                		mov.L	4[r10], r5
 17004 00c2 61 05                   		cmp	#0, r5
 17005 00c4 21 4A                   		bne	.L1100
 17006                             	.LBB102:
16083:../src/wolfcrypt/src/sp_int.c ****         sp_int_digit d;
16084:../src/wolfcrypt/src/sp_int.c **** 
16085:../src/wolfcrypt/src/sp_int.c ****         /* do trial division */
16086:../src/wolfcrypt/src/sp_int.c ****         for (i = 0; i < SP_PRIME_SIZE; i++) {
 17007                             		.loc 2 16086 16
 17008 00c6 F9 A6 02 00             		mov.L	#0, 8[r10]
 17009                             		.loc 2 16086 9
 17010 00ca 2E 3C                   		bra	.L1101
 17011                             	.L1105:
16087:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod_d(a, sp_primes[i], &d);
 17012                             		.loc 2 16087 19
 17013 00cc FB 52 00 00 00 00       		mov.L	#_sp_primes, r5
 17014 00d2 ED A4 02                		mov.L	8[r10], r4
 17015 00d5 FE 64 54                		mov.L	[r4,r5], r4
 17016 00d8 71 A5 48                		add	#0x48, r10, r5
 17017 00db EF 53                   		mov.L	r5, r3
 17018 00dd EF 42                   		mov.L	r4, r2
 17019 00df ED A1 18                		mov.L	96[r10], r1
 17020 00e2 05 00 00 00             		bsr	_sp_mod_d
 17021 00e6 E3 A1                   		mov.L	r1, [r10]
16088:../src/wolfcrypt/src/sp_int.c ****             if ((err != MP_OKAY) || (d == 0)) {
 17022                             		.loc 2 16088 16
 17023 00e8 EC A5                   		mov.L	[r10], r5
 17024 00ea 61 05                   		cmp	#0, r5
 17025 00ec 18                      		bne	.L1102
 17026                             		.loc 2 16088 40 discriminator 1
 17027 00ed ED A5 12                		mov.L	72[r10], r5
 17028                             		.loc 2 16088 34 discriminator 1
 17029 00f0 61 05                   		cmp	#0, r5
 17030 00f2 21 0C                   		bne	.L1103
 17031                             	.L1102:
16089:../src/wolfcrypt/src/sp_int.c ****                 ret = MP_NO;
 17032                             		.loc 2 16089 21
 17033 00f4 F9 A6 11 00             		mov.L	#0, 68[r10]
16090:../src/wolfcrypt/src/sp_int.c ****                 haveRes = 1;
 17034                             		.loc 2 16090 25
 17035 00f8 F9 A6 01 01             		mov.L	#1, 4[r10]
16091:../src/wolfcrypt/src/sp_int.c ****                 break;
 17036                             		.loc 2 16091 17
 17037 00fc 2E 12                   		bra	.L1100
 17038                             	.L1103:
16086:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod_d(a, sp_primes[i], &d);
 17039                             		.loc 2 16086 41 discriminator 2
 17040 00fe ED A5 02                		mov.L	8[r10], r5
 17041 0101 62 15                   		add	#1, r5
 17042 0103 E7 A5 02                		mov.L	r5, 8[r10]
 17043                             	.L1101:
16086:../src/wolfcrypt/src/sp_int.c ****             err = sp_mod_d(a, sp_primes[i], &d);
 17044                             		.loc 2 16086 9 discriminator 1
 17045 0106 ED A5 02                		mov.L	8[r10], r5
 17046 0109 75 55 FF                		cmp	#0xff, r5
 17047 010c 2B C0                   		ble	.L1105
 17048                             		.balign 8,3,1
 17049                             	.L1100:
 17050                             	.LBE102:
16092:../src/wolfcrypt/src/sp_int.c ****             }
16093:../src/wolfcrypt/src/sp_int.c ****         }
16094:../src/wolfcrypt/src/sp_int.c ****     }
16095:../src/wolfcrypt/src/sp_int.c **** 
16096:../src/wolfcrypt/src/sp_int.c **** #ifndef WC_NO_RNG
16097:../src/wolfcrypt/src/sp_int.c ****     /* now do a miller rabin with up to t random numbers, this should
16098:../src/wolfcrypt/src/sp_int.c ****      * give a (1/4)^t chance of a false prime. */
16099:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (!haveRes)) {
 17051                             		.loc 2 16099 8
 17052 010e EC A5                   		mov.L	[r10], r5
 17053 0110 61 05                   		cmp	#0, r5
 17054 0112 3B 56 03                		bne	.L1106
 17055                             		.loc 2 16099 26 discriminator 1
 17056 0115 ED A5 01                		mov.L	4[r10], r5
 17057 0118 61 05                   		cmp	#0, r5
 17058 011a 3B 4E 03                		bne	.L1106
 17059                             	.LBB103:
16100:../src/wolfcrypt/src/sp_int.c ****         int bits = sp_count_bits(a);
 17060                             		.loc 2 16100 20
 17061 011d ED A1 18                		mov.L	96[r10], r1
 17062 0120 05 00 00 00             		bsr	_sp_count_bits
 17063 0124 E7 A1 0D                		mov.L	r1, 52[r10]
16101:../src/wolfcrypt/src/sp_int.c ****         word32 baseSz = (bits + 7) / 8;
 17064                             		.loc 2 16101 31
 17065 0127 ED A5 0D                		mov.L	52[r10], r5
 17066 012a 62 75                   		add	#7, r5
 17067                             		.loc 2 16101 36
 17068 012c 61 05                   		cmp	#0, r5
 17069 012e 28 04                   		bge	.L1107
 17070 0130 62 75                   		add	#7, r5
 17071                             	.L1107:
 17072 0132 6A 35                   		shar	#3, r5
 17073                             		.loc 2 16101 16
 17074 0134 E7 A5 0E                		mov.L	r5, 56[r10]
16102:../src/wolfcrypt/src/sp_int.c ****         DECL_SP_INT_ARRAY(ds, a->used + 1, 3);
 17075                             		.loc 2 16102 9
 17076 0137 F9 A6 03 00             		mov.L	#0, 12[r10]
 17077 013b 71 A5 4C                		add	#0x4c, r10, r5
 17078 013e EF 51                   		mov.L	r5, r1
 17079 0140 66 C3                   		mov.L	#12, r3
 17080 0142 66 02                   		mov	#0, r2
 17081 0144 7F 88                   		sstr.b
16103:../src/wolfcrypt/src/sp_int.c ****         DECL_SP_INT_ARRAY(d, a->used * 2 + 1, 2);
 17082                             		.loc 2 16103 9
 17083 0146 F9 A6 04 00             		mov.L	#0, 16[r10]
 17084 014a 66 05                   		mov.L	#0, r5
 17085 014c 66 06                   		mov.L	#0, r6
 17086 014e E7 A5 16                		mov.L	r5, 88[r10]
 17087 0151 E7 A6 17                		mov.L	r6, 92[r10]
16104:../src/wolfcrypt/src/sp_int.c **** 
16105:../src/wolfcrypt/src/sp_int.c ****         ALLOC_SP_INT_ARRAY(ds, a->used + 1, 3, err, NULL);
 17088                             		.loc 2 16105 9
 17089 0154 EC A5                   		mov.L	[r10], r5
 17090 0156 61 05                   		cmp	#0, r5
 17091 0158 3B 94 00                		bne	.L1108
 17092                             		.loc 2 16105 9 is_stmt 0 discriminator 1
 17093 015b ED A5 18                		mov.L	96[r10], r5
 17094 015e EC 55                   		mov.L	[r5], r5
 17095 0160 75 05 FF                		cmp	#-1, r5
 17096 0163 20 0D                   		beq	.L1109
 17097                             		.loc 2 16105 9 discriminator 2
 17098 0165 ED A5 18                		mov.L	96[r10], r5
 17099 0168 EC 55                   		mov.L	[r5], r5
 17100 016a 63 C5                   		mul	#12, r5
 17101 016c 71 55 24                		add	#36, r5
 17102 016f 0C                      		bra	.L1110
 17103                             	.L1109:
 17104                             		.loc 2 16105 9 discriminator 3
 17105 0170 75 45 24                		mov.L	#36, r5
 17106                             	.L1110:
 17107                             		.loc 2 16105 9 discriminator 5
 17108 0173 EF 51                   		mov.L	r5, r1
 17109 0175 05 00 00 00             		bsr	_wolfSSL_Malloc
 17110 0179 E7 A1 03                		mov.L	r1, 12[r10]
 17111 017c ED A5 03                		mov.L	12[r10], r5
 17112 017f 61 05                   		cmp	#0, r5
 17113 0181 1E                      		bne	.L1111
 17114                             		.loc 2 16105 9 discriminator 6
 17115 0182 F8 A6 FE                		mov.L	#-2, [r10]
 17116 0185 2E 67                   		bra	.L1108
 17117                             	.L1111:
 17118                             	.LBB104:
 17119                             		.loc 2 16105 9 discriminator 7
 17120 0187 ED A5 03                		mov.L	12[r10], r5
 17121 018a E7 A5 13                		mov.L	r5, 76[r10]
 17122 018d ED A5 18                		mov.L	96[r10], r5
 17123 0190 EC 54                   		mov.L	[r5], r4
 17124 0192 ED A5 13                		mov.L	76[r10], r5
 17125 0195 62 14                   		add	#1, r4
 17126 0197 A0 5C                   		mov.L	r4, 4[r5]
 17127 0199 F9 A6 05 01             		mov.L	#1, 20[r10]
 17128 019d 2E 48                   		bra	.L1112
 17129                             	.L1115:
 17130                             		.loc 2 16105 9 discriminator 14
 17131 019f ED A5 05                		mov.L	20[r10], r5
 17132 01a2 60 15                   		sub	#1, r5
 17133 01a4 6C 25                   		shll	#2, r5
 17134 01a6 4B A5                   		add	r10, r5
 17135 01a8 AC DC                   		mov.L	76[r5], r4
 17136 01aa ED A5 18                		mov.L	96[r10], r5
 17137 01ad EC 55                   		mov.L	[r5], r5
 17138 01af 75 05 FF                		cmp	#-1, r5
 17139 01b2 20 0C                   		beq	.L1113
 17140                             		.loc 2 16105 9 discriminator 9
 17141 01b4 ED A5 18                		mov.L	96[r10], r5
 17142 01b7 EC 55                   		mov.L	[r5], r5
 17143 01b9 62 35                   		add	#3, r5
 17144 01bb 6C 25                   		shll	#2, r5
 17145 01bd 0B                      		bra	.L1114
 17146                             	.L1113:
 17147                             		.loc 2 16105 9 discriminator 10
 17148 01be 66 C5                   		mov.L	#12, r5
 17149                             	.L1114:
 17150                             		.loc 2 16105 9 discriminator 12
 17151 01c0 4B 54                   		add	r5, r4
 17152 01c2 ED A5 05                		mov.L	20[r10], r5
 17153 01c5 6C 25                   		shll	#2, r5
 17154 01c7 4B A5                   		add	r10, r5
 17155 01c9 A4 DC                   		mov.L	r4, 76[r5]
 17156 01cb ED A5 18                		mov.L	96[r10], r5
 17157 01ce EC 54                   		mov.L	[r5], r4
 17158 01d0 ED A5 05                		mov.L	20[r10], r5
 17159 01d3 6C 25                   		shll	#2, r5
 17160 01d5 4B A5                   		add	r10, r5
 17161 01d7 AC DD                   		mov.L	76[r5], r5
 17162 01d9 62 14                   		add	#1, r4
 17163 01db A0 5C                   		mov.L	r4, 4[r5]
 17164 01dd ED A5 05                		mov.L	20[r10], r5
 17165 01e0 62 15                   		add	#1, r5
 17166 01e2 E7 A5 05                		mov.L	r5, 20[r10]
 17167                             	.L1112:
 17168                             		.loc 2 16105 9 discriminator 13
 17169 01e5 ED A5 05                		mov.L	20[r10], r5
 17170 01e8 61 25                   		cmp	#2, r5
 17171 01ea 2B B5                   		ble	.L1115
 17172                             	.L1108:
 17173                             	.LBE104:
16106:../src/wolfcrypt/src/sp_int.c ****         ALLOC_SP_INT_ARRAY(d, a->used * 2 + 1, 2, err, NULL);
 17174                             		.loc 2 16106 9 is_stmt 1
 17175 01ec EC A5                   		mov.L	[r10], r5
 17176 01ee 61 05                   		cmp	#0, r5
 17177 01f0 3B A0 00                		bne	.L1116
 17178                             		.loc 2 16106 9 is_stmt 0 discriminator 1
 17179 01f3 ED A5 18                		mov.L	96[r10], r5
 17180 01f6 EC 55                   		mov.L	[r5], r5
 17181 01f8 4B 55                   		add	r5, r5
 17182 01fa 75 05 FF                		cmp	#-1, r5
 17183 01fd 20 0D                   		beq	.L1117
 17184                             		.loc 2 16106 9 discriminator 2
 17185 01ff ED A5 18                		mov.L	96[r10], r5
 17186 0202 EC 55                   		mov.L	[r5], r5
 17187 0204 6C 45                   		shll	#4, r5
 17188 0206 71 55 18                		add	#24, r5
 17189 0209 0C                      		bra	.L1118
 17190                             	.L1117:
 17191                             		.loc 2 16106 9 discriminator 3
 17192 020a 75 45 18                		mov.L	#24, r5
 17193                             	.L1118:
 17194                             		.loc 2 16106 9 discriminator 5
 17195 020d EF 51                   		mov.L	r5, r1
 17196 020f 05 00 00 00             		bsr	_wolfSSL_Malloc
 17197 0213 E7 A1 04                		mov.L	r1, 16[r10]
 17198 0216 ED A5 04                		mov.L	16[r10], r5
 17199 0219 61 05                   		cmp	#0, r5
 17200 021b 1E                      		bne	.L1119
 17201                             		.loc 2 16106 9 discriminator 6
 17202 021c F8 A6 FE                		mov.L	#-2, [r10]
 17203 021f 2E 71                   		bra	.L1116
 17204                             	.L1119:
 17205                             	.LBB105:
 17206                             		.loc 2 16106 9 discriminator 7
 17207 0221 ED A5 04                		mov.L	16[r10], r5
 17208 0224 E7 A5 16                		mov.L	r5, 88[r10]
 17209 0227 ED A5 18                		mov.L	96[r10], r5
 17210 022a EC 55                   		mov.L	[r5], r5
 17211 022c 4B 55                   		add	r5, r5
 17212 022e EF 54                   		mov.L	r5, r4
 17213 0230 ED A5 16                		mov.L	88[r10], r5
 17214 0233 62 14                   		add	#1, r4
 17215 0235 A0 5C                   		mov.L	r4, 4[r5]
 17216 0237 F9 A6 06 01             		mov.L	#1, 24[r10]
 17217 023b 2E 4E                   		bra	.L1120
 17218                             	.L1123:
 17219                             		.loc 2 16106 9 discriminator 14
 17220 023d ED A5 06                		mov.L	24[r10], r5
 17221 0240 60 15                   		sub	#1, r5
 17222 0242 6C 25                   		shll	#2, r5
 17223 0244 4B A5                   		add	r10, r5
 17224 0246 AD D4                   		mov.L	88[r5], r4
 17225 0248 ED A5 18                		mov.L	96[r10], r5
 17226 024b EC 55                   		mov.L	[r5], r5
 17227 024d 4B 55                   		add	r5, r5
 17228 024f 75 05 FF                		cmp	#-1, r5
 17229 0252 20 0C                   		beq	.L1121
 17230                             		.loc 2 16106 9 discriminator 9
 17231 0254 ED A5 18                		mov.L	96[r10], r5
 17232 0257 EC 55                   		mov.L	[r5], r5
 17233 0259 6C 35                   		shll	#3, r5
 17234 025b 62 C5                   		add	#12, r5
 17235 025d 0B                      		bra	.L1122
 17236                             	.L1121:
 17237                             		.loc 2 16106 9 discriminator 10
 17238 025e 66 C5                   		mov.L	#12, r5
 17239                             	.L1122:
 17240                             		.loc 2 16106 9 discriminator 12
 17241 0260 4B 54                   		add	r5, r4
 17242 0262 ED A5 06                		mov.L	24[r10], r5
 17243 0265 6C 25                   		shll	#2, r5
 17244 0267 4B A5                   		add	r10, r5
 17245 0269 A5 D4                   		mov.L	r4, 88[r5]
 17246 026b ED A5 18                		mov.L	96[r10], r5
 17247 026e EC 55                   		mov.L	[r5], r5
 17248 0270 4B 55                   		add	r5, r5
 17249 0272 EF 54                   		mov.L	r5, r4
 17250 0274 ED A5 06                		mov.L	24[r10], r5
 17251 0277 6C 25                   		shll	#2, r5
 17252 0279 4B A5                   		add	r10, r5
 17253 027b AD D5                   		mov.L	88[r5], r5
 17254 027d 62 14                   		add	#1, r4
 17255 027f A0 5C                   		mov.L	r4, 4[r5]
 17256 0281 ED A5 06                		mov.L	24[r10], r5
 17257 0284 62 15                   		add	#1, r5
 17258 0286 E7 A5 06                		mov.L	r5, 24[r10]
 17259                             	.L1120:
 17260                             		.loc 2 16106 9 discriminator 13
 17261 0289 ED A5 06                		mov.L	24[r10], r5
 17262 028c 61 15                   		cmp	#1, r5
 17263 028e 2B AF                   		ble	.L1123
 17264                             	.L1116:
 17265                             	.LBE105:
16107:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
 17266                             		.loc 2 16107 12 is_stmt 1
 17267 0290 EC A5                   		mov.L	[r10], r5
 17268 0292 61 05                   		cmp	#0, r5
 17269 0294 3B 9F 01                		bne	.L1124
16108:../src/wolfcrypt/src/sp_int.c ****             b  = ds[0];
 17270                             		.loc 2 16108 16
 17271 0297 ED A5 13                		mov.L	76[r10], r5
 17272 029a E7 A5 08                		mov.L	r5, 32[r10]
16109:../src/wolfcrypt/src/sp_int.c ****             c  = ds[1];
 17273                             		.loc 2 16109 16
 17274 029d ED A5 14                		mov.L	80[r10], r5
 17275 02a0 E7 A5 09                		mov.L	r5, 36[r10]
16110:../src/wolfcrypt/src/sp_int.c ****             n1 = ds[2];
 17276                             		.loc 2 16110 16
 17277 02a3 ED A5 15                		mov.L	84[r10], r5
 17278 02a6 E7 A5 0A                		mov.L	r5, 40[r10]
16111:../src/wolfcrypt/src/sp_int.c ****             y  = d[0];
 17279                             		.loc 2 16111 16
 17280 02a9 ED A5 16                		mov.L	88[r10], r5
 17281 02ac E7 A5 0B                		mov.L	r5, 44[r10]
16112:../src/wolfcrypt/src/sp_int.c ****             r  = d[1];
 17282                             		.loc 2 16112 16
 17283 02af ED A5 17                		mov.L	92[r10], r5
 17284 02b2 E7 A5 0C                		mov.L	r5, 48[r10]
16113:../src/wolfcrypt/src/sp_int.c **** 
16114:../src/wolfcrypt/src/sp_int.c ****             /* Only 'y' needs to be twice as big. */
16115:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(b , a->used + 1);
 17285                             		.loc 2 16115 31
 17286 02b5 ED A5 18                		mov.L	96[r10], r5
 17287 02b8 EC 55                   		mov.L	[r5], r5
 17288                             		.loc 2 16115 13
 17289 02ba 62 15                   		add	#1, r5
 17290 02bc EF 52                   		mov.L	r5, r2
 17291 02be ED A1 08                		mov.L	32[r10], r1
 17292 02c1 05 00 00 00             		bsr	_sp_init_size
16116:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(c , a->used + 1);
 17293                             		.loc 2 16116 31
 17294 02c5 ED A5 18                		mov.L	96[r10], r5
 17295 02c8 EC 55                   		mov.L	[r5], r5
 17296                             		.loc 2 16116 13
 17297 02ca 62 15                   		add	#1, r5
 17298 02cc EF 52                   		mov.L	r5, r2
 17299 02ce ED A1 09                		mov.L	36[r10], r1
 17300 02d1 05 00 00 00             		bsr	_sp_init_size
16117:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(n1, a->used + 1);
 17301                             		.loc 2 16117 31
 17302 02d5 ED A5 18                		mov.L	96[r10], r5
 17303 02d8 EC 55                   		mov.L	[r5], r5
 17304                             		.loc 2 16117 13
 17305 02da 62 15                   		add	#1, r5
 17306 02dc EF 52                   		mov.L	r5, r2
 17307 02de ED A1 0A                		mov.L	40[r10], r1
 17308 02e1 05 00 00 00             		bsr	_sp_init_size
16118:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(y , a->used * 2 + 1);
 17309                             		.loc 2 16118 31
 17310 02e5 ED A5 18                		mov.L	96[r10], r5
 17311 02e8 EC 55                   		mov.L	[r5], r5
 17312                             		.loc 2 16118 38
 17313 02ea 4B 55                   		add	r5, r5
 17314                             		.loc 2 16118 13
 17315 02ec 62 15                   		add	#1, r5
 17316 02ee EF 52                   		mov.L	r5, r2
 17317 02f0 ED A1 0B                		mov.L	44[r10], r1
 17318 02f3 05 00 00 00             		bsr	_sp_init_size
16119:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(r , a->used * 2 + 1);
 17319                             		.loc 2 16119 31
 17320 02f7 ED A5 18                		mov.L	96[r10], r5
 17321 02fa EC 55                   		mov.L	[r5], r5
 17322                             		.loc 2 16119 38
 17323 02fc 4B 55                   		add	r5, r5
 17324                             		.loc 2 16119 13
 17325 02fe 62 15                   		add	#1, r5
 17326 0300 EF 52                   		mov.L	r5, r2
 17327 0302 ED A1 0C                		mov.L	48[r10], r1
 17328 0305 05 00 00 00             		bsr	_sp_init_size
16120:../src/wolfcrypt/src/sp_int.c **** 
16121:../src/wolfcrypt/src/sp_int.c ****             _sp_sub_d(a, 2, c);
 17329                             		.loc 2 16121 13
 17330 0309 ED A3 09                		mov.L	36[r10], r3
 17331 030c 66 22                   		mov.L	#2, r2
 17332 030e ED A1 18                		mov.L	96[r10], r1
 17333 0311 05 00 00 00             		bsr	__sp_sub_d
16122:../src/wolfcrypt/src/sp_int.c **** 
16123:../src/wolfcrypt/src/sp_int.c ****             bits &= SP_WORD_MASK;
 17334                             		.loc 2 16123 18
 17335 0315 ED A5 0D                		mov.L	52[r10], r5
 17336 0318 75 25 1F                		and	#31, r5
 17337 031b E7 A5 0D                		mov.L	r5, 52[r10]
16124:../src/wolfcrypt/src/sp_int.c **** 
16125:../src/wolfcrypt/src/sp_int.c ****             while (t > 0) {
 17338                             		.loc 2 16125 19
 17339 031e 38 E5 00                		bra	.L1125
 17340                             	.L1134:
16126:../src/wolfcrypt/src/sp_int.c ****                 err = wc_RNG_GenerateBlock(rng, (byte*)b->dp, baseSz);
 17341                             		.loc 2 16126 56
 17342 0321 ED A5 08                		mov.L	32[r10], r5
 17343 0324 62 85                   		add	#8, r5
 17344                             		.loc 2 16126 23
 17345 0326 ED A3 0E                		mov.L	56[r10], r3
 17346 0329 EF 52                   		mov.L	r5, r2
 17347 032b ED A1 1B                		mov.L	108[r10], r1
 17348 032e 05 00 00 00             		bsr	_wc_RNG_GenerateBlock
 17349 0332 E3 A1                   		mov.L	r1, [r10]
16127:../src/wolfcrypt/src/sp_int.c ****                 if (err != MP_OKAY) {
 17350                             		.loc 2 16127 20
 17351 0334 EC A5                   		mov.L	[r10], r5
 17352 0336 61 05                   		cmp	#0, r5
 17353 0338 3B D7 00                		bne	.L1139
16128:../src/wolfcrypt/src/sp_int.c ****                     break;
16129:../src/wolfcrypt/src/sp_int.c ****                 }
16130:../src/wolfcrypt/src/sp_int.c ****                 b->used = a->used;
 17354                             		.loc 2 16130 28
 17355 033b ED A5 18                		mov.L	96[r10], r5
 17356 033e EC 54                   		mov.L	[r5], r4
 17357                             		.loc 2 16130 25
 17358 0340 ED A5 08                		mov.L	32[r10], r5
 17359 0343 E3 54                   		mov.L	r4, [r5]
16131:../src/wolfcrypt/src/sp_int.c **** 
16132:../src/wolfcrypt/src/sp_int.c ****             #ifdef BIG_ENDIAN_ORDER
16133:../src/wolfcrypt/src/sp_int.c ****                 if (((baseSz * 8) & SP_WORD_MASK) != 0) {
16134:../src/wolfcrypt/src/sp_int.c ****                     b->dp[b->used-1] >>=
16135:../src/wolfcrypt/src/sp_int.c ****                         SP_WORD_SIZE - ((baseSz * 8) & SP_WORD_MASK);
16136:../src/wolfcrypt/src/sp_int.c ****                 }
16137:../src/wolfcrypt/src/sp_int.c ****             #endif /* LITTLE_ENDIAN_ORDER */
16138:../src/wolfcrypt/src/sp_int.c **** 
16139:../src/wolfcrypt/src/sp_int.c ****                 /* Ensure the top word has no more bits than necessary. */
16140:../src/wolfcrypt/src/sp_int.c ****                 if (bits > 0) {
 17360                             		.loc 2 16140 20
 17361 0345 ED A5 0D                		mov.L	52[r10], r5
 17362 0348 61 05                   		cmp	#0, r5
 17363 034a 2B 65                   		ble	.L1128
16141:../src/wolfcrypt/src/sp_int.c ****                     b->dp[b->used - 1] &= ((sp_int_digit)1 << bits) - 1;
 17364                             		.loc 2 16141 28
 17365 034c ED A5 08                		mov.L	32[r10], r5
 17366 034f EC 55                   		mov.L	[r5], r5
 17367                             		.loc 2 16141 40
 17368 0351 60 15                   		sub	#1, r5
 17369 0353 ED A4 08                		mov.L	32[r10], r4
 17370 0356 62 25                   		add	#2, r5
 17371 0358 FE 65 43                		mov.L	[r5,r4], r3
 17372                             		.loc 2 16141 60
 17373 035b 66 14                   		mov.L	#1, r4
 17374 035d ED A5 0D                		mov.L	52[r10], r5
 17375 0360 EF 47                   		mov.L	r4, r7
 17376 0362 FD 62 57                		shll	r5, r7
 17377 0365 EF 75                   		mov.L	r7, r5
 17378                             		.loc 2 16141 69
 17379 0367 71 54 FF                		add	#-1, r5, r4
 17380                             		.loc 2 16141 28
 17381 036a ED A5 08                		mov.L	32[r10], r5
 17382 036d EC 55                   		mov.L	[r5], r5
 17383                             		.loc 2 16141 40
 17384 036f 60 15                   		sub	#1, r5
 17385 0371 53 43                   		and	r4, r3
 17386 0373 ED A4 08                		mov.L	32[r10], r4
 17387 0376 62 25                   		add	#2, r5
 17388 0378 FE 25 43                		mov.L	r3, [r5,r4]
 17389                             	.LBB106:
16142:../src/wolfcrypt/src/sp_int.c ****                     sp_clamp(b);
 17390                             		.loc 2 16142 21
 17391 037b ED A5 08                		mov.L	32[r10], r5
 17392 037e EC 55                   		mov.L	[r5], r5
 17393 0380 60 15                   		sub	#1, r5
 17394 0382 E7 A5 07                		mov.L	r5, 28[r10]
 17395 0385 09                      		bra	.L1129
 17396                             	.L1131:
 17397                             		.loc 2 16142 21 is_stmt 0 discriminator 5
 17398 0386 ED A5 07                		mov.L	28[r10], r5
 17399 0389 60 15                   		sub	#1, r5
 17400 038b E7 A5 07                		mov.L	r5, 28[r10]
 17401                             	.L1129:
 17402                             		.loc 2 16142 21 discriminator 1
 17403 038e ED A5 07                		mov.L	28[r10], r5
 17404 0391 61 05                   		cmp	#0, r5
 17405 0393 29 11                   		blt	.L1130
 17406                             		.loc 2 16142 21 discriminator 3
 17407 0395 ED A4 08                		mov.L	32[r10], r4
 17408 0398 ED A5 07                		mov.L	28[r10], r5
 17409 039b 62 25                   		add	#2, r5
 17410 039d FE 65 45                		mov.L	[r5,r4], r5
 17411 03a0 61 05                   		cmp	#0, r5
 17412 03a2 20 E4                   		beq	.L1131
 17413                             	.L1130:
 17414                             		.loc 2 16142 21 discriminator 6
 17415 03a4 ED A5 07                		mov.L	28[r10], r5
 17416 03a7 71 54 01                		add	#1, r5, r4
 17417 03aa ED A5 08                		mov.L	32[r10], r5
 17418 03ad E3 54                   		mov.L	r4, [r5]
 17419                             	.L1128:
 17420                             	.LBE106:
16143:../src/wolfcrypt/src/sp_int.c ****                 }
16144:../src/wolfcrypt/src/sp_int.c **** 
16145:../src/wolfcrypt/src/sp_int.c ****                 if ((sp_cmp_d(b, 2) != MP_GT) || (_sp_cmp(b, c) != MP_LT)) {
 17421                             		.loc 2 16145 22 is_stmt 1
 17422 03af 66 22                   		mov.L	#2, r2
 17423 03b1 ED A1 08                		mov.L	32[r10], r1
 17424 03b4 05 00 00 00             		bsr	_sp_cmp_d
 17425 03b8 EF 15                   		mov.L	r1, r5
 17426                             		.loc 2 16145 20
 17427 03ba 61 15                   		cmp	#1, r5
 17428 03bc 21 47                   		bne	.L1125
 17429                             		.loc 2 16145 51 discriminator 1
 17430 03be ED A2 09                		mov.L	36[r10], r2
 17431 03c1 ED A1 08                		mov.L	32[r10], r1
 17432 03c4 05 00 00 00             		bsr	__sp_cmp
 17433 03c8 EF 15                   		mov.L	r1, r5
 17434                             		.loc 2 16145 47 discriminator 1
 17435 03ca 75 05 FF                		cmp	#-1, r5
 17436 03cd 13                      		beq	.L1133
16146:../src/wolfcrypt/src/sp_int.c ****                     continue;
 17437                             		.loc 2 16146 21
 17438 03ce 2E 35                   		bra	.L1125
 17439                             	.L1133:
16147:../src/wolfcrypt/src/sp_int.c ****                 }
16148:../src/wolfcrypt/src/sp_int.c **** 
16149:../src/wolfcrypt/src/sp_int.c ****                 err = sp_prime_miller_rabin_ex(a, b, &ret, n1, y, r);
 17440                             		.loc 2 16149 23
 17441 03d0 71 A5 44                		add	#0x44, r10, r5
 17442 03d3 ED A4 0C                		mov.L	48[r10], r4
 17443 03d6 A0 0C                   		mov.L	r4, 4[r0]
 17444 03d8 ED A4 0B                		mov.L	44[r10], r4
 17445 03db E3 04                   		mov.L	r4, [r0]
 17446 03dd ED A4 0A                		mov.L	40[r10], r4
 17447 03e0 EF 53                   		mov.L	r5, r3
 17448 03e2 ED A2 08                		mov.L	32[r10], r2
 17449 03e5 ED A1 18                		mov.L	96[r10], r1
 17450 03e8 05 00 00 00             		bsr	_sp_prime_miller_rabin_ex
 17451 03ec E3 A1                   		mov.L	r1, [r10]
16150:../src/wolfcrypt/src/sp_int.c ****                 if ((err != MP_OKAY) || (ret == MP_NO)) {
 17452                             		.loc 2 16150 20
 17453 03ee EC A5                   		mov.L	[r10], r5
 17454 03f0 61 05                   		cmp	#0, r5
 17455 03f2 21 1E                   		bne	.L1127
 17456                             		.loc 2 16150 46 discriminator 1
 17457 03f4 ED A5 11                		mov.L	68[r10], r5
 17458                             		.loc 2 16150 38 discriminator 1
 17459 03f7 61 05                   		cmp	#0, r5
 17460 03f9 20 17                   		beq	.L1127
16151:../src/wolfcrypt/src/sp_int.c ****                     break;
16152:../src/wolfcrypt/src/sp_int.c ****                 }
16153:../src/wolfcrypt/src/sp_int.c **** 
16154:../src/wolfcrypt/src/sp_int.c ****                 t--;
 17461                             		.loc 2 16154 18
 17462 03fb ED A5 19                		mov.L	100[r10], r5
 17463 03fe 60 15                   		sub	#1, r5
 17464 0400 E7 A5 19                		mov.L	r5, 100[r10]
 17465                             		.balign 8,3,1
 17466                             	.L1125:
16125:../src/wolfcrypt/src/sp_int.c ****                 err = wc_RNG_GenerateBlock(rng, (byte*)b->dp, baseSz);
 17467                             		.loc 2 16125 19
 17468 0403 ED A5 19                		mov.L	100[r10], r5
 17469 0406 61 05                   		cmp	#0, r5
 17470 0408 2B 05 38 17 FF          		bgt	.L1134
 17471 040d 2E 03                   		bra	.L1127
 17472                             	.L1139:
16128:../src/wolfcrypt/src/sp_int.c ****                 }
 17473                             		.loc 2 16128 21
 17474 040f 03                      		nop
 17475                             		.balign 8,3,1
 17476                             	.L1127:
16155:../src/wolfcrypt/src/sp_int.c ****             }
16156:../src/wolfcrypt/src/sp_int.c **** 
16157:../src/wolfcrypt/src/sp_int.c ****             sp_clear(n1);
 17477                             		.loc 2 16157 13
 17478 0410 ED A1 0A                		mov.L	40[r10], r1
 17479 0413 05 00 00 00             		bsr	_sp_clear
16158:../src/wolfcrypt/src/sp_int.c ****             sp_clear(y);
 17480                             		.loc 2 16158 13
 17481 0417 ED A1 0B                		mov.L	44[r10], r1
 17482 041a 05 00 00 00             		bsr	_sp_clear
16159:../src/wolfcrypt/src/sp_int.c ****             sp_clear(r);
 17483                             		.loc 2 16159 13
 17484 041e ED A1 0C                		mov.L	48[r10], r1
 17485 0421 05 00 00 00             		bsr	_sp_clear
16160:../src/wolfcrypt/src/sp_int.c ****             sp_clear(b);
 17486                             		.loc 2 16160 13
 17487 0425 ED A1 08                		mov.L	32[r10], r1
 17488 0428 05 00 00 00             		bsr	_sp_clear
16161:../src/wolfcrypt/src/sp_int.c ****             sp_clear(c);
 17489                             		.loc 2 16161 13
 17490 042c ED A1 09                		mov.L	36[r10], r1
 17491 042f 05 00 00 00             		bsr	_sp_clear
 17492                             	.L1124:
16162:../src/wolfcrypt/src/sp_int.c ****         }
16163:../src/wolfcrypt/src/sp_int.c **** 
16164:../src/wolfcrypt/src/sp_int.c ****         FREE_SP_INT_ARRAY(d, NULL);
 17493                             		.loc 2 16164 9
 17494 0433 ED A5 04                		mov.L	16[r10], r5
 17495 0436 61 05                   		cmp	#0, r5
 17496 0438 20 15                   		beq	.L1135
 17497                             	.LBB107:
 17498                             		.loc 2 16164 9 is_stmt 0 discriminator 1
 17499 043a ED A5 04                		mov.L	16[r10], r5
 17500 043d E7 A5 0F                		mov.L	r5, 60[r10]
 17501 0440 ED A5 0F                		mov.L	60[r10], r5
 17502 0443 61 05                   		cmp	#0, r5
 17503 0445 10                      		beq	.L1135
 17504                             		.loc 2 16164 9 discriminator 2
 17505 0446 ED A1 0F                		mov.L	60[r10], r1
 17506 0449 05 00 00 00             		bsr	_wolfSSL_Free
 17507                             	.L1135:
 17508                             	.LBE107:
16165:../src/wolfcrypt/src/sp_int.c ****         FREE_SP_INT_ARRAY(ds, NULL);
 17509                             		.loc 2 16165 9 is_stmt 1
 17510 044d ED A5 03                		mov.L	12[r10], r5
 17511 0450 61 05                   		cmp	#0, r5
 17512 0452 20 16                   		beq	.L1106
 17513                             	.LBB108:
 17514                             		.loc 2 16165 9 is_stmt 0 discriminator 1
 17515 0454 ED A5 03                		mov.L	12[r10], r5
 17516 0457 E7 A5 10                		mov.L	r5, 64[r10]
 17517 045a ED A5 10                		mov.L	64[r10], r5
 17518 045d 61 05                   		cmp	#0, r5
 17519 045f 11                      		beq	.L1106
 17520                             		.loc 2 16165 9 discriminator 2
 17521 0460 ED A1 10                		mov.L	64[r10], r1
 17522 0463 05 00 00 00             		bsr	_wolfSSL_Free
 17523 0467 03                      		.balign 8,3,1
 17524                             	.L1106:
 17525                             	.LBE108:
 17526                             	.LBE103:
16166:../src/wolfcrypt/src/sp_int.c ****     }
16167:../src/wolfcrypt/src/sp_int.c **** #else
16168:../src/wolfcrypt/src/sp_int.c ****     (void)t;
16169:../src/wolfcrypt/src/sp_int.c **** #endif /* !WC_NO_RNG */
16170:../src/wolfcrypt/src/sp_int.c **** 
16171:../src/wolfcrypt/src/sp_int.c ****     if (result != NULL) {
 17527                             		.loc 2 16171 8 is_stmt 1
 17528 0468 ED A5 1A                		mov.L	104[r10], r5
 17529 046b 61 05                   		cmp	#0, r5
 17530 046d 11                      		beq	.L1137
16172:../src/wolfcrypt/src/sp_int.c ****         *result = ret;
 17531                             		.loc 2 16172 17
 17532 046e ED A4 11                		mov.L	68[r10], r4
 17533 0471 ED A5 1A                		mov.L	104[r10], r5
 17534 0474 E3 54                   		mov.L	r4, [r5]
 17535                             	.L1137:
16173:../src/wolfcrypt/src/sp_int.c ****     }
16174:../src/wolfcrypt/src/sp_int.c **** 
16175:../src/wolfcrypt/src/sp_int.c ****     RESTORE_VECTOR_REGISTERS();
16176:../src/wolfcrypt/src/sp_int.c **** 
16177:../src/wolfcrypt/src/sp_int.c ****     return err;
 17536                             		.loc 2 16177 12
 17537 0476 EC A5                   		mov.L	[r10], r5
16178:../src/wolfcrypt/src/sp_int.c **** }
 17538                             		.loc 2 16178 1
 17539 0478 EF 51                   		mov.L	r5, r1
 17540 047a 3F 6A 23                		rtsd	#140, r6-r10
 17541                             	.LFE134:
 17543 047d FC 13 00                		.section	.text.CheckRunTimeSettings,"ax",@progbits
 17544                             		.global	_CheckRunTimeSettings
 17546                             	_CheckRunTimeSettings:
 17547                             	.LFB135:
16179:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_PRIME_GEN */
16180:../src/wolfcrypt/src/sp_int.c **** 
16181:../src/wolfcrypt/src/sp_int.c **** #if !defined(NO_RSA) && defined(WOLFSSL_KEY_GEN)
16182:../src/wolfcrypt/src/sp_int.c **** 
16183:../src/wolfcrypt/src/sp_int.c **** /* Calculates the Greatest Common Denominator (GCD) of a and b into r.
16184:../src/wolfcrypt/src/sp_int.c ****  *
16185:../src/wolfcrypt/src/sp_int.c ****  * a and b are positive integers.
16186:../src/wolfcrypt/src/sp_int.c ****  *
16187:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer of first operand.
16188:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer of second operand.
16189:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
16190:../src/wolfcrypt/src/sp_int.c ****  *
16191:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
16192:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, b or r is NULL or too large.
16193:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
16194:../src/wolfcrypt/src/sp_int.c ****  */
16195:../src/wolfcrypt/src/sp_int.c **** int sp_gcd(sp_int* a, sp_int* b, sp_int* r)
16196:../src/wolfcrypt/src/sp_int.c **** {
16197:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
16198:../src/wolfcrypt/src/sp_int.c **** 
16199:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (b == NULL) || (r == NULL)) {
16200:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
16201:../src/wolfcrypt/src/sp_int.c ****     }
16202:../src/wolfcrypt/src/sp_int.c ****     else if (a->used >= SP_INT_DIGITS || b->used >= SP_INT_DIGITS) {
16203:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
16204:../src/wolfcrypt/src/sp_int.c ****     }
16205:../src/wolfcrypt/src/sp_int.c ****     else if (sp_iszero(a)) {
16206:../src/wolfcrypt/src/sp_int.c ****         /* GCD of 0 and 0 is undefined as all integers divide 0. */
16207:../src/wolfcrypt/src/sp_int.c ****         if (sp_iszero(b)) {
16208:../src/wolfcrypt/src/sp_int.c ****             err = MP_VAL;
16209:../src/wolfcrypt/src/sp_int.c ****         }
16210:../src/wolfcrypt/src/sp_int.c ****         else {
16211:../src/wolfcrypt/src/sp_int.c ****             err = sp_copy(b, r);
16212:../src/wolfcrypt/src/sp_int.c ****         }
16213:../src/wolfcrypt/src/sp_int.c ****     }
16214:../src/wolfcrypt/src/sp_int.c ****     else if (sp_iszero(b)) {
16215:../src/wolfcrypt/src/sp_int.c ****         err = sp_copy(a, r);
16216:../src/wolfcrypt/src/sp_int.c ****     }
16217:../src/wolfcrypt/src/sp_int.c ****     else {
16218:../src/wolfcrypt/src/sp_int.c ****         sp_int* u = NULL;
16219:../src/wolfcrypt/src/sp_int.c ****         sp_int* v = NULL;
16220:../src/wolfcrypt/src/sp_int.c ****         sp_int* t = NULL;
16221:../src/wolfcrypt/src/sp_int.c ****         int used = (a->used >= b->used) ? a->used + 1 : b->used + 1;
16222:../src/wolfcrypt/src/sp_int.c ****         DECL_SP_INT_ARRAY(d, used, 3);
16223:../src/wolfcrypt/src/sp_int.c **** 
16224:../src/wolfcrypt/src/sp_int.c ****         SAVE_VECTOR_REGISTERS(err = _svr_ret;);
16225:../src/wolfcrypt/src/sp_int.c **** 
16226:../src/wolfcrypt/src/sp_int.c ****         ALLOC_SP_INT_ARRAY(d, used, 3, err, NULL);
16227:../src/wolfcrypt/src/sp_int.c **** 
16228:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
16229:../src/wolfcrypt/src/sp_int.c ****             u = d[0];
16230:../src/wolfcrypt/src/sp_int.c ****             v = d[1];
16231:../src/wolfcrypt/src/sp_int.c ****             t = d[2];
16232:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(u, used);
16233:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(v, used);
16234:../src/wolfcrypt/src/sp_int.c ****             sp_init_size(t, used);
16235:../src/wolfcrypt/src/sp_int.c **** 
16236:../src/wolfcrypt/src/sp_int.c ****             if (_sp_cmp(a, b) != MP_LT) {
16237:../src/wolfcrypt/src/sp_int.c ****                 sp_copy(b, u);
16238:../src/wolfcrypt/src/sp_int.c ****                 /* First iteration - u = a, v = b */
16239:../src/wolfcrypt/src/sp_int.c ****                 if (b->used == 1) {
16240:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mod_d(a, b->dp[0], &v->dp[0]);
16241:../src/wolfcrypt/src/sp_int.c ****                     if (err == MP_OKAY) {
16242:../src/wolfcrypt/src/sp_int.c ****                         v->used = (v->dp[0] != 0);
16243:../src/wolfcrypt/src/sp_int.c ****                     }
16244:../src/wolfcrypt/src/sp_int.c ****                 }
16245:../src/wolfcrypt/src/sp_int.c ****                 else {
16246:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mod(a, b, v);
16247:../src/wolfcrypt/src/sp_int.c ****                 }
16248:../src/wolfcrypt/src/sp_int.c ****             }
16249:../src/wolfcrypt/src/sp_int.c ****             else {
16250:../src/wolfcrypt/src/sp_int.c ****                 sp_copy(a, u);
16251:../src/wolfcrypt/src/sp_int.c ****                 /* First iteration - u = b, v = a */
16252:../src/wolfcrypt/src/sp_int.c ****                 if (a->used == 1) {
16253:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mod_d(b, a->dp[0], &v->dp[0]);
16254:../src/wolfcrypt/src/sp_int.c ****                     if (err == MP_OKAY) {
16255:../src/wolfcrypt/src/sp_int.c ****                         v->used = (v->dp[0] != 0);
16256:../src/wolfcrypt/src/sp_int.c ****                     }
16257:../src/wolfcrypt/src/sp_int.c ****                 }
16258:../src/wolfcrypt/src/sp_int.c ****                 else {
16259:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mod(b, a, v);
16260:../src/wolfcrypt/src/sp_int.c ****                 }
16261:../src/wolfcrypt/src/sp_int.c ****             }
16262:../src/wolfcrypt/src/sp_int.c ****         }
16263:../src/wolfcrypt/src/sp_int.c **** 
16264:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
16265:../src/wolfcrypt/src/sp_int.c **** #ifdef WOLFSSL_SP_INT_NEGATIVE
16266:../src/wolfcrypt/src/sp_int.c ****             u->sign = MP_ZPOS;
16267:../src/wolfcrypt/src/sp_int.c ****             v->sign = MP_ZPOS;
16268:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_INT_NEGATIVE */
16269:../src/wolfcrypt/src/sp_int.c **** 
16270:../src/wolfcrypt/src/sp_int.c ****             while (!sp_iszero(v)) {
16271:../src/wolfcrypt/src/sp_int.c ****                 if (v->used == 1) {
16272:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mod_d(u, v->dp[0], &t->dp[0]);
16273:../src/wolfcrypt/src/sp_int.c ****                     if (err == MP_OKAY) {
16274:../src/wolfcrypt/src/sp_int.c ****                         t->used = (t->dp[0] != 0);
16275:../src/wolfcrypt/src/sp_int.c ****                     }
16276:../src/wolfcrypt/src/sp_int.c ****                 }
16277:../src/wolfcrypt/src/sp_int.c ****                 else {
16278:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mod(u, v, t);
16279:../src/wolfcrypt/src/sp_int.c ****                 }
16280:../src/wolfcrypt/src/sp_int.c ****                 if (err != MP_OKAY) {
16281:../src/wolfcrypt/src/sp_int.c ****                     break;
16282:../src/wolfcrypt/src/sp_int.c ****                 }
16283:../src/wolfcrypt/src/sp_int.c ****                 sp_copy(v, u);
16284:../src/wolfcrypt/src/sp_int.c ****                 sp_copy(t, v);
16285:../src/wolfcrypt/src/sp_int.c ****             }
16286:../src/wolfcrypt/src/sp_int.c ****             if (err == MP_OKAY)
16287:../src/wolfcrypt/src/sp_int.c ****                 err = sp_copy(u, r);
16288:../src/wolfcrypt/src/sp_int.c ****         }
16289:../src/wolfcrypt/src/sp_int.c **** 
16290:../src/wolfcrypt/src/sp_int.c ****         FREE_SP_INT_ARRAY(d, NULL);
16291:../src/wolfcrypt/src/sp_int.c **** 
16292:../src/wolfcrypt/src/sp_int.c ****         RESTORE_VECTOR_REGISTERS();
16293:../src/wolfcrypt/src/sp_int.c ****     }
16294:../src/wolfcrypt/src/sp_int.c **** 
16295:../src/wolfcrypt/src/sp_int.c ****     return err;
16296:../src/wolfcrypt/src/sp_int.c **** }
16297:../src/wolfcrypt/src/sp_int.c **** 
16298:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL && !NO_RSA && WOLFSSL_KEY_GEN */
16299:../src/wolfcrypt/src/sp_int.c **** 
16300:../src/wolfcrypt/src/sp_int.c **** #if !defined(NO_RSA) && defined(WOLFSSL_KEY_GEN) && \
16301:../src/wolfcrypt/src/sp_int.c ****     (!defined(WC_RSA_BLINDING) || defined(HAVE_FIPS) || defined(HAVE_SELFTEST))
16302:../src/wolfcrypt/src/sp_int.c **** 
16303:../src/wolfcrypt/src/sp_int.c **** /* Calculates the Lowest Common Multiple (LCM) of a and b and stores in r.
16304:../src/wolfcrypt/src/sp_int.c ****  *
16305:../src/wolfcrypt/src/sp_int.c ****  * a and b are positive integers.
16306:../src/wolfcrypt/src/sp_int.c ****  *
16307:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   a  SP integer of first operand.
16308:../src/wolfcrypt/src/sp_int.c ****  * @param  [in]   b  SP integer of second operand.
16309:../src/wolfcrypt/src/sp_int.c ****  * @param  [out]  r  SP integer to hold result.
16310:../src/wolfcrypt/src/sp_int.c ****  *
16311:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_OKAY on success.
16312:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_VAL when a, b or r is NULL; or a or b is zero.
16313:../src/wolfcrypt/src/sp_int.c ****  * @return  MP_MEM when dynamic memory allocation fails.
16314:../src/wolfcrypt/src/sp_int.c ****  */
16315:../src/wolfcrypt/src/sp_int.c **** int sp_lcm(sp_int* a, sp_int* b, sp_int* r)
16316:../src/wolfcrypt/src/sp_int.c **** {
16317:../src/wolfcrypt/src/sp_int.c ****     int err = MP_OKAY;
16318:../src/wolfcrypt/src/sp_int.c ****     int used = ((a == NULL) || (b == NULL)) ? 1 :
16319:../src/wolfcrypt/src/sp_int.c ****                    (a->used >= b->used ? a->used + 1: b->used + 1);
16320:../src/wolfcrypt/src/sp_int.c ****     DECL_SP_INT_ARRAY(t, used, 2);
16321:../src/wolfcrypt/src/sp_int.c **** 
16322:../src/wolfcrypt/src/sp_int.c ****     if ((a == NULL) || (b == NULL) || (r == NULL)) {
16323:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
16324:../src/wolfcrypt/src/sp_int.c ****     }
16325:../src/wolfcrypt/src/sp_int.c **** 
16326:../src/wolfcrypt/src/sp_int.c ****     /* LCM of 0 and any number is undefined as 0 is not in the set of values
16327:../src/wolfcrypt/src/sp_int.c ****      * being used.
16328:../src/wolfcrypt/src/sp_int.c ****      */
16329:../src/wolfcrypt/src/sp_int.c ****     if ((err == MP_OKAY) && (mp_iszero(a) || mp_iszero(b))) {
16330:../src/wolfcrypt/src/sp_int.c ****         err = MP_VAL;
16331:../src/wolfcrypt/src/sp_int.c ****     }
16332:../src/wolfcrypt/src/sp_int.c **** 
16333:../src/wolfcrypt/src/sp_int.c ****     ALLOC_SP_INT_ARRAY(t, used, 2, err, NULL);
16334:../src/wolfcrypt/src/sp_int.c **** 
16335:../src/wolfcrypt/src/sp_int.c ****     if (err == MP_OKAY) {
16336:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t[0], used);
16337:../src/wolfcrypt/src/sp_int.c ****         sp_init_size(t[1], used);
16338:../src/wolfcrypt/src/sp_int.c **** 
16339:../src/wolfcrypt/src/sp_int.c ****         SAVE_VECTOR_REGISTERS(err = _svr_ret;);
16340:../src/wolfcrypt/src/sp_int.c **** 
16341:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY)
16342:../src/wolfcrypt/src/sp_int.c ****             err = sp_gcd(a, b, t[0]);
16343:../src/wolfcrypt/src/sp_int.c **** 
16344:../src/wolfcrypt/src/sp_int.c ****         if (err == MP_OKAY) {
16345:../src/wolfcrypt/src/sp_int.c ****             if (_sp_cmp_abs(a, b) == MP_GT) {
16346:../src/wolfcrypt/src/sp_int.c ****                 err = sp_div(a, t[0], t[1], NULL);
16347:../src/wolfcrypt/src/sp_int.c ****                 if (err == MP_OKAY) {
16348:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mul(b, t[1], r);
16349:../src/wolfcrypt/src/sp_int.c ****                 }
16350:../src/wolfcrypt/src/sp_int.c ****             }
16351:../src/wolfcrypt/src/sp_int.c ****             else {
16352:../src/wolfcrypt/src/sp_int.c ****                 err = sp_div(b, t[0], t[1], NULL);
16353:../src/wolfcrypt/src/sp_int.c ****                 if (err == MP_OKAY) {
16354:../src/wolfcrypt/src/sp_int.c ****                     err = sp_mul(a, t[1], r);
16355:../src/wolfcrypt/src/sp_int.c ****                 }
16356:../src/wolfcrypt/src/sp_int.c ****             }
16357:../src/wolfcrypt/src/sp_int.c ****         }
16358:../src/wolfcrypt/src/sp_int.c **** 
16359:../src/wolfcrypt/src/sp_int.c ****         RESTORE_VECTOR_REGISTERS();
16360:../src/wolfcrypt/src/sp_int.c ****     }
16361:../src/wolfcrypt/src/sp_int.c **** 
16362:../src/wolfcrypt/src/sp_int.c ****     FREE_SP_INT_ARRAY(t, NULL);
16363:../src/wolfcrypt/src/sp_int.c ****     return err;
16364:../src/wolfcrypt/src/sp_int.c **** }
16365:../src/wolfcrypt/src/sp_int.c **** 
16366:../src/wolfcrypt/src/sp_int.c **** #endif /* WOLFSSL_SP_MATH_ALL && !NO_RSA && WOLFSSL_KEY_GEN */
16367:../src/wolfcrypt/src/sp_int.c **** 
16368:../src/wolfcrypt/src/sp_int.c **** /* Returns the run time settings.
16369:../src/wolfcrypt/src/sp_int.c ****  *
16370:../src/wolfcrypt/src/sp_int.c ****  * @return  Settings value.
16371:../src/wolfcrypt/src/sp_int.c ****  */
16372:../src/wolfcrypt/src/sp_int.c **** word32 CheckRunTimeSettings(void)
16373:../src/wolfcrypt/src/sp_int.c **** {
 17548                             		.loc 2 16373 1
 17549 0000 7E AA                   		push.l	r10
 17550                             	.LCFI199:
 17551 0002 EF 0A                   		mov.L	r0, r10
 17552                             	.LCFI200:
16374:../src/wolfcrypt/src/sp_int.c ****     return CTC_SETTINGS;
 17553                             		.loc 2 16374 12
 17554 0004 66 25                   		mov.L	#2, r5
16375:../src/wolfcrypt/src/sp_int.c **** }
 17555                             		.loc 2 16375 1
 17556 0006 EF 51                   		mov.L	r5, r1
 17557 0008 3F AA 01                		rtsd	#4, r10-r10
 17558                             	.LFE135:
 17560                             		.section	.text.CheckRunTimeFastMath,"ax",@progbits
 17561                             		.global	_CheckRunTimeFastMath
 17563                             	_CheckRunTimeFastMath:
 17564                             	.LFB136:
16376:../src/wolfcrypt/src/sp_int.c **** 
16377:../src/wolfcrypt/src/sp_int.c **** /* Returns the fast math settings.
16378:../src/wolfcrypt/src/sp_int.c ****  *
16379:../src/wolfcrypt/src/sp_int.c ****  * @return  Setting - number of bits in a digit.
16380:../src/wolfcrypt/src/sp_int.c ****  */
16381:../src/wolfcrypt/src/sp_int.c **** word32 CheckRunTimeFastMath(void)
16382:../src/wolfcrypt/src/sp_int.c **** {
 17565                             		.loc 2 16382 1
 17566 0000 7E AA                   		push.l	r10
 17567                             	.LCFI201:
 17568 0002 EF 0A                   		mov.L	r0, r10
 17569                             	.LCFI202:
16383:../src/wolfcrypt/src/sp_int.c ****     return SP_WORD_SIZE;
 17570                             		.loc 2 16383 12
 17571 0004 75 45 20                		mov.L	#32, r5
16384:../src/wolfcrypt/src/sp_int.c **** }
 17572                             		.loc 2 16384 1
 17573 0007 EF 51                   		mov.L	r5, r1
 17574 0009 3F AA 01                		rtsd	#4, r10-r10
 17575                             	.LFE136:
 17577                             		.section	.rodata.sp_rem6.3867,"a"
 17580                             	_sp_rem6.3867:
 17581 0000 00                      		.byte	0
 17582 0001 01                      		.byte	1
 17583 0002 02                      		.byte	2
 17584 0003 00                      		.byte	0
 17585 0004 01                      		.byte	1
 17586 0005 02                      		.byte	2
 17587                             		.section	.rodata.sp_r6.3866,"a"
 17590                             	_sp_r6.3866:
 17591 0000 00                      		.byte	0
 17592 0001 00                      		.byte	0
 17593 0002 00                      		.byte	0
 17594 0003 01                      		.byte	1
 17595 0004 01                      		.byte	1
 17596 0005 01                      		.byte	1
 17597                             		.section	.rodata.kHexChar.3118,"a"
 17600                             	_kHexChar.3118:
 17601 0000 30                      		.byte	48
 17602 0001 31                      		.byte	49
 17603 0002 32                      		.byte	50
 17604 0003 33                      		.byte	51
 17605 0004 34                      		.byte	52
 17606 0005 35                      		.byte	53
 17607 0006 36                      		.byte	54
 17608 0007 37                      		.byte	55
 17609 0008 38                      		.byte	56
 17610 0009 39                      		.byte	57
 17611 000a 41                      		.byte	0x41
 17612 000b 42                      		.byte	0x42
 17613 000c 43                      		.byte	0x43
 17614 000d 44                      		.byte	0x44
 17615 000e 45                      		.byte	0x45
 17616 000f 46                      		.byte	0x46
 19865                             	.Letext0:
 19866                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 19867                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 19868                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 19869                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 19870                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 19871                             		.file 8 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 19872                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 19873                             		.file 10 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\incl
 19874                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sp_int.h"
 19875                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha256.h"
 19876                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/random.h"
 19877                             		.file 14 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/wolfmath.h"
