   1                             		.file	"signature.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.wc_SignatureDerEncode,"ax",@progbits
   6                             	_wc_SignatureDerEncode:
   7                             	.LFB1:
   8                             		.file 1 "../src/wolfcrypt/src/signature.c"
   1:../src/wolfcrypt/src/signature.c **** /* signature.c
   2:../src/wolfcrypt/src/signature.c ****  *
   3:../src/wolfcrypt/src/signature.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/signature.c ****  *
   5:../src/wolfcrypt/src/signature.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/signature.c ****  *
   7:../src/wolfcrypt/src/signature.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/signature.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/signature.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/signature.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/signature.c ****  *
  12:../src/wolfcrypt/src/signature.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/signature.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/signature.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/signature.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/signature.c ****  *
  17:../src/wolfcrypt/src/signature.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/signature.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/signature.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/signature.c ****  */
  21:../src/wolfcrypt/src/signature.c **** 
  22:../src/wolfcrypt/src/signature.c **** 
  23:../src/wolfcrypt/src/signature.c **** #ifdef HAVE_CONFIG_H
  24:../src/wolfcrypt/src/signature.c ****     #include <config.h>
  25:../src/wolfcrypt/src/signature.c **** #endif
  26:../src/wolfcrypt/src/signature.c **** 
  27:../src/wolfcrypt/src/signature.c **** #include <wolfssl/wolfcrypt/settings.h>
  28:../src/wolfcrypt/src/signature.c **** #include <wolfssl/wolfcrypt/signature.h>
  29:../src/wolfcrypt/src/signature.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  30:../src/wolfcrypt/src/signature.c **** #include <wolfssl/wolfcrypt/logging.h>
  31:../src/wolfcrypt/src/signature.c **** #ifndef NO_ASN
  32:../src/wolfcrypt/src/signature.c **** #include <wolfssl/wolfcrypt/asn.h>
  33:../src/wolfcrypt/src/signature.c **** #endif
  34:../src/wolfcrypt/src/signature.c **** #ifdef HAVE_ECC
  35:../src/wolfcrypt/src/signature.c **** #include <wolfssl/wolfcrypt/ecc.h>
  36:../src/wolfcrypt/src/signature.c **** #endif
  37:../src/wolfcrypt/src/signature.c **** #ifndef NO_RSA
  38:../src/wolfcrypt/src/signature.c **** #include <wolfssl/wolfcrypt/rsa.h>
  39:../src/wolfcrypt/src/signature.c **** #endif
  40:../src/wolfcrypt/src/signature.c **** 
  41:../src/wolfcrypt/src/signature.c **** /* If ECC and RSA are disabled then disable signature wrapper */
  42:../src/wolfcrypt/src/signature.c **** #if (!defined(HAVE_ECC) || (defined(HAVE_ECC) && !defined(HAVE_ECC_SIGN) \
  43:../src/wolfcrypt/src/signature.c ****     && !defined(HAVE_ECC_VERIFY))) && defined(NO_RSA)
  44:../src/wolfcrypt/src/signature.c ****     #undef NO_SIG_WRAPPER
  45:../src/wolfcrypt/src/signature.c ****     #define NO_SIG_WRAPPER
  46:../src/wolfcrypt/src/signature.c **** #endif
  47:../src/wolfcrypt/src/signature.c **** 
  48:../src/wolfcrypt/src/signature.c **** /* Signature wrapper disabled check */
  49:../src/wolfcrypt/src/signature.c **** #ifndef NO_SIG_WRAPPER
  50:../src/wolfcrypt/src/signature.c **** 
  51:../src/wolfcrypt/src/signature.c **** #if !defined(NO_RSA) && defined(WOLFSSL_CRYPTOCELL)
  52:../src/wolfcrypt/src/signature.c ****     extern int cc310_RsaSSL_Verify(const byte* in, word32 inLen, byte* sig,
  53:../src/wolfcrypt/src/signature.c ****                                 RsaKey* key, CRYS_RSA_HASH_OpMode_t mode);
  54:../src/wolfcrypt/src/signature.c ****     extern int cc310_RsaSSL_Sign(const byte* in, word32 inLen, byte* out,
  55:../src/wolfcrypt/src/signature.c ****                     word32 outLen, RsaKey* key, CRYS_RSA_HASH_OpMode_t mode);
  56:../src/wolfcrypt/src/signature.c **** #endif
  57:../src/wolfcrypt/src/signature.c **** 
  58:../src/wolfcrypt/src/signature.c **** #if !defined(NO_RSA) && !defined(NO_ASN)
  59:../src/wolfcrypt/src/signature.c **** static int wc_SignatureDerEncode(enum wc_HashType hash_type, byte* hash_data,
  60:../src/wolfcrypt/src/signature.c ****     word32 hash_len, word32* hash_enc_len)
  61:../src/wolfcrypt/src/signature.c **** {
   9                             		.loc 1 61 1
  10 0000 7E AA                   		push.l	r10
  11                             	.LCFI0:
  12 0002 71 0A E8                		add	#-24, r0, r10
  13                             	.LCFI1:
  14 0005 EF A0                   		mov.L	r10, r0
  15 0007 E7 A1 02                		mov.L	r1, 8[r10]
  16 000a E7 A2 03                		mov.L	r2, 12[r10]
  17 000d E7 A3 04                		mov.L	r3, 16[r10]
  18 0010 E7 A4 05                		mov.L	r4, 20[r10]
  62:../src/wolfcrypt/src/signature.c ****     int ret, oid;
  63:../src/wolfcrypt/src/signature.c **** 
  64:../src/wolfcrypt/src/signature.c ****     ret = wc_HashGetOID(hash_type);
  19                             		.loc 1 64 11
  20 0013 ED A1 02                		mov.L	8[r10], r1
  21 0016 05 00 00 00             		bsr	_wc_HashGetOID
  22 001a E3 A1                   		mov.L	r1, [r10]
  65:../src/wolfcrypt/src/signature.c ****     if (ret < 0) {
  23                             		.loc 1 65 8
  24 001c EC A5                   		mov.L	[r10], r5
  25 001e 61 05                   		cmp	#0, r5
  26 0020 28 06                   		bge	.L2
  66:../src/wolfcrypt/src/signature.c ****         return ret;
  27                             		.loc 1 66 16
  28 0022 EC A5                   		mov.L	[r10], r5
  29 0024 2E 2D                   		bra	.L3
  30                             	.L2:
  67:../src/wolfcrypt/src/signature.c ****     }
  68:../src/wolfcrypt/src/signature.c ****     oid = ret;
  31                             		.loc 1 68 9
  32 0026 EC A5                   		mov.L	[r10], r5
  33 0028 E7 A5 01                		mov.L	r5, 4[r10]
  69:../src/wolfcrypt/src/signature.c **** 
  70:../src/wolfcrypt/src/signature.c ****     ret = wc_EncodeSignature(hash_data, hash_data, hash_len, oid);
  34                             		.loc 1 70 11
  35 002b ED A4 01                		mov.L	4[r10], r4
  36 002e ED A3 04                		mov.L	16[r10], r3
  37 0031 ED A2 03                		mov.L	12[r10], r2
  38 0034 ED A1 03                		mov.L	12[r10], r1
  39 0037 05 00 00 00             		bsr	_wc_EncodeSignature
  40 003b EF 15                   		mov.L	r1, r5
  41                             		.loc 1 70 9
  42 003d E3 A5                   		mov.L	r5, [r10]
  71:../src/wolfcrypt/src/signature.c ****     if (ret > 0) {
  43                             		.loc 1 71 8
  44 003f EC A5                   		mov.L	[r10], r5
  45 0041 61 05                   		cmp	#0, r5
  46 0043 2B 0C                   		ble	.L4
  72:../src/wolfcrypt/src/signature.c ****         *hash_enc_len = ret;
  47                             		.loc 1 72 23
  48 0045 EC A4                   		mov.L	[r10], r4
  49 0047 ED A5 05                		mov.L	20[r10], r5
  50 004a E3 54                   		mov.L	r4, [r5]
  73:../src/wolfcrypt/src/signature.c ****         ret = 0;
  51                             		.loc 1 73 13
  52 004c F8 A6 00                		mov.L	#0, [r10]
  53                             	.L4:
  74:../src/wolfcrypt/src/signature.c ****     }
  75:../src/wolfcrypt/src/signature.c **** 
  76:../src/wolfcrypt/src/signature.c ****     return ret;
  54                             		.loc 1 76 12
  55 004f EC A5                   		mov.L	[r10], r5
  56                             	.L3:
  77:../src/wolfcrypt/src/signature.c **** }
  57                             		.loc 1 77 1
  58 0051 EF 51                   		mov.L	r5, r1
  59 0053 3F AA 07                		rtsd	#28, r10-r10
  60                             	.LFE1:
  62                             		.section C,"a",@progbits
  63                             		.p2align 2
  64                             	.LC0:
  65 0000 77 63 5F 53 69 67 6E 61 		.string	"wc_SignatureGetSize: Invalid ECC key size"
  65      74 75 72 65 47 65 74 53 
  65      69 7A 65 3A 20 49 6E 76 
  65      61 6C 69 64 20 45 43 43 
  65      20 6B 65 79 20 73 69 7A 
  66                             	.LC1:
  67 002a 77 63 5F 53 69 67 6E 61 		.string	"wc_SignatureGetSize: Invalid RsaKey key size"
  67      74 75 72 65 47 65 74 53 
  67      69 7A 65 3A 20 49 6E 76 
  67      61 6C 69 64 20 52 73 61 
  67      4B 65 79 20 6B 65 79 20 
  68                             		.section	.text.wc_SignatureGetSize,"ax",@progbits
  69                             		.global	_wc_SignatureGetSize
  71                             	_wc_SignatureGetSize:
  72                             	.LFB2:
  78:../src/wolfcrypt/src/signature.c **** #endif /* !NO_RSA && !NO_ASN */
  79:../src/wolfcrypt/src/signature.c **** 
  80:../src/wolfcrypt/src/signature.c **** int wc_SignatureGetSize(enum wc_SignatureType sig_type,
  81:../src/wolfcrypt/src/signature.c ****     const void* key, word32 key_len)
  82:../src/wolfcrypt/src/signature.c **** {
  73                             		.loc 1 82 1
  74 0000 7E AA                   		push.l	r10
  75                             	.LCFI2:
  76 0002 71 0A F0                		add	#-16, r0, r10
  77                             	.LCFI3:
  78 0005 EF A0                   		mov.L	r10, r0
  79 0007 E7 A1 01                		mov.L	r1, 4[r10]
  80 000a E7 A2 02                		mov.L	r2, 8[r10]
  81 000d E7 A3 03                		mov.L	r3, 12[r10]
  83:../src/wolfcrypt/src/signature.c ****     int sig_len = BAD_FUNC_ARG;
  82                             		.loc 1 83 9
  83 0010 F8 AA 53 FF             		mov.L	#-173, [r10]
  84:../src/wolfcrypt/src/signature.c **** 
  85:../src/wolfcrypt/src/signature.c ****     /* Suppress possible unused args if all signature types are disabled */
  86:../src/wolfcrypt/src/signature.c ****     (void)key;
  87:../src/wolfcrypt/src/signature.c ****     (void)key_len;
  88:../src/wolfcrypt/src/signature.c **** 
  89:../src/wolfcrypt/src/signature.c ****     switch(sig_type) {
  84                             		.loc 1 89 5
  85 0014 ED A5 01                		mov.L	4[r10], r5
  86 0017 61 15                   		cmp	#1, r5
  87 0019 20 12                   		beq	.L6
  88 001b ED A5 01                		mov.L	4[r10], r5
  89 001e 61 05                   		cmp	#0, r5
  90 0020 20 4A                   		beq	.L7
  91 0022 ED A5 01                		mov.L	4[r10], r5
  92 0025 61 35                   		cmp	#3, r5
  93 0027 24 43                   		bgtu	.L7
  94 0029 2E 22                   		bra	.L15
  95                             	.L6:
  90:../src/wolfcrypt/src/signature.c ****         case WC_SIGNATURE_TYPE_ECC:
  91:../src/wolfcrypt/src/signature.c **** #ifdef HAVE_ECC
  92:../src/wolfcrypt/src/signature.c ****             /* Sanity check that void* key is at least ecc_key in size */
  93:../src/wolfcrypt/src/signature.c ****             if (key_len >= sizeof(ecc_key)) {
  96                             		.loc 1 93 16
  97 002b ED A5 03                		mov.L	12[r10], r5
  98 002e 76 05 5B 0C             		cmp	#0xc5b, r5
  99 0032 25 0D                   		bleu	.L9
  94:../src/wolfcrypt/src/signature.c ****                 sig_len = wc_ecc_sig_size((ecc_key*)key);
 100                             		.loc 1 94 27
 101 0034 ED A1 02                		mov.L	8[r10], r1
 102 0037 05 00 00 00             		bsr	_wc_ecc_sig_size
 103 003b E3 A1                   		mov.L	r1, [r10]
  95:../src/wolfcrypt/src/signature.c ****             }
  96:../src/wolfcrypt/src/signature.c ****             else {
  97:../src/wolfcrypt/src/signature.c ****                 WOLFSSL_MSG("wc_SignatureGetSize: Invalid ECC key size");
  98:../src/wolfcrypt/src/signature.c ****             }
  99:../src/wolfcrypt/src/signature.c **** #else
 100:../src/wolfcrypt/src/signature.c ****             sig_len = SIG_TYPE_E;
 101:../src/wolfcrypt/src/signature.c **** #endif
 102:../src/wolfcrypt/src/signature.c ****             break;
 104                             		.loc 1 102 13
 105 003d 2E 33                   		bra	.L11
 106                             	.L9:
  97:../src/wolfcrypt/src/signature.c ****             }
 107                             		.loc 1 97 17
 108 003f FB 12 00 00 00 00       		mov.L	#.LC0, r1
 109 0045 05 00 00 00             		bsr	_WOLFSSL_MSG
 110                             		.loc 1 102 13
 111 0049 2E 27                   		bra	.L11
 112                             	.L15:
 103:../src/wolfcrypt/src/signature.c **** 
 104:../src/wolfcrypt/src/signature.c ****         case WC_SIGNATURE_TYPE_RSA_W_ENC:
 105:../src/wolfcrypt/src/signature.c ****         case WC_SIGNATURE_TYPE_RSA:
 106:../src/wolfcrypt/src/signature.c **** #ifndef NO_RSA
 107:../src/wolfcrypt/src/signature.c ****             /* Sanity check that void* key is at least RsaKey in size */
 108:../src/wolfcrypt/src/signature.c ****             if (key_len >= sizeof(RsaKey)) {
 113                             		.loc 1 108 16
 114 004b ED A5 03                		mov.L	12[r10], r5
 115 004e 76 05 9B 18             		cmp	#0x189b, r5
 116 0052 25 0D                   		bleu	.L12
 109:../src/wolfcrypt/src/signature.c ****                 sig_len = wc_RsaEncryptSize((RsaKey*)key);
 117                             		.loc 1 109 27
 118 0054 ED A1 02                		mov.L	8[r10], r1
 119 0057 05 00 00 00             		bsr	_wc_RsaEncryptSize
 120 005b E3 A1                   		mov.L	r1, [r10]
 110:../src/wolfcrypt/src/signature.c ****             }
 111:../src/wolfcrypt/src/signature.c ****             else {
 112:../src/wolfcrypt/src/signature.c ****                 WOLFSSL_MSG("wc_SignatureGetSize: Invalid RsaKey key size");
 113:../src/wolfcrypt/src/signature.c ****             }
 114:../src/wolfcrypt/src/signature.c **** #else
 115:../src/wolfcrypt/src/signature.c ****             sig_len = SIG_TYPE_E;
 116:../src/wolfcrypt/src/signature.c **** #endif
 117:../src/wolfcrypt/src/signature.c ****             break;
 121                             		.loc 1 117 13
 122 005d 2E 13                   		bra	.L11
 123                             	.L12:
 112:../src/wolfcrypt/src/signature.c ****             }
 124                             		.loc 1 112 17
 125 005f FB 12 2A 00 00 00       		mov.L	#.LC1, r1
 126 0065 05 00 00 00             		bsr	_WOLFSSL_MSG
 127                             		.loc 1 117 13
 128 0069 0F                      		bra	.L11
 129                             	.L7:
 118:../src/wolfcrypt/src/signature.c **** 
 119:../src/wolfcrypt/src/signature.c ****         case WC_SIGNATURE_TYPE_NONE:
 120:../src/wolfcrypt/src/signature.c ****         default:
 121:../src/wolfcrypt/src/signature.c ****             sig_len = BAD_FUNC_ARG;
 130                             		.loc 1 121 21
 131 006a F8 AA 53 FF             		mov.L	#-173, [r10]
 122:../src/wolfcrypt/src/signature.c ****             break;
 132                             		.loc 1 122 13
 133 006e 03                      		nop
 134 006f 03                      		.balign 8,3,1
 135                             	.L11:
 123:../src/wolfcrypt/src/signature.c ****     }
 124:../src/wolfcrypt/src/signature.c ****     return sig_len;
 136                             		.loc 1 124 12
 137 0070 EC A5                   		mov.L	[r10], r5
 125:../src/wolfcrypt/src/signature.c **** }
 138                             		.loc 1 125 1
 139 0072 EF 51                   		mov.L	r5, r1
 140 0074 3F AA 05                		rtsd	#20, r10-r10
 141                             	.LFE2:
 143 0077 03                      		.section C,"a",@progbits
 144 0057 00                      		.p2align 2
 145                             	.LC2:
 146 0058 77 63 5F 53 69 67 6E 61 		.string	"wc_SignatureVerify: Invalid sig type/len"
 146      74 75 72 65 56 65 72 69 
 146      66 79 3A 20 49 6E 76 61 
 146      6C 69 64 20 73 69 67 20 
 146      74 79 70 65 2F 6C 65 6E 
 147                             	.LC3:
 148 0081 77 63 5F 53 69 67 6E 61 		.string	"wc_SignatureVerify: Invalid hash type/len"
 148      74 75 72 65 56 65 72 69 
 148      66 79 3A 20 49 6E 76 61 
 148      6C 69 64 20 68 61 73 68 
 148      20 74 79 70 65 2F 6C 65 
 149                             	.LC4:
 150 00ab 52 53 41 20 53 69 67 6E 		.string	"RSA Signature Verify difference!"
 150      61 74 75 72 65 20 56 65 
 150      72 69 66 79 20 64 69 66 
 150      66 65 72 65 6E 63 65 21 
 150      00 
 151                             		.section	.text.wc_SignatureVerifyHash,"ax",@progbits
 152                             		.global	_wc_SignatureVerifyHash
 154                             	_wc_SignatureVerifyHash:
 155                             	.LFB3:
 126:../src/wolfcrypt/src/signature.c **** 
 127:../src/wolfcrypt/src/signature.c **** int wc_SignatureVerifyHash(
 128:../src/wolfcrypt/src/signature.c ****     enum wc_HashType hash_type, enum wc_SignatureType sig_type,
 129:../src/wolfcrypt/src/signature.c ****     const byte* hash_data, word32 hash_len,
 130:../src/wolfcrypt/src/signature.c ****     const byte* sig, word32 sig_len,
 131:../src/wolfcrypt/src/signature.c ****     const void* key, word32 key_len)
 132:../src/wolfcrypt/src/signature.c **** {
 156                             		.loc 1 132 1
 157 0000 7E AA                   		push.l	r10
 158                             	.LCFI4:
 159 0002 7E A6                   		push.l	r6
 160                             	.LCFI5:
 161 0004 71 0A C8                		add	#-56, r0, r10
 162                             	.LCFI6:
 163 0007 71 A0 F8                		add	#-8, r10, r0
 164                             	.LCFI7:
 165 000a 75 46 44                		mov.L	#0x44, r6
 166 000d 4B A6                   		add	r10, r6
 167 000f E7 A1 06                		mov.L	r1, 24[r10]
 168 0012 E7 A2 07                		mov.L	r2, 28[r10]
 169 0015 E7 A3 08                		mov.L	r3, 32[r10]
 170 0018 E7 A4 09                		mov.L	r4, 36[r10]
 133:../src/wolfcrypt/src/signature.c ****     int ret;
 134:../src/wolfcrypt/src/signature.c **** 
 135:../src/wolfcrypt/src/signature.c ****     /* Check arguments */
 136:../src/wolfcrypt/src/signature.c ****     if (hash_data == NULL || hash_len == 0 ||
 171                             		.loc 1 136 8
 172 001b ED A5 08                		mov.L	32[r10], r5
 173 001e 61 05                   		cmp	#0, r5
 174 0020 20 20                   		beq	.L17
 175                             		.loc 1 136 27 discriminator 1
 176 0022 ED A5 09                		mov.L	36[r10], r5
 177 0025 61 05                   		cmp	#0, r5
 178 0027 20 19                   		beq	.L17
 179                             		.loc 1 136 44 discriminator 2
 180 0029 EC 65                   		mov.L	[r6], r5
 181 002b 61 05                   		cmp	#0, r5
 182 002d 20 13                   		beq	.L17
 137:../src/wolfcrypt/src/signature.c ****         sig == NULL || sig_len == 0 ||
 183                             		.loc 1 137 21
 184 002f A8 6D                   		mov.L	4[r6], r5
 185 0031 61 05                   		cmp	#0, r5
 186 0033 20 0D                   		beq	.L17
 187                             		.loc 1 137 37 discriminator 1
 188 0035 A8 E5                   		mov.L	8[r6], r5
 189 0037 61 05                   		cmp	#0, r5
 190 0039 17                      		beq	.L17
 138:../src/wolfcrypt/src/signature.c ****         key == NULL || key_len == 0) {
 191                             		.loc 1 138 21
 192 003a A8 ED                   		mov.L	12[r6], r5
 193 003c 61 05                   		cmp	#0, r5
 194 003e 19                      		bne	.L18
 195 003f 03                      		.balign 8,3,2
 196                             	.L17:
 139:../src/wolfcrypt/src/signature.c ****         return BAD_FUNC_ARG;
 197                             		.loc 1 139 16
 198 0040 FB 5A 53 FF             		mov.L	#-173, r5
 199 0044 38 6C 01                		bra	.L19
 200                             	.L18:
 140:../src/wolfcrypt/src/signature.c ****     }
 141:../src/wolfcrypt/src/signature.c **** 
 142:../src/wolfcrypt/src/signature.c ****     /* Validate signature len (1 to max is okay) */
 143:../src/wolfcrypt/src/signature.c ****     if ((int)sig_len > wc_SignatureGetSize(sig_type, key, key_len)) {
 201                             		.loc 1 143 24
 202 0047 A8 EB                   		mov.L	12[r6], r3
 203 0049 A8 E2                   		mov.L	8[r6], r2
 204 004b ED A1 07                		mov.L	28[r10], r1
 205 004e 05 00 00 00             		bsr	_wc_SignatureGetSize
 206 0052 EF 14                   		mov.L	r1, r4
 207                             		.loc 1 143 9
 208 0054 A8 6D                   		mov.L	4[r6], r5
 209                             		.loc 1 143 8
 210 0056 47 54                   		cmp	r5, r4
 211 0058 28 13                   		bge	.L20
 144:../src/wolfcrypt/src/signature.c ****         WOLFSSL_MSG("wc_SignatureVerify: Invalid sig type/len");
 212                             		.loc 1 144 9
 213 005a FB 12 58 00 00 00       		mov.L	#.LC2, r1
 214 0060 05 00 00 00             		bsr	_WOLFSSL_MSG
 145:../src/wolfcrypt/src/signature.c ****         return BAD_FUNC_ARG;
 215                             		.loc 1 145 16
 216 0064 FB 5A 53 FF             		mov.L	#-173, r5
 217 0068 38 48 01                		bra	.L19
 218                             	.L20:
 146:../src/wolfcrypt/src/signature.c ****     }
 147:../src/wolfcrypt/src/signature.c **** 
 148:../src/wolfcrypt/src/signature.c ****     /* Validate hash size */
 149:../src/wolfcrypt/src/signature.c ****     ret = wc_HashGetDigestSize(hash_type);
 219                             		.loc 1 149 11
 220 006b ED A1 06                		mov.L	24[r10], r1
 221 006e 05 00 00 00             		bsr	_wc_HashGetDigestSize
 222 0072 E3 A1                   		mov.L	r1, [r10]
 150:../src/wolfcrypt/src/signature.c ****     if (ret < 0) {
 223                             		.loc 1 150 8
 224 0074 EC A5                   		mov.L	[r10], r5
 225 0076 61 05                   		cmp	#0, r5
 226 0078 28 11                   		bge	.L21
 151:../src/wolfcrypt/src/signature.c ****         WOLFSSL_MSG("wc_SignatureVerify: Invalid hash type/len");
 227                             		.loc 1 151 9
 228 007a FB 12 81 00 00 00       		mov.L	#.LC3, r1
 229 0080 05 00 00 00             		bsr	_WOLFSSL_MSG
 152:../src/wolfcrypt/src/signature.c ****         return ret;
 230                             		.loc 1 152 16
 231 0084 EC A5                   		mov.L	[r10], r5
 232 0086 38 2A 01                		bra	.L19
 233                             	.L21:
 153:../src/wolfcrypt/src/signature.c ****     }
 154:../src/wolfcrypt/src/signature.c ****     ret = 0;
 234                             		.loc 1 154 9
 235 0089 F8 A6 00                		mov.L	#0, [r10]
 155:../src/wolfcrypt/src/signature.c **** 
 156:../src/wolfcrypt/src/signature.c ****     /* Verify signature using hash */
 157:../src/wolfcrypt/src/signature.c ****     switch (sig_type) {
 236                             		.loc 1 157 5
 237 008c ED A5 07                		mov.L	28[r10], r5
 238 008f 61 15                   		cmp	#1, r5
 239 0091 20 16                   		beq	.L22
 240 0093 ED A5 07                		mov.L	28[r10], r5
 241 0096 61 05                   		cmp	#0, r5
 242 0098 3A 0D 01                		beq	.L23
 243 009b ED A5 07                		mov.L	28[r10], r5
 244 009e 61 35                   		cmp	#3, r5
 245 00a0 25 05 38 03 01          		bgtu	.L23
 246 00a5 2E 41                   		bra	.L39
 247                             	.L22:
 248                             	.LBB2:
 158:../src/wolfcrypt/src/signature.c ****         case WC_SIGNATURE_TYPE_ECC:
 159:../src/wolfcrypt/src/signature.c ****         {
 160:../src/wolfcrypt/src/signature.c **** #if defined(HAVE_ECC) && defined(HAVE_ECC_VERIFY)
 161:../src/wolfcrypt/src/signature.c ****             int is_valid_sig = 0;
 249                             		.loc 1 161 17
 250 00a7 F9 A6 04 00             		mov.L	#0, 16[r10]
 251                             	.L26:
 162:../src/wolfcrypt/src/signature.c **** 
 163:../src/wolfcrypt/src/signature.c ****             /* Perform verification of signature using provided ECC key */
 164:../src/wolfcrypt/src/signature.c ****             do {
 165:../src/wolfcrypt/src/signature.c ****             #ifdef WOLFSSL_ASYNC_CRYPT
 166:../src/wolfcrypt/src/signature.c ****                 ret = wc_AsyncWait(ret, &((ecc_key*)key)->asyncDev,
 167:../src/wolfcrypt/src/signature.c ****                     WC_ASYNC_FLAG_CALL_AGAIN);
 168:../src/wolfcrypt/src/signature.c ****             #endif
 169:../src/wolfcrypt/src/signature.c ****             if (ret >= 0)
 252                             		.loc 1 169 16
 253 00ab EC A5                   		mov.L	[r10], r5
 254 00ad 61 05                   		cmp	#0, r5
 255 00af 29 1B                   		blt	.L25
 170:../src/wolfcrypt/src/signature.c ****                 ret = wc_ecc_verify_hash(sig, sig_len, hash_data, hash_len,
 256                             		.loc 1 170 23
 257 00b1 A8 E5                   		mov.L	8[r6], r5
 258 00b3 A0 0D                   		mov.L	r5, 4[r0]
 259 00b5 71 A5 10                		add	#16, r10, r5
 260 00b8 E3 05                   		mov.L	r5, [r0]
 261 00ba ED A4 09                		mov.L	36[r10], r4
 262 00bd ED A3 08                		mov.L	32[r10], r3
 263 00c0 A8 6A                   		mov.L	4[r6], r2
 264 00c2 EC 61                   		mov.L	[r6], r1
 265 00c4 05 00 00 00             		bsr	_wc_ecc_verify_hash
 266 00c8 E3 A1                   		mov.L	r1, [r10]
 267                             	.L25:
 171:../src/wolfcrypt/src/signature.c ****                     &is_valid_sig, (ecc_key*)key);
 172:../src/wolfcrypt/src/signature.c ****             } while (ret == WC_PENDING_E);
 268                             		.loc 1 172 13
 269 00ca EC A5                   		mov.L	[r10], r5
 270 00cc 75 05 94                		cmp	#-108, r5
 271 00cf 20 DC                   		beq	.L26
 173:../src/wolfcrypt/src/signature.c ****             if (ret != 0 || is_valid_sig != 1) {
 272                             		.loc 1 173 16
 273 00d1 EC A5                   		mov.L	[r10], r5
 274 00d3 61 05                   		cmp	#0, r5
 275 00d5 19                      		bne	.L27
 276                             		.loc 1 173 42 discriminator 1
 277 00d6 ED A5 04                		mov.L	16[r10], r5
 278                             		.loc 1 173 26 discriminator 1
 279 00d9 61 15                   		cmp	#1, r5
 280 00db 3A CF 00                		beq	.L40
 281                             	.L27:
 174:../src/wolfcrypt/src/signature.c ****                 ret = SIG_VERIFY_E;
 282                             		.loc 1 174 21
 283 00de F8 AA 1B FF             		mov.L	#-229, [r10]
 175:../src/wolfcrypt/src/signature.c ****             }
 176:../src/wolfcrypt/src/signature.c **** #else
 177:../src/wolfcrypt/src/signature.c ****             ret = SIG_TYPE_E;
 178:../src/wolfcrypt/src/signature.c **** #endif
 179:../src/wolfcrypt/src/signature.c ****             break;
 284                             		.loc 1 179 13
 285 00e2 03                      		nop
 286 00e3 38 C7 00                		bra	.L40
 287                             	.L39:
 288                             	.LBE2:
 289                             	.LBB3:
 180:../src/wolfcrypt/src/signature.c ****         }
 181:../src/wolfcrypt/src/signature.c **** 
 182:../src/wolfcrypt/src/signature.c ****         case WC_SIGNATURE_TYPE_RSA_W_ENC:
 183:../src/wolfcrypt/src/signature.c ****         case WC_SIGNATURE_TYPE_RSA:
 184:../src/wolfcrypt/src/signature.c ****         {
 185:../src/wolfcrypt/src/signature.c **** #ifndef NO_RSA
 186:../src/wolfcrypt/src/signature.c ****     #ifdef WOLFSSL_CRYPTOCELL
 187:../src/wolfcrypt/src/signature.c ****         if (sig_type == WC_SIGNATURE_TYPE_RSA_W_ENC) {
 188:../src/wolfcrypt/src/signature.c ****             ret = cc310_RsaSSL_Verify(hash_data, hash_len, (byte*)sig,
 189:../src/wolfcrypt/src/signature.c ****                 (RsaKey*)key, cc310_hashModeRSA(hash_type, 0));
 190:../src/wolfcrypt/src/signature.c ****         }
 191:../src/wolfcrypt/src/signature.c ****         else {
 192:../src/wolfcrypt/src/signature.c ****             ret = cc310_RsaSSL_Verify(hash_data, hash_len, (byte*)sig,
 193:../src/wolfcrypt/src/signature.c ****                 (RsaKey*)key, cc310_hashModeRSA(hash_type, 1));
 194:../src/wolfcrypt/src/signature.c ****         }
 195:../src/wolfcrypt/src/signature.c ****     #else
 196:../src/wolfcrypt/src/signature.c **** 
 197:../src/wolfcrypt/src/signature.c ****             word32 plain_len = hash_len;
 290                             		.loc 1 197 20
 291 00e6 ED A5 09                		mov.L	36[r10], r5
 292 00e9 E7 A5 01                		mov.L	r5, 4[r10]
 198:../src/wolfcrypt/src/signature.c ****         #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
 199:../src/wolfcrypt/src/signature.c ****             byte *plain_data;
 200:../src/wolfcrypt/src/signature.c ****         #else
 201:../src/wolfcrypt/src/signature.c ****             byte  plain_data[MAX_ENCODED_SIG_SZ];
 202:../src/wolfcrypt/src/signature.c ****         #endif
 203:../src/wolfcrypt/src/signature.c **** 
 204:../src/wolfcrypt/src/signature.c ****             /* Make sure the plain text output is at least key size */
 205:../src/wolfcrypt/src/signature.c ****             if (plain_len < sig_len) {
 293                             		.loc 1 205 16
 294 00ec ED A4 01                		mov.L	4[r10], r4
 295 00ef A8 6D                   		mov.L	4[r6], r5
 296 00f1 47 54                   		cmp	r5, r4
 297 00f3 22 07                   		bgeu	.L30
 206:../src/wolfcrypt/src/signature.c ****                 plain_len = sig_len;
 298                             		.loc 1 206 27
 299 00f5 A8 6D                   		mov.L	4[r6], r5
 300 00f7 E7 A5 01                		mov.L	r5, 4[r10]
 301                             	.L30:
 207:../src/wolfcrypt/src/signature.c ****             }
 208:../src/wolfcrypt/src/signature.c ****         #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
 209:../src/wolfcrypt/src/signature.c ****             plain_data = (byte*)XMALLOC(plain_len, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 302                             		.loc 1 209 33
 303 00fa ED A1 01                		mov.L	4[r10], r1
 304 00fd 05 00 00 00             		bsr	_wolfSSL_Malloc
 305 0101 E7 A1 02                		mov.L	r1, 8[r10]
 210:../src/wolfcrypt/src/signature.c ****             if (plain_data)
 306                             		.loc 1 210 16
 307 0104 ED A5 02                		mov.L	8[r10], r5
 308 0107 61 05                   		cmp	#0, r5
 309 0109 3A 84 00                		beq	.L31
 310                             	.LBB4:
 211:../src/wolfcrypt/src/signature.c ****         #else
 212:../src/wolfcrypt/src/signature.c ****             if (plain_len <= sizeof(plain_data))
 213:../src/wolfcrypt/src/signature.c ****         #endif
 214:../src/wolfcrypt/src/signature.c ****             {
 215:../src/wolfcrypt/src/signature.c ****                 byte* plain_ptr = NULL;
 311                             		.loc 1 215 23
 312 010c F9 A6 05 00             		mov.L	#0, 20[r10]
 216:../src/wolfcrypt/src/signature.c ****                 XMEMSET(plain_data, 0, plain_len);
 313                             		.loc 1 216 17
 314 0110 ED A3 01                		mov.L	4[r10], r3
 315 0113 66 02                   		mov.L	#0, r2
 316 0115 ED A1 02                		mov.L	8[r10], r1
 317 0118 05 00 00 00             		bsr	_memset
 217:../src/wolfcrypt/src/signature.c ****                 XMEMCPY(plain_data, sig, sig_len);
 318                             		.loc 1 217 17
 319 011c A8 6B                   		mov.L	4[r6], r3
 320 011e EC 62                   		mov.L	[r6], r2
 321 0120 ED A1 02                		mov.L	8[r10], r1
 322 0123 05 00 00 00             		bsr	_memcpy
 323                             	.L33:
 218:../src/wolfcrypt/src/signature.c ****                 /* Perform verification of signature using provided RSA key */
 219:../src/wolfcrypt/src/signature.c ****                 do {
 220:../src/wolfcrypt/src/signature.c ****                 #ifdef WOLFSSL_ASYNC_CRYPT
 221:../src/wolfcrypt/src/signature.c ****                     ret = wc_AsyncWait(ret, &((RsaKey*)key)->asyncDev,
 222:../src/wolfcrypt/src/signature.c ****                         WC_ASYNC_FLAG_CALL_AGAIN);
 223:../src/wolfcrypt/src/signature.c ****                 #endif
 224:../src/wolfcrypt/src/signature.c ****                 if (ret >= 0)
 324                             		.loc 1 224 20
 325 0127 EC A5                   		mov.L	[r10], r5
 326 0129 61 05                   		cmp	#0, r5
 327 012b 29 14                   		blt	.L32
 225:../src/wolfcrypt/src/signature.c ****                         ret = wc_RsaSSL_VerifyInline(plain_data, sig_len, &plain_ptr, (RsaKey*)key)
 328                             		.loc 1 225 31
 329 012d 71 A5 14                		add	#20, r10, r5
 330 0130 A8 E4                   		mov.L	8[r6], r4
 331 0132 EF 53                   		mov.L	r5, r3
 332 0134 A8 6A                   		mov.L	4[r6], r2
 333 0136 ED A1 02                		mov.L	8[r10], r1
 334 0139 05 00 00 00             		bsr	_wc_RsaSSL_VerifyInline
 335 013d E3 A1                   		mov.L	r1, [r10]
 336                             	.L32:
 226:../src/wolfcrypt/src/signature.c ****                 } while (ret == WC_PENDING_E);
 337                             		.loc 1 226 17
 338 013f EC A5                   		mov.L	[r10], r5
 339 0141 75 05 94                		cmp	#-108, r5
 340 0144 20 E3                   		beq	.L33
 227:../src/wolfcrypt/src/signature.c ****                 if (ret >= 0 && plain_ptr) {
 341                             		.loc 1 227 20
 342 0146 EC A5                   		mov.L	[r10], r5
 343 0148 61 05                   		cmp	#0, r5
 344 014a 29 2E                   		blt	.L34
 345                             		.loc 1 227 30 discriminator 1
 346 014c ED A5 05                		mov.L	20[r10], r5
 347 014f 61 05                   		cmp	#0, r5
 348 0151 20 27                   		beq	.L34
 228:../src/wolfcrypt/src/signature.c ****                     if ((word32)ret == hash_len &&
 349                             		.loc 1 228 37
 350 0153 ED A5 09                		mov.L	36[r10], r5
 351                             		.loc 1 228 24
 352 0156 EC A4                   		mov.L	[r10], r4
 353 0158 47 54                   		cmp	r5, r4
 354 015a 21 1A                   		bne	.L35
 229:../src/wolfcrypt/src/signature.c ****                             XMEMCMP(plain_ptr, hash_data, hash_len) == 0) {
 355                             		.loc 1 229 29 discriminator 1
 356 015c ED A5 05                		mov.L	20[r10], r5
 357 015f ED A3 09                		mov.L	36[r10], r3
 358 0162 ED A2 08                		mov.L	32[r10], r2
 359 0165 EF 51                   		mov.L	r5, r1
 360 0167 05 00 00 00             		bsr	_memcmp
 361 016b EF 15                   		mov.L	r1, r5
 228:../src/wolfcrypt/src/signature.c ****                     if ((word32)ret == hash_len &&
 362                             		.loc 1 228 49 discriminator 1
 363 016d 61 05                   		cmp	#0, r5
 364 016f 1D                      		bne	.L35
 230:../src/wolfcrypt/src/signature.c ****                         ret = 0; /* Success */
 365                             		.loc 1 230 29
 366 0170 F8 A6 00                		mov.L	#0, [r10]
 367 0173 0D                      		bra	.L34
 368                             	.L35:
 231:../src/wolfcrypt/src/signature.c ****                     }
 232:../src/wolfcrypt/src/signature.c ****                     else {
 233:../src/wolfcrypt/src/signature.c ****                         ret = SIG_VERIFY_E;
 369                             		.loc 1 233 29
 370 0174 F8 AA 1B FF             		mov.L	#-229, [r10]
 371                             		.balign 8,3,1
 372                             	.L34:
 373                             	.LBB5:
 234:../src/wolfcrypt/src/signature.c ****                     }
 235:../src/wolfcrypt/src/signature.c ****                 }
 236:../src/wolfcrypt/src/signature.c ****             #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_NO_MALLOC)
 237:../src/wolfcrypt/src/signature.c ****                 XFREE(plain_data, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 374                             		.loc 1 237 17
 375 0178 ED A5 02                		mov.L	8[r10], r5
 376 017b E7 A5 03                		mov.L	r5, 12[r10]
 377 017e ED A5 03                		mov.L	12[r10], r5
 378 0181 61 05                   		cmp	#0, r5
 379 0183 20 0D                   		beq	.L37
 380                             		.loc 1 237 17 is_stmt 0 discriminator 1
 381 0185 ED A1 03                		mov.L	12[r10], r1
 382 0188 05 00 00 00             		bsr	_wolfSSL_Free
 383 018c 0C                      		bra	.L37
 384                             	.L31:
 385                             	.LBE5:
 386                             	.LBE4:
 238:../src/wolfcrypt/src/signature.c ****             #endif
 239:../src/wolfcrypt/src/signature.c ****             }
 240:../src/wolfcrypt/src/signature.c ****             else {
 241:../src/wolfcrypt/src/signature.c ****                 ret = MEMORY_E;
 387                             		.loc 1 241 21 is_stmt 1
 388 018d F8 A6 83                		mov.L	#-125, [r10]
 389                             	.L37:
 242:../src/wolfcrypt/src/signature.c ****             }
 243:../src/wolfcrypt/src/signature.c ****     #endif /* WOLFSSL_CRYPTOCELL */
 244:../src/wolfcrypt/src/signature.c ****             if (ret != 0) {
 390                             		.loc 1 244 16
 391 0190 EC A5                   		mov.L	[r10], r5
 392 0192 61 05                   		cmp	#0, r5
 393 0194 20 19                   		beq	.L41
 245:../src/wolfcrypt/src/signature.c ****                 WOLFSSL_MSG("RSA Signature Verify difference!");
 394                             		.loc 1 245 17
 395 0196 FB 12 AB 00 00 00       		mov.L	#.LC4, r1
 396 019c 05 00 00 00             		bsr	_WOLFSSL_MSG
 246:../src/wolfcrypt/src/signature.c ****                 ret = SIG_VERIFY_E;
 397                             		.loc 1 246 21
 398 01a0 F8 AA 1B FF             		mov.L	#-229, [r10]
 247:../src/wolfcrypt/src/signature.c ****             }
 248:../src/wolfcrypt/src/signature.c **** #else
 249:../src/wolfcrypt/src/signature.c ****             ret = SIG_TYPE_E;
 250:../src/wolfcrypt/src/signature.c **** #endif
 251:../src/wolfcrypt/src/signature.c ****             break;
 399                             		.loc 1 251 13
 400 01a4 09                      		bra	.L41
 401                             	.L23:
 402                             	.LBE3:
 252:../src/wolfcrypt/src/signature.c ****         }
 253:../src/wolfcrypt/src/signature.c **** 
 254:../src/wolfcrypt/src/signature.c ****         case WC_SIGNATURE_TYPE_NONE:
 255:../src/wolfcrypt/src/signature.c ****         default:
 256:../src/wolfcrypt/src/signature.c ****             ret = BAD_FUNC_ARG;
 403                             		.loc 1 256 17
 404 01a5 F8 AA 53 FF             		mov.L	#-173, [r10]
 257:../src/wolfcrypt/src/signature.c ****             break;
 405                             		.loc 1 257 13
 406 01a9 0D                      		bra	.L29
 407                             	.L40:
 408                             	.LBB6:
 179:../src/wolfcrypt/src/signature.c ****         }
 409                             		.loc 1 179 13
 410 01aa 03                      		nop
 411 01ab 2E 03                   		bra	.L29
 412                             	.L41:
 413                             	.LBE6:
 414                             	.LBB7:
 251:../src/wolfcrypt/src/signature.c ****         }
 415                             		.loc 1 251 13
 416 01ad 03                      		nop
 417                             	.L29:
 418                             	.LBE7:
 258:../src/wolfcrypt/src/signature.c ****     }
 259:../src/wolfcrypt/src/signature.c **** 
 260:../src/wolfcrypt/src/signature.c ****     return ret;
 419                             		.loc 1 260 12
 420 01ae EC A5                   		mov.L	[r10], r5
 421                             		.balign 8,3,1
 422                             	.L19:
 261:../src/wolfcrypt/src/signature.c **** }
 423                             		.loc 1 261 1
 424 01b0 EF 51                   		mov.L	r5, r1
 425 01b2 71 00 40                		add	#0x40, r0
 426 01b5 7E B6                   		pop	r6
 427 01b7 7E BA                   		pop	r10
 428 01b9 02                      		rts
 429                             	.LFE3:
 431 01ba 74 10 01 00 00 00       		.section	.text.wc_SignatureVerify,"ax",@progbits
 432                             		.global	_wc_SignatureVerify
 434                             	_wc_SignatureVerify:
 435                             	.LFB4:
 262:../src/wolfcrypt/src/signature.c **** 
 263:../src/wolfcrypt/src/signature.c **** int wc_SignatureVerify(
 264:../src/wolfcrypt/src/signature.c ****     enum wc_HashType hash_type, enum wc_SignatureType sig_type,
 265:../src/wolfcrypt/src/signature.c ****     const byte* data, word32 data_len,
 266:../src/wolfcrypt/src/signature.c ****     const byte* sig, word32 sig_len,
 267:../src/wolfcrypt/src/signature.c ****     const void* key, word32 key_len)
 268:../src/wolfcrypt/src/signature.c **** {
 436                             		.loc 1 268 1
 437 0000 7E AA                   		push.l	r10
 438                             	.LCFI8:
 439 0002 7E A6                   		push.l	r6
 440                             	.LCFI9:
 441 0004 71 0A CC                		add	#-52, r0, r10
 442                             	.LCFI10:
 443 0007 71 A0 F0                		add	#-16, r10, r0
 444                             	.LCFI11:
 445 000a 75 46 40                		mov.L	#0x40, r6
 446 000d 4B A6                   		add	r10, r6
 447 000f E7 A1 05                		mov.L	r1, 20[r10]
 448 0012 E7 A2 06                		mov.L	r2, 24[r10]
 449 0015 E7 A3 07                		mov.L	r3, 28[r10]
 450 0018 E7 A4 08                		mov.L	r4, 32[r10]
 269:../src/wolfcrypt/src/signature.c ****     int ret;
 270:../src/wolfcrypt/src/signature.c ****     word32 hash_len, hash_enc_len;
 271:../src/wolfcrypt/src/signature.c **** #if defined(WOLFSSL_SMALL_STACK) || defined(NO_ASN)
 272:../src/wolfcrypt/src/signature.c ****     byte *hash_data;
 273:../src/wolfcrypt/src/signature.c **** #else
 274:../src/wolfcrypt/src/signature.c ****     byte hash_data[MAX_DER_DIGEST_SZ];
 275:../src/wolfcrypt/src/signature.c **** #endif
 276:../src/wolfcrypt/src/signature.c **** 
 277:../src/wolfcrypt/src/signature.c ****     /* Check arguments */
 278:../src/wolfcrypt/src/signature.c ****     if (data == NULL || data_len == 0 ||
 451                             		.loc 1 278 8
 452 001b ED A5 07                		mov.L	28[r10], r5
 453 001e 61 05                   		cmp	#0, r5
 454 0020 20 20                   		beq	.L43
 455                             		.loc 1 278 22 discriminator 1
 456 0022 ED A5 08                		mov.L	32[r10], r5
 457 0025 61 05                   		cmp	#0, r5
 458 0027 20 19                   		beq	.L43
 459                             		.loc 1 278 39 discriminator 2
 460 0029 EC 65                   		mov.L	[r6], r5
 461 002b 61 05                   		cmp	#0, r5
 462 002d 20 13                   		beq	.L43
 279:../src/wolfcrypt/src/signature.c ****         sig == NULL || sig_len == 0 ||
 463                             		.loc 1 279 21
 464 002f A8 6D                   		mov.L	4[r6], r5
 465 0031 61 05                   		cmp	#0, r5
 466 0033 20 0D                   		beq	.L43
 467                             		.loc 1 279 37 discriminator 1
 468 0035 A8 E5                   		mov.L	8[r6], r5
 469 0037 61 05                   		cmp	#0, r5
 470 0039 17                      		beq	.L43
 280:../src/wolfcrypt/src/signature.c ****         key == NULL || key_len == 0) {
 471                             		.loc 1 280 21
 472 003a A8 ED                   		mov.L	12[r6], r5
 473 003c 61 05                   		cmp	#0, r5
 474 003e 19                      		bne	.L44
 475 003f 03                      		.balign 8,3,2
 476                             	.L43:
 281:../src/wolfcrypt/src/signature.c ****         return BAD_FUNC_ARG;
 477                             		.loc 1 281 16
 478 0040 FB 5A 53 FF             		mov.L	#-173, r5
 479 0044 38 ED 00                		bra	.L53
 480                             	.L44:
 282:../src/wolfcrypt/src/signature.c ****     }
 283:../src/wolfcrypt/src/signature.c **** 
 284:../src/wolfcrypt/src/signature.c ****     /* Validate signature len (1 to max is okay) */
 285:../src/wolfcrypt/src/signature.c ****     if ((int)sig_len > wc_SignatureGetSize(sig_type, key, key_len)) {
 481                             		.loc 1 285 24
 482 0047 A8 EB                   		mov.L	12[r6], r3
 483 0049 A8 E2                   		mov.L	8[r6], r2
 484 004b ED A1 06                		mov.L	24[r10], r1
 485 004e 05 00 00 00             		bsr	_wc_SignatureGetSize
 486 0052 EF 14                   		mov.L	r1, r4
 487                             		.loc 1 285 9
 488 0054 A8 6D                   		mov.L	4[r6], r5
 489                             		.loc 1 285 8
 490 0056 47 54                   		cmp	r5, r4
 491 0058 28 13                   		bge	.L46
 286:../src/wolfcrypt/src/signature.c ****         WOLFSSL_MSG("wc_SignatureVerify: Invalid sig type/len");
 492                             		.loc 1 286 9
 493 005a FB 12 58 00 00 00       		mov.L	#.LC2, r1
 494 0060 05 00 00 00             		bsr	_WOLFSSL_MSG
 287:../src/wolfcrypt/src/signature.c ****         return BAD_FUNC_ARG;
 495                             		.loc 1 287 16
 496 0064 FB 5A 53 FF             		mov.L	#-173, r5
 497 0068 38 C9 00                		bra	.L53
 498                             	.L46:
 288:../src/wolfcrypt/src/signature.c ****     }
 289:../src/wolfcrypt/src/signature.c **** 
 290:../src/wolfcrypt/src/signature.c ****     /* Validate hash size */
 291:../src/wolfcrypt/src/signature.c ****     ret = wc_HashGetDigestSize(hash_type);
 499                             		.loc 1 291 11
 500 006b ED A1 05                		mov.L	20[r10], r1
 501 006e 05 00 00 00             		bsr	_wc_HashGetDigestSize
 502 0072 E3 A1                   		mov.L	r1, [r10]
 292:../src/wolfcrypt/src/signature.c ****     if (ret < 0) {
 503                             		.loc 1 292 8
 504 0074 EC A5                   		mov.L	[r10], r5
 505 0076 61 05                   		cmp	#0, r5
 506 0078 28 11                   		bge	.L47
 293:../src/wolfcrypt/src/signature.c ****         WOLFSSL_MSG("wc_SignatureVerify: Invalid hash type/len");
 507                             		.loc 1 293 9
 508 007a FB 12 81 00 00 00       		mov.L	#.LC3, r1
 509 0080 05 00 00 00             		bsr	_WOLFSSL_MSG
 294:../src/wolfcrypt/src/signature.c ****         return ret;
 510                             		.loc 1 294 16
 511 0084 EC A5                   		mov.L	[r10], r5
 512 0086 38 AB 00                		bra	.L53
 513                             	.L47:
 295:../src/wolfcrypt/src/signature.c ****     }
 296:../src/wolfcrypt/src/signature.c ****     hash_enc_len = hash_len = ret;
 514                             		.loc 1 296 29
 515 0089 EC A5                   		mov.L	[r10], r5
 516 008b E7 A5 01                		mov.L	r5, 4[r10]
 517                             		.loc 1 296 18
 518 008e ED A5 01                		mov.L	4[r10], r5
 519 0091 E7 A5 04                		mov.L	r5, 16[r10]
 297:../src/wolfcrypt/src/signature.c **** 
 298:../src/wolfcrypt/src/signature.c **** #ifndef NO_RSA
 299:../src/wolfcrypt/src/signature.c ****     if (sig_type == WC_SIGNATURE_TYPE_RSA_W_ENC) {
 520                             		.loc 1 299 8
 521 0094 ED A5 06                		mov.L	24[r10], r5
 522 0097 61 35                   		cmp	#3, r5
 523 0099 1A                      		bne	.L48
 300:../src/wolfcrypt/src/signature.c ****         /* For RSA with ASN.1 encoding include room */
 301:../src/wolfcrypt/src/signature.c ****         hash_enc_len += MAX_DER_DIGEST_ASN_SZ;
 524                             		.loc 1 301 22
 525 009a ED A5 04                		mov.L	16[r10], r5
 526 009d 71 55 22                		add	#34, r5
 527 00a0 E7 A5 04                		mov.L	r5, 16[r10]
 528                             	.L48:
 302:../src/wolfcrypt/src/signature.c ****     }
 303:../src/wolfcrypt/src/signature.c **** #endif
 304:../src/wolfcrypt/src/signature.c **** 
 305:../src/wolfcrypt/src/signature.c **** #if defined(WOLFSSL_SMALL_STACK) || defined(NO_ASN)
 306:../src/wolfcrypt/src/signature.c ****     /* Allocate temporary buffer for hash data */
 307:../src/wolfcrypt/src/signature.c ****     hash_data = (byte*)XMALLOC(hash_enc_len, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 529                             		.loc 1 307 24
 530 00a3 ED A5 04                		mov.L	16[r10], r5
 531 00a6 EF 51                   		mov.L	r5, r1
 532 00a8 05 00 00 00             		bsr	_wolfSSL_Malloc
 533 00ac E7 A1 02                		mov.L	r1, 8[r10]
 308:../src/wolfcrypt/src/signature.c ****     if (hash_data == NULL) {
 534                             		.loc 1 308 8
 535 00af ED A5 02                		mov.L	8[r10], r5
 536 00b2 61 05                   		cmp	#0, r5
 537 00b4 1E                      		bne	.L49
 309:../src/wolfcrypt/src/signature.c ****         return MEMORY_E;
 538                             		.loc 1 309 16
 539 00b5 FB 56 83                		mov.L	#-125, r5
 540 00b8 2E 79                   		bra	.L53
 541                             	.L49:
 310:../src/wolfcrypt/src/signature.c ****     }
 311:../src/wolfcrypt/src/signature.c **** #endif
 312:../src/wolfcrypt/src/signature.c **** 
 313:../src/wolfcrypt/src/signature.c ****     /* Perform hash of data */
 314:../src/wolfcrypt/src/signature.c ****     ret = wc_Hash(hash_type, data, data_len, hash_data, hash_len);
 542                             		.loc 1 314 11
 543 00ba ED A5 01                		mov.L	4[r10], r5
 544 00bd E3 05                   		mov.L	r5, [r0]
 545 00bf ED A4 02                		mov.L	8[r10], r4
 546 00c2 ED A3 08                		mov.L	32[r10], r3
 547 00c5 ED A2 07                		mov.L	28[r10], r2
 548 00c8 ED A1 05                		mov.L	20[r10], r1
 549 00cb 05 00 00 00             		bsr	_wc_Hash
 550 00cf E3 A1                   		mov.L	r1, [r10]
 315:../src/wolfcrypt/src/signature.c ****     if (ret == 0) {
 551                             		.loc 1 315 8
 552 00d1 EC A5                   		mov.L	[r10], r5
 553 00d3 61 05                   		cmp	#0, r5
 554 00d5 21 47                   		bne	.L50
 316:../src/wolfcrypt/src/signature.c ****         /* Handle RSA with DER encoding */
 317:../src/wolfcrypt/src/signature.c ****         if (sig_type == WC_SIGNATURE_TYPE_RSA_W_ENC) {
 555                             		.loc 1 317 12
 556 00d7 ED A5 06                		mov.L	24[r10], r5
 557 00da 61 35                   		cmp	#3, r5
 558 00dc 21 16                   		bne	.L51
 318:../src/wolfcrypt/src/signature.c ****         #if defined(NO_RSA) || defined(NO_ASN)
 319:../src/wolfcrypt/src/signature.c ****             ret = SIG_TYPE_E;
 320:../src/wolfcrypt/src/signature.c ****         #else
 321:../src/wolfcrypt/src/signature.c ****             ret = wc_SignatureDerEncode(hash_type, hash_data, hash_len,
 559                             		.loc 1 321 19
 560 00de 71 A5 10                		add	#16, r10, r5
 561 00e1 EF 54                   		mov.L	r5, r4
 562 00e3 ED A3 01                		mov.L	4[r10], r3
 563 00e6 ED A2 02                		mov.L	8[r10], r2
 564 00e9 ED A1 05                		mov.L	20[r10], r1
 565 00ec 05 00 00 00             		bsr	_wc_SignatureDerEncode
 566 00f0 E3 A1                   		mov.L	r1, [r10]
 567                             	.L51:
 322:../src/wolfcrypt/src/signature.c ****                 &hash_enc_len);
 323:../src/wolfcrypt/src/signature.c ****         #endif
 324:../src/wolfcrypt/src/signature.c ****         }
 325:../src/wolfcrypt/src/signature.c **** 
 326:../src/wolfcrypt/src/signature.c ****         if (ret == 0) {
 568                             		.loc 1 326 12
 569 00f2 EC A5                   		mov.L	[r10], r5
 570 00f4 61 05                   		cmp	#0, r5
 571 00f6 21 26                   		bne	.L50
 327:../src/wolfcrypt/src/signature.c ****             /* Verify signature using hash */
 328:../src/wolfcrypt/src/signature.c ****             ret = wc_SignatureVerifyHash(hash_type, sig_type,
 572                             		.loc 1 328 19
 573 00f8 ED A5 04                		mov.L	16[r10], r5
 574 00fb A8 EC                   		mov.L	12[r6], r4
 575 00fd A0 8C                   		mov.L	r4, 12[r0]
 576 00ff A8 E4                   		mov.L	8[r6], r4
 577 0101 A0 84                   		mov.L	r4, 8[r0]
 578 0103 A8 6C                   		mov.L	4[r6], r4
 579 0105 A0 0C                   		mov.L	r4, 4[r0]
 580 0107 EC 64                   		mov.L	[r6], r4
 581 0109 E3 04                   		mov.L	r4, [r0]
 582 010b EF 54                   		mov.L	r5, r4
 583 010d ED A3 02                		mov.L	8[r10], r3
 584 0110 ED A2 06                		mov.L	24[r10], r2
 585 0113 ED A1 05                		mov.L	20[r10], r1
 586 0116 05 00 00 00             		bsr	_wc_SignatureVerifyHash
 587 011a E3 A1                   		mov.L	r1, [r10]
 588                             	.L50:
 589                             	.LBB8:
 329:../src/wolfcrypt/src/signature.c ****                 hash_data, hash_enc_len, sig, sig_len, key, key_len);
 330:../src/wolfcrypt/src/signature.c ****         }
 331:../src/wolfcrypt/src/signature.c ****     }
 332:../src/wolfcrypt/src/signature.c **** 
 333:../src/wolfcrypt/src/signature.c **** #if defined(WOLFSSL_SMALL_STACK) || defined(NO_ASN)
 334:../src/wolfcrypt/src/signature.c ****     XFREE(hash_data, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 590                             		.loc 1 334 5
 591 011c ED A5 02                		mov.L	8[r10], r5
 592 011f E7 A5 03                		mov.L	r5, 12[r10]
 593 0122 ED A5 03                		mov.L	12[r10], r5
 594 0125 61 05                   		cmp	#0, r5
 595 0127 10                      		beq	.L52
 596                             		.loc 1 334 5 is_stmt 0 discriminator 1
 597 0128 ED A1 03                		mov.L	12[r10], r1
 598 012b 05 00 00 00             		bsr	_wolfSSL_Free
 599                             	.L52:
 600                             	.LBE8:
 335:../src/wolfcrypt/src/signature.c **** #endif
 336:../src/wolfcrypt/src/signature.c **** 
 337:../src/wolfcrypt/src/signature.c ****     return ret;
 601                             		.loc 1 337 12 is_stmt 1
 602 012f EC A5                   		mov.L	[r10], r5
 603                             		.balign 8,3,1
 604                             	.L53:
 338:../src/wolfcrypt/src/signature.c **** }
 605                             		.loc 1 338 1 discriminator 1
 606 0131 EF 51                   		mov.L	r5, r1
 607 0133 71 00 44                		add	#0x44, r0
 608 0136 7E B6                   		pop	r6
 609 0138 7E BA                   		pop	r10
 610 013a 02                      		rts
 611                             	.LFE4:
 613 013b 77 10 01 00 00          		.section	.text.wc_SignatureGenerateHash,"ax",@progbits
 614                             		.global	_wc_SignatureGenerateHash
 616                             	_wc_SignatureGenerateHash:
 617                             	.LFB5:
 339:../src/wolfcrypt/src/signature.c **** 
 340:../src/wolfcrypt/src/signature.c **** 
 341:../src/wolfcrypt/src/signature.c **** int wc_SignatureGenerateHash(
 342:../src/wolfcrypt/src/signature.c ****     enum wc_HashType hash_type, enum wc_SignatureType sig_type,
 343:../src/wolfcrypt/src/signature.c ****     const byte* hash_data, word32 hash_len,
 344:../src/wolfcrypt/src/signature.c ****     byte* sig, word32 *sig_len,
 345:../src/wolfcrypt/src/signature.c ****     const void* key, word32 key_len, WC_RNG* rng)
 346:../src/wolfcrypt/src/signature.c **** {
 618                             		.loc 1 346 1
 619 0000 7E AA                   		push.l	r10
 620                             	.LCFI12:
 621 0002 71 0A DC                		add	#-36, r0, r10
 622                             	.LCFI13:
 623 0005 71 A0 E8                		add	#-24, r10, r0
 624                             	.LCFI14:
 625 0008 75 45 2C                		mov.L	#44, r5
 626 000b 4B A5                   		add	r10, r5
 627 000d E3 A1                   		mov.L	r1, [r10]
 628 000f E7 A2 01                		mov.L	r2, 4[r10]
 629 0012 E7 A3 02                		mov.L	r3, 8[r10]
 630 0015 E7 A4 03                		mov.L	r4, 12[r10]
 347:../src/wolfcrypt/src/signature.c ****     return wc_SignatureGenerateHash_ex(hash_type, sig_type, hash_data, hash_len,
 631                             		.loc 1 347 12
 632 0018 3E 05 01                		mov.L	#1, 20[r0]
 633 001b A9 54                   		mov.L	16[r5], r4
 634 001d A1 04                   		mov.L	r4, 16[r0]
 635 001f A8 DC                   		mov.L	12[r5], r4
 636 0021 A0 8C                   		mov.L	r4, 12[r0]
 637 0023 A8 D4                   		mov.L	8[r5], r4
 638 0025 A0 84                   		mov.L	r4, 8[r0]
 639 0027 A8 5C                   		mov.L	4[r5], r4
 640 0029 A0 0C                   		mov.L	r4, 4[r0]
 641 002b EC 55                   		mov.L	[r5], r5
 642 002d E3 05                   		mov.L	r5, [r0]
 643 002f ED A4 03                		mov.L	12[r10], r4
 644 0032 ED A3 02                		mov.L	8[r10], r3
 645 0035 ED A2 01                		mov.L	4[r10], r2
 646 0038 EC A1                   		mov.L	[r10], r1
 647 003a 05 00 00 00             		bsr	_wc_SignatureGenerateHash_ex
 648 003e EF 15                   		mov.L	r1, r5
 348:../src/wolfcrypt/src/signature.c ****         sig, sig_len, key, key_len, rng, 1);
 349:../src/wolfcrypt/src/signature.c **** }
 649                             		.loc 1 349 1
 650 0040 EF 51                   		mov.L	r5, r1
 651 0042 3F AA 10                		rtsd	#64, r10-r10
 652                             	.LFE5:
 654                             		.section C,"a",@progbits
 655                             		.p2align 2
 656                             	.LC5:
 657 00cc 77 63 5F 53 69 67 6E 61 		.string	"wc_SignatureGenerate: Invalid sig type/len"
 657      74 75 72 65 47 65 6E 65 
 657      72 61 74 65 3A 20 49 6E 
 657      76 61 6C 69 64 20 73 69 
 657      67 20 74 79 70 65 2F 6C 
 658                             	.LC6:
 659 00f7 77 63 5F 53 69 67 6E 61 		.string	"wc_SignatureGenerate: Invalid hash type/len"
 659      74 75 72 65 47 65 6E 65 
 659      72 61 74 65 3A 20 49 6E 
 659      76 61 6C 69 64 20 68 61 
 659      73 68 20 74 79 70 65 2F 
 660 0123 00                      		.section	.text.wc_SignatureGenerateHash_ex,"ax",@progbits
 661                             		.global	_wc_SignatureGenerateHash_ex
 663                             	_wc_SignatureGenerateHash_ex:
 664                             	.LFB6:
 350:../src/wolfcrypt/src/signature.c **** 
 351:../src/wolfcrypt/src/signature.c **** int wc_SignatureGenerateHash_ex(
 352:../src/wolfcrypt/src/signature.c ****     enum wc_HashType hash_type, enum wc_SignatureType sig_type,
 353:../src/wolfcrypt/src/signature.c ****     const byte* hash_data, word32 hash_len,
 354:../src/wolfcrypt/src/signature.c ****     byte* sig, word32 *sig_len,
 355:../src/wolfcrypt/src/signature.c ****     const void* key, word32 key_len, WC_RNG* rng, int verify)
 356:../src/wolfcrypt/src/signature.c **** {
 665                             		.loc 1 356 1
 666 0000 6E 6B                   		pushm	r6-r11
 667                             	.LCFI15:
 668 0002 71 0A D4                		add	#-44, r0, r10
 669                             	.LCFI16:
 670 0005 71 A0 F0                		add	#-16, r10, r0
 671                             	.LCFI17:
 672 0008 75 46 48                		mov.L	#0x48, r6
 673 000b 4B A6                   		add	r10, r6
 674 000d E7 A1 01                		mov.L	r1, 4[r10]
 675 0010 E7 A2 02                		mov.L	r2, 8[r10]
 676 0013 E7 A3 03                		mov.L	r3, 12[r10]
 677 0016 E7 A4 04                		mov.L	r4, 16[r10]
 357:../src/wolfcrypt/src/signature.c ****     int ret;
 358:../src/wolfcrypt/src/signature.c **** 
 359:../src/wolfcrypt/src/signature.c ****     /* Suppress possible unused arg if all signature types are disabled */
 360:../src/wolfcrypt/src/signature.c ****     (void)rng;
 361:../src/wolfcrypt/src/signature.c **** 
 362:../src/wolfcrypt/src/signature.c ****     /* Check arguments */
 363:../src/wolfcrypt/src/signature.c ****     if (hash_data == NULL || hash_len == 0 ||
 678                             		.loc 1 363 8
 679 0019 ED A5 03                		mov.L	12[r10], r5
 680 001c 61 05                   		cmp	#0, r5
 681 001e 20 27                   		beq	.L57
 682                             		.loc 1 363 27 discriminator 1
 683 0020 ED A5 04                		mov.L	16[r10], r5
 684 0023 61 05                   		cmp	#0, r5
 685 0025 20 20                   		beq	.L57
 686                             		.loc 1 363 44 discriminator 2
 687 0027 EC 65                   		mov.L	[r6], r5
 688 0029 61 05                   		cmp	#0, r5
 689 002b 20 1A                   		beq	.L57
 364:../src/wolfcrypt/src/signature.c ****         sig == NULL || sig_len == NULL || *sig_len == 0 ||
 690                             		.loc 1 364 21
 691 002d A8 6D                   		mov.L	4[r6], r5
 692 002f 61 05                   		cmp	#0, r5
 693 0031 20 14                   		beq	.L57
 694                             		.loc 1 364 43 discriminator 1
 695 0033 A8 6D                   		mov.L	4[r6], r5
 696 0035 EC 55                   		mov.L	[r5], r5
 697                             		.loc 1 364 40 discriminator 1
 698 0037 61 05                   		cmp	#0, r5
 699 0039 20 0C                   		beq	.L57
 700                             		.loc 1 364 57 discriminator 2
 701 003b A8 E5                   		mov.L	8[r6], r5
 702 003d 61 05                   		cmp	#0, r5
 703 003f 16                      		beq	.L57
 365:../src/wolfcrypt/src/signature.c ****         key == NULL || key_len == 0) {
 704                             		.loc 1 365 21
 705 0040 A8 ED                   		mov.L	12[r6], r5
 706 0042 61 05                   		cmp	#0, r5
 707 0044 18                      		bne	.L58
 708                             		.balign 8,3,2
 709                             	.L57:
 366:../src/wolfcrypt/src/signature.c ****         return BAD_FUNC_ARG;
 710                             		.loc 1 366 16
 711 0045 FB 5A 53 FF             		mov.L	#-173, r5
 712 0049 38 FF 00                		bra	.L59
 713                             	.L58:
 367:../src/wolfcrypt/src/signature.c ****     }
 368:../src/wolfcrypt/src/signature.c **** 
 369:../src/wolfcrypt/src/signature.c ****     /* Validate signature len (needs to be at least max) */
 370:../src/wolfcrypt/src/signature.c ****     if ((int)*sig_len < wc_SignatureGetSize(sig_type, key, key_len)) {
 714                             		.loc 1 370 14
 715 004c A8 6D                   		mov.L	4[r6], r5
 716 004e EC 55                   		mov.L	[r5], r5
 717                             		.loc 1 370 9
 718 0050 EF 5B                   		mov.L	r5, r11
 719                             		.loc 1 370 25
 720 0052 A8 EB                   		mov.L	12[r6], r3
 721 0054 A8 E2                   		mov.L	8[r6], r2
 722 0056 ED A1 02                		mov.L	8[r10], r1
 723 0059 05 00 00 00             		bsr	_wc_SignatureGetSize
 724 005d EF 15                   		mov.L	r1, r5
 725                             		.loc 1 370 8
 726 005f 47 5B                   		cmp	r5, r11
 727 0061 28 13                   		bge	.L60
 371:../src/wolfcrypt/src/signature.c ****         WOLFSSL_MSG("wc_SignatureGenerate: Invalid sig type/len");
 728                             		.loc 1 371 9
 729 0063 FB 12 CC 00 00 00       		mov.L	#.LC5, r1
 730 0069 05 00 00 00             		bsr	_WOLFSSL_MSG
 372:../src/wolfcrypt/src/signature.c ****         return BAD_FUNC_ARG;
 731                             		.loc 1 372 16
 732 006d FB 5A 53 FF             		mov.L	#-173, r5
 733 0071 38 D7 00                		bra	.L59
 734                             	.L60:
 373:../src/wolfcrypt/src/signature.c ****     }
 374:../src/wolfcrypt/src/signature.c **** 
 375:../src/wolfcrypt/src/signature.c ****     /* Validate hash size */
 376:../src/wolfcrypt/src/signature.c ****     ret = wc_HashGetDigestSize(hash_type);
 735                             		.loc 1 376 11
 736 0074 ED A1 01                		mov.L	4[r10], r1
 737 0077 05 00 00 00             		bsr	_wc_HashGetDigestSize
 738 007b E3 A1                   		mov.L	r1, [r10]
 377:../src/wolfcrypt/src/signature.c ****     if (ret < 0) {
 739                             		.loc 1 377 8
 740 007d EC A5                   		mov.L	[r10], r5
 741 007f 61 05                   		cmp	#0, r5
 742 0081 28 11                   		bge	.L61
 378:../src/wolfcrypt/src/signature.c ****         WOLFSSL_MSG("wc_SignatureGenerate: Invalid hash type/len");
 743                             		.loc 1 378 9
 744 0083 FB 12 F7 00 00 00       		mov.L	#.LC6, r1
 745 0089 05 00 00 00             		bsr	_WOLFSSL_MSG
 379:../src/wolfcrypt/src/signature.c ****         return ret;
 746                             		.loc 1 379 16
 747 008d EC A5                   		mov.L	[r10], r5
 748 008f 38 B9 00                		bra	.L59
 749                             	.L61:
 380:../src/wolfcrypt/src/signature.c ****     }
 381:../src/wolfcrypt/src/signature.c ****     ret = 0;
 750                             		.loc 1 381 9
 751 0092 F8 A6 00                		mov.L	#0, [r10]
 382:../src/wolfcrypt/src/signature.c **** 
 383:../src/wolfcrypt/src/signature.c ****     /* Create signature using hash as data */
 384:../src/wolfcrypt/src/signature.c ****     switch (sig_type) {
 752                             		.loc 1 384 5
 753 0095 ED A5 02                		mov.L	8[r10], r5
 754 0098 61 15                   		cmp	#1, r5
 755 009a 20 13                   		beq	.L62
 756 009c ED A5 02                		mov.L	8[r10], r5
 757 009f 61 05                   		cmp	#0, r5
 758 00a1 20 6D                   		beq	.L63
 759 00a3 ED A5 02                		mov.L	8[r10], r5
 760 00a6 61 35                   		cmp	#3, r5
 761 00a8 24 66                   		bgtu	.L63
 762 00aa 2E 2B                   		bra	.L64
 763                             	.L70:
 385:../src/wolfcrypt/src/signature.c ****         case WC_SIGNATURE_TYPE_ECC:
 764                             		.loc 1 385 9
 765 00ac 03                      		nop
 766                             	.L62:
 386:../src/wolfcrypt/src/signature.c **** #if defined(HAVE_ECC) && defined(HAVE_ECC_SIGN)
 387:../src/wolfcrypt/src/signature.c ****             /* Create signature using provided ECC key */
 388:../src/wolfcrypt/src/signature.c ****             do {
 389:../src/wolfcrypt/src/signature.c ****             #ifdef WOLFSSL_ASYNC_CRYPT
 390:../src/wolfcrypt/src/signature.c ****                 ret = wc_AsyncWait(ret, &((ecc_key*)key)->asyncDev,
 391:../src/wolfcrypt/src/signature.c ****                     WC_ASYNC_FLAG_CALL_AGAIN);
 392:../src/wolfcrypt/src/signature.c ****             #endif
 393:../src/wolfcrypt/src/signature.c ****             if (ret >= 0)
 767                             		.loc 1 393 16
 768 00ad EC A5                   		mov.L	[r10], r5
 769 00af 61 05                   		cmp	#0, r5
 770 00b1 29 1A                   		blt	.L65
 394:../src/wolfcrypt/src/signature.c ****                 ret = wc_ecc_sign_hash(hash_data, hash_len, sig, sig_len,
 771                             		.loc 1 394 23
 772 00b3 A8 E5                   		mov.L	8[r6], r5
 773 00b5 A0 0D                   		mov.L	r5, 4[r0]
 774 00b7 A9 65                   		mov.L	16[r6], r5
 775 00b9 E3 05                   		mov.L	r5, [r0]
 776 00bb A8 6C                   		mov.L	4[r6], r4
 777 00bd EC 63                   		mov.L	[r6], r3
 778 00bf ED A2 04                		mov.L	16[r10], r2
 779 00c2 ED A1 03                		mov.L	12[r10], r1
 780 00c5 05 00 00 00             		bsr	_wc_ecc_sign_hash
 781 00c9 E3 A1                   		mov.L	r1, [r10]
 782                             	.L65:
 395:../src/wolfcrypt/src/signature.c ****                     rng, (ecc_key*)key);
 396:../src/wolfcrypt/src/signature.c ****             } while (ret == WC_PENDING_E);
 783                             		.loc 1 396 13
 784 00cb EC A5                   		mov.L	[r10], r5
 785 00cd 75 05 94                		cmp	#-108, r5
 786 00d0 20 DC                   		beq	.L70
 397:../src/wolfcrypt/src/signature.c **** #else
 398:../src/wolfcrypt/src/signature.c ****             ret = SIG_TYPE_E;
 399:../src/wolfcrypt/src/signature.c **** #endif
 400:../src/wolfcrypt/src/signature.c ****             break;
 787                             		.loc 1 400 13
 788 00d2 2E 43                   		bra	.L66
 789                             	.L71:
 401:../src/wolfcrypt/src/signature.c **** 
 402:../src/wolfcrypt/src/signature.c ****         case WC_SIGNATURE_TYPE_RSA_W_ENC:
 790                             		.loc 1 402 9
 791 00d4 03                      		nop
 792                             	.L64:
 403:../src/wolfcrypt/src/signature.c ****         case WC_SIGNATURE_TYPE_RSA:
 404:../src/wolfcrypt/src/signature.c **** #if !defined(NO_RSA) && !defined(WOLFSSL_RSA_PUBLIC_ONLY) && \
 405:../src/wolfcrypt/src/signature.c ****     !defined(WOLFSSL_RSA_VERIFY_ONLY)
 406:../src/wolfcrypt/src/signature.c ****     #ifdef WOLFSSL_CRYPTOCELL
 407:../src/wolfcrypt/src/signature.c ****             /* use expected signature size (incoming sig_len could be larger buffer */
 408:../src/wolfcrypt/src/signature.c ****             *sig_len = wc_SignatureGetSize(sig_type, key, key_len);
 409:../src/wolfcrypt/src/signature.c ****             if (sig_type == WC_SIGNATURE_TYPE_RSA_W_ENC) {
 410:../src/wolfcrypt/src/signature.c ****                 ret = cc310_RsaSSL_Sign(hash_data, hash_len, sig, *sig_len,
 411:../src/wolfcrypt/src/signature.c ****                     (RsaKey*)key, cc310_hashModeRSA(hash_type, 0));
 412:../src/wolfcrypt/src/signature.c ****             }
 413:../src/wolfcrypt/src/signature.c ****             else {
 414:../src/wolfcrypt/src/signature.c ****                 ret = cc310_RsaSSL_Sign(hash_data, hash_len, sig, *sig_len,
 415:../src/wolfcrypt/src/signature.c ****                     (RsaKey*)key, cc310_hashModeRSA(hash_type, 1));
 416:../src/wolfcrypt/src/signature.c ****            }
 417:../src/wolfcrypt/src/signature.c ****     #else
 418:../src/wolfcrypt/src/signature.c ****             /* Create signature using provided RSA key */
 419:../src/wolfcrypt/src/signature.c ****             do {
 420:../src/wolfcrypt/src/signature.c ****             #ifdef WOLFSSL_ASYNC_CRYPT
 421:../src/wolfcrypt/src/signature.c ****                 ret = wc_AsyncWait(ret, &((RsaKey*)key)->asyncDev,
 422:../src/wolfcrypt/src/signature.c ****                     WC_ASYNC_FLAG_CALL_AGAIN);
 423:../src/wolfcrypt/src/signature.c ****             #endif
 424:../src/wolfcrypt/src/signature.c ****                 if (ret >= 0)
 793                             		.loc 1 424 20
 794 00d5 EC A5                   		mov.L	[r10], r5
 795 00d7 61 05                   		cmp	#0, r5
 796 00d9 29 1E                   		blt	.L67
 425:../src/wolfcrypt/src/signature.c ****                     ret = wc_RsaSSL_Sign(hash_data, hash_len, sig, *sig_len,
 797                             		.loc 1 425 27
 798 00db A8 6D                   		mov.L	4[r6], r5
 799 00dd EC 55                   		mov.L	[r5], r5
 800 00df A9 64                   		mov.L	16[r6], r4
 801 00e1 A0 0C                   		mov.L	r4, 4[r0]
 802 00e3 A8 E4                   		mov.L	8[r6], r4
 803 00e5 E3 04                   		mov.L	r4, [r0]
 804 00e7 EF 54                   		mov.L	r5, r4
 805 00e9 EC 63                   		mov.L	[r6], r3
 806 00eb ED A2 04                		mov.L	16[r10], r2
 807 00ee ED A1 03                		mov.L	12[r10], r1
 808 00f1 05 00 00 00             		bsr	_wc_RsaSSL_Sign
 809 00f5 E3 A1                   		mov.L	r1, [r10]
 810                             	.L67:
 426:../src/wolfcrypt/src/signature.c ****                         (RsaKey*)key, rng);
 427:../src/wolfcrypt/src/signature.c ****             } while (ret == WC_PENDING_E);
 811                             		.loc 1 427 13
 812 00f7 EC A5                   		mov.L	[r10], r5
 813 00f9 75 05 94                		cmp	#-108, r5
 814 00fc 20 D8                   		beq	.L71
 428:../src/wolfcrypt/src/signature.c ****     #endif /* WOLFSSL_CRYPTOCELL */
 429:../src/wolfcrypt/src/signature.c ****             if (ret >= 0) {
 815                             		.loc 1 429 16
 816 00fe EC A5                   		mov.L	[r10], r5
 817 0100 61 05                   		cmp	#0, r5
 818 0102 29 12                   		blt	.L72
 430:../src/wolfcrypt/src/signature.c ****                 *sig_len = ret;
 819                             		.loc 1 430 26
 820 0104 EC A4                   		mov.L	[r10], r4
 821 0106 A8 6D                   		mov.L	4[r6], r5
 822 0108 E3 54                   		mov.L	r4, [r5]
 431:../src/wolfcrypt/src/signature.c ****                 ret = 0; /* Success */
 823                             		.loc 1 431 21
 824 010a F8 A6 00                		mov.L	#0, [r10]
 432:../src/wolfcrypt/src/signature.c ****             }
 433:../src/wolfcrypt/src/signature.c **** #else
 434:../src/wolfcrypt/src/signature.c ****             ret = SIG_TYPE_E;
 435:../src/wolfcrypt/src/signature.c **** #endif
 436:../src/wolfcrypt/src/signature.c ****             break;
 825                             		.loc 1 436 13
 826 010d 0F                      		bra	.L72
 827                             	.L63:
 437:../src/wolfcrypt/src/signature.c **** 
 438:../src/wolfcrypt/src/signature.c ****         case WC_SIGNATURE_TYPE_NONE:
 439:../src/wolfcrypt/src/signature.c ****         default:
 440:../src/wolfcrypt/src/signature.c ****             ret = BAD_FUNC_ARG;
 828                             		.loc 1 440 17
 829 010e F8 AA 53 FF             		mov.L	#-173, [r10]
 441:../src/wolfcrypt/src/signature.c ****             break;
 830                             		.loc 1 441 13
 831 0112 2E 03                   		bra	.L66
 832                             	.L72:
 436:../src/wolfcrypt/src/signature.c **** 
 833                             		.loc 1 436 13
 834 0114 03                      		nop
 835                             	.L66:
 442:../src/wolfcrypt/src/signature.c ****     }
 443:../src/wolfcrypt/src/signature.c **** 
 444:../src/wolfcrypt/src/signature.c ****     if (ret == 0 && verify) {
 836                             		.loc 1 444 8
 837 0115 EC A5                   		mov.L	[r10], r5
 838 0117 61 05                   		cmp	#0, r5
 839 0119 21 2C                   		bne	.L69
 840                             		.loc 1 444 18 discriminator 1
 841 011b A9 6D                   		mov.L	20[r6], r5
 842 011d 61 05                   		cmp	#0, r5
 843 011f 20 26                   		beq	.L69
 445:../src/wolfcrypt/src/signature.c ****         ret = wc_SignatureVerifyHash(hash_type, sig_type, hash_data, hash_len,
 844                             		.loc 1 445 15
 845 0121 A8 6D                   		mov.L	4[r6], r5
 846 0123 EC 55                   		mov.L	[r5], r5
 847 0125 A8 EC                   		mov.L	12[r6], r4
 848 0127 A0 8C                   		mov.L	r4, 12[r0]
 849 0129 A8 E4                   		mov.L	8[r6], r4
 850 012b A0 84                   		mov.L	r4, 8[r0]
 851 012d A0 0D                   		mov.L	r5, 4[r0]
 852 012f EC 65                   		mov.L	[r6], r5
 853 0131 E3 05                   		mov.L	r5, [r0]
 854 0133 ED A4 04                		mov.L	16[r10], r4
 855 0136 ED A3 03                		mov.L	12[r10], r3
 856 0139 ED A2 02                		mov.L	8[r10], r2
 857 013c ED A1 01                		mov.L	4[r10], r1
 858 013f 05 00 00 00             		bsr	_wc_SignatureVerifyHash
 859 0143 E3 A1                   		mov.L	r1, [r10]
 860                             	.L69:
 446:../src/wolfcrypt/src/signature.c ****             sig, *sig_len, key, key_len);
 447:../src/wolfcrypt/src/signature.c ****     }
 448:../src/wolfcrypt/src/signature.c **** 
 449:../src/wolfcrypt/src/signature.c ****     return ret;
 861                             		.loc 1 449 12
 862 0145 EC A5                   		mov.L	[r10], r5
 863 0147 03                      		.balign 8,3,1
 864                             	.L59:
 450:../src/wolfcrypt/src/signature.c **** }
 865                             		.loc 1 450 1
 866 0148 EF 51                   		mov.L	r5, r1
 867 014a 3F 6B 15                		rtsd	#84, r6-r11
 868                             	.LFE6:
 870 014d FC 13 00                		.section	.text.wc_SignatureGenerate,"ax",@progbits
 871                             		.global	_wc_SignatureGenerate
 873                             	_wc_SignatureGenerate:
 874                             	.LFB7:
 451:../src/wolfcrypt/src/signature.c **** 
 452:../src/wolfcrypt/src/signature.c **** int wc_SignatureGenerate(
 453:../src/wolfcrypt/src/signature.c ****     enum wc_HashType hash_type, enum wc_SignatureType sig_type,
 454:../src/wolfcrypt/src/signature.c ****     const byte* data, word32 data_len,
 455:../src/wolfcrypt/src/signature.c ****     byte* sig, word32 *sig_len,
 456:../src/wolfcrypt/src/signature.c ****     const void* key, word32 key_len, WC_RNG* rng)
 457:../src/wolfcrypt/src/signature.c **** {
 875                             		.loc 1 457 1
 876 0000 7E AA                   		push.l	r10
 877                             	.LCFI18:
 878 0002 71 0A DC                		add	#-36, r0, r10
 879                             	.LCFI19:
 880 0005 71 A0 E8                		add	#-24, r10, r0
 881                             	.LCFI20:
 882 0008 75 45 2C                		mov.L	#44, r5
 883 000b 4B A5                   		add	r10, r5
 884 000d E3 A1                   		mov.L	r1, [r10]
 885 000f E7 A2 01                		mov.L	r2, 4[r10]
 886 0012 E7 A3 02                		mov.L	r3, 8[r10]
 887 0015 E7 A4 03                		mov.L	r4, 12[r10]
 458:../src/wolfcrypt/src/signature.c ****     return wc_SignatureGenerate_ex(hash_type, sig_type, data, data_len, sig,
 888                             		.loc 1 458 12
 889 0018 3E 05 01                		mov.L	#1, 20[r0]
 890 001b A9 54                   		mov.L	16[r5], r4
 891 001d A1 04                   		mov.L	r4, 16[r0]
 892 001f A8 DC                   		mov.L	12[r5], r4
 893 0021 A0 8C                   		mov.L	r4, 12[r0]
 894 0023 A8 D4                   		mov.L	8[r5], r4
 895 0025 A0 84                   		mov.L	r4, 8[r0]
 896 0027 A8 5C                   		mov.L	4[r5], r4
 897 0029 A0 0C                   		mov.L	r4, 4[r0]
 898 002b EC 55                   		mov.L	[r5], r5
 899 002d E3 05                   		mov.L	r5, [r0]
 900 002f ED A4 03                		mov.L	12[r10], r4
 901 0032 ED A3 02                		mov.L	8[r10], r3
 902 0035 ED A2 01                		mov.L	4[r10], r2
 903 0038 EC A1                   		mov.L	[r10], r1
 904 003a 05 00 00 00             		bsr	_wc_SignatureGenerate_ex
 905 003e EF 15                   		mov.L	r1, r5
 459:../src/wolfcrypt/src/signature.c ****         sig_len, key, key_len, rng, 1);
 460:../src/wolfcrypt/src/signature.c **** }
 906                             		.loc 1 460 1
 907 0040 EF 51                   		mov.L	r5, r1
 908 0042 3F AA 10                		rtsd	#64, r10-r10
 909                             	.LFE7:
 911                             		.section	.text.wc_SignatureGenerate_ex,"ax",@progbits
 912                             		.global	_wc_SignatureGenerate_ex
 914                             	_wc_SignatureGenerate_ex:
 915                             	.LFB8:
 461:../src/wolfcrypt/src/signature.c **** 
 462:../src/wolfcrypt/src/signature.c **** int wc_SignatureGenerate_ex(
 463:../src/wolfcrypt/src/signature.c ****     enum wc_HashType hash_type, enum wc_SignatureType sig_type,
 464:../src/wolfcrypt/src/signature.c ****     const byte* data, word32 data_len,
 465:../src/wolfcrypt/src/signature.c ****     byte* sig, word32 *sig_len,
 466:../src/wolfcrypt/src/signature.c ****     const void* key, word32 key_len, WC_RNG* rng, int verify)
 467:../src/wolfcrypt/src/signature.c **** {
 916                             		.loc 1 467 1
 917 0000 6E 6B                   		pushm	r6-r11
 918                             	.LCFI21:
 919 0002 71 0A C4                		add	#-60, r0, r10
 920                             	.LCFI22:
 921 0005 71 A0 EC                		add	#-20, r10, r0
 922                             	.LCFI23:
 923 0008 75 46 58                		mov.L	#0x58, r6
 924 000b 4B A6                   		add	r10, r6
 925 000d E7 A1 05                		mov.L	r1, 20[r10]
 926 0010 E7 A2 06                		mov.L	r2, 24[r10]
 927 0013 E7 A3 07                		mov.L	r3, 28[r10]
 928 0016 E7 A4 08                		mov.L	r4, 32[r10]
 468:../src/wolfcrypt/src/signature.c ****     int ret;
 469:../src/wolfcrypt/src/signature.c ****     word32 hash_len, hash_enc_len;
 470:../src/wolfcrypt/src/signature.c **** #if defined(WOLFSSL_SMALL_STACK) || defined(NO_ASN)
 471:../src/wolfcrypt/src/signature.c ****     byte *hash_data;
 472:../src/wolfcrypt/src/signature.c **** #else
 473:../src/wolfcrypt/src/signature.c ****     byte hash_data[MAX_DER_DIGEST_SZ];
 474:../src/wolfcrypt/src/signature.c **** #endif
 475:../src/wolfcrypt/src/signature.c **** 
 476:../src/wolfcrypt/src/signature.c ****     /* Check arguments */
 477:../src/wolfcrypt/src/signature.c ****     if (data == NULL || data_len == 0 ||
 929                             		.loc 1 477 8
 930 0019 ED A5 07                		mov.L	28[r10], r5
 931 001c 61 05                   		cmp	#0, r5
 932 001e 20 27                   		beq	.L76
 933                             		.loc 1 477 22 discriminator 1
 934 0020 ED A5 08                		mov.L	32[r10], r5
 935 0023 61 05                   		cmp	#0, r5
 936 0025 20 20                   		beq	.L76
 937                             		.loc 1 477 39 discriminator 2
 938 0027 EC 65                   		mov.L	[r6], r5
 939 0029 61 05                   		cmp	#0, r5
 940 002b 20 1A                   		beq	.L76
 478:../src/wolfcrypt/src/signature.c ****         sig == NULL || sig_len == NULL || *sig_len == 0 ||
 941                             		.loc 1 478 21
 942 002d A8 6D                   		mov.L	4[r6], r5
 943 002f 61 05                   		cmp	#0, r5
 944 0031 20 14                   		beq	.L76
 945                             		.loc 1 478 43 discriminator 1
 946 0033 A8 6D                   		mov.L	4[r6], r5
 947 0035 EC 55                   		mov.L	[r5], r5
 948                             		.loc 1 478 40 discriminator 1
 949 0037 61 05                   		cmp	#0, r5
 950 0039 20 0C                   		beq	.L76
 951                             		.loc 1 478 57 discriminator 2
 952 003b A8 E5                   		mov.L	8[r6], r5
 953 003d 61 05                   		cmp	#0, r5
 954 003f 16                      		beq	.L76
 479:../src/wolfcrypt/src/signature.c ****         key == NULL || key_len == 0) {
 955                             		.loc 1 479 21
 956 0040 A8 ED                   		mov.L	12[r6], r5
 957 0042 61 05                   		cmp	#0, r5
 958 0044 18                      		bne	.L77
 959                             		.balign 8,3,2
 960                             	.L76:
 480:../src/wolfcrypt/src/signature.c ****         return BAD_FUNC_ARG;
 961                             		.loc 1 480 16
 962 0045 FB 5A 53 FF             		mov.L	#-173, r5
 963 0049 38 27 01                		bra	.L87
 964                             	.L77:
 481:../src/wolfcrypt/src/signature.c ****     }
 482:../src/wolfcrypt/src/signature.c **** 
 483:../src/wolfcrypt/src/signature.c ****     /* Validate signature len (needs to be at least max) */
 484:../src/wolfcrypt/src/signature.c ****     if ((int)*sig_len < wc_SignatureGetSize(sig_type, key, key_len)) {
 965                             		.loc 1 484 14
 966 004c A8 6D                   		mov.L	4[r6], r5
 967 004e EC 55                   		mov.L	[r5], r5
 968                             		.loc 1 484 9
 969 0050 EF 5B                   		mov.L	r5, r11
 970                             		.loc 1 484 25
 971 0052 A8 EB                   		mov.L	12[r6], r3
 972 0054 A8 E2                   		mov.L	8[r6], r2
 973 0056 ED A1 06                		mov.L	24[r10], r1
 974 0059 05 00 00 00             		bsr	_wc_SignatureGetSize
 975 005d EF 15                   		mov.L	r1, r5
 976                             		.loc 1 484 8
 977 005f 47 5B                   		cmp	r5, r11
 978 0061 28 13                   		bge	.L79
 485:../src/wolfcrypt/src/signature.c ****         WOLFSSL_MSG("wc_SignatureGenerate: Invalid sig type/len");
 979                             		.loc 1 485 9
 980 0063 FB 12 CC 00 00 00       		mov.L	#.LC5, r1
 981 0069 05 00 00 00             		bsr	_WOLFSSL_MSG
 486:../src/wolfcrypt/src/signature.c ****         return BAD_FUNC_ARG;
 982                             		.loc 1 486 16
 983 006d FB 5A 53 FF             		mov.L	#-173, r5
 984 0071 38 FF 00                		bra	.L87
 985                             	.L79:
 487:../src/wolfcrypt/src/signature.c ****     }
 488:../src/wolfcrypt/src/signature.c **** 
 489:../src/wolfcrypt/src/signature.c ****     /* Validate hash size */
 490:../src/wolfcrypt/src/signature.c ****     ret = wc_HashGetDigestSize(hash_type);
 986                             		.loc 1 490 11
 987 0074 ED A1 05                		mov.L	20[r10], r1
 988 0077 05 00 00 00             		bsr	_wc_HashGetDigestSize
 989 007b E3 A1                   		mov.L	r1, [r10]
 491:../src/wolfcrypt/src/signature.c ****     if (ret < 0) {
 990                             		.loc 1 491 8
 991 007d EC A5                   		mov.L	[r10], r5
 992 007f 61 05                   		cmp	#0, r5
 993 0081 28 11                   		bge	.L80
 492:../src/wolfcrypt/src/signature.c ****         WOLFSSL_MSG("wc_SignatureGenerate: Invalid hash type/len");
 994                             		.loc 1 492 9
 995 0083 FB 12 F7 00 00 00       		mov.L	#.LC6, r1
 996 0089 05 00 00 00             		bsr	_WOLFSSL_MSG
 493:../src/wolfcrypt/src/signature.c ****         return ret;
 997                             		.loc 1 493 16
 998 008d EC A5                   		mov.L	[r10], r5
 999 008f 38 E1 00                		bra	.L87
 1000                             	.L80:
 494:../src/wolfcrypt/src/signature.c ****     }
 495:../src/wolfcrypt/src/signature.c ****     hash_enc_len = hash_len = ret;
 1001                             		.loc 1 495 29
 1002 0092 EC A5                   		mov.L	[r10], r5
 1003 0094 E7 A5 01                		mov.L	r5, 4[r10]
 1004                             		.loc 1 495 18
 1005 0097 ED A5 01                		mov.L	4[r10], r5
 1006 009a E7 A5 04                		mov.L	r5, 16[r10]
 496:../src/wolfcrypt/src/signature.c **** 
 497:../src/wolfcrypt/src/signature.c **** #if !defined(NO_RSA) && !defined(WOLFSSL_RSA_PUBLIC_ONLY)
 498:../src/wolfcrypt/src/signature.c ****     if (sig_type == WC_SIGNATURE_TYPE_RSA_W_ENC) {
 1007                             		.loc 1 498 8
 1008 009d ED A5 06                		mov.L	24[r10], r5
 1009 00a0 61 35                   		cmp	#3, r5
 1010 00a2 1A                      		bne	.L81
 499:../src/wolfcrypt/src/signature.c ****         /* For RSA with ASN.1 encoding include room */
 500:../src/wolfcrypt/src/signature.c ****         hash_enc_len += MAX_DER_DIGEST_ASN_SZ;
 1011                             		.loc 1 500 22
 1012 00a3 ED A5 04                		mov.L	16[r10], r5
 1013 00a6 71 55 22                		add	#34, r5
 1014 00a9 E7 A5 04                		mov.L	r5, 16[r10]
 1015                             	.L81:
 501:../src/wolfcrypt/src/signature.c ****     }
 502:../src/wolfcrypt/src/signature.c **** #endif
 503:../src/wolfcrypt/src/signature.c **** 
 504:../src/wolfcrypt/src/signature.c **** #if defined(WOLFSSL_SMALL_STACK) || defined(NO_ASN)
 505:../src/wolfcrypt/src/signature.c ****     /* Allocate temporary buffer for hash data */
 506:../src/wolfcrypt/src/signature.c ****     hash_data = (byte*)XMALLOC(hash_enc_len, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 1016                             		.loc 1 506 24
 1017 00ac ED A5 04                		mov.L	16[r10], r5
 1018 00af EF 51                   		mov.L	r5, r1
 1019 00b1 05 00 00 00             		bsr	_wolfSSL_Malloc
 1020 00b5 E7 A1 02                		mov.L	r1, 8[r10]
 507:../src/wolfcrypt/src/signature.c ****     if (hash_data == NULL) {
 1021                             		.loc 1 507 8
 1022 00b8 ED A5 02                		mov.L	8[r10], r5
 1023 00bb 61 05                   		cmp	#0, r5
 1024 00bd 1F                      		bne	.L82
 508:../src/wolfcrypt/src/signature.c ****         return MEMORY_E;
 1025                             		.loc 1 508 16
 1026 00be FB 56 83                		mov.L	#-125, r5
 1027 00c1 38 AF 00                		bra	.L87
 1028                             	.L82:
 509:../src/wolfcrypt/src/signature.c ****     }
 510:../src/wolfcrypt/src/signature.c **** #endif
 511:../src/wolfcrypt/src/signature.c **** 
 512:../src/wolfcrypt/src/signature.c ****     /* Perform hash of data */
 513:../src/wolfcrypt/src/signature.c ****     ret = wc_Hash(hash_type, data, data_len, hash_data, hash_len);
 1029                             		.loc 1 513 11
 1030 00c4 ED A5 01                		mov.L	4[r10], r5
 1031 00c7 E3 05                   		mov.L	r5, [r0]
 1032 00c9 ED A4 02                		mov.L	8[r10], r4
 1033 00cc ED A3 08                		mov.L	32[r10], r3
 1034 00cf ED A2 07                		mov.L	28[r10], r2
 1035 00d2 ED A1 05                		mov.L	20[r10], r1
 1036 00d5 05 00 00 00             		bsr	_wc_Hash
 1037 00d9 E3 A1                   		mov.L	r1, [r10]
 514:../src/wolfcrypt/src/signature.c ****     if (ret == 0) {
 1038                             		.loc 1 514 8
 1039 00db EC A5                   		mov.L	[r10], r5
 1040 00dd 61 05                   		cmp	#0, r5
 1041 00df 21 4B                   		bne	.L83
 515:../src/wolfcrypt/src/signature.c ****         /* Handle RSA with DER encoding */
 516:../src/wolfcrypt/src/signature.c ****         if (sig_type == WC_SIGNATURE_TYPE_RSA_W_ENC) {
 1042                             		.loc 1 516 12
 1043 00e1 ED A5 06                		mov.L	24[r10], r5
 1044 00e4 61 35                   		cmp	#3, r5
 1045 00e6 21 16                   		bne	.L84
 517:../src/wolfcrypt/src/signature.c ****         #if defined(NO_RSA) || defined(NO_ASN) || \
 518:../src/wolfcrypt/src/signature.c ****                                                 defined(WOLFSSL_RSA_PUBLIC_ONLY)
 519:../src/wolfcrypt/src/signature.c ****             ret = SIG_TYPE_E;
 520:../src/wolfcrypt/src/signature.c ****         #else
 521:../src/wolfcrypt/src/signature.c ****             ret = wc_SignatureDerEncode(hash_type, hash_data, hash_len,
 1046                             		.loc 1 521 19
 1047 00e8 71 A5 10                		add	#16, r10, r5
 1048 00eb EF 54                   		mov.L	r5, r4
 1049 00ed ED A3 01                		mov.L	4[r10], r3
 1050 00f0 ED A2 02                		mov.L	8[r10], r2
 1051 00f3 ED A1 05                		mov.L	20[r10], r1
 1052 00f6 05 00 00 00             		bsr	_wc_SignatureDerEncode
 1053 00fa E3 A1                   		mov.L	r1, [r10]
 1054                             	.L84:
 522:../src/wolfcrypt/src/signature.c ****                 &hash_enc_len);
 523:../src/wolfcrypt/src/signature.c ****         #endif
 524:../src/wolfcrypt/src/signature.c ****         }
 525:../src/wolfcrypt/src/signature.c ****         if (ret == 0) {
 1055                             		.loc 1 525 12
 1056 00fc EC A5                   		mov.L	[r10], r5
 1057 00fe 61 05                   		cmp	#0, r5
 1058 0100 21 2A                   		bne	.L83
 526:../src/wolfcrypt/src/signature.c ****             /* Generate signature using hash */
 527:../src/wolfcrypt/src/signature.c ****             ret = wc_SignatureGenerateHash(hash_type, sig_type,
 1059                             		.loc 1 527 19
 1060 0102 ED A5 04                		mov.L	16[r10], r5
 1061 0105 A9 64                   		mov.L	16[r6], r4
 1062 0107 A1 04                   		mov.L	r4, 16[r0]
 1063 0109 A8 EC                   		mov.L	12[r6], r4
 1064 010b A0 8C                   		mov.L	r4, 12[r0]
 1065 010d A8 E4                   		mov.L	8[r6], r4
 1066 010f A0 84                   		mov.L	r4, 8[r0]
 1067 0111 A8 6C                   		mov.L	4[r6], r4
 1068 0113 A0 0C                   		mov.L	r4, 4[r0]
 1069 0115 EC 64                   		mov.L	[r6], r4
 1070 0117 E3 04                   		mov.L	r4, [r0]
 1071 0119 EF 54                   		mov.L	r5, r4
 1072 011b ED A3 02                		mov.L	8[r10], r3
 1073 011e ED A2 06                		mov.L	24[r10], r2
 1074 0121 ED A1 05                		mov.L	20[r10], r1
 1075 0124 05 00 00 00             		bsr	_wc_SignatureGenerateHash
 1076 0128 E3 A1                   		mov.L	r1, [r10]
 1077                             	.L83:
 528:../src/wolfcrypt/src/signature.c ****                 hash_data, hash_enc_len, sig, sig_len, key, key_len, rng);
 529:../src/wolfcrypt/src/signature.c ****         }
 530:../src/wolfcrypt/src/signature.c ****     }
 531:../src/wolfcrypt/src/signature.c **** 
 532:../src/wolfcrypt/src/signature.c ****     if (ret == 0 && verify) {
 1078                             		.loc 1 532 8
 1079 012a EC A5                   		mov.L	[r10], r5
 1080 012c 61 05                   		cmp	#0, r5
 1081 012e 21 2C                   		bne	.L85
 1082                             		.loc 1 532 18 discriminator 1
 1083 0130 A9 6D                   		mov.L	20[r6], r5
 1084 0132 61 05                   		cmp	#0, r5
 1085 0134 20 26                   		beq	.L85
 533:../src/wolfcrypt/src/signature.c ****         ret = wc_SignatureVerifyHash(hash_type, sig_type, hash_data,
 1086                             		.loc 1 533 15
 1087 0136 ED A4 04                		mov.L	16[r10], r4
 1088 0139 A8 6D                   		mov.L	4[r6], r5
 1089 013b EC 55                   		mov.L	[r5], r5
 1090 013d A8 EB                   		mov.L	12[r6], r3
 1091 013f A0 8B                   		mov.L	r3, 12[r0]
 1092 0141 A8 E3                   		mov.L	8[r6], r3
 1093 0143 A0 83                   		mov.L	r3, 8[r0]
 1094 0145 A0 0D                   		mov.L	r5, 4[r0]
 1095 0147 EC 65                   		mov.L	[r6], r5
 1096 0149 E3 05                   		mov.L	r5, [r0]
 1097 014b ED A3 02                		mov.L	8[r10], r3
 1098 014e ED A2 06                		mov.L	24[r10], r2
 1099 0151 ED A1 05                		mov.L	20[r10], r1
 1100 0154 05 00 00 00             		bsr	_wc_SignatureVerifyHash
 1101 0158 E3 A1                   		mov.L	r1, [r10]
 1102                             	.L85:
 1103                             	.LBB9:
 534:../src/wolfcrypt/src/signature.c ****             hash_enc_len, sig, *sig_len, key, key_len);
 535:../src/wolfcrypt/src/signature.c ****     }
 536:../src/wolfcrypt/src/signature.c **** 
 537:../src/wolfcrypt/src/signature.c **** #if defined(WOLFSSL_SMALL_STACK) || defined(NO_ASN)
 538:../src/wolfcrypt/src/signature.c ****     XFREE(hash_data, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 1104                             		.loc 1 538 5
 1105 015a ED A5 02                		mov.L	8[r10], r5
 1106 015d E7 A5 03                		mov.L	r5, 12[r10]
 1107 0160 ED A5 03                		mov.L	12[r10], r5
 1108 0163 61 05                   		cmp	#0, r5
 1109 0165 10                      		beq	.L86
 1110                             		.loc 1 538 5 is_stmt 0 discriminator 1
 1111 0166 ED A1 03                		mov.L	12[r10], r1
 1112 0169 05 00 00 00             		bsr	_wolfSSL_Free
 1113                             	.L86:
 1114                             	.LBE9:
 539:../src/wolfcrypt/src/signature.c **** #endif
 540:../src/wolfcrypt/src/signature.c **** 
 541:../src/wolfcrypt/src/signature.c ****     return ret;
 1115                             		.loc 1 541 12 is_stmt 1
 1116 016d EC A5                   		mov.L	[r10], r5
 1117 016f 03                      		.balign 8,3,1
 1118                             	.L87:
 542:../src/wolfcrypt/src/signature.c **** }
 1119                             		.loc 1 542 1 discriminator 1
 1120 0170 EF 51                   		mov.L	r5, r1
 1121 0172 3F 6B 1A                		rtsd	#104, r6-r11
 1122                             	.LFE8:
 1356                             	.Letext0:
 1357                             		.file 2 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 1358                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1359                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1360                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1361                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1362                             		.file 7 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 1363                             		.file 8 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1364                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1365                             		.file 10 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/random.h"
 1366                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/signature.h"
 1367                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
 1368                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sp_int.h"
 1369                             		.file 14 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/wolfmath.h"
 1370                             		.file 15 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/asn_public.h"
 1371                             		.file 16 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/ecc.h"
 1372                             		.file 17 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/rsa.h"
 1373                             		.file 18 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/asn.h"
