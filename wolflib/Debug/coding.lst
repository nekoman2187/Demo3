   1                             		.file	"coding.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.rodata.base64Decode,"a"
   7                             	_base64Decode:
   8 0000 3E                      		.byte	62
   9 0001 FF                      		.byte	-1
  10 0002 FF                      		.byte	-1
  11 0003 FF                      		.byte	-1
  12 0004 3F                      		.byte	63
  13 0005 34                      		.byte	52
  14 0006 35                      		.byte	53
  15 0007 36                      		.byte	54
  16 0008 37                      		.byte	55
  17 0009 38                      		.byte	56
  18 000a 39                      		.byte	57
  19 000b 3A                      		.byte	58
  20 000c 3B                      		.byte	59
  21 000d 3C                      		.byte	60
  22 000e 3D                      		.byte	61
  23 000f FF                      		.byte	-1
  24 0010 FF                      		.byte	-1
  25 0011 FF                      		.byte	-1
  26 0012 FF                      		.byte	-1
  27 0013 FF                      		.byte	-1
  28 0014 FF                      		.byte	-1
  29 0015 FF                      		.byte	-1
  30 0016 00                      		.byte	0
  31 0017 01                      		.byte	1
  32 0018 02                      		.byte	2
  33 0019 03                      		.byte	3
  34 001a 04                      		.byte	4
  35 001b 05                      		.byte	5
  36 001c 06                      		.byte	6
  37 001d 07                      		.byte	7
  38 001e 08                      		.byte	8
  39 001f 09                      		.byte	9
  40 0020 0A                      		.byte	10
  41 0021 0B                      		.byte	11
  42 0022 0C                      		.byte	12
  43 0023 0D                      		.byte	13
  44 0024 0E                      		.byte	14
  45 0025 0F                      		.byte	15
  46 0026 10                      		.byte	16
  47 0027 11                      		.byte	17
  48 0028 12                      		.byte	18
  49 0029 13                      		.byte	19
  50 002a 14                      		.byte	20
  51 002b 15                      		.byte	21
  52 002c 16                      		.byte	22
  53 002d 17                      		.byte	23
  54 002e 18                      		.byte	24
  55 002f 19                      		.byte	25
  56 0030 FF                      		.byte	-1
  57 0031 FF                      		.byte	-1
  58 0032 FF                      		.byte	-1
  59 0033 FF                      		.byte	-1
  60 0034 FF                      		.byte	-1
  61 0035 FF                      		.byte	-1
  62 0036 1A                      		.byte	26
  63 0037 1B                      		.byte	27
  64 0038 1C                      		.byte	28
  65 0039 1D                      		.byte	29
  66 003a 1E                      		.byte	30
  67 003b 1F                      		.byte	31
  68 003c 20                      		.byte	32
  69 003d 21                      		.byte	33
  70 003e 22                      		.byte	34
  71 003f 23                      		.byte	35
  72 0040 24                      		.byte	36
  73 0041 25                      		.byte	37
  74 0042 26                      		.byte	38
  75 0043 27                      		.byte	39
  76 0044 28                      		.byte	40
  77 0045 29                      		.byte	41
  78 0046 2A                      		.byte	42
  79 0047 2B                      		.byte	43
  80 0048 2C                      		.byte	44
  81 0049 2D                      		.byte	45
  82 004a 2E                      		.byte	46
  83 004b 2F                      		.byte	47
  84 004c 30                      		.byte	48
  85 004d 31                      		.byte	49
  86 004e 32                      		.byte	50
  87 004f 33                      		.byte	51
  88                             		.section	.text.Base64_Char2Val,"ax",@progbits
  90                             	_Base64_Char2Val:
  91                             	.LFB43:
  92                             		.file 1 "../src/wolfcrypt/src/coding.c"
   1:../src/wolfcrypt/src/coding.c **** /* coding.c
   2:../src/wolfcrypt/src/coding.c ****  *
   3:../src/wolfcrypt/src/coding.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/coding.c ****  *
   5:../src/wolfcrypt/src/coding.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/coding.c ****  *
   7:../src/wolfcrypt/src/coding.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/coding.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/coding.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/coding.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/coding.c ****  *
  12:../src/wolfcrypt/src/coding.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/coding.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/coding.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/coding.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/coding.c ****  *
  17:../src/wolfcrypt/src/coding.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/coding.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/coding.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/coding.c ****  */
  21:../src/wolfcrypt/src/coding.c **** 
  22:../src/wolfcrypt/src/coding.c **** 
  23:../src/wolfcrypt/src/coding.c **** #ifdef HAVE_CONFIG_H
  24:../src/wolfcrypt/src/coding.c ****     #include <config.h>
  25:../src/wolfcrypt/src/coding.c **** #endif
  26:../src/wolfcrypt/src/coding.c **** 
  27:../src/wolfcrypt/src/coding.c **** #include <wolfssl/wolfcrypt/settings.h>
  28:../src/wolfcrypt/src/coding.c **** 
  29:../src/wolfcrypt/src/coding.c **** #ifndef NO_CODING
  30:../src/wolfcrypt/src/coding.c **** 
  31:../src/wolfcrypt/src/coding.c **** #include <wolfssl/wolfcrypt/coding.h>
  32:../src/wolfcrypt/src/coding.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  33:../src/wolfcrypt/src/coding.c **** #include <wolfssl/wolfcrypt/logging.h>
  34:../src/wolfcrypt/src/coding.c **** #ifndef NO_ASN
  35:../src/wolfcrypt/src/coding.c ****     #include <wolfssl/wolfcrypt/asn.h> /* For PEM_LINE_SZ */
  36:../src/wolfcrypt/src/coding.c **** #endif
  37:../src/wolfcrypt/src/coding.c **** #ifdef NO_INLINE
  38:../src/wolfcrypt/src/coding.c ****     #include <wolfssl/wolfcrypt/misc.h>
  39:../src/wolfcrypt/src/coding.c **** #else
  40:../src/wolfcrypt/src/coding.c ****     #define WOLFSSL_MISC_INCLUDED
  41:../src/wolfcrypt/src/coding.c ****     #include <wolfcrypt/src/misc.c>
  42:../src/wolfcrypt/src/coding.c **** #endif
  43:../src/wolfcrypt/src/coding.c **** 
  44:../src/wolfcrypt/src/coding.c **** enum {
  45:../src/wolfcrypt/src/coding.c ****     BAD         = 0xFF,  /* invalid encoding */
  46:../src/wolfcrypt/src/coding.c ****     PAD         = '=',
  47:../src/wolfcrypt/src/coding.c ****     BASE64_MIN  = 0x2B,
  48:../src/wolfcrypt/src/coding.c ****     BASE16_MIN  = 0x30,
  49:../src/wolfcrypt/src/coding.c **** };
  50:../src/wolfcrypt/src/coding.c **** 
  51:../src/wolfcrypt/src/coding.c **** 
  52:../src/wolfcrypt/src/coding.c **** #ifndef BASE64_LINE_SZ
  53:../src/wolfcrypt/src/coding.c ****     #ifdef NO_ASN
  54:../src/wolfcrypt/src/coding.c ****         #define BASE64_LINE_SZ 64
  55:../src/wolfcrypt/src/coding.c ****     #else
  56:../src/wolfcrypt/src/coding.c ****         #define BASE64_LINE_SZ PEM_LINE_SZ
  57:../src/wolfcrypt/src/coding.c ****     #endif
  58:../src/wolfcrypt/src/coding.c **** #endif
  59:../src/wolfcrypt/src/coding.c **** 
  60:../src/wolfcrypt/src/coding.c **** #ifdef WOLFSSL_BASE64_DECODE
  61:../src/wolfcrypt/src/coding.c **** 
  62:../src/wolfcrypt/src/coding.c **** #ifdef BASE64_NO_TABLE
  63:../src/wolfcrypt/src/coding.c **** static WC_INLINE byte Base64_Char2Val(byte c)
  64:../src/wolfcrypt/src/coding.c **** {
  65:../src/wolfcrypt/src/coding.c ****     word16 v = 0x0000;
  66:../src/wolfcrypt/src/coding.c **** 
  67:../src/wolfcrypt/src/coding.c ****     v |= 0xff3E & ctMask16Eq(c, 0x2b);
  68:../src/wolfcrypt/src/coding.c ****     v |= 0xff3F & ctMask16Eq(c, 0x2f);
  69:../src/wolfcrypt/src/coding.c ****     v |= (c + 0xff04) & ctMask16GTE(c, 0x30) & ctMask16LTE(c, 0x39);
  70:../src/wolfcrypt/src/coding.c ****     v |= (0xff00 + c - 0x41) & ctMask16GTE(c, 0x41) & ctMask16LTE(c, 0x5a);
  71:../src/wolfcrypt/src/coding.c ****     v |= (0xff00 + c - 0x47) & ctMask16GTE(c, 0x61) & ctMask16LTE(c, 0x7a);
  72:../src/wolfcrypt/src/coding.c ****     v |= ~(v >> 8);
  73:../src/wolfcrypt/src/coding.c **** 
  74:../src/wolfcrypt/src/coding.c ****     return (byte)v;
  75:../src/wolfcrypt/src/coding.c **** }
  76:../src/wolfcrypt/src/coding.c **** #else
  77:../src/wolfcrypt/src/coding.c **** static
  78:../src/wolfcrypt/src/coding.c **** ALIGN64 const byte base64Decode[] = {          /* + starts at 0x2B */
  79:../src/wolfcrypt/src/coding.c **** /* 0x28:       + , - . / */                   62, BAD, BAD, BAD,  63,
  80:../src/wolfcrypt/src/coding.c **** /* 0x30: 0 1 2 3 4 5 6 7 */    52,  53,  54,  55,  56,  57,  58,  59,
  81:../src/wolfcrypt/src/coding.c **** /* 0x38: 8 9 : ; < = > ? */    60,  61, BAD, BAD, BAD, BAD, BAD, BAD,
  82:../src/wolfcrypt/src/coding.c **** /* 0x40: @ A B C D E F G */   BAD,   0,   1,   2,   3,   4,   5,   6,
  83:../src/wolfcrypt/src/coding.c **** /* 0x48: H I J K L M N O */     7,   8,   9,  10,  11,  12,  13,  14,
  84:../src/wolfcrypt/src/coding.c **** /* 0x50: P Q R S T U V W */    15,  16,  17,  18,  19,  20,  21,  22,
  85:../src/wolfcrypt/src/coding.c **** /* 0x58: X Y Z [ \ ] ^ _ */    23,  24,  25, BAD, BAD, BAD, BAD, BAD,
  86:../src/wolfcrypt/src/coding.c **** /* 0x60: ` a b c d e f g */   BAD,  26,  27,  28,  29,  30,  31,  32,
  87:../src/wolfcrypt/src/coding.c **** /* 0x68: h i j k l m n o */    33,  34,  35,  36,  37,  38,  39,  40,
  88:../src/wolfcrypt/src/coding.c **** /* 0x70: p q r s t u v w */    41,  42,  43,  44,  45,  46,  47,  48,
  89:../src/wolfcrypt/src/coding.c **** /* 0x78: x y z           */    49,  50,  51
  90:../src/wolfcrypt/src/coding.c ****                             };
  91:../src/wolfcrypt/src/coding.c **** #define BASE64DECODE_SZ    (byte)(sizeof(base64Decode))
  92:../src/wolfcrypt/src/coding.c **** 
  93:../src/wolfcrypt/src/coding.c **** static WC_INLINE byte Base64_Char2Val(byte c)
  94:../src/wolfcrypt/src/coding.c **** {
  93                             		.loc 1 94 1
  94 0000 7E AA                   		push.l	r10
  95                             	.LCFI0:
  96 0002 71 0A F8                		add	#-8, r0, r10
  97                             	.LCFI1:
  98 0005 EF A0                   		mov.L	r10, r0
  99 0007 C7 A1 04                		mov.B	r1, 4[r10]
  95:../src/wolfcrypt/src/coding.c **** #ifndef WC_NO_CACHE_RESISTANT
  96:../src/wolfcrypt/src/coding.c ****     /* 80 characters in table.
  97:../src/wolfcrypt/src/coding.c ****      * 64 bytes in a cache line - first line has 64, second has 16
  98:../src/wolfcrypt/src/coding.c ****      */
  99:../src/wolfcrypt/src/coding.c ****     byte v;
 100:../src/wolfcrypt/src/coding.c ****     byte mask;
 101:../src/wolfcrypt/src/coding.c **** 
 102:../src/wolfcrypt/src/coding.c ****     c -= BASE64_MIN;
 100                             		.loc 1 102 7
 101 000a CD A5 04                		mov.B	4[r10], r5
 102 000d 71 55 D5                		add	#-43, r5
 103 0010 C7 A5 04                		mov.B	r5, 4[r10]
 103:../src/wolfcrypt/src/coding.c ****     mask = (((byte)(0x3f - c)) >> 7) - 1;
 104                             		.loc 1 103 14
 105 0013 CD A5 04                		mov.B	4[r10], r5
 106 0016 75 44 3F                		mov.L	#63, r4
 107 0019 FF 05 54                		sub	r5, r4, r5
 108                             		.loc 1 103 38
 109 001c 5B 55                   		movu.B	r5, r5
 110 001e 68 75                   		shlr	#7, r5
 111                             		.loc 1 103 10
 112 0020 60 15                   		sub	#1, r5
 113 0022 C3 A5                   		mov.B	r5, [r10]
 104:../src/wolfcrypt/src/coding.c ****     /* Load a value from the first cache line and use when mask set. */
 105:../src/wolfcrypt/src/coding.c ****     v  = base64Decode[ c & 0x3f        ] &   mask ;
 114                             		.loc 1 105 26
 115 0024 59 A5 04                		movu.B	4[r10], r5
 116 0027 75 25 3F                		and	#63, r5
 117                             		.loc 1 105 22
 118 002a FB 42 00 00 00 00       		mov.L	#_base64Decode, r4
 119 0030 FE 45 45                		mov.B	[r5,r4], r5
 120                             		.loc 1 105 8
 121 0033 CC A4                   		mov.B	[r10], r4
 122 0035 53 45                   		and	r4, r5
 123 0037 C7 A5 01                		mov.B	r5, 1[r10]
 106:../src/wolfcrypt/src/coding.c ****     /* Load a value from the second cache line and use when mask not set. */
 107:../src/wolfcrypt/src/coding.c ****     v |= base64Decode[(c & 0x0f) | 0x40] & (~mask);
 124                             		.loc 1 107 26
 125 003a 59 A5 04                		movu.B	4[r10], r5
 126 003d 64 F5                   		and	#15, r5
 127                             		.loc 1 107 34
 128 003f 75 35 40                		or	#0x40, r5
 129                             		.loc 1 107 22
 130 0042 FB 42 00 00 00 00       		mov.L	#_base64Decode, r4
 131 0048 FE 45 45                		mov.B	[r5,r4], r5
 132 004b CF 54                   		mov.B	r5, r4
 133                             		.loc 1 107 42
 134 004d CC A5                   		mov.B	[r10], r5
 135 004f 7E 05                   		not	r5
 136 0051 53 45                   		and	r4, r5
 137 0053 CF 54                   		mov.B	r5, r4
 138                             		.loc 1 107 7
 139 0055 CD A5 01                		mov.B	1[r10], r5
 140 0058 57 45                   		or	r4, r5
 141 005a C7 A5 01                		mov.B	r5, 1[r10]
 108:../src/wolfcrypt/src/coding.c **** 
 109:../src/wolfcrypt/src/coding.c ****     return v;
 142                             		.loc 1 109 12
 143 005d CD A5 01                		mov.B	1[r10], r5
 144 0060 5B 55                   		movu.B	r5, r5
 110:../src/wolfcrypt/src/coding.c **** #else
 111:../src/wolfcrypt/src/coding.c ****     return base64Decode[c - BASE64_MIN];
 112:../src/wolfcrypt/src/coding.c **** #endif
 113:../src/wolfcrypt/src/coding.c **** }
 145                             		.loc 1 113 1
 146 0062 EF 51                   		mov.L	r5, r1
 147 0064 3F AA 03                		rtsd	#12, r10-r10
 148                             	.LFE43:
 150                             		.section C,"a",@progbits
 151                             		.p2align 2
 152                             	.LC0:
 153 0000 42 61 64 20 65 6E 64 20 		.string	"Bad end of line in Base64 Decode"
 153      6F 66 20 6C 69 6E 65 20 
 153      69 6E 20 42 61 73 65 36 
 153      34 20 44 65 63 6F 64 65 
 153      00 
 154                             		.section	.text.Base64_SkipNewline,"ax",@progbits
 155                             		.global	_Base64_SkipNewline
 157                             	_Base64_SkipNewline:
 158                             	.LFB44:
 114:../src/wolfcrypt/src/coding.c **** #endif
 115:../src/wolfcrypt/src/coding.c **** 
 116:../src/wolfcrypt/src/coding.c **** int Base64_SkipNewline(const byte* in, word32 *inLen,
 117:../src/wolfcrypt/src/coding.c ****   word32 *outJ)
 118:../src/wolfcrypt/src/coding.c **** {
 159                             		.loc 1 118 1
 160 0000 7E AA                   		push.l	r10
 161                             	.LCFI2:
 162 0002 71 0A E8                		add	#-24, r0, r10
 163                             	.LCFI3:
 164 0005 EF A0                   		mov.L	r10, r0
 165 0007 E7 A1 03                		mov.L	r1, 12[r10]
 166 000a E7 A2 04                		mov.L	r2, 16[r10]
 167 000d E7 A3 05                		mov.L	r3, 20[r10]
 119:../src/wolfcrypt/src/coding.c ****     word32 len = *inLen;
 168                             		.loc 1 119 12
 169 0010 ED A5 04                		mov.L	16[r10], r5
 170 0013 EC 55                   		mov.L	[r5], r5
 171 0015 E3 A5                   		mov.L	r5, [r10]
 120:../src/wolfcrypt/src/coding.c ****     word32 j = *outJ;
 172                             		.loc 1 120 12
 173 0017 ED A5 05                		mov.L	20[r10], r5
 174 001a EC 55                   		mov.L	[r5], r5
 175 001c E7 A5 01                		mov.L	r5, 4[r10]
 121:../src/wolfcrypt/src/coding.c ****     byte curChar;
 122:../src/wolfcrypt/src/coding.c **** 
 123:../src/wolfcrypt/src/coding.c ****     if (len == 0) {
 176                             		.loc 1 123 8
 177 001f EC A5                   		mov.L	[r10], r5
 178 0021 61 05                   		cmp	#0, r5
 179 0023 18                      		bne	.L4
 124:../src/wolfcrypt/src/coding.c ****         return BUFFER_E;
 180                             		.loc 1 124 16
 181 0024 FB 5A 7C FF             		mov.L	#-132, r5
 182 0028 38 F6 00                		bra	.L5
 183                             	.L4:
 125:../src/wolfcrypt/src/coding.c ****     }
 126:../src/wolfcrypt/src/coding.c ****     curChar = in[j];
 184                             		.loc 1 126 17
 185 002b ED A5 03                		mov.L	12[r10], r5
 186 002e 06 89 A5 01             		add	4[r10].L, r5
 187                             		.loc 1 126 13
 188 0032 CC 55                   		mov.B	[r5], r5
 189 0034 C7 A5 08                		mov.B	r5, 8[r10]
 127:../src/wolfcrypt/src/coding.c **** 
 128:../src/wolfcrypt/src/coding.c ****     while (len > 1 && curChar == ' ') {
 190                             		.loc 1 128 11
 191 0037 2E 1C                   		bra	.L6
 192                             	.L8:
 129:../src/wolfcrypt/src/coding.c ****         /* skip whitespace in the middle or end of line */
 130:../src/wolfcrypt/src/coding.c ****         curChar = in[++j];
 193                             		.loc 1 130 17
 194 0039 ED A5 01                		mov.L	4[r10], r5
 195 003c 62 15                   		add	#1, r5
 196 003e E7 A5 01                		mov.L	r5, 4[r10]
 197                             		.loc 1 130 21
 198 0041 ED A5 03                		mov.L	12[r10], r5
 199 0044 06 89 A5 01             		add	4[r10].L, r5
 200                             		.loc 1 130 17
 201 0048 CC 55                   		mov.B	[r5], r5
 202 004a C7 A5 08                		mov.B	r5, 8[r10]
 131:../src/wolfcrypt/src/coding.c ****         len--;
 203                             		.loc 1 131 12
 204 004d EC A5                   		mov.L	[r10], r5
 205 004f 60 15                   		sub	#1, r5
 206 0051 E3 A5                   		mov.L	r5, [r10]
 207                             	.L6:
 128:../src/wolfcrypt/src/coding.c ****         /* skip whitespace in the middle or end of line */
 208                             		.loc 1 128 11
 209 0053 EC A5                   		mov.L	[r10], r5
 210 0055 61 15                   		cmp	#1, r5
 211 0057 25 0A                   		bleu	.L7
 128:../src/wolfcrypt/src/coding.c ****         /* skip whitespace in the middle or end of line */
 212                             		.loc 1 128 20 discriminator 1
 213 0059 59 A5 08                		movu.B	8[r10], r5
 214 005c 75 55 20                		cmp	#32, r5
 215 005f 20 DA                   		beq	.L8
 216                             	.L7:
 132:../src/wolfcrypt/src/coding.c ****     }
 133:../src/wolfcrypt/src/coding.c ****     if (len && (curChar == '\r' || curChar == '\n')) {
 217                             		.loc 1 133 8
 218 0061 EC A5                   		mov.L	[r10], r5
 219 0063 61 05                   		cmp	#0, r5
 220 0065 3A 90 00                		beq	.L13
 221                             		.loc 1 133 13 discriminator 1
 222 0068 59 A5 08                		movu.B	8[r10], r5
 223 006b 61 D5                   		cmp	#13, r5
 224 006d 11                      		beq	.L10
 225                             		.loc 1 133 33 discriminator 2
 226 006e 59 A5 08                		movu.B	8[r10], r5
 227 0071 61 A5                   		cmp	#10, r5
 228 0073 3B 82 00                		bne	.L13
 229                             	.L10:
 134:../src/wolfcrypt/src/coding.c ****         j++;
 230                             		.loc 1 134 10
 231 0076 ED A5 01                		mov.L	4[r10], r5
 232 0079 62 15                   		add	#1, r5
 233 007b E7 A5 01                		mov.L	r5, 4[r10]
 135:../src/wolfcrypt/src/coding.c ****         len--;
 234                             		.loc 1 135 12
 235 007e EC A5                   		mov.L	[r10], r5
 236 0080 60 15                   		sub	#1, r5
 237 0082 E3 A5                   		mov.L	r5, [r10]
 136:../src/wolfcrypt/src/coding.c ****         if (curChar == '\r') {
 238                             		.loc 1 136 12
 239 0084 59 A5 08                		movu.B	8[r10], r5
 240 0087 61 D5                   		cmp	#13, r5
 241 0089 21 21                   		bne	.L11
 137:../src/wolfcrypt/src/coding.c ****             if (len) {
 242                             		.loc 1 137 16
 243 008b EC A5                   		mov.L	[r10], r5
 244 008d 61 05                   		cmp	#0, r5
 245 008f 20 1B                   		beq	.L11
 138:../src/wolfcrypt/src/coding.c ****                 curChar = in[j++];
 246                             		.loc 1 138 31
 247 0091 ED A5 01                		mov.L	4[r10], r5
 248 0094 71 54 01                		add	#1, r5, r4
 249 0097 E7 A4 01                		mov.L	r4, 4[r10]
 250                             		.loc 1 138 29
 251 009a ED A4 03                		mov.L	12[r10], r4
 252 009d 4B 45                   		add	r4, r5
 253                             		.loc 1 138 25
 254 009f CC 55                   		mov.B	[r5], r5
 255 00a1 C7 A5 08                		mov.B	r5, 8[r10]
 139:../src/wolfcrypt/src/coding.c ****                 len--;
 256                             		.loc 1 139 20
 257 00a4 EC A5                   		mov.L	[r10], r5
 258 00a6 60 15                   		sub	#1, r5
 259 00a8 E3 A5                   		mov.L	r5, [r10]
 260                             	.L11:
 140:../src/wolfcrypt/src/coding.c ****             }
 141:../src/wolfcrypt/src/coding.c ****         }
 142:../src/wolfcrypt/src/coding.c ****         if (curChar != '\n') {
 261                             		.loc 1 142 12
 262 00aa 59 A5 08                		movu.B	8[r10], r5
 263 00ad 61 A5                   		cmp	#10, r5
 264 00af 20 12                   		beq	.L12
 143:../src/wolfcrypt/src/coding.c ****             WOLFSSL_MSG("Bad end of line in Base64 Decode");
 265                             		.loc 1 143 13
 266 00b1 FB 12 00 00 00 00       		mov.L	#.LC0, r1
 267 00b7 05 00 00 00             		bsr	_WOLFSSL_MSG
 144:../src/wolfcrypt/src/coding.c ****             return ASN_INPUT_E;
 268                             		.loc 1 144 20
 269 00bb FB 5A 66 FF             		mov.L	#-154, r5
 270 00bf 2E 5F                   		bra	.L5
 271                             	.L12:
 145:../src/wolfcrypt/src/coding.c ****         }
 146:../src/wolfcrypt/src/coding.c **** 
 147:../src/wolfcrypt/src/coding.c ****         if (len) {
 272                             		.loc 1 147 12
 273 00c1 EC A5                   		mov.L	[r10], r5
 274 00c3 61 05                   		cmp	#0, r5
 275 00c5 20 30                   		beq	.L13
 148:../src/wolfcrypt/src/coding.c ****             curChar = in[j];
 276                             		.loc 1 148 25
 277 00c7 ED A5 03                		mov.L	12[r10], r5
 278 00ca 06 89 A5 01             		add	4[r10].L, r5
 279                             		.loc 1 148 21
 280 00ce CC 55                   		mov.B	[r5], r5
 281 00d0 C7 A5 08                		mov.B	r5, 8[r10]
 149:../src/wolfcrypt/src/coding.c ****         }
 150:../src/wolfcrypt/src/coding.c ****     }
 151:../src/wolfcrypt/src/coding.c ****     while (len && curChar == ' ') {
 282                             		.loc 1 151 11
 283 00d3 2E 22                   		bra	.L13
 284                             	.L15:
 152:../src/wolfcrypt/src/coding.c ****         if (--len > 0) {
 285                             		.loc 1 152 12
 286 00d5 EC A5                   		mov.L	[r10], r5
 287 00d7 60 15                   		sub	#1, r5
 288 00d9 E3 A5                   		mov.L	r5, [r10]
 289 00db EC A5                   		mov.L	[r10], r5
 290 00dd 61 05                   		cmp	#0, r5
 291 00df 20 16                   		beq	.L13
 153:../src/wolfcrypt/src/coding.c ****             curChar = in[++j];
 292                             		.loc 1 153 21
 293 00e1 ED A5 01                		mov.L	4[r10], r5
 294 00e4 62 15                   		add	#1, r5
 295 00e6 E7 A5 01                		mov.L	r5, 4[r10]
 296                             		.loc 1 153 25
 297 00e9 ED A5 03                		mov.L	12[r10], r5
 298 00ec 06 89 A5 01             		add	4[r10].L, r5
 299                             		.loc 1 153 21
 300 00f0 CC 55                   		mov.B	[r5], r5
 301 00f2 C7 A5 08                		mov.B	r5, 8[r10]
 302                             		.balign 8,3,1
 303                             	.L13:
 151:../src/wolfcrypt/src/coding.c ****         if (--len > 0) {
 304                             		.loc 1 151 11
 305 00f5 EC A5                   		mov.L	[r10], r5
 306 00f7 61 05                   		cmp	#0, r5
 307 00f9 11                      		beq	.L14
 151:../src/wolfcrypt/src/coding.c ****         if (--len > 0) {
 308                             		.loc 1 151 16 discriminator 1
 309 00fa 59 A5 08                		movu.B	8[r10], r5
 310 00fd 75 55 20                		cmp	#32, r5
 311 0100 20 D5                   		beq	.L15
 312                             	.L14:
 154:../src/wolfcrypt/src/coding.c ****         }
 155:../src/wolfcrypt/src/coding.c ****     }
 156:../src/wolfcrypt/src/coding.c ****     if (!len) {
 313                             		.loc 1 156 8
 314 0102 EC A5                   		mov.L	[r10], r5
 315 0104 61 05                   		cmp	#0, r5
 316 0106 1F                      		bne	.L16
 157:../src/wolfcrypt/src/coding.c ****         return BUFFER_E;
 317                             		.loc 1 157 16
 318 0107 FB 5A 7C FF             		mov.L	#-132, r5
 319 010b 2E 13                   		bra	.L5
 320                             	.L16:
 158:../src/wolfcrypt/src/coding.c ****     }
 159:../src/wolfcrypt/src/coding.c ****     *inLen = len;
 321                             		.loc 1 159 12
 322 010d ED A5 04                		mov.L	16[r10], r5
 323 0110 EC A4                   		mov.L	[r10], r4
 324 0112 E3 54                   		mov.L	r4, [r5]
 160:../src/wolfcrypt/src/coding.c ****     *outJ = j;
 325                             		.loc 1 160 11
 326 0114 ED A5 05                		mov.L	20[r10], r5
 327 0117 ED A4 01                		mov.L	4[r10], r4
 328 011a E3 54                   		mov.L	r4, [r5]
 161:../src/wolfcrypt/src/coding.c ****     return 0;
 329                             		.loc 1 161 12
 330 011c 66 05                   		mov.L	#0, r5
 331                             		.balign 8,3,1
 332                             	.L5:
 162:../src/wolfcrypt/src/coding.c **** }
 333                             		.loc 1 162 1
 334 011e EF 51                   		mov.L	r5, r1
 335 0120 3F AA 07                		rtsd	#28, r10-r10
 336                             	.LFE44:
 338 0123 77 10 01 00 00          		.section C,"a",@progbits
 339 0021 00 00 00                		.p2align 2
 340                             	.LC1:
 341 0024 42 61 64 20 42 61 73 65 		.string	"Bad Base64 Decode data, too small"
 341      36 34 20 44 65 63 6F 64 
 341      65 20 64 61 74 61 2C 20 
 341      74 6F 6F 20 73 6D 61 6C 
 341      6C 00 
 342                             	.LC2:
 343 0046 42 61 64 20 42 61 73 65 		.string	"Bad Base64 Decode data, too big"
 343      36 34 20 44 65 63 6F 64 
 343      65 20 64 61 74 61 2C 20 
 343      74 6F 6F 20 62 69 67 00 
 344                             	.LC3:
 345 0066 42 61 64 20 42 61 73 65 		.string	"Bad Base64 Decode out buffer, too small"
 345      36 34 20 44 65 63 6F 64 
 345      65 20 6F 75 74 20 62 75 
 345      66 66 65 72 2C 20 74 6F 
 345      6F 20 73 6D 61 6C 6C 00 
 346                             	.LC4:
 347 008e 42 61 64 20 42 61 73 65 		.string	"Bad Base64 Decode bad character"
 347      36 34 20 44 65 63 6F 64 
 347      65 20 62 61 64 20 63 68 
 347      61 72 61 63 74 65 72 00 
 348                             		.section	.text.Base64_Decode,"ax",@progbits
 349                             		.global	_Base64_Decode
 351                             	_Base64_Decode:
 352                             	.LFB45:
 163:../src/wolfcrypt/src/coding.c **** 
 164:../src/wolfcrypt/src/coding.c **** int Base64_Decode(const byte* in, word32 inLen, byte* out, word32* outLen)
 165:../src/wolfcrypt/src/coding.c **** {
 353                             		.loc 1 165 1
 354 0000 7E AA                   		push.l	r10
 355                             	.LCFI4:
 356 0002 71 0A CC                		add	#-52, r0, r10
 357                             	.LCFI5:
 358 0005 EF A0                   		mov.L	r10, r0
 359 0007 E7 A1 09                		mov.L	r1, 36[r10]
 360 000a E7 A2 0A                		mov.L	r2, 40[r10]
 361 000d E7 A3 0B                		mov.L	r3, 44[r10]
 362 0010 E7 A4 0C                		mov.L	r4, 48[r10]
 166:../src/wolfcrypt/src/coding.c ****     word32 i = 0;
 363                             		.loc 1 166 12
 364 0013 F8 A6 00                		mov.L	#0, [r10]
 167:../src/wolfcrypt/src/coding.c ****     word32 j = 0;
 365                             		.loc 1 167 12
 366 0016 F9 A6 08 00             		mov.L	#0, 32[r10]
 168:../src/wolfcrypt/src/coding.c ****     word32 plainSz = inLen - ((inLen + (BASE64_LINE_SZ - 1)) / BASE64_LINE_SZ );
 367                             		.loc 1 168 28
 368 001a ED A4 0A                		mov.L	40[r10], r4
 369                             		.loc 1 168 38
 370 001d ED A5 0A                		mov.L	40[r10], r5
 371 0020 71 55 3F                		add	#63, r5
 372                             		.loc 1 168 62
 373 0023 68 65                   		shlr	#6, r5
 374                             		.loc 1 168 12
 375 0025 FF 05 54                		sub	r5, r4, r5
 376 0028 E7 A5 03                		mov.L	r5, 12[r10]
 169:../src/wolfcrypt/src/coding.c ****     int ret;
 170:../src/wolfcrypt/src/coding.c **** #ifndef BASE64_NO_TABLE
 171:../src/wolfcrypt/src/coding.c ****     const byte maxIdx = BASE64DECODE_SZ + BASE64_MIN - 1;
 377                             		.loc 1 171 16
 378 002b F9 A4 10 7A             		mov.B	#0x7a, 16[r10]
 172:../src/wolfcrypt/src/coding.c **** #endif
 173:../src/wolfcrypt/src/coding.c **** 
 174:../src/wolfcrypt/src/coding.c ****     plainSz = (plainSz * 3 + 3) / 4;
 379                             		.loc 1 174 28
 380 002f ED A5 03                		mov.L	12[r10], r5
 381 0032 62 15                   		add	#1, r5
 382 0034 63 35                   		mul	#3, r5
 383                             		.loc 1 174 13
 384 0036 68 25                   		shlr	#2, r5
 385 0038 E7 A5 03                		mov.L	r5, 12[r10]
 175:../src/wolfcrypt/src/coding.c ****     if (plainSz > *outLen) return BAD_FUNC_ARG;
 386                             		.loc 1 175 19
 387 003b ED A5 0C                		mov.L	48[r10], r5
 388 003e EC 55                   		mov.L	[r5], r5
 389                             		.loc 1 175 8
 390 0040 ED A4 03                		mov.L	12[r10], r4
 391 0043 47 54                   		cmp	r5, r4
 392 0045 24 05 38 CC 02          		bleu	.L20
 393                             		.loc 1 175 35 discriminator 1
 394 004a FB 5A 53 FF             		mov.L	#-173, r5
 395 004e 38 FA 02                		bra	.L46
 396                             	.L44:
 397                             	.LBB2:
 176:../src/wolfcrypt/src/coding.c **** 
 177:../src/wolfcrypt/src/coding.c ****     while (inLen > 3) {
 178:../src/wolfcrypt/src/coding.c ****         int pad3 = 0;
 398                             		.loc 1 178 13
 399 0051 F9 A6 01 00             		mov.L	#0, 4[r10]
 179:../src/wolfcrypt/src/coding.c ****         int pad4 = 0;
 400                             		.loc 1 179 13
 401 0055 F9 A6 02 00             		mov.L	#0, 8[r10]
 180:../src/wolfcrypt/src/coding.c ****         byte b1, b2, b3;
 181:../src/wolfcrypt/src/coding.c ****         byte e1, e2, e3, e4;
 182:../src/wolfcrypt/src/coding.c **** 
 183:../src/wolfcrypt/src/coding.c ****         if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 402                             		.loc 1 183 20
 403 0059 71 A4 20                		add	#32, r10, r4
 404 005c 71 A5 28                		add	#40, r10, r5
 405 005f EF 43                   		mov.L	r4, r3
 406 0061 EF 52                   		mov.L	r5, r2
 407 0063 ED A1 09                		mov.L	36[r10], r1
 408 0066 05 00 00 00             		bsr	_Base64_SkipNewline
 409 006a E7 A1 05                		mov.L	r1, 20[r10]
 410                             		.loc 1 183 12
 411 006d ED A5 05                		mov.L	20[r10], r5
 412 0070 61 05                   		cmp	#0, r5
 413 0072 20 12                   		beq	.L21
 184:../src/wolfcrypt/src/coding.c ****             if (ret == BUFFER_E) {
 414                             		.loc 1 184 16
 415 0074 ED A5 05                		mov.L	20[r10], r5
 416 0077 76 05 7C FF             		cmp	#-132, r5
 417 007b 3A A3 02                		beq	.L47
 185:../src/wolfcrypt/src/coding.c ****                 /* Running out of buffer here is not an error */
 186:../src/wolfcrypt/src/coding.c ****                 break;
 187:../src/wolfcrypt/src/coding.c ****             }
 188:../src/wolfcrypt/src/coding.c ****             return ret;
 418                             		.loc 1 188 20
 419 007e ED A5 05                		mov.L	20[r10], r5
 420 0081 38 C7 02                		bra	.L46
 421                             	.L21:
 189:../src/wolfcrypt/src/coding.c ****         }
 190:../src/wolfcrypt/src/coding.c ****         e1 = in[j++];
 422                             		.loc 1 190 18
 423 0084 ED A5 08                		mov.L	32[r10], r5
 424 0087 71 54 01                		add	#1, r5, r4
 425 008a E7 A4 08                		mov.L	r4, 32[r10]
 426                             		.loc 1 190 16
 427 008d ED A4 09                		mov.L	36[r10], r4
 428 0090 4B 45                   		add	r4, r5
 429                             		.loc 1 190 12
 430 0092 CC 55                   		mov.B	[r5], r5
 431 0094 C7 A5 18                		mov.B	r5, 24[r10]
 191:../src/wolfcrypt/src/coding.c ****         if (e1 == '\0') {
 432                             		.loc 1 191 12
 433 0097 59 A5 18                		movu.B	24[r10], r5
 434 009a 61 05                   		cmp	#0, r5
 435 009c 3A 84 02                		beq	.L48
 192:../src/wolfcrypt/src/coding.c ****             break;
 193:../src/wolfcrypt/src/coding.c ****         }
 194:../src/wolfcrypt/src/coding.c ****         inLen--;
 436                             		.loc 1 194 14
 437 009f ED A5 0A                		mov.L	40[r10], r5
 438 00a2 60 15                   		sub	#1, r5
 439 00a4 E7 A5 0A                		mov.L	r5, 40[r10]
 195:../src/wolfcrypt/src/coding.c ****         if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 440                             		.loc 1 195 20
 441 00a7 71 A4 20                		add	#32, r10, r4
 442 00aa 71 A5 28                		add	#40, r10, r5
 443 00ad EF 43                   		mov.L	r4, r3
 444 00af EF 52                   		mov.L	r5, r2
 445 00b1 ED A1 09                		mov.L	36[r10], r1
 446 00b4 05 00 00 00             		bsr	_Base64_SkipNewline
 447 00b8 E7 A1 05                		mov.L	r1, 20[r10]
 448                             		.loc 1 195 12
 449 00bb ED A5 05                		mov.L	20[r10], r5
 450 00be 61 05                   		cmp	#0, r5
 451 00c0 17                      		beq	.L25
 196:../src/wolfcrypt/src/coding.c ****             return ret;
 452                             		.loc 1 196 20
 453 00c1 ED A5 05                		mov.L	20[r10], r5
 454 00c4 38 84 02                		bra	.L46
 455                             	.L25:
 197:../src/wolfcrypt/src/coding.c ****         }
 198:../src/wolfcrypt/src/coding.c ****         e2 = in[j++];
 456                             		.loc 1 198 18
 457 00c7 ED A5 08                		mov.L	32[r10], r5
 458 00ca 71 54 01                		add	#1, r5, r4
 459 00cd E7 A4 08                		mov.L	r4, 32[r10]
 460                             		.loc 1 198 16
 461 00d0 ED A4 09                		mov.L	36[r10], r4
 462 00d3 4B 45                   		add	r4, r5
 463                             		.loc 1 198 12
 464 00d5 CC 55                   		mov.B	[r5], r5
 465 00d7 C7 A5 19                		mov.B	r5, 25[r10]
 199:../src/wolfcrypt/src/coding.c ****         inLen--;
 466                             		.loc 1 199 14
 467 00da ED A5 0A                		mov.L	40[r10], r5
 468 00dd 60 15                   		sub	#1, r5
 469 00df E7 A5 0A                		mov.L	r5, 40[r10]
 200:../src/wolfcrypt/src/coding.c ****         if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 470                             		.loc 1 200 20
 471 00e2 71 A4 20                		add	#32, r10, r4
 472 00e5 71 A5 28                		add	#40, r10, r5
 473 00e8 EF 43                   		mov.L	r4, r3
 474 00ea EF 52                   		mov.L	r5, r2
 475 00ec ED A1 09                		mov.L	36[r10], r1
 476 00ef 05 00 00 00             		bsr	_Base64_SkipNewline
 477 00f3 E7 A1 05                		mov.L	r1, 20[r10]
 478                             		.loc 1 200 12
 479 00f6 ED A5 05                		mov.L	20[r10], r5
 480 00f9 61 05                   		cmp	#0, r5
 481 00fb 17                      		beq	.L26
 201:../src/wolfcrypt/src/coding.c ****             return ret;
 482                             		.loc 1 201 20
 483 00fc ED A5 05                		mov.L	20[r10], r5
 484 00ff 38 49 02                		bra	.L46
 485                             	.L26:
 202:../src/wolfcrypt/src/coding.c ****         }
 203:../src/wolfcrypt/src/coding.c ****         e3 = in[j++];
 486                             		.loc 1 203 18
 487 0102 ED A5 08                		mov.L	32[r10], r5
 488 0105 71 54 01                		add	#1, r5, r4
 489 0108 E7 A4 08                		mov.L	r4, 32[r10]
 490                             		.loc 1 203 16
 491 010b ED A4 09                		mov.L	36[r10], r4
 492 010e 4B 45                   		add	r4, r5
 493                             		.loc 1 203 12
 494 0110 CC 55                   		mov.B	[r5], r5
 495 0112 C7 A5 1A                		mov.B	r5, 26[r10]
 204:../src/wolfcrypt/src/coding.c ****         inLen--;
 496                             		.loc 1 204 14
 497 0115 ED A5 0A                		mov.L	40[r10], r5
 498 0118 60 15                   		sub	#1, r5
 499 011a E7 A5 0A                		mov.L	r5, 40[r10]
 205:../src/wolfcrypt/src/coding.c ****         if ((ret = Base64_SkipNewline(in, &inLen, &j)) != 0) {
 500                             		.loc 1 205 20
 501 011d 71 A4 20                		add	#32, r10, r4
 502 0120 71 A5 28                		add	#40, r10, r5
 503 0123 EF 43                   		mov.L	r4, r3
 504 0125 EF 52                   		mov.L	r5, r2
 505 0127 ED A1 09                		mov.L	36[r10], r1
 506 012a 05 00 00 00             		bsr	_Base64_SkipNewline
 507 012e E7 A1 05                		mov.L	r1, 20[r10]
 508                             		.loc 1 205 12
 509 0131 ED A5 05                		mov.L	20[r10], r5
 510 0134 61 05                   		cmp	#0, r5
 511 0136 17                      		beq	.L27
 206:../src/wolfcrypt/src/coding.c ****             return ret;
 512                             		.loc 1 206 20
 513 0137 ED A5 05                		mov.L	20[r10], r5
 514 013a 38 0E 02                		bra	.L46
 515                             	.L27:
 207:../src/wolfcrypt/src/coding.c ****         }
 208:../src/wolfcrypt/src/coding.c ****         e4 = in[j++];
 516                             		.loc 1 208 18
 517 013d ED A5 08                		mov.L	32[r10], r5
 518 0140 71 54 01                		add	#1, r5, r4
 519 0143 E7 A4 08                		mov.L	r4, 32[r10]
 520                             		.loc 1 208 16
 521 0146 ED A4 09                		mov.L	36[r10], r4
 522 0149 4B 45                   		add	r4, r5
 523                             		.loc 1 208 12
 524 014b CC 55                   		mov.B	[r5], r5
 525 014d C7 A5 1B                		mov.B	r5, 27[r10]
 209:../src/wolfcrypt/src/coding.c ****         inLen--;
 526                             		.loc 1 209 14
 527 0150 ED A5 0A                		mov.L	40[r10], r5
 528 0153 60 15                   		sub	#1, r5
 529 0155 E7 A5 0A                		mov.L	r5, 40[r10]
 210:../src/wolfcrypt/src/coding.c **** 
 211:../src/wolfcrypt/src/coding.c ****         if (e3 == PAD)
 530                             		.loc 1 211 12
 531 0158 59 A5 1A                		movu.B	26[r10], r5
 532 015b 75 55 3D                		cmp	#61, r5
 533 015e 1D                      		bne	.L28
 212:../src/wolfcrypt/src/coding.c ****             pad3 = 1;
 534                             		.loc 1 212 18
 535 015f F9 A6 01 01             		mov.L	#1, 4[r10]
 536                             	.L28:
 213:../src/wolfcrypt/src/coding.c ****         if (e4 == PAD)
 537                             		.loc 1 213 12
 538 0163 59 A5 1B                		movu.B	27[r10], r5
 539 0166 75 55 3D                		cmp	#61, r5
 540 0169 1D                      		bne	.L29
 214:../src/wolfcrypt/src/coding.c ****             pad4 = 1;
 541                             		.loc 1 214 18
 542 016a F9 A6 02 01             		mov.L	#1, 8[r10]
 543                             	.L29:
 215:../src/wolfcrypt/src/coding.c **** 
 216:../src/wolfcrypt/src/coding.c ****         if (pad3 && !pad4)
 544                             		.loc 1 216 12
 545 016e ED A5 01                		mov.L	4[r10], r5
 546 0171 61 05                   		cmp	#0, r5
 547 0173 20 0F                   		beq	.L30
 548                             		.loc 1 216 18 discriminator 1
 549 0175 ED A5 02                		mov.L	8[r10], r5
 550 0178 61 05                   		cmp	#0, r5
 551 017a 18                      		bne	.L30
 217:../src/wolfcrypt/src/coding.c ****             return ASN_INPUT_E;
 552                             		.loc 1 217 20
 553 017b FB 5A 66 FF             		mov.L	#-154, r5
 554 017f 38 C9 01                		bra	.L46
 555                             	.L30:
 218:../src/wolfcrypt/src/coding.c **** 
 219:../src/wolfcrypt/src/coding.c **** #ifndef BASE64_NO_TABLE
 220:../src/wolfcrypt/src/coding.c ****         if (e1 < BASE64_MIN || e2 < BASE64_MIN || e3 < BASE64_MIN ||
 556                             		.loc 1 220 12
 557 0182 59 A5 18                		movu.B	24[r10], r5
 558 0185 75 55 2A                		cmp	#42, r5
 559 0188 25 1A                   		bleu	.L31
 560                             		.loc 1 220 29 discriminator 1
 561 018a 59 A5 19                		movu.B	25[r10], r5
 562 018d 75 55 2A                		cmp	#42, r5
 563 0190 25 12                   		bleu	.L31
 564                             		.loc 1 220 48 discriminator 2
 565 0192 59 A5 1A                		movu.B	26[r10], r5
 566 0195 75 55 2A                		cmp	#42, r5
 567 0198 25 0A                   		bleu	.L31
 568                             		.loc 1 220 67 discriminator 3
 569 019a 59 A5 1B                		movu.B	27[r10], r5
 570 019d 75 55 2A                		cmp	#42, r5
 571 01a0 24 13                   		bgtu	.L32
 572                             		.balign 8,3,5
 573                             	.L31:
 221:../src/wolfcrypt/src/coding.c ****                                                               e4 < BASE64_MIN) {
 222:../src/wolfcrypt/src/coding.c ****             WOLFSSL_MSG("Bad Base64 Decode data, too small");
 574                             		.loc 1 222 13
 575 01a2 FB 12 24 00 00 00       		mov.L	#.LC1, r1
 576 01a8 05 00 00 00             		bsr	_WOLFSSL_MSG
 223:../src/wolfcrypt/src/coding.c ****             return ASN_INPUT_E;
 577                             		.loc 1 223 20
 578 01ac FB 5A 66 FF             		mov.L	#-154, r5
 579 01b0 38 98 01                		bra	.L46
 580                             	.L32:
 224:../src/wolfcrypt/src/coding.c ****         }
 225:../src/wolfcrypt/src/coding.c **** 
 226:../src/wolfcrypt/src/coding.c ****         if (e1 > maxIdx || e2 > maxIdx || e3 > maxIdx || e4 > maxIdx) {
 581                             		.loc 1 226 12
 582 01b3 59 A4 18                		movu.B	24[r10], r4
 583 01b6 59 A5 10                		movu.B	16[r10], r5
 584 01b9 47 54                   		cmp	r5, r4
 585 01bb 24 25                   		bgtu	.L33
 586                             		.loc 1 226 25 discriminator 1
 587 01bd 59 A4 19                		movu.B	25[r10], r4
 588 01c0 59 A5 10                		movu.B	16[r10], r5
 589 01c3 47 54                   		cmp	r5, r4
 590 01c5 24 1B                   		bgtu	.L33
 591                             		.loc 1 226 40 discriminator 2
 592 01c7 59 A4 1A                		movu.B	26[r10], r4
 593 01ca 59 A5 10                		movu.B	16[r10], r5
 594 01cd 47 54                   		cmp	r5, r4
 595 01cf 24 11                   		bgtu	.L33
 596                             		.loc 1 226 55 discriminator 3
 597 01d1 59 A4 1B                		movu.B	27[r10], r4
 598 01d4 59 A5 10                		movu.B	16[r10], r5
 599 01d7 47 54                   		cmp	r5, r4
 600 01d9 25 18                   		bleu	.L34
 601 01db 77 10 01 00 00          		.balign 8,3,5
 602                             	.L33:
 227:../src/wolfcrypt/src/coding.c ****             WOLFSSL_MSG("Bad Base64 Decode data, too big");
 603                             		.loc 1 227 13
 604 01e0 FB 12 46 00 00 00       		mov.L	#.LC2, r1
 605 01e6 05 00 00 00             		bsr	_WOLFSSL_MSG
 228:../src/wolfcrypt/src/coding.c ****             return ASN_INPUT_E;
 606                             		.loc 1 228 20
 607 01ea FB 5A 66 FF             		mov.L	#-154, r5
 608 01ee 38 5A 01                		bra	.L46
 609                             	.L34:
 229:../src/wolfcrypt/src/coding.c ****         }
 230:../src/wolfcrypt/src/coding.c **** #endif
 231:../src/wolfcrypt/src/coding.c **** 
 232:../src/wolfcrypt/src/coding.c ****         if (i + 1 + !pad3 + !pad4 > *outLen) {
 610                             		.loc 1 232 21
 611 01f1 ED A5 01                		mov.L	4[r10], r5
 612 01f4 61 05                   		cmp	#0, r5
 613 01f6 FC DB 50                		sceq.L	r5
 614 01f9 5B 55                   		movu.B	r5, r5
 615                             		.loc 1 232 19
 616 01fb EF 54                   		mov.L	r5, r4
 617 01fd 06 88 A4                		add	[r10].L, r4
 618                             		.loc 1 232 29
 619 0200 ED A5 02                		mov.L	8[r10], r5
 620 0203 61 05                   		cmp	#0, r5
 621 0205 FC DB 50                		sceq.L	r5
 622 0208 5B 55                   		movu.B	r5, r5
 623                             		.loc 1 232 27
 624 020a 4B 45                   		add	r4, r5
 625 020c 62 15                   		add	#1, r5
 626                             		.loc 1 232 37
 627 020e ED A4 0C                		mov.L	48[r10], r4
 628 0211 EC 44                   		mov.L	[r4], r4
 629                             		.loc 1 232 12
 630 0213 47 45                   		cmp	r4, r5
 631 0215 25 13                   		bleu	.L35
 233:../src/wolfcrypt/src/coding.c ****             WOLFSSL_MSG("Bad Base64 Decode out buffer, too small");
 632                             		.loc 1 233 13
 633 0217 FB 12 66 00 00 00       		mov.L	#.LC3, r1
 634 021d 05 00 00 00             		bsr	_WOLFSSL_MSG
 234:../src/wolfcrypt/src/coding.c ****             return BAD_FUNC_ARG;
 635                             		.loc 1 234 20
 636 0221 FB 5A 53 FF             		mov.L	#-173, r5
 637 0225 38 23 01                		bra	.L46
 638                             	.L35:
 235:../src/wolfcrypt/src/coding.c ****         }
 236:../src/wolfcrypt/src/coding.c **** 
 237:../src/wolfcrypt/src/coding.c ****         e1 = Base64_Char2Val(e1);
 639                             		.loc 1 237 14
 640 0228 CD A1 18                		mov.B	24[r10], r1
 641 022b 05 00 00 00             		bsr	_Base64_Char2Val
 642 022f EF 15                   		mov.L	r1, r5
 643 0231 C7 A5 18                		mov.B	r5, 24[r10]
 238:../src/wolfcrypt/src/coding.c ****         e2 = Base64_Char2Val(e2);
 644                             		.loc 1 238 14
 645 0234 CD A1 19                		mov.B	25[r10], r1
 646 0237 05 00 00 00             		bsr	_Base64_Char2Val
 647 023b EF 15                   		mov.L	r1, r5
 648 023d C7 A5 19                		mov.B	r5, 25[r10]
 239:../src/wolfcrypt/src/coding.c ****         e3 = (e3 == PAD) ? 0 : Base64_Char2Val(e3);
 649                             		.loc 1 239 12
 650 0240 59 A5 1A                		movu.B	26[r10], r5
 651 0243 75 55 3D                		cmp	#61, r5
 652 0246 20 0C                   		beq	.L36
 653                             		.loc 1 239 32 discriminator 1
 654 0248 CD A1 1A                		mov.B	26[r10], r1
 655 024b 05 00 00 00             		bsr	_Base64_Char2Val
 656 024f EF 15                   		mov.L	r1, r5
 657 0251 0B                      		bra	.L37
 658                             	.L36:
 659                             		.loc 1 239 12 discriminator 2
 660 0252 66 05                   		mov	#0, r5
 661                             	.L37:
 662                             		.loc 1 239 12 is_stmt 0 discriminator 4
 663 0254 C7 A5 1A                		mov.B	r5, 26[r10]
 240:../src/wolfcrypt/src/coding.c ****         e4 = (e4 == PAD) ? 0 : Base64_Char2Val(e4);
 664                             		.loc 1 240 12 is_stmt 1 discriminator 4
 665 0257 59 A5 1B                		movu.B	27[r10], r5
 666 025a 75 55 3D                		cmp	#61, r5
 667 025d 20 0C                   		beq	.L38
 668                             		.loc 1 240 32 discriminator 1
 669 025f CD A1 1B                		mov.B	27[r10], r1
 670 0262 05 00 00 00             		bsr	_Base64_Char2Val
 671 0266 EF 15                   		mov.L	r1, r5
 672 0268 0B                      		bra	.L39
 673                             	.L38:
 674                             		.loc 1 240 12 discriminator 2
 675 0269 66 05                   		mov	#0, r5
 676                             	.L39:
 677                             		.loc 1 240 12 is_stmt 0 discriminator 4
 678 026b C7 A5 1B                		mov.B	r5, 27[r10]
 241:../src/wolfcrypt/src/coding.c **** 
 242:../src/wolfcrypt/src/coding.c ****         if (e1 == BAD || e2 == BAD || e3 == BAD || e4 == BAD) {
 679                             		.loc 1 242 12 is_stmt 1 discriminator 4
 680 026e 59 A5 18                		movu.B	24[r10], r5
 681 0271 75 55 FF                		cmp	#0xff, r5
 682 0274 20 1C                   		beq	.L40
 683                             		.loc 1 242 23 discriminator 1
 684 0276 59 A5 19                		movu.B	25[r10], r5
 685 0279 75 55 FF                		cmp	#0xff, r5
 686 027c 20 14                   		beq	.L40
 687                             		.loc 1 242 36 discriminator 2
 688 027e 59 A5 1A                		movu.B	26[r10], r5
 689 0281 75 55 FF                		cmp	#0xff, r5
 690 0284 20 0C                   		beq	.L40
 691                             		.loc 1 242 49 discriminator 3
 692 0286 59 A5 1B                		movu.B	27[r10], r5
 693 0289 75 55 FF                		cmp	#0xff, r5
 694 028c 21 15                   		bne	.L41
 695 028e EF 00                   		.balign 8,3,5
 696                             	.L40:
 243:../src/wolfcrypt/src/coding.c ****             WOLFSSL_MSG("Bad Base64 Decode bad character");
 697                             		.loc 1 243 13
 698 0290 FB 12 8E 00 00 00       		mov.L	#.LC4, r1
 699 0296 05 00 00 00             		bsr	_WOLFSSL_MSG
 244:../src/wolfcrypt/src/coding.c ****             return ASN_INPUT_E;
 700                             		.loc 1 244 20
 701 029a FB 5A 66 FF             		mov.L	#-154, r5
 702 029e 38 AA 00                		bra	.L46
 703                             	.L41:
 245:../src/wolfcrypt/src/coding.c ****         }
 246:../src/wolfcrypt/src/coding.c **** 
 247:../src/wolfcrypt/src/coding.c ****         b1 = (byte)((e1 << 2) | (e2 >> 4));
 704                             		.loc 1 247 25
 705 02a1 59 A5 18                		movu.B	24[r10], r5
 706 02a4 6C 25                   		shll	#2, r5
 707                             		.loc 1 247 31
 708 02a6 CF 54                   		mov.B	r5, r4
 709 02a8 59 A5 19                		movu.B	25[r10], r5
 710 02ab 68 45                   		shlr	#4, r5
 711 02ad 57 45                   		or	r4, r5
 712                             		.loc 1 247 12
 713 02af C7 A5 1C                		mov.B	r5, 28[r10]
 248:../src/wolfcrypt/src/coding.c ****         b2 = (byte)(((e2 & 0xF) << 4) | (e3 >> 2));
 714                             		.loc 1 248 33
 715 02b2 59 A5 19                		movu.B	25[r10], r5
 716 02b5 6C 45                   		shll	#4, r5
 717                             		.loc 1 248 39
 718 02b7 CF 54                   		mov.B	r5, r4
 719 02b9 59 A5 1A                		movu.B	26[r10], r5
 720 02bc 68 25                   		shlr	#2, r5
 721 02be 57 45                   		or	r4, r5
 722                             		.loc 1 248 12
 723 02c0 C7 A5 1D                		mov.B	r5, 29[r10]
 249:../src/wolfcrypt/src/coding.c ****         b3 = (byte)(((e3 & 0x3) << 6) | e4);
 724                             		.loc 1 249 33
 725 02c3 59 A5 1A                		movu.B	26[r10], r5
 726 02c6 6C 65                   		shll	#6, r5
 727                             		.loc 1 249 39
 728 02c8 CF 54                   		mov.B	r5, r4
 729 02ca CD A5 1B                		mov.B	27[r10], r5
 730 02cd 57 45                   		or	r4, r5
 731                             		.loc 1 249 12
 732 02cf C7 A5 1E                		mov.B	r5, 30[r10]
 250:../src/wolfcrypt/src/coding.c **** 
 251:../src/wolfcrypt/src/coding.c ****         out[i++] = b1;
 733                             		.loc 1 251 14
 734 02d2 EC A5                   		mov.L	[r10], r5
 735 02d4 71 54 01                		add	#1, r5, r4
 736 02d7 E3 A4                   		mov.L	r4, [r10]
 737                             		.loc 1 251 12
 738 02d9 ED A4 0B                		mov.L	44[r10], r4
 739 02dc 4B 45                   		add	r4, r5
 740                             		.loc 1 251 18
 741 02de CD A4 1C                		mov.B	28[r10], r4
 742 02e1 C3 54                   		mov.B	r4, [r5]
 252:../src/wolfcrypt/src/coding.c ****         if (!pad3)
 743                             		.loc 1 252 12
 744 02e3 ED A5 01                		mov.L	4[r10], r5
 745 02e6 61 05                   		cmp	#0, r5
 746 02e8 21 13                   		bne	.L42
 253:../src/wolfcrypt/src/coding.c ****             out[i++] = b2;
 747                             		.loc 1 253 18
 748 02ea EC A5                   		mov.L	[r10], r5
 749 02ec 71 54 01                		add	#1, r5, r4
 750 02ef E3 A4                   		mov.L	r4, [r10]
 751                             		.loc 1 253 16
 752 02f1 ED A4 0B                		mov.L	44[r10], r4
 753 02f4 4B 45                   		add	r4, r5
 754                             		.loc 1 253 22
 755 02f6 CD A4 1D                		mov.B	29[r10], r4
 756 02f9 C3 54                   		mov.B	r4, [r5]
 757                             	.L42:
 254:../src/wolfcrypt/src/coding.c ****         if (!pad4)
 758                             		.loc 1 254 12
 759 02fb ED A5 02                		mov.L	8[r10], r5
 760 02fe 61 05                   		cmp	#0, r5
 761 0300 21 23                   		bne	.L49
 255:../src/wolfcrypt/src/coding.c ****             out[i++] = b3;
 762                             		.loc 1 255 18
 763 0302 EC A5                   		mov.L	[r10], r5
 764 0304 71 54 01                		add	#1, r5, r4
 765 0307 E3 A4                   		mov.L	r4, [r10]
 766                             		.loc 1 255 16
 767 0309 ED A4 0B                		mov.L	44[r10], r4
 768 030c 4B 45                   		add	r4, r5
 769                             		.loc 1 255 22
 770 030e CD A4 1E                		mov.B	30[r10], r4
 771 0311 C3 54                   		mov.B	r4, [r5]
 772                             	.L20:
 773                             	.LBE2:
 177:../src/wolfcrypt/src/coding.c ****         int pad3 = 0;
 774                             		.loc 1 177 18
 775 0313 ED A5 0A                		mov.L	40[r10], r5
 177:../src/wolfcrypt/src/coding.c ****         int pad3 = 0;
 776                             		.loc 1 177 11
 777 0316 61 35                   		cmp	#3, r5
 778 0318 25 05 38 37 FD          		bgtu	.L44
 779 031d 0F                      		bra	.L23
 780                             	.L47:
 781                             	.LBB3:
 186:../src/wolfcrypt/src/coding.c ****             }
 782                             		.loc 1 186 17
 783 031e 03                      		nop
 784 031f 0D                      		bra	.L23
 785                             	.L48:
 192:../src/wolfcrypt/src/coding.c ****         }
 786                             		.loc 1 192 13
 787 0320 03                      		nop
 788 0321 2E 03                   		bra	.L23
 789                             	.L49:
 256:../src/wolfcrypt/src/coding.c ****         else
 257:../src/wolfcrypt/src/coding.c ****             break;
 790                             		.loc 1 257 13
 791 0323 03                      		nop
 792                             		.balign 8,3,1
 793                             	.L23:
 794                             	.LBE3:
 258:../src/wolfcrypt/src/coding.c ****     }
 259:../src/wolfcrypt/src/coding.c **** /* If the output buffer has a room for an extra byte, add a null terminator */
 260:../src/wolfcrypt/src/coding.c ****     if (out && *outLen > i)
 795                             		.loc 1 260 8
 796 0324 ED A5 0B                		mov.L	44[r10], r5
 797 0327 61 05                   		cmp	#0, r5
 798 0329 20 16                   		beq	.L45
 799                             		.loc 1 260 16 discriminator 1
 800 032b ED A5 0C                		mov.L	48[r10], r5
 801 032e EC 55                   		mov.L	[r5], r5
 802                             		.loc 1 260 13 discriminator 1
 803 0330 EC A4                   		mov.L	[r10], r4
 804 0332 47 54                   		cmp	r5, r4
 805 0334 22 0B                   		bgeu	.L45
 261:../src/wolfcrypt/src/coding.c ****         out[i]= '\0';
 806                             		.loc 1 261 12
 807 0336 ED A5 0B                		mov.L	44[r10], r5
 808 0339 06 88 A5                		add	[r10].L, r5
 809                             		.loc 1 261 15
 810 033c F8 54 00                		mov.B	#0, [r5]
 811                             	.L45:
 262:../src/wolfcrypt/src/coding.c **** 
 263:../src/wolfcrypt/src/coding.c ****     *outLen = i;
 812                             		.loc 1 263 13
 813 033f ED A5 0C                		mov.L	48[r10], r5
 814 0342 EC A4                   		mov.L	[r10], r4
 815 0344 E3 54                   		mov.L	r4, [r5]
 264:../src/wolfcrypt/src/coding.c **** 
 265:../src/wolfcrypt/src/coding.c ****     return 0;
 816                             		.loc 1 265 12
 817 0346 66 05                   		mov.L	#0, r5
 818                             		.balign 8,3,1
 819                             	.L46:
 266:../src/wolfcrypt/src/coding.c **** }
 820                             		.loc 1 266 1 discriminator 1
 821 0348 EF 51                   		mov.L	r5, r1
 822 034a 3F AA 0E                		rtsd	#56, r10-r10
 823                             	.LFE45:
 825 034d FC 13 00                		.section	.rodata.base64Encode,"a"
 828                             	_base64Encode:
 829 0000 41                      		.byte	0x41
 830 0001 42                      		.byte	0x42
 831 0002 43                      		.byte	0x43
 832 0003 44                      		.byte	0x44
 833 0004 45                      		.byte	0x45
 834 0005 46                      		.byte	0x46
 835 0006 47                      		.byte	0x47
 836 0007 48                      		.byte	0x48
 837 0008 49                      		.byte	0x49
 838 0009 4A                      		.byte	0x4a
 839 000a 4B                      		.byte	0x4b
 840 000b 4C                      		.byte	0x4c
 841 000c 4D                      		.byte	0x4d
 842 000d 4E                      		.byte	0x4e
 843 000e 4F                      		.byte	0x4f
 844 000f 50                      		.byte	0x50
 845 0010 51                      		.byte	0x51
 846 0011 52                      		.byte	0x52
 847 0012 53                      		.byte	0x53
 848 0013 54                      		.byte	0x54
 849 0014 55                      		.byte	0x55
 850 0015 56                      		.byte	0x56
 851 0016 57                      		.byte	0x57
 852 0017 58                      		.byte	0x58
 853 0018 59                      		.byte	0x59
 854 0019 5A                      		.byte	0x5a
 855 001a 61                      		.byte	0x61
 856 001b 62                      		.byte	0x62
 857 001c 63                      		.byte	0x63
 858 001d 64                      		.byte	0x64
 859 001e 65                      		.byte	0x65
 860 001f 66                      		.byte	0x66
 861 0020 67                      		.byte	0x67
 862 0021 68                      		.byte	0x68
 863 0022 69                      		.byte	0x69
 864 0023 6A                      		.byte	0x6a
 865 0024 6B                      		.byte	0x6b
 866 0025 6C                      		.byte	0x6c
 867 0026 6D                      		.byte	0x6d
 868 0027 6E                      		.byte	0x6e
 869 0028 6F                      		.byte	0x6f
 870 0029 70                      		.byte	0x70
 871 002a 71                      		.byte	0x71
 872 002b 72                      		.byte	0x72
 873 002c 73                      		.byte	0x73
 874 002d 74                      		.byte	0x74
 875 002e 75                      		.byte	0x75
 876 002f 76                      		.byte	0x76
 877 0030 77                      		.byte	0x77
 878 0031 78                      		.byte	0x78
 879 0032 79                      		.byte	0x79
 880 0033 7A                      		.byte	0x7a
 881 0034 30                      		.byte	48
 882 0035 31                      		.byte	49
 883 0036 32                      		.byte	50
 884 0037 33                      		.byte	51
 885 0038 34                      		.byte	52
 886 0039 35                      		.byte	53
 887 003a 36                      		.byte	54
 888 003b 37                      		.byte	55
 889 003c 38                      		.byte	56
 890 003d 39                      		.byte	57
 891 003e 2B                      		.byte	43
 892 003f 2F                      		.byte	47
 893                             		.section C,"a",@progbits
 894 00ae 00 00                   		.p2align 2
 895                             	.LC5:
 896 00b0 45 73 63 61 70 65 20 62 		.string	"Escape buffer max too small"
 896      75 66 66 65 72 20 6D 61 
 896      78 20 74 6F 6F 20 73 6D 
 896      61 6C 6C 00 
 897                             		.section	.text.CEscape,"ax",@progbits
 899                             	_CEscape:
 900                             	.LFB46:
 267:../src/wolfcrypt/src/coding.c **** 
 268:../src/wolfcrypt/src/coding.c **** #endif /* WOLFSSL_BASE64_DECODE */
 269:../src/wolfcrypt/src/coding.c **** 
 270:../src/wolfcrypt/src/coding.c **** #if defined(WOLFSSL_BASE64_ENCODE)
 271:../src/wolfcrypt/src/coding.c **** 
 272:../src/wolfcrypt/src/coding.c **** static
 273:../src/wolfcrypt/src/coding.c **** const byte base64Encode[] = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
 274:../src/wolfcrypt/src/coding.c ****                               'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
 275:../src/wolfcrypt/src/coding.c ****                               'U', 'V', 'W', 'X', 'Y', 'Z',
 276:../src/wolfcrypt/src/coding.c ****                               'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
 277:../src/wolfcrypt/src/coding.c ****                               'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
 278:../src/wolfcrypt/src/coding.c ****                               'u', 'v', 'w', 'x', 'y', 'z',
 279:../src/wolfcrypt/src/coding.c ****                               '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
 280:../src/wolfcrypt/src/coding.c ****                               '+', '/'
 281:../src/wolfcrypt/src/coding.c ****                             };
 282:../src/wolfcrypt/src/coding.c **** 
 283:../src/wolfcrypt/src/coding.c **** 
 284:../src/wolfcrypt/src/coding.c **** /* make sure *i (idx) won't exceed max, store and possibly escape to out,
 285:../src/wolfcrypt/src/coding.c ****  * raw means use e w/o decode,  0 on success */
 286:../src/wolfcrypt/src/coding.c **** static int CEscape(int escaped, byte e, byte* out, word32* i, word32 maxSz,
 287:../src/wolfcrypt/src/coding.c ****                   int raw, int getSzOnly)
 288:../src/wolfcrypt/src/coding.c **** {
 901                             		.loc 1 288 1
 902 0000 7E AA                   		push.l	r10
 903                             	.LCFI6:
 904 0002 71 0A D4                		add	#-44, r0, r10
 905                             	.LCFI7:
 906 0005 EF A0                   		mov.L	r10, r0
 907 0007 75 45 34                		mov.L	#52, r5
 908 000a 4B A5                   		add	r10, r5
 909 000c E7 A1 04                		mov.L	r1, 16[r10]
 910 000f C7 A2 14                		mov.B	r2, 20[r10]
 911 0012 E7 A3 06                		mov.L	r3, 24[r10]
 912 0015 E7 A4 07                		mov.L	r4, 28[r10]
 289:../src/wolfcrypt/src/coding.c ****     int    doEscape = 0;
 913                             		.loc 1 289 12
 914 0018 F8 A6 00                		mov.L	#0, [r10]
 290:../src/wolfcrypt/src/coding.c ****     word32 needed = 1;
 915                             		.loc 1 290 12
 916 001b F9 A6 01 01             		mov.L	#1, 4[r10]
 291:../src/wolfcrypt/src/coding.c ****     word32 idx = *i;
 917                             		.loc 1 291 12
 918 001f ED A4 07                		mov.L	28[r10], r4
 919 0022 EC 44                   		mov.L	[r4], r4
 920 0024 E7 A4 02                		mov.L	r4, 8[r10]
 292:../src/wolfcrypt/src/coding.c **** 
 293:../src/wolfcrypt/src/coding.c ****     byte basic;
 294:../src/wolfcrypt/src/coding.c ****     byte plus    = 0;
 921                             		.loc 1 294 10
 922 0027 F9 A4 0D 00             		mov.B	#0, 13[r10]
 295:../src/wolfcrypt/src/coding.c ****     byte equals  = 0;
 923                             		.loc 1 295 10
 924 002b F9 A4 0E 00             		mov.B	#0, 14[r10]
 296:../src/wolfcrypt/src/coding.c ****     byte newline = 0;
 925                             		.loc 1 296 10
 926 002f F9 A4 0F 00             		mov.B	#0, 15[r10]
 297:../src/wolfcrypt/src/coding.c **** 
 298:../src/wolfcrypt/src/coding.c ****     if (raw)
 927                             		.loc 1 298 8
 928 0033 A8 5C                   		mov.L	4[r5], r4
 929 0035 61 04                   		cmp	#0, r4
 930 0037 11                      		beq	.L51
 299:../src/wolfcrypt/src/coding.c ****         basic = e;
 931                             		.loc 1 299 15
 932 0038 CD A4 14                		mov.B	20[r10], r4
 933 003b C7 A4 0C                		mov.B	r4, 12[r10]
 934 003e 2E 11                   		bra	.L52
 935                             	.L51:
 300:../src/wolfcrypt/src/coding.c ****     else
 301:../src/wolfcrypt/src/coding.c ****         basic = base64Encode[e];
 936                             		.loc 1 301 29
 937 0040 59 A4 14                		movu.B	20[r10], r4
 938                             		.loc 1 301 15
 939 0043 FB 32 00 00 00 00       		mov.L	#_base64Encode, r3
 940 0049 FE 44 34                		mov.B	[r4,r3], r4
 941 004c C7 A4 0C                		mov.B	r4, 12[r10]
 942                             	.L52:
 302:../src/wolfcrypt/src/coding.c **** 
 303:../src/wolfcrypt/src/coding.c ****     /* check whether to escape. Only escape for EncodeEsc */
 304:../src/wolfcrypt/src/coding.c ****     if (escaped == WC_ESC_NL_ENC) {
 943                             		.loc 1 304 8
 944 004f ED A4 04                		mov.L	16[r10], r4
 945 0052 61 14                   		cmp	#1, r4
 946 0054 21 48                   		bne	.L67
 305:../src/wolfcrypt/src/coding.c ****         switch ((char)basic) {
 947                             		.loc 1 305 17
 948 0056 59 A4 0C                		movu.B	12[r10], r4
 949                             		.loc 1 305 9
 950 0059 75 54 2B                		cmp	#43, r4
 951 005c 20 0D                   		beq	.L54
 952 005e 75 54 3D                		cmp	#61, r4
 953 0061 20 19                   		beq	.L55
 954 0063 61 A4                   		cmp	#10, r4
 955 0065 20 26                   		beq	.L56
 306:../src/wolfcrypt/src/coding.c ****             case '+' :
 307:../src/wolfcrypt/src/coding.c ****                 plus     = 1;
 308:../src/wolfcrypt/src/coding.c ****                 doEscape = 1;
 309:../src/wolfcrypt/src/coding.c ****                 needed  += 2;
 310:../src/wolfcrypt/src/coding.c ****                 break;
 311:../src/wolfcrypt/src/coding.c ****             case '=' :
 312:../src/wolfcrypt/src/coding.c ****                 equals   = 1;
 313:../src/wolfcrypt/src/coding.c ****                 doEscape = 1;
 314:../src/wolfcrypt/src/coding.c ****                 needed  += 2;
 315:../src/wolfcrypt/src/coding.c ****                 break;
 316:../src/wolfcrypt/src/coding.c ****             case '\n' :
 317:../src/wolfcrypt/src/coding.c ****                 newline  = 1;
 318:../src/wolfcrypt/src/coding.c ****                 doEscape = 1;
 319:../src/wolfcrypt/src/coding.c ****                 needed  += 2;
 320:../src/wolfcrypt/src/coding.c ****                 break;
 321:../src/wolfcrypt/src/coding.c ****             default:
 322:../src/wolfcrypt/src/coding.c ****                 /* do nothing */
 323:../src/wolfcrypt/src/coding.c ****                 break;
 956                             		.loc 1 323 17
 957 0067 2E 36                   		bra	.L53
 958                             	.L54:
 307:../src/wolfcrypt/src/coding.c ****                 doEscape = 1;
 959                             		.loc 1 307 26
 960 0069 F9 A4 0D 01             		mov.B	#1, 13[r10]
 308:../src/wolfcrypt/src/coding.c ****                 needed  += 2;
 961                             		.loc 1 308 26
 962 006d F8 A6 01                		mov.L	#1, [r10]
 309:../src/wolfcrypt/src/coding.c ****                 break;
 963                             		.loc 1 309 25
 964 0070 ED A4 01                		mov.L	4[r10], r4
 965 0073 62 24                   		add	#2, r4
 966 0075 E7 A4 01                		mov.L	r4, 4[r10]
 310:../src/wolfcrypt/src/coding.c ****             case '=' :
 967                             		.loc 1 310 17
 968 0078 2E 25                   		bra	.L53
 969                             	.L55:
 312:../src/wolfcrypt/src/coding.c ****                 doEscape = 1;
 970                             		.loc 1 312 26
 971 007a F9 A4 0E 01             		mov.B	#1, 14[r10]
 313:../src/wolfcrypt/src/coding.c ****                 needed  += 2;
 972                             		.loc 1 313 26
 973 007e F8 A6 01                		mov.L	#1, [r10]
 314:../src/wolfcrypt/src/coding.c ****                 break;
 974                             		.loc 1 314 25
 975 0081 ED A4 01                		mov.L	4[r10], r4
 976 0084 62 24                   		add	#2, r4
 977 0086 E7 A4 01                		mov.L	r4, 4[r10]
 315:../src/wolfcrypt/src/coding.c ****             case '\n' :
 978                             		.loc 1 315 17
 979 0089 2E 14                   		bra	.L53
 980                             	.L56:
 317:../src/wolfcrypt/src/coding.c ****                 doEscape = 1;
 981                             		.loc 1 317 26
 982 008b F9 A4 0F 01             		mov.B	#1, 15[r10]
 318:../src/wolfcrypt/src/coding.c ****                 needed  += 2;
 983                             		.loc 1 318 26
 984 008f F8 A6 01                		mov.L	#1, [r10]
 319:../src/wolfcrypt/src/coding.c ****                 break;
 985                             		.loc 1 319 25
 986 0092 ED A4 01                		mov.L	4[r10], r4
 987 0095 62 24                   		add	#2, r4
 988 0097 E7 A4 01                		mov.L	r4, 4[r10]
 320:../src/wolfcrypt/src/coding.c ****             default:
 989                             		.loc 1 320 17
 990 009a 2E 03                   		bra	.L53
 991                             	.L67:
 324:../src/wolfcrypt/src/coding.c ****         }
 325:../src/wolfcrypt/src/coding.c ****     }
 992                             		.loc 1 325 5
 993 009c 03                      		nop
 994                             		.balign 8,3,1
 995                             	.L53:
 326:../src/wolfcrypt/src/coding.c **** 
 327:../src/wolfcrypt/src/coding.c ****     /* check size */
 328:../src/wolfcrypt/src/coding.c ****     if ( (idx+needed) > maxSz && !getSzOnly) {
 996                             		.loc 1 328 14
 997 009d ED A4 02                		mov.L	8[r10], r4
 998 00a0 06 89 A4 01             		add	4[r10].L, r4
 999                             		.loc 1 328 8
 1000 00a4 EC 53                   		mov.L	[r5], r3
 1001 00a6 47 43                   		cmp	r4, r3
 1002 00a8 22 19                   		bgeu	.L58
 1003                             		.loc 1 328 31 discriminator 1
 1004 00aa A8 D4                   		mov.L	8[r5], r4
 1005 00ac 61 04                   		cmp	#0, r4
 1006 00ae 21 13                   		bne	.L58
 329:../src/wolfcrypt/src/coding.c ****         WOLFSSL_MSG("Escape buffer max too small");
 1007                             		.loc 1 329 9
 1008 00b0 FB 12 B0 00 00 00       		mov.L	#.LC5, r1
 1009 00b6 05 00 00 00             		bsr	_WOLFSSL_MSG
 330:../src/wolfcrypt/src/coding.c ****         return BUFFER_E;
 1010                             		.loc 1 330 16
 1011 00ba FB 5A 7C FF             		mov.L	#-132, r5
 1012 00be 38 DC 00                		bra	.L59
 1013                             	.L58:
 331:../src/wolfcrypt/src/coding.c ****     }
 332:../src/wolfcrypt/src/coding.c **** 
 333:../src/wolfcrypt/src/coding.c ****     /* store it */
 334:../src/wolfcrypt/src/coding.c ****     if (doEscape == 0) {
 1014                             		.loc 1 334 8
 1015 00c1 EC A4                   		mov.L	[r10], r4
 1016 00c3 61 04                   		cmp	#0, r4
 1017 00c5 21 29                   		bne	.L60
 335:../src/wolfcrypt/src/coding.c ****         if(getSzOnly)
 1018                             		.loc 1 335 11
 1019 00c7 A8 D5                   		mov.L	8[r5], r5
 1020 00c9 61 05                   		cmp	#0, r5
 1021 00cb 20 0D                   		beq	.L61
 336:../src/wolfcrypt/src/coding.c ****             idx++;
 1022                             		.loc 1 336 16
 1023 00cd ED A5 02                		mov.L	8[r10], r5
 1024 00d0 62 15                   		add	#1, r5
 1025 00d2 E7 A5 02                		mov.L	r5, 8[r10]
 1026 00d5 38 BB 00                		bra	.L63
 1027                             	.L61:
 337:../src/wolfcrypt/src/coding.c ****         else
 338:../src/wolfcrypt/src/coding.c ****             out[idx++] = basic;
 1028                             		.loc 1 338 20
 1029 00d8 ED A5 02                		mov.L	8[r10], r5
 1030 00db 71 54 01                		add	#1, r5, r4
 1031 00de E7 A4 02                		mov.L	r4, 8[r10]
 1032                             		.loc 1 338 16
 1033 00e1 ED A4 06                		mov.L	24[r10], r4
 1034 00e4 4B 45                   		add	r4, r5
 1035                             		.loc 1 338 24
 1036 00e6 CD A4 0C                		mov.B	12[r10], r4
 1037 00e9 C3 54                   		mov.B	r4, [r5]
 1038 00eb 38 A5 00                		bra	.L63
 1039                             	.L60:
 339:../src/wolfcrypt/src/coding.c ****     }
 340:../src/wolfcrypt/src/coding.c ****     else {
 341:../src/wolfcrypt/src/coding.c ****         if(getSzOnly)
 1040                             		.loc 1 341 11
 1041 00ee A8 D5                   		mov.L	8[r5], r5
 1042 00f0 61 05                   		cmp	#0, r5
 1043 00f2 20 0D                   		beq	.L64
 342:../src/wolfcrypt/src/coding.c ****             idx+=3;
 1044                             		.loc 1 342 16
 1045 00f4 ED A5 02                		mov.L	8[r10], r5
 1046 00f7 62 35                   		add	#3, r5
 1047 00f9 E7 A5 02                		mov.L	r5, 8[r10]
 1048 00fc 38 94 00                		bra	.L63
 1049                             	.L64:
 343:../src/wolfcrypt/src/coding.c ****         else {
 344:../src/wolfcrypt/src/coding.c ****             out[idx++] = '%';  /* start escape */
 1050                             		.loc 1 344 20
 1051 00ff ED A5 02                		mov.L	8[r10], r5
 1052 0102 71 54 01                		add	#1, r5, r4
 1053 0105 E7 A4 02                		mov.L	r4, 8[r10]
 1054                             		.loc 1 344 16
 1055 0108 ED A4 06                		mov.L	24[r10], r4
 1056 010b 4B 45                   		add	r4, r5
 1057                             		.loc 1 344 24
 1058 010d F8 54 25                		mov.B	#37, [r5]
 345:../src/wolfcrypt/src/coding.c **** 
 346:../src/wolfcrypt/src/coding.c ****             if (plus) {
 1059                             		.loc 1 346 16
 1060 0110 59 A5 0D                		movu.B	13[r10], r5
 1061 0113 61 05                   		cmp	#0, r5
 1062 0115 20 26                   		beq	.L65
 347:../src/wolfcrypt/src/coding.c ****                 out[idx++] = '2';
 1063                             		.loc 1 347 24
 1064 0117 ED A5 02                		mov.L	8[r10], r5
 1065 011a 71 54 01                		add	#1, r5, r4
 1066 011d E7 A4 02                		mov.L	r4, 8[r10]
 1067                             		.loc 1 347 20
 1068 0120 ED A4 06                		mov.L	24[r10], r4
 1069 0123 4B 45                   		add	r4, r5
 1070                             		.loc 1 347 28
 1071 0125 F8 54 32                		mov.B	#50, [r5]
 348:../src/wolfcrypt/src/coding.c ****                 out[idx++] = 'B';
 1072                             		.loc 1 348 24
 1073 0128 ED A5 02                		mov.L	8[r10], r5
 1074 012b 71 54 01                		add	#1, r5, r4
 1075 012e E7 A4 02                		mov.L	r4, 8[r10]
 1076                             		.loc 1 348 20
 1077 0131 ED A4 06                		mov.L	24[r10], r4
 1078 0134 4B 45                   		add	r4, r5
 1079                             		.loc 1 348 28
 1080 0136 F8 54 42                		mov.B	#0x42, [r5]
 1081 0139 2E 57                   		bra	.L63
 1082                             	.L65:
 349:../src/wolfcrypt/src/coding.c ****             }
 350:../src/wolfcrypt/src/coding.c ****             else if (equals) {
 1083                             		.loc 1 350 21
 1084 013b 59 A5 0E                		movu.B	14[r10], r5
 1085 013e 61 05                   		cmp	#0, r5
 1086 0140 20 26                   		beq	.L66
 351:../src/wolfcrypt/src/coding.c ****                 out[idx++] = '3';
 1087                             		.loc 1 351 24
 1088 0142 ED A5 02                		mov.L	8[r10], r5
 1089 0145 71 54 01                		add	#1, r5, r4
 1090 0148 E7 A4 02                		mov.L	r4, 8[r10]
 1091                             		.loc 1 351 20
 1092 014b ED A4 06                		mov.L	24[r10], r4
 1093 014e 4B 45                   		add	r4, r5
 1094                             		.loc 1 351 28
 1095 0150 F8 54 33                		mov.B	#51, [r5]
 352:../src/wolfcrypt/src/coding.c ****                 out[idx++] = 'D';
 1096                             		.loc 1 352 24
 1097 0153 ED A5 02                		mov.L	8[r10], r5
 1098 0156 71 54 01                		add	#1, r5, r4
 1099 0159 E7 A4 02                		mov.L	r4, 8[r10]
 1100                             		.loc 1 352 20
 1101 015c ED A4 06                		mov.L	24[r10], r4
 1102 015f 4B 45                   		add	r4, r5
 1103                             		.loc 1 352 28
 1104 0161 F8 54 44                		mov.B	#0x44, [r5]
 1105 0164 2E 2C                   		bra	.L63
 1106                             	.L66:
 353:../src/wolfcrypt/src/coding.c ****             }
 354:../src/wolfcrypt/src/coding.c ****             else if (newline) {
 1107                             		.loc 1 354 21
 1108 0166 59 A5 0F                		movu.B	15[r10], r5
 1109 0169 61 05                   		cmp	#0, r5
 1110 016b 20 25                   		beq	.L63
 355:../src/wolfcrypt/src/coding.c ****                 out[idx++] = '0';
 1111                             		.loc 1 355 24
 1112 016d ED A5 02                		mov.L	8[r10], r5
 1113 0170 71 54 01                		add	#1, r5, r4
 1114 0173 E7 A4 02                		mov.L	r4, 8[r10]
 1115                             		.loc 1 355 20
 1116 0176 ED A4 06                		mov.L	24[r10], r4
 1117 0179 4B 45                   		add	r4, r5
 1118                             		.loc 1 355 28
 1119 017b F8 54 30                		mov.B	#48, [r5]
 356:../src/wolfcrypt/src/coding.c ****                 out[idx++] = 'A';
 1120                             		.loc 1 356 24
 1121 017e ED A5 02                		mov.L	8[r10], r5
 1122 0181 71 54 01                		add	#1, r5, r4
 1123 0184 E7 A4 02                		mov.L	r4, 8[r10]
 1124                             		.loc 1 356 20
 1125 0187 ED A4 06                		mov.L	24[r10], r4
 1126 018a 4B 45                   		add	r4, r5
 1127                             		.loc 1 356 28
 1128 018c F8 54 41                		mov.B	#0x41, [r5]
 1129 018f 03                      		.balign 8,3,1
 1130                             	.L63:
 357:../src/wolfcrypt/src/coding.c ****             }
 358:../src/wolfcrypt/src/coding.c ****         }
 359:../src/wolfcrypt/src/coding.c ****     }
 360:../src/wolfcrypt/src/coding.c ****     *i = idx;
 1131                             		.loc 1 360 8
 1132 0190 ED A5 07                		mov.L	28[r10], r5
 1133 0193 ED A4 02                		mov.L	8[r10], r4
 1134 0196 E3 54                   		mov.L	r4, [r5]
 361:../src/wolfcrypt/src/coding.c **** 
 362:../src/wolfcrypt/src/coding.c ****     return 0;
 1135                             		.loc 1 362 12
 1136 0198 66 05                   		mov.L	#0, r5
 1137                             	.L59:
 363:../src/wolfcrypt/src/coding.c **** }
 1138                             		.loc 1 363 1
 1139 019a EF 51                   		mov.L	r5, r1
 1140 019c 3F AA 0C                		rtsd	#48, r10-r10
 1141                             	.LFE46:
 1143 019f 03                      		.section	.text.DoBase64_Encode,"ax",@progbits
 1145                             	_DoBase64_Encode:
 1146                             	.LFB47:
 364:../src/wolfcrypt/src/coding.c **** 
 365:../src/wolfcrypt/src/coding.c **** 
 366:../src/wolfcrypt/src/coding.c **** /* internal worker, handles both escaped and normal line endings.
 367:../src/wolfcrypt/src/coding.c ****    If out buffer is NULL, will return sz needed in outLen */
 368:../src/wolfcrypt/src/coding.c **** static int DoBase64_Encode(const byte* in, word32 inLen, byte* out,
 369:../src/wolfcrypt/src/coding.c ****                            word32* outLen, int escaped)
 370:../src/wolfcrypt/src/coding.c **** {
 1147                             		.loc 1 370 1
 1148 0000 7E AA                   		push.l	r10
 1149                             	.LCFI8:
 1150 0002 7E A6                   		push.l	r6
 1151                             	.LCFI9:
 1152 0004 71 0A BC                		add	#-68, r0, r10
 1153                             	.LCFI10:
 1154 0007 71 A0 F4                		add	#-12, r10, r0
 1155                             	.LCFI11:
 1156 000a 75 46 50                		mov.L	#0x50, r6
 1157 000d 4B A6                   		add	r10, r6
 1158 000f E7 A1 0C                		mov.L	r1, 48[r10]
 1159 0012 E7 A2 0D                		mov.L	r2, 52[r10]
 1160 0015 E7 A3 0E                		mov.L	r3, 56[r10]
 1161 0018 E7 A4 0F                		mov.L	r4, 60[r10]
 371:../src/wolfcrypt/src/coding.c ****     int    ret = 0;
 1162                             		.loc 1 371 12
 1163 001b F8 A6 00                		mov.L	#0, [r10]
 372:../src/wolfcrypt/src/coding.c ****     word32 i = 0,
 1164                             		.loc 1 372 12
 1165 001e F9 A6 0B 00             		mov.L	#0, 44[r10]
 373:../src/wolfcrypt/src/coding.c ****            j = 0,
 1166                             		.loc 1 373 12
 1167 0022 F9 A6 01 00             		mov.L	#0, 4[r10]
 374:../src/wolfcrypt/src/coding.c ****            n = 0;   /* new line counter */
 1168                             		.loc 1 374 12
 1169 0026 F9 A6 02 00             		mov.L	#0, 8[r10]
 375:../src/wolfcrypt/src/coding.c **** 
 376:../src/wolfcrypt/src/coding.c ****     int    getSzOnly = (out == NULL);
 1170                             		.loc 1 376 29
 1171 002a ED A5 0E                		mov.L	56[r10], r5
 1172 002d 61 05                   		cmp	#0, r5
 1173 002f FC DB 50                		sceq.L	r5
 1174                             		.loc 1 376 12
 1175 0032 5B 55                   		movu.B	r5, r5
 1176 0034 E7 A5 04                		mov.L	r5, 16[r10]
 377:../src/wolfcrypt/src/coding.c **** 
 378:../src/wolfcrypt/src/coding.c ****     word32 outSz = (inLen + 3 - 1) / 3 * 4;
 1177                             		.loc 1 378 31
 1178 0037 ED A5 0D                		mov.L	52[r10], r5
 1179 003a 62 25                   		add	#2, r5
 1180                             		.loc 1 378 36
 1181 003c FB 42 AB AA AA AA       		mov.L	#-1431655765, r4
 1182 0042 FC 1F 54                		emulu	r5, r4
 1183 0045 68 15                   		shlr	#1, r5
 1184                             		.loc 1 378 12
 1185 0047 6C 25                   		shll	#2, r5
 1186 0049 E7 A5 05                		mov.L	r5, 20[r10]
 379:../src/wolfcrypt/src/coding.c ****     word32 addSz = (outSz + BASE64_LINE_SZ - 1) / BASE64_LINE_SZ;  /* new lines */
 1187                             		.loc 1 379 44
 1188 004c ED A5 05                		mov.L	20[r10], r5
 1189 004f 71 55 3F                		add	#63, r5
 1190                             		.loc 1 379 12
 1191 0052 68 65                   		shlr	#6, r5
 1192 0054 E7 A5 03                		mov.L	r5, 12[r10]
 380:../src/wolfcrypt/src/coding.c **** 
 381:../src/wolfcrypt/src/coding.c ****     if (escaped == WC_ESC_NL_ENC)
 1193                             		.loc 1 381 8
 1194 0057 EC 65                   		mov.L	[r6], r5
 1195 0059 61 15                   		cmp	#1, r5
 1196 005b 1A                      		bne	.L69
 382:../src/wolfcrypt/src/coding.c ****         addSz *= 3;   /* instead of just \n, we're doing %0A triplet */
 1197                             		.loc 1 382 15
 1198 005c ED A5 03                		mov.L	12[r10], r5
 1199 005f 63 35                   		mul	#3, r5
 1200 0061 E7 A5 03                		mov.L	r5, 12[r10]
 1201 0064 0A                      		bra	.L70
 1202                             	.L69:
 383:../src/wolfcrypt/src/coding.c ****     else if (escaped == WC_NO_NL_ENC)
 1203                             		.loc 1 383 13
 1204 0065 EC 65                   		mov.L	[r6], r5
 1205 0067 61 25                   		cmp	#2, r5
 1206 0069 1D                      		bne	.L70
 384:../src/wolfcrypt/src/coding.c ****         addSz = 0;    /* encode without \n */
 1207                             		.loc 1 384 15
 1208 006a F9 A6 03 00             		mov.L	#0, 12[r10]
 1209                             	.L70:
 385:../src/wolfcrypt/src/coding.c **** 
 386:../src/wolfcrypt/src/coding.c ****     outSz += addSz;
 1210                             		.loc 1 386 11
 1211 006e ED A5 05                		mov.L	20[r10], r5
 1212 0071 06 89 A5 03             		add	12[r10].L, r5
 1213 0075 E7 A5 05                		mov.L	r5, 20[r10]
 387:../src/wolfcrypt/src/coding.c **** 
 388:../src/wolfcrypt/src/coding.c ****     /* if escaped we can't predetermine size for one pass encoding, but
 389:../src/wolfcrypt/src/coding.c ****      * make sure we have enough if no escapes are in input
 390:../src/wolfcrypt/src/coding.c ****      * Also need to ensure outLen valid before dereference */
 391:../src/wolfcrypt/src/coding.c ****     if (!outLen || (outSz > *outLen && !getSzOnly)) return BAD_FUNC_ARG;
 1214                             		.loc 1 391 8
 1215 0078 ED A5 0F                		mov.L	60[r10], r5
 1216 007b 61 05                   		cmp	#0, r5
 1217 007d 20 19                   		beq	.L71
 1218                             		.loc 1 391 29 discriminator 2
 1219 007f ED A5 0F                		mov.L	60[r10], r5
 1220 0082 EC 55                   		mov.L	[r5], r5
 1221                             		.loc 1 391 17 discriminator 2
 1222 0084 ED A4 05                		mov.L	20[r10], r4
 1223 0087 47 54                   		cmp	r5, r4
 1224 0089 24 05 38 75 01          		bleu	.L74
 1225                             		.loc 1 391 37 discriminator 3
 1226 008e ED A5 04                		mov.L	16[r10], r5
 1227 0091 61 05                   		cmp	#0, r5
 1228 0093 3B 6D 01                		bne	.L74
 1229                             	.L71:
 1230                             		.loc 1 391 60 discriminator 4
 1231 0096 FB 5A 53 FF             		mov.L	#-173, r5
 1232 009a 38 38 03                		bra	.L93
 1233                             	.L80:
 1234                             	.LBB4:
 392:../src/wolfcrypt/src/coding.c **** 
 393:../src/wolfcrypt/src/coding.c ****     while (inLen > 2) {
 394:../src/wolfcrypt/src/coding.c ****         byte b1 = in[j++];
 1235                             		.loc 1 394 23
 1236 009d ED A5 01                		mov.L	4[r10], r5
 1237 00a0 71 54 01                		add	#1, r5, r4
 1238 00a3 E7 A4 01                		mov.L	r4, 4[r10]
 1239                             		.loc 1 394 21
 1240 00a6 ED A4 0C                		mov.L	48[r10], r4
 1241 00a9 4B 45                   		add	r4, r5
 1242                             		.loc 1 394 14
 1243 00ab CC 55                   		mov.B	[r5], r5
 1244 00ad C7 A5 18                		mov.B	r5, 24[r10]
 395:../src/wolfcrypt/src/coding.c ****         byte b2 = in[j++];
 1245                             		.loc 1 395 23
 1246 00b0 ED A5 01                		mov.L	4[r10], r5
 1247 00b3 71 54 01                		add	#1, r5, r4
 1248 00b6 E7 A4 01                		mov.L	r4, 4[r10]
 1249                             		.loc 1 395 21
 1250 00b9 ED A4 0C                		mov.L	48[r10], r4
 1251 00bc 4B 45                   		add	r4, r5
 1252                             		.loc 1 395 14
 1253 00be CC 55                   		mov.B	[r5], r5
 1254 00c0 C7 A5 19                		mov.B	r5, 25[r10]
 396:../src/wolfcrypt/src/coding.c ****         byte b3 = in[j++];
 1255                             		.loc 1 396 23
 1256 00c3 ED A5 01                		mov.L	4[r10], r5
 1257 00c6 71 54 01                		add	#1, r5, r4
 1258 00c9 E7 A4 01                		mov.L	r4, 4[r10]
 1259                             		.loc 1 396 21
 1260 00cc ED A4 0C                		mov.L	48[r10], r4
 1261 00cf 4B 45                   		add	r4, r5
 1262                             		.loc 1 396 14
 1263 00d1 CC 55                   		mov.B	[r5], r5
 1264 00d3 C7 A5 1A                		mov.B	r5, 26[r10]
 397:../src/wolfcrypt/src/coding.c **** 
 398:../src/wolfcrypt/src/coding.c ****         /* encoded idx */
 399:../src/wolfcrypt/src/coding.c ****         byte e1 = b1 >> 2;
 1265                             		.loc 1 399 14
 1266 00d6 59 A5 18                		movu.B	24[r10], r5
 1267 00d9 68 25                   		shlr	#2, r5
 1268 00db C7 A5 1B                		mov.B	r5, 27[r10]
 400:../src/wolfcrypt/src/coding.c ****         byte e2 = (byte)(((b1 & 0x3) << 4) | (b2 >> 4));
 1269                             		.loc 1 400 38
 1270 00de 59 A5 18                		movu.B	24[r10], r5
 1271 00e1 6C 45                   		shll	#4, r5
 1272                             		.loc 1 400 44
 1273 00e3 75 25 30                		and	#48, r5
 1274 00e6 CF 54                   		mov.B	r5, r4
 1275 00e8 59 A5 19                		movu.B	25[r10], r5
 1276 00eb 68 45                   		shlr	#4, r5
 1277 00ed 57 45                   		or	r4, r5
 1278                             		.loc 1 400 14
 1279 00ef C7 A5 1C                		mov.B	r5, 28[r10]
 401:../src/wolfcrypt/src/coding.c ****         byte e3 = (byte)(((b2 & 0xF) << 2) | (b3 >> 6));
 1280                             		.loc 1 401 38
 1281 00f2 59 A5 19                		movu.B	25[r10], r5
 1282 00f5 6C 25                   		shll	#2, r5
 1283                             		.loc 1 401 44
 1284 00f7 75 25 3C                		and	#60, r5
 1285 00fa CF 54                   		mov.B	r5, r4
 1286 00fc 59 A5 1A                		movu.B	26[r10], r5
 1287 00ff 68 65                   		shlr	#6, r5
 1288 0101 57 45                   		or	r4, r5
 1289                             		.loc 1 401 14
 1290 0103 C7 A5 1D                		mov.B	r5, 29[r10]
 402:../src/wolfcrypt/src/coding.c ****         byte e4 = b3 & 0x3F;
 1291                             		.loc 1 402 14
 1292 0106 CD A5 1A                		mov.B	26[r10], r5
 1293 0109 75 25 3F                		and	#63, r5
 1294 010c C7 A5 1E                		mov.B	r5, 30[r10]
 403:../src/wolfcrypt/src/coding.c **** 
 404:../src/wolfcrypt/src/coding.c ****         /* store */
 405:../src/wolfcrypt/src/coding.c ****         ret = CEscape(escaped, e1, out, &i, *outLen, 0, getSzOnly);
 1295                             		.loc 1 405 15
 1296 010f ED A5 0F                		mov.L	60[r10], r5
 1297 0112 EC 54                   		mov.L	[r5], r4
 1298 0114 71 A5 2C                		add	#44, r10, r5
 1299 0117 ED A3 04                		mov.L	16[r10], r3
 1300 011a A0 83                   		mov.L	r3, 8[r0]
 1301 011c 3E 01 00                		mov.L	#0, 4[r0]
 1302 011f E3 04                   		mov.L	r4, [r0]
 1303 0121 EF 54                   		mov.L	r5, r4
 1304 0123 ED A3 0E                		mov.L	56[r10], r3
 1305 0126 CD A2 1B                		mov.B	27[r10], r2
 1306 0129 EC 61                   		mov.L	[r6], r1
 1307 012b 05 00 00 00             		bsr	_CEscape
 1308 012f E3 A1                   		mov.L	r1, [r10]
 406:../src/wolfcrypt/src/coding.c ****         if (ret != 0) break;
 1309                             		.loc 1 406 12
 1310 0131 EC A5                   		mov.L	[r10], r5
 1311 0133 61 05                   		cmp	#0, r5
 1312 0135 3B D7 00                		bne	.L94
 407:../src/wolfcrypt/src/coding.c ****         ret = CEscape(escaped, e2, out, &i, *outLen, 0, getSzOnly);
 1313                             		.loc 1 407 15
 1314 0138 ED A5 0F                		mov.L	60[r10], r5
 1315 013b EC 54                   		mov.L	[r5], r4
 1316 013d 71 A5 2C                		add	#44, r10, r5
 1317 0140 ED A3 04                		mov.L	16[r10], r3
 1318 0143 A0 83                   		mov.L	r3, 8[r0]
 1319 0145 3E 01 00                		mov.L	#0, 4[r0]
 1320 0148 E3 04                   		mov.L	r4, [r0]
 1321 014a EF 54                   		mov.L	r5, r4
 1322 014c ED A3 0E                		mov.L	56[r10], r3
 1323 014f CD A2 1C                		mov.B	28[r10], r2
 1324 0152 EC 61                   		mov.L	[r6], r1
 1325 0154 05 00 00 00             		bsr	_CEscape
 1326 0158 E3 A1                   		mov.L	r1, [r10]
 408:../src/wolfcrypt/src/coding.c ****         if (ret != 0) break;
 1327                             		.loc 1 408 12
 1328 015a EC A5                   		mov.L	[r10], r5
 1329 015c 61 05                   		cmp	#0, r5
 1330 015e 3B B0 00                		bne	.L95
 409:../src/wolfcrypt/src/coding.c ****         ret = CEscape(escaped, e3, out, &i, *outLen, 0, getSzOnly);
 1331                             		.loc 1 409 15
 1332 0161 ED A5 0F                		mov.L	60[r10], r5
 1333 0164 EC 54                   		mov.L	[r5], r4
 1334 0166 71 A5 2C                		add	#44, r10, r5
 1335 0169 ED A3 04                		mov.L	16[r10], r3
 1336 016c A0 83                   		mov.L	r3, 8[r0]
 1337 016e 3E 01 00                		mov.L	#0, 4[r0]
 1338 0171 E3 04                   		mov.L	r4, [r0]
 1339 0173 EF 54                   		mov.L	r5, r4
 1340 0175 ED A3 0E                		mov.L	56[r10], r3
 1341 0178 CD A2 1D                		mov.B	29[r10], r2
 1342 017b EC 61                   		mov.L	[r6], r1
 1343 017d 05 00 00 00             		bsr	_CEscape
 1344 0181 E3 A1                   		mov.L	r1, [r10]
 410:../src/wolfcrypt/src/coding.c ****         if (ret != 0) break;
 1345                             		.loc 1 410 12
 1346 0183 EC A5                   		mov.L	[r10], r5
 1347 0185 61 05                   		cmp	#0, r5
 1348 0187 3B 89 00                		bne	.L96
 411:../src/wolfcrypt/src/coding.c ****         ret = CEscape(escaped, e4, out, &i, *outLen, 0, getSzOnly);
 1349                             		.loc 1 411 15
 1350 018a ED A5 0F                		mov.L	60[r10], r5
 1351 018d EC 54                   		mov.L	[r5], r4
 1352 018f 71 A5 2C                		add	#44, r10, r5
 1353 0192 ED A3 04                		mov.L	16[r10], r3
 1354 0195 A0 83                   		mov.L	r3, 8[r0]
 1355 0197 3E 01 00                		mov.L	#0, 4[r0]
 1356 019a E3 04                   		mov.L	r4, [r0]
 1357 019c EF 54                   		mov.L	r5, r4
 1358 019e ED A3 0E                		mov.L	56[r10], r3
 1359 01a1 CD A2 1E                		mov.B	30[r10], r2
 1360 01a4 EC 61                   		mov.L	[r6], r1
 1361 01a6 05 00 00 00             		bsr	_CEscape
 1362 01aa E3 A1                   		mov.L	r1, [r10]
 412:../src/wolfcrypt/src/coding.c ****         if (ret != 0) break;
 1363                             		.loc 1 412 12
 1364 01ac EC A5                   		mov.L	[r10], r5
 1365 01ae 61 05                   		cmp	#0, r5
 1366 01b0 21 62                   		bne	.L97
 413:../src/wolfcrypt/src/coding.c **** 
 414:../src/wolfcrypt/src/coding.c ****         inLen -= 3;
 1367                             		.loc 1 414 15
 1368 01b2 ED A5 0D                		mov.L	52[r10], r5
 1369 01b5 60 35                   		sub	#3, r5
 1370 01b7 E7 A5 0D                		mov.L	r5, 52[r10]
 415:../src/wolfcrypt/src/coding.c **** 
 416:../src/wolfcrypt/src/coding.c ****         /* Insert newline after BASE64_LINE_SZ, unless no \n requested */
 417:../src/wolfcrypt/src/coding.c ****         if (escaped != WC_NO_NL_ENC && (++n % (BASE64_LINE_SZ/4)) == 0 && inLen) {
 1371                             		.loc 1 417 12
 1372 01ba EC 65                   		mov.L	[r6], r5
 1373 01bc 61 25                   		cmp	#2, r5
 1374 01be 20 42                   		beq	.L74
 1375                             		.loc 1 417 37 discriminator 1
 1376 01c0 ED A5 02                		mov.L	8[r10], r5
 1377 01c3 62 15                   		add	#1, r5
 1378 01c5 E7 A5 02                		mov.L	r5, 8[r10]
 1379                             		.loc 1 417 45 discriminator 1
 1380 01c8 ED A5 02                		mov.L	8[r10], r5
 1381 01cb 64 F5                   		and	#15, r5
 1382                             		.loc 1 417 37 discriminator 1
 1383 01cd 61 05                   		cmp	#0, r5
 1384 01cf 21 31                   		bne	.L74
 1385                             		.loc 1 417 72 discriminator 2
 1386 01d1 ED A5 0D                		mov.L	52[r10], r5
 1387 01d4 61 05                   		cmp	#0, r5
 1388 01d6 20 2A                   		beq	.L74
 418:../src/wolfcrypt/src/coding.c ****             ret = CEscape(escaped, '\n', out, &i, *outLen, 1, getSzOnly);
 1389                             		.loc 1 418 19
 1390 01d8 ED A5 0F                		mov.L	60[r10], r5
 1391 01db EC 54                   		mov.L	[r5], r4
 1392 01dd 71 A5 2C                		add	#44, r10, r5
 1393 01e0 ED A3 04                		mov.L	16[r10], r3
 1394 01e3 A0 83                   		mov.L	r3, 8[r0]
 1395 01e5 3E 01 01                		mov.L	#1, 4[r0]
 1396 01e8 E3 04                   		mov.L	r4, [r0]
 1397 01ea EF 54                   		mov.L	r5, r4
 1398 01ec ED A3 0E                		mov.L	56[r10], r3
 1399 01ef 66 A2                   		mov	#10, r2
 1400 01f1 EC 61                   		mov.L	[r6], r1
 1401 01f3 05 00 00 00             		bsr	_CEscape
 1402 01f7 E3 A1                   		mov.L	r1, [r10]
 419:../src/wolfcrypt/src/coding.c ****             if (ret != 0) break;
 1403                             		.loc 1 419 16
 1404 01f9 EC A5                   		mov.L	[r10], r5
 1405 01fb 61 05                   		cmp	#0, r5
 1406 01fd 21 18                   		bne	.L98
 1407 01ff 03                      		.balign 8,3,1
 1408                             	.L74:
 1409                             	.LBE4:
 393:../src/wolfcrypt/src/coding.c ****         byte b1 = in[j++];
 1410                             		.loc 1 393 11
 1411 0200 ED A5 0D                		mov.L	52[r10], r5
 1412 0203 61 25                   		cmp	#2, r5
 1413 0205 25 05 38 96 FE          		bgtu	.L80
 1414 020a 2E 0C                   		bra	.L76
 1415                             	.L94:
 1416                             	.LBB5:
 406:../src/wolfcrypt/src/coding.c ****         ret = CEscape(escaped, e2, out, &i, *outLen, 0, getSzOnly);
 1417                             		.loc 1 406 9
 1418 020c 03                      		nop
 1419 020d 09                      		bra	.L76
 1420                             	.L95:
 408:../src/wolfcrypt/src/coding.c ****         ret = CEscape(escaped, e3, out, &i, *outLen, 0, getSzOnly);
 1421                             		.loc 1 408 9
 1422 020e 03                      		nop
 1423 020f 0F                      		bra	.L76
 1424                             	.L96:
 410:../src/wolfcrypt/src/coding.c ****         ret = CEscape(escaped, e4, out, &i, *outLen, 0, getSzOnly);
 1425                             		.loc 1 410 9
 1426 0210 03                      		nop
 1427 0211 0D                      		bra	.L76
 1428                             	.L97:
 412:../src/wolfcrypt/src/coding.c **** 
 1429                             		.loc 1 412 9
 1430 0212 03                      		nop
 1431 0213 2E 03                   		bra	.L76
 1432                             	.L98:
 1433                             		.loc 1 419 13
 1434 0215 03                      		nop
 1435                             		.balign 8,3,1
 1436                             	.L76:
 1437                             	.LBE5:
 420:../src/wolfcrypt/src/coding.c ****         }
 421:../src/wolfcrypt/src/coding.c ****     }
 422:../src/wolfcrypt/src/coding.c **** 
 423:../src/wolfcrypt/src/coding.c ****     /* last integral */
 424:../src/wolfcrypt/src/coding.c ****     if (inLen && ret == 0) {
 1438                             		.loc 1 424 8
 1439 0216 ED A5 0D                		mov.L	52[r10], r5
 1440 0219 61 05                   		cmp	#0, r5
 1441 021b 3A 33 01                		beq	.L81
 1442                             		.loc 1 424 15 discriminator 1
 1443 021e EC A5                   		mov.L	[r10], r5
 1444 0220 61 05                   		cmp	#0, r5
 1445 0222 3B 2C 01                		bne	.L81
 1446                             	.LBB6:
 425:../src/wolfcrypt/src/coding.c ****         int twoBytes = (inLen == 2);
 1447                             		.loc 1 425 31
 1448 0225 ED A5 0D                		mov.L	52[r10], r5
 1449 0228 61 25                   		cmp	#2, r5
 1450 022a FC DB 50                		sceq.L	r5
 1451                             		.loc 1 425 13
 1452 022d 5B 55                   		movu.B	r5, r5
 1453 022f E7 A5 08                		mov.L	r5, 32[r10]
 426:../src/wolfcrypt/src/coding.c **** 
 427:../src/wolfcrypt/src/coding.c ****         byte b1 = in[j++];
 1454                             		.loc 1 427 23
 1455 0232 ED A5 01                		mov.L	4[r10], r5
 1456 0235 71 54 01                		add	#1, r5, r4
 1457 0238 E7 A4 01                		mov.L	r4, 4[r10]
 1458                             		.loc 1 427 21
 1459 023b ED A4 0C                		mov.L	48[r10], r4
 1460 023e 4B 45                   		add	r4, r5
 1461                             		.loc 1 427 14
 1462 0240 CC 55                   		mov.B	[r5], r5
 1463 0242 C7 A5 24                		mov.B	r5, 36[r10]
 428:../src/wolfcrypt/src/coding.c ****         byte b2 = (twoBytes) ? in[j++] : 0;
 1464                             		.loc 1 428 14
 1465 0245 ED A5 08                		mov.L	32[r10], r5
 1466 0248 61 05                   		cmp	#0, r5
 1467 024a 20 13                   		beq	.L82
 1468                             		.loc 1 428 36 discriminator 1
 1469 024c ED A5 01                		mov.L	4[r10], r5
 1470 024f 71 54 01                		add	#1, r5, r4
 1471 0252 E7 A4 01                		mov.L	r4, 4[r10]
 1472                             		.loc 1 428 34 discriminator 1
 1473 0255 ED A4 0C                		mov.L	48[r10], r4
 1474 0258 4B 45                   		add	r4, r5
 1475                             		.loc 1 428 14 discriminator 1
 1476 025a CC 55                   		mov.B	[r5], r5
 1477 025c 0B                      		bra	.L83
 1478                             	.L82:
 1479                             		.loc 1 428 14 is_stmt 0 discriminator 2
 1480 025d 66 05                   		mov	#0, r5
 1481                             	.L83:
 1482                             		.loc 1 428 14 discriminator 4
 1483 025f C7 A5 25                		mov.B	r5, 37[r10]
 429:../src/wolfcrypt/src/coding.c **** 
 430:../src/wolfcrypt/src/coding.c ****         byte e1 = b1 >> 2;
 1484                             		.loc 1 430 14 is_stmt 1 discriminator 4
 1485 0262 59 A5 24                		movu.B	36[r10], r5
 1486 0265 68 25                   		shlr	#2, r5
 1487 0267 C7 A5 26                		mov.B	r5, 38[r10]
 431:../src/wolfcrypt/src/coding.c ****         byte e2 = (byte)(((b1 & 0x3) << 4) | (b2 >> 4));
 1488                             		.loc 1 431 38 discriminator 4
 1489 026a 59 A5 24                		movu.B	36[r10], r5
 1490 026d 6C 45                   		shll	#4, r5
 1491                             		.loc 1 431 44 discriminator 4
 1492 026f 75 25 30                		and	#48, r5
 1493 0272 CF 54                   		mov.B	r5, r4
 1494 0274 59 A5 25                		movu.B	37[r10], r5
 1495 0277 68 45                   		shlr	#4, r5
 1496 0279 57 45                   		or	r4, r5
 1497                             		.loc 1 431 14 discriminator 4
 1498 027b C7 A5 27                		mov.B	r5, 39[r10]
 432:../src/wolfcrypt/src/coding.c ****         byte e3 = (byte)((b2 & 0xF) << 2);
 1499                             		.loc 1 432 37 discriminator 4
 1500 027e CD A5 25                		mov.B	37[r10], r5
 1501 0281 6C 25                   		shll	#2, r5
 1502                             		.loc 1 432 14 discriminator 4
 1503 0283 75 25 3C                		and	#60, r5
 1504 0286 C7 A5 28                		mov.B	r5, 40[r10]
 433:../src/wolfcrypt/src/coding.c **** 
 434:../src/wolfcrypt/src/coding.c ****         ret = CEscape(escaped, e1, out, &i, *outLen, 0, getSzOnly);
 1505                             		.loc 1 434 15 discriminator 4
 1506 0289 ED A5 0F                		mov.L	60[r10], r5
 1507 028c EC 54                   		mov.L	[r5], r4
 1508 028e 71 A5 2C                		add	#44, r10, r5
 1509 0291 ED A3 04                		mov.L	16[r10], r3
 1510 0294 A0 83                   		mov.L	r3, 8[r0]
 1511 0296 3E 01 00                		mov.L	#0, 4[r0]
 1512 0299 E3 04                   		mov.L	r4, [r0]
 1513 029b EF 54                   		mov.L	r5, r4
 1514 029d ED A3 0E                		mov.L	56[r10], r3
 1515 02a0 CD A2 26                		mov.B	38[r10], r2
 1516 02a3 EC 61                   		mov.L	[r6], r1
 1517 02a5 05 00 00 00             		bsr	_CEscape
 1518 02a9 E3 A1                   		mov.L	r1, [r10]
 435:../src/wolfcrypt/src/coding.c ****         if (ret == 0)
 1519                             		.loc 1 435 12 discriminator 4
 1520 02ab EC A5                   		mov.L	[r10], r5
 1521 02ad 61 05                   		cmp	#0, r5
 1522 02af 21 24                   		bne	.L84
 436:../src/wolfcrypt/src/coding.c ****             ret = CEscape(escaped, e2, out, &i, *outLen, 0, getSzOnly);
 1523                             		.loc 1 436 19
 1524 02b1 ED A5 0F                		mov.L	60[r10], r5
 1525 02b4 EC 54                   		mov.L	[r5], r4
 1526 02b6 71 A5 2C                		add	#44, r10, r5
 1527 02b9 ED A3 04                		mov.L	16[r10], r3
 1528 02bc A0 83                   		mov.L	r3, 8[r0]
 1529 02be 3E 01 00                		mov.L	#0, 4[r0]
 1530 02c1 E3 04                   		mov.L	r4, [r0]
 1531 02c3 EF 54                   		mov.L	r5, r4
 1532 02c5 ED A3 0E                		mov.L	56[r10], r3
 1533 02c8 CD A2 27                		mov.B	39[r10], r2
 1534 02cb EC 61                   		mov.L	[r6], r1
 1535 02cd 05 00 00 00             		bsr	_CEscape
 1536 02d1 E3 A1                   		mov.L	r1, [r10]
 1537                             	.L84:
 437:../src/wolfcrypt/src/coding.c ****         if (ret == 0) {
 1538                             		.loc 1 437 12
 1539 02d3 EC A5                   		mov.L	[r10], r5
 1540 02d5 61 05                   		cmp	#0, r5
 1541 02d7 21 4F                   		bne	.L85
 438:../src/wolfcrypt/src/coding.c ****             /* third */
 439:../src/wolfcrypt/src/coding.c ****             if (twoBytes)
 1542                             		.loc 1 439 16
 1543 02d9 ED A5 08                		mov.L	32[r10], r5
 1544 02dc 61 05                   		cmp	#0, r5
 1545 02de 20 26                   		beq	.L86
 440:../src/wolfcrypt/src/coding.c ****                 ret = CEscape(escaped, e3, out, &i, *outLen, 0, getSzOnly);
 1546                             		.loc 1 440 23
 1547 02e0 ED A5 0F                		mov.L	60[r10], r5
 1548 02e3 EC 54                   		mov.L	[r5], r4
 1549 02e5 71 A5 2C                		add	#44, r10, r5
 1550 02e8 ED A3 04                		mov.L	16[r10], r3
 1551 02eb A0 83                   		mov.L	r3, 8[r0]
 1552 02ed 3E 01 00                		mov.L	#0, 4[r0]
 1553 02f0 E3 04                   		mov.L	r4, [r0]
 1554 02f2 EF 54                   		mov.L	r5, r4
 1555 02f4 ED A3 0E                		mov.L	56[r10], r3
 1556 02f7 CD A2 28                		mov.B	40[r10], r2
 1557 02fa EC 61                   		mov.L	[r6], r1
 1558 02fc 05 00 00 00             		bsr	_CEscape
 1559 0300 E3 A1                   		mov.L	r1, [r10]
 1560 0302 2E 24                   		bra	.L85
 1561                             	.L86:
 441:../src/wolfcrypt/src/coding.c ****             else
 442:../src/wolfcrypt/src/coding.c ****                 ret = CEscape(escaped, '=', out, &i, *outLen, 1, getSzOnly);
 1562                             		.loc 1 442 23
 1563 0304 ED A5 0F                		mov.L	60[r10], r5
 1564 0307 EC 54                   		mov.L	[r5], r4
 1565 0309 71 A5 2C                		add	#44, r10, r5
 1566 030c ED A3 04                		mov.L	16[r10], r3
 1567 030f A0 83                   		mov.L	r3, 8[r0]
 1568 0311 3E 01 01                		mov.L	#1, 4[r0]
 1569 0314 E3 04                   		mov.L	r4, [r0]
 1570 0316 EF 54                   		mov.L	r5, r4
 1571 0318 ED A3 0E                		mov.L	56[r10], r3
 1572 031b 75 42 3D                		mov	#61, r2
 1573 031e EC 61                   		mov.L	[r6], r1
 1574 0320 05 00 00 00             		bsr	_CEscape
 1575 0324 E3 A1                   		mov.L	r1, [r10]
 1576                             	.L85:
 443:../src/wolfcrypt/src/coding.c ****         }
 444:../src/wolfcrypt/src/coding.c ****         /* fourth always pad */
 445:../src/wolfcrypt/src/coding.c ****         if (ret == 0)
 1577                             		.loc 1 445 12
 1578 0326 EC A5                   		mov.L	[r10], r5
 1579 0328 61 05                   		cmp	#0, r5
 1580 032a 21 24                   		bne	.L81
 446:../src/wolfcrypt/src/coding.c ****             ret = CEscape(escaped, '=', out, &i, *outLen, 1, getSzOnly);
 1581                             		.loc 1 446 19
 1582 032c ED A5 0F                		mov.L	60[r10], r5
 1583 032f EC 54                   		mov.L	[r5], r4
 1584 0331 71 A5 2C                		add	#44, r10, r5
 1585 0334 ED A3 04                		mov.L	16[r10], r3
 1586 0337 A0 83                   		mov.L	r3, 8[r0]
 1587 0339 3E 01 01                		mov.L	#1, 4[r0]
 1588 033c E3 04                   		mov.L	r4, [r0]
 1589 033e EF 54                   		mov.L	r5, r4
 1590 0340 ED A3 0E                		mov.L	56[r10], r3
 1591 0343 75 42 3D                		mov	#61, r2
 1592 0346 EC 61                   		mov.L	[r6], r1
 1593 0348 05 00 00 00             		bsr	_CEscape
 1594 034c E3 A1                   		mov.L	r1, [r10]
 1595                             		.balign 8,3,1
 1596                             	.L81:
 1597                             	.LBE6:
 447:../src/wolfcrypt/src/coding.c ****     }
 448:../src/wolfcrypt/src/coding.c **** 
 449:../src/wolfcrypt/src/coding.c ****     if (ret == 0 && escaped != WC_NO_NL_ENC)
 1598                             		.loc 1 449 8
 1599 034e EC A5                   		mov.L	[r10], r5
 1600 0350 61 05                   		cmp	#0, r5
 1601 0352 21 29                   		bne	.L87
 1602                             		.loc 1 449 18 discriminator 1
 1603 0354 EC 65                   		mov.L	[r6], r5
 1604 0356 61 25                   		cmp	#2, r5
 1605 0358 20 23                   		beq	.L87
 450:../src/wolfcrypt/src/coding.c ****         ret = CEscape(escaped, '\n', out, &i, *outLen, 1, getSzOnly);
 1606                             		.loc 1 450 15
 1607 035a ED A5 0F                		mov.L	60[r10], r5
 1608 035d EC 54                   		mov.L	[r5], r4
 1609 035f 71 A5 2C                		add	#44, r10, r5
 1610 0362 ED A3 04                		mov.L	16[r10], r3
 1611 0365 A0 83                   		mov.L	r3, 8[r0]
 1612 0367 3E 01 01                		mov.L	#1, 4[r0]
 1613 036a E3 04                   		mov.L	r4, [r0]
 1614 036c EF 54                   		mov.L	r5, r4
 1615 036e ED A3 0E                		mov.L	56[r10], r3
 1616 0371 66 A2                   		mov	#10, r2
 1617 0373 EC 61                   		mov.L	[r6], r1
 1618 0375 05 00 00 00             		bsr	_CEscape
 1619 0379 E3 A1                   		mov.L	r1, [r10]
 1620                             	.L87:
 451:../src/wolfcrypt/src/coding.c **** 
 452:../src/wolfcrypt/src/coding.c ****     if (i != outSz && escaped != 1 && ret == 0)
 1621                             		.loc 1 452 11
 1622 037b ED A5 0B                		mov.L	44[r10], r5
 1623                             		.loc 1 452 8
 1624 037e ED A4 05                		mov.L	20[r10], r4
 1625 0381 47 54                   		cmp	r5, r4
 1626 0383 20 13                   		beq	.L88
 1627                             		.loc 1 452 20 discriminator 1
 1628 0385 EC 65                   		mov.L	[r6], r5
 1629 0387 61 15                   		cmp	#1, r5
 1630 0389 20 0D                   		beq	.L88
 1631                             		.loc 1 452 36 discriminator 2
 1632 038b EC A5                   		mov.L	[r10], r5
 1633 038d 61 05                   		cmp	#0, r5
 1634 038f 1F                      		bne	.L88
 453:../src/wolfcrypt/src/coding.c ****         return ASN_INPUT_E;
 1635                             		.loc 1 453 16
 1636 0390 FB 5A 66 FF             		mov.L	#-154, r5
 1637 0394 2E 3E                   		bra	.L93
 1638                             	.L88:
 454:../src/wolfcrypt/src/coding.c **** /* If the output buffer has a room for an extra byte, add a null terminator */
 455:../src/wolfcrypt/src/coding.c ****     if (out && *outLen > i)
 1639                             		.loc 1 455 8
 1640 0396 ED A5 0E                		mov.L	56[r10], r5
 1641 0399 61 05                   		cmp	#0, r5
 1642 039b 20 19                   		beq	.L89
 1643                             		.loc 1 455 16 discriminator 1
 1644 039d ED A5 0F                		mov.L	60[r10], r5
 1645 03a0 EC 54                   		mov.L	[r5], r4
 1646                             		.loc 1 455 24 discriminator 1
 1647 03a2 ED A5 0B                		mov.L	44[r10], r5
 1648                             		.loc 1 455 13 discriminator 1
 1649 03a5 47 54                   		cmp	r5, r4
 1650 03a7 25 0D                   		bleu	.L89
 456:../src/wolfcrypt/src/coding.c ****         out[i]= '\0';
 1651                             		.loc 1 456 12
 1652 03a9 ED A5 0B                		mov.L	44[r10], r5
 1653 03ac ED A4 0E                		mov.L	56[r10], r4
 1654 03af 4B 45                   		add	r4, r5
 1655                             		.loc 1 456 15
 1656 03b1 F8 54 00                		mov.B	#0, [r5]
 1657                             	.L89:
 457:../src/wolfcrypt/src/coding.c **** 
 458:../src/wolfcrypt/src/coding.c ****     *outLen = i;
 1658                             		.loc 1 458 13
 1659 03b4 ED A4 0B                		mov.L	44[r10], r4
 1660 03b7 ED A5 0F                		mov.L	60[r10], r5
 1661 03ba E3 54                   		mov.L	r4, [r5]
 459:../src/wolfcrypt/src/coding.c **** 
 460:../src/wolfcrypt/src/coding.c ****     if (ret == 0)
 1662                             		.loc 1 460 8
 1663 03bc EC A5                   		mov.L	[r10], r5
 1664 03be 61 05                   		cmp	#0, r5
 1665 03c0 21 10                   		bne	.L90
 461:../src/wolfcrypt/src/coding.c ****         return getSzOnly ? LENGTH_ONLY_E : 0;
 1666                             		.loc 1 461 42
 1667 03c2 ED A5 04                		mov.L	16[r10], r5
 1668 03c5 61 05                   		cmp	#0, r5
 1669 03c7 16                      		beq	.L91
 1670                             		.loc 1 461 42 is_stmt 0 discriminator 1
 1671 03c8 FB 5A 36 FF             		mov.L	#-202, r5
 1672 03cc 0E                      		bra	.L93
 1673                             	.L91:
 1674                             		.loc 1 461 42 discriminator 2
 1675 03cd 66 05                   		mov.L	#0, r5
 1676 03cf 0B                      		bra	.L93
 1677                             	.L90:
 462:../src/wolfcrypt/src/coding.c **** 
 463:../src/wolfcrypt/src/coding.c ****     return ret;
 1678                             		.loc 1 463 12 is_stmt 1
 1679 03d0 EC A5                   		mov.L	[r10], r5
 1680                             		.balign 8,3,1
 1681                             	.L93:
 464:../src/wolfcrypt/src/coding.c **** }
 1682                             		.loc 1 464 1 discriminator 1
 1683 03d2 EF 51                   		mov.L	r5, r1
 1684 03d4 71 00 50                		add	#0x50, r0
 1685 03d7 7E B6                   		pop	r6
 1686 03d9 7E BA                   		pop	r10
 1687 03db 02                      		rts
 1688                             	.LFE47:
 1690 03dc 76 10 01 00             		.section	.text.Base64_Encode,"ax",@progbits
 1691                             		.global	_Base64_Encode
 1693                             	_Base64_Encode:
 1694                             	.LFB48:
 465:../src/wolfcrypt/src/coding.c **** 
 466:../src/wolfcrypt/src/coding.c **** 
 467:../src/wolfcrypt/src/coding.c **** /* Base64 Encode, PEM style, with \n line endings */
 468:../src/wolfcrypt/src/coding.c **** int Base64_Encode(const byte* in, word32 inLen, byte* out, word32* outLen)
 469:../src/wolfcrypt/src/coding.c **** {
 1695                             		.loc 1 469 1
 1696 0000 7E AA                   		push.l	r10
 1697                             	.LCFI12:
 1698 0002 71 0A F0                		add	#-16, r0, r10
 1699                             	.LCFI13:
 1700 0005 71 A0 FC                		add	#-4, r10, r0
 1701                             	.LCFI14:
 1702 0008 E3 A1                   		mov.L	r1, [r10]
 1703 000a E7 A2 01                		mov.L	r2, 4[r10]
 1704 000d E7 A3 02                		mov.L	r3, 8[r10]
 1705 0010 E7 A4 03                		mov.L	r4, 12[r10]
 470:../src/wolfcrypt/src/coding.c ****     return DoBase64_Encode(in, inLen, out, outLen, WC_STD_ENC);
 1706                             		.loc 1 470 12
 1707 0013 F8 06 00                		mov.L	#0, [r0]
 1708 0016 ED A4 03                		mov.L	12[r10], r4
 1709 0019 ED A3 02                		mov.L	8[r10], r3
 1710 001c ED A2 01                		mov.L	4[r10], r2
 1711 001f EC A1                   		mov.L	[r10], r1
 1712 0021 05 00 00 00             		bsr	_DoBase64_Encode
 1713 0025 EF 15                   		mov.L	r1, r5
 471:../src/wolfcrypt/src/coding.c **** }
 1714                             		.loc 1 471 1
 1715 0027 EF 51                   		mov.L	r5, r1
 1716 0029 3F AA 06                		rtsd	#24, r10-r10
 1717                             	.LFE48:
 1719                             		.section	.text.Base64_EncodeEsc,"ax",@progbits
 1720                             		.global	_Base64_EncodeEsc
 1722                             	_Base64_EncodeEsc:
 1723                             	.LFB49:
 472:../src/wolfcrypt/src/coding.c **** 
 473:../src/wolfcrypt/src/coding.c **** 
 474:../src/wolfcrypt/src/coding.c **** /* Base64 Encode, with %0A escaped line endings instead of \n */
 475:../src/wolfcrypt/src/coding.c **** int Base64_EncodeEsc(const byte* in, word32 inLen, byte* out, word32* outLen)
 476:../src/wolfcrypt/src/coding.c **** {
 1724                             		.loc 1 476 1
 1725 0000 7E AA                   		push.l	r10
 1726                             	.LCFI15:
 1727 0002 71 0A F0                		add	#-16, r0, r10
 1728                             	.LCFI16:
 1729 0005 71 A0 FC                		add	#-4, r10, r0
 1730                             	.LCFI17:
 1731 0008 E3 A1                   		mov.L	r1, [r10]
 1732 000a E7 A2 01                		mov.L	r2, 4[r10]
 1733 000d E7 A3 02                		mov.L	r3, 8[r10]
 1734 0010 E7 A4 03                		mov.L	r4, 12[r10]
 477:../src/wolfcrypt/src/coding.c ****     return DoBase64_Encode(in, inLen, out, outLen, WC_ESC_NL_ENC);
 1735                             		.loc 1 477 12
 1736 0013 F8 06 01                		mov.L	#1, [r0]
 1737 0016 ED A4 03                		mov.L	12[r10], r4
 1738 0019 ED A3 02                		mov.L	8[r10], r3
 1739 001c ED A2 01                		mov.L	4[r10], r2
 1740 001f EC A1                   		mov.L	[r10], r1
 1741 0021 05 00 00 00             		bsr	_DoBase64_Encode
 1742 0025 EF 15                   		mov.L	r1, r5
 478:../src/wolfcrypt/src/coding.c **** }
 1743                             		.loc 1 478 1
 1744 0027 EF 51                   		mov.L	r5, r1
 1745 0029 3F AA 06                		rtsd	#24, r10-r10
 1746                             	.LFE49:
 1748                             		.section	.text.Base64_Encode_NoNl,"ax",@progbits
 1749                             		.global	_Base64_Encode_NoNl
 1751                             	_Base64_Encode_NoNl:
 1752                             	.LFB50:
 479:../src/wolfcrypt/src/coding.c **** 
 480:../src/wolfcrypt/src/coding.c **** int Base64_Encode_NoNl(const byte* in, word32 inLen, byte* out, word32* outLen)
 481:../src/wolfcrypt/src/coding.c **** {
 1753                             		.loc 1 481 1
 1754 0000 7E AA                   		push.l	r10
 1755                             	.LCFI18:
 1756 0002 71 0A F0                		add	#-16, r0, r10
 1757                             	.LCFI19:
 1758 0005 71 A0 FC                		add	#-4, r10, r0
 1759                             	.LCFI20:
 1760 0008 E3 A1                   		mov.L	r1, [r10]
 1761 000a E7 A2 01                		mov.L	r2, 4[r10]
 1762 000d E7 A3 02                		mov.L	r3, 8[r10]
 1763 0010 E7 A4 03                		mov.L	r4, 12[r10]
 482:../src/wolfcrypt/src/coding.c ****     return DoBase64_Encode(in, inLen, out, outLen, WC_NO_NL_ENC);
 1764                             		.loc 1 482 12
 1765 0013 F8 06 02                		mov.L	#2, [r0]
 1766 0016 ED A4 03                		mov.L	12[r10], r4
 1767 0019 ED A3 02                		mov.L	8[r10], r3
 1768 001c ED A2 01                		mov.L	4[r10], r2
 1769 001f EC A1                   		mov.L	[r10], r1
 1770 0021 05 00 00 00             		bsr	_DoBase64_Encode
 1771 0025 EF 15                   		mov.L	r1, r5
 483:../src/wolfcrypt/src/coding.c **** }
 1772                             		.loc 1 483 1
 1773 0027 EF 51                   		mov.L	r5, r1
 1774 0029 3F AA 06                		rtsd	#24, r10-r10
 1775                             	.LFE50:
 1973                             	.Letext0:
 1974                             		.file 2 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 1975                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1976                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1977                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1978                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1979                             		.file 7 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 1980                             		.file 8 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1981                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1982                             		.file 10 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/coding.h"
 1983                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
 1984                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha256.h"
 1985                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/wolfmath.h"
 1986                             		.file 14 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha.h"
 1987                             		.file 15 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/md5.h"
 1988                             		.file 16 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/asn_public.h"
 1989                             		.file 17 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/asn.h"
