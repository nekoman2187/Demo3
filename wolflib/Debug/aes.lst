   1                             		.file	"aes.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.rotlFixed,"ax",@progbits
   6                             	_rotlFixed:
   7                             	.LFB1:
   8                             		.file 1 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfcrypt/src/misc.c"
   1:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* misc.c
   2:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   3:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   5:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * This file is part of wolfSSL.
   6:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   7:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * it under the terms of the GNU General Public License as published by
   9:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * (at your option) any later version.
  11:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  12:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * GNU General Public License for more details.
  16:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  17:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * You should have received a copy of the GNU General Public License
  18:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * along with this program; if not, write to the Free Software
  19:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  21:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /*
  22:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  23:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** DESCRIPTION
  24:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** This module implements the arithmetic-shift right, left, byte swapping, XOR,
  25:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** masking and clearing memory logic.
  26:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  27:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** */
  28:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef HAVE_CONFIG_H
  29:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <config.h>
  30:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  31:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  32:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/settings.h>
  33:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  34:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLF_CRYPT_MISC_C
  35:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #define WOLF_CRYPT_MISC_C
  36:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  37:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/misc.h>
  38:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  39:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* inlining these functions is a huge speed increase and a small size decrease,
  40:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    because the functions are smaller than function call setup/cleanup, e.g.,
  41:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    md5 benchmark is twice as fast with inline.  If you don't want it, then
  42:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    define NO_INLINE and compile this file into wolfssl, otherwise it's used as
  43:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    a source header
  44:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  45:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  46:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef NO_INLINE
  47:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC
  48:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  49:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC static
  50:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  51:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  52:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* Check for if compiling misc.c when not needed. */
  53:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if !defined(WOLFSSL_MISC_INCLUDED) && !defined(NO_INLINE)
  54:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_IGNORE_FILE_WARN
  55:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #warning misc.c does not need to be compiled when using inline (NO_INLINE not defined)
  56:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
  57:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  58:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  59:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  60:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  61:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__ICCARM__)
  62:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <intrinsics.h>
  63:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  64:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  65:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  66:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef INTEL_INTRINSICS
  67:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  68:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <stdlib.h>      /* get intrinsic definitions */
  69:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  70:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* for non visual studio probably need no long version, 32 bit only
  71:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****      * i.e., _rotl and _rotr */
  72:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #pragma intrinsic(_lrotl, _lrotr)
  73:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  74:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  75:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  76:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotl(x, y) : x;
  77:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  78:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  79:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
  80:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  81:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotr(x, y) : x;
  82:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  83:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  84:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
  85:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  86:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <builtin.h>      /* get intrinsic definitions */
  87:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  88:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if !defined(NO_INLINE)
  89:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  90:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotlFixed(x, y) _builtin_rotl(x, y)
  91:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  92:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotrFixed(x, y) _builtin_rotr(x, y)
  93:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  94:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #else /* create real function */
  95:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  96:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  97:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  98:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotl(x, y);
  99:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 100:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 101:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 102:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 103:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotr(x, y);
 104:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 105:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 106:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 107:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 108:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else /* generic */
 109:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value. */
 110:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 111:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
 112:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
   9                             		.loc 1 112 5
  10 0000 6E 7A                   		pushm	r7-r10
  11                             	.LCFI0:
  12 0002 71 0A F8                		add	#-8, r0, r10
  13                             	.LCFI1:
  14 0005 EF A0                   		mov.L	r10, r0
  15 0007 E3 A1                   		mov.L	r1, [r10]
  16 0009 E7 A2 01                		mov.L	r2, 4[r10]
 113:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x << y) | (x >> (sizeof(y) * 8 - y));
  17                             		.loc 1 113 25
  18 000c EC A4                   		mov.L	[r10], r4
  19 000e ED A5 01                		mov.L	4[r10], r5
  20 0011 EF 47                   		mov.L	r4, r7
  21 0013 FD 66 57                		rotl	r5, r7
  22 0016 EF 75                   		mov.L	r7, r5
 114:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  23                             		.loc 1 114 5
  24 0018 EF 51                   		mov.L	r5, r1
  25 001a 3F 7A 06                		rtsd	#24, r7-r10
  26                             	.LFE1:
  28                             		.section	.text.ByteReverseWord32,"ax",@progbits
  30                             	_ByteReverseWord32:
  31                             	.LFB3:
 115:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 116:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value. */
 117:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 118:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 119:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x >> y) | (x << (sizeof(y) * 8 - y));
 120:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 121:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 122:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 123:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 124:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef WC_RC2
 125:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 126:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value */
 127:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotlFixed16(word16 x, word16 y)
 128:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 129:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 130:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 131:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 132:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 133:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value */
 134:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotrFixed16(word16 x, word16 y)
 135:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 136:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 137:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 138:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 139:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WC_RC2 */
 140:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 141:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of 32-bit word value. */
 142:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__CCRX__) && !defined(NO_INLINE) /* shortest version for CC-RX */
 143:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define ByteReverseWord32(value) _builtin_revl(value)
 144:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 145:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
 146:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
  32                             		.loc 1 146 1
  33 0000 7E AA                   		push.l	r10
  34                             	.LCFI2:
  35 0002 71 0A FC                		add	#-4, r0, r10
  36                             	.LCFI3:
  37 0005 EF A0                   		mov.L	r10, r0
  38 0007 E3 A1                   		mov.L	r1, [r10]
 147:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef PPC_INTRINSICS
 148:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* PPC: load reverse indexed instruction */
 149:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__lwbrx(&value,0);
 150:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__ICCARM__)
 151:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__REV(value);
 152:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(KEIL_INTRINSICS)
 153:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__rev(value);
 154:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
 155:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)_builtin_revl(value);
 156:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLF_ALLOW_BUILTIN) && \
 157:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 158:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__builtin_bswap32(value);
 159:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 160:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       defined(__aarch64__)
 161:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 162:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV32 %0, %0  \n"
 163:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 164:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 165:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 166:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 167:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 168:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       (defined(__thumb__) || defined(__arm__))
 169:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 170:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV %0, %0  \n"
 171:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 172:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 173:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 174:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 175:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(FAST_ROTATE)
 176:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 5 instructions with rotate instruction, 9 without */
 177:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (rotrFixed(value, 8U) & 0xff00ff00) |
 178:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****            (rotlFixed(value, 8U) & 0x00ff00ff);
 179:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 180:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 6 instructions with rotate instruction, 8 without */
 181:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
  39                             		.loc 1 181 35
  40 0009 EC A5                   		mov.L	[r10], r5
  41 000b 68 85                   		shlr	#8, r5
  42 000d FB 42 FF 00 FF 00       		mov.L	#0xff00ff, r4
  43 0013 53 54                   		and	r5, r4
  44                             		.loc 1 181 65
  45 0015 EC A5                   		mov.L	[r10], r5
  46 0017 6C 85                   		shll	#8, r5
  47 0019 74 25 00 FF 00 FF       		and	#-16711936, r5
  48                             		.loc 1 181 11
  49 001f 57 45                   		or	r4, r5
  50 0021 E3 A5                   		mov.L	r5, [r10]
 182:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed(value, 16U);
  51                             		.loc 1 182 12
  52 0023 75 42 10                		mov.L	#16, r2
  53 0026 EC A1                   		mov.L	[r10], r1
  54 0028 05 00 00 00             		bsr	_rotlFixed
  55 002c EF 15                   		mov.L	r1, r5
 183:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 184:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
  56                             		.loc 1 184 1
  57 002e EF 51                   		mov.L	r5, r1
  58 0030 3F AA 02                		rtsd	#8, r10-r10
  59                             	.LFE3:
  61                             		.section	.text.ByteReverseWords,"ax",@progbits
  63                             	_ByteReverseWords:
  64                             	.LFB4:
 185:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* __CCRX__ */
 186:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of words array of a given count. */
 187:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
 188:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                     word32 byteCount)
 189:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
  65                             		.loc 1 189 1
  66 0000 7E AA                   		push.l	r10
  67                             	.LCFI4:
  68 0002 7E A6                   		push.l	r6
  69                             	.LCFI5:
  70 0004 71 0A EC                		add	#-20, r0, r10
  71                             	.LCFI6:
  72 0007 EF A0                   		mov.L	r10, r0
  73 0009 E7 A1 02                		mov.L	r1, 8[r10]
  74 000c E7 A2 03                		mov.L	r2, 12[r10]
  75 000f E7 A3 04                		mov.L	r3, 16[r10]
 190:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word32), i;
  76                             		.loc 1 190 12
  77 0012 ED A5 04                		mov.L	16[r10], r5
  78 0015 68 25                   		shlr	#2, r5
  79 0017 E7 A5 01                		mov.L	r5, 4[r10]
 191:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
  80                             		.loc 1 192 12
  81 001a F8 A6 00                		mov.L	#0, [r10]
  82                             		.loc 1 192 5
  83 001d 2E 27                   		bra	.L6
  84                             	.L7:
 193:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
  85                             		.loc 1 193 38 discriminator 3
  86 001f EC A5                   		mov.L	[r10], r5
  87 0021 6C 25                   		shll	#2, r5
  88 0023 ED A4 03                		mov.L	12[r10], r4
  89 0026 4B 45                   		add	r4, r5
  90                             		.loc 1 193 18 discriminator 3
  91 0028 EC 53                   		mov.L	[r5], r3
  92                             		.loc 1 193 12 discriminator 3
  93 002a EC A5                   		mov.L	[r10], r5
  94 002c 6C 25                   		shll	#2, r5
  95 002e ED A4 02                		mov.L	8[r10], r4
  96 0031 FF 26 54                		add	r5, r4, r6
  97                             		.loc 1 193 18 discriminator 3
  98 0034 EF 31                   		mov.L	r3, r1
  99 0036 05 00 00 00             		bsr	_ByteReverseWord32
 100 003a EF 15                   		mov.L	r1, r5
 101                             		.loc 1 193 16 discriminator 3
 102 003c E3 65                   		mov.L	r5, [r6]
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
 103                             		.loc 1 192 29 discriminator 3
 104 003e EC A5                   		mov.L	[r10], r5
 105 0040 62 15                   		add	#1, r5
 106 0042 E3 A5                   		mov.L	r5, [r10]
 107                             	.L6:
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
 108                             		.loc 1 192 5 discriminator 1
 109 0044 EC A4                   		mov.L	[r10], r4
 110 0046 ED A5 01                		mov.L	4[r10], r5
 111 0049 47 54                   		cmp	r5, r4
 112 004b 23 D4                   		bltu	.L7
 194:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 195:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 113                             		.loc 1 195 1
 114 004d 03                      		nop
 115 004e 71 00 14                		add	#20, r0
 116 0051 7E B6                   		pop	r6
 117 0053 7E BA                   		pop	r10
 118 0055 02                      		rts
 119                             	.LFE4:
 121                             		.section	.text.ByteReverseWord64,"ax",@progbits
 123                             	_ByteReverseWord64:
 124                             	.LFB7:
 196:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 197:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WORD64_AVAILABLE) && !defined(WOLFSSL_NO_WORD64_OPS)
 198:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 199:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 200:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotlFixed64(word64 x, word64 y)
 201:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 202:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 203:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 204:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 205:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 206:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotrFixed64(word64 x, word64 y)
 207:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 208:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 209:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 210:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 211:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 212:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 ByteReverseWord64(word64 value)
 213:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 125                             		.loc 1 213 1
 126 0000 6E 6C                   		pushm	r6-r12
 127                             	.LCFI7:
 128 0002 71 0A E0                		add	#-32, r0, r10
 129                             	.LCFI8:
 130 0005 EF A0                   		mov.L	r10, r0
 131 0007 E3 A1                   		mov.L	r1, [r10]
 132 0009 E7 A2 01                		mov.L	r2, 4[r10]
 214:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WOLF_ALLOW_BUILTIN) && defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 215:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)__builtin_bswap64(value);
 216:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFCRYPT_SLOW_WORD64)
 217:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)((word64)ByteReverseWord32((word32) value)) << 32 |
 133                             		.loc 1 217 29
 134 000c EC A5                   		mov.L	[r10], r5
 135 000e EF 51                   		mov.L	r5, r1
 136 0010 05 00 00 00             		bsr	_ByteReverseWord32
 137 0014 EF 15                   		mov.L	r1, r5
 138                             		.loc 1 217 12
 139 0016 E7 A5 02                		mov.L	r5, 8[r10]
 140 0019 F9 A6 03 00             		mov.L	#0, 12[r10]
 141                             		.loc 1 217 64
 142 001d ED AC 02                		mov.L	8[r10], r12
 143 0020 6C 0C                   		shll	#0, r12
 144 0022 66 0B                   		mov.L	#0, r11
 218:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         (word64)ByteReverseWord32((word32)(value   >> 32));
 145                             		.loc 1 218 52
 146 0024 ED A5 01                		mov.L	4[r10], r5
 147 0027 68 05                   		shlr	#0, r5
 148 0029 E7 A5 04                		mov.L	r5, 16[r10]
 149 002c F9 A6 05 00             		mov.L	#0, 20[r10]
 150                             		.loc 1 218 17
 151 0030 ED A5 04                		mov.L	16[r10], r5
 152 0033 EF 51                   		mov.L	r5, r1
 153 0035 05 00 00 00             		bsr	_ByteReverseWord32
 154 0039 EF 15                   		mov.L	r1, r5
 155                             		.loc 1 218 9
 156 003b EF 58                   		mov.L	r5, r8
 157 003d 66 09                   		mov.L	#0, r9
 217:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         (word64)ByteReverseWord32((word32)(value   >> 32));
 158                             		.loc 1 217 70
 159 003f FF 57 8B                		or	r8, r11, r7
 160 0042 E7 A7 06                		mov.L	r7, 24[r10]
 161 0045 FF 57 9C                		or	r9, r12, r7
 162 0048 E7 A7 07                		mov.L	r7, 28[r10]
 163 004b ED A5 06                		mov.L	24[r10], r5
 164 004e ED A6 07                		mov.L	28[r10], r6
 219:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 220:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFF00FF00FF00FF00)) >> 8) |
 221:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x00FF00FF00FF00FF)) << 8);
 222:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFFFF0000FFFF0000)) >> 16) |
 223:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x0000FFFF0000FFFF)) << 16);
 224:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed64(value, 32U);
 225:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 226:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 165                             		.loc 1 226 1
 166 0051 EF 51                   		mov.L	r5, r1
 167 0053 EF 62                   		mov.L	r6, r2
 168 0055 3F 6C 0F                		rtsd	#60, r6-r12
 169                             	.LFE7:
 171                             		.section	.text.ByteReverseWords64,"ax",@progbits
 173                             	_ByteReverseWords64:
 174                             	.LFB8:
 227:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 228:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 229:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords64(word64* out, const word64* in,
 230:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                       word32 byteCount)
 231:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 175                             		.loc 1 231 1
 176 0000 6E 6B                   		pushm	r6-r11
 177                             	.LCFI9:
 178 0002 71 0A EC                		add	#-20, r0, r10
 179                             	.LCFI10:
 180 0005 EF A0                   		mov.L	r10, r0
 181 0007 E7 A1 02                		mov.L	r1, 8[r10]
 182 000a E7 A2 03                		mov.L	r2, 12[r10]
 183 000d E7 A3 04                		mov.L	r3, 16[r10]
 232:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word64), i;
 184                             		.loc 1 232 12
 185 0010 ED A5 04                		mov.L	16[r10], r5
 186 0013 68 35                   		shlr	#3, r5
 187 0015 E7 A5 01                		mov.L	r5, 4[r10]
 233:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 188                             		.loc 1 234 12
 189 0018 F8 A6 00                		mov.L	#0, [r10]
 190                             		.loc 1 234 5
 191 001b 2E 30                   		bra	.L11
 192                             	.L12:
 235:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 193                             		.loc 1 235 38 discriminator 3
 194 001d EC A5                   		mov.L	[r10], r5
 195 001f 6C 35                   		shll	#3, r5
 196 0021 ED A4 03                		mov.L	12[r10], r4
 197 0024 4B 54                   		add	r5, r4
 198                             		.loc 1 235 18 discriminator 3
 199 0026 EC 45                   		mov.L	[r4], r5
 200 0028 A8 4E                   		mov.L	4[r4], r6
 201                             		.loc 1 235 12 discriminator 3
 202 002a EC A4                   		mov.L	[r10], r4
 203 002c 6C 34                   		shll	#3, r4
 204 002e ED A3 02                		mov.L	8[r10], r3
 205 0031 FF 2B 43                		add	r4, r3, r11
 206                             		.loc 1 235 18 discriminator 3
 207 0034 EF 51                   		mov.L	r5, r1
 208 0036 EF 62                   		mov.L	r6, r2
 209 0038 05 00 00 00             		bsr	_ByteReverseWord64
 210 003c EF 15                   		mov.L	r1, r5
 211 003e EF 26                   		mov.L	r2, r6
 212                             		.loc 1 235 16 discriminator 3
 213 0040 E3 B5                   		mov.L	r5, [r11]
 214 0042 E7 B6 01                		mov.L	r6, 4[r11]
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 215                             		.loc 1 234 29 discriminator 3
 216 0045 EC A5                   		mov.L	[r10], r5
 217 0047 62 15                   		add	#1, r5
 218 0049 E3 A5                   		mov.L	r5, [r10]
 219                             	.L11:
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 220                             		.loc 1 234 5 discriminator 1
 221 004b EC A4                   		mov.L	[r10], r4
 222 004d ED A5 01                		mov.L	4[r10], r5
 223 0050 47 54                   		cmp	r5, r4
 224 0052 23 CB                   		bltu	.L12
 236:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 237:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 225                             		.loc 1 237 1
 226 0054 03                      		nop
 227 0055 3F 6B 0B                		rtsd	#44, r6-r11
 228                             	.LFE8:
 230                             		.section	.text.XorWordsOut,"ax",@progbits
 232                             	_XorWordsOut:
 233                             	.LFB9:
 238:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 239:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WORD64_AVAILABLE && !WOLFSSL_NO_WORD64_OPS */
 240:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 241:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_XOR_OPS
 242:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 243:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 244:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWordsOut(wolfssl_word* r, const wolfssl_word* a,
 245:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                      const wolfssl_word* b, word32 n)
 246:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 234                             		.loc 1 246 1
 235 0000 7E AA                   		push.l	r10
 236                             	.LCFI11:
 237 0002 71 0A EC                		add	#-20, r0, r10
 238                             	.LCFI12:
 239 0005 EF A0                   		mov.L	r10, r0
 240 0007 E7 A1 01                		mov.L	r1, 4[r10]
 241 000a E7 A2 02                		mov.L	r2, 8[r10]
 242 000d E7 A3 03                		mov.L	r3, 12[r10]
 243 0010 E7 A4 04                		mov.L	r4, 16[r10]
 247:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 248:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 249:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] = a[i] ^ b[i];
 244                             		.loc 1 249 12
 245 0013 F8 A6 00                		mov.L	#0, [r10]
 246                             		.loc 1 249 5
 247 0016 2E 2E                   		bra	.L14
 248                             	.L15:
 249                             		.loc 1 249 37 discriminator 3
 250 0018 EC A5                   		mov.L	[r10], r5
 251 001a 6C 25                   		shll	#2, r5
 252 001c ED A4 02                		mov.L	8[r10], r4
 253 001f 4B 45                   		add	r4, r5
 254 0021 EC 52                   		mov.L	[r5], r2
 255                             		.loc 1 249 44 discriminator 3
 256 0023 EC A5                   		mov.L	[r10], r5
 257 0025 6C 25                   		shll	#2, r5
 258 0027 ED A4 03                		mov.L	12[r10], r4
 259 002a 4B 45                   		add	r4, r5
 260 002c EC 53                   		mov.L	[r5], r3
 261                             		.loc 1 249 30 discriminator 3
 262 002e EC A5                   		mov.L	[r10], r5
 263 0030 6C 25                   		shll	#2, r5
 264 0032 ED A4 01                		mov.L	4[r10], r4
 265 0035 4B 45                   		add	r4, r5
 266                             		.loc 1 249 41 discriminator 3
 267 0037 EF 24                   		mov.L	r2, r4
 268 0039 FC 37 34                		xor	r3, r4
 269                             		.loc 1 249 34 discriminator 3
 270 003c E3 54                   		mov.L	r4, [r5]
 271                             		.loc 1 249 25 discriminator 3
 272 003e EC A5                   		mov.L	[r10], r5
 273 0040 62 15                   		add	#1, r5
 274 0042 E3 A5                   		mov.L	r5, [r10]
 275                             	.L14:
 276                             		.loc 1 249 5 discriminator 1
 277 0044 EC A4                   		mov.L	[r10], r4
 278 0046 ED A5 04                		mov.L	16[r10], r5
 279 0049 47 54                   		cmp	r5, r4
 280 004b 23 CD                   		bltu	.L15
 250:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 281                             		.loc 1 250 1
 282 004d 03                      		nop
 283 004e 3F AA 06                		rtsd	#24, r10-r10
 284                             	.LFE9:
 286                             		.section	.text.xorbufout,"ax",@progbits
 288                             	_xorbufout:
 289                             	.LFB10:
 251:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 252:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 253:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 254:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 255:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbufout(void*out, const void* buf, const void* mask,
 256:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                    word32 count)
 257:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 290                             		.loc 1 257 1
 291 0000 7E AA                   		push.l	r10
 292                             	.LCFI13:
 293 0002 71 0A E0                		add	#-32, r0, r10
 294                             	.LCFI14:
 295 0005 EF A0                   		mov.L	r10, r0
 296 0007 E7 A1 04                		mov.L	r1, 16[r10]
 297 000a E7 A2 05                		mov.L	r2, 20[r10]
 298 000d E7 A3 06                		mov.L	r3, 24[r10]
 299 0010 E7 A4 07                		mov.L	r4, 28[r10]
 258:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)out | (wc_ptr_t)buf | (wc_ptr_t)mask | count) %
 300                             		.loc 1 258 10
 301 0013 ED A4 04                		mov.L	16[r10], r4
 302                             		.loc 1 258 26
 303 0016 ED A5 05                		mov.L	20[r10], r5
 304                             		.loc 1 258 24
 305 0019 57 45                   		or	r4, r5
 306                             		.loc 1 258 42
 307 001b ED A4 06                		mov.L	24[r10], r4
 308                             		.loc 1 258 40
 309 001e 57 45                   		or	r4, r5
 310                             		.loc 1 258 57
 311 0020 ED A4 07                		mov.L	28[r10], r4
 312 0023 57 45                   		or	r4, r5
 313                             		.loc 1 258 66
 314 0025 64 35                   		and	#3, r5
 315                             		.loc 1 258 8
 316 0027 61 05                   		cmp	#0, r5
 317 0029 21 18                   		bne	.L17
 259:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                          WOLFSSL_WORD_SIZE == 0)
 260:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWordsOut( (wolfssl_word*)out, (wolfssl_word*)buf,
 318                             		.loc 1 260 9
 319 002b ED A5 07                		mov.L	28[r10], r5
 320 002e 68 25                   		shlr	#2, r5
 321 0030 EF 54                   		mov.L	r5, r4
 322 0032 ED A3 06                		mov.L	24[r10], r3
 323 0035 ED A2 05                		mov.L	20[r10], r2
 324 0038 ED A1 04                		mov.L	16[r10], r1
 325 003b 05 00 00 00             		bsr	_XorWordsOut
 261:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                      (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 262:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 263:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 264:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       o = (byte*)out;
 265:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 266:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 267:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) o[i] = b[i] ^ m[i];
 269:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 270:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 326                             		.loc 1 270 1
 327 003f 2E 43                   		bra	.L21
 328                             	.L17:
 329                             	.LBB2:
 264:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 330                             		.loc 1 264 21
 331 0041 ED A5 04                		mov.L	16[r10], r5
 332 0044 E7 A5 01                		mov.L	r5, 4[r10]
 265:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 333                             		.loc 1 265 21
 334 0047 ED A5 05                		mov.L	20[r10], r5
 335 004a E7 A5 02                		mov.L	r5, 8[r10]
 266:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 336                             		.loc 1 266 21
 337 004d ED A5 06                		mov.L	24[r10], r5
 338 0050 E7 A5 03                		mov.L	r5, 12[r10]
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 339                             		.loc 1 268 16
 340 0053 F8 A6 00                		mov.L	#0, [r10]
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 341                             		.loc 1 268 9
 342 0056 2E 23                   		bra	.L19
 343                             	.L20:
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 344                             		.loc 1 268 45 discriminator 3
 345 0058 ED A5 02                		mov.L	8[r10], r5
 346 005b 06 88 A5                		add	[r10].L, r5
 347 005e CC 53                   		mov.B	[r5], r3
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 348                             		.loc 1 268 52 discriminator 3
 349 0060 ED A5 03                		mov.L	12[r10], r5
 350 0063 06 88 A5                		add	[r10].L, r5
 351 0066 CC 54                   		mov.B	[r5], r4
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 352                             		.loc 1 268 38 discriminator 3
 353 0068 ED A5 01                		mov.L	4[r10], r5
 354 006b 06 88 A5                		add	[r10].L, r5
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 355                             		.loc 1 268 42 discriminator 3
 356 006e FC 37 34                		xor	r3, r4
 357 0071 C3 54                   		mov.B	r4, [r5]
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 358                             		.loc 1 268 33 discriminator 3
 359 0073 EC A5                   		mov.L	[r10], r5
 360 0075 62 15                   		add	#1, r5
 361 0077 E3 A5                   		mov.L	r5, [r10]
 362                             	.L19:
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 363                             		.loc 1 268 9 discriminator 1
 364 0079 EC A4                   		mov.L	[r10], r4
 365 007b ED A5 07                		mov.L	28[r10], r5
 366 007e 47 54                   		cmp	r5, r4
 367 0080 23 D8                   		bltu	.L20
 368                             	.L21:
 369                             	.LBE2:
 370                             		.loc 1 270 1
 371 0082 03                      		nop
 372 0083 3F AA 09                		rtsd	#36, r10-r10
 373                             	.LFE10:
 375                             		.section	.text.XorWords,"ax",@progbits
 377                             	_XorWords:
 378                             	.LFB11:
 271:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 272:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 273:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 274:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWords(wolfssl_word* r, const wolfssl_word* a, word32 n)
 275:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 379                             		.loc 1 275 1
 380 0000 7E AA                   		push.l	r10
 381                             	.LCFI15:
 382 0002 71 0A F0                		add	#-16, r0, r10
 383                             	.LCFI16:
 384 0005 EF A0                   		mov.L	r10, r0
 385 0007 E7 A1 01                		mov.L	r1, 4[r10]
 386 000a E7 A2 02                		mov.L	r2, 8[r10]
 387 000d E7 A3 03                		mov.L	r3, 12[r10]
 276:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 277:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 278:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] ^= a[i];
 388                             		.loc 1 278 12
 389 0010 F8 A6 00                		mov.L	#0, [r10]
 390                             		.loc 1 278 5
 391 0013 2E 2E                   		bra	.L23
 392                             	.L24:
 393                             		.loc 1 278 34 discriminator 3
 394 0015 EC A5                   		mov.L	[r10], r5
 395 0017 6C 25                   		shll	#2, r5
 396 0019 ED A4 01                		mov.L	4[r10], r4
 397 001c 4B 45                   		add	r4, r5
 398 001e EC 52                   		mov.L	[r5], r2
 399                             		.loc 1 278 38 discriminator 3
 400 0020 EC A5                   		mov.L	[r10], r5
 401 0022 6C 25                   		shll	#2, r5
 402 0024 ED A4 02                		mov.L	8[r10], r4
 403 0027 4B 45                   		add	r4, r5
 404 0029 EC 53                   		mov.L	[r5], r3
 405                             		.loc 1 278 34 discriminator 3
 406 002b EC A5                   		mov.L	[r10], r5
 407 002d 6C 25                   		shll	#2, r5
 408 002f ED A4 01                		mov.L	4[r10], r4
 409 0032 4B 45                   		add	r4, r5
 410 0034 EF 24                   		mov.L	r2, r4
 411 0036 FC 37 34                		xor	r3, r4
 412 0039 E3 54                   		mov.L	r4, [r5]
 413                             		.loc 1 278 25 discriminator 3
 414 003b EC A5                   		mov.L	[r10], r5
 415 003d 62 15                   		add	#1, r5
 416 003f E3 A5                   		mov.L	r5, [r10]
 417                             	.L23:
 418                             		.loc 1 278 5 discriminator 1
 419 0041 EC A4                   		mov.L	[r10], r4
 420 0043 ED A5 03                		mov.L	12[r10], r5
 421 0046 47 54                   		cmp	r5, r4
 422 0048 23 CD                   		bltu	.L24
 279:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 423                             		.loc 1 279 1
 424 004a 03                      		nop
 425 004b 3F AA 05                		rtsd	#20, r10-r10
 426                             	.LFE11:
 428                             		.section	.text.xorbuf,"ax",@progbits
 430                             	_xorbuf:
 431                             	.LFB12:
 280:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 281:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 282:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 283:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 284:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
 285:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 432                             		.loc 1 285 1
 433 0000 7E AA                   		push.l	r10
 434                             	.LCFI17:
 435 0002 71 0A E8                		add	#-24, r0, r10
 436                             	.LCFI18:
 437 0005 EF A0                   		mov.L	r10, r0
 438 0007 E7 A1 03                		mov.L	r1, 12[r10]
 439 000a E7 A2 04                		mov.L	r2, 16[r10]
 440 000d E7 A3 05                		mov.L	r3, 20[r10]
 286:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)buf | (wc_ptr_t)mask | count) % WOLFSSL_WORD_SIZE == 0)
 441                             		.loc 1 286 10
 442 0010 ED A4 03                		mov.L	12[r10], r4
 443                             		.loc 1 286 26
 444 0013 ED A5 04                		mov.L	16[r10], r5
 445                             		.loc 1 286 24
 446 0016 57 45                   		or	r4, r5
 447                             		.loc 1 286 41
 448 0018 ED A4 05                		mov.L	20[r10], r4
 449 001b 57 45                   		or	r4, r5
 450                             		.loc 1 286 50
 451 001d 64 35                   		and	#3, r5
 452                             		.loc 1 286 8
 453 001f 61 05                   		cmp	#0, r5
 454 0021 21 15                   		bne	.L26
 287:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWords( (wolfssl_word*)buf,
 455                             		.loc 1 287 9
 456 0023 ED A5 05                		mov.L	20[r10], r5
 457 0026 68 25                   		shlr	#2, r5
 458 0028 EF 53                   		mov.L	r5, r3
 459 002a ED A2 04                		mov.L	16[r10], r2
 460 002d ED A1 03                		mov.L	12[r10], r1
 461 0030 05 00 00 00             		bsr	_XorWords
 288:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                   (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 289:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 290:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 291:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 292:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 293:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) b[i] ^= m[i];
 295:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 296:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 462                             		.loc 1 296 1
 463 0034 2E 3D                   		bra	.L30
 464                             	.L26:
 465                             	.LBB3:
 291:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 466                             		.loc 1 291 21
 467 0036 ED A5 03                		mov.L	12[r10], r5
 468 0039 E7 A5 01                		mov.L	r5, 4[r10]
 292:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 469                             		.loc 1 292 21
 470 003c ED A5 04                		mov.L	16[r10], r5
 471 003f E7 A5 02                		mov.L	r5, 8[r10]
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 472                             		.loc 1 294 16
 473 0042 F8 A6 00                		mov.L	#0, [r10]
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 474                             		.loc 1 294 9
 475 0045 2E 23                   		bra	.L28
 476                             	.L29:
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 477                             		.loc 1 294 42 discriminator 3
 478 0047 ED A5 01                		mov.L	4[r10], r5
 479 004a 06 88 A5                		add	[r10].L, r5
 480 004d CC 53                   		mov.B	[r5], r3
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 481                             		.loc 1 294 46 discriminator 3
 482 004f ED A5 02                		mov.L	8[r10], r5
 483 0052 06 88 A5                		add	[r10].L, r5
 484 0055 CC 54                   		mov.B	[r5], r4
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 485                             		.loc 1 294 42 discriminator 3
 486 0057 ED A5 01                		mov.L	4[r10], r5
 487 005a 06 88 A5                		add	[r10].L, r5
 488 005d FC 37 34                		xor	r3, r4
 489 0060 C3 54                   		mov.B	r4, [r5]
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 490                             		.loc 1 294 33 discriminator 3
 491 0062 EC A5                   		mov.L	[r10], r5
 492 0064 62 15                   		add	#1, r5
 493 0066 E3 A5                   		mov.L	r5, [r10]
 494                             	.L28:
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 495                             		.loc 1 294 9 discriminator 1
 496 0068 EC A4                   		mov.L	[r10], r4
 497 006a ED A5 05                		mov.L	20[r10], r5
 498 006d 47 54                   		cmp	r5, r4
 499 006f 23 D8                   		bltu	.L29
 500                             	.L30:
 501                             	.LBE3:
 502                             		.loc 1 296 1
 503 0071 03                      		nop
 504 0072 3F AA 07                		rtsd	#28, r10-r10
 505                             	.LFE12:
 507                             		.section	.text.ForceZero,"ax",@progbits
 509                             	_ForceZero:
 510                             	.LFB13:
 297:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 298:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 299:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_FORCE_ZERO
 300:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine fills the first len bytes of the memory area pointed by mem
 301:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    with zeros. It ensures compiler optimizations doesn't skip it  */
 302:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
 303:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 511                             		.loc 1 303 1
 512 0000 7E AA                   		push.l	r10
 513                             	.LCFI19:
 514 0002 71 0A F4                		add	#-12, r0, r10
 515                             	.LCFI20:
 516 0005 EF A0                   		mov.L	r10, r0
 517 0007 E7 A1 01                		mov.L	r1, 4[r10]
 518 000a E7 A2 02                		mov.L	r2, 8[r10]
 304:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile byte* z = (volatile byte*)mem;
 519                             		.loc 1 304 20
 520 000d ED A5 01                		mov.L	4[r10], r5
 521 0010 E3 A5                   		mov.L	r5, [r10]
 305:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 306:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if (defined(WOLFSSL_X86_64_BUILD) || defined(WOLFSSL_AARCH64_BUILD)) \
 307:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****             && defined(WORD64_AVAILABLE)
 308:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile word64* w;
 309:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_UNALIGNED_64BIT_ACCESS
 310:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 l = (sizeof(word64) - ((size_t)z & (sizeof(word64)-1))) &
 311:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                              (sizeof(word64)-1);
 312:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 313:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         if (len < l) l = len;
 314:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         len -= l;
 315:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         while (l--) *z++ = 0;
 316:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 317:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
 318:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         *w++ = 0;
 319:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     z = (volatile byte*)w;
 320:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 321:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 322:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     while (len--) *z++ = 0;
 522                             		.loc 1 322 11
 523 0012 2E 0C                   		bra	.L32
 524                             	.L33:
 525                             		.loc 1 322 21 discriminator 2
 526 0014 EC A5                   		mov.L	[r10], r5
 527 0016 71 54 01                		add	#1, r5, r4
 528 0019 E3 A4                   		mov.L	r4, [r10]
 529                             		.loc 1 322 24 discriminator 2
 530 001b F8 54 00                		mov.B	#0, [r5]
 531                             	.L32:
 532                             		.loc 1 322 15 discriminator 1
 533 001e ED A5 02                		mov.L	8[r10], r5
 534 0021 71 54 FF                		add	#-1, r5, r4
 535 0024 E7 A4 02                		mov.L	r4, 8[r10]
 536                             		.loc 1 322 11 discriminator 1
 537 0027 61 05                   		cmp	#0, r5
 538 0029 21 EB                   		bne	.L33
 323:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 539                             		.loc 1 323 1
 540 002b 03                      		nop
 541 002c 3F AA 04                		rtsd	#16, r10-r10
 542                             	.LFE13:
 544                             		.section	.text.ConstantCompare,"ax",@progbits
 546                             	_ConstantCompare:
 547                             	.LFB14:
 324:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 325:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 326:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 327:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_CONST_CMP
 328:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* check all length bytes for equality, return 0 on success */
 329:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE int ConstantCompare(const byte* a, const byte* b, int length)
 330:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 548                             		.loc 1 330 1
 549 0000 7E AA                   		push.l	r10
 550                             	.LCFI21:
 551 0002 71 0A EC                		add	#-20, r0, r10
 552                             	.LCFI22:
 553 0005 EF A0                   		mov.L	r10, r0
 554 0007 E7 A1 02                		mov.L	r1, 8[r10]
 555 000a E7 A2 03                		mov.L	r2, 12[r10]
 556 000d E7 A3 04                		mov.L	r3, 16[r10]
 331:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     int i;
 332:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     int compareSum = 0;
 557                             		.loc 1 332 9
 558 0010 F9 A6 01 00             		mov.L	#0, 4[r10]
 333:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 334:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < length; i++) {
 559                             		.loc 1 334 12
 560 0014 F8 A6 00                		mov.L	#0, [r10]
 561                             		.loc 1 334 5
 562 0017 2E 27                   		bra	.L35
 563                             	.L36:
 335:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         compareSum |= a[i] ^ b[i];
 564                             		.loc 1 335 24 discriminator 3
 565 0019 EC A5                   		mov.L	[r10], r5
 566 001b ED A4 02                		mov.L	8[r10], r4
 567 001e 4B 45                   		add	r4, r5
 568 0020 CC 53                   		mov.B	[r5], r3
 569                             		.loc 1 335 31 discriminator 3
 570 0022 EC A5                   		mov.L	[r10], r5
 571 0024 ED A4 03                		mov.L	12[r10], r4
 572 0027 4B 45                   		add	r4, r5
 573 0029 CC 55                   		mov.B	[r5], r5
 574                             		.loc 1 335 28 discriminator 3
 575 002b FC 37 35                		xor	r3, r5
 576 002e 5B 55                   		movu.B	r5, r5
 577                             		.loc 1 335 20 discriminator 3
 578 0030 ED A4 01                		mov.L	4[r10], r4
 579 0033 57 45                   		or	r4, r5
 580 0035 E7 A5 01                		mov.L	r5, 4[r10]
 334:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         compareSum |= a[i] ^ b[i];
 581                             		.loc 1 334 30 discriminator 3
 582 0038 EC A5                   		mov.L	[r10], r5
 583 003a 62 15                   		add	#1, r5
 584 003c E3 A5                   		mov.L	r5, [r10]
 585                             	.L35:
 334:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         compareSum |= a[i] ^ b[i];
 586                             		.loc 1 334 5 discriminator 1
 587 003e EC A4                   		mov.L	[r10], r4
 588 0040 ED A5 04                		mov.L	16[r10], r5
 589 0043 47 54                   		cmp	r5, r4
 590 0045 29 D4                   		blt	.L36
 336:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 337:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 338:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return compareSum;
 591                             		.loc 1 338 12
 592 0047 ED A5 01                		mov.L	4[r10], r5
 339:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 593                             		.loc 1 339 1
 594 004a EF 51                   		mov.L	r5, r1
 595 004c 3F AA 06                		rtsd	#24, r10-r10
 596                             	.LFE14:
 598                             		.section	.rodata.rcon,"a"
 599                             		.balign 4
 602                             	_rcon:
 603 0000 00 00 00 01             		.long	0x1000000
 604 0004 00 00 00 02             		.long	0x2000000
 605 0008 00 00 00 04             		.long	0x4000000
 606 000c 00 00 00 08             		.long	0x8000000
 607 0010 00 00 00 10             		.long	0x10000000
 608 0014 00 00 00 20             		.long	0x20000000
 609 0018 00 00 00 40             		.long	0x40000000
 610 001c 00 00 00 80             		.long	-2147483648
 611 0020 00 00 00 1B             		.long	0x1b000000
 612 0024 00 00 00 36             		.long	0x36000000
 613                             		.section	.rodata.Te,"a"
 614                             		.balign 4
 617                             	_Te:
 618 0000 A5 63 63 C6             		.long	-966564955
 619 0004 84 7C 7C F8             		.long	-126059388
 620 0008 99 77 77 EE             		.long	-294160487
 621 000c 8D 7B 7B F6             		.long	-159679603
 622 0010 0D F2 F2 FF             		.long	-855539
 623 0014 BD 6B 6B D6             		.long	-697603139
 624 0018 B1 6F 6F DE             		.long	-563122255
 625 001c 54 C5 C5 91             		.long	-1849309868
 626 0020 50 30 30 60             		.long	0x60303050
 627 0024 03 01 01 02             		.long	0x2010103
 628 0028 A9 67 67 CE             		.long	-832084055
 629 002c 7D 2B 2B 56             		.long	0x562b2b7d
 630 0030 19 FE FE E7             		.long	-402719207
 631 0034 62 D7 D7 B5             		.long	-1244145822
 632 0038 E6 AB AB 4D             		.long	0x4dababe6
 633 003c 9A 76 76 EC             		.long	-327780710
 634 0040 45 CA CA 8F             		.long	-1882535355
 635 0044 9D 82 82 1F             		.long	0x1f82829d
 636 0048 40 C9 C9 89             		.long	-1983264448
 637 004c 87 7D 7D FA             		.long	-92439161
 638 0050 15 FA FA EF             		.long	-268764651
 639 0054 EB 59 59 B2             		.long	-1302767125
 640 0058 C9 47 47 8E             		.long	-1907931191
 641 005c 0B F0 F0 FB             		.long	-68095989
 642 0060 EC AD AD 41             		.long	0x41adadec
 643 0064 67 D4 D4 B3             		.long	-1277897625
 644 0068 FD A2 A2 5F             		.long	0x5fa2a2fd
 645 006c EA AF AF 45             		.long	0x45afafea
 646 0070 BF 9C 9C 23             		.long	0x239c9cbf
 647 0074 F7 A4 A4 53             		.long	0x53a4a4f7
 648 0078 96 72 72 E4             		.long	-462261610
 649 007c 5B C0 C0 9B             		.long	-1681866661
 650 0080 C2 B7 B7 75             		.long	0x75b7b7c2
 651 0084 1C FD FD E1             		.long	-503448292
 652 0088 AE 93 93 3D             		.long	0x3d9393ae
 653 008c 6A 26 26 4C             		.long	0x4c26266a
 654 0090 5A 36 36 6C             		.long	0x6c36365a
 655 0094 41 3F 3F 7E             		.long	0x7e3f3f41
 656 0098 02 F7 F7 F5             		.long	-168298750
 657 009c 4F CC CC 83             		.long	-2083730353
 658 00a0 5C 34 34 68             		.long	0x6834345c
 659 00a4 F4 A5 A5 51             		.long	0x51a5a5f4
 660 00a8 34 E5 E5 D1             		.long	-773462732
 661 00ac 08 F1 F1 F9             		.long	-101584632
 662 00b0 93 71 71 E2             		.long	-495881837
 663 00b4 73 D8 D8 AB             		.long	-1411852173
 664 00b8 53 31 31 62             		.long	0x62313153
 665 00bc 3F 15 15 2A             		.long	0x2a15153f
 666 00c0 0C 04 04 08             		.long	0x804040c
 667 00c4 52 C7 C7 95             		.long	-1782069422
 668 00c8 65 23 23 46             		.long	0x46232365
 669 00cc 5E C3 C3 9D             		.long	-1648114850
 670 00d0 28 18 18 30             		.long	0x30181828
 671 00d4 A1 96 96 37             		.long	0x379696a1
 672 00d8 0F 05 05 0A             		.long	0xa05050f
 673 00dc B5 9A 9A 2F             		.long	0x2f9a9ab5
 674 00e0 09 07 07 0E             		.long	0xe070709
 675 00e4 36 12 12 24             		.long	0x24121236
 676 00e8 9B 80 80 1B             		.long	0x1b80809b
 677 00ec 3D E2 E2 DF             		.long	-538779075
 678 00f0 26 EB EB CD             		.long	-840176858
 679 00f4 69 27 27 4E             		.long	0x4e272769
 680 00f8 CD B2 B2 7F             		.long	0x7fb2b2cd
 681 00fc 9F 75 75 EA             		.long	-361400929
 682 0100 1B 09 09 12             		.long	0x1209091b
 683 0104 9E 83 83 1D             		.long	0x1d83839e
 684 0108 74 2C 2C 58             		.long	0x582c2c74
 685 010c 2E 1A 1A 34             		.long	0x341a1a2e
 686 0110 2D 1B 1B 36             		.long	0x361b1b2d
 687 0114 B2 6E 6E DC             		.long	-596742478
 688 0118 EE 5A 5A B4             		.long	-1269146898
 689 011c FB A0 A0 5B             		.long	0x5ba0a0fb
 690 0120 F6 52 52 A4             		.long	-1538108682
 691 0124 4D 3B 3B 76             		.long	0x763b3b4d
 692 0128 61 D6 D6 B7             		.long	-1210657183
 693 012c CE B3 B3 7D             		.long	0x7db3b3ce
 694 0130 7B 29 29 52             		.long	0x5229297b
 695 0134 3E E3 E3 DD             		.long	-572267714
 696 0138 71 2F 2F 5E             		.long	0x5e2f2f71
 697 013c 97 84 84 13             		.long	0x13848497
 698 0140 F5 53 53 A6             		.long	-1504488459
 699 0144 68 D1 D1 B9             		.long	-1177431704
 700 0148 00 00 00 00             		.long	0
 701 014c 2C ED ED C1             		.long	-1041371860
 702 0150 60 20 20 40             		.long	0x40202060
 703 0154 1F FC FC E3             		.long	-469959649
 704 0158 C8 B1 B1 79             		.long	0x79b1b1c8
 705 015c ED 5B 5B B6             		.long	-1235526675
 706 0160 BE 6A 6A D4             		.long	-731223362
 707 0164 46 CB CB 8D             		.long	-1916023994
 708 0168 D9 BE BE 67             		.long	0x67bebed9
 709 016c 4B 39 39 72             		.long	0x7239394b
 710 0170 DE 4A 4A 94             		.long	-1807070498
 711 0174 D4 4C 4C 98             		.long	-1739830060
 712 0178 E8 58 58 B0             		.long	-1336387352
 713 017c 4A CF CF 85             		.long	-2049978550
 714 0180 6B D0 D0 BB             		.long	-1143943061
 715 0184 2A EF EF C5             		.long	-974131414
 716 0188 E5 AA AA 4F             		.long	0x4faaaae5
 717 018c 16 FB FB ED             		.long	-302253290
 718 0190 C5 43 43 86             		.long	-2042412091
 719 0194 D7 4D 4D 9A             		.long	-1706209833
 720 0198 55 33 33 66             		.long	0x66333355
 721 019c 94 85 85 11             		.long	0x11858594
 722 01a0 CF 45 45 8A             		.long	-1975171633
 723 01a4 10 F9 F9 E9             		.long	-369493744
 724 01a8 06 02 02 04             		.long	0x4020206
 725 01ac 81 7F 7F FE             		.long	-25198719
 726 01b0 F0 50 50 A0             		.long	-1605349136
 727 01b4 44 3C 3C 78             		.long	0x783c3c44
 728 01b8 BA 9F 9F 25             		.long	0x259f9fba
 729 01bc E3 A8 A8 4B             		.long	0x4ba8a8e3
 730 01c0 F3 51 51 A2             		.long	-1571728909
 731 01c4 FE A3 A3 5D             		.long	0x5da3a3fe
 732 01c8 C0 40 40 80             		.long	-2143272768
 733 01cc 8A 8F 8F 05             		.long	0x58f8f8a
 734 01d0 AD 92 92 3F             		.long	0x3f9292ad
 735 01d4 BC 9D 9D 21             		.long	0x219d9dbc
 736 01d8 48 38 38 70             		.long	0x70383848
 737 01dc 04 F5 F5 F1             		.long	-235539196
 738 01e0 DF BC BC 63             		.long	0x63bcbcdf
 739 01e4 C1 B6 B6 77             		.long	0x77b6b6c1
 740 01e8 75 DA DA AF             		.long	-1344611723
 741 01ec 63 21 21 42             		.long	0x42212163
 742 01f0 30 10 10 20             		.long	0x20101030
 743 01f4 1A FF FF E5             		.long	-436207846
 744 01f8 0E F3 F3 FD             		.long	-34344178
 745 01fc 6D D2 D2 BF             		.long	-1076702611
 746 0200 4C CD CD 81             		.long	-2117218996
 747 0204 14 0C 0C 18             		.long	0x180c0c14
 748 0208 35 13 13 26             		.long	0x26131335
 749 020c 2F EC EC C3             		.long	-1007883217
 750 0210 E1 5F 5F BE             		.long	-1101045791
 751 0214 A2 97 97 35             		.long	0x359797a2
 752 0218 CC 44 44 88             		.long	-2008791860
 753 021c 39 17 17 2E             		.long	0x2e171739
 754 0220 57 C4 C4 93             		.long	-1815821225
 755 0224 F2 A7 A7 55             		.long	0x55a7a7f2
 756 0228 82 7E 7E FC             		.long	-58818942
 757 022c 47 3D 3D 7A             		.long	0x7a3d3d47
 758 0230 AC 64 64 C8             		.long	-932944724
 759 0234 E7 5D 5D BA             		.long	-1168286233
 760 0238 2B 19 19 32             		.long	0x3219192b
 761 023c 95 73 73 E6             		.long	-428641387
 762 0240 A0 60 60 C0             		.long	-1067425632
 763 0244 98 81 81 19             		.long	0x19818198
 764 0248 D1 4F 4F 9E             		.long	-1638969391
 765 024c 7F DC DC A3             		.long	-1545806721
 766 0250 66 22 22 44             		.long	0x44222266
 767 0254 7E 2A 2A 54             		.long	0x542a2a7e
 768 0258 AB 90 90 3B             		.long	0x3b9090ab
 769 025c 83 88 88 0B             		.long	0xb888883
 770 0260 CA 46 46 8C             		.long	-1941551414
 771 0264 29 EE EE C7             		.long	-940642775
 772 0268 D3 B8 B8 6B             		.long	0x6bb8b8d3
 773 026c 3C 14 14 28             		.long	0x2814143c
 774 0270 79 DE DE A7             		.long	-1478566279
 775 0274 E2 5E 5E BC             		.long	-1134666014
 776 0278 1D 0B 0B 16             		.long	0x160b0b1d
 777 027c 76 DB DB AD             		.long	-1378100362
 778 0280 3B E0 E0 DB             		.long	-606019525
 779 0284 56 32 32 64             		.long	0x64323256
 780 0288 4E 3A 3A 74             		.long	0x743a3a4e
 781 028c 1E 0A 0A 14             		.long	0x140a0a1e
 782 0290 DB 49 49 92             		.long	-1840690725
 783 0294 0A 06 06 0C             		.long	0xc06060a
 784 0298 6C 24 24 48             		.long	0x4824246c
 785 029c E4 5C 5C B8             		.long	-1201906460
 786 02a0 5D C2 C2 9F             		.long	-1614626211
 787 02a4 6E D3 D3 BD             		.long	-1110191250
 788 02a8 EF AC AC 43             		.long	0x43acacef
 789 02ac A6 62 62 C4             		.long	-1000185178
 790 02b0 A8 91 91 39             		.long	0x399191a8
 791 02b4 A4 95 95 31             		.long	0x319595a4
 792 02b8 37 E4 E4 D3             		.long	-739974089
 793 02bc 8B 79 79 F2             		.long	-226920053
 794 02c0 32 E7 E7 D5             		.long	-706222286
 795 02c4 43 C8 C8 8B             		.long	-1949775805
 796 02c8 59 37 37 6E             		.long	0x6e373759
 797 02cc B7 6D 6D DA             		.long	-630362697
 798 02d0 8C 8D 8D 01             		.long	0x18d8d8c
 799 02d4 64 D5 D5 B1             		.long	-1311386268
 800 02d8 D2 4E 4E 9C             		.long	-1672589614
 801 02dc E0 A9 A9 49             		.long	0x49a9a9e0
 802 02e0 B4 6C 6C D8             		.long	-663982924
 803 02e4 FA 56 56 AC             		.long	-1403627782
 804 02e8 07 F4 F4 F3             		.long	-202050553
 805 02ec 25 EA EA CF             		.long	-806688219
 806 02f0 AF 65 65 CA             		.long	-899324497
 807 02f4 8E 7A 7A F4             		.long	-193299826
 808 02f8 E9 AE AE 47             		.long	0x47aeaee9
 809 02fc 18 08 08 10             		.long	0x10080818
 810 0300 D5 BA BA 6F             		.long	0x6fbabad5
 811 0304 88 78 78 F0             		.long	-260540280
 812 0308 6F 25 25 4A             		.long	0x4a25256f
 813 030c 72 2E 2E 5C             		.long	0x5c2e2e72
 814 0310 24 1C 1C 38             		.long	0x381c1c24
 815 0314 F1 A6 A6 57             		.long	0x57a6a6f1
 816 0318 C7 B4 B4 73             		.long	0x73b4b4c7
 817 031c 51 C6 C6 97             		.long	-1748580783
 818 0320 23 E8 E8 CB             		.long	-873928669
 819 0324 7C DD DD A1             		.long	-1579295364
 820 0328 9C 74 74 E8             		.long	-395021156
 821 032c 21 1F 1F 3E             		.long	0x3e1f1f21
 822 0330 DD 4B 4B 96             		.long	-1773450275
 823 0334 DC BD BD 61             		.long	0x61bdbddc
 824 0338 86 8B 8B 0D             		.long	0xd8b8b86
 825 033c 85 8A 8A 0F             		.long	0xf8a8a85
 826 0340 90 70 70 E0             		.long	-529502064
 827 0344 42 3E 3E 7C             		.long	0x7c3e3e42
 828 0348 C4 B5 B5 71             		.long	0x71b5b5c4
 829 034c AA 66 66 CC             		.long	-865704278
 830 0350 D8 48 48 90             		.long	-1874310952
 831 0354 05 03 03 06             		.long	0x6030305
 832 0358 01 F6 F6 F7             		.long	-134810111
 833 035c 12 0E 0E 1C             		.long	0x1c0e0e12
 834 0360 A3 61 61 C2             		.long	-1033805405
 835 0364 5F 35 35 6A             		.long	0x6a35355f
 836 0368 F9 57 57 AE             		.long	-1370007559
 837 036c D0 B9 B9 69             		.long	0x69b9b9d0
 838 0370 91 86 86 17             		.long	0x17868691
 839 0374 58 C1 C1 99             		.long	-1715355304
 840 0378 27 1D 1D 3A             		.long	0x3a1d1d27
 841 037c B9 9E 9E 27             		.long	0x279e9eb9
 842 0380 38 E1 E1 D9             		.long	-639508168
 843 0384 13 F8 F8 EB             		.long	-336005101
 844 0388 B3 98 98 2B             		.long	0x2b9898b3
 845 038c 33 11 11 22             		.long	0x22111133
 846 0390 BB 69 69 D2             		.long	-764843589
 847 0394 70 D9 D9 A9             		.long	-1445340816
 848 0398 89 8E 8E 07             		.long	0x78e8e89
 849 039c A7 94 94 33             		.long	0x339494a7
 850 03a0 B6 9B 9B 2D             		.long	0x2d9b9bb6
 851 03a4 22 1E 1E 3C             		.long	0x3c1e1e22
 852 03a8 92 87 87 15             		.long	0x15878792
 853 03ac 20 E9 E9 C9             		.long	-907417312
 854 03b0 49 CE CE 87             		.long	-2016489911
 855 03b4 FF 55 55 AA             		.long	-1437248001
 856 03b8 78 28 28 50             		.long	0x50282878
 857 03bc 7A DF DF A5             		.long	-1512054918
 858 03c0 8F 8C 8C 03             		.long	0x38c8c8f
 859 03c4 F8 A1 A1 59             		.long	0x59a1a1f8
 860 03c8 80 89 89 09             		.long	0x9898980
 861 03cc 17 0D 0D 1A             		.long	0x1a0d0d17
 862 03d0 DA BF BF 65             		.long	0x65bfbfda
 863 03d4 31 E6 E6 D7             		.long	-672733647
 864 03d8 C6 42 42 84             		.long	-2076032314
 865 03dc B8 68 68 D0             		.long	-798463816
 866 03e0 C3 41 41 82             		.long	-2109652541
 867 03e4 B0 99 99 29             		.long	0x299999b0
 868 03e8 77 2D 2D 5A             		.long	0x5a2d2d77
 869 03ec 11 0F 0F 1E             		.long	0x1e0f0f11
 870 03f0 CB B0 B0 7B             		.long	0x7bb0b0cb
 871 03f4 FC 54 54 A8             		.long	-1470868228
 872 03f8 D6 BB BB 6D             		.long	0x6dbbbbd6
 873 03fc 3A 16 16 2C             		.long	0x2c16163a
 874 0400 63 63 C6 A5             		.long	-1513725085
 875 0404 7C 7C F8 84             		.long	-2064089988
 876 0408 77 77 EE 99             		.long	-1712425097
 877 040c 7B 7B F6 8D             		.long	-1913226373
 878 0410 F2 F2 FF 0D             		.long	0xdfff2f2
 879 0414 6B 6B D6 BD             		.long	-1110021269
 880 0418 6F 6F DE B1             		.long	-1310822545
 881 041c C5 C5 91 54             		.long	0x5491c5c5
 882 0420 30 30 60 50             		.long	0x50603030
 883 0424 01 01 02 03             		.long	0x3020101
 884 0428 67 67 CE A9             		.long	-1446090905
 885 042c 2B 2B 56 7D             		.long	0x7d562b2b
 886 0430 FE FE E7 19             		.long	0x19e7fefe
 887 0434 D7 D7 B5 62             		.long	0x62b5d7d7
 888 0438 AB AB 4D E6             		.long	-431117397
 889 043c 76 76 EC 9A             		.long	-1695779210
 890 0440 CA CA 8F 45             		.long	0x458fcaca
 891 0444 82 82 1F 9D             		.long	-1658879358
 892 0448 C9 C9 89 40             		.long	0x4089c9c9
 893 044c 7D 7D FA 87             		.long	-2013627011
 894 0450 FA FA EF 15             		.long	0x15effafa
 895 0454 59 59 B2 EB             		.long	-340633255
 896 0458 47 47 8E C9             		.long	-913422521
 897 045c F0 F0 FB 0B             		.long	0xbfbf0f0
 898 0460 AD AD 41 EC             		.long	-331240019
 899 0464 D4 D4 B3 67             		.long	0x67b3d4d4
 900 0468 A2 A2 5F FD             		.long	-44064094
 901 046c AF AF 45 EA             		.long	-364531793
 902 0470 9C 9C 23 BF             		.long	-1088185188
 903 0474 A4 A4 53 F7             		.long	-145513308
 904 0478 72 72 E4 96             		.long	-1763413390
 905 047c C0 C0 9B 5B             		.long	0x5b9bc0c0
 906 0480 B7 B7 75 C2             		.long	-1032472649
 907 0484 FD FD E1 1C             		.long	0x1ce1fdfd
 908 0488 93 93 3D AE             		.long	-1371696237
 909 048c 26 26 4C 6A             		.long	0x6a4c2626
 910 0490 36 36 6C 5A             		.long	0x5a6c3636
 911 0494 3F 3F 7E 41             		.long	0x417e3f3f
 912 0498 F7 F7 F5 02             		.long	0x2f5f7f7
 913 049c CC CC 83 4F             		.long	0x4f83cccc
 914 04a0 34 34 68 5C             		.long	0x5c683434
 915 04a4 A5 A5 51 F4             		.long	-195975771
 916 04a8 E5 E5 D1 34             		.long	0x34d1e5e5
 917 04ac F1 F1 F9 08             		.long	0x8f9f1f1
 918 04b0 71 71 E2 93             		.long	-1813876367
 919 04b4 D8 D8 AB 73             		.long	0x73abd8d8
 920 04b8 31 31 62 53             		.long	0x53623131
 921 04bc 15 15 2A 3F             		.long	0x3f2a1515
 922 04c0 04 04 08 0C             		.long	0xc080404
 923 04c4 C7 C7 95 52             		.long	0x5295c7c7
 924 04c8 23 23 46 65             		.long	0x65462323
 925 04cc C3 C3 9D 5E             		.long	0x5e9dc3c3
 926 04d0 18 18 30 28             		.long	0x28301818
 927 04d4 96 96 37 A1             		.long	-1590192490
 928 04d8 05 05 0A 0F             		.long	0xf0a0505
 929 04dc 9A 9A 2F B5             		.long	-1255171430
 930 04e0 07 07 0E 09             		.long	0x90e0707
 931 04e4 12 12 24 36             		.long	0x36241212
 932 04e8 80 80 1B 9B             		.long	-1692696448
 933 04ec E2 E2 DF 3D             		.long	0x3ddfe2e2
 934 04f0 EB EB CD 26             		.long	0x26cdebeb
 935 04f4 27 27 4E 69             		.long	0x694e2727
 936 04f8 B2 B2 7F CD             		.long	-847269198
 937 04fc 75 75 EA 9F             		.long	-1612024459
 938 0500 09 09 12 1B             		.long	0x1b120909
 939 0504 83 83 1D 9E             		.long	-1642232957
 940 0508 2C 2C 58 74             		.long	0x74582c2c
 941 050c 1A 1A 34 2E             		.long	0x2e341a1a
 942 0510 1B 1B 36 2D             		.long	0x2d361b1b
 943 0514 6E 6E DC B2             		.long	-1294176658
 944 0518 5A 5A B4 EE             		.long	-290170278
 945 051c A0 A0 5B FB             		.long	-77881184
 946 0520 52 52 A4 F6             		.long	-157003182
 947 0524 3B 3B 76 4D             		.long	0x4d763b3b
 948 0528 D6 D6 B7 61             		.long	0x61b7d6d6
 949 052c B3 B3 7D CE             		.long	-830622797
 950 0530 29 29 52 7B             		.long	0x7b522929
 951 0534 E3 E3 DD 3E             		.long	0x3edde3e3
 952 0538 2F 2F 5E 71             		.long	0x715e2f2f
 953 053c 84 84 13 97             		.long	-1760328572
 954 0540 53 53 A6 F5             		.long	-173649069
 955 0544 D1 D1 B9 68             		.long	0x68b9d1d1
 956 0548 00 00 00 00             		.long	0
 957 054c ED ED C1 2C             		.long	0x2cc1eded
 958 0550 20 20 40 60             		.long	0x60402020
 959 0554 FC FC E3 1F             		.long	0x1fe3fcfc
 960 0558 B1 B1 79 C8             		.long	-931548751
 961 055c 5B 5B B6 ED             		.long	-306816165
 962 0560 6A 6A D4 BE             		.long	-1093375382
 963 0564 CB CB 8D 46             		.long	0x468dcbcb
 964 0568 BE BE 67 D9             		.long	-647512386
 965 056c 39 39 72 4B             		.long	0x4b723939
 966 0570 4A 4A 94 DE             		.long	-560706998
 967 0574 4C 4C 98 D4             		.long	-728216500
 968 0578 58 58 B0 E8             		.long	-391096232
 969 057c CF CF 85 4A             		.long	0x4a85cfcf
 970 0580 D0 D0 BB 6B             		.long	0x6bbbd0d0
 971 0584 EF EF C5 2A             		.long	0x2ac5efef
 972 0588 AA AA 4F E5             		.long	-447763798
 973 058c FB FB ED 16             		.long	0x16edfbfb
 974 0590 43 43 86 C5             		.long	-981056701
 975 0594 4D 4D 9A D7             		.long	-677753523
 976 0598 33 33 66 55             		.long	0x55663333
 977 059c 85 85 11 94             		.long	-1810791035
 978 05a0 45 45 8A CF             		.long	-813021883
 979 05a4 F9 F9 E9 10             		.long	0x10e9f9f9
 980 05a8 02 02 04 06             		.long	0x6040202
 981 05ac 7F 7F FE 81             		.long	-2114027649
 982 05b0 50 50 A0 F0             		.long	-257929136
 983 05b4 3C 3C 78 44             		.long	0x44783c3c
 984 05b8 9F 9F 25 BA             		.long	-1171939425
 985 05bc A8 A8 4B E3             		.long	-481580888
 986 05c0 51 51 A2 F3             		.long	-207466159
 987 05c4 A3 A3 5D FE             		.long	-27417693
 988 05c8 40 40 80 C0             		.long	-1065336768
 989 05cc 8F 8F 05 8A             		.long	-1979347057
 990 05d0 92 92 3F AD             		.long	-1388342638
 991 05d4 9D 9D 21 BC             		.long	-1138647651
 992 05d8 38 38 70 48             		.long	0x48703838
 993 05dc F5 F5 F1 04             		.long	0x4f1f5f5
 994 05e0 BC BC 63 DF             		.long	-547111748
 995 05e4 B6 B6 77 C1             		.long	-1049119050
 996 05e8 DA DA AF 75             		.long	0x75afdada
 997 05ec 21 21 42 63             		.long	0x63422121
 998 05f0 10 10 20 30             		.long	0x30201010
 999 05f4 FF FF E5 1A             		.long	0x1ae5ffff
 1000 05f8 F3 F3 FD 0E             		.long	0xefdf3f3
 1001 05fc D2 D2 BF 6D             		.long	0x6dbfd2d2
 1002 0600 CD CD 81 4C             		.long	0x4c81cdcd
 1003 0604 0C 0C 18 14             		.long	0x14180c0c
 1004 0608 13 13 26 35             		.long	0x35261313
 1005 060c EC EC C3 2F             		.long	0x2fc3ecec
 1006 0610 5F 5F BE E1             		.long	-507617441
 1007 0614 97 97 35 A2             		.long	-1573546089
 1008 0618 44 44 88 CC             		.long	-863484860
 1009 061c 17 17 2E 39             		.long	0x392e1717
 1010 0620 C4 C4 93 57             		.long	0x5793c4c4
 1011 0624 A7 A7 55 F2             		.long	-229267545
 1012 0628 7E 7E FC 82             		.long	-2097381762
 1013 062c 3D 3D 7A 47             		.long	0x477a3d3d
 1014 0630 64 64 C8 AC             		.long	-1396153244
 1015 0634 5D 5D BA E7             		.long	-407216803
 1016 0638 19 19 32 2B             		.long	0x2b321919
 1017 063c 73 73 E6 95             		.long	-1780059277
 1018 0640 60 60 C0 A0             		.long	-1598005152
 1019 0644 81 81 19 98             		.long	-1743158911
 1020 0648 4F 4F 9E D1             		.long	-778154161
 1021 064c DC DC A3 7F             		.long	0x7fa3dcdc
 1022 0650 22 22 44 66             		.long	0x66442222
 1023 0654 2A 2A 54 7E             		.long	0x7e542a2a
 1024 0658 90 90 3B AB             		.long	-1422159728
 1025 065c 88 88 0B 83             		.long	-2096396152
 1026 0660 46 46 8C CA             		.long	-896776634
 1027 0664 EE EE C7 29             		.long	0x29c7eeee
 1028 0668 B8 B8 6B D3             		.long	-747915080
 1029 066c 14 14 28 3C             		.long	0x3c281414
 1030 0670 DE DE A7 79             		.long	0x79a7dede
 1031 0674 5E 5E BC E2             		.long	-490971554
 1032 0678 0B 0B 16 1D             		.long	0x1d160b0b
 1033 067c DB DB AD 76             		.long	0x76addbdb
 1034 0680 E0 E0 DB 3B             		.long	0x3bdbe0e0
 1035 0684 32 32 64 56             		.long	0x56643232
 1036 0688 3A 3A 74 4E             		.long	0x4e743a3a
 1037 068c 0A 0A 14 1E             		.long	0x1e140a0a
 1038 0690 49 49 92 DB             		.long	-611169975
 1039 0694 06 06 0C 0A             		.long	0xa0c0606
 1040 0698 24 24 48 6C             		.long	0x6c482424
 1041 069c 5C 5C B8 E4             		.long	-457679780
 1042 06a0 C2 C2 9F 5D             		.long	0x5d9fc2c2
 1043 06a4 D3 D3 BD 6E             		.long	0x6ebdd3d3
 1044 06a8 AC AC 43 EF             		.long	-280777556
 1045 06ac 62 62 C4 A6             		.long	-1497079198
 1046 06b0 91 91 39 A8             		.long	-1472622191
 1047 06b4 95 95 31 A4             		.long	-1540254315
 1048 06b8 E4 E4 D3 37             		.long	0x37d3e4e4
 1049 06bc 79 79 F2 8B             		.long	-1947043463
 1050 06c0 E7 E7 D5 32             		.long	0x32d5e7e7
 1051 06c4 C8 C8 8B 43             		.long	0x438bc8c8
 1052 06c8 37 37 6E 59             		.long	0x596e3737
 1053 06cc 6D 6D DA B7             		.long	-1210421907
 1054 06d0 8D 8D 01 8C             		.long	-1946055283
 1055 06d4 D5 D5 B1 64             		.long	0x64b1d5d5
 1056 06d8 4E 4E 9C D2             		.long	-761508274
 1057 06dc A9 A9 49 E0             		.long	-532043351
 1058 06e0 6C 6C D8 B4             		.long	-1260884884
 1059 06e4 56 56 AC FA             		.long	-89369002
 1060 06e8 F4 F4 F3 07             		.long	0x7f3f4f4
 1061 06ec EA EA CF 25             		.long	0x25cfeaea
 1062 06f0 65 65 CA AF             		.long	-1345690267
 1063 06f4 7A 7A F4 8E             		.long	-1896580486
 1064 06f8 AE AE 47 E9             		.long	-381178194
 1065 06fc 08 08 10 18             		.long	0x18100808
 1066 0700 BA BA 6F D5             		.long	-714097990
 1067 0704 78 78 F0 88             		.long	-1997506440
 1068 0708 25 25 4A 6F             		.long	0x6f4a2525
 1069 070c 2E 2E 5C 72             		.long	0x725c2e2e
 1070 0710 1C 1C 38 24             		.long	0x24381c1c
 1071 0714 A6 A6 57 F1             		.long	-245913946
 1072 0718 B4 B4 73 C7             		.long	-948718412
 1073 071c C6 C6 97 51             		.long	0x5197c6c6
 1074 0720 E8 E8 CB 23             		.long	0x23cbe8e8
 1075 0724 DD DD A1 7C             		.long	0x7ca1dddd
 1076 0728 74 74 E8 9C             		.long	-1662487436
 1077 072c 1F 1F 3E 21             		.long	0x213e1f1f
 1078 0730 4B 4B 96 DD             		.long	-577352885
 1079 0734 BD BD 61 DC             		.long	-597574211
 1080 0738 8B 8B 0D 86             		.long	-2045932661
 1081 073c 8A 8A 0F 85             		.long	-2062579062
 1082 0740 70 70 E0 90             		.long	-1864339344
 1083 0744 3E 3E 7C 42             		.long	0x427c3e3e
 1084 0748 B5 B5 71 C4             		.long	-999180875
 1085 074c 66 66 CC AA             		.long	-1429445018
 1086 0750 48 48 90 D8             		.long	-661632952
 1087 0754 03 03 06 05             		.long	0x5060303
 1088 0758 F6 F6 F7 01             		.long	0x1f7f6f6
 1089 075c 0E 0E 1C 12             		.long	0x121c0e0e
 1090 0760 61 61 C2 A3             		.long	-1547542175
 1091 0764 35 35 6A 5F             		.long	0x5f6a3535
 1092 0768 57 57 AE F9             		.long	-106014889
 1093 076c B9 B9 69 D0             		.long	-798377543
 1094 0770 86 86 17 91             		.long	-1860729210
 1095 0774 C1 C1 99 58             		.long	0x5899c1c1
 1096 0778 1D 1D 3A 27             		.long	0x273a1d1d
 1097 077c 9E 9E 27 B9             		.long	-1188585826
 1098 0780 E1 E1 D9 38             		.long	0x38d9e1e1
 1099 0784 F8 F8 EB 13             		.long	0x13ebf8f8
 1100 0788 98 98 2B B3             		.long	-1288988520
 1101 078c 11 11 22 33             		.long	0x33221111
 1102 0790 69 69 D2 BB             		.long	-1143838359
 1103 0794 D9 D9 A9 70             		.long	0x70a9d9d9
 1104 0798 8E 8E 07 89             		.long	-1995993458
 1105 079c 94 94 33 A7             		.long	-1489791852
 1106 07a0 9B 9B 2D B6             		.long	-1238525029
 1107 07a4 1E 1E 3C 22             		.long	0x223c1e1e
 1108 07a8 87 87 15 92             		.long	-1844082809
 1109 07ac E9 E9 C9 20             		.long	0x20c9e9e9
 1110 07b0 CE CE 87 49             		.long	0x4987cece
 1111 07b4 55 55 AA FF             		.long	-5614251
 1112 07b8 28 28 50 78             		.long	0x78502828
 1113 07bc DF DF A5 7A             		.long	0x7aa5dfdf
 1114 07c0 8C 8C 03 8F             		.long	-1895592820
 1115 07c4 A1 A1 59 F8             		.long	-128343647
 1116 07c8 89 89 09 80             		.long	-2146858615
 1117 07cc 0D 0D 1A 17             		.long	0x171a0d0d
 1118 07d0 BF BF 65 DA             		.long	-630865985
 1119 07d4 E6 E6 D7 31             		.long	0x31d7e6e6
 1120 07d8 42 42 84 C6             		.long	-964410814
 1121 07dc 68 68 D0 B8             		.long	-1194301336
 1122 07e0 41 41 82 C3             		.long	-1014873791
 1123 07e4 99 99 29 B0             		.long	-1339450983
 1124 07e8 2D 2D 5A 77             		.long	0x775a2d2d
 1125 07ec 0F 0F 1E 11             		.long	0x111e0f0f
 1126 07f0 B0 B0 7B CB             		.long	-881086288
 1127 07f4 54 54 A8 FC             		.long	-56077228
 1128 07f8 BB BB 6D D6             		.long	-697451589
 1129 07fc 16 16 2C 3A             		.long	0x3a2c1616
 1130 0800 63 C6 A5 63             		.long	0x63a5c663
 1131 0804 7C F8 84 7C             		.long	0x7c84f87c
 1132 0808 77 EE 99 77             		.long	0x7799ee77
 1133 080c 7B F6 8D 7B             		.long	0x7b8df67b
 1134 0810 F2 FF 0D F2             		.long	-233963534
 1135 0814 6B D6 BD 6B             		.long	0x6bbdd66b
 1136 0818 6F DE B1 6F             		.long	0x6fb1de6f
 1137 081c C5 91 54 C5             		.long	-984313403
 1138 0820 30 60 50 30             		.long	0x30506030
 1139 0824 01 02 03 01             		.long	0x1030201
 1140 0828 67 CE A9 67             		.long	0x67a9ce67
 1141 082c 2B 56 7D 2B             		.long	0x2b7d562b
 1142 0830 FE E7 19 FE             		.long	-31856642
 1143 0834 D7 B5 62 D7             		.long	-681396777
 1144 0838 AB 4D E6 AB             		.long	-1410970197
 1145 083c 76 EC 9A 76             		.long	0x769aec76
 1146 0840 CA 8F 45 CA             		.long	-901410870
 1147 0844 82 1F 9D 82             		.long	-2103631998
 1148 0848 C9 89 40 C9             		.long	-918517303
 1149 084c 7D FA 87 7D             		.long	0x7d87fa7d
 1150 0850 FA EF 15 FA             		.long	-99225606
 1151 0854 59 B2 EB 59             		.long	0x59ebb259
 1152 0858 47 8E C9 47             		.long	0x47c98e47
 1153 085c F0 FB 0B F0             		.long	-267650064
 1154 0860 AD 41 EC AD             		.long	-1377025619
 1155 0864 D4 B3 67 D4             		.long	-731401260
 1156 0868 A2 5F FD A2             		.long	-1560453214
 1157 086c AF 45 EA AF             		.long	-1343601233
 1158 0870 9C 23 BF 9C             		.long	-1665195108
 1159 0874 A4 53 F7 A4             		.long	-1527295068
 1160 0878 72 E4 96 72             		.long	0x7296e472
 1161 087c C0 9B 5B C0             		.long	-1067738176
 1162 0880 B7 75 C2 B7             		.long	-1211992649
 1163 0884 FD E1 1C FD             		.long	-48438787
 1164 0888 93 3D AE 93             		.long	-1817297517
 1165 088c 26 4C 6A 26             		.long	0x266a4c26
 1166 0890 36 6C 5A 36             		.long	0x365a6c36
 1167 0894 3F 7E 41 3F             		.long	0x3f417e3f
 1168 0898 F7 F5 02 F7             		.long	-150800905
 1169 089c CC 83 4F CC             		.long	-867204148
 1170 08a0 34 68 5C 34             		.long	0x345c6834
 1171 08a4 A5 51 F4 A5             		.long	-1510714971
 1172 08a8 E5 D1 34 E5             		.long	-449523227
 1173 08ac F1 F9 08 F1             		.long	-251069967
 1174 08b0 71 E2 93 71             		.long	0x7193e271
 1175 08b4 D8 AB 73 D8             		.long	-663508008
 1176 08b8 31 62 53 31             		.long	0x31536231
 1177 08bc 15 2A 3F 15             		.long	0x153f2a15
 1178 08c0 04 08 0C 04             		.long	0x40c0804
 1179 08c4 C7 95 52 C7             		.long	-950889017
 1180 08c8 23 46 65 23             		.long	0x23654623
 1181 08cc C3 9D 5E C3             		.long	-1017209405
 1182 08d0 18 30 28 18             		.long	0x18283018
 1183 08d4 96 37 A1 96             		.long	-1767819370
 1184 08d8 05 0A 0F 05             		.long	0x50f0a05
 1185 08dc 9A 2F B5 9A             		.long	-1699401830
 1186 08e0 07 0E 09 07             		.long	0x7090e07
 1187 08e4 12 24 36 12             		.long	0x12362412
 1188 08e8 80 1B 9B 80             		.long	-2137318528
 1189 08ec E2 DF 3D E2             		.long	-499261470
 1190 08f0 EB CD 26 EB             		.long	-349778453
 1191 08f4 27 4E 69 27             		.long	0x27694e27
 1192 08f8 B2 7F CD B2             		.long	-1295155278
 1193 08fc 75 EA 9F 75             		.long	0x759fea75
 1194 0900 09 12 1B 09             		.long	0x91b1209
 1195 0904 83 1D 9E 83             		.long	-2086789757
 1196 0908 2C 58 74 2C             		.long	0x2c74582c
 1197 090c 1A 34 2E 1A             		.long	0x1a2e341a
 1198 0910 1B 36 2D 1B             		.long	0x1b2d361b
 1199 0914 6E DC B2 6E             		.long	0x6eb2dc6e
 1200 0918 5A B4 EE 5A             		.long	0x5aeeb45a
 1201 091c A0 5B FB A0             		.long	-1594139744
 1202 0920 52 A4 F6 52             		.long	0x52f6a452
 1203 0924 3B 76 4D 3B             		.long	0x3b4d763b
 1204 0928 D6 B7 61 D6             		.long	-698239018
 1205 092c B3 7D CE B3             		.long	-1278313037
 1206 0930 29 52 7B 29             		.long	0x297b5229
 1207 0934 E3 DD 3E E3             		.long	-482419229
 1208 0938 2F 5E 71 2F             		.long	0x2f715e2f
 1209 093c 84 13 97 84             		.long	-2070473852
 1210 0940 53 A6 F5 53             		.long	0x53f5a653
 1211 0944 D1 B9 68 D1             		.long	-781665839
 1212 0948 00 00 00 00             		.long	0
 1213 094c ED C1 2C ED             		.long	-315833875
 1214 0950 20 40 60 20             		.long	0x20604020
 1215 0954 FC E3 1F FC             		.long	-65018884
 1216 0958 B1 79 C8 B1             		.long	-1312261711
 1217 095c 5B B6 ED 5B             		.long	0x5bedb65b
 1218 0960 6A D4 BE 6A             		.long	0x6abed46a
 1219 0964 CB 8D 46 CB             		.long	-884568629
 1220 0968 BE 67 D9 BE             		.long	-1093048386
 1221 096c 39 72 4B 39             		.long	0x394b7239
 1222 0970 4A 94 DE 4A             		.long	0x4ade944a
 1223 0974 4C 98 D4 4C             		.long	0x4cd4984c
 1224 0978 58 B0 E8 58             		.long	0x58e8b058
 1225 097c CF 85 4A CF             		.long	-817199665
 1226 0980 D0 BB 6B D0             		.long	-798245936
 1227 0984 EF C5 2A EF             		.long	-282409489
 1228 0988 AA 4F E5 AA             		.long	-1427812438
 1229 098c FB ED 16 FB             		.long	-82383365
 1230 0990 43 86 C5 43             		.long	0x43c58643
 1231 0994 4D 9A D7 4D             		.long	0x4dd79a4d
 1232 0998 33 66 55 33             		.long	0x33556633
 1233 099c 85 11 94 85             		.long	-2053893755
 1234 09a0 45 8A CF 45             		.long	0x45cf8a45
 1235 09a4 F9 E9 10 F9             		.long	-116332039
 1236 09a8 02 04 06 02             		.long	0x2060402
 1237 09ac 7F FE 81 7F             		.long	0x7f81fe7f
 1238 09b0 50 A0 F0 50             		.long	0x50f0a050
 1239 09b4 3C 78 44 3C             		.long	0x3c44783c
 1240 09b8 9F 25 BA 9F             		.long	-1615190625
 1241 09bc A8 4B E3 A8             		.long	-1461498968
 1242 09c0 51 A2 F3 51             		.long	0x51f3a251
 1243 09c4 A3 5D FE A3             		.long	-1543610973
 1244 09c8 40 80 C0 40             		.long	0x40c08040
 1245 09cc 8F 05 8A 8F             		.long	-1886780017
 1246 09d0 92 3F AD 92             		.long	-1834139758
 1247 09d4 9D 21 BC 9D             		.long	-1648615011
 1248 09d8 38 70 48 38             		.long	0x38487038
 1249 09dc F5 F1 04 F5             		.long	-184225291
 1250 09e0 BC 63 DF BC             		.long	-1126210628
 1251 09e4 B6 77 C1 B6             		.long	-1228834890
 1252 09e8 DA AF 75 DA             		.long	-629821478
 1253 09ec 21 42 63 21             		.long	0x21634221
 1254 09f0 10 20 30 10             		.long	0x10302010
 1255 09f4 FF E5 1A FF             		.long	-15014401
 1256 09f8 F3 FD 0E F3             		.long	-217121293
 1257 09fc D2 BF 6D D2             		.long	-764559406
 1258 0a00 CD 81 4C CD             		.long	-850624051
 1259 0a04 0C 18 14 0C             		.long	0xc14180c
 1260 0a08 13 26 35 13             		.long	0x13352613
 1261 0a0c EC C3 2F EC             		.long	-332413972
 1262 0a10 5F BE E1 5F             		.long	0x5fe1be5f
 1263 0a14 97 35 A2 97             		.long	-1750977129
 1264 0a18 44 88 CC 44             		.long	0x44cc8844
 1265 0a1c 17 2E 39 17             		.long	0x17392e17
 1266 0a20 C4 93 57 C4             		.long	-1000893500
 1267 0a24 A7 55 F2 A7             		.long	-1477290585
 1268 0a28 7E FC 82 7E             		.long	0x7e82fc7e
 1269 0a2c 3D 7A 47 3D             		.long	0x3d477a3d
 1270 0a30 64 C8 AC 64             		.long	0x64acc864
 1271 0a34 5D BA E7 5D             		.long	0x5de7ba5d
 1272 0a38 19 32 2B 19             		.long	0x192b3219
 1273 0a3c 73 E6 95 73             		.long	0x7395e673
 1274 0a40 60 C0 A0 60             		.long	0x60a0c060
 1275 0a44 81 19 98 81             		.long	-2120738431
 1276 0a48 4F 9E D1 4F             		.long	0x4fd19e4f
 1277 0a4c DC A3 7F DC             		.long	-595614756
 1278 0a50 22 44 66 22             		.long	0x22664422
 1279 0a54 2A 54 7E 2A             		.long	0x2a7e542a
 1280 0a58 90 3B AB 90             		.long	-1867826288
 1281 0a5c 88 0B 83 88             		.long	-2004677752
 1282 0a60 46 8C CA 46             		.long	0x46ca8c46
 1283 0a64 EE C7 29 EE             		.long	-299251730
 1284 0a68 B8 6B D3 B8             		.long	-1194103880
 1285 0a6c 14 28 3C 14             		.long	0x143c2814
 1286 0a70 DE A7 79 DE             		.long	-562452514
 1287 0a74 5E BC E2 5E             		.long	0x5ee2bc5e
 1288 0a78 0B 16 1D 0B             		.long	0xb1d160b
 1289 0a7c DB AD 76 DB             		.long	-612979237
 1290 0a80 E0 DB 3B E0             		.long	-532948000
 1291 0a84 32 64 56 32             		.long	0x32566432
 1292 0a88 3A 74 4E 3A             		.long	0x3a4e743a
 1293 0a8c 0A 14 1E 0A             		.long	0xa1e140a
 1294 0a90 49 92 DB 49             		.long	0x49db9249
 1295 0a94 06 0C 0A 06             		.long	0x60a0c06
 1296 0a98 24 48 6C 24             		.long	0x246c4824
 1297 0a9c 5C B8 E4 5C             		.long	0x5ce4b85c
 1298 0aa0 C2 9F 5D C2             		.long	-1034051646
 1299 0aa4 D3 BD 6E D3             		.long	-747717165
 1300 0aa8 AC 43 EF AC             		.long	-1393605716
 1301 0aac 62 C4 A6 62             		.long	0x62a6c462
 1302 0ab0 91 39 A8 91             		.long	-1851246191
 1303 0ab4 95 31 A4 95             		.long	-1784401515
 1304 0ab8 E4 D3 37 E4             		.long	-466103324
 1305 0abc 79 F2 8B 79             		.long	0x798bf279
 1306 0ac0 E7 D5 32 E7             		.long	-416098841
 1307 0ac4 C8 8B 43 C8             		.long	-935097400
 1308 0ac8 37 6E 59 37             		.long	0x37596e37
 1309 0acc 6D DA B7 6D             		.long	0x6db7da6d
 1310 0ad0 8D 01 8C 8D             		.long	-1920204403
 1311 0ad4 D5 B1 64 D5             		.long	-714821163
 1312 0ad8 4E 9C D2 4E             		.long	0x4ed29c4e
 1313 0adc A9 49 E0 A9             		.long	-1444918871
 1314 0ae0 6C D8 B4 6C             		.long	0x6cb4d86c
 1315 0ae4 56 AC FA 56             		.long	0x56faac56
 1316 0ae8 F4 F3 07 F4             		.long	-200805388
 1317 0aec EA CF 25 EA             		.long	-366620694
 1318 0af0 65 CA AF 65             		.long	0x65afca65
 1319 0af4 7A F4 8E 7A             		.long	0x7a8ef47a
 1320 0af8 AE 47 E9 AE             		.long	-1360443474
 1321 0afc 08 10 18 08             		.long	0x8181008
 1322 0b00 BA 6F D5 BA             		.long	-1160417350
 1323 0b04 78 F0 88 78             		.long	0x7888f078
 1324 0b08 25 4A 6F 25             		.long	0x256f4a25
 1325 0b0c 2E 5C 72 2E             		.long	0x2e725c2e
 1326 0b10 1C 38 24 1C             		.long	0x1c24381c
 1327 0b14 A6 57 F1 A6             		.long	-1494132826
 1328 0b18 B4 73 C7 B4             		.long	-1261997132
 1329 0b1c C6 97 51 C6             		.long	-967731258
 1330 0b20 E8 CB 23 E8             		.long	-400307224
 1331 0b24 DD A1 7C DD             		.long	-579034659
 1332 0b28 74 E8 9C 74             		.long	0x749ce874
 1333 0b2c 1F 3E 21 1F             		.long	0x1f213e1f
 1334 0b30 4B 96 DD 4B             		.long	0x4bdd964b
 1335 0b34 BD 61 DC BD             		.long	-1109630531
 1336 0b38 8B 0D 86 8B             		.long	-1954148981
 1337 0b3c 8A 0F 85 8A             		.long	-1970991222
 1338 0b40 70 E0 90 70             		.long	0x7090e070
 1339 0b44 3E 7C 42 3E             		.long	0x3e427c3e
 1340 0b48 B5 71 C4 B5             		.long	-1245417035
 1341 0b4c 66 CC AA 66             		.long	0x66aacc66
 1342 0b50 48 90 D8 48             		.long	0x48d89048
 1343 0b54 03 06 05 03             		.long	0x3050603
 1344 0b58 F6 F7 01 F6             		.long	-167643146
 1345 0b5c 0E 1C 12 0E             		.long	0xe121c0e
 1346 0b60 61 C2 A3 61             		.long	0x61a3c261
 1347 0b64 35 6A 5F 35             		.long	0x355f6a35
 1348 0b68 57 AE F9 57             		.long	0x57f9ae57
 1349 0b6c B9 69 D0 B9             		.long	-1177523783
 1350 0b70 86 17 91 86             		.long	-2037311610
 1351 0b74 C1 99 58 C1             		.long	-1051158079
 1352 0b78 1D 3A 27 1D             		.long	0x1d273a1d
 1353 0b7c 9E 27 B9 9E             		.long	-1632032866
 1354 0b80 E1 D9 38 E1             		.long	-516367903
 1355 0b84 F8 EB 13 F8             		.long	-132912136
 1356 0b88 98 2B B3 98             		.long	-1733088360
 1357 0b8c 11 22 33 11             		.long	0x11332211
 1358 0b90 69 D2 BB 69             		.long	0x69bbd269
 1359 0b94 D9 A9 70 D9             		.long	-646927911
 1360 0b98 8E 07 89 8E             		.long	-1903622258
 1361 0b9c 94 33 A7 94             		.long	-1800981612
 1362 0ba0 9B 2D B6 9B             		.long	-1682559589
 1363 0ba4 1E 3C 22 1E             		.long	0x1e223c1e
 1364 0ba8 87 15 92 87             		.long	-2020469369
 1365 0bac E9 C9 20 E9             		.long	-383727127
 1366 0bb0 CE 87 49 CE             		.long	-834041906
 1367 0bb4 55 AA FF 55             		.long	0x55ffaa55
 1368 0bb8 28 50 78 28             		.long	0x28785028
 1369 0bbc DF A5 7A DF             		.long	-545610273
 1370 0bc0 8C 03 8F 8C             		.long	-1936784500
 1371 0bc4 A1 59 F8 A1             		.long	-1577559647
 1372 0bc8 89 09 80 89             		.long	-1988097655
 1373 0bcc 0D 1A 17 0D             		.long	0xd171a0d
 1374 0bd0 BF 65 DA BF             		.long	-1076206145
 1375 0bd4 E6 D7 31 E6             		.long	-432941082
 1376 0bd8 42 84 C6 42             		.long	0x42c68442
 1377 0bdc 68 D0 B8 68             		.long	0x68b8d068
 1378 0be0 41 82 C3 41             		.long	0x41c38241
 1379 0be4 99 29 B0 99             		.long	-1716508263
 1380 0be8 2D 5A 77 2D             		.long	0x2d775a2d
 1381 0bec 0F 1E 11 0F             		.long	0xf111e0f
 1382 0bf0 B0 7B CB B0             		.long	-1328841808
 1383 0bf4 54 A8 FC 54             		.long	0x54fca854
 1384 0bf8 BB 6D D6 BB             		.long	-1143575109
 1385 0bfc 16 2C 3A 16             		.long	0x163a2c16
 1386 0c00 C6 A5 63 63             		.long	0x6363a5c6
 1387 0c04 F8 84 7C 7C             		.long	0x7c7c84f8
 1388 0c08 EE 99 77 77             		.long	0x777799ee
 1389 0c0c F6 8D 7B 7B             		.long	0x7b7b8df6
 1390 0c10 FF 0D F2 F2             		.long	-219017729
 1391 0c14 D6 BD 6B 6B             		.long	0x6b6bbdd6
 1392 0c18 DE B1 6F 6F             		.long	0x6f6fb1de
 1393 0c1c 91 54 C5 C5             		.long	-976923503
 1394 0c20 60 50 30 30             		.long	0x30305060
 1395 0c24 02 03 01 01             		.long	0x1010302
 1396 0c28 CE A9 67 67             		.long	0x6767a9ce
 1397 0c2c 56 7D 2B 2B             		.long	0x2b2b7d56
 1398 0c30 E7 19 FE FE             		.long	-16901657
 1399 0c34 B5 62 D7 D7             		.long	-673750347
 1400 0c38 4D E6 AB AB             		.long	-1414797747
 1401 0c3c EC 9A 76 76             		.long	0x76769aec
 1402 0c40 8F 45 CA CA             		.long	-892713585
 1403 0c44 1F 9D 82 82             		.long	-2105369313
 1404 0c48 89 40 C9 C9             		.long	-909557623
 1405 0c4c FA 87 7D 7D             		.long	0x7d7d87fa
 1406 0c50 EF 15 FA FA             		.long	-84273681
 1407 0c54 B2 EB 59 59             		.long	0x5959ebb2
 1408 0c58 8E C9 47 47             		.long	0x4747c98e
 1409 0c5c FB 0B F0 F0             		.long	-252703749
 1410 0c60 41 EC AD AD             		.long	-1381110719
 1411 0c64 B3 67 D4 D4             		.long	-724277325
 1412 0c68 5F FD A2 A2             		.long	-1566376609
 1413 0c6c 45 EA AF AF             		.long	-1347425723
 1414 0c70 23 BF 9C 9C             		.long	-1667449053
 1415 0c74 53 F7 A4 A4             		.long	-1532692653
 1416 0c78 E4 96 72 72             		.long	0x727296e4
 1417 0c7c 9B 5B C0 C0             		.long	-1061135461
 1418 0c80 75 C2 B7 B7             		.long	-1212693899
 1419 0c84 E1 1C FD FD             		.long	-33743647
 1420 0c88 3D AE 93 93             		.long	-1819038147
 1421 0c8c 4C 6A 26 26             		.long	0x26266a4c
 1422 0c90 6C 5A 36 36             		.long	0x36365a6c
 1423 0c94 7E 41 3F 3F             		.long	0x3f3f417e
 1424 0c98 F5 02 F7 F7             		.long	-134806795
 1425 0c9c 83 4F CC CC             		.long	-859025533
 1426 0ca0 68 5C 34 34             		.long	0x34345c68
 1427 0ca4 51 F4 A5 A5             		.long	-1515850671
 1428 0ca8 D1 34 E5 E5             		.long	-437963567
 1429 0cac F9 08 F1 F1             		.long	-235861767
 1430 0cb0 E2 93 71 71             		.long	0x717193e2
 1431 0cb4 AB 73 D8 D8             		.long	-656903253
 1432 0cb8 62 53 31 31             		.long	0x31315362
 1433 0cbc 2A 3F 15 15             		.long	0x15153f2a
 1434 0cc0 08 0C 04 04             		.long	0x4040c08
 1435 0cc4 95 52 C7 C7             		.long	-943238507
 1436 0cc8 46 65 23 23             		.long	0x23236546
 1437 0ccc 9D 5E C3 C3             		.long	-1010606435
 1438 0cd0 30 28 18 18             		.long	0x18182830
 1439 0cd4 37 A1 96 96             		.long	-1768513225
 1440 0cd8 0A 0F 05 05             		.long	0x5050f0a
 1441 0cdc 2F B5 9A 9A             		.long	-1701137105
 1442 0ce0 0E 09 07 07             		.long	0x707090e
 1443 0ce4 24 36 12 12             		.long	0x12123624
 1444 0ce8 1B 9B 80 80             		.long	-2139055333
 1445 0cec DF 3D E2 E2             		.long	-488489505
 1446 0cf0 CD 26 EB EB             		.long	-336910643
 1447 0cf4 4E 69 27 27             		.long	0x2727694e
 1448 0cf8 7F CD B2 B2             		.long	-1296904833
 1449 0cfc EA 9F 75 75             		.long	0x75759fea
 1450 0d00 12 1B 09 09             		.long	0x9091b12
 1451 0d04 1D 9E 83 83             		.long	-2088526307
 1452 0d08 58 74 2C 2C             		.long	0x2c2c7458
 1453 0d0c 34 2E 1A 1A             		.long	0x1a1a2e34
 1454 0d10 36 2D 1B 1B             		.long	0x1b1b2d36
 1455 0d14 DC B2 6E 6E             		.long	0x6e6eb2dc
 1456 0d18 B4 EE 5A 5A             		.long	0x5a5aeeb4
 1457 0d1c 5B FB A0 A0             		.long	-1600062629
 1458 0d20 A4 F6 52 52             		.long	0x5252f6a4
 1459 0d24 76 4D 3B 3B             		.long	0x3b3b4d76
 1460 0d28 B7 61 D6 D6             		.long	-690593353
 1461 0d2c 7D CE B3 B3             		.long	-1280061827
 1462 0d30 52 7B 29 29             		.long	0x29297b52
 1463 0d34 DD 3E E3 E3             		.long	-471646499
 1464 0d38 5E 71 2F 2F             		.long	0x2f2f715e
 1465 0d3c 13 97 84 84             		.long	-2071685357
 1466 0d40 A6 F5 53 53             		.long	0x5353f5a6
 1467 0d44 B9 68 D1 D1             		.long	-774805319
 1468 0d48 00 00 00 00             		.long	0
 1469 0d4c C1 2C ED ED             		.long	-303223615
 1470 0d50 40 60 20 20             		.long	0x20206040
 1471 0d54 E3 1F FC FC             		.long	-50585629
 1472 0d58 79 C8 B1 B1             		.long	-1313748871
 1473 0d5c B6 ED 5B 5B             		.long	0x5b5bedb6
 1474 0d60 D4 BE 6A 6A             		.long	0x6a6abed4
 1475 0d64 8D 46 CB CB             		.long	-875870579
 1476 0d68 67 D9 BE BE             		.long	-1094788761
 1477 0d6c 72 4B 39 39             		.long	0x39394b72
 1478 0d70 94 DE 4A 4A             		.long	0x4a4ade94
 1479 0d74 98 D4 4C 4C             		.long	0x4c4cd498
 1480 0d78 B0 E8 58 58             		.long	0x5858e8b0
 1481 0d7c 85 4A CF CF             		.long	-808498555
 1482 0d80 BB 6B D0 D0             		.long	-791647301
 1483 0d84 C5 2A EF EF             		.long	-269538619
 1484 0d88 4F E5 AA AA             		.long	-1431640753
 1485 0d8c ED 16 FB FB             		.long	-67430675
 1486 0d90 86 C5 43 43             		.long	0x4343c586
 1487 0d94 9A D7 4D 4D             		.long	0x4d4dd79a
 1488 0d98 66 55 33 33             		.long	0x33335566
 1489 0d9c 11 94 85 85             		.long	-2054843375
 1490 0da0 8A CF 45 45             		.long	0x4545cf8a
 1491 0da4 E9 10 F9 F9             		.long	-101117719
 1492 0da8 04 06 02 02             		.long	0x2020604
 1493 0dac FE 81 7F 7F             		.long	0x7f7f81fe
 1494 0db0 A0 F0 50 50             		.long	0x5050f0a0
 1495 0db4 78 44 3C 3C             		.long	0x3c3c4478
 1496 0db8 25 BA 9F 9F             		.long	-1616922075
 1497 0dbc 4B E3 A8 A8             		.long	-1465326773
 1498 0dc0 A2 F3 51 51             		.long	0x5151f3a2
 1499 0dc4 5D FE A3 A3             		.long	-1549533603
 1500 0dc8 80 C0 40 40             		.long	0x4040c080
 1501 0dcc 05 8A 8F 8F             		.long	-1886418427
 1502 0dd0 3F AD 92 92             		.long	-1835881153
 1503 0dd4 21 BC 9D 9D             		.long	-1650607071
 1504 0dd8 70 48 38 38             		.long	0x38384870
 1505 0ddc F1 04 F5 F5             		.long	-168491791
 1506 0de0 63 DF BC BC             		.long	-1128472733
 1507 0de4 77 C1 B6 B6             		.long	-1229536905
 1508 0de8 AF 75 DA DA             		.long	-623217233
 1509 0dec 42 63 21 21             		.long	0x21216342
 1510 0df0 20 30 10 10             		.long	0x10103020
 1511 0df4 E5 1A FF FF             		.long	-58651
 1512 0df8 FD 0E F3 F3             		.long	-202174723
 1513 0dfc BF 6D D2 D2             		.long	-757961281
 1514 0e00 81 4C CD CD             		.long	-842183551
 1515 0e04 18 14 0C 0C             		.long	0xc0c1418
 1516 0e08 26 35 13 13             		.long	0x13133526
 1517 0e0c C3 2F EC EC             		.long	-320065597
 1518 0e10 BE E1 5F 5F             		.long	0x5f5fe1be
 1519 0e14 35 A2 97 97             		.long	-1751670219
 1520 0e18 88 CC 44 44             		.long	0x4444cc88
 1521 0e1c 2E 39 17 17             		.long	0x1717392e
 1522 0e20 93 57 C4 C4             		.long	-993765485
 1523 0e24 55 F2 A7 A7             		.long	-1482165675
 1524 0e28 FC 82 7E 7E             		.long	0x7e7e82fc
 1525 0e2c 7A 47 3D 3D             		.long	0x3d3d477a
 1526 0e30 C8 AC 64 64             		.long	0x6464acc8
 1527 0e34 BA E7 5D 5D             		.long	0x5d5de7ba
 1528 0e38 32 2B 19 19             		.long	0x19192b32
 1529 0e3c E6 95 73 73             		.long	0x737395e6
 1530 0e40 C0 A0 60 60             		.long	0x6060a0c0
 1531 0e44 19 98 81 81             		.long	-2122213351
 1532 0e48 9E D1 4F 4F             		.long	0x4f4fd19e
 1533 0e4c A3 7F DC DC             		.long	-589529181
 1534 0e50 44 66 22 22             		.long	0x22226644
 1535 0e54 54 7E 2A 2A             		.long	0x2a2a7e54
 1536 0e58 3B AB 90 90             		.long	-1869567173
 1537 0e5c 0B 83 88 88             		.long	-2004319477
 1538 0e60 8C CA 46 46             		.long	0x4646ca8c
 1539 0e64 C7 29 EE EE             		.long	-286381625
 1540 0e68 6B D3 B8 B8             		.long	-1195846805
 1541 0e6c 28 3C 14 14             		.long	0x14143c28
 1542 0e70 A7 79 DE DE             		.long	-555845209
 1543 0e74 BC E2 5E 5E             		.long	0x5e5ee2bc
 1544 0e78 16 1D 0B 0B             		.long	0xb0b1d16
 1545 0e7c AD 76 DB DB             		.long	-606374227
 1546 0e80 DB 3B E0 E0             		.long	-522175525
 1547 0e84 64 56 32 32             		.long	0x32325664
 1548 0e88 74 4E 3A 3A             		.long	0x3a3a4e74
 1549 0e8c 14 1E 0A 0A             		.long	0xa0a1e14
 1550 0e90 92 DB 49 49             		.long	0x4949db92
 1551 0e94 0C 0A 06 06             		.long	0x6060a0c
 1552 0e98 48 6C 24 24             		.long	0x24246c48
 1553 0e9c B8 E4 5C 5C             		.long	0x5c5ce4b8
 1554 0ea0 9F 5D C2 C2             		.long	-1027449441
 1555 0ea4 BD 6E D3 D3             		.long	-741118275
 1556 0ea8 43 EF AC AC             		.long	-1397952701
 1557 0eac C4 A6 62 62             		.long	0x6262a6c4
 1558 0eb0 39 A8 91 91             		.long	-1852725191
 1559 0eb4 31 A4 95 95             		.long	-1785355215
 1560 0eb8 D3 37 E4 E4             		.long	-454805549
 1561 0ebc F2 8B 79 79             		.long	0x79798bf2
 1562 0ec0 D5 32 E7 E7             		.long	-404278571
 1563 0ec4 8B 43 C8 C8             		.long	-926399605
 1564 0ec8 6E 59 37 37             		.long	0x3737596e
 1565 0ecc DA B7 6D 6D             		.long	0x6d6db7da
 1566 0ed0 01 8C 8D 8D             		.long	-1920103423
 1567 0ed4 B1 64 D5 D5             		.long	-707435343
 1568 0ed8 9C D2 4E 4E             		.long	0x4e4ed29c
 1569 0edc 49 E0 A9 A9             		.long	-1448484791
 1570 0ee0 D8 B4 6C 6C             		.long	0x6c6cb4d8
 1571 0ee4 AC FA 56 56             		.long	0x5656faac
 1572 0ee8 F3 07 F4 F4             		.long	-185333773
 1573 0eec CF 25 EA EA             		.long	-353753649
 1574 0ef0 CA AF 65 65             		.long	0x6565afca
 1575 0ef4 F4 8E 7A 7A             		.long	0x7a7a8ef4
 1576 0ef8 47 E9 AE AE             		.long	-1364268729
 1577 0efc 10 18 08 08             		.long	0x8081810
 1578 0f00 6F D5 BA BA             		.long	-1162160785
 1579 0f04 F0 88 78 78             		.long	0x787888f0
 1580 0f08 4A 6F 25 25             		.long	0x25256f4a
 1581 0f0c 5C 72 2E 2E             		.long	0x2e2e725c
 1582 0f10 38 24 1C 1C             		.long	0x1c1c2438
 1583 0f14 57 F1 A6 A6             		.long	-1499008681
 1584 0f18 73 C7 B4 B4             		.long	-1263220877
 1585 0f1c 97 51 C6 C6             		.long	-960081513
 1586 0f20 CB 23 E8 E8             		.long	-387439669
 1587 0f24 A1 7C DD DD             		.long	-572687199
 1588 0f28 E8 9C 74 74             		.long	0x74749ce8
 1589 0f2c 3E 21 1F 1F             		.long	0x1f1f213e
 1590 0f30 96 DD 4B 4B             		.long	0x4b4bdd96
 1591 0f34 61 DC BD BD             		.long	-1111630751
 1592 0f38 0D 86 8B 8B             		.long	-1953790451
 1593 0f3c 0F 85 8A 8A             		.long	-1970633457
 1594 0f40 E0 90 70 70             		.long	0x707090e0
 1595 0f44 7C 42 3E 3E             		.long	0x3e3e427c
 1596 0f48 71 C4 B5 B5             		.long	-1246378895
 1597 0f4c CC AA 66 66             		.long	0x6666aacc
 1598 0f50 90 D8 48 48             		.long	0x4848d890
 1599 0f54 06 05 03 03             		.long	0x3030506
 1600 0f58 F7 01 F6 F6             		.long	-151649801
 1601 0f5c 1C 12 0E 0E             		.long	0xe0e121c
 1602 0f60 C2 A3 61 61             		.long	0x6161a3c2
 1603 0f64 6A 5F 35 35             		.long	0x35355f6a
 1604 0f68 AE F9 57 57             		.long	0x5757f9ae
 1605 0f6c 69 D0 B9 B9             		.long	-1179004823
 1606 0f70 17 91 86 86             		.long	-2038001385
 1607 0f74 99 58 C1 C1             		.long	-1044293479
 1608 0f78 3A 27 1D 1D             		.long	0x1d1d273a
 1609 0f7c 27 B9 9E 9E             		.long	-1633765081
 1610 0f80 D9 38 E1 E1             		.long	-505333543
 1611 0f84 EB 13 F8 F8             		.long	-117959701
 1612 0f88 2B B3 98 98             		.long	-1734823125
 1613 0f8c 22 33 11 11             		.long	0x11113322
 1614 0f90 D2 BB 69 69             		.long	0x6969bbd2
 1615 0f94 A9 70 D9 D9             		.long	-640061271
 1616 0f98 07 89 8E 8E             		.long	-1903261433
 1617 0f9c 33 A7 94 94             		.long	-1802197197
 1618 0fa0 2D B6 9B 9B             		.long	-1684294099
 1619 0fa4 3C 22 1E 1E             		.long	0x1e1e223c
 1620 0fa8 15 92 87 87             		.long	-2021158379
 1621 0fac C9 20 E9 E9             		.long	-370597687
 1622 0fb0 87 49 CE CE             		.long	-825341561
 1623 0fb4 AA FF 55 55             		.long	0x5555ffaa
 1624 0fb8 50 78 28 28             		.long	0x28287850
 1625 0fbc A5 7A DF DF             		.long	-539002203
 1626 0fc0 03 8F 8C 8C             		.long	-1936945405
 1627 0fc4 59 F8 A1 A1             		.long	-1583220647
 1628 0fc8 09 80 89 89             		.long	-1987477495
 1629 0fcc 1A 17 0D 0D             		.long	0xd0d171a
 1630 0fd0 65 DA BF BF             		.long	-1077945755
 1631 0fd4 D7 31 E6 E6             		.long	-421121577
 1632 0fd8 84 C6 42 42             		.long	0x4242c684
 1633 0fdc D0 B8 68 68             		.long	0x6868b8d0
 1634 0fe0 82 C3 41 41             		.long	0x4141c382
 1635 0fe4 29 B0 99 99             		.long	-1717981143
 1636 0fe8 5A 77 2D 2D             		.long	0x2d2d775a
 1637 0fec 1E 11 0F 0F             		.long	0xf0f111e
 1638 0ff0 7B CB B0 B0             		.long	-1330590853
 1639 0ff4 A8 FC 54 54             		.long	0x5454fca8
 1640 0ff8 6D D6 BB BB             		.long	-1145317779
 1641 0ffc 2C 3A 16 16             		.long	0x16163a2c
 1642                             		.section	.rodata.Td,"a"
 1643                             		.balign 4
 1646                             	_Td:
 1647 0000 50 A7 F4 51             		.long	0x51f4a750
 1648 0004 53 65 41 7E             		.long	0x7e416553
 1649 0008 C3 A4 17 1A             		.long	0x1a17a4c3
 1650 000c 96 5E 27 3A             		.long	0x3a275e96
 1651 0010 CB 6B AB 3B             		.long	0x3bab6bcb
 1652 0014 F1 45 9D 1F             		.long	0x1f9d45f1
 1653 0018 AB 58 FA AC             		.long	-1392879445
 1654 001c 93 03 E3 4B             		.long	0x4be30393
 1655 0020 55 FA 30 20             		.long	0x2030fa55
 1656 0024 F6 6D 76 AD             		.long	-1384747530
 1657 0028 91 76 CC 88             		.long	-1999866223
 1658 002c 25 4C 02 F5             		.long	-184398811
 1659 0030 FC D7 E5 4F             		.long	0x4fe5d7fc
 1660 0034 D7 CB 2A C5             		.long	-987051049
 1661 0038 80 44 35 26             		.long	0x26354480
 1662 003c 8F A3 62 B5             		.long	-1251826801
 1663 0040 49 5A B1 DE             		.long	-558802359
 1664 0044 67 1B BA 25             		.long	0x25ba1b67
 1665 0048 98 0E EA 45             		.long	0x45ea0e98
 1666 004c E1 C0 FE 5D             		.long	0x5dfec0e1
 1667 0050 02 75 2F C3             		.long	-1020300030
 1668 0054 12 F0 4C 81             		.long	-2125664238
 1669 0058 A3 97 46 8D             		.long	-1924753501
 1670 005c C6 F9 D3 6B             		.long	0x6bd3f9c6
 1671 0060 E7 5F 8F 03             		.long	0x38f5fe7
 1672 0064 95 9C 92 15             		.long	0x15929c95
 1673 0068 EB 7A 6D BF             		.long	-1083344149
 1674 006c DA 59 52 95             		.long	-1789765158
 1675 0070 2D 83 BE D4             		.long	-725712083
 1676 0074 D3 21 74 58             		.long	0x587421d3
 1677 0078 29 69 E0 49             		.long	0x49e06929
 1678 007c 44 C8 C9 8E             		.long	-1899378620
 1679 0080 6A 89 C2 75             		.long	0x75c2896a
 1680 0084 78 79 8E F4             		.long	-191989384
 1681 0088 6B 3E 58 99             		.long	-1722270101
 1682 008c DD 71 B9 27             		.long	0x27b971dd
 1683 0090 B6 4F E1 BE             		.long	-1092530250
 1684 0094 17 AD 88 F0             		.long	-259478249
 1685 0098 66 AC 20 C9             		.long	-920605594
 1686 009c B4 3A CE 7D             		.long	0x7dce3ab4
 1687 00a0 18 4A DF 63             		.long	0x63df4a18
 1688 00a4 82 31 1A E5             		.long	-451268222
 1689 00a8 60 33 51 97             		.long	-1756286112
 1690 00ac 45 7F 53 62             		.long	0x62537f45
 1691 00b0 E0 77 64 B1             		.long	-1318815776
 1692 00b4 84 AE 6B BB             		.long	-1150570876
 1693 00b8 1C A0 81 FE             		.long	-25059300
 1694 00bc 94 2B 08 F9             		.long	-116905068
 1695 00c0 58 68 48 70             		.long	0x70486858
 1696 00c4 19 FD 45 8F             		.long	-1891238631
 1697 00c8 87 6C DE 94             		.long	-1797362553
 1698 00cc B7 F8 7B 52             		.long	0x527bf8b7
 1699 00d0 23 D3 73 AB             		.long	-1418472669
 1700 00d4 E2 02 4B 72             		.long	0x724b02e2
 1701 00d8 57 8F 1F E3             		.long	-484470953
 1702 00dc 2A AB 55 66             		.long	0x6655ab2a
 1703 00e0 07 28 EB B2             		.long	-1293211641
 1704 00e4 03 C2 B5 2F             		.long	0x2fb5c203
 1705 00e8 9A 7B C5 86             		.long	-2033878118
 1706 00ec A5 08 37 D3             		.long	-751368027
 1707 00f0 F2 87 28 30             		.long	0x302887f2
 1708 00f4 B2 A5 BF 23             		.long	0x23bfa5b2
 1709 00f8 BA 6A 03 02             		.long	0x2036aba
 1710 00fc 5C 82 16 ED             		.long	-317291940
 1711 0100 2B 1C CF 8A             		.long	-1966138325
 1712 0104 92 B4 79 A7             		.long	-1485196142
 1713 0108 F0 F2 07 F3             		.long	-217582864
 1714 010c A1 E2 69 4E             		.long	0x4e69e2a1
 1715 0110 CD F4 DA 65             		.long	0x65daf4cd
 1716 0114 D5 BE 05 06             		.long	0x605bed5
 1717 0118 1F 62 34 D1             		.long	-785096161
 1718 011c 8A FE A6 C4             		.long	-995688822
 1719 0120 9D 53 2E 34             		.long	0x342e539d
 1720 0124 A0 55 F3 A2             		.long	-1561111136
 1721 0128 32 E1 8A 05             		.long	0x58ae132
 1722 012c 75 EB F6 A4             		.long	-1527321739
 1723 0130 39 EC 83 0B             		.long	0xb83ec39
 1724 0134 AA EF 60 40             		.long	0x4060efaa
 1725 0138 06 9F 71 5E             		.long	0x5e719f06
 1726 013c 51 10 6E BD             		.long	-1116860335
 1727 0140 F9 8A 21 3E             		.long	0x3e218af9
 1728 0144 3D 06 DD 96             		.long	-1763899843
 1729 0148 AE 05 3E DD             		.long	-583137874
 1730 014c 46 BD E6 4D             		.long	0x4de6bd46
 1731 0150 B5 8D 54 91             		.long	-1856729675
 1732 0154 05 5D C4 71             		.long	0x71c45d05
 1733 0158 6F D4 06 04             		.long	0x406d46f
 1734 015c FF 15 50 60             		.long	0x605015ff
 1735 0160 24 FB 98 19             		.long	0x1998fb24
 1736 0164 97 E9 BD D6             		.long	-692196969
 1737 0168 CC 43 40 89             		.long	-1992277044
 1738 016c 77 9E D9 67             		.long	0x67d99e77
 1739 0170 BD 42 E8 B0             		.long	-1326955843
 1740 0174 88 8B 89 07             		.long	0x7898b88
 1741 0178 38 5B 19 E7             		.long	-417768648
 1742 017c DB EE C8 79             		.long	0x79c8eedb
 1743 0180 47 0A 7C A1             		.long	-1585706425
 1744 0184 E9 0F 42 7C             		.long	0x7c420fe9
 1745 0188 C9 1E 84 F8             		.long	-125559095
 1746 018c 00 00 00 00             		.long	0
 1747 0190 83 86 80 09             		.long	0x9808683
 1748 0194 48 ED 2B 32             		.long	0x322bed48
 1749 0198 AC 70 11 1E             		.long	0x1e1170ac
 1750 019c 4E 72 5A 6C             		.long	0x6c5a724e
 1751 01a0 FB FF 0E FD             		.long	-49348613
 1752 01a4 56 38 85 0F             		.long	0xf853856
 1753 01a8 1E D5 AE 3D             		.long	0x3daed51e
 1754 01ac 27 39 2D 36             		.long	0x362d3927
 1755 01b0 64 D9 0F 0A             		.long	0xa0fd964
 1756 01b4 21 A6 5C 68             		.long	0x685ca621
 1757 01b8 D1 54 5B 9B             		.long	-1688513327
 1758 01bc 3A 2E 36 24             		.long	0x24362e3a
 1759 01c0 B1 67 0A 0C             		.long	0xc0a67b1
 1760 01c4 0F E7 57 93             		.long	-1822955761
 1761 01c8 D2 96 EE B4             		.long	-1259432238
 1762 01cc 9E 91 9B 1B             		.long	0x1b9b919e
 1763 01d0 4F C5 C0 80             		.long	-2134850225
 1764 01d4 A2 20 DC 61             		.long	0x61dc20a2
 1765 01d8 69 4B 77 5A             		.long	0x5a774b69
 1766 01dc 16 1A 12 1C             		.long	0x1c121a16
 1767 01e0 0A BA 93 E2             		.long	-493635062
 1768 01e4 E5 2A A0 C0             		.long	-1063245083
 1769 01e8 43 E0 22 3C             		.long	0x3c22e043
 1770 01ec 1D 17 1B 12             		.long	0x121b171d
 1771 01f0 0B 0D 09 0E             		.long	0xe090d0b
 1772 01f4 AD C7 8B F2             		.long	-225720403
 1773 01f8 B9 A8 B6 2D             		.long	0x2db6a8b9
 1774 01fc C8 A9 1E 14             		.long	0x141ea9c8
 1775 0200 85 19 F1 57             		.long	0x57f11985
 1776 0204 4C 07 75 AF             		.long	-1351284916
 1777 0208 BB DD 99 EE             		.long	-291906117
 1778 020c FD 60 7F A3             		.long	-1551933187
 1779 0210 9F 26 01 F7             		.long	-150919521
 1780 0214 BC F5 72 5C             		.long	0x5c72f5bc
 1781 0218 C5 3B 66 44             		.long	0x44663bc5
 1782 021c 34 7E FB 5B             		.long	0x5bfb7e34
 1783 0220 76 29 43 8B             		.long	-1958532746
 1784 0224 DC C6 23 CB             		.long	-886847780
 1785 0228 68 FC ED B6             		.long	-1225917336
 1786 022c 63 F1 E4 B8             		.long	-1192955549
 1787 0230 CA DC 31 D7             		.long	-684598070
 1788 0234 10 85 63 42             		.long	0x42638510
 1789 0238 40 22 97 13             		.long	0x13972240
 1790 023c 20 11 C6 84             		.long	-2067394272
 1791 0240 7D 24 4A 85             		.long	-2058738563
 1792 0244 F8 3D BB D2             		.long	-759480840
 1793 0248 11 32 F9 AE             		.long	-1359400431
 1794 024c 6D A1 29 C7             		.long	-953573011
 1795 0250 4B 2F 9E 1D             		.long	0x1d9e2f4b
 1796 0254 F3 30 B2 DC             		.long	-592301837
 1797 0258 EC 52 86 0D             		.long	0xd8652ec
 1798 025c D0 E3 C1 77             		.long	0x77c1e3d0
 1799 0260 6C 16 B3 2B             		.long	0x2bb3166c
 1800 0264 99 B9 70 A9             		.long	-1452230247
 1801 0268 FA 48 94 11             		.long	0x119448fa
 1802 026c 22 64 E9 47             		.long	0x47e96422
 1803 0270 C4 8C FC A8             		.long	-1459843900
 1804 0274 1A 3F F0 A0             		.long	-1594867942
 1805 0278 D8 2C 7D 56             		.long	0x567d2cd8
 1806 027c EF 90 33 22             		.long	0x223390ef
 1807 0280 C7 4E 49 87             		.long	-2025238841
 1808 0284 C1 D1 38 D9             		.long	-650587711
 1809 0288 FE A2 CA 8C             		.long	-1932877058
 1810 028c 36 0B D4 98             		.long	-1730933962
 1811 0290 CF 81 F5 A6             		.long	-1493859889
 1812 0294 28 DE 7A A5             		.long	-1518674392
 1813 0298 26 8E B7 DA             		.long	-625504730
 1814 029c A4 BF AD 3F             		.long	0x3fadbfa4
 1815 02a0 E4 9D 3A 2C             		.long	0x2c3a9de4
 1816 02a4 0D 92 78 50             		.long	0x5078920d
 1817 02a8 9B CC 5F 6A             		.long	0x6a5fcc9b
 1818 02ac 62 46 7E 54             		.long	0x547e4662
 1819 02b0 C2 13 8D F6             		.long	-158526526
 1820 02b4 E8 B8 D8 90             		.long	-1864845080
 1821 02b8 5E F7 39 2E             		.long	0x2e39f75e
 1822 02bc F5 AF C3 82             		.long	-2101104651
 1823 02c0 BE 80 5D 9F             		.long	-1621262146
 1824 02c4 7C 93 D0 69             		.long	0x69d0937c
 1825 02c8 A9 2D D5 6F             		.long	0x6fd52da9
 1826 02cc B3 12 25 CF             		.long	-819653965
 1827 02d0 3B 99 AC C8             		.long	-928212677
 1828 02d4 A7 7D 18 10             		.long	0x10187da7
 1829 02d8 6E 63 9C E8             		.long	-392404114
 1830 02dc 7B BB 3B DB             		.long	-616842373
 1831 02e0 09 78 26 CD             		.long	-853116919
 1832 02e4 F4 18 59 6E             		.long	0x6e5918f4
 1833 02e8 01 B7 9A EC             		.long	-325404927
 1834 02ec A8 9A 4F 83             		.long	-2091935064
 1835 02f0 65 6E 95 E6             		.long	-426414491
 1836 02f4 7E E6 FF AA             		.long	-1426069890
 1837 02f8 08 CF BC 21             		.long	0x21bccf08
 1838 02fc E6 E8 15 EF             		.long	-283776794
 1839 0300 D9 9B E7 BA             		.long	-1159226407
 1840 0304 CE 36 6F 4A             		.long	0x4a6f36ce
 1841 0308 D4 09 9F EA             		.long	-358676012
 1842 030c D6 7C B0 29             		.long	0x29b07cd6
 1843 0310 AF B2 A4 31             		.long	0x31a4b2af
 1844 0314 31 23 3F 2A             		.long	0x2a3f2331
 1845 0318 30 94 A5 C6             		.long	-962227152
 1846 031c C0 66 A2 35             		.long	0x35a266c0
 1847 0320 37 BC 4E 74             		.long	0x744ebc37
 1848 0324 A6 CA 82 FC             		.long	-58537306
 1849 0328 B0 D0 90 E0             		.long	-527380304
 1850 032c 15 D8 A7 33             		.long	0x33a7d815
 1851 0330 4A 98 04 F1             		.long	-251357110
 1852 0334 F7 DA EC 41             		.long	0x41ecdaf7
 1853 0338 0E 50 CD 7F             		.long	0x7fcd500e
 1854 033c 2F F6 91 17             		.long	0x1791f62f
 1855 0340 8D D6 4D 76             		.long	0x764dd68d
 1856 0344 4D B0 EF 43             		.long	0x43efb04d
 1857 0348 54 4D AA CC             		.long	-861254316
 1858 034c DF 04 96 E4             		.long	-459930401
 1859 0350 E3 B5 D1 9E             		.long	-1630423581
 1860 0354 1B 88 6A 4C             		.long	0x4c6a881b
 1861 0358 B8 1F 2C C1             		.long	-1054072904
 1862 035c 7F 51 65 46             		.long	0x4665517f
 1863 0360 04 EA 5E 9D             		.long	-1654724092
 1864 0364 5D 35 8C 01             		.long	0x18c355d
 1865 0368 73 74 87 FA             		.long	-91786125
 1866 036c 2E 41 0B FB             		.long	-83148498
 1867 0370 5A 1D 67 B3             		.long	-1285087910
 1868 0374 52 D2 DB 92             		.long	-1831087534
 1869 0378 33 56 10 E9             		.long	-384805325
 1870 037c 13 47 D6 6D             		.long	0x6dd64713
 1871 0380 8C 61 D7 9A             		.long	-1697160820
 1872 0384 7A 0C A1 37             		.long	0x37a10c7a
 1873 0388 8E 14 F8 59             		.long	0x59f8148e
 1874 038c 89 3C 13 EB             		.long	-351060855
 1875 0390 EE 27 A9 CE             		.long	-827774994
 1876 0394 35 C9 61 B7             		.long	-1218328267
 1877 0398 ED E5 1C E1             		.long	-518199827
 1878 039c 3C B1 47 7A             		.long	0x7a47b13c
 1879 03a0 59 DF D2 9C             		.long	-1663901863
 1880 03a4 3F 73 F2 55             		.long	0x55f2733f
 1881 03a8 79 CE 14 18             		.long	0x1814ce79
 1882 03ac BF 37 C7 73             		.long	0x73c737bf
 1883 03b0 EA CD F7 53             		.long	0x53f7cdea
 1884 03b4 5B AA FD 5F             		.long	0x5ffdaa5b
 1885 03b8 14 6F 3D DF             		.long	-549621996
 1886 03bc 86 DB 44 78             		.long	0x7844db86
 1887 03c0 81 F3 AF CA             		.long	-894438527
 1888 03c4 3E C4 68 B9             		.long	-1184316354
 1889 03c8 2C 34 24 38             		.long	0x3824342c
 1890 03cc 5F 40 A3 C2             		.long	-1029488545
 1891 03d0 72 C3 1D 16             		.long	0x161dc372
 1892 03d4 0C 25 E2 BC             		.long	-1126030068
 1893 03d8 8B 49 3C 28             		.long	0x283c498b
 1894 03dc 41 95 0D FF             		.long	-15887039
 1895 03e0 71 01 A8 39             		.long	0x39a80171
 1896 03e4 DE B3 0C 08             		.long	0x80cb3de
 1897 03e8 9C E4 B4 D8             		.long	-659233636
 1898 03ec 90 C1 56 64             		.long	0x6456c190
 1899 03f0 61 84 CB 7B             		.long	0x7bcb8461
 1900 03f4 70 B6 32 D5             		.long	-718096784
 1901 03f8 74 5C 6C 48             		.long	0x486c5c74
 1902 03fc 42 57 B8 D0             		.long	-793225406
 1903 0400 A7 F4 51 50             		.long	0x5051f4a7
 1904 0404 65 41 7E 53             		.long	0x537e4165
 1905 0408 A4 17 1A C3             		.long	-1021700188
 1906 040c 5E 27 3A 96             		.long	-1774573730
 1907 0410 6B AB 3B CB             		.long	-885281941
 1908 0414 45 9D 1F F1             		.long	-249586363
 1909 0418 58 FA AC AB             		.long	-1414727080
 1910 041c 03 E3 4B 93             		.long	-1823743229
 1911 0420 FA 30 20 55             		.long	0x552030fa
 1912 0424 6D 76 AD F6             		.long	-156404115
 1913 0428 76 CC 88 91             		.long	-1853305738
 1914 042c 4C 02 F5 25             		.long	0x25f5024c
 1915 0430 D7 E5 4F FC             		.long	-61872681
 1916 0434 CB 2A C5 D7             		.long	-674944309
 1917 0438 44 35 26 80             		.long	-2144979644
 1918 043c A3 62 B5 8F             		.long	-1883938141
 1919 0440 5A B1 DE 49             		.long	0x49deb15a
 1920 0444 1B BA 25 67             		.long	0x6725ba1b
 1921 0448 0E EA 45 98             		.long	-1740248562
 1922 044c C0 FE 5D E1             		.long	-513933632
 1923 0450 75 2F C3 02             		.long	0x2c32f75
 1924 0454 F0 4C 81 12             		.long	0x12814cf0
 1925 0458 97 46 8D A3             		.long	-1551022441
 1926 045c F9 D3 6B C6             		.long	-966011911
 1927 0460 5F 8F 03 E7             		.long	-419197089
 1928 0464 9C 92 15 95             		.long	-1793748324
 1929 0468 7A 6D BF EB             		.long	-339776134
 1930 046c 59 52 95 DA             		.long	-627748263
 1931 0470 83 BE D4 2D             		.long	0x2dd4be83
 1932 0474 21 74 58 D3             		.long	-749177823
 1933 0478 69 E0 49 29             		.long	0x2949e069
 1934 047c C8 C9 8E 44             		.long	0x448ec9c8
 1935 0480 89 C2 75 6A             		.long	0x6a75c289
 1936 0484 79 8E F4 78             		.long	0x78f48e79
 1937 0488 3E 58 99 6B             		.long	0x6b99583e
 1938 048c 71 B9 27 DD             		.long	-584599183
 1939 0490 4F E1 BE B6             		.long	-1229004465
 1940 0494 AD 88 F0 17             		.long	0x17f088ad
 1941 0498 AC 20 C9 66             		.long	0x66c920ac
 1942 049c 3A CE 7D B4             		.long	-1266823622
 1943 04a0 4A DF 63 18             		.long	0x1863df4a
 1944 04a4 31 1A E5 82             		.long	-2098914767
 1945 04a8 33 51 97 60             		.long	0x60975133
 1946 04ac 7F 53 62 45             		.long	0x4562537f
 1947 04b0 77 64 B1 E0             		.long	-525245321
 1948 04b4 AE 6B BB 84             		.long	-2068091986
 1949 04b8 A0 81 FE 1C             		.long	0x1cfe81a0
 1950 04bc 2B 08 F9 94             		.long	-1795618773
 1951 04c0 68 48 70 58             		.long	0x58704868
 1952 04c4 FD 45 8F 19             		.long	0x198f45fd
 1953 04c8 6C DE 94 87             		.long	-2020286868
 1954 04cc F8 7B 52 B7             		.long	-1219331080
 1955 04d0 D3 73 AB 23             		.long	0x23ab73d3
 1956 04d4 02 4B 72 E2             		.long	-495826174
 1957 04d8 8F 1F E3 57             		.long	0x57e31f8f
 1958 04dc AB 55 66 2A             		.long	0x2a6655ab
 1959 04e0 28 EB B2 07             		.long	0x7b2eb28
 1960 04e4 C2 B5 2F 03             		.long	0x32fb5c2
 1961 04e8 7B C5 86 9A             		.long	-1702443653
 1962 04ec 08 37 D3 A5             		.long	-1512884472
 1963 04f0 87 28 30 F2             		.long	-231724921
 1964 04f4 A5 BF 23 B2             		.long	-1306280027
 1965 04f8 6A 03 02 BA             		.long	-1174273174
 1966 04fc 82 16 ED 5C             		.long	0x5ced1682
 1967 0500 1C CF 8A 2B             		.long	0x2b8acf1c
 1968 0504 B4 79 A7 92             		.long	-1834518092
 1969 0508 F2 07 F3 F0             		.long	-252508174
 1970 050c E2 69 4E A1             		.long	-1588696606
 1971 0510 F4 DA 65 CD             		.long	-848962828
 1972 0514 BE 05 06 D5             		.long	-721025602
 1973 0518 62 34 D1 1F             		.long	0x1fd13462
 1974 051c FE A6 C4 8A             		.long	-1966823682
 1975 0520 53 2E 34 9D             		.long	-1657524653
 1976 0524 55 F3 A2 A0             		.long	-1599933611
 1977 0528 E1 8A 05 32             		.long	0x32058ae1
 1978 052c EB F6 A4 75             		.long	0x75a4f6eb
 1979 0530 EC 83 0B 39             		.long	0x390b83ec
 1980 0534 EF 60 40 AA             		.long	-1438621457
 1981 0538 9F 71 5E 06             		.long	0x65e719f
 1982 053c 10 6E BD 51             		.long	0x51bd6e10
 1983 0540 8A 21 3E F9             		.long	-113368694
 1984 0544 06 DD 96 3D             		.long	0x3d96dd06
 1985 0548 05 3E DD AE             		.long	-1361232379
 1986 054c BD E6 4D 46             		.long	0x464de6bd
 1987 0550 8D 54 91 B5             		.long	-1248766835
 1988 0554 5D C4 71 05             		.long	0x571c45d
 1989 0558 D4 06 04 6F             		.long	0x6f0406d4
 1990 055c 15 50 60 FF             		.long	-10465259
 1991 0560 FB 98 19 24             		.long	0x241998fb
 1992 0564 E9 BD D6 97             		.long	-1747534359
 1993 0568 43 40 89 CC             		.long	-863420349
 1994 056c 9E D9 67 77             		.long	0x7767d99e
 1995 0570 42 E8 B0 BD             		.long	-1112479678
 1996 0574 8B 89 07 88             		.long	-2012771957
 1997 0578 5B 19 E7 38             		.long	0x38e7195b
 1998 057c EE C8 79 DB             		.long	-612775698
 1999 0580 0A 7C A1 47             		.long	0x47a17c0a
 2000 0584 0F 42 7C E9             		.long	-377732593
 2001 0588 1E 84 F8 C9             		.long	-906460130
 2002 058c 00 00 00 00             		.long	0
 2003 0590 86 80 09 83             		.long	-2096529274
 2004 0594 ED 2B 32 48             		.long	0x48322bed
 2005 0598 70 11 1E AC             		.long	-1407315600
 2006 059c 72 5A 6C 4E             		.long	0x4e6c5a72
 2007 05a0 FF 0E FD FB             		.long	-67301633
 2008 05a4 38 85 0F 56             		.long	0x560f8538
 2009 05a8 D5 AE 3D 1E             		.long	0x1e3daed5
 2010 05ac 39 2D 36 27             		.long	0x27362d39
 2011 05b0 D9 0F 0A 64             		.long	0x640a0fd9
 2012 05b4 A6 5C 68 21             		.long	0x21685ca6
 2013 05b8 54 5B 9B D1             		.long	-778347692
 2014 05bc 2E 36 24 3A             		.long	0x3a24362e
 2015 05c0 67 0A 0C B1             		.long	-1324610969
 2016 05c4 E7 57 93 0F             		.long	0xf9357e7
 2017 05c8 96 EE B4 D2             		.long	-759894378
 2018 05cc 91 9B 1B 9E             		.long	-1642357871
 2019 05d0 C5 C0 80 4F             		.long	0x4f80c0c5
 2020 05d4 20 DC 61 A2             		.long	-1570644960
 2021 05d8 4B 77 5A 69             		.long	0x695a774b
 2022 05dc 1A 12 1C 16             		.long	0x161c121a
 2023 05e0 BA 93 E2 0A             		.long	0xae293ba
 2024 05e4 2A A0 C0 E5             		.long	-440360918
 2025 05e8 E0 22 3C 43             		.long	0x433c22e0
 2026 05ec 17 1B 12 1D             		.long	0x1d121b17
 2027 05f0 0D 09 0E 0B             		.long	0xb0e090d
 2028 05f4 C7 8B F2 AD             		.long	-1376613433
 2029 05f8 A8 B6 2D B9             		.long	-1188186456
 2030 05fc A9 1E 14 C8             		.long	-938205527
 2031 0600 19 F1 57 85             		.long	-2057834215
 2032 0604 07 75 AF 4C             		.long	0x4caf7507
 2033 0608 DD 99 EE BB             		.long	-1141990947
 2034 060c 60 7F A3 FD             		.long	-39616672
 2035 0610 26 01 F7 9F             		.long	-1611202266
 2036 0614 F5 72 5C BC             		.long	-1134791947
 2037 0618 3B 66 44 C5             		.long	-985373125
 2038 061c 7E FB 5B 34             		.long	0x345bfb7e
 2039 0620 29 43 8B 76             		.long	0x768b4329
 2040 0624 C6 23 CB DC             		.long	-590666810
 2041 0628 FC ED B6 68             		.long	0x68b6edfc
 2042 062c F1 E4 B8 63             		.long	0x63b8e4f1
 2043 0630 DC 31 D7 CA             		.long	-891866660
 2044 0634 85 63 42 10             		.long	0x10426385
 2045 0638 22 97 13 40             		.long	0x40139722
 2046 063c 11 C6 84 20             		.long	0x2084c611
 2047 0640 24 4A 85 7D             		.long	0x7d854a24
 2048 0644 3D BB D2 F8             		.long	-120407235
 2049 0648 32 F9 AE 11             		.long	0x11aef932
 2050 064c A1 29 C7 6D             		.long	0x6dc729a1
 2051 0650 2F 9E 1D 4B             		.long	0x4b1d9e2f
 2052 0654 30 B2 DC F3             		.long	-203640272
 2053 0658 52 86 0D EC             		.long	-334657966
 2054 065c E3 C1 77 D0             		.long	-797457949
 2055 0660 16 B3 2B 6C             		.long	0x6c2bb316
 2056 0664 B9 70 A9 99             		.long	-1716948807
 2057 0668 48 94 11 FA             		.long	-99511224
 2058 066c 64 E9 47 22             		.long	0x2247e964
 2059 0670 8C FC A8 C4             		.long	-995558260
 2060 0674 3F F0 A0 1A             		.long	0x1aa0f03f
 2061 0678 2C 7D 56 D8             		.long	-665420500
 2062 067c 90 33 22 EF             		.long	-282971248
 2063 0680 4E 49 87 C7             		.long	-947435186
 2064 0684 D1 38 D9 C1             		.long	-1042728751
 2065 0688 A2 CA 8C FE             		.long	-24327518
 2066 068c 0B D4 98 36             		.long	0x3698d40b
 2067 0690 81 F5 A6 CF             		.long	-811141759
 2068 0694 DE 7A A5 28             		.long	0x28a57ade
 2069 0698 8E B7 DA 26             		.long	0x26dab78e
 2070 069c BF AD 3F A4             		.long	-1539330625
 2071 06a0 9D 3A 2C E4             		.long	-466863459
 2072 06a4 92 78 50 0D             		.long	0xd507892
 2073 06a8 CC 5F 6A 9B             		.long	-1687527476
 2074 06ac 46 7E 54 62             		.long	0x62547e46
 2075 06b0 13 8D F6 C2             		.long	-1024029421
 2076 06b4 B8 D8 90 E8             		.long	-393160520
 2077 06b8 F7 39 2E 5E             		.long	0x5e2e39f7
 2078 06bc AF C3 82 F5             		.long	-175979601
 2079 06c0 80 5D 9F BE             		.long	-1096852096
 2080 06c4 93 D0 69 7C             		.long	0x7c69d093
 2081 06c8 2D D5 6F A9             		.long	-1452288723
 2082 06cc 12 25 CF B3             		.long	-1278270190
 2083 06d0 99 AC C8 3B             		.long	0x3bc8ac99
 2084 06d4 7D 18 10 A7             		.long	-1492117379
 2085 06d8 63 9C E8 6E             		.long	0x6ee89c63
 2086 06dc BB 3B DB 7B             		.long	0x7bdb3bbb
 2087 06e0 78 26 CD 09             		.long	0x9cd2678
 2088 06e4 18 59 6E F4             		.long	-194094824
 2089 06e8 B7 9A EC 01             		.long	0x1ec9ab7
 2090 06ec 9A 4F 83 A8             		.long	-1467789414
 2091 06f0 6E 95 E6 65             		.long	0x65e6956e
 2092 06f4 E6 FF AA 7E             		.long	0x7eaaffe6
 2093 06f8 CF BC 21 08             		.long	0x821bccf
 2094 06fc E8 15 EF E6             		.long	-420538904
 2095 0700 9B E7 BA D9             		.long	-642062437
 2096 0704 36 6F 4A CE             		.long	-833982666
 2097 0708 09 9F EA D4             		.long	-722821367
 2098 070c 7C B0 29 D6             		.long	-701910916
 2099 0710 B2 A4 31 AF             		.long	-1355701070
 2100 0714 23 3F 2A 31             		.long	0x312a3f23
 2101 0718 94 A5 C6 30             		.long	0x30c6a594
 2102 071c 66 A2 35 C0             		.long	-1070226842
 2103 0720 BC 4E 74 37             		.long	0x37744ebc
 2104 0724 CA 82 FC A6             		.long	-1493400886
 2105 0728 D0 90 E0 B0             		.long	-1327460144
 2106 072c D8 A7 33 15             		.long	0x1533a7d8
 2107 0730 98 04 F1 4A             		.long	0x4af10498
 2108 0734 DA EC 41 F7             		.long	-146674470
 2109 0738 50 CD 7F 0E             		.long	0xe7fcd50
 2110 073c F6 91 17 2F             		.long	0x2f1791f6
 2111 0740 D6 4D 76 8D             		.long	-1921626666
 2112 0744 B0 EF 43 4D             		.long	0x4d43efb0
 2113 0748 4D AA CC 54             		.long	0x54ccaa4d
 2114 074c 04 96 E4 DF             		.long	-538667516
 2115 0750 B5 D1 9E E3             		.long	-476130891
 2116 0754 88 6A 4C 1B             		.long	0x1b4c6a88
 2117 0758 1F 2C C1 B8             		.long	-1195299809
 2118 075c 51 65 46 7F             		.long	0x7f466551
 2119 0760 EA 5E 9D 04             		.long	0x49d5eea
 2120 0764 35 8C 01 5D             		.long	0x5d018c35
 2121 0768 74 87 FA 73             		.long	0x73fa8774
 2122 076c 41 0B FB 2E             		.long	0x2efb0b41
 2123 0770 1D 67 B3 5A             		.long	0x5ab3671d
 2124 0774 D2 DB 92 52             		.long	0x5292dbd2
 2125 0778 56 10 E9 33             		.long	0x33e91056
 2126 077c 47 D6 6D 13             		.long	0x136dd647
 2127 0780 61 D7 9A 8C             		.long	-1936009375
 2128 0784 0C A1 37 7A             		.long	0x7a37a10c
 2129 0788 14 F8 59 8E             		.long	-1906706412
 2130 078c 3C 13 EB 89             		.long	-1981082820
 2131 0790 27 A9 CE EE             		.long	-288446169
 2132 0794 C9 61 B7 35             		.long	0x35b761c9
 2133 0798 E5 1C E1 ED             		.long	-304014107
 2134 079c B1 47 7A 3C             		.long	0x3c7a47b1
 2135 07a0 DF D2 9C 59             		.long	0x599cd2df
 2136 07a4 73 F2 55 3F             		.long	0x3f55f273
 2137 07a8 CE 14 18 79             		.long	0x791814ce
 2138 07ac 37 C7 73 BF             		.long	-1082931401
 2139 07b0 CD F7 53 EA             		.long	-363595827
 2140 07b4 AA FD 5F 5B             		.long	0x5b5ffdaa
 2141 07b8 6F 3D DF 14             		.long	0x14df3d6f
 2142 07bc DB 44 78 86             		.long	-2038938405
 2143 07c0 F3 AF CA 81             		.long	-2117423117
 2144 07c4 C4 68 B9 3E             		.long	0x3eb968c4
 2145 07c8 34 24 38 2C             		.long	0x2c382434
 2146 07cc 40 A3 C2 5F             		.long	0x5fc2a340
 2147 07d0 C3 1D 16 72             		.long	0x72161dc3
 2148 07d4 25 E2 BC 0C             		.long	0xcbce225
 2149 07d8 49 3C 28 8B             		.long	-1960297399
 2150 07dc 95 0D FF 41             		.long	0x41ff0d95
 2151 07e0 01 A8 39 71             		.long	0x7139a801
 2152 07e4 B3 0C 08 DE             		.long	-569897805
 2153 07e8 E4 B4 D8 9C             		.long	-1663519516
 2154 07ec C1 56 64 90             		.long	-1872472383
 2155 07f0 84 CB 7B 61             		.long	0x617bcb84
 2156 07f4 B6 32 D5 70             		.long	0x70d532b6
 2157 07f8 5C 6C 48 74             		.long	0x74486c5c
 2158 07fc 57 B8 D0 42             		.long	0x42d0b857
 2159 0800 F4 51 50 A7             		.long	-1487908364
 2160 0804 41 7E 53 65             		.long	0x65537e41
 2161 0808 17 1A C3 A4             		.long	-1530717673
 2162 080c 27 3A 96 5E             		.long	0x5e963a27
 2163 0810 AB 3B CB 6B             		.long	0x6bcb3bab
 2164 0814 9D 1F F1 45             		.long	0x45f11f9d
 2165 0818 FA AC AB 58             		.long	0x58abacfa
 2166 081c E3 4B 93 03             		.long	0x3934be3
 2167 0820 30 20 55 FA             		.long	-95084496
 2168 0824 76 AD F6 6D             		.long	0x6df6ad76
 2169 0828 CC 88 91 76             		.long	0x769188cc
 2170 082c 02 F5 25 4C             		.long	0x4c25f502
 2171 0830 E5 4F FC D7             		.long	-671330331
 2172 0834 2A C5 D7 CB             		.long	-875051734
 2173 0838 35 26 80 44             		.long	0x44802635
 2174 083c 62 B5 8F A3             		.long	-1550863006
 2175 0840 B1 DE 49 5A             		.long	0x5a49deb1
 2176 0844 BA 25 67 1B             		.long	0x1b6725ba
 2177 0848 EA 45 98 0E             		.long	0xe9845ea
 2178 084c FE 5D E1 C0             		.long	-1058972162
 2179 0850 2F C3 02 75             		.long	0x7502c32f
 2180 0854 4C 81 12 F0             		.long	-267222708
 2181 0858 46 8D A3 97             		.long	-1750889146
 2182 085c D3 6B C6 F9             		.long	-104436781
 2183 0860 8F 03 E7 5F             		.long	0x5fe7038f
 2184 0864 92 15 95 9C             		.long	-1667951214
 2185 0868 6D BF EB 7A             		.long	0x7aebbf6d
 2186 086c 52 95 DA 59             		.long	0x59da9552
 2187 0870 BE D4 2D 83             		.long	-2094148418
 2188 0874 74 58 D3 21             		.long	0x21d35874
 2189 0878 E0 49 29 69             		.long	0x692949e0
 2190 087c C9 8E 44 C8             		.long	-935031095
 2191 0880 C2 75 6A 89             		.long	-1989511742
 2192 0884 8E F4 78 79             		.long	0x7978f48e
 2193 0888 58 99 6B 3E             		.long	0x3e6b9958
 2194 088c B9 27 DD 71             		.long	0x71dd27b9
 2195 0890 E1 BE B6 4F             		.long	0x4fb6bee1
 2196 0894 88 F0 17 AD             		.long	-1390940024
 2197 0898 20 C9 66 AC             		.long	-1402549984
 2198 089c CE 7D B4 3A             		.long	0x3ab47dce
 2199 08a0 DF 63 18 4A             		.long	0x4a1863df
 2200 08a4 1A E5 82 31             		.long	0x3182e51a
 2201 08a8 51 97 60 33             		.long	0x33609751
 2202 08ac 53 62 45 7F             		.long	0x7f456253
 2203 08b0 64 B1 E0 77             		.long	0x77e0b164
 2204 08b4 6B BB 84 AE             		.long	-1367032981
 2205 08b8 81 FE 1C A0             		.long	-1608712575
 2206 08bc 08 F9 94 2B             		.long	0x2b94f908
 2207 08c0 48 70 58 68             		.long	0x68587048
 2208 08c4 45 8F 19 FD             		.long	-48656571
 2209 08c8 DE 94 87 6C             		.long	0x6c8794de
 2210 08cc 7B 52 B7 F8             		.long	-122203525
 2211 08d0 73 AB 23 D3             		.long	-752637069
 2212 08d4 4B 72 E2 02             		.long	0x2e2724b
 2213 08d8 1F E3 57 8F             		.long	-1890065633
 2214 08dc 55 66 2A AB             		.long	-1423284651
 2215 08e0 EB B2 07 28             		.long	0x2807b2eb
 2216 08e4 B5 2F 03 C2             		.long	-1039978571
 2217 08e8 C5 86 9A 7B             		.long	0x7b9a86c5
 2218 08ec 37 D3 A5 08             		.long	0x8a5d337
 2219 08f0 28 30 F2 87             		.long	-2014171096
 2220 08f4 BF 23 B2 A5             		.long	-1515052097
 2221 08f8 03 02 BA 6A             		.long	0x6aba0203
 2222 08fc 16 ED 5C 82             		.long	-2107839210
 2223 0900 CF 8A 2B 1C             		.long	0x1c2b8acf
 2224 0904 79 A7 92 B4             		.long	-1265457287
 2225 0908 07 F3 F0 F2             		.long	-219090169
 2226 090c 69 4E A1 E2             		.long	-492745111
 2227 0910 DA 65 CD F4             		.long	-187865638
 2228 0914 05 06 D5 BE             		.long	-1093335547
 2229 0918 34 D1 1F 62             		.long	0x621fd134
 2230 091c A6 C4 8A FE             		.long	-24460122
 2231 0920 2E 34 9D 53             		.long	0x539d342e
 2232 0924 F3 A2 A0 55             		.long	0x55a0a2f3
 2233 0928 8A 05 32 E1             		.long	-516815478
 2234 092c F6 A4 75 EB             		.long	-344611594
 2235 0930 83 0B 39 EC             		.long	-331805821
 2236 0934 60 40 AA EF             		.long	-274055072
 2237 0938 71 5E 06 9F             		.long	-1626972559
 2238 093c 6E BD 51 10             		.long	0x1051bd6e
 2239 0940 21 3E F9 8A             		.long	-1963377119
 2240 0944 DD 96 3D 06             		.long	0x63d96dd
 2241 0948 3E DD AE 05             		.long	0x5aedd3e
 2242 094c E6 4D 46 BD             		.long	-1119466010
 2243 0950 54 91 B5 8D             		.long	-1917480620
 2244 0954 C4 71 05 5D             		.long	0x5d0571c4
 2245 0958 06 04 6F D4             		.long	-730921978
 2246 095c 50 60 FF 15             		.long	0x15ff6050
 2247 0960 98 19 24 FB             		.long	-81520232
 2248 0964 BD D6 97 E9             		.long	-375925059
 2249 0968 40 89 CC 43             		.long	0x43cc8940
 2250 096c D9 67 77 9E             		.long	-1636341799
 2251 0970 E8 B0 BD 42             		.long	0x42bdb0e8
 2252 0974 89 07 88 8B             		.long	-1954019447
 2253 0978 19 E7 38 5B             		.long	0x5b38e719
 2254 097c C8 79 DB EE             		.long	-287606328
 2255 0980 7C A1 47 0A             		.long	0xa47a17c
 2256 0984 42 7C E9 0F             		.long	0xfe97c42
 2257 0988 84 F8 C9 1E             		.long	0x1ec9f884
 2258 098c 00 00 00 00             		.long	0
 2259 0990 80 09 83 86             		.long	-2038232704
 2260 0994 2B 32 48 ED             		.long	-314035669
 2261 0998 11 1E AC 70             		.long	0x70ac1e11
 2262 099c 5A 6C 4E 72             		.long	0x724e6c5a
 2263 09a0 0E FD FB FF             		.long	-262898
 2264 09a4 85 0F 56 38             		.long	0x38560f85
 2265 09a8 AE 3D 1E D5             		.long	-719438418
 2266 09ac 2D 36 27 39             		.long	0x3927362d
 2267 09b0 0F 0A 64 D9             		.long	-647755249
 2268 09b4 5C 68 21 A6             		.long	-1507760036
 2269 09b8 5B 9B D1 54             		.long	0x54d19b5b
 2270 09bc 36 24 3A 2E             		.long	0x2e3a2436
 2271 09c0 0A 0C B1 67             		.long	0x67b10c0a
 2272 09c4 57 93 0F E7             		.long	-418409641
 2273 09c8 EE B4 D2 96             		.long	-1764576018
 2274 09cc 9B 1B 9E 91             		.long	-1851909221
 2275 09d0 C0 80 4F C5             		.long	-984645440
 2276 09d4 DC 61 A2 20             		.long	0x20a261dc
 2277 09d8 77 5A 69 4B             		.long	0x4b695a77
 2278 09dc 12 1C 16 1A             		.long	0x1a161c12
 2279 09e0 93 E2 0A BA             		.long	-1173691757
 2280 09e4 A0 C0 E5 2A             		.long	0x2ae5c0a0
 2281 09e8 22 3C 43 E0             		.long	-532464606
 2282 09ec 1B 12 1D 17             		.long	0x171d121b
 2283 09f0 09 0E 0B 0D             		.long	0xd0b0e09
 2284 09f4 8B F2 AD C7             		.long	-944901493
 2285 09f8 B6 2D B9 A8             		.long	-1464259146
 2286 09fc 1E 14 C8 A9             		.long	-1446505442
 2287 0a00 F1 57 85 19             		.long	0x198557f1
 2288 0a04 75 AF 4C 07             		.long	0x74caf75
 2289 0a08 99 EE BB DD             		.long	-574886247
 2290 0a0c 7F A3 FD 60             		.long	0x60fda37f
 2291 0a10 01 F7 9F 26             		.long	0x269ff701
 2292 0a14 72 5C BC F5             		.long	-172204942
 2293 0a18 66 44 C5 3B             		.long	0x3bc54466
 2294 0a1c FB 5B 34 7E             		.long	0x7e345bfb
 2295 0a20 43 8B 76 29             		.long	0x29768b43
 2296 0a24 23 CB DC C6             		.long	-958608605
 2297 0a28 ED B6 68 FC             		.long	-60246291
 2298 0a2c E4 B8 63 F1             		.long	-245122844
 2299 0a30 31 D7 CA DC             		.long	-590686415
 2300 0a34 63 42 10 85             		.long	-2062531997
 2301 0a38 97 13 40 22             		.long	0x22401397
 2302 0a3c C6 84 20 11             		.long	0x112084c6
 2303 0a40 4A 85 7D 24             		.long	0x247d854a
 2304 0a44 BB D2 F8 3D             		.long	0x3df8d2bb
 2305 0a48 F9 AE 11 32             		.long	0x3211aef9
 2306 0a4c 29 C7 6D A1             		.long	-1586641111
 2307 0a50 9E 1D 4B 2F             		.long	0x2f4b1d9e
 2308 0a54 B2 DC F3 30             		.long	0x30f3dcb2
 2309 0a58 86 0D EC 52             		.long	0x52ec0d86
 2310 0a5c C1 77 D0 E3             		.long	-472877119
 2311 0a60 B3 2B 6C 16             		.long	0x166c2bb3
 2312 0a64 70 A9 99 B9             		.long	-1181111952
 2313 0a68 94 11 FA 48             		.long	0x48fa1194
 2314 0a6c E9 47 22 64             		.long	0x642247e9
 2315 0a70 FC A8 C4 8C             		.long	-1933268740
 2316 0a74 F0 A0 1A 3F             		.long	0x3f1aa0f0
 2317 0a78 7D 56 D8 2C             		.long	0x2cd8567d
 2318 0a7c 33 22 EF 90             		.long	-1863376333
 2319 0a80 49 87 C7 4E             		.long	0x4ec78749
 2320 0a84 38 D9 C1 D1             		.long	-775825096
 2321 0a88 CA 8C FE A2             		.long	-1560376118
 2322 0a8c D4 98 36 0B             		.long	0xb3698d4
 2323 0a90 F5 A6 CF 81             		.long	-2117097739
 2324 0a94 7A A5 28 DE             		.long	-567761542
 2325 0a98 B7 DA 26 8E             		.long	-1910056265
 2326 0a9c AD 3F A4 BF             		.long	-1079754835
 2327 0aa0 3A 2C E4 9D             		.long	-1645990854
 2328 0aa4 78 50 0D 92             		.long	-1844621192
 2329 0aa8 5F 6A 9B CC             		.long	-862229921
 2330 0aac 7E 54 62 46             		.long	0x4662547e
 2331 0ab0 8D F6 C2 13             		.long	0x13c2f68d
 2332 0ab4 D8 90 E8 B8             		.long	-1192718120
 2333 0ab8 39 2E 5E F7             		.long	-144822727
 2334 0abc C3 82 F5 AF             		.long	-1342864701
 2335 0ac0 5D 9F BE 80             		.long	-2134991011
 2336 0ac4 D0 69 7C 93             		.long	-1820562992
 2337 0ac8 D5 6F A9 2D             		.long	0x2da96fd5
 2338 0acc 25 CF B3 12             		.long	0x12b3cf25
 2339 0ad0 AC C8 3B 99             		.long	-1724135252
 2340 0ad4 18 10 A7 7D             		.long	0x7da71018
 2341 0ad8 9C E8 6E 63             		.long	0x636ee89c
 2342 0adc 3B DB 7B BB             		.long	-1149510853
 2343 0ae0 26 CD 09 78             		.long	0x7809cd26
 2344 0ae4 59 6E F4 18             		.long	0x18f46e59
 2345 0ae8 9A EC 01 B7             		.long	-1224610662
 2346 0aec 4F 83 A8 9A             		.long	-1700232369
 2347 0af0 95 E6 65 6E             		.long	0x6e65e695
 2348 0af4 FF AA 7E E6             		.long	-427906305
 2349 0af8 BC 21 08 CF             		.long	-821550660
 2350 0afc 15 EF E6 E8             		.long	-387518699
 2351 0b00 E7 BA D9 9B             		.long	-1680229657
 2352 0b04 6F 4A CE 36             		.long	0x36ce4a6f
 2353 0b08 9F EA D4 09             		.long	0x9d4ea9f
 2354 0b0c B0 29 D6 7C             		.long	0x7cd629b0
 2355 0b10 A4 31 AF B2             		.long	-1297141340
 2356 0b14 3F 2A 31 23             		.long	0x23312a3f
 2357 0b18 A5 C6 30 94             		.long	-1808742747
 2358 0b1c A2 35 C0 66             		.long	0x66c035a2
 2359 0b20 4E 74 37 BC             		.long	-1137216434
 2360 0b24 82 FC A6 CA             		.long	-895026046
 2361 0b28 90 E0 B0 D0             		.long	-793714544
 2362 0b2c A7 33 15 D8             		.long	-669699161
 2363 0b30 04 F1 4A 98             		.long	-1739919100
 2364 0b34 EC 41 F7 DA             		.long	-621329940
 2365 0b38 CD 7F 0E 50             		.long	0x500e7fcd
 2366 0b3c 91 17 2F F6             		.long	-164685935
 2367 0b40 4D 76 8D D6             		.long	-695372211
 2368 0b44 EF 43 4D B0             		.long	-1337113617
 2369 0b48 AA CC 54 4D             		.long	0x4d54ccaa
 2370 0b4c 96 E4 DF 04             		.long	0x4dfe496
 2371 0b50 D1 9E E3 B5             		.long	-1243373871
 2372 0b54 6A 4C 1B 88             		.long	-2011476886
 2373 0b58 2C C1 B8 1F             		.long	0x1fb8c12c
 2374 0b5c 65 46 7F 51             		.long	0x517f4665
 2375 0b60 5E 9D 04 EA             		.long	-368796322
 2376 0b64 8C 01 5D 35             		.long	0x355d018c
 2377 0b68 87 FA 73 74             		.long	0x7473fa87
 2378 0b6c 0B FB 2E 41             		.long	0x412efb0b
 2379 0b70 67 B3 5A 1D             		.long	0x1d5ab367
 2380 0b74 DB 92 52 D2             		.long	-766340389
 2381 0b78 10 E9 33 56             		.long	0x5633e910
 2382 0b7c D6 6D 13 47             		.long	0x47136dd6
 2383 0b80 D7 9A 8C 61             		.long	0x618c9ad7
 2384 0b84 A1 37 7A 0C             		.long	0xc7a37a1
 2385 0b88 F8 59 8E 14             		.long	0x148e59f8
 2386 0b8c 13 EB 89 3C             		.long	0x3c89eb13
 2387 0b90 A9 CE EE 27             		.long	0x27eecea9
 2388 0b94 61 B7 35 C9             		.long	-919226527
 2389 0b98 1C E1 ED E5             		.long	-437395172
 2390 0b9c 47 7A 3C B1             		.long	-1321436601
 2391 0ba0 D2 9C 59 DF             		.long	-547775278
 2392 0ba4 F2 55 3F 73             		.long	0x733f55f2
 2393 0ba8 14 18 79 CE             		.long	-830924780
 2394 0bac C7 73 BF 37             		.long	0x37bf73c7
 2395 0bb0 F7 53 EA CD             		.long	-840281097
 2396 0bb4 FD 5F 5B AA             		.long	-1436852227
 2397 0bb8 3D DF 14 6F             		.long	0x6f14df3d
 2398 0bbc 44 78 86 DB             		.long	-611944380
 2399 0bc0 AF CA 81 F3             		.long	-209597777
 2400 0bc4 68 B9 3E C4             		.long	-1002522264
 2401 0bc8 24 38 2C 34             		.long	0x342c3824
 2402 0bcc A3 C2 5F 40             		.long	0x405fc2a3
 2403 0bd0 1D 16 72 C3             		.long	-1015933411
 2404 0bd4 E2 BC 0C 25             		.long	0x250cbce2
 2405 0bd8 3C 28 8B 49             		.long	0x498b283c
 2406 0bdc 0D FF 41 95             		.long	-1790836979
 2407 0be0 A8 39 71 01             		.long	0x17139a8
 2408 0be4 0C 08 DE B3             		.long	-1277294580
 2409 0be8 B4 D8 9C E4             		.long	-459482956
 2410 0bec 56 64 90 C1             		.long	-1047501738
 2411 0bf0 CB 7B 61 84             		.long	-2073986101
 2412 0bf4 32 D5 70 B6             		.long	-1234119374
 2413 0bf8 6C 48 74 5C             		.long	0x5c74486c
 2414 0bfc B8 D0 42 57             		.long	0x5742d0b8
 2415 0c00 51 50 A7 F4             		.long	-190361519
 2416 0c04 7E 53 65 41             		.long	0x4165537e
 2417 0c08 1A C3 A4 17             		.long	0x17a4c31a
 2418 0c0c 3A 96 5E 27             		.long	0x275e963a
 2419 0c10 3B CB 6B AB             		.long	-1418998981
 2420 0c14 1F F1 45 9D             		.long	-1656360673
 2421 0c18 AC AB 58 FA             		.long	-94852180
 2422 0c1c 4B 93 03 E3             		.long	-486304949
 2423 0c20 20 55 FA 30             		.long	0x30fa5520
 2424 0c24 AD F6 6D 76             		.long	0x766df6ad
 2425 0c28 88 91 76 CC             		.long	-864644728
 2426 0c2c F5 25 4C 02             		.long	0x24c25f5
 2427 0c30 4F FC D7 E5             		.long	-438830001
 2428 0c34 C5 D7 CB 2A             		.long	0x2acbd7c5
 2429 0c38 26 80 44 35             		.long	0x35448026
 2430 0c3c B5 8F A3 62             		.long	0x62a38fb5
 2431 0c40 DE 49 5A B1             		.long	-1319482914
 2432 0c44 25 67 1B BA             		.long	-1172609243
 2433 0c48 45 98 0E EA             		.long	-368142267
 2434 0c4c 5D E1 C0 FE             		.long	-20913827
 2435 0c50 C3 02 75 2F             		.long	0x2f7502c3
 2436 0c54 81 12 F0 4C             		.long	0x4cf01281
 2437 0c58 8D A3 97 46             		.long	0x4697a38d
 2438 0c5c 6B C6 F9 D3             		.long	-738605461
 2439 0c60 03 E7 5F 8F             		.long	-1889540349
 2440 0c64 15 95 9C 92             		.long	-1835231979
 2441 0c68 BF EB 7A 6D             		.long	0x6d7aebbf
 2442 0c6c 95 DA 59 52             		.long	0x5259da95
 2443 0c70 D4 2D 83 BE             		.long	-1098699308
 2444 0c74 58 D3 21 74             		.long	0x7421d358
 2445 0c78 49 29 69 E0             		.long	-529979063
 2446 0c7c 8E 44 C8 C9             		.long	-909622130
 2447 0c80 75 6A 89 C2             		.long	-1031181707
 2448 0c84 F4 78 79 8E             		.long	-1904641804
 2449 0c88 99 6B 3E 58             		.long	0x583e6b99
 2450 0c8c 27 DD 71 B9             		.long	-1183720153
 2451 0c90 BE B6 4F E1             		.long	-514869570
 2452 0c94 F0 17 AD 88             		.long	-2001922064
 2453 0c98 C9 66 AC 20             		.long	0x20ac66c9
 2454 0c9c 7D B4 3A CE             		.long	-835013507
 2455 0ca0 63 18 4A DF             		.long	-548792221
 2456 0ca4 E5 82 31 1A             		.long	0x1a3182e5
 2457 0ca8 97 60 33 51             		.long	0x51336097
 2458 0cac 62 45 7F 53             		.long	0x537f4562
 2459 0cb0 B1 E0 77 64             		.long	0x6477e0b1
 2460 0cb4 BB 84 AE 6B             		.long	0x6bae84bb
 2461 0cb8 FE 1C A0 81             		.long	-2120213250
 2462 0cbc F9 94 2B 08             		.long	0x82b94f9
 2463 0cc0 70 58 68 48             		.long	0x48685870
 2464 0cc4 8F 19 FD 45             		.long	0x45fd198f
 2465 0cc8 94 87 6C DE             		.long	-563312748
 2466 0ccc 52 B7 F8 7B             		.long	0x7bf8b752
 2467 0cd0 AB 23 D3 73             		.long	0x73d323ab
 2468 0cd4 72 E2 02 4B             		.long	0x4b02e272
 2469 0cd8 E3 57 8F 1F             		.long	0x1f8f57e3
 2470 0cdc 66 2A AB 55             		.long	0x55ab2a66
 2471 0ce0 B2 07 28 EB             		.long	-349698126
 2472 0ce4 2F 03 C2 B5             		.long	-1245576401
 2473 0ce8 86 9A 7B C5             		.long	-981755258
 2474 0cec D3 A5 08 37             		.long	0x3708a5d3
 2475 0cf0 30 F2 87 28             		.long	0x2887f230
 2476 0cf4 23 B2 A5 BF             		.long	-1079659997
 2477 0cf8 02 BA 6A 03             		.long	0x36aba02
 2478 0cfc ED 5C 82 16             		.long	0x16825ced
 2479 0d00 8A 2B 1C CF             		.long	-820237430
 2480 0d04 A7 92 B4 79             		.long	0x79b492a7
 2481 0d08 F3 F0 F2 07             		.long	0x7f2f0f3
 2482 0d0c 4E A1 E2 69             		.long	0x69e2a14e
 2483 0d10 65 CD F4 DA             		.long	-621490843
 2484 0d14 06 D5 BE 05             		.long	0x5bed506
 2485 0d18 D1 1F 62 34             		.long	0x34621fd1
 2486 0d1c C4 8A FE A6             		.long	-1493267772
 2487 0d20 34 9D 53 2E             		.long	0x2e539d34
 2488 0d24 A2 A0 55 F3             		.long	-212492126
 2489 0d28 05 32 E1 8A             		.long	-1964953083
 2490 0d2c A4 75 EB F6             		.long	-152341084
 2491 0d30 0B 39 EC 83             		.long	-2081670901
 2492 0d34 40 AA EF 60             		.long	0x60efaa40
 2493 0d38 5E 06 9F 71             		.long	0x719f065e
 2494 0d3c BD 51 10 6E             		.long	0x6e1051bd
 2495 0d40 3E F9 8A 21             		.long	0x218af93e
 2496 0d44 96 3D 06 DD             		.long	-586793578
 2497 0d48 DD AE 05 3E             		.long	0x3e05aedd
 2498 0d4c 4D 46 BD E6             		.long	-423803315
 2499 0d50 91 B5 8D 54             		.long	0x548db591
 2500 0d54 71 05 5D C4             		.long	-1000536719
 2501 0d58 04 6F D4 06             		.long	0x6d46f04
 2502 0d5c 60 FF 15 50             		.long	0x5015ff60
 2503 0d60 19 24 FB 98             		.long	-1728371687
 2504 0d64 D6 97 E9 BD             		.long	-1108764714
 2505 0d68 89 CC 43 40             		.long	0x4043cc89
 2506 0d6c 67 77 9E D9             		.long	-643926169
 2507 0d70 B0 BD 42 E8             		.long	-398279248
 2508 0d74 07 88 8B 89             		.long	-1987344377
 2509 0d78 E7 38 5B 19             		.long	0x195b38e7
 2510 0d7c 79 DB EE C8             		.long	-923870343
 2511 0d80 A1 47 0A 7C             		.long	0x7c0a47a1
 2512 0d84 7C E9 0F 42             		.long	0x420fe97c
 2513 0d88 F8 C9 1E 84             		.long	-2078357000
 2514 0d8c 00 00 00 00             		.long	0
 2515 0d90 09 83 86 80             		.long	-2138668279
 2516 0d94 32 48 ED 2B             		.long	0x2bed4832
 2517 0d98 1E AC 70 11             		.long	0x1170ac1e
 2518 0d9c 6C 4E 72 5A             		.long	0x5a724e6c
 2519 0da0 FD FB FF 0E             		.long	0xefffbfd
 2520 0da4 0F 56 38 85             		.long	-2059905521
 2521 0da8 3D 1E D5 AE             		.long	-1361764803
 2522 0dac 36 27 39 2D             		.long	0x2d392736
 2523 0db0 0A 64 D9 0F             		.long	0xfd9640a
 2524 0db4 68 21 A6 5C             		.long	0x5ca62168
 2525 0db8 9B D1 54 5B             		.long	0x5b54d19b
 2526 0dbc 24 3A 2E 36             		.long	0x362e3a24
 2527 0dc0 0C B1 67 0A             		.long	0xa67b10c
 2528 0dc4 93 0F E7 57             		.long	0x57e70f93
 2529 0dc8 B4 D2 96 EE             		.long	-292105548
 2530 0dcc 1B 9E 91 9B             		.long	-1684955621
 2531 0dd0 80 4F C5 C0             		.long	-1060810880
 2532 0dd4 61 A2 20 DC             		.long	-601841055
 2533 0dd8 5A 69 4B 77             		.long	0x774b695a
 2534 0ddc 1C 16 1A 12             		.long	0x121a161c
 2535 0de0 E2 0A BA 93             		.long	-1816524062
 2536 0de4 C0 E5 2A A0             		.long	-1607801408
 2537 0de8 3C 43 E0 22             		.long	0x22e0433c
 2538 0dec 12 1D 17 1B             		.long	0x1b171d12
 2539 0df0 0E 0B 0D 09             		.long	0x90d0b0e
 2540 0df4 F2 AD C7 8B             		.long	-1949848078
 2541 0df8 2D B9 A8 B6             		.long	-1230456531
 2542 0dfc 14 C8 A9 1E             		.long	0x1ea9c814
 2543 0e00 57 85 19 F1             		.long	-249985705
 2544 0e04 AF 4C 07 75             		.long	0x75074caf
 2545 0e08 EE BB DD 99             		.long	-1713521682
 2546 0e0c A3 FD 60 7F             		.long	0x7f60fda3
 2547 0e10 F7 9F 26 01             		.long	0x1269ff7
 2548 0e14 5C BC F5 72             		.long	0x72f5bc5c
 2549 0e18 44 C5 3B 66             		.long	0x663bc544
 2550 0e1c 5B 34 7E FB             		.long	-75615141
 2551 0e20 8B 76 29 43             		.long	0x4329768b
 2552 0e24 CB DC C6 23             		.long	0x23c6dccb
 2553 0e28 B6 68 FC ED             		.long	-302225226
 2554 0e2c B8 63 F1 E4             		.long	-453942344
 2555 0e30 D7 CA DC 31             		.long	0x31dccad7
 2556 0e34 42 10 85 63             		.long	0x63851042
 2557 0e38 13 40 22 97             		.long	-1759363053
 2558 0e3c 84 20 11 C6             		.long	-971956092
 2559 0e40 85 7D 24 4A             		.long	0x4a247d85
 2560 0e44 D2 F8 3D BB             		.long	-1153566510
 2561 0e48 AE 11 32 F9             		.long	-114159186
 2562 0e4c C7 6D A1 29             		.long	0x29a16dc7
 2563 0e50 1D 4B 2F 9E             		.long	-1641067747
 2564 0e54 DC F3 30 B2             		.long	-1305414692
 2565 0e58 0D EC 52 86             		.long	-2041385971
 2566 0e5c 77 D0 E3 C1             		.long	-1042034569
 2567 0e60 2B 6C 16 B3             		.long	-1290376149
 2568 0e64 A9 99 B9 70             		.long	0x70b999a9
 2569 0e68 11 FA 48 94             		.long	-1807156719
 2570 0e6c 47 22 64 E9             		.long	-379313593
 2571 0e70 A8 C4 8C FC             		.long	-57883480
 2572 0e74 A0 1A 3F F0             		.long	-264299872
 2573 0e78 56 D8 2C 7D             		.long	0x7d2cd856
 2574 0e7c 22 EF 90 33             		.long	0x3390ef22
 2575 0e80 87 C7 4E 49             		.long	0x494ec787
 2576 0e84 D9 C1 D1 38             		.long	0x38d1c1d9
 2577 0e88 8C FE A2 CA             		.long	-895287668
 2578 0e8c 98 36 0B D4             		.long	-737462632
 2579 0e90 A6 CF 81 F5             		.long	-176042074
 2580 0e94 A5 28 DE 7A             		.long	0x7ade28a5
 2581 0e98 DA 26 8E B7             		.long	-1215420710
 2582 0e9c 3F A4 BF AD             		.long	-1379949505
 2583 0ea0 2C E4 9D 3A             		.long	0x3a9de42c
 2584 0ea4 50 0D 92 78             		.long	0x78920d50
 2585 0ea8 6A 9B CC 5F             		.long	0x5fcc9b6a
 2586 0eac 54 62 46 7E             		.long	0x7e466254
 2587 0eb0 F6 C2 13 8D             		.long	-1928084746
 2588 0eb4 90 E8 B8 D8             		.long	-658970480
 2589 0eb8 2E 5E F7 39             		.long	0x39f75e2e
 2590 0ebc 82 F5 AF C3             		.long	-1011878526
 2591 0ec0 9F BE 80 5D             		.long	0x5d80be9f
 2592 0ec4 69 7C 93 D0             		.long	-795640727
 2593 0ec8 6F A9 2D D5             		.long	-718427793
 2594 0ecc CF B3 12 25             		.long	0x2512b3cf
 2595 0ed0 C8 3B 99 AC             		.long	-1399243832
 2596 0ed4 10 A7 7D 18             		.long	0x187da710
 2597 0ed8 E8 6E 63 9C             		.long	-1671205144
 2598 0edc DB 7B BB 3B             		.long	0x3bbb7bdb
 2599 0ee0 CD 09 78 26             		.long	0x267809cd
 2600 0ee4 6E F4 18 59             		.long	0x5918f46e
 2601 0ee8 EC 01 B7 9A             		.long	-1699282452
 2602 0eec 83 A8 9A 4F             		.long	0x4f9aa883
 2603 0ef0 E6 65 6E 95             		.long	-1787927066
 2604 0ef4 AA 7E E6 FF             		.long	-1671510
 2605 0ef8 21 08 CF BC             		.long	-1127282655
 2606 0efc EF E6 E8 15             		.long	0x15e8e6ef
 2607 0f00 BA D9 9B E7             		.long	-409216582
 2608 0f04 4A CE 36 6F             		.long	0x6f36ce4a
 2609 0f08 EA D4 09 9F             		.long	-1626745622
 2610 0f0c 29 D6 7C B0             		.long	-1333995991
 2611 0f10 31 AF B2 A4             		.long	-1531793615
 2612 0f14 2A 31 23 3F             		.long	0x3f23312a
 2613 0f18 C6 30 94 A5             		.long	-1517014842
 2614 0f1c 35 C0 66 A2             		.long	-1570324427
 2615 0f20 74 37 BC 4E             		.long	0x4ebc3774
 2616 0f24 FC A6 CA 82             		.long	-2100648196
 2617 0f28 E0 B0 D0 90             		.long	-1865371424
 2618 0f2c 33 15 D8 A7             		.long	-1479011021
 2619 0f30 F1 4A 98 04             		.long	0x4984af1
 2620 0f34 41 F7 DA EC             		.long	-321194175
 2621 0f38 7F 0E 50 CD             		.long	-850391425
 2622 0f3c 17 2F F6 91             		.long	-1846137065
 2623 0f40 76 8D D6 4D             		.long	0x4dd68d76
 2624 0f44 43 4D B0 EF             		.long	-273658557
 2625 0f48 CC 54 4D AA             		.long	-1437772596
 2626 0f4c E4 DF 04 96             		.long	-1778065436
 2627 0f50 9E E3 B5 D1             		.long	-776608866
 2628 0f54 4C 1B 88 6A             		.long	0x6a881b4c
 2629 0f58 C1 B8 1F 2C             		.long	0x2c1fb8c1
 2630 0f5c 46 7F 51 65             		.long	0x65517f46
 2631 0f60 9D 04 EA 5E             		.long	0x5eea049d
 2632 0f64 01 5D 35 8C             		.long	-1942659839
 2633 0f68 FA 73 74 87             		.long	-2022411270
 2634 0f6c FB 2E 41 0B             		.long	0xb412efb
 2635 0f70 B3 5A 1D 67             		.long	0x671d5ab3
 2636 0f74 92 52 D2 DB             		.long	-606973294
 2637 0f78 E9 33 56 10             		.long	0x105633e9
 2638 0f7c 6D 13 47 D6             		.long	-699985043
 2639 0f80 9A 8C 61 D7             		.long	-681472870
 2640 0f84 37 7A 0C A1             		.long	-1593017801
 2641 0f88 59 8E 14 F8             		.long	-132870567
 2642 0f8c EB 89 3C 13             		.long	0x133c89eb
 2643 0f90 CE EE 27 A9             		.long	-1457000754
 2644 0f94 B7 35 C9 61             		.long	0x61c935b7
 2645 0f98 E1 ED E5 1C             		.long	0x1ce5ede1
 2646 0f9c 7A 3C B1 47             		.long	0x47b13c7a
 2647 0fa0 9C 59 DF D2             		.long	-757114468
 2648 0fa4 55 3F 73 F2             		.long	-227328171
 2649 0fa8 18 79 CE 14             		.long	0x14ce7918
 2650 0fac 73 BF 37 C7             		.long	-952647821
 2651 0fb0 53 EA CD F7             		.long	-137500077
 2652 0fb4 5F 5B AA FD             		.long	-39167137
 2653 0fb8 DF 14 6F 3D             		.long	0x3d6f14df
 2654 0fbc 78 86 DB 44             		.long	0x44db8678
 2655 0fc0 CA 81 F3 AF             		.long	-1342996022
 2656 0fc4 B9 3E C4 68             		.long	0x68c43eb9
 2657 0fc8 38 2C 34 24             		.long	0x24342c38
 2658 0fcc C2 5F 40 A3             		.long	-1556062270
 2659 0fd0 16 72 C3 1D             		.long	0x1dc37216
 2660 0fd4 BC 0C 25 E2             		.long	-500888388
 2661 0fd8 28 8B 49 3C             		.long	0x3c498b28
 2662 0fdc FF 41 95 0D             		.long	0xd9541ff
 2663 0fe0 39 71 01 A8             		.long	-1476300487
 2664 0fe4 08 DE B3 0C             		.long	0xcb3de08
 2665 0fe8 D8 9C E4 B4             		.long	-1260086056
 2666 0fec 64 90 C1 56             		.long	0x56c19064
 2667 0ff0 7B 61 84 CB             		.long	-880516741
 2668 0ff4 D5 70 B6 32             		.long	0x32b670d5
 2669 0ff8 48 74 5C 6C             		.long	0x6c5c7448
 2670 0ffc D0 42 57 B8             		.long	-1202240816
 2671                             		.section	.rodata.Td4,"a"
 2674                             	_Td4:
 2675 0000 52                      		.byte	0x52
 2676 0001 09                      		.byte	9
 2677 0002 6A                      		.byte	0x6a
 2678 0003 D5                      		.byte	-43
 2679 0004 30                      		.byte	48
 2680 0005 36                      		.byte	54
 2681 0006 A5                      		.byte	-91
 2682 0007 38                      		.byte	56
 2683 0008 BF                      		.byte	-65
 2684 0009 40                      		.byte	0x40
 2685 000a A3                      		.byte	-93
 2686 000b 9E                      		.byte	-98
 2687 000c 81                      		.byte	-127
 2688 000d F3                      		.byte	-13
 2689 000e D7                      		.byte	-41
 2690 000f FB                      		.byte	-5
 2691 0010 7C                      		.byte	0x7c
 2692 0011 E3                      		.byte	-29
 2693 0012 39                      		.byte	57
 2694 0013 82                      		.byte	-126
 2695 0014 9B                      		.byte	-101
 2696 0015 2F                      		.byte	47
 2697 0016 FF                      		.byte	-1
 2698 0017 87                      		.byte	-121
 2699 0018 34                      		.byte	52
 2700 0019 8E                      		.byte	-114
 2701 001a 43                      		.byte	0x43
 2702 001b 44                      		.byte	0x44
 2703 001c C4                      		.byte	-60
 2704 001d DE                      		.byte	-34
 2705 001e E9                      		.byte	-23
 2706 001f CB                      		.byte	-53
 2707 0020 54                      		.byte	0x54
 2708 0021 7B                      		.byte	0x7b
 2709 0022 94                      		.byte	-108
 2710 0023 32                      		.byte	50
 2711 0024 A6                      		.byte	-90
 2712 0025 C2                      		.byte	-62
 2713 0026 23                      		.byte	35
 2714 0027 3D                      		.byte	61
 2715 0028 EE                      		.byte	-18
 2716 0029 4C                      		.byte	0x4c
 2717 002a 95                      		.byte	-107
 2718 002b 0B                      		.byte	11
 2719 002c 42                      		.byte	0x42
 2720 002d FA                      		.byte	-6
 2721 002e C3                      		.byte	-61
 2722 002f 4E                      		.byte	0x4e
 2723 0030 08                      		.byte	8
 2724 0031 2E                      		.byte	46
 2725 0032 A1                      		.byte	-95
 2726 0033 66                      		.byte	0x66
 2727 0034 28                      		.byte	40
 2728 0035 D9                      		.byte	-39
 2729 0036 24                      		.byte	36
 2730 0037 B2                      		.byte	-78
 2731 0038 76                      		.byte	0x76
 2732 0039 5B                      		.byte	0x5b
 2733 003a A2                      		.byte	-94
 2734 003b 49                      		.byte	0x49
 2735 003c 6D                      		.byte	0x6d
 2736 003d 8B                      		.byte	-117
 2737 003e D1                      		.byte	-47
 2738 003f 25                      		.byte	37
 2739 0040 72                      		.byte	0x72
 2740 0041 F8                      		.byte	-8
 2741 0042 F6                      		.byte	-10
 2742 0043 64                      		.byte	0x64
 2743 0044 86                      		.byte	-122
 2744 0045 68                      		.byte	0x68
 2745 0046 98                      		.byte	-104
 2746 0047 16                      		.byte	22
 2747 0048 D4                      		.byte	-44
 2748 0049 A4                      		.byte	-92
 2749 004a 5C                      		.byte	0x5c
 2750 004b CC                      		.byte	-52
 2751 004c 5D                      		.byte	0x5d
 2752 004d 65                      		.byte	0x65
 2753 004e B6                      		.byte	-74
 2754 004f 92                      		.byte	-110
 2755 0050 6C                      		.byte	0x6c
 2756 0051 70                      		.byte	0x70
 2757 0052 48                      		.byte	0x48
 2758 0053 50                      		.byte	0x50
 2759 0054 FD                      		.byte	-3
 2760 0055 ED                      		.byte	-19
 2761 0056 B9                      		.byte	-71
 2762 0057 DA                      		.byte	-38
 2763 0058 5E                      		.byte	0x5e
 2764 0059 15                      		.byte	21
 2765 005a 46                      		.byte	0x46
 2766 005b 57                      		.byte	0x57
 2767 005c A7                      		.byte	-89
 2768 005d 8D                      		.byte	-115
 2769 005e 9D                      		.byte	-99
 2770 005f 84                      		.byte	-124
 2771 0060 90                      		.byte	-112
 2772 0061 D8                      		.byte	-40
 2773 0062 AB                      		.byte	-85
 2774 0063 00                      		.byte	0
 2775 0064 8C                      		.byte	-116
 2776 0065 BC                      		.byte	-68
 2777 0066 D3                      		.byte	-45
 2778 0067 0A                      		.byte	10
 2779 0068 F7                      		.byte	-9
 2780 0069 E4                      		.byte	-28
 2781 006a 58                      		.byte	0x58
 2782 006b 05                      		.byte	5
 2783 006c B8                      		.byte	-72
 2784 006d B3                      		.byte	-77
 2785 006e 45                      		.byte	0x45
 2786 006f 06                      		.byte	6
 2787 0070 D0                      		.byte	-48
 2788 0071 2C                      		.byte	44
 2789 0072 1E                      		.byte	30
 2790 0073 8F                      		.byte	-113
 2791 0074 CA                      		.byte	-54
 2792 0075 3F                      		.byte	63
 2793 0076 0F                      		.byte	15
 2794 0077 02                      		.byte	2
 2795 0078 C1                      		.byte	-63
 2796 0079 AF                      		.byte	-81
 2797 007a BD                      		.byte	-67
 2798 007b 03                      		.byte	3
 2799 007c 01                      		.byte	1
 2800 007d 13                      		.byte	19
 2801 007e 8A                      		.byte	-118
 2802 007f 6B                      		.byte	0x6b
 2803 0080 3A                      		.byte	58
 2804 0081 91                      		.byte	-111
 2805 0082 11                      		.byte	17
 2806 0083 41                      		.byte	0x41
 2807 0084 4F                      		.byte	0x4f
 2808 0085 67                      		.byte	0x67
 2809 0086 DC                      		.byte	-36
 2810 0087 EA                      		.byte	-22
 2811 0088 97                      		.byte	-105
 2812 0089 F2                      		.byte	-14
 2813 008a CF                      		.byte	-49
 2814 008b CE                      		.byte	-50
 2815 008c F0                      		.byte	-16
 2816 008d B4                      		.byte	-76
 2817 008e E6                      		.byte	-26
 2818 008f 73                      		.byte	0x73
 2819 0090 96                      		.byte	-106
 2820 0091 AC                      		.byte	-84
 2821 0092 74                      		.byte	0x74
 2822 0093 22                      		.byte	34
 2823 0094 E7                      		.byte	-25
 2824 0095 AD                      		.byte	-83
 2825 0096 35                      		.byte	53
 2826 0097 85                      		.byte	-123
 2827 0098 E2                      		.byte	-30
 2828 0099 F9                      		.byte	-7
 2829 009a 37                      		.byte	55
 2830 009b E8                      		.byte	-24
 2831 009c 1C                      		.byte	28
 2832 009d 75                      		.byte	0x75
 2833 009e DF                      		.byte	-33
 2834 009f 6E                      		.byte	0x6e
 2835 00a0 47                      		.byte	0x47
 2836 00a1 F1                      		.byte	-15
 2837 00a2 1A                      		.byte	26
 2838 00a3 71                      		.byte	0x71
 2839 00a4 1D                      		.byte	29
 2840 00a5 29                      		.byte	41
 2841 00a6 C5                      		.byte	-59
 2842 00a7 89                      		.byte	-119
 2843 00a8 6F                      		.byte	0x6f
 2844 00a9 B7                      		.byte	-73
 2845 00aa 62                      		.byte	0x62
 2846 00ab 0E                      		.byte	14
 2847 00ac AA                      		.byte	-86
 2848 00ad 18                      		.byte	24
 2849 00ae BE                      		.byte	-66
 2850 00af 1B                      		.byte	27
 2851 00b0 FC                      		.byte	-4
 2852 00b1 56                      		.byte	0x56
 2853 00b2 3E                      		.byte	62
 2854 00b3 4B                      		.byte	0x4b
 2855 00b4 C6                      		.byte	-58
 2856 00b5 D2                      		.byte	-46
 2857 00b6 79                      		.byte	0x79
 2858 00b7 20                      		.byte	32
 2859 00b8 9A                      		.byte	-102
 2860 00b9 DB                      		.byte	-37
 2861 00ba C0                      		.byte	-64
 2862 00bb FE                      		.byte	-2
 2863 00bc 78                      		.byte	0x78
 2864 00bd CD                      		.byte	-51
 2865 00be 5A                      		.byte	0x5a
 2866 00bf F4                      		.byte	-12
 2867 00c0 1F                      		.byte	31
 2868 00c1 DD                      		.byte	-35
 2869 00c2 A8                      		.byte	-88
 2870 00c3 33                      		.byte	51
 2871 00c4 88                      		.byte	-120
 2872 00c5 07                      		.byte	7
 2873 00c6 C7                      		.byte	-57
 2874 00c7 31                      		.byte	49
 2875 00c8 B1                      		.byte	-79
 2876 00c9 12                      		.byte	18
 2877 00ca 10                      		.byte	16
 2878 00cb 59                      		.byte	0x59
 2879 00cc 27                      		.byte	39
 2880 00cd 80                      		.byte	-128
 2881 00ce EC                      		.byte	-20
 2882 00cf 5F                      		.byte	0x5f
 2883 00d0 60                      		.byte	0x60
 2884 00d1 51                      		.byte	0x51
 2885 00d2 7F                      		.byte	0x7f
 2886 00d3 A9                      		.byte	-87
 2887 00d4 19                      		.byte	25
 2888 00d5 B5                      		.byte	-75
 2889 00d6 4A                      		.byte	0x4a
 2890 00d7 0D                      		.byte	13
 2891 00d8 2D                      		.byte	45
 2892 00d9 E5                      		.byte	-27
 2893 00da 7A                      		.byte	0x7a
 2894 00db 9F                      		.byte	-97
 2895 00dc 93                      		.byte	-109
 2896 00dd C9                      		.byte	-55
 2897 00de 9C                      		.byte	-100
 2898 00df EF                      		.byte	-17
 2899 00e0 A0                      		.byte	-96
 2900 00e1 E0                      		.byte	-32
 2901 00e2 3B                      		.byte	59
 2902 00e3 4D                      		.byte	0x4d
 2903 00e4 AE                      		.byte	-82
 2904 00e5 2A                      		.byte	42
 2905 00e6 F5                      		.byte	-11
 2906 00e7 B0                      		.byte	-80
 2907 00e8 C8                      		.byte	-56
 2908 00e9 EB                      		.byte	-21
 2909 00ea BB                      		.byte	-69
 2910 00eb 3C                      		.byte	60
 2911 00ec 83                      		.byte	-125
 2912 00ed 53                      		.byte	0x53
 2913 00ee 99                      		.byte	-103
 2914 00ef 61                      		.byte	0x61
 2915 00f0 17                      		.byte	23
 2916 00f1 2B                      		.byte	43
 2917 00f2 04                      		.byte	4
 2918 00f3 7E                      		.byte	0x7e
 2919 00f4 BA                      		.byte	-70
 2920 00f5 77                      		.byte	0x77
 2921 00f6 D6                      		.byte	-42
 2922 00f7 26                      		.byte	38
 2923 00f8 E1                      		.byte	-31
 2924 00f9 69                      		.byte	0x69
 2925 00fa 14                      		.byte	20
 2926 00fb 63                      		.byte	0x63
 2927 00fc 55                      		.byte	0x55
 2928 00fd 21                      		.byte	33
 2929 00fe 0C                      		.byte	12
 2930 00ff 7D                      		.byte	0x7d
 2931                             		.section	.text.PreFetchTe,"ax",@progbits
 2933                             	_PreFetchTe:
 2934                             	.LFB43:
 2935                             		.file 2 "../src/wolfcrypt/src/aes.c"
   1:../src/wolfcrypt/src/aes.c **** /* aes.c
   2:../src/wolfcrypt/src/aes.c ****  *
   3:../src/wolfcrypt/src/aes.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/aes.c ****  *
   5:../src/wolfcrypt/src/aes.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/aes.c ****  *
   7:../src/wolfcrypt/src/aes.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/aes.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/aes.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/aes.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/aes.c ****  *
  12:../src/wolfcrypt/src/aes.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/aes.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/aes.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/aes.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/aes.c ****  *
  17:../src/wolfcrypt/src/aes.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/aes.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/aes.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/aes.c ****  */
  21:../src/wolfcrypt/src/aes.c **** 
  22:../src/wolfcrypt/src/aes.c **** /*
  23:../src/wolfcrypt/src/aes.c **** 
  24:../src/wolfcrypt/src/aes.c **** DESCRIPTION
  25:../src/wolfcrypt/src/aes.c **** This library provides the interfaces to the Advanced Encryption Standard (AES)
  26:../src/wolfcrypt/src/aes.c **** for encrypting and decrypting data. AES is the standard known for a symmetric
  27:../src/wolfcrypt/src/aes.c **** block cipher mechanism that uses n-bit binary string parameter key with 128-bits,
  28:../src/wolfcrypt/src/aes.c **** 192-bits, and 256-bits of key sizes.
  29:../src/wolfcrypt/src/aes.c **** 
  30:../src/wolfcrypt/src/aes.c **** */
  31:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_CONFIG_H
  32:../src/wolfcrypt/src/aes.c ****     #include <config.h>
  33:../src/wolfcrypt/src/aes.c **** #endif
  34:../src/wolfcrypt/src/aes.c **** 
  35:../src/wolfcrypt/src/aes.c **** #include <wolfssl/wolfcrypt/settings.h>
  36:../src/wolfcrypt/src/aes.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  37:../src/wolfcrypt/src/aes.c **** 
  38:../src/wolfcrypt/src/aes.c **** #if !defined(NO_AES)
  39:../src/wolfcrypt/src/aes.c **** 
  40:../src/wolfcrypt/src/aes.c **** /* Tip: Locate the software cipher modes by searching for "Software AES" */
  41:../src/wolfcrypt/src/aes.c **** 
  42:../src/wolfcrypt/src/aes.c **** #if defined(HAVE_FIPS) && \
  43:../src/wolfcrypt/src/aes.c ****     defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2)
  44:../src/wolfcrypt/src/aes.c **** 
  45:../src/wolfcrypt/src/aes.c ****     /* set NO_WRAPPERS before headers, use direct internal f()s not wrappers */
  46:../src/wolfcrypt/src/aes.c ****     #define FIPS_NO_WRAPPERS
  47:../src/wolfcrypt/src/aes.c **** 
  48:../src/wolfcrypt/src/aes.c ****     #ifdef USE_WINDOWS_API
  49:../src/wolfcrypt/src/aes.c ****         #pragma code_seg(".fipsA$g")
  50:../src/wolfcrypt/src/aes.c ****         #pragma const_seg(".fipsB$g")
  51:../src/wolfcrypt/src/aes.c ****     #endif
  52:../src/wolfcrypt/src/aes.c **** #endif
  53:../src/wolfcrypt/src/aes.c **** 
  54:../src/wolfcrypt/src/aes.c **** #include <wolfssl/wolfcrypt/aes.h>
  55:../src/wolfcrypt/src/aes.c **** 
  56:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
  57:../src/wolfcrypt/src/aes.c **** #include <wmmintrin.h>
  58:../src/wolfcrypt/src/aes.c **** #include <emmintrin.h>
  59:../src/wolfcrypt/src/aes.c **** #include <smmintrin.h>
  60:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AESNI */
  61:../src/wolfcrypt/src/aes.c **** 
  62:../src/wolfcrypt/src/aes.c **** #include <wolfssl/wolfcrypt/cpuid.h>
  63:../src/wolfcrypt/src/aes.c **** 
  64:../src/wolfcrypt/src/aes.c **** #ifdef WOLF_CRYPTO_CB
  65:../src/wolfcrypt/src/aes.c ****     #include <wolfssl/wolfcrypt/cryptocb.h>
  66:../src/wolfcrypt/src/aes.c **** #endif
  67:../src/wolfcrypt/src/aes.c **** 
  68:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SECO_CAAM
  69:../src/wolfcrypt/src/aes.c **** #include <wolfssl/wolfcrypt/port/caam/wolfcaam.h>
  70:../src/wolfcrypt/src/aes.c **** #endif
  71:../src/wolfcrypt/src/aes.c **** 
  72:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_IMXRT_DCP
  73:../src/wolfcrypt/src/aes.c ****     #include <wolfssl/wolfcrypt/port/nxp/dcp_port.h>
  74:../src/wolfcrypt/src/aes.c **** #endif
  75:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_CRYPT)
  76:../src/wolfcrypt/src/aes.c ****     #include <wolfssl/wolfcrypt/port/nxp/se050_port.h>
  77:../src/wolfcrypt/src/aes.c **** #endif
  78:../src/wolfcrypt/src/aes.c **** 
  79:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_SIV
  80:../src/wolfcrypt/src/aes.c ****     #include <wolfssl/wolfcrypt/cmac.h>
  81:../src/wolfcrypt/src/aes.c **** #endif
  82:../src/wolfcrypt/src/aes.c **** 
  83:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_HAVE_PSA) && !defined(WOLFSSL_PSA_NO_AES)
  84:../src/wolfcrypt/src/aes.c ****     #include <wolfssl/wolfcrypt/port/psa/psa.h>
  85:../src/wolfcrypt/src/aes.c **** #endif
  86:../src/wolfcrypt/src/aes.c **** 
  87:../src/wolfcrypt/src/aes.c **** /* fips wrapper calls, user can call direct */
  88:../src/wolfcrypt/src/aes.c **** #if defined(HAVE_FIPS) && \
  89:../src/wolfcrypt/src/aes.c ****     (!defined(HAVE_FIPS_VERSION) || (HAVE_FIPS_VERSION < 2))
  90:../src/wolfcrypt/src/aes.c **** 
  91:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKey(Aes* aes, const byte* key, word32 len, const byte* iv,
  92:../src/wolfcrypt/src/aes.c ****                               int dir)
  93:../src/wolfcrypt/src/aes.c ****     {
  94:../src/wolfcrypt/src/aes.c ****         if (aes == NULL ||  !( (len == 16) || (len == 24) || (len == 32)) ) {
  95:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
  96:../src/wolfcrypt/src/aes.c ****         }
  97:../src/wolfcrypt/src/aes.c **** 
  98:../src/wolfcrypt/src/aes.c ****         return AesSetKey_fips(aes, key, len, iv, dir);
  99:../src/wolfcrypt/src/aes.c ****     }
 100:../src/wolfcrypt/src/aes.c ****     int wc_AesSetIV(Aes* aes, const byte* iv)
 101:../src/wolfcrypt/src/aes.c ****     {
 102:../src/wolfcrypt/src/aes.c ****         if (aes == NULL) {
 103:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
 104:../src/wolfcrypt/src/aes.c ****         }
 105:../src/wolfcrypt/src/aes.c **** 
 106:../src/wolfcrypt/src/aes.c ****         return AesSetIV_fips(aes, iv);
 107:../src/wolfcrypt/src/aes.c ****     }
 108:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_CBC
 109:../src/wolfcrypt/src/aes.c ****         int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
 110:../src/wolfcrypt/src/aes.c ****         {
 111:../src/wolfcrypt/src/aes.c ****             if (aes == NULL || out == NULL || in == NULL) {
 112:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
 113:../src/wolfcrypt/src/aes.c ****             }
 114:../src/wolfcrypt/src/aes.c **** 
 115:../src/wolfcrypt/src/aes.c ****             return AesCbcEncrypt_fips(aes, out, in, sz);
 116:../src/wolfcrypt/src/aes.c ****         }
 117:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_AES_DECRYPT
 118:../src/wolfcrypt/src/aes.c ****             int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
 119:../src/wolfcrypt/src/aes.c ****             {
 120:../src/wolfcrypt/src/aes.c ****                 if (aes == NULL || out == NULL || in == NULL
 121:../src/wolfcrypt/src/aes.c ****                                             || sz % AES_BLOCK_SIZE != 0) {
 122:../src/wolfcrypt/src/aes.c ****                     return BAD_FUNC_ARG;
 123:../src/wolfcrypt/src/aes.c ****                 }
 124:../src/wolfcrypt/src/aes.c **** 
 125:../src/wolfcrypt/src/aes.c ****                 return AesCbcDecrypt_fips(aes, out, in, sz);
 126:../src/wolfcrypt/src/aes.c ****             }
 127:../src/wolfcrypt/src/aes.c ****         #endif /* HAVE_AES_DECRYPT */
 128:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_CBC */
 129:../src/wolfcrypt/src/aes.c **** 
 130:../src/wolfcrypt/src/aes.c ****     /* AES-CTR */
 131:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_AES_COUNTER
 132:../src/wolfcrypt/src/aes.c ****         int wc_AesCtrEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
 133:../src/wolfcrypt/src/aes.c ****         {
 134:../src/wolfcrypt/src/aes.c ****             if (aes == NULL || out == NULL || in == NULL) {
 135:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
 136:../src/wolfcrypt/src/aes.c ****             }
 137:../src/wolfcrypt/src/aes.c **** 
 138:../src/wolfcrypt/src/aes.c ****             return AesCtrEncrypt(aes, out, in, sz);
 139:../src/wolfcrypt/src/aes.c ****         }
 140:../src/wolfcrypt/src/aes.c ****     #endif
 141:../src/wolfcrypt/src/aes.c **** 
 142:../src/wolfcrypt/src/aes.c ****     /* AES-DIRECT */
 143:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_DIRECT)
 144:../src/wolfcrypt/src/aes.c ****         void wc_AesEncryptDirect(Aes* aes, byte* out, const byte* in)
 145:../src/wolfcrypt/src/aes.c ****         {
 146:../src/wolfcrypt/src/aes.c ****             AesEncryptDirect(aes, out, in);
 147:../src/wolfcrypt/src/aes.c ****         }
 148:../src/wolfcrypt/src/aes.c **** 
 149:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_AES_DECRYPT
 150:../src/wolfcrypt/src/aes.c ****             void wc_AesDecryptDirect(Aes* aes, byte* out, const byte* in)
 151:../src/wolfcrypt/src/aes.c ****             {
 152:../src/wolfcrypt/src/aes.c ****                 AesDecryptDirect(aes, out, in);
 153:../src/wolfcrypt/src/aes.c ****             }
 154:../src/wolfcrypt/src/aes.c ****         #endif /* HAVE_AES_DECRYPT */
 155:../src/wolfcrypt/src/aes.c **** 
 156:../src/wolfcrypt/src/aes.c ****         int wc_AesSetKeyDirect(Aes* aes, const byte* key, word32 len,
 157:../src/wolfcrypt/src/aes.c ****                                         const byte* iv, int dir)
 158:../src/wolfcrypt/src/aes.c ****         {
 159:../src/wolfcrypt/src/aes.c ****             return AesSetKeyDirect(aes, key, len, iv, dir);
 160:../src/wolfcrypt/src/aes.c ****         }
 161:../src/wolfcrypt/src/aes.c ****     #endif /* WOLFSSL_AES_DIRECT */
 162:../src/wolfcrypt/src/aes.c **** 
 163:../src/wolfcrypt/src/aes.c ****     /* AES-GCM */
 164:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AESGCM
 165:../src/wolfcrypt/src/aes.c ****         int wc_AesGcmSetKey(Aes* aes, const byte* key, word32 len)
 166:../src/wolfcrypt/src/aes.c ****         {
 167:../src/wolfcrypt/src/aes.c ****             if (aes == NULL || !( (len == 16) || (len == 24) || (len == 32)) ) {
 168:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
 169:../src/wolfcrypt/src/aes.c ****             }
 170:../src/wolfcrypt/src/aes.c **** 
 171:../src/wolfcrypt/src/aes.c ****             return AesGcmSetKey_fips(aes, key, len);
 172:../src/wolfcrypt/src/aes.c ****         }
 173:../src/wolfcrypt/src/aes.c ****         int wc_AesGcmEncrypt(Aes* aes, byte* out, const byte* in, word32 sz,
 174:../src/wolfcrypt/src/aes.c ****                                       const byte* iv, word32 ivSz,
 175:../src/wolfcrypt/src/aes.c ****                                       byte* authTag, word32 authTagSz,
 176:../src/wolfcrypt/src/aes.c ****                                       const byte* authIn, word32 authInSz)
 177:../src/wolfcrypt/src/aes.c ****         {
 178:../src/wolfcrypt/src/aes.c ****             if (aes == NULL || authTagSz > AES_BLOCK_SIZE ||
 179:../src/wolfcrypt/src/aes.c ****                         authTagSz < WOLFSSL_MIN_AUTH_TAG_SZ ||
 180:../src/wolfcrypt/src/aes.c ****                         ivSz == 0 || ivSz > AES_BLOCK_SIZE) {
 181:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
 182:../src/wolfcrypt/src/aes.c ****             }
 183:../src/wolfcrypt/src/aes.c **** 
 184:../src/wolfcrypt/src/aes.c ****             return AesGcmEncrypt_fips(aes, out, in, sz, iv, ivSz, authTag,
 185:../src/wolfcrypt/src/aes.c ****                 authTagSz, authIn, authInSz);
 186:../src/wolfcrypt/src/aes.c ****         }
 187:../src/wolfcrypt/src/aes.c **** 
 188:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_AES_DECRYPT
 189:../src/wolfcrypt/src/aes.c ****             int wc_AesGcmDecrypt(Aes* aes, byte* out, const byte* in, word32 sz,
 190:../src/wolfcrypt/src/aes.c ****                                           const byte* iv, word32 ivSz,
 191:../src/wolfcrypt/src/aes.c ****                                           const byte* authTag, word32 authTagSz,
 192:../src/wolfcrypt/src/aes.c ****                                           const byte* authIn, word32 authInSz)
 193:../src/wolfcrypt/src/aes.c ****             {
 194:../src/wolfcrypt/src/aes.c ****                 if (aes == NULL || out == NULL || in == NULL || iv == NULL
 195:../src/wolfcrypt/src/aes.c ****                         || authTag == NULL || authTagSz > AES_BLOCK_SIZE ||
 196:../src/wolfcrypt/src/aes.c ****                         ivSz == 0 || ivSz > AES_BLOCK_SIZE) {
 197:../src/wolfcrypt/src/aes.c ****                     return BAD_FUNC_ARG;
 198:../src/wolfcrypt/src/aes.c ****                 }
 199:../src/wolfcrypt/src/aes.c **** 
 200:../src/wolfcrypt/src/aes.c ****                 return AesGcmDecrypt_fips(aes, out, in, sz, iv, ivSz, authTag,
 201:../src/wolfcrypt/src/aes.c ****                     authTagSz, authIn, authInSz);
 202:../src/wolfcrypt/src/aes.c ****             }
 203:../src/wolfcrypt/src/aes.c ****         #endif /* HAVE_AES_DECRYPT */
 204:../src/wolfcrypt/src/aes.c **** 
 205:../src/wolfcrypt/src/aes.c ****         int wc_GmacSetKey(Gmac* gmac, const byte* key, word32 len)
 206:../src/wolfcrypt/src/aes.c ****         {
 207:../src/wolfcrypt/src/aes.c ****             if (gmac == NULL || key == NULL || !((len == 16) ||
 208:../src/wolfcrypt/src/aes.c ****                                 (len == 24) || (len == 32)) ) {
 209:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
 210:../src/wolfcrypt/src/aes.c ****             }
 211:../src/wolfcrypt/src/aes.c **** 
 212:../src/wolfcrypt/src/aes.c ****             return GmacSetKey(gmac, key, len);
 213:../src/wolfcrypt/src/aes.c ****         }
 214:../src/wolfcrypt/src/aes.c ****         int wc_GmacUpdate(Gmac* gmac, const byte* iv, word32 ivSz,
 215:../src/wolfcrypt/src/aes.c ****                                       const byte* authIn, word32 authInSz,
 216:../src/wolfcrypt/src/aes.c ****                                       byte* authTag, word32 authTagSz)
 217:../src/wolfcrypt/src/aes.c ****         {
 218:../src/wolfcrypt/src/aes.c ****             if (gmac == NULL || authTagSz > AES_BLOCK_SIZE ||
 219:../src/wolfcrypt/src/aes.c ****                                authTagSz < WOLFSSL_MIN_AUTH_TAG_SZ) {
 220:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
 221:../src/wolfcrypt/src/aes.c ****             }
 222:../src/wolfcrypt/src/aes.c **** 
 223:../src/wolfcrypt/src/aes.c ****             return GmacUpdate(gmac, iv, ivSz, authIn, authInSz,
 224:../src/wolfcrypt/src/aes.c ****                               authTag, authTagSz);
 225:../src/wolfcrypt/src/aes.c ****         }
 226:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AESGCM */
 227:../src/wolfcrypt/src/aes.c **** 
 228:../src/wolfcrypt/src/aes.c ****     /* AES-CCM */
 229:../src/wolfcrypt/src/aes.c ****     #if defined(HAVE_AESCCM) && \
 230:../src/wolfcrypt/src/aes.c ****         defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2)
 231:../src/wolfcrypt/src/aes.c ****         int wc_AesCcmSetKey(Aes* aes, const byte* key, word32 keySz)
 232:../src/wolfcrypt/src/aes.c ****         {
 233:../src/wolfcrypt/src/aes.c ****             return AesCcmSetKey(aes, key, keySz);
 234:../src/wolfcrypt/src/aes.c ****         }
 235:../src/wolfcrypt/src/aes.c ****         int wc_AesCcmEncrypt(Aes* aes, byte* out, const byte* in, word32 inSz,
 236:../src/wolfcrypt/src/aes.c ****                                       const byte* nonce, word32 nonceSz,
 237:../src/wolfcrypt/src/aes.c ****                                       byte* authTag, word32 authTagSz,
 238:../src/wolfcrypt/src/aes.c ****                                       const byte* authIn, word32 authInSz)
 239:../src/wolfcrypt/src/aes.c ****         {
 240:../src/wolfcrypt/src/aes.c ****             /* sanity check on arguments */
 241:../src/wolfcrypt/src/aes.c ****             if (aes == NULL || out == NULL || in == NULL || nonce == NULL
 242:../src/wolfcrypt/src/aes.c ****                     || authTag == NULL || nonceSz < 7 || nonceSz > 13)
 243:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
 244:../src/wolfcrypt/src/aes.c **** 
 245:../src/wolfcrypt/src/aes.c ****             AesCcmEncrypt(aes, out, in, inSz, nonce, nonceSz, authTag,
 246:../src/wolfcrypt/src/aes.c ****                 authTagSz, authIn, authInSz);
 247:../src/wolfcrypt/src/aes.c ****             return 0;
 248:../src/wolfcrypt/src/aes.c ****         }
 249:../src/wolfcrypt/src/aes.c **** 
 250:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_AES_DECRYPT
 251:../src/wolfcrypt/src/aes.c ****             int  wc_AesCcmDecrypt(Aes* aes, byte* out,
 252:../src/wolfcrypt/src/aes.c ****                 const byte* in, word32 inSz,
 253:../src/wolfcrypt/src/aes.c ****                 const byte* nonce, word32 nonceSz,
 254:../src/wolfcrypt/src/aes.c ****                 const byte* authTag, word32 authTagSz,
 255:../src/wolfcrypt/src/aes.c ****                 const byte* authIn, word32 authInSz)
 256:../src/wolfcrypt/src/aes.c ****             {
 257:../src/wolfcrypt/src/aes.c **** 
 258:../src/wolfcrypt/src/aes.c ****                 if (aes == NULL || out == NULL || in == NULL || nonce == NULL
 259:../src/wolfcrypt/src/aes.c ****                     || authTag == NULL || nonceSz < 7 || nonceSz > 13) {
 260:../src/wolfcrypt/src/aes.c ****                         return BAD_FUNC_ARG;
 261:../src/wolfcrypt/src/aes.c ****                 }
 262:../src/wolfcrypt/src/aes.c **** 
 263:../src/wolfcrypt/src/aes.c ****                 return AesCcmDecrypt(aes, out, in, inSz, nonce, nonceSz,
 264:../src/wolfcrypt/src/aes.c ****                     authTag, authTagSz, authIn, authInSz);
 265:../src/wolfcrypt/src/aes.c ****             }
 266:../src/wolfcrypt/src/aes.c ****         #endif /* HAVE_AES_DECRYPT */
 267:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AESCCM && HAVE_FIPS_VERSION 2 */
 268:../src/wolfcrypt/src/aes.c **** 
 269:../src/wolfcrypt/src/aes.c ****     int wc_AesInit(Aes* aes, void* h, int i)
 270:../src/wolfcrypt/src/aes.c ****     {
 271:../src/wolfcrypt/src/aes.c ****         if (aes == NULL)
 272:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
 273:../src/wolfcrypt/src/aes.c **** 
 274:../src/wolfcrypt/src/aes.c ****         (void)h;
 275:../src/wolfcrypt/src/aes.c ****         (void)i;
 276:../src/wolfcrypt/src/aes.c **** 
 277:../src/wolfcrypt/src/aes.c ****         /* FIPS doesn't support */
 278:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_KCAPI_AES
 279:../src/wolfcrypt/src/aes.c ****         return AesInit(aes, h, i);
 280:../src/wolfcrypt/src/aes.c ****     #else
 281:../src/wolfcrypt/src/aes.c ****         return 0;
 282:../src/wolfcrypt/src/aes.c ****     #endif
 283:../src/wolfcrypt/src/aes.c ****     }
 284:../src/wolfcrypt/src/aes.c ****     void wc_AesFree(Aes* aes)
 285:../src/wolfcrypt/src/aes.c ****     {
 286:../src/wolfcrypt/src/aes.c ****         (void)aes;
 287:../src/wolfcrypt/src/aes.c ****         /* FIPS doesn't support */
 288:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_KCAPI_AES
 289:../src/wolfcrypt/src/aes.c ****         AesFree(aes);
 290:../src/wolfcrypt/src/aes.c ****     #endif
 291:../src/wolfcrypt/src/aes.c ****     }
 292:../src/wolfcrypt/src/aes.c **** 
 293:../src/wolfcrypt/src/aes.c **** #else /* else build without fips, or for FIPS v2+ */
 294:../src/wolfcrypt/src/aes.c **** 
 295:../src/wolfcrypt/src/aes.c **** 
 296:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_TI_CRYPT)
 297:../src/wolfcrypt/src/aes.c ****     #include <wolfcrypt/src/port/ti/ti-aes.c>
 298:../src/wolfcrypt/src/aes.c **** #else
 299:../src/wolfcrypt/src/aes.c **** 
 300:../src/wolfcrypt/src/aes.c **** #include <wolfssl/wolfcrypt/logging.h>
 301:../src/wolfcrypt/src/aes.c **** 
 302:../src/wolfcrypt/src/aes.c **** #ifdef NO_INLINE
 303:../src/wolfcrypt/src/aes.c ****     #include <wolfssl/wolfcrypt/misc.h>
 304:../src/wolfcrypt/src/aes.c **** #else
 305:../src/wolfcrypt/src/aes.c ****     #define WOLFSSL_MISC_INCLUDED
 306:../src/wolfcrypt/src/aes.c ****     #include <wolfcrypt/src/misc.c>
 307:../src/wolfcrypt/src/aes.c **** #endif
 308:../src/wolfcrypt/src/aes.c **** 
 309:../src/wolfcrypt/src/aes.c **** #if !defined(WOLFSSL_ARMASM)
 310:../src/wolfcrypt/src/aes.c **** 
 311:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_IMX6_CAAM_BLOB
 312:../src/wolfcrypt/src/aes.c ****     /* case of possibly not using hardware acceleration for AES but using key
 313:../src/wolfcrypt/src/aes.c ****        blobs */
 314:../src/wolfcrypt/src/aes.c ****     #include <wolfssl/wolfcrypt/port/caam/wolfcaam.h>
 315:../src/wolfcrypt/src/aes.c **** #endif
 316:../src/wolfcrypt/src/aes.c **** 
 317:../src/wolfcrypt/src/aes.c **** #ifdef DEBUG_AESNI
 318:../src/wolfcrypt/src/aes.c ****     #include <stdio.h>
 319:../src/wolfcrypt/src/aes.c **** #endif
 320:../src/wolfcrypt/src/aes.c **** 
 321:../src/wolfcrypt/src/aes.c **** #ifdef _MSC_VER
 322:../src/wolfcrypt/src/aes.c ****     /* 4127 warning constant while(1)  */
 323:../src/wolfcrypt/src/aes.c ****     #pragma warning(disable: 4127)
 324:../src/wolfcrypt/src/aes.c **** #endif
 325:../src/wolfcrypt/src/aes.c **** 
 326:../src/wolfcrypt/src/aes.c **** 
 327:../src/wolfcrypt/src/aes.c **** /* Define AES implementation includes and functions */
 328:../src/wolfcrypt/src/aes.c **** #if defined(STM32_CRYPTO)
 329:../src/wolfcrypt/src/aes.c ****      /* STM32F2/F4/F7/L4/L5/H7/WB55 hardware AES support for ECB, CBC, CTR and GCM modes */
 330:../src/wolfcrypt/src/aes.c **** 
 331:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_AES_DIRECT) || defined(HAVE_AESGCM) || defined(HAVE_AESCCM)
 332:../src/wolfcrypt/src/aes.c **** 
 333:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesEncrypt(
 334:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
 335:../src/wolfcrypt/src/aes.c ****     {
 336:../src/wolfcrypt/src/aes.c ****         int ret = 0;
 337:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_STM32_CUBEMX
 338:../src/wolfcrypt/src/aes.c ****         CRYP_HandleTypeDef hcryp;
 339:../src/wolfcrypt/src/aes.c ****     #else
 340:../src/wolfcrypt/src/aes.c ****         CRYP_InitTypeDef cryptInit;
 341:../src/wolfcrypt/src/aes.c ****         CRYP_KeyInitTypeDef keyInit;
 342:../src/wolfcrypt/src/aes.c ****     #endif
 343:../src/wolfcrypt/src/aes.c **** 
 344:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_STM32_CUBEMX
 345:../src/wolfcrypt/src/aes.c ****         ret = wc_Stm32_Aes_Init(aes, &hcryp);
 346:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
 347:../src/wolfcrypt/src/aes.c ****             return ret;
 348:../src/wolfcrypt/src/aes.c **** 
 349:../src/wolfcrypt/src/aes.c ****         ret = wolfSSL_CryptHwMutexLock();
 350:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
 351:../src/wolfcrypt/src/aes.c ****             return ret;
 352:../src/wolfcrypt/src/aes.c **** 
 353:../src/wolfcrypt/src/aes.c ****     #if defined(STM32_HAL_V2)
 354:../src/wolfcrypt/src/aes.c ****         hcryp.Init.Algorithm  = CRYP_AES_ECB;
 355:../src/wolfcrypt/src/aes.c ****     #elif defined(STM32_CRYPTO_AES_ONLY)
 356:../src/wolfcrypt/src/aes.c ****         hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
 357:../src/wolfcrypt/src/aes.c ****         hcryp.Init.ChainingMode  = CRYP_CHAINMODE_AES_ECB;
 358:../src/wolfcrypt/src/aes.c ****         hcryp.Init.KeyWriteFlag  = CRYP_KEY_WRITE_ENABLE;
 359:../src/wolfcrypt/src/aes.c ****     #endif
 360:../src/wolfcrypt/src/aes.c ****         HAL_CRYP_Init(&hcryp);
 361:../src/wolfcrypt/src/aes.c **** 
 362:../src/wolfcrypt/src/aes.c ****     #if defined(STM32_HAL_V2)
 363:../src/wolfcrypt/src/aes.c ****         ret = HAL_CRYP_Encrypt(&hcryp, (uint32_t*)inBlock, AES_BLOCK_SIZE,
 364:../src/wolfcrypt/src/aes.c ****             (uint32_t*)outBlock, STM32_HAL_TIMEOUT);
 365:../src/wolfcrypt/src/aes.c ****     #elif defined(STM32_CRYPTO_AES_ONLY)
 366:../src/wolfcrypt/src/aes.c ****         ret = HAL_CRYPEx_AES(&hcryp, (uint8_t*)inBlock, AES_BLOCK_SIZE,
 367:../src/wolfcrypt/src/aes.c ****             outBlock, STM32_HAL_TIMEOUT);
 368:../src/wolfcrypt/src/aes.c ****     #else
 369:../src/wolfcrypt/src/aes.c ****         ret = HAL_CRYP_AESECB_Encrypt(&hcryp, (uint8_t*)inBlock, AES_BLOCK_SIZE,
 370:../src/wolfcrypt/src/aes.c ****             outBlock, STM32_HAL_TIMEOUT);
 371:../src/wolfcrypt/src/aes.c ****     #endif
 372:../src/wolfcrypt/src/aes.c ****         if (ret != HAL_OK) {
 373:../src/wolfcrypt/src/aes.c ****             ret = WC_TIMEOUT_E;
 374:../src/wolfcrypt/src/aes.c ****         }
 375:../src/wolfcrypt/src/aes.c ****         HAL_CRYP_DeInit(&hcryp);
 376:../src/wolfcrypt/src/aes.c **** 
 377:../src/wolfcrypt/src/aes.c ****     #else /* Standard Peripheral Library */
 378:../src/wolfcrypt/src/aes.c ****         ret = wc_Stm32_Aes_Init(aes, &cryptInit, &keyInit);
 379:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
 380:../src/wolfcrypt/src/aes.c ****             return ret;
 381:../src/wolfcrypt/src/aes.c **** 
 382:../src/wolfcrypt/src/aes.c ****         ret = wolfSSL_CryptHwMutexLock();
 383:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
 384:../src/wolfcrypt/src/aes.c ****             return ret;
 385:../src/wolfcrypt/src/aes.c **** 
 386:../src/wolfcrypt/src/aes.c ****         /* reset registers to their default values */
 387:../src/wolfcrypt/src/aes.c ****         CRYP_DeInit();
 388:../src/wolfcrypt/src/aes.c **** 
 389:../src/wolfcrypt/src/aes.c ****         /* setup key */
 390:../src/wolfcrypt/src/aes.c ****         CRYP_KeyInit(&keyInit);
 391:../src/wolfcrypt/src/aes.c **** 
 392:../src/wolfcrypt/src/aes.c ****         /* set direction and mode */
 393:../src/wolfcrypt/src/aes.c ****         cryptInit.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 394:../src/wolfcrypt/src/aes.c ****         cryptInit.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 395:../src/wolfcrypt/src/aes.c ****         CRYP_Init(&cryptInit);
 396:../src/wolfcrypt/src/aes.c **** 
 397:../src/wolfcrypt/src/aes.c ****         /* enable crypto processor */
 398:../src/wolfcrypt/src/aes.c ****         CRYP_Cmd(ENABLE);
 399:../src/wolfcrypt/src/aes.c **** 
 400:../src/wolfcrypt/src/aes.c ****         /* flush IN/OUT FIFOs */
 401:../src/wolfcrypt/src/aes.c ****         CRYP_FIFOFlush();
 402:../src/wolfcrypt/src/aes.c **** 
 403:../src/wolfcrypt/src/aes.c ****         CRYP_DataIn(*(uint32_t*)&inBlock[0]);
 404:../src/wolfcrypt/src/aes.c ****         CRYP_DataIn(*(uint32_t*)&inBlock[4]);
 405:../src/wolfcrypt/src/aes.c ****         CRYP_DataIn(*(uint32_t*)&inBlock[8]);
 406:../src/wolfcrypt/src/aes.c ****         CRYP_DataIn(*(uint32_t*)&inBlock[12]);
 407:../src/wolfcrypt/src/aes.c **** 
 408:../src/wolfcrypt/src/aes.c ****         /* wait until the complete message has been processed */
 409:../src/wolfcrypt/src/aes.c ****         while (CRYP_GetFlagStatus(CRYP_FLAG_BUSY) != RESET) {}
 410:../src/wolfcrypt/src/aes.c **** 
 411:../src/wolfcrypt/src/aes.c ****         *(uint32_t*)&outBlock[0]  = CRYP_DataOut();
 412:../src/wolfcrypt/src/aes.c ****         *(uint32_t*)&outBlock[4]  = CRYP_DataOut();
 413:../src/wolfcrypt/src/aes.c ****         *(uint32_t*)&outBlock[8]  = CRYP_DataOut();
 414:../src/wolfcrypt/src/aes.c ****         *(uint32_t*)&outBlock[12] = CRYP_DataOut();
 415:../src/wolfcrypt/src/aes.c **** 
 416:../src/wolfcrypt/src/aes.c ****         /* disable crypto processor */
 417:../src/wolfcrypt/src/aes.c ****         CRYP_Cmd(DISABLE);
 418:../src/wolfcrypt/src/aes.c ****     #endif /* WOLFSSL_STM32_CUBEMX */
 419:../src/wolfcrypt/src/aes.c ****         wolfSSL_CryptHwMutexUnLock();
 420:../src/wolfcrypt/src/aes.c **** 
 421:../src/wolfcrypt/src/aes.c ****         return ret;
 422:../src/wolfcrypt/src/aes.c ****     }
 423:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AES_DIRECT || HAVE_AESGCM || HAVE_AESCCM */
 424:../src/wolfcrypt/src/aes.c **** 
 425:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AES_DECRYPT
 426:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_DIRECT) || defined(HAVE_AESCCM)
 427:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesDecrypt(
 428:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
 429:../src/wolfcrypt/src/aes.c ****     {
 430:../src/wolfcrypt/src/aes.c ****         int ret = 0;
 431:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_STM32_CUBEMX
 432:../src/wolfcrypt/src/aes.c ****         CRYP_HandleTypeDef hcryp;
 433:../src/wolfcrypt/src/aes.c ****     #else
 434:../src/wolfcrypt/src/aes.c ****         CRYP_InitTypeDef cryptInit;
 435:../src/wolfcrypt/src/aes.c ****         CRYP_KeyInitTypeDef keyInit;
 436:../src/wolfcrypt/src/aes.c ****     #endif
 437:../src/wolfcrypt/src/aes.c **** 
 438:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_STM32_CUBEMX
 439:../src/wolfcrypt/src/aes.c ****         ret = wc_Stm32_Aes_Init(aes, &hcryp);
 440:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
 441:../src/wolfcrypt/src/aes.c ****             return ret;
 442:../src/wolfcrypt/src/aes.c **** 
 443:../src/wolfcrypt/src/aes.c ****         ret = wolfSSL_CryptHwMutexLock();
 444:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
 445:../src/wolfcrypt/src/aes.c ****             return ret;
 446:../src/wolfcrypt/src/aes.c **** 
 447:../src/wolfcrypt/src/aes.c ****     #if defined(STM32_HAL_V2)
 448:../src/wolfcrypt/src/aes.c ****         hcryp.Init.Algorithm  = CRYP_AES_ECB;
 449:../src/wolfcrypt/src/aes.c ****     #elif defined(STM32_CRYPTO_AES_ONLY)
 450:../src/wolfcrypt/src/aes.c ****         hcryp.Init.OperatingMode = CRYP_ALGOMODE_KEYDERIVATION_DECRYPT;
 451:../src/wolfcrypt/src/aes.c ****         hcryp.Init.ChainingMode  = CRYP_CHAINMODE_AES_ECB;
 452:../src/wolfcrypt/src/aes.c ****         hcryp.Init.KeyWriteFlag  = CRYP_KEY_WRITE_ENABLE;
 453:../src/wolfcrypt/src/aes.c ****     #endif
 454:../src/wolfcrypt/src/aes.c ****         HAL_CRYP_Init(&hcryp);
 455:../src/wolfcrypt/src/aes.c **** 
 456:../src/wolfcrypt/src/aes.c ****     #if defined(STM32_HAL_V2)
 457:../src/wolfcrypt/src/aes.c ****         ret = HAL_CRYP_Decrypt(&hcryp, (uint32_t*)inBlock, AES_BLOCK_SIZE,
 458:../src/wolfcrypt/src/aes.c ****             (uint32_t*)outBlock, STM32_HAL_TIMEOUT);
 459:../src/wolfcrypt/src/aes.c ****     #elif defined(STM32_CRYPTO_AES_ONLY)
 460:../src/wolfcrypt/src/aes.c ****         ret = HAL_CRYPEx_AES(&hcryp, (uint8_t*)inBlock, AES_BLOCK_SIZE,
 461:../src/wolfcrypt/src/aes.c ****             outBlock, STM32_HAL_TIMEOUT);
 462:../src/wolfcrypt/src/aes.c ****     #else
 463:../src/wolfcrypt/src/aes.c ****         ret = HAL_CRYP_AESECB_Decrypt(&hcryp, (uint8_t*)inBlock, AES_BLOCK_SIZE,
 464:../src/wolfcrypt/src/aes.c ****             outBlock, STM32_HAL_TIMEOUT);
 465:../src/wolfcrypt/src/aes.c ****     #endif
 466:../src/wolfcrypt/src/aes.c ****         if (ret != HAL_OK) {
 467:../src/wolfcrypt/src/aes.c ****             ret = WC_TIMEOUT_E;
 468:../src/wolfcrypt/src/aes.c ****         }
 469:../src/wolfcrypt/src/aes.c ****         HAL_CRYP_DeInit(&hcryp);
 470:../src/wolfcrypt/src/aes.c **** 
 471:../src/wolfcrypt/src/aes.c ****     #else /* Standard Peripheral Library */
 472:../src/wolfcrypt/src/aes.c ****         ret = wc_Stm32_Aes_Init(aes, &cryptInit, &keyInit);
 473:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
 474:../src/wolfcrypt/src/aes.c ****             return ret;
 475:../src/wolfcrypt/src/aes.c **** 
 476:../src/wolfcrypt/src/aes.c ****         ret = wolfSSL_CryptHwMutexLock();
 477:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
 478:../src/wolfcrypt/src/aes.c ****             return ret;
 479:../src/wolfcrypt/src/aes.c **** 
 480:../src/wolfcrypt/src/aes.c ****         /* reset registers to their default values */
 481:../src/wolfcrypt/src/aes.c ****         CRYP_DeInit();
 482:../src/wolfcrypt/src/aes.c **** 
 483:../src/wolfcrypt/src/aes.c ****         /* set direction and key */
 484:../src/wolfcrypt/src/aes.c ****         CRYP_KeyInit(&keyInit);
 485:../src/wolfcrypt/src/aes.c ****         cryptInit.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 486:../src/wolfcrypt/src/aes.c ****         cryptInit.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 487:../src/wolfcrypt/src/aes.c ****         CRYP_Init(&cryptInit);
 488:../src/wolfcrypt/src/aes.c **** 
 489:../src/wolfcrypt/src/aes.c ****         /* enable crypto processor */
 490:../src/wolfcrypt/src/aes.c ****         CRYP_Cmd(ENABLE);
 491:../src/wolfcrypt/src/aes.c **** 
 492:../src/wolfcrypt/src/aes.c ****         /* wait until decrypt key has been initialized */
 493:../src/wolfcrypt/src/aes.c ****         while (CRYP_GetFlagStatus(CRYP_FLAG_BUSY) != RESET) {}
 494:../src/wolfcrypt/src/aes.c **** 
 495:../src/wolfcrypt/src/aes.c ****         /* set direction and mode */
 496:../src/wolfcrypt/src/aes.c ****         cryptInit.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 497:../src/wolfcrypt/src/aes.c ****         cryptInit.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 498:../src/wolfcrypt/src/aes.c ****         CRYP_Init(&cryptInit);
 499:../src/wolfcrypt/src/aes.c **** 
 500:../src/wolfcrypt/src/aes.c ****         /* enable crypto processor */
 501:../src/wolfcrypt/src/aes.c ****         CRYP_Cmd(ENABLE);
 502:../src/wolfcrypt/src/aes.c **** 
 503:../src/wolfcrypt/src/aes.c ****         /* flush IN/OUT FIFOs */
 504:../src/wolfcrypt/src/aes.c ****         CRYP_FIFOFlush();
 505:../src/wolfcrypt/src/aes.c **** 
 506:../src/wolfcrypt/src/aes.c ****         CRYP_DataIn(*(uint32_t*)&inBlock[0]);
 507:../src/wolfcrypt/src/aes.c ****         CRYP_DataIn(*(uint32_t*)&inBlock[4]);
 508:../src/wolfcrypt/src/aes.c ****         CRYP_DataIn(*(uint32_t*)&inBlock[8]);
 509:../src/wolfcrypt/src/aes.c ****         CRYP_DataIn(*(uint32_t*)&inBlock[12]);
 510:../src/wolfcrypt/src/aes.c **** 
 511:../src/wolfcrypt/src/aes.c ****         /* wait until the complete message has been processed */
 512:../src/wolfcrypt/src/aes.c ****         while (CRYP_GetFlagStatus(CRYP_FLAG_BUSY) != RESET) {}
 513:../src/wolfcrypt/src/aes.c **** 
 514:../src/wolfcrypt/src/aes.c ****         *(uint32_t*)&outBlock[0]  = CRYP_DataOut();
 515:../src/wolfcrypt/src/aes.c ****         *(uint32_t*)&outBlock[4]  = CRYP_DataOut();
 516:../src/wolfcrypt/src/aes.c ****         *(uint32_t*)&outBlock[8]  = CRYP_DataOut();
 517:../src/wolfcrypt/src/aes.c ****         *(uint32_t*)&outBlock[12] = CRYP_DataOut();
 518:../src/wolfcrypt/src/aes.c **** 
 519:../src/wolfcrypt/src/aes.c ****         /* disable crypto processor */
 520:../src/wolfcrypt/src/aes.c ****         CRYP_Cmd(DISABLE);
 521:../src/wolfcrypt/src/aes.c ****     #endif /* WOLFSSL_STM32_CUBEMX */
 522:../src/wolfcrypt/src/aes.c ****         wolfSSL_CryptHwMutexUnLock();
 523:../src/wolfcrypt/src/aes.c **** 
 524:../src/wolfcrypt/src/aes.c ****         return ret;
 525:../src/wolfcrypt/src/aes.c ****     }
 526:../src/wolfcrypt/src/aes.c ****     #endif /* WOLFSSL_AES_DIRECT || HAVE_AESCCM */
 527:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_DECRYPT */
 528:../src/wolfcrypt/src/aes.c **** 
 529:../src/wolfcrypt/src/aes.c **** #elif defined(HAVE_COLDFIRE_SEC)
 530:../src/wolfcrypt/src/aes.c ****     /* Freescale Coldfire SEC support for CBC mode.
 531:../src/wolfcrypt/src/aes.c ****      * NOTE: no support for AES-CTR/GCM/CCM/Direct */
 532:../src/wolfcrypt/src/aes.c ****     #include <wolfssl/wolfcrypt/types.h>
 533:../src/wolfcrypt/src/aes.c ****     #include "sec.h"
 534:../src/wolfcrypt/src/aes.c ****     #include "mcf5475_sec.h"
 535:../src/wolfcrypt/src/aes.c ****     #include "mcf5475_siu.h"
 536:../src/wolfcrypt/src/aes.c **** #elif defined(FREESCALE_LTC)
 537:../src/wolfcrypt/src/aes.c ****     #include "fsl_ltc.h"
 538:../src/wolfcrypt/src/aes.c ****     #if defined(FREESCALE_LTC_AES_GCM)
 539:../src/wolfcrypt/src/aes.c ****         #undef NEED_AES_TABLES
 540:../src/wolfcrypt/src/aes.c ****         #undef GCM_TABLE
 541:../src/wolfcrypt/src/aes.c ****     #endif
 542:../src/wolfcrypt/src/aes.c **** 
 543:../src/wolfcrypt/src/aes.c ****         /* if LTC doesn't have GCM, use software with LTC AES ECB mode */
 544:../src/wolfcrypt/src/aes.c ****         static WARN_UNUSED_RESULT int wc_AesEncrypt(
 545:../src/wolfcrypt/src/aes.c ****             Aes* aes, const byte* inBlock, byte* outBlock)
 546:../src/wolfcrypt/src/aes.c ****         {
 547:../src/wolfcrypt/src/aes.c ****             word32 keySize = 0;
 548:../src/wolfcrypt/src/aes.c ****             byte* key = (byte*)aes->key;
 549:../src/wolfcrypt/src/aes.c ****             int ret = wc_AesGetKeySize(aes, &keySize);
 550:../src/wolfcrypt/src/aes.c ****             if (ret != 0)
 551:../src/wolfcrypt/src/aes.c ****                 return ret;
 552:../src/wolfcrypt/src/aes.c **** 
 553:../src/wolfcrypt/src/aes.c ****             if (wolfSSL_CryptHwMutexLock() == 0) {
 554:../src/wolfcrypt/src/aes.c ****                 LTC_AES_EncryptEcb(LTC_BASE, inBlock, outBlock, AES_BLOCK_SIZE,
 555:../src/wolfcrypt/src/aes.c ****                     key, keySize);
 556:../src/wolfcrypt/src/aes.c ****                 wolfSSL_CryptHwMutexUnLock();
 557:../src/wolfcrypt/src/aes.c ****             }
 558:../src/wolfcrypt/src/aes.c ****             return 0;
 559:../src/wolfcrypt/src/aes.c ****         }
 560:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_AES_DECRYPT
 561:../src/wolfcrypt/src/aes.c ****         static WARN_UNUSED_RESULT int wc_AesDecrypt(
 562:../src/wolfcrypt/src/aes.c ****             Aes* aes, const byte* inBlock, byte* outBlock)
 563:../src/wolfcrypt/src/aes.c ****         {
 564:../src/wolfcrypt/src/aes.c ****             word32 keySize = 0;
 565:../src/wolfcrypt/src/aes.c ****             byte* key = (byte*)aes->key;
 566:../src/wolfcrypt/src/aes.c ****             int ret = wc_AesGetKeySize(aes, &keySize);
 567:../src/wolfcrypt/src/aes.c ****             if (ret != 0)
 568:../src/wolfcrypt/src/aes.c ****                 return ret;
 569:../src/wolfcrypt/src/aes.c **** 
 570:../src/wolfcrypt/src/aes.c ****             if (wolfSSL_CryptHwMutexLock() == 0) {
 571:../src/wolfcrypt/src/aes.c ****                 LTC_AES_DecryptEcb(LTC_BASE, inBlock, outBlock, AES_BLOCK_SIZE,
 572:../src/wolfcrypt/src/aes.c ****                     key, keySize, kLTC_EncryptKey);
 573:../src/wolfcrypt/src/aes.c ****                 wolfSSL_CryptHwMutexUnLock();
 574:../src/wolfcrypt/src/aes.c ****             }
 575:../src/wolfcrypt/src/aes.c ****             return 0;
 576:../src/wolfcrypt/src/aes.c ****         }
 577:../src/wolfcrypt/src/aes.c ****         #endif
 578:../src/wolfcrypt/src/aes.c **** 
 579:../src/wolfcrypt/src/aes.c **** #elif defined(FREESCALE_MMCAU)
 580:../src/wolfcrypt/src/aes.c ****     /* Freescale mmCAU hardware AES support for Direct, CBC, CCM, GCM modes
 581:../src/wolfcrypt/src/aes.c ****      * through the CAU/mmCAU library. Documentation located in
 582:../src/wolfcrypt/src/aes.c ****      * ColdFire/ColdFire+ CAU and Kinetis mmCAU Software Library User
 583:../src/wolfcrypt/src/aes.c ****      * Guide (See note in README). */
 584:../src/wolfcrypt/src/aes.c ****     #ifdef FREESCALE_MMCAU_CLASSIC
 585:../src/wolfcrypt/src/aes.c ****         /* MMCAU 1.4 library used with non-KSDK / classic MQX builds */
 586:../src/wolfcrypt/src/aes.c ****         #include "cau_api.h"
 587:../src/wolfcrypt/src/aes.c ****     #else
 588:../src/wolfcrypt/src/aes.c ****         #include "fsl_mmcau.h"
 589:../src/wolfcrypt/src/aes.c ****     #endif
 590:../src/wolfcrypt/src/aes.c **** 
 591:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesEncrypt(
 592:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
 593:../src/wolfcrypt/src/aes.c ****     {
 594:../src/wolfcrypt/src/aes.c ****         if (wolfSSL_CryptHwMutexLock() == 0) {
 595:../src/wolfcrypt/src/aes.c ****         #ifdef FREESCALE_MMCAU_CLASSIC
 596:../src/wolfcrypt/src/aes.c ****             if ((wc_ptr_t)outBlock % WOLFSSL_MMCAU_ALIGNMENT) {
 597:../src/wolfcrypt/src/aes.c ****                 WOLFSSL_MSG("Bad cau_aes_encrypt alignment");
 598:../src/wolfcrypt/src/aes.c ****                 return BAD_ALIGN_E;
 599:../src/wolfcrypt/src/aes.c ****             }
 600:../src/wolfcrypt/src/aes.c ****             cau_aes_encrypt(inBlock, (byte*)aes->key, aes->rounds, outBlock);
 601:../src/wolfcrypt/src/aes.c ****         #else
 602:../src/wolfcrypt/src/aes.c ****             MMCAU_AES_EncryptEcb(inBlock, (byte*)aes->key, aes->rounds,
 603:../src/wolfcrypt/src/aes.c ****                                  outBlock);
 604:../src/wolfcrypt/src/aes.c ****         #endif
 605:../src/wolfcrypt/src/aes.c ****             wolfSSL_CryptHwMutexUnLock();
 606:../src/wolfcrypt/src/aes.c ****         }
 607:../src/wolfcrypt/src/aes.c ****         return 0;
 608:../src/wolfcrypt/src/aes.c ****     }
 609:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_DECRYPT
 610:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesDecrypt(
 611:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
 612:../src/wolfcrypt/src/aes.c ****     {
 613:../src/wolfcrypt/src/aes.c ****         if (wolfSSL_CryptHwMutexLock() == 0) {
 614:../src/wolfcrypt/src/aes.c ****         #ifdef FREESCALE_MMCAU_CLASSIC
 615:../src/wolfcrypt/src/aes.c ****             if ((wc_ptr_t)outBlock % WOLFSSL_MMCAU_ALIGNMENT) {
 616:../src/wolfcrypt/src/aes.c ****                 WOLFSSL_MSG("Bad cau_aes_decrypt alignment");
 617:../src/wolfcrypt/src/aes.c ****                 return BAD_ALIGN_E;
 618:../src/wolfcrypt/src/aes.c ****             }
 619:../src/wolfcrypt/src/aes.c ****             cau_aes_decrypt(inBlock, (byte*)aes->key, aes->rounds, outBlock);
 620:../src/wolfcrypt/src/aes.c ****         #else
 621:../src/wolfcrypt/src/aes.c ****             MMCAU_AES_DecryptEcb(inBlock, (byte*)aes->key, aes->rounds,
 622:../src/wolfcrypt/src/aes.c ****                                  outBlock);
 623:../src/wolfcrypt/src/aes.c ****         #endif
 624:../src/wolfcrypt/src/aes.c ****             wolfSSL_CryptHwMutexUnLock();
 625:../src/wolfcrypt/src/aes.c ****         }
 626:../src/wolfcrypt/src/aes.c ****         return 0;
 627:../src/wolfcrypt/src/aes.c ****     }
 628:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_DECRYPT */
 629:../src/wolfcrypt/src/aes.c **** 
 630:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_PIC32MZ_CRYPT)
 631:../src/wolfcrypt/src/aes.c **** 
 632:../src/wolfcrypt/src/aes.c ****     #include <wolfssl/wolfcrypt/port/pic32/pic32mz-crypt.h>
 633:../src/wolfcrypt/src/aes.c **** 
 634:../src/wolfcrypt/src/aes.c ****     #if defined(HAVE_AESGCM) || defined(WOLFSSL_AES_DIRECT)
 635:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesEncrypt(
 636:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
 637:../src/wolfcrypt/src/aes.c ****     {
 638:../src/wolfcrypt/src/aes.c ****         /* Thread mutex protection handled in Pic32Crypto */
 639:../src/wolfcrypt/src/aes.c ****         return wc_Pic32AesCrypt(aes->key, aes->keylen, NULL, 0,
 640:../src/wolfcrypt/src/aes.c ****             outBlock, inBlock, AES_BLOCK_SIZE,
 641:../src/wolfcrypt/src/aes.c ****             PIC32_ENCRYPTION, PIC32_ALGO_AES, PIC32_CRYPTOALGO_RECB);
 642:../src/wolfcrypt/src/aes.c ****     }
 643:../src/wolfcrypt/src/aes.c ****     #endif
 644:../src/wolfcrypt/src/aes.c **** 
 645:../src/wolfcrypt/src/aes.c ****     #if defined(HAVE_AES_DECRYPT) && defined(WOLFSSL_AES_DIRECT)
 646:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesDecrypt(
 647:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
 648:../src/wolfcrypt/src/aes.c ****     {
 649:../src/wolfcrypt/src/aes.c ****         /* Thread mutex protection handled in Pic32Crypto */
 650:../src/wolfcrypt/src/aes.c ****         return wc_Pic32AesCrypt(aes->key, aes->keylen, NULL, 0,
 651:../src/wolfcrypt/src/aes.c ****             outBlock, inBlock, AES_BLOCK_SIZE,
 652:../src/wolfcrypt/src/aes.c ****             PIC32_DECRYPTION, PIC32_ALGO_AES, PIC32_CRYPTOALGO_RECB);
 653:../src/wolfcrypt/src/aes.c ****     }
 654:../src/wolfcrypt/src/aes.c ****     #endif
 655:../src/wolfcrypt/src/aes.c **** 
 656:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_NRF51_AES)
 657:../src/wolfcrypt/src/aes.c ****     /* Use built-in AES hardware - AES 128 ECB Encrypt Only */
 658:../src/wolfcrypt/src/aes.c ****     #include "wolfssl/wolfcrypt/port/nrf51.h"
 659:../src/wolfcrypt/src/aes.c **** 
 660:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesEncrypt(
 661:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
 662:../src/wolfcrypt/src/aes.c ****     {
 663:../src/wolfcrypt/src/aes.c ****         int ret;
 664:../src/wolfcrypt/src/aes.c ****         ret = wolfSSL_CryptHwMutexLock();
 665:../src/wolfcrypt/src/aes.c ****         if (ret == 0) {
 666:../src/wolfcrypt/src/aes.c ****             ret = nrf51_aes_encrypt(inBlock, (byte*)aes->key, aes->rounds,
 667:../src/wolfcrypt/src/aes.c ****                                     outBlock);
 668:../src/wolfcrypt/src/aes.c ****             wolfSSL_CryptHwMutexUnLock();
 669:../src/wolfcrypt/src/aes.c ****         }
 670:../src/wolfcrypt/src/aes.c ****         return ret;
 671:../src/wolfcrypt/src/aes.c ****     }
 672:../src/wolfcrypt/src/aes.c **** 
 673:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_DECRYPT
 674:../src/wolfcrypt/src/aes.c ****         #error nRF51 AES Hardware does not support decrypt
 675:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_DECRYPT */
 676:../src/wolfcrypt/src/aes.c **** 
 677:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
 678:../src/wolfcrypt/src/aes.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_AES)
 679:../src/wolfcrypt/src/aes.c **** 
 680:../src/wolfcrypt/src/aes.c ****     #include "wolfssl/wolfcrypt/port/Espressif/esp32-crypt.h"
 681:../src/wolfcrypt/src/aes.c **** 
 682:../src/wolfcrypt/src/aes.c ****     #if defined(HAVE_AESGCM) || defined(WOLFSSL_AES_DIRECT)
 683:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesEncrypt(
 684:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
 685:../src/wolfcrypt/src/aes.c ****     {
 686:../src/wolfcrypt/src/aes.c ****         /* Thread mutex protection handled in esp_aes_hw_InUse */
 687:../src/wolfcrypt/src/aes.c ****         return wc_esp32AesEncrypt(aes, inBlock, outBlock);
 688:../src/wolfcrypt/src/aes.c ****     }
 689:../src/wolfcrypt/src/aes.c ****     #endif
 690:../src/wolfcrypt/src/aes.c **** 
 691:../src/wolfcrypt/src/aes.c ****     #if defined(HAVE_AES_DECRYPT) && defined(WOLFSSL_AES_DIRECT)
 692:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesDecrypt(
 693:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
 694:../src/wolfcrypt/src/aes.c ****     {
 695:../src/wolfcrypt/src/aes.c ****         /* Thread mutex protection handled in esp_aes_hw_InUse */
 696:../src/wolfcrypt/src/aes.c ****        return wc_esp32AesDecrypt(aes, inBlock, outBlock);
 697:../src/wolfcrypt/src/aes.c ****     }
 698:../src/wolfcrypt/src/aes.c ****     #endif
 699:../src/wolfcrypt/src/aes.c **** 
 700:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_AESNI)
 701:../src/wolfcrypt/src/aes.c **** 
 702:../src/wolfcrypt/src/aes.c ****     #define NEED_AES_TABLES
 703:../src/wolfcrypt/src/aes.c **** 
 704:../src/wolfcrypt/src/aes.c ****     /* Each platform needs to query info type 1 from cpuid to see if aesni is
 705:../src/wolfcrypt/src/aes.c ****      * supported. Also, let's setup a macro for proper linkage w/o ABI conflicts
 706:../src/wolfcrypt/src/aes.c ****      */
 707:../src/wolfcrypt/src/aes.c **** 
 708:../src/wolfcrypt/src/aes.c ****     #ifndef AESNI_ALIGN
 709:../src/wolfcrypt/src/aes.c ****         #define AESNI_ALIGN 16
 710:../src/wolfcrypt/src/aes.c ****     #endif
 711:../src/wolfcrypt/src/aes.c **** 
 712:../src/wolfcrypt/src/aes.c ****     #ifdef _MSC_VER
 713:../src/wolfcrypt/src/aes.c ****         #define XASM_LINK(f)
 714:../src/wolfcrypt/src/aes.c ****     #elif defined(__APPLE__)
 715:../src/wolfcrypt/src/aes.c ****         #define XASM_LINK(f) asm("_" f)
 716:../src/wolfcrypt/src/aes.c ****     #else
 717:../src/wolfcrypt/src/aes.c ****         #define XASM_LINK(f) asm(f)
 718:../src/wolfcrypt/src/aes.c ****     #endif /* _MSC_VER */
 719:../src/wolfcrypt/src/aes.c **** 
 720:../src/wolfcrypt/src/aes.c ****     static int checkAESNI = 0;
 721:../src/wolfcrypt/src/aes.c ****     static int haveAESNI  = 0;
 722:../src/wolfcrypt/src/aes.c ****     static word32 intel_flags = 0;
 723:../src/wolfcrypt/src/aes.c **** 
 724:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int Check_CPU_support_AES(void)
 725:../src/wolfcrypt/src/aes.c ****     {
 726:../src/wolfcrypt/src/aes.c ****         intel_flags = cpuid_get_flags();
 727:../src/wolfcrypt/src/aes.c **** 
 728:../src/wolfcrypt/src/aes.c ****         return IS_INTEL_AESNI(intel_flags) != 0;
 729:../src/wolfcrypt/src/aes.c ****     }
 730:../src/wolfcrypt/src/aes.c **** 
 731:../src/wolfcrypt/src/aes.c **** 
 732:../src/wolfcrypt/src/aes.c ****     /* tell C compiler these are asm functions in case any mix up of ABI underscore
 733:../src/wolfcrypt/src/aes.c ****        prefix between clang/gcc/llvm etc */
 734:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_CBC
 735:../src/wolfcrypt/src/aes.c ****         void AES_CBC_encrypt(const unsigned char* in, unsigned char* out,
 736:../src/wolfcrypt/src/aes.c ****                              unsigned char* ivec, unsigned long length,
 737:../src/wolfcrypt/src/aes.c ****                              const unsigned char* KS, int nr)
 738:../src/wolfcrypt/src/aes.c ****                              XASM_LINK("AES_CBC_encrypt");
 739:../src/wolfcrypt/src/aes.c **** 
 740:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_AES_DECRYPT
 741:../src/wolfcrypt/src/aes.c ****             #if defined(WOLFSSL_AESNI_BY4)
 742:../src/wolfcrypt/src/aes.c ****                 void AES_CBC_decrypt_by4(const unsigned char* in, unsigned char* out,
 743:../src/wolfcrypt/src/aes.c ****                                          unsigned char* ivec, unsigned long length,
 744:../src/wolfcrypt/src/aes.c ****                                          const unsigned char* KS, int nr)
 745:../src/wolfcrypt/src/aes.c ****                                          XASM_LINK("AES_CBC_decrypt_by4");
 746:../src/wolfcrypt/src/aes.c ****             #elif defined(WOLFSSL_AESNI_BY6)
 747:../src/wolfcrypt/src/aes.c ****                 void AES_CBC_decrypt_by6(const unsigned char* in, unsigned char* out,
 748:../src/wolfcrypt/src/aes.c ****                                          unsigned char* ivec, unsigned long length,
 749:../src/wolfcrypt/src/aes.c ****                                          const unsigned char* KS, int nr)
 750:../src/wolfcrypt/src/aes.c ****                                          XASM_LINK("AES_CBC_decrypt_by6");
 751:../src/wolfcrypt/src/aes.c ****             #else /* WOLFSSL_AESNI_BYx */
 752:../src/wolfcrypt/src/aes.c ****                 void AES_CBC_decrypt_by8(const unsigned char* in, unsigned char* out,
 753:../src/wolfcrypt/src/aes.c ****                                          unsigned char* ivec, unsigned long length,
 754:../src/wolfcrypt/src/aes.c ****                                          const unsigned char* KS, int nr)
 755:../src/wolfcrypt/src/aes.c ****                                          XASM_LINK("AES_CBC_decrypt_by8");
 756:../src/wolfcrypt/src/aes.c ****             #endif /* WOLFSSL_AESNI_BYx */
 757:../src/wolfcrypt/src/aes.c ****         #endif /* HAVE_AES_DECRYPT */
 758:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_CBC */
 759:../src/wolfcrypt/src/aes.c **** 
 760:../src/wolfcrypt/src/aes.c ****     void AES_ECB_encrypt(const unsigned char* in, unsigned char* out,
 761:../src/wolfcrypt/src/aes.c ****                          unsigned long length, const unsigned char* KS, int nr)
 762:../src/wolfcrypt/src/aes.c ****                          XASM_LINK("AES_ECB_encrypt");
 763:../src/wolfcrypt/src/aes.c **** 
 764:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_DECRYPT
 765:../src/wolfcrypt/src/aes.c ****         void AES_ECB_decrypt(const unsigned char* in, unsigned char* out,
 766:../src/wolfcrypt/src/aes.c ****                              unsigned long length, const unsigned char* KS, int nr)
 767:../src/wolfcrypt/src/aes.c ****                              XASM_LINK("AES_ECB_decrypt");
 768:../src/wolfcrypt/src/aes.c ****     #endif
 769:../src/wolfcrypt/src/aes.c **** 
 770:../src/wolfcrypt/src/aes.c ****     void AES_128_Key_Expansion(const unsigned char* userkey,
 771:../src/wolfcrypt/src/aes.c ****                                unsigned char* key_schedule)
 772:../src/wolfcrypt/src/aes.c ****                                XASM_LINK("AES_128_Key_Expansion");
 773:../src/wolfcrypt/src/aes.c **** 
 774:../src/wolfcrypt/src/aes.c ****     void AES_192_Key_Expansion(const unsigned char* userkey,
 775:../src/wolfcrypt/src/aes.c ****                                unsigned char* key_schedule)
 776:../src/wolfcrypt/src/aes.c ****                                XASM_LINK("AES_192_Key_Expansion");
 777:../src/wolfcrypt/src/aes.c **** 
 778:../src/wolfcrypt/src/aes.c ****     void AES_256_Key_Expansion(const unsigned char* userkey,
 779:../src/wolfcrypt/src/aes.c ****                                unsigned char* key_schedule)
 780:../src/wolfcrypt/src/aes.c ****                                XASM_LINK("AES_256_Key_Expansion");
 781:../src/wolfcrypt/src/aes.c **** 
 782:../src/wolfcrypt/src/aes.c **** 
 783:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int AES_set_encrypt_key(
 784:../src/wolfcrypt/src/aes.c ****         const unsigned char *userKey, const int bits, Aes* aes)
 785:../src/wolfcrypt/src/aes.c ****     {
 786:../src/wolfcrypt/src/aes.c ****         int ret;
 787:../src/wolfcrypt/src/aes.c **** 
 788:../src/wolfcrypt/src/aes.c ****         if (!userKey || !aes)
 789:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
 790:../src/wolfcrypt/src/aes.c **** 
 791:../src/wolfcrypt/src/aes.c ****         switch (bits) {
 792:../src/wolfcrypt/src/aes.c ****             case 128:
 793:../src/wolfcrypt/src/aes.c ****                AES_128_Key_Expansion (userKey,(byte*)aes->key); aes->rounds = 10;
 794:../src/wolfcrypt/src/aes.c ****                return 0;
 795:../src/wolfcrypt/src/aes.c ****             case 192:
 796:../src/wolfcrypt/src/aes.c ****                AES_192_Key_Expansion (userKey,(byte*)aes->key); aes->rounds = 12;
 797:../src/wolfcrypt/src/aes.c ****                return 0;
 798:../src/wolfcrypt/src/aes.c ****             case 256:
 799:../src/wolfcrypt/src/aes.c ****                AES_256_Key_Expansion (userKey,(byte*)aes->key); aes->rounds = 14;
 800:../src/wolfcrypt/src/aes.c ****                return 0;
 801:../src/wolfcrypt/src/aes.c ****             default:
 802:../src/wolfcrypt/src/aes.c ****                 ret = BAD_FUNC_ARG;
 803:../src/wolfcrypt/src/aes.c ****         }
 804:../src/wolfcrypt/src/aes.c **** 
 805:../src/wolfcrypt/src/aes.c ****         return ret;
 806:../src/wolfcrypt/src/aes.c ****     }
 807:../src/wolfcrypt/src/aes.c **** 
 808:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_DECRYPT
 809:../src/wolfcrypt/src/aes.c ****         static WARN_UNUSED_RESULT int AES_set_decrypt_key(
 810:../src/wolfcrypt/src/aes.c ****             const unsigned char* userKey, const int bits, Aes* aes)
 811:../src/wolfcrypt/src/aes.c ****         {
 812:../src/wolfcrypt/src/aes.c ****             int nr;
 813:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SMALL_STACK
 814:../src/wolfcrypt/src/aes.c ****             Aes *temp_key;
 815:../src/wolfcrypt/src/aes.c **** #else
 816:../src/wolfcrypt/src/aes.c ****             Aes temp_key[1];
 817:../src/wolfcrypt/src/aes.c **** #endif
 818:../src/wolfcrypt/src/aes.c ****             __m128i *Key_Schedule;
 819:../src/wolfcrypt/src/aes.c ****             __m128i *Temp_Key_Schedule;
 820:../src/wolfcrypt/src/aes.c **** 
 821:../src/wolfcrypt/src/aes.c ****             if (!userKey || !aes)
 822:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
 823:../src/wolfcrypt/src/aes.c **** 
 824:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SMALL_STACK
 825:../src/wolfcrypt/src/aes.c ****             if ((temp_key = (Aes *)XMALLOC(sizeof *aes, aes->heap,
 826:../src/wolfcrypt/src/aes.c ****                                            DYNAMIC_TYPE_AES)) == NULL)
 827:../src/wolfcrypt/src/aes.c ****                 return MEMORY_E;
 828:../src/wolfcrypt/src/aes.c **** #endif
 829:../src/wolfcrypt/src/aes.c **** 
 830:../src/wolfcrypt/src/aes.c ****             if (AES_set_encrypt_key(userKey,bits,temp_key) == BAD_FUNC_ARG) {
 831:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SMALL_STACK
 832:../src/wolfcrypt/src/aes.c ****                 XFREE(temp_key, aes->heap, DYNAMIC_TYPE_AES);
 833:../src/wolfcrypt/src/aes.c **** #endif
 834:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
 835:../src/wolfcrypt/src/aes.c ****             }
 836:../src/wolfcrypt/src/aes.c **** 
 837:../src/wolfcrypt/src/aes.c ****             Key_Schedule = (__m128i*)aes->key;
 838:../src/wolfcrypt/src/aes.c ****             Temp_Key_Schedule = (__m128i*)temp_key->key;
 839:../src/wolfcrypt/src/aes.c **** 
 840:../src/wolfcrypt/src/aes.c ****             nr = temp_key->rounds;
 841:../src/wolfcrypt/src/aes.c ****             aes->rounds = nr;
 842:../src/wolfcrypt/src/aes.c **** 
 843:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SMALL_STACK
 844:../src/wolfcrypt/src/aes.c ****             SAVE_VECTOR_REGISTERS(XFREE(temp_key, aes->heap, DYNAMIC_TYPE_AES); return _svr_ret;);
 845:../src/wolfcrypt/src/aes.c **** #else
 846:../src/wolfcrypt/src/aes.c ****             SAVE_VECTOR_REGISTERS(return _svr_ret;);
 847:../src/wolfcrypt/src/aes.c **** #endif
 848:../src/wolfcrypt/src/aes.c **** 
 849:../src/wolfcrypt/src/aes.c ****             Key_Schedule[nr] = Temp_Key_Schedule[0];
 850:../src/wolfcrypt/src/aes.c ****             Key_Schedule[nr-1] = _mm_aesimc_si128(Temp_Key_Schedule[1]);
 851:../src/wolfcrypt/src/aes.c ****             Key_Schedule[nr-2] = _mm_aesimc_si128(Temp_Key_Schedule[2]);
 852:../src/wolfcrypt/src/aes.c ****             Key_Schedule[nr-3] = _mm_aesimc_si128(Temp_Key_Schedule[3]);
 853:../src/wolfcrypt/src/aes.c ****             Key_Schedule[nr-4] = _mm_aesimc_si128(Temp_Key_Schedule[4]);
 854:../src/wolfcrypt/src/aes.c ****             Key_Schedule[nr-5] = _mm_aesimc_si128(Temp_Key_Schedule[5]);
 855:../src/wolfcrypt/src/aes.c ****             Key_Schedule[nr-6] = _mm_aesimc_si128(Temp_Key_Schedule[6]);
 856:../src/wolfcrypt/src/aes.c ****             Key_Schedule[nr-7] = _mm_aesimc_si128(Temp_Key_Schedule[7]);
 857:../src/wolfcrypt/src/aes.c ****             Key_Schedule[nr-8] = _mm_aesimc_si128(Temp_Key_Schedule[8]);
 858:../src/wolfcrypt/src/aes.c ****             Key_Schedule[nr-9] = _mm_aesimc_si128(Temp_Key_Schedule[9]);
 859:../src/wolfcrypt/src/aes.c **** 
 860:../src/wolfcrypt/src/aes.c ****             if (nr>10) {
 861:../src/wolfcrypt/src/aes.c ****                 Key_Schedule[nr-10] = _mm_aesimc_si128(Temp_Key_Schedule[10]);
 862:../src/wolfcrypt/src/aes.c ****                 Key_Schedule[nr-11] = _mm_aesimc_si128(Temp_Key_Schedule[11]);
 863:../src/wolfcrypt/src/aes.c ****             }
 864:../src/wolfcrypt/src/aes.c **** 
 865:../src/wolfcrypt/src/aes.c ****             if (nr>12) {
 866:../src/wolfcrypt/src/aes.c ****                 Key_Schedule[nr-12] = _mm_aesimc_si128(Temp_Key_Schedule[12]);
 867:../src/wolfcrypt/src/aes.c ****                 Key_Schedule[nr-13] = _mm_aesimc_si128(Temp_Key_Schedule[13]);
 868:../src/wolfcrypt/src/aes.c ****             }
 869:../src/wolfcrypt/src/aes.c **** 
 870:../src/wolfcrypt/src/aes.c ****             Key_Schedule[0] = Temp_Key_Schedule[nr];
 871:../src/wolfcrypt/src/aes.c **** 
 872:../src/wolfcrypt/src/aes.c ****             RESTORE_VECTOR_REGISTERS();
 873:../src/wolfcrypt/src/aes.c **** 
 874:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SMALL_STACK
 875:../src/wolfcrypt/src/aes.c ****             XFREE(temp_key, aes->heap, DYNAMIC_TYPE_AES);
 876:../src/wolfcrypt/src/aes.c **** #endif
 877:../src/wolfcrypt/src/aes.c **** 
 878:../src/wolfcrypt/src/aes.c ****             return 0;
 879:../src/wolfcrypt/src/aes.c ****         }
 880:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_DECRYPT */
 881:../src/wolfcrypt/src/aes.c **** 
 882:../src/wolfcrypt/src/aes.c **** #elif (defined(WOLFSSL_IMX6_CAAM) && !defined(NO_IMX6_CAAM_AES) \
 883:../src/wolfcrypt/src/aes.c ****         && !defined(WOLFSSL_QNX_CAAM)) || \
 884:../src/wolfcrypt/src/aes.c ****       ((defined(WOLFSSL_AFALG) || defined(WOLFSSL_DEVCRYPTO_AES)) && \
 885:../src/wolfcrypt/src/aes.c ****         defined(HAVE_AESCCM))
 886:../src/wolfcrypt/src/aes.c ****         static WARN_UNUSED_RESULT int wc_AesEncrypt(
 887:../src/wolfcrypt/src/aes.c ****             Aes* aes, const byte* inBlock, byte* outBlock)
 888:../src/wolfcrypt/src/aes.c ****         {
 889:../src/wolfcrypt/src/aes.c ****             return wc_AesEncryptDirect(aes, outBlock, inBlock);
 890:../src/wolfcrypt/src/aes.c ****         }
 891:../src/wolfcrypt/src/aes.c **** 
 892:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_AFALG)
 893:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/af_alg/afalg_aes.c */
 894:../src/wolfcrypt/src/aes.c **** 
 895:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_DEVCRYPTO_AES)
 896:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/devcrypto/devcrypto_aes.c */
 897:../src/wolfcrypt/src/aes.c **** 
 898:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_CRYPT)
 899:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int AES_ECB_encrypt(
 900:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock, int sz)
 901:../src/wolfcrypt/src/aes.c ****     {
 902:../src/wolfcrypt/src/aes.c ****         return se050_aes_crypt(aes, inBlock, outBlock, sz, AES_ENCRYPTION,
 903:../src/wolfcrypt/src/aes.c ****             kAlgorithm_SSS_AES_ECB);
 904:../src/wolfcrypt/src/aes.c ****     }
 905:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int AES_ECB_decrypt(
 906:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock, int sz)
 907:../src/wolfcrypt/src/aes.c ****     {
 908:../src/wolfcrypt/src/aes.c ****         return se050_aes_crypt(aes, inBlock, outBlock, sz, AES_DECRYPTION,
 909:../src/wolfcrypt/src/aes.c ****             kAlgorithm_SSS_AES_ECB);
 910:../src/wolfcrypt/src/aes.c ****     }
 911:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesEncrypt(
 912:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
 913:../src/wolfcrypt/src/aes.c ****     {
 914:../src/wolfcrypt/src/aes.c ****         return AES_ECB_encrypt(aes, inBlock, outBlock, AES_BLOCK_SIZE);
 915:../src/wolfcrypt/src/aes.c ****     }
 916:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesDecrypt(
 917:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
 918:../src/wolfcrypt/src/aes.c ****     {
 919:../src/wolfcrypt/src/aes.c ****         return AES_ECB_decrypt(aes, inBlock, outBlock, AES_BLOCK_SIZE);
 920:../src/wolfcrypt/src/aes.c ****     }
 921:../src/wolfcrypt/src/aes.c **** 
 922:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_SCE) && !defined(WOLFSSL_SCE_NO_AES)
 923:../src/wolfcrypt/src/aes.c ****     #include "hal_data.h"
 924:../src/wolfcrypt/src/aes.c **** 
 925:../src/wolfcrypt/src/aes.c ****     #ifndef WOLFSSL_SCE_AES256_HANDLE
 926:../src/wolfcrypt/src/aes.c ****         #define WOLFSSL_SCE_AES256_HANDLE g_sce_aes_256
 927:../src/wolfcrypt/src/aes.c ****     #endif
 928:../src/wolfcrypt/src/aes.c **** 
 929:../src/wolfcrypt/src/aes.c ****     #ifndef WOLFSSL_SCE_AES192_HANDLE
 930:../src/wolfcrypt/src/aes.c ****         #define WOLFSSL_SCE_AES192_HANDLE g_sce_aes_192
 931:../src/wolfcrypt/src/aes.c ****     #endif
 932:../src/wolfcrypt/src/aes.c **** 
 933:../src/wolfcrypt/src/aes.c ****     #ifndef WOLFSSL_SCE_AES128_HANDLE
 934:../src/wolfcrypt/src/aes.c ****         #define WOLFSSL_SCE_AES128_HANDLE g_sce_aes_128
 935:../src/wolfcrypt/src/aes.c ****     #endif
 936:../src/wolfcrypt/src/aes.c **** 
 937:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int AES_ECB_encrypt(
 938:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock, int sz)
 939:../src/wolfcrypt/src/aes.c ****     {
 940:../src/wolfcrypt/src/aes.c ****         word32 ret;
 941:../src/wolfcrypt/src/aes.c **** 
 942:../src/wolfcrypt/src/aes.c ****         if (WOLFSSL_SCE_GSCE_HANDLE.p_cfg->endian_flag ==
 943:../src/wolfcrypt/src/aes.c ****                 CRYPTO_WORD_ENDIAN_BIG) {
 944:../src/wolfcrypt/src/aes.c ****             ByteReverseWords((word32*)inBlock, (word32*)inBlock, sz);
 945:../src/wolfcrypt/src/aes.c ****         }
 946:../src/wolfcrypt/src/aes.c **** 
 947:../src/wolfcrypt/src/aes.c ****         switch (aes->keylen) {
 948:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_AES_128
 949:../src/wolfcrypt/src/aes.c ****             case AES_128_KEY_SIZE:
 950:../src/wolfcrypt/src/aes.c ****                 ret = WOLFSSL_SCE_AES128_HANDLE.p_api->encrypt(
 951:../src/wolfcrypt/src/aes.c ****                         WOLFSSL_SCE_AES128_HANDLE.p_ctrl, aes->key,
 952:../src/wolfcrypt/src/aes.c ****                         NULL, (sz / sizeof(word32)), (word32*)inBlock,
 953:../src/wolfcrypt/src/aes.c ****                         (word32*)outBlock);
 954:../src/wolfcrypt/src/aes.c ****                 break;
 955:../src/wolfcrypt/src/aes.c ****         #endif
 956:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_AES_192
 957:../src/wolfcrypt/src/aes.c ****             case AES_192_KEY_SIZE:
 958:../src/wolfcrypt/src/aes.c ****                 ret = WOLFSSL_SCE_AES192_HANDLE.p_api->encrypt(
 959:../src/wolfcrypt/src/aes.c ****                         WOLFSSL_SCE_AES192_HANDLE.p_ctrl, aes->key,
 960:../src/wolfcrypt/src/aes.c ****                         NULL, (sz / sizeof(word32)), (word32*)inBlock,
 961:../src/wolfcrypt/src/aes.c ****                         (word32*)outBlock);
 962:../src/wolfcrypt/src/aes.c ****                 break;
 963:../src/wolfcrypt/src/aes.c ****         #endif
 964:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_AES_256
 965:../src/wolfcrypt/src/aes.c ****             case AES_256_KEY_SIZE:
 966:../src/wolfcrypt/src/aes.c ****                 ret = WOLFSSL_SCE_AES256_HANDLE.p_api->encrypt(
 967:../src/wolfcrypt/src/aes.c ****                         WOLFSSL_SCE_AES256_HANDLE.p_ctrl, aes->key,
 968:../src/wolfcrypt/src/aes.c ****                         NULL, (sz / sizeof(word32)), (word32*)inBlock,
 969:../src/wolfcrypt/src/aes.c ****                         (word32*)outBlock);
 970:../src/wolfcrypt/src/aes.c ****                 break;
 971:../src/wolfcrypt/src/aes.c ****         #endif
 972:../src/wolfcrypt/src/aes.c ****             default:
 973:../src/wolfcrypt/src/aes.c ****                 WOLFSSL_MSG("Unknown key size");
 974:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
 975:../src/wolfcrypt/src/aes.c ****         }
 976:../src/wolfcrypt/src/aes.c **** 
 977:../src/wolfcrypt/src/aes.c ****         if (ret != SSP_SUCCESS) {
 978:../src/wolfcrypt/src/aes.c ****             /* revert input */
 979:../src/wolfcrypt/src/aes.c ****             ByteReverseWords((word32*)inBlock, (word32*)inBlock, sz);
 980:../src/wolfcrypt/src/aes.c ****             return WC_HW_E;
 981:../src/wolfcrypt/src/aes.c ****         }
 982:../src/wolfcrypt/src/aes.c **** 
 983:../src/wolfcrypt/src/aes.c ****         if (WOLFSSL_SCE_GSCE_HANDLE.p_cfg->endian_flag ==
 984:../src/wolfcrypt/src/aes.c ****                 CRYPTO_WORD_ENDIAN_BIG) {
 985:../src/wolfcrypt/src/aes.c ****             ByteReverseWords((word32*)outBlock, (word32*)outBlock, sz);
 986:../src/wolfcrypt/src/aes.c ****             if (inBlock != outBlock) {
 987:../src/wolfcrypt/src/aes.c ****                 /* revert input */
 988:../src/wolfcrypt/src/aes.c ****                 ByteReverseWords((word32*)inBlock, (word32*)inBlock, sz);
 989:../src/wolfcrypt/src/aes.c ****             }
 990:../src/wolfcrypt/src/aes.c ****         }
 991:../src/wolfcrypt/src/aes.c ****         return 0;
 992:../src/wolfcrypt/src/aes.c ****     }
 993:../src/wolfcrypt/src/aes.c **** 
 994:../src/wolfcrypt/src/aes.c ****     #if defined(HAVE_AES_DECRYPT)
 995:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int AES_ECB_decrypt(
 996:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock, int sz)
 997:../src/wolfcrypt/src/aes.c ****     {
 998:../src/wolfcrypt/src/aes.c ****         word32 ret;
 999:../src/wolfcrypt/src/aes.c **** 
1000:../src/wolfcrypt/src/aes.c ****         if (WOLFSSL_SCE_GSCE_HANDLE.p_cfg->endian_flag ==
1001:../src/wolfcrypt/src/aes.c ****                 CRYPTO_WORD_ENDIAN_BIG) {
1002:../src/wolfcrypt/src/aes.c ****             ByteReverseWords((word32*)inBlock, (word32*)inBlock, sz);
1003:../src/wolfcrypt/src/aes.c ****         }
1004:../src/wolfcrypt/src/aes.c **** 
1005:../src/wolfcrypt/src/aes.c ****         switch (aes->keylen) {
1006:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_AES_128
1007:../src/wolfcrypt/src/aes.c ****             case AES_128_KEY_SIZE:
1008:../src/wolfcrypt/src/aes.c ****                 ret = WOLFSSL_SCE_AES128_HANDLE.p_api->decrypt(
1009:../src/wolfcrypt/src/aes.c ****                         WOLFSSL_SCE_AES128_HANDLE.p_ctrl, aes->key, aes->reg,
1010:../src/wolfcrypt/src/aes.c ****                         (sz / sizeof(word32)), (word32*)inBlock,
1011:../src/wolfcrypt/src/aes.c ****                         (word32*)outBlock);
1012:../src/wolfcrypt/src/aes.c ****                 break;
1013:../src/wolfcrypt/src/aes.c ****         #endif
1014:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_AES_192
1015:../src/wolfcrypt/src/aes.c ****             case AES_192_KEY_SIZE:
1016:../src/wolfcrypt/src/aes.c ****                 ret = WOLFSSL_SCE_AES192_HANDLE.p_api->decrypt(
1017:../src/wolfcrypt/src/aes.c ****                         WOLFSSL_SCE_AES192_HANDLE.p_ctrl, aes->key, aes->reg,
1018:../src/wolfcrypt/src/aes.c ****                         (sz / sizeof(word32)), (word32*)inBlock,
1019:../src/wolfcrypt/src/aes.c ****                         (word32*)outBlock);
1020:../src/wolfcrypt/src/aes.c ****                 break;
1021:../src/wolfcrypt/src/aes.c ****         #endif
1022:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_AES_256
1023:../src/wolfcrypt/src/aes.c ****             case AES_256_KEY_SIZE:
1024:../src/wolfcrypt/src/aes.c ****                 ret = WOLFSSL_SCE_AES256_HANDLE.p_api->decrypt(
1025:../src/wolfcrypt/src/aes.c ****                         WOLFSSL_SCE_AES256_HANDLE.p_ctrl, aes->key, aes->reg,
1026:../src/wolfcrypt/src/aes.c ****                         (sz / sizeof(word32)), (word32*)inBlock,
1027:../src/wolfcrypt/src/aes.c ****                         (word32*)outBlock);
1028:../src/wolfcrypt/src/aes.c ****                 break;
1029:../src/wolfcrypt/src/aes.c ****         #endif
1030:../src/wolfcrypt/src/aes.c ****             default:
1031:../src/wolfcrypt/src/aes.c ****                 WOLFSSL_MSG("Unknown key size");
1032:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
1033:../src/wolfcrypt/src/aes.c ****         }
1034:../src/wolfcrypt/src/aes.c ****         if (ret != SSP_SUCCESS) {
1035:../src/wolfcrypt/src/aes.c ****             return WC_HW_E;
1036:../src/wolfcrypt/src/aes.c ****         }
1037:../src/wolfcrypt/src/aes.c **** 
1038:../src/wolfcrypt/src/aes.c ****         if (WOLFSSL_SCE_GSCE_HANDLE.p_cfg->endian_flag ==
1039:../src/wolfcrypt/src/aes.c ****                 CRYPTO_WORD_ENDIAN_BIG) {
1040:../src/wolfcrypt/src/aes.c ****             ByteReverseWords((word32*)outBlock, (word32*)outBlock, sz);
1041:../src/wolfcrypt/src/aes.c ****             if (inBlock != outBlock) {
1042:../src/wolfcrypt/src/aes.c ****                 /* revert input */
1043:../src/wolfcrypt/src/aes.c ****                 ByteReverseWords((word32*)inBlock, (word32*)inBlock, sz);
1044:../src/wolfcrypt/src/aes.c ****             }
1045:../src/wolfcrypt/src/aes.c ****         }
1046:../src/wolfcrypt/src/aes.c **** 
1047:../src/wolfcrypt/src/aes.c ****         return 0;
1048:../src/wolfcrypt/src/aes.c ****     }
1049:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_DECRYPT */
1050:../src/wolfcrypt/src/aes.c **** 
1051:../src/wolfcrypt/src/aes.c ****     #if defined(HAVE_AESGCM) || defined(WOLFSSL_AES_DIRECT)
1052:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesEncrypt(
1053:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
1054:../src/wolfcrypt/src/aes.c ****     {
1055:../src/wolfcrypt/src/aes.c ****         return AES_ECB_encrypt(aes, inBlock, outBlock, AES_BLOCK_SIZE);
1056:../src/wolfcrypt/src/aes.c ****     }
1057:../src/wolfcrypt/src/aes.c ****     #endif
1058:../src/wolfcrypt/src/aes.c **** 
1059:../src/wolfcrypt/src/aes.c ****     #if defined(HAVE_AES_DECRYPT) && defined(WOLFSSL_AES_DIRECT)
1060:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesDecrypt(
1061:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* inBlock, byte* outBlock)
1062:../src/wolfcrypt/src/aes.c ****     {
1063:../src/wolfcrypt/src/aes.c ****         return AES_ECB_decrypt(aes, inBlock, outBlock, AES_BLOCK_SIZE);
1064:../src/wolfcrypt/src/aes.c ****     }
1065:../src/wolfcrypt/src/aes.c ****     #endif
1066:../src/wolfcrypt/src/aes.c **** 
1067:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_KCAPI_AES)
1068:../src/wolfcrypt/src/aes.c ****     /* Only CBC and GCM that are in wolfcrypt/src/port/kcapi/kcapi_aes.c */
1069:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_COUNTER) || defined(HAVE_AESCCM) || \
1070:../src/wolfcrypt/src/aes.c ****         defined(WOLFSSL_CMAC) || defined(WOLFSSL_AES_OFB) || \
1071:../src/wolfcrypt/src/aes.c ****         defined(WOLFSSL_AES_CFB) || defined(HAVE_AES_ECB) || \
1072:../src/wolfcrypt/src/aes.c ****         defined(WOLFSSL_AES_DIRECT) || \
1073:../src/wolfcrypt/src/aes.c ****         (defined(HAVE_AES_CBC) && defined(WOLFSSL_NO_KCAPI_AES_CBC))
1074:../src/wolfcrypt/src/aes.c **** 
1075:../src/wolfcrypt/src/aes.c ****         #define NEED_AES_TABLES
1076:../src/wolfcrypt/src/aes.c ****     #endif
1077:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_HAVE_PSA) && !defined(WOLFSSL_PSA_NO_AES)
1078:../src/wolfcrypt/src/aes.c **** /* implemented in wolfcrypt/src/port/psa/psa_aes.c */
1079:../src/wolfcrypt/src/aes.c **** #else
1080:../src/wolfcrypt/src/aes.c **** 
1081:../src/wolfcrypt/src/aes.c ****     /* using wolfCrypt software implementation */
1082:../src/wolfcrypt/src/aes.c ****     #define NEED_AES_TABLES
1083:../src/wolfcrypt/src/aes.c **** #endif
1084:../src/wolfcrypt/src/aes.c **** 
1085:../src/wolfcrypt/src/aes.c **** 
1086:../src/wolfcrypt/src/aes.c **** 
1087:../src/wolfcrypt/src/aes.c **** #ifdef NEED_AES_TABLES
1088:../src/wolfcrypt/src/aes.c **** 
1089:../src/wolfcrypt/src/aes.c **** static const FLASH_QUALIFIER word32 rcon[] = {
1090:../src/wolfcrypt/src/aes.c ****     0x01000000, 0x02000000, 0x04000000, 0x08000000,
1091:../src/wolfcrypt/src/aes.c ****     0x10000000, 0x20000000, 0x40000000, 0x80000000,
1092:../src/wolfcrypt/src/aes.c ****     0x1B000000, 0x36000000,
1093:../src/wolfcrypt/src/aes.c ****     /* for 128-bit blocks, Rijndael never uses more than 10 rcon values */
1094:../src/wolfcrypt/src/aes.c **** };
1095:../src/wolfcrypt/src/aes.c **** 
1096:../src/wolfcrypt/src/aes.c **** #ifndef WOLFSSL_AES_SMALL_TABLES
1097:../src/wolfcrypt/src/aes.c **** static const FLASH_QUALIFIER word32 Te[4][256] = {
1098:../src/wolfcrypt/src/aes.c **** {
1099:../src/wolfcrypt/src/aes.c ****     0xc66363a5U, 0xf87c7c84U, 0xee777799U, 0xf67b7b8dU,
1100:../src/wolfcrypt/src/aes.c ****     0xfff2f20dU, 0xd66b6bbdU, 0xde6f6fb1U, 0x91c5c554U,
1101:../src/wolfcrypt/src/aes.c ****     0x60303050U, 0x02010103U, 0xce6767a9U, 0x562b2b7dU,
1102:../src/wolfcrypt/src/aes.c ****     0xe7fefe19U, 0xb5d7d762U, 0x4dababe6U, 0xec76769aU,
1103:../src/wolfcrypt/src/aes.c ****     0x8fcaca45U, 0x1f82829dU, 0x89c9c940U, 0xfa7d7d87U,
1104:../src/wolfcrypt/src/aes.c ****     0xeffafa15U, 0xb25959ebU, 0x8e4747c9U, 0xfbf0f00bU,
1105:../src/wolfcrypt/src/aes.c ****     0x41adadecU, 0xb3d4d467U, 0x5fa2a2fdU, 0x45afafeaU,
1106:../src/wolfcrypt/src/aes.c ****     0x239c9cbfU, 0x53a4a4f7U, 0xe4727296U, 0x9bc0c05bU,
1107:../src/wolfcrypt/src/aes.c ****     0x75b7b7c2U, 0xe1fdfd1cU, 0x3d9393aeU, 0x4c26266aU,
1108:../src/wolfcrypt/src/aes.c ****     0x6c36365aU, 0x7e3f3f41U, 0xf5f7f702U, 0x83cccc4fU,
1109:../src/wolfcrypt/src/aes.c ****     0x6834345cU, 0x51a5a5f4U, 0xd1e5e534U, 0xf9f1f108U,
1110:../src/wolfcrypt/src/aes.c ****     0xe2717193U, 0xabd8d873U, 0x62313153U, 0x2a15153fU,
1111:../src/wolfcrypt/src/aes.c ****     0x0804040cU, 0x95c7c752U, 0x46232365U, 0x9dc3c35eU,
1112:../src/wolfcrypt/src/aes.c ****     0x30181828U, 0x379696a1U, 0x0a05050fU, 0x2f9a9ab5U,
1113:../src/wolfcrypt/src/aes.c ****     0x0e070709U, 0x24121236U, 0x1b80809bU, 0xdfe2e23dU,
1114:../src/wolfcrypt/src/aes.c ****     0xcdebeb26U, 0x4e272769U, 0x7fb2b2cdU, 0xea75759fU,
1115:../src/wolfcrypt/src/aes.c ****     0x1209091bU, 0x1d83839eU, 0x582c2c74U, 0x341a1a2eU,
1116:../src/wolfcrypt/src/aes.c ****     0x361b1b2dU, 0xdc6e6eb2U, 0xb45a5aeeU, 0x5ba0a0fbU,
1117:../src/wolfcrypt/src/aes.c ****     0xa45252f6U, 0x763b3b4dU, 0xb7d6d661U, 0x7db3b3ceU,
1118:../src/wolfcrypt/src/aes.c ****     0x5229297bU, 0xdde3e33eU, 0x5e2f2f71U, 0x13848497U,
1119:../src/wolfcrypt/src/aes.c ****     0xa65353f5U, 0xb9d1d168U, 0x00000000U, 0xc1eded2cU,
1120:../src/wolfcrypt/src/aes.c ****     0x40202060U, 0xe3fcfc1fU, 0x79b1b1c8U, 0xb65b5bedU,
1121:../src/wolfcrypt/src/aes.c ****     0xd46a6abeU, 0x8dcbcb46U, 0x67bebed9U, 0x7239394bU,
1122:../src/wolfcrypt/src/aes.c ****     0x944a4adeU, 0x984c4cd4U, 0xb05858e8U, 0x85cfcf4aU,
1123:../src/wolfcrypt/src/aes.c ****     0xbbd0d06bU, 0xc5efef2aU, 0x4faaaae5U, 0xedfbfb16U,
1124:../src/wolfcrypt/src/aes.c ****     0x864343c5U, 0x9a4d4dd7U, 0x66333355U, 0x11858594U,
1125:../src/wolfcrypt/src/aes.c ****     0x8a4545cfU, 0xe9f9f910U, 0x04020206U, 0xfe7f7f81U,
1126:../src/wolfcrypt/src/aes.c ****     0xa05050f0U, 0x783c3c44U, 0x259f9fbaU, 0x4ba8a8e3U,
1127:../src/wolfcrypt/src/aes.c ****     0xa25151f3U, 0x5da3a3feU, 0x804040c0U, 0x058f8f8aU,
1128:../src/wolfcrypt/src/aes.c ****     0x3f9292adU, 0x219d9dbcU, 0x70383848U, 0xf1f5f504U,
1129:../src/wolfcrypt/src/aes.c ****     0x63bcbcdfU, 0x77b6b6c1U, 0xafdada75U, 0x42212163U,
1130:../src/wolfcrypt/src/aes.c ****     0x20101030U, 0xe5ffff1aU, 0xfdf3f30eU, 0xbfd2d26dU,
1131:../src/wolfcrypt/src/aes.c ****     0x81cdcd4cU, 0x180c0c14U, 0x26131335U, 0xc3ecec2fU,
1132:../src/wolfcrypt/src/aes.c ****     0xbe5f5fe1U, 0x359797a2U, 0x884444ccU, 0x2e171739U,
1133:../src/wolfcrypt/src/aes.c ****     0x93c4c457U, 0x55a7a7f2U, 0xfc7e7e82U, 0x7a3d3d47U,
1134:../src/wolfcrypt/src/aes.c ****     0xc86464acU, 0xba5d5de7U, 0x3219192bU, 0xe6737395U,
1135:../src/wolfcrypt/src/aes.c ****     0xc06060a0U, 0x19818198U, 0x9e4f4fd1U, 0xa3dcdc7fU,
1136:../src/wolfcrypt/src/aes.c ****     0x44222266U, 0x542a2a7eU, 0x3b9090abU, 0x0b888883U,
1137:../src/wolfcrypt/src/aes.c ****     0x8c4646caU, 0xc7eeee29U, 0x6bb8b8d3U, 0x2814143cU,
1138:../src/wolfcrypt/src/aes.c ****     0xa7dede79U, 0xbc5e5ee2U, 0x160b0b1dU, 0xaddbdb76U,
1139:../src/wolfcrypt/src/aes.c ****     0xdbe0e03bU, 0x64323256U, 0x743a3a4eU, 0x140a0a1eU,
1140:../src/wolfcrypt/src/aes.c ****     0x924949dbU, 0x0c06060aU, 0x4824246cU, 0xb85c5ce4U,
1141:../src/wolfcrypt/src/aes.c ****     0x9fc2c25dU, 0xbdd3d36eU, 0x43acacefU, 0xc46262a6U,
1142:../src/wolfcrypt/src/aes.c ****     0x399191a8U, 0x319595a4U, 0xd3e4e437U, 0xf279798bU,
1143:../src/wolfcrypt/src/aes.c ****     0xd5e7e732U, 0x8bc8c843U, 0x6e373759U, 0xda6d6db7U,
1144:../src/wolfcrypt/src/aes.c ****     0x018d8d8cU, 0xb1d5d564U, 0x9c4e4ed2U, 0x49a9a9e0U,
1145:../src/wolfcrypt/src/aes.c ****     0xd86c6cb4U, 0xac5656faU, 0xf3f4f407U, 0xcfeaea25U,
1146:../src/wolfcrypt/src/aes.c ****     0xca6565afU, 0xf47a7a8eU, 0x47aeaee9U, 0x10080818U,
1147:../src/wolfcrypt/src/aes.c ****     0x6fbabad5U, 0xf0787888U, 0x4a25256fU, 0x5c2e2e72U,
1148:../src/wolfcrypt/src/aes.c ****     0x381c1c24U, 0x57a6a6f1U, 0x73b4b4c7U, 0x97c6c651U,
1149:../src/wolfcrypt/src/aes.c ****     0xcbe8e823U, 0xa1dddd7cU, 0xe874749cU, 0x3e1f1f21U,
1150:../src/wolfcrypt/src/aes.c ****     0x964b4bddU, 0x61bdbddcU, 0x0d8b8b86U, 0x0f8a8a85U,
1151:../src/wolfcrypt/src/aes.c ****     0xe0707090U, 0x7c3e3e42U, 0x71b5b5c4U, 0xcc6666aaU,
1152:../src/wolfcrypt/src/aes.c ****     0x904848d8U, 0x06030305U, 0xf7f6f601U, 0x1c0e0e12U,
1153:../src/wolfcrypt/src/aes.c ****     0xc26161a3U, 0x6a35355fU, 0xae5757f9U, 0x69b9b9d0U,
1154:../src/wolfcrypt/src/aes.c ****     0x17868691U, 0x99c1c158U, 0x3a1d1d27U, 0x279e9eb9U,
1155:../src/wolfcrypt/src/aes.c ****     0xd9e1e138U, 0xebf8f813U, 0x2b9898b3U, 0x22111133U,
1156:../src/wolfcrypt/src/aes.c ****     0xd26969bbU, 0xa9d9d970U, 0x078e8e89U, 0x339494a7U,
1157:../src/wolfcrypt/src/aes.c ****     0x2d9b9bb6U, 0x3c1e1e22U, 0x15878792U, 0xc9e9e920U,
1158:../src/wolfcrypt/src/aes.c ****     0x87cece49U, 0xaa5555ffU, 0x50282878U, 0xa5dfdf7aU,
1159:../src/wolfcrypt/src/aes.c ****     0x038c8c8fU, 0x59a1a1f8U, 0x09898980U, 0x1a0d0d17U,
1160:../src/wolfcrypt/src/aes.c ****     0x65bfbfdaU, 0xd7e6e631U, 0x844242c6U, 0xd06868b8U,
1161:../src/wolfcrypt/src/aes.c ****     0x824141c3U, 0x299999b0U, 0x5a2d2d77U, 0x1e0f0f11U,
1162:../src/wolfcrypt/src/aes.c ****     0x7bb0b0cbU, 0xa85454fcU, 0x6dbbbbd6U, 0x2c16163aU,
1163:../src/wolfcrypt/src/aes.c **** },
1164:../src/wolfcrypt/src/aes.c **** {
1165:../src/wolfcrypt/src/aes.c ****     0xa5c66363U, 0x84f87c7cU, 0x99ee7777U, 0x8df67b7bU,
1166:../src/wolfcrypt/src/aes.c ****     0x0dfff2f2U, 0xbdd66b6bU, 0xb1de6f6fU, 0x5491c5c5U,
1167:../src/wolfcrypt/src/aes.c ****     0x50603030U, 0x03020101U, 0xa9ce6767U, 0x7d562b2bU,
1168:../src/wolfcrypt/src/aes.c ****     0x19e7fefeU, 0x62b5d7d7U, 0xe64dababU, 0x9aec7676U,
1169:../src/wolfcrypt/src/aes.c ****     0x458fcacaU, 0x9d1f8282U, 0x4089c9c9U, 0x87fa7d7dU,
1170:../src/wolfcrypt/src/aes.c ****     0x15effafaU, 0xebb25959U, 0xc98e4747U, 0x0bfbf0f0U,
1171:../src/wolfcrypt/src/aes.c ****     0xec41adadU, 0x67b3d4d4U, 0xfd5fa2a2U, 0xea45afafU,
1172:../src/wolfcrypt/src/aes.c ****     0xbf239c9cU, 0xf753a4a4U, 0x96e47272U, 0x5b9bc0c0U,
1173:../src/wolfcrypt/src/aes.c ****     0xc275b7b7U, 0x1ce1fdfdU, 0xae3d9393U, 0x6a4c2626U,
1174:../src/wolfcrypt/src/aes.c ****     0x5a6c3636U, 0x417e3f3fU, 0x02f5f7f7U, 0x4f83ccccU,
1175:../src/wolfcrypt/src/aes.c ****     0x5c683434U, 0xf451a5a5U, 0x34d1e5e5U, 0x08f9f1f1U,
1176:../src/wolfcrypt/src/aes.c ****     0x93e27171U, 0x73abd8d8U, 0x53623131U, 0x3f2a1515U,
1177:../src/wolfcrypt/src/aes.c ****     0x0c080404U, 0x5295c7c7U, 0x65462323U, 0x5e9dc3c3U,
1178:../src/wolfcrypt/src/aes.c ****     0x28301818U, 0xa1379696U, 0x0f0a0505U, 0xb52f9a9aU,
1179:../src/wolfcrypt/src/aes.c ****     0x090e0707U, 0x36241212U, 0x9b1b8080U, 0x3ddfe2e2U,
1180:../src/wolfcrypt/src/aes.c ****     0x26cdebebU, 0x694e2727U, 0xcd7fb2b2U, 0x9fea7575U,
1181:../src/wolfcrypt/src/aes.c ****     0x1b120909U, 0x9e1d8383U, 0x74582c2cU, 0x2e341a1aU,
1182:../src/wolfcrypt/src/aes.c ****     0x2d361b1bU, 0xb2dc6e6eU, 0xeeb45a5aU, 0xfb5ba0a0U,
1183:../src/wolfcrypt/src/aes.c ****     0xf6a45252U, 0x4d763b3bU, 0x61b7d6d6U, 0xce7db3b3U,
1184:../src/wolfcrypt/src/aes.c ****     0x7b522929U, 0x3edde3e3U, 0x715e2f2fU, 0x97138484U,
1185:../src/wolfcrypt/src/aes.c ****     0xf5a65353U, 0x68b9d1d1U, 0x00000000U, 0x2cc1ededU,
1186:../src/wolfcrypt/src/aes.c ****     0x60402020U, 0x1fe3fcfcU, 0xc879b1b1U, 0xedb65b5bU,
1187:../src/wolfcrypt/src/aes.c ****     0xbed46a6aU, 0x468dcbcbU, 0xd967bebeU, 0x4b723939U,
1188:../src/wolfcrypt/src/aes.c ****     0xde944a4aU, 0xd4984c4cU, 0xe8b05858U, 0x4a85cfcfU,
1189:../src/wolfcrypt/src/aes.c ****     0x6bbbd0d0U, 0x2ac5efefU, 0xe54faaaaU, 0x16edfbfbU,
1190:../src/wolfcrypt/src/aes.c ****     0xc5864343U, 0xd79a4d4dU, 0x55663333U, 0x94118585U,
1191:../src/wolfcrypt/src/aes.c ****     0xcf8a4545U, 0x10e9f9f9U, 0x06040202U, 0x81fe7f7fU,
1192:../src/wolfcrypt/src/aes.c ****     0xf0a05050U, 0x44783c3cU, 0xba259f9fU, 0xe34ba8a8U,
1193:../src/wolfcrypt/src/aes.c ****     0xf3a25151U, 0xfe5da3a3U, 0xc0804040U, 0x8a058f8fU,
1194:../src/wolfcrypt/src/aes.c ****     0xad3f9292U, 0xbc219d9dU, 0x48703838U, 0x04f1f5f5U,
1195:../src/wolfcrypt/src/aes.c ****     0xdf63bcbcU, 0xc177b6b6U, 0x75afdadaU, 0x63422121U,
1196:../src/wolfcrypt/src/aes.c ****     0x30201010U, 0x1ae5ffffU, 0x0efdf3f3U, 0x6dbfd2d2U,
1197:../src/wolfcrypt/src/aes.c ****     0x4c81cdcdU, 0x14180c0cU, 0x35261313U, 0x2fc3ececU,
1198:../src/wolfcrypt/src/aes.c ****     0xe1be5f5fU, 0xa2359797U, 0xcc884444U, 0x392e1717U,
1199:../src/wolfcrypt/src/aes.c ****     0x5793c4c4U, 0xf255a7a7U, 0x82fc7e7eU, 0x477a3d3dU,
1200:../src/wolfcrypt/src/aes.c ****     0xacc86464U, 0xe7ba5d5dU, 0x2b321919U, 0x95e67373U,
1201:../src/wolfcrypt/src/aes.c ****     0xa0c06060U, 0x98198181U, 0xd19e4f4fU, 0x7fa3dcdcU,
1202:../src/wolfcrypt/src/aes.c ****     0x66442222U, 0x7e542a2aU, 0xab3b9090U, 0x830b8888U,
1203:../src/wolfcrypt/src/aes.c ****     0xca8c4646U, 0x29c7eeeeU, 0xd36bb8b8U, 0x3c281414U,
1204:../src/wolfcrypt/src/aes.c ****     0x79a7dedeU, 0xe2bc5e5eU, 0x1d160b0bU, 0x76addbdbU,
1205:../src/wolfcrypt/src/aes.c ****     0x3bdbe0e0U, 0x56643232U, 0x4e743a3aU, 0x1e140a0aU,
1206:../src/wolfcrypt/src/aes.c ****     0xdb924949U, 0x0a0c0606U, 0x6c482424U, 0xe4b85c5cU,
1207:../src/wolfcrypt/src/aes.c ****     0x5d9fc2c2U, 0x6ebdd3d3U, 0xef43acacU, 0xa6c46262U,
1208:../src/wolfcrypt/src/aes.c ****     0xa8399191U, 0xa4319595U, 0x37d3e4e4U, 0x8bf27979U,
1209:../src/wolfcrypt/src/aes.c ****     0x32d5e7e7U, 0x438bc8c8U, 0x596e3737U, 0xb7da6d6dU,
1210:../src/wolfcrypt/src/aes.c ****     0x8c018d8dU, 0x64b1d5d5U, 0xd29c4e4eU, 0xe049a9a9U,
1211:../src/wolfcrypt/src/aes.c ****     0xb4d86c6cU, 0xfaac5656U, 0x07f3f4f4U, 0x25cfeaeaU,
1212:../src/wolfcrypt/src/aes.c ****     0xafca6565U, 0x8ef47a7aU, 0xe947aeaeU, 0x18100808U,
1213:../src/wolfcrypt/src/aes.c ****     0xd56fbabaU, 0x88f07878U, 0x6f4a2525U, 0x725c2e2eU,
1214:../src/wolfcrypt/src/aes.c ****     0x24381c1cU, 0xf157a6a6U, 0xc773b4b4U, 0x5197c6c6U,
1215:../src/wolfcrypt/src/aes.c ****     0x23cbe8e8U, 0x7ca1ddddU, 0x9ce87474U, 0x213e1f1fU,
1216:../src/wolfcrypt/src/aes.c ****     0xdd964b4bU, 0xdc61bdbdU, 0x860d8b8bU, 0x850f8a8aU,
1217:../src/wolfcrypt/src/aes.c ****     0x90e07070U, 0x427c3e3eU, 0xc471b5b5U, 0xaacc6666U,
1218:../src/wolfcrypt/src/aes.c ****     0xd8904848U, 0x05060303U, 0x01f7f6f6U, 0x121c0e0eU,
1219:../src/wolfcrypt/src/aes.c ****     0xa3c26161U, 0x5f6a3535U, 0xf9ae5757U, 0xd069b9b9U,
1220:../src/wolfcrypt/src/aes.c ****     0x91178686U, 0x5899c1c1U, 0x273a1d1dU, 0xb9279e9eU,
1221:../src/wolfcrypt/src/aes.c ****     0x38d9e1e1U, 0x13ebf8f8U, 0xb32b9898U, 0x33221111U,
1222:../src/wolfcrypt/src/aes.c ****     0xbbd26969U, 0x70a9d9d9U, 0x89078e8eU, 0xa7339494U,
1223:../src/wolfcrypt/src/aes.c ****     0xb62d9b9bU, 0x223c1e1eU, 0x92158787U, 0x20c9e9e9U,
1224:../src/wolfcrypt/src/aes.c ****     0x4987ceceU, 0xffaa5555U, 0x78502828U, 0x7aa5dfdfU,
1225:../src/wolfcrypt/src/aes.c ****     0x8f038c8cU, 0xf859a1a1U, 0x80098989U, 0x171a0d0dU,
1226:../src/wolfcrypt/src/aes.c ****     0xda65bfbfU, 0x31d7e6e6U, 0xc6844242U, 0xb8d06868U,
1227:../src/wolfcrypt/src/aes.c ****     0xc3824141U, 0xb0299999U, 0x775a2d2dU, 0x111e0f0fU,
1228:../src/wolfcrypt/src/aes.c ****     0xcb7bb0b0U, 0xfca85454U, 0xd66dbbbbU, 0x3a2c1616U,
1229:../src/wolfcrypt/src/aes.c **** },
1230:../src/wolfcrypt/src/aes.c **** {
1231:../src/wolfcrypt/src/aes.c ****     0x63a5c663U, 0x7c84f87cU, 0x7799ee77U, 0x7b8df67bU,
1232:../src/wolfcrypt/src/aes.c ****     0xf20dfff2U, 0x6bbdd66bU, 0x6fb1de6fU, 0xc55491c5U,
1233:../src/wolfcrypt/src/aes.c ****     0x30506030U, 0x01030201U, 0x67a9ce67U, 0x2b7d562bU,
1234:../src/wolfcrypt/src/aes.c ****     0xfe19e7feU, 0xd762b5d7U, 0xabe64dabU, 0x769aec76U,
1235:../src/wolfcrypt/src/aes.c ****     0xca458fcaU, 0x829d1f82U, 0xc94089c9U, 0x7d87fa7dU,
1236:../src/wolfcrypt/src/aes.c ****     0xfa15effaU, 0x59ebb259U, 0x47c98e47U, 0xf00bfbf0U,
1237:../src/wolfcrypt/src/aes.c ****     0xadec41adU, 0xd467b3d4U, 0xa2fd5fa2U, 0xafea45afU,
1238:../src/wolfcrypt/src/aes.c ****     0x9cbf239cU, 0xa4f753a4U, 0x7296e472U, 0xc05b9bc0U,
1239:../src/wolfcrypt/src/aes.c ****     0xb7c275b7U, 0xfd1ce1fdU, 0x93ae3d93U, 0x266a4c26U,
1240:../src/wolfcrypt/src/aes.c ****     0x365a6c36U, 0x3f417e3fU, 0xf702f5f7U, 0xcc4f83ccU,
1241:../src/wolfcrypt/src/aes.c ****     0x345c6834U, 0xa5f451a5U, 0xe534d1e5U, 0xf108f9f1U,
1242:../src/wolfcrypt/src/aes.c ****     0x7193e271U, 0xd873abd8U, 0x31536231U, 0x153f2a15U,
1243:../src/wolfcrypt/src/aes.c ****     0x040c0804U, 0xc75295c7U, 0x23654623U, 0xc35e9dc3U,
1244:../src/wolfcrypt/src/aes.c ****     0x18283018U, 0x96a13796U, 0x050f0a05U, 0x9ab52f9aU,
1245:../src/wolfcrypt/src/aes.c ****     0x07090e07U, 0x12362412U, 0x809b1b80U, 0xe23ddfe2U,
1246:../src/wolfcrypt/src/aes.c ****     0xeb26cdebU, 0x27694e27U, 0xb2cd7fb2U, 0x759fea75U,
1247:../src/wolfcrypt/src/aes.c ****     0x091b1209U, 0x839e1d83U, 0x2c74582cU, 0x1a2e341aU,
1248:../src/wolfcrypt/src/aes.c ****     0x1b2d361bU, 0x6eb2dc6eU, 0x5aeeb45aU, 0xa0fb5ba0U,
1249:../src/wolfcrypt/src/aes.c ****     0x52f6a452U, 0x3b4d763bU, 0xd661b7d6U, 0xb3ce7db3U,
1250:../src/wolfcrypt/src/aes.c ****     0x297b5229U, 0xe33edde3U, 0x2f715e2fU, 0x84971384U,
1251:../src/wolfcrypt/src/aes.c ****     0x53f5a653U, 0xd168b9d1U, 0x00000000U, 0xed2cc1edU,
1252:../src/wolfcrypt/src/aes.c ****     0x20604020U, 0xfc1fe3fcU, 0xb1c879b1U, 0x5bedb65bU,
1253:../src/wolfcrypt/src/aes.c ****     0x6abed46aU, 0xcb468dcbU, 0xbed967beU, 0x394b7239U,
1254:../src/wolfcrypt/src/aes.c ****     0x4ade944aU, 0x4cd4984cU, 0x58e8b058U, 0xcf4a85cfU,
1255:../src/wolfcrypt/src/aes.c ****     0xd06bbbd0U, 0xef2ac5efU, 0xaae54faaU, 0xfb16edfbU,
1256:../src/wolfcrypt/src/aes.c ****     0x43c58643U, 0x4dd79a4dU, 0x33556633U, 0x85941185U,
1257:../src/wolfcrypt/src/aes.c ****     0x45cf8a45U, 0xf910e9f9U, 0x02060402U, 0x7f81fe7fU,
1258:../src/wolfcrypt/src/aes.c ****     0x50f0a050U, 0x3c44783cU, 0x9fba259fU, 0xa8e34ba8U,
1259:../src/wolfcrypt/src/aes.c ****     0x51f3a251U, 0xa3fe5da3U, 0x40c08040U, 0x8f8a058fU,
1260:../src/wolfcrypt/src/aes.c ****     0x92ad3f92U, 0x9dbc219dU, 0x38487038U, 0xf504f1f5U,
1261:../src/wolfcrypt/src/aes.c ****     0xbcdf63bcU, 0xb6c177b6U, 0xda75afdaU, 0x21634221U,
1262:../src/wolfcrypt/src/aes.c ****     0x10302010U, 0xff1ae5ffU, 0xf30efdf3U, 0xd26dbfd2U,
1263:../src/wolfcrypt/src/aes.c ****     0xcd4c81cdU, 0x0c14180cU, 0x13352613U, 0xec2fc3ecU,
1264:../src/wolfcrypt/src/aes.c ****     0x5fe1be5fU, 0x97a23597U, 0x44cc8844U, 0x17392e17U,
1265:../src/wolfcrypt/src/aes.c ****     0xc45793c4U, 0xa7f255a7U, 0x7e82fc7eU, 0x3d477a3dU,
1266:../src/wolfcrypt/src/aes.c ****     0x64acc864U, 0x5de7ba5dU, 0x192b3219U, 0x7395e673U,
1267:../src/wolfcrypt/src/aes.c ****     0x60a0c060U, 0x81981981U, 0x4fd19e4fU, 0xdc7fa3dcU,
1268:../src/wolfcrypt/src/aes.c ****     0x22664422U, 0x2a7e542aU, 0x90ab3b90U, 0x88830b88U,
1269:../src/wolfcrypt/src/aes.c ****     0x46ca8c46U, 0xee29c7eeU, 0xb8d36bb8U, 0x143c2814U,
1270:../src/wolfcrypt/src/aes.c ****     0xde79a7deU, 0x5ee2bc5eU, 0x0b1d160bU, 0xdb76addbU,
1271:../src/wolfcrypt/src/aes.c ****     0xe03bdbe0U, 0x32566432U, 0x3a4e743aU, 0x0a1e140aU,
1272:../src/wolfcrypt/src/aes.c ****     0x49db9249U, 0x060a0c06U, 0x246c4824U, 0x5ce4b85cU,
1273:../src/wolfcrypt/src/aes.c ****     0xc25d9fc2U, 0xd36ebdd3U, 0xacef43acU, 0x62a6c462U,
1274:../src/wolfcrypt/src/aes.c ****     0x91a83991U, 0x95a43195U, 0xe437d3e4U, 0x798bf279U,
1275:../src/wolfcrypt/src/aes.c ****     0xe732d5e7U, 0xc8438bc8U, 0x37596e37U, 0x6db7da6dU,
1276:../src/wolfcrypt/src/aes.c ****     0x8d8c018dU, 0xd564b1d5U, 0x4ed29c4eU, 0xa9e049a9U,
1277:../src/wolfcrypt/src/aes.c ****     0x6cb4d86cU, 0x56faac56U, 0xf407f3f4U, 0xea25cfeaU,
1278:../src/wolfcrypt/src/aes.c ****     0x65afca65U, 0x7a8ef47aU, 0xaee947aeU, 0x08181008U,
1279:../src/wolfcrypt/src/aes.c ****     0xbad56fbaU, 0x7888f078U, 0x256f4a25U, 0x2e725c2eU,
1280:../src/wolfcrypt/src/aes.c ****     0x1c24381cU, 0xa6f157a6U, 0xb4c773b4U, 0xc65197c6U,
1281:../src/wolfcrypt/src/aes.c ****     0xe823cbe8U, 0xdd7ca1ddU, 0x749ce874U, 0x1f213e1fU,
1282:../src/wolfcrypt/src/aes.c ****     0x4bdd964bU, 0xbddc61bdU, 0x8b860d8bU, 0x8a850f8aU,
1283:../src/wolfcrypt/src/aes.c ****     0x7090e070U, 0x3e427c3eU, 0xb5c471b5U, 0x66aacc66U,
1284:../src/wolfcrypt/src/aes.c ****     0x48d89048U, 0x03050603U, 0xf601f7f6U, 0x0e121c0eU,
1285:../src/wolfcrypt/src/aes.c ****     0x61a3c261U, 0x355f6a35U, 0x57f9ae57U, 0xb9d069b9U,
1286:../src/wolfcrypt/src/aes.c ****     0x86911786U, 0xc15899c1U, 0x1d273a1dU, 0x9eb9279eU,
1287:../src/wolfcrypt/src/aes.c ****     0xe138d9e1U, 0xf813ebf8U, 0x98b32b98U, 0x11332211U,
1288:../src/wolfcrypt/src/aes.c ****     0x69bbd269U, 0xd970a9d9U, 0x8e89078eU, 0x94a73394U,
1289:../src/wolfcrypt/src/aes.c ****     0x9bb62d9bU, 0x1e223c1eU, 0x87921587U, 0xe920c9e9U,
1290:../src/wolfcrypt/src/aes.c ****     0xce4987ceU, 0x55ffaa55U, 0x28785028U, 0xdf7aa5dfU,
1291:../src/wolfcrypt/src/aes.c ****     0x8c8f038cU, 0xa1f859a1U, 0x89800989U, 0x0d171a0dU,
1292:../src/wolfcrypt/src/aes.c ****     0xbfda65bfU, 0xe631d7e6U, 0x42c68442U, 0x68b8d068U,
1293:../src/wolfcrypt/src/aes.c ****     0x41c38241U, 0x99b02999U, 0x2d775a2dU, 0x0f111e0fU,
1294:../src/wolfcrypt/src/aes.c ****     0xb0cb7bb0U, 0x54fca854U, 0xbbd66dbbU, 0x163a2c16U,
1295:../src/wolfcrypt/src/aes.c **** },
1296:../src/wolfcrypt/src/aes.c **** {
1297:../src/wolfcrypt/src/aes.c ****     0x6363a5c6U, 0x7c7c84f8U, 0x777799eeU, 0x7b7b8df6U,
1298:../src/wolfcrypt/src/aes.c ****     0xf2f20dffU, 0x6b6bbdd6U, 0x6f6fb1deU, 0xc5c55491U,
1299:../src/wolfcrypt/src/aes.c ****     0x30305060U, 0x01010302U, 0x6767a9ceU, 0x2b2b7d56U,
1300:../src/wolfcrypt/src/aes.c ****     0xfefe19e7U, 0xd7d762b5U, 0xababe64dU, 0x76769aecU,
1301:../src/wolfcrypt/src/aes.c ****     0xcaca458fU, 0x82829d1fU, 0xc9c94089U, 0x7d7d87faU,
1302:../src/wolfcrypt/src/aes.c ****     0xfafa15efU, 0x5959ebb2U, 0x4747c98eU, 0xf0f00bfbU,
1303:../src/wolfcrypt/src/aes.c ****     0xadadec41U, 0xd4d467b3U, 0xa2a2fd5fU, 0xafafea45U,
1304:../src/wolfcrypt/src/aes.c ****     0x9c9cbf23U, 0xa4a4f753U, 0x727296e4U, 0xc0c05b9bU,
1305:../src/wolfcrypt/src/aes.c ****     0xb7b7c275U, 0xfdfd1ce1U, 0x9393ae3dU, 0x26266a4cU,
1306:../src/wolfcrypt/src/aes.c ****     0x36365a6cU, 0x3f3f417eU, 0xf7f702f5U, 0xcccc4f83U,
1307:../src/wolfcrypt/src/aes.c ****     0x34345c68U, 0xa5a5f451U, 0xe5e534d1U, 0xf1f108f9U,
1308:../src/wolfcrypt/src/aes.c ****     0x717193e2U, 0xd8d873abU, 0x31315362U, 0x15153f2aU,
1309:../src/wolfcrypt/src/aes.c ****     0x04040c08U, 0xc7c75295U, 0x23236546U, 0xc3c35e9dU,
1310:../src/wolfcrypt/src/aes.c ****     0x18182830U, 0x9696a137U, 0x05050f0aU, 0x9a9ab52fU,
1311:../src/wolfcrypt/src/aes.c ****     0x0707090eU, 0x12123624U, 0x80809b1bU, 0xe2e23ddfU,
1312:../src/wolfcrypt/src/aes.c ****     0xebeb26cdU, 0x2727694eU, 0xb2b2cd7fU, 0x75759feaU,
1313:../src/wolfcrypt/src/aes.c ****     0x09091b12U, 0x83839e1dU, 0x2c2c7458U, 0x1a1a2e34U,
1314:../src/wolfcrypt/src/aes.c ****     0x1b1b2d36U, 0x6e6eb2dcU, 0x5a5aeeb4U, 0xa0a0fb5bU,
1315:../src/wolfcrypt/src/aes.c ****     0x5252f6a4U, 0x3b3b4d76U, 0xd6d661b7U, 0xb3b3ce7dU,
1316:../src/wolfcrypt/src/aes.c ****     0x29297b52U, 0xe3e33eddU, 0x2f2f715eU, 0x84849713U,
1317:../src/wolfcrypt/src/aes.c ****     0x5353f5a6U, 0xd1d168b9U, 0x00000000U, 0xeded2cc1U,
1318:../src/wolfcrypt/src/aes.c ****     0x20206040U, 0xfcfc1fe3U, 0xb1b1c879U, 0x5b5bedb6U,
1319:../src/wolfcrypt/src/aes.c ****     0x6a6abed4U, 0xcbcb468dU, 0xbebed967U, 0x39394b72U,
1320:../src/wolfcrypt/src/aes.c ****     0x4a4ade94U, 0x4c4cd498U, 0x5858e8b0U, 0xcfcf4a85U,
1321:../src/wolfcrypt/src/aes.c ****     0xd0d06bbbU, 0xefef2ac5U, 0xaaaae54fU, 0xfbfb16edU,
1322:../src/wolfcrypt/src/aes.c ****     0x4343c586U, 0x4d4dd79aU, 0x33335566U, 0x85859411U,
1323:../src/wolfcrypt/src/aes.c ****     0x4545cf8aU, 0xf9f910e9U, 0x02020604U, 0x7f7f81feU,
1324:../src/wolfcrypt/src/aes.c ****     0x5050f0a0U, 0x3c3c4478U, 0x9f9fba25U, 0xa8a8e34bU,
1325:../src/wolfcrypt/src/aes.c ****     0x5151f3a2U, 0xa3a3fe5dU, 0x4040c080U, 0x8f8f8a05U,
1326:../src/wolfcrypt/src/aes.c ****     0x9292ad3fU, 0x9d9dbc21U, 0x38384870U, 0xf5f504f1U,
1327:../src/wolfcrypt/src/aes.c ****     0xbcbcdf63U, 0xb6b6c177U, 0xdada75afU, 0x21216342U,
1328:../src/wolfcrypt/src/aes.c ****     0x10103020U, 0xffff1ae5U, 0xf3f30efdU, 0xd2d26dbfU,
1329:../src/wolfcrypt/src/aes.c ****     0xcdcd4c81U, 0x0c0c1418U, 0x13133526U, 0xecec2fc3U,
1330:../src/wolfcrypt/src/aes.c ****     0x5f5fe1beU, 0x9797a235U, 0x4444cc88U, 0x1717392eU,
1331:../src/wolfcrypt/src/aes.c ****     0xc4c45793U, 0xa7a7f255U, 0x7e7e82fcU, 0x3d3d477aU,
1332:../src/wolfcrypt/src/aes.c ****     0x6464acc8U, 0x5d5de7baU, 0x19192b32U, 0x737395e6U,
1333:../src/wolfcrypt/src/aes.c ****     0x6060a0c0U, 0x81819819U, 0x4f4fd19eU, 0xdcdc7fa3U,
1334:../src/wolfcrypt/src/aes.c ****     0x22226644U, 0x2a2a7e54U, 0x9090ab3bU, 0x8888830bU,
1335:../src/wolfcrypt/src/aes.c ****     0x4646ca8cU, 0xeeee29c7U, 0xb8b8d36bU, 0x14143c28U,
1336:../src/wolfcrypt/src/aes.c ****     0xdede79a7U, 0x5e5ee2bcU, 0x0b0b1d16U, 0xdbdb76adU,
1337:../src/wolfcrypt/src/aes.c ****     0xe0e03bdbU, 0x32325664U, 0x3a3a4e74U, 0x0a0a1e14U,
1338:../src/wolfcrypt/src/aes.c ****     0x4949db92U, 0x06060a0cU, 0x24246c48U, 0x5c5ce4b8U,
1339:../src/wolfcrypt/src/aes.c ****     0xc2c25d9fU, 0xd3d36ebdU, 0xacacef43U, 0x6262a6c4U,
1340:../src/wolfcrypt/src/aes.c ****     0x9191a839U, 0x9595a431U, 0xe4e437d3U, 0x79798bf2U,
1341:../src/wolfcrypt/src/aes.c ****     0xe7e732d5U, 0xc8c8438bU, 0x3737596eU, 0x6d6db7daU,
1342:../src/wolfcrypt/src/aes.c ****     0x8d8d8c01U, 0xd5d564b1U, 0x4e4ed29cU, 0xa9a9e049U,
1343:../src/wolfcrypt/src/aes.c ****     0x6c6cb4d8U, 0x5656faacU, 0xf4f407f3U, 0xeaea25cfU,
1344:../src/wolfcrypt/src/aes.c ****     0x6565afcaU, 0x7a7a8ef4U, 0xaeaee947U, 0x08081810U,
1345:../src/wolfcrypt/src/aes.c ****     0xbabad56fU, 0x787888f0U, 0x25256f4aU, 0x2e2e725cU,
1346:../src/wolfcrypt/src/aes.c ****     0x1c1c2438U, 0xa6a6f157U, 0xb4b4c773U, 0xc6c65197U,
1347:../src/wolfcrypt/src/aes.c ****     0xe8e823cbU, 0xdddd7ca1U, 0x74749ce8U, 0x1f1f213eU,
1348:../src/wolfcrypt/src/aes.c ****     0x4b4bdd96U, 0xbdbddc61U, 0x8b8b860dU, 0x8a8a850fU,
1349:../src/wolfcrypt/src/aes.c ****     0x707090e0U, 0x3e3e427cU, 0xb5b5c471U, 0x6666aaccU,
1350:../src/wolfcrypt/src/aes.c ****     0x4848d890U, 0x03030506U, 0xf6f601f7U, 0x0e0e121cU,
1351:../src/wolfcrypt/src/aes.c ****     0x6161a3c2U, 0x35355f6aU, 0x5757f9aeU, 0xb9b9d069U,
1352:../src/wolfcrypt/src/aes.c ****     0x86869117U, 0xc1c15899U, 0x1d1d273aU, 0x9e9eb927U,
1353:../src/wolfcrypt/src/aes.c ****     0xe1e138d9U, 0xf8f813ebU, 0x9898b32bU, 0x11113322U,
1354:../src/wolfcrypt/src/aes.c ****     0x6969bbd2U, 0xd9d970a9U, 0x8e8e8907U, 0x9494a733U,
1355:../src/wolfcrypt/src/aes.c ****     0x9b9bb62dU, 0x1e1e223cU, 0x87879215U, 0xe9e920c9U,
1356:../src/wolfcrypt/src/aes.c ****     0xcece4987U, 0x5555ffaaU, 0x28287850U, 0xdfdf7aa5U,
1357:../src/wolfcrypt/src/aes.c ****     0x8c8c8f03U, 0xa1a1f859U, 0x89898009U, 0x0d0d171aU,
1358:../src/wolfcrypt/src/aes.c ****     0xbfbfda65U, 0xe6e631d7U, 0x4242c684U, 0x6868b8d0U,
1359:../src/wolfcrypt/src/aes.c ****     0x4141c382U, 0x9999b029U, 0x2d2d775aU, 0x0f0f111eU,
1360:../src/wolfcrypt/src/aes.c ****     0xb0b0cb7bU, 0x5454fca8U, 0xbbbbd66dU, 0x16163a2cU,
1361:../src/wolfcrypt/src/aes.c **** }
1362:../src/wolfcrypt/src/aes.c **** };
1363:../src/wolfcrypt/src/aes.c **** 
1364:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AES_DECRYPT
1365:../src/wolfcrypt/src/aes.c **** static const FLASH_QUALIFIER word32 Td[4][256] = {
1366:../src/wolfcrypt/src/aes.c **** {
1367:../src/wolfcrypt/src/aes.c ****     0x51f4a750U, 0x7e416553U, 0x1a17a4c3U, 0x3a275e96U,
1368:../src/wolfcrypt/src/aes.c ****     0x3bab6bcbU, 0x1f9d45f1U, 0xacfa58abU, 0x4be30393U,
1369:../src/wolfcrypt/src/aes.c ****     0x2030fa55U, 0xad766df6U, 0x88cc7691U, 0xf5024c25U,
1370:../src/wolfcrypt/src/aes.c ****     0x4fe5d7fcU, 0xc52acbd7U, 0x26354480U, 0xb562a38fU,
1371:../src/wolfcrypt/src/aes.c ****     0xdeb15a49U, 0x25ba1b67U, 0x45ea0e98U, 0x5dfec0e1U,
1372:../src/wolfcrypt/src/aes.c ****     0xc32f7502U, 0x814cf012U, 0x8d4697a3U, 0x6bd3f9c6U,
1373:../src/wolfcrypt/src/aes.c ****     0x038f5fe7U, 0x15929c95U, 0xbf6d7aebU, 0x955259daU,
1374:../src/wolfcrypt/src/aes.c ****     0xd4be832dU, 0x587421d3U, 0x49e06929U, 0x8ec9c844U,
1375:../src/wolfcrypt/src/aes.c ****     0x75c2896aU, 0xf48e7978U, 0x99583e6bU, 0x27b971ddU,
1376:../src/wolfcrypt/src/aes.c ****     0xbee14fb6U, 0xf088ad17U, 0xc920ac66U, 0x7dce3ab4U,
1377:../src/wolfcrypt/src/aes.c ****     0x63df4a18U, 0xe51a3182U, 0x97513360U, 0x62537f45U,
1378:../src/wolfcrypt/src/aes.c ****     0xb16477e0U, 0xbb6bae84U, 0xfe81a01cU, 0xf9082b94U,
1379:../src/wolfcrypt/src/aes.c ****     0x70486858U, 0x8f45fd19U, 0x94de6c87U, 0x527bf8b7U,
1380:../src/wolfcrypt/src/aes.c ****     0xab73d323U, 0x724b02e2U, 0xe31f8f57U, 0x6655ab2aU,
1381:../src/wolfcrypt/src/aes.c ****     0xb2eb2807U, 0x2fb5c203U, 0x86c57b9aU, 0xd33708a5U,
1382:../src/wolfcrypt/src/aes.c ****     0x302887f2U, 0x23bfa5b2U, 0x02036abaU, 0xed16825cU,
1383:../src/wolfcrypt/src/aes.c ****     0x8acf1c2bU, 0xa779b492U, 0xf307f2f0U, 0x4e69e2a1U,
1384:../src/wolfcrypt/src/aes.c ****     0x65daf4cdU, 0x0605bed5U, 0xd134621fU, 0xc4a6fe8aU,
1385:../src/wolfcrypt/src/aes.c ****     0x342e539dU, 0xa2f355a0U, 0x058ae132U, 0xa4f6eb75U,
1386:../src/wolfcrypt/src/aes.c ****     0x0b83ec39U, 0x4060efaaU, 0x5e719f06U, 0xbd6e1051U,
1387:../src/wolfcrypt/src/aes.c ****     0x3e218af9U, 0x96dd063dU, 0xdd3e05aeU, 0x4de6bd46U,
1388:../src/wolfcrypt/src/aes.c ****     0x91548db5U, 0x71c45d05U, 0x0406d46fU, 0x605015ffU,
1389:../src/wolfcrypt/src/aes.c ****     0x1998fb24U, 0xd6bde997U, 0x894043ccU, 0x67d99e77U,
1390:../src/wolfcrypt/src/aes.c ****     0xb0e842bdU, 0x07898b88U, 0xe7195b38U, 0x79c8eedbU,
1391:../src/wolfcrypt/src/aes.c ****     0xa17c0a47U, 0x7c420fe9U, 0xf8841ec9U, 0x00000000U,
1392:../src/wolfcrypt/src/aes.c ****     0x09808683U, 0x322bed48U, 0x1e1170acU, 0x6c5a724eU,
1393:../src/wolfcrypt/src/aes.c ****     0xfd0efffbU, 0x0f853856U, 0x3daed51eU, 0x362d3927U,
1394:../src/wolfcrypt/src/aes.c ****     0x0a0fd964U, 0x685ca621U, 0x9b5b54d1U, 0x24362e3aU,
1395:../src/wolfcrypt/src/aes.c ****     0x0c0a67b1U, 0x9357e70fU, 0xb4ee96d2U, 0x1b9b919eU,
1396:../src/wolfcrypt/src/aes.c ****     0x80c0c54fU, 0x61dc20a2U, 0x5a774b69U, 0x1c121a16U,
1397:../src/wolfcrypt/src/aes.c ****     0xe293ba0aU, 0xc0a02ae5U, 0x3c22e043U, 0x121b171dU,
1398:../src/wolfcrypt/src/aes.c ****     0x0e090d0bU, 0xf28bc7adU, 0x2db6a8b9U, 0x141ea9c8U,
1399:../src/wolfcrypt/src/aes.c ****     0x57f11985U, 0xaf75074cU, 0xee99ddbbU, 0xa37f60fdU,
1400:../src/wolfcrypt/src/aes.c ****     0xf701269fU, 0x5c72f5bcU, 0x44663bc5U, 0x5bfb7e34U,
1401:../src/wolfcrypt/src/aes.c ****     0x8b432976U, 0xcb23c6dcU, 0xb6edfc68U, 0xb8e4f163U,
1402:../src/wolfcrypt/src/aes.c ****     0xd731dccaU, 0x42638510U, 0x13972240U, 0x84c61120U,
1403:../src/wolfcrypt/src/aes.c ****     0x854a247dU, 0xd2bb3df8U, 0xaef93211U, 0xc729a16dU,
1404:../src/wolfcrypt/src/aes.c ****     0x1d9e2f4bU, 0xdcb230f3U, 0x0d8652ecU, 0x77c1e3d0U,
1405:../src/wolfcrypt/src/aes.c ****     0x2bb3166cU, 0xa970b999U, 0x119448faU, 0x47e96422U,
1406:../src/wolfcrypt/src/aes.c ****     0xa8fc8cc4U, 0xa0f03f1aU, 0x567d2cd8U, 0x223390efU,
1407:../src/wolfcrypt/src/aes.c ****     0x87494ec7U, 0xd938d1c1U, 0x8ccaa2feU, 0x98d40b36U,
1408:../src/wolfcrypt/src/aes.c ****     0xa6f581cfU, 0xa57ade28U, 0xdab78e26U, 0x3fadbfa4U,
1409:../src/wolfcrypt/src/aes.c ****     0x2c3a9de4U, 0x5078920dU, 0x6a5fcc9bU, 0x547e4662U,
1410:../src/wolfcrypt/src/aes.c ****     0xf68d13c2U, 0x90d8b8e8U, 0x2e39f75eU, 0x82c3aff5U,
1411:../src/wolfcrypt/src/aes.c ****     0x9f5d80beU, 0x69d0937cU, 0x6fd52da9U, 0xcf2512b3U,
1412:../src/wolfcrypt/src/aes.c ****     0xc8ac993bU, 0x10187da7U, 0xe89c636eU, 0xdb3bbb7bU,
1413:../src/wolfcrypt/src/aes.c ****     0xcd267809U, 0x6e5918f4U, 0xec9ab701U, 0x834f9aa8U,
1414:../src/wolfcrypt/src/aes.c ****     0xe6956e65U, 0xaaffe67eU, 0x21bccf08U, 0xef15e8e6U,
1415:../src/wolfcrypt/src/aes.c ****     0xbae79bd9U, 0x4a6f36ceU, 0xea9f09d4U, 0x29b07cd6U,
1416:../src/wolfcrypt/src/aes.c ****     0x31a4b2afU, 0x2a3f2331U, 0xc6a59430U, 0x35a266c0U,
1417:../src/wolfcrypt/src/aes.c ****     0x744ebc37U, 0xfc82caa6U, 0xe090d0b0U, 0x33a7d815U,
1418:../src/wolfcrypt/src/aes.c ****     0xf104984aU, 0x41ecdaf7U, 0x7fcd500eU, 0x1791f62fU,
1419:../src/wolfcrypt/src/aes.c ****     0x764dd68dU, 0x43efb04dU, 0xccaa4d54U, 0xe49604dfU,
1420:../src/wolfcrypt/src/aes.c ****     0x9ed1b5e3U, 0x4c6a881bU, 0xc12c1fb8U, 0x4665517fU,
1421:../src/wolfcrypt/src/aes.c ****     0x9d5eea04U, 0x018c355dU, 0xfa877473U, 0xfb0b412eU,
1422:../src/wolfcrypt/src/aes.c ****     0xb3671d5aU, 0x92dbd252U, 0xe9105633U, 0x6dd64713U,
1423:../src/wolfcrypt/src/aes.c ****     0x9ad7618cU, 0x37a10c7aU, 0x59f8148eU, 0xeb133c89U,
1424:../src/wolfcrypt/src/aes.c ****     0xcea927eeU, 0xb761c935U, 0xe11ce5edU, 0x7a47b13cU,
1425:../src/wolfcrypt/src/aes.c ****     0x9cd2df59U, 0x55f2733fU, 0x1814ce79U, 0x73c737bfU,
1426:../src/wolfcrypt/src/aes.c ****     0x53f7cdeaU, 0x5ffdaa5bU, 0xdf3d6f14U, 0x7844db86U,
1427:../src/wolfcrypt/src/aes.c ****     0xcaaff381U, 0xb968c43eU, 0x3824342cU, 0xc2a3405fU,
1428:../src/wolfcrypt/src/aes.c ****     0x161dc372U, 0xbce2250cU, 0x283c498bU, 0xff0d9541U,
1429:../src/wolfcrypt/src/aes.c ****     0x39a80171U, 0x080cb3deU, 0xd8b4e49cU, 0x6456c190U,
1430:../src/wolfcrypt/src/aes.c ****     0x7bcb8461U, 0xd532b670U, 0x486c5c74U, 0xd0b85742U,
1431:../src/wolfcrypt/src/aes.c **** },
1432:../src/wolfcrypt/src/aes.c **** {
1433:../src/wolfcrypt/src/aes.c ****     0x5051f4a7U, 0x537e4165U, 0xc31a17a4U, 0x963a275eU,
1434:../src/wolfcrypt/src/aes.c ****     0xcb3bab6bU, 0xf11f9d45U, 0xabacfa58U, 0x934be303U,
1435:../src/wolfcrypt/src/aes.c ****     0x552030faU, 0xf6ad766dU, 0x9188cc76U, 0x25f5024cU,
1436:../src/wolfcrypt/src/aes.c ****     0xfc4fe5d7U, 0xd7c52acbU, 0x80263544U, 0x8fb562a3U,
1437:../src/wolfcrypt/src/aes.c ****     0x49deb15aU, 0x6725ba1bU, 0x9845ea0eU, 0xe15dfec0U,
1438:../src/wolfcrypt/src/aes.c ****     0x02c32f75U, 0x12814cf0U, 0xa38d4697U, 0xc66bd3f9U,
1439:../src/wolfcrypt/src/aes.c ****     0xe7038f5fU, 0x9515929cU, 0xebbf6d7aU, 0xda955259U,
1440:../src/wolfcrypt/src/aes.c ****     0x2dd4be83U, 0xd3587421U, 0x2949e069U, 0x448ec9c8U,
1441:../src/wolfcrypt/src/aes.c ****     0x6a75c289U, 0x78f48e79U, 0x6b99583eU, 0xdd27b971U,
1442:../src/wolfcrypt/src/aes.c ****     0xb6bee14fU, 0x17f088adU, 0x66c920acU, 0xb47dce3aU,
1443:../src/wolfcrypt/src/aes.c ****     0x1863df4aU, 0x82e51a31U, 0x60975133U, 0x4562537fU,
1444:../src/wolfcrypt/src/aes.c ****     0xe0b16477U, 0x84bb6baeU, 0x1cfe81a0U, 0x94f9082bU,
1445:../src/wolfcrypt/src/aes.c ****     0x58704868U, 0x198f45fdU, 0x8794de6cU, 0xb7527bf8U,
1446:../src/wolfcrypt/src/aes.c ****     0x23ab73d3U, 0xe2724b02U, 0x57e31f8fU, 0x2a6655abU,
1447:../src/wolfcrypt/src/aes.c ****     0x07b2eb28U, 0x032fb5c2U, 0x9a86c57bU, 0xa5d33708U,
1448:../src/wolfcrypt/src/aes.c ****     0xf2302887U, 0xb223bfa5U, 0xba02036aU, 0x5ced1682U,
1449:../src/wolfcrypt/src/aes.c ****     0x2b8acf1cU, 0x92a779b4U, 0xf0f307f2U, 0xa14e69e2U,
1450:../src/wolfcrypt/src/aes.c ****     0xcd65daf4U, 0xd50605beU, 0x1fd13462U, 0x8ac4a6feU,
1451:../src/wolfcrypt/src/aes.c ****     0x9d342e53U, 0xa0a2f355U, 0x32058ae1U, 0x75a4f6ebU,
1452:../src/wolfcrypt/src/aes.c ****     0x390b83ecU, 0xaa4060efU, 0x065e719fU, 0x51bd6e10U,
1453:../src/wolfcrypt/src/aes.c ****     0xf93e218aU, 0x3d96dd06U, 0xaedd3e05U, 0x464de6bdU,
1454:../src/wolfcrypt/src/aes.c ****     0xb591548dU, 0x0571c45dU, 0x6f0406d4U, 0xff605015U,
1455:../src/wolfcrypt/src/aes.c ****     0x241998fbU, 0x97d6bde9U, 0xcc894043U, 0x7767d99eU,
1456:../src/wolfcrypt/src/aes.c ****     0xbdb0e842U, 0x8807898bU, 0x38e7195bU, 0xdb79c8eeU,
1457:../src/wolfcrypt/src/aes.c ****     0x47a17c0aU, 0xe97c420fU, 0xc9f8841eU, 0x00000000U,
1458:../src/wolfcrypt/src/aes.c ****     0x83098086U, 0x48322bedU, 0xac1e1170U, 0x4e6c5a72U,
1459:../src/wolfcrypt/src/aes.c ****     0xfbfd0effU, 0x560f8538U, 0x1e3daed5U, 0x27362d39U,
1460:../src/wolfcrypt/src/aes.c ****     0x640a0fd9U, 0x21685ca6U, 0xd19b5b54U, 0x3a24362eU,
1461:../src/wolfcrypt/src/aes.c ****     0xb10c0a67U, 0x0f9357e7U, 0xd2b4ee96U, 0x9e1b9b91U,
1462:../src/wolfcrypt/src/aes.c ****     0x4f80c0c5U, 0xa261dc20U, 0x695a774bU, 0x161c121aU,
1463:../src/wolfcrypt/src/aes.c ****     0x0ae293baU, 0xe5c0a02aU, 0x433c22e0U, 0x1d121b17U,
1464:../src/wolfcrypt/src/aes.c ****     0x0b0e090dU, 0xadf28bc7U, 0xb92db6a8U, 0xc8141ea9U,
1465:../src/wolfcrypt/src/aes.c ****     0x8557f119U, 0x4caf7507U, 0xbbee99ddU, 0xfda37f60U,
1466:../src/wolfcrypt/src/aes.c ****     0x9ff70126U, 0xbc5c72f5U, 0xc544663bU, 0x345bfb7eU,
1467:../src/wolfcrypt/src/aes.c ****     0x768b4329U, 0xdccb23c6U, 0x68b6edfcU, 0x63b8e4f1U,
1468:../src/wolfcrypt/src/aes.c ****     0xcad731dcU, 0x10426385U, 0x40139722U, 0x2084c611U,
1469:../src/wolfcrypt/src/aes.c ****     0x7d854a24U, 0xf8d2bb3dU, 0x11aef932U, 0x6dc729a1U,
1470:../src/wolfcrypt/src/aes.c ****     0x4b1d9e2fU, 0xf3dcb230U, 0xec0d8652U, 0xd077c1e3U,
1471:../src/wolfcrypt/src/aes.c ****     0x6c2bb316U, 0x99a970b9U, 0xfa119448U, 0x2247e964U,
1472:../src/wolfcrypt/src/aes.c ****     0xc4a8fc8cU, 0x1aa0f03fU, 0xd8567d2cU, 0xef223390U,
1473:../src/wolfcrypt/src/aes.c ****     0xc787494eU, 0xc1d938d1U, 0xfe8ccaa2U, 0x3698d40bU,
1474:../src/wolfcrypt/src/aes.c ****     0xcfa6f581U, 0x28a57adeU, 0x26dab78eU, 0xa43fadbfU,
1475:../src/wolfcrypt/src/aes.c ****     0xe42c3a9dU, 0x0d507892U, 0x9b6a5fccU, 0x62547e46U,
1476:../src/wolfcrypt/src/aes.c ****     0xc2f68d13U, 0xe890d8b8U, 0x5e2e39f7U, 0xf582c3afU,
1477:../src/wolfcrypt/src/aes.c ****     0xbe9f5d80U, 0x7c69d093U, 0xa96fd52dU, 0xb3cf2512U,
1478:../src/wolfcrypt/src/aes.c ****     0x3bc8ac99U, 0xa710187dU, 0x6ee89c63U, 0x7bdb3bbbU,
1479:../src/wolfcrypt/src/aes.c ****     0x09cd2678U, 0xf46e5918U, 0x01ec9ab7U, 0xa8834f9aU,
1480:../src/wolfcrypt/src/aes.c ****     0x65e6956eU, 0x7eaaffe6U, 0x0821bccfU, 0xe6ef15e8U,
1481:../src/wolfcrypt/src/aes.c ****     0xd9bae79bU, 0xce4a6f36U, 0xd4ea9f09U, 0xd629b07cU,
1482:../src/wolfcrypt/src/aes.c ****     0xaf31a4b2U, 0x312a3f23U, 0x30c6a594U, 0xc035a266U,
1483:../src/wolfcrypt/src/aes.c ****     0x37744ebcU, 0xa6fc82caU, 0xb0e090d0U, 0x1533a7d8U,
1484:../src/wolfcrypt/src/aes.c ****     0x4af10498U, 0xf741ecdaU, 0x0e7fcd50U, 0x2f1791f6U,
1485:../src/wolfcrypt/src/aes.c ****     0x8d764dd6U, 0x4d43efb0U, 0x54ccaa4dU, 0xdfe49604U,
1486:../src/wolfcrypt/src/aes.c ****     0xe39ed1b5U, 0x1b4c6a88U, 0xb8c12c1fU, 0x7f466551U,
1487:../src/wolfcrypt/src/aes.c ****     0x049d5eeaU, 0x5d018c35U, 0x73fa8774U, 0x2efb0b41U,
1488:../src/wolfcrypt/src/aes.c ****     0x5ab3671dU, 0x5292dbd2U, 0x33e91056U, 0x136dd647U,
1489:../src/wolfcrypt/src/aes.c ****     0x8c9ad761U, 0x7a37a10cU, 0x8e59f814U, 0x89eb133cU,
1490:../src/wolfcrypt/src/aes.c ****     0xeecea927U, 0x35b761c9U, 0xede11ce5U, 0x3c7a47b1U,
1491:../src/wolfcrypt/src/aes.c ****     0x599cd2dfU, 0x3f55f273U, 0x791814ceU, 0xbf73c737U,
1492:../src/wolfcrypt/src/aes.c ****     0xea53f7cdU, 0x5b5ffdaaU, 0x14df3d6fU, 0x867844dbU,
1493:../src/wolfcrypt/src/aes.c ****     0x81caaff3U, 0x3eb968c4U, 0x2c382434U, 0x5fc2a340U,
1494:../src/wolfcrypt/src/aes.c ****     0x72161dc3U, 0x0cbce225U, 0x8b283c49U, 0x41ff0d95U,
1495:../src/wolfcrypt/src/aes.c ****     0x7139a801U, 0xde080cb3U, 0x9cd8b4e4U, 0x906456c1U,
1496:../src/wolfcrypt/src/aes.c ****     0x617bcb84U, 0x70d532b6U, 0x74486c5cU, 0x42d0b857U,
1497:../src/wolfcrypt/src/aes.c **** },
1498:../src/wolfcrypt/src/aes.c **** {
1499:../src/wolfcrypt/src/aes.c ****     0xa75051f4U, 0x65537e41U, 0xa4c31a17U, 0x5e963a27U,
1500:../src/wolfcrypt/src/aes.c ****     0x6bcb3babU, 0x45f11f9dU, 0x58abacfaU, 0x03934be3U,
1501:../src/wolfcrypt/src/aes.c ****     0xfa552030U, 0x6df6ad76U, 0x769188ccU, 0x4c25f502U,
1502:../src/wolfcrypt/src/aes.c ****     0xd7fc4fe5U, 0xcbd7c52aU, 0x44802635U, 0xa38fb562U,
1503:../src/wolfcrypt/src/aes.c ****     0x5a49deb1U, 0x1b6725baU, 0x0e9845eaU, 0xc0e15dfeU,
1504:../src/wolfcrypt/src/aes.c ****     0x7502c32fU, 0xf012814cU, 0x97a38d46U, 0xf9c66bd3U,
1505:../src/wolfcrypt/src/aes.c ****     0x5fe7038fU, 0x9c951592U, 0x7aebbf6dU, 0x59da9552U,
1506:../src/wolfcrypt/src/aes.c ****     0x832dd4beU, 0x21d35874U, 0x692949e0U, 0xc8448ec9U,
1507:../src/wolfcrypt/src/aes.c ****     0x896a75c2U, 0x7978f48eU, 0x3e6b9958U, 0x71dd27b9U,
1508:../src/wolfcrypt/src/aes.c ****     0x4fb6bee1U, 0xad17f088U, 0xac66c920U, 0x3ab47dceU,
1509:../src/wolfcrypt/src/aes.c ****     0x4a1863dfU, 0x3182e51aU, 0x33609751U, 0x7f456253U,
1510:../src/wolfcrypt/src/aes.c ****     0x77e0b164U, 0xae84bb6bU, 0xa01cfe81U, 0x2b94f908U,
1511:../src/wolfcrypt/src/aes.c ****     0x68587048U, 0xfd198f45U, 0x6c8794deU, 0xf8b7527bU,
1512:../src/wolfcrypt/src/aes.c ****     0xd323ab73U, 0x02e2724bU, 0x8f57e31fU, 0xab2a6655U,
1513:../src/wolfcrypt/src/aes.c ****     0x2807b2ebU, 0xc2032fb5U, 0x7b9a86c5U, 0x08a5d337U,
1514:../src/wolfcrypt/src/aes.c ****     0x87f23028U, 0xa5b223bfU, 0x6aba0203U, 0x825ced16U,
1515:../src/wolfcrypt/src/aes.c ****     0x1c2b8acfU, 0xb492a779U, 0xf2f0f307U, 0xe2a14e69U,
1516:../src/wolfcrypt/src/aes.c ****     0xf4cd65daU, 0xbed50605U, 0x621fd134U, 0xfe8ac4a6U,
1517:../src/wolfcrypt/src/aes.c ****     0x539d342eU, 0x55a0a2f3U, 0xe132058aU, 0xeb75a4f6U,
1518:../src/wolfcrypt/src/aes.c ****     0xec390b83U, 0xefaa4060U, 0x9f065e71U, 0x1051bd6eU,
1519:../src/wolfcrypt/src/aes.c **** 
1520:../src/wolfcrypt/src/aes.c ****     0x8af93e21U, 0x063d96ddU, 0x05aedd3eU, 0xbd464de6U,
1521:../src/wolfcrypt/src/aes.c ****     0x8db59154U, 0x5d0571c4U, 0xd46f0406U, 0x15ff6050U,
1522:../src/wolfcrypt/src/aes.c ****     0xfb241998U, 0xe997d6bdU, 0x43cc8940U, 0x9e7767d9U,
1523:../src/wolfcrypt/src/aes.c ****     0x42bdb0e8U, 0x8b880789U, 0x5b38e719U, 0xeedb79c8U,
1524:../src/wolfcrypt/src/aes.c ****     0x0a47a17cU, 0x0fe97c42U, 0x1ec9f884U, 0x00000000U,
1525:../src/wolfcrypt/src/aes.c ****     0x86830980U, 0xed48322bU, 0x70ac1e11U, 0x724e6c5aU,
1526:../src/wolfcrypt/src/aes.c ****     0xfffbfd0eU, 0x38560f85U, 0xd51e3daeU, 0x3927362dU,
1527:../src/wolfcrypt/src/aes.c ****     0xd9640a0fU, 0xa621685cU, 0x54d19b5bU, 0x2e3a2436U,
1528:../src/wolfcrypt/src/aes.c ****     0x67b10c0aU, 0xe70f9357U, 0x96d2b4eeU, 0x919e1b9bU,
1529:../src/wolfcrypt/src/aes.c ****     0xc54f80c0U, 0x20a261dcU, 0x4b695a77U, 0x1a161c12U,
1530:../src/wolfcrypt/src/aes.c ****     0xba0ae293U, 0x2ae5c0a0U, 0xe0433c22U, 0x171d121bU,
1531:../src/wolfcrypt/src/aes.c ****     0x0d0b0e09U, 0xc7adf28bU, 0xa8b92db6U, 0xa9c8141eU,
1532:../src/wolfcrypt/src/aes.c ****     0x198557f1U, 0x074caf75U, 0xddbbee99U, 0x60fda37fU,
1533:../src/wolfcrypt/src/aes.c ****     0x269ff701U, 0xf5bc5c72U, 0x3bc54466U, 0x7e345bfbU,
1534:../src/wolfcrypt/src/aes.c ****     0x29768b43U, 0xc6dccb23U, 0xfc68b6edU, 0xf163b8e4U,
1535:../src/wolfcrypt/src/aes.c ****     0xdccad731U, 0x85104263U, 0x22401397U, 0x112084c6U,
1536:../src/wolfcrypt/src/aes.c ****     0x247d854aU, 0x3df8d2bbU, 0x3211aef9U, 0xa16dc729U,
1537:../src/wolfcrypt/src/aes.c ****     0x2f4b1d9eU, 0x30f3dcb2U, 0x52ec0d86U, 0xe3d077c1U,
1538:../src/wolfcrypt/src/aes.c ****     0x166c2bb3U, 0xb999a970U, 0x48fa1194U, 0x642247e9U,
1539:../src/wolfcrypt/src/aes.c ****     0x8cc4a8fcU, 0x3f1aa0f0U, 0x2cd8567dU, 0x90ef2233U,
1540:../src/wolfcrypt/src/aes.c ****     0x4ec78749U, 0xd1c1d938U, 0xa2fe8ccaU, 0x0b3698d4U,
1541:../src/wolfcrypt/src/aes.c ****     0x81cfa6f5U, 0xde28a57aU, 0x8e26dab7U, 0xbfa43fadU,
1542:../src/wolfcrypt/src/aes.c ****     0x9de42c3aU, 0x920d5078U, 0xcc9b6a5fU, 0x4662547eU,
1543:../src/wolfcrypt/src/aes.c ****     0x13c2f68dU, 0xb8e890d8U, 0xf75e2e39U, 0xaff582c3U,
1544:../src/wolfcrypt/src/aes.c ****     0x80be9f5dU, 0x937c69d0U, 0x2da96fd5U, 0x12b3cf25U,
1545:../src/wolfcrypt/src/aes.c ****     0x993bc8acU, 0x7da71018U, 0x636ee89cU, 0xbb7bdb3bU,
1546:../src/wolfcrypt/src/aes.c ****     0x7809cd26U, 0x18f46e59U, 0xb701ec9aU, 0x9aa8834fU,
1547:../src/wolfcrypt/src/aes.c ****     0x6e65e695U, 0xe67eaaffU, 0xcf0821bcU, 0xe8e6ef15U,
1548:../src/wolfcrypt/src/aes.c ****     0x9bd9bae7U, 0x36ce4a6fU, 0x09d4ea9fU, 0x7cd629b0U,
1549:../src/wolfcrypt/src/aes.c ****     0xb2af31a4U, 0x23312a3fU, 0x9430c6a5U, 0x66c035a2U,
1550:../src/wolfcrypt/src/aes.c ****     0xbc37744eU, 0xcaa6fc82U, 0xd0b0e090U, 0xd81533a7U,
1551:../src/wolfcrypt/src/aes.c ****     0x984af104U, 0xdaf741ecU, 0x500e7fcdU, 0xf62f1791U,
1552:../src/wolfcrypt/src/aes.c ****     0xd68d764dU, 0xb04d43efU, 0x4d54ccaaU, 0x04dfe496U,
1553:../src/wolfcrypt/src/aes.c ****     0xb5e39ed1U, 0x881b4c6aU, 0x1fb8c12cU, 0x517f4665U,
1554:../src/wolfcrypt/src/aes.c ****     0xea049d5eU, 0x355d018cU, 0x7473fa87U, 0x412efb0bU,
1555:../src/wolfcrypt/src/aes.c ****     0x1d5ab367U, 0xd25292dbU, 0x5633e910U, 0x47136dd6U,
1556:../src/wolfcrypt/src/aes.c ****     0x618c9ad7U, 0x0c7a37a1U, 0x148e59f8U, 0x3c89eb13U,
1557:../src/wolfcrypt/src/aes.c ****     0x27eecea9U, 0xc935b761U, 0xe5ede11cU, 0xb13c7a47U,
1558:../src/wolfcrypt/src/aes.c ****     0xdf599cd2U, 0x733f55f2U, 0xce791814U, 0x37bf73c7U,
1559:../src/wolfcrypt/src/aes.c ****     0xcdea53f7U, 0xaa5b5ffdU, 0x6f14df3dU, 0xdb867844U,
1560:../src/wolfcrypt/src/aes.c ****     0xf381caafU, 0xc43eb968U, 0x342c3824U, 0x405fc2a3U,
1561:../src/wolfcrypt/src/aes.c ****     0xc372161dU, 0x250cbce2U, 0x498b283cU, 0x9541ff0dU,
1562:../src/wolfcrypt/src/aes.c ****     0x017139a8U, 0xb3de080cU, 0xe49cd8b4U, 0xc1906456U,
1563:../src/wolfcrypt/src/aes.c ****     0x84617bcbU, 0xb670d532U, 0x5c74486cU, 0x5742d0b8U,
1564:../src/wolfcrypt/src/aes.c **** },
1565:../src/wolfcrypt/src/aes.c **** {
1566:../src/wolfcrypt/src/aes.c ****     0xf4a75051U, 0x4165537eU, 0x17a4c31aU, 0x275e963aU,
1567:../src/wolfcrypt/src/aes.c ****     0xab6bcb3bU, 0x9d45f11fU, 0xfa58abacU, 0xe303934bU,
1568:../src/wolfcrypt/src/aes.c ****     0x30fa5520U, 0x766df6adU, 0xcc769188U, 0x024c25f5U,
1569:../src/wolfcrypt/src/aes.c ****     0xe5d7fc4fU, 0x2acbd7c5U, 0x35448026U, 0x62a38fb5U,
1570:../src/wolfcrypt/src/aes.c ****     0xb15a49deU, 0xba1b6725U, 0xea0e9845U, 0xfec0e15dU,
1571:../src/wolfcrypt/src/aes.c ****     0x2f7502c3U, 0x4cf01281U, 0x4697a38dU, 0xd3f9c66bU,
1572:../src/wolfcrypt/src/aes.c ****     0x8f5fe703U, 0x929c9515U, 0x6d7aebbfU, 0x5259da95U,
1573:../src/wolfcrypt/src/aes.c ****     0xbe832dd4U, 0x7421d358U, 0xe0692949U, 0xc9c8448eU,
1574:../src/wolfcrypt/src/aes.c ****     0xc2896a75U, 0x8e7978f4U, 0x583e6b99U, 0xb971dd27U,
1575:../src/wolfcrypt/src/aes.c ****     0xe14fb6beU, 0x88ad17f0U, 0x20ac66c9U, 0xce3ab47dU,
1576:../src/wolfcrypt/src/aes.c ****     0xdf4a1863U, 0x1a3182e5U, 0x51336097U, 0x537f4562U,
1577:../src/wolfcrypt/src/aes.c ****     0x6477e0b1U, 0x6bae84bbU, 0x81a01cfeU, 0x082b94f9U,
1578:../src/wolfcrypt/src/aes.c ****     0x48685870U, 0x45fd198fU, 0xde6c8794U, 0x7bf8b752U,
1579:../src/wolfcrypt/src/aes.c ****     0x73d323abU, 0x4b02e272U, 0x1f8f57e3U, 0x55ab2a66U,
1580:../src/wolfcrypt/src/aes.c ****     0xeb2807b2U, 0xb5c2032fU, 0xc57b9a86U, 0x3708a5d3U,
1581:../src/wolfcrypt/src/aes.c ****     0x2887f230U, 0xbfa5b223U, 0x036aba02U, 0x16825cedU,
1582:../src/wolfcrypt/src/aes.c ****     0xcf1c2b8aU, 0x79b492a7U, 0x07f2f0f3U, 0x69e2a14eU,
1583:../src/wolfcrypt/src/aes.c ****     0xdaf4cd65U, 0x05bed506U, 0x34621fd1U, 0xa6fe8ac4U,
1584:../src/wolfcrypt/src/aes.c ****     0x2e539d34U, 0xf355a0a2U, 0x8ae13205U, 0xf6eb75a4U,
1585:../src/wolfcrypt/src/aes.c ****     0x83ec390bU, 0x60efaa40U, 0x719f065eU, 0x6e1051bdU,
1586:../src/wolfcrypt/src/aes.c ****     0x218af93eU, 0xdd063d96U, 0x3e05aeddU, 0xe6bd464dU,
1587:../src/wolfcrypt/src/aes.c ****     0x548db591U, 0xc45d0571U, 0x06d46f04U, 0x5015ff60U,
1588:../src/wolfcrypt/src/aes.c ****     0x98fb2419U, 0xbde997d6U, 0x4043cc89U, 0xd99e7767U,
1589:../src/wolfcrypt/src/aes.c ****     0xe842bdb0U, 0x898b8807U, 0x195b38e7U, 0xc8eedb79U,
1590:../src/wolfcrypt/src/aes.c ****     0x7c0a47a1U, 0x420fe97cU, 0x841ec9f8U, 0x00000000U,
1591:../src/wolfcrypt/src/aes.c ****     0x80868309U, 0x2bed4832U, 0x1170ac1eU, 0x5a724e6cU,
1592:../src/wolfcrypt/src/aes.c ****     0x0efffbfdU, 0x8538560fU, 0xaed51e3dU, 0x2d392736U,
1593:../src/wolfcrypt/src/aes.c ****     0x0fd9640aU, 0x5ca62168U, 0x5b54d19bU, 0x362e3a24U,
1594:../src/wolfcrypt/src/aes.c ****     0x0a67b10cU, 0x57e70f93U, 0xee96d2b4U, 0x9b919e1bU,
1595:../src/wolfcrypt/src/aes.c ****     0xc0c54f80U, 0xdc20a261U, 0x774b695aU, 0x121a161cU,
1596:../src/wolfcrypt/src/aes.c ****     0x93ba0ae2U, 0xa02ae5c0U, 0x22e0433cU, 0x1b171d12U,
1597:../src/wolfcrypt/src/aes.c ****     0x090d0b0eU, 0x8bc7adf2U, 0xb6a8b92dU, 0x1ea9c814U,
1598:../src/wolfcrypt/src/aes.c ****     0xf1198557U, 0x75074cafU, 0x99ddbbeeU, 0x7f60fda3U,
1599:../src/wolfcrypt/src/aes.c ****     0x01269ff7U, 0x72f5bc5cU, 0x663bc544U, 0xfb7e345bU,
1600:../src/wolfcrypt/src/aes.c ****     0x4329768bU, 0x23c6dccbU, 0xedfc68b6U, 0xe4f163b8U,
1601:../src/wolfcrypt/src/aes.c ****     0x31dccad7U, 0x63851042U, 0x97224013U, 0xc6112084U,
1602:../src/wolfcrypt/src/aes.c ****     0x4a247d85U, 0xbb3df8d2U, 0xf93211aeU, 0x29a16dc7U,
1603:../src/wolfcrypt/src/aes.c ****     0x9e2f4b1dU, 0xb230f3dcU, 0x8652ec0dU, 0xc1e3d077U,
1604:../src/wolfcrypt/src/aes.c ****     0xb3166c2bU, 0x70b999a9U, 0x9448fa11U, 0xe9642247U,
1605:../src/wolfcrypt/src/aes.c ****     0xfc8cc4a8U, 0xf03f1aa0U, 0x7d2cd856U, 0x3390ef22U,
1606:../src/wolfcrypt/src/aes.c ****     0x494ec787U, 0x38d1c1d9U, 0xcaa2fe8cU, 0xd40b3698U,
1607:../src/wolfcrypt/src/aes.c ****     0xf581cfa6U, 0x7ade28a5U, 0xb78e26daU, 0xadbfa43fU,
1608:../src/wolfcrypt/src/aes.c ****     0x3a9de42cU, 0x78920d50U, 0x5fcc9b6aU, 0x7e466254U,
1609:../src/wolfcrypt/src/aes.c ****     0x8d13c2f6U, 0xd8b8e890U, 0x39f75e2eU, 0xc3aff582U,
1610:../src/wolfcrypt/src/aes.c ****     0x5d80be9fU, 0xd0937c69U, 0xd52da96fU, 0x2512b3cfU,
1611:../src/wolfcrypt/src/aes.c ****     0xac993bc8U, 0x187da710U, 0x9c636ee8U, 0x3bbb7bdbU,
1612:../src/wolfcrypt/src/aes.c ****     0x267809cdU, 0x5918f46eU, 0x9ab701ecU, 0x4f9aa883U,
1613:../src/wolfcrypt/src/aes.c ****     0x956e65e6U, 0xffe67eaaU, 0xbccf0821U, 0x15e8e6efU,
1614:../src/wolfcrypt/src/aes.c ****     0xe79bd9baU, 0x6f36ce4aU, 0x9f09d4eaU, 0xb07cd629U,
1615:../src/wolfcrypt/src/aes.c ****     0xa4b2af31U, 0x3f23312aU, 0xa59430c6U, 0xa266c035U,
1616:../src/wolfcrypt/src/aes.c ****     0x4ebc3774U, 0x82caa6fcU, 0x90d0b0e0U, 0xa7d81533U,
1617:../src/wolfcrypt/src/aes.c ****     0x04984af1U, 0xecdaf741U, 0xcd500e7fU, 0x91f62f17U,
1618:../src/wolfcrypt/src/aes.c ****     0x4dd68d76U, 0xefb04d43U, 0xaa4d54ccU, 0x9604dfe4U,
1619:../src/wolfcrypt/src/aes.c ****     0xd1b5e39eU, 0x6a881b4cU, 0x2c1fb8c1U, 0x65517f46U,
1620:../src/wolfcrypt/src/aes.c ****     0x5eea049dU, 0x8c355d01U, 0x877473faU, 0x0b412efbU,
1621:../src/wolfcrypt/src/aes.c ****     0x671d5ab3U, 0xdbd25292U, 0x105633e9U, 0xd647136dU,
1622:../src/wolfcrypt/src/aes.c ****     0xd7618c9aU, 0xa10c7a37U, 0xf8148e59U, 0x133c89ebU,
1623:../src/wolfcrypt/src/aes.c ****     0xa927eeceU, 0x61c935b7U, 0x1ce5ede1U, 0x47b13c7aU,
1624:../src/wolfcrypt/src/aes.c ****     0xd2df599cU, 0xf2733f55U, 0x14ce7918U, 0xc737bf73U,
1625:../src/wolfcrypt/src/aes.c ****     0xf7cdea53U, 0xfdaa5b5fU, 0x3d6f14dfU, 0x44db8678U,
1626:../src/wolfcrypt/src/aes.c ****     0xaff381caU, 0x68c43eb9U, 0x24342c38U, 0xa3405fc2U,
1627:../src/wolfcrypt/src/aes.c ****     0x1dc37216U, 0xe2250cbcU, 0x3c498b28U, 0x0d9541ffU,
1628:../src/wolfcrypt/src/aes.c ****     0xa8017139U, 0x0cb3de08U, 0xb4e49cd8U, 0x56c19064U,
1629:../src/wolfcrypt/src/aes.c ****     0xcb84617bU, 0x32b670d5U, 0x6c5c7448U, 0xb85742d0U,
1630:../src/wolfcrypt/src/aes.c **** }
1631:../src/wolfcrypt/src/aes.c **** };
1632:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_DECRYPT */
1633:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AES_SMALL_TABLES */
1634:../src/wolfcrypt/src/aes.c **** 
1635:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AES_DECRYPT
1636:../src/wolfcrypt/src/aes.c **** #if (defined(HAVE_AES_CBC) && !defined(WOLFSSL_DEVCRYPTO_CBC)) \
1637:../src/wolfcrypt/src/aes.c ****             || defined(WOLFSSL_AES_DIRECT)
1638:../src/wolfcrypt/src/aes.c **** static const FLASH_QUALIFIER byte Td4[256] =
1639:../src/wolfcrypt/src/aes.c **** {
1640:../src/wolfcrypt/src/aes.c ****     0x52U, 0x09U, 0x6aU, 0xd5U, 0x30U, 0x36U, 0xa5U, 0x38U,
1641:../src/wolfcrypt/src/aes.c ****     0xbfU, 0x40U, 0xa3U, 0x9eU, 0x81U, 0xf3U, 0xd7U, 0xfbU,
1642:../src/wolfcrypt/src/aes.c ****     0x7cU, 0xe3U, 0x39U, 0x82U, 0x9bU, 0x2fU, 0xffU, 0x87U,
1643:../src/wolfcrypt/src/aes.c ****     0x34U, 0x8eU, 0x43U, 0x44U, 0xc4U, 0xdeU, 0xe9U, 0xcbU,
1644:../src/wolfcrypt/src/aes.c ****     0x54U, 0x7bU, 0x94U, 0x32U, 0xa6U, 0xc2U, 0x23U, 0x3dU,
1645:../src/wolfcrypt/src/aes.c ****     0xeeU, 0x4cU, 0x95U, 0x0bU, 0x42U, 0xfaU, 0xc3U, 0x4eU,
1646:../src/wolfcrypt/src/aes.c ****     0x08U, 0x2eU, 0xa1U, 0x66U, 0x28U, 0xd9U, 0x24U, 0xb2U,
1647:../src/wolfcrypt/src/aes.c ****     0x76U, 0x5bU, 0xa2U, 0x49U, 0x6dU, 0x8bU, 0xd1U, 0x25U,
1648:../src/wolfcrypt/src/aes.c ****     0x72U, 0xf8U, 0xf6U, 0x64U, 0x86U, 0x68U, 0x98U, 0x16U,
1649:../src/wolfcrypt/src/aes.c ****     0xd4U, 0xa4U, 0x5cU, 0xccU, 0x5dU, 0x65U, 0xb6U, 0x92U,
1650:../src/wolfcrypt/src/aes.c ****     0x6cU, 0x70U, 0x48U, 0x50U, 0xfdU, 0xedU, 0xb9U, 0xdaU,
1651:../src/wolfcrypt/src/aes.c ****     0x5eU, 0x15U, 0x46U, 0x57U, 0xa7U, 0x8dU, 0x9dU, 0x84U,
1652:../src/wolfcrypt/src/aes.c ****     0x90U, 0xd8U, 0xabU, 0x00U, 0x8cU, 0xbcU, 0xd3U, 0x0aU,
1653:../src/wolfcrypt/src/aes.c ****     0xf7U, 0xe4U, 0x58U, 0x05U, 0xb8U, 0xb3U, 0x45U, 0x06U,
1654:../src/wolfcrypt/src/aes.c ****     0xd0U, 0x2cU, 0x1eU, 0x8fU, 0xcaU, 0x3fU, 0x0fU, 0x02U,
1655:../src/wolfcrypt/src/aes.c ****     0xc1U, 0xafU, 0xbdU, 0x03U, 0x01U, 0x13U, 0x8aU, 0x6bU,
1656:../src/wolfcrypt/src/aes.c ****     0x3aU, 0x91U, 0x11U, 0x41U, 0x4fU, 0x67U, 0xdcU, 0xeaU,
1657:../src/wolfcrypt/src/aes.c ****     0x97U, 0xf2U, 0xcfU, 0xceU, 0xf0U, 0xb4U, 0xe6U, 0x73U,
1658:../src/wolfcrypt/src/aes.c ****     0x96U, 0xacU, 0x74U, 0x22U, 0xe7U, 0xadU, 0x35U, 0x85U,
1659:../src/wolfcrypt/src/aes.c ****     0xe2U, 0xf9U, 0x37U, 0xe8U, 0x1cU, 0x75U, 0xdfU, 0x6eU,
1660:../src/wolfcrypt/src/aes.c ****     0x47U, 0xf1U, 0x1aU, 0x71U, 0x1dU, 0x29U, 0xc5U, 0x89U,
1661:../src/wolfcrypt/src/aes.c ****     0x6fU, 0xb7U, 0x62U, 0x0eU, 0xaaU, 0x18U, 0xbeU, 0x1bU,
1662:../src/wolfcrypt/src/aes.c ****     0xfcU, 0x56U, 0x3eU, 0x4bU, 0xc6U, 0xd2U, 0x79U, 0x20U,
1663:../src/wolfcrypt/src/aes.c ****     0x9aU, 0xdbU, 0xc0U, 0xfeU, 0x78U, 0xcdU, 0x5aU, 0xf4U,
1664:../src/wolfcrypt/src/aes.c ****     0x1fU, 0xddU, 0xa8U, 0x33U, 0x88U, 0x07U, 0xc7U, 0x31U,
1665:../src/wolfcrypt/src/aes.c ****     0xb1U, 0x12U, 0x10U, 0x59U, 0x27U, 0x80U, 0xecU, 0x5fU,
1666:../src/wolfcrypt/src/aes.c ****     0x60U, 0x51U, 0x7fU, 0xa9U, 0x19U, 0xb5U, 0x4aU, 0x0dU,
1667:../src/wolfcrypt/src/aes.c ****     0x2dU, 0xe5U, 0x7aU, 0x9fU, 0x93U, 0xc9U, 0x9cU, 0xefU,
1668:../src/wolfcrypt/src/aes.c ****     0xa0U, 0xe0U, 0x3bU, 0x4dU, 0xaeU, 0x2aU, 0xf5U, 0xb0U,
1669:../src/wolfcrypt/src/aes.c ****     0xc8U, 0xebU, 0xbbU, 0x3cU, 0x83U, 0x53U, 0x99U, 0x61U,
1670:../src/wolfcrypt/src/aes.c ****     0x17U, 0x2bU, 0x04U, 0x7eU, 0xbaU, 0x77U, 0xd6U, 0x26U,
1671:../src/wolfcrypt/src/aes.c ****     0xe1U, 0x69U, 0x14U, 0x63U, 0x55U, 0x21U, 0x0cU, 0x7dU,
1672:../src/wolfcrypt/src/aes.c **** };
1673:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_CBC || WOLFSSL_AES_DIRECT */
1674:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_DECRYPT */
1675:../src/wolfcrypt/src/aes.c **** 
1676:../src/wolfcrypt/src/aes.c **** #define GETBYTE(x, y) (word32)((byte)((x) >> (8 * (y))))
1677:../src/wolfcrypt/src/aes.c **** 
1678:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_SMALL_TABLES
1679:../src/wolfcrypt/src/aes.c **** static const byte Tsbox[256] = {
1680:../src/wolfcrypt/src/aes.c ****     0x63U, 0x7cU, 0x77U, 0x7bU, 0xf2U, 0x6bU, 0x6fU, 0xc5U,
1681:../src/wolfcrypt/src/aes.c ****     0x30U, 0x01U, 0x67U, 0x2bU, 0xfeU, 0xd7U, 0xabU, 0x76U,
1682:../src/wolfcrypt/src/aes.c ****     0xcaU, 0x82U, 0xc9U, 0x7dU, 0xfaU, 0x59U, 0x47U, 0xf0U,
1683:../src/wolfcrypt/src/aes.c ****     0xadU, 0xd4U, 0xa2U, 0xafU, 0x9cU, 0xa4U, 0x72U, 0xc0U,
1684:../src/wolfcrypt/src/aes.c ****     0xb7U, 0xfdU, 0x93U, 0x26U, 0x36U, 0x3fU, 0xf7U, 0xccU,
1685:../src/wolfcrypt/src/aes.c ****     0x34U, 0xa5U, 0xe5U, 0xf1U, 0x71U, 0xd8U, 0x31U, 0x15U,
1686:../src/wolfcrypt/src/aes.c ****     0x04U, 0xc7U, 0x23U, 0xc3U, 0x18U, 0x96U, 0x05U, 0x9aU,
1687:../src/wolfcrypt/src/aes.c ****     0x07U, 0x12U, 0x80U, 0xe2U, 0xebU, 0x27U, 0xb2U, 0x75U,
1688:../src/wolfcrypt/src/aes.c ****     0x09U, 0x83U, 0x2cU, 0x1aU, 0x1bU, 0x6eU, 0x5aU, 0xa0U,
1689:../src/wolfcrypt/src/aes.c ****     0x52U, 0x3bU, 0xd6U, 0xb3U, 0x29U, 0xe3U, 0x2fU, 0x84U,
1690:../src/wolfcrypt/src/aes.c ****     0x53U, 0xd1U, 0x00U, 0xedU, 0x20U, 0xfcU, 0xb1U, 0x5bU,
1691:../src/wolfcrypt/src/aes.c ****     0x6aU, 0xcbU, 0xbeU, 0x39U, 0x4aU, 0x4cU, 0x58U, 0xcfU,
1692:../src/wolfcrypt/src/aes.c ****     0xd0U, 0xefU, 0xaaU, 0xfbU, 0x43U, 0x4dU, 0x33U, 0x85U,
1693:../src/wolfcrypt/src/aes.c ****     0x45U, 0xf9U, 0x02U, 0x7fU, 0x50U, 0x3cU, 0x9fU, 0xa8U,
1694:../src/wolfcrypt/src/aes.c ****     0x51U, 0xa3U, 0x40U, 0x8fU, 0x92U, 0x9dU, 0x38U, 0xf5U,
1695:../src/wolfcrypt/src/aes.c ****     0xbcU, 0xb6U, 0xdaU, 0x21U, 0x10U, 0xffU, 0xf3U, 0xd2U,
1696:../src/wolfcrypt/src/aes.c ****     0xcdU, 0x0cU, 0x13U, 0xecU, 0x5fU, 0x97U, 0x44U, 0x17U,
1697:../src/wolfcrypt/src/aes.c ****     0xc4U, 0xa7U, 0x7eU, 0x3dU, 0x64U, 0x5dU, 0x19U, 0x73U,
1698:../src/wolfcrypt/src/aes.c ****     0x60U, 0x81U, 0x4fU, 0xdcU, 0x22U, 0x2aU, 0x90U, 0x88U,
1699:../src/wolfcrypt/src/aes.c ****     0x46U, 0xeeU, 0xb8U, 0x14U, 0xdeU, 0x5eU, 0x0bU, 0xdbU,
1700:../src/wolfcrypt/src/aes.c ****     0xe0U, 0x32U, 0x3aU, 0x0aU, 0x49U, 0x06U, 0x24U, 0x5cU,
1701:../src/wolfcrypt/src/aes.c ****     0xc2U, 0xd3U, 0xacU, 0x62U, 0x91U, 0x95U, 0xe4U, 0x79U,
1702:../src/wolfcrypt/src/aes.c ****     0xe7U, 0xc8U, 0x37U, 0x6dU, 0x8dU, 0xd5U, 0x4eU, 0xa9U,
1703:../src/wolfcrypt/src/aes.c ****     0x6cU, 0x56U, 0xf4U, 0xeaU, 0x65U, 0x7aU, 0xaeU, 0x08U,
1704:../src/wolfcrypt/src/aes.c ****     0xbaU, 0x78U, 0x25U, 0x2eU, 0x1cU, 0xa6U, 0xb4U, 0xc6U,
1705:../src/wolfcrypt/src/aes.c ****     0xe8U, 0xddU, 0x74U, 0x1fU, 0x4bU, 0xbdU, 0x8bU, 0x8aU,
1706:../src/wolfcrypt/src/aes.c ****     0x70U, 0x3eU, 0xb5U, 0x66U, 0x48U, 0x03U, 0xf6U, 0x0eU,
1707:../src/wolfcrypt/src/aes.c ****     0x61U, 0x35U, 0x57U, 0xb9U, 0x86U, 0xc1U, 0x1dU, 0x9eU,
1708:../src/wolfcrypt/src/aes.c ****     0xe1U, 0xf8U, 0x98U, 0x11U, 0x69U, 0xd9U, 0x8eU, 0x94U,
1709:../src/wolfcrypt/src/aes.c ****     0x9bU, 0x1eU, 0x87U, 0xe9U, 0xceU, 0x55U, 0x28U, 0xdfU,
1710:../src/wolfcrypt/src/aes.c ****     0x8cU, 0xa1U, 0x89U, 0x0dU, 0xbfU, 0xe6U, 0x42U, 0x68U,
1711:../src/wolfcrypt/src/aes.c ****     0x41U, 0x99U, 0x2dU, 0x0fU, 0xb0U, 0x54U, 0xbbU, 0x16U
1712:../src/wolfcrypt/src/aes.c **** };
1713:../src/wolfcrypt/src/aes.c **** 
1714:../src/wolfcrypt/src/aes.c **** #define AES_XTIME(x)    ((byte)((byte)((x) << 1) ^ ((0 - ((x) >> 7)) & 0x1b)))
1715:../src/wolfcrypt/src/aes.c **** 
1716:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT word32 col_mul(
1717:../src/wolfcrypt/src/aes.c ****     word32 t, int i2, int i3, int ia, int ib)
1718:../src/wolfcrypt/src/aes.c **** {
1719:../src/wolfcrypt/src/aes.c ****     byte t3 = GETBYTE(t, i3);
1720:../src/wolfcrypt/src/aes.c ****     byte tm = AES_XTIME(GETBYTE(t, i2) ^ t3);
1721:../src/wolfcrypt/src/aes.c **** 
1722:../src/wolfcrypt/src/aes.c ****     return GETBYTE(t, ia) ^ GETBYTE(t, ib) ^ t3 ^ tm;
1723:../src/wolfcrypt/src/aes.c **** }
1724:../src/wolfcrypt/src/aes.c **** 
1725:../src/wolfcrypt/src/aes.c **** #if defined(HAVE_AES_CBC) || defined(WOLFSSL_AES_DIRECT)
1726:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT word32 inv_col_mul(
1727:../src/wolfcrypt/src/aes.c ****     word32 t, int i9, int ib, int id, int ie)
1728:../src/wolfcrypt/src/aes.c **** {
1729:../src/wolfcrypt/src/aes.c ****     byte t9 = GETBYTE(t, i9);
1730:../src/wolfcrypt/src/aes.c ****     byte tb = GETBYTE(t, ib);
1731:../src/wolfcrypt/src/aes.c ****     byte td = GETBYTE(t, id);
1732:../src/wolfcrypt/src/aes.c ****     byte te = GETBYTE(t, ie);
1733:../src/wolfcrypt/src/aes.c ****     byte t0 = t9 ^ tb ^ td;
1734:../src/wolfcrypt/src/aes.c ****     return t0 ^ AES_XTIME(AES_XTIME(AES_XTIME(t0 ^ te) ^ td ^ te) ^ tb ^ te);
1735:../src/wolfcrypt/src/aes.c **** }
1736:../src/wolfcrypt/src/aes.c **** #endif
1737:../src/wolfcrypt/src/aes.c **** #endif
1738:../src/wolfcrypt/src/aes.c **** 
1739:../src/wolfcrypt/src/aes.c **** #if defined(HAVE_AES_CBC) || defined(WOLFSSL_AES_DIRECT) || \
1740:../src/wolfcrypt/src/aes.c ****                                     defined(HAVE_AESCCM) || defined(HAVE_AESGCM)
1741:../src/wolfcrypt/src/aes.c **** 
1742:../src/wolfcrypt/src/aes.c **** #ifndef WC_CACHE_LINE_SZ
1743:../src/wolfcrypt/src/aes.c ****     #if defined(__x86_64__) || defined(_M_X64) || \
1744:../src/wolfcrypt/src/aes.c ****        (defined(__ILP32__) && (__ILP32__ >= 1))
1745:../src/wolfcrypt/src/aes.c ****         #define WC_CACHE_LINE_SZ 64
1746:../src/wolfcrypt/src/aes.c ****     #else
1747:../src/wolfcrypt/src/aes.c ****         /* default cache line size */
1748:../src/wolfcrypt/src/aes.c ****         #define WC_CACHE_LINE_SZ 32
1749:../src/wolfcrypt/src/aes.c ****     #endif
1750:../src/wolfcrypt/src/aes.c **** #endif
1751:../src/wolfcrypt/src/aes.c **** 
1752:../src/wolfcrypt/src/aes.c **** 
1753:../src/wolfcrypt/src/aes.c **** #ifndef WC_NO_CACHE_RESISTANT
1754:../src/wolfcrypt/src/aes.c **** #ifndef WOLFSSL_AES_SMALL_TABLES
1755:../src/wolfcrypt/src/aes.c **** /* load 4 Te Tables into cache by cache line stride */
1756:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT WC_INLINE word32 PreFetchTe(void)
1757:../src/wolfcrypt/src/aes.c **** {
 2936                             		.loc 2 1757 1
 2937 0000 7E AA                   		push.l	r10
 2938                             	.LCFI23:
 2939 0002 71 0A F4                		add	#-12, r0, r10
 2940                             	.LCFI24:
 2941 0005 EF A0                   		mov.L	r10, r0
1758:../src/wolfcrypt/src/aes.c ****     word32 x = 0;
 2942                             		.loc 2 1758 12
 2943 0007 F8 A6 00                		mov.L	#0, [r10]
1759:../src/wolfcrypt/src/aes.c ****     int i,j;
1760:../src/wolfcrypt/src/aes.c **** 
1761:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < 4; i++) {
 2944                             		.loc 2 1761 12
 2945 000a F9 A6 01 00             		mov.L	#0, 4[r10]
 2946                             		.loc 2 1761 5
 2947 000e 2E 38                   		bra	.L39
 2948                             	.L42:
1762:../src/wolfcrypt/src/aes.c ****         /* 256 elements, each one is 4 bytes */
1763:../src/wolfcrypt/src/aes.c ****         for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
 2949                             		.loc 2 1763 16
 2950 0010 F9 A6 02 00             		mov.L	#0, 8[r10]
 2951                             		.loc 2 1763 9
 2952 0014 2E 22                   		bra	.L40
 2953                             	.L41:
1764:../src/wolfcrypt/src/aes.c ****             x &= Te[i][j];
 2954                             		.loc 2 1764 23 discriminator 3
 2955 0016 FB 42 00 00 00 00       		mov.L	#_Te, r4
 2956 001c ED A5 01                		mov.L	4[r10], r5
 2957 001f 6C 85                   		shll	#8, r5
 2958 0021 06 89 A5 02             		add	8[r10].L, r5
 2959 0025 FE 65 45                		mov.L	[r5,r4], r5
 2960                             		.loc 2 1764 15 discriminator 3
 2961 0028 EC A4                   		mov.L	[r10], r4
 2962 002a 53 45                   		and	r4, r5
 2963 002c E3 A5                   		mov.L	r5, [r10]
1763:../src/wolfcrypt/src/aes.c ****             x &= Te[i][j];
 2964                             		.loc 2 1763 32 discriminator 3
 2965 002e ED A5 02                		mov.L	8[r10], r5
 2966 0031 62 85                   		add	#8, r5
 2967 0033 E7 A5 02                		mov.L	r5, 8[r10]
 2968                             	.L40:
1763:../src/wolfcrypt/src/aes.c ****             x &= Te[i][j];
 2969                             		.loc 2 1763 9 discriminator 1
 2970 0036 ED A5 02                		mov.L	8[r10], r5
 2971 0039 75 55 FF                		cmp	#0xff, r5
 2972 003c 2B DA                   		ble	.L41
1761:../src/wolfcrypt/src/aes.c ****         /* 256 elements, each one is 4 bytes */
 2973                             		.loc 2 1761 25 discriminator 2
 2974 003e ED A5 01                		mov.L	4[r10], r5
 2975 0041 62 15                   		add	#1, r5
 2976 0043 E7 A5 01                		mov.L	r5, 4[r10]
 2977                             	.L39:
1761:../src/wolfcrypt/src/aes.c ****         /* 256 elements, each one is 4 bytes */
 2978                             		.loc 2 1761 5 discriminator 1
 2979 0046 ED A5 01                		mov.L	4[r10], r5
 2980 0049 61 35                   		cmp	#3, r5
 2981 004b 2B C5                   		ble	.L42
1765:../src/wolfcrypt/src/aes.c ****         }
1766:../src/wolfcrypt/src/aes.c ****     }
1767:../src/wolfcrypt/src/aes.c ****     return x;
 2982                             		.loc 2 1767 12
 2983 004d EC A5                   		mov.L	[r10], r5
1768:../src/wolfcrypt/src/aes.c **** }
 2984                             		.loc 2 1768 1
 2985 004f EF 51                   		mov.L	r5, r1
 2986 0051 3F AA 04                		rtsd	#16, r10-r10
 2987                             	.LFE43:
 2989                             		.section	.text.wc_AesEncrypt,"ax",@progbits
 2991                             	_wc_AesEncrypt:
 2992                             	.LFB44:
1769:../src/wolfcrypt/src/aes.c **** #else
1770:../src/wolfcrypt/src/aes.c **** /* load sbox into cache by cache line stride */
1771:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT WC_INLINE word32 PreFetchSBox(void)
1772:../src/wolfcrypt/src/aes.c **** {
1773:../src/wolfcrypt/src/aes.c ****     word32 x = 0;
1774:../src/wolfcrypt/src/aes.c ****     int i;
1775:../src/wolfcrypt/src/aes.c **** 
1776:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < 256; i += WC_CACHE_LINE_SZ/4) {
1777:../src/wolfcrypt/src/aes.c ****         x &= Tsbox[i];
1778:../src/wolfcrypt/src/aes.c ****     }
1779:../src/wolfcrypt/src/aes.c ****     return x;
1780:../src/wolfcrypt/src/aes.c **** }
1781:../src/wolfcrypt/src/aes.c **** #endif
1782:../src/wolfcrypt/src/aes.c **** #endif
1783:../src/wolfcrypt/src/aes.c **** 
1784:../src/wolfcrypt/src/aes.c **** /* Software AES - ECB Encrypt */
1785:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int wc_AesEncrypt(
1786:../src/wolfcrypt/src/aes.c ****     Aes* aes, const byte* inBlock, byte* outBlock)
1787:../src/wolfcrypt/src/aes.c **** {
 2993                             		.loc 2 1787 1
 2994 0000 7E AA                   		push.l	r10
 2995                             	.LCFI25:
 2996 0002 71 0A CC                		add	#-52, r0, r10
 2997                             	.LCFI26:
 2998 0005 EF A0                   		mov.L	r10, r0
 2999 0007 E7 A1 0A                		mov.L	r1, 40[r10]
 3000 000a E7 A2 0B                		mov.L	r2, 44[r10]
 3001 000d E7 A3 0C                		mov.L	r3, 48[r10]
1788:../src/wolfcrypt/src/aes.c ****     word32 s0, s1, s2, s3;
1789:../src/wolfcrypt/src/aes.c ****     word32 t0, t1, t2, t3;
1790:../src/wolfcrypt/src/aes.c ****     word32 r = aes->rounds >> 1;
 3002                             		.loc 2 1790 19
 3003 0010 ED A5 0A                		mov.L	40[r10], r5
 3004 0013 ED 55 3C                		mov.L	240[r5], r5
 3005                             		.loc 2 1790 12
 3006 0016 68 15                   		shlr	#1, r5
 3007 0018 E7 A5 04                		mov.L	r5, 16[r10]
1791:../src/wolfcrypt/src/aes.c ****     const word32* rk = aes->key;
 3008                             		.loc 2 1791 19
 3009 001b ED A5 0A                		mov.L	40[r10], r5
 3010 001e E7 A5 05                		mov.L	r5, 20[r10]
1792:../src/wolfcrypt/src/aes.c **** 
1793:../src/wolfcrypt/src/aes.c ****     if (r > 7 || r == 0) {
 3011                             		.loc 2 1793 8
 3012 0021 ED A5 04                		mov.L	16[r10], r5
 3013 0024 61 75                   		cmp	#7, r5
 3014 0026 24 08                   		bgtu	.L45
 3015                             		.loc 2 1793 15 discriminator 1
 3016 0028 ED A5 04                		mov.L	16[r10], r5
 3017 002b 61 05                   		cmp	#0, r5
 3018 002d 18                      		bne	.L46
 3019                             	.L45:
1794:../src/wolfcrypt/src/aes.c ****         return KEYUSAGE_E;
 3020                             		.loc 2 1794 16
 3021 002e FB 5A 1E FF             		mov.L	#-226, r5
 3022 0032 38 21 17                		bra	.L49
 3023                             	.L46:
1795:../src/wolfcrypt/src/aes.c ****     }
1796:../src/wolfcrypt/src/aes.c **** 
1797:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
1798:../src/wolfcrypt/src/aes.c ****     if (haveAESNI && aes->use_aesni) {
1799:../src/wolfcrypt/src/aes.c ****         #ifdef DEBUG_AESNI
1800:../src/wolfcrypt/src/aes.c ****             printf("about to aes encrypt\n");
1801:../src/wolfcrypt/src/aes.c ****             printf("in  = %p\n", inBlock);
1802:../src/wolfcrypt/src/aes.c ****             printf("out = %p\n", outBlock);
1803:../src/wolfcrypt/src/aes.c ****             printf("aes->key = %p\n", aes->key);
1804:../src/wolfcrypt/src/aes.c ****             printf("aes->rounds = %d\n", aes->rounds);
1805:../src/wolfcrypt/src/aes.c ****             printf("sz = %d\n", AES_BLOCK_SIZE);
1806:../src/wolfcrypt/src/aes.c ****         #endif
1807:../src/wolfcrypt/src/aes.c **** 
1808:../src/wolfcrypt/src/aes.c ****         /* check alignment, decrypt doesn't need alignment */
1809:../src/wolfcrypt/src/aes.c ****         if ((wc_ptr_t)inBlock % AESNI_ALIGN) {
1810:../src/wolfcrypt/src/aes.c ****         #ifndef NO_WOLFSSL_ALLOC_ALIGN
1811:../src/wolfcrypt/src/aes.c ****             byte* tmp = (byte*)XMALLOC(AES_BLOCK_SIZE + AESNI_ALIGN, aes->heap,
1812:../src/wolfcrypt/src/aes.c ****                                                       DYNAMIC_TYPE_TMP_BUFFER);
1813:../src/wolfcrypt/src/aes.c ****             byte* tmp_align;
1814:../src/wolfcrypt/src/aes.c ****             if (tmp == NULL)
1815:../src/wolfcrypt/src/aes.c ****                 return MEMORY_E;
1816:../src/wolfcrypt/src/aes.c **** 
1817:../src/wolfcrypt/src/aes.c ****             tmp_align = tmp + (AESNI_ALIGN - ((wc_ptr_t)tmp % AESNI_ALIGN));
1818:../src/wolfcrypt/src/aes.c **** 
1819:../src/wolfcrypt/src/aes.c ****             XMEMCPY(tmp_align, inBlock, AES_BLOCK_SIZE);
1820:../src/wolfcrypt/src/aes.c ****             AES_ECB_encrypt(tmp_align, tmp_align, AES_BLOCK_SIZE,
1821:../src/wolfcrypt/src/aes.c ****                     (byte*)aes->key, aes->rounds);
1822:../src/wolfcrypt/src/aes.c ****             XMEMCPY(outBlock, tmp_align, AES_BLOCK_SIZE);
1823:../src/wolfcrypt/src/aes.c ****             XFREE(tmp, aes->heap, DYNAMIC_TYPE_TMP_BUFFER);
1824:../src/wolfcrypt/src/aes.c ****             return 0;
1825:../src/wolfcrypt/src/aes.c ****         #else
1826:../src/wolfcrypt/src/aes.c ****             WOLFSSL_MSG("AES-ECB encrypt with bad alignment");
1827:../src/wolfcrypt/src/aes.c ****             return BAD_ALIGN_E;
1828:../src/wolfcrypt/src/aes.c ****         #endif
1829:../src/wolfcrypt/src/aes.c ****         }
1830:../src/wolfcrypt/src/aes.c **** 
1831:../src/wolfcrypt/src/aes.c ****         AES_ECB_encrypt(inBlock, outBlock, AES_BLOCK_SIZE, (byte*)aes->key,
1832:../src/wolfcrypt/src/aes.c ****                         aes->rounds);
1833:../src/wolfcrypt/src/aes.c **** 
1834:../src/wolfcrypt/src/aes.c ****         return 0;
1835:../src/wolfcrypt/src/aes.c ****     }
1836:../src/wolfcrypt/src/aes.c ****     else {
1837:../src/wolfcrypt/src/aes.c ****         #ifdef DEBUG_AESNI
1838:../src/wolfcrypt/src/aes.c ****             printf("Skipping AES-NI\n");
1839:../src/wolfcrypt/src/aes.c ****         #endif
1840:../src/wolfcrypt/src/aes.c ****     }
1841:../src/wolfcrypt/src/aes.c **** #endif
1842:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_SCE) && !defined(WOLFSSL_SCE_NO_AES)
1843:../src/wolfcrypt/src/aes.c ****     AES_ECB_encrypt(aes, inBlock, outBlock, AES_BLOCK_SIZE);
1844:../src/wolfcrypt/src/aes.c ****     return 0;
1845:../src/wolfcrypt/src/aes.c **** #endif
1846:../src/wolfcrypt/src/aes.c **** 
1847:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_IMXRT_DCP)
1848:../src/wolfcrypt/src/aes.c ****     if (aes->keylen == 16) {
1849:../src/wolfcrypt/src/aes.c ****         DCPAesEcbEncrypt(aes, outBlock, inBlock, AES_BLOCK_SIZE);
1850:../src/wolfcrypt/src/aes.c ****         return 0;
1851:../src/wolfcrypt/src/aes.c ****     }
1852:../src/wolfcrypt/src/aes.c **** #endif
1853:../src/wolfcrypt/src/aes.c **** 
1854:../src/wolfcrypt/src/aes.c ****     /*
1855:../src/wolfcrypt/src/aes.c ****      * map byte array block to cipher state
1856:../src/wolfcrypt/src/aes.c ****      * and add initial round key:
1857:../src/wolfcrypt/src/aes.c ****      */
1858:../src/wolfcrypt/src/aes.c ****     XMEMCPY(&s0, inBlock,                  sizeof(s0));
 3024                             		.loc 2 1858 5
 3025 0035 ED A5 0B                		mov.L	44[r10], r5
 3026 0038 EC 55                   		mov.L	[r5], r5
 3027 003a E7 A5 06                		mov.L	r5, 24[r10]
1859:../src/wolfcrypt/src/aes.c ****     XMEMCPY(&s1, inBlock +     sizeof(s0), sizeof(s1));
 3028                             		.loc 2 1859 5
 3029 003d ED A5 0B                		mov.L	44[r10], r5
 3030 0040 62 45                   		add	#4, r5
 3031 0042 EC 55                   		mov.L	[r5], r5
 3032 0044 E7 A5 07                		mov.L	r5, 28[r10]
1860:../src/wolfcrypt/src/aes.c ****     XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
 3033                             		.loc 2 1860 5
 3034 0047 ED A5 0B                		mov.L	44[r10], r5
 3035 004a 62 85                   		add	#8, r5
 3036 004c EC 55                   		mov.L	[r5], r5
 3037 004e E7 A5 08                		mov.L	r5, 32[r10]
1861:../src/wolfcrypt/src/aes.c ****     XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
 3038                             		.loc 2 1861 5
 3039 0051 ED A5 0B                		mov.L	44[r10], r5
 3040 0054 62 C5                   		add	#12, r5
 3041 0056 EC 55                   		mov.L	[r5], r5
 3042 0058 E7 A5 09                		mov.L	r5, 36[r10]
1862:../src/wolfcrypt/src/aes.c **** 
1863:../src/wolfcrypt/src/aes.c **** #ifdef LITTLE_ENDIAN_ORDER
1864:../src/wolfcrypt/src/aes.c ****     s0 = ByteReverseWord32(s0);
 3043                             		.loc 2 1864 10
 3044 005b ED A5 06                		mov.L	24[r10], r5
 3045 005e EF 51                   		mov.L	r5, r1
 3046 0060 05 00 00 00             		bsr	_ByteReverseWord32
 3047 0064 EF 15                   		mov.L	r1, r5
 3048                             		.loc 2 1864 8
 3049 0066 E7 A5 06                		mov.L	r5, 24[r10]
1865:../src/wolfcrypt/src/aes.c ****     s1 = ByteReverseWord32(s1);
 3050                             		.loc 2 1865 10
 3051 0069 ED A5 07                		mov.L	28[r10], r5
 3052 006c EF 51                   		mov.L	r5, r1
 3053 006e 05 00 00 00             		bsr	_ByteReverseWord32
 3054 0072 EF 15                   		mov.L	r1, r5
 3055                             		.loc 2 1865 8
 3056 0074 E7 A5 07                		mov.L	r5, 28[r10]
1866:../src/wolfcrypt/src/aes.c ****     s2 = ByteReverseWord32(s2);
 3057                             		.loc 2 1866 10
 3058 0077 ED A5 08                		mov.L	32[r10], r5
 3059 007a EF 51                   		mov.L	r5, r1
 3060 007c 05 00 00 00             		bsr	_ByteReverseWord32
 3061 0080 EF 15                   		mov.L	r1, r5
 3062                             		.loc 2 1866 8
 3063 0082 E7 A5 08                		mov.L	r5, 32[r10]
1867:../src/wolfcrypt/src/aes.c ****     s3 = ByteReverseWord32(s3);
 3064                             		.loc 2 1867 10
 3065 0085 ED A5 09                		mov.L	36[r10], r5
 3066 0088 EF 51                   		mov.L	r5, r1
 3067 008a 05 00 00 00             		bsr	_ByteReverseWord32
 3068 008e EF 15                   		mov.L	r1, r5
 3069                             		.loc 2 1867 8
 3070 0090 E7 A5 09                		mov.L	r5, 36[r10]
1868:../src/wolfcrypt/src/aes.c **** #endif
1869:../src/wolfcrypt/src/aes.c **** 
1870:../src/wolfcrypt/src/aes.c ****     /* AddRoundKey */
1871:../src/wolfcrypt/src/aes.c ****     s0 ^= rk[0];
 3071                             		.loc 2 1871 13
 3072 0093 ED A5 05                		mov.L	20[r10], r5
 3073 0096 EC 54                   		mov.L	[r5], r4
 3074                             		.loc 2 1871 8
 3075 0098 ED A5 06                		mov.L	24[r10], r5
 3076 009b FC 37 45                		xor	r4, r5
 3077 009e E7 A5 06                		mov.L	r5, 24[r10]
1872:../src/wolfcrypt/src/aes.c ****     s1 ^= rk[1];
 3078                             		.loc 2 1872 13
 3079 00a1 ED A5 05                		mov.L	20[r10], r5
 3080 00a4 62 45                   		add	#4, r5
 3081 00a6 EC 54                   		mov.L	[r5], r4
 3082                             		.loc 2 1872 8
 3083 00a8 ED A5 07                		mov.L	28[r10], r5
 3084 00ab FC 37 45                		xor	r4, r5
 3085 00ae E7 A5 07                		mov.L	r5, 28[r10]
1873:../src/wolfcrypt/src/aes.c ****     s2 ^= rk[2];
 3086                             		.loc 2 1873 13
 3087 00b1 ED A5 05                		mov.L	20[r10], r5
 3088 00b4 62 85                   		add	#8, r5
 3089 00b6 EC 54                   		mov.L	[r5], r4
 3090                             		.loc 2 1873 8
 3091 00b8 ED A5 08                		mov.L	32[r10], r5
 3092 00bb FC 37 45                		xor	r4, r5
 3093 00be E7 A5 08                		mov.L	r5, 32[r10]
1874:../src/wolfcrypt/src/aes.c ****     s3 ^= rk[3];
 3094                             		.loc 2 1874 13
 3095 00c1 ED A5 05                		mov.L	20[r10], r5
 3096 00c4 62 C5                   		add	#12, r5
 3097 00c6 EC 54                   		mov.L	[r5], r4
 3098                             		.loc 2 1874 8
 3099 00c8 ED A5 09                		mov.L	36[r10], r5
 3100 00cb FC 37 45                		xor	r4, r5
 3101 00ce E7 A5 09                		mov.L	r5, 36[r10]
1875:../src/wolfcrypt/src/aes.c **** 
1876:../src/wolfcrypt/src/aes.c **** #ifndef WOLFSSL_AES_SMALL_TABLES
1877:../src/wolfcrypt/src/aes.c **** #ifndef WC_NO_CACHE_RESISTANT
1878:../src/wolfcrypt/src/aes.c ****     s0 |= PreFetchTe();
 3102                             		.loc 2 1878 11
 3103 00d1 05 00 00 00             		bsr	_PreFetchTe
 3104 00d5 EF 14                   		mov.L	r1, r4
 3105                             		.loc 2 1878 8
 3106 00d7 ED A5 06                		mov.L	24[r10], r5
 3107 00da 57 45                   		or	r4, r5
 3108 00dc E7 A5 06                		mov.L	r5, 24[r10]
1879:../src/wolfcrypt/src/aes.c **** #endif
1880:../src/wolfcrypt/src/aes.c **** 
1881:../src/wolfcrypt/src/aes.c **** #ifndef WOLFSSL_AES_NO_UNROLL
1882:../src/wolfcrypt/src/aes.c **** /* Unroll the loop. */
1883:../src/wolfcrypt/src/aes.c **** #define ENC_ROUND_T_S(o)                                            \
1884:../src/wolfcrypt/src/aes.c ****     t0 = Te[0][GETBYTE(s0, 3)] ^ Te[1][GETBYTE(s1, 2)] ^            \
1885:../src/wolfcrypt/src/aes.c ****          Te[2][GETBYTE(s2, 1)] ^ Te[3][GETBYTE(s3, 0)] ^ rk[(o)+4]; \
1886:../src/wolfcrypt/src/aes.c ****     t1 = Te[0][GETBYTE(s1, 3)] ^ Te[1][GETBYTE(s2, 2)] ^            \
1887:../src/wolfcrypt/src/aes.c ****          Te[2][GETBYTE(s3, 1)] ^ Te[3][GETBYTE(s0, 0)] ^ rk[(o)+5]; \
1888:../src/wolfcrypt/src/aes.c ****     t2 = Te[0][GETBYTE(s2, 3)] ^ Te[1][GETBYTE(s3, 2)] ^            \
1889:../src/wolfcrypt/src/aes.c ****          Te[2][GETBYTE(s0, 1)] ^ Te[3][GETBYTE(s1, 0)] ^ rk[(o)+6]; \
1890:../src/wolfcrypt/src/aes.c ****     t3 = Te[0][GETBYTE(s3, 3)] ^ Te[1][GETBYTE(s0, 2)] ^            \
1891:../src/wolfcrypt/src/aes.c ****          Te[2][GETBYTE(s1, 1)] ^ Te[3][GETBYTE(s2, 0)] ^ rk[(o)+7]
1892:../src/wolfcrypt/src/aes.c **** #define ENC_ROUND_S_T(o)                                            \
1893:../src/wolfcrypt/src/aes.c ****     s0 = Te[0][GETBYTE(t0, 3)] ^ Te[1][GETBYTE(t1, 2)] ^            \
1894:../src/wolfcrypt/src/aes.c ****          Te[2][GETBYTE(t2, 1)] ^ Te[3][GETBYTE(t3, 0)] ^ rk[(o)+0]; \
1895:../src/wolfcrypt/src/aes.c ****     s1 = Te[0][GETBYTE(t1, 3)] ^ Te[1][GETBYTE(t2, 2)] ^            \
1896:../src/wolfcrypt/src/aes.c ****          Te[2][GETBYTE(t3, 1)] ^ Te[3][GETBYTE(t0, 0)] ^ rk[(o)+1]; \
1897:../src/wolfcrypt/src/aes.c ****     s2 = Te[0][GETBYTE(t2, 3)] ^ Te[1][GETBYTE(t3, 2)] ^            \
1898:../src/wolfcrypt/src/aes.c ****          Te[2][GETBYTE(t0, 1)] ^ Te[3][GETBYTE(t1, 0)] ^ rk[(o)+2]; \
1899:../src/wolfcrypt/src/aes.c ****     s3 = Te[0][GETBYTE(t3, 3)] ^ Te[1][GETBYTE(t0, 2)] ^            \
1900:../src/wolfcrypt/src/aes.c ****          Te[2][GETBYTE(t1, 1)] ^ Te[3][GETBYTE(t2, 0)] ^ rk[(o)+3]
1901:../src/wolfcrypt/src/aes.c **** 
1902:../src/wolfcrypt/src/aes.c ****                        ENC_ROUND_T_S( 0);
 3109                             		.loc 2 1902 24
 3110 00df ED A5 06                		mov.L	24[r10], r5
 3111 00e2 69 85                   		shlr	#24, r5
 3112 00e4 5B 55                   		movu.B	r5, r5
 3113 00e6 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3114 00ec FE 65 43                		mov.L	[r5,r4], r3
 3115 00ef ED A5 07                		mov.L	28[r10], r5
 3116 00f2 69 05                   		shlr	#16, r5
 3117 00f4 5B 55                   		movu.B	r5, r5
 3118 00f6 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3119 00fc 72 55 00 01             		add	#0x100, r5
 3120 0100 FE 65 45                		mov.L	[r5,r4], r5
 3121 0103 FC 37 53                		xor	r5, r3
 3122 0106 ED A5 08                		mov.L	32[r10], r5
 3123 0109 68 85                   		shlr	#8, r5
 3124 010b 5B 55                   		movu.B	r5, r5
 3125 010d FB 42 00 00 00 00       		mov.L	#_Te, r4
 3126 0113 72 55 00 02             		add	#0x200, r5
 3127 0117 FE 65 45                		mov.L	[r5,r4], r5
 3128 011a FC 37 53                		xor	r5, r3
 3129 011d ED A5 09                		mov.L	36[r10], r5
 3130 0120 5B 55                   		movu.B	r5, r5
 3131 0122 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3132 0128 72 55 00 03             		add	#0x300, r5
 3133 012c FE 65 45                		mov.L	[r5,r4], r5
 3134 012f EF 34                   		mov.L	r3, r4
 3135 0131 FC 37 54                		xor	r5, r4
 3136 0134 ED A5 05                		mov.L	20[r10], r5
 3137 0137 71 55 10                		add	#16, r5
 3138 013a EC 55                   		mov.L	[r5], r5
 3139 013c FC 37 45                		xor	r4, r5
 3140 013f E3 A5                   		mov.L	r5, [r10]
 3141 0141 ED A5 07                		mov.L	28[r10], r5
 3142 0144 69 85                   		shlr	#24, r5
 3143 0146 5B 55                   		movu.B	r5, r5
 3144 0148 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3145 014e FE 65 43                		mov.L	[r5,r4], r3
 3146 0151 ED A5 08                		mov.L	32[r10], r5
 3147 0154 69 05                   		shlr	#16, r5
 3148 0156 5B 55                   		movu.B	r5, r5
 3149 0158 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3150 015e 72 55 00 01             		add	#0x100, r5
 3151 0162 FE 65 45                		mov.L	[r5,r4], r5
 3152 0165 FC 37 53                		xor	r5, r3
 3153 0168 ED A5 09                		mov.L	36[r10], r5
 3154 016b 68 85                   		shlr	#8, r5
 3155 016d 5B 55                   		movu.B	r5, r5
 3156 016f FB 42 00 00 00 00       		mov.L	#_Te, r4
 3157 0175 72 55 00 02             		add	#0x200, r5
 3158 0179 FE 65 45                		mov.L	[r5,r4], r5
 3159 017c FC 37 53                		xor	r5, r3
 3160 017f ED A5 06                		mov.L	24[r10], r5
 3161 0182 5B 55                   		movu.B	r5, r5
 3162 0184 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3163 018a 72 55 00 03             		add	#0x300, r5
 3164 018e FE 65 45                		mov.L	[r5,r4], r5
 3165 0191 EF 34                   		mov.L	r3, r4
 3166 0193 FC 37 54                		xor	r5, r4
 3167 0196 ED A5 05                		mov.L	20[r10], r5
 3168 0199 71 55 14                		add	#20, r5
 3169 019c EC 55                   		mov.L	[r5], r5
 3170 019e FC 37 45                		xor	r4, r5
 3171 01a1 E7 A5 01                		mov.L	r5, 4[r10]
 3172 01a4 ED A5 08                		mov.L	32[r10], r5
 3173 01a7 69 85                   		shlr	#24, r5
 3174 01a9 5B 55                   		movu.B	r5, r5
 3175 01ab FB 42 00 00 00 00       		mov.L	#_Te, r4
 3176 01b1 FE 65 43                		mov.L	[r5,r4], r3
 3177 01b4 ED A5 09                		mov.L	36[r10], r5
 3178 01b7 69 05                   		shlr	#16, r5
 3179 01b9 5B 55                   		movu.B	r5, r5
 3180 01bb FB 42 00 00 00 00       		mov.L	#_Te, r4
 3181 01c1 72 55 00 01             		add	#0x100, r5
 3182 01c5 FE 65 45                		mov.L	[r5,r4], r5
 3183 01c8 FC 37 53                		xor	r5, r3
 3184 01cb ED A5 06                		mov.L	24[r10], r5
 3185 01ce 68 85                   		shlr	#8, r5
 3186 01d0 5B 55                   		movu.B	r5, r5
 3187 01d2 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3188 01d8 72 55 00 02             		add	#0x200, r5
 3189 01dc FE 65 45                		mov.L	[r5,r4], r5
 3190 01df FC 37 53                		xor	r5, r3
 3191 01e2 ED A5 07                		mov.L	28[r10], r5
 3192 01e5 5B 55                   		movu.B	r5, r5
 3193 01e7 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3194 01ed 72 55 00 03             		add	#0x300, r5
 3195 01f1 FE 65 45                		mov.L	[r5,r4], r5
 3196 01f4 EF 34                   		mov.L	r3, r4
 3197 01f6 FC 37 54                		xor	r5, r4
 3198 01f9 ED A5 05                		mov.L	20[r10], r5
 3199 01fc 71 55 18                		add	#24, r5
 3200 01ff EC 55                   		mov.L	[r5], r5
 3201 0201 FC 37 45                		xor	r4, r5
 3202 0204 E7 A5 02                		mov.L	r5, 8[r10]
 3203 0207 ED A5 09                		mov.L	36[r10], r5
 3204 020a 69 85                   		shlr	#24, r5
 3205 020c 5B 55                   		movu.B	r5, r5
 3206 020e FB 42 00 00 00 00       		mov.L	#_Te, r4
 3207 0214 FE 65 43                		mov.L	[r5,r4], r3
 3208 0217 ED A5 06                		mov.L	24[r10], r5
 3209 021a 69 05                   		shlr	#16, r5
 3210 021c 5B 55                   		movu.B	r5, r5
 3211 021e FB 42 00 00 00 00       		mov.L	#_Te, r4
 3212 0224 72 55 00 01             		add	#0x100, r5
 3213 0228 FE 65 45                		mov.L	[r5,r4], r5
 3214 022b FC 37 53                		xor	r5, r3
 3215 022e ED A5 07                		mov.L	28[r10], r5
 3216 0231 68 85                   		shlr	#8, r5
 3217 0233 5B 55                   		movu.B	r5, r5
 3218 0235 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3219 023b 72 55 00 02             		add	#0x200, r5
 3220 023f FE 65 45                		mov.L	[r5,r4], r5
 3221 0242 FC 37 53                		xor	r5, r3
 3222 0245 ED A5 08                		mov.L	32[r10], r5
 3223 0248 5B 55                   		movu.B	r5, r5
 3224 024a FB 42 00 00 00 00       		mov.L	#_Te, r4
 3225 0250 72 55 00 03             		add	#0x300, r5
 3226 0254 FE 65 45                		mov.L	[r5,r4], r5
 3227 0257 EF 34                   		mov.L	r3, r4
 3228 0259 FC 37 54                		xor	r5, r4
 3229 025c ED A5 05                		mov.L	20[r10], r5
 3230 025f 71 55 1C                		add	#28, r5
 3231 0262 EC 55                   		mov.L	[r5], r5
 3232 0264 FC 37 45                		xor	r4, r5
 3233 0267 E7 A5 03                		mov.L	r5, 12[r10]
1903:../src/wolfcrypt/src/aes.c ****     ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
 3234                             		.loc 2 1903 5
 3235 026a EC A5                   		mov.L	[r10], r5
 3236 026c 69 85                   		shlr	#24, r5
 3237 026e 5B 55                   		movu.B	r5, r5
 3238 0270 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3239 0276 FE 65 43                		mov.L	[r5,r4], r3
 3240 0279 ED A5 01                		mov.L	4[r10], r5
 3241 027c 69 05                   		shlr	#16, r5
 3242 027e 5B 55                   		movu.B	r5, r5
 3243 0280 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3244 0286 72 55 00 01             		add	#0x100, r5
 3245 028a FE 65 45                		mov.L	[r5,r4], r5
 3246 028d FC 37 53                		xor	r5, r3
 3247 0290 ED A5 02                		mov.L	8[r10], r5
 3248 0293 68 85                   		shlr	#8, r5
 3249 0295 5B 55                   		movu.B	r5, r5
 3250 0297 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3251 029d 72 55 00 02             		add	#0x200, r5
 3252 02a1 FE 65 45                		mov.L	[r5,r4], r5
 3253 02a4 FC 37 53                		xor	r5, r3
 3254 02a7 ED A5 03                		mov.L	12[r10], r5
 3255 02aa 5B 55                   		movu.B	r5, r5
 3256 02ac FB 42 00 00 00 00       		mov.L	#_Te, r4
 3257 02b2 72 55 00 03             		add	#0x300, r5
 3258 02b6 FE 65 45                		mov.L	[r5,r4], r5
 3259 02b9 EF 34                   		mov.L	r3, r4
 3260 02bb FC 37 54                		xor	r5, r4
 3261 02be ED A5 05                		mov.L	20[r10], r5
 3262 02c1 71 55 20                		add	#32, r5
 3263 02c4 EC 55                   		mov.L	[r5], r5
 3264 02c6 FC 37 45                		xor	r4, r5
 3265 02c9 E7 A5 06                		mov.L	r5, 24[r10]
 3266 02cc ED A5 01                		mov.L	4[r10], r5
 3267 02cf 69 85                   		shlr	#24, r5
 3268 02d1 5B 55                   		movu.B	r5, r5
 3269 02d3 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3270 02d9 FE 65 43                		mov.L	[r5,r4], r3
 3271 02dc ED A5 02                		mov.L	8[r10], r5
 3272 02df 69 05                   		shlr	#16, r5
 3273 02e1 5B 55                   		movu.B	r5, r5
 3274 02e3 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3275 02e9 72 55 00 01             		add	#0x100, r5
 3276 02ed FE 65 45                		mov.L	[r5,r4], r5
 3277 02f0 FC 37 53                		xor	r5, r3
 3278 02f3 ED A5 03                		mov.L	12[r10], r5
 3279 02f6 68 85                   		shlr	#8, r5
 3280 02f8 5B 55                   		movu.B	r5, r5
 3281 02fa FB 42 00 00 00 00       		mov.L	#_Te, r4
 3282 0300 72 55 00 02             		add	#0x200, r5
 3283 0304 FE 65 45                		mov.L	[r5,r4], r5
 3284 0307 FC 37 53                		xor	r5, r3
 3285 030a EC A5                   		mov.L	[r10], r5
 3286 030c 5B 55                   		movu.B	r5, r5
 3287 030e FB 42 00 00 00 00       		mov.L	#_Te, r4
 3288 0314 72 55 00 03             		add	#0x300, r5
 3289 0318 FE 65 45                		mov.L	[r5,r4], r5
 3290 031b EF 34                   		mov.L	r3, r4
 3291 031d FC 37 54                		xor	r5, r4
 3292 0320 ED A5 05                		mov.L	20[r10], r5
 3293 0323 71 55 24                		add	#36, r5
 3294 0326 EC 55                   		mov.L	[r5], r5
 3295 0328 FC 37 45                		xor	r4, r5
 3296 032b E7 A5 07                		mov.L	r5, 28[r10]
 3297 032e ED A5 02                		mov.L	8[r10], r5
 3298 0331 69 85                   		shlr	#24, r5
 3299 0333 5B 55                   		movu.B	r5, r5
 3300 0335 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3301 033b FE 65 43                		mov.L	[r5,r4], r3
 3302 033e ED A5 03                		mov.L	12[r10], r5
 3303 0341 69 05                   		shlr	#16, r5
 3304 0343 5B 55                   		movu.B	r5, r5
 3305 0345 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3306 034b 72 55 00 01             		add	#0x100, r5
 3307 034f FE 65 45                		mov.L	[r5,r4], r5
 3308 0352 FC 37 53                		xor	r5, r3
 3309 0355 EC A5                   		mov.L	[r10], r5
 3310 0357 68 85                   		shlr	#8, r5
 3311 0359 5B 55                   		movu.B	r5, r5
 3312 035b FB 42 00 00 00 00       		mov.L	#_Te, r4
 3313 0361 72 55 00 02             		add	#0x200, r5
 3314 0365 FE 65 45                		mov.L	[r5,r4], r5
 3315 0368 FC 37 53                		xor	r5, r3
 3316 036b ED A5 01                		mov.L	4[r10], r5
 3317 036e 5B 55                   		movu.B	r5, r5
 3318 0370 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3319 0376 72 55 00 03             		add	#0x300, r5
 3320 037a FE 65 45                		mov.L	[r5,r4], r5
 3321 037d EF 34                   		mov.L	r3, r4
 3322 037f FC 37 54                		xor	r5, r4
 3323 0382 ED A5 05                		mov.L	20[r10], r5
 3324 0385 71 55 28                		add	#40, r5
 3325 0388 EC 55                   		mov.L	[r5], r5
 3326 038a FC 37 45                		xor	r4, r5
 3327 038d E7 A5 08                		mov.L	r5, 32[r10]
 3328 0390 ED A5 03                		mov.L	12[r10], r5
 3329 0393 69 85                   		shlr	#24, r5
 3330 0395 5B 55                   		movu.B	r5, r5
 3331 0397 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3332 039d FE 65 43                		mov.L	[r5,r4], r3
 3333 03a0 EC A5                   		mov.L	[r10], r5
 3334 03a2 69 05                   		shlr	#16, r5
 3335 03a4 5B 55                   		movu.B	r5, r5
 3336 03a6 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3337 03ac 72 55 00 01             		add	#0x100, r5
 3338 03b0 FE 65 45                		mov.L	[r5,r4], r5
 3339 03b3 FC 37 53                		xor	r5, r3
 3340 03b6 ED A5 01                		mov.L	4[r10], r5
 3341 03b9 68 85                   		shlr	#8, r5
 3342 03bb 5B 55                   		movu.B	r5, r5
 3343 03bd FB 42 00 00 00 00       		mov.L	#_Te, r4
 3344 03c3 72 55 00 02             		add	#0x200, r5
 3345 03c7 FE 65 45                		mov.L	[r5,r4], r5
 3346 03ca FC 37 53                		xor	r5, r3
 3347 03cd ED A5 02                		mov.L	8[r10], r5
 3348 03d0 5B 55                   		movu.B	r5, r5
 3349 03d2 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3350 03d8 72 55 00 03             		add	#0x300, r5
 3351 03dc FE 65 45                		mov.L	[r5,r4], r5
 3352 03df EF 34                   		mov.L	r3, r4
 3353 03e1 FC 37 54                		xor	r5, r4
 3354 03e4 ED A5 05                		mov.L	20[r10], r5
 3355 03e7 71 55 2C                		add	#44, r5
 3356 03ea EC 55                   		mov.L	[r5], r5
 3357 03ec FC 37 45                		xor	r4, r5
 3358 03ef E7 A5 09                		mov.L	r5, 36[r10]
 3359                             		.loc 2 1903 24
 3360 03f2 ED A5 06                		mov.L	24[r10], r5
 3361 03f5 69 85                   		shlr	#24, r5
 3362 03f7 5B 55                   		movu.B	r5, r5
 3363 03f9 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3364 03ff FE 65 43                		mov.L	[r5,r4], r3
 3365 0402 ED A5 07                		mov.L	28[r10], r5
 3366 0405 69 05                   		shlr	#16, r5
 3367 0407 5B 55                   		movu.B	r5, r5
 3368 0409 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3369 040f 72 55 00 01             		add	#0x100, r5
 3370 0413 FE 65 45                		mov.L	[r5,r4], r5
 3371 0416 FC 37 53                		xor	r5, r3
 3372 0419 ED A5 08                		mov.L	32[r10], r5
 3373 041c 68 85                   		shlr	#8, r5
 3374 041e 5B 55                   		movu.B	r5, r5
 3375 0420 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3376 0426 72 55 00 02             		add	#0x200, r5
 3377 042a FE 65 45                		mov.L	[r5,r4], r5
 3378 042d FC 37 53                		xor	r5, r3
 3379 0430 ED A5 09                		mov.L	36[r10], r5
 3380 0433 5B 55                   		movu.B	r5, r5
 3381 0435 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3382 043b 72 55 00 03             		add	#0x300, r5
 3383 043f FE 65 45                		mov.L	[r5,r4], r5
 3384 0442 EF 34                   		mov.L	r3, r4
 3385 0444 FC 37 54                		xor	r5, r4
 3386 0447 ED A5 05                		mov.L	20[r10], r5
 3387 044a 71 55 30                		add	#48, r5
 3388 044d EC 55                   		mov.L	[r5], r5
 3389 044f FC 37 45                		xor	r4, r5
 3390 0452 E3 A5                   		mov.L	r5, [r10]
 3391 0454 ED A5 07                		mov.L	28[r10], r5
 3392 0457 69 85                   		shlr	#24, r5
 3393 0459 5B 55                   		movu.B	r5, r5
 3394 045b FB 42 00 00 00 00       		mov.L	#_Te, r4
 3395 0461 FE 65 43                		mov.L	[r5,r4], r3
 3396 0464 ED A5 08                		mov.L	32[r10], r5
 3397 0467 69 05                   		shlr	#16, r5
 3398 0469 5B 55                   		movu.B	r5, r5
 3399 046b FB 42 00 00 00 00       		mov.L	#_Te, r4
 3400 0471 72 55 00 01             		add	#0x100, r5
 3401 0475 FE 65 45                		mov.L	[r5,r4], r5
 3402 0478 FC 37 53                		xor	r5, r3
 3403 047b ED A5 09                		mov.L	36[r10], r5
 3404 047e 68 85                   		shlr	#8, r5
 3405 0480 5B 55                   		movu.B	r5, r5
 3406 0482 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3407 0488 72 55 00 02             		add	#0x200, r5
 3408 048c FE 65 45                		mov.L	[r5,r4], r5
 3409 048f FC 37 53                		xor	r5, r3
 3410 0492 ED A5 06                		mov.L	24[r10], r5
 3411 0495 5B 55                   		movu.B	r5, r5
 3412 0497 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3413 049d 72 55 00 03             		add	#0x300, r5
 3414 04a1 FE 65 45                		mov.L	[r5,r4], r5
 3415 04a4 EF 34                   		mov.L	r3, r4
 3416 04a6 FC 37 54                		xor	r5, r4
 3417 04a9 ED A5 05                		mov.L	20[r10], r5
 3418 04ac 71 55 34                		add	#52, r5
 3419 04af EC 55                   		mov.L	[r5], r5
 3420 04b1 FC 37 45                		xor	r4, r5
 3421 04b4 E7 A5 01                		mov.L	r5, 4[r10]
 3422 04b7 ED A5 08                		mov.L	32[r10], r5
 3423 04ba 69 85                   		shlr	#24, r5
 3424 04bc 5B 55                   		movu.B	r5, r5
 3425 04be FB 42 00 00 00 00       		mov.L	#_Te, r4
 3426 04c4 FE 65 43                		mov.L	[r5,r4], r3
 3427 04c7 ED A5 09                		mov.L	36[r10], r5
 3428 04ca 69 05                   		shlr	#16, r5
 3429 04cc 5B 55                   		movu.B	r5, r5
 3430 04ce FB 42 00 00 00 00       		mov.L	#_Te, r4
 3431 04d4 72 55 00 01             		add	#0x100, r5
 3432 04d8 FE 65 45                		mov.L	[r5,r4], r5
 3433 04db FC 37 53                		xor	r5, r3
 3434 04de ED A5 06                		mov.L	24[r10], r5
 3435 04e1 68 85                   		shlr	#8, r5
 3436 04e3 5B 55                   		movu.B	r5, r5
 3437 04e5 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3438 04eb 72 55 00 02             		add	#0x200, r5
 3439 04ef FE 65 45                		mov.L	[r5,r4], r5
 3440 04f2 FC 37 53                		xor	r5, r3
 3441 04f5 ED A5 07                		mov.L	28[r10], r5
 3442 04f8 5B 55                   		movu.B	r5, r5
 3443 04fa FB 42 00 00 00 00       		mov.L	#_Te, r4
 3444 0500 72 55 00 03             		add	#0x300, r5
 3445 0504 FE 65 45                		mov.L	[r5,r4], r5
 3446 0507 EF 34                   		mov.L	r3, r4
 3447 0509 FC 37 54                		xor	r5, r4
 3448 050c ED A5 05                		mov.L	20[r10], r5
 3449 050f 71 55 38                		add	#56, r5
 3450 0512 EC 55                   		mov.L	[r5], r5
 3451 0514 FC 37 45                		xor	r4, r5
 3452 0517 E7 A5 02                		mov.L	r5, 8[r10]
 3453 051a ED A5 09                		mov.L	36[r10], r5
 3454 051d 69 85                   		shlr	#24, r5
 3455 051f 5B 55                   		movu.B	r5, r5
 3456 0521 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3457 0527 FE 65 43                		mov.L	[r5,r4], r3
 3458 052a ED A5 06                		mov.L	24[r10], r5
 3459 052d 69 05                   		shlr	#16, r5
 3460 052f 5B 55                   		movu.B	r5, r5
 3461 0531 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3462 0537 72 55 00 01             		add	#0x100, r5
 3463 053b FE 65 45                		mov.L	[r5,r4], r5
 3464 053e FC 37 53                		xor	r5, r3
 3465 0541 ED A5 07                		mov.L	28[r10], r5
 3466 0544 68 85                   		shlr	#8, r5
 3467 0546 5B 55                   		movu.B	r5, r5
 3468 0548 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3469 054e 72 55 00 02             		add	#0x200, r5
 3470 0552 FE 65 45                		mov.L	[r5,r4], r5
 3471 0555 FC 37 53                		xor	r5, r3
 3472 0558 ED A5 08                		mov.L	32[r10], r5
 3473 055b 5B 55                   		movu.B	r5, r5
 3474 055d FB 42 00 00 00 00       		mov.L	#_Te, r4
 3475 0563 72 55 00 03             		add	#0x300, r5
 3476 0567 FE 65 45                		mov.L	[r5,r4], r5
 3477 056a EF 34                   		mov.L	r3, r4
 3478 056c FC 37 54                		xor	r5, r4
 3479 056f ED A5 05                		mov.L	20[r10], r5
 3480 0572 71 55 3C                		add	#60, r5
 3481 0575 EC 55                   		mov.L	[r5], r5
 3482 0577 FC 37 45                		xor	r4, r5
 3483 057a E7 A5 03                		mov.L	r5, 12[r10]
1904:../src/wolfcrypt/src/aes.c ****     ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
 3484                             		.loc 2 1904 5
 3485 057d EC A5                   		mov.L	[r10], r5
 3486 057f 69 85                   		shlr	#24, r5
 3487 0581 5B 55                   		movu.B	r5, r5
 3488 0583 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3489 0589 FE 65 43                		mov.L	[r5,r4], r3
 3490 058c ED A5 01                		mov.L	4[r10], r5
 3491 058f 69 05                   		shlr	#16, r5
 3492 0591 5B 55                   		movu.B	r5, r5
 3493 0593 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3494 0599 72 55 00 01             		add	#0x100, r5
 3495 059d FE 65 45                		mov.L	[r5,r4], r5
 3496 05a0 FC 37 53                		xor	r5, r3
 3497 05a3 ED A5 02                		mov.L	8[r10], r5
 3498 05a6 68 85                   		shlr	#8, r5
 3499 05a8 5B 55                   		movu.B	r5, r5
 3500 05aa FB 42 00 00 00 00       		mov.L	#_Te, r4
 3501 05b0 72 55 00 02             		add	#0x200, r5
 3502 05b4 FE 65 45                		mov.L	[r5,r4], r5
 3503 05b7 FC 37 53                		xor	r5, r3
 3504 05ba ED A5 03                		mov.L	12[r10], r5
 3505 05bd 5B 55                   		movu.B	r5, r5
 3506 05bf FB 42 00 00 00 00       		mov.L	#_Te, r4
 3507 05c5 72 55 00 03             		add	#0x300, r5
 3508 05c9 FE 65 45                		mov.L	[r5,r4], r5
 3509 05cc EF 34                   		mov.L	r3, r4
 3510 05ce FC 37 54                		xor	r5, r4
 3511 05d1 ED A5 05                		mov.L	20[r10], r5
 3512 05d4 71 55 40                		add	#0x40, r5
 3513 05d7 EC 55                   		mov.L	[r5], r5
 3514 05d9 FC 37 45                		xor	r4, r5
 3515 05dc E7 A5 06                		mov.L	r5, 24[r10]
 3516 05df ED A5 01                		mov.L	4[r10], r5
 3517 05e2 69 85                   		shlr	#24, r5
 3518 05e4 5B 55                   		movu.B	r5, r5
 3519 05e6 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3520 05ec FE 65 43                		mov.L	[r5,r4], r3
 3521 05ef ED A5 02                		mov.L	8[r10], r5
 3522 05f2 69 05                   		shlr	#16, r5
 3523 05f4 5B 55                   		movu.B	r5, r5
 3524 05f6 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3525 05fc 72 55 00 01             		add	#0x100, r5
 3526 0600 FE 65 45                		mov.L	[r5,r4], r5
 3527 0603 FC 37 53                		xor	r5, r3
 3528 0606 ED A5 03                		mov.L	12[r10], r5
 3529 0609 68 85                   		shlr	#8, r5
 3530 060b 5B 55                   		movu.B	r5, r5
 3531 060d FB 42 00 00 00 00       		mov.L	#_Te, r4
 3532 0613 72 55 00 02             		add	#0x200, r5
 3533 0617 FE 65 45                		mov.L	[r5,r4], r5
 3534 061a FC 37 53                		xor	r5, r3
 3535 061d EC A5                   		mov.L	[r10], r5
 3536 061f 5B 55                   		movu.B	r5, r5
 3537 0621 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3538 0627 72 55 00 03             		add	#0x300, r5
 3539 062b FE 65 45                		mov.L	[r5,r4], r5
 3540 062e EF 34                   		mov.L	r3, r4
 3541 0630 FC 37 54                		xor	r5, r4
 3542 0633 ED A5 05                		mov.L	20[r10], r5
 3543 0636 71 55 44                		add	#0x44, r5
 3544 0639 EC 55                   		mov.L	[r5], r5
 3545 063b FC 37 45                		xor	r4, r5
 3546 063e E7 A5 07                		mov.L	r5, 28[r10]
 3547 0641 ED A5 02                		mov.L	8[r10], r5
 3548 0644 69 85                   		shlr	#24, r5
 3549 0646 5B 55                   		movu.B	r5, r5
 3550 0648 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3551 064e FE 65 43                		mov.L	[r5,r4], r3
 3552 0651 ED A5 03                		mov.L	12[r10], r5
 3553 0654 69 05                   		shlr	#16, r5
 3554 0656 5B 55                   		movu.B	r5, r5
 3555 0658 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3556 065e 72 55 00 01             		add	#0x100, r5
 3557 0662 FE 65 45                		mov.L	[r5,r4], r5
 3558 0665 FC 37 53                		xor	r5, r3
 3559 0668 EC A5                   		mov.L	[r10], r5
 3560 066a 68 85                   		shlr	#8, r5
 3561 066c 5B 55                   		movu.B	r5, r5
 3562 066e FB 42 00 00 00 00       		mov.L	#_Te, r4
 3563 0674 72 55 00 02             		add	#0x200, r5
 3564 0678 FE 65 45                		mov.L	[r5,r4], r5
 3565 067b FC 37 53                		xor	r5, r3
 3566 067e ED A5 01                		mov.L	4[r10], r5
 3567 0681 5B 55                   		movu.B	r5, r5
 3568 0683 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3569 0689 72 55 00 03             		add	#0x300, r5
 3570 068d FE 65 45                		mov.L	[r5,r4], r5
 3571 0690 EF 34                   		mov.L	r3, r4
 3572 0692 FC 37 54                		xor	r5, r4
 3573 0695 ED A5 05                		mov.L	20[r10], r5
 3574 0698 71 55 48                		add	#0x48, r5
 3575 069b EC 55                   		mov.L	[r5], r5
 3576 069d FC 37 45                		xor	r4, r5
 3577 06a0 E7 A5 08                		mov.L	r5, 32[r10]
 3578 06a3 ED A5 03                		mov.L	12[r10], r5
 3579 06a6 69 85                   		shlr	#24, r5
 3580 06a8 5B 55                   		movu.B	r5, r5
 3581 06aa FB 42 00 00 00 00       		mov.L	#_Te, r4
 3582 06b0 FE 65 43                		mov.L	[r5,r4], r3
 3583 06b3 EC A5                   		mov.L	[r10], r5
 3584 06b5 69 05                   		shlr	#16, r5
 3585 06b7 5B 55                   		movu.B	r5, r5
 3586 06b9 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3587 06bf 72 55 00 01             		add	#0x100, r5
 3588 06c3 FE 65 45                		mov.L	[r5,r4], r5
 3589 06c6 FC 37 53                		xor	r5, r3
 3590 06c9 ED A5 01                		mov.L	4[r10], r5
 3591 06cc 68 85                   		shlr	#8, r5
 3592 06ce 5B 55                   		movu.B	r5, r5
 3593 06d0 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3594 06d6 72 55 00 02             		add	#0x200, r5
 3595 06da FE 65 45                		mov.L	[r5,r4], r5
 3596 06dd FC 37 53                		xor	r5, r3
 3597 06e0 ED A5 02                		mov.L	8[r10], r5
 3598 06e3 5B 55                   		movu.B	r5, r5
 3599 06e5 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3600 06eb 72 55 00 03             		add	#0x300, r5
 3601 06ef FE 65 45                		mov.L	[r5,r4], r5
 3602 06f2 EF 34                   		mov.L	r3, r4
 3603 06f4 FC 37 54                		xor	r5, r4
 3604 06f7 ED A5 05                		mov.L	20[r10], r5
 3605 06fa 71 55 4C                		add	#0x4c, r5
 3606 06fd EC 55                   		mov.L	[r5], r5
 3607 06ff FC 37 45                		xor	r4, r5
 3608 0702 E7 A5 09                		mov.L	r5, 36[r10]
 3609                             		.loc 2 1904 24
 3610 0705 ED A5 06                		mov.L	24[r10], r5
 3611 0708 69 85                   		shlr	#24, r5
 3612 070a 5B 55                   		movu.B	r5, r5
 3613 070c FB 42 00 00 00 00       		mov.L	#_Te, r4
 3614 0712 FE 65 43                		mov.L	[r5,r4], r3
 3615 0715 ED A5 07                		mov.L	28[r10], r5
 3616 0718 69 05                   		shlr	#16, r5
 3617 071a 5B 55                   		movu.B	r5, r5
 3618 071c FB 42 00 00 00 00       		mov.L	#_Te, r4
 3619 0722 72 55 00 01             		add	#0x100, r5
 3620 0726 FE 65 45                		mov.L	[r5,r4], r5
 3621 0729 FC 37 53                		xor	r5, r3
 3622 072c ED A5 08                		mov.L	32[r10], r5
 3623 072f 68 85                   		shlr	#8, r5
 3624 0731 5B 55                   		movu.B	r5, r5
 3625 0733 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3626 0739 72 55 00 02             		add	#0x200, r5
 3627 073d FE 65 45                		mov.L	[r5,r4], r5
 3628 0740 FC 37 53                		xor	r5, r3
 3629 0743 ED A5 09                		mov.L	36[r10], r5
 3630 0746 5B 55                   		movu.B	r5, r5
 3631 0748 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3632 074e 72 55 00 03             		add	#0x300, r5
 3633 0752 FE 65 45                		mov.L	[r5,r4], r5
 3634 0755 EF 34                   		mov.L	r3, r4
 3635 0757 FC 37 54                		xor	r5, r4
 3636 075a ED A5 05                		mov.L	20[r10], r5
 3637 075d 71 55 50                		add	#0x50, r5
 3638 0760 EC 55                   		mov.L	[r5], r5
 3639 0762 FC 37 45                		xor	r4, r5
 3640 0765 E3 A5                   		mov.L	r5, [r10]
 3641 0767 ED A5 07                		mov.L	28[r10], r5
 3642 076a 69 85                   		shlr	#24, r5
 3643 076c 5B 55                   		movu.B	r5, r5
 3644 076e FB 42 00 00 00 00       		mov.L	#_Te, r4
 3645 0774 FE 65 43                		mov.L	[r5,r4], r3
 3646 0777 ED A5 08                		mov.L	32[r10], r5
 3647 077a 69 05                   		shlr	#16, r5
 3648 077c 5B 55                   		movu.B	r5, r5
 3649 077e FB 42 00 00 00 00       		mov.L	#_Te, r4
 3650 0784 72 55 00 01             		add	#0x100, r5
 3651 0788 FE 65 45                		mov.L	[r5,r4], r5
 3652 078b FC 37 53                		xor	r5, r3
 3653 078e ED A5 09                		mov.L	36[r10], r5
 3654 0791 68 85                   		shlr	#8, r5
 3655 0793 5B 55                   		movu.B	r5, r5
 3656 0795 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3657 079b 72 55 00 02             		add	#0x200, r5
 3658 079f FE 65 45                		mov.L	[r5,r4], r5
 3659 07a2 FC 37 53                		xor	r5, r3
 3660 07a5 ED A5 06                		mov.L	24[r10], r5
 3661 07a8 5B 55                   		movu.B	r5, r5
 3662 07aa FB 42 00 00 00 00       		mov.L	#_Te, r4
 3663 07b0 72 55 00 03             		add	#0x300, r5
 3664 07b4 FE 65 45                		mov.L	[r5,r4], r5
 3665 07b7 EF 34                   		mov.L	r3, r4
 3666 07b9 FC 37 54                		xor	r5, r4
 3667 07bc ED A5 05                		mov.L	20[r10], r5
 3668 07bf 71 55 54                		add	#0x54, r5
 3669 07c2 EC 55                   		mov.L	[r5], r5
 3670 07c4 FC 37 45                		xor	r4, r5
 3671 07c7 E7 A5 01                		mov.L	r5, 4[r10]
 3672 07ca ED A5 08                		mov.L	32[r10], r5
 3673 07cd 69 85                   		shlr	#24, r5
 3674 07cf 5B 55                   		movu.B	r5, r5
 3675 07d1 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3676 07d7 FE 65 43                		mov.L	[r5,r4], r3
 3677 07da ED A5 09                		mov.L	36[r10], r5
 3678 07dd 69 05                   		shlr	#16, r5
 3679 07df 5B 55                   		movu.B	r5, r5
 3680 07e1 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3681 07e7 72 55 00 01             		add	#0x100, r5
 3682 07eb FE 65 45                		mov.L	[r5,r4], r5
 3683 07ee FC 37 53                		xor	r5, r3
 3684 07f1 ED A5 06                		mov.L	24[r10], r5
 3685 07f4 68 85                   		shlr	#8, r5
 3686 07f6 5B 55                   		movu.B	r5, r5
 3687 07f8 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3688 07fe 72 55 00 02             		add	#0x200, r5
 3689 0802 FE 65 45                		mov.L	[r5,r4], r5
 3690 0805 FC 37 53                		xor	r5, r3
 3691 0808 ED A5 07                		mov.L	28[r10], r5
 3692 080b 5B 55                   		movu.B	r5, r5
 3693 080d FB 42 00 00 00 00       		mov.L	#_Te, r4
 3694 0813 72 55 00 03             		add	#0x300, r5
 3695 0817 FE 65 45                		mov.L	[r5,r4], r5
 3696 081a EF 34                   		mov.L	r3, r4
 3697 081c FC 37 54                		xor	r5, r4
 3698 081f ED A5 05                		mov.L	20[r10], r5
 3699 0822 71 55 58                		add	#0x58, r5
 3700 0825 EC 55                   		mov.L	[r5], r5
 3701 0827 FC 37 45                		xor	r4, r5
 3702 082a E7 A5 02                		mov.L	r5, 8[r10]
 3703 082d ED A5 09                		mov.L	36[r10], r5
 3704 0830 69 85                   		shlr	#24, r5
 3705 0832 5B 55                   		movu.B	r5, r5
 3706 0834 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3707 083a FE 65 43                		mov.L	[r5,r4], r3
 3708 083d ED A5 06                		mov.L	24[r10], r5
 3709 0840 69 05                   		shlr	#16, r5
 3710 0842 5B 55                   		movu.B	r5, r5
 3711 0844 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3712 084a 72 55 00 01             		add	#0x100, r5
 3713 084e FE 65 45                		mov.L	[r5,r4], r5
 3714 0851 FC 37 53                		xor	r5, r3
 3715 0854 ED A5 07                		mov.L	28[r10], r5
 3716 0857 68 85                   		shlr	#8, r5
 3717 0859 5B 55                   		movu.B	r5, r5
 3718 085b FB 42 00 00 00 00       		mov.L	#_Te, r4
 3719 0861 72 55 00 02             		add	#0x200, r5
 3720 0865 FE 65 45                		mov.L	[r5,r4], r5
 3721 0868 FC 37 53                		xor	r5, r3
 3722 086b ED A5 08                		mov.L	32[r10], r5
 3723 086e 5B 55                   		movu.B	r5, r5
 3724 0870 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3725 0876 72 55 00 03             		add	#0x300, r5
 3726 087a FE 65 45                		mov.L	[r5,r4], r5
 3727 087d EF 34                   		mov.L	r3, r4
 3728 087f FC 37 54                		xor	r5, r4
 3729 0882 ED A5 05                		mov.L	20[r10], r5
 3730 0885 71 55 5C                		add	#0x5c, r5
 3731 0888 EC 55                   		mov.L	[r5], r5
 3732 088a FC 37 45                		xor	r4, r5
 3733 088d E7 A5 03                		mov.L	r5, 12[r10]
1905:../src/wolfcrypt/src/aes.c ****     ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
 3734                             		.loc 2 1905 5
 3735 0890 EC A5                   		mov.L	[r10], r5
 3736 0892 69 85                   		shlr	#24, r5
 3737 0894 5B 55                   		movu.B	r5, r5
 3738 0896 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3739 089c FE 65 43                		mov.L	[r5,r4], r3
 3740 089f ED A5 01                		mov.L	4[r10], r5
 3741 08a2 69 05                   		shlr	#16, r5
 3742 08a4 5B 55                   		movu.B	r5, r5
 3743 08a6 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3744 08ac 72 55 00 01             		add	#0x100, r5
 3745 08b0 FE 65 45                		mov.L	[r5,r4], r5
 3746 08b3 FC 37 53                		xor	r5, r3
 3747 08b6 ED A5 02                		mov.L	8[r10], r5
 3748 08b9 68 85                   		shlr	#8, r5
 3749 08bb 5B 55                   		movu.B	r5, r5
 3750 08bd FB 42 00 00 00 00       		mov.L	#_Te, r4
 3751 08c3 72 55 00 02             		add	#0x200, r5
 3752 08c7 FE 65 45                		mov.L	[r5,r4], r5
 3753 08ca FC 37 53                		xor	r5, r3
 3754 08cd ED A5 03                		mov.L	12[r10], r5
 3755 08d0 5B 55                   		movu.B	r5, r5
 3756 08d2 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3757 08d8 72 55 00 03             		add	#0x300, r5
 3758 08dc FE 65 45                		mov.L	[r5,r4], r5
 3759 08df EF 34                   		mov.L	r3, r4
 3760 08e1 FC 37 54                		xor	r5, r4
 3761 08e4 ED A5 05                		mov.L	20[r10], r5
 3762 08e7 71 55 60                		add	#0x60, r5
 3763 08ea EC 55                   		mov.L	[r5], r5
 3764 08ec FC 37 45                		xor	r4, r5
 3765 08ef E7 A5 06                		mov.L	r5, 24[r10]
 3766 08f2 ED A5 01                		mov.L	4[r10], r5
 3767 08f5 69 85                   		shlr	#24, r5
 3768 08f7 5B 55                   		movu.B	r5, r5
 3769 08f9 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3770 08ff FE 65 43                		mov.L	[r5,r4], r3
 3771 0902 ED A5 02                		mov.L	8[r10], r5
 3772 0905 69 05                   		shlr	#16, r5
 3773 0907 5B 55                   		movu.B	r5, r5
 3774 0909 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3775 090f 72 55 00 01             		add	#0x100, r5
 3776 0913 FE 65 45                		mov.L	[r5,r4], r5
 3777 0916 FC 37 53                		xor	r5, r3
 3778 0919 ED A5 03                		mov.L	12[r10], r5
 3779 091c 68 85                   		shlr	#8, r5
 3780 091e 5B 55                   		movu.B	r5, r5
 3781 0920 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3782 0926 72 55 00 02             		add	#0x200, r5
 3783 092a FE 65 45                		mov.L	[r5,r4], r5
 3784 092d FC 37 53                		xor	r5, r3
 3785 0930 EC A5                   		mov.L	[r10], r5
 3786 0932 5B 55                   		movu.B	r5, r5
 3787 0934 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3788 093a 72 55 00 03             		add	#0x300, r5
 3789 093e FE 65 45                		mov.L	[r5,r4], r5
 3790 0941 EF 34                   		mov.L	r3, r4
 3791 0943 FC 37 54                		xor	r5, r4
 3792 0946 ED A5 05                		mov.L	20[r10], r5
 3793 0949 71 55 64                		add	#0x64, r5
 3794 094c EC 55                   		mov.L	[r5], r5
 3795 094e FC 37 45                		xor	r4, r5
 3796 0951 E7 A5 07                		mov.L	r5, 28[r10]
 3797 0954 ED A5 02                		mov.L	8[r10], r5
 3798 0957 69 85                   		shlr	#24, r5
 3799 0959 5B 55                   		movu.B	r5, r5
 3800 095b FB 42 00 00 00 00       		mov.L	#_Te, r4
 3801 0961 FE 65 43                		mov.L	[r5,r4], r3
 3802 0964 ED A5 03                		mov.L	12[r10], r5
 3803 0967 69 05                   		shlr	#16, r5
 3804 0969 5B 55                   		movu.B	r5, r5
 3805 096b FB 42 00 00 00 00       		mov.L	#_Te, r4
 3806 0971 72 55 00 01             		add	#0x100, r5
 3807 0975 FE 65 45                		mov.L	[r5,r4], r5
 3808 0978 FC 37 53                		xor	r5, r3
 3809 097b EC A5                   		mov.L	[r10], r5
 3810 097d 68 85                   		shlr	#8, r5
 3811 097f 5B 55                   		movu.B	r5, r5
 3812 0981 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3813 0987 72 55 00 02             		add	#0x200, r5
 3814 098b FE 65 45                		mov.L	[r5,r4], r5
 3815 098e FC 37 53                		xor	r5, r3
 3816 0991 ED A5 01                		mov.L	4[r10], r5
 3817 0994 5B 55                   		movu.B	r5, r5
 3818 0996 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3819 099c 72 55 00 03             		add	#0x300, r5
 3820 09a0 FE 65 45                		mov.L	[r5,r4], r5
 3821 09a3 EF 34                   		mov.L	r3, r4
 3822 09a5 FC 37 54                		xor	r5, r4
 3823 09a8 ED A5 05                		mov.L	20[r10], r5
 3824 09ab 71 55 68                		add	#0x68, r5
 3825 09ae EC 55                   		mov.L	[r5], r5
 3826 09b0 FC 37 45                		xor	r4, r5
 3827 09b3 E7 A5 08                		mov.L	r5, 32[r10]
 3828 09b6 ED A5 03                		mov.L	12[r10], r5
 3829 09b9 69 85                   		shlr	#24, r5
 3830 09bb 5B 55                   		movu.B	r5, r5
 3831 09bd FB 42 00 00 00 00       		mov.L	#_Te, r4
 3832 09c3 FE 65 43                		mov.L	[r5,r4], r3
 3833 09c6 EC A5                   		mov.L	[r10], r5
 3834 09c8 69 05                   		shlr	#16, r5
 3835 09ca 5B 55                   		movu.B	r5, r5
 3836 09cc FB 42 00 00 00 00       		mov.L	#_Te, r4
 3837 09d2 72 55 00 01             		add	#0x100, r5
 3838 09d6 FE 65 45                		mov.L	[r5,r4], r5
 3839 09d9 FC 37 53                		xor	r5, r3
 3840 09dc ED A5 01                		mov.L	4[r10], r5
 3841 09df 68 85                   		shlr	#8, r5
 3842 09e1 5B 55                   		movu.B	r5, r5
 3843 09e3 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3844 09e9 72 55 00 02             		add	#0x200, r5
 3845 09ed FE 65 45                		mov.L	[r5,r4], r5
 3846 09f0 FC 37 53                		xor	r5, r3
 3847 09f3 ED A5 02                		mov.L	8[r10], r5
 3848 09f6 5B 55                   		movu.B	r5, r5
 3849 09f8 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3850 09fe 72 55 00 03             		add	#0x300, r5
 3851 0a02 FE 65 45                		mov.L	[r5,r4], r5
 3852 0a05 EF 34                   		mov.L	r3, r4
 3853 0a07 FC 37 54                		xor	r5, r4
 3854 0a0a ED A5 05                		mov.L	20[r10], r5
 3855 0a0d 71 55 6C                		add	#0x6c, r5
 3856 0a10 EC 55                   		mov.L	[r5], r5
 3857 0a12 FC 37 45                		xor	r4, r5
 3858 0a15 E7 A5 09                		mov.L	r5, 36[r10]
 3859                             		.loc 2 1905 24
 3860 0a18 ED A5 06                		mov.L	24[r10], r5
 3861 0a1b 69 85                   		shlr	#24, r5
 3862 0a1d 5B 55                   		movu.B	r5, r5
 3863 0a1f FB 42 00 00 00 00       		mov.L	#_Te, r4
 3864 0a25 FE 65 43                		mov.L	[r5,r4], r3
 3865 0a28 ED A5 07                		mov.L	28[r10], r5
 3866 0a2b 69 05                   		shlr	#16, r5
 3867 0a2d 5B 55                   		movu.B	r5, r5
 3868 0a2f FB 42 00 00 00 00       		mov.L	#_Te, r4
 3869 0a35 72 55 00 01             		add	#0x100, r5
 3870 0a39 FE 65 45                		mov.L	[r5,r4], r5
 3871 0a3c FC 37 53                		xor	r5, r3
 3872 0a3f ED A5 08                		mov.L	32[r10], r5
 3873 0a42 68 85                   		shlr	#8, r5
 3874 0a44 5B 55                   		movu.B	r5, r5
 3875 0a46 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3876 0a4c 72 55 00 02             		add	#0x200, r5
 3877 0a50 FE 65 45                		mov.L	[r5,r4], r5
 3878 0a53 FC 37 53                		xor	r5, r3
 3879 0a56 ED A5 09                		mov.L	36[r10], r5
 3880 0a59 5B 55                   		movu.B	r5, r5
 3881 0a5b FB 42 00 00 00 00       		mov.L	#_Te, r4
 3882 0a61 72 55 00 03             		add	#0x300, r5
 3883 0a65 FE 65 45                		mov.L	[r5,r4], r5
 3884 0a68 EF 34                   		mov.L	r3, r4
 3885 0a6a FC 37 54                		xor	r5, r4
 3886 0a6d ED A5 05                		mov.L	20[r10], r5
 3887 0a70 71 55 70                		add	#0x70, r5
 3888 0a73 EC 55                   		mov.L	[r5], r5
 3889 0a75 FC 37 45                		xor	r4, r5
 3890 0a78 E3 A5                   		mov.L	r5, [r10]
 3891 0a7a ED A5 07                		mov.L	28[r10], r5
 3892 0a7d 69 85                   		shlr	#24, r5
 3893 0a7f 5B 55                   		movu.B	r5, r5
 3894 0a81 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3895 0a87 FE 65 43                		mov.L	[r5,r4], r3
 3896 0a8a ED A5 08                		mov.L	32[r10], r5
 3897 0a8d 69 05                   		shlr	#16, r5
 3898 0a8f 5B 55                   		movu.B	r5, r5
 3899 0a91 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3900 0a97 72 55 00 01             		add	#0x100, r5
 3901 0a9b FE 65 45                		mov.L	[r5,r4], r5
 3902 0a9e FC 37 53                		xor	r5, r3
 3903 0aa1 ED A5 09                		mov.L	36[r10], r5
 3904 0aa4 68 85                   		shlr	#8, r5
 3905 0aa6 5B 55                   		movu.B	r5, r5
 3906 0aa8 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3907 0aae 72 55 00 02             		add	#0x200, r5
 3908 0ab2 FE 65 45                		mov.L	[r5,r4], r5
 3909 0ab5 FC 37 53                		xor	r5, r3
 3910 0ab8 ED A5 06                		mov.L	24[r10], r5
 3911 0abb 5B 55                   		movu.B	r5, r5
 3912 0abd FB 42 00 00 00 00       		mov.L	#_Te, r4
 3913 0ac3 72 55 00 03             		add	#0x300, r5
 3914 0ac7 FE 65 45                		mov.L	[r5,r4], r5
 3915 0aca EF 34                   		mov.L	r3, r4
 3916 0acc FC 37 54                		xor	r5, r4
 3917 0acf ED A5 05                		mov.L	20[r10], r5
 3918 0ad2 71 55 74                		add	#0x74, r5
 3919 0ad5 EC 55                   		mov.L	[r5], r5
 3920 0ad7 FC 37 45                		xor	r4, r5
 3921 0ada E7 A5 01                		mov.L	r5, 4[r10]
 3922 0add ED A5 08                		mov.L	32[r10], r5
 3923 0ae0 69 85                   		shlr	#24, r5
 3924 0ae2 5B 55                   		movu.B	r5, r5
 3925 0ae4 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3926 0aea FE 65 43                		mov.L	[r5,r4], r3
 3927 0aed ED A5 09                		mov.L	36[r10], r5
 3928 0af0 69 05                   		shlr	#16, r5
 3929 0af2 5B 55                   		movu.B	r5, r5
 3930 0af4 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3931 0afa 72 55 00 01             		add	#0x100, r5
 3932 0afe FE 65 45                		mov.L	[r5,r4], r5
 3933 0b01 FC 37 53                		xor	r5, r3
 3934 0b04 ED A5 06                		mov.L	24[r10], r5
 3935 0b07 68 85                   		shlr	#8, r5
 3936 0b09 5B 55                   		movu.B	r5, r5
 3937 0b0b FB 42 00 00 00 00       		mov.L	#_Te, r4
 3938 0b11 72 55 00 02             		add	#0x200, r5
 3939 0b15 FE 65 45                		mov.L	[r5,r4], r5
 3940 0b18 FC 37 53                		xor	r5, r3
 3941 0b1b ED A5 07                		mov.L	28[r10], r5
 3942 0b1e 5B 55                   		movu.B	r5, r5
 3943 0b20 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3944 0b26 72 55 00 03             		add	#0x300, r5
 3945 0b2a FE 65 45                		mov.L	[r5,r4], r5
 3946 0b2d EF 34                   		mov.L	r3, r4
 3947 0b2f FC 37 54                		xor	r5, r4
 3948 0b32 ED A5 05                		mov.L	20[r10], r5
 3949 0b35 71 55 78                		add	#0x78, r5
 3950 0b38 EC 55                   		mov.L	[r5], r5
 3951 0b3a FC 37 45                		xor	r4, r5
 3952 0b3d E7 A5 02                		mov.L	r5, 8[r10]
 3953 0b40 ED A5 09                		mov.L	36[r10], r5
 3954 0b43 69 85                   		shlr	#24, r5
 3955 0b45 5B 55                   		movu.B	r5, r5
 3956 0b47 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3957 0b4d FE 65 43                		mov.L	[r5,r4], r3
 3958 0b50 ED A5 06                		mov.L	24[r10], r5
 3959 0b53 69 05                   		shlr	#16, r5
 3960 0b55 5B 55                   		movu.B	r5, r5
 3961 0b57 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3962 0b5d 72 55 00 01             		add	#0x100, r5
 3963 0b61 FE 65 45                		mov.L	[r5,r4], r5
 3964 0b64 FC 37 53                		xor	r5, r3
 3965 0b67 ED A5 07                		mov.L	28[r10], r5
 3966 0b6a 68 85                   		shlr	#8, r5
 3967 0b6c 5B 55                   		movu.B	r5, r5
 3968 0b6e FB 42 00 00 00 00       		mov.L	#_Te, r4
 3969 0b74 72 55 00 02             		add	#0x200, r5
 3970 0b78 FE 65 45                		mov.L	[r5,r4], r5
 3971 0b7b FC 37 53                		xor	r5, r3
 3972 0b7e ED A5 08                		mov.L	32[r10], r5
 3973 0b81 5B 55                   		movu.B	r5, r5
 3974 0b83 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3975 0b89 72 55 00 03             		add	#0x300, r5
 3976 0b8d FE 65 45                		mov.L	[r5,r4], r5
 3977 0b90 EF 34                   		mov.L	r3, r4
 3978 0b92 FC 37 54                		xor	r5, r4
 3979 0b95 ED A5 05                		mov.L	20[r10], r5
 3980 0b98 71 55 7C                		add	#0x7c, r5
 3981 0b9b EC 55                   		mov.L	[r5], r5
 3982 0b9d FC 37 45                		xor	r4, r5
 3983 0ba0 E7 A5 03                		mov.L	r5, 12[r10]
1906:../src/wolfcrypt/src/aes.c ****     ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
 3984                             		.loc 2 1906 5
 3985 0ba3 EC A5                   		mov.L	[r10], r5
 3986 0ba5 69 85                   		shlr	#24, r5
 3987 0ba7 5B 55                   		movu.B	r5, r5
 3988 0ba9 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3989 0baf FE 65 43                		mov.L	[r5,r4], r3
 3990 0bb2 ED A5 01                		mov.L	4[r10], r5
 3991 0bb5 69 05                   		shlr	#16, r5
 3992 0bb7 5B 55                   		movu.B	r5, r5
 3993 0bb9 FB 42 00 00 00 00       		mov.L	#_Te, r4
 3994 0bbf 72 55 00 01             		add	#0x100, r5
 3995 0bc3 FE 65 45                		mov.L	[r5,r4], r5
 3996 0bc6 FC 37 53                		xor	r5, r3
 3997 0bc9 ED A5 02                		mov.L	8[r10], r5
 3998 0bcc 68 85                   		shlr	#8, r5
 3999 0bce 5B 55                   		movu.B	r5, r5
 4000 0bd0 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4001 0bd6 72 55 00 02             		add	#0x200, r5
 4002 0bda FE 65 45                		mov.L	[r5,r4], r5
 4003 0bdd FC 37 53                		xor	r5, r3
 4004 0be0 ED A5 03                		mov.L	12[r10], r5
 4005 0be3 5B 55                   		movu.B	r5, r5
 4006 0be5 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4007 0beb 72 55 00 03             		add	#0x300, r5
 4008 0bef FE 65 45                		mov.L	[r5,r4], r5
 4009 0bf2 EF 34                   		mov.L	r3, r4
 4010 0bf4 FC 37 54                		xor	r5, r4
 4011 0bf7 ED A5 05                		mov.L	20[r10], r5
 4012 0bfa 72 55 80 00             		add	#0x80, r5
 4013 0bfe EC 55                   		mov.L	[r5], r5
 4014 0c00 FC 37 45                		xor	r4, r5
 4015 0c03 E7 A5 06                		mov.L	r5, 24[r10]
 4016 0c06 ED A5 01                		mov.L	4[r10], r5
 4017 0c09 69 85                   		shlr	#24, r5
 4018 0c0b 5B 55                   		movu.B	r5, r5
 4019 0c0d FB 42 00 00 00 00       		mov.L	#_Te, r4
 4020 0c13 FE 65 43                		mov.L	[r5,r4], r3
 4021 0c16 ED A5 02                		mov.L	8[r10], r5
 4022 0c19 69 05                   		shlr	#16, r5
 4023 0c1b 5B 55                   		movu.B	r5, r5
 4024 0c1d FB 42 00 00 00 00       		mov.L	#_Te, r4
 4025 0c23 72 55 00 01             		add	#0x100, r5
 4026 0c27 FE 65 45                		mov.L	[r5,r4], r5
 4027 0c2a FC 37 53                		xor	r5, r3
 4028 0c2d ED A5 03                		mov.L	12[r10], r5
 4029 0c30 68 85                   		shlr	#8, r5
 4030 0c32 5B 55                   		movu.B	r5, r5
 4031 0c34 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4032 0c3a 72 55 00 02             		add	#0x200, r5
 4033 0c3e FE 65 45                		mov.L	[r5,r4], r5
 4034 0c41 FC 37 53                		xor	r5, r3
 4035 0c44 EC A5                   		mov.L	[r10], r5
 4036 0c46 5B 55                   		movu.B	r5, r5
 4037 0c48 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4038 0c4e 72 55 00 03             		add	#0x300, r5
 4039 0c52 FE 65 45                		mov.L	[r5,r4], r5
 4040 0c55 EF 34                   		mov.L	r3, r4
 4041 0c57 FC 37 54                		xor	r5, r4
 4042 0c5a ED A5 05                		mov.L	20[r10], r5
 4043 0c5d 72 55 84 00             		add	#0x84, r5
 4044 0c61 EC 55                   		mov.L	[r5], r5
 4045 0c63 FC 37 45                		xor	r4, r5
 4046 0c66 E7 A5 07                		mov.L	r5, 28[r10]
 4047 0c69 ED A5 02                		mov.L	8[r10], r5
 4048 0c6c 69 85                   		shlr	#24, r5
 4049 0c6e 5B 55                   		movu.B	r5, r5
 4050 0c70 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4051 0c76 FE 65 43                		mov.L	[r5,r4], r3
 4052 0c79 ED A5 03                		mov.L	12[r10], r5
 4053 0c7c 69 05                   		shlr	#16, r5
 4054 0c7e 5B 55                   		movu.B	r5, r5
 4055 0c80 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4056 0c86 72 55 00 01             		add	#0x100, r5
 4057 0c8a FE 65 45                		mov.L	[r5,r4], r5
 4058 0c8d FC 37 53                		xor	r5, r3
 4059 0c90 EC A5                   		mov.L	[r10], r5
 4060 0c92 68 85                   		shlr	#8, r5
 4061 0c94 5B 55                   		movu.B	r5, r5
 4062 0c96 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4063 0c9c 72 55 00 02             		add	#0x200, r5
 4064 0ca0 FE 65 45                		mov.L	[r5,r4], r5
 4065 0ca3 FC 37 53                		xor	r5, r3
 4066 0ca6 ED A5 01                		mov.L	4[r10], r5
 4067 0ca9 5B 55                   		movu.B	r5, r5
 4068 0cab FB 42 00 00 00 00       		mov.L	#_Te, r4
 4069 0cb1 72 55 00 03             		add	#0x300, r5
 4070 0cb5 FE 65 45                		mov.L	[r5,r4], r5
 4071 0cb8 EF 34                   		mov.L	r3, r4
 4072 0cba FC 37 54                		xor	r5, r4
 4073 0cbd ED A5 05                		mov.L	20[r10], r5
 4074 0cc0 72 55 88 00             		add	#0x88, r5
 4075 0cc4 EC 55                   		mov.L	[r5], r5
 4076 0cc6 FC 37 45                		xor	r4, r5
 4077 0cc9 E7 A5 08                		mov.L	r5, 32[r10]
 4078 0ccc ED A5 03                		mov.L	12[r10], r5
 4079 0ccf 69 85                   		shlr	#24, r5
 4080 0cd1 5B 55                   		movu.B	r5, r5
 4081 0cd3 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4082 0cd9 FE 65 43                		mov.L	[r5,r4], r3
 4083 0cdc EC A5                   		mov.L	[r10], r5
 4084 0cde 69 05                   		shlr	#16, r5
 4085 0ce0 5B 55                   		movu.B	r5, r5
 4086 0ce2 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4087 0ce8 72 55 00 01             		add	#0x100, r5
 4088 0cec FE 65 45                		mov.L	[r5,r4], r5
 4089 0cef FC 37 53                		xor	r5, r3
 4090 0cf2 ED A5 01                		mov.L	4[r10], r5
 4091 0cf5 68 85                   		shlr	#8, r5
 4092 0cf7 5B 55                   		movu.B	r5, r5
 4093 0cf9 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4094 0cff 72 55 00 02             		add	#0x200, r5
 4095 0d03 FE 65 45                		mov.L	[r5,r4], r5
 4096 0d06 FC 37 53                		xor	r5, r3
 4097 0d09 ED A5 02                		mov.L	8[r10], r5
 4098 0d0c 5B 55                   		movu.B	r5, r5
 4099 0d0e FB 42 00 00 00 00       		mov.L	#_Te, r4
 4100 0d14 72 55 00 03             		add	#0x300, r5
 4101 0d18 FE 65 45                		mov.L	[r5,r4], r5
 4102 0d1b EF 34                   		mov.L	r3, r4
 4103 0d1d FC 37 54                		xor	r5, r4
 4104 0d20 ED A5 05                		mov.L	20[r10], r5
 4105 0d23 72 55 8C 00             		add	#0x8c, r5
 4106 0d27 EC 55                   		mov.L	[r5], r5
 4107 0d29 FC 37 45                		xor	r4, r5
 4108 0d2c E7 A5 09                		mov.L	r5, 36[r10]
 4109                             		.loc 2 1906 24
 4110 0d2f ED A5 06                		mov.L	24[r10], r5
 4111 0d32 69 85                   		shlr	#24, r5
 4112 0d34 5B 55                   		movu.B	r5, r5
 4113 0d36 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4114 0d3c FE 65 43                		mov.L	[r5,r4], r3
 4115 0d3f ED A5 07                		mov.L	28[r10], r5
 4116 0d42 69 05                   		shlr	#16, r5
 4117 0d44 5B 55                   		movu.B	r5, r5
 4118 0d46 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4119 0d4c 72 55 00 01             		add	#0x100, r5
 4120 0d50 FE 65 45                		mov.L	[r5,r4], r5
 4121 0d53 FC 37 53                		xor	r5, r3
 4122 0d56 ED A5 08                		mov.L	32[r10], r5
 4123 0d59 68 85                   		shlr	#8, r5
 4124 0d5b 5B 55                   		movu.B	r5, r5
 4125 0d5d FB 42 00 00 00 00       		mov.L	#_Te, r4
 4126 0d63 72 55 00 02             		add	#0x200, r5
 4127 0d67 FE 65 45                		mov.L	[r5,r4], r5
 4128 0d6a FC 37 53                		xor	r5, r3
 4129 0d6d ED A5 09                		mov.L	36[r10], r5
 4130 0d70 5B 55                   		movu.B	r5, r5
 4131 0d72 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4132 0d78 72 55 00 03             		add	#0x300, r5
 4133 0d7c FE 65 45                		mov.L	[r5,r4], r5
 4134 0d7f EF 34                   		mov.L	r3, r4
 4135 0d81 FC 37 54                		xor	r5, r4
 4136 0d84 ED A5 05                		mov.L	20[r10], r5
 4137 0d87 72 55 90 00             		add	#0x90, r5
 4138 0d8b EC 55                   		mov.L	[r5], r5
 4139 0d8d FC 37 45                		xor	r4, r5
 4140 0d90 E3 A5                   		mov.L	r5, [r10]
 4141 0d92 ED A5 07                		mov.L	28[r10], r5
 4142 0d95 69 85                   		shlr	#24, r5
 4143 0d97 5B 55                   		movu.B	r5, r5
 4144 0d99 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4145 0d9f FE 65 43                		mov.L	[r5,r4], r3
 4146 0da2 ED A5 08                		mov.L	32[r10], r5
 4147 0da5 69 05                   		shlr	#16, r5
 4148 0da7 5B 55                   		movu.B	r5, r5
 4149 0da9 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4150 0daf 72 55 00 01             		add	#0x100, r5
 4151 0db3 FE 65 45                		mov.L	[r5,r4], r5
 4152 0db6 FC 37 53                		xor	r5, r3
 4153 0db9 ED A5 09                		mov.L	36[r10], r5
 4154 0dbc 68 85                   		shlr	#8, r5
 4155 0dbe 5B 55                   		movu.B	r5, r5
 4156 0dc0 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4157 0dc6 72 55 00 02             		add	#0x200, r5
 4158 0dca FE 65 45                		mov.L	[r5,r4], r5
 4159 0dcd FC 37 53                		xor	r5, r3
 4160 0dd0 ED A5 06                		mov.L	24[r10], r5
 4161 0dd3 5B 55                   		movu.B	r5, r5
 4162 0dd5 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4163 0ddb 72 55 00 03             		add	#0x300, r5
 4164 0ddf FE 65 45                		mov.L	[r5,r4], r5
 4165 0de2 EF 34                   		mov.L	r3, r4
 4166 0de4 FC 37 54                		xor	r5, r4
 4167 0de7 ED A5 05                		mov.L	20[r10], r5
 4168 0dea 72 55 94 00             		add	#0x94, r5
 4169 0dee EC 55                   		mov.L	[r5], r5
 4170 0df0 FC 37 45                		xor	r4, r5
 4171 0df3 E7 A5 01                		mov.L	r5, 4[r10]
 4172 0df6 ED A5 08                		mov.L	32[r10], r5
 4173 0df9 69 85                   		shlr	#24, r5
 4174 0dfb 5B 55                   		movu.B	r5, r5
 4175 0dfd FB 42 00 00 00 00       		mov.L	#_Te, r4
 4176 0e03 FE 65 43                		mov.L	[r5,r4], r3
 4177 0e06 ED A5 09                		mov.L	36[r10], r5
 4178 0e09 69 05                   		shlr	#16, r5
 4179 0e0b 5B 55                   		movu.B	r5, r5
 4180 0e0d FB 42 00 00 00 00       		mov.L	#_Te, r4
 4181 0e13 72 55 00 01             		add	#0x100, r5
 4182 0e17 FE 65 45                		mov.L	[r5,r4], r5
 4183 0e1a FC 37 53                		xor	r5, r3
 4184 0e1d ED A5 06                		mov.L	24[r10], r5
 4185 0e20 68 85                   		shlr	#8, r5
 4186 0e22 5B 55                   		movu.B	r5, r5
 4187 0e24 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4188 0e2a 72 55 00 02             		add	#0x200, r5
 4189 0e2e FE 65 45                		mov.L	[r5,r4], r5
 4190 0e31 FC 37 53                		xor	r5, r3
 4191 0e34 ED A5 07                		mov.L	28[r10], r5
 4192 0e37 5B 55                   		movu.B	r5, r5
 4193 0e39 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4194 0e3f 72 55 00 03             		add	#0x300, r5
 4195 0e43 FE 65 45                		mov.L	[r5,r4], r5
 4196 0e46 EF 34                   		mov.L	r3, r4
 4197 0e48 FC 37 54                		xor	r5, r4
 4198 0e4b ED A5 05                		mov.L	20[r10], r5
 4199 0e4e 72 55 98 00             		add	#0x98, r5
 4200 0e52 EC 55                   		mov.L	[r5], r5
 4201 0e54 FC 37 45                		xor	r4, r5
 4202 0e57 E7 A5 02                		mov.L	r5, 8[r10]
 4203 0e5a ED A5 09                		mov.L	36[r10], r5
 4204 0e5d 69 85                   		shlr	#24, r5
 4205 0e5f 5B 55                   		movu.B	r5, r5
 4206 0e61 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4207 0e67 FE 65 43                		mov.L	[r5,r4], r3
 4208 0e6a ED A5 06                		mov.L	24[r10], r5
 4209 0e6d 69 05                   		shlr	#16, r5
 4210 0e6f 5B 55                   		movu.B	r5, r5
 4211 0e71 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4212 0e77 72 55 00 01             		add	#0x100, r5
 4213 0e7b FE 65 45                		mov.L	[r5,r4], r5
 4214 0e7e FC 37 53                		xor	r5, r3
 4215 0e81 ED A5 07                		mov.L	28[r10], r5
 4216 0e84 68 85                   		shlr	#8, r5
 4217 0e86 5B 55                   		movu.B	r5, r5
 4218 0e88 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4219 0e8e 72 55 00 02             		add	#0x200, r5
 4220 0e92 FE 65 45                		mov.L	[r5,r4], r5
 4221 0e95 FC 37 53                		xor	r5, r3
 4222 0e98 ED A5 08                		mov.L	32[r10], r5
 4223 0e9b 5B 55                   		movu.B	r5, r5
 4224 0e9d FB 42 00 00 00 00       		mov.L	#_Te, r4
 4225 0ea3 72 55 00 03             		add	#0x300, r5
 4226 0ea7 FE 65 45                		mov.L	[r5,r4], r5
 4227 0eaa EF 34                   		mov.L	r3, r4
 4228 0eac FC 37 54                		xor	r5, r4
 4229 0eaf ED A5 05                		mov.L	20[r10], r5
 4230 0eb2 72 55 9C 00             		add	#0x9c, r5
 4231 0eb6 EC 55                   		mov.L	[r5], r5
 4232 0eb8 FC 37 45                		xor	r4, r5
 4233 0ebb E7 A5 03                		mov.L	r5, 12[r10]
1907:../src/wolfcrypt/src/aes.c ****     if (r > 5) {
 4234                             		.loc 2 1907 8
 4235 0ebe ED A5 04                		mov.L	16[r10], r5
 4236 0ec1 61 55                   		cmp	#5, r5
 4237 0ec3 24 05 38 43 06          		bleu	.L48
1908:../src/wolfcrypt/src/aes.c ****         ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
 4238                             		.loc 2 1908 9
 4239 0ec8 EC A5                   		mov.L	[r10], r5
 4240 0eca 69 85                   		shlr	#24, r5
 4241 0ecc 5B 55                   		movu.B	r5, r5
 4242 0ece FB 42 00 00 00 00       		mov.L	#_Te, r4
 4243 0ed4 FE 65 43                		mov.L	[r5,r4], r3
 4244 0ed7 ED A5 01                		mov.L	4[r10], r5
 4245 0eda 69 05                   		shlr	#16, r5
 4246 0edc 5B 55                   		movu.B	r5, r5
 4247 0ede FB 42 00 00 00 00       		mov.L	#_Te, r4
 4248 0ee4 72 55 00 01             		add	#0x100, r5
 4249 0ee8 FE 65 45                		mov.L	[r5,r4], r5
 4250 0eeb FC 37 53                		xor	r5, r3
 4251 0eee ED A5 02                		mov.L	8[r10], r5
 4252 0ef1 68 85                   		shlr	#8, r5
 4253 0ef3 5B 55                   		movu.B	r5, r5
 4254 0ef5 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4255 0efb 72 55 00 02             		add	#0x200, r5
 4256 0eff FE 65 45                		mov.L	[r5,r4], r5
 4257 0f02 FC 37 53                		xor	r5, r3
 4258 0f05 ED A5 03                		mov.L	12[r10], r5
 4259 0f08 5B 55                   		movu.B	r5, r5
 4260 0f0a FB 42 00 00 00 00       		mov.L	#_Te, r4
 4261 0f10 72 55 00 03             		add	#0x300, r5
 4262 0f14 FE 65 45                		mov.L	[r5,r4], r5
 4263 0f17 EF 34                   		mov.L	r3, r4
 4264 0f19 FC 37 54                		xor	r5, r4
 4265 0f1c ED A5 05                		mov.L	20[r10], r5
 4266 0f1f 72 55 A0 00             		add	#0xa0, r5
 4267 0f23 EC 55                   		mov.L	[r5], r5
 4268 0f25 FC 37 45                		xor	r4, r5
 4269 0f28 E7 A5 06                		mov.L	r5, 24[r10]
 4270 0f2b ED A5 01                		mov.L	4[r10], r5
 4271 0f2e 69 85                   		shlr	#24, r5
 4272 0f30 5B 55                   		movu.B	r5, r5
 4273 0f32 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4274 0f38 FE 65 43                		mov.L	[r5,r4], r3
 4275 0f3b ED A5 02                		mov.L	8[r10], r5
 4276 0f3e 69 05                   		shlr	#16, r5
 4277 0f40 5B 55                   		movu.B	r5, r5
 4278 0f42 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4279 0f48 72 55 00 01             		add	#0x100, r5
 4280 0f4c FE 65 45                		mov.L	[r5,r4], r5
 4281 0f4f FC 37 53                		xor	r5, r3
 4282 0f52 ED A5 03                		mov.L	12[r10], r5
 4283 0f55 68 85                   		shlr	#8, r5
 4284 0f57 5B 55                   		movu.B	r5, r5
 4285 0f59 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4286 0f5f 72 55 00 02             		add	#0x200, r5
 4287 0f63 FE 65 45                		mov.L	[r5,r4], r5
 4288 0f66 FC 37 53                		xor	r5, r3
 4289 0f69 EC A5                   		mov.L	[r10], r5
 4290 0f6b 5B 55                   		movu.B	r5, r5
 4291 0f6d FB 42 00 00 00 00       		mov.L	#_Te, r4
 4292 0f73 72 55 00 03             		add	#0x300, r5
 4293 0f77 FE 65 45                		mov.L	[r5,r4], r5
 4294 0f7a EF 34                   		mov.L	r3, r4
 4295 0f7c FC 37 54                		xor	r5, r4
 4296 0f7f ED A5 05                		mov.L	20[r10], r5
 4297 0f82 72 55 A4 00             		add	#0xa4, r5
 4298 0f86 EC 55                   		mov.L	[r5], r5
 4299 0f88 FC 37 45                		xor	r4, r5
 4300 0f8b E7 A5 07                		mov.L	r5, 28[r10]
 4301 0f8e ED A5 02                		mov.L	8[r10], r5
 4302 0f91 69 85                   		shlr	#24, r5
 4303 0f93 5B 55                   		movu.B	r5, r5
 4304 0f95 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4305 0f9b FE 65 43                		mov.L	[r5,r4], r3
 4306 0f9e ED A5 03                		mov.L	12[r10], r5
 4307 0fa1 69 05                   		shlr	#16, r5
 4308 0fa3 5B 55                   		movu.B	r5, r5
 4309 0fa5 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4310 0fab 72 55 00 01             		add	#0x100, r5
 4311 0faf FE 65 45                		mov.L	[r5,r4], r5
 4312 0fb2 FC 37 53                		xor	r5, r3
 4313 0fb5 EC A5                   		mov.L	[r10], r5
 4314 0fb7 68 85                   		shlr	#8, r5
 4315 0fb9 5B 55                   		movu.B	r5, r5
 4316 0fbb FB 42 00 00 00 00       		mov.L	#_Te, r4
 4317 0fc1 72 55 00 02             		add	#0x200, r5
 4318 0fc5 FE 65 45                		mov.L	[r5,r4], r5
 4319 0fc8 FC 37 53                		xor	r5, r3
 4320 0fcb ED A5 01                		mov.L	4[r10], r5
 4321 0fce 5B 55                   		movu.B	r5, r5
 4322 0fd0 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4323 0fd6 72 55 00 03             		add	#0x300, r5
 4324 0fda FE 65 45                		mov.L	[r5,r4], r5
 4325 0fdd EF 34                   		mov.L	r3, r4
 4326 0fdf FC 37 54                		xor	r5, r4
 4327 0fe2 ED A5 05                		mov.L	20[r10], r5
 4328 0fe5 72 55 A8 00             		add	#0xa8, r5
 4329 0fe9 EC 55                   		mov.L	[r5], r5
 4330 0feb FC 37 45                		xor	r4, r5
 4331 0fee E7 A5 08                		mov.L	r5, 32[r10]
 4332 0ff1 ED A5 03                		mov.L	12[r10], r5
 4333 0ff4 69 85                   		shlr	#24, r5
 4334 0ff6 5B 55                   		movu.B	r5, r5
 4335 0ff8 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4336 0ffe FE 65 43                		mov.L	[r5,r4], r3
 4337 1001 EC A5                   		mov.L	[r10], r5
 4338 1003 69 05                   		shlr	#16, r5
 4339 1005 5B 55                   		movu.B	r5, r5
 4340 1007 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4341 100d 72 55 00 01             		add	#0x100, r5
 4342 1011 FE 65 45                		mov.L	[r5,r4], r5
 4343 1014 FC 37 53                		xor	r5, r3
 4344 1017 ED A5 01                		mov.L	4[r10], r5
 4345 101a 68 85                   		shlr	#8, r5
 4346 101c 5B 55                   		movu.B	r5, r5
 4347 101e FB 42 00 00 00 00       		mov.L	#_Te, r4
 4348 1024 72 55 00 02             		add	#0x200, r5
 4349 1028 FE 65 45                		mov.L	[r5,r4], r5
 4350 102b FC 37 53                		xor	r5, r3
 4351 102e ED A5 02                		mov.L	8[r10], r5
 4352 1031 5B 55                   		movu.B	r5, r5
 4353 1033 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4354 1039 72 55 00 03             		add	#0x300, r5
 4355 103d FE 65 45                		mov.L	[r5,r4], r5
 4356 1040 EF 34                   		mov.L	r3, r4
 4357 1042 FC 37 54                		xor	r5, r4
 4358 1045 ED A5 05                		mov.L	20[r10], r5
 4359 1048 72 55 AC 00             		add	#0xac, r5
 4360 104c EC 55                   		mov.L	[r5], r5
 4361 104e FC 37 45                		xor	r4, r5
 4362 1051 E7 A5 09                		mov.L	r5, 36[r10]
 4363                             		.loc 2 1908 28
 4364 1054 ED A5 06                		mov.L	24[r10], r5
 4365 1057 69 85                   		shlr	#24, r5
 4366 1059 5B 55                   		movu.B	r5, r5
 4367 105b FB 42 00 00 00 00       		mov.L	#_Te, r4
 4368 1061 FE 65 43                		mov.L	[r5,r4], r3
 4369 1064 ED A5 07                		mov.L	28[r10], r5
 4370 1067 69 05                   		shlr	#16, r5
 4371 1069 5B 55                   		movu.B	r5, r5
 4372 106b FB 42 00 00 00 00       		mov.L	#_Te, r4
 4373 1071 72 55 00 01             		add	#0x100, r5
 4374 1075 FE 65 45                		mov.L	[r5,r4], r5
 4375 1078 FC 37 53                		xor	r5, r3
 4376 107b ED A5 08                		mov.L	32[r10], r5
 4377 107e 68 85                   		shlr	#8, r5
 4378 1080 5B 55                   		movu.B	r5, r5
 4379 1082 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4380 1088 72 55 00 02             		add	#0x200, r5
 4381 108c FE 65 45                		mov.L	[r5,r4], r5
 4382 108f FC 37 53                		xor	r5, r3
 4383 1092 ED A5 09                		mov.L	36[r10], r5
 4384 1095 5B 55                   		movu.B	r5, r5
 4385 1097 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4386 109d 72 55 00 03             		add	#0x300, r5
 4387 10a1 FE 65 45                		mov.L	[r5,r4], r5
 4388 10a4 EF 34                   		mov.L	r3, r4
 4389 10a6 FC 37 54                		xor	r5, r4
 4390 10a9 ED A5 05                		mov.L	20[r10], r5
 4391 10ac 72 55 B0 00             		add	#0xb0, r5
 4392 10b0 EC 55                   		mov.L	[r5], r5
 4393 10b2 FC 37 45                		xor	r4, r5
 4394 10b5 E3 A5                   		mov.L	r5, [r10]
 4395 10b7 ED A5 07                		mov.L	28[r10], r5
 4396 10ba 69 85                   		shlr	#24, r5
 4397 10bc 5B 55                   		movu.B	r5, r5
 4398 10be FB 42 00 00 00 00       		mov.L	#_Te, r4
 4399 10c4 FE 65 43                		mov.L	[r5,r4], r3
 4400 10c7 ED A5 08                		mov.L	32[r10], r5
 4401 10ca 69 05                   		shlr	#16, r5
 4402 10cc 5B 55                   		movu.B	r5, r5
 4403 10ce FB 42 00 00 00 00       		mov.L	#_Te, r4
 4404 10d4 72 55 00 01             		add	#0x100, r5
 4405 10d8 FE 65 45                		mov.L	[r5,r4], r5
 4406 10db FC 37 53                		xor	r5, r3
 4407 10de ED A5 09                		mov.L	36[r10], r5
 4408 10e1 68 85                   		shlr	#8, r5
 4409 10e3 5B 55                   		movu.B	r5, r5
 4410 10e5 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4411 10eb 72 55 00 02             		add	#0x200, r5
 4412 10ef FE 65 45                		mov.L	[r5,r4], r5
 4413 10f2 FC 37 53                		xor	r5, r3
 4414 10f5 ED A5 06                		mov.L	24[r10], r5
 4415 10f8 5B 55                   		movu.B	r5, r5
 4416 10fa FB 42 00 00 00 00       		mov.L	#_Te, r4
 4417 1100 72 55 00 03             		add	#0x300, r5
 4418 1104 FE 65 45                		mov.L	[r5,r4], r5
 4419 1107 EF 34                   		mov.L	r3, r4
 4420 1109 FC 37 54                		xor	r5, r4
 4421 110c ED A5 05                		mov.L	20[r10], r5
 4422 110f 72 55 B4 00             		add	#0xb4, r5
 4423 1113 EC 55                   		mov.L	[r5], r5
 4424 1115 FC 37 45                		xor	r4, r5
 4425 1118 E7 A5 01                		mov.L	r5, 4[r10]
 4426 111b ED A5 08                		mov.L	32[r10], r5
 4427 111e 69 85                   		shlr	#24, r5
 4428 1120 5B 55                   		movu.B	r5, r5
 4429 1122 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4430 1128 FE 65 43                		mov.L	[r5,r4], r3
 4431 112b ED A5 09                		mov.L	36[r10], r5
 4432 112e 69 05                   		shlr	#16, r5
 4433 1130 5B 55                   		movu.B	r5, r5
 4434 1132 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4435 1138 72 55 00 01             		add	#0x100, r5
 4436 113c FE 65 45                		mov.L	[r5,r4], r5
 4437 113f FC 37 53                		xor	r5, r3
 4438 1142 ED A5 06                		mov.L	24[r10], r5
 4439 1145 68 85                   		shlr	#8, r5
 4440 1147 5B 55                   		movu.B	r5, r5
 4441 1149 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4442 114f 72 55 00 02             		add	#0x200, r5
 4443 1153 FE 65 45                		mov.L	[r5,r4], r5
 4444 1156 FC 37 53                		xor	r5, r3
 4445 1159 ED A5 07                		mov.L	28[r10], r5
 4446 115c 5B 55                   		movu.B	r5, r5
 4447 115e FB 42 00 00 00 00       		mov.L	#_Te, r4
 4448 1164 72 55 00 03             		add	#0x300, r5
 4449 1168 FE 65 45                		mov.L	[r5,r4], r5
 4450 116b EF 34                   		mov.L	r3, r4
 4451 116d FC 37 54                		xor	r5, r4
 4452 1170 ED A5 05                		mov.L	20[r10], r5
 4453 1173 72 55 B8 00             		add	#0xb8, r5
 4454 1177 EC 55                   		mov.L	[r5], r5
 4455 1179 FC 37 45                		xor	r4, r5
 4456 117c E7 A5 02                		mov.L	r5, 8[r10]
 4457 117f ED A5 09                		mov.L	36[r10], r5
 4458 1182 69 85                   		shlr	#24, r5
 4459 1184 5B 55                   		movu.B	r5, r5
 4460 1186 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4461 118c FE 65 43                		mov.L	[r5,r4], r3
 4462 118f ED A5 06                		mov.L	24[r10], r5
 4463 1192 69 05                   		shlr	#16, r5
 4464 1194 5B 55                   		movu.B	r5, r5
 4465 1196 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4466 119c 72 55 00 01             		add	#0x100, r5
 4467 11a0 FE 65 45                		mov.L	[r5,r4], r5
 4468 11a3 FC 37 53                		xor	r5, r3
 4469 11a6 ED A5 07                		mov.L	28[r10], r5
 4470 11a9 68 85                   		shlr	#8, r5
 4471 11ab 5B 55                   		movu.B	r5, r5
 4472 11ad FB 42 00 00 00 00       		mov.L	#_Te, r4
 4473 11b3 72 55 00 02             		add	#0x200, r5
 4474 11b7 FE 65 45                		mov.L	[r5,r4], r5
 4475 11ba FC 37 53                		xor	r5, r3
 4476 11bd ED A5 08                		mov.L	32[r10], r5
 4477 11c0 5B 55                   		movu.B	r5, r5
 4478 11c2 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4479 11c8 72 55 00 03             		add	#0x300, r5
 4480 11cc FE 65 45                		mov.L	[r5,r4], r5
 4481 11cf EF 34                   		mov.L	r3, r4
 4482 11d1 FC 37 54                		xor	r5, r4
 4483 11d4 ED A5 05                		mov.L	20[r10], r5
 4484 11d7 72 55 BC 00             		add	#0xbc, r5
 4485 11db EC 55                   		mov.L	[r5], r5
 4486 11dd FC 37 45                		xor	r4, r5
 4487 11e0 E7 A5 03                		mov.L	r5, 12[r10]
1909:../src/wolfcrypt/src/aes.c ****         if (r > 6) {
 4488                             		.loc 2 1909 12
 4489 11e3 ED A5 04                		mov.L	16[r10], r5
 4490 11e6 61 65                   		cmp	#6, r5
 4491 11e8 24 05 38 1E 03          		bleu	.L48
1910:../src/wolfcrypt/src/aes.c ****             ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
 4492                             		.loc 2 1910 13
 4493 11ed EC A5                   		mov.L	[r10], r5
 4494 11ef 69 85                   		shlr	#24, r5
 4495 11f1 5B 55                   		movu.B	r5, r5
 4496 11f3 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4497 11f9 FE 65 43                		mov.L	[r5,r4], r3
 4498 11fc ED A5 01                		mov.L	4[r10], r5
 4499 11ff 69 05                   		shlr	#16, r5
 4500 1201 5B 55                   		movu.B	r5, r5
 4501 1203 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4502 1209 72 55 00 01             		add	#0x100, r5
 4503 120d FE 65 45                		mov.L	[r5,r4], r5
 4504 1210 FC 37 53                		xor	r5, r3
 4505 1213 ED A5 02                		mov.L	8[r10], r5
 4506 1216 68 85                   		shlr	#8, r5
 4507 1218 5B 55                   		movu.B	r5, r5
 4508 121a FB 42 00 00 00 00       		mov.L	#_Te, r4
 4509 1220 72 55 00 02             		add	#0x200, r5
 4510 1224 FE 65 45                		mov.L	[r5,r4], r5
 4511 1227 FC 37 53                		xor	r5, r3
 4512 122a ED A5 03                		mov.L	12[r10], r5
 4513 122d 5B 55                   		movu.B	r5, r5
 4514 122f FB 42 00 00 00 00       		mov.L	#_Te, r4
 4515 1235 72 55 00 03             		add	#0x300, r5
 4516 1239 FE 65 45                		mov.L	[r5,r4], r5
 4517 123c EF 34                   		mov.L	r3, r4
 4518 123e FC 37 54                		xor	r5, r4
 4519 1241 ED A5 05                		mov.L	20[r10], r5
 4520 1244 72 55 C0 00             		add	#0xc0, r5
 4521 1248 EC 55                   		mov.L	[r5], r5
 4522 124a FC 37 45                		xor	r4, r5
 4523 124d E7 A5 06                		mov.L	r5, 24[r10]
 4524 1250 ED A5 01                		mov.L	4[r10], r5
 4525 1253 69 85                   		shlr	#24, r5
 4526 1255 5B 55                   		movu.B	r5, r5
 4527 1257 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4528 125d FE 65 43                		mov.L	[r5,r4], r3
 4529 1260 ED A5 02                		mov.L	8[r10], r5
 4530 1263 69 05                   		shlr	#16, r5
 4531 1265 5B 55                   		movu.B	r5, r5
 4532 1267 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4533 126d 72 55 00 01             		add	#0x100, r5
 4534 1271 FE 65 45                		mov.L	[r5,r4], r5
 4535 1274 FC 37 53                		xor	r5, r3
 4536 1277 ED A5 03                		mov.L	12[r10], r5
 4537 127a 68 85                   		shlr	#8, r5
 4538 127c 5B 55                   		movu.B	r5, r5
 4539 127e FB 42 00 00 00 00       		mov.L	#_Te, r4
 4540 1284 72 55 00 02             		add	#0x200, r5
 4541 1288 FE 65 45                		mov.L	[r5,r4], r5
 4542 128b FC 37 53                		xor	r5, r3
 4543 128e EC A5                   		mov.L	[r10], r5
 4544 1290 5B 55                   		movu.B	r5, r5
 4545 1292 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4546 1298 72 55 00 03             		add	#0x300, r5
 4547 129c FE 65 45                		mov.L	[r5,r4], r5
 4548 129f EF 34                   		mov.L	r3, r4
 4549 12a1 FC 37 54                		xor	r5, r4
 4550 12a4 ED A5 05                		mov.L	20[r10], r5
 4551 12a7 72 55 C4 00             		add	#0xc4, r5
 4552 12ab EC 55                   		mov.L	[r5], r5
 4553 12ad FC 37 45                		xor	r4, r5
 4554 12b0 E7 A5 07                		mov.L	r5, 28[r10]
 4555 12b3 ED A5 02                		mov.L	8[r10], r5
 4556 12b6 69 85                   		shlr	#24, r5
 4557 12b8 5B 55                   		movu.B	r5, r5
 4558 12ba FB 42 00 00 00 00       		mov.L	#_Te, r4
 4559 12c0 FE 65 43                		mov.L	[r5,r4], r3
 4560 12c3 ED A5 03                		mov.L	12[r10], r5
 4561 12c6 69 05                   		shlr	#16, r5
 4562 12c8 5B 55                   		movu.B	r5, r5
 4563 12ca FB 42 00 00 00 00       		mov.L	#_Te, r4
 4564 12d0 72 55 00 01             		add	#0x100, r5
 4565 12d4 FE 65 45                		mov.L	[r5,r4], r5
 4566 12d7 FC 37 53                		xor	r5, r3
 4567 12da EC A5                   		mov.L	[r10], r5
 4568 12dc 68 85                   		shlr	#8, r5
 4569 12de 5B 55                   		movu.B	r5, r5
 4570 12e0 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4571 12e6 72 55 00 02             		add	#0x200, r5
 4572 12ea FE 65 45                		mov.L	[r5,r4], r5
 4573 12ed FC 37 53                		xor	r5, r3
 4574 12f0 ED A5 01                		mov.L	4[r10], r5
 4575 12f3 5B 55                   		movu.B	r5, r5
 4576 12f5 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4577 12fb 72 55 00 03             		add	#0x300, r5
 4578 12ff FE 65 45                		mov.L	[r5,r4], r5
 4579 1302 EF 34                   		mov.L	r3, r4
 4580 1304 FC 37 54                		xor	r5, r4
 4581 1307 ED A5 05                		mov.L	20[r10], r5
 4582 130a 72 55 C8 00             		add	#0xc8, r5
 4583 130e EC 55                   		mov.L	[r5], r5
 4584 1310 FC 37 45                		xor	r4, r5
 4585 1313 E7 A5 08                		mov.L	r5, 32[r10]
 4586 1316 ED A5 03                		mov.L	12[r10], r5
 4587 1319 69 85                   		shlr	#24, r5
 4588 131b 5B 55                   		movu.B	r5, r5
 4589 131d FB 42 00 00 00 00       		mov.L	#_Te, r4
 4590 1323 FE 65 43                		mov.L	[r5,r4], r3
 4591 1326 EC A5                   		mov.L	[r10], r5
 4592 1328 69 05                   		shlr	#16, r5
 4593 132a 5B 55                   		movu.B	r5, r5
 4594 132c FB 42 00 00 00 00       		mov.L	#_Te, r4
 4595 1332 72 55 00 01             		add	#0x100, r5
 4596 1336 FE 65 45                		mov.L	[r5,r4], r5
 4597 1339 FC 37 53                		xor	r5, r3
 4598 133c ED A5 01                		mov.L	4[r10], r5
 4599 133f 68 85                   		shlr	#8, r5
 4600 1341 5B 55                   		movu.B	r5, r5
 4601 1343 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4602 1349 72 55 00 02             		add	#0x200, r5
 4603 134d FE 65 45                		mov.L	[r5,r4], r5
 4604 1350 FC 37 53                		xor	r5, r3
 4605 1353 ED A5 02                		mov.L	8[r10], r5
 4606 1356 5B 55                   		movu.B	r5, r5
 4607 1358 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4608 135e 72 55 00 03             		add	#0x300, r5
 4609 1362 FE 65 45                		mov.L	[r5,r4], r5
 4610 1365 EF 34                   		mov.L	r3, r4
 4611 1367 FC 37 54                		xor	r5, r4
 4612 136a ED A5 05                		mov.L	20[r10], r5
 4613 136d 72 55 CC 00             		add	#0xcc, r5
 4614 1371 EC 55                   		mov.L	[r5], r5
 4615 1373 FC 37 45                		xor	r4, r5
 4616 1376 E7 A5 09                		mov.L	r5, 36[r10]
 4617                             		.loc 2 1910 32
 4618 1379 ED A5 06                		mov.L	24[r10], r5
 4619 137c 69 85                   		shlr	#24, r5
 4620 137e 5B 55                   		movu.B	r5, r5
 4621 1380 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4622 1386 FE 65 43                		mov.L	[r5,r4], r3
 4623 1389 ED A5 07                		mov.L	28[r10], r5
 4624 138c 69 05                   		shlr	#16, r5
 4625 138e 5B 55                   		movu.B	r5, r5
 4626 1390 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4627 1396 72 55 00 01             		add	#0x100, r5
 4628 139a FE 65 45                		mov.L	[r5,r4], r5
 4629 139d FC 37 53                		xor	r5, r3
 4630 13a0 ED A5 08                		mov.L	32[r10], r5
 4631 13a3 68 85                   		shlr	#8, r5
 4632 13a5 5B 55                   		movu.B	r5, r5
 4633 13a7 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4634 13ad 72 55 00 02             		add	#0x200, r5
 4635 13b1 FE 65 45                		mov.L	[r5,r4], r5
 4636 13b4 FC 37 53                		xor	r5, r3
 4637 13b7 ED A5 09                		mov.L	36[r10], r5
 4638 13ba 5B 55                   		movu.B	r5, r5
 4639 13bc FB 42 00 00 00 00       		mov.L	#_Te, r4
 4640 13c2 72 55 00 03             		add	#0x300, r5
 4641 13c6 FE 65 45                		mov.L	[r5,r4], r5
 4642 13c9 EF 34                   		mov.L	r3, r4
 4643 13cb FC 37 54                		xor	r5, r4
 4644 13ce ED A5 05                		mov.L	20[r10], r5
 4645 13d1 72 55 D0 00             		add	#0xd0, r5
 4646 13d5 EC 55                   		mov.L	[r5], r5
 4647 13d7 FC 37 45                		xor	r4, r5
 4648 13da E3 A5                   		mov.L	r5, [r10]
 4649 13dc ED A5 07                		mov.L	28[r10], r5
 4650 13df 69 85                   		shlr	#24, r5
 4651 13e1 5B 55                   		movu.B	r5, r5
 4652 13e3 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4653 13e9 FE 65 43                		mov.L	[r5,r4], r3
 4654 13ec ED A5 08                		mov.L	32[r10], r5
 4655 13ef 69 05                   		shlr	#16, r5
 4656 13f1 5B 55                   		movu.B	r5, r5
 4657 13f3 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4658 13f9 72 55 00 01             		add	#0x100, r5
 4659 13fd FE 65 45                		mov.L	[r5,r4], r5
 4660 1400 FC 37 53                		xor	r5, r3
 4661 1403 ED A5 09                		mov.L	36[r10], r5
 4662 1406 68 85                   		shlr	#8, r5
 4663 1408 5B 55                   		movu.B	r5, r5
 4664 140a FB 42 00 00 00 00       		mov.L	#_Te, r4
 4665 1410 72 55 00 02             		add	#0x200, r5
 4666 1414 FE 65 45                		mov.L	[r5,r4], r5
 4667 1417 FC 37 53                		xor	r5, r3
 4668 141a ED A5 06                		mov.L	24[r10], r5
 4669 141d 5B 55                   		movu.B	r5, r5
 4670 141f FB 42 00 00 00 00       		mov.L	#_Te, r4
 4671 1425 72 55 00 03             		add	#0x300, r5
 4672 1429 FE 65 45                		mov.L	[r5,r4], r5
 4673 142c EF 34                   		mov.L	r3, r4
 4674 142e FC 37 54                		xor	r5, r4
 4675 1431 ED A5 05                		mov.L	20[r10], r5
 4676 1434 72 55 D4 00             		add	#0xd4, r5
 4677 1438 EC 55                   		mov.L	[r5], r5
 4678 143a FC 37 45                		xor	r4, r5
 4679 143d E7 A5 01                		mov.L	r5, 4[r10]
 4680 1440 ED A5 08                		mov.L	32[r10], r5
 4681 1443 69 85                   		shlr	#24, r5
 4682 1445 5B 55                   		movu.B	r5, r5
 4683 1447 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4684 144d FE 65 43                		mov.L	[r5,r4], r3
 4685 1450 ED A5 09                		mov.L	36[r10], r5
 4686 1453 69 05                   		shlr	#16, r5
 4687 1455 5B 55                   		movu.B	r5, r5
 4688 1457 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4689 145d 72 55 00 01             		add	#0x100, r5
 4690 1461 FE 65 45                		mov.L	[r5,r4], r5
 4691 1464 FC 37 53                		xor	r5, r3
 4692 1467 ED A5 06                		mov.L	24[r10], r5
 4693 146a 68 85                   		shlr	#8, r5
 4694 146c 5B 55                   		movu.B	r5, r5
 4695 146e FB 42 00 00 00 00       		mov.L	#_Te, r4
 4696 1474 72 55 00 02             		add	#0x200, r5
 4697 1478 FE 65 45                		mov.L	[r5,r4], r5
 4698 147b FC 37 53                		xor	r5, r3
 4699 147e ED A5 07                		mov.L	28[r10], r5
 4700 1481 5B 55                   		movu.B	r5, r5
 4701 1483 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4702 1489 72 55 00 03             		add	#0x300, r5
 4703 148d FE 65 45                		mov.L	[r5,r4], r5
 4704 1490 EF 34                   		mov.L	r3, r4
 4705 1492 FC 37 54                		xor	r5, r4
 4706 1495 ED A5 05                		mov.L	20[r10], r5
 4707 1498 72 55 D8 00             		add	#0xd8, r5
 4708 149c EC 55                   		mov.L	[r5], r5
 4709 149e FC 37 45                		xor	r4, r5
 4710 14a1 E7 A5 02                		mov.L	r5, 8[r10]
 4711 14a4 ED A5 09                		mov.L	36[r10], r5
 4712 14a7 69 85                   		shlr	#24, r5
 4713 14a9 5B 55                   		movu.B	r5, r5
 4714 14ab FB 42 00 00 00 00       		mov.L	#_Te, r4
 4715 14b1 FE 65 43                		mov.L	[r5,r4], r3
 4716 14b4 ED A5 06                		mov.L	24[r10], r5
 4717 14b7 69 05                   		shlr	#16, r5
 4718 14b9 5B 55                   		movu.B	r5, r5
 4719 14bb FB 42 00 00 00 00       		mov.L	#_Te, r4
 4720 14c1 72 55 00 01             		add	#0x100, r5
 4721 14c5 FE 65 45                		mov.L	[r5,r4], r5
 4722 14c8 FC 37 53                		xor	r5, r3
 4723 14cb ED A5 07                		mov.L	28[r10], r5
 4724 14ce 68 85                   		shlr	#8, r5
 4725 14d0 5B 55                   		movu.B	r5, r5
 4726 14d2 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4727 14d8 72 55 00 02             		add	#0x200, r5
 4728 14dc FE 65 45                		mov.L	[r5,r4], r5
 4729 14df FC 37 53                		xor	r5, r3
 4730 14e2 ED A5 08                		mov.L	32[r10], r5
 4731 14e5 5B 55                   		movu.B	r5, r5
 4732 14e7 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4733 14ed 72 55 00 03             		add	#0x300, r5
 4734 14f1 FE 65 45                		mov.L	[r5,r4], r5
 4735 14f4 EF 34                   		mov.L	r3, r4
 4736 14f6 FC 37 54                		xor	r5, r4
 4737 14f9 ED A5 05                		mov.L	20[r10], r5
 4738 14fc 72 55 DC 00             		add	#0xdc, r5
 4739 1500 EC 55                   		mov.L	[r5], r5
 4740 1502 FC 37 45                		xor	r4, r5
 4741 1505 E7 A5 03                		mov.L	r5, 12[r10]
 4742                             	.L48:
1911:../src/wolfcrypt/src/aes.c ****         }
1912:../src/wolfcrypt/src/aes.c ****     }
1913:../src/wolfcrypt/src/aes.c ****     rk += r * 8;
 4743                             		.loc 2 1913 8
 4744 1508 ED A5 04                		mov.L	16[r10], r5
 4745 150b 6C 55                   		shll	#5, r5
 4746 150d ED A4 05                		mov.L	20[r10], r4
 4747 1510 4B 45                   		add	r4, r5
 4748 1512 E7 A5 05                		mov.L	r5, 20[r10]
1914:../src/wolfcrypt/src/aes.c **** #else
1915:../src/wolfcrypt/src/aes.c ****     /*
1916:../src/wolfcrypt/src/aes.c ****      * Nr - 1 full rounds:
1917:../src/wolfcrypt/src/aes.c ****      */
1918:../src/wolfcrypt/src/aes.c **** 
1919:../src/wolfcrypt/src/aes.c ****     for (;;) {
1920:../src/wolfcrypt/src/aes.c ****         t0 =
1921:../src/wolfcrypt/src/aes.c ****             Te[0][GETBYTE(s0, 3)] ^
1922:../src/wolfcrypt/src/aes.c ****             Te[1][GETBYTE(s1, 2)] ^
1923:../src/wolfcrypt/src/aes.c ****             Te[2][GETBYTE(s2, 1)] ^
1924:../src/wolfcrypt/src/aes.c ****             Te[3][GETBYTE(s3, 0)] ^
1925:../src/wolfcrypt/src/aes.c ****             rk[4];
1926:../src/wolfcrypt/src/aes.c ****         t1 =
1927:../src/wolfcrypt/src/aes.c ****             Te[0][GETBYTE(s1, 3)] ^
1928:../src/wolfcrypt/src/aes.c ****             Te[1][GETBYTE(s2, 2)] ^
1929:../src/wolfcrypt/src/aes.c ****             Te[2][GETBYTE(s3, 1)] ^
1930:../src/wolfcrypt/src/aes.c ****             Te[3][GETBYTE(s0, 0)] ^
1931:../src/wolfcrypt/src/aes.c ****             rk[5];
1932:../src/wolfcrypt/src/aes.c ****         t2 =
1933:../src/wolfcrypt/src/aes.c ****             Te[0][GETBYTE(s2, 3)] ^
1934:../src/wolfcrypt/src/aes.c ****             Te[1][GETBYTE(s3, 2)] ^
1935:../src/wolfcrypt/src/aes.c ****             Te[2][GETBYTE(s0, 1)] ^
1936:../src/wolfcrypt/src/aes.c ****             Te[3][GETBYTE(s1, 0)] ^
1937:../src/wolfcrypt/src/aes.c ****             rk[6];
1938:../src/wolfcrypt/src/aes.c ****         t3 =
1939:../src/wolfcrypt/src/aes.c ****             Te[0][GETBYTE(s3, 3)] ^
1940:../src/wolfcrypt/src/aes.c ****             Te[1][GETBYTE(s0, 2)] ^
1941:../src/wolfcrypt/src/aes.c ****             Te[2][GETBYTE(s1, 1)] ^
1942:../src/wolfcrypt/src/aes.c ****             Te[3][GETBYTE(s2, 0)] ^
1943:../src/wolfcrypt/src/aes.c ****             rk[7];
1944:../src/wolfcrypt/src/aes.c **** 
1945:../src/wolfcrypt/src/aes.c ****         rk += 8;
1946:../src/wolfcrypt/src/aes.c ****         if (--r == 0) {
1947:../src/wolfcrypt/src/aes.c ****             break;
1948:../src/wolfcrypt/src/aes.c ****         }
1949:../src/wolfcrypt/src/aes.c **** 
1950:../src/wolfcrypt/src/aes.c ****         s0 =
1951:../src/wolfcrypt/src/aes.c ****             Te[0][GETBYTE(t0, 3)] ^
1952:../src/wolfcrypt/src/aes.c ****             Te[1][GETBYTE(t1, 2)] ^
1953:../src/wolfcrypt/src/aes.c ****             Te[2][GETBYTE(t2, 1)] ^
1954:../src/wolfcrypt/src/aes.c ****             Te[3][GETBYTE(t3, 0)] ^
1955:../src/wolfcrypt/src/aes.c ****             rk[0];
1956:../src/wolfcrypt/src/aes.c ****         s1 =
1957:../src/wolfcrypt/src/aes.c ****             Te[0][GETBYTE(t1, 3)] ^
1958:../src/wolfcrypt/src/aes.c ****             Te[1][GETBYTE(t2, 2)] ^
1959:../src/wolfcrypt/src/aes.c ****             Te[2][GETBYTE(t3, 1)] ^
1960:../src/wolfcrypt/src/aes.c ****             Te[3][GETBYTE(t0, 0)] ^
1961:../src/wolfcrypt/src/aes.c ****             rk[1];
1962:../src/wolfcrypt/src/aes.c ****         s2 =
1963:../src/wolfcrypt/src/aes.c ****             Te[0][GETBYTE(t2, 3)] ^
1964:../src/wolfcrypt/src/aes.c ****             Te[1][GETBYTE(t3, 2)] ^
1965:../src/wolfcrypt/src/aes.c ****             Te[2][GETBYTE(t0, 1)] ^
1966:../src/wolfcrypt/src/aes.c ****             Te[3][GETBYTE(t1, 0)] ^
1967:../src/wolfcrypt/src/aes.c ****             rk[2];
1968:../src/wolfcrypt/src/aes.c ****         s3 =
1969:../src/wolfcrypt/src/aes.c ****             Te[0][GETBYTE(t3, 3)] ^
1970:../src/wolfcrypt/src/aes.c ****             Te[1][GETBYTE(t0, 2)] ^
1971:../src/wolfcrypt/src/aes.c ****             Te[2][GETBYTE(t1, 1)] ^
1972:../src/wolfcrypt/src/aes.c ****             Te[3][GETBYTE(t2, 0)] ^
1973:../src/wolfcrypt/src/aes.c ****             rk[3];
1974:../src/wolfcrypt/src/aes.c ****     }
1975:../src/wolfcrypt/src/aes.c **** #endif
1976:../src/wolfcrypt/src/aes.c **** 
1977:../src/wolfcrypt/src/aes.c ****     /*
1978:../src/wolfcrypt/src/aes.c ****      * apply last round and
1979:../src/wolfcrypt/src/aes.c ****      * map cipher state to byte array block:
1980:../src/wolfcrypt/src/aes.c ****      */
1981:../src/wolfcrypt/src/aes.c **** 
1982:../src/wolfcrypt/src/aes.c ****     s0 =
1983:../src/wolfcrypt/src/aes.c ****         (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
 4749                             		.loc 2 1983 16
 4750 1515 EC A5                   		mov.L	[r10], r5
 4751 1517 69 85                   		shlr	#24, r5
 4752 1519 5B 55                   		movu.B	r5, r5
 4753                             		.loc 2 1983 15
 4754 151b FB 42 00 00 00 00       		mov.L	#_Te, r4
 4755 1521 72 55 00 02             		add	#0x200, r5
 4756 1525 FE 65 45                		mov.L	[r5,r4], r5
 4757                             		.loc 2 1983 32
 4758 1528 FB 42 00 00 00 FF       		mov.L	#-16777216, r4
 4759 152e 53 54                   		and	r5, r4
1984:../src/wolfcrypt/src/aes.c ****         (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
 4760                             		.loc 2 1984 16
 4761 1530 ED A5 01                		mov.L	4[r10], r5
 4762 1533 69 05                   		shlr	#16, r5
 4763 1535 5B 55                   		movu.B	r5, r5
 4764                             		.loc 2 1984 15
 4765 1537 FB 32 00 00 00 00       		mov.L	#_Te, r3
 4766 153d 72 55 00 03             		add	#0x300, r5
 4767 1541 FE 65 35                		mov.L	[r5,r3], r5
 4768                             		.loc 2 1984 32
 4769 1544 74 25 00 00 FF 00       		and	#0xff0000, r5
1983:../src/wolfcrypt/src/aes.c ****         (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
 4770                             		.loc 2 1983 46
 4771 154a FF 53 54                		or	r5, r4, r3
1985:../src/wolfcrypt/src/aes.c ****         (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
 4772                             		.loc 2 1985 16
 4773 154d ED A5 02                		mov.L	8[r10], r5
 4774 1550 68 85                   		shlr	#8, r5
 4775 1552 5B 55                   		movu.B	r5, r5
 4776                             		.loc 2 1985 15
 4777 1554 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4778 155a FE 65 45                		mov.L	[r5,r4], r5
 4779                             		.loc 2 1985 32
 4780 155d 77 25 00 FF 00          		and	#0xff00, r5
1984:../src/wolfcrypt/src/aes.c ****         (Te[3][GETBYTE(t1, 2)] & 0x00ff0000) ^
 4781                             		.loc 2 1984 46
 4782 1562 FC 37 53                		xor	r5, r3
1986:../src/wolfcrypt/src/aes.c ****         (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
 4783                             		.loc 2 1986 16
 4784 1565 ED A5 03                		mov.L	12[r10], r5
 4785 1568 5B 55                   		movu.B	r5, r5
 4786                             		.loc 2 1986 15
 4787 156a FB 42 00 00 00 00       		mov.L	#_Te, r4
 4788 1570 72 55 00 01             		add	#0x100, r5
 4789 1574 FE 65 45                		mov.L	[r5,r4], r5
 4790                             		.loc 2 1986 32
 4791 1577 76 25 FF 00             		and	#0xff, r5
1985:../src/wolfcrypt/src/aes.c ****         (Te[0][GETBYTE(t2, 1)] & 0x0000ff00) ^
 4792                             		.loc 2 1985 46
 4793 157b EF 34                   		mov.L	r3, r4
 4794 157d FC 37 54                		xor	r5, r4
1987:../src/wolfcrypt/src/aes.c ****         rk[0];
 4795                             		.loc 2 1987 11
 4796 1580 ED A5 05                		mov.L	20[r10], r5
 4797 1583 EC 55                   		mov.L	[r5], r5
1986:../src/wolfcrypt/src/aes.c ****         (Te[1][GETBYTE(t3, 0)] & 0x000000ff) ^
 4798                             		.loc 2 1986 46
 4799 1585 FC 37 45                		xor	r4, r5
1982:../src/wolfcrypt/src/aes.c ****         (Te[2][GETBYTE(t0, 3)] & 0xff000000) ^
 4800                             		.loc 2 1982 8
 4801 1588 E7 A5 06                		mov.L	r5, 24[r10]
1988:../src/wolfcrypt/src/aes.c ****     s1 =
1989:../src/wolfcrypt/src/aes.c ****         (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
 4802                             		.loc 2 1989 16
 4803 158b ED A5 01                		mov.L	4[r10], r5
 4804 158e 69 85                   		shlr	#24, r5
 4805 1590 5B 55                   		movu.B	r5, r5
 4806                             		.loc 2 1989 15
 4807 1592 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4808 1598 72 55 00 02             		add	#0x200, r5
 4809 159c FE 65 45                		mov.L	[r5,r4], r5
 4810                             		.loc 2 1989 32
 4811 159f FB 42 00 00 00 FF       		mov.L	#-16777216, r4
 4812 15a5 53 54                   		and	r5, r4
1990:../src/wolfcrypt/src/aes.c ****         (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
 4813                             		.loc 2 1990 16
 4814 15a7 ED A5 02                		mov.L	8[r10], r5
 4815 15aa 69 05                   		shlr	#16, r5
 4816 15ac 5B 55                   		movu.B	r5, r5
 4817                             		.loc 2 1990 15
 4818 15ae FB 32 00 00 00 00       		mov.L	#_Te, r3
 4819 15b4 72 55 00 03             		add	#0x300, r5
 4820 15b8 FE 65 35                		mov.L	[r5,r3], r5
 4821                             		.loc 2 1990 32
 4822 15bb 74 25 00 00 FF 00       		and	#0xff0000, r5
1989:../src/wolfcrypt/src/aes.c ****         (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
 4823                             		.loc 2 1989 46
 4824 15c1 FF 53 54                		or	r5, r4, r3
1991:../src/wolfcrypt/src/aes.c ****         (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
 4825                             		.loc 2 1991 16
 4826 15c4 ED A5 03                		mov.L	12[r10], r5
 4827 15c7 68 85                   		shlr	#8, r5
 4828 15c9 5B 55                   		movu.B	r5, r5
 4829                             		.loc 2 1991 15
 4830 15cb FB 42 00 00 00 00       		mov.L	#_Te, r4
 4831 15d1 FE 65 45                		mov.L	[r5,r4], r5
 4832                             		.loc 2 1991 32
 4833 15d4 77 25 00 FF 00          		and	#0xff00, r5
1990:../src/wolfcrypt/src/aes.c ****         (Te[3][GETBYTE(t2, 2)] & 0x00ff0000) ^
 4834                             		.loc 2 1990 46
 4835 15d9 FC 37 53                		xor	r5, r3
1992:../src/wolfcrypt/src/aes.c ****         (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
 4836                             		.loc 2 1992 16
 4837 15dc EC A5                   		mov.L	[r10], r5
 4838 15de 5B 55                   		movu.B	r5, r5
 4839                             		.loc 2 1992 15
 4840 15e0 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4841 15e6 72 55 00 01             		add	#0x100, r5
 4842 15ea FE 65 45                		mov.L	[r5,r4], r5
 4843                             		.loc 2 1992 32
 4844 15ed 76 25 FF 00             		and	#0xff, r5
1991:../src/wolfcrypt/src/aes.c ****         (Te[0][GETBYTE(t3, 1)] & 0x0000ff00) ^
 4845                             		.loc 2 1991 46
 4846 15f1 EF 34                   		mov.L	r3, r4
 4847 15f3 FC 37 54                		xor	r5, r4
1993:../src/wolfcrypt/src/aes.c ****         rk[1];
 4848                             		.loc 2 1993 11
 4849 15f6 ED A5 05                		mov.L	20[r10], r5
 4850 15f9 62 45                   		add	#4, r5
 4851 15fb EC 55                   		mov.L	[r5], r5
1992:../src/wolfcrypt/src/aes.c ****         (Te[1][GETBYTE(t0, 0)] & 0x000000ff) ^
 4852                             		.loc 2 1992 46
 4853 15fd FC 37 45                		xor	r4, r5
1988:../src/wolfcrypt/src/aes.c ****         (Te[2][GETBYTE(t1, 3)] & 0xff000000) ^
 4854                             		.loc 2 1988 8
 4855 1600 E7 A5 07                		mov.L	r5, 28[r10]
1994:../src/wolfcrypt/src/aes.c ****     s2 =
1995:../src/wolfcrypt/src/aes.c ****         (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
 4856                             		.loc 2 1995 16
 4857 1603 ED A5 02                		mov.L	8[r10], r5
 4858 1606 69 85                   		shlr	#24, r5
 4859 1608 5B 55                   		movu.B	r5, r5
 4860                             		.loc 2 1995 15
 4861 160a FB 42 00 00 00 00       		mov.L	#_Te, r4
 4862 1610 72 55 00 02             		add	#0x200, r5
 4863 1614 FE 65 45                		mov.L	[r5,r4], r5
 4864                             		.loc 2 1995 32
 4865 1617 FB 42 00 00 00 FF       		mov.L	#-16777216, r4
 4866 161d 53 54                   		and	r5, r4
1996:../src/wolfcrypt/src/aes.c ****         (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
 4867                             		.loc 2 1996 16
 4868 161f ED A5 03                		mov.L	12[r10], r5
 4869 1622 69 05                   		shlr	#16, r5
 4870 1624 5B 55                   		movu.B	r5, r5
 4871                             		.loc 2 1996 15
 4872 1626 FB 32 00 00 00 00       		mov.L	#_Te, r3
 4873 162c 72 55 00 03             		add	#0x300, r5
 4874 1630 FE 65 35                		mov.L	[r5,r3], r5
 4875                             		.loc 2 1996 32
 4876 1633 74 25 00 00 FF 00       		and	#0xff0000, r5
1995:../src/wolfcrypt/src/aes.c ****         (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
 4877                             		.loc 2 1995 46
 4878 1639 FF 53 54                		or	r5, r4, r3
1997:../src/wolfcrypt/src/aes.c ****         (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
 4879                             		.loc 2 1997 16
 4880 163c EC A5                   		mov.L	[r10], r5
 4881 163e 68 85                   		shlr	#8, r5
 4882 1640 5B 55                   		movu.B	r5, r5
 4883                             		.loc 2 1997 15
 4884 1642 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4885 1648 FE 65 45                		mov.L	[r5,r4], r5
 4886                             		.loc 2 1997 32
 4887 164b 77 25 00 FF 00          		and	#0xff00, r5
1996:../src/wolfcrypt/src/aes.c ****         (Te[3][GETBYTE(t3, 2)] & 0x00ff0000) ^
 4888                             		.loc 2 1996 46
 4889 1650 FC 37 53                		xor	r5, r3
1998:../src/wolfcrypt/src/aes.c ****         (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
 4890                             		.loc 2 1998 16
 4891 1653 ED A5 01                		mov.L	4[r10], r5
 4892 1656 5B 55                   		movu.B	r5, r5
 4893                             		.loc 2 1998 15
 4894 1658 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4895 165e 72 55 00 01             		add	#0x100, r5
 4896 1662 FE 65 45                		mov.L	[r5,r4], r5
 4897                             		.loc 2 1998 32
 4898 1665 76 25 FF 00             		and	#0xff, r5
1997:../src/wolfcrypt/src/aes.c ****         (Te[0][GETBYTE(t0, 1)] & 0x0000ff00) ^
 4899                             		.loc 2 1997 46
 4900 1669 EF 34                   		mov.L	r3, r4
 4901 166b FC 37 54                		xor	r5, r4
1999:../src/wolfcrypt/src/aes.c ****         rk[2];
 4902                             		.loc 2 1999 11
 4903 166e ED A5 05                		mov.L	20[r10], r5
 4904 1671 62 85                   		add	#8, r5
 4905 1673 EC 55                   		mov.L	[r5], r5
1998:../src/wolfcrypt/src/aes.c ****         (Te[1][GETBYTE(t1, 0)] & 0x000000ff) ^
 4906                             		.loc 2 1998 46
 4907 1675 FC 37 45                		xor	r4, r5
1994:../src/wolfcrypt/src/aes.c ****         (Te[2][GETBYTE(t2, 3)] & 0xff000000) ^
 4908                             		.loc 2 1994 8
 4909 1678 E7 A5 08                		mov.L	r5, 32[r10]
2000:../src/wolfcrypt/src/aes.c ****     s3 =
2001:../src/wolfcrypt/src/aes.c ****         (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
 4910                             		.loc 2 2001 16
 4911 167b ED A5 03                		mov.L	12[r10], r5
 4912 167e 69 85                   		shlr	#24, r5
 4913 1680 5B 55                   		movu.B	r5, r5
 4914                             		.loc 2 2001 15
 4915 1682 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4916 1688 72 55 00 02             		add	#0x200, r5
 4917 168c FE 65 45                		mov.L	[r5,r4], r5
 4918                             		.loc 2 2001 32
 4919 168f FB 42 00 00 00 FF       		mov.L	#-16777216, r4
 4920 1695 53 54                   		and	r5, r4
2002:../src/wolfcrypt/src/aes.c ****         (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
 4921                             		.loc 2 2002 16
 4922 1697 EC A5                   		mov.L	[r10], r5
 4923 1699 69 05                   		shlr	#16, r5
 4924 169b 5B 55                   		movu.B	r5, r5
 4925                             		.loc 2 2002 15
 4926 169d FB 32 00 00 00 00       		mov.L	#_Te, r3
 4927 16a3 72 55 00 03             		add	#0x300, r5
 4928 16a7 FE 65 35                		mov.L	[r5,r3], r5
 4929                             		.loc 2 2002 32
 4930 16aa 74 25 00 00 FF 00       		and	#0xff0000, r5
2001:../src/wolfcrypt/src/aes.c ****         (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
 4931                             		.loc 2 2001 46
 4932 16b0 FF 53 54                		or	r5, r4, r3
2003:../src/wolfcrypt/src/aes.c ****         (Te[0][GETBYTE(t1, 1)] & 0x0000ff00) ^
 4933                             		.loc 2 2003 16
 4934 16b3 ED A5 01                		mov.L	4[r10], r5
 4935 16b6 68 85                   		shlr	#8, r5
 4936 16b8 5B 55                   		movu.B	r5, r5
 4937                             		.loc 2 2003 15
 4938 16ba FB 42 00 00 00 00       		mov.L	#_Te, r4
 4939 16c0 FE 65 45                		mov.L	[r5,r4], r5
 4940                             		.loc 2 2003 32
 4941 16c3 77 25 00 FF 00          		and	#0xff00, r5
2002:../src/wolfcrypt/src/aes.c ****         (Te[3][GETBYTE(t0, 2)] & 0x00ff0000) ^
 4942                             		.loc 2 2002 46
 4943 16c8 FC 37 53                		xor	r5, r3
2004:../src/wolfcrypt/src/aes.c ****         (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
 4944                             		.loc 2 2004 16
 4945 16cb ED A5 02                		mov.L	8[r10], r5
 4946 16ce 5B 55                   		movu.B	r5, r5
 4947                             		.loc 2 2004 15
 4948 16d0 FB 42 00 00 00 00       		mov.L	#_Te, r4
 4949 16d6 72 55 00 01             		add	#0x100, r5
 4950 16da FE 65 45                		mov.L	[r5,r4], r5
 4951                             		.loc 2 2004 32
 4952 16dd 76 25 FF 00             		and	#0xff, r5
2003:../src/wolfcrypt/src/aes.c ****         (Te[0][GETBYTE(t1, 1)] & 0x0000ff00) ^
 4953                             		.loc 2 2003 46
 4954 16e1 EF 34                   		mov.L	r3, r4
 4955 16e3 FC 37 54                		xor	r5, r4
2005:../src/wolfcrypt/src/aes.c ****         rk[3];
 4956                             		.loc 2 2005 11
 4957 16e6 ED A5 05                		mov.L	20[r10], r5
 4958 16e9 62 C5                   		add	#12, r5
 4959 16eb EC 55                   		mov.L	[r5], r5
2004:../src/wolfcrypt/src/aes.c ****         (Te[1][GETBYTE(t2, 0)] & 0x000000ff) ^
 4960                             		.loc 2 2004 46
 4961 16ed FC 37 45                		xor	r4, r5
2000:../src/wolfcrypt/src/aes.c ****         (Te[2][GETBYTE(t3, 3)] & 0xff000000) ^
 4962                             		.loc 2 2000 8
 4963 16f0 E7 A5 09                		mov.L	r5, 36[r10]
2006:../src/wolfcrypt/src/aes.c **** #else
2007:../src/wolfcrypt/src/aes.c **** #ifndef WC_NO_CACHE_RESISTANT
2008:../src/wolfcrypt/src/aes.c ****     s0 |= PreFetchSBox();
2009:../src/wolfcrypt/src/aes.c **** #endif
2010:../src/wolfcrypt/src/aes.c **** 
2011:../src/wolfcrypt/src/aes.c ****     r *= 2;
2012:../src/wolfcrypt/src/aes.c ****     /* Two rounds at a time */
2013:../src/wolfcrypt/src/aes.c ****     for (rk += 4; r > 1; r--, rk += 4) {
2014:../src/wolfcrypt/src/aes.c ****         t0 =
2015:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s0, 3)] << 24) ^
2016:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s1, 2)] << 16) ^
2017:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s2, 1)] <<  8) ^
2018:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s3, 0)]);
2019:../src/wolfcrypt/src/aes.c ****         t1 =
2020:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s1, 3)] << 24) ^
2021:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s2, 2)] << 16) ^
2022:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s3, 1)] <<  8) ^
2023:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s0, 0)]);
2024:../src/wolfcrypt/src/aes.c ****         t2 =
2025:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s2, 3)] << 24) ^
2026:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s3, 2)] << 16) ^
2027:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s0, 1)] <<  8) ^
2028:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s1, 0)]);
2029:../src/wolfcrypt/src/aes.c ****         t3 =
2030:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s3, 3)] << 24) ^
2031:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s0, 2)] << 16) ^
2032:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s1, 1)] <<  8) ^
2033:../src/wolfcrypt/src/aes.c ****             ((word32)Tsbox[GETBYTE(s2, 0)]);
2034:../src/wolfcrypt/src/aes.c **** 
2035:../src/wolfcrypt/src/aes.c ****         s0 =
2036:../src/wolfcrypt/src/aes.c ****             (col_mul(t0, 3, 2, 0, 1) << 24) ^
2037:../src/wolfcrypt/src/aes.c ****             (col_mul(t0, 2, 1, 0, 3) << 16) ^
2038:../src/wolfcrypt/src/aes.c ****             (col_mul(t0, 1, 0, 2, 3) <<  8) ^
2039:../src/wolfcrypt/src/aes.c ****             (col_mul(t0, 0, 3, 2, 1)      ) ^
2040:../src/wolfcrypt/src/aes.c ****             rk[0];
2041:../src/wolfcrypt/src/aes.c ****         s1 =
2042:../src/wolfcrypt/src/aes.c ****             (col_mul(t1, 3, 2, 0, 1) << 24) ^
2043:../src/wolfcrypt/src/aes.c ****             (col_mul(t1, 2, 1, 0, 3) << 16) ^
2044:../src/wolfcrypt/src/aes.c ****             (col_mul(t1, 1, 0, 2, 3) <<  8) ^
2045:../src/wolfcrypt/src/aes.c ****             (col_mul(t1, 0, 3, 2, 1)      ) ^
2046:../src/wolfcrypt/src/aes.c ****             rk[1];
2047:../src/wolfcrypt/src/aes.c ****         s2 =
2048:../src/wolfcrypt/src/aes.c ****             (col_mul(t2, 3, 2, 0, 1) << 24) ^
2049:../src/wolfcrypt/src/aes.c ****             (col_mul(t2, 2, 1, 0, 3) << 16) ^
2050:../src/wolfcrypt/src/aes.c ****             (col_mul(t2, 1, 0, 2, 3) <<  8) ^
2051:../src/wolfcrypt/src/aes.c ****             (col_mul(t2, 0, 3, 2, 1)      ) ^
2052:../src/wolfcrypt/src/aes.c ****             rk[2];
2053:../src/wolfcrypt/src/aes.c ****         s3 =
2054:../src/wolfcrypt/src/aes.c ****             (col_mul(t3, 3, 2, 0, 1) << 24) ^
2055:../src/wolfcrypt/src/aes.c ****             (col_mul(t3, 2, 1, 0, 3) << 16) ^
2056:../src/wolfcrypt/src/aes.c ****             (col_mul(t3, 1, 0, 2, 3) <<  8) ^
2057:../src/wolfcrypt/src/aes.c ****             (col_mul(t3, 0, 3, 2, 1)      ) ^
2058:../src/wolfcrypt/src/aes.c ****             rk[3];
2059:../src/wolfcrypt/src/aes.c ****     }
2060:../src/wolfcrypt/src/aes.c **** 
2061:../src/wolfcrypt/src/aes.c ****     t0 =
2062:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s0, 3)] << 24) ^
2063:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s1, 2)] << 16) ^
2064:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s2, 1)] <<  8) ^
2065:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s3, 0)]);
2066:../src/wolfcrypt/src/aes.c ****     t1 =
2067:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s1, 3)] << 24) ^
2068:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s2, 2)] << 16) ^
2069:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s3, 1)] <<  8) ^
2070:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s0, 0)]);
2071:../src/wolfcrypt/src/aes.c ****     t2 =
2072:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s2, 3)] << 24) ^
2073:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s3, 2)] << 16) ^
2074:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s0, 1)] <<  8) ^
2075:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s1, 0)]);
2076:../src/wolfcrypt/src/aes.c ****     t3 =
2077:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s3, 3)] << 24) ^
2078:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s0, 2)] << 16) ^
2079:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s1, 1)] <<  8) ^
2080:../src/wolfcrypt/src/aes.c ****         ((word32)Tsbox[GETBYTE(s2, 0)]);
2081:../src/wolfcrypt/src/aes.c ****     s0 = t0 ^ rk[0];
2082:../src/wolfcrypt/src/aes.c ****     s1 = t1 ^ rk[1];
2083:../src/wolfcrypt/src/aes.c ****     s2 = t2 ^ rk[2];
2084:../src/wolfcrypt/src/aes.c ****     s3 = t3 ^ rk[3];
2085:../src/wolfcrypt/src/aes.c **** #endif
2086:../src/wolfcrypt/src/aes.c **** 
2087:../src/wolfcrypt/src/aes.c ****     /* write out */
2088:../src/wolfcrypt/src/aes.c **** #ifdef LITTLE_ENDIAN_ORDER
2089:../src/wolfcrypt/src/aes.c ****     s0 = ByteReverseWord32(s0);
 4964                             		.loc 2 2089 10
 4965 16f3 ED A5 06                		mov.L	24[r10], r5
 4966 16f6 EF 51                   		mov.L	r5, r1
 4967 16f8 05 00 00 00             		bsr	_ByteReverseWord32
 4968 16fc EF 15                   		mov.L	r1, r5
 4969                             		.loc 2 2089 8
 4970 16fe E7 A5 06                		mov.L	r5, 24[r10]
2090:../src/wolfcrypt/src/aes.c ****     s1 = ByteReverseWord32(s1);
 4971                             		.loc 2 2090 10
 4972 1701 ED A5 07                		mov.L	28[r10], r5
 4973 1704 EF 51                   		mov.L	r5, r1
 4974 1706 05 00 00 00             		bsr	_ByteReverseWord32
 4975 170a EF 15                   		mov.L	r1, r5
 4976                             		.loc 2 2090 8
 4977 170c E7 A5 07                		mov.L	r5, 28[r10]
2091:../src/wolfcrypt/src/aes.c ****     s2 = ByteReverseWord32(s2);
 4978                             		.loc 2 2091 10
 4979 170f ED A5 08                		mov.L	32[r10], r5
 4980 1712 EF 51                   		mov.L	r5, r1
 4981 1714 05 00 00 00             		bsr	_ByteReverseWord32
 4982 1718 EF 15                   		mov.L	r1, r5
 4983                             		.loc 2 2091 8
 4984 171a E7 A5 08                		mov.L	r5, 32[r10]
2092:../src/wolfcrypt/src/aes.c ****     s3 = ByteReverseWord32(s3);
 4985                             		.loc 2 2092 10
 4986 171d ED A5 09                		mov.L	36[r10], r5
 4987 1720 EF 51                   		mov.L	r5, r1
 4988 1722 05 00 00 00             		bsr	_ByteReverseWord32
 4989 1726 EF 15                   		mov.L	r1, r5
 4990                             		.loc 2 2092 8
 4991 1728 E7 A5 09                		mov.L	r5, 36[r10]
2093:../src/wolfcrypt/src/aes.c **** #endif
2094:../src/wolfcrypt/src/aes.c **** 
2095:../src/wolfcrypt/src/aes.c ****     XMEMCPY(outBlock,                  &s0, sizeof(s0));
 4992                             		.loc 2 2095 5
 4993 172b ED A4 06                		mov.L	24[r10], r4
 4994 172e ED A5 0C                		mov.L	48[r10], r5
 4995 1731 E3 54                   		mov.L	r4, [r5]
2096:../src/wolfcrypt/src/aes.c ****     XMEMCPY(outBlock +     sizeof(s0), &s1, sizeof(s1));
 4996                             		.loc 2 2096 5
 4997 1733 ED A5 0C                		mov.L	48[r10], r5
 4998 1736 62 45                   		add	#4, r5
 4999 1738 ED A4 07                		mov.L	28[r10], r4
 5000 173b E3 54                   		mov.L	r4, [r5]
2097:../src/wolfcrypt/src/aes.c ****     XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
 5001                             		.loc 2 2097 5
 5002 173d ED A5 0C                		mov.L	48[r10], r5
 5003 1740 62 85                   		add	#8, r5
 5004 1742 ED A4 08                		mov.L	32[r10], r4
 5005 1745 E3 54                   		mov.L	r4, [r5]
2098:../src/wolfcrypt/src/aes.c ****     XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
 5006                             		.loc 2 2098 5
 5007 1747 ED A5 0C                		mov.L	48[r10], r5
 5008 174a 62 C5                   		add	#12, r5
 5009 174c ED A4 09                		mov.L	36[r10], r4
 5010 174f E3 54                   		mov.L	r4, [r5]
2099:../src/wolfcrypt/src/aes.c **** 
2100:../src/wolfcrypt/src/aes.c ****     return 0;
 5011                             		.loc 2 2100 12
 5012 1751 66 05                   		mov.L	#0, r5
 5013                             	.L49:
2101:../src/wolfcrypt/src/aes.c **** }
 5014                             		.loc 2 2101 1 discriminator 1
 5015 1753 EF 51                   		mov.L	r5, r1
 5016 1755 3F AA 0E                		rtsd	#56, r10-r10
 5017                             	.LFE44:
 5019                             		.section	.text.PreFetchTd,"ax",@progbits
 5021                             	_PreFetchTd:
 5022                             	.LFB45:
2102:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_CBC || WOLFSSL_AES_DIRECT || HAVE_AESGCM */
2103:../src/wolfcrypt/src/aes.c **** 
2104:../src/wolfcrypt/src/aes.c **** #if defined(HAVE_AES_DECRYPT)
2105:../src/wolfcrypt/src/aes.c **** #if (defined(HAVE_AES_CBC) && !defined(WOLFSSL_DEVCRYPTO_CBC)) || \
2106:../src/wolfcrypt/src/aes.c ****      defined(WOLFSSL_AES_DIRECT)
2107:../src/wolfcrypt/src/aes.c **** 
2108:../src/wolfcrypt/src/aes.c **** #ifndef WC_NO_CACHE_RESISTANT
2109:../src/wolfcrypt/src/aes.c **** #ifndef WOLFSSL_AES_SMALL_TABLES
2110:../src/wolfcrypt/src/aes.c **** /* load 4 Td Tables into cache by cache line stride */
2111:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT WC_INLINE word32 PreFetchTd(void)
2112:../src/wolfcrypt/src/aes.c **** {
 5023                             		.loc 2 2112 1
 5024 0000 7E AA                   		push.l	r10
 5025                             	.LCFI27:
 5026 0002 71 0A F4                		add	#-12, r0, r10
 5027                             	.LCFI28:
 5028 0005 EF A0                   		mov.L	r10, r0
2113:../src/wolfcrypt/src/aes.c ****     word32 x = 0;
 5029                             		.loc 2 2113 12
 5030 0007 F8 A6 00                		mov.L	#0, [r10]
2114:../src/wolfcrypt/src/aes.c ****     int i,j;
2115:../src/wolfcrypt/src/aes.c **** 
2116:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < 4; i++) {
 5031                             		.loc 2 2116 12
 5032 000a F9 A6 01 00             		mov.L	#0, 4[r10]
 5033                             		.loc 2 2116 5
 5034 000e 2E 38                   		bra	.L51
 5035                             	.L54:
2117:../src/wolfcrypt/src/aes.c ****         /* 256 elements, each one is 4 bytes */
2118:../src/wolfcrypt/src/aes.c ****         for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
 5036                             		.loc 2 2118 16
 5037 0010 F9 A6 02 00             		mov.L	#0, 8[r10]
 5038                             		.loc 2 2118 9
 5039 0014 2E 22                   		bra	.L52
 5040                             	.L53:
2119:../src/wolfcrypt/src/aes.c ****             x &= Td[i][j];
 5041                             		.loc 2 2119 23 discriminator 3
 5042 0016 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5043 001c ED A5 01                		mov.L	4[r10], r5
 5044 001f 6C 85                   		shll	#8, r5
 5045 0021 06 89 A5 02             		add	8[r10].L, r5
 5046 0025 FE 65 45                		mov.L	[r5,r4], r5
 5047                             		.loc 2 2119 15 discriminator 3
 5048 0028 EC A4                   		mov.L	[r10], r4
 5049 002a 53 45                   		and	r4, r5
 5050 002c E3 A5                   		mov.L	r5, [r10]
2118:../src/wolfcrypt/src/aes.c ****             x &= Td[i][j];
 5051                             		.loc 2 2118 32 discriminator 3
 5052 002e ED A5 02                		mov.L	8[r10], r5
 5053 0031 62 85                   		add	#8, r5
 5054 0033 E7 A5 02                		mov.L	r5, 8[r10]
 5055                             	.L52:
2118:../src/wolfcrypt/src/aes.c ****             x &= Td[i][j];
 5056                             		.loc 2 2118 9 discriminator 1
 5057 0036 ED A5 02                		mov.L	8[r10], r5
 5058 0039 75 55 FF                		cmp	#0xff, r5
 5059 003c 2B DA                   		ble	.L53
2116:../src/wolfcrypt/src/aes.c ****         /* 256 elements, each one is 4 bytes */
 5060                             		.loc 2 2116 25 discriminator 2
 5061 003e ED A5 01                		mov.L	4[r10], r5
 5062 0041 62 15                   		add	#1, r5
 5063 0043 E7 A5 01                		mov.L	r5, 4[r10]
 5064                             	.L51:
2116:../src/wolfcrypt/src/aes.c ****         /* 256 elements, each one is 4 bytes */
 5065                             		.loc 2 2116 5 discriminator 1
 5066 0046 ED A5 01                		mov.L	4[r10], r5
 5067 0049 61 35                   		cmp	#3, r5
 5068 004b 2B C5                   		ble	.L54
2120:../src/wolfcrypt/src/aes.c ****         }
2121:../src/wolfcrypt/src/aes.c ****     }
2122:../src/wolfcrypt/src/aes.c ****     return x;
 5069                             		.loc 2 2122 12
 5070 004d EC A5                   		mov.L	[r10], r5
2123:../src/wolfcrypt/src/aes.c **** }
 5071                             		.loc 2 2123 1
 5072 004f EF 51                   		mov.L	r5, r1
 5073 0051 3F AA 04                		rtsd	#16, r10-r10
 5074                             	.LFE45:
 5076                             		.section	.text.PreFetchTd4,"ax",@progbits
 5078                             	_PreFetchTd4:
 5079                             	.LFB46:
2124:../src/wolfcrypt/src/aes.c **** #endif
2125:../src/wolfcrypt/src/aes.c **** 
2126:../src/wolfcrypt/src/aes.c **** /* load Td Table4 into cache by cache line stride */
2127:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT WC_INLINE word32 PreFetchTd4(void)
2128:../src/wolfcrypt/src/aes.c **** {
 5080                             		.loc 2 2128 1
 5081 0000 7E AA                   		push.l	r10
 5082                             	.LCFI29:
 5083 0002 71 0A F8                		add	#-8, r0, r10
 5084                             	.LCFI30:
 5085 0005 EF A0                   		mov.L	r10, r0
2129:../src/wolfcrypt/src/aes.c ****     word32 x = 0;
 5086                             		.loc 2 2129 12
 5087 0007 F8 A6 00                		mov.L	#0, [r10]
2130:../src/wolfcrypt/src/aes.c ****     int i;
2131:../src/wolfcrypt/src/aes.c **** 
2132:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
 5088                             		.loc 2 2132 12
 5089 000a F9 A6 01 00             		mov.L	#0, 4[r10]
 5090                             		.loc 2 2132 5
 5091 000e 2E 1F                   		bra	.L57
 5092                             	.L58:
2133:../src/wolfcrypt/src/aes.c ****         x &= (word32)Td4[i];
 5093                             		.loc 2 2133 25 discriminator 3
 5094 0010 FB 52 00 00 00 00       		mov.L	#_Td4, r5
 5095 0016 06 89 A5 01             		add	4[r10].L, r5
 5096 001a CC 55                   		mov.B	[r5], r5
 5097                             		.loc 2 2133 14 discriminator 3
 5098 001c 5B 55                   		movu.B	r5, r5
 5099                             		.loc 2 2133 11 discriminator 3
 5100 001e EC A4                   		mov.L	[r10], r4
 5101 0020 53 45                   		and	r4, r5
 5102 0022 E3 A5                   		mov.L	r5, [r10]
2132:../src/wolfcrypt/src/aes.c ****         x &= (word32)Td4[i];
 5103                             		.loc 2 2132 28 discriminator 3
 5104 0024 ED A5 01                		mov.L	4[r10], r5
 5105 0027 71 55 20                		add	#32, r5
 5106 002a E7 A5 01                		mov.L	r5, 4[r10]
 5107                             	.L57:
2132:../src/wolfcrypt/src/aes.c ****         x &= (word32)Td4[i];
 5108                             		.loc 2 2132 5 discriminator 1
 5109 002d ED A5 01                		mov.L	4[r10], r5
 5110 0030 75 55 FF                		cmp	#0xff, r5
 5111 0033 2B DD                   		ble	.L58
2134:../src/wolfcrypt/src/aes.c ****     }
2135:../src/wolfcrypt/src/aes.c ****     return x;
 5112                             		.loc 2 2135 12
 5113 0035 EC A5                   		mov.L	[r10], r5
2136:../src/wolfcrypt/src/aes.c **** }
 5114                             		.loc 2 2136 1
 5115 0037 EF 51                   		mov.L	r5, r1
 5116 0039 3F AA 03                		rtsd	#12, r10-r10
 5117                             	.LFE46:
 5119                             		.section	.text.wc_AesDecrypt,"ax",@progbits
 5121                             	_wc_AesDecrypt:
 5122                             	.LFB47:
2137:../src/wolfcrypt/src/aes.c **** #endif
2138:../src/wolfcrypt/src/aes.c **** 
2139:../src/wolfcrypt/src/aes.c **** /* Software AES - ECB Decrypt */
2140:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int wc_AesDecrypt(
2141:../src/wolfcrypt/src/aes.c ****     Aes* aes, const byte* inBlock, byte* outBlock)
2142:../src/wolfcrypt/src/aes.c **** {
 5123                             		.loc 2 2142 1
 5124 0000 7E AA                   		push.l	r10
 5125                             	.LCFI31:
 5126 0002 71 0A CC                		add	#-52, r0, r10
 5127                             	.LCFI32:
 5128 0005 EF A0                   		mov.L	r10, r0
 5129 0007 E7 A1 0A                		mov.L	r1, 40[r10]
 5130 000a E7 A2 0B                		mov.L	r2, 44[r10]
 5131 000d E7 A3 0C                		mov.L	r3, 48[r10]
2143:../src/wolfcrypt/src/aes.c ****     word32 s0, s1, s2, s3;
2144:../src/wolfcrypt/src/aes.c ****     word32 t0, t1, t2, t3;
2145:../src/wolfcrypt/src/aes.c ****     word32 r = aes->rounds >> 1;
 5132                             		.loc 2 2145 19
 5133 0010 ED A5 0A                		mov.L	40[r10], r5
 5134 0013 ED 55 3C                		mov.L	240[r5], r5
 5135                             		.loc 2 2145 12
 5136 0016 68 15                   		shlr	#1, r5
 5137 0018 E7 A5 04                		mov.L	r5, 16[r10]
2146:../src/wolfcrypt/src/aes.c ****     const word32* rk = aes->key;
 5138                             		.loc 2 2146 19
 5139 001b ED A5 0A                		mov.L	40[r10], r5
 5140 001e E7 A5 05                		mov.L	r5, 20[r10]
2147:../src/wolfcrypt/src/aes.c **** 
2148:../src/wolfcrypt/src/aes.c ****     if (r > 7 || r == 0) {
 5141                             		.loc 2 2148 8
 5142 0021 ED A5 04                		mov.L	16[r10], r5
 5143 0024 61 75                   		cmp	#7, r5
 5144 0026 24 08                   		bgtu	.L61
 5145                             		.loc 2 2148 15 discriminator 1
 5146 0028 ED A5 04                		mov.L	16[r10], r5
 5147 002b 61 05                   		cmp	#0, r5
 5148 002d 18                      		bne	.L62
 5149                             	.L61:
2149:../src/wolfcrypt/src/aes.c ****         return KEYUSAGE_E;
 5150                             		.loc 2 2149 16
 5151 002e FB 5A 1E FF             		mov.L	#-226, r5
 5152 0032 38 DD 16                		bra	.L65
 5153                             	.L62:
2150:../src/wolfcrypt/src/aes.c ****     }
2151:../src/wolfcrypt/src/aes.c **** 
2152:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
2153:../src/wolfcrypt/src/aes.c ****     if (haveAESNI && aes->use_aesni) {
2154:../src/wolfcrypt/src/aes.c ****         #ifdef DEBUG_AESNI
2155:../src/wolfcrypt/src/aes.c ****             printf("about to aes decrypt\n");
2156:../src/wolfcrypt/src/aes.c ****             printf("in  = %p\n", inBlock);
2157:../src/wolfcrypt/src/aes.c ****             printf("out = %p\n", outBlock);
2158:../src/wolfcrypt/src/aes.c ****             printf("aes->key = %p\n", aes->key);
2159:../src/wolfcrypt/src/aes.c ****             printf("aes->rounds = %d\n", aes->rounds);
2160:../src/wolfcrypt/src/aes.c ****             printf("sz = %d\n", AES_BLOCK_SIZE);
2161:../src/wolfcrypt/src/aes.c ****         #endif
2162:../src/wolfcrypt/src/aes.c **** 
2163:../src/wolfcrypt/src/aes.c ****         /* if input and output same will overwrite input iv */
2164:../src/wolfcrypt/src/aes.c ****         if ((const byte*)aes->tmp != inBlock)
2165:../src/wolfcrypt/src/aes.c ****             XMEMCPY(aes->tmp, inBlock, AES_BLOCK_SIZE);
2166:../src/wolfcrypt/src/aes.c ****         AES_ECB_decrypt(inBlock, outBlock, AES_BLOCK_SIZE, (byte*)aes->key,
2167:../src/wolfcrypt/src/aes.c ****                         aes->rounds);
2168:../src/wolfcrypt/src/aes.c ****         return 0;
2169:../src/wolfcrypt/src/aes.c ****     }
2170:../src/wolfcrypt/src/aes.c ****     else {
2171:../src/wolfcrypt/src/aes.c ****         #ifdef DEBUG_AESNI
2172:../src/wolfcrypt/src/aes.c ****             printf("Skipping AES-NI\n");
2173:../src/wolfcrypt/src/aes.c ****         #endif
2174:../src/wolfcrypt/src/aes.c ****     }
2175:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AESNI */
2176:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_SCE) && !defined(WOLFSSL_SCE_NO_AES)
2177:../src/wolfcrypt/src/aes.c ****     return AES_ECB_decrypt(aes, inBlock, outBlock, AES_BLOCK_SIZE);
2178:../src/wolfcrypt/src/aes.c **** #endif
2179:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_IMXRT_DCP)
2180:../src/wolfcrypt/src/aes.c ****     if (aes->keylen == 16) {
2181:../src/wolfcrypt/src/aes.c ****         DCPAesEcbDecrypt(aes, outBlock, inBlock, AES_BLOCK_SIZE);
2182:../src/wolfcrypt/src/aes.c ****         return 0;
2183:../src/wolfcrypt/src/aes.c ****     }
2184:../src/wolfcrypt/src/aes.c **** #endif
2185:../src/wolfcrypt/src/aes.c **** 
2186:../src/wolfcrypt/src/aes.c ****     /*
2187:../src/wolfcrypt/src/aes.c ****      * map byte array block to cipher state
2188:../src/wolfcrypt/src/aes.c ****      * and add initial round key:
2189:../src/wolfcrypt/src/aes.c ****      */
2190:../src/wolfcrypt/src/aes.c ****     XMEMCPY(&s0, inBlock,                  sizeof(s0));
 5154                             		.loc 2 2190 5
 5155 0035 ED A5 0B                		mov.L	44[r10], r5
 5156 0038 EC 55                   		mov.L	[r5], r5
 5157 003a E7 A5 06                		mov.L	r5, 24[r10]
2191:../src/wolfcrypt/src/aes.c ****     XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
 5158                             		.loc 2 2191 5
 5159 003d ED A5 0B                		mov.L	44[r10], r5
 5160 0040 62 45                   		add	#4, r5
 5161 0042 EC 55                   		mov.L	[r5], r5
 5162 0044 E7 A5 07                		mov.L	r5, 28[r10]
2192:../src/wolfcrypt/src/aes.c ****     XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
 5163                             		.loc 2 2192 5
 5164 0047 ED A5 0B                		mov.L	44[r10], r5
 5165 004a 62 85                   		add	#8, r5
 5166 004c EC 55                   		mov.L	[r5], r5
 5167 004e E7 A5 08                		mov.L	r5, 32[r10]
2193:../src/wolfcrypt/src/aes.c ****     XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
 5168                             		.loc 2 2193 5
 5169 0051 ED A5 0B                		mov.L	44[r10], r5
 5170 0054 62 C5                   		add	#12, r5
 5171 0056 EC 55                   		mov.L	[r5], r5
 5172 0058 E7 A5 09                		mov.L	r5, 36[r10]
2194:../src/wolfcrypt/src/aes.c **** 
2195:../src/wolfcrypt/src/aes.c **** #ifdef LITTLE_ENDIAN_ORDER
2196:../src/wolfcrypt/src/aes.c ****     s0 = ByteReverseWord32(s0);
 5173                             		.loc 2 2196 10
 5174 005b ED A5 06                		mov.L	24[r10], r5
 5175 005e EF 51                   		mov.L	r5, r1
 5176 0060 05 00 00 00             		bsr	_ByteReverseWord32
 5177 0064 EF 15                   		mov.L	r1, r5
 5178                             		.loc 2 2196 8
 5179 0066 E7 A5 06                		mov.L	r5, 24[r10]
2197:../src/wolfcrypt/src/aes.c ****     s1 = ByteReverseWord32(s1);
 5180                             		.loc 2 2197 10
 5181 0069 ED A5 07                		mov.L	28[r10], r5
 5182 006c EF 51                   		mov.L	r5, r1
 5183 006e 05 00 00 00             		bsr	_ByteReverseWord32
 5184 0072 EF 15                   		mov.L	r1, r5
 5185                             		.loc 2 2197 8
 5186 0074 E7 A5 07                		mov.L	r5, 28[r10]
2198:../src/wolfcrypt/src/aes.c ****     s2 = ByteReverseWord32(s2);
 5187                             		.loc 2 2198 10
 5188 0077 ED A5 08                		mov.L	32[r10], r5
 5189 007a EF 51                   		mov.L	r5, r1
 5190 007c 05 00 00 00             		bsr	_ByteReverseWord32
 5191 0080 EF 15                   		mov.L	r1, r5
 5192                             		.loc 2 2198 8
 5193 0082 E7 A5 08                		mov.L	r5, 32[r10]
2199:../src/wolfcrypt/src/aes.c ****     s3 = ByteReverseWord32(s3);
 5194                             		.loc 2 2199 10
 5195 0085 ED A5 09                		mov.L	36[r10], r5
 5196 0088 EF 51                   		mov.L	r5, r1
 5197 008a 05 00 00 00             		bsr	_ByteReverseWord32
 5198 008e EF 15                   		mov.L	r1, r5
 5199                             		.loc 2 2199 8
 5200 0090 E7 A5 09                		mov.L	r5, 36[r10]
2200:../src/wolfcrypt/src/aes.c **** #endif
2201:../src/wolfcrypt/src/aes.c **** 
2202:../src/wolfcrypt/src/aes.c ****     s0 ^= rk[0];
 5201                             		.loc 2 2202 13
 5202 0093 ED A5 05                		mov.L	20[r10], r5
 5203 0096 EC 54                   		mov.L	[r5], r4
 5204                             		.loc 2 2202 8
 5205 0098 ED A5 06                		mov.L	24[r10], r5
 5206 009b FC 37 45                		xor	r4, r5
 5207 009e E7 A5 06                		mov.L	r5, 24[r10]
2203:../src/wolfcrypt/src/aes.c ****     s1 ^= rk[1];
 5208                             		.loc 2 2203 13
 5209 00a1 ED A5 05                		mov.L	20[r10], r5
 5210 00a4 62 45                   		add	#4, r5
 5211 00a6 EC 54                   		mov.L	[r5], r4
 5212                             		.loc 2 2203 8
 5213 00a8 ED A5 07                		mov.L	28[r10], r5
 5214 00ab FC 37 45                		xor	r4, r5
 5215 00ae E7 A5 07                		mov.L	r5, 28[r10]
2204:../src/wolfcrypt/src/aes.c ****     s2 ^= rk[2];
 5216                             		.loc 2 2204 13
 5217 00b1 ED A5 05                		mov.L	20[r10], r5
 5218 00b4 62 85                   		add	#8, r5
 5219 00b6 EC 54                   		mov.L	[r5], r4
 5220                             		.loc 2 2204 8
 5221 00b8 ED A5 08                		mov.L	32[r10], r5
 5222 00bb FC 37 45                		xor	r4, r5
 5223 00be E7 A5 08                		mov.L	r5, 32[r10]
2205:../src/wolfcrypt/src/aes.c ****     s3 ^= rk[3];
 5224                             		.loc 2 2205 13
 5225 00c1 ED A5 05                		mov.L	20[r10], r5
 5226 00c4 62 C5                   		add	#12, r5
 5227 00c6 EC 54                   		mov.L	[r5], r4
 5228                             		.loc 2 2205 8
 5229 00c8 ED A5 09                		mov.L	36[r10], r5
 5230 00cb FC 37 45                		xor	r4, r5
 5231 00ce E7 A5 09                		mov.L	r5, 36[r10]
2206:../src/wolfcrypt/src/aes.c **** 
2207:../src/wolfcrypt/src/aes.c **** #ifndef WOLFSSL_AES_SMALL_TABLES
2208:../src/wolfcrypt/src/aes.c **** #ifndef WC_NO_CACHE_RESISTANT
2209:../src/wolfcrypt/src/aes.c ****     s0 |= PreFetchTd();
 5232                             		.loc 2 2209 11
 5233 00d1 05 00 00 00             		bsr	_PreFetchTd
 5234 00d5 EF 14                   		mov.L	r1, r4
 5235                             		.loc 2 2209 8
 5236 00d7 ED A5 06                		mov.L	24[r10], r5
 5237 00da 57 45                   		or	r4, r5
 5238 00dc E7 A5 06                		mov.L	r5, 24[r10]
2210:../src/wolfcrypt/src/aes.c **** #endif
2211:../src/wolfcrypt/src/aes.c **** 
2212:../src/wolfcrypt/src/aes.c **** #ifndef WOLFSSL_AES_NO_UNROLL
2213:../src/wolfcrypt/src/aes.c **** /* Unroll the loop. */
2214:../src/wolfcrypt/src/aes.c **** #define DEC_ROUND_T_S(o)                                            \
2215:../src/wolfcrypt/src/aes.c ****     t0 = Td[0][GETBYTE(s0, 3)] ^ Td[1][GETBYTE(s3, 2)] ^            \
2216:../src/wolfcrypt/src/aes.c ****          Td[2][GETBYTE(s2, 1)] ^ Td[3][GETBYTE(s1, 0)] ^ rk[(o)+4]; \
2217:../src/wolfcrypt/src/aes.c ****     t1 = Td[0][GETBYTE(s1, 3)] ^ Td[1][GETBYTE(s0, 2)] ^            \
2218:../src/wolfcrypt/src/aes.c ****          Td[2][GETBYTE(s3, 1)] ^ Td[3][GETBYTE(s2, 0)] ^ rk[(o)+5]; \
2219:../src/wolfcrypt/src/aes.c ****     t2 = Td[0][GETBYTE(s2, 3)] ^ Td[1][GETBYTE(s1, 2)] ^            \
2220:../src/wolfcrypt/src/aes.c ****          Td[2][GETBYTE(s0, 1)] ^ Td[3][GETBYTE(s3, 0)] ^ rk[(o)+6]; \
2221:../src/wolfcrypt/src/aes.c ****     t3 = Td[0][GETBYTE(s3, 3)] ^ Td[1][GETBYTE(s2, 2)] ^            \
2222:../src/wolfcrypt/src/aes.c ****          Td[2][GETBYTE(s1, 1)] ^ Td[3][GETBYTE(s0, 0)] ^ rk[(o)+7]
2223:../src/wolfcrypt/src/aes.c **** #define DEC_ROUND_S_T(o)                                            \
2224:../src/wolfcrypt/src/aes.c ****     s0 = Td[0][GETBYTE(t0, 3)] ^ Td[1][GETBYTE(t3, 2)] ^            \
2225:../src/wolfcrypt/src/aes.c ****          Td[2][GETBYTE(t2, 1)] ^ Td[3][GETBYTE(t1, 0)] ^ rk[(o)+0]; \
2226:../src/wolfcrypt/src/aes.c ****     s1 = Td[0][GETBYTE(t1, 3)] ^ Td[1][GETBYTE(t0, 2)] ^            \
2227:../src/wolfcrypt/src/aes.c ****          Td[2][GETBYTE(t3, 1)] ^ Td[3][GETBYTE(t2, 0)] ^ rk[(o)+1]; \
2228:../src/wolfcrypt/src/aes.c ****     s2 = Td[0][GETBYTE(t2, 3)] ^ Td[1][GETBYTE(t1, 2)] ^            \
2229:../src/wolfcrypt/src/aes.c ****          Td[2][GETBYTE(t0, 1)] ^ Td[3][GETBYTE(t3, 0)] ^ rk[(o)+2]; \
2230:../src/wolfcrypt/src/aes.c ****     s3 = Td[0][GETBYTE(t3, 3)] ^ Td[1][GETBYTE(t2, 2)] ^            \
2231:../src/wolfcrypt/src/aes.c ****          Td[2][GETBYTE(t1, 1)] ^ Td[3][GETBYTE(t0, 0)] ^ rk[(o)+3]
2232:../src/wolfcrypt/src/aes.c **** 
2233:../src/wolfcrypt/src/aes.c ****                        DEC_ROUND_T_S( 0);
 5239                             		.loc 2 2233 24
 5240 00df ED A5 06                		mov.L	24[r10], r5
 5241 00e2 69 85                   		shlr	#24, r5
 5242 00e4 5B 55                   		movu.B	r5, r5
 5243 00e6 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5244 00ec FE 65 43                		mov.L	[r5,r4], r3
 5245 00ef ED A5 09                		mov.L	36[r10], r5
 5246 00f2 69 05                   		shlr	#16, r5
 5247 00f4 5B 55                   		movu.B	r5, r5
 5248 00f6 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5249 00fc 72 55 00 01             		add	#0x100, r5
 5250 0100 FE 65 45                		mov.L	[r5,r4], r5
 5251 0103 FC 37 53                		xor	r5, r3
 5252 0106 ED A5 08                		mov.L	32[r10], r5
 5253 0109 68 85                   		shlr	#8, r5
 5254 010b 5B 55                   		movu.B	r5, r5
 5255 010d FB 42 00 00 00 00       		mov.L	#_Td, r4
 5256 0113 72 55 00 02             		add	#0x200, r5
 5257 0117 FE 65 45                		mov.L	[r5,r4], r5
 5258 011a FC 37 53                		xor	r5, r3
 5259 011d ED A5 07                		mov.L	28[r10], r5
 5260 0120 5B 55                   		movu.B	r5, r5
 5261 0122 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5262 0128 72 55 00 03             		add	#0x300, r5
 5263 012c FE 65 45                		mov.L	[r5,r4], r5
 5264 012f EF 34                   		mov.L	r3, r4
 5265 0131 FC 37 54                		xor	r5, r4
 5266 0134 ED A5 05                		mov.L	20[r10], r5
 5267 0137 71 55 10                		add	#16, r5
 5268 013a EC 55                   		mov.L	[r5], r5
 5269 013c FC 37 45                		xor	r4, r5
 5270 013f E3 A5                   		mov.L	r5, [r10]
 5271 0141 ED A5 07                		mov.L	28[r10], r5
 5272 0144 69 85                   		shlr	#24, r5
 5273 0146 5B 55                   		movu.B	r5, r5
 5274 0148 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5275 014e FE 65 43                		mov.L	[r5,r4], r3
 5276 0151 ED A5 06                		mov.L	24[r10], r5
 5277 0154 69 05                   		shlr	#16, r5
 5278 0156 5B 55                   		movu.B	r5, r5
 5279 0158 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5280 015e 72 55 00 01             		add	#0x100, r5
 5281 0162 FE 65 45                		mov.L	[r5,r4], r5
 5282 0165 FC 37 53                		xor	r5, r3
 5283 0168 ED A5 09                		mov.L	36[r10], r5
 5284 016b 68 85                   		shlr	#8, r5
 5285 016d 5B 55                   		movu.B	r5, r5
 5286 016f FB 42 00 00 00 00       		mov.L	#_Td, r4
 5287 0175 72 55 00 02             		add	#0x200, r5
 5288 0179 FE 65 45                		mov.L	[r5,r4], r5
 5289 017c FC 37 53                		xor	r5, r3
 5290 017f ED A5 08                		mov.L	32[r10], r5
 5291 0182 5B 55                   		movu.B	r5, r5
 5292 0184 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5293 018a 72 55 00 03             		add	#0x300, r5
 5294 018e FE 65 45                		mov.L	[r5,r4], r5
 5295 0191 EF 34                   		mov.L	r3, r4
 5296 0193 FC 37 54                		xor	r5, r4
 5297 0196 ED A5 05                		mov.L	20[r10], r5
 5298 0199 71 55 14                		add	#20, r5
 5299 019c EC 55                   		mov.L	[r5], r5
 5300 019e FC 37 45                		xor	r4, r5
 5301 01a1 E7 A5 01                		mov.L	r5, 4[r10]
 5302 01a4 ED A5 08                		mov.L	32[r10], r5
 5303 01a7 69 85                   		shlr	#24, r5
 5304 01a9 5B 55                   		movu.B	r5, r5
 5305 01ab FB 42 00 00 00 00       		mov.L	#_Td, r4
 5306 01b1 FE 65 43                		mov.L	[r5,r4], r3
 5307 01b4 ED A5 07                		mov.L	28[r10], r5
 5308 01b7 69 05                   		shlr	#16, r5
 5309 01b9 5B 55                   		movu.B	r5, r5
 5310 01bb FB 42 00 00 00 00       		mov.L	#_Td, r4
 5311 01c1 72 55 00 01             		add	#0x100, r5
 5312 01c5 FE 65 45                		mov.L	[r5,r4], r5
 5313 01c8 FC 37 53                		xor	r5, r3
 5314 01cb ED A5 06                		mov.L	24[r10], r5
 5315 01ce 68 85                   		shlr	#8, r5
 5316 01d0 5B 55                   		movu.B	r5, r5
 5317 01d2 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5318 01d8 72 55 00 02             		add	#0x200, r5
 5319 01dc FE 65 45                		mov.L	[r5,r4], r5
 5320 01df FC 37 53                		xor	r5, r3
 5321 01e2 ED A5 09                		mov.L	36[r10], r5
 5322 01e5 5B 55                   		movu.B	r5, r5
 5323 01e7 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5324 01ed 72 55 00 03             		add	#0x300, r5
 5325 01f1 FE 65 45                		mov.L	[r5,r4], r5
 5326 01f4 EF 34                   		mov.L	r3, r4
 5327 01f6 FC 37 54                		xor	r5, r4
 5328 01f9 ED A5 05                		mov.L	20[r10], r5
 5329 01fc 71 55 18                		add	#24, r5
 5330 01ff EC 55                   		mov.L	[r5], r5
 5331 0201 FC 37 45                		xor	r4, r5
 5332 0204 E7 A5 02                		mov.L	r5, 8[r10]
 5333 0207 ED A5 09                		mov.L	36[r10], r5
 5334 020a 69 85                   		shlr	#24, r5
 5335 020c 5B 55                   		movu.B	r5, r5
 5336 020e FB 42 00 00 00 00       		mov.L	#_Td, r4
 5337 0214 FE 65 43                		mov.L	[r5,r4], r3
 5338 0217 ED A5 08                		mov.L	32[r10], r5
 5339 021a 69 05                   		shlr	#16, r5
 5340 021c 5B 55                   		movu.B	r5, r5
 5341 021e FB 42 00 00 00 00       		mov.L	#_Td, r4
 5342 0224 72 55 00 01             		add	#0x100, r5
 5343 0228 FE 65 45                		mov.L	[r5,r4], r5
 5344 022b FC 37 53                		xor	r5, r3
 5345 022e ED A5 07                		mov.L	28[r10], r5
 5346 0231 68 85                   		shlr	#8, r5
 5347 0233 5B 55                   		movu.B	r5, r5
 5348 0235 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5349 023b 72 55 00 02             		add	#0x200, r5
 5350 023f FE 65 45                		mov.L	[r5,r4], r5
 5351 0242 FC 37 53                		xor	r5, r3
 5352 0245 ED A5 06                		mov.L	24[r10], r5
 5353 0248 5B 55                   		movu.B	r5, r5
 5354 024a FB 42 00 00 00 00       		mov.L	#_Td, r4
 5355 0250 72 55 00 03             		add	#0x300, r5
 5356 0254 FE 65 45                		mov.L	[r5,r4], r5
 5357 0257 EF 34                   		mov.L	r3, r4
 5358 0259 FC 37 54                		xor	r5, r4
 5359 025c ED A5 05                		mov.L	20[r10], r5
 5360 025f 71 55 1C                		add	#28, r5
 5361 0262 EC 55                   		mov.L	[r5], r5
 5362 0264 FC 37 45                		xor	r4, r5
 5363 0267 E7 A5 03                		mov.L	r5, 12[r10]
2234:../src/wolfcrypt/src/aes.c ****     DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
 5364                             		.loc 2 2234 5
 5365 026a EC A5                   		mov.L	[r10], r5
 5366 026c 69 85                   		shlr	#24, r5
 5367 026e 5B 55                   		movu.B	r5, r5
 5368 0270 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5369 0276 FE 65 43                		mov.L	[r5,r4], r3
 5370 0279 ED A5 03                		mov.L	12[r10], r5
 5371 027c 69 05                   		shlr	#16, r5
 5372 027e 5B 55                   		movu.B	r5, r5
 5373 0280 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5374 0286 72 55 00 01             		add	#0x100, r5
 5375 028a FE 65 45                		mov.L	[r5,r4], r5
 5376 028d FC 37 53                		xor	r5, r3
 5377 0290 ED A5 02                		mov.L	8[r10], r5
 5378 0293 68 85                   		shlr	#8, r5
 5379 0295 5B 55                   		movu.B	r5, r5
 5380 0297 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5381 029d 72 55 00 02             		add	#0x200, r5
 5382 02a1 FE 65 45                		mov.L	[r5,r4], r5
 5383 02a4 FC 37 53                		xor	r5, r3
 5384 02a7 ED A5 01                		mov.L	4[r10], r5
 5385 02aa 5B 55                   		movu.B	r5, r5
 5386 02ac FB 42 00 00 00 00       		mov.L	#_Td, r4
 5387 02b2 72 55 00 03             		add	#0x300, r5
 5388 02b6 FE 65 45                		mov.L	[r5,r4], r5
 5389 02b9 EF 34                   		mov.L	r3, r4
 5390 02bb FC 37 54                		xor	r5, r4
 5391 02be ED A5 05                		mov.L	20[r10], r5
 5392 02c1 71 55 20                		add	#32, r5
 5393 02c4 EC 55                   		mov.L	[r5], r5
 5394 02c6 FC 37 45                		xor	r4, r5
 5395 02c9 E7 A5 06                		mov.L	r5, 24[r10]
 5396 02cc ED A5 01                		mov.L	4[r10], r5
 5397 02cf 69 85                   		shlr	#24, r5
 5398 02d1 5B 55                   		movu.B	r5, r5
 5399 02d3 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5400 02d9 FE 65 43                		mov.L	[r5,r4], r3
 5401 02dc EC A5                   		mov.L	[r10], r5
 5402 02de 69 05                   		shlr	#16, r5
 5403 02e0 5B 55                   		movu.B	r5, r5
 5404 02e2 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5405 02e8 72 55 00 01             		add	#0x100, r5
 5406 02ec FE 65 45                		mov.L	[r5,r4], r5
 5407 02ef FC 37 53                		xor	r5, r3
 5408 02f2 ED A5 03                		mov.L	12[r10], r5
 5409 02f5 68 85                   		shlr	#8, r5
 5410 02f7 5B 55                   		movu.B	r5, r5
 5411 02f9 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5412 02ff 72 55 00 02             		add	#0x200, r5
 5413 0303 FE 65 45                		mov.L	[r5,r4], r5
 5414 0306 FC 37 53                		xor	r5, r3
 5415 0309 ED A5 02                		mov.L	8[r10], r5
 5416 030c 5B 55                   		movu.B	r5, r5
 5417 030e FB 42 00 00 00 00       		mov.L	#_Td, r4
 5418 0314 72 55 00 03             		add	#0x300, r5
 5419 0318 FE 65 45                		mov.L	[r5,r4], r5
 5420 031b EF 34                   		mov.L	r3, r4
 5421 031d FC 37 54                		xor	r5, r4
 5422 0320 ED A5 05                		mov.L	20[r10], r5
 5423 0323 71 55 24                		add	#36, r5
 5424 0326 EC 55                   		mov.L	[r5], r5
 5425 0328 FC 37 45                		xor	r4, r5
 5426 032b E7 A5 07                		mov.L	r5, 28[r10]
 5427 032e ED A5 02                		mov.L	8[r10], r5
 5428 0331 69 85                   		shlr	#24, r5
 5429 0333 5B 55                   		movu.B	r5, r5
 5430 0335 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5431 033b FE 65 43                		mov.L	[r5,r4], r3
 5432 033e ED A5 01                		mov.L	4[r10], r5
 5433 0341 69 05                   		shlr	#16, r5
 5434 0343 5B 55                   		movu.B	r5, r5
 5435 0345 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5436 034b 72 55 00 01             		add	#0x100, r5
 5437 034f FE 65 45                		mov.L	[r5,r4], r5
 5438 0352 FC 37 53                		xor	r5, r3
 5439 0355 EC A5                   		mov.L	[r10], r5
 5440 0357 68 85                   		shlr	#8, r5
 5441 0359 5B 55                   		movu.B	r5, r5
 5442 035b FB 42 00 00 00 00       		mov.L	#_Td, r4
 5443 0361 72 55 00 02             		add	#0x200, r5
 5444 0365 FE 65 45                		mov.L	[r5,r4], r5
 5445 0368 FC 37 53                		xor	r5, r3
 5446 036b ED A5 03                		mov.L	12[r10], r5
 5447 036e 5B 55                   		movu.B	r5, r5
 5448 0370 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5449 0376 72 55 00 03             		add	#0x300, r5
 5450 037a FE 65 45                		mov.L	[r5,r4], r5
 5451 037d EF 34                   		mov.L	r3, r4
 5452 037f FC 37 54                		xor	r5, r4
 5453 0382 ED A5 05                		mov.L	20[r10], r5
 5454 0385 71 55 28                		add	#40, r5
 5455 0388 EC 55                   		mov.L	[r5], r5
 5456 038a FC 37 45                		xor	r4, r5
 5457 038d E7 A5 08                		mov.L	r5, 32[r10]
 5458 0390 ED A5 03                		mov.L	12[r10], r5
 5459 0393 69 85                   		shlr	#24, r5
 5460 0395 5B 55                   		movu.B	r5, r5
 5461 0397 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5462 039d FE 65 43                		mov.L	[r5,r4], r3
 5463 03a0 ED A5 02                		mov.L	8[r10], r5
 5464 03a3 69 05                   		shlr	#16, r5
 5465 03a5 5B 55                   		movu.B	r5, r5
 5466 03a7 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5467 03ad 72 55 00 01             		add	#0x100, r5
 5468 03b1 FE 65 45                		mov.L	[r5,r4], r5
 5469 03b4 FC 37 53                		xor	r5, r3
 5470 03b7 ED A5 01                		mov.L	4[r10], r5
 5471 03ba 68 85                   		shlr	#8, r5
 5472 03bc 5B 55                   		movu.B	r5, r5
 5473 03be FB 42 00 00 00 00       		mov.L	#_Td, r4
 5474 03c4 72 55 00 02             		add	#0x200, r5
 5475 03c8 FE 65 45                		mov.L	[r5,r4], r5
 5476 03cb FC 37 53                		xor	r5, r3
 5477 03ce EC A5                   		mov.L	[r10], r5
 5478 03d0 5B 55                   		movu.B	r5, r5
 5479 03d2 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5480 03d8 72 55 00 03             		add	#0x300, r5
 5481 03dc FE 65 45                		mov.L	[r5,r4], r5
 5482 03df EF 34                   		mov.L	r3, r4
 5483 03e1 FC 37 54                		xor	r5, r4
 5484 03e4 ED A5 05                		mov.L	20[r10], r5
 5485 03e7 71 55 2C                		add	#44, r5
 5486 03ea EC 55                   		mov.L	[r5], r5
 5487 03ec FC 37 45                		xor	r4, r5
 5488 03ef E7 A5 09                		mov.L	r5, 36[r10]
 5489                             		.loc 2 2234 24
 5490 03f2 ED A5 06                		mov.L	24[r10], r5
 5491 03f5 69 85                   		shlr	#24, r5
 5492 03f7 5B 55                   		movu.B	r5, r5
 5493 03f9 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5494 03ff FE 65 43                		mov.L	[r5,r4], r3
 5495 0402 ED A5 09                		mov.L	36[r10], r5
 5496 0405 69 05                   		shlr	#16, r5
 5497 0407 5B 55                   		movu.B	r5, r5
 5498 0409 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5499 040f 72 55 00 01             		add	#0x100, r5
 5500 0413 FE 65 45                		mov.L	[r5,r4], r5
 5501 0416 FC 37 53                		xor	r5, r3
 5502 0419 ED A5 08                		mov.L	32[r10], r5
 5503 041c 68 85                   		shlr	#8, r5
 5504 041e 5B 55                   		movu.B	r5, r5
 5505 0420 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5506 0426 72 55 00 02             		add	#0x200, r5
 5507 042a FE 65 45                		mov.L	[r5,r4], r5
 5508 042d FC 37 53                		xor	r5, r3
 5509 0430 ED A5 07                		mov.L	28[r10], r5
 5510 0433 5B 55                   		movu.B	r5, r5
 5511 0435 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5512 043b 72 55 00 03             		add	#0x300, r5
 5513 043f FE 65 45                		mov.L	[r5,r4], r5
 5514 0442 EF 34                   		mov.L	r3, r4
 5515 0444 FC 37 54                		xor	r5, r4
 5516 0447 ED A5 05                		mov.L	20[r10], r5
 5517 044a 71 55 30                		add	#48, r5
 5518 044d EC 55                   		mov.L	[r5], r5
 5519 044f FC 37 45                		xor	r4, r5
 5520 0452 E3 A5                   		mov.L	r5, [r10]
 5521 0454 ED A5 07                		mov.L	28[r10], r5
 5522 0457 69 85                   		shlr	#24, r5
 5523 0459 5B 55                   		movu.B	r5, r5
 5524 045b FB 42 00 00 00 00       		mov.L	#_Td, r4
 5525 0461 FE 65 43                		mov.L	[r5,r4], r3
 5526 0464 ED A5 06                		mov.L	24[r10], r5
 5527 0467 69 05                   		shlr	#16, r5
 5528 0469 5B 55                   		movu.B	r5, r5
 5529 046b FB 42 00 00 00 00       		mov.L	#_Td, r4
 5530 0471 72 55 00 01             		add	#0x100, r5
 5531 0475 FE 65 45                		mov.L	[r5,r4], r5
 5532 0478 FC 37 53                		xor	r5, r3
 5533 047b ED A5 09                		mov.L	36[r10], r5
 5534 047e 68 85                   		shlr	#8, r5
 5535 0480 5B 55                   		movu.B	r5, r5
 5536 0482 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5537 0488 72 55 00 02             		add	#0x200, r5
 5538 048c FE 65 45                		mov.L	[r5,r4], r5
 5539 048f FC 37 53                		xor	r5, r3
 5540 0492 ED A5 08                		mov.L	32[r10], r5
 5541 0495 5B 55                   		movu.B	r5, r5
 5542 0497 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5543 049d 72 55 00 03             		add	#0x300, r5
 5544 04a1 FE 65 45                		mov.L	[r5,r4], r5
 5545 04a4 EF 34                   		mov.L	r3, r4
 5546 04a6 FC 37 54                		xor	r5, r4
 5547 04a9 ED A5 05                		mov.L	20[r10], r5
 5548 04ac 71 55 34                		add	#52, r5
 5549 04af EC 55                   		mov.L	[r5], r5
 5550 04b1 FC 37 45                		xor	r4, r5
 5551 04b4 E7 A5 01                		mov.L	r5, 4[r10]
 5552 04b7 ED A5 08                		mov.L	32[r10], r5
 5553 04ba 69 85                   		shlr	#24, r5
 5554 04bc 5B 55                   		movu.B	r5, r5
 5555 04be FB 42 00 00 00 00       		mov.L	#_Td, r4
 5556 04c4 FE 65 43                		mov.L	[r5,r4], r3
 5557 04c7 ED A5 07                		mov.L	28[r10], r5
 5558 04ca 69 05                   		shlr	#16, r5
 5559 04cc 5B 55                   		movu.B	r5, r5
 5560 04ce FB 42 00 00 00 00       		mov.L	#_Td, r4
 5561 04d4 72 55 00 01             		add	#0x100, r5
 5562 04d8 FE 65 45                		mov.L	[r5,r4], r5
 5563 04db FC 37 53                		xor	r5, r3
 5564 04de ED A5 06                		mov.L	24[r10], r5
 5565 04e1 68 85                   		shlr	#8, r5
 5566 04e3 5B 55                   		movu.B	r5, r5
 5567 04e5 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5568 04eb 72 55 00 02             		add	#0x200, r5
 5569 04ef FE 65 45                		mov.L	[r5,r4], r5
 5570 04f2 FC 37 53                		xor	r5, r3
 5571 04f5 ED A5 09                		mov.L	36[r10], r5
 5572 04f8 5B 55                   		movu.B	r5, r5
 5573 04fa FB 42 00 00 00 00       		mov.L	#_Td, r4
 5574 0500 72 55 00 03             		add	#0x300, r5
 5575 0504 FE 65 45                		mov.L	[r5,r4], r5
 5576 0507 EF 34                   		mov.L	r3, r4
 5577 0509 FC 37 54                		xor	r5, r4
 5578 050c ED A5 05                		mov.L	20[r10], r5
 5579 050f 71 55 38                		add	#56, r5
 5580 0512 EC 55                   		mov.L	[r5], r5
 5581 0514 FC 37 45                		xor	r4, r5
 5582 0517 E7 A5 02                		mov.L	r5, 8[r10]
 5583 051a ED A5 09                		mov.L	36[r10], r5
 5584 051d 69 85                   		shlr	#24, r5
 5585 051f 5B 55                   		movu.B	r5, r5
 5586 0521 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5587 0527 FE 65 43                		mov.L	[r5,r4], r3
 5588 052a ED A5 08                		mov.L	32[r10], r5
 5589 052d 69 05                   		shlr	#16, r5
 5590 052f 5B 55                   		movu.B	r5, r5
 5591 0531 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5592 0537 72 55 00 01             		add	#0x100, r5
 5593 053b FE 65 45                		mov.L	[r5,r4], r5
 5594 053e FC 37 53                		xor	r5, r3
 5595 0541 ED A5 07                		mov.L	28[r10], r5
 5596 0544 68 85                   		shlr	#8, r5
 5597 0546 5B 55                   		movu.B	r5, r5
 5598 0548 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5599 054e 72 55 00 02             		add	#0x200, r5
 5600 0552 FE 65 45                		mov.L	[r5,r4], r5
 5601 0555 FC 37 53                		xor	r5, r3
 5602 0558 ED A5 06                		mov.L	24[r10], r5
 5603 055b 5B 55                   		movu.B	r5, r5
 5604 055d FB 42 00 00 00 00       		mov.L	#_Td, r4
 5605 0563 72 55 00 03             		add	#0x300, r5
 5606 0567 FE 65 45                		mov.L	[r5,r4], r5
 5607 056a EF 34                   		mov.L	r3, r4
 5608 056c FC 37 54                		xor	r5, r4
 5609 056f ED A5 05                		mov.L	20[r10], r5
 5610 0572 71 55 3C                		add	#60, r5
 5611 0575 EC 55                   		mov.L	[r5], r5
 5612 0577 FC 37 45                		xor	r4, r5
 5613 057a E7 A5 03                		mov.L	r5, 12[r10]
2235:../src/wolfcrypt/src/aes.c ****     DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
 5614                             		.loc 2 2235 5
 5615 057d EC A5                   		mov.L	[r10], r5
 5616 057f 69 85                   		shlr	#24, r5
 5617 0581 5B 55                   		movu.B	r5, r5
 5618 0583 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5619 0589 FE 65 43                		mov.L	[r5,r4], r3
 5620 058c ED A5 03                		mov.L	12[r10], r5
 5621 058f 69 05                   		shlr	#16, r5
 5622 0591 5B 55                   		movu.B	r5, r5
 5623 0593 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5624 0599 72 55 00 01             		add	#0x100, r5
 5625 059d FE 65 45                		mov.L	[r5,r4], r5
 5626 05a0 FC 37 53                		xor	r5, r3
 5627 05a3 ED A5 02                		mov.L	8[r10], r5
 5628 05a6 68 85                   		shlr	#8, r5
 5629 05a8 5B 55                   		movu.B	r5, r5
 5630 05aa FB 42 00 00 00 00       		mov.L	#_Td, r4
 5631 05b0 72 55 00 02             		add	#0x200, r5
 5632 05b4 FE 65 45                		mov.L	[r5,r4], r5
 5633 05b7 FC 37 53                		xor	r5, r3
 5634 05ba ED A5 01                		mov.L	4[r10], r5
 5635 05bd 5B 55                   		movu.B	r5, r5
 5636 05bf FB 42 00 00 00 00       		mov.L	#_Td, r4
 5637 05c5 72 55 00 03             		add	#0x300, r5
 5638 05c9 FE 65 45                		mov.L	[r5,r4], r5
 5639 05cc EF 34                   		mov.L	r3, r4
 5640 05ce FC 37 54                		xor	r5, r4
 5641 05d1 ED A5 05                		mov.L	20[r10], r5
 5642 05d4 71 55 40                		add	#0x40, r5
 5643 05d7 EC 55                   		mov.L	[r5], r5
 5644 05d9 FC 37 45                		xor	r4, r5
 5645 05dc E7 A5 06                		mov.L	r5, 24[r10]
 5646 05df ED A5 01                		mov.L	4[r10], r5
 5647 05e2 69 85                   		shlr	#24, r5
 5648 05e4 5B 55                   		movu.B	r5, r5
 5649 05e6 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5650 05ec FE 65 43                		mov.L	[r5,r4], r3
 5651 05ef EC A5                   		mov.L	[r10], r5
 5652 05f1 69 05                   		shlr	#16, r5
 5653 05f3 5B 55                   		movu.B	r5, r5
 5654 05f5 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5655 05fb 72 55 00 01             		add	#0x100, r5
 5656 05ff FE 65 45                		mov.L	[r5,r4], r5
 5657 0602 FC 37 53                		xor	r5, r3
 5658 0605 ED A5 03                		mov.L	12[r10], r5
 5659 0608 68 85                   		shlr	#8, r5
 5660 060a 5B 55                   		movu.B	r5, r5
 5661 060c FB 42 00 00 00 00       		mov.L	#_Td, r4
 5662 0612 72 55 00 02             		add	#0x200, r5
 5663 0616 FE 65 45                		mov.L	[r5,r4], r5
 5664 0619 FC 37 53                		xor	r5, r3
 5665 061c ED A5 02                		mov.L	8[r10], r5
 5666 061f 5B 55                   		movu.B	r5, r5
 5667 0621 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5668 0627 72 55 00 03             		add	#0x300, r5
 5669 062b FE 65 45                		mov.L	[r5,r4], r5
 5670 062e EF 34                   		mov.L	r3, r4
 5671 0630 FC 37 54                		xor	r5, r4
 5672 0633 ED A5 05                		mov.L	20[r10], r5
 5673 0636 71 55 44                		add	#0x44, r5
 5674 0639 EC 55                   		mov.L	[r5], r5
 5675 063b FC 37 45                		xor	r4, r5
 5676 063e E7 A5 07                		mov.L	r5, 28[r10]
 5677 0641 ED A5 02                		mov.L	8[r10], r5
 5678 0644 69 85                   		shlr	#24, r5
 5679 0646 5B 55                   		movu.B	r5, r5
 5680 0648 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5681 064e FE 65 43                		mov.L	[r5,r4], r3
 5682 0651 ED A5 01                		mov.L	4[r10], r5
 5683 0654 69 05                   		shlr	#16, r5
 5684 0656 5B 55                   		movu.B	r5, r5
 5685 0658 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5686 065e 72 55 00 01             		add	#0x100, r5
 5687 0662 FE 65 45                		mov.L	[r5,r4], r5
 5688 0665 FC 37 53                		xor	r5, r3
 5689 0668 EC A5                   		mov.L	[r10], r5
 5690 066a 68 85                   		shlr	#8, r5
 5691 066c 5B 55                   		movu.B	r5, r5
 5692 066e FB 42 00 00 00 00       		mov.L	#_Td, r4
 5693 0674 72 55 00 02             		add	#0x200, r5
 5694 0678 FE 65 45                		mov.L	[r5,r4], r5
 5695 067b FC 37 53                		xor	r5, r3
 5696 067e ED A5 03                		mov.L	12[r10], r5
 5697 0681 5B 55                   		movu.B	r5, r5
 5698 0683 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5699 0689 72 55 00 03             		add	#0x300, r5
 5700 068d FE 65 45                		mov.L	[r5,r4], r5
 5701 0690 EF 34                   		mov.L	r3, r4
 5702 0692 FC 37 54                		xor	r5, r4
 5703 0695 ED A5 05                		mov.L	20[r10], r5
 5704 0698 71 55 48                		add	#0x48, r5
 5705 069b EC 55                   		mov.L	[r5], r5
 5706 069d FC 37 45                		xor	r4, r5
 5707 06a0 E7 A5 08                		mov.L	r5, 32[r10]
 5708 06a3 ED A5 03                		mov.L	12[r10], r5
 5709 06a6 69 85                   		shlr	#24, r5
 5710 06a8 5B 55                   		movu.B	r5, r5
 5711 06aa FB 42 00 00 00 00       		mov.L	#_Td, r4
 5712 06b0 FE 65 43                		mov.L	[r5,r4], r3
 5713 06b3 ED A5 02                		mov.L	8[r10], r5
 5714 06b6 69 05                   		shlr	#16, r5
 5715 06b8 5B 55                   		movu.B	r5, r5
 5716 06ba FB 42 00 00 00 00       		mov.L	#_Td, r4
 5717 06c0 72 55 00 01             		add	#0x100, r5
 5718 06c4 FE 65 45                		mov.L	[r5,r4], r5
 5719 06c7 FC 37 53                		xor	r5, r3
 5720 06ca ED A5 01                		mov.L	4[r10], r5
 5721 06cd 68 85                   		shlr	#8, r5
 5722 06cf 5B 55                   		movu.B	r5, r5
 5723 06d1 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5724 06d7 72 55 00 02             		add	#0x200, r5
 5725 06db FE 65 45                		mov.L	[r5,r4], r5
 5726 06de FC 37 53                		xor	r5, r3
 5727 06e1 EC A5                   		mov.L	[r10], r5
 5728 06e3 5B 55                   		movu.B	r5, r5
 5729 06e5 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5730 06eb 72 55 00 03             		add	#0x300, r5
 5731 06ef FE 65 45                		mov.L	[r5,r4], r5
 5732 06f2 EF 34                   		mov.L	r3, r4
 5733 06f4 FC 37 54                		xor	r5, r4
 5734 06f7 ED A5 05                		mov.L	20[r10], r5
 5735 06fa 71 55 4C                		add	#0x4c, r5
 5736 06fd EC 55                   		mov.L	[r5], r5
 5737 06ff FC 37 45                		xor	r4, r5
 5738 0702 E7 A5 09                		mov.L	r5, 36[r10]
 5739                             		.loc 2 2235 24
 5740 0705 ED A5 06                		mov.L	24[r10], r5
 5741 0708 69 85                   		shlr	#24, r5
 5742 070a 5B 55                   		movu.B	r5, r5
 5743 070c FB 42 00 00 00 00       		mov.L	#_Td, r4
 5744 0712 FE 65 43                		mov.L	[r5,r4], r3
 5745 0715 ED A5 09                		mov.L	36[r10], r5
 5746 0718 69 05                   		shlr	#16, r5
 5747 071a 5B 55                   		movu.B	r5, r5
 5748 071c FB 42 00 00 00 00       		mov.L	#_Td, r4
 5749 0722 72 55 00 01             		add	#0x100, r5
 5750 0726 FE 65 45                		mov.L	[r5,r4], r5
 5751 0729 FC 37 53                		xor	r5, r3
 5752 072c ED A5 08                		mov.L	32[r10], r5
 5753 072f 68 85                   		shlr	#8, r5
 5754 0731 5B 55                   		movu.B	r5, r5
 5755 0733 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5756 0739 72 55 00 02             		add	#0x200, r5
 5757 073d FE 65 45                		mov.L	[r5,r4], r5
 5758 0740 FC 37 53                		xor	r5, r3
 5759 0743 ED A5 07                		mov.L	28[r10], r5
 5760 0746 5B 55                   		movu.B	r5, r5
 5761 0748 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5762 074e 72 55 00 03             		add	#0x300, r5
 5763 0752 FE 65 45                		mov.L	[r5,r4], r5
 5764 0755 EF 34                   		mov.L	r3, r4
 5765 0757 FC 37 54                		xor	r5, r4
 5766 075a ED A5 05                		mov.L	20[r10], r5
 5767 075d 71 55 50                		add	#0x50, r5
 5768 0760 EC 55                   		mov.L	[r5], r5
 5769 0762 FC 37 45                		xor	r4, r5
 5770 0765 E3 A5                   		mov.L	r5, [r10]
 5771 0767 ED A5 07                		mov.L	28[r10], r5
 5772 076a 69 85                   		shlr	#24, r5
 5773 076c 5B 55                   		movu.B	r5, r5
 5774 076e FB 42 00 00 00 00       		mov.L	#_Td, r4
 5775 0774 FE 65 43                		mov.L	[r5,r4], r3
 5776 0777 ED A5 06                		mov.L	24[r10], r5
 5777 077a 69 05                   		shlr	#16, r5
 5778 077c 5B 55                   		movu.B	r5, r5
 5779 077e FB 42 00 00 00 00       		mov.L	#_Td, r4
 5780 0784 72 55 00 01             		add	#0x100, r5
 5781 0788 FE 65 45                		mov.L	[r5,r4], r5
 5782 078b FC 37 53                		xor	r5, r3
 5783 078e ED A5 09                		mov.L	36[r10], r5
 5784 0791 68 85                   		shlr	#8, r5
 5785 0793 5B 55                   		movu.B	r5, r5
 5786 0795 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5787 079b 72 55 00 02             		add	#0x200, r5
 5788 079f FE 65 45                		mov.L	[r5,r4], r5
 5789 07a2 FC 37 53                		xor	r5, r3
 5790 07a5 ED A5 08                		mov.L	32[r10], r5
 5791 07a8 5B 55                   		movu.B	r5, r5
 5792 07aa FB 42 00 00 00 00       		mov.L	#_Td, r4
 5793 07b0 72 55 00 03             		add	#0x300, r5
 5794 07b4 FE 65 45                		mov.L	[r5,r4], r5
 5795 07b7 EF 34                   		mov.L	r3, r4
 5796 07b9 FC 37 54                		xor	r5, r4
 5797 07bc ED A5 05                		mov.L	20[r10], r5
 5798 07bf 71 55 54                		add	#0x54, r5
 5799 07c2 EC 55                   		mov.L	[r5], r5
 5800 07c4 FC 37 45                		xor	r4, r5
 5801 07c7 E7 A5 01                		mov.L	r5, 4[r10]
 5802 07ca ED A5 08                		mov.L	32[r10], r5
 5803 07cd 69 85                   		shlr	#24, r5
 5804 07cf 5B 55                   		movu.B	r5, r5
 5805 07d1 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5806 07d7 FE 65 43                		mov.L	[r5,r4], r3
 5807 07da ED A5 07                		mov.L	28[r10], r5
 5808 07dd 69 05                   		shlr	#16, r5
 5809 07df 5B 55                   		movu.B	r5, r5
 5810 07e1 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5811 07e7 72 55 00 01             		add	#0x100, r5
 5812 07eb FE 65 45                		mov.L	[r5,r4], r5
 5813 07ee FC 37 53                		xor	r5, r3
 5814 07f1 ED A5 06                		mov.L	24[r10], r5
 5815 07f4 68 85                   		shlr	#8, r5
 5816 07f6 5B 55                   		movu.B	r5, r5
 5817 07f8 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5818 07fe 72 55 00 02             		add	#0x200, r5
 5819 0802 FE 65 45                		mov.L	[r5,r4], r5
 5820 0805 FC 37 53                		xor	r5, r3
 5821 0808 ED A5 09                		mov.L	36[r10], r5
 5822 080b 5B 55                   		movu.B	r5, r5
 5823 080d FB 42 00 00 00 00       		mov.L	#_Td, r4
 5824 0813 72 55 00 03             		add	#0x300, r5
 5825 0817 FE 65 45                		mov.L	[r5,r4], r5
 5826 081a EF 34                   		mov.L	r3, r4
 5827 081c FC 37 54                		xor	r5, r4
 5828 081f ED A5 05                		mov.L	20[r10], r5
 5829 0822 71 55 58                		add	#0x58, r5
 5830 0825 EC 55                   		mov.L	[r5], r5
 5831 0827 FC 37 45                		xor	r4, r5
 5832 082a E7 A5 02                		mov.L	r5, 8[r10]
 5833 082d ED A5 09                		mov.L	36[r10], r5
 5834 0830 69 85                   		shlr	#24, r5
 5835 0832 5B 55                   		movu.B	r5, r5
 5836 0834 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5837 083a FE 65 43                		mov.L	[r5,r4], r3
 5838 083d ED A5 08                		mov.L	32[r10], r5
 5839 0840 69 05                   		shlr	#16, r5
 5840 0842 5B 55                   		movu.B	r5, r5
 5841 0844 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5842 084a 72 55 00 01             		add	#0x100, r5
 5843 084e FE 65 45                		mov.L	[r5,r4], r5
 5844 0851 FC 37 53                		xor	r5, r3
 5845 0854 ED A5 07                		mov.L	28[r10], r5
 5846 0857 68 85                   		shlr	#8, r5
 5847 0859 5B 55                   		movu.B	r5, r5
 5848 085b FB 42 00 00 00 00       		mov.L	#_Td, r4
 5849 0861 72 55 00 02             		add	#0x200, r5
 5850 0865 FE 65 45                		mov.L	[r5,r4], r5
 5851 0868 FC 37 53                		xor	r5, r3
 5852 086b ED A5 06                		mov.L	24[r10], r5
 5853 086e 5B 55                   		movu.B	r5, r5
 5854 0870 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5855 0876 72 55 00 03             		add	#0x300, r5
 5856 087a FE 65 45                		mov.L	[r5,r4], r5
 5857 087d EF 34                   		mov.L	r3, r4
 5858 087f FC 37 54                		xor	r5, r4
 5859 0882 ED A5 05                		mov.L	20[r10], r5
 5860 0885 71 55 5C                		add	#0x5c, r5
 5861 0888 EC 55                   		mov.L	[r5], r5
 5862 088a FC 37 45                		xor	r4, r5
 5863 088d E7 A5 03                		mov.L	r5, 12[r10]
2236:../src/wolfcrypt/src/aes.c ****     DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
 5864                             		.loc 2 2236 5
 5865 0890 EC A5                   		mov.L	[r10], r5
 5866 0892 69 85                   		shlr	#24, r5
 5867 0894 5B 55                   		movu.B	r5, r5
 5868 0896 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5869 089c FE 65 43                		mov.L	[r5,r4], r3
 5870 089f ED A5 03                		mov.L	12[r10], r5
 5871 08a2 69 05                   		shlr	#16, r5
 5872 08a4 5B 55                   		movu.B	r5, r5
 5873 08a6 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5874 08ac 72 55 00 01             		add	#0x100, r5
 5875 08b0 FE 65 45                		mov.L	[r5,r4], r5
 5876 08b3 FC 37 53                		xor	r5, r3
 5877 08b6 ED A5 02                		mov.L	8[r10], r5
 5878 08b9 68 85                   		shlr	#8, r5
 5879 08bb 5B 55                   		movu.B	r5, r5
 5880 08bd FB 42 00 00 00 00       		mov.L	#_Td, r4
 5881 08c3 72 55 00 02             		add	#0x200, r5
 5882 08c7 FE 65 45                		mov.L	[r5,r4], r5
 5883 08ca FC 37 53                		xor	r5, r3
 5884 08cd ED A5 01                		mov.L	4[r10], r5
 5885 08d0 5B 55                   		movu.B	r5, r5
 5886 08d2 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5887 08d8 72 55 00 03             		add	#0x300, r5
 5888 08dc FE 65 45                		mov.L	[r5,r4], r5
 5889 08df EF 34                   		mov.L	r3, r4
 5890 08e1 FC 37 54                		xor	r5, r4
 5891 08e4 ED A5 05                		mov.L	20[r10], r5
 5892 08e7 71 55 60                		add	#0x60, r5
 5893 08ea EC 55                   		mov.L	[r5], r5
 5894 08ec FC 37 45                		xor	r4, r5
 5895 08ef E7 A5 06                		mov.L	r5, 24[r10]
 5896 08f2 ED A5 01                		mov.L	4[r10], r5
 5897 08f5 69 85                   		shlr	#24, r5
 5898 08f7 5B 55                   		movu.B	r5, r5
 5899 08f9 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5900 08ff FE 65 43                		mov.L	[r5,r4], r3
 5901 0902 EC A5                   		mov.L	[r10], r5
 5902 0904 69 05                   		shlr	#16, r5
 5903 0906 5B 55                   		movu.B	r5, r5
 5904 0908 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5905 090e 72 55 00 01             		add	#0x100, r5
 5906 0912 FE 65 45                		mov.L	[r5,r4], r5
 5907 0915 FC 37 53                		xor	r5, r3
 5908 0918 ED A5 03                		mov.L	12[r10], r5
 5909 091b 68 85                   		shlr	#8, r5
 5910 091d 5B 55                   		movu.B	r5, r5
 5911 091f FB 42 00 00 00 00       		mov.L	#_Td, r4
 5912 0925 72 55 00 02             		add	#0x200, r5
 5913 0929 FE 65 45                		mov.L	[r5,r4], r5
 5914 092c FC 37 53                		xor	r5, r3
 5915 092f ED A5 02                		mov.L	8[r10], r5
 5916 0932 5B 55                   		movu.B	r5, r5
 5917 0934 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5918 093a 72 55 00 03             		add	#0x300, r5
 5919 093e FE 65 45                		mov.L	[r5,r4], r5
 5920 0941 EF 34                   		mov.L	r3, r4
 5921 0943 FC 37 54                		xor	r5, r4
 5922 0946 ED A5 05                		mov.L	20[r10], r5
 5923 0949 71 55 64                		add	#0x64, r5
 5924 094c EC 55                   		mov.L	[r5], r5
 5925 094e FC 37 45                		xor	r4, r5
 5926 0951 E7 A5 07                		mov.L	r5, 28[r10]
 5927 0954 ED A5 02                		mov.L	8[r10], r5
 5928 0957 69 85                   		shlr	#24, r5
 5929 0959 5B 55                   		movu.B	r5, r5
 5930 095b FB 42 00 00 00 00       		mov.L	#_Td, r4
 5931 0961 FE 65 43                		mov.L	[r5,r4], r3
 5932 0964 ED A5 01                		mov.L	4[r10], r5
 5933 0967 69 05                   		shlr	#16, r5
 5934 0969 5B 55                   		movu.B	r5, r5
 5935 096b FB 42 00 00 00 00       		mov.L	#_Td, r4
 5936 0971 72 55 00 01             		add	#0x100, r5
 5937 0975 FE 65 45                		mov.L	[r5,r4], r5
 5938 0978 FC 37 53                		xor	r5, r3
 5939 097b EC A5                   		mov.L	[r10], r5
 5940 097d 68 85                   		shlr	#8, r5
 5941 097f 5B 55                   		movu.B	r5, r5
 5942 0981 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5943 0987 72 55 00 02             		add	#0x200, r5
 5944 098b FE 65 45                		mov.L	[r5,r4], r5
 5945 098e FC 37 53                		xor	r5, r3
 5946 0991 ED A5 03                		mov.L	12[r10], r5
 5947 0994 5B 55                   		movu.B	r5, r5
 5948 0996 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5949 099c 72 55 00 03             		add	#0x300, r5
 5950 09a0 FE 65 45                		mov.L	[r5,r4], r5
 5951 09a3 EF 34                   		mov.L	r3, r4
 5952 09a5 FC 37 54                		xor	r5, r4
 5953 09a8 ED A5 05                		mov.L	20[r10], r5
 5954 09ab 71 55 68                		add	#0x68, r5
 5955 09ae EC 55                   		mov.L	[r5], r5
 5956 09b0 FC 37 45                		xor	r4, r5
 5957 09b3 E7 A5 08                		mov.L	r5, 32[r10]
 5958 09b6 ED A5 03                		mov.L	12[r10], r5
 5959 09b9 69 85                   		shlr	#24, r5
 5960 09bb 5B 55                   		movu.B	r5, r5
 5961 09bd FB 42 00 00 00 00       		mov.L	#_Td, r4
 5962 09c3 FE 65 43                		mov.L	[r5,r4], r3
 5963 09c6 ED A5 02                		mov.L	8[r10], r5
 5964 09c9 69 05                   		shlr	#16, r5
 5965 09cb 5B 55                   		movu.B	r5, r5
 5966 09cd FB 42 00 00 00 00       		mov.L	#_Td, r4
 5967 09d3 72 55 00 01             		add	#0x100, r5
 5968 09d7 FE 65 45                		mov.L	[r5,r4], r5
 5969 09da FC 37 53                		xor	r5, r3
 5970 09dd ED A5 01                		mov.L	4[r10], r5
 5971 09e0 68 85                   		shlr	#8, r5
 5972 09e2 5B 55                   		movu.B	r5, r5
 5973 09e4 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5974 09ea 72 55 00 02             		add	#0x200, r5
 5975 09ee FE 65 45                		mov.L	[r5,r4], r5
 5976 09f1 FC 37 53                		xor	r5, r3
 5977 09f4 EC A5                   		mov.L	[r10], r5
 5978 09f6 5B 55                   		movu.B	r5, r5
 5979 09f8 FB 42 00 00 00 00       		mov.L	#_Td, r4
 5980 09fe 72 55 00 03             		add	#0x300, r5
 5981 0a02 FE 65 45                		mov.L	[r5,r4], r5
 5982 0a05 EF 34                   		mov.L	r3, r4
 5983 0a07 FC 37 54                		xor	r5, r4
 5984 0a0a ED A5 05                		mov.L	20[r10], r5
 5985 0a0d 71 55 6C                		add	#0x6c, r5
 5986 0a10 EC 55                   		mov.L	[r5], r5
 5987 0a12 FC 37 45                		xor	r4, r5
 5988 0a15 E7 A5 09                		mov.L	r5, 36[r10]
 5989                             		.loc 2 2236 24
 5990 0a18 ED A5 06                		mov.L	24[r10], r5
 5991 0a1b 69 85                   		shlr	#24, r5
 5992 0a1d 5B 55                   		movu.B	r5, r5
 5993 0a1f FB 42 00 00 00 00       		mov.L	#_Td, r4
 5994 0a25 FE 65 43                		mov.L	[r5,r4], r3
 5995 0a28 ED A5 09                		mov.L	36[r10], r5
 5996 0a2b 69 05                   		shlr	#16, r5
 5997 0a2d 5B 55                   		movu.B	r5, r5
 5998 0a2f FB 42 00 00 00 00       		mov.L	#_Td, r4
 5999 0a35 72 55 00 01             		add	#0x100, r5
 6000 0a39 FE 65 45                		mov.L	[r5,r4], r5
 6001 0a3c FC 37 53                		xor	r5, r3
 6002 0a3f ED A5 08                		mov.L	32[r10], r5
 6003 0a42 68 85                   		shlr	#8, r5
 6004 0a44 5B 55                   		movu.B	r5, r5
 6005 0a46 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6006 0a4c 72 55 00 02             		add	#0x200, r5
 6007 0a50 FE 65 45                		mov.L	[r5,r4], r5
 6008 0a53 FC 37 53                		xor	r5, r3
 6009 0a56 ED A5 07                		mov.L	28[r10], r5
 6010 0a59 5B 55                   		movu.B	r5, r5
 6011 0a5b FB 42 00 00 00 00       		mov.L	#_Td, r4
 6012 0a61 72 55 00 03             		add	#0x300, r5
 6013 0a65 FE 65 45                		mov.L	[r5,r4], r5
 6014 0a68 EF 34                   		mov.L	r3, r4
 6015 0a6a FC 37 54                		xor	r5, r4
 6016 0a6d ED A5 05                		mov.L	20[r10], r5
 6017 0a70 71 55 70                		add	#0x70, r5
 6018 0a73 EC 55                   		mov.L	[r5], r5
 6019 0a75 FC 37 45                		xor	r4, r5
 6020 0a78 E3 A5                   		mov.L	r5, [r10]
 6021 0a7a ED A5 07                		mov.L	28[r10], r5
 6022 0a7d 69 85                   		shlr	#24, r5
 6023 0a7f 5B 55                   		movu.B	r5, r5
 6024 0a81 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6025 0a87 FE 65 43                		mov.L	[r5,r4], r3
 6026 0a8a ED A5 06                		mov.L	24[r10], r5
 6027 0a8d 69 05                   		shlr	#16, r5
 6028 0a8f 5B 55                   		movu.B	r5, r5
 6029 0a91 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6030 0a97 72 55 00 01             		add	#0x100, r5
 6031 0a9b FE 65 45                		mov.L	[r5,r4], r5
 6032 0a9e FC 37 53                		xor	r5, r3
 6033 0aa1 ED A5 09                		mov.L	36[r10], r5
 6034 0aa4 68 85                   		shlr	#8, r5
 6035 0aa6 5B 55                   		movu.B	r5, r5
 6036 0aa8 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6037 0aae 72 55 00 02             		add	#0x200, r5
 6038 0ab2 FE 65 45                		mov.L	[r5,r4], r5
 6039 0ab5 FC 37 53                		xor	r5, r3
 6040 0ab8 ED A5 08                		mov.L	32[r10], r5
 6041 0abb 5B 55                   		movu.B	r5, r5
 6042 0abd FB 42 00 00 00 00       		mov.L	#_Td, r4
 6043 0ac3 72 55 00 03             		add	#0x300, r5
 6044 0ac7 FE 65 45                		mov.L	[r5,r4], r5
 6045 0aca EF 34                   		mov.L	r3, r4
 6046 0acc FC 37 54                		xor	r5, r4
 6047 0acf ED A5 05                		mov.L	20[r10], r5
 6048 0ad2 71 55 74                		add	#0x74, r5
 6049 0ad5 EC 55                   		mov.L	[r5], r5
 6050 0ad7 FC 37 45                		xor	r4, r5
 6051 0ada E7 A5 01                		mov.L	r5, 4[r10]
 6052 0add ED A5 08                		mov.L	32[r10], r5
 6053 0ae0 69 85                   		shlr	#24, r5
 6054 0ae2 5B 55                   		movu.B	r5, r5
 6055 0ae4 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6056 0aea FE 65 43                		mov.L	[r5,r4], r3
 6057 0aed ED A5 07                		mov.L	28[r10], r5
 6058 0af0 69 05                   		shlr	#16, r5
 6059 0af2 5B 55                   		movu.B	r5, r5
 6060 0af4 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6061 0afa 72 55 00 01             		add	#0x100, r5
 6062 0afe FE 65 45                		mov.L	[r5,r4], r5
 6063 0b01 FC 37 53                		xor	r5, r3
 6064 0b04 ED A5 06                		mov.L	24[r10], r5
 6065 0b07 68 85                   		shlr	#8, r5
 6066 0b09 5B 55                   		movu.B	r5, r5
 6067 0b0b FB 42 00 00 00 00       		mov.L	#_Td, r4
 6068 0b11 72 55 00 02             		add	#0x200, r5
 6069 0b15 FE 65 45                		mov.L	[r5,r4], r5
 6070 0b18 FC 37 53                		xor	r5, r3
 6071 0b1b ED A5 09                		mov.L	36[r10], r5
 6072 0b1e 5B 55                   		movu.B	r5, r5
 6073 0b20 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6074 0b26 72 55 00 03             		add	#0x300, r5
 6075 0b2a FE 65 45                		mov.L	[r5,r4], r5
 6076 0b2d EF 34                   		mov.L	r3, r4
 6077 0b2f FC 37 54                		xor	r5, r4
 6078 0b32 ED A5 05                		mov.L	20[r10], r5
 6079 0b35 71 55 78                		add	#0x78, r5
 6080 0b38 EC 55                   		mov.L	[r5], r5
 6081 0b3a FC 37 45                		xor	r4, r5
 6082 0b3d E7 A5 02                		mov.L	r5, 8[r10]
 6083 0b40 ED A5 09                		mov.L	36[r10], r5
 6084 0b43 69 85                   		shlr	#24, r5
 6085 0b45 5B 55                   		movu.B	r5, r5
 6086 0b47 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6087 0b4d FE 65 43                		mov.L	[r5,r4], r3
 6088 0b50 ED A5 08                		mov.L	32[r10], r5
 6089 0b53 69 05                   		shlr	#16, r5
 6090 0b55 5B 55                   		movu.B	r5, r5
 6091 0b57 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6092 0b5d 72 55 00 01             		add	#0x100, r5
 6093 0b61 FE 65 45                		mov.L	[r5,r4], r5
 6094 0b64 FC 37 53                		xor	r5, r3
 6095 0b67 ED A5 07                		mov.L	28[r10], r5
 6096 0b6a 68 85                   		shlr	#8, r5
 6097 0b6c 5B 55                   		movu.B	r5, r5
 6098 0b6e FB 42 00 00 00 00       		mov.L	#_Td, r4
 6099 0b74 72 55 00 02             		add	#0x200, r5
 6100 0b78 FE 65 45                		mov.L	[r5,r4], r5
 6101 0b7b FC 37 53                		xor	r5, r3
 6102 0b7e ED A5 06                		mov.L	24[r10], r5
 6103 0b81 5B 55                   		movu.B	r5, r5
 6104 0b83 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6105 0b89 72 55 00 03             		add	#0x300, r5
 6106 0b8d FE 65 45                		mov.L	[r5,r4], r5
 6107 0b90 EF 34                   		mov.L	r3, r4
 6108 0b92 FC 37 54                		xor	r5, r4
 6109 0b95 ED A5 05                		mov.L	20[r10], r5
 6110 0b98 71 55 7C                		add	#0x7c, r5
 6111 0b9b EC 55                   		mov.L	[r5], r5
 6112 0b9d FC 37 45                		xor	r4, r5
 6113 0ba0 E7 A5 03                		mov.L	r5, 12[r10]
2237:../src/wolfcrypt/src/aes.c ****     DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
 6114                             		.loc 2 2237 5
 6115 0ba3 EC A5                   		mov.L	[r10], r5
 6116 0ba5 69 85                   		shlr	#24, r5
 6117 0ba7 5B 55                   		movu.B	r5, r5
 6118 0ba9 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6119 0baf FE 65 43                		mov.L	[r5,r4], r3
 6120 0bb2 ED A5 03                		mov.L	12[r10], r5
 6121 0bb5 69 05                   		shlr	#16, r5
 6122 0bb7 5B 55                   		movu.B	r5, r5
 6123 0bb9 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6124 0bbf 72 55 00 01             		add	#0x100, r5
 6125 0bc3 FE 65 45                		mov.L	[r5,r4], r5
 6126 0bc6 FC 37 53                		xor	r5, r3
 6127 0bc9 ED A5 02                		mov.L	8[r10], r5
 6128 0bcc 68 85                   		shlr	#8, r5
 6129 0bce 5B 55                   		movu.B	r5, r5
 6130 0bd0 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6131 0bd6 72 55 00 02             		add	#0x200, r5
 6132 0bda FE 65 45                		mov.L	[r5,r4], r5
 6133 0bdd FC 37 53                		xor	r5, r3
 6134 0be0 ED A5 01                		mov.L	4[r10], r5
 6135 0be3 5B 55                   		movu.B	r5, r5
 6136 0be5 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6137 0beb 72 55 00 03             		add	#0x300, r5
 6138 0bef FE 65 45                		mov.L	[r5,r4], r5
 6139 0bf2 EF 34                   		mov.L	r3, r4
 6140 0bf4 FC 37 54                		xor	r5, r4
 6141 0bf7 ED A5 05                		mov.L	20[r10], r5
 6142 0bfa 72 55 80 00             		add	#0x80, r5
 6143 0bfe EC 55                   		mov.L	[r5], r5
 6144 0c00 FC 37 45                		xor	r4, r5
 6145 0c03 E7 A5 06                		mov.L	r5, 24[r10]
 6146 0c06 ED A5 01                		mov.L	4[r10], r5
 6147 0c09 69 85                   		shlr	#24, r5
 6148 0c0b 5B 55                   		movu.B	r5, r5
 6149 0c0d FB 42 00 00 00 00       		mov.L	#_Td, r4
 6150 0c13 FE 65 43                		mov.L	[r5,r4], r3
 6151 0c16 EC A5                   		mov.L	[r10], r5
 6152 0c18 69 05                   		shlr	#16, r5
 6153 0c1a 5B 55                   		movu.B	r5, r5
 6154 0c1c FB 42 00 00 00 00       		mov.L	#_Td, r4
 6155 0c22 72 55 00 01             		add	#0x100, r5
 6156 0c26 FE 65 45                		mov.L	[r5,r4], r5
 6157 0c29 FC 37 53                		xor	r5, r3
 6158 0c2c ED A5 03                		mov.L	12[r10], r5
 6159 0c2f 68 85                   		shlr	#8, r5
 6160 0c31 5B 55                   		movu.B	r5, r5
 6161 0c33 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6162 0c39 72 55 00 02             		add	#0x200, r5
 6163 0c3d FE 65 45                		mov.L	[r5,r4], r5
 6164 0c40 FC 37 53                		xor	r5, r3
 6165 0c43 ED A5 02                		mov.L	8[r10], r5
 6166 0c46 5B 55                   		movu.B	r5, r5
 6167 0c48 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6168 0c4e 72 55 00 03             		add	#0x300, r5
 6169 0c52 FE 65 45                		mov.L	[r5,r4], r5
 6170 0c55 EF 34                   		mov.L	r3, r4
 6171 0c57 FC 37 54                		xor	r5, r4
 6172 0c5a ED A5 05                		mov.L	20[r10], r5
 6173 0c5d 72 55 84 00             		add	#0x84, r5
 6174 0c61 EC 55                   		mov.L	[r5], r5
 6175 0c63 FC 37 45                		xor	r4, r5
 6176 0c66 E7 A5 07                		mov.L	r5, 28[r10]
 6177 0c69 ED A5 02                		mov.L	8[r10], r5
 6178 0c6c 69 85                   		shlr	#24, r5
 6179 0c6e 5B 55                   		movu.B	r5, r5
 6180 0c70 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6181 0c76 FE 65 43                		mov.L	[r5,r4], r3
 6182 0c79 ED A5 01                		mov.L	4[r10], r5
 6183 0c7c 69 05                   		shlr	#16, r5
 6184 0c7e 5B 55                   		movu.B	r5, r5
 6185 0c80 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6186 0c86 72 55 00 01             		add	#0x100, r5
 6187 0c8a FE 65 45                		mov.L	[r5,r4], r5
 6188 0c8d FC 37 53                		xor	r5, r3
 6189 0c90 EC A5                   		mov.L	[r10], r5
 6190 0c92 68 85                   		shlr	#8, r5
 6191 0c94 5B 55                   		movu.B	r5, r5
 6192 0c96 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6193 0c9c 72 55 00 02             		add	#0x200, r5
 6194 0ca0 FE 65 45                		mov.L	[r5,r4], r5
 6195 0ca3 FC 37 53                		xor	r5, r3
 6196 0ca6 ED A5 03                		mov.L	12[r10], r5
 6197 0ca9 5B 55                   		movu.B	r5, r5
 6198 0cab FB 42 00 00 00 00       		mov.L	#_Td, r4
 6199 0cb1 72 55 00 03             		add	#0x300, r5
 6200 0cb5 FE 65 45                		mov.L	[r5,r4], r5
 6201 0cb8 EF 34                   		mov.L	r3, r4
 6202 0cba FC 37 54                		xor	r5, r4
 6203 0cbd ED A5 05                		mov.L	20[r10], r5
 6204 0cc0 72 55 88 00             		add	#0x88, r5
 6205 0cc4 EC 55                   		mov.L	[r5], r5
 6206 0cc6 FC 37 45                		xor	r4, r5
 6207 0cc9 E7 A5 08                		mov.L	r5, 32[r10]
 6208 0ccc ED A5 03                		mov.L	12[r10], r5
 6209 0ccf 69 85                   		shlr	#24, r5
 6210 0cd1 5B 55                   		movu.B	r5, r5
 6211 0cd3 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6212 0cd9 FE 65 43                		mov.L	[r5,r4], r3
 6213 0cdc ED A5 02                		mov.L	8[r10], r5
 6214 0cdf 69 05                   		shlr	#16, r5
 6215 0ce1 5B 55                   		movu.B	r5, r5
 6216 0ce3 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6217 0ce9 72 55 00 01             		add	#0x100, r5
 6218 0ced FE 65 45                		mov.L	[r5,r4], r5
 6219 0cf0 FC 37 53                		xor	r5, r3
 6220 0cf3 ED A5 01                		mov.L	4[r10], r5
 6221 0cf6 68 85                   		shlr	#8, r5
 6222 0cf8 5B 55                   		movu.B	r5, r5
 6223 0cfa FB 42 00 00 00 00       		mov.L	#_Td, r4
 6224 0d00 72 55 00 02             		add	#0x200, r5
 6225 0d04 FE 65 45                		mov.L	[r5,r4], r5
 6226 0d07 FC 37 53                		xor	r5, r3
 6227 0d0a EC A5                   		mov.L	[r10], r5
 6228 0d0c 5B 55                   		movu.B	r5, r5
 6229 0d0e FB 42 00 00 00 00       		mov.L	#_Td, r4
 6230 0d14 72 55 00 03             		add	#0x300, r5
 6231 0d18 FE 65 45                		mov.L	[r5,r4], r5
 6232 0d1b EF 34                   		mov.L	r3, r4
 6233 0d1d FC 37 54                		xor	r5, r4
 6234 0d20 ED A5 05                		mov.L	20[r10], r5
 6235 0d23 72 55 8C 00             		add	#0x8c, r5
 6236 0d27 EC 55                   		mov.L	[r5], r5
 6237 0d29 FC 37 45                		xor	r4, r5
 6238 0d2c E7 A5 09                		mov.L	r5, 36[r10]
 6239                             		.loc 2 2237 24
 6240 0d2f ED A5 06                		mov.L	24[r10], r5
 6241 0d32 69 85                   		shlr	#24, r5
 6242 0d34 5B 55                   		movu.B	r5, r5
 6243 0d36 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6244 0d3c FE 65 43                		mov.L	[r5,r4], r3
 6245 0d3f ED A5 09                		mov.L	36[r10], r5
 6246 0d42 69 05                   		shlr	#16, r5
 6247 0d44 5B 55                   		movu.B	r5, r5
 6248 0d46 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6249 0d4c 72 55 00 01             		add	#0x100, r5
 6250 0d50 FE 65 45                		mov.L	[r5,r4], r5
 6251 0d53 FC 37 53                		xor	r5, r3
 6252 0d56 ED A5 08                		mov.L	32[r10], r5
 6253 0d59 68 85                   		shlr	#8, r5
 6254 0d5b 5B 55                   		movu.B	r5, r5
 6255 0d5d FB 42 00 00 00 00       		mov.L	#_Td, r4
 6256 0d63 72 55 00 02             		add	#0x200, r5
 6257 0d67 FE 65 45                		mov.L	[r5,r4], r5
 6258 0d6a FC 37 53                		xor	r5, r3
 6259 0d6d ED A5 07                		mov.L	28[r10], r5
 6260 0d70 5B 55                   		movu.B	r5, r5
 6261 0d72 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6262 0d78 72 55 00 03             		add	#0x300, r5
 6263 0d7c FE 65 45                		mov.L	[r5,r4], r5
 6264 0d7f EF 34                   		mov.L	r3, r4
 6265 0d81 FC 37 54                		xor	r5, r4
 6266 0d84 ED A5 05                		mov.L	20[r10], r5
 6267 0d87 72 55 90 00             		add	#0x90, r5
 6268 0d8b EC 55                   		mov.L	[r5], r5
 6269 0d8d FC 37 45                		xor	r4, r5
 6270 0d90 E3 A5                   		mov.L	r5, [r10]
 6271 0d92 ED A5 07                		mov.L	28[r10], r5
 6272 0d95 69 85                   		shlr	#24, r5
 6273 0d97 5B 55                   		movu.B	r5, r5
 6274 0d99 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6275 0d9f FE 65 43                		mov.L	[r5,r4], r3
 6276 0da2 ED A5 06                		mov.L	24[r10], r5
 6277 0da5 69 05                   		shlr	#16, r5
 6278 0da7 5B 55                   		movu.B	r5, r5
 6279 0da9 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6280 0daf 72 55 00 01             		add	#0x100, r5
 6281 0db3 FE 65 45                		mov.L	[r5,r4], r5
 6282 0db6 FC 37 53                		xor	r5, r3
 6283 0db9 ED A5 09                		mov.L	36[r10], r5
 6284 0dbc 68 85                   		shlr	#8, r5
 6285 0dbe 5B 55                   		movu.B	r5, r5
 6286 0dc0 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6287 0dc6 72 55 00 02             		add	#0x200, r5
 6288 0dca FE 65 45                		mov.L	[r5,r4], r5
 6289 0dcd FC 37 53                		xor	r5, r3
 6290 0dd0 ED A5 08                		mov.L	32[r10], r5
 6291 0dd3 5B 55                   		movu.B	r5, r5
 6292 0dd5 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6293 0ddb 72 55 00 03             		add	#0x300, r5
 6294 0ddf FE 65 45                		mov.L	[r5,r4], r5
 6295 0de2 EF 34                   		mov.L	r3, r4
 6296 0de4 FC 37 54                		xor	r5, r4
 6297 0de7 ED A5 05                		mov.L	20[r10], r5
 6298 0dea 72 55 94 00             		add	#0x94, r5
 6299 0dee EC 55                   		mov.L	[r5], r5
 6300 0df0 FC 37 45                		xor	r4, r5
 6301 0df3 E7 A5 01                		mov.L	r5, 4[r10]
 6302 0df6 ED A5 08                		mov.L	32[r10], r5
 6303 0df9 69 85                   		shlr	#24, r5
 6304 0dfb 5B 55                   		movu.B	r5, r5
 6305 0dfd FB 42 00 00 00 00       		mov.L	#_Td, r4
 6306 0e03 FE 65 43                		mov.L	[r5,r4], r3
 6307 0e06 ED A5 07                		mov.L	28[r10], r5
 6308 0e09 69 05                   		shlr	#16, r5
 6309 0e0b 5B 55                   		movu.B	r5, r5
 6310 0e0d FB 42 00 00 00 00       		mov.L	#_Td, r4
 6311 0e13 72 55 00 01             		add	#0x100, r5
 6312 0e17 FE 65 45                		mov.L	[r5,r4], r5
 6313 0e1a FC 37 53                		xor	r5, r3
 6314 0e1d ED A5 06                		mov.L	24[r10], r5
 6315 0e20 68 85                   		shlr	#8, r5
 6316 0e22 5B 55                   		movu.B	r5, r5
 6317 0e24 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6318 0e2a 72 55 00 02             		add	#0x200, r5
 6319 0e2e FE 65 45                		mov.L	[r5,r4], r5
 6320 0e31 FC 37 53                		xor	r5, r3
 6321 0e34 ED A5 09                		mov.L	36[r10], r5
 6322 0e37 5B 55                   		movu.B	r5, r5
 6323 0e39 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6324 0e3f 72 55 00 03             		add	#0x300, r5
 6325 0e43 FE 65 45                		mov.L	[r5,r4], r5
 6326 0e46 EF 34                   		mov.L	r3, r4
 6327 0e48 FC 37 54                		xor	r5, r4
 6328 0e4b ED A5 05                		mov.L	20[r10], r5
 6329 0e4e 72 55 98 00             		add	#0x98, r5
 6330 0e52 EC 55                   		mov.L	[r5], r5
 6331 0e54 FC 37 45                		xor	r4, r5
 6332 0e57 E7 A5 02                		mov.L	r5, 8[r10]
 6333 0e5a ED A5 09                		mov.L	36[r10], r5
 6334 0e5d 69 85                   		shlr	#24, r5
 6335 0e5f 5B 55                   		movu.B	r5, r5
 6336 0e61 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6337 0e67 FE 65 43                		mov.L	[r5,r4], r3
 6338 0e6a ED A5 08                		mov.L	32[r10], r5
 6339 0e6d 69 05                   		shlr	#16, r5
 6340 0e6f 5B 55                   		movu.B	r5, r5
 6341 0e71 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6342 0e77 72 55 00 01             		add	#0x100, r5
 6343 0e7b FE 65 45                		mov.L	[r5,r4], r5
 6344 0e7e FC 37 53                		xor	r5, r3
 6345 0e81 ED A5 07                		mov.L	28[r10], r5
 6346 0e84 68 85                   		shlr	#8, r5
 6347 0e86 5B 55                   		movu.B	r5, r5
 6348 0e88 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6349 0e8e 72 55 00 02             		add	#0x200, r5
 6350 0e92 FE 65 45                		mov.L	[r5,r4], r5
 6351 0e95 FC 37 53                		xor	r5, r3
 6352 0e98 ED A5 06                		mov.L	24[r10], r5
 6353 0e9b 5B 55                   		movu.B	r5, r5
 6354 0e9d FB 42 00 00 00 00       		mov.L	#_Td, r4
 6355 0ea3 72 55 00 03             		add	#0x300, r5
 6356 0ea7 FE 65 45                		mov.L	[r5,r4], r5
 6357 0eaa EF 34                   		mov.L	r3, r4
 6358 0eac FC 37 54                		xor	r5, r4
 6359 0eaf ED A5 05                		mov.L	20[r10], r5
 6360 0eb2 72 55 9C 00             		add	#0x9c, r5
 6361 0eb6 EC 55                   		mov.L	[r5], r5
 6362 0eb8 FC 37 45                		xor	r4, r5
 6363 0ebb E7 A5 03                		mov.L	r5, 12[r10]
2238:../src/wolfcrypt/src/aes.c ****     if (r > 5) {
 6364                             		.loc 2 2238 8
 6365 0ebe ED A5 04                		mov.L	16[r10], r5
 6366 0ec1 61 55                   		cmp	#5, r5
 6367 0ec3 24 05 38 43 06          		bleu	.L64
2239:../src/wolfcrypt/src/aes.c ****         DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
 6368                             		.loc 2 2239 9
 6369 0ec8 EC A5                   		mov.L	[r10], r5
 6370 0eca 69 85                   		shlr	#24, r5
 6371 0ecc 5B 55                   		movu.B	r5, r5
 6372 0ece FB 42 00 00 00 00       		mov.L	#_Td, r4
 6373 0ed4 FE 65 43                		mov.L	[r5,r4], r3
 6374 0ed7 ED A5 03                		mov.L	12[r10], r5
 6375 0eda 69 05                   		shlr	#16, r5
 6376 0edc 5B 55                   		movu.B	r5, r5
 6377 0ede FB 42 00 00 00 00       		mov.L	#_Td, r4
 6378 0ee4 72 55 00 01             		add	#0x100, r5
 6379 0ee8 FE 65 45                		mov.L	[r5,r4], r5
 6380 0eeb FC 37 53                		xor	r5, r3
 6381 0eee ED A5 02                		mov.L	8[r10], r5
 6382 0ef1 68 85                   		shlr	#8, r5
 6383 0ef3 5B 55                   		movu.B	r5, r5
 6384 0ef5 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6385 0efb 72 55 00 02             		add	#0x200, r5
 6386 0eff FE 65 45                		mov.L	[r5,r4], r5
 6387 0f02 FC 37 53                		xor	r5, r3
 6388 0f05 ED A5 01                		mov.L	4[r10], r5
 6389 0f08 5B 55                   		movu.B	r5, r5
 6390 0f0a FB 42 00 00 00 00       		mov.L	#_Td, r4
 6391 0f10 72 55 00 03             		add	#0x300, r5
 6392 0f14 FE 65 45                		mov.L	[r5,r4], r5
 6393 0f17 EF 34                   		mov.L	r3, r4
 6394 0f19 FC 37 54                		xor	r5, r4
 6395 0f1c ED A5 05                		mov.L	20[r10], r5
 6396 0f1f 72 55 A0 00             		add	#0xa0, r5
 6397 0f23 EC 55                   		mov.L	[r5], r5
 6398 0f25 FC 37 45                		xor	r4, r5
 6399 0f28 E7 A5 06                		mov.L	r5, 24[r10]
 6400 0f2b ED A5 01                		mov.L	4[r10], r5
 6401 0f2e 69 85                   		shlr	#24, r5
 6402 0f30 5B 55                   		movu.B	r5, r5
 6403 0f32 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6404 0f38 FE 65 43                		mov.L	[r5,r4], r3
 6405 0f3b EC A5                   		mov.L	[r10], r5
 6406 0f3d 69 05                   		shlr	#16, r5
 6407 0f3f 5B 55                   		movu.B	r5, r5
 6408 0f41 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6409 0f47 72 55 00 01             		add	#0x100, r5
 6410 0f4b FE 65 45                		mov.L	[r5,r4], r5
 6411 0f4e FC 37 53                		xor	r5, r3
 6412 0f51 ED A5 03                		mov.L	12[r10], r5
 6413 0f54 68 85                   		shlr	#8, r5
 6414 0f56 5B 55                   		movu.B	r5, r5
 6415 0f58 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6416 0f5e 72 55 00 02             		add	#0x200, r5
 6417 0f62 FE 65 45                		mov.L	[r5,r4], r5
 6418 0f65 FC 37 53                		xor	r5, r3
 6419 0f68 ED A5 02                		mov.L	8[r10], r5
 6420 0f6b 5B 55                   		movu.B	r5, r5
 6421 0f6d FB 42 00 00 00 00       		mov.L	#_Td, r4
 6422 0f73 72 55 00 03             		add	#0x300, r5
 6423 0f77 FE 65 45                		mov.L	[r5,r4], r5
 6424 0f7a EF 34                   		mov.L	r3, r4
 6425 0f7c FC 37 54                		xor	r5, r4
 6426 0f7f ED A5 05                		mov.L	20[r10], r5
 6427 0f82 72 55 A4 00             		add	#0xa4, r5
 6428 0f86 EC 55                   		mov.L	[r5], r5
 6429 0f88 FC 37 45                		xor	r4, r5
 6430 0f8b E7 A5 07                		mov.L	r5, 28[r10]
 6431 0f8e ED A5 02                		mov.L	8[r10], r5
 6432 0f91 69 85                   		shlr	#24, r5
 6433 0f93 5B 55                   		movu.B	r5, r5
 6434 0f95 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6435 0f9b FE 65 43                		mov.L	[r5,r4], r3
 6436 0f9e ED A5 01                		mov.L	4[r10], r5
 6437 0fa1 69 05                   		shlr	#16, r5
 6438 0fa3 5B 55                   		movu.B	r5, r5
 6439 0fa5 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6440 0fab 72 55 00 01             		add	#0x100, r5
 6441 0faf FE 65 45                		mov.L	[r5,r4], r5
 6442 0fb2 FC 37 53                		xor	r5, r3
 6443 0fb5 EC A5                   		mov.L	[r10], r5
 6444 0fb7 68 85                   		shlr	#8, r5
 6445 0fb9 5B 55                   		movu.B	r5, r5
 6446 0fbb FB 42 00 00 00 00       		mov.L	#_Td, r4
 6447 0fc1 72 55 00 02             		add	#0x200, r5
 6448 0fc5 FE 65 45                		mov.L	[r5,r4], r5
 6449 0fc8 FC 37 53                		xor	r5, r3
 6450 0fcb ED A5 03                		mov.L	12[r10], r5
 6451 0fce 5B 55                   		movu.B	r5, r5
 6452 0fd0 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6453 0fd6 72 55 00 03             		add	#0x300, r5
 6454 0fda FE 65 45                		mov.L	[r5,r4], r5
 6455 0fdd EF 34                   		mov.L	r3, r4
 6456 0fdf FC 37 54                		xor	r5, r4
 6457 0fe2 ED A5 05                		mov.L	20[r10], r5
 6458 0fe5 72 55 A8 00             		add	#0xa8, r5
 6459 0fe9 EC 55                   		mov.L	[r5], r5
 6460 0feb FC 37 45                		xor	r4, r5
 6461 0fee E7 A5 08                		mov.L	r5, 32[r10]
 6462 0ff1 ED A5 03                		mov.L	12[r10], r5
 6463 0ff4 69 85                   		shlr	#24, r5
 6464 0ff6 5B 55                   		movu.B	r5, r5
 6465 0ff8 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6466 0ffe FE 65 43                		mov.L	[r5,r4], r3
 6467 1001 ED A5 02                		mov.L	8[r10], r5
 6468 1004 69 05                   		shlr	#16, r5
 6469 1006 5B 55                   		movu.B	r5, r5
 6470 1008 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6471 100e 72 55 00 01             		add	#0x100, r5
 6472 1012 FE 65 45                		mov.L	[r5,r4], r5
 6473 1015 FC 37 53                		xor	r5, r3
 6474 1018 ED A5 01                		mov.L	4[r10], r5
 6475 101b 68 85                   		shlr	#8, r5
 6476 101d 5B 55                   		movu.B	r5, r5
 6477 101f FB 42 00 00 00 00       		mov.L	#_Td, r4
 6478 1025 72 55 00 02             		add	#0x200, r5
 6479 1029 FE 65 45                		mov.L	[r5,r4], r5
 6480 102c FC 37 53                		xor	r5, r3
 6481 102f EC A5                   		mov.L	[r10], r5
 6482 1031 5B 55                   		movu.B	r5, r5
 6483 1033 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6484 1039 72 55 00 03             		add	#0x300, r5
 6485 103d FE 65 45                		mov.L	[r5,r4], r5
 6486 1040 EF 34                   		mov.L	r3, r4
 6487 1042 FC 37 54                		xor	r5, r4
 6488 1045 ED A5 05                		mov.L	20[r10], r5
 6489 1048 72 55 AC 00             		add	#0xac, r5
 6490 104c EC 55                   		mov.L	[r5], r5
 6491 104e FC 37 45                		xor	r4, r5
 6492 1051 E7 A5 09                		mov.L	r5, 36[r10]
 6493                             		.loc 2 2239 28
 6494 1054 ED A5 06                		mov.L	24[r10], r5
 6495 1057 69 85                   		shlr	#24, r5
 6496 1059 5B 55                   		movu.B	r5, r5
 6497 105b FB 42 00 00 00 00       		mov.L	#_Td, r4
 6498 1061 FE 65 43                		mov.L	[r5,r4], r3
 6499 1064 ED A5 09                		mov.L	36[r10], r5
 6500 1067 69 05                   		shlr	#16, r5
 6501 1069 5B 55                   		movu.B	r5, r5
 6502 106b FB 42 00 00 00 00       		mov.L	#_Td, r4
 6503 1071 72 55 00 01             		add	#0x100, r5
 6504 1075 FE 65 45                		mov.L	[r5,r4], r5
 6505 1078 FC 37 53                		xor	r5, r3
 6506 107b ED A5 08                		mov.L	32[r10], r5
 6507 107e 68 85                   		shlr	#8, r5
 6508 1080 5B 55                   		movu.B	r5, r5
 6509 1082 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6510 1088 72 55 00 02             		add	#0x200, r5
 6511 108c FE 65 45                		mov.L	[r5,r4], r5
 6512 108f FC 37 53                		xor	r5, r3
 6513 1092 ED A5 07                		mov.L	28[r10], r5
 6514 1095 5B 55                   		movu.B	r5, r5
 6515 1097 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6516 109d 72 55 00 03             		add	#0x300, r5
 6517 10a1 FE 65 45                		mov.L	[r5,r4], r5
 6518 10a4 EF 34                   		mov.L	r3, r4
 6519 10a6 FC 37 54                		xor	r5, r4
 6520 10a9 ED A5 05                		mov.L	20[r10], r5
 6521 10ac 72 55 B0 00             		add	#0xb0, r5
 6522 10b0 EC 55                   		mov.L	[r5], r5
 6523 10b2 FC 37 45                		xor	r4, r5
 6524 10b5 E3 A5                   		mov.L	r5, [r10]
 6525 10b7 ED A5 07                		mov.L	28[r10], r5
 6526 10ba 69 85                   		shlr	#24, r5
 6527 10bc 5B 55                   		movu.B	r5, r5
 6528 10be FB 42 00 00 00 00       		mov.L	#_Td, r4
 6529 10c4 FE 65 43                		mov.L	[r5,r4], r3
 6530 10c7 ED A5 06                		mov.L	24[r10], r5
 6531 10ca 69 05                   		shlr	#16, r5
 6532 10cc 5B 55                   		movu.B	r5, r5
 6533 10ce FB 42 00 00 00 00       		mov.L	#_Td, r4
 6534 10d4 72 55 00 01             		add	#0x100, r5
 6535 10d8 FE 65 45                		mov.L	[r5,r4], r5
 6536 10db FC 37 53                		xor	r5, r3
 6537 10de ED A5 09                		mov.L	36[r10], r5
 6538 10e1 68 85                   		shlr	#8, r5
 6539 10e3 5B 55                   		movu.B	r5, r5
 6540 10e5 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6541 10eb 72 55 00 02             		add	#0x200, r5
 6542 10ef FE 65 45                		mov.L	[r5,r4], r5
 6543 10f2 FC 37 53                		xor	r5, r3
 6544 10f5 ED A5 08                		mov.L	32[r10], r5
 6545 10f8 5B 55                   		movu.B	r5, r5
 6546 10fa FB 42 00 00 00 00       		mov.L	#_Td, r4
 6547 1100 72 55 00 03             		add	#0x300, r5
 6548 1104 FE 65 45                		mov.L	[r5,r4], r5
 6549 1107 EF 34                   		mov.L	r3, r4
 6550 1109 FC 37 54                		xor	r5, r4
 6551 110c ED A5 05                		mov.L	20[r10], r5
 6552 110f 72 55 B4 00             		add	#0xb4, r5
 6553 1113 EC 55                   		mov.L	[r5], r5
 6554 1115 FC 37 45                		xor	r4, r5
 6555 1118 E7 A5 01                		mov.L	r5, 4[r10]
 6556 111b ED A5 08                		mov.L	32[r10], r5
 6557 111e 69 85                   		shlr	#24, r5
 6558 1120 5B 55                   		movu.B	r5, r5
 6559 1122 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6560 1128 FE 65 43                		mov.L	[r5,r4], r3
 6561 112b ED A5 07                		mov.L	28[r10], r5
 6562 112e 69 05                   		shlr	#16, r5
 6563 1130 5B 55                   		movu.B	r5, r5
 6564 1132 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6565 1138 72 55 00 01             		add	#0x100, r5
 6566 113c FE 65 45                		mov.L	[r5,r4], r5
 6567 113f FC 37 53                		xor	r5, r3
 6568 1142 ED A5 06                		mov.L	24[r10], r5
 6569 1145 68 85                   		shlr	#8, r5
 6570 1147 5B 55                   		movu.B	r5, r5
 6571 1149 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6572 114f 72 55 00 02             		add	#0x200, r5
 6573 1153 FE 65 45                		mov.L	[r5,r4], r5
 6574 1156 FC 37 53                		xor	r5, r3
 6575 1159 ED A5 09                		mov.L	36[r10], r5
 6576 115c 5B 55                   		movu.B	r5, r5
 6577 115e FB 42 00 00 00 00       		mov.L	#_Td, r4
 6578 1164 72 55 00 03             		add	#0x300, r5
 6579 1168 FE 65 45                		mov.L	[r5,r4], r5
 6580 116b EF 34                   		mov.L	r3, r4
 6581 116d FC 37 54                		xor	r5, r4
 6582 1170 ED A5 05                		mov.L	20[r10], r5
 6583 1173 72 55 B8 00             		add	#0xb8, r5
 6584 1177 EC 55                   		mov.L	[r5], r5
 6585 1179 FC 37 45                		xor	r4, r5
 6586 117c E7 A5 02                		mov.L	r5, 8[r10]
 6587 117f ED A5 09                		mov.L	36[r10], r5
 6588 1182 69 85                   		shlr	#24, r5
 6589 1184 5B 55                   		movu.B	r5, r5
 6590 1186 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6591 118c FE 65 43                		mov.L	[r5,r4], r3
 6592 118f ED A5 08                		mov.L	32[r10], r5
 6593 1192 69 05                   		shlr	#16, r5
 6594 1194 5B 55                   		movu.B	r5, r5
 6595 1196 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6596 119c 72 55 00 01             		add	#0x100, r5
 6597 11a0 FE 65 45                		mov.L	[r5,r4], r5
 6598 11a3 FC 37 53                		xor	r5, r3
 6599 11a6 ED A5 07                		mov.L	28[r10], r5
 6600 11a9 68 85                   		shlr	#8, r5
 6601 11ab 5B 55                   		movu.B	r5, r5
 6602 11ad FB 42 00 00 00 00       		mov.L	#_Td, r4
 6603 11b3 72 55 00 02             		add	#0x200, r5
 6604 11b7 FE 65 45                		mov.L	[r5,r4], r5
 6605 11ba FC 37 53                		xor	r5, r3
 6606 11bd ED A5 06                		mov.L	24[r10], r5
 6607 11c0 5B 55                   		movu.B	r5, r5
 6608 11c2 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6609 11c8 72 55 00 03             		add	#0x300, r5
 6610 11cc FE 65 45                		mov.L	[r5,r4], r5
 6611 11cf EF 34                   		mov.L	r3, r4
 6612 11d1 FC 37 54                		xor	r5, r4
 6613 11d4 ED A5 05                		mov.L	20[r10], r5
 6614 11d7 72 55 BC 00             		add	#0xbc, r5
 6615 11db EC 55                   		mov.L	[r5], r5
 6616 11dd FC 37 45                		xor	r4, r5
 6617 11e0 E7 A5 03                		mov.L	r5, 12[r10]
2240:../src/wolfcrypt/src/aes.c ****         if (r > 6) {
 6618                             		.loc 2 2240 12
 6619 11e3 ED A5 04                		mov.L	16[r10], r5
 6620 11e6 61 65                   		cmp	#6, r5
 6621 11e8 24 05 38 1E 03          		bleu	.L64
2241:../src/wolfcrypt/src/aes.c ****             DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
 6622                             		.loc 2 2241 13
 6623 11ed EC A5                   		mov.L	[r10], r5
 6624 11ef 69 85                   		shlr	#24, r5
 6625 11f1 5B 55                   		movu.B	r5, r5
 6626 11f3 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6627 11f9 FE 65 43                		mov.L	[r5,r4], r3
 6628 11fc ED A5 03                		mov.L	12[r10], r5
 6629 11ff 69 05                   		shlr	#16, r5
 6630 1201 5B 55                   		movu.B	r5, r5
 6631 1203 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6632 1209 72 55 00 01             		add	#0x100, r5
 6633 120d FE 65 45                		mov.L	[r5,r4], r5
 6634 1210 FC 37 53                		xor	r5, r3
 6635 1213 ED A5 02                		mov.L	8[r10], r5
 6636 1216 68 85                   		shlr	#8, r5
 6637 1218 5B 55                   		movu.B	r5, r5
 6638 121a FB 42 00 00 00 00       		mov.L	#_Td, r4
 6639 1220 72 55 00 02             		add	#0x200, r5
 6640 1224 FE 65 45                		mov.L	[r5,r4], r5
 6641 1227 FC 37 53                		xor	r5, r3
 6642 122a ED A5 01                		mov.L	4[r10], r5
 6643 122d 5B 55                   		movu.B	r5, r5
 6644 122f FB 42 00 00 00 00       		mov.L	#_Td, r4
 6645 1235 72 55 00 03             		add	#0x300, r5
 6646 1239 FE 65 45                		mov.L	[r5,r4], r5
 6647 123c EF 34                   		mov.L	r3, r4
 6648 123e FC 37 54                		xor	r5, r4
 6649 1241 ED A5 05                		mov.L	20[r10], r5
 6650 1244 72 55 C0 00             		add	#0xc0, r5
 6651 1248 EC 55                   		mov.L	[r5], r5
 6652 124a FC 37 45                		xor	r4, r5
 6653 124d E7 A5 06                		mov.L	r5, 24[r10]
 6654 1250 ED A5 01                		mov.L	4[r10], r5
 6655 1253 69 85                   		shlr	#24, r5
 6656 1255 5B 55                   		movu.B	r5, r5
 6657 1257 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6658 125d FE 65 43                		mov.L	[r5,r4], r3
 6659 1260 EC A5                   		mov.L	[r10], r5
 6660 1262 69 05                   		shlr	#16, r5
 6661 1264 5B 55                   		movu.B	r5, r5
 6662 1266 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6663 126c 72 55 00 01             		add	#0x100, r5
 6664 1270 FE 65 45                		mov.L	[r5,r4], r5
 6665 1273 FC 37 53                		xor	r5, r3
 6666 1276 ED A5 03                		mov.L	12[r10], r5
 6667 1279 68 85                   		shlr	#8, r5
 6668 127b 5B 55                   		movu.B	r5, r5
 6669 127d FB 42 00 00 00 00       		mov.L	#_Td, r4
 6670 1283 72 55 00 02             		add	#0x200, r5
 6671 1287 FE 65 45                		mov.L	[r5,r4], r5
 6672 128a FC 37 53                		xor	r5, r3
 6673 128d ED A5 02                		mov.L	8[r10], r5
 6674 1290 5B 55                   		movu.B	r5, r5
 6675 1292 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6676 1298 72 55 00 03             		add	#0x300, r5
 6677 129c FE 65 45                		mov.L	[r5,r4], r5
 6678 129f EF 34                   		mov.L	r3, r4
 6679 12a1 FC 37 54                		xor	r5, r4
 6680 12a4 ED A5 05                		mov.L	20[r10], r5
 6681 12a7 72 55 C4 00             		add	#0xc4, r5
 6682 12ab EC 55                   		mov.L	[r5], r5
 6683 12ad FC 37 45                		xor	r4, r5
 6684 12b0 E7 A5 07                		mov.L	r5, 28[r10]
 6685 12b3 ED A5 02                		mov.L	8[r10], r5
 6686 12b6 69 85                   		shlr	#24, r5
 6687 12b8 5B 55                   		movu.B	r5, r5
 6688 12ba FB 42 00 00 00 00       		mov.L	#_Td, r4
 6689 12c0 FE 65 43                		mov.L	[r5,r4], r3
 6690 12c3 ED A5 01                		mov.L	4[r10], r5
 6691 12c6 69 05                   		shlr	#16, r5
 6692 12c8 5B 55                   		movu.B	r5, r5
 6693 12ca FB 42 00 00 00 00       		mov.L	#_Td, r4
 6694 12d0 72 55 00 01             		add	#0x100, r5
 6695 12d4 FE 65 45                		mov.L	[r5,r4], r5
 6696 12d7 FC 37 53                		xor	r5, r3
 6697 12da EC A5                   		mov.L	[r10], r5
 6698 12dc 68 85                   		shlr	#8, r5
 6699 12de 5B 55                   		movu.B	r5, r5
 6700 12e0 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6701 12e6 72 55 00 02             		add	#0x200, r5
 6702 12ea FE 65 45                		mov.L	[r5,r4], r5
 6703 12ed FC 37 53                		xor	r5, r3
 6704 12f0 ED A5 03                		mov.L	12[r10], r5
 6705 12f3 5B 55                   		movu.B	r5, r5
 6706 12f5 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6707 12fb 72 55 00 03             		add	#0x300, r5
 6708 12ff FE 65 45                		mov.L	[r5,r4], r5
 6709 1302 EF 34                   		mov.L	r3, r4
 6710 1304 FC 37 54                		xor	r5, r4
 6711 1307 ED A5 05                		mov.L	20[r10], r5
 6712 130a 72 55 C8 00             		add	#0xc8, r5
 6713 130e EC 55                   		mov.L	[r5], r5
 6714 1310 FC 37 45                		xor	r4, r5
 6715 1313 E7 A5 08                		mov.L	r5, 32[r10]
 6716 1316 ED A5 03                		mov.L	12[r10], r5
 6717 1319 69 85                   		shlr	#24, r5
 6718 131b 5B 55                   		movu.B	r5, r5
 6719 131d FB 42 00 00 00 00       		mov.L	#_Td, r4
 6720 1323 FE 65 43                		mov.L	[r5,r4], r3
 6721 1326 ED A5 02                		mov.L	8[r10], r5
 6722 1329 69 05                   		shlr	#16, r5
 6723 132b 5B 55                   		movu.B	r5, r5
 6724 132d FB 42 00 00 00 00       		mov.L	#_Td, r4
 6725 1333 72 55 00 01             		add	#0x100, r5
 6726 1337 FE 65 45                		mov.L	[r5,r4], r5
 6727 133a FC 37 53                		xor	r5, r3
 6728 133d ED A5 01                		mov.L	4[r10], r5
 6729 1340 68 85                   		shlr	#8, r5
 6730 1342 5B 55                   		movu.B	r5, r5
 6731 1344 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6732 134a 72 55 00 02             		add	#0x200, r5
 6733 134e FE 65 45                		mov.L	[r5,r4], r5
 6734 1351 FC 37 53                		xor	r5, r3
 6735 1354 EC A5                   		mov.L	[r10], r5
 6736 1356 5B 55                   		movu.B	r5, r5
 6737 1358 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6738 135e 72 55 00 03             		add	#0x300, r5
 6739 1362 FE 65 45                		mov.L	[r5,r4], r5
 6740 1365 EF 34                   		mov.L	r3, r4
 6741 1367 FC 37 54                		xor	r5, r4
 6742 136a ED A5 05                		mov.L	20[r10], r5
 6743 136d 72 55 CC 00             		add	#0xcc, r5
 6744 1371 EC 55                   		mov.L	[r5], r5
 6745 1373 FC 37 45                		xor	r4, r5
 6746 1376 E7 A5 09                		mov.L	r5, 36[r10]
 6747                             		.loc 2 2241 32
 6748 1379 ED A5 06                		mov.L	24[r10], r5
 6749 137c 69 85                   		shlr	#24, r5
 6750 137e 5B 55                   		movu.B	r5, r5
 6751 1380 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6752 1386 FE 65 43                		mov.L	[r5,r4], r3
 6753 1389 ED A5 09                		mov.L	36[r10], r5
 6754 138c 69 05                   		shlr	#16, r5
 6755 138e 5B 55                   		movu.B	r5, r5
 6756 1390 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6757 1396 72 55 00 01             		add	#0x100, r5
 6758 139a FE 65 45                		mov.L	[r5,r4], r5
 6759 139d FC 37 53                		xor	r5, r3
 6760 13a0 ED A5 08                		mov.L	32[r10], r5
 6761 13a3 68 85                   		shlr	#8, r5
 6762 13a5 5B 55                   		movu.B	r5, r5
 6763 13a7 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6764 13ad 72 55 00 02             		add	#0x200, r5
 6765 13b1 FE 65 45                		mov.L	[r5,r4], r5
 6766 13b4 FC 37 53                		xor	r5, r3
 6767 13b7 ED A5 07                		mov.L	28[r10], r5
 6768 13ba 5B 55                   		movu.B	r5, r5
 6769 13bc FB 42 00 00 00 00       		mov.L	#_Td, r4
 6770 13c2 72 55 00 03             		add	#0x300, r5
 6771 13c6 FE 65 45                		mov.L	[r5,r4], r5
 6772 13c9 EF 34                   		mov.L	r3, r4
 6773 13cb FC 37 54                		xor	r5, r4
 6774 13ce ED A5 05                		mov.L	20[r10], r5
 6775 13d1 72 55 D0 00             		add	#0xd0, r5
 6776 13d5 EC 55                   		mov.L	[r5], r5
 6777 13d7 FC 37 45                		xor	r4, r5
 6778 13da E3 A5                   		mov.L	r5, [r10]
 6779 13dc ED A5 07                		mov.L	28[r10], r5
 6780 13df 69 85                   		shlr	#24, r5
 6781 13e1 5B 55                   		movu.B	r5, r5
 6782 13e3 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6783 13e9 FE 65 43                		mov.L	[r5,r4], r3
 6784 13ec ED A5 06                		mov.L	24[r10], r5
 6785 13ef 69 05                   		shlr	#16, r5
 6786 13f1 5B 55                   		movu.B	r5, r5
 6787 13f3 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6788 13f9 72 55 00 01             		add	#0x100, r5
 6789 13fd FE 65 45                		mov.L	[r5,r4], r5
 6790 1400 FC 37 53                		xor	r5, r3
 6791 1403 ED A5 09                		mov.L	36[r10], r5
 6792 1406 68 85                   		shlr	#8, r5
 6793 1408 5B 55                   		movu.B	r5, r5
 6794 140a FB 42 00 00 00 00       		mov.L	#_Td, r4
 6795 1410 72 55 00 02             		add	#0x200, r5
 6796 1414 FE 65 45                		mov.L	[r5,r4], r5
 6797 1417 FC 37 53                		xor	r5, r3
 6798 141a ED A5 08                		mov.L	32[r10], r5
 6799 141d 5B 55                   		movu.B	r5, r5
 6800 141f FB 42 00 00 00 00       		mov.L	#_Td, r4
 6801 1425 72 55 00 03             		add	#0x300, r5
 6802 1429 FE 65 45                		mov.L	[r5,r4], r5
 6803 142c EF 34                   		mov.L	r3, r4
 6804 142e FC 37 54                		xor	r5, r4
 6805 1431 ED A5 05                		mov.L	20[r10], r5
 6806 1434 72 55 D4 00             		add	#0xd4, r5
 6807 1438 EC 55                   		mov.L	[r5], r5
 6808 143a FC 37 45                		xor	r4, r5
 6809 143d E7 A5 01                		mov.L	r5, 4[r10]
 6810 1440 ED A5 08                		mov.L	32[r10], r5
 6811 1443 69 85                   		shlr	#24, r5
 6812 1445 5B 55                   		movu.B	r5, r5
 6813 1447 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6814 144d FE 65 43                		mov.L	[r5,r4], r3
 6815 1450 ED A5 07                		mov.L	28[r10], r5
 6816 1453 69 05                   		shlr	#16, r5
 6817 1455 5B 55                   		movu.B	r5, r5
 6818 1457 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6819 145d 72 55 00 01             		add	#0x100, r5
 6820 1461 FE 65 45                		mov.L	[r5,r4], r5
 6821 1464 FC 37 53                		xor	r5, r3
 6822 1467 ED A5 06                		mov.L	24[r10], r5
 6823 146a 68 85                   		shlr	#8, r5
 6824 146c 5B 55                   		movu.B	r5, r5
 6825 146e FB 42 00 00 00 00       		mov.L	#_Td, r4
 6826 1474 72 55 00 02             		add	#0x200, r5
 6827 1478 FE 65 45                		mov.L	[r5,r4], r5
 6828 147b FC 37 53                		xor	r5, r3
 6829 147e ED A5 09                		mov.L	36[r10], r5
 6830 1481 5B 55                   		movu.B	r5, r5
 6831 1483 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6832 1489 72 55 00 03             		add	#0x300, r5
 6833 148d FE 65 45                		mov.L	[r5,r4], r5
 6834 1490 EF 34                   		mov.L	r3, r4
 6835 1492 FC 37 54                		xor	r5, r4
 6836 1495 ED A5 05                		mov.L	20[r10], r5
 6837 1498 72 55 D8 00             		add	#0xd8, r5
 6838 149c EC 55                   		mov.L	[r5], r5
 6839 149e FC 37 45                		xor	r4, r5
 6840 14a1 E7 A5 02                		mov.L	r5, 8[r10]
 6841 14a4 ED A5 09                		mov.L	36[r10], r5
 6842 14a7 69 85                   		shlr	#24, r5
 6843 14a9 5B 55                   		movu.B	r5, r5
 6844 14ab FB 42 00 00 00 00       		mov.L	#_Td, r4
 6845 14b1 FE 65 43                		mov.L	[r5,r4], r3
 6846 14b4 ED A5 08                		mov.L	32[r10], r5
 6847 14b7 69 05                   		shlr	#16, r5
 6848 14b9 5B 55                   		movu.B	r5, r5
 6849 14bb FB 42 00 00 00 00       		mov.L	#_Td, r4
 6850 14c1 72 55 00 01             		add	#0x100, r5
 6851 14c5 FE 65 45                		mov.L	[r5,r4], r5
 6852 14c8 FC 37 53                		xor	r5, r3
 6853 14cb ED A5 07                		mov.L	28[r10], r5
 6854 14ce 68 85                   		shlr	#8, r5
 6855 14d0 5B 55                   		movu.B	r5, r5
 6856 14d2 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6857 14d8 72 55 00 02             		add	#0x200, r5
 6858 14dc FE 65 45                		mov.L	[r5,r4], r5
 6859 14df FC 37 53                		xor	r5, r3
 6860 14e2 ED A5 06                		mov.L	24[r10], r5
 6861 14e5 5B 55                   		movu.B	r5, r5
 6862 14e7 FB 42 00 00 00 00       		mov.L	#_Td, r4
 6863 14ed 72 55 00 03             		add	#0x300, r5
 6864 14f1 FE 65 45                		mov.L	[r5,r4], r5
 6865 14f4 EF 34                   		mov.L	r3, r4
 6866 14f6 FC 37 54                		xor	r5, r4
 6867 14f9 ED A5 05                		mov.L	20[r10], r5
 6868 14fc 72 55 DC 00             		add	#0xdc, r5
 6869 1500 EC 55                   		mov.L	[r5], r5
 6870 1502 FC 37 45                		xor	r4, r5
 6871 1505 E7 A5 03                		mov.L	r5, 12[r10]
 6872                             	.L64:
2242:../src/wolfcrypt/src/aes.c ****         }
2243:../src/wolfcrypt/src/aes.c ****     }
2244:../src/wolfcrypt/src/aes.c ****     rk += r * 8;
 6873                             		.loc 2 2244 8
 6874 1508 ED A5 04                		mov.L	16[r10], r5
 6875 150b 6C 55                   		shll	#5, r5
 6876 150d ED A4 05                		mov.L	20[r10], r4
 6877 1510 4B 45                   		add	r4, r5
 6878 1512 E7 A5 05                		mov.L	r5, 20[r10]
2245:../src/wolfcrypt/src/aes.c **** #else
2246:../src/wolfcrypt/src/aes.c **** 
2247:../src/wolfcrypt/src/aes.c ****     /*
2248:../src/wolfcrypt/src/aes.c ****      * Nr - 1 full rounds:
2249:../src/wolfcrypt/src/aes.c ****      */
2250:../src/wolfcrypt/src/aes.c **** 
2251:../src/wolfcrypt/src/aes.c ****     for (;;) {
2252:../src/wolfcrypt/src/aes.c ****         t0 =
2253:../src/wolfcrypt/src/aes.c ****             Td[0][GETBYTE(s0, 3)] ^
2254:../src/wolfcrypt/src/aes.c ****             Td[1][GETBYTE(s3, 2)] ^
2255:../src/wolfcrypt/src/aes.c ****             Td[2][GETBYTE(s2, 1)] ^
2256:../src/wolfcrypt/src/aes.c ****             Td[3][GETBYTE(s1, 0)] ^
2257:../src/wolfcrypt/src/aes.c ****             rk[4];
2258:../src/wolfcrypt/src/aes.c ****         t1 =
2259:../src/wolfcrypt/src/aes.c ****             Td[0][GETBYTE(s1, 3)] ^
2260:../src/wolfcrypt/src/aes.c ****             Td[1][GETBYTE(s0, 2)] ^
2261:../src/wolfcrypt/src/aes.c ****             Td[2][GETBYTE(s3, 1)] ^
2262:../src/wolfcrypt/src/aes.c ****             Td[3][GETBYTE(s2, 0)] ^
2263:../src/wolfcrypt/src/aes.c ****             rk[5];
2264:../src/wolfcrypt/src/aes.c ****         t2 =
2265:../src/wolfcrypt/src/aes.c ****             Td[0][GETBYTE(s2, 3)] ^
2266:../src/wolfcrypt/src/aes.c ****             Td[1][GETBYTE(s1, 2)] ^
2267:../src/wolfcrypt/src/aes.c ****             Td[2][GETBYTE(s0, 1)] ^
2268:../src/wolfcrypt/src/aes.c ****             Td[3][GETBYTE(s3, 0)] ^
2269:../src/wolfcrypt/src/aes.c ****             rk[6];
2270:../src/wolfcrypt/src/aes.c ****         t3 =
2271:../src/wolfcrypt/src/aes.c ****             Td[0][GETBYTE(s3, 3)] ^
2272:../src/wolfcrypt/src/aes.c ****             Td[1][GETBYTE(s2, 2)] ^
2273:../src/wolfcrypt/src/aes.c ****             Td[2][GETBYTE(s1, 1)] ^
2274:../src/wolfcrypt/src/aes.c ****             Td[3][GETBYTE(s0, 0)] ^
2275:../src/wolfcrypt/src/aes.c ****             rk[7];
2276:../src/wolfcrypt/src/aes.c **** 
2277:../src/wolfcrypt/src/aes.c ****         rk += 8;
2278:../src/wolfcrypt/src/aes.c ****         if (--r == 0) {
2279:../src/wolfcrypt/src/aes.c ****             break;
2280:../src/wolfcrypt/src/aes.c ****         }
2281:../src/wolfcrypt/src/aes.c **** 
2282:../src/wolfcrypt/src/aes.c ****         s0 =
2283:../src/wolfcrypt/src/aes.c ****             Td[0][GETBYTE(t0, 3)] ^
2284:../src/wolfcrypt/src/aes.c ****             Td[1][GETBYTE(t3, 2)] ^
2285:../src/wolfcrypt/src/aes.c ****             Td[2][GETBYTE(t2, 1)] ^
2286:../src/wolfcrypt/src/aes.c ****             Td[3][GETBYTE(t1, 0)] ^
2287:../src/wolfcrypt/src/aes.c ****             rk[0];
2288:../src/wolfcrypt/src/aes.c ****         s1 =
2289:../src/wolfcrypt/src/aes.c ****             Td[0][GETBYTE(t1, 3)] ^
2290:../src/wolfcrypt/src/aes.c ****             Td[1][GETBYTE(t0, 2)] ^
2291:../src/wolfcrypt/src/aes.c ****             Td[2][GETBYTE(t3, 1)] ^
2292:../src/wolfcrypt/src/aes.c ****             Td[3][GETBYTE(t2, 0)] ^
2293:../src/wolfcrypt/src/aes.c ****             rk[1];
2294:../src/wolfcrypt/src/aes.c ****         s2 =
2295:../src/wolfcrypt/src/aes.c ****             Td[0][GETBYTE(t2, 3)] ^
2296:../src/wolfcrypt/src/aes.c ****             Td[1][GETBYTE(t1, 2)] ^
2297:../src/wolfcrypt/src/aes.c ****             Td[2][GETBYTE(t0, 1)] ^
2298:../src/wolfcrypt/src/aes.c ****             Td[3][GETBYTE(t3, 0)] ^
2299:../src/wolfcrypt/src/aes.c ****             rk[2];
2300:../src/wolfcrypt/src/aes.c ****         s3 =
2301:../src/wolfcrypt/src/aes.c ****             Td[0][GETBYTE(t3, 3)] ^
2302:../src/wolfcrypt/src/aes.c ****             Td[1][GETBYTE(t2, 2)] ^
2303:../src/wolfcrypt/src/aes.c ****             Td[2][GETBYTE(t1, 1)] ^
2304:../src/wolfcrypt/src/aes.c ****             Td[3][GETBYTE(t0, 0)] ^
2305:../src/wolfcrypt/src/aes.c ****             rk[3];
2306:../src/wolfcrypt/src/aes.c ****     }
2307:../src/wolfcrypt/src/aes.c **** #endif
2308:../src/wolfcrypt/src/aes.c ****     /*
2309:../src/wolfcrypt/src/aes.c ****      * apply last round and
2310:../src/wolfcrypt/src/aes.c ****      * map cipher state to byte array block:
2311:../src/wolfcrypt/src/aes.c ****      */
2312:../src/wolfcrypt/src/aes.c **** 
2313:../src/wolfcrypt/src/aes.c **** #ifndef WC_NO_CACHE_RESISTANT
2314:../src/wolfcrypt/src/aes.c ****     t0 |= PreFetchTd4();
 6879                             		.loc 2 2314 11
 6880 1515 05 00 00 00             		bsr	_PreFetchTd4
 6881 1519 EF 15                   		mov.L	r1, r5
 6882                             		.loc 2 2314 8
 6883 151b EC A4                   		mov.L	[r10], r4
 6884 151d 57 45                   		or	r4, r5
 6885 151f E3 A5                   		mov.L	r5, [r10]
2315:../src/wolfcrypt/src/aes.c **** #endif
2316:../src/wolfcrypt/src/aes.c **** 
2317:../src/wolfcrypt/src/aes.c ****     s0 =
2318:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
 6886                             		.loc 2 2318 22
 6887 1521 EC A5                   		mov.L	[r10], r5
 6888 1523 69 85                   		shlr	#24, r5
 6889 1525 5B 55                   		movu.B	r5, r5
 6890                             		.loc 2 2318 21
 6891 1527 FB 42 00 00 00 00       		mov.L	#_Td4, r4
 6892 152d FE 45 45                		mov.B	[r5,r4], r5
 6893                             		.loc 2 2318 10
 6894 1530 5B 55                   		movu.B	r5, r5
 6895                             		.loc 2 2318 38
 6896 1532 FD D8 53                		shll	#24, r5, r3
2319:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
 6897                             		.loc 2 2319 22
 6898 1535 ED A5 03                		mov.L	12[r10], r5
 6899 1538 69 05                   		shlr	#16, r5
 6900 153a 5B 55                   		movu.B	r5, r5
 6901                             		.loc 2 2319 21
 6902 153c FB 42 00 00 00 00       		mov.L	#_Td4, r4
 6903 1542 FE 45 45                		mov.B	[r5,r4], r5
 6904                             		.loc 2 2319 10
 6905 1545 5B 55                   		movu.B	r5, r5
 6906                             		.loc 2 2319 38
 6907 1547 6D 05                   		shll	#16, r5
2318:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
 6908                             		.loc 2 2318 45
 6909 1549 FC 37 53                		xor	r5, r3
2320:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
 6910                             		.loc 2 2320 22
 6911 154c ED A5 02                		mov.L	8[r10], r5
 6912 154f 68 85                   		shlr	#8, r5
 6913 1551 5B 55                   		movu.B	r5, r5
 6914                             		.loc 2 2320 21
 6915 1553 FB 42 00 00 00 00       		mov.L	#_Td4, r4
 6916 1559 FE 45 45                		mov.B	[r5,r4], r5
 6917                             		.loc 2 2320 10
 6918 155c 5B 55                   		movu.B	r5, r5
 6919                             		.loc 2 2320 38
 6920 155e 6C 85                   		shll	#8, r5
2319:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t3, 2)] << 16) ^
 6921                             		.loc 2 2319 45
 6922 1560 FC 37 53                		xor	r5, r3
2321:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t1, 0)]) ^
 6923                             		.loc 2 2321 22
 6924 1563 ED A5 01                		mov.L	4[r10], r5
 6925 1566 5B 55                   		movu.B	r5, r5
 6926                             		.loc 2 2321 21
 6927 1568 FB 42 00 00 00 00       		mov.L	#_Td4, r4
 6928 156e FE 45 45                		mov.B	[r5,r4], r5
 6929                             		.loc 2 2321 10
 6930 1571 5B 55                   		movu.B	r5, r5
2320:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t2, 1)] <<  8) ^
 6931                             		.loc 2 2320 45
 6932 1573 EF 34                   		mov.L	r3, r4
 6933 1575 FC 37 54                		xor	r5, r4
2322:../src/wolfcrypt/src/aes.c ****         rk[0];
 6934                             		.loc 2 2322 11
 6935 1578 ED A5 05                		mov.L	20[r10], r5
 6936 157b EC 55                   		mov.L	[r5], r5
2321:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t1, 0)]) ^
 6937                             		.loc 2 2321 39
 6938 157d FC 37 45                		xor	r4, r5
2317:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t0, 3)] << 24) ^
 6939                             		.loc 2 2317 8
 6940 1580 E7 A5 06                		mov.L	r5, 24[r10]
2323:../src/wolfcrypt/src/aes.c ****     s1 =
2324:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
 6941                             		.loc 2 2324 22
 6942 1583 ED A5 01                		mov.L	4[r10], r5
 6943 1586 69 85                   		shlr	#24, r5
 6944 1588 5B 55                   		movu.B	r5, r5
 6945                             		.loc 2 2324 21
 6946 158a FB 42 00 00 00 00       		mov.L	#_Td4, r4
 6947 1590 FE 45 45                		mov.B	[r5,r4], r5
 6948                             		.loc 2 2324 10
 6949 1593 5B 55                   		movu.B	r5, r5
 6950                             		.loc 2 2324 38
 6951 1595 FD D8 53                		shll	#24, r5, r3
2325:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
 6952                             		.loc 2 2325 22
 6953 1598 EC A5                   		mov.L	[r10], r5
 6954 159a 69 05                   		shlr	#16, r5
 6955 159c 5B 55                   		movu.B	r5, r5
 6956                             		.loc 2 2325 21
 6957 159e FB 42 00 00 00 00       		mov.L	#_Td4, r4
 6958 15a4 FE 45 45                		mov.B	[r5,r4], r5
 6959                             		.loc 2 2325 10
 6960 15a7 5B 55                   		movu.B	r5, r5
 6961                             		.loc 2 2325 38
 6962 15a9 6D 05                   		shll	#16, r5
2324:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
 6963                             		.loc 2 2324 45
 6964 15ab FC 37 53                		xor	r5, r3
2326:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
 6965                             		.loc 2 2326 22
 6966 15ae ED A5 03                		mov.L	12[r10], r5
 6967 15b1 68 85                   		shlr	#8, r5
 6968 15b3 5B 55                   		movu.B	r5, r5
 6969                             		.loc 2 2326 21
 6970 15b5 FB 42 00 00 00 00       		mov.L	#_Td4, r4
 6971 15bb FE 45 45                		mov.B	[r5,r4], r5
 6972                             		.loc 2 2326 10
 6973 15be 5B 55                   		movu.B	r5, r5
 6974                             		.loc 2 2326 38
 6975 15c0 6C 85                   		shll	#8, r5
2325:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t0, 2)] << 16) ^
 6976                             		.loc 2 2325 45
 6977 15c2 FC 37 53                		xor	r5, r3
2327:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t2, 0)]) ^
 6978                             		.loc 2 2327 22
 6979 15c5 ED A5 02                		mov.L	8[r10], r5
 6980 15c8 5B 55                   		movu.B	r5, r5
 6981                             		.loc 2 2327 21
 6982 15ca FB 42 00 00 00 00       		mov.L	#_Td4, r4
 6983 15d0 FE 45 45                		mov.B	[r5,r4], r5
 6984                             		.loc 2 2327 10
 6985 15d3 5B 55                   		movu.B	r5, r5
2326:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t3, 1)] <<  8) ^
 6986                             		.loc 2 2326 45
 6987 15d5 EF 34                   		mov.L	r3, r4
 6988 15d7 FC 37 54                		xor	r5, r4
2328:../src/wolfcrypt/src/aes.c ****         rk[1];
 6989                             		.loc 2 2328 11
 6990 15da ED A5 05                		mov.L	20[r10], r5
 6991 15dd 62 45                   		add	#4, r5
 6992 15df EC 55                   		mov.L	[r5], r5
2327:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t2, 0)]) ^
 6993                             		.loc 2 2327 39
 6994 15e1 FC 37 45                		xor	r4, r5
2323:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t1, 3)] << 24) ^
 6995                             		.loc 2 2323 8
 6996 15e4 E7 A5 07                		mov.L	r5, 28[r10]
2329:../src/wolfcrypt/src/aes.c ****     s2 =
2330:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
 6997                             		.loc 2 2330 22
 6998 15e7 ED A5 02                		mov.L	8[r10], r5
 6999 15ea 69 85                   		shlr	#24, r5
 7000 15ec 5B 55                   		movu.B	r5, r5
 7001                             		.loc 2 2330 21
 7002 15ee FB 42 00 00 00 00       		mov.L	#_Td4, r4
 7003 15f4 FE 45 45                		mov.B	[r5,r4], r5
 7004                             		.loc 2 2330 10
 7005 15f7 5B 55                   		movu.B	r5, r5
 7006                             		.loc 2 2330 38
 7007 15f9 FD D8 53                		shll	#24, r5, r3
2331:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
 7008                             		.loc 2 2331 22
 7009 15fc ED A5 01                		mov.L	4[r10], r5
 7010 15ff 69 05                   		shlr	#16, r5
 7011 1601 5B 55                   		movu.B	r5, r5
 7012                             		.loc 2 2331 21
 7013 1603 FB 42 00 00 00 00       		mov.L	#_Td4, r4
 7014 1609 FE 45 45                		mov.B	[r5,r4], r5
 7015                             		.loc 2 2331 10
 7016 160c 5B 55                   		movu.B	r5, r5
 7017                             		.loc 2 2331 38
 7018 160e 6D 05                   		shll	#16, r5
2330:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
 7019                             		.loc 2 2330 45
 7020 1610 FC 37 53                		xor	r5, r3
2332:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
 7021                             		.loc 2 2332 22
 7022 1613 EC A5                   		mov.L	[r10], r5
 7023 1615 68 85                   		shlr	#8, r5
 7024 1617 5B 55                   		movu.B	r5, r5
 7025                             		.loc 2 2332 21
 7026 1619 FB 42 00 00 00 00       		mov.L	#_Td4, r4
 7027 161f FE 45 45                		mov.B	[r5,r4], r5
 7028                             		.loc 2 2332 10
 7029 1622 5B 55                   		movu.B	r5, r5
 7030                             		.loc 2 2332 38
 7031 1624 6C 85                   		shll	#8, r5
2331:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t1, 2)] << 16) ^
 7032                             		.loc 2 2331 45
 7033 1626 FC 37 53                		xor	r5, r3
2333:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t3, 0)]) ^
 7034                             		.loc 2 2333 22
 7035 1629 ED A5 03                		mov.L	12[r10], r5
 7036 162c 5B 55                   		movu.B	r5, r5
 7037                             		.loc 2 2333 21
 7038 162e FB 42 00 00 00 00       		mov.L	#_Td4, r4
 7039 1634 FE 45 45                		mov.B	[r5,r4], r5
 7040                             		.loc 2 2333 10
 7041 1637 5B 55                   		movu.B	r5, r5
2332:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t0, 1)] <<  8) ^
 7042                             		.loc 2 2332 45
 7043 1639 EF 34                   		mov.L	r3, r4
 7044 163b FC 37 54                		xor	r5, r4
2334:../src/wolfcrypt/src/aes.c ****         rk[2];
 7045                             		.loc 2 2334 11
 7046 163e ED A5 05                		mov.L	20[r10], r5
 7047 1641 62 85                   		add	#8, r5
 7048 1643 EC 55                   		mov.L	[r5], r5
2333:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t3, 0)]) ^
 7049                             		.loc 2 2333 39
 7050 1645 FC 37 45                		xor	r4, r5
2329:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t2, 3)] << 24) ^
 7051                             		.loc 2 2329 8
 7052 1648 E7 A5 08                		mov.L	r5, 32[r10]
2335:../src/wolfcrypt/src/aes.c ****     s3 =
2336:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
 7053                             		.loc 2 2336 22
 7054 164b ED A5 03                		mov.L	12[r10], r5
 7055 164e 69 85                   		shlr	#24, r5
 7056 1650 5B 55                   		movu.B	r5, r5
 7057                             		.loc 2 2336 21
 7058 1652 FB 42 00 00 00 00       		mov.L	#_Td4, r4
 7059 1658 FE 45 45                		mov.B	[r5,r4], r5
 7060                             		.loc 2 2336 10
 7061 165b 5B 55                   		movu.B	r5, r5
 7062                             		.loc 2 2336 38
 7063 165d FD D8 53                		shll	#24, r5, r3
2337:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
 7064                             		.loc 2 2337 22
 7065 1660 ED A5 02                		mov.L	8[r10], r5
 7066 1663 69 05                   		shlr	#16, r5
 7067 1665 5B 55                   		movu.B	r5, r5
 7068                             		.loc 2 2337 21
 7069 1667 FB 42 00 00 00 00       		mov.L	#_Td4, r4
 7070 166d FE 45 45                		mov.B	[r5,r4], r5
 7071                             		.loc 2 2337 10
 7072 1670 5B 55                   		movu.B	r5, r5
 7073                             		.loc 2 2337 38
 7074 1672 6D 05                   		shll	#16, r5
2336:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
 7075                             		.loc 2 2336 45
 7076 1674 FC 37 53                		xor	r5, r3
2338:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
 7077                             		.loc 2 2338 22
 7078 1677 ED A5 01                		mov.L	4[r10], r5
 7079 167a 68 85                   		shlr	#8, r5
 7080 167c 5B 55                   		movu.B	r5, r5
 7081                             		.loc 2 2338 21
 7082 167e FB 42 00 00 00 00       		mov.L	#_Td4, r4
 7083 1684 FE 45 45                		mov.B	[r5,r4], r5
 7084                             		.loc 2 2338 10
 7085 1687 5B 55                   		movu.B	r5, r5
 7086                             		.loc 2 2338 38
 7087 1689 6C 85                   		shll	#8, r5
2337:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t2, 2)] << 16) ^
 7088                             		.loc 2 2337 45
 7089 168b FC 37 53                		xor	r5, r3
2339:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t0, 0)]) ^
 7090                             		.loc 2 2339 22
 7091 168e EC A5                   		mov.L	[r10], r5
 7092 1690 5B 55                   		movu.B	r5, r5
 7093                             		.loc 2 2339 21
 7094 1692 FB 42 00 00 00 00       		mov.L	#_Td4, r4
 7095 1698 FE 45 45                		mov.B	[r5,r4], r5
 7096                             		.loc 2 2339 10
 7097 169b 5B 55                   		movu.B	r5, r5
2338:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t1, 1)] <<  8) ^
 7098                             		.loc 2 2338 45
 7099 169d EF 34                   		mov.L	r3, r4
 7100 169f FC 37 54                		xor	r5, r4
2340:../src/wolfcrypt/src/aes.c ****         rk[3];
 7101                             		.loc 2 2340 11
 7102 16a2 ED A5 05                		mov.L	20[r10], r5
 7103 16a5 62 C5                   		add	#12, r5
 7104 16a7 EC 55                   		mov.L	[r5], r5
2339:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t0, 0)]) ^
 7105                             		.loc 2 2339 39
 7106 16a9 FC 37 45                		xor	r4, r5
2335:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(t3, 3)] << 24) ^
 7107                             		.loc 2 2335 8
 7108 16ac E7 A5 09                		mov.L	r5, 36[r10]
2341:../src/wolfcrypt/src/aes.c **** #else
2342:../src/wolfcrypt/src/aes.c **** #ifndef WC_NO_CACHE_RESISTANT
2343:../src/wolfcrypt/src/aes.c ****     s0 |= PreFetchTd4();
2344:../src/wolfcrypt/src/aes.c **** #endif
2345:../src/wolfcrypt/src/aes.c **** 
2346:../src/wolfcrypt/src/aes.c ****     r *= 2;
2347:../src/wolfcrypt/src/aes.c ****     for (rk += 4; r > 1; r--, rk += 4) {
2348:../src/wolfcrypt/src/aes.c ****         t0 =
2349:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s0, 3)] << 24) ^
2350:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s3, 2)] << 16) ^
2351:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s2, 1)] <<  8) ^
2352:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s1, 0)]) ^
2353:../src/wolfcrypt/src/aes.c ****             rk[0];
2354:../src/wolfcrypt/src/aes.c ****         t1 =
2355:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s1, 3)] << 24) ^
2356:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s0, 2)] << 16) ^
2357:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s3, 1)] <<  8) ^
2358:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s2, 0)]) ^
2359:../src/wolfcrypt/src/aes.c ****             rk[1];
2360:../src/wolfcrypt/src/aes.c ****         t2 =
2361:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s2, 3)] << 24) ^
2362:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s1, 2)] << 16) ^
2363:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s0, 1)] <<  8) ^
2364:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s3, 0)]) ^
2365:../src/wolfcrypt/src/aes.c ****             rk[2];
2366:../src/wolfcrypt/src/aes.c ****         t3 =
2367:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s3, 3)] << 24) ^
2368:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s2, 2)] << 16) ^
2369:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s1, 1)] <<  8) ^
2370:../src/wolfcrypt/src/aes.c ****             ((word32)Td4[GETBYTE(s0, 0)]) ^
2371:../src/wolfcrypt/src/aes.c ****             rk[3];
2372:../src/wolfcrypt/src/aes.c **** 
2373:../src/wolfcrypt/src/aes.c ****         s0 =
2374:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t0, 0, 2, 1, 3) << 24) ^
2375:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t0, 3, 1, 0, 2) << 16) ^
2376:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t0, 2, 0, 3, 1) <<  8) ^
2377:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t0, 1, 3, 2, 0)      );
2378:../src/wolfcrypt/src/aes.c ****         s1 =
2379:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t1, 0, 2, 1, 3) << 24) ^
2380:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t1, 3, 1, 0, 2) << 16) ^
2381:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t1, 2, 0, 3, 1) <<  8) ^
2382:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t1, 1, 3, 2, 0)      );
2383:../src/wolfcrypt/src/aes.c ****         s2 =
2384:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t2, 0, 2, 1, 3) << 24) ^
2385:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t2, 3, 1, 0, 2) << 16) ^
2386:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t2, 2, 0, 3, 1) <<  8) ^
2387:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t2, 1, 3, 2, 0)      );
2388:../src/wolfcrypt/src/aes.c ****         s3 =
2389:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t3, 0, 2, 1, 3) << 24) ^
2390:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t3, 3, 1, 0, 2) << 16) ^
2391:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t3, 2, 0, 3, 1) <<  8) ^
2392:../src/wolfcrypt/src/aes.c ****             (inv_col_mul(t3, 1, 3, 2, 0)      );
2393:../src/wolfcrypt/src/aes.c ****     }
2394:../src/wolfcrypt/src/aes.c **** 
2395:../src/wolfcrypt/src/aes.c ****     t0 =
2396:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s0, 3)] << 24) ^
2397:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s3, 2)] << 16) ^
2398:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s2, 1)] <<  8) ^
2399:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s1, 0)]);
2400:../src/wolfcrypt/src/aes.c ****     t1 =
2401:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s1, 3)] << 24) ^
2402:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s0, 2)] << 16) ^
2403:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s3, 1)] <<  8) ^
2404:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s2, 0)]);
2405:../src/wolfcrypt/src/aes.c ****     t2 =
2406:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s2, 3)] << 24) ^
2407:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s1, 2)] << 16) ^
2408:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s0, 1)] <<  8) ^
2409:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s3, 0)]);
2410:../src/wolfcrypt/src/aes.c ****     t3 =
2411:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s3, 3)] << 24) ^
2412:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s2, 2)] << 16) ^
2413:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s1, 1)] <<  8) ^
2414:../src/wolfcrypt/src/aes.c ****         ((word32)Td4[GETBYTE(s0, 0)]);
2415:../src/wolfcrypt/src/aes.c ****     s0 = t0 ^ rk[0];
2416:../src/wolfcrypt/src/aes.c ****     s1 = t1 ^ rk[1];
2417:../src/wolfcrypt/src/aes.c ****     s2 = t2 ^ rk[2];
2418:../src/wolfcrypt/src/aes.c ****     s3 = t3 ^ rk[3];
2419:../src/wolfcrypt/src/aes.c **** #endif
2420:../src/wolfcrypt/src/aes.c **** 
2421:../src/wolfcrypt/src/aes.c ****     /* write out */
2422:../src/wolfcrypt/src/aes.c **** #ifdef LITTLE_ENDIAN_ORDER
2423:../src/wolfcrypt/src/aes.c ****     s0 = ByteReverseWord32(s0);
 7109                             		.loc 2 2423 10
 7110 16af ED A5 06                		mov.L	24[r10], r5
 7111 16b2 EF 51                   		mov.L	r5, r1
 7112 16b4 05 00 00 00             		bsr	_ByteReverseWord32
 7113 16b8 EF 15                   		mov.L	r1, r5
 7114                             		.loc 2 2423 8
 7115 16ba E7 A5 06                		mov.L	r5, 24[r10]
2424:../src/wolfcrypt/src/aes.c ****     s1 = ByteReverseWord32(s1);
 7116                             		.loc 2 2424 10
 7117 16bd ED A5 07                		mov.L	28[r10], r5
 7118 16c0 EF 51                   		mov.L	r5, r1
 7119 16c2 05 00 00 00             		bsr	_ByteReverseWord32
 7120 16c6 EF 15                   		mov.L	r1, r5
 7121                             		.loc 2 2424 8
 7122 16c8 E7 A5 07                		mov.L	r5, 28[r10]
2425:../src/wolfcrypt/src/aes.c ****     s2 = ByteReverseWord32(s2);
 7123                             		.loc 2 2425 10
 7124 16cb ED A5 08                		mov.L	32[r10], r5
 7125 16ce EF 51                   		mov.L	r5, r1
 7126 16d0 05 00 00 00             		bsr	_ByteReverseWord32
 7127 16d4 EF 15                   		mov.L	r1, r5
 7128                             		.loc 2 2425 8
 7129 16d6 E7 A5 08                		mov.L	r5, 32[r10]
2426:../src/wolfcrypt/src/aes.c ****     s3 = ByteReverseWord32(s3);
 7130                             		.loc 2 2426 10
 7131 16d9 ED A5 09                		mov.L	36[r10], r5
 7132 16dc EF 51                   		mov.L	r5, r1
 7133 16de 05 00 00 00             		bsr	_ByteReverseWord32
 7134 16e2 EF 15                   		mov.L	r1, r5
 7135                             		.loc 2 2426 8
 7136 16e4 E7 A5 09                		mov.L	r5, 36[r10]
2427:../src/wolfcrypt/src/aes.c **** #endif
2428:../src/wolfcrypt/src/aes.c **** 
2429:../src/wolfcrypt/src/aes.c ****     XMEMCPY(outBlock,                  &s0, sizeof(s0));
 7137                             		.loc 2 2429 5
 7138 16e7 ED A4 06                		mov.L	24[r10], r4
 7139 16ea ED A5 0C                		mov.L	48[r10], r5
 7140 16ed E3 54                   		mov.L	r4, [r5]
2430:../src/wolfcrypt/src/aes.c ****     XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
 7141                             		.loc 2 2430 5
 7142 16ef ED A5 0C                		mov.L	48[r10], r5
 7143 16f2 62 45                   		add	#4, r5
 7144 16f4 ED A4 07                		mov.L	28[r10], r4
 7145 16f7 E3 54                   		mov.L	r4, [r5]
2431:../src/wolfcrypt/src/aes.c ****     XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
 7146                             		.loc 2 2431 5
 7147 16f9 ED A5 0C                		mov.L	48[r10], r5
 7148 16fc 62 85                   		add	#8, r5
 7149 16fe ED A4 08                		mov.L	32[r10], r4
 7150 1701 E3 54                   		mov.L	r4, [r5]
2432:../src/wolfcrypt/src/aes.c ****     XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
 7151                             		.loc 2 2432 5
 7152 1703 ED A5 0C                		mov.L	48[r10], r5
 7153 1706 62 C5                   		add	#12, r5
 7154 1708 ED A4 09                		mov.L	36[r10], r4
 7155 170b E3 54                   		mov.L	r4, [r5]
2433:../src/wolfcrypt/src/aes.c **** 
2434:../src/wolfcrypt/src/aes.c ****     return 0;
 7156                             		.loc 2 2434 12
 7157 170d 66 05                   		mov.L	#0, r5
 7158                             	.L65:
2435:../src/wolfcrypt/src/aes.c **** }
 7159                             		.loc 2 2435 1 discriminator 1
 7160 170f EF 51                   		mov.L	r5, r1
 7161 1711 3F AA 0E                		rtsd	#56, r10-r10
 7162                             	.LFE47:
 7164                             		.section	.text.wc_AesSetKeyLocal,"ax",@progbits
 7166                             	_wc_AesSetKeyLocal:
 7167                             	.LFB48:
2436:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_CBC || WOLFSSL_AES_DIRECT */
2437:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_DECRYPT */
2438:../src/wolfcrypt/src/aes.c **** 
2439:../src/wolfcrypt/src/aes.c **** #endif /* NEED_AES_TABLES */
2440:../src/wolfcrypt/src/aes.c **** 
2441:../src/wolfcrypt/src/aes.c **** 
2442:../src/wolfcrypt/src/aes.c **** 
2443:../src/wolfcrypt/src/aes.c **** /* wc_AesSetKey */
2444:../src/wolfcrypt/src/aes.c **** #if defined(STM32_CRYPTO)
2445:../src/wolfcrypt/src/aes.c **** 
2446:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKey(Aes* aes, const byte* userKey, word32 keylen,
2447:../src/wolfcrypt/src/aes.c ****             const byte* iv, int dir)
2448:../src/wolfcrypt/src/aes.c ****     {
2449:../src/wolfcrypt/src/aes.c ****         word32 *rk;
2450:../src/wolfcrypt/src/aes.c **** 
2451:../src/wolfcrypt/src/aes.c ****         (void)dir;
2452:../src/wolfcrypt/src/aes.c **** 
2453:../src/wolfcrypt/src/aes.c ****         if (aes == NULL || (keylen != 16 &&
2454:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_AES_192
2455:../src/wolfcrypt/src/aes.c ****             keylen != 24 &&
2456:../src/wolfcrypt/src/aes.c ****         #endif
2457:../src/wolfcrypt/src/aes.c ****             keylen != 32)) {
2458:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2459:../src/wolfcrypt/src/aes.c ****         }
2460:../src/wolfcrypt/src/aes.c **** 
2461:../src/wolfcrypt/src/aes.c ****         rk = aes->key;
2462:../src/wolfcrypt/src/aes.c ****         aes->keylen = keylen;
2463:../src/wolfcrypt/src/aes.c ****         aes->rounds = keylen/4 + 6;
2464:../src/wolfcrypt/src/aes.c ****         XMEMCPY(rk, userKey, keylen);
2465:../src/wolfcrypt/src/aes.c ****     #if !defined(WOLFSSL_STM32_CUBEMX) || defined(STM32_HAL_V2)
2466:../src/wolfcrypt/src/aes.c ****         ByteReverseWords(rk, rk, keylen);
2467:../src/wolfcrypt/src/aes.c ****     #endif
2468:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_CFB) || defined(WOLFSSL_AES_COUNTER) || \
2469:../src/wolfcrypt/src/aes.c ****         defined(WOLFSSL_AES_OFB)
2470:../src/wolfcrypt/src/aes.c ****         aes->left = 0;
2471:../src/wolfcrypt/src/aes.c ****     #endif
2472:../src/wolfcrypt/src/aes.c ****         return wc_AesSetIV(aes, iv);
2473:../src/wolfcrypt/src/aes.c ****     }
2474:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_DIRECT)
2475:../src/wolfcrypt/src/aes.c ****         int wc_AesSetKeyDirect(Aes* aes, const byte* userKey, word32 keylen,
2476:../src/wolfcrypt/src/aes.c ****                             const byte* iv, int dir)
2477:../src/wolfcrypt/src/aes.c ****         {
2478:../src/wolfcrypt/src/aes.c ****             return wc_AesSetKey(aes, userKey, keylen, iv, dir);
2479:../src/wolfcrypt/src/aes.c ****         }
2480:../src/wolfcrypt/src/aes.c ****     #endif
2481:../src/wolfcrypt/src/aes.c **** 
2482:../src/wolfcrypt/src/aes.c **** #elif defined(HAVE_COLDFIRE_SEC)
2483:../src/wolfcrypt/src/aes.c ****     #if defined (HAVE_THREADX)
2484:../src/wolfcrypt/src/aes.c ****         #include "memory_pools.h"
2485:../src/wolfcrypt/src/aes.c ****         extern TX_BYTE_POOL mp_ncached;  /* Non Cached memory pool */
2486:../src/wolfcrypt/src/aes.c ****     #endif
2487:../src/wolfcrypt/src/aes.c **** 
2488:../src/wolfcrypt/src/aes.c ****     #define AES_BUFFER_SIZE (AES_BLOCK_SIZE * 64)
2489:../src/wolfcrypt/src/aes.c ****     static unsigned char *AESBuffIn = NULL;
2490:../src/wolfcrypt/src/aes.c ****     static unsigned char *AESBuffOut = NULL;
2491:../src/wolfcrypt/src/aes.c ****     static byte *secReg;
2492:../src/wolfcrypt/src/aes.c ****     static byte *secKey;
2493:../src/wolfcrypt/src/aes.c ****     static volatile SECdescriptorType *secDesc;
2494:../src/wolfcrypt/src/aes.c **** 
2495:../src/wolfcrypt/src/aes.c ****     static wolfSSL_Mutex Mutex_AesSEC;
2496:../src/wolfcrypt/src/aes.c **** 
2497:../src/wolfcrypt/src/aes.c ****     #define SEC_DESC_AES_CBC_ENCRYPT 0x60300010
2498:../src/wolfcrypt/src/aes.c ****     #define SEC_DESC_AES_CBC_DECRYPT 0x60200010
2499:../src/wolfcrypt/src/aes.c **** 
2500:../src/wolfcrypt/src/aes.c ****     extern volatile unsigned char __MBAR[];
2501:../src/wolfcrypt/src/aes.c **** 
2502:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKey(Aes* aes, const byte* userKey, word32 keylen,
2503:../src/wolfcrypt/src/aes.c ****         const byte* iv, int dir)
2504:../src/wolfcrypt/src/aes.c ****     {
2505:../src/wolfcrypt/src/aes.c ****         if (AESBuffIn == NULL) {
2506:../src/wolfcrypt/src/aes.c ****         #if defined (HAVE_THREADX)
2507:../src/wolfcrypt/src/aes.c ****             int s1, s2, s3, s4, s5;
2508:../src/wolfcrypt/src/aes.c ****             s5 = tx_byte_allocate(&mp_ncached,(void *)&secDesc,
2509:../src/wolfcrypt/src/aes.c ****                                   sizeof(SECdescriptorType), TX_NO_WAIT);
2510:../src/wolfcrypt/src/aes.c ****             s1 = tx_byte_allocate(&mp_ncached, (void *)&AESBuffIn,
2511:../src/wolfcrypt/src/aes.c ****                                   AES_BUFFER_SIZE, TX_NO_WAIT);
2512:../src/wolfcrypt/src/aes.c ****             s2 = tx_byte_allocate(&mp_ncached, (void *)&AESBuffOut,
2513:../src/wolfcrypt/src/aes.c ****                                   AES_BUFFER_SIZE, TX_NO_WAIT);
2514:../src/wolfcrypt/src/aes.c ****             s3 = tx_byte_allocate(&mp_ncached, (void *)&secKey,
2515:../src/wolfcrypt/src/aes.c ****                                   AES_BLOCK_SIZE*2, TX_NO_WAIT);
2516:../src/wolfcrypt/src/aes.c ****             s4 = tx_byte_allocate(&mp_ncached, (void *)&secReg,
2517:../src/wolfcrypt/src/aes.c ****                                   AES_BLOCK_SIZE, TX_NO_WAIT);
2518:../src/wolfcrypt/src/aes.c **** 
2519:../src/wolfcrypt/src/aes.c ****             if (s1 || s2 || s3 || s4 || s5)
2520:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
2521:../src/wolfcrypt/src/aes.c ****         #else
2522:../src/wolfcrypt/src/aes.c ****             #warning "Allocate non-Cache buffers"
2523:../src/wolfcrypt/src/aes.c ****         #endif
2524:../src/wolfcrypt/src/aes.c **** 
2525:../src/wolfcrypt/src/aes.c ****             wc_InitMutex(&Mutex_AesSEC);
2526:../src/wolfcrypt/src/aes.c ****         }
2527:../src/wolfcrypt/src/aes.c **** 
2528:../src/wolfcrypt/src/aes.c ****         if (!((keylen == 16) || (keylen == 24) || (keylen == 32)))
2529:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2530:../src/wolfcrypt/src/aes.c **** 
2531:../src/wolfcrypt/src/aes.c ****         if (aes == NULL)
2532:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2533:../src/wolfcrypt/src/aes.c **** 
2534:../src/wolfcrypt/src/aes.c ****         aes->keylen = keylen;
2535:../src/wolfcrypt/src/aes.c ****         aes->rounds = keylen/4 + 6;
2536:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->key, userKey, keylen);
2537:../src/wolfcrypt/src/aes.c **** 
2538:../src/wolfcrypt/src/aes.c ****         if (iv)
2539:../src/wolfcrypt/src/aes.c ****             XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
2540:../src/wolfcrypt/src/aes.c **** 
2541:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_CFB) || defined(WOLFSSL_AES_COUNTER) || \
2542:../src/wolfcrypt/src/aes.c ****         defined(WOLFSSL_AES_OFB)
2543:../src/wolfcrypt/src/aes.c ****         aes->left = 0;
2544:../src/wolfcrypt/src/aes.c ****     #endif
2545:../src/wolfcrypt/src/aes.c **** 
2546:../src/wolfcrypt/src/aes.c ****         return 0;
2547:../src/wolfcrypt/src/aes.c ****     }
2548:../src/wolfcrypt/src/aes.c **** #elif defined(FREESCALE_LTC)
2549:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKey(Aes* aes, const byte* userKey, word32 keylen, const byte* iv,
2550:../src/wolfcrypt/src/aes.c ****                   int dir)
2551:../src/wolfcrypt/src/aes.c ****     {
2552:../src/wolfcrypt/src/aes.c ****         if (aes == NULL || !((keylen == 16) || (keylen == 24) || (keylen == 32)))
2553:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2554:../src/wolfcrypt/src/aes.c **** 
2555:../src/wolfcrypt/src/aes.c ****         aes->rounds = keylen/4 + 6;
2556:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->key, userKey, keylen);
2557:../src/wolfcrypt/src/aes.c **** 
2558:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_CFB) || defined(WOLFSSL_AES_COUNTER) || \
2559:../src/wolfcrypt/src/aes.c ****         defined(WOLFSSL_AES_OFB)
2560:../src/wolfcrypt/src/aes.c ****         aes->left = 0;
2561:../src/wolfcrypt/src/aes.c ****     #endif
2562:../src/wolfcrypt/src/aes.c **** 
2563:../src/wolfcrypt/src/aes.c ****         return wc_AesSetIV(aes, iv);
2564:../src/wolfcrypt/src/aes.c ****     }
2565:../src/wolfcrypt/src/aes.c **** 
2566:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKeyDirect(Aes* aes, const byte* userKey, word32 keylen,
2567:../src/wolfcrypt/src/aes.c ****                         const byte* iv, int dir)
2568:../src/wolfcrypt/src/aes.c ****     {
2569:../src/wolfcrypt/src/aes.c ****         return wc_AesSetKey(aes, userKey, keylen, iv, dir);
2570:../src/wolfcrypt/src/aes.c ****     }
2571:../src/wolfcrypt/src/aes.c **** #elif defined(FREESCALE_MMCAU)
2572:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKey(Aes* aes, const byte* userKey, word32 keylen,
2573:../src/wolfcrypt/src/aes.c ****         const byte* iv, int dir)
2574:../src/wolfcrypt/src/aes.c ****     {
2575:../src/wolfcrypt/src/aes.c ****         int ret;
2576:../src/wolfcrypt/src/aes.c ****         byte* rk;
2577:../src/wolfcrypt/src/aes.c ****         byte* tmpKey = (byte*)userKey;
2578:../src/wolfcrypt/src/aes.c ****         int tmpKeyDynamic = 0;
2579:../src/wolfcrypt/src/aes.c ****         word32 alignOffset = 0;
2580:../src/wolfcrypt/src/aes.c **** 
2581:../src/wolfcrypt/src/aes.c ****         (void)dir;
2582:../src/wolfcrypt/src/aes.c **** 
2583:../src/wolfcrypt/src/aes.c ****         if (!((keylen == 16) || (keylen == 24) || (keylen == 32)))
2584:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2585:../src/wolfcrypt/src/aes.c ****         if (aes == NULL)
2586:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2587:../src/wolfcrypt/src/aes.c **** 
2588:../src/wolfcrypt/src/aes.c ****         rk = (byte*)aes->key;
2589:../src/wolfcrypt/src/aes.c ****         if (rk == NULL)
2590:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2591:../src/wolfcrypt/src/aes.c **** 
2592:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_CFB) || defined(WOLFSSL_AES_COUNTER) || \
2593:../src/wolfcrypt/src/aes.c ****         defined(WOLFSSL_AES_OFB)
2594:../src/wolfcrypt/src/aes.c ****         aes->left = 0;
2595:../src/wolfcrypt/src/aes.c ****     #endif
2596:../src/wolfcrypt/src/aes.c **** 
2597:../src/wolfcrypt/src/aes.c ****         aes->rounds = keylen/4 + 6;
2598:../src/wolfcrypt/src/aes.c **** 
2599:../src/wolfcrypt/src/aes.c ****     #ifdef FREESCALE_MMCAU_CLASSIC
2600:../src/wolfcrypt/src/aes.c ****         if ((wc_ptr_t)userKey % WOLFSSL_MMCAU_ALIGNMENT) {
2601:../src/wolfcrypt/src/aes.c ****         #ifndef NO_WOLFSSL_ALLOC_ALIGN
2602:../src/wolfcrypt/src/aes.c ****             byte* tmp = (byte*)XMALLOC(keylen + WOLFSSL_MMCAU_ALIGNMENT,
2603:../src/wolfcrypt/src/aes.c ****                                        aes->heap, DYNAMIC_TYPE_TMP_BUFFER);
2604:../src/wolfcrypt/src/aes.c ****             if (tmp == NULL) {
2605:../src/wolfcrypt/src/aes.c ****                 return MEMORY_E;
2606:../src/wolfcrypt/src/aes.c ****             }
2607:../src/wolfcrypt/src/aes.c ****             alignOffset = WOLFSSL_MMCAU_ALIGNMENT -
2608:../src/wolfcrypt/src/aes.c ****                           ((wc_ptr_t)tmp % WOLFSSL_MMCAU_ALIGNMENT);
2609:../src/wolfcrypt/src/aes.c ****             tmpKey = tmp + alignOffset;
2610:../src/wolfcrypt/src/aes.c ****             XMEMCPY(tmpKey, userKey, keylen);
2611:../src/wolfcrypt/src/aes.c ****             tmpKeyDynamic = 1;
2612:../src/wolfcrypt/src/aes.c ****         #else
2613:../src/wolfcrypt/src/aes.c ****             WOLFSSL_MSG("Bad cau_aes_set_key alignment");
2614:../src/wolfcrypt/src/aes.c ****             return BAD_ALIGN_E;
2615:../src/wolfcrypt/src/aes.c ****         #endif
2616:../src/wolfcrypt/src/aes.c ****         }
2617:../src/wolfcrypt/src/aes.c ****     #endif
2618:../src/wolfcrypt/src/aes.c **** 
2619:../src/wolfcrypt/src/aes.c ****         ret = wolfSSL_CryptHwMutexLock();
2620:../src/wolfcrypt/src/aes.c ****         if(ret == 0) {
2621:../src/wolfcrypt/src/aes.c ****         #ifdef FREESCALE_MMCAU_CLASSIC
2622:../src/wolfcrypt/src/aes.c ****             cau_aes_set_key(tmpKey, keylen*8, rk);
2623:../src/wolfcrypt/src/aes.c ****         #else
2624:../src/wolfcrypt/src/aes.c ****             MMCAU_AES_SetKey(tmpKey, keylen, rk);
2625:../src/wolfcrypt/src/aes.c ****         #endif
2626:../src/wolfcrypt/src/aes.c ****             wolfSSL_CryptHwMutexUnLock();
2627:../src/wolfcrypt/src/aes.c **** 
2628:../src/wolfcrypt/src/aes.c ****             ret = wc_AesSetIV(aes, iv);
2629:../src/wolfcrypt/src/aes.c ****         }
2630:../src/wolfcrypt/src/aes.c **** 
2631:../src/wolfcrypt/src/aes.c ****         if (tmpKeyDynamic == 1) {
2632:../src/wolfcrypt/src/aes.c ****             XFREE(tmpKey - alignOffset, aes->heap, DYNAMIC_TYPE_TMP_BUFFER);
2633:../src/wolfcrypt/src/aes.c ****         }
2634:../src/wolfcrypt/src/aes.c **** 
2635:../src/wolfcrypt/src/aes.c ****         return ret;
2636:../src/wolfcrypt/src/aes.c ****     }
2637:../src/wolfcrypt/src/aes.c **** 
2638:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKeyDirect(Aes* aes, const byte* userKey, word32 keylen,
2639:../src/wolfcrypt/src/aes.c ****                         const byte* iv, int dir)
2640:../src/wolfcrypt/src/aes.c ****     {
2641:../src/wolfcrypt/src/aes.c ****         return wc_AesSetKey(aes, userKey, keylen, iv, dir);
2642:../src/wolfcrypt/src/aes.c ****     }
2643:../src/wolfcrypt/src/aes.c **** 
2644:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_CRYPT)
2645:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKey(Aes* aes, const byte* userKey, word32 keylen, const byte* iv,
2646:../src/wolfcrypt/src/aes.c ****                   int dir)
2647:../src/wolfcrypt/src/aes.c ****     {
2648:../src/wolfcrypt/src/aes.c ****         int ret;
2649:../src/wolfcrypt/src/aes.c **** 
2650:../src/wolfcrypt/src/aes.c ****         if (aes == NULL || (keylen != 16 && keylen != 24 && keylen != 32)) {
2651:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2652:../src/wolfcrypt/src/aes.c ****         }
2653:../src/wolfcrypt/src/aes.c **** 
2654:../src/wolfcrypt/src/aes.c ****         aes->ctxInitDone = 0;
2655:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_CFB) || defined(WOLFSSL_AES_COUNTER) || \
2656:../src/wolfcrypt/src/aes.c ****         defined(WOLFSSL_AES_OFB)
2657:../src/wolfcrypt/src/aes.c ****         aes->left = 0;
2658:../src/wolfcrypt/src/aes.c ****     #endif
2659:../src/wolfcrypt/src/aes.c **** 
2660:../src/wolfcrypt/src/aes.c ****         ret = se050_aes_set_key(aes, userKey, keylen, iv, dir);
2661:../src/wolfcrypt/src/aes.c ****         if (ret == 0) {
2662:../src/wolfcrypt/src/aes.c ****             ret = wc_AesSetIV(aes, iv);
2663:../src/wolfcrypt/src/aes.c ****         }
2664:../src/wolfcrypt/src/aes.c ****         return ret;
2665:../src/wolfcrypt/src/aes.c ****     }
2666:../src/wolfcrypt/src/aes.c **** 
2667:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKeyDirect(Aes* aes, const byte* userKey, word32 keylen,
2668:../src/wolfcrypt/src/aes.c ****         const byte* iv, int dir)
2669:../src/wolfcrypt/src/aes.c ****     {
2670:../src/wolfcrypt/src/aes.c ****         return wc_AesSetKey(aes, userKey, keylen, iv, dir);
2671:../src/wolfcrypt/src/aes.c ****     }
2672:../src/wolfcrypt/src/aes.c **** 
2673:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_NRF51_AES)
2674:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKey(Aes* aes, const byte* userKey, word32 keylen,
2675:../src/wolfcrypt/src/aes.c ****         const byte* iv, int dir)
2676:../src/wolfcrypt/src/aes.c ****     {
2677:../src/wolfcrypt/src/aes.c ****         int ret;
2678:../src/wolfcrypt/src/aes.c **** 
2679:../src/wolfcrypt/src/aes.c ****         (void)dir;
2680:../src/wolfcrypt/src/aes.c ****         (void)iv;
2681:../src/wolfcrypt/src/aes.c **** 
2682:../src/wolfcrypt/src/aes.c ****         if (aes == NULL || keylen != 16)
2683:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2684:../src/wolfcrypt/src/aes.c **** 
2685:../src/wolfcrypt/src/aes.c ****         aes->keylen = keylen;
2686:../src/wolfcrypt/src/aes.c ****         aes->rounds = keylen/4 + 6;
2687:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->key, userKey, keylen);
2688:../src/wolfcrypt/src/aes.c ****         ret = nrf51_aes_set_key(userKey);
2689:../src/wolfcrypt/src/aes.c **** 
2690:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_CFB) || defined(WOLFSSL_AES_COUNTER) || \
2691:../src/wolfcrypt/src/aes.c ****         defined(WOLFSSL_AES_OFB)
2692:../src/wolfcrypt/src/aes.c ****         aes->left = 0;
2693:../src/wolfcrypt/src/aes.c ****     #endif
2694:../src/wolfcrypt/src/aes.c **** 
2695:../src/wolfcrypt/src/aes.c ****         return ret;
2696:../src/wolfcrypt/src/aes.c ****     }
2697:../src/wolfcrypt/src/aes.c **** 
2698:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKeyDirect(Aes* aes, const byte* userKey, word32 keylen,
2699:../src/wolfcrypt/src/aes.c ****                         const byte* iv, int dir)
2700:../src/wolfcrypt/src/aes.c ****     {
2701:../src/wolfcrypt/src/aes.c ****         return wc_AesSetKey(aes, userKey, keylen, iv, dir);
2702:../src/wolfcrypt/src/aes.c ****     }
2703:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
2704:../src/wolfcrypt/src/aes.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_AES)
2705:../src/wolfcrypt/src/aes.c **** 
2706:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKey(Aes* aes, const byte* userKey, word32 keylen,
2707:../src/wolfcrypt/src/aes.c ****         const byte* iv, int dir)
2708:../src/wolfcrypt/src/aes.c ****     {
2709:../src/wolfcrypt/src/aes.c ****         (void)dir;
2710:../src/wolfcrypt/src/aes.c ****         (void)iv;
2711:../src/wolfcrypt/src/aes.c **** 
2712:../src/wolfcrypt/src/aes.c ****         if (aes == NULL || (keylen != 16 && keylen != 24 && keylen != 32)) {
2713:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2714:../src/wolfcrypt/src/aes.c ****         }
2715:../src/wolfcrypt/src/aes.c **** 
2716:../src/wolfcrypt/src/aes.c ****         aes->keylen = keylen;
2717:../src/wolfcrypt/src/aes.c ****         aes->rounds = keylen/4 + 6;
2718:../src/wolfcrypt/src/aes.c **** 
2719:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->key, userKey, keylen);
2720:../src/wolfcrypt/src/aes.c ****         #if defined(WOLFSSL_AES_COUNTER)
2721:../src/wolfcrypt/src/aes.c ****             aes->left = 0;
2722:../src/wolfcrypt/src/aes.c ****         #endif
2723:../src/wolfcrypt/src/aes.c ****         return wc_AesSetIV(aes, iv);
2724:../src/wolfcrypt/src/aes.c ****     }
2725:../src/wolfcrypt/src/aes.c **** 
2726:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKeyDirect(Aes* aes, const byte* userKey, word32 keylen,
2727:../src/wolfcrypt/src/aes.c ****                         const byte* iv, int dir)
2728:../src/wolfcrypt/src/aes.c ****     {
2729:../src/wolfcrypt/src/aes.c ****         return wc_AesSetKey(aes, userKey, keylen, iv, dir);
2730:../src/wolfcrypt/src/aes.c ****     }
2731:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_CRYPTOCELL) && defined(WOLFSSL_CRYPTOCELL_AES)
2732:../src/wolfcrypt/src/aes.c **** 
2733:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKey(Aes* aes, const byte* userKey, word32 keylen, const byte* iv,
2734:../src/wolfcrypt/src/aes.c ****                     int dir)
2735:../src/wolfcrypt/src/aes.c ****     {
2736:../src/wolfcrypt/src/aes.c ****         SaSiError_t ret = SASI_OK;
2737:../src/wolfcrypt/src/aes.c ****         SaSiAesIv_t iv_aes;
2738:../src/wolfcrypt/src/aes.c **** 
2739:../src/wolfcrypt/src/aes.c ****         if (aes == NULL ||
2740:../src/wolfcrypt/src/aes.c ****            (keylen != AES_128_KEY_SIZE &&
2741:../src/wolfcrypt/src/aes.c ****             keylen != AES_192_KEY_SIZE &&
2742:../src/wolfcrypt/src/aes.c ****             keylen != AES_256_KEY_SIZE)) {
2743:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2744:../src/wolfcrypt/src/aes.c ****         }
2745:../src/wolfcrypt/src/aes.c ****     #if defined(AES_MAX_KEY_SIZE)
2746:../src/wolfcrypt/src/aes.c ****         if (keylen > (AES_MAX_KEY_SIZE/8)) {
2747:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2748:../src/wolfcrypt/src/aes.c ****         }
2749:../src/wolfcrypt/src/aes.c ****     #endif
2750:../src/wolfcrypt/src/aes.c ****         if (dir != AES_ENCRYPTION &&
2751:../src/wolfcrypt/src/aes.c ****             dir != AES_DECRYPTION) {
2752:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2753:../src/wolfcrypt/src/aes.c ****         }
2754:../src/wolfcrypt/src/aes.c **** 
2755:../src/wolfcrypt/src/aes.c ****         if (dir == AES_ENCRYPTION) {
2756:../src/wolfcrypt/src/aes.c ****             aes->ctx.mode = SASI_AES_ENCRYPT;
2757:../src/wolfcrypt/src/aes.c ****             SaSi_AesInit(&aes->ctx.user_ctx,
2758:../src/wolfcrypt/src/aes.c ****                          SASI_AES_ENCRYPT,
2759:../src/wolfcrypt/src/aes.c ****                          SASI_AES_MODE_CBC,
2760:../src/wolfcrypt/src/aes.c ****                          SASI_AES_PADDING_NONE);
2761:../src/wolfcrypt/src/aes.c ****         }
2762:../src/wolfcrypt/src/aes.c ****         else {
2763:../src/wolfcrypt/src/aes.c ****             aes->ctx.mode = SASI_AES_DECRYPT;
2764:../src/wolfcrypt/src/aes.c ****             SaSi_AesInit(&aes->ctx.user_ctx,
2765:../src/wolfcrypt/src/aes.c ****                          SASI_AES_DECRYPT,
2766:../src/wolfcrypt/src/aes.c ****                          SASI_AES_MODE_CBC,
2767:../src/wolfcrypt/src/aes.c ****                          SASI_AES_PADDING_NONE);
2768:../src/wolfcrypt/src/aes.c ****         }
2769:../src/wolfcrypt/src/aes.c **** 
2770:../src/wolfcrypt/src/aes.c ****         aes->keylen = keylen;
2771:../src/wolfcrypt/src/aes.c ****         aes->rounds = keylen/4 + 6;
2772:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->key, userKey, keylen);
2773:../src/wolfcrypt/src/aes.c **** 
2774:../src/wolfcrypt/src/aes.c ****         aes->ctx.key.pKey = (byte*)aes->key;
2775:../src/wolfcrypt/src/aes.c ****         aes->ctx.key.keySize= keylen;
2776:../src/wolfcrypt/src/aes.c **** 
2777:../src/wolfcrypt/src/aes.c ****         ret = SaSi_AesSetKey(&aes->ctx.user_ctx,
2778:../src/wolfcrypt/src/aes.c ****                              SASI_AES_USER_KEY,
2779:../src/wolfcrypt/src/aes.c ****                              &aes->ctx.key,
2780:../src/wolfcrypt/src/aes.c ****                              sizeof(aes->ctx.key));
2781:../src/wolfcrypt/src/aes.c ****         if (ret != SASI_OK) {
2782:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
2783:../src/wolfcrypt/src/aes.c ****         }
2784:../src/wolfcrypt/src/aes.c **** 
2785:../src/wolfcrypt/src/aes.c ****         ret = wc_AesSetIV(aes, iv);
2786:../src/wolfcrypt/src/aes.c **** 
2787:../src/wolfcrypt/src/aes.c ****         if (iv)
2788:../src/wolfcrypt/src/aes.c ****             XMEMCPY(iv_aes, iv, AES_BLOCK_SIZE);
2789:../src/wolfcrypt/src/aes.c ****         else
2790:../src/wolfcrypt/src/aes.c ****             XMEMSET(iv_aes,  0, AES_BLOCK_SIZE);
2791:../src/wolfcrypt/src/aes.c **** 
2792:../src/wolfcrypt/src/aes.c **** 
2793:../src/wolfcrypt/src/aes.c ****         ret = SaSi_AesSetIv(&aes->ctx.user_ctx, iv_aes);
2794:../src/wolfcrypt/src/aes.c ****         if (ret != SASI_OK) {
2795:../src/wolfcrypt/src/aes.c ****             return ret;
2796:../src/wolfcrypt/src/aes.c ****         }
2797:../src/wolfcrypt/src/aes.c ****        return ret;
2798:../src/wolfcrypt/src/aes.c ****     }
2799:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_DIRECT)
2800:../src/wolfcrypt/src/aes.c ****         int wc_AesSetKeyDirect(Aes* aes, const byte* userKey, word32 keylen,
2801:../src/wolfcrypt/src/aes.c ****                             const byte* iv, int dir)
2802:../src/wolfcrypt/src/aes.c ****         {
2803:../src/wolfcrypt/src/aes.c ****             return wc_AesSetKey(aes, userKey, keylen, iv, dir);
2804:../src/wolfcrypt/src/aes.c ****         }
2805:../src/wolfcrypt/src/aes.c ****     #endif
2806:../src/wolfcrypt/src/aes.c **** 
2807:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_IMX6_CAAM) && !defined(NO_IMX6_CAAM_AES) \
2808:../src/wolfcrypt/src/aes.c ****     && !defined(WOLFSSL_QNX_CAAM)
2809:../src/wolfcrypt/src/aes.c ****       /* implemented in wolfcrypt/src/port/caam/caam_aes.c */
2810:../src/wolfcrypt/src/aes.c **** 
2811:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_AFALG)
2812:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/af_alg/afalg_aes.c */
2813:../src/wolfcrypt/src/aes.c **** 
2814:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_DEVCRYPTO_AES)
2815:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/devcrypto/devcrypto_aes.c */
2816:../src/wolfcrypt/src/aes.c **** 
2817:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_SILABS_SE_ACCEL)
2818:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/silabs/silabs_hash.c */
2819:../src/wolfcrypt/src/aes.c **** 
2820:../src/wolfcrypt/src/aes.c **** #else
2821:../src/wolfcrypt/src/aes.c **** 
2822:../src/wolfcrypt/src/aes.c ****     /* Software AES - SetKey */
2823:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesSetKeyLocal(
2824:../src/wolfcrypt/src/aes.c ****         Aes* aes, const byte* userKey, word32 keylen, const byte* iv, int dir,
2825:../src/wolfcrypt/src/aes.c ****         int checkKeyLen)
2826:../src/wolfcrypt/src/aes.c ****     {
 7168                             		.loc 2 2826 5
 7169 0000 7E AA                   		push.l	r10
 7170                             	.LCFI33:
 7171 0002 7E A6                   		push.l	r6
 7172                             	.LCFI34:
 7173 0004 71 0A D4                		add	#-44, r0, r10
 7174                             	.LCFI35:
 7175 0007 EF A0                   		mov.L	r10, r0
 7176 0009 75 46 38                		mov.L	#56, r6
 7177 000c 4B A6                   		add	r10, r6
 7178 000e E7 A1 05                		mov.L	r1, 20[r10]
 7179 0011 E7 A2 06                		mov.L	r2, 24[r10]
 7180 0014 E7 A3 07                		mov.L	r3, 28[r10]
 7181 0017 E7 A4 08                		mov.L	r4, 32[r10]
2827:../src/wolfcrypt/src/aes.c ****         int ret;
2828:../src/wolfcrypt/src/aes.c ****         word32 *rk;
2829:../src/wolfcrypt/src/aes.c ****     #ifdef NEED_AES_TABLES
2830:../src/wolfcrypt/src/aes.c ****         word32 temp;
2831:../src/wolfcrypt/src/aes.c ****         unsigned int i = 0;
 7182                             		.loc 2 2831 22
 7183 001a F9 A6 01 00             		mov.L	#0, 4[r10]
2832:../src/wolfcrypt/src/aes.c ****     #endif
2833:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_IMX6_CAAM_BLOB
2834:../src/wolfcrypt/src/aes.c ****         byte   local[32];
2835:../src/wolfcrypt/src/aes.c ****         word32 localSz = 32;
2836:../src/wolfcrypt/src/aes.c ****     #endif
2837:../src/wolfcrypt/src/aes.c **** 
2838:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_IMX6_CAAM_BLOB
2839:../src/wolfcrypt/src/aes.c ****         if (keylen == (16 + WC_CAAM_BLOB_SZ) ||
2840:../src/wolfcrypt/src/aes.c ****             keylen == (24 + WC_CAAM_BLOB_SZ) ||
2841:../src/wolfcrypt/src/aes.c ****             keylen == (32 + WC_CAAM_BLOB_SZ)) {
2842:../src/wolfcrypt/src/aes.c ****             if (wc_caamOpenBlob((byte*)userKey, keylen, local, &localSz) != 0) {
2843:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
2844:../src/wolfcrypt/src/aes.c ****             }
2845:../src/wolfcrypt/src/aes.c **** 
2846:../src/wolfcrypt/src/aes.c ****             /* set local values */
2847:../src/wolfcrypt/src/aes.c ****             userKey = local;
2848:../src/wolfcrypt/src/aes.c ****             keylen = localSz;
2849:../src/wolfcrypt/src/aes.c ****         }
2850:../src/wolfcrypt/src/aes.c ****     #endif
2851:../src/wolfcrypt/src/aes.c **** 
2852:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_SECO_CAAM
2853:../src/wolfcrypt/src/aes.c ****         /* if set to use hardware than import the key */
2854:../src/wolfcrypt/src/aes.c ****         if (aes->devId == WOLFSSL_SECO_DEVID) {
2855:../src/wolfcrypt/src/aes.c ****             int keyGroup = 1; /* group one was chosen arbitrarily */
2856:../src/wolfcrypt/src/aes.c ****             unsigned int keyIdOut;
2857:../src/wolfcrypt/src/aes.c ****             byte importiv[GCM_NONCE_MID_SZ];
2858:../src/wolfcrypt/src/aes.c ****             int importivSz = GCM_NONCE_MID_SZ;
2859:../src/wolfcrypt/src/aes.c ****             int keyType = 0;
2860:../src/wolfcrypt/src/aes.c ****             WC_RNG rng;
2861:../src/wolfcrypt/src/aes.c **** 
2862:../src/wolfcrypt/src/aes.c ****             if (wc_InitRng(&rng) != 0) {
2863:../src/wolfcrypt/src/aes.c ****                 WOLFSSL_MSG("RNG init for IV failed");
2864:../src/wolfcrypt/src/aes.c ****                 return WC_HW_E;
2865:../src/wolfcrypt/src/aes.c ****             }
2866:../src/wolfcrypt/src/aes.c **** 
2867:../src/wolfcrypt/src/aes.c ****             if (wc_RNG_GenerateBlock(&rng, importiv, importivSz) != 0) {
2868:../src/wolfcrypt/src/aes.c ****                 WOLFSSL_MSG("Generate IV failed");
2869:../src/wolfcrypt/src/aes.c ****                 wc_FreeRng(&rng);
2870:../src/wolfcrypt/src/aes.c ****                 return WC_HW_E;
2871:../src/wolfcrypt/src/aes.c ****             }
2872:../src/wolfcrypt/src/aes.c ****             wc_FreeRng(&rng);
2873:../src/wolfcrypt/src/aes.c **** 
2874:../src/wolfcrypt/src/aes.c ****             switch (keylen) {
2875:../src/wolfcrypt/src/aes.c ****                 case AES_128_KEY_SIZE: keyType = CAAM_KEYTYPE_AES128; break;
2876:../src/wolfcrypt/src/aes.c ****                 case AES_192_KEY_SIZE: keyType = CAAM_KEYTYPE_AES192; break;
2877:../src/wolfcrypt/src/aes.c ****                 case AES_256_KEY_SIZE: keyType = CAAM_KEYTYPE_AES256; break;
2878:../src/wolfcrypt/src/aes.c ****             }
2879:../src/wolfcrypt/src/aes.c **** 
2880:../src/wolfcrypt/src/aes.c ****             keyIdOut = wc_SECO_WrapKey(0, (byte*)userKey, keylen, importiv,
2881:../src/wolfcrypt/src/aes.c ****                 importivSz, keyType, CAAM_KEY_TRANSIENT, keyGroup);
2882:../src/wolfcrypt/src/aes.c ****             if (keyIdOut == 0) {
2883:../src/wolfcrypt/src/aes.c ****                 return WC_HW_E;
2884:../src/wolfcrypt/src/aes.c ****             }
2885:../src/wolfcrypt/src/aes.c ****             aes->blackKey = keyIdOut;
2886:../src/wolfcrypt/src/aes.c ****             return 0;
2887:../src/wolfcrypt/src/aes.c ****         }
2888:../src/wolfcrypt/src/aes.c ****     #endif
2889:../src/wolfcrypt/src/aes.c **** 
2890:../src/wolfcrypt/src/aes.c ****     #if defined(WOLF_CRYPTO_CB) || (defined(WOLFSSL_DEVCRYPTO) && \
2891:../src/wolfcrypt/src/aes.c ****         (defined(WOLFSSL_DEVCRYPTO_AES) || defined(WOLFSSL_DEVCRYPTO_CBC))) || \
2892:../src/wolfcrypt/src/aes.c ****         (defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_AES))
2893:../src/wolfcrypt/src/aes.c ****         #ifdef WOLF_CRYPTO_CB
2894:../src/wolfcrypt/src/aes.c ****         if (aes->devId != INVALID_DEVID)
2895:../src/wolfcrypt/src/aes.c ****         #endif
2896:../src/wolfcrypt/src/aes.c ****         {
2897:../src/wolfcrypt/src/aes.c ****             if (keylen > sizeof(aes->devKey)) {
2898:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
2899:../src/wolfcrypt/src/aes.c ****             }
2900:../src/wolfcrypt/src/aes.c ****             XMEMCPY(aes->devKey, userKey, keylen);
2901:../src/wolfcrypt/src/aes.c ****         }
2902:../src/wolfcrypt/src/aes.c ****     #endif
2903:../src/wolfcrypt/src/aes.c **** 
2904:../src/wolfcrypt/src/aes.c ****         if (checkKeyLen) {
 7184                             		.loc 2 2904 12
 7185 001e A8 6D                   		mov.L	4[r6], r5
 7186 0020 61 05                   		cmp	#0, r5
 7187 0022 20 20                   		beq	.L67
2905:../src/wolfcrypt/src/aes.c ****             if (keylen != 16 && keylen != 24 && keylen != 32) {
 7188                             		.loc 2 2905 16
 7189 0024 ED A5 07                		mov.L	28[r10], r5
 7190 0027 75 55 10                		cmp	#16, r5
 7191 002a 20 18                   		beq	.L67
 7192                             		.loc 2 2905 30 discriminator 1
 7193 002c ED A5 07                		mov.L	28[r10], r5
 7194 002f 75 55 18                		cmp	#24, r5
 7195 0032 20 10                   		beq	.L67
 7196                             		.loc 2 2905 46 discriminator 2
 7197 0034 ED A5 07                		mov.L	28[r10], r5
 7198 0037 75 55 20                		cmp	#32, r5
 7199 003a 10                      		beq	.L67
2906:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
 7200                             		.loc 2 2906 24
 7201 003b FB 5A 53 FF             		mov.L	#-173, r5
 7202 003f 38 2C 08                		bra	.L86
 7203                             	.L67:
2907:../src/wolfcrypt/src/aes.c ****             }
2908:../src/wolfcrypt/src/aes.c ****         #if defined(AES_MAX_KEY_SIZE) && AES_MAX_KEY_SIZE < 256
2909:../src/wolfcrypt/src/aes.c ****             /* Check key length only when AES_MAX_KEY_SIZE doesn't allow
2910:../src/wolfcrypt/src/aes.c ****              * all key sizes. Otherwise this condition is never true. */
2911:../src/wolfcrypt/src/aes.c ****             if (keylen > (AES_MAX_KEY_SIZE / 8)) {
2912:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
2913:../src/wolfcrypt/src/aes.c ****             }
2914:../src/wolfcrypt/src/aes.c ****         #endif
2915:../src/wolfcrypt/src/aes.c ****         }
2916:../src/wolfcrypt/src/aes.c **** 
2917:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_CFB) || defined(WOLFSSL_AES_COUNTER) || \
2918:../src/wolfcrypt/src/aes.c ****         defined(WOLFSSL_AES_OFB)
2919:../src/wolfcrypt/src/aes.c ****         aes->left = 0;
2920:../src/wolfcrypt/src/aes.c ****     #endif
2921:../src/wolfcrypt/src/aes.c **** 
2922:../src/wolfcrypt/src/aes.c ****         aes->keylen = keylen;
 7204                             		.loc 2 2922 21
 7205 0042 ED A4 07                		mov.L	28[r10], r4
 7206 0045 ED A5 05                		mov.L	20[r10], r5
 7207 0048 E7 54 3D                		mov.L	r4, 244[r5]
2923:../src/wolfcrypt/src/aes.c ****         aes->rounds = (keylen/4) + 6;
 7208                             		.loc 2 2923 30
 7209 004b ED A5 07                		mov.L	28[r10], r5
 7210 004e 68 25                   		shlr	#2, r5
 7211                             		.loc 2 2923 34
 7212 0050 71 54 06                		add	#6, r5, r4
 7213                             		.loc 2 2923 21
 7214 0053 ED A5 05                		mov.L	20[r10], r5
 7215 0056 E7 54 3C                		mov.L	r4, 240[r5]
2924:../src/wolfcrypt/src/aes.c **** 
2925:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_AESNI
2926:../src/wolfcrypt/src/aes.c ****         aes->use_aesni = 0;
2927:../src/wolfcrypt/src/aes.c ****         if (checkAESNI == 0) {
2928:../src/wolfcrypt/src/aes.c ****             haveAESNI  = Check_CPU_support_AES();
2929:../src/wolfcrypt/src/aes.c ****             checkAESNI = 1;
2930:../src/wolfcrypt/src/aes.c ****         }
2931:../src/wolfcrypt/src/aes.c ****         if (haveAESNI) {
2932:../src/wolfcrypt/src/aes.c ****             aes->use_aesni = 1;
2933:../src/wolfcrypt/src/aes.c ****             if (iv)
2934:../src/wolfcrypt/src/aes.c ****                 XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
2935:../src/wolfcrypt/src/aes.c ****             else
2936:../src/wolfcrypt/src/aes.c ****                 XMEMSET(aes->reg, 0, AES_BLOCK_SIZE);
2937:../src/wolfcrypt/src/aes.c ****             if (dir == AES_ENCRYPTION)
2938:../src/wolfcrypt/src/aes.c ****                 return AES_set_encrypt_key(userKey, keylen * 8, aes);
2939:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_AES_DECRYPT
2940:../src/wolfcrypt/src/aes.c ****             else
2941:../src/wolfcrypt/src/aes.c ****                 return AES_set_decrypt_key(userKey, keylen * 8, aes);
2942:../src/wolfcrypt/src/aes.c ****         #endif
2943:../src/wolfcrypt/src/aes.c ****         }
2944:../src/wolfcrypt/src/aes.c ****     #endif /* WOLFSSL_AESNI */
2945:../src/wolfcrypt/src/aes.c **** 
2946:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_KCAPI_AES
2947:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->devKey, userKey, keylen);
2948:../src/wolfcrypt/src/aes.c ****         if (aes->init != 0) {
2949:../src/wolfcrypt/src/aes.c ****             kcapi_cipher_destroy(aes->handle);
2950:../src/wolfcrypt/src/aes.c ****             aes->handle = NULL;
2951:../src/wolfcrypt/src/aes.c ****             aes->init = 0;
2952:../src/wolfcrypt/src/aes.c ****         }
2953:../src/wolfcrypt/src/aes.c ****         (void)dir;
2954:../src/wolfcrypt/src/aes.c ****     #endif
2955:../src/wolfcrypt/src/aes.c **** 
2956:../src/wolfcrypt/src/aes.c ****         if (keylen > sizeof(aes->key)) {
 7216                             		.loc 2 2956 12
 7217 0059 ED A5 07                		mov.L	28[r10], r5
 7218 005c 75 55 F0                		cmp	#0xf0, r5
 7219 005f 25 09                   		bleu	.L69
2957:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
 7220                             		.loc 2 2957 20
 7221 0061 FB 5A 53 FF             		mov.L	#-173, r5
 7222 0065 38 06 08                		bra	.L86
 7223                             	.L69:
2958:../src/wolfcrypt/src/aes.c ****         }
2959:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_HAVE_PSA) && !defined(WOLFSSL_PSA_NO_AES)
2960:../src/wolfcrypt/src/aes.c ****         return wc_psa_aes_set_key(aes, userKey, keylen, (uint8_t*)iv,
2961:../src/wolfcrypt/src/aes.c ****                                   ((psa_algorithm_t)0), dir);
2962:../src/wolfcrypt/src/aes.c **** #endif
2963:../src/wolfcrypt/src/aes.c **** 
2964:../src/wolfcrypt/src/aes.c ****         rk = aes->key;
 7224                             		.loc 2 2964 12
 7225 0068 ED A5 05                		mov.L	20[r10], r5
 7226 006b E3 A5                   		mov.L	r5, [r10]
2965:../src/wolfcrypt/src/aes.c ****         XMEMCPY(rk, userKey, keylen);
 7227                             		.loc 2 2965 9
 7228 006d ED A3 07                		mov.L	28[r10], r3
 7229 0070 ED A2 06                		mov.L	24[r10], r2
 7230 0073 EC A1                   		mov.L	[r10], r1
 7231 0075 05 00 00 00             		bsr	_memcpy
2966:../src/wolfcrypt/src/aes.c ****     #if defined(LITTLE_ENDIAN_ORDER) && !defined(WOLFSSL_PIC32MZ_CRYPT) && \
2967:../src/wolfcrypt/src/aes.c ****         (!defined(WOLFSSL_ESP32WROOM32_CRYPT) || \
2968:../src/wolfcrypt/src/aes.c ****           defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_AES))
2969:../src/wolfcrypt/src/aes.c ****         ByteReverseWords(rk, rk, keylen);
 7232                             		.loc 2 2969 9
 7233 0079 ED A3 07                		mov.L	28[r10], r3
 7234 007c EC A2                   		mov.L	[r10], r2
 7235 007e EC A1                   		mov.L	[r10], r1
 7236 0080 05 00 00 00             		bsr	_ByteReverseWords
2970:../src/wolfcrypt/src/aes.c ****     #endif
2971:../src/wolfcrypt/src/aes.c **** 
2972:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_IMXRT_DCP
2973:../src/wolfcrypt/src/aes.c ****         /* Implemented in wolfcrypt/src/port/nxp/dcp_port.c */
2974:../src/wolfcrypt/src/aes.c ****         temp = 0;
2975:../src/wolfcrypt/src/aes.c ****         if (keylen == 16)
2976:../src/wolfcrypt/src/aes.c ****             temp = DCPAesSetKey(aes, userKey, keylen, iv, dir);
2977:../src/wolfcrypt/src/aes.c ****         if (temp != 0)
2978:../src/wolfcrypt/src/aes.c ****             return WC_HW_E;
2979:../src/wolfcrypt/src/aes.c ****     #endif
2980:../src/wolfcrypt/src/aes.c **** 
2981:../src/wolfcrypt/src/aes.c **** #ifdef NEED_AES_TABLES
2982:../src/wolfcrypt/src/aes.c ****         switch (keylen) {
 7237                             		.loc 2 2982 9
 7238 0084 ED A5 07                		mov.L	28[r10], r5
 7239 0087 75 55 18                		cmp	#24, r5
 7240 008a 3A 03 01                		beq	.L70
 7241 008d ED A5 07                		mov.L	28[r10], r5
 7242 0090 75 55 20                		cmp	#32, r5
 7243 0093 3A 18 02                		beq	.L71
 7244 0096 ED A5 07                		mov.L	28[r10], r5
 7245 0099 75 55 10                		cmp	#16, r5
 7246 009c 3B C5 03                		bne	.L72
 7247                             	.L75:
2983:../src/wolfcrypt/src/aes.c ****     #if defined(AES_MAX_KEY_SIZE) && AES_MAX_KEY_SIZE >= 128 && \
2984:../src/wolfcrypt/src/aes.c ****             defined(WOLFSSL_AES_128)
2985:../src/wolfcrypt/src/aes.c ****         case 16:
2986:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
2987:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Add("wc_AesSetKeyLocal temp", &temp, sizeof(temp));
2988:../src/wolfcrypt/src/aes.c ****         #endif
2989:../src/wolfcrypt/src/aes.c ****             while (1)
2990:../src/wolfcrypt/src/aes.c ****             {
2991:../src/wolfcrypt/src/aes.c ****                 temp  = rk[3];
 7248                             		.loc 2 2991 23
 7249 009f EC A5                   		mov.L	[r10], r5
 7250 00a1 A8 DD                   		mov.L	12[r5], r5
 7251 00a3 E7 A5 04                		mov.L	r5, 16[r10]
2992:../src/wolfcrypt/src/aes.c ****                 rk[4] = rk[0] ^
 7252                             		.loc 2 2992 27
 7253 00a6 EC A5                   		mov.L	[r10], r5
 7254 00a8 EC 53                   		mov.L	[r5], r3
2993:../src/wolfcrypt/src/aes.c ****             #ifndef WOLFSSL_AES_SMALL_TABLES
2994:../src/wolfcrypt/src/aes.c ****                     (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
 7255                             		.loc 2 2994 28
 7256 00aa ED A5 04                		mov.L	16[r10], r5
 7257 00ad 69 05                   		shlr	#16, r5
 7258 00af 5B 55                   		movu.B	r5, r5
 7259                             		.loc 2 2994 27
 7260 00b1 FB 42 00 00 00 00       		mov.L	#_Te, r4
 7261 00b7 72 55 00 02             		add	#0x200, r5
 7262 00bb FE 65 45                		mov.L	[r5,r4], r5
 7263                             		.loc 2 2994 46
 7264 00be 74 25 00 00 00 FF       		and	#-16777216, r5
2992:../src/wolfcrypt/src/aes.c ****                 rk[4] = rk[0] ^
 7265                             		.loc 2 2992 31
 7266 00c4 FC 37 53                		xor	r5, r3
2995:../src/wolfcrypt/src/aes.c ****                     (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 7267                             		.loc 2 2995 28
 7268 00c7 ED A5 04                		mov.L	16[r10], r5
 7269 00ca 68 85                   		shlr	#8, r5
 7270 00cc 5B 55                   		movu.B	r5, r5
 7271                             		.loc 2 2995 27
 7272 00ce FB 42 00 00 00 00       		mov.L	#_Te, r4
 7273 00d4 72 55 00 03             		add	#0x300, r5
 7274 00d8 FE 65 45                		mov.L	[r5,r4], r5
 7275                             		.loc 2 2995 46
 7276 00db 74 25 00 00 FF 00       		and	#0xff0000, r5
2994:../src/wolfcrypt/src/aes.c ****                     (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 7277                             		.loc 2 2994 60
 7278 00e1 FC 37 53                		xor	r5, r3
2996:../src/wolfcrypt/src/aes.c ****                     (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
 7279                             		.loc 2 2996 28
 7280 00e4 ED A5 04                		mov.L	16[r10], r5
 7281 00e7 5B 55                   		movu.B	r5, r5
 7282                             		.loc 2 2996 27
 7283 00e9 FB 42 00 00 00 00       		mov.L	#_Te, r4
 7284 00ef FE 65 45                		mov.L	[r5,r4], r5
 7285                             		.loc 2 2996 46
 7286 00f2 77 25 00 FF 00          		and	#0xff00, r5
2995:../src/wolfcrypt/src/aes.c ****                     (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 7287                             		.loc 2 2995 60
 7288 00f7 FC 37 53                		xor	r5, r3
2997:../src/wolfcrypt/src/aes.c ****                     (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
 7289                             		.loc 2 2997 28
 7290 00fa ED A5 04                		mov.L	16[r10], r5
 7291 00fd 69 85                   		shlr	#24, r5
 7292 00ff 5B 55                   		movu.B	r5, r5
 7293                             		.loc 2 2997 27
 7294 0101 FB 42 00 00 00 00       		mov.L	#_Te, r4
 7295 0107 72 55 00 01             		add	#0x100, r5
 7296 010b FE 65 45                		mov.L	[r5,r4], r5
 7297                             		.loc 2 2997 46
 7298 010e 76 25 FF 00             		and	#0xff, r5
2996:../src/wolfcrypt/src/aes.c ****                     (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
 7299                             		.loc 2 2996 60
 7300 0112 FC 37 53                		xor	r5, r3
2998:../src/wolfcrypt/src/aes.c ****             #else
2999:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 2)] << 24) ^
3000:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 1)] << 16) ^
3001:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 0)] <<  8) ^
3002:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 3)]) ^
3003:../src/wolfcrypt/src/aes.c ****             #endif
3004:../src/wolfcrypt/src/aes.c ****                     rcon[i];
 7301                             		.loc 2 3004 25
 7302 0115 FB 52 00 00 00 00       		mov.L	#_rcon, r5
 7303 011b ED A4 01                		mov.L	4[r10], r4
 7304 011e FE 64 54                		mov.L	[r4,r5], r4
2992:../src/wolfcrypt/src/aes.c ****             #ifndef WOLFSSL_AES_SMALL_TABLES
 7305                             		.loc 2 2992 19
 7306 0121 EC A5                   		mov.L	[r10], r5
 7307 0123 71 55 10                		add	#16, r5
2997:../src/wolfcrypt/src/aes.c ****                     (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
 7308                             		.loc 2 2997 60
 7309 0126 FC 37 34                		xor	r3, r4
2992:../src/wolfcrypt/src/aes.c ****             #ifndef WOLFSSL_AES_SMALL_TABLES
 7310                             		.loc 2 2992 23
 7311 0129 E3 54                   		mov.L	r4, [r5]
3005:../src/wolfcrypt/src/aes.c ****                 rk[5] = rk[1] ^ rk[4];
 7312                             		.loc 2 3005 27
 7313 012b EC A5                   		mov.L	[r10], r5
 7314 012d 62 45                   		add	#4, r5
 7315 012f EC 53                   		mov.L	[r5], r3
 7316                             		.loc 2 3005 35
 7317 0131 EC A5                   		mov.L	[r10], r5
 7318 0133 71 55 10                		add	#16, r5
 7319 0136 EC 54                   		mov.L	[r5], r4
 7320                             		.loc 2 3005 19
 7321 0138 EC A5                   		mov.L	[r10], r5
 7322 013a 71 55 14                		add	#20, r5
 7323                             		.loc 2 3005 31
 7324 013d FC 37 34                		xor	r3, r4
 7325                             		.loc 2 3005 23
 7326 0140 E3 54                   		mov.L	r4, [r5]
3006:../src/wolfcrypt/src/aes.c ****                 rk[6] = rk[2] ^ rk[5];
 7327                             		.loc 2 3006 27
 7328 0142 EC A5                   		mov.L	[r10], r5
 7329 0144 62 85                   		add	#8, r5
 7330 0146 EC 53                   		mov.L	[r5], r3
 7331                             		.loc 2 3006 35
 7332 0148 EC A5                   		mov.L	[r10], r5
 7333 014a 71 55 14                		add	#20, r5
 7334 014d EC 54                   		mov.L	[r5], r4
 7335                             		.loc 2 3006 19
 7336 014f EC A5                   		mov.L	[r10], r5
 7337 0151 71 55 18                		add	#24, r5
 7338                             		.loc 2 3006 31
 7339 0154 FC 37 34                		xor	r3, r4
 7340                             		.loc 2 3006 23
 7341 0157 E3 54                   		mov.L	r4, [r5]
3007:../src/wolfcrypt/src/aes.c ****                 rk[7] = rk[3] ^ rk[6];
 7342                             		.loc 2 3007 27
 7343 0159 EC A5                   		mov.L	[r10], r5
 7344 015b 62 C5                   		add	#12, r5
 7345 015d EC 53                   		mov.L	[r5], r3
 7346                             		.loc 2 3007 35
 7347 015f EC A5                   		mov.L	[r10], r5
 7348 0161 71 55 18                		add	#24, r5
 7349 0164 EC 54                   		mov.L	[r5], r4
 7350                             		.loc 2 3007 19
 7351 0166 EC A5                   		mov.L	[r10], r5
 7352 0168 71 55 1C                		add	#28, r5
 7353                             		.loc 2 3007 31
 7354 016b FC 37 34                		xor	r3, r4
 7355                             		.loc 2 3007 23
 7356 016e E3 54                   		mov.L	r4, [r5]
3008:../src/wolfcrypt/src/aes.c ****                 if (++i == 10)
 7357                             		.loc 2 3008 20
 7358 0170 ED A5 01                		mov.L	4[r10], r5
 7359 0173 62 15                   		add	#1, r5
 7360 0175 E7 A5 01                		mov.L	r5, 4[r10]
 7361 0178 ED A5 01                		mov.L	4[r10], r5
 7362 017b 61 A5                   		cmp	#10, r5
 7363 017d 20 0C                   		beq	.L90
3009:../src/wolfcrypt/src/aes.c ****                     break;
3010:../src/wolfcrypt/src/aes.c ****                 rk += 4;
 7364                             		.loc 2 3010 20
 7365 017f EC A5                   		mov.L	[r10], r5
 7366 0181 71 55 10                		add	#16, r5
 7367 0184 E3 A5                   		mov.L	r5, [r10]
2991:../src/wolfcrypt/src/aes.c ****                 rk[4] = rk[0] ^
 7368                             		.loc 2 2991 23
 7369 0186 38 19 FF                		bra	.L75
 7370                             	.L90:
3009:../src/wolfcrypt/src/aes.c ****                     break;
 7371                             		.loc 2 3009 21
 7372 0189 03                      		nop
3011:../src/wolfcrypt/src/aes.c ****             }
3012:../src/wolfcrypt/src/aes.c ****             break;
 7373                             		.loc 2 3012 13
 7374 018a 38 DE 02                		bra	.L76
 7375                             	.L70:
3013:../src/wolfcrypt/src/aes.c ****     #endif /* 128 */
3014:../src/wolfcrypt/src/aes.c **** 
3015:../src/wolfcrypt/src/aes.c ****     #if defined(AES_MAX_KEY_SIZE) && AES_MAX_KEY_SIZE >= 192 && \
3016:../src/wolfcrypt/src/aes.c ****             defined(WOLFSSL_AES_192)
3017:../src/wolfcrypt/src/aes.c ****         case 24:
3018:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
3019:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Add("wc_AesSetKeyLocal temp", &temp, sizeof(temp));
3020:../src/wolfcrypt/src/aes.c ****         #endif
3021:../src/wolfcrypt/src/aes.c ****             /* for (;;) here triggers a bug in VC60 SP4 w/ Pro Pack */
3022:../src/wolfcrypt/src/aes.c ****             while (1)
3023:../src/wolfcrypt/src/aes.c ****             {
3024:../src/wolfcrypt/src/aes.c ****                 temp = rk[ 5];
 7376                             		.loc 2 3024 22
 7377 018d EC A5                   		mov.L	[r10], r5
 7378 018f A9 5D                   		mov.L	20[r5], r5
 7379 0191 E7 A5 04                		mov.L	r5, 16[r10]
3025:../src/wolfcrypt/src/aes.c ****                 rk[ 6] = rk[ 0] ^
 7380                             		.loc 2 3025 28
 7381 0194 EC A5                   		mov.L	[r10], r5
 7382 0196 EC 53                   		mov.L	[r5], r3
3026:../src/wolfcrypt/src/aes.c ****             #ifndef WOLFSSL_AES_SMALL_TABLES
3027:../src/wolfcrypt/src/aes.c ****                     (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
 7383                             		.loc 2 3027 28
 7384 0198 ED A5 04                		mov.L	16[r10], r5
 7385 019b 69 05                   		shlr	#16, r5
 7386 019d 5B 55                   		movu.B	r5, r5
 7387                             		.loc 2 3027 27
 7388 019f FB 42 00 00 00 00       		mov.L	#_Te, r4
 7389 01a5 72 55 00 02             		add	#0x200, r5
 7390 01a9 FE 65 45                		mov.L	[r5,r4], r5
 7391                             		.loc 2 3027 46
 7392 01ac 74 25 00 00 00 FF       		and	#-16777216, r5
3025:../src/wolfcrypt/src/aes.c ****                 rk[ 6] = rk[ 0] ^
 7393                             		.loc 2 3025 33
 7394 01b2 FC 37 53                		xor	r5, r3
3028:../src/wolfcrypt/src/aes.c ****                     (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 7395                             		.loc 2 3028 28
 7396 01b5 ED A5 04                		mov.L	16[r10], r5
 7397 01b8 68 85                   		shlr	#8, r5
 7398 01ba 5B 55                   		movu.B	r5, r5
 7399                             		.loc 2 3028 27
 7400 01bc FB 42 00 00 00 00       		mov.L	#_Te, r4
 7401 01c2 72 55 00 03             		add	#0x300, r5
 7402 01c6 FE 65 45                		mov.L	[r5,r4], r5
 7403                             		.loc 2 3028 46
 7404 01c9 74 25 00 00 FF 00       		and	#0xff0000, r5
3027:../src/wolfcrypt/src/aes.c ****                     (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 7405                             		.loc 2 3027 60
 7406 01cf FC 37 53                		xor	r5, r3
3029:../src/wolfcrypt/src/aes.c ****                     (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
 7407                             		.loc 2 3029 28
 7408 01d2 ED A5 04                		mov.L	16[r10], r5
 7409 01d5 5B 55                   		movu.B	r5, r5
 7410                             		.loc 2 3029 27
 7411 01d7 FB 42 00 00 00 00       		mov.L	#_Te, r4
 7412 01dd FE 65 45                		mov.L	[r5,r4], r5
 7413                             		.loc 2 3029 46
 7414 01e0 77 25 00 FF 00          		and	#0xff00, r5
3028:../src/wolfcrypt/src/aes.c ****                     (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 7415                             		.loc 2 3028 60
 7416 01e5 FC 37 53                		xor	r5, r3
3030:../src/wolfcrypt/src/aes.c ****                     (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
 7417                             		.loc 2 3030 28
 7418 01e8 ED A5 04                		mov.L	16[r10], r5
 7419 01eb 69 85                   		shlr	#24, r5
 7420 01ed 5B 55                   		movu.B	r5, r5
 7421                             		.loc 2 3030 27
 7422 01ef FB 42 00 00 00 00       		mov.L	#_Te, r4
 7423 01f5 72 55 00 01             		add	#0x100, r5
 7424 01f9 FE 65 45                		mov.L	[r5,r4], r5
 7425                             		.loc 2 3030 46
 7426 01fc 76 25 FF 00             		and	#0xff, r5
3029:../src/wolfcrypt/src/aes.c ****                     (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
 7427                             		.loc 2 3029 60
 7428 0200 FC 37 53                		xor	r5, r3
3031:../src/wolfcrypt/src/aes.c ****             #else
3032:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 2)] << 24) ^
3033:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 1)] << 16) ^
3034:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 0)] <<  8) ^
3035:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 3)]) ^
3036:../src/wolfcrypt/src/aes.c ****             #endif
3037:../src/wolfcrypt/src/aes.c ****                     rcon[i];
 7429                             		.loc 2 3037 25
 7430 0203 FB 52 00 00 00 00       		mov.L	#_rcon, r5
 7431 0209 ED A4 01                		mov.L	4[r10], r4
 7432 020c FE 64 54                		mov.L	[r4,r5], r4
3025:../src/wolfcrypt/src/aes.c ****             #ifndef WOLFSSL_AES_SMALL_TABLES
 7433                             		.loc 2 3025 19
 7434 020f EC A5                   		mov.L	[r10], r5
 7435 0211 71 55 18                		add	#24, r5
3030:../src/wolfcrypt/src/aes.c ****                     (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
 7436                             		.loc 2 3030 60
 7437 0214 FC 37 34                		xor	r3, r4
3025:../src/wolfcrypt/src/aes.c ****             #ifndef WOLFSSL_AES_SMALL_TABLES
 7438                             		.loc 2 3025 24
 7439 0217 E3 54                   		mov.L	r4, [r5]
3038:../src/wolfcrypt/src/aes.c ****                 rk[ 7] = rk[ 1] ^ rk[ 6];
 7440                             		.loc 2 3038 28
 7441 0219 EC A5                   		mov.L	[r10], r5
 7442 021b 62 45                   		add	#4, r5
 7443 021d EC 53                   		mov.L	[r5], r3
 7444                             		.loc 2 3038 37
 7445 021f EC A5                   		mov.L	[r10], r5
 7446 0221 71 55 18                		add	#24, r5
 7447 0224 EC 54                   		mov.L	[r5], r4
 7448                             		.loc 2 3038 19
 7449 0226 EC A5                   		mov.L	[r10], r5
 7450 0228 71 55 1C                		add	#28, r5
 7451                             		.loc 2 3038 33
 7452 022b FC 37 34                		xor	r3, r4
 7453                             		.loc 2 3038 24
 7454 022e E3 54                   		mov.L	r4, [r5]
3039:../src/wolfcrypt/src/aes.c ****                 rk[ 8] = rk[ 2] ^ rk[ 7];
 7455                             		.loc 2 3039 28
 7456 0230 EC A5                   		mov.L	[r10], r5
 7457 0232 62 85                   		add	#8, r5
 7458 0234 EC 53                   		mov.L	[r5], r3
 7459                             		.loc 2 3039 37
 7460 0236 EC A5                   		mov.L	[r10], r5
 7461 0238 71 55 1C                		add	#28, r5
 7462 023b EC 54                   		mov.L	[r5], r4
 7463                             		.loc 2 3039 19
 7464 023d EC A5                   		mov.L	[r10], r5
 7465 023f 71 55 20                		add	#32, r5
 7466                             		.loc 2 3039 33
 7467 0242 FC 37 34                		xor	r3, r4
 7468                             		.loc 2 3039 24
 7469 0245 E3 54                   		mov.L	r4, [r5]
3040:../src/wolfcrypt/src/aes.c ****                 rk[ 9] = rk[ 3] ^ rk[ 8];
 7470                             		.loc 2 3040 28
 7471 0247 EC A5                   		mov.L	[r10], r5
 7472 0249 62 C5                   		add	#12, r5
 7473 024b EC 53                   		mov.L	[r5], r3
 7474                             		.loc 2 3040 37
 7475 024d EC A5                   		mov.L	[r10], r5
 7476 024f 71 55 20                		add	#32, r5
 7477 0252 EC 54                   		mov.L	[r5], r4
 7478                             		.loc 2 3040 19
 7479 0254 EC A5                   		mov.L	[r10], r5
 7480 0256 71 55 24                		add	#36, r5
 7481                             		.loc 2 3040 33
 7482 0259 FC 37 34                		xor	r3, r4
 7483                             		.loc 2 3040 24
 7484 025c E3 54                   		mov.L	r4, [r5]
3041:../src/wolfcrypt/src/aes.c ****                 if (++i == 8)
 7485                             		.loc 2 3041 20
 7486 025e ED A5 01                		mov.L	4[r10], r5
 7487 0261 62 15                   		add	#1, r5
 7488 0263 E7 A5 01                		mov.L	r5, 4[r10]
 7489 0266 ED A5 01                		mov.L	4[r10], r5
 7490 0269 61 85                   		cmp	#8, r5
 7491 026b 20 3C                   		beq	.L91
3042:../src/wolfcrypt/src/aes.c ****                     break;
3043:../src/wolfcrypt/src/aes.c ****                 rk[10] = rk[ 4] ^ rk[ 9];
 7492                             		.loc 2 3043 28
 7493 026d EC A5                   		mov.L	[r10], r5
 7494 026f 71 55 10                		add	#16, r5
 7495 0272 EC 53                   		mov.L	[r5], r3
 7496                             		.loc 2 3043 37
 7497 0274 EC A5                   		mov.L	[r10], r5
 7498 0276 71 55 24                		add	#36, r5
 7499 0279 EC 54                   		mov.L	[r5], r4
 7500                             		.loc 2 3043 19
 7501 027b EC A5                   		mov.L	[r10], r5
 7502 027d 71 55 28                		add	#40, r5
 7503                             		.loc 2 3043 33
 7504 0280 FC 37 34                		xor	r3, r4
 7505                             		.loc 2 3043 24
 7506 0283 E3 54                   		mov.L	r4, [r5]
3044:../src/wolfcrypt/src/aes.c ****                 rk[11] = rk[ 5] ^ rk[10];
 7507                             		.loc 2 3044 28
 7508 0285 EC A5                   		mov.L	[r10], r5
 7509 0287 71 55 14                		add	#20, r5
 7510 028a EC 53                   		mov.L	[r5], r3
 7511                             		.loc 2 3044 37
 7512 028c EC A5                   		mov.L	[r10], r5
 7513 028e 71 55 28                		add	#40, r5
 7514 0291 EC 54                   		mov.L	[r5], r4
 7515                             		.loc 2 3044 19
 7516 0293 EC A5                   		mov.L	[r10], r5
 7517 0295 71 55 2C                		add	#44, r5
 7518                             		.loc 2 3044 33
 7519 0298 FC 37 34                		xor	r3, r4
 7520                             		.loc 2 3044 24
 7521 029b E3 54                   		mov.L	r4, [r5]
3045:../src/wolfcrypt/src/aes.c ****                 rk += 6;
 7522                             		.loc 2 3045 20
 7523 029d EC A5                   		mov.L	[r10], r5
 7524 029f 71 55 18                		add	#24, r5
 7525 02a2 E3 A5                   		mov.L	r5, [r10]
3024:../src/wolfcrypt/src/aes.c ****                 rk[ 6] = rk[ 0] ^
 7526                             		.loc 2 3024 22
 7527 02a4 38 E9 FE                		bra	.L70
 7528                             	.L91:
3042:../src/wolfcrypt/src/aes.c ****                 rk[10] = rk[ 4] ^ rk[ 9];
 7529                             		.loc 2 3042 21
 7530 02a7 03                      		nop
3046:../src/wolfcrypt/src/aes.c ****             }
3047:../src/wolfcrypt/src/aes.c ****             break;
 7531                             		.loc 2 3047 13
 7532 02a8 38 C0 01                		bra	.L76
 7533                             	.L71:
3048:../src/wolfcrypt/src/aes.c ****     #endif /* 192 */
3049:../src/wolfcrypt/src/aes.c **** 
3050:../src/wolfcrypt/src/aes.c ****     #if defined(AES_MAX_KEY_SIZE) && AES_MAX_KEY_SIZE >= 256 && \
3051:../src/wolfcrypt/src/aes.c ****             defined(WOLFSSL_AES_256)
3052:../src/wolfcrypt/src/aes.c ****         case 32:
3053:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
3054:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Add("wc_AesSetKeyLocal temp", &temp, sizeof(temp));
3055:../src/wolfcrypt/src/aes.c ****         #endif
3056:../src/wolfcrypt/src/aes.c ****             while (1)
3057:../src/wolfcrypt/src/aes.c ****             {
3058:../src/wolfcrypt/src/aes.c ****                 temp = rk[ 7];
 7534                             		.loc 2 3058 22
 7535 02ab EC A5                   		mov.L	[r10], r5
 7536 02ad A9 DD                   		mov.L	28[r5], r5
 7537 02af E7 A5 04                		mov.L	r5, 16[r10]
3059:../src/wolfcrypt/src/aes.c ****                 rk[ 8] = rk[ 0] ^
 7538                             		.loc 2 3059 28
 7539 02b2 EC A5                   		mov.L	[r10], r5
 7540 02b4 EC 53                   		mov.L	[r5], r3
3060:../src/wolfcrypt/src/aes.c ****             #ifndef WOLFSSL_AES_SMALL_TABLES
3061:../src/wolfcrypt/src/aes.c ****                     (Te[2][GETBYTE(temp, 2)] & 0xff000000) ^
 7541                             		.loc 2 3061 28
 7542 02b6 ED A5 04                		mov.L	16[r10], r5
 7543 02b9 69 05                   		shlr	#16, r5
 7544 02bb 5B 55                   		movu.B	r5, r5
 7545                             		.loc 2 3061 27
 7546 02bd FB 42 00 00 00 00       		mov.L	#_Te, r4
 7547 02c3 72 55 00 02             		add	#0x200, r5
 7548 02c7 FE 65 45                		mov.L	[r5,r4], r5
 7549                             		.loc 2 3061 46
 7550 02ca 74 25 00 00 00 FF       		and	#-16777216, r5
3059:../src/wolfcrypt/src/aes.c ****                 rk[ 8] = rk[ 0] ^
 7551                             		.loc 2 3059 33
 7552 02d0 FC 37 53                		xor	r5, r3
3062:../src/wolfcrypt/src/aes.c ****                     (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 7553                             		.loc 2 3062 28
 7554 02d3 ED A5 04                		mov.L	16[r10], r5
 7555 02d6 68 85                   		shlr	#8, r5
 7556 02d8 5B 55                   		movu.B	r5, r5
 7557                             		.loc 2 3062 27
 7558 02da FB 42 00 00 00 00       		mov.L	#_Te, r4
 7559 02e0 72 55 00 03             		add	#0x300, r5
 7560 02e4 FE 65 45                		mov.L	[r5,r4], r5
 7561                             		.loc 2 3062 46
 7562 02e7 74 25 00 00 FF 00       		and	#0xff0000, r5
3061:../src/wolfcrypt/src/aes.c ****                     (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 7563                             		.loc 2 3061 60
 7564 02ed FC 37 53                		xor	r5, r3
3063:../src/wolfcrypt/src/aes.c ****                     (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
 7565                             		.loc 2 3063 28
 7566 02f0 ED A5 04                		mov.L	16[r10], r5
 7567 02f3 5B 55                   		movu.B	r5, r5
 7568                             		.loc 2 3063 27
 7569 02f5 FB 42 00 00 00 00       		mov.L	#_Te, r4
 7570 02fb FE 65 45                		mov.L	[r5,r4], r5
 7571                             		.loc 2 3063 46
 7572 02fe 77 25 00 FF 00          		and	#0xff00, r5
3062:../src/wolfcrypt/src/aes.c ****                     (Te[3][GETBYTE(temp, 1)] & 0x00ff0000) ^
 7573                             		.loc 2 3062 60
 7574 0303 FC 37 53                		xor	r5, r3
3064:../src/wolfcrypt/src/aes.c ****                     (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
 7575                             		.loc 2 3064 28
 7576 0306 ED A5 04                		mov.L	16[r10], r5
 7577 0309 69 85                   		shlr	#24, r5
 7578 030b 5B 55                   		movu.B	r5, r5
 7579                             		.loc 2 3064 27
 7580 030d FB 42 00 00 00 00       		mov.L	#_Te, r4
 7581 0313 72 55 00 01             		add	#0x100, r5
 7582 0317 FE 65 45                		mov.L	[r5,r4], r5
 7583                             		.loc 2 3064 46
 7584 031a 76 25 FF 00             		and	#0xff, r5
3063:../src/wolfcrypt/src/aes.c ****                     (Te[0][GETBYTE(temp, 0)] & 0x0000ff00) ^
 7585                             		.loc 2 3063 60
 7586 031e FC 37 53                		xor	r5, r3
3065:../src/wolfcrypt/src/aes.c ****             #else
3066:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 2)] << 24) ^
3067:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 1)] << 16) ^
3068:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 0)] <<  8) ^
3069:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 3)]) ^
3070:../src/wolfcrypt/src/aes.c ****             #endif
3071:../src/wolfcrypt/src/aes.c ****                     rcon[i];
 7587                             		.loc 2 3071 25
 7588 0321 FB 52 00 00 00 00       		mov.L	#_rcon, r5
 7589 0327 ED A4 01                		mov.L	4[r10], r4
 7590 032a FE 64 54                		mov.L	[r4,r5], r4
3059:../src/wolfcrypt/src/aes.c ****             #ifndef WOLFSSL_AES_SMALL_TABLES
 7591                             		.loc 2 3059 19
 7592 032d EC A5                   		mov.L	[r10], r5
 7593 032f 71 55 20                		add	#32, r5
3064:../src/wolfcrypt/src/aes.c ****                     (Te[1][GETBYTE(temp, 3)] & 0x000000ff) ^
 7594                             		.loc 2 3064 60
 7595 0332 FC 37 34                		xor	r3, r4
3059:../src/wolfcrypt/src/aes.c ****             #ifndef WOLFSSL_AES_SMALL_TABLES
 7596                             		.loc 2 3059 24
 7597 0335 E3 54                   		mov.L	r4, [r5]
3072:../src/wolfcrypt/src/aes.c ****                 rk[ 9] = rk[ 1] ^ rk[ 8];
 7598                             		.loc 2 3072 28
 7599 0337 EC A5                   		mov.L	[r10], r5
 7600 0339 62 45                   		add	#4, r5
 7601 033b EC 53                   		mov.L	[r5], r3
 7602                             		.loc 2 3072 37
 7603 033d EC A5                   		mov.L	[r10], r5
 7604 033f 71 55 20                		add	#32, r5
 7605 0342 EC 54                   		mov.L	[r5], r4
 7606                             		.loc 2 3072 19
 7607 0344 EC A5                   		mov.L	[r10], r5
 7608 0346 71 55 24                		add	#36, r5
 7609                             		.loc 2 3072 33
 7610 0349 FC 37 34                		xor	r3, r4
 7611                             		.loc 2 3072 24
 7612 034c E3 54                   		mov.L	r4, [r5]
3073:../src/wolfcrypt/src/aes.c ****                 rk[10] = rk[ 2] ^ rk[ 9];
 7613                             		.loc 2 3073 28
 7614 034e EC A5                   		mov.L	[r10], r5
 7615 0350 62 85                   		add	#8, r5
 7616 0352 EC 53                   		mov.L	[r5], r3
 7617                             		.loc 2 3073 37
 7618 0354 EC A5                   		mov.L	[r10], r5
 7619 0356 71 55 24                		add	#36, r5
 7620 0359 EC 54                   		mov.L	[r5], r4
 7621                             		.loc 2 3073 19
 7622 035b EC A5                   		mov.L	[r10], r5
 7623 035d 71 55 28                		add	#40, r5
 7624                             		.loc 2 3073 33
 7625 0360 FC 37 34                		xor	r3, r4
 7626                             		.loc 2 3073 24
 7627 0363 E3 54                   		mov.L	r4, [r5]
3074:../src/wolfcrypt/src/aes.c ****                 rk[11] = rk[ 3] ^ rk[10];
 7628                             		.loc 2 3074 28
 7629 0365 EC A5                   		mov.L	[r10], r5
 7630 0367 62 C5                   		add	#12, r5
 7631 0369 EC 53                   		mov.L	[r5], r3
 7632                             		.loc 2 3074 37
 7633 036b EC A5                   		mov.L	[r10], r5
 7634 036d 71 55 28                		add	#40, r5
 7635 0370 EC 54                   		mov.L	[r5], r4
 7636                             		.loc 2 3074 19
 7637 0372 EC A5                   		mov.L	[r10], r5
 7638 0374 71 55 2C                		add	#44, r5
 7639                             		.loc 2 3074 33
 7640 0377 FC 37 34                		xor	r3, r4
 7641                             		.loc 2 3074 24
 7642 037a E3 54                   		mov.L	r4, [r5]
3075:../src/wolfcrypt/src/aes.c ****                 if (++i == 7)
 7643                             		.loc 2 3075 20
 7644 037c ED A5 01                		mov.L	4[r10], r5
 7645 037f 62 15                   		add	#1, r5
 7646 0381 E7 A5 01                		mov.L	r5, 4[r10]
 7647 0384 ED A5 01                		mov.L	4[r10], r5
 7648 0387 61 75                   		cmp	#7, r5
 7649 0389 3A D6 00                		beq	.L92
3076:../src/wolfcrypt/src/aes.c ****                     break;
3077:../src/wolfcrypt/src/aes.c ****                 temp = rk[11];
 7650                             		.loc 2 3077 22
 7651 038c EC A5                   		mov.L	[r10], r5
 7652 038e AA DD                   		mov.L	44[r5], r5
 7653 0390 E7 A5 04                		mov.L	r5, 16[r10]
3078:../src/wolfcrypt/src/aes.c ****                 rk[12] = rk[ 4] ^
 7654                             		.loc 2 3078 28
 7655 0393 EC A5                   		mov.L	[r10], r5
 7656 0395 71 55 10                		add	#16, r5
 7657 0398 EC 53                   		mov.L	[r5], r3
3079:../src/wolfcrypt/src/aes.c ****             #ifndef WOLFSSL_AES_SMALL_TABLES
3080:../src/wolfcrypt/src/aes.c ****                     (Te[2][GETBYTE(temp, 3)] & 0xff000000) ^
 7658                             		.loc 2 3080 28
 7659 039a ED A5 04                		mov.L	16[r10], r5
 7660 039d 69 85                   		shlr	#24, r5
 7661 039f 5B 55                   		movu.B	r5, r5
 7662                             		.loc 2 3080 27
 7663 03a1 FB 42 00 00 00 00       		mov.L	#_Te, r4
 7664 03a7 72 55 00 02             		add	#0x200, r5
 7665 03ab FE 65 45                		mov.L	[r5,r4], r5
 7666                             		.loc 2 3080 46
 7667 03ae 74 25 00 00 00 FF       		and	#-16777216, r5
3078:../src/wolfcrypt/src/aes.c ****                 rk[12] = rk[ 4] ^
 7668                             		.loc 2 3078 33
 7669 03b4 FC 37 53                		xor	r5, r3
3081:../src/wolfcrypt/src/aes.c ****                     (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
 7670                             		.loc 2 3081 28
 7671 03b7 ED A5 04                		mov.L	16[r10], r5
 7672 03ba 69 05                   		shlr	#16, r5
 7673 03bc 5B 55                   		movu.B	r5, r5
 7674                             		.loc 2 3081 27
 7675 03be FB 42 00 00 00 00       		mov.L	#_Te, r4
 7676 03c4 72 55 00 03             		add	#0x300, r5
 7677 03c8 FE 65 45                		mov.L	[r5,r4], r5
 7678                             		.loc 2 3081 46
 7679 03cb 74 25 00 00 FF 00       		and	#0xff0000, r5
3080:../src/wolfcrypt/src/aes.c ****                     (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
 7680                             		.loc 2 3080 60
 7681 03d1 FC 37 53                		xor	r5, r3
3082:../src/wolfcrypt/src/aes.c ****                     (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
 7682                             		.loc 2 3082 28
 7683 03d4 ED A5 04                		mov.L	16[r10], r5
 7684 03d7 68 85                   		shlr	#8, r5
 7685 03d9 5B 55                   		movu.B	r5, r5
 7686                             		.loc 2 3082 27
 7687 03db FB 42 00 00 00 00       		mov.L	#_Te, r4
 7688 03e1 FE 65 45                		mov.L	[r5,r4], r5
 7689                             		.loc 2 3082 46
 7690 03e4 77 25 00 FF 00          		and	#0xff00, r5
3081:../src/wolfcrypt/src/aes.c ****                     (Te[3][GETBYTE(temp, 2)] & 0x00ff0000) ^
 7691                             		.loc 2 3081 60
 7692 03e9 FC 37 53                		xor	r5, r3
3083:../src/wolfcrypt/src/aes.c ****                     (Te[1][GETBYTE(temp, 0)] & 0x000000ff);
 7693                             		.loc 2 3083 28
 7694 03ec ED A5 04                		mov.L	16[r10], r5
 7695 03ef 5B 55                   		movu.B	r5, r5
 7696                             		.loc 2 3083 27
 7697 03f1 FB 42 00 00 00 00       		mov.L	#_Te, r4
 7698 03f7 72 55 00 01             		add	#0x100, r5
 7699 03fb FE 65 45                		mov.L	[r5,r4], r5
 7700                             		.loc 2 3083 46
 7701 03fe 75 44 FF                		mov.L	#0xff, r4
 7702 0401 53 54                   		and	r5, r4
3078:../src/wolfcrypt/src/aes.c ****             #ifndef WOLFSSL_AES_SMALL_TABLES
 7703                             		.loc 2 3078 19
 7704 0403 EC A5                   		mov.L	[r10], r5
 7705 0405 71 55 30                		add	#48, r5
3082:../src/wolfcrypt/src/aes.c ****                     (Te[0][GETBYTE(temp, 1)] & 0x0000ff00) ^
 7706                             		.loc 2 3082 60
 7707 0408 FC 37 34                		xor	r3, r4
3078:../src/wolfcrypt/src/aes.c ****             #ifndef WOLFSSL_AES_SMALL_TABLES
 7708                             		.loc 2 3078 24
 7709 040b E3 54                   		mov.L	r4, [r5]
3084:../src/wolfcrypt/src/aes.c ****             #else
3085:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 3)] << 24) ^
3086:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 2)] << 16) ^
3087:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 1)] <<  8) ^
3088:../src/wolfcrypt/src/aes.c ****                     ((word32)Tsbox[GETBYTE(temp, 0)]);
3089:../src/wolfcrypt/src/aes.c ****             #endif
3090:../src/wolfcrypt/src/aes.c ****                 rk[13] = rk[ 5] ^ rk[12];
 7710                             		.loc 2 3090 28
 7711 040d EC A5                   		mov.L	[r10], r5
 7712 040f 71 55 14                		add	#20, r5
 7713 0412 EC 53                   		mov.L	[r5], r3
 7714                             		.loc 2 3090 37
 7715 0414 EC A5                   		mov.L	[r10], r5
 7716 0416 71 55 30                		add	#48, r5
 7717 0419 EC 54                   		mov.L	[r5], r4
 7718                             		.loc 2 3090 19
 7719 041b EC A5                   		mov.L	[r10], r5
 7720 041d 71 55 34                		add	#52, r5
 7721                             		.loc 2 3090 33
 7722 0420 FC 37 34                		xor	r3, r4
 7723                             		.loc 2 3090 24
 7724 0423 E3 54                   		mov.L	r4, [r5]
3091:../src/wolfcrypt/src/aes.c ****                 rk[14] = rk[ 6] ^ rk[13];
 7725                             		.loc 2 3091 28
 7726 0425 EC A5                   		mov.L	[r10], r5
 7727 0427 71 55 18                		add	#24, r5
 7728 042a EC 53                   		mov.L	[r5], r3
 7729                             		.loc 2 3091 37
 7730 042c EC A5                   		mov.L	[r10], r5
 7731 042e 71 55 34                		add	#52, r5
 7732 0431 EC 54                   		mov.L	[r5], r4
 7733                             		.loc 2 3091 19
 7734 0433 EC A5                   		mov.L	[r10], r5
 7735 0435 71 55 38                		add	#56, r5
 7736                             		.loc 2 3091 33
 7737 0438 FC 37 34                		xor	r3, r4
 7738                             		.loc 2 3091 24
 7739 043b E3 54                   		mov.L	r4, [r5]
3092:../src/wolfcrypt/src/aes.c ****                 rk[15] = rk[ 7] ^ rk[14];
 7740                             		.loc 2 3092 28
 7741 043d EC A5                   		mov.L	[r10], r5
 7742 043f 71 55 1C                		add	#28, r5
 7743 0442 EC 53                   		mov.L	[r5], r3
 7744                             		.loc 2 3092 37
 7745 0444 EC A5                   		mov.L	[r10], r5
 7746 0446 71 55 38                		add	#56, r5
 7747 0449 EC 54                   		mov.L	[r5], r4
 7748                             		.loc 2 3092 19
 7749 044b EC A5                   		mov.L	[r10], r5
 7750 044d 71 55 3C                		add	#60, r5
 7751                             		.loc 2 3092 33
 7752 0450 FC 37 34                		xor	r3, r4
 7753                             		.loc 2 3092 24
 7754 0453 E3 54                   		mov.L	r4, [r5]
3093:../src/wolfcrypt/src/aes.c **** 
3094:../src/wolfcrypt/src/aes.c ****                 rk += 8;
 7755                             		.loc 2 3094 20
 7756 0455 EC A5                   		mov.L	[r10], r5
 7757 0457 71 55 20                		add	#32, r5
 7758 045a E3 A5                   		mov.L	r5, [r10]
3058:../src/wolfcrypt/src/aes.c ****                 rk[ 8] = rk[ 0] ^
 7759                             		.loc 2 3058 22
 7760 045c 38 4F FE                		bra	.L71
 7761                             	.L92:
3076:../src/wolfcrypt/src/aes.c ****                 temp = rk[11];
 7762                             		.loc 2 3076 21
 7763 045f 03                      		nop
3095:../src/wolfcrypt/src/aes.c ****             }
3096:../src/wolfcrypt/src/aes.c ****             break;
 7764                             		.loc 2 3096 13
 7765 0460 08                      		bra	.L76
 7766                             	.L72:
3097:../src/wolfcrypt/src/aes.c ****     #endif /* 256 */
3098:../src/wolfcrypt/src/aes.c **** 
3099:../src/wolfcrypt/src/aes.c ****         default:
3100:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
 7767                             		.loc 2 3100 20
 7768 0461 FB 5A 53 FF             		mov.L	#-173, r5
 7769 0465 38 06 04                		bra	.L86
 7770                             	.L76:
3101:../src/wolfcrypt/src/aes.c ****         } /* switch */
3102:../src/wolfcrypt/src/aes.c ****         ForceZero(&temp, sizeof(temp));
 7771                             		.loc 2 3102 9
 7772 0468 71 A5 10                		add	#16, r10, r5
 7773 046b 66 42                   		mov.L	#4, r2
 7774 046d EF 51                   		mov.L	r5, r1
 7775 046f 05 00 00 00             		bsr	_ForceZero
3103:../src/wolfcrypt/src/aes.c **** 
3104:../src/wolfcrypt/src/aes.c ****     #if defined(HAVE_AES_DECRYPT)
3105:../src/wolfcrypt/src/aes.c ****         if (dir == AES_DECRYPTION) {
 7776                             		.loc 2 3105 12
 7777 0473 EC 65                   		mov.L	[r6], r5
 7778 0475 61 15                   		cmp	#1, r5
 7779 0477 3B E4 03                		bne	.L81
 7780                             	.LBB4:
3106:../src/wolfcrypt/src/aes.c ****             unsigned int j;
3107:../src/wolfcrypt/src/aes.c ****             rk = aes->key;
 7781                             		.loc 2 3107 16
 7782 047a ED A5 05                		mov.L	20[r10], r5
 7783 047d E3 A5                   		mov.L	r5, [r10]
3108:../src/wolfcrypt/src/aes.c **** 
3109:../src/wolfcrypt/src/aes.c ****             /* invert the order of the round keys: */
3110:../src/wolfcrypt/src/aes.c ****             for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 7784                             		.loc 2 3110 20
 7785 047f F9 A6 01 00             		mov.L	#0, 4[r10]
 7786                             		.loc 2 3110 35
 7787 0483 ED A5 05                		mov.L	20[r10], r5
 7788 0486 ED 55 3C                		mov.L	240[r5], r5
 7789                             		.loc 2 3110 27
 7790 0489 6C 25                   		shll	#2, r5
 7791 048b E7 A5 02                		mov.L	r5, 8[r10]
 7792                             		.loc 2 3110 13
 7793 048e 38 F3 00                		bra	.L82
 7794                             	.L83:
3111:../src/wolfcrypt/src/aes.c ****                 temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
 7795                             		.loc 2 3111 26 discriminator 3
 7796 0491 ED A5 01                		mov.L	4[r10], r5
 7797 0494 6C 25                   		shll	#2, r5
 7798 0496 EC A4                   		mov.L	[r10], r4
 7799 0498 4B 45                   		add	r4, r5
 7800 049a EC 55                   		mov.L	[r5], r5
 7801                             		.loc 2 3111 22 discriminator 3
 7802 049c E7 A5 04                		mov.L	r5, 16[r10]
 7803                             		.loc 2 3111 49 discriminator 3
 7804 049f ED A5 02                		mov.L	8[r10], r5
 7805 04a2 6C 25                   		shll	#2, r5
 7806 04a4 EC A4                   		mov.L	[r10], r4
 7807 04a6 4B 54                   		add	r5, r4
 7808                             		.loc 2 3111 37 discriminator 3
 7809 04a8 ED A5 01                		mov.L	4[r10], r5
 7810 04ab 6C 25                   		shll	#2, r5
 7811 04ad EC A3                   		mov.L	[r10], r3
 7812 04af 4B 35                   		add	r3, r5
 7813                             		.loc 2 3111 49 discriminator 3
 7814 04b1 EC 44                   		mov.L	[r4], r4
 7815                             		.loc 2 3111 45 discriminator 3
 7816 04b3 E3 54                   		mov.L	r4, [r5]
 7817                             		.loc 2 3111 60 discriminator 3
 7818 04b5 ED A5 02                		mov.L	8[r10], r5
 7819 04b8 6C 25                   		shll	#2, r5
 7820 04ba EC A4                   		mov.L	[r10], r4
 7821 04bc 4B 45                   		add	r4, r5
 7822                             		.loc 2 3111 68 discriminator 3
 7823 04be ED A4 04                		mov.L	16[r10], r4
 7824 04c1 E3 54                   		mov.L	r4, [r5]
3112:../src/wolfcrypt/src/aes.c ****                 temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
 7825                             		.loc 2 3112 26 discriminator 3
 7826 04c3 ED A5 01                		mov.L	4[r10], r5
 7827 04c6 62 15                   		add	#1, r5
 7828 04c8 6C 25                   		shll	#2, r5
 7829 04ca EC A4                   		mov.L	[r10], r4
 7830 04cc 4B 45                   		add	r4, r5
 7831 04ce EC 55                   		mov.L	[r5], r5
 7832                             		.loc 2 3112 22 discriminator 3
 7833 04d0 E7 A5 04                		mov.L	r5, 16[r10]
 7834                             		.loc 2 3112 49 discriminator 3
 7835 04d3 ED A5 02                		mov.L	8[r10], r5
 7836 04d6 62 15                   		add	#1, r5
 7837 04d8 6C 25                   		shll	#2, r5
 7838 04da EC A4                   		mov.L	[r10], r4
 7839 04dc 4B 54                   		add	r5, r4
 7840                             		.loc 2 3112 37 discriminator 3
 7841 04de ED A5 01                		mov.L	4[r10], r5
 7842 04e1 62 15                   		add	#1, r5
 7843 04e3 6C 25                   		shll	#2, r5
 7844 04e5 EC A3                   		mov.L	[r10], r3
 7845 04e7 4B 35                   		add	r3, r5
 7846                             		.loc 2 3112 49 discriminator 3
 7847 04e9 EC 44                   		mov.L	[r4], r4
 7848                             		.loc 2 3112 45 discriminator 3
 7849 04eb E3 54                   		mov.L	r4, [r5]
 7850                             		.loc 2 3112 60 discriminator 3
 7851 04ed ED A5 02                		mov.L	8[r10], r5
 7852 04f0 62 15                   		add	#1, r5
 7853 04f2 6C 25                   		shll	#2, r5
 7854 04f4 EC A4                   		mov.L	[r10], r4
 7855 04f6 4B 45                   		add	r4, r5
 7856                             		.loc 2 3112 68 discriminator 3
 7857 04f8 ED A4 04                		mov.L	16[r10], r4
 7858 04fb E3 54                   		mov.L	r4, [r5]
3113:../src/wolfcrypt/src/aes.c ****                 temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
 7859                             		.loc 2 3113 26 discriminator 3
 7860 04fd ED A5 01                		mov.L	4[r10], r5
 7861 0500 62 25                   		add	#2, r5
 7862 0502 6C 25                   		shll	#2, r5
 7863 0504 EC A4                   		mov.L	[r10], r4
 7864 0506 4B 45                   		add	r4, r5
 7865 0508 EC 55                   		mov.L	[r5], r5
 7866                             		.loc 2 3113 22 discriminator 3
 7867 050a E7 A5 04                		mov.L	r5, 16[r10]
 7868                             		.loc 2 3113 49 discriminator 3
 7869 050d ED A5 02                		mov.L	8[r10], r5
 7870 0510 62 25                   		add	#2, r5
 7871 0512 6C 25                   		shll	#2, r5
 7872 0514 EC A4                   		mov.L	[r10], r4
 7873 0516 4B 54                   		add	r5, r4
 7874                             		.loc 2 3113 37 discriminator 3
 7875 0518 ED A5 01                		mov.L	4[r10], r5
 7876 051b 62 25                   		add	#2, r5
 7877 051d 6C 25                   		shll	#2, r5
 7878 051f EC A3                   		mov.L	[r10], r3
 7879 0521 4B 35                   		add	r3, r5
 7880                             		.loc 2 3113 49 discriminator 3
 7881 0523 EC 44                   		mov.L	[r4], r4
 7882                             		.loc 2 3113 45 discriminator 3
 7883 0525 E3 54                   		mov.L	r4, [r5]
 7884                             		.loc 2 3113 60 discriminator 3
 7885 0527 ED A5 02                		mov.L	8[r10], r5
 7886 052a 62 25                   		add	#2, r5
 7887 052c 6C 25                   		shll	#2, r5
 7888 052e EC A4                   		mov.L	[r10], r4
 7889 0530 4B 45                   		add	r4, r5
 7890                             		.loc 2 3113 68 discriminator 3
 7891 0532 ED A4 04                		mov.L	16[r10], r4
 7892 0535 E3 54                   		mov.L	r4, [r5]
3114:../src/wolfcrypt/src/aes.c ****                 temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
 7893                             		.loc 2 3114 26 discriminator 3
 7894 0537 ED A5 01                		mov.L	4[r10], r5
 7895 053a 62 35                   		add	#3, r5
 7896 053c 6C 25                   		shll	#2, r5
 7897 053e EC A4                   		mov.L	[r10], r4
 7898 0540 4B 45                   		add	r4, r5
 7899 0542 EC 55                   		mov.L	[r5], r5
 7900                             		.loc 2 3114 22 discriminator 3
 7901 0544 E7 A5 04                		mov.L	r5, 16[r10]
 7902                             		.loc 2 3114 49 discriminator 3
 7903 0547 ED A5 02                		mov.L	8[r10], r5
 7904 054a 62 35                   		add	#3, r5
 7905 054c 6C 25                   		shll	#2, r5
 7906 054e EC A4                   		mov.L	[r10], r4
 7907 0550 4B 54                   		add	r5, r4
 7908                             		.loc 2 3114 37 discriminator 3
 7909 0552 ED A5 01                		mov.L	4[r10], r5
 7910 0555 62 35                   		add	#3, r5
 7911 0557 6C 25                   		shll	#2, r5
 7912 0559 EC A3                   		mov.L	[r10], r3
 7913 055b 4B 35                   		add	r3, r5
 7914                             		.loc 2 3114 49 discriminator 3
 7915 055d EC 44                   		mov.L	[r4], r4
 7916                             		.loc 2 3114 45 discriminator 3
 7917 055f E3 54                   		mov.L	r4, [r5]
 7918                             		.loc 2 3114 60 discriminator 3
 7919 0561 ED A5 02                		mov.L	8[r10], r5
 7920 0564 62 35                   		add	#3, r5
 7921 0566 6C 25                   		shll	#2, r5
 7922 0568 EC A4                   		mov.L	[r10], r4
 7923 056a 4B 45                   		add	r4, r5
 7924                             		.loc 2 3114 68 discriminator 3
 7925 056c ED A4 04                		mov.L	16[r10], r4
 7926 056f E3 54                   		mov.L	r4, [r5]
3110:../src/wolfcrypt/src/aes.c ****                 temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
 7927                             		.loc 2 3110 54 discriminator 3
 7928 0571 ED A5 01                		mov.L	4[r10], r5
 7929 0574 62 45                   		add	#4, r5
 7930 0576 E7 A5 01                		mov.L	r5, 4[r10]
3110:../src/wolfcrypt/src/aes.c ****                 temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
 7931                             		.loc 2 3110 62 discriminator 3
 7932 0579 ED A5 02                		mov.L	8[r10], r5
 7933 057c 60 45                   		sub	#4, r5
 7934 057e E7 A5 02                		mov.L	r5, 8[r10]
 7935                             	.L82:
3110:../src/wolfcrypt/src/aes.c ****                 temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
 7936                             		.loc 2 3110 13 discriminator 1
 7937 0581 ED A4 01                		mov.L	4[r10], r4
 7938 0584 ED A5 02                		mov.L	8[r10], r5
 7939 0587 47 54                   		cmp	r5, r4
 7940 0589 22 05 38 06 FF          		bltu	.L83
3115:../src/wolfcrypt/src/aes.c ****             }
3116:../src/wolfcrypt/src/aes.c ****             ForceZero(&temp, sizeof(temp));
 7941                             		.loc 2 3116 13
 7942 058e 71 A5 10                		add	#16, r10, r5
 7943 0591 66 42                   		mov.L	#4, r2
 7944 0593 EF 51                   		mov.L	r5, r1
 7945 0595 05 00 00 00             		bsr	_ForceZero
3117:../src/wolfcrypt/src/aes.c ****         #if !defined(WOLFSSL_AES_SMALL_TABLES)
3118:../src/wolfcrypt/src/aes.c ****             /* apply the inverse MixColumn transform to all round keys but the
3119:../src/wolfcrypt/src/aes.c ****                first and the last: */
3120:../src/wolfcrypt/src/aes.c ****             for (i = 1; i < aes->rounds; i++) {
 7946                             		.loc 2 3120 20
 7947 0599 F9 A6 01 01             		mov.L	#1, 4[r10]
 7948                             		.loc 2 3120 13
 7949 059d 38 AE 02                		bra	.L84
 7950                             	.L85:
3121:../src/wolfcrypt/src/aes.c ****                 rk += 4;
 7951                             		.loc 2 3121 20 discriminator 3
 7952 05a0 EC A5                   		mov.L	[r10], r5
 7953 05a2 71 55 10                		add	#16, r5
 7954 05a5 E3 A5                   		mov.L	r5, [r10]
3122:../src/wolfcrypt/src/aes.c ****                 rk[0] =
3123:../src/wolfcrypt/src/aes.c ****                     Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
 7955                             		.loc 2 3123 33 discriminator 3
 7956 05a7 EC A5                   		mov.L	[r10], r5
 7957 05a9 EC 55                   		mov.L	[r5], r5
 7958 05ab 69 85                   		shlr	#24, r5
 7959 05ad 5B 55                   		movu.B	r5, r5
 7960                             		.loc 2 3123 32 discriminator 3
 7961 05af FB 42 00 00 00 00       		mov.L	#_Te, r4
 7962 05b5 72 55 00 01             		add	#0x100, r5
 7963 05b9 FE 65 45                		mov.L	[r5,r4], r5
 7964                             		.loc 2 3123 52 discriminator 3
 7965 05bc 76 25 FF 00             		and	#0xff, r5
 7966                             		.loc 2 3123 26 discriminator 3
 7967 05c0 FB 42 00 00 00 00       		mov.L	#_Td, r4
 7968 05c6 FE 65 43                		mov.L	[r5,r4], r3
3124:../src/wolfcrypt/src/aes.c ****                     Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
 7969                             		.loc 2 3124 33 discriminator 3
 7970 05c9 EC A5                   		mov.L	[r10], r5
 7971 05cb EC 55                   		mov.L	[r5], r5
 7972 05cd 69 05                   		shlr	#16, r5
 7973 05cf 5B 55                   		movu.B	r5, r5
 7974                             		.loc 2 3124 32 discriminator 3
 7975 05d1 FB 42 00 00 00 00       		mov.L	#_Te, r4
 7976 05d7 72 55 00 01             		add	#0x100, r5
 7977 05db FE 65 45                		mov.L	[r5,r4], r5
 7978                             		.loc 2 3124 52 discriminator 3
 7979 05de 76 25 FF 00             		and	#0xff, r5
 7980                             		.loc 2 3124 26 discriminator 3
 7981 05e2 FB 42 00 00 00 00       		mov.L	#_Td, r4
 7982 05e8 72 55 00 01             		add	#0x100, r5
 7983 05ec FE 65 45                		mov.L	[r5,r4], r5
3123:../src/wolfcrypt/src/aes.c ****                     Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
 7984                             		.loc 2 3123 60 discriminator 3
 7985 05ef FC 37 53                		xor	r5, r3
3125:../src/wolfcrypt/src/aes.c ****                     Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
 7986                             		.loc 2 3125 33 discriminator 3
 7987 05f2 EC A5                   		mov.L	[r10], r5
 7988 05f4 EC 55                   		mov.L	[r5], r5
 7989 05f6 68 85                   		shlr	#8, r5
 7990 05f8 5B 55                   		movu.B	r5, r5
 7991                             		.loc 2 3125 32 discriminator 3
 7992 05fa FB 42 00 00 00 00       		mov.L	#_Te, r4
 7993 0600 72 55 00 01             		add	#0x100, r5
 7994 0604 FE 65 45                		mov.L	[r5,r4], r5
 7995                             		.loc 2 3125 52 discriminator 3
 7996 0607 76 25 FF 00             		and	#0xff, r5
 7997                             		.loc 2 3125 26 discriminator 3
 7998 060b FB 42 00 00 00 00       		mov.L	#_Td, r4
 7999 0611 72 55 00 02             		add	#0x200, r5
 8000 0615 FE 65 45                		mov.L	[r5,r4], r5
3124:../src/wolfcrypt/src/aes.c ****                     Td[1][Te[1][GETBYTE(rk[0], 2)] & 0xff] ^
 8001                             		.loc 2 3124 60 discriminator 3
 8002 0618 FC 37 53                		xor	r5, r3
3126:../src/wolfcrypt/src/aes.c ****                     Td[3][Te[1][GETBYTE(rk[0], 0)] & 0xff];
 8003                             		.loc 2 3126 33 discriminator 3
 8004 061b EC A5                   		mov.L	[r10], r5
 8005 061d EC 55                   		mov.L	[r5], r5
 8006 061f 5B 55                   		movu.B	r5, r5
 8007                             		.loc 2 3126 32 discriminator 3
 8008 0621 FB 42 00 00 00 00       		mov.L	#_Te, r4
 8009 0627 72 55 00 01             		add	#0x100, r5
 8010 062b FE 65 45                		mov.L	[r5,r4], r5
 8011                             		.loc 2 3126 52 discriminator 3
 8012 062e 76 25 FF 00             		and	#0xff, r5
 8013                             		.loc 2 3126 26 discriminator 3
 8014 0632 FB 42 00 00 00 00       		mov.L	#_Td, r4
 8015 0638 72 55 00 03             		add	#0x300, r5
 8016 063c FE 65 45                		mov.L	[r5,r4], r5
3125:../src/wolfcrypt/src/aes.c ****                     Td[2][Te[1][GETBYTE(rk[0], 1)] & 0xff] ^
 8017                             		.loc 2 3125 60 discriminator 3
 8018 063f EF 34                   		mov.L	r3, r4
 8019 0641 FC 37 54                		xor	r5, r4
3122:../src/wolfcrypt/src/aes.c ****                     Td[0][Te[1][GETBYTE(rk[0], 3)] & 0xff] ^
 8020                             		.loc 2 3122 23 discriminator 3
 8021 0644 EC A5                   		mov.L	[r10], r5
 8022 0646 E3 54                   		mov.L	r4, [r5]
3127:../src/wolfcrypt/src/aes.c ****                 rk[1] =
3128:../src/wolfcrypt/src/aes.c ****                     Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
 8023                             		.loc 2 3128 33 discriminator 3
 8024 0648 EC A5                   		mov.L	[r10], r5
 8025 064a 62 45                   		add	#4, r5
 8026 064c EC 55                   		mov.L	[r5], r5
 8027 064e 69 85                   		shlr	#24, r5
 8028 0650 5B 55                   		movu.B	r5, r5
 8029                             		.loc 2 3128 32 discriminator 3
 8030 0652 FB 42 00 00 00 00       		mov.L	#_Te, r4
 8031 0658 72 55 00 01             		add	#0x100, r5
 8032 065c FE 65 45                		mov.L	[r5,r4], r5
 8033                             		.loc 2 3128 52 discriminator 3
 8034 065f 76 25 FF 00             		and	#0xff, r5
 8035                             		.loc 2 3128 26 discriminator 3
 8036 0663 FB 42 00 00 00 00       		mov.L	#_Td, r4
 8037 0669 FE 65 43                		mov.L	[r5,r4], r3
3129:../src/wolfcrypt/src/aes.c ****                     Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
 8038                             		.loc 2 3129 33 discriminator 3
 8039 066c EC A5                   		mov.L	[r10], r5
 8040 066e 62 45                   		add	#4, r5
 8041 0670 EC 55                   		mov.L	[r5], r5
 8042 0672 69 05                   		shlr	#16, r5
 8043 0674 5B 55                   		movu.B	r5, r5
 8044                             		.loc 2 3129 32 discriminator 3
 8045 0676 FB 42 00 00 00 00       		mov.L	#_Te, r4
 8046 067c 72 55 00 01             		add	#0x100, r5
 8047 0680 FE 65 45                		mov.L	[r5,r4], r5
 8048                             		.loc 2 3129 52 discriminator 3
 8049 0683 76 25 FF 00             		and	#0xff, r5
 8050                             		.loc 2 3129 26 discriminator 3
 8051 0687 FB 42 00 00 00 00       		mov.L	#_Td, r4
 8052 068d 72 55 00 01             		add	#0x100, r5
 8053 0691 FE 65 45                		mov.L	[r5,r4], r5
3128:../src/wolfcrypt/src/aes.c ****                     Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
 8054                             		.loc 2 3128 60 discriminator 3
 8055 0694 FC 37 53                		xor	r5, r3
3130:../src/wolfcrypt/src/aes.c ****                     Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
 8056                             		.loc 2 3130 33 discriminator 3
 8057 0697 EC A5                   		mov.L	[r10], r5
 8058 0699 62 45                   		add	#4, r5
 8059 069b EC 55                   		mov.L	[r5], r5
 8060 069d 68 85                   		shlr	#8, r5
 8061 069f 5B 55                   		movu.B	r5, r5
 8062                             		.loc 2 3130 32 discriminator 3
 8063 06a1 FB 42 00 00 00 00       		mov.L	#_Te, r4
 8064 06a7 72 55 00 01             		add	#0x100, r5
 8065 06ab FE 65 45                		mov.L	[r5,r4], r5
 8066                             		.loc 2 3130 52 discriminator 3
 8067 06ae 76 25 FF 00             		and	#0xff, r5
 8068                             		.loc 2 3130 26 discriminator 3
 8069 06b2 FB 42 00 00 00 00       		mov.L	#_Td, r4
 8070 06b8 72 55 00 02             		add	#0x200, r5
 8071 06bc FE 65 45                		mov.L	[r5,r4], r5
3129:../src/wolfcrypt/src/aes.c ****                     Td[1][Te[1][GETBYTE(rk[1], 2)] & 0xff] ^
 8072                             		.loc 2 3129 60 discriminator 3
 8073 06bf FC 37 53                		xor	r5, r3
3131:../src/wolfcrypt/src/aes.c ****                     Td[3][Te[1][GETBYTE(rk[1], 0)] & 0xff];
 8074                             		.loc 2 3131 33 discriminator 3
 8075 06c2 EC A5                   		mov.L	[r10], r5
 8076 06c4 62 45                   		add	#4, r5
 8077 06c6 EC 55                   		mov.L	[r5], r5
 8078 06c8 5B 55                   		movu.B	r5, r5
 8079                             		.loc 2 3131 32 discriminator 3
 8080 06ca FB 42 00 00 00 00       		mov.L	#_Te, r4
 8081 06d0 72 55 00 01             		add	#0x100, r5
 8082 06d4 FE 65 45                		mov.L	[r5,r4], r5
 8083                             		.loc 2 3131 52 discriminator 3
 8084 06d7 76 25 FF 00             		and	#0xff, r5
 8085                             		.loc 2 3131 26 discriminator 3
 8086 06db FB 42 00 00 00 00       		mov.L	#_Td, r4
 8087 06e1 72 55 00 03             		add	#0x300, r5
 8088 06e5 FE 65 44                		mov.L	[r5,r4], r4
3127:../src/wolfcrypt/src/aes.c ****                     Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
 8089                             		.loc 2 3127 19 discriminator 3
 8090 06e8 EC A5                   		mov.L	[r10], r5
 8091 06ea 62 45                   		add	#4, r5
3130:../src/wolfcrypt/src/aes.c ****                     Td[2][Te[1][GETBYTE(rk[1], 1)] & 0xff] ^
 8092                             		.loc 2 3130 60 discriminator 3
 8093 06ec FC 37 34                		xor	r3, r4
3127:../src/wolfcrypt/src/aes.c ****                     Td[0][Te[1][GETBYTE(rk[1], 3)] & 0xff] ^
 8094                             		.loc 2 3127 23 discriminator 3
 8095 06ef E3 54                   		mov.L	r4, [r5]
3132:../src/wolfcrypt/src/aes.c ****                 rk[2] =
3133:../src/wolfcrypt/src/aes.c ****                     Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
 8096                             		.loc 2 3133 33 discriminator 3
 8097 06f1 EC A5                   		mov.L	[r10], r5
 8098 06f3 62 85                   		add	#8, r5
 8099 06f5 EC 55                   		mov.L	[r5], r5
 8100 06f7 69 85                   		shlr	#24, r5
 8101 06f9 5B 55                   		movu.B	r5, r5
 8102                             		.loc 2 3133 32 discriminator 3
 8103 06fb FB 42 00 00 00 00       		mov.L	#_Te, r4
 8104 0701 72 55 00 01             		add	#0x100, r5
 8105 0705 FE 65 45                		mov.L	[r5,r4], r5
 8106                             		.loc 2 3133 52 discriminator 3
 8107 0708 76 25 FF 00             		and	#0xff, r5
 8108                             		.loc 2 3133 26 discriminator 3
 8109 070c FB 42 00 00 00 00       		mov.L	#_Td, r4
 8110 0712 FE 65 43                		mov.L	[r5,r4], r3
3134:../src/wolfcrypt/src/aes.c ****                     Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
 8111                             		.loc 2 3134 33 discriminator 3
 8112 0715 EC A5                   		mov.L	[r10], r5
 8113 0717 62 85                   		add	#8, r5
 8114 0719 EC 55                   		mov.L	[r5], r5
 8115 071b 69 05                   		shlr	#16, r5
 8116 071d 5B 55                   		movu.B	r5, r5
 8117                             		.loc 2 3134 32 discriminator 3
 8118 071f FB 42 00 00 00 00       		mov.L	#_Te, r4
 8119 0725 72 55 00 01             		add	#0x100, r5
 8120 0729 FE 65 45                		mov.L	[r5,r4], r5
 8121                             		.loc 2 3134 52 discriminator 3
 8122 072c 76 25 FF 00             		and	#0xff, r5
 8123                             		.loc 2 3134 26 discriminator 3
 8124 0730 FB 42 00 00 00 00       		mov.L	#_Td, r4
 8125 0736 72 55 00 01             		add	#0x100, r5
 8126 073a FE 65 45                		mov.L	[r5,r4], r5
3133:../src/wolfcrypt/src/aes.c ****                     Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
 8127                             		.loc 2 3133 60 discriminator 3
 8128 073d FC 37 53                		xor	r5, r3
3135:../src/wolfcrypt/src/aes.c ****                     Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
 8129                             		.loc 2 3135 33 discriminator 3
 8130 0740 EC A5                   		mov.L	[r10], r5
 8131 0742 62 85                   		add	#8, r5
 8132 0744 EC 55                   		mov.L	[r5], r5
 8133 0746 68 85                   		shlr	#8, r5
 8134 0748 5B 55                   		movu.B	r5, r5
 8135                             		.loc 2 3135 32 discriminator 3
 8136 074a FB 42 00 00 00 00       		mov.L	#_Te, r4
 8137 0750 72 55 00 01             		add	#0x100, r5
 8138 0754 FE 65 45                		mov.L	[r5,r4], r5
 8139                             		.loc 2 3135 52 discriminator 3
 8140 0757 76 25 FF 00             		and	#0xff, r5
 8141                             		.loc 2 3135 26 discriminator 3
 8142 075b FB 42 00 00 00 00       		mov.L	#_Td, r4
 8143 0761 72 55 00 02             		add	#0x200, r5
 8144 0765 FE 65 45                		mov.L	[r5,r4], r5
3134:../src/wolfcrypt/src/aes.c ****                     Td[1][Te[1][GETBYTE(rk[2], 2)] & 0xff] ^
 8145                             		.loc 2 3134 60 discriminator 3
 8146 0768 FC 37 53                		xor	r5, r3
3136:../src/wolfcrypt/src/aes.c ****                     Td[3][Te[1][GETBYTE(rk[2], 0)] & 0xff];
 8147                             		.loc 2 3136 33 discriminator 3
 8148 076b EC A5                   		mov.L	[r10], r5
 8149 076d 62 85                   		add	#8, r5
 8150 076f EC 55                   		mov.L	[r5], r5
 8151 0771 5B 55                   		movu.B	r5, r5
 8152                             		.loc 2 3136 32 discriminator 3
 8153 0773 FB 42 00 00 00 00       		mov.L	#_Te, r4
 8154 0779 72 55 00 01             		add	#0x100, r5
 8155 077d FE 65 45                		mov.L	[r5,r4], r5
 8156                             		.loc 2 3136 52 discriminator 3
 8157 0780 76 25 FF 00             		and	#0xff, r5
 8158                             		.loc 2 3136 26 discriminator 3
 8159 0784 FB 42 00 00 00 00       		mov.L	#_Td, r4
 8160 078a 72 55 00 03             		add	#0x300, r5
 8161 078e FE 65 44                		mov.L	[r5,r4], r4
3132:../src/wolfcrypt/src/aes.c ****                     Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
 8162                             		.loc 2 3132 19 discriminator 3
 8163 0791 EC A5                   		mov.L	[r10], r5
 8164 0793 62 85                   		add	#8, r5
3135:../src/wolfcrypt/src/aes.c ****                     Td[2][Te[1][GETBYTE(rk[2], 1)] & 0xff] ^
 8165                             		.loc 2 3135 60 discriminator 3
 8166 0795 FC 37 34                		xor	r3, r4
3132:../src/wolfcrypt/src/aes.c ****                     Td[0][Te[1][GETBYTE(rk[2], 3)] & 0xff] ^
 8167                             		.loc 2 3132 23 discriminator 3
 8168 0798 E3 54                   		mov.L	r4, [r5]
3137:../src/wolfcrypt/src/aes.c ****                 rk[3] =
3138:../src/wolfcrypt/src/aes.c ****                     Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
 8169                             		.loc 2 3138 33 discriminator 3
 8170 079a EC A5                   		mov.L	[r10], r5
 8171 079c 62 C5                   		add	#12, r5
 8172 079e EC 55                   		mov.L	[r5], r5
 8173 07a0 69 85                   		shlr	#24, r5
 8174 07a2 5B 55                   		movu.B	r5, r5
 8175                             		.loc 2 3138 32 discriminator 3
 8176 07a4 FB 42 00 00 00 00       		mov.L	#_Te, r4
 8177 07aa 72 55 00 01             		add	#0x100, r5
 8178 07ae FE 65 45                		mov.L	[r5,r4], r5
 8179                             		.loc 2 3138 52 discriminator 3
 8180 07b1 76 25 FF 00             		and	#0xff, r5
 8181                             		.loc 2 3138 26 discriminator 3
 8182 07b5 FB 42 00 00 00 00       		mov.L	#_Td, r4
 8183 07bb FE 65 43                		mov.L	[r5,r4], r3
3139:../src/wolfcrypt/src/aes.c ****                     Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
 8184                             		.loc 2 3139 33 discriminator 3
 8185 07be EC A5                   		mov.L	[r10], r5
 8186 07c0 62 C5                   		add	#12, r5
 8187 07c2 EC 55                   		mov.L	[r5], r5
 8188 07c4 69 05                   		shlr	#16, r5
 8189 07c6 5B 55                   		movu.B	r5, r5
 8190                             		.loc 2 3139 32 discriminator 3
 8191 07c8 FB 42 00 00 00 00       		mov.L	#_Te, r4
 8192 07ce 72 55 00 01             		add	#0x100, r5
 8193 07d2 FE 65 45                		mov.L	[r5,r4], r5
 8194                             		.loc 2 3139 52 discriminator 3
 8195 07d5 76 25 FF 00             		and	#0xff, r5
 8196                             		.loc 2 3139 26 discriminator 3
 8197 07d9 FB 42 00 00 00 00       		mov.L	#_Td, r4
 8198 07df 72 55 00 01             		add	#0x100, r5
 8199 07e3 FE 65 45                		mov.L	[r5,r4], r5
3138:../src/wolfcrypt/src/aes.c ****                     Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
 8200                             		.loc 2 3138 60 discriminator 3
 8201 07e6 FC 37 53                		xor	r5, r3
3140:../src/wolfcrypt/src/aes.c ****                     Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
 8202                             		.loc 2 3140 33 discriminator 3
 8203 07e9 EC A5                   		mov.L	[r10], r5
 8204 07eb 62 C5                   		add	#12, r5
 8205 07ed EC 55                   		mov.L	[r5], r5
 8206 07ef 68 85                   		shlr	#8, r5
 8207 07f1 5B 55                   		movu.B	r5, r5
 8208                             		.loc 2 3140 32 discriminator 3
 8209 07f3 FB 42 00 00 00 00       		mov.L	#_Te, r4
 8210 07f9 72 55 00 01             		add	#0x100, r5
 8211 07fd FE 65 45                		mov.L	[r5,r4], r5
 8212                             		.loc 2 3140 52 discriminator 3
 8213 0800 76 25 FF 00             		and	#0xff, r5
 8214                             		.loc 2 3140 26 discriminator 3
 8215 0804 FB 42 00 00 00 00       		mov.L	#_Td, r4
 8216 080a 72 55 00 02             		add	#0x200, r5
 8217 080e FE 65 45                		mov.L	[r5,r4], r5
3139:../src/wolfcrypt/src/aes.c ****                     Td[1][Te[1][GETBYTE(rk[3], 2)] & 0xff] ^
 8218                             		.loc 2 3139 60 discriminator 3
 8219 0811 FC 37 53                		xor	r5, r3
3141:../src/wolfcrypt/src/aes.c ****                     Td[3][Te[1][GETBYTE(rk[3], 0)] & 0xff];
 8220                             		.loc 2 3141 33 discriminator 3
 8221 0814 EC A5                   		mov.L	[r10], r5
 8222 0816 62 C5                   		add	#12, r5
 8223 0818 EC 55                   		mov.L	[r5], r5
 8224 081a 5B 55                   		movu.B	r5, r5
 8225                             		.loc 2 3141 32 discriminator 3
 8226 081c FB 42 00 00 00 00       		mov.L	#_Te, r4
 8227 0822 72 55 00 01             		add	#0x100, r5
 8228 0826 FE 65 45                		mov.L	[r5,r4], r5
 8229                             		.loc 2 3141 52 discriminator 3
 8230 0829 76 25 FF 00             		and	#0xff, r5
 8231                             		.loc 2 3141 26 discriminator 3
 8232 082d FB 42 00 00 00 00       		mov.L	#_Td, r4
 8233 0833 72 55 00 03             		add	#0x300, r5
 8234 0837 FE 65 44                		mov.L	[r5,r4], r4
3137:../src/wolfcrypt/src/aes.c ****                     Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
 8235                             		.loc 2 3137 19 discriminator 3
 8236 083a EC A5                   		mov.L	[r10], r5
 8237 083c 62 C5                   		add	#12, r5
3140:../src/wolfcrypt/src/aes.c ****                     Td[2][Te[1][GETBYTE(rk[3], 1)] & 0xff] ^
 8238                             		.loc 2 3140 60 discriminator 3
 8239 083e FC 37 34                		xor	r3, r4
3137:../src/wolfcrypt/src/aes.c ****                     Td[0][Te[1][GETBYTE(rk[3], 3)] & 0xff] ^
 8240                             		.loc 2 3137 23 discriminator 3
 8241 0841 E3 54                   		mov.L	r4, [r5]
3120:../src/wolfcrypt/src/aes.c ****                 rk += 4;
 8242                             		.loc 2 3120 43 discriminator 3
 8243 0843 ED A5 01                		mov.L	4[r10], r5
 8244 0846 62 15                   		add	#1, r5
 8245 0848 E7 A5 01                		mov.L	r5, 4[r10]
 8246                             	.L84:
3120:../src/wolfcrypt/src/aes.c ****                 rk += 4;
 8247                             		.loc 2 3120 32 discriminator 1
 8248 084b ED A5 05                		mov.L	20[r10], r5
 8249 084e ED 55 3C                		mov.L	240[r5], r5
3120:../src/wolfcrypt/src/aes.c ****                 rk += 4;
 8250                             		.loc 2 3120 13 discriminator 1
 8251 0851 ED A4 01                		mov.L	4[r10], r4
 8252 0854 47 54                   		cmp	r5, r4
 8253 0856 22 05 38 48 FD          		bltu	.L85
 8254                             	.L81:
 8255                             	.LBE4:
3142:../src/wolfcrypt/src/aes.c ****             }
3143:../src/wolfcrypt/src/aes.c ****         #endif
3144:../src/wolfcrypt/src/aes.c ****         }
3145:../src/wolfcrypt/src/aes.c ****     #else
3146:../src/wolfcrypt/src/aes.c ****         (void)dir;
3147:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_DECRYPT */
3148:../src/wolfcrypt/src/aes.c ****         (void)temp;
3149:../src/wolfcrypt/src/aes.c **** #endif /* NEED_AES_TABLES */
3150:../src/wolfcrypt/src/aes.c **** 
3151:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_SCE) && !defined(WOLFSSL_SCE_NO_AES)
3152:../src/wolfcrypt/src/aes.c ****         XMEMCPY((byte*)aes->key, userKey, keylen);
3153:../src/wolfcrypt/src/aes.c ****         if (WOLFSSL_SCE_GSCE_HANDLE.p_cfg->endian_flag == CRYPTO_WORD_ENDIAN_BIG) {
3154:../src/wolfcrypt/src/aes.c ****             ByteReverseWords(aes->key, aes->key, 32);
3155:../src/wolfcrypt/src/aes.c ****         }
3156:../src/wolfcrypt/src/aes.c **** #endif
3157:../src/wolfcrypt/src/aes.c **** 
3158:../src/wolfcrypt/src/aes.c ****         ret = wc_AesSetIV(aes, iv);
 8256                             		.loc 2 3158 15
 8257 085b ED A2 08                		mov.L	32[r10], r2
 8258 085e ED A1 05                		mov.L	20[r10], r1
 8259 0861 05 00 00 00             		bsr	_wc_AesSetIV
 8260 0865 E7 A1 03                		mov.L	r1, 12[r10]
3159:../src/wolfcrypt/src/aes.c **** 
3160:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_DEVCRYPTO) && \
3161:../src/wolfcrypt/src/aes.c ****         (defined(WOLFSSL_DEVCRYPTO_AES) || defined(WOLFSSL_DEVCRYPTO_CBC))
3162:../src/wolfcrypt/src/aes.c ****         aes->ctx.cfd = -1;
3163:../src/wolfcrypt/src/aes.c ****     #endif
3164:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_IMX6_CAAM_BLOB
3165:../src/wolfcrypt/src/aes.c ****         ForceZero(local, sizeof(local));
3166:../src/wolfcrypt/src/aes.c ****     #endif
3167:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_CHECK_MEM_ZERO
3168:../src/wolfcrypt/src/aes.c ****         wc_MemZero_Check(&temp, sizeof(temp));
3169:../src/wolfcrypt/src/aes.c ****     #endif
3170:../src/wolfcrypt/src/aes.c ****         return ret;
 8261                             		.loc 2 3170 16
 8262 0868 ED A5 03                		mov.L	12[r10], r5
 8263                             		.balign 8,3,1
 8264                             	.L86:
3171:../src/wolfcrypt/src/aes.c ****     }
 8265                             		.loc 2 3171 5 discriminator 4
 8266 086b EF 51                   		mov.L	r5, r1
 8267 086d 71 00 2C                		add	#44, r0
 8268 0870 7E B6                   		pop	r6
 8269 0872 7E BA                   		pop	r10
 8270 0874 02                      		rts
 8271                             	.LFE48:
 8273 0875 FC 13 00                		.section	.text.wc_AesSetKey,"ax",@progbits
 8274                             		.global	_wc_AesSetKey
 8276                             	_wc_AesSetKey:
 8277                             	.LFB49:
3172:../src/wolfcrypt/src/aes.c **** 
3173:../src/wolfcrypt/src/aes.c ****     int wc_AesSetKey(Aes* aes, const byte* userKey, word32 keylen,
3174:../src/wolfcrypt/src/aes.c ****         const byte* iv, int dir)
3175:../src/wolfcrypt/src/aes.c ****     {
 8278                             		.loc 2 3175 5
 8279 0000 7E AA                   		push.l	r10
 8280                             	.LCFI36:
 8281 0002 71 0A EC                		add	#-20, r0, r10
 8282                             	.LCFI37:
 8283 0005 71 A0 F8                		add	#-8, r10, r0
 8284                             	.LCFI38:
 8285 0008 75 45 1C                		mov.L	#28, r5
 8286 000b 4B A5                   		add	r10, r5
 8287 000d E3 A1                   		mov.L	r1, [r10]
 8288 000f E7 A2 01                		mov.L	r2, 4[r10]
 8289 0012 E7 A3 02                		mov.L	r3, 8[r10]
 8290 0015 E7 A4 03                		mov.L	r4, 12[r10]
3176:../src/wolfcrypt/src/aes.c ****         if (aes == NULL) {
 8291                             		.loc 2 3176 12
 8292 0018 EC A4                   		mov.L	[r10], r4
 8293 001a 61 04                   		cmp	#0, r4
 8294 001c 1F                      		bne	.L94
3177:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
 8295                             		.loc 2 3177 20
 8296 001d FB 5A 53 FF             		mov.L	#-173, r5
 8297 0021 2E 28                   		bra	.L95
 8298                             	.L94:
3178:../src/wolfcrypt/src/aes.c ****         }
3179:../src/wolfcrypt/src/aes.c ****         if (keylen > sizeof(aes->key)) {
 8299                             		.loc 2 3179 12
 8300 0023 ED A4 02                		mov.L	8[r10], r4
 8301 0026 75 54 F0                		cmp	#0xf0, r4
 8302 0029 25 08                   		bleu	.L96
3180:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
 8303                             		.loc 2 3180 20
 8304 002b FB 5A 53 FF             		mov.L	#-173, r5
 8305 002f 2E 1A                   		bra	.L95
 8306                             	.L96:
3181:../src/wolfcrypt/src/aes.c ****         }
3182:../src/wolfcrypt/src/aes.c **** 
3183:../src/wolfcrypt/src/aes.c ****         return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
 8307                             		.loc 2 3183 16
 8308 0031 3E 01 01                		mov.L	#1, 4[r0]
 8309 0034 EC 55                   		mov.L	[r5], r5
 8310 0036 E3 05                   		mov.L	r5, [r0]
 8311 0038 ED A4 03                		mov.L	12[r10], r4
 8312 003b ED A3 02                		mov.L	8[r10], r3
 8313 003e ED A2 01                		mov.L	4[r10], r2
 8314 0041 EC A1                   		mov.L	[r10], r1
 8315 0043 05 00 00 00             		bsr	_wc_AesSetKeyLocal
 8316 0047 EF 15                   		mov.L	r1, r5
 8317                             	.L95:
3184:../src/wolfcrypt/src/aes.c ****     }
 8318                             		.loc 2 3184 5
 8319 0049 EF 51                   		mov.L	r5, r1
 8320 004b 3F AA 08                		rtsd	#32, r10-r10
 8321                             	.LFE49:
 8323                             		.section	.text.wc_AesSetIV,"ax",@progbits
 8324                             		.global	_wc_AesSetIV
 8326                             	_wc_AesSetIV:
 8327                             	.LFB50:
3185:../src/wolfcrypt/src/aes.c **** 
3186:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AES_DIRECT) || defined(WOLFSSL_AES_COUNTER)
3187:../src/wolfcrypt/src/aes.c ****         /* AES-CTR and AES-DIRECT need to use this for key setup */
3188:../src/wolfcrypt/src/aes.c ****         /* This function allows key sizes that are not 128/192/256 bits */
3189:../src/wolfcrypt/src/aes.c ****         int wc_AesSetKeyDirect(Aes* aes, const byte* userKey, word32 keylen,
3190:../src/wolfcrypt/src/aes.c ****                             const byte* iv, int dir)
3191:../src/wolfcrypt/src/aes.c ****         {
3192:../src/wolfcrypt/src/aes.c ****             if (aes == NULL) {
3193:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
3194:../src/wolfcrypt/src/aes.c ****             }
3195:../src/wolfcrypt/src/aes.c ****             if (keylen > sizeof(aes->key)) {
3196:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
3197:../src/wolfcrypt/src/aes.c ****             }
3198:../src/wolfcrypt/src/aes.c **** 
3199:../src/wolfcrypt/src/aes.c ****             return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 0);
3200:../src/wolfcrypt/src/aes.c ****         }
3201:../src/wolfcrypt/src/aes.c ****     #endif /* WOLFSSL_AES_DIRECT || WOLFSSL_AES_COUNTER */
3202:../src/wolfcrypt/src/aes.c **** #endif /* wc_AesSetKey block */
3203:../src/wolfcrypt/src/aes.c **** 
3204:../src/wolfcrypt/src/aes.c **** 
3205:../src/wolfcrypt/src/aes.c **** /* wc_AesSetIV is shared between software and hardware */
3206:../src/wolfcrypt/src/aes.c **** int wc_AesSetIV(Aes* aes, const byte* iv)
3207:../src/wolfcrypt/src/aes.c **** {
 8328                             		.loc 2 3207 1
 8329 0000 7E AA                   		push.l	r10
 8330                             	.LCFI39:
 8331 0002 71 0A F8                		add	#-8, r0, r10
 8332                             	.LCFI40:
 8333 0005 EF A0                   		mov.L	r10, r0
 8334 0007 E3 A1                   		mov.L	r1, [r10]
 8335 0009 E7 A2 01                		mov.L	r2, 4[r10]
3208:../src/wolfcrypt/src/aes.c ****     if (aes == NULL)
 8336                             		.loc 2 3208 8
 8337 000c EC A5                   		mov.L	[r10], r5
 8338 000e 61 05                   		cmp	#0, r5
 8339 0010 1F                      		bne	.L98
3209:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
 8340                             		.loc 2 3209 16
 8341 0011 FB 5A 53 FF             		mov.L	#-173, r5
 8342 0015 2E 30                   		bra	.L99
 8343                             	.L98:
3210:../src/wolfcrypt/src/aes.c **** 
3211:../src/wolfcrypt/src/aes.c ****     if (iv)
 8344                             		.loc 2 3211 8
 8345 0017 ED A5 01                		mov.L	4[r10], r5
 8346 001a 61 05                   		cmp	#0, r5
 8347 001c 20 16                   		beq	.L100
3212:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
 8348                             		.loc 2 3212 9
 8349 001e EC A5                   		mov.L	[r10], r5
 8350 0020 72 55 F8 00             		add	#0xf8, r5
 8351 0024 75 43 10                		mov.L	#16, r3
 8352 0027 ED A2 01                		mov.L	4[r10], r2
 8353 002a EF 51                   		mov.L	r5, r1
 8354 002c 05 00 00 00             		bsr	_memcpy
 8355 0030 2E 13                   		bra	.L101
 8356                             	.L100:
3213:../src/wolfcrypt/src/aes.c ****     else
3214:../src/wolfcrypt/src/aes.c ****         XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
 8357                             		.loc 2 3214 9
 8358 0032 EC A5                   		mov.L	[r10], r5
 8359 0034 72 55 F8 00             		add	#0xf8, r5
 8360 0038 75 43 10                		mov.L	#16, r3
 8361 003b 66 02                   		mov.L	#0, r2
 8362 003d EF 51                   		mov.L	r5, r1
 8363 003f 05 00 00 00             		bsr	_memset
 8364                             	.L101:
3215:../src/wolfcrypt/src/aes.c **** 
3216:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_AES_COUNTER) || defined(WOLFSSL_AES_CFB) || \
3217:../src/wolfcrypt/src/aes.c ****     defined(WOLFSSL_AES_OFB) || defined(WOLFSSL_AES_XTS)
3218:../src/wolfcrypt/src/aes.c ****     /* Clear any unused bytes from last cipher op. */
3219:../src/wolfcrypt/src/aes.c ****     aes->left = 0;
3220:../src/wolfcrypt/src/aes.c **** #endif
3221:../src/wolfcrypt/src/aes.c **** 
3222:../src/wolfcrypt/src/aes.c ****     return 0;
 8365                             		.loc 2 3222 12
 8366 0043 66 05                   		mov.L	#0, r5
 8367                             	.L99:
3223:../src/wolfcrypt/src/aes.c **** }
 8368                             		.loc 2 3223 1
 8369 0045 EF 51                   		mov.L	r5, r1
 8370 0047 3F AA 03                		rtsd	#12, r10-r10
 8371                             	.LFE50:
 8373                             		.section	.text.wc_AesCbcEncrypt,"ax",@progbits
 8374                             		.global	_wc_AesCbcEncrypt
 8376                             	_wc_AesCbcEncrypt:
 8377                             	.LFB51:
3224:../src/wolfcrypt/src/aes.c **** 
3225:../src/wolfcrypt/src/aes.c **** /* AES-DIRECT */
3226:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_AES_DIRECT)
3227:../src/wolfcrypt/src/aes.c ****     #if defined(HAVE_COLDFIRE_SEC)
3228:../src/wolfcrypt/src/aes.c ****         #error "Coldfire SEC doesn't yet support AES direct"
3229:../src/wolfcrypt/src/aes.c **** 
3230:../src/wolfcrypt/src/aes.c ****     #elif defined(WOLFSSL_IMX6_CAAM) && !defined(NO_IMX6_CAAM_AES) && \
3231:../src/wolfcrypt/src/aes.c ****         !defined(WOLFSSL_QNX_CAAM)
3232:../src/wolfcrypt/src/aes.c ****         /* implemented in wolfcrypt/src/port/caam/caam_aes.c */
3233:../src/wolfcrypt/src/aes.c **** 
3234:../src/wolfcrypt/src/aes.c ****     #elif defined(WOLFSSL_AFALG)
3235:../src/wolfcrypt/src/aes.c ****         /* implemented in wolfcrypt/src/port/af_alg/afalg_aes.c */
3236:../src/wolfcrypt/src/aes.c **** 
3237:../src/wolfcrypt/src/aes.c ****     #elif defined(WOLFSSL_DEVCRYPTO_AES)
3238:../src/wolfcrypt/src/aes.c ****         /* implemented in wolfcrypt/src/port/devcrypt/devcrypto_aes.c */
3239:../src/wolfcrypt/src/aes.c **** 
3240:../src/wolfcrypt/src/aes.c ****     #elif defined(WOLFSSL_LINUXKM) && defined(WOLFSSL_AESNI)
3241:../src/wolfcrypt/src/aes.c **** 
3242:../src/wolfcrypt/src/aes.c ****         WARN_UNUSED_RESULT int wc_AesEncryptDirect(
3243:../src/wolfcrypt/src/aes.c ****             Aes* aes, byte* out, const byte* in)
3244:../src/wolfcrypt/src/aes.c ****         {
3245:../src/wolfcrypt/src/aes.c ****             int ret;
3246:../src/wolfcrypt/src/aes.c ****             if (haveAESNI && aes->use_aesni)
3247:../src/wolfcrypt/src/aes.c ****                 SAVE_VECTOR_REGISTERS(return _svr_ret;);
3248:../src/wolfcrypt/src/aes.c ****             ret = wc_AesEncrypt(aes, in, out);
3249:../src/wolfcrypt/src/aes.c ****             if (haveAESNI && aes->use_aesni)
3250:../src/wolfcrypt/src/aes.c ****                 RESTORE_VECTOR_REGISTERS();
3251:../src/wolfcrypt/src/aes.c ****             return ret;
3252:../src/wolfcrypt/src/aes.c ****         }
3253:../src/wolfcrypt/src/aes.c ****         /* vector reg save/restore is explicit in all below calls to
3254:../src/wolfcrypt/src/aes.c ****          * wc_Aes{En,De}cryptDirect(), so bypass the public version with a
3255:../src/wolfcrypt/src/aes.c ****          * macro.
3256:../src/wolfcrypt/src/aes.c ****          */
3257:../src/wolfcrypt/src/aes.c ****         #define wc_AesEncryptDirect(aes, out, in) wc_AesEncrypt(aes, in, out)
3258:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_AES_DECRYPT
3259:../src/wolfcrypt/src/aes.c ****         /* Allow direct access to one block decrypt */
3260:../src/wolfcrypt/src/aes.c ****         WARN_UNUSED_RESULT int wc_AesDecryptDirect(
3261:../src/wolfcrypt/src/aes.c ****             Aes* aes, byte* out, const byte* in)
3262:../src/wolfcrypt/src/aes.c ****         {
3263:../src/wolfcrypt/src/aes.c ****             int ret;
3264:../src/wolfcrypt/src/aes.c ****             if (haveAESNI && aes->use_aesni)
3265:../src/wolfcrypt/src/aes.c ****                 SAVE_VECTOR_REGISTERS(return _svr_ret;);
3266:../src/wolfcrypt/src/aes.c ****             ret = wc_AesDecrypt(aes, in, out);
3267:../src/wolfcrypt/src/aes.c ****             if (haveAESNI && aes->use_aesni)
3268:../src/wolfcrypt/src/aes.c ****                 RESTORE_VECTOR_REGISTERS();
3269:../src/wolfcrypt/src/aes.c ****             return ret;
3270:../src/wolfcrypt/src/aes.c ****         }
3271:../src/wolfcrypt/src/aes.c ****         #define wc_AesDecryptDirect(aes, out, in) wc_AesDecrypt(aes, in, out)
3272:../src/wolfcrypt/src/aes.c ****         #endif /* HAVE_AES_DECRYPT */
3273:../src/wolfcrypt/src/aes.c **** 
3274:../src/wolfcrypt/src/aes.c ****     #else
3275:../src/wolfcrypt/src/aes.c **** 
3276:../src/wolfcrypt/src/aes.c ****         /* Allow direct access to one block encrypt */
3277:../src/wolfcrypt/src/aes.c ****         int wc_AesEncryptDirect(Aes* aes, byte* out, const byte* in)
3278:../src/wolfcrypt/src/aes.c ****         {
3279:../src/wolfcrypt/src/aes.c ****             return wc_AesEncrypt(aes, in, out);
3280:../src/wolfcrypt/src/aes.c ****         }
3281:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_AES_DECRYPT
3282:../src/wolfcrypt/src/aes.c ****         /* Allow direct access to one block decrypt */
3283:../src/wolfcrypt/src/aes.c ****         int wc_AesDecryptDirect(Aes* aes, byte* out, const byte* in)
3284:../src/wolfcrypt/src/aes.c ****         {
3285:../src/wolfcrypt/src/aes.c ****             return wc_AesDecrypt(aes, in, out);
3286:../src/wolfcrypt/src/aes.c ****         }
3287:../src/wolfcrypt/src/aes.c ****         #endif /* HAVE_AES_DECRYPT */
3288:../src/wolfcrypt/src/aes.c ****     #endif /* AES direct block */
3289:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AES_DIRECT */
3290:../src/wolfcrypt/src/aes.c **** 
3291:../src/wolfcrypt/src/aes.c **** 
3292:../src/wolfcrypt/src/aes.c **** /* AES-CBC */
3293:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AES_CBC
3294:../src/wolfcrypt/src/aes.c **** #if defined(STM32_CRYPTO)
3295:../src/wolfcrypt/src/aes.c **** 
3296:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_STM32_CUBEMX
3297:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3298:../src/wolfcrypt/src/aes.c ****     {
3299:../src/wolfcrypt/src/aes.c ****         int ret = 0;
3300:../src/wolfcrypt/src/aes.c ****         CRYP_HandleTypeDef hcryp;
3301:../src/wolfcrypt/src/aes.c ****         word32 blocks = (sz / AES_BLOCK_SIZE);
3302:../src/wolfcrypt/src/aes.c **** 
3303:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3304:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE) {
3305:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
3306:../src/wolfcrypt/src/aes.c ****         }
3307:../src/wolfcrypt/src/aes.c **** #endif
3308:../src/wolfcrypt/src/aes.c ****         if (blocks == 0)
3309:../src/wolfcrypt/src/aes.c ****             return 0;
3310:../src/wolfcrypt/src/aes.c **** 
3311:../src/wolfcrypt/src/aes.c ****         ret = wc_Stm32_Aes_Init(aes, &hcryp);
3312:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
3313:../src/wolfcrypt/src/aes.c ****             return ret;
3314:../src/wolfcrypt/src/aes.c **** 
3315:../src/wolfcrypt/src/aes.c ****         ret = wolfSSL_CryptHwMutexLock();
3316:../src/wolfcrypt/src/aes.c ****         if (ret != 0) {
3317:../src/wolfcrypt/src/aes.c ****             return ret;
3318:../src/wolfcrypt/src/aes.c ****         }
3319:../src/wolfcrypt/src/aes.c **** 
3320:../src/wolfcrypt/src/aes.c ****     #if defined(STM32_HAL_V2)
3321:../src/wolfcrypt/src/aes.c ****         hcryp.Init.Algorithm  = CRYP_AES_CBC;
3322:../src/wolfcrypt/src/aes.c ****         ByteReverseWords(aes->reg, aes->reg, AES_BLOCK_SIZE);
3323:../src/wolfcrypt/src/aes.c ****     #elif defined(STM32_CRYPTO_AES_ONLY)
3324:../src/wolfcrypt/src/aes.c ****         hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
3325:../src/wolfcrypt/src/aes.c ****         hcryp.Init.ChainingMode  = CRYP_CHAINMODE_AES_CBC;
3326:../src/wolfcrypt/src/aes.c ****         hcryp.Init.KeyWriteFlag  = CRYP_KEY_WRITE_ENABLE;
3327:../src/wolfcrypt/src/aes.c ****     #endif
3328:../src/wolfcrypt/src/aes.c ****         hcryp.Init.pInitVect = (STM_CRYPT_TYPE*)aes->reg;
3329:../src/wolfcrypt/src/aes.c ****         HAL_CRYP_Init(&hcryp);
3330:../src/wolfcrypt/src/aes.c **** 
3331:../src/wolfcrypt/src/aes.c ****     #if defined(STM32_HAL_V2)
3332:../src/wolfcrypt/src/aes.c ****         ret = HAL_CRYP_Encrypt(&hcryp, (uint32_t*)in, blocks * AES_BLOCK_SIZE,
3333:../src/wolfcrypt/src/aes.c ****             (uint32_t*)out, STM32_HAL_TIMEOUT);
3334:../src/wolfcrypt/src/aes.c ****     #elif defined(STM32_CRYPTO_AES_ONLY)
3335:../src/wolfcrypt/src/aes.c ****         ret = HAL_CRYPEx_AES(&hcryp, (uint8_t*)in, blocks * AES_BLOCK_SIZE,
3336:../src/wolfcrypt/src/aes.c ****             out, STM32_HAL_TIMEOUT);
3337:../src/wolfcrypt/src/aes.c ****     #else
3338:../src/wolfcrypt/src/aes.c ****         ret = HAL_CRYP_AESCBC_Encrypt(&hcryp, (uint8_t*)in,
3339:../src/wolfcrypt/src/aes.c ****                                       blocks * AES_BLOCK_SIZE,
3340:../src/wolfcrypt/src/aes.c ****                                       out, STM32_HAL_TIMEOUT);
3341:../src/wolfcrypt/src/aes.c ****     #endif
3342:../src/wolfcrypt/src/aes.c ****         if (ret != HAL_OK) {
3343:../src/wolfcrypt/src/aes.c ****             ret = WC_TIMEOUT_E;
3344:../src/wolfcrypt/src/aes.c ****         }
3345:../src/wolfcrypt/src/aes.c **** 
3346:../src/wolfcrypt/src/aes.c ****         /* store iv for next call */
3347:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->reg, out + sz - AES_BLOCK_SIZE, AES_BLOCK_SIZE);
3348:../src/wolfcrypt/src/aes.c **** 
3349:../src/wolfcrypt/src/aes.c ****         HAL_CRYP_DeInit(&hcryp);
3350:../src/wolfcrypt/src/aes.c **** 
3351:../src/wolfcrypt/src/aes.c ****         wolfSSL_CryptHwMutexUnLock();
3352:../src/wolfcrypt/src/aes.c **** 
3353:../src/wolfcrypt/src/aes.c ****         return ret;
3354:../src/wolfcrypt/src/aes.c ****     }
3355:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_DECRYPT
3356:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3357:../src/wolfcrypt/src/aes.c ****     {
3358:../src/wolfcrypt/src/aes.c ****         int ret = 0;
3359:../src/wolfcrypt/src/aes.c ****         CRYP_HandleTypeDef hcryp;
3360:../src/wolfcrypt/src/aes.c ****         word32 blocks = (sz / AES_BLOCK_SIZE);
3361:../src/wolfcrypt/src/aes.c **** 
3362:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3363:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE) {
3364:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
3365:../src/wolfcrypt/src/aes.c ****         }
3366:../src/wolfcrypt/src/aes.c **** #endif
3367:../src/wolfcrypt/src/aes.c ****         if (blocks == 0)
3368:../src/wolfcrypt/src/aes.c ****             return 0;
3369:../src/wolfcrypt/src/aes.c **** 
3370:../src/wolfcrypt/src/aes.c ****         ret = wc_Stm32_Aes_Init(aes, &hcryp);
3371:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
3372:../src/wolfcrypt/src/aes.c ****             return ret;
3373:../src/wolfcrypt/src/aes.c **** 
3374:../src/wolfcrypt/src/aes.c ****         ret = wolfSSL_CryptHwMutexLock();
3375:../src/wolfcrypt/src/aes.c ****         if (ret != 0) {
3376:../src/wolfcrypt/src/aes.c ****             return ret;
3377:../src/wolfcrypt/src/aes.c ****         }
3378:../src/wolfcrypt/src/aes.c **** 
3379:../src/wolfcrypt/src/aes.c ****         /* if input and output same will overwrite input iv */
3380:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->tmp, in + sz - AES_BLOCK_SIZE, AES_BLOCK_SIZE);
3381:../src/wolfcrypt/src/aes.c **** 
3382:../src/wolfcrypt/src/aes.c ****     #if defined(STM32_HAL_V2)
3383:../src/wolfcrypt/src/aes.c ****         hcryp.Init.Algorithm  = CRYP_AES_CBC;
3384:../src/wolfcrypt/src/aes.c ****         ByteReverseWords(aes->reg, aes->reg, AES_BLOCK_SIZE);
3385:../src/wolfcrypt/src/aes.c ****     #elif defined(STM32_CRYPTO_AES_ONLY)
3386:../src/wolfcrypt/src/aes.c ****         hcryp.Init.OperatingMode = CRYP_ALGOMODE_KEYDERIVATION_DECRYPT;
3387:../src/wolfcrypt/src/aes.c ****         hcryp.Init.ChainingMode  = CRYP_CHAINMODE_AES_CBC;
3388:../src/wolfcrypt/src/aes.c ****         hcryp.Init.KeyWriteFlag  = CRYP_KEY_WRITE_ENABLE;
3389:../src/wolfcrypt/src/aes.c ****     #endif
3390:../src/wolfcrypt/src/aes.c **** 
3391:../src/wolfcrypt/src/aes.c ****         hcryp.Init.pInitVect = (STM_CRYPT_TYPE*)aes->reg;
3392:../src/wolfcrypt/src/aes.c ****         HAL_CRYP_Init(&hcryp);
3393:../src/wolfcrypt/src/aes.c **** 
3394:../src/wolfcrypt/src/aes.c ****     #if defined(STM32_HAL_V2)
3395:../src/wolfcrypt/src/aes.c ****         ret = HAL_CRYP_Decrypt(&hcryp, (uint32_t*)in, blocks * AES_BLOCK_SIZE,
3396:../src/wolfcrypt/src/aes.c ****             (uint32_t*)out, STM32_HAL_TIMEOUT);
3397:../src/wolfcrypt/src/aes.c ****     #elif defined(STM32_CRYPTO_AES_ONLY)
3398:../src/wolfcrypt/src/aes.c ****         ret = HAL_CRYPEx_AES(&hcryp, (uint8_t*)in, blocks * AES_BLOCK_SIZE,
3399:../src/wolfcrypt/src/aes.c ****             out, STM32_HAL_TIMEOUT);
3400:../src/wolfcrypt/src/aes.c ****     #else
3401:../src/wolfcrypt/src/aes.c ****         ret = HAL_CRYP_AESCBC_Decrypt(&hcryp, (uint8_t*)in,
3402:../src/wolfcrypt/src/aes.c ****                                       blocks * AES_BLOCK_SIZE,
3403:../src/wolfcrypt/src/aes.c ****             out, STM32_HAL_TIMEOUT);
3404:../src/wolfcrypt/src/aes.c ****     #endif
3405:../src/wolfcrypt/src/aes.c ****         if (ret != HAL_OK) {
3406:../src/wolfcrypt/src/aes.c ****             ret = WC_TIMEOUT_E;
3407:../src/wolfcrypt/src/aes.c ****         }
3408:../src/wolfcrypt/src/aes.c **** 
3409:../src/wolfcrypt/src/aes.c ****         /* store iv for next call */
3410:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
3411:../src/wolfcrypt/src/aes.c **** 
3412:../src/wolfcrypt/src/aes.c ****         HAL_CRYP_DeInit(&hcryp);
3413:../src/wolfcrypt/src/aes.c ****         wolfSSL_CryptHwMutexUnLock();
3414:../src/wolfcrypt/src/aes.c **** 
3415:../src/wolfcrypt/src/aes.c ****         return ret;
3416:../src/wolfcrypt/src/aes.c ****     }
3417:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_DECRYPT */
3418:../src/wolfcrypt/src/aes.c **** 
3419:../src/wolfcrypt/src/aes.c **** #else /* Standard Peripheral Library */
3420:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3421:../src/wolfcrypt/src/aes.c ****     {
3422:../src/wolfcrypt/src/aes.c ****         int ret;
3423:../src/wolfcrypt/src/aes.c ****         word32 *iv;
3424:../src/wolfcrypt/src/aes.c ****         CRYP_InitTypeDef cryptInit;
3425:../src/wolfcrypt/src/aes.c ****         CRYP_KeyInitTypeDef keyInit;
3426:../src/wolfcrypt/src/aes.c ****         CRYP_IVInitTypeDef ivInit;
3427:../src/wolfcrypt/src/aes.c ****         word32 blocks = (sz / AES_BLOCK_SIZE);
3428:../src/wolfcrypt/src/aes.c **** 
3429:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3430:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE) {
3431:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
3432:../src/wolfcrypt/src/aes.c ****         }
3433:../src/wolfcrypt/src/aes.c **** #endif
3434:../src/wolfcrypt/src/aes.c ****         if (blocks == 0)
3435:../src/wolfcrypt/src/aes.c ****             return 0;
3436:../src/wolfcrypt/src/aes.c **** 
3437:../src/wolfcrypt/src/aes.c ****         ret = wc_Stm32_Aes_Init(aes, &cryptInit, &keyInit);
3438:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
3439:../src/wolfcrypt/src/aes.c ****             return ret;
3440:../src/wolfcrypt/src/aes.c **** 
3441:../src/wolfcrypt/src/aes.c ****         ret = wolfSSL_CryptHwMutexLock();
3442:../src/wolfcrypt/src/aes.c ****         if (ret != 0) {
3443:../src/wolfcrypt/src/aes.c ****             return ret;
3444:../src/wolfcrypt/src/aes.c ****         }
3445:../src/wolfcrypt/src/aes.c **** 
3446:../src/wolfcrypt/src/aes.c ****         /* reset registers to their default values */
3447:../src/wolfcrypt/src/aes.c ****         CRYP_DeInit();
3448:../src/wolfcrypt/src/aes.c **** 
3449:../src/wolfcrypt/src/aes.c ****         /* set key */
3450:../src/wolfcrypt/src/aes.c ****         CRYP_KeyInit(&keyInit);
3451:../src/wolfcrypt/src/aes.c **** 
3452:../src/wolfcrypt/src/aes.c ****         /* set iv */
3453:../src/wolfcrypt/src/aes.c ****         iv = aes->reg;
3454:../src/wolfcrypt/src/aes.c ****         CRYP_IVStructInit(&ivInit);
3455:../src/wolfcrypt/src/aes.c ****         ByteReverseWords(iv, iv, AES_BLOCK_SIZE);
3456:../src/wolfcrypt/src/aes.c ****         ivInit.CRYP_IV0Left  = iv[0];
3457:../src/wolfcrypt/src/aes.c ****         ivInit.CRYP_IV0Right = iv[1];
3458:../src/wolfcrypt/src/aes.c ****         ivInit.CRYP_IV1Left  = iv[2];
3459:../src/wolfcrypt/src/aes.c ****         ivInit.CRYP_IV1Right = iv[3];
3460:../src/wolfcrypt/src/aes.c ****         CRYP_IVInit(&ivInit);
3461:../src/wolfcrypt/src/aes.c **** 
3462:../src/wolfcrypt/src/aes.c ****         /* set direction and mode */
3463:../src/wolfcrypt/src/aes.c ****         cryptInit.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
3464:../src/wolfcrypt/src/aes.c ****         cryptInit.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
3465:../src/wolfcrypt/src/aes.c ****         CRYP_Init(&cryptInit);
3466:../src/wolfcrypt/src/aes.c **** 
3467:../src/wolfcrypt/src/aes.c ****         /* enable crypto processor */
3468:../src/wolfcrypt/src/aes.c ****         CRYP_Cmd(ENABLE);
3469:../src/wolfcrypt/src/aes.c **** 
3470:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
3471:../src/wolfcrypt/src/aes.c ****             /* flush IN/OUT FIFOs */
3472:../src/wolfcrypt/src/aes.c ****             CRYP_FIFOFlush();
3473:../src/wolfcrypt/src/aes.c **** 
3474:../src/wolfcrypt/src/aes.c ****             CRYP_DataIn(*(uint32_t*)&in[0]);
3475:../src/wolfcrypt/src/aes.c ****             CRYP_DataIn(*(uint32_t*)&in[4]);
3476:../src/wolfcrypt/src/aes.c ****             CRYP_DataIn(*(uint32_t*)&in[8]);
3477:../src/wolfcrypt/src/aes.c ****             CRYP_DataIn(*(uint32_t*)&in[12]);
3478:../src/wolfcrypt/src/aes.c **** 
3479:../src/wolfcrypt/src/aes.c ****             /* wait until the complete message has been processed */
3480:../src/wolfcrypt/src/aes.c ****             while (CRYP_GetFlagStatus(CRYP_FLAG_BUSY) != RESET) {}
3481:../src/wolfcrypt/src/aes.c **** 
3482:../src/wolfcrypt/src/aes.c ****             *(uint32_t*)&out[0]  = CRYP_DataOut();
3483:../src/wolfcrypt/src/aes.c ****             *(uint32_t*)&out[4]  = CRYP_DataOut();
3484:../src/wolfcrypt/src/aes.c ****             *(uint32_t*)&out[8]  = CRYP_DataOut();
3485:../src/wolfcrypt/src/aes.c ****             *(uint32_t*)&out[12] = CRYP_DataOut();
3486:../src/wolfcrypt/src/aes.c **** 
3487:../src/wolfcrypt/src/aes.c ****             /* store iv for next call */
3488:../src/wolfcrypt/src/aes.c ****             XMEMCPY(aes->reg, out + sz - AES_BLOCK_SIZE, AES_BLOCK_SIZE);
3489:../src/wolfcrypt/src/aes.c **** 
3490:../src/wolfcrypt/src/aes.c ****             sz  -= AES_BLOCK_SIZE;
3491:../src/wolfcrypt/src/aes.c ****             in  += AES_BLOCK_SIZE;
3492:../src/wolfcrypt/src/aes.c ****             out += AES_BLOCK_SIZE;
3493:../src/wolfcrypt/src/aes.c ****         }
3494:../src/wolfcrypt/src/aes.c **** 
3495:../src/wolfcrypt/src/aes.c ****         /* disable crypto processor */
3496:../src/wolfcrypt/src/aes.c ****         CRYP_Cmd(DISABLE);
3497:../src/wolfcrypt/src/aes.c ****         wolfSSL_CryptHwMutexUnLock();
3498:../src/wolfcrypt/src/aes.c **** 
3499:../src/wolfcrypt/src/aes.c ****         return ret;
3500:../src/wolfcrypt/src/aes.c ****     }
3501:../src/wolfcrypt/src/aes.c **** 
3502:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_DECRYPT
3503:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3504:../src/wolfcrypt/src/aes.c ****     {
3505:../src/wolfcrypt/src/aes.c ****         int ret;
3506:../src/wolfcrypt/src/aes.c ****         word32 *iv;
3507:../src/wolfcrypt/src/aes.c ****         CRYP_InitTypeDef cryptInit;
3508:../src/wolfcrypt/src/aes.c ****         CRYP_KeyInitTypeDef keyInit;
3509:../src/wolfcrypt/src/aes.c ****         CRYP_IVInitTypeDef ivInit;
3510:../src/wolfcrypt/src/aes.c ****         word32 blocks = (sz / AES_BLOCK_SIZE);
3511:../src/wolfcrypt/src/aes.c **** 
3512:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3513:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE) {
3514:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
3515:../src/wolfcrypt/src/aes.c ****         }
3516:../src/wolfcrypt/src/aes.c **** #endif
3517:../src/wolfcrypt/src/aes.c ****         if (blocks == 0)
3518:../src/wolfcrypt/src/aes.c ****             return 0;
3519:../src/wolfcrypt/src/aes.c **** 
3520:../src/wolfcrypt/src/aes.c ****         ret = wc_Stm32_Aes_Init(aes, &cryptInit, &keyInit);
3521:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
3522:../src/wolfcrypt/src/aes.c ****             return ret;
3523:../src/wolfcrypt/src/aes.c **** 
3524:../src/wolfcrypt/src/aes.c ****         ret = wolfSSL_CryptHwMutexLock();
3525:../src/wolfcrypt/src/aes.c ****         if (ret != 0) {
3526:../src/wolfcrypt/src/aes.c ****             return ret;
3527:../src/wolfcrypt/src/aes.c ****         }
3528:../src/wolfcrypt/src/aes.c **** 
3529:../src/wolfcrypt/src/aes.c ****         /* if input and output same will overwrite input iv */
3530:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->tmp, in + sz - AES_BLOCK_SIZE, AES_BLOCK_SIZE);
3531:../src/wolfcrypt/src/aes.c **** 
3532:../src/wolfcrypt/src/aes.c ****         /* reset registers to their default values */
3533:../src/wolfcrypt/src/aes.c ****         CRYP_DeInit();
3534:../src/wolfcrypt/src/aes.c **** 
3535:../src/wolfcrypt/src/aes.c ****         /* set direction and key */
3536:../src/wolfcrypt/src/aes.c ****         CRYP_KeyInit(&keyInit);
3537:../src/wolfcrypt/src/aes.c ****         cryptInit.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
3538:../src/wolfcrypt/src/aes.c ****         cryptInit.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
3539:../src/wolfcrypt/src/aes.c ****         CRYP_Init(&cryptInit);
3540:../src/wolfcrypt/src/aes.c **** 
3541:../src/wolfcrypt/src/aes.c ****         /* enable crypto processor */
3542:../src/wolfcrypt/src/aes.c ****         CRYP_Cmd(ENABLE);
3543:../src/wolfcrypt/src/aes.c **** 
3544:../src/wolfcrypt/src/aes.c ****         /* wait until key has been prepared */
3545:../src/wolfcrypt/src/aes.c ****         while (CRYP_GetFlagStatus(CRYP_FLAG_BUSY) != RESET) {}
3546:../src/wolfcrypt/src/aes.c **** 
3547:../src/wolfcrypt/src/aes.c ****         /* set direction and mode */
3548:../src/wolfcrypt/src/aes.c ****         cryptInit.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
3549:../src/wolfcrypt/src/aes.c ****         cryptInit.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
3550:../src/wolfcrypt/src/aes.c ****         CRYP_Init(&cryptInit);
3551:../src/wolfcrypt/src/aes.c **** 
3552:../src/wolfcrypt/src/aes.c ****         /* set iv */
3553:../src/wolfcrypt/src/aes.c ****         iv = aes->reg;
3554:../src/wolfcrypt/src/aes.c ****         CRYP_IVStructInit(&ivInit);
3555:../src/wolfcrypt/src/aes.c ****         ByteReverseWords(iv, iv, AES_BLOCK_SIZE);
3556:../src/wolfcrypt/src/aes.c ****         ivInit.CRYP_IV0Left  = iv[0];
3557:../src/wolfcrypt/src/aes.c ****         ivInit.CRYP_IV0Right = iv[1];
3558:../src/wolfcrypt/src/aes.c ****         ivInit.CRYP_IV1Left  = iv[2];
3559:../src/wolfcrypt/src/aes.c ****         ivInit.CRYP_IV1Right = iv[3];
3560:../src/wolfcrypt/src/aes.c ****         CRYP_IVInit(&ivInit);
3561:../src/wolfcrypt/src/aes.c **** 
3562:../src/wolfcrypt/src/aes.c ****         /* enable crypto processor */
3563:../src/wolfcrypt/src/aes.c ****         CRYP_Cmd(ENABLE);
3564:../src/wolfcrypt/src/aes.c **** 
3565:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
3566:../src/wolfcrypt/src/aes.c ****             /* flush IN/OUT FIFOs */
3567:../src/wolfcrypt/src/aes.c ****             CRYP_FIFOFlush();
3568:../src/wolfcrypt/src/aes.c **** 
3569:../src/wolfcrypt/src/aes.c ****             CRYP_DataIn(*(uint32_t*)&in[0]);
3570:../src/wolfcrypt/src/aes.c ****             CRYP_DataIn(*(uint32_t*)&in[4]);
3571:../src/wolfcrypt/src/aes.c ****             CRYP_DataIn(*(uint32_t*)&in[8]);
3572:../src/wolfcrypt/src/aes.c ****             CRYP_DataIn(*(uint32_t*)&in[12]);
3573:../src/wolfcrypt/src/aes.c **** 
3574:../src/wolfcrypt/src/aes.c ****             /* wait until the complete message has been processed */
3575:../src/wolfcrypt/src/aes.c ****             while (CRYP_GetFlagStatus(CRYP_FLAG_BUSY) != RESET) {}
3576:../src/wolfcrypt/src/aes.c **** 
3577:../src/wolfcrypt/src/aes.c ****             *(uint32_t*)&out[0]  = CRYP_DataOut();
3578:../src/wolfcrypt/src/aes.c ****             *(uint32_t*)&out[4]  = CRYP_DataOut();
3579:../src/wolfcrypt/src/aes.c ****             *(uint32_t*)&out[8]  = CRYP_DataOut();
3580:../src/wolfcrypt/src/aes.c ****             *(uint32_t*)&out[12] = CRYP_DataOut();
3581:../src/wolfcrypt/src/aes.c **** 
3582:../src/wolfcrypt/src/aes.c ****             /* store iv for next call */
3583:../src/wolfcrypt/src/aes.c ****             XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
3584:../src/wolfcrypt/src/aes.c **** 
3585:../src/wolfcrypt/src/aes.c ****             in  += AES_BLOCK_SIZE;
3586:../src/wolfcrypt/src/aes.c ****             out += AES_BLOCK_SIZE;
3587:../src/wolfcrypt/src/aes.c ****         }
3588:../src/wolfcrypt/src/aes.c **** 
3589:../src/wolfcrypt/src/aes.c ****         /* disable crypto processor */
3590:../src/wolfcrypt/src/aes.c ****         CRYP_Cmd(DISABLE);
3591:../src/wolfcrypt/src/aes.c ****         wolfSSL_CryptHwMutexUnLock();
3592:../src/wolfcrypt/src/aes.c **** 
3593:../src/wolfcrypt/src/aes.c ****         return ret;
3594:../src/wolfcrypt/src/aes.c ****     }
3595:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_DECRYPT */
3596:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_STM32_CUBEMX */
3597:../src/wolfcrypt/src/aes.c **** 
3598:../src/wolfcrypt/src/aes.c **** #elif defined(HAVE_COLDFIRE_SEC)
3599:../src/wolfcrypt/src/aes.c ****     static WARN_UNUSED_RESULT int wc_AesCbcCrypt(
3600:../src/wolfcrypt/src/aes.c ****         Aes* aes, byte* po, const byte* pi, word32 sz, word32 descHeader)
3601:../src/wolfcrypt/src/aes.c ****     {
3602:../src/wolfcrypt/src/aes.c ****         #ifdef DEBUG_WOLFSSL
3603:../src/wolfcrypt/src/aes.c ****             int i; int stat1, stat2; int ret;
3604:../src/wolfcrypt/src/aes.c ****         #endif
3605:../src/wolfcrypt/src/aes.c **** 
3606:../src/wolfcrypt/src/aes.c ****         int size;
3607:../src/wolfcrypt/src/aes.c ****         volatile int v;
3608:../src/wolfcrypt/src/aes.c **** 
3609:../src/wolfcrypt/src/aes.c ****         if ((pi == NULL) || (po == NULL))
3610:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;    /*wrong pointer*/
3611:../src/wolfcrypt/src/aes.c **** 
3612:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3613:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE) {
3614:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
3615:../src/wolfcrypt/src/aes.c ****         }
3616:../src/wolfcrypt/src/aes.c **** #endif
3617:../src/wolfcrypt/src/aes.c **** 
3618:../src/wolfcrypt/src/aes.c ****         wc_LockMutex(&Mutex_AesSEC);
3619:../src/wolfcrypt/src/aes.c **** 
3620:../src/wolfcrypt/src/aes.c ****         /* Set descriptor for SEC */
3621:../src/wolfcrypt/src/aes.c ****         secDesc->length1 = 0x0;
3622:../src/wolfcrypt/src/aes.c ****         secDesc->pointer1 = NULL;
3623:../src/wolfcrypt/src/aes.c **** 
3624:../src/wolfcrypt/src/aes.c ****         secDesc->length2 = AES_BLOCK_SIZE;
3625:../src/wolfcrypt/src/aes.c ****         secDesc->pointer2 = (byte *)secReg; /* Initial Vector */
3626:../src/wolfcrypt/src/aes.c **** 
3627:../src/wolfcrypt/src/aes.c ****         switch(aes->rounds) {
3628:../src/wolfcrypt/src/aes.c ****             case 10: secDesc->length3 = 16; break;
3629:../src/wolfcrypt/src/aes.c ****             case 12: secDesc->length3 = 24; break;
3630:../src/wolfcrypt/src/aes.c ****             case 14: secDesc->length3 = 32; break;
3631:../src/wolfcrypt/src/aes.c ****         }
3632:../src/wolfcrypt/src/aes.c ****         XMEMCPY(secKey, aes->key, secDesc->length3);
3633:../src/wolfcrypt/src/aes.c **** 
3634:../src/wolfcrypt/src/aes.c ****         secDesc->pointer3 = (byte *)secKey;
3635:../src/wolfcrypt/src/aes.c ****         secDesc->pointer4 = AESBuffIn;
3636:../src/wolfcrypt/src/aes.c ****         secDesc->pointer5 = AESBuffOut;
3637:../src/wolfcrypt/src/aes.c ****         secDesc->length6 = 0x0;
3638:../src/wolfcrypt/src/aes.c ****         secDesc->pointer6 = NULL;
3639:../src/wolfcrypt/src/aes.c ****         secDesc->length7 = 0x0;
3640:../src/wolfcrypt/src/aes.c ****         secDesc->pointer7 = NULL;
3641:../src/wolfcrypt/src/aes.c ****         secDesc->nextDescriptorPtr = NULL;
3642:../src/wolfcrypt/src/aes.c **** 
3643:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3644:../src/wolfcrypt/src/aes.c ****         size = AES_BUFFER_SIZE;
3645:../src/wolfcrypt/src/aes.c **** #endif
3646:../src/wolfcrypt/src/aes.c ****         while (sz) {
3647:../src/wolfcrypt/src/aes.c ****             secDesc->header = descHeader;
3648:../src/wolfcrypt/src/aes.c ****             XMEMCPY(secReg, aes->reg, AES_BLOCK_SIZE);
3649:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3650:../src/wolfcrypt/src/aes.c ****             sz -= AES_BUFFER_SIZE;
3651:../src/wolfcrypt/src/aes.c **** #else
3652:../src/wolfcrypt/src/aes.c ****             if (sz < AES_BUFFER_SIZE) {
3653:../src/wolfcrypt/src/aes.c ****                 size = sz;
3654:../src/wolfcrypt/src/aes.c ****                 sz = 0;
3655:../src/wolfcrypt/src/aes.c ****             } else {
3656:../src/wolfcrypt/src/aes.c ****                 size = AES_BUFFER_SIZE;
3657:../src/wolfcrypt/src/aes.c ****                 sz -= AES_BUFFER_SIZE;
3658:../src/wolfcrypt/src/aes.c ****             }
3659:../src/wolfcrypt/src/aes.c **** #endif
3660:../src/wolfcrypt/src/aes.c **** 
3661:../src/wolfcrypt/src/aes.c ****             secDesc->length4 = size;
3662:../src/wolfcrypt/src/aes.c ****             secDesc->length5 = size;
3663:../src/wolfcrypt/src/aes.c **** 
3664:../src/wolfcrypt/src/aes.c ****             XMEMCPY(AESBuffIn, pi, size);
3665:../src/wolfcrypt/src/aes.c ****             if(descHeader == SEC_DESC_AES_CBC_DECRYPT) {
3666:../src/wolfcrypt/src/aes.c ****                 XMEMCPY((void*)aes->tmp, (void*)&(pi[size-AES_BLOCK_SIZE]),
3667:../src/wolfcrypt/src/aes.c ****                         AES_BLOCK_SIZE);
3668:../src/wolfcrypt/src/aes.c ****             }
3669:../src/wolfcrypt/src/aes.c **** 
3670:../src/wolfcrypt/src/aes.c ****             /* Point SEC to the location of the descriptor */
3671:../src/wolfcrypt/src/aes.c ****             MCF_SEC_FR0 = (uint32)secDesc;
3672:../src/wolfcrypt/src/aes.c ****             /* Initialize SEC and wait for encryption to complete */
3673:../src/wolfcrypt/src/aes.c ****             MCF_SEC_CCCR0 = 0x0000001a;
3674:../src/wolfcrypt/src/aes.c ****             /* poll SISR to determine when channel is complete */
3675:../src/wolfcrypt/src/aes.c ****             v=0;
3676:../src/wolfcrypt/src/aes.c **** 
3677:../src/wolfcrypt/src/aes.c ****             while ((secDesc->header>> 24) != 0xff) v++;
3678:../src/wolfcrypt/src/aes.c **** 
3679:../src/wolfcrypt/src/aes.c ****             #ifdef DEBUG_WOLFSSL
3680:../src/wolfcrypt/src/aes.c ****                 ret = MCF_SEC_SISRH;
3681:../src/wolfcrypt/src/aes.c ****                 stat1 = MCF_SEC_AESSR;
3682:../src/wolfcrypt/src/aes.c ****                 stat2 = MCF_SEC_AESISR;
3683:../src/wolfcrypt/src/aes.c ****                 if (ret & 0xe0000000) {
3684:../src/wolfcrypt/src/aes.c ****                     db_printf("Aes_Cbc(i=%d):ISRH=%08x, AESSR=%08x, "
3685:../src/wolfcrypt/src/aes.c ****                               "AESISR=%08x\n", i, ret, stat1, stat2);
3686:../src/wolfcrypt/src/aes.c ****                 }
3687:../src/wolfcrypt/src/aes.c ****             #endif
3688:../src/wolfcrypt/src/aes.c **** 
3689:../src/wolfcrypt/src/aes.c ****             XMEMCPY(po, AESBuffOut, size);
3690:../src/wolfcrypt/src/aes.c **** 
3691:../src/wolfcrypt/src/aes.c ****             if (descHeader == SEC_DESC_AES_CBC_ENCRYPT) {
3692:../src/wolfcrypt/src/aes.c ****                 XMEMCPY((void*)aes->reg, (void*)&(po[size-AES_BLOCK_SIZE]),
3693:../src/wolfcrypt/src/aes.c ****                         AES_BLOCK_SIZE);
3694:../src/wolfcrypt/src/aes.c ****             } else {
3695:../src/wolfcrypt/src/aes.c ****                 XMEMCPY((void*)aes->reg, (void*)aes->tmp, AES_BLOCK_SIZE);
3696:../src/wolfcrypt/src/aes.c ****             }
3697:../src/wolfcrypt/src/aes.c **** 
3698:../src/wolfcrypt/src/aes.c ****             pi += size;
3699:../src/wolfcrypt/src/aes.c ****             po += size;
3700:../src/wolfcrypt/src/aes.c ****         }
3701:../src/wolfcrypt/src/aes.c **** 
3702:../src/wolfcrypt/src/aes.c ****         wc_UnLockMutex(&Mutex_AesSEC);
3703:../src/wolfcrypt/src/aes.c ****         return 0;
3704:../src/wolfcrypt/src/aes.c ****     }
3705:../src/wolfcrypt/src/aes.c **** 
3706:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcEncrypt(Aes* aes, byte* po, const byte* pi, word32 sz)
3707:../src/wolfcrypt/src/aes.c ****     {
3708:../src/wolfcrypt/src/aes.c ****         return (wc_AesCbcCrypt(aes, po, pi, sz, SEC_DESC_AES_CBC_ENCRYPT));
3709:../src/wolfcrypt/src/aes.c ****     }
3710:../src/wolfcrypt/src/aes.c **** 
3711:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_DECRYPT
3712:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcDecrypt(Aes* aes, byte* po, const byte* pi, word32 sz)
3713:../src/wolfcrypt/src/aes.c ****     {
3714:../src/wolfcrypt/src/aes.c ****         return (wc_AesCbcCrypt(aes, po, pi, sz, SEC_DESC_AES_CBC_DECRYPT));
3715:../src/wolfcrypt/src/aes.c ****     }
3716:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_DECRYPT */
3717:../src/wolfcrypt/src/aes.c **** 
3718:../src/wolfcrypt/src/aes.c **** #elif defined(FREESCALE_LTC)
3719:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3720:../src/wolfcrypt/src/aes.c ****     {
3721:../src/wolfcrypt/src/aes.c ****         word32 keySize;
3722:../src/wolfcrypt/src/aes.c ****         status_t status;
3723:../src/wolfcrypt/src/aes.c ****         byte *iv, *enc_key;
3724:../src/wolfcrypt/src/aes.c ****         word32 blocks = (sz / AES_BLOCK_SIZE);
3725:../src/wolfcrypt/src/aes.c **** 
3726:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3727:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE) {
3728:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
3729:../src/wolfcrypt/src/aes.c ****         }
3730:../src/wolfcrypt/src/aes.c **** #endif
3731:../src/wolfcrypt/src/aes.c ****         if (blocks == 0)
3732:../src/wolfcrypt/src/aes.c ****             return 0;
3733:../src/wolfcrypt/src/aes.c **** 
3734:../src/wolfcrypt/src/aes.c ****         iv      = (byte*)aes->reg;
3735:../src/wolfcrypt/src/aes.c ****         enc_key = (byte*)aes->key;
3736:../src/wolfcrypt/src/aes.c **** 
3737:../src/wolfcrypt/src/aes.c ****         status = wc_AesGetKeySize(aes, &keySize);
3738:../src/wolfcrypt/src/aes.c ****         if (status != 0) {
3739:../src/wolfcrypt/src/aes.c ****             return status;
3740:../src/wolfcrypt/src/aes.c ****         }
3741:../src/wolfcrypt/src/aes.c **** 
3742:../src/wolfcrypt/src/aes.c ****         status = wolfSSL_CryptHwMutexLock();
3743:../src/wolfcrypt/src/aes.c ****         if (status != 0)
3744:../src/wolfcrypt/src/aes.c ****             return status;
3745:../src/wolfcrypt/src/aes.c ****         status = LTC_AES_EncryptCbc(LTC_BASE, in, out, blocks * AES_BLOCK_SIZE,
3746:../src/wolfcrypt/src/aes.c ****             iv, enc_key, keySize);
3747:../src/wolfcrypt/src/aes.c ****         wolfSSL_CryptHwMutexUnLock();
3748:../src/wolfcrypt/src/aes.c **** 
3749:../src/wolfcrypt/src/aes.c ****         /* store iv for next call */
3750:../src/wolfcrypt/src/aes.c ****         if (status == kStatus_Success) {
3751:../src/wolfcrypt/src/aes.c ****             XMEMCPY(iv, out + sz - AES_BLOCK_SIZE, AES_BLOCK_SIZE);
3752:../src/wolfcrypt/src/aes.c ****         }
3753:../src/wolfcrypt/src/aes.c **** 
3754:../src/wolfcrypt/src/aes.c ****         return (status == kStatus_Success) ? 0 : -1;
3755:../src/wolfcrypt/src/aes.c ****     }
3756:../src/wolfcrypt/src/aes.c **** 
3757:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_DECRYPT
3758:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3759:../src/wolfcrypt/src/aes.c ****     {
3760:../src/wolfcrypt/src/aes.c ****         word32 keySize;
3761:../src/wolfcrypt/src/aes.c ****         status_t status;
3762:../src/wolfcrypt/src/aes.c ****         byte* iv, *dec_key;
3763:../src/wolfcrypt/src/aes.c ****         byte temp_block[AES_BLOCK_SIZE];
3764:../src/wolfcrypt/src/aes.c ****         word32 blocks = (sz / AES_BLOCK_SIZE);
3765:../src/wolfcrypt/src/aes.c **** 
3766:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3767:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE) {
3768:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
3769:../src/wolfcrypt/src/aes.c ****         }
3770:../src/wolfcrypt/src/aes.c **** #endif
3771:../src/wolfcrypt/src/aes.c ****         if (blocks == 0)
3772:../src/wolfcrypt/src/aes.c ****             return 0;
3773:../src/wolfcrypt/src/aes.c **** 
3774:../src/wolfcrypt/src/aes.c ****         iv      = (byte*)aes->reg;
3775:../src/wolfcrypt/src/aes.c ****         dec_key = (byte*)aes->key;
3776:../src/wolfcrypt/src/aes.c **** 
3777:../src/wolfcrypt/src/aes.c ****         status = wc_AesGetKeySize(aes, &keySize);
3778:../src/wolfcrypt/src/aes.c ****         if (status != 0) {
3779:../src/wolfcrypt/src/aes.c ****             return status;
3780:../src/wolfcrypt/src/aes.c ****         }
3781:../src/wolfcrypt/src/aes.c **** 
3782:../src/wolfcrypt/src/aes.c ****         /* get IV for next call */
3783:../src/wolfcrypt/src/aes.c ****         XMEMCPY(temp_block, in + sz - AES_BLOCK_SIZE, AES_BLOCK_SIZE);
3784:../src/wolfcrypt/src/aes.c **** 
3785:../src/wolfcrypt/src/aes.c ****         status = wolfSSL_CryptHwMutexLock();
3786:../src/wolfcrypt/src/aes.c ****         if (status != 0)
3787:../src/wolfcrypt/src/aes.c ****             return status;
3788:../src/wolfcrypt/src/aes.c ****         status = LTC_AES_DecryptCbc(LTC_BASE, in, out, blocks * AES_BLOCK_SIZE,
3789:../src/wolfcrypt/src/aes.c ****             iv, dec_key, keySize, kLTC_EncryptKey);
3790:../src/wolfcrypt/src/aes.c ****         wolfSSL_CryptHwMutexUnLock();
3791:../src/wolfcrypt/src/aes.c **** 
3792:../src/wolfcrypt/src/aes.c ****         /* store IV for next call */
3793:../src/wolfcrypt/src/aes.c ****         if (status == kStatus_Success) {
3794:../src/wolfcrypt/src/aes.c ****             XMEMCPY(iv, temp_block, AES_BLOCK_SIZE);
3795:../src/wolfcrypt/src/aes.c ****         }
3796:../src/wolfcrypt/src/aes.c **** 
3797:../src/wolfcrypt/src/aes.c ****         return (status == kStatus_Success) ? 0 : -1;
3798:../src/wolfcrypt/src/aes.c ****     }
3799:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_DECRYPT */
3800:../src/wolfcrypt/src/aes.c **** 
3801:../src/wolfcrypt/src/aes.c **** #elif defined(FREESCALE_MMCAU)
3802:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3803:../src/wolfcrypt/src/aes.c ****     {
3804:../src/wolfcrypt/src/aes.c ****         int i;
3805:../src/wolfcrypt/src/aes.c ****         int offset = 0;
3806:../src/wolfcrypt/src/aes.c ****         byte *iv;
3807:../src/wolfcrypt/src/aes.c ****         byte temp_block[AES_BLOCK_SIZE];
3808:../src/wolfcrypt/src/aes.c ****         word32 blocks = (sz / AES_BLOCK_SIZE);
3809:../src/wolfcrypt/src/aes.c ****         int ret;
3810:../src/wolfcrypt/src/aes.c **** 
3811:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3812:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE) {
3813:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
3814:../src/wolfcrypt/src/aes.c ****         }
3815:../src/wolfcrypt/src/aes.c **** #endif
3816:../src/wolfcrypt/src/aes.c ****         if (blocks == 0)
3817:../src/wolfcrypt/src/aes.c ****             return 0;
3818:../src/wolfcrypt/src/aes.c **** 
3819:../src/wolfcrypt/src/aes.c ****         iv = (byte*)aes->reg;
3820:../src/wolfcrypt/src/aes.c **** 
3821:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
3822:../src/wolfcrypt/src/aes.c ****             XMEMCPY(temp_block, in + offset, AES_BLOCK_SIZE);
3823:../src/wolfcrypt/src/aes.c **** 
3824:../src/wolfcrypt/src/aes.c ****             /* XOR block with IV for CBC */
3825:../src/wolfcrypt/src/aes.c ****             for (i = 0; i < AES_BLOCK_SIZE; i++)
3826:../src/wolfcrypt/src/aes.c ****                 temp_block[i] ^= iv[i];
3827:../src/wolfcrypt/src/aes.c **** 
3828:../src/wolfcrypt/src/aes.c ****             ret = wc_AesEncrypt(aes, temp_block, out + offset);
3829:../src/wolfcrypt/src/aes.c ****             if (ret != 0)
3830:../src/wolfcrypt/src/aes.c ****                 return ret;
3831:../src/wolfcrypt/src/aes.c **** 
3832:../src/wolfcrypt/src/aes.c ****             offset += AES_BLOCK_SIZE;
3833:../src/wolfcrypt/src/aes.c **** 
3834:../src/wolfcrypt/src/aes.c ****             /* store IV for next block */
3835:../src/wolfcrypt/src/aes.c ****             XMEMCPY(iv, out + offset - AES_BLOCK_SIZE, AES_BLOCK_SIZE);
3836:../src/wolfcrypt/src/aes.c ****         }
3837:../src/wolfcrypt/src/aes.c **** 
3838:../src/wolfcrypt/src/aes.c ****         return 0;
3839:../src/wolfcrypt/src/aes.c ****     }
3840:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_DECRYPT
3841:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3842:../src/wolfcrypt/src/aes.c ****     {
3843:../src/wolfcrypt/src/aes.c ****         int i;
3844:../src/wolfcrypt/src/aes.c ****         int offset = 0;
3845:../src/wolfcrypt/src/aes.c ****         byte* iv;
3846:../src/wolfcrypt/src/aes.c ****         byte temp_block[AES_BLOCK_SIZE];
3847:../src/wolfcrypt/src/aes.c ****         word32 blocks = (sz / AES_BLOCK_SIZE);
3848:../src/wolfcrypt/src/aes.c **** 
3849:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3850:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE) {
3851:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
3852:../src/wolfcrypt/src/aes.c ****         }
3853:../src/wolfcrypt/src/aes.c **** #endif
3854:../src/wolfcrypt/src/aes.c ****         if (blocks == 0)
3855:../src/wolfcrypt/src/aes.c ****             return 0;
3856:../src/wolfcrypt/src/aes.c **** 
3857:../src/wolfcrypt/src/aes.c ****         iv = (byte*)aes->reg;
3858:../src/wolfcrypt/src/aes.c **** 
3859:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
3860:../src/wolfcrypt/src/aes.c ****             XMEMCPY(temp_block, in + offset, AES_BLOCK_SIZE);
3861:../src/wolfcrypt/src/aes.c **** 
3862:../src/wolfcrypt/src/aes.c ****             wc_AesDecrypt(aes, in + offset, out + offset);
3863:../src/wolfcrypt/src/aes.c **** 
3864:../src/wolfcrypt/src/aes.c ****             /* XOR block with IV for CBC */
3865:../src/wolfcrypt/src/aes.c ****             for (i = 0; i < AES_BLOCK_SIZE; i++)
3866:../src/wolfcrypt/src/aes.c ****                 (out + offset)[i] ^= iv[i];
3867:../src/wolfcrypt/src/aes.c **** 
3868:../src/wolfcrypt/src/aes.c ****             /* store IV for next block */
3869:../src/wolfcrypt/src/aes.c ****             XMEMCPY(iv, temp_block, AES_BLOCK_SIZE);
3870:../src/wolfcrypt/src/aes.c **** 
3871:../src/wolfcrypt/src/aes.c ****             offset += AES_BLOCK_SIZE;
3872:../src/wolfcrypt/src/aes.c ****         }
3873:../src/wolfcrypt/src/aes.c **** 
3874:../src/wolfcrypt/src/aes.c ****         return 0;
3875:../src/wolfcrypt/src/aes.c ****     }
3876:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_DECRYPT */
3877:../src/wolfcrypt/src/aes.c **** 
3878:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_PIC32MZ_CRYPT)
3879:../src/wolfcrypt/src/aes.c **** 
3880:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3881:../src/wolfcrypt/src/aes.c ****     {
3882:../src/wolfcrypt/src/aes.c ****         int ret;
3883:../src/wolfcrypt/src/aes.c **** 
3884:../src/wolfcrypt/src/aes.c ****         if (sz == 0)
3885:../src/wolfcrypt/src/aes.c ****             return 0;
3886:../src/wolfcrypt/src/aes.c **** 
3887:../src/wolfcrypt/src/aes.c ****         /* hardware fails on input that is not a multiple of AES block size */
3888:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE != 0) {
3889:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3890:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
3891:../src/wolfcrypt/src/aes.c **** #else
3892:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
3893:../src/wolfcrypt/src/aes.c **** #endif
3894:../src/wolfcrypt/src/aes.c ****         }
3895:../src/wolfcrypt/src/aes.c **** 
3896:../src/wolfcrypt/src/aes.c ****         ret = wc_Pic32AesCrypt(
3897:../src/wolfcrypt/src/aes.c ****             aes->key, aes->keylen, aes->reg, AES_BLOCK_SIZE,
3898:../src/wolfcrypt/src/aes.c ****             out, in, sz, PIC32_ENCRYPTION,
3899:../src/wolfcrypt/src/aes.c ****             PIC32_ALGO_AES, PIC32_CRYPTOALGO_RCBC);
3900:../src/wolfcrypt/src/aes.c **** 
3901:../src/wolfcrypt/src/aes.c ****         /* store iv for next call */
3902:../src/wolfcrypt/src/aes.c ****         if (ret == 0) {
3903:../src/wolfcrypt/src/aes.c ****             XMEMCPY(aes->reg, out + sz - AES_BLOCK_SIZE, AES_BLOCK_SIZE);
3904:../src/wolfcrypt/src/aes.c ****         }
3905:../src/wolfcrypt/src/aes.c **** 
3906:../src/wolfcrypt/src/aes.c ****         return ret;
3907:../src/wolfcrypt/src/aes.c ****     }
3908:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_DECRYPT
3909:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3910:../src/wolfcrypt/src/aes.c ****     {
3911:../src/wolfcrypt/src/aes.c ****         int ret;
3912:../src/wolfcrypt/src/aes.c ****         byte scratch[AES_BLOCK_SIZE];
3913:../src/wolfcrypt/src/aes.c **** 
3914:../src/wolfcrypt/src/aes.c ****         if (sz == 0)
3915:../src/wolfcrypt/src/aes.c ****             return 0;
3916:../src/wolfcrypt/src/aes.c **** 
3917:../src/wolfcrypt/src/aes.c ****         /* hardware fails on input that is not a multiple of AES block size */
3918:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE != 0) {
3919:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
3920:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
3921:../src/wolfcrypt/src/aes.c **** #else
3922:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
3923:../src/wolfcrypt/src/aes.c **** #endif
3924:../src/wolfcrypt/src/aes.c ****         }
3925:../src/wolfcrypt/src/aes.c ****         XMEMCPY(scratch, in + sz - AES_BLOCK_SIZE, AES_BLOCK_SIZE);
3926:../src/wolfcrypt/src/aes.c **** 
3927:../src/wolfcrypt/src/aes.c ****         ret = wc_Pic32AesCrypt(
3928:../src/wolfcrypt/src/aes.c ****             aes->key, aes->keylen, aes->reg, AES_BLOCK_SIZE,
3929:../src/wolfcrypt/src/aes.c ****             out, in, sz, PIC32_DECRYPTION,
3930:../src/wolfcrypt/src/aes.c ****             PIC32_ALGO_AES, PIC32_CRYPTOALGO_RCBC);
3931:../src/wolfcrypt/src/aes.c **** 
3932:../src/wolfcrypt/src/aes.c ****         /* store iv for next call */
3933:../src/wolfcrypt/src/aes.c ****         if (ret == 0) {
3934:../src/wolfcrypt/src/aes.c ****             XMEMCPY((byte*)aes->reg, scratch, AES_BLOCK_SIZE);
3935:../src/wolfcrypt/src/aes.c ****         }
3936:../src/wolfcrypt/src/aes.c **** 
3937:../src/wolfcrypt/src/aes.c ****         return ret;
3938:../src/wolfcrypt/src/aes.c ****     }
3939:../src/wolfcrypt/src/aes.c ****     #endif /* HAVE_AES_DECRYPT */
3940:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
3941:../src/wolfcrypt/src/aes.c ****     !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_AES)
3942:../src/wolfcrypt/src/aes.c **** 
3943:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3944:../src/wolfcrypt/src/aes.c ****     {
3945:../src/wolfcrypt/src/aes.c ****         return wc_esp32AesCbcEncrypt(aes, out, in, sz);
3946:../src/wolfcrypt/src/aes.c ****     }
3947:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3948:../src/wolfcrypt/src/aes.c ****     {
3949:../src/wolfcrypt/src/aes.c ****         return wc_esp32AesCbcDecrypt(aes, out, in, sz);
3950:../src/wolfcrypt/src/aes.c ****     }
3951:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_CRYPTOCELL) && defined(WOLFSSL_CRYPTOCELL_AES)
3952:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3953:../src/wolfcrypt/src/aes.c ****     {
3954:../src/wolfcrypt/src/aes.c ****         return SaSi_AesBlock(&aes->ctx.user_ctx, (uint8_t*)in, sz, out);
3955:../src/wolfcrypt/src/aes.c ****     }
3956:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3957:../src/wolfcrypt/src/aes.c ****     {
3958:../src/wolfcrypt/src/aes.c ****         return SaSi_AesBlock(&aes->ctx.user_ctx, (uint8_t*)in, sz, out);
3959:../src/wolfcrypt/src/aes.c ****     }
3960:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_IMX6_CAAM) && !defined(NO_IMX6_CAAM_AES) && \
3961:../src/wolfcrypt/src/aes.c ****         !defined(WOLFSSL_QNX_CAAM)
3962:../src/wolfcrypt/src/aes.c ****       /* implemented in wolfcrypt/src/port/caam/caam_aes.c */
3963:../src/wolfcrypt/src/aes.c **** 
3964:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_AFALG)
3965:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/af_alg/afalg_aes.c */
3966:../src/wolfcrypt/src/aes.c **** 
3967:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_KCAPI_AES) && !defined(WOLFSSL_NO_KCAPI_AES_CBC)
3968:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/kcapi/kcapi_aes.c */
3969:../src/wolfcrypt/src/aes.c **** 
3970:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_DEVCRYPTO_CBC)
3971:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/devcrypt/devcrypto_aes.c */
3972:../src/wolfcrypt/src/aes.c **** 
3973:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_CRYPT)
3974:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3975:../src/wolfcrypt/src/aes.c ****     {
3976:../src/wolfcrypt/src/aes.c ****         return se050_aes_crypt(aes, in, out, sz, AES_ENCRYPTION,
3977:../src/wolfcrypt/src/aes.c ****             kAlgorithm_SSS_AES_CBC);
3978:../src/wolfcrypt/src/aes.c ****     }
3979:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3980:../src/wolfcrypt/src/aes.c ****     {
3981:../src/wolfcrypt/src/aes.c ****         return se050_aes_crypt(aes, in, out, sz, AES_DECRYPTION,
3982:../src/wolfcrypt/src/aes.c ****             kAlgorithm_SSS_AES_CBC);
3983:../src/wolfcrypt/src/aes.c ****     }
3984:../src/wolfcrypt/src/aes.c **** 
3985:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_SILABS_SE_ACCEL)
3986:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/silabs/silabs_hash.c */
3987:../src/wolfcrypt/src/aes.c **** 
3988:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_HAVE_PSA) && !defined(WOLFSSL_PSA_NO_AES)
3989:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/psa/psa_aes.c */
3990:../src/wolfcrypt/src/aes.c **** 
3991:../src/wolfcrypt/src/aes.c **** #else
3992:../src/wolfcrypt/src/aes.c **** 
3993:../src/wolfcrypt/src/aes.c ****     /* Software AES - CBC Encrypt */
3994:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
3995:../src/wolfcrypt/src/aes.c ****     {
 8378                             		.loc 2 3995 5
 8379 0000 7E AA                   		push.l	r10
 8380                             	.LCFI41:
 8381 0002 71 0A E8                		add	#-24, r0, r10
 8382                             	.LCFI42:
 8383 0005 EF A0                   		mov.L	r10, r0
 8384 0007 E7 A1 02                		mov.L	r1, 8[r10]
 8385 000a E7 A2 03                		mov.L	r2, 12[r10]
 8386 000d E7 A3 04                		mov.L	r3, 16[r10]
 8387 0010 E7 A4 05                		mov.L	r4, 20[r10]
3996:../src/wolfcrypt/src/aes.c ****         word32 blocks;
3997:../src/wolfcrypt/src/aes.c **** 
3998:../src/wolfcrypt/src/aes.c ****         if (aes == NULL || out == NULL || in == NULL) {
 8388                             		.loc 2 3998 12
 8389 0013 ED A5 02                		mov.L	8[r10], r5
 8390 0016 61 05                   		cmp	#0, r5
 8391 0018 20 0E                   		beq	.L103
 8392                             		.loc 2 3998 25 discriminator 1
 8393 001a ED A5 03                		mov.L	12[r10], r5
 8394 001d 61 05                   		cmp	#0, r5
 8395 001f 17                      		beq	.L103
 8396                             		.loc 2 3998 40 discriminator 2
 8397 0020 ED A5 04                		mov.L	16[r10], r5
 8398 0023 61 05                   		cmp	#0, r5
 8399 0025 18                      		bne	.L104
 8400                             	.L103:
3999:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
 8401                             		.loc 2 3999 20
 8402 0026 FB 5A 53 FF             		mov.L	#-173, r5
 8403 002a 38 82 00                		bra	.L105
 8404                             	.L104:
4000:../src/wolfcrypt/src/aes.c ****         }
4001:../src/wolfcrypt/src/aes.c **** 
4002:../src/wolfcrypt/src/aes.c ****         if (sz == 0) {
 8405                             		.loc 2 4002 12
 8406 002d ED A5 05                		mov.L	20[r10], r5
 8407 0030 61 05                   		cmp	#0, r5
 8408 0032 1D                      		bne	.L106
4003:../src/wolfcrypt/src/aes.c ****             return 0;
 8409                             		.loc 2 4003 20
 8410 0033 66 05                   		mov.L	#0, r5
 8411 0035 2E 77                   		bra	.L105
 8412                             	.L106:
4004:../src/wolfcrypt/src/aes.c ****         }
4005:../src/wolfcrypt/src/aes.c **** 
4006:../src/wolfcrypt/src/aes.c ****         blocks = sz / AES_BLOCK_SIZE;
 8413                             		.loc 2 4006 16
 8414 0037 ED A5 05                		mov.L	20[r10], r5
 8415 003a 68 45                   		shlr	#4, r5
 8416 003c E3 A5                   		mov.L	r5, [r10]
4007:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
4008:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE) {
4009:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
4010:../src/wolfcrypt/src/aes.c ****         }
4011:../src/wolfcrypt/src/aes.c **** #endif
4012:../src/wolfcrypt/src/aes.c **** 
4013:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_IMXRT_DCP
4014:../src/wolfcrypt/src/aes.c ****         /* Implemented in wolfcrypt/src/port/nxp/dcp_port.c */
4015:../src/wolfcrypt/src/aes.c ****         if (aes->keylen == 16)
4016:../src/wolfcrypt/src/aes.c ****             return DCPAesCbcEncrypt(aes, out, in, sz);
4017:../src/wolfcrypt/src/aes.c ****     #endif
4018:../src/wolfcrypt/src/aes.c **** 
4019:../src/wolfcrypt/src/aes.c ****     #ifdef WOLF_CRYPTO_CB
4020:../src/wolfcrypt/src/aes.c ****         if (aes->devId != INVALID_DEVID) {
4021:../src/wolfcrypt/src/aes.c ****             int crypto_cb_ret = wc_CryptoCb_AesCbcEncrypt(aes, out, in, sz);
4022:../src/wolfcrypt/src/aes.c ****             if (crypto_cb_ret != CRYPTOCB_UNAVAILABLE)
4023:../src/wolfcrypt/src/aes.c ****                 return crypto_cb_ret;
4024:../src/wolfcrypt/src/aes.c ****             /* fall-through when unavailable */
4025:../src/wolfcrypt/src/aes.c ****         }
4026:../src/wolfcrypt/src/aes.c ****     #endif
4027:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_AES)
4028:../src/wolfcrypt/src/aes.c ****         /* if async and byte count above threshold */
4029:../src/wolfcrypt/src/aes.c ****         if (aes->asyncDev.marker == WOLFSSL_ASYNC_MARKER_AES &&
4030:../src/wolfcrypt/src/aes.c ****                                                 sz >= WC_ASYNC_THRESH_AES_CBC) {
4031:../src/wolfcrypt/src/aes.c ****         #if defined(HAVE_CAVIUM)
4032:../src/wolfcrypt/src/aes.c ****             return NitroxAesCbcEncrypt(aes, out, in, sz);
4033:../src/wolfcrypt/src/aes.c ****         #elif defined(HAVE_INTEL_QA)
4034:../src/wolfcrypt/src/aes.c ****             return IntelQaSymAesCbcEncrypt(&aes->asyncDev, out, in, sz,
4035:../src/wolfcrypt/src/aes.c ****                 (const byte*)aes->devKey, aes->keylen,
4036:../src/wolfcrypt/src/aes.c ****                 (byte*)aes->reg, AES_BLOCK_SIZE);
4037:../src/wolfcrypt/src/aes.c ****         #else /* WOLFSSL_ASYNC_CRYPT_TEST */
4038:../src/wolfcrypt/src/aes.c ****             if (wc_AsyncTestInit(&aes->asyncDev, ASYNC_TEST_AES_CBC_ENCRYPT)) {
4039:../src/wolfcrypt/src/aes.c ****                 WC_ASYNC_TEST* testDev = &aes->asyncDev.test;
4040:../src/wolfcrypt/src/aes.c ****                 testDev->aes.aes = aes;
4041:../src/wolfcrypt/src/aes.c ****                 testDev->aes.out = out;
4042:../src/wolfcrypt/src/aes.c ****                 testDev->aes.in = in;
4043:../src/wolfcrypt/src/aes.c ****                 testDev->aes.sz = sz;
4044:../src/wolfcrypt/src/aes.c ****                 return WC_PENDING_E;
4045:../src/wolfcrypt/src/aes.c ****             }
4046:../src/wolfcrypt/src/aes.c ****         #endif
4047:../src/wolfcrypt/src/aes.c ****         }
4048:../src/wolfcrypt/src/aes.c ****     #endif /* WOLFSSL_ASYNC_CRYPT */
4049:../src/wolfcrypt/src/aes.c **** 
4050:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_AESNI
4051:../src/wolfcrypt/src/aes.c ****         if (haveAESNI) {
4052:../src/wolfcrypt/src/aes.c ****             #ifdef DEBUG_AESNI
4053:../src/wolfcrypt/src/aes.c ****                 printf("about to aes cbc encrypt\n");
4054:../src/wolfcrypt/src/aes.c ****                 printf("in  = %p\n", in);
4055:../src/wolfcrypt/src/aes.c ****                 printf("out = %p\n", out);
4056:../src/wolfcrypt/src/aes.c ****                 printf("aes->key = %p\n", aes->key);
4057:../src/wolfcrypt/src/aes.c ****                 printf("aes->reg = %p\n", aes->reg);
4058:../src/wolfcrypt/src/aes.c ****                 printf("aes->rounds = %d\n", aes->rounds);
4059:../src/wolfcrypt/src/aes.c ****                 printf("sz = %d\n", sz);
4060:../src/wolfcrypt/src/aes.c ****             #endif
4061:../src/wolfcrypt/src/aes.c **** 
4062:../src/wolfcrypt/src/aes.c ****             /* check alignment, decrypt doesn't need alignment */
4063:../src/wolfcrypt/src/aes.c ****             if ((wc_ptr_t)in % AESNI_ALIGN) {
4064:../src/wolfcrypt/src/aes.c ****             #ifndef NO_WOLFSSL_ALLOC_ALIGN
4065:../src/wolfcrypt/src/aes.c ****                 byte* tmp = (byte*)XMALLOC(sz + AES_BLOCK_SIZE + AESNI_ALIGN,
4066:../src/wolfcrypt/src/aes.c ****                                             aes->heap, DYNAMIC_TYPE_TMP_BUFFER);
4067:../src/wolfcrypt/src/aes.c ****                 byte* tmp_align;
4068:../src/wolfcrypt/src/aes.c ****                 if (tmp == NULL) return MEMORY_E;
4069:../src/wolfcrypt/src/aes.c **** 
4070:../src/wolfcrypt/src/aes.c ****                 tmp_align = tmp + (AESNI_ALIGN - ((wc_ptr_t)tmp % AESNI_ALIGN));
4071:../src/wolfcrypt/src/aes.c ****                 XMEMCPY(tmp_align, in, sz);
4072:../src/wolfcrypt/src/aes.c ****                 SAVE_VECTOR_REGISTERS(XFREE(tmp, aes->heap, DYNAMIC_TYPE_TMP_BUFFER); return _svr_r
4073:../src/wolfcrypt/src/aes.c ****                 AES_CBC_encrypt(tmp_align, tmp_align, (byte*)aes->reg, sz,
4074:../src/wolfcrypt/src/aes.c ****                                                   (byte*)aes->key, aes->rounds);
4075:../src/wolfcrypt/src/aes.c ****                 RESTORE_VECTOR_REGISTERS();
4076:../src/wolfcrypt/src/aes.c ****                 /* store iv for next call */
4077:../src/wolfcrypt/src/aes.c ****                 XMEMCPY(aes->reg, tmp_align + sz - AES_BLOCK_SIZE, AES_BLOCK_SIZE);
4078:../src/wolfcrypt/src/aes.c **** 
4079:../src/wolfcrypt/src/aes.c ****                 XMEMCPY(out, tmp_align, sz);
4080:../src/wolfcrypt/src/aes.c ****                 XFREE(tmp, aes->heap, DYNAMIC_TYPE_TMP_BUFFER);
4081:../src/wolfcrypt/src/aes.c ****                 return 0;
4082:../src/wolfcrypt/src/aes.c ****             #else
4083:../src/wolfcrypt/src/aes.c ****                 WOLFSSL_MSG("AES-CBC encrypt with bad alignment");
4084:../src/wolfcrypt/src/aes.c ****                 return BAD_ALIGN_E;
4085:../src/wolfcrypt/src/aes.c ****             #endif
4086:../src/wolfcrypt/src/aes.c ****             }
4087:../src/wolfcrypt/src/aes.c **** 
4088:../src/wolfcrypt/src/aes.c ****             SAVE_VECTOR_REGISTERS(return _svr_ret;);
4089:../src/wolfcrypt/src/aes.c ****             AES_CBC_encrypt(in, out, (byte*)aes->reg, sz, (byte*)aes->key,
4090:../src/wolfcrypt/src/aes.c ****                             aes->rounds);
4091:../src/wolfcrypt/src/aes.c ****             RESTORE_VECTOR_REGISTERS();
4092:../src/wolfcrypt/src/aes.c ****             /* store iv for next call */
4093:../src/wolfcrypt/src/aes.c ****             XMEMCPY(aes->reg, out + sz - AES_BLOCK_SIZE, AES_BLOCK_SIZE);
4094:../src/wolfcrypt/src/aes.c **** 
4095:../src/wolfcrypt/src/aes.c ****             return 0;
4096:../src/wolfcrypt/src/aes.c ****         }
4097:../src/wolfcrypt/src/aes.c ****     #endif
4098:../src/wolfcrypt/src/aes.c **** 
4099:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
 8417                             		.loc 2 4099 15
 8418 003e 2E 61                   		bra	.L107
 8419                             	.L109:
 8420                             	.LBB5:
4100:../src/wolfcrypt/src/aes.c ****             int ret;
4101:../src/wolfcrypt/src/aes.c ****             xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
 8421                             		.loc 2 4101 27
 8422 0040 ED A5 02                		mov.L	8[r10], r5
 8423 0043 72 55 F8 00             		add	#0xf8, r5
 8424                             		.loc 2 4101 13
 8425 0047 75 43 10                		mov.L	#16, r3
 8426 004a ED A2 04                		mov.L	16[r10], r2
 8427 004d EF 51                   		mov.L	r5, r1
 8428 004f 05 00 00 00             		bsr	_xorbuf
4102:../src/wolfcrypt/src/aes.c ****             ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
 8429                             		.loc 2 4102 45
 8430 0053 ED A5 02                		mov.L	8[r10], r5
 8431 0056 72 54 F8 00             		add	#0xf8, r5, r4
 8432                             		.loc 2 4102 62
 8433 005a ED A5 02                		mov.L	8[r10], r5
 8434 005d 72 55 F8 00             		add	#0xf8, r5
 8435                             		.loc 2 4102 19
 8436 0061 EF 53                   		mov.L	r5, r3
 8437 0063 EF 42                   		mov.L	r4, r2
 8438 0065 ED A1 02                		mov.L	8[r10], r1
 8439 0068 05 00 00 00             		bsr	_wc_AesEncrypt
 8440 006c E7 A1 01                		mov.L	r1, 4[r10]
4103:../src/wolfcrypt/src/aes.c ****             if (ret != 0)
 8441                             		.loc 2 4103 16
 8442 006f ED A5 01                		mov.L	4[r10], r5
 8443 0072 61 05                   		cmp	#0, r5
 8444 0074 16                      		beq	.L108
4104:../src/wolfcrypt/src/aes.c ****                 return ret;
 8445                             		.loc 2 4104 24
 8446 0075 ED A5 01                		mov.L	4[r10], r5
 8447 0078 2E 34                   		bra	.L105
 8448                             	.L108:
4105:../src/wolfcrypt/src/aes.c ****             XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
 8449                             		.loc 2 4105 13
 8450 007a ED A5 02                		mov.L	8[r10], r5
 8451 007d 72 55 F8 00             		add	#0xf8, r5
 8452 0081 75 43 10                		mov.L	#16, r3
 8453 0084 EF 52                   		mov.L	r5, r2
 8454 0086 ED A1 03                		mov.L	12[r10], r1
 8455 0089 05 00 00 00             		bsr	_memcpy
4106:../src/wolfcrypt/src/aes.c **** 
4107:../src/wolfcrypt/src/aes.c ****             out += AES_BLOCK_SIZE;
 8456                             		.loc 2 4107 17
 8457 008d ED A5 03                		mov.L	12[r10], r5
 8458 0090 71 55 10                		add	#16, r5
 8459 0093 E7 A5 03                		mov.L	r5, 12[r10]
4108:../src/wolfcrypt/src/aes.c ****             in  += AES_BLOCK_SIZE;
 8460                             		.loc 2 4108 17
 8461 0096 ED A5 04                		mov.L	16[r10], r5
 8462 0099 71 55 10                		add	#16, r5
 8463 009c E7 A5 04                		mov.L	r5, 16[r10]
 8464                             	.L107:
 8465                             	.LBE5:
4099:../src/wolfcrypt/src/aes.c ****             int ret;
 8466                             		.loc 2 4099 22
 8467 009f EC A5                   		mov.L	[r10], r5
 8468 00a1 71 54 FF                		add	#-1, r5, r4
 8469 00a4 E3 A4                   		mov.L	r4, [r10]
4099:../src/wolfcrypt/src/aes.c ****             int ret;
 8470                             		.loc 2 4099 15
 8471 00a6 61 05                   		cmp	#0, r5
 8472 00a8 21 98                   		bne	.L109
4109:../src/wolfcrypt/src/aes.c ****         }
4110:../src/wolfcrypt/src/aes.c **** 
4111:../src/wolfcrypt/src/aes.c ****         return 0;
 8473                             		.loc 2 4111 16
 8474 00aa 66 05                   		mov.L	#0, r5
 8475                             		.balign 8,3,1
 8476                             	.L105:
4112:../src/wolfcrypt/src/aes.c ****     }
 8477                             		.loc 2 4112 5
 8478 00ac EF 51                   		mov.L	r5, r1
 8479 00ae 3F AA 07                		rtsd	#28, r10-r10
 8480                             	.LFE51:
 8482 00b1 FD 70 40 00 00 00 80    		.section	.text.wc_AesCbcDecrypt,"ax",@progbits
 8483                             		.global	_wc_AesCbcDecrypt
 8485                             	_wc_AesCbcDecrypt:
 8486                             	.LFB52:
4113:../src/wolfcrypt/src/aes.c **** 
4114:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_AES_DECRYPT
4115:../src/wolfcrypt/src/aes.c ****     /* Software AES - CBC Decrypt */
4116:../src/wolfcrypt/src/aes.c ****     int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
4117:../src/wolfcrypt/src/aes.c ****     {
 8487                             		.loc 2 4117 5
 8488 0000 7E AA                   		push.l	r10
 8489                             	.LCFI43:
 8490 0002 71 0A E8                		add	#-24, r0, r10
 8491                             	.LCFI44:
 8492 0005 EF A0                   		mov.L	r10, r0
 8493 0007 E7 A1 02                		mov.L	r1, 8[r10]
 8494 000a E7 A2 03                		mov.L	r2, 12[r10]
 8495 000d E7 A3 04                		mov.L	r3, 16[r10]
 8496 0010 E7 A4 05                		mov.L	r4, 20[r10]
4118:../src/wolfcrypt/src/aes.c ****         word32 blocks;
4119:../src/wolfcrypt/src/aes.c **** 
4120:../src/wolfcrypt/src/aes.c ****         if (aes == NULL || out == NULL || in == NULL) {
 8497                             		.loc 2 4120 12
 8498 0013 ED A5 02                		mov.L	8[r10], r5
 8499 0016 61 05                   		cmp	#0, r5
 8500 0018 20 0E                   		beq	.L111
 8501                             		.loc 2 4120 25 discriminator 1
 8502 001a ED A5 03                		mov.L	12[r10], r5
 8503 001d 61 05                   		cmp	#0, r5
 8504 001f 17                      		beq	.L111
 8505                             		.loc 2 4120 40 discriminator 2
 8506 0020 ED A5 04                		mov.L	16[r10], r5
 8507 0023 61 05                   		cmp	#0, r5
 8508 0025 18                      		bne	.L112
 8509                             	.L111:
4121:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
 8510                             		.loc 2 4121 20
 8511 0026 FB 5A 53 FF             		mov.L	#-173, r5
 8512 002a 38 A4 00                		bra	.L113
 8513                             	.L112:
4122:../src/wolfcrypt/src/aes.c ****         }
4123:../src/wolfcrypt/src/aes.c **** 
4124:../src/wolfcrypt/src/aes.c ****         if (sz == 0) {
 8514                             		.loc 2 4124 12
 8515 002d ED A5 05                		mov.L	20[r10], r5
 8516 0030 61 05                   		cmp	#0, r5
 8517 0032 1E                      		bne	.L114
4125:../src/wolfcrypt/src/aes.c ****             return 0;
 8518                             		.loc 2 4125 20
 8519 0033 66 05                   		mov.L	#0, r5
 8520 0035 38 99 00                		bra	.L113
 8521                             	.L114:
4126:../src/wolfcrypt/src/aes.c ****         }
4127:../src/wolfcrypt/src/aes.c **** 
4128:../src/wolfcrypt/src/aes.c ****         blocks = sz / AES_BLOCK_SIZE;
 8522                             		.loc 2 4128 16
 8523 0038 ED A5 05                		mov.L	20[r10], r5
 8524 003b 68 45                   		shlr	#4, r5
 8525 003d E3 A5                   		mov.L	r5, [r10]
4129:../src/wolfcrypt/src/aes.c ****         if (sz % AES_BLOCK_SIZE) {
 8526                             		.loc 2 4129 16
 8527 003f ED A5 05                		mov.L	20[r10], r5
 8528 0042 64 F5                   		and	#15, r5
 8529                             		.loc 2 4129 12
 8530 0044 61 05                   		cmp	#0, r5
 8531 0046 20 7B                   		beq	.L116
4130:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
4131:../src/wolfcrypt/src/aes.c ****             return BAD_LENGTH_E;
4132:../src/wolfcrypt/src/aes.c **** #else
4133:../src/wolfcrypt/src/aes.c ****             return BAD_FUNC_ARG;
 8532                             		.loc 2 4133 20
 8533 0048 FB 5A 53 FF             		mov.L	#-173, r5
 8534 004c 38 82 00                		bra	.L113
 8535                             	.L118:
 8536                             	.LBB6:
4134:../src/wolfcrypt/src/aes.c **** #endif
4135:../src/wolfcrypt/src/aes.c ****         }
4136:../src/wolfcrypt/src/aes.c **** 
4137:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_IMXRT_DCP
4138:../src/wolfcrypt/src/aes.c ****         /* Implemented in wolfcrypt/src/port/nxp/dcp_port.c */
4139:../src/wolfcrypt/src/aes.c ****         if (aes->keylen == 16)
4140:../src/wolfcrypt/src/aes.c ****             return DCPAesCbcDecrypt(aes, out, in, sz);
4141:../src/wolfcrypt/src/aes.c ****     #endif
4142:../src/wolfcrypt/src/aes.c **** 
4143:../src/wolfcrypt/src/aes.c ****     #ifdef WOLF_CRYPTO_CB
4144:../src/wolfcrypt/src/aes.c ****         if (aes->devId != INVALID_DEVID) {
4145:../src/wolfcrypt/src/aes.c ****             int crypto_cb_ret = wc_CryptoCb_AesCbcDecrypt(aes, out, in, sz);
4146:../src/wolfcrypt/src/aes.c ****             if (crypto_cb_ret != CRYPTOCB_UNAVAILABLE)
4147:../src/wolfcrypt/src/aes.c ****                 return crypto_cb_ret;
4148:../src/wolfcrypt/src/aes.c ****             /* fall-through when unavailable */
4149:../src/wolfcrypt/src/aes.c ****         }
4150:../src/wolfcrypt/src/aes.c ****     #endif
4151:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_AES)
4152:../src/wolfcrypt/src/aes.c ****         /* if async and byte count above threshold */
4153:../src/wolfcrypt/src/aes.c ****         if (aes->asyncDev.marker == WOLFSSL_ASYNC_MARKER_AES &&
4154:../src/wolfcrypt/src/aes.c ****                                                 sz >= WC_ASYNC_THRESH_AES_CBC) {
4155:../src/wolfcrypt/src/aes.c ****         #if defined(HAVE_CAVIUM)
4156:../src/wolfcrypt/src/aes.c ****             return NitroxAesCbcDecrypt(aes, out, in, sz);
4157:../src/wolfcrypt/src/aes.c ****         #elif defined(HAVE_INTEL_QA)
4158:../src/wolfcrypt/src/aes.c ****             return IntelQaSymAesCbcDecrypt(&aes->asyncDev, out, in, sz,
4159:../src/wolfcrypt/src/aes.c ****                 (const byte*)aes->devKey, aes->keylen,
4160:../src/wolfcrypt/src/aes.c ****                 (byte*)aes->reg, AES_BLOCK_SIZE);
4161:../src/wolfcrypt/src/aes.c ****         #else /* WOLFSSL_ASYNC_CRYPT_TEST */
4162:../src/wolfcrypt/src/aes.c ****             if (wc_AsyncTestInit(&aes->asyncDev, ASYNC_TEST_AES_CBC_DECRYPT)) {
4163:../src/wolfcrypt/src/aes.c ****                 WC_ASYNC_TEST* testDev = &aes->asyncDev.test;
4164:../src/wolfcrypt/src/aes.c ****                 testDev->aes.aes = aes;
4165:../src/wolfcrypt/src/aes.c ****                 testDev->aes.out = out;
4166:../src/wolfcrypt/src/aes.c ****                 testDev->aes.in = in;
4167:../src/wolfcrypt/src/aes.c ****                 testDev->aes.sz = sz;
4168:../src/wolfcrypt/src/aes.c ****                 return WC_PENDING_E;
4169:../src/wolfcrypt/src/aes.c ****             }
4170:../src/wolfcrypt/src/aes.c ****         #endif
4171:../src/wolfcrypt/src/aes.c ****         }
4172:../src/wolfcrypt/src/aes.c ****     #endif
4173:../src/wolfcrypt/src/aes.c **** 
4174:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_AESNI
4175:../src/wolfcrypt/src/aes.c ****         if (haveAESNI) {
4176:../src/wolfcrypt/src/aes.c ****             #ifdef DEBUG_AESNI
4177:../src/wolfcrypt/src/aes.c ****                 printf("about to aes cbc decrypt\n");
4178:../src/wolfcrypt/src/aes.c ****                 printf("in  = %p\n", in);
4179:../src/wolfcrypt/src/aes.c ****                 printf("out = %p\n", out);
4180:../src/wolfcrypt/src/aes.c ****                 printf("aes->key = %p\n", aes->key);
4181:../src/wolfcrypt/src/aes.c ****                 printf("aes->reg = %p\n", aes->reg);
4182:../src/wolfcrypt/src/aes.c ****                 printf("aes->rounds = %d\n", aes->rounds);
4183:../src/wolfcrypt/src/aes.c ****                 printf("sz = %d\n", sz);
4184:../src/wolfcrypt/src/aes.c ****             #endif
4185:../src/wolfcrypt/src/aes.c **** 
4186:../src/wolfcrypt/src/aes.c ****             /* if input and output same will overwrite input iv */
4187:../src/wolfcrypt/src/aes.c ****             XMEMCPY(aes->tmp, in + sz - AES_BLOCK_SIZE, AES_BLOCK_SIZE);
4188:../src/wolfcrypt/src/aes.c ****             SAVE_VECTOR_REGISTERS(return _svr_ret;);
4189:../src/wolfcrypt/src/aes.c ****             #if defined(WOLFSSL_AESNI_BY4)
4190:../src/wolfcrypt/src/aes.c ****             AES_CBC_decrypt_by4(in, out, (byte*)aes->reg, sz, (byte*)aes->key,
4191:../src/wolfcrypt/src/aes.c ****                             aes->rounds);
4192:../src/wolfcrypt/src/aes.c ****             #elif defined(WOLFSSL_AESNI_BY6)
4193:../src/wolfcrypt/src/aes.c ****             AES_CBC_decrypt_by6(in, out, (byte*)aes->reg, sz, (byte*)aes->key,
4194:../src/wolfcrypt/src/aes.c ****                             aes->rounds);
4195:../src/wolfcrypt/src/aes.c ****             #else /* WOLFSSL_AESNI_BYx */
4196:../src/wolfcrypt/src/aes.c ****             AES_CBC_decrypt_by8(in, out, (byte*)aes->reg, sz, (byte*)aes->key,
4197:../src/wolfcrypt/src/aes.c ****                             aes->rounds);
4198:../src/wolfcrypt/src/aes.c ****             #endif /* WOLFSSL_AESNI_BYx */
4199:../src/wolfcrypt/src/aes.c ****             /* store iv for next call */
4200:../src/wolfcrypt/src/aes.c ****             RESTORE_VECTOR_REGISTERS();
4201:../src/wolfcrypt/src/aes.c ****             XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
4202:../src/wolfcrypt/src/aes.c ****             return 0;
4203:../src/wolfcrypt/src/aes.c ****         }
4204:../src/wolfcrypt/src/aes.c ****     #endif
4205:../src/wolfcrypt/src/aes.c **** 
4206:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
4207:../src/wolfcrypt/src/aes.c ****             int ret;
4208:../src/wolfcrypt/src/aes.c ****             XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
 8537                             		.loc 2 4208 13
 8538 004f ED A5 02                		mov.L	8[r10], r5
 8539 0052 72 55 08 01             		add	#0x108, r5
 8540 0056 75 43 10                		mov.L	#16, r3
 8541 0059 ED A2 04                		mov.L	16[r10], r2
 8542 005c EF 51                   		mov.L	r5, r1
 8543 005e 05 00 00 00             		bsr	_memcpy
4209:../src/wolfcrypt/src/aes.c ****             ret = wc_AesDecrypt(aes, (byte*)aes->tmp, out);
 8544                             		.loc 2 4209 45
 8545 0062 ED A5 02                		mov.L	8[r10], r5
 8546 0065 72 55 08 01             		add	#0x108, r5
 8547                             		.loc 2 4209 19
 8548 0069 ED A3 03                		mov.L	12[r10], r3
 8549 006c EF 52                   		mov.L	r5, r2
 8550 006e ED A1 02                		mov.L	8[r10], r1
 8551 0071 05 00 00 00             		bsr	_wc_AesDecrypt
 8552 0075 E7 A1 01                		mov.L	r1, 4[r10]
4210:../src/wolfcrypt/src/aes.c ****             if (ret != 0)
 8553                             		.loc 2 4210 16
 8554 0078 ED A5 01                		mov.L	4[r10], r5
 8555 007b 61 05                   		cmp	#0, r5
 8556 007d 16                      		beq	.L117
4211:../src/wolfcrypt/src/aes.c ****                 return ret;
 8557                             		.loc 2 4211 24
 8558 007e ED A5 01                		mov.L	4[r10], r5
 8559 0081 2E 4D                   		bra	.L113
 8560                             	.L117:
4212:../src/wolfcrypt/src/aes.c ****             xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
 8561                             		.loc 2 4212 32
 8562 0083 ED A5 02                		mov.L	8[r10], r5
 8563 0086 72 55 F8 00             		add	#0xf8, r5
 8564                             		.loc 2 4212 13
 8565 008a 75 43 10                		mov.L	#16, r3
 8566 008d EF 52                   		mov.L	r5, r2
 8567 008f ED A1 03                		mov.L	12[r10], r1
 8568 0092 05 00 00 00             		bsr	_xorbuf
4213:../src/wolfcrypt/src/aes.c ****             /* store iv for next call */
4214:../src/wolfcrypt/src/aes.c ****             XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
 8569                             		.loc 2 4214 13
 8570 0096 ED A5 02                		mov.L	8[r10], r5
 8571 0099 72 54 F8 00             		add	#0xf8, r5, r4
 8572 009d ED A5 02                		mov.L	8[r10], r5
 8573 00a0 72 55 08 01             		add	#0x108, r5
 8574 00a4 75 43 10                		mov.L	#16, r3
 8575 00a7 EF 52                   		mov.L	r5, r2
 8576 00a9 EF 41                   		mov.L	r4, r1
 8577 00ab 05 00 00 00             		bsr	_memcpy
4215:../src/wolfcrypt/src/aes.c **** 
4216:../src/wolfcrypt/src/aes.c ****             out += AES_BLOCK_SIZE;
 8578                             		.loc 2 4216 17
 8579 00af ED A5 03                		mov.L	12[r10], r5
 8580 00b2 71 55 10                		add	#16, r5
 8581 00b5 E7 A5 03                		mov.L	r5, 12[r10]
4217:../src/wolfcrypt/src/aes.c ****             in  += AES_BLOCK_SIZE;
 8582                             		.loc 2 4217 17
 8583 00b8 ED A5 04                		mov.L	16[r10], r5
 8584 00bb 71 55 10                		add	#16, r5
 8585 00be E7 A5 04                		mov.L	r5, 16[r10]
 8586                             	.L116:
 8587                             	.LBE6:
4206:../src/wolfcrypt/src/aes.c ****             int ret;
 8588                             		.loc 2 4206 22
 8589 00c1 EC A5                   		mov.L	[r10], r5
 8590 00c3 71 54 FF                		add	#-1, r5, r4
 8591 00c6 E3 A4                   		mov.L	r4, [r10]
4206:../src/wolfcrypt/src/aes.c ****             int ret;
 8592                             		.loc 2 4206 15
 8593 00c8 61 05                   		cmp	#0, r5
 8594 00ca 21 85                   		bne	.L118
4218:../src/wolfcrypt/src/aes.c ****         }
4219:../src/wolfcrypt/src/aes.c **** 
4220:../src/wolfcrypt/src/aes.c ****         return 0;
 8595                             		.loc 2 4220 16
 8596 00cc 66 05                   		mov.L	#0, r5
 8597                             		.balign 8,3,1
 8598                             	.L113:
4221:../src/wolfcrypt/src/aes.c ****     }
 8599                             		.loc 2 4221 5
 8600 00ce EF 51                   		mov.L	r5, r1
 8601 00d0 3F AA 07                		rtsd	#28, r10-r10
 8602                             	.LFE52:
 8604 00d3 77 10 01 00 00          		.section	.text.IncCtr,"ax",@progbits
 8606                             	_IncCtr:
 8607                             	.LFB53:
4222:../src/wolfcrypt/src/aes.c ****     #endif
4223:../src/wolfcrypt/src/aes.c **** 
4224:../src/wolfcrypt/src/aes.c **** #endif /* AES-CBC block */
4225:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_CBC */
4226:../src/wolfcrypt/src/aes.c **** 
4227:../src/wolfcrypt/src/aes.c **** /* AES-CTR */
4228:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_AES_COUNTER)
4229:../src/wolfcrypt/src/aes.c **** 
4230:../src/wolfcrypt/src/aes.c ****     #ifdef STM32_CRYPTO
4231:../src/wolfcrypt/src/aes.c ****         #define NEED_AES_CTR_SOFT
4232:../src/wolfcrypt/src/aes.c ****         #define XTRANSFORM_AESCTRBLOCK wc_AesCtrEncryptBlock
4233:../src/wolfcrypt/src/aes.c **** 
4234:../src/wolfcrypt/src/aes.c ****         int wc_AesCtrEncryptBlock(Aes* aes, byte* out, const byte* in)
4235:../src/wolfcrypt/src/aes.c ****         {
4236:../src/wolfcrypt/src/aes.c ****             int ret = 0;
4237:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_STM32_CUBEMX
4238:../src/wolfcrypt/src/aes.c ****             CRYP_HandleTypeDef hcryp;
4239:../src/wolfcrypt/src/aes.c ****             #ifdef STM32_HAL_V2
4240:../src/wolfcrypt/src/aes.c ****             word32 iv[AES_BLOCK_SIZE/sizeof(word32)];
4241:../src/wolfcrypt/src/aes.c ****             #endif
4242:../src/wolfcrypt/src/aes.c ****         #else
4243:../src/wolfcrypt/src/aes.c ****             word32 *iv;
4244:../src/wolfcrypt/src/aes.c ****             CRYP_InitTypeDef cryptInit;
4245:../src/wolfcrypt/src/aes.c ****             CRYP_KeyInitTypeDef keyInit;
4246:../src/wolfcrypt/src/aes.c ****             CRYP_IVInitTypeDef ivInit;
4247:../src/wolfcrypt/src/aes.c ****         #endif
4248:../src/wolfcrypt/src/aes.c **** 
4249:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_STM32_CUBEMX
4250:../src/wolfcrypt/src/aes.c ****             ret = wc_Stm32_Aes_Init(aes, &hcryp);
4251:../src/wolfcrypt/src/aes.c ****             if (ret != 0) {
4252:../src/wolfcrypt/src/aes.c ****                 return ret;
4253:../src/wolfcrypt/src/aes.c ****             }
4254:../src/wolfcrypt/src/aes.c **** 
4255:../src/wolfcrypt/src/aes.c ****             ret = wolfSSL_CryptHwMutexLock();
4256:../src/wolfcrypt/src/aes.c ****             if (ret != 0) {
4257:../src/wolfcrypt/src/aes.c ****                 return ret;
4258:../src/wolfcrypt/src/aes.c ****             }
4259:../src/wolfcrypt/src/aes.c **** 
4260:../src/wolfcrypt/src/aes.c ****         #if defined(STM32_HAL_V2)
4261:../src/wolfcrypt/src/aes.c ****             hcryp.Init.Algorithm  = CRYP_AES_CTR;
4262:../src/wolfcrypt/src/aes.c ****             ByteReverseWords(iv, aes->reg, AES_BLOCK_SIZE);
4263:../src/wolfcrypt/src/aes.c ****             hcryp.Init.pInitVect = (STM_CRYPT_TYPE*)iv;
4264:../src/wolfcrypt/src/aes.c ****         #elif defined(STM32_CRYPTO_AES_ONLY)
4265:../src/wolfcrypt/src/aes.c ****             hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
4266:../src/wolfcrypt/src/aes.c ****             hcryp.Init.ChainingMode  = CRYP_CHAINMODE_AES_CTR;
4267:../src/wolfcrypt/src/aes.c ****             hcryp.Init.KeyWriteFlag  = CRYP_KEY_WRITE_ENABLE;
4268:../src/wolfcrypt/src/aes.c ****             hcryp.Init.pInitVect = (STM_CRYPT_TYPE*)aes->reg;
4269:../src/wolfcrypt/src/aes.c ****         #else
4270:../src/wolfcrypt/src/aes.c ****             hcryp.Init.pInitVect = (STM_CRYPT_TYPE*)aes->reg;
4271:../src/wolfcrypt/src/aes.c ****         #endif
4272:../src/wolfcrypt/src/aes.c ****             HAL_CRYP_Init(&hcryp);
4273:../src/wolfcrypt/src/aes.c **** 
4274:../src/wolfcrypt/src/aes.c ****         #if defined(STM32_HAL_V2)
4275:../src/wolfcrypt/src/aes.c ****             ret = HAL_CRYP_Encrypt(&hcryp, (uint32_t*)in, AES_BLOCK_SIZE,
4276:../src/wolfcrypt/src/aes.c ****                 (uint32_t*)out, STM32_HAL_TIMEOUT);
4277:../src/wolfcrypt/src/aes.c ****         #elif defined(STM32_CRYPTO_AES_ONLY)
4278:../src/wolfcrypt/src/aes.c ****             ret = HAL_CRYPEx_AES(&hcryp, (byte*)in, AES_BLOCK_SIZE,
4279:../src/wolfcrypt/src/aes.c ****                 out, STM32_HAL_TIMEOUT);
4280:../src/wolfcrypt/src/aes.c ****         #else
4281:../src/wolfcrypt/src/aes.c ****             ret = HAL_CRYP_AESCTR_Encrypt(&hcryp, (byte*)in, AES_BLOCK_SIZE,
4282:../src/wolfcrypt/src/aes.c ****                 out, STM32_HAL_TIMEOUT);
4283:../src/wolfcrypt/src/aes.c ****         #endif
4284:../src/wolfcrypt/src/aes.c ****             if (ret != HAL_OK) {
4285:../src/wolfcrypt/src/aes.c ****                 ret = WC_TIMEOUT_E;
4286:../src/wolfcrypt/src/aes.c ****             }
4287:../src/wolfcrypt/src/aes.c ****             HAL_CRYP_DeInit(&hcryp);
4288:../src/wolfcrypt/src/aes.c **** 
4289:../src/wolfcrypt/src/aes.c ****         #else /* Standard Peripheral Library */
4290:../src/wolfcrypt/src/aes.c ****             ret = wc_Stm32_Aes_Init(aes, &cryptInit, &keyInit);
4291:../src/wolfcrypt/src/aes.c ****             if (ret != 0) {
4292:../src/wolfcrypt/src/aes.c ****                 return ret;
4293:../src/wolfcrypt/src/aes.c ****             }
4294:../src/wolfcrypt/src/aes.c **** 
4295:../src/wolfcrypt/src/aes.c ****             ret = wolfSSL_CryptHwMutexLock();
4296:../src/wolfcrypt/src/aes.c ****             if (ret != 0) {
4297:../src/wolfcrypt/src/aes.c ****                 return ret;
4298:../src/wolfcrypt/src/aes.c ****             }
4299:../src/wolfcrypt/src/aes.c **** 
4300:../src/wolfcrypt/src/aes.c ****             /* reset registers to their default values */
4301:../src/wolfcrypt/src/aes.c ****             CRYP_DeInit();
4302:../src/wolfcrypt/src/aes.c **** 
4303:../src/wolfcrypt/src/aes.c ****             /* set key */
4304:../src/wolfcrypt/src/aes.c ****             CRYP_KeyInit(&keyInit);
4305:../src/wolfcrypt/src/aes.c **** 
4306:../src/wolfcrypt/src/aes.c ****             /* set iv */
4307:../src/wolfcrypt/src/aes.c ****             iv = aes->reg;
4308:../src/wolfcrypt/src/aes.c ****             CRYP_IVStructInit(&ivInit);
4309:../src/wolfcrypt/src/aes.c ****             ivInit.CRYP_IV0Left  = ByteReverseWord32(iv[0]);
4310:../src/wolfcrypt/src/aes.c ****             ivInit.CRYP_IV0Right = ByteReverseWord32(iv[1]);
4311:../src/wolfcrypt/src/aes.c ****             ivInit.CRYP_IV1Left  = ByteReverseWord32(iv[2]);
4312:../src/wolfcrypt/src/aes.c ****             ivInit.CRYP_IV1Right = ByteReverseWord32(iv[3]);
4313:../src/wolfcrypt/src/aes.c ****             CRYP_IVInit(&ivInit);
4314:../src/wolfcrypt/src/aes.c **** 
4315:../src/wolfcrypt/src/aes.c ****             /* set direction and mode */
4316:../src/wolfcrypt/src/aes.c ****             cryptInit.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
4317:../src/wolfcrypt/src/aes.c ****             cryptInit.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
4318:../src/wolfcrypt/src/aes.c ****             CRYP_Init(&cryptInit);
4319:../src/wolfcrypt/src/aes.c **** 
4320:../src/wolfcrypt/src/aes.c ****             /* enable crypto processor */
4321:../src/wolfcrypt/src/aes.c ****             CRYP_Cmd(ENABLE);
4322:../src/wolfcrypt/src/aes.c **** 
4323:../src/wolfcrypt/src/aes.c ****             /* flush IN/OUT FIFOs */
4324:../src/wolfcrypt/src/aes.c ****             CRYP_FIFOFlush();
4325:../src/wolfcrypt/src/aes.c **** 
4326:../src/wolfcrypt/src/aes.c ****             CRYP_DataIn(*(uint32_t*)&in[0]);
4327:../src/wolfcrypt/src/aes.c ****             CRYP_DataIn(*(uint32_t*)&in[4]);
4328:../src/wolfcrypt/src/aes.c ****             CRYP_DataIn(*(uint32_t*)&in[8]);
4329:../src/wolfcrypt/src/aes.c ****             CRYP_DataIn(*(uint32_t*)&in[12]);
4330:../src/wolfcrypt/src/aes.c **** 
4331:../src/wolfcrypt/src/aes.c ****             /* wait until the complete message has been processed */
4332:../src/wolfcrypt/src/aes.c ****             while (CRYP_GetFlagStatus(CRYP_FLAG_BUSY) != RESET) {}
4333:../src/wolfcrypt/src/aes.c **** 
4334:../src/wolfcrypt/src/aes.c ****             *(uint32_t*)&out[0]  = CRYP_DataOut();
4335:../src/wolfcrypt/src/aes.c ****             *(uint32_t*)&out[4]  = CRYP_DataOut();
4336:../src/wolfcrypt/src/aes.c ****             *(uint32_t*)&out[8]  = CRYP_DataOut();
4337:../src/wolfcrypt/src/aes.c ****             *(uint32_t*)&out[12] = CRYP_DataOut();
4338:../src/wolfcrypt/src/aes.c **** 
4339:../src/wolfcrypt/src/aes.c ****             /* disable crypto processor */
4340:../src/wolfcrypt/src/aes.c ****             CRYP_Cmd(DISABLE);
4341:../src/wolfcrypt/src/aes.c ****         #endif /* WOLFSSL_STM32_CUBEMX */
4342:../src/wolfcrypt/src/aes.c **** 
4343:../src/wolfcrypt/src/aes.c ****             wolfSSL_CryptHwMutexUnLock();
4344:../src/wolfcrypt/src/aes.c ****             return ret;
4345:../src/wolfcrypt/src/aes.c ****         }
4346:../src/wolfcrypt/src/aes.c **** 
4347:../src/wolfcrypt/src/aes.c **** 
4348:../src/wolfcrypt/src/aes.c ****     #elif defined(WOLFSSL_PIC32MZ_CRYPT)
4349:../src/wolfcrypt/src/aes.c **** 
4350:../src/wolfcrypt/src/aes.c ****         #define NEED_AES_CTR_SOFT
4351:../src/wolfcrypt/src/aes.c ****         #define XTRANSFORM_AESCTRBLOCK wc_AesCtrEncryptBlock
4352:../src/wolfcrypt/src/aes.c **** 
4353:../src/wolfcrypt/src/aes.c ****         int wc_AesCtrEncryptBlock(Aes* aes, byte* out, const byte* in)
4354:../src/wolfcrypt/src/aes.c ****         {
4355:../src/wolfcrypt/src/aes.c ****             word32 tmpIv[AES_BLOCK_SIZE / sizeof(word32)];
4356:../src/wolfcrypt/src/aes.c ****             XMEMCPY(tmpIv, aes->reg, AES_BLOCK_SIZE);
4357:../src/wolfcrypt/src/aes.c ****             return wc_Pic32AesCrypt(
4358:../src/wolfcrypt/src/aes.c ****                 aes->key, aes->keylen, tmpIv, AES_BLOCK_SIZE,
4359:../src/wolfcrypt/src/aes.c ****                 out, in, AES_BLOCK_SIZE,
4360:../src/wolfcrypt/src/aes.c ****                 PIC32_ENCRYPTION, PIC32_ALGO_AES, PIC32_CRYPTOALGO_RCTR);
4361:../src/wolfcrypt/src/aes.c ****         }
4362:../src/wolfcrypt/src/aes.c **** 
4363:../src/wolfcrypt/src/aes.c ****     #elif defined(HAVE_COLDFIRE_SEC)
4364:../src/wolfcrypt/src/aes.c ****         #error "Coldfire SEC doesn't currently support AES-CTR mode"
4365:../src/wolfcrypt/src/aes.c **** 
4366:../src/wolfcrypt/src/aes.c ****     #elif defined(FREESCALE_LTC)
4367:../src/wolfcrypt/src/aes.c ****         int wc_AesCtrEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
4368:../src/wolfcrypt/src/aes.c ****         {
4369:../src/wolfcrypt/src/aes.c ****             int ret = 0;
4370:../src/wolfcrypt/src/aes.c ****             word32 keySize;
4371:../src/wolfcrypt/src/aes.c ****             byte *iv, *enc_key;
4372:../src/wolfcrypt/src/aes.c ****             byte* tmp;
4373:../src/wolfcrypt/src/aes.c **** 
4374:../src/wolfcrypt/src/aes.c ****             if (aes == NULL || out == NULL || in == NULL) {
4375:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
4376:../src/wolfcrypt/src/aes.c ****             }
4377:../src/wolfcrypt/src/aes.c **** 
4378:../src/wolfcrypt/src/aes.c ****             /* consume any unused bytes left in aes->tmp */
4379:../src/wolfcrypt/src/aes.c ****             tmp = (byte*)aes->tmp + AES_BLOCK_SIZE - aes->left;
4380:../src/wolfcrypt/src/aes.c ****             while (aes->left && sz) {
4381:../src/wolfcrypt/src/aes.c ****                 *(out++) = *(in++) ^ *(tmp++);
4382:../src/wolfcrypt/src/aes.c ****                 aes->left--;
4383:../src/wolfcrypt/src/aes.c ****                 sz--;
4384:../src/wolfcrypt/src/aes.c ****             }
4385:../src/wolfcrypt/src/aes.c **** 
4386:../src/wolfcrypt/src/aes.c ****             if (sz) {
4387:../src/wolfcrypt/src/aes.c ****                 iv      = (byte*)aes->reg;
4388:../src/wolfcrypt/src/aes.c ****                 enc_key = (byte*)aes->key;
4389:../src/wolfcrypt/src/aes.c **** 
4390:../src/wolfcrypt/src/aes.c ****                 ret = wc_AesGetKeySize(aes, &keySize);
4391:../src/wolfcrypt/src/aes.c ****                 if (ret != 0)
4392:../src/wolfcrypt/src/aes.c ****                     return ret;
4393:../src/wolfcrypt/src/aes.c **** 
4394:../src/wolfcrypt/src/aes.c ****                 ret = wolfSSL_CryptHwMutexLock();
4395:../src/wolfcrypt/src/aes.c ****                 if (ret != 0)
4396:../src/wolfcrypt/src/aes.c ****                     return ret;
4397:../src/wolfcrypt/src/aes.c ****                 LTC_AES_CryptCtr(LTC_BASE, in, out, sz,
4398:../src/wolfcrypt/src/aes.c ****                     iv, enc_key, keySize, (byte*)aes->tmp,
4399:../src/wolfcrypt/src/aes.c ****                     (uint32_t*)&aes->left);
4400:../src/wolfcrypt/src/aes.c ****                 wolfSSL_CryptHwMutexUnLock();
4401:../src/wolfcrypt/src/aes.c ****             }
4402:../src/wolfcrypt/src/aes.c **** 
4403:../src/wolfcrypt/src/aes.c ****             return ret;
4404:../src/wolfcrypt/src/aes.c ****         }
4405:../src/wolfcrypt/src/aes.c **** 
4406:../src/wolfcrypt/src/aes.c ****     #elif defined(WOLFSSL_IMX6_CAAM) && !defined(NO_IMX6_CAAM_AES) && \
4407:../src/wolfcrypt/src/aes.c ****         !defined(WOLFSSL_QNX_CAAM)
4408:../src/wolfcrypt/src/aes.c ****         /* implemented in wolfcrypt/src/port/caam/caam_aes.c */
4409:../src/wolfcrypt/src/aes.c **** 
4410:../src/wolfcrypt/src/aes.c ****     #elif defined(WOLFSSL_AFALG)
4411:../src/wolfcrypt/src/aes.c ****         /* implemented in wolfcrypt/src/port/af_alg/afalg_aes.c */
4412:../src/wolfcrypt/src/aes.c **** 
4413:../src/wolfcrypt/src/aes.c ****     #elif defined(WOLFSSL_DEVCRYPTO_AES)
4414:../src/wolfcrypt/src/aes.c ****         /* implemented in wolfcrypt/src/port/devcrypt/devcrypto_aes.c */
4415:../src/wolfcrypt/src/aes.c **** 
4416:../src/wolfcrypt/src/aes.c ****     #elif defined(WOLFSSL_ESP32WROOM32_CRYPT) && \
4417:../src/wolfcrypt/src/aes.c ****         !defined(NO_WOLFSSL_ESP32WROOM32_CRYPT_AES)
4418:../src/wolfcrypt/src/aes.c ****         /* esp32 doesn't support CRT mode by hw.     */
4419:../src/wolfcrypt/src/aes.c ****         /* use aes ecnryption plus sw implementation */
4420:../src/wolfcrypt/src/aes.c ****         #define NEED_AES_CTR_SOFT
4421:../src/wolfcrypt/src/aes.c **** 
4422:../src/wolfcrypt/src/aes.c ****     #elif defined(WOLFSSL_HAVE_PSA) && !defined(WOLFSSL_PSA_NO_AES)
4423:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/psa/psa_aes.c */
4424:../src/wolfcrypt/src/aes.c ****     #else
4425:../src/wolfcrypt/src/aes.c **** 
4426:../src/wolfcrypt/src/aes.c ****         /* Use software based AES counter */
4427:../src/wolfcrypt/src/aes.c ****         #define NEED_AES_CTR_SOFT
4428:../src/wolfcrypt/src/aes.c ****     #endif
4429:../src/wolfcrypt/src/aes.c **** 
4430:../src/wolfcrypt/src/aes.c ****     #ifdef NEED_AES_CTR_SOFT
4431:../src/wolfcrypt/src/aes.c ****         /* Increment AES counter */
4432:../src/wolfcrypt/src/aes.c ****         static WC_INLINE void IncrementAesCounter(byte* inOutCtr)
4433:../src/wolfcrypt/src/aes.c ****         {
4434:../src/wolfcrypt/src/aes.c ****             /* in network byte order so start at end and work back */
4435:../src/wolfcrypt/src/aes.c ****             int i;
4436:../src/wolfcrypt/src/aes.c ****             for (i = AES_BLOCK_SIZE - 1; i >= 0; i--) {
4437:../src/wolfcrypt/src/aes.c ****                 if (++inOutCtr[i])  /* we're done unless we overflow */
4438:../src/wolfcrypt/src/aes.c ****                     return;
4439:../src/wolfcrypt/src/aes.c ****             }
4440:../src/wolfcrypt/src/aes.c ****         }
4441:../src/wolfcrypt/src/aes.c **** 
4442:../src/wolfcrypt/src/aes.c ****         /* Software AES - CTR Encrypt */
4443:../src/wolfcrypt/src/aes.c ****         int wc_AesCtrEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
4444:../src/wolfcrypt/src/aes.c ****         {
4445:../src/wolfcrypt/src/aes.c ****             byte* tmp;
4446:../src/wolfcrypt/src/aes.c ****             byte scratch[AES_BLOCK_SIZE];
4447:../src/wolfcrypt/src/aes.c ****             int ret;
4448:../src/wolfcrypt/src/aes.c **** 
4449:../src/wolfcrypt/src/aes.c ****             if (aes == NULL || out == NULL || in == NULL) {
4450:../src/wolfcrypt/src/aes.c ****                 return BAD_FUNC_ARG;
4451:../src/wolfcrypt/src/aes.c ****             }
4452:../src/wolfcrypt/src/aes.c **** 
4453:../src/wolfcrypt/src/aes.c ****         #ifdef WOLF_CRYPTO_CB
4454:../src/wolfcrypt/src/aes.c ****             if (aes->devId != INVALID_DEVID) {
4455:../src/wolfcrypt/src/aes.c ****                 int crypto_cb_ret = wc_CryptoCb_AesCtrEncrypt(aes, out, in, sz);
4456:../src/wolfcrypt/src/aes.c ****                 if (crypto_cb_ret != CRYPTOCB_UNAVAILABLE)
4457:../src/wolfcrypt/src/aes.c ****                     return crypto_cb_ret;
4458:../src/wolfcrypt/src/aes.c ****                 /* fall-through when unavailable */
4459:../src/wolfcrypt/src/aes.c ****             }
4460:../src/wolfcrypt/src/aes.c ****         #endif
4461:../src/wolfcrypt/src/aes.c **** 
4462:../src/wolfcrypt/src/aes.c ****             /* consume any unused bytes left in aes->tmp */
4463:../src/wolfcrypt/src/aes.c ****             tmp = (byte*)aes->tmp + AES_BLOCK_SIZE - aes->left;
4464:../src/wolfcrypt/src/aes.c ****             while (aes->left && sz) {
4465:../src/wolfcrypt/src/aes.c ****                *(out++) = *(in++) ^ *(tmp++);
4466:../src/wolfcrypt/src/aes.c ****                aes->left--;
4467:../src/wolfcrypt/src/aes.c ****                sz--;
4468:../src/wolfcrypt/src/aes.c ****             }
4469:../src/wolfcrypt/src/aes.c **** 
4470:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
4471:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Add("wc_AesCtrEncrypt scratch", scratch, AES_BLOCK_SIZE);
4472:../src/wolfcrypt/src/aes.c ****         #endif
4473:../src/wolfcrypt/src/aes.c ****         #if defined(HAVE_AES_ECB) && !defined(WOLFSSL_PIC32MZ_CRYPT) && \
4474:../src/wolfcrypt/src/aes.c ****             !defined(XTRANSFORM_AESCTRBLOCK)
4475:../src/wolfcrypt/src/aes.c ****             if (in != out && sz >= AES_BLOCK_SIZE) {
4476:../src/wolfcrypt/src/aes.c ****                 int blocks = sz / AES_BLOCK_SIZE;
4477:../src/wolfcrypt/src/aes.c ****                 byte* counter = (byte*)aes->reg;
4478:../src/wolfcrypt/src/aes.c ****                 byte* c = out;
4479:../src/wolfcrypt/src/aes.c ****                 while (blocks--) {
4480:../src/wolfcrypt/src/aes.c ****                     XMEMCPY(c, counter, AES_BLOCK_SIZE);
4481:../src/wolfcrypt/src/aes.c ****                     c += AES_BLOCK_SIZE;
4482:../src/wolfcrypt/src/aes.c ****                     IncrementAesCounter(counter);
4483:../src/wolfcrypt/src/aes.c ****                 }
4484:../src/wolfcrypt/src/aes.c **** 
4485:../src/wolfcrypt/src/aes.c ****                 /* reset number of blocks and then do encryption */
4486:../src/wolfcrypt/src/aes.c ****                 blocks = sz / AES_BLOCK_SIZE;
4487:../src/wolfcrypt/src/aes.c ****                 wc_AesEcbEncrypt(aes, out, out, AES_BLOCK_SIZE * blocks);
4488:../src/wolfcrypt/src/aes.c ****                 xorbuf(out, in, AES_BLOCK_SIZE * blocks);
4489:../src/wolfcrypt/src/aes.c ****                 in += AES_BLOCK_SIZE * blocks;
4490:../src/wolfcrypt/src/aes.c ****                 out += AES_BLOCK_SIZE * blocks;
4491:../src/wolfcrypt/src/aes.c ****                 sz -= blocks * AES_BLOCK_SIZE;
4492:../src/wolfcrypt/src/aes.c ****             }
4493:../src/wolfcrypt/src/aes.c ****             else
4494:../src/wolfcrypt/src/aes.c ****         #endif
4495:../src/wolfcrypt/src/aes.c ****             {
4496:../src/wolfcrypt/src/aes.c ****                 /* do as many block size ops as possible */
4497:../src/wolfcrypt/src/aes.c ****                 while (sz >= AES_BLOCK_SIZE) {
4498:../src/wolfcrypt/src/aes.c ****                 #ifdef XTRANSFORM_AESCTRBLOCK
4499:../src/wolfcrypt/src/aes.c ****                     XTRANSFORM_AESCTRBLOCK(aes, out, in);
4500:../src/wolfcrypt/src/aes.c ****                 #else
4501:../src/wolfcrypt/src/aes.c ****                     ret = wc_AesEncrypt(aes, (byte*)aes->reg, scratch);
4502:../src/wolfcrypt/src/aes.c ****                     if (ret != 0) {
4503:../src/wolfcrypt/src/aes.c ****                         ForceZero(scratch, AES_BLOCK_SIZE);
4504:../src/wolfcrypt/src/aes.c ****                     #ifdef WOLFSSL_CHECK_MEM_ZERO
4505:../src/wolfcrypt/src/aes.c ****                         wc_MemZero_Check(scratch, AES_BLOCK_SIZE);
4506:../src/wolfcrypt/src/aes.c ****                     #endif
4507:../src/wolfcrypt/src/aes.c ****                         return ret;
4508:../src/wolfcrypt/src/aes.c ****                     }
4509:../src/wolfcrypt/src/aes.c ****                     xorbuf(scratch, in, AES_BLOCK_SIZE);
4510:../src/wolfcrypt/src/aes.c ****                     XMEMCPY(out, scratch, AES_BLOCK_SIZE);
4511:../src/wolfcrypt/src/aes.c ****                 #endif
4512:../src/wolfcrypt/src/aes.c ****                     IncrementAesCounter((byte*)aes->reg);
4513:../src/wolfcrypt/src/aes.c **** 
4514:../src/wolfcrypt/src/aes.c ****                     out += AES_BLOCK_SIZE;
4515:../src/wolfcrypt/src/aes.c ****                     in  += AES_BLOCK_SIZE;
4516:../src/wolfcrypt/src/aes.c ****                     sz  -= AES_BLOCK_SIZE;
4517:../src/wolfcrypt/src/aes.c ****                     aes->left = 0;
4518:../src/wolfcrypt/src/aes.c ****                 }
4519:../src/wolfcrypt/src/aes.c ****                 ForceZero(scratch, AES_BLOCK_SIZE);
4520:../src/wolfcrypt/src/aes.c ****             }
4521:../src/wolfcrypt/src/aes.c **** 
4522:../src/wolfcrypt/src/aes.c ****             /* handle non block size remaining and store unused byte count in left */
4523:../src/wolfcrypt/src/aes.c ****             if (sz) {
4524:../src/wolfcrypt/src/aes.c ****                 ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->tmp);
4525:../src/wolfcrypt/src/aes.c ****                 if (ret != 0) {
4526:../src/wolfcrypt/src/aes.c ****                     ForceZero(scratch, AES_BLOCK_SIZE);
4527:../src/wolfcrypt/src/aes.c ****                 #ifdef WOLFSSL_CHECK_MEM_ZERO
4528:../src/wolfcrypt/src/aes.c ****                     wc_MemZero_Check(scratch, AES_BLOCK_SIZE);
4529:../src/wolfcrypt/src/aes.c ****                 #endif
4530:../src/wolfcrypt/src/aes.c ****                     return ret;
4531:../src/wolfcrypt/src/aes.c ****                 }
4532:../src/wolfcrypt/src/aes.c ****                 IncrementAesCounter((byte*)aes->reg);
4533:../src/wolfcrypt/src/aes.c **** 
4534:../src/wolfcrypt/src/aes.c ****                 aes->left = AES_BLOCK_SIZE;
4535:../src/wolfcrypt/src/aes.c ****                 tmp = (byte*)aes->tmp;
4536:../src/wolfcrypt/src/aes.c **** 
4537:../src/wolfcrypt/src/aes.c ****                 while (sz--) {
4538:../src/wolfcrypt/src/aes.c ****                     *(out++) = *(in++) ^ *(tmp++);
4539:../src/wolfcrypt/src/aes.c ****                     aes->left--;
4540:../src/wolfcrypt/src/aes.c ****                 }
4541:../src/wolfcrypt/src/aes.c ****             }
4542:../src/wolfcrypt/src/aes.c **** 
4543:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
4544:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(scratch, AES_BLOCK_SIZE);
4545:../src/wolfcrypt/src/aes.c ****         #endif
4546:../src/wolfcrypt/src/aes.c ****             return 0;
4547:../src/wolfcrypt/src/aes.c ****         }
4548:../src/wolfcrypt/src/aes.c **** 
4549:../src/wolfcrypt/src/aes.c ****     #endif /* NEED_AES_CTR_SOFT */
4550:../src/wolfcrypt/src/aes.c **** 
4551:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AES_COUNTER */
4552:../src/wolfcrypt/src/aes.c **** #endif /* !WOLFSSL_ARMASM */
4553:../src/wolfcrypt/src/aes.c **** 
4554:../src/wolfcrypt/src/aes.c **** 
4555:../src/wolfcrypt/src/aes.c **** /*
4556:../src/wolfcrypt/src/aes.c ****  * The IV for AES GCM and CCM, stored in struct Aes's member reg, is comprised
4557:../src/wolfcrypt/src/aes.c ****  * of two parts in order:
4558:../src/wolfcrypt/src/aes.c ****  *   1. The fixed field which may be 0 or 4 bytes long. In TLS, this is set
4559:../src/wolfcrypt/src/aes.c ****  *      to the implicit IV.
4560:../src/wolfcrypt/src/aes.c ****  *   2. The explicit IV is generated by wolfCrypt. It needs to be managed
4561:../src/wolfcrypt/src/aes.c ****  *      by wolfCrypt to ensure the IV is unique for each call to encrypt.
4562:../src/wolfcrypt/src/aes.c ****  * The IV may be a 96-bit random value, or the 32-bit fixed value and a
4563:../src/wolfcrypt/src/aes.c ****  * 64-bit set of 0 or random data. The final 32-bits of reg is used as a
4564:../src/wolfcrypt/src/aes.c ****  * block counter during the encryption.
4565:../src/wolfcrypt/src/aes.c ****  */
4566:../src/wolfcrypt/src/aes.c **** 
4567:../src/wolfcrypt/src/aes.c **** #if (defined(HAVE_AESGCM) && !defined(WC_NO_RNG)) || defined(HAVE_AESCCM)
4568:../src/wolfcrypt/src/aes.c **** static WC_INLINE void IncCtr(byte* ctr, word32 ctrSz)
4569:../src/wolfcrypt/src/aes.c **** {
 8608                             		.loc 2 4569 1
 8609 0000 7E AA                   		push.l	r10
 8610                             	.LCFI45:
 8611 0002 71 0A F4                		add	#-12, r0, r10
 8612                             	.LCFI46:
 8613 0005 EF A0                   		mov.L	r10, r0
 8614 0007 E7 A1 01                		mov.L	r1, 4[r10]
 8615 000a E7 A2 02                		mov.L	r2, 8[r10]
4570:../src/wolfcrypt/src/aes.c ****     int i;
4571:../src/wolfcrypt/src/aes.c ****     for (i = ctrSz-1; i >= 0; i--) {
 8616                             		.loc 2 4571 19
 8617 000d ED A5 02                		mov.L	8[r10], r5
 8618 0010 60 15                   		sub	#1, r5
 8619                             		.loc 2 4571 12
 8620 0012 E3 A5                   		mov.L	r5, [r10]
 8621                             		.loc 2 4571 5
 8622 0014 2E 1D                   		bra	.L120
 8623                             	.L123:
4572:../src/wolfcrypt/src/aes.c ****         if (++ctr[i])
 8624                             		.loc 2 4572 18
 8625 0016 EC A5                   		mov.L	[r10], r5
 8626 0018 ED A4 01                		mov.L	4[r10], r4
 8627 001b 4B 45                   		add	r4, r5
 8628 001d CC 54                   		mov.B	[r5], r4
 8629                             		.loc 2 4572 13
 8630 001f 62 14                   		add	#1, r4
 8631                             		.loc 2 4572 12
 8632 0021 C3 54                   		mov.B	r4, [r5]
 8633                             		.loc 2 4572 18
 8634 0023 CC 55                   		mov.B	[r5], r5
 8635                             		.loc 2 4572 12
 8636 0025 5B 55                   		movu.B	r5, r5
 8637 0027 61 05                   		cmp	#0, r5
 8638 0029 21 10                   		bne	.L124
4571:../src/wolfcrypt/src/aes.c ****         if (++ctr[i])
 8639                             		.loc 2 4571 32 discriminator 2
 8640 002b EC A5                   		mov.L	[r10], r5
 8641 002d 60 15                   		sub	#1, r5
 8642 002f E3 A5                   		mov.L	r5, [r10]
 8643                             	.L120:
4571:../src/wolfcrypt/src/aes.c ****         if (++ctr[i])
 8644                             		.loc 2 4571 5 discriminator 1
 8645 0031 EC A5                   		mov.L	[r10], r5
 8646 0033 61 05                   		cmp	#0, r5
 8647 0035 28 E1                   		bge	.L123
4573:../src/wolfcrypt/src/aes.c ****             break;
4574:../src/wolfcrypt/src/aes.c ****     }
4575:../src/wolfcrypt/src/aes.c **** }
 8648                             		.loc 2 4575 1
 8649 0037 2E 03                   		bra	.L122
 8650                             	.L124:
4573:../src/wolfcrypt/src/aes.c ****             break;
 8651                             		.loc 2 4573 13
 8652 0039 03                      		nop
 8653                             	.L122:
 8654                             		.loc 2 4575 1
 8655 003a 03                      		nop
 8656 003b 3F AA 04                		rtsd	#16, r10-r10
 8657                             	.LFE53:
 8659                             		.section	.text.IncrementGcmCounter,"ax",@progbits
 8661                             	_IncrementGcmCounter:
 8662                             	.LFB54:
4576:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AESGCM || HAVE_AESCCM */
4577:../src/wolfcrypt/src/aes.c **** 
4578:../src/wolfcrypt/src/aes.c **** 
4579:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AESGCM
4580:../src/wolfcrypt/src/aes.c **** 
4581:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESGCM_STREAM
4582:../src/wolfcrypt/src/aes.c ****     /* Access initialization counter data. */
4583:../src/wolfcrypt/src/aes.c ****     #define AES_INITCTR(aes)        ((aes)->streamData + 0 * AES_BLOCK_SIZE)
4584:../src/wolfcrypt/src/aes.c ****     /* Access counter data. */
4585:../src/wolfcrypt/src/aes.c ****     #define AES_COUNTER(aes)        ((aes)->streamData + 1 * AES_BLOCK_SIZE)
4586:../src/wolfcrypt/src/aes.c ****     /* Access tag data. */
4587:../src/wolfcrypt/src/aes.c ****     #define AES_TAG(aes)            ((aes)->streamData + 2 * AES_BLOCK_SIZE)
4588:../src/wolfcrypt/src/aes.c ****     /* Access last GHASH block. */
4589:../src/wolfcrypt/src/aes.c ****     #define AES_LASTGBLOCK(aes)     ((aes)->streamData + 3 * AES_BLOCK_SIZE)
4590:../src/wolfcrypt/src/aes.c ****     /* Access last encrypted block. */
4591:../src/wolfcrypt/src/aes.c ****     #define AES_LASTBLOCK(aes)      ((aes)->streamData + 4 * AES_BLOCK_SIZE)
4592:../src/wolfcrypt/src/aes.c **** #endif
4593:../src/wolfcrypt/src/aes.c **** 
4594:../src/wolfcrypt/src/aes.c **** #if defined(HAVE_COLDFIRE_SEC)
4595:../src/wolfcrypt/src/aes.c ****     #error "Coldfire SEC doesn't currently support AES-GCM mode"
4596:../src/wolfcrypt/src/aes.c **** 
4597:../src/wolfcrypt/src/aes.c **** #endif
4598:../src/wolfcrypt/src/aes.c **** 
4599:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_ARMASM
4600:../src/wolfcrypt/src/aes.c ****     /* implementation is located in wolfcrypt/src/port/arm/armv8-aes.c */
4601:../src/wolfcrypt/src/aes.c **** 
4602:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_AFALG)
4603:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/afalg/afalg_aes.c */
4604:../src/wolfcrypt/src/aes.c **** 
4605:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_KCAPI_AES)
4606:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/kcapi/kcapi_aes.c */
4607:../src/wolfcrypt/src/aes.c **** 
4608:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_DEVCRYPTO_AES)
4609:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/devcrypt/devcrypto_aes.c */
4610:../src/wolfcrypt/src/aes.c **** 
4611:../src/wolfcrypt/src/aes.c **** #else /* software + AESNI implementation */
4612:../src/wolfcrypt/src/aes.c **** 
4613:../src/wolfcrypt/src/aes.c **** #if !defined(FREESCALE_LTC_AES_GCM)
4614:../src/wolfcrypt/src/aes.c **** static WC_INLINE void IncrementGcmCounter(byte* inOutCtr)
4615:../src/wolfcrypt/src/aes.c **** {
 8663                             		.loc 2 4615 1
 8664 0000 7E AA                   		push.l	r10
 8665                             	.LCFI47:
 8666 0002 71 0A F8                		add	#-8, r0, r10
 8667                             	.LCFI48:
 8668 0005 EF A0                   		mov.L	r10, r0
 8669 0007 E7 A1 01                		mov.L	r1, 4[r10]
4616:../src/wolfcrypt/src/aes.c ****     int i;
4617:../src/wolfcrypt/src/aes.c **** 
4618:../src/wolfcrypt/src/aes.c ****     /* in network byte order so start at end and work back */
4619:../src/wolfcrypt/src/aes.c ****     for (i = AES_BLOCK_SIZE - 1; i >= AES_BLOCK_SIZE - CTR_SZ; i--) {
 8670                             		.loc 2 4619 12
 8671 000a F8 A6 0F                		mov.L	#15, [r10]
 8672                             		.loc 2 4619 5
 8673 000d 2E 1D                   		bra	.L126
 8674                             	.L129:
4620:../src/wolfcrypt/src/aes.c ****         if (++inOutCtr[i])  /* we're done unless we overflow */
 8675                             		.loc 2 4620 23
 8676 000f EC A5                   		mov.L	[r10], r5
 8677 0011 ED A4 01                		mov.L	4[r10], r4
 8678 0014 4B 45                   		add	r4, r5
 8679 0016 CC 54                   		mov.B	[r5], r4
 8680                             		.loc 2 4620 13
 8681 0018 62 14                   		add	#1, r4
 8682                             		.loc 2 4620 12
 8683 001a C3 54                   		mov.B	r4, [r5]
 8684                             		.loc 2 4620 23
 8685 001c CC 55                   		mov.B	[r5], r5
 8686                             		.loc 2 4620 12
 8687 001e 5B 55                   		movu.B	r5, r5
 8688 0020 61 05                   		cmp	#0, r5
 8689 0022 21 10                   		bne	.L130
4619:../src/wolfcrypt/src/aes.c ****         if (++inOutCtr[i])  /* we're done unless we overflow */
 8690                             		.loc 2 4619 65 discriminator 2
 8691 0024 EC A5                   		mov.L	[r10], r5
 8692 0026 60 15                   		sub	#1, r5
 8693 0028 E3 A5                   		mov.L	r5, [r10]
 8694                             	.L126:
4619:../src/wolfcrypt/src/aes.c ****         if (++inOutCtr[i])  /* we're done unless we overflow */
 8695                             		.loc 2 4619 5 discriminator 1
 8696 002a EC A5                   		mov.L	[r10], r5
 8697 002c 61 B5                   		cmp	#11, r5
 8698 002e 2A E1                   		bgt	.L129
 8699 0030 2E 03                   		bra	.L125
 8700                             	.L130:
4621:../src/wolfcrypt/src/aes.c ****             return;
 8701                             		.loc 2 4621 13
 8702 0032 03                      		nop
 8703                             	.L125:
4622:../src/wolfcrypt/src/aes.c ****     }
4623:../src/wolfcrypt/src/aes.c **** }
 8704                             		.loc 2 4623 1
 8705 0033 3F AA 03                		rtsd	#12, r10-r10
 8706                             	.LFE54:
 8708                             		.section	.text.wc_AesGcmSetKey,"ax",@progbits
 8709                             		.global	_wc_AesGcmSetKey
 8711                             	_wc_AesGcmSetKey:
 8712                             	.LFB55:
4624:../src/wolfcrypt/src/aes.c **** #endif /* !FREESCALE_LTC_AES_GCM */
4625:../src/wolfcrypt/src/aes.c **** 
4626:../src/wolfcrypt/src/aes.c **** #if defined(GCM_SMALL) || defined(GCM_TABLE) || defined(GCM_TABLE_4BIT)
4627:../src/wolfcrypt/src/aes.c **** 
4628:../src/wolfcrypt/src/aes.c **** static WC_INLINE void FlattenSzInBits(byte* buf, word32 sz)
4629:../src/wolfcrypt/src/aes.c **** {
4630:../src/wolfcrypt/src/aes.c ****     /* Multiply the sz by 8 */
4631:../src/wolfcrypt/src/aes.c ****     word32 szHi = (sz >> (8*sizeof(sz) - 3));
4632:../src/wolfcrypt/src/aes.c ****     sz <<= 3;
4633:../src/wolfcrypt/src/aes.c **** 
4634:../src/wolfcrypt/src/aes.c ****     /* copy over the words of the sz into the destination buffer */
4635:../src/wolfcrypt/src/aes.c ****     buf[0] = (szHi >> 24) & 0xff;
4636:../src/wolfcrypt/src/aes.c ****     buf[1] = (szHi >> 16) & 0xff;
4637:../src/wolfcrypt/src/aes.c ****     buf[2] = (szHi >>  8) & 0xff;
4638:../src/wolfcrypt/src/aes.c ****     buf[3] = szHi & 0xff;
4639:../src/wolfcrypt/src/aes.c ****     buf[4] = (sz >> 24) & 0xff;
4640:../src/wolfcrypt/src/aes.c ****     buf[5] = (sz >> 16) & 0xff;
4641:../src/wolfcrypt/src/aes.c ****     buf[6] = (sz >>  8) & 0xff;
4642:../src/wolfcrypt/src/aes.c ****     buf[7] = sz & 0xff;
4643:../src/wolfcrypt/src/aes.c **** }
4644:../src/wolfcrypt/src/aes.c **** 
4645:../src/wolfcrypt/src/aes.c **** 
4646:../src/wolfcrypt/src/aes.c **** static WC_INLINE void RIGHTSHIFTX(byte* x)
4647:../src/wolfcrypt/src/aes.c **** {
4648:../src/wolfcrypt/src/aes.c ****     int i;
4649:../src/wolfcrypt/src/aes.c ****     int carryIn = 0;
4650:../src/wolfcrypt/src/aes.c ****     byte borrow = (0x00 - (x[15] & 0x01)) & 0xE1;
4651:../src/wolfcrypt/src/aes.c **** 
4652:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < AES_BLOCK_SIZE; i++) {
4653:../src/wolfcrypt/src/aes.c ****         int carryOut = (x[i] & 0x01) << 7;
4654:../src/wolfcrypt/src/aes.c ****         x[i] = (byte) ((x[i] >> 1) | carryIn);
4655:../src/wolfcrypt/src/aes.c ****         carryIn = carryOut;
4656:../src/wolfcrypt/src/aes.c ****     }
4657:../src/wolfcrypt/src/aes.c ****     x[0] ^= borrow;
4658:../src/wolfcrypt/src/aes.c **** }
4659:../src/wolfcrypt/src/aes.c **** 
4660:../src/wolfcrypt/src/aes.c **** #endif /* defined(GCM_SMALL) || defined(GCM_TABLE) || defined(GCM_TABLE_4BIT) */
4661:../src/wolfcrypt/src/aes.c **** 
4662:../src/wolfcrypt/src/aes.c **** 
4663:../src/wolfcrypt/src/aes.c **** #ifdef GCM_TABLE
4664:../src/wolfcrypt/src/aes.c **** 
4665:../src/wolfcrypt/src/aes.c **** static void GenerateM0(Aes* aes)
4666:../src/wolfcrypt/src/aes.c **** {
4667:../src/wolfcrypt/src/aes.c ****     int i, j;
4668:../src/wolfcrypt/src/aes.c ****     byte (*m)[AES_BLOCK_SIZE] = aes->M0;
4669:../src/wolfcrypt/src/aes.c **** 
4670:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[128], aes->H, AES_BLOCK_SIZE);
4671:../src/wolfcrypt/src/aes.c **** 
4672:../src/wolfcrypt/src/aes.c ****     for (i = 64; i > 0; i /= 2) {
4673:../src/wolfcrypt/src/aes.c ****         XMEMCPY(m[i], m[i*2], AES_BLOCK_SIZE);
4674:../src/wolfcrypt/src/aes.c ****         RIGHTSHIFTX(m[i]);
4675:../src/wolfcrypt/src/aes.c ****     }
4676:../src/wolfcrypt/src/aes.c **** 
4677:../src/wolfcrypt/src/aes.c ****     for (i = 2; i < 256; i *= 2) {
4678:../src/wolfcrypt/src/aes.c ****         for (j = 1; j < i; j++) {
4679:../src/wolfcrypt/src/aes.c ****             XMEMCPY(m[i+j], m[i], AES_BLOCK_SIZE);
4680:../src/wolfcrypt/src/aes.c ****             xorbuf(m[i+j], m[j], AES_BLOCK_SIZE);
4681:../src/wolfcrypt/src/aes.c ****         }
4682:../src/wolfcrypt/src/aes.c ****     }
4683:../src/wolfcrypt/src/aes.c **** 
4684:../src/wolfcrypt/src/aes.c ****     XMEMSET(m[0], 0, AES_BLOCK_SIZE);
4685:../src/wolfcrypt/src/aes.c **** }
4686:../src/wolfcrypt/src/aes.c **** 
4687:../src/wolfcrypt/src/aes.c **** #elif defined(GCM_TABLE_4BIT)
4688:../src/wolfcrypt/src/aes.c **** 
4689:../src/wolfcrypt/src/aes.c **** static WC_INLINE void Shift4_M0(byte *r8, byte* z8)
4690:../src/wolfcrypt/src/aes.c **** {
4691:../src/wolfcrypt/src/aes.c ****     int i;
4692:../src/wolfcrypt/src/aes.c ****     for (i = 15; i > 0; i--)
4693:../src/wolfcrypt/src/aes.c ****         r8[i] = (z8[i-1] << 4) | (z8[i] >> 4);
4694:../src/wolfcrypt/src/aes.c ****     r8[0] = z8[0] >> 4;
4695:../src/wolfcrypt/src/aes.c **** }
4696:../src/wolfcrypt/src/aes.c **** 
4697:../src/wolfcrypt/src/aes.c **** static void GenerateM0(Aes* aes)
4698:../src/wolfcrypt/src/aes.c **** {
4699:../src/wolfcrypt/src/aes.c **** #if !defined(BIG_ENDIAN_ORDER) && !defined(WC_16BIT_CPU)
4700:../src/wolfcrypt/src/aes.c ****     int i;
4701:../src/wolfcrypt/src/aes.c **** #endif
4702:../src/wolfcrypt/src/aes.c ****     byte (*m)[AES_BLOCK_SIZE] = aes->M0;
4703:../src/wolfcrypt/src/aes.c **** 
4704:../src/wolfcrypt/src/aes.c ****     /* 0 times -> 0x0 */
4705:../src/wolfcrypt/src/aes.c ****     XMEMSET(m[0x0], 0, AES_BLOCK_SIZE);
4706:../src/wolfcrypt/src/aes.c ****     /* 1 times -> 0x8 */
4707:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0x8], aes->H, AES_BLOCK_SIZE);
4708:../src/wolfcrypt/src/aes.c ****     /* 2 times -> 0x4 */
4709:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0x4], m[0x8], AES_BLOCK_SIZE);
4710:../src/wolfcrypt/src/aes.c ****     RIGHTSHIFTX(m[0x4]);
4711:../src/wolfcrypt/src/aes.c ****     /* 4 times -> 0x2 */
4712:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0x2], m[0x4], AES_BLOCK_SIZE);
4713:../src/wolfcrypt/src/aes.c ****     RIGHTSHIFTX(m[0x2]);
4714:../src/wolfcrypt/src/aes.c ****     /* 8 times -> 0x1 */
4715:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0x1], m[0x2], AES_BLOCK_SIZE);
4716:../src/wolfcrypt/src/aes.c ****     RIGHTSHIFTX(m[0x1]);
4717:../src/wolfcrypt/src/aes.c **** 
4718:../src/wolfcrypt/src/aes.c ****     /* 0x3 */
4719:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0x3], m[0x2], AES_BLOCK_SIZE);
4720:../src/wolfcrypt/src/aes.c ****     xorbuf (m[0x3], m[0x1], AES_BLOCK_SIZE);
4721:../src/wolfcrypt/src/aes.c **** 
4722:../src/wolfcrypt/src/aes.c ****     /* 0x5 -> 0x7 */
4723:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0x5], m[0x4], AES_BLOCK_SIZE);
4724:../src/wolfcrypt/src/aes.c ****     xorbuf (m[0x5], m[0x1], AES_BLOCK_SIZE);
4725:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0x6], m[0x4], AES_BLOCK_SIZE);
4726:../src/wolfcrypt/src/aes.c ****     xorbuf (m[0x6], m[0x2], AES_BLOCK_SIZE);
4727:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0x7], m[0x4], AES_BLOCK_SIZE);
4728:../src/wolfcrypt/src/aes.c ****     xorbuf (m[0x7], m[0x3], AES_BLOCK_SIZE);
4729:../src/wolfcrypt/src/aes.c **** 
4730:../src/wolfcrypt/src/aes.c ****     /* 0x9 -> 0xf */
4731:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0x9], m[0x8], AES_BLOCK_SIZE);
4732:../src/wolfcrypt/src/aes.c ****     xorbuf (m[0x9], m[0x1], AES_BLOCK_SIZE);
4733:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0xa], m[0x8], AES_BLOCK_SIZE);
4734:../src/wolfcrypt/src/aes.c ****     xorbuf (m[0xa], m[0x2], AES_BLOCK_SIZE);
4735:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0xb], m[0x8], AES_BLOCK_SIZE);
4736:../src/wolfcrypt/src/aes.c ****     xorbuf (m[0xb], m[0x3], AES_BLOCK_SIZE);
4737:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0xc], m[0x8], AES_BLOCK_SIZE);
4738:../src/wolfcrypt/src/aes.c ****     xorbuf (m[0xc], m[0x4], AES_BLOCK_SIZE);
4739:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0xd], m[0x8], AES_BLOCK_SIZE);
4740:../src/wolfcrypt/src/aes.c ****     xorbuf (m[0xd], m[0x5], AES_BLOCK_SIZE);
4741:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0xe], m[0x8], AES_BLOCK_SIZE);
4742:../src/wolfcrypt/src/aes.c ****     xorbuf (m[0xe], m[0x6], AES_BLOCK_SIZE);
4743:../src/wolfcrypt/src/aes.c ****     XMEMCPY(m[0xf], m[0x8], AES_BLOCK_SIZE);
4744:../src/wolfcrypt/src/aes.c ****     xorbuf (m[0xf], m[0x7], AES_BLOCK_SIZE);
4745:../src/wolfcrypt/src/aes.c **** 
4746:../src/wolfcrypt/src/aes.c **** #if !defined(BIG_ENDIAN_ORDER) && !defined(WC_16BIT_CPU)
4747:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < 16; i++) {
4748:../src/wolfcrypt/src/aes.c ****         Shift4_M0(m[16+i], m[i]);
4749:../src/wolfcrypt/src/aes.c ****     }
4750:../src/wolfcrypt/src/aes.c **** #endif
4751:../src/wolfcrypt/src/aes.c **** }
4752:../src/wolfcrypt/src/aes.c **** 
4753:../src/wolfcrypt/src/aes.c **** #endif /* GCM_TABLE */
4754:../src/wolfcrypt/src/aes.c **** 
4755:../src/wolfcrypt/src/aes.c **** /* Software AES - GCM SetKey */
4756:../src/wolfcrypt/src/aes.c **** int wc_AesGcmSetKey(Aes* aes, const byte* key, word32 len)
4757:../src/wolfcrypt/src/aes.c **** {
 8713                             		.loc 2 4757 1
 8714 0000 7E AA                   		push.l	r10
 8715                             	.LCFI49:
 8716 0002 71 0A E0                		add	#-32, r0, r10
 8717                             	.LCFI50:
 8718 0005 71 A0 FC                		add	#-4, r10, r0
 8719                             	.LCFI51:
 8720 0008 E7 A1 05                		mov.L	r1, 20[r10]
 8721 000b E7 A2 06                		mov.L	r2, 24[r10]
 8722 000e E7 A3 07                		mov.L	r3, 28[r10]
4758:../src/wolfcrypt/src/aes.c ****     int  ret;
4759:../src/wolfcrypt/src/aes.c ****     byte iv[AES_BLOCK_SIZE];
4760:../src/wolfcrypt/src/aes.c **** 
4761:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_IMX6_CAAM_BLOB
4762:../src/wolfcrypt/src/aes.c ****         byte   local[32];
4763:../src/wolfcrypt/src/aes.c ****         word32 localSz = 32;
4764:../src/wolfcrypt/src/aes.c **** 
4765:../src/wolfcrypt/src/aes.c ****         if (len == (16 + WC_CAAM_BLOB_SZ) ||
4766:../src/wolfcrypt/src/aes.c ****           len == (24 + WC_CAAM_BLOB_SZ) ||
4767:../src/wolfcrypt/src/aes.c ****           len == (32 + WC_CAAM_BLOB_SZ)) {
4768:../src/wolfcrypt/src/aes.c ****             if (wc_caamOpenBlob((byte*)key, len, local, &localSz) != 0) {
4769:../src/wolfcrypt/src/aes.c ****                  return BAD_FUNC_ARG;
4770:../src/wolfcrypt/src/aes.c ****             }
4771:../src/wolfcrypt/src/aes.c **** 
4772:../src/wolfcrypt/src/aes.c ****             /* set local values */
4773:../src/wolfcrypt/src/aes.c ****             key = local;
4774:../src/wolfcrypt/src/aes.c ****             len = localSz;
4775:../src/wolfcrypt/src/aes.c ****         }
4776:../src/wolfcrypt/src/aes.c ****     #endif
4777:../src/wolfcrypt/src/aes.c **** 
4778:../src/wolfcrypt/src/aes.c ****     if (!((len == 16) || (len == 24) || (len == 32)))
 8723                             		.loc 2 4778 8
 8724 0011 ED A5 07                		mov.L	28[r10], r5
 8725 0014 75 55 10                		cmp	#16, r5
 8726 0017 20 17                   		beq	.L132
 8727                             		.loc 2 4778 23 discriminator 1
 8728 0019 ED A5 07                		mov.L	28[r10], r5
 8729 001c 75 55 18                		cmp	#24, r5
 8730 001f 20 0F                   		beq	.L132
 8731                             		.loc 2 4778 9 discriminator 2
 8732 0021 ED A5 07                		mov.L	28[r10], r5
 8733 0024 75 55 20                		cmp	#32, r5
 8734 0027 17                      		beq	.L132
4779:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
 8735                             		.loc 2 4779 16
 8736 0028 FB 5A 53 FF             		mov.L	#-173, r5
 8737 002c 2E 52                   		bra	.L136
 8738                             	.L132:
4780:../src/wolfcrypt/src/aes.c ****     if (aes == NULL) {
 8739                             		.loc 2 4780 8
 8740 002e ED A5 05                		mov.L	20[r10], r5
 8741 0031 61 05                   		cmp	#0, r5
 8742 0033 1F                      		bne	.L134
4781:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_IMX6_CAAM_BLOB
4782:../src/wolfcrypt/src/aes.c ****         ForceZero(local, sizeof(local));
4783:../src/wolfcrypt/src/aes.c **** #endif
4784:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
 8743                             		.loc 2 4784 16
 8744 0034 FB 5A 53 FF             		mov.L	#-173, r5
 8745 0038 2E 46                   		bra	.L136
 8746                             	.L134:
4785:../src/wolfcrypt/src/aes.c ****     }
4786:../src/wolfcrypt/src/aes.c **** 
4787:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
4788:../src/wolfcrypt/src/aes.c ****     XMEMSET(aes->aadH, 0, sizeof(aes->aadH));
4789:../src/wolfcrypt/src/aes.c ****     aes->aadLen = 0;
4790:../src/wolfcrypt/src/aes.c **** #endif
4791:../src/wolfcrypt/src/aes.c ****     XMEMSET(iv, 0, AES_BLOCK_SIZE);
 8747                             		.loc 2 4791 5
 8748 003a 71 A5 04                		add	#4, r10, r5
 8749 003d 75 43 10                		mov.L	#16, r3
 8750 0040 66 02                   		mov.L	#0, r2
 8751 0042 EF 51                   		mov.L	r5, r1
 8752 0044 05 00 00 00             		bsr	_memset
4792:../src/wolfcrypt/src/aes.c ****     ret = wc_AesSetKey(aes, key, len, iv, AES_ENCRYPTION);
 8753                             		.loc 2 4792 11
 8754 0048 71 A5 04                		add	#4, r10, r5
 8755 004b F8 06 00                		mov.L	#0, [r0]
 8756 004e EF 54                   		mov.L	r5, r4
 8757 0050 ED A3 07                		mov.L	28[r10], r3
 8758 0053 ED A2 06                		mov.L	24[r10], r2
 8759 0056 ED A1 05                		mov.L	20[r10], r1
 8760 0059 05 00 00 00             		bsr	_wc_AesSetKey
 8761 005d E3 A1                   		mov.L	r1, [r10]
4793:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESGCM_STREAM
4794:../src/wolfcrypt/src/aes.c ****     aes->gcmKeySet = 1;
4795:../src/wolfcrypt/src/aes.c **** #endif
4796:../src/wolfcrypt/src/aes.c **** 
4797:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_AESNI
4798:../src/wolfcrypt/src/aes.c ****         /* AES-NI code generates its own H value. */
4799:../src/wolfcrypt/src/aes.c ****         if (haveAESNI)
4800:../src/wolfcrypt/src/aes.c ****             return ret;
4801:../src/wolfcrypt/src/aes.c ****     #endif /* WOLFSSL_AESNI */
4802:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_SECO_CAAM)
4803:../src/wolfcrypt/src/aes.c ****         if (aes->devId == WOLFSSL_SECO_DEVID) {
4804:../src/wolfcrypt/src/aes.c ****             return ret;
4805:../src/wolfcrypt/src/aes.c ****         }
4806:../src/wolfcrypt/src/aes.c ****     #endif /* WOLFSSL_SECO_CAAM */
4807:../src/wolfcrypt/src/aes.c **** 
4808:../src/wolfcrypt/src/aes.c **** #if !defined(FREESCALE_LTC_AES_GCM)
4809:../src/wolfcrypt/src/aes.c ****     if (ret == 0)
 8762                             		.loc 2 4809 8
 8763 005f EC A5                   		mov.L	[r10], r5
 8764 0061 61 05                   		cmp	#0, r5
 8765 0063 21 19                   		bne	.L137
4810:../src/wolfcrypt/src/aes.c ****         ret = wc_AesEncrypt(aes, iv, aes->H);
 8766                             		.loc 2 4810 41
 8767 0065 ED A5 05                		mov.L	20[r10], r5
 8768 0068 72 54 24 01             		add	#0x124, r5, r4
 8769                             		.loc 2 4810 15
 8770 006c 71 A5 04                		add	#4, r10, r5
 8771 006f EF 43                   		mov.L	r4, r3
 8772 0071 EF 52                   		mov.L	r5, r2
 8773 0073 ED A1 05                		mov.L	20[r10], r1
 8774 0076 05 00 00 00             		bsr	_wc_AesEncrypt
 8775 007a E3 A1                   		mov.L	r1, [r10]
 8776                             	.L137:
4811:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
4812:../src/wolfcrypt/src/aes.c ****     #if defined(GCM_TABLE) || defined(GCM_TABLE_4BIT)
4813:../src/wolfcrypt/src/aes.c ****         GenerateM0(aes);
4814:../src/wolfcrypt/src/aes.c ****     #endif /* GCM_TABLE */
4815:../src/wolfcrypt/src/aes.c ****     }
4816:../src/wolfcrypt/src/aes.c **** #endif /* FREESCALE_LTC_AES_GCM */
4817:../src/wolfcrypt/src/aes.c **** 
4818:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_XILINX_CRYPT)
4819:../src/wolfcrypt/src/aes.c ****     wc_AesGcmSetKey_ex(aes, key, len, XSECURE_CSU_AES_KEY_SRC_KUP);
4820:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_AFALG_XILINX_AES)
4821:../src/wolfcrypt/src/aes.c ****     wc_AesGcmSetKey_ex(aes, key, len, 0);
4822:../src/wolfcrypt/src/aes.c **** #endif
4823:../src/wolfcrypt/src/aes.c **** 
4824:../src/wolfcrypt/src/aes.c **** #ifdef WOLF_CRYPTO_CB
4825:../src/wolfcrypt/src/aes.c ****     if (aes->devId != INVALID_DEVID) {
4826:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->devKey, key, len);
4827:../src/wolfcrypt/src/aes.c ****     }
4828:../src/wolfcrypt/src/aes.c **** #endif
4829:../src/wolfcrypt/src/aes.c **** 
4830:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_IMX6_CAAM_BLOB
4831:../src/wolfcrypt/src/aes.c ****     ForceZero(local, sizeof(local));
4832:../src/wolfcrypt/src/aes.c **** #endif
4833:../src/wolfcrypt/src/aes.c ****     return ret;
 8777                             		.loc 2 4833 12
 8778 007c EC A5                   		mov.L	[r10], r5
 8779                             	.L136:
4834:../src/wolfcrypt/src/aes.c **** }
 8780                             		.loc 2 4834 1 discriminator 1
 8781 007e EF 51                   		mov.L	r5, r1
 8782 0080 3F AA 0A                		rtsd	#40, r10-r10
 8783                             	.LFE55:
 8785                             		.section	.text.GMULT,"ax",@progbits
 8787                             	_GMULT:
 8788                             	.LFB56:
4835:../src/wolfcrypt/src/aes.c **** 
4836:../src/wolfcrypt/src/aes.c **** 
4837:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
4838:../src/wolfcrypt/src/aes.c **** 
4839:../src/wolfcrypt/src/aes.c **** #if defined(USE_INTEL_SPEEDUP)
4840:../src/wolfcrypt/src/aes.c ****     #define HAVE_INTEL_AVX1
4841:../src/wolfcrypt/src/aes.c ****     #define HAVE_INTEL_AVX2
4842:../src/wolfcrypt/src/aes.c **** #endif /* USE_INTEL_SPEEDUP */
4843:../src/wolfcrypt/src/aes.c **** 
4844:../src/wolfcrypt/src/aes.c **** #ifndef _MSC_VER
4845:../src/wolfcrypt/src/aes.c **** 
4846:../src/wolfcrypt/src/aes.c **** void AES_GCM_encrypt(const unsigned char *in, unsigned char *out,
4847:../src/wolfcrypt/src/aes.c ****                      const unsigned char* addt, const unsigned char* ivec,
4848:../src/wolfcrypt/src/aes.c ****                      unsigned char *tag, word32 nbytes,
4849:../src/wolfcrypt/src/aes.c ****                      word32 abytes, word32 ibytes,
4850:../src/wolfcrypt/src/aes.c ****                      word32 tbytes, const unsigned char* key, int nr)
4851:../src/wolfcrypt/src/aes.c ****                      XASM_LINK("AES_GCM_encrypt");
4852:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX1
4853:../src/wolfcrypt/src/aes.c **** void AES_GCM_encrypt_avx1(const unsigned char *in, unsigned char *out,
4854:../src/wolfcrypt/src/aes.c ****                           const unsigned char* addt, const unsigned char* ivec,
4855:../src/wolfcrypt/src/aes.c ****                           unsigned char *tag, word32 nbytes,
4856:../src/wolfcrypt/src/aes.c ****                           word32 abytes, word32 ibytes,
4857:../src/wolfcrypt/src/aes.c ****                           word32 tbytes, const unsigned char* key,
4858:../src/wolfcrypt/src/aes.c ****                           int nr)
4859:../src/wolfcrypt/src/aes.c ****                           XASM_LINK("AES_GCM_encrypt_avx1");
4860:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX2
4861:../src/wolfcrypt/src/aes.c **** void AES_GCM_encrypt_avx2(const unsigned char *in, unsigned char *out,
4862:../src/wolfcrypt/src/aes.c ****                           const unsigned char* addt, const unsigned char* ivec,
4863:../src/wolfcrypt/src/aes.c ****                           unsigned char *tag, word32 nbytes,
4864:../src/wolfcrypt/src/aes.c ****                           word32 abytes, word32 ibytes,
4865:../src/wolfcrypt/src/aes.c ****                           word32 tbytes, const unsigned char* key,
4866:../src/wolfcrypt/src/aes.c ****                           int nr)
4867:../src/wolfcrypt/src/aes.c ****                           XASM_LINK("AES_GCM_encrypt_avx2");
4868:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_INTEL_AVX2 */
4869:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_INTEL_AVX1 */
4870:../src/wolfcrypt/src/aes.c **** 
4871:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AES_DECRYPT
4872:../src/wolfcrypt/src/aes.c **** void AES_GCM_decrypt(const unsigned char *in, unsigned char *out,
4873:../src/wolfcrypt/src/aes.c ****                      const unsigned char* addt, const unsigned char* ivec,
4874:../src/wolfcrypt/src/aes.c ****                      const unsigned char *tag, word32 nbytes, word32 abytes,
4875:../src/wolfcrypt/src/aes.c ****                      word32 ibytes, word32 tbytes, const unsigned char* key,
4876:../src/wolfcrypt/src/aes.c ****                      int nr, int* res)
4877:../src/wolfcrypt/src/aes.c ****                      XASM_LINK("AES_GCM_decrypt");
4878:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX1
4879:../src/wolfcrypt/src/aes.c **** void AES_GCM_decrypt_avx1(const unsigned char *in, unsigned char *out,
4880:../src/wolfcrypt/src/aes.c ****                           const unsigned char* addt, const unsigned char* ivec,
4881:../src/wolfcrypt/src/aes.c ****                           const unsigned char *tag, word32 nbytes,
4882:../src/wolfcrypt/src/aes.c ****                           word32 abytes, word32 ibytes, word32 tbytes,
4883:../src/wolfcrypt/src/aes.c ****                           const unsigned char* key, int nr, int* res)
4884:../src/wolfcrypt/src/aes.c ****                           XASM_LINK("AES_GCM_decrypt_avx1");
4885:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX2
4886:../src/wolfcrypt/src/aes.c **** void AES_GCM_decrypt_avx2(const unsigned char *in, unsigned char *out,
4887:../src/wolfcrypt/src/aes.c ****                           const unsigned char* addt, const unsigned char* ivec,
4888:../src/wolfcrypt/src/aes.c ****                           const unsigned char *tag, word32 nbytes,
4889:../src/wolfcrypt/src/aes.c ****                           word32 abytes, word32 ibytes, word32 tbytes,
4890:../src/wolfcrypt/src/aes.c ****                           const unsigned char* key, int nr, int* res)
4891:../src/wolfcrypt/src/aes.c ****                           XASM_LINK("AES_GCM_decrypt_avx2");
4892:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_INTEL_AVX2 */
4893:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_INTEL_AVX1 */
4894:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_DECRYPT */
4895:../src/wolfcrypt/src/aes.c **** 
4896:../src/wolfcrypt/src/aes.c **** #else /* _MSC_VER */
4897:../src/wolfcrypt/src/aes.c **** 
4898:../src/wolfcrypt/src/aes.c **** /* AESNI with Microsoft */
4899:../src/wolfcrypt/src/aes.c **** #ifdef __clang__
4900:../src/wolfcrypt/src/aes.c ****     /* With Clang the __m128i in emmintrin.h is union using:
4901:../src/wolfcrypt/src/aes.c ****      *     "unsigned __int64 m128i_u64[2];"
4902:../src/wolfcrypt/src/aes.c ****      * Notes: Must add "-maes -msse4.1 -mpclmul" to compiler flags.
4903:../src/wolfcrypt/src/aes.c ****      *        Must mark "aes_asm.asm" as included/compiled C file.
4904:../src/wolfcrypt/src/aes.c ****      */
4905:../src/wolfcrypt/src/aes.c ****     #define M128_INIT(x,y) { (long long)x, (long long)y }
4906:../src/wolfcrypt/src/aes.c **** #else
4907:../src/wolfcrypt/src/aes.c ****     /* Typically this is array of 16 int8's */
4908:../src/wolfcrypt/src/aes.c ****     #define S(w,z) ((char)((unsigned long long)(w) >> (8*(7-(z))) & 0xFF))
4909:../src/wolfcrypt/src/aes.c ****     #define M128_INIT(x,y) { S((x),7), S((x),6), S((x),5), S((x),4), \
4910:../src/wolfcrypt/src/aes.c ****                              S((x),3), S((x),2), S((x),1), S((x),0), \
4911:../src/wolfcrypt/src/aes.c ****                              S((y),7), S((y),6), S((y),5), S((y),4), \
4912:../src/wolfcrypt/src/aes.c ****                              S((y),3), S((y),2), S((y),1), S((y),0) }
4913:../src/wolfcrypt/src/aes.c **** #endif
4914:../src/wolfcrypt/src/aes.c **** 
4915:../src/wolfcrypt/src/aes.c **** static const __m128i MOD2_128 =
4916:../src/wolfcrypt/src/aes.c ****         M128_INIT(0x1, (long long int)0xc200000000000000UL);
4917:../src/wolfcrypt/src/aes.c **** 
4918:../src/wolfcrypt/src/aes.c **** 
4919:../src/wolfcrypt/src/aes.c **** /* See Intel Carry-Less Multiplication Instruction
4920:../src/wolfcrypt/src/aes.c ****  * and its Usage for Computing the GCM Mode White Paper
4921:../src/wolfcrypt/src/aes.c ****  * by Shay Gueron, Intel Mobility Group, Israel Development Center;
4922:../src/wolfcrypt/src/aes.c ****  * and Michael E. Kounavis, Intel Labs, Circuits and Systems Research */
4923:../src/wolfcrypt/src/aes.c **** 
4924:../src/wolfcrypt/src/aes.c **** 
4925:../src/wolfcrypt/src/aes.c **** /* Figure 9. AES-GCM - Encrypt With Single Block Ghash at a Time */
4926:../src/wolfcrypt/src/aes.c **** 
4927:../src/wolfcrypt/src/aes.c **** static const __m128i ONE   = M128_INIT(0x0, 0x1);
4928:../src/wolfcrypt/src/aes.c **** #ifndef AES_GCM_AESNI_NO_UNROLL
4929:../src/wolfcrypt/src/aes.c **** static const __m128i TWO   = M128_INIT(0x0, 0x2);
4930:../src/wolfcrypt/src/aes.c **** static const __m128i THREE = M128_INIT(0x0, 0x3);
4931:../src/wolfcrypt/src/aes.c **** static const __m128i FOUR  = M128_INIT(0x0, 0x4);
4932:../src/wolfcrypt/src/aes.c **** static const __m128i FIVE  = M128_INIT(0x0, 0x5);
4933:../src/wolfcrypt/src/aes.c **** static const __m128i SIX   = M128_INIT(0x0, 0x6);
4934:../src/wolfcrypt/src/aes.c **** static const __m128i SEVEN = M128_INIT(0x0, 0x7);
4935:../src/wolfcrypt/src/aes.c **** static const __m128i EIGHT = M128_INIT(0x0, 0x8);
4936:../src/wolfcrypt/src/aes.c **** #endif
4937:../src/wolfcrypt/src/aes.c **** static const __m128i BSWAP_EPI64 =
4938:../src/wolfcrypt/src/aes.c ****         M128_INIT(0x0001020304050607, 0x08090a0b0c0d0e0f);
4939:../src/wolfcrypt/src/aes.c **** static const __m128i BSWAP_MASK =
4940:../src/wolfcrypt/src/aes.c ****         M128_INIT(0x08090a0b0c0d0e0f, 0x0001020304050607);
4941:../src/wolfcrypt/src/aes.c **** 
4942:../src/wolfcrypt/src/aes.c **** 
4943:../src/wolfcrypt/src/aes.c **** /* The following are for MSC based builds which do not allow
4944:../src/wolfcrypt/src/aes.c ****  * inline assembly. Intrinsic functions are used instead. */
4945:../src/wolfcrypt/src/aes.c **** 
4946:../src/wolfcrypt/src/aes.c **** #define aes_gcm_calc_iv_12(KEY, ivec, nr, H, Y, T)         \
4947:../src/wolfcrypt/src/aes.c **** do                                                         \
4948:../src/wolfcrypt/src/aes.c **** {                                                          \
4949:../src/wolfcrypt/src/aes.c ****     word32 iv12[4];                                        \
4950:../src/wolfcrypt/src/aes.c ****     iv12[0] = *(word32*)&ivec[0];                          \
4951:../src/wolfcrypt/src/aes.c ****     iv12[1] = *(word32*)&ivec[4];                          \
4952:../src/wolfcrypt/src/aes.c ****     iv12[2] = *(word32*)&ivec[8];                          \
4953:../src/wolfcrypt/src/aes.c ****     iv12[3] = 0x01000000;                                  \
4954:../src/wolfcrypt/src/aes.c ****     Y = _mm_loadu_si128((__m128i*)iv12);                   \
4955:../src/wolfcrypt/src/aes.c ****                                                            \
4956:../src/wolfcrypt/src/aes.c ****     /* (Compute E[ZERO, KS] and E[Y0, KS] together */      \
4957:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_load_si128(&KEY[0]);                        \
4958:../src/wolfcrypt/src/aes.c ****     tmp2 = _mm_xor_si128(Y, KEY[0]);                       \
4959:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[1]);                 \
4960:../src/wolfcrypt/src/aes.c ****     tmp2 = _mm_aesenc_si128(tmp2, KEY[1]);                 \
4961:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[2]);                 \
4962:../src/wolfcrypt/src/aes.c ****     tmp2 = _mm_aesenc_si128(tmp2, KEY[2]);                 \
4963:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[3]);                 \
4964:../src/wolfcrypt/src/aes.c ****     tmp2 = _mm_aesenc_si128(tmp2, KEY[3]);                 \
4965:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[4]);                 \
4966:../src/wolfcrypt/src/aes.c ****     tmp2 = _mm_aesenc_si128(tmp2, KEY[4]);                 \
4967:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[5]);                 \
4968:../src/wolfcrypt/src/aes.c ****     tmp2 = _mm_aesenc_si128(tmp2, KEY[5]);                 \
4969:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[6]);                 \
4970:../src/wolfcrypt/src/aes.c ****     tmp2 = _mm_aesenc_si128(tmp2, KEY[6]);                 \
4971:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[7]);                 \
4972:../src/wolfcrypt/src/aes.c ****     tmp2 = _mm_aesenc_si128(tmp2, KEY[7]);                 \
4973:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[8]);                 \
4974:../src/wolfcrypt/src/aes.c ****     tmp2 = _mm_aesenc_si128(tmp2, KEY[8]);                 \
4975:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[9]);                 \
4976:../src/wolfcrypt/src/aes.c ****     tmp2 = _mm_aesenc_si128(tmp2, KEY[9]);                 \
4977:../src/wolfcrypt/src/aes.c ****     lastKey = KEY[10];                                     \
4978:../src/wolfcrypt/src/aes.c ****     if (nr > 10) {                                         \
4979:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, lastKey);            \
4980:../src/wolfcrypt/src/aes.c ****         tmp2 = _mm_aesenc_si128(tmp2, lastKey);            \
4981:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[11]);            \
4982:../src/wolfcrypt/src/aes.c ****         tmp2 = _mm_aesenc_si128(tmp2, KEY[11]);            \
4983:../src/wolfcrypt/src/aes.c ****         lastKey = KEY[12];                                 \
4984:../src/wolfcrypt/src/aes.c ****         if (nr > 12) {                                     \
4985:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, lastKey);        \
4986:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, lastKey);        \
4987:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[13]);        \
4988:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[13]);        \
4989:../src/wolfcrypt/src/aes.c ****             lastKey = KEY[14];                             \
4990:../src/wolfcrypt/src/aes.c ****         }                                                  \
4991:../src/wolfcrypt/src/aes.c ****     }                                                      \
4992:../src/wolfcrypt/src/aes.c ****     H = _mm_aesenclast_si128(tmp1, lastKey);               \
4993:../src/wolfcrypt/src/aes.c ****     T = _mm_aesenclast_si128(tmp2, lastKey);               \
4994:../src/wolfcrypt/src/aes.c ****     H = _mm_shuffle_epi8(H, BSWAP_MASK);                   \
4995:../src/wolfcrypt/src/aes.c **** }                                                          \
4996:../src/wolfcrypt/src/aes.c **** while (0)
4997:../src/wolfcrypt/src/aes.c **** 
4998:../src/wolfcrypt/src/aes.c **** 
4999:../src/wolfcrypt/src/aes.c **** #ifdef _M_X64
5000:../src/wolfcrypt/src/aes.c ****     /* 64-bit */
5001:../src/wolfcrypt/src/aes.c ****     #define AES_GCM_INSERT_EPI(tmp1, a, b) \
5002:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_insert_epi64(tmp1, ((word64)(a))*8, 0); \
5003:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_insert_epi64(tmp1, ((word64)(b))*8, 1);
5004:../src/wolfcrypt/src/aes.c **** #else
5005:../src/wolfcrypt/src/aes.c ****     /* 32-bit */
5006:../src/wolfcrypt/src/aes.c ****     #define AES_GCM_INSERT_EPI(tmp1, a, b) \
5007:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_insert_epi32(tmp1, ((int)(a))*8, 0); \
5008:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_insert_epi32(tmp1, 0,            1); \
5009:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_insert_epi32(tmp1, ((int)(b))*8, 2); \
5010:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_insert_epi32(tmp1, 0,            3);
5011:../src/wolfcrypt/src/aes.c **** #endif
5012:../src/wolfcrypt/src/aes.c **** 
5013:../src/wolfcrypt/src/aes.c **** #define aes_gcm_calc_iv(KEY, ivec, ibytes, nr, H, Y, T)         \
5014:../src/wolfcrypt/src/aes.c **** do                                                              \
5015:../src/wolfcrypt/src/aes.c **** {                                                               \
5016:../src/wolfcrypt/src/aes.c ****     if (ibytes % 16) {                                          \
5017:../src/wolfcrypt/src/aes.c ****         i = ibytes / 16;                                        \
5018:../src/wolfcrypt/src/aes.c ****         for (j=0; j < (int)(ibytes%16); j++)                    \
5019:../src/wolfcrypt/src/aes.c ****             ((unsigned char*)&last_block)[j] = ivec[i*16+j];    \
5020:../src/wolfcrypt/src/aes.c ****     }                                                           \
5021:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_load_si128(&KEY[0]);                             \
5022:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[1]);                      \
5023:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[2]);                      \
5024:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[3]);                      \
5025:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[4]);                      \
5026:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[5]);                      \
5027:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[6]);                      \
5028:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[7]);                      \
5029:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[8]);                      \
5030:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[9]);                      \
5031:../src/wolfcrypt/src/aes.c ****     lastKey = KEY[10];                                          \
5032:../src/wolfcrypt/src/aes.c ****     if (nr > 10) {                                              \
5033:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, lastKey);                 \
5034:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[11]);                 \
5035:../src/wolfcrypt/src/aes.c ****         lastKey = KEY[12];                                      \
5036:../src/wolfcrypt/src/aes.c ****         if (nr > 12) {                                          \
5037:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, lastKey);             \
5038:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[13]);             \
5039:../src/wolfcrypt/src/aes.c ****             lastKey = KEY[14];                                  \
5040:../src/wolfcrypt/src/aes.c ****         }                                                       \
5041:../src/wolfcrypt/src/aes.c ****     }                                                           \
5042:../src/wolfcrypt/src/aes.c ****     H = _mm_aesenclast_si128(tmp1, lastKey);                    \
5043:../src/wolfcrypt/src/aes.c ****     H = _mm_shuffle_epi8(H, BSWAP_MASK);                        \
5044:../src/wolfcrypt/src/aes.c ****     Y = _mm_setzero_si128();                                    \
5045:../src/wolfcrypt/src/aes.c ****     for (i=0; i < (int)(ibytes/16); i++) {                      \
5046:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_loadu_si128(&((__m128i*)ivec)[i]);           \
5047:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(tmp1, BSWAP_MASK);              \
5048:../src/wolfcrypt/src/aes.c ****         Y = _mm_xor_si128(Y, tmp1);                             \
5049:../src/wolfcrypt/src/aes.c ****         Y = gfmul_sw(Y, H);                                     \
5050:../src/wolfcrypt/src/aes.c ****     }                                                           \
5051:../src/wolfcrypt/src/aes.c ****     if (ibytes % 16) {                                          \
5052:../src/wolfcrypt/src/aes.c ****         tmp1 = last_block;                                      \
5053:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(tmp1, BSWAP_MASK);              \
5054:../src/wolfcrypt/src/aes.c ****         Y = _mm_xor_si128(Y, tmp1);                             \
5055:../src/wolfcrypt/src/aes.c ****         Y = gfmul_sw(Y, H);                                     \
5056:../src/wolfcrypt/src/aes.c ****     }                                                           \
5057:../src/wolfcrypt/src/aes.c ****     AES_GCM_INSERT_EPI(tmp1, ibytes, 0);                        \
5058:../src/wolfcrypt/src/aes.c ****     Y = _mm_xor_si128(Y, tmp1);                                 \
5059:../src/wolfcrypt/src/aes.c ****     Y = gfmul_sw(Y, H);                                         \
5060:../src/wolfcrypt/src/aes.c ****     Y = _mm_shuffle_epi8(Y, BSWAP_MASK); /* Compute E(K, Y0) */ \
5061:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_xor_si128(Y, KEY[0]);                            \
5062:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[1]);                      \
5063:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[2]);                      \
5064:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[3]);                      \
5065:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[4]);                      \
5066:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[5]);                      \
5067:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[6]);                      \
5068:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[7]);                      \
5069:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[8]);                      \
5070:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[9]);                      \
5071:../src/wolfcrypt/src/aes.c ****     lastKey = KEY[10];                                          \
5072:../src/wolfcrypt/src/aes.c ****     if (nr > 10) {                                              \
5073:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, lastKey);                 \
5074:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[11]);                 \
5075:../src/wolfcrypt/src/aes.c ****         lastKey = KEY[12];                                      \
5076:../src/wolfcrypt/src/aes.c ****         if (nr > 12) {                                          \
5077:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, lastKey);             \
5078:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[13]);             \
5079:../src/wolfcrypt/src/aes.c ****             lastKey = KEY[14];                                  \
5080:../src/wolfcrypt/src/aes.c ****         }                                                       \
5081:../src/wolfcrypt/src/aes.c ****     }                                                           \
5082:../src/wolfcrypt/src/aes.c ****     T = _mm_aesenclast_si128(tmp1, lastKey);                    \
5083:../src/wolfcrypt/src/aes.c **** }                                                               \
5084:../src/wolfcrypt/src/aes.c **** while (0)
5085:../src/wolfcrypt/src/aes.c **** 
5086:../src/wolfcrypt/src/aes.c **** #define AES_ENC_8(j)                       \
5087:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_aesenc_si128(tmp1, KEY[j]); \
5088:../src/wolfcrypt/src/aes.c ****     tmp2 = _mm_aesenc_si128(tmp2, KEY[j]); \
5089:../src/wolfcrypt/src/aes.c ****     tmp3 = _mm_aesenc_si128(tmp3, KEY[j]); \
5090:../src/wolfcrypt/src/aes.c ****     tmp4 = _mm_aesenc_si128(tmp4, KEY[j]); \
5091:../src/wolfcrypt/src/aes.c ****     tmp5 = _mm_aesenc_si128(tmp5, KEY[j]); \
5092:../src/wolfcrypt/src/aes.c ****     tmp6 = _mm_aesenc_si128(tmp6, KEY[j]); \
5093:../src/wolfcrypt/src/aes.c ****     tmp7 = _mm_aesenc_si128(tmp7, KEY[j]); \
5094:../src/wolfcrypt/src/aes.c ****     tmp8 = _mm_aesenc_si128(tmp8, KEY[j]);
5095:../src/wolfcrypt/src/aes.c **** 
5096:../src/wolfcrypt/src/aes.c **** #define AES_ENC_LAST_8()                                                  \
5097:../src/wolfcrypt/src/aes.c ****     tmp1 =_mm_aesenclast_si128(tmp1, lastKey);                            \
5098:../src/wolfcrypt/src/aes.c ****     tmp2 =_mm_aesenclast_si128(tmp2, lastKey);                            \
5099:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_xor_si128(tmp1, _mm_loadu_si128(&((__m128i*)in)[i*8+0]));  \
5100:../src/wolfcrypt/src/aes.c ****     tmp2 = _mm_xor_si128(tmp2, _mm_loadu_si128(&((__m128i*)in)[i*8+1]));  \
5101:../src/wolfcrypt/src/aes.c ****     _mm_storeu_si128(&((__m128i*)out)[i*8+0], tmp1);                      \
5102:../src/wolfcrypt/src/aes.c ****     _mm_storeu_si128(&((__m128i*)out)[i*8+1], tmp2);                      \
5103:../src/wolfcrypt/src/aes.c ****     tmp3 =_mm_aesenclast_si128(tmp3, lastKey);                            \
5104:../src/wolfcrypt/src/aes.c ****     tmp4 =_mm_aesenclast_si128(tmp4, lastKey);                            \
5105:../src/wolfcrypt/src/aes.c ****     tmp3 = _mm_xor_si128(tmp3, _mm_loadu_si128(&((__m128i*)in)[i*8+2]));  \
5106:../src/wolfcrypt/src/aes.c ****     tmp4 = _mm_xor_si128(tmp4, _mm_loadu_si128(&((__m128i*)in)[i*8+3]));  \
5107:../src/wolfcrypt/src/aes.c ****     _mm_storeu_si128(&((__m128i*)out)[i*8+2], tmp3);                      \
5108:../src/wolfcrypt/src/aes.c ****     _mm_storeu_si128(&((__m128i*)out)[i*8+3], tmp4);                      \
5109:../src/wolfcrypt/src/aes.c ****     tmp5 =_mm_aesenclast_si128(tmp5, lastKey);                            \
5110:../src/wolfcrypt/src/aes.c ****     tmp6 =_mm_aesenclast_si128(tmp6, lastKey);                            \
5111:../src/wolfcrypt/src/aes.c ****     tmp5 = _mm_xor_si128(tmp5, _mm_loadu_si128(&((__m128i*)in)[i*8+4]));  \
5112:../src/wolfcrypt/src/aes.c ****     tmp6 = _mm_xor_si128(tmp6, _mm_loadu_si128(&((__m128i*)in)[i*8+5]));  \
5113:../src/wolfcrypt/src/aes.c ****     _mm_storeu_si128(&((__m128i*)out)[i*8+4], tmp5);                      \
5114:../src/wolfcrypt/src/aes.c ****     _mm_storeu_si128(&((__m128i*)out)[i*8+5], tmp6);                      \
5115:../src/wolfcrypt/src/aes.c ****     tmp7 =_mm_aesenclast_si128(tmp7, lastKey);                            \
5116:../src/wolfcrypt/src/aes.c ****     tmp8 =_mm_aesenclast_si128(tmp8, lastKey);                            \
5117:../src/wolfcrypt/src/aes.c ****     tmp7 = _mm_xor_si128(tmp7, _mm_loadu_si128(&((__m128i*)in)[i*8+6]));  \
5118:../src/wolfcrypt/src/aes.c ****     tmp8 = _mm_xor_si128(tmp8, _mm_loadu_si128(&((__m128i*)in)[i*8+7]));  \
5119:../src/wolfcrypt/src/aes.c ****     _mm_storeu_si128(&((__m128i*)out)[i*8+6], tmp7);                      \
5120:../src/wolfcrypt/src/aes.c ****     _mm_storeu_si128(&((__m128i*)out)[i*8+7], tmp8);
5121:../src/wolfcrypt/src/aes.c **** 
5122:../src/wolfcrypt/src/aes.c **** 
5123:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT __m128i gfmul_sw(__m128i a, __m128i b)
5124:../src/wolfcrypt/src/aes.c **** {
5125:../src/wolfcrypt/src/aes.c ****     __m128i r, t1, t2, t3, t4, t5, t6, t7;
5126:../src/wolfcrypt/src/aes.c ****     t2 = _mm_shuffle_epi32(b, 78);
5127:../src/wolfcrypt/src/aes.c ****     t3 = _mm_shuffle_epi32(a, 78);
5128:../src/wolfcrypt/src/aes.c ****     t2 = _mm_xor_si128(t2, b);
5129:../src/wolfcrypt/src/aes.c ****     t3 = _mm_xor_si128(t3, a);
5130:../src/wolfcrypt/src/aes.c ****     t4 = _mm_clmulepi64_si128(b, a, 0x11);
5131:../src/wolfcrypt/src/aes.c ****     t1 = _mm_clmulepi64_si128(b, a, 0x00);
5132:../src/wolfcrypt/src/aes.c ****     t2 = _mm_clmulepi64_si128(t2, t3, 0x00);
5133:../src/wolfcrypt/src/aes.c ****     t2 = _mm_xor_si128(t2, t1);
5134:../src/wolfcrypt/src/aes.c ****     t2 = _mm_xor_si128(t2, t4);
5135:../src/wolfcrypt/src/aes.c ****     t3 = _mm_slli_si128(t2, 8);
5136:../src/wolfcrypt/src/aes.c ****     t2 = _mm_srli_si128(t2, 8);
5137:../src/wolfcrypt/src/aes.c ****     t1 = _mm_xor_si128(t1, t3);
5138:../src/wolfcrypt/src/aes.c ****     t4 = _mm_xor_si128(t4, t2);
5139:../src/wolfcrypt/src/aes.c **** 
5140:../src/wolfcrypt/src/aes.c ****     t5 = _mm_srli_epi32(t1, 31);
5141:../src/wolfcrypt/src/aes.c ****     t6 = _mm_srli_epi32(t4, 31);
5142:../src/wolfcrypt/src/aes.c ****     t1 = _mm_slli_epi32(t1, 1);
5143:../src/wolfcrypt/src/aes.c ****     t4 = _mm_slli_epi32(t4, 1);
5144:../src/wolfcrypt/src/aes.c ****     t7 = _mm_srli_si128(t5, 12);
5145:../src/wolfcrypt/src/aes.c ****     t5 = _mm_slli_si128(t5, 4);
5146:../src/wolfcrypt/src/aes.c ****     t6 = _mm_slli_si128(t6, 4);
5147:../src/wolfcrypt/src/aes.c ****     t4 = _mm_or_si128(t4, t7);
5148:../src/wolfcrypt/src/aes.c ****     t1 = _mm_or_si128(t1, t5);
5149:../src/wolfcrypt/src/aes.c ****     t4 = _mm_or_si128(t4, t6);
5150:../src/wolfcrypt/src/aes.c **** 
5151:../src/wolfcrypt/src/aes.c ****     t5 = _mm_slli_epi32(t1, 31);
5152:../src/wolfcrypt/src/aes.c ****     t6 = _mm_slli_epi32(t1, 30);
5153:../src/wolfcrypt/src/aes.c ****     t7 = _mm_slli_epi32(t1, 25);
5154:../src/wolfcrypt/src/aes.c ****     t5 = _mm_xor_si128(t5, t6);
5155:../src/wolfcrypt/src/aes.c ****     t5 = _mm_xor_si128(t5, t7);
5156:../src/wolfcrypt/src/aes.c **** 
5157:../src/wolfcrypt/src/aes.c ****     t6 = _mm_srli_si128(t5, 4);
5158:../src/wolfcrypt/src/aes.c ****     t5 = _mm_slli_si128(t5, 12);
5159:../src/wolfcrypt/src/aes.c ****     t1 = _mm_xor_si128(t1, t5);
5160:../src/wolfcrypt/src/aes.c ****     t7 = _mm_srli_epi32(t1, 1);
5161:../src/wolfcrypt/src/aes.c ****     t3 = _mm_srli_epi32(t1, 2);
5162:../src/wolfcrypt/src/aes.c ****     t2 = _mm_srli_epi32(t1, 7);
5163:../src/wolfcrypt/src/aes.c **** 
5164:../src/wolfcrypt/src/aes.c ****     t7 = _mm_xor_si128(t7, t3);
5165:../src/wolfcrypt/src/aes.c ****     t7 = _mm_xor_si128(t7, t2);
5166:../src/wolfcrypt/src/aes.c ****     t7 = _mm_xor_si128(t7, t6);
5167:../src/wolfcrypt/src/aes.c ****     t7 = _mm_xor_si128(t7, t1);
5168:../src/wolfcrypt/src/aes.c ****     r = _mm_xor_si128(t4, t7);
5169:../src/wolfcrypt/src/aes.c **** 
5170:../src/wolfcrypt/src/aes.c ****     return r;
5171:../src/wolfcrypt/src/aes.c **** }
5172:../src/wolfcrypt/src/aes.c **** 
5173:../src/wolfcrypt/src/aes.c **** static void gfmul_only(__m128i a, __m128i b, __m128i* r0, __m128i* r1)
5174:../src/wolfcrypt/src/aes.c **** {
5175:../src/wolfcrypt/src/aes.c ****     __m128i t1, t2, t3, t4;
5176:../src/wolfcrypt/src/aes.c **** 
5177:../src/wolfcrypt/src/aes.c ****     /* 128 x 128 Carryless Multiply */
5178:../src/wolfcrypt/src/aes.c ****     t2 = _mm_shuffle_epi32(b, 78);
5179:../src/wolfcrypt/src/aes.c ****     t3 = _mm_shuffle_epi32(a, 78);
5180:../src/wolfcrypt/src/aes.c ****     t2 = _mm_xor_si128(t2, b);
5181:../src/wolfcrypt/src/aes.c ****     t3 = _mm_xor_si128(t3, a);
5182:../src/wolfcrypt/src/aes.c ****     t4 = _mm_clmulepi64_si128(b, a, 0x11);
5183:../src/wolfcrypt/src/aes.c ****     t1 = _mm_clmulepi64_si128(b, a, 0x00);
5184:../src/wolfcrypt/src/aes.c ****     t2 = _mm_clmulepi64_si128(t2, t3, 0x00);
5185:../src/wolfcrypt/src/aes.c ****     t2 = _mm_xor_si128(t2, t1);
5186:../src/wolfcrypt/src/aes.c ****     t2 = _mm_xor_si128(t2, t4);
5187:../src/wolfcrypt/src/aes.c ****     t3 = _mm_slli_si128(t2, 8);
5188:../src/wolfcrypt/src/aes.c ****     t2 = _mm_srli_si128(t2, 8);
5189:../src/wolfcrypt/src/aes.c ****     t1 = _mm_xor_si128(t1, t3);
5190:../src/wolfcrypt/src/aes.c ****     t4 = _mm_xor_si128(t4, t2);
5191:../src/wolfcrypt/src/aes.c ****     *r0 = _mm_xor_si128(t1, *r0);
5192:../src/wolfcrypt/src/aes.c ****     *r1 = _mm_xor_si128(t4, *r1);
5193:../src/wolfcrypt/src/aes.c **** }
5194:../src/wolfcrypt/src/aes.c **** 
5195:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT __m128i gfmul_shl1(__m128i a)
5196:../src/wolfcrypt/src/aes.c **** {
5197:../src/wolfcrypt/src/aes.c ****     __m128i t1 = a, t2;
5198:../src/wolfcrypt/src/aes.c ****     t2 = _mm_srli_epi64(t1, 63);
5199:../src/wolfcrypt/src/aes.c ****     t1 = _mm_slli_epi64(t1, 1);
5200:../src/wolfcrypt/src/aes.c ****     t2 = _mm_slli_si128(t2, 8);
5201:../src/wolfcrypt/src/aes.c ****     t1 = _mm_or_si128(t1, t2);
5202:../src/wolfcrypt/src/aes.c ****     /* if (a[1] >> 63) t1 = _mm_xor_si128(t1, MOD2_128); */
5203:../src/wolfcrypt/src/aes.c ****     a = _mm_shuffle_epi32(a, 0xff);
5204:../src/wolfcrypt/src/aes.c ****     a = _mm_srai_epi32(a, 31);
5205:../src/wolfcrypt/src/aes.c ****     a = _mm_and_si128(a, MOD2_128);
5206:../src/wolfcrypt/src/aes.c ****     t1 = _mm_xor_si128(t1, a);
5207:../src/wolfcrypt/src/aes.c ****     return t1;
5208:../src/wolfcrypt/src/aes.c **** }
5209:../src/wolfcrypt/src/aes.c **** 
5210:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT __m128i ghash_red(__m128i r0, __m128i r1)
5211:../src/wolfcrypt/src/aes.c **** {
5212:../src/wolfcrypt/src/aes.c ****     __m128i t2, t3;
5213:../src/wolfcrypt/src/aes.c ****     __m128i t5, t6, t7;
5214:../src/wolfcrypt/src/aes.c **** 
5215:../src/wolfcrypt/src/aes.c ****     t5 = _mm_slli_epi32(r0, 31);
5216:../src/wolfcrypt/src/aes.c ****     t6 = _mm_slli_epi32(r0, 30);
5217:../src/wolfcrypt/src/aes.c ****     t7 = _mm_slli_epi32(r0, 25);
5218:../src/wolfcrypt/src/aes.c ****     t5 = _mm_xor_si128(t5, t6);
5219:../src/wolfcrypt/src/aes.c ****     t5 = _mm_xor_si128(t5, t7);
5220:../src/wolfcrypt/src/aes.c **** 
5221:../src/wolfcrypt/src/aes.c ****     t6 = _mm_srli_si128(t5, 4);
5222:../src/wolfcrypt/src/aes.c ****     t5 = _mm_slli_si128(t5, 12);
5223:../src/wolfcrypt/src/aes.c ****     r0 = _mm_xor_si128(r0, t5);
5224:../src/wolfcrypt/src/aes.c ****     t7 = _mm_srli_epi32(r0, 1);
5225:../src/wolfcrypt/src/aes.c ****     t3 = _mm_srli_epi32(r0, 2);
5226:../src/wolfcrypt/src/aes.c ****     t2 = _mm_srli_epi32(r0, 7);
5227:../src/wolfcrypt/src/aes.c **** 
5228:../src/wolfcrypt/src/aes.c ****     t7 = _mm_xor_si128(t7, t3);
5229:../src/wolfcrypt/src/aes.c ****     t7 = _mm_xor_si128(t7, t2);
5230:../src/wolfcrypt/src/aes.c ****     t7 = _mm_xor_si128(t7, t6);
5231:../src/wolfcrypt/src/aes.c ****     t7 = _mm_xor_si128(t7, r0);
5232:../src/wolfcrypt/src/aes.c ****     return _mm_xor_si128(r1, t7);
5233:../src/wolfcrypt/src/aes.c **** }
5234:../src/wolfcrypt/src/aes.c **** 
5235:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT __m128i gfmul_shifted(__m128i a, __m128i b)
5236:../src/wolfcrypt/src/aes.c **** {
5237:../src/wolfcrypt/src/aes.c ****     __m128i t0 = _mm_setzero_si128(), t1 = _mm_setzero_si128();
5238:../src/wolfcrypt/src/aes.c ****     gfmul_only(a, b, &t0, &t1);
5239:../src/wolfcrypt/src/aes.c ****     return ghash_red(t0, t1);
5240:../src/wolfcrypt/src/aes.c **** }
5241:../src/wolfcrypt/src/aes.c **** 
5242:../src/wolfcrypt/src/aes.c **** #ifndef AES_GCM_AESNI_NO_UNROLL
5243:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT __m128i gfmul8(
5244:../src/wolfcrypt/src/aes.c ****                       __m128i a1, __m128i a2, __m128i a3, __m128i a4,
5245:../src/wolfcrypt/src/aes.c ****                       __m128i a5, __m128i a6, __m128i a7, __m128i a8,
5246:../src/wolfcrypt/src/aes.c ****                       __m128i b1, __m128i b2, __m128i b3, __m128i b4,
5247:../src/wolfcrypt/src/aes.c ****                       __m128i b5, __m128i b6, __m128i b7, __m128i b8)
5248:../src/wolfcrypt/src/aes.c **** {
5249:../src/wolfcrypt/src/aes.c ****     __m128i t0 = _mm_setzero_si128(), t1 = _mm_setzero_si128();
5250:../src/wolfcrypt/src/aes.c ****     gfmul_only(a1, b8, &t0, &t1);
5251:../src/wolfcrypt/src/aes.c ****     gfmul_only(a2, b7, &t0, &t1);
5252:../src/wolfcrypt/src/aes.c ****     gfmul_only(a3, b6, &t0, &t1);
5253:../src/wolfcrypt/src/aes.c ****     gfmul_only(a4, b5, &t0, &t1);
5254:../src/wolfcrypt/src/aes.c ****     gfmul_only(a5, b4, &t0, &t1);
5255:../src/wolfcrypt/src/aes.c ****     gfmul_only(a6, b3, &t0, &t1);
5256:../src/wolfcrypt/src/aes.c ****     gfmul_only(a7, b2, &t0, &t1);
5257:../src/wolfcrypt/src/aes.c ****     gfmul_only(a8, b1, &t0, &t1);
5258:../src/wolfcrypt/src/aes.c ****     return ghash_red(t0, t1);
5259:../src/wolfcrypt/src/aes.c **** }
5260:../src/wolfcrypt/src/aes.c **** #endif
5261:../src/wolfcrypt/src/aes.c **** 
5262:../src/wolfcrypt/src/aes.c **** 
5263:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int AES_GCM_encrypt(
5264:../src/wolfcrypt/src/aes.c ****                             const unsigned char *in, unsigned char *out,
5265:../src/wolfcrypt/src/aes.c ****                             const unsigned char* addt,
5266:../src/wolfcrypt/src/aes.c ****                             const unsigned char* ivec, unsigned char *tag,
5267:../src/wolfcrypt/src/aes.c ****                             word32 nbytes, word32 abytes, word32 ibytes,
5268:../src/wolfcrypt/src/aes.c ****                             word32 tbytes, const unsigned char* key, int nr)
5269:../src/wolfcrypt/src/aes.c **** {
5270:../src/wolfcrypt/src/aes.c ****     int i, j ,k;
5271:../src/wolfcrypt/src/aes.c ****     __m128i ctr1;
5272:../src/wolfcrypt/src/aes.c ****     __m128i H, Y, T;
5273:../src/wolfcrypt/src/aes.c ****     __m128i X = _mm_setzero_si128();
5274:../src/wolfcrypt/src/aes.c ****     __m128i *KEY = (__m128i*)key, lastKey;
5275:../src/wolfcrypt/src/aes.c ****     __m128i last_block = _mm_setzero_si128();
5276:../src/wolfcrypt/src/aes.c ****     __m128i tmp1, tmp2;
5277:../src/wolfcrypt/src/aes.c **** #ifndef AES_GCM_AESNI_NO_UNROLL
5278:../src/wolfcrypt/src/aes.c ****     __m128i HT[8];
5279:../src/wolfcrypt/src/aes.c ****     __m128i r0, r1;
5280:../src/wolfcrypt/src/aes.c ****     __m128i XV;
5281:../src/wolfcrypt/src/aes.c ****     __m128i tmp3, tmp4, tmp5, tmp6, tmp7, tmp8;
5282:../src/wolfcrypt/src/aes.c **** #endif
5283:../src/wolfcrypt/src/aes.c **** 
5284:../src/wolfcrypt/src/aes.c ****     if (ibytes == GCM_NONCE_MID_SZ)
5285:../src/wolfcrypt/src/aes.c ****         aes_gcm_calc_iv_12(KEY, ivec, nr, H, Y, T);
5286:../src/wolfcrypt/src/aes.c ****     else
5287:../src/wolfcrypt/src/aes.c ****         aes_gcm_calc_iv(KEY, ivec, ibytes, nr, H, Y, T);
5288:../src/wolfcrypt/src/aes.c **** 
5289:../src/wolfcrypt/src/aes.c ****     for (i=0; i < (int)(abytes/16); i++) {
5290:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_loadu_si128(&((__m128i*)addt)[i]);
5291:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(tmp1, BSWAP_MASK);
5292:../src/wolfcrypt/src/aes.c ****         X = _mm_xor_si128(X, tmp1);
5293:../src/wolfcrypt/src/aes.c ****         X = gfmul_sw(X, H);
5294:../src/wolfcrypt/src/aes.c ****     }
5295:../src/wolfcrypt/src/aes.c ****     if (abytes%16) {
5296:../src/wolfcrypt/src/aes.c ****         last_block = _mm_setzero_si128();
5297:../src/wolfcrypt/src/aes.c ****         for (j=0; j < (int)(abytes%16); j++)
5298:../src/wolfcrypt/src/aes.c ****             ((unsigned char*)&last_block)[j] = addt[i*16+j];
5299:../src/wolfcrypt/src/aes.c ****         tmp1 = last_block;
5300:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(tmp1, BSWAP_MASK);
5301:../src/wolfcrypt/src/aes.c ****         X = _mm_xor_si128(X, tmp1);
5302:../src/wolfcrypt/src/aes.c ****         X = gfmul_sw(X, H);
5303:../src/wolfcrypt/src/aes.c ****     }
5304:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_shuffle_epi8(Y, BSWAP_EPI64);
5305:../src/wolfcrypt/src/aes.c ****     ctr1 = _mm_add_epi32(tmp1, ONE);
5306:../src/wolfcrypt/src/aes.c ****     H = gfmul_shl1(H);
5307:../src/wolfcrypt/src/aes.c **** 
5308:../src/wolfcrypt/src/aes.c **** #ifndef AES_GCM_AESNI_NO_UNROLL
5309:../src/wolfcrypt/src/aes.c ****     i = 0;
5310:../src/wolfcrypt/src/aes.c ****     if (nbytes >= 16*8) {
5311:../src/wolfcrypt/src/aes.c ****         HT[0] = H;
5312:../src/wolfcrypt/src/aes.c ****         HT[1] = gfmul_shifted(H, H);
5313:../src/wolfcrypt/src/aes.c ****         HT[2] = gfmul_shifted(H, HT[1]);
5314:../src/wolfcrypt/src/aes.c ****         HT[3] = gfmul_shifted(HT[1], HT[1]);
5315:../src/wolfcrypt/src/aes.c ****         HT[4] = gfmul_shifted(HT[1], HT[2]);
5316:../src/wolfcrypt/src/aes.c ****         HT[5] = gfmul_shifted(HT[2], HT[2]);
5317:../src/wolfcrypt/src/aes.c ****         HT[6] = gfmul_shifted(HT[2], HT[3]);
5318:../src/wolfcrypt/src/aes.c ****         HT[7] = gfmul_shifted(HT[3], HT[3]);
5319:../src/wolfcrypt/src/aes.c **** 
5320:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(ctr1, BSWAP_EPI64);
5321:../src/wolfcrypt/src/aes.c ****         tmp2 = _mm_add_epi32(ctr1, ONE);
5322:../src/wolfcrypt/src/aes.c ****         tmp2 = _mm_shuffle_epi8(tmp2, BSWAP_EPI64);
5323:../src/wolfcrypt/src/aes.c ****         tmp3 = _mm_add_epi32(ctr1, TWO);
5324:../src/wolfcrypt/src/aes.c ****         tmp3 = _mm_shuffle_epi8(tmp3, BSWAP_EPI64);
5325:../src/wolfcrypt/src/aes.c ****         tmp4 = _mm_add_epi32(ctr1, THREE);
5326:../src/wolfcrypt/src/aes.c ****         tmp4 = _mm_shuffle_epi8(tmp4, BSWAP_EPI64);
5327:../src/wolfcrypt/src/aes.c ****         tmp5 = _mm_add_epi32(ctr1, FOUR);
5328:../src/wolfcrypt/src/aes.c ****         tmp5 = _mm_shuffle_epi8(tmp5, BSWAP_EPI64);
5329:../src/wolfcrypt/src/aes.c ****         tmp6 = _mm_add_epi32(ctr1, FIVE);
5330:../src/wolfcrypt/src/aes.c ****         tmp6 = _mm_shuffle_epi8(tmp6, BSWAP_EPI64);
5331:../src/wolfcrypt/src/aes.c ****         tmp7 = _mm_add_epi32(ctr1, SIX);
5332:../src/wolfcrypt/src/aes.c ****         tmp7 = _mm_shuffle_epi8(tmp7, BSWAP_EPI64);
5333:../src/wolfcrypt/src/aes.c ****         tmp8 = _mm_add_epi32(ctr1, SEVEN);
5334:../src/wolfcrypt/src/aes.c ****         tmp8 = _mm_shuffle_epi8(tmp8, BSWAP_EPI64);
5335:../src/wolfcrypt/src/aes.c ****         ctr1 = _mm_add_epi32(ctr1, EIGHT);
5336:../src/wolfcrypt/src/aes.c ****         tmp1 =_mm_xor_si128(tmp1, KEY[0]);
5337:../src/wolfcrypt/src/aes.c ****         tmp2 =_mm_xor_si128(tmp2, KEY[0]);
5338:../src/wolfcrypt/src/aes.c ****         tmp3 =_mm_xor_si128(tmp3, KEY[0]);
5339:../src/wolfcrypt/src/aes.c ****         tmp4 =_mm_xor_si128(tmp4, KEY[0]);
5340:../src/wolfcrypt/src/aes.c ****         tmp5 =_mm_xor_si128(tmp5, KEY[0]);
5341:../src/wolfcrypt/src/aes.c ****         tmp6 =_mm_xor_si128(tmp6, KEY[0]);
5342:../src/wolfcrypt/src/aes.c ****         tmp7 =_mm_xor_si128(tmp7, KEY[0]);
5343:../src/wolfcrypt/src/aes.c ****         tmp8 =_mm_xor_si128(tmp8, KEY[0]);
5344:../src/wolfcrypt/src/aes.c ****         AES_ENC_8(1);
5345:../src/wolfcrypt/src/aes.c ****         AES_ENC_8(2);
5346:../src/wolfcrypt/src/aes.c ****         AES_ENC_8(3);
5347:../src/wolfcrypt/src/aes.c ****         AES_ENC_8(4);
5348:../src/wolfcrypt/src/aes.c ****         AES_ENC_8(5);
5349:../src/wolfcrypt/src/aes.c ****         AES_ENC_8(6);
5350:../src/wolfcrypt/src/aes.c ****         AES_ENC_8(7);
5351:../src/wolfcrypt/src/aes.c ****         AES_ENC_8(8);
5352:../src/wolfcrypt/src/aes.c ****         AES_ENC_8(9);
5353:../src/wolfcrypt/src/aes.c ****         lastKey = KEY[10];
5354:../src/wolfcrypt/src/aes.c ****         if (nr > 10) {
5355:../src/wolfcrypt/src/aes.c ****             AES_ENC_8(10);
5356:../src/wolfcrypt/src/aes.c ****             AES_ENC_8(11);
5357:../src/wolfcrypt/src/aes.c ****             lastKey = KEY[12];
5358:../src/wolfcrypt/src/aes.c ****             if (nr > 12) {
5359:../src/wolfcrypt/src/aes.c ****                 AES_ENC_8(12);
5360:../src/wolfcrypt/src/aes.c ****                 AES_ENC_8(13);
5361:../src/wolfcrypt/src/aes.c ****                 lastKey = KEY[14];
5362:../src/wolfcrypt/src/aes.c ****             }
5363:../src/wolfcrypt/src/aes.c ****         }
5364:../src/wolfcrypt/src/aes.c ****         AES_ENC_LAST_8();
5365:../src/wolfcrypt/src/aes.c **** 
5366:../src/wolfcrypt/src/aes.c ****         for (i=1; i < (int)(nbytes/16/8); i++) {
5367:../src/wolfcrypt/src/aes.c ****                 r0 = _mm_setzero_si128();
5368:../src/wolfcrypt/src/aes.c ****                 r1 = _mm_setzero_si128();
5369:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_shuffle_epi8(ctr1, BSWAP_EPI64);
5370:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_add_epi32(ctr1, ONE);
5371:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_shuffle_epi8(tmp2, BSWAP_EPI64);
5372:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_add_epi32(ctr1, TWO);
5373:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_shuffle_epi8(tmp3, BSWAP_EPI64);
5374:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_add_epi32(ctr1, THREE);
5375:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_shuffle_epi8(tmp4, BSWAP_EPI64);
5376:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_add_epi32(ctr1, FOUR);
5377:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_shuffle_epi8(tmp5, BSWAP_EPI64);
5378:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_add_epi32(ctr1, FIVE);
5379:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_shuffle_epi8(tmp6, BSWAP_EPI64);
5380:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_add_epi32(ctr1, SIX);
5381:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_shuffle_epi8(tmp7, BSWAP_EPI64);
5382:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_add_epi32(ctr1, SEVEN);
5383:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_shuffle_epi8(tmp8, BSWAP_EPI64);
5384:../src/wolfcrypt/src/aes.c ****             ctr1 = _mm_add_epi32(ctr1, EIGHT);
5385:../src/wolfcrypt/src/aes.c ****             tmp1 =_mm_xor_si128(tmp1, KEY[0]);
5386:../src/wolfcrypt/src/aes.c ****             tmp2 =_mm_xor_si128(tmp2, KEY[0]);
5387:../src/wolfcrypt/src/aes.c ****             tmp3 =_mm_xor_si128(tmp3, KEY[0]);
5388:../src/wolfcrypt/src/aes.c ****             tmp4 =_mm_xor_si128(tmp4, KEY[0]);
5389:../src/wolfcrypt/src/aes.c ****             tmp5 =_mm_xor_si128(tmp5, KEY[0]);
5390:../src/wolfcrypt/src/aes.c ****             tmp6 =_mm_xor_si128(tmp6, KEY[0]);
5391:../src/wolfcrypt/src/aes.c ****             tmp7 =_mm_xor_si128(tmp7, KEY[0]);
5392:../src/wolfcrypt/src/aes.c ****             tmp8 =_mm_xor_si128(tmp8, KEY[0]);
5393:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5394:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)out)[(i-1)*8+0]);
5395:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5396:../src/wolfcrypt/src/aes.c ****                 XV = _mm_xor_si128(XV, X);
5397:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[7], &r0, &r1);
5398:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[1]);
5399:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[1]);
5400:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[1]);
5401:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[1]);
5402:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[1]);
5403:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[1]);
5404:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[1]);
5405:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[1]);
5406:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5407:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)out)[(i-1)*8+1]);
5408:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5409:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[6], &r0, &r1);
5410:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[2]);
5411:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[2]);
5412:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[2]);
5413:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[2]);
5414:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[2]);
5415:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[2]);
5416:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[2]);
5417:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[2]);
5418:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5419:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)out)[(i-1)*8+2]);
5420:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5421:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[5], &r0, &r1);
5422:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[3]);
5423:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[3]);
5424:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[3]);
5425:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[3]);
5426:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[3]);
5427:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[3]);
5428:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[3]);
5429:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[3]);
5430:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5431:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)out)[(i-1)*8+3]);
5432:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5433:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[4], &r0, &r1);
5434:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[4]);
5435:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[4]);
5436:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[4]);
5437:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[4]);
5438:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[4]);
5439:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[4]);
5440:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[4]);
5441:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[4]);
5442:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5443:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)out)[(i-1)*8+4]);
5444:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5445:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[3], &r0, &r1);
5446:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[5]);
5447:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[5]);
5448:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[5]);
5449:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[5]);
5450:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[5]);
5451:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[5]);
5452:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[5]);
5453:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[5]);
5454:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5455:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)out)[(i-1)*8+5]);
5456:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5457:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[2], &r0, &r1);
5458:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[6]);
5459:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[6]);
5460:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[6]);
5461:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[6]);
5462:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[6]);
5463:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[6]);
5464:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[6]);
5465:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[6]);
5466:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5467:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)out)[(i-1)*8+6]);
5468:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5469:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[1], &r0, &r1);
5470:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[7]);
5471:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[7]);
5472:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[7]);
5473:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[7]);
5474:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[7]);
5475:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[7]);
5476:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[7]);
5477:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[7]);
5478:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5479:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)out)[(i-1)*8+7]);
5480:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5481:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[0], &r0, &r1);
5482:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[8]);
5483:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[8]);
5484:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[8]);
5485:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[8]);
5486:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[8]);
5487:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[8]);
5488:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[8]);
5489:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[8]);
5490:../src/wolfcrypt/src/aes.c ****                 /* Reduction */
5491:../src/wolfcrypt/src/aes.c ****                 X = ghash_red(r0, r1);
5492:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[9]);
5493:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[9]);
5494:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[9]);
5495:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[9]);
5496:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[9]);
5497:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[9]);
5498:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[9]);
5499:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[9]);
5500:../src/wolfcrypt/src/aes.c ****             lastKey = KEY[10];
5501:../src/wolfcrypt/src/aes.c ****             if (nr > 10) {
5502:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, KEY[10]);
5503:../src/wolfcrypt/src/aes.c ****                 tmp2 = _mm_aesenc_si128(tmp2, KEY[10]);
5504:../src/wolfcrypt/src/aes.c ****                 tmp3 = _mm_aesenc_si128(tmp3, KEY[10]);
5505:../src/wolfcrypt/src/aes.c ****                 tmp4 = _mm_aesenc_si128(tmp4, KEY[10]);
5506:../src/wolfcrypt/src/aes.c ****                 tmp5 = _mm_aesenc_si128(tmp5, KEY[10]);
5507:../src/wolfcrypt/src/aes.c ****                 tmp6 = _mm_aesenc_si128(tmp6, KEY[10]);
5508:../src/wolfcrypt/src/aes.c ****                 tmp7 = _mm_aesenc_si128(tmp7, KEY[10]);
5509:../src/wolfcrypt/src/aes.c ****                 tmp8 = _mm_aesenc_si128(tmp8, KEY[10]);
5510:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, KEY[11]);
5511:../src/wolfcrypt/src/aes.c ****                 tmp2 = _mm_aesenc_si128(tmp2, KEY[11]);
5512:../src/wolfcrypt/src/aes.c ****                 tmp3 = _mm_aesenc_si128(tmp3, KEY[11]);
5513:../src/wolfcrypt/src/aes.c ****                 tmp4 = _mm_aesenc_si128(tmp4, KEY[11]);
5514:../src/wolfcrypt/src/aes.c ****                 tmp5 = _mm_aesenc_si128(tmp5, KEY[11]);
5515:../src/wolfcrypt/src/aes.c ****                 tmp6 = _mm_aesenc_si128(tmp6, KEY[11]);
5516:../src/wolfcrypt/src/aes.c ****                 tmp7 = _mm_aesenc_si128(tmp7, KEY[11]);
5517:../src/wolfcrypt/src/aes.c ****                 tmp8 = _mm_aesenc_si128(tmp8, KEY[11]);
5518:../src/wolfcrypt/src/aes.c ****                 lastKey = KEY[12];
5519:../src/wolfcrypt/src/aes.c ****                 if (nr > 12) {
5520:../src/wolfcrypt/src/aes.c ****                     tmp1 = _mm_aesenc_si128(tmp1, KEY[12]);
5521:../src/wolfcrypt/src/aes.c ****                     tmp2 = _mm_aesenc_si128(tmp2, KEY[12]);
5522:../src/wolfcrypt/src/aes.c ****                     tmp3 = _mm_aesenc_si128(tmp3, KEY[12]);
5523:../src/wolfcrypt/src/aes.c ****                     tmp4 = _mm_aesenc_si128(tmp4, KEY[12]);
5524:../src/wolfcrypt/src/aes.c ****                     tmp5 = _mm_aesenc_si128(tmp5, KEY[12]);
5525:../src/wolfcrypt/src/aes.c ****                     tmp6 = _mm_aesenc_si128(tmp6, KEY[12]);
5526:../src/wolfcrypt/src/aes.c ****                     tmp7 = _mm_aesenc_si128(tmp7, KEY[12]);
5527:../src/wolfcrypt/src/aes.c ****                     tmp8 = _mm_aesenc_si128(tmp8, KEY[12]);
5528:../src/wolfcrypt/src/aes.c ****                     tmp1 = _mm_aesenc_si128(tmp1, KEY[13]);
5529:../src/wolfcrypt/src/aes.c ****                     tmp2 = _mm_aesenc_si128(tmp2, KEY[13]);
5530:../src/wolfcrypt/src/aes.c ****                     tmp3 = _mm_aesenc_si128(tmp3, KEY[13]);
5531:../src/wolfcrypt/src/aes.c ****                     tmp4 = _mm_aesenc_si128(tmp4, KEY[13]);
5532:../src/wolfcrypt/src/aes.c ****                     tmp5 = _mm_aesenc_si128(tmp5, KEY[13]);
5533:../src/wolfcrypt/src/aes.c ****                     tmp6 = _mm_aesenc_si128(tmp6, KEY[13]);
5534:../src/wolfcrypt/src/aes.c ****                     tmp7 = _mm_aesenc_si128(tmp7, KEY[13]);
5535:../src/wolfcrypt/src/aes.c ****                     tmp8 = _mm_aesenc_si128(tmp8, KEY[13]);
5536:../src/wolfcrypt/src/aes.c ****                     lastKey = KEY[14];
5537:../src/wolfcrypt/src/aes.c ****                 }
5538:../src/wolfcrypt/src/aes.c ****             }
5539:../src/wolfcrypt/src/aes.c ****             AES_ENC_LAST_8();
5540:../src/wolfcrypt/src/aes.c ****         }
5541:../src/wolfcrypt/src/aes.c **** 
5542:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(tmp1, BSWAP_MASK);
5543:../src/wolfcrypt/src/aes.c ****         tmp2 = _mm_shuffle_epi8(tmp2, BSWAP_MASK);
5544:../src/wolfcrypt/src/aes.c ****         tmp3 = _mm_shuffle_epi8(tmp3, BSWAP_MASK);
5545:../src/wolfcrypt/src/aes.c ****         tmp4 = _mm_shuffle_epi8(tmp4, BSWAP_MASK);
5546:../src/wolfcrypt/src/aes.c ****         tmp5 = _mm_shuffle_epi8(tmp5, BSWAP_MASK);
5547:../src/wolfcrypt/src/aes.c ****         tmp6 = _mm_shuffle_epi8(tmp6, BSWAP_MASK);
5548:../src/wolfcrypt/src/aes.c ****         tmp7 = _mm_shuffle_epi8(tmp7, BSWAP_MASK);
5549:../src/wolfcrypt/src/aes.c ****         tmp8 = _mm_shuffle_epi8(tmp8, BSWAP_MASK);
5550:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(X, tmp1);
5551:../src/wolfcrypt/src/aes.c ****         X = gfmul8(tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8,
5552:../src/wolfcrypt/src/aes.c ****                    HT[0], HT[1], HT[2], HT[3], HT[4], HT[5], HT[6], HT[7]);
5553:../src/wolfcrypt/src/aes.c ****     }
5554:../src/wolfcrypt/src/aes.c ****     for (k = i*8; k < (int)(nbytes/16); k++) {
5555:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(ctr1, BSWAP_EPI64);
5556:../src/wolfcrypt/src/aes.c ****         ctr1 = _mm_add_epi32(ctr1, ONE);
5557:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(tmp1, KEY[0]);
5558:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[1]);
5559:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[2]);
5560:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[3]);
5561:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[4]);
5562:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[5]);
5563:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[6]);
5564:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[7]);
5565:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[8]);
5566:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[9]);
5567:../src/wolfcrypt/src/aes.c ****         lastKey = KEY[10];
5568:../src/wolfcrypt/src/aes.c ****         if (nr > 10) {
5569:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, lastKey);
5570:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[11]);
5571:../src/wolfcrypt/src/aes.c ****             lastKey = KEY[12];
5572:../src/wolfcrypt/src/aes.c ****             if (nr > 12) {
5573:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, lastKey);
5574:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, KEY[13]);
5575:../src/wolfcrypt/src/aes.c ****                 lastKey = KEY[14];
5576:../src/wolfcrypt/src/aes.c ****             }
5577:../src/wolfcrypt/src/aes.c ****         }
5578:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenclast_si128(tmp1, lastKey);
5579:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(tmp1, _mm_loadu_si128(&((__m128i*)in)[k]));
5580:../src/wolfcrypt/src/aes.c ****         _mm_storeu_si128(&((__m128i*)out)[k], tmp1);
5581:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(tmp1, BSWAP_MASK);
5582:../src/wolfcrypt/src/aes.c ****         X =_mm_xor_si128(X, tmp1);
5583:../src/wolfcrypt/src/aes.c ****         X = gfmul_shifted(X, H);
5584:../src/wolfcrypt/src/aes.c ****     }
5585:../src/wolfcrypt/src/aes.c **** #else /* AES_GCM_AESNI_NO_UNROLL */
5586:../src/wolfcrypt/src/aes.c ****     for (k = 0; k < (int)(nbytes/16) && k < 1; k++) {
5587:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(ctr1, BSWAP_EPI64);
5588:../src/wolfcrypt/src/aes.c ****         ctr1 = _mm_add_epi32(ctr1, ONE);
5589:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(tmp1, KEY[0]);
5590:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[1]);
5591:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[2]);
5592:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[3]);
5593:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[4]);
5594:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[5]);
5595:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[6]);
5596:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[7]);
5597:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[8]);
5598:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[9]);
5599:../src/wolfcrypt/src/aes.c ****         lastKey = KEY[10];
5600:../src/wolfcrypt/src/aes.c ****         if (nr > 10) {
5601:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, lastKey);
5602:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[11]);
5603:../src/wolfcrypt/src/aes.c ****             lastKey = KEY[12];
5604:../src/wolfcrypt/src/aes.c ****             if (nr > 12) {
5605:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, lastKey);
5606:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, KEY[13]);
5607:../src/wolfcrypt/src/aes.c ****                 lastKey = KEY[14];
5608:../src/wolfcrypt/src/aes.c ****             }
5609:../src/wolfcrypt/src/aes.c ****         }
5610:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenclast_si128(tmp1, lastKey);
5611:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(tmp1, _mm_loadu_si128(&((__m128i*)in)[k]));
5612:../src/wolfcrypt/src/aes.c ****         _mm_storeu_si128(&((__m128i*)out)[k], tmp1);
5613:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(tmp1, BSWAP_MASK);
5614:../src/wolfcrypt/src/aes.c ****         X =_mm_xor_si128(X, tmp1);
5615:../src/wolfcrypt/src/aes.c ****     }
5616:../src/wolfcrypt/src/aes.c ****     for (; k < (int)(nbytes/16); k++) {
5617:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(ctr1, BSWAP_EPI64);
5618:../src/wolfcrypt/src/aes.c ****         ctr1 = _mm_add_epi32(ctr1, ONE);
5619:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(tmp1, KEY[0]);
5620:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[1]);
5621:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[2]);
5622:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[3]);
5623:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[4]);
5624:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[5]);
5625:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[6]);
5626:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[7]);
5627:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[8]);
5628:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[9]);
5629:../src/wolfcrypt/src/aes.c ****         X = gfmul_shifted(X, H);
5630:../src/wolfcrypt/src/aes.c ****         lastKey = KEY[10];
5631:../src/wolfcrypt/src/aes.c ****         if (nr > 10) {
5632:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, lastKey);
5633:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[11]);
5634:../src/wolfcrypt/src/aes.c ****             lastKey = KEY[12];
5635:../src/wolfcrypt/src/aes.c ****             if (nr > 12) {
5636:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, lastKey);
5637:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, KEY[13]);
5638:../src/wolfcrypt/src/aes.c ****                 lastKey = KEY[14];
5639:../src/wolfcrypt/src/aes.c ****             }
5640:../src/wolfcrypt/src/aes.c ****         }
5641:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenclast_si128(tmp1, lastKey);
5642:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(tmp1, _mm_loadu_si128(&((__m128i*)in)[k]));
5643:../src/wolfcrypt/src/aes.c ****         _mm_storeu_si128(&((__m128i*)out)[k], tmp1);
5644:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(tmp1, BSWAP_MASK);
5645:../src/wolfcrypt/src/aes.c ****         X =_mm_xor_si128(X, tmp1);
5646:../src/wolfcrypt/src/aes.c ****     }
5647:../src/wolfcrypt/src/aes.c ****     if (k > 0) {
5648:../src/wolfcrypt/src/aes.c ****         X = gfmul_shifted(X, H);
5649:../src/wolfcrypt/src/aes.c ****     }
5650:../src/wolfcrypt/src/aes.c **** #endif /* AES_GCM_AESNI_NO_UNROLL */
5651:../src/wolfcrypt/src/aes.c **** 
5652:../src/wolfcrypt/src/aes.c ****     /* If one partial block remains */
5653:../src/wolfcrypt/src/aes.c ****     if (nbytes % 16) {
5654:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(ctr1, BSWAP_EPI64);
5655:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(tmp1, KEY[0]);
5656:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[1]);
5657:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[2]);
5658:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[3]);
5659:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[4]);
5660:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[5]);
5661:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[6]);
5662:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[7]);
5663:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[8]);
5664:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[9]);
5665:../src/wolfcrypt/src/aes.c ****         lastKey = KEY[10];
5666:../src/wolfcrypt/src/aes.c ****         if (nr > 10) {
5667:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, lastKey);
5668:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[11]);
5669:../src/wolfcrypt/src/aes.c ****             lastKey = KEY[12];
5670:../src/wolfcrypt/src/aes.c ****             if (nr > 12) {
5671:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, lastKey);
5672:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, KEY[13]);
5673:../src/wolfcrypt/src/aes.c ****                 lastKey = KEY[14];
5674:../src/wolfcrypt/src/aes.c ****             }
5675:../src/wolfcrypt/src/aes.c ****         }
5676:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenclast_si128(tmp1, lastKey);
5677:../src/wolfcrypt/src/aes.c ****         last_block = tmp1;
5678:../src/wolfcrypt/src/aes.c ****         for (j=0; j < (int)(nbytes%16); j++)
5679:../src/wolfcrypt/src/aes.c ****             ((unsigned char*)&last_block)[j] = in[k*16+j];
5680:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(tmp1, last_block);
5681:../src/wolfcrypt/src/aes.c ****         last_block = tmp1;
5682:../src/wolfcrypt/src/aes.c ****         for (j=0; j < (int)(nbytes%16); j++)
5683:../src/wolfcrypt/src/aes.c ****             out[k*16+j] = ((unsigned char*)&last_block)[j];
5684:../src/wolfcrypt/src/aes.c ****         tmp1 = last_block;
5685:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(tmp1, BSWAP_MASK);
5686:../src/wolfcrypt/src/aes.c ****         X =_mm_xor_si128(X, tmp1);
5687:../src/wolfcrypt/src/aes.c ****         X = gfmul_shifted(X, H);
5688:../src/wolfcrypt/src/aes.c ****     }
5689:../src/wolfcrypt/src/aes.c ****     AES_GCM_INSERT_EPI(tmp1, nbytes, abytes);
5690:../src/wolfcrypt/src/aes.c ****     X = _mm_xor_si128(X, tmp1);
5691:../src/wolfcrypt/src/aes.c ****     X = gfmul_shifted(X, H);
5692:../src/wolfcrypt/src/aes.c ****     X = _mm_shuffle_epi8(X, BSWAP_MASK);
5693:../src/wolfcrypt/src/aes.c ****     T = _mm_xor_si128(X, T);
5694:../src/wolfcrypt/src/aes.c ****     /*_mm_storeu_si128((__m128i*)tag, T);*/
5695:../src/wolfcrypt/src/aes.c ****     XMEMCPY(tag, &T, tbytes);
5696:../src/wolfcrypt/src/aes.c ****     ForceZero(&lastKey, sizeof(lastKey));
5697:../src/wolfcrypt/src/aes.c **** 
5698:../src/wolfcrypt/src/aes.c ****     return 0;
5699:../src/wolfcrypt/src/aes.c **** }
5700:../src/wolfcrypt/src/aes.c **** 
5701:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AES_DECRYPT
5702:../src/wolfcrypt/src/aes.c **** 
5703:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int AES_GCM_decrypt(
5704:../src/wolfcrypt/src/aes.c ****                             const unsigned char *in, unsigned char *out,
5705:../src/wolfcrypt/src/aes.c ****                             const unsigned char* addt,
5706:../src/wolfcrypt/src/aes.c ****                             const unsigned char* ivec, const unsigned char *tag,
5707:../src/wolfcrypt/src/aes.c ****                             word32 nbytes, word32 abytes, word32 ibytes,
5708:../src/wolfcrypt/src/aes.c ****                             word32 tbytes, const unsigned char* key, int nr,
5709:../src/wolfcrypt/src/aes.c ****                             int* res)
5710:../src/wolfcrypt/src/aes.c **** {
5711:../src/wolfcrypt/src/aes.c ****     int i, j ,k;
5712:../src/wolfcrypt/src/aes.c ****     __m128i H, Y, T;
5713:../src/wolfcrypt/src/aes.c ****     __m128i *KEY = (__m128i*)key, lastKey;
5714:../src/wolfcrypt/src/aes.c ****     __m128i ctr1;
5715:../src/wolfcrypt/src/aes.c ****     __m128i last_block = _mm_setzero_si128();
5716:../src/wolfcrypt/src/aes.c ****     __m128i X = _mm_setzero_si128();
5717:../src/wolfcrypt/src/aes.c ****     __m128i tmp1, tmp2, XV;
5718:../src/wolfcrypt/src/aes.c **** #ifndef AES_GCM_AESNI_NO_UNROLL
5719:../src/wolfcrypt/src/aes.c ****     __m128i HT[8];
5720:../src/wolfcrypt/src/aes.c ****     __m128i r0, r1;
5721:../src/wolfcrypt/src/aes.c ****     __m128i tmp3, tmp4, tmp5, tmp6, tmp7, tmp8;
5722:../src/wolfcrypt/src/aes.c **** #endif /* AES_GCM_AESNI_NO_UNROLL */
5723:../src/wolfcrypt/src/aes.c **** 
5724:../src/wolfcrypt/src/aes.c ****     if (ibytes == GCM_NONCE_MID_SZ)
5725:../src/wolfcrypt/src/aes.c ****         aes_gcm_calc_iv_12(KEY, ivec, nr, H, Y, T);
5726:../src/wolfcrypt/src/aes.c ****     else
5727:../src/wolfcrypt/src/aes.c ****         aes_gcm_calc_iv(KEY, ivec, ibytes, nr, H, Y, T);
5728:../src/wolfcrypt/src/aes.c **** 
5729:../src/wolfcrypt/src/aes.c ****     for (i=0; i<(int)(abytes/16); i++) {
5730:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_loadu_si128(&((__m128i*)addt)[i]);
5731:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(tmp1, BSWAP_MASK);
5732:../src/wolfcrypt/src/aes.c ****         X = _mm_xor_si128(X, tmp1);
5733:../src/wolfcrypt/src/aes.c ****         X = gfmul_sw(X, H);
5734:../src/wolfcrypt/src/aes.c ****     }
5735:../src/wolfcrypt/src/aes.c ****     if (abytes%16) {
5736:../src/wolfcrypt/src/aes.c ****         last_block = _mm_setzero_si128();
5737:../src/wolfcrypt/src/aes.c ****         for (j=0; j<(int)(abytes%16); j++)
5738:../src/wolfcrypt/src/aes.c ****             ((unsigned char*)&last_block)[j] = addt[i*16+j];
5739:../src/wolfcrypt/src/aes.c ****         tmp1 = last_block;
5740:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(tmp1, BSWAP_MASK);
5741:../src/wolfcrypt/src/aes.c ****         X = _mm_xor_si128(X, tmp1);
5742:../src/wolfcrypt/src/aes.c ****         X = gfmul_sw(X, H);
5743:../src/wolfcrypt/src/aes.c ****     }
5744:../src/wolfcrypt/src/aes.c **** 
5745:../src/wolfcrypt/src/aes.c ****     tmp1 = _mm_shuffle_epi8(Y, BSWAP_EPI64);
5746:../src/wolfcrypt/src/aes.c ****     ctr1 = _mm_add_epi32(tmp1, ONE);
5747:../src/wolfcrypt/src/aes.c ****     H = gfmul_shl1(H);
5748:../src/wolfcrypt/src/aes.c ****     i = 0;
5749:../src/wolfcrypt/src/aes.c **** 
5750:../src/wolfcrypt/src/aes.c **** #ifndef AES_GCM_AESNI_NO_UNROLL
5751:../src/wolfcrypt/src/aes.c **** 
5752:../src/wolfcrypt/src/aes.c ****     if (0 < nbytes/16/8) {
5753:../src/wolfcrypt/src/aes.c ****         HT[0] = H;
5754:../src/wolfcrypt/src/aes.c ****         HT[1] = gfmul_shifted(H, H);
5755:../src/wolfcrypt/src/aes.c ****         HT[2] = gfmul_shifted(H, HT[1]);
5756:../src/wolfcrypt/src/aes.c ****         HT[3] = gfmul_shifted(HT[1], HT[1]);
5757:../src/wolfcrypt/src/aes.c ****         HT[4] = gfmul_shifted(HT[1], HT[2]);
5758:../src/wolfcrypt/src/aes.c ****         HT[5] = gfmul_shifted(HT[2], HT[2]);
5759:../src/wolfcrypt/src/aes.c ****         HT[6] = gfmul_shifted(HT[2], HT[3]);
5760:../src/wolfcrypt/src/aes.c ****         HT[7] = gfmul_shifted(HT[3], HT[3]);
5761:../src/wolfcrypt/src/aes.c **** 
5762:../src/wolfcrypt/src/aes.c ****         for (; i < (int)(nbytes/16/8); i++) {
5763:../src/wolfcrypt/src/aes.c ****                 r0 = _mm_setzero_si128();
5764:../src/wolfcrypt/src/aes.c ****                 r1 = _mm_setzero_si128();
5765:../src/wolfcrypt/src/aes.c **** 
5766:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_shuffle_epi8(ctr1, BSWAP_EPI64);
5767:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_add_epi32(ctr1, ONE);
5768:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_shuffle_epi8(tmp2, BSWAP_EPI64);
5769:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_add_epi32(ctr1, TWO);
5770:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_shuffle_epi8(tmp3, BSWAP_EPI64);
5771:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_add_epi32(ctr1, THREE);
5772:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_shuffle_epi8(tmp4, BSWAP_EPI64);
5773:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_add_epi32(ctr1, FOUR);
5774:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_shuffle_epi8(tmp5, BSWAP_EPI64);
5775:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_add_epi32(ctr1, FIVE);
5776:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_shuffle_epi8(tmp6, BSWAP_EPI64);
5777:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_add_epi32(ctr1, SIX);
5778:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_shuffle_epi8(tmp7, BSWAP_EPI64);
5779:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_add_epi32(ctr1, SEVEN);
5780:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_shuffle_epi8(tmp8, BSWAP_EPI64);
5781:../src/wolfcrypt/src/aes.c ****             ctr1 = _mm_add_epi32(ctr1, EIGHT);
5782:../src/wolfcrypt/src/aes.c ****             tmp1 =_mm_xor_si128(tmp1, KEY[0]);
5783:../src/wolfcrypt/src/aes.c ****             tmp2 =_mm_xor_si128(tmp2, KEY[0]);
5784:../src/wolfcrypt/src/aes.c ****             tmp3 =_mm_xor_si128(tmp3, KEY[0]);
5785:../src/wolfcrypt/src/aes.c ****             tmp4 =_mm_xor_si128(tmp4, KEY[0]);
5786:../src/wolfcrypt/src/aes.c ****             tmp5 =_mm_xor_si128(tmp5, KEY[0]);
5787:../src/wolfcrypt/src/aes.c ****             tmp6 =_mm_xor_si128(tmp6, KEY[0]);
5788:../src/wolfcrypt/src/aes.c ****             tmp7 =_mm_xor_si128(tmp7, KEY[0]);
5789:../src/wolfcrypt/src/aes.c ****             tmp8 =_mm_xor_si128(tmp8, KEY[0]);
5790:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5791:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)in)[i*8+0]);
5792:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5793:../src/wolfcrypt/src/aes.c ****                 XV = _mm_xor_si128(XV, X);
5794:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[7], &r0, &r1);
5795:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[1]);
5796:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[1]);
5797:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[1]);
5798:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[1]);
5799:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[1]);
5800:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[1]);
5801:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[1]);
5802:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[1]);
5803:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5804:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)in)[i*8+1]);
5805:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5806:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[6], &r0, &r1);
5807:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[2]);
5808:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[2]);
5809:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[2]);
5810:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[2]);
5811:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[2]);
5812:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[2]);
5813:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[2]);
5814:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[2]);
5815:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5816:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)in)[i*8+2]);
5817:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5818:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[5], &r0, &r1);
5819:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[3]);
5820:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[3]);
5821:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[3]);
5822:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[3]);
5823:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[3]);
5824:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[3]);
5825:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[3]);
5826:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[3]);
5827:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5828:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)in)[i*8+3]);
5829:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5830:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[4], &r0, &r1);
5831:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[4]);
5832:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[4]);
5833:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[4]);
5834:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[4]);
5835:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[4]);
5836:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[4]);
5837:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[4]);
5838:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[4]);
5839:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5840:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)in)[i*8+4]);
5841:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5842:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[3], &r0, &r1);
5843:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[5]);
5844:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[5]);
5845:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[5]);
5846:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[5]);
5847:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[5]);
5848:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[5]);
5849:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[5]);
5850:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[5]);
5851:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5852:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)in)[i*8+5]);
5853:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5854:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[2], &r0, &r1);
5855:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[6]);
5856:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[6]);
5857:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[6]);
5858:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[6]);
5859:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[6]);
5860:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[6]);
5861:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[6]);
5862:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[6]);
5863:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5864:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)in)[i*8+6]);
5865:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5866:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[1], &r0, &r1);
5867:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[7]);
5868:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[7]);
5869:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[7]);
5870:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[7]);
5871:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[7]);
5872:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[7]);
5873:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[7]);
5874:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[7]);
5875:../src/wolfcrypt/src/aes.c ****                 /* 128 x 128 Carryless Multiply */
5876:../src/wolfcrypt/src/aes.c ****                 XV = _mm_loadu_si128(&((__m128i*)in)[i*8+7]);
5877:../src/wolfcrypt/src/aes.c ****                 XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5878:../src/wolfcrypt/src/aes.c ****                 gfmul_only(XV, HT[0], &r0, &r1);
5879:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[8]);
5880:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[8]);
5881:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[8]);
5882:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[8]);
5883:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[8]);
5884:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[8]);
5885:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[8]);
5886:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[8]);
5887:../src/wolfcrypt/src/aes.c ****                 /* Reduction */
5888:../src/wolfcrypt/src/aes.c ****                 X = ghash_red(r0, r1);
5889:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[9]);
5890:../src/wolfcrypt/src/aes.c ****             tmp2 = _mm_aesenc_si128(tmp2, KEY[9]);
5891:../src/wolfcrypt/src/aes.c ****             tmp3 = _mm_aesenc_si128(tmp3, KEY[9]);
5892:../src/wolfcrypt/src/aes.c ****             tmp4 = _mm_aesenc_si128(tmp4, KEY[9]);
5893:../src/wolfcrypt/src/aes.c ****             tmp5 = _mm_aesenc_si128(tmp5, KEY[9]);
5894:../src/wolfcrypt/src/aes.c ****             tmp6 = _mm_aesenc_si128(tmp6, KEY[9]);
5895:../src/wolfcrypt/src/aes.c ****             tmp7 = _mm_aesenc_si128(tmp7, KEY[9]);
5896:../src/wolfcrypt/src/aes.c ****             tmp8 = _mm_aesenc_si128(tmp8, KEY[9]);
5897:../src/wolfcrypt/src/aes.c ****             lastKey = KEY[10];
5898:../src/wolfcrypt/src/aes.c ****             if (nr > 10) {
5899:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, KEY[10]);
5900:../src/wolfcrypt/src/aes.c ****                 tmp2 = _mm_aesenc_si128(tmp2, KEY[10]);
5901:../src/wolfcrypt/src/aes.c ****                 tmp3 = _mm_aesenc_si128(tmp3, KEY[10]);
5902:../src/wolfcrypt/src/aes.c ****                 tmp4 = _mm_aesenc_si128(tmp4, KEY[10]);
5903:../src/wolfcrypt/src/aes.c ****                 tmp5 = _mm_aesenc_si128(tmp5, KEY[10]);
5904:../src/wolfcrypt/src/aes.c ****                 tmp6 = _mm_aesenc_si128(tmp6, KEY[10]);
5905:../src/wolfcrypt/src/aes.c ****                 tmp7 = _mm_aesenc_si128(tmp7, KEY[10]);
5906:../src/wolfcrypt/src/aes.c ****                 tmp8 = _mm_aesenc_si128(tmp8, KEY[10]);
5907:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, KEY[11]);
5908:../src/wolfcrypt/src/aes.c ****                 tmp2 = _mm_aesenc_si128(tmp2, KEY[11]);
5909:../src/wolfcrypt/src/aes.c ****                 tmp3 = _mm_aesenc_si128(tmp3, KEY[11]);
5910:../src/wolfcrypt/src/aes.c ****                 tmp4 = _mm_aesenc_si128(tmp4, KEY[11]);
5911:../src/wolfcrypt/src/aes.c ****                 tmp5 = _mm_aesenc_si128(tmp5, KEY[11]);
5912:../src/wolfcrypt/src/aes.c ****                 tmp6 = _mm_aesenc_si128(tmp6, KEY[11]);
5913:../src/wolfcrypt/src/aes.c ****                 tmp7 = _mm_aesenc_si128(tmp7, KEY[11]);
5914:../src/wolfcrypt/src/aes.c ****                 tmp8 = _mm_aesenc_si128(tmp8, KEY[11]);
5915:../src/wolfcrypt/src/aes.c ****                 lastKey = KEY[12];
5916:../src/wolfcrypt/src/aes.c ****                 if (nr > 12) {
5917:../src/wolfcrypt/src/aes.c ****                     tmp1 = _mm_aesenc_si128(tmp1, KEY[12]);
5918:../src/wolfcrypt/src/aes.c ****                     tmp2 = _mm_aesenc_si128(tmp2, KEY[12]);
5919:../src/wolfcrypt/src/aes.c ****                     tmp3 = _mm_aesenc_si128(tmp3, KEY[12]);
5920:../src/wolfcrypt/src/aes.c ****                     tmp4 = _mm_aesenc_si128(tmp4, KEY[12]);
5921:../src/wolfcrypt/src/aes.c ****                     tmp5 = _mm_aesenc_si128(tmp5, KEY[12]);
5922:../src/wolfcrypt/src/aes.c ****                     tmp6 = _mm_aesenc_si128(tmp6, KEY[12]);
5923:../src/wolfcrypt/src/aes.c ****                     tmp7 = _mm_aesenc_si128(tmp7, KEY[12]);
5924:../src/wolfcrypt/src/aes.c ****                     tmp8 = _mm_aesenc_si128(tmp8, KEY[12]);
5925:../src/wolfcrypt/src/aes.c ****                     tmp1 = _mm_aesenc_si128(tmp1, KEY[13]);
5926:../src/wolfcrypt/src/aes.c ****                     tmp2 = _mm_aesenc_si128(tmp2, KEY[13]);
5927:../src/wolfcrypt/src/aes.c ****                     tmp3 = _mm_aesenc_si128(tmp3, KEY[13]);
5928:../src/wolfcrypt/src/aes.c ****                     tmp4 = _mm_aesenc_si128(tmp4, KEY[13]);
5929:../src/wolfcrypt/src/aes.c ****                     tmp5 = _mm_aesenc_si128(tmp5, KEY[13]);
5930:../src/wolfcrypt/src/aes.c ****                     tmp6 = _mm_aesenc_si128(tmp6, KEY[13]);
5931:../src/wolfcrypt/src/aes.c ****                     tmp7 = _mm_aesenc_si128(tmp7, KEY[13]);
5932:../src/wolfcrypt/src/aes.c ****                     tmp8 = _mm_aesenc_si128(tmp8, KEY[13]);
5933:../src/wolfcrypt/src/aes.c ****                     lastKey = KEY[14];
5934:../src/wolfcrypt/src/aes.c ****                 }
5935:../src/wolfcrypt/src/aes.c ****             }
5936:../src/wolfcrypt/src/aes.c ****             AES_ENC_LAST_8();
5937:../src/wolfcrypt/src/aes.c ****         }
5938:../src/wolfcrypt/src/aes.c ****     }
5939:../src/wolfcrypt/src/aes.c **** 
5940:../src/wolfcrypt/src/aes.c **** #endif /* AES_GCM_AESNI_NO_UNROLL */
5941:../src/wolfcrypt/src/aes.c **** 
5942:../src/wolfcrypt/src/aes.c ****     for (k = i*8; k < (int)(nbytes/16); k++) {
5943:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(ctr1, BSWAP_EPI64);
5944:../src/wolfcrypt/src/aes.c ****         ctr1 = _mm_add_epi32(ctr1, ONE);
5945:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(tmp1, KEY[0]);
5946:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[1]);
5947:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[2]);
5948:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[3]);
5949:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[4]);
5950:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[5]);
5951:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[6]);
5952:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[7]);
5953:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[8]);
5954:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[9]);
5955:../src/wolfcrypt/src/aes.c ****         /* 128 x 128 Carryless Multiply */
5956:../src/wolfcrypt/src/aes.c ****         XV = _mm_loadu_si128(&((__m128i*)in)[k]);
5957:../src/wolfcrypt/src/aes.c ****         XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
5958:../src/wolfcrypt/src/aes.c ****         XV = _mm_xor_si128(XV, X);
5959:../src/wolfcrypt/src/aes.c ****         X = gfmul_shifted(XV, H);
5960:../src/wolfcrypt/src/aes.c ****         lastKey = KEY[10];
5961:../src/wolfcrypt/src/aes.c ****         if (nr > 10) {
5962:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, lastKey);
5963:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[11]);
5964:../src/wolfcrypt/src/aes.c ****             lastKey = KEY[12];
5965:../src/wolfcrypt/src/aes.c ****             if (nr > 12) {
5966:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, lastKey);
5967:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, KEY[13]);
5968:../src/wolfcrypt/src/aes.c ****                 lastKey = KEY[14];
5969:../src/wolfcrypt/src/aes.c ****             }
5970:../src/wolfcrypt/src/aes.c ****         }
5971:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenclast_si128(tmp1, lastKey);
5972:../src/wolfcrypt/src/aes.c ****         tmp2 = _mm_loadu_si128(&((__m128i*)in)[k]);
5973:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(tmp1, tmp2);
5974:../src/wolfcrypt/src/aes.c ****         _mm_storeu_si128(&((__m128i*)out)[k], tmp1);
5975:../src/wolfcrypt/src/aes.c ****     }
5976:../src/wolfcrypt/src/aes.c **** 
5977:../src/wolfcrypt/src/aes.c ****     /* If one partial block remains */
5978:../src/wolfcrypt/src/aes.c ****     if (nbytes % 16) {
5979:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_shuffle_epi8(ctr1, BSWAP_EPI64);
5980:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(tmp1, KEY[0]);
5981:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[1]);
5982:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[2]);
5983:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[3]);
5984:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[4]);
5985:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[5]);
5986:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[6]);
5987:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[7]);
5988:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[8]);
5989:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenc_si128(tmp1, KEY[9]);
5990:../src/wolfcrypt/src/aes.c ****         lastKey = KEY[10];
5991:../src/wolfcrypt/src/aes.c ****         if (nr > 10) {
5992:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, lastKey);
5993:../src/wolfcrypt/src/aes.c ****             tmp1 = _mm_aesenc_si128(tmp1, KEY[11]);
5994:../src/wolfcrypt/src/aes.c ****             lastKey = KEY[12];
5995:../src/wolfcrypt/src/aes.c ****             if (nr > 12) {
5996:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, lastKey);
5997:../src/wolfcrypt/src/aes.c ****                 tmp1 = _mm_aesenc_si128(tmp1, KEY[13]);
5998:../src/wolfcrypt/src/aes.c ****                 lastKey = KEY[14];
5999:../src/wolfcrypt/src/aes.c ****             }
6000:../src/wolfcrypt/src/aes.c ****         }
6001:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_aesenclast_si128(tmp1, lastKey);
6002:../src/wolfcrypt/src/aes.c ****         last_block = _mm_setzero_si128();
6003:../src/wolfcrypt/src/aes.c ****         for (j=0; j < (int)(nbytes%16); j++)
6004:../src/wolfcrypt/src/aes.c ****             ((unsigned char*)&last_block)[j] = in[k*16+j];
6005:../src/wolfcrypt/src/aes.c ****         XV = last_block;
6006:../src/wolfcrypt/src/aes.c ****         tmp1 = _mm_xor_si128(tmp1, last_block);
6007:../src/wolfcrypt/src/aes.c ****         last_block = tmp1;
6008:../src/wolfcrypt/src/aes.c ****         for (j=0; j < (int)(nbytes%16); j++)
6009:../src/wolfcrypt/src/aes.c ****             out[k*16+j] = ((unsigned char*)&last_block)[j];
6010:../src/wolfcrypt/src/aes.c ****         XV = _mm_shuffle_epi8(XV, BSWAP_MASK);
6011:../src/wolfcrypt/src/aes.c ****         XV = _mm_xor_si128(XV, X);
6012:../src/wolfcrypt/src/aes.c ****         X = gfmul_shifted(XV, H);
6013:../src/wolfcrypt/src/aes.c ****     }
6014:../src/wolfcrypt/src/aes.c **** 
6015:../src/wolfcrypt/src/aes.c ****     AES_GCM_INSERT_EPI(tmp1, nbytes, abytes);
6016:../src/wolfcrypt/src/aes.c **** 
6017:../src/wolfcrypt/src/aes.c ****     /* 128 x 128 Carryless Multiply */
6018:../src/wolfcrypt/src/aes.c ****     X = _mm_xor_si128(X, tmp1);
6019:../src/wolfcrypt/src/aes.c ****     X = gfmul_shifted(X, H);
6020:../src/wolfcrypt/src/aes.c ****     X = _mm_shuffle_epi8(X, BSWAP_MASK);
6021:../src/wolfcrypt/src/aes.c ****     T = _mm_xor_si128(X, T);
6022:../src/wolfcrypt/src/aes.c **** 
6023:../src/wolfcrypt/src/aes.c **** /*    if (0xffff !=
6024:../src/wolfcrypt/src/aes.c ****            _mm_movemask_epi8(_mm_cmpeq_epi8(T, _mm_loadu_si128((__m128i*)tag)))) */
6025:../src/wolfcrypt/src/aes.c ****     if (XMEMCMP(tag, &T, tbytes) != 0)
6026:../src/wolfcrypt/src/aes.c ****         *res = 0; /* in case the authentication failed */
6027:../src/wolfcrypt/src/aes.c ****     else
6028:../src/wolfcrypt/src/aes.c ****         *res = 1; /* when successful returns 1 */
6029:../src/wolfcrypt/src/aes.c ****     ForceZero(&lastKey, sizeof(lastKey));
6030:../src/wolfcrypt/src/aes.c **** 
6031:../src/wolfcrypt/src/aes.c ****     return 0;
6032:../src/wolfcrypt/src/aes.c **** }
6033:../src/wolfcrypt/src/aes.c **** 
6034:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_DECRYPT */
6035:../src/wolfcrypt/src/aes.c **** #endif /* _MSC_VER */
6036:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AESNI */
6037:../src/wolfcrypt/src/aes.c **** 
6038:../src/wolfcrypt/src/aes.c **** #if defined(GCM_SMALL)
6039:../src/wolfcrypt/src/aes.c **** static void GMULT(byte* X, byte* Y)
6040:../src/wolfcrypt/src/aes.c **** {
6041:../src/wolfcrypt/src/aes.c ****     byte Z[AES_BLOCK_SIZE];
6042:../src/wolfcrypt/src/aes.c ****     byte V[AES_BLOCK_SIZE];
6043:../src/wolfcrypt/src/aes.c ****     int i, j;
6044:../src/wolfcrypt/src/aes.c **** 
6045:../src/wolfcrypt/src/aes.c ****     XMEMSET(Z, 0, AES_BLOCK_SIZE);
6046:../src/wolfcrypt/src/aes.c ****     XMEMCPY(V, X, AES_BLOCK_SIZE);
6047:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < AES_BLOCK_SIZE; i++)
6048:../src/wolfcrypt/src/aes.c ****     {
6049:../src/wolfcrypt/src/aes.c ****         byte y = Y[i];
6050:../src/wolfcrypt/src/aes.c ****         for (j = 0; j < 8; j++)
6051:../src/wolfcrypt/src/aes.c ****         {
6052:../src/wolfcrypt/src/aes.c ****             if (y & 0x80) {
6053:../src/wolfcrypt/src/aes.c ****                 xorbuf(Z, V, AES_BLOCK_SIZE);
6054:../src/wolfcrypt/src/aes.c ****             }
6055:../src/wolfcrypt/src/aes.c **** 
6056:../src/wolfcrypt/src/aes.c ****             RIGHTSHIFTX(V);
6057:../src/wolfcrypt/src/aes.c ****             y = y << 1;
6058:../src/wolfcrypt/src/aes.c ****         }
6059:../src/wolfcrypt/src/aes.c ****     }
6060:../src/wolfcrypt/src/aes.c ****     XMEMCPY(X, Z, AES_BLOCK_SIZE);
6061:../src/wolfcrypt/src/aes.c **** }
6062:../src/wolfcrypt/src/aes.c **** 
6063:../src/wolfcrypt/src/aes.c **** 
6064:../src/wolfcrypt/src/aes.c **** void GHASH(Aes* aes, const byte* a, word32 aSz, const byte* c,
6065:../src/wolfcrypt/src/aes.c ****     word32 cSz, byte* s, word32 sSz)
6066:../src/wolfcrypt/src/aes.c **** {
6067:../src/wolfcrypt/src/aes.c ****     byte x[AES_BLOCK_SIZE];
6068:../src/wolfcrypt/src/aes.c ****     byte scratch[AES_BLOCK_SIZE];
6069:../src/wolfcrypt/src/aes.c ****     word32 blocks, partial;
6070:../src/wolfcrypt/src/aes.c ****     byte* h;
6071:../src/wolfcrypt/src/aes.c **** 
6072:../src/wolfcrypt/src/aes.c ****     if (aes == NULL) {
6073:../src/wolfcrypt/src/aes.c ****         return;
6074:../src/wolfcrypt/src/aes.c ****     }
6075:../src/wolfcrypt/src/aes.c **** 
6076:../src/wolfcrypt/src/aes.c ****     h = aes->H;
6077:../src/wolfcrypt/src/aes.c ****     XMEMSET(x, 0, AES_BLOCK_SIZE);
6078:../src/wolfcrypt/src/aes.c **** 
6079:../src/wolfcrypt/src/aes.c ****     /* Hash in A, the Additional Authentication Data */
6080:../src/wolfcrypt/src/aes.c ****     if (aSz != 0 && a != NULL) {
6081:../src/wolfcrypt/src/aes.c ****         blocks = aSz / AES_BLOCK_SIZE;
6082:../src/wolfcrypt/src/aes.c ****         partial = aSz % AES_BLOCK_SIZE;
6083:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
6084:../src/wolfcrypt/src/aes.c ****             xorbuf(x, a, AES_BLOCK_SIZE);
6085:../src/wolfcrypt/src/aes.c ****             GMULT(x, h);
6086:../src/wolfcrypt/src/aes.c ****             a += AES_BLOCK_SIZE;
6087:../src/wolfcrypt/src/aes.c ****         }
6088:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
6089:../src/wolfcrypt/src/aes.c ****             XMEMSET(scratch, 0, AES_BLOCK_SIZE);
6090:../src/wolfcrypt/src/aes.c ****             XMEMCPY(scratch, a, partial);
6091:../src/wolfcrypt/src/aes.c ****             xorbuf(x, scratch, AES_BLOCK_SIZE);
6092:../src/wolfcrypt/src/aes.c ****             GMULT(x, h);
6093:../src/wolfcrypt/src/aes.c ****         }
6094:../src/wolfcrypt/src/aes.c ****     }
6095:../src/wolfcrypt/src/aes.c **** 
6096:../src/wolfcrypt/src/aes.c ****     /* Hash in C, the Ciphertext */
6097:../src/wolfcrypt/src/aes.c ****     if (cSz != 0 && c != NULL) {
6098:../src/wolfcrypt/src/aes.c ****         blocks = cSz / AES_BLOCK_SIZE;
6099:../src/wolfcrypt/src/aes.c ****         partial = cSz % AES_BLOCK_SIZE;
6100:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
6101:../src/wolfcrypt/src/aes.c ****             xorbuf(x, c, AES_BLOCK_SIZE);
6102:../src/wolfcrypt/src/aes.c ****             GMULT(x, h);
6103:../src/wolfcrypt/src/aes.c ****             c += AES_BLOCK_SIZE;
6104:../src/wolfcrypt/src/aes.c ****         }
6105:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
6106:../src/wolfcrypt/src/aes.c ****             XMEMSET(scratch, 0, AES_BLOCK_SIZE);
6107:../src/wolfcrypt/src/aes.c ****             XMEMCPY(scratch, c, partial);
6108:../src/wolfcrypt/src/aes.c ****             xorbuf(x, scratch, AES_BLOCK_SIZE);
6109:../src/wolfcrypt/src/aes.c ****             GMULT(x, h);
6110:../src/wolfcrypt/src/aes.c ****         }
6111:../src/wolfcrypt/src/aes.c ****     }
6112:../src/wolfcrypt/src/aes.c **** 
6113:../src/wolfcrypt/src/aes.c ****     /* Hash in the lengths of A and C in bits */
6114:../src/wolfcrypt/src/aes.c ****     FlattenSzInBits(&scratch[0], aSz);
6115:../src/wolfcrypt/src/aes.c ****     FlattenSzInBits(&scratch[8], cSz);
6116:../src/wolfcrypt/src/aes.c ****     xorbuf(x, scratch, AES_BLOCK_SIZE);
6117:../src/wolfcrypt/src/aes.c ****     GMULT(x, h);
6118:../src/wolfcrypt/src/aes.c **** 
6119:../src/wolfcrypt/src/aes.c ****     /* Copy the result into s. */
6120:../src/wolfcrypt/src/aes.c ****     XMEMCPY(s, x, sSz);
6121:../src/wolfcrypt/src/aes.c **** }
6122:../src/wolfcrypt/src/aes.c **** 
6123:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESGCM_STREAM
6124:../src/wolfcrypt/src/aes.c **** /* No extra initialization for small implementation.
6125:../src/wolfcrypt/src/aes.c ****  *
6126:../src/wolfcrypt/src/aes.c ****  * @param [in] aes  AES GCM object.
6127:../src/wolfcrypt/src/aes.c ****  */
6128:../src/wolfcrypt/src/aes.c **** #define GHASH_INIT_EXTRA(aes)
6129:../src/wolfcrypt/src/aes.c **** 
6130:../src/wolfcrypt/src/aes.c **** /* GHASH one block of data..
6131:../src/wolfcrypt/src/aes.c ****  *
6132:../src/wolfcrypt/src/aes.c ****  * XOR block into tag and GMULT with H.
6133:../src/wolfcrypt/src/aes.c ****  *
6134:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes    AES GCM object.
6135:../src/wolfcrypt/src/aes.c ****  * @param [in]      block  Block of AAD or cipher text.
6136:../src/wolfcrypt/src/aes.c ****  */
6137:../src/wolfcrypt/src/aes.c **** #define GHASH_ONE_BLOCK(aes, block)                     \
6138:../src/wolfcrypt/src/aes.c ****     do {                                                \
6139:../src/wolfcrypt/src/aes.c ****         xorbuf(AES_TAG(aes), block, AES_BLOCK_SIZE);    \
6140:../src/wolfcrypt/src/aes.c ****         GMULT(AES_TAG(aes), aes->H);                    \
6141:../src/wolfcrypt/src/aes.c ****     }                                                   \
6142:../src/wolfcrypt/src/aes.c ****     while (0)
6143:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AESGCM_STREAM */
6144:../src/wolfcrypt/src/aes.c **** /* end GCM_SMALL */
6145:../src/wolfcrypt/src/aes.c **** #elif defined(GCM_TABLE)
6146:../src/wolfcrypt/src/aes.c **** 
6147:../src/wolfcrypt/src/aes.c **** static const byte R[256][2] = {
6148:../src/wolfcrypt/src/aes.c ****     {0x00, 0x00}, {0x01, 0xc2}, {0x03, 0x84}, {0x02, 0x46},
6149:../src/wolfcrypt/src/aes.c ****     {0x07, 0x08}, {0x06, 0xca}, {0x04, 0x8c}, {0x05, 0x4e},
6150:../src/wolfcrypt/src/aes.c ****     {0x0e, 0x10}, {0x0f, 0xd2}, {0x0d, 0x94}, {0x0c, 0x56},
6151:../src/wolfcrypt/src/aes.c ****     {0x09, 0x18}, {0x08, 0xda}, {0x0a, 0x9c}, {0x0b, 0x5e},
6152:../src/wolfcrypt/src/aes.c ****     {0x1c, 0x20}, {0x1d, 0xe2}, {0x1f, 0xa4}, {0x1e, 0x66},
6153:../src/wolfcrypt/src/aes.c ****     {0x1b, 0x28}, {0x1a, 0xea}, {0x18, 0xac}, {0x19, 0x6e},
6154:../src/wolfcrypt/src/aes.c ****     {0x12, 0x30}, {0x13, 0xf2}, {0x11, 0xb4}, {0x10, 0x76},
6155:../src/wolfcrypt/src/aes.c ****     {0x15, 0x38}, {0x14, 0xfa}, {0x16, 0xbc}, {0x17, 0x7e},
6156:../src/wolfcrypt/src/aes.c ****     {0x38, 0x40}, {0x39, 0x82}, {0x3b, 0xc4}, {0x3a, 0x06},
6157:../src/wolfcrypt/src/aes.c ****     {0x3f, 0x48}, {0x3e, 0x8a}, {0x3c, 0xcc}, {0x3d, 0x0e},
6158:../src/wolfcrypt/src/aes.c ****     {0x36, 0x50}, {0x37, 0x92}, {0x35, 0xd4}, {0x34, 0x16},
6159:../src/wolfcrypt/src/aes.c ****     {0x31, 0x58}, {0x30, 0x9a}, {0x32, 0xdc}, {0x33, 0x1e},
6160:../src/wolfcrypt/src/aes.c ****     {0x24, 0x60}, {0x25, 0xa2}, {0x27, 0xe4}, {0x26, 0x26},
6161:../src/wolfcrypt/src/aes.c ****     {0x23, 0x68}, {0x22, 0xaa}, {0x20, 0xec}, {0x21, 0x2e},
6162:../src/wolfcrypt/src/aes.c ****     {0x2a, 0x70}, {0x2b, 0xb2}, {0x29, 0xf4}, {0x28, 0x36},
6163:../src/wolfcrypt/src/aes.c ****     {0x2d, 0x78}, {0x2c, 0xba}, {0x2e, 0xfc}, {0x2f, 0x3e},
6164:../src/wolfcrypt/src/aes.c ****     {0x70, 0x80}, {0x71, 0x42}, {0x73, 0x04}, {0x72, 0xc6},
6165:../src/wolfcrypt/src/aes.c ****     {0x77, 0x88}, {0x76, 0x4a}, {0x74, 0x0c}, {0x75, 0xce},
6166:../src/wolfcrypt/src/aes.c ****     {0x7e, 0x90}, {0x7f, 0x52}, {0x7d, 0x14}, {0x7c, 0xd6},
6167:../src/wolfcrypt/src/aes.c ****     {0x79, 0x98}, {0x78, 0x5a}, {0x7a, 0x1c}, {0x7b, 0xde},
6168:../src/wolfcrypt/src/aes.c ****     {0x6c, 0xa0}, {0x6d, 0x62}, {0x6f, 0x24}, {0x6e, 0xe6},
6169:../src/wolfcrypt/src/aes.c ****     {0x6b, 0xa8}, {0x6a, 0x6a}, {0x68, 0x2c}, {0x69, 0xee},
6170:../src/wolfcrypt/src/aes.c ****     {0x62, 0xb0}, {0x63, 0x72}, {0x61, 0x34}, {0x60, 0xf6},
6171:../src/wolfcrypt/src/aes.c ****     {0x65, 0xb8}, {0x64, 0x7a}, {0x66, 0x3c}, {0x67, 0xfe},
6172:../src/wolfcrypt/src/aes.c ****     {0x48, 0xc0}, {0x49, 0x02}, {0x4b, 0x44}, {0x4a, 0x86},
6173:../src/wolfcrypt/src/aes.c ****     {0x4f, 0xc8}, {0x4e, 0x0a}, {0x4c, 0x4c}, {0x4d, 0x8e},
6174:../src/wolfcrypt/src/aes.c ****     {0x46, 0xd0}, {0x47, 0x12}, {0x45, 0x54}, {0x44, 0x96},
6175:../src/wolfcrypt/src/aes.c ****     {0x41, 0xd8}, {0x40, 0x1a}, {0x42, 0x5c}, {0x43, 0x9e},
6176:../src/wolfcrypt/src/aes.c ****     {0x54, 0xe0}, {0x55, 0x22}, {0x57, 0x64}, {0x56, 0xa6},
6177:../src/wolfcrypt/src/aes.c ****     {0x53, 0xe8}, {0x52, 0x2a}, {0x50, 0x6c}, {0x51, 0xae},
6178:../src/wolfcrypt/src/aes.c ****     {0x5a, 0xf0}, {0x5b, 0x32}, {0x59, 0x74}, {0x58, 0xb6},
6179:../src/wolfcrypt/src/aes.c ****     {0x5d, 0xf8}, {0x5c, 0x3a}, {0x5e, 0x7c}, {0x5f, 0xbe},
6180:../src/wolfcrypt/src/aes.c ****     {0xe1, 0x00}, {0xe0, 0xc2}, {0xe2, 0x84}, {0xe3, 0x46},
6181:../src/wolfcrypt/src/aes.c ****     {0xe6, 0x08}, {0xe7, 0xca}, {0xe5, 0x8c}, {0xe4, 0x4e},
6182:../src/wolfcrypt/src/aes.c ****     {0xef, 0x10}, {0xee, 0xd2}, {0xec, 0x94}, {0xed, 0x56},
6183:../src/wolfcrypt/src/aes.c ****     {0xe8, 0x18}, {0xe9, 0xda}, {0xeb, 0x9c}, {0xea, 0x5e},
6184:../src/wolfcrypt/src/aes.c ****     {0xfd, 0x20}, {0xfc, 0xe2}, {0xfe, 0xa4}, {0xff, 0x66},
6185:../src/wolfcrypt/src/aes.c ****     {0xfa, 0x28}, {0xfb, 0xea}, {0xf9, 0xac}, {0xf8, 0x6e},
6186:../src/wolfcrypt/src/aes.c ****     {0xf3, 0x30}, {0xf2, 0xf2}, {0xf0, 0xb4}, {0xf1, 0x76},
6187:../src/wolfcrypt/src/aes.c ****     {0xf4, 0x38}, {0xf5, 0xfa}, {0xf7, 0xbc}, {0xf6, 0x7e},
6188:../src/wolfcrypt/src/aes.c ****     {0xd9, 0x40}, {0xd8, 0x82}, {0xda, 0xc4}, {0xdb, 0x06},
6189:../src/wolfcrypt/src/aes.c ****     {0xde, 0x48}, {0xdf, 0x8a}, {0xdd, 0xcc}, {0xdc, 0x0e},
6190:../src/wolfcrypt/src/aes.c ****     {0xd7, 0x50}, {0xd6, 0x92}, {0xd4, 0xd4}, {0xd5, 0x16},
6191:../src/wolfcrypt/src/aes.c ****     {0xd0, 0x58}, {0xd1, 0x9a}, {0xd3, 0xdc}, {0xd2, 0x1e},
6192:../src/wolfcrypt/src/aes.c ****     {0xc5, 0x60}, {0xc4, 0xa2}, {0xc6, 0xe4}, {0xc7, 0x26},
6193:../src/wolfcrypt/src/aes.c ****     {0xc2, 0x68}, {0xc3, 0xaa}, {0xc1, 0xec}, {0xc0, 0x2e},
6194:../src/wolfcrypt/src/aes.c ****     {0xcb, 0x70}, {0xca, 0xb2}, {0xc8, 0xf4}, {0xc9, 0x36},
6195:../src/wolfcrypt/src/aes.c ****     {0xcc, 0x78}, {0xcd, 0xba}, {0xcf, 0xfc}, {0xce, 0x3e},
6196:../src/wolfcrypt/src/aes.c ****     {0x91, 0x80}, {0x90, 0x42}, {0x92, 0x04}, {0x93, 0xc6},
6197:../src/wolfcrypt/src/aes.c ****     {0x96, 0x88}, {0x97, 0x4a}, {0x95, 0x0c}, {0x94, 0xce},
6198:../src/wolfcrypt/src/aes.c ****     {0x9f, 0x90}, {0x9e, 0x52}, {0x9c, 0x14}, {0x9d, 0xd6},
6199:../src/wolfcrypt/src/aes.c ****     {0x98, 0x98}, {0x99, 0x5a}, {0x9b, 0x1c}, {0x9a, 0xde},
6200:../src/wolfcrypt/src/aes.c ****     {0x8d, 0xa0}, {0x8c, 0x62}, {0x8e, 0x24}, {0x8f, 0xe6},
6201:../src/wolfcrypt/src/aes.c ****     {0x8a, 0xa8}, {0x8b, 0x6a}, {0x89, 0x2c}, {0x88, 0xee},
6202:../src/wolfcrypt/src/aes.c ****     {0x83, 0xb0}, {0x82, 0x72}, {0x80, 0x34}, {0x81, 0xf6},
6203:../src/wolfcrypt/src/aes.c ****     {0x84, 0xb8}, {0x85, 0x7a}, {0x87, 0x3c}, {0x86, 0xfe},
6204:../src/wolfcrypt/src/aes.c ****     {0xa9, 0xc0}, {0xa8, 0x02}, {0xaa, 0x44}, {0xab, 0x86},
6205:../src/wolfcrypt/src/aes.c ****     {0xae, 0xc8}, {0xaf, 0x0a}, {0xad, 0x4c}, {0xac, 0x8e},
6206:../src/wolfcrypt/src/aes.c ****     {0xa7, 0xd0}, {0xa6, 0x12}, {0xa4, 0x54}, {0xa5, 0x96},
6207:../src/wolfcrypt/src/aes.c ****     {0xa0, 0xd8}, {0xa1, 0x1a}, {0xa3, 0x5c}, {0xa2, 0x9e},
6208:../src/wolfcrypt/src/aes.c ****     {0xb5, 0xe0}, {0xb4, 0x22}, {0xb6, 0x64}, {0xb7, 0xa6},
6209:../src/wolfcrypt/src/aes.c ****     {0xb2, 0xe8}, {0xb3, 0x2a}, {0xb1, 0x6c}, {0xb0, 0xae},
6210:../src/wolfcrypt/src/aes.c ****     {0xbb, 0xf0}, {0xba, 0x32}, {0xb8, 0x74}, {0xb9, 0xb6},
6211:../src/wolfcrypt/src/aes.c ****     {0xbc, 0xf8}, {0xbd, 0x3a}, {0xbf, 0x7c}, {0xbe, 0xbe} };
6212:../src/wolfcrypt/src/aes.c **** 
6213:../src/wolfcrypt/src/aes.c **** 
6214:../src/wolfcrypt/src/aes.c **** static void GMULT(byte *x, byte m[256][AES_BLOCK_SIZE])
6215:../src/wolfcrypt/src/aes.c **** {
6216:../src/wolfcrypt/src/aes.c **** #if !defined(WORD64_AVAILABLE) || defined(BIG_ENDIAN_ORDER)
6217:../src/wolfcrypt/src/aes.c ****     int i, j;
6218:../src/wolfcrypt/src/aes.c ****     byte Z[AES_BLOCK_SIZE];
6219:../src/wolfcrypt/src/aes.c ****     byte a;
6220:../src/wolfcrypt/src/aes.c **** 
6221:../src/wolfcrypt/src/aes.c ****     XMEMSET(Z, 0, sizeof(Z));
6222:../src/wolfcrypt/src/aes.c **** 
6223:../src/wolfcrypt/src/aes.c ****     for (i = 15; i > 0; i--) {
6224:../src/wolfcrypt/src/aes.c ****         xorbuf(Z, m[x[i]], AES_BLOCK_SIZE);
6225:../src/wolfcrypt/src/aes.c ****         a = Z[15];
6226:../src/wolfcrypt/src/aes.c **** 
6227:../src/wolfcrypt/src/aes.c ****         for (j = 15; j > 0; j--) {
6228:../src/wolfcrypt/src/aes.c ****             Z[j] = Z[j-1];
6229:../src/wolfcrypt/src/aes.c ****         }
6230:../src/wolfcrypt/src/aes.c **** 
6231:../src/wolfcrypt/src/aes.c ****         Z[0]  = R[a][0];
6232:../src/wolfcrypt/src/aes.c ****         Z[1] ^= R[a][1];
6233:../src/wolfcrypt/src/aes.c ****     }
6234:../src/wolfcrypt/src/aes.c ****     xorbuf(Z, m[x[0]], AES_BLOCK_SIZE);
6235:../src/wolfcrypt/src/aes.c **** 
6236:../src/wolfcrypt/src/aes.c ****     XMEMCPY(x, Z, AES_BLOCK_SIZE);
6237:../src/wolfcrypt/src/aes.c **** #else
6238:../src/wolfcrypt/src/aes.c ****     byte Z[AES_BLOCK_SIZE + AES_BLOCK_SIZE];
6239:../src/wolfcrypt/src/aes.c ****     byte a;
6240:../src/wolfcrypt/src/aes.c ****     word64* pZ;
6241:../src/wolfcrypt/src/aes.c ****     word64* pm;
6242:../src/wolfcrypt/src/aes.c ****     word64* px = (word64*)(x);
6243:../src/wolfcrypt/src/aes.c ****     int i;
6244:../src/wolfcrypt/src/aes.c **** 
6245:../src/wolfcrypt/src/aes.c ****     pZ = (word64*)(Z + 15 + 1);
6246:../src/wolfcrypt/src/aes.c ****     pm = (word64*)(m[x[15]]);
6247:../src/wolfcrypt/src/aes.c ****     pZ[0] = pm[0];
6248:../src/wolfcrypt/src/aes.c ****     pZ[1] = pm[1];
6249:../src/wolfcrypt/src/aes.c ****     a = Z[16 + 15];
6250:../src/wolfcrypt/src/aes.c ****     Z[15]  = R[a][0];
6251:../src/wolfcrypt/src/aes.c ****     Z[16] ^= R[a][1];
6252:../src/wolfcrypt/src/aes.c ****     for (i = 14; i > 0; i--) {
6253:../src/wolfcrypt/src/aes.c ****         pZ = (word64*)(Z + i + 1);
6254:../src/wolfcrypt/src/aes.c ****         pm = (word64*)(m[x[i]]);
6255:../src/wolfcrypt/src/aes.c ****         pZ[0] ^= pm[0];
6256:../src/wolfcrypt/src/aes.c ****         pZ[1] ^= pm[1];
6257:../src/wolfcrypt/src/aes.c ****         a = Z[16 + i];
6258:../src/wolfcrypt/src/aes.c ****         Z[i]    = R[a][0];
6259:../src/wolfcrypt/src/aes.c ****         Z[i+1] ^= R[a][1];
6260:../src/wolfcrypt/src/aes.c ****     }
6261:../src/wolfcrypt/src/aes.c ****     pZ = (word64*)(Z + 1);
6262:../src/wolfcrypt/src/aes.c ****     pm = (word64*)(m[x[0]]);
6263:../src/wolfcrypt/src/aes.c ****     px[0] = pZ[0] ^ pm[0]; px[1] = pZ[1] ^ pm[1];
6264:../src/wolfcrypt/src/aes.c **** #endif
6265:../src/wolfcrypt/src/aes.c **** }
6266:../src/wolfcrypt/src/aes.c **** 
6267:../src/wolfcrypt/src/aes.c **** void GHASH(Aes* aes, const byte* a, word32 aSz, const byte* c,
6268:../src/wolfcrypt/src/aes.c ****     word32 cSz, byte* s, word32 sSz)
6269:../src/wolfcrypt/src/aes.c **** {
6270:../src/wolfcrypt/src/aes.c ****     byte x[AES_BLOCK_SIZE];
6271:../src/wolfcrypt/src/aes.c ****     byte scratch[AES_BLOCK_SIZE];
6272:../src/wolfcrypt/src/aes.c ****     word32 blocks, partial;
6273:../src/wolfcrypt/src/aes.c **** 
6274:../src/wolfcrypt/src/aes.c ****     if (aes == NULL) {
6275:../src/wolfcrypt/src/aes.c ****         return;
6276:../src/wolfcrypt/src/aes.c ****     }
6277:../src/wolfcrypt/src/aes.c **** 
6278:../src/wolfcrypt/src/aes.c ****     XMEMSET(x, 0, AES_BLOCK_SIZE);
6279:../src/wolfcrypt/src/aes.c **** 
6280:../src/wolfcrypt/src/aes.c ****     /* Hash in A, the Additional Authentication Data */
6281:../src/wolfcrypt/src/aes.c ****     if (aSz != 0 && a != NULL) {
6282:../src/wolfcrypt/src/aes.c ****         blocks = aSz / AES_BLOCK_SIZE;
6283:../src/wolfcrypt/src/aes.c ****         partial = aSz % AES_BLOCK_SIZE;
6284:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
6285:../src/wolfcrypt/src/aes.c ****             xorbuf(x, a, AES_BLOCK_SIZE);
6286:../src/wolfcrypt/src/aes.c ****             GMULT(x, aes->M0);
6287:../src/wolfcrypt/src/aes.c ****             a += AES_BLOCK_SIZE;
6288:../src/wolfcrypt/src/aes.c ****         }
6289:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
6290:../src/wolfcrypt/src/aes.c ****             XMEMSET(scratch, 0, AES_BLOCK_SIZE);
6291:../src/wolfcrypt/src/aes.c ****             XMEMCPY(scratch, a, partial);
6292:../src/wolfcrypt/src/aes.c ****             xorbuf(x, scratch, AES_BLOCK_SIZE);
6293:../src/wolfcrypt/src/aes.c ****             GMULT(x, aes->M0);
6294:../src/wolfcrypt/src/aes.c ****         }
6295:../src/wolfcrypt/src/aes.c ****     }
6296:../src/wolfcrypt/src/aes.c **** 
6297:../src/wolfcrypt/src/aes.c ****     /* Hash in C, the Ciphertext */
6298:../src/wolfcrypt/src/aes.c ****     if (cSz != 0 && c != NULL) {
6299:../src/wolfcrypt/src/aes.c ****         blocks = cSz / AES_BLOCK_SIZE;
6300:../src/wolfcrypt/src/aes.c ****         partial = cSz % AES_BLOCK_SIZE;
6301:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
6302:../src/wolfcrypt/src/aes.c ****             xorbuf(x, c, AES_BLOCK_SIZE);
6303:../src/wolfcrypt/src/aes.c ****             GMULT(x, aes->M0);
6304:../src/wolfcrypt/src/aes.c ****             c += AES_BLOCK_SIZE;
6305:../src/wolfcrypt/src/aes.c ****         }
6306:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
6307:../src/wolfcrypt/src/aes.c ****             XMEMSET(scratch, 0, AES_BLOCK_SIZE);
6308:../src/wolfcrypt/src/aes.c ****             XMEMCPY(scratch, c, partial);
6309:../src/wolfcrypt/src/aes.c ****             xorbuf(x, scratch, AES_BLOCK_SIZE);
6310:../src/wolfcrypt/src/aes.c ****             GMULT(x, aes->M0);
6311:../src/wolfcrypt/src/aes.c ****         }
6312:../src/wolfcrypt/src/aes.c ****     }
6313:../src/wolfcrypt/src/aes.c **** 
6314:../src/wolfcrypt/src/aes.c ****     /* Hash in the lengths of A and C in bits */
6315:../src/wolfcrypt/src/aes.c ****     FlattenSzInBits(&scratch[0], aSz);
6316:../src/wolfcrypt/src/aes.c ****     FlattenSzInBits(&scratch[8], cSz);
6317:../src/wolfcrypt/src/aes.c ****     xorbuf(x, scratch, AES_BLOCK_SIZE);
6318:../src/wolfcrypt/src/aes.c ****     GMULT(x, aes->M0);
6319:../src/wolfcrypt/src/aes.c **** 
6320:../src/wolfcrypt/src/aes.c ****     /* Copy the result into s. */
6321:../src/wolfcrypt/src/aes.c ****     XMEMCPY(s, x, sSz);
6322:../src/wolfcrypt/src/aes.c **** }
6323:../src/wolfcrypt/src/aes.c **** 
6324:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESGCM_STREAM
6325:../src/wolfcrypt/src/aes.c **** /* No extra initialization for table implementation.
6326:../src/wolfcrypt/src/aes.c ****  *
6327:../src/wolfcrypt/src/aes.c ****  * @param [in] aes  AES GCM object.
6328:../src/wolfcrypt/src/aes.c ****  */
6329:../src/wolfcrypt/src/aes.c **** #define GHASH_INIT_EXTRA(aes)
6330:../src/wolfcrypt/src/aes.c **** 
6331:../src/wolfcrypt/src/aes.c **** /* GHASH one block of data..
6332:../src/wolfcrypt/src/aes.c ****  *
6333:../src/wolfcrypt/src/aes.c ****  * XOR block into tag and GMULT with H using pre-computed table.
6334:../src/wolfcrypt/src/aes.c ****  *
6335:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes    AES GCM object.
6336:../src/wolfcrypt/src/aes.c ****  * @param [in]      block  Block of AAD or cipher text.
6337:../src/wolfcrypt/src/aes.c ****  */
6338:../src/wolfcrypt/src/aes.c **** #define GHASH_ONE_BLOCK(aes, block)                     \
6339:../src/wolfcrypt/src/aes.c ****     do {                                                \
6340:../src/wolfcrypt/src/aes.c ****         xorbuf(AES_TAG(aes), block, AES_BLOCK_SIZE);    \
6341:../src/wolfcrypt/src/aes.c ****         GMULT(AES_TAG(aes), aes->M0);                   \
6342:../src/wolfcrypt/src/aes.c ****     }                                                   \
6343:../src/wolfcrypt/src/aes.c ****     while (0)
6344:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AESGCM_STREAM */
6345:../src/wolfcrypt/src/aes.c **** /* end GCM_TABLE */
6346:../src/wolfcrypt/src/aes.c **** #elif defined(GCM_TABLE_4BIT)
6347:../src/wolfcrypt/src/aes.c **** 
6348:../src/wolfcrypt/src/aes.c **** /* remainder = x^7 + x^2 + x^1 + 1 => 0xe1
6349:../src/wolfcrypt/src/aes.c ****  *  R shifts right a reverse bit pair of bytes such that:
6350:../src/wolfcrypt/src/aes.c ****  *     R(b0, b1) => b1 = (b1 >> 1) | (b0 << 7); b0 >>= 1
6351:../src/wolfcrypt/src/aes.c ****  *  0 => 0, 0, 0, 0 => R(R(R(00,00) ^ 00,00) ^ 00,00) ^ 00,00 = 00,00
6352:../src/wolfcrypt/src/aes.c ****  *  8 => 0, 0, 0, 1 => R(R(R(00,00) ^ 00,00) ^ 00,00) ^ e1,00 = e1,00
6353:../src/wolfcrypt/src/aes.c ****  *  4 => 0, 0, 1, 0 => R(R(R(00,00) ^ 00,00) ^ e1,00) ^ 00,00 = 70,80
6354:../src/wolfcrypt/src/aes.c ****  *  2 => 0, 1, 0, 0 => R(R(R(00,00) ^ e1,00) ^ 00,00) ^ 00,00 = 38,40
6355:../src/wolfcrypt/src/aes.c ****  *  1 => 1, 0, 0, 0 => R(R(R(e1,00) ^ 00,00) ^ 00,00) ^ 00,00 = 1c,20
6356:../src/wolfcrypt/src/aes.c ****  *  To calculate te rest, XOR result for each bit.
6357:../src/wolfcrypt/src/aes.c ****  *   e.g. 6 = 4 ^ 2 => 48,c0
6358:../src/wolfcrypt/src/aes.c ****  *
6359:../src/wolfcrypt/src/aes.c ****  * Second half is same values rotated by 4-bits.
6360:../src/wolfcrypt/src/aes.c ****  */
6361:../src/wolfcrypt/src/aes.c **** #if defined(BIG_ENDIAN_ORDER) || defined(WC_16BIT_CPU)
6362:../src/wolfcrypt/src/aes.c **** static const byte R[16][2] = {
6363:../src/wolfcrypt/src/aes.c ****     {0x00, 0x00}, {0x1c, 0x20}, {0x38, 0x40}, {0x24, 0x60},
6364:../src/wolfcrypt/src/aes.c ****     {0x70, 0x80}, {0x6c, 0xa0}, {0x48, 0xc0}, {0x54, 0xe0},
6365:../src/wolfcrypt/src/aes.c ****     {0xe1, 0x00}, {0xfd, 0x20}, {0xd9, 0x40}, {0xc5, 0x60},
6366:../src/wolfcrypt/src/aes.c ****     {0x91, 0x80}, {0x8d, 0xa0}, {0xa9, 0xc0}, {0xb5, 0xe0},
6367:../src/wolfcrypt/src/aes.c **** };
6368:../src/wolfcrypt/src/aes.c **** #else
6369:../src/wolfcrypt/src/aes.c **** static const word16 R[32] = {
6370:../src/wolfcrypt/src/aes.c ****           0x0000,       0x201c,       0x4038,       0x6024,
6371:../src/wolfcrypt/src/aes.c ****           0x8070,       0xa06c,       0xc048,       0xe054,
6372:../src/wolfcrypt/src/aes.c ****           0x00e1,       0x20fd,       0x40d9,       0x60c5,
6373:../src/wolfcrypt/src/aes.c ****           0x8091,       0xa08d,       0xc0a9,       0xe0b5,
6374:../src/wolfcrypt/src/aes.c **** 
6375:../src/wolfcrypt/src/aes.c ****           0x0000,       0xc201,       0x8403,       0x4602,
6376:../src/wolfcrypt/src/aes.c ****           0x0807,       0xca06,       0x8c04,       0x4e05,
6377:../src/wolfcrypt/src/aes.c ****           0x100e,       0xd20f,       0x940d,       0x560c,
6378:../src/wolfcrypt/src/aes.c ****           0x1809,       0xda08,       0x9c0a,       0x5e0b,
6379:../src/wolfcrypt/src/aes.c **** };
6380:../src/wolfcrypt/src/aes.c **** #endif
6381:../src/wolfcrypt/src/aes.c **** 
6382:../src/wolfcrypt/src/aes.c **** /* Multiply in GF(2^128) defined by polynomial:
6383:../src/wolfcrypt/src/aes.c ****  *   x^128 + x^7 + x^2 + x^1 + 1.
6384:../src/wolfcrypt/src/aes.c ****  *
6385:../src/wolfcrypt/src/aes.c ****  * H: hash key = encrypt(key, 0)
6386:../src/wolfcrypt/src/aes.c ****  * x = x * H in field
6387:../src/wolfcrypt/src/aes.c ****  *
6388:../src/wolfcrypt/src/aes.c ****  * x: cumlative result
6389:../src/wolfcrypt/src/aes.c ****  * m: 4-bit table
6390:../src/wolfcrypt/src/aes.c ****  *    [0..15] * H
6391:../src/wolfcrypt/src/aes.c ****  */
6392:../src/wolfcrypt/src/aes.c **** #if defined(BIG_ENDIAN_ORDER) || defined(WC_16BIT_CPU)
6393:../src/wolfcrypt/src/aes.c **** static void GMULT(byte *x, byte m[16][AES_BLOCK_SIZE])
6394:../src/wolfcrypt/src/aes.c **** {
6395:../src/wolfcrypt/src/aes.c ****     int i, j, n;
6396:../src/wolfcrypt/src/aes.c ****     byte Z[AES_BLOCK_SIZE];
6397:../src/wolfcrypt/src/aes.c ****     byte a;
6398:../src/wolfcrypt/src/aes.c **** 
6399:../src/wolfcrypt/src/aes.c ****     XMEMSET(Z, 0, sizeof(Z));
6400:../src/wolfcrypt/src/aes.c **** 
6401:../src/wolfcrypt/src/aes.c ****     for (i = 15; i >= 0; i--) {
6402:../src/wolfcrypt/src/aes.c ****         for (n = 0; n < 2; n++) {
6403:../src/wolfcrypt/src/aes.c ****             if (n == 0)
6404:../src/wolfcrypt/src/aes.c ****                 xorbuf(Z, m[x[i] & 0xf], AES_BLOCK_SIZE);
6405:../src/wolfcrypt/src/aes.c ****             else {
6406:../src/wolfcrypt/src/aes.c ****                 xorbuf(Z, m[x[i] >> 4], AES_BLOCK_SIZE);
6407:../src/wolfcrypt/src/aes.c ****                 if (i == 0)
6408:../src/wolfcrypt/src/aes.c ****                     break;
6409:../src/wolfcrypt/src/aes.c ****             }
6410:../src/wolfcrypt/src/aes.c ****             a = Z[15] & 0xf;
6411:../src/wolfcrypt/src/aes.c **** 
6412:../src/wolfcrypt/src/aes.c ****             for (j = 15; j > 0; j--)
6413:../src/wolfcrypt/src/aes.c ****                 Z[j] = (Z[j-1] << 4) | (Z[j] >> 4);
6414:../src/wolfcrypt/src/aes.c ****             Z[0] >>= 4;
6415:../src/wolfcrypt/src/aes.c **** 
6416:../src/wolfcrypt/src/aes.c ****             Z[0] ^= R[a][0];
6417:../src/wolfcrypt/src/aes.c ****             Z[1] ^= R[a][1];
6418:../src/wolfcrypt/src/aes.c ****         }
6419:../src/wolfcrypt/src/aes.c ****     }
6420:../src/wolfcrypt/src/aes.c **** 
6421:../src/wolfcrypt/src/aes.c ****     XMEMCPY(x, Z, AES_BLOCK_SIZE);
6422:../src/wolfcrypt/src/aes.c **** }
6423:../src/wolfcrypt/src/aes.c **** #elif defined(WC_32BIT_CPU)
6424:../src/wolfcrypt/src/aes.c **** static WC_INLINE void GMULT(byte *x, byte m[32][AES_BLOCK_SIZE])
6425:../src/wolfcrypt/src/aes.c **** {
6426:../src/wolfcrypt/src/aes.c ****     int i;
6427:../src/wolfcrypt/src/aes.c ****     word32 z8[4] = {0, 0, 0, 0};
6428:../src/wolfcrypt/src/aes.c ****     byte a;
6429:../src/wolfcrypt/src/aes.c ****     word32* x8 = (word32*)x;
6430:../src/wolfcrypt/src/aes.c ****     word32* m8;
6431:../src/wolfcrypt/src/aes.c ****     byte xi;
6432:../src/wolfcrypt/src/aes.c ****     word32 n7, n6, n5, n4, n3, n2, n1, n0;
6433:../src/wolfcrypt/src/aes.c **** 
6434:../src/wolfcrypt/src/aes.c ****     for (i = 15; i > 0; i--) {
6435:../src/wolfcrypt/src/aes.c ****         xi = x[i];
6436:../src/wolfcrypt/src/aes.c **** 
6437:../src/wolfcrypt/src/aes.c ****         /* XOR in (msn * H) */
6438:../src/wolfcrypt/src/aes.c ****         m8 = (word32*)m[xi & 0xf];
6439:../src/wolfcrypt/src/aes.c ****         z8[0] ^= m8[0]; z8[1] ^= m8[1]; z8[2] ^= m8[2]; z8[3] ^= m8[3];
6440:../src/wolfcrypt/src/aes.c **** 
6441:../src/wolfcrypt/src/aes.c ****         /* Cache top byte for remainder calculations - lost in rotate. */
6442:../src/wolfcrypt/src/aes.c ****         a = z8[3] >> 24;
6443:../src/wolfcrypt/src/aes.c **** 
6444:../src/wolfcrypt/src/aes.c ****         /* Rotate Z by 8-bits */
6445:../src/wolfcrypt/src/aes.c ****         z8[3] = (z8[2] >> 24) | (z8[3] << 8);
6446:../src/wolfcrypt/src/aes.c ****         z8[2] = (z8[1] >> 24) | (z8[2] << 8);
6447:../src/wolfcrypt/src/aes.c ****         z8[1] = (z8[0] >> 24) | (z8[1] << 8);
6448:../src/wolfcrypt/src/aes.c ****         z8[0] <<= 8;
6449:../src/wolfcrypt/src/aes.c **** 
6450:../src/wolfcrypt/src/aes.c ****         /* XOR in (msn * remainder) [pre-rotated by 4 bits] */
6451:../src/wolfcrypt/src/aes.c ****         z8[0] ^= (word32)R[16 + (a & 0xf)];
6452:../src/wolfcrypt/src/aes.c **** 
6453:../src/wolfcrypt/src/aes.c ****         xi >>= 4;
6454:../src/wolfcrypt/src/aes.c ****         /* XOR in next significant nibble (XORed with H) * remainder */
6455:../src/wolfcrypt/src/aes.c ****         m8 = (word32*)m[xi];
6456:../src/wolfcrypt/src/aes.c ****         a ^= (byte)(m8[3] >> 20);
6457:../src/wolfcrypt/src/aes.c ****         z8[0] ^= (word32)R[a >> 4];
6458:../src/wolfcrypt/src/aes.c **** 
6459:../src/wolfcrypt/src/aes.c ****         /* XOR in (next significant nibble * H) [pre-rotated by 4 bits] */
6460:../src/wolfcrypt/src/aes.c ****         m8 = (word32*)m[16 + xi];
6461:../src/wolfcrypt/src/aes.c ****         z8[0] ^= m8[0]; z8[1] ^= m8[1];
6462:../src/wolfcrypt/src/aes.c ****         z8[2] ^= m8[2]; z8[3] ^= m8[3];
6463:../src/wolfcrypt/src/aes.c ****     }
6464:../src/wolfcrypt/src/aes.c **** 
6465:../src/wolfcrypt/src/aes.c ****     xi = x[0];
6466:../src/wolfcrypt/src/aes.c **** 
6467:../src/wolfcrypt/src/aes.c ****     /* XOR in most significant nibble * H */
6468:../src/wolfcrypt/src/aes.c ****     m8 = (word32*)m[xi & 0xf];
6469:../src/wolfcrypt/src/aes.c ****     z8[0] ^= m8[0]; z8[1] ^= m8[1]; z8[2] ^= m8[2]; z8[3] ^= m8[3];
6470:../src/wolfcrypt/src/aes.c **** 
6471:../src/wolfcrypt/src/aes.c ****     /* Cache top byte for remainder calculations - lost in rotate. */
6472:../src/wolfcrypt/src/aes.c ****     a = (z8[3] >> 24) & 0xf;
6473:../src/wolfcrypt/src/aes.c **** 
6474:../src/wolfcrypt/src/aes.c ****     /* Rotate z by 4-bits */
6475:../src/wolfcrypt/src/aes.c ****     n7 = z8[3] & 0xf0f0f0f0ULL;
6476:../src/wolfcrypt/src/aes.c ****     n6 = z8[3] & 0x0f0f0f0fULL;
6477:../src/wolfcrypt/src/aes.c ****     n5 = z8[2] & 0xf0f0f0f0ULL;
6478:../src/wolfcrypt/src/aes.c ****     n4 = z8[2] & 0x0f0f0f0fULL;
6479:../src/wolfcrypt/src/aes.c ****     n3 = z8[1] & 0xf0f0f0f0ULL;
6480:../src/wolfcrypt/src/aes.c ****     n2 = z8[1] & 0x0f0f0f0fULL;
6481:../src/wolfcrypt/src/aes.c ****     n1 = z8[0] & 0xf0f0f0f0ULL;
6482:../src/wolfcrypt/src/aes.c ****     n0 = z8[0] & 0x0f0f0f0fULL;
6483:../src/wolfcrypt/src/aes.c ****     z8[3] = (n7 >> 4) | (n6 << 12) | (n4 >> 20);
6484:../src/wolfcrypt/src/aes.c ****     z8[2] = (n5 >> 4) | (n4 << 12) | (n2 >> 20);
6485:../src/wolfcrypt/src/aes.c ****     z8[1] = (n3 >> 4) | (n2 << 12) | (n0 >> 20);
6486:../src/wolfcrypt/src/aes.c ****     z8[0] = (n1 >> 4) | (n0 << 12);
6487:../src/wolfcrypt/src/aes.c **** 
6488:../src/wolfcrypt/src/aes.c ****     /* XOR in most significant nibble * remainder */
6489:../src/wolfcrypt/src/aes.c ****     z8[0] ^= (word32)R[a];
6490:../src/wolfcrypt/src/aes.c ****     /* XOR in next significant nibble * H */
6491:../src/wolfcrypt/src/aes.c ****     m8 = (word32*)m[xi >> 4];
6492:../src/wolfcrypt/src/aes.c ****     z8[0] ^= m8[0]; z8[1] ^= m8[1]; z8[2] ^= m8[2]; z8[3] ^= m8[3];
6493:../src/wolfcrypt/src/aes.c **** 
6494:../src/wolfcrypt/src/aes.c ****     /* Write back result. */
6495:../src/wolfcrypt/src/aes.c ****     x8[0] = z8[0]; x8[1] = z8[1]; x8[2] = z8[2]; x8[3] = z8[3];
6496:../src/wolfcrypt/src/aes.c **** }
6497:../src/wolfcrypt/src/aes.c **** #else
6498:../src/wolfcrypt/src/aes.c **** static WC_INLINE void GMULT(byte *x, byte m[32][AES_BLOCK_SIZE])
6499:../src/wolfcrypt/src/aes.c **** {
6500:../src/wolfcrypt/src/aes.c ****     int i;
6501:../src/wolfcrypt/src/aes.c ****     word64 z8[2] = {0, 0};
6502:../src/wolfcrypt/src/aes.c ****     byte a;
6503:../src/wolfcrypt/src/aes.c ****     word64* x8 = (word64*)x;
6504:../src/wolfcrypt/src/aes.c ****     word64* m8;
6505:../src/wolfcrypt/src/aes.c ****     word64 n0, n1, n2, n3;
6506:../src/wolfcrypt/src/aes.c ****     byte xi;
6507:../src/wolfcrypt/src/aes.c **** 
6508:../src/wolfcrypt/src/aes.c ****     for (i = 15; i > 0; i--) {
6509:../src/wolfcrypt/src/aes.c ****         xi = x[i];
6510:../src/wolfcrypt/src/aes.c **** 
6511:../src/wolfcrypt/src/aes.c ****         /* XOR in (msn * H) */
6512:../src/wolfcrypt/src/aes.c ****         m8 = (word64*)m[xi & 0xf];
6513:../src/wolfcrypt/src/aes.c ****         z8[0] ^= m8[0];
6514:../src/wolfcrypt/src/aes.c ****         z8[1] ^= m8[1];
6515:../src/wolfcrypt/src/aes.c **** 
6516:../src/wolfcrypt/src/aes.c ****         /* Cache top byte for remainder calculations - lost in rotate. */
6517:../src/wolfcrypt/src/aes.c ****         a = z8[1] >> 56;
6518:../src/wolfcrypt/src/aes.c **** 
6519:../src/wolfcrypt/src/aes.c ****         /* Rotate Z by 8-bits */
6520:../src/wolfcrypt/src/aes.c ****         z8[1] = (z8[0] >> 56) | (z8[1] << 8);
6521:../src/wolfcrypt/src/aes.c ****         z8[0] <<= 8;
6522:../src/wolfcrypt/src/aes.c **** 
6523:../src/wolfcrypt/src/aes.c ****         /* XOR in (next significant nibble * H) [pre-rotated by 4 bits] */
6524:../src/wolfcrypt/src/aes.c ****         m8 = (word64*)m[16 + (xi >> 4)];
6525:../src/wolfcrypt/src/aes.c ****         z8[0] ^= m8[0];
6526:../src/wolfcrypt/src/aes.c ****         z8[1] ^= m8[1];
6527:../src/wolfcrypt/src/aes.c **** 
6528:../src/wolfcrypt/src/aes.c ****         /* XOR in (msn * remainder) [pre-rotated by 4 bits] */
6529:../src/wolfcrypt/src/aes.c ****         z8[0] ^= (word64)R[16 + (a & 0xf)];
6530:../src/wolfcrypt/src/aes.c ****         /* XOR in next significant nibble (XORed with H) * remainder */
6531:../src/wolfcrypt/src/aes.c ****         m8 = (word64*)m[xi >> 4];
6532:../src/wolfcrypt/src/aes.c ****         a ^= (byte)(m8[1] >> 52);
6533:../src/wolfcrypt/src/aes.c ****         z8[0] ^= (word64)R[a >> 4];
6534:../src/wolfcrypt/src/aes.c ****     }
6535:../src/wolfcrypt/src/aes.c **** 
6536:../src/wolfcrypt/src/aes.c ****     xi = x[0];
6537:../src/wolfcrypt/src/aes.c **** 
6538:../src/wolfcrypt/src/aes.c ****     /* XOR in most significant nibble * H */
6539:../src/wolfcrypt/src/aes.c ****     m8 = (word64*)m[xi & 0xf];
6540:../src/wolfcrypt/src/aes.c ****     z8[0] ^= m8[0];
6541:../src/wolfcrypt/src/aes.c ****     z8[1] ^= m8[1];
6542:../src/wolfcrypt/src/aes.c **** 
6543:../src/wolfcrypt/src/aes.c ****     /* Cache top byte for remainder calculations - lost in rotate. */
6544:../src/wolfcrypt/src/aes.c ****     a = (z8[1] >> 56) & 0xf;
6545:../src/wolfcrypt/src/aes.c **** 
6546:../src/wolfcrypt/src/aes.c ****     /* Rotate z by 4-bits */
6547:../src/wolfcrypt/src/aes.c ****     n3 = z8[1] & 0xf0f0f0f0f0f0f0f0ULL;
6548:../src/wolfcrypt/src/aes.c ****     n2 = z8[1] & 0x0f0f0f0f0f0f0f0fULL;
6549:../src/wolfcrypt/src/aes.c ****     n1 = z8[0] & 0xf0f0f0f0f0f0f0f0ULL;
6550:../src/wolfcrypt/src/aes.c ****     n0 = z8[0] & 0x0f0f0f0f0f0f0f0fULL;
6551:../src/wolfcrypt/src/aes.c ****     z8[1] = (n3 >> 4) | (n2 << 12) | (n0 >> 52);
6552:../src/wolfcrypt/src/aes.c ****     z8[0] = (n1 >> 4) | (n0 << 12);
6553:../src/wolfcrypt/src/aes.c **** 
6554:../src/wolfcrypt/src/aes.c ****     /* XOR in next significant nibble * H */
6555:../src/wolfcrypt/src/aes.c ****     m8 = (word64*)m[xi >> 4];
6556:../src/wolfcrypt/src/aes.c ****     z8[0] ^= m8[0];
6557:../src/wolfcrypt/src/aes.c ****     z8[1] ^= m8[1];
6558:../src/wolfcrypt/src/aes.c ****     /* XOR in most significant nibble * remainder */
6559:../src/wolfcrypt/src/aes.c ****     z8[0] ^= (word64)R[a];
6560:../src/wolfcrypt/src/aes.c **** 
6561:../src/wolfcrypt/src/aes.c ****     /* Write back result. */
6562:../src/wolfcrypt/src/aes.c ****     x8[0] = z8[0];
6563:../src/wolfcrypt/src/aes.c ****     x8[1] = z8[1];
6564:../src/wolfcrypt/src/aes.c **** }
6565:../src/wolfcrypt/src/aes.c **** #endif
6566:../src/wolfcrypt/src/aes.c **** 
6567:../src/wolfcrypt/src/aes.c **** void GHASH(Aes* aes, const byte* a, word32 aSz, const byte* c,
6568:../src/wolfcrypt/src/aes.c ****     word32 cSz, byte* s, word32 sSz)
6569:../src/wolfcrypt/src/aes.c **** {
6570:../src/wolfcrypt/src/aes.c ****     byte x[AES_BLOCK_SIZE];
6571:../src/wolfcrypt/src/aes.c ****     byte scratch[AES_BLOCK_SIZE];
6572:../src/wolfcrypt/src/aes.c ****     word32 blocks, partial;
6573:../src/wolfcrypt/src/aes.c **** 
6574:../src/wolfcrypt/src/aes.c ****     if (aes == NULL) {
6575:../src/wolfcrypt/src/aes.c ****         return;
6576:../src/wolfcrypt/src/aes.c ****     }
6577:../src/wolfcrypt/src/aes.c **** 
6578:../src/wolfcrypt/src/aes.c ****     XMEMSET(x, 0, AES_BLOCK_SIZE);
6579:../src/wolfcrypt/src/aes.c **** 
6580:../src/wolfcrypt/src/aes.c ****     /* Hash in A, the Additional Authentication Data */
6581:../src/wolfcrypt/src/aes.c ****     if (aSz != 0 && a != NULL) {
6582:../src/wolfcrypt/src/aes.c ****         blocks = aSz / AES_BLOCK_SIZE;
6583:../src/wolfcrypt/src/aes.c ****         partial = aSz % AES_BLOCK_SIZE;
6584:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
6585:../src/wolfcrypt/src/aes.c ****             xorbuf(x, a, AES_BLOCK_SIZE);
6586:../src/wolfcrypt/src/aes.c ****             GMULT(x, aes->M0);
6587:../src/wolfcrypt/src/aes.c ****             a += AES_BLOCK_SIZE;
6588:../src/wolfcrypt/src/aes.c ****         }
6589:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
6590:../src/wolfcrypt/src/aes.c ****             XMEMSET(scratch, 0, AES_BLOCK_SIZE);
6591:../src/wolfcrypt/src/aes.c ****             XMEMCPY(scratch, a, partial);
6592:../src/wolfcrypt/src/aes.c ****             xorbuf(x, scratch, AES_BLOCK_SIZE);
6593:../src/wolfcrypt/src/aes.c ****             GMULT(x, aes->M0);
6594:../src/wolfcrypt/src/aes.c ****         }
6595:../src/wolfcrypt/src/aes.c ****     }
6596:../src/wolfcrypt/src/aes.c **** 
6597:../src/wolfcrypt/src/aes.c ****     /* Hash in C, the Ciphertext */
6598:../src/wolfcrypt/src/aes.c ****     if (cSz != 0 && c != NULL) {
6599:../src/wolfcrypt/src/aes.c ****         blocks = cSz / AES_BLOCK_SIZE;
6600:../src/wolfcrypt/src/aes.c ****         partial = cSz % AES_BLOCK_SIZE;
6601:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
6602:../src/wolfcrypt/src/aes.c ****             xorbuf(x, c, AES_BLOCK_SIZE);
6603:../src/wolfcrypt/src/aes.c ****             GMULT(x, aes->M0);
6604:../src/wolfcrypt/src/aes.c ****             c += AES_BLOCK_SIZE;
6605:../src/wolfcrypt/src/aes.c ****         }
6606:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
6607:../src/wolfcrypt/src/aes.c ****             XMEMSET(scratch, 0, AES_BLOCK_SIZE);
6608:../src/wolfcrypt/src/aes.c ****             XMEMCPY(scratch, c, partial);
6609:../src/wolfcrypt/src/aes.c ****             xorbuf(x, scratch, AES_BLOCK_SIZE);
6610:../src/wolfcrypt/src/aes.c ****             GMULT(x, aes->M0);
6611:../src/wolfcrypt/src/aes.c ****         }
6612:../src/wolfcrypt/src/aes.c ****     }
6613:../src/wolfcrypt/src/aes.c **** 
6614:../src/wolfcrypt/src/aes.c ****     /* Hash in the lengths of A and C in bits */
6615:../src/wolfcrypt/src/aes.c ****     FlattenSzInBits(&scratch[0], aSz);
6616:../src/wolfcrypt/src/aes.c ****     FlattenSzInBits(&scratch[8], cSz);
6617:../src/wolfcrypt/src/aes.c ****     xorbuf(x, scratch, AES_BLOCK_SIZE);
6618:../src/wolfcrypt/src/aes.c ****     GMULT(x, aes->M0);
6619:../src/wolfcrypt/src/aes.c **** 
6620:../src/wolfcrypt/src/aes.c ****     /* Copy the result into s. */
6621:../src/wolfcrypt/src/aes.c ****     XMEMCPY(s, x, sSz);
6622:../src/wolfcrypt/src/aes.c **** }
6623:../src/wolfcrypt/src/aes.c **** 
6624:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESGCM_STREAM
6625:../src/wolfcrypt/src/aes.c **** /* No extra initialization for 4-bit table implementation.
6626:../src/wolfcrypt/src/aes.c ****  *
6627:../src/wolfcrypt/src/aes.c ****  * @param [in] aes  AES GCM object.
6628:../src/wolfcrypt/src/aes.c ****  */
6629:../src/wolfcrypt/src/aes.c **** #define GHASH_INIT_EXTRA(aes)
6630:../src/wolfcrypt/src/aes.c **** 
6631:../src/wolfcrypt/src/aes.c **** /* GHASH one block of data..
6632:../src/wolfcrypt/src/aes.c ****  *
6633:../src/wolfcrypt/src/aes.c ****  * XOR block into tag and GMULT with H using pre-computed table.
6634:../src/wolfcrypt/src/aes.c ****  *
6635:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes    AES GCM object.
6636:../src/wolfcrypt/src/aes.c ****  * @param [in]      block  Block of AAD or cipher text.
6637:../src/wolfcrypt/src/aes.c ****  */
6638:../src/wolfcrypt/src/aes.c **** #define GHASH_ONE_BLOCK(aes, block)                     \
6639:../src/wolfcrypt/src/aes.c ****     do {                                                \
6640:../src/wolfcrypt/src/aes.c ****         xorbuf(AES_TAG(aes), block, AES_BLOCK_SIZE);    \
6641:../src/wolfcrypt/src/aes.c ****         GMULT(AES_TAG(aes), (aes)->M0);                 \
6642:../src/wolfcrypt/src/aes.c ****     }                                                   \
6643:../src/wolfcrypt/src/aes.c ****     while (0)
6644:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AESGCM_STREAM */
6645:../src/wolfcrypt/src/aes.c **** #elif defined(WORD64_AVAILABLE) && !defined(GCM_WORD32)
6646:../src/wolfcrypt/src/aes.c **** 
6647:../src/wolfcrypt/src/aes.c **** #if !defined(FREESCALE_LTC_AES_GCM)
6648:../src/wolfcrypt/src/aes.c **** static void GMULT(word64* X, word64* Y)
6649:../src/wolfcrypt/src/aes.c **** {
 8789                             		.loc 2 6649 1
 8790 0000 6E 6D                   		pushm	r6-r13
 8791                             	.LCFI52:
 8792 0002 72 0A 68 FF             		add	#-152, r0, r10
 8793                             	.LCFI53:
 8794 0006 EF A0                   		mov.L	r10, r0
 8795 0008 E7 A1 10                		mov.L	r1, 64[r10]
 8796 000b E7 A2 11                		mov.L	r2, 68[r10]
6650:../src/wolfcrypt/src/aes.c ****     word64 Z[2] = {0,0};
 8797                             		.loc 2 6650 12
 8798 000e F9 A6 08 00             		mov.L	#0, 32[r10]
 8799 0012 F9 A6 09 00             		mov.L	#0, 36[r10]
 8800 0016 F9 A6 0A 00             		mov.L	#0, 40[r10]
 8801 001a F9 A6 0B 00             		mov.L	#0, 44[r10]
6651:../src/wolfcrypt/src/aes.c ****     word64 V[2];
6652:../src/wolfcrypt/src/aes.c ****     int i, j;
6653:../src/wolfcrypt/src/aes.c ****     word64 v1;
6654:../src/wolfcrypt/src/aes.c ****     V[0] = X[0];  V[1] = X[1];
 8802                             		.loc 2 6654 13
 8803 001e ED A5 10                		mov.L	64[r10], r5
 8804 0021 EC 53                   		mov.L	[r5], r3
 8805 0023 A8 5C                   		mov.L	4[r5], r4
 8806                             		.loc 2 6654 10
 8807 0025 E7 A3 0C                		mov.L	r3, 48[r10]
 8808 0028 E7 A4 0D                		mov.L	r4, 52[r10]
 8809                             		.loc 2 6654 24
 8810 002b ED A5 10                		mov.L	64[r10], r5
 8811 002e A8 D3                   		mov.L	8[r5], r3
 8812 0030 A8 DC                   		mov.L	12[r5], r4
 8813 0032 E7 A3 0E                		mov.L	r3, 56[r10]
 8814 0035 E7 A4 0F                		mov.L	r4, 60[r10]
6655:../src/wolfcrypt/src/aes.c **** 
6656:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < 2; i++)
 8815                             		.loc 2 6656 12
 8816 0038 F8 A6 00                		mov.L	#0, [r10]
 8817                             		.loc 2 6656 5
 8818 003b 38 92 01                		bra	.L139
 8819                             	.L142:
 8820                             	.LBB7:
6657:../src/wolfcrypt/src/aes.c ****     {
6658:../src/wolfcrypt/src/aes.c ****         word64 y = Y[i];
 8821                             		.loc 2 6658 21
 8822 003e EC A5                   		mov.L	[r10], r5
 8823 0040 FD C3 54                		shll	#3, r5, r4
 8824 0043 ED A5 11                		mov.L	68[r10], r5
 8825 0046 4B 45                   		add	r4, r5
 8826                             		.loc 2 6658 16
 8827 0048 EC 54                   		mov.L	[r5], r4
 8828 004a E7 A4 02                		mov.L	r4, 8[r10]
 8829 004d A8 5D                   		mov.L	4[r5], r5
 8830 004f E7 A5 03                		mov.L	r5, 12[r10]
6659:../src/wolfcrypt/src/aes.c ****         for (j = 0; j < 64; j++)
 8831                             		.loc 2 6659 16
 8832 0052 F9 A6 01 00             		mov.L	#0, 4[r10]
 8833                             		.loc 2 6659 9
 8834 0056 38 66 01                		bra	.L140
 8835                             	.L141:
 8836                             	.LBB8:
6660:../src/wolfcrypt/src/aes.c ****         {
6661:../src/wolfcrypt/src/aes.c **** #ifndef AES_GCM_GMULT_NCT
6662:../src/wolfcrypt/src/aes.c ****             word64 mask = 0 - (y >> 63);
 8837                             		.loc 2 6662 29 discriminator 3
 8838 0059 ED A5 02                		mov.L	8[r10], r5
 8839 005c ED A6 03                		mov.L	12[r10], r6
 8840 005f FD BF 63                		shar	#31, r6, r3
 8841 0062 E7 A3 12                		mov.L	r3, 72[r10]
 8842 0065 FD BF 64                		shar	#31, r6, r4
 8843 0068 E7 A4 13                		mov.L	r4, 76[r10]
 8844                             		.loc 2 6662 20 discriminator 3
 8845 006b E5 AA 12 04             		mov.L	72[r10], 16[r10]
 8846 006f E5 AA 13 05             		mov.L	76[r10], 20[r10]
6663:../src/wolfcrypt/src/aes.c ****             Z[0] ^= V[0] & mask;
 8847                             		.loc 2 6663 18 discriminator 3
 8848 0073 ED A1 08                		mov.L	32[r10], r1
 8849 0076 ED A2 09                		mov.L	36[r10], r2
 8850                             		.loc 2 6663 22 discriminator 3
 8851 0079 ED A3 0C                		mov.L	48[r10], r3
 8852 007c ED A4 0D                		mov.L	52[r10], r4
 8853                             		.loc 2 6663 26 discriminator 3
 8854 007f ED A5 04                		mov.L	16[r10], r5
 8855 0082 53 35                   		and	r3, r5
 8856 0084 E7 A5 14                		mov.L	r5, 80[r10]
 8857 0087 ED A5 05                		mov.L	20[r10], r5
 8858 008a 53 45                   		and	r4, r5
 8859 008c E7 A5 15                		mov.L	r5, 84[r10]
 8860                             		.loc 2 6663 18 discriminator 3
 8861 008f ED A7 14                		mov.L	80[r10], r7
 8862 0092 FC 37 17                		xor	r1, r7
 8863 0095 E7 A7 16                		mov.L	r7, 88[r10]
 8864 0098 ED AB 15                		mov.L	84[r10], r11
 8865 009b FC 37 2B                		xor	r2, r11
 8866 009e E7 AB 17                		mov.L	r11, 92[r10]
 8867 00a1 E5 AA 16 08             		mov.L	88[r10], 32[r10]
 8868 00a5 E5 AA 17 09             		mov.L	92[r10], 36[r10]
6664:../src/wolfcrypt/src/aes.c ****             Z[1] ^= V[1] & mask;
 8869                             		.loc 2 6664 18 discriminator 3
 8870 00a9 ED A1 0A                		mov.L	40[r10], r1
 8871 00ac ED A2 0B                		mov.L	44[r10], r2
 8872                             		.loc 2 6664 22 discriminator 3
 8873 00af ED A3 0E                		mov.L	56[r10], r3
 8874 00b2 ED A4 0F                		mov.L	60[r10], r4
 8875                             		.loc 2 6664 26 discriminator 3
 8876 00b5 ED A5 04                		mov.L	16[r10], r5
 8877 00b8 53 35                   		and	r3, r5
 8878 00ba E7 A5 18                		mov.L	r5, 96[r10]
 8879 00bd ED A5 05                		mov.L	20[r10], r5
 8880 00c0 53 45                   		and	r4, r5
 8881 00c2 E7 A5 19                		mov.L	r5, 100[r10]
 8882                             		.loc 2 6664 18 discriminator 3
 8883 00c5 ED AC 18                		mov.L	96[r10], r12
 8884 00c8 FC 37 1C                		xor	r1, r12
 8885 00cb E7 AC 1A                		mov.L	r12, 104[r10]
 8886 00ce ED AD 19                		mov.L	100[r10], r13
 8887 00d1 FC 37 2D                		xor	r2, r13
 8888 00d4 E7 AD 1B                		mov.L	r13, 108[r10]
 8889 00d7 E5 AA 1A 0A             		mov.L	104[r10], 40[r10]
 8890 00db E5 AA 1B 0B             		mov.L	108[r10], 44[r10]
6665:../src/wolfcrypt/src/aes.c **** #else
6666:../src/wolfcrypt/src/aes.c ****             if (y & 0x8000000000000000ULL) {
6667:../src/wolfcrypt/src/aes.c ****                 Z[0] ^= V[0];
6668:../src/wolfcrypt/src/aes.c ****                 Z[1] ^= V[1];
6669:../src/wolfcrypt/src/aes.c ****             }
6670:../src/wolfcrypt/src/aes.c **** #endif
6671:../src/wolfcrypt/src/aes.c **** 
6672:../src/wolfcrypt/src/aes.c ****             v1 = (0 - (V[1] & 1)) & 0xE100000000000000ULL;
 8891                             		.loc 2 6672 25 discriminator 3
 8892 00df ED A5 0E                		mov.L	56[r10], r5
 8893 00e2 ED A6 0F                		mov.L	60[r10], r6
 8894                             		.loc 2 6672 29 discriminator 3
 8895 00e5 66 13                   		mov.L	#1, r3
 8896 00e7 53 53                   		and	r5, r3
 8897 00e9 E7 A3 1C                		mov.L	r3, 112[r10]
 8898 00ec 66 04                   		mov.L	#0, r4
 8899 00ee 53 64                   		and	r6, r4
 8900 00f0 E7 A4 1D                		mov.L	r4, 116[r10]
 8901                             		.loc 2 6672 21 discriminator 3
 8902 00f3 66 05                   		mov.L	#0, r5
 8903 00f5 66 06                   		mov.L	#0, r6
 8904 00f7 EF 6B                   		mov.L	r6, r11
 8905 00f9 ED AC 1C                		mov.L	112[r10], r12
 8906 00fc ED AD 1D                		mov.L	116[r10], r13
 8907 00ff FF 07 C5                		sub	r12, r5, r7
 8908 0102 FC 03 DB                		sbb	r13, r11
 8909 0105 E7 AB 1F                		mov.L	r11, 124[r10]
 8910 0108 E7 A7 1E                		mov.L	r7, 120[r10]
 8911                             		.loc 2 6672 16 discriminator 3
 8912 010b 66 05                   		mov.L	#0, r5
 8913 010d 06 91 A5 1E             		and	120[r10], r5
 8914 0111 E7 A5 06                		mov.L	r5, 24[r10]
 8915 0114 FB 52 00 00 00 E1       		mov.L	#-520093696, r5
 8916 011a 06 91 A5 1F             		and	124[r10], r5
 8917 011e E7 A5 07                		mov.L	r5, 28[r10]
6673:../src/wolfcrypt/src/aes.c ****             V[1] >>= 1;
 8918                             		.loc 2 6673 18 discriminator 3
 8919 0121 ED A5 0E                		mov.L	56[r10], r5
 8920 0124 ED A6 0F                		mov.L	60[r10], r6
 8921 0127 FD DF 64                		shll	#31, r6, r4
 8922 012a FD 81 5D                		shlr	#1, r5, r13
 8923 012d 57 4D                   		or	r4, r13
 8924 012f FD 81 6E                		shlr	#1, r6, r14
 8925 0132 E7 AD 0E                		mov.L	r13, 56[r10]
 8926 0135 E7 AE 0F                		mov.L	r14, 60[r10]
6674:../src/wolfcrypt/src/aes.c ****             V[1] |= V[0] << 63;
 8927                             		.loc 2 6674 18 discriminator 3
 8928 0138 ED A3 0E                		mov.L	56[r10], r3
 8929 013b ED A4 0F                		mov.L	60[r10], r4
 8930                             		.loc 2 6674 22 discriminator 3
 8931 013e ED A5 0C                		mov.L	48[r10], r5
 8932 0141 ED A6 0D                		mov.L	52[r10], r6
 8933                             		.loc 2 6674 26 discriminator 3
 8934 0144 FD DF 59                		shll	#31, r5, r9
 8935 0147 66 08                   		mov.L	#0, r8
 8936                             		.loc 2 6674 18 discriminator 3
 8937 0149 FF 57 83                		or	r8, r3, r7
 8938 014c E7 A7 20                		mov.L	r7, 128[r10]
 8939 014f FF 5B 94                		or	r9, r4, r11
 8940 0152 E7 AB 21                		mov.L	r11, 132[r10]
 8941 0155 E5 AA 20 0E             		mov.L	128[r10], 56[r10]
 8942 0159 E5 AA 21 0F             		mov.L	132[r10], 60[r10]
6675:../src/wolfcrypt/src/aes.c ****             V[0] >>= 1;
 8943                             		.loc 2 6675 18 discriminator 3
 8944 015d ED A5 0C                		mov.L	48[r10], r5
 8945 0160 ED A6 0D                		mov.L	52[r10], r6
 8946 0163 FD DF 64                		shll	#31, r6, r4
 8947 0166 FD 81 5B                		shlr	#1, r5, r11
 8948 0169 57 4B                   		or	r4, r11
 8949 016b FD 81 6C                		shlr	#1, r6, r12
 8950 016e E7 AB 0C                		mov.L	r11, 48[r10]
 8951 0171 E7 AC 0D                		mov.L	r12, 52[r10]
6676:../src/wolfcrypt/src/aes.c ****             V[0] ^= v1;
 8952                             		.loc 2 6676 18 discriminator 3
 8953 0174 ED A3 0C                		mov.L	48[r10], r3
 8954 0177 ED A4 0D                		mov.L	52[r10], r4
 8955 017a ED A5 06                		mov.L	24[r10], r5
 8956 017d EF 57                   		mov.L	r5, r7
 8957 017f FC 37 37                		xor	r3, r7
 8958 0182 E7 A7 22                		mov.L	r7, 136[r10]
 8959 0185 ED A5 07                		mov.L	28[r10], r5
 8960 0188 EF 57                   		mov.L	r5, r7
 8961 018a FC 37 47                		xor	r4, r7
 8962 018d E7 A7 23                		mov.L	r7, 140[r10]
 8963 0190 E5 AA 22 0C             		mov.L	136[r10], 48[r10]
 8964 0194 E5 AA 23 0D             		mov.L	140[r10], 52[r10]
6677:../src/wolfcrypt/src/aes.c ****             y <<= 1;
 8965                             		.loc 2 6677 15 discriminator 3
 8966 0198 ED A5 02                		mov.L	8[r10], r5
 8967 019b ED A6 03                		mov.L	12[r10], r6
 8968 019e EF 64                   		mov.L	r6, r4
 8969 01a0 FF 23 55                		add	r5, r5, r3
 8970 01a3 FC 0B 64                		adc	r6, r4
 8971 01a6 E7 A4 25                		mov.L	r4, 148[r10]
 8972 01a9 E7 A3 24                		mov.L	r3, 144[r10]
 8973 01ac E5 AA 24 02             		mov.L	144[r10], 8[r10]
 8974 01b0 E5 AA 25 03             		mov.L	148[r10], 12[r10]
 8975                             	.LBE8:
6659:../src/wolfcrypt/src/aes.c ****         {
 8976                             		.loc 2 6659 30 discriminator 3
 8977 01b4 ED A5 01                		mov.L	4[r10], r5
 8978 01b7 62 15                   		add	#1, r5
 8979 01b9 E7 A5 01                		mov.L	r5, 4[r10]
 8980                             	.L140:
6659:../src/wolfcrypt/src/aes.c ****         {
 8981                             		.loc 2 6659 9 discriminator 1
 8982 01bc ED A5 01                		mov.L	4[r10], r5
 8983 01bf 75 55 3F                		cmp	#63, r5
 8984 01c2 2A 05 38 95 FE          		ble	.L141
 8985                             	.LBE7:
6656:../src/wolfcrypt/src/aes.c ****     {
 8986                             		.loc 2 6656 25 discriminator 2
 8987 01c7 EC A5                   		mov.L	[r10], r5
 8988 01c9 62 15                   		add	#1, r5
 8989 01cb E3 A5                   		mov.L	r5, [r10]
 8990                             	.L139:
6656:../src/wolfcrypt/src/aes.c ****     {
 8991                             		.loc 2 6656 5 discriminator 1
 8992 01cd EC A5                   		mov.L	[r10], r5
 8993 01cf 61 15                   		cmp	#1, r5
 8994 01d1 2A 05 38 6B FE          		ble	.L142
6678:../src/wolfcrypt/src/aes.c ****         }
6679:../src/wolfcrypt/src/aes.c ****     }
6680:../src/wolfcrypt/src/aes.c ****     X[0] = Z[0];
 8995                             		.loc 2 6680 13
 8996 01d6 ED A5 08                		mov.L	32[r10], r5
 8997 01d9 ED A6 09                		mov.L	36[r10], r6
 8998                             		.loc 2 6680 10
 8999 01dc ED A4 10                		mov.L	64[r10], r4
 9000 01df E3 45                   		mov.L	r5, [r4]
 9001 01e1 A0 4E                   		mov.L	r6, 4[r4]
6681:../src/wolfcrypt/src/aes.c ****     X[1] = Z[1];
 9002                             		.loc 2 6681 6
 9003 01e3 ED A5 10                		mov.L	64[r10], r5
 9004 01e6 71 54 08                		add	#8, r5, r4
 9005                             		.loc 2 6681 13
 9006 01e9 ED A5 0A                		mov.L	40[r10], r5
 9007 01ec ED A6 0B                		mov.L	44[r10], r6
 9008                             		.loc 2 6681 10
 9009 01ef E3 45                   		mov.L	r5, [r4]
 9010 01f1 A0 4E                   		mov.L	r6, 4[r4]
6682:../src/wolfcrypt/src/aes.c **** }
 9011                             		.loc 2 6682 1
 9012 01f3 03                      		nop
 9013 01f4 3F 6D 2E                		rtsd	#184, r6-r13
 9014                             	.LFE56:
 9016                             		.section	.text.GHASH,"ax",@progbits
 9017                             		.global	_GHASH
 9019                             	_GHASH:
 9020                             	.LFB57:
6683:../src/wolfcrypt/src/aes.c **** 
6684:../src/wolfcrypt/src/aes.c **** 
6685:../src/wolfcrypt/src/aes.c **** void GHASH(Aes* aes, const byte* a, word32 aSz, const byte* c,
6686:../src/wolfcrypt/src/aes.c ****     word32 cSz, byte* s, word32 sSz)
6687:../src/wolfcrypt/src/aes.c **** {
 9021                             		.loc 2 6687 1
 9022 0000 6E 6D                   		pushm	r6-r13
 9023                             	.LCFI54:
 9024 0002 72 0A 0C FF             		add	#-244, r0, r10
 9025                             	.LCFI55:
 9026 0006 EF A0                   		mov.L	r10, r0
 9027 0008 FB DA 18 01             		mov.L	#0x118, r13
 9028 000c 4B AD                   		add	r10, r13
 9029 000e E7 A1 16                		mov.L	r1, 88[r10]
 9030 0011 E7 A2 17                		mov.L	r2, 92[r10]
 9031 0014 E7 A3 18                		mov.L	r3, 96[r10]
 9032 0017 E7 A4 19                		mov.L	r4, 100[r10]
6688:../src/wolfcrypt/src/aes.c ****     word64 x[2] = {0,0};
 9033                             		.loc 2 6688 12
 9034 001a F9 A6 02 00             		mov.L	#0, 8[r10]
 9035 001e F9 A6 03 00             		mov.L	#0, 12[r10]
 9036 0022 F9 A6 04 00             		mov.L	#0, 16[r10]
 9037 0026 F9 A6 05 00             		mov.L	#0, 20[r10]
6689:../src/wolfcrypt/src/aes.c ****     word32 blocks, partial;
6690:../src/wolfcrypt/src/aes.c ****     word64 bigH[2];
6691:../src/wolfcrypt/src/aes.c **** 
6692:../src/wolfcrypt/src/aes.c ****     if (aes == NULL) {
 9038                             		.loc 2 6692 8
 9039 002a ED A5 16                		mov.L	88[r10], r5
 9040 002d 61 05                   		cmp	#0, r5
 9041 002f 3A B3 03                		beq	.L154
6693:../src/wolfcrypt/src/aes.c ****         return;
6694:../src/wolfcrypt/src/aes.c ****     }
6695:../src/wolfcrypt/src/aes.c **** 
6696:../src/wolfcrypt/src/aes.c ****     XMEMCPY(bigH, aes->H, AES_BLOCK_SIZE);
 9042                             		.loc 2 6696 5
 9043 0032 ED A5 16                		mov.L	88[r10], r5
 9044 0035 72 54 24 01             		add	#0x124, r5, r4
 9045 0039 75 43 10                		mov.L	#16, r3
 9046 003c 71 A5 18                		add	#24, r10, r5
 9047 003f EF 51                   		mov.L	r5, r1
 9048 0041 EF 42                   		mov.L	r4, r2
 9049 0043 7F 8F                   		smovf
6697:../src/wolfcrypt/src/aes.c ****     #ifdef LITTLE_ENDIAN_ORDER
6698:../src/wolfcrypt/src/aes.c ****         ByteReverseWords64(bigH, bigH, AES_BLOCK_SIZE);
 9050                             		.loc 2 6698 9
 9051 0045 71 A4 18                		add	#24, r10, r4
 9052 0048 71 A5 18                		add	#24, r10, r5
 9053 004b 75 43 10                		mov.L	#16, r3
 9054 004e EF 42                   		mov.L	r4, r2
 9055 0050 EF 51                   		mov.L	r5, r1
 9056 0052 05 00 00 00             		bsr	_ByteReverseWords64
6699:../src/wolfcrypt/src/aes.c ****     #endif
6700:../src/wolfcrypt/src/aes.c **** 
6701:../src/wolfcrypt/src/aes.c ****     /* Hash in A, the Additional Authentication Data */
6702:../src/wolfcrypt/src/aes.c ****     if (aSz != 0 && a != NULL) {
 9057                             		.loc 2 6702 8
 9058 0056 ED A5 18                		mov.L	96[r10], r5
 9059 0059 61 05                   		cmp	#0, r5
 9060 005b 3A 36 01                		beq	.L146
 9061                             		.loc 2 6702 18 discriminator 1
 9062 005e ED A5 17                		mov.L	92[r10], r5
 9063 0061 61 05                   		cmp	#0, r5
 9064 0063 3A 2E 01                		beq	.L146
 9065                             	.LBB9:
6703:../src/wolfcrypt/src/aes.c ****         word64 bigA[2];
6704:../src/wolfcrypt/src/aes.c ****         blocks = aSz / AES_BLOCK_SIZE;
 9066                             		.loc 2 6704 16
 9067 0066 ED A5 18                		mov.L	96[r10], r5
 9068 0069 68 45                   		shlr	#4, r5
 9069 006b E3 A5                   		mov.L	r5, [r10]
6705:../src/wolfcrypt/src/aes.c ****         partial = aSz % AES_BLOCK_SIZE;
 9070                             		.loc 2 6705 17
 9071 006d ED A5 18                		mov.L	96[r10], r5
 9072 0070 64 F5                   		and	#15, r5
 9073 0072 E7 A5 01                		mov.L	r5, 4[r10]
6706:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
 9074                             		.loc 2 6706 15
 9075 0075 38 84 00                		bra	.L147
 9076                             	.L148:
6707:../src/wolfcrypt/src/aes.c ****             XMEMCPY(bigA, a, AES_BLOCK_SIZE);
 9077                             		.loc 2 6707 13
 9078 0078 ED A3 17                		mov.L	92[r10], r3
 9079 007b 75 44 10                		mov.L	#16, r4
 9080 007e 71 A5 28                		add	#40, r10, r5
 9081 0081 EF 51                   		mov.L	r5, r1
 9082 0083 EF 32                   		mov.L	r3, r2
 9083 0085 EF 43                   		mov.L	r4, r3
 9084 0087 7F 8F                   		smovf
6708:../src/wolfcrypt/src/aes.c ****             #ifdef LITTLE_ENDIAN_ORDER
6709:../src/wolfcrypt/src/aes.c ****                 ByteReverseWords64(bigA, bigA, AES_BLOCK_SIZE);
 9085                             		.loc 2 6709 17
 9086 0089 71 A4 28                		add	#40, r10, r4
 9087 008c 71 A5 28                		add	#40, r10, r5
 9088 008f 75 43 10                		mov.L	#16, r3
 9089 0092 EF 42                   		mov.L	r4, r2
 9090 0094 EF 51                   		mov.L	r5, r1
 9091 0096 05 00 00 00             		bsr	_ByteReverseWords64
6710:../src/wolfcrypt/src/aes.c ****             #endif
6711:../src/wolfcrypt/src/aes.c ****             x[0] ^= bigA[0];
 9092                             		.loc 2 6711 18
 9093 009a ED A3 02                		mov.L	8[r10], r3
 9094 009d ED A4 03                		mov.L	12[r10], r4
 9095                             		.loc 2 6711 25
 9096 00a0 ED A5 0A                		mov.L	40[r10], r5
 9097 00a3 ED A6 0B                		mov.L	44[r10], r6
 9098                             		.loc 2 6711 18
 9099 00a6 EF 37                   		mov.L	r3, r7
 9100 00a8 FC 37 57                		xor	r5, r7
 9101 00ab E7 A7 1A                		mov.L	r7, 104[r10]
 9102 00ae EF 4E                   		mov.L	r4, r14
 9103 00b0 FC 37 6E                		xor	r6, r14
 9104 00b3 E7 AE 1B                		mov.L	r14, 108[r10]
 9105 00b6 E5 AA 1A 02             		mov.L	104[r10], 8[r10]
 9106 00ba E5 AA 1B 03             		mov.L	108[r10], 12[r10]
6712:../src/wolfcrypt/src/aes.c ****             x[1] ^= bigA[1];
 9107                             		.loc 2 6712 18
 9108 00be ED A3 04                		mov.L	16[r10], r3
 9109 00c1 ED A4 05                		mov.L	20[r10], r4
 9110                             		.loc 2 6712 25
 9111 00c4 ED A5 0C                		mov.L	48[r10], r5
 9112 00c7 ED A6 0D                		mov.L	52[r10], r6
 9113                             		.loc 2 6712 18
 9114 00ca EF 37                   		mov.L	r3, r7
 9115 00cc FC 37 57                		xor	r5, r7
 9116 00cf E7 A7 1C                		mov.L	r7, 112[r10]
 9117 00d2 EF 4E                   		mov.L	r4, r14
 9118 00d4 FC 37 6E                		xor	r6, r14
 9119 00d7 E7 AE 1D                		mov.L	r14, 116[r10]
 9120 00da E5 AA 1C 04             		mov.L	112[r10], 16[r10]
 9121 00de E5 AA 1D 05             		mov.L	116[r10], 20[r10]
6713:../src/wolfcrypt/src/aes.c ****             GMULT(x, bigH);
 9122                             		.loc 2 6713 13
 9123 00e2 71 A4 18                		add	#24, r10, r4
 9124 00e5 71 A5 08                		add	#8, r10, r5
 9125 00e8 EF 42                   		mov.L	r4, r2
 9126 00ea EF 51                   		mov.L	r5, r1
 9127 00ec 05 00 00 00             		bsr	_GMULT
6714:../src/wolfcrypt/src/aes.c ****             a += AES_BLOCK_SIZE;
 9128                             		.loc 2 6714 15
 9129 00f0 ED A5 17                		mov.L	92[r10], r5
 9130 00f3 71 55 10                		add	#16, r5
 9131 00f6 E7 A5 17                		mov.L	r5, 92[r10]
 9132                             	.L147:
6706:../src/wolfcrypt/src/aes.c ****             XMEMCPY(bigA, a, AES_BLOCK_SIZE);
 9133                             		.loc 2 6706 22
 9134 00f9 EC A5                   		mov.L	[r10], r5
 9135 00fb 71 54 FF                		add	#-1, r5, r4
 9136 00fe E3 A4                   		mov.L	r4, [r10]
6706:../src/wolfcrypt/src/aes.c ****             XMEMCPY(bigA, a, AES_BLOCK_SIZE);
 9137                             		.loc 2 6706 15
 9138 0100 61 05                   		cmp	#0, r5
 9139 0102 3B 76 FF                		bne	.L148
6715:../src/wolfcrypt/src/aes.c ****         }
6716:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
 9140                             		.loc 2 6716 12
 9141 0105 ED A5 01                		mov.L	4[r10], r5
 9142 0108 61 05                   		cmp	#0, r5
 9143 010a 3A 87 00                		beq	.L146
6717:../src/wolfcrypt/src/aes.c ****             XMEMSET(bigA, 0, AES_BLOCK_SIZE);
 9144                             		.loc 2 6717 13
 9145 010d 71 A5 28                		add	#40, r10, r5
 9146 0110 75 43 10                		mov.L	#16, r3
 9147 0113 66 02                   		mov.L	#0, r2
 9148 0115 EF 51                   		mov.L	r5, r1
 9149 0117 05 00 00 00             		bsr	_memset
6718:../src/wolfcrypt/src/aes.c ****             XMEMCPY(bigA, a, partial);
 9150                             		.loc 2 6718 13
 9151 011b 71 A5 28                		add	#40, r10, r5
 9152 011e ED A3 01                		mov.L	4[r10], r3
 9153 0121 ED A2 17                		mov.L	92[r10], r2
 9154 0124 EF 51                   		mov.L	r5, r1
 9155 0126 05 00 00 00             		bsr	_memcpy
6719:../src/wolfcrypt/src/aes.c ****             #ifdef LITTLE_ENDIAN_ORDER
6720:../src/wolfcrypt/src/aes.c ****                 ByteReverseWords64(bigA, bigA, AES_BLOCK_SIZE);
 9156                             		.loc 2 6720 17
 9157 012a 71 A4 28                		add	#40, r10, r4
 9158 012d 71 A5 28                		add	#40, r10, r5
 9159 0130 75 43 10                		mov.L	#16, r3
 9160 0133 EF 42                   		mov.L	r4, r2
 9161 0135 EF 51                   		mov.L	r5, r1
 9162 0137 05 00 00 00             		bsr	_ByteReverseWords64
6721:../src/wolfcrypt/src/aes.c ****             #endif
6722:../src/wolfcrypt/src/aes.c ****             x[0] ^= bigA[0];
 9163                             		.loc 2 6722 18
 9164 013b ED A3 02                		mov.L	8[r10], r3
 9165 013e ED A4 03                		mov.L	12[r10], r4
 9166                             		.loc 2 6722 25
 9167 0141 ED A5 0A                		mov.L	40[r10], r5
 9168 0144 ED A6 0B                		mov.L	44[r10], r6
 9169                             		.loc 2 6722 18
 9170 0147 EF 37                   		mov.L	r3, r7
 9171 0149 FC 37 57                		xor	r5, r7
 9172 014c E7 A7 1E                		mov.L	r7, 120[r10]
 9173 014f EF 4E                   		mov.L	r4, r14
 9174 0151 FC 37 6E                		xor	r6, r14
 9175 0154 E7 AE 1F                		mov.L	r14, 124[r10]
 9176 0157 E5 AA 1E 02             		mov.L	120[r10], 8[r10]
 9177 015b E5 AA 1F 03             		mov.L	124[r10], 12[r10]
6723:../src/wolfcrypt/src/aes.c ****             x[1] ^= bigA[1];
 9178                             		.loc 2 6723 18
 9179 015f ED A3 04                		mov.L	16[r10], r3
 9180 0162 ED A4 05                		mov.L	20[r10], r4
 9181                             		.loc 2 6723 25
 9182 0165 ED A5 0C                		mov.L	48[r10], r5
 9183 0168 ED A6 0D                		mov.L	52[r10], r6
 9184                             		.loc 2 6723 18
 9185 016b EF 37                   		mov.L	r3, r7
 9186 016d FC 37 57                		xor	r5, r7
 9187 0170 E7 A7 20                		mov.L	r7, 128[r10]
 9188 0173 EF 4E                   		mov.L	r4, r14
 9189 0175 FC 37 6E                		xor	r6, r14
 9190 0178 E7 AE 21                		mov.L	r14, 132[r10]
 9191 017b E5 AA 20 04             		mov.L	128[r10], 16[r10]
 9192 017f E5 AA 21 05             		mov.L	132[r10], 20[r10]
6724:../src/wolfcrypt/src/aes.c ****             GMULT(x, bigH);
 9193                             		.loc 2 6724 13
 9194 0183 71 A4 18                		add	#24, r10, r4
 9195 0186 71 A5 08                		add	#8, r10, r5
 9196 0189 EF 42                   		mov.L	r4, r2
 9197 018b EF 51                   		mov.L	r5, r1
 9198 018d 05 00 00 00             		bsr	_GMULT
 9199                             		.balign 8,3,1
 9200                             	.L146:
 9201                             	.LBE9:
6725:../src/wolfcrypt/src/aes.c ****         }
6726:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
6727:../src/wolfcrypt/src/aes.c ****         /* store AAD partial tag for next call */
6728:../src/wolfcrypt/src/aes.c ****         aes->aadH[0] = (word32)((x[0] & 0xFFFFFFFF00000000ULL) >> 32);
6729:../src/wolfcrypt/src/aes.c ****         aes->aadH[1] = (word32)(x[0] & 0xFFFFFFFF);
6730:../src/wolfcrypt/src/aes.c ****         aes->aadH[2] = (word32)((x[1] & 0xFFFFFFFF00000000ULL) >> 32);
6731:../src/wolfcrypt/src/aes.c ****         aes->aadH[3] = (word32)(x[1] & 0xFFFFFFFF);
6732:../src/wolfcrypt/src/aes.c **** #endif
6733:../src/wolfcrypt/src/aes.c ****     }
6734:../src/wolfcrypt/src/aes.c **** 
6735:../src/wolfcrypt/src/aes.c ****     /* Hash in C, the Ciphertext */
6736:../src/wolfcrypt/src/aes.c ****     if (cSz != 0 && c != NULL) {
 9202                             		.loc 2 6736 8
 9203 0191 EC D5                   		mov.L	[r13], r5
 9204 0193 61 05                   		cmp	#0, r5
 9205 0195 3A 34 01                		beq	.L150
 9206                             		.loc 2 6736 18 discriminator 1
 9207 0198 ED A5 19                		mov.L	100[r10], r5
 9208 019b 61 05                   		cmp	#0, r5
 9209 019d 3A 2C 01                		beq	.L150
 9210                             	.LBB10:
6737:../src/wolfcrypt/src/aes.c ****         word64 bigC[2];
6738:../src/wolfcrypt/src/aes.c ****         blocks = cSz / AES_BLOCK_SIZE;
 9211                             		.loc 2 6738 16
 9212 01a0 EC D5                   		mov.L	[r13], r5
 9213 01a2 68 45                   		shlr	#4, r5
 9214 01a4 E3 A5                   		mov.L	r5, [r10]
6739:../src/wolfcrypt/src/aes.c ****         partial = cSz % AES_BLOCK_SIZE;
 9215                             		.loc 2 6739 17
 9216 01a6 EC D5                   		mov.L	[r13], r5
 9217 01a8 64 F5                   		and	#15, r5
 9218 01aa E7 A5 01                		mov.L	r5, 4[r10]
6740:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
6741:../src/wolfcrypt/src/aes.c ****         /* Start from last AAD partial tag */
6742:../src/wolfcrypt/src/aes.c ****         if(aes->aadLen) {
6743:../src/wolfcrypt/src/aes.c ****             x[0] = ((word64)aes->aadH[0]) << 32 | aes->aadH[1];
6744:../src/wolfcrypt/src/aes.c ****             x[1] = ((word64)aes->aadH[2]) << 32 | aes->aadH[3];
6745:../src/wolfcrypt/src/aes.c ****          }
6746:../src/wolfcrypt/src/aes.c **** #endif
6747:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
 9219                             		.loc 2 6747 15
 9220 01ad 38 84 00                		bra	.L151
 9221                             	.L152:
6748:../src/wolfcrypt/src/aes.c ****             XMEMCPY(bigC, c, AES_BLOCK_SIZE);
 9222                             		.loc 2 6748 13
 9223 01b0 ED A3 19                		mov.L	100[r10], r3
 9224 01b3 75 44 10                		mov.L	#16, r4
 9225 01b6 71 A5 38                		add	#56, r10, r5
 9226 01b9 EF 51                   		mov.L	r5, r1
 9227 01bb EF 32                   		mov.L	r3, r2
 9228 01bd EF 43                   		mov.L	r4, r3
 9229 01bf 7F 8F                   		smovf
6749:../src/wolfcrypt/src/aes.c ****             #ifdef LITTLE_ENDIAN_ORDER
6750:../src/wolfcrypt/src/aes.c ****                 ByteReverseWords64(bigC, bigC, AES_BLOCK_SIZE);
 9230                             		.loc 2 6750 17
 9231 01c1 71 A4 38                		add	#56, r10, r4
 9232 01c4 71 A5 38                		add	#56, r10, r5
 9233 01c7 75 43 10                		mov.L	#16, r3
 9234 01ca EF 42                   		mov.L	r4, r2
 9235 01cc EF 51                   		mov.L	r5, r1
 9236 01ce 05 00 00 00             		bsr	_ByteReverseWords64
6751:../src/wolfcrypt/src/aes.c ****             #endif
6752:../src/wolfcrypt/src/aes.c ****             x[0] ^= bigC[0];
 9237                             		.loc 2 6752 18
 9238 01d2 ED A3 02                		mov.L	8[r10], r3
 9239 01d5 ED A4 03                		mov.L	12[r10], r4
 9240                             		.loc 2 6752 25
 9241 01d8 ED A5 0E                		mov.L	56[r10], r5
 9242 01db ED A6 0F                		mov.L	60[r10], r6
 9243                             		.loc 2 6752 18
 9244 01de EF 37                   		mov.L	r3, r7
 9245 01e0 FC 37 57                		xor	r5, r7
 9246 01e3 E7 A7 22                		mov.L	r7, 136[r10]
 9247 01e6 EF 4E                   		mov.L	r4, r14
 9248 01e8 FC 37 6E                		xor	r6, r14
 9249 01eb E7 AE 23                		mov.L	r14, 140[r10]
 9250 01ee E5 AA 22 02             		mov.L	136[r10], 8[r10]
 9251 01f2 E5 AA 23 03             		mov.L	140[r10], 12[r10]
6753:../src/wolfcrypt/src/aes.c ****             x[1] ^= bigC[1];
 9252                             		.loc 2 6753 18
 9253 01f6 ED A3 04                		mov.L	16[r10], r3
 9254 01f9 ED A4 05                		mov.L	20[r10], r4
 9255                             		.loc 2 6753 25
 9256 01fc ED A5 10                		mov.L	64[r10], r5
 9257 01ff ED A6 11                		mov.L	68[r10], r6
 9258                             		.loc 2 6753 18
 9259 0202 EF 37                   		mov.L	r3, r7
 9260 0204 FC 37 57                		xor	r5, r7
 9261 0207 E7 A7 24                		mov.L	r7, 144[r10]
 9262 020a EF 4E                   		mov.L	r4, r14
 9263 020c FC 37 6E                		xor	r6, r14
 9264 020f E7 AE 25                		mov.L	r14, 148[r10]
 9265 0212 E5 AA 24 04             		mov.L	144[r10], 16[r10]
 9266 0216 E5 AA 25 05             		mov.L	148[r10], 20[r10]
6754:../src/wolfcrypt/src/aes.c ****             GMULT(x, bigH);
 9267                             		.loc 2 6754 13
 9268 021a 71 A4 18                		add	#24, r10, r4
 9269 021d 71 A5 08                		add	#8, r10, r5
 9270 0220 EF 42                   		mov.L	r4, r2
 9271 0222 EF 51                   		mov.L	r5, r1
 9272 0224 05 00 00 00             		bsr	_GMULT
6755:../src/wolfcrypt/src/aes.c ****             c += AES_BLOCK_SIZE;
 9273                             		.loc 2 6755 15
 9274 0228 ED A5 19                		mov.L	100[r10], r5
 9275 022b 71 55 10                		add	#16, r5
 9276 022e E7 A5 19                		mov.L	r5, 100[r10]
 9277                             	.L151:
6747:../src/wolfcrypt/src/aes.c ****             XMEMCPY(bigC, c, AES_BLOCK_SIZE);
 9278                             		.loc 2 6747 22
 9279 0231 EC A5                   		mov.L	[r10], r5
 9280 0233 71 54 FF                		add	#-1, r5, r4
 9281 0236 E3 A4                   		mov.L	r4, [r10]
6747:../src/wolfcrypt/src/aes.c ****             XMEMCPY(bigC, c, AES_BLOCK_SIZE);
 9282                             		.loc 2 6747 15
 9283 0238 61 05                   		cmp	#0, r5
 9284 023a 3B 76 FF                		bne	.L152
6756:../src/wolfcrypt/src/aes.c ****         }
6757:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
 9285                             		.loc 2 6757 12
 9286 023d ED A5 01                		mov.L	4[r10], r5
 9287 0240 61 05                   		cmp	#0, r5
 9288 0242 3A 87 00                		beq	.L150
6758:../src/wolfcrypt/src/aes.c ****             XMEMSET(bigC, 0, AES_BLOCK_SIZE);
 9289                             		.loc 2 6758 13
 9290 0245 71 A5 38                		add	#56, r10, r5
 9291 0248 75 43 10                		mov.L	#16, r3
 9292 024b 66 02                   		mov.L	#0, r2
 9293 024d EF 51                   		mov.L	r5, r1
 9294 024f 05 00 00 00             		bsr	_memset
6759:../src/wolfcrypt/src/aes.c ****             XMEMCPY(bigC, c, partial);
 9295                             		.loc 2 6759 13
 9296 0253 71 A5 38                		add	#56, r10, r5
 9297 0256 ED A3 01                		mov.L	4[r10], r3
 9298 0259 ED A2 19                		mov.L	100[r10], r2
 9299 025c EF 51                   		mov.L	r5, r1
 9300 025e 05 00 00 00             		bsr	_memcpy
6760:../src/wolfcrypt/src/aes.c ****             #ifdef LITTLE_ENDIAN_ORDER
6761:../src/wolfcrypt/src/aes.c ****                 ByteReverseWords64(bigC, bigC, AES_BLOCK_SIZE);
 9301                             		.loc 2 6761 17
 9302 0262 71 A4 38                		add	#56, r10, r4
 9303 0265 71 A5 38                		add	#56, r10, r5
 9304 0268 75 43 10                		mov.L	#16, r3
 9305 026b EF 42                   		mov.L	r4, r2
 9306 026d EF 51                   		mov.L	r5, r1
 9307 026f 05 00 00 00             		bsr	_ByteReverseWords64
6762:../src/wolfcrypt/src/aes.c ****             #endif
6763:../src/wolfcrypt/src/aes.c ****             x[0] ^= bigC[0];
 9308                             		.loc 2 6763 18
 9309 0273 ED A3 02                		mov.L	8[r10], r3
 9310 0276 ED A4 03                		mov.L	12[r10], r4
 9311                             		.loc 2 6763 25
 9312 0279 ED A5 0E                		mov.L	56[r10], r5
 9313 027c ED A6 0F                		mov.L	60[r10], r6
 9314                             		.loc 2 6763 18
 9315 027f EF 37                   		mov.L	r3, r7
 9316 0281 FC 37 57                		xor	r5, r7
 9317 0284 E7 A7 26                		mov.L	r7, 152[r10]
 9318 0287 EF 4E                   		mov.L	r4, r14
 9319 0289 FC 37 6E                		xor	r6, r14
 9320 028c E7 AE 27                		mov.L	r14, 156[r10]
 9321 028f E5 AA 26 02             		mov.L	152[r10], 8[r10]
 9322 0293 E5 AA 27 03             		mov.L	156[r10], 12[r10]
6764:../src/wolfcrypt/src/aes.c ****             x[1] ^= bigC[1];
 9323                             		.loc 2 6764 18
 9324 0297 ED A3 04                		mov.L	16[r10], r3
 9325 029a ED A4 05                		mov.L	20[r10], r4
 9326                             		.loc 2 6764 25
 9327 029d ED A5 10                		mov.L	64[r10], r5
 9328 02a0 ED A6 11                		mov.L	68[r10], r6
 9329                             		.loc 2 6764 18
 9330 02a3 EF 37                   		mov.L	r3, r7
 9331 02a5 FC 37 57                		xor	r5, r7
 9332 02a8 E7 A7 28                		mov.L	r7, 160[r10]
 9333 02ab EF 4E                   		mov.L	r4, r14
 9334 02ad FC 37 6E                		xor	r6, r14
 9335 02b0 E7 AE 29                		mov.L	r14, 164[r10]
 9336 02b3 E5 AA 28 04             		mov.L	160[r10], 16[r10]
 9337 02b7 E5 AA 29 05             		mov.L	164[r10], 20[r10]
6765:../src/wolfcrypt/src/aes.c ****             GMULT(x, bigH);
 9338                             		.loc 2 6765 13
 9339 02bb 71 A4 18                		add	#24, r10, r4
 9340 02be 71 A5 08                		add	#8, r10, r5
 9341 02c1 EF 42                   		mov.L	r4, r2
 9342 02c3 EF 51                   		mov.L	r5, r1
 9343 02c5 05 00 00 00             		bsr	_GMULT
 9344                             		.balign 8,3,1
 9345                             	.L150:
 9346                             	.LBE10:
 9347                             	.LBB11:
6766:../src/wolfcrypt/src/aes.c ****         }
6767:../src/wolfcrypt/src/aes.c ****     }
6768:../src/wolfcrypt/src/aes.c **** 
6769:../src/wolfcrypt/src/aes.c ****     /* Hash in the lengths in bits of A and C */
6770:../src/wolfcrypt/src/aes.c ****     {
6771:../src/wolfcrypt/src/aes.c ****         word64 len[2];
6772:../src/wolfcrypt/src/aes.c ****         len[0] = aSz; len[1] = cSz;
 9348                             		.loc 2 6772 16 discriminator 1
 9349 02c9 ED A5 18                		mov.L	96[r10], r5
 9350 02cc E7 A5 2A                		mov.L	r5, 168[r10]
 9351 02cf F9 A6 2B 00             		mov.L	#0, 172[r10]
 9352 02d3 E5 AA 2A 12             		mov.L	168[r10], 72[r10]
 9353 02d7 E5 AA 2B 13             		mov.L	172[r10], 76[r10]
 9354                             		.loc 2 6772 30 discriminator 1
 9355 02db EC D5                   		mov.L	[r13], r5
 9356 02dd E7 A5 2C                		mov.L	r5, 176[r10]
 9357 02e0 F9 A6 2D 00             		mov.L	#0, 180[r10]
 9358 02e4 E5 AA 2C 14             		mov.L	176[r10], 80[r10]
 9359 02e8 E5 AA 2D 15             		mov.L	180[r10], 84[r10]
6773:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
6774:../src/wolfcrypt/src/aes.c ****         if (aes->aadLen)
6775:../src/wolfcrypt/src/aes.c ****             len[0] = (word64)aes->aadLen;
6776:../src/wolfcrypt/src/aes.c **** #endif
6777:../src/wolfcrypt/src/aes.c ****         /* Lengths are in bytes. Convert to bits. */
6778:../src/wolfcrypt/src/aes.c ****         len[0] *= 8;
 9360                             		.loc 2 6778 16 discriminator 1
 9361 02ec ED A5 12                		mov.L	72[r10], r5
 9362 02ef ED A6 13                		mov.L	76[r10], r6
 9363 02f2 EF 67                   		mov.L	r6, r7
 9364 02f4 FF 24 55                		add	r5, r5, r4
 9365 02f7 FC 0B 67                		adc	r6, r7
 9366 02fa E7 A7 33                		mov.L	r7, 204[r10]
 9367 02fd E7 A4 32                		mov.L	r4, 200[r10]
 9368 0300 ED AC 33                		mov.L	204[r10], r12
 9369 0303 ED AE 32                		mov.L	200[r10], r14
 9370 0306 ED A4 32                		mov.L	200[r10], r4
 9371 0309 FF 2B 4E                		add	r4, r14, r11
 9372 030c 06 A1 02 AC 33          		adc 204[r10],r12
 9373 0311 EF CE                   		mov.L	r12, r14
 9374 0313 FF 27 BB                		add	r11, r11, r7
 9375 0316 FC 0B CE                		adc	r12, r14
 9376 0319 E7 AE 35                		mov.L	r14, 212[r10]
 9377 031c E7 A7 34                		mov.L	r7, 208[r10]
 9378 031f ED A5 34                		mov.L	208[r10], r5
 9379 0322 ED A6 35                		mov.L	212[r10], r6
 9380 0325 E7 A5 12                		mov.L	r5, 72[r10]
 9381 0328 E7 A6 13                		mov.L	r6, 76[r10]
6779:../src/wolfcrypt/src/aes.c ****         len[1] *= 8;
 9382                             		.loc 2 6779 16 discriminator 1
 9383 032b ED A5 14                		mov.L	80[r10], r5
 9384 032e ED A6 15                		mov.L	84[r10], r6
 9385 0331 EF 6B                   		mov.L	r6, r11
 9386 0333 FF 27 55                		add	r5, r5, r7
 9387 0336 FC 0B 6B                		adc	r6, r11
 9388 0339 E7 AB 37                		mov.L	r11, 220[r10]
 9389 033c E7 A7 36                		mov.L	r7, 216[r10]
 9390 033f ED A9 37                		mov.L	220[r10], r9
 9391 0342 ED AE 36                		mov.L	216[r10], r14
 9392 0345 ED A4 36                		mov.L	216[r10], r4
 9393 0348 FF 28 4E                		add	r4, r14, r8
 9394 034b 06 A1 02 A9 37          		adc 220[r10],r9
 9395 0350 EF 9B                   		mov.L	r9, r11
 9396 0352 FF 27 88                		add	r8, r8, r7
 9397 0355 FC 0B 9B                		adc	r9, r11
 9398 0358 E7 AB 39                		mov.L	r11, 228[r10]
 9399 035b E7 A7 38                		mov.L	r7, 224[r10]
 9400 035e ED A5 38                		mov.L	224[r10], r5
 9401 0361 ED A6 39                		mov.L	228[r10], r6
 9402 0364 E7 A5 14                		mov.L	r5, 80[r10]
 9403 0367 E7 A6 15                		mov.L	r6, 84[r10]
6780:../src/wolfcrypt/src/aes.c **** 
6781:../src/wolfcrypt/src/aes.c ****         x[0] ^= len[0];
 9404                             		.loc 2 6781 14 discriminator 1
 9405 036a ED A3 02                		mov.L	8[r10], r3
 9406 036d ED A4 03                		mov.L	12[r10], r4
 9407                             		.loc 2 6781 20 discriminator 1
 9408 0370 ED A5 12                		mov.L	72[r10], r5
 9409 0373 ED A6 13                		mov.L	76[r10], r6
 9410                             		.loc 2 6781 14 discriminator 1
 9411 0376 EF 3E                   		mov.L	r3, r14
 9412 0378 FC 37 5E                		xor	r5, r14
 9413 037b E7 AE 2E                		mov.L	r14, 184[r10]
 9414 037e EF 47                   		mov.L	r4, r7
 9415 0380 FC 37 67                		xor	r6, r7
 9416 0383 E7 A7 2F                		mov.L	r7, 188[r10]
 9417 0386 E5 AA 2E 02             		mov.L	184[r10], 8[r10]
 9418 038a E5 AA 2F 03             		mov.L	188[r10], 12[r10]
6782:../src/wolfcrypt/src/aes.c ****         x[1] ^= len[1];
 9419                             		.loc 2 6782 14 discriminator 1
 9420 038e ED A3 04                		mov.L	16[r10], r3
 9421 0391 ED A4 05                		mov.L	20[r10], r4
 9422                             		.loc 2 6782 20 discriminator 1
 9423 0394 ED A5 14                		mov.L	80[r10], r5
 9424 0397 ED A6 15                		mov.L	84[r10], r6
 9425                             		.loc 2 6782 14 discriminator 1
 9426 039a EF 3B                   		mov.L	r3, r11
 9427 039c FC 37 5B                		xor	r5, r11
 9428 039f E7 AB 30                		mov.L	r11, 192[r10]
 9429 03a2 EF 4C                   		mov.L	r4, r12
 9430 03a4 FC 37 6C                		xor	r6, r12
 9431 03a7 E7 AC 31                		mov.L	r12, 196[r10]
 9432 03aa E5 AA 30 04             		mov.L	192[r10], 16[r10]
 9433 03ae E5 AA 31 05             		mov.L	196[r10], 20[r10]
6783:../src/wolfcrypt/src/aes.c ****         GMULT(x, bigH);
 9434                             		.loc 2 6783 9 discriminator 1
 9435 03b2 71 A4 18                		add	#24, r10, r4
 9436 03b5 71 A5 08                		add	#8, r10, r5
 9437 03b8 EF 42                   		mov.L	r4, r2
 9438 03ba EF 51                   		mov.L	r5, r1
 9439 03bc 05 00 00 00             		bsr	_GMULT
 9440                             	.LBE11:
6784:../src/wolfcrypt/src/aes.c ****     }
6785:../src/wolfcrypt/src/aes.c ****     #ifdef LITTLE_ENDIAN_ORDER
6786:../src/wolfcrypt/src/aes.c ****         ByteReverseWords64(x, x, AES_BLOCK_SIZE);
 9441                             		.loc 2 6786 9 discriminator 1
 9442 03c0 71 A4 08                		add	#8, r10, r4
 9443 03c3 71 A5 08                		add	#8, r10, r5
 9444 03c6 75 43 10                		mov.L	#16, r3
 9445 03c9 EF 42                   		mov.L	r4, r2
 9446 03cb EF 51                   		mov.L	r5, r1
 9447 03cd 05 00 00 00             		bsr	_ByteReverseWords64
6787:../src/wolfcrypt/src/aes.c ****     #endif
6788:../src/wolfcrypt/src/aes.c ****     XMEMCPY(s, x, sSz);
 9448                             		.loc 2 6788 5 discriminator 1
 9449 03d1 71 A5 08                		add	#8, r10, r5
 9450 03d4 ED D3 02                		mov.L	8[r13], r3
 9451 03d7 EF 52                   		mov.L	r5, r2
 9452 03d9 ED D1 01                		mov.L	4[r13], r1
 9453 03dc 05 00 00 00             		bsr	_memcpy
 9454 03e0 2E 03                   		bra	.L143
 9455                             	.L154:
6693:../src/wolfcrypt/src/aes.c ****     }
 9456                             		.loc 2 6693 9
 9457 03e2 03                      		nop
 9458                             	.L143:
6789:../src/wolfcrypt/src/aes.c **** }
 9459                             		.loc 2 6789 1
 9460 03e3 3F 6D 45                		rtsd	#276, r6-r13
 9461                             	.LFE57:
 9463 03e6 EF 00                   		.section	.text.AES_GCM_encrypt_C,"ax",@progbits
 9465                             	_AES_GCM_encrypt_C:
 9466                             	.LFB58:
6790:../src/wolfcrypt/src/aes.c **** #endif /* !FREESCALE_LTC_AES_GCM */
6791:../src/wolfcrypt/src/aes.c **** 
6792:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESGCM_STREAM
6793:../src/wolfcrypt/src/aes.c **** 
6794:../src/wolfcrypt/src/aes.c **** #ifdef LITTLE_ENDIAN_ORDER
6795:../src/wolfcrypt/src/aes.c **** 
6796:../src/wolfcrypt/src/aes.c **** /* No extra initialization for small implementation.
6797:../src/wolfcrypt/src/aes.c ****  *
6798:../src/wolfcrypt/src/aes.c ****  * @param [in] aes  AES GCM object.
6799:../src/wolfcrypt/src/aes.c ****  */
6800:../src/wolfcrypt/src/aes.c **** #define GHASH_INIT_EXTRA(aes)                                               \
6801:../src/wolfcrypt/src/aes.c ****     ByteReverseWords64((word64*)aes->H, (word64*)aes->H, AES_BLOCK_SIZE)
6802:../src/wolfcrypt/src/aes.c **** 
6803:../src/wolfcrypt/src/aes.c **** /* GHASH one block of data..
6804:../src/wolfcrypt/src/aes.c ****  *
6805:../src/wolfcrypt/src/aes.c ****  * XOR block into tag and GMULT with H.
6806:../src/wolfcrypt/src/aes.c ****  *
6807:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes    AES GCM object.
6808:../src/wolfcrypt/src/aes.c ****  * @param [in]      block  Block of AAD or cipher text.
6809:../src/wolfcrypt/src/aes.c ****  */
6810:../src/wolfcrypt/src/aes.c **** #define GHASH_ONE_BLOCK(aes, block)                             \
6811:../src/wolfcrypt/src/aes.c ****     do {                                                        \
6812:../src/wolfcrypt/src/aes.c ****         word64* x = (word64*)AES_TAG(aes);                      \
6813:../src/wolfcrypt/src/aes.c ****         word64* h = (word64*)aes->H;                            \
6814:../src/wolfcrypt/src/aes.c ****         word64 block64[2];                                      \
6815:../src/wolfcrypt/src/aes.c ****         XMEMCPY(block64, block, AES_BLOCK_SIZE);                \
6816:../src/wolfcrypt/src/aes.c ****         ByteReverseWords64(block64, block64, AES_BLOCK_SIZE);   \
6817:../src/wolfcrypt/src/aes.c ****         x[0] ^= block64[0];                                     \
6818:../src/wolfcrypt/src/aes.c ****         x[1] ^= block64[1];                                     \
6819:../src/wolfcrypt/src/aes.c ****         GMULT(x, h);                                            \
6820:../src/wolfcrypt/src/aes.c ****     }                                                           \
6821:../src/wolfcrypt/src/aes.c ****     while (0)
6822:../src/wolfcrypt/src/aes.c **** 
6823:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
6824:../src/wolfcrypt/src/aes.c **** /* GHASH in AAD and cipher text lengths in bits.
6825:../src/wolfcrypt/src/aes.c ****  *
6826:../src/wolfcrypt/src/aes.c ****  * Convert tag back to little-endian.
6827:../src/wolfcrypt/src/aes.c ****  *
6828:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES GCM object.
6829:../src/wolfcrypt/src/aes.c ****  */
6830:../src/wolfcrypt/src/aes.c **** #define GHASH_LEN_BLOCK(aes)                            \
6831:../src/wolfcrypt/src/aes.c ****     do {                                                \
6832:../src/wolfcrypt/src/aes.c ****         word64* x = (word64*)AES_TAG(aes);              \
6833:../src/wolfcrypt/src/aes.c ****         word64* h = (word64*)aes->H;                    \
6834:../src/wolfcrypt/src/aes.c ****         word64 len[2];                                  \
6835:../src/wolfcrypt/src/aes.c ****         len[0] = aes->aSz; len[1] = aes->cSz;           \
6836:../src/wolfcrypt/src/aes.c ****         if (aes->aadLen)                                \
6837:../src/wolfcrypt/src/aes.c ****             len[0] = (word64)aes->aadLen;               \
6838:../src/wolfcrypt/src/aes.c ****         /* Lengths are in bytes. Convert to bits. */    \
6839:../src/wolfcrypt/src/aes.c ****         len[0] *= 8;                                    \
6840:../src/wolfcrypt/src/aes.c ****         len[1] *= 8;                                    \
6841:../src/wolfcrypt/src/aes.c ****                                                         \
6842:../src/wolfcrypt/src/aes.c ****         x[0] ^= len[0];                                 \
6843:../src/wolfcrypt/src/aes.c ****         x[1] ^= len[1];                                 \
6844:../src/wolfcrypt/src/aes.c ****         GMULT(x, h);                                    \
6845:../src/wolfcrypt/src/aes.c ****         ByteReverseWords64(x, x, AES_BLOCK_SIZE);       \
6846:../src/wolfcrypt/src/aes.c ****     }                                                   \
6847:../src/wolfcrypt/src/aes.c ****     while (0)
6848:../src/wolfcrypt/src/aes.c **** #else
6849:../src/wolfcrypt/src/aes.c **** /* GHASH in AAD and cipher text lengths in bits.
6850:../src/wolfcrypt/src/aes.c ****  *
6851:../src/wolfcrypt/src/aes.c ****  * Convert tag back to little-endian.
6852:../src/wolfcrypt/src/aes.c ****  *
6853:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES GCM object.
6854:../src/wolfcrypt/src/aes.c ****  */
6855:../src/wolfcrypt/src/aes.c **** #define GHASH_LEN_BLOCK(aes)                            \
6856:../src/wolfcrypt/src/aes.c ****     do {                                                \
6857:../src/wolfcrypt/src/aes.c ****         word64* x = (word64*)AES_TAG(aes);              \
6858:../src/wolfcrypt/src/aes.c ****         word64* h = (word64*)aes->H;                    \
6859:../src/wolfcrypt/src/aes.c ****         word64 len[2];                                  \
6860:../src/wolfcrypt/src/aes.c ****         len[0] = aes->aSz; len[1] = aes->cSz;           \
6861:../src/wolfcrypt/src/aes.c ****         /* Lengths are in bytes. Convert to bits. */    \
6862:../src/wolfcrypt/src/aes.c ****         len[0] *= 8;                                    \
6863:../src/wolfcrypt/src/aes.c ****         len[1] *= 8;                                    \
6864:../src/wolfcrypt/src/aes.c ****                                                         \
6865:../src/wolfcrypt/src/aes.c ****         x[0] ^= len[0];                                 \
6866:../src/wolfcrypt/src/aes.c ****         x[1] ^= len[1];                                 \
6867:../src/wolfcrypt/src/aes.c ****         GMULT(x, h);                                    \
6868:../src/wolfcrypt/src/aes.c ****         ByteReverseWords64(x, x, AES_BLOCK_SIZE);       \
6869:../src/wolfcrypt/src/aes.c ****     }                                                   \
6870:../src/wolfcrypt/src/aes.c ****     while (0)
6871:../src/wolfcrypt/src/aes.c **** #endif
6872:../src/wolfcrypt/src/aes.c **** 
6873:../src/wolfcrypt/src/aes.c **** #else
6874:../src/wolfcrypt/src/aes.c **** 
6875:../src/wolfcrypt/src/aes.c **** /* No extra initialization for small implementation.
6876:../src/wolfcrypt/src/aes.c ****  *
6877:../src/wolfcrypt/src/aes.c ****  * @param [in] aes  AES GCM object.
6878:../src/wolfcrypt/src/aes.c ****  */
6879:../src/wolfcrypt/src/aes.c **** #define GHASH_INIT_EXTRA(aes)
6880:../src/wolfcrypt/src/aes.c **** 
6881:../src/wolfcrypt/src/aes.c **** /* GHASH one block of data..
6882:../src/wolfcrypt/src/aes.c ****  *
6883:../src/wolfcrypt/src/aes.c ****  * XOR block into tag and GMULT with H.
6884:../src/wolfcrypt/src/aes.c ****  *
6885:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes    AES GCM object.
6886:../src/wolfcrypt/src/aes.c ****  * @param [in]      block  Block of AAD or cipher text.
6887:../src/wolfcrypt/src/aes.c ****  */
6888:../src/wolfcrypt/src/aes.c **** #define GHASH_ONE_BLOCK(aes, block)                     \
6889:../src/wolfcrypt/src/aes.c ****     do {                                                \
6890:../src/wolfcrypt/src/aes.c ****         word64* x = (word64*)AES_TAG(aes);              \
6891:../src/wolfcrypt/src/aes.c ****         word64* h = (word64*)aes->H;                    \
6892:../src/wolfcrypt/src/aes.c ****         word64 block64[2];                              \
6893:../src/wolfcrypt/src/aes.c ****         XMEMCPY(block64, block, AES_BLOCK_SIZE);        \
6894:../src/wolfcrypt/src/aes.c ****         x[0] ^= block64[0];                             \
6895:../src/wolfcrypt/src/aes.c ****         x[1] ^= block64[1];                             \
6896:../src/wolfcrypt/src/aes.c ****         GMULT(x, h);                                    \
6897:../src/wolfcrypt/src/aes.c ****     }                                                   \
6898:../src/wolfcrypt/src/aes.c ****     while (0)
6899:../src/wolfcrypt/src/aes.c **** 
6900:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
6901:../src/wolfcrypt/src/aes.c **** /* GHASH in AAD and cipher text lengths in bits.
6902:../src/wolfcrypt/src/aes.c ****  *
6903:../src/wolfcrypt/src/aes.c ****  * Convert tag back to little-endian.
6904:../src/wolfcrypt/src/aes.c ****  *
6905:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES GCM object.
6906:../src/wolfcrypt/src/aes.c ****  */
6907:../src/wolfcrypt/src/aes.c **** #define GHASH_LEN_BLOCK(aes)                            \
6908:../src/wolfcrypt/src/aes.c ****     do {                                                \
6909:../src/wolfcrypt/src/aes.c ****         word64* x = (word64*)AES_TAG(aes);              \
6910:../src/wolfcrypt/src/aes.c ****         word64* h = (word64*)aes->H;                    \
6911:../src/wolfcrypt/src/aes.c ****         word64 len[2];                                  \
6912:../src/wolfcrypt/src/aes.c ****         len[0] = aes->aSz; len[1] = aes->cSz;           \
6913:../src/wolfcrypt/src/aes.c ****         if (aes->aadLen)                                \
6914:../src/wolfcrypt/src/aes.c ****             len[0] = (word64)aes->aadLen;               \
6915:../src/wolfcrypt/src/aes.c ****         /* Lengths are in bytes. Convert to bits. */    \
6916:../src/wolfcrypt/src/aes.c ****         len[0] *= 8;                                    \
6917:../src/wolfcrypt/src/aes.c ****         len[1] *= 8;                                    \
6918:../src/wolfcrypt/src/aes.c ****                                                         \
6919:../src/wolfcrypt/src/aes.c ****         x[0] ^= len[0];                                 \
6920:../src/wolfcrypt/src/aes.c ****         x[1] ^= len[1];                                 \
6921:../src/wolfcrypt/src/aes.c ****         GMULT(x, h);                                    \
6922:../src/wolfcrypt/src/aes.c ****     }                                                   \
6923:../src/wolfcrypt/src/aes.c ****     while (0)
6924:../src/wolfcrypt/src/aes.c **** #else
6925:../src/wolfcrypt/src/aes.c **** /* GHASH in AAD and cipher text lengths in bits.
6926:../src/wolfcrypt/src/aes.c ****  *
6927:../src/wolfcrypt/src/aes.c ****  * Convert tag back to little-endian.
6928:../src/wolfcrypt/src/aes.c ****  *
6929:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES GCM object.
6930:../src/wolfcrypt/src/aes.c ****  */
6931:../src/wolfcrypt/src/aes.c **** #define GHASH_LEN_BLOCK(aes)                            \
6932:../src/wolfcrypt/src/aes.c ****     do {                                                \
6933:../src/wolfcrypt/src/aes.c ****         word64* x = (word64*)AES_TAG(aes);              \
6934:../src/wolfcrypt/src/aes.c ****         word64* h = (word64*)aes->H;                    \
6935:../src/wolfcrypt/src/aes.c ****         word64 len[2];                                  \
6936:../src/wolfcrypt/src/aes.c ****         len[0] = aes->aSz; len[1] = aes->cSz;           \
6937:../src/wolfcrypt/src/aes.c ****         /* Lengths are in bytes. Convert to bits. */    \
6938:../src/wolfcrypt/src/aes.c ****         len[0] *= 8;                                    \
6939:../src/wolfcrypt/src/aes.c ****         len[1] *= 8;                                    \
6940:../src/wolfcrypt/src/aes.c ****                                                         \
6941:../src/wolfcrypt/src/aes.c ****         x[0] ^= len[0];                                 \
6942:../src/wolfcrypt/src/aes.c ****         x[1] ^= len[1];                                 \
6943:../src/wolfcrypt/src/aes.c ****         GMULT(x, h);                                    \
6944:../src/wolfcrypt/src/aes.c ****     }                                                   \
6945:../src/wolfcrypt/src/aes.c ****     while (0)
6946:../src/wolfcrypt/src/aes.c **** #endif
6947:../src/wolfcrypt/src/aes.c **** 
6948:../src/wolfcrypt/src/aes.c **** #endif /* !LITTLE_ENDIAN_ORDER */
6949:../src/wolfcrypt/src/aes.c **** 
6950:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AESGCM_STREAM */
6951:../src/wolfcrypt/src/aes.c **** /* end defined(WORD64_AVAILABLE) && !defined(GCM_WORD32) */
6952:../src/wolfcrypt/src/aes.c **** #else /* GCM_WORD32 */
6953:../src/wolfcrypt/src/aes.c **** 
6954:../src/wolfcrypt/src/aes.c **** static void GMULT(word32* X, word32* Y)
6955:../src/wolfcrypt/src/aes.c **** {
6956:../src/wolfcrypt/src/aes.c ****     word32 Z[4] = {0,0,0,0};
6957:../src/wolfcrypt/src/aes.c ****     word32 V[4];
6958:../src/wolfcrypt/src/aes.c ****     int i, j;
6959:../src/wolfcrypt/src/aes.c **** 
6960:../src/wolfcrypt/src/aes.c ****     V[0] = X[0];  V[1] = X[1]; V[2] =  X[2]; V[3] =  X[3];
6961:../src/wolfcrypt/src/aes.c **** 
6962:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < 4; i++)
6963:../src/wolfcrypt/src/aes.c ****     {
6964:../src/wolfcrypt/src/aes.c ****         word32 y = Y[i];
6965:../src/wolfcrypt/src/aes.c ****         for (j = 0; j < 32; j++)
6966:../src/wolfcrypt/src/aes.c ****         {
6967:../src/wolfcrypt/src/aes.c ****             if (y & 0x80000000) {
6968:../src/wolfcrypt/src/aes.c ****                 Z[0] ^= V[0];
6969:../src/wolfcrypt/src/aes.c ****                 Z[1] ^= V[1];
6970:../src/wolfcrypt/src/aes.c ****                 Z[2] ^= V[2];
6971:../src/wolfcrypt/src/aes.c ****                 Z[3] ^= V[3];
6972:../src/wolfcrypt/src/aes.c ****             }
6973:../src/wolfcrypt/src/aes.c **** 
6974:../src/wolfcrypt/src/aes.c ****             if (V[3] & 0x00000001) {
6975:../src/wolfcrypt/src/aes.c ****                 V[3] >>= 1;
6976:../src/wolfcrypt/src/aes.c ****                 V[3] |= ((V[2] & 0x00000001) ? 0x80000000 : 0);
6977:../src/wolfcrypt/src/aes.c ****                 V[2] >>= 1;
6978:../src/wolfcrypt/src/aes.c ****                 V[2] |= ((V[1] & 0x00000001) ? 0x80000000 : 0);
6979:../src/wolfcrypt/src/aes.c ****                 V[1] >>= 1;
6980:../src/wolfcrypt/src/aes.c ****                 V[1] |= ((V[0] & 0x00000001) ? 0x80000000 : 0);
6981:../src/wolfcrypt/src/aes.c ****                 V[0] >>= 1;
6982:../src/wolfcrypt/src/aes.c ****                 V[0] ^= 0xE1000000;
6983:../src/wolfcrypt/src/aes.c ****             } else {
6984:../src/wolfcrypt/src/aes.c ****                 V[3] >>= 1;
6985:../src/wolfcrypt/src/aes.c ****                 V[3] |= ((V[2] & 0x00000001) ? 0x80000000 : 0);
6986:../src/wolfcrypt/src/aes.c ****                 V[2] >>= 1;
6987:../src/wolfcrypt/src/aes.c ****                 V[2] |= ((V[1] & 0x00000001) ? 0x80000000 : 0);
6988:../src/wolfcrypt/src/aes.c ****                 V[1] >>= 1;
6989:../src/wolfcrypt/src/aes.c ****                 V[1] |= ((V[0] & 0x00000001) ? 0x80000000 : 0);
6990:../src/wolfcrypt/src/aes.c ****                 V[0] >>= 1;
6991:../src/wolfcrypt/src/aes.c ****             }
6992:../src/wolfcrypt/src/aes.c ****             y <<= 1;
6993:../src/wolfcrypt/src/aes.c ****         }
6994:../src/wolfcrypt/src/aes.c ****     }
6995:../src/wolfcrypt/src/aes.c ****     X[0] = Z[0];
6996:../src/wolfcrypt/src/aes.c ****     X[1] = Z[1];
6997:../src/wolfcrypt/src/aes.c ****     X[2] = Z[2];
6998:../src/wolfcrypt/src/aes.c ****     X[3] = Z[3];
6999:../src/wolfcrypt/src/aes.c **** }
7000:../src/wolfcrypt/src/aes.c **** 
7001:../src/wolfcrypt/src/aes.c **** 
7002:../src/wolfcrypt/src/aes.c **** void GHASH(Aes* aes, const byte* a, word32 aSz, const byte* c,
7003:../src/wolfcrypt/src/aes.c ****     word32 cSz, byte* s, word32 sSz)
7004:../src/wolfcrypt/src/aes.c **** {
7005:../src/wolfcrypt/src/aes.c ****     word32 x[4] = {0,0,0,0};
7006:../src/wolfcrypt/src/aes.c ****     word32 blocks, partial;
7007:../src/wolfcrypt/src/aes.c ****     word32 bigH[4];
7008:../src/wolfcrypt/src/aes.c **** 
7009:../src/wolfcrypt/src/aes.c ****     if (aes == NULL) {
7010:../src/wolfcrypt/src/aes.c ****         return;
7011:../src/wolfcrypt/src/aes.c ****     }
7012:../src/wolfcrypt/src/aes.c **** 
7013:../src/wolfcrypt/src/aes.c ****     XMEMCPY(bigH, aes->H, AES_BLOCK_SIZE);
7014:../src/wolfcrypt/src/aes.c ****     #ifdef LITTLE_ENDIAN_ORDER
7015:../src/wolfcrypt/src/aes.c ****         ByteReverseWords(bigH, bigH, AES_BLOCK_SIZE);
7016:../src/wolfcrypt/src/aes.c ****     #endif
7017:../src/wolfcrypt/src/aes.c **** 
7018:../src/wolfcrypt/src/aes.c ****     /* Hash in A, the Additional Authentication Data */
7019:../src/wolfcrypt/src/aes.c ****     if (aSz != 0 && a != NULL) {
7020:../src/wolfcrypt/src/aes.c ****         word32 bigA[4];
7021:../src/wolfcrypt/src/aes.c ****         blocks = aSz / AES_BLOCK_SIZE;
7022:../src/wolfcrypt/src/aes.c ****         partial = aSz % AES_BLOCK_SIZE;
7023:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
7024:../src/wolfcrypt/src/aes.c ****             XMEMCPY(bigA, a, AES_BLOCK_SIZE);
7025:../src/wolfcrypt/src/aes.c ****             #ifdef LITTLE_ENDIAN_ORDER
7026:../src/wolfcrypt/src/aes.c ****                 ByteReverseWords(bigA, bigA, AES_BLOCK_SIZE);
7027:../src/wolfcrypt/src/aes.c ****             #endif
7028:../src/wolfcrypt/src/aes.c ****             x[0] ^= bigA[0];
7029:../src/wolfcrypt/src/aes.c ****             x[1] ^= bigA[1];
7030:../src/wolfcrypt/src/aes.c ****             x[2] ^= bigA[2];
7031:../src/wolfcrypt/src/aes.c ****             x[3] ^= bigA[3];
7032:../src/wolfcrypt/src/aes.c ****             GMULT(x, bigH);
7033:../src/wolfcrypt/src/aes.c ****             a += AES_BLOCK_SIZE;
7034:../src/wolfcrypt/src/aes.c ****         }
7035:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
7036:../src/wolfcrypt/src/aes.c ****             XMEMSET(bigA, 0, AES_BLOCK_SIZE);
7037:../src/wolfcrypt/src/aes.c ****             XMEMCPY(bigA, a, partial);
7038:../src/wolfcrypt/src/aes.c ****             #ifdef LITTLE_ENDIAN_ORDER
7039:../src/wolfcrypt/src/aes.c ****                 ByteReverseWords(bigA, bigA, AES_BLOCK_SIZE);
7040:../src/wolfcrypt/src/aes.c ****             #endif
7041:../src/wolfcrypt/src/aes.c ****             x[0] ^= bigA[0];
7042:../src/wolfcrypt/src/aes.c ****             x[1] ^= bigA[1];
7043:../src/wolfcrypt/src/aes.c ****             x[2] ^= bigA[2];
7044:../src/wolfcrypt/src/aes.c ****             x[3] ^= bigA[3];
7045:../src/wolfcrypt/src/aes.c ****             GMULT(x, bigH);
7046:../src/wolfcrypt/src/aes.c ****         }
7047:../src/wolfcrypt/src/aes.c ****     }
7048:../src/wolfcrypt/src/aes.c **** 
7049:../src/wolfcrypt/src/aes.c ****     /* Hash in C, the Ciphertext */
7050:../src/wolfcrypt/src/aes.c ****     if (cSz != 0 && c != NULL) {
7051:../src/wolfcrypt/src/aes.c ****         word32 bigC[4];
7052:../src/wolfcrypt/src/aes.c ****         blocks = cSz / AES_BLOCK_SIZE;
7053:../src/wolfcrypt/src/aes.c ****         partial = cSz % AES_BLOCK_SIZE;
7054:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
7055:../src/wolfcrypt/src/aes.c ****             XMEMCPY(bigC, c, AES_BLOCK_SIZE);
7056:../src/wolfcrypt/src/aes.c ****             #ifdef LITTLE_ENDIAN_ORDER
7057:../src/wolfcrypt/src/aes.c ****                 ByteReverseWords(bigC, bigC, AES_BLOCK_SIZE);
7058:../src/wolfcrypt/src/aes.c ****             #endif
7059:../src/wolfcrypt/src/aes.c ****             x[0] ^= bigC[0];
7060:../src/wolfcrypt/src/aes.c ****             x[1] ^= bigC[1];
7061:../src/wolfcrypt/src/aes.c ****             x[2] ^= bigC[2];
7062:../src/wolfcrypt/src/aes.c ****             x[3] ^= bigC[3];
7063:../src/wolfcrypt/src/aes.c ****             GMULT(x, bigH);
7064:../src/wolfcrypt/src/aes.c ****             c += AES_BLOCK_SIZE;
7065:../src/wolfcrypt/src/aes.c ****         }
7066:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
7067:../src/wolfcrypt/src/aes.c ****             XMEMSET(bigC, 0, AES_BLOCK_SIZE);
7068:../src/wolfcrypt/src/aes.c ****             XMEMCPY(bigC, c, partial);
7069:../src/wolfcrypt/src/aes.c ****             #ifdef LITTLE_ENDIAN_ORDER
7070:../src/wolfcrypt/src/aes.c ****                 ByteReverseWords(bigC, bigC, AES_BLOCK_SIZE);
7071:../src/wolfcrypt/src/aes.c ****             #endif
7072:../src/wolfcrypt/src/aes.c ****             x[0] ^= bigC[0];
7073:../src/wolfcrypt/src/aes.c ****             x[1] ^= bigC[1];
7074:../src/wolfcrypt/src/aes.c ****             x[2] ^= bigC[2];
7075:../src/wolfcrypt/src/aes.c ****             x[3] ^= bigC[3];
7076:../src/wolfcrypt/src/aes.c ****             GMULT(x, bigH);
7077:../src/wolfcrypt/src/aes.c ****         }
7078:../src/wolfcrypt/src/aes.c ****     }
7079:../src/wolfcrypt/src/aes.c **** 
7080:../src/wolfcrypt/src/aes.c ****     /* Hash in the lengths in bits of A and C */
7081:../src/wolfcrypt/src/aes.c ****     {
7082:../src/wolfcrypt/src/aes.c ****         word32 len[4];
7083:../src/wolfcrypt/src/aes.c **** 
7084:../src/wolfcrypt/src/aes.c ****         /* Lengths are in bytes. Convert to bits. */
7085:../src/wolfcrypt/src/aes.c ****         len[0] = (aSz >> (8*sizeof(aSz) - 3));
7086:../src/wolfcrypt/src/aes.c ****         len[1] = aSz << 3;
7087:../src/wolfcrypt/src/aes.c ****         len[2] = (cSz >> (8*sizeof(cSz) - 3));
7088:../src/wolfcrypt/src/aes.c ****         len[3] = cSz << 3;
7089:../src/wolfcrypt/src/aes.c **** 
7090:../src/wolfcrypt/src/aes.c ****         x[0] ^= len[0];
7091:../src/wolfcrypt/src/aes.c ****         x[1] ^= len[1];
7092:../src/wolfcrypt/src/aes.c ****         x[2] ^= len[2];
7093:../src/wolfcrypt/src/aes.c ****         x[3] ^= len[3];
7094:../src/wolfcrypt/src/aes.c ****         GMULT(x, bigH);
7095:../src/wolfcrypt/src/aes.c ****     }
7096:../src/wolfcrypt/src/aes.c ****     #ifdef LITTLE_ENDIAN_ORDER
7097:../src/wolfcrypt/src/aes.c ****         ByteReverseWords(x, x, AES_BLOCK_SIZE);
7098:../src/wolfcrypt/src/aes.c ****     #endif
7099:../src/wolfcrypt/src/aes.c ****     XMEMCPY(s, x, sSz);
7100:../src/wolfcrypt/src/aes.c **** }
7101:../src/wolfcrypt/src/aes.c **** 
7102:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESGCM_STREAM
7103:../src/wolfcrypt/src/aes.c **** #ifdef LITTLE_ENDIAN_ORDER
7104:../src/wolfcrypt/src/aes.c **** /* Little-endian 32-bit word implementation requires byte reversal of H.
7105:../src/wolfcrypt/src/aes.c ****  *
7106:../src/wolfcrypt/src/aes.c ****  * H is all-zeros block encrypted with key.
7107:../src/wolfcrypt/src/aes.c ****  *
7108:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES GCM object.
7109:../src/wolfcrypt/src/aes.c ****  */
7110:../src/wolfcrypt/src/aes.c **** #define GHASH_INIT_EXTRA(aes) \
7111:../src/wolfcrypt/src/aes.c ****     ByteReverseWords((word32*)aes->H, (word32*)aes->H, AES_BLOCK_SIZE)
7112:../src/wolfcrypt/src/aes.c **** 
7113:../src/wolfcrypt/src/aes.c **** /* GHASH one block of data..
7114:../src/wolfcrypt/src/aes.c ****  *
7115:../src/wolfcrypt/src/aes.c ****  * XOR block, in big-endian form, into tag and GMULT with H.
7116:../src/wolfcrypt/src/aes.c ****  *
7117:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes    AES GCM object.
7118:../src/wolfcrypt/src/aes.c ****  * @param [in]      block  Block of AAD or cipher text.
7119:../src/wolfcrypt/src/aes.c ****  */
7120:../src/wolfcrypt/src/aes.c **** #define GHASH_ONE_BLOCK(aes, block)                         \
7121:../src/wolfcrypt/src/aes.c ****     do {                                                    \
7122:../src/wolfcrypt/src/aes.c ****         word32* x = (word32*)AES_TAG(aes);                  \
7123:../src/wolfcrypt/src/aes.c ****         word32* h = (word32*)aes->H;                        \
7124:../src/wolfcrypt/src/aes.c ****         word32 bigEnd[4];                                   \
7125:../src/wolfcrypt/src/aes.c ****         XMEMCPY(bigEnd, block, AES_BLOCK_SIZE);             \
7126:../src/wolfcrypt/src/aes.c ****         ByteReverseWords(bigEnd, bigEnd, AES_BLOCK_SIZE);   \
7127:../src/wolfcrypt/src/aes.c ****         x[0] ^= bigEnd[0];                                  \
7128:../src/wolfcrypt/src/aes.c ****         x[1] ^= bigEnd[1];                                  \
7129:../src/wolfcrypt/src/aes.c ****         x[2] ^= bigEnd[2];                                  \
7130:../src/wolfcrypt/src/aes.c ****         x[3] ^= bigEnd[3];                                  \
7131:../src/wolfcrypt/src/aes.c ****         GMULT(x, h);                                        \
7132:../src/wolfcrypt/src/aes.c ****     }                                                       \
7133:../src/wolfcrypt/src/aes.c ****     while (0)
7134:../src/wolfcrypt/src/aes.c **** 
7135:../src/wolfcrypt/src/aes.c **** /* GHASH in AAD and cipher text lengths in bits.
7136:../src/wolfcrypt/src/aes.c ****  *
7137:../src/wolfcrypt/src/aes.c ****  * Convert tag back to little-endian.
7138:../src/wolfcrypt/src/aes.c ****  *
7139:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES GCM object.
7140:../src/wolfcrypt/src/aes.c ****  */
7141:../src/wolfcrypt/src/aes.c **** #define GHASH_LEN_BLOCK(aes)                                \
7142:../src/wolfcrypt/src/aes.c ****     do {                                                    \
7143:../src/wolfcrypt/src/aes.c ****         word32 len[4];                                      \
7144:../src/wolfcrypt/src/aes.c ****         word32* x = (word32*)AES_TAG(aes);                  \
7145:../src/wolfcrypt/src/aes.c ****         word32* h = (word32*)aes->H;                        \
7146:../src/wolfcrypt/src/aes.c ****         len[0] = (aes->aSz >> (8*sizeof(aes->aSz) - 3));    \
7147:../src/wolfcrypt/src/aes.c ****         len[1] = aes->aSz << 3;                             \
7148:../src/wolfcrypt/src/aes.c ****         len[2] = (aes->cSz >> (8*sizeof(aes->cSz) - 3));    \
7149:../src/wolfcrypt/src/aes.c ****         len[3] = aes->cSz << 3;                             \
7150:../src/wolfcrypt/src/aes.c ****         x[0] ^= len[0];                                     \
7151:../src/wolfcrypt/src/aes.c ****         x[1] ^= len[1];                                     \
7152:../src/wolfcrypt/src/aes.c ****         x[2] ^= len[2];                                     \
7153:../src/wolfcrypt/src/aes.c ****         x[3] ^= len[3];                                     \
7154:../src/wolfcrypt/src/aes.c ****         GMULT(x, h);                                        \
7155:../src/wolfcrypt/src/aes.c ****         ByteReverseWords(x, x, AES_BLOCK_SIZE);             \
7156:../src/wolfcrypt/src/aes.c ****     }                                                       \
7157:../src/wolfcrypt/src/aes.c ****     while (0)
7158:../src/wolfcrypt/src/aes.c **** #else
7159:../src/wolfcrypt/src/aes.c **** /* No extra initialization for 32-bit word implementation.
7160:../src/wolfcrypt/src/aes.c ****  *
7161:../src/wolfcrypt/src/aes.c ****  * @param [in] aes  AES GCM object.
7162:../src/wolfcrypt/src/aes.c ****  */
7163:../src/wolfcrypt/src/aes.c **** #define GHASH_INIT_EXTRA(aes)
7164:../src/wolfcrypt/src/aes.c **** 
7165:../src/wolfcrypt/src/aes.c **** /* GHASH one block of data..
7166:../src/wolfcrypt/src/aes.c ****  *
7167:../src/wolfcrypt/src/aes.c ****  * XOR block into tag and GMULT with H.
7168:../src/wolfcrypt/src/aes.c ****  *
7169:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes    AES GCM object.
7170:../src/wolfcrypt/src/aes.c ****  * @param [in]      block  Block of AAD or cipher text.
7171:../src/wolfcrypt/src/aes.c ****  */
7172:../src/wolfcrypt/src/aes.c **** #define GHASH_ONE_BLOCK(aes, block)                         \
7173:../src/wolfcrypt/src/aes.c ****     do {                                                    \
7174:../src/wolfcrypt/src/aes.c ****         word32* x = (word32*)AES_TAG(aes);                  \
7175:../src/wolfcrypt/src/aes.c ****         word32* h = (word32*)aes->H;                        \
7176:../src/wolfcrypt/src/aes.c ****         word32 block32[4];                                  \
7177:../src/wolfcrypt/src/aes.c ****         XMEMCPY(block32, block, AES_BLOCK_SIZE);            \
7178:../src/wolfcrypt/src/aes.c ****         x[0] ^= block32[0];                                 \
7179:../src/wolfcrypt/src/aes.c ****         x[1] ^= block32[1];                                 \
7180:../src/wolfcrypt/src/aes.c ****         x[2] ^= block32[2];                                 \
7181:../src/wolfcrypt/src/aes.c ****         x[3] ^= block32[3];                                 \
7182:../src/wolfcrypt/src/aes.c ****         GMULT(x, h);                                        \
7183:../src/wolfcrypt/src/aes.c ****     }                                                       \
7184:../src/wolfcrypt/src/aes.c ****     while (0)
7185:../src/wolfcrypt/src/aes.c **** 
7186:../src/wolfcrypt/src/aes.c **** /* GHASH in AAD and cipher text lengths in bits.
7187:../src/wolfcrypt/src/aes.c ****  *
7188:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES GCM object.
7189:../src/wolfcrypt/src/aes.c ****  */
7190:../src/wolfcrypt/src/aes.c **** #define GHASH_LEN_BLOCK(aes)                                \
7191:../src/wolfcrypt/src/aes.c ****     do {                                                    \
7192:../src/wolfcrypt/src/aes.c ****         word32 len[4];                                      \
7193:../src/wolfcrypt/src/aes.c ****         word32* x = (word32*)AES_TAG(aes);                  \
7194:../src/wolfcrypt/src/aes.c ****         word32* h = (word32*)aes->H;                        \
7195:../src/wolfcrypt/src/aes.c ****         len[0] = (aes->aSz >> (8*sizeof(aes->aSz) - 3));    \
7196:../src/wolfcrypt/src/aes.c ****         len[1] = aes->aSz << 3;                             \
7197:../src/wolfcrypt/src/aes.c ****         len[2] = (aes->cSz >> (8*sizeof(aes->cSz) - 3));    \
7198:../src/wolfcrypt/src/aes.c ****         len[3] = aes->cSz << 3;                             \
7199:../src/wolfcrypt/src/aes.c ****         x[0] ^= len[0];                                     \
7200:../src/wolfcrypt/src/aes.c ****         x[1] ^= len[1];                                     \
7201:../src/wolfcrypt/src/aes.c ****         x[2] ^= len[2];                                     \
7202:../src/wolfcrypt/src/aes.c ****         x[3] ^= len[3];                                     \
7203:../src/wolfcrypt/src/aes.c ****         GMULT(x, h);                                        \
7204:../src/wolfcrypt/src/aes.c ****     }                                                       \
7205:../src/wolfcrypt/src/aes.c ****     while (0)
7206:../src/wolfcrypt/src/aes.c **** #endif /* LITTLE_ENDIAN_ORDER */
7207:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AESGCM_STREAM */
7208:../src/wolfcrypt/src/aes.c **** #endif /* end GCM_WORD32 */
7209:../src/wolfcrypt/src/aes.c **** 
7210:../src/wolfcrypt/src/aes.c **** #if !defined(WOLFSSL_XILINX_CRYPT) && !defined(WOLFSSL_AFALG_XILINX_AES)
7211:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESGCM_STREAM
7212:../src/wolfcrypt/src/aes.c **** #ifndef GHASH_LEN_BLOCK
7213:../src/wolfcrypt/src/aes.c **** /* Hash in the lengths of the AAD and cipher text in bits.
7214:../src/wolfcrypt/src/aes.c ****  *
7215:../src/wolfcrypt/src/aes.c ****  * Default implementation.
7216:../src/wolfcrypt/src/aes.c ****  *
7217:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES GCM object.
7218:../src/wolfcrypt/src/aes.c ****  */
7219:../src/wolfcrypt/src/aes.c **** #define GHASH_LEN_BLOCK(aes)                      \
7220:../src/wolfcrypt/src/aes.c ****     do {                                          \
7221:../src/wolfcrypt/src/aes.c ****         byte scratch[AES_BLOCK_SIZE];             \
7222:../src/wolfcrypt/src/aes.c ****         FlattenSzInBits(&scratch[0], (aes)->aSz); \
7223:../src/wolfcrypt/src/aes.c ****         FlattenSzInBits(&scratch[8], (aes)->cSz); \
7224:../src/wolfcrypt/src/aes.c ****         GHASH_ONE_BLOCK(aes, scratch);            \
7225:../src/wolfcrypt/src/aes.c ****     }                                             \
7226:../src/wolfcrypt/src/aes.c ****     while (0)
7227:../src/wolfcrypt/src/aes.c **** #endif
7228:../src/wolfcrypt/src/aes.c **** 
7229:../src/wolfcrypt/src/aes.c **** /* Initialize a GHASH for streaming operations.
7230:../src/wolfcrypt/src/aes.c ****  *
7231:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES GCM object.
7232:../src/wolfcrypt/src/aes.c ****  */
7233:../src/wolfcrypt/src/aes.c **** static void GHASH_INIT(Aes* aes) {
7234:../src/wolfcrypt/src/aes.c ****     /* Set tag to all zeros as initial value. */
7235:../src/wolfcrypt/src/aes.c ****     XMEMSET(AES_TAG(aes), 0, AES_BLOCK_SIZE);
7236:../src/wolfcrypt/src/aes.c ****     /* Reset counts of AAD and cipher text. */
7237:../src/wolfcrypt/src/aes.c ****     aes->aOver = 0;
7238:../src/wolfcrypt/src/aes.c ****     aes->cOver = 0;
7239:../src/wolfcrypt/src/aes.c ****     /* Extra initialization baed on implementation. */
7240:../src/wolfcrypt/src/aes.c ****     GHASH_INIT_EXTRA(aes);
7241:../src/wolfcrypt/src/aes.c **** }
7242:../src/wolfcrypt/src/aes.c **** 
7243:../src/wolfcrypt/src/aes.c **** /* Update the GHASH with AAD and/or cipher text.
7244:../src/wolfcrypt/src/aes.c ****  *
7245:../src/wolfcrypt/src/aes.c ****  * @param [in,out] aes   AES GCM object.
7246:../src/wolfcrypt/src/aes.c ****  * @param [in]     a     Additional authentication data buffer.
7247:../src/wolfcrypt/src/aes.c ****  * @param [in]     aSz   Size of data in AAD buffer.
7248:../src/wolfcrypt/src/aes.c ****  * @param [in]     c     Cipher text buffer.
7249:../src/wolfcrypt/src/aes.c ****  * @param [in]     cSz   Size of data in cipher text buffer.
7250:../src/wolfcrypt/src/aes.c ****  */
7251:../src/wolfcrypt/src/aes.c **** static void GHASH_UPDATE(Aes* aes, const byte* a, word32 aSz, const byte* c,
7252:../src/wolfcrypt/src/aes.c ****     word32 cSz)
7253:../src/wolfcrypt/src/aes.c **** {
7254:../src/wolfcrypt/src/aes.c ****     word32 blocks;
7255:../src/wolfcrypt/src/aes.c ****     word32 partial;
7256:../src/wolfcrypt/src/aes.c **** 
7257:../src/wolfcrypt/src/aes.c ****     /* Hash in A, the Additional Authentication Data */
7258:../src/wolfcrypt/src/aes.c ****     if (aSz != 0 && a != NULL) {
7259:../src/wolfcrypt/src/aes.c ****         /* Update count of AAD we have hashed. */
7260:../src/wolfcrypt/src/aes.c ****         aes->aSz += aSz;
7261:../src/wolfcrypt/src/aes.c ****         /* Check if we have unprocessed data. */
7262:../src/wolfcrypt/src/aes.c ****         if (aes->aOver > 0) {
7263:../src/wolfcrypt/src/aes.c ****             /* Calculate amount we can use - fill up the block. */
7264:../src/wolfcrypt/src/aes.c ****             byte sz = AES_BLOCK_SIZE - aes->aOver;
7265:../src/wolfcrypt/src/aes.c ****             if (sz > aSz) {
7266:../src/wolfcrypt/src/aes.c ****                 sz = aSz;
7267:../src/wolfcrypt/src/aes.c ****             }
7268:../src/wolfcrypt/src/aes.c ****             /* Copy extra into last GHASH block array and update count. */
7269:../src/wolfcrypt/src/aes.c ****             XMEMCPY(AES_LASTGBLOCK(aes) + aes->aOver, a, sz);
7270:../src/wolfcrypt/src/aes.c ****             aes->aOver += sz;
7271:../src/wolfcrypt/src/aes.c ****             if (aes->aOver == AES_BLOCK_SIZE) {
7272:../src/wolfcrypt/src/aes.c ****                 /* We have filled up the block and can process. */
7273:../src/wolfcrypt/src/aes.c ****                 GHASH_ONE_BLOCK(aes, AES_LASTGBLOCK(aes));
7274:../src/wolfcrypt/src/aes.c ****                 /* Reset count. */
7275:../src/wolfcrypt/src/aes.c ****                 aes->aOver = 0;
7276:../src/wolfcrypt/src/aes.c ****             }
7277:../src/wolfcrypt/src/aes.c ****             /* Used up some data. */
7278:../src/wolfcrypt/src/aes.c ****             aSz -= sz;
7279:../src/wolfcrypt/src/aes.c ****             a += sz;
7280:../src/wolfcrypt/src/aes.c ****         }
7281:../src/wolfcrypt/src/aes.c **** 
7282:../src/wolfcrypt/src/aes.c ****         /* Calculate number of blocks of AAD and the leftover. */
7283:../src/wolfcrypt/src/aes.c ****         blocks = aSz / AES_BLOCK_SIZE;
7284:../src/wolfcrypt/src/aes.c ****         partial = aSz % AES_BLOCK_SIZE;
7285:../src/wolfcrypt/src/aes.c ****         /* GHASH full blocks now. */
7286:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
7287:../src/wolfcrypt/src/aes.c ****             GHASH_ONE_BLOCK(aes, a);
7288:../src/wolfcrypt/src/aes.c ****             a += AES_BLOCK_SIZE;
7289:../src/wolfcrypt/src/aes.c ****         }
7290:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
7291:../src/wolfcrypt/src/aes.c ****             /* Cache the partial block. */
7292:../src/wolfcrypt/src/aes.c ****             XMEMCPY(AES_LASTGBLOCK(aes), a, partial);
7293:../src/wolfcrypt/src/aes.c ****             aes->aOver = (byte)partial;
7294:../src/wolfcrypt/src/aes.c ****         }
7295:../src/wolfcrypt/src/aes.c ****     }
7296:../src/wolfcrypt/src/aes.c ****     if (aes->aOver > 0 && cSz > 0 && c != NULL) {
7297:../src/wolfcrypt/src/aes.c ****         /* No more AAD coming and we have a partial block. */
7298:../src/wolfcrypt/src/aes.c ****         /* Fill the rest of the block with zeros. */
7299:../src/wolfcrypt/src/aes.c ****         byte sz = AES_BLOCK_SIZE - aes->aOver;
7300:../src/wolfcrypt/src/aes.c ****         XMEMSET(AES_LASTGBLOCK(aes) + aes->aOver, 0, sz);
7301:../src/wolfcrypt/src/aes.c ****         /* GHASH last AAD block. */
7302:../src/wolfcrypt/src/aes.c ****         GHASH_ONE_BLOCK(aes, AES_LASTGBLOCK(aes));
7303:../src/wolfcrypt/src/aes.c ****         /* Clear partial count for next time through. */
7304:../src/wolfcrypt/src/aes.c ****         aes->aOver = 0;
7305:../src/wolfcrypt/src/aes.c ****     }
7306:../src/wolfcrypt/src/aes.c **** 
7307:../src/wolfcrypt/src/aes.c ****     /* Hash in C, the Ciphertext */
7308:../src/wolfcrypt/src/aes.c ****     if (cSz != 0 && c != NULL) {
7309:../src/wolfcrypt/src/aes.c ****         /* Update count of cipher text we have hashed. */
7310:../src/wolfcrypt/src/aes.c ****         aes->cSz += cSz;
7311:../src/wolfcrypt/src/aes.c ****         if (aes->cOver > 0) {
7312:../src/wolfcrypt/src/aes.c ****             /* Calculate amount we can use - fill up the block. */
7313:../src/wolfcrypt/src/aes.c ****             byte sz = AES_BLOCK_SIZE - aes->cOver;
7314:../src/wolfcrypt/src/aes.c ****             if (sz > cSz) {
7315:../src/wolfcrypt/src/aes.c ****                 sz = cSz;
7316:../src/wolfcrypt/src/aes.c ****             }
7317:../src/wolfcrypt/src/aes.c ****             XMEMCPY(AES_LASTGBLOCK(aes) + aes->cOver, c, sz);
7318:../src/wolfcrypt/src/aes.c ****             /* Update count of unsed encrypted counter. */
7319:../src/wolfcrypt/src/aes.c ****             aes->cOver += sz;
7320:../src/wolfcrypt/src/aes.c ****             if (aes->cOver == AES_BLOCK_SIZE) {
7321:../src/wolfcrypt/src/aes.c ****                 /* We have filled up the block and can process. */
7322:../src/wolfcrypt/src/aes.c ****                 GHASH_ONE_BLOCK(aes, AES_LASTGBLOCK(aes));
7323:../src/wolfcrypt/src/aes.c ****                 /* Reset count. */
7324:../src/wolfcrypt/src/aes.c ****                 aes->cOver = 0;
7325:../src/wolfcrypt/src/aes.c ****             }
7326:../src/wolfcrypt/src/aes.c ****             /* Used up some data. */
7327:../src/wolfcrypt/src/aes.c ****             cSz -= sz;
7328:../src/wolfcrypt/src/aes.c ****             c += sz;
7329:../src/wolfcrypt/src/aes.c ****         }
7330:../src/wolfcrypt/src/aes.c **** 
7331:../src/wolfcrypt/src/aes.c ****         /* Calculate number of blocks of cipher text and the leftover. */
7332:../src/wolfcrypt/src/aes.c ****         blocks = cSz / AES_BLOCK_SIZE;
7333:../src/wolfcrypt/src/aes.c ****         partial = cSz % AES_BLOCK_SIZE;
7334:../src/wolfcrypt/src/aes.c ****         /* GHASH full blocks now. */
7335:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
7336:../src/wolfcrypt/src/aes.c ****             GHASH_ONE_BLOCK(aes, c);
7337:../src/wolfcrypt/src/aes.c ****             c += AES_BLOCK_SIZE;
7338:../src/wolfcrypt/src/aes.c ****         }
7339:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
7340:../src/wolfcrypt/src/aes.c ****             /* Cache the partial block. */
7341:../src/wolfcrypt/src/aes.c ****             XMEMCPY(AES_LASTGBLOCK(aes), c, partial);
7342:../src/wolfcrypt/src/aes.c ****             aes->cOver = (byte)partial;
7343:../src/wolfcrypt/src/aes.c ****         }
7344:../src/wolfcrypt/src/aes.c ****     }
7345:../src/wolfcrypt/src/aes.c **** }
7346:../src/wolfcrypt/src/aes.c **** 
7347:../src/wolfcrypt/src/aes.c **** /* Finalize the GHASH calculation.
7348:../src/wolfcrypt/src/aes.c ****  *
7349:../src/wolfcrypt/src/aes.c ****  * Complete hashing cipher text and hash the AAD and cipher text lengths.
7350:../src/wolfcrypt/src/aes.c ****  *
7351:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES GCM object.
7352:../src/wolfcrypt/src/aes.c ****  * @param [out]     s    Authentication tag.
7353:../src/wolfcrypt/src/aes.c ****  * @param [in]      sSz  Size of authentication tag required.
7354:../src/wolfcrypt/src/aes.c ****  */
7355:../src/wolfcrypt/src/aes.c **** static void GHASH_FINAL(Aes* aes, byte* s, word32 sSz)
7356:../src/wolfcrypt/src/aes.c **** {
7357:../src/wolfcrypt/src/aes.c ****     /* AAD block incomplete when > 0 */
7358:../src/wolfcrypt/src/aes.c ****     byte over = aes->aOver;
7359:../src/wolfcrypt/src/aes.c **** 
7360:../src/wolfcrypt/src/aes.c ****     if (aes->cOver > 0) {
7361:../src/wolfcrypt/src/aes.c ****         /* Cipher text block incomplete. */
7362:../src/wolfcrypt/src/aes.c ****         over = aes->cOver;
7363:../src/wolfcrypt/src/aes.c ****     }
7364:../src/wolfcrypt/src/aes.c ****     if (over > 0) {
7365:../src/wolfcrypt/src/aes.c ****         /* Zeroize the unused part of the block. */
7366:../src/wolfcrypt/src/aes.c ****         XMEMSET(AES_LASTGBLOCK(aes) + over, 0, AES_BLOCK_SIZE - over);
7367:../src/wolfcrypt/src/aes.c ****         /* Hash the last block of cipher text. */
7368:../src/wolfcrypt/src/aes.c ****         GHASH_ONE_BLOCK(aes, AES_LASTGBLOCK(aes));
7369:../src/wolfcrypt/src/aes.c ****     }
7370:../src/wolfcrypt/src/aes.c ****     /* Hash in the lengths of AAD and cipher text in bits */
7371:../src/wolfcrypt/src/aes.c ****     GHASH_LEN_BLOCK(aes);
7372:../src/wolfcrypt/src/aes.c ****     /* Copy the result into s. */
7373:../src/wolfcrypt/src/aes.c ****     XMEMCPY(s, AES_TAG(aes), sSz);
7374:../src/wolfcrypt/src/aes.c **** }
7375:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AESGCM_STREAM */
7376:../src/wolfcrypt/src/aes.c **** 
7377:../src/wolfcrypt/src/aes.c **** 
7378:../src/wolfcrypt/src/aes.c **** #ifdef FREESCALE_LTC_AES_GCM
7379:../src/wolfcrypt/src/aes.c **** int wc_AesGcmEncrypt(Aes* aes, byte* out, const byte* in, word32 sz,
7380:../src/wolfcrypt/src/aes.c ****                    const byte* iv, word32 ivSz,
7381:../src/wolfcrypt/src/aes.c ****                    byte* authTag, word32 authTagSz,
7382:../src/wolfcrypt/src/aes.c ****                    const byte* authIn, word32 authInSz)
7383:../src/wolfcrypt/src/aes.c **** {
7384:../src/wolfcrypt/src/aes.c ****     status_t status;
7385:../src/wolfcrypt/src/aes.c ****     word32 keySize;
7386:../src/wolfcrypt/src/aes.c **** 
7387:../src/wolfcrypt/src/aes.c ****     /* argument checks */
7388:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || authTagSz > AES_BLOCK_SIZE || ivSz == 0) {
7389:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
7390:../src/wolfcrypt/src/aes.c ****     }
7391:../src/wolfcrypt/src/aes.c **** 
7392:../src/wolfcrypt/src/aes.c ****     if (authTagSz < WOLFSSL_MIN_AUTH_TAG_SZ) {
7393:../src/wolfcrypt/src/aes.c ****         WOLFSSL_MSG("GcmEncrypt authTagSz too small error");
7394:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
7395:../src/wolfcrypt/src/aes.c ****     }
7396:../src/wolfcrypt/src/aes.c **** 
7397:../src/wolfcrypt/src/aes.c ****     status = wc_AesGetKeySize(aes, &keySize);
7398:../src/wolfcrypt/src/aes.c ****     if (status)
7399:../src/wolfcrypt/src/aes.c ****         return status;
7400:../src/wolfcrypt/src/aes.c **** 
7401:../src/wolfcrypt/src/aes.c ****     status = wolfSSL_CryptHwMutexLock();
7402:../src/wolfcrypt/src/aes.c ****     if (status != 0)
7403:../src/wolfcrypt/src/aes.c ****         return status;
7404:../src/wolfcrypt/src/aes.c **** 
7405:../src/wolfcrypt/src/aes.c ****     status = LTC_AES_EncryptTagGcm(LTC_BASE, in, out, sz, iv, ivSz,
7406:../src/wolfcrypt/src/aes.c ****         authIn, authInSz, (byte*)aes->key, keySize, authTag, authTagSz);
7407:../src/wolfcrypt/src/aes.c ****     wolfSSL_CryptHwMutexUnLock();
7408:../src/wolfcrypt/src/aes.c **** 
7409:../src/wolfcrypt/src/aes.c ****     return (status == kStatus_Success) ? 0 : AES_GCM_AUTH_E;
7410:../src/wolfcrypt/src/aes.c **** }
7411:../src/wolfcrypt/src/aes.c **** 
7412:../src/wolfcrypt/src/aes.c **** #else
7413:../src/wolfcrypt/src/aes.c **** 
7414:../src/wolfcrypt/src/aes.c **** #ifdef STM32_CRYPTO_AES_GCM
7415:../src/wolfcrypt/src/aes.c **** 
7416:../src/wolfcrypt/src/aes.c **** /* this function supports inline encrypt */
7417:../src/wolfcrypt/src/aes.c **** /* define STM32_AESGCM_PARTIAL for newer STM Cube HAL's with workaround
7418:../src/wolfcrypt/src/aes.c ****    for handling partial packets to improve auth tag calculation performance by
7419:../src/wolfcrypt/src/aes.c ****    using hardware */
7420:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int wc_AesGcmEncrypt_STM32(
7421:../src/wolfcrypt/src/aes.c ****                                   Aes* aes, byte* out, const byte* in, word32 sz,
7422:../src/wolfcrypt/src/aes.c ****                                   const byte* iv, word32 ivSz,
7423:../src/wolfcrypt/src/aes.c ****                                   byte* authTag, word32 authTagSz,
7424:../src/wolfcrypt/src/aes.c ****                                   const byte* authIn, word32 authInSz)
7425:../src/wolfcrypt/src/aes.c **** {
7426:../src/wolfcrypt/src/aes.c ****     int ret;
7427:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_STM32_CUBEMX
7428:../src/wolfcrypt/src/aes.c ****     CRYP_HandleTypeDef hcryp;
7429:../src/wolfcrypt/src/aes.c **** #else
7430:../src/wolfcrypt/src/aes.c ****     word32 keyCopy[AES_256_KEY_SIZE/sizeof(word32)];
7431:../src/wolfcrypt/src/aes.c **** #endif
7432:../src/wolfcrypt/src/aes.c ****     word32 keySize;
7433:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_STM32_CUBEMX
7434:../src/wolfcrypt/src/aes.c ****     int status = HAL_OK;
7435:../src/wolfcrypt/src/aes.c ****     word32 blocks = sz / AES_BLOCK_SIZE;
7436:../src/wolfcrypt/src/aes.c ****     word32 partialBlock[AES_BLOCK_SIZE/sizeof(word32)];
7437:../src/wolfcrypt/src/aes.c **** #else
7438:../src/wolfcrypt/src/aes.c ****     int status = SUCCESS;
7439:../src/wolfcrypt/src/aes.c **** #endif
7440:../src/wolfcrypt/src/aes.c ****     word32 partial = sz % AES_BLOCK_SIZE;
7441:../src/wolfcrypt/src/aes.c ****     word32 tag[AES_BLOCK_SIZE/sizeof(word32)];
7442:../src/wolfcrypt/src/aes.c ****     word32 ctrInit[AES_BLOCK_SIZE/sizeof(word32)];
7443:../src/wolfcrypt/src/aes.c ****     word32 ctr[AES_BLOCK_SIZE/sizeof(word32)];
7444:../src/wolfcrypt/src/aes.c ****     word32 authhdr[AES_BLOCK_SIZE/sizeof(word32)];
7445:../src/wolfcrypt/src/aes.c ****     byte* authInPadded = NULL;
7446:../src/wolfcrypt/src/aes.c ****     int authPadSz, wasAlloc = 0, useSwGhash = 0;
7447:../src/wolfcrypt/src/aes.c **** 
7448:../src/wolfcrypt/src/aes.c ****     ret = wc_AesGetKeySize(aes, &keySize);
7449:../src/wolfcrypt/src/aes.c ****     if (ret != 0)
7450:../src/wolfcrypt/src/aes.c ****         return ret;
7451:../src/wolfcrypt/src/aes.c **** 
7452:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_STM32_CUBEMX
7453:../src/wolfcrypt/src/aes.c ****     ret = wc_Stm32_Aes_Init(aes, &hcryp);
7454:../src/wolfcrypt/src/aes.c ****     if (ret != 0)
7455:../src/wolfcrypt/src/aes.c ****         return ret;
7456:../src/wolfcrypt/src/aes.c **** #endif
7457:../src/wolfcrypt/src/aes.c **** 
7458:../src/wolfcrypt/src/aes.c ****     XMEMSET(ctr, 0, AES_BLOCK_SIZE);
7459:../src/wolfcrypt/src/aes.c ****     if (ivSz == GCM_NONCE_MID_SZ) {
7460:../src/wolfcrypt/src/aes.c ****         byte* pCtr = (byte*)ctr;
7461:../src/wolfcrypt/src/aes.c ****         XMEMCPY(ctr, iv, ivSz);
7462:../src/wolfcrypt/src/aes.c ****         pCtr[AES_BLOCK_SIZE - 1] = 1;
7463:../src/wolfcrypt/src/aes.c ****     }
7464:../src/wolfcrypt/src/aes.c ****     else {
7465:../src/wolfcrypt/src/aes.c ****         GHASH(aes, NULL, 0, iv, ivSz, (byte*)ctr, AES_BLOCK_SIZE);
7466:../src/wolfcrypt/src/aes.c ****     }
7467:../src/wolfcrypt/src/aes.c ****     XMEMCPY(ctrInit, ctr, sizeof(ctr)); /* save off initial counter for GMAC */
7468:../src/wolfcrypt/src/aes.c **** 
7469:../src/wolfcrypt/src/aes.c ****     /* Authentication buffer - must be 4-byte multiple zero padded */
7470:../src/wolfcrypt/src/aes.c ****     authPadSz = authInSz % sizeof(word32);
7471:../src/wolfcrypt/src/aes.c ****     if (authPadSz != 0) {
7472:../src/wolfcrypt/src/aes.c ****         authPadSz = authInSz + sizeof(word32) - authPadSz;
7473:../src/wolfcrypt/src/aes.c ****         if (authPadSz <= sizeof(authhdr)) {
7474:../src/wolfcrypt/src/aes.c ****             authInPadded = (byte*)authhdr;
7475:../src/wolfcrypt/src/aes.c ****         }
7476:../src/wolfcrypt/src/aes.c ****         else {
7477:../src/wolfcrypt/src/aes.c ****             authInPadded = (byte*)XMALLOC(authPadSz, aes->heap,
7478:../src/wolfcrypt/src/aes.c ****                 DYNAMIC_TYPE_TMP_BUFFER);
7479:../src/wolfcrypt/src/aes.c ****             if (authInPadded == NULL) {
7480:../src/wolfcrypt/src/aes.c ****                 wolfSSL_CryptHwMutexUnLock();
7481:../src/wolfcrypt/src/aes.c ****                 return MEMORY_E;
7482:../src/wolfcrypt/src/aes.c ****             }
7483:../src/wolfcrypt/src/aes.c ****             wasAlloc = 1;
7484:../src/wolfcrypt/src/aes.c ****         }
7485:../src/wolfcrypt/src/aes.c ****         XMEMSET(authInPadded, 0, authPadSz);
7486:../src/wolfcrypt/src/aes.c ****         XMEMCPY(authInPadded, authIn, authInSz);
7487:../src/wolfcrypt/src/aes.c ****     } else {
7488:../src/wolfcrypt/src/aes.c ****         authPadSz = authInSz;
7489:../src/wolfcrypt/src/aes.c ****         authInPadded = (byte*)authIn;
7490:../src/wolfcrypt/src/aes.c ****     }
7491:../src/wolfcrypt/src/aes.c **** 
7492:../src/wolfcrypt/src/aes.c ****     /* for cases where hardware cannot be used for authTag calculate it */
7493:../src/wolfcrypt/src/aes.c ****     /* if IV is not 12 calculate GHASH using software */
7494:../src/wolfcrypt/src/aes.c ****     if (ivSz != GCM_NONCE_MID_SZ
7495:../src/wolfcrypt/src/aes.c ****     #ifndef CRYP_HEADERWIDTHUNIT_BYTE
7496:../src/wolfcrypt/src/aes.c ****         /* or harware that does not support partial block */
7497:../src/wolfcrypt/src/aes.c ****         || sz == 0 || partial != 0
7498:../src/wolfcrypt/src/aes.c ****     #endif
7499:../src/wolfcrypt/src/aes.c ****     #if !defined(CRYP_HEADERWIDTHUNIT_BYTE) && !defined(STM32_AESGCM_PARTIAL)
7500:../src/wolfcrypt/src/aes.c ****         /* or authIn is not a multiple of 4  */
7501:../src/wolfcrypt/src/aes.c ****         || authPadSz != authInSz
7502:../src/wolfcrypt/src/aes.c ****     #endif
7503:../src/wolfcrypt/src/aes.c ****     ) {
7504:../src/wolfcrypt/src/aes.c ****         useSwGhash = 1;
7505:../src/wolfcrypt/src/aes.c ****     }
7506:../src/wolfcrypt/src/aes.c **** 
7507:../src/wolfcrypt/src/aes.c ****     /* Hardware requires counter + 1 */
7508:../src/wolfcrypt/src/aes.c ****     IncrementGcmCounter((byte*)ctr);
7509:../src/wolfcrypt/src/aes.c **** 
7510:../src/wolfcrypt/src/aes.c ****     ret = wolfSSL_CryptHwMutexLock();
7511:../src/wolfcrypt/src/aes.c ****     if (ret != 0) {
7512:../src/wolfcrypt/src/aes.c ****         return ret;
7513:../src/wolfcrypt/src/aes.c ****     }
7514:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_STM32_CUBEMX
7515:../src/wolfcrypt/src/aes.c ****     hcryp.Init.pInitVect = (STM_CRYPT_TYPE*)ctr;
7516:../src/wolfcrypt/src/aes.c ****     hcryp.Init.Header = (STM_CRYPT_TYPE*)authInPadded;
7517:../src/wolfcrypt/src/aes.c **** 
7518:../src/wolfcrypt/src/aes.c **** #if defined(STM32_HAL_V2)
7519:../src/wolfcrypt/src/aes.c ****     hcryp.Init.Algorithm = CRYP_AES_GCM;
7520:../src/wolfcrypt/src/aes.c ****     #ifdef CRYP_HEADERWIDTHUNIT_BYTE
7521:../src/wolfcrypt/src/aes.c ****     /* V2 with CRYP_HEADERWIDTHUNIT_BYTE uses byte size for header */
7522:../src/wolfcrypt/src/aes.c ****     hcryp.Init.HeaderSize = authInSz;
7523:../src/wolfcrypt/src/aes.c ****     #else
7524:../src/wolfcrypt/src/aes.c ****     hcryp.Init.HeaderSize = authPadSz/sizeof(word32);
7525:../src/wolfcrypt/src/aes.c ****     #endif
7526:../src/wolfcrypt/src/aes.c ****     #ifdef STM32_AESGCM_PARTIAL
7527:../src/wolfcrypt/src/aes.c ****     hcryp.Init.HeaderPadSize = authPadSz - authInSz;
7528:../src/wolfcrypt/src/aes.c ****     #endif
7529:../src/wolfcrypt/src/aes.c ****     #ifdef CRYP_KEYIVCONFIG_ONCE
7530:../src/wolfcrypt/src/aes.c ****     /* allows repeated calls to HAL_CRYP_Encrypt */
7531:../src/wolfcrypt/src/aes.c ****     hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
7532:../src/wolfcrypt/src/aes.c ****     #endif
7533:../src/wolfcrypt/src/aes.c ****     ByteReverseWords(ctr, ctr, AES_BLOCK_SIZE);
7534:../src/wolfcrypt/src/aes.c ****     hcryp.Init.pInitVect = (STM_CRYPT_TYPE*)ctr;
7535:../src/wolfcrypt/src/aes.c ****     HAL_CRYP_Init(&hcryp);
7536:../src/wolfcrypt/src/aes.c **** 
7537:../src/wolfcrypt/src/aes.c ****     #ifndef CRYP_KEYIVCONFIG_ONCE
7538:../src/wolfcrypt/src/aes.c ****     /* GCM payload phase - can handle partial blocks */
7539:../src/wolfcrypt/src/aes.c ****     status = HAL_CRYP_Encrypt(&hcryp, (uint32_t*)in,
7540:../src/wolfcrypt/src/aes.c ****         (blocks * AES_BLOCK_SIZE) + partial, (uint32_t*)out, STM32_HAL_TIMEOUT);
7541:../src/wolfcrypt/src/aes.c ****     #else
7542:../src/wolfcrypt/src/aes.c ****     /* GCM payload phase - blocks */
7543:../src/wolfcrypt/src/aes.c ****     if (blocks) {
7544:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYP_Encrypt(&hcryp, (uint32_t*)in,
7545:../src/wolfcrypt/src/aes.c ****             (blocks * AES_BLOCK_SIZE), (uint32_t*)out, STM32_HAL_TIMEOUT);
7546:../src/wolfcrypt/src/aes.c ****     }
7547:../src/wolfcrypt/src/aes.c ****     /* GCM payload phase - partial remainder */
7548:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK && (partial != 0 || blocks == 0)) {
7549:../src/wolfcrypt/src/aes.c ****         XMEMSET(partialBlock, 0, sizeof(partialBlock));
7550:../src/wolfcrypt/src/aes.c ****         XMEMCPY(partialBlock, in + (blocks * AES_BLOCK_SIZE), partial);
7551:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYP_Encrypt(&hcryp, (uint32_t*)partialBlock, partial,
7552:../src/wolfcrypt/src/aes.c ****             (uint32_t*)partialBlock, STM32_HAL_TIMEOUT);
7553:../src/wolfcrypt/src/aes.c ****         XMEMCPY(out + (blocks * AES_BLOCK_SIZE), partialBlock, partial);
7554:../src/wolfcrypt/src/aes.c ****     }
7555:../src/wolfcrypt/src/aes.c ****     #endif
7556:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK && !useSwGhash) {
7557:../src/wolfcrypt/src/aes.c ****         /* Compute the authTag */
7558:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AESGCM_GenerateAuthTAG(&hcryp, (uint32_t*)tag,
7559:../src/wolfcrypt/src/aes.c ****             STM32_HAL_TIMEOUT);
7560:../src/wolfcrypt/src/aes.c ****     }
7561:../src/wolfcrypt/src/aes.c **** #elif defined(STM32_CRYPTO_AES_ONLY)
7562:../src/wolfcrypt/src/aes.c ****     /* Set the CRYP parameters */
7563:../src/wolfcrypt/src/aes.c ****     hcryp.Init.HeaderSize = authPadSz;
7564:../src/wolfcrypt/src/aes.c ****     if (authPadSz == 0)
7565:../src/wolfcrypt/src/aes.c ****         hcryp.Init.Header = NULL; /* cannot pass pointer here when authIn == 0 */
7566:../src/wolfcrypt/src/aes.c ****     hcryp.Init.ChainingMode  = CRYP_CHAINMODE_AES_GCM_GMAC;
7567:../src/wolfcrypt/src/aes.c ****     hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
7568:../src/wolfcrypt/src/aes.c ****     hcryp.Init.GCMCMACPhase  = CRYP_INIT_PHASE;
7569:../src/wolfcrypt/src/aes.c ****     HAL_CRYP_Init(&hcryp);
7570:../src/wolfcrypt/src/aes.c **** 
7571:../src/wolfcrypt/src/aes.c ****     /* GCM init phase */
7572:../src/wolfcrypt/src/aes.c ****     status = HAL_CRYPEx_AES_Auth(&hcryp, NULL, 0, NULL, STM32_HAL_TIMEOUT);
7573:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK) {
7574:../src/wolfcrypt/src/aes.c ****         /* GCM header phase */
7575:../src/wolfcrypt/src/aes.c ****         hcryp.Init.GCMCMACPhase = CRYP_HEADER_PHASE;
7576:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AES_Auth(&hcryp, NULL, 0, NULL, STM32_HAL_TIMEOUT);
7577:../src/wolfcrypt/src/aes.c ****     }
7578:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK) {
7579:../src/wolfcrypt/src/aes.c ****         /* GCM payload phase - blocks */
7580:../src/wolfcrypt/src/aes.c ****         hcryp.Init.GCMCMACPhase = CRYP_PAYLOAD_PHASE;
7581:../src/wolfcrypt/src/aes.c ****         if (blocks) {
7582:../src/wolfcrypt/src/aes.c ****             status = HAL_CRYPEx_AES_Auth(&hcryp, (byte*)in,
7583:../src/wolfcrypt/src/aes.c ****                 (blocks * AES_BLOCK_SIZE), out, STM32_HAL_TIMEOUT);
7584:../src/wolfcrypt/src/aes.c ****         }
7585:../src/wolfcrypt/src/aes.c ****     }
7586:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK && (partial != 0 || (sz > 0 && blocks == 0))) {
7587:../src/wolfcrypt/src/aes.c ****         /* GCM payload phase - partial remainder */
7588:../src/wolfcrypt/src/aes.c ****         XMEMSET(partialBlock, 0, sizeof(partialBlock));
7589:../src/wolfcrypt/src/aes.c ****         XMEMCPY(partialBlock, in + (blocks * AES_BLOCK_SIZE), partial);
7590:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AES_Auth(&hcryp, (uint8_t*)partialBlock, partial,
7591:../src/wolfcrypt/src/aes.c ****                 (uint8_t*)partialBlock, STM32_HAL_TIMEOUT);
7592:../src/wolfcrypt/src/aes.c ****         XMEMCPY(out + (blocks * AES_BLOCK_SIZE), partialBlock, partial);
7593:../src/wolfcrypt/src/aes.c ****     }
7594:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK && !useSwGhash) {
7595:../src/wolfcrypt/src/aes.c ****         /* GCM final phase */
7596:../src/wolfcrypt/src/aes.c ****         hcryp.Init.GCMCMACPhase  = CRYP_FINAL_PHASE;
7597:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AES_Auth(&hcryp, NULL, sz, (uint8_t*)tag, STM32_HAL_TIMEOUT);
7598:../src/wolfcrypt/src/aes.c ****     }
7599:../src/wolfcrypt/src/aes.c **** #else
7600:../src/wolfcrypt/src/aes.c ****     hcryp.Init.HeaderSize = authPadSz;
7601:../src/wolfcrypt/src/aes.c ****     HAL_CRYP_Init(&hcryp);
7602:../src/wolfcrypt/src/aes.c ****     if (blocks) {
7603:../src/wolfcrypt/src/aes.c ****         /* GCM payload phase - blocks */
7604:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AESGCM_Encrypt(&hcryp, (byte*)in,
7605:../src/wolfcrypt/src/aes.c ****             (blocks * AES_BLOCK_SIZE), out, STM32_HAL_TIMEOUT);
7606:../src/wolfcrypt/src/aes.c ****     }
7607:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK && (partial != 0 || blocks == 0)) {
7608:../src/wolfcrypt/src/aes.c ****         /* GCM payload phase - partial remainder */
7609:../src/wolfcrypt/src/aes.c ****         XMEMSET(partialBlock, 0, sizeof(partialBlock));
7610:../src/wolfcrypt/src/aes.c ****         XMEMCPY(partialBlock, in + (blocks * AES_BLOCK_SIZE), partial);
7611:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AESGCM_Encrypt(&hcryp, (uint8_t*)partialBlock, partial,
7612:../src/wolfcrypt/src/aes.c ****             (uint8_t*)partialBlock, STM32_HAL_TIMEOUT);
7613:../src/wolfcrypt/src/aes.c ****         XMEMCPY(out + (blocks * AES_BLOCK_SIZE), partialBlock, partial);
7614:../src/wolfcrypt/src/aes.c ****     }
7615:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK && !useSwGhash) {
7616:../src/wolfcrypt/src/aes.c ****         /* Compute the authTag */
7617:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AESGCM_Finish(&hcryp, sz, (uint8_t*)tag, STM32_HAL_TIMEOUT);
7618:../src/wolfcrypt/src/aes.c ****     }
7619:../src/wolfcrypt/src/aes.c **** #endif
7620:../src/wolfcrypt/src/aes.c **** 
7621:../src/wolfcrypt/src/aes.c ****     if (status != HAL_OK)
7622:../src/wolfcrypt/src/aes.c ****         ret = AES_GCM_AUTH_E;
7623:../src/wolfcrypt/src/aes.c ****     HAL_CRYP_DeInit(&hcryp);
7624:../src/wolfcrypt/src/aes.c **** 
7625:../src/wolfcrypt/src/aes.c **** #else /* Standard Peripheral Library */
7626:../src/wolfcrypt/src/aes.c ****     ByteReverseWords(keyCopy, (word32*)aes->key, keySize);
7627:../src/wolfcrypt/src/aes.c ****     status = CRYP_AES_GCM(MODE_ENCRYPT, (uint8_t*)ctr,
7628:../src/wolfcrypt/src/aes.c ****                          (uint8_t*)keyCopy,      keySize * 8,
7629:../src/wolfcrypt/src/aes.c ****                          (uint8_t*)in,           sz,
7630:../src/wolfcrypt/src/aes.c ****                          (uint8_t*)authInPadded, authInSz,
7631:../src/wolfcrypt/src/aes.c ****                          (uint8_t*)out,          (uint8_t*)tag);
7632:../src/wolfcrypt/src/aes.c ****     if (status != SUCCESS)
7633:../src/wolfcrypt/src/aes.c ****         ret = AES_GCM_AUTH_E;
7634:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_STM32_CUBEMX */
7635:../src/wolfcrypt/src/aes.c ****     wolfSSL_CryptHwMutexUnLock();
7636:../src/wolfcrypt/src/aes.c **** 
7637:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
7638:../src/wolfcrypt/src/aes.c ****         /* return authTag */
7639:../src/wolfcrypt/src/aes.c ****         if (authTag) {
7640:../src/wolfcrypt/src/aes.c ****             if (useSwGhash) {
7641:../src/wolfcrypt/src/aes.c ****                 GHASH(aes, authIn, authInSz, out, sz, authTag, authTagSz);
7642:../src/wolfcrypt/src/aes.c ****                 ret = wc_AesEncrypt(aes, (byte*)ctrInit, (byte*)tag);
7643:../src/wolfcrypt/src/aes.c ****                 if (ret == 0) {
7644:../src/wolfcrypt/src/aes.c ****                     xorbuf(authTag, tag, authTagSz);
7645:../src/wolfcrypt/src/aes.c ****                 }
7646:../src/wolfcrypt/src/aes.c ****             }
7647:../src/wolfcrypt/src/aes.c ****             else {
7648:../src/wolfcrypt/src/aes.c ****                 /* use hardware calculated tag */
7649:../src/wolfcrypt/src/aes.c ****                 XMEMCPY(authTag, tag, authTagSz);
7650:../src/wolfcrypt/src/aes.c ****             }
7651:../src/wolfcrypt/src/aes.c ****         }
7652:../src/wolfcrypt/src/aes.c ****     }
7653:../src/wolfcrypt/src/aes.c **** 
7654:../src/wolfcrypt/src/aes.c ****     /* Free memory */
7655:../src/wolfcrypt/src/aes.c ****     if (wasAlloc) {
7656:../src/wolfcrypt/src/aes.c ****         XFREE(authInPadded, aes->heap, DYNAMIC_TYPE_TMP_BUFFER);
7657:../src/wolfcrypt/src/aes.c ****     }
7658:../src/wolfcrypt/src/aes.c **** 
7659:../src/wolfcrypt/src/aes.c ****     return ret;
7660:../src/wolfcrypt/src/aes.c **** }
7661:../src/wolfcrypt/src/aes.c **** 
7662:../src/wolfcrypt/src/aes.c **** #endif /* STM32_CRYPTO_AES_GCM */
7663:../src/wolfcrypt/src/aes.c **** 
7664:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
7665:../src/wolfcrypt/src/aes.c **** /* For performance reasons, this code needs to be not inlined. */
7666:../src/wolfcrypt/src/aes.c **** WARN_UNUSED_RESULT int AES_GCM_encrypt_C(
7667:../src/wolfcrypt/src/aes.c ****                       Aes* aes, byte* out, const byte* in, word32 sz,
7668:../src/wolfcrypt/src/aes.c ****                       const byte* iv, word32 ivSz,
7669:../src/wolfcrypt/src/aes.c ****                       byte* authTag, word32 authTagSz,
7670:../src/wolfcrypt/src/aes.c ****                       const byte* authIn, word32 authInSz);
7671:../src/wolfcrypt/src/aes.c **** #else
7672:../src/wolfcrypt/src/aes.c **** static
7673:../src/wolfcrypt/src/aes.c **** #endif
7674:../src/wolfcrypt/src/aes.c **** WARN_UNUSED_RESULT int AES_GCM_encrypt_C(
7675:../src/wolfcrypt/src/aes.c ****                       Aes* aes, byte* out, const byte* in, word32 sz,
7676:../src/wolfcrypt/src/aes.c ****                       const byte* iv, word32 ivSz,
7677:../src/wolfcrypt/src/aes.c ****                       byte* authTag, word32 authTagSz,
7678:../src/wolfcrypt/src/aes.c ****                       const byte* authIn, word32 authInSz)
7679:../src/wolfcrypt/src/aes.c **** {
 9467                             		.loc 2 7679 1
 9468 0000 7E AA                   		push.l	r10
 9469                             	.LCFI56:
 9470 0002 7E A6                   		push.l	r6
 9471                             	.LCFI57:
 9472 0004 71 0A 94                		add	#-108, r0, r10
 9473                             	.LCFI58:
 9474 0007 71 A0 F4                		add	#-12, r10, r0
 9475                             	.LCFI59:
 9476 000a 75 46 78                		mov.L	#0x78, r6
 9477 000d 4B A6                   		add	r10, r6
 9478 000f E7 A1 11                		mov.L	r1, 68[r10]
 9479 0012 E7 A2 12                		mov.L	r2, 72[r10]
 9480 0015 E7 A3 13                		mov.L	r3, 76[r10]
 9481 0018 E7 A4 14                		mov.L	r4, 80[r10]
7680:../src/wolfcrypt/src/aes.c ****     int ret = 0;
 9482                             		.loc 2 7680 9
 9483 001b F8 A6 00                		mov.L	#0, [r10]
7681:../src/wolfcrypt/src/aes.c ****     word32 blocks = sz / AES_BLOCK_SIZE;
 9484                             		.loc 2 7681 12
 9485 001e ED A5 14                		mov.L	80[r10], r5
 9486 0021 68 45                   		shlr	#4, r5
 9487 0023 E7 A5 01                		mov.L	r5, 4[r10]
7682:../src/wolfcrypt/src/aes.c ****     word32 partial = sz % AES_BLOCK_SIZE;
 9488                             		.loc 2 7682 12
 9489 0026 ED A5 14                		mov.L	80[r10], r5
 9490 0029 64 F5                   		and	#15, r5
 9491 002b E7 A5 04                		mov.L	r5, 16[r10]
7683:../src/wolfcrypt/src/aes.c ****     const byte* p = in;
 9492                             		.loc 2 7683 17
 9493 002e ED A5 13                		mov.L	76[r10], r5
 9494 0031 E7 A5 02                		mov.L	r5, 8[r10]
7684:../src/wolfcrypt/src/aes.c ****     byte* c = out;
 9495                             		.loc 2 7684 11
 9496 0034 ED A5 12                		mov.L	72[r10], r5
 9497 0037 E7 A5 03                		mov.L	r5, 12[r10]
7685:../src/wolfcrypt/src/aes.c ****     ALIGN32 byte counter[AES_BLOCK_SIZE];
7686:../src/wolfcrypt/src/aes.c ****     ALIGN32 byte initialCounter[AES_BLOCK_SIZE];
7687:../src/wolfcrypt/src/aes.c ****     ALIGN32 byte scratch[AES_BLOCK_SIZE];
7688:../src/wolfcrypt/src/aes.c **** 
7689:../src/wolfcrypt/src/aes.c ****     if (ivSz == GCM_NONCE_MID_SZ) {
 9498                             		.loc 2 7689 8
 9499 003a A8 6D                   		mov.L	4[r6], r5
 9500 003c 61 C5                   		cmp	#12, r5
 9501 003e 21 24                   		bne	.L156
7690:../src/wolfcrypt/src/aes.c ****         /* Counter is IV with bottom 4 bytes set to: 0x00,0x00,0x00,0x01. */
7691:../src/wolfcrypt/src/aes.c ****         XMEMCPY(counter, iv, ivSz);
 9502                             		.loc 2 7691 9
 9503 0040 71 A5 14                		add	#20, r10, r5
 9504 0043 A8 6B                   		mov.L	4[r6], r3
 9505 0045 EC 62                   		mov.L	[r6], r2
 9506 0047 EF 51                   		mov.L	r5, r1
 9507 0049 05 00 00 00             		bsr	_memcpy
7692:../src/wolfcrypt/src/aes.c ****         XMEMSET(counter + GCM_NONCE_MID_SZ, 0,
 9508                             		.loc 2 7692 9
 9509 004d 71 A5 14                		add	#20, r10, r5
 9510 0050 62 C5                   		add	#12, r5
 9511 0052 66 33                   		mov.L	#3, r3
 9512 0054 66 02                   		mov.L	#0, r2
 9513 0056 EF 51                   		mov.L	r5, r1
 9514 0058 05 00 00 00             		bsr	_memset
7693:../src/wolfcrypt/src/aes.c ****                                          AES_BLOCK_SIZE - GCM_NONCE_MID_SZ - 1);
7694:../src/wolfcrypt/src/aes.c ****         counter[AES_BLOCK_SIZE - 1] = 1;
 9515                             		.loc 2 7694 37
 9516 005c F9 A4 23 01             		mov.B	#1, 35[r10]
 9517 0060 2E 1B                   		bra	.L157
 9518                             	.L156:
7695:../src/wolfcrypt/src/aes.c ****     }
7696:../src/wolfcrypt/src/aes.c ****     else {
7697:../src/wolfcrypt/src/aes.c ****         /* Counter is GHASH of IV. */
7698:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
7699:../src/wolfcrypt/src/aes.c ****         word32 aadTemp = aes->aadLen;
7700:../src/wolfcrypt/src/aes.c ****         aes->aadLen = 0;
7701:../src/wolfcrypt/src/aes.c **** #endif
7702:../src/wolfcrypt/src/aes.c ****         GHASH(aes, NULL, 0, iv, ivSz, counter, AES_BLOCK_SIZE);
 9519                             		.loc 2 7702 9
 9520 0062 3E 02 10                		mov.L	#16, 8[r0]
 9521 0065 71 A5 14                		add	#20, r10, r5
 9522 0068 A0 0D                   		mov.L	r5, 4[r0]
 9523 006a A8 6D                   		mov.L	4[r6], r5
 9524 006c E3 05                   		mov.L	r5, [r0]
 9525 006e EC 64                   		mov.L	[r6], r4
 9526 0070 66 03                   		mov.L	#0, r3
 9527 0072 66 02                   		mov.L	#0, r2
 9528 0074 ED A1 11                		mov.L	68[r10], r1
 9529 0077 05 00 00 00             		bsr	_GHASH
 9530                             	.L157:
7703:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
7704:../src/wolfcrypt/src/aes.c ****         aes->aadLen = aadTemp;
7705:../src/wolfcrypt/src/aes.c **** #endif
7706:../src/wolfcrypt/src/aes.c ****     }
7707:../src/wolfcrypt/src/aes.c ****     XMEMCPY(initialCounter, counter, AES_BLOCK_SIZE);
 9531                             		.loc 2 7707 5
 9532 007b 75 44 10                		mov.L	#16, r4
 9533 007e 71 A5 24                		add	#36, r10, r5
 9534 0081 EF 51                   		mov.L	r5, r1
 9535 0083 71 A5 14                		add	#20, r10, r5
 9536 0086 EF 52                   		mov.L	r5, r2
 9537 0088 EF 43                   		mov.L	r4, r3
 9538 008a 7F 8F                   		smovf
7708:../src/wolfcrypt/src/aes.c **** 
7709:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_PIC32MZ_CRYPT
7710:../src/wolfcrypt/src/aes.c ****     if (blocks) {
7711:../src/wolfcrypt/src/aes.c ****         /* use initial IV for HW, but don't use it below */
7712:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->reg, counter, AES_BLOCK_SIZE);
7713:../src/wolfcrypt/src/aes.c **** 
7714:../src/wolfcrypt/src/aes.c ****         ret = wc_Pic32AesCrypt(
7715:../src/wolfcrypt/src/aes.c ****             aes->key, aes->keylen, aes->reg, AES_BLOCK_SIZE,
7716:../src/wolfcrypt/src/aes.c ****             out, in, (blocks * AES_BLOCK_SIZE),
7717:../src/wolfcrypt/src/aes.c ****             PIC32_ENCRYPTION, PIC32_ALGO_AES, PIC32_CRYPTOALGO_AES_GCM);
7718:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
7719:../src/wolfcrypt/src/aes.c ****             return ret;
7720:../src/wolfcrypt/src/aes.c ****     }
7721:../src/wolfcrypt/src/aes.c ****     /* process remainder using partial handling */
7722:../src/wolfcrypt/src/aes.c **** #endif
7723:../src/wolfcrypt/src/aes.c **** 
7724:../src/wolfcrypt/src/aes.c **** #if defined(HAVE_AES_ECB) && !defined(WOLFSSL_PIC32MZ_CRYPT)
7725:../src/wolfcrypt/src/aes.c ****     /* some hardware acceleration can gain performance from doing AES encryption
7726:../src/wolfcrypt/src/aes.c ****      * of the whole buffer at once */
7727:../src/wolfcrypt/src/aes.c ****     if (c != p && blocks > 0) { /* can not handle inline encryption */
7728:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
7729:../src/wolfcrypt/src/aes.c ****             IncrementGcmCounter(counter);
7730:../src/wolfcrypt/src/aes.c ****             XMEMCPY(c, counter, AES_BLOCK_SIZE);
7731:../src/wolfcrypt/src/aes.c ****             c += AES_BLOCK_SIZE;
7732:../src/wolfcrypt/src/aes.c ****         }
7733:../src/wolfcrypt/src/aes.c **** 
7734:../src/wolfcrypt/src/aes.c ****         /* reset number of blocks and then do encryption */
7735:../src/wolfcrypt/src/aes.c ****         blocks = sz / AES_BLOCK_SIZE;
7736:../src/wolfcrypt/src/aes.c ****         wc_AesEcbEncrypt(aes, out, out, AES_BLOCK_SIZE * blocks);
7737:../src/wolfcrypt/src/aes.c ****         xorbuf(out, p, AES_BLOCK_SIZE * blocks);
7738:../src/wolfcrypt/src/aes.c ****         p += AES_BLOCK_SIZE * blocks;
7739:../src/wolfcrypt/src/aes.c ****     }
7740:../src/wolfcrypt/src/aes.c ****     else
7741:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_ECB && !WOLFSSL_PIC32MZ_CRYPT */
7742:../src/wolfcrypt/src/aes.c ****     {
7743:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
 9539                             		.loc 2 7743 15
 9540 008c 2E 4C                   		bra	.L158
 9541                             	.L161:
7744:../src/wolfcrypt/src/aes.c ****             IncrementGcmCounter(counter);
 9542                             		.loc 2 7744 13
 9543 008e 71 A5 14                		add	#20, r10, r5
 9544 0091 EF 51                   		mov.L	r5, r1
 9545 0093 05 00 00 00             		bsr	_IncrementGcmCounter
7745:../src/wolfcrypt/src/aes.c ****         #if !defined(WOLFSSL_PIC32MZ_CRYPT)
7746:../src/wolfcrypt/src/aes.c ****             ret = wc_AesEncrypt(aes, counter, scratch);
 9546                             		.loc 2 7746 19
 9547 0097 71 A4 34                		add	#52, r10, r4
 9548 009a 71 A5 14                		add	#20, r10, r5
 9549 009d EF 43                   		mov.L	r4, r3
 9550 009f EF 52                   		mov.L	r5, r2
 9551 00a1 ED A1 11                		mov.L	68[r10], r1
 9552 00a4 05 00 00 00             		bsr	_wc_AesEncrypt
 9553 00a8 E3 A1                   		mov.L	r1, [r10]
7747:../src/wolfcrypt/src/aes.c ****             if (ret != 0)
 9554                             		.loc 2 7747 16
 9555 00aa EC A5                   		mov.L	[r10], r5
 9556 00ac 61 05                   		cmp	#0, r5
 9557 00ae 16                      		beq	.L159
7748:../src/wolfcrypt/src/aes.c ****                 return ret;
 9558                             		.loc 2 7748 24
 9559 00af EC A5                   		mov.L	[r10], r5
 9560 00b1 38 BF 00                		bra	.L166
 9561                             	.L159:
7749:../src/wolfcrypt/src/aes.c ****             xorbufout(c, scratch, p, AES_BLOCK_SIZE);
 9562                             		.loc 2 7749 13
 9563 00b4 71 A5 34                		add	#52, r10, r5
 9564 00b7 75 44 10                		mov.L	#16, r4
 9565 00ba ED A3 02                		mov.L	8[r10], r3
 9566 00bd EF 52                   		mov.L	r5, r2
 9567 00bf ED A1 03                		mov.L	12[r10], r1
 9568 00c2 05 00 00 00             		bsr	_xorbufout
7750:../src/wolfcrypt/src/aes.c ****         #endif
7751:../src/wolfcrypt/src/aes.c ****             p += AES_BLOCK_SIZE;
 9569                             		.loc 2 7751 15
 9570 00c6 ED A5 02                		mov.L	8[r10], r5
 9571 00c9 71 55 10                		add	#16, r5
 9572 00cc E7 A5 02                		mov.L	r5, 8[r10]
7752:../src/wolfcrypt/src/aes.c ****             c += AES_BLOCK_SIZE;
 9573                             		.loc 2 7752 15
 9574 00cf ED A5 03                		mov.L	12[r10], r5
 9575 00d2 71 55 10                		add	#16, r5
 9576 00d5 E7 A5 03                		mov.L	r5, 12[r10]
 9577                             	.L158:
7743:../src/wolfcrypt/src/aes.c ****             IncrementGcmCounter(counter);
 9578                             		.loc 2 7743 22
 9579 00d8 ED A5 01                		mov.L	4[r10], r5
 9580 00db 71 54 FF                		add	#-1, r5, r4
 9581 00de E7 A4 01                		mov.L	r4, 4[r10]
7743:../src/wolfcrypt/src/aes.c ****             IncrementGcmCounter(counter);
 9582                             		.loc 2 7743 15
 9583 00e1 61 05                   		cmp	#0, r5
 9584 00e3 21 AB                   		bne	.L161
7753:../src/wolfcrypt/src/aes.c ****         }
7754:../src/wolfcrypt/src/aes.c ****     }
7755:../src/wolfcrypt/src/aes.c **** 
7756:../src/wolfcrypt/src/aes.c ****     if (partial != 0) {
 9585                             		.loc 2 7756 8
 9586 00e5 ED A5 04                		mov.L	16[r10], r5
 9587 00e8 61 05                   		cmp	#0, r5
 9588 00ea 20 39                   		beq	.L162
7757:../src/wolfcrypt/src/aes.c ****         IncrementGcmCounter(counter);
 9589                             		.loc 2 7757 9
 9590 00ec 71 A5 14                		add	#20, r10, r5
 9591 00ef EF 51                   		mov.L	r5, r1
 9592 00f1 05 00 00 00             		bsr	_IncrementGcmCounter
7758:../src/wolfcrypt/src/aes.c ****         ret = wc_AesEncrypt(aes, counter, scratch);
 9593                             		.loc 2 7758 15
 9594 00f5 71 A4 34                		add	#52, r10, r4
 9595 00f8 71 A5 14                		add	#20, r10, r5
 9596 00fb EF 43                   		mov.L	r4, r3
 9597 00fd EF 52                   		mov.L	r5, r2
 9598 00ff ED A1 11                		mov.L	68[r10], r1
 9599 0102 05 00 00 00             		bsr	_wc_AesEncrypt
 9600 0106 E3 A1                   		mov.L	r1, [r10]
7759:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
 9601                             		.loc 2 7759 12
 9602 0108 EC A5                   		mov.L	[r10], r5
 9603 010a 61 05                   		cmp	#0, r5
 9604 010c 15                      		beq	.L163
7760:../src/wolfcrypt/src/aes.c ****             return ret;
 9605                             		.loc 2 7760 20
 9606 010d EC A5                   		mov.L	[r10], r5
 9607 010f 2E 61                   		bra	.L166
 9608                             	.L163:
7761:../src/wolfcrypt/src/aes.c ****         xorbufout(c, scratch, p, partial);
 9609                             		.loc 2 7761 9
 9610 0111 71 A5 34                		add	#52, r10, r5
 9611 0114 ED A4 04                		mov.L	16[r10], r4
 9612 0117 ED A3 02                		mov.L	8[r10], r3
 9613 011a EF 52                   		mov.L	r5, r2
 9614 011c ED A1 03                		mov.L	12[r10], r1
 9615 011f 05 00 00 00             		bsr	_xorbufout
 9616                             	.L162:
7762:../src/wolfcrypt/src/aes.c ****     }
7763:../src/wolfcrypt/src/aes.c ****     if (authTag) {
 9617                             		.loc 2 7763 8
 9618 0123 A8 E5                   		mov.L	8[r6], r5
 9619 0125 61 05                   		cmp	#0, r5
 9620 0127 20 46                   		beq	.L164
7764:../src/wolfcrypt/src/aes.c ****         GHASH(aes, authIn, authInSz, out, sz, authTag, authTagSz);
 9621                             		.loc 2 7764 9
 9622 0129 A8 ED                   		mov.L	12[r6], r5
 9623 012b A0 85                   		mov.L	r5, 8[r0]
 9624 012d A8 E5                   		mov.L	8[r6], r5
 9625 012f A0 0D                   		mov.L	r5, 4[r0]
 9626 0131 ED A5 14                		mov.L	80[r10], r5
 9627 0134 E3 05                   		mov.L	r5, [r0]
 9628 0136 ED A4 12                		mov.L	72[r10], r4
 9629 0139 A9 6B                   		mov.L	20[r6], r3
 9630 013b A9 62                   		mov.L	16[r6], r2
 9631 013d ED A1 11                		mov.L	68[r10], r1
 9632 0140 05 00 00 00             		bsr	_GHASH
7765:../src/wolfcrypt/src/aes.c ****         ret = wc_AesEncrypt(aes, initialCounter, scratch);
 9633                             		.loc 2 7765 15
 9634 0144 71 A4 34                		add	#52, r10, r4
 9635 0147 71 A5 24                		add	#36, r10, r5
 9636 014a EF 43                   		mov.L	r4, r3
 9637 014c EF 52                   		mov.L	r5, r2
 9638 014e ED A1 11                		mov.L	68[r10], r1
 9639 0151 05 00 00 00             		bsr	_wc_AesEncrypt
 9640 0155 E3 A1                   		mov.L	r1, [r10]
7766:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
 9641                             		.loc 2 7766 12
 9642 0157 EC A5                   		mov.L	[r10], r5
 9643 0159 61 05                   		cmp	#0, r5
 9644 015b 15                      		beq	.L165
7767:../src/wolfcrypt/src/aes.c ****             return ret;
 9645                             		.loc 2 7767 20
 9646 015c EC A5                   		mov.L	[r10], r5
 9647 015e 2E 12                   		bra	.L166
 9648                             	.L165:
7768:../src/wolfcrypt/src/aes.c ****         xorbuf(authTag, scratch, authTagSz);
 9649                             		.loc 2 7768 9
 9650 0160 71 A5 34                		add	#52, r10, r5
 9651 0163 A8 EB                   		mov.L	12[r6], r3
 9652 0165 EF 52                   		mov.L	r5, r2
 9653 0167 A8 E1                   		mov.L	8[r6], r1
 9654 0169 05 00 00 00             		bsr	_xorbuf
 9655                             	.L164:
7769:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
7770:../src/wolfcrypt/src/aes.c ****         if (!in && !sz)
7771:../src/wolfcrypt/src/aes.c ****             /* store AAD size for next call */
7772:../src/wolfcrypt/src/aes.c ****             aes->aadLen = authInSz;
7773:../src/wolfcrypt/src/aes.c **** #endif
7774:../src/wolfcrypt/src/aes.c ****     }
7775:../src/wolfcrypt/src/aes.c **** 
7776:../src/wolfcrypt/src/aes.c ****     return ret;
 9656                             		.loc 2 7776 12
 9657 016d EC A5                   		mov.L	[r10], r5
 9658 016f 03                      		.balign 8,3,1
 9659                             	.L166:
7777:../src/wolfcrypt/src/aes.c **** }
 9660                             		.loc 2 7777 1 discriminator 1
 9661 0170 EF 51                   		mov.L	r5, r1
 9662 0172 71 00 78                		add	#0x78, r0
 9663 0175 7E B6                   		pop	r6
 9664 0177 7E BA                   		pop	r10
 9665 0179 02                      		rts
 9666                             	.LFE58:
 9668 017a 74 10 01 00 00 00       		.section C,"a",@progbits
 9669                             		.p2align 2
 9670                             	.LC0:
 9671 0000 47 63 6D 45 6E 63 72 79 		.string	"GcmEncrypt authTagSz too small error"
 9671      70 74 20 61 75 74 68 54 
 9671      61 67 53 7A 20 74 6F 6F 
 9671      20 73 6D 61 6C 6C 20 65 
 9671      72 72 6F 72 00 
 9672 0025 00 00 00                		.section	.text.wc_AesGcmEncrypt,"ax",@progbits
 9673                             		.global	_wc_AesGcmEncrypt
 9675                             	_wc_AesGcmEncrypt:
 9676                             	.LFB59:
7778:../src/wolfcrypt/src/aes.c **** 
7779:../src/wolfcrypt/src/aes.c **** /* Software AES - GCM Encrypt */
7780:../src/wolfcrypt/src/aes.c **** int wc_AesGcmEncrypt(Aes* aes, byte* out, const byte* in, word32 sz,
7781:../src/wolfcrypt/src/aes.c ****                    const byte* iv, word32 ivSz,
7782:../src/wolfcrypt/src/aes.c ****                    byte* authTag, word32 authTagSz,
7783:../src/wolfcrypt/src/aes.c ****                    const byte* authIn, word32 authInSz)
7784:../src/wolfcrypt/src/aes.c **** {
 9677                             		.loc 2 7784 1
 9678 0000 7E AA                   		push.l	r10
 9679                             	.LCFI60:
 9680 0002 71 0A D8                		add	#-40, r0, r10
 9681                             	.LCFI61:
 9682 0005 71 A0 E8                		add	#-24, r10, r0
 9683                             	.LCFI62:
 9684 0008 75 45 30                		mov.L	#48, r5
 9685 000b 4B A5                   		add	r10, r5
 9686 000d E3 A1                   		mov.L	r1, [r10]
 9687 000f E7 A2 01                		mov.L	r2, 4[r10]
 9688 0012 E7 A3 02                		mov.L	r3, 8[r10]
 9689 0015 E7 A4 03                		mov.L	r4, 12[r10]
7785:../src/wolfcrypt/src/aes.c ****     /* argument checks */
7786:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || authTagSz > AES_BLOCK_SIZE || ivSz == 0) {
 9690                             		.loc 2 7786 8
 9691 0018 EC A4                   		mov.L	[r10], r4
 9692 001a 61 04                   		cmp	#0, r4
 9693 001c 20 0E                   		beq	.L168
 9694                             		.loc 2 7786 21 discriminator 1
 9695 001e A8 DC                   		mov.L	12[r5], r4
 9696 0020 75 54 10                		cmp	#16, r4
 9697 0023 24 07                   		bgtu	.L168
 9698                             		.loc 2 7786 51 discriminator 2
 9699 0025 A8 5C                   		mov.L	4[r5], r4
 9700 0027 61 04                   		cmp	#0, r4
 9701 0029 1F                      		bne	.L169
 9702                             	.L168:
7787:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
 9703                             		.loc 2 7787 16
 9704 002a FB 5A 53 FF             		mov.L	#-173, r5
 9705 002e 2E 41                   		bra	.L170
 9706                             	.L169:
7788:../src/wolfcrypt/src/aes.c ****     }
7789:../src/wolfcrypt/src/aes.c **** 
7790:../src/wolfcrypt/src/aes.c ****     if (authTagSz < WOLFSSL_MIN_AUTH_TAG_SZ) {
 9707                             		.loc 2 7790 8
 9708 0030 A8 DC                   		mov.L	12[r5], r4
 9709 0032 61 B4                   		cmp	#11, r4
 9710 0034 24 12                   		bgtu	.L171
7791:../src/wolfcrypt/src/aes.c ****         WOLFSSL_MSG("GcmEncrypt authTagSz too small error");
 9711                             		.loc 2 7791 9
 9712 0036 FB 12 00 00 00 00       		mov.L	#.LC0, r1
 9713 003c 05 00 00 00             		bsr	_WOLFSSL_MSG
7792:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
 9714                             		.loc 2 7792 16
 9715 0040 FB 5A 53 FF             		mov.L	#-173, r5
 9716 0044 2E 2B                   		bra	.L170
 9717                             	.L171:
7793:../src/wolfcrypt/src/aes.c ****     }
7794:../src/wolfcrypt/src/aes.c **** 
7795:../src/wolfcrypt/src/aes.c **** #ifdef WOLF_CRYPTO_CB
7796:../src/wolfcrypt/src/aes.c ****     if (aes->devId != INVALID_DEVID) {
7797:../src/wolfcrypt/src/aes.c ****         int crypto_cb_ret =
7798:../src/wolfcrypt/src/aes.c ****             wc_CryptoCb_AesGcmEncrypt(aes, out, in, sz, iv, ivSz, authTag,
7799:../src/wolfcrypt/src/aes.c ****                                       authTagSz, authIn, authInSz);
7800:../src/wolfcrypt/src/aes.c ****         if (crypto_cb_ret != CRYPTOCB_UNAVAILABLE)
7801:../src/wolfcrypt/src/aes.c ****             return crypto_cb_ret;
7802:../src/wolfcrypt/src/aes.c ****         /* fall-through when unavailable */
7803:../src/wolfcrypt/src/aes.c ****     }
7804:../src/wolfcrypt/src/aes.c **** #endif
7805:../src/wolfcrypt/src/aes.c **** 
7806:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_AES)
7807:../src/wolfcrypt/src/aes.c ****     /* if async and byte count above threshold */
7808:../src/wolfcrypt/src/aes.c ****     /* only 12-byte IV is supported in HW */
7809:../src/wolfcrypt/src/aes.c ****     if (aes->asyncDev.marker == WOLFSSL_ASYNC_MARKER_AES &&
7810:../src/wolfcrypt/src/aes.c ****                     sz >= WC_ASYNC_THRESH_AES_GCM && ivSz == GCM_NONCE_MID_SZ) {
7811:../src/wolfcrypt/src/aes.c ****     #if defined(HAVE_CAVIUM)
7812:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_CAVIUM_V
7813:../src/wolfcrypt/src/aes.c ****         if (authInSz == 20) { /* Nitrox V GCM is only working with 20 byte AAD */
7814:../src/wolfcrypt/src/aes.c ****             return NitroxAesGcmEncrypt(aes, out, in, sz,
7815:../src/wolfcrypt/src/aes.c ****                 (const byte*)aes->devKey, aes->keylen, iv, ivSz,
7816:../src/wolfcrypt/src/aes.c ****                 authTag, authTagSz, authIn, authInSz);
7817:../src/wolfcrypt/src/aes.c ****         }
7818:../src/wolfcrypt/src/aes.c ****         #endif
7819:../src/wolfcrypt/src/aes.c ****     #elif defined(HAVE_INTEL_QA)
7820:../src/wolfcrypt/src/aes.c ****         return IntelQaSymAesGcmEncrypt(&aes->asyncDev, out, in, sz,
7821:../src/wolfcrypt/src/aes.c ****             (const byte*)aes->devKey, aes->keylen, iv, ivSz,
7822:../src/wolfcrypt/src/aes.c ****             authTag, authTagSz, authIn, authInSz);
7823:../src/wolfcrypt/src/aes.c ****     #else /* WOLFSSL_ASYNC_CRYPT_TEST */
7824:../src/wolfcrypt/src/aes.c ****         if (wc_AsyncTestInit(&aes->asyncDev, ASYNC_TEST_AES_GCM_ENCRYPT)) {
7825:../src/wolfcrypt/src/aes.c ****             WC_ASYNC_TEST* testDev = &aes->asyncDev.test;
7826:../src/wolfcrypt/src/aes.c ****             testDev->aes.aes = aes;
7827:../src/wolfcrypt/src/aes.c ****             testDev->aes.out = out;
7828:../src/wolfcrypt/src/aes.c ****             testDev->aes.in = in;
7829:../src/wolfcrypt/src/aes.c ****             testDev->aes.sz = sz;
7830:../src/wolfcrypt/src/aes.c ****             testDev->aes.iv = iv;
7831:../src/wolfcrypt/src/aes.c ****             testDev->aes.ivSz = ivSz;
7832:../src/wolfcrypt/src/aes.c ****             testDev->aes.authTag = authTag;
7833:../src/wolfcrypt/src/aes.c ****             testDev->aes.authTagSz = authTagSz;
7834:../src/wolfcrypt/src/aes.c ****             testDev->aes.authIn = authIn;
7835:../src/wolfcrypt/src/aes.c ****             testDev->aes.authInSz = authInSz;
7836:../src/wolfcrypt/src/aes.c ****             return WC_PENDING_E;
7837:../src/wolfcrypt/src/aes.c ****         }
7838:../src/wolfcrypt/src/aes.c ****     #endif
7839:../src/wolfcrypt/src/aes.c ****     }
7840:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
7841:../src/wolfcrypt/src/aes.c **** 
7842:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SILABS_SE_ACCEL
7843:../src/wolfcrypt/src/aes.c ****     return wc_AesGcmEncrypt_silabs(
7844:../src/wolfcrypt/src/aes.c ****         aes, out, in, sz,
7845:../src/wolfcrypt/src/aes.c ****         iv, ivSz,
7846:../src/wolfcrypt/src/aes.c ****         authTag, authTagSz,
7847:../src/wolfcrypt/src/aes.c ****         authIn, authInSz);
7848:../src/wolfcrypt/src/aes.c **** #endif
7849:../src/wolfcrypt/src/aes.c **** 
7850:../src/wolfcrypt/src/aes.c **** #ifdef STM32_CRYPTO_AES_GCM
7851:../src/wolfcrypt/src/aes.c ****     return wc_AesGcmEncrypt_STM32(
7852:../src/wolfcrypt/src/aes.c ****         aes, out, in, sz, iv, ivSz,
7853:../src/wolfcrypt/src/aes.c ****         authTag, authTagSz, authIn, authInSz);
7854:../src/wolfcrypt/src/aes.c **** #endif /* STM32_CRYPTO_AES_GCM */
7855:../src/wolfcrypt/src/aes.c **** 
7856:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
7857:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_INTEL_AVX2
7858:../src/wolfcrypt/src/aes.c ****     if (IS_INTEL_AVX2(intel_flags)) {
7859:../src/wolfcrypt/src/aes.c ****         SAVE_VECTOR_REGISTERS(return _svr_ret;);
7860:../src/wolfcrypt/src/aes.c ****         AES_GCM_encrypt_avx2(in, out, authIn, iv, authTag, sz, authInSz, ivSz,
7861:../src/wolfcrypt/src/aes.c ****                                  authTagSz, (const byte*)aes->key, aes->rounds);
7862:../src/wolfcrypt/src/aes.c ****         RESTORE_VECTOR_REGISTERS();
7863:../src/wolfcrypt/src/aes.c ****         return 0;
7864:../src/wolfcrypt/src/aes.c ****     }
7865:../src/wolfcrypt/src/aes.c ****     else
7866:../src/wolfcrypt/src/aes.c ****     #endif
7867:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_INTEL_AVX1
7868:../src/wolfcrypt/src/aes.c ****     if (IS_INTEL_AVX1(intel_flags)) {
7869:../src/wolfcrypt/src/aes.c ****         SAVE_VECTOR_REGISTERS(return _svr_ret;);
7870:../src/wolfcrypt/src/aes.c ****         AES_GCM_encrypt_avx1(in, out, authIn, iv, authTag, sz, authInSz, ivSz,
7871:../src/wolfcrypt/src/aes.c ****                                  authTagSz, (const byte*)aes->key, aes->rounds);
7872:../src/wolfcrypt/src/aes.c ****         RESTORE_VECTOR_REGISTERS();
7873:../src/wolfcrypt/src/aes.c ****         return 0;
7874:../src/wolfcrypt/src/aes.c ****     }
7875:../src/wolfcrypt/src/aes.c ****     else
7876:../src/wolfcrypt/src/aes.c ****     #endif
7877:../src/wolfcrypt/src/aes.c ****     if (haveAESNI) {
7878:../src/wolfcrypt/src/aes.c ****         AES_GCM_encrypt(in, out, authIn, iv, authTag, sz, authInSz, ivSz,
7879:../src/wolfcrypt/src/aes.c ****                                  authTagSz, (const byte*)aes->key, aes->rounds);
7880:../src/wolfcrypt/src/aes.c ****         return 0;
7881:../src/wolfcrypt/src/aes.c ****     }
7882:../src/wolfcrypt/src/aes.c ****     else
7883:../src/wolfcrypt/src/aes.c **** #endif
7884:../src/wolfcrypt/src/aes.c ****     {
7885:../src/wolfcrypt/src/aes.c ****         return AES_GCM_encrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
 9718                             		.loc 2 7885 16
 9719 0046 A9 5C                   		mov.L	20[r5], r4
 9720 0048 A1 0C                   		mov.L	r4, 20[r0]
 9721 004a A9 54                   		mov.L	16[r5], r4
 9722 004c A1 04                   		mov.L	r4, 16[r0]
 9723 004e A8 DC                   		mov.L	12[r5], r4
 9724 0050 A0 8C                   		mov.L	r4, 12[r0]
 9725 0052 A8 D4                   		mov.L	8[r5], r4
 9726 0054 A0 84                   		mov.L	r4, 8[r0]
 9727 0056 A8 5C                   		mov.L	4[r5], r4
 9728 0058 A0 0C                   		mov.L	r4, 4[r0]
 9729 005a EC 55                   		mov.L	[r5], r5
 9730 005c E3 05                   		mov.L	r5, [r0]
 9731 005e ED A4 03                		mov.L	12[r10], r4
 9732 0061 ED A3 02                		mov.L	8[r10], r3
 9733 0064 ED A2 01                		mov.L	4[r10], r2
 9734 0067 EC A1                   		mov.L	[r10], r1
 9735 0069 05 00 00 00             		bsr	_AES_GCM_encrypt_C
 9736 006d EF 15                   		mov.L	r1, r5
 9737                             	.L170:
7886:../src/wolfcrypt/src/aes.c ****                                                               authIn, authInSz);
7887:../src/wolfcrypt/src/aes.c ****     }
7888:../src/wolfcrypt/src/aes.c **** }
 9738                             		.loc 2 7888 1
 9739 006f EF 51                   		mov.L	r5, r1
 9740 0071 3F AA 11                		rtsd	#68, r10-r10
 9741                             	.LFE59:
 9743                             		.section	.text.AES_GCM_decrypt_C,"ax",@progbits
 9745                             	_AES_GCM_decrypt_C:
 9746                             	.LFB60:
7889:../src/wolfcrypt/src/aes.c **** #endif
7890:../src/wolfcrypt/src/aes.c **** 
7891:../src/wolfcrypt/src/aes.c **** 
7892:../src/wolfcrypt/src/aes.c **** /* AES GCM Decrypt */
7893:../src/wolfcrypt/src/aes.c **** #if defined(HAVE_AES_DECRYPT) || defined(HAVE_AESGCM_DECRYPT)
7894:../src/wolfcrypt/src/aes.c **** #ifdef FREESCALE_LTC_AES_GCM
7895:../src/wolfcrypt/src/aes.c **** int  wc_AesGcmDecrypt(Aes* aes, byte* out, const byte* in, word32 sz,
7896:../src/wolfcrypt/src/aes.c ****                    const byte* iv, word32 ivSz,
7897:../src/wolfcrypt/src/aes.c ****                    const byte* authTag, word32 authTagSz,
7898:../src/wolfcrypt/src/aes.c ****                    const byte* authIn, word32 authInSz)
7899:../src/wolfcrypt/src/aes.c **** {
7900:../src/wolfcrypt/src/aes.c ****     int ret;
7901:../src/wolfcrypt/src/aes.c ****     word32 keySize;
7902:../src/wolfcrypt/src/aes.c ****     status_t status;
7903:../src/wolfcrypt/src/aes.c **** 
7904:../src/wolfcrypt/src/aes.c ****     /* argument checks */
7905:../src/wolfcrypt/src/aes.c ****     /* If the sz is non-zero, both in and out must be set. If sz is 0,
7906:../src/wolfcrypt/src/aes.c ****      * in and out are don't cares, as this is is the GMAC case. */
7907:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || iv == NULL || (sz != 0 && (in == NULL || out == NULL)) ||
7908:../src/wolfcrypt/src/aes.c ****         authTag == NULL || authTagSz > AES_BLOCK_SIZE || authTagSz == 0 ||
7909:../src/wolfcrypt/src/aes.c ****         ivSz == 0) {
7910:../src/wolfcrypt/src/aes.c **** 
7911:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
7912:../src/wolfcrypt/src/aes.c ****     }
7913:../src/wolfcrypt/src/aes.c **** 
7914:../src/wolfcrypt/src/aes.c ****     ret = wc_AesGetKeySize(aes, &keySize);
7915:../src/wolfcrypt/src/aes.c ****     if (ret != 0) {
7916:../src/wolfcrypt/src/aes.c ****         return ret;
7917:../src/wolfcrypt/src/aes.c ****     }
7918:../src/wolfcrypt/src/aes.c **** 
7919:../src/wolfcrypt/src/aes.c ****     status = wolfSSL_CryptHwMutexLock();
7920:../src/wolfcrypt/src/aes.c ****     if (status != 0)
7921:../src/wolfcrypt/src/aes.c ****         return status;
7922:../src/wolfcrypt/src/aes.c **** 
7923:../src/wolfcrypt/src/aes.c ****     status = LTC_AES_DecryptTagGcm(LTC_BASE, in, out, sz, iv, ivSz,
7924:../src/wolfcrypt/src/aes.c ****         authIn, authInSz, (byte*)aes->key, keySize, authTag, authTagSz);
7925:../src/wolfcrypt/src/aes.c ****     wolfSSL_CryptHwMutexUnLock();
7926:../src/wolfcrypt/src/aes.c **** 
7927:../src/wolfcrypt/src/aes.c ****     return (status == kStatus_Success) ? 0 : AES_GCM_AUTH_E;
7928:../src/wolfcrypt/src/aes.c **** }
7929:../src/wolfcrypt/src/aes.c **** 
7930:../src/wolfcrypt/src/aes.c **** #else
7931:../src/wolfcrypt/src/aes.c **** 
7932:../src/wolfcrypt/src/aes.c **** #ifdef STM32_CRYPTO_AES_GCM
7933:../src/wolfcrypt/src/aes.c **** /* this function supports inline decrypt */
7934:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int wc_AesGcmDecrypt_STM32(
7935:../src/wolfcrypt/src/aes.c ****                                   Aes* aes, byte* out,
7936:../src/wolfcrypt/src/aes.c ****                                   const byte* in, word32 sz,
7937:../src/wolfcrypt/src/aes.c ****                                   const byte* iv, word32 ivSz,
7938:../src/wolfcrypt/src/aes.c ****                                   const byte* authTag, word32 authTagSz,
7939:../src/wolfcrypt/src/aes.c ****                                   const byte* authIn, word32 authInSz)
7940:../src/wolfcrypt/src/aes.c **** {
7941:../src/wolfcrypt/src/aes.c ****     int ret;
7942:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_STM32_CUBEMX
7943:../src/wolfcrypt/src/aes.c ****     int status = HAL_OK;
7944:../src/wolfcrypt/src/aes.c ****     CRYP_HandleTypeDef hcryp;
7945:../src/wolfcrypt/src/aes.c ****     word32 blocks = sz / AES_BLOCK_SIZE;
7946:../src/wolfcrypt/src/aes.c **** #else
7947:../src/wolfcrypt/src/aes.c ****     int status = SUCCESS;
7948:../src/wolfcrypt/src/aes.c ****     word32 keyCopy[AES_256_KEY_SIZE/sizeof(word32)];
7949:../src/wolfcrypt/src/aes.c **** #endif
7950:../src/wolfcrypt/src/aes.c ****     word32 keySize;
7951:../src/wolfcrypt/src/aes.c ****     word32 partial = sz % AES_BLOCK_SIZE;
7952:../src/wolfcrypt/src/aes.c ****     word32 tag[AES_BLOCK_SIZE/sizeof(word32)];
7953:../src/wolfcrypt/src/aes.c ****     word32 tagExpected[AES_BLOCK_SIZE/sizeof(word32)];
7954:../src/wolfcrypt/src/aes.c ****     word32 partialBlock[AES_BLOCK_SIZE/sizeof(word32)];
7955:../src/wolfcrypt/src/aes.c ****     word32 ctr[AES_BLOCK_SIZE/sizeof(word32)];
7956:../src/wolfcrypt/src/aes.c ****     word32 authhdr[AES_BLOCK_SIZE/sizeof(word32)];
7957:../src/wolfcrypt/src/aes.c ****     byte* authInPadded = NULL;
7958:../src/wolfcrypt/src/aes.c ****     int authPadSz, wasAlloc = 0, tagComputed = 0;
7959:../src/wolfcrypt/src/aes.c **** 
7960:../src/wolfcrypt/src/aes.c ****     ret = wc_AesGetKeySize(aes, &keySize);
7961:../src/wolfcrypt/src/aes.c ****     if (ret != 0)
7962:../src/wolfcrypt/src/aes.c ****         return ret;
7963:../src/wolfcrypt/src/aes.c **** 
7964:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_STM32_CUBEMX
7965:../src/wolfcrypt/src/aes.c ****     ret = wc_Stm32_Aes_Init(aes, &hcryp);
7966:../src/wolfcrypt/src/aes.c ****     if (ret != 0)
7967:../src/wolfcrypt/src/aes.c ****         return ret;
7968:../src/wolfcrypt/src/aes.c **** #endif
7969:../src/wolfcrypt/src/aes.c **** 
7970:../src/wolfcrypt/src/aes.c ****     XMEMSET(ctr, 0, AES_BLOCK_SIZE);
7971:../src/wolfcrypt/src/aes.c ****     if (ivSz == GCM_NONCE_MID_SZ) {
7972:../src/wolfcrypt/src/aes.c ****         byte* pCtr = (byte*)ctr;
7973:../src/wolfcrypt/src/aes.c ****         XMEMCPY(ctr, iv, ivSz);
7974:../src/wolfcrypt/src/aes.c ****         pCtr[AES_BLOCK_SIZE - 1] = 1;
7975:../src/wolfcrypt/src/aes.c ****     }
7976:../src/wolfcrypt/src/aes.c ****     else {
7977:../src/wolfcrypt/src/aes.c ****         GHASH(aes, NULL, 0, iv, ivSz, (byte*)ctr, AES_BLOCK_SIZE);
7978:../src/wolfcrypt/src/aes.c ****     }
7979:../src/wolfcrypt/src/aes.c **** 
7980:../src/wolfcrypt/src/aes.c ****     /* Make copy of expected authTag, which could get corrupted in some
7981:../src/wolfcrypt/src/aes.c ****      * Cube HAL versions without proper partial block support.
7982:../src/wolfcrypt/src/aes.c ****      * For TLS blocks the authTag is after the output buffer, so save it */
7983:../src/wolfcrypt/src/aes.c ****     XMEMCPY(tagExpected, authTag, authTagSz);
7984:../src/wolfcrypt/src/aes.c **** 
7985:../src/wolfcrypt/src/aes.c ****     /* Authentication buffer - must be 4-byte multiple zero padded */
7986:../src/wolfcrypt/src/aes.c ****     authPadSz = authInSz % sizeof(word32);
7987:../src/wolfcrypt/src/aes.c ****     if (authPadSz != 0) {
7988:../src/wolfcrypt/src/aes.c ****         authPadSz = authInSz + sizeof(word32) - authPadSz;
7989:../src/wolfcrypt/src/aes.c ****     }
7990:../src/wolfcrypt/src/aes.c ****     else {
7991:../src/wolfcrypt/src/aes.c ****         authPadSz = authInSz;
7992:../src/wolfcrypt/src/aes.c ****     }
7993:../src/wolfcrypt/src/aes.c **** 
7994:../src/wolfcrypt/src/aes.c ****     /* for cases where hardware cannot be used for authTag calculate it */
7995:../src/wolfcrypt/src/aes.c ****     /* if IV is not 12 calculate GHASH using software */
7996:../src/wolfcrypt/src/aes.c ****     if (ivSz != GCM_NONCE_MID_SZ
7997:../src/wolfcrypt/src/aes.c ****     #ifndef CRYP_HEADERWIDTHUNIT_BYTE
7998:../src/wolfcrypt/src/aes.c ****         /* or harware that does not support partial block */
7999:../src/wolfcrypt/src/aes.c ****         || sz == 0 || partial != 0
8000:../src/wolfcrypt/src/aes.c ****     #endif
8001:../src/wolfcrypt/src/aes.c ****     #if !defined(CRYP_HEADERWIDTHUNIT_BYTE) && !defined(STM32_AESGCM_PARTIAL)
8002:../src/wolfcrypt/src/aes.c ****         /* or authIn is not a multiple of 4  */
8003:../src/wolfcrypt/src/aes.c ****         || authPadSz != authInSz
8004:../src/wolfcrypt/src/aes.c ****     #endif
8005:../src/wolfcrypt/src/aes.c ****     ) {
8006:../src/wolfcrypt/src/aes.c ****         GHASH(aes, authIn, authInSz, in, sz, (byte*)tag, sizeof(tag));
8007:../src/wolfcrypt/src/aes.c ****         ret = wc_AesEncrypt(aes, (byte*)ctr, (byte*)partialBlock);
8008:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
8009:../src/wolfcrypt/src/aes.c ****             return ret;
8010:../src/wolfcrypt/src/aes.c ****         xorbuf(tag, partialBlock, sizeof(tag));
8011:../src/wolfcrypt/src/aes.c ****         tagComputed = 1;
8012:../src/wolfcrypt/src/aes.c ****     }
8013:../src/wolfcrypt/src/aes.c **** 
8014:../src/wolfcrypt/src/aes.c ****     /* if using hardware for authentication tag make sure its aligned and zero padded */
8015:../src/wolfcrypt/src/aes.c ****     if (authPadSz != authInSz && !tagComputed) {
8016:../src/wolfcrypt/src/aes.c ****         if (authPadSz <= sizeof(authhdr)) {
8017:../src/wolfcrypt/src/aes.c ****             authInPadded = (byte*)authhdr;
8018:../src/wolfcrypt/src/aes.c ****         }
8019:../src/wolfcrypt/src/aes.c ****         else {
8020:../src/wolfcrypt/src/aes.c ****             authInPadded = (byte*)XMALLOC(authPadSz, aes->heap,
8021:../src/wolfcrypt/src/aes.c ****                 DYNAMIC_TYPE_TMP_BUFFER);
8022:../src/wolfcrypt/src/aes.c ****             if (authInPadded == NULL) {
8023:../src/wolfcrypt/src/aes.c ****                 wolfSSL_CryptHwMutexUnLock();
8024:../src/wolfcrypt/src/aes.c ****                 return MEMORY_E;
8025:../src/wolfcrypt/src/aes.c ****             }
8026:../src/wolfcrypt/src/aes.c ****             wasAlloc = 1;
8027:../src/wolfcrypt/src/aes.c ****         }
8028:../src/wolfcrypt/src/aes.c ****         XMEMSET(authInPadded, 0, authPadSz);
8029:../src/wolfcrypt/src/aes.c ****         XMEMCPY(authInPadded, authIn, authInSz);
8030:../src/wolfcrypt/src/aes.c ****     } else {
8031:../src/wolfcrypt/src/aes.c ****         authInPadded = (byte*)authIn;
8032:../src/wolfcrypt/src/aes.c ****     }
8033:../src/wolfcrypt/src/aes.c **** 
8034:../src/wolfcrypt/src/aes.c ****     /* Hardware requires counter + 1 */
8035:../src/wolfcrypt/src/aes.c ****     IncrementGcmCounter((byte*)ctr);
8036:../src/wolfcrypt/src/aes.c **** 
8037:../src/wolfcrypt/src/aes.c ****     ret = wolfSSL_CryptHwMutexLock();
8038:../src/wolfcrypt/src/aes.c ****     if (ret != 0) {
8039:../src/wolfcrypt/src/aes.c ****         return ret;
8040:../src/wolfcrypt/src/aes.c ****     }
8041:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_STM32_CUBEMX
8042:../src/wolfcrypt/src/aes.c ****     hcryp.Init.pInitVect = (STM_CRYPT_TYPE*)ctr;
8043:../src/wolfcrypt/src/aes.c ****     hcryp.Init.Header = (STM_CRYPT_TYPE*)authInPadded;
8044:../src/wolfcrypt/src/aes.c **** 
8045:../src/wolfcrypt/src/aes.c **** #if defined(STM32_HAL_V2)
8046:../src/wolfcrypt/src/aes.c ****     hcryp.Init.Algorithm = CRYP_AES_GCM;
8047:../src/wolfcrypt/src/aes.c ****     #ifdef CRYP_HEADERWIDTHUNIT_BYTE
8048:../src/wolfcrypt/src/aes.c ****     /* V2 with CRYP_HEADERWIDTHUNIT_BYTE uses byte size for header */
8049:../src/wolfcrypt/src/aes.c ****     hcryp.Init.HeaderSize = authInSz;
8050:../src/wolfcrypt/src/aes.c ****     #else
8051:../src/wolfcrypt/src/aes.c ****     hcryp.Init.HeaderSize = authPadSz/sizeof(word32);
8052:../src/wolfcrypt/src/aes.c ****     #endif
8053:../src/wolfcrypt/src/aes.c ****     #ifdef STM32_AESGCM_PARTIAL
8054:../src/wolfcrypt/src/aes.c ****     hcryp.Init.HeaderPadSize = authPadSz - authInSz;
8055:../src/wolfcrypt/src/aes.c ****     #endif
8056:../src/wolfcrypt/src/aes.c ****     #ifdef CRYP_KEYIVCONFIG_ONCE
8057:../src/wolfcrypt/src/aes.c ****     /* allows repeated calls to HAL_CRYP_Decrypt */
8058:../src/wolfcrypt/src/aes.c ****     hcryp.Init.KeyIVConfigSkip = CRYP_KEYIVCONFIG_ONCE;
8059:../src/wolfcrypt/src/aes.c ****     #endif
8060:../src/wolfcrypt/src/aes.c ****     ByteReverseWords(ctr, ctr, AES_BLOCK_SIZE);
8061:../src/wolfcrypt/src/aes.c ****     hcryp.Init.pInitVect = (STM_CRYPT_TYPE*)ctr;
8062:../src/wolfcrypt/src/aes.c ****     HAL_CRYP_Init(&hcryp);
8063:../src/wolfcrypt/src/aes.c **** 
8064:../src/wolfcrypt/src/aes.c ****     #ifndef CRYP_KEYIVCONFIG_ONCE
8065:../src/wolfcrypt/src/aes.c ****     status = HAL_CRYP_Decrypt(&hcryp, (uint32_t*)in,
8066:../src/wolfcrypt/src/aes.c ****         (blocks * AES_BLOCK_SIZE) + partial, (uint32_t*)out, STM32_HAL_TIMEOUT);
8067:../src/wolfcrypt/src/aes.c ****     #else
8068:../src/wolfcrypt/src/aes.c ****     /* GCM payload phase - blocks */
8069:../src/wolfcrypt/src/aes.c ****     if (blocks) {
8070:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYP_Decrypt(&hcryp, (uint32_t*)in,
8071:../src/wolfcrypt/src/aes.c ****             (blocks * AES_BLOCK_SIZE), (uint32_t*)out, STM32_HAL_TIMEOUT);
8072:../src/wolfcrypt/src/aes.c ****     }
8073:../src/wolfcrypt/src/aes.c ****     /* GCM payload phase - partial remainder */
8074:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK && (partial != 0 || blocks == 0)) {
8075:../src/wolfcrypt/src/aes.c ****         XMEMSET(partialBlock, 0, sizeof(partialBlock));
8076:../src/wolfcrypt/src/aes.c ****         XMEMCPY(partialBlock, in + (blocks * AES_BLOCK_SIZE), partial);
8077:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYP_Decrypt(&hcryp, (uint32_t*)partialBlock, partial,
8078:../src/wolfcrypt/src/aes.c **** (           uint32_t*)partialBlock, STM32_HAL_TIMEOUT);
8079:../src/wolfcrypt/src/aes.c ****         XMEMCPY(out + (blocks * AES_BLOCK_SIZE), partialBlock, partial);
8080:../src/wolfcrypt/src/aes.c ****     }
8081:../src/wolfcrypt/src/aes.c ****     #endif
8082:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK && !tagComputed) {
8083:../src/wolfcrypt/src/aes.c ****         /* Compute the authTag */
8084:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AESGCM_GenerateAuthTAG(&hcryp, (uint32_t*)tag,
8085:../src/wolfcrypt/src/aes.c ****             STM32_HAL_TIMEOUT);
8086:../src/wolfcrypt/src/aes.c ****     }
8087:../src/wolfcrypt/src/aes.c **** #elif defined(STM32_CRYPTO_AES_ONLY)
8088:../src/wolfcrypt/src/aes.c ****     /* Set the CRYP parameters */
8089:../src/wolfcrypt/src/aes.c ****     hcryp.Init.HeaderSize = authPadSz;
8090:../src/wolfcrypt/src/aes.c ****     if (authPadSz == 0)
8091:../src/wolfcrypt/src/aes.c ****         hcryp.Init.Header = NULL; /* cannot pass pointer when authIn == 0 */
8092:../src/wolfcrypt/src/aes.c ****     hcryp.Init.ChainingMode  = CRYP_CHAINMODE_AES_GCM_GMAC;
8093:../src/wolfcrypt/src/aes.c ****     hcryp.Init.OperatingMode = CRYP_ALGOMODE_DECRYPT;
8094:../src/wolfcrypt/src/aes.c ****     hcryp.Init.GCMCMACPhase  = CRYP_INIT_PHASE;
8095:../src/wolfcrypt/src/aes.c ****     HAL_CRYP_Init(&hcryp);
8096:../src/wolfcrypt/src/aes.c **** 
8097:../src/wolfcrypt/src/aes.c ****     /* GCM init phase */
8098:../src/wolfcrypt/src/aes.c ****     status = HAL_CRYPEx_AES_Auth(&hcryp, NULL, 0, NULL, STM32_HAL_TIMEOUT);
8099:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK) {
8100:../src/wolfcrypt/src/aes.c ****         /* GCM header phase */
8101:../src/wolfcrypt/src/aes.c ****         hcryp.Init.GCMCMACPhase = CRYP_HEADER_PHASE;
8102:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AES_Auth(&hcryp, NULL, 0, NULL, STM32_HAL_TIMEOUT);
8103:../src/wolfcrypt/src/aes.c ****     }
8104:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK) {
8105:../src/wolfcrypt/src/aes.c ****         /* GCM payload phase - blocks */
8106:../src/wolfcrypt/src/aes.c ****         hcryp.Init.GCMCMACPhase = CRYP_PAYLOAD_PHASE;
8107:../src/wolfcrypt/src/aes.c ****         if (blocks) {
8108:../src/wolfcrypt/src/aes.c ****             status = HAL_CRYPEx_AES_Auth(&hcryp, (byte*)in,
8109:../src/wolfcrypt/src/aes.c ****                 (blocks * AES_BLOCK_SIZE), out, STM32_HAL_TIMEOUT);
8110:../src/wolfcrypt/src/aes.c ****         }
8111:../src/wolfcrypt/src/aes.c ****     }
8112:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK && (partial != 0 || (sz > 0 && blocks == 0))) {
8113:../src/wolfcrypt/src/aes.c ****         /* GCM payload phase - partial remainder */
8114:../src/wolfcrypt/src/aes.c ****         XMEMSET(partialBlock, 0, sizeof(partialBlock));
8115:../src/wolfcrypt/src/aes.c ****         XMEMCPY(partialBlock, in + (blocks * AES_BLOCK_SIZE), partial);
8116:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AES_Auth(&hcryp, (byte*)partialBlock, partial,
8117:../src/wolfcrypt/src/aes.c ****             (byte*)partialBlock, STM32_HAL_TIMEOUT);
8118:../src/wolfcrypt/src/aes.c ****         XMEMCPY(out + (blocks * AES_BLOCK_SIZE), partialBlock, partial);
8119:../src/wolfcrypt/src/aes.c ****     }
8120:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK && tagComputed == 0) {
8121:../src/wolfcrypt/src/aes.c ****         /* GCM final phase */
8122:../src/wolfcrypt/src/aes.c ****         hcryp.Init.GCMCMACPhase = CRYP_FINAL_PHASE;
8123:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AES_Auth(&hcryp, NULL, sz, (byte*)tag, STM32_HAL_TIMEOUT);
8124:../src/wolfcrypt/src/aes.c ****     }
8125:../src/wolfcrypt/src/aes.c **** #else
8126:../src/wolfcrypt/src/aes.c ****     hcryp.Init.HeaderSize = authPadSz;
8127:../src/wolfcrypt/src/aes.c ****     HAL_CRYP_Init(&hcryp);
8128:../src/wolfcrypt/src/aes.c ****     if (blocks) {
8129:../src/wolfcrypt/src/aes.c ****         /* GCM payload phase - blocks */
8130:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AESGCM_Decrypt(&hcryp, (byte*)in,
8131:../src/wolfcrypt/src/aes.c ****             (blocks * AES_BLOCK_SIZE), out, STM32_HAL_TIMEOUT);
8132:../src/wolfcrypt/src/aes.c ****     }
8133:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK && (partial != 0 || blocks == 0)) {
8134:../src/wolfcrypt/src/aes.c ****         /* GCM payload phase - partial remainder */
8135:../src/wolfcrypt/src/aes.c ****         XMEMSET(partialBlock, 0, sizeof(partialBlock));
8136:../src/wolfcrypt/src/aes.c ****         XMEMCPY(partialBlock, in + (blocks * AES_BLOCK_SIZE), partial);
8137:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AESGCM_Decrypt(&hcryp, (byte*)partialBlock, partial,
8138:../src/wolfcrypt/src/aes.c ****             (byte*)partialBlock, STM32_HAL_TIMEOUT);
8139:../src/wolfcrypt/src/aes.c ****         XMEMCPY(out + (blocks * AES_BLOCK_SIZE), partialBlock, partial);
8140:../src/wolfcrypt/src/aes.c ****     }
8141:../src/wolfcrypt/src/aes.c ****     if (status == HAL_OK && tagComputed == 0) {
8142:../src/wolfcrypt/src/aes.c ****         /* Compute the authTag */
8143:../src/wolfcrypt/src/aes.c ****         status = HAL_CRYPEx_AESGCM_Finish(&hcryp, sz, (byte*)tag, STM32_HAL_TIMEOUT);
8144:../src/wolfcrypt/src/aes.c ****     }
8145:../src/wolfcrypt/src/aes.c **** #endif
8146:../src/wolfcrypt/src/aes.c **** 
8147:../src/wolfcrypt/src/aes.c ****     if (status != HAL_OK)
8148:../src/wolfcrypt/src/aes.c ****         ret = AES_GCM_AUTH_E;
8149:../src/wolfcrypt/src/aes.c **** 
8150:../src/wolfcrypt/src/aes.c ****     HAL_CRYP_DeInit(&hcryp);
8151:../src/wolfcrypt/src/aes.c **** 
8152:../src/wolfcrypt/src/aes.c **** #else /* Standard Peripheral Library */
8153:../src/wolfcrypt/src/aes.c ****     ByteReverseWords(keyCopy, (word32*)aes->key, aes->keylen);
8154:../src/wolfcrypt/src/aes.c **** 
8155:../src/wolfcrypt/src/aes.c ****     /* Input size and auth size need to be the actual sizes, even though
8156:../src/wolfcrypt/src/aes.c ****      * they are not block aligned, because this length (in bits) is used
8157:../src/wolfcrypt/src/aes.c ****      * in the final GHASH. */
8158:../src/wolfcrypt/src/aes.c ****     XMEMSET(partialBlock, 0, sizeof(partialBlock)); /* use this to get tag */
8159:../src/wolfcrypt/src/aes.c ****     status = CRYP_AES_GCM(MODE_DECRYPT, (uint8_t*)ctr,
8160:../src/wolfcrypt/src/aes.c ****                          (uint8_t*)keyCopy,      keySize * 8,
8161:../src/wolfcrypt/src/aes.c ****                          (uint8_t*)in,           sz,
8162:../src/wolfcrypt/src/aes.c ****                          (uint8_t*)authInPadded, authInSz,
8163:../src/wolfcrypt/src/aes.c ****                          (uint8_t*)out,          (uint8_t*)partialBlock);
8164:../src/wolfcrypt/src/aes.c ****     if (status != SUCCESS)
8165:../src/wolfcrypt/src/aes.c ****         ret = AES_GCM_AUTH_E;
8166:../src/wolfcrypt/src/aes.c ****     if (tagComputed == 0)
8167:../src/wolfcrypt/src/aes.c ****         XMEMCPY(tag, partialBlock, authTagSz);
8168:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_STM32_CUBEMX */
8169:../src/wolfcrypt/src/aes.c ****     wolfSSL_CryptHwMutexUnLock();
8170:../src/wolfcrypt/src/aes.c **** 
8171:../src/wolfcrypt/src/aes.c ****     /* Check authentication tag */
8172:../src/wolfcrypt/src/aes.c ****     if (ConstantCompare((const byte*)tagExpected, (byte*)tag, authTagSz) != 0) {
8173:../src/wolfcrypt/src/aes.c ****         ret = AES_GCM_AUTH_E;
8174:../src/wolfcrypt/src/aes.c ****     }
8175:../src/wolfcrypt/src/aes.c **** 
8176:../src/wolfcrypt/src/aes.c ****     /* Free memory */
8177:../src/wolfcrypt/src/aes.c ****     if (wasAlloc) {
8178:../src/wolfcrypt/src/aes.c ****         XFREE(authInPadded, aes->heap, DYNAMIC_TYPE_TMP_BUFFER);
8179:../src/wolfcrypt/src/aes.c ****     }
8180:../src/wolfcrypt/src/aes.c **** 
8181:../src/wolfcrypt/src/aes.c ****     return ret;
8182:../src/wolfcrypt/src/aes.c **** }
8183:../src/wolfcrypt/src/aes.c **** 
8184:../src/wolfcrypt/src/aes.c **** #endif /* STM32_CRYPTO_AES_GCM */
8185:../src/wolfcrypt/src/aes.c **** 
8186:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
8187:../src/wolfcrypt/src/aes.c **** /* For performance reasons, this code needs to be not inlined. */
8188:../src/wolfcrypt/src/aes.c **** int WARN_UNUSED_RESULT AES_GCM_decrypt_C(
8189:../src/wolfcrypt/src/aes.c ****                       Aes* aes, byte* out, const byte* in, word32 sz,
8190:../src/wolfcrypt/src/aes.c ****                       const byte* iv, word32 ivSz,
8191:../src/wolfcrypt/src/aes.c ****                       const byte* authTag, word32 authTagSz,
8192:../src/wolfcrypt/src/aes.c ****                       const byte* authIn, word32 authInSz);
8193:../src/wolfcrypt/src/aes.c **** #else
8194:../src/wolfcrypt/src/aes.c **** static
8195:../src/wolfcrypt/src/aes.c **** #endif
8196:../src/wolfcrypt/src/aes.c **** int WARN_UNUSED_RESULT AES_GCM_decrypt_C(
8197:../src/wolfcrypt/src/aes.c ****                       Aes* aes, byte* out, const byte* in, word32 sz,
8198:../src/wolfcrypt/src/aes.c ****                       const byte* iv, word32 ivSz,
8199:../src/wolfcrypt/src/aes.c ****                       const byte* authTag, word32 authTagSz,
8200:../src/wolfcrypt/src/aes.c ****                       const byte* authIn, word32 authInSz)
8201:../src/wolfcrypt/src/aes.c **** {
 9747                             		.loc 2 8201 1
 9748 0000 7E AA                   		push.l	r10
 9749                             	.LCFI63:
 9750 0002 7E A6                   		push.l	r6
 9751                             	.LCFI64:
 9752 0004 71 0A 80                		add	#-128, r0, r10
 9753                             	.LCFI65:
 9754 0007 71 A0 F4                		add	#-12, r10, r0
 9755                             	.LCFI66:
 9756 000a 75 46 8C                		mov.L	#0x8c, r6
 9757 000d 4B A6                   		add	r10, r6
 9758 000f E7 A1 16                		mov.L	r1, 88[r10]
 9759 0012 E7 A2 17                		mov.L	r2, 92[r10]
 9760 0015 E7 A3 18                		mov.L	r3, 96[r10]
 9761 0018 E7 A4 19                		mov.L	r4, 100[r10]
8202:../src/wolfcrypt/src/aes.c ****     int ret = 0;
 9762                             		.loc 2 8202 9
 9763 001b F8 A6 00                		mov.L	#0, [r10]
8203:../src/wolfcrypt/src/aes.c ****     word32 blocks = sz / AES_BLOCK_SIZE;
 9764                             		.loc 2 8203 12
 9765 001e ED A5 19                		mov.L	100[r10], r5
 9766 0021 68 45                   		shlr	#4, r5
 9767 0023 E7 A5 01                		mov.L	r5, 4[r10]
8204:../src/wolfcrypt/src/aes.c ****     word32 partial = sz % AES_BLOCK_SIZE;
 9768                             		.loc 2 8204 12
 9769 0026 ED A5 19                		mov.L	100[r10], r5
 9770 0029 64 F5                   		and	#15, r5
 9771 002b E7 A5 04                		mov.L	r5, 16[r10]
8205:../src/wolfcrypt/src/aes.c ****     const byte* c = in;
 9772                             		.loc 2 8205 17
 9773 002e ED A5 18                		mov.L	96[r10], r5
 9774 0031 E7 A5 02                		mov.L	r5, 8[r10]
8206:../src/wolfcrypt/src/aes.c ****     byte* p = out;
 9775                             		.loc 2 8206 11
 9776 0034 ED A5 17                		mov.L	92[r10], r5
 9777 0037 E7 A5 03                		mov.L	r5, 12[r10]
8207:../src/wolfcrypt/src/aes.c ****     ALIGN32 byte counter[AES_BLOCK_SIZE];
8208:../src/wolfcrypt/src/aes.c ****     ALIGN32 byte scratch[AES_BLOCK_SIZE];
8209:../src/wolfcrypt/src/aes.c ****     ALIGN32 byte Tprime[AES_BLOCK_SIZE];
8210:../src/wolfcrypt/src/aes.c ****     ALIGN32 byte EKY0[AES_BLOCK_SIZE];
8211:../src/wolfcrypt/src/aes.c ****     sword32 res;
8212:../src/wolfcrypt/src/aes.c **** 
8213:../src/wolfcrypt/src/aes.c ****     if (ivSz == GCM_NONCE_MID_SZ) {
 9778                             		.loc 2 8213 8
 9779 003a A8 6D                   		mov.L	4[r6], r5
 9780 003c 61 C5                   		cmp	#12, r5
 9781 003e 21 24                   		bne	.L173
8214:../src/wolfcrypt/src/aes.c ****         /* Counter is IV with bottom 4 bytes set to: 0x00,0x00,0x00,0x01. */
8215:../src/wolfcrypt/src/aes.c ****         XMEMCPY(counter, iv, ivSz);
 9782                             		.loc 2 8215 9
 9783 0040 71 A5 18                		add	#24, r10, r5
 9784 0043 A8 6B                   		mov.L	4[r6], r3
 9785 0045 EC 62                   		mov.L	[r6], r2
 9786 0047 EF 51                   		mov.L	r5, r1
 9787 0049 05 00 00 00             		bsr	_memcpy
8216:../src/wolfcrypt/src/aes.c ****         XMEMSET(counter + GCM_NONCE_MID_SZ, 0,
 9788                             		.loc 2 8216 9
 9789 004d 71 A5 18                		add	#24, r10, r5
 9790 0050 62 C5                   		add	#12, r5
 9791 0052 66 33                   		mov.L	#3, r3
 9792 0054 66 02                   		mov.L	#0, r2
 9793 0056 EF 51                   		mov.L	r5, r1
 9794 0058 05 00 00 00             		bsr	_memset
8217:../src/wolfcrypt/src/aes.c ****                                          AES_BLOCK_SIZE - GCM_NONCE_MID_SZ - 1);
8218:../src/wolfcrypt/src/aes.c ****         counter[AES_BLOCK_SIZE - 1] = 1;
 9795                             		.loc 2 8218 37
 9796 005c F9 A4 27 01             		mov.B	#1, 39[r10]
 9797 0060 2E 1B                   		bra	.L174
 9798                             	.L173:
8219:../src/wolfcrypt/src/aes.c ****     }
8220:../src/wolfcrypt/src/aes.c ****     else {
8221:../src/wolfcrypt/src/aes.c ****         /* Counter is GHASH of IV. */
8222:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
8223:../src/wolfcrypt/src/aes.c ****         word32 aadTemp = aes->aadLen;
8224:../src/wolfcrypt/src/aes.c ****         aes->aadLen = 0;
8225:../src/wolfcrypt/src/aes.c **** #endif
8226:../src/wolfcrypt/src/aes.c ****         GHASH(aes, NULL, 0, iv, ivSz, counter, AES_BLOCK_SIZE);
 9799                             		.loc 2 8226 9
 9800 0062 3E 02 10                		mov.L	#16, 8[r0]
 9801 0065 71 A5 18                		add	#24, r10, r5
 9802 0068 A0 0D                   		mov.L	r5, 4[r0]
 9803 006a A8 6D                   		mov.L	4[r6], r5
 9804 006c E3 05                   		mov.L	r5, [r0]
 9805 006e EC 64                   		mov.L	[r6], r4
 9806 0070 66 03                   		mov.L	#0, r3
 9807 0072 66 02                   		mov.L	#0, r2
 9808 0074 ED A1 16                		mov.L	88[r10], r1
 9809 0077 05 00 00 00             		bsr	_GHASH
 9810                             	.L174:
8227:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
8228:../src/wolfcrypt/src/aes.c ****         aes->aadLen = aadTemp;
8229:../src/wolfcrypt/src/aes.c **** #endif
8230:../src/wolfcrypt/src/aes.c ****     }
8231:../src/wolfcrypt/src/aes.c **** 
8232:../src/wolfcrypt/src/aes.c ****     /* Calc the authTag again using received auth data and the cipher text */
8233:../src/wolfcrypt/src/aes.c ****     GHASH(aes, authIn, authInSz, in, sz, Tprime, sizeof(Tprime));
 9811                             		.loc 2 8233 5
 9812 007b 3E 02 10                		mov.L	#16, 8[r0]
 9813 007e 71 A5 38                		add	#56, r10, r5
 9814 0081 A0 0D                   		mov.L	r5, 4[r0]
 9815 0083 ED A5 19                		mov.L	100[r10], r5
 9816 0086 E3 05                   		mov.L	r5, [r0]
 9817 0088 ED A4 18                		mov.L	96[r10], r4
 9818 008b A9 6B                   		mov.L	20[r6], r3
 9819 008d A9 62                   		mov.L	16[r6], r2
 9820 008f ED A1 16                		mov.L	88[r10], r1
 9821 0092 05 00 00 00             		bsr	_GHASH
8234:../src/wolfcrypt/src/aes.c ****     ret = wc_AesEncrypt(aes, counter, EKY0);
 9822                             		.loc 2 8234 11
 9823 0096 71 A4 48                		add	#0x48, r10, r4
 9824 0099 71 A5 18                		add	#24, r10, r5
 9825 009c EF 43                   		mov.L	r4, r3
 9826 009e EF 52                   		mov.L	r5, r2
 9827 00a0 ED A1 16                		mov.L	88[r10], r1
 9828 00a3 05 00 00 00             		bsr	_wc_AesEncrypt
 9829 00a7 E3 A1                   		mov.L	r1, [r10]
8235:../src/wolfcrypt/src/aes.c ****     if (ret != 0)
 9830                             		.loc 2 8235 8
 9831 00a9 EC A5                   		mov.L	[r10], r5
 9832 00ab 61 05                   		cmp	#0, r5
 9833 00ad 16                      		beq	.L175
8236:../src/wolfcrypt/src/aes.c ****         return ret;
 9834                             		.loc 2 8236 16
 9835 00ae EC A5                   		mov.L	[r10], r5
 9836 00b0 38 EB 00                		bra	.L182
 9837                             	.L175:
8237:../src/wolfcrypt/src/aes.c ****     xorbuf(Tprime, EKY0, sizeof(Tprime));
 9838                             		.loc 2 8237 5
 9839 00b3 71 A4 48                		add	#0x48, r10, r4
 9840 00b6 71 A5 38                		add	#56, r10, r5
 9841 00b9 75 43 10                		mov.L	#16, r3
 9842 00bc EF 42                   		mov.L	r4, r2
 9843 00be EF 51                   		mov.L	r5, r1
 9844 00c0 05 00 00 00             		bsr	_xorbuf
8238:../src/wolfcrypt/src/aes.c **** 
8239:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
8240:../src/wolfcrypt/src/aes.c ****     if (!out) {
8241:../src/wolfcrypt/src/aes.c ****         /* authenticated, non-confidential data */
8242:../src/wolfcrypt/src/aes.c ****         /* store AAD size for next call */
8243:../src/wolfcrypt/src/aes.c ****         aes->aadLen = authInSz;
8244:../src/wolfcrypt/src/aes.c ****     }
8245:../src/wolfcrypt/src/aes.c **** #endif
8246:../src/wolfcrypt/src/aes.c **** 
8247:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_PIC32MZ_CRYPT)
8248:../src/wolfcrypt/src/aes.c ****     if (blocks) {
8249:../src/wolfcrypt/src/aes.c ****         /* use initial IV for HW, but don't use it below */
8250:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->reg, counter, AES_BLOCK_SIZE);
8251:../src/wolfcrypt/src/aes.c **** 
8252:../src/wolfcrypt/src/aes.c ****         ret = wc_Pic32AesCrypt(
8253:../src/wolfcrypt/src/aes.c ****             aes->key, aes->keylen, aes->reg, AES_BLOCK_SIZE,
8254:../src/wolfcrypt/src/aes.c ****             out, in, (blocks * AES_BLOCK_SIZE),
8255:../src/wolfcrypt/src/aes.c ****             PIC32_DECRYPTION, PIC32_ALGO_AES, PIC32_CRYPTOALGO_AES_GCM);
8256:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
8257:../src/wolfcrypt/src/aes.c ****             return ret;
8258:../src/wolfcrypt/src/aes.c ****     }
8259:../src/wolfcrypt/src/aes.c ****     /* process remainder using partial handling */
8260:../src/wolfcrypt/src/aes.c **** #endif
8261:../src/wolfcrypt/src/aes.c **** 
8262:../src/wolfcrypt/src/aes.c **** #if defined(HAVE_AES_ECB) && !defined(WOLFSSL_PIC32MZ_CRYPT)
8263:../src/wolfcrypt/src/aes.c ****     /* some hardware acceleration can gain performance from doing AES encryption
8264:../src/wolfcrypt/src/aes.c ****      * of the whole buffer at once */
8265:../src/wolfcrypt/src/aes.c ****     if (c != p && blocks > 0) { /* can not handle inline decryption */
8266:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
8267:../src/wolfcrypt/src/aes.c ****             IncrementGcmCounter(counter);
8268:../src/wolfcrypt/src/aes.c ****             XMEMCPY(p, counter, AES_BLOCK_SIZE);
8269:../src/wolfcrypt/src/aes.c ****             p += AES_BLOCK_SIZE;
8270:../src/wolfcrypt/src/aes.c ****         }
8271:../src/wolfcrypt/src/aes.c **** 
8272:../src/wolfcrypt/src/aes.c ****         /* reset number of blocks and then do encryption */
8273:../src/wolfcrypt/src/aes.c ****         blocks = sz / AES_BLOCK_SIZE;
8274:../src/wolfcrypt/src/aes.c **** 
8275:../src/wolfcrypt/src/aes.c ****         wc_AesEcbEncrypt(aes, out, out, AES_BLOCK_SIZE * blocks);
8276:../src/wolfcrypt/src/aes.c ****         xorbuf(out, c, AES_BLOCK_SIZE * blocks);
8277:../src/wolfcrypt/src/aes.c ****         c += AES_BLOCK_SIZE * blocks;
8278:../src/wolfcrypt/src/aes.c ****     }
8279:../src/wolfcrypt/src/aes.c ****     else
8280:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_ECB && !PIC32MZ */
8281:../src/wolfcrypt/src/aes.c ****     {
8282:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
 9845                             		.loc 2 8282 15
 9846 00c4 2E 4C                   		bra	.L177
 9847                             	.L179:
8283:../src/wolfcrypt/src/aes.c ****             IncrementGcmCounter(counter);
 9848                             		.loc 2 8283 13
 9849 00c6 71 A5 18                		add	#24, r10, r5
 9850 00c9 EF 51                   		mov.L	r5, r1
 9851 00cb 05 00 00 00             		bsr	_IncrementGcmCounter
8284:../src/wolfcrypt/src/aes.c ****         #if !defined(WOLFSSL_PIC32MZ_CRYPT)
8285:../src/wolfcrypt/src/aes.c ****             ret = wc_AesEncrypt(aes, counter, scratch);
 9852                             		.loc 2 8285 19
 9853 00cf 71 A4 28                		add	#40, r10, r4
 9854 00d2 71 A5 18                		add	#24, r10, r5
 9855 00d5 EF 43                   		mov.L	r4, r3
 9856 00d7 EF 52                   		mov.L	r5, r2
 9857 00d9 ED A1 16                		mov.L	88[r10], r1
 9858 00dc 05 00 00 00             		bsr	_wc_AesEncrypt
 9859 00e0 E3 A1                   		mov.L	r1, [r10]
8286:../src/wolfcrypt/src/aes.c ****             if (ret != 0)
 9860                             		.loc 2 8286 16
 9861 00e2 EC A5                   		mov.L	[r10], r5
 9862 00e4 61 05                   		cmp	#0, r5
 9863 00e6 16                      		beq	.L178
8287:../src/wolfcrypt/src/aes.c ****                 return ret;
 9864                             		.loc 2 8287 24
 9865 00e7 EC A5                   		mov.L	[r10], r5
 9866 00e9 38 B2 00                		bra	.L182
 9867                             	.L178:
8288:../src/wolfcrypt/src/aes.c ****             xorbufout(p, scratch, c, AES_BLOCK_SIZE);
 9868                             		.loc 2 8288 13
 9869 00ec 71 A5 28                		add	#40, r10, r5
 9870 00ef 75 44 10                		mov.L	#16, r4
 9871 00f2 ED A3 02                		mov.L	8[r10], r3
 9872 00f5 EF 52                   		mov.L	r5, r2
 9873 00f7 ED A1 03                		mov.L	12[r10], r1
 9874 00fa 05 00 00 00             		bsr	_xorbufout
8289:../src/wolfcrypt/src/aes.c ****         #endif
8290:../src/wolfcrypt/src/aes.c ****             p += AES_BLOCK_SIZE;
 9875                             		.loc 2 8290 15
 9876 00fe ED A5 03                		mov.L	12[r10], r5
 9877 0101 71 55 10                		add	#16, r5
 9878 0104 E7 A5 03                		mov.L	r5, 12[r10]
8291:../src/wolfcrypt/src/aes.c ****             c += AES_BLOCK_SIZE;
 9879                             		.loc 2 8291 15
 9880 0107 ED A5 02                		mov.L	8[r10], r5
 9881 010a 71 55 10                		add	#16, r5
 9882 010d E7 A5 02                		mov.L	r5, 8[r10]
 9883                             	.L177:
8282:../src/wolfcrypt/src/aes.c ****             IncrementGcmCounter(counter);
 9884                             		.loc 2 8282 22
 9885 0110 ED A5 01                		mov.L	4[r10], r5
 9886 0113 71 54 FF                		add	#-1, r5, r4
 9887 0116 E7 A4 01                		mov.L	r4, 4[r10]
8282:../src/wolfcrypt/src/aes.c ****             IncrementGcmCounter(counter);
 9888                             		.loc 2 8282 15
 9889 0119 61 05                   		cmp	#0, r5
 9890 011b 21 AB                   		bne	.L179
8292:../src/wolfcrypt/src/aes.c ****         }
8293:../src/wolfcrypt/src/aes.c ****     }
8294:../src/wolfcrypt/src/aes.c **** 
8295:../src/wolfcrypt/src/aes.c ****     if (partial != 0) {
 9891                             		.loc 2 8295 8
 9892 011d ED A5 04                		mov.L	16[r10], r5
 9893 0120 61 05                   		cmp	#0, r5
 9894 0122 20 45                   		beq	.L180
8296:../src/wolfcrypt/src/aes.c ****         IncrementGcmCounter(counter);
 9895                             		.loc 2 8296 9
 9896 0124 71 A5 18                		add	#24, r10, r5
 9897 0127 EF 51                   		mov.L	r5, r1
 9898 0129 05 00 00 00             		bsr	_IncrementGcmCounter
8297:../src/wolfcrypt/src/aes.c ****         ret = wc_AesEncrypt(aes, counter, scratch);
 9899                             		.loc 2 8297 15
 9900 012d 71 A4 28                		add	#40, r10, r4
 9901 0130 71 A5 18                		add	#24, r10, r5
 9902 0133 EF 43                   		mov.L	r4, r3
 9903 0135 EF 52                   		mov.L	r5, r2
 9904 0137 ED A1 16                		mov.L	88[r10], r1
 9905 013a 05 00 00 00             		bsr	_wc_AesEncrypt
 9906 013e E3 A1                   		mov.L	r1, [r10]
8298:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
 9907                             		.loc 2 8298 12
 9908 0140 EC A5                   		mov.L	[r10], r5
 9909 0142 61 05                   		cmp	#0, r5
 9910 0144 15                      		beq	.L181
8299:../src/wolfcrypt/src/aes.c ****             return ret;
 9911                             		.loc 2 8299 20
 9912 0145 EC A5                   		mov.L	[r10], r5
 9913 0147 2E 54                   		bra	.L182
 9914                             	.L181:
8300:../src/wolfcrypt/src/aes.c ****         xorbuf(scratch, c, partial);
 9915                             		.loc 2 8300 9
 9916 0149 71 A5 28                		add	#40, r10, r5
 9917 014c ED A3 04                		mov.L	16[r10], r3
 9918 014f ED A2 02                		mov.L	8[r10], r2
 9919 0152 EF 51                   		mov.L	r5, r1
 9920 0154 05 00 00 00             		bsr	_xorbuf
8301:../src/wolfcrypt/src/aes.c ****         XMEMCPY(p, scratch, partial);
 9921                             		.loc 2 8301 9
 9922 0158 71 A5 28                		add	#40, r10, r5
 9923 015b ED A3 04                		mov.L	16[r10], r3
 9924 015e EF 52                   		mov.L	r5, r2
 9925 0160 ED A1 03                		mov.L	12[r10], r1
 9926 0163 05 00 00 00             		bsr	_memcpy
 9927                             	.L180:
8302:../src/wolfcrypt/src/aes.c ****     }
8303:../src/wolfcrypt/src/aes.c **** 
8304:../src/wolfcrypt/src/aes.c ****     /* ConstantCompare returns the cumulative bitwise or of the bitwise xor of
8305:../src/wolfcrypt/src/aes.c ****      * the pairwise bytes in the strings.
8306:../src/wolfcrypt/src/aes.c ****      */
8307:../src/wolfcrypt/src/aes.c ****     res = ConstantCompare(authTag, Tprime, authTagSz);
 9928                             		.loc 2 8307 11
 9929 0167 A8 EC                   		mov.L	12[r6], r4
 9930 0169 71 A5 38                		add	#56, r10, r5
 9931 016c EF 43                   		mov.L	r4, r3
 9932 016e EF 52                   		mov.L	r5, r2
 9933 0170 A8 E1                   		mov.L	8[r6], r1
 9934 0172 05 00 00 00             		bsr	_ConstantCompare
 9935 0176 E7 A1 05                		mov.L	r1, 20[r10]
8308:../src/wolfcrypt/src/aes.c ****     /* convert positive retval from ConstantCompare() to all-1s word, in
8309:../src/wolfcrypt/src/aes.c ****      * constant time.
8310:../src/wolfcrypt/src/aes.c ****      */
8311:../src/wolfcrypt/src/aes.c ****     res = 0 - (sword32)(((word32)(0 - res)) >> 31U);
 9936                             		.loc 2 8311 37
 9937 0179 ED A5 05                		mov.L	20[r10], r5
 9938 017c 7E 15                   		neg	r5
 9939                             		.loc 2 8311 45
 9940 017e 69 F5                   		shlr	#31, r5
 9941                             		.loc 2 8311 9
 9942 0180 7E 15                   		neg	r5
 9943 0182 E7 A5 05                		mov.L	r5, 20[r10]
8312:../src/wolfcrypt/src/aes.c ****     /* now use res as a mask for constant time return of ret, unless tag
8313:../src/wolfcrypt/src/aes.c ****      * mismatch, whereupon AES_GCM_AUTH_E is returned.
8314:../src/wolfcrypt/src/aes.c ****      */
8315:../src/wolfcrypt/src/aes.c ****     ret = (ret & ~res) | (res & AES_GCM_AUTH_E);
 9944                             		.loc 2 8315 18
 9945 0185 ED A5 05                		mov.L	20[r10], r5
 9946 0188 7E 05                   		not	r5
 9947                             		.loc 2 8315 16
 9948 018a EC A4                   		mov.L	[r10], r4
 9949 018c 53 54                   		and	r5, r4
 9950                             		.loc 2 8315 31
 9951 018e ED A5 05                		mov.L	20[r10], r5
 9952 0191 76 25 4C FF             		and	#-180, r5
 9953                             		.loc 2 8315 9
 9954 0195 57 45                   		or	r4, r5
 9955 0197 E3 A5                   		mov.L	r5, [r10]
8316:../src/wolfcrypt/src/aes.c **** 
8317:../src/wolfcrypt/src/aes.c ****     return ret;
 9956                             		.loc 2 8317 12
 9957 0199 EC A5                   		mov.L	[r10], r5
 9958                             		.balign 8,3,1
 9959                             	.L182:
8318:../src/wolfcrypt/src/aes.c **** }
 9960                             		.loc 2 8318 1 discriminator 1
 9961 019b EF 51                   		mov.L	r5, r1
 9962 019d 72 00 8C 00             		add	#0x8c, r0
 9963 01a1 7E B6                   		pop	r6
 9964 01a3 7E BA                   		pop	r10
 9965 01a5 02                      		rts
 9966                             	.LFE60:
 9968 01a6 EF 00                   		.section	.text.wc_AesGcmDecrypt,"ax",@progbits
 9969                             		.global	_wc_AesGcmDecrypt
 9971                             	_wc_AesGcmDecrypt:
 9972                             	.LFB61:
8319:../src/wolfcrypt/src/aes.c **** 
8320:../src/wolfcrypt/src/aes.c **** /* Software AES - GCM Decrypt */
8321:../src/wolfcrypt/src/aes.c **** int wc_AesGcmDecrypt(Aes* aes, byte* out, const byte* in, word32 sz,
8322:../src/wolfcrypt/src/aes.c ****                      const byte* iv, word32 ivSz,
8323:../src/wolfcrypt/src/aes.c ****                      const byte* authTag, word32 authTagSz,
8324:../src/wolfcrypt/src/aes.c ****                      const byte* authIn, word32 authInSz)
8325:../src/wolfcrypt/src/aes.c **** {
 9973                             		.loc 2 8325 1
 9974 0000 7E AA                   		push.l	r10
 9975                             	.LCFI67:
 9976 0002 71 0A D8                		add	#-40, r0, r10
 9977                             	.LCFI68:
 9978 0005 71 A0 E8                		add	#-24, r10, r0
 9979                             	.LCFI69:
 9980 0008 75 45 30                		mov.L	#48, r5
 9981 000b 4B A5                   		add	r10, r5
 9982 000d E3 A1                   		mov.L	r1, [r10]
 9983 000f E7 A2 01                		mov.L	r2, 4[r10]
 9984 0012 E7 A3 02                		mov.L	r3, 8[r10]
 9985 0015 E7 A4 03                		mov.L	r4, 12[r10]
8326:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
8327:../src/wolfcrypt/src/aes.c ****     int res = AES_GCM_AUTH_E;
8328:../src/wolfcrypt/src/aes.c **** #endif
8329:../src/wolfcrypt/src/aes.c **** 
8330:../src/wolfcrypt/src/aes.c ****     /* argument checks */
8331:../src/wolfcrypt/src/aes.c ****     /* If the sz is non-zero, both in and out must be set. If sz is 0,
8332:../src/wolfcrypt/src/aes.c ****      * in and out are don't cares, as this is is the GMAC case. */
8333:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || iv == NULL || (sz != 0 && (in == NULL || out == NULL)) ||
 9986                             		.loc 2 8333 8
 9987 0018 EC A4                   		mov.L	[r10], r4
 9988 001a 61 04                   		cmp	#0, r4
 9989 001c 20 34                   		beq	.L184
 9990                             		.loc 2 8333 21 discriminator 1
 9991 001e EC 54                   		mov.L	[r5], r4
 9992 0020 61 04                   		cmp	#0, r4
 9993 0022 20 2E                   		beq	.L184
 9994                             		.loc 2 8333 35 discriminator 2
 9995 0024 ED A4 03                		mov.L	12[r10], r4
 9996 0027 61 04                   		cmp	#0, r4
 9997 0029 20 10                   		beq	.L185
 9998                             		.loc 2 8333 47 discriminator 3
 9999 002b ED A4 02                		mov.L	8[r10], r4
 10000 002e 61 04                   		cmp	#0, r4
 10001 0030 20 20                   		beq	.L184
 10002                             		.loc 2 8333 62 discriminator 5
 10003 0032 ED A4 01                		mov.L	4[r10], r4
 10004 0035 61 04                   		cmp	#0, r4
 10005 0037 20 19                   		beq	.L184
 10006                             	.L185:
 10007                             		.loc 2 8333 79 discriminator 6
 10008 0039 A8 D4                   		mov.L	8[r5], r4
 10009 003b 61 04                   		cmp	#0, r4
 10010 003d 20 13                   		beq	.L184
8334:../src/wolfcrypt/src/aes.c ****         authTag == NULL || authTagSz > AES_BLOCK_SIZE || authTagSz == 0 ||
 10011                             		.loc 2 8334 25
 10012 003f A8 DC                   		mov.L	12[r5], r4
 10013 0041 75 54 10                		cmp	#16, r4
 10014 0044 24 0C                   		bgtu	.L184
 10015                             		.loc 2 8334 55 discriminator 1
 10016 0046 A8 DC                   		mov.L	12[r5], r4
 10017 0048 61 04                   		cmp	#0, r4
 10018 004a 16                      		beq	.L184
 10019                             		.loc 2 8334 73 discriminator 2
 10020 004b A8 5C                   		mov.L	4[r5], r4
 10021 004d 61 04                   		cmp	#0, r4
 10022 004f 1F                      		bne	.L186
 10023                             		.balign 8,3,2
 10024                             	.L184:
8335:../src/wolfcrypt/src/aes.c ****         ivSz == 0) {
8336:../src/wolfcrypt/src/aes.c **** 
8337:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
 10025                             		.loc 2 8337 16
 10026 0050 FB 5A 53 FF             		mov.L	#-173, r5
 10027 0054 2E 2B                   		bra	.L187
 10028                             	.L186:
8338:../src/wolfcrypt/src/aes.c ****     }
8339:../src/wolfcrypt/src/aes.c **** 
8340:../src/wolfcrypt/src/aes.c **** #ifdef WOLF_CRYPTO_CB
8341:../src/wolfcrypt/src/aes.c ****     if (aes->devId != INVALID_DEVID) {
8342:../src/wolfcrypt/src/aes.c ****         int crypto_cb_ret =
8343:../src/wolfcrypt/src/aes.c ****             wc_CryptoCb_AesGcmDecrypt(aes, out, in, sz, iv, ivSz,
8344:../src/wolfcrypt/src/aes.c ****                                       authTag, authTagSz, authIn, authInSz);
8345:../src/wolfcrypt/src/aes.c ****         if (crypto_cb_ret != CRYPTOCB_UNAVAILABLE)
8346:../src/wolfcrypt/src/aes.c ****             return crypto_cb_ret;
8347:../src/wolfcrypt/src/aes.c ****         /* fall-through when unavailable */
8348:../src/wolfcrypt/src/aes.c ****     }
8349:../src/wolfcrypt/src/aes.c **** #endif
8350:../src/wolfcrypt/src/aes.c **** 
8351:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_AES)
8352:../src/wolfcrypt/src/aes.c ****     /* if async and byte count above threshold */
8353:../src/wolfcrypt/src/aes.c ****     /* only 12-byte IV is supported in HW */
8354:../src/wolfcrypt/src/aes.c ****     if (aes->asyncDev.marker == WOLFSSL_ASYNC_MARKER_AES &&
8355:../src/wolfcrypt/src/aes.c ****                     sz >= WC_ASYNC_THRESH_AES_GCM && ivSz == GCM_NONCE_MID_SZ) {
8356:../src/wolfcrypt/src/aes.c ****     #if defined(HAVE_CAVIUM)
8357:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_CAVIUM_V
8358:../src/wolfcrypt/src/aes.c ****         if (authInSz == 20) { /* Nitrox V GCM is only working with 20 byte AAD */
8359:../src/wolfcrypt/src/aes.c ****             return NitroxAesGcmDecrypt(aes, out, in, sz,
8360:../src/wolfcrypt/src/aes.c ****                 (const byte*)aes->devKey, aes->keylen, iv, ivSz,
8361:../src/wolfcrypt/src/aes.c ****                 authTag, authTagSz, authIn, authInSz);
8362:../src/wolfcrypt/src/aes.c ****         }
8363:../src/wolfcrypt/src/aes.c ****         #endif
8364:../src/wolfcrypt/src/aes.c ****     #elif defined(HAVE_INTEL_QA)
8365:../src/wolfcrypt/src/aes.c ****         return IntelQaSymAesGcmDecrypt(&aes->asyncDev, out, in, sz,
8366:../src/wolfcrypt/src/aes.c ****             (const byte*)aes->devKey, aes->keylen, iv, ivSz,
8367:../src/wolfcrypt/src/aes.c ****             authTag, authTagSz, authIn, authInSz);
8368:../src/wolfcrypt/src/aes.c ****     #else /* WOLFSSL_ASYNC_CRYPT_TEST */
8369:../src/wolfcrypt/src/aes.c ****         if (wc_AsyncTestInit(&aes->asyncDev, ASYNC_TEST_AES_GCM_DECRYPT)) {
8370:../src/wolfcrypt/src/aes.c ****             WC_ASYNC_TEST* testDev = &aes->asyncDev.test;
8371:../src/wolfcrypt/src/aes.c ****             testDev->aes.aes = aes;
8372:../src/wolfcrypt/src/aes.c ****             testDev->aes.out = out;
8373:../src/wolfcrypt/src/aes.c ****             testDev->aes.in = in;
8374:../src/wolfcrypt/src/aes.c ****             testDev->aes.sz = sz;
8375:../src/wolfcrypt/src/aes.c ****             testDev->aes.iv = iv;
8376:../src/wolfcrypt/src/aes.c ****             testDev->aes.ivSz = ivSz;
8377:../src/wolfcrypt/src/aes.c ****             testDev->aes.authTag = (byte*)authTag;
8378:../src/wolfcrypt/src/aes.c ****             testDev->aes.authTagSz = authTagSz;
8379:../src/wolfcrypt/src/aes.c ****             testDev->aes.authIn = authIn;
8380:../src/wolfcrypt/src/aes.c ****             testDev->aes.authInSz = authInSz;
8381:../src/wolfcrypt/src/aes.c ****             return WC_PENDING_E;
8382:../src/wolfcrypt/src/aes.c ****         }
8383:../src/wolfcrypt/src/aes.c ****     #endif
8384:../src/wolfcrypt/src/aes.c ****     }
8385:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
8386:../src/wolfcrypt/src/aes.c **** 
8387:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SILABS_SE_ACCEL
8388:../src/wolfcrypt/src/aes.c ****     return wc_AesGcmDecrypt_silabs(
8389:../src/wolfcrypt/src/aes.c ****         aes, out, in, sz, iv, ivSz,
8390:../src/wolfcrypt/src/aes.c ****         authTag, authTagSz, authIn, authInSz);
8391:../src/wolfcrypt/src/aes.c **** 
8392:../src/wolfcrypt/src/aes.c **** #endif
8393:../src/wolfcrypt/src/aes.c **** 
8394:../src/wolfcrypt/src/aes.c **** #ifdef STM32_CRYPTO_AES_GCM
8395:../src/wolfcrypt/src/aes.c ****     /* The STM standard peripheral library API's doesn't support partial blocks */
8396:../src/wolfcrypt/src/aes.c ****     return wc_AesGcmDecrypt_STM32(
8397:../src/wolfcrypt/src/aes.c ****         aes, out, in, sz, iv, ivSz,
8398:../src/wolfcrypt/src/aes.c ****         authTag, authTagSz, authIn, authInSz);
8399:../src/wolfcrypt/src/aes.c **** #endif /* STM32_CRYPTO_AES_GCM */
8400:../src/wolfcrypt/src/aes.c **** 
8401:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
8402:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_INTEL_AVX2
8403:../src/wolfcrypt/src/aes.c ****     if (IS_INTEL_AVX2(intel_flags)) {
8404:../src/wolfcrypt/src/aes.c ****         SAVE_VECTOR_REGISTERS(return _svr_ret;);
8405:../src/wolfcrypt/src/aes.c ****         AES_GCM_decrypt_avx2(in, out, authIn, iv, authTag, sz, authInSz, ivSz,
8406:../src/wolfcrypt/src/aes.c ****                                  authTagSz, (byte*)aes->key, aes->rounds, &res);
8407:../src/wolfcrypt/src/aes.c ****         RESTORE_VECTOR_REGISTERS();
8408:../src/wolfcrypt/src/aes.c ****         if (res == 0)
8409:../src/wolfcrypt/src/aes.c ****             return AES_GCM_AUTH_E;
8410:../src/wolfcrypt/src/aes.c ****         return 0;
8411:../src/wolfcrypt/src/aes.c ****     }
8412:../src/wolfcrypt/src/aes.c ****     else
8413:../src/wolfcrypt/src/aes.c ****     #endif
8414:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_INTEL_AVX1
8415:../src/wolfcrypt/src/aes.c ****     if (IS_INTEL_AVX1(intel_flags)) {
8416:../src/wolfcrypt/src/aes.c ****         SAVE_VECTOR_REGISTERS(return _svr_ret;);
8417:../src/wolfcrypt/src/aes.c ****         AES_GCM_decrypt_avx1(in, out, authIn, iv, authTag, sz, authInSz, ivSz,
8418:../src/wolfcrypt/src/aes.c ****                                  authTagSz, (byte*)aes->key, aes->rounds, &res);
8419:../src/wolfcrypt/src/aes.c ****         RESTORE_VECTOR_REGISTERS();
8420:../src/wolfcrypt/src/aes.c ****         if (res == 0)
8421:../src/wolfcrypt/src/aes.c ****             return AES_GCM_AUTH_E;
8422:../src/wolfcrypt/src/aes.c ****         return 0;
8423:../src/wolfcrypt/src/aes.c ****     }
8424:../src/wolfcrypt/src/aes.c ****     else
8425:../src/wolfcrypt/src/aes.c ****     #endif
8426:../src/wolfcrypt/src/aes.c ****     if (haveAESNI) {
8427:../src/wolfcrypt/src/aes.c ****         AES_GCM_decrypt(in, out, authIn, iv, authTag, sz, authInSz, ivSz,
8428:../src/wolfcrypt/src/aes.c ****                                  authTagSz, (byte*)aes->key, aes->rounds, &res);
8429:../src/wolfcrypt/src/aes.c ****         if (res == 0)
8430:../src/wolfcrypt/src/aes.c ****             return AES_GCM_AUTH_E;
8431:../src/wolfcrypt/src/aes.c ****         return 0;
8432:../src/wolfcrypt/src/aes.c ****     }
8433:../src/wolfcrypt/src/aes.c ****     else
8434:../src/wolfcrypt/src/aes.c **** #endif
8435:../src/wolfcrypt/src/aes.c ****     {
8436:../src/wolfcrypt/src/aes.c ****         return AES_GCM_decrypt_C(aes, out, in, sz, iv, ivSz, authTag, authTagSz,
 10029                             		.loc 2 8436 16
 10030 0056 A9 5C                   		mov.L	20[r5], r4
 10031 0058 A1 0C                   		mov.L	r4, 20[r0]
 10032 005a A9 54                   		mov.L	16[r5], r4
 10033 005c A1 04                   		mov.L	r4, 16[r0]
 10034 005e A8 DC                   		mov.L	12[r5], r4
 10035 0060 A0 8C                   		mov.L	r4, 12[r0]
 10036 0062 A8 D4                   		mov.L	8[r5], r4
 10037 0064 A0 84                   		mov.L	r4, 8[r0]
 10038 0066 A8 5C                   		mov.L	4[r5], r4
 10039 0068 A0 0C                   		mov.L	r4, 4[r0]
 10040 006a EC 55                   		mov.L	[r5], r5
 10041 006c E3 05                   		mov.L	r5, [r0]
 10042 006e ED A4 03                		mov.L	12[r10], r4
 10043 0071 ED A3 02                		mov.L	8[r10], r3
 10044 0074 ED A2 01                		mov.L	4[r10], r2
 10045 0077 EC A1                   		mov.L	[r10], r1
 10046 0079 05 00 00 00             		bsr	_AES_GCM_decrypt_C
 10047 007d EF 15                   		mov.L	r1, r5
 10048                             	.L187:
8437:../src/wolfcrypt/src/aes.c ****                                                               authIn, authInSz);
8438:../src/wolfcrypt/src/aes.c ****     }
8439:../src/wolfcrypt/src/aes.c **** }
 10049                             		.loc 2 8439 1
 10050 007f EF 51                   		mov.L	r5, r1
 10051 0081 3F AA 11                		rtsd	#68, r10-r10
 10052                             	.LFE61:
 10054 0084 76 10 01 00             		.section	.text.CheckAesGcmIvSize,"ax",@progbits
 10056                             	_CheckAesGcmIvSize:
 10057                             	.LFB62:
8440:../src/wolfcrypt/src/aes.c **** #endif
8441:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_DECRYPT || HAVE_AESGCM_DECRYPT */
8442:../src/wolfcrypt/src/aes.c **** 
8443:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESGCM_STREAM
8444:../src/wolfcrypt/src/aes.c **** /* Initialize the AES GCM cipher with an IV. C implementation.
8445:../src/wolfcrypt/src/aes.c ****  *
8446:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes   AES object.
8447:../src/wolfcrypt/src/aes.c ****  * @param [in]      iv    IV/nonce buffer.
8448:../src/wolfcrypt/src/aes.c ****  * @param [in]      ivSz  Length of IV/nonce data.
8449:../src/wolfcrypt/src/aes.c ****  */
8450:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int AesGcmInit_C(Aes* aes, const byte* iv, word32 ivSz)
8451:../src/wolfcrypt/src/aes.c **** {
8452:../src/wolfcrypt/src/aes.c ****     ALIGN32 byte counter[AES_BLOCK_SIZE];
8453:../src/wolfcrypt/src/aes.c ****     int ret;
8454:../src/wolfcrypt/src/aes.c **** 
8455:../src/wolfcrypt/src/aes.c ****     if (ivSz == GCM_NONCE_MID_SZ) {
8456:../src/wolfcrypt/src/aes.c ****         /* Counter is IV with bottom 4 bytes set to: 0x00,0x00,0x00,0x01. */
8457:../src/wolfcrypt/src/aes.c ****         XMEMCPY(counter, iv, ivSz);
8458:../src/wolfcrypt/src/aes.c ****         XMEMSET(counter + GCM_NONCE_MID_SZ, 0,
8459:../src/wolfcrypt/src/aes.c ****                                          AES_BLOCK_SIZE - GCM_NONCE_MID_SZ - 1);
8460:../src/wolfcrypt/src/aes.c ****         counter[AES_BLOCK_SIZE - 1] = 1;
8461:../src/wolfcrypt/src/aes.c ****     }
8462:../src/wolfcrypt/src/aes.c ****     else {
8463:../src/wolfcrypt/src/aes.c ****         /* Counter is GHASH of IV. */
8464:../src/wolfcrypt/src/aes.c ****     #ifdef OPENSSL_EXTRA
8465:../src/wolfcrypt/src/aes.c ****         word32 aadTemp = aes->aadLen;
8466:../src/wolfcrypt/src/aes.c ****         aes->aadLen = 0;
8467:../src/wolfcrypt/src/aes.c ****     #endif
8468:../src/wolfcrypt/src/aes.c ****         GHASH(aes, NULL, 0, iv, ivSz, counter, AES_BLOCK_SIZE);
8469:../src/wolfcrypt/src/aes.c ****     #ifdef OPENSSL_EXTRA
8470:../src/wolfcrypt/src/aes.c ****         aes->aadLen = aadTemp;
8471:../src/wolfcrypt/src/aes.c ****     #endif
8472:../src/wolfcrypt/src/aes.c ****     }
8473:../src/wolfcrypt/src/aes.c **** 
8474:../src/wolfcrypt/src/aes.c ****     /* Copy in the counter for use with cipher. */
8475:../src/wolfcrypt/src/aes.c ****     XMEMCPY(AES_COUNTER(aes), counter, AES_BLOCK_SIZE);
8476:../src/wolfcrypt/src/aes.c ****     /* Encrypt initial counter into a buffer for GCM. */
8477:../src/wolfcrypt/src/aes.c ****     ret = wc_AesEncrypt(aes, counter, AES_INITCTR(aes));
8478:../src/wolfcrypt/src/aes.c ****     if (ret != 0)
8479:../src/wolfcrypt/src/aes.c ****         return ret;
8480:../src/wolfcrypt/src/aes.c ****     /* Reset state fields. */
8481:../src/wolfcrypt/src/aes.c ****     aes->over = 0;
8482:../src/wolfcrypt/src/aes.c ****     aes->aSz = 0;
8483:../src/wolfcrypt/src/aes.c ****     aes->cSz = 0;
8484:../src/wolfcrypt/src/aes.c ****     /* Initialization for GHASH. */
8485:../src/wolfcrypt/src/aes.c ****     GHASH_INIT(aes);
8486:../src/wolfcrypt/src/aes.c **** 
8487:../src/wolfcrypt/src/aes.c ****     return 0;
8488:../src/wolfcrypt/src/aes.c **** }
8489:../src/wolfcrypt/src/aes.c **** 
8490:../src/wolfcrypt/src/aes.c **** /* Update the AES GCM cipher with data. C implementation.
8491:../src/wolfcrypt/src/aes.c ****  *
8492:../src/wolfcrypt/src/aes.c ****  * Only enciphers data.
8493:../src/wolfcrypt/src/aes.c ****  *
8494:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES object.
8495:../src/wolfcrypt/src/aes.c ****  * @param [in]      out  Cipher text or plaintext buffer.
8496:../src/wolfcrypt/src/aes.c ****  * @param [in]      in   Plaintext or cipher text buffer.
8497:../src/wolfcrypt/src/aes.c ****  * @param [in]      sz   Length of data.
8498:../src/wolfcrypt/src/aes.c ****  */
8499:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int AesGcmCryptUpdate_C(
8500:../src/wolfcrypt/src/aes.c ****     Aes* aes, byte* out, const byte* in, word32 sz)
8501:../src/wolfcrypt/src/aes.c **** {
8502:../src/wolfcrypt/src/aes.c ****     word32 blocks;
8503:../src/wolfcrypt/src/aes.c ****     word32 partial;
8504:../src/wolfcrypt/src/aes.c ****     int ret;
8505:../src/wolfcrypt/src/aes.c **** 
8506:../src/wolfcrypt/src/aes.c ****     /* Check if previous encrypted block was not used up. */
8507:../src/wolfcrypt/src/aes.c ****     if (aes->over > 0) {
8508:../src/wolfcrypt/src/aes.c ****         byte pSz = AES_BLOCK_SIZE - aes->over;
8509:../src/wolfcrypt/src/aes.c ****         if (pSz > sz) pSz = sz;
8510:../src/wolfcrypt/src/aes.c **** 
8511:../src/wolfcrypt/src/aes.c ****         /* Use some/all of last encrypted block. */
8512:../src/wolfcrypt/src/aes.c ****         xorbufout(out, AES_LASTBLOCK(aes) + aes->over, in, pSz);
8513:../src/wolfcrypt/src/aes.c ****         aes->over = (aes->over + pSz) & (AES_BLOCK_SIZE - 1);
8514:../src/wolfcrypt/src/aes.c **** 
8515:../src/wolfcrypt/src/aes.c ****         /* Some data used. */
8516:../src/wolfcrypt/src/aes.c ****         sz  -= pSz;
8517:../src/wolfcrypt/src/aes.c ****         in  += pSz;
8518:../src/wolfcrypt/src/aes.c ****         out += pSz;
8519:../src/wolfcrypt/src/aes.c ****     }
8520:../src/wolfcrypt/src/aes.c **** 
8521:../src/wolfcrypt/src/aes.c ****     /* Calculate the number of blocks needing to be encrypted and any leftover.
8522:../src/wolfcrypt/src/aes.c ****      */
8523:../src/wolfcrypt/src/aes.c ****     blocks  = sz / AES_BLOCK_SIZE;
8524:../src/wolfcrypt/src/aes.c ****     partial = sz & (AES_BLOCK_SIZE - 1);
8525:../src/wolfcrypt/src/aes.c **** 
8526:../src/wolfcrypt/src/aes.c **** #if defined(HAVE_AES_ECB)
8527:../src/wolfcrypt/src/aes.c ****     /* Some hardware acceleration can gain performance from doing AES encryption
8528:../src/wolfcrypt/src/aes.c ****      * of the whole buffer at once.
8529:../src/wolfcrypt/src/aes.c ****      * Overwrites the cipher text before using plaintext - no inline encryption.
8530:../src/wolfcrypt/src/aes.c ****      */
8531:../src/wolfcrypt/src/aes.c ****     if ((out != in) && blocks > 0) {
8532:../src/wolfcrypt/src/aes.c ****         word32 b;
8533:../src/wolfcrypt/src/aes.c ****         /* Place incrementing counter blocks into cipher text. */
8534:../src/wolfcrypt/src/aes.c ****         for (b = 0; b < blocks; b++) {
8535:../src/wolfcrypt/src/aes.c ****             IncrementGcmCounter(AES_COUNTER(aes));
8536:../src/wolfcrypt/src/aes.c ****             XMEMCPY(out + b * AES_BLOCK_SIZE, AES_COUNTER(aes), AES_BLOCK_SIZE);
8537:../src/wolfcrypt/src/aes.c ****         }
8538:../src/wolfcrypt/src/aes.c **** 
8539:../src/wolfcrypt/src/aes.c ****         /* Encrypt counter blocks. */
8540:../src/wolfcrypt/src/aes.c ****         wc_AesEcbEncrypt(aes, out, out, AES_BLOCK_SIZE * blocks);
8541:../src/wolfcrypt/src/aes.c ****         /* XOR in plaintext. */
8542:../src/wolfcrypt/src/aes.c ****         xorbuf(out, in, AES_BLOCK_SIZE * blocks);
8543:../src/wolfcrypt/src/aes.c ****         /* Skip over processed data. */
8544:../src/wolfcrypt/src/aes.c ****         in += AES_BLOCK_SIZE * blocks;
8545:../src/wolfcrypt/src/aes.c ****         out += AES_BLOCK_SIZE * blocks;
8546:../src/wolfcrypt/src/aes.c ****     }
8547:../src/wolfcrypt/src/aes.c ****     else
8548:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_ECB */
8549:../src/wolfcrypt/src/aes.c ****     {
8550:../src/wolfcrypt/src/aes.c ****         /* Encrypt block by block. */
8551:../src/wolfcrypt/src/aes.c ****         while (blocks--) {
8552:../src/wolfcrypt/src/aes.c ****             ALIGN32 byte scratch[AES_BLOCK_SIZE];
8553:../src/wolfcrypt/src/aes.c ****             IncrementGcmCounter(AES_COUNTER(aes));
8554:../src/wolfcrypt/src/aes.c ****             /* Encrypt counter into a buffer. */
8555:../src/wolfcrypt/src/aes.c ****             ret = wc_AesEncrypt(aes, AES_COUNTER(aes), scratch);
8556:../src/wolfcrypt/src/aes.c ****             if (ret != 0)
8557:../src/wolfcrypt/src/aes.c ****                 return ret;
8558:../src/wolfcrypt/src/aes.c ****             /* XOR plain text into encrypted counter into cipher text buffer. */
8559:../src/wolfcrypt/src/aes.c ****             xorbufout(out, scratch, in, AES_BLOCK_SIZE);
8560:../src/wolfcrypt/src/aes.c ****             /* Data complete. */
8561:../src/wolfcrypt/src/aes.c ****             in  += AES_BLOCK_SIZE;
8562:../src/wolfcrypt/src/aes.c ****             out += AES_BLOCK_SIZE;
8563:../src/wolfcrypt/src/aes.c ****         }
8564:../src/wolfcrypt/src/aes.c ****     }
8565:../src/wolfcrypt/src/aes.c **** 
8566:../src/wolfcrypt/src/aes.c ****     if (partial != 0) {
8567:../src/wolfcrypt/src/aes.c ****         /* Generate an extra block and use up as much as needed. */
8568:../src/wolfcrypt/src/aes.c ****         IncrementGcmCounter(AES_COUNTER(aes));
8569:../src/wolfcrypt/src/aes.c ****         /* Encrypt counter into cache. */
8570:../src/wolfcrypt/src/aes.c ****         ret = wc_AesEncrypt(aes, AES_COUNTER(aes), AES_LASTBLOCK(aes));
8571:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
8572:../src/wolfcrypt/src/aes.c ****             return ret;
8573:../src/wolfcrypt/src/aes.c ****         /* XOR plain text into encrypted counter into cipher text buffer. */
8574:../src/wolfcrypt/src/aes.c ****         xorbufout(out, AES_LASTBLOCK(aes), in, partial);
8575:../src/wolfcrypt/src/aes.c ****         /* Keep amount of encrypted block used. */
8576:../src/wolfcrypt/src/aes.c ****         aes->over = partial;
8577:../src/wolfcrypt/src/aes.c ****     }
8578:../src/wolfcrypt/src/aes.c **** 
8579:../src/wolfcrypt/src/aes.c ****     return 0;
8580:../src/wolfcrypt/src/aes.c **** }
8581:../src/wolfcrypt/src/aes.c **** 
8582:../src/wolfcrypt/src/aes.c **** /* Calculates authentication tag for AES GCM. C implementation.
8583:../src/wolfcrypt/src/aes.c ****  *
8584:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes        AES object.
8585:../src/wolfcrypt/src/aes.c ****  * @param [out]     authTag    Buffer to store authentication tag in.
8586:../src/wolfcrypt/src/aes.c ****  * @param [in]      authTagSz  Length of tag to create.
8587:../src/wolfcrypt/src/aes.c ****  */
8588:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int AesGcmFinal_C(
8589:../src/wolfcrypt/src/aes.c ****     Aes* aes, byte* authTag, word32 authTagSz)
8590:../src/wolfcrypt/src/aes.c **** {
8591:../src/wolfcrypt/src/aes.c ****     /* Calculate authentication tag. */
8592:../src/wolfcrypt/src/aes.c ****     GHASH_FINAL(aes, authTag, authTagSz);
8593:../src/wolfcrypt/src/aes.c ****     /* XOR in as much of encrypted counter as is required. */
8594:../src/wolfcrypt/src/aes.c ****     xorbuf(authTag, AES_INITCTR(aes), authTagSz);
8595:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
8596:../src/wolfcrypt/src/aes.c ****     /* store AAD size for next call */
8597:../src/wolfcrypt/src/aes.c ****     aes->aadLen = aes->aSz;
8598:../src/wolfcrypt/src/aes.c **** #endif
8599:../src/wolfcrypt/src/aes.c ****     /* Zeroize last block to protect sensitive data. */
8600:../src/wolfcrypt/src/aes.c ****     ForceZero(AES_LASTBLOCK(aes), AES_BLOCK_SIZE);
8601:../src/wolfcrypt/src/aes.c **** 
8602:../src/wolfcrypt/src/aes.c ****     return 0;
8603:../src/wolfcrypt/src/aes.c **** }
8604:../src/wolfcrypt/src/aes.c **** 
8605:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
8606:../src/wolfcrypt/src/aes.c **** 
8607:../src/wolfcrypt/src/aes.c **** #ifdef __cplusplus
8608:../src/wolfcrypt/src/aes.c ****     extern "C" {
8609:../src/wolfcrypt/src/aes.c **** #endif
8610:../src/wolfcrypt/src/aes.c **** 
8611:../src/wolfcrypt/src/aes.c **** /* Assembly code implementations in: aes_gcm_asm.S */
8612:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX2
8613:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_init_avx2(const unsigned char* key, int nr,
8614:../src/wolfcrypt/src/aes.c ****     const unsigned char* ivec, unsigned int ibytes, unsigned char* h,
8615:../src/wolfcrypt/src/aes.c ****     unsigned char* counter, unsigned char* initCtr);
8616:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_aad_update_avx2(const unsigned char* addt,
8617:../src/wolfcrypt/src/aes.c ****     unsigned int abytes, unsigned char* tag, unsigned char* h);
8618:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_encrypt_block_avx2(const unsigned char* key, int nr,
8619:../src/wolfcrypt/src/aes.c ****     unsigned char* out, const unsigned char* in, unsigned char* counter);
8620:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_ghash_block_avx2(const unsigned char* data,
8621:../src/wolfcrypt/src/aes.c ****     unsigned char* tag, unsigned char* h);
8622:../src/wolfcrypt/src/aes.c **** 
8623:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_encrypt_update_avx2(const unsigned char* key, int nr,
8624:../src/wolfcrypt/src/aes.c ****     unsigned char* out, const unsigned char* in, unsigned int nbytes,
8625:../src/wolfcrypt/src/aes.c ****     unsigned char* tag, unsigned char* h, unsigned char* counter);
8626:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_encrypt_final_avx2(unsigned char* tag,
8627:../src/wolfcrypt/src/aes.c ****     unsigned char* authTag, unsigned int tbytes, unsigned int nbytes,
8628:../src/wolfcrypt/src/aes.c ****     unsigned int abytes, unsigned char* h, unsigned char* initCtr);
8629:../src/wolfcrypt/src/aes.c **** #endif
8630:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX1
8631:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_init_avx1(const unsigned char* key, int nr,
8632:../src/wolfcrypt/src/aes.c ****     const unsigned char* ivec, unsigned int ibytes, unsigned char* h,
8633:../src/wolfcrypt/src/aes.c ****     unsigned char* counter, unsigned char* initCtr);
8634:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_aad_update_avx1(const unsigned char* addt,
8635:../src/wolfcrypt/src/aes.c ****     unsigned int abytes, unsigned char* tag, unsigned char* h);
8636:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_encrypt_block_avx1(const unsigned char* key, int nr,
8637:../src/wolfcrypt/src/aes.c ****     unsigned char* out, const unsigned char* in, unsigned char* counter);
8638:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_ghash_block_avx1(const unsigned char* data,
8639:../src/wolfcrypt/src/aes.c ****     unsigned char* tag, unsigned char* h);
8640:../src/wolfcrypt/src/aes.c **** 
8641:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_encrypt_update_avx1(const unsigned char* key, int nr,
8642:../src/wolfcrypt/src/aes.c ****     unsigned char* out, const unsigned char* in, unsigned int nbytes,
8643:../src/wolfcrypt/src/aes.c ****     unsigned char* tag, unsigned char* h, unsigned char* counter);
8644:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_encrypt_final_avx1(unsigned char* tag,
8645:../src/wolfcrypt/src/aes.c ****     unsigned char* authTag, unsigned int tbytes, unsigned int nbytes,
8646:../src/wolfcrypt/src/aes.c ****     unsigned int abytes, unsigned char* h, unsigned char* initCtr);
8647:../src/wolfcrypt/src/aes.c **** #endif
8648:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_init_aesni(const unsigned char* key, int nr,
8649:../src/wolfcrypt/src/aes.c ****     const unsigned char* ivec, unsigned int ibytes, unsigned char* h,
8650:../src/wolfcrypt/src/aes.c ****     unsigned char* counter, unsigned char* initCtr);
8651:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_aad_update_aesni(const unsigned char* addt,
8652:../src/wolfcrypt/src/aes.c ****     unsigned int abytes, unsigned char* tag, unsigned char* h);
8653:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_encrypt_block_aesni(const unsigned char* key, int nr,
8654:../src/wolfcrypt/src/aes.c ****     unsigned char* out, const unsigned char* in, unsigned char* counter);
8655:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_ghash_block_aesni(const unsigned char* data,
8656:../src/wolfcrypt/src/aes.c ****     unsigned char* tag, unsigned char* h);
8657:../src/wolfcrypt/src/aes.c **** 
8658:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_encrypt_update_aesni(const unsigned char* key, int nr,
8659:../src/wolfcrypt/src/aes.c ****     unsigned char* out, const unsigned char* in, unsigned int nbytes,
8660:../src/wolfcrypt/src/aes.c ****     unsigned char* tag, unsigned char* h, unsigned char* counter);
8661:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_encrypt_final_aesni(unsigned char* tag,
8662:../src/wolfcrypt/src/aes.c ****     unsigned char* authTag, unsigned int tbytes, unsigned int nbytes,
8663:../src/wolfcrypt/src/aes.c ****     unsigned int abytes, unsigned char* h, unsigned char* initCtr);
8664:../src/wolfcrypt/src/aes.c **** 
8665:../src/wolfcrypt/src/aes.c **** #ifdef __cplusplus
8666:../src/wolfcrypt/src/aes.c ****     } /* extern "C" */
8667:../src/wolfcrypt/src/aes.c **** #endif
8668:../src/wolfcrypt/src/aes.c **** 
8669:../src/wolfcrypt/src/aes.c **** /* Initialize the AES GCM cipher with an IV. AES-NI implementations.
8670:../src/wolfcrypt/src/aes.c ****  *
8671:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes   AES object.
8672:../src/wolfcrypt/src/aes.c ****  * @param [in]      iv    IV/nonce buffer.
8673:../src/wolfcrypt/src/aes.c ****  * @param [in]      ivSz  Length of IV/nonce data.
8674:../src/wolfcrypt/src/aes.c ****  */
8675:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int AesGcmInit_aesni(
8676:../src/wolfcrypt/src/aes.c ****     Aes* aes, const byte* iv, word32 ivSz)
8677:../src/wolfcrypt/src/aes.c **** {
8678:../src/wolfcrypt/src/aes.c ****     /* Reset state fields. */
8679:../src/wolfcrypt/src/aes.c ****     aes->aSz = 0;
8680:../src/wolfcrypt/src/aes.c ****     aes->cSz = 0;
8681:../src/wolfcrypt/src/aes.c ****     /* Set tag to all zeros as initial value. */
8682:../src/wolfcrypt/src/aes.c ****     XMEMSET(AES_TAG(aes), 0, AES_BLOCK_SIZE);
8683:../src/wolfcrypt/src/aes.c ****     /* Reset counts of AAD and cipher text. */
8684:../src/wolfcrypt/src/aes.c ****     aes->aOver = 0;
8685:../src/wolfcrypt/src/aes.c ****     aes->cOver = 0;
8686:../src/wolfcrypt/src/aes.c **** 
8687:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX2
8688:../src/wolfcrypt/src/aes.c ****     if (IS_INTEL_AVX2(intel_flags)) {
8689:../src/wolfcrypt/src/aes.c ****         SAVE_VECTOR_REGISTERS(return _svr_ret;);
8690:../src/wolfcrypt/src/aes.c ****         AES_GCM_init_avx2((byte*)aes->key, aes->rounds, iv, ivSz, aes->H,
8691:../src/wolfcrypt/src/aes.c ****                           AES_COUNTER(aes), AES_INITCTR(aes));
8692:../src/wolfcrypt/src/aes.c ****         RESTORE_VECTOR_REGISTERS();
8693:../src/wolfcrypt/src/aes.c ****     }
8694:../src/wolfcrypt/src/aes.c ****     else
8695:../src/wolfcrypt/src/aes.c **** #endif
8696:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX1
8697:../src/wolfcrypt/src/aes.c ****     if (IS_INTEL_AVX1(intel_flags)) {
8698:../src/wolfcrypt/src/aes.c ****         SAVE_VECTOR_REGISTERS(return _svr_ret;);
8699:../src/wolfcrypt/src/aes.c ****         AES_GCM_init_avx1((byte*)aes->key, aes->rounds, iv, ivSz, aes->H,
8700:../src/wolfcrypt/src/aes.c ****                           AES_COUNTER(aes), AES_INITCTR(aes));
8701:../src/wolfcrypt/src/aes.c ****         RESTORE_VECTOR_REGISTERS();
8702:../src/wolfcrypt/src/aes.c ****     }
8703:../src/wolfcrypt/src/aes.c ****     else
8704:../src/wolfcrypt/src/aes.c **** #endif
8705:../src/wolfcrypt/src/aes.c ****     {
8706:../src/wolfcrypt/src/aes.c ****         SAVE_VECTOR_REGISTERS(return _svr_ret;);
8707:../src/wolfcrypt/src/aes.c ****         AES_GCM_init_aesni((byte*)aes->key, aes->rounds, iv, ivSz, aes->H,
8708:../src/wolfcrypt/src/aes.c ****                            AES_COUNTER(aes), AES_INITCTR(aes));
8709:../src/wolfcrypt/src/aes.c ****         RESTORE_VECTOR_REGISTERS();
8710:../src/wolfcrypt/src/aes.c ****     }
8711:../src/wolfcrypt/src/aes.c ****     return 0;
8712:../src/wolfcrypt/src/aes.c **** }
8713:../src/wolfcrypt/src/aes.c **** 
8714:../src/wolfcrypt/src/aes.c **** /* Update the AES GCM for encryption with authentication data.
8715:../src/wolfcrypt/src/aes.c ****  *
8716:../src/wolfcrypt/src/aes.c ****  * Implementation uses AVX2, AVX1 or straight AES-NI optimized assembly code.
8717:../src/wolfcrypt/src/aes.c ****  *
8718:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes   AES object.
8719:../src/wolfcrypt/src/aes.c ****  * @param [in]      a     Buffer holding authentication data.
8720:../src/wolfcrypt/src/aes.c ****  * @param [in]      aSz   Length of authentication data in bytes.
8721:../src/wolfcrypt/src/aes.c ****  * @param [in]      endA  Whether no more authentication data is expected.
8722:../src/wolfcrypt/src/aes.c ****  */
8723:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int AesGcmAadUpdate_aesni(
8724:../src/wolfcrypt/src/aes.c ****     Aes* aes, const byte* a, word32 aSz, int endA)
8725:../src/wolfcrypt/src/aes.c **** {
8726:../src/wolfcrypt/src/aes.c ****     word32 blocks;
8727:../src/wolfcrypt/src/aes.c ****     int partial;
8728:../src/wolfcrypt/src/aes.c **** 
8729:../src/wolfcrypt/src/aes.c ****     ASSERT_SAVED_VECTOR_REGISTERS();
8730:../src/wolfcrypt/src/aes.c **** 
8731:../src/wolfcrypt/src/aes.c ****     if (aSz != 0 && a != NULL) {
8732:../src/wolfcrypt/src/aes.c ****         /* Total count of AAD updated. */
8733:../src/wolfcrypt/src/aes.c ****         aes->aSz += aSz;
8734:../src/wolfcrypt/src/aes.c ****         /* Check if we have unprocessed data. */
8735:../src/wolfcrypt/src/aes.c ****         if (aes->aOver > 0) {
8736:../src/wolfcrypt/src/aes.c ****             /* Calculate amount we can use - fill up the block. */
8737:../src/wolfcrypt/src/aes.c ****             byte sz = AES_BLOCK_SIZE - aes->aOver;
8738:../src/wolfcrypt/src/aes.c ****             if (sz > aSz) {
8739:../src/wolfcrypt/src/aes.c ****                 sz = aSz;
8740:../src/wolfcrypt/src/aes.c ****             }
8741:../src/wolfcrypt/src/aes.c ****             /* Copy extra into last GHASH block array and update count. */
8742:../src/wolfcrypt/src/aes.c ****             XMEMCPY(AES_LASTGBLOCK(aes) + aes->aOver, a, sz);
8743:../src/wolfcrypt/src/aes.c ****             aes->aOver += sz;
8744:../src/wolfcrypt/src/aes.c ****             if (aes->aOver == AES_BLOCK_SIZE) {
8745:../src/wolfcrypt/src/aes.c ****                 /* We have filled up the block and can process. */
8746:../src/wolfcrypt/src/aes.c ****             #ifdef HAVE_INTEL_AVX2
8747:../src/wolfcrypt/src/aes.c ****                 if (IS_INTEL_AVX2(intel_flags)) {
8748:../src/wolfcrypt/src/aes.c ****                     AES_GCM_ghash_block_avx2(AES_LASTGBLOCK(aes), AES_TAG(aes),
8749:../src/wolfcrypt/src/aes.c ****                                              aes->H);
8750:../src/wolfcrypt/src/aes.c ****                 }
8751:../src/wolfcrypt/src/aes.c ****                 else
8752:../src/wolfcrypt/src/aes.c ****             #endif
8753:../src/wolfcrypt/src/aes.c ****             #ifdef HAVE_INTEL_AVX1
8754:../src/wolfcrypt/src/aes.c ****                 if (IS_INTEL_AVX1(intel_flags)) {
8755:../src/wolfcrypt/src/aes.c ****                     AES_GCM_ghash_block_avx1(AES_LASTGBLOCK(aes), AES_TAG(aes),
8756:../src/wolfcrypt/src/aes.c ****                                              aes->H);
8757:../src/wolfcrypt/src/aes.c ****                 }
8758:../src/wolfcrypt/src/aes.c ****                 else
8759:../src/wolfcrypt/src/aes.c ****             #endif
8760:../src/wolfcrypt/src/aes.c ****                 {
8761:../src/wolfcrypt/src/aes.c ****                     AES_GCM_ghash_block_aesni(AES_LASTGBLOCK(aes), AES_TAG(aes),
8762:../src/wolfcrypt/src/aes.c ****                                               aes->H);
8763:../src/wolfcrypt/src/aes.c ****                 }
8764:../src/wolfcrypt/src/aes.c ****                 /* Reset count. */
8765:../src/wolfcrypt/src/aes.c ****                 aes->aOver = 0;
8766:../src/wolfcrypt/src/aes.c ****             }
8767:../src/wolfcrypt/src/aes.c ****             /* Used up some data. */
8768:../src/wolfcrypt/src/aes.c ****             aSz -= sz;
8769:../src/wolfcrypt/src/aes.c ****             a += sz;
8770:../src/wolfcrypt/src/aes.c ****         }
8771:../src/wolfcrypt/src/aes.c **** 
8772:../src/wolfcrypt/src/aes.c ****         /* Calculate number of blocks of AAD and the leftover. */
8773:../src/wolfcrypt/src/aes.c ****         blocks = aSz / AES_BLOCK_SIZE;
8774:../src/wolfcrypt/src/aes.c ****         partial = aSz % AES_BLOCK_SIZE;
8775:../src/wolfcrypt/src/aes.c ****         if (blocks > 0) {
8776:../src/wolfcrypt/src/aes.c ****             /* GHASH full blocks now. */
8777:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX2
8778:../src/wolfcrypt/src/aes.c ****             if (IS_INTEL_AVX2(intel_flags)) {
8779:../src/wolfcrypt/src/aes.c ****                 AES_GCM_aad_update_avx2(a, blocks * AES_BLOCK_SIZE,
8780:../src/wolfcrypt/src/aes.c ****                                         AES_TAG(aes), aes->H);
8781:../src/wolfcrypt/src/aes.c ****             }
8782:../src/wolfcrypt/src/aes.c ****             else
8783:../src/wolfcrypt/src/aes.c ****         #endif
8784:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX1
8785:../src/wolfcrypt/src/aes.c ****             if (IS_INTEL_AVX1(intel_flags)) {
8786:../src/wolfcrypt/src/aes.c ****                 AES_GCM_aad_update_avx1(a, blocks * AES_BLOCK_SIZE,
8787:../src/wolfcrypt/src/aes.c ****                                         AES_TAG(aes), aes->H);
8788:../src/wolfcrypt/src/aes.c ****             }
8789:../src/wolfcrypt/src/aes.c ****             else
8790:../src/wolfcrypt/src/aes.c ****         #endif
8791:../src/wolfcrypt/src/aes.c ****             {
8792:../src/wolfcrypt/src/aes.c ****                 AES_GCM_aad_update_aesni(a, blocks * AES_BLOCK_SIZE,
8793:../src/wolfcrypt/src/aes.c ****                                          AES_TAG(aes), aes->H);
8794:../src/wolfcrypt/src/aes.c ****             }
8795:../src/wolfcrypt/src/aes.c ****             /* Skip over to end of AAD blocks. */
8796:../src/wolfcrypt/src/aes.c ****             a += blocks * AES_BLOCK_SIZE;
8797:../src/wolfcrypt/src/aes.c ****         }
8798:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
8799:../src/wolfcrypt/src/aes.c ****             /* Cache the partial block. */
8800:../src/wolfcrypt/src/aes.c ****             XMEMCPY(AES_LASTGBLOCK(aes), a, partial);
8801:../src/wolfcrypt/src/aes.c ****             aes->aOver = (byte)partial;
8802:../src/wolfcrypt/src/aes.c ****         }
8803:../src/wolfcrypt/src/aes.c ****     }
8804:../src/wolfcrypt/src/aes.c ****     if (endA && (aes->aOver > 0)) {
8805:../src/wolfcrypt/src/aes.c ****         /* No more AAD coming and we have a partial block. */
8806:../src/wolfcrypt/src/aes.c ****         /* Fill the rest of the block with zeros. */
8807:../src/wolfcrypt/src/aes.c ****         XMEMSET(AES_LASTGBLOCK(aes) + aes->aOver, 0,
8808:../src/wolfcrypt/src/aes.c ****                 AES_BLOCK_SIZE - aes->aOver);
8809:../src/wolfcrypt/src/aes.c ****         /* GHASH last AAD block. */
8810:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_INTEL_AVX2
8811:../src/wolfcrypt/src/aes.c ****         if (IS_INTEL_AVX2(intel_flags)) {
8812:../src/wolfcrypt/src/aes.c ****             AES_GCM_ghash_block_avx2(AES_LASTGBLOCK(aes), AES_TAG(aes), aes->H);
8813:../src/wolfcrypt/src/aes.c ****         }
8814:../src/wolfcrypt/src/aes.c ****         else
8815:../src/wolfcrypt/src/aes.c ****     #endif
8816:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_INTEL_AVX1
8817:../src/wolfcrypt/src/aes.c ****         if (IS_INTEL_AVX1(intel_flags)) {
8818:../src/wolfcrypt/src/aes.c ****             AES_GCM_ghash_block_avx1(AES_LASTGBLOCK(aes), AES_TAG(aes), aes->H);
8819:../src/wolfcrypt/src/aes.c ****         }
8820:../src/wolfcrypt/src/aes.c ****         else
8821:../src/wolfcrypt/src/aes.c ****     #endif
8822:../src/wolfcrypt/src/aes.c ****         {
8823:../src/wolfcrypt/src/aes.c ****             AES_GCM_ghash_block_aesni(AES_LASTGBLOCK(aes), AES_TAG(aes),
8824:../src/wolfcrypt/src/aes.c ****                                       aes->H);
8825:../src/wolfcrypt/src/aes.c ****         }
8826:../src/wolfcrypt/src/aes.c ****         /* Clear partial count for next time through. */
8827:../src/wolfcrypt/src/aes.c ****         aes->aOver = 0;
8828:../src/wolfcrypt/src/aes.c ****     }
8829:../src/wolfcrypt/src/aes.c **** 
8830:../src/wolfcrypt/src/aes.c ****     return 0;
8831:../src/wolfcrypt/src/aes.c **** }
8832:../src/wolfcrypt/src/aes.c **** 
8833:../src/wolfcrypt/src/aes.c **** /* Update the AES GCM for encryption with data and/or authentication data.
8834:../src/wolfcrypt/src/aes.c ****  *
8835:../src/wolfcrypt/src/aes.c ****  * Implementation uses AVX2, AVX1 or straight AES-NI optimized assembly code.
8836:../src/wolfcrypt/src/aes.c ****  *
8837:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES object.
8838:../src/wolfcrypt/src/aes.c ****  * @param [out]     c    Buffer to hold cipher text.
8839:../src/wolfcrypt/src/aes.c ****  * @param [in]      p    Buffer holding plaintext.
8840:../src/wolfcrypt/src/aes.c ****  * @param [in]      cSz  Length of cipher text/plaintext in bytes.
8841:../src/wolfcrypt/src/aes.c ****  * @param [in]      a    Buffer holding authentication data.
8842:../src/wolfcrypt/src/aes.c ****  * @param [in]      aSz  Length of authentication data in bytes.
8843:../src/wolfcrypt/src/aes.c ****  */
8844:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int AesGcmEncryptUpdate_aesni(
8845:../src/wolfcrypt/src/aes.c ****     Aes* aes, byte* c, const byte* p, word32 cSz, const byte* a, word32 aSz)
8846:../src/wolfcrypt/src/aes.c **** {
8847:../src/wolfcrypt/src/aes.c ****     word32 blocks;
8848:../src/wolfcrypt/src/aes.c ****     int partial;
8849:../src/wolfcrypt/src/aes.c ****     int ret;
8850:../src/wolfcrypt/src/aes.c **** 
8851:../src/wolfcrypt/src/aes.c ****     SAVE_VECTOR_REGISTERS(return _svr_ret;);
8852:../src/wolfcrypt/src/aes.c ****     /* Hash in A, the Authentication Data */
8853:../src/wolfcrypt/src/aes.c ****     ret = AesGcmAadUpdate_aesni(aes, a, aSz, (cSz > 0) && (c != NULL));
8854:../src/wolfcrypt/src/aes.c ****     if (ret != 0)
8855:../src/wolfcrypt/src/aes.c ****         return ret;
8856:../src/wolfcrypt/src/aes.c **** 
8857:../src/wolfcrypt/src/aes.c ****     /* Encrypt plaintext and Hash in C, the Cipher text */
8858:../src/wolfcrypt/src/aes.c ****     if (cSz != 0 && c != NULL) {
8859:../src/wolfcrypt/src/aes.c ****         /* Update count of cipher text we have hashed. */
8860:../src/wolfcrypt/src/aes.c ****         aes->cSz += cSz;
8861:../src/wolfcrypt/src/aes.c ****         if (aes->cOver > 0) {
8862:../src/wolfcrypt/src/aes.c ****             /* Calculate amount we can use - fill up the block. */
8863:../src/wolfcrypt/src/aes.c ****             byte sz = AES_BLOCK_SIZE - aes->cOver;
8864:../src/wolfcrypt/src/aes.c ****             if (sz > cSz) {
8865:../src/wolfcrypt/src/aes.c ****                 sz = cSz;
8866:../src/wolfcrypt/src/aes.c ****             }
8867:../src/wolfcrypt/src/aes.c ****             /* Encrypt some of the plaintext. */
8868:../src/wolfcrypt/src/aes.c ****             xorbuf(AES_LASTGBLOCK(aes) + aes->cOver, p, sz);
8869:../src/wolfcrypt/src/aes.c ****             XMEMCPY(c, AES_LASTGBLOCK(aes) + aes->cOver, sz);
8870:../src/wolfcrypt/src/aes.c ****             /* Update count of unsed encrypted counter. */
8871:../src/wolfcrypt/src/aes.c ****             aes->cOver += sz;
8872:../src/wolfcrypt/src/aes.c ****             if (aes->cOver == AES_BLOCK_SIZE) {
8873:../src/wolfcrypt/src/aes.c ****                 /* We have filled up the block and can process. */
8874:../src/wolfcrypt/src/aes.c ****             #ifdef HAVE_INTEL_AVX2
8875:../src/wolfcrypt/src/aes.c ****                 if (IS_INTEL_AVX2(intel_flags)) {
8876:../src/wolfcrypt/src/aes.c ****                     AES_GCM_ghash_block_avx2(AES_LASTGBLOCK(aes), AES_TAG(aes),
8877:../src/wolfcrypt/src/aes.c ****                                              aes->H);
8878:../src/wolfcrypt/src/aes.c ****                 }
8879:../src/wolfcrypt/src/aes.c ****                 else
8880:../src/wolfcrypt/src/aes.c ****             #endif
8881:../src/wolfcrypt/src/aes.c ****             #ifdef HAVE_INTEL_AVX1
8882:../src/wolfcrypt/src/aes.c ****                 if (IS_INTEL_AVX1(intel_flags)) {
8883:../src/wolfcrypt/src/aes.c ****                     AES_GCM_ghash_block_avx1(AES_LASTGBLOCK(aes), AES_TAG(aes),
8884:../src/wolfcrypt/src/aes.c ****                                              aes->H);
8885:../src/wolfcrypt/src/aes.c ****                 }
8886:../src/wolfcrypt/src/aes.c ****                 else
8887:../src/wolfcrypt/src/aes.c ****             #endif
8888:../src/wolfcrypt/src/aes.c ****                 {
8889:../src/wolfcrypt/src/aes.c ****                     AES_GCM_ghash_block_aesni(AES_LASTGBLOCK(aes), AES_TAG(aes),
8890:../src/wolfcrypt/src/aes.c ****                                               aes->H);
8891:../src/wolfcrypt/src/aes.c ****                 }
8892:../src/wolfcrypt/src/aes.c ****                 /* Reset count. */
8893:../src/wolfcrypt/src/aes.c ****                 aes->cOver = 0;
8894:../src/wolfcrypt/src/aes.c ****             }
8895:../src/wolfcrypt/src/aes.c ****             /* Used up some data. */
8896:../src/wolfcrypt/src/aes.c ****             cSz -= sz;
8897:../src/wolfcrypt/src/aes.c ****             p += sz;
8898:../src/wolfcrypt/src/aes.c ****             c += sz;
8899:../src/wolfcrypt/src/aes.c ****         }
8900:../src/wolfcrypt/src/aes.c **** 
8901:../src/wolfcrypt/src/aes.c ****         /* Calculate number of blocks of plaintext and the leftover. */
8902:../src/wolfcrypt/src/aes.c ****         blocks = cSz / AES_BLOCK_SIZE;
8903:../src/wolfcrypt/src/aes.c ****         partial = cSz % AES_BLOCK_SIZE;
8904:../src/wolfcrypt/src/aes.c ****         if (blocks > 0) {
8905:../src/wolfcrypt/src/aes.c ****             /* Encrypt and GHASH full blocks now. */
8906:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX2
8907:../src/wolfcrypt/src/aes.c ****             if (IS_INTEL_AVX2(intel_flags)) {
8908:../src/wolfcrypt/src/aes.c ****                 AES_GCM_encrypt_update_avx2((byte*)aes->key, aes->rounds, c, p,
8909:../src/wolfcrypt/src/aes.c ****                     blocks * AES_BLOCK_SIZE, AES_TAG(aes), aes->H,
8910:../src/wolfcrypt/src/aes.c ****                     AES_COUNTER(aes));
8911:../src/wolfcrypt/src/aes.c ****             }
8912:../src/wolfcrypt/src/aes.c ****             else
8913:../src/wolfcrypt/src/aes.c ****         #endif
8914:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX1
8915:../src/wolfcrypt/src/aes.c ****             if (IS_INTEL_AVX1(intel_flags)) {
8916:../src/wolfcrypt/src/aes.c ****                 AES_GCM_encrypt_update_avx1((byte*)aes->key, aes->rounds, c, p,
8917:../src/wolfcrypt/src/aes.c ****                     blocks * AES_BLOCK_SIZE, AES_TAG(aes), aes->H,
8918:../src/wolfcrypt/src/aes.c ****                     AES_COUNTER(aes));
8919:../src/wolfcrypt/src/aes.c ****             }
8920:../src/wolfcrypt/src/aes.c ****             else
8921:../src/wolfcrypt/src/aes.c ****         #endif
8922:../src/wolfcrypt/src/aes.c ****             {
8923:../src/wolfcrypt/src/aes.c ****                 AES_GCM_encrypt_update_aesni((byte*)aes->key, aes->rounds, c, p,
8924:../src/wolfcrypt/src/aes.c ****                     blocks * AES_BLOCK_SIZE, AES_TAG(aes), aes->H,
8925:../src/wolfcrypt/src/aes.c ****                     AES_COUNTER(aes));
8926:../src/wolfcrypt/src/aes.c ****             }
8927:../src/wolfcrypt/src/aes.c ****             /* Skip over to end of blocks. */
8928:../src/wolfcrypt/src/aes.c ****             p += blocks * AES_BLOCK_SIZE;
8929:../src/wolfcrypt/src/aes.c ****             c += blocks * AES_BLOCK_SIZE;
8930:../src/wolfcrypt/src/aes.c ****         }
8931:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
8932:../src/wolfcrypt/src/aes.c ****             /* Encrypt the counter - XOR in zeros as proxy for plaintext. */
8933:../src/wolfcrypt/src/aes.c ****             XMEMSET(AES_LASTGBLOCK(aes), 0, AES_BLOCK_SIZE);
8934:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX2
8935:../src/wolfcrypt/src/aes.c ****             if (IS_INTEL_AVX2(intel_flags)) {
8936:../src/wolfcrypt/src/aes.c ****                 AES_GCM_encrypt_block_avx2((byte*)aes->key, aes->rounds,
8937:../src/wolfcrypt/src/aes.c ****                     AES_LASTGBLOCK(aes), AES_LASTGBLOCK(aes), AES_COUNTER(aes));
8938:../src/wolfcrypt/src/aes.c ****             }
8939:../src/wolfcrypt/src/aes.c ****             else
8940:../src/wolfcrypt/src/aes.c ****         #endif
8941:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX1
8942:../src/wolfcrypt/src/aes.c ****             if (IS_INTEL_AVX1(intel_flags)) {
8943:../src/wolfcrypt/src/aes.c ****                 AES_GCM_encrypt_block_avx1((byte*)aes->key, aes->rounds,
8944:../src/wolfcrypt/src/aes.c ****                     AES_LASTGBLOCK(aes), AES_LASTGBLOCK(aes), AES_COUNTER(aes));
8945:../src/wolfcrypt/src/aes.c ****             }
8946:../src/wolfcrypt/src/aes.c ****             else
8947:../src/wolfcrypt/src/aes.c ****         #endif
8948:../src/wolfcrypt/src/aes.c ****             {
8949:../src/wolfcrypt/src/aes.c ****                 AES_GCM_encrypt_block_aesni((byte*)aes->key, aes->rounds,
8950:../src/wolfcrypt/src/aes.c ****                     AES_LASTGBLOCK(aes), AES_LASTGBLOCK(aes), AES_COUNTER(aes));
8951:../src/wolfcrypt/src/aes.c ****             }
8952:../src/wolfcrypt/src/aes.c ****             /* XOR the remaining plaintext to calculate cipher text.
8953:../src/wolfcrypt/src/aes.c ****              * Keep cipher text for GHASH of last partial block.
8954:../src/wolfcrypt/src/aes.c ****              */
8955:../src/wolfcrypt/src/aes.c ****             xorbuf(AES_LASTGBLOCK(aes), p, partial);
8956:../src/wolfcrypt/src/aes.c ****             XMEMCPY(c, AES_LASTGBLOCK(aes), partial);
8957:../src/wolfcrypt/src/aes.c ****             /* Update count of the block used. */
8958:../src/wolfcrypt/src/aes.c ****             aes->cOver = (byte)partial;
8959:../src/wolfcrypt/src/aes.c ****         }
8960:../src/wolfcrypt/src/aes.c ****     }
8961:../src/wolfcrypt/src/aes.c ****     RESTORE_VECTOR_REGISTERS();
8962:../src/wolfcrypt/src/aes.c ****     return 0;
8963:../src/wolfcrypt/src/aes.c **** }
8964:../src/wolfcrypt/src/aes.c **** 
8965:../src/wolfcrypt/src/aes.c **** /* Finalize the AES GCM for encryption and calculate the authentication tag.
8966:../src/wolfcrypt/src/aes.c ****  *
8967:../src/wolfcrypt/src/aes.c ****  * Calls AVX2, AVX1 or straight AES-NI optimized assembly code.
8968:../src/wolfcrypt/src/aes.c ****  *
8969:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes        AES object.
8970:../src/wolfcrypt/src/aes.c ****  * @param [in]      authTag    Buffer to hold authentication tag.
8971:../src/wolfcrypt/src/aes.c ****  * @param [in]      authTagSz  Length of authentication tag in bytes.
8972:../src/wolfcrypt/src/aes.c ****  * @return  0 on success.
8973:../src/wolfcrypt/src/aes.c ****  */
8974:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int AesGcmEncryptFinal_aesni(
8975:../src/wolfcrypt/src/aes.c ****     Aes* aes, byte* authTag, word32 authTagSz)
8976:../src/wolfcrypt/src/aes.c **** {
8977:../src/wolfcrypt/src/aes.c ****     /* AAD block incomplete when > 0 */
8978:../src/wolfcrypt/src/aes.c ****     byte over = aes->aOver;
8979:../src/wolfcrypt/src/aes.c **** 
8980:../src/wolfcrypt/src/aes.c ****     SAVE_VECTOR_REGISTERS(return _svr_ret;);
8981:../src/wolfcrypt/src/aes.c ****     if (aes->cOver > 0) {
8982:../src/wolfcrypt/src/aes.c ****         /* Cipher text block incomplete. */
8983:../src/wolfcrypt/src/aes.c ****         over = aes->cOver;
8984:../src/wolfcrypt/src/aes.c ****     }
8985:../src/wolfcrypt/src/aes.c ****     if (over > 0) {
8986:../src/wolfcrypt/src/aes.c ****         /* Fill the rest of the block with zeros. */
8987:../src/wolfcrypt/src/aes.c ****         XMEMSET(AES_LASTGBLOCK(aes) + over, 0, AES_BLOCK_SIZE - over);
8988:../src/wolfcrypt/src/aes.c ****         /* GHASH last cipher block. */
8989:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_INTEL_AVX2
8990:../src/wolfcrypt/src/aes.c ****         if (IS_INTEL_AVX2(intel_flags)) {
8991:../src/wolfcrypt/src/aes.c ****             AES_GCM_ghash_block_avx2(AES_LASTGBLOCK(aes), AES_TAG(aes), aes->H);
8992:../src/wolfcrypt/src/aes.c ****         }
8993:../src/wolfcrypt/src/aes.c ****         else
8994:../src/wolfcrypt/src/aes.c ****     #endif
8995:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_INTEL_AVX1
8996:../src/wolfcrypt/src/aes.c ****         if (IS_INTEL_AVX1(intel_flags)) {
8997:../src/wolfcrypt/src/aes.c ****             AES_GCM_ghash_block_avx1(AES_LASTGBLOCK(aes), AES_TAG(aes), aes->H);
8998:../src/wolfcrypt/src/aes.c ****         }
8999:../src/wolfcrypt/src/aes.c ****         else
9000:../src/wolfcrypt/src/aes.c ****     #endif
9001:../src/wolfcrypt/src/aes.c ****         {
9002:../src/wolfcrypt/src/aes.c ****             AES_GCM_ghash_block_aesni(AES_LASTGBLOCK(aes), AES_TAG(aes),
9003:../src/wolfcrypt/src/aes.c ****                                       aes->H);
9004:../src/wolfcrypt/src/aes.c ****         }
9005:../src/wolfcrypt/src/aes.c ****     }
9006:../src/wolfcrypt/src/aes.c ****     /* Calculate the authentication tag. */
9007:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX2
9008:../src/wolfcrypt/src/aes.c ****     if (IS_INTEL_AVX2(intel_flags)) {
9009:../src/wolfcrypt/src/aes.c ****         AES_GCM_encrypt_final_avx2(AES_TAG(aes), authTag, authTagSz, aes->cSz,
9010:../src/wolfcrypt/src/aes.c ****             aes->aSz, aes->H, AES_INITCTR(aes));
9011:../src/wolfcrypt/src/aes.c ****     }
9012:../src/wolfcrypt/src/aes.c ****     else
9013:../src/wolfcrypt/src/aes.c **** #endif
9014:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX1
9015:../src/wolfcrypt/src/aes.c ****     if (IS_INTEL_AVX1(intel_flags)) {
9016:../src/wolfcrypt/src/aes.c ****         AES_GCM_encrypt_final_avx1(AES_TAG(aes), authTag, authTagSz, aes->cSz,
9017:../src/wolfcrypt/src/aes.c ****             aes->aSz, aes->H, AES_INITCTR(aes));
9018:../src/wolfcrypt/src/aes.c ****     }
9019:../src/wolfcrypt/src/aes.c ****     else
9020:../src/wolfcrypt/src/aes.c **** #endif
9021:../src/wolfcrypt/src/aes.c ****     {
9022:../src/wolfcrypt/src/aes.c ****         AES_GCM_encrypt_final_aesni(AES_TAG(aes), authTag, authTagSz, aes->cSz,
9023:../src/wolfcrypt/src/aes.c ****             aes->aSz, aes->H, AES_INITCTR(aes));
9024:../src/wolfcrypt/src/aes.c ****     }
9025:../src/wolfcrypt/src/aes.c ****     RESTORE_VECTOR_REGISTERS();
9026:../src/wolfcrypt/src/aes.c ****     return 0;
9027:../src/wolfcrypt/src/aes.c **** }
9028:../src/wolfcrypt/src/aes.c **** 
9029:../src/wolfcrypt/src/aes.c **** #if defined(HAVE_AES_DECRYPT) || defined(HAVE_AESGCM_DECRYPT)
9030:../src/wolfcrypt/src/aes.c **** 
9031:../src/wolfcrypt/src/aes.c **** #ifdef __cplusplus
9032:../src/wolfcrypt/src/aes.c ****     extern "C" {
9033:../src/wolfcrypt/src/aes.c **** #endif
9034:../src/wolfcrypt/src/aes.c **** 
9035:../src/wolfcrypt/src/aes.c **** /* Assembly code implementations in: aes_gcm_asm.S */
9036:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX2
9037:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_decrypt_update_avx2(const unsigned char* key, int nr,
9038:../src/wolfcrypt/src/aes.c ****     unsigned char* out, const unsigned char* in, unsigned int nbytes,
9039:../src/wolfcrypt/src/aes.c ****     unsigned char* tag, unsigned char* h, unsigned char* counter);
9040:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_decrypt_final_avx2(unsigned char* tag,
9041:../src/wolfcrypt/src/aes.c ****     const unsigned char* authTag, unsigned int tbytes, unsigned int nbytes,
9042:../src/wolfcrypt/src/aes.c ****     unsigned int abytes, unsigned char* h, unsigned char* initCtr, int* res);
9043:../src/wolfcrypt/src/aes.c **** #endif
9044:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX1
9045:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_decrypt_update_avx1(const unsigned char* key, int nr,
9046:../src/wolfcrypt/src/aes.c ****     unsigned char* out, const unsigned char* in, unsigned int nbytes,
9047:../src/wolfcrypt/src/aes.c ****     unsigned char* tag, unsigned char* h, unsigned char* counter);
9048:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_decrypt_final_avx1(unsigned char* tag,
9049:../src/wolfcrypt/src/aes.c ****     const unsigned char* authTag, unsigned int tbytes, unsigned int nbytes,
9050:../src/wolfcrypt/src/aes.c ****     unsigned int abytes, unsigned char* h, unsigned char* initCtr, int* res);
9051:../src/wolfcrypt/src/aes.c **** #endif
9052:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_decrypt_update_aesni(const unsigned char* key, int nr,
9053:../src/wolfcrypt/src/aes.c ****     unsigned char* out, const unsigned char* in, unsigned int nbytes,
9054:../src/wolfcrypt/src/aes.c ****     unsigned char* tag, unsigned char* h, unsigned char* counter);
9055:../src/wolfcrypt/src/aes.c **** extern void AES_GCM_decrypt_final_aesni(unsigned char* tag,
9056:../src/wolfcrypt/src/aes.c ****     const unsigned char* authTag, unsigned int tbytes, unsigned int nbytes,
9057:../src/wolfcrypt/src/aes.c ****     unsigned int abytes, unsigned char* h, unsigned char* initCtr, int* res);
9058:../src/wolfcrypt/src/aes.c **** 
9059:../src/wolfcrypt/src/aes.c **** #ifdef __cplusplus
9060:../src/wolfcrypt/src/aes.c ****     } /* extern "C" */
9061:../src/wolfcrypt/src/aes.c **** #endif
9062:../src/wolfcrypt/src/aes.c **** 
9063:../src/wolfcrypt/src/aes.c **** /* Update the AES GCM for decryption with data and/or authentication data.
9064:../src/wolfcrypt/src/aes.c ****  *
9065:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes  AES object.
9066:../src/wolfcrypt/src/aes.c ****  * @param [out]     p    Buffer to hold plaintext.
9067:../src/wolfcrypt/src/aes.c ****  * @param [in]      c    Buffer holding ciper text.
9068:../src/wolfcrypt/src/aes.c ****  * @param [in]      cSz  Length of cipher text/plaintext in bytes.
9069:../src/wolfcrypt/src/aes.c ****  * @param [in]      a    Buffer holding authentication data.
9070:../src/wolfcrypt/src/aes.c ****  * @param [in]      aSz  Length of authentication data in bytes.
9071:../src/wolfcrypt/src/aes.c ****  */
9072:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int AesGcmDecryptUpdate_aesni(
9073:../src/wolfcrypt/src/aes.c ****     Aes* aes, byte* p, const byte* c, word32 cSz, const byte* a, word32 aSz)
9074:../src/wolfcrypt/src/aes.c **** {
9075:../src/wolfcrypt/src/aes.c ****     word32 blocks;
9076:../src/wolfcrypt/src/aes.c ****     int partial;
9077:../src/wolfcrypt/src/aes.c ****     int ret;
9078:../src/wolfcrypt/src/aes.c **** 
9079:../src/wolfcrypt/src/aes.c ****     SAVE_VECTOR_REGISTERS(return _svr_ret;);
9080:../src/wolfcrypt/src/aes.c ****     /* Hash in A, the Authentication Data */
9081:../src/wolfcrypt/src/aes.c ****     ret = AesGcmAadUpdate_aesni(aes, a, aSz, (cSz > 0) && (c != NULL));
9082:../src/wolfcrypt/src/aes.c ****     if (ret != 0)
9083:../src/wolfcrypt/src/aes.c ****         return ret;
9084:../src/wolfcrypt/src/aes.c **** 
9085:../src/wolfcrypt/src/aes.c ****     /* Hash in C, the Cipher text, and decrypt. */
9086:../src/wolfcrypt/src/aes.c ****     if (cSz != 0 && p != NULL) {
9087:../src/wolfcrypt/src/aes.c ****         /* Update count of cipher text we have hashed. */
9088:../src/wolfcrypt/src/aes.c ****         aes->cSz += cSz;
9089:../src/wolfcrypt/src/aes.c ****         if (aes->cOver > 0) {
9090:../src/wolfcrypt/src/aes.c ****             /* Calculate amount we can use - fill up the block. */
9091:../src/wolfcrypt/src/aes.c ****             byte sz = AES_BLOCK_SIZE - aes->cOver;
9092:../src/wolfcrypt/src/aes.c ****             if (sz > cSz) {
9093:../src/wolfcrypt/src/aes.c ****                 sz = cSz;
9094:../src/wolfcrypt/src/aes.c ****             }
9095:../src/wolfcrypt/src/aes.c ****             /* Keep a copy of the cipher text for GHASH. */
9096:../src/wolfcrypt/src/aes.c ****             XMEMCPY(AES_LASTBLOCK(aes) + aes->cOver, c, sz);
9097:../src/wolfcrypt/src/aes.c ****             /* Decrypt some of the cipher text. */
9098:../src/wolfcrypt/src/aes.c ****             xorbuf(AES_LASTGBLOCK(aes) + aes->cOver, c, sz);
9099:../src/wolfcrypt/src/aes.c ****             XMEMCPY(p, AES_LASTGBLOCK(aes) + aes->cOver, sz);
9100:../src/wolfcrypt/src/aes.c ****             /* Update count of unsed encrypted counter. */
9101:../src/wolfcrypt/src/aes.c ****             aes->cOver += sz;
9102:../src/wolfcrypt/src/aes.c ****             if (aes->cOver == AES_BLOCK_SIZE) {
9103:../src/wolfcrypt/src/aes.c ****                 /* We have filled up the block and can process. */
9104:../src/wolfcrypt/src/aes.c ****             #ifdef HAVE_INTEL_AVX2
9105:../src/wolfcrypt/src/aes.c ****                 if (IS_INTEL_AVX2(intel_flags)) {
9106:../src/wolfcrypt/src/aes.c ****                     AES_GCM_ghash_block_avx2(AES_LASTBLOCK(aes), AES_TAG(aes),
9107:../src/wolfcrypt/src/aes.c ****                                              aes->H);
9108:../src/wolfcrypt/src/aes.c ****                 }
9109:../src/wolfcrypt/src/aes.c ****                 else
9110:../src/wolfcrypt/src/aes.c ****             #endif
9111:../src/wolfcrypt/src/aes.c ****             #ifdef HAVE_INTEL_AVX1
9112:../src/wolfcrypt/src/aes.c ****                 if (IS_INTEL_AVX1(intel_flags)) {
9113:../src/wolfcrypt/src/aes.c ****                     AES_GCM_ghash_block_avx1(AES_LASTBLOCK(aes), AES_TAG(aes),
9114:../src/wolfcrypt/src/aes.c ****                                              aes->H);
9115:../src/wolfcrypt/src/aes.c ****                 }
9116:../src/wolfcrypt/src/aes.c ****                 else
9117:../src/wolfcrypt/src/aes.c ****             #endif
9118:../src/wolfcrypt/src/aes.c ****                 {
9119:../src/wolfcrypt/src/aes.c ****                     AES_GCM_ghash_block_aesni(AES_LASTBLOCK(aes), AES_TAG(aes),
9120:../src/wolfcrypt/src/aes.c ****                                               aes->H);
9121:../src/wolfcrypt/src/aes.c ****                 }
9122:../src/wolfcrypt/src/aes.c ****                 /* Reset count. */
9123:../src/wolfcrypt/src/aes.c ****                 aes->cOver = 0;
9124:../src/wolfcrypt/src/aes.c ****             }
9125:../src/wolfcrypt/src/aes.c ****             /* Used up some data. */
9126:../src/wolfcrypt/src/aes.c ****             cSz -= sz;
9127:../src/wolfcrypt/src/aes.c ****             c += sz;
9128:../src/wolfcrypt/src/aes.c ****             p += sz;
9129:../src/wolfcrypt/src/aes.c ****         }
9130:../src/wolfcrypt/src/aes.c **** 
9131:../src/wolfcrypt/src/aes.c ****         /* Calculate number of blocks of plaintext and the leftover. */
9132:../src/wolfcrypt/src/aes.c ****         blocks = cSz / AES_BLOCK_SIZE;
9133:../src/wolfcrypt/src/aes.c ****         partial = cSz % AES_BLOCK_SIZE;
9134:../src/wolfcrypt/src/aes.c ****         if (blocks > 0) {
9135:../src/wolfcrypt/src/aes.c ****             /* Decrypt and GHASH full blocks now. */
9136:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX2
9137:../src/wolfcrypt/src/aes.c ****             if (IS_INTEL_AVX2(intel_flags)) {
9138:../src/wolfcrypt/src/aes.c ****                 AES_GCM_decrypt_update_avx2((byte*)aes->key, aes->rounds, p, c,
9139:../src/wolfcrypt/src/aes.c ****                     blocks * AES_BLOCK_SIZE, AES_TAG(aes), aes->H,
9140:../src/wolfcrypt/src/aes.c ****                     AES_COUNTER(aes));
9141:../src/wolfcrypt/src/aes.c ****             }
9142:../src/wolfcrypt/src/aes.c ****             else
9143:../src/wolfcrypt/src/aes.c ****         #endif
9144:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX1
9145:../src/wolfcrypt/src/aes.c ****             if (IS_INTEL_AVX1(intel_flags)) {
9146:../src/wolfcrypt/src/aes.c ****                 AES_GCM_decrypt_update_avx1((byte*)aes->key, aes->rounds, p, c,
9147:../src/wolfcrypt/src/aes.c ****                     blocks * AES_BLOCK_SIZE, AES_TAG(aes), aes->H,
9148:../src/wolfcrypt/src/aes.c ****                     AES_COUNTER(aes));
9149:../src/wolfcrypt/src/aes.c ****             }
9150:../src/wolfcrypt/src/aes.c ****             else
9151:../src/wolfcrypt/src/aes.c ****         #endif
9152:../src/wolfcrypt/src/aes.c ****             {
9153:../src/wolfcrypt/src/aes.c ****                 AES_GCM_decrypt_update_aesni((byte*)aes->key, aes->rounds, p, c,
9154:../src/wolfcrypt/src/aes.c ****                     blocks * AES_BLOCK_SIZE, AES_TAG(aes), aes->H,
9155:../src/wolfcrypt/src/aes.c ****                     AES_COUNTER(aes));
9156:../src/wolfcrypt/src/aes.c ****             }
9157:../src/wolfcrypt/src/aes.c ****             /* Skip over to end of blocks. */
9158:../src/wolfcrypt/src/aes.c ****             c += blocks * AES_BLOCK_SIZE;
9159:../src/wolfcrypt/src/aes.c ****             p += blocks * AES_BLOCK_SIZE;
9160:../src/wolfcrypt/src/aes.c ****         }
9161:../src/wolfcrypt/src/aes.c ****         if (partial != 0) {
9162:../src/wolfcrypt/src/aes.c ****             /* Encrypt the counter - XOR in zeros as proxy for cipher text. */
9163:../src/wolfcrypt/src/aes.c ****             XMEMSET(AES_LASTGBLOCK(aes), 0, AES_BLOCK_SIZE);
9164:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX2
9165:../src/wolfcrypt/src/aes.c ****             if (IS_INTEL_AVX2(intel_flags)) {
9166:../src/wolfcrypt/src/aes.c ****                 AES_GCM_encrypt_block_avx2((byte*)aes->key, aes->rounds,
9167:../src/wolfcrypt/src/aes.c ****                     AES_LASTGBLOCK(aes), AES_LASTGBLOCK(aes), AES_COUNTER(aes));
9168:../src/wolfcrypt/src/aes.c ****             }
9169:../src/wolfcrypt/src/aes.c ****             else
9170:../src/wolfcrypt/src/aes.c ****         #endif
9171:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX1
9172:../src/wolfcrypt/src/aes.c ****             if (IS_INTEL_AVX1(intel_flags)) {
9173:../src/wolfcrypt/src/aes.c ****                 AES_GCM_encrypt_block_avx1((byte*)aes->key, aes->rounds,
9174:../src/wolfcrypt/src/aes.c ****                     AES_LASTGBLOCK(aes), AES_LASTGBLOCK(aes), AES_COUNTER(aes));
9175:../src/wolfcrypt/src/aes.c ****             }
9176:../src/wolfcrypt/src/aes.c ****             else
9177:../src/wolfcrypt/src/aes.c ****         #endif
9178:../src/wolfcrypt/src/aes.c ****             {
9179:../src/wolfcrypt/src/aes.c ****                 AES_GCM_encrypt_block_aesni((byte*)aes->key, aes->rounds,
9180:../src/wolfcrypt/src/aes.c ****                     AES_LASTGBLOCK(aes), AES_LASTGBLOCK(aes), AES_COUNTER(aes));
9181:../src/wolfcrypt/src/aes.c ****             }
9182:../src/wolfcrypt/src/aes.c ****             /* Keep cipher text for GHASH of last partial block. */
9183:../src/wolfcrypt/src/aes.c ****             XMEMCPY(AES_LASTBLOCK(aes), c, partial);
9184:../src/wolfcrypt/src/aes.c ****             /* XOR the remaining cipher text to calculate plaintext. */
9185:../src/wolfcrypt/src/aes.c ****             xorbuf(AES_LASTGBLOCK(aes), c, partial);
9186:../src/wolfcrypt/src/aes.c ****             XMEMCPY(p, AES_LASTGBLOCK(aes), partial);
9187:../src/wolfcrypt/src/aes.c ****             /* Update count of the block used. */
9188:../src/wolfcrypt/src/aes.c ****             aes->cOver = (byte)partial;
9189:../src/wolfcrypt/src/aes.c ****         }
9190:../src/wolfcrypt/src/aes.c ****     }
9191:../src/wolfcrypt/src/aes.c ****     RESTORE_VECTOR_REGISTERS();
9192:../src/wolfcrypt/src/aes.c ****     return 0;
9193:../src/wolfcrypt/src/aes.c **** }
9194:../src/wolfcrypt/src/aes.c **** 
9195:../src/wolfcrypt/src/aes.c **** /* Finalize the AES GCM for decryption and check the authentication tag.
9196:../src/wolfcrypt/src/aes.c ****  *
9197:../src/wolfcrypt/src/aes.c ****  * Calls AVX2, AVX1 or straight AES-NI optimized assembly code.
9198:../src/wolfcrypt/src/aes.c ****  *
9199:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes        AES object.
9200:../src/wolfcrypt/src/aes.c ****  * @param [in]      authTag    Buffer holding authentication tag.
9201:../src/wolfcrypt/src/aes.c ****  * @param [in]      authTagSz  Length of authentication tag in bytes.
9202:../src/wolfcrypt/src/aes.c ****  * @return  0 on success.
9203:../src/wolfcrypt/src/aes.c ****  * @return  AES_GCM_AUTH_E when authentication tag doesn't match calculated
9204:../src/wolfcrypt/src/aes.c ****  *          value.
9205:../src/wolfcrypt/src/aes.c ****  */
9206:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int AesGcmDecryptFinal_aesni(
9207:../src/wolfcrypt/src/aes.c ****     Aes* aes, const byte* authTag, word32 authTagSz)
9208:../src/wolfcrypt/src/aes.c **** {
9209:../src/wolfcrypt/src/aes.c ****     int ret = 0;
9210:../src/wolfcrypt/src/aes.c ****     int res;
9211:../src/wolfcrypt/src/aes.c ****     /* AAD block incomplete when > 0 */
9212:../src/wolfcrypt/src/aes.c ****     byte over = aes->aOver;
9213:../src/wolfcrypt/src/aes.c ****     byte *lastBlock = AES_LASTGBLOCK(aes);
9214:../src/wolfcrypt/src/aes.c **** 
9215:../src/wolfcrypt/src/aes.c ****     SAVE_VECTOR_REGISTERS(return _svr_ret;);
9216:../src/wolfcrypt/src/aes.c ****     if (aes->cOver > 0) {
9217:../src/wolfcrypt/src/aes.c ****         /* Cipher text block incomplete. */
9218:../src/wolfcrypt/src/aes.c ****         over = aes->cOver;
9219:../src/wolfcrypt/src/aes.c ****         lastBlock = AES_LASTBLOCK(aes);
9220:../src/wolfcrypt/src/aes.c ****     }
9221:../src/wolfcrypt/src/aes.c ****     if (over > 0) {
9222:../src/wolfcrypt/src/aes.c ****         /* Zeroize the unused part of the block. */
9223:../src/wolfcrypt/src/aes.c ****         XMEMSET(lastBlock + over, 0, AES_BLOCK_SIZE - over);
9224:../src/wolfcrypt/src/aes.c ****         /* Hash the last block of cipher text. */
9225:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_INTEL_AVX2
9226:../src/wolfcrypt/src/aes.c ****         if (IS_INTEL_AVX2(intel_flags)) {
9227:../src/wolfcrypt/src/aes.c ****             AES_GCM_ghash_block_avx2(lastBlock, AES_TAG(aes), aes->H);
9228:../src/wolfcrypt/src/aes.c ****         }
9229:../src/wolfcrypt/src/aes.c ****         else
9230:../src/wolfcrypt/src/aes.c ****     #endif
9231:../src/wolfcrypt/src/aes.c ****     #ifdef HAVE_INTEL_AVX1
9232:../src/wolfcrypt/src/aes.c ****         if (IS_INTEL_AVX1(intel_flags)) {
9233:../src/wolfcrypt/src/aes.c ****             AES_GCM_ghash_block_avx1(lastBlock, AES_TAG(aes), aes->H);
9234:../src/wolfcrypt/src/aes.c ****         }
9235:../src/wolfcrypt/src/aes.c ****         else
9236:../src/wolfcrypt/src/aes.c ****     #endif
9237:../src/wolfcrypt/src/aes.c ****         {
9238:../src/wolfcrypt/src/aes.c ****             AES_GCM_ghash_block_aesni(lastBlock, AES_TAG(aes), aes->H);
9239:../src/wolfcrypt/src/aes.c ****         }
9240:../src/wolfcrypt/src/aes.c ****     }
9241:../src/wolfcrypt/src/aes.c ****     /* Calculate and compare the authentication tag. */
9242:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX2
9243:../src/wolfcrypt/src/aes.c ****     if (IS_INTEL_AVX2(intel_flags)) {
9244:../src/wolfcrypt/src/aes.c ****         AES_GCM_decrypt_final_avx2(AES_TAG(aes), authTag, authTagSz, aes->cSz,
9245:../src/wolfcrypt/src/aes.c ****             aes->aSz, aes->H, AES_INITCTR(aes), &res);
9246:../src/wolfcrypt/src/aes.c ****     }
9247:../src/wolfcrypt/src/aes.c ****     else
9248:../src/wolfcrypt/src/aes.c **** #endif
9249:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_INTEL_AVX1
9250:../src/wolfcrypt/src/aes.c ****     if (IS_INTEL_AVX1(intel_flags)) {
9251:../src/wolfcrypt/src/aes.c ****         AES_GCM_decrypt_final_avx1(AES_TAG(aes), authTag, authTagSz, aes->cSz,
9252:../src/wolfcrypt/src/aes.c ****             aes->aSz, aes->H, AES_INITCTR(aes), &res);
9253:../src/wolfcrypt/src/aes.c ****     }
9254:../src/wolfcrypt/src/aes.c ****     else
9255:../src/wolfcrypt/src/aes.c **** #endif
9256:../src/wolfcrypt/src/aes.c ****     {
9257:../src/wolfcrypt/src/aes.c ****         AES_GCM_decrypt_final_aesni(AES_TAG(aes), authTag, authTagSz, aes->cSz,
9258:../src/wolfcrypt/src/aes.c ****             aes->aSz, aes->H, AES_INITCTR(aes), &res);
9259:../src/wolfcrypt/src/aes.c ****     }
9260:../src/wolfcrypt/src/aes.c ****     RESTORE_VECTOR_REGISTERS();
9261:../src/wolfcrypt/src/aes.c ****     /* Return error code when calculated doesn't match input. */
9262:../src/wolfcrypt/src/aes.c ****     if (res == 0) {
9263:../src/wolfcrypt/src/aes.c ****         ret = AES_GCM_AUTH_E;
9264:../src/wolfcrypt/src/aes.c ****     }
9265:../src/wolfcrypt/src/aes.c ****     return ret;
9266:../src/wolfcrypt/src/aes.c **** }
9267:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_DECRYPT || HAVE_AESGCM_DECRYPT */
9268:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AESNI */
9269:../src/wolfcrypt/src/aes.c **** 
9270:../src/wolfcrypt/src/aes.c **** /* Initialize an AES GCM cipher for encryption or decryption.
9271:../src/wolfcrypt/src/aes.c ****  *
9272:../src/wolfcrypt/src/aes.c ****  * Must call wc_AesInit() before calling this function.
9273:../src/wolfcrypt/src/aes.c ****  *
9274:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes   AES object.
9275:../src/wolfcrypt/src/aes.c ****  * @param [in]      key   Buffer holding key.
9276:../src/wolfcrypt/src/aes.c ****  * @param [in]      len   Length of key in bytes.
9277:../src/wolfcrypt/src/aes.c ****  * @param [in]      iv    Buffer holding IV/nonce.
9278:../src/wolfcrypt/src/aes.c ****  * @param [in]      ivSz  Length of IV/nonce in bytes.
9279:../src/wolfcrypt/src/aes.c ****  * @return  0 on success.
9280:../src/wolfcrypt/src/aes.c ****  * @return  BAD_FUNC_ARG when aes is NULL, or a length is non-zero but buffer
9281:../src/wolfcrypt/src/aes.c ****  *          is NULL, or the IV is NULL and no previous IV has been set.
9282:../src/wolfcrypt/src/aes.c ****  * @return  MEMORY_E when dynamic memory allocation fails. (WOLFSSL_SMALL_STACK)
9283:../src/wolfcrypt/src/aes.c ****  */
9284:../src/wolfcrypt/src/aes.c **** int wc_AesGcmInit(Aes* aes, const byte* key, word32 len, const byte* iv,
9285:../src/wolfcrypt/src/aes.c ****     word32 ivSz)
9286:../src/wolfcrypt/src/aes.c **** {
9287:../src/wolfcrypt/src/aes.c ****     int ret = 0;
9288:../src/wolfcrypt/src/aes.c **** 
9289:../src/wolfcrypt/src/aes.c ****     /* Check validity of parameters. */
9290:../src/wolfcrypt/src/aes.c ****     if ((aes == NULL) || ((len > 0) && (key == NULL)) ||
9291:../src/wolfcrypt/src/aes.c ****             ((ivSz == 0) && (iv != NULL)) || (ivSz > AES_BLOCK_SIZE) ||
9292:../src/wolfcrypt/src/aes.c ****             ((ivSz > 0) && (iv == NULL))) {
9293:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
9294:../src/wolfcrypt/src/aes.c ****     }
9295:../src/wolfcrypt/src/aes.c **** 
9296:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_AESNI)
9297:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && (aes->streamData == NULL)) {
9298:../src/wolfcrypt/src/aes.c ****         /* Allocate buffers for streaming. */
9299:../src/wolfcrypt/src/aes.c ****         aes->streamData = (byte*)XMALLOC(5 * AES_BLOCK_SIZE, aes->heap,
9300:../src/wolfcrypt/src/aes.c ****                                                               DYNAMIC_TYPE_AES);
9301:../src/wolfcrypt/src/aes.c ****         if (aes->streamData == NULL) {
9302:../src/wolfcrypt/src/aes.c ****             ret = MEMORY_E;
9303:../src/wolfcrypt/src/aes.c ****         }
9304:../src/wolfcrypt/src/aes.c ****     }
9305:../src/wolfcrypt/src/aes.c **** #endif
9306:../src/wolfcrypt/src/aes.c **** 
9307:../src/wolfcrypt/src/aes.c ****     /* Set the key if passed in. */
9308:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && (key != NULL)) {
9309:../src/wolfcrypt/src/aes.c ****         ret = wc_AesGcmSetKey(aes, key, len);
9310:../src/wolfcrypt/src/aes.c ****     }
9311:../src/wolfcrypt/src/aes.c **** 
9312:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
9313:../src/wolfcrypt/src/aes.c ****         /* Setup with IV if needed. */
9314:../src/wolfcrypt/src/aes.c ****         if (iv != NULL) {
9315:../src/wolfcrypt/src/aes.c ****             /* Cache the IV in AES GCM object. */
9316:../src/wolfcrypt/src/aes.c ****             XMEMCPY((byte*)aes->reg, iv, ivSz);
9317:../src/wolfcrypt/src/aes.c ****             aes->nonceSz = ivSz;
9318:../src/wolfcrypt/src/aes.c ****         }
9319:../src/wolfcrypt/src/aes.c ****         else if (aes->nonceSz != 0) {
9320:../src/wolfcrypt/src/aes.c ****             /* Copy out the cached copy. */
9321:../src/wolfcrypt/src/aes.c ****             iv = (byte*)aes->reg;
9322:../src/wolfcrypt/src/aes.c ****             ivSz = aes->nonceSz;
9323:../src/wolfcrypt/src/aes.c ****         }
9324:../src/wolfcrypt/src/aes.c **** 
9325:../src/wolfcrypt/src/aes.c ****         if (iv != NULL) {
9326:../src/wolfcrypt/src/aes.c ****             /* Initialize with the IV. */
9327:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_AESNI
9328:../src/wolfcrypt/src/aes.c ****             if (haveAESNI
9329:../src/wolfcrypt/src/aes.c ****             #ifdef HAVE_INTEL_AVX2
9330:../src/wolfcrypt/src/aes.c ****                 || IS_INTEL_AVX2(intel_flags)
9331:../src/wolfcrypt/src/aes.c ****             #endif
9332:../src/wolfcrypt/src/aes.c ****             #ifdef HAVE_INTEL_AVX1
9333:../src/wolfcrypt/src/aes.c ****                 || IS_INTEL_AVX1(intel_flags)
9334:../src/wolfcrypt/src/aes.c ****             #endif
9335:../src/wolfcrypt/src/aes.c ****                 ) {
9336:../src/wolfcrypt/src/aes.c ****                 ret = AesGcmInit_aesni(aes, iv, ivSz);
9337:../src/wolfcrypt/src/aes.c ****             }
9338:../src/wolfcrypt/src/aes.c ****             else
9339:../src/wolfcrypt/src/aes.c ****         #endif
9340:../src/wolfcrypt/src/aes.c ****             {
9341:../src/wolfcrypt/src/aes.c ****                 ret = AesGcmInit_C(aes, iv, ivSz);
9342:../src/wolfcrypt/src/aes.c ****             }
9343:../src/wolfcrypt/src/aes.c **** 
9344:../src/wolfcrypt/src/aes.c ****             aes->nonceSet = 1;
9345:../src/wolfcrypt/src/aes.c ****         }
9346:../src/wolfcrypt/src/aes.c ****     }
9347:../src/wolfcrypt/src/aes.c **** 
9348:../src/wolfcrypt/src/aes.c ****     return ret;
9349:../src/wolfcrypt/src/aes.c **** }
9350:../src/wolfcrypt/src/aes.c **** 
9351:../src/wolfcrypt/src/aes.c **** /* Initialize an AES GCM cipher for encryption.
9352:../src/wolfcrypt/src/aes.c ****  *
9353:../src/wolfcrypt/src/aes.c ****  * Must call wc_AesInit() before calling this function.
9354:../src/wolfcrypt/src/aes.c ****  *
9355:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes   AES object.
9356:../src/wolfcrypt/src/aes.c ****  * @param [in]      key   Buffer holding key.
9357:../src/wolfcrypt/src/aes.c ****  * @param [in]      len   Length of key in bytes.
9358:../src/wolfcrypt/src/aes.c ****  * @param [in]      iv    Buffer holding IV/nonce.
9359:../src/wolfcrypt/src/aes.c ****  * @param [in]      ivSz  Length of IV/nonce in bytes.
9360:../src/wolfcrypt/src/aes.c ****  * @return  0 on success.
9361:../src/wolfcrypt/src/aes.c ****  * @return  BAD_FUNC_ARG when aes is NULL, or a length is non-zero but buffer
9362:../src/wolfcrypt/src/aes.c ****  *          is NULL, or the IV is NULL and no previous IV has been set.
9363:../src/wolfcrypt/src/aes.c ****  */
9364:../src/wolfcrypt/src/aes.c **** int wc_AesGcmEncryptInit(Aes* aes, const byte* key, word32 len, const byte* iv,
9365:../src/wolfcrypt/src/aes.c ****     word32 ivSz)
9366:../src/wolfcrypt/src/aes.c **** {
9367:../src/wolfcrypt/src/aes.c ****     return wc_AesGcmInit(aes, key, len, iv, ivSz);
9368:../src/wolfcrypt/src/aes.c **** }
9369:../src/wolfcrypt/src/aes.c **** 
9370:../src/wolfcrypt/src/aes.c **** /* Initialize an AES GCM cipher for encryption or decryption. Get IV.
9371:../src/wolfcrypt/src/aes.c ****  *
9372:../src/wolfcrypt/src/aes.c ****  * Must call wc_AesInit() before calling this function.
9373:../src/wolfcrypt/src/aes.c ****  *
9374:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes   AES object.
9375:../src/wolfcrypt/src/aes.c ****  * @param [in]      key   Buffer holding key.
9376:../src/wolfcrypt/src/aes.c ****  * @param [in]      len   Length of key in bytes.
9377:../src/wolfcrypt/src/aes.c ****  * @param [in]      iv    Buffer holding IV/nonce.
9378:../src/wolfcrypt/src/aes.c ****  * @param [in]      ivSz  Length of IV/nonce in bytes.
9379:../src/wolfcrypt/src/aes.c ****  * @return  0 on success.
9380:../src/wolfcrypt/src/aes.c ****  * @return  BAD_FUNC_ARG when aes is NULL, or a length is non-zero but buffer
9381:../src/wolfcrypt/src/aes.c ****  *          is NULL, or the IV is NULL and no previous IV has been set.
9382:../src/wolfcrypt/src/aes.c ****  */
9383:../src/wolfcrypt/src/aes.c **** int wc_AesGcmEncryptInit_ex(Aes* aes, const byte* key, word32 len, byte* ivOut,
9384:../src/wolfcrypt/src/aes.c ****     word32 ivOutSz)
9385:../src/wolfcrypt/src/aes.c **** {
9386:../src/wolfcrypt/src/aes.c ****     XMEMCPY(ivOut, aes->reg, ivOutSz);
9387:../src/wolfcrypt/src/aes.c ****     return wc_AesGcmInit(aes, key, len, NULL, 0);
9388:../src/wolfcrypt/src/aes.c **** }
9389:../src/wolfcrypt/src/aes.c **** 
9390:../src/wolfcrypt/src/aes.c **** /* Update the AES GCM for encryption with data and/or authentication data.
9391:../src/wolfcrypt/src/aes.c ****  *
9392:../src/wolfcrypt/src/aes.c ****  * All the AAD must be passed to update before the plaintext.
9393:../src/wolfcrypt/src/aes.c ****  * Last part of AAD can be passed with first part of plaintext.
9394:../src/wolfcrypt/src/aes.c ****  *
9395:../src/wolfcrypt/src/aes.c ****  * Must set key and IV before calling this function.
9396:../src/wolfcrypt/src/aes.c ****  * Must call wc_AesGcmInit() before calling this function.
9397:../src/wolfcrypt/src/aes.c ****  *
9398:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes       AES object.
9399:../src/wolfcrypt/src/aes.c ****  * @param [out]     out       Buffer to hold cipher text.
9400:../src/wolfcrypt/src/aes.c ****  * @param [in]      in        Buffer holding plaintext.
9401:../src/wolfcrypt/src/aes.c ****  * @param [in]      sz        Length of plaintext in bytes.
9402:../src/wolfcrypt/src/aes.c ****  * @param [in]      authIn    Buffer holding authentication data.
9403:../src/wolfcrypt/src/aes.c ****  * @param [in]      authInSz  Length of authentication data in bytes.
9404:../src/wolfcrypt/src/aes.c ****  * @return  0 on success.
9405:../src/wolfcrypt/src/aes.c ****  * @return  BAD_FUNC_ARG when aes is NULL, or a length is non-zero but buffer
9406:../src/wolfcrypt/src/aes.c ****  *          is NULL.
9407:../src/wolfcrypt/src/aes.c ****  */
9408:../src/wolfcrypt/src/aes.c **** int wc_AesGcmEncryptUpdate(Aes* aes, byte* out, const byte* in, word32 sz,
9409:../src/wolfcrypt/src/aes.c ****     const byte* authIn, word32 authInSz)
9410:../src/wolfcrypt/src/aes.c **** {
9411:../src/wolfcrypt/src/aes.c ****     int ret = 0;
9412:../src/wolfcrypt/src/aes.c **** 
9413:../src/wolfcrypt/src/aes.c ****     /* Check validity of parameters. */
9414:../src/wolfcrypt/src/aes.c ****     if ((aes == NULL) || ((authInSz > 0) && (authIn == NULL)) || ((sz > 0) &&
9415:../src/wolfcrypt/src/aes.c ****             ((out == NULL) || (in == NULL)))) {
9416:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
9417:../src/wolfcrypt/src/aes.c ****     }
9418:../src/wolfcrypt/src/aes.c **** 
9419:../src/wolfcrypt/src/aes.c ****     /* Check key has been set. */
9420:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && (!aes->gcmKeySet)) {
9421:../src/wolfcrypt/src/aes.c ****         ret = MISSING_KEY;
9422:../src/wolfcrypt/src/aes.c ****     }
9423:../src/wolfcrypt/src/aes.c ****     /* Check IV has been set. */
9424:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && (!aes->nonceSet)) {
9425:../src/wolfcrypt/src/aes.c ****         ret = MISSING_IV;
9426:../src/wolfcrypt/src/aes.c ****     }
9427:../src/wolfcrypt/src/aes.c **** 
9428:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && aes->ctrSet && (aes->aSz == 0) && (aes->cSz == 0)) {
9429:../src/wolfcrypt/src/aes.c ****         aes->invokeCtr[0]++;
9430:../src/wolfcrypt/src/aes.c ****         if (aes->invokeCtr[0] == 0) {
9431:../src/wolfcrypt/src/aes.c ****             aes->invokeCtr[1]++;
9432:../src/wolfcrypt/src/aes.c ****             if (aes->invokeCtr[1] == 0)
9433:../src/wolfcrypt/src/aes.c ****                 ret = AES_GCM_OVERFLOW_E;
9434:../src/wolfcrypt/src/aes.c ****         }
9435:../src/wolfcrypt/src/aes.c ****     }
9436:../src/wolfcrypt/src/aes.c **** 
9437:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
9438:../src/wolfcrypt/src/aes.c ****         /* Encrypt with AAD and/or plaintext. */
9439:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AESNI)
9440:../src/wolfcrypt/src/aes.c ****         if (haveAESNI
9441:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX2
9442:../src/wolfcrypt/src/aes.c ****             || IS_INTEL_AVX2(intel_flags)
9443:../src/wolfcrypt/src/aes.c ****         #endif
9444:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX1
9445:../src/wolfcrypt/src/aes.c ****             || IS_INTEL_AVX1(intel_flags)
9446:../src/wolfcrypt/src/aes.c ****         #endif
9447:../src/wolfcrypt/src/aes.c ****             ) {
9448:../src/wolfcrypt/src/aes.c ****             ret = AesGcmEncryptUpdate_aesni(aes, out, in, sz, authIn, authInSz);
9449:../src/wolfcrypt/src/aes.c ****         }
9450:../src/wolfcrypt/src/aes.c ****         else
9451:../src/wolfcrypt/src/aes.c ****     #endif
9452:../src/wolfcrypt/src/aes.c ****         {
9453:../src/wolfcrypt/src/aes.c ****             /* Encrypt the plaintext. */
9454:../src/wolfcrypt/src/aes.c ****             ret = AesGcmCryptUpdate_C(aes, out, in, sz);
9455:../src/wolfcrypt/src/aes.c ****             if (ret != 0)
9456:../src/wolfcrypt/src/aes.c ****                 return ret;
9457:../src/wolfcrypt/src/aes.c ****             /* Update the authenication tag with any authentication data and the
9458:../src/wolfcrypt/src/aes.c ****              * new cipher text. */
9459:../src/wolfcrypt/src/aes.c ****             GHASH_UPDATE(aes, authIn, authInSz, out, sz);
9460:../src/wolfcrypt/src/aes.c ****         }
9461:../src/wolfcrypt/src/aes.c ****     }
9462:../src/wolfcrypt/src/aes.c **** 
9463:../src/wolfcrypt/src/aes.c ****     return ret;
9464:../src/wolfcrypt/src/aes.c **** }
9465:../src/wolfcrypt/src/aes.c **** 
9466:../src/wolfcrypt/src/aes.c **** /* Finalize the AES GCM for encryption and return the authentication tag.
9467:../src/wolfcrypt/src/aes.c ****  *
9468:../src/wolfcrypt/src/aes.c ****  * Must set key and IV before calling this function.
9469:../src/wolfcrypt/src/aes.c ****  * Must call wc_AesGcmInit() before calling this function.
9470:../src/wolfcrypt/src/aes.c ****  *
9471:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes        AES object.
9472:../src/wolfcrypt/src/aes.c ****  * @param [out]     authTag    Buffer to hold authentication tag.
9473:../src/wolfcrypt/src/aes.c ****  * @param [in]      authTagSz  Length of authentication tag in bytes.
9474:../src/wolfcrypt/src/aes.c ****  * @return  0 on success.
9475:../src/wolfcrypt/src/aes.c ****  */
9476:../src/wolfcrypt/src/aes.c **** int wc_AesGcmEncryptFinal(Aes* aes, byte* authTag, word32 authTagSz)
9477:../src/wolfcrypt/src/aes.c **** {
9478:../src/wolfcrypt/src/aes.c ****     int ret = 0;
9479:../src/wolfcrypt/src/aes.c **** 
9480:../src/wolfcrypt/src/aes.c ****     /* Check validity of parameters. */
9481:../src/wolfcrypt/src/aes.c ****     if ((aes == NULL) || (authTag == NULL) || (authTagSz > AES_BLOCK_SIZE) ||
9482:../src/wolfcrypt/src/aes.c ****             (authTagSz == 0)) {
9483:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
9484:../src/wolfcrypt/src/aes.c ****     }
9485:../src/wolfcrypt/src/aes.c **** 
9486:../src/wolfcrypt/src/aes.c ****     /* Check key has been set. */
9487:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && (!aes->gcmKeySet)) {
9488:../src/wolfcrypt/src/aes.c ****         ret = MISSING_KEY;
9489:../src/wolfcrypt/src/aes.c ****     }
9490:../src/wolfcrypt/src/aes.c ****     /* Check IV has been set. */
9491:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && (!aes->nonceSet)) {
9492:../src/wolfcrypt/src/aes.c ****         ret = MISSING_IV;
9493:../src/wolfcrypt/src/aes.c ****     }
9494:../src/wolfcrypt/src/aes.c **** 
9495:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
9496:../src/wolfcrypt/src/aes.c ****         /* Calculate authentication tag. */
9497:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_AESNI
9498:../src/wolfcrypt/src/aes.c ****         if (haveAESNI
9499:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX2
9500:../src/wolfcrypt/src/aes.c ****             || IS_INTEL_AVX2(intel_flags)
9501:../src/wolfcrypt/src/aes.c ****         #endif
9502:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX1
9503:../src/wolfcrypt/src/aes.c ****             || IS_INTEL_AVX1(intel_flags)
9504:../src/wolfcrypt/src/aes.c ****         #endif
9505:../src/wolfcrypt/src/aes.c ****             ) {
9506:../src/wolfcrypt/src/aes.c ****             ret = AesGcmEncryptFinal_aesni(aes, authTag, authTagSz);
9507:../src/wolfcrypt/src/aes.c ****         }
9508:../src/wolfcrypt/src/aes.c ****         else
9509:../src/wolfcrypt/src/aes.c ****     #endif
9510:../src/wolfcrypt/src/aes.c ****         {
9511:../src/wolfcrypt/src/aes.c ****             ret = AesGcmFinal_C(aes, authTag, authTagSz);
9512:../src/wolfcrypt/src/aes.c ****         }
9513:../src/wolfcrypt/src/aes.c ****     }
9514:../src/wolfcrypt/src/aes.c **** 
9515:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && aes->ctrSet) {
9516:../src/wolfcrypt/src/aes.c ****         IncCtr((byte*)aes->reg, aes->nonceSz);
9517:../src/wolfcrypt/src/aes.c ****     }
9518:../src/wolfcrypt/src/aes.c **** 
9519:../src/wolfcrypt/src/aes.c ****     return ret;
9520:../src/wolfcrypt/src/aes.c **** }
9521:../src/wolfcrypt/src/aes.c **** 
9522:../src/wolfcrypt/src/aes.c **** #if defined(HAVE_AES_DECRYPT) || defined(HAVE_AESGCM_DECRYPT)
9523:../src/wolfcrypt/src/aes.c **** /* Initialize an AES GCM cipher for decryption.
9524:../src/wolfcrypt/src/aes.c ****  *
9525:../src/wolfcrypt/src/aes.c ****  * Must call wc_AesInit() before calling this function.
9526:../src/wolfcrypt/src/aes.c ****  *
9527:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes   AES object.
9528:../src/wolfcrypt/src/aes.c ****  * @param [in]      key   Buffer holding key.
9529:../src/wolfcrypt/src/aes.c ****  * @param [in]      len   Length of key in bytes.
9530:../src/wolfcrypt/src/aes.c ****  * @param [in]      iv    Buffer holding IV/nonce.
9531:../src/wolfcrypt/src/aes.c ****  * @param [in]      ivSz  Length of IV/nonce in bytes.
9532:../src/wolfcrypt/src/aes.c ****  * @return  0 on success.
9533:../src/wolfcrypt/src/aes.c ****  * @return  BAD_FUNC_ARG when aes is NULL, or a length is non-zero but buffer
9534:../src/wolfcrypt/src/aes.c ****  *          is NULL, or the IV is NULL and no previous IV has been set.
9535:../src/wolfcrypt/src/aes.c ****  */
9536:../src/wolfcrypt/src/aes.c **** int wc_AesGcmDecryptInit(Aes* aes, const byte* key, word32 len, const byte* iv,
9537:../src/wolfcrypt/src/aes.c ****     word32 ivSz)
9538:../src/wolfcrypt/src/aes.c **** {
9539:../src/wolfcrypt/src/aes.c ****     return wc_AesGcmInit(aes, key, len, iv, ivSz);
9540:../src/wolfcrypt/src/aes.c **** }
9541:../src/wolfcrypt/src/aes.c **** 
9542:../src/wolfcrypt/src/aes.c **** /* Update the AES GCM for decryption with data and/or authentication data.
9543:../src/wolfcrypt/src/aes.c ****  *
9544:../src/wolfcrypt/src/aes.c ****  * All the AAD must be passed to update before the cipher text.
9545:../src/wolfcrypt/src/aes.c ****  * Last part of AAD can be passed with first part of cipher text.
9546:../src/wolfcrypt/src/aes.c ****  *
9547:../src/wolfcrypt/src/aes.c ****  * Must set key and IV before calling this function.
9548:../src/wolfcrypt/src/aes.c ****  * Must call wc_AesGcmInit() before calling this function.
9549:../src/wolfcrypt/src/aes.c ****  *
9550:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes       AES object.
9551:../src/wolfcrypt/src/aes.c ****  * @param [out]     out       Buffer to hold plaintext.
9552:../src/wolfcrypt/src/aes.c ****  * @param [in]      in        Buffer holding cipher text.
9553:../src/wolfcrypt/src/aes.c ****  * @param [in]      sz        Length of cipher text in bytes.
9554:../src/wolfcrypt/src/aes.c ****  * @param [in]      authIn    Buffer holding authentication data.
9555:../src/wolfcrypt/src/aes.c ****  * @param [in]      authInSz  Length of authentication data in bytes.
9556:../src/wolfcrypt/src/aes.c ****  * @return  0 on success.
9557:../src/wolfcrypt/src/aes.c ****  * @return  BAD_FUNC_ARG when aes is NULL, or a length is non-zero but buffer
9558:../src/wolfcrypt/src/aes.c ****  *          is NULL.
9559:../src/wolfcrypt/src/aes.c ****  */
9560:../src/wolfcrypt/src/aes.c **** int wc_AesGcmDecryptUpdate(Aes* aes, byte* out, const byte* in, word32 sz,
9561:../src/wolfcrypt/src/aes.c ****     const byte* authIn, word32 authInSz)
9562:../src/wolfcrypt/src/aes.c **** {
9563:../src/wolfcrypt/src/aes.c ****     int ret = 0;
9564:../src/wolfcrypt/src/aes.c **** 
9565:../src/wolfcrypt/src/aes.c ****     /* Check validity of parameters. */
9566:../src/wolfcrypt/src/aes.c ****     if ((aes == NULL) || ((authInSz > 0) && (authIn == NULL)) || ((sz > 0) &&
9567:../src/wolfcrypt/src/aes.c ****             ((out == NULL) || (in == NULL)))) {
9568:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
9569:../src/wolfcrypt/src/aes.c ****     }
9570:../src/wolfcrypt/src/aes.c **** 
9571:../src/wolfcrypt/src/aes.c ****     /* Check key has been set. */
9572:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && (!aes->gcmKeySet)) {
9573:../src/wolfcrypt/src/aes.c ****         ret = MISSING_KEY;
9574:../src/wolfcrypt/src/aes.c ****     }
9575:../src/wolfcrypt/src/aes.c ****     /* Check IV has been set. */
9576:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && (!aes->nonceSet)) {
9577:../src/wolfcrypt/src/aes.c ****         ret = MISSING_IV;
9578:../src/wolfcrypt/src/aes.c ****     }
9579:../src/wolfcrypt/src/aes.c **** 
9580:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
9581:../src/wolfcrypt/src/aes.c ****         /* Decrypt with AAD and/or cipher text. */
9582:../src/wolfcrypt/src/aes.c ****     #if defined(WOLFSSL_AESNI)
9583:../src/wolfcrypt/src/aes.c ****         if (haveAESNI
9584:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX2
9585:../src/wolfcrypt/src/aes.c ****             || IS_INTEL_AVX2(intel_flags)
9586:../src/wolfcrypt/src/aes.c ****         #endif
9587:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX1
9588:../src/wolfcrypt/src/aes.c ****             || IS_INTEL_AVX1(intel_flags)
9589:../src/wolfcrypt/src/aes.c ****         #endif
9590:../src/wolfcrypt/src/aes.c ****             ) {
9591:../src/wolfcrypt/src/aes.c ****             ret = AesGcmDecryptUpdate_aesni(aes, out, in, sz, authIn, authInSz);
9592:../src/wolfcrypt/src/aes.c ****         }
9593:../src/wolfcrypt/src/aes.c ****         else
9594:../src/wolfcrypt/src/aes.c ****     #endif
9595:../src/wolfcrypt/src/aes.c ****         {
9596:../src/wolfcrypt/src/aes.c ****             /* Update the authenication tag with any authentication data and
9597:../src/wolfcrypt/src/aes.c ****              * cipher text. */
9598:../src/wolfcrypt/src/aes.c ****             GHASH_UPDATE(aes, authIn, authInSz, in, sz);
9599:../src/wolfcrypt/src/aes.c ****             /* Decrypt the cipher text. */
9600:../src/wolfcrypt/src/aes.c ****             ret = AesGcmCryptUpdate_C(aes, out, in, sz);
9601:../src/wolfcrypt/src/aes.c ****         }
9602:../src/wolfcrypt/src/aes.c ****     }
9603:../src/wolfcrypt/src/aes.c **** 
9604:../src/wolfcrypt/src/aes.c ****     return ret;
9605:../src/wolfcrypt/src/aes.c **** }
9606:../src/wolfcrypt/src/aes.c **** 
9607:../src/wolfcrypt/src/aes.c **** /* Finalize the AES GCM for decryption and check the authentication tag.
9608:../src/wolfcrypt/src/aes.c ****  *
9609:../src/wolfcrypt/src/aes.c ****  * Must set key and IV before calling this function.
9610:../src/wolfcrypt/src/aes.c ****  * Must call wc_AesGcmInit() before calling this function.
9611:../src/wolfcrypt/src/aes.c ****  *
9612:../src/wolfcrypt/src/aes.c ****  * @param [in, out] aes        AES object.
9613:../src/wolfcrypt/src/aes.c ****  * @param [in]      authTag    Buffer holding authentication tag.
9614:../src/wolfcrypt/src/aes.c ****  * @param [in]      authTagSz  Length of authentication tag in bytes.
9615:../src/wolfcrypt/src/aes.c ****  * @return  0 on success.
9616:../src/wolfcrypt/src/aes.c ****  */
9617:../src/wolfcrypt/src/aes.c **** int wc_AesGcmDecryptFinal(Aes* aes, const byte* authTag, word32 authTagSz)
9618:../src/wolfcrypt/src/aes.c **** {
9619:../src/wolfcrypt/src/aes.c ****     int ret = 0;
9620:../src/wolfcrypt/src/aes.c **** 
9621:../src/wolfcrypt/src/aes.c ****     /* Check validity of parameters. */
9622:../src/wolfcrypt/src/aes.c ****     if ((aes == NULL) || (authTag == NULL) || (authTagSz > AES_BLOCK_SIZE) ||
9623:../src/wolfcrypt/src/aes.c ****             (authTagSz == 0)) {
9624:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
9625:../src/wolfcrypt/src/aes.c ****     }
9626:../src/wolfcrypt/src/aes.c **** 
9627:../src/wolfcrypt/src/aes.c ****     /* Check key has been set. */
9628:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && (!aes->gcmKeySet)) {
9629:../src/wolfcrypt/src/aes.c ****         ret = MISSING_KEY;
9630:../src/wolfcrypt/src/aes.c ****     }
9631:../src/wolfcrypt/src/aes.c ****     /* Check IV has been set. */
9632:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && (!aes->nonceSet)) {
9633:../src/wolfcrypt/src/aes.c ****         ret = MISSING_IV;
9634:../src/wolfcrypt/src/aes.c ****     }
9635:../src/wolfcrypt/src/aes.c **** 
9636:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
9637:../src/wolfcrypt/src/aes.c ****         /* Calculate authentication tag and compare with one passed in.. */
9638:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_AESNI
9639:../src/wolfcrypt/src/aes.c ****         if (haveAESNI
9640:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX2
9641:../src/wolfcrypt/src/aes.c ****             || IS_INTEL_AVX2(intel_flags)
9642:../src/wolfcrypt/src/aes.c ****         #endif
9643:../src/wolfcrypt/src/aes.c ****         #ifdef HAVE_INTEL_AVX1
9644:../src/wolfcrypt/src/aes.c ****             || IS_INTEL_AVX1(intel_flags)
9645:../src/wolfcrypt/src/aes.c ****         #endif
9646:../src/wolfcrypt/src/aes.c ****             ) {
9647:../src/wolfcrypt/src/aes.c ****             ret = AesGcmDecryptFinal_aesni(aes, authTag, authTagSz);
9648:../src/wolfcrypt/src/aes.c ****         }
9649:../src/wolfcrypt/src/aes.c ****         else
9650:../src/wolfcrypt/src/aes.c ****     #endif
9651:../src/wolfcrypt/src/aes.c ****         {
9652:../src/wolfcrypt/src/aes.c ****             ALIGN32 byte calcTag[AES_BLOCK_SIZE];
9653:../src/wolfcrypt/src/aes.c ****             /* Calculate authentication tag. */
9654:../src/wolfcrypt/src/aes.c ****             ret = AesGcmFinal_C(aes, calcTag, authTagSz);
9655:../src/wolfcrypt/src/aes.c ****             if (ret == 0) {
9656:../src/wolfcrypt/src/aes.c ****                 /* Check calculated tag matches the one passed in. */
9657:../src/wolfcrypt/src/aes.c ****                 if (ConstantCompare(authTag, calcTag, authTagSz) != 0) {
9658:../src/wolfcrypt/src/aes.c ****                     ret = AES_GCM_AUTH_E;
9659:../src/wolfcrypt/src/aes.c ****                 }
9660:../src/wolfcrypt/src/aes.c ****             }
9661:../src/wolfcrypt/src/aes.c ****         }
9662:../src/wolfcrypt/src/aes.c ****     }
9663:../src/wolfcrypt/src/aes.c **** 
9664:../src/wolfcrypt/src/aes.c ****     /* reset the state */
9665:../src/wolfcrypt/src/aes.c ****     if (ret == 0)
9666:../src/wolfcrypt/src/aes.c ****         wc_AesFree(aes);
9667:../src/wolfcrypt/src/aes.c **** 
9668:../src/wolfcrypt/src/aes.c ****     return ret;
9669:../src/wolfcrypt/src/aes.c **** }
9670:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_DECRYPT || HAVE_AESGCM_DECRYPT */
9671:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AESGCM_STREAM */
9672:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_XILINX_CRYPT */
9673:../src/wolfcrypt/src/aes.c **** #endif /* end of block for AESGCM implementation selection */
9674:../src/wolfcrypt/src/aes.c **** 
9675:../src/wolfcrypt/src/aes.c **** 
9676:../src/wolfcrypt/src/aes.c **** /* Common to all, abstract functions that build off of lower level AESGCM
9677:../src/wolfcrypt/src/aes.c ****  * functions */
9678:../src/wolfcrypt/src/aes.c **** #ifndef WC_NO_RNG
9679:../src/wolfcrypt/src/aes.c **** 
9680:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT WC_INLINE int CheckAesGcmIvSize(int ivSz) {
 10058                             		.loc 2 9680 69
 10059 0000 7E AA                   		push.l	r10
 10060                             	.LCFI70:
 10061 0002 71 0A FC                		add	#-4, r0, r10
 10062                             	.LCFI71:
 10063 0005 EF A0                   		mov.L	r10, r0
 10064 0007 E3 A1                   		mov.L	r1, [r10]
9681:../src/wolfcrypt/src/aes.c ****     return (ivSz == GCM_NONCE_MIN_SZ ||
9682:../src/wolfcrypt/src/aes.c ****             ivSz == GCM_NONCE_MID_SZ ||
 10065                             		.loc 2 9682 38
 10066 0009 EC A5                   		mov.L	[r10], r5
 10067 000b 61 85                   		cmp	#8, r5
 10068 000d 20 0D                   		beq	.L189
9681:../src/wolfcrypt/src/aes.c ****     return (ivSz == GCM_NONCE_MIN_SZ ||
 10069                             		.loc 2 9681 38
 10070 000f EC A5                   		mov.L	[r10], r5
 10071 0011 61 C5                   		cmp	#12, r5
 10072 0013 17                      		beq	.L189
 10073                             		.loc 2 9682 38 discriminator 2
 10074 0014 EC A5                   		mov.L	[r10], r5
 10075 0016 75 55 10                		cmp	#16, r5
 10076 0019 1C                      		bne	.L190
 10077                             	.L189:
 10078                             		.loc 2 9682 38 is_stmt 0 discriminator 1
 10079 001a 66 15                   		mov.L	#1, r5
 10080 001c 0B                      		bra	.L192
 10081                             	.L190:
 10082                             		.loc 2 9682 38 discriminator 3
 10083 001d 66 05                   		mov.L	#0, r5
 10084                             	.L192:
9683:../src/wolfcrypt/src/aes.c ****             ivSz == GCM_NONCE_MAX_SZ);
9684:../src/wolfcrypt/src/aes.c **** }
 10085                             		.loc 2 9684 1 is_stmt 1 discriminator 6
 10086 001f EF 51                   		mov.L	r5, r1
 10087 0021 3F AA 02                		rtsd	#8, r10-r10
 10088                             	.LFE62:
 10090                             		.section	.text.wc_AesGcmSetExtIV,"ax",@progbits
 10091                             		.global	_wc_AesGcmSetExtIV
 10093                             	_wc_AesGcmSetExtIV:
 10094                             	.LFB63:
9685:../src/wolfcrypt/src/aes.c **** 
9686:../src/wolfcrypt/src/aes.c **** 
9687:../src/wolfcrypt/src/aes.c **** int wc_AesGcmSetExtIV(Aes* aes, const byte* iv, word32 ivSz)
9688:../src/wolfcrypt/src/aes.c **** {
 10095                             		.loc 2 9688 1
 10096 0000 7E AA                   		push.l	r10
 10097                             	.LCFI72:
 10098 0002 71 0A F0                		add	#-16, r0, r10
 10099                             	.LCFI73:
 10100 0005 EF A0                   		mov.L	r10, r0
 10101 0007 E7 A1 01                		mov.L	r1, 4[r10]
 10102 000a E7 A2 02                		mov.L	r2, 8[r10]
 10103 000d E7 A3 03                		mov.L	r3, 12[r10]
9689:../src/wolfcrypt/src/aes.c ****     int ret = 0;
 10104                             		.loc 2 9689 9
 10105 0010 F8 A6 00                		mov.L	#0, [r10]
9690:../src/wolfcrypt/src/aes.c **** 
9691:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || iv == NULL || !CheckAesGcmIvSize(ivSz)) {
 10106                             		.loc 2 9691 8
 10107 0013 ED A5 01                		mov.L	4[r10], r5
 10108 0016 61 05                   		cmp	#0, r5
 10109 0018 20 17                   		beq	.L194
 10110                             		.loc 2 9691 21 discriminator 1
 10111 001a ED A5 02                		mov.L	8[r10], r5
 10112 001d 61 05                   		cmp	#0, r5
 10113 001f 20 10                   		beq	.L194
 10114                             		.loc 2 9691 39 discriminator 2
 10115 0021 ED A5 03                		mov.L	12[r10], r5
 10116 0024 EF 51                   		mov.L	r5, r1
 10117 0026 05 00 00 00             		bsr	_CheckAesGcmIvSize
 10118 002a EF 15                   		mov.L	r1, r5
 10119                             		.loc 2 9691 35 discriminator 2
 10120 002c 61 05                   		cmp	#0, r5
 10121 002e 1D                      		bne	.L195
 10122                             	.L194:
9692:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
 10123                             		.loc 2 9692 13
 10124 002f F8 AA 53 FF             		mov.L	#-173, [r10]
 10125                             	.L195:
9693:../src/wolfcrypt/src/aes.c ****     }
9694:../src/wolfcrypt/src/aes.c **** 
9695:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
 10126                             		.loc 2 9695 8
 10127 0033 EC A5                   		mov.L	[r10], r5
 10128 0035 61 05                   		cmp	#0, r5
 10129 0037 21 37                   		bne	.L196
9696:../src/wolfcrypt/src/aes.c ****         XMEMCPY((byte*)aes->reg, iv, ivSz);
 10130                             		.loc 2 9696 9
 10131 0039 ED A5 01                		mov.L	4[r10], r5
 10132 003c 72 55 F8 00             		add	#0xf8, r5
 10133 0040 ED A3 03                		mov.L	12[r10], r3
 10134 0043 ED A2 02                		mov.L	8[r10], r2
 10135 0046 EF 51                   		mov.L	r5, r1
 10136 0048 05 00 00 00             		bsr	_memcpy
9697:../src/wolfcrypt/src/aes.c **** 
9698:../src/wolfcrypt/src/aes.c ****         /* If the IV is 96, allow for a 2^64 invocation counter.
9699:../src/wolfcrypt/src/aes.c ****          * For any other size for the nonce, limit the invocation
9700:../src/wolfcrypt/src/aes.c ****          * counter to 32-bits. (SP 800-38D 8.3) */
9701:../src/wolfcrypt/src/aes.c ****         aes->invokeCtr[0] = 0;
 10137                             		.loc 2 9701 27
 10138 004c ED A5 01                		mov.L	4[r10], r5
 10139 004f F9 56 46 00             		mov.L	#0, 280[r5]
9702:../src/wolfcrypt/src/aes.c ****         aes->invokeCtr[1] = (ivSz == GCM_NONCE_MID_SZ) ? 0 : 0xFFFFFFFF;
 10140                             		.loc 2 9702 60
 10141 0053 ED A5 03                		mov.L	12[r10], r5
 10142 0056 61 C5                   		cmp	#12, r5
 10143 0058 1C                      		bne	.L197
 10144                             		.loc 2 9702 60 is_stmt 0 discriminator 1
 10145 0059 66 04                   		mov.L	#0, r4
 10146 005b 0C                      		bra	.L198
 10147                             	.L197:
 10148                             		.loc 2 9702 60 discriminator 2
 10149 005c FB 46 FF                		mov.L	#-1, r4
 10150                             	.L198:
 10151                             		.loc 2 9702 27 is_stmt 1 discriminator 4
 10152 005f ED A5 01                		mov.L	4[r10], r5
 10153 0062 E7 54 47                		mov.L	r4, 284[r5]
9703:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_AESGCM_STREAM
9704:../src/wolfcrypt/src/aes.c ****         aes->ctrSet = 1;
9705:../src/wolfcrypt/src/aes.c ****     #endif
9706:../src/wolfcrypt/src/aes.c ****         aes->nonceSz = ivSz;
 10154                             		.loc 2 9706 22 discriminator 4
 10155 0065 ED A5 01                		mov.L	4[r10], r5
 10156 0068 ED A4 03                		mov.L	12[r10], r4
 10157 006b E7 54 48                		mov.L	r4, 288[r5]
 10158                             	.L196:
9707:../src/wolfcrypt/src/aes.c ****     }
9708:../src/wolfcrypt/src/aes.c **** 
9709:../src/wolfcrypt/src/aes.c ****     return ret;
 10159                             		.loc 2 9709 12
 10160 006e EC A5                   		mov.L	[r10], r5
9710:../src/wolfcrypt/src/aes.c **** }
 10161                             		.loc 2 9710 1
 10162 0070 EF 51                   		mov.L	r5, r1
 10163 0072 3F AA 05                		rtsd	#20, r10-r10
 10164                             	.LFE63:
 10166                             		.section	.text.wc_AesGcmSetIV,"ax",@progbits
 10167                             		.global	_wc_AesGcmSetIV
 10169                             	_wc_AesGcmSetIV:
 10170                             	.LFB64:
9711:../src/wolfcrypt/src/aes.c **** 
9712:../src/wolfcrypt/src/aes.c **** 
9713:../src/wolfcrypt/src/aes.c **** int wc_AesGcmSetIV(Aes* aes, word32 ivSz,
9714:../src/wolfcrypt/src/aes.c ****                    const byte* ivFixed, word32 ivFixedSz,
9715:../src/wolfcrypt/src/aes.c ****                    WC_RNG* rng)
9716:../src/wolfcrypt/src/aes.c **** {
 10171                             		.loc 2 9716 1
 10172 0000 7E AA                   		push.l	r10
 10173                             	.LCFI74:
 10174 0002 7E A6                   		push.l	r6
 10175                             	.LCFI75:
 10176 0004 71 0A E4                		add	#-28, r0, r10
 10177                             	.LCFI76:
 10178 0007 EF A0                   		mov.L	r10, r0
 10179 0009 75 46 28                		mov.L	#40, r6
 10180 000c 4B A6                   		add	r10, r6
 10181 000e E7 A1 02                		mov.L	r1, 8[r10]
 10182 0011 E7 A2 03                		mov.L	r2, 12[r10]
 10183 0014 E7 A3 04                		mov.L	r3, 16[r10]
 10184 0017 E7 A4 05                		mov.L	r4, 20[r10]
9717:../src/wolfcrypt/src/aes.c ****     int ret = 0;
 10185                             		.loc 2 9717 9
 10186 001a F8 A6 00                		mov.L	#0, [r10]
9718:../src/wolfcrypt/src/aes.c **** 
9719:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || rng == NULL || !CheckAesGcmIvSize(ivSz) ||
 10187                             		.loc 2 9719 8
 10188 001d ED A5 02                		mov.L	8[r10], r5
 10189 0020 61 05                   		cmp	#0, r5
 10190 0022 20 31                   		beq	.L201
 10191                             		.loc 2 9719 21 discriminator 1
 10192 0024 EC 65                   		mov.L	[r6], r5
 10193 0026 61 05                   		cmp	#0, r5
 10194 0028 20 2B                   		beq	.L201
 10195                             		.loc 2 9719 40 discriminator 2
 10196 002a ED A5 03                		mov.L	12[r10], r5
 10197 002d EF 51                   		mov.L	r5, r1
 10198 002f 05 00 00 00             		bsr	_CheckAesGcmIvSize
 10199 0033 EF 15                   		mov.L	r1, r5
 10200                             		.loc 2 9719 36 discriminator 2
 10201 0035 61 05                   		cmp	#0, r5
 10202 0037 20 1C                   		beq	.L201
 10203                             		.loc 2 9719 64 discriminator 3
 10204 0039 ED A5 04                		mov.L	16[r10], r5
 10205 003c 61 05                   		cmp	#0, r5
 10206 003e 18                      		bne	.L202
9720:../src/wolfcrypt/src/aes.c ****         (ivFixed == NULL && ivFixedSz != 0) ||
 10207                             		.loc 2 9720 26
 10208 003f ED A5 05                		mov.L	20[r10], r5
 10209 0042 61 05                   		cmp	#0, r5
 10210 0044 21 0F                   		bne	.L201
 10211                             	.L202:
 10212                             		.loc 2 9720 45 discriminator 1
 10213 0046 ED A5 04                		mov.L	16[r10], r5
 10214 0049 61 05                   		cmp	#0, r5
 10215 004b 20 0C                   		beq	.L203
9721:../src/wolfcrypt/src/aes.c ****         (ivFixed != NULL && ivFixedSz != AES_IV_FIXED_SZ)) {
 10216                             		.loc 2 9721 26
 10217 004d ED A5 05                		mov.L	20[r10], r5
 10218 0050 61 45                   		cmp	#4, r5
 10219 0052 15                      		beq	.L203
 10220                             		.balign 8,3,4
 10221                             	.L201:
9722:../src/wolfcrypt/src/aes.c **** 
9723:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
 10222                             		.loc 2 9723 13
 10223 0053 F8 AA 53 FF             		mov.L	#-173, [r10]
 10224                             	.L203:
9724:../src/wolfcrypt/src/aes.c ****     }
9725:../src/wolfcrypt/src/aes.c **** 
9726:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
 10225                             		.loc 2 9726 8
 10226 0057 EC A5                   		mov.L	[r10], r5
 10227 0059 61 05                   		cmp	#0, r5
 10228 005b 21 3C                   		bne	.L204
 10229                             	.LBB12:
9727:../src/wolfcrypt/src/aes.c ****         byte* iv = (byte*)aes->reg;
 10230                             		.loc 2 9727 15
 10231 005d ED A5 02                		mov.L	8[r10], r5
 10232 0060 72 55 F8 00             		add	#0xf8, r5
 10233 0064 E7 A5 01                		mov.L	r5, 4[r10]
9728:../src/wolfcrypt/src/aes.c **** 
9729:../src/wolfcrypt/src/aes.c ****         if (ivFixedSz)
 10234                             		.loc 2 9729 12
 10235 0067 ED A5 05                		mov.L	20[r10], r5
 10236 006a 61 05                   		cmp	#0, r5
 10237 006c 20 0F                   		beq	.L205
9730:../src/wolfcrypt/src/aes.c ****             XMEMCPY(iv, ivFixed, ivFixedSz);
 10238                             		.loc 2 9730 13
 10239 006e ED A3 05                		mov.L	20[r10], r3
 10240 0071 ED A2 04                		mov.L	16[r10], r2
 10241 0074 ED A1 01                		mov.L	4[r10], r1
 10242 0077 05 00 00 00             		bsr	_memcpy
 10243                             	.L205:
9731:../src/wolfcrypt/src/aes.c **** 
9732:../src/wolfcrypt/src/aes.c ****         ret = wc_RNG_GenerateBlock(rng, iv + ivFixedSz, ivSz - ivFixedSz);
 10244                             		.loc 2 9732 15
 10245 007b ED A5 01                		mov.L	4[r10], r5
 10246 007e EF 52                   		mov.L	r5, r2
 10247 0080 06 89 A2 05             		add	20[r10].L, r2
 10248 0084 ED A4 03                		mov.L	12[r10], r4
 10249 0087 ED A5 05                		mov.L	20[r10], r5
 10250 008a FF 05 54                		sub	r5, r4, r5
 10251 008d EF 53                   		mov.L	r5, r3
 10252 008f EC 61                   		mov.L	[r6], r1
 10253 0091 05 00 00 00             		bsr	_wc_RNG_GenerateBlock
 10254 0095 E3 A1                   		mov.L	r1, [r10]
 10255                             	.L204:
 10256                             	.LBE12:
9733:../src/wolfcrypt/src/aes.c ****     }
9734:../src/wolfcrypt/src/aes.c **** 
9735:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
 10257                             		.loc 2 9735 8
 10258 0097 EC A5                   		mov.L	[r10], r5
 10259 0099 61 05                   		cmp	#0, r5
 10260 009b 21 24                   		bne	.L206
9736:../src/wolfcrypt/src/aes.c ****         /* If the IV is 96, allow for a 2^64 invocation counter.
9737:../src/wolfcrypt/src/aes.c ****          * For any other size for the nonce, limit the invocation
9738:../src/wolfcrypt/src/aes.c ****          * counter to 32-bits. (SP 800-38D 8.3) */
9739:../src/wolfcrypt/src/aes.c ****         aes->invokeCtr[0] = 0;
 10261                             		.loc 2 9739 27
 10262 009d ED A5 02                		mov.L	8[r10], r5
 10263 00a0 F9 56 46 00             		mov.L	#0, 280[r5]
9740:../src/wolfcrypt/src/aes.c ****         aes->invokeCtr[1] = (ivSz == GCM_NONCE_MID_SZ) ? 0 : 0xFFFFFFFF;
 10264                             		.loc 2 9740 60
 10265 00a4 ED A5 03                		mov.L	12[r10], r5
 10266 00a7 61 C5                   		cmp	#12, r5
 10267 00a9 1C                      		bne	.L207
 10268                             		.loc 2 9740 60 is_stmt 0 discriminator 1
 10269 00aa 66 04                   		mov.L	#0, r4
 10270 00ac 0C                      		bra	.L208
 10271                             	.L207:
 10272                             		.loc 2 9740 60 discriminator 2
 10273 00ad FB 46 FF                		mov.L	#-1, r4
 10274                             	.L208:
 10275                             		.loc 2 9740 27 is_stmt 1 discriminator 4
 10276 00b0 ED A5 02                		mov.L	8[r10], r5
 10277 00b3 E7 54 47                		mov.L	r4, 284[r5]
9741:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_AESGCM_STREAM
9742:../src/wolfcrypt/src/aes.c ****         aes->ctrSet = 1;
9743:../src/wolfcrypt/src/aes.c ****     #endif
9744:../src/wolfcrypt/src/aes.c ****         aes->nonceSz = ivSz;
 10278                             		.loc 2 9744 22 discriminator 4
 10279 00b6 ED A5 02                		mov.L	8[r10], r5
 10280 00b9 ED A4 03                		mov.L	12[r10], r4
 10281 00bc E7 54 48                		mov.L	r4, 288[r5]
 10282                             	.L206:
9745:../src/wolfcrypt/src/aes.c ****     }
9746:../src/wolfcrypt/src/aes.c **** 
9747:../src/wolfcrypt/src/aes.c ****     return ret;
 10283                             		.loc 2 9747 12
 10284 00bf EC A5                   		mov.L	[r10], r5
9748:../src/wolfcrypt/src/aes.c **** }
 10285                             		.loc 2 9748 1
 10286 00c1 EF 51                   		mov.L	r5, r1
 10287 00c3 71 00 1C                		add	#28, r0
 10288 00c6 7E B6                   		pop	r6
 10289 00c8 7E BA                   		pop	r10
 10290 00ca 02                      		rts
 10291                             	.LFE64:
 10293 00cb 77 10 01 00 00          		.section	.text.wc_AesGcmEncrypt_ex,"ax",@progbits
 10294                             		.global	_wc_AesGcmEncrypt_ex
 10296                             	_wc_AesGcmEncrypt_ex:
 10297                             	.LFB65:
9749:../src/wolfcrypt/src/aes.c **** 
9750:../src/wolfcrypt/src/aes.c **** 
9751:../src/wolfcrypt/src/aes.c **** int wc_AesGcmEncrypt_ex(Aes* aes, byte* out, const byte* in, word32 sz,
9752:../src/wolfcrypt/src/aes.c ****                         byte* ivOut, word32 ivOutSz,
9753:../src/wolfcrypt/src/aes.c ****                         byte* authTag, word32 authTagSz,
9754:../src/wolfcrypt/src/aes.c ****                         const byte* authIn, word32 authInSz)
9755:../src/wolfcrypt/src/aes.c **** {
 10298                             		.loc 2 9755 1
 10299 0000 7E AA                   		push.l	r10
 10300                             	.LCFI77:
 10301 0002 7E A6                   		push.l	r6
 10302                             	.LCFI78:
 10303 0004 71 0A D4                		add	#-44, r0, r10
 10304                             	.LCFI79:
 10305 0007 71 A0 E8                		add	#-24, r10, r0
 10306                             	.LCFI80:
 10307 000a 75 46 38                		mov.L	#56, r6
 10308 000d 4B A6                   		add	r10, r6
 10309 000f E7 A1 01                		mov.L	r1, 4[r10]
 10310 0012 E7 A2 02                		mov.L	r2, 8[r10]
 10311 0015 E7 A3 03                		mov.L	r3, 12[r10]
 10312 0018 E7 A4 04                		mov.L	r4, 16[r10]
9756:../src/wolfcrypt/src/aes.c ****     int ret = 0;
 10313                             		.loc 2 9756 9
 10314 001b F8 A6 00                		mov.L	#0, [r10]
9757:../src/wolfcrypt/src/aes.c **** 
9758:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || (sz != 0 && (in == NULL || out == NULL)) ||
 10315                             		.loc 2 9758 8
 10316 001e ED A5 01                		mov.L	4[r10], r5
 10317 0021 61 05                   		cmp	#0, r5
 10318 0023 20 35                   		beq	.L211
 10319                             		.loc 2 9758 21 discriminator 1
 10320 0025 ED A5 04                		mov.L	16[r10], r5
 10321 0028 61 05                   		cmp	#0, r5
 10322 002a 20 10                   		beq	.L212
 10323                             		.loc 2 9758 33 discriminator 2
 10324 002c ED A5 03                		mov.L	12[r10], r5
 10325 002f 61 05                   		cmp	#0, r5
 10326 0031 20 27                   		beq	.L211
 10327                             		.loc 2 9758 48 discriminator 4
 10328 0033 ED A5 02                		mov.L	8[r10], r5
 10329 0036 61 05                   		cmp	#0, r5
 10330 0038 20 20                   		beq	.L211
 10331                             	.L212:
 10332                             		.loc 2 9758 65 discriminator 5
 10333 003a EC 65                   		mov.L	[r6], r5
 10334 003c 61 05                   		cmp	#0, r5
 10335 003e 20 1A                   		beq	.L211
9759:../src/wolfcrypt/src/aes.c ****         ivOut == NULL || ivOutSz != aes->nonceSz ||
 10336                             		.loc 2 9759 40
 10337 0040 ED A5 01                		mov.L	4[r10], r5
 10338 0043 ED 55 48                		mov.L	288[r5], r5
 10339                             		.loc 2 9759 23
 10340 0046 A8 6C                   		mov.L	4[r6], r4
 10341 0048 47 54                   		cmp	r5, r4
 10342 004a 21 0E                   		bne	.L211
 10343                             		.loc 2 9759 50 discriminator 1
 10344 004c A9 65                   		mov.L	16[r6], r5
 10345 004e 61 05                   		cmp	#0, r5
 10346 0050 21 0C                   		bne	.L213
9760:../src/wolfcrypt/src/aes.c ****         (authIn == NULL && authInSz != 0)) {
 10347                             		.loc 2 9760 25
 10348 0052 A9 6D                   		mov.L	20[r6], r5
 10349 0054 61 05                   		cmp	#0, r5
 10350 0056 16                      		beq	.L213
 10351 0057 03                      		.balign 8,3,4
 10352                             	.L211:
9761:../src/wolfcrypt/src/aes.c **** 
9762:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
 10353                             		.loc 2 9762 13
 10354 0058 F8 AA 53 FF             		mov.L	#-173, [r10]
 10355                             	.L213:
9763:../src/wolfcrypt/src/aes.c ****     }
9764:../src/wolfcrypt/src/aes.c **** 
9765:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
 10356                             		.loc 2 9765 8
 10357 005c EC A5                   		mov.L	[r10], r5
 10358 005e 61 05                   		cmp	#0, r5
 10359 0060 21 38                   		bne	.L214
9766:../src/wolfcrypt/src/aes.c ****         aes->invokeCtr[0]++;
 10360                             		.loc 2 9766 23
 10361 0062 ED A5 01                		mov.L	4[r10], r5
 10362 0065 ED 55 46                		mov.L	280[r5], r5
 10363                             		.loc 2 9766 26
 10364 0068 71 54 01                		add	#1, r5, r4
 10365 006b ED A5 01                		mov.L	4[r10], r5
 10366 006e E7 54 46                		mov.L	r4, 280[r5]
9767:../src/wolfcrypt/src/aes.c ****         if (aes->invokeCtr[0] == 0) {
 10367                             		.loc 2 9767 27
 10368 0071 ED A5 01                		mov.L	4[r10], r5
 10369 0074 ED 55 46                		mov.L	280[r5], r5
 10370                             		.loc 2 9767 12
 10371 0077 61 05                   		cmp	#0, r5
 10372 0079 21 1F                   		bne	.L214
9768:../src/wolfcrypt/src/aes.c ****             aes->invokeCtr[1]++;
 10373                             		.loc 2 9768 27
 10374 007b ED A5 01                		mov.L	4[r10], r5
 10375 007e ED 55 47                		mov.L	284[r5], r5
 10376                             		.loc 2 9768 30
 10377 0081 71 54 01                		add	#1, r5, r4
 10378 0084 ED A5 01                		mov.L	4[r10], r5
 10379 0087 E7 54 47                		mov.L	r4, 284[r5]
9769:../src/wolfcrypt/src/aes.c ****             if (aes->invokeCtr[1] == 0)
 10380                             		.loc 2 9769 31
 10381 008a ED A5 01                		mov.L	4[r10], r5
 10382 008d ED 55 47                		mov.L	284[r5], r5
 10383                             		.loc 2 9769 16
 10384 0090 61 05                   		cmp	#0, r5
 10385 0092 1E                      		bne	.L214
9770:../src/wolfcrypt/src/aes.c ****                 ret = AES_GCM_OVERFLOW_E;
 10386                             		.loc 2 9770 21
 10387 0093 F8 AA FC FE             		mov.L	#-260, [r10]
 10388 0097 03                      		.balign 8,3,1
 10389                             	.L214:
9771:../src/wolfcrypt/src/aes.c ****         }
9772:../src/wolfcrypt/src/aes.c ****     }
9773:../src/wolfcrypt/src/aes.c **** 
9774:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
 10390                             		.loc 2 9774 8
 10391 0098 EC A5                   		mov.L	[r10], r5
 10392 009a 61 05                   		cmp	#0, r5
 10393 009c 21 57                   		bne	.L215
9775:../src/wolfcrypt/src/aes.c ****         XMEMCPY(ivOut, aes->reg, ivOutSz);
 10394                             		.loc 2 9775 9
 10395 009e ED A5 01                		mov.L	4[r10], r5
 10396 00a1 72 55 F8 00             		add	#0xf8, r5
 10397 00a5 A8 6B                   		mov.L	4[r6], r3
 10398 00a7 EF 52                   		mov.L	r5, r2
 10399 00a9 EC 61                   		mov.L	[r6], r1
 10400 00ab 05 00 00 00             		bsr	_memcpy
9776:../src/wolfcrypt/src/aes.c ****         ret = wc_AesGcmEncrypt(aes, out, in, sz,
9777:../src/wolfcrypt/src/aes.c ****                                (byte*)aes->reg, ivOutSz,
 10401                             		.loc 2 9777 39
 10402 00af ED A5 01                		mov.L	4[r10], r5
 10403 00b2 72 55 F8 00             		add	#0xf8, r5
9776:../src/wolfcrypt/src/aes.c ****         ret = wc_AesGcmEncrypt(aes, out, in, sz,
 10404                             		.loc 2 9776 15
 10405 00b6 A9 6C                   		mov.L	20[r6], r4
 10406 00b8 A1 0C                   		mov.L	r4, 20[r0]
 10407 00ba A9 64                   		mov.L	16[r6], r4
 10408 00bc A1 04                   		mov.L	r4, 16[r0]
 10409 00be A8 EC                   		mov.L	12[r6], r4
 10410 00c0 A0 8C                   		mov.L	r4, 12[r0]
 10411 00c2 A8 E4                   		mov.L	8[r6], r4
 10412 00c4 A0 84                   		mov.L	r4, 8[r0]
 10413 00c6 A8 6C                   		mov.L	4[r6], r4
 10414 00c8 A0 0C                   		mov.L	r4, 4[r0]
 10415 00ca E3 05                   		mov.L	r5, [r0]
 10416 00cc ED A4 04                		mov.L	16[r10], r4
 10417 00cf ED A3 03                		mov.L	12[r10], r3
 10418 00d2 ED A2 02                		mov.L	8[r10], r2
 10419 00d5 ED A1 01                		mov.L	4[r10], r1
 10420 00d8 05 00 00 00             		bsr	_wc_AesGcmEncrypt
 10421 00dc E3 A1                   		mov.L	r1, [r10]
9778:../src/wolfcrypt/src/aes.c ****                                authTag, authTagSz,
9779:../src/wolfcrypt/src/aes.c ****                                authIn, authInSz);
9780:../src/wolfcrypt/src/aes.c ****         if (ret == 0)
 10422                             		.loc 2 9780 12
 10423 00de EC A5                   		mov.L	[r10], r5
 10424 00e0 61 05                   		cmp	#0, r5
 10425 00e2 21 11                   		bne	.L215
9781:../src/wolfcrypt/src/aes.c ****             IncCtr((byte*)aes->reg, ivOutSz);
 10426                             		.loc 2 9781 27
 10427 00e4 ED A5 01                		mov.L	4[r10], r5
 10428 00e7 72 55 F8 00             		add	#0xf8, r5
 10429                             		.loc 2 9781 13
 10430 00eb A8 6A                   		mov.L	4[r6], r2
 10431 00ed EF 51                   		mov.L	r5, r1
 10432 00ef 05 00 00 00             		bsr	_IncCtr
 10433                             	.L215:
9782:../src/wolfcrypt/src/aes.c ****     }
9783:../src/wolfcrypt/src/aes.c **** 
9784:../src/wolfcrypt/src/aes.c ****     return ret;
 10434                             		.loc 2 9784 12
 10435 00f3 EC A5                   		mov.L	[r10], r5
9785:../src/wolfcrypt/src/aes.c **** }
 10436                             		.loc 2 9785 1
 10437 00f5 EF 51                   		mov.L	r5, r1
 10438 00f7 71 00 44                		add	#0x44, r0
 10439 00fa 7E B6                   		pop	r6
 10440 00fc 7E BA                   		pop	r10
 10441 00fe 02                      		rts
 10442                             	.LFE65:
 10444 00ff 03                      		.section	.text.wc_Gmac,"ax",@progbits
 10445                             		.global	_wc_Gmac
 10447                             	_wc_Gmac:
 10448                             	.LFB66:
9786:../src/wolfcrypt/src/aes.c **** 
9787:../src/wolfcrypt/src/aes.c **** int wc_Gmac(const byte* key, word32 keySz, byte* iv, word32 ivSz,
9788:../src/wolfcrypt/src/aes.c ****             const byte* authIn, word32 authInSz,
9789:../src/wolfcrypt/src/aes.c ****             byte* authTag, word32 authTagSz, WC_RNG* rng)
9790:../src/wolfcrypt/src/aes.c **** {
 10449                             		.loc 2 9790 1
 10450 0000 7E AA                   		push.l	r10
 10451                             	.LCFI81:
 10452 0002 7E A6                   		push.l	r6
 10453                             	.LCFI82:
 10454 0004 71 0A D0                		add	#-48, r0, r10
 10455                             	.LCFI83:
 10456 0007 71 A0 E8                		add	#-24, r10, r0
 10457                             	.LCFI84:
 10458 000a 75 46 3C                		mov.L	#60, r6
 10459 000d 4B A6                   		add	r10, r6
 10460 000f E7 A1 03                		mov.L	r1, 12[r10]
 10461 0012 E7 A2 04                		mov.L	r2, 16[r10]
 10462 0015 E7 A3 05                		mov.L	r3, 20[r10]
 10463 0018 E7 A4 06                		mov.L	r4, 24[r10]
9791:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SMALL_STACK
9792:../src/wolfcrypt/src/aes.c ****     Aes *aes = NULL;
 10464                             		.loc 2 9792 10
 10465 001b F9 A6 01 00             		mov.L	#0, 4[r10]
9793:../src/wolfcrypt/src/aes.c **** #else
9794:../src/wolfcrypt/src/aes.c ****     Aes aes[1];
9795:../src/wolfcrypt/src/aes.c **** #endif
9796:../src/wolfcrypt/src/aes.c ****     int ret;
9797:../src/wolfcrypt/src/aes.c **** 
9798:../src/wolfcrypt/src/aes.c ****     if (key == NULL || iv == NULL || (authIn == NULL && authInSz != 0) ||
 10466                             		.loc 2 9798 8
 10467 001f ED A5 03                		mov.L	12[r10], r5
 10468 0022 61 05                   		cmp	#0, r5
 10469 0024 20 24                   		beq	.L218
 10470                             		.loc 2 9798 21 discriminator 1
 10471 0026 ED A5 05                		mov.L	20[r10], r5
 10472 0029 61 05                   		cmp	#0, r5
 10473 002b 20 1D                   		beq	.L218
 10474                             		.loc 2 9798 35 discriminator 2
 10475 002d EC 65                   		mov.L	[r6], r5
 10476 002f 61 05                   		cmp	#0, r5
 10477 0031 1F                      		bne	.L219
 10478                             		.loc 2 9798 54 discriminator 3
 10479 0032 A8 6D                   		mov.L	4[r6], r5
 10480 0034 61 05                   		cmp	#0, r5
 10481 0036 21 12                   		bne	.L218
 10482                             	.L219:
 10483                             		.loc 2 9798 72 discriminator 5
 10484 0038 A8 E5                   		mov.L	8[r6], r5
 10485 003a 61 05                   		cmp	#0, r5
 10486 003c 20 0C                   		beq	.L218
9799:../src/wolfcrypt/src/aes.c ****         authTag == NULL || authTagSz == 0 || rng == NULL) {
 10487                             		.loc 2 9799 25
 10488 003e A8 ED                   		mov.L	12[r6], r5
 10489 0040 61 05                   		cmp	#0, r5
 10490 0042 16                      		beq	.L218
 10491                             		.loc 2 9799 43 discriminator 1
 10492 0043 A9 65                   		mov.L	16[r6], r5
 10493 0045 61 05                   		cmp	#0, r5
 10494 0047 18                      		bne	.L220
 10495                             		.balign 8,3,2
 10496                             	.L218:
9800:../src/wolfcrypt/src/aes.c **** 
9801:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
 10497                             		.loc 2 9801 16
 10498 0048 FB 5A 53 FF             		mov.L	#-173, r5
 10499 004c 38 AD 00                		bra	.L221
 10500                             	.L220:
9802:../src/wolfcrypt/src/aes.c ****     }
9803:../src/wolfcrypt/src/aes.c **** 
9804:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SMALL_STACK
9805:../src/wolfcrypt/src/aes.c ****     if ((aes = (Aes *)XMALLOC(sizeof *aes, NULL,
 10501                             		.loc 2 9805 23
 10502 004f FB 1A 38 01             		mov.L	#0x138, r1
 10503 0053 05 00 00 00             		bsr	_wolfSSL_Malloc
 10504 0057 E7 A1 01                		mov.L	r1, 4[r10]
 10505                             		.loc 2 9805 8
 10506 005a ED A5 01                		mov.L	4[r10], r5
 10507 005d 61 05                   		cmp	#0, r5
 10508 005f 1F                      		bne	.L222
9806:../src/wolfcrypt/src/aes.c ****                               DYNAMIC_TYPE_AES)) == NULL)
9807:../src/wolfcrypt/src/aes.c ****         return MEMORY_E;
 10509                             		.loc 2 9807 16
 10510 0060 FB 56 83                		mov.L	#-125, r5
 10511 0063 38 96 00                		bra	.L221
 10512                             	.L222:
9808:../src/wolfcrypt/src/aes.c **** #endif
9809:../src/wolfcrypt/src/aes.c **** 
9810:../src/wolfcrypt/src/aes.c ****     ret = wc_AesInit(aes, NULL, INVALID_DEVID);
 10513                             		.loc 2 9810 11
 10514 0066 FB 36 FE                		mov.L	#-2, r3
 10515 0069 66 02                   		mov.L	#0, r2
 10516 006b ED A1 01                		mov.L	4[r10], r1
 10517 006e 05 00 00 00             		bsr	_wc_AesInit
 10518 0072 E3 A1                   		mov.L	r1, [r10]
9811:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
 10519                             		.loc 2 9811 8
 10520 0074 EC A5                   		mov.L	[r10], r5
 10521 0076 61 05                   		cmp	#0, r5
 10522 0078 21 61                   		bne	.L223
9812:../src/wolfcrypt/src/aes.c ****         ret = wc_AesGcmSetKey(aes, key, keySz);
 10523                             		.loc 2 9812 15
 10524 007a ED A3 04                		mov.L	16[r10], r3
 10525 007d ED A2 03                		mov.L	12[r10], r2
 10526 0080 ED A1 01                		mov.L	4[r10], r1
 10527 0083 05 00 00 00             		bsr	_wc_AesGcmSetKey
 10528 0087 E3 A1                   		mov.L	r1, [r10]
9813:../src/wolfcrypt/src/aes.c ****         if (ret == 0)
 10529                             		.loc 2 9813 12
 10530 0089 EC A5                   		mov.L	[r10], r5
 10531 008b 61 05                   		cmp	#0, r5
 10532 008d 21 16                   		bne	.L224
9814:../src/wolfcrypt/src/aes.c ****             ret = wc_AesGcmSetIV(aes, ivSz, NULL, 0, rng);
 10533                             		.loc 2 9814 19
 10534 008f A9 65                   		mov.L	16[r6], r5
 10535 0091 E3 05                   		mov.L	r5, [r0]
 10536 0093 66 04                   		mov.L	#0, r4
 10537 0095 66 03                   		mov.L	#0, r3
 10538 0097 ED A2 06                		mov.L	24[r10], r2
 10539 009a ED A1 01                		mov.L	4[r10], r1
 10540 009d 05 00 00 00             		bsr	_wc_AesGcmSetIV
 10541 00a1 E3 A1                   		mov.L	r1, [r10]
 10542                             	.L224:
9815:../src/wolfcrypt/src/aes.c ****         if (ret == 0)
 10543                             		.loc 2 9815 12
 10544 00a3 EC A5                   		mov.L	[r10], r5
 10545 00a5 61 05                   		cmp	#0, r5
 10546 00a7 21 2B                   		bne	.L225
9816:../src/wolfcrypt/src/aes.c ****             ret = wc_AesGcmEncrypt_ex(aes, NULL, NULL, 0, iv, ivSz,
 10547                             		.loc 2 9816 19
 10548 00a9 A8 6D                   		mov.L	4[r6], r5
 10549 00ab A1 0D                   		mov.L	r5, 20[r0]
 10550 00ad EC 65                   		mov.L	[r6], r5
 10551 00af A1 05                   		mov.L	r5, 16[r0]
 10552 00b1 A8 ED                   		mov.L	12[r6], r5
 10553 00b3 A0 8D                   		mov.L	r5, 12[r0]
 10554 00b5 A8 E5                   		mov.L	8[r6], r5
 10555 00b7 A0 85                   		mov.L	r5, 8[r0]
 10556 00b9 ED A5 06                		mov.L	24[r10], r5
 10557 00bc A0 0D                   		mov.L	r5, 4[r0]
 10558 00be ED A5 05                		mov.L	20[r10], r5
 10559 00c1 E3 05                   		mov.L	r5, [r0]
 10560 00c3 66 04                   		mov.L	#0, r4
 10561 00c5 66 03                   		mov.L	#0, r3
 10562 00c7 66 02                   		mov.L	#0, r2
 10563 00c9 ED A1 01                		mov.L	4[r10], r1
 10564 00cc 05 00 00 00             		bsr	_wc_AesGcmEncrypt_ex
 10565 00d0 E3 A1                   		mov.L	r1, [r10]
 10566                             	.L225:
9817:../src/wolfcrypt/src/aes.c ****                                   authTag, authTagSz, authIn, authInSz);
9818:../src/wolfcrypt/src/aes.c ****         wc_AesFree(aes);
 10567                             		.loc 2 9818 9
 10568 00d2 ED A1 01                		mov.L	4[r10], r1
 10569 00d5 05 00 00 00             		bsr	_wc_AesFree
 10570                             	.L223:
9819:../src/wolfcrypt/src/aes.c ****     }
9820:../src/wolfcrypt/src/aes.c ****     ForceZero(aes, sizeof *aes);
 10571                             		.loc 2 9820 5
 10572 00d9 FB 2A 38 01             		mov.L	#0x138, r2
 10573 00dd ED A1 01                		mov.L	4[r10], r1
 10574 00e0 05 00 00 00             		bsr	_ForceZero
 10575                             	.LBB13:
9821:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SMALL_STACK
9822:../src/wolfcrypt/src/aes.c ****     XFREE(aes, NULL, DYNAMIC_TYPE_AES);
 10576                             		.loc 2 9822 5
 10577 00e4 ED A5 01                		mov.L	4[r10], r5
 10578 00e7 E7 A5 02                		mov.L	r5, 8[r10]
 10579 00ea ED A5 02                		mov.L	8[r10], r5
 10580 00ed 61 05                   		cmp	#0, r5
 10581 00ef 10                      		beq	.L226
 10582                             		.loc 2 9822 5 is_stmt 0 discriminator 1
 10583 00f0 ED A1 02                		mov.L	8[r10], r1
 10584 00f3 05 00 00 00             		bsr	_wolfSSL_Free
 10585                             	.L226:
 10586                             	.LBE13:
9823:../src/wolfcrypt/src/aes.c **** #endif
9824:../src/wolfcrypt/src/aes.c **** 
9825:../src/wolfcrypt/src/aes.c ****     return ret;
 10587                             		.loc 2 9825 12 is_stmt 1
 10588 00f7 EC A5                   		mov.L	[r10], r5
 10589                             	.L221:
9826:../src/wolfcrypt/src/aes.c **** }
 10590                             		.loc 2 9826 1
 10591 00f9 EF 51                   		mov.L	r5, r1
 10592 00fb 71 00 48                		add	#0x48, r0
 10593 00fe 7E B6                   		pop	r6
 10594 0100 7E BA                   		pop	r10
 10595 0102 02                      		rts
 10596                             	.LFE66:
 10598 0103 77 10 01 00 00          		.section	.text.wc_GmacVerify,"ax",@progbits
 10599                             		.global	_wc_GmacVerify
 10601                             	_wc_GmacVerify:
 10602                             	.LFB67:
9827:../src/wolfcrypt/src/aes.c **** 
9828:../src/wolfcrypt/src/aes.c **** int wc_GmacVerify(const byte* key, word32 keySz,
9829:../src/wolfcrypt/src/aes.c ****                   const byte* iv, word32 ivSz,
9830:../src/wolfcrypt/src/aes.c ****                   const byte* authIn, word32 authInSz,
9831:../src/wolfcrypt/src/aes.c ****                   const byte* authTag, word32 authTagSz)
9832:../src/wolfcrypt/src/aes.c **** {
 10603                             		.loc 2 9832 1
 10604 0000 7E AA                   		push.l	r10
 10605                             	.LCFI85:
 10606 0002 7E A6                   		push.l	r6
 10607                             	.LCFI86:
 10608 0004 71 0A D4                		add	#-44, r0, r10
 10609                             	.LCFI87:
 10610 0007 71 A0 E8                		add	#-24, r10, r0
 10611                             	.LCFI88:
 10612 000a 75 46 38                		mov.L	#56, r6
 10613 000d 4B A6                   		add	r10, r6
 10614 000f E7 A1 03                		mov.L	r1, 12[r10]
 10615 0012 E7 A2 04                		mov.L	r2, 16[r10]
 10616 0015 E7 A3 05                		mov.L	r3, 20[r10]
 10617 0018 E7 A4 06                		mov.L	r4, 24[r10]
9833:../src/wolfcrypt/src/aes.c ****     int ret;
9834:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AES_DECRYPT
9835:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SMALL_STACK
9836:../src/wolfcrypt/src/aes.c ****     Aes *aes = NULL;
 10618                             		.loc 2 9836 10
 10619 001b F9 A6 01 00             		mov.L	#0, 4[r10]
9837:../src/wolfcrypt/src/aes.c **** #else
9838:../src/wolfcrypt/src/aes.c ****     Aes aes[1];
9839:../src/wolfcrypt/src/aes.c **** #endif
9840:../src/wolfcrypt/src/aes.c **** 
9841:../src/wolfcrypt/src/aes.c ****     if (key == NULL || iv == NULL || (authIn == NULL && authInSz != 0) ||
 10620                             		.loc 2 9841 8
 10621 001f ED A5 03                		mov.L	12[r10], r5
 10622 0022 61 05                   		cmp	#0, r5
 10623 0024 20 26                   		beq	.L228
 10624                             		.loc 2 9841 21 discriminator 1
 10625 0026 ED A5 05                		mov.L	20[r10], r5
 10626 0029 61 05                   		cmp	#0, r5
 10627 002b 20 1F                   		beq	.L228
 10628                             		.loc 2 9841 35 discriminator 2
 10629 002d EC 65                   		mov.L	[r6], r5
 10630 002f 61 05                   		cmp	#0, r5
 10631 0031 1F                      		bne	.L229
 10632                             		.loc 2 9841 54 discriminator 3
 10633 0032 A8 6D                   		mov.L	4[r6], r5
 10634 0034 61 05                   		cmp	#0, r5
 10635 0036 21 14                   		bne	.L228
 10636                             	.L229:
 10637                             		.loc 2 9841 72 discriminator 5
 10638 0038 A8 E5                   		mov.L	8[r6], r5
 10639 003a 61 05                   		cmp	#0, r5
 10640 003c 20 0E                   		beq	.L228
9842:../src/wolfcrypt/src/aes.c ****         authTag == NULL || authTagSz == 0 || authTagSz > AES_BLOCK_SIZE) {
 10641                             		.loc 2 9842 25
 10642 003e A8 ED                   		mov.L	12[r6], r5
 10643 0040 61 05                   		cmp	#0, r5
 10644 0042 10                      		beq	.L228
 10645                             		.loc 2 9842 43 discriminator 1
 10646 0043 A8 ED                   		mov.L	12[r6], r5
 10647 0045 75 55 10                		cmp	#16, r5
 10648 0048 25 09                   		bleu	.L230
 10649                             		.balign 8,3,2
 10650                             	.L228:
9843:../src/wolfcrypt/src/aes.c **** 
9844:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
 10651                             		.loc 2 9844 16
 10652 004a FB 5A 53 FF             		mov.L	#-173, r5
 10653 004e 38 92 00                		bra	.L231
 10654                             	.L230:
9845:../src/wolfcrypt/src/aes.c ****     }
9846:../src/wolfcrypt/src/aes.c **** 
9847:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SMALL_STACK
9848:../src/wolfcrypt/src/aes.c ****     if ((aes = (Aes *)XMALLOC(sizeof *aes, NULL,
 10655                             		.loc 2 9848 23
 10656 0051 FB 1A 38 01             		mov.L	#0x138, r1
 10657 0055 05 00 00 00             		bsr	_wolfSSL_Malloc
 10658 0059 E7 A1 01                		mov.L	r1, 4[r10]
 10659                             		.loc 2 9848 8
 10660 005c ED A5 01                		mov.L	4[r10], r5
 10661 005f 61 05                   		cmp	#0, r5
 10662 0061 1E                      		bne	.L232
9849:../src/wolfcrypt/src/aes.c ****                               DYNAMIC_TYPE_AES)) == NULL)
9850:../src/wolfcrypt/src/aes.c ****         return MEMORY_E;
 10663                             		.loc 2 9850 16
 10664 0062 FB 56 83                		mov.L	#-125, r5
 10665 0065 2E 7B                   		bra	.L231
 10666                             	.L232:
9851:../src/wolfcrypt/src/aes.c **** #endif
9852:../src/wolfcrypt/src/aes.c **** 
9853:../src/wolfcrypt/src/aes.c ****     ret = wc_AesInit(aes, NULL, INVALID_DEVID);
 10667                             		.loc 2 9853 11
 10668 0067 FB 36 FE                		mov.L	#-2, r3
 10669 006a 66 02                   		mov.L	#0, r2
 10670 006c ED A1 01                		mov.L	4[r10], r1
 10671 006f 05 00 00 00             		bsr	_wc_AesInit
 10672 0073 E3 A1                   		mov.L	r1, [r10]
9854:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
 10673                             		.loc 2 9854 8
 10674 0075 EC A5                   		mov.L	[r10], r5
 10675 0077 61 05                   		cmp	#0, r5
 10676 0079 21 47                   		bne	.L233
9855:../src/wolfcrypt/src/aes.c ****         ret = wc_AesGcmSetKey(aes, key, keySz);
 10677                             		.loc 2 9855 15
 10678 007b ED A3 04                		mov.L	16[r10], r3
 10679 007e ED A2 03                		mov.L	12[r10], r2
 10680 0081 ED A1 01                		mov.L	4[r10], r1
 10681 0084 05 00 00 00             		bsr	_wc_AesGcmSetKey
 10682 0088 E3 A1                   		mov.L	r1, [r10]
9856:../src/wolfcrypt/src/aes.c ****         if (ret == 0)
 10683                             		.loc 2 9856 12
 10684 008a EC A5                   		mov.L	[r10], r5
 10685 008c 61 05                   		cmp	#0, r5
 10686 008e 21 2B                   		bne	.L234
9857:../src/wolfcrypt/src/aes.c ****             ret = wc_AesGcmDecrypt(aes, NULL, NULL, 0, iv, ivSz,
 10687                             		.loc 2 9857 19
 10688 0090 A8 6D                   		mov.L	4[r6], r5
 10689 0092 A1 0D                   		mov.L	r5, 20[r0]
 10690 0094 EC 65                   		mov.L	[r6], r5
 10691 0096 A1 05                   		mov.L	r5, 16[r0]
 10692 0098 A8 ED                   		mov.L	12[r6], r5
 10693 009a A0 8D                   		mov.L	r5, 12[r0]
 10694 009c A8 E5                   		mov.L	8[r6], r5
 10695 009e A0 85                   		mov.L	r5, 8[r0]
 10696 00a0 ED A5 06                		mov.L	24[r10], r5
 10697 00a3 A0 0D                   		mov.L	r5, 4[r0]
 10698 00a5 ED A5 05                		mov.L	20[r10], r5
 10699 00a8 E3 05                   		mov.L	r5, [r0]
 10700 00aa 66 04                   		mov.L	#0, r4
 10701 00ac 66 03                   		mov.L	#0, r3
 10702 00ae 66 02                   		mov.L	#0, r2
 10703 00b0 ED A1 01                		mov.L	4[r10], r1
 10704 00b3 05 00 00 00             		bsr	_wc_AesGcmDecrypt
 10705 00b7 E3 A1                   		mov.L	r1, [r10]
 10706                             	.L234:
9858:../src/wolfcrypt/src/aes.c ****                                   authTag, authTagSz, authIn, authInSz);
9859:../src/wolfcrypt/src/aes.c ****         wc_AesFree(aes);
 10707                             		.loc 2 9859 9
 10708 00b9 ED A1 01                		mov.L	4[r10], r1
 10709 00bc 05 00 00 00             		bsr	_wc_AesFree
 10710                             	.L233:
9860:../src/wolfcrypt/src/aes.c ****     }
9861:../src/wolfcrypt/src/aes.c ****     ForceZero(aes, sizeof *aes);
 10711                             		.loc 2 9861 5
 10712 00c0 FB 2A 38 01             		mov.L	#0x138, r2
 10713 00c4 ED A1 01                		mov.L	4[r10], r1
 10714 00c7 05 00 00 00             		bsr	_ForceZero
 10715                             	.LBB14:
9862:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_SMALL_STACK
9863:../src/wolfcrypt/src/aes.c ****     XFREE(aes, NULL, DYNAMIC_TYPE_AES);
 10716                             		.loc 2 9863 5
 10717 00cb ED A5 01                		mov.L	4[r10], r5
 10718 00ce E7 A5 02                		mov.L	r5, 8[r10]
 10719 00d1 ED A5 02                		mov.L	8[r10], r5
 10720 00d4 61 05                   		cmp	#0, r5
 10721 00d6 10                      		beq	.L235
 10722                             		.loc 2 9863 5 is_stmt 0 discriminator 1
 10723 00d7 ED A1 02                		mov.L	8[r10], r1
 10724 00da 05 00 00 00             		bsr	_wolfSSL_Free
 10725                             	.L235:
 10726                             	.LBE14:
9864:../src/wolfcrypt/src/aes.c **** #endif
9865:../src/wolfcrypt/src/aes.c **** #else
9866:../src/wolfcrypt/src/aes.c ****     (void)key;
9867:../src/wolfcrypt/src/aes.c ****     (void)keySz;
9868:../src/wolfcrypt/src/aes.c ****     (void)iv;
9869:../src/wolfcrypt/src/aes.c ****     (void)ivSz;
9870:../src/wolfcrypt/src/aes.c ****     (void)authIn;
9871:../src/wolfcrypt/src/aes.c ****     (void)authInSz;
9872:../src/wolfcrypt/src/aes.c ****     (void)authTag;
9873:../src/wolfcrypt/src/aes.c ****     (void)authTagSz;
9874:../src/wolfcrypt/src/aes.c ****     ret = NOT_COMPILED_IN;
9875:../src/wolfcrypt/src/aes.c **** #endif
9876:../src/wolfcrypt/src/aes.c ****     return ret;
 10727                             		.loc 2 9876 12 is_stmt 1
 10728 00de EC A5                   		mov.L	[r10], r5
 10729                             	.L231:
9877:../src/wolfcrypt/src/aes.c **** }
 10730                             		.loc 2 9877 1
 10731 00e0 EF 51                   		mov.L	r5, r1
 10732 00e2 71 00 44                		add	#0x44, r0
 10733 00e5 7E B6                   		pop	r6
 10734 00e7 7E BA                   		pop	r10
 10735 00e9 02                      		rts
 10736                             	.LFE67:
 10738 00ea 74 10 01 00 00 00       		.section	.text.wc_GmacSetKey,"ax",@progbits
 10739                             		.global	_wc_GmacSetKey
 10741                             	_wc_GmacSetKey:
 10742                             	.LFB68:
9878:../src/wolfcrypt/src/aes.c **** 
9879:../src/wolfcrypt/src/aes.c **** #endif /* WC_NO_RNG */
9880:../src/wolfcrypt/src/aes.c **** 
9881:../src/wolfcrypt/src/aes.c **** 
9882:../src/wolfcrypt/src/aes.c **** WOLFSSL_API int wc_GmacSetKey(Gmac* gmac, const byte* key, word32 len)
9883:../src/wolfcrypt/src/aes.c **** {
 10743                             		.loc 2 9883 1
 10744 0000 7E AA                   		push.l	r10
 10745                             	.LCFI89:
 10746 0002 71 0A F4                		add	#-12, r0, r10
 10747                             	.LCFI90:
 10748 0005 EF A0                   		mov.L	r10, r0
 10749 0007 E3 A1                   		mov.L	r1, [r10]
 10750 0009 E7 A2 01                		mov.L	r2, 4[r10]
 10751 000c E7 A3 02                		mov.L	r3, 8[r10]
9884:../src/wolfcrypt/src/aes.c ****     if (gmac == NULL || key == NULL) {
 10752                             		.loc 2 9884 8
 10753 000f EC A5                   		mov.L	[r10], r5
 10754 0011 61 05                   		cmp	#0, r5
 10755 0013 17                      		beq	.L237
 10756                             		.loc 2 9884 22 discriminator 1
 10757 0014 ED A5 01                		mov.L	4[r10], r5
 10758 0017 61 05                   		cmp	#0, r5
 10759 0019 1F                      		bne	.L238
 10760                             	.L237:
9885:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
 10761                             		.loc 2 9885 16
 10762 001a FB 5A 53 FF             		mov.L	#-173, r5
 10763 001e 2E 12                   		bra	.L239
 10764                             	.L238:
9886:../src/wolfcrypt/src/aes.c ****     }
9887:../src/wolfcrypt/src/aes.c ****     return wc_AesGcmSetKey(&gmac->aes, key, len);
 10765                             		.loc 2 9887 12
 10766 0020 EC A5                   		mov.L	[r10], r5
 10767 0022 ED A3 02                		mov.L	8[r10], r3
 10768 0025 ED A2 01                		mov.L	4[r10], r2
 10769 0028 EF 51                   		mov.L	r5, r1
 10770 002a 05 00 00 00             		bsr	_wc_AesGcmSetKey
 10771 002e EF 15                   		mov.L	r1, r5
 10772                             	.L239:
9888:../src/wolfcrypt/src/aes.c **** }
 10773                             		.loc 2 9888 1
 10774 0030 EF 51                   		mov.L	r5, r1
 10775 0032 3F AA 04                		rtsd	#16, r10-r10
 10776                             	.LFE68:
 10778                             		.section	.text.wc_GmacUpdate,"ax",@progbits
 10779                             		.global	_wc_GmacUpdate
 10781                             	_wc_GmacUpdate:
 10782                             	.LFB69:
9889:../src/wolfcrypt/src/aes.c **** 
9890:../src/wolfcrypt/src/aes.c **** 
9891:../src/wolfcrypt/src/aes.c **** WOLFSSL_API int wc_GmacUpdate(Gmac* gmac, const byte* iv, word32 ivSz,
9892:../src/wolfcrypt/src/aes.c ****                               const byte* authIn, word32 authInSz,
9893:../src/wolfcrypt/src/aes.c ****                               byte* authTag, word32 authTagSz)
9894:../src/wolfcrypt/src/aes.c **** {
 10783                             		.loc 2 9894 1
 10784 0000 7E AA                   		push.l	r10
 10785                             	.LCFI91:
 10786 0002 71 0A E4                		add	#-28, r0, r10
 10787                             	.LCFI92:
 10788 0005 71 A0 E8                		add	#-24, r10, r0
 10789                             	.LCFI93:
 10790 0008 75 45 24                		mov.L	#36, r5
 10791 000b 4B A5                   		add	r10, r5
 10792 000d E3 A1                   		mov.L	r1, [r10]
 10793 000f E7 A2 01                		mov.L	r2, 4[r10]
 10794 0012 E7 A3 02                		mov.L	r3, 8[r10]
 10795 0015 E7 A4 03                		mov.L	r4, 12[r10]
9895:../src/wolfcrypt/src/aes.c ****     if (gmac == NULL) {
 10796                             		.loc 2 9895 8
 10797 0018 EC A4                   		mov.L	[r10], r4
 10798 001a 61 04                   		cmp	#0, r4
 10799 001c 1F                      		bne	.L241
9896:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
 10800                             		.loc 2 9896 16
 10801 001d FB 5A 53 FF             		mov.L	#-173, r5
 10802 0021 2E 2B                   		bra	.L242
 10803                             	.L241:
9897:../src/wolfcrypt/src/aes.c ****     }
9898:../src/wolfcrypt/src/aes.c **** 
9899:../src/wolfcrypt/src/aes.c ****     return wc_AesGcmEncrypt(&gmac->aes, NULL, NULL, 0, iv, ivSz,
 10804                             		.loc 2 9899 12
 10805 0023 EC A1                   		mov.L	[r10], r1
 10806 0025 EC 54                   		mov.L	[r5], r4
 10807 0027 A1 0C                   		mov.L	r4, 20[r0]
 10808 0029 ED A4 03                		mov.L	12[r10], r4
 10809 002c A1 04                   		mov.L	r4, 16[r0]
 10810 002e A8 D4                   		mov.L	8[r5], r4
 10811 0030 A0 8C                   		mov.L	r4, 12[r0]
 10812 0032 A8 5D                   		mov.L	4[r5], r5
 10813 0034 A0 85                   		mov.L	r5, 8[r0]
 10814 0036 ED A5 02                		mov.L	8[r10], r5
 10815 0039 A0 0D                   		mov.L	r5, 4[r0]
 10816 003b ED A5 01                		mov.L	4[r10], r5
 10817 003e E3 05                   		mov.L	r5, [r0]
 10818 0040 66 04                   		mov.L	#0, r4
 10819 0042 66 03                   		mov.L	#0, r3
 10820 0044 66 02                   		mov.L	#0, r2
 10821 0046 05 00 00 00             		bsr	_wc_AesGcmEncrypt
 10822 004a EF 15                   		mov.L	r1, r5
 10823                             	.L242:
9900:../src/wolfcrypt/src/aes.c ****                                          authTag, authTagSz, authIn, authInSz);
9901:../src/wolfcrypt/src/aes.c **** }
 10824                             		.loc 2 9901 1
 10825 004c EF 51                   		mov.L	r5, r1
 10826 004e 3F AA 0E                		rtsd	#56, r10-r10
 10827                             	.LFE69:
 10829                             		.section	.text.wc_AesInit,"ax",@progbits
 10830                             		.global	_wc_AesInit
 10832                             	_wc_AesInit:
 10833                             	.LFB70:
9902:../src/wolfcrypt/src/aes.c **** 
9903:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AESGCM */
9904:../src/wolfcrypt/src/aes.c **** 
9905:../src/wolfcrypt/src/aes.c **** 
9906:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AESCCM
9907:../src/wolfcrypt/src/aes.c **** 
9908:../src/wolfcrypt/src/aes.c **** int wc_AesCcmSetKey(Aes* aes, const byte* key, word32 keySz)
9909:../src/wolfcrypt/src/aes.c **** {
9910:../src/wolfcrypt/src/aes.c ****     if (!((keySz == 16) || (keySz == 24) || (keySz == 32)))
9911:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
9912:../src/wolfcrypt/src/aes.c **** 
9913:../src/wolfcrypt/src/aes.c ****     return wc_AesSetKey(aes, key, keySz, NULL, AES_ENCRYPTION);
9914:../src/wolfcrypt/src/aes.c **** }
9915:../src/wolfcrypt/src/aes.c **** 
9916:../src/wolfcrypt/src/aes.c **** 
9917:../src/wolfcrypt/src/aes.c **** /* Checks if the tag size is an accepted value based on RFC 3610 section 2
9918:../src/wolfcrypt/src/aes.c ****  * returns 0 if tag size is ok
9919:../src/wolfcrypt/src/aes.c ****  */
9920:../src/wolfcrypt/src/aes.c **** int wc_AesCcmCheckTagSize(int sz)
9921:../src/wolfcrypt/src/aes.c **** {
9922:../src/wolfcrypt/src/aes.c ****     /* values here are from RFC 3610 section 2 */
9923:../src/wolfcrypt/src/aes.c ****     if (sz != 4 && sz != 6 && sz != 8 && sz != 10 && sz != 12 && sz != 14
9924:../src/wolfcrypt/src/aes.c ****             && sz != 16) {
9925:../src/wolfcrypt/src/aes.c ****         WOLFSSL_MSG("Bad auth tag size AES-CCM");
9926:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
9927:../src/wolfcrypt/src/aes.c ****     }
9928:../src/wolfcrypt/src/aes.c ****     return 0;
9929:../src/wolfcrypt/src/aes.c **** }
9930:../src/wolfcrypt/src/aes.c **** 
9931:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_ARMASM
9932:../src/wolfcrypt/src/aes.c ****     /* implementation located in wolfcrypt/src/port/arm/armv8-aes.c */
9933:../src/wolfcrypt/src/aes.c **** 
9934:../src/wolfcrypt/src/aes.c **** #elif defined(HAVE_COLDFIRE_SEC)
9935:../src/wolfcrypt/src/aes.c ****     #error "Coldfire SEC doesn't currently support AES-CCM mode"
9936:../src/wolfcrypt/src/aes.c **** 
9937:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_IMX6_CAAM) && !defined(NO_IMX6_CAAM_AES) && \
9938:../src/wolfcrypt/src/aes.c ****         !defined(WOLFSSL_QNX_CAAM)
9939:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/caam_aes.c */
9940:../src/wolfcrypt/src/aes.c **** 
9941:../src/wolfcrypt/src/aes.c **** #elif defined(WOLFSSL_SILABS_SE_ACCEL)
9942:../src/wolfcrypt/src/aes.c ****     /* implemented in wolfcrypt/src/port/silabs/silabs_aes.c */
9943:../src/wolfcrypt/src/aes.c **** int wc_AesCcmEncrypt(Aes* aes, byte* out, const byte* in, word32 inSz,
9944:../src/wolfcrypt/src/aes.c ****                    const byte* nonce, word32 nonceSz,
9945:../src/wolfcrypt/src/aes.c ****                    byte* authTag, word32 authTagSz,
9946:../src/wolfcrypt/src/aes.c ****                    const byte* authIn, word32 authInSz)
9947:../src/wolfcrypt/src/aes.c **** {
9948:../src/wolfcrypt/src/aes.c ****     return wc_AesCcmEncrypt_silabs(
9949:../src/wolfcrypt/src/aes.c ****         aes, out, in, inSz,
9950:../src/wolfcrypt/src/aes.c ****         nonce, nonceSz,
9951:../src/wolfcrypt/src/aes.c ****         authTag, authTagSz,
9952:../src/wolfcrypt/src/aes.c ****         authIn, authInSz);
9953:../src/wolfcrypt/src/aes.c **** }
9954:../src/wolfcrypt/src/aes.c **** 
9955:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AES_DECRYPT
9956:../src/wolfcrypt/src/aes.c **** int  wc_AesCcmDecrypt(Aes* aes, byte* out, const byte* in, word32 inSz,
9957:../src/wolfcrypt/src/aes.c ****                    const byte* nonce, word32 nonceSz,
9958:../src/wolfcrypt/src/aes.c ****                    const byte* authTag, word32 authTagSz,
9959:../src/wolfcrypt/src/aes.c ****                    const byte* authIn, word32 authInSz)
9960:../src/wolfcrypt/src/aes.c **** {
9961:../src/wolfcrypt/src/aes.c ****     return wc_AesCcmDecrypt_silabs(
9962:../src/wolfcrypt/src/aes.c ****         aes, out, in, inSz,
9963:../src/wolfcrypt/src/aes.c ****         nonce, nonceSz,
9964:../src/wolfcrypt/src/aes.c ****         authTag, authTagSz,
9965:../src/wolfcrypt/src/aes.c ****         authIn, authInSz);
9966:../src/wolfcrypt/src/aes.c **** }
9967:../src/wolfcrypt/src/aes.c **** #endif
9968:../src/wolfcrypt/src/aes.c **** #elif defined(FREESCALE_LTC)
9969:../src/wolfcrypt/src/aes.c **** 
9970:../src/wolfcrypt/src/aes.c **** /* return 0 on success */
9971:../src/wolfcrypt/src/aes.c **** int wc_AesCcmEncrypt(Aes* aes, byte* out, const byte* in, word32 inSz,
9972:../src/wolfcrypt/src/aes.c ****                    const byte* nonce, word32 nonceSz,
9973:../src/wolfcrypt/src/aes.c ****                    byte* authTag, word32 authTagSz,
9974:../src/wolfcrypt/src/aes.c ****                    const byte* authIn, word32 authInSz)
9975:../src/wolfcrypt/src/aes.c **** {
9976:../src/wolfcrypt/src/aes.c ****     byte *key;
9977:../src/wolfcrypt/src/aes.c ****     word32 keySize;
9978:../src/wolfcrypt/src/aes.c ****     status_t status;
9979:../src/wolfcrypt/src/aes.c **** 
9980:../src/wolfcrypt/src/aes.c ****     /* sanity check on arguments */
9981:../src/wolfcrypt/src/aes.c ****     /* note, LTC_AES_EncryptTagCcm() doesn't allow null src or dst
9982:../src/wolfcrypt/src/aes.c ****      * ptrs even if inSz is zero (ltc_aes_ccm_check_input_args()), so
9983:../src/wolfcrypt/src/aes.c ****      * don't allow it here either.
9984:../src/wolfcrypt/src/aes.c ****      */
9985:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || out == NULL || in == NULL || nonce == NULL
9986:../src/wolfcrypt/src/aes.c ****             || authTag == NULL || nonceSz < 7 || nonceSz > 13) {
9987:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
9988:../src/wolfcrypt/src/aes.c ****     }
9989:../src/wolfcrypt/src/aes.c **** 
9990:../src/wolfcrypt/src/aes.c ****     if (wc_AesCcmCheckTagSize(authTagSz) != 0) {
9991:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
9992:../src/wolfcrypt/src/aes.c ****     }
9993:../src/wolfcrypt/src/aes.c **** 
9994:../src/wolfcrypt/src/aes.c ****     key = (byte*)aes->key;
9995:../src/wolfcrypt/src/aes.c **** 
9996:../src/wolfcrypt/src/aes.c ****     status = wc_AesGetKeySize(aes, &keySize);
9997:../src/wolfcrypt/src/aes.c ****     if (status != 0) {
9998:../src/wolfcrypt/src/aes.c ****         return status;
9999:../src/wolfcrypt/src/aes.c ****     }
10000:../src/wolfcrypt/src/aes.c **** 
10001:../src/wolfcrypt/src/aes.c ****     status = wolfSSL_CryptHwMutexLock();
10002:../src/wolfcrypt/src/aes.c ****     if (status != 0)
10003:../src/wolfcrypt/src/aes.c ****         return status;
10004:../src/wolfcrypt/src/aes.c **** 
10005:../src/wolfcrypt/src/aes.c ****     status = LTC_AES_EncryptTagCcm(LTC_BASE, in, out, inSz,
10006:../src/wolfcrypt/src/aes.c ****         nonce, nonceSz, authIn, authInSz, key, keySize, authTag, authTagSz);
10007:../src/wolfcrypt/src/aes.c ****     wolfSSL_CryptHwMutexUnLock();
10008:../src/wolfcrypt/src/aes.c **** 
10009:../src/wolfcrypt/src/aes.c ****     return (kStatus_Success == status) ? 0 : BAD_FUNC_ARG;
10010:../src/wolfcrypt/src/aes.c **** }
10011:../src/wolfcrypt/src/aes.c **** 
10012:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AES_DECRYPT
10013:../src/wolfcrypt/src/aes.c **** int  wc_AesCcmDecrypt(Aes* aes, byte* out, const byte* in, word32 inSz,
10014:../src/wolfcrypt/src/aes.c ****                    const byte* nonce, word32 nonceSz,
10015:../src/wolfcrypt/src/aes.c ****                    const byte* authTag, word32 authTagSz,
10016:../src/wolfcrypt/src/aes.c ****                    const byte* authIn, word32 authInSz)
10017:../src/wolfcrypt/src/aes.c **** {
10018:../src/wolfcrypt/src/aes.c ****     byte *key;
10019:../src/wolfcrypt/src/aes.c ****     word32 keySize;
10020:../src/wolfcrypt/src/aes.c ****     status_t status;
10021:../src/wolfcrypt/src/aes.c **** 
10022:../src/wolfcrypt/src/aes.c ****     /* sanity check on arguments */
10023:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || out == NULL || in == NULL || nonce == NULL
10024:../src/wolfcrypt/src/aes.c ****             || authTag == NULL || nonceSz < 7 || nonceSz > 13) {
10025:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
10026:../src/wolfcrypt/src/aes.c ****     }
10027:../src/wolfcrypt/src/aes.c **** 
10028:../src/wolfcrypt/src/aes.c ****     key = (byte*)aes->key;
10029:../src/wolfcrypt/src/aes.c **** 
10030:../src/wolfcrypt/src/aes.c ****     status = wc_AesGetKeySize(aes, &keySize);
10031:../src/wolfcrypt/src/aes.c ****     if (status != 0) {
10032:../src/wolfcrypt/src/aes.c ****         return status;
10033:../src/wolfcrypt/src/aes.c ****     }
10034:../src/wolfcrypt/src/aes.c **** 
10035:../src/wolfcrypt/src/aes.c ****     status = wolfSSL_CryptHwMutexLock();
10036:../src/wolfcrypt/src/aes.c ****     if (status != 0)
10037:../src/wolfcrypt/src/aes.c ****         return status;
10038:../src/wolfcrypt/src/aes.c ****     status = LTC_AES_DecryptTagCcm(LTC_BASE, in, out, inSz,
10039:../src/wolfcrypt/src/aes.c ****         nonce, nonceSz, authIn, authInSz, key, keySize, authTag, authTagSz);
10040:../src/wolfcrypt/src/aes.c ****     wolfSSL_CryptHwMutexUnLock();
10041:../src/wolfcrypt/src/aes.c **** 
10042:../src/wolfcrypt/src/aes.c ****     if (status != kStatus_Success) {
10043:../src/wolfcrypt/src/aes.c ****         XMEMSET(out, 0, inSz);
10044:../src/wolfcrypt/src/aes.c ****         return AES_CCM_AUTH_E;
10045:../src/wolfcrypt/src/aes.c ****     }
10046:../src/wolfcrypt/src/aes.c ****     return 0;
10047:../src/wolfcrypt/src/aes.c **** }
10048:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_DECRYPT */
10049:../src/wolfcrypt/src/aes.c **** 
10050:../src/wolfcrypt/src/aes.c **** #else
10051:../src/wolfcrypt/src/aes.c **** 
10052:../src/wolfcrypt/src/aes.c **** /* Software CCM */
10053:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int roll_x(
10054:../src/wolfcrypt/src/aes.c ****     Aes* aes, const byte* in, word32 inSz, byte* out)
10055:../src/wolfcrypt/src/aes.c **** {
10056:../src/wolfcrypt/src/aes.c ****     int ret;
10057:../src/wolfcrypt/src/aes.c **** 
10058:../src/wolfcrypt/src/aes.c ****     /* process the bulk of the data */
10059:../src/wolfcrypt/src/aes.c ****     while (inSz >= AES_BLOCK_SIZE) {
10060:../src/wolfcrypt/src/aes.c ****         xorbuf(out, in, AES_BLOCK_SIZE);
10061:../src/wolfcrypt/src/aes.c ****         in += AES_BLOCK_SIZE;
10062:../src/wolfcrypt/src/aes.c ****         inSz -= AES_BLOCK_SIZE;
10063:../src/wolfcrypt/src/aes.c **** 
10064:../src/wolfcrypt/src/aes.c ****         ret = wc_AesEncrypt(aes, out, out);
10065:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
10066:../src/wolfcrypt/src/aes.c ****             return ret;
10067:../src/wolfcrypt/src/aes.c ****     }
10068:../src/wolfcrypt/src/aes.c **** 
10069:../src/wolfcrypt/src/aes.c ****     /* process remainder of the data */
10070:../src/wolfcrypt/src/aes.c ****     if (inSz > 0) {
10071:../src/wolfcrypt/src/aes.c ****         xorbuf(out, in, inSz);
10072:../src/wolfcrypt/src/aes.c ****         ret = wc_AesEncrypt(aes, out, out);
10073:../src/wolfcrypt/src/aes.c ****         if (ret != 0)
10074:../src/wolfcrypt/src/aes.c ****             return ret;
10075:../src/wolfcrypt/src/aes.c ****     }
10076:../src/wolfcrypt/src/aes.c **** 
10077:../src/wolfcrypt/src/aes.c ****     return 0;
10078:../src/wolfcrypt/src/aes.c **** }
10079:../src/wolfcrypt/src/aes.c **** 
10080:../src/wolfcrypt/src/aes.c **** static WARN_UNUSED_RESULT int roll_auth(
10081:../src/wolfcrypt/src/aes.c ****     Aes* aes, const byte* in, word32 inSz, byte* out)
10082:../src/wolfcrypt/src/aes.c **** {
10083:../src/wolfcrypt/src/aes.c ****     word32 authLenSz;
10084:../src/wolfcrypt/src/aes.c ****     word32 remainder;
10085:../src/wolfcrypt/src/aes.c ****     int ret;
10086:../src/wolfcrypt/src/aes.c **** 
10087:../src/wolfcrypt/src/aes.c ****     /* encode the length in */
10088:../src/wolfcrypt/src/aes.c ****     if (inSz <= 0xFEFF) {
10089:../src/wolfcrypt/src/aes.c ****         authLenSz = 2;
10090:../src/wolfcrypt/src/aes.c ****         out[0] ^= ((inSz & 0xFF00) >> 8);
10091:../src/wolfcrypt/src/aes.c ****         out[1] ^=  (inSz & 0x00FF);
10092:../src/wolfcrypt/src/aes.c ****     }
10093:../src/wolfcrypt/src/aes.c ****     else if (inSz <= 0xFFFFFFFF) {
10094:../src/wolfcrypt/src/aes.c ****         authLenSz = 6;
10095:../src/wolfcrypt/src/aes.c ****         out[0] ^= 0xFF; out[1] ^= 0xFE;
10096:../src/wolfcrypt/src/aes.c ****         out[2] ^= ((inSz & 0xFF000000) >> 24);
10097:../src/wolfcrypt/src/aes.c ****         out[3] ^= ((inSz & 0x00FF0000) >> 16);
10098:../src/wolfcrypt/src/aes.c ****         out[4] ^= ((inSz & 0x0000FF00) >>  8);
10099:../src/wolfcrypt/src/aes.c ****         out[5] ^=  (inSz & 0x000000FF);
10100:../src/wolfcrypt/src/aes.c ****     }
10101:../src/wolfcrypt/src/aes.c ****     /* Note, the protocol handles auth data up to 2^64, but we are
10102:../src/wolfcrypt/src/aes.c ****      * using 32-bit sizes right now, so the bigger data isn't handled
10103:../src/wolfcrypt/src/aes.c ****      * else if (inSz <= 0xFFFFFFFFFFFFFFFF) {} */
10104:../src/wolfcrypt/src/aes.c ****     else
10105:../src/wolfcrypt/src/aes.c ****         return BAD_LENGTH_E;
10106:../src/wolfcrypt/src/aes.c **** 
10107:../src/wolfcrypt/src/aes.c ****     /* start fill out the rest of the first block */
10108:../src/wolfcrypt/src/aes.c ****     remainder = AES_BLOCK_SIZE - authLenSz;
10109:../src/wolfcrypt/src/aes.c ****     if (inSz >= remainder) {
10110:../src/wolfcrypt/src/aes.c ****         /* plenty of bulk data to fill the remainder of this block */
10111:../src/wolfcrypt/src/aes.c ****         xorbuf(out + authLenSz, in, remainder);
10112:../src/wolfcrypt/src/aes.c ****         inSz -= remainder;
10113:../src/wolfcrypt/src/aes.c ****         in += remainder;
10114:../src/wolfcrypt/src/aes.c ****     }
10115:../src/wolfcrypt/src/aes.c ****     else {
10116:../src/wolfcrypt/src/aes.c ****         /* not enough bulk data, copy what is available, and pad zero */
10117:../src/wolfcrypt/src/aes.c ****         xorbuf(out + authLenSz, in, inSz);
10118:../src/wolfcrypt/src/aes.c ****         inSz = 0;
10119:../src/wolfcrypt/src/aes.c ****     }
10120:../src/wolfcrypt/src/aes.c ****     ret = wc_AesEncrypt(aes, out, out);
10121:../src/wolfcrypt/src/aes.c **** 
10122:../src/wolfcrypt/src/aes.c ****     if ((ret == 0) && (inSz > 0)) {
10123:../src/wolfcrypt/src/aes.c ****         ret = roll_x(aes, in, inSz, out);
10124:../src/wolfcrypt/src/aes.c ****     }
10125:../src/wolfcrypt/src/aes.c **** 
10126:../src/wolfcrypt/src/aes.c ****     return ret;
10127:../src/wolfcrypt/src/aes.c **** }
10128:../src/wolfcrypt/src/aes.c **** 
10129:../src/wolfcrypt/src/aes.c **** 
10130:../src/wolfcrypt/src/aes.c **** static WC_INLINE void AesCcmCtrInc(byte* B, word32 lenSz)
10131:../src/wolfcrypt/src/aes.c **** {
10132:../src/wolfcrypt/src/aes.c ****     word32 i;
10133:../src/wolfcrypt/src/aes.c **** 
10134:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < lenSz; i++) {
10135:../src/wolfcrypt/src/aes.c ****         if (++B[AES_BLOCK_SIZE - 1 - i] != 0) return;
10136:../src/wolfcrypt/src/aes.c ****     }
10137:../src/wolfcrypt/src/aes.c **** }
10138:../src/wolfcrypt/src/aes.c **** 
10139:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
10140:../src/wolfcrypt/src/aes.c **** static WC_INLINE void AesCcmCtrIncSet4(byte* B, word32 lenSz)
10141:../src/wolfcrypt/src/aes.c **** {
10142:../src/wolfcrypt/src/aes.c ****     word32 i;
10143:../src/wolfcrypt/src/aes.c **** 
10144:../src/wolfcrypt/src/aes.c ****     /* B+1 = B */
10145:../src/wolfcrypt/src/aes.c ****     XMEMCPY(B + AES_BLOCK_SIZE * 1, B, AES_BLOCK_SIZE);
10146:../src/wolfcrypt/src/aes.c ****     /* B+2,B+3 = B,B+1 */
10147:../src/wolfcrypt/src/aes.c ****     XMEMCPY(B + AES_BLOCK_SIZE * 2, B, AES_BLOCK_SIZE * 2);
10148:../src/wolfcrypt/src/aes.c **** 
10149:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < lenSz; i++) {
10150:../src/wolfcrypt/src/aes.c ****         if (++B[AES_BLOCK_SIZE * 2 - 1 - i] != 0) break;
10151:../src/wolfcrypt/src/aes.c ****     }
10152:../src/wolfcrypt/src/aes.c ****     B[AES_BLOCK_SIZE * 3 - 1] += 2;
10153:../src/wolfcrypt/src/aes.c ****     if (B[AES_BLOCK_SIZE * 3 - 1] < 2) {
10154:../src/wolfcrypt/src/aes.c ****         for (i = 1; i < lenSz; i++) {
10155:../src/wolfcrypt/src/aes.c ****             if (++B[AES_BLOCK_SIZE * 3 - 1 - i] != 0) break;
10156:../src/wolfcrypt/src/aes.c ****         }
10157:../src/wolfcrypt/src/aes.c ****     }
10158:../src/wolfcrypt/src/aes.c ****     B[AES_BLOCK_SIZE * 4 - 1] += 3;
10159:../src/wolfcrypt/src/aes.c ****     if (B[AES_BLOCK_SIZE * 4 - 1] < 3) {
10160:../src/wolfcrypt/src/aes.c ****         for (i = 1; i < lenSz; i++) {
10161:../src/wolfcrypt/src/aes.c ****             if (++B[AES_BLOCK_SIZE * 4 - 1 - i] != 0) break;
10162:../src/wolfcrypt/src/aes.c ****         }
10163:../src/wolfcrypt/src/aes.c ****     }
10164:../src/wolfcrypt/src/aes.c **** }
10165:../src/wolfcrypt/src/aes.c **** 
10166:../src/wolfcrypt/src/aes.c **** static WC_INLINE void AesCcmCtrInc4(byte* B, word32 lenSz)
10167:../src/wolfcrypt/src/aes.c **** {
10168:../src/wolfcrypt/src/aes.c ****     word32 i;
10169:../src/wolfcrypt/src/aes.c **** 
10170:../src/wolfcrypt/src/aes.c ****     B[AES_BLOCK_SIZE - 1] += 4;
10171:../src/wolfcrypt/src/aes.c ****     if (B[AES_BLOCK_SIZE - 1] < 4) {
10172:../src/wolfcrypt/src/aes.c ****         for (i = 1; i < lenSz; i++) {
10173:../src/wolfcrypt/src/aes.c ****             if (++B[AES_BLOCK_SIZE - 1 - i] != 0) break;
10174:../src/wolfcrypt/src/aes.c ****         }
10175:../src/wolfcrypt/src/aes.c ****     }
10176:../src/wolfcrypt/src/aes.c **** }
10177:../src/wolfcrypt/src/aes.c **** #endif
10178:../src/wolfcrypt/src/aes.c **** 
10179:../src/wolfcrypt/src/aes.c **** /* Software AES - CCM Encrypt */
10180:../src/wolfcrypt/src/aes.c **** /* return 0 on success */
10181:../src/wolfcrypt/src/aes.c **** int wc_AesCcmEncrypt(Aes* aes, byte* out, const byte* in, word32 inSz,
10182:../src/wolfcrypt/src/aes.c ****                    const byte* nonce, word32 nonceSz,
10183:../src/wolfcrypt/src/aes.c ****                    byte* authTag, word32 authTagSz,
10184:../src/wolfcrypt/src/aes.c ****                    const byte* authIn, word32 authInSz)
10185:../src/wolfcrypt/src/aes.c **** {
10186:../src/wolfcrypt/src/aes.c **** #ifndef WOLFSSL_AESNI
10187:../src/wolfcrypt/src/aes.c ****     byte A[AES_BLOCK_SIZE];
10188:../src/wolfcrypt/src/aes.c ****     byte B[AES_BLOCK_SIZE];
10189:../src/wolfcrypt/src/aes.c **** #else
10190:../src/wolfcrypt/src/aes.c ****     ALIGN128 byte A[AES_BLOCK_SIZE * 4];
10191:../src/wolfcrypt/src/aes.c ****     ALIGN128 byte B[AES_BLOCK_SIZE * 4];
10192:../src/wolfcrypt/src/aes.c **** #endif
10193:../src/wolfcrypt/src/aes.c ****     byte lenSz;
10194:../src/wolfcrypt/src/aes.c ****     word32 i;
10195:../src/wolfcrypt/src/aes.c ****     byte mask = 0xFF;
10196:../src/wolfcrypt/src/aes.c ****     const word32 wordSz = (word32)sizeof(word32);
10197:../src/wolfcrypt/src/aes.c ****     int ret;
10198:../src/wolfcrypt/src/aes.c **** 
10199:../src/wolfcrypt/src/aes.c ****     /* sanity check on arguments */
10200:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || (inSz != 0 && (in == NULL || out == NULL)) ||
10201:../src/wolfcrypt/src/aes.c ****         nonce == NULL || authTag == NULL || nonceSz < 7 || nonceSz > 13 ||
10202:../src/wolfcrypt/src/aes.c ****             authTagSz > AES_BLOCK_SIZE)
10203:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
10204:../src/wolfcrypt/src/aes.c **** 
10205:../src/wolfcrypt/src/aes.c ****     /* sanity check on tag size */
10206:../src/wolfcrypt/src/aes.c ****     if (wc_AesCcmCheckTagSize(authTagSz) != 0) {
10207:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
10208:../src/wolfcrypt/src/aes.c ****     }
10209:../src/wolfcrypt/src/aes.c **** 
10210:../src/wolfcrypt/src/aes.c **** #ifdef WOLF_CRYPTO_CB
10211:../src/wolfcrypt/src/aes.c ****     if (aes->devId != INVALID_DEVID) {
10212:../src/wolfcrypt/src/aes.c ****         int crypto_cb_ret =
10213:../src/wolfcrypt/src/aes.c ****             wc_CryptoCb_AesCcmEncrypt(aes, out, in, inSz, nonce, nonceSz,
10214:../src/wolfcrypt/src/aes.c ****                                       authTag, authTagSz, authIn, authInSz);
10215:../src/wolfcrypt/src/aes.c ****         if (crypto_cb_ret != CRYPTOCB_UNAVAILABLE)
10216:../src/wolfcrypt/src/aes.c ****             return crypto_cb_ret;
10217:../src/wolfcrypt/src/aes.c ****         /* fall-through when unavailable */
10218:../src/wolfcrypt/src/aes.c ****     }
10219:../src/wolfcrypt/src/aes.c **** #endif
10220:../src/wolfcrypt/src/aes.c **** 
10221:../src/wolfcrypt/src/aes.c ****     XMEMSET(A, 0, sizeof(A));
10222:../src/wolfcrypt/src/aes.c ****     XMEMCPY(B+1, nonce, nonceSz);
10223:../src/wolfcrypt/src/aes.c ****     lenSz = AES_BLOCK_SIZE - 1 - (byte)nonceSz;
10224:../src/wolfcrypt/src/aes.c ****     B[0] = (authInSz > 0 ? 64 : 0)
10225:../src/wolfcrypt/src/aes.c ****          + (8 * (((byte)authTagSz - 2) / 2))
10226:../src/wolfcrypt/src/aes.c ****          + (lenSz - 1);
10227:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < lenSz; i++) {
10228:../src/wolfcrypt/src/aes.c ****         if (mask && i >= wordSz)
10229:../src/wolfcrypt/src/aes.c ****             mask = 0x00;
10230:../src/wolfcrypt/src/aes.c ****         B[AES_BLOCK_SIZE - 1 - i] = (inSz >> ((8 * i) & mask)) & mask;
10231:../src/wolfcrypt/src/aes.c ****     }
10232:../src/wolfcrypt/src/aes.c **** 
10233:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
10234:../src/wolfcrypt/src/aes.c ****     wc_MemZero_Add("wc_AesCcmEncrypt B", B, sizeof(B));
10235:../src/wolfcrypt/src/aes.c **** #endif
10236:../src/wolfcrypt/src/aes.c **** 
10237:../src/wolfcrypt/src/aes.c ****     ret = wc_AesEncrypt(aes, B, A);
10238:../src/wolfcrypt/src/aes.c ****     if (ret != 0) {
10239:../src/wolfcrypt/src/aes.c ****         ForceZero(B, sizeof(B));
10240:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_CHECK_MEM_ZERO
10241:../src/wolfcrypt/src/aes.c ****         wc_MemZero_Check(B, sizeof(B));
10242:../src/wolfcrypt/src/aes.c ****     #endif
10243:../src/wolfcrypt/src/aes.c ****         return ret;
10244:../src/wolfcrypt/src/aes.c ****     }
10245:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
10246:../src/wolfcrypt/src/aes.c ****     wc_MemZero_Add("wc_AesCcmEncrypt A", A, sizeof(A));
10247:../src/wolfcrypt/src/aes.c **** #endif
10248:../src/wolfcrypt/src/aes.c **** 
10249:../src/wolfcrypt/src/aes.c ****     if (authInSz > 0) {
10250:../src/wolfcrypt/src/aes.c ****         ret = roll_auth(aes, authIn, authInSz, A);
10251:../src/wolfcrypt/src/aes.c ****         if (ret != 0) {
10252:../src/wolfcrypt/src/aes.c ****             ForceZero(A, sizeof(A));
10253:../src/wolfcrypt/src/aes.c ****             ForceZero(B, sizeof(B));
10254:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
10255:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(A, sizeof(A));
10256:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(B, sizeof(B));
10257:../src/wolfcrypt/src/aes.c ****         #endif
10258:../src/wolfcrypt/src/aes.c ****             return ret;
10259:../src/wolfcrypt/src/aes.c ****         }
10260:../src/wolfcrypt/src/aes.c ****     }
10261:../src/wolfcrypt/src/aes.c ****     if (inSz > 0) {
10262:../src/wolfcrypt/src/aes.c ****         ret = roll_x(aes, in, inSz, A);
10263:../src/wolfcrypt/src/aes.c ****         if (ret != 0) {
10264:../src/wolfcrypt/src/aes.c ****             ForceZero(A, sizeof(A));
10265:../src/wolfcrypt/src/aes.c ****             ForceZero(B, sizeof(B));
10266:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
10267:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(A, sizeof(A));
10268:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(B, sizeof(B));
10269:../src/wolfcrypt/src/aes.c ****         #endif
10270:../src/wolfcrypt/src/aes.c ****             return ret;
10271:../src/wolfcrypt/src/aes.c ****         }
10272:../src/wolfcrypt/src/aes.c ****     }
10273:../src/wolfcrypt/src/aes.c ****     XMEMCPY(authTag, A, authTagSz);
10274:../src/wolfcrypt/src/aes.c **** 
10275:../src/wolfcrypt/src/aes.c ****     B[0] = lenSz - 1;
10276:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < lenSz; i++)
10277:../src/wolfcrypt/src/aes.c ****         B[AES_BLOCK_SIZE - 1 - i] = 0;
10278:../src/wolfcrypt/src/aes.c ****     ret = wc_AesEncrypt(aes, B, A);
10279:../src/wolfcrypt/src/aes.c ****     if (ret != 0) {
10280:../src/wolfcrypt/src/aes.c ****         ForceZero(A, sizeof(A));
10281:../src/wolfcrypt/src/aes.c ****         ForceZero(B, sizeof(B));
10282:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_CHECK_MEM_ZERO
10283:../src/wolfcrypt/src/aes.c ****         wc_MemZero_Check(A, sizeof(A));
10284:../src/wolfcrypt/src/aes.c ****         wc_MemZero_Check(B, sizeof(B));
10285:../src/wolfcrypt/src/aes.c ****     #endif
10286:../src/wolfcrypt/src/aes.c ****         return ret;
10287:../src/wolfcrypt/src/aes.c ****     }
10288:../src/wolfcrypt/src/aes.c ****     xorbuf(authTag, A, authTagSz);
10289:../src/wolfcrypt/src/aes.c **** 
10290:../src/wolfcrypt/src/aes.c ****     B[15] = 1;
10291:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
10292:../src/wolfcrypt/src/aes.c ****     if (haveAESNI && aes->use_aesni) {
10293:../src/wolfcrypt/src/aes.c ****         SAVE_VECTOR_REGISTERS(return _svr_ret;);
10294:../src/wolfcrypt/src/aes.c ****         while (inSz >= AES_BLOCK_SIZE * 4) {
10295:../src/wolfcrypt/src/aes.c ****             AesCcmCtrIncSet4(B, lenSz);
10296:../src/wolfcrypt/src/aes.c **** 
10297:../src/wolfcrypt/src/aes.c ****             AES_ECB_encrypt(B, A, AES_BLOCK_SIZE * 4, (byte*)aes->key,
10298:../src/wolfcrypt/src/aes.c ****                             aes->rounds);
10299:../src/wolfcrypt/src/aes.c **** 
10300:../src/wolfcrypt/src/aes.c ****             xorbuf(A, in, AES_BLOCK_SIZE * 4);
10301:../src/wolfcrypt/src/aes.c ****             XMEMCPY(out, A, AES_BLOCK_SIZE * 4);
10302:../src/wolfcrypt/src/aes.c **** 
10303:../src/wolfcrypt/src/aes.c ****             inSz -= AES_BLOCK_SIZE * 4;
10304:../src/wolfcrypt/src/aes.c ****             in += AES_BLOCK_SIZE * 4;
10305:../src/wolfcrypt/src/aes.c ****             out += AES_BLOCK_SIZE * 4;
10306:../src/wolfcrypt/src/aes.c **** 
10307:../src/wolfcrypt/src/aes.c ****             AesCcmCtrInc4(B, lenSz);
10308:../src/wolfcrypt/src/aes.c ****         }
10309:../src/wolfcrypt/src/aes.c ****         RESTORE_VECTOR_REGISTERS();
10310:../src/wolfcrypt/src/aes.c ****     }
10311:../src/wolfcrypt/src/aes.c **** #endif
10312:../src/wolfcrypt/src/aes.c ****     while (inSz >= AES_BLOCK_SIZE) {
10313:../src/wolfcrypt/src/aes.c ****         ret = wc_AesEncrypt(aes, B, A);
10314:../src/wolfcrypt/src/aes.c ****         if (ret != 0) {
10315:../src/wolfcrypt/src/aes.c ****             ForceZero(A, sizeof(A));
10316:../src/wolfcrypt/src/aes.c ****             ForceZero(B, sizeof(B));
10317:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
10318:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(A, sizeof(A));
10319:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(B, sizeof(B));
10320:../src/wolfcrypt/src/aes.c ****         #endif
10321:../src/wolfcrypt/src/aes.c ****             return ret;
10322:../src/wolfcrypt/src/aes.c ****         }
10323:../src/wolfcrypt/src/aes.c ****         xorbuf(A, in, AES_BLOCK_SIZE);
10324:../src/wolfcrypt/src/aes.c ****         XMEMCPY(out, A, AES_BLOCK_SIZE);
10325:../src/wolfcrypt/src/aes.c **** 
10326:../src/wolfcrypt/src/aes.c ****         AesCcmCtrInc(B, lenSz);
10327:../src/wolfcrypt/src/aes.c ****         inSz -= AES_BLOCK_SIZE;
10328:../src/wolfcrypt/src/aes.c ****         in += AES_BLOCK_SIZE;
10329:../src/wolfcrypt/src/aes.c ****         out += AES_BLOCK_SIZE;
10330:../src/wolfcrypt/src/aes.c ****     }
10331:../src/wolfcrypt/src/aes.c ****     if (inSz > 0) {
10332:../src/wolfcrypt/src/aes.c ****         ret = wc_AesEncrypt(aes, B, A);
10333:../src/wolfcrypt/src/aes.c ****         if (ret != 0) {
10334:../src/wolfcrypt/src/aes.c ****             ForceZero(A, sizeof(A));
10335:../src/wolfcrypt/src/aes.c ****             ForceZero(B, sizeof(B));
10336:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
10337:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(A, sizeof(A));
10338:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(B, sizeof(B));
10339:../src/wolfcrypt/src/aes.c ****         #endif
10340:../src/wolfcrypt/src/aes.c ****             return ret;
10341:../src/wolfcrypt/src/aes.c ****         }
10342:../src/wolfcrypt/src/aes.c ****         xorbuf(A, in, inSz);
10343:../src/wolfcrypt/src/aes.c ****         XMEMCPY(out, A, inSz);
10344:../src/wolfcrypt/src/aes.c ****     }
10345:../src/wolfcrypt/src/aes.c **** 
10346:../src/wolfcrypt/src/aes.c ****     ForceZero(A, sizeof(A));
10347:../src/wolfcrypt/src/aes.c ****     ForceZero(B, sizeof(B));
10348:../src/wolfcrypt/src/aes.c **** 
10349:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
10350:../src/wolfcrypt/src/aes.c ****     wc_MemZero_Check(A, sizeof(A));
10351:../src/wolfcrypt/src/aes.c ****     wc_MemZero_Check(B, sizeof(B));
10352:../src/wolfcrypt/src/aes.c **** #endif
10353:../src/wolfcrypt/src/aes.c **** 
10354:../src/wolfcrypt/src/aes.c ****     return 0;
10355:../src/wolfcrypt/src/aes.c **** }
10356:../src/wolfcrypt/src/aes.c **** 
10357:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AES_DECRYPT
10358:../src/wolfcrypt/src/aes.c **** /* Software AES - CCM Decrypt */
10359:../src/wolfcrypt/src/aes.c **** int  wc_AesCcmDecrypt(Aes* aes, byte* out, const byte* in, word32 inSz,
10360:../src/wolfcrypt/src/aes.c ****                    const byte* nonce, word32 nonceSz,
10361:../src/wolfcrypt/src/aes.c ****                    const byte* authTag, word32 authTagSz,
10362:../src/wolfcrypt/src/aes.c ****                    const byte* authIn, word32 authInSz)
10363:../src/wolfcrypt/src/aes.c **** {
10364:../src/wolfcrypt/src/aes.c **** #ifndef WOLFSSL_AESNI
10365:../src/wolfcrypt/src/aes.c ****     byte A[AES_BLOCK_SIZE];
10366:../src/wolfcrypt/src/aes.c ****     byte B[AES_BLOCK_SIZE];
10367:../src/wolfcrypt/src/aes.c **** #else
10368:../src/wolfcrypt/src/aes.c ****     ALIGN128 byte B[AES_BLOCK_SIZE * 4];
10369:../src/wolfcrypt/src/aes.c ****     ALIGN128 byte A[AES_BLOCK_SIZE * 4];
10370:../src/wolfcrypt/src/aes.c **** #endif
10371:../src/wolfcrypt/src/aes.c ****     byte* o;
10372:../src/wolfcrypt/src/aes.c ****     byte lenSz;
10373:../src/wolfcrypt/src/aes.c ****     word32 i, oSz;
10374:../src/wolfcrypt/src/aes.c ****     byte mask = 0xFF;
10375:../src/wolfcrypt/src/aes.c ****     const word32 wordSz = (word32)sizeof(word32);
10376:../src/wolfcrypt/src/aes.c ****     int ret;
10377:../src/wolfcrypt/src/aes.c **** 
10378:../src/wolfcrypt/src/aes.c ****     /* sanity check on arguments */
10379:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || (inSz != 0 && (in == NULL || out == NULL)) ||
10380:../src/wolfcrypt/src/aes.c ****         nonce == NULL || authTag == NULL || nonceSz < 7 || nonceSz > 13 ||
10381:../src/wolfcrypt/src/aes.c ****         authTagSz > AES_BLOCK_SIZE)
10382:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
10383:../src/wolfcrypt/src/aes.c **** 
10384:../src/wolfcrypt/src/aes.c ****     /* sanity check on tag size */
10385:../src/wolfcrypt/src/aes.c ****     if (wc_AesCcmCheckTagSize(authTagSz) != 0) {
10386:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
10387:../src/wolfcrypt/src/aes.c ****     }
10388:../src/wolfcrypt/src/aes.c **** 
10389:../src/wolfcrypt/src/aes.c **** #ifdef WOLF_CRYPTO_CB
10390:../src/wolfcrypt/src/aes.c ****     if (aes->devId != INVALID_DEVID) {
10391:../src/wolfcrypt/src/aes.c ****         int crypto_cb_ret =
10392:../src/wolfcrypt/src/aes.c ****             wc_CryptoCb_AesCcmDecrypt(aes, out, in, inSz, nonce, nonceSz,
10393:../src/wolfcrypt/src/aes.c ****             authTag, authTagSz, authIn, authInSz);
10394:../src/wolfcrypt/src/aes.c ****         if (crypto_cb_ret != CRYPTOCB_UNAVAILABLE)
10395:../src/wolfcrypt/src/aes.c ****             return crypto_cb_ret;
10396:../src/wolfcrypt/src/aes.c ****         /* fall-through when unavailable */
10397:../src/wolfcrypt/src/aes.c ****     }
10398:../src/wolfcrypt/src/aes.c **** #endif
10399:../src/wolfcrypt/src/aes.c **** 
10400:../src/wolfcrypt/src/aes.c ****     o = out;
10401:../src/wolfcrypt/src/aes.c ****     oSz = inSz;
10402:../src/wolfcrypt/src/aes.c ****     XMEMSET(A, 0, sizeof A);
10403:../src/wolfcrypt/src/aes.c ****     XMEMCPY(B+1, nonce, nonceSz);
10404:../src/wolfcrypt/src/aes.c ****     lenSz = AES_BLOCK_SIZE - 1 - (byte)nonceSz;
10405:../src/wolfcrypt/src/aes.c **** 
10406:../src/wolfcrypt/src/aes.c ****     B[0] = lenSz - 1;
10407:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < lenSz; i++)
10408:../src/wolfcrypt/src/aes.c ****         B[AES_BLOCK_SIZE - 1 - i] = 0;
10409:../src/wolfcrypt/src/aes.c ****     B[15] = 1;
10410:../src/wolfcrypt/src/aes.c **** 
10411:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
10412:../src/wolfcrypt/src/aes.c ****     wc_MemZero_Add("wc_AesCcmEncrypt A", A, sizeof(A));
10413:../src/wolfcrypt/src/aes.c ****     wc_MemZero_Add("wc_AesCcmEncrypt B", B, sizeof(B));
10414:../src/wolfcrypt/src/aes.c **** #endif
10415:../src/wolfcrypt/src/aes.c **** 
10416:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESNI
10417:../src/wolfcrypt/src/aes.c ****     if (haveAESNI && aes->use_aesni) {
10418:../src/wolfcrypt/src/aes.c ****         SAVE_VECTOR_REGISTERS(return _svr_ret;);
10419:../src/wolfcrypt/src/aes.c ****         while (oSz >= AES_BLOCK_SIZE * 4) {
10420:../src/wolfcrypt/src/aes.c ****             AesCcmCtrIncSet4(B, lenSz);
10421:../src/wolfcrypt/src/aes.c **** 
10422:../src/wolfcrypt/src/aes.c ****             AES_ECB_encrypt(B, A, AES_BLOCK_SIZE * 4, (byte*)aes->key,
10423:../src/wolfcrypt/src/aes.c ****                             aes->rounds);
10424:../src/wolfcrypt/src/aes.c **** 
10425:../src/wolfcrypt/src/aes.c ****             xorbuf(A, in, AES_BLOCK_SIZE * 4);
10426:../src/wolfcrypt/src/aes.c ****             XMEMCPY(o, A, AES_BLOCK_SIZE * 4);
10427:../src/wolfcrypt/src/aes.c **** 
10428:../src/wolfcrypt/src/aes.c ****             oSz -= AES_BLOCK_SIZE * 4;
10429:../src/wolfcrypt/src/aes.c ****             in += AES_BLOCK_SIZE * 4;
10430:../src/wolfcrypt/src/aes.c ****             o += AES_BLOCK_SIZE * 4;
10431:../src/wolfcrypt/src/aes.c **** 
10432:../src/wolfcrypt/src/aes.c ****             AesCcmCtrInc4(B, lenSz);
10433:../src/wolfcrypt/src/aes.c ****         }
10434:../src/wolfcrypt/src/aes.c ****         RESTORE_VECTOR_REGISTERS();
10435:../src/wolfcrypt/src/aes.c ****     }
10436:../src/wolfcrypt/src/aes.c **** #endif
10437:../src/wolfcrypt/src/aes.c ****     while (oSz >= AES_BLOCK_SIZE) {
10438:../src/wolfcrypt/src/aes.c ****         ret = wc_AesEncrypt(aes, B, A);
10439:../src/wolfcrypt/src/aes.c ****         if (ret != 0) {
10440:../src/wolfcrypt/src/aes.c ****             ForceZero(A, sizeof(A));
10441:../src/wolfcrypt/src/aes.c ****             ForceZero(B, sizeof(B));
10442:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
10443:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(A, sizeof(A));
10444:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(B, sizeof(B));
10445:../src/wolfcrypt/src/aes.c ****         #endif
10446:../src/wolfcrypt/src/aes.c ****             return ret;
10447:../src/wolfcrypt/src/aes.c ****         }
10448:../src/wolfcrypt/src/aes.c ****         xorbuf(A, in, AES_BLOCK_SIZE);
10449:../src/wolfcrypt/src/aes.c ****         XMEMCPY(o, A, AES_BLOCK_SIZE);
10450:../src/wolfcrypt/src/aes.c **** 
10451:../src/wolfcrypt/src/aes.c ****         AesCcmCtrInc(B, lenSz);
10452:../src/wolfcrypt/src/aes.c ****         oSz -= AES_BLOCK_SIZE;
10453:../src/wolfcrypt/src/aes.c ****         in += AES_BLOCK_SIZE;
10454:../src/wolfcrypt/src/aes.c ****         o += AES_BLOCK_SIZE;
10455:../src/wolfcrypt/src/aes.c ****     }
10456:../src/wolfcrypt/src/aes.c ****     if (inSz > 0) {
10457:../src/wolfcrypt/src/aes.c ****         ret = wc_AesEncrypt(aes, B, A);
10458:../src/wolfcrypt/src/aes.c ****         if (ret != 0) {
10459:../src/wolfcrypt/src/aes.c ****             ForceZero(A, sizeof(A));
10460:../src/wolfcrypt/src/aes.c ****             ForceZero(B, sizeof(B));
10461:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
10462:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(A, sizeof(A));
10463:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(B, sizeof(B));
10464:../src/wolfcrypt/src/aes.c ****         #endif
10465:../src/wolfcrypt/src/aes.c ****             return ret;
10466:../src/wolfcrypt/src/aes.c ****         }
10467:../src/wolfcrypt/src/aes.c ****         xorbuf(A, in, oSz);
10468:../src/wolfcrypt/src/aes.c ****         XMEMCPY(o, A, oSz);
10469:../src/wolfcrypt/src/aes.c ****     }
10470:../src/wolfcrypt/src/aes.c **** 
10471:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < lenSz; i++)
10472:../src/wolfcrypt/src/aes.c ****         B[AES_BLOCK_SIZE - 1 - i] = 0;
10473:../src/wolfcrypt/src/aes.c ****     ret = wc_AesEncrypt(aes, B, A);
10474:../src/wolfcrypt/src/aes.c ****     if (ret != 0) {
10475:../src/wolfcrypt/src/aes.c ****         ForceZero(A, sizeof(A));
10476:../src/wolfcrypt/src/aes.c ****         ForceZero(B, sizeof(B));
10477:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_CHECK_MEM_ZERO
10478:../src/wolfcrypt/src/aes.c ****         wc_MemZero_Check(A, sizeof(A));
10479:../src/wolfcrypt/src/aes.c ****         wc_MemZero_Check(B, sizeof(B));
10480:../src/wolfcrypt/src/aes.c ****     #endif
10481:../src/wolfcrypt/src/aes.c ****         return ret;
10482:../src/wolfcrypt/src/aes.c ****     }
10483:../src/wolfcrypt/src/aes.c **** 
10484:../src/wolfcrypt/src/aes.c ****     o = out;
10485:../src/wolfcrypt/src/aes.c ****     oSz = inSz;
10486:../src/wolfcrypt/src/aes.c **** 
10487:../src/wolfcrypt/src/aes.c ****     B[0] = (authInSz > 0 ? 64 : 0)
10488:../src/wolfcrypt/src/aes.c ****          + (8 * (((byte)authTagSz - 2) / 2))
10489:../src/wolfcrypt/src/aes.c ****          + (lenSz - 1);
10490:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < lenSz; i++) {
10491:../src/wolfcrypt/src/aes.c ****         if (mask && i >= wordSz)
10492:../src/wolfcrypt/src/aes.c ****             mask = 0x00;
10493:../src/wolfcrypt/src/aes.c ****         B[AES_BLOCK_SIZE - 1 - i] = (inSz >> ((8 * i) & mask)) & mask;
10494:../src/wolfcrypt/src/aes.c ****     }
10495:../src/wolfcrypt/src/aes.c **** 
10496:../src/wolfcrypt/src/aes.c ****     ret = wc_AesEncrypt(aes, B, A);
10497:../src/wolfcrypt/src/aes.c ****     if (ret != 0) {
10498:../src/wolfcrypt/src/aes.c ****         ForceZero(A, sizeof(A));
10499:../src/wolfcrypt/src/aes.c ****         ForceZero(B, sizeof(B));
10500:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_CHECK_MEM_ZERO
10501:../src/wolfcrypt/src/aes.c ****         wc_MemZero_Check(A, sizeof(A));
10502:../src/wolfcrypt/src/aes.c ****         wc_MemZero_Check(B, sizeof(B));
10503:../src/wolfcrypt/src/aes.c ****     #endif
10504:../src/wolfcrypt/src/aes.c ****         return ret;
10505:../src/wolfcrypt/src/aes.c ****     }
10506:../src/wolfcrypt/src/aes.c **** 
10507:../src/wolfcrypt/src/aes.c ****     if (authInSz > 0) {
10508:../src/wolfcrypt/src/aes.c ****         ret = roll_auth(aes, authIn, authInSz, A);
10509:../src/wolfcrypt/src/aes.c ****         if (ret != 0) {
10510:../src/wolfcrypt/src/aes.c ****             ForceZero(A, sizeof(A));
10511:../src/wolfcrypt/src/aes.c ****             ForceZero(B, sizeof(B));
10512:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
10513:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(A, sizeof(A));
10514:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(B, sizeof(B));
10515:../src/wolfcrypt/src/aes.c ****         #endif
10516:../src/wolfcrypt/src/aes.c ****             return ret;
10517:../src/wolfcrypt/src/aes.c ****         }
10518:../src/wolfcrypt/src/aes.c ****     }
10519:../src/wolfcrypt/src/aes.c ****     if (inSz > 0) {
10520:../src/wolfcrypt/src/aes.c ****         ret = roll_x(aes, o, oSz, A);
10521:../src/wolfcrypt/src/aes.c ****         if (ret != 0) {
10522:../src/wolfcrypt/src/aes.c ****             ForceZero(A, sizeof(A));
10523:../src/wolfcrypt/src/aes.c ****             ForceZero(B, sizeof(B));
10524:../src/wolfcrypt/src/aes.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
10525:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(A, sizeof(A));
10526:../src/wolfcrypt/src/aes.c ****             wc_MemZero_Check(B, sizeof(B));
10527:../src/wolfcrypt/src/aes.c ****         #endif
10528:../src/wolfcrypt/src/aes.c ****             return ret;
10529:../src/wolfcrypt/src/aes.c ****         }
10530:../src/wolfcrypt/src/aes.c ****     }
10531:../src/wolfcrypt/src/aes.c **** 
10532:../src/wolfcrypt/src/aes.c ****     B[0] = lenSz - 1;
10533:../src/wolfcrypt/src/aes.c ****     for (i = 0; i < lenSz; i++)
10534:../src/wolfcrypt/src/aes.c ****         B[AES_BLOCK_SIZE - 1 - i] = 0;
10535:../src/wolfcrypt/src/aes.c ****     ret = wc_AesEncrypt(aes, B, B);
10536:../src/wolfcrypt/src/aes.c ****     if (ret != 0) {
10537:../src/wolfcrypt/src/aes.c ****         ForceZero(A, sizeof(A));
10538:../src/wolfcrypt/src/aes.c ****         ForceZero(B, sizeof(B));
10539:../src/wolfcrypt/src/aes.c ****     #ifdef WOLFSSL_CHECK_MEM_ZERO
10540:../src/wolfcrypt/src/aes.c ****         wc_MemZero_Check(A, sizeof(A));
10541:../src/wolfcrypt/src/aes.c ****         wc_MemZero_Check(B, sizeof(B));
10542:../src/wolfcrypt/src/aes.c ****     #endif
10543:../src/wolfcrypt/src/aes.c ****         return ret;
10544:../src/wolfcrypt/src/aes.c ****     }
10545:../src/wolfcrypt/src/aes.c ****     xorbuf(A, B, authTagSz);
10546:../src/wolfcrypt/src/aes.c **** 
10547:../src/wolfcrypt/src/aes.c ****     if (ConstantCompare(A, authTag, authTagSz) != 0) {
10548:../src/wolfcrypt/src/aes.c ****         /* If the authTag check fails, don't keep the decrypted data.
10549:../src/wolfcrypt/src/aes.c ****          * Unfortunately, you need the decrypted data to calculate the
10550:../src/wolfcrypt/src/aes.c ****          * check value. */
10551:../src/wolfcrypt/src/aes.c ****         #if defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2) && \
10552:../src/wolfcrypt/src/aes.c ****             defined(ACVP_VECTOR_TESTING)
10553:../src/wolfcrypt/src/aes.c ****             WOLFSSL_MSG("Preserve output for vector responses");
10554:../src/wolfcrypt/src/aes.c ****         #else
10555:../src/wolfcrypt/src/aes.c ****             if (inSz > 0)
10556:../src/wolfcrypt/src/aes.c ****                 XMEMSET(out, 0, inSz);
10557:../src/wolfcrypt/src/aes.c ****         #endif
10558:../src/wolfcrypt/src/aes.c ****         ret = AES_CCM_AUTH_E;
10559:../src/wolfcrypt/src/aes.c ****     }
10560:../src/wolfcrypt/src/aes.c **** 
10561:../src/wolfcrypt/src/aes.c ****     ForceZero(A, sizeof(A));
10562:../src/wolfcrypt/src/aes.c ****     ForceZero(B, sizeof(B));
10563:../src/wolfcrypt/src/aes.c ****     o = NULL;
10564:../src/wolfcrypt/src/aes.c **** 
10565:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
10566:../src/wolfcrypt/src/aes.c ****     wc_MemZero_Check(A, sizeof(A));
10567:../src/wolfcrypt/src/aes.c ****     wc_MemZero_Check(B, sizeof(B));
10568:../src/wolfcrypt/src/aes.c **** #endif
10569:../src/wolfcrypt/src/aes.c **** 
10570:../src/wolfcrypt/src/aes.c ****     return ret;
10571:../src/wolfcrypt/src/aes.c **** }
10572:../src/wolfcrypt/src/aes.c **** 
10573:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AES_DECRYPT */
10574:../src/wolfcrypt/src/aes.c **** #endif /* software CCM */
10575:../src/wolfcrypt/src/aes.c **** 
10576:../src/wolfcrypt/src/aes.c **** /* abstract functions that call lower level AESCCM functions */
10577:../src/wolfcrypt/src/aes.c **** #ifndef WC_NO_RNG
10578:../src/wolfcrypt/src/aes.c **** 
10579:../src/wolfcrypt/src/aes.c **** int wc_AesCcmSetNonce(Aes* aes, const byte* nonce, word32 nonceSz)
10580:../src/wolfcrypt/src/aes.c **** {
10581:../src/wolfcrypt/src/aes.c ****     int ret = 0;
10582:../src/wolfcrypt/src/aes.c **** 
10583:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || nonce == NULL ||
10584:../src/wolfcrypt/src/aes.c ****         nonceSz < CCM_NONCE_MIN_SZ || nonceSz > CCM_NONCE_MAX_SZ) {
10585:../src/wolfcrypt/src/aes.c **** 
10586:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
10587:../src/wolfcrypt/src/aes.c ****     }
10588:../src/wolfcrypt/src/aes.c **** 
10589:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
10590:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->reg, nonce, nonceSz);
10591:../src/wolfcrypt/src/aes.c ****         aes->nonceSz = nonceSz;
10592:../src/wolfcrypt/src/aes.c **** 
10593:../src/wolfcrypt/src/aes.c ****         /* Invocation counter should be 2^61 */
10594:../src/wolfcrypt/src/aes.c ****         aes->invokeCtr[0] = 0;
10595:../src/wolfcrypt/src/aes.c ****         aes->invokeCtr[1] = 0xE0000000;
10596:../src/wolfcrypt/src/aes.c ****     }
10597:../src/wolfcrypt/src/aes.c **** 
10598:../src/wolfcrypt/src/aes.c ****     return ret;
10599:../src/wolfcrypt/src/aes.c **** }
10600:../src/wolfcrypt/src/aes.c **** 
10601:../src/wolfcrypt/src/aes.c **** 
10602:../src/wolfcrypt/src/aes.c **** int wc_AesCcmEncrypt_ex(Aes* aes, byte* out, const byte* in, word32 sz,
10603:../src/wolfcrypt/src/aes.c ****                         byte* ivOut, word32 ivOutSz,
10604:../src/wolfcrypt/src/aes.c ****                         byte* authTag, word32 authTagSz,
10605:../src/wolfcrypt/src/aes.c ****                         const byte* authIn, word32 authInSz)
10606:../src/wolfcrypt/src/aes.c **** {
10607:../src/wolfcrypt/src/aes.c ****     int ret = 0;
10608:../src/wolfcrypt/src/aes.c **** 
10609:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || out == NULL ||
10610:../src/wolfcrypt/src/aes.c ****         (in == NULL && sz != 0) ||
10611:../src/wolfcrypt/src/aes.c ****         ivOut == NULL ||
10612:../src/wolfcrypt/src/aes.c ****         (authIn == NULL && authInSz != 0) ||
10613:../src/wolfcrypt/src/aes.c ****         (ivOutSz != aes->nonceSz)) {
10614:../src/wolfcrypt/src/aes.c **** 
10615:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
10616:../src/wolfcrypt/src/aes.c ****     }
10617:../src/wolfcrypt/src/aes.c **** 
10618:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
10619:../src/wolfcrypt/src/aes.c ****         aes->invokeCtr[0]++;
10620:../src/wolfcrypt/src/aes.c ****         if (aes->invokeCtr[0] == 0) {
10621:../src/wolfcrypt/src/aes.c ****             aes->invokeCtr[1]++;
10622:../src/wolfcrypt/src/aes.c ****             if (aes->invokeCtr[1] == 0)
10623:../src/wolfcrypt/src/aes.c ****                 ret = AES_CCM_OVERFLOW_E;
10624:../src/wolfcrypt/src/aes.c ****         }
10625:../src/wolfcrypt/src/aes.c ****     }
10626:../src/wolfcrypt/src/aes.c **** 
10627:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
10628:../src/wolfcrypt/src/aes.c ****         ret = wc_AesCcmEncrypt(aes, out, in, sz,
10629:../src/wolfcrypt/src/aes.c ****                                (byte*)aes->reg, aes->nonceSz,
10630:../src/wolfcrypt/src/aes.c ****                                authTag, authTagSz,
10631:../src/wolfcrypt/src/aes.c ****                                authIn, authInSz);
10632:../src/wolfcrypt/src/aes.c ****         if (ret == 0) {
10633:../src/wolfcrypt/src/aes.c ****             XMEMCPY(ivOut, aes->reg, aes->nonceSz);
10634:../src/wolfcrypt/src/aes.c ****             IncCtr((byte*)aes->reg, aes->nonceSz);
10635:../src/wolfcrypt/src/aes.c ****         }
10636:../src/wolfcrypt/src/aes.c ****     }
10637:../src/wolfcrypt/src/aes.c **** 
10638:../src/wolfcrypt/src/aes.c ****     return ret;
10639:../src/wolfcrypt/src/aes.c **** }
10640:../src/wolfcrypt/src/aes.c **** 
10641:../src/wolfcrypt/src/aes.c **** #endif /* WC_NO_RNG */
10642:../src/wolfcrypt/src/aes.c **** 
10643:../src/wolfcrypt/src/aes.c **** #endif /* HAVE_AESCCM */
10644:../src/wolfcrypt/src/aes.c **** 
10645:../src/wolfcrypt/src/aes.c **** 
10646:../src/wolfcrypt/src/aes.c **** /* Initialize Aes for use with async hardware */
10647:../src/wolfcrypt/src/aes.c **** int wc_AesInit(Aes* aes, void* heap, int devId)
10648:../src/wolfcrypt/src/aes.c **** {
 10834                             		.loc 2 10648 1
 10835 0000 7E AA                   		push.l	r10
 10836                             	.LCFI94:
 10837 0002 71 0A F0                		add	#-16, r0, r10
 10838                             	.LCFI95:
 10839 0005 EF A0                   		mov.L	r10, r0
 10840 0007 E7 A1 01                		mov.L	r1, 4[r10]
 10841 000a E7 A2 02                		mov.L	r2, 8[r10]
 10842 000d E7 A3 03                		mov.L	r3, 12[r10]
10649:../src/wolfcrypt/src/aes.c ****     int ret = 0;
 10843                             		.loc 2 10649 9
 10844 0010 F8 A6 00                		mov.L	#0, [r10]
10650:../src/wolfcrypt/src/aes.c **** 
10651:../src/wolfcrypt/src/aes.c ****     if (aes == NULL)
 10845                             		.loc 2 10651 8
 10846 0013 ED A5 01                		mov.L	4[r10], r5
 10847 0016 61 05                   		cmp	#0, r5
 10848 0018 1F                      		bne	.L244
10652:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
 10849                             		.loc 2 10652 16
 10850 0019 FB 5A 53 FF             		mov.L	#-173, r5
 10851 001d 2E 0D                   		bra	.L245
 10852                             	.L244:
10653:../src/wolfcrypt/src/aes.c **** 
10654:../src/wolfcrypt/src/aes.c ****     aes->heap = heap;
 10853                             		.loc 2 10654 15
 10854 001f ED A5 01                		mov.L	4[r10], r5
 10855 0022 ED A4 02                		mov.L	8[r10], r4
 10856 0025 E7 54 4D                		mov.L	r4, 308[r5]
10655:../src/wolfcrypt/src/aes.c **** 
10656:../src/wolfcrypt/src/aes.c **** #ifdef WOLF_CRYPTO_CB
10657:../src/wolfcrypt/src/aes.c ****     aes->devId = devId;
10658:../src/wolfcrypt/src/aes.c ****     aes->devCtx = NULL;
10659:../src/wolfcrypt/src/aes.c **** #else
10660:../src/wolfcrypt/src/aes.c ****     (void)devId;
10661:../src/wolfcrypt/src/aes.c **** #endif
10662:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_AES)
10663:../src/wolfcrypt/src/aes.c ****     ret = wolfAsync_DevCtxInit(&aes->asyncDev, WOLFSSL_ASYNC_MARKER_AES,
10664:../src/wolfcrypt/src/aes.c ****                                                         aes->heap, devId);
10665:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
10666:../src/wolfcrypt/src/aes.c **** 
10667:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AFALG
10668:../src/wolfcrypt/src/aes.c ****     aes->alFd = -1;
10669:../src/wolfcrypt/src/aes.c ****     aes->rdFd = -1;
10670:../src/wolfcrypt/src/aes.c **** #endif
10671:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_KCAPI_AES
10672:../src/wolfcrypt/src/aes.c ****     aes->handle = NULL;
10673:../src/wolfcrypt/src/aes.c ****     aes->init   = 0;
10674:../src/wolfcrypt/src/aes.c **** #endif
10675:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_DEVCRYPTO) && \
10676:../src/wolfcrypt/src/aes.c ****    (defined(WOLFSSL_DEVCRYPTO_AES) || defined(WOLFSSL_DEVCRYPTO_CBC))
10677:../src/wolfcrypt/src/aes.c ****     aes->ctx.cfd = -1;
10678:../src/wolfcrypt/src/aes.c **** #endif
10679:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_CRYPTOCELL) && defined(WOLFSSL_CRYPTOCELL_AES)
10680:../src/wolfcrypt/src/aes.c ****     XMEMSET(&aes->ctx, 0, sizeof(aes->ctx));
10681:../src/wolfcrypt/src/aes.c **** #endif
10682:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_IMXRT_DCP)
10683:../src/wolfcrypt/src/aes.c ****     DCPAesInit(aes);
10684:../src/wolfcrypt/src/aes.c **** #endif
10685:../src/wolfcrypt/src/aes.c **** 
10686:../src/wolfcrypt/src/aes.c **** 
10687:../src/wolfcrypt/src/aes.c **** #ifdef HAVE_AESGCM
10688:../src/wolfcrypt/src/aes.c **** #ifdef OPENSSL_EXTRA
10689:../src/wolfcrypt/src/aes.c ****     XMEMSET(aes->aadH, 0, sizeof(aes->aadH));
10690:../src/wolfcrypt/src/aes.c ****     aes->aadLen = 0;
10691:../src/wolfcrypt/src/aes.c **** #endif
10692:../src/wolfcrypt/src/aes.c **** #endif
10693:../src/wolfcrypt/src/aes.c **** 
10694:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AESGCM_STREAM
10695:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_SMALL_STACK) && !defined(WOLFSSL_AESNI)
10696:../src/wolfcrypt/src/aes.c ****     aes->streamData = NULL;
10697:../src/wolfcrypt/src/aes.c **** #endif
10698:../src/wolfcrypt/src/aes.c ****     aes->keylen = 0;
10699:../src/wolfcrypt/src/aes.c ****     aes->nonceSz = 0;
10700:../src/wolfcrypt/src/aes.c ****     aes->gcmKeySet = 0;
10701:../src/wolfcrypt/src/aes.c ****     aes->nonceSet = 0;
10702:../src/wolfcrypt/src/aes.c ****     aes->ctrSet = 0;
10703:../src/wolfcrypt/src/aes.c **** #endif
10704:../src/wolfcrypt/src/aes.c **** 
10705:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_HAVE_PSA) && !defined(WOLFSSL_PSA_NO_AES)
10706:../src/wolfcrypt/src/aes.c ****     ret = wc_psa_aes_init(aes);
10707:../src/wolfcrypt/src/aes.c **** #endif
10708:../src/wolfcrypt/src/aes.c **** 
10709:../src/wolfcrypt/src/aes.c ****     return ret;
 10857                             		.loc 2 10709 12
 10858 0028 EC A5                   		mov.L	[r10], r5
 10859                             	.L245:
10710:../src/wolfcrypt/src/aes.c **** }
 10860                             		.loc 2 10710 1
 10861 002a EF 51                   		mov.L	r5, r1
 10862 002c 3F AA 05                		rtsd	#20, r10-r10
 10863                             	.LFE70:
 10865                             		.section	.text.wc_AesFree,"ax",@progbits
 10866                             		.global	_wc_AesFree
 10868                             	_wc_AesFree:
 10869                             	.LFB71:
10711:../src/wolfcrypt/src/aes.c **** 
10712:../src/wolfcrypt/src/aes.c **** #ifdef WOLF_PRIVATE_KEY_ID
10713:../src/wolfcrypt/src/aes.c **** int  wc_AesInit_Id(Aes* aes, unsigned char* id, int len, void* heap, int devId)
10714:../src/wolfcrypt/src/aes.c **** {
10715:../src/wolfcrypt/src/aes.c ****     int ret = 0;
10716:../src/wolfcrypt/src/aes.c **** 
10717:../src/wolfcrypt/src/aes.c ****     if (aes == NULL)
10718:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
10719:../src/wolfcrypt/src/aes.c ****     if (ret == 0 && (len < 0 || len > AES_MAX_ID_LEN))
10720:../src/wolfcrypt/src/aes.c ****         ret = BUFFER_E;
10721:../src/wolfcrypt/src/aes.c **** 
10722:../src/wolfcrypt/src/aes.c ****     if (ret == 0)
10723:../src/wolfcrypt/src/aes.c ****         ret = wc_AesInit(aes, heap, devId);
10724:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
10725:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->id, id, len);
10726:../src/wolfcrypt/src/aes.c ****         aes->idLen = len;
10727:../src/wolfcrypt/src/aes.c ****         aes->labelLen = 0;
10728:../src/wolfcrypt/src/aes.c ****     }
10729:../src/wolfcrypt/src/aes.c **** 
10730:../src/wolfcrypt/src/aes.c ****     return ret;
10731:../src/wolfcrypt/src/aes.c **** }
10732:../src/wolfcrypt/src/aes.c **** 
10733:../src/wolfcrypt/src/aes.c **** int wc_AesInit_Label(Aes* aes, const char* label, void* heap, int devId)
10734:../src/wolfcrypt/src/aes.c **** {
10735:../src/wolfcrypt/src/aes.c ****     int ret = 0;
10736:../src/wolfcrypt/src/aes.c ****     int labelLen = 0;
10737:../src/wolfcrypt/src/aes.c **** 
10738:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || label == NULL)
10739:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
10740:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
10741:../src/wolfcrypt/src/aes.c ****         labelLen = (int)XSTRLEN(label);
10742:../src/wolfcrypt/src/aes.c ****         if (labelLen == 0 || labelLen > AES_MAX_LABEL_LEN)
10743:../src/wolfcrypt/src/aes.c ****             ret = BUFFER_E;
10744:../src/wolfcrypt/src/aes.c ****     }
10745:../src/wolfcrypt/src/aes.c **** 
10746:../src/wolfcrypt/src/aes.c ****     if (ret == 0)
10747:../src/wolfcrypt/src/aes.c ****         ret = wc_AesInit(aes, heap, devId);
10748:../src/wolfcrypt/src/aes.c ****     if (ret == 0) {
10749:../src/wolfcrypt/src/aes.c ****         XMEMCPY(aes->label, label, labelLen);
10750:../src/wolfcrypt/src/aes.c ****         aes->labelLen = labelLen;
10751:../src/wolfcrypt/src/aes.c ****         aes->idLen = 0;
10752:../src/wolfcrypt/src/aes.c ****     }
10753:../src/wolfcrypt/src/aes.c **** 
10754:../src/wolfcrypt/src/aes.c ****     return ret;
10755:../src/wolfcrypt/src/aes.c **** }
10756:../src/wolfcrypt/src/aes.c **** #endif
10757:../src/wolfcrypt/src/aes.c **** 
10758:../src/wolfcrypt/src/aes.c **** /* Free Aes from use with async hardware */
10759:../src/wolfcrypt/src/aes.c **** void wc_AesFree(Aes* aes)
10760:../src/wolfcrypt/src/aes.c **** {
 10870                             		.loc 2 10760 1
 10871 0000 7E AA                   		push.l	r10
 10872                             	.LCFI96:
 10873 0002 71 0A FC                		add	#-4, r0, r10
 10874                             	.LCFI97:
 10875 0005 EF A0                   		mov.L	r10, r0
 10876 0007 E3 A1                   		mov.L	r1, [r10]
10761:../src/wolfcrypt/src/aes.c ****     if (aes == NULL)
10762:../src/wolfcrypt/src/aes.c ****         return;
10763:../src/wolfcrypt/src/aes.c **** 
10764:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_AES)
10765:../src/wolfcrypt/src/aes.c ****     wolfAsync_DevCtxFree(&aes->asyncDev, WOLFSSL_ASYNC_MARKER_AES);
10766:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
10767:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_AFALG) || defined(WOLFSSL_AFALG_XILINX_AES)
10768:../src/wolfcrypt/src/aes.c ****     if (aes->rdFd > 0) { /* negative is error case */
10769:../src/wolfcrypt/src/aes.c ****         close(aes->rdFd);
10770:../src/wolfcrypt/src/aes.c ****     }
10771:../src/wolfcrypt/src/aes.c ****     if (aes->alFd > 0) {
10772:../src/wolfcrypt/src/aes.c ****         close(aes->alFd);
10773:../src/wolfcrypt/src/aes.c ****     }
10774:../src/wolfcrypt/src/aes.c **** #endif /* WOLFSSL_AFALG */
10775:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_KCAPI_AES
10776:../src/wolfcrypt/src/aes.c ****     ForceZero((byte*)aes->devKey, AES_MAX_KEY_SIZE/WOLFSSL_BIT_SIZE);
10777:../src/wolfcrypt/src/aes.c ****     if (aes->init == 1) {
10778:../src/wolfcrypt/src/aes.c ****         kcapi_cipher_destroy(aes->handle);
10779:../src/wolfcrypt/src/aes.c ****     }
10780:../src/wolfcrypt/src/aes.c ****     aes->init = 0;
10781:../src/wolfcrypt/src/aes.c ****     aes->handle = NULL;
10782:../src/wolfcrypt/src/aes.c **** #endif
10783:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_DEVCRYPTO) && \
10784:../src/wolfcrypt/src/aes.c ****     (defined(WOLFSSL_DEVCRYPTO_AES) || defined(WOLFSSL_DEVCRYPTO_CBC))
10785:../src/wolfcrypt/src/aes.c ****     wc_DevCryptoFree(&aes->ctx);
10786:../src/wolfcrypt/src/aes.c **** #endif
10787:../src/wolfcrypt/src/aes.c **** #if defined(WOLF_CRYPTO_CB) || (defined(WOLFSSL_DEVCRYPTO) && \
10788:../src/wolfcrypt/src/aes.c ****     (defined(WOLFSSL_DEVCRYPTO_AES) || defined(WOLFSSL_DEVCRYPTO_CBC))) || \
10789:../src/wolfcrypt/src/aes.c ****     (defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_AES))
10790:../src/wolfcrypt/src/aes.c ****     ForceZero((byte*)aes->devKey, AES_MAX_KEY_SIZE/WOLFSSL_BIT_SIZE);
10791:../src/wolfcrypt/src/aes.c **** #endif
10792:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_IMXRT_DCP)
10793:../src/wolfcrypt/src/aes.c ****     DCPAesFree(aes);
10794:../src/wolfcrypt/src/aes.c **** #endif
10795:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_AESGCM_STREAM) && defined(WOLFSSL_SMALL_STACK) && \
10796:../src/wolfcrypt/src/aes.c ****     !defined(WOLFSSL_AESNI)
10797:../src/wolfcrypt/src/aes.c ****     if (aes->streamData != NULL) {
10798:../src/wolfcrypt/src/aes.c ****         XFREE(aes->streamData, aes->heap, DYNAMIC_TYPE_AES);
10799:../src/wolfcrypt/src/aes.c ****         aes->streamData = NULL;
10800:../src/wolfcrypt/src/aes.c ****     }
10801:../src/wolfcrypt/src/aes.c **** #endif
10802:../src/wolfcrypt/src/aes.c **** 
10803:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_CRYPT)
10804:../src/wolfcrypt/src/aes.c ****     se050_aes_free(aes);
10805:../src/wolfcrypt/src/aes.c **** #endif
10806:../src/wolfcrypt/src/aes.c **** 
10807:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_HAVE_PSA) && !defined(WOLFSSL_PSA_NO_AES)
10808:../src/wolfcrypt/src/aes.c ****     wc_psa_aes_free(aes);
10809:../src/wolfcrypt/src/aes.c **** #endif
10810:../src/wolfcrypt/src/aes.c **** 
10811:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
10812:../src/wolfcrypt/src/aes.c ****     wc_MemZero_Check(aes, sizeof(Aes));
10813:../src/wolfcrypt/src/aes.c **** #endif
10814:../src/wolfcrypt/src/aes.c **** }
 10877                             		.loc 2 10814 1
 10878 0009 3F AA 02                		rtsd	#8, r10-r10
 10879                             	.LFE71:
 10881                             		.section	.text.wc_AesGetKeySize,"ax",@progbits
 10882                             		.global	_wc_AesGetKeySize
 10884                             	_wc_AesGetKeySize:
 10885                             	.LFB72:
10815:../src/wolfcrypt/src/aes.c **** 
10816:../src/wolfcrypt/src/aes.c **** 
10817:../src/wolfcrypt/src/aes.c **** int wc_AesGetKeySize(Aes* aes, word32* keySize)
10818:../src/wolfcrypt/src/aes.c **** {
 10886                             		.loc 2 10818 1
 10887 0000 7E AA                   		push.l	r10
 10888                             	.LCFI98:
 10889 0002 71 0A F4                		add	#-12, r0, r10
 10890                             	.LCFI99:
 10891 0005 EF A0                   		mov.L	r10, r0
 10892 0007 E7 A1 01                		mov.L	r1, 4[r10]
 10893 000a E7 A2 02                		mov.L	r2, 8[r10]
10819:../src/wolfcrypt/src/aes.c ****     int ret = 0;
 10894                             		.loc 2 10819 9
 10895 000d F8 A6 00                		mov.L	#0, [r10]
10820:../src/wolfcrypt/src/aes.c **** 
10821:../src/wolfcrypt/src/aes.c ****     if (aes == NULL || keySize == NULL) {
 10896                             		.loc 2 10821 8
 10897 0010 ED A5 01                		mov.L	4[r10], r5
 10898 0013 61 05                   		cmp	#0, r5
 10899 0015 17                      		beq	.L249
 10900                             		.loc 2 10821 21 discriminator 1
 10901 0016 ED A5 02                		mov.L	8[r10], r5
 10902 0019 61 05                   		cmp	#0, r5
 10903 001b 1F                      		bne	.L250
 10904                             	.L249:
10822:../src/wolfcrypt/src/aes.c ****         return BAD_FUNC_ARG;
 10905                             		.loc 2 10822 16
 10906 001c FB 5A 53 FF             		mov.L	#-173, r5
 10907 0020 2E 38                   		bra	.L251
 10908                             	.L250:
10823:../src/wolfcrypt/src/aes.c ****     }
10824:../src/wolfcrypt/src/aes.c **** 
10825:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_HAVE_PSA) && !defined(WOLFSSL_PSA_NO_AES)
10826:../src/wolfcrypt/src/aes.c ****     return wc_psa_aes_get_key_size(aes, keySize);
10827:../src/wolfcrypt/src/aes.c **** #endif
10828:../src/wolfcrypt/src/aes.c **** #if defined(WOLFSSL_CRYPTOCELL) && defined(WOLFSSL_CRYPTOCELL_AES)
10829:../src/wolfcrypt/src/aes.c ****     *keySize = aes->ctx.key.keySize;
10830:../src/wolfcrypt/src/aes.c ****     return ret;
10831:../src/wolfcrypt/src/aes.c **** #endif
10832:../src/wolfcrypt/src/aes.c ****     switch (aes->rounds) {
 10909                             		.loc 2 10832 16
 10910 0022 ED A5 01                		mov.L	4[r10], r5
 10911 0025 ED 55 3C                		mov.L	240[r5], r5
 10912                             		.loc 2 10832 5
 10913 0028 61 C5                   		cmp	#12, r5
 10914 002a 20 12                   		beq	.L252
 10915 002c 61 E5                   		cmp	#14, r5
 10916 002e 20 16                   		beq	.L253
 10917 0030 61 A5                   		cmp	#10, r5
 10918 0032 21 1A                   		bne	.L254
10833:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_128
10834:../src/wolfcrypt/src/aes.c ****     case 10:
10835:../src/wolfcrypt/src/aes.c ****         *keySize = 16;
 10919                             		.loc 2 10835 18
 10920 0034 ED A5 02                		mov.L	8[r10], r5
 10921 0037 F8 56 10                		mov.L	#16, [r5]
10836:../src/wolfcrypt/src/aes.c ****         break;
 10922                             		.loc 2 10836 9
 10923 003a 2E 1C                   		bra	.L255
 10924                             	.L252:
10837:../src/wolfcrypt/src/aes.c **** #endif
10838:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_192
10839:../src/wolfcrypt/src/aes.c ****     case 12:
10840:../src/wolfcrypt/src/aes.c ****         *keySize = 24;
 10925                             		.loc 2 10840 18
 10926 003c ED A5 02                		mov.L	8[r10], r5
 10927 003f F8 56 18                		mov.L	#24, [r5]
10841:../src/wolfcrypt/src/aes.c ****         break;
 10928                             		.loc 2 10841 9
 10929 0042 2E 14                   		bra	.L255
 10930                             	.L253:
10842:../src/wolfcrypt/src/aes.c **** #endif
10843:../src/wolfcrypt/src/aes.c **** #ifdef WOLFSSL_AES_256
10844:../src/wolfcrypt/src/aes.c ****     case 14:
10845:../src/wolfcrypt/src/aes.c ****         *keySize = 32;
 10931                             		.loc 2 10845 18
 10932 0044 ED A5 02                		mov.L	8[r10], r5
 10933 0047 F8 56 20                		mov.L	#32, [r5]
10846:../src/wolfcrypt/src/aes.c ****         break;
 10934                             		.loc 2 10846 9
 10935 004a 2E 0C                   		bra	.L255
 10936                             	.L254:
10847:../src/wolfcrypt/src/aes.c **** #endif
10848:../src/wolfcrypt/src/aes.c ****     default:
10849:../src/wolfcrypt/src/aes.c ****         *keySize = 0;
 10937                             		.loc 2 10849 18
 10938 004c ED A5 02                		mov.L	8[r10], r5
 10939 004f F8 56 00                		mov.L	#0, [r5]
10850:../src/wolfcrypt/src/aes.c ****         ret = BAD_FUNC_ARG;
 10940                             		.loc 2 10850 13
 10941 0052 F8 AA 53 FF             		mov.L	#-173, [r10]
 10942                             		.balign 8,3,1
 10943                             	.L255:
10851:../src/wolfcrypt/src/aes.c ****     }
10852:../src/wolfcrypt/src/aes.c **** 
10853:../src/wolfcrypt/src/aes.c ****     return ret;
 10944                             		.loc 2 10853 12
 10945 0056 EC A5                   		mov.L	[r10], r5
 10946                             	.L251:
10854:../src/wolfcrypt/src/aes.c **** }
 10947                             		.loc 2 10854 1
 10948 0058 EF 51                   		mov.L	r5, r1
 10949 005a 3F AA 04                		rtsd	#16, r10-r10
 10950                             	.LFE72:
 11903                             	.Letext0:
 11904                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 11905                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 11906                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 11907                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 11908                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 11909                             		.file 8 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 11910                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 11911                             		.file 10 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\incl
 11912                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
 11913                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha256.h"
 11914                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/random.h"
 11915                             		.file 14 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/aes.h"
