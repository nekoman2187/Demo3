   1                             		.file	"wc_port.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.bss.initRefCount,"aw",@nobits
   5                             		.balign 4
   8                             	_initRefCount:
   9 0000 00 00 00 00             		.zero	4
  10                             		.section C,"a",@progbits
  11                             		.p2align 2
  12                             	.LC0:
  13 0000 77 6F 6C 66 43 72 79 70 		.string	"wolfCrypt_Init"
  13      74 5F 49 6E 69 74 00 
  14                             		.section	.text.wolfCrypt_Init,"ax",@progbits
  15                             		.global	_wolfCrypt_Init
  17                             	_wolfCrypt_Init:
  18                             	.LFB1:
  19                             		.file 1 "../src/wolfcrypt/src/wc_port.c"
   1:../src/wolfcrypt/src/wc_port.c **** /* port.c
   2:../src/wolfcrypt/src/wc_port.c ****  *
   3:../src/wolfcrypt/src/wc_port.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/wc_port.c ****  *
   5:../src/wolfcrypt/src/wc_port.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/wc_port.c ****  *
   7:../src/wolfcrypt/src/wc_port.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/wc_port.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/wc_port.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/wc_port.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/wc_port.c ****  *
  12:../src/wolfcrypt/src/wc_port.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/wc_port.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/wc_port.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/wc_port.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/wc_port.c ****  *
  17:../src/wolfcrypt/src/wc_port.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/wc_port.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/wc_port.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/wc_port.c ****  */
  21:../src/wolfcrypt/src/wc_port.c **** 
  22:../src/wolfcrypt/src/wc_port.c **** 
  23:../src/wolfcrypt/src/wc_port.c **** #ifdef HAVE_CONFIG_H
  24:../src/wolfcrypt/src/wc_port.c ****     #include <config.h>
  25:../src/wolfcrypt/src/wc_port.c **** #endif
  26:../src/wolfcrypt/src/wc_port.c **** 
  27:../src/wolfcrypt/src/wc_port.c **** #include <wolfssl/wolfcrypt/settings.h>
  28:../src/wolfcrypt/src/wc_port.c **** #include <wolfssl/wolfcrypt/types.h>
  29:../src/wolfcrypt/src/wc_port.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  30:../src/wolfcrypt/src/wc_port.c **** #include <wolfssl/wolfcrypt/logging.h>
  31:../src/wolfcrypt/src/wc_port.c **** #include <wolfssl/wolfcrypt/wc_port.h>
  32:../src/wolfcrypt/src/wc_port.c **** #ifdef HAVE_ECC
  33:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/ecc.h>
  34:../src/wolfcrypt/src/wc_port.c **** #endif
  35:../src/wolfcrypt/src/wc_port.c **** #ifdef WOLFSSL_ASYNC_CRYPT
  36:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/async.h>
  37:../src/wolfcrypt/src/wc_port.c **** #endif
  38:../src/wolfcrypt/src/wc_port.c **** 
  39:../src/wolfcrypt/src/wc_port.c **** /* IPP header files for library initialization */
  40:../src/wolfcrypt/src/wc_port.c **** #ifdef HAVE_FAST_RSA
  41:../src/wolfcrypt/src/wc_port.c ****     #include <ipp.h>
  42:../src/wolfcrypt/src/wc_port.c ****     #include <ippcp.h>
  43:../src/wolfcrypt/src/wc_port.c **** #endif
  44:../src/wolfcrypt/src/wc_port.c **** 
  45:../src/wolfcrypt/src/wc_port.c **** #ifdef FREESCALE_LTC_TFM
  46:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/port/nxp/ksdk_port.h>
  47:../src/wolfcrypt/src/wc_port.c **** #endif
  48:../src/wolfcrypt/src/wc_port.c **** 
  49:../src/wolfcrypt/src/wc_port.c **** #ifdef WOLFSSL_PSOC6_CRYPTO
  50:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/port/cypress/psoc6_crypto.h>
  51:../src/wolfcrypt/src/wc_port.c **** #endif
  52:../src/wolfcrypt/src/wc_port.c **** 
  53:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_ATMEL) || defined(WOLFSSL_ATECC508A) || \
  54:../src/wolfcrypt/src/wc_port.c ****     defined(WOLFSSL_ATECC608A)
  55:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/port/atmel/atmel.h>
  56:../src/wolfcrypt/src/wc_port.c **** #endif
  57:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_RENESAS_TSIP)
  58:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/port/Renesas/renesas-tsip-crypt.h>
  59:../src/wolfcrypt/src/wc_port.c **** #endif
  60:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_RENESAS_SCE)
  61:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/port/Renesas/renesas-sce-crypt.h>
  62:../src/wolfcrypt/src/wc_port.c **** #endif
  63:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_STSAFEA100)
  64:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/port/st/stsafe.h>
  65:../src/wolfcrypt/src/wc_port.c **** #endif
  66:../src/wolfcrypt/src/wc_port.c **** 
  67:../src/wolfcrypt/src/wc_port.c **** #if (defined(OPENSSL_EXTRA) || defined(HAVE_WEBSERVER)) \
  68:../src/wolfcrypt/src/wc_port.c ****     && !defined(WOLFCRYPT_ONLY)
  69:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/openssl/evp.h>
  70:../src/wolfcrypt/src/wc_port.c **** #endif
  71:../src/wolfcrypt/src/wc_port.c **** 
  72:../src/wolfcrypt/src/wc_port.c **** #if defined(USE_WOLFSSL_MEMORY) && defined(WOLFSSL_TRACK_MEMORY)
  73:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/memory.h>
  74:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/mem_track.h>
  75:../src/wolfcrypt/src/wc_port.c **** #endif
  76:../src/wolfcrypt/src/wc_port.c **** 
  77:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_IMX6_CAAM) || defined(WOLFSSL_IMX6_CAAM_RNG) || \
  78:../src/wolfcrypt/src/wc_port.c ****     defined(WOLFSSL_IMX6UL_CAAM) || defined(WOLFSSL_IMX6_CAAM_BLOB) || \
  79:../src/wolfcrypt/src/wc_port.c ****     defined(WOLFSSL_SECO_CAAM)
  80:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/port/caam/wolfcaam.h>
  81:../src/wolfcrypt/src/wc_port.c **** #endif
  82:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_DEVCRYPTO)
  83:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/port/devcrypto/wc_devcrypto.h>
  84:../src/wolfcrypt/src/wc_port.c **** #endif
  85:../src/wolfcrypt/src/wc_port.c **** #ifdef WOLFSSL_IMXRT_DCP
  86:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/port/nxp/dcp_port.h>
  87:../src/wolfcrypt/src/wc_port.c **** #endif
  88:../src/wolfcrypt/src/wc_port.c **** 
  89:../src/wolfcrypt/src/wc_port.c **** #ifdef WOLF_CRYPTO_CB
  90:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/cryptocb.h>
  91:../src/wolfcrypt/src/wc_port.c **** #endif
  92:../src/wolfcrypt/src/wc_port.c **** 
  93:../src/wolfcrypt/src/wc_port.c **** #ifdef HAVE_INTEL_QA_SYNC
  94:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/port/intel/quickassist_sync.h>
  95:../src/wolfcrypt/src/wc_port.c **** #endif
  96:../src/wolfcrypt/src/wc_port.c **** 
  97:../src/wolfcrypt/src/wc_port.c **** #ifdef HAVE_CAVIUM_OCTEON_SYNC
  98:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/port/cavium/cavium_octeon_sync.h>
  99:../src/wolfcrypt/src/wc_port.c **** #endif
 100:../src/wolfcrypt/src/wc_port.c **** 
 101:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_INIT)
 102:../src/wolfcrypt/src/wc_port.c **** #include <wolfssl/wolfcrypt/port/nxp/se050_port.h>
 103:../src/wolfcrypt/src/wc_port.c **** #endif
 104:../src/wolfcrypt/src/wc_port.c **** 
 105:../src/wolfcrypt/src/wc_port.c **** #ifdef WOLFSSL_SCE
 106:../src/wolfcrypt/src/wc_port.c ****     #include "hal_data.h"
 107:../src/wolfcrypt/src/wc_port.c **** #endif
 108:../src/wolfcrypt/src/wc_port.c **** 
 109:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_DSP) && !defined(WOLFSSL_DSP_BUILD)
 110:../src/wolfcrypt/src/wc_port.c ****     #include "rpcmem.h"
 111:../src/wolfcrypt/src/wc_port.c **** #endif
 112:../src/wolfcrypt/src/wc_port.c **** 
 113:../src/wolfcrypt/src/wc_port.c **** #ifdef _MSC_VER
 114:../src/wolfcrypt/src/wc_port.c ****     /* 4996 warning to use MS extensions e.g., strcpy_s instead of strncpy */
 115:../src/wolfcrypt/src/wc_port.c ****     #pragma warning(disable: 4996)
 116:../src/wolfcrypt/src/wc_port.c **** #endif
 117:../src/wolfcrypt/src/wc_port.c **** 
 118:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_HAVE_PSA)
 119:../src/wolfcrypt/src/wc_port.c ****     #include <wolfssl/wolfcrypt/port/psa/psa.h>
 120:../src/wolfcrypt/src/wc_port.c **** #endif
 121:../src/wolfcrypt/src/wc_port.c **** 
 122:../src/wolfcrypt/src/wc_port.c **** 
 123:../src/wolfcrypt/src/wc_port.c **** /* prevent multiple mutex initializations */
 124:../src/wolfcrypt/src/wc_port.c **** static volatile int initRefCount = 0;
 125:../src/wolfcrypt/src/wc_port.c **** 
 126:../src/wolfcrypt/src/wc_port.c **** /* Used to initialize state for wolfcrypt
 127:../src/wolfcrypt/src/wc_port.c ****    return 0 on success
 128:../src/wolfcrypt/src/wc_port.c ****  */
 129:../src/wolfcrypt/src/wc_port.c **** int wolfCrypt_Init(void)
 130:../src/wolfcrypt/src/wc_port.c **** {
  20                             		.loc 1 130 1
  21 0000 7E AA                   		push.l	r10
  22                             	.LCFI0:
  23 0002 71 0A FC                		add	#-4, r0, r10
  24                             	.LCFI1:
  25 0005 EF A0                   		mov.L	r10, r0
 131:../src/wolfcrypt/src/wc_port.c ****     int ret = 0;
  26                             		.loc 1 131 9
  27 0007 F8 A6 00                		mov.L	#0, [r10]
 132:../src/wolfcrypt/src/wc_port.c ****     if (initRefCount == 0) {
  28                             		.loc 1 132 22
  29 000a FB 52 00 00 00 00       		mov.L	#_initRefCount, r5
  30 0010 EC 55                   		mov.L	[r5], r5
  31                             		.loc 1 132 8
  32 0012 61 05                   		cmp	#0, r5
  33 0014 21 0C                   		bne	.L2
 133:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_ENTER("wolfCrypt_Init");
  34                             		.loc 1 133 9
  35 0016 FB 12 00 00 00 00       		mov.L	#.LC0, r1
  36 001c 05 00 00 00             		bsr	_WOLFSSL_ENTER
  37                             	.L2:
 134:../src/wolfcrypt/src/wc_port.c **** 
 135:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_CHECK_MEM_ZERO
 136:../src/wolfcrypt/src/wc_port.c ****         /* Initialize the mutex for access to the list of memory locations that
 137:../src/wolfcrypt/src/wc_port.c ****          * must be freed. */
 138:../src/wolfcrypt/src/wc_port.c ****         wc_MemZero_Init();
 139:../src/wolfcrypt/src/wc_port.c ****     #endif
 140:../src/wolfcrypt/src/wc_port.c **** 
 141:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_FORCE_MALLOC_FAIL_TEST
 142:../src/wolfcrypt/src/wc_port.c ****         {
 143:../src/wolfcrypt/src/wc_port.c ****             word32 rngMallocFail;
 144:../src/wolfcrypt/src/wc_port.c ****             time_t seed = time(NULL);
 145:../src/wolfcrypt/src/wc_port.c ****             srand((word32)seed);
 146:../src/wolfcrypt/src/wc_port.c ****             rngMallocFail = rand() % 2000; /* max 2000 */
 147:../src/wolfcrypt/src/wc_port.c ****             fprintf(stderr, "\n--- RNG MALLOC FAIL AT %u ---\n", rngMallocFail);
 148:../src/wolfcrypt/src/wc_port.c ****             wolfSSL_SetMemFailCount(rngMallocFail);
 149:../src/wolfcrypt/src/wc_port.c ****         }
 150:../src/wolfcrypt/src/wc_port.c ****     #endif
 151:../src/wolfcrypt/src/wc_port.c **** 
 152:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLF_CRYPTO_CB
 153:../src/wolfcrypt/src/wc_port.c ****         wc_CryptoCb_Init();
 154:../src/wolfcrypt/src/wc_port.c ****     #endif
 155:../src/wolfcrypt/src/wc_port.c **** 
 156:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_ASYNC_CRYPT
 157:../src/wolfcrypt/src/wc_port.c ****         ret = wolfAsync_HardwareStart();
 158:../src/wolfcrypt/src/wc_port.c ****         if (ret != 0) {
 159:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("Async hardware start failed");
 160:../src/wolfcrypt/src/wc_port.c ****             /* don't return failure, allow operation to continue */
 161:../src/wolfcrypt/src/wc_port.c ****         }
 162:../src/wolfcrypt/src/wc_port.c ****     #endif
 163:../src/wolfcrypt/src/wc_port.c **** 
 164:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_RENESAS_TSIP_CRYPT)
 165:../src/wolfcrypt/src/wc_port.c ****         ret = tsip_Open( );
 166:../src/wolfcrypt/src/wc_port.c ****         if( ret != TSIP_SUCCESS ) {
 167:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("RENESAS TSIP Open failed");
 168:../src/wolfcrypt/src/wc_port.c ****             /* not return 1 since WOLFSSL_SUCCESS=1*/
 169:../src/wolfcrypt/src/wc_port.c ****             ret = -1;/* FATAL ERROR */
 170:../src/wolfcrypt/src/wc_port.c ****             return ret;
 171:../src/wolfcrypt/src/wc_port.c ****         }
 172:../src/wolfcrypt/src/wc_port.c ****     #endif
 173:../src/wolfcrypt/src/wc_port.c **** 
 174:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_RENESAS_SCEPROTECT)
 175:../src/wolfcrypt/src/wc_port.c ****         ret = wc_sce_Open( );
 176:../src/wolfcrypt/src/wc_port.c ****         if( ret != FSP_SUCCESS ) {
 177:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("RENESAS SCE Open failed");
 178:../src/wolfcrypt/src/wc_port.c ****             /* not return 1 since WOLFSSL_SUCCESS=1*/
 179:../src/wolfcrypt/src/wc_port.c ****             ret = -1;/* FATAL ERROR */
 180:../src/wolfcrypt/src/wc_port.c ****             return ret;
 181:../src/wolfcrypt/src/wc_port.c ****         }
 182:../src/wolfcrypt/src/wc_port.c ****     #endif
 183:../src/wolfcrypt/src/wc_port.c **** 
 184:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_TRACK_MEMORY) && !defined(WOLFSSL_STATIC_MEMORY)
 185:../src/wolfcrypt/src/wc_port.c ****         ret = InitMemoryTracker();
 186:../src/wolfcrypt/src/wc_port.c ****         if (ret != 0) {
 187:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("InitMemoryTracker failed");
 188:../src/wolfcrypt/src/wc_port.c ****             return ret;
 189:../src/wolfcrypt/src/wc_port.c ****         }
 190:../src/wolfcrypt/src/wc_port.c ****     #endif
 191:../src/wolfcrypt/src/wc_port.c **** 
 192:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_LINUXKM_SIMD_X86)
 193:../src/wolfcrypt/src/wc_port.c ****         ret = allocate_wolfcrypt_linuxkm_fpu_states();
 194:../src/wolfcrypt/src/wc_port.c ****         if (ret != 0) {
 195:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("allocate_wolfcrypt_linuxkm_fpu_states failed");
 196:../src/wolfcrypt/src/wc_port.c ****             return ret;
 197:../src/wolfcrypt/src/wc_port.c ****         }
 198:../src/wolfcrypt/src/wc_port.c ****     #endif
 199:../src/wolfcrypt/src/wc_port.c **** 
 200:../src/wolfcrypt/src/wc_port.c ****     #if WOLFSSL_CRYPT_HW_MUTEX
 201:../src/wolfcrypt/src/wc_port.c ****         /* If crypto hardware mutex protection is enabled, then initialize it */
 202:../src/wolfcrypt/src/wc_port.c ****         ret = wolfSSL_CryptHwMutexInit();
 203:../src/wolfcrypt/src/wc_port.c ****         if (ret != 0) {
 204:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("Hw crypt mutex init failed");
 205:../src/wolfcrypt/src/wc_port.c ****             return ret;
 206:../src/wolfcrypt/src/wc_port.c ****         }
 207:../src/wolfcrypt/src/wc_port.c ****     #endif
 208:../src/wolfcrypt/src/wc_port.c **** 
 209:../src/wolfcrypt/src/wc_port.c ****     /* if defined have fast RSA then initialize Intel IPP */
 210:../src/wolfcrypt/src/wc_port.c ****     #ifdef HAVE_FAST_RSA
 211:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("Attempting to use optimized IPP Library");
 212:../src/wolfcrypt/src/wc_port.c ****         if ((ret = ippInit()) != ippStsNoErr) {
 213:../src/wolfcrypt/src/wc_port.c ****             /* possible to get a CPU feature support status on optimized IPP
 214:../src/wolfcrypt/src/wc_port.c ****               library but still use default library and see competitive speeds */
 215:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("Warning when trying to set up optimization");
 216:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG(ippGetStatusString(ret));
 217:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("Using default fast IPP library");
 218:../src/wolfcrypt/src/wc_port.c ****             ret = 0;
 219:../src/wolfcrypt/src/wc_port.c ****             (void)ret; /* suppress not read warning */
 220:../src/wolfcrypt/src/wc_port.c ****         }
 221:../src/wolfcrypt/src/wc_port.c ****     #endif
 222:../src/wolfcrypt/src/wc_port.c **** 
 223:../src/wolfcrypt/src/wc_port.c ****     #if defined(FREESCALE_LTC_TFM) || defined(FREESCALE_LTC_ECC)
 224:../src/wolfcrypt/src/wc_port.c ****         ret = ksdk_port_init();
 225:../src/wolfcrypt/src/wc_port.c ****         if (ret != 0) {
 226:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("KSDK port init failed");
 227:../src/wolfcrypt/src/wc_port.c ****             return ret;
 228:../src/wolfcrypt/src/wc_port.c ****         }
 229:../src/wolfcrypt/src/wc_port.c ****     #endif
 230:../src/wolfcrypt/src/wc_port.c **** 
 231:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_ATMEL) || defined(WOLFSSL_ATECC508A) || \
 232:../src/wolfcrypt/src/wc_port.c ****         defined(WOLFSSL_ATECC608A)
 233:../src/wolfcrypt/src/wc_port.c ****         ret = atmel_init();
 234:../src/wolfcrypt/src/wc_port.c ****         if (ret != 0) {
 235:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("CryptoAuthLib init failed");
 236:../src/wolfcrypt/src/wc_port.c ****             return ret;
 237:../src/wolfcrypt/src/wc_port.c ****         }
 238:../src/wolfcrypt/src/wc_port.c ****     #endif
 239:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_CRYPTOCELL)
 240:../src/wolfcrypt/src/wc_port.c ****         /* enable and initialize the ARM CryptoCell 3xx runtime library */
 241:../src/wolfcrypt/src/wc_port.c ****         ret = cc310_Init();
 242:../src/wolfcrypt/src/wc_port.c ****         if (ret != 0) {
 243:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("CRYPTOCELL init failed");
 244:../src/wolfcrypt/src/wc_port.c ****             return ret;
 245:../src/wolfcrypt/src/wc_port.c ****         }
 246:../src/wolfcrypt/src/wc_port.c ****     #endif
 247:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_STSAFEA100)
 248:../src/wolfcrypt/src/wc_port.c ****         stsafe_interface_init();
 249:../src/wolfcrypt/src/wc_port.c ****     #endif
 250:../src/wolfcrypt/src/wc_port.c **** 
 251:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_PSOC6_CRYPTO)
 252:../src/wolfcrypt/src/wc_port.c ****         ret = psoc6_crypto_port_init();
 253:../src/wolfcrypt/src/wc_port.c ****         if (ret != 0) {
 254:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("PSoC6 crypto engine init failed");
 255:../src/wolfcrypt/src/wc_port.c ****             return ret;
 256:../src/wolfcrypt/src/wc_port.c ****         }
 257:../src/wolfcrypt/src/wc_port.c ****     #endif
 258:../src/wolfcrypt/src/wc_port.c **** 
 259:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_SILABS_SE_ACCEL
 260:../src/wolfcrypt/src/wc_port.c ****         /* init handles if it is already initialized */
 261:../src/wolfcrypt/src/wc_port.c ****         ret = sl_se_init();
 262:../src/wolfcrypt/src/wc_port.c ****     #endif
 263:../src/wolfcrypt/src/wc_port.c **** 
 264:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_SE050) && defined(WOLFSSL_SE050_INIT)
 265:../src/wolfcrypt/src/wc_port.c ****         ret = wc_se050_init(NULL);
 266:../src/wolfcrypt/src/wc_port.c ****     #endif
 267:../src/wolfcrypt/src/wc_port.c **** 
 268:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_ARMASM
 269:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("Using ARM hardware acceleration");
 270:../src/wolfcrypt/src/wc_port.c ****     #endif
 271:../src/wolfcrypt/src/wc_port.c **** 
 272:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_AFALG
 273:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("Using AF_ALG for crypto acceleration");
 274:../src/wolfcrypt/src/wc_port.c ****     #endif
 275:../src/wolfcrypt/src/wc_port.c **** 
 276:../src/wolfcrypt/src/wc_port.c ****     #if !defined(WOLFCRYPT_ONLY) && defined(OPENSSL_EXTRA)
 277:../src/wolfcrypt/src/wc_port.c ****         wolfSSL_EVP_init();
 278:../src/wolfcrypt/src/wc_port.c ****     #endif
 279:../src/wolfcrypt/src/wc_port.c **** 
 280:../src/wolfcrypt/src/wc_port.c ****     #if defined(OPENSSL_EXTRA) || defined(DEBUG_WOLFSSL_VERBOSE)
 281:../src/wolfcrypt/src/wc_port.c ****         if ((ret = wc_LoggingInit()) != 0) {
 282:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("Error creating logging mutex");
 283:../src/wolfcrypt/src/wc_port.c ****             return ret;
 284:../src/wolfcrypt/src/wc_port.c ****         }
 285:../src/wolfcrypt/src/wc_port.c ****     #endif
 286:../src/wolfcrypt/src/wc_port.c **** 
 287:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_HAVE_PSA)
 288:../src/wolfcrypt/src/wc_port.c ****         if ((ret = wc_psa_init()) != 0)
 289:../src/wolfcrypt/src/wc_port.c ****             return ret;
 290:../src/wolfcrypt/src/wc_port.c ****     #endif
 291:../src/wolfcrypt/src/wc_port.c **** 
 292:../src/wolfcrypt/src/wc_port.c **** #ifdef HAVE_ECC
 293:../src/wolfcrypt/src/wc_port.c ****     #ifdef FP_ECC
 294:../src/wolfcrypt/src/wc_port.c ****         wc_ecc_fp_init();
 295:../src/wolfcrypt/src/wc_port.c ****     #endif
 296:../src/wolfcrypt/src/wc_port.c ****     #ifdef ECC_CACHE_CURVE
 297:../src/wolfcrypt/src/wc_port.c ****         if ((ret = wc_ecc_curve_cache_init()) != 0) {
 298:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("Error creating curve cache");
 299:../src/wolfcrypt/src/wc_port.c ****             return ret;
 300:../src/wolfcrypt/src/wc_port.c ****         }
 301:../src/wolfcrypt/src/wc_port.c ****     #endif
 302:../src/wolfcrypt/src/wc_port.c **** #endif
 303:../src/wolfcrypt/src/wc_port.c **** 
 304:../src/wolfcrypt/src/wc_port.c **** #ifdef WOLFSSL_SCE
 305:../src/wolfcrypt/src/wc_port.c ****         ret = (int)WOLFSSL_SCE_GSCE_HANDLE.p_api->open(
 306:../src/wolfcrypt/src/wc_port.c ****                 WOLFSSL_SCE_GSCE_HANDLE.p_ctrl, WOLFSSL_SCE_GSCE_HANDLE.p_cfg);
 307:../src/wolfcrypt/src/wc_port.c ****         if (ret == SSP_ERR_CRYPTO_SCE_ALREADY_OPEN) {
 308:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("SCE already open");
 309:../src/wolfcrypt/src/wc_port.c ****             ret = 0;
 310:../src/wolfcrypt/src/wc_port.c ****         }
 311:../src/wolfcrypt/src/wc_port.c ****         if (ret != SSP_SUCCESS) {
 312:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("Error opening SCE");
 313:../src/wolfcrypt/src/wc_port.c ****             return -1; /* FATAL_ERROR */
 314:../src/wolfcrypt/src/wc_port.c ****         }
 315:../src/wolfcrypt/src/wc_port.c **** #endif
 316:../src/wolfcrypt/src/wc_port.c **** 
 317:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_DEVCRYPTO)
 318:../src/wolfcrypt/src/wc_port.c ****         if ((ret = wc_DevCryptoInit()) != 0) {
 319:../src/wolfcrypt/src/wc_port.c ****             return ret;
 320:../src/wolfcrypt/src/wc_port.c ****         }
 321:../src/wolfcrypt/src/wc_port.c **** #endif
 322:../src/wolfcrypt/src/wc_port.c **** 
 323:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_IMX6_CAAM) || defined(WOLFSSL_IMX6_CAAM_RNG) || \
 324:../src/wolfcrypt/src/wc_port.c ****     defined(WOLFSSL_IMX6UL_CAAM) || defined(WOLFSSL_IMX6_CAAM_BLOB) || \
 325:../src/wolfcrypt/src/wc_port.c ****     defined(WOLFSSL_SECO_CAAM)
 326:../src/wolfcrypt/src/wc_port.c ****         if ((ret = wc_caamInit()) != 0) {
 327:../src/wolfcrypt/src/wc_port.c ****             return ret;
 328:../src/wolfcrypt/src/wc_port.c ****         }
 329:../src/wolfcrypt/src/wc_port.c **** #endif
 330:../src/wolfcrypt/src/wc_port.c **** 
 331:../src/wolfcrypt/src/wc_port.c **** #ifdef WOLFSSL_IMXRT_DCP
 332:../src/wolfcrypt/src/wc_port.c ****         if ((ret = wc_dcp_init()) != 0) {
 333:../src/wolfcrypt/src/wc_port.c ****             return ret;
 334:../src/wolfcrypt/src/wc_port.c ****         }
 335:../src/wolfcrypt/src/wc_port.c **** #endif
 336:../src/wolfcrypt/src/wc_port.c **** 
 337:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_DSP) && !defined(WOLFSSL_DSP_BUILD)
 338:../src/wolfcrypt/src/wc_port.c ****         if ((ret = wolfSSL_InitHandle()) != 0) {
 339:../src/wolfcrypt/src/wc_port.c ****             return ret;
 340:../src/wolfcrypt/src/wc_port.c ****         }
 341:../src/wolfcrypt/src/wc_port.c ****         rpcmem_init();
 342:../src/wolfcrypt/src/wc_port.c **** #endif
 343:../src/wolfcrypt/src/wc_port.c ****     }
 344:../src/wolfcrypt/src/wc_port.c ****     initRefCount++;
  38                             		.loc 1 344 17
  39 0020 FB 52 00 00 00 00       		mov.L	#_initRefCount, r5
  40 0026 EC 55                   		mov.L	[r5], r5
  41 0028 71 54 01                		add	#1, r5, r4
  42 002b FB 52 00 00 00 00       		mov.L	#_initRefCount, r5
  43 0031 E3 54                   		mov.L	r4, [r5]
 345:../src/wolfcrypt/src/wc_port.c **** 
 346:../src/wolfcrypt/src/wc_port.c ****     return ret;
  44                             		.loc 1 346 12
  45 0033 EC A5                   		mov.L	[r10], r5
 347:../src/wolfcrypt/src/wc_port.c **** }
  46                             		.loc 1 347 1
  47 0035 EF 51                   		mov.L	r5, r1
  48 0037 3F AA 02                		rtsd	#8, r10-r10
  49                             	.LFE1:
  51                             		.section C,"a",@progbits
  52 000f 00                      		.p2align 2
  53                             	.LC1:
  54 0010 77 6F 6C 66 43 72 79 70 		.string	"wolfCrypt_Cleanup"
  54      74 5F 43 6C 65 61 6E 75 
  54      70 00 
  55                             		.section	.text.wolfCrypt_Cleanup,"ax",@progbits
  56                             		.global	_wolfCrypt_Cleanup
  58                             	_wolfCrypt_Cleanup:
  59                             	.LFB2:
 348:../src/wolfcrypt/src/wc_port.c **** 
 349:../src/wolfcrypt/src/wc_port.c **** #ifdef WOLFSSL_TRACK_MEMORY_VERBOSE
 350:../src/wolfcrypt/src/wc_port.c **** long wolfCrypt_heap_peakAllocs_checkpoint(void) {
 351:../src/wolfcrypt/src/wc_port.c ****     long ret = ourMemStats.peakAllocsTripOdometer;
 352:../src/wolfcrypt/src/wc_port.c ****     ourMemStats.peakAllocsTripOdometer = ourMemStats.totalAllocs -
 353:../src/wolfcrypt/src/wc_port.c ****         ourMemStats.totalDeallocs;
 354:../src/wolfcrypt/src/wc_port.c ****     return ret;
 355:../src/wolfcrypt/src/wc_port.c **** }
 356:../src/wolfcrypt/src/wc_port.c **** long wolfCrypt_heap_peakBytes_checkpoint(void) {
 357:../src/wolfcrypt/src/wc_port.c ****     long ret = ourMemStats.peakBytesTripOdometer;
 358:../src/wolfcrypt/src/wc_port.c ****     ourMemStats.peakBytesTripOdometer = ourMemStats.currentBytes;
 359:../src/wolfcrypt/src/wc_port.c ****     return ret;
 360:../src/wolfcrypt/src/wc_port.c **** }
 361:../src/wolfcrypt/src/wc_port.c **** #endif
 362:../src/wolfcrypt/src/wc_port.c **** 
 363:../src/wolfcrypt/src/wc_port.c **** /* return success value is the same as wolfCrypt_Init */
 364:../src/wolfcrypt/src/wc_port.c **** int wolfCrypt_Cleanup(void)
 365:../src/wolfcrypt/src/wc_port.c **** {
  60                             		.loc 1 365 1
  61 0000 7E AA                   		push.l	r10
  62                             	.LCFI2:
  63 0002 71 0A FC                		add	#-4, r0, r10
  64                             	.LCFI3:
  65 0005 EF A0                   		mov.L	r10, r0
 366:../src/wolfcrypt/src/wc_port.c ****     int ret = 0;
  66                             		.loc 1 366 9
  67 0007 F8 A6 00                		mov.L	#0, [r10]
 367:../src/wolfcrypt/src/wc_port.c **** 
 368:../src/wolfcrypt/src/wc_port.c ****     initRefCount--;
  68                             		.loc 1 368 17
  69 000a FB 52 00 00 00 00       		mov.L	#_initRefCount, r5
  70 0010 EC 55                   		mov.L	[r5], r5
  71 0012 71 54 FF                		add	#-1, r5, r4
  72 0015 FB 52 00 00 00 00       		mov.L	#_initRefCount, r5
  73 001b E3 54                   		mov.L	r4, [r5]
 369:../src/wolfcrypt/src/wc_port.c ****     if (initRefCount < 0)
  74                             		.loc 1 369 22
  75 001d FB 52 00 00 00 00       		mov.L	#_initRefCount, r5
  76 0023 EC 55                   		mov.L	[r5], r5
  77                             		.loc 1 369 8
  78 0025 61 05                   		cmp	#0, r5
  79 0027 28 0B                   		bge	.L5
 370:../src/wolfcrypt/src/wc_port.c ****         initRefCount = 0;
  80                             		.loc 1 370 22
  81 0029 FB 52 00 00 00 00       		mov.L	#_initRefCount, r5
  82 002f F8 56 00                		mov.L	#0, [r5]
  83                             	.L5:
 371:../src/wolfcrypt/src/wc_port.c **** 
 372:../src/wolfcrypt/src/wc_port.c ****     if (initRefCount == 0) {
  84                             		.loc 1 372 22
  85 0032 FB 52 00 00 00 00       		mov.L	#_initRefCount, r5
  86 0038 EC 55                   		mov.L	[r5], r5
  87                             		.loc 1 372 8
  88 003a 61 05                   		cmp	#0, r5
  89 003c 21 0C                   		bne	.L6
 373:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_ENTER("wolfCrypt_Cleanup");
  90                             		.loc 1 373 9
  91 003e FB 12 10 00 00 00       		mov.L	#.LC1, r1
  92 0044 05 00 00 00             		bsr	_WOLFSSL_ENTER
  93                             	.L6:
 374:../src/wolfcrypt/src/wc_port.c **** 
 375:../src/wolfcrypt/src/wc_port.c **** #ifdef HAVE_ECC
 376:../src/wolfcrypt/src/wc_port.c ****     #ifdef FP_ECC
 377:../src/wolfcrypt/src/wc_port.c ****         wc_ecc_fp_free();
 378:../src/wolfcrypt/src/wc_port.c ****     #endif
 379:../src/wolfcrypt/src/wc_port.c ****     #ifdef ECC_CACHE_CURVE
 380:../src/wolfcrypt/src/wc_port.c ****         wc_ecc_curve_cache_free();
 381:../src/wolfcrypt/src/wc_port.c ****     #endif
 382:../src/wolfcrypt/src/wc_port.c **** #endif /* HAVE_ECC */
 383:../src/wolfcrypt/src/wc_port.c **** 
 384:../src/wolfcrypt/src/wc_port.c ****     #if defined(OPENSSL_EXTRA) || defined(DEBUG_WOLFSSL_VERBOSE)
 385:../src/wolfcrypt/src/wc_port.c ****         ret = wc_LoggingCleanup();
 386:../src/wolfcrypt/src/wc_port.c ****     #endif
 387:../src/wolfcrypt/src/wc_port.c **** 
 388:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_TRACK_MEMORY) && !defined(WOLFSSL_STATIC_MEMORY)
 389:../src/wolfcrypt/src/wc_port.c ****         ShowMemoryTracker();
 390:../src/wolfcrypt/src/wc_port.c ****     #endif
 391:../src/wolfcrypt/src/wc_port.c **** 
 392:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_ASYNC_CRYPT
 393:../src/wolfcrypt/src/wc_port.c ****         wolfAsync_HardwareStop();
 394:../src/wolfcrypt/src/wc_port.c ****     #endif
 395:../src/wolfcrypt/src/wc_port.c **** 
 396:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_RENESAS_TSIP
 397:../src/wolfcrypt/src/wc_port.c ****         tsip_Close();
 398:../src/wolfcrypt/src/wc_port.c ****     #endif
 399:../src/wolfcrypt/src/wc_port.c **** 
 400:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_RENESAS_SCEPROTECT
 401:../src/wolfcrypt/src/wc_port.c ****         wc_sce_Close();
 402:../src/wolfcrypt/src/wc_port.c ****     #endif
 403:../src/wolfcrypt/src/wc_port.c **** 
 404:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_SCE
 405:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_SCE_GSCE_HANDLE.p_api->close(WOLFSSL_SCE_GSCE_HANDLE.p_ctrl);
 406:../src/wolfcrypt/src/wc_port.c ****     #endif
 407:../src/wolfcrypt/src/wc_port.c **** 
 408:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_IMX6_CAAM) || defined(WOLFSSL_IMX6_CAAM_RNG) || \
 409:../src/wolfcrypt/src/wc_port.c ****         defined(WOLFSSL_IMX6_CAAM_BLOB)  || \
 410:../src/wolfcrypt/src/wc_port.c ****         defined(WOLFSSL_SECO_CAAM)
 411:../src/wolfcrypt/src/wc_port.c ****         wc_caamFree();
 412:../src/wolfcrypt/src/wc_port.c ****     #endif
 413:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_CRYPTOCELL)
 414:../src/wolfcrypt/src/wc_port.c ****         cc310_Free();
 415:../src/wolfcrypt/src/wc_port.c ****     #endif
 416:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_SILABS_SE_ACCEL
 417:../src/wolfcrypt/src/wc_port.c ****         ret = sl_se_deinit();
 418:../src/wolfcrypt/src/wc_port.c ****     #endif
 419:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_RENESAS_TSIP_CRYPT)
 420:../src/wolfcrypt/src/wc_port.c ****         tsip_Close();
 421:../src/wolfcrypt/src/wc_port.c ****     #endif
 422:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_DEVCRYPTO)
 423:../src/wolfcrypt/src/wc_port.c ****         wc_DevCryptoCleanup();
 424:../src/wolfcrypt/src/wc_port.c ****     #endif
 425:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_DSP) && !defined(WOLFSSL_DSP_BUILD)
 426:../src/wolfcrypt/src/wc_port.c ****         rpcmem_deinit();
 427:../src/wolfcrypt/src/wc_port.c ****         wolfSSL_CleanupHandle();
 428:../src/wolfcrypt/src/wc_port.c ****     #endif
 429:../src/wolfcrypt/src/wc_port.c ****     #if defined(WOLFSSL_LINUXKM_SIMD_X86)
 430:../src/wolfcrypt/src/wc_port.c ****         free_wolfcrypt_linuxkm_fpu_states();
 431:../src/wolfcrypt/src/wc_port.c ****     #endif
 432:../src/wolfcrypt/src/wc_port.c **** 
 433:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_CHECK_MEM_ZERO
 434:../src/wolfcrypt/src/wc_port.c ****         /* Free the mutex for access to the list of memory locations that
 435:../src/wolfcrypt/src/wc_port.c ****          * must be freed. */
 436:../src/wolfcrypt/src/wc_port.c ****         wc_MemZero_Free();
 437:../src/wolfcrypt/src/wc_port.c ****     #endif
 438:../src/wolfcrypt/src/wc_port.c ****     }
 439:../src/wolfcrypt/src/wc_port.c **** 
 440:../src/wolfcrypt/src/wc_port.c ****     return ret;
  94                             		.loc 1 440 12
  95 0048 EC A5                   		mov.L	[r10], r5
 441:../src/wolfcrypt/src/wc_port.c **** }
  96                             		.loc 1 441 1
  97 004a EF 51                   		mov.L	r5, r1
  98 004c 3F AA 02                		rtsd	#8, r10-r10
  99                             	.LFE2:
 101                             		.section C,"a",@progbits
 102 0022 00 00                   		.p2align 2
 103                             	.LC2:
 104 0024 49 6E 69 74 20 4D 75 74 		.string	"Init Mutex failed"
 104      65 78 20 66 61 69 6C 65 
 104      64 00 
 105                             	.LC3:
 106 0036 4D 65 6D 6F 72 79 20 65 		.string	"Memory error with Mutex allocation"
 106      72 72 6F 72 20 77 69 74 
 106      68 20 4D 75 74 65 78 20 
 106      61 6C 6C 6F 63 61 74 69 
 106      6F 6E 00 
 107 0059 00 00 00                		.section	.text.wc_InitAndAllocMutex,"ax",@progbits
 108                             		.global	_wc_InitAndAllocMutex
 110                             	_wc_InitAndAllocMutex:
 111                             	.LFB3:
 442:../src/wolfcrypt/src/wc_port.c **** 
 443:../src/wolfcrypt/src/wc_port.c **** #ifndef NO_FILESYSTEM
 444:../src/wolfcrypt/src/wc_port.c **** 
 445:../src/wolfcrypt/src/wc_port.c **** /* Helpful function to load file into allocated buffer */
 446:../src/wolfcrypt/src/wc_port.c **** int wc_FileLoad(const char* fname, unsigned char** buf, size_t* bufLen,
 447:../src/wolfcrypt/src/wc_port.c ****     void* heap)
 448:../src/wolfcrypt/src/wc_port.c **** {
 449:../src/wolfcrypt/src/wc_port.c ****     int ret;
 450:../src/wolfcrypt/src/wc_port.c ****     size_t fileSz;
 451:../src/wolfcrypt/src/wc_port.c ****     XFILE f;
 452:../src/wolfcrypt/src/wc_port.c **** 
 453:../src/wolfcrypt/src/wc_port.c ****     if (fname == NULL || buf == NULL || bufLen == NULL) {
 454:../src/wolfcrypt/src/wc_port.c ****         return BAD_FUNC_ARG;
 455:../src/wolfcrypt/src/wc_port.c ****     }
 456:../src/wolfcrypt/src/wc_port.c **** 
 457:../src/wolfcrypt/src/wc_port.c ****     /* set defaults */
 458:../src/wolfcrypt/src/wc_port.c ****     *buf = NULL;
 459:../src/wolfcrypt/src/wc_port.c ****     *bufLen = 0;
 460:../src/wolfcrypt/src/wc_port.c **** 
 461:../src/wolfcrypt/src/wc_port.c ****     /* open file (read-only binary) */
 462:../src/wolfcrypt/src/wc_port.c ****     f = XFOPEN(fname, "rb");
 463:../src/wolfcrypt/src/wc_port.c ****     if (!f) {
 464:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("wc_LoadFile file load error");
 465:../src/wolfcrypt/src/wc_port.c ****         return BAD_PATH_ERROR;
 466:../src/wolfcrypt/src/wc_port.c ****     }
 467:../src/wolfcrypt/src/wc_port.c **** 
 468:../src/wolfcrypt/src/wc_port.c ****     if (XFSEEK(f, 0, XSEEK_END) != 0) {
 469:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("wc_LoadFile file seek error");
 470:../src/wolfcrypt/src/wc_port.c ****         XFCLOSE(f);
 471:../src/wolfcrypt/src/wc_port.c ****         return BAD_PATH_ERROR;
 472:../src/wolfcrypt/src/wc_port.c ****     }
 473:../src/wolfcrypt/src/wc_port.c ****     fileSz = XFTELL(f);
 474:../src/wolfcrypt/src/wc_port.c ****     XREWIND(f);
 475:../src/wolfcrypt/src/wc_port.c ****     if (fileSz > 0) {
 476:../src/wolfcrypt/src/wc_port.c ****         *bufLen = fileSz;
 477:../src/wolfcrypt/src/wc_port.c ****         *buf = (byte*)XMALLOC(*bufLen, heap, DYNAMIC_TYPE_TMP_BUFFER);
 478:../src/wolfcrypt/src/wc_port.c ****         if (*buf == NULL) {
 479:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("wc_LoadFile memory error");
 480:../src/wolfcrypt/src/wc_port.c ****             ret = MEMORY_E;
 481:../src/wolfcrypt/src/wc_port.c ****         }
 482:../src/wolfcrypt/src/wc_port.c ****         else {
 483:../src/wolfcrypt/src/wc_port.c ****             size_t readLen = XFREAD(*buf, 1, *bufLen, f);
 484:../src/wolfcrypt/src/wc_port.c **** 
 485:../src/wolfcrypt/src/wc_port.c ****             /* check response code */
 486:../src/wolfcrypt/src/wc_port.c ****             ret = (readLen == *bufLen) ? 0 : -1;
 487:../src/wolfcrypt/src/wc_port.c ****         }
 488:../src/wolfcrypt/src/wc_port.c ****     }
 489:../src/wolfcrypt/src/wc_port.c ****     else {
 490:../src/wolfcrypt/src/wc_port.c ****         ret = BUFFER_E;
 491:../src/wolfcrypt/src/wc_port.c ****     }
 492:../src/wolfcrypt/src/wc_port.c ****     XFCLOSE(f);
 493:../src/wolfcrypt/src/wc_port.c **** 
 494:../src/wolfcrypt/src/wc_port.c ****     (void)heap;
 495:../src/wolfcrypt/src/wc_port.c **** 
 496:../src/wolfcrypt/src/wc_port.c ****     return ret;
 497:../src/wolfcrypt/src/wc_port.c **** }
 498:../src/wolfcrypt/src/wc_port.c **** 
 499:../src/wolfcrypt/src/wc_port.c **** #if !defined(NO_WOLFSSL_DIR) && \
 500:../src/wolfcrypt/src/wc_port.c ****     !defined(WOLFSSL_NUCLEUS) && !defined(WOLFSSL_NUCLEUS_1_2)
 501:../src/wolfcrypt/src/wc_port.c **** /* File Handling Helper */
 502:../src/wolfcrypt/src/wc_port.c **** /* returns 0 if file exists, WC_ISFILEEXIST_NOFILE if file doesn't exist */
 503:../src/wolfcrypt/src/wc_port.c **** int wc_FileExists(const char* fname)
 504:../src/wolfcrypt/src/wc_port.c **** {
 505:../src/wolfcrypt/src/wc_port.c ****     struct ReadDirCtx ctx;
 506:../src/wolfcrypt/src/wc_port.c **** 
 507:../src/wolfcrypt/src/wc_port.c ****     XMEMSET(&ctx, 0, sizeof(ctx));
 508:../src/wolfcrypt/src/wc_port.c **** 
 509:../src/wolfcrypt/src/wc_port.c ****     if (fname == NULL)
 510:../src/wolfcrypt/src/wc_port.c ****         return 0;
 511:../src/wolfcrypt/src/wc_port.c **** 
 512:../src/wolfcrypt/src/wc_port.c ****     if (XSTAT(fname, &ctx.s) != 0) {
 513:../src/wolfcrypt/src/wc_port.c ****          WOLFSSL_MSG("stat on name failed");
 514:../src/wolfcrypt/src/wc_port.c ****          return BAD_PATH_ERROR;
 515:../src/wolfcrypt/src/wc_port.c ****     } else {
 516:../src/wolfcrypt/src/wc_port.c **** #if defined(USE_WINDOWS_API)
 517:../src/wolfcrypt/src/wc_port.c ****         if (XS_ISREG(ctx.s.st_mode)) {
 518:../src/wolfcrypt/src/wc_port.c ****             return 0;
 519:../src/wolfcrypt/src/wc_port.c ****         }
 520:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_ZEPHYR)
 521:../src/wolfcrypt/src/wc_port.c ****         if (XS_ISREG(ctx.s.type)) {
 522:../src/wolfcrypt/src/wc_port.c ****             return 0;
 523:../src/wolfcrypt/src/wc_port.c ****         }
 524:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_TELIT_M2MB)
 525:../src/wolfcrypt/src/wc_port.c ****         if (XS_ISREG(ctx.s.st_mode)) {
 526:../src/wolfcrypt/src/wc_port.c ****             return 0;
 527:../src/wolfcrypt/src/wc_port.c ****         }
 528:../src/wolfcrypt/src/wc_port.c **** #else
 529:../src/wolfcrypt/src/wc_port.c ****         if (XS_ISREG(ctx.s.st_mode)) {
 530:../src/wolfcrypt/src/wc_port.c ****             return 0;
 531:../src/wolfcrypt/src/wc_port.c ****         }
 532:../src/wolfcrypt/src/wc_port.c **** #endif
 533:../src/wolfcrypt/src/wc_port.c ****     }
 534:../src/wolfcrypt/src/wc_port.c ****     return WC_ISFILEEXIST_NOFILE;
 535:../src/wolfcrypt/src/wc_port.c **** }
 536:../src/wolfcrypt/src/wc_port.c **** 
 537:../src/wolfcrypt/src/wc_port.c **** /* File Handling Helpers */
 538:../src/wolfcrypt/src/wc_port.c **** /* returns 0 if file found, WC_READDIR_NOFILE if no files or negative error */
 539:../src/wolfcrypt/src/wc_port.c **** int wc_ReadDirFirst(ReadDirCtx* ctx, const char* path, char** name)
 540:../src/wolfcrypt/src/wc_port.c **** {
 541:../src/wolfcrypt/src/wc_port.c ****     int ret = WC_READDIR_NOFILE; /* default to no files found */
 542:../src/wolfcrypt/src/wc_port.c ****     int pathLen = 0;
 543:../src/wolfcrypt/src/wc_port.c ****     int dnameLen = 0;
 544:../src/wolfcrypt/src/wc_port.c **** 
 545:../src/wolfcrypt/src/wc_port.c ****     if (name)
 546:../src/wolfcrypt/src/wc_port.c ****         *name = NULL;
 547:../src/wolfcrypt/src/wc_port.c **** 
 548:../src/wolfcrypt/src/wc_port.c ****     if (ctx == NULL || path == NULL) {
 549:../src/wolfcrypt/src/wc_port.c ****         return BAD_FUNC_ARG;
 550:../src/wolfcrypt/src/wc_port.c ****     }
 551:../src/wolfcrypt/src/wc_port.c **** 
 552:../src/wolfcrypt/src/wc_port.c ****     XMEMSET(ctx, 0, sizeof(ReadDirCtx));
 553:../src/wolfcrypt/src/wc_port.c ****     pathLen = (int)XSTRLEN(path);
 554:../src/wolfcrypt/src/wc_port.c **** 
 555:../src/wolfcrypt/src/wc_port.c **** #ifdef USE_WINDOWS_API
 556:../src/wolfcrypt/src/wc_port.c ****     if (pathLen > MAX_FILENAME_SZ - 3)
 557:../src/wolfcrypt/src/wc_port.c ****         return BAD_PATH_ERROR;
 558:../src/wolfcrypt/src/wc_port.c **** 
 559:../src/wolfcrypt/src/wc_port.c ****     XSTRNCPY(ctx->name, path, MAX_FILENAME_SZ - 3);
 560:../src/wolfcrypt/src/wc_port.c ****     XSTRNCPY(ctx->name + pathLen, "\\*", MAX_FILENAME_SZ - pathLen);
 561:../src/wolfcrypt/src/wc_port.c **** 
 562:../src/wolfcrypt/src/wc_port.c ****     ctx->hFind = FindFirstFileA(ctx->name, &ctx->FindFileData);
 563:../src/wolfcrypt/src/wc_port.c ****     if (ctx->hFind == INVALID_HANDLE_VALUE) {
 564:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("FindFirstFile for path verify locations failed");
 565:../src/wolfcrypt/src/wc_port.c ****         return BAD_PATH_ERROR;
 566:../src/wolfcrypt/src/wc_port.c ****     }
 567:../src/wolfcrypt/src/wc_port.c **** 
 568:../src/wolfcrypt/src/wc_port.c ****     do {
 569:../src/wolfcrypt/src/wc_port.c ****         if (!(ctx->FindFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)) {
 570:../src/wolfcrypt/src/wc_port.c ****             dnameLen = (int)XSTRLEN(ctx->FindFileData.cFileName);
 571:../src/wolfcrypt/src/wc_port.c **** 
 572:../src/wolfcrypt/src/wc_port.c ****             if (pathLen + dnameLen + 2 > MAX_FILENAME_SZ) {
 573:../src/wolfcrypt/src/wc_port.c ****                 return BAD_PATH_ERROR;
 574:../src/wolfcrypt/src/wc_port.c ****             }
 575:../src/wolfcrypt/src/wc_port.c ****             XSTRNCPY(ctx->name, path, pathLen + 1);
 576:../src/wolfcrypt/src/wc_port.c ****             ctx->name[pathLen] = '\\';
 577:../src/wolfcrypt/src/wc_port.c ****             XSTRNCPY(ctx->name + pathLen + 1,
 578:../src/wolfcrypt/src/wc_port.c ****                      ctx->FindFileData.cFileName,
 579:../src/wolfcrypt/src/wc_port.c ****                      MAX_FILENAME_SZ - pathLen - 1);
 580:../src/wolfcrypt/src/wc_port.c ****             if (name)
 581:../src/wolfcrypt/src/wc_port.c ****                 *name = ctx->name;
 582:../src/wolfcrypt/src/wc_port.c ****             return 0;
 583:../src/wolfcrypt/src/wc_port.c ****         }
 584:../src/wolfcrypt/src/wc_port.c ****     } while (FindNextFileA(ctx->hFind, &ctx->FindFileData));
 585:../src/wolfcrypt/src/wc_port.c **** 
 586:../src/wolfcrypt/src/wc_port.c **** #elif defined(INTIME_RTOS)
 587:../src/wolfcrypt/src/wc_port.c ****     if (pathLen > MAX_FILENAME_SZ - 3)
 588:../src/wolfcrypt/src/wc_port.c ****         return BAD_PATH_ERROR;
 589:../src/wolfcrypt/src/wc_port.c **** 
 590:../src/wolfcrypt/src/wc_port.c ****     XSTRNCPY(ctx->name, path, MAX_FILENAME_SZ - 3);
 591:../src/wolfcrypt/src/wc_port.c ****     XSTRNCPY(ctx->name + pathLen, "\\*", MAX_FILENAME_SZ - pathLen);
 592:../src/wolfcrypt/src/wc_port.c **** 
 593:../src/wolfcrypt/src/wc_port.c ****     if (!IntimeFindFirst(ctx->name, &ctx->FindFileData)) {
 594:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("FindFirstFile for path verify locations failed");
 595:../src/wolfcrypt/src/wc_port.c ****         return BAD_PATH_ERROR;
 596:../src/wolfcrypt/src/wc_port.c ****     }
 597:../src/wolfcrypt/src/wc_port.c **** 
 598:../src/wolfcrypt/src/wc_port.c ****     do {
 599:../src/wolfcrypt/src/wc_port.c ****         dnameLen = (int)XSTRLEN(IntimeFilename(ctx));
 600:../src/wolfcrypt/src/wc_port.c **** 
 601:../src/wolfcrypt/src/wc_port.c ****         if (pathLen + dnameLen + 2 > MAX_FILENAME_SZ) {
 602:../src/wolfcrypt/src/wc_port.c ****             return BAD_PATH_ERROR;
 603:../src/wolfcrypt/src/wc_port.c ****         }
 604:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name, path, pathLen + 1);
 605:../src/wolfcrypt/src/wc_port.c ****         ctx->name[pathLen] = '\\';
 606:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name + pathLen + 1,
 607:../src/wolfcrypt/src/wc_port.c ****                  IntimeFilename(ctx),
 608:../src/wolfcrypt/src/wc_port.c ****                  MAX_FILENAME_SZ - pathLen - 1);
 609:../src/wolfcrypt/src/wc_port.c ****         if (0 == wc_FileExists(ctx->name)) {
 610:../src/wolfcrypt/src/wc_port.c ****             if (name)
 611:../src/wolfcrypt/src/wc_port.c ****                 *name = ctx->name;
 612:../src/wolfcrypt/src/wc_port.c ****             return 0;
 613:../src/wolfcrypt/src/wc_port.c ****         }
 614:../src/wolfcrypt/src/wc_port.c ****     } while (IntimeFindNext(&ctx->FindFileData));
 615:../src/wolfcrypt/src/wc_port.c **** 
 616:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_ZEPHYR)
 617:../src/wolfcrypt/src/wc_port.c ****     if (fs_opendir(&ctx->dir, path) != 0) {
 618:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("opendir path verify locations failed");
 619:../src/wolfcrypt/src/wc_port.c ****         return BAD_PATH_ERROR;
 620:../src/wolfcrypt/src/wc_port.c ****     }
 621:../src/wolfcrypt/src/wc_port.c ****     ctx->dirp = &ctx->dir;
 622:../src/wolfcrypt/src/wc_port.c **** 
 623:../src/wolfcrypt/src/wc_port.c ****     while ((fs_readdir(&ctx->dir, &ctx->entry)) != 0) {
 624:../src/wolfcrypt/src/wc_port.c ****         dnameLen = (int)XSTRLEN(ctx->entry.name);
 625:../src/wolfcrypt/src/wc_port.c **** 
 626:../src/wolfcrypt/src/wc_port.c ****         if (pathLen + dnameLen + 2 >= MAX_FILENAME_SZ) {
 627:../src/wolfcrypt/src/wc_port.c ****             ret = BAD_PATH_ERROR;
 628:../src/wolfcrypt/src/wc_port.c ****             break;
 629:../src/wolfcrypt/src/wc_port.c ****         }
 630:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name, path, pathLen + 1);
 631:../src/wolfcrypt/src/wc_port.c ****         ctx->name[pathLen] = '/';
 632:../src/wolfcrypt/src/wc_port.c **** 
 633:../src/wolfcrypt/src/wc_port.c ****         /* Use dnameLen + 1 for GCC 8 warnings of truncating d_name. Because
 634:../src/wolfcrypt/src/wc_port.c ****          * of earlier check it is known that dnameLen is less than
 635:../src/wolfcrypt/src/wc_port.c ****          * MAX_FILENAME_SZ - (pathLen + 2)  so dnameLen +1 will fit */
 636:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name + pathLen + 1, ctx->entry.name, dnameLen + 1);
 637:../src/wolfcrypt/src/wc_port.c ****         if ((ret = wc_FileExists(ctx->name)) == 0) {
 638:../src/wolfcrypt/src/wc_port.c ****             if (name)
 639:../src/wolfcrypt/src/wc_port.c ****                 *name = ctx->name;
 640:../src/wolfcrypt/src/wc_port.c ****             return 0;
 641:../src/wolfcrypt/src/wc_port.c ****         }
 642:../src/wolfcrypt/src/wc_port.c ****     }
 643:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_TELIT_M2MB)
 644:../src/wolfcrypt/src/wc_port.c ****     ctx->dir = m2mb_fs_opendir((const CHAR*)path);
 645:../src/wolfcrypt/src/wc_port.c ****     if (ctx->dir == NULL) {
 646:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("opendir path verify locations failed");
 647:../src/wolfcrypt/src/wc_port.c ****         return BAD_PATH_ERROR;
 648:../src/wolfcrypt/src/wc_port.c ****     }
 649:../src/wolfcrypt/src/wc_port.c **** 
 650:../src/wolfcrypt/src/wc_port.c ****     while ((ctx->entry = m2mb_fs_readdir(ctx->dir)) != NULL) {
 651:../src/wolfcrypt/src/wc_port.c ****         dnameLen = (int)XSTRLEN(ctx->entry->d_name);
 652:../src/wolfcrypt/src/wc_port.c **** 
 653:../src/wolfcrypt/src/wc_port.c ****         if (pathLen + dnameLen + 2 >= MAX_FILENAME_SZ) {
 654:../src/wolfcrypt/src/wc_port.c ****             ret = BAD_PATH_ERROR;
 655:../src/wolfcrypt/src/wc_port.c ****             break;
 656:../src/wolfcrypt/src/wc_port.c ****         }
 657:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name, path, pathLen + 1);
 658:../src/wolfcrypt/src/wc_port.c ****         ctx->name[pathLen] = '/';
 659:../src/wolfcrypt/src/wc_port.c **** 
 660:../src/wolfcrypt/src/wc_port.c ****         /* Use dnameLen + 1 for GCC 8 warnings of truncating d_name. Because
 661:../src/wolfcrypt/src/wc_port.c ****          * of earlier check it is known that dnameLen is less than
 662:../src/wolfcrypt/src/wc_port.c ****          * MAX_FILENAME_SZ - (pathLen + 2)  so dnameLen +1 will fit */
 663:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name + pathLen + 1, ctx->entry->d_name, dnameLen + 1);
 664:../src/wolfcrypt/src/wc_port.c **** 
 665:../src/wolfcrypt/src/wc_port.c ****         if ((ret = wc_FileExists(ctx->name)) == 0) {
 666:../src/wolfcrypt/src/wc_port.c ****             if (name)
 667:../src/wolfcrypt/src/wc_port.c ****                 *name = ctx->name;
 668:../src/wolfcrypt/src/wc_port.c ****             return 0;
 669:../src/wolfcrypt/src/wc_port.c ****         }
 670:../src/wolfcrypt/src/wc_port.c ****     }
 671:../src/wolfcrypt/src/wc_port.c **** #else
 672:../src/wolfcrypt/src/wc_port.c ****     ctx->dir = opendir(path);
 673:../src/wolfcrypt/src/wc_port.c ****     if (ctx->dir == NULL) {
 674:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("opendir path verify locations failed");
 675:../src/wolfcrypt/src/wc_port.c ****         return BAD_PATH_ERROR;
 676:../src/wolfcrypt/src/wc_port.c ****     }
 677:../src/wolfcrypt/src/wc_port.c **** 
 678:../src/wolfcrypt/src/wc_port.c ****     while ((ctx->entry = readdir(ctx->dir)) != NULL) {
 679:../src/wolfcrypt/src/wc_port.c ****         dnameLen = (int)XSTRLEN(ctx->entry->d_name);
 680:../src/wolfcrypt/src/wc_port.c **** 
 681:../src/wolfcrypt/src/wc_port.c ****         if (pathLen + dnameLen + 2 >= MAX_FILENAME_SZ) {
 682:../src/wolfcrypt/src/wc_port.c ****             ret = BAD_PATH_ERROR;
 683:../src/wolfcrypt/src/wc_port.c ****             break;
 684:../src/wolfcrypt/src/wc_port.c ****         }
 685:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name, path, pathLen + 1);
 686:../src/wolfcrypt/src/wc_port.c ****         ctx->name[pathLen] = '/';
 687:../src/wolfcrypt/src/wc_port.c **** 
 688:../src/wolfcrypt/src/wc_port.c ****         /* Use dnameLen + 1 for GCC 8 warnings of truncating d_name. Because
 689:../src/wolfcrypt/src/wc_port.c ****          * of earlier check it is known that dnameLen is less than
 690:../src/wolfcrypt/src/wc_port.c ****          * MAX_FILENAME_SZ - (pathLen + 2)  so dnameLen +1 will fit */
 691:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name + pathLen + 1, ctx->entry->d_name, dnameLen + 1);
 692:../src/wolfcrypt/src/wc_port.c ****         if ((ret = wc_FileExists(ctx->name)) == 0) {
 693:../src/wolfcrypt/src/wc_port.c ****             if (name)
 694:../src/wolfcrypt/src/wc_port.c ****                 *name = ctx->name;
 695:../src/wolfcrypt/src/wc_port.c ****             return 0;
 696:../src/wolfcrypt/src/wc_port.c ****         }
 697:../src/wolfcrypt/src/wc_port.c ****     }
 698:../src/wolfcrypt/src/wc_port.c **** #endif
 699:../src/wolfcrypt/src/wc_port.c ****     wc_ReadDirClose(ctx);
 700:../src/wolfcrypt/src/wc_port.c **** 
 701:../src/wolfcrypt/src/wc_port.c ****     return ret;
 702:../src/wolfcrypt/src/wc_port.c **** }
 703:../src/wolfcrypt/src/wc_port.c **** 
 704:../src/wolfcrypt/src/wc_port.c **** /* returns 0 if file found, WC_READDIR_NOFILE if no more files */
 705:../src/wolfcrypt/src/wc_port.c **** int wc_ReadDirNext(ReadDirCtx* ctx, const char* path, char** name)
 706:../src/wolfcrypt/src/wc_port.c **** {
 707:../src/wolfcrypt/src/wc_port.c ****     int ret = WC_READDIR_NOFILE; /* default to no file found */
 708:../src/wolfcrypt/src/wc_port.c ****     int pathLen = 0;
 709:../src/wolfcrypt/src/wc_port.c ****     int dnameLen = 0;
 710:../src/wolfcrypt/src/wc_port.c **** 
 711:../src/wolfcrypt/src/wc_port.c ****     if (name)
 712:../src/wolfcrypt/src/wc_port.c ****         *name = NULL;
 713:../src/wolfcrypt/src/wc_port.c **** 
 714:../src/wolfcrypt/src/wc_port.c ****     if (ctx == NULL || path == NULL) {
 715:../src/wolfcrypt/src/wc_port.c ****         return BAD_FUNC_ARG;
 716:../src/wolfcrypt/src/wc_port.c ****     }
 717:../src/wolfcrypt/src/wc_port.c **** 
 718:../src/wolfcrypt/src/wc_port.c ****     XMEMSET(ctx->name, 0, MAX_FILENAME_SZ);
 719:../src/wolfcrypt/src/wc_port.c ****     pathLen = (int)XSTRLEN(path);
 720:../src/wolfcrypt/src/wc_port.c **** 
 721:../src/wolfcrypt/src/wc_port.c **** #ifdef USE_WINDOWS_API
 722:../src/wolfcrypt/src/wc_port.c ****     while (FindNextFileA(ctx->hFind, &ctx->FindFileData)) {
 723:../src/wolfcrypt/src/wc_port.c ****         if (!(ctx->FindFileData.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY)) {
 724:../src/wolfcrypt/src/wc_port.c ****             dnameLen = (int)XSTRLEN(ctx->FindFileData.cFileName);
 725:../src/wolfcrypt/src/wc_port.c **** 
 726:../src/wolfcrypt/src/wc_port.c ****             if (pathLen + dnameLen + 2 > MAX_FILENAME_SZ) {
 727:../src/wolfcrypt/src/wc_port.c ****                 return BAD_PATH_ERROR;
 728:../src/wolfcrypt/src/wc_port.c ****             }
 729:../src/wolfcrypt/src/wc_port.c ****             XSTRNCPY(ctx->name, path, pathLen + 1);
 730:../src/wolfcrypt/src/wc_port.c ****             ctx->name[pathLen] = '\\';
 731:../src/wolfcrypt/src/wc_port.c ****             XSTRNCPY(ctx->name + pathLen + 1,
 732:../src/wolfcrypt/src/wc_port.c ****                      ctx->FindFileData.cFileName,
 733:../src/wolfcrypt/src/wc_port.c ****                      MAX_FILENAME_SZ - pathLen - 1);
 734:../src/wolfcrypt/src/wc_port.c ****             if (name)
 735:../src/wolfcrypt/src/wc_port.c ****                 *name = ctx->name;
 736:../src/wolfcrypt/src/wc_port.c ****             return 0;
 737:../src/wolfcrypt/src/wc_port.c ****         }
 738:../src/wolfcrypt/src/wc_port.c ****     }
 739:../src/wolfcrypt/src/wc_port.c **** 
 740:../src/wolfcrypt/src/wc_port.c **** #elif defined(INTIME_RTOS)
 741:../src/wolfcrypt/src/wc_port.c ****     while (IntimeFindNext(&ctx->FindFileData)) {
 742:../src/wolfcrypt/src/wc_port.c ****         dnameLen = (int)XSTRLEN(IntimeFilename(ctx));
 743:../src/wolfcrypt/src/wc_port.c **** 
 744:../src/wolfcrypt/src/wc_port.c ****         if (pathLen + dnameLen + 2 > MAX_FILENAME_SZ) {
 745:../src/wolfcrypt/src/wc_port.c ****             return BAD_PATH_ERROR;
 746:../src/wolfcrypt/src/wc_port.c ****         }
 747:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name, path, pathLen + 1);
 748:../src/wolfcrypt/src/wc_port.c ****         ctx->name[pathLen] = '\\';
 749:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name + pathLen + 1,
 750:../src/wolfcrypt/src/wc_port.c ****                  IntimeFilename(ctx),
 751:../src/wolfcrypt/src/wc_port.c ****                  MAX_FILENAME_SZ - pathLen - 1);
 752:../src/wolfcrypt/src/wc_port.c ****         if (0 == wc_FileExists(ctx->name)) {
 753:../src/wolfcrypt/src/wc_port.c ****             if (name)
 754:../src/wolfcrypt/src/wc_port.c ****                 *name = ctx->name;
 755:../src/wolfcrypt/src/wc_port.c ****             return 0;
 756:../src/wolfcrypt/src/wc_port.c ****         }
 757:../src/wolfcrypt/src/wc_port.c ****     }
 758:../src/wolfcrypt/src/wc_port.c **** 
 759:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_ZEPHYR)
 760:../src/wolfcrypt/src/wc_port.c ****     while ((fs_readdir(&ctx->dir, &ctx->entry)) != 0) {
 761:../src/wolfcrypt/src/wc_port.c ****         dnameLen = (int)XSTRLEN(ctx->entry.name);
 762:../src/wolfcrypt/src/wc_port.c **** 
 763:../src/wolfcrypt/src/wc_port.c ****         if (pathLen + dnameLen + 2 >= MAX_FILENAME_SZ) {
 764:../src/wolfcrypt/src/wc_port.c ****             ret = BAD_PATH_ERROR;
 765:../src/wolfcrypt/src/wc_port.c ****             break;
 766:../src/wolfcrypt/src/wc_port.c ****         }
 767:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name, path, pathLen + 1);
 768:../src/wolfcrypt/src/wc_port.c ****         ctx->name[pathLen] = '/';
 769:../src/wolfcrypt/src/wc_port.c ****         /* Use dnameLen + 1 for GCC 8 warnings of truncating d_name. Because
 770:../src/wolfcrypt/src/wc_port.c ****          * of earlier check it is known that dnameLen is less than
 771:../src/wolfcrypt/src/wc_port.c ****          * MAX_FILENAME_SZ - (pathLen + 2) so that dnameLen +1 will fit */
 772:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name + pathLen + 1, ctx->entry.name, dnameLen + 1);
 773:../src/wolfcrypt/src/wc_port.c **** 
 774:../src/wolfcrypt/src/wc_port.c ****        if ((ret = wc_FileExists(ctx->name)) == 0) {
 775:../src/wolfcrypt/src/wc_port.c ****             if (name)
 776:../src/wolfcrypt/src/wc_port.c ****                 *name = ctx->name;
 777:../src/wolfcrypt/src/wc_port.c ****             return 0;
 778:../src/wolfcrypt/src/wc_port.c ****         }
 779:../src/wolfcrypt/src/wc_port.c ****     }
 780:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_TELIT_M2MB)
 781:../src/wolfcrypt/src/wc_port.c ****     while ((ctx->entry = m2mb_fs_readdir(ctx->dir)) != NULL) {
 782:../src/wolfcrypt/src/wc_port.c ****         dnameLen = (int)XSTRLEN(ctx->entry->d_name);
 783:../src/wolfcrypt/src/wc_port.c **** 
 784:../src/wolfcrypt/src/wc_port.c ****         if (pathLen + dnameLen + 2 >= MAX_FILENAME_SZ) {
 785:../src/wolfcrypt/src/wc_port.c ****             ret = BAD_PATH_ERROR;
 786:../src/wolfcrypt/src/wc_port.c ****             break;
 787:../src/wolfcrypt/src/wc_port.c ****         }
 788:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name, path, pathLen + 1);
 789:../src/wolfcrypt/src/wc_port.c ****         ctx->name[pathLen] = '/';
 790:../src/wolfcrypt/src/wc_port.c **** 
 791:../src/wolfcrypt/src/wc_port.c ****         /* Use dnameLen + 1 for GCC 8 warnings of truncating d_name. Because
 792:../src/wolfcrypt/src/wc_port.c ****          * of earlier check it is known that dnameLen is less than
 793:../src/wolfcrypt/src/wc_port.c ****          * MAX_FILENAME_SZ - (pathLen + 2)  so dnameLen +1 will fit */
 794:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name + pathLen + 1, ctx->entry->d_name, dnameLen + 1);
 795:../src/wolfcrypt/src/wc_port.c **** 
 796:../src/wolfcrypt/src/wc_port.c ****         if ((ret = wc_FileExists(ctx->name)) == 0) {
 797:../src/wolfcrypt/src/wc_port.c ****             if (name)
 798:../src/wolfcrypt/src/wc_port.c ****                 *name = ctx->name;
 799:../src/wolfcrypt/src/wc_port.c ****             return 0;
 800:../src/wolfcrypt/src/wc_port.c ****         }
 801:../src/wolfcrypt/src/wc_port.c ****     }
 802:../src/wolfcrypt/src/wc_port.c **** #else
 803:../src/wolfcrypt/src/wc_port.c ****     while ((ctx->entry = readdir(ctx->dir)) != NULL) {
 804:../src/wolfcrypt/src/wc_port.c ****         dnameLen = (int)XSTRLEN(ctx->entry->d_name);
 805:../src/wolfcrypt/src/wc_port.c **** 
 806:../src/wolfcrypt/src/wc_port.c ****         if (pathLen + dnameLen + 2 >= MAX_FILENAME_SZ) {
 807:../src/wolfcrypt/src/wc_port.c ****             ret = BAD_PATH_ERROR;
 808:../src/wolfcrypt/src/wc_port.c ****             break;
 809:../src/wolfcrypt/src/wc_port.c ****         }
 810:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name, path, pathLen + 1);
 811:../src/wolfcrypt/src/wc_port.c ****         ctx->name[pathLen] = '/';
 812:../src/wolfcrypt/src/wc_port.c ****         /* Use dnameLen + 1 for GCC 8 warnings of truncating d_name. Because
 813:../src/wolfcrypt/src/wc_port.c ****          * of earlier check it is known that dnameLen is less than
 814:../src/wolfcrypt/src/wc_port.c ****          * MAX_FILENAME_SZ - (pathLen + 2) so that dnameLen +1 will fit */
 815:../src/wolfcrypt/src/wc_port.c ****         XSTRNCPY(ctx->name + pathLen + 1, ctx->entry->d_name, dnameLen + 1);
 816:../src/wolfcrypt/src/wc_port.c **** 
 817:../src/wolfcrypt/src/wc_port.c ****         if ((ret = wc_FileExists(ctx->name)) == 0) {
 818:../src/wolfcrypt/src/wc_port.c ****             if (name)
 819:../src/wolfcrypt/src/wc_port.c ****                 *name = ctx->name;
 820:../src/wolfcrypt/src/wc_port.c ****             return 0;
 821:../src/wolfcrypt/src/wc_port.c ****         }
 822:../src/wolfcrypt/src/wc_port.c ****     }
 823:../src/wolfcrypt/src/wc_port.c **** #endif
 824:../src/wolfcrypt/src/wc_port.c **** 
 825:../src/wolfcrypt/src/wc_port.c ****     wc_ReadDirClose(ctx);
 826:../src/wolfcrypt/src/wc_port.c **** 
 827:../src/wolfcrypt/src/wc_port.c ****     return ret;
 828:../src/wolfcrypt/src/wc_port.c **** }
 829:../src/wolfcrypt/src/wc_port.c **** 
 830:../src/wolfcrypt/src/wc_port.c **** void wc_ReadDirClose(ReadDirCtx* ctx)
 831:../src/wolfcrypt/src/wc_port.c **** {
 832:../src/wolfcrypt/src/wc_port.c ****     if (ctx == NULL) {
 833:../src/wolfcrypt/src/wc_port.c ****         return;
 834:../src/wolfcrypt/src/wc_port.c ****     }
 835:../src/wolfcrypt/src/wc_port.c **** 
 836:../src/wolfcrypt/src/wc_port.c **** #ifdef USE_WINDOWS_API
 837:../src/wolfcrypt/src/wc_port.c ****     if (ctx->hFind != INVALID_HANDLE_VALUE) {
 838:../src/wolfcrypt/src/wc_port.c ****         FindClose(ctx->hFind);
 839:../src/wolfcrypt/src/wc_port.c ****         ctx->hFind = INVALID_HANDLE_VALUE;
 840:../src/wolfcrypt/src/wc_port.c ****     }
 841:../src/wolfcrypt/src/wc_port.c **** 
 842:../src/wolfcrypt/src/wc_port.c **** #elif defined(INTIME_RTOS)
 843:../src/wolfcrypt/src/wc_port.c ****     IntimeFindClose(&ctx->FindFileData);
 844:../src/wolfcrypt/src/wc_port.c **** 
 845:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_ZEPHYR)
 846:../src/wolfcrypt/src/wc_port.c ****     if (ctx->dirp) {
 847:../src/wolfcrypt/src/wc_port.c ****         fs_closedir(ctx->dirp);
 848:../src/wolfcrypt/src/wc_port.c ****         ctx->dirp = NULL;
 849:../src/wolfcrypt/src/wc_port.c ****     }
 850:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_TELIT_M2MB)
 851:../src/wolfcrypt/src/wc_port.c ****     if (ctx->dir) {
 852:../src/wolfcrypt/src/wc_port.c ****         m2mb_fs_closedir(ctx->dir);
 853:../src/wolfcrypt/src/wc_port.c ****         ctx->dir = NULL;
 854:../src/wolfcrypt/src/wc_port.c ****     }
 855:../src/wolfcrypt/src/wc_port.c **** #else
 856:../src/wolfcrypt/src/wc_port.c ****     if (ctx->dir) {
 857:../src/wolfcrypt/src/wc_port.c ****         closedir(ctx->dir);
 858:../src/wolfcrypt/src/wc_port.c ****         ctx->dir = NULL;
 859:../src/wolfcrypt/src/wc_port.c ****     }
 860:../src/wolfcrypt/src/wc_port.c **** #endif
 861:../src/wolfcrypt/src/wc_port.c **** }
 862:../src/wolfcrypt/src/wc_port.c **** 
 863:../src/wolfcrypt/src/wc_port.c **** #endif /* !NO_WOLFSSL_DIR */
 864:../src/wolfcrypt/src/wc_port.c **** #endif /* !NO_FILESYSTEM */
 865:../src/wolfcrypt/src/wc_port.c **** 
 866:../src/wolfcrypt/src/wc_port.c **** #if !defined(NO_FILESYSTEM) && defined(WOLFSSL_ZEPHYR)
 867:../src/wolfcrypt/src/wc_port.c **** XFILE z_fs_open(const char* filename, const char* perm)
 868:../src/wolfcrypt/src/wc_port.c **** {
 869:../src/wolfcrypt/src/wc_port.c ****     XFILE file;
 870:../src/wolfcrypt/src/wc_port.c **** 
 871:../src/wolfcrypt/src/wc_port.c ****     file = (XFILE)XMALLOC(sizeof(*file), NULL, DYNAMIC_TYPE_FILE);
 872:../src/wolfcrypt/src/wc_port.c ****     if (file != NULL) {
 873:../src/wolfcrypt/src/wc_port.c ****         if (fs_open(file, filename) != 0) {
 874:../src/wolfcrypt/src/wc_port.c ****             XFREE(file, NULL, DYNAMIC_TYPE_FILE);
 875:../src/wolfcrypt/src/wc_port.c ****             file = NULL;
 876:../src/wolfcrypt/src/wc_port.c ****         }
 877:../src/wolfcrypt/src/wc_port.c ****     }
 878:../src/wolfcrypt/src/wc_port.c **** 
 879:../src/wolfcrypt/src/wc_port.c ****     return file;
 880:../src/wolfcrypt/src/wc_port.c **** }
 881:../src/wolfcrypt/src/wc_port.c **** 
 882:../src/wolfcrypt/src/wc_port.c **** int z_fs_close(XFILE file)
 883:../src/wolfcrypt/src/wc_port.c **** {
 884:../src/wolfcrypt/src/wc_port.c ****     int ret;
 885:../src/wolfcrypt/src/wc_port.c **** 
 886:../src/wolfcrypt/src/wc_port.c ****     if (file == NULL)
 887:../src/wolfcrypt/src/wc_port.c ****         return -1;
 888:../src/wolfcrypt/src/wc_port.c ****     ret = (fs_close(file) == 0) ? 0 : -1;
 889:../src/wolfcrypt/src/wc_port.c **** 
 890:../src/wolfcrypt/src/wc_port.c ****     XFREE(file, NULL, DYNAMIC_TYPE_FILE);
 891:../src/wolfcrypt/src/wc_port.c **** 
 892:../src/wolfcrypt/src/wc_port.c ****     return ret;
 893:../src/wolfcrypt/src/wc_port.c **** }
 894:../src/wolfcrypt/src/wc_port.c **** 
 895:../src/wolfcrypt/src/wc_port.c **** #endif /* !NO_FILESYSTEM && !WOLFSSL_ZEPHYR */
 896:../src/wolfcrypt/src/wc_port.c **** 
 897:../src/wolfcrypt/src/wc_port.c **** #if !defined(WOLFSSL_USER_MUTEX)
 898:../src/wolfcrypt/src/wc_port.c **** wolfSSL_Mutex* wc_InitAndAllocMutex(void)
 899:../src/wolfcrypt/src/wc_port.c **** {
 112                             		.loc 1 899 1
 113 0000 7E AA                   		push.l	r10
 114                             	.LCFI4:
 115 0002 71 0A F8                		add	#-8, r0, r10
 116                             	.LCFI5:
 117 0005 EF A0                   		mov.L	r10, r0
 900:../src/wolfcrypt/src/wc_port.c ****     wolfSSL_Mutex* m = (wolfSSL_Mutex*) XMALLOC(sizeof(wolfSSL_Mutex), NULL,
 118                             		.loc 1 900 41
 119 0007 66 41                   		mov.L	#4, r1
 120 0009 05 00 00 00             		bsr	_wolfSSL_Malloc
 121 000d E3 A1                   		mov.L	r1, [r10]
 901:../src/wolfcrypt/src/wc_port.c ****             DYNAMIC_TYPE_MUTEX);
 902:../src/wolfcrypt/src/wc_port.c ****     if (m != NULL) {
 122                             		.loc 1 902 8
 123 000f EC A5                   		mov.L	[r10], r5
 124 0011 61 05                   		cmp	#0, r5
 125 0013 20 2F                   		beq	.L9
 903:../src/wolfcrypt/src/wc_port.c ****         if (wc_InitMutex(m) != 0) {
 126                             		.loc 1 903 13
 127 0015 EC A1                   		mov.L	[r10], r1
 128 0017 05 00 00 00             		bsr	_wc_InitMutex
 129 001b EF 15                   		mov.L	r1, r5
 130                             		.loc 1 903 12
 131 001d 61 05                   		cmp	#0, r5
 132 001f 20 2D                   		beq	.L12
 904:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("Init Mutex failed");
 133                             		.loc 1 904 13
 134 0021 FB 12 24 00 00 00       		mov.L	#.LC2, r1
 135 0027 05 00 00 00             		bsr	_WOLFSSL_MSG
 136                             	.LBB2:
 905:../src/wolfcrypt/src/wc_port.c ****             XFREE(m, NULL, DYNAMIC_TYPE_MUTEX);
 137                             		.loc 1 905 13
 138 002b EC A5                   		mov.L	[r10], r5
 139 002d E7 A5 01                		mov.L	r5, 4[r10]
 140 0030 ED A5 01                		mov.L	4[r10], r5
 141 0033 61 05                   		cmp	#0, r5
 142 0035 10                      		beq	.L11
 143                             		.loc 1 905 13 is_stmt 0 discriminator 1
 144 0036 ED A1 01                		mov.L	4[r10], r1
 145 0039 05 00 00 00             		bsr	_wolfSSL_Free
 146                             	.L11:
 147                             	.LBE2:
 906:../src/wolfcrypt/src/wc_port.c ****             m = NULL;
 148                             		.loc 1 906 15 is_stmt 1
 149 003d F8 A6 00                		mov.L	#0, [r10]
 150 0040 2E 0C                   		bra	.L12
 151                             	.L9:
 907:../src/wolfcrypt/src/wc_port.c ****         }
 908:../src/wolfcrypt/src/wc_port.c ****     }
 909:../src/wolfcrypt/src/wc_port.c ****     else {
 910:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("Memory error with Mutex allocation");
 152                             		.loc 1 910 9
 153 0042 FB 12 36 00 00 00       		mov.L	#.LC3, r1
 154 0048 05 00 00 00             		bsr	_WOLFSSL_MSG
 155                             	.L12:
 911:../src/wolfcrypt/src/wc_port.c ****     }
 912:../src/wolfcrypt/src/wc_port.c **** 
 913:../src/wolfcrypt/src/wc_port.c ****     return m;
 156                             		.loc 1 913 12
 157 004c EC A5                   		mov.L	[r10], r5
 914:../src/wolfcrypt/src/wc_port.c **** }
 158                             		.loc 1 914 1
 159 004e EF 51                   		mov.L	r5, r1
 160 0050 3F AA 03                		rtsd	#12, r10-r10
 161                             	.LFE3:
 163                             		.section	.text.wc_strtok,"ax",@progbits
 164                             		.global	_wc_strtok
 166                             	_wc_strtok:
 167                             	.LFB4:
 915:../src/wolfcrypt/src/wc_port.c **** #endif
 916:../src/wolfcrypt/src/wc_port.c **** 
 917:../src/wolfcrypt/src/wc_port.c **** #ifdef USE_WOLF_STRTOK
 918:../src/wolfcrypt/src/wc_port.c **** /* String token (delim) search. If str is null use nextp. */
 919:../src/wolfcrypt/src/wc_port.c **** char* wc_strtok(char *str, const char *delim, char **nextp)
 920:../src/wolfcrypt/src/wc_port.c **** {
 168                             		.loc 1 920 1
 169 0000 7E AA                   		push.l	r10
 170                             	.LCFI6:
 171 0002 71 0A E8                		add	#-24, r0, r10
 172                             	.LCFI7:
 173 0005 EF A0                   		mov.L	r10, r0
 174 0007 E7 A1 03                		mov.L	r1, 12[r10]
 175 000a E7 A2 04                		mov.L	r2, 16[r10]
 176 000d E7 A3 05                		mov.L	r3, 20[r10]
 921:../src/wolfcrypt/src/wc_port.c ****     char* ret;
 922:../src/wolfcrypt/src/wc_port.c ****     int i, j;
 923:../src/wolfcrypt/src/wc_port.c **** 
 924:../src/wolfcrypt/src/wc_port.c ****     /* Use next if str is NULL */
 925:../src/wolfcrypt/src/wc_port.c ****     if (str == NULL && nextp)
 177                             		.loc 1 925 8
 178 0010 ED A5 03                		mov.L	12[r10], r5
 179 0013 61 05                   		cmp	#0, r5
 180 0015 21 10                   		bne	.L15
 181                             		.loc 1 925 21 discriminator 1
 182 0017 ED A5 05                		mov.L	20[r10], r5
 183 001a 61 05                   		cmp	#0, r5
 184 001c 11                      		beq	.L15
 926:../src/wolfcrypt/src/wc_port.c ****         str = *nextp;
 185                             		.loc 1 926 13
 186 001d ED A5 05                		mov.L	20[r10], r5
 187 0020 EC 55                   		mov.L	[r5], r5
 188 0022 E7 A5 03                		mov.L	r5, 12[r10]
 189                             	.L15:
 927:../src/wolfcrypt/src/wc_port.c **** 
 928:../src/wolfcrypt/src/wc_port.c ****     /* verify str input */
 929:../src/wolfcrypt/src/wc_port.c ****     if (str == NULL || *str == '\0')
 190                             		.loc 1 929 8
 191 0025 ED A5 03                		mov.L	12[r10], r5
 192 0028 61 05                   		cmp	#0, r5
 193 002a 20 0C                   		beq	.L16
 194                             		.loc 1 929 24 discriminator 1
 195 002c ED A5 03                		mov.L	12[r10], r5
 196 002f CC 55                   		mov.B	[r5], r5
 197                             		.loc 1 929 21 discriminator 1
 198 0031 5B 55                   		movu.B	r5, r5
 199 0033 61 05                   		cmp	#0, r5
 200 0035 1E                      		bne	.L17
 201                             	.L16:
 930:../src/wolfcrypt/src/wc_port.c ****         return NULL;
 202                             		.loc 1 930 16
 203 0036 66 05                   		mov.L	#0, r5
 204 0038 38 31 01                		bra	.L18
 205                             	.L17:
 931:../src/wolfcrypt/src/wc_port.c **** 
 932:../src/wolfcrypt/src/wc_port.c ****     /* match on entire delim */
 933:../src/wolfcrypt/src/wc_port.c ****     for (i = 0; str[i]; i++) {
 206                             		.loc 1 933 12
 207 003b F8 A6 00                		mov.L	#0, [r10]
 208                             		.loc 1 933 5
 209 003e 2E 54                   		bra	.L19
 210                             	.L26:
 934:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 211                             		.loc 1 934 16
 212 0040 F9 A6 01 00             		mov.L	#0, 4[r10]
 213                             		.loc 1 934 9
 214 0044 2E 25                   		bra	.L20
 215                             	.L23:
 935:../src/wolfcrypt/src/wc_port.c ****             if (delim[j] == str[i])
 216                             		.loc 1 935 22
 217 0046 ED A5 01                		mov.L	4[r10], r5
 218 0049 ED A4 04                		mov.L	16[r10], r4
 219 004c 4B 45                   		add	r4, r5
 220 004e CC 53                   		mov.B	[r5], r3
 221                             		.loc 1 935 32
 222 0050 EC A5                   		mov.L	[r10], r5
 223 0052 ED A4 03                		mov.L	12[r10], r4
 224 0055 4B 45                   		add	r4, r5
 225                             		.loc 1 935 26
 226 0057 CC 55                   		mov.B	[r5], r5
 227                             		.loc 1 935 16
 228 0059 5B 34                   		movu.B	r3, r4
 229 005b 5B 55                   		movu.B	r5, r5
 230 005d 47 54                   		cmp	r5, r4
 231 005f 20 1C                   		beq	.L38
 934:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 232                             		.loc 1 934 32 discriminator 2
 233 0061 ED A5 01                		mov.L	4[r10], r5
 234 0064 62 15                   		add	#1, r5
 235 0066 E7 A5 01                		mov.L	r5, 4[r10]
 236                             	.L20:
 934:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 237                             		.loc 1 934 26 discriminator 1
 238 0069 ED A5 01                		mov.L	4[r10], r5
 239 006c ED A4 04                		mov.L	16[r10], r4
 240 006f 4B 45                   		add	r4, r5
 241 0071 CC 55                   		mov.B	[r5], r5
 934:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 242                             		.loc 1 934 9 discriminator 1
 243 0073 5B 55                   		movu.B	r5, r5
 244 0075 61 05                   		cmp	#0, r5
 245 0077 21 CF                   		bne	.L23
 246 0079 2E 03                   		bra	.L22
 247                             	.L38:
 936:../src/wolfcrypt/src/wc_port.c ****                 break;
 248                             		.loc 1 936 17
 249 007b 03                      		nop
 250                             	.L22:
 937:../src/wolfcrypt/src/wc_port.c ****         }
 938:../src/wolfcrypt/src/wc_port.c ****         if (!delim[j])
 251                             		.loc 1 938 19
 252 007c ED A5 01                		mov.L	4[r10], r5
 253 007f ED A4 04                		mov.L	16[r10], r4
 254 0082 4B 45                   		add	r4, r5
 255 0084 CC 55                   		mov.B	[r5], r5
 256                             		.loc 1 938 12
 257 0086 5B 55                   		movu.B	r5, r5
 258 0088 61 05                   		cmp	#0, r5
 259 008a 20 19                   		beq	.L39
 933:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 260                             		.loc 1 933 26 discriminator 2
 261 008c EC A5                   		mov.L	[r10], r5
 262 008e 62 15                   		add	#1, r5
 263 0090 E3 A5                   		mov.L	r5, [r10]
 264                             	.L19:
 933:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 265                             		.loc 1 933 20 discriminator 1
 266 0092 EC A5                   		mov.L	[r10], r5
 267 0094 ED A4 03                		mov.L	12[r10], r4
 268 0097 4B 45                   		add	r4, r5
 269 0099 CC 55                   		mov.B	[r5], r5
 933:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 270                             		.loc 1 933 5 discriminator 1
 271 009b 5B 55                   		movu.B	r5, r5
 272 009d 61 05                   		cmp	#0, r5
 273 009f 21 A1                   		bne	.L26
 274 00a1 2E 03                   		bra	.L25
 275                             	.L39:
 939:../src/wolfcrypt/src/wc_port.c ****             break;
 276                             		.loc 1 939 13
 277 00a3 03                      		nop
 278                             	.L25:
 940:../src/wolfcrypt/src/wc_port.c ****     }
 941:../src/wolfcrypt/src/wc_port.c ****     str += i;
 279                             		.loc 1 941 9
 280 00a4 EC A5                   		mov.L	[r10], r5
 281 00a6 ED A4 03                		mov.L	12[r10], r4
 282 00a9 4B 45                   		add	r4, r5
 283 00ab E7 A5 03                		mov.L	r5, 12[r10]
 942:../src/wolfcrypt/src/wc_port.c ****     /* if end of string, not found so return NULL */
 943:../src/wolfcrypt/src/wc_port.c ****     if (*str == '\0')
 284                             		.loc 1 943 9
 285 00ae ED A5 03                		mov.L	12[r10], r5
 286 00b1 CC 55                   		mov.B	[r5], r5
 287                             		.loc 1 943 8
 288 00b3 5B 55                   		movu.B	r5, r5
 289 00b5 61 05                   		cmp	#0, r5
 290 00b7 1E                      		bne	.L27
 944:../src/wolfcrypt/src/wc_port.c ****         return NULL;
 291                             		.loc 1 944 16
 292 00b8 66 05                   		mov.L	#0, r5
 293 00ba 38 AF 00                		bra	.L18
 294                             	.L27:
 945:../src/wolfcrypt/src/wc_port.c **** 
 946:../src/wolfcrypt/src/wc_port.c ****     ret = str;
 295                             		.loc 1 946 9
 296 00bd ED A5 03                		mov.L	12[r10], r5
 297 00c0 E7 A5 02                		mov.L	r5, 8[r10]
 947:../src/wolfcrypt/src/wc_port.c **** 
 948:../src/wolfcrypt/src/wc_port.c ****     /* match on first delim */
 949:../src/wolfcrypt/src/wc_port.c ****     for (i = 0; str[i]; i++) {
 298                             		.loc 1 949 12
 299 00c3 F8 A6 00                		mov.L	#0, [r10]
 300                             		.loc 1 949 5
 301 00c6 2E 5F                   		bra	.L28
 302                             	.L35:
 950:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 303                             		.loc 1 950 16
 304 00c8 F9 A6 01 00             		mov.L	#0, 4[r10]
 305                             		.loc 1 950 9
 306 00cc 2E 25                   		bra	.L29
 307                             	.L32:
 951:../src/wolfcrypt/src/wc_port.c ****             if (delim[j] == str[i])
 308                             		.loc 1 951 22
 309 00ce ED A5 01                		mov.L	4[r10], r5
 310 00d1 ED A4 04                		mov.L	16[r10], r4
 311 00d4 4B 45                   		add	r4, r5
 312 00d6 CC 53                   		mov.B	[r5], r3
 313                             		.loc 1 951 32
 314 00d8 EC A5                   		mov.L	[r10], r5
 315 00da ED A4 03                		mov.L	12[r10], r4
 316 00dd 4B 45                   		add	r4, r5
 317                             		.loc 1 951 26
 318 00df CC 55                   		mov.B	[r5], r5
 319                             		.loc 1 951 16
 320 00e1 5B 34                   		movu.B	r3, r4
 321 00e3 5B 55                   		movu.B	r5, r5
 322 00e5 47 54                   		cmp	r5, r4
 323 00e7 20 1C                   		beq	.L40
 950:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 324                             		.loc 1 950 32 discriminator 2
 325 00e9 ED A5 01                		mov.L	4[r10], r5
 326 00ec 62 15                   		add	#1, r5
 327 00ee E7 A5 01                		mov.L	r5, 4[r10]
 328                             	.L29:
 950:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 329                             		.loc 1 950 26 discriminator 1
 330 00f1 ED A5 01                		mov.L	4[r10], r5
 331 00f4 ED A4 04                		mov.L	16[r10], r4
 332 00f7 4B 45                   		add	r4, r5
 333 00f9 CC 55                   		mov.B	[r5], r5
 950:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 334                             		.loc 1 950 9 discriminator 1
 335 00fb 5B 55                   		movu.B	r5, r5
 336 00fd 61 05                   		cmp	#0, r5
 337 00ff 21 CF                   		bne	.L32
 338 0101 2E 03                   		bra	.L31
 339                             	.L40:
 952:../src/wolfcrypt/src/wc_port.c ****                 break;
 340                             		.loc 1 952 17
 341 0103 03                      		nop
 342                             	.L31:
 953:../src/wolfcrypt/src/wc_port.c ****         }
 954:../src/wolfcrypt/src/wc_port.c ****         if (delim[j] == str[i])
 343                             		.loc 1 954 18
 344 0104 ED A5 01                		mov.L	4[r10], r5
 345 0107 ED A4 04                		mov.L	16[r10], r4
 346 010a 4B 45                   		add	r4, r5
 347 010c CC 53                   		mov.B	[r5], r3
 348                             		.loc 1 954 28
 349 010e EC A5                   		mov.L	[r10], r5
 350 0110 ED A4 03                		mov.L	12[r10], r4
 351 0113 4B 45                   		add	r4, r5
 352                             		.loc 1 954 22
 353 0115 CC 55                   		mov.B	[r5], r5
 354                             		.loc 1 954 12
 355 0117 5B 34                   		movu.B	r3, r4
 356 0119 5B 55                   		movu.B	r5, r5
 357 011b 47 54                   		cmp	r5, r4
 358 011d 20 19                   		beq	.L41
 949:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 359                             		.loc 1 949 26 discriminator 2
 360 011f EC A5                   		mov.L	[r10], r5
 361 0121 62 15                   		add	#1, r5
 362 0123 E3 A5                   		mov.L	r5, [r10]
 363                             	.L28:
 949:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 364                             		.loc 1 949 20 discriminator 1
 365 0125 EC A5                   		mov.L	[r10], r5
 366 0127 ED A4 03                		mov.L	12[r10], r4
 367 012a 4B 45                   		add	r4, r5
 368 012c CC 55                   		mov.B	[r5], r5
 949:../src/wolfcrypt/src/wc_port.c ****         for (j = 0; delim[j]; j++) {
 369                             		.loc 1 949 5 discriminator 1
 370 012e 5B 55                   		movu.B	r5, r5
 371 0130 61 05                   		cmp	#0, r5
 372 0132 21 96                   		bne	.L35
 373 0134 2E 03                   		bra	.L34
 374                             	.L41:
 955:../src/wolfcrypt/src/wc_port.c ****             break;
 375                             		.loc 1 955 13
 376 0136 03                      		nop
 377                             	.L34:
 956:../src/wolfcrypt/src/wc_port.c ****     }
 957:../src/wolfcrypt/src/wc_port.c ****     str += i;
 378                             		.loc 1 957 9
 379 0137 EC A5                   		mov.L	[r10], r5
 380 0139 ED A4 03                		mov.L	12[r10], r4
 381 013c 4B 45                   		add	r4, r5
 382 013e E7 A5 03                		mov.L	r5, 12[r10]
 958:../src/wolfcrypt/src/wc_port.c **** 
 959:../src/wolfcrypt/src/wc_port.c ****     /* null terminate found string */
 960:../src/wolfcrypt/src/wc_port.c ****     if (*str)
 383                             		.loc 1 960 9
 384 0141 ED A5 03                		mov.L	12[r10], r5
 385 0144 CC 55                   		mov.B	[r5], r5
 386                             		.loc 1 960 8
 387 0146 5B 55                   		movu.B	r5, r5
 388 0148 61 05                   		cmp	#0, r5
 389 014a 20 0E                   		beq	.L36
 961:../src/wolfcrypt/src/wc_port.c ****         *str++ = '\0';
 390                             		.loc 1 961 13
 391 014c ED A5 03                		mov.L	12[r10], r5
 392 014f 71 54 01                		add	#1, r5, r4
 393 0152 E7 A4 03                		mov.L	r4, 12[r10]
 394                             		.loc 1 961 16
 395 0155 F8 54 00                		mov.B	#0, [r5]
 396                             	.L36:
 962:../src/wolfcrypt/src/wc_port.c **** 
 963:../src/wolfcrypt/src/wc_port.c ****     /* return pointer to next */
 964:../src/wolfcrypt/src/wc_port.c ****     if (nextp)
 397                             		.loc 1 964 8
 398 0158 ED A5 05                		mov.L	20[r10], r5
 399 015b 61 05                   		cmp	#0, r5
 400 015d 11                      		beq	.L37
 965:../src/wolfcrypt/src/wc_port.c ****         *nextp = str;
 401                             		.loc 1 965 16
 402 015e ED A5 05                		mov.L	20[r10], r5
 403 0161 ED A4 03                		mov.L	12[r10], r4
 404 0164 E3 54                   		mov.L	r4, [r5]
 405                             	.L37:
 966:../src/wolfcrypt/src/wc_port.c **** 
 967:../src/wolfcrypt/src/wc_port.c ****     return ret;
 406                             		.loc 1 967 12
 407 0166 ED A5 02                		mov.L	8[r10], r5
 408                             	.L18:
 968:../src/wolfcrypt/src/wc_port.c **** }
 409                             		.loc 1 968 1
 410 0169 EF 51                   		mov.L	r5, r1
 411 016b 3F AA 07                		rtsd	#28, r10-r10
 412                             	.LFE4:
 414                             		.section	.text.wc_strsep,"ax",@progbits
 415                             		.global	_wc_strsep
 417                             	_wc_strsep:
 418                             	.LFB5:
 969:../src/wolfcrypt/src/wc_port.c **** #endif /* USE_WOLF_STRTOK */
 970:../src/wolfcrypt/src/wc_port.c **** 
 971:../src/wolfcrypt/src/wc_port.c **** #ifdef USE_WOLF_STRSEP
 972:../src/wolfcrypt/src/wc_port.c **** char* wc_strsep(char **stringp, const char *delim)
 973:../src/wolfcrypt/src/wc_port.c **** {
 419                             		.loc 1 973 1
 420 0000 7E AA                   		push.l	r10
 421                             	.LCFI8:
 422 0002 71 0A EC                		add	#-20, r0, r10
 423                             	.LCFI9:
 424 0005 EF A0                   		mov.L	r10, r0
 425 0007 E7 A1 03                		mov.L	r1, 12[r10]
 426 000a E7 A2 04                		mov.L	r2, 16[r10]
 974:../src/wolfcrypt/src/wc_port.c ****     char *s, *tok;
 975:../src/wolfcrypt/src/wc_port.c ****     const char *spanp;
 976:../src/wolfcrypt/src/wc_port.c **** 
 977:../src/wolfcrypt/src/wc_port.c ****     /* null check */
 978:../src/wolfcrypt/src/wc_port.c ****     if (stringp == NULL || *stringp == NULL)
 427                             		.loc 1 978 8
 428 000d ED A5 03                		mov.L	12[r10], r5
 429 0010 61 05                   		cmp	#0, r5
 430 0012 11                      		beq	.L43
 431                             		.loc 1 978 28 discriminator 1
 432 0013 ED A5 03                		mov.L	12[r10], r5
 433 0016 EC 55                   		mov.L	[r5], r5
 434                             		.loc 1 978 25 discriminator 1
 435 0018 61 05                   		cmp	#0, r5
 436 001a 1D                      		bne	.L44
 437                             	.L43:
 979:../src/wolfcrypt/src/wc_port.c ****         return NULL;
 438                             		.loc 1 979 16
 439 001b 66 05                   		mov.L	#0, r5
 440 001d 2E 6A                   		bra	.L45
 441                             	.L44:
 980:../src/wolfcrypt/src/wc_port.c **** 
 981:../src/wolfcrypt/src/wc_port.c ****     s = *stringp;
 442                             		.loc 1 981 7
 443 001f ED A5 03                		mov.L	12[r10], r5
 444 0022 EC 55                   		mov.L	[r5], r5
 445 0024 E7 A5 02                		mov.L	r5, 8[r10]
 982:../src/wolfcrypt/src/wc_port.c ****     for (tok = s; *tok; ++tok) {
 446                             		.loc 1 982 14
 447 0027 ED A5 02                		mov.L	8[r10], r5
 448 002a E3 A5                   		mov.L	r5, [r10]
 449                             		.loc 1 982 5
 450 002c 2E 48                   		bra	.L46
 451                             	.L50:
 983:../src/wolfcrypt/src/wc_port.c ****         for (spanp = delim; *spanp; ++spanp) {
 452                             		.loc 1 983 20
 453 002e ED A5 04                		mov.L	16[r10], r5
 454 0031 E7 A5 01                		mov.L	r5, 4[r10]
 455                             		.loc 1 983 9
 456 0034 2E 2F                   		bra	.L47
 457                             	.L49:
 984:../src/wolfcrypt/src/wc_port.c ****             /* found delimiter */
 985:../src/wolfcrypt/src/wc_port.c ****             if (*tok == *spanp) {
 458                             		.loc 1 985 17
 459 0036 EC A5                   		mov.L	[r10], r5
 460 0038 CC 54                   		mov.B	[r5], r4
 461                             		.loc 1 985 22
 462 003a ED A5 01                		mov.L	4[r10], r5
 463 003d CC 55                   		mov.B	[r5], r5
 464                             		.loc 1 985 16
 465 003f 5B 44                   		movu.B	r4, r4
 466 0041 5B 55                   		movu.B	r5, r5
 467 0043 47 54                   		cmp	r5, r4
 468 0045 21 16                   		bne	.L48
 986:../src/wolfcrypt/src/wc_port.c ****                 *tok = '\0'; /* replace delim with null term */
 469                             		.loc 1 986 22
 470 0047 EC A5                   		mov.L	[r10], r5
 471 0049 F8 54 00                		mov.B	#0, [r5]
 987:../src/wolfcrypt/src/wc_port.c ****                 *stringp = tok + 1; /* return past delim */
 472                             		.loc 1 987 32
 473 004c EC A5                   		mov.L	[r10], r5
 474 004e 71 54 01                		add	#1, r5, r4
 475                             		.loc 1 987 26
 476 0051 ED A5 03                		mov.L	12[r10], r5
 477 0054 E3 54                   		mov.L	r4, [r5]
 988:../src/wolfcrypt/src/wc_port.c ****                 return s;
 478                             		.loc 1 988 24
 479 0056 ED A5 02                		mov.L	8[r10], r5
 480 0059 2E 2E                   		bra	.L45
 481                             	.L48:
 983:../src/wolfcrypt/src/wc_port.c ****             /* found delimiter */
 482                             		.loc 1 983 37 discriminator 2
 483 005b ED A5 01                		mov.L	4[r10], r5
 484 005e 62 15                   		add	#1, r5
 485 0060 E7 A5 01                		mov.L	r5, 4[r10]
 486                             	.L47:
 983:../src/wolfcrypt/src/wc_port.c ****             /* found delimiter */
 487                             		.loc 1 983 29 discriminator 1
 488 0063 ED A5 01                		mov.L	4[r10], r5
 489 0066 CC 55                   		mov.B	[r5], r5
 983:../src/wolfcrypt/src/wc_port.c ****             /* found delimiter */
 490                             		.loc 1 983 9 discriminator 1
 491 0068 5B 55                   		movu.B	r5, r5
 492 006a 61 05                   		cmp	#0, r5
 493 006c 21 CA                   		bne	.L49
 982:../src/wolfcrypt/src/wc_port.c ****         for (spanp = delim; *spanp; ++spanp) {
 494                             		.loc 1 982 25 discriminator 2
 495 006e EC A5                   		mov.L	[r10], r5
 496 0070 62 15                   		add	#1, r5
 497 0072 E3 A5                   		mov.L	r5, [r10]
 498                             	.L46:
 982:../src/wolfcrypt/src/wc_port.c ****         for (spanp = delim; *spanp; ++spanp) {
 499                             		.loc 1 982 19 discriminator 1
 500 0074 EC A5                   		mov.L	[r10], r5
 501 0076 CC 55                   		mov.B	[r5], r5
 982:../src/wolfcrypt/src/wc_port.c ****         for (spanp = delim; *spanp; ++spanp) {
 502                             		.loc 1 982 5 discriminator 1
 503 0078 5B 55                   		movu.B	r5, r5
 504 007a 61 05                   		cmp	#0, r5
 505 007c 21 B2                   		bne	.L50
 989:../src/wolfcrypt/src/wc_port.c ****             }
 990:../src/wolfcrypt/src/wc_port.c ****         }
 991:../src/wolfcrypt/src/wc_port.c ****     }
 992:../src/wolfcrypt/src/wc_port.c **** 
 993:../src/wolfcrypt/src/wc_port.c ****     *stringp = NULL;
 506                             		.loc 1 993 14
 507 007e ED A5 03                		mov.L	12[r10], r5
 508 0081 F8 56 00                		mov.L	#0, [r5]
 994:../src/wolfcrypt/src/wc_port.c ****     return s;
 509                             		.loc 1 994 12
 510 0084 ED A5 02                		mov.L	8[r10], r5
 511                             	.L45:
 995:../src/wolfcrypt/src/wc_port.c **** }
 512                             		.loc 1 995 1
 513 0087 EF 51                   		mov.L	r5, r1
 514 0089 3F AA 06                		rtsd	#24, r10-r10
 515                             	.LFE5:
 517                             		.section	.text.wc_strlcpy,"ax",@progbits
 518                             		.global	_wc_strlcpy
 520                             	_wc_strlcpy:
 521                             	.LFB6:
 996:../src/wolfcrypt/src/wc_port.c **** #endif /* USE_WOLF_STRSEP */
 997:../src/wolfcrypt/src/wc_port.c **** 
 998:../src/wolfcrypt/src/wc_port.c **** #ifdef USE_WOLF_STRLCPY
 999:../src/wolfcrypt/src/wc_port.c **** size_t wc_strlcpy(char *dst, const char *src, size_t dstSize)
1000:../src/wolfcrypt/src/wc_port.c **** {
 522                             		.loc 1 1000 1
 523 0000 7E AA                   		push.l	r10
 524                             	.LCFI10:
 525 0002 71 0A F0                		add	#-16, r0, r10
 526                             	.LCFI11:
 527 0005 EF A0                   		mov.L	r10, r0
 528 0007 E7 A1 01                		mov.L	r1, 4[r10]
 529 000a E7 A2 02                		mov.L	r2, 8[r10]
 530 000d E7 A3 03                		mov.L	r3, 12[r10]
1001:../src/wolfcrypt/src/wc_port.c ****     size_t i;
1002:../src/wolfcrypt/src/wc_port.c **** 
1003:../src/wolfcrypt/src/wc_port.c ****     if (!dstSize)
 531                             		.loc 1 1003 8
 532 0010 ED A5 03                		mov.L	12[r10], r5
 533 0013 61 05                   		cmp	#0, r5
 534 0015 1D                      		bne	.L52
1004:../src/wolfcrypt/src/wc_port.c ****         return 0;
 535                             		.loc 1 1004 16
 536 0016 66 05                   		mov.L	#0, r5
 537 0018 2E 41                   		bra	.L53
 538                             	.L52:
1005:../src/wolfcrypt/src/wc_port.c **** 
1006:../src/wolfcrypt/src/wc_port.c ****     /* Always have to leave a space for NULL */
1007:../src/wolfcrypt/src/wc_port.c ****     for (i = 0; i < (dstSize - 1) && *src != '\0'; i++) {
 539                             		.loc 1 1007 12
 540 001a F8 A6 00                		mov.L	#0, [r10]
 541                             		.loc 1 1007 5
 542 001d 2E 1E                   		bra	.L54
 543                             	.L56:
1008:../src/wolfcrypt/src/wc_port.c ****         *dst++ = *src++;
 544                             		.loc 1 1008 22 discriminator 4
 545 001f ED A4 02                		mov.L	8[r10], r4
 546 0022 71 45 01                		add	#1, r4, r5
 547 0025 E7 A5 02                		mov.L	r5, 8[r10]
 548                             		.loc 1 1008 13 discriminator 4
 549 0028 ED A5 01                		mov.L	4[r10], r5
 550 002b 71 53 01                		add	#1, r5, r3
 551 002e E7 A3 01                		mov.L	r3, 4[r10]
 552                             		.loc 1 1008 18 discriminator 4
 553 0031 CC 44                   		mov.B	[r4], r4
 554                             		.loc 1 1008 16 discriminator 4
 555 0033 C3 54                   		mov.B	r4, [r5]
1007:../src/wolfcrypt/src/wc_port.c ****         *dst++ = *src++;
 556                             		.loc 1 1007 53 discriminator 4
 557 0035 EC A5                   		mov.L	[r10], r5
 558 0037 62 15                   		add	#1, r5
 559 0039 E3 A5                   		mov.L	r5, [r10]
 560                             	.L54:
1007:../src/wolfcrypt/src/wc_port.c ****         *dst++ = *src++;
 561                             		.loc 1 1007 30 discriminator 1
 562 003b ED A5 03                		mov.L	12[r10], r5
 563 003e 60 15                   		sub	#1, r5
1007:../src/wolfcrypt/src/wc_port.c ****         *dst++ = *src++;
 564                             		.loc 1 1007 5 discriminator 1
 565 0040 EC A4                   		mov.L	[r10], r4
 566 0042 47 54                   		cmp	r5, r4
 567 0044 22 0D                   		bgeu	.L55
1007:../src/wolfcrypt/src/wc_port.c ****         *dst++ = *src++;
 568                             		.loc 1 1007 38 discriminator 3
 569 0046 ED A5 02                		mov.L	8[r10], r5
 570 0049 CC 55                   		mov.B	[r5], r5
1007:../src/wolfcrypt/src/wc_port.c ****         *dst++ = *src++;
 571                             		.loc 1 1007 35 discriminator 3
 572 004b 5B 55                   		movu.B	r5, r5
 573 004d 61 05                   		cmp	#0, r5
 574 004f 21 D0                   		bne	.L56
 575                             	.L55:
1009:../src/wolfcrypt/src/wc_port.c ****     }
1010:../src/wolfcrypt/src/wc_port.c ****     *dst = '\0';
 576                             		.loc 1 1010 10
 577 0051 ED A5 01                		mov.L	4[r10], r5
 578 0054 F8 54 00                		mov.B	#0, [r5]
1011:../src/wolfcrypt/src/wc_port.c **** 
1012:../src/wolfcrypt/src/wc_port.c ****     return i; /* return length without NULL */
 579                             		.loc 1 1012 12
 580 0057 EC A5                   		mov.L	[r10], r5
 581                             	.L53:
1013:../src/wolfcrypt/src/wc_port.c **** }
 582                             		.loc 1 1013 1
 583 0059 EF 51                   		mov.L	r5, r1
 584 005b 3F AA 05                		rtsd	#20, r10-r10
 585                             	.LFE6:
 587                             		.section	.text.wc_strlcat,"ax",@progbits
 588                             		.global	_wc_strlcat
 590                             	_wc_strlcat:
 591                             	.LFB7:
1014:../src/wolfcrypt/src/wc_port.c **** #endif /* USE_WOLF_STRLCPY */
1015:../src/wolfcrypt/src/wc_port.c **** 
1016:../src/wolfcrypt/src/wc_port.c **** #ifdef USE_WOLF_STRLCAT
1017:../src/wolfcrypt/src/wc_port.c **** size_t wc_strlcat(char *dst, const char *src, size_t dstSize)
1018:../src/wolfcrypt/src/wc_port.c **** {
 592                             		.loc 1 1018 1
 593 0000 7E AA                   		push.l	r10
 594                             	.LCFI12:
 595 0002 71 0A F0                		add	#-16, r0, r10
 596                             	.LCFI13:
 597 0005 EF A0                   		mov.L	r10, r0
 598 0007 E7 A1 01                		mov.L	r1, 4[r10]
 599 000a E7 A2 02                		mov.L	r2, 8[r10]
 600 000d E7 A3 03                		mov.L	r3, 12[r10]
1019:../src/wolfcrypt/src/wc_port.c ****     size_t dstLen;
1020:../src/wolfcrypt/src/wc_port.c **** 
1021:../src/wolfcrypt/src/wc_port.c ****     if (!dstSize)
 601                             		.loc 1 1021 8
 602 0010 ED A5 03                		mov.L	12[r10], r5
 603 0013 61 05                   		cmp	#0, r5
 604 0015 1D                      		bne	.L58
1022:../src/wolfcrypt/src/wc_port.c ****         return 0;
 605                             		.loc 1 1022 16
 606 0016 66 05                   		mov.L	#0, r5
 607 0018 2E 40                   		bra	.L59
 608                             	.L58:
1023:../src/wolfcrypt/src/wc_port.c **** 
1024:../src/wolfcrypt/src/wc_port.c ****     dstLen = XSTRLEN(dst);
 609                             		.loc 1 1024 14
 610 001a ED A1 01                		mov.L	4[r10], r1
 611 001d 05 00 00 00             		bsr	_strlen
 612 0021 E3 A1                   		mov.L	r1, [r10]
1025:../src/wolfcrypt/src/wc_port.c **** 
1026:../src/wolfcrypt/src/wc_port.c ****     if (dstSize < dstLen)
 613                             		.loc 1 1026 8
 614 0023 ED A4 03                		mov.L	12[r10], r4
 615 0026 EC A5                   		mov.L	[r10], r5
 616 0028 47 54                   		cmp	r5, r4
 617 002a 22 10                   		bgeu	.L60
1027:../src/wolfcrypt/src/wc_port.c ****         return dstLen + XSTRLEN(src);
 618                             		.loc 1 1027 25
 619 002c ED A1 02                		mov.L	8[r10], r1
 620 002f 05 00 00 00             		bsr	_strlen
 621 0033 EF 15                   		mov.L	r1, r5
 622                             		.loc 1 1027 23
 623 0035 06 88 A5                		add	[r10].L, r5
 624 0038 2E 20                   		bra	.L59
 625                             	.L60:
1028:../src/wolfcrypt/src/wc_port.c **** 
1029:../src/wolfcrypt/src/wc_port.c ****     return dstLen + wc_strlcpy(dst + dstLen, src, dstSize - dstLen);
 626                             		.loc 1 1029 21
 627 003a ED A5 01                		mov.L	4[r10], r5
 628 003d EF 51                   		mov.L	r5, r1
 629 003f 06 88 A1                		add	[r10].L, r1
 630 0042 ED A4 03                		mov.L	12[r10], r4
 631 0045 EC A5                   		mov.L	[r10], r5
 632 0047 FF 05 54                		sub	r5, r4, r5
 633 004a EF 53                   		mov.L	r5, r3
 634 004c ED A2 02                		mov.L	8[r10], r2
 635 004f 05 00 00 00             		bsr	_wc_strlcpy
 636 0053 EF 15                   		mov.L	r1, r5
 637                             		.loc 1 1029 19
 638 0055 06 88 A5                		add	[r10].L, r5
 639                             	.L59:
1030:../src/wolfcrypt/src/wc_port.c **** }
 640                             		.loc 1 1030 1
 641 0058 EF 51                   		mov.L	r5, r1
 642 005a 3F AA 05                		rtsd	#20, r10-r10
 643                             	.LFE7:
 645                             		.section	.text.wc_InitMutex,"ax",@progbits
 646                             		.global	_wc_InitMutex
 648                             	_wc_InitMutex:
 649                             	.LFB8:
1031:../src/wolfcrypt/src/wc_port.c **** #endif /* USE_WOLF_STRLCAT */
1032:../src/wolfcrypt/src/wc_port.c **** 
1033:../src/wolfcrypt/src/wc_port.c **** #ifndef SINGLE_THREADED
1034:../src/wolfcrypt/src/wc_port.c **** /* TODO: use atomic operations instead of mutex */
1035:../src/wolfcrypt/src/wc_port.c **** void wolfSSL_RefInit(wolfSSL_Ref* ref, int* err)
1036:../src/wolfcrypt/src/wc_port.c **** {
1037:../src/wolfcrypt/src/wc_port.c ****     int ret = wc_InitMutex(&ref->mutex);
1038:../src/wolfcrypt/src/wc_port.c ****     if (ret != 0) {
1039:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("Failed to create mutex for reference counting!");
1040:../src/wolfcrypt/src/wc_port.c ****     }
1041:../src/wolfcrypt/src/wc_port.c ****     ref->count = 1;
1042:../src/wolfcrypt/src/wc_port.c **** 
1043:../src/wolfcrypt/src/wc_port.c ****     *err = ret;
1044:../src/wolfcrypt/src/wc_port.c **** }
1045:../src/wolfcrypt/src/wc_port.c **** 
1046:../src/wolfcrypt/src/wc_port.c **** void wolfSSL_RefFree(wolfSSL_Ref* ref)
1047:../src/wolfcrypt/src/wc_port.c **** {
1048:../src/wolfcrypt/src/wc_port.c ****     if (wc_FreeMutex(&ref->mutex) != 0) {
1049:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("Failed to free mutex of reference counting!");
1050:../src/wolfcrypt/src/wc_port.c ****     }
1051:../src/wolfcrypt/src/wc_port.c **** }
1052:../src/wolfcrypt/src/wc_port.c **** 
1053:../src/wolfcrypt/src/wc_port.c **** void wolfSSL_RefInc(wolfSSL_Ref* ref, int* err)
1054:../src/wolfcrypt/src/wc_port.c **** {
1055:../src/wolfcrypt/src/wc_port.c ****     int ret = wc_LockMutex(&ref->mutex);
1056:../src/wolfcrypt/src/wc_port.c ****     if (ret != 0) {
1057:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("Failed to lock mutex for reference increment!");
1058:../src/wolfcrypt/src/wc_port.c ****     }
1059:../src/wolfcrypt/src/wc_port.c ****     else {
1060:../src/wolfcrypt/src/wc_port.c ****         ref->count++;
1061:../src/wolfcrypt/src/wc_port.c ****         wc_UnLockMutex(&ref->mutex);
1062:../src/wolfcrypt/src/wc_port.c ****     }
1063:../src/wolfcrypt/src/wc_port.c ****     *err = ret;
1064:../src/wolfcrypt/src/wc_port.c **** }
1065:../src/wolfcrypt/src/wc_port.c **** 
1066:../src/wolfcrypt/src/wc_port.c **** void wolfSSL_RefDec(wolfSSL_Ref* ref, int* isZero, int* err)
1067:../src/wolfcrypt/src/wc_port.c **** {
1068:../src/wolfcrypt/src/wc_port.c ****     int ret = wc_LockMutex(&ref->mutex);
1069:../src/wolfcrypt/src/wc_port.c ****     if (ret != 0) {
1070:../src/wolfcrypt/src/wc_port.c ****         WOLFSSL_MSG("Failed to lock mutex for reference decrement!");
1071:../src/wolfcrypt/src/wc_port.c ****     }
1072:../src/wolfcrypt/src/wc_port.c ****     else {
1073:../src/wolfcrypt/src/wc_port.c ****         ref->count--;
1074:../src/wolfcrypt/src/wc_port.c ****         *isZero = (ref->count == 0);
1075:../src/wolfcrypt/src/wc_port.c ****         wc_UnLockMutex(&ref->mutex);
1076:../src/wolfcrypt/src/wc_port.c ****     }
1077:../src/wolfcrypt/src/wc_port.c ****     *err = ret;
1078:../src/wolfcrypt/src/wc_port.c **** }
1079:../src/wolfcrypt/src/wc_port.c **** #endif
1080:../src/wolfcrypt/src/wc_port.c **** 
1081:../src/wolfcrypt/src/wc_port.c **** #if WOLFSSL_CRYPT_HW_MUTEX
1082:../src/wolfcrypt/src/wc_port.c **** /* Mutex for protection of cryptography hardware */
1083:../src/wolfcrypt/src/wc_port.c **** static wolfSSL_Mutex wcCryptHwMutex;
1084:../src/wolfcrypt/src/wc_port.c **** static int wcCryptHwMutexInit = 0;
1085:../src/wolfcrypt/src/wc_port.c **** 
1086:../src/wolfcrypt/src/wc_port.c **** int wolfSSL_CryptHwMutexInit(void)
1087:../src/wolfcrypt/src/wc_port.c **** {
1088:../src/wolfcrypt/src/wc_port.c ****     int ret = 0;
1089:../src/wolfcrypt/src/wc_port.c ****     if (wcCryptHwMutexInit == 0) {
1090:../src/wolfcrypt/src/wc_port.c ****         ret = wc_InitMutex(&wcCryptHwMutex);
1091:../src/wolfcrypt/src/wc_port.c ****         if (ret == 0) {
1092:../src/wolfcrypt/src/wc_port.c ****             wcCryptHwMutexInit = 1;
1093:../src/wolfcrypt/src/wc_port.c ****         }
1094:../src/wolfcrypt/src/wc_port.c ****     }
1095:../src/wolfcrypt/src/wc_port.c ****     return ret;
1096:../src/wolfcrypt/src/wc_port.c **** }
1097:../src/wolfcrypt/src/wc_port.c **** int wolfSSL_CryptHwMutexLock(void)
1098:../src/wolfcrypt/src/wc_port.c **** {
1099:../src/wolfcrypt/src/wc_port.c ****     int ret = BAD_MUTEX_E;
1100:../src/wolfcrypt/src/wc_port.c ****     /* Make sure HW Mutex has been initialized */
1101:../src/wolfcrypt/src/wc_port.c ****     ret = wolfSSL_CryptHwMutexInit();
1102:../src/wolfcrypt/src/wc_port.c ****     if (ret == 0) {
1103:../src/wolfcrypt/src/wc_port.c ****         ret = wc_LockMutex(&wcCryptHwMutex);
1104:../src/wolfcrypt/src/wc_port.c ****     }
1105:../src/wolfcrypt/src/wc_port.c ****     return ret;
1106:../src/wolfcrypt/src/wc_port.c **** }
1107:../src/wolfcrypt/src/wc_port.c **** int wolfSSL_CryptHwMutexUnLock(void)
1108:../src/wolfcrypt/src/wc_port.c **** {
1109:../src/wolfcrypt/src/wc_port.c ****     int ret = BAD_MUTEX_E;
1110:../src/wolfcrypt/src/wc_port.c ****     if (wcCryptHwMutexInit) {
1111:../src/wolfcrypt/src/wc_port.c ****         ret = wc_UnLockMutex(&wcCryptHwMutex);
1112:../src/wolfcrypt/src/wc_port.c ****     }
1113:../src/wolfcrypt/src/wc_port.c ****     return ret;
1114:../src/wolfcrypt/src/wc_port.c **** }
1115:../src/wolfcrypt/src/wc_port.c **** #endif /* WOLFSSL_CRYPT_HW_MUTEX */
1116:../src/wolfcrypt/src/wc_port.c **** 
1117:../src/wolfcrypt/src/wc_port.c **** 
1118:../src/wolfcrypt/src/wc_port.c **** /* ---------------------------------------------------------------------------*/
1119:../src/wolfcrypt/src/wc_port.c **** /* Mutex Ports */
1120:../src/wolfcrypt/src/wc_port.c **** /* ---------------------------------------------------------------------------*/
1121:../src/wolfcrypt/src/wc_port.c **** #if defined(OPENSSL_EXTRA) || defined(HAVE_WEBSERVER)
1122:../src/wolfcrypt/src/wc_port.c ****     static mutex_cb*     compat_mutex_cb = NULL;
1123:../src/wolfcrypt/src/wc_port.c **** 
1124:../src/wolfcrypt/src/wc_port.c ****     /* Function that locks or unlocks a mutex based on the flag passed in.
1125:../src/wolfcrypt/src/wc_port.c ****      *
1126:../src/wolfcrypt/src/wc_port.c ****      * flag lock or unlock i.e. CRYPTO_LOCK
1127:../src/wolfcrypt/src/wc_port.c ****      * type the type of lock to unlock or lock
1128:../src/wolfcrypt/src/wc_port.c ****      * file name of the file calling
1129:../src/wolfcrypt/src/wc_port.c ****      * line the line number from file calling
1130:../src/wolfcrypt/src/wc_port.c ****      */
1131:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex_ex(int flag, int type, const char* file, int line)
1132:../src/wolfcrypt/src/wc_port.c ****     {
1133:../src/wolfcrypt/src/wc_port.c ****         if (compat_mutex_cb != NULL) {
1134:../src/wolfcrypt/src/wc_port.c ****             compat_mutex_cb(flag, type, file, line);
1135:../src/wolfcrypt/src/wc_port.c ****             return 0;
1136:../src/wolfcrypt/src/wc_port.c ****         }
1137:../src/wolfcrypt/src/wc_port.c ****         else {
1138:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("Mutex call back function not set. Call wc_SetMutexCb");
1139:../src/wolfcrypt/src/wc_port.c ****             return BAD_STATE_E;
1140:../src/wolfcrypt/src/wc_port.c ****         }
1141:../src/wolfcrypt/src/wc_port.c ****     }
1142:../src/wolfcrypt/src/wc_port.c **** 
1143:../src/wolfcrypt/src/wc_port.c **** 
1144:../src/wolfcrypt/src/wc_port.c ****     /* Set the callback function to use for locking/unlocking mutex
1145:../src/wolfcrypt/src/wc_port.c ****      *
1146:../src/wolfcrypt/src/wc_port.c ****      * cb callback function to use
1147:../src/wolfcrypt/src/wc_port.c ****      */
1148:../src/wolfcrypt/src/wc_port.c ****     int wc_SetMutexCb(mutex_cb* cb)
1149:../src/wolfcrypt/src/wc_port.c ****     {
1150:../src/wolfcrypt/src/wc_port.c ****         compat_mutex_cb = cb;
1151:../src/wolfcrypt/src/wc_port.c ****         return 0;
1152:../src/wolfcrypt/src/wc_port.c ****     }
1153:../src/wolfcrypt/src/wc_port.c **** #endif /* defined(OPENSSL_EXTRA) || defined(HAVE_WEBSERVER) */
1154:../src/wolfcrypt/src/wc_port.c **** #ifdef SINGLE_THREADED
1155:../src/wolfcrypt/src/wc_port.c **** 
1156:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1157:../src/wolfcrypt/src/wc_port.c ****     {
 650                             		.loc 1 1157 5
 651 0000 7E AA                   		push.l	r10
 652                             	.LCFI14:
 653 0002 71 0A FC                		add	#-4, r0, r10
 654                             	.LCFI15:
 655 0005 EF A0                   		mov.L	r10, r0
 656 0007 E3 A1                   		mov.L	r1, [r10]
1158:../src/wolfcrypt/src/wc_port.c ****         (void)m;
1159:../src/wolfcrypt/src/wc_port.c ****         return 0;
 657                             		.loc 1 1159 16
 658 0009 66 05                   		mov.L	#0, r5
1160:../src/wolfcrypt/src/wc_port.c ****     }
 659                             		.loc 1 1160 5
 660 000b EF 51                   		mov.L	r5, r1
 661 000d 3F AA 02                		rtsd	#8, r10-r10
 662                             	.LFE8:
 664                             		.section	.text.wc_FreeMutex,"ax",@progbits
 665                             		.global	_wc_FreeMutex
 667                             	_wc_FreeMutex:
 668                             	.LFB9:
1161:../src/wolfcrypt/src/wc_port.c **** 
1162:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex *m)
1163:../src/wolfcrypt/src/wc_port.c ****     {
 669                             		.loc 1 1163 5
 670 0000 7E AA                   		push.l	r10
 671                             	.LCFI16:
 672 0002 71 0A FC                		add	#-4, r0, r10
 673                             	.LCFI17:
 674 0005 EF A0                   		mov.L	r10, r0
 675 0007 E3 A1                   		mov.L	r1, [r10]
1164:../src/wolfcrypt/src/wc_port.c ****         (void)m;
1165:../src/wolfcrypt/src/wc_port.c ****         return 0;
 676                             		.loc 1 1165 16
 677 0009 66 05                   		mov.L	#0, r5
1166:../src/wolfcrypt/src/wc_port.c ****     }
 678                             		.loc 1 1166 5
 679 000b EF 51                   		mov.L	r5, r1
 680 000d 3F AA 02                		rtsd	#8, r10-r10
 681                             	.LFE9:
 683                             		.section	.text.wc_LockMutex,"ax",@progbits
 684                             		.global	_wc_LockMutex
 686                             	_wc_LockMutex:
 687                             	.LFB10:
1167:../src/wolfcrypt/src/wc_port.c **** 
1168:../src/wolfcrypt/src/wc_port.c **** 
1169:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex *m)
1170:../src/wolfcrypt/src/wc_port.c ****     {
 688                             		.loc 1 1170 5
 689 0000 7E AA                   		push.l	r10
 690                             	.LCFI18:
 691 0002 71 0A FC                		add	#-4, r0, r10
 692                             	.LCFI19:
 693 0005 EF A0                   		mov.L	r10, r0
 694 0007 E3 A1                   		mov.L	r1, [r10]
1171:../src/wolfcrypt/src/wc_port.c ****         (void)m;
1172:../src/wolfcrypt/src/wc_port.c ****         return 0;
 695                             		.loc 1 1172 16
 696 0009 66 05                   		mov.L	#0, r5
1173:../src/wolfcrypt/src/wc_port.c ****     }
 697                             		.loc 1 1173 5
 698 000b EF 51                   		mov.L	r5, r1
 699 000d 3F AA 02                		rtsd	#8, r10-r10
 700                             	.LFE10:
 702                             		.section	.text.wc_UnLockMutex,"ax",@progbits
 703                             		.global	_wc_UnLockMutex
 705                             	_wc_UnLockMutex:
 706                             	.LFB11:
1174:../src/wolfcrypt/src/wc_port.c **** 
1175:../src/wolfcrypt/src/wc_port.c **** 
1176:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex *m)
1177:../src/wolfcrypt/src/wc_port.c ****     {
 707                             		.loc 1 1177 5
 708 0000 7E AA                   		push.l	r10
 709                             	.LCFI20:
 710 0002 71 0A FC                		add	#-4, r0, r10
 711                             	.LCFI21:
 712 0005 EF A0                   		mov.L	r10, r0
 713 0007 E3 A1                   		mov.L	r1, [r10]
1178:../src/wolfcrypt/src/wc_port.c ****         (void)m;
1179:../src/wolfcrypt/src/wc_port.c ****         return 0;
 714                             		.loc 1 1179 16
 715 0009 66 05                   		mov.L	#0, r5
1180:../src/wolfcrypt/src/wc_port.c ****     }
 716                             		.loc 1 1180 5
 717 000b EF 51                   		mov.L	r5, r1
 718 000d 3F AA 02                		rtsd	#8, r10-r10
 719                             	.LFE11:
 721                             		.section	.text.mystrnstr,"ax",@progbits
 722                             		.global	_mystrnstr
 724                             	_mystrnstr:
 725                             	.LFB12:
1181:../src/wolfcrypt/src/wc_port.c **** 
1182:../src/wolfcrypt/src/wc_port.c **** #elif defined(FREERTOS) || defined(FREERTOS_TCP) || \
1183:../src/wolfcrypt/src/wc_port.c ****   defined(FREESCALE_FREE_RTOS)
1184:../src/wolfcrypt/src/wc_port.c **** 
1185:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1186:../src/wolfcrypt/src/wc_port.c ****     {
1187:../src/wolfcrypt/src/wc_port.c ****         int iReturn;
1188:../src/wolfcrypt/src/wc_port.c **** 
1189:../src/wolfcrypt/src/wc_port.c ****         *m = ( wolfSSL_Mutex ) xSemaphoreCreateMutex();
1190:../src/wolfcrypt/src/wc_port.c ****         if( *m != NULL )
1191:../src/wolfcrypt/src/wc_port.c ****             iReturn = 0;
1192:../src/wolfcrypt/src/wc_port.c ****         else
1193:../src/wolfcrypt/src/wc_port.c ****             iReturn = BAD_MUTEX_E;
1194:../src/wolfcrypt/src/wc_port.c **** 
1195:../src/wolfcrypt/src/wc_port.c ****         return iReturn;
1196:../src/wolfcrypt/src/wc_port.c ****     }
1197:../src/wolfcrypt/src/wc_port.c **** 
1198:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1199:../src/wolfcrypt/src/wc_port.c ****     {
1200:../src/wolfcrypt/src/wc_port.c ****         vSemaphoreDelete( *m );
1201:../src/wolfcrypt/src/wc_port.c ****         return 0;
1202:../src/wolfcrypt/src/wc_port.c ****     }
1203:../src/wolfcrypt/src/wc_port.c **** 
1204:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1205:../src/wolfcrypt/src/wc_port.c ****     {
1206:../src/wolfcrypt/src/wc_port.c ****         /* Assume an infinite block, or should there be zero block? */
1207:../src/wolfcrypt/src/wc_port.c ****         xSemaphoreTake( *m, portMAX_DELAY );
1208:../src/wolfcrypt/src/wc_port.c ****         return 0;
1209:../src/wolfcrypt/src/wc_port.c ****     }
1210:../src/wolfcrypt/src/wc_port.c **** 
1211:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1212:../src/wolfcrypt/src/wc_port.c ****     {
1213:../src/wolfcrypt/src/wc_port.c ****         xSemaphoreGive( *m );
1214:../src/wolfcrypt/src/wc_port.c ****         return 0;
1215:../src/wolfcrypt/src/wc_port.c ****     }
1216:../src/wolfcrypt/src/wc_port.c **** 
1217:../src/wolfcrypt/src/wc_port.c **** #elif defined(RTTHREAD)
1218:../src/wolfcrypt/src/wc_port.c **** 
1219:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1220:../src/wolfcrypt/src/wc_port.c ****     {
1221:../src/wolfcrypt/src/wc_port.c ****         int iReturn;
1222:../src/wolfcrypt/src/wc_port.c **** 
1223:../src/wolfcrypt/src/wc_port.c ****         *m = ( wolfSSL_Mutex ) rt_mutex_create("mutex",RT_IPC_FLAG_FIFO);
1224:../src/wolfcrypt/src/wc_port.c ****         if( *m != NULL )
1225:../src/wolfcrypt/src/wc_port.c ****             iReturn = 0;
1226:../src/wolfcrypt/src/wc_port.c ****         else
1227:../src/wolfcrypt/src/wc_port.c ****             iReturn = BAD_MUTEX_E;
1228:../src/wolfcrypt/src/wc_port.c **** 
1229:../src/wolfcrypt/src/wc_port.c **** 
1230:../src/wolfcrypt/src/wc_port.c ****         return iReturn;
1231:../src/wolfcrypt/src/wc_port.c ****     }
1232:../src/wolfcrypt/src/wc_port.c **** 
1233:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1234:../src/wolfcrypt/src/wc_port.c ****     {
1235:../src/wolfcrypt/src/wc_port.c ****         rt_mutex_delete( *m );
1236:../src/wolfcrypt/src/wc_port.c ****         return 0;
1237:../src/wolfcrypt/src/wc_port.c ****     }
1238:../src/wolfcrypt/src/wc_port.c **** 
1239:../src/wolfcrypt/src/wc_port.c **** 
1240:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1241:../src/wolfcrypt/src/wc_port.c ****     {
1242:../src/wolfcrypt/src/wc_port.c ****         /* Assume an infinite block, or should there be zero block? */
1243:../src/wolfcrypt/src/wc_port.c ****         return rt_mutex_take( *m, RT_WAITING_FOREVER );
1244:../src/wolfcrypt/src/wc_port.c ****     }
1245:../src/wolfcrypt/src/wc_port.c **** 
1246:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1247:../src/wolfcrypt/src/wc_port.c ****     {
1248:../src/wolfcrypt/src/wc_port.c ****         return rt_mutex_release( *m );
1249:../src/wolfcrypt/src/wc_port.c ****     }
1250:../src/wolfcrypt/src/wc_port.c **** 
1251:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_SAFERTOS)
1252:../src/wolfcrypt/src/wc_port.c **** 
1253:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1254:../src/wolfcrypt/src/wc_port.c ****     {
1255:../src/wolfcrypt/src/wc_port.c ****         vSemaphoreCreateBinary(m->mutexBuffer, m->mutex);
1256:../src/wolfcrypt/src/wc_port.c ****         if (m->mutex == NULL)
1257:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1258:../src/wolfcrypt/src/wc_port.c **** 
1259:../src/wolfcrypt/src/wc_port.c ****         return 0;
1260:../src/wolfcrypt/src/wc_port.c ****     }
1261:../src/wolfcrypt/src/wc_port.c **** 
1262:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1263:../src/wolfcrypt/src/wc_port.c ****     {
1264:../src/wolfcrypt/src/wc_port.c ****         (void)m;
1265:../src/wolfcrypt/src/wc_port.c ****         return 0;
1266:../src/wolfcrypt/src/wc_port.c ****     }
1267:../src/wolfcrypt/src/wc_port.c **** 
1268:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1269:../src/wolfcrypt/src/wc_port.c ****     {
1270:../src/wolfcrypt/src/wc_port.c ****         /* Assume an infinite block */
1271:../src/wolfcrypt/src/wc_port.c ****         xSemaphoreTake(m->mutex, portMAX_DELAY);
1272:../src/wolfcrypt/src/wc_port.c ****         return 0;
1273:../src/wolfcrypt/src/wc_port.c ****     }
1274:../src/wolfcrypt/src/wc_port.c **** 
1275:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1276:../src/wolfcrypt/src/wc_port.c ****     {
1277:../src/wolfcrypt/src/wc_port.c ****         xSemaphoreGive(m->mutex);
1278:../src/wolfcrypt/src/wc_port.c ****         return 0;
1279:../src/wolfcrypt/src/wc_port.c ****     }
1280:../src/wolfcrypt/src/wc_port.c **** 
1281:../src/wolfcrypt/src/wc_port.c **** #elif defined(USE_WINDOWS_API)
1282:../src/wolfcrypt/src/wc_port.c **** 
1283:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1284:../src/wolfcrypt/src/wc_port.c ****     {
1285:../src/wolfcrypt/src/wc_port.c ****         InitializeCriticalSection(m);
1286:../src/wolfcrypt/src/wc_port.c ****         return 0;
1287:../src/wolfcrypt/src/wc_port.c ****     }
1288:../src/wolfcrypt/src/wc_port.c **** 
1289:../src/wolfcrypt/src/wc_port.c **** 
1290:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1291:../src/wolfcrypt/src/wc_port.c ****     {
1292:../src/wolfcrypt/src/wc_port.c ****         DeleteCriticalSection(m);
1293:../src/wolfcrypt/src/wc_port.c ****         return 0;
1294:../src/wolfcrypt/src/wc_port.c ****     }
1295:../src/wolfcrypt/src/wc_port.c **** 
1296:../src/wolfcrypt/src/wc_port.c **** 
1297:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1298:../src/wolfcrypt/src/wc_port.c ****     {
1299:../src/wolfcrypt/src/wc_port.c ****         EnterCriticalSection(m);
1300:../src/wolfcrypt/src/wc_port.c ****         return 0;
1301:../src/wolfcrypt/src/wc_port.c ****     }
1302:../src/wolfcrypt/src/wc_port.c **** 
1303:../src/wolfcrypt/src/wc_port.c **** 
1304:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1305:../src/wolfcrypt/src/wc_port.c ****     {
1306:../src/wolfcrypt/src/wc_port.c ****         LeaveCriticalSection(m);
1307:../src/wolfcrypt/src/wc_port.c ****         return 0;
1308:../src/wolfcrypt/src/wc_port.c ****     }
1309:../src/wolfcrypt/src/wc_port.c **** 
1310:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_PTHREADS)
1311:../src/wolfcrypt/src/wc_port.c **** 
1312:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1313:../src/wolfcrypt/src/wc_port.c ****     {
1314:../src/wolfcrypt/src/wc_port.c ****         if (pthread_mutex_init(m, 0) == 0)
1315:../src/wolfcrypt/src/wc_port.c ****             return 0;
1316:../src/wolfcrypt/src/wc_port.c ****         else
1317:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1318:../src/wolfcrypt/src/wc_port.c ****     }
1319:../src/wolfcrypt/src/wc_port.c **** 
1320:../src/wolfcrypt/src/wc_port.c **** 
1321:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1322:../src/wolfcrypt/src/wc_port.c ****     {
1323:../src/wolfcrypt/src/wc_port.c ****         if (pthread_mutex_destroy(m) == 0)
1324:../src/wolfcrypt/src/wc_port.c ****             return 0;
1325:../src/wolfcrypt/src/wc_port.c ****         else
1326:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1327:../src/wolfcrypt/src/wc_port.c ****     }
1328:../src/wolfcrypt/src/wc_port.c **** 
1329:../src/wolfcrypt/src/wc_port.c **** 
1330:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1331:../src/wolfcrypt/src/wc_port.c ****     {
1332:../src/wolfcrypt/src/wc_port.c ****         if (pthread_mutex_lock(m) == 0)
1333:../src/wolfcrypt/src/wc_port.c ****             return 0;
1334:../src/wolfcrypt/src/wc_port.c ****         else
1335:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1336:../src/wolfcrypt/src/wc_port.c ****     }
1337:../src/wolfcrypt/src/wc_port.c **** 
1338:../src/wolfcrypt/src/wc_port.c **** 
1339:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1340:../src/wolfcrypt/src/wc_port.c ****     {
1341:../src/wolfcrypt/src/wc_port.c ****         if (pthread_mutex_unlock(m) == 0)
1342:../src/wolfcrypt/src/wc_port.c ****             return 0;
1343:../src/wolfcrypt/src/wc_port.c ****         else
1344:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1345:../src/wolfcrypt/src/wc_port.c ****     }
1346:../src/wolfcrypt/src/wc_port.c **** 
1347:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_LINUXKM)
1348:../src/wolfcrypt/src/wc_port.c **** 
1349:../src/wolfcrypt/src/wc_port.c ****     /* Linux kernel mutex routines are voids, alas. */
1350:../src/wolfcrypt/src/wc_port.c **** 
1351:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1352:../src/wolfcrypt/src/wc_port.c ****     {
1353:../src/wolfcrypt/src/wc_port.c ****         mutex_init(m);
1354:../src/wolfcrypt/src/wc_port.c ****         return 0;
1355:../src/wolfcrypt/src/wc_port.c ****     }
1356:../src/wolfcrypt/src/wc_port.c **** 
1357:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1358:../src/wolfcrypt/src/wc_port.c ****     {
1359:../src/wolfcrypt/src/wc_port.c ****         mutex_destroy(m);
1360:../src/wolfcrypt/src/wc_port.c ****         return 0;
1361:../src/wolfcrypt/src/wc_port.c ****     }
1362:../src/wolfcrypt/src/wc_port.c **** 
1363:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1364:../src/wolfcrypt/src/wc_port.c ****     {
1365:../src/wolfcrypt/src/wc_port.c ****         mutex_lock(m);
1366:../src/wolfcrypt/src/wc_port.c ****         return 0;
1367:../src/wolfcrypt/src/wc_port.c ****     }
1368:../src/wolfcrypt/src/wc_port.c **** 
1369:../src/wolfcrypt/src/wc_port.c **** 
1370:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1371:../src/wolfcrypt/src/wc_port.c ****     {
1372:../src/wolfcrypt/src/wc_port.c ****         mutex_unlock(m);
1373:../src/wolfcrypt/src/wc_port.c ****         return 0;
1374:../src/wolfcrypt/src/wc_port.c ****     }
1375:../src/wolfcrypt/src/wc_port.c **** 
1376:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_VXWORKS)
1377:../src/wolfcrypt/src/wc_port.c **** 
1378:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1379:../src/wolfcrypt/src/wc_port.c ****     {
1380:../src/wolfcrypt/src/wc_port.c ****         if (m) {
1381:../src/wolfcrypt/src/wc_port.c ****             if ((*m = semMCreate(0)) != SEM_ID_NULL)
1382:../src/wolfcrypt/src/wc_port.c ****                 return 0;
1383:../src/wolfcrypt/src/wc_port.c ****         }
1384:../src/wolfcrypt/src/wc_port.c ****         return BAD_MUTEX_E;
1385:../src/wolfcrypt/src/wc_port.c ****     }
1386:../src/wolfcrypt/src/wc_port.c **** 
1387:../src/wolfcrypt/src/wc_port.c **** 
1388:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1389:../src/wolfcrypt/src/wc_port.c ****     {
1390:../src/wolfcrypt/src/wc_port.c ****         if (m) {
1391:../src/wolfcrypt/src/wc_port.c ****             if (semDelete(*m) == OK)
1392:../src/wolfcrypt/src/wc_port.c ****                 return 0;
1393:../src/wolfcrypt/src/wc_port.c ****         }
1394:../src/wolfcrypt/src/wc_port.c ****         return BAD_MUTEX_E;
1395:../src/wolfcrypt/src/wc_port.c ****     }
1396:../src/wolfcrypt/src/wc_port.c **** 
1397:../src/wolfcrypt/src/wc_port.c **** 
1398:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1399:../src/wolfcrypt/src/wc_port.c ****     {
1400:../src/wolfcrypt/src/wc_port.c ****         if (m) {
1401:../src/wolfcrypt/src/wc_port.c ****             if (semTake(*m, WAIT_FOREVER) == OK)
1402:../src/wolfcrypt/src/wc_port.c ****                 return 0;
1403:../src/wolfcrypt/src/wc_port.c ****         }
1404:../src/wolfcrypt/src/wc_port.c ****         return BAD_MUTEX_E;
1405:../src/wolfcrypt/src/wc_port.c ****     }
1406:../src/wolfcrypt/src/wc_port.c **** 
1407:../src/wolfcrypt/src/wc_port.c **** 
1408:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1409:../src/wolfcrypt/src/wc_port.c ****     {
1410:../src/wolfcrypt/src/wc_port.c ****         if (m) {
1411:../src/wolfcrypt/src/wc_port.c ****             if (semGive(*m) == OK)
1412:../src/wolfcrypt/src/wc_port.c ****                 return 0;
1413:../src/wolfcrypt/src/wc_port.c ****         }
1414:../src/wolfcrypt/src/wc_port.c ****         return BAD_MUTEX_E;
1415:../src/wolfcrypt/src/wc_port.c ****     }
1416:../src/wolfcrypt/src/wc_port.c **** 
1417:../src/wolfcrypt/src/wc_port.c **** #elif defined(THREADX)
1418:../src/wolfcrypt/src/wc_port.c **** 
1419:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1420:../src/wolfcrypt/src/wc_port.c ****     {
1421:../src/wolfcrypt/src/wc_port.c ****         if (tx_mutex_create(m, "wolfSSL Mutex", TX_NO_INHERIT) == 0)
1422:../src/wolfcrypt/src/wc_port.c ****             return 0;
1423:../src/wolfcrypt/src/wc_port.c ****         else
1424:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1425:../src/wolfcrypt/src/wc_port.c ****     }
1426:../src/wolfcrypt/src/wc_port.c **** 
1427:../src/wolfcrypt/src/wc_port.c **** 
1428:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1429:../src/wolfcrypt/src/wc_port.c ****     {
1430:../src/wolfcrypt/src/wc_port.c ****         if (tx_mutex_delete(m) == 0)
1431:../src/wolfcrypt/src/wc_port.c ****             return 0;
1432:../src/wolfcrypt/src/wc_port.c ****         else
1433:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1434:../src/wolfcrypt/src/wc_port.c ****     }
1435:../src/wolfcrypt/src/wc_port.c **** 
1436:../src/wolfcrypt/src/wc_port.c **** 
1437:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1438:../src/wolfcrypt/src/wc_port.c ****     {
1439:../src/wolfcrypt/src/wc_port.c ****         if (tx_mutex_get(m, TX_WAIT_FOREVER) == 0)
1440:../src/wolfcrypt/src/wc_port.c ****             return 0;
1441:../src/wolfcrypt/src/wc_port.c ****         else
1442:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1443:../src/wolfcrypt/src/wc_port.c ****     }
1444:../src/wolfcrypt/src/wc_port.c **** 
1445:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1446:../src/wolfcrypt/src/wc_port.c ****     {
1447:../src/wolfcrypt/src/wc_port.c ****         if (tx_mutex_put(m) == 0)
1448:../src/wolfcrypt/src/wc_port.c ****             return 0;
1449:../src/wolfcrypt/src/wc_port.c ****         else
1450:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1451:../src/wolfcrypt/src/wc_port.c ****     }
1452:../src/wolfcrypt/src/wc_port.c **** 
1453:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_DEOS)
1454:../src/wolfcrypt/src/wc_port.c **** 
1455:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1456:../src/wolfcrypt/src/wc_port.c ****     {
1457:../src/wolfcrypt/src/wc_port.c ****         mutexStatus mutStat;
1458:../src/wolfcrypt/src/wc_port.c ****         /*
1459:../src/wolfcrypt/src/wc_port.c ****         The empty string "" denotes an anonymous mutex, so objects do not cause name collisions.
1460:../src/wolfcrypt/src/wc_port.c ****         `protectWolfSSLTemp` in an XML configuration element template describing a mutex.
1461:../src/wolfcrypt/src/wc_port.c ****         */
1462:../src/wolfcrypt/src/wc_port.c ****         if (m) {
1463:../src/wolfcrypt/src/wc_port.c ****             mutStat = createMutex("", "protectWolfSSLTemp", m);
1464:../src/wolfcrypt/src/wc_port.c ****             if (mutStat == mutexSuccess)
1465:../src/wolfcrypt/src/wc_port.c ****                 return 0;
1466:../src/wolfcrypt/src/wc_port.c ****             else{
1467:../src/wolfcrypt/src/wc_port.c ****                 WOLFSSL_MSG("wc_InitMutex failed");
1468:../src/wolfcrypt/src/wc_port.c ****                 return mutStat;
1469:../src/wolfcrypt/src/wc_port.c ****             }
1470:../src/wolfcrypt/src/wc_port.c ****         }
1471:../src/wolfcrypt/src/wc_port.c ****         return BAD_MUTEX_E;
1472:../src/wolfcrypt/src/wc_port.c ****     }
1473:../src/wolfcrypt/src/wc_port.c **** 
1474:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1475:../src/wolfcrypt/src/wc_port.c ****     {
1476:../src/wolfcrypt/src/wc_port.c ****         mutexStatus mutStat;
1477:../src/wolfcrypt/src/wc_port.c ****         if (m) {
1478:../src/wolfcrypt/src/wc_port.c ****             mutStat = deleteMutex(*m);
1479:../src/wolfcrypt/src/wc_port.c ****             if (mutStat == mutexSuccess)
1480:../src/wolfcrypt/src/wc_port.c ****                 return 0;
1481:../src/wolfcrypt/src/wc_port.c ****             else{
1482:../src/wolfcrypt/src/wc_port.c ****                 WOLFSSL_MSG("wc_FreeMutex failed");
1483:../src/wolfcrypt/src/wc_port.c ****                 return mutStat;
1484:../src/wolfcrypt/src/wc_port.c ****             }
1485:../src/wolfcrypt/src/wc_port.c ****         }
1486:../src/wolfcrypt/src/wc_port.c ****         return BAD_MUTEX_E;
1487:../src/wolfcrypt/src/wc_port.c ****     }
1488:../src/wolfcrypt/src/wc_port.c **** 
1489:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1490:../src/wolfcrypt/src/wc_port.c ****     {
1491:../src/wolfcrypt/src/wc_port.c ****         mutexStatus mutStat;
1492:../src/wolfcrypt/src/wc_port.c ****         if (m) {
1493:../src/wolfcrypt/src/wc_port.c ****             mutStat = lockMutex(*m);
1494:../src/wolfcrypt/src/wc_port.c ****             if (mutStat == mutexSuccess)
1495:../src/wolfcrypt/src/wc_port.c ****                 return 0;
1496:../src/wolfcrypt/src/wc_port.c ****             else{
1497:../src/wolfcrypt/src/wc_port.c ****                 WOLFSSL_MSG("wc_LockMutex failed");
1498:../src/wolfcrypt/src/wc_port.c ****                 return mutStat;
1499:../src/wolfcrypt/src/wc_port.c ****             }
1500:../src/wolfcrypt/src/wc_port.c ****         }
1501:../src/wolfcrypt/src/wc_port.c ****         return BAD_MUTEX_E;
1502:../src/wolfcrypt/src/wc_port.c ****     }
1503:../src/wolfcrypt/src/wc_port.c **** 
1504:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1505:../src/wolfcrypt/src/wc_port.c ****     {
1506:../src/wolfcrypt/src/wc_port.c ****         mutexStatus mutStat;
1507:../src/wolfcrypt/src/wc_port.c ****         if (m) {
1508:../src/wolfcrypt/src/wc_port.c ****             mutStat = unlockMutex(*m);
1509:../src/wolfcrypt/src/wc_port.c ****             if (mutStat== mutexSuccess)
1510:../src/wolfcrypt/src/wc_port.c ****                 return 0;
1511:../src/wolfcrypt/src/wc_port.c ****             else{
1512:../src/wolfcrypt/src/wc_port.c ****                 WOLFSSL_MSG("wc_UnLockMutex failed");
1513:../src/wolfcrypt/src/wc_port.c ****                 return mutStat;
1514:../src/wolfcrypt/src/wc_port.c ****             }
1515:../src/wolfcrypt/src/wc_port.c ****         }
1516:../src/wolfcrypt/src/wc_port.c ****         return BAD_MUTEX_E;
1517:../src/wolfcrypt/src/wc_port.c ****     }
1518:../src/wolfcrypt/src/wc_port.c **** 
1519:../src/wolfcrypt/src/wc_port.c **** #elif defined(MICRIUM)
1520:../src/wolfcrypt/src/wc_port.c ****     #if (OS_VERSION < 50000)
1521:../src/wolfcrypt/src/wc_port.c ****         #define MICRIUM_ERR_TYPE OS_ERR
1522:../src/wolfcrypt/src/wc_port.c ****         #define MICRIUM_ERR_NONE OS_ERR_NONE
1523:../src/wolfcrypt/src/wc_port.c ****         #define MICRIUM_ERR_CODE(err) err
1524:../src/wolfcrypt/src/wc_port.c ****     #else
1525:../src/wolfcrypt/src/wc_port.c ****         #define MICRIUM_ERR_TYPE RTOS_ERR
1526:../src/wolfcrypt/src/wc_port.c ****         #define MICRIUM_ERR_NONE RTOS_ERR_NONE
1527:../src/wolfcrypt/src/wc_port.c ****         #define MICRIUM_ERR_CODE(err)    RTOS_ERR_CODE_GET(err)
1528:../src/wolfcrypt/src/wc_port.c ****     #endif
1529:../src/wolfcrypt/src/wc_port.c **** 
1530:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1531:../src/wolfcrypt/src/wc_port.c ****     {
1532:../src/wolfcrypt/src/wc_port.c ****         MICRIUM_ERR_TYPE err;
1533:../src/wolfcrypt/src/wc_port.c **** 
1534:../src/wolfcrypt/src/wc_port.c ****         OSMutexCreate(m, "wolfSSL Mutex", &err);
1535:../src/wolfcrypt/src/wc_port.c **** 
1536:../src/wolfcrypt/src/wc_port.c ****         if (MICRIUM_ERR_CODE(err) == MICRIUM_ERR_NONE)
1537:../src/wolfcrypt/src/wc_port.c ****             return 0;
1538:../src/wolfcrypt/src/wc_port.c ****         else
1539:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1540:../src/wolfcrypt/src/wc_port.c ****     }
1541:../src/wolfcrypt/src/wc_port.c **** 
1542:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1543:../src/wolfcrypt/src/wc_port.c ****     {
1544:../src/wolfcrypt/src/wc_port.c ****         #if (OS_CFG_MUTEX_DEL_EN == DEF_ENABLED)
1545:../src/wolfcrypt/src/wc_port.c ****             MICRIUM_ERR_TYPE err;
1546:../src/wolfcrypt/src/wc_port.c **** 
1547:../src/wolfcrypt/src/wc_port.c ****             OSMutexDel(m, OS_OPT_DEL_ALWAYS, &err);
1548:../src/wolfcrypt/src/wc_port.c **** 
1549:../src/wolfcrypt/src/wc_port.c ****             if (MICRIUM_ERR_CODE(err) == MICRIUM_ERR_NONE)
1550:../src/wolfcrypt/src/wc_port.c ****                 return 0;
1551:../src/wolfcrypt/src/wc_port.c ****             else
1552:../src/wolfcrypt/src/wc_port.c ****                 return BAD_MUTEX_E;
1553:../src/wolfcrypt/src/wc_port.c ****         #else
1554:../src/wolfcrypt/src/wc_port.c ****             (void)m;
1555:../src/wolfcrypt/src/wc_port.c ****             return 0;
1556:../src/wolfcrypt/src/wc_port.c ****         #endif
1557:../src/wolfcrypt/src/wc_port.c ****     }
1558:../src/wolfcrypt/src/wc_port.c **** 
1559:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1560:../src/wolfcrypt/src/wc_port.c ****     {
1561:../src/wolfcrypt/src/wc_port.c ****         MICRIUM_ERR_TYPE err;
1562:../src/wolfcrypt/src/wc_port.c **** 
1563:../src/wolfcrypt/src/wc_port.c ****         OSMutexPend(m, 0, OS_OPT_PEND_BLOCKING, NULL, &err);
1564:../src/wolfcrypt/src/wc_port.c **** 
1565:../src/wolfcrypt/src/wc_port.c ****         if (MICRIUM_ERR_CODE(err) == MICRIUM_ERR_NONE)
1566:../src/wolfcrypt/src/wc_port.c ****             return 0;
1567:../src/wolfcrypt/src/wc_port.c ****         else
1568:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1569:../src/wolfcrypt/src/wc_port.c ****     }
1570:../src/wolfcrypt/src/wc_port.c **** 
1571:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1572:../src/wolfcrypt/src/wc_port.c ****     {
1573:../src/wolfcrypt/src/wc_port.c ****         MICRIUM_ERR_TYPE err;
1574:../src/wolfcrypt/src/wc_port.c **** 
1575:../src/wolfcrypt/src/wc_port.c ****         OSMutexPost(m, OS_OPT_POST_NONE, &err);
1576:../src/wolfcrypt/src/wc_port.c **** 
1577:../src/wolfcrypt/src/wc_port.c ****         if (MICRIUM_ERR_CODE(err) == MICRIUM_ERR_NONE)
1578:../src/wolfcrypt/src/wc_port.c ****             return 0;
1579:../src/wolfcrypt/src/wc_port.c ****         else
1580:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1581:../src/wolfcrypt/src/wc_port.c ****     }
1582:../src/wolfcrypt/src/wc_port.c **** 
1583:../src/wolfcrypt/src/wc_port.c **** #elif defined(EBSNET)
1584:../src/wolfcrypt/src/wc_port.c **** 
1585:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1586:../src/wolfcrypt/src/wc_port.c ****     {
1587:../src/wolfcrypt/src/wc_port.c ****         if (rtp_sig_mutex_alloc(m, "wolfSSL Mutex") == -1)
1588:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1589:../src/wolfcrypt/src/wc_port.c ****         else
1590:../src/wolfcrypt/src/wc_port.c ****             return 0;
1591:../src/wolfcrypt/src/wc_port.c ****     }
1592:../src/wolfcrypt/src/wc_port.c **** 
1593:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1594:../src/wolfcrypt/src/wc_port.c ****     {
1595:../src/wolfcrypt/src/wc_port.c ****         rtp_sig_mutex_free(*m);
1596:../src/wolfcrypt/src/wc_port.c ****         return 0;
1597:../src/wolfcrypt/src/wc_port.c ****     }
1598:../src/wolfcrypt/src/wc_port.c **** 
1599:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1600:../src/wolfcrypt/src/wc_port.c ****     {
1601:../src/wolfcrypt/src/wc_port.c ****         if (rtp_sig_mutex_claim_timed(*m, RTIP_INF) == 0)
1602:../src/wolfcrypt/src/wc_port.c ****             return 0;
1603:../src/wolfcrypt/src/wc_port.c ****         else
1604:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1605:../src/wolfcrypt/src/wc_port.c ****     }
1606:../src/wolfcrypt/src/wc_port.c **** 
1607:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1608:../src/wolfcrypt/src/wc_port.c ****     {
1609:../src/wolfcrypt/src/wc_port.c ****         rtp_sig_mutex_release(*m);
1610:../src/wolfcrypt/src/wc_port.c ****         return 0;
1611:../src/wolfcrypt/src/wc_port.c ****     }
1612:../src/wolfcrypt/src/wc_port.c **** 
1613:../src/wolfcrypt/src/wc_port.c ****     int ebsnet_fseek(int a, long b, int c)
1614:../src/wolfcrypt/src/wc_port.c ****     {
1615:../src/wolfcrypt/src/wc_port.c ****         int retval;
1616:../src/wolfcrypt/src/wc_port.c **** 
1617:../src/wolfcrypt/src/wc_port.c ****         retval = vf_lseek(a, b, c);
1618:../src/wolfcrypt/src/wc_port.c ****         if (retval > 0)
1619:../src/wolfcrypt/src/wc_port.c ****             retval = 0;
1620:../src/wolfcrypt/src/wc_port.c ****         else
1621:../src/wolfcrypt/src/wc_port.c ****             retval =  -1;
1622:../src/wolfcrypt/src/wc_port.c **** 
1623:../src/wolfcrypt/src/wc_port.c ****         return(retval);
1624:../src/wolfcrypt/src/wc_port.c ****     }
1625:../src/wolfcrypt/src/wc_port.c **** 
1626:../src/wolfcrypt/src/wc_port.c **** #elif defined(FREESCALE_MQX) || defined(FREESCALE_KSDK_MQX)
1627:../src/wolfcrypt/src/wc_port.c **** 
1628:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1629:../src/wolfcrypt/src/wc_port.c ****     {
1630:../src/wolfcrypt/src/wc_port.c ****         if (_mutex_init(m, NULL) == MQX_EOK)
1631:../src/wolfcrypt/src/wc_port.c ****             return 0;
1632:../src/wolfcrypt/src/wc_port.c ****         else
1633:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1634:../src/wolfcrypt/src/wc_port.c ****     }
1635:../src/wolfcrypt/src/wc_port.c **** 
1636:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1637:../src/wolfcrypt/src/wc_port.c ****     {
1638:../src/wolfcrypt/src/wc_port.c ****         if (_mutex_destroy(m) == MQX_EOK)
1639:../src/wolfcrypt/src/wc_port.c ****             return 0;
1640:../src/wolfcrypt/src/wc_port.c ****         else
1641:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1642:../src/wolfcrypt/src/wc_port.c ****     }
1643:../src/wolfcrypt/src/wc_port.c **** 
1644:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1645:../src/wolfcrypt/src/wc_port.c ****     {
1646:../src/wolfcrypt/src/wc_port.c ****         if (_mutex_lock(m) == MQX_EOK)
1647:../src/wolfcrypt/src/wc_port.c ****             return 0;
1648:../src/wolfcrypt/src/wc_port.c ****         else
1649:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1650:../src/wolfcrypt/src/wc_port.c ****     }
1651:../src/wolfcrypt/src/wc_port.c **** 
1652:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1653:../src/wolfcrypt/src/wc_port.c ****     {
1654:../src/wolfcrypt/src/wc_port.c ****         if (_mutex_unlock(m) == MQX_EOK)
1655:../src/wolfcrypt/src/wc_port.c ****             return 0;
1656:../src/wolfcrypt/src/wc_port.c ****         else
1657:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1658:../src/wolfcrypt/src/wc_port.c ****     }
1659:../src/wolfcrypt/src/wc_port.c **** 
1660:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_TIRTOS)
1661:../src/wolfcrypt/src/wc_port.c ****     #include <xdc/runtime/Error.h>
1662:../src/wolfcrypt/src/wc_port.c **** 
1663:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1664:../src/wolfcrypt/src/wc_port.c ****     {
1665:../src/wolfcrypt/src/wc_port.c ****         Semaphore_Params params;
1666:../src/wolfcrypt/src/wc_port.c ****         Error_Block eb;
1667:../src/wolfcrypt/src/wc_port.c **** 
1668:../src/wolfcrypt/src/wc_port.c ****         Error_init(&eb);
1669:../src/wolfcrypt/src/wc_port.c ****         Semaphore_Params_init(&params);
1670:../src/wolfcrypt/src/wc_port.c ****         params.mode = Semaphore_Mode_BINARY;
1671:../src/wolfcrypt/src/wc_port.c **** 
1672:../src/wolfcrypt/src/wc_port.c ****         *m = Semaphore_create(1, &params, &eb);
1673:../src/wolfcrypt/src/wc_port.c ****         if (Error_check(&eb)) {
1674:../src/wolfcrypt/src/wc_port.c ****             Error_raise(&eb, Error_E_generic, "Failed to Create the semaphore.",
1675:../src/wolfcrypt/src/wc_port.c ****                 NULL);
1676:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1677:../src/wolfcrypt/src/wc_port.c ****         }
1678:../src/wolfcrypt/src/wc_port.c ****         else
1679:../src/wolfcrypt/src/wc_port.c ****             return 0;
1680:../src/wolfcrypt/src/wc_port.c ****     }
1681:../src/wolfcrypt/src/wc_port.c **** 
1682:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1683:../src/wolfcrypt/src/wc_port.c ****     {
1684:../src/wolfcrypt/src/wc_port.c ****         Semaphore_delete(m);
1685:../src/wolfcrypt/src/wc_port.c **** 
1686:../src/wolfcrypt/src/wc_port.c ****         return 0;
1687:../src/wolfcrypt/src/wc_port.c ****     }
1688:../src/wolfcrypt/src/wc_port.c **** 
1689:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1690:../src/wolfcrypt/src/wc_port.c ****     {
1691:../src/wolfcrypt/src/wc_port.c ****         Semaphore_pend(*m, BIOS_WAIT_FOREVER);
1692:../src/wolfcrypt/src/wc_port.c **** 
1693:../src/wolfcrypt/src/wc_port.c ****         return 0;
1694:../src/wolfcrypt/src/wc_port.c ****     }
1695:../src/wolfcrypt/src/wc_port.c **** 
1696:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1697:../src/wolfcrypt/src/wc_port.c ****     {
1698:../src/wolfcrypt/src/wc_port.c ****         Semaphore_post(*m);
1699:../src/wolfcrypt/src/wc_port.c **** 
1700:../src/wolfcrypt/src/wc_port.c ****         return 0;
1701:../src/wolfcrypt/src/wc_port.c ****     }
1702:../src/wolfcrypt/src/wc_port.c **** 
1703:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_uITRON4)
1704:../src/wolfcrypt/src/wc_port.c **** 
1705:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1706:../src/wolfcrypt/src/wc_port.c ****     {
1707:../src/wolfcrypt/src/wc_port.c ****         int iReturn;
1708:../src/wolfcrypt/src/wc_port.c ****         m->sem.sematr  = TA_TFIFO;
1709:../src/wolfcrypt/src/wc_port.c ****         m->sem.isemcnt = 1;
1710:../src/wolfcrypt/src/wc_port.c ****         m->sem.maxsem  = 1;
1711:../src/wolfcrypt/src/wc_port.c ****         m->sem.name    = NULL;
1712:../src/wolfcrypt/src/wc_port.c **** 
1713:../src/wolfcrypt/src/wc_port.c ****         m->id = acre_sem(&m->sem);
1714:../src/wolfcrypt/src/wc_port.c ****         if( m->id != E_OK )
1715:../src/wolfcrypt/src/wc_port.c ****             iReturn = 0;
1716:../src/wolfcrypt/src/wc_port.c ****         else
1717:../src/wolfcrypt/src/wc_port.c ****             iReturn = BAD_MUTEX_E;
1718:../src/wolfcrypt/src/wc_port.c **** 
1719:../src/wolfcrypt/src/wc_port.c ****         return iReturn;
1720:../src/wolfcrypt/src/wc_port.c ****     }
1721:../src/wolfcrypt/src/wc_port.c **** 
1722:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1723:../src/wolfcrypt/src/wc_port.c ****     {
1724:../src/wolfcrypt/src/wc_port.c ****         del_sem( m->id );
1725:../src/wolfcrypt/src/wc_port.c ****         return 0;
1726:../src/wolfcrypt/src/wc_port.c ****     }
1727:../src/wolfcrypt/src/wc_port.c **** 
1728:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1729:../src/wolfcrypt/src/wc_port.c ****     {
1730:../src/wolfcrypt/src/wc_port.c ****         wai_sem(m->id);
1731:../src/wolfcrypt/src/wc_port.c ****         return 0;
1732:../src/wolfcrypt/src/wc_port.c ****     }
1733:../src/wolfcrypt/src/wc_port.c **** 
1734:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1735:../src/wolfcrypt/src/wc_port.c ****     {
1736:../src/wolfcrypt/src/wc_port.c ****         sig_sem(m->id);
1737:../src/wolfcrypt/src/wc_port.c ****         return 0;
1738:../src/wolfcrypt/src/wc_port.c ****     }
1739:../src/wolfcrypt/src/wc_port.c **** 
1740:../src/wolfcrypt/src/wc_port.c ****     /****  uITRON malloc/free ***/
1741:../src/wolfcrypt/src/wc_port.c ****     static ID ID_wolfssl_MPOOL = 0;
1742:../src/wolfcrypt/src/wc_port.c ****     static T_CMPL wolfssl_MPOOL = {TA_TFIFO, 0, NULL, "wolfSSL_MPOOL"};
1743:../src/wolfcrypt/src/wc_port.c **** 
1744:../src/wolfcrypt/src/wc_port.c ****     int uITRON4_minit(size_t poolsz) {
1745:../src/wolfcrypt/src/wc_port.c ****         ER ercd;
1746:../src/wolfcrypt/src/wc_port.c ****         wolfssl_MPOOL.mplsz = poolsz;
1747:../src/wolfcrypt/src/wc_port.c ****         ercd = acre_mpl(&wolfssl_MPOOL);
1748:../src/wolfcrypt/src/wc_port.c ****         if (ercd > 0) {
1749:../src/wolfcrypt/src/wc_port.c ****             ID_wolfssl_MPOOL = ercd;
1750:../src/wolfcrypt/src/wc_port.c ****             return 0;
1751:../src/wolfcrypt/src/wc_port.c ****         } else {
1752:../src/wolfcrypt/src/wc_port.c ****             return -1;
1753:../src/wolfcrypt/src/wc_port.c ****         }
1754:../src/wolfcrypt/src/wc_port.c ****     }
1755:../src/wolfcrypt/src/wc_port.c **** 
1756:../src/wolfcrypt/src/wc_port.c ****     void *uITRON4_malloc(size_t sz) {
1757:../src/wolfcrypt/src/wc_port.c ****         ER ercd;
1758:../src/wolfcrypt/src/wc_port.c ****         void *p = NULL;
1759:../src/wolfcrypt/src/wc_port.c ****         ercd = get_mpl(ID_wolfssl_MPOOL, sz, (VP)&p);
1760:../src/wolfcrypt/src/wc_port.c ****         if (ercd == E_OK) {
1761:../src/wolfcrypt/src/wc_port.c ****             return p;
1762:../src/wolfcrypt/src/wc_port.c ****         } else {
1763:../src/wolfcrypt/src/wc_port.c ****             return 0;
1764:../src/wolfcrypt/src/wc_port.c ****         }
1765:../src/wolfcrypt/src/wc_port.c ****     }
1766:../src/wolfcrypt/src/wc_port.c **** 
1767:../src/wolfcrypt/src/wc_port.c ****     void *uITRON4_realloc(void *p, size_t sz) {
1768:../src/wolfcrypt/src/wc_port.c ****       ER ercd;
1769:../src/wolfcrypt/src/wc_port.c ****       void *newp = NULL;
1770:../src/wolfcrypt/src/wc_port.c ****       if(p) {
1771:../src/wolfcrypt/src/wc_port.c ****           ercd = get_mpl(ID_wolfssl_MPOOL, sz, (VP)&newp);
1772:../src/wolfcrypt/src/wc_port.c ****           if ((ercd == E_OK) && (newp != NULL)) {
1773:../src/wolfcrypt/src/wc_port.c ****               XMEMCPY(newp, p, sz);
1774:../src/wolfcrypt/src/wc_port.c ****               ercd = rel_mpl(ID_wolfssl_MPOOL, (VP)p);
1775:../src/wolfcrypt/src/wc_port.c ****               if (ercd == E_OK) {
1776:../src/wolfcrypt/src/wc_port.c ****                   return newp;
1777:../src/wolfcrypt/src/wc_port.c ****               }
1778:../src/wolfcrypt/src/wc_port.c ****           }
1779:../src/wolfcrypt/src/wc_port.c ****       }
1780:../src/wolfcrypt/src/wc_port.c ****       return 0;
1781:../src/wolfcrypt/src/wc_port.c ****     }
1782:../src/wolfcrypt/src/wc_port.c **** 
1783:../src/wolfcrypt/src/wc_port.c ****     void uITRON4_free(void *p) {
1784:../src/wolfcrypt/src/wc_port.c ****         ER ercd;
1785:../src/wolfcrypt/src/wc_port.c ****         ercd = rel_mpl(ID_wolfssl_MPOOL, (VP)p);
1786:../src/wolfcrypt/src/wc_port.c ****         if (ercd == E_OK) {
1787:../src/wolfcrypt/src/wc_port.c ****             return;
1788:../src/wolfcrypt/src/wc_port.c ****         } else {
1789:../src/wolfcrypt/src/wc_port.c ****             return;
1790:../src/wolfcrypt/src/wc_port.c ****         }
1791:../src/wolfcrypt/src/wc_port.c ****     }
1792:../src/wolfcrypt/src/wc_port.c **** 
1793:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_uTKERNEL2)
1794:../src/wolfcrypt/src/wc_port.c **** 
1795:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1796:../src/wolfcrypt/src/wc_port.c ****     {
1797:../src/wolfcrypt/src/wc_port.c ****         int iReturn;
1798:../src/wolfcrypt/src/wc_port.c ****         m->sem.sematr  = TA_TFIFO;
1799:../src/wolfcrypt/src/wc_port.c ****         m->sem.isemcnt = 1;
1800:../src/wolfcrypt/src/wc_port.c ****         m->sem.maxsem  = 1;
1801:../src/wolfcrypt/src/wc_port.c **** 
1802:../src/wolfcrypt/src/wc_port.c ****         m->id = tk_cre_sem(&m->sem);
1803:../src/wolfcrypt/src/wc_port.c ****         if( m->id != NULL )
1804:../src/wolfcrypt/src/wc_port.c ****             iReturn = 0;
1805:../src/wolfcrypt/src/wc_port.c ****         else
1806:../src/wolfcrypt/src/wc_port.c ****             iReturn = BAD_MUTEX_E;
1807:../src/wolfcrypt/src/wc_port.c **** 
1808:../src/wolfcrypt/src/wc_port.c ****         return iReturn;
1809:../src/wolfcrypt/src/wc_port.c ****     }
1810:../src/wolfcrypt/src/wc_port.c **** 
1811:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1812:../src/wolfcrypt/src/wc_port.c ****     {
1813:../src/wolfcrypt/src/wc_port.c ****         tk_del_sem(m->id);
1814:../src/wolfcrypt/src/wc_port.c ****         return 0;
1815:../src/wolfcrypt/src/wc_port.c ****     }
1816:../src/wolfcrypt/src/wc_port.c **** 
1817:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1818:../src/wolfcrypt/src/wc_port.c ****     {
1819:../src/wolfcrypt/src/wc_port.c ****         tk_wai_sem(m->id, 1, TMO_FEVR);
1820:../src/wolfcrypt/src/wc_port.c ****         return 0;
1821:../src/wolfcrypt/src/wc_port.c ****     }
1822:../src/wolfcrypt/src/wc_port.c **** 
1823:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1824:../src/wolfcrypt/src/wc_port.c ****     {
1825:../src/wolfcrypt/src/wc_port.c ****         tk_sig_sem(m->id, 1);
1826:../src/wolfcrypt/src/wc_port.c ****         return 0;
1827:../src/wolfcrypt/src/wc_port.c ****     }
1828:../src/wolfcrypt/src/wc_port.c **** 
1829:../src/wolfcrypt/src/wc_port.c ****     /****  uT-Kernel malloc/free ***/
1830:../src/wolfcrypt/src/wc_port.c ****     static ID ID_wolfssl_MPOOL = 0;
1831:../src/wolfcrypt/src/wc_port.c ****     static T_CMPL wolfssl_MPOOL = {
1832:../src/wolfcrypt/src/wc_port.c ****         NULL,       /* Extended information */
1833:../src/wolfcrypt/src/wc_port.c ****         TA_TFIFO,   /* Memory pool attribute */
1834:../src/wolfcrypt/src/wc_port.c ****         0,          /* Size of whole memory pool (byte) */
1835:../src/wolfcrypt/src/wc_port.c ****         "wolfSSL"   /* Object name (max 8-char) */
1836:../src/wolfcrypt/src/wc_port.c ****     };
1837:../src/wolfcrypt/src/wc_port.c **** 
1838:../src/wolfcrypt/src/wc_port.c ****     int uTKernel_init_mpool(unsigned int sz) {
1839:../src/wolfcrypt/src/wc_port.c ****         ER ercd;
1840:../src/wolfcrypt/src/wc_port.c ****         wolfssl_MPOOL.mplsz = sz;
1841:../src/wolfcrypt/src/wc_port.c ****         ercd = tk_cre_mpl(&wolfssl_MPOOL);
1842:../src/wolfcrypt/src/wc_port.c ****         if (ercd > 0) {
1843:../src/wolfcrypt/src/wc_port.c ****             ID_wolfssl_MPOOL = ercd;
1844:../src/wolfcrypt/src/wc_port.c ****             return 0;
1845:../src/wolfcrypt/src/wc_port.c ****         } else {
1846:../src/wolfcrypt/src/wc_port.c ****             return (int)ercd;
1847:../src/wolfcrypt/src/wc_port.c ****         }
1848:../src/wolfcrypt/src/wc_port.c ****     }
1849:../src/wolfcrypt/src/wc_port.c **** 
1850:../src/wolfcrypt/src/wc_port.c ****     void *uTKernel_malloc(unsigned int sz) {
1851:../src/wolfcrypt/src/wc_port.c ****         ER ercd;
1852:../src/wolfcrypt/src/wc_port.c ****         void *p = NULL;
1853:../src/wolfcrypt/src/wc_port.c ****         ercd = tk_get_mpl(ID_wolfssl_MPOOL, sz, (VP)&p, TMO_FEVR);
1854:../src/wolfcrypt/src/wc_port.c ****         if (ercd == E_OK) {
1855:../src/wolfcrypt/src/wc_port.c ****             return p;
1856:../src/wolfcrypt/src/wc_port.c ****         } else {
1857:../src/wolfcrypt/src/wc_port.c ****             return 0;
1858:../src/wolfcrypt/src/wc_port.c ****         }
1859:../src/wolfcrypt/src/wc_port.c ****     }
1860:../src/wolfcrypt/src/wc_port.c **** 
1861:../src/wolfcrypt/src/wc_port.c ****     void *uTKernel_realloc(void *p, unsigned int sz) {
1862:../src/wolfcrypt/src/wc_port.c ****       ER ercd;
1863:../src/wolfcrypt/src/wc_port.c ****       void *newp = NULL;
1864:../src/wolfcrypt/src/wc_port.c ****       if (p) {
1865:../src/wolfcrypt/src/wc_port.c ****           ercd = tk_get_mpl(ID_wolfssl_MPOOL, sz, (VP)&newp, TMO_FEVR);
1866:../src/wolfcrypt/src/wc_port.c ****           if ((ercd == E_OK) && (newp != NULL)) {
1867:../src/wolfcrypt/src/wc_port.c ****               XMEMCPY(newp, p, sz);
1868:../src/wolfcrypt/src/wc_port.c ****               ercd = tk_rel_mpl(ID_wolfssl_MPOOL, (VP)p);
1869:../src/wolfcrypt/src/wc_port.c ****               if (ercd == E_OK) {
1870:../src/wolfcrypt/src/wc_port.c ****                   return newp;
1871:../src/wolfcrypt/src/wc_port.c ****               }
1872:../src/wolfcrypt/src/wc_port.c ****           }
1873:../src/wolfcrypt/src/wc_port.c ****       }
1874:../src/wolfcrypt/src/wc_port.c ****       return 0;
1875:../src/wolfcrypt/src/wc_port.c ****     }
1876:../src/wolfcrypt/src/wc_port.c **** 
1877:../src/wolfcrypt/src/wc_port.c ****     void uTKernel_free(void *p) {
1878:../src/wolfcrypt/src/wc_port.c ****         ER ercd;
1879:../src/wolfcrypt/src/wc_port.c ****         ercd = tk_rel_mpl(ID_wolfssl_MPOOL, (VP)p);
1880:../src/wolfcrypt/src/wc_port.c ****         if (ercd == E_OK) {
1881:../src/wolfcrypt/src/wc_port.c ****             return;
1882:../src/wolfcrypt/src/wc_port.c ****         } else {
1883:../src/wolfcrypt/src/wc_port.c ****             return;
1884:../src/wolfcrypt/src/wc_port.c ****         }
1885:../src/wolfcrypt/src/wc_port.c ****     }
1886:../src/wolfcrypt/src/wc_port.c **** 
1887:../src/wolfcrypt/src/wc_port.c **** #elif defined (WOLFSSL_FROSTED)
1888:../src/wolfcrypt/src/wc_port.c **** 
1889:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1890:../src/wolfcrypt/src/wc_port.c ****     {
1891:../src/wolfcrypt/src/wc_port.c ****         *m = mutex_init();
1892:../src/wolfcrypt/src/wc_port.c ****         if (*m)
1893:../src/wolfcrypt/src/wc_port.c ****             return 0;
1894:../src/wolfcrypt/src/wc_port.c ****         else
1895:../src/wolfcrypt/src/wc_port.c ****             return -1;
1896:../src/wolfcrypt/src/wc_port.c ****     }
1897:../src/wolfcrypt/src/wc_port.c **** 
1898:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1899:../src/wolfcrypt/src/wc_port.c ****     {
1900:../src/wolfcrypt/src/wc_port.c ****         mutex_destroy(*m);
1901:../src/wolfcrypt/src/wc_port.c ****         return(0);
1902:../src/wolfcrypt/src/wc_port.c ****     }
1903:../src/wolfcrypt/src/wc_port.c **** 
1904:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1905:../src/wolfcrypt/src/wc_port.c ****     {
1906:../src/wolfcrypt/src/wc_port.c ****         mutex_lock(*m);
1907:../src/wolfcrypt/src/wc_port.c ****         return 0;
1908:../src/wolfcrypt/src/wc_port.c ****     }
1909:../src/wolfcrypt/src/wc_port.c **** 
1910:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1911:../src/wolfcrypt/src/wc_port.c ****     {
1912:../src/wolfcrypt/src/wc_port.c ****         mutex_unlock(*m);
1913:../src/wolfcrypt/src/wc_port.c ****         return 0;
1914:../src/wolfcrypt/src/wc_port.c ****     }
1915:../src/wolfcrypt/src/wc_port.c **** 
1916:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_CMSIS_RTOS)
1917:../src/wolfcrypt/src/wc_port.c **** 
1918:../src/wolfcrypt/src/wc_port.c ****     #define CMSIS_NMUTEX 10
1919:../src/wolfcrypt/src/wc_port.c ****     osMutexDef(wolfSSL_mt0);  osMutexDef(wolfSSL_mt1);  osMutexDef(wolfSSL_mt2);
1920:../src/wolfcrypt/src/wc_port.c ****     osMutexDef(wolfSSL_mt3);  osMutexDef(wolfSSL_mt4);  osMutexDef(wolfSSL_mt5);
1921:../src/wolfcrypt/src/wc_port.c ****     osMutexDef(wolfSSL_mt6);  osMutexDef(wolfSSL_mt7);  osMutexDef(wolfSSL_mt8);
1922:../src/wolfcrypt/src/wc_port.c ****     osMutexDef(wolfSSL_mt9);
1923:../src/wolfcrypt/src/wc_port.c **** 
1924:../src/wolfcrypt/src/wc_port.c ****     static const osMutexDef_t *CMSIS_mutex[] = { osMutex(wolfSSL_mt0),
1925:../src/wolfcrypt/src/wc_port.c ****         osMutex(wolfSSL_mt1),    osMutex(wolfSSL_mt2),   osMutex(wolfSSL_mt3),
1926:../src/wolfcrypt/src/wc_port.c ****         osMutex(wolfSSL_mt4),    osMutex(wolfSSL_mt5),   osMutex(wolfSSL_mt6),
1927:../src/wolfcrypt/src/wc_port.c ****         osMutex(wolfSSL_mt7),    osMutex(wolfSSL_mt8),   osMutex(wolfSSL_mt9) };
1928:../src/wolfcrypt/src/wc_port.c **** 
1929:../src/wolfcrypt/src/wc_port.c ****     static osMutexId CMSIS_mutexID[CMSIS_NMUTEX] = {0};
1930:../src/wolfcrypt/src/wc_port.c **** 
1931:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
1932:../src/wolfcrypt/src/wc_port.c ****     {
1933:../src/wolfcrypt/src/wc_port.c ****         int i;
1934:../src/wolfcrypt/src/wc_port.c ****         for (i=0; i<CMSIS_NMUTEX; i++) {
1935:../src/wolfcrypt/src/wc_port.c ****             if(CMSIS_mutexID[i] == 0) {
1936:../src/wolfcrypt/src/wc_port.c ****                 CMSIS_mutexID[i] = osMutexCreate(CMSIS_mutex[i]);
1937:../src/wolfcrypt/src/wc_port.c ****                 (*m) = CMSIS_mutexID[i];
1938:../src/wolfcrypt/src/wc_port.c ****             return 0;
1939:../src/wolfcrypt/src/wc_port.c ****             }
1940:../src/wolfcrypt/src/wc_port.c ****         }
1941:../src/wolfcrypt/src/wc_port.c ****         return -1;
1942:../src/wolfcrypt/src/wc_port.c ****     }
1943:../src/wolfcrypt/src/wc_port.c **** 
1944:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
1945:../src/wolfcrypt/src/wc_port.c ****     {
1946:../src/wolfcrypt/src/wc_port.c ****         int i;
1947:../src/wolfcrypt/src/wc_port.c ****         osMutexDelete   (*m);
1948:../src/wolfcrypt/src/wc_port.c ****         for (i=0; i<CMSIS_NMUTEX; i++) {
1949:../src/wolfcrypt/src/wc_port.c ****             if(CMSIS_mutexID[i] == (*m)) {
1950:../src/wolfcrypt/src/wc_port.c ****                 CMSIS_mutexID[i] = 0;
1951:../src/wolfcrypt/src/wc_port.c ****                 return(0);
1952:../src/wolfcrypt/src/wc_port.c ****             }
1953:../src/wolfcrypt/src/wc_port.c ****         }
1954:../src/wolfcrypt/src/wc_port.c ****         return(-1);
1955:../src/wolfcrypt/src/wc_port.c ****     }
1956:../src/wolfcrypt/src/wc_port.c **** 
1957:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
1958:../src/wolfcrypt/src/wc_port.c ****     {
1959:../src/wolfcrypt/src/wc_port.c ****         osMutexWait(*m, osWaitForever);
1960:../src/wolfcrypt/src/wc_port.c ****         return(0);
1961:../src/wolfcrypt/src/wc_port.c ****     }
1962:../src/wolfcrypt/src/wc_port.c **** 
1963:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
1964:../src/wolfcrypt/src/wc_port.c ****     {
1965:../src/wolfcrypt/src/wc_port.c ****         osMutexRelease (*m);
1966:../src/wolfcrypt/src/wc_port.c ****         return 0;
1967:../src/wolfcrypt/src/wc_port.c ****     }
1968:../src/wolfcrypt/src/wc_port.c **** 
1969:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_CMSIS_RTOSv2)
1970:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex *m)
1971:../src/wolfcrypt/src/wc_port.c ****     {
1972:../src/wolfcrypt/src/wc_port.c ****         static const osMutexAttr_t attr = {
1973:../src/wolfcrypt/src/wc_port.c ****             "wolfSSL_mutex", osMutexRecursive, NULL, 0};
1974:../src/wolfcrypt/src/wc_port.c **** 
1975:../src/wolfcrypt/src/wc_port.c ****         if ((*m = osMutexNew(&attr)) != NULL)
1976:../src/wolfcrypt/src/wc_port.c ****             return 0;
1977:../src/wolfcrypt/src/wc_port.c ****         else
1978:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1979:../src/wolfcrypt/src/wc_port.c ****     }
1980:../src/wolfcrypt/src/wc_port.c **** 
1981:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex *m)
1982:../src/wolfcrypt/src/wc_port.c ****     {
1983:../src/wolfcrypt/src/wc_port.c ****         if (osMutexDelete(*m) == osOK)
1984:../src/wolfcrypt/src/wc_port.c ****             return 0;
1985:../src/wolfcrypt/src/wc_port.c ****         else
1986:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1987:../src/wolfcrypt/src/wc_port.c ****     }
1988:../src/wolfcrypt/src/wc_port.c **** 
1989:../src/wolfcrypt/src/wc_port.c **** 
1990:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex *m)
1991:../src/wolfcrypt/src/wc_port.c ****     {
1992:../src/wolfcrypt/src/wc_port.c ****         if (osMutexAcquire(*m, osWaitForever) == osOK)
1993:../src/wolfcrypt/src/wc_port.c ****             return 0;
1994:../src/wolfcrypt/src/wc_port.c ****         else
1995:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
1996:../src/wolfcrypt/src/wc_port.c ****     }
1997:../src/wolfcrypt/src/wc_port.c **** 
1998:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex *m)
1999:../src/wolfcrypt/src/wc_port.c ****     {
2000:../src/wolfcrypt/src/wc_port.c ****         if (osMutexRelease(*m) == osOK)
2001:../src/wolfcrypt/src/wc_port.c ****             return 0;
2002:../src/wolfcrypt/src/wc_port.c ****         else
2003:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
2004:../src/wolfcrypt/src/wc_port.c ****     }
2005:../src/wolfcrypt/src/wc_port.c **** 
2006:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_MDK_ARM)
2007:../src/wolfcrypt/src/wc_port.c **** 
2008:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
2009:../src/wolfcrypt/src/wc_port.c ****     {
2010:../src/wolfcrypt/src/wc_port.c ****         os_mut_init (m);
2011:../src/wolfcrypt/src/wc_port.c ****         return 0;
2012:../src/wolfcrypt/src/wc_port.c ****     }
2013:../src/wolfcrypt/src/wc_port.c **** 
2014:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
2015:../src/wolfcrypt/src/wc_port.c ****     {
2016:../src/wolfcrypt/src/wc_port.c ****         return(0);
2017:../src/wolfcrypt/src/wc_port.c ****     }
2018:../src/wolfcrypt/src/wc_port.c **** 
2019:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
2020:../src/wolfcrypt/src/wc_port.c ****     {
2021:../src/wolfcrypt/src/wc_port.c ****         os_mut_wait (m, 0xffff);
2022:../src/wolfcrypt/src/wc_port.c ****         return(0);
2023:../src/wolfcrypt/src/wc_port.c ****     }
2024:../src/wolfcrypt/src/wc_port.c **** 
2025:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
2026:../src/wolfcrypt/src/wc_port.c ****     {
2027:../src/wolfcrypt/src/wc_port.c ****         os_mut_release (m);
2028:../src/wolfcrypt/src/wc_port.c ****         return 0;
2029:../src/wolfcrypt/src/wc_port.c ****     }
2030:../src/wolfcrypt/src/wc_port.c **** 
2031:../src/wolfcrypt/src/wc_port.c **** #elif defined(INTIME_RTOS)
2032:../src/wolfcrypt/src/wc_port.c **** 
2033:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
2034:../src/wolfcrypt/src/wc_port.c ****     {
2035:../src/wolfcrypt/src/wc_port.c ****         int ret = 0;
2036:../src/wolfcrypt/src/wc_port.c **** 
2037:../src/wolfcrypt/src/wc_port.c ****         if (m == NULL)
2038:../src/wolfcrypt/src/wc_port.c ****             return BAD_FUNC_ARG;
2039:../src/wolfcrypt/src/wc_port.c **** 
2040:../src/wolfcrypt/src/wc_port.c ****         *m = CreateRtSemaphore(
2041:../src/wolfcrypt/src/wc_port.c ****             1,                      /* initial unit count */
2042:../src/wolfcrypt/src/wc_port.c ****             1,                      /* maximum unit count */
2043:../src/wolfcrypt/src/wc_port.c ****             PRIORITY_QUEUING        /* creation flags: FIFO_QUEUING or PRIORITY_QUEUING */
2044:../src/wolfcrypt/src/wc_port.c ****         );
2045:../src/wolfcrypt/src/wc_port.c ****         if (*m == BAD_RTHANDLE) {
2046:../src/wolfcrypt/src/wc_port.c ****             ret = GetLastRtError();
2047:../src/wolfcrypt/src/wc_port.c ****             if (ret != E_OK)
2048:../src/wolfcrypt/src/wc_port.c ****                 ret = BAD_MUTEX_E;
2049:../src/wolfcrypt/src/wc_port.c ****         }
2050:../src/wolfcrypt/src/wc_port.c ****         return ret;
2051:../src/wolfcrypt/src/wc_port.c ****     }
2052:../src/wolfcrypt/src/wc_port.c **** 
2053:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
2054:../src/wolfcrypt/src/wc_port.c ****     {
2055:../src/wolfcrypt/src/wc_port.c ****         int ret = 0;
2056:../src/wolfcrypt/src/wc_port.c ****         BOOLEAN del;
2057:../src/wolfcrypt/src/wc_port.c **** 
2058:../src/wolfcrypt/src/wc_port.c ****         if (m == NULL)
2059:../src/wolfcrypt/src/wc_port.c ****             return BAD_FUNC_ARG;
2060:../src/wolfcrypt/src/wc_port.c **** 
2061:../src/wolfcrypt/src/wc_port.c ****         del = DeleteRtSemaphore(
2062:../src/wolfcrypt/src/wc_port.c ****             *m                      /* handle for RT semaphore */
2063:../src/wolfcrypt/src/wc_port.c ****         );
2064:../src/wolfcrypt/src/wc_port.c ****         if (del != TRUE)
2065:../src/wolfcrypt/src/wc_port.c ****             ret = BAD_MUTEX_E;
2066:../src/wolfcrypt/src/wc_port.c **** 
2067:../src/wolfcrypt/src/wc_port.c ****         return ret;
2068:../src/wolfcrypt/src/wc_port.c ****     }
2069:../src/wolfcrypt/src/wc_port.c **** 
2070:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
2071:../src/wolfcrypt/src/wc_port.c ****     {
2072:../src/wolfcrypt/src/wc_port.c ****         int ret = 0;
2073:../src/wolfcrypt/src/wc_port.c ****         DWORD lck;
2074:../src/wolfcrypt/src/wc_port.c **** 
2075:../src/wolfcrypt/src/wc_port.c ****         if (m == NULL)
2076:../src/wolfcrypt/src/wc_port.c ****             return BAD_FUNC_ARG;
2077:../src/wolfcrypt/src/wc_port.c **** 
2078:../src/wolfcrypt/src/wc_port.c ****         lck = WaitForRtSemaphore(
2079:../src/wolfcrypt/src/wc_port.c ****             *m,                     /* handle for RT semaphore */
2080:../src/wolfcrypt/src/wc_port.c ****             1,                      /* number of units to wait for */
2081:../src/wolfcrypt/src/wc_port.c ****             WAIT_FOREVER            /* number of milliseconds to wait for units */
2082:../src/wolfcrypt/src/wc_port.c ****         );
2083:../src/wolfcrypt/src/wc_port.c ****         if (lck == WAIT_FAILED) {
2084:../src/wolfcrypt/src/wc_port.c ****             ret = GetLastRtError();
2085:../src/wolfcrypt/src/wc_port.c ****             if (ret != E_OK)
2086:../src/wolfcrypt/src/wc_port.c ****                 ret = BAD_MUTEX_E;
2087:../src/wolfcrypt/src/wc_port.c ****         }
2088:../src/wolfcrypt/src/wc_port.c ****         return ret;
2089:../src/wolfcrypt/src/wc_port.c ****     }
2090:../src/wolfcrypt/src/wc_port.c **** 
2091:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
2092:../src/wolfcrypt/src/wc_port.c ****     {
2093:../src/wolfcrypt/src/wc_port.c ****         int ret = 0;
2094:../src/wolfcrypt/src/wc_port.c ****         BOOLEAN rel;
2095:../src/wolfcrypt/src/wc_port.c **** 
2096:../src/wolfcrypt/src/wc_port.c ****         if (m == NULL)
2097:../src/wolfcrypt/src/wc_port.c ****             return BAD_FUNC_ARG;
2098:../src/wolfcrypt/src/wc_port.c **** 
2099:../src/wolfcrypt/src/wc_port.c ****         rel = ReleaseRtSemaphore(
2100:../src/wolfcrypt/src/wc_port.c ****             *m,                     /* handle for RT semaphore */
2101:../src/wolfcrypt/src/wc_port.c ****             1                       /* number of units to release to semaphore */
2102:../src/wolfcrypt/src/wc_port.c ****         );
2103:../src/wolfcrypt/src/wc_port.c ****         if (rel != TRUE)
2104:../src/wolfcrypt/src/wc_port.c ****             ret = BAD_MUTEX_E;
2105:../src/wolfcrypt/src/wc_port.c **** 
2106:../src/wolfcrypt/src/wc_port.c ****         return ret;
2107:../src/wolfcrypt/src/wc_port.c ****     }
2108:../src/wolfcrypt/src/wc_port.c **** 
2109:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_NUCLEUS_1_2)
2110:../src/wolfcrypt/src/wc_port.c **** 
2111:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
2112:../src/wolfcrypt/src/wc_port.c ****     {
2113:../src/wolfcrypt/src/wc_port.c ****         /* Call the Nucleus function to create the semaphore */
2114:../src/wolfcrypt/src/wc_port.c ****         if (NU_Create_Semaphore(m, "WOLFSSL_MTX", 1,
2115:../src/wolfcrypt/src/wc_port.c ****                                 NU_PRIORITY) == NU_SUCCESS) {
2116:../src/wolfcrypt/src/wc_port.c ****             return 0;
2117:../src/wolfcrypt/src/wc_port.c ****         }
2118:../src/wolfcrypt/src/wc_port.c **** 
2119:../src/wolfcrypt/src/wc_port.c ****         return BAD_MUTEX_E;
2120:../src/wolfcrypt/src/wc_port.c ****     }
2121:../src/wolfcrypt/src/wc_port.c **** 
2122:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
2123:../src/wolfcrypt/src/wc_port.c ****     {
2124:../src/wolfcrypt/src/wc_port.c ****         if (NU_Delete_Semaphore(m) == NU_SUCCESS)
2125:../src/wolfcrypt/src/wc_port.c ****             return 0;
2126:../src/wolfcrypt/src/wc_port.c **** 
2127:../src/wolfcrypt/src/wc_port.c ****         return BAD_MUTEX_E;
2128:../src/wolfcrypt/src/wc_port.c ****     }
2129:../src/wolfcrypt/src/wc_port.c **** 
2130:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
2131:../src/wolfcrypt/src/wc_port.c ****     {
2132:../src/wolfcrypt/src/wc_port.c ****         /* passing suspend task option */
2133:../src/wolfcrypt/src/wc_port.c ****         if (NU_Obtain_Semaphore(m, NU_SUSPEND) == NU_SUCCESS)
2134:../src/wolfcrypt/src/wc_port.c ****             return 0;
2135:../src/wolfcrypt/src/wc_port.c **** 
2136:../src/wolfcrypt/src/wc_port.c ****         return BAD_MUTEX_E;
2137:../src/wolfcrypt/src/wc_port.c ****     }
2138:../src/wolfcrypt/src/wc_port.c **** 
2139:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
2140:../src/wolfcrypt/src/wc_port.c ****     {
2141:../src/wolfcrypt/src/wc_port.c ****         if (NU_Release_Semaphore(m) == NU_SUCCESS)
2142:../src/wolfcrypt/src/wc_port.c ****             return 0;
2143:../src/wolfcrypt/src/wc_port.c **** 
2144:../src/wolfcrypt/src/wc_port.c ****         return BAD_MUTEX_E;
2145:../src/wolfcrypt/src/wc_port.c ****     }
2146:../src/wolfcrypt/src/wc_port.c **** 
2147:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_ZEPHYR)
2148:../src/wolfcrypt/src/wc_port.c **** 
2149:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
2150:../src/wolfcrypt/src/wc_port.c ****     {
2151:../src/wolfcrypt/src/wc_port.c ****         k_mutex_init(m);
2152:../src/wolfcrypt/src/wc_port.c **** 
2153:../src/wolfcrypt/src/wc_port.c ****         return 0;
2154:../src/wolfcrypt/src/wc_port.c ****     }
2155:../src/wolfcrypt/src/wc_port.c **** 
2156:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
2157:../src/wolfcrypt/src/wc_port.c ****     {
2158:../src/wolfcrypt/src/wc_port.c ****         return 0;
2159:../src/wolfcrypt/src/wc_port.c ****     }
2160:../src/wolfcrypt/src/wc_port.c **** 
2161:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
2162:../src/wolfcrypt/src/wc_port.c ****     {
2163:../src/wolfcrypt/src/wc_port.c ****         int ret = 0;
2164:../src/wolfcrypt/src/wc_port.c **** 
2165:../src/wolfcrypt/src/wc_port.c ****         if (k_mutex_lock(m, K_FOREVER) != 0)
2166:../src/wolfcrypt/src/wc_port.c ****             ret = BAD_MUTEX_E;
2167:../src/wolfcrypt/src/wc_port.c **** 
2168:../src/wolfcrypt/src/wc_port.c ****         return ret;
2169:../src/wolfcrypt/src/wc_port.c ****     }
2170:../src/wolfcrypt/src/wc_port.c **** 
2171:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
2172:../src/wolfcrypt/src/wc_port.c ****     {
2173:../src/wolfcrypt/src/wc_port.c ****         k_mutex_unlock(m);
2174:../src/wolfcrypt/src/wc_port.c **** 
2175:../src/wolfcrypt/src/wc_port.c ****         return 0;
2176:../src/wolfcrypt/src/wc_port.c ****     }
2177:../src/wolfcrypt/src/wc_port.c **** 
2178:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_TELIT_M2MB)
2179:../src/wolfcrypt/src/wc_port.c **** 
2180:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
2181:../src/wolfcrypt/src/wc_port.c ****     {
2182:../src/wolfcrypt/src/wc_port.c ****         M2MB_OS_RESULT_E        osRes;
2183:../src/wolfcrypt/src/wc_port.c ****         M2MB_OS_MTX_ATTR_HANDLE mtxAttrHandle;
2184:../src/wolfcrypt/src/wc_port.c ****         UINT32                  inheritVal = 1;
2185:../src/wolfcrypt/src/wc_port.c **** 
2186:../src/wolfcrypt/src/wc_port.c ****         osRes = m2mb_os_mtx_setAttrItem(&mtxAttrHandle,
2187:../src/wolfcrypt/src/wc_port.c ****                                     CMDS_ARGS(
2188:../src/wolfcrypt/src/wc_port.c ****                                       M2MB_OS_MTX_SEL_CMD_CREATE_ATTR, NULL,
2189:../src/wolfcrypt/src/wc_port.c ****                                       M2MB_OS_MTX_SEL_CMD_NAME, "wolfMtx",
2190:../src/wolfcrypt/src/wc_port.c ****                                       M2MB_OS_MTX_SEL_CMD_INHERIT, inheritVal
2191:../src/wolfcrypt/src/wc_port.c ****                                     )
2192:../src/wolfcrypt/src/wc_port.c ****                                 );
2193:../src/wolfcrypt/src/wc_port.c ****         if (osRes != M2MB_OS_SUCCESS) {
2194:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
2195:../src/wolfcrypt/src/wc_port.c ****         }
2196:../src/wolfcrypt/src/wc_port.c **** 
2197:../src/wolfcrypt/src/wc_port.c ****         osRes = m2mb_os_mtx_init(m, &mtxAttrHandle);
2198:../src/wolfcrypt/src/wc_port.c ****         if (osRes != M2MB_OS_SUCCESS) {
2199:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
2200:../src/wolfcrypt/src/wc_port.c ****         }
2201:../src/wolfcrypt/src/wc_port.c **** 
2202:../src/wolfcrypt/src/wc_port.c ****         return 0;
2203:../src/wolfcrypt/src/wc_port.c ****     }
2204:../src/wolfcrypt/src/wc_port.c **** 
2205:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
2206:../src/wolfcrypt/src/wc_port.c ****     {
2207:../src/wolfcrypt/src/wc_port.c ****         M2MB_OS_RESULT_E osRes;
2208:../src/wolfcrypt/src/wc_port.c **** 
2209:../src/wolfcrypt/src/wc_port.c ****         if (m == NULL)
2210:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
2211:../src/wolfcrypt/src/wc_port.c **** 
2212:../src/wolfcrypt/src/wc_port.c ****         osRes = m2mb_os_mtx_deinit(*m);
2213:../src/wolfcrypt/src/wc_port.c ****         if (osRes != M2MB_OS_SUCCESS) {
2214:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
2215:../src/wolfcrypt/src/wc_port.c ****         }
2216:../src/wolfcrypt/src/wc_port.c **** 
2217:../src/wolfcrypt/src/wc_port.c ****         return 0;
2218:../src/wolfcrypt/src/wc_port.c ****     }
2219:../src/wolfcrypt/src/wc_port.c **** 
2220:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
2221:../src/wolfcrypt/src/wc_port.c ****     {
2222:../src/wolfcrypt/src/wc_port.c ****         M2MB_OS_RESULT_E osRes;
2223:../src/wolfcrypt/src/wc_port.c **** 
2224:../src/wolfcrypt/src/wc_port.c ****         if (m == NULL)
2225:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
2226:../src/wolfcrypt/src/wc_port.c **** 
2227:../src/wolfcrypt/src/wc_port.c ****         osRes = m2mb_os_mtx_get(*m, M2MB_OS_WAIT_FOREVER);
2228:../src/wolfcrypt/src/wc_port.c ****         if (osRes != M2MB_OS_SUCCESS) {
2229:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
2230:../src/wolfcrypt/src/wc_port.c ****         }
2231:../src/wolfcrypt/src/wc_port.c **** 
2232:../src/wolfcrypt/src/wc_port.c ****         return 0;
2233:../src/wolfcrypt/src/wc_port.c ****     }
2234:../src/wolfcrypt/src/wc_port.c **** 
2235:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
2236:../src/wolfcrypt/src/wc_port.c ****     {
2237:../src/wolfcrypt/src/wc_port.c ****         M2MB_OS_RESULT_E osRes;
2238:../src/wolfcrypt/src/wc_port.c **** 
2239:../src/wolfcrypt/src/wc_port.c ****         if (m == NULL)
2240:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
2241:../src/wolfcrypt/src/wc_port.c **** 
2242:../src/wolfcrypt/src/wc_port.c ****         osRes = m2mb_os_mtx_put(*m);
2243:../src/wolfcrypt/src/wc_port.c ****         if (osRes != M2MB_OS_SUCCESS) {
2244:../src/wolfcrypt/src/wc_port.c ****             return BAD_MUTEX_E;
2245:../src/wolfcrypt/src/wc_port.c ****         }
2246:../src/wolfcrypt/src/wc_port.c **** 
2247:../src/wolfcrypt/src/wc_port.c ****         return 0;
2248:../src/wolfcrypt/src/wc_port.c ****     }
2249:../src/wolfcrypt/src/wc_port.c **** 
2250:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_EMBOS)
2251:../src/wolfcrypt/src/wc_port.c **** 
2252:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m)
2253:../src/wolfcrypt/src/wc_port.c ****     {
2254:../src/wolfcrypt/src/wc_port.c ****         int ret;
2255:../src/wolfcrypt/src/wc_port.c **** 
2256:../src/wolfcrypt/src/wc_port.c ****         OS_MUTEX_Create((OS_MUTEX*) m);
2257:../src/wolfcrypt/src/wc_port.c ****         if (m != NULL)
2258:../src/wolfcrypt/src/wc_port.c ****             ret = 0;
2259:../src/wolfcrypt/src/wc_port.c ****         else
2260:../src/wolfcrypt/src/wc_port.c ****             ret = BAD_MUTEX_E;
2261:../src/wolfcrypt/src/wc_port.c **** 
2262:../src/wolfcrypt/src/wc_port.c ****         return ret;
2263:../src/wolfcrypt/src/wc_port.c ****     }
2264:../src/wolfcrypt/src/wc_port.c **** 
2265:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex* m)
2266:../src/wolfcrypt/src/wc_port.c ****     {
2267:../src/wolfcrypt/src/wc_port.c ****         OS_MUTEX_Delete((OS_MUTEX*) m);
2268:../src/wolfcrypt/src/wc_port.c ****         return 0;
2269:../src/wolfcrypt/src/wc_port.c ****     }
2270:../src/wolfcrypt/src/wc_port.c **** 
2271:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex* m)
2272:../src/wolfcrypt/src/wc_port.c ****     {
2273:../src/wolfcrypt/src/wc_port.c ****         OS_MUTEX_LockBlocked((OS_MUTEX*) m);
2274:../src/wolfcrypt/src/wc_port.c ****         return 0;
2275:../src/wolfcrypt/src/wc_port.c ****     }
2276:../src/wolfcrypt/src/wc_port.c **** 
2277:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex* m)
2278:../src/wolfcrypt/src/wc_port.c ****     {
2279:../src/wolfcrypt/src/wc_port.c ****         OS_MUTEX_Unlock((OS_MUTEX*) m);
2280:../src/wolfcrypt/src/wc_port.c ****         return 0;
2281:../src/wolfcrypt/src/wc_port.c ****     }
2282:../src/wolfcrypt/src/wc_port.c **** 
2283:../src/wolfcrypt/src/wc_port.c **** #elif defined(WOLFSSL_USER_MUTEX)
2284:../src/wolfcrypt/src/wc_port.c **** 
2285:../src/wolfcrypt/src/wc_port.c ****     /* Use user own mutex */
2286:../src/wolfcrypt/src/wc_port.c **** 
2287:../src/wolfcrypt/src/wc_port.c ****     /*
2288:../src/wolfcrypt/src/wc_port.c ****     int wc_InitMutex(wolfSSL_Mutex* m) { ... }
2289:../src/wolfcrypt/src/wc_port.c ****     int wc_FreeMutex(wolfSSL_Mutex *m) { ... }
2290:../src/wolfcrypt/src/wc_port.c ****     int wc_LockMutex(wolfSSL_Mutex *m) { ... }
2291:../src/wolfcrypt/src/wc_port.c ****     int wc_UnLockMutex(wolfSSL_Mutex *m) { ... }
2292:../src/wolfcrypt/src/wc_port.c ****     */
2293:../src/wolfcrypt/src/wc_port.c **** 
2294:../src/wolfcrypt/src/wc_port.c **** #else
2295:../src/wolfcrypt/src/wc_port.c ****     #warning No mutex handling defined
2296:../src/wolfcrypt/src/wc_port.c **** 
2297:../src/wolfcrypt/src/wc_port.c **** #endif
2298:../src/wolfcrypt/src/wc_port.c **** 
2299:../src/wolfcrypt/src/wc_port.c **** #ifndef NO_ASN_TIME
2300:../src/wolfcrypt/src/wc_port.c **** #if defined(_WIN32_WCE)
2301:../src/wolfcrypt/src/wc_port.c **** time_t windows_time(time_t* timer)
2302:../src/wolfcrypt/src/wc_port.c **** {
2303:../src/wolfcrypt/src/wc_port.c ****     SYSTEMTIME     sysTime;
2304:../src/wolfcrypt/src/wc_port.c ****     FILETIME       fTime;
2305:../src/wolfcrypt/src/wc_port.c ****     ULARGE_INTEGER intTime;
2306:../src/wolfcrypt/src/wc_port.c **** 
2307:../src/wolfcrypt/src/wc_port.c **** 
2308:../src/wolfcrypt/src/wc_port.c ****     GetSystemTime(&sysTime);
2309:../src/wolfcrypt/src/wc_port.c ****     SystemTimeToFileTime(&sysTime, &fTime);
2310:../src/wolfcrypt/src/wc_port.c **** 
2311:../src/wolfcrypt/src/wc_port.c ****     XMEMCPY(&intTime, &fTime, sizeof(FILETIME));
2312:../src/wolfcrypt/src/wc_port.c ****     /* subtract EPOCH */
2313:../src/wolfcrypt/src/wc_port.c ****     intTime.QuadPart -= 0x19db1ded53e8000;
2314:../src/wolfcrypt/src/wc_port.c ****     /* to secs */
2315:../src/wolfcrypt/src/wc_port.c ****     intTime.QuadPart /= 10000000;
2316:../src/wolfcrypt/src/wc_port.c **** 
2317:../src/wolfcrypt/src/wc_port.c ****     if (timer != NULL)
2318:../src/wolfcrypt/src/wc_port.c ****         *timer = (time_t)intTime.QuadPart;
2319:../src/wolfcrypt/src/wc_port.c **** 
2320:../src/wolfcrypt/src/wc_port.c ****     return (time_t)intTime.QuadPart;
2321:../src/wolfcrypt/src/wc_port.c **** }
2322:../src/wolfcrypt/src/wc_port.c **** #endif /*  _WIN32_WCE */
2323:../src/wolfcrypt/src/wc_port.c **** 
2324:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_APACHE_MYNEWT)
2325:../src/wolfcrypt/src/wc_port.c **** #include "os/os_time.h"
2326:../src/wolfcrypt/src/wc_port.c **** 
2327:../src/wolfcrypt/src/wc_port.c **** time_t mynewt_time(time_t* timer)
2328:../src/wolfcrypt/src/wc_port.c **** {
2329:../src/wolfcrypt/src/wc_port.c ****     time_t now;
2330:../src/wolfcrypt/src/wc_port.c ****     struct os_timeval tv;
2331:../src/wolfcrypt/src/wc_port.c ****     os_gettimeofday(&tv, NULL);
2332:../src/wolfcrypt/src/wc_port.c ****     now = (time_t)tv.tv_sec;
2333:../src/wolfcrypt/src/wc_port.c ****     if(timer != NULL) {
2334:../src/wolfcrypt/src/wc_port.c ****         *timer = now;
2335:../src/wolfcrypt/src/wc_port.c ****     }
2336:../src/wolfcrypt/src/wc_port.c ****     return now;
2337:../src/wolfcrypt/src/wc_port.c **** }
2338:../src/wolfcrypt/src/wc_port.c **** #endif /* WOLFSSL_APACHE_MYNEWT */
2339:../src/wolfcrypt/src/wc_port.c **** 
2340:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_GMTIME)
2341:../src/wolfcrypt/src/wc_port.c **** struct tm* gmtime(const time_t* timer)
2342:../src/wolfcrypt/src/wc_port.c **** {
2343:../src/wolfcrypt/src/wc_port.c ****     #define YEAR0          1900
2344:../src/wolfcrypt/src/wc_port.c ****     #define EPOCH_YEAR     1970
2345:../src/wolfcrypt/src/wc_port.c ****     #define SECS_DAY       (24L * 60L * 60L)
2346:../src/wolfcrypt/src/wc_port.c ****     #define LEAPYEAR(year) (!((year) % 4) && (((year) % 100) || !((year) %400)))
2347:../src/wolfcrypt/src/wc_port.c ****     #define YEARSIZE(year) (LEAPYEAR(year) ? 366 : 365)
2348:../src/wolfcrypt/src/wc_port.c **** 
2349:../src/wolfcrypt/src/wc_port.c ****     static const int _ytab[2][12] =
2350:../src/wolfcrypt/src/wc_port.c ****     {
2351:../src/wolfcrypt/src/wc_port.c ****         {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
2352:../src/wolfcrypt/src/wc_port.c ****         {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
2353:../src/wolfcrypt/src/wc_port.c ****     };
2354:../src/wolfcrypt/src/wc_port.c **** 
2355:../src/wolfcrypt/src/wc_port.c ****     static struct tm st_time;
2356:../src/wolfcrypt/src/wc_port.c ****     struct tm* ret = &st_time;
2357:../src/wolfcrypt/src/wc_port.c ****     time_t secs = *timer;
2358:../src/wolfcrypt/src/wc_port.c ****     unsigned long dayclock, dayno;
2359:../src/wolfcrypt/src/wc_port.c ****     int year = EPOCH_YEAR;
2360:../src/wolfcrypt/src/wc_port.c **** 
2361:../src/wolfcrypt/src/wc_port.c ****     dayclock = (unsigned long)secs % SECS_DAY;
2362:../src/wolfcrypt/src/wc_port.c ****     dayno    = (unsigned long)secs / SECS_DAY;
2363:../src/wolfcrypt/src/wc_port.c **** 
2364:../src/wolfcrypt/src/wc_port.c ****     ret->tm_sec  = (int) dayclock % 60;
2365:../src/wolfcrypt/src/wc_port.c ****     ret->tm_min  = (int)(dayclock % 3600) / 60;
2366:../src/wolfcrypt/src/wc_port.c ****     ret->tm_hour = (int) dayclock / 3600;
2367:../src/wolfcrypt/src/wc_port.c ****     ret->tm_wday = (int) (dayno + 4) % 7;        /* day 0 a Thursday */
2368:../src/wolfcrypt/src/wc_port.c **** 
2369:../src/wolfcrypt/src/wc_port.c ****     while(dayno >= (unsigned long)YEARSIZE(year)) {
2370:../src/wolfcrypt/src/wc_port.c ****         dayno -= YEARSIZE(year);
2371:../src/wolfcrypt/src/wc_port.c ****         year++;
2372:../src/wolfcrypt/src/wc_port.c ****     }
2373:../src/wolfcrypt/src/wc_port.c **** 
2374:../src/wolfcrypt/src/wc_port.c ****     ret->tm_year = year - YEAR0;
2375:../src/wolfcrypt/src/wc_port.c ****     ret->tm_yday = (int)dayno;
2376:../src/wolfcrypt/src/wc_port.c ****     ret->tm_mon  = 0;
2377:../src/wolfcrypt/src/wc_port.c **** 
2378:../src/wolfcrypt/src/wc_port.c ****     while(dayno >= (unsigned long)_ytab[LEAPYEAR(year)][ret->tm_mon]) {
2379:../src/wolfcrypt/src/wc_port.c ****         dayno -= _ytab[LEAPYEAR(year)][ret->tm_mon];
2380:../src/wolfcrypt/src/wc_port.c ****         ret->tm_mon++;
2381:../src/wolfcrypt/src/wc_port.c ****     }
2382:../src/wolfcrypt/src/wc_port.c **** 
2383:../src/wolfcrypt/src/wc_port.c ****     ret->tm_mday  = (int)++dayno;
2384:../src/wolfcrypt/src/wc_port.c **** #ifndef WOLFSSL_LINUXKM
2385:../src/wolfcrypt/src/wc_port.c ****     ret->tm_isdst = 0;
2386:../src/wolfcrypt/src/wc_port.c **** #endif
2387:../src/wolfcrypt/src/wc_port.c **** 
2388:../src/wolfcrypt/src/wc_port.c ****     return ret;
2389:../src/wolfcrypt/src/wc_port.c **** }
2390:../src/wolfcrypt/src/wc_port.c **** #endif /* WOLFSSL_GMTIME */
2391:../src/wolfcrypt/src/wc_port.c **** 
2392:../src/wolfcrypt/src/wc_port.c **** 
2393:../src/wolfcrypt/src/wc_port.c **** #if defined(HAVE_RTP_SYS)
2394:../src/wolfcrypt/src/wc_port.c **** #define YEAR0          1900
2395:../src/wolfcrypt/src/wc_port.c **** 
2396:../src/wolfcrypt/src/wc_port.c **** struct tm* rtpsys_gmtime(const time_t* timer)       /* has a gmtime() but hangs */
2397:../src/wolfcrypt/src/wc_port.c **** {
2398:../src/wolfcrypt/src/wc_port.c ****     static struct tm st_time;
2399:../src/wolfcrypt/src/wc_port.c ****     struct tm* ret = &st_time;
2400:../src/wolfcrypt/src/wc_port.c **** 
2401:../src/wolfcrypt/src/wc_port.c ****     DC_RTC_CALENDAR cal;
2402:../src/wolfcrypt/src/wc_port.c ****     dc_rtc_time_get(&cal, TRUE);
2403:../src/wolfcrypt/src/wc_port.c **** 
2404:../src/wolfcrypt/src/wc_port.c ****     ret->tm_year  = cal.year - YEAR0;       /* gm starts at 1900 */
2405:../src/wolfcrypt/src/wc_port.c ****     ret->tm_mon   = cal.month - 1;          /* gm starts at 0 */
2406:../src/wolfcrypt/src/wc_port.c ****     ret->tm_mday  = cal.day;
2407:../src/wolfcrypt/src/wc_port.c ****     ret->tm_hour  = cal.hour;
2408:../src/wolfcrypt/src/wc_port.c ****     ret->tm_min   = cal.minute;
2409:../src/wolfcrypt/src/wc_port.c ****     ret->tm_sec   = cal.second;
2410:../src/wolfcrypt/src/wc_port.c **** 
2411:../src/wolfcrypt/src/wc_port.c ****     return ret;
2412:../src/wolfcrypt/src/wc_port.c **** }
2413:../src/wolfcrypt/src/wc_port.c **** 
2414:../src/wolfcrypt/src/wc_port.c **** #endif /* HAVE_RTP_SYS */
2415:../src/wolfcrypt/src/wc_port.c **** 
2416:../src/wolfcrypt/src/wc_port.c **** 
2417:../src/wolfcrypt/src/wc_port.c **** #if defined(MICROCHIP_TCPIP_V5) || defined(MICROCHIP_TCPIP)
2418:../src/wolfcrypt/src/wc_port.c **** 
2419:../src/wolfcrypt/src/wc_port.c **** /*
2420:../src/wolfcrypt/src/wc_port.c ****  * time() is just a stub in Microchip libraries. We need our own
2421:../src/wolfcrypt/src/wc_port.c ****  * implementation. Use SNTP client to get seconds since epoch.
2422:../src/wolfcrypt/src/wc_port.c ****  */
2423:../src/wolfcrypt/src/wc_port.c **** time_t pic32_time(time_t* timer)
2424:../src/wolfcrypt/src/wc_port.c **** {
2425:../src/wolfcrypt/src/wc_port.c **** #ifdef MICROCHIP_TCPIP_V5
2426:../src/wolfcrypt/src/wc_port.c ****     DWORD sec = 0;
2427:../src/wolfcrypt/src/wc_port.c **** #else
2428:../src/wolfcrypt/src/wc_port.c ****     word32 sec = 0;
2429:../src/wolfcrypt/src/wc_port.c **** #endif
2430:../src/wolfcrypt/src/wc_port.c **** 
2431:../src/wolfcrypt/src/wc_port.c **** #ifdef MICROCHIP_MPLAB_HARMONY
2432:../src/wolfcrypt/src/wc_port.c ****     sec = TCPIP_SNTP_UTCSecondsGet();
2433:../src/wolfcrypt/src/wc_port.c **** #else
2434:../src/wolfcrypt/src/wc_port.c ****     sec = SNTPGetUTCSeconds();
2435:../src/wolfcrypt/src/wc_port.c **** #endif
2436:../src/wolfcrypt/src/wc_port.c **** 
2437:../src/wolfcrypt/src/wc_port.c ****     if (timer != NULL)
2438:../src/wolfcrypt/src/wc_port.c ****         *timer = (time_t)sec;
2439:../src/wolfcrypt/src/wc_port.c **** 
2440:../src/wolfcrypt/src/wc_port.c ****     return (time_t)sec;
2441:../src/wolfcrypt/src/wc_port.c **** }
2442:../src/wolfcrypt/src/wc_port.c **** 
2443:../src/wolfcrypt/src/wc_port.c **** #endif /* MICROCHIP_TCPIP || MICROCHIP_TCPIP_V5 */
2444:../src/wolfcrypt/src/wc_port.c **** 
2445:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_DEOS)
2446:../src/wolfcrypt/src/wc_port.c **** 
2447:../src/wolfcrypt/src/wc_port.c **** time_t deos_time(time_t* timer)
2448:../src/wolfcrypt/src/wc_port.c **** {
2449:../src/wolfcrypt/src/wc_port.c ****     const word32 systemTickTimeInHz = 1000000 / systemTickInMicroseconds();
2450:../src/wolfcrypt/src/wc_port.c ****     const volatile word32 *systemTickPtr = systemTickPointer();
2451:../src/wolfcrypt/src/wc_port.c **** 
2452:../src/wolfcrypt/src/wc_port.c ****     if (timer != NULL)
2453:../src/wolfcrypt/src/wc_port.c ****         *timer = *systemTickPtr/systemTickTimeInHz;
2454:../src/wolfcrypt/src/wc_port.c **** 
2455:../src/wolfcrypt/src/wc_port.c ****     #if defined(CURRENT_UNIX_TIMESTAMP)
2456:../src/wolfcrypt/src/wc_port.c ****         /* CURRENT_UNIX_TIMESTAMP is seconds since Jan 01 1970. (UTC) */
2457:../src/wolfcrypt/src/wc_port.c ****         return (time_t) (*systemTickPtr/systemTickTimeInHz) + CURRENT_UNIX_TIMESTAMP;
2458:../src/wolfcrypt/src/wc_port.c ****     #else
2459:../src/wolfcrypt/src/wc_port.c ****         return (time_t) *systemTickPtr/systemTickTimeInHz;
2460:../src/wolfcrypt/src/wc_port.c ****     #endif
2461:../src/wolfcrypt/src/wc_port.c **** }
2462:../src/wolfcrypt/src/wc_port.c **** #endif /* WOLFSSL_DEOS */
2463:../src/wolfcrypt/src/wc_port.c **** 
2464:../src/wolfcrypt/src/wc_port.c **** #if defined(MICRIUM)
2465:../src/wolfcrypt/src/wc_port.c **** 
2466:../src/wolfcrypt/src/wc_port.c **** time_t micrium_time(time_t* timer)
2467:../src/wolfcrypt/src/wc_port.c **** {
2468:../src/wolfcrypt/src/wc_port.c ****     CLK_TS_SEC sec;
2469:../src/wolfcrypt/src/wc_port.c **** 
2470:../src/wolfcrypt/src/wc_port.c ****     Clk_GetTS_Unix(&sec);
2471:../src/wolfcrypt/src/wc_port.c **** 
2472:../src/wolfcrypt/src/wc_port.c ****     if (timer != NULL)
2473:../src/wolfcrypt/src/wc_port.c ****         *timer = sec;
2474:../src/wolfcrypt/src/wc_port.c **** 
2475:../src/wolfcrypt/src/wc_port.c ****     return (time_t) sec;
2476:../src/wolfcrypt/src/wc_port.c **** }
2477:../src/wolfcrypt/src/wc_port.c **** 
2478:../src/wolfcrypt/src/wc_port.c **** #endif /* MICRIUM */
2479:../src/wolfcrypt/src/wc_port.c **** 
2480:../src/wolfcrypt/src/wc_port.c **** #if defined(FREESCALE_MQX) || defined(FREESCALE_KSDK_MQX)
2481:../src/wolfcrypt/src/wc_port.c **** 
2482:../src/wolfcrypt/src/wc_port.c **** time_t mqx_time(time_t* timer)
2483:../src/wolfcrypt/src/wc_port.c **** {
2484:../src/wolfcrypt/src/wc_port.c ****     TIME_STRUCT time_s;
2485:../src/wolfcrypt/src/wc_port.c **** 
2486:../src/wolfcrypt/src/wc_port.c ****     _time_get(&time_s);
2487:../src/wolfcrypt/src/wc_port.c **** 
2488:../src/wolfcrypt/src/wc_port.c ****     if (timer != NULL)
2489:../src/wolfcrypt/src/wc_port.c ****         *timer = (time_t)time_s.SECONDS;
2490:../src/wolfcrypt/src/wc_port.c **** 
2491:../src/wolfcrypt/src/wc_port.c ****     return (time_t)time_s.SECONDS;
2492:../src/wolfcrypt/src/wc_port.c **** }
2493:../src/wolfcrypt/src/wc_port.c **** 
2494:../src/wolfcrypt/src/wc_port.c **** #endif /* FREESCALE_MQX || FREESCALE_KSDK_MQX */
2495:../src/wolfcrypt/src/wc_port.c **** 
2496:../src/wolfcrypt/src/wc_port.c **** 
2497:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_TIRTOS) && defined(USER_TIME)
2498:../src/wolfcrypt/src/wc_port.c **** 
2499:../src/wolfcrypt/src/wc_port.c **** time_t XTIME(time_t * timer)
2500:../src/wolfcrypt/src/wc_port.c **** {
2501:../src/wolfcrypt/src/wc_port.c ****     time_t sec = 0;
2502:../src/wolfcrypt/src/wc_port.c **** 
2503:../src/wolfcrypt/src/wc_port.c ****     sec = (time_t) Seconds_get();
2504:../src/wolfcrypt/src/wc_port.c **** 
2505:../src/wolfcrypt/src/wc_port.c ****     if (timer != NULL)
2506:../src/wolfcrypt/src/wc_port.c ****         *timer = sec;
2507:../src/wolfcrypt/src/wc_port.c **** 
2508:../src/wolfcrypt/src/wc_port.c ****     return sec;
2509:../src/wolfcrypt/src/wc_port.c **** }
2510:../src/wolfcrypt/src/wc_port.c **** 
2511:../src/wolfcrypt/src/wc_port.c **** #endif /* WOLFSSL_TIRTOS */
2512:../src/wolfcrypt/src/wc_port.c **** 
2513:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_XILINX)
2514:../src/wolfcrypt/src/wc_port.c **** #include "xrtcpsu.h"
2515:../src/wolfcrypt/src/wc_port.c **** 
2516:../src/wolfcrypt/src/wc_port.c **** time_t xilinx_time(time_t * timer)
2517:../src/wolfcrypt/src/wc_port.c **** {
2518:../src/wolfcrypt/src/wc_port.c ****     time_t sec = 0;
2519:../src/wolfcrypt/src/wc_port.c ****     XRtcPsu_Config* con;
2520:../src/wolfcrypt/src/wc_port.c ****     XRtcPsu         rtc;
2521:../src/wolfcrypt/src/wc_port.c **** 
2522:../src/wolfcrypt/src/wc_port.c ****     con = XRtcPsu_LookupConfig(XPAR_XRTCPSU_0_DEVICE_ID);
2523:../src/wolfcrypt/src/wc_port.c ****     if (con != NULL) {
2524:../src/wolfcrypt/src/wc_port.c ****         if (XRtcPsu_CfgInitialize(&rtc, con, con->BaseAddr) == XST_SUCCESS) {
2525:../src/wolfcrypt/src/wc_port.c ****             sec = (time_t)XRtcPsu_GetCurrentTime(&rtc);
2526:../src/wolfcrypt/src/wc_port.c ****         }
2527:../src/wolfcrypt/src/wc_port.c ****         else {
2528:../src/wolfcrypt/src/wc_port.c ****             WOLFSSL_MSG("Unable to initialize RTC");
2529:../src/wolfcrypt/src/wc_port.c ****         }
2530:../src/wolfcrypt/src/wc_port.c ****     }
2531:../src/wolfcrypt/src/wc_port.c **** 
2532:../src/wolfcrypt/src/wc_port.c ****     if (timer != NULL)
2533:../src/wolfcrypt/src/wc_port.c ****         *timer = sec;
2534:../src/wolfcrypt/src/wc_port.c **** 
2535:../src/wolfcrypt/src/wc_port.c ****     return sec;
2536:../src/wolfcrypt/src/wc_port.c **** }
2537:../src/wolfcrypt/src/wc_port.c **** 
2538:../src/wolfcrypt/src/wc_port.c **** #endif /* WOLFSSL_XILINX */
2539:../src/wolfcrypt/src/wc_port.c **** 
2540:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_ZEPHYR)
2541:../src/wolfcrypt/src/wc_port.c **** 
2542:../src/wolfcrypt/src/wc_port.c **** time_t z_time(time_t * timer)
2543:../src/wolfcrypt/src/wc_port.c **** {
2544:../src/wolfcrypt/src/wc_port.c ****     struct timespec ts;
2545:../src/wolfcrypt/src/wc_port.c **** 
2546:../src/wolfcrypt/src/wc_port.c ****     if (clock_gettime(CLOCK_REALTIME, &ts) == 0)
2547:../src/wolfcrypt/src/wc_port.c ****         if (timer != NULL)
2548:../src/wolfcrypt/src/wc_port.c ****             *timer = ts.tv_sec;
2549:../src/wolfcrypt/src/wc_port.c **** 
2550:../src/wolfcrypt/src/wc_port.c ****     return ts.tv_sec;
2551:../src/wolfcrypt/src/wc_port.c **** }
2552:../src/wolfcrypt/src/wc_port.c **** 
2553:../src/wolfcrypt/src/wc_port.c **** #endif /* WOLFSSL_ZEPHYR */
2554:../src/wolfcrypt/src/wc_port.c **** 
2555:../src/wolfcrypt/src/wc_port.c **** 
2556:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_WICED)
2557:../src/wolfcrypt/src/wc_port.c ****     #ifndef WOLFSSL_WICED_PSEUDO_UNIX_EPOCH_TIME
2558:../src/wolfcrypt/src/wc_port.c ****         #error Please define WOLFSSL_WICED_PSEUDO_UNIX_EPOCH_TIME at build time.
2559:../src/wolfcrypt/src/wc_port.c ****     #endif /* WOLFSSL_WICED_PSEUDO_UNIX_EPOCH_TIME */
2560:../src/wolfcrypt/src/wc_port.c **** 
2561:../src/wolfcrypt/src/wc_port.c **** time_t wiced_pseudo_unix_epoch_time(time_t * timer)
2562:../src/wolfcrypt/src/wc_port.c **** {
2563:../src/wolfcrypt/src/wc_port.c ****     time_t epoch_time;
2564:../src/wolfcrypt/src/wc_port.c ****     /* The time() function return uptime on WICED platform. */
2565:../src/wolfcrypt/src/wc_port.c ****     epoch_time = time(NULL) + WOLFSSL_WICED_PSEUDO_UNIX_EPOCH_TIME;
2566:../src/wolfcrypt/src/wc_port.c **** 
2567:../src/wolfcrypt/src/wc_port.c ****     if (timer != NULL) {
2568:../src/wolfcrypt/src/wc_port.c ****         *timer = epoch_time;
2569:../src/wolfcrypt/src/wc_port.c ****     }
2570:../src/wolfcrypt/src/wc_port.c ****     return epoch_time;
2571:../src/wolfcrypt/src/wc_port.c **** }
2572:../src/wolfcrypt/src/wc_port.c **** #endif /* WOLFSSL_WICED */
2573:../src/wolfcrypt/src/wc_port.c **** 
2574:../src/wolfcrypt/src/wc_port.c **** #ifdef WOLFSSL_TELIT_M2MB
2575:../src/wolfcrypt/src/wc_port.c ****     time_t m2mb_xtime(time_t * timer)
2576:../src/wolfcrypt/src/wc_port.c ****     {
2577:../src/wolfcrypt/src/wc_port.c ****         time_t myTime = 0;
2578:../src/wolfcrypt/src/wc_port.c ****         INT32 fd = m2mb_rtc_open("/dev/rtc0", 0);
2579:../src/wolfcrypt/src/wc_port.c ****         if (fd != -1) {
2580:../src/wolfcrypt/src/wc_port.c ****             M2MB_RTC_TIMEVAL_T timeval;
2581:../src/wolfcrypt/src/wc_port.c **** 
2582:../src/wolfcrypt/src/wc_port.c ****             m2mb_rtc_ioctl(fd, M2MB_RTC_IOCTL_GET_TIMEVAL, &timeval);
2583:../src/wolfcrypt/src/wc_port.c **** 
2584:../src/wolfcrypt/src/wc_port.c ****             myTime = timeval.sec;
2585:../src/wolfcrypt/src/wc_port.c **** 
2586:../src/wolfcrypt/src/wc_port.c ****             m2mb_rtc_close(fd);
2587:../src/wolfcrypt/src/wc_port.c ****         }
2588:../src/wolfcrypt/src/wc_port.c ****         return myTime;
2589:../src/wolfcrypt/src/wc_port.c ****     }
2590:../src/wolfcrypt/src/wc_port.c ****     #ifdef WOLFSSL_TLS13
2591:../src/wolfcrypt/src/wc_port.c ****     time_t m2mb_xtime_ms(time_t * timer)
2592:../src/wolfcrypt/src/wc_port.c ****     {
2593:../src/wolfcrypt/src/wc_port.c ****         time_t myTime = 0;
2594:../src/wolfcrypt/src/wc_port.c ****         INT32 fd = m2mb_rtc_open("/dev/rtc0", 0);
2595:../src/wolfcrypt/src/wc_port.c ****         if (fd != -1) {
2596:../src/wolfcrypt/src/wc_port.c ****             M2MB_RTC_TIMEVAL_T timeval;
2597:../src/wolfcrypt/src/wc_port.c **** 
2598:../src/wolfcrypt/src/wc_port.c ****             m2mb_rtc_ioctl(fd, M2MB_RTC_IOCTL_GET_TIMEVAL, &timeval);
2599:../src/wolfcrypt/src/wc_port.c **** 
2600:../src/wolfcrypt/src/wc_port.c ****             myTime = timeval.sec + timeval.msec;
2601:../src/wolfcrypt/src/wc_port.c **** 
2602:../src/wolfcrypt/src/wc_port.c ****             m2mb_rtc_close(fd);
2603:../src/wolfcrypt/src/wc_port.c ****         }
2604:../src/wolfcrypt/src/wc_port.c ****         return myTime;
2605:../src/wolfcrypt/src/wc_port.c ****     }
2606:../src/wolfcrypt/src/wc_port.c ****     #endif /* WOLFSSL_TLS13 */
2607:../src/wolfcrypt/src/wc_port.c ****     #ifndef NO_CRYPT_BENCHMARK
2608:../src/wolfcrypt/src/wc_port.c ****     double m2mb_xtime_bench(int reset)
2609:../src/wolfcrypt/src/wc_port.c ****     {
2610:../src/wolfcrypt/src/wc_port.c ****         double myTime = 0;
2611:../src/wolfcrypt/src/wc_port.c ****         INT32 fd = m2mb_rtc_open("/dev/rtc0", 0);
2612:../src/wolfcrypt/src/wc_port.c ****         if (fd != -1) {
2613:../src/wolfcrypt/src/wc_port.c ****             M2MB_RTC_TIMEVAL_T timeval;
2614:../src/wolfcrypt/src/wc_port.c **** 
2615:../src/wolfcrypt/src/wc_port.c ****             m2mb_rtc_ioctl(fd, M2MB_RTC_IOCTL_GET_TIMEVAL, &timeval);
2616:../src/wolfcrypt/src/wc_port.c **** 
2617:../src/wolfcrypt/src/wc_port.c ****             myTime = (double)timeval.sec + ((double)timeval.msec / 1000);
2618:../src/wolfcrypt/src/wc_port.c **** 
2619:../src/wolfcrypt/src/wc_port.c ****             m2mb_rtc_close(fd);
2620:../src/wolfcrypt/src/wc_port.c ****         }
2621:../src/wolfcrypt/src/wc_port.c ****         return myTime;
2622:../src/wolfcrypt/src/wc_port.c ****     }
2623:../src/wolfcrypt/src/wc_port.c ****     #endif /* !NO_CRYPT_BENCHMARK */
2624:../src/wolfcrypt/src/wc_port.c **** #endif /* WOLFSSL_TELIT_M2MB */
2625:../src/wolfcrypt/src/wc_port.c **** 
2626:../src/wolfcrypt/src/wc_port.c **** 
2627:../src/wolfcrypt/src/wc_port.c **** #if defined(WOLFSSL_LINUXKM)
2628:../src/wolfcrypt/src/wc_port.c **** time_t time(time_t * timer)
2629:../src/wolfcrypt/src/wc_port.c **** {
2630:../src/wolfcrypt/src/wc_port.c ****     time_t ret;
2631:../src/wolfcrypt/src/wc_port.c **** #if LINUX_VERSION_CODE < KERNEL_VERSION(4, 0, 0)
2632:../src/wolfcrypt/src/wc_port.c ****     struct timespec ts;
2633:../src/wolfcrypt/src/wc_port.c ****     getnstimeofday(&ts);
2634:../src/wolfcrypt/src/wc_port.c ****     ret = ts.tv_sec;
2635:../src/wolfcrypt/src/wc_port.c **** #else
2636:../src/wolfcrypt/src/wc_port.c ****     struct timespec64 ts;
2637:../src/wolfcrypt/src/wc_port.c **** #if LINUX_VERSION_CODE < KERNEL_VERSION(5, 0, 0)
2638:../src/wolfcrypt/src/wc_port.c ****     ts = current_kernel_time64();
2639:../src/wolfcrypt/src/wc_port.c **** #else
2640:../src/wolfcrypt/src/wc_port.c ****     ktime_get_coarse_real_ts64(&ts);
2641:../src/wolfcrypt/src/wc_port.c **** #endif
2642:../src/wolfcrypt/src/wc_port.c ****     ret = ts.tv_sec;
2643:../src/wolfcrypt/src/wc_port.c **** #endif
2644:../src/wolfcrypt/src/wc_port.c ****     if (timer)
2645:../src/wolfcrypt/src/wc_port.c ****         *timer = ret;
2646:../src/wolfcrypt/src/wc_port.c ****     return ret;
2647:../src/wolfcrypt/src/wc_port.c **** }
2648:../src/wolfcrypt/src/wc_port.c **** #endif /* WOLFSSL_LINUXKM */
2649:../src/wolfcrypt/src/wc_port.c **** 
2650:../src/wolfcrypt/src/wc_port.c **** #ifdef HAL_RTC_MODULE_ENABLED
2651:../src/wolfcrypt/src/wc_port.c **** extern RTC_HandleTypeDef hrtc;
2652:../src/wolfcrypt/src/wc_port.c **** time_t stm32_hal_time(time_t *t1)
2653:../src/wolfcrypt/src/wc_port.c **** {
2654:../src/wolfcrypt/src/wc_port.c ****     struct tm tm_time;
2655:../src/wolfcrypt/src/wc_port.c ****     time_t ret;
2656:../src/wolfcrypt/src/wc_port.c ****     RTC_TimeTypeDef time;
2657:../src/wolfcrypt/src/wc_port.c ****     RTC_DateTypeDef date;
2658:../src/wolfcrypt/src/wc_port.c **** 
2659:../src/wolfcrypt/src/wc_port.c ****     /* order of GetTime followed by GetDate required here due to STM32 HW
2660:../src/wolfcrypt/src/wc_port.c ****      * requirement */
2661:../src/wolfcrypt/src/wc_port.c ****     HAL_RTC_GetTime(&hrtc, &time, FORMAT_BIN);
2662:../src/wolfcrypt/src/wc_port.c ****     HAL_RTC_GetDate(&hrtc, &date, FORMAT_BIN);
2663:../src/wolfcrypt/src/wc_port.c **** 
2664:../src/wolfcrypt/src/wc_port.c ****     tm_time.tm_year  = date.Year;
2665:../src/wolfcrypt/src/wc_port.c ****     tm_time.tm_mon   = date.Month - 1;          /* gm starts at 0 */
2666:../src/wolfcrypt/src/wc_port.c ****     tm_time.tm_mday  = date.Date;
2667:../src/wolfcrypt/src/wc_port.c ****     tm_time.tm_hour  = time.Hours;
2668:../src/wolfcrypt/src/wc_port.c ****     tm_time.tm_min   = time.Minutes;
2669:../src/wolfcrypt/src/wc_port.c ****     tm_time.tm_sec   = time.Seconds;
2670:../src/wolfcrypt/src/wc_port.c **** 
2671:../src/wolfcrypt/src/wc_port.c ****     ret = mktime(&tm_time);
2672:../src/wolfcrypt/src/wc_port.c ****     if (t1 != NULL)
2673:../src/wolfcrypt/src/wc_port.c ****         *t1 = ret;
2674:../src/wolfcrypt/src/wc_port.c ****     return ret;
2675:../src/wolfcrypt/src/wc_port.c **** }
2676:../src/wolfcrypt/src/wc_port.c **** #endif /* HAL_RTC_MODULE_ENABLED */
2677:../src/wolfcrypt/src/wc_port.c **** 
2678:../src/wolfcrypt/src/wc_port.c **** #endif /* !NO_ASN_TIME */
2679:../src/wolfcrypt/src/wc_port.c **** 
2680:../src/wolfcrypt/src/wc_port.c **** #if !defined(WOLFSSL_LEANPSK) && !defined(STRING_USER)
2681:../src/wolfcrypt/src/wc_port.c **** char* mystrnstr(const char* s1, const char* s2, unsigned int n)
2682:../src/wolfcrypt/src/wc_port.c **** {
 726                             		.loc 1 2682 1
 727 0000 7E AA                   		push.l	r10
 728                             	.LCFI22:
 729 0002 71 0A F0                		add	#-16, r0, r10
 730                             	.LCFI23:
 731 0005 EF A0                   		mov.L	r10, r0
 732 0007 E7 A1 01                		mov.L	r1, 4[r10]
 733 000a E7 A2 02                		mov.L	r2, 8[r10]
 734 000d E7 A3 03                		mov.L	r3, 12[r10]
2683:../src/wolfcrypt/src/wc_port.c ****     unsigned int s2_len = (unsigned int)XSTRLEN(s2);
 735                             		.loc 1 2683 41
 736 0010 ED A1 02                		mov.L	8[r10], r1
 737 0013 05 00 00 00             		bsr	_strlen
 738 0017 E3 A1                   		mov.L	r1, [r10]
2684:../src/wolfcrypt/src/wc_port.c **** 
2685:../src/wolfcrypt/src/wc_port.c ****     if (s2_len == 0)
 739                             		.loc 1 2685 8
 740 0019 EC A5                   		mov.L	[r10], r5
 741 001b 61 05                   		cmp	#0, r5
 742 001d 21 3F                   		bne	.L72
2686:../src/wolfcrypt/src/wc_port.c ****         return (char*)s1;
 743                             		.loc 1 2686 16
 744 001f ED A5 01                		mov.L	4[r10], r5
 745 0022 2E 50                   		bra	.L71
 746                             	.L75:
2687:../src/wolfcrypt/src/wc_port.c **** 
2688:../src/wolfcrypt/src/wc_port.c ****     while (n >= s2_len && s1[0]) {
2689:../src/wolfcrypt/src/wc_port.c ****         if (s1[0] == s2[0])
 747                             		.loc 1 2689 15
 748 0024 ED A5 01                		mov.L	4[r10], r5
 749 0027 CC 54                   		mov.B	[r5], r4
 750                             		.loc 1 2689 24
 751 0029 ED A5 02                		mov.L	8[r10], r5
 752 002c CC 55                   		mov.B	[r5], r5
 753                             		.loc 1 2689 12
 754 002e 5B 44                   		movu.B	r4, r4
 755 0030 5B 55                   		movu.B	r5, r5
 756 0032 47 54                   		cmp	r5, r4
 757 0034 21 18                   		bne	.L73
2690:../src/wolfcrypt/src/wc_port.c ****             if (XMEMCMP(s1, s2, s2_len) == 0)
 758                             		.loc 1 2690 17
 759 0036 EC A3                   		mov.L	[r10], r3
 760 0038 ED A2 02                		mov.L	8[r10], r2
 761 003b ED A1 01                		mov.L	4[r10], r1
 762 003e 05 00 00 00             		bsr	_memcmp
 763 0042 EF 15                   		mov.L	r1, r5
 764                             		.loc 1 2690 16
 765 0044 61 05                   		cmp	#0, r5
 766 0046 1E                      		bne	.L73
2691:../src/wolfcrypt/src/wc_port.c ****                 return (char*)s1;
 767                             		.loc 1 2691 24
 768 0047 ED A5 01                		mov.L	4[r10], r5
 769 004a 2E 28                   		bra	.L71
 770                             	.L73:
2692:../src/wolfcrypt/src/wc_port.c ****         s1++;
 771                             		.loc 1 2692 11
 772 004c ED A5 01                		mov.L	4[r10], r5
 773 004f 62 15                   		add	#1, r5
 774 0051 E7 A5 01                		mov.L	r5, 4[r10]
2693:../src/wolfcrypt/src/wc_port.c ****         n--;
 775                             		.loc 1 2693 10
 776 0054 ED A5 03                		mov.L	12[r10], r5
 777 0057 60 15                   		sub	#1, r5
 778 0059 E7 A5 03                		mov.L	r5, 12[r10]
 779                             	.L72:
2688:../src/wolfcrypt/src/wc_port.c ****         if (s1[0] == s2[0])
 780                             		.loc 1 2688 11
 781 005c ED A4 03                		mov.L	12[r10], r4
 782 005f EC A5                   		mov.L	[r10], r5
 783 0061 47 54                   		cmp	r5, r4
 784 0063 23 0D                   		bltu	.L74
2688:../src/wolfcrypt/src/wc_port.c ****         if (s1[0] == s2[0])
 785                             		.loc 1 2688 29 discriminator 1
 786 0065 ED A5 01                		mov.L	4[r10], r5
 787 0068 CC 55                   		mov.B	[r5], r5
2688:../src/wolfcrypt/src/wc_port.c ****         if (s1[0] == s2[0])
 788                             		.loc 1 2688 24 discriminator 1
 789 006a 5B 55                   		movu.B	r5, r5
 790 006c 61 05                   		cmp	#0, r5
 791 006e 21 B6                   		bne	.L75
 792                             	.L74:
2694:../src/wolfcrypt/src/wc_port.c ****     }
2695:../src/wolfcrypt/src/wc_port.c **** 
2696:../src/wolfcrypt/src/wc_port.c ****     return NULL;
 793                             		.loc 1 2696 12
 794 0070 66 05                   		mov.L	#0, r5
 795                             	.L71:
2697:../src/wolfcrypt/src/wc_port.c **** }
 796                             		.loc 1 2697 1
 797 0072 EF 51                   		mov.L	r5, r1
 798 0074 3F AA 05                		rtsd	#20, r10-r10
 799                             	.LFE12:
 1047                             	.Letext0:
 1048                             		.file 2 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/wc_port.h"
 1049                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 1050                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1051                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1052                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1053                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1054                             		.file 8 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 1055                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 1056                             		.file 10 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\incl
 1057                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha256.h"
 1058                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/wolfmath.h"
 1059                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/ecc.h"
