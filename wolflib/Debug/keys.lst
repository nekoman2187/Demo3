   1                             		.file	"keys.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.rodata.c25519_base_x,"a"
   7                             	_c25519_base_x:
   8 0000 09                      		.byte	9
   9 0001 00 00 00 00 00 00 00 00 		.zero	31
   9      00 00 00 00 00 00 00 00 
   9      00 00 00 00 00 00 00 00 
   9      00 00 00 00 00 00 00 
  10                             		.section	.rodata.f25519_zero,"a"
  13                             	_f25519_zero:
  14 0000 00 00 00 00 00 00 00 00 		.zero	32
  14      00 00 00 00 00 00 00 00 
  14      00 00 00 00 00 00 00 00 
  14      00 00 00 00 00 00 00 00 
  15                             		.section	.rodata.f25519_one,"a"
  18                             	_f25519_one:
  19 0000 01                      		.byte	1
  20 0001 00 00 00 00 00 00 00 00 		.zero	31
  20      00 00 00 00 00 00 00 00 
  20      00 00 00 00 00 00 00 00 
  20      00 00 00 00 00 00 00 
  21                             		.section	.rodata.fprime_zero,"a"
  24                             	_fprime_zero:
  25 0000 00 00 00 00 00 00 00 00 		.zero	32
  25      00 00 00 00 00 00 00 00 
  25      00 00 00 00 00 00 00 00 
  25      00 00 00 00 00 00 00 00 
  26                             		.section	.rodata.fprime_one,"a"
  29                             	_fprime_one:
  30 0000 01                      		.byte	1
  31 0001 00 00 00 00 00 00 00 00 		.zero	31
  31      00 00 00 00 00 00 00 00 
  31      00 00 00 00 00 00 00 00 
  31      00 00 00 00 00 00 00 
  32                             		.section	.rodata.client,"a"
  35                             	_client:
  36 0000 43                      		.byte	0x43
  37 0001 4C                      		.byte	0x4c
  38 0002 4E                      		.byte	0x4e
  39 0003 54                      		.byte	0x54
  40 0004 00                      		.byte	0
  41                             		.section	.rodata.server,"a"
  44                             	_server:
  45 0000 53                      		.byte	0x53
  46 0001 52                      		.byte	0x52
  47 0002 56                      		.byte	0x56
  48 0003 52                      		.byte	0x52
  49 0004 00                      		.byte	0
  50                             		.section	.rodata.tls_client,"a"
  53                             	_tls_client:
  54 0000 63 6C 69 65 6E 74 20 66 		.string	"client finished"
  54      69 6E 69 73 68 65 64 00 
  55                             		.section	.rodata.tls_server,"a"
  58                             	_tls_server:
  59 0000 73 65 72 76 65 72 20 66 		.string	"server finished"
  59      69 6E 69 73 68 65 64 00 
  60                             		.section C,"a",@progbits
  61                             		.p2align 2
  62                             	.LC0:
  63 0000 53 65 74 43 69 70 68 65 		.string	"SetCipherSpecs() client has an unusable suite"
  63      72 53 70 65 63 73 28 29 
  63      20 63 6C 69 65 6E 74 20 
  63      68 61 73 20 61 6E 20 75 
  63      6E 75 73 61 62 6C 65 20 
  64                             	.LC1:
  65 002e 55 6E 73 75 70 70 6F 72 		.string	"Unsupported cipher suite, SetCipherSpecs ChaCha"
  65      74 65 64 20 63 69 70 68 
  65      65 72 20 73 75 69 74 65 
  65      2C 20 53 65 74 43 69 70 
  65      68 65 72 53 70 65 63 73 
  66                             	.LC2:
  67 005e 55 6E 73 75 70 70 6F 72 		.string	"Unsupported cipher suite, SetCipherSpecs ECC"
  67      74 65 64 20 63 69 70 68 
  67      65 72 20 73 75 69 74 65 
  67      2C 20 53 65 74 43 69 70 
  67      68 65 72 53 70 65 63 73 
  68                             	.LC3:
  69 008b 55 6E 73 75 70 70 6F 72 		.string	"Unsupported cipher suite, SetCipherSpecs"
  69      74 65 64 20 63 69 70 68 
  69      65 72 20 73 75 69 74 65 
  69      2C 20 53 65 74 43 69 70 
  69      68 65 72 53 70 65 63 73 
  70                             		.section	.text.SetCipherSpecs,"ax",@progbits
  71                             		.global	_SetCipherSpecs
  73                             	_SetCipherSpecs:
  74                             	.LFB1:
  75                             		.file 1 "../src/src/keys.c"
   1:../src/src/keys.c **** /* keys.c
   2:../src/src/keys.c ****  *
   3:../src/src/keys.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/src/keys.c ****  *
   5:../src/src/keys.c ****  * This file is part of wolfSSL.
   6:../src/src/keys.c ****  *
   7:../src/src/keys.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/src/keys.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/src/keys.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/src/keys.c ****  * (at your option) any later version.
  11:../src/src/keys.c ****  *
  12:../src/src/keys.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/src/keys.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/src/keys.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/src/keys.c ****  * GNU General Public License for more details.
  16:../src/src/keys.c ****  *
  17:../src/src/keys.c ****  * You should have received a copy of the GNU General Public License
  18:../src/src/keys.c ****  * along with this program; if not, write to the Free Software
  19:../src/src/keys.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/src/keys.c ****  */
  21:../src/src/keys.c **** 
  22:../src/src/keys.c **** 
  23:../src/src/keys.c **** /* Name change compatibility layer no longer needs to be included here */
  24:../src/src/keys.c **** 
  25:../src/src/keys.c **** #ifdef HAVE_CONFIG_H
  26:../src/src/keys.c ****     #include <config.h>
  27:../src/src/keys.c **** #endif
  28:../src/src/keys.c **** 
  29:../src/src/keys.c **** #include <wolfssl/wolfcrypt/settings.h>
  30:../src/src/keys.c **** 
  31:../src/src/keys.c **** #ifndef WOLFCRYPT_ONLY
  32:../src/src/keys.c **** 
  33:../src/src/keys.c **** #include <wolfssl/internal.h>
  34:../src/src/keys.c **** #include <wolfssl/error-ssl.h>
  35:../src/src/keys.c **** #if defined(SHOW_SECRETS) || defined(CHACHA_AEAD_TEST)
  36:../src/src/keys.c ****     #ifndef NO_STDIO_FILESYSTEM
  37:../src/src/keys.c ****         #include <stdio.h>
  38:../src/src/keys.c ****     #endif
  39:../src/src/keys.c **** #endif
  40:../src/src/keys.c **** 
  41:../src/src/keys.c **** #if defined(WOLFSSL_RENESAS_SCEPROTECT) || defined(WOLFSSL_RENESAS_TSIP_TLS)
  42:../src/src/keys.c **** #include <wolfssl/wolfcrypt/port/Renesas/renesas_cmn.h>
  43:../src/src/keys.c **** #endif
  44:../src/src/keys.c **** 
  45:../src/src/keys.c **** int SetCipherSpecs(WOLFSSL* ssl)
  46:../src/src/keys.c **** {
  76                             		.loc 1 46 1
  77 0000 7E AA                   		push.l	r10
  78                             	.LCFI0:
  79 0002 71 0A FC                		add	#-4, r0, r10
  80                             	.LCFI1:
  81 0005 EF A0                   		mov.L	r10, r0
  82 0007 E3 A1                   		mov.L	r1, [r10]
  47:../src/src/keys.c **** #ifndef NO_WOLFSSL_CLIENT
  48:../src/src/keys.c ****     if (ssl->options.side == WOLFSSL_CLIENT_END) {
  83                             		.loc 1 48 27
  84 0009 EC A5                   		mov.L	[r10], r5
  85 000b ED 55 A7                		mov.L	668[r5], r5
  86 000e 75 25 60                		and	#0x60, r5
  87                             		.loc 1 48 8
  88 0011 75 55 20                		cmp	#32, r5
  89 0014 21 1F                   		bne	.L2
  49:../src/src/keys.c ****         /* server side verified before SetCipherSpecs call */
  50:../src/src/keys.c ****         if (VerifyClientSuite(ssl) != 1) {
  90                             		.loc 1 50 13
  91 0016 EC A1                   		mov.L	[r10], r1
  92 0018 05 00 00 00             		bsr	_VerifyClientSuite
  93 001c EF 15                   		mov.L	r1, r5
  94                             		.loc 1 50 12
  95 001e 61 15                   		cmp	#1, r5
  96 0020 20 13                   		beq	.L2
  51:../src/src/keys.c ****             WOLFSSL_MSG("SetCipherSpecs() client has an unusable suite");
  97                             		.loc 1 51 13
  98 0022 FB 12 00 00 00 00       		mov.L	#.LC0, r1
  99 0028 05 00 00 00             		bsr	_WOLFSSL_MSG
  52:../src/src/keys.c ****             return UNSUPPORTED_SUITE;
 100                             		.loc 1 52 20
 101 002c FB 5A 0C FE             		mov.L	#-500, r5
 102 0030 38 80 0A                		bra	.L3
 103                             	.L2:
  53:../src/src/keys.c ****         }
  54:../src/src/keys.c ****     }
  55:../src/src/keys.c **** #endif /* NO_WOLFSSL_CLIENT */
  56:../src/src/keys.c **** 
  57:../src/src/keys.c ****     /* Chacha extensions, 0xcc */
  58:../src/src/keys.c ****     if (ssl->options.cipherSuite0 == CHACHA_BYTE) {
 104                             		.loc 1 58 21
 105 0033 EC A5                   		mov.L	[r10], r5
 106 0035 CE 55 A5 02             		mov.B	677[r5], r5
 107                             		.loc 1 58 8
 108 0039 5B 55                   		movu.B	r5, r5
 109 003b 75 55 CC                		cmp	#0xcc, r5
 110 003e 21 13                   		bne	.L4
  59:../src/src/keys.c **** 
  60:../src/src/keys.c ****     switch (ssl->options.cipherSuite) {
  61:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_RSA_WITH_CHACHA20_OLD_POLY1305_SHA256
  62:../src/src/keys.c ****     case TLS_ECDHE_RSA_WITH_CHACHA20_OLD_POLY1305_SHA256:
  63:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_chacha;
  64:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
  65:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
  66:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
  67:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
  68:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
  69:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
  70:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
  71:../src/src/keys.c ****         ssl->specs.key_size              = CHACHA20_256_KEY_SIZE;
  72:../src/src/keys.c ****         ssl->specs.block_size            = CHACHA20_BLOCK_SIZE;
  73:../src/src/keys.c ****         ssl->specs.iv_size               = CHACHA20_IV_SIZE;
  74:../src/src/keys.c ****         ssl->specs.aead_mac_size         = POLY1305_AUTH_SZ;
  75:../src/src/keys.c ****         ssl->options.oldPoly             = 1; /* use old poly1305 padding */
  76:../src/src/keys.c **** 
  77:../src/src/keys.c ****         break;
  78:../src/src/keys.c **** #endif
  79:../src/src/keys.c **** 
  80:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_CHACHA20_OLD_POLY1305_SHA256
  81:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_CHACHA20_OLD_POLY1305_SHA256:
  82:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_chacha;
  83:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
  84:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
  85:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
  86:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
  87:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
  88:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
  89:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
  90:../src/src/keys.c ****         ssl->specs.key_size              = CHACHA20_256_KEY_SIZE;
  91:../src/src/keys.c ****         ssl->specs.block_size            = CHACHA20_BLOCK_SIZE;
  92:../src/src/keys.c ****         ssl->specs.iv_size               = CHACHA20_IV_SIZE;
  93:../src/src/keys.c ****         ssl->specs.aead_mac_size         = POLY1305_AUTH_SZ;
  94:../src/src/keys.c ****         ssl->options.oldPoly             = 1; /* use old poly1305 padding */
  95:../src/src/keys.c **** 
  96:../src/src/keys.c ****         break;
  97:../src/src/keys.c **** #endif
  98:../src/src/keys.c **** 
  99:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_CHACHA20_OLD_POLY1305_SHA256
 100:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_CHACHA20_OLD_POLY1305_SHA256:
 101:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_chacha;
 102:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 103:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 104:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
 105:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 106:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 107:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 108:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 109:../src/src/keys.c ****         ssl->specs.key_size              = CHACHA20_256_KEY_SIZE;
 110:../src/src/keys.c ****         ssl->specs.block_size            = CHACHA20_BLOCK_SIZE;
 111:../src/src/keys.c ****         ssl->specs.iv_size               = CHACHA20_IV_SIZE;
 112:../src/src/keys.c ****         ssl->specs.aead_mac_size         = POLY1305_AUTH_SZ;
 113:../src/src/keys.c ****         ssl->options.oldPoly             = 1; /* use old poly1305 padding */
 114:../src/src/keys.c **** 
 115:../src/src/keys.c ****         break;
 116:../src/src/keys.c **** #endif
 117:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
 118:../src/src/keys.c ****     case TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
 119:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_chacha;
 120:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 121:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 122:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 123:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 124:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 125:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 126:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 127:../src/src/keys.c ****         ssl->specs.key_size              = CHACHA20_256_KEY_SIZE;
 128:../src/src/keys.c ****         ssl->specs.block_size            = CHACHA20_BLOCK_SIZE;
 129:../src/src/keys.c ****         ssl->specs.iv_size               = CHACHA20_IV_SIZE;
 130:../src/src/keys.c ****         ssl->specs.aead_mac_size         = POLY1305_AUTH_SZ;
 131:../src/src/keys.c ****         ssl->options.oldPoly             = 0; /* use recent padding RFC */
 132:../src/src/keys.c **** 
 133:../src/src/keys.c ****         break;
 134:../src/src/keys.c **** #endif
 135:../src/src/keys.c **** 
 136:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
 137:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256:
 138:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_chacha;
 139:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 140:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 141:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 142:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 143:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 144:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 145:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 146:../src/src/keys.c ****         ssl->specs.key_size              = CHACHA20_256_KEY_SIZE;
 147:../src/src/keys.c ****         ssl->specs.block_size            = CHACHA20_BLOCK_SIZE;
 148:../src/src/keys.c ****         ssl->specs.iv_size               = CHACHA20_IV_SIZE;
 149:../src/src/keys.c ****         ssl->specs.aead_mac_size         = POLY1305_AUTH_SZ;
 150:../src/src/keys.c ****         ssl->options.oldPoly             = 0; /* use recent padding RFC */
 151:../src/src/keys.c **** 
 152:../src/src/keys.c ****         break;
 153:../src/src/keys.c **** #endif
 154:../src/src/keys.c **** 
 155:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256
 156:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256:
 157:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_chacha;
 158:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 159:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 160:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
 161:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 162:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 163:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 164:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 165:../src/src/keys.c ****         ssl->specs.key_size              = CHACHA20_256_KEY_SIZE;
 166:../src/src/keys.c ****         ssl->specs.block_size            = CHACHA20_BLOCK_SIZE;
 167:../src/src/keys.c ****         ssl->specs.iv_size               = CHACHA20_IV_SIZE;
 168:../src/src/keys.c ****         ssl->specs.aead_mac_size         = POLY1305_AUTH_SZ;
 169:../src/src/keys.c ****         ssl->options.oldPoly             = 0; /* use recent padding RFC */
 170:../src/src/keys.c **** 
 171:../src/src/keys.c ****         break;
 172:../src/src/keys.c **** #endif
 173:../src/src/keys.c **** 
 174:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_CHACHA20_POLY1305_SHA256
 175:../src/src/keys.c ****     case TLS_PSK_WITH_CHACHA20_POLY1305_SHA256:
 176:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_chacha;
 177:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 178:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 179:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
 180:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
 181:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 182:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 183:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 184:../src/src/keys.c ****         ssl->specs.key_size              = CHACHA20_256_KEY_SIZE;
 185:../src/src/keys.c ****         ssl->specs.block_size            = CHACHA20_BLOCK_SIZE;
 186:../src/src/keys.c ****         ssl->specs.iv_size               = CHACHA20_IV_SIZE;
 187:../src/src/keys.c ****         ssl->specs.aead_mac_size         = POLY1305_AUTH_SZ;
 188:../src/src/keys.c **** 
 189:../src/src/keys.c ****         ssl->options.oldPoly             = 0; /* use recent padding RFC */
 190:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
 191:../src/src/keys.c ****         break;
 192:../src/src/keys.c **** #endif
 193:../src/src/keys.c **** 
 194:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256
 195:../src/src/keys.c ****     case TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
 196:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_chacha;
 197:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 198:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 199:../src/src/keys.c ****         ssl->specs.kea                   = ecdhe_psk_kea;
 200:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
 201:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 202:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 203:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 204:../src/src/keys.c ****         ssl->specs.key_size              = CHACHA20_256_KEY_SIZE;
 205:../src/src/keys.c ****         ssl->specs.block_size            = CHACHA20_BLOCK_SIZE;
 206:../src/src/keys.c ****         ssl->specs.iv_size               = CHACHA20_IV_SIZE;
 207:../src/src/keys.c ****         ssl->specs.aead_mac_size         = POLY1305_AUTH_SZ;
 208:../src/src/keys.c **** 
 209:../src/src/keys.c ****         ssl->options.oldPoly             = 0; /* use recent padding RFC */
 210:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
 211:../src/src/keys.c ****         break;
 212:../src/src/keys.c **** #endif
 213:../src/src/keys.c **** 
 214:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256
 215:../src/src/keys.c ****     case TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256:
 216:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_chacha;
 217:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 218:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 219:../src/src/keys.c ****         ssl->specs.kea                   = dhe_psk_kea;
 220:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
 221:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 222:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 223:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 224:../src/src/keys.c ****         ssl->specs.key_size              = CHACHA20_256_KEY_SIZE;
 225:../src/src/keys.c ****         ssl->specs.block_size            = CHACHA20_BLOCK_SIZE;
 226:../src/src/keys.c ****         ssl->specs.iv_size               = CHACHA20_IV_SIZE;
 227:../src/src/keys.c ****         ssl->specs.aead_mac_size         = POLY1305_AUTH_SZ;
 228:../src/src/keys.c **** 
 229:../src/src/keys.c ****         ssl->options.oldPoly             = 0; /* use recent padding RFC */
 230:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
 231:../src/src/keys.c ****         break;
 232:../src/src/keys.c **** #endif
 233:../src/src/keys.c ****     default:
 234:../src/src/keys.c ****         WOLFSSL_MSG("Unsupported cipher suite, SetCipherSpecs ChaCha");
 111                             		.loc 1 234 9
 112 0040 FB 12 2E 00 00 00       		mov.L	#.LC1, r1
 113 0046 05 00 00 00             		bsr	_WOLFSSL_MSG
 235:../src/src/keys.c ****         return UNSUPPORTED_SUITE;
 114                             		.loc 1 235 16
 115 004a FB 5A 0C FE             		mov.L	#-500, r5
 116 004e 38 62 0A                		bra	.L3
 117                             	.L4:
 236:../src/src/keys.c ****     }
 237:../src/src/keys.c ****     }
 238:../src/src/keys.c **** 
 239:../src/src/keys.c ****     /* ECC extensions, AES-CCM or TLS 1.3 Integrity-only */
 240:../src/src/keys.c ****     if (ssl->options.cipherSuite0 == ECC_BYTE) {
 118                             		.loc 1 240 21
 119 0051 EC A5                   		mov.L	[r10], r5
 120 0053 CE 55 A5 02             		mov.B	677[r5], r5
 121                             		.loc 1 240 8
 122 0057 5B 55                   		movu.B	r5, r5
 123 0059 75 55 C0                		cmp	#0xc0, r5
 124 005c 3B 31 05                		bne	.L46
 241:../src/src/keys.c **** 
 242:../src/src/keys.c ****     switch (ssl->options.cipherSuite) {
 125                             		.loc 1 242 25
 126 005f EC A5                   		mov.L	[r10], r5
 127 0061 CE 55 A6 02             		mov.B	678[r5], r5
 128 0065 5B 55                   		movu.B	r5, r5
 129                             		.loc 1 242 5
 130 0067 75 55 24                		cmp	#36, r5
 131 006a 3A 3A 03                		beq	.L6
 132 006d 75 55 24                		cmp	#36, r5
 133 0070 2A 36                   		bgt	.L7
 134 0072 75 55 12                		cmp	#18, r5
 135 0075 3A 4B 01                		beq	.L8
 136 0078 75 55 12                		cmp	#18, r5
 137 007b 2A 14                   		bgt	.L9
 138 007d 61 95                   		cmp	#9, r5
 139 007f 3A BF 03                		beq	.L10
 140 0082 61 A5                   		cmp	#10, r5
 141 0084 3A 07 04                		beq	.L11
 142 0087 61 85                   		cmp	#8, r5
 143 0089 3A 68 03                		beq	.L12
 144 008c 38 F0 04                		bra	.L13
 145                             	.L9:
 146 008f 75 55 14                		cmp	#20, r5
 147 0092 3A 7B 01                		beq	.L14
 148 0095 75 55 14                		cmp	#20, r5
 149 0098 28 05 38 D9 00          		blt	.L15
 150 009d 75 55 23                		cmp	#35, r5
 151 00a0 3A B7 02                		beq	.L16
 152 00a3 38 D9 04                		bra	.L13
 153                             	.L7:
 154 00a6 75 55 2C                		cmp	#44, r5
 155 00a9 3A 81 04                		beq	.L17
 156 00ac 75 55 2C                		cmp	#44, r5
 157 00af 2A 15                   		bgt	.L18
 158 00b1 75 55 28                		cmp	#40, r5
 159 00b4 20 72                   		beq	.L19
 160 00b6 75 55 2B                		cmp	#43, r5
 161 00b9 3A 1F 04                		beq	.L20
 162 00bc 75 55 27                		cmp	#39, r5
 163 00bf 20 1A                   		beq	.L21
 164 00c1 38 BB 04                		bra	.L13
 165                             	.L18:
 166 00c4 75 55 30                		cmp	#48, r5
 167 00c7 3A E6 01                		beq	.L22
 168 00ca 75 55 37                		cmp	#55, r5
 169 00cd 3A 33 02                		beq	.L23
 170 00d0 75 55 2F                		cmp	#47, r5
 171 00d3 3A 87 01                		beq	.L24
 172 00d6 38 A6 04                		bra	.L13
 173                             	.L21:
 243:../src/src/keys.c **** 
 244:../src/src/keys.c **** #if defined(HAVE_ECC) || defined(HAVE_CURVE25519) || defined(HAVE_CURVE448)
 245:../src/src/keys.c **** 
 246:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
 247:../src/src/keys.c ****     case TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 :
 248:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 174                             		.loc 1 248 42
 175 00d9 EC A5                   		mov.L	[r10], r5
 176 00db FA 54 6C 01 06          		mov.B	#6, 364[r5]
 249:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 177                             		.loc 1 249 42
 178 00e0 EC A5                   		mov.L	[r10], r5
 179 00e2 FA 54 6D 01 01          		mov.B	#1, 365[r5]
 250:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 180                             		.loc 1 250 42
 181 00e7 EC A5                   		mov.L	[r10], r5
 182 00e9 FA 54 6E 01 04          		mov.B	#4, 366[r5]
 251:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 183                             		.loc 1 251 42
 184 00ee EC A5                   		mov.L	[r10], r5
 185 00f0 FA 54 6F 01 07          		mov.B	#7, 367[r5]
 252:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 186                             		.loc 1 252 42
 187 00f5 EC A5                   		mov.L	[r10], r5
 188 00f7 FA 54 70 01 01          		mov.B	#1, 368[r5]
 253:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 189                             		.loc 1 253 42
 190 00fc EC A5                   		mov.L	[r10], r5
 191 00fe FA 54 71 01 20          		mov.B	#32, 369[r5]
 254:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 192                             		.loc 1 254 42
 193 0103 EC A5                   		mov.L	[r10], r5
 194 0105 FA 54 72 01 28          		mov.B	#40, 370[r5]
 255:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 195                             		.loc 1 255 42
 196 010a EC A5                   		mov.L	[r10], r5
 197 010c FA 54 73 01 00          		mov.B	#0, 371[r5]
 256:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 198                             		.loc 1 256 42
 199 0111 EC A5                   		mov.L	[r10], r5
 200 0113 F9 55 B2 10             		mov.W	#16, 356[r5]
 257:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 201                             		.loc 1 257 42
 202 0117 EC A5                   		mov.L	[r10], r5
 203 0119 F9 55 B3 10             		mov.W	#16, 358[r5]
 258:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 204                             		.loc 1 258 42
 205 011d EC A5                   		mov.L	[r10], r5
 206 011f F9 55 B4 10             		mov.W	#16, 360[r5]
 259:../src/src/keys.c **** 
 260:../src/src/keys.c ****         break;
 207                             		.loc 1 260 9
 208 0123 38 6B 04                		bra	.L5
 209                             	.L19:
 261:../src/src/keys.c **** #endif
 262:../src/src/keys.c **** 
 263:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
 264:../src/src/keys.c ****     case TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 :
 265:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 210                             		.loc 1 265 42
 211 0126 EC A5                   		mov.L	[r10], r5
 212 0128 FA 54 6C 01 06          		mov.B	#6, 364[r5]
 266:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 213                             		.loc 1 266 42
 214 012d EC A5                   		mov.L	[r10], r5
 215 012f FA 54 6D 01 01          		mov.B	#1, 365[r5]
 267:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
 216                             		.loc 1 267 42
 217 0134 EC A5                   		mov.L	[r10], r5
 218 0136 FA 54 6E 01 05          		mov.B	#5, 366[r5]
 268:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 219                             		.loc 1 268 42
 220 013b EC A5                   		mov.L	[r10], r5
 221 013d FA 54 6F 01 07          		mov.B	#7, 367[r5]
 269:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 222                             		.loc 1 269 42
 223 0142 EC A5                   		mov.L	[r10], r5
 224 0144 FA 54 70 01 01          		mov.B	#1, 368[r5]
 270:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
 225                             		.loc 1 270 42
 226 0149 EC A5                   		mov.L	[r10], r5
 227 014b FA 54 71 01 30          		mov.B	#48, 369[r5]
 271:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 228                             		.loc 1 271 42
 229 0150 EC A5                   		mov.L	[r10], r5
 230 0152 FA 54 72 01 28          		mov.B	#40, 370[r5]
 272:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 231                             		.loc 1 272 42
 232 0157 EC A5                   		mov.L	[r10], r5
 233 0159 FA 54 73 01 00          		mov.B	#0, 371[r5]
 273:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 234                             		.loc 1 273 42
 235 015e EC A5                   		mov.L	[r10], r5
 236 0160 F9 55 B2 20             		mov.W	#32, 356[r5]
 274:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 237                             		.loc 1 274 42
 238 0164 EC A5                   		mov.L	[r10], r5
 239 0166 F9 55 B3 10             		mov.W	#16, 358[r5]
 275:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 240                             		.loc 1 275 42
 241 016a EC A5                   		mov.L	[r10], r5
 242 016c F9 55 B4 10             		mov.W	#16, 360[r5]
 276:../src/src/keys.c **** 
 277:../src/src/keys.c ****         break;
 243                             		.loc 1 277 9
 244 0170 38 1E 04                		bra	.L5
 245                             	.L15:
 278:../src/src/keys.c **** #endif
 279:../src/src/keys.c **** 
 280:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
 281:../src/src/keys.c ****     case TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA :
 282:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 246                             		.loc 1 282 42
 247 0173 EC A5                   		mov.L	[r10], r5
 248 0175 FA 54 6C 01 06          		mov.B	#6, 364[r5]
 283:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 249                             		.loc 1 283 42
 250 017a EC A5                   		mov.L	[r10], r5
 251 017c FA 54 6D 01 01          		mov.B	#1, 365[r5]
 284:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 252                             		.loc 1 284 42
 253 0181 EC A5                   		mov.L	[r10], r5
 254 0183 FA 54 6E 01 02          		mov.B	#2, 366[r5]
 285:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 255                             		.loc 1 285 42
 256 0188 EC A5                   		mov.L	[r10], r5
 257 018a FA 54 6F 01 07          		mov.B	#7, 367[r5]
 286:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 258                             		.loc 1 286 42
 259 018f EC A5                   		mov.L	[r10], r5
 260 0191 FA 54 70 01 01          		mov.B	#1, 368[r5]
 287:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 261                             		.loc 1 287 42
 262 0196 EC A5                   		mov.L	[r10], r5
 263 0198 FA 54 71 01 14          		mov.B	#20, 369[r5]
 288:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 264                             		.loc 1 288 42
 265 019d EC A5                   		mov.L	[r10], r5
 266 019f FA 54 72 01 28          		mov.B	#40, 370[r5]
 289:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 267                             		.loc 1 289 42
 268 01a4 EC A5                   		mov.L	[r10], r5
 269 01a6 FA 54 73 01 00          		mov.B	#0, 371[r5]
 290:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 270                             		.loc 1 290 42
 271 01ab EC A5                   		mov.L	[r10], r5
 272 01ad F9 55 B2 10             		mov.W	#16, 356[r5]
 291:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 273                             		.loc 1 291 42
 274 01b1 EC A5                   		mov.L	[r10], r5
 275 01b3 F9 55 B4 10             		mov.W	#16, 360[r5]
 292:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 276                             		.loc 1 292 42
 277 01b7 EC A5                   		mov.L	[r10], r5
 278 01b9 F9 55 B3 10             		mov.W	#16, 358[r5]
 293:../src/src/keys.c **** 
 294:../src/src/keys.c ****         break;
 279                             		.loc 1 294 9
 280 01bd 38 D1 03                		bra	.L5
 281                             	.L8:
 295:../src/src/keys.c **** #endif
 296:../src/src/keys.c **** 
 297:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
 298:../src/src/keys.c ****     case TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA :
 299:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_triple_des;
 282                             		.loc 1 299 42
 283 01c0 EC A5                   		mov.L	[r10], r5
 284 01c2 FA 54 6C 01 04          		mov.B	#4, 364[r5]
 300:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 285                             		.loc 1 300 42
 286 01c7 EC A5                   		mov.L	[r10], r5
 287 01c9 FA 54 6D 01 01          		mov.B	#1, 365[r5]
 301:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 288                             		.loc 1 301 42
 289 01ce EC A5                   		mov.L	[r10], r5
 290 01d0 FA 54 6E 01 02          		mov.B	#2, 366[r5]
 302:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 291                             		.loc 1 302 42
 292 01d5 EC A5                   		mov.L	[r10], r5
 293 01d7 FA 54 6F 01 07          		mov.B	#7, 367[r5]
 303:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 294                             		.loc 1 303 42
 295 01dc EC A5                   		mov.L	[r10], r5
 296 01de FA 54 70 01 01          		mov.B	#1, 368[r5]
 304:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 297                             		.loc 1 304 42
 298 01e3 EC A5                   		mov.L	[r10], r5
 299 01e5 FA 54 71 01 14          		mov.B	#20, 369[r5]
 305:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 300                             		.loc 1 305 42
 301 01ea EC A5                   		mov.L	[r10], r5
 302 01ec FA 54 72 01 28          		mov.B	#40, 370[r5]
 306:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 303                             		.loc 1 306 42
 304 01f1 EC A5                   		mov.L	[r10], r5
 305 01f3 FA 54 73 01 00          		mov.B	#0, 371[r5]
 307:../src/src/keys.c ****         ssl->specs.key_size              = DES3_KEY_SIZE;
 306                             		.loc 1 307 42
 307 01f8 EC A5                   		mov.L	[r10], r5
 308 01fa F9 55 B2 18             		mov.W	#24, 356[r5]
 308:../src/src/keys.c ****         ssl->specs.block_size            = DES_BLOCK_SIZE;
 309                             		.loc 1 308 42
 310 01fe EC A5                   		mov.L	[r10], r5
 311 0200 F9 55 B4 08             		mov.W	#8, 360[r5]
 309:../src/src/keys.c **** /* DES_IV_SIZE is incorrectly 16 in FIPS v2. It should be 8, same as the
 310:../src/src/keys.c ****  * block size. */
 311:../src/src/keys.c **** #if defined(HAVE_FIPS) && defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION == 2)
 312:../src/src/keys.c ****         ssl->specs.iv_size               = DES_BLOCK_SIZE;
 313:../src/src/keys.c **** #else
 314:../src/src/keys.c ****         ssl->specs.iv_size               = DES_IV_SIZE;
 312                             		.loc 1 314 42
 313 0204 EC A5                   		mov.L	[r10], r5
 314 0206 F9 55 B3 08             		mov.W	#8, 358[r5]
 315:../src/src/keys.c **** #endif
 316:../src/src/keys.c **** 
 317:../src/src/keys.c ****         break;
 315                             		.loc 1 317 9
 316 020a 38 84 03                		bra	.L5
 317                             	.L14:
 318:../src/src/keys.c **** #endif
 319:../src/src/keys.c **** 
 320:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_RSA_WITH_RC4_128_SHA
 321:../src/src/keys.c ****     case TLS_ECDHE_RSA_WITH_RC4_128_SHA :
 322:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_rc4;
 323:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
 324:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 325:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 326:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 327:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 328:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 329:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 330:../src/src/keys.c ****         ssl->specs.key_size              = RC4_KEY_SIZE;
 331:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
 332:../src/src/keys.c ****         ssl->specs.block_size            = 0;
 333:../src/src/keys.c **** 
 334:../src/src/keys.c ****         break;
 335:../src/src/keys.c **** #endif
 336:../src/src/keys.c **** 
 337:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
 338:../src/src/keys.c ****     case TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA :
 339:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 318                             		.loc 1 339 42
 319 020d EC A5                   		mov.L	[r10], r5
 320 020f FA 54 6C 01 06          		mov.B	#6, 364[r5]
 340:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 321                             		.loc 1 340 42
 322 0214 EC A5                   		mov.L	[r10], r5
 323 0216 FA 54 6D 01 01          		mov.B	#1, 365[r5]
 341:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 324                             		.loc 1 341 42
 325 021b EC A5                   		mov.L	[r10], r5
 326 021d FA 54 6E 01 02          		mov.B	#2, 366[r5]
 342:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 327                             		.loc 1 342 42
 328 0222 EC A5                   		mov.L	[r10], r5
 329 0224 FA 54 6F 01 07          		mov.B	#7, 367[r5]
 343:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 330                             		.loc 1 343 42
 331 0229 EC A5                   		mov.L	[r10], r5
 332 022b FA 54 70 01 01          		mov.B	#1, 368[r5]
 344:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 333                             		.loc 1 344 42
 334 0230 EC A5                   		mov.L	[r10], r5
 335 0232 FA 54 71 01 14          		mov.B	#20, 369[r5]
 345:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 336                             		.loc 1 345 42
 337 0237 EC A5                   		mov.L	[r10], r5
 338 0239 FA 54 72 01 28          		mov.B	#40, 370[r5]
 346:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 339                             		.loc 1 346 42
 340 023e EC A5                   		mov.L	[r10], r5
 341 0240 FA 54 73 01 00          		mov.B	#0, 371[r5]
 347:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 342                             		.loc 1 347 42
 343 0245 EC A5                   		mov.L	[r10], r5
 344 0247 F9 55 B2 20             		mov.W	#32, 356[r5]
 348:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 345                             		.loc 1 348 42
 346 024b EC A5                   		mov.L	[r10], r5
 347 024d F9 55 B4 10             		mov.W	#16, 360[r5]
 349:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 348                             		.loc 1 349 42
 349 0251 EC A5                   		mov.L	[r10], r5
 350 0253 F9 55 B3 10             		mov.W	#16, 358[r5]
 350:../src/src/keys.c **** 
 351:../src/src/keys.c ****         break;
 351                             		.loc 1 351 9
 352 0257 38 37 03                		bra	.L5
 353                             	.L24:
 352:../src/src/keys.c **** #endif
 353:../src/src/keys.c **** 
 354:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 355:../src/src/keys.c ****     case TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 :
 356:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 354                             		.loc 1 356 42
 355 025a EC A5                   		mov.L	[r10], r5
 356 025c FA 54 6C 01 07          		mov.B	#7, 364[r5]
 357:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 357                             		.loc 1 357 42
 358 0261 EC A5                   		mov.L	[r10], r5
 359 0263 FA 54 6D 01 02          		mov.B	#2, 365[r5]
 358:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 360                             		.loc 1 358 42
 361 0268 EC A5                   		mov.L	[r10], r5
 362 026a FA 54 6E 01 04          		mov.B	#4, 366[r5]
 359:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 363                             		.loc 1 359 42
 364 026f EC A5                   		mov.L	[r10], r5
 365 0271 FA 54 6F 01 07          		mov.B	#7, 367[r5]
 360:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 366                             		.loc 1 360 42
 367 0276 EC A5                   		mov.L	[r10], r5
 368 0278 FA 54 70 01 01          		mov.B	#1, 368[r5]
 361:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 369                             		.loc 1 361 42
 370 027d EC A5                   		mov.L	[r10], r5
 371 027f FA 54 71 01 20          		mov.B	#32, 369[r5]
 362:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 372                             		.loc 1 362 42
 373 0284 EC A5                   		mov.L	[r10], r5
 374 0286 FA 54 72 01 28          		mov.B	#40, 370[r5]
 363:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 375                             		.loc 1 363 42
 376 028b EC A5                   		mov.L	[r10], r5
 377 028d FA 54 73 01 00          		mov.B	#0, 371[r5]
 364:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 378                             		.loc 1 364 42
 379 0292 EC A5                   		mov.L	[r10], r5
 380 0294 F9 55 B2 10             		mov.W	#16, 356[r5]
 365:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 381                             		.loc 1 365 42
 382 0298 EC A5                   		mov.L	[r10], r5
 383 029a F9 55 B4 10             		mov.W	#16, 360[r5]
 366:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 384                             		.loc 1 366 42
 385 029e EC A5                   		mov.L	[r10], r5
 386 02a0 F9 55 B3 04             		mov.W	#4, 358[r5]
 367:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 387                             		.loc 1 367 42
 388 02a4 EC A5                   		mov.L	[r10], r5
 389 02a6 F9 55 B5 10             		mov.W	#16, 362[r5]
 368:../src/src/keys.c **** 
 369:../src/src/keys.c ****         break;
 390                             		.loc 1 369 9
 391 02aa 38 E4 02                		bra	.L5
 392                             	.L22:
 370:../src/src/keys.c **** #endif
 371:../src/src/keys.c **** 
 372:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 373:../src/src/keys.c ****     case TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 :
 374:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 393                             		.loc 1 374 42
 394 02ad EC A5                   		mov.L	[r10], r5
 395 02af FA 54 6C 01 07          		mov.B	#7, 364[r5]
 375:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 396                             		.loc 1 375 42
 397 02b4 EC A5                   		mov.L	[r10], r5
 398 02b6 FA 54 6D 01 02          		mov.B	#2, 365[r5]
 376:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
 399                             		.loc 1 376 42
 400 02bb EC A5                   		mov.L	[r10], r5
 401 02bd FA 54 6E 01 05          		mov.B	#5, 366[r5]
 377:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 402                             		.loc 1 377 42
 403 02c2 EC A5                   		mov.L	[r10], r5
 404 02c4 FA 54 6F 01 07          		mov.B	#7, 367[r5]
 378:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 405                             		.loc 1 378 42
 406 02c9 EC A5                   		mov.L	[r10], r5
 407 02cb FA 54 70 01 01          		mov.B	#1, 368[r5]
 379:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
 408                             		.loc 1 379 42
 409 02d0 EC A5                   		mov.L	[r10], r5
 410 02d2 FA 54 71 01 30          		mov.B	#48, 369[r5]
 380:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 411                             		.loc 1 380 42
 412 02d7 EC A5                   		mov.L	[r10], r5
 413 02d9 FA 54 72 01 28          		mov.B	#40, 370[r5]
 381:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 414                             		.loc 1 381 42
 415 02de EC A5                   		mov.L	[r10], r5
 416 02e0 FA 54 73 01 00          		mov.B	#0, 371[r5]
 382:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 417                             		.loc 1 382 42
 418 02e5 EC A5                   		mov.L	[r10], r5
 419 02e7 F9 55 B2 20             		mov.W	#32, 356[r5]
 383:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 420                             		.loc 1 383 42
 421 02eb EC A5                   		mov.L	[r10], r5
 422 02ed F9 55 B4 10             		mov.W	#16, 360[r5]
 384:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 423                             		.loc 1 384 42
 424 02f1 EC A5                   		mov.L	[r10], r5
 425 02f3 F9 55 B3 04             		mov.W	#4, 358[r5]
 385:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 426                             		.loc 1 385 42
 427 02f7 EC A5                   		mov.L	[r10], r5
 428 02f9 F9 55 B5 10             		mov.W	#16, 362[r5]
 386:../src/src/keys.c **** 
 387:../src/src/keys.c ****         break;
 429                             		.loc 1 387 9
 430 02fd 38 91 02                		bra	.L5
 431                             	.L23:
 388:../src/src/keys.c **** #endif
 389:../src/src/keys.c **** 
 390:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_PSK_WITH_NULL_SHA256
 391:../src/src/keys.c ****     case TLS_ECDHE_PSK_WITH_NULL_SHA256 :
 392:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
 393:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
 394:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 395:../src/src/keys.c ****         ssl->specs.kea                   = ecdhe_psk_kea;
 396:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
 397:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 398:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 399:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 400:../src/src/keys.c ****         ssl->specs.key_size              = 0;
 401:../src/src/keys.c ****         ssl->specs.block_size            = 0;
 402:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
 403:../src/src/keys.c **** 
 404:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
 405:../src/src/keys.c ****         break;
 406:../src/src/keys.c **** #endif
 407:../src/src/keys.c **** 
 408:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256
 409:../src/src/keys.c ****     case TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 :
 410:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 432                             		.loc 1 410 42
 433 0300 EC A5                   		mov.L	[r10], r5
 434 0302 FA 54 6C 01 06          		mov.B	#6, 364[r5]
 411:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 435                             		.loc 1 411 42
 436 0307 EC A5                   		mov.L	[r10], r5
 437 0309 FA 54 6D 01 01          		mov.B	#1, 365[r5]
 412:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 438                             		.loc 1 412 42
 439 030e EC A5                   		mov.L	[r10], r5
 440 0310 FA 54 6E 01 04          		mov.B	#4, 366[r5]
 413:../src/src/keys.c ****         ssl->specs.kea                   = ecdhe_psk_kea;
 441                             		.loc 1 413 42
 442 0315 EC A5                   		mov.L	[r10], r5
 443 0317 FA 54 6F 01 06          		mov.B	#6, 367[r5]
 414:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
 444                             		.loc 1 414 42
 445 031c EC A5                   		mov.L	[r10], r5
 446 031e FA 54 70 01 00          		mov.B	#0, 368[r5]
 415:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 447                             		.loc 1 415 42
 448 0323 EC A5                   		mov.L	[r10], r5
 449 0325 FA 54 71 01 20          		mov.B	#32, 369[r5]
 416:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 450                             		.loc 1 416 42
 451 032a EC A5                   		mov.L	[r10], r5
 452 032c FA 54 72 01 28          		mov.B	#40, 370[r5]
 417:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 453                             		.loc 1 417 42
 454 0331 EC A5                   		mov.L	[r10], r5
 455 0333 FA 54 73 01 00          		mov.B	#0, 371[r5]
 418:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 456                             		.loc 1 418 42
 457 0338 EC A5                   		mov.L	[r10], r5
 458 033a F9 55 B2 10             		mov.W	#16, 356[r5]
 419:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 459                             		.loc 1 419 42
 460 033e EC A5                   		mov.L	[r10], r5
 461 0340 F9 55 B4 10             		mov.W	#16, 360[r5]
 420:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 462                             		.loc 1 420 42
 463 0344 EC A5                   		mov.L	[r10], r5
 464 0346 F9 55 B3 10             		mov.W	#16, 358[r5]
 421:../src/src/keys.c **** 
 422:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
 465                             		.loc 1 422 42
 466 034a EC A4                   		mov.L	[r10], r4
 467 034c ED 45 A8                		mov.L	672[r4], r5
 468 034f 78 05                   		bset	#0, r5
 469 0351 E7 45 A8                		mov.L	r5, 672[r4]
 423:../src/src/keys.c ****         break;
 470                             		.loc 1 423 9
 471 0354 38 3A 02                		bra	.L5
 472                             	.L16:
 424:../src/src/keys.c **** #endif
 425:../src/src/keys.c **** 
 426:../src/src/keys.c **** #endif /* HAVE_ECC || HAVE_CURVE25519 || HAVE_CURVE448 */
 427:../src/src/keys.c **** 
 428:../src/src/keys.c **** #if defined(HAVE_ECC) || (defined(HAVE_CURVE25519) && defined(HAVE_ED25519)) \
 429:../src/src/keys.c ****                       || (defined(HAVE_CURVE448) && defined(HAVE_ED448))
 430:../src/src/keys.c **** 
 431:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
 432:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 :
 433:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 473                             		.loc 1 433 42
 474 0357 EC A5                   		mov.L	[r10], r5
 475 0359 FA 54 6C 01 06          		mov.B	#6, 364[r5]
 434:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 476                             		.loc 1 434 42
 477 035e EC A5                   		mov.L	[r10], r5
 478 0360 FA 54 6D 01 01          		mov.B	#1, 365[r5]
 435:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 479                             		.loc 1 435 42
 480 0365 EC A5                   		mov.L	[r10], r5
 481 0367 FA 54 6E 01 04          		mov.B	#4, 366[r5]
 436:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 482                             		.loc 1 436 42
 483 036c EC A5                   		mov.L	[r10], r5
 484 036e FA 54 6F 01 07          		mov.B	#7, 367[r5]
 437:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 485                             		.loc 1 437 42
 486 0373 EC A5                   		mov.L	[r10], r5
 487 0375 FA 54 70 01 03          		mov.B	#3, 368[r5]
 438:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 488                             		.loc 1 438 42
 489 037a EC A5                   		mov.L	[r10], r5
 490 037c FA 54 71 01 20          		mov.B	#32, 369[r5]
 439:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 491                             		.loc 1 439 42
 492 0381 EC A5                   		mov.L	[r10], r5
 493 0383 FA 54 72 01 28          		mov.B	#40, 370[r5]
 440:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 494                             		.loc 1 440 42
 495 0388 EC A5                   		mov.L	[r10], r5
 496 038a FA 54 73 01 00          		mov.B	#0, 371[r5]
 441:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 497                             		.loc 1 441 42
 498 038f EC A5                   		mov.L	[r10], r5
 499 0391 F9 55 B2 10             		mov.W	#16, 356[r5]
 442:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 500                             		.loc 1 442 42
 501 0395 EC A5                   		mov.L	[r10], r5
 502 0397 F9 55 B3 10             		mov.W	#16, 358[r5]
 443:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 503                             		.loc 1 443 42
 504 039b EC A5                   		mov.L	[r10], r5
 505 039d F9 55 B4 10             		mov.W	#16, 360[r5]
 444:../src/src/keys.c **** 
 445:../src/src/keys.c ****         break;
 506                             		.loc 1 445 9
 507 03a1 38 ED 01                		bra	.L5
 508                             	.L6:
 446:../src/src/keys.c **** #endif
 447:../src/src/keys.c **** 
 448:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
 449:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 :
 450:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 509                             		.loc 1 450 42
 510 03a4 EC A5                   		mov.L	[r10], r5
 511 03a6 FA 54 6C 01 06          		mov.B	#6, 364[r5]
 451:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 512                             		.loc 1 451 42
 513 03ab EC A5                   		mov.L	[r10], r5
 514 03ad FA 54 6D 01 01          		mov.B	#1, 365[r5]
 452:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
 515                             		.loc 1 452 42
 516 03b2 EC A5                   		mov.L	[r10], r5
 517 03b4 FA 54 6E 01 05          		mov.B	#5, 366[r5]
 453:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 518                             		.loc 1 453 42
 519 03b9 EC A5                   		mov.L	[r10], r5
 520 03bb FA 54 6F 01 07          		mov.B	#7, 367[r5]
 454:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 521                             		.loc 1 454 42
 522 03c0 EC A5                   		mov.L	[r10], r5
 523 03c2 FA 54 70 01 03          		mov.B	#3, 368[r5]
 455:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
 524                             		.loc 1 455 42
 525 03c7 EC A5                   		mov.L	[r10], r5
 526 03c9 FA 54 71 01 30          		mov.B	#48, 369[r5]
 456:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 527                             		.loc 1 456 42
 528 03ce EC A5                   		mov.L	[r10], r5
 529 03d0 FA 54 72 01 28          		mov.B	#40, 370[r5]
 457:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 530                             		.loc 1 457 42
 531 03d5 EC A5                   		mov.L	[r10], r5
 532 03d7 FA 54 73 01 00          		mov.B	#0, 371[r5]
 458:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 533                             		.loc 1 458 42
 534 03dc EC A5                   		mov.L	[r10], r5
 535 03de F9 55 B2 20             		mov.W	#32, 356[r5]
 459:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 536                             		.loc 1 459 42
 537 03e2 EC A5                   		mov.L	[r10], r5
 538 03e4 F9 55 B3 10             		mov.W	#16, 358[r5]
 460:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 539                             		.loc 1 460 42
 540 03e8 EC A5                   		mov.L	[r10], r5
 541 03ea F9 55 B4 10             		mov.W	#16, 360[r5]
 461:../src/src/keys.c **** 
 462:../src/src/keys.c ****         break;
 542                             		.loc 1 462 9
 543 03ee 38 A0 01                		bra	.L5
 544                             	.L12:
 463:../src/src/keys.c **** #endif
 464:../src/src/keys.c **** 
 465:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
 466:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA :
 467:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_triple_des;
 545                             		.loc 1 467 42
 546 03f1 EC A5                   		mov.L	[r10], r5
 547 03f3 FA 54 6C 01 04          		mov.B	#4, 364[r5]
 468:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 548                             		.loc 1 468 42
 549 03f8 EC A5                   		mov.L	[r10], r5
 550 03fa FA 54 6D 01 01          		mov.B	#1, 365[r5]
 469:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 551                             		.loc 1 469 42
 552 03ff EC A5                   		mov.L	[r10], r5
 553 0401 FA 54 6E 01 02          		mov.B	#2, 366[r5]
 470:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 554                             		.loc 1 470 42
 555 0406 EC A5                   		mov.L	[r10], r5
 556 0408 FA 54 6F 01 07          		mov.B	#7, 367[r5]
 471:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 557                             		.loc 1 471 42
 558 040d EC A5                   		mov.L	[r10], r5
 559 040f FA 54 70 01 03          		mov.B	#3, 368[r5]
 472:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 560                             		.loc 1 472 42
 561 0414 EC A5                   		mov.L	[r10], r5
 562 0416 FA 54 71 01 14          		mov.B	#20, 369[r5]
 473:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 563                             		.loc 1 473 42
 564 041b EC A5                   		mov.L	[r10], r5
 565 041d FA 54 72 01 28          		mov.B	#40, 370[r5]
 474:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 566                             		.loc 1 474 42
 567 0422 EC A5                   		mov.L	[r10], r5
 568 0424 FA 54 73 01 00          		mov.B	#0, 371[r5]
 475:../src/src/keys.c ****         ssl->specs.key_size              = DES3_KEY_SIZE;
 569                             		.loc 1 475 42
 570 0429 EC A5                   		mov.L	[r10], r5
 571 042b F9 55 B2 18             		mov.W	#24, 356[r5]
 476:../src/src/keys.c ****         ssl->specs.block_size            = DES_BLOCK_SIZE;
 572                             		.loc 1 476 42
 573 042f EC A5                   		mov.L	[r10], r5
 574 0431 F9 55 B4 08             		mov.W	#8, 360[r5]
 477:../src/src/keys.c **** #if defined(HAVE_FIPS) && defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION == 2)
 478:../src/src/keys.c ****         ssl->specs.iv_size               = DES_BLOCK_SIZE;
 479:../src/src/keys.c **** #else
 480:../src/src/keys.c ****         ssl->specs.iv_size               = DES_IV_SIZE;
 575                             		.loc 1 480 42
 576 0435 EC A5                   		mov.L	[r10], r5
 577 0437 F9 55 B3 08             		mov.W	#8, 358[r5]
 481:../src/src/keys.c **** #endif
 482:../src/src/keys.c **** 
 483:../src/src/keys.c ****         break;
 578                             		.loc 1 483 9
 579 043b 38 53 01                		bra	.L5
 580                             	.L10:
 484:../src/src/keys.c **** #endif
 485:../src/src/keys.c **** 
 486:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
 487:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_RC4_128_SHA :
 488:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_rc4;
 489:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
 490:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 491:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 492:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 493:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 494:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 495:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 496:../src/src/keys.c ****         ssl->specs.key_size              = RC4_KEY_SIZE;
 497:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
 498:../src/src/keys.c ****         ssl->specs.block_size            = 0;
 499:../src/src/keys.c **** 
 500:../src/src/keys.c ****         break;
 501:../src/src/keys.c **** #endif
 502:../src/src/keys.c **** 
 503:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 504:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA :
 505:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 581                             		.loc 1 505 42
 582 043e EC A5                   		mov.L	[r10], r5
 583 0440 FA 54 6C 01 06          		mov.B	#6, 364[r5]
 506:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 584                             		.loc 1 506 42
 585 0445 EC A5                   		mov.L	[r10], r5
 586 0447 FA 54 6D 01 01          		mov.B	#1, 365[r5]
 507:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 587                             		.loc 1 507 42
 588 044c EC A5                   		mov.L	[r10], r5
 589 044e FA 54 6E 01 02          		mov.B	#2, 366[r5]
 508:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 590                             		.loc 1 508 42
 591 0453 EC A5                   		mov.L	[r10], r5
 592 0455 FA 54 6F 01 07          		mov.B	#7, 367[r5]
 509:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 593                             		.loc 1 509 42
 594 045a EC A5                   		mov.L	[r10], r5
 595 045c FA 54 70 01 03          		mov.B	#3, 368[r5]
 510:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 596                             		.loc 1 510 42
 597 0461 EC A5                   		mov.L	[r10], r5
 598 0463 FA 54 71 01 14          		mov.B	#20, 369[r5]
 511:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 599                             		.loc 1 511 42
 600 0468 EC A5                   		mov.L	[r10], r5
 601 046a FA 54 72 01 28          		mov.B	#40, 370[r5]
 512:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 602                             		.loc 1 512 42
 603 046f EC A5                   		mov.L	[r10], r5
 604 0471 FA 54 73 01 00          		mov.B	#0, 371[r5]
 513:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 605                             		.loc 1 513 42
 606 0476 EC A5                   		mov.L	[r10], r5
 607 0478 F9 55 B2 10             		mov.W	#16, 356[r5]
 514:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 608                             		.loc 1 514 42
 609 047c EC A5                   		mov.L	[r10], r5
 610 047e F9 55 B4 10             		mov.W	#16, 360[r5]
 515:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 611                             		.loc 1 515 42
 612 0482 EC A5                   		mov.L	[r10], r5
 613 0484 F9 55 B3 10             		mov.W	#16, 358[r5]
 516:../src/src/keys.c **** 
 517:../src/src/keys.c ****         break;
 614                             		.loc 1 517 9
 615 0488 38 06 01                		bra	.L5
 616                             	.L11:
 518:../src/src/keys.c **** #endif
 519:../src/src/keys.c **** 
 520:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 521:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA :
 522:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 617                             		.loc 1 522 42
 618 048b EC A5                   		mov.L	[r10], r5
 619 048d FA 54 6C 01 06          		mov.B	#6, 364[r5]
 523:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 620                             		.loc 1 523 42
 621 0492 EC A5                   		mov.L	[r10], r5
 622 0494 FA 54 6D 01 01          		mov.B	#1, 365[r5]
 524:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 623                             		.loc 1 524 42
 624 0499 EC A5                   		mov.L	[r10], r5
 625 049b FA 54 6E 01 02          		mov.B	#2, 366[r5]
 525:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 626                             		.loc 1 525 42
 627 04a0 EC A5                   		mov.L	[r10], r5
 628 04a2 FA 54 6F 01 07          		mov.B	#7, 367[r5]
 526:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 629                             		.loc 1 526 42
 630 04a7 EC A5                   		mov.L	[r10], r5
 631 04a9 FA 54 70 01 03          		mov.B	#3, 368[r5]
 527:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 632                             		.loc 1 527 42
 633 04ae EC A5                   		mov.L	[r10], r5
 634 04b0 FA 54 71 01 14          		mov.B	#20, 369[r5]
 528:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 635                             		.loc 1 528 42
 636 04b5 EC A5                   		mov.L	[r10], r5
 637 04b7 FA 54 72 01 28          		mov.B	#40, 370[r5]
 529:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 638                             		.loc 1 529 42
 639 04bc EC A5                   		mov.L	[r10], r5
 640 04be FA 54 73 01 00          		mov.B	#0, 371[r5]
 530:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 641                             		.loc 1 530 42
 642 04c3 EC A5                   		mov.L	[r10], r5
 643 04c5 F9 55 B2 20             		mov.W	#32, 356[r5]
 531:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 644                             		.loc 1 531 42
 645 04c9 EC A5                   		mov.L	[r10], r5
 646 04cb F9 55 B4 10             		mov.W	#16, 360[r5]
 532:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 647                             		.loc 1 532 42
 648 04cf EC A5                   		mov.L	[r10], r5
 649 04d1 F9 55 B3 10             		mov.W	#16, 358[r5]
 533:../src/src/keys.c **** 
 534:../src/src/keys.c ****         break;
 650                             		.loc 1 534 9
 651 04d5 38 B9 00                		bra	.L5
 652                             	.L20:
 535:../src/src/keys.c **** #endif
 536:../src/src/keys.c **** 
 537:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 538:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 :
 539:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 653                             		.loc 1 539 42
 654 04d8 EC A5                   		mov.L	[r10], r5
 655 04da FA 54 6C 01 07          		mov.B	#7, 364[r5]
 540:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 656                             		.loc 1 540 42
 657 04df EC A5                   		mov.L	[r10], r5
 658 04e1 FA 54 6D 01 02          		mov.B	#2, 365[r5]
 541:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 659                             		.loc 1 541 42
 660 04e6 EC A5                   		mov.L	[r10], r5
 661 04e8 FA 54 6E 01 04          		mov.B	#4, 366[r5]
 542:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 662                             		.loc 1 542 42
 663 04ed EC A5                   		mov.L	[r10], r5
 664 04ef FA 54 6F 01 07          		mov.B	#7, 367[r5]
 543:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 665                             		.loc 1 543 42
 666 04f4 EC A5                   		mov.L	[r10], r5
 667 04f6 FA 54 70 01 03          		mov.B	#3, 368[r5]
 544:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 668                             		.loc 1 544 42
 669 04fb EC A5                   		mov.L	[r10], r5
 670 04fd FA 54 71 01 20          		mov.B	#32, 369[r5]
 545:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 671                             		.loc 1 545 42
 672 0502 EC A5                   		mov.L	[r10], r5
 673 0504 FA 54 72 01 28          		mov.B	#40, 370[r5]
 546:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 674                             		.loc 1 546 42
 675 0509 EC A5                   		mov.L	[r10], r5
 676 050b FA 54 73 01 00          		mov.B	#0, 371[r5]
 547:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 677                             		.loc 1 547 42
 678 0510 EC A5                   		mov.L	[r10], r5
 679 0512 F9 55 B2 10             		mov.W	#16, 356[r5]
 548:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 680                             		.loc 1 548 42
 681 0516 EC A5                   		mov.L	[r10], r5
 682 0518 F9 55 B4 10             		mov.W	#16, 360[r5]
 549:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 683                             		.loc 1 549 42
 684 051c EC A5                   		mov.L	[r10], r5
 685 051e F9 55 B3 04             		mov.W	#4, 358[r5]
 550:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 686                             		.loc 1 550 42
 687 0522 EC A5                   		mov.L	[r10], r5
 688 0524 F9 55 B5 10             		mov.W	#16, 362[r5]
 551:../src/src/keys.c **** 
 552:../src/src/keys.c ****         break;
 689                             		.loc 1 552 9
 690 0528 2E 66                   		bra	.L5
 691                             	.L17:
 553:../src/src/keys.c **** #endif
 554:../src/src/keys.c **** 
 555:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 556:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 :
 557:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 692                             		.loc 1 557 42
 693 052a EC A5                   		mov.L	[r10], r5
 694 052c FA 54 6C 01 07          		mov.B	#7, 364[r5]
 558:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 695                             		.loc 1 558 42
 696 0531 EC A5                   		mov.L	[r10], r5
 697 0533 FA 54 6D 01 02          		mov.B	#2, 365[r5]
 559:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
 698                             		.loc 1 559 42
 699 0538 EC A5                   		mov.L	[r10], r5
 700 053a FA 54 6E 01 05          		mov.B	#5, 366[r5]
 560:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 701                             		.loc 1 560 42
 702 053f EC A5                   		mov.L	[r10], r5
 703 0541 FA 54 6F 01 07          		mov.B	#7, 367[r5]
 561:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 704                             		.loc 1 561 42
 705 0546 EC A5                   		mov.L	[r10], r5
 706 0548 FA 54 70 01 03          		mov.B	#3, 368[r5]
 562:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
 707                             		.loc 1 562 42
 708 054d EC A5                   		mov.L	[r10], r5
 709 054f FA 54 71 01 30          		mov.B	#48, 369[r5]
 563:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 710                             		.loc 1 563 42
 711 0554 EC A5                   		mov.L	[r10], r5
 712 0556 FA 54 72 01 28          		mov.B	#40, 370[r5]
 564:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 713                             		.loc 1 564 42
 714 055b EC A5                   		mov.L	[r10], r5
 715 055d FA 54 73 01 00          		mov.B	#0, 371[r5]
 565:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 716                             		.loc 1 565 42
 717 0562 EC A5                   		mov.L	[r10], r5
 718 0564 F9 55 B2 20             		mov.W	#32, 356[r5]
 566:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 719                             		.loc 1 566 42
 720 0568 EC A5                   		mov.L	[r10], r5
 721 056a F9 55 B4 10             		mov.W	#16, 360[r5]
 567:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 722                             		.loc 1 567 42
 723 056e EC A5                   		mov.L	[r10], r5
 724 0570 F9 55 B3 04             		mov.W	#4, 358[r5]
 568:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 725                             		.loc 1 568 42
 726 0574 EC A5                   		mov.L	[r10], r5
 727 0576 F9 55 B5 10             		mov.W	#16, 362[r5]
 569:../src/src/keys.c **** 
 570:../src/src/keys.c ****         break;
 728                             		.loc 1 570 9
 729 057a 2E 14                   		bra	.L5
 730                             	.L13:
 571:../src/src/keys.c **** #endif
 572:../src/src/keys.c **** 
 573:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_AES_128_CCM
 574:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_AES_128_CCM :
 575:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
 576:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 577:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 578:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 579:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 580:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 581:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 582:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 583:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 584:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 585:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 586:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_CCM_16_AUTH_SZ;
 587:../src/src/keys.c **** 
 588:../src/src/keys.c ****         break;
 589:../src/src/keys.c **** #endif
 590:../src/src/keys.c **** 
 591:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8
 592:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8 :
 593:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
 594:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 595:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 596:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 597:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 598:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 599:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 600:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 601:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 602:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 603:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 604:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_CCM_8_AUTH_SZ;
 605:../src/src/keys.c **** 
 606:../src/src/keys.c ****         break;
 607:../src/src/keys.c **** #endif
 608:../src/src/keys.c **** 
 609:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8
 610:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8 :
 611:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
 612:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 613:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 614:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 615:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 616:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 617:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 618:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 619:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 620:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 621:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 622:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_CCM_8_AUTH_SZ;
 623:../src/src/keys.c **** 
 624:../src/src/keys.c ****         break;
 625:../src/src/keys.c **** #endif
 626:../src/src/keys.c **** 
 627:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_ECDSA_WITH_NULL_SHA
 628:../src/src/keys.c ****     case TLS_ECDHE_ECDSA_WITH_NULL_SHA :
 629:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
 630:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
 631:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 632:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 633:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 634:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 635:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 636:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 637:../src/src/keys.c ****         ssl->specs.key_size              = 0;
 638:../src/src/keys.c ****         ssl->specs.block_size            = 0;
 639:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
 640:../src/src/keys.c **** 
 641:../src/src/keys.c ****     break;
 642:../src/src/keys.c **** #endif
 643:../src/src/keys.c **** 
 644:../src/src/keys.c **** #endif /* HAVE_ECC || (CURVE25519 && ED25519) || (CURVE448 && ED448) */
 645:../src/src/keys.c **** 
 646:../src/src/keys.c **** #if defined(HAVE_ECC)
 647:../src/src/keys.c **** 
 648:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
 649:../src/src/keys.c ****     case TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 :
 650:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 651:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 652:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 653:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 654:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 655:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 656:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 657:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 658:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 659:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 660:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 661:../src/src/keys.c **** 
 662:../src/src/keys.c ****         break;
 663:../src/src/keys.c **** #endif
 664:../src/src/keys.c **** 
 665:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
 666:../src/src/keys.c ****     case TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 :
 667:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 668:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 669:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 670:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 671:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 672:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 673:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 674:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 675:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 676:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 677:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 678:../src/src/keys.c **** 
 679:../src/src/keys.c ****         break;
 680:../src/src/keys.c **** #endif
 681:../src/src/keys.c **** 
 682:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
 683:../src/src/keys.c ****     case TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 :
 684:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 685:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 686:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
 687:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 688:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 689:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
 690:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 691:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 692:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 693:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 694:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 695:../src/src/keys.c **** 
 696:../src/src/keys.c ****         break;
 697:../src/src/keys.c **** #endif
 698:../src/src/keys.c **** 
 699:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
 700:../src/src/keys.c ****     case TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 :
 701:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 702:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 703:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
 704:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 705:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 706:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
 707:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 708:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 709:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 710:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 711:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 712:../src/src/keys.c **** 
 713:../src/src/keys.c ****         break;
 714:../src/src/keys.c **** #endif
 715:../src/src/keys.c **** 
 716:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
 717:../src/src/keys.c ****     case TLS_ECDH_RSA_WITH_AES_128_CBC_SHA :
 718:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 719:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 720:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 721:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 722:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 723:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 724:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 725:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 726:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 727:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 728:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 729:../src/src/keys.c **** 
 730:../src/src/keys.c ****         break;
 731:../src/src/keys.c **** #endif
 732:../src/src/keys.c **** 
 733:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
 734:../src/src/keys.c ****     case TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA :
 735:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_triple_des;
 736:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 737:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 738:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 739:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 740:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 741:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 742:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 743:../src/src/keys.c ****         ssl->specs.key_size              = DES3_KEY_SIZE;
 744:../src/src/keys.c ****         ssl->specs.block_size            = DES_BLOCK_SIZE;
 745:../src/src/keys.c **** #if defined(HAVE_FIPS) && defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION == 2)
 746:../src/src/keys.c ****         ssl->specs.iv_size               = DES_BLOCK_SIZE;
 747:../src/src/keys.c **** #else
 748:../src/src/keys.c ****         ssl->specs.iv_size               = DES_IV_SIZE;
 749:../src/src/keys.c **** #endif
 750:../src/src/keys.c **** 
 751:../src/src/keys.c ****         break;
 752:../src/src/keys.c **** #endif
 753:../src/src/keys.c **** 
 754:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_RSA_WITH_RC4_128_SHA
 755:../src/src/keys.c ****     case TLS_ECDH_RSA_WITH_RC4_128_SHA :
 756:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_rc4;
 757:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
 758:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 759:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 760:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 761:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 762:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 763:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 764:../src/src/keys.c ****         ssl->specs.key_size              = RC4_KEY_SIZE;
 765:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
 766:../src/src/keys.c ****         ssl->specs.block_size            = 0;
 767:../src/src/keys.c **** 
 768:../src/src/keys.c ****         break;
 769:../src/src/keys.c **** #endif
 770:../src/src/keys.c **** 
 771:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
 772:../src/src/keys.c ****     case TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA :
 773:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_triple_des;
 774:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 775:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 776:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 777:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 778:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 779:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 780:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 781:../src/src/keys.c ****         ssl->specs.key_size              = DES3_KEY_SIZE;
 782:../src/src/keys.c ****         ssl->specs.block_size            = DES_BLOCK_SIZE;
 783:../src/src/keys.c **** #if defined(HAVE_FIPS) && defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION == 2)
 784:../src/src/keys.c ****         ssl->specs.iv_size               = DES_BLOCK_SIZE;
 785:../src/src/keys.c **** #else
 786:../src/src/keys.c ****         ssl->specs.iv_size               = DES_IV_SIZE;
 787:../src/src/keys.c **** #endif
 788:../src/src/keys.c **** 
 789:../src/src/keys.c ****         break;
 790:../src/src/keys.c **** #endif
 791:../src/src/keys.c **** 
 792:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_ECDSA_WITH_RC4_128_SHA
 793:../src/src/keys.c ****     case TLS_ECDH_ECDSA_WITH_RC4_128_SHA :
 794:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_rc4;
 795:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
 796:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 797:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 798:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 799:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 800:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 801:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 802:../src/src/keys.c ****         ssl->specs.key_size              = RC4_KEY_SIZE;
 803:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
 804:../src/src/keys.c ****         ssl->specs.block_size            = 0;
 805:../src/src/keys.c **** 
 806:../src/src/keys.c ****         break;
 807:../src/src/keys.c **** #endif
 808:../src/src/keys.c **** 
 809:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
 810:../src/src/keys.c ****     case TLS_ECDH_RSA_WITH_AES_256_CBC_SHA :
 811:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 812:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 813:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 814:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 815:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 816:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 817:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 818:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 819:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 820:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 821:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 822:../src/src/keys.c **** 
 823:../src/src/keys.c ****         break;
 824:../src/src/keys.c **** #endif
 825:../src/src/keys.c **** 
 826:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 827:../src/src/keys.c ****     case TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA :
 828:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 829:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 830:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 831:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 832:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 833:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 834:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 835:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 836:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 837:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 838:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 839:../src/src/keys.c **** 
 840:../src/src/keys.c ****         break;
 841:../src/src/keys.c **** #endif
 842:../src/src/keys.c **** 
 843:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 844:../src/src/keys.c ****     case TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA :
 845:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 846:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 847:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 848:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 849:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 850:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 851:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 852:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 853:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 854:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 855:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 856:../src/src/keys.c **** 
 857:../src/src/keys.c ****         break;
 858:../src/src/keys.c **** #endif
 859:../src/src/keys.c **** 
 860:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
 861:../src/src/keys.c ****     case TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 :
 862:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 863:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 864:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 865:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 866:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 867:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 868:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 869:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 870:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 871:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 872:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 873:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 874:../src/src/keys.c **** 
 875:../src/src/keys.c ****         break;
 876:../src/src/keys.c **** #endif
 877:../src/src/keys.c **** 
 878:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
 879:../src/src/keys.c ****     case TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 :
 880:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 881:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 882:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
 883:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 884:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 885:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
 886:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 887:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 888:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 889:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 890:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 891:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 892:../src/src/keys.c **** 
 893:../src/src/keys.c ****         break;
 894:../src/src/keys.c **** #endif
 895:../src/src/keys.c **** 
 896:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 897:../src/src/keys.c ****     case TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 :
 898:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 899:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 900:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 901:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 902:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 903:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 904:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 905:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 906:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 907:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 908:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 909:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 910:../src/src/keys.c **** 
 911:../src/src/keys.c ****         break;
 912:../src/src/keys.c **** #endif
 913:../src/src/keys.c **** 
 914:../src/src/keys.c **** #ifdef BUILD_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 915:../src/src/keys.c ****     case TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 :
 916:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 917:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 918:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
 919:../src/src/keys.c ****         ssl->specs.kea                   = ecc_diffie_hellman_kea;
 920:../src/src/keys.c ****         ssl->specs.sig_algo              = ecc_dsa_sa_algo;
 921:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
 922:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 923:../src/src/keys.c ****         ssl->specs.static_ecdh           = 1;
 924:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 925:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 926:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 927:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 928:../src/src/keys.c **** 
 929:../src/src/keys.c ****         break;
 930:../src/src/keys.c **** #endif
 931:../src/src/keys.c **** 
 932:../src/src/keys.c **** #endif /* HAVE_ECC */
 933:../src/src/keys.c **** 
 934:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_AES_128_CCM_8
 935:../src/src/keys.c ****     case TLS_RSA_WITH_AES_128_CCM_8 :
 936:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
 937:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 938:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 939:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
 940:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 941:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 942:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 943:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 944:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 945:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 946:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 947:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_CCM_8_AUTH_SZ;
 948:../src/src/keys.c **** 
 949:../src/src/keys.c ****         break;
 950:../src/src/keys.c **** #endif
 951:../src/src/keys.c **** 
 952:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_AES_256_CCM_8
 953:../src/src/keys.c ****     case TLS_RSA_WITH_AES_256_CCM_8 :
 954:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
 955:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 956:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 957:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
 958:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 959:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 960:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 961:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 962:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 963:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 964:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 965:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_CCM_8_AUTH_SZ;
 966:../src/src/keys.c **** 
 967:../src/src/keys.c ****         break;
 968:../src/src/keys.c **** #endif
 969:../src/src/keys.c **** 
 970:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_AES_128_CCM_8
 971:../src/src/keys.c ****     case TLS_PSK_WITH_AES_128_CCM_8 :
 972:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
 973:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 974:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 975:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
 976:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
 977:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 978:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 979:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 980:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 981:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 982:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 983:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_CCM_8_AUTH_SZ;
 984:../src/src/keys.c **** 
 985:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
 986:../src/src/keys.c ****         break;
 987:../src/src/keys.c **** #endif
 988:../src/src/keys.c **** 
 989:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_AES_256_CCM_8
 990:../src/src/keys.c ****     case TLS_PSK_WITH_AES_256_CCM_8 :
 991:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
 992:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 993:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 994:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
 995:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
 996:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 997:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 998:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 999:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
1000:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1001:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
1002:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_CCM_8_AUTH_SZ;
1003:../src/src/keys.c **** 
1004:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1005:../src/src/keys.c ****         break;
1006:../src/src/keys.c **** #endif
1007:../src/src/keys.c **** 
1008:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_AES_128_CCM
1009:../src/src/keys.c ****     case TLS_PSK_WITH_AES_128_CCM :
1010:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
1011:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
1012:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1013:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
1014:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1015:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1016:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1017:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1018:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
1019:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1020:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
1021:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_CCM_16_AUTH_SZ;
1022:../src/src/keys.c **** 
1023:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1024:../src/src/keys.c ****         break;
1025:../src/src/keys.c **** #endif
1026:../src/src/keys.c **** 
1027:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_AES_256_CCM
1028:../src/src/keys.c ****     case TLS_PSK_WITH_AES_256_CCM :
1029:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
1030:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
1031:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1032:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
1033:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1034:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1035:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1036:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1037:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
1038:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1039:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
1040:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_CCM_16_AUTH_SZ;
1041:../src/src/keys.c **** 
1042:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1043:../src/src/keys.c ****         break;
1044:../src/src/keys.c **** #endif
1045:../src/src/keys.c **** 
1046:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_PSK_WITH_AES_128_CCM
1047:../src/src/keys.c ****     case TLS_DHE_PSK_WITH_AES_128_CCM :
1048:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
1049:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
1050:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1051:../src/src/keys.c ****         ssl->specs.kea                   = dhe_psk_kea;
1052:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1053:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1054:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1055:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1056:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
1057:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1058:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
1059:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_CCM_16_AUTH_SZ;
1060:../src/src/keys.c **** 
1061:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1062:../src/src/keys.c ****         break;
1063:../src/src/keys.c **** #endif
1064:../src/src/keys.c **** 
1065:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_PSK_WITH_AES_256_CCM
1066:../src/src/keys.c ****     case TLS_DHE_PSK_WITH_AES_256_CCM :
1067:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
1068:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
1069:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1070:../src/src/keys.c ****         ssl->specs.kea                   = dhe_psk_kea;
1071:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1072:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1073:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1074:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1075:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
1076:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1077:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
1078:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_CCM_16_AUTH_SZ;
1079:../src/src/keys.c **** 
1080:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1081:../src/src/keys.c ****         break;
1082:../src/src/keys.c **** #endif
1083:../src/src/keys.c **** 
1084:../src/src/keys.c **** #if defined(WOLFSSL_TLS13) && defined(HAVE_NULL_CIPHER)
1085:../src/src/keys.c ****     #ifdef BUILD_TLS_SHA256_SHA256
1086:../src/src/keys.c ****     case TLS_SHA256_SHA256 :
1087:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
1088:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
1089:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1090:../src/src/keys.c ****         ssl->specs.kea                   = 0;
1091:../src/src/keys.c ****         ssl->specs.sig_algo              = 0;
1092:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1093:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1094:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1095:../src/src/keys.c ****         ssl->specs.key_size              = WC_SHA256_DIGEST_SIZE;
1096:../src/src/keys.c ****         ssl->specs.block_size            = 0;
1097:../src/src/keys.c ****         ssl->specs.iv_size               = HMAC_NONCE_SZ;
1098:../src/src/keys.c ****         ssl->specs.aead_mac_size         = WC_SHA256_DIGEST_SIZE;
1099:../src/src/keys.c **** 
1100:../src/src/keys.c ****         break;
1101:../src/src/keys.c ****     #endif
1102:../src/src/keys.c **** 
1103:../src/src/keys.c ****     #ifdef BUILD_TLS_SHA384_SHA384
1104:../src/src/keys.c ****     case TLS_SHA384_SHA384 :
1105:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
1106:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
1107:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
1108:../src/src/keys.c ****         ssl->specs.kea                   = 0;
1109:../src/src/keys.c ****         ssl->specs.sig_algo              = 0;
1110:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
1111:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1112:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1113:../src/src/keys.c ****         ssl->specs.key_size              = WC_SHA384_DIGEST_SIZE;
1114:../src/src/keys.c ****         ssl->specs.block_size            = 0;
1115:../src/src/keys.c ****         ssl->specs.iv_size               = HMAC_NONCE_SZ;
1116:../src/src/keys.c ****         ssl->specs.aead_mac_size         = WC_SHA384_DIGEST_SIZE;
1117:../src/src/keys.c **** 
1118:../src/src/keys.c ****         break;
1119:../src/src/keys.c ****     #endif
1120:../src/src/keys.c **** #endif
1121:../src/src/keys.c **** 
1122:../src/src/keys.c ****     default:
1123:../src/src/keys.c ****         WOLFSSL_MSG("Unsupported cipher suite, SetCipherSpecs ECC");
 731                             		.loc 1 1123 9
 732 057c FB 12 5E 00 00 00       		mov.L	#.LC2, r1
 733 0582 05 00 00 00             		bsr	_WOLFSSL_MSG
1124:../src/src/keys.c ****         return UNSUPPORTED_SUITE;
 734                             		.loc 1 1124 16
 735 0586 FB 5A 0C FE             		mov.L	#-500, r5
 736 058a 38 26 05                		bra	.L3
 737                             	.L46:
1125:../src/src/keys.c ****     }   /* switch */
1126:../src/src/keys.c ****     }   /* if     */
 738                             		.loc 1 1126 5
 739 058d 03                      		nop
 740                             	.L5:
1127:../src/src/keys.c **** 
1128:../src/src/keys.c ****     /* TLSi v1.3 cipher suites, 0x13 */
1129:../src/src/keys.c ****     if (ssl->options.cipherSuite0 == TLS13_BYTE) {
1130:../src/src/keys.c ****         switch (ssl->options.cipherSuite) {
1131:../src/src/keys.c **** 
1132:../src/src/keys.c **** #ifdef WOLFSSL_TLS13
1133:../src/src/keys.c ****     #ifdef BUILD_TLS_AES_128_GCM_SHA256
1134:../src/src/keys.c ****         case TLS_AES_128_GCM_SHA256 :
1135:../src/src/keys.c ****             ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
1136:../src/src/keys.c ****             ssl->specs.cipher_type           = aead;
1137:../src/src/keys.c ****             ssl->specs.mac_algorithm         = sha256_mac;
1138:../src/src/keys.c ****             ssl->specs.kea                   = 0;
1139:../src/src/keys.c ****             ssl->specs.sig_algo              = 0;
1140:../src/src/keys.c ****             ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1141:../src/src/keys.c ****             ssl->specs.pad_size              = PAD_SHA;
1142:../src/src/keys.c ****             ssl->specs.static_ecdh           = 0;
1143:../src/src/keys.c ****             ssl->specs.key_size              = AES_128_KEY_SIZE;
1144:../src/src/keys.c ****             ssl->specs.block_size            = AES_BLOCK_SIZE;
1145:../src/src/keys.c ****             ssl->specs.iv_size               = AESGCM_NONCE_SZ;
1146:../src/src/keys.c ****             ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
1147:../src/src/keys.c **** 
1148:../src/src/keys.c ****             break;
1149:../src/src/keys.c ****     #endif
1150:../src/src/keys.c **** 
1151:../src/src/keys.c ****     #ifdef BUILD_TLS_AES_256_GCM_SHA384
1152:../src/src/keys.c ****         case TLS_AES_256_GCM_SHA384 :
1153:../src/src/keys.c ****             ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
1154:../src/src/keys.c ****             ssl->specs.cipher_type           = aead;
1155:../src/src/keys.c ****             ssl->specs.mac_algorithm         = sha384_mac;
1156:../src/src/keys.c ****             ssl->specs.kea                   = 0;
1157:../src/src/keys.c ****             ssl->specs.sig_algo              = 0;
1158:../src/src/keys.c ****             ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
1159:../src/src/keys.c ****             ssl->specs.pad_size              = PAD_SHA;
1160:../src/src/keys.c ****             ssl->specs.static_ecdh           = 0;
1161:../src/src/keys.c ****             ssl->specs.key_size              = AES_256_KEY_SIZE;
1162:../src/src/keys.c ****             ssl->specs.block_size            = AES_BLOCK_SIZE;
1163:../src/src/keys.c ****             ssl->specs.iv_size               = AESGCM_NONCE_SZ;
1164:../src/src/keys.c ****             ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
1165:../src/src/keys.c **** 
1166:../src/src/keys.c ****             break;
1167:../src/src/keys.c ****     #endif
1168:../src/src/keys.c **** 
1169:../src/src/keys.c ****     #ifdef BUILD_TLS_CHACHA20_POLY1305_SHA256
1170:../src/src/keys.c ****         case TLS_CHACHA20_POLY1305_SHA256 :
1171:../src/src/keys.c ****             ssl->specs.bulk_cipher_algorithm = wolfssl_chacha;
1172:../src/src/keys.c ****             ssl->specs.cipher_type           = aead;
1173:../src/src/keys.c ****             ssl->specs.mac_algorithm         = sha256_mac;
1174:../src/src/keys.c ****             ssl->specs.kea                   = 0;
1175:../src/src/keys.c ****             ssl->specs.sig_algo              = 0;
1176:../src/src/keys.c ****             ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1177:../src/src/keys.c ****             ssl->specs.pad_size              = PAD_SHA;
1178:../src/src/keys.c ****             ssl->specs.static_ecdh           = 0;
1179:../src/src/keys.c ****             ssl->specs.key_size              = CHACHA20_256_KEY_SIZE;
1180:../src/src/keys.c ****             ssl->specs.block_size            = CHACHA20_BLOCK_SIZE;
1181:../src/src/keys.c ****             ssl->specs.iv_size               = CHACHA20_IV_SIZE;
1182:../src/src/keys.c ****             ssl->specs.aead_mac_size         = POLY1305_AUTH_SZ;
1183:../src/src/keys.c ****             ssl->options.oldPoly             = 0; /* use recent padding RFC */
1184:../src/src/keys.c **** 
1185:../src/src/keys.c ****             break;
1186:../src/src/keys.c ****     #endif
1187:../src/src/keys.c **** 
1188:../src/src/keys.c ****     #ifdef BUILD_TLS_AES_128_CCM_SHA256
1189:../src/src/keys.c ****         case TLS_AES_128_CCM_SHA256 :
1190:../src/src/keys.c ****             ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
1191:../src/src/keys.c ****             ssl->specs.cipher_type           = aead;
1192:../src/src/keys.c ****             ssl->specs.mac_algorithm         = sha256_mac;
1193:../src/src/keys.c ****             ssl->specs.kea                   = 0;
1194:../src/src/keys.c ****             ssl->specs.sig_algo              = 0;
1195:../src/src/keys.c ****             ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1196:../src/src/keys.c ****             ssl->specs.pad_size              = PAD_SHA;
1197:../src/src/keys.c ****             ssl->specs.static_ecdh           = 0;
1198:../src/src/keys.c ****             ssl->specs.key_size              = AES_128_KEY_SIZE;
1199:../src/src/keys.c ****             ssl->specs.block_size            = AES_BLOCK_SIZE;
1200:../src/src/keys.c ****             ssl->specs.iv_size               = AESGCM_NONCE_SZ;
1201:../src/src/keys.c ****             ssl->specs.aead_mac_size         = AES_CCM_16_AUTH_SZ;
1202:../src/src/keys.c **** 
1203:../src/src/keys.c ****             break;
1204:../src/src/keys.c ****     #endif
1205:../src/src/keys.c **** 
1206:../src/src/keys.c ****     #ifdef BUILD_TLS_AES_128_CCM_8_SHA256
1207:../src/src/keys.c ****         case TLS_AES_128_CCM_8_SHA256 :
1208:../src/src/keys.c ****             ssl->specs.bulk_cipher_algorithm = wolfssl_aes_ccm;
1209:../src/src/keys.c ****             ssl->specs.cipher_type           = aead;
1210:../src/src/keys.c ****             ssl->specs.mac_algorithm         = sha256_mac;
1211:../src/src/keys.c ****             ssl->specs.kea                   = 0;
1212:../src/src/keys.c ****             ssl->specs.sig_algo              = 0;
1213:../src/src/keys.c ****             ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1214:../src/src/keys.c ****             ssl->specs.pad_size              = PAD_SHA;
1215:../src/src/keys.c ****             ssl->specs.static_ecdh           = 0;
1216:../src/src/keys.c ****             ssl->specs.key_size              = AES_128_KEY_SIZE;
1217:../src/src/keys.c ****             ssl->specs.block_size            = AES_BLOCK_SIZE;
1218:../src/src/keys.c ****             ssl->specs.iv_size               = AESGCM_NONCE_SZ;
1219:../src/src/keys.c ****             ssl->specs.aead_mac_size         = AES_CCM_8_AUTH_SZ;
1220:../src/src/keys.c **** 
1221:../src/src/keys.c ****             break;
1222:../src/src/keys.c ****     #endif
1223:../src/src/keys.c **** #endif /* WOLFSSL_TLS13 */
1224:../src/src/keys.c ****         default:
1225:../src/src/keys.c ****             break;
1226:../src/src/keys.c ****         }
1227:../src/src/keys.c ****     }
 741                             		.loc 1 1227 5
 742 058e 03                      		nop
1228:../src/src/keys.c **** 
1229:../src/src/keys.c ****     if (ssl->options.cipherSuite0 == ECDHE_PSK_BYTE) {
 743                             		.loc 1 1229 21
 744 058f EC A5                   		mov.L	[r10], r5
 745 0591 CE 55 A5 02             		mov.B	677[r5], r5
 746                             		.loc 1 1229 8
 747 0595 5B 55                   		movu.B	r5, r5
 748 0597 75 55 D0                		cmp	#0xd0, r5
 749 059a 21 69                   		bne	.L47
1230:../src/src/keys.c **** 
1231:../src/src/keys.c ****     switch (ssl->options.cipherSuite) {
 750                             		.loc 1 1231 25
 751 059c EC A5                   		mov.L	[r10], r5
 752 059e CE 55 A6 02             		mov.B	678[r5], r5
 753 05a2 5B 55                   		movu.B	r5, r5
 754                             		.loc 1 1231 5
 755 05a4 61 15                   		cmp	#1, r5
 756 05a6 21 60                   		bne	.L48
1232:../src/src/keys.c **** 
1233:../src/src/keys.c **** #if defined(HAVE_ECC) || defined(HAVE_CURVE25519) || defined(HAVE_CURVE448)
1234:../src/src/keys.c **** #ifdef BUILD_TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256
1235:../src/src/keys.c ****     case TLS_ECDHE_PSK_WITH_AES_128_GCM_SHA256 :
1236:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 757                             		.loc 1 1236 42
 758 05a8 EC A5                   		mov.L	[r10], r5
 759 05aa FA 54 6C 01 07          		mov.B	#7, 364[r5]
1237:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 760                             		.loc 1 1237 42
 761 05af EC A5                   		mov.L	[r10], r5
 762 05b1 FA 54 6D 01 02          		mov.B	#2, 365[r5]
1238:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 763                             		.loc 1 1238 42
 764 05b6 EC A5                   		mov.L	[r10], r5
 765 05b8 FA 54 6E 01 04          		mov.B	#4, 366[r5]
1239:../src/src/keys.c ****         ssl->specs.kea                   = ecdhe_psk_kea;
 766                             		.loc 1 1239 42
 767 05bd EC A5                   		mov.L	[r10], r5
 768 05bf FA 54 6F 01 06          		mov.B	#6, 367[r5]
1240:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
 769                             		.loc 1 1240 42
 770 05c4 EC A5                   		mov.L	[r10], r5
 771 05c6 FA 54 70 01 00          		mov.B	#0, 368[r5]
1241:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 772                             		.loc 1 1241 42
 773 05cb EC A5                   		mov.L	[r10], r5
 774 05cd FA 54 71 01 20          		mov.B	#32, 369[r5]
1242:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 775                             		.loc 1 1242 42
 776 05d2 EC A5                   		mov.L	[r10], r5
 777 05d4 FA 54 72 01 28          		mov.B	#40, 370[r5]
1243:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 778                             		.loc 1 1243 42
 779 05d9 EC A5                   		mov.L	[r10], r5
 780 05db FA 54 73 01 00          		mov.B	#0, 371[r5]
1244:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 781                             		.loc 1 1244 42
 782 05e0 EC A5                   		mov.L	[r10], r5
 783 05e2 F9 55 B2 10             		mov.W	#16, 356[r5]
1245:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 784                             		.loc 1 1245 42
 785 05e6 EC A5                   		mov.L	[r10], r5
 786 05e8 F9 55 B4 10             		mov.W	#16, 360[r5]
1246:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 787                             		.loc 1 1246 42
 788 05ec EC A5                   		mov.L	[r10], r5
 789 05ee F9 55 B3 10             		mov.W	#16, 358[r5]
1247:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 790                             		.loc 1 1247 42
 791 05f2 EC A5                   		mov.L	[r10], r5
 792 05f4 F9 55 B5 10             		mov.W	#16, 362[r5]
1248:../src/src/keys.c **** 
1249:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
 793                             		.loc 1 1249 42
 794 05f8 EC A4                   		mov.L	[r10], r4
 795 05fa ED 45 A8                		mov.L	672[r4], r5
 796 05fd 78 05                   		bset	#0, r5
 797 05ff E7 45 A8                		mov.L	r5, 672[r4]
1250:../src/src/keys.c ****         break;
 798                             		.loc 1 1250 9
 799 0602 0D                      		bra	.L26
 800                             	.L47:
1251:../src/src/keys.c **** #endif
1252:../src/src/keys.c **** #endif
1253:../src/src/keys.c **** 
1254:../src/src/keys.c ****     default:
1255:../src/src/keys.c ****         break;
1256:../src/src/keys.c ****     }
1257:../src/src/keys.c ****     }
 801                             		.loc 1 1257 5
 802 0603 03                      		nop
 803 0604 2E 03                   		bra	.L26
 804                             	.L48:
1255:../src/src/keys.c ****     }
 805                             		.loc 1 1255 9
 806 0606 03                      		nop
 807                             	.L26:
1258:../src/src/keys.c **** 
1259:../src/src/keys.c **** 
1260:../src/src/keys.c ****     if (ssl->options.cipherSuite0 != ECC_BYTE &&
 808                             		.loc 1 1260 21
 809 0607 EC A5                   		mov.L	[r10], r5
 810 0609 CE 55 A5 02             		mov.B	677[r5], r5
 811                             		.loc 1 1260 8
 812 060d 5B 55                   		movu.B	r5, r5
 813 060f 75 55 C0                		cmp	#0xc0, r5
 814 0612 3A 2E 04                		beq	.L49
1261:../src/src/keys.c ****         ssl->options.cipherSuite0 != ECDHE_PSK_BYTE &&
 815                             		.loc 1 1261 21 discriminator 1
 816 0615 EC A5                   		mov.L	[r10], r5
 817 0617 CE 55 A5 02             		mov.B	677[r5], r5
1260:../src/src/keys.c ****         ssl->options.cipherSuite0 != ECDHE_PSK_BYTE &&
 818                             		.loc 1 1260 47 discriminator 1
 819 061b 5B 55                   		movu.B	r5, r5
 820 061d 75 55 D0                		cmp	#0xd0, r5
 821 0620 3A 20 04                		beq	.L49
1262:../src/src/keys.c ****         ssl->options.cipherSuite0 != CHACHA_BYTE &&
 822                             		.loc 1 1262 21
 823 0623 EC A5                   		mov.L	[r10], r5
 824 0625 CE 55 A5 02             		mov.B	677[r5], r5
1261:../src/src/keys.c ****         ssl->options.cipherSuite0 != ECDHE_PSK_BYTE &&
 825                             		.loc 1 1261 53
 826 0629 5B 55                   		movu.B	r5, r5
 827 062b 75 55 CC                		cmp	#0xcc, r5
 828 062e 3A 12 04                		beq	.L49
1263:../src/src/keys.c ****         ssl->options.cipherSuite0 != TLS13_BYTE) {   /* normal suites */
 829                             		.loc 1 1263 21
 830 0631 EC A5                   		mov.L	[r10], r5
 831 0633 CE 55 A5 02             		mov.B	677[r5], r5
1262:../src/src/keys.c ****         ssl->options.cipherSuite0 != CHACHA_BYTE &&
 832                             		.loc 1 1262 50
 833 0637 5B 55                   		movu.B	r5, r5
 834 0639 75 55 13                		cmp	#19, r5
 835 063c 3A 04 04                		beq	.L49
1264:../src/src/keys.c ****     switch (ssl->options.cipherSuite) {
 836                             		.loc 1 1264 25
 837 063f EC A5                   		mov.L	[r10], r5
 838 0641 CE 55 A6 02             		mov.B	678[r5], r5
 839 0645 5B 55                   		movu.B	r5, r5
 840                             		.loc 1 1264 5
 841 0647 75 55 9E                		cmp	#0x9e, r5
 842 064a 3A 42 03                		beq	.L29
 843 064d 75 55 9E                		cmp	#0x9e, r5
 844 0650 2A 2B                   		bgt	.L30
 845 0652 75 55 39                		cmp	#57, r5
 846 0655 3A EA 02                		beq	.L31
 847 0658 75 55 39                		cmp	#57, r5
 848 065b 2A 11                   		bgt	.L32
 849 065d 75 55 16                		cmp	#22, r5
 850 0660 3A F8 01                		beq	.L33
 851 0663 75 55 33                		cmp	#51, r5
 852 0666 3A 8C 02                		beq	.L34
 853 0669 38 C7 03                		bra	.L35
 854                             	.L32:
 855 066c 75 55 67                		cmp	#0x67, r5
 856 066f 3A 9C 01                		beq	.L36
 857 0672 75 55 6B                		cmp	#0x6b, r5
 858 0675 3A 30 02                		beq	.L37
 859 0678 38 B8 03                		bra	.L35
 860                             	.L30:
 861 067b 75 55 AB                		cmp	#0xab, r5
 862 067e 3A 82 00                		beq	.L38
 863 0681 75 55 AB                		cmp	#0xab, r5
 864 0684 2A 10                   		bgt	.L39
 865 0686 75 55 9F                		cmp	#0x9f, r5
 866 0689 3A 55 03                		beq	.L40
 867 068c 75 55 AA                		cmp	#0xaa, r5
 868 068f 20 14                   		beq	.L41
 869 0691 38 9F 03                		bra	.L35
 870                             	.L39:
 871 0694 75 55 B2                		cmp	#0xb2, r5
 872 0697 3A C6 00                		beq	.L42
 873 069a 75 55 B3                		cmp	#0xb3, r5
 874 069d 3A 17 01                		beq	.L43
 875 06a0 38 90 03                		bra	.L35
 876                             	.L41:
1265:../src/src/keys.c **** 
1266:../src/src/keys.c **** #ifdef BUILD_SSL_RSA_WITH_RC4_128_SHA
1267:../src/src/keys.c ****     case SSL_RSA_WITH_RC4_128_SHA :
1268:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_rc4;
1269:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
1270:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
1271:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1272:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1273:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
1274:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1275:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1276:../src/src/keys.c ****         ssl->specs.key_size              = RC4_KEY_SIZE;
1277:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
1278:../src/src/keys.c ****         ssl->specs.block_size            = 0;
1279:../src/src/keys.c **** 
1280:../src/src/keys.c ****         break;
1281:../src/src/keys.c **** #endif
1282:../src/src/keys.c **** 
1283:../src/src/keys.c **** #ifdef BUILD_SSL_RSA_WITH_RC4_128_MD5
1284:../src/src/keys.c ****     case SSL_RSA_WITH_RC4_128_MD5 :
1285:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_rc4;
1286:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
1287:../src/src/keys.c ****         ssl->specs.mac_algorithm         = md5_mac;
1288:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1289:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1290:../src/src/keys.c ****         ssl->specs.hash_size             = WC_MD5_DIGEST_SIZE;
1291:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_MD5;
1292:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1293:../src/src/keys.c ****         ssl->specs.key_size              = RC4_KEY_SIZE;
1294:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
1295:../src/src/keys.c ****         ssl->specs.block_size            = 0;
1296:../src/src/keys.c **** 
1297:../src/src/keys.c ****         break;
1298:../src/src/keys.c **** #endif
1299:../src/src/keys.c **** 
1300:../src/src/keys.c **** #ifdef BUILD_SSL_RSA_WITH_3DES_EDE_CBC_SHA
1301:../src/src/keys.c ****     case SSL_RSA_WITH_3DES_EDE_CBC_SHA :
1302:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_triple_des;
1303:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1304:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
1305:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1306:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1307:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
1308:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1309:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1310:../src/src/keys.c ****         ssl->specs.key_size              = DES3_KEY_SIZE;
1311:../src/src/keys.c ****         ssl->specs.block_size            = DES_BLOCK_SIZE;
1312:../src/src/keys.c **** #if defined(HAVE_FIPS) && defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION == 2)
1313:../src/src/keys.c ****         ssl->specs.iv_size               = DES_BLOCK_SIZE;
1314:../src/src/keys.c **** #else
1315:../src/src/keys.c ****         ssl->specs.iv_size               = DES_IV_SIZE;
1316:../src/src/keys.c **** #endif
1317:../src/src/keys.c **** 
1318:../src/src/keys.c ****         break;
1319:../src/src/keys.c **** #endif
1320:../src/src/keys.c **** 
1321:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_AES_128_CBC_SHA
1322:../src/src/keys.c ****     case TLS_RSA_WITH_AES_128_CBC_SHA :
1323:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
1324:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1325:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
1326:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1327:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1328:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
1329:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1330:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1331:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
1332:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1333:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
1334:../src/src/keys.c **** 
1335:../src/src/keys.c ****         break;
1336:../src/src/keys.c **** #endif
1337:../src/src/keys.c **** 
1338:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_AES_128_CBC_SHA256
1339:../src/src/keys.c ****     case TLS_RSA_WITH_AES_128_CBC_SHA256 :
1340:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
1341:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1342:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1343:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1344:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1345:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1346:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1347:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1348:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
1349:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1350:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
1351:../src/src/keys.c **** 
1352:../src/src/keys.c ****         break;
1353:../src/src/keys.c **** #endif
1354:../src/src/keys.c **** 
1355:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_NULL_MD5
1356:../src/src/keys.c ****     case TLS_RSA_WITH_NULL_MD5 :
1357:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
1358:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
1359:../src/src/keys.c ****         ssl->specs.mac_algorithm         = md5_mac;
1360:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1361:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1362:../src/src/keys.c ****         ssl->specs.hash_size             = WC_MD5_DIGEST_SIZE;
1363:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_MD5;
1364:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1365:../src/src/keys.c ****         ssl->specs.key_size              = 0;
1366:../src/src/keys.c ****         ssl->specs.block_size            = 0;
1367:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
1368:../src/src/keys.c **** 
1369:../src/src/keys.c ****         break;
1370:../src/src/keys.c **** #endif
1371:../src/src/keys.c **** 
1372:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_NULL_SHA
1373:../src/src/keys.c ****     case TLS_RSA_WITH_NULL_SHA :
1374:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
1375:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
1376:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
1377:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1378:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1379:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
1380:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1381:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1382:../src/src/keys.c ****         ssl->specs.key_size              = 0;
1383:../src/src/keys.c ****         ssl->specs.block_size            = 0;
1384:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
1385:../src/src/keys.c **** 
1386:../src/src/keys.c ****         break;
1387:../src/src/keys.c **** #endif
1388:../src/src/keys.c **** 
1389:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_NULL_SHA256
1390:../src/src/keys.c ****     case TLS_RSA_WITH_NULL_SHA256 :
1391:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
1392:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
1393:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1394:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1395:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1396:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1397:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1398:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1399:../src/src/keys.c ****         ssl->specs.key_size              = 0;
1400:../src/src/keys.c ****         ssl->specs.block_size            = 0;
1401:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
1402:../src/src/keys.c **** 
1403:../src/src/keys.c ****         break;
1404:../src/src/keys.c **** #endif
1405:../src/src/keys.c **** 
1406:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_AES_256_CBC_SHA
1407:../src/src/keys.c ****     case TLS_RSA_WITH_AES_256_CBC_SHA :
1408:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
1409:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1410:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
1411:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1412:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1413:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
1414:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1415:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1416:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
1417:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1418:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
1419:../src/src/keys.c **** 
1420:../src/src/keys.c ****         break;
1421:../src/src/keys.c **** #endif
1422:../src/src/keys.c **** 
1423:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_AES_256_CBC_SHA256
1424:../src/src/keys.c ****     case TLS_RSA_WITH_AES_256_CBC_SHA256 :
1425:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
1426:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1427:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1428:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1429:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1430:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1431:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1432:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1433:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
1434:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1435:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
1436:../src/src/keys.c **** 
1437:../src/src/keys.c ****         break;
1438:../src/src/keys.c **** #endif
1439:../src/src/keys.c **** 
1440:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_AES_128_GCM_SHA256
1441:../src/src/keys.c ****     case TLS_PSK_WITH_AES_128_GCM_SHA256 :
1442:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
1443:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
1444:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1445:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
1446:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1447:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1448:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1449:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1450:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
1451:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1452:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
1453:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
1454:../src/src/keys.c **** 
1455:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1456:../src/src/keys.c ****         break;
1457:../src/src/keys.c **** #endif
1458:../src/src/keys.c **** 
1459:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_AES_256_GCM_SHA384
1460:../src/src/keys.c ****     case TLS_PSK_WITH_AES_256_GCM_SHA384 :
1461:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
1462:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
1463:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
1464:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
1465:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1466:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
1467:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1468:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1469:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
1470:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1471:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
1472:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
1473:../src/src/keys.c **** 
1474:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1475:../src/src/keys.c ****         break;
1476:../src/src/keys.c **** #endif
1477:../src/src/keys.c **** 
1478:../src/src/keys.c **** #ifdef BUILD_TLS_DH_anon_WITH_AES_256_GCM_SHA384
1479:../src/src/keys.c ****     case TLS_DH_anon_WITH_AES_256_GCM_SHA384:
1480:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
1481:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
1482:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
1483:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
1484:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1485:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
1486:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1487:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1488:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
1489:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1490:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
1491:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
1492:../src/src/keys.c **** 
1493:../src/src/keys.c ****          ssl->options.usingAnon_cipher    = 1;
1494:../src/src/keys.c ****         break;
1495:../src/src/keys.c **** #endif
1496:../src/src/keys.c **** 
1497:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256
1498:../src/src/keys.c ****     case TLS_DHE_PSK_WITH_AES_128_GCM_SHA256 :
1499:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 877                             		.loc 1 1499 42
 878 06a3 EC A5                   		mov.L	[r10], r5
 879 06a5 FA 54 6C 01 07          		mov.B	#7, 364[r5]
1500:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 880                             		.loc 1 1500 42
 881 06aa EC A5                   		mov.L	[r10], r5
 882 06ac FA 54 6D 01 02          		mov.B	#2, 365[r5]
1501:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 883                             		.loc 1 1501 42
 884 06b1 EC A5                   		mov.L	[r10], r5
 885 06b3 FA 54 6E 01 04          		mov.B	#4, 366[r5]
1502:../src/src/keys.c ****         ssl->specs.kea                   = dhe_psk_kea;
 886                             		.loc 1 1502 42
 887 06b8 EC A5                   		mov.L	[r10], r5
 888 06ba FA 54 6F 01 05          		mov.B	#5, 367[r5]
1503:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
 889                             		.loc 1 1503 42
 890 06bf EC A5                   		mov.L	[r10], r5
 891 06c1 FA 54 70 01 00          		mov.B	#0, 368[r5]
1504:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 892                             		.loc 1 1504 42
 893 06c6 EC A5                   		mov.L	[r10], r5
 894 06c8 FA 54 71 01 20          		mov.B	#32, 369[r5]
1505:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 895                             		.loc 1 1505 42
 896 06cd EC A5                   		mov.L	[r10], r5
 897 06cf FA 54 72 01 28          		mov.B	#40, 370[r5]
1506:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 898                             		.loc 1 1506 42
 899 06d4 EC A5                   		mov.L	[r10], r5
 900 06d6 FA 54 73 01 00          		mov.B	#0, 371[r5]
1507:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 901                             		.loc 1 1507 42
 902 06db EC A5                   		mov.L	[r10], r5
 903 06dd F9 55 B2 10             		mov.W	#16, 356[r5]
1508:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 904                             		.loc 1 1508 42
 905 06e1 EC A5                   		mov.L	[r10], r5
 906 06e3 F9 55 B4 10             		mov.W	#16, 360[r5]
1509:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 907                             		.loc 1 1509 42
 908 06e7 EC A5                   		mov.L	[r10], r5
 909 06e9 F9 55 B3 04             		mov.W	#4, 358[r5]
1510:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 910                             		.loc 1 1510 42
 911 06ed EC A5                   		mov.L	[r10], r5
 912 06ef F9 55 B5 10             		mov.W	#16, 362[r5]
1511:../src/src/keys.c **** 
1512:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
 913                             		.loc 1 1512 42
 914 06f3 EC A4                   		mov.L	[r10], r4
 915 06f5 ED 45 A8                		mov.L	672[r4], r5
 916 06f8 78 05                   		bset	#0, r5
 917 06fa E7 45 A8                		mov.L	r5, 672[r4]
1513:../src/src/keys.c ****         break;
 918                             		.loc 1 1513 9
 919 06fd 38 44 03                		bra	.L28
 920                             	.L38:
1514:../src/src/keys.c **** #endif
1515:../src/src/keys.c **** 
1516:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384
1517:../src/src/keys.c ****     case TLS_DHE_PSK_WITH_AES_256_GCM_SHA384 :
1518:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 921                             		.loc 1 1518 42
 922 0700 EC A5                   		mov.L	[r10], r5
 923 0702 FA 54 6C 01 07          		mov.B	#7, 364[r5]
1519:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 924                             		.loc 1 1519 42
 925 0707 EC A5                   		mov.L	[r10], r5
 926 0709 FA 54 6D 01 02          		mov.B	#2, 365[r5]
1520:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
 927                             		.loc 1 1520 42
 928 070e EC A5                   		mov.L	[r10], r5
 929 0710 FA 54 6E 01 05          		mov.B	#5, 366[r5]
1521:../src/src/keys.c ****         ssl->specs.kea                   = dhe_psk_kea;
 930                             		.loc 1 1521 42
 931 0715 EC A5                   		mov.L	[r10], r5
 932 0717 FA 54 6F 01 05          		mov.B	#5, 367[r5]
1522:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
 933                             		.loc 1 1522 42
 934 071c EC A5                   		mov.L	[r10], r5
 935 071e FA 54 70 01 00          		mov.B	#0, 368[r5]
1523:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
 936                             		.loc 1 1523 42
 937 0723 EC A5                   		mov.L	[r10], r5
 938 0725 FA 54 71 01 30          		mov.B	#48, 369[r5]
1524:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 939                             		.loc 1 1524 42
 940 072a EC A5                   		mov.L	[r10], r5
 941 072c FA 54 72 01 28          		mov.B	#40, 370[r5]
1525:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 942                             		.loc 1 1525 42
 943 0731 EC A5                   		mov.L	[r10], r5
 944 0733 FA 54 73 01 00          		mov.B	#0, 371[r5]
1526:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 945                             		.loc 1 1526 42
 946 0738 EC A5                   		mov.L	[r10], r5
 947 073a F9 55 B2 20             		mov.W	#32, 356[r5]
1527:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 948                             		.loc 1 1527 42
 949 073e EC A5                   		mov.L	[r10], r5
 950 0740 F9 55 B4 10             		mov.W	#16, 360[r5]
1528:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 951                             		.loc 1 1528 42
 952 0744 EC A5                   		mov.L	[r10], r5
 953 0746 F9 55 B3 04             		mov.W	#4, 358[r5]
1529:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 954                             		.loc 1 1529 42
 955 074a EC A5                   		mov.L	[r10], r5
 956 074c F9 55 B5 10             		mov.W	#16, 362[r5]
1530:../src/src/keys.c **** 
1531:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
 957                             		.loc 1 1531 42
 958 0750 EC A4                   		mov.L	[r10], r4
 959 0752 ED 45 A8                		mov.L	672[r4], r5
 960 0755 78 05                   		bset	#0, r5
 961 0757 E7 45 A8                		mov.L	r5, 672[r4]
1532:../src/src/keys.c ****         break;
 962                             		.loc 1 1532 9
 963 075a 38 E7 02                		bra	.L28
 964                             	.L42:
1533:../src/src/keys.c **** #endif
1534:../src/src/keys.c **** 
1535:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_AES_128_CBC_SHA256
1536:../src/src/keys.c ****     case TLS_PSK_WITH_AES_128_CBC_SHA256 :
1537:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
1538:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1539:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1540:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
1541:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1542:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1543:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1544:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1545:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
1546:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1547:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
1548:../src/src/keys.c **** 
1549:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1550:../src/src/keys.c ****         break;
1551:../src/src/keys.c **** #endif
1552:../src/src/keys.c **** 
1553:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_AES_256_CBC_SHA384
1554:../src/src/keys.c ****     case TLS_PSK_WITH_AES_256_CBC_SHA384 :
1555:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
1556:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1557:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
1558:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
1559:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1560:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
1561:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1562:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1563:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
1564:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1565:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
1566:../src/src/keys.c **** 
1567:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1568:../src/src/keys.c ****         break;
1569:../src/src/keys.c **** #endif
1570:../src/src/keys.c **** 
1571:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256
1572:../src/src/keys.c ****     case TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 :
1573:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 965                             		.loc 1 1573 42
 966 075d EC A5                   		mov.L	[r10], r5
 967 075f FA 54 6C 01 06          		mov.B	#6, 364[r5]
1574:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 968                             		.loc 1 1574 42
 969 0764 EC A5                   		mov.L	[r10], r5
 970 0766 FA 54 6D 01 01          		mov.B	#1, 365[r5]
1575:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 971                             		.loc 1 1575 42
 972 076b EC A5                   		mov.L	[r10], r5
 973 076d FA 54 6E 01 04          		mov.B	#4, 366[r5]
1576:../src/src/keys.c ****         ssl->specs.kea                   = dhe_psk_kea;
 974                             		.loc 1 1576 42
 975 0772 EC A5                   		mov.L	[r10], r5
 976 0774 FA 54 6F 01 05          		mov.B	#5, 367[r5]
1577:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
 977                             		.loc 1 1577 42
 978 0779 EC A5                   		mov.L	[r10], r5
 979 077b FA 54 70 01 00          		mov.B	#0, 368[r5]
1578:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 980                             		.loc 1 1578 42
 981 0780 EC A5                   		mov.L	[r10], r5
 982 0782 FA 54 71 01 20          		mov.B	#32, 369[r5]
1579:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 983                             		.loc 1 1579 42
 984 0787 EC A5                   		mov.L	[r10], r5
 985 0789 FA 54 72 01 28          		mov.B	#40, 370[r5]
1580:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 986                             		.loc 1 1580 42
 987 078e EC A5                   		mov.L	[r10], r5
 988 0790 FA 54 73 01 00          		mov.B	#0, 371[r5]
1581:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 989                             		.loc 1 1581 42
 990 0795 EC A5                   		mov.L	[r10], r5
 991 0797 F9 55 B2 10             		mov.W	#16, 356[r5]
1582:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 992                             		.loc 1 1582 42
 993 079b EC A5                   		mov.L	[r10], r5
 994 079d F9 55 B4 10             		mov.W	#16, 360[r5]
1583:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 995                             		.loc 1 1583 42
 996 07a1 EC A5                   		mov.L	[r10], r5
 997 07a3 F9 55 B3 10             		mov.W	#16, 358[r5]
1584:../src/src/keys.c **** 
1585:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
 998                             		.loc 1 1585 42
 999 07a7 EC A4                   		mov.L	[r10], r4
 1000 07a9 ED 45 A8                		mov.L	672[r4], r5
 1001 07ac 78 05                   		bset	#0, r5
 1002 07ae E7 45 A8                		mov.L	r5, 672[r4]
1586:../src/src/keys.c ****         break;
 1003                             		.loc 1 1586 9
 1004 07b1 38 90 02                		bra	.L28
 1005                             	.L43:
1587:../src/src/keys.c **** #endif
1588:../src/src/keys.c **** 
1589:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384
1590:../src/src/keys.c ****     case TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 :
1591:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 1006                             		.loc 1 1591 42
 1007 07b4 EC A5                   		mov.L	[r10], r5
 1008 07b6 FA 54 6C 01 06          		mov.B	#6, 364[r5]
1592:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 1009                             		.loc 1 1592 42
 1010 07bb EC A5                   		mov.L	[r10], r5
 1011 07bd FA 54 6D 01 01          		mov.B	#1, 365[r5]
1593:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
 1012                             		.loc 1 1593 42
 1013 07c2 EC A5                   		mov.L	[r10], r5
 1014 07c4 FA 54 6E 01 05          		mov.B	#5, 366[r5]
1594:../src/src/keys.c ****         ssl->specs.kea                   = dhe_psk_kea;
 1015                             		.loc 1 1594 42
 1016 07c9 EC A5                   		mov.L	[r10], r5
 1017 07cb FA 54 6F 01 05          		mov.B	#5, 367[r5]
1595:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
 1018                             		.loc 1 1595 42
 1019 07d0 EC A5                   		mov.L	[r10], r5
 1020 07d2 FA 54 70 01 00          		mov.B	#0, 368[r5]
1596:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
 1021                             		.loc 1 1596 42
 1022 07d7 EC A5                   		mov.L	[r10], r5
 1023 07d9 FA 54 71 01 30          		mov.B	#48, 369[r5]
1597:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 1024                             		.loc 1 1597 42
 1025 07de EC A5                   		mov.L	[r10], r5
 1026 07e0 FA 54 72 01 28          		mov.B	#40, 370[r5]
1598:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 1027                             		.loc 1 1598 42
 1028 07e5 EC A5                   		mov.L	[r10], r5
 1029 07e7 FA 54 73 01 00          		mov.B	#0, 371[r5]
1599:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 1030                             		.loc 1 1599 42
 1031 07ec EC A5                   		mov.L	[r10], r5
 1032 07ee F9 55 B2 20             		mov.W	#32, 356[r5]
1600:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 1033                             		.loc 1 1600 42
 1034 07f2 EC A5                   		mov.L	[r10], r5
 1035 07f4 F9 55 B4 10             		mov.W	#16, 360[r5]
1601:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 1036                             		.loc 1 1601 42
 1037 07f8 EC A5                   		mov.L	[r10], r5
 1038 07fa F9 55 B3 10             		mov.W	#16, 358[r5]
1602:../src/src/keys.c **** 
1603:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
 1039                             		.loc 1 1603 42
 1040 07fe EC A4                   		mov.L	[r10], r4
 1041 0800 ED 45 A8                		mov.L	672[r4], r5
 1042 0803 78 05                   		bset	#0, r5
 1043 0805 E7 45 A8                		mov.L	r5, 672[r4]
1604:../src/src/keys.c ****         break;
 1044                             		.loc 1 1604 9
 1045 0808 38 39 02                		bra	.L28
 1046                             	.L36:
1605:../src/src/keys.c **** #endif
1606:../src/src/keys.c **** 
1607:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_AES_128_CBC_SHA
1608:../src/src/keys.c ****     case TLS_PSK_WITH_AES_128_CBC_SHA :
1609:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
1610:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1611:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
1612:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
1613:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1614:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
1615:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1616:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1617:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
1618:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1619:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
1620:../src/src/keys.c **** 
1621:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1622:../src/src/keys.c ****         break;
1623:../src/src/keys.c **** #endif
1624:../src/src/keys.c **** 
1625:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_AES_256_CBC_SHA
1626:../src/src/keys.c ****     case TLS_PSK_WITH_AES_256_CBC_SHA :
1627:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
1628:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1629:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
1630:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
1631:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1632:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
1633:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1634:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1635:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
1636:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1637:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
1638:../src/src/keys.c **** 
1639:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1640:../src/src/keys.c ****         break;
1641:../src/src/keys.c **** #endif
1642:../src/src/keys.c **** 
1643:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_NULL_SHA256
1644:../src/src/keys.c ****     case TLS_PSK_WITH_NULL_SHA256 :
1645:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
1646:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
1647:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1648:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
1649:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1650:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1651:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1652:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1653:../src/src/keys.c ****         ssl->specs.key_size              = 0;
1654:../src/src/keys.c ****         ssl->specs.block_size            = 0;
1655:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
1656:../src/src/keys.c **** 
1657:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1658:../src/src/keys.c ****         break;
1659:../src/src/keys.c **** #endif
1660:../src/src/keys.c **** 
1661:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_NULL_SHA384
1662:../src/src/keys.c ****     case TLS_PSK_WITH_NULL_SHA384 :
1663:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
1664:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
1665:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
1666:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
1667:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1668:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
1669:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1670:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1671:../src/src/keys.c ****         ssl->specs.key_size              = 0;
1672:../src/src/keys.c ****         ssl->specs.block_size            = 0;
1673:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
1674:../src/src/keys.c **** 
1675:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1676:../src/src/keys.c ****         break;
1677:../src/src/keys.c **** #endif
1678:../src/src/keys.c **** 
1679:../src/src/keys.c **** #ifdef BUILD_TLS_PSK_WITH_NULL_SHA
1680:../src/src/keys.c ****     case TLS_PSK_WITH_NULL_SHA :
1681:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
1682:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
1683:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
1684:../src/src/keys.c ****         ssl->specs.kea                   = psk_kea;
1685:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1686:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
1687:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1688:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1689:../src/src/keys.c ****         ssl->specs.key_size              = 0;
1690:../src/src/keys.c ****         ssl->specs.block_size            = 0;
1691:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
1692:../src/src/keys.c **** 
1693:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1694:../src/src/keys.c ****         break;
1695:../src/src/keys.c **** #endif
1696:../src/src/keys.c **** 
1697:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_PSK_WITH_NULL_SHA256
1698:../src/src/keys.c ****     case TLS_DHE_PSK_WITH_NULL_SHA256 :
1699:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
1700:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
1701:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1702:../src/src/keys.c ****         ssl->specs.kea                   = dhe_psk_kea;
1703:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1704:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1705:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1706:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1707:../src/src/keys.c ****         ssl->specs.key_size              = 0;
1708:../src/src/keys.c ****         ssl->specs.block_size            = 0;
1709:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
1710:../src/src/keys.c **** 
1711:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1712:../src/src/keys.c ****         break;
1713:../src/src/keys.c **** #endif
1714:../src/src/keys.c **** 
1715:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_PSK_WITH_NULL_SHA384
1716:../src/src/keys.c ****     case TLS_DHE_PSK_WITH_NULL_SHA384 :
1717:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
1718:../src/src/keys.c ****         ssl->specs.cipher_type           = stream;
1719:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
1720:../src/src/keys.c ****         ssl->specs.kea                   = dhe_psk_kea;
1721:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
1722:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
1723:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1724:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1725:../src/src/keys.c ****         ssl->specs.key_size              = 0;
1726:../src/src/keys.c ****         ssl->specs.block_size            = 0;
1727:../src/src/keys.c ****         ssl->specs.iv_size               = 0;
1728:../src/src/keys.c **** 
1729:../src/src/keys.c ****         ssl->options.usingPSK_cipher     = 1;
1730:../src/src/keys.c ****         break;
1731:../src/src/keys.c **** #endif
1732:../src/src/keys.c **** 
1733:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
1734:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 :
1735:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 1047                             		.loc 1 1735 42
 1048 080b EC A5                   		mov.L	[r10], r5
 1049 080d FA 54 6C 01 06          		mov.B	#6, 364[r5]
1736:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 1050                             		.loc 1 1736 42
 1051 0812 EC A5                   		mov.L	[r10], r5
 1052 0814 FA 54 6D 01 01          		mov.B	#1, 365[r5]
1737:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 1053                             		.loc 1 1737 42
 1054 0819 EC A5                   		mov.L	[r10], r5
 1055 081b FA 54 6E 01 04          		mov.B	#4, 366[r5]
1738:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
 1056                             		.loc 1 1738 42
 1057 0820 EC A5                   		mov.L	[r10], r5
 1058 0822 FA 54 6F 01 02          		mov.B	#2, 367[r5]
1739:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 1059                             		.loc 1 1739 42
 1060 0827 EC A5                   		mov.L	[r10], r5
 1061 0829 FA 54 70 01 01          		mov.B	#1, 368[r5]
1740:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 1062                             		.loc 1 1740 42
 1063 082e EC A5                   		mov.L	[r10], r5
 1064 0830 FA 54 71 01 20          		mov.B	#32, 369[r5]
1741:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 1065                             		.loc 1 1741 42
 1066 0835 EC A5                   		mov.L	[r10], r5
 1067 0837 FA 54 72 01 28          		mov.B	#40, 370[r5]
1742:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 1068                             		.loc 1 1742 42
 1069 083c EC A5                   		mov.L	[r10], r5
 1070 083e FA 54 73 01 00          		mov.B	#0, 371[r5]
1743:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 1071                             		.loc 1 1743 42
 1072 0843 EC A5                   		mov.L	[r10], r5
 1073 0845 F9 55 B2 10             		mov.W	#16, 356[r5]
1744:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 1074                             		.loc 1 1744 42
 1075 0849 EC A5                   		mov.L	[r10], r5
 1076 084b F9 55 B4 10             		mov.W	#16, 360[r5]
1745:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 1077                             		.loc 1 1745 42
 1078 084f EC A5                   		mov.L	[r10], r5
 1079 0851 F9 55 B3 10             		mov.W	#16, 358[r5]
1746:../src/src/keys.c **** 
1747:../src/src/keys.c ****         break;
 1080                             		.loc 1 1747 9
 1081 0855 38 EC 01                		bra	.L28
 1082                             	.L33:
1748:../src/src/keys.c **** #endif
1749:../src/src/keys.c **** 
1750:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
1751:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA :
1752:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_triple_des;
 1083                             		.loc 1 1752 42
 1084 0858 EC A5                   		mov.L	[r10], r5
 1085 085a FA 54 6C 01 04          		mov.B	#4, 364[r5]
1753:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 1086                             		.loc 1 1753 42
 1087 085f EC A5                   		mov.L	[r10], r5
 1088 0861 FA 54 6D 01 01          		mov.B	#1, 365[r5]
1754:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 1089                             		.loc 1 1754 42
 1090 0866 EC A5                   		mov.L	[r10], r5
 1091 0868 FA 54 6E 01 02          		mov.B	#2, 366[r5]
1755:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
 1092                             		.loc 1 1755 42
 1093 086d EC A5                   		mov.L	[r10], r5
 1094 086f FA 54 6F 01 02          		mov.B	#2, 367[r5]
1756:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 1095                             		.loc 1 1756 42
 1096 0874 EC A5                   		mov.L	[r10], r5
 1097 0876 FA 54 70 01 01          		mov.B	#1, 368[r5]
1757:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 1098                             		.loc 1 1757 42
 1099 087b EC A5                   		mov.L	[r10], r5
 1100 087d FA 54 71 01 14          		mov.B	#20, 369[r5]
1758:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 1101                             		.loc 1 1758 42
 1102 0882 EC A5                   		mov.L	[r10], r5
 1103 0884 FA 54 72 01 28          		mov.B	#40, 370[r5]
1759:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 1104                             		.loc 1 1759 42
 1105 0889 EC A5                   		mov.L	[r10], r5
 1106 088b FA 54 73 01 00          		mov.B	#0, 371[r5]
1760:../src/src/keys.c ****         ssl->specs.key_size              = DES3_KEY_SIZE;
 1107                             		.loc 1 1760 42
 1108 0890 EC A5                   		mov.L	[r10], r5
 1109 0892 F9 55 B2 18             		mov.W	#24, 356[r5]
1761:../src/src/keys.c ****         ssl->specs.block_size            = DES_BLOCK_SIZE;
 1110                             		.loc 1 1761 42
 1111 0896 EC A5                   		mov.L	[r10], r5
 1112 0898 F9 55 B4 08             		mov.W	#8, 360[r5]
1762:../src/src/keys.c ****         ssl->specs.iv_size               = DES_IV_SIZE;
 1113                             		.loc 1 1762 42
 1114 089c EC A5                   		mov.L	[r10], r5
 1115 089e F9 55 B3 08             		mov.W	#8, 358[r5]
1763:../src/src/keys.c **** 
1764:../src/src/keys.c ****         break;
 1116                             		.loc 1 1764 9
 1117 08a2 38 9F 01                		bra	.L28
 1118                             	.L37:
1765:../src/src/keys.c **** #endif
1766:../src/src/keys.c **** 
1767:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
1768:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 :
1769:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 1119                             		.loc 1 1769 42
 1120 08a5 EC A5                   		mov.L	[r10], r5
 1121 08a7 FA 54 6C 01 06          		mov.B	#6, 364[r5]
1770:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 1122                             		.loc 1 1770 42
 1123 08ac EC A5                   		mov.L	[r10], r5
 1124 08ae FA 54 6D 01 01          		mov.B	#1, 365[r5]
1771:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 1125                             		.loc 1 1771 42
 1126 08b3 EC A5                   		mov.L	[r10], r5
 1127 08b5 FA 54 6E 01 04          		mov.B	#4, 366[r5]
1772:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
 1128                             		.loc 1 1772 42
 1129 08ba EC A5                   		mov.L	[r10], r5
 1130 08bc FA 54 6F 01 02          		mov.B	#2, 367[r5]
1773:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 1131                             		.loc 1 1773 42
 1132 08c1 EC A5                   		mov.L	[r10], r5
 1133 08c3 FA 54 70 01 01          		mov.B	#1, 368[r5]
1774:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 1134                             		.loc 1 1774 42
 1135 08c8 EC A5                   		mov.L	[r10], r5
 1136 08ca FA 54 71 01 20          		mov.B	#32, 369[r5]
1775:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 1137                             		.loc 1 1775 42
 1138 08cf EC A5                   		mov.L	[r10], r5
 1139 08d1 FA 54 72 01 28          		mov.B	#40, 370[r5]
1776:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 1140                             		.loc 1 1776 42
 1141 08d6 EC A5                   		mov.L	[r10], r5
 1142 08d8 FA 54 73 01 00          		mov.B	#0, 371[r5]
1777:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 1143                             		.loc 1 1777 42
 1144 08dd EC A5                   		mov.L	[r10], r5
 1145 08df F9 55 B2 20             		mov.W	#32, 356[r5]
1778:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 1146                             		.loc 1 1778 42
 1147 08e3 EC A5                   		mov.L	[r10], r5
 1148 08e5 F9 55 B4 10             		mov.W	#16, 360[r5]
1779:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 1149                             		.loc 1 1779 42
 1150 08e9 EC A5                   		mov.L	[r10], r5
 1151 08eb F9 55 B3 10             		mov.W	#16, 358[r5]
1780:../src/src/keys.c **** 
1781:../src/src/keys.c ****         break;
 1152                             		.loc 1 1781 9
 1153 08ef 38 52 01                		bra	.L28
 1154                             	.L34:
1782:../src/src/keys.c **** #endif
1783:../src/src/keys.c **** 
1784:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_AES_128_CBC_SHA
1785:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_AES_128_CBC_SHA :
1786:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 1155                             		.loc 1 1786 42
 1156 08f2 EC A5                   		mov.L	[r10], r5
 1157 08f4 FA 54 6C 01 06          		mov.B	#6, 364[r5]
1787:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 1158                             		.loc 1 1787 42
 1159 08f9 EC A5                   		mov.L	[r10], r5
 1160 08fb FA 54 6D 01 01          		mov.B	#1, 365[r5]
1788:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 1161                             		.loc 1 1788 42
 1162 0900 EC A5                   		mov.L	[r10], r5
 1163 0902 FA 54 6E 01 02          		mov.B	#2, 366[r5]
1789:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
 1164                             		.loc 1 1789 42
 1165 0907 EC A5                   		mov.L	[r10], r5
 1166 0909 FA 54 6F 01 02          		mov.B	#2, 367[r5]
1790:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 1167                             		.loc 1 1790 42
 1168 090e EC A5                   		mov.L	[r10], r5
 1169 0910 FA 54 70 01 01          		mov.B	#1, 368[r5]
1791:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 1170                             		.loc 1 1791 42
 1171 0915 EC A5                   		mov.L	[r10], r5
 1172 0917 FA 54 71 01 14          		mov.B	#20, 369[r5]
1792:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 1173                             		.loc 1 1792 42
 1174 091c EC A5                   		mov.L	[r10], r5
 1175 091e FA 54 72 01 28          		mov.B	#40, 370[r5]
1793:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 1176                             		.loc 1 1793 42
 1177 0923 EC A5                   		mov.L	[r10], r5
 1178 0925 FA 54 73 01 00          		mov.B	#0, 371[r5]
1794:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 1179                             		.loc 1 1794 42
 1180 092a EC A5                   		mov.L	[r10], r5
 1181 092c F9 55 B2 10             		mov.W	#16, 356[r5]
1795:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 1182                             		.loc 1 1795 42
 1183 0930 EC A5                   		mov.L	[r10], r5
 1184 0932 F9 55 B4 10             		mov.W	#16, 360[r5]
1796:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 1185                             		.loc 1 1796 42
 1186 0936 EC A5                   		mov.L	[r10], r5
 1187 0938 F9 55 B3 10             		mov.W	#16, 358[r5]
1797:../src/src/keys.c **** 
1798:../src/src/keys.c ****         break;
 1188                             		.loc 1 1798 9
 1189 093c 38 05 01                		bra	.L28
 1190                             	.L31:
1799:../src/src/keys.c **** #endif
1800:../src/src/keys.c **** 
1801:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_AES_256_CBC_SHA
1802:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_AES_256_CBC_SHA :
1803:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
 1191                             		.loc 1 1803 42
 1192 093f EC A5                   		mov.L	[r10], r5
 1193 0941 FA 54 6C 01 06          		mov.B	#6, 364[r5]
1804:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
 1194                             		.loc 1 1804 42
 1195 0946 EC A5                   		mov.L	[r10], r5
 1196 0948 FA 54 6D 01 01          		mov.B	#1, 365[r5]
1805:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
 1197                             		.loc 1 1805 42
 1198 094d EC A5                   		mov.L	[r10], r5
 1199 094f FA 54 6E 01 02          		mov.B	#2, 366[r5]
1806:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
 1200                             		.loc 1 1806 42
 1201 0954 EC A5                   		mov.L	[r10], r5
 1202 0956 FA 54 6F 01 02          		mov.B	#2, 367[r5]
1807:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 1203                             		.loc 1 1807 42
 1204 095b EC A5                   		mov.L	[r10], r5
 1205 095d FA 54 70 01 01          		mov.B	#1, 368[r5]
1808:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
 1206                             		.loc 1 1808 42
 1207 0962 EC A5                   		mov.L	[r10], r5
 1208 0964 FA 54 71 01 14          		mov.B	#20, 369[r5]
1809:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 1209                             		.loc 1 1809 42
 1210 0969 EC A5                   		mov.L	[r10], r5
 1211 096b FA 54 72 01 28          		mov.B	#40, 370[r5]
1810:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 1212                             		.loc 1 1810 42
 1213 0970 EC A5                   		mov.L	[r10], r5
 1214 0972 FA 54 73 01 00          		mov.B	#0, 371[r5]
1811:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 1215                             		.loc 1 1811 42
 1216 0977 EC A5                   		mov.L	[r10], r5
 1217 0979 F9 55 B2 20             		mov.W	#32, 356[r5]
1812:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 1218                             		.loc 1 1812 42
 1219 097d EC A5                   		mov.L	[r10], r5
 1220 097f F9 55 B4 10             		mov.W	#16, 360[r5]
1813:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
 1221                             		.loc 1 1813 42
 1222 0983 EC A5                   		mov.L	[r10], r5
 1223 0985 F9 55 B3 10             		mov.W	#16, 358[r5]
1814:../src/src/keys.c **** 
1815:../src/src/keys.c ****         break;
 1224                             		.loc 1 1815 9
 1225 0989 38 B8 00                		bra	.L28
 1226                             	.L29:
1816:../src/src/keys.c **** #endif
1817:../src/src/keys.c **** 
1818:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_AES_128_GCM_SHA256
1819:../src/src/keys.c ****     case TLS_RSA_WITH_AES_128_GCM_SHA256 :
1820:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
1821:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
1822:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1823:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1824:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1825:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1826:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1827:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1828:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
1829:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1830:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
1831:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
1832:../src/src/keys.c **** 
1833:../src/src/keys.c ****         break;
1834:../src/src/keys.c **** #endif
1835:../src/src/keys.c **** 
1836:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_AES_256_GCM_SHA384
1837:../src/src/keys.c ****     case TLS_RSA_WITH_AES_256_GCM_SHA384 :
1838:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
1839:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
1840:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
1841:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1842:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1843:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
1844:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1845:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1846:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
1847:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
1848:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
1849:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
1850:../src/src/keys.c **** 
1851:../src/src/keys.c ****         break;
1852:../src/src/keys.c **** #endif
1853:../src/src/keys.c **** 
1854:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
1855:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 :
1856:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 1227                             		.loc 1 1856 42
 1228 098c EC A5                   		mov.L	[r10], r5
 1229 098e FA 54 6C 01 07          		mov.B	#7, 364[r5]
1857:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 1230                             		.loc 1 1857 42
 1231 0993 EC A5                   		mov.L	[r10], r5
 1232 0995 FA 54 6D 01 02          		mov.B	#2, 365[r5]
1858:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
 1233                             		.loc 1 1858 42
 1234 099a EC A5                   		mov.L	[r10], r5
 1235 099c FA 54 6E 01 04          		mov.B	#4, 366[r5]
1859:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
 1236                             		.loc 1 1859 42
 1237 09a1 EC A5                   		mov.L	[r10], r5
 1238 09a3 FA 54 6F 01 02          		mov.B	#2, 367[r5]
1860:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 1239                             		.loc 1 1860 42
 1240 09a8 EC A5                   		mov.L	[r10], r5
 1241 09aa FA 54 70 01 01          		mov.B	#1, 368[r5]
1861:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
 1242                             		.loc 1 1861 42
 1243 09af EC A5                   		mov.L	[r10], r5
 1244 09b1 FA 54 71 01 20          		mov.B	#32, 369[r5]
1862:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 1245                             		.loc 1 1862 42
 1246 09b6 EC A5                   		mov.L	[r10], r5
 1247 09b8 FA 54 72 01 28          		mov.B	#40, 370[r5]
1863:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 1248                             		.loc 1 1863 42
 1249 09bd EC A5                   		mov.L	[r10], r5
 1250 09bf FA 54 73 01 00          		mov.B	#0, 371[r5]
1864:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
 1251                             		.loc 1 1864 42
 1252 09c4 EC A5                   		mov.L	[r10], r5
 1253 09c6 F9 55 B2 10             		mov.W	#16, 356[r5]
1865:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 1254                             		.loc 1 1865 42
 1255 09ca EC A5                   		mov.L	[r10], r5
 1256 09cc F9 55 B4 10             		mov.W	#16, 360[r5]
1866:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 1257                             		.loc 1 1866 42
 1258 09d0 EC A5                   		mov.L	[r10], r5
 1259 09d2 F9 55 B3 04             		mov.W	#4, 358[r5]
1867:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 1260                             		.loc 1 1867 42
 1261 09d6 EC A5                   		mov.L	[r10], r5
 1262 09d8 F9 55 B5 10             		mov.W	#16, 362[r5]
1868:../src/src/keys.c **** 
1869:../src/src/keys.c ****         break;
 1263                             		.loc 1 1869 9
 1264 09dc 2E 65                   		bra	.L28
 1265                             	.L40:
1870:../src/src/keys.c **** #endif
1871:../src/src/keys.c **** 
1872:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
1873:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_AES_256_GCM_SHA384 :
1874:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes_gcm;
 1266                             		.loc 1 1874 42
 1267 09de EC A5                   		mov.L	[r10], r5
 1268 09e0 FA 54 6C 01 07          		mov.B	#7, 364[r5]
1875:../src/src/keys.c ****         ssl->specs.cipher_type           = aead;
 1269                             		.loc 1 1875 42
 1270 09e5 EC A5                   		mov.L	[r10], r5
 1271 09e7 FA 54 6D 01 02          		mov.B	#2, 365[r5]
1876:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha384_mac;
 1272                             		.loc 1 1876 42
 1273 09ec EC A5                   		mov.L	[r10], r5
 1274 09ee FA 54 6E 01 05          		mov.B	#5, 366[r5]
1877:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
 1275                             		.loc 1 1877 42
 1276 09f3 EC A5                   		mov.L	[r10], r5
 1277 09f5 FA 54 6F 01 02          		mov.B	#2, 367[r5]
1878:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
 1278                             		.loc 1 1878 42
 1279 09fa EC A5                   		mov.L	[r10], r5
 1280 09fc FA 54 70 01 01          		mov.B	#1, 368[r5]
1879:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA384_DIGEST_SIZE;
 1281                             		.loc 1 1879 42
 1282 0a01 EC A5                   		mov.L	[r10], r5
 1283 0a03 FA 54 71 01 30          		mov.B	#48, 369[r5]
1880:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
 1284                             		.loc 1 1880 42
 1285 0a08 EC A5                   		mov.L	[r10], r5
 1286 0a0a FA 54 72 01 28          		mov.B	#40, 370[r5]
1881:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
 1287                             		.loc 1 1881 42
 1288 0a0f EC A5                   		mov.L	[r10], r5
 1289 0a11 FA 54 73 01 00          		mov.B	#0, 371[r5]
1882:../src/src/keys.c ****         ssl->specs.key_size              = AES_256_KEY_SIZE;
 1290                             		.loc 1 1882 42
 1291 0a16 EC A5                   		mov.L	[r10], r5
 1292 0a18 F9 55 B2 20             		mov.W	#32, 356[r5]
1883:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
 1293                             		.loc 1 1883 42
 1294 0a1c EC A5                   		mov.L	[r10], r5
 1295 0a1e F9 55 B4 10             		mov.W	#16, 360[r5]
1884:../src/src/keys.c ****         ssl->specs.iv_size               = AESGCM_IMP_IV_SZ;
 1296                             		.loc 1 1884 42
 1297 0a22 EC A5                   		mov.L	[r10], r5
 1298 0a24 F9 55 B3 04             		mov.W	#4, 358[r5]
1885:../src/src/keys.c ****         ssl->specs.aead_mac_size         = AES_GCM_AUTH_SZ;
 1299                             		.loc 1 1885 42
 1300 0a28 EC A5                   		mov.L	[r10], r5
 1301 0a2a F9 55 B5 10             		mov.W	#16, 362[r5]
1886:../src/src/keys.c **** 
1887:../src/src/keys.c ****         break;
 1302                             		.loc 1 1887 9
 1303 0a2e 2E 13                   		bra	.L28
 1304                             	.L35:
1888:../src/src/keys.c **** #endif
1889:../src/src/keys.c **** 
1890:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
1891:../src/src/keys.c ****     case TLS_RSA_WITH_CAMELLIA_128_CBC_SHA :
1892:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_camellia;
1893:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1894:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
1895:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1896:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1897:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
1898:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1899:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1900:../src/src/keys.c ****         ssl->specs.key_size              = CAMELLIA_128_KEY_SIZE;
1901:../src/src/keys.c ****         ssl->specs.block_size            = CAMELLIA_BLOCK_SIZE;
1902:../src/src/keys.c ****         ssl->specs.iv_size               = CAMELLIA_IV_SIZE;
1903:../src/src/keys.c **** 
1904:../src/src/keys.c ****         break;
1905:../src/src/keys.c **** #endif
1906:../src/src/keys.c **** 
1907:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA
1908:../src/src/keys.c ****     case TLS_RSA_WITH_CAMELLIA_256_CBC_SHA :
1909:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_camellia;
1910:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1911:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
1912:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1913:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1914:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
1915:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1916:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1917:../src/src/keys.c ****         ssl->specs.key_size              = CAMELLIA_256_KEY_SIZE;
1918:../src/src/keys.c ****         ssl->specs.block_size            = CAMELLIA_BLOCK_SIZE;
1919:../src/src/keys.c ****         ssl->specs.iv_size               = CAMELLIA_IV_SIZE;
1920:../src/src/keys.c **** 
1921:../src/src/keys.c ****         break;
1922:../src/src/keys.c **** #endif
1923:../src/src/keys.c **** 
1924:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256
1925:../src/src/keys.c ****     case TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 :
1926:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_camellia;
1927:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1928:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1929:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1930:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1931:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1932:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1933:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1934:../src/src/keys.c ****         ssl->specs.key_size              = CAMELLIA_128_KEY_SIZE;
1935:../src/src/keys.c ****         ssl->specs.block_size            = CAMELLIA_BLOCK_SIZE;
1936:../src/src/keys.c ****         ssl->specs.iv_size               = CAMELLIA_IV_SIZE;
1937:../src/src/keys.c **** 
1938:../src/src/keys.c ****         break;
1939:../src/src/keys.c **** #endif
1940:../src/src/keys.c **** 
1941:../src/src/keys.c **** #ifdef BUILD_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256
1942:../src/src/keys.c ****     case TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 :
1943:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_camellia;
1944:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1945:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1946:../src/src/keys.c ****         ssl->specs.kea                   = rsa_kea;
1947:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1948:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
1949:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1950:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1951:../src/src/keys.c ****         ssl->specs.key_size              = CAMELLIA_256_KEY_SIZE;
1952:../src/src/keys.c ****         ssl->specs.block_size            = CAMELLIA_BLOCK_SIZE;
1953:../src/src/keys.c ****         ssl->specs.iv_size               = CAMELLIA_IV_SIZE;
1954:../src/src/keys.c **** 
1955:../src/src/keys.c ****         break;
1956:../src/src/keys.c **** #endif
1957:../src/src/keys.c **** 
1958:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
1959:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA :
1960:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_camellia;
1961:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1962:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
1963:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
1964:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1965:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
1966:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1967:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1968:../src/src/keys.c ****         ssl->specs.key_size              = CAMELLIA_128_KEY_SIZE;
1969:../src/src/keys.c ****         ssl->specs.block_size            = CAMELLIA_BLOCK_SIZE;
1970:../src/src/keys.c ****         ssl->specs.iv_size               = CAMELLIA_IV_SIZE;
1971:../src/src/keys.c **** 
1972:../src/src/keys.c ****         break;
1973:../src/src/keys.c **** #endif
1974:../src/src/keys.c **** 
1975:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
1976:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA :
1977:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_camellia;
1978:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1979:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
1980:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
1981:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1982:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
1983:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
1984:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
1985:../src/src/keys.c ****         ssl->specs.key_size              = CAMELLIA_256_KEY_SIZE;
1986:../src/src/keys.c ****         ssl->specs.block_size            = CAMELLIA_BLOCK_SIZE;
1987:../src/src/keys.c ****         ssl->specs.iv_size               = CAMELLIA_IV_SIZE;
1988:../src/src/keys.c **** 
1989:../src/src/keys.c ****         break;
1990:../src/src/keys.c **** #endif
1991:../src/src/keys.c **** 
1992:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
1993:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 :
1994:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_camellia;
1995:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
1996:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
1997:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
1998:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
1999:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
2000:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
2001:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
2002:../src/src/keys.c ****         ssl->specs.key_size              = CAMELLIA_128_KEY_SIZE;
2003:../src/src/keys.c ****         ssl->specs.block_size            = CAMELLIA_BLOCK_SIZE;
2004:../src/src/keys.c ****         ssl->specs.iv_size               = CAMELLIA_IV_SIZE;
2005:../src/src/keys.c **** 
2006:../src/src/keys.c ****         break;
2007:../src/src/keys.c **** #endif
2008:../src/src/keys.c **** 
2009:../src/src/keys.c **** #ifdef BUILD_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
2010:../src/src/keys.c ****     case TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 :
2011:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_camellia;
2012:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
2013:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha256_mac;
2014:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
2015:../src/src/keys.c ****         ssl->specs.sig_algo              = rsa_sa_algo;
2016:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
2017:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
2018:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
2019:../src/src/keys.c ****         ssl->specs.key_size              = CAMELLIA_256_KEY_SIZE;
2020:../src/src/keys.c ****         ssl->specs.block_size            = CAMELLIA_BLOCK_SIZE;
2021:../src/src/keys.c ****         ssl->specs.iv_size               = CAMELLIA_IV_SIZE;
2022:../src/src/keys.c **** 
2023:../src/src/keys.c ****         break;
2024:../src/src/keys.c **** #endif
2025:../src/src/keys.c **** 
2026:../src/src/keys.c **** #ifdef BUILD_TLS_DH_anon_WITH_AES_128_CBC_SHA
2027:../src/src/keys.c ****     case TLS_DH_anon_WITH_AES_128_CBC_SHA :
2028:../src/src/keys.c ****         ssl->specs.bulk_cipher_algorithm = wolfssl_aes;
2029:../src/src/keys.c ****         ssl->specs.cipher_type           = block;
2030:../src/src/keys.c ****         ssl->specs.mac_algorithm         = sha_mac;
2031:../src/src/keys.c ****         ssl->specs.kea                   = diffie_hellman_kea;
2032:../src/src/keys.c ****         ssl->specs.sig_algo              = anonymous_sa_algo;
2033:../src/src/keys.c ****         ssl->specs.hash_size             = WC_SHA_DIGEST_SIZE;
2034:../src/src/keys.c ****         ssl->specs.pad_size              = PAD_SHA;
2035:../src/src/keys.c ****         ssl->specs.static_ecdh           = 0;
2036:../src/src/keys.c ****         ssl->specs.key_size              = AES_128_KEY_SIZE;
2037:../src/src/keys.c ****         ssl->specs.block_size            = AES_BLOCK_SIZE;
2038:../src/src/keys.c ****         ssl->specs.iv_size               = AES_IV_SIZE;
2039:../src/src/keys.c **** 
2040:../src/src/keys.c ****         ssl->options.usingAnon_cipher    = 1;
2041:../src/src/keys.c ****         break;
2042:../src/src/keys.c **** #endif
2043:../src/src/keys.c **** 
2044:../src/src/keys.c **** #ifdef BUILD_WDM_WITH_NULL_SHA256
2045:../src/src/keys.c ****         case WDM_WITH_NULL_SHA256 :
2046:../src/src/keys.c ****             ssl->specs.bulk_cipher_algorithm = wolfssl_cipher_null;
2047:../src/src/keys.c ****             ssl->specs.cipher_type           = stream;
2048:../src/src/keys.c ****             ssl->specs.mac_algorithm         = sha256_mac;
2049:../src/src/keys.c ****             ssl->specs.kea                   = no_kea;
2050:../src/src/keys.c ****             ssl->specs.sig_algo              = anonymous_sa_algo;
2051:../src/src/keys.c ****             ssl->specs.hash_size             = WC_SHA256_DIGEST_SIZE;
2052:../src/src/keys.c ****             ssl->specs.pad_size              = PAD_SHA;
2053:../src/src/keys.c **** 
2054:../src/src/keys.c ****             break;
2055:../src/src/keys.c **** #endif
2056:../src/src/keys.c **** 
2057:../src/src/keys.c ****     default:
2058:../src/src/keys.c ****         WOLFSSL_MSG("Unsupported cipher suite, SetCipherSpecs");
 1305                             		.loc 1 2058 9
 1306 0a30 FB 12 8B 00 00 00       		mov.L	#.LC3, r1
 1307 0a36 05 00 00 00             		bsr	_WOLFSSL_MSG
2059:../src/src/keys.c ****         return UNSUPPORTED_SUITE;
 1308                             		.loc 1 2059 16
 1309 0a3a FB 5A 0C FE             		mov.L	#-500, r5
 1310 0a3e 2E 72                   		bra	.L3
 1311                             	.L49:
2060:../src/src/keys.c ****     }  /* switch */
2061:../src/src/keys.c ****     }  /* if ECC / Normal suites else */
 1312                             		.loc 1 2061 5
 1313 0a40 03                      		nop
 1314                             		.balign 8,3,1
 1315                             	.L28:
2062:../src/src/keys.c **** 
2063:../src/src/keys.c ****     /* set TLS if it hasn't been turned off */
2064:../src/src/keys.c ****     if (ssl->version.major == SSLv3_MAJOR &&
 1316                             		.loc 1 2064 21
 1317 0a41 EC A5                   		mov.L	[r10], r5
 1318 0a43 CE 55 60 01             		mov.B	352[r5], r5
 1319                             		.loc 1 2064 8
 1320 0a47 5B 55                   		movu.B	r5, r5
 1321 0a49 61 35                   		cmp	#3, r5
 1322 0a4b 21 4D                   		bne	.L44
2065:../src/src/keys.c ****             ssl->version.minor >= TLSv1_MINOR) {
 1323                             		.loc 1 2065 25 discriminator 1
 1324 0a4d EC A5                   		mov.L	[r10], r5
 1325 0a4f CE 55 61 01             		mov.B	353[r5], r5
2064:../src/src/keys.c ****             ssl->version.minor >= TLSv1_MINOR) {
 1326                             		.loc 1 2064 43 discriminator 1
 1327 0a53 5B 55                   		movu.B	r5, r5
 1328 0a55 61 05                   		cmp	#0, r5
 1329 0a57 20 41                   		beq	.L44
2066:../src/src/keys.c **** #ifndef NO_TLS
2067:../src/src/keys.c ****         ssl->options.tls = 1;
 1330                             		.loc 1 2067 26
 1331 0a59 EC A4                   		mov.L	[r10], r4
 1332 0a5b ED 45 A7                		mov.L	668[r4], r5
 1333 0a5e 78 F5                   		bset	#15, r5
 1334 0a60 E7 45 A7                		mov.L	r5, 668[r4]
2068:../src/src/keys.c ****     #if !defined(WOLFSSL_NO_TLS12) && !defined(WOLFSSL_AEAD_ONLY)
2069:../src/src/keys.c ****         #if !defined(WOLFSSL_RENESAS_SCEPROTECT) && \
2070:../src/src/keys.c ****             !defined(WOLFSSL_RENESAS_TSIP_TLS)
2071:../src/src/keys.c ****         ssl->hmac = TLS_hmac;
 1335                             		.loc 1 2071 19
 1336 0a63 EC A5                   		mov.L	[r10], r5
 1337 0a65 F9 52 13 00 00 00 00    		mov.L	#_TLS_hmac, 76[r5]
2072:../src/src/keys.c ****         #else
2073:../src/src/keys.c ****         ssl->hmac = Renesas_cmn_TLS_hmac;
2074:../src/src/keys.c ****         #endif
2075:../src/src/keys.c ****     #endif
2076:../src/src/keys.c ****         if (ssl->version.minor >= TLSv1_1_MINOR) {
 1338                             		.loc 1 2076 25
 1339 0a6c EC A5                   		mov.L	[r10], r5
 1340 0a6e CE 55 61 01             		mov.B	353[r5], r5
 1341                             		.loc 1 2076 12
 1342 0a72 5B 55                   		movu.B	r5, r5
 1343 0a74 61 15                   		cmp	#1, r5
 1344 0a76 25 22                   		bleu	.L44
2077:../src/src/keys.c ****             ssl->options.tls1_1 = 1;
 1345                             		.loc 1 2077 33
 1346 0a78 EC A4                   		mov.L	[r10], r4
 1347 0a7a ED 45 A7                		mov.L	668[r4], r5
 1348 0a7d 79 05                   		bset	#16, r5
 1349 0a7f E7 45 A7                		mov.L	r5, 668[r4]
2078:../src/src/keys.c ****             if (ssl->version.minor >= TLSv1_3_MINOR)
 1350                             		.loc 1 2078 29
 1351 0a82 EC A5                   		mov.L	[r10], r5
 1352 0a84 CE 55 61 01             		mov.B	353[r5], r5
 1353                             		.loc 1 2078 16
 1354 0a88 5B 55                   		movu.B	r5, r5
 1355 0a8a 61 35                   		cmp	#3, r5
 1356 0a8c 25 0C                   		bleu	.L44
2079:../src/src/keys.c ****                 ssl->options.tls1_3 = 1;
 1357                             		.loc 1 2079 37
 1358 0a8e EC A4                   		mov.L	[r10], r4
 1359 0a90 ED 45 A7                		mov.L	668[r4], r5
 1360 0a93 79 15                   		bset	#17, r5
 1361 0a95 E7 45 A7                		mov.L	r5, 668[r4]
 1362                             		.balign 8,3,1
 1363                             	.L44:
2080:../src/src/keys.c ****         }
2081:../src/src/keys.c **** #endif
2082:../src/src/keys.c ****     }
2083:../src/src/keys.c **** 
2084:../src/src/keys.c **** #ifdef WOLFSSL_DTLS13
2085:../src/src/keys.c ****     if (ssl->options.dtls &&
2086:../src/src/keys.c ****         ssl->version.major == DTLS_MAJOR &&
2087:../src/src/keys.c ****         ssl->version.minor <= DTLSv1_3_MINOR) {
2088:../src/src/keys.c ****             ssl->options.tls = 1;
2089:../src/src/keys.c ****             ssl->options.tls1_3 = 1;
2090:../src/src/keys.c ****     }
2091:../src/src/keys.c **** #endif /* WOLFSSL_DTLS13 */
2092:../src/src/keys.c **** 
2093:../src/src/keys.c **** #if defined(HAVE_ENCRYPT_THEN_MAC) && !defined(WOLFSSL_AEAD_ONLY)
2094:../src/src/keys.c ****     if (IsAtLeastTLSv1_3(ssl->version) || ssl->specs.cipher_type != block)
2095:../src/src/keys.c ****        ssl->options.encThenMac = 0;
2096:../src/src/keys.c **** #endif
2097:../src/src/keys.c **** 
2098:../src/src/keys.c **** #if defined(WOLFSSL_DTLS) && !defined(WOLFSSL_AEAD_ONLY)
2099:../src/src/keys.c ****     if (ssl->options.dtls)
2100:../src/src/keys.c ****         #if !defined(WOLFSSL_RENESAS_SCEPROTECT) && \
2101:../src/src/keys.c ****             !defined(WOLFSSL_RENESAS_TSIP_TLS)
2102:../src/src/keys.c ****         ssl->hmac = TLS_hmac;
2103:../src/src/keys.c ****         #else
2104:../src/src/keys.c ****         ssl->hmac = Renesas_cmn_TLS_hmac;
2105:../src/src/keys.c ****         #endif
2106:../src/src/keys.c **** #endif
2107:../src/src/keys.c **** 
2108:../src/src/keys.c ****     if (ssl->specs.sig_algo == anonymous_sa_algo) {
 1364                             		.loc 1 2108 19
 1365 0a98 EC A5                   		mov.L	[r10], r5
 1366 0a9a CE 55 70 01             		mov.B	368[r5], r5
 1367                             		.loc 1 2108 8
 1368 0a9e 5B 55                   		movu.B	r5, r5
 1369 0aa0 61 05                   		cmp	#0, r5
 1370 0aa2 21 0C                   		bne	.L45
2109:../src/src/keys.c ****         /* CLIENT/SERVER: No peer authentication to be performed. */
2110:../src/src/keys.c ****         ssl->options.peerAuthGood = 1;
 1371                             		.loc 1 2110 35
 1372 0aa4 EC A4                   		mov.L	[r10], r4
 1373 0aa6 ED 45 A8                		mov.L	672[r4], r5
 1374 0aa9 78 F5                   		bset	#15, r5
 1375 0aab E7 45 A8                		mov.L	r5, 672[r4]
 1376                             	.L45:
2111:../src/src/keys.c ****     }
2112:../src/src/keys.c **** 
2113:../src/src/keys.c ****     return 0;
 1377                             		.loc 1 2113 12
 1378 0aae 66 05                   		mov.L	#0, r5
 1379                             		.balign 8,3,1
 1380                             	.L3:
2114:../src/src/keys.c **** }
 1381                             		.loc 1 2114 1
 1382 0ab0 EF 51                   		mov.L	r5, r1
 1383 0ab2 3F AA 02                		rtsd	#8, r10-r10
 1384                             	.LFE1:
 1386 0ab5 FC 13 00                		.section C,"a",@progbits
 1387                             		.p2align 2
 1388                             	.LC4:
 1389 00b4 41 00                   		.string	"A"
 1390                             	.LC5:
 1391 00b6 42 42 00                		.string	"BB"
 1392                             	.LC6:
 1393 00b9 43 43 43 00             		.string	"CCC"
 1394                             	.LC7:
 1395 00bd 44 44 44 44 00          		.string	"DDDD"
 1396                             	.LC8:
 1397 00c2 45 45 45 45 45 00       		.string	"EEEEE"
 1398                             	.LC9:
 1399 00c8 46 46 46 46 46 46 00    		.string	"FFFFFF"
 1400                             	.LC10:
 1401 00cf 47 47 47 47 47 47 47 00 		.string	"GGGGGGG"
 1402                             	.LC11:
 1403 00d7 48 48 48 48 48 48 48 48 		.string	"HHHHHHHH"
 1403      00 
 1404                             	.LC12:
 1405 00e0 49 49 49 49 49 49 49 49 		.string	"IIIIIIIII"
 1405      49 00 
 1406                             	.LC13:
 1407 00ea 53 65 74 20 50 72 65 66 		.string	"Set Prefix error, bad input"
 1407      69 78 20 65 72 72 6F 72 
 1407      2C 20 62 61 64 20 69 6E 
 1407      70 75 74 00 
 1408                             		.section	.text.SetPrefix,"ax",@progbits
 1410                             	_SetPrefix:
 1411                             	.LFB2:
2115:../src/src/keys.c **** 
2116:../src/src/keys.c **** 
2117:../src/src/keys.c **** enum KeyStuff {
2118:../src/src/keys.c ****     MASTER_ROUNDS = 3,
2119:../src/src/keys.c ****     PREFIX        = 3,     /* up to three letters for master prefix */
2120:../src/src/keys.c ****     KEY_PREFIX    = 9      /* up to 9 prefix letters for key rounds */
2121:../src/src/keys.c **** 
2122:../src/src/keys.c **** 
2123:../src/src/keys.c **** };
2124:../src/src/keys.c **** 
2125:../src/src/keys.c **** #ifndef NO_OLD_TLS
2126:../src/src/keys.c **** /* true or false, zero for error */
2127:../src/src/keys.c **** static int SetPrefix(byte* sha_input, int idx)
2128:../src/src/keys.c **** {
 1412                             		.loc 1 2128 1
 1413 0000 7E AA                   		push.l	r10
 1414                             	.LCFI2:
 1415 0002 71 0A F8                		add	#-8, r0, r10
 1416                             	.LCFI3:
 1417 0005 EF A0                   		mov.L	r10, r0
 1418 0007 E3 A1                   		mov.L	r1, [r10]
 1419 0009 E7 A2 01                		mov.L	r2, 4[r10]
2129:../src/src/keys.c ****     switch (idx) {
 1420                             		.loc 1 2129 5
 1421 000c ED A5 01                		mov.L	4[r10], r5
 1422 000f 61 45                   		cmp	#4, r5
 1423 0011 3A 94 00                		beq	.L51
 1424 0014 ED A5 01                		mov.L	4[r10], r5
 1425 0017 61 45                   		cmp	#4, r5
 1426 0019 2A 2B                   		bgt	.L52
 1427 001b ED A5 01                		mov.L	4[r10], r5
 1428 001e 61 15                   		cmp	#1, r5
 1429 0020 20 55                   		beq	.L53
 1430 0022 ED A5 01                		mov.L	4[r10], r5
 1431 0025 61 15                   		cmp	#1, r5
 1432 0027 2A 0C                   		bgt	.L54
 1433 0029 ED A5 01                		mov.L	4[r10], r5
 1434 002c 61 05                   		cmp	#0, r5
 1435 002e 20 36                   		beq	.L55
 1436 0030 38 C5 00                		bra	.L56
 1437                             	.L54:
 1438 0033 ED A5 01                		mov.L	4[r10], r5
 1439 0036 61 25                   		cmp	#2, r5
 1440 0038 20 4D                   		beq	.L57
 1441 003a ED A5 01                		mov.L	4[r10], r5
 1442 003d 61 35                   		cmp	#3, r5
 1443 003f 20 56                   		beq	.L58
 1444 0041 38 B4 00                		bra	.L56
 1445                             	.L52:
 1446 0044 ED A5 01                		mov.L	4[r10], r5
 1447 0047 61 65                   		cmp	#6, r5
 1448 0049 20 7C                   		beq	.L59
 1449 004b ED A5 01                		mov.L	4[r10], r5
 1450 004e 61 65                   		cmp	#6, r5
 1451 0050 29 65                   		blt	.L60
 1452 0052 ED A5 01                		mov.L	4[r10], r5
 1453 0055 61 75                   		cmp	#7, r5
 1454 0057 20 7E                   		beq	.L61
 1455 0059 ED A5 01                		mov.L	4[r10], r5
 1456 005c 61 85                   		cmp	#8, r5
 1457 005e 3A 87 00                		beq	.L62
 1458 0061 38 94 00                		bra	.L56
 1459                             	.L55:
2130:../src/src/keys.c ****     case 0:
2131:../src/src/keys.c ****         XMEMCPY(sha_input, "A", 1);
 1460                             		.loc 1 2131 9
 1461 0064 66 13                   		mov.L	#1, r3
 1462 0066 FB 22 B4 00 00 00       		mov.L	#.LC4, r2
 1463 006c EC A1                   		mov.L	[r10], r1
 1464 006e 05 00 00 00             		bsr	_memcpy
2132:../src/src/keys.c ****         break;
 1465                             		.loc 1 2132 9
 1466 0072 38 90 00                		bra	.L63
 1467                             	.L53:
2133:../src/src/keys.c ****     case 1:
2134:../src/src/keys.c ****         XMEMCPY(sha_input, "BB", 2);
 1468                             		.loc 1 2134 9
 1469 0075 66 23                   		mov.L	#2, r3
 1470 0077 FB 22 B6 00 00 00       		mov.L	#.LC5, r2
 1471 007d EC A1                   		mov.L	[r10], r1
 1472 007f 05 00 00 00             		bsr	_memcpy
2135:../src/src/keys.c ****         break;
 1473                             		.loc 1 2135 9
 1474 0083 2E 7F                   		bra	.L63
 1475                             	.L57:
2136:../src/src/keys.c ****     case 2:
2137:../src/src/keys.c ****         XMEMCPY(sha_input, "CCC", 3);
 1476                             		.loc 1 2137 9
 1477 0085 66 33                   		mov.L	#3, r3
 1478 0087 FB 22 B9 00 00 00       		mov.L	#.LC6, r2
 1479 008d EC A1                   		mov.L	[r10], r1
 1480 008f 05 00 00 00             		bsr	_memcpy
2138:../src/src/keys.c ****         break;
 1481                             		.loc 1 2138 9
 1482 0093 2E 6F                   		bra	.L63
 1483                             	.L58:
2139:../src/src/keys.c ****     case 3:
2140:../src/src/keys.c ****         XMEMCPY(sha_input, "DDDD", 4);
 1484                             		.loc 1 2140 9
 1485 0095 66 43                   		mov.L	#4, r3
 1486 0097 FB 22 BD 00 00 00       		mov.L	#.LC7, r2
 1487 009d EC A1                   		mov.L	[r10], r1
 1488 009f 05 00 00 00             		bsr	_memcpy
2141:../src/src/keys.c ****         break;
 1489                             		.loc 1 2141 9
 1490 00a3 2E 5F                   		bra	.L63
 1491                             	.L51:
2142:../src/src/keys.c ****     case 4:
2143:../src/src/keys.c ****         XMEMCPY(sha_input, "EEEEE", 5);
 1492                             		.loc 1 2143 9
 1493 00a5 66 53                   		mov.L	#5, r3
 1494 00a7 FB 22 C2 00 00 00       		mov.L	#.LC8, r2
 1495 00ad EC A1                   		mov.L	[r10], r1
 1496 00af 05 00 00 00             		bsr	_memcpy
2144:../src/src/keys.c ****         break;
 1497                             		.loc 1 2144 9
 1498 00b3 2E 4F                   		bra	.L63
 1499                             	.L60:
2145:../src/src/keys.c ****     case 5:
2146:../src/src/keys.c ****         XMEMCPY(sha_input, "FFFFFF", 6);
 1500                             		.loc 1 2146 9
 1501 00b5 66 63                   		mov.L	#6, r3
 1502 00b7 FB 22 C8 00 00 00       		mov.L	#.LC9, r2
 1503 00bd EC A1                   		mov.L	[r10], r1
 1504 00bf 05 00 00 00             		bsr	_memcpy
2147:../src/src/keys.c ****         break;
 1505                             		.loc 1 2147 9
 1506 00c3 2E 3F                   		bra	.L63
 1507                             	.L59:
2148:../src/src/keys.c ****     case 6:
2149:../src/src/keys.c ****         XMEMCPY(sha_input, "GGGGGGG", 7);
 1508                             		.loc 1 2149 9
 1509 00c5 66 73                   		mov.L	#7, r3
 1510 00c7 FB 22 CF 00 00 00       		mov.L	#.LC10, r2
 1511 00cd EC A1                   		mov.L	[r10], r1
 1512 00cf 05 00 00 00             		bsr	_memcpy
2150:../src/src/keys.c ****         break;
 1513                             		.loc 1 2150 9
 1514 00d3 2E 2F                   		bra	.L63
 1515                             	.L61:
2151:../src/src/keys.c ****     case 7:
2152:../src/src/keys.c ****         XMEMCPY(sha_input, "HHHHHHHH", 8);
 1516                             		.loc 1 2152 9
 1517 00d5 66 83                   		mov.L	#8, r3
 1518 00d7 FB 22 D7 00 00 00       		mov.L	#.LC11, r2
 1519 00dd EC A1                   		mov.L	[r10], r1
 1520 00df 05 00 00 00             		bsr	_memcpy
2153:../src/src/keys.c ****         break;
 1521                             		.loc 1 2153 9
 1522 00e3 2E 1F                   		bra	.L63
 1523                             	.L62:
2154:../src/src/keys.c ****     case 8:
2155:../src/src/keys.c ****         XMEMCPY(sha_input, "IIIIIIIII", 9);
 1524                             		.loc 1 2155 9
 1525 00e5 66 93                   		mov.L	#9, r3
 1526 00e7 FB 22 E0 00 00 00       		mov.L	#.LC12, r2
 1527 00ed EC A1                   		mov.L	[r10], r1
 1528 00ef 05 00 00 00             		bsr	_memcpy
2156:../src/src/keys.c ****         break;
 1529                             		.loc 1 2156 9
 1530 00f3 2E 0F                   		bra	.L63
 1531                             	.L56:
2157:../src/src/keys.c ****     default:
2158:../src/src/keys.c ****         WOLFSSL_MSG("Set Prefix error, bad input");
 1532                             		.loc 1 2158 9
 1533 00f5 FB 12 EA 00 00 00       		mov.L	#.LC13, r1
 1534 00fb 05 00 00 00             		bsr	_WOLFSSL_MSG
2159:../src/src/keys.c ****         return 0;
 1535                             		.loc 1 2159 16
 1536 00ff 66 05                   		mov.L	#0, r5
 1537 0101 0B                      		bra	.L64
 1538                             	.L63:
2160:../src/src/keys.c ****     }
2161:../src/src/keys.c ****     return 1;
 1539                             		.loc 1 2161 12
 1540 0102 66 15                   		mov.L	#1, r5
 1541                             	.L64:
2162:../src/src/keys.c **** }
 1542                             		.loc 1 2162 1
 1543 0104 EF 51                   		mov.L	r5, r1
 1544 0106 3F AA 03                		rtsd	#12, r10-r10
 1545                             	.LFE2:
 1547                             		.section C,"a",@progbits
 1548 0106 00 00                   		.p2align 2
 1549                             	.LC14:
 1550 0108 44 65 73 33 49 6E 69 74 		.string	"Des3Init failed in SetKeys"
 1550      20 66 61 69 6C 65 64 20 
 1550      69 6E 20 53 65 74 4B 65 
 1550      79 73 00 
 1551                             	.LC15:
 1552 0123 41 65 73 49 6E 69 74 20 		.string	"AesInit failed in SetKeys"
 1552      66 61 69 6C 65 64 20 69 
 1552      6E 20 53 65 74 4B 65 79 
 1552      73 00 
 1553 013d 00 00 00                		.section	.text.SetKeys,"ax",@progbits
 1555                             	_SetKeys:
 1556                             	.LFB3:
2163:../src/src/keys.c **** #endif
2164:../src/src/keys.c **** 
2165:../src/src/keys.c **** 
2166:../src/src/keys.c **** static int SetKeys(Ciphers* enc, Ciphers* dec, Keys* keys, CipherSpecs* specs,
2167:../src/src/keys.c ****                    int side, void* heap, int devId, WC_RNG* rng, int tls13)
2168:../src/src/keys.c **** {
 1557                             		.loc 1 2168 1
 1558 0000 7E AA                   		push.l	r10
 1559                             	.LCFI4:
 1560 0002 7E A6                   		push.l	r6
 1561                             	.LCFI5:
 1562 0004 71 0A D0                		add	#-48, r0, r10
 1563                             	.LCFI6:
 1564 0007 71 A0 FC                		add	#-4, r10, r0
 1565                             	.LCFI7:
 1566 000a 75 46 3C                		mov.L	#60, r6
 1567 000d 4B A6                   		add	r10, r6
 1568 000f E7 A1 03                		mov.L	r1, 12[r10]
 1569 0012 E7 A2 04                		mov.L	r2, 16[r10]
 1570 0015 E7 A3 05                		mov.L	r3, 20[r10]
 1571 0018 E7 A4 06                		mov.L	r4, 24[r10]
2169:../src/src/keys.c ****     (void)rng;
2170:../src/src/keys.c ****     (void)tls13;
2171:../src/src/keys.c **** 
2172:../src/src/keys.c **** #ifdef BUILD_ARC4
2173:../src/src/keys.c ****     if (specs->bulk_cipher_algorithm == wolfssl_rc4) {
2174:../src/src/keys.c ****         word32 sz = specs->key_size;
2175:../src/src/keys.c ****         if (enc && enc->arc4 == NULL) {
2176:../src/src/keys.c ****             enc->arc4 = (Arc4*)XMALLOC(sizeof(Arc4), heap, DYNAMIC_TYPE_CIPHER);
2177:../src/src/keys.c ****             if (enc->arc4 == NULL)
2178:../src/src/keys.c ****                  return MEMORY_E;
2179:../src/src/keys.c ****         }
2180:../src/src/keys.c ****         if (dec && dec->arc4 == NULL) {
2181:../src/src/keys.c ****             dec->arc4 = (Arc4*)XMALLOC(sizeof(Arc4), heap, DYNAMIC_TYPE_CIPHER);
2182:../src/src/keys.c ****             if (dec->arc4 == NULL)
2183:../src/src/keys.c ****                 return MEMORY_E;
2184:../src/src/keys.c ****         }
2185:../src/src/keys.c **** 
2186:../src/src/keys.c ****         if (enc) {
2187:../src/src/keys.c ****             if (wc_Arc4Init(enc->arc4, heap, devId) != 0) {
2188:../src/src/keys.c ****                 WOLFSSL_MSG("Arc4Init failed in SetKeys");
2189:../src/src/keys.c ****                 return ASYNC_INIT_E;
2190:../src/src/keys.c ****             }
2191:../src/src/keys.c ****         }
2192:../src/src/keys.c ****         if (dec) {
2193:../src/src/keys.c ****             if (wc_Arc4Init(dec->arc4, heap, devId) != 0) {
2194:../src/src/keys.c ****                 WOLFSSL_MSG("Arc4Init failed in SetKeys");
2195:../src/src/keys.c ****                 return ASYNC_INIT_E;
2196:../src/src/keys.c ****             }
2197:../src/src/keys.c ****         }
2198:../src/src/keys.c **** 
2199:../src/src/keys.c ****         if (side == WOLFSSL_CLIENT_END) {
2200:../src/src/keys.c ****             if (enc)
2201:../src/src/keys.c ****                 wc_Arc4SetKey(enc->arc4, keys->client_write_key, sz);
2202:../src/src/keys.c ****             if (dec)
2203:../src/src/keys.c ****                 wc_Arc4SetKey(dec->arc4, keys->server_write_key, sz);
2204:../src/src/keys.c ****         }
2205:../src/src/keys.c ****         else {
2206:../src/src/keys.c ****             if (enc)
2207:../src/src/keys.c ****                 wc_Arc4SetKey(enc->arc4, keys->server_write_key, sz);
2208:../src/src/keys.c ****             if (dec)
2209:../src/src/keys.c ****                 wc_Arc4SetKey(dec->arc4, keys->client_write_key, sz);
2210:../src/src/keys.c ****         }
2211:../src/src/keys.c ****         if (enc)
2212:../src/src/keys.c ****             enc->setup = 1;
2213:../src/src/keys.c ****         if (dec)
2214:../src/src/keys.c ****             dec->setup = 1;
2215:../src/src/keys.c ****     }
2216:../src/src/keys.c **** #endif /* BUILD_ARC4 */
2217:../src/src/keys.c **** 
2218:../src/src/keys.c **** 
2219:../src/src/keys.c **** #if defined(HAVE_CHACHA) && defined(HAVE_POLY1305) && !defined(NO_CHAPOL_AEAD)
2220:../src/src/keys.c ****     /* Check that the max implicit iv size is sufficient */
2221:../src/src/keys.c ****     #if (AEAD_MAX_IMP_SZ < 12) /* CHACHA20_IMP_IV_SZ */
2222:../src/src/keys.c ****         #error AEAD_MAX_IMP_SZ is too small for ChaCha20
2223:../src/src/keys.c ****     #endif
2224:../src/src/keys.c ****     #if (MAX_WRITE_IV_SZ < 12) /* CHACHA20_IMP_IV_SZ */
2225:../src/src/keys.c ****         #error MAX_WRITE_IV_SZ is too small for ChaCha20
2226:../src/src/keys.c ****     #endif
2227:../src/src/keys.c **** 
2228:../src/src/keys.c ****     if (specs->bulk_cipher_algorithm == wolfssl_chacha) {
2229:../src/src/keys.c ****         int chachaRet;
2230:../src/src/keys.c ****         if (enc && enc->chacha == NULL)
2231:../src/src/keys.c ****             enc->chacha =
2232:../src/src/keys.c ****                     (ChaCha*)XMALLOC(sizeof(ChaCha), heap, DYNAMIC_TYPE_CIPHER);
2233:../src/src/keys.c ****         if (enc && enc->chacha == NULL)
2234:../src/src/keys.c ****             return MEMORY_E;
2235:../src/src/keys.c ****     #ifdef WOLFSSL_CHECK_MEM_ZERO
2236:../src/src/keys.c ****         if (enc) {
2237:../src/src/keys.c ****             wc_MemZero_Add("SSL keys enc chacha", enc->chacha, sizeof(ChaCha));
2238:../src/src/keys.c ****         }
2239:../src/src/keys.c ****     #endif
2240:../src/src/keys.c ****         if (dec && dec->chacha == NULL)
2241:../src/src/keys.c ****             dec->chacha =
2242:../src/src/keys.c ****                     (ChaCha*)XMALLOC(sizeof(ChaCha), heap, DYNAMIC_TYPE_CIPHER);
2243:../src/src/keys.c ****         if (dec && dec->chacha == NULL)
2244:../src/src/keys.c ****             return MEMORY_E;
2245:../src/src/keys.c ****     #ifdef WOLFSSL_CHECK_MEM_ZERO
2246:../src/src/keys.c ****         if (dec) {
2247:../src/src/keys.c ****             wc_MemZero_Add("SSL keys dec chacha", dec->chacha, sizeof(ChaCha));
2248:../src/src/keys.c ****         }
2249:../src/src/keys.c ****     #endif
2250:../src/src/keys.c ****         if (side == WOLFSSL_CLIENT_END) {
2251:../src/src/keys.c ****             if (enc) {
2252:../src/src/keys.c ****                 chachaRet = wc_Chacha_SetKey(enc->chacha, keys->client_write_key,
2253:../src/src/keys.c ****                                           specs->key_size);
2254:../src/src/keys.c ****                 XMEMCPY(keys->aead_enc_imp_IV, keys->client_write_IV,
2255:../src/src/keys.c ****                         CHACHA20_IMP_IV_SZ);
2256:../src/src/keys.c ****                 if (chachaRet != 0) return chachaRet;
2257:../src/src/keys.c ****             }
2258:../src/src/keys.c ****             if (dec) {
2259:../src/src/keys.c ****                 chachaRet = wc_Chacha_SetKey(dec->chacha, keys->server_write_key,
2260:../src/src/keys.c ****                                           specs->key_size);
2261:../src/src/keys.c ****                 XMEMCPY(keys->aead_dec_imp_IV, keys->server_write_IV,
2262:../src/src/keys.c ****                         CHACHA20_IMP_IV_SZ);
2263:../src/src/keys.c ****                 if (chachaRet != 0) return chachaRet;
2264:../src/src/keys.c ****             }
2265:../src/src/keys.c ****         }
2266:../src/src/keys.c ****         else {
2267:../src/src/keys.c ****             if (enc) {
2268:../src/src/keys.c ****                 chachaRet = wc_Chacha_SetKey(enc->chacha, keys->server_write_key,
2269:../src/src/keys.c ****                                           specs->key_size);
2270:../src/src/keys.c ****                 XMEMCPY(keys->aead_enc_imp_IV, keys->server_write_IV,
2271:../src/src/keys.c ****                         CHACHA20_IMP_IV_SZ);
2272:../src/src/keys.c ****                 if (chachaRet != 0) return chachaRet;
2273:../src/src/keys.c ****             }
2274:../src/src/keys.c ****             if (dec) {
2275:../src/src/keys.c ****                 chachaRet = wc_Chacha_SetKey(dec->chacha, keys->client_write_key,
2276:../src/src/keys.c ****                                           specs->key_size);
2277:../src/src/keys.c ****                 XMEMCPY(keys->aead_dec_imp_IV, keys->client_write_IV,
2278:../src/src/keys.c ****                         CHACHA20_IMP_IV_SZ);
2279:../src/src/keys.c ****                 if (chachaRet != 0) return chachaRet;
2280:../src/src/keys.c ****             }
2281:../src/src/keys.c ****         }
2282:../src/src/keys.c **** 
2283:../src/src/keys.c ****         if (enc)
2284:../src/src/keys.c ****             enc->setup = 1;
2285:../src/src/keys.c ****         if (dec)
2286:../src/src/keys.c ****             dec->setup = 1;
2287:../src/src/keys.c ****     }
2288:../src/src/keys.c **** #endif /* HAVE_CHACHA && HAVE_POLY1305 */
2289:../src/src/keys.c **** 
2290:../src/src/keys.c **** #ifdef BUILD_DES3
2291:../src/src/keys.c ****     /* check that buffer sizes are sufficient */
2292:../src/src/keys.c ****     #if (MAX_WRITE_IV_SZ < 8) /* DES_IV_SIZE */
2293:../src/src/keys.c ****         #error MAX_WRITE_IV_SZ too small for 3DES
2294:../src/src/keys.c ****     #endif
2295:../src/src/keys.c **** 
2296:../src/src/keys.c ****     if (specs->bulk_cipher_algorithm == wolfssl_triple_des) {
 1572                             		.loc 1 2296 14
 1573 001b ED A5 06                		mov.L	24[r10], r5
 1574 001e 8A 55                   		mov.B	8[r5], r5
 1575                             		.loc 1 2296 8
 1576 0020 5B 55                   		movu.B	r5, r5
 1577 0022 61 45                   		cmp	#4, r5
 1578 0024 3B B4 01                		bne	.L66
 1579                             	.LBB2:
2297:../src/src/keys.c ****         int desRet = 0;
 1580                             		.loc 1 2297 13
 1581 0027 F8 A6 00                		mov.L	#0, [r10]
2298:../src/src/keys.c **** 
2299:../src/src/keys.c ****         if (enc) {
 1582                             		.loc 1 2299 12
 1583 002a ED A5 03                		mov.L	12[r10], r5
 1584 002d 61 05                   		cmp	#0, r5
 1585 002f 20 39                   		beq	.L67
2300:../src/src/keys.c ****             if (enc->des3 == NULL)
 1586                             		.loc 1 2300 20
 1587 0031 ED A5 03                		mov.L	12[r10], r5
 1588 0034 EC 55                   		mov.L	[r5], r5
 1589                             		.loc 1 2300 16
 1590 0036 61 05                   		cmp	#0, r5
 1591 0038 21 11                   		bne	.L68
2301:../src/src/keys.c ****                 enc->des3 = (Des3*)XMALLOC(sizeof(Des3), heap, DYNAMIC_TYPE_CIPHER);
 1592                             		.loc 1 2301 36
 1593 003a FB 1A 94 01             		mov.L	#0x194, r1
 1594 003e 05 00 00 00             		bsr	_wolfSSL_Malloc
 1595 0042 EF 14                   		mov.L	r1, r4
 1596                             		.loc 1 2301 27
 1597 0044 ED A5 03                		mov.L	12[r10], r5
 1598 0047 E3 54                   		mov.L	r4, [r5]
 1599                             	.L68:
2302:../src/src/keys.c ****             if (enc->des3 == NULL)
 1600                             		.loc 1 2302 20
 1601 0049 ED A5 03                		mov.L	12[r10], r5
 1602 004c EC 55                   		mov.L	[r5], r5
 1603                             		.loc 1 2302 16
 1604 004e 61 05                   		cmp	#0, r5
 1605 0050 1F                      		bne	.L69
2303:../src/src/keys.c ****                 return MEMORY_E;
 1606                             		.loc 1 2303 24
 1607 0051 FB 56 83                		mov.L	#-125, r5
 1608 0054 38 50 06                		bra	.L70
 1609                             	.L69:
2304:../src/src/keys.c ****             XMEMSET(enc->des3, 0, sizeof(Des3));
 1610                             		.loc 1 2304 13
 1611 0057 ED A5 03                		mov.L	12[r10], r5
 1612 005a EC 55                   		mov.L	[r5], r5
 1613 005c FB 3A 94 01             		mov.L	#0x194, r3
 1614 0060 66 02                   		mov.L	#0, r2
 1615 0062 EF 51                   		mov.L	r5, r1
 1616 0064 05 00 00 00             		bsr	_memset
 1617                             	.L67:
2305:../src/src/keys.c ****         }
2306:../src/src/keys.c ****         if (dec) {
 1618                             		.loc 1 2306 12
 1619 0068 ED A5 04                		mov.L	16[r10], r5
 1620 006b 61 05                   		cmp	#0, r5
 1621 006d 20 39                   		beq	.L71
2307:../src/src/keys.c ****             if (dec->des3 == NULL)
 1622                             		.loc 1 2307 20
 1623 006f ED A5 04                		mov.L	16[r10], r5
 1624 0072 EC 55                   		mov.L	[r5], r5
 1625                             		.loc 1 2307 16
 1626 0074 61 05                   		cmp	#0, r5
 1627 0076 21 11                   		bne	.L72
2308:../src/src/keys.c ****                 dec->des3 = (Des3*)XMALLOC(sizeof(Des3), heap, DYNAMIC_TYPE_CIPHER);
 1628                             		.loc 1 2308 36
 1629 0078 FB 1A 94 01             		mov.L	#0x194, r1
 1630 007c 05 00 00 00             		bsr	_wolfSSL_Malloc
 1631 0080 EF 14                   		mov.L	r1, r4
 1632                             		.loc 1 2308 27
 1633 0082 ED A5 04                		mov.L	16[r10], r5
 1634 0085 E3 54                   		mov.L	r4, [r5]
 1635                             	.L72:
2309:../src/src/keys.c ****             if (dec->des3 == NULL)
 1636                             		.loc 1 2309 20
 1637 0087 ED A5 04                		mov.L	16[r10], r5
 1638 008a EC 55                   		mov.L	[r5], r5
 1639                             		.loc 1 2309 16
 1640 008c 61 05                   		cmp	#0, r5
 1641 008e 1F                      		bne	.L73
2310:../src/src/keys.c ****                 return MEMORY_E;
 1642                             		.loc 1 2310 24
 1643 008f FB 56 83                		mov.L	#-125, r5
 1644 0092 38 12 06                		bra	.L70
 1645                             	.L73:
2311:../src/src/keys.c ****             XMEMSET(dec->des3, 0, sizeof(Des3));
 1646                             		.loc 1 2311 13
 1647 0095 ED A5 04                		mov.L	16[r10], r5
 1648 0098 EC 55                   		mov.L	[r5], r5
 1649 009a FB 3A 94 01             		mov.L	#0x194, r3
 1650 009e 66 02                   		mov.L	#0, r2
 1651 00a0 EF 51                   		mov.L	r5, r1
 1652 00a2 05 00 00 00             		bsr	_memset
 1653                             	.L71:
2312:../src/src/keys.c ****         }
2313:../src/src/keys.c **** 
2314:../src/src/keys.c ****         if (enc) {
 1654                             		.loc 1 2314 12
 1655 00a6 ED A5 03                		mov.L	12[r10], r5
 1656 00a9 61 05                   		cmp	#0, r5
 1657 00ab 20 28                   		beq	.L74
2315:../src/src/keys.c ****             if (wc_Des3Init(enc->des3, heap, devId) != 0) {
 1658                             		.loc 1 2315 17
 1659 00ad ED A5 03                		mov.L	12[r10], r5
 1660 00b0 EC 55                   		mov.L	[r5], r5
 1661 00b2 A8 E3                   		mov.L	8[r6], r3
 1662 00b4 A8 6A                   		mov.L	4[r6], r2
 1663 00b6 EF 51                   		mov.L	r5, r1
 1664 00b8 05 00 00 00             		bsr	_wc_Des3Init
 1665 00bc EF 15                   		mov.L	r1, r5
 1666                             		.loc 1 2315 16
 1667 00be 61 05                   		cmp	#0, r5
 1668 00c0 20 13                   		beq	.L74
2316:../src/src/keys.c ****                 WOLFSSL_MSG("Des3Init failed in SetKeys");
 1669                             		.loc 1 2316 17
 1670 00c2 FB 12 08 01 00 00       		mov.L	#.LC14, r1
 1671 00c8 05 00 00 00             		bsr	_WOLFSSL_MSG
2317:../src/src/keys.c ****                 return ASYNC_INIT_E;
 1672                             		.loc 1 2317 24
 1673 00cc FB 5A 4A FF             		mov.L	#-182, r5
 1674 00d0 38 D4 05                		bra	.L70
 1675                             	.L74:
2318:../src/src/keys.c ****             }
2319:../src/src/keys.c ****         }
2320:../src/src/keys.c ****         if (dec) {
 1676                             		.loc 1 2320 12
 1677 00d3 ED A5 04                		mov.L	16[r10], r5
 1678 00d6 61 05                   		cmp	#0, r5
 1679 00d8 20 28                   		beq	.L75
2321:../src/src/keys.c ****             if (wc_Des3Init(dec->des3, heap, devId) != 0) {
 1680                             		.loc 1 2321 17
 1681 00da ED A5 04                		mov.L	16[r10], r5
 1682 00dd EC 55                   		mov.L	[r5], r5
 1683 00df A8 E3                   		mov.L	8[r6], r3
 1684 00e1 A8 6A                   		mov.L	4[r6], r2
 1685 00e3 EF 51                   		mov.L	r5, r1
 1686 00e5 05 00 00 00             		bsr	_wc_Des3Init
 1687 00e9 EF 15                   		mov.L	r1, r5
 1688                             		.loc 1 2321 16
 1689 00eb 61 05                   		cmp	#0, r5
 1690 00ed 20 13                   		beq	.L75
2322:../src/src/keys.c ****                 WOLFSSL_MSG("Des3Init failed in SetKeys");
 1691                             		.loc 1 2322 17
 1692 00ef FB 12 08 01 00 00       		mov.L	#.LC14, r1
 1693 00f5 05 00 00 00             		bsr	_WOLFSSL_MSG
2323:../src/src/keys.c ****                 return ASYNC_INIT_E;
 1694                             		.loc 1 2323 24
 1695 00f9 FB 5A 4A FF             		mov.L	#-182, r5
 1696 00fd 38 A7 05                		bra	.L70
 1697                             	.L75:
2324:../src/src/keys.c ****             }
2325:../src/src/keys.c ****         }
2326:../src/src/keys.c **** 
2327:../src/src/keys.c ****         if (side == WOLFSSL_CLIENT_END) {
 1698                             		.loc 1 2327 12
 1699 0100 EC 65                   		mov.L	[r6], r5
 1700 0102 61 15                   		cmp	#1, r5
 1701 0104 21 60                   		bne	.L76
2328:../src/src/keys.c ****             if (enc) {
 1702                             		.loc 1 2328 16
 1703 0106 ED A5 03                		mov.L	12[r10], r5
 1704 0109 61 05                   		cmp	#0, r5
 1705 010b 20 29                   		beq	.L77
2329:../src/src/keys.c ****                 desRet = wc_Des3_SetKey(enc->des3, keys->client_write_key,
 1706                             		.loc 1 2329 26
 1707 010d ED A5 03                		mov.L	12[r10], r5
 1708 0110 EC 51                   		mov.L	[r5], r1
 1709                             		.loc 1 2329 56
 1710 0112 ED A5 05                		mov.L	20[r10], r5
 1711 0115 72 52 80 00             		add	#0x80, r5, r2
2330:../src/src/keys.c ****                                      keys->client_write_IV, DES_ENCRYPTION);
 1712                             		.loc 1 2330 42
 1713 0119 ED A5 05                		mov.L	20[r10], r5
 1714 011c 72 55 C0 00             		add	#0xc0, r5
2329:../src/src/keys.c ****                 desRet = wc_Des3_SetKey(enc->des3, keys->client_write_key,
 1715                             		.loc 1 2329 26
 1716 0120 66 04                   		mov.L	#0, r4
 1717 0122 EF 53                   		mov.L	r5, r3
 1718 0124 05 00 00 00             		bsr	_wc_Des3_SetKey
 1719 0128 E3 A1                   		mov.L	r1, [r10]
2331:../src/src/keys.c ****                 if (desRet != 0) return desRet;
 1720                             		.loc 1 2331 20
 1721 012a EC A5                   		mov.L	[r10], r5
 1722 012c 61 05                   		cmp	#0, r5
 1723 012e 16                      		beq	.L77
 1724                             		.loc 1 2331 41 discriminator 1
 1725 012f EC A5                   		mov.L	[r10], r5
 1726 0131 38 73 05                		bra	.L70
 1727                             	.L77:
2332:../src/src/keys.c ****             }
2333:../src/src/keys.c ****             if (dec) {
 1728                             		.loc 1 2333 16
 1729 0134 ED A5 04                		mov.L	16[r10], r5
 1730 0137 61 05                   		cmp	#0, r5
 1731 0139 3A 87 00                		beq	.L78
2334:../src/src/keys.c ****                 desRet = wc_Des3_SetKey(dec->des3, keys->server_write_key,
 1732                             		.loc 1 2334 26
 1733 013c ED A5 04                		mov.L	16[r10], r5
 1734 013f EC 51                   		mov.L	[r5], r1
 1735                             		.loc 1 2334 56
 1736 0141 ED A5 05                		mov.L	20[r10], r5
 1737 0144 72 52 A0 00             		add	#0xa0, r5, r2
2335:../src/src/keys.c ****                                      keys->server_write_IV, DES_DECRYPTION);
 1738                             		.loc 1 2335 42
 1739 0148 ED A5 05                		mov.L	20[r10], r5
 1740 014b 72 55 D0 00             		add	#0xd0, r5
2334:../src/src/keys.c ****                 desRet = wc_Des3_SetKey(dec->des3, keys->server_write_key,
 1741                             		.loc 1 2334 26
 1742 014f 66 14                   		mov.L	#1, r4
 1743 0151 EF 53                   		mov.L	r5, r3
 1744 0153 05 00 00 00             		bsr	_wc_Des3_SetKey
 1745 0157 E3 A1                   		mov.L	r1, [r10]
2336:../src/src/keys.c ****                 if (desRet != 0) return desRet;
 1746                             		.loc 1 2336 20
 1747 0159 EC A5                   		mov.L	[r10], r5
 1748 015b 61 05                   		cmp	#0, r5
 1749 015d 20 63                   		beq	.L78
 1750                             		.loc 1 2336 41 discriminator 1
 1751 015f EC A5                   		mov.L	[r10], r5
 1752 0161 38 43 05                		bra	.L70
 1753                             	.L76:
2337:../src/src/keys.c ****             }
2338:../src/src/keys.c ****         }
2339:../src/src/keys.c ****         else {
2340:../src/src/keys.c ****             if (enc) {
 1754                             		.loc 1 2340 16
 1755 0164 ED A5 03                		mov.L	12[r10], r5
 1756 0167 61 05                   		cmp	#0, r5
 1757 0169 20 29                   		beq	.L79
2341:../src/src/keys.c ****                 desRet = wc_Des3_SetKey(enc->des3, keys->server_write_key,
 1758                             		.loc 1 2341 26
 1759 016b ED A5 03                		mov.L	12[r10], r5
 1760 016e EC 51                   		mov.L	[r5], r1
 1761                             		.loc 1 2341 56
 1762 0170 ED A5 05                		mov.L	20[r10], r5
 1763 0173 72 52 A0 00             		add	#0xa0, r5, r2
2342:../src/src/keys.c ****                                      keys->server_write_IV, DES_ENCRYPTION);
 1764                             		.loc 1 2342 42
 1765 0177 ED A5 05                		mov.L	20[r10], r5
 1766 017a 72 55 D0 00             		add	#0xd0, r5
2341:../src/src/keys.c ****                 desRet = wc_Des3_SetKey(enc->des3, keys->server_write_key,
 1767                             		.loc 1 2341 26
 1768 017e 66 04                   		mov.L	#0, r4
 1769 0180 EF 53                   		mov.L	r5, r3
 1770 0182 05 00 00 00             		bsr	_wc_Des3_SetKey
 1771 0186 E3 A1                   		mov.L	r1, [r10]
2343:../src/src/keys.c ****                 if (desRet != 0) return desRet;
 1772                             		.loc 1 2343 20
 1773 0188 EC A5                   		mov.L	[r10], r5
 1774 018a 61 05                   		cmp	#0, r5
 1775 018c 16                      		beq	.L79
 1776                             		.loc 1 2343 41 discriminator 1
 1777 018d EC A5                   		mov.L	[r10], r5
 1778 018f 38 15 05                		bra	.L70
 1779                             	.L79:
2344:../src/src/keys.c ****             }
2345:../src/src/keys.c ****             if (dec) {
 1780                             		.loc 1 2345 16
 1781 0192 ED A5 04                		mov.L	16[r10], r5
 1782 0195 61 05                   		cmp	#0, r5
 1783 0197 20 29                   		beq	.L78
2346:../src/src/keys.c ****                 desRet = wc_Des3_SetKey(dec->des3, keys->client_write_key,
 1784                             		.loc 1 2346 26
 1785 0199 ED A5 04                		mov.L	16[r10], r5
 1786 019c EC 51                   		mov.L	[r5], r1
 1787                             		.loc 1 2346 56
 1788 019e ED A5 05                		mov.L	20[r10], r5
 1789 01a1 72 52 80 00             		add	#0x80, r5, r2
2347:../src/src/keys.c ****                                      keys->client_write_IV, DES_DECRYPTION);
 1790                             		.loc 1 2347 42
 1791 01a5 ED A5 05                		mov.L	20[r10], r5
 1792 01a8 72 55 C0 00             		add	#0xc0, r5
2346:../src/src/keys.c ****                 desRet = wc_Des3_SetKey(dec->des3, keys->client_write_key,
 1793                             		.loc 1 2346 26
 1794 01ac 66 14                   		mov.L	#1, r4
 1795 01ae EF 53                   		mov.L	r5, r3
 1796 01b0 05 00 00 00             		bsr	_wc_Des3_SetKey
 1797 01b4 E3 A1                   		mov.L	r1, [r10]
2348:../src/src/keys.c ****                 if (desRet != 0) return desRet;
 1798                             		.loc 1 2348 20
 1799 01b6 EC A5                   		mov.L	[r10], r5
 1800 01b8 61 05                   		cmp	#0, r5
 1801 01ba 16                      		beq	.L78
 1802                             		.loc 1 2348 41 discriminator 1
 1803 01bb EC A5                   		mov.L	[r10], r5
 1804 01bd 38 E7 04                		bra	.L70
 1805                             	.L78:
2349:../src/src/keys.c ****             }
2350:../src/src/keys.c ****         }
2351:../src/src/keys.c ****         if (enc)
 1806                             		.loc 1 2351 12
 1807 01c0 ED A5 03                		mov.L	12[r10], r5
 1808 01c3 61 05                   		cmp	#0, r5
 1809 01c5 17                      		beq	.L80
2352:../src/src/keys.c ****             enc->setup = 1;
 1810                             		.loc 1 2352 24
 1811 01c6 ED A5 03                		mov.L	12[r10], r5
 1812 01c9 3C D1 01                		mov.B	#1, 17[r5]
 1813                             	.L80:
2353:../src/src/keys.c ****         if (dec)
 1814                             		.loc 1 2353 12
 1815 01cc ED A5 04                		mov.L	16[r10], r5
 1816 01cf 61 05                   		cmp	#0, r5
 1817 01d1 17                      		beq	.L66
2354:../src/src/keys.c ****             dec->setup = 1;
 1818                             		.loc 1 2354 24
 1819 01d2 ED A5 04                		mov.L	16[r10], r5
 1820 01d5 3C D1 01                		mov.B	#1, 17[r5]
 1821                             	.L66:
 1822                             	.LBE2:
2355:../src/src/keys.c ****     }
2356:../src/src/keys.c **** #endif /* BUILD_DES3 */
2357:../src/src/keys.c **** 
2358:../src/src/keys.c **** #ifdef BUILD_AES
2359:../src/src/keys.c ****     /* check that buffer sizes are sufficient */
2360:../src/src/keys.c ****     #if (MAX_WRITE_IV_SZ < 16) /* AES_IV_SIZE */
2361:../src/src/keys.c ****         #error MAX_WRITE_IV_SZ too small for AES
2362:../src/src/keys.c ****     #endif
2363:../src/src/keys.c **** 
2364:../src/src/keys.c ****     if (specs->bulk_cipher_algorithm == wolfssl_aes) {
 1823                             		.loc 1 2364 14
 1824 01d8 ED A5 06                		mov.L	24[r10], r5
 1825 01db 8A 55                   		mov.B	8[r5], r5
 1826                             		.loc 1 2364 8
 1827 01dd 5B 55                   		movu.B	r5, r5
 1828 01df 61 65                   		cmp	#6, r5
 1829 01e1 3B F9 01                		bne	.L81
 1830                             	.LBB3:
2365:../src/src/keys.c ****         int aesRet = 0;
 1831                             		.loc 1 2365 13
 1832 01e4 F9 A6 01 00             		mov.L	#0, 4[r10]
2366:../src/src/keys.c **** 
2367:../src/src/keys.c ****         if (enc) {
 1833                             		.loc 1 2367 12
 1834 01e8 ED A5 03                		mov.L	12[r10], r5
 1835 01eb 61 05                   		cmp	#0, r5
 1836 01ed 20 45                   		beq	.L82
2368:../src/src/keys.c ****             if (enc->aes == NULL) {
 1837                             		.loc 1 2368 20
 1838 01ef ED A5 03                		mov.L	12[r10], r5
 1839 01f2 A8 5D                   		mov.L	4[r5], r5
 1840                             		.loc 1 2368 16
 1841 01f4 61 05                   		cmp	#0, r5
 1842 01f6 21 20                   		bne	.L83
2369:../src/src/keys.c ****                 enc->aes = (Aes*)XMALLOC(sizeof(Aes), heap, DYNAMIC_TYPE_CIPHER);
 1843                             		.loc 1 2369 34
 1844 01f8 FB 1A 38 01             		mov.L	#0x138, r1
 1845 01fc 05 00 00 00             		bsr	_wolfSSL_Malloc
 1846 0200 EF 14                   		mov.L	r1, r4
 1847                             		.loc 1 2369 26
 1848 0202 ED A5 03                		mov.L	12[r10], r5
 1849 0205 A0 5C                   		mov.L	r4, 4[r5]
2370:../src/src/keys.c ****                 if (enc->aes == NULL)
 1850                             		.loc 1 2370 24
 1851 0207 ED A5 03                		mov.L	12[r10], r5
 1852 020a A8 5D                   		mov.L	4[r5], r5
 1853                             		.loc 1 2370 20
 1854 020c 61 05                   		cmp	#0, r5
 1855 020e 21 13                   		bne	.L84
2371:../src/src/keys.c ****                     return MEMORY_E;
 1856                             		.loc 1 2371 28
 1857 0210 FB 56 83                		mov.L	#-125, r5
 1858 0213 38 91 04                		bra	.L70
 1859                             	.L83:
2372:../src/src/keys.c ****             } else {
2373:../src/src/keys.c ****                 wc_AesFree(enc->aes);
 1860                             		.loc 1 2373 17
 1861 0216 ED A5 03                		mov.L	12[r10], r5
 1862 0219 A8 5D                   		mov.L	4[r5], r5
 1863 021b EF 51                   		mov.L	r5, r1
 1864 021d 05 00 00 00             		bsr	_wc_AesFree
 1865                             	.L84:
2374:../src/src/keys.c ****             }
2375:../src/src/keys.c **** 
2376:../src/src/keys.c ****             XMEMSET(enc->aes, 0, sizeof(Aes));
 1866                             		.loc 1 2376 13
 1867 0221 ED A5 03                		mov.L	12[r10], r5
 1868 0224 A8 5D                   		mov.L	4[r5], r5
 1869 0226 FB 3A 38 01             		mov.L	#0x138, r3
 1870 022a 66 02                   		mov.L	#0, r2
 1871 022c EF 51                   		mov.L	r5, r1
 1872 022e 05 00 00 00             		bsr	_memset
 1873                             	.L82:
2377:../src/src/keys.c ****         }
2378:../src/src/keys.c ****         if (dec) {
 1874                             		.loc 1 2378 12
 1875 0232 ED A5 04                		mov.L	16[r10], r5
 1876 0235 61 05                   		cmp	#0, r5
 1877 0237 20 45                   		beq	.L85
2379:../src/src/keys.c ****             if (dec->aes == NULL) {
 1878                             		.loc 1 2379 20
 1879 0239 ED A5 04                		mov.L	16[r10], r5
 1880 023c A8 5D                   		mov.L	4[r5], r5
 1881                             		.loc 1 2379 16
 1882 023e 61 05                   		cmp	#0, r5
 1883 0240 21 20                   		bne	.L86
2380:../src/src/keys.c ****                 dec->aes = (Aes*)XMALLOC(sizeof(Aes), heap, DYNAMIC_TYPE_CIPHER);
 1884                             		.loc 1 2380 34
 1885 0242 FB 1A 38 01             		mov.L	#0x138, r1
 1886 0246 05 00 00 00             		bsr	_wolfSSL_Malloc
 1887 024a EF 14                   		mov.L	r1, r4
 1888                             		.loc 1 2380 26
 1889 024c ED A5 04                		mov.L	16[r10], r5
 1890 024f A0 5C                   		mov.L	r4, 4[r5]
2381:../src/src/keys.c ****                 if (dec->aes == NULL)
 1891                             		.loc 1 2381 24
 1892 0251 ED A5 04                		mov.L	16[r10], r5
 1893 0254 A8 5D                   		mov.L	4[r5], r5
 1894                             		.loc 1 2381 20
 1895 0256 61 05                   		cmp	#0, r5
 1896 0258 21 13                   		bne	.L87
2382:../src/src/keys.c ****                     return MEMORY_E;
 1897                             		.loc 1 2382 28
 1898 025a FB 56 83                		mov.L	#-125, r5
 1899 025d 38 47 04                		bra	.L70
 1900                             	.L86:
2383:../src/src/keys.c ****             } else {
2384:../src/src/keys.c ****                 wc_AesFree(dec->aes);
 1901                             		.loc 1 2384 17
 1902 0260 ED A5 04                		mov.L	16[r10], r5
 1903 0263 A8 5D                   		mov.L	4[r5], r5
 1904 0265 EF 51                   		mov.L	r5, r1
 1905 0267 05 00 00 00             		bsr	_wc_AesFree
 1906                             	.L87:
2385:../src/src/keys.c ****             }
2386:../src/src/keys.c **** 
2387:../src/src/keys.c ****             XMEMSET(dec->aes, 0, sizeof(Aes));
 1907                             		.loc 1 2387 13
 1908 026b ED A5 04                		mov.L	16[r10], r5
 1909 026e A8 5D                   		mov.L	4[r5], r5
 1910 0270 FB 3A 38 01             		mov.L	#0x138, r3
 1911 0274 66 02                   		mov.L	#0, r2
 1912 0276 EF 51                   		mov.L	r5, r1
 1913 0278 05 00 00 00             		bsr	_memset
 1914                             	.L85:
2388:../src/src/keys.c ****         }
2389:../src/src/keys.c ****         if (enc) {
 1915                             		.loc 1 2389 12
 1916 027c ED A5 03                		mov.L	12[r10], r5
 1917 027f 61 05                   		cmp	#0, r5
 1918 0281 20 28                   		beq	.L88
2390:../src/src/keys.c ****             if (wc_AesInit(enc->aes, heap, devId) != 0) {
 1919                             		.loc 1 2390 17
 1920 0283 ED A5 03                		mov.L	12[r10], r5
 1921 0286 A8 5D                   		mov.L	4[r5], r5
 1922 0288 A8 E3                   		mov.L	8[r6], r3
 1923 028a A8 6A                   		mov.L	4[r6], r2
 1924 028c EF 51                   		mov.L	r5, r1
 1925 028e 05 00 00 00             		bsr	_wc_AesInit
 1926 0292 EF 15                   		mov.L	r1, r5
 1927                             		.loc 1 2390 16
 1928 0294 61 05                   		cmp	#0, r5
 1929 0296 20 13                   		beq	.L88
2391:../src/src/keys.c ****                 WOLFSSL_MSG("AesInit failed in SetKeys");
 1930                             		.loc 1 2391 17
 1931 0298 FB 12 23 01 00 00       		mov.L	#.LC15, r1
 1932 029e 05 00 00 00             		bsr	_WOLFSSL_MSG
2392:../src/src/keys.c ****                 return ASYNC_INIT_E;
 1933                             		.loc 1 2392 24
 1934 02a2 FB 5A 4A FF             		mov.L	#-182, r5
 1935 02a6 38 FE 03                		bra	.L70
 1936                             	.L88:
2393:../src/src/keys.c ****             }
2394:../src/src/keys.c ****         }
2395:../src/src/keys.c ****         if (dec) {
 1937                             		.loc 1 2395 12
 1938 02a9 ED A5 04                		mov.L	16[r10], r5
 1939 02ac 61 05                   		cmp	#0, r5
 1940 02ae 20 28                   		beq	.L89
2396:../src/src/keys.c ****             if (wc_AesInit(dec->aes, heap, devId) != 0) {
 1941                             		.loc 1 2396 17
 1942 02b0 ED A5 04                		mov.L	16[r10], r5
 1943 02b3 A8 5D                   		mov.L	4[r5], r5
 1944 02b5 A8 E3                   		mov.L	8[r6], r3
 1945 02b7 A8 6A                   		mov.L	4[r6], r2
 1946 02b9 EF 51                   		mov.L	r5, r1
 1947 02bb 05 00 00 00             		bsr	_wc_AesInit
 1948 02bf EF 15                   		mov.L	r1, r5
 1949                             		.loc 1 2396 16
 1950 02c1 61 05                   		cmp	#0, r5
 1951 02c3 20 13                   		beq	.L89
2397:../src/src/keys.c ****                 WOLFSSL_MSG("AesInit failed in SetKeys");
 1952                             		.loc 1 2397 17
 1953 02c5 FB 12 23 01 00 00       		mov.L	#.LC15, r1
 1954 02cb 05 00 00 00             		bsr	_WOLFSSL_MSG
2398:../src/src/keys.c ****                 return ASYNC_INIT_E;
 1955                             		.loc 1 2398 24
 1956 02cf FB 5A 4A FF             		mov.L	#-182, r5
 1957 02d3 38 D1 03                		bra	.L70
 1958                             	.L89:
2399:../src/src/keys.c ****             }
2400:../src/src/keys.c ****         }
2401:../src/src/keys.c **** 
2402:../src/src/keys.c ****         if (side == WOLFSSL_CLIENT_END) {
 1959                             		.loc 1 2402 12
 1960 02d6 EC 65                   		mov.L	[r6], r5
 1961 02d8 61 15                   		cmp	#1, r5
 1962 02da 21 76                   		bne	.L90
2403:../src/src/keys.c ****             if (enc) {
 1963                             		.loc 1 2403 16
 1964 02dc ED A5 03                		mov.L	12[r10], r5
 1965 02df 61 05                   		cmp	#0, r5
 1966 02e1 20 34                   		beq	.L91
2404:../src/src/keys.c ****                 aesRet = wc_AesSetKey(enc->aes, keys->client_write_key,
 1967                             		.loc 1 2404 26
 1968 02e3 ED A5 03                		mov.L	12[r10], r5
 1969 02e6 A8 59                   		mov.L	4[r5], r1
 1970                             		.loc 1 2404 53
 1971 02e8 ED A5 05                		mov.L	20[r10], r5
 1972 02eb 72 52 80 00             		add	#0x80, r5, r2
2405:../src/src/keys.c ****                                    specs->key_size, keys->client_write_IV,
 1973                             		.loc 1 2405 41
 1974 02ef ED A5 06                		mov.L	24[r10], r5
 1975 02f2 DC 55                   		mov.W	[r5], r5
2404:../src/src/keys.c ****                 aesRet = wc_AesSetKey(enc->aes, keys->client_write_key,
 1976                             		.loc 1 2404 26
 1977 02f4 5F 53                   		movu.W	r5, r3
 1978                             		.loc 1 2405 57
 1979 02f6 ED A5 05                		mov.L	20[r10], r5
 1980 02f9 72 55 C0 00             		add	#0xc0, r5
2404:../src/src/keys.c ****                 aesRet = wc_AesSetKey(enc->aes, keys->client_write_key,
 1981                             		.loc 1 2404 26
 1982 02fd F8 06 00                		mov.L	#0, [r0]
 1983 0300 EF 54                   		mov.L	r5, r4
 1984 0302 05 00 00 00             		bsr	_wc_AesSetKey
 1985 0306 E7 A1 01                		mov.L	r1, 4[r10]
2406:../src/src/keys.c ****                                    AES_ENCRYPTION);
2407:../src/src/keys.c ****                 if (aesRet != 0) return aesRet;
 1986                             		.loc 1 2407 20
 1987 0309 ED A5 01                		mov.L	4[r10], r5
 1988 030c 61 05                   		cmp	#0, r5
 1989 030e 17                      		beq	.L91
 1990                             		.loc 1 2407 41 discriminator 1
 1991 030f ED A5 01                		mov.L	4[r10], r5
 1992 0312 38 92 03                		bra	.L70
 1993                             	.L91:
2408:../src/src/keys.c ****             }
2409:../src/src/keys.c ****             if (dec) {
 1994                             		.loc 1 2409 16
 1995 0315 ED A5 04                		mov.L	16[r10], r5
 1996 0318 61 05                   		cmp	#0, r5
 1997 031a 3A A8 00                		beq	.L92
2410:../src/src/keys.c ****                 aesRet = wc_AesSetKey(dec->aes, keys->server_write_key,
 1998                             		.loc 1 2410 26
 1999 031d ED A5 04                		mov.L	16[r10], r5
 2000 0320 A8 59                   		mov.L	4[r5], r1
 2001                             		.loc 1 2410 53
 2002 0322 ED A5 05                		mov.L	20[r10], r5
 2003 0325 72 52 A0 00             		add	#0xa0, r5, r2
2411:../src/src/keys.c ****                                    specs->key_size, keys->server_write_IV,
 2004                             		.loc 1 2411 41
 2005 0329 ED A5 06                		mov.L	24[r10], r5
 2006 032c DC 55                   		mov.W	[r5], r5
2410:../src/src/keys.c ****                 aesRet = wc_AesSetKey(dec->aes, keys->server_write_key,
 2007                             		.loc 1 2410 26
 2008 032e 5F 53                   		movu.W	r5, r3
 2009                             		.loc 1 2411 57
 2010 0330 ED A5 05                		mov.L	20[r10], r5
 2011 0333 72 55 D0 00             		add	#0xd0, r5
2410:../src/src/keys.c ****                 aesRet = wc_AesSetKey(dec->aes, keys->server_write_key,
 2012                             		.loc 1 2410 26
 2013 0337 F8 06 01                		mov.L	#1, [r0]
 2014 033a EF 54                   		mov.L	r5, r4
 2015 033c 05 00 00 00             		bsr	_wc_AesSetKey
 2016 0340 E7 A1 01                		mov.L	r1, 4[r10]
2412:../src/src/keys.c ****                                    AES_DECRYPTION);
2413:../src/src/keys.c ****                 if (aesRet != 0) return aesRet;
 2017                             		.loc 1 2413 20
 2018 0343 ED A5 01                		mov.L	4[r10], r5
 2019 0346 61 05                   		cmp	#0, r5
 2020 0348 20 7A                   		beq	.L92
 2021                             		.loc 1 2413 41 discriminator 1
 2022 034a ED A5 01                		mov.L	4[r10], r5
 2023 034d 38 57 03                		bra	.L70
 2024                             	.L90:
2414:../src/src/keys.c ****             }
2415:../src/src/keys.c ****         }
2416:../src/src/keys.c ****         else {
2417:../src/src/keys.c ****             if (enc) {
 2025                             		.loc 1 2417 16
 2026 0350 ED A5 03                		mov.L	12[r10], r5
 2027 0353 61 05                   		cmp	#0, r5
 2028 0355 20 34                   		beq	.L93
2418:../src/src/keys.c ****                 aesRet = wc_AesSetKey(enc->aes, keys->server_write_key,
 2029                             		.loc 1 2418 26
 2030 0357 ED A5 03                		mov.L	12[r10], r5
 2031 035a A8 59                   		mov.L	4[r5], r1
 2032                             		.loc 1 2418 53
 2033 035c ED A5 05                		mov.L	20[r10], r5
 2034 035f 72 52 A0 00             		add	#0xa0, r5, r2
2419:../src/src/keys.c ****                                    specs->key_size, keys->server_write_IV,
 2035                             		.loc 1 2419 41
 2036 0363 ED A5 06                		mov.L	24[r10], r5
 2037 0366 DC 55                   		mov.W	[r5], r5
2418:../src/src/keys.c ****                 aesRet = wc_AesSetKey(enc->aes, keys->server_write_key,
 2038                             		.loc 1 2418 26
 2039 0368 5F 53                   		movu.W	r5, r3
 2040                             		.loc 1 2419 57
 2041 036a ED A5 05                		mov.L	20[r10], r5
 2042 036d 72 55 D0 00             		add	#0xd0, r5
2418:../src/src/keys.c ****                 aesRet = wc_AesSetKey(enc->aes, keys->server_write_key,
 2043                             		.loc 1 2418 26
 2044 0371 F8 06 00                		mov.L	#0, [r0]
 2045 0374 EF 54                   		mov.L	r5, r4
 2046 0376 05 00 00 00             		bsr	_wc_AesSetKey
 2047 037a E7 A1 01                		mov.L	r1, 4[r10]
2420:../src/src/keys.c ****                                    AES_ENCRYPTION);
2421:../src/src/keys.c ****                 if (aesRet != 0) return aesRet;
 2048                             		.loc 1 2421 20
 2049 037d ED A5 01                		mov.L	4[r10], r5
 2050 0380 61 05                   		cmp	#0, r5
 2051 0382 17                      		beq	.L93
 2052                             		.loc 1 2421 41 discriminator 1
 2053 0383 ED A5 01                		mov.L	4[r10], r5
 2054 0386 38 1E 03                		bra	.L70
 2055                             	.L93:
2422:../src/src/keys.c ****             }
2423:../src/src/keys.c ****             if (dec) {
 2056                             		.loc 1 2423 16
 2057 0389 ED A5 04                		mov.L	16[r10], r5
 2058 038c 61 05                   		cmp	#0, r5
 2059 038e 20 34                   		beq	.L92
2424:../src/src/keys.c ****                 aesRet = wc_AesSetKey(dec->aes, keys->client_write_key,
 2060                             		.loc 1 2424 26
 2061 0390 ED A5 04                		mov.L	16[r10], r5
 2062 0393 A8 59                   		mov.L	4[r5], r1
 2063                             		.loc 1 2424 53
 2064 0395 ED A5 05                		mov.L	20[r10], r5
 2065 0398 72 52 80 00             		add	#0x80, r5, r2
2425:../src/src/keys.c ****                                    specs->key_size, keys->client_write_IV,
 2066                             		.loc 1 2425 41
 2067 039c ED A5 06                		mov.L	24[r10], r5
 2068 039f DC 55                   		mov.W	[r5], r5
2424:../src/src/keys.c ****                 aesRet = wc_AesSetKey(dec->aes, keys->client_write_key,
 2069                             		.loc 1 2424 26
 2070 03a1 5F 53                   		movu.W	r5, r3
 2071                             		.loc 1 2425 57
 2072 03a3 ED A5 05                		mov.L	20[r10], r5
 2073 03a6 72 55 C0 00             		add	#0xc0, r5
2424:../src/src/keys.c ****                 aesRet = wc_AesSetKey(dec->aes, keys->client_write_key,
 2074                             		.loc 1 2424 26
 2075 03aa F8 06 01                		mov.L	#1, [r0]
 2076 03ad EF 54                   		mov.L	r5, r4
 2077 03af 05 00 00 00             		bsr	_wc_AesSetKey
 2078 03b3 E7 A1 01                		mov.L	r1, 4[r10]
2426:../src/src/keys.c ****                                    AES_DECRYPTION);
2427:../src/src/keys.c ****                 if (aesRet != 0) return aesRet;
 2079                             		.loc 1 2427 20
 2080 03b6 ED A5 01                		mov.L	4[r10], r5
 2081 03b9 61 05                   		cmp	#0, r5
 2082 03bb 17                      		beq	.L92
 2083                             		.loc 1 2427 41 discriminator 1
 2084 03bc ED A5 01                		mov.L	4[r10], r5
 2085 03bf 38 E5 02                		bra	.L70
 2086                             	.L92:
2428:../src/src/keys.c ****             }
2429:../src/src/keys.c ****         }
2430:../src/src/keys.c ****         if (enc)
 2087                             		.loc 1 2430 12
 2088 03c2 ED A5 03                		mov.L	12[r10], r5
 2089 03c5 61 05                   		cmp	#0, r5
 2090 03c7 17                      		beq	.L94
2431:../src/src/keys.c ****             enc->setup = 1;
 2091                             		.loc 1 2431 24
 2092 03c8 ED A5 03                		mov.L	12[r10], r5
 2093 03cb 3C D1 01                		mov.B	#1, 17[r5]
 2094                             	.L94:
2432:../src/src/keys.c ****         if (dec)
 2095                             		.loc 1 2432 12
 2096 03ce ED A5 04                		mov.L	16[r10], r5
 2097 03d1 61 05                   		cmp	#0, r5
 2098 03d3 17                      		beq	.L81
2433:../src/src/keys.c ****             dec->setup = 1;
 2099                             		.loc 1 2433 24
 2100 03d4 ED A5 04                		mov.L	16[r10], r5
 2101 03d7 3C D1 01                		mov.B	#1, 17[r5]
 2102                             	.L81:
 2103                             	.LBE3:
2434:../src/src/keys.c ****     }
2435:../src/src/keys.c **** #endif /* BUILD_AES */
2436:../src/src/keys.c **** 
2437:../src/src/keys.c **** #ifdef BUILD_AESGCM
2438:../src/src/keys.c ****     /* check that buffer sizes are sufficient */
2439:../src/src/keys.c ****     #if (AEAD_MAX_IMP_SZ < 4) /* AESGCM_IMP_IV_SZ */
2440:../src/src/keys.c ****         #error AEAD_MAX_IMP_SZ too small for AESGCM
2441:../src/src/keys.c ****     #endif
2442:../src/src/keys.c ****     #if (AEAD_MAX_EXP_SZ < 8) /* AESGCM_EXP_IV_SZ */
2443:../src/src/keys.c ****         #error AEAD_MAX_EXP_SZ too small for AESGCM
2444:../src/src/keys.c ****     #endif
2445:../src/src/keys.c ****     #if (MAX_WRITE_IV_SZ < 4) /* AESGCM_IMP_IV_SZ */
2446:../src/src/keys.c ****         #error MAX_WRITE_IV_SZ too small for AESGCM
2447:../src/src/keys.c ****     #endif
2448:../src/src/keys.c **** 
2449:../src/src/keys.c ****     if (specs->bulk_cipher_algorithm == wolfssl_aes_gcm) {
 2104                             		.loc 1 2449 14
 2105 03da ED A5 06                		mov.L	24[r10], r5
 2106 03dd 8A 55                   		mov.B	8[r5], r5
 2107                             		.loc 1 2449 8
 2108 03df 5B 55                   		movu.B	r5, r5
 2109 03e1 61 75                   		cmp	#7, r5
 2110 03e3 3B 95 02                		bne	.L95
 2111                             	.LBB4:
2450:../src/src/keys.c ****         int gcmRet;
2451:../src/src/keys.c **** 
2452:../src/src/keys.c ****         if (enc) {
 2112                             		.loc 1 2452 12
 2113 03e6 ED A5 03                		mov.L	12[r10], r5
 2114 03e9 61 05                   		cmp	#0, r5
 2115 03eb 20 45                   		beq	.L96
2453:../src/src/keys.c ****             if (enc->aes == NULL) {
 2116                             		.loc 1 2453 20
 2117 03ed ED A5 03                		mov.L	12[r10], r5
 2118 03f0 A8 5D                   		mov.L	4[r5], r5
 2119                             		.loc 1 2453 16
 2120 03f2 61 05                   		cmp	#0, r5
 2121 03f4 21 20                   		bne	.L97
2454:../src/src/keys.c ****                 enc->aes = (Aes*)XMALLOC(sizeof(Aes), heap, DYNAMIC_TYPE_CIPHER);
 2122                             		.loc 1 2454 34
 2123 03f6 FB 1A 38 01             		mov.L	#0x138, r1
 2124 03fa 05 00 00 00             		bsr	_wolfSSL_Malloc
 2125 03fe EF 14                   		mov.L	r1, r4
 2126                             		.loc 1 2454 26
 2127 0400 ED A5 03                		mov.L	12[r10], r5
 2128 0403 A0 5C                   		mov.L	r4, 4[r5]
2455:../src/src/keys.c ****                 if (enc->aes == NULL)
 2129                             		.loc 1 2455 24
 2130 0405 ED A5 03                		mov.L	12[r10], r5
 2131 0408 A8 5D                   		mov.L	4[r5], r5
 2132                             		.loc 1 2455 20
 2133 040a 61 05                   		cmp	#0, r5
 2134 040c 21 13                   		bne	.L98
2456:../src/src/keys.c ****                     return MEMORY_E;
 2135                             		.loc 1 2456 28
 2136 040e FB 56 83                		mov.L	#-125, r5
 2137 0411 38 93 02                		bra	.L70
 2138                             	.L97:
2457:../src/src/keys.c ****             } else {
2458:../src/src/keys.c ****                 wc_AesFree(enc->aes);
 2139                             		.loc 1 2458 17
 2140 0414 ED A5 03                		mov.L	12[r10], r5
 2141 0417 A8 5D                   		mov.L	4[r5], r5
 2142 0419 EF 51                   		mov.L	r5, r1
 2143 041b 05 00 00 00             		bsr	_wc_AesFree
 2144                             	.L98:
2459:../src/src/keys.c ****             }
2460:../src/src/keys.c **** 
2461:../src/src/keys.c ****             XMEMSET(enc->aes, 0, sizeof(Aes));
 2145                             		.loc 1 2461 13
 2146 041f ED A5 03                		mov.L	12[r10], r5
 2147 0422 A8 5D                   		mov.L	4[r5], r5
 2148 0424 FB 3A 38 01             		mov.L	#0x138, r3
 2149 0428 66 02                   		mov.L	#0, r2
 2150 042a EF 51                   		mov.L	r5, r1
 2151 042c 05 00 00 00             		bsr	_memset
 2152                             	.L96:
2462:../src/src/keys.c ****         }
2463:../src/src/keys.c ****         if (dec) {
 2153                             		.loc 1 2463 12
 2154 0430 ED A5 04                		mov.L	16[r10], r5
 2155 0433 61 05                   		cmp	#0, r5
 2156 0435 20 45                   		beq	.L99
2464:../src/src/keys.c ****             if (dec->aes == NULL) {
 2157                             		.loc 1 2464 20
 2158 0437 ED A5 04                		mov.L	16[r10], r5
 2159 043a A8 5D                   		mov.L	4[r5], r5
 2160                             		.loc 1 2464 16
 2161 043c 61 05                   		cmp	#0, r5
 2162 043e 21 20                   		bne	.L100
2465:../src/src/keys.c ****                 dec->aes = (Aes*)XMALLOC(sizeof(Aes), heap, DYNAMIC_TYPE_CIPHER);
 2163                             		.loc 1 2465 34
 2164 0440 FB 1A 38 01             		mov.L	#0x138, r1
 2165 0444 05 00 00 00             		bsr	_wolfSSL_Malloc
 2166 0448 EF 14                   		mov.L	r1, r4
 2167                             		.loc 1 2465 26
 2168 044a ED A5 04                		mov.L	16[r10], r5
 2169 044d A0 5C                   		mov.L	r4, 4[r5]
2466:../src/src/keys.c ****                 if (dec->aes == NULL)
 2170                             		.loc 1 2466 24
 2171 044f ED A5 04                		mov.L	16[r10], r5
 2172 0452 A8 5D                   		mov.L	4[r5], r5
 2173                             		.loc 1 2466 20
 2174 0454 61 05                   		cmp	#0, r5
 2175 0456 21 13                   		bne	.L101
2467:../src/src/keys.c ****                     return MEMORY_E;
 2176                             		.loc 1 2467 28
 2177 0458 FB 56 83                		mov.L	#-125, r5
 2178 045b 38 49 02                		bra	.L70
 2179                             	.L100:
2468:../src/src/keys.c ****             } else {
2469:../src/src/keys.c ****                 wc_AesFree(dec->aes);
 2180                             		.loc 1 2469 17
 2181 045e ED A5 04                		mov.L	16[r10], r5
 2182 0461 A8 5D                   		mov.L	4[r5], r5
 2183 0463 EF 51                   		mov.L	r5, r1
 2184 0465 05 00 00 00             		bsr	_wc_AesFree
 2185                             	.L101:
2470:../src/src/keys.c ****             }
2471:../src/src/keys.c **** 
2472:../src/src/keys.c ****             XMEMSET(dec->aes, 0, sizeof(Aes));
 2186                             		.loc 1 2472 13
 2187 0469 ED A5 04                		mov.L	16[r10], r5
 2188 046c A8 5D                   		mov.L	4[r5], r5
 2189 046e FB 3A 38 01             		mov.L	#0x138, r3
 2190 0472 66 02                   		mov.L	#0, r2
 2191 0474 EF 51                   		mov.L	r5, r1
 2192 0476 05 00 00 00             		bsr	_memset
 2193                             	.L99:
2473:../src/src/keys.c ****         }
2474:../src/src/keys.c **** 
2475:../src/src/keys.c ****         if (enc) {
 2194                             		.loc 1 2475 12
 2195 047a ED A5 03                		mov.L	12[r10], r5
 2196 047d 61 05                   		cmp	#0, r5
 2197 047f 20 28                   		beq	.L102
2476:../src/src/keys.c ****             if (wc_AesInit(enc->aes, heap, devId) != 0) {
 2198                             		.loc 1 2476 17
 2199 0481 ED A5 03                		mov.L	12[r10], r5
 2200 0484 A8 5D                   		mov.L	4[r5], r5
 2201 0486 A8 E3                   		mov.L	8[r6], r3
 2202 0488 A8 6A                   		mov.L	4[r6], r2
 2203 048a EF 51                   		mov.L	r5, r1
 2204 048c 05 00 00 00             		bsr	_wc_AesInit
 2205 0490 EF 15                   		mov.L	r1, r5
 2206                             		.loc 1 2476 16
 2207 0492 61 05                   		cmp	#0, r5
 2208 0494 20 13                   		beq	.L102
2477:../src/src/keys.c ****                 WOLFSSL_MSG("AesInit failed in SetKeys");
 2209                             		.loc 1 2477 17
 2210 0496 FB 12 23 01 00 00       		mov.L	#.LC15, r1
 2211 049c 05 00 00 00             		bsr	_WOLFSSL_MSG
2478:../src/src/keys.c ****                 return ASYNC_INIT_E;
 2212                             		.loc 1 2478 24
 2213 04a0 FB 5A 4A FF             		mov.L	#-182, r5
 2214 04a4 38 00 02                		bra	.L70
 2215                             	.L102:
2479:../src/src/keys.c ****             }
2480:../src/src/keys.c ****         }
2481:../src/src/keys.c ****         if (dec) {
 2216                             		.loc 1 2481 12
 2217 04a7 ED A5 04                		mov.L	16[r10], r5
 2218 04aa 61 05                   		cmp	#0, r5
 2219 04ac 20 28                   		beq	.L103
2482:../src/src/keys.c ****             if (wc_AesInit(dec->aes, heap, devId) != 0) {
 2220                             		.loc 1 2482 17
 2221 04ae ED A5 04                		mov.L	16[r10], r5
 2222 04b1 A8 5D                   		mov.L	4[r5], r5
 2223 04b3 A8 E3                   		mov.L	8[r6], r3
 2224 04b5 A8 6A                   		mov.L	4[r6], r2
 2225 04b7 EF 51                   		mov.L	r5, r1
 2226 04b9 05 00 00 00             		bsr	_wc_AesInit
 2227 04bd EF 15                   		mov.L	r1, r5
 2228                             		.loc 1 2482 16
 2229 04bf 61 05                   		cmp	#0, r5
 2230 04c1 20 13                   		beq	.L103
2483:../src/src/keys.c ****                 WOLFSSL_MSG("AesInit failed in SetKeys");
 2231                             		.loc 1 2483 17
 2232 04c3 FB 12 23 01 00 00       		mov.L	#.LC15, r1
 2233 04c9 05 00 00 00             		bsr	_WOLFSSL_MSG
2484:../src/src/keys.c ****                 return ASYNC_INIT_E;
 2234                             		.loc 1 2484 24
 2235 04cd FB 5A 4A FF             		mov.L	#-182, r5
 2236 04d1 38 D3 01                		bra	.L70
 2237                             	.L103:
2485:../src/src/keys.c ****             }
2486:../src/src/keys.c ****         }
2487:../src/src/keys.c **** 
2488:../src/src/keys.c ****         if (side == WOLFSSL_CLIENT_END) {
 2238                             		.loc 1 2488 12
 2239 04d4 EC 65                   		mov.L	[r6], r5
 2240 04d6 61 15                   		cmp	#1, r5
 2241 04d8 3B C8 00                		bne	.L104
2489:../src/src/keys.c ****             if (enc) {
 2242                             		.loc 1 2489 16
 2243 04db ED A5 03                		mov.L	12[r10], r5
 2244 04de 61 05                   		cmp	#0, r5
 2245 04e0 20 73                   		beq	.L105
2490:../src/src/keys.c ****                 gcmRet = wc_AesGcmSetKey(enc->aes, keys->client_write_key,
 2246                             		.loc 1 2490 26
 2247 04e2 ED A5 03                		mov.L	12[r10], r5
 2248 04e5 A8 59                   		mov.L	4[r5], r1
 2249                             		.loc 1 2490 56
 2250 04e7 ED A5 05                		mov.L	20[r10], r5
 2251 04ea 72 54 80 00             		add	#0x80, r5, r4
2491:../src/src/keys.c ****                                       specs->key_size);
 2252                             		.loc 1 2491 44
 2253 04ee ED A5 06                		mov.L	24[r10], r5
 2254 04f1 DC 55                   		mov.W	[r5], r5
2490:../src/src/keys.c ****                 gcmRet = wc_AesGcmSetKey(enc->aes, keys->client_write_key,
 2255                             		.loc 1 2490 26
 2256 04f3 5F 55                   		movu.W	r5, r5
 2257 04f5 EF 53                   		mov.L	r5, r3
 2258 04f7 EF 42                   		mov.L	r4, r2
 2259 04f9 05 00 00 00             		bsr	_wc_AesGcmSetKey
 2260 04fd E7 A1 02                		mov.L	r1, 8[r10]
2492:../src/src/keys.c ****                 if (gcmRet != 0) return gcmRet;
 2261                             		.loc 1 2492 20
 2262 0500 ED A5 02                		mov.L	8[r10], r5
 2263 0503 61 05                   		cmp	#0, r5
 2264 0505 17                      		beq	.L106
 2265                             		.loc 1 2492 41 discriminator 1
 2266 0506 ED A5 02                		mov.L	8[r10], r5
 2267 0509 38 9B 01                		bra	.L70
 2268                             	.L106:
2493:../src/src/keys.c ****                 XMEMCPY(keys->aead_enc_imp_IV, keys->client_write_IV,
 2269                             		.loc 1 2493 17
 2270 050c ED A5 05                		mov.L	20[r10], r5
 2271 050f 72 54 E8 00             		add	#0xe8, r5, r4
 2272 0513 ED A5 05                		mov.L	20[r10], r5
 2273 0516 72 55 C0 00             		add	#0xc0, r5
 2274 051a 66 C3                   		mov.L	#12, r3
 2275 051c EF 52                   		mov.L	r5, r2
 2276 051e EF 41                   		mov.L	r4, r1
 2277 0520 05 00 00 00             		bsr	_memcpy
2494:../src/src/keys.c ****                         AEAD_MAX_IMP_SZ);
2495:../src/src/keys.c **** #if !defined(NO_PUBLIC_GCM_SET_IV) && \
2496:../src/src/keys.c ****     ((!defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)) || \
2497:../src/src/keys.c ****     (defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2)))
2498:../src/src/keys.c ****                 if (!tls13) {
 2278                             		.loc 1 2498 20
 2279 0524 A9 65                   		mov.L	16[r6], r5
 2280 0526 61 05                   		cmp	#0, r5
 2281 0528 21 2B                   		bne	.L105
2499:../src/src/keys.c ****                     gcmRet = wc_AesGcmSetIV(enc->aes, AESGCM_NONCE_SZ,
 2282                             		.loc 1 2499 30
 2283 052a ED A5 03                		mov.L	12[r10], r5
 2284 052d A8 59                   		mov.L	4[r5], r1
2500:../src/src/keys.c ****                             keys->client_write_IV, AESGCM_IMP_IV_SZ, rng);
 2285                             		.loc 1 2500 33
 2286 052f ED A5 05                		mov.L	20[r10], r5
 2287 0532 72 55 C0 00             		add	#0xc0, r5
2499:../src/src/keys.c ****                     gcmRet = wc_AesGcmSetIV(enc->aes, AESGCM_NONCE_SZ,
 2288                             		.loc 1 2499 30
 2289 0536 A8 EC                   		mov.L	12[r6], r4
 2290 0538 E3 04                   		mov.L	r4, [r0]
 2291 053a 66 44                   		mov.L	#4, r4
 2292 053c EF 53                   		mov.L	r5, r3
 2293 053e 66 C2                   		mov.L	#12, r2
 2294 0540 05 00 00 00             		bsr	_wc_AesGcmSetIV
 2295 0544 E7 A1 02                		mov.L	r1, 8[r10]
2501:../src/src/keys.c ****                     if (gcmRet != 0) return gcmRet;
 2296                             		.loc 1 2501 24
 2297 0547 ED A5 02                		mov.L	8[r10], r5
 2298 054a 61 05                   		cmp	#0, r5
 2299 054c 17                      		beq	.L105
 2300                             		.loc 1 2501 45 discriminator 1
 2301 054d ED A5 02                		mov.L	8[r10], r5
 2302 0550 38 54 01                		bra	.L70
 2303                             	.L105:
2502:../src/src/keys.c ****                 }
2503:../src/src/keys.c **** #endif
2504:../src/src/keys.c ****             }
2505:../src/src/keys.c ****             if (dec) {
 2304                             		.loc 1 2505 16
 2305 0553 ED A5 04                		mov.L	16[r10], r5
 2306 0556 61 05                   		cmp	#0, r5
 2307 0558 3A 08 01                		beq	.L109
2506:../src/src/keys.c ****                 gcmRet = wc_AesGcmSetKey(dec->aes, keys->server_write_key,
 2308                             		.loc 1 2506 26
 2309 055b ED A5 04                		mov.L	16[r10], r5
 2310 055e A8 59                   		mov.L	4[r5], r1
 2311                             		.loc 1 2506 56
 2312 0560 ED A5 05                		mov.L	20[r10], r5
 2313 0563 72 54 A0 00             		add	#0xa0, r5, r4
2507:../src/src/keys.c ****                                       specs->key_size);
 2314                             		.loc 1 2507 44
 2315 0567 ED A5 06                		mov.L	24[r10], r5
 2316 056a DC 55                   		mov.W	[r5], r5
2506:../src/src/keys.c ****                 gcmRet = wc_AesGcmSetKey(dec->aes, keys->server_write_key,
 2317                             		.loc 1 2506 26
 2318 056c 5F 55                   		movu.W	r5, r5
 2319 056e EF 53                   		mov.L	r5, r3
 2320 0570 EF 42                   		mov.L	r4, r2
 2321 0572 05 00 00 00             		bsr	_wc_AesGcmSetKey
 2322 0576 E7 A1 02                		mov.L	r1, 8[r10]
2508:../src/src/keys.c ****                 if (gcmRet != 0) return gcmRet;
 2323                             		.loc 1 2508 20
 2324 0579 ED A5 02                		mov.L	8[r10], r5
 2325 057c 61 05                   		cmp	#0, r5
 2326 057e 17                      		beq	.L108
 2327                             		.loc 1 2508 41 discriminator 1
 2328 057f ED A5 02                		mov.L	8[r10], r5
 2329 0582 38 22 01                		bra	.L70
 2330                             	.L108:
2509:../src/src/keys.c ****                 XMEMCPY(keys->aead_dec_imp_IV, keys->server_write_IV,
 2331                             		.loc 1 2509 17
 2332 0585 ED A5 05                		mov.L	20[r10], r5
 2333 0588 72 54 F4 00             		add	#0xf4, r5, r4
 2334 058c ED A5 05                		mov.L	20[r10], r5
 2335 058f 72 55 D0 00             		add	#0xd0, r5
 2336 0593 66 C3                   		mov.L	#12, r3
 2337 0595 EF 52                   		mov.L	r5, r2
 2338 0597 EF 41                   		mov.L	r4, r1
 2339 0599 05 00 00 00             		bsr	_memcpy
 2340 059d 38 C3 00                		bra	.L109
 2341                             	.L104:
2510:../src/src/keys.c ****                         AEAD_MAX_IMP_SZ);
2511:../src/src/keys.c ****             }
2512:../src/src/keys.c ****         }
2513:../src/src/keys.c ****         else {
2514:../src/src/keys.c ****             if (enc) {
 2342                             		.loc 1 2514 16
 2343 05a0 ED A5 03                		mov.L	12[r10], r5
 2344 05a3 61 05                   		cmp	#0, r5
 2345 05a5 20 73                   		beq	.L110
2515:../src/src/keys.c ****                 gcmRet = wc_AesGcmSetKey(enc->aes, keys->server_write_key,
 2346                             		.loc 1 2515 26
 2347 05a7 ED A5 03                		mov.L	12[r10], r5
 2348 05aa A8 59                   		mov.L	4[r5], r1
 2349                             		.loc 1 2515 56
 2350 05ac ED A5 05                		mov.L	20[r10], r5
 2351 05af 72 54 A0 00             		add	#0xa0, r5, r4
2516:../src/src/keys.c ****                                       specs->key_size);
 2352                             		.loc 1 2516 44
 2353 05b3 ED A5 06                		mov.L	24[r10], r5
 2354 05b6 DC 55                   		mov.W	[r5], r5
2515:../src/src/keys.c ****                 gcmRet = wc_AesGcmSetKey(enc->aes, keys->server_write_key,
 2355                             		.loc 1 2515 26
 2356 05b8 5F 55                   		movu.W	r5, r5
 2357 05ba EF 53                   		mov.L	r5, r3
 2358 05bc EF 42                   		mov.L	r4, r2
 2359 05be 05 00 00 00             		bsr	_wc_AesGcmSetKey
 2360 05c2 E7 A1 02                		mov.L	r1, 8[r10]
2517:../src/src/keys.c ****                 if (gcmRet != 0) return gcmRet;
 2361                             		.loc 1 2517 20
 2362 05c5 ED A5 02                		mov.L	8[r10], r5
 2363 05c8 61 05                   		cmp	#0, r5
 2364 05ca 17                      		beq	.L111
 2365                             		.loc 1 2517 41 discriminator 1
 2366 05cb ED A5 02                		mov.L	8[r10], r5
 2367 05ce 38 D6 00                		bra	.L70
 2368                             	.L111:
2518:../src/src/keys.c ****                 XMEMCPY(keys->aead_enc_imp_IV, keys->server_write_IV,
 2369                             		.loc 1 2518 17
 2370 05d1 ED A5 05                		mov.L	20[r10], r5
 2371 05d4 72 54 E8 00             		add	#0xe8, r5, r4
 2372 05d8 ED A5 05                		mov.L	20[r10], r5
 2373 05db 72 55 D0 00             		add	#0xd0, r5
 2374 05df 66 C3                   		mov.L	#12, r3
 2375 05e1 EF 52                   		mov.L	r5, r2
 2376 05e3 EF 41                   		mov.L	r4, r1
 2377 05e5 05 00 00 00             		bsr	_memcpy
2519:../src/src/keys.c ****                         AEAD_MAX_IMP_SZ);
2520:../src/src/keys.c **** #if !defined(NO_PUBLIC_GCM_SET_IV) && \
2521:../src/src/keys.c ****     ((!defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)) || \
2522:../src/src/keys.c ****     (defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2)))
2523:../src/src/keys.c ****                 if (!tls13) {
 2378                             		.loc 1 2523 20
 2379 05e9 A9 65                   		mov.L	16[r6], r5
 2380 05eb 61 05                   		cmp	#0, r5
 2381 05ed 21 2B                   		bne	.L110
2524:../src/src/keys.c ****                     gcmRet = wc_AesGcmSetIV(enc->aes, AESGCM_NONCE_SZ,
 2382                             		.loc 1 2524 30
 2383 05ef ED A5 03                		mov.L	12[r10], r5
 2384 05f2 A8 59                   		mov.L	4[r5], r1
2525:../src/src/keys.c ****                             keys->server_write_IV, AESGCM_IMP_IV_SZ, rng);
 2385                             		.loc 1 2525 33
 2386 05f4 ED A5 05                		mov.L	20[r10], r5
 2387 05f7 72 55 D0 00             		add	#0xd0, r5
2524:../src/src/keys.c ****                     gcmRet = wc_AesGcmSetIV(enc->aes, AESGCM_NONCE_SZ,
 2388                             		.loc 1 2524 30
 2389 05fb A8 EC                   		mov.L	12[r6], r4
 2390 05fd E3 04                   		mov.L	r4, [r0]
 2391 05ff 66 44                   		mov.L	#4, r4
 2392 0601 EF 53                   		mov.L	r5, r3
 2393 0603 66 C2                   		mov.L	#12, r2
 2394 0605 05 00 00 00             		bsr	_wc_AesGcmSetIV
 2395 0609 E7 A1 02                		mov.L	r1, 8[r10]
2526:../src/src/keys.c ****                     if (gcmRet != 0) return gcmRet;
 2396                             		.loc 1 2526 24
 2397 060c ED A5 02                		mov.L	8[r10], r5
 2398 060f 61 05                   		cmp	#0, r5
 2399 0611 17                      		beq	.L110
 2400                             		.loc 1 2526 45 discriminator 1
 2401 0612 ED A5 02                		mov.L	8[r10], r5
 2402 0615 38 8F 00                		bra	.L70
 2403                             	.L110:
2527:../src/src/keys.c ****                 }
2528:../src/src/keys.c **** #endif
2529:../src/src/keys.c ****             }
2530:../src/src/keys.c ****             if (dec) {
 2404                             		.loc 1 2530 16
 2405 0618 ED A5 04                		mov.L	16[r10], r5
 2406 061b 61 05                   		cmp	#0, r5
 2407 061d 20 43                   		beq	.L109
2531:../src/src/keys.c ****                 gcmRet = wc_AesGcmSetKey(dec->aes, keys->client_write_key,
 2408                             		.loc 1 2531 26
 2409 061f ED A5 04                		mov.L	16[r10], r5
 2410 0622 A8 59                   		mov.L	4[r5], r1
 2411                             		.loc 1 2531 56
 2412 0624 ED A5 05                		mov.L	20[r10], r5
 2413 0627 72 54 80 00             		add	#0x80, r5, r4
2532:../src/src/keys.c ****                                       specs->key_size);
 2414                             		.loc 1 2532 44
 2415 062b ED A5 06                		mov.L	24[r10], r5
 2416 062e DC 55                   		mov.W	[r5], r5
2531:../src/src/keys.c ****                 gcmRet = wc_AesGcmSetKey(dec->aes, keys->client_write_key,
 2417                             		.loc 1 2531 26
 2418 0630 5F 55                   		movu.W	r5, r5
 2419 0632 EF 53                   		mov.L	r5, r3
 2420 0634 EF 42                   		mov.L	r4, r2
 2421 0636 05 00 00 00             		bsr	_wc_AesGcmSetKey
 2422 063a E7 A1 02                		mov.L	r1, 8[r10]
2533:../src/src/keys.c ****                 if (gcmRet != 0) return gcmRet;
 2423                             		.loc 1 2533 20
 2424 063d ED A5 02                		mov.L	8[r10], r5
 2425 0640 61 05                   		cmp	#0, r5
 2426 0642 16                      		beq	.L112
 2427                             		.loc 1 2533 41 discriminator 1
 2428 0643 ED A5 02                		mov.L	8[r10], r5
 2429 0646 2E 5E                   		bra	.L70
 2430                             	.L112:
2534:../src/src/keys.c ****                 XMEMCPY(keys->aead_dec_imp_IV, keys->client_write_IV,
 2431                             		.loc 1 2534 17
 2432 0648 ED A5 05                		mov.L	20[r10], r5
 2433 064b 72 54 F4 00             		add	#0xf4, r5, r4
 2434 064f ED A5 05                		mov.L	20[r10], r5
 2435 0652 72 55 C0 00             		add	#0xc0, r5
 2436 0656 66 C3                   		mov.L	#12, r3
 2437 0658 EF 52                   		mov.L	r5, r2
 2438 065a EF 41                   		mov.L	r4, r1
 2439 065c 05 00 00 00             		bsr	_memcpy
 2440                             		.balign 8,3,1
 2441                             	.L109:
2535:../src/src/keys.c ****                         AEAD_MAX_IMP_SZ);
2536:../src/src/keys.c ****             }
2537:../src/src/keys.c ****         }
2538:../src/src/keys.c ****         if (enc)
 2442                             		.loc 1 2538 12
 2443 0660 ED A5 03                		mov.L	12[r10], r5
 2444 0663 61 05                   		cmp	#0, r5
 2445 0665 17                      		beq	.L113
2539:../src/src/keys.c ****             enc->setup = 1;
 2446                             		.loc 1 2539 24
 2447 0666 ED A5 03                		mov.L	12[r10], r5
 2448 0669 3C D1 01                		mov.B	#1, 17[r5]
 2449                             	.L113:
2540:../src/src/keys.c ****         if (dec)
 2450                             		.loc 1 2540 12
 2451 066c ED A5 04                		mov.L	16[r10], r5
 2452 066f 61 05                   		cmp	#0, r5
 2453 0671 17                      		beq	.L95
2541:../src/src/keys.c ****             dec->setup = 1;
 2454                             		.loc 1 2541 24
 2455 0672 ED A5 04                		mov.L	16[r10], r5
 2456 0675 3C D1 01                		mov.B	#1, 17[r5]
 2457                             	.L95:
 2458                             	.LBE4:
2542:../src/src/keys.c ****     }
2543:../src/src/keys.c **** #endif /* BUILD_AESGCM */
2544:../src/src/keys.c **** 
2545:../src/src/keys.c **** #ifdef HAVE_AESCCM
2546:../src/src/keys.c ****     /* check that buffer sizes are sufficient (CCM is same size as GCM) */
2547:../src/src/keys.c ****     #if (AEAD_MAX_IMP_SZ < 4) /* AESGCM_IMP_IV_SZ */
2548:../src/src/keys.c ****         #error AEAD_MAX_IMP_SZ too small for AESCCM
2549:../src/src/keys.c ****     #endif
2550:../src/src/keys.c ****     #if (AEAD_MAX_EXP_SZ < 8) /* AESGCM_EXP_IV_SZ */
2551:../src/src/keys.c ****         #error AEAD_MAX_EXP_SZ too small for AESCCM
2552:../src/src/keys.c ****     #endif
2553:../src/src/keys.c ****     #if (MAX_WRITE_IV_SZ < 4) /* AESGCM_IMP_IV_SZ */
2554:../src/src/keys.c ****         #error MAX_WRITE_IV_SZ too small for AESCCM
2555:../src/src/keys.c ****     #endif
2556:../src/src/keys.c **** 
2557:../src/src/keys.c ****     if (specs->bulk_cipher_algorithm == wolfssl_aes_ccm) {
2558:../src/src/keys.c ****         int CcmRet;
2559:../src/src/keys.c **** 
2560:../src/src/keys.c ****         if (enc) {
2561:../src/src/keys.c ****             if (enc->aes == NULL) {
2562:../src/src/keys.c ****                 enc->aes = (Aes*)XMALLOC(sizeof(Aes), heap, DYNAMIC_TYPE_CIPHER);
2563:../src/src/keys.c ****                 if (enc->aes == NULL)
2564:../src/src/keys.c ****                     return MEMORY_E;
2565:../src/src/keys.c ****             } else {
2566:../src/src/keys.c ****                 wc_AesFree(enc->aes);
2567:../src/src/keys.c ****             }
2568:../src/src/keys.c **** 
2569:../src/src/keys.c ****             XMEMSET(enc->aes, 0, sizeof(Aes));
2570:../src/src/keys.c ****         }
2571:../src/src/keys.c ****         if (dec) {
2572:../src/src/keys.c ****             if (dec->aes == NULL) {
2573:../src/src/keys.c ****                 dec->aes = (Aes*)XMALLOC(sizeof(Aes), heap, DYNAMIC_TYPE_CIPHER);
2574:../src/src/keys.c ****                 if (dec->aes == NULL)
2575:../src/src/keys.c ****                 return MEMORY_E;
2576:../src/src/keys.c ****             } else {
2577:../src/src/keys.c ****                 wc_AesFree(dec->aes);
2578:../src/src/keys.c ****             }
2579:../src/src/keys.c ****             XMEMSET(dec->aes, 0, sizeof(Aes));
2580:../src/src/keys.c ****         }
2581:../src/src/keys.c **** 
2582:../src/src/keys.c ****         if (enc) {
2583:../src/src/keys.c ****             if (wc_AesInit(enc->aes, heap, devId) != 0) {
2584:../src/src/keys.c ****                 WOLFSSL_MSG("AesInit failed in SetKeys");
2585:../src/src/keys.c ****                 return ASYNC_INIT_E;
2586:../src/src/keys.c ****             }
2587:../src/src/keys.c ****         }
2588:../src/src/keys.c ****         if (dec) {
2589:../src/src/keys.c ****             if (wc_AesInit(dec->aes, heap, devId) != 0) {
2590:../src/src/keys.c ****                 WOLFSSL_MSG("AesInit failed in SetKeys");
2591:../src/src/keys.c ****                 return ASYNC_INIT_E;
2592:../src/src/keys.c ****             }
2593:../src/src/keys.c ****         }
2594:../src/src/keys.c **** 
2595:../src/src/keys.c ****         if (side == WOLFSSL_CLIENT_END) {
2596:../src/src/keys.c ****             if (enc) {
2597:../src/src/keys.c ****                 CcmRet = wc_AesCcmSetKey(enc->aes, keys->client_write_key,
2598:../src/src/keys.c ****                                          specs->key_size);
2599:../src/src/keys.c ****                 if (CcmRet != 0) {
2600:../src/src/keys.c ****                     return CcmRet;
2601:../src/src/keys.c ****                 }
2602:../src/src/keys.c ****                 XMEMCPY(keys->aead_enc_imp_IV, keys->client_write_IV,
2603:../src/src/keys.c ****                         AEAD_MAX_IMP_SZ);
2604:../src/src/keys.c **** #if !defined(NO_PUBLIC_CCM_SET_NONCE) && \
2605:../src/src/keys.c ****     ((!defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)) || \
2606:../src/src/keys.c ****     (defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2)))
2607:../src/src/keys.c ****                 if (!tls13) {
2608:../src/src/keys.c ****                     CcmRet = wc_AesCcmSetNonce(enc->aes, keys->client_write_IV,
2609:../src/src/keys.c ****                             AEAD_MAX_IMP_SZ);
2610:../src/src/keys.c ****                     if (CcmRet != 0) return CcmRet;
2611:../src/src/keys.c ****                 }
2612:../src/src/keys.c **** #endif
2613:../src/src/keys.c ****             }
2614:../src/src/keys.c ****             if (dec) {
2615:../src/src/keys.c ****                 CcmRet = wc_AesCcmSetKey(dec->aes, keys->server_write_key,
2616:../src/src/keys.c ****                                          specs->key_size);
2617:../src/src/keys.c ****                 if (CcmRet != 0) {
2618:../src/src/keys.c ****                     return CcmRet;
2619:../src/src/keys.c ****                 }
2620:../src/src/keys.c ****                 XMEMCPY(keys->aead_dec_imp_IV, keys->server_write_IV,
2621:../src/src/keys.c ****                         AEAD_MAX_IMP_SZ);
2622:../src/src/keys.c ****             }
2623:../src/src/keys.c ****         }
2624:../src/src/keys.c ****         else {
2625:../src/src/keys.c ****             if (enc) {
2626:../src/src/keys.c ****                 CcmRet = wc_AesCcmSetKey(enc->aes, keys->server_write_key,
2627:../src/src/keys.c ****                                          specs->key_size);
2628:../src/src/keys.c ****                 if (CcmRet != 0) {
2629:../src/src/keys.c ****                     return CcmRet;
2630:../src/src/keys.c ****                 }
2631:../src/src/keys.c ****                 XMEMCPY(keys->aead_enc_imp_IV, keys->server_write_IV,
2632:../src/src/keys.c ****                         AEAD_MAX_IMP_SZ);
2633:../src/src/keys.c **** #if !defined(NO_PUBLIC_CCM_SET_NONCE) && \
2634:../src/src/keys.c ****     ((!defined(HAVE_FIPS) && !defined(HAVE_SELFTEST)) || \
2635:../src/src/keys.c ****     (defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2)))
2636:../src/src/keys.c ****                 if (!tls13) {
2637:../src/src/keys.c ****                     CcmRet = wc_AesCcmSetNonce(enc->aes, keys->server_write_IV,
2638:../src/src/keys.c ****                             AEAD_MAX_IMP_SZ);
2639:../src/src/keys.c ****                     if (CcmRet != 0) return CcmRet;
2640:../src/src/keys.c ****                 }
2641:../src/src/keys.c **** #endif
2642:../src/src/keys.c ****             }
2643:../src/src/keys.c ****             if (dec) {
2644:../src/src/keys.c ****                 CcmRet = wc_AesCcmSetKey(dec->aes, keys->client_write_key,
2645:../src/src/keys.c ****                                          specs->key_size);
2646:../src/src/keys.c ****                 if (CcmRet != 0) {
2647:../src/src/keys.c ****                     return CcmRet;
2648:../src/src/keys.c ****                 }
2649:../src/src/keys.c ****                 XMEMCPY(keys->aead_dec_imp_IV, keys->client_write_IV,
2650:../src/src/keys.c ****                         AEAD_MAX_IMP_SZ);
2651:../src/src/keys.c ****             }
2652:../src/src/keys.c ****         }
2653:../src/src/keys.c ****         if (enc)
2654:../src/src/keys.c ****             enc->setup = 1;
2655:../src/src/keys.c ****         if (dec)
2656:../src/src/keys.c ****             dec->setup = 1;
2657:../src/src/keys.c ****     }
2658:../src/src/keys.c **** #endif /* HAVE_AESCCM */
2659:../src/src/keys.c **** 
2660:../src/src/keys.c **** #ifdef HAVE_CAMELLIA
2661:../src/src/keys.c ****     /* check that buffer sizes are sufficient */
2662:../src/src/keys.c ****     #if (MAX_WRITE_IV_SZ < 16) /* CAMELLIA_IV_SIZE */
2663:../src/src/keys.c ****         #error MAX_WRITE_IV_SZ too small for CAMELLIA
2664:../src/src/keys.c ****     #endif
2665:../src/src/keys.c **** 
2666:../src/src/keys.c ****     if (specs->bulk_cipher_algorithm == wolfssl_camellia) {
2667:../src/src/keys.c ****         int camRet;
2668:../src/src/keys.c **** 
2669:../src/src/keys.c ****         if (enc && enc->cam == NULL)
2670:../src/src/keys.c ****             enc->cam =
2671:../src/src/keys.c ****                 (Camellia*)XMALLOC(sizeof(Camellia), heap, DYNAMIC_TYPE_CIPHER);
2672:../src/src/keys.c ****         if (enc && enc->cam == NULL)
2673:../src/src/keys.c ****             return MEMORY_E;
2674:../src/src/keys.c **** 
2675:../src/src/keys.c ****         if (dec && dec->cam == NULL)
2676:../src/src/keys.c ****             dec->cam =
2677:../src/src/keys.c ****                 (Camellia*)XMALLOC(sizeof(Camellia), heap, DYNAMIC_TYPE_CIPHER);
2678:../src/src/keys.c ****         if (dec && dec->cam == NULL)
2679:../src/src/keys.c ****             return MEMORY_E;
2680:../src/src/keys.c **** 
2681:../src/src/keys.c ****         if (side == WOLFSSL_CLIENT_END) {
2682:../src/src/keys.c ****             if (enc) {
2683:../src/src/keys.c ****                 camRet = wc_CamelliaSetKey(enc->cam, keys->client_write_key,
2684:../src/src/keys.c ****                                         specs->key_size, keys->client_write_IV);
2685:../src/src/keys.c ****                 if (camRet != 0) return camRet;
2686:../src/src/keys.c ****             }
2687:../src/src/keys.c ****             if (dec) {
2688:../src/src/keys.c ****                 camRet = wc_CamelliaSetKey(dec->cam, keys->server_write_key,
2689:../src/src/keys.c ****                                         specs->key_size, keys->server_write_IV);
2690:../src/src/keys.c ****                 if (camRet != 0) return camRet;
2691:../src/src/keys.c ****             }
2692:../src/src/keys.c ****         }
2693:../src/src/keys.c ****         else {
2694:../src/src/keys.c ****             if (enc) {
2695:../src/src/keys.c ****                 camRet = wc_CamelliaSetKey(enc->cam, keys->server_write_key,
2696:../src/src/keys.c ****                                         specs->key_size, keys->server_write_IV);
2697:../src/src/keys.c ****                 if (camRet != 0) return camRet;
2698:../src/src/keys.c ****             }
2699:../src/src/keys.c ****             if (dec) {
2700:../src/src/keys.c ****                 camRet = wc_CamelliaSetKey(dec->cam, keys->client_write_key,
2701:../src/src/keys.c ****                                         specs->key_size, keys->client_write_IV);
2702:../src/src/keys.c ****                 if (camRet != 0) return camRet;
2703:../src/src/keys.c ****             }
2704:../src/src/keys.c ****         }
2705:../src/src/keys.c ****         if (enc)
2706:../src/src/keys.c ****             enc->setup = 1;
2707:../src/src/keys.c ****         if (dec)
2708:../src/src/keys.c ****             dec->setup = 1;
2709:../src/src/keys.c ****     }
2710:../src/src/keys.c **** #endif /* HAVE_CAMELLIA */
2711:../src/src/keys.c **** 
2712:../src/src/keys.c **** #ifdef HAVE_NULL_CIPHER
2713:../src/src/keys.c ****     if (specs->bulk_cipher_algorithm == wolfssl_cipher_null) {
2714:../src/src/keys.c ****     #ifdef WOLFSSL_TLS13
2715:../src/src/keys.c ****         if (tls13) {
2716:../src/src/keys.c ****             int hmacRet;
2717:../src/src/keys.c ****             int hashType = WC_HASH_TYPE_NONE;
2718:../src/src/keys.c **** 
2719:../src/src/keys.c ****             switch (specs->mac_algorithm) {
2720:../src/src/keys.c ****                 case sha256_mac:
2721:../src/src/keys.c ****                     hashType = WC_SHA256;
2722:../src/src/keys.c ****                     break;
2723:../src/src/keys.c ****                 case sha384_mac:
2724:../src/src/keys.c ****                     hashType = WC_SHA384;
2725:../src/src/keys.c ****                     break;
2726:../src/src/keys.c ****                 default:
2727:../src/src/keys.c ****                     break;
2728:../src/src/keys.c ****             }
2729:../src/src/keys.c **** 
2730:../src/src/keys.c ****             if (enc && enc->hmac == NULL) {
2731:../src/src/keys.c ****                 enc->hmac = (Hmac*)XMALLOC(sizeof(Hmac), heap,
2732:../src/src/keys.c ****                                                            DYNAMIC_TYPE_CIPHER);
2733:../src/src/keys.c ****                 if (enc->hmac == NULL)
2734:../src/src/keys.c ****                     return MEMORY_E;
2735:../src/src/keys.c ****             }
2736:../src/src/keys.c **** 
2737:../src/src/keys.c ****             if (enc) {
2738:../src/src/keys.c ****                 if (wc_HmacInit(enc->hmac, heap, devId) != 0) {
2739:../src/src/keys.c ****                     WOLFSSL_MSG("HmacInit failed in SetKeys");
2740:../src/src/keys.c ****                     XFREE(enc->hmac, heap, DYNAMIC_TYPE_CIPHER);
2741:../src/src/keys.c ****                     enc->hmac = NULL;
2742:../src/src/keys.c ****                     return ASYNC_INIT_E;
2743:../src/src/keys.c ****                 }
2744:../src/src/keys.c ****             }
2745:../src/src/keys.c **** 
2746:../src/src/keys.c ****             if (dec && dec->hmac == NULL) {
2747:../src/src/keys.c ****                 dec->hmac = (Hmac*)XMALLOC(sizeof(Hmac), heap,
2748:../src/src/keys.c ****                                                            DYNAMIC_TYPE_CIPHER);
2749:../src/src/keys.c ****                 if (dec->hmac == NULL)
2750:../src/src/keys.c ****                     return MEMORY_E;
2751:../src/src/keys.c ****             }
2752:../src/src/keys.c **** 
2753:../src/src/keys.c ****             if (dec) {
2754:../src/src/keys.c ****                 if (wc_HmacInit(dec->hmac, heap, devId) != 0) {
2755:../src/src/keys.c ****                     WOLFSSL_MSG("HmacInit failed in SetKeys");
2756:../src/src/keys.c ****                     XFREE(dec->hmac, heap, DYNAMIC_TYPE_CIPHER);
2757:../src/src/keys.c ****                     dec->hmac = NULL;
2758:../src/src/keys.c ****                     return ASYNC_INIT_E;
2759:../src/src/keys.c ****                 }
2760:../src/src/keys.c ****             }
2761:../src/src/keys.c **** 
2762:../src/src/keys.c ****             if (side == WOLFSSL_CLIENT_END) {
2763:../src/src/keys.c ****                 if (enc) {
2764:../src/src/keys.c ****                     XMEMCPY(keys->aead_enc_imp_IV, keys->client_write_IV,
2765:../src/src/keys.c ****                             HMAC_NONCE_SZ);
2766:../src/src/keys.c ****                     hmacRet = wc_HmacSetKey(enc->hmac, hashType,
2767:../src/src/keys.c ****                                        keys->client_write_key, specs->key_size);
2768:../src/src/keys.c ****                     if (hmacRet != 0) return hmacRet;
2769:../src/src/keys.c ****                 }
2770:../src/src/keys.c ****                 if (dec) {
2771:../src/src/keys.c ****                     XMEMCPY(keys->aead_dec_imp_IV, keys->server_write_IV,
2772:../src/src/keys.c ****                             HMAC_NONCE_SZ);
2773:../src/src/keys.c ****                     hmacRet = wc_HmacSetKey(dec->hmac, hashType,
2774:../src/src/keys.c ****                                        keys->server_write_key, specs->key_size);
2775:../src/src/keys.c ****                     if (hmacRet != 0) return hmacRet;
2776:../src/src/keys.c ****                 }
2777:../src/src/keys.c ****             }
2778:../src/src/keys.c ****             else {
2779:../src/src/keys.c ****                 if (enc) {
2780:../src/src/keys.c ****                     XMEMCPY(keys->aead_enc_imp_IV, keys->server_write_IV,
2781:../src/src/keys.c ****                             HMAC_NONCE_SZ);
2782:../src/src/keys.c ****                     hmacRet = wc_HmacSetKey(enc->hmac, hashType,
2783:../src/src/keys.c ****                                        keys->server_write_key, specs->key_size);
2784:../src/src/keys.c ****                     if (hmacRet != 0) return hmacRet;
2785:../src/src/keys.c ****                 }
2786:../src/src/keys.c ****                 if (dec) {
2787:../src/src/keys.c ****                     XMEMCPY(keys->aead_dec_imp_IV, keys->client_write_IV,
2788:../src/src/keys.c ****                             HMAC_NONCE_SZ);
2789:../src/src/keys.c ****                     hmacRet = wc_HmacSetKey(dec->hmac, hashType,
2790:../src/src/keys.c ****                                        keys->client_write_key, specs->key_size);
2791:../src/src/keys.c ****                     if (hmacRet != 0) return hmacRet;
2792:../src/src/keys.c ****                 }
2793:../src/src/keys.c ****             }
2794:../src/src/keys.c ****         }
2795:../src/src/keys.c ****     #endif
2796:../src/src/keys.c ****         if (enc)
2797:../src/src/keys.c ****             enc->setup = 1;
2798:../src/src/keys.c ****         if (dec)
2799:../src/src/keys.c ****             dec->setup = 1;
2800:../src/src/keys.c ****     }
2801:../src/src/keys.c **** #endif
2802:../src/src/keys.c **** 
2803:../src/src/keys.c ****     if (enc) {
 2459                             		.loc 1 2803 8
 2460 0678 ED A5 03                		mov.L	12[r10], r5
 2461 067b 61 05                   		cmp	#0, r5
 2462 067d 20 10                   		beq	.L114
2804:../src/src/keys.c ****         keys->sequence_number_hi      = 0;
 2463                             		.loc 1 2804 39
 2464 067f ED A5 05                		mov.L	20[r10], r5
 2465 0682 F9 56 42 00             		mov.L	#0, 264[r5]
2805:../src/src/keys.c ****         keys->sequence_number_lo      = 0;
 2466                             		.loc 1 2805 39
 2467 0686 ED A5 05                		mov.L	20[r10], r5
 2468 0689 F9 56 43 00             		mov.L	#0, 268[r5]
 2469                             	.L114:
2806:../src/src/keys.c ****     }
2807:../src/src/keys.c ****     if (dec) {
 2470                             		.loc 1 2807 8
 2471 068d ED A5 04                		mov.L	16[r10], r5
 2472 0690 61 05                   		cmp	#0, r5
 2473 0692 20 10                   		beq	.L115
2808:../src/src/keys.c ****         keys->peer_sequence_number_hi = 0;
 2474                             		.loc 1 2808 39
 2475 0694 ED A5 05                		mov.L	20[r10], r5
 2476 0697 F9 56 40 00             		mov.L	#0, 256[r5]
2809:../src/src/keys.c ****         keys->peer_sequence_number_lo = 0;
 2477                             		.loc 1 2809 39
 2478 069b ED A5 05                		mov.L	20[r10], r5
 2479 069e F9 56 41 00             		mov.L	#0, 260[r5]
 2480                             	.L115:
2810:../src/src/keys.c ****     }
2811:../src/src/keys.c ****     (void)side;
2812:../src/src/keys.c ****     (void)heap;
2813:../src/src/keys.c ****     (void)enc;
2814:../src/src/keys.c ****     (void)dec;
2815:../src/src/keys.c ****     (void)specs;
2816:../src/src/keys.c ****     (void)devId;
2817:../src/src/keys.c **** 
2818:../src/src/keys.c ****     return 0;
 2481                             		.loc 1 2818 12
 2482 06a2 66 05                   		mov.L	#0, r5
 2483                             		.balign 8,3,1
 2484                             	.L70:
2819:../src/src/keys.c **** }
 2485                             		.loc 1 2819 1
 2486 06a4 EF 51                   		mov.L	r5, r1
 2487 06a6 71 00 34                		add	#52, r0
 2488 06a9 7E B6                   		pop	r6
 2489 06ab 7E BA                   		pop	r10
 2490 06ad 02                      		rts
 2491                             	.LFE3:
 2493 06ae EF 00                   		.section	.text.SetKeysSide,"ax",@progbits
 2494                             		.global	_SetKeysSide
 2496                             	_SetKeysSide:
 2497                             	.LFB4:
2820:../src/src/keys.c **** 
2821:../src/src/keys.c **** 
2822:../src/src/keys.c **** #ifdef HAVE_ONE_TIME_AUTH
2823:../src/src/keys.c **** /* set one time authentication keys */
2824:../src/src/keys.c **** static int SetAuthKeys(OneTimeAuth* authentication, Keys* keys,
2825:../src/src/keys.c ****                        CipherSpecs* specs, void* heap, int devId)
2826:../src/src/keys.c **** {
2827:../src/src/keys.c **** 
2828:../src/src/keys.c **** #ifdef HAVE_POLY1305
2829:../src/src/keys.c ****         /* set up memory space for poly1305 */
2830:../src/src/keys.c ****         if (authentication && authentication->poly1305 == NULL)
2831:../src/src/keys.c ****             authentication->poly1305 =
2832:../src/src/keys.c ****                 (Poly1305*)XMALLOC(sizeof(Poly1305), heap, DYNAMIC_TYPE_CIPHER);
2833:../src/src/keys.c ****         if (authentication && authentication->poly1305 == NULL)
2834:../src/src/keys.c ****             return MEMORY_E;
2835:../src/src/keys.c ****     #ifdef WOLFSSL_CHECK_MEM_ZERO
2836:../src/src/keys.c ****         wc_MemZero_Add("SSL auth keys poly1305", authentication->poly1305,
2837:../src/src/keys.c ****             sizeof(Poly1305));
2838:../src/src/keys.c ****     #endif
2839:../src/src/keys.c ****         if (authentication)
2840:../src/src/keys.c ****             authentication->setup = 1;
2841:../src/src/keys.c **** #endif
2842:../src/src/keys.c ****         (void)authentication;
2843:../src/src/keys.c ****         (void)heap;
2844:../src/src/keys.c ****         (void)keys;
2845:../src/src/keys.c ****         (void)specs;
2846:../src/src/keys.c ****         (void)devId;
2847:../src/src/keys.c **** 
2848:../src/src/keys.c ****         return 0;
2849:../src/src/keys.c **** }
2850:../src/src/keys.c **** #endif /* HAVE_ONE_TIME_AUTH */
2851:../src/src/keys.c **** 
2852:../src/src/keys.c **** #ifdef HAVE_SECURE_RENEGOTIATION
2853:../src/src/keys.c **** /* function name is for cache_status++
2854:../src/src/keys.c ****  * This function was added because of error incrementing enum type when
2855:../src/src/keys.c ****  * compiling with a C++ compiler.
2856:../src/src/keys.c ****  */
2857:../src/src/keys.c **** static void CacheStatusPP(SecureRenegotiation* cache)
2858:../src/src/keys.c **** {
2859:../src/src/keys.c ****     switch (cache->cache_status) {
2860:../src/src/keys.c ****         case SCR_CACHE_NULL:
2861:../src/src/keys.c ****             cache->cache_status = SCR_CACHE_NEEDED;
2862:../src/src/keys.c ****             break;
2863:../src/src/keys.c **** 
2864:../src/src/keys.c ****         case SCR_CACHE_NEEDED:
2865:../src/src/keys.c ****             cache->cache_status = SCR_CACHE_COPY;
2866:../src/src/keys.c ****             break;
2867:../src/src/keys.c **** 
2868:../src/src/keys.c ****         case SCR_CACHE_COPY:
2869:../src/src/keys.c ****             cache->cache_status = SCR_CACHE_PARTIAL;
2870:../src/src/keys.c ****             break;
2871:../src/src/keys.c **** 
2872:../src/src/keys.c ****         case SCR_CACHE_PARTIAL:
2873:../src/src/keys.c ****             cache->cache_status = SCR_CACHE_COMPLETE;
2874:../src/src/keys.c ****             break;
2875:../src/src/keys.c **** 
2876:../src/src/keys.c ****         case SCR_CACHE_COMPLETE:
2877:../src/src/keys.c ****             WOLFSSL_MSG("SCR Cache state Complete");
2878:../src/src/keys.c ****             break;
2879:../src/src/keys.c **** 
2880:../src/src/keys.c ****         default:
2881:../src/src/keys.c ****             WOLFSSL_MSG("Unknown cache state!!");
2882:../src/src/keys.c ****     }
2883:../src/src/keys.c **** }
2884:../src/src/keys.c **** #endif /* HAVE_SECURE_RENEGOTIATION */
2885:../src/src/keys.c **** 
2886:../src/src/keys.c **** 
2887:../src/src/keys.c **** /* Set wc_encrypt/wc_decrypt or both sides of key setup
2888:../src/src/keys.c ****  * note: use wc_encrypt to avoid shadowing global encrypt
2889:../src/src/keys.c ****  * declared in unistd.h
2890:../src/src/keys.c ****  */
2891:../src/src/keys.c **** int SetKeysSide(WOLFSSL* ssl, enum encrypt_side side)
2892:../src/src/keys.c **** {
 2498                             		.loc 1 2892 1
 2499 0000 7E AA                   		push.l	r10
 2500                             	.LCFI8:
 2501 0002 7E A6                   		push.l	r6
 2502                             	.LCFI9:
 2503 0004 71 0A E4                		add	#-28, r0, r10
 2504                             	.LCFI10:
 2505 0007 71 A0 EC                		add	#-20, r10, r0
 2506                             	.LCFI11:
 2507 000a E7 A1 05                		mov.L	r1, 20[r10]
 2508 000d E7 A2 06                		mov.L	r2, 24[r10]
2893:../src/src/keys.c ****     int ret, copy = 0;
 2509                             		.loc 1 2893 14
 2510 0010 F9 A6 02 00             		mov.L	#0, 8[r10]
2894:../src/src/keys.c ****     Ciphers* wc_encrypt = NULL;
 2511                             		.loc 1 2894 14
 2512 0014 F8 A6 00                		mov.L	#0, [r10]
2895:../src/src/keys.c ****     Ciphers* wc_decrypt = NULL;
 2513                             		.loc 1 2895 14
 2514 0017 F9 A6 01 00             		mov.L	#0, 4[r10]
2896:../src/src/keys.c ****     Keys*    keys    = &ssl->keys;
 2515                             		.loc 1 2896 14
 2516 001b ED A5 05                		mov.L	20[r10], r5
 2517 001e 72 55 74 01             		add	#0x174, r5
 2518 0022 E7 A5 03                		mov.L	r5, 12[r10]
2897:../src/src/keys.c **** 
2898:../src/src/keys.c ****     (void)copy;
2899:../src/src/keys.c **** 
2900:../src/src/keys.c **** #ifdef HAVE_SECURE_RENEGOTIATION
2901:../src/src/keys.c ****     if (ssl->secure_renegotiation &&
2902:../src/src/keys.c ****             ssl->secure_renegotiation->cache_status != SCR_CACHE_NULL) {
2903:../src/src/keys.c ****         keys = &ssl->secure_renegotiation->tmp_keys;
2904:../src/src/keys.c **** #ifdef WOLFSSL_DTLS
2905:../src/src/keys.c ****         /* For DTLS, copy is done in StoreKeys */
2906:../src/src/keys.c ****         if (!ssl->options.dtls)
2907:../src/src/keys.c **** #endif
2908:../src/src/keys.c ****             copy = 1;
2909:../src/src/keys.c ****     }
2910:../src/src/keys.c **** #endif /* HAVE_SECURE_RENEGOTIATION */
2911:../src/src/keys.c **** 
2912:../src/src/keys.c ****     switch (side) {
 2519                             		.loc 1 2912 5
 2520 0025 ED A5 06                		mov.L	24[r10], r5
 2521 0028 61 25                   		cmp	#2, r5
 2522 002a 20 1A                   		beq	.L117
 2523 002c ED A5 06                		mov.L	24[r10], r5
 2524 002f 61 35                   		cmp	#3, r5
 2525 0031 20 1E                   		beq	.L118
 2526 0033 ED A5 06                		mov.L	24[r10], r5
 2527 0036 61 15                   		cmp	#1, r5
 2528 0038 21 29                   		bne	.L119
2913:../src/src/keys.c ****         case ENCRYPT_SIDE_ONLY:
2914:../src/src/keys.c **** #ifdef WOLFSSL_DEBUG_TLS
2915:../src/src/keys.c ****             WOLFSSL_MSG("Provisioning ENCRYPT key");
2916:../src/src/keys.c ****             if (ssl->options.side == WOLFSSL_CLIENT_END) {
2917:../src/src/keys.c ****                 WOLFSSL_BUFFER(keys->client_write_key, ssl->specs.key_size);
2918:../src/src/keys.c ****             }
2919:../src/src/keys.c ****             else {
2920:../src/src/keys.c ****                 WOLFSSL_BUFFER(keys->server_write_key, ssl->specs.key_size);
2921:../src/src/keys.c ****             }
2922:../src/src/keys.c **** #endif
2923:../src/src/keys.c ****             wc_encrypt = &ssl->encrypt;
 2529                             		.loc 1 2923 24
 2530 003a ED A5 05                		mov.L	20[r10], r5
 2531 003d 71 55 50                		add	#0x50, r5
 2532 0040 E3 A5                   		mov.L	r5, [r10]
2924:../src/src/keys.c ****             break;
 2533                             		.loc 1 2924 13
 2534 0042 2E 25                   		bra	.L120
 2535                             	.L117:
2925:../src/src/keys.c **** 
2926:../src/src/keys.c ****         case DECRYPT_SIDE_ONLY:
2927:../src/src/keys.c **** #ifdef WOLFSSL_DEBUG_TLS
2928:../src/src/keys.c ****             WOLFSSL_MSG("Provisioning DECRYPT key");
2929:../src/src/keys.c ****             if (ssl->options.side == WOLFSSL_CLIENT_END) {
2930:../src/src/keys.c ****                 WOLFSSL_BUFFER(keys->server_write_key, ssl->specs.key_size);
2931:../src/src/keys.c ****             }
2932:../src/src/keys.c ****             else {
2933:../src/src/keys.c ****                 WOLFSSL_BUFFER(keys->client_write_key, ssl->specs.key_size);
2934:../src/src/keys.c ****             }
2935:../src/src/keys.c **** #endif
2936:../src/src/keys.c ****             wc_decrypt = &ssl->decrypt;
 2536                             		.loc 1 2936 24
 2537 0044 ED A5 05                		mov.L	20[r10], r5
 2538 0047 71 55 64                		add	#0x64, r5
 2539 004a E7 A5 01                		mov.L	r5, 4[r10]
2937:../src/src/keys.c ****             break;
 2540                             		.loc 1 2937 13
 2541 004d 2E 1A                   		bra	.L120
 2542                             	.L118:
2938:../src/src/keys.c **** 
2939:../src/src/keys.c ****         case ENCRYPT_AND_DECRYPT_SIDE:
2940:../src/src/keys.c **** #ifdef WOLFSSL_DEBUG_TLS
2941:../src/src/keys.c ****             WOLFSSL_MSG("Provisioning ENCRYPT key");
2942:../src/src/keys.c ****             if (ssl->options.side == WOLFSSL_CLIENT_END) {
2943:../src/src/keys.c ****                 WOLFSSL_BUFFER(keys->client_write_key, ssl->specs.key_size);
2944:../src/src/keys.c ****             }
2945:../src/src/keys.c ****             else {
2946:../src/src/keys.c ****                 WOLFSSL_BUFFER(keys->server_write_key, ssl->specs.key_size);
2947:../src/src/keys.c ****             }
2948:../src/src/keys.c ****             WOLFSSL_MSG("Provisioning DECRYPT key");
2949:../src/src/keys.c ****             if (ssl->options.side == WOLFSSL_CLIENT_END) {
2950:../src/src/keys.c ****                 WOLFSSL_BUFFER(keys->server_write_key, ssl->specs.key_size);
2951:../src/src/keys.c ****             }
2952:../src/src/keys.c ****             else {
2953:../src/src/keys.c ****                 WOLFSSL_BUFFER(keys->client_write_key, ssl->specs.key_size);
2954:../src/src/keys.c ****             }
2955:../src/src/keys.c **** #endif
2956:../src/src/keys.c ****             wc_encrypt = &ssl->encrypt;
 2543                             		.loc 1 2956 24
 2544 004f ED A5 05                		mov.L	20[r10], r5
 2545 0052 71 55 50                		add	#0x50, r5
 2546 0055 E3 A5                   		mov.L	r5, [r10]
2957:../src/src/keys.c ****             wc_decrypt = &ssl->decrypt;
 2547                             		.loc 1 2957 24
 2548 0057 ED A5 05                		mov.L	20[r10], r5
 2549 005a 71 55 64                		add	#0x64, r5
 2550 005d E7 A5 01                		mov.L	r5, 4[r10]
2958:../src/src/keys.c ****             break;
 2551                             		.loc 1 2958 13
 2552 0060 0F                      		bra	.L120
 2553                             	.L119:
2959:../src/src/keys.c **** 
2960:../src/src/keys.c ****         default:
2961:../src/src/keys.c ****             return BAD_FUNC_ARG;
 2554                             		.loc 1 2961 20
 2555 0061 FB 5A 53 FF             		mov.L	#-173, r5
 2556 0065 2E 4D                   		bra	.L121
 2557                             	.L120:
2962:../src/src/keys.c ****     }
2963:../src/src/keys.c **** 
2964:../src/src/keys.c **** #ifdef HAVE_ONE_TIME_AUTH
2965:../src/src/keys.c ****     if (!ssl->auth.setup && ssl->specs.bulk_cipher_algorithm == wolfssl_chacha){
2966:../src/src/keys.c ****         ret = SetAuthKeys(&ssl->auth, keys, &ssl->specs, ssl->heap, ssl->devId);
2967:../src/src/keys.c ****         if (ret != 0)
2968:../src/src/keys.c ****            return ret;
2969:../src/src/keys.c ****     }
2970:../src/src/keys.c **** #endif
2971:../src/src/keys.c **** 
2972:../src/src/keys.c **** #if !defined(NO_CERTS) && defined(HAVE_PK_CALLBACKS)
2973:../src/src/keys.c ****     ret = PROTOCOLCB_UNAVAILABLE;
2974:../src/src/keys.c ****     if (ssl->ctx->EncryptKeysCb) {
2975:../src/src/keys.c ****         void* ctx = wolfSSL_GetEncryptKeysCtx(ssl);
2976:../src/src/keys.c ****         ret = ssl->ctx->EncryptKeysCb(ssl, ctx);
2977:../src/src/keys.c ****     }
2978:../src/src/keys.c ****     if (!ssl->ctx->EncryptKeysCb || ret == PROTOCOLCB_UNAVAILABLE)
2979:../src/src/keys.c **** #endif
2980:../src/src/keys.c ****     {
2981:../src/src/keys.c ****         ret = SetKeys(wc_encrypt, wc_decrypt, keys, &ssl->specs, ssl->options.side,
 2558                             		.loc 1 2981 15
 2559 0067 ED A5 05                		mov.L	20[r10], r5
 2560 006a 72 54 64 01             		add	#0x164, r5, r4
 2561                             		.loc 1 2981 78
 2562 006e ED A5 05                		mov.L	20[r10], r5
 2563 0071 ED 55 A7                		mov.L	668[r5], r5
 2564 0074 68 55                   		shlr	#5, r5
 2565 0076 64 35                   		and	#3, r5
 2566                             		.loc 1 2981 15
 2567 0078 5B 53                   		movu.B	r5, r3
 2568 007a ED A5 05                		mov.L	20[r10], r5
 2569 007d AA 5A                   		mov.L	36[r5], r2
 2570 007f ED A5 05                		mov.L	20[r10], r5
 2571 0082 ED 51 BE                		mov.L	760[r5], r1
 2572 0085 ED A5 05                		mov.L	20[r10], r5
 2573 0088 A9 D6                   		mov.L	24[r5], r6
2982:../src/src/keys.c ****                       ssl->heap, ssl->devId, ssl->rng, ssl->options.tls1_3);
 2574                             		.loc 1 2982 68
 2575 008a ED A5 05                		mov.L	20[r10], r5
 2576 008d ED 55 A7                		mov.L	668[r5], r5
 2577 0090 69 15                   		shlr	#17, r5
 2578 0092 64 15                   		and	#1, r5
2981:../src/src/keys.c ****                       ssl->heap, ssl->devId, ssl->rng, ssl->options.tls1_3);
 2579                             		.loc 1 2981 15
 2580 0094 5B 55                   		movu.B	r5, r5
 2581 0096 A1 05                   		mov.L	r5, 16[r0]
 2582 0098 A0 8E                   		mov.L	r6, 12[r0]
 2583 009a A0 81                   		mov.L	r1, 8[r0]
 2584 009c A0 0A                   		mov.L	r2, 4[r0]
 2585 009e E3 03                   		mov.L	r3, [r0]
 2586 00a0 ED A3 03                		mov.L	12[r10], r3
 2587 00a3 ED A2 01                		mov.L	4[r10], r2
 2588 00a6 EC A1                   		mov.L	[r10], r1
 2589 00a8 05 00 00 00             		bsr	_SetKeys
 2590 00ac E7 A1 04                		mov.L	r1, 16[r10]
2983:../src/src/keys.c ****     }
2984:../src/src/keys.c **** 
2985:../src/src/keys.c **** #ifdef WOLFSSL_DTLS13
2986:../src/src/keys.c ****     if (ret == 0 && ssl->options.dtls && IsAtLeastTLSv1_3(ssl->version))
2987:../src/src/keys.c ****         ret = Dtls13SetRecordNumberKeys(ssl, side);
2988:../src/src/keys.c **** #endif /* WOLFSSL_DTLS13 */
2989:../src/src/keys.c **** 
2990:../src/src/keys.c **** #ifdef HAVE_SECURE_RENEGOTIATION
2991:../src/src/keys.c **** #ifdef WOLFSSL_DTLS
2992:../src/src/keys.c ****     if (ret == 0 && ssl->options.dtls && !ssl->options.tls1_3) {
2993:../src/src/keys.c ****         if (wc_encrypt)
2994:../src/src/keys.c ****             wc_encrypt->src = keys == &ssl->keys ? KEYS : SCR;
2995:../src/src/keys.c ****         if (wc_decrypt)
2996:../src/src/keys.c ****             wc_decrypt->src = keys == &ssl->keys ? KEYS : SCR;
2997:../src/src/keys.c ****     }
2998:../src/src/keys.c **** #endif
2999:../src/src/keys.c **** 
3000:../src/src/keys.c ****     if (copy) {
3001:../src/src/keys.c ****         int clientCopy = 0;
3002:../src/src/keys.c **** 
3003:../src/src/keys.c ****         /* Sanity check that keys == ssl->secure_renegotiation->tmp_keys.
3004:../src/src/keys.c ****          * Otherwise the memcpy calls would copy overlapping memory
3005:../src/src/keys.c ****          * and cause UB. Fail early. */
3006:../src/src/keys.c ****         if (keys == &ssl->keys)
3007:../src/src/keys.c ****             return BAD_FUNC_ARG;
3008:../src/src/keys.c **** 
3009:../src/src/keys.c ****         if (ssl->options.side == WOLFSSL_CLIENT_END && wc_encrypt)
3010:../src/src/keys.c ****             clientCopy = 1;
3011:../src/src/keys.c ****         else if (ssl->options.side == WOLFSSL_SERVER_END && wc_decrypt)
3012:../src/src/keys.c ****             clientCopy = 1;
3013:../src/src/keys.c **** 
3014:../src/src/keys.c ****         if (clientCopy) {
3015:../src/src/keys.c ****     #ifndef WOLFSSL_AEAD_ONLY
3016:../src/src/keys.c ****             XMEMCPY(ssl->keys.client_write_MAC_secret,
3017:../src/src/keys.c ****                     keys->client_write_MAC_secret, WC_MAX_DIGEST_SIZE);
3018:../src/src/keys.c ****     #endif
3019:../src/src/keys.c ****             XMEMCPY(ssl->keys.client_write_key,
3020:../src/src/keys.c ****                     keys->client_write_key, AES_256_KEY_SIZE);
3021:../src/src/keys.c ****             XMEMCPY(ssl->keys.client_write_IV,
3022:../src/src/keys.c ****                     keys->client_write_IV, MAX_WRITE_IV_SZ);
3023:../src/src/keys.c ****         } else {
3024:../src/src/keys.c ****     #ifndef WOLFSSL_AEAD_ONLY
3025:../src/src/keys.c ****             XMEMCPY(ssl->keys.server_write_MAC_secret,
3026:../src/src/keys.c ****                     keys->server_write_MAC_secret, WC_MAX_DIGEST_SIZE);
3027:../src/src/keys.c ****     #endif
3028:../src/src/keys.c ****             XMEMCPY(ssl->keys.server_write_key,
3029:../src/src/keys.c ****                     keys->server_write_key, AES_256_KEY_SIZE);
3030:../src/src/keys.c ****             XMEMCPY(ssl->keys.server_write_IV,
3031:../src/src/keys.c ****                     keys->server_write_IV, MAX_WRITE_IV_SZ);
3032:../src/src/keys.c ****         }
3033:../src/src/keys.c ****         if (wc_encrypt) {
3034:../src/src/keys.c ****             ssl->keys.sequence_number_hi = keys->sequence_number_hi;
3035:../src/src/keys.c ****             ssl->keys.sequence_number_lo = keys->sequence_number_lo;
3036:../src/src/keys.c ****             #ifdef HAVE_AEAD
3037:../src/src/keys.c ****                 if (ssl->specs.cipher_type == aead) {
3038:../src/src/keys.c ****                     /* Initialize the AES-GCM/CCM explicit IV to a zero. */
3039:../src/src/keys.c ****                     XMEMCPY(ssl->keys.aead_exp_IV, keys->aead_exp_IV,
3040:../src/src/keys.c ****                             AEAD_MAX_EXP_SZ);
3041:../src/src/keys.c **** 
3042:../src/src/keys.c ****                     /* Initialize encrypt implicit IV by encrypt side */
3043:../src/src/keys.c ****                     if (ssl->options.side == WOLFSSL_CLIENT_END) {
3044:../src/src/keys.c ****                         XMEMCPY(ssl->keys.aead_enc_imp_IV,
3045:../src/src/keys.c ****                                 keys->client_write_IV, AEAD_MAX_IMP_SZ);
3046:../src/src/keys.c ****                     } else {
3047:../src/src/keys.c ****                         XMEMCPY(ssl->keys.aead_enc_imp_IV,
3048:../src/src/keys.c ****                                 keys->server_write_IV, AEAD_MAX_IMP_SZ);
3049:../src/src/keys.c ****                     }
3050:../src/src/keys.c ****                 }
3051:../src/src/keys.c ****             #endif
3052:../src/src/keys.c ****         }
3053:../src/src/keys.c ****         if (wc_decrypt) {
3054:../src/src/keys.c ****             ssl->keys.peer_sequence_number_hi = keys->peer_sequence_number_hi;
3055:../src/src/keys.c ****             ssl->keys.peer_sequence_number_lo = keys->peer_sequence_number_lo;
3056:../src/src/keys.c ****             #ifdef HAVE_AEAD
3057:../src/src/keys.c ****                 if (ssl->specs.cipher_type == aead) {
3058:../src/src/keys.c ****                     /* Initialize decrypt implicit IV by decrypt side */
3059:../src/src/keys.c ****                     if (ssl->options.side == WOLFSSL_SERVER_END) {
3060:../src/src/keys.c ****                         XMEMCPY(ssl->keys.aead_dec_imp_IV,
3061:../src/src/keys.c ****                                 keys->client_write_IV, AEAD_MAX_IMP_SZ);
3062:../src/src/keys.c ****                     } else {
3063:../src/src/keys.c ****                         XMEMCPY(ssl->keys.aead_dec_imp_IV,
3064:../src/src/keys.c ****                                 keys->server_write_IV, AEAD_MAX_IMP_SZ);
3065:../src/src/keys.c ****                     }
3066:../src/src/keys.c ****                 }
3067:../src/src/keys.c ****             #endif
3068:../src/src/keys.c ****         }
3069:../src/src/keys.c ****         CacheStatusPP(ssl->secure_renegotiation);
3070:../src/src/keys.c ****     }
3071:../src/src/keys.c **** #endif /* HAVE_SECURE_RENEGOTIATION */
3072:../src/src/keys.c **** 
3073:../src/src/keys.c ****     return ret;
 2591                             		.loc 1 3073 12
 2592 00af ED A5 04                		mov.L	16[r10], r5
 2593                             	.L121:
3074:../src/src/keys.c **** }
 2594                             		.loc 1 3074 1
 2595 00b2 EF 51                   		mov.L	r5, r1
 2596 00b4 71 00 30                		add	#48, r0
 2597 00b7 7E B6                   		pop	r6
 2598 00b9 7E BA                   		pop	r10
 2599 00bb 02                      		rts
 2600                             	.LFE4:
 2602                             		.section	.text.StoreKeys,"ax",@progbits
 2603                             		.global	_StoreKeys
 2605                             	_StoreKeys:
 2606                             	.LFB5:
3075:../src/src/keys.c **** 
3076:../src/src/keys.c **** 
3077:../src/src/keys.c **** /* TLS can call too */
3078:../src/src/keys.c **** int StoreKeys(WOLFSSL* ssl, const byte* keyData, int side)
3079:../src/src/keys.c **** {
 2607                             		.loc 1 3079 1
 2608 0000 7E AA                   		push.l	r10
 2609                             	.LCFI12:
 2610 0002 71 0A E8                		add	#-24, r0, r10
 2611                             	.LCFI13:
 2612 0005 EF A0                   		mov.L	r10, r0
 2613 0007 E7 A1 03                		mov.L	r1, 12[r10]
 2614 000a E7 A2 04                		mov.L	r2, 16[r10]
 2615 000d E7 A3 05                		mov.L	r3, 20[r10]
3080:../src/src/keys.c ****     int sz, i = 0;
 2616                             		.loc 1 3080 13
 2617 0010 F8 A6 00                		mov.L	#0, [r10]
3081:../src/src/keys.c ****     Keys* keys = &ssl->keys;
 2618                             		.loc 1 3081 11
 2619 0013 ED A5 03                		mov.L	12[r10], r5
 2620 0016 72 55 74 01             		add	#0x174, r5
 2621 001a E7 A5 01                		mov.L	r5, 4[r10]
3082:../src/src/keys.c **** #ifdef WOLFSSL_DTLS
3083:../src/src/keys.c ****     /* In case of DTLS, ssl->keys is updated here */
3084:../src/src/keys.c ****     int scr_copy = 0;
3085:../src/src/keys.c **** #endif
3086:../src/src/keys.c **** 
3087:../src/src/keys.c **** #ifdef HAVE_SECURE_RENEGOTIATION
3088:../src/src/keys.c ****     if (ssl->secure_renegotiation &&
3089:../src/src/keys.c ****             ssl->secure_renegotiation->cache_status == SCR_CACHE_NEEDED) {
3090:../src/src/keys.c ****         keys = &ssl->secure_renegotiation->tmp_keys;
3091:../src/src/keys.c **** #ifdef WOLFSSL_DTLS
3092:../src/src/keys.c ****         if (ssl->options.dtls) {
3093:../src/src/keys.c ****             /* epoch is incremented after StoreKeys is called */
3094:../src/src/keys.c ****             ssl->secure_renegotiation->tmp_keys.dtls_epoch = ssl->keys.dtls_epoch + 1;
3095:../src/src/keys.c ****             /* we only need to copy keys on second and future renegotiations */
3096:../src/src/keys.c ****             if (ssl->keys.dtls_epoch > 1)
3097:../src/src/keys.c ****                 scr_copy = 1;
3098:../src/src/keys.c ****             ssl->encrypt.src = KEYS_NOT_SET;
3099:../src/src/keys.c ****             ssl->decrypt.src = KEYS_NOT_SET;
3100:../src/src/keys.c ****         }
3101:../src/src/keys.c **** #endif
3102:../src/src/keys.c ****         CacheStatusPP(ssl->secure_renegotiation);
3103:../src/src/keys.c ****     }
3104:../src/src/keys.c **** #endif /* HAVE_SECURE_RENEGOTIATION */
3105:../src/src/keys.c **** 
3106:../src/src/keys.c **** #ifdef WOLFSSL_MULTICAST
3107:../src/src/keys.c ****     if (ssl->options.haveMcast) {
3108:../src/src/keys.c ****         /* Use the same keys for encrypt and decrypt. */
3109:../src/src/keys.c ****         if (ssl->specs.cipher_type != aead) {
3110:../src/src/keys.c ****             sz = ssl->specs.hash_size;
3111:../src/src/keys.c ****     #ifndef WOLFSSL_AEAD_ONLY
3112:../src/src/keys.c **** 
3113:../src/src/keys.c ****     #ifdef WOLFSSL_DTLS
3114:../src/src/keys.c ****             if (scr_copy) {
3115:../src/src/keys.c ****                 XMEMCPY(ssl->keys.client_write_MAC_secret,
3116:../src/src/keys.c ****                         keys->client_write_MAC_secret, sz);
3117:../src/src/keys.c ****                 XMEMCPY(ssl->keys.server_write_MAC_secret,
3118:../src/src/keys.c ****                         keys->server_write_MAC_secret, sz);
3119:../src/src/keys.c ****             }
3120:../src/src/keys.c ****     #endif
3121:../src/src/keys.c ****             XMEMCPY(keys->client_write_MAC_secret,&keyData[i], sz);
3122:../src/src/keys.c ****             XMEMCPY(keys->server_write_MAC_secret,&keyData[i], sz);
3123:../src/src/keys.c ****     #endif
3124:../src/src/keys.c ****             i += sz;
3125:../src/src/keys.c ****         }
3126:../src/src/keys.c ****         sz = ssl->specs.key_size;
3127:../src/src/keys.c ****     #ifdef WOLFSSL_DTLS
3128:../src/src/keys.c ****         if (scr_copy) {
3129:../src/src/keys.c ****             XMEMCPY(ssl->keys.client_write_key,
3130:../src/src/keys.c ****                     keys->client_write_key, sz);
3131:../src/src/keys.c ****             XMEMCPY(ssl->keys.server_write_key,
3132:../src/src/keys.c ****                     keys->server_write_key, sz);
3133:../src/src/keys.c ****         }
3134:../src/src/keys.c ****     #endif
3135:../src/src/keys.c ****         XMEMCPY(keys->client_write_key, &keyData[i], sz);
3136:../src/src/keys.c ****         XMEMCPY(keys->server_write_key, &keyData[i], sz);
3137:../src/src/keys.c ****         i += sz;
3138:../src/src/keys.c **** 
3139:../src/src/keys.c ****         sz = ssl->specs.iv_size;
3140:../src/src/keys.c ****     #ifdef WOLFSSL_DTLS
3141:../src/src/keys.c ****         if (scr_copy) {
3142:../src/src/keys.c ****             XMEMCPY(ssl->keys.client_write_IV,
3143:../src/src/keys.c ****                     keys->client_write_IV, sz);
3144:../src/src/keys.c ****             XMEMCPY(ssl->keys.server_write_IV,
3145:../src/src/keys.c ****                     keys->server_write_IV, sz);
3146:../src/src/keys.c ****         }
3147:../src/src/keys.c ****     #endif
3148:../src/src/keys.c ****         XMEMCPY(keys->client_write_IV, &keyData[i], sz);
3149:../src/src/keys.c ****         XMEMCPY(keys->server_write_IV, &keyData[i], sz);
3150:../src/src/keys.c **** 
3151:../src/src/keys.c **** #ifdef HAVE_AEAD
3152:../src/src/keys.c ****         if (ssl->specs.cipher_type == aead) {
3153:../src/src/keys.c ****             /* Initialize the AES-GCM/CCM explicit IV to a zero. */
3154:../src/src/keys.c ****         #ifdef WOLFSSL_DTLS
3155:../src/src/keys.c ****             if (scr_copy) {
3156:../src/src/keys.c ****                 XMEMCPY(ssl->keys.aead_exp_IV,
3157:../src/src/keys.c ****                         keys->aead_exp_IV, AEAD_MAX_EXP_SZ);
3158:../src/src/keys.c ****             }
3159:../src/src/keys.c ****         #endif
3160:../src/src/keys.c ****             XMEMSET(keys->aead_exp_IV, 0, AEAD_MAX_EXP_SZ);
3161:../src/src/keys.c ****         }
3162:../src/src/keys.c **** #endif /* HAVE_AEAD */
3163:../src/src/keys.c **** 
3164:../src/src/keys.c ****         return 0;
3165:../src/src/keys.c ****     }
3166:../src/src/keys.c **** #endif /* WOLFSSL_MULTICAST */
3167:../src/src/keys.c **** 
3168:../src/src/keys.c ****     if (ssl->specs.cipher_type != aead) {
 2622                             		.loc 1 3168 19
 2623 001d ED A5 03                		mov.L	12[r10], r5
 2624 0020 CE 55 6D 01             		mov.B	365[r5], r5
 2625                             		.loc 1 3168 8
 2626 0024 5B 55                   		movu.B	r5, r5
 2627 0026 61 25                   		cmp	#2, r5
 2628 0028 20 5D                   		beq	.L123
3169:../src/src/keys.c ****         sz = ssl->specs.hash_size;
 2629                             		.loc 1 3169 24
 2630 002a ED A5 03                		mov.L	12[r10], r5
 2631 002d CE 55 71 01             		mov.B	369[r5], r5
 2632                             		.loc 1 3169 12
 2633 0031 5B 55                   		movu.B	r5, r5
 2634 0033 E7 A5 02                		mov.L	r5, 8[r10]
3170:../src/src/keys.c ****         if (side & PROVISION_CLIENT) {
 2635                             		.loc 1 3170 18
 2636 0036 ED A5 05                		mov.L	20[r10], r5
 2637 0039 64 15                   		and	#1, r5
 2638                             		.loc 1 3170 12
 2639 003b 61 05                   		cmp	#0, r5
 2640 003d 20 1F                   		beq	.L124
3171:../src/src/keys.c ****     #ifndef WOLFSSL_AEAD_ONLY
3172:../src/src/keys.c ****         #ifdef WOLFSSL_DTLS
3173:../src/src/keys.c ****             if (scr_copy)
3174:../src/src/keys.c ****                 XMEMCPY(ssl->keys.client_write_MAC_secret,
3175:../src/src/keys.c ****                         keys->client_write_MAC_secret, sz);
3176:../src/src/keys.c ****         #endif
3177:../src/src/keys.c ****             XMEMCPY(keys->client_write_MAC_secret,&keyData[i], sz);
 2641                             		.loc 1 3177 13
 2642 003f ED A1 01                		mov.L	4[r10], r1
 2643 0042 EC A5                   		mov.L	[r10], r5
 2644 0044 ED A4 04                		mov.L	16[r10], r4
 2645 0047 4B 45                   		add	r4, r5
 2646 0049 ED A4 02                		mov.L	8[r10], r4
 2647 004c EF 43                   		mov.L	r4, r3
 2648 004e EF 52                   		mov.L	r5, r2
 2649 0050 05 00 00 00             		bsr	_memcpy
3178:../src/src/keys.c ****     #endif
3179:../src/src/keys.c ****             i += sz;
 2650                             		.loc 1 3179 15
 2651 0054 EC A5                   		mov.L	[r10], r5
 2652 0056 06 89 A5 02             		add	8[r10].L, r5
 2653 005a E3 A5                   		mov.L	r5, [r10]
 2654                             	.L124:
3180:../src/src/keys.c ****         }
3181:../src/src/keys.c ****         if (side & PROVISION_SERVER) {
 2655                             		.loc 1 3181 18
 2656 005c ED A5 05                		mov.L	20[r10], r5
 2657 005f 64 25                   		and	#2, r5
 2658                             		.loc 1 3181 12
 2659 0061 61 05                   		cmp	#0, r5
 2660 0063 20 22                   		beq	.L123
3182:../src/src/keys.c ****     #ifndef WOLFSSL_AEAD_ONLY
3183:../src/src/keys.c ****         #ifdef WOLFSSL_DTLS
3184:../src/src/keys.c ****             if (scr_copy)
3185:../src/src/keys.c ****                 XMEMCPY(ssl->keys.server_write_MAC_secret,
3186:../src/src/keys.c ****                         keys->server_write_MAC_secret, sz);
3187:../src/src/keys.c ****         #endif
3188:../src/src/keys.c ****             XMEMCPY(keys->server_write_MAC_secret,&keyData[i], sz);
 2661                             		.loc 1 3188 13
 2662 0065 ED A5 01                		mov.L	4[r10], r5
 2663 0068 71 51 40                		add	#0x40, r5, r1
 2664 006b EC A5                   		mov.L	[r10], r5
 2665 006d ED A4 04                		mov.L	16[r10], r4
 2666 0070 4B 45                   		add	r4, r5
 2667 0072 ED A4 02                		mov.L	8[r10], r4
 2668 0075 EF 43                   		mov.L	r4, r3
 2669 0077 EF 52                   		mov.L	r5, r2
 2670 0079 05 00 00 00             		bsr	_memcpy
3189:../src/src/keys.c ****     #endif
3190:../src/src/keys.c ****             i += sz;
 2671                             		.loc 1 3190 15
 2672 007d EC A5                   		mov.L	[r10], r5
 2673 007f 06 89 A5 02             		add	8[r10].L, r5
 2674 0083 E3 A5                   		mov.L	r5, [r10]
 2675                             	.L123:
3191:../src/src/keys.c ****         }
3192:../src/src/keys.c ****     }
3193:../src/src/keys.c ****     sz = ssl->specs.key_size;
 2676                             		.loc 1 3193 20
 2677 0085 ED A5 03                		mov.L	12[r10], r5
 2678 0088 DD 55 B2                		mov.W	356[r5], r5
 2679                             		.loc 1 3193 8
 2680 008b 5F 55                   		movu.W	r5, r5
 2681 008d E7 A5 02                		mov.L	r5, 8[r10]
3194:../src/src/keys.c ****     if (side & PROVISION_CLIENT) {
 2682                             		.loc 1 3194 14
 2683 0090 ED A5 05                		mov.L	20[r10], r5
 2684 0093 64 15                   		and	#1, r5
 2685                             		.loc 1 3194 8
 2686 0095 61 05                   		cmp	#0, r5
 2687 0097 20 23                   		beq	.L125
3195:../src/src/keys.c ****     #ifdef WOLFSSL_DTLS
3196:../src/src/keys.c ****         if (scr_copy)
3197:../src/src/keys.c ****             XMEMCPY(ssl->keys.client_write_key,
3198:../src/src/keys.c ****                     keys->client_write_key, sz);
3199:../src/src/keys.c ****     #endif
3200:../src/src/keys.c ****         XMEMCPY(keys->client_write_key, &keyData[i], sz);
 2688                             		.loc 1 3200 9
 2689 0099 ED A5 01                		mov.L	4[r10], r5
 2690 009c 72 51 80 00             		add	#0x80, r5, r1
 2691 00a0 EC A5                   		mov.L	[r10], r5
 2692 00a2 ED A4 04                		mov.L	16[r10], r4
 2693 00a5 4B 45                   		add	r4, r5
 2694 00a7 ED A4 02                		mov.L	8[r10], r4
 2695 00aa EF 43                   		mov.L	r4, r3
 2696 00ac EF 52                   		mov.L	r5, r2
 2697 00ae 05 00 00 00             		bsr	_memcpy
3201:../src/src/keys.c ****         i += sz;
 2698                             		.loc 1 3201 11
 2699 00b2 EC A5                   		mov.L	[r10], r5
 2700 00b4 06 89 A5 02             		add	8[r10].L, r5
 2701 00b8 E3 A5                   		mov.L	r5, [r10]
 2702                             	.L125:
3202:../src/src/keys.c ****     }
3203:../src/src/keys.c ****     if (side & PROVISION_SERVER) {
 2703                             		.loc 1 3203 14
 2704 00ba ED A5 05                		mov.L	20[r10], r5
 2705 00bd 64 25                   		and	#2, r5
 2706                             		.loc 1 3203 8
 2707 00bf 61 05                   		cmp	#0, r5
 2708 00c1 20 23                   		beq	.L126
3204:../src/src/keys.c ****     #ifdef WOLFSSL_DTLS
3205:../src/src/keys.c ****         if (scr_copy)
3206:../src/src/keys.c ****             XMEMCPY(ssl->keys.server_write_key,
3207:../src/src/keys.c ****                     keys->server_write_key, sz);
3208:../src/src/keys.c ****     #endif
3209:../src/src/keys.c ****         XMEMCPY(keys->server_write_key, &keyData[i], sz);
 2709                             		.loc 1 3209 9
 2710 00c3 ED A5 01                		mov.L	4[r10], r5
 2711 00c6 72 51 A0 00             		add	#0xa0, r5, r1
 2712 00ca EC A5                   		mov.L	[r10], r5
 2713 00cc ED A4 04                		mov.L	16[r10], r4
 2714 00cf 4B 45                   		add	r4, r5
 2715 00d1 ED A4 02                		mov.L	8[r10], r4
 2716 00d4 EF 43                   		mov.L	r4, r3
 2717 00d6 EF 52                   		mov.L	r5, r2
 2718 00d8 05 00 00 00             		bsr	_memcpy
3210:../src/src/keys.c ****         i += sz;
 2719                             		.loc 1 3210 11
 2720 00dc EC A5                   		mov.L	[r10], r5
 2721 00de 06 89 A5 02             		add	8[r10].L, r5
 2722 00e2 E3 A5                   		mov.L	r5, [r10]
 2723                             	.L126:
3211:../src/src/keys.c ****     }
3212:../src/src/keys.c **** 
3213:../src/src/keys.c ****     sz = ssl->specs.iv_size;
 2724                             		.loc 1 3213 20
 2725 00e4 ED A5 03                		mov.L	12[r10], r5
 2726 00e7 DD 55 B3                		mov.W	358[r5], r5
 2727                             		.loc 1 3213 8
 2728 00ea 5F 55                   		movu.W	r5, r5
 2729 00ec E7 A5 02                		mov.L	r5, 8[r10]
3214:../src/src/keys.c ****     if (side & PROVISION_CLIENT) {
 2730                             		.loc 1 3214 14
 2731 00ef ED A5 05                		mov.L	20[r10], r5
 2732 00f2 64 15                   		and	#1, r5
 2733                             		.loc 1 3214 8
 2734 00f4 61 05                   		cmp	#0, r5
 2735 00f6 20 23                   		beq	.L127
3215:../src/src/keys.c ****     #ifdef WOLFSSL_DTLS
3216:../src/src/keys.c ****         if (scr_copy)
3217:../src/src/keys.c ****             XMEMCPY(ssl->keys.client_write_IV,
3218:../src/src/keys.c ****                     keys->client_write_IV, sz);
3219:../src/src/keys.c ****     #endif
3220:../src/src/keys.c ****         XMEMCPY(keys->client_write_IV, &keyData[i], sz);
 2736                             		.loc 1 3220 9
 2737 00f8 ED A5 01                		mov.L	4[r10], r5
 2738 00fb 72 51 C0 00             		add	#0xc0, r5, r1
 2739 00ff EC A5                   		mov.L	[r10], r5
 2740 0101 ED A4 04                		mov.L	16[r10], r4
 2741 0104 4B 45                   		add	r4, r5
 2742 0106 ED A4 02                		mov.L	8[r10], r4
 2743 0109 EF 43                   		mov.L	r4, r3
 2744 010b EF 52                   		mov.L	r5, r2
 2745 010d 05 00 00 00             		bsr	_memcpy
3221:../src/src/keys.c ****         i += sz;
 2746                             		.loc 1 3221 11
 2747 0111 EC A5                   		mov.L	[r10], r5
 2748 0113 06 89 A5 02             		add	8[r10].L, r5
 2749 0117 E3 A5                   		mov.L	r5, [r10]
 2750                             	.L127:
3222:../src/src/keys.c ****     }
3223:../src/src/keys.c ****     if (side & PROVISION_SERVER) {
 2751                             		.loc 1 3223 14
 2752 0119 ED A5 05                		mov.L	20[r10], r5
 2753 011c 64 25                   		and	#2, r5
 2754                             		.loc 1 3223 8
 2755 011e 61 05                   		cmp	#0, r5
 2756 0120 20 1B                   		beq	.L128
3224:../src/src/keys.c ****     #ifdef WOLFSSL_DTLS
3225:../src/src/keys.c ****         if (scr_copy)
3226:../src/src/keys.c ****             XMEMCPY(ssl->keys.server_write_IV,
3227:../src/src/keys.c ****                     keys->server_write_IV, sz);
3228:../src/src/keys.c ****     #endif
3229:../src/src/keys.c ****         XMEMCPY(keys->server_write_IV, &keyData[i], sz);
 2757                             		.loc 1 3229 9
 2758 0122 ED A5 01                		mov.L	4[r10], r5
 2759 0125 72 51 D0 00             		add	#0xd0, r5, r1
 2760 0129 EC A5                   		mov.L	[r10], r5
 2761 012b ED A4 04                		mov.L	16[r10], r4
 2762 012e 4B 45                   		add	r4, r5
 2763 0130 ED A4 02                		mov.L	8[r10], r4
 2764 0133 EF 43                   		mov.L	r4, r3
 2765 0135 EF 52                   		mov.L	r5, r2
 2766 0137 05 00 00 00             		bsr	_memcpy
 2767                             	.L128:
3230:../src/src/keys.c ****     }
3231:../src/src/keys.c **** 
3232:../src/src/keys.c **** #ifdef HAVE_AEAD
3233:../src/src/keys.c ****     if (ssl->specs.cipher_type == aead) {
 2768                             		.loc 1 3233 19
 2769 013b ED A5 03                		mov.L	12[r10], r5
 2770 013e CE 55 6D 01             		mov.B	365[r5], r5
 2771                             		.loc 1 3233 8
 2772 0142 5B 55                   		movu.B	r5, r5
 2773 0144 61 25                   		cmp	#2, r5
 2774 0146 21 13                   		bne	.L129
3234:../src/src/keys.c ****         /* Initialize the AES-GCM/CCM explicit IV to a zero. */
3235:../src/src/keys.c ****     #ifdef WOLFSSL_DTLS
3236:../src/src/keys.c ****         if (scr_copy)
3237:../src/src/keys.c ****             XMEMMOVE(ssl->keys.aead_exp_IV,
3238:../src/src/keys.c ****                     keys->aead_exp_IV, AEAD_MAX_EXP_SZ);
3239:../src/src/keys.c ****     #endif
3240:../src/src/keys.c ****         XMEMSET(keys->aead_exp_IV, 0, AEAD_MAX_EXP_SZ);
 2775                             		.loc 1 3240 9
 2776 0148 ED A5 01                		mov.L	4[r10], r5
 2777 014b 72 55 E0 00             		add	#0xe0, r5
 2778 014f 66 83                   		mov.L	#8, r3
 2779 0151 66 02                   		mov.L	#0, r2
 2780 0153 EF 51                   		mov.L	r5, r1
 2781 0155 05 00 00 00             		bsr	_memset
 2782                             	.L129:
3241:../src/src/keys.c ****     }
3242:../src/src/keys.c **** #endif
3243:../src/src/keys.c **** 
3244:../src/src/keys.c ****     return 0;
 2783                             		.loc 1 3244 12
 2784 0159 66 05                   		mov.L	#0, r5
3245:../src/src/keys.c **** }
 2785                             		.loc 1 3245 1
 2786 015b EF 51                   		mov.L	r5, r1
 2787 015d 3F AA 07                		rtsd	#28, r10-r10
 2788                             	.LFE5:
 2790                             		.section	.text.DeriveKeys,"ax",@progbits
 2791                             		.global	_DeriveKeys
 2793                             	_DeriveKeys:
 2794                             	.LFB6:
3246:../src/src/keys.c **** 
3247:../src/src/keys.c **** #ifndef NO_OLD_TLS
3248:../src/src/keys.c **** int DeriveKeys(WOLFSSL* ssl)
3249:../src/src/keys.c **** {
 2795                             		.loc 1 3249 1
 2796 0000 7E AA                   		push.l	r10
 2797                             	.LCFI14:
 2798 0002 71 0A 9C                		add	#-100, r0, r10
 2799                             	.LCFI15:
 2800 0005 EF A0                   		mov.L	r10, r0
 2801 0007 E7 A1 18                		mov.L	r1, 96[r10]
3250:../src/src/keys.c ****     int    length = 2 * ssl->specs.hash_size +
 2802                             		.loc 1 3250 35
 2803 000a ED A5 18                		mov.L	96[r10], r5
 2804 000d CE 55 71 01             		mov.B	369[r5], r5
 2805 0011 5B 54                   		movu.B	r5, r4
3251:../src/src/keys.c ****                     2 * ssl->specs.key_size  +
 2806                             		.loc 1 3251 35
 2807 0013 ED A5 18                		mov.L	96[r10], r5
 2808 0016 DD 55 B2                		mov.W	356[r5], r5
 2809 0019 5F 55                   		movu.W	r5, r5
3250:../src/src/keys.c ****     int    length = 2 * ssl->specs.hash_size +
 2810                             		.loc 1 3250 46
 2811 001b 4B 54                   		add	r5, r4
3252:../src/src/keys.c ****                     2 * ssl->specs.iv_size;
 2812                             		.loc 1 3252 35
 2813 001d ED A5 18                		mov.L	96[r10], r5
 2814 0020 DD 55 B3                		mov.W	358[r5], r5
 2815 0023 5F 55                   		movu.W	r5, r5
3251:../src/src/keys.c ****                     2 * ssl->specs.key_size  +
 2816                             		.loc 1 3251 46
 2817 0025 4B 45                   		add	r4, r5
3250:../src/src/keys.c ****     int    length = 2 * ssl->specs.hash_size +
 2818                             		.loc 1 3250 12
 2819 0027 4B 55                   		add	r5, r5
 2820 0029 E7 A5 02                		mov.L	r5, 8[r10]
3253:../src/src/keys.c ****     int    rounds = (length + WC_MD5_DIGEST_SIZE - 1 ) / WC_MD5_DIGEST_SIZE, i;
 2821                             		.loc 1 3253 50
 2822 002c ED A5 02                		mov.L	8[r10], r5
 2823 002f 62 F5                   		add	#15, r5
 2824                             		.loc 1 3253 12
 2825 0031 61 05                   		cmp	#0, r5
 2826 0033 28 04                   		bge	.L132
 2827 0035 62 F5                   		add	#15, r5
 2828                             	.L132:
 2829 0037 6A 45                   		shar	#4, r5
 2830 0039 E7 A5 03                		mov.L	r5, 12[r10]
3254:../src/src/keys.c ****     int    ret = 0;
 2831                             		.loc 1 3254 12
 2832 003c F9 A6 01 00             		mov.L	#0, 4[r10]
3255:../src/src/keys.c **** 
3256:../src/src/keys.c **** #ifdef WOLFSSL_SMALL_STACK
3257:../src/src/keys.c ****     byte*  shaOutput;
3258:../src/src/keys.c ****     byte*  md5Input;
3259:../src/src/keys.c ****     byte*  shaInput;
3260:../src/src/keys.c ****     byte*  keyData;
3261:../src/src/keys.c ****     wc_Md5* md5;
3262:../src/src/keys.c ****     wc_Sha* sha;
3263:../src/src/keys.c **** #else
3264:../src/src/keys.c ****     byte   shaOutput[WC_SHA_DIGEST_SIZE];
3265:../src/src/keys.c ****     byte   md5Input[SECRET_LEN + WC_SHA_DIGEST_SIZE];
3266:../src/src/keys.c ****     byte   shaInput[KEY_PREFIX + SECRET_LEN + 2 * RAN_LEN];
3267:../src/src/keys.c ****     byte   keyData[KEY_PREFIX * WC_MD5_DIGEST_SIZE];
3268:../src/src/keys.c ****     wc_Md5 md5[1];
3269:../src/src/keys.c ****     wc_Sha sha[1];
3270:../src/src/keys.c **** #endif
3271:../src/src/keys.c **** 
3272:../src/src/keys.c **** #ifdef WOLFSSL_SMALL_STACK
3273:../src/src/keys.c ****     shaOutput = (byte*)XMALLOC(WC_SHA_DIGEST_SIZE,
 2833                             		.loc 1 3273 24
 2834 0040 75 41 14                		mov.L	#20, r1
 2835 0043 05 00 00 00             		bsr	_wolfSSL_Malloc
 2836 0047 E7 A1 04                		mov.L	r1, 16[r10]
3274:../src/src/keys.c ****                                             NULL, DYNAMIC_TYPE_TMP_BUFFER);
3275:../src/src/keys.c ****     md5Input  = (byte*)XMALLOC(SECRET_LEN + WC_SHA_DIGEST_SIZE,
 2837                             		.loc 1 3275 24
 2838 004a 75 41 44                		mov.L	#0x44, r1
 2839 004d 05 00 00 00             		bsr	_wolfSSL_Malloc
 2840 0051 E7 A1 05                		mov.L	r1, 20[r10]
3276:../src/src/keys.c ****                                             NULL, DYNAMIC_TYPE_TMP_BUFFER);
3277:../src/src/keys.c ****     shaInput  = (byte*)XMALLOC(KEY_PREFIX + SECRET_LEN + 2 * RAN_LEN,
 2841                             		.loc 1 3277 24
 2842 0054 75 41 79                		mov.L	#0x79, r1
 2843 0057 05 00 00 00             		bsr	_wolfSSL_Malloc
 2844 005b E7 A1 06                		mov.L	r1, 24[r10]
3278:../src/src/keys.c ****                                             NULL, DYNAMIC_TYPE_TMP_BUFFER);
3279:../src/src/keys.c ****     keyData   = (byte*)XMALLOC(KEY_PREFIX * WC_MD5_DIGEST_SIZE,
 2845                             		.loc 1 3279 24
 2846 005e 75 41 90                		mov.L	#0x90, r1
 2847 0061 05 00 00 00             		bsr	_wolfSSL_Malloc
 2848 0065 E7 A1 07                		mov.L	r1, 28[r10]
3280:../src/src/keys.c ****                                             NULL, DYNAMIC_TYPE_TMP_BUFFER);
3281:../src/src/keys.c ****     md5       =  (wc_Md5*)XMALLOC(sizeof(wc_Md5), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 2849                             		.loc 1 3281 27
 2850 0068 75 41 60                		mov.L	#0x60, r1
 2851 006b 05 00 00 00             		bsr	_wolfSSL_Malloc
 2852 006f E7 A1 08                		mov.L	r1, 32[r10]
3282:../src/src/keys.c ****     sha       =  (wc_Sha*)XMALLOC(sizeof(wc_Sha), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 2853                             		.loc 1 3282 27
 2854 0072 75 41 64                		mov.L	#0x64, r1
 2855 0075 05 00 00 00             		bsr	_wolfSSL_Malloc
 2856 0079 E7 A1 09                		mov.L	r1, 36[r10]
3283:../src/src/keys.c **** 
3284:../src/src/keys.c ****     if (shaOutput == NULL || md5Input == NULL || shaInput == NULL ||
 2857                             		.loc 1 3284 8
 2858 007c ED A5 04                		mov.L	16[r10], r5
 2859 007f 61 05                   		cmp	#0, r5
 2860 0081 20 25                   		beq	.L133
 2861                             		.loc 1 3284 27 discriminator 1
 2862 0083 ED A5 05                		mov.L	20[r10], r5
 2863 0086 61 05                   		cmp	#0, r5
 2864 0088 20 1E                   		beq	.L133
 2865                             		.loc 1 3284 47 discriminator 2
 2866 008a ED A5 06                		mov.L	24[r10], r5
 2867 008d 61 05                   		cmp	#0, r5
 2868 008f 20 17                   		beq	.L133
 2869                             		.loc 1 3284 67 discriminator 3
 2870 0091 ED A5 07                		mov.L	28[r10], r5
 2871 0094 61 05                   		cmp	#0, r5
 2872 0096 20 10                   		beq	.L133
3285:../src/src/keys.c ****         keyData   == NULL || md5      == NULL || sha      == NULL) {
 2873                             		.loc 1 3285 27
 2874 0098 ED A5 08                		mov.L	32[r10], r5
 2875 009b 61 05                   		cmp	#0, r5
 2876 009d 11                      		beq	.L133
 2877                             		.loc 1 3285 47 discriminator 1
 2878 009e ED A5 09                		mov.L	36[r10], r5
 2879 00a1 61 05                   		cmp	#0, r5
 2880 00a3 3B A5 00                		bne	.L134
 2881                             		.balign 8,3,1
 2882                             	.L133:
3286:../src/src/keys.c ****         if (shaOutput) XFREE(shaOutput, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 2883                             		.loc 1 3286 12
 2884 00a6 ED A5 04                		mov.L	16[r10], r5
 2885 00a9 61 05                   		cmp	#0, r5
 2886 00ab 20 15                   		beq	.L135
 2887                             	.LBB5:
 2888                             		.loc 1 3286 24 discriminator 1
 2889 00ad ED A5 04                		mov.L	16[r10], r5
 2890 00b0 E7 A5 12                		mov.L	r5, 72[r10]
 2891 00b3 ED A5 12                		mov.L	72[r10], r5
 2892 00b6 61 05                   		cmp	#0, r5
 2893 00b8 10                      		beq	.L135
 2894                             		.loc 1 3286 24 is_stmt 0 discriminator 2
 2895 00b9 ED A1 12                		mov.L	72[r10], r1
 2896 00bc 05 00 00 00             		bsr	_wolfSSL_Free
 2897                             	.L135:
 2898                             	.LBE5:
3287:../src/src/keys.c ****         if (md5Input)  XFREE(md5Input,  NULL, DYNAMIC_TYPE_TMP_BUFFER);
 2899                             		.loc 1 3287 12 is_stmt 1
 2900 00c0 ED A5 05                		mov.L	20[r10], r5
 2901 00c3 61 05                   		cmp	#0, r5
 2902 00c5 20 15                   		beq	.L136
 2903                             	.LBB6:
 2904                             		.loc 1 3287 24 discriminator 1
 2905 00c7 ED A5 05                		mov.L	20[r10], r5
 2906 00ca E7 A5 13                		mov.L	r5, 76[r10]
 2907 00cd ED A5 13                		mov.L	76[r10], r5
 2908 00d0 61 05                   		cmp	#0, r5
 2909 00d2 10                      		beq	.L136
 2910                             		.loc 1 3287 24 is_stmt 0 discriminator 2
 2911 00d3 ED A1 13                		mov.L	76[r10], r1
 2912 00d6 05 00 00 00             		bsr	_wolfSSL_Free
 2913                             	.L136:
 2914                             	.LBE6:
3288:../src/src/keys.c ****         if (shaInput)  XFREE(shaInput,  NULL, DYNAMIC_TYPE_TMP_BUFFER);
 2915                             		.loc 1 3288 12 is_stmt 1
 2916 00da ED A5 06                		mov.L	24[r10], r5
 2917 00dd 61 05                   		cmp	#0, r5
 2918 00df 20 15                   		beq	.L137
 2919                             	.LBB7:
 2920                             		.loc 1 3288 24 discriminator 1
 2921 00e1 ED A5 06                		mov.L	24[r10], r5
 2922 00e4 E7 A5 14                		mov.L	r5, 80[r10]
 2923 00e7 ED A5 14                		mov.L	80[r10], r5
 2924 00ea 61 05                   		cmp	#0, r5
 2925 00ec 10                      		beq	.L137
 2926                             		.loc 1 3288 24 is_stmt 0 discriminator 2
 2927 00ed ED A1 14                		mov.L	80[r10], r1
 2928 00f0 05 00 00 00             		bsr	_wolfSSL_Free
 2929                             	.L137:
 2930                             	.LBE7:
3289:../src/src/keys.c ****         if (keyData)   XFREE(keyData,   NULL, DYNAMIC_TYPE_TMP_BUFFER);
 2931                             		.loc 1 3289 12 is_stmt 1
 2932 00f4 ED A5 07                		mov.L	28[r10], r5
 2933 00f7 61 05                   		cmp	#0, r5
 2934 00f9 20 15                   		beq	.L138
 2935                             	.LBB8:
 2936                             		.loc 1 3289 24 discriminator 1
 2937 00fb ED A5 07                		mov.L	28[r10], r5
 2938 00fe E7 A5 15                		mov.L	r5, 84[r10]
 2939 0101 ED A5 15                		mov.L	84[r10], r5
 2940 0104 61 05                   		cmp	#0, r5
 2941 0106 10                      		beq	.L138
 2942                             		.loc 1 3289 24 is_stmt 0 discriminator 2
 2943 0107 ED A1 15                		mov.L	84[r10], r1
 2944 010a 05 00 00 00             		bsr	_wolfSSL_Free
 2945                             	.L138:
 2946                             	.LBE8:
3290:../src/src/keys.c ****         if (md5)       XFREE(md5,       NULL, DYNAMIC_TYPE_TMP_BUFFER);
 2947                             		.loc 1 3290 12 is_stmt 1
 2948 010e ED A5 08                		mov.L	32[r10], r5
 2949 0111 61 05                   		cmp	#0, r5
 2950 0113 20 15                   		beq	.L139
 2951                             	.LBB9:
 2952                             		.loc 1 3290 24 discriminator 1
 2953 0115 ED A5 08                		mov.L	32[r10], r5
 2954 0118 E7 A5 16                		mov.L	r5, 88[r10]
 2955 011b ED A5 16                		mov.L	88[r10], r5
 2956 011e 61 05                   		cmp	#0, r5
 2957 0120 10                      		beq	.L139
 2958                             		.loc 1 3290 24 is_stmt 0 discriminator 2
 2959 0121 ED A1 16                		mov.L	88[r10], r1
 2960 0124 05 00 00 00             		bsr	_wolfSSL_Free
 2961                             	.L139:
 2962                             	.LBE9:
3291:../src/src/keys.c ****         if (sha)       XFREE(sha,       NULL, DYNAMIC_TYPE_TMP_BUFFER);
 2963                             		.loc 1 3291 12 is_stmt 1
 2964 0128 ED A5 09                		mov.L	36[r10], r5
 2965 012b 61 05                   		cmp	#0, r5
 2966 012d 20 15                   		beq	.L140
 2967                             	.LBB10:
 2968                             		.loc 1 3291 24 discriminator 1
 2969 012f ED A5 09                		mov.L	36[r10], r5
 2970 0132 E7 A5 17                		mov.L	r5, 92[r10]
 2971 0135 ED A5 17                		mov.L	92[r10], r5
 2972 0138 61 05                   		cmp	#0, r5
 2973 013a 10                      		beq	.L140
 2974                             		.loc 1 3291 24 is_stmt 0 discriminator 2
 2975 013b ED A1 17                		mov.L	92[r10], r1
 2976 013e 05 00 00 00             		bsr	_wolfSSL_Free
 2977                             	.L140:
 2978                             	.LBE10:
3292:../src/src/keys.c **** 
3293:../src/src/keys.c ****         return MEMORY_E;
 2979                             		.loc 1 3293 16 is_stmt 1
 2980 0142 FB 56 83                		mov.L	#-125, r5
 2981 0145 38 E8 01                		bra	.L141
 2982                             	.L134:
3294:../src/src/keys.c ****     }
3295:../src/src/keys.c **** #endif
3296:../src/src/keys.c ****     XMEMSET(shaOutput, 0, WC_SHA_DIGEST_SIZE);
 2983                             		.loc 1 3296 5
 2984 0148 75 43 14                		mov.L	#20, r3
 2985 014b 66 02                   		mov.L	#0, r2
 2986 014d ED A1 04                		mov.L	16[r10], r1
 2987 0150 05 00 00 00             		bsr	_memset
3297:../src/src/keys.c ****     ret = wc_InitMd5(md5);
 2988                             		.loc 1 3297 11
 2989 0154 ED A1 08                		mov.L	32[r10], r1
 2990 0157 05 00 00 00             		bsr	_wc_InitMd5
 2991 015b E7 A1 01                		mov.L	r1, 4[r10]
3298:../src/src/keys.c ****     if (ret == 0) {
 2992                             		.loc 1 3298 8
 2993 015e ED A5 01                		mov.L	4[r10], r5
 2994 0161 61 05                   		cmp	#0, r5
 2995 0163 21 0C                   		bne	.L142
3299:../src/src/keys.c ****         ret = wc_InitSha(sha);
 2996                             		.loc 1 3299 15
 2997 0165 ED A1 09                		mov.L	36[r10], r1
 2998 0168 05 00 00 00             		bsr	_wc_InitSha
 2999 016c E7 A1 01                		mov.L	r1, 4[r10]
 3000                             	.L142:
3300:../src/src/keys.c ****     }
3301:../src/src/keys.c ****     if (ret == 0) {
 3001                             		.loc 1 3301 8
 3002 016f ED A5 01                		mov.L	4[r10], r5
 3003 0172 61 05                   		cmp	#0, r5
 3004 0174 3B 44 01                		bne	.L143
3302:../src/src/keys.c ****         XMEMCPY(md5Input, ssl->arrays->masterSecret, SECRET_LEN);
 3005                             		.loc 1 3302 9
 3006 0177 ED A5 18                		mov.L	96[r10], r5
 3007 017a A8 D5                   		mov.L	8[r5], r5
 3008 017c 72 55 BB 01             		add	#0x1bb, r5
 3009 0180 75 43 30                		mov.L	#48, r3
 3010 0183 EF 52                   		mov.L	r5, r2
 3011 0185 ED A1 05                		mov.L	20[r10], r1
 3012 0188 05 00 00 00             		bsr	_memcpy
3303:../src/src/keys.c **** 
3304:../src/src/keys.c ****         for (i = 0; i < rounds; ++i) {
 3013                             		.loc 1 3304 16
 3014 018c F8 A6 00                		mov.L	#0, [r10]
 3015                             		.loc 1 3304 9
 3016 018f 38 07 01                		bra	.L144
 3017                             	.L151:
 3018                             	.LBB11:
3305:../src/src/keys.c ****             int j   = i + 1;
 3019                             		.loc 1 3305 17
 3020 0192 EC A5                   		mov.L	[r10], r5
 3021 0194 62 15                   		add	#1, r5
 3022 0196 E7 A5 0A                		mov.L	r5, 40[r10]
3306:../src/src/keys.c ****             int idx = j;
 3023                             		.loc 1 3306 17
 3024 0199 ED A5 0A                		mov.L	40[r10], r5
 3025 019c E7 A5 0B                		mov.L	r5, 44[r10]
3307:../src/src/keys.c **** 
3308:../src/src/keys.c ****             if (!SetPrefix(shaInput, i)) {
 3026                             		.loc 1 3308 18
 3027 019f EC A2                   		mov.L	[r10], r2
 3028 01a1 ED A1 06                		mov.L	24[r10], r1
 3029 01a4 05 00 00 00             		bsr	_SetPrefix
 3030 01a8 EF 15                   		mov.L	r1, r5
 3031                             		.loc 1 3308 16
 3032 01aa 61 05                   		cmp	#0, r5
 3033 01ac 19                      		bne	.L145
3309:../src/src/keys.c ****                 ret = PREFIX_ERROR;
 3034                             		.loc 1 3309 21
 3035 01ad F9 AA 01 D2 FE          		mov.L	#-302, 4[r10]
3310:../src/src/keys.c ****                 break;
 3036                             		.loc 1 3310 17
 3037 01b2 38 F0 00                		bra	.L146
 3038                             	.L145:
3311:../src/src/keys.c ****             }
3312:../src/src/keys.c **** 
3313:../src/src/keys.c ****             XMEMCPY(shaInput + idx, ssl->arrays->masterSecret, SECRET_LEN);
 3039                             		.loc 1 3313 13
 3040 01b5 ED A5 0B                		mov.L	44[r10], r5
 3041 01b8 ED A4 06                		mov.L	24[r10], r4
 3042 01bb 4B 54                   		add	r5, r4
 3043 01bd ED A5 18                		mov.L	96[r10], r5
 3044 01c0 A8 D5                   		mov.L	8[r5], r5
 3045 01c2 72 55 BB 01             		add	#0x1bb, r5
 3046 01c6 75 43 30                		mov.L	#48, r3
 3047 01c9 EF 52                   		mov.L	r5, r2
 3048 01cb EF 41                   		mov.L	r4, r1
 3049 01cd 05 00 00 00             		bsr	_memcpy
3314:../src/src/keys.c ****             idx += SECRET_LEN;
 3050                             		.loc 1 3314 17
 3051 01d1 ED A5 0B                		mov.L	44[r10], r5
 3052 01d4 71 55 30                		add	#48, r5
 3053 01d7 E7 A5 0B                		mov.L	r5, 44[r10]
3315:../src/src/keys.c ****             XMEMCPY(shaInput + idx, ssl->arrays->serverRandom, RAN_LEN);
 3054                             		.loc 1 3315 13
 3055 01da ED A5 0B                		mov.L	44[r10], r5
 3056 01dd ED A4 06                		mov.L	24[r10], r4
 3057 01e0 4B 54                   		add	r5, r4
 3058 01e2 ED A5 18                		mov.L	96[r10], r5
 3059 01e5 A8 D5                   		mov.L	8[r5], r5
 3060 01e7 72 55 7A 01             		add	#0x17a, r5
 3061 01eb 75 43 20                		mov.L	#32, r3
 3062 01ee EF 52                   		mov.L	r5, r2
 3063 01f0 EF 41                   		mov.L	r4, r1
 3064 01f2 05 00 00 00             		bsr	_memcpy
3316:../src/src/keys.c ****             idx += RAN_LEN;
 3065                             		.loc 1 3316 17
 3066 01f6 ED A5 0B                		mov.L	44[r10], r5
 3067 01f9 71 55 20                		add	#32, r5
 3068 01fc E7 A5 0B                		mov.L	r5, 44[r10]
3317:../src/src/keys.c ****             XMEMCPY(shaInput + idx, ssl->arrays->clientRandom, RAN_LEN);
 3069                             		.loc 1 3317 13
 3070 01ff ED A5 0B                		mov.L	44[r10], r5
 3071 0202 ED A4 06                		mov.L	24[r10], r4
 3072 0205 4B 54                   		add	r5, r4
 3073 0207 ED A5 18                		mov.L	96[r10], r5
 3074 020a A8 D5                   		mov.L	8[r5], r5
 3075 020c 72 55 5A 01             		add	#0x15a, r5
 3076 0210 75 43 20                		mov.L	#32, r3
 3077 0213 EF 52                   		mov.L	r5, r2
 3078 0215 EF 41                   		mov.L	r4, r1
 3079 0217 05 00 00 00             		bsr	_memcpy
3318:../src/src/keys.c ****             if (ret == 0) {
 3080                             		.loc 1 3318 16
 3081 021b ED A5 01                		mov.L	4[r10], r5
 3082 021e 61 05                   		cmp	#0, r5
 3083 0220 21 17                   		bne	.L147
3319:../src/src/keys.c ****                 ret = wc_ShaUpdate(sha, shaInput,
3320:../src/src/keys.c ****                     (KEY_PREFIX + SECRET_LEN + 2 * RAN_LEN) - KEY_PREFIX + j);
 3084                             		.loc 1 3320 74
 3085 0222 ED A5 0A                		mov.L	40[r10], r5
 3086 0225 71 55 70                		add	#0x70, r5
3319:../src/src/keys.c ****                 ret = wc_ShaUpdate(sha, shaInput,
 3087                             		.loc 1 3319 23
 3088 0228 EF 53                   		mov.L	r5, r3
 3089 022a ED A2 06                		mov.L	24[r10], r2
 3090 022d ED A1 09                		mov.L	36[r10], r1
 3091 0230 05 00 00 00             		bsr	_wc_ShaUpdate
 3092 0234 E7 A1 01                		mov.L	r1, 4[r10]
 3093                             	.L147:
3321:../src/src/keys.c ****             }
3322:../src/src/keys.c ****             if (ret == 0) {
 3094                             		.loc 1 3322 16
 3095 0237 ED A5 01                		mov.L	4[r10], r5
 3096 023a 61 05                   		cmp	#0, r5
 3097 023c 21 0F                   		bne	.L148
3323:../src/src/keys.c ****                 ret = wc_ShaFinal(sha, shaOutput);
 3098                             		.loc 1 3323 23
 3099 023e ED A2 04                		mov.L	16[r10], r2
 3100 0241 ED A1 09                		mov.L	36[r10], r1
 3101 0244 05 00 00 00             		bsr	_wc_ShaFinal
 3102 0248 E7 A1 01                		mov.L	r1, 4[r10]
 3103                             	.L148:
3324:../src/src/keys.c ****             }
3325:../src/src/keys.c **** 
3326:../src/src/keys.c ****             XMEMCPY(md5Input + SECRET_LEN, shaOutput, WC_SHA_DIGEST_SIZE);
 3104                             		.loc 1 3326 13
 3105 024b ED A5 05                		mov.L	20[r10], r5
 3106 024e 71 55 30                		add	#48, r5
 3107 0251 75 43 14                		mov.L	#20, r3
 3108 0254 ED A2 04                		mov.L	16[r10], r2
 3109 0257 EF 51                   		mov.L	r5, r1
 3110 0259 05 00 00 00             		bsr	_memcpy
3327:../src/src/keys.c ****             if (ret == 0) {
 3111                             		.loc 1 3327 16
 3112 025d ED A5 01                		mov.L	4[r10], r5
 3113 0260 61 05                   		cmp	#0, r5
 3114 0262 21 12                   		bne	.L149
3328:../src/src/keys.c ****                 ret = wc_Md5Update(md5, md5Input, SECRET_LEN + WC_SHA_DIGEST_SIZE);
 3115                             		.loc 1 3328 23
 3116 0264 75 43 44                		mov.L	#0x44, r3
 3117 0267 ED A2 05                		mov.L	20[r10], r2
 3118 026a ED A1 08                		mov.L	32[r10], r1
 3119 026d 05 00 00 00             		bsr	_wc_Md5Update
 3120 0271 E7 A1 01                		mov.L	r1, 4[r10]
 3121                             	.L149:
3329:../src/src/keys.c ****             }
3330:../src/src/keys.c ****             if (ret == 0) {
 3122                             		.loc 1 3330 16
 3123 0274 ED A5 01                		mov.L	4[r10], r5
 3124 0277 61 05                   		cmp	#0, r5
 3125 0279 21 17                   		bne	.L150
3331:../src/src/keys.c ****                 ret = wc_Md5Final(md5, keyData + i * WC_MD5_DIGEST_SIZE);
 3126                             		.loc 1 3331 52
 3127 027b EC A5                   		mov.L	[r10], r5
 3128 027d 6C 45                   		shll	#4, r5
 3129                             		.loc 1 3331 23
 3130 027f ED A4 07                		mov.L	28[r10], r4
 3131 0282 4B 45                   		add	r4, r5
 3132 0284 EF 52                   		mov.L	r5, r2
 3133 0286 ED A1 08                		mov.L	32[r10], r1
 3134 0289 05 00 00 00             		bsr	_wc_Md5Final
 3135 028d E7 A1 01                		mov.L	r1, 4[r10]
 3136                             	.L150:
 3137                             	.LBE11:
3304:../src/src/keys.c ****             int j   = i + 1;
 3138                             		.loc 1 3304 33 discriminator 2
 3139 0290 EC A5                   		mov.L	[r10], r5
 3140 0292 62 15                   		add	#1, r5
 3141 0294 E3 A5                   		mov.L	r5, [r10]
 3142                             	.L144:
3304:../src/src/keys.c ****             int j   = i + 1;
 3143                             		.loc 1 3304 9 discriminator 1
 3144 0296 EC A4                   		mov.L	[r10], r4
 3145 0298 ED A5 03                		mov.L	12[r10], r5
 3146 029b 47 54                   		cmp	r5, r4
 3147 029d 28 05 38 F3 FE          		blt	.L151
 3148                             	.L146:
3332:../src/src/keys.c ****             }
3333:../src/src/keys.c ****         }
3334:../src/src/keys.c **** 
3335:../src/src/keys.c ****         if (ret == 0)
 3149                             		.loc 1 3335 12
 3150 02a2 ED A5 01                		mov.L	4[r10], r5
 3151 02a5 61 05                   		cmp	#0, r5
 3152 02a7 21 11                   		bne	.L143
3336:../src/src/keys.c ****             ret = StoreKeys(ssl, keyData, PROVISION_CLIENT_SERVER);
 3153                             		.loc 1 3336 19
 3154 02a9 66 33                   		mov.L	#3, r3
 3155 02ab ED A2 07                		mov.L	28[r10], r2
 3156 02ae ED A1 18                		mov.L	96[r10], r1
 3157 02b1 05 00 00 00             		bsr	_StoreKeys
 3158 02b5 E7 A1 01                		mov.L	r1, 4[r10]
 3159                             	.L143:
 3160                             	.LBB12:
3337:../src/src/keys.c ****     }
3338:../src/src/keys.c **** 
3339:../src/src/keys.c **** #ifdef WOLFSSL_SMALL_STACK
3340:../src/src/keys.c ****     XFREE(shaOutput, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3161                             		.loc 1 3340 5
 3162 02b8 ED A5 04                		mov.L	16[r10], r5
 3163 02bb E7 A5 0C                		mov.L	r5, 48[r10]
 3164 02be ED A5 0C                		mov.L	48[r10], r5
 3165 02c1 61 05                   		cmp	#0, r5
 3166 02c3 10                      		beq	.L152
 3167                             		.loc 1 3340 5 is_stmt 0 discriminator 1
 3168 02c4 ED A1 0C                		mov.L	48[r10], r1
 3169 02c7 05 00 00 00             		bsr	_wolfSSL_Free
 3170                             	.L152:
 3171                             	.LBE12:
 3172                             	.LBB13:
3341:../src/src/keys.c ****     XFREE(md5Input,  NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3173                             		.loc 1 3341 5 is_stmt 1
 3174 02cb ED A5 05                		mov.L	20[r10], r5
 3175 02ce E7 A5 0D                		mov.L	r5, 52[r10]
 3176 02d1 ED A5 0D                		mov.L	52[r10], r5
 3177 02d4 61 05                   		cmp	#0, r5
 3178 02d6 10                      		beq	.L153
 3179                             		.loc 1 3341 5 is_stmt 0 discriminator 1
 3180 02d7 ED A1 0D                		mov.L	52[r10], r1
 3181 02da 05 00 00 00             		bsr	_wolfSSL_Free
 3182                             	.L153:
 3183                             	.LBE13:
 3184                             	.LBB14:
3342:../src/src/keys.c ****     XFREE(shaInput,  NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3185                             		.loc 1 3342 5 is_stmt 1
 3186 02de ED A5 06                		mov.L	24[r10], r5
 3187 02e1 E7 A5 0E                		mov.L	r5, 56[r10]
 3188 02e4 ED A5 0E                		mov.L	56[r10], r5
 3189 02e7 61 05                   		cmp	#0, r5
 3190 02e9 10                      		beq	.L154
 3191                             		.loc 1 3342 5 is_stmt 0 discriminator 1
 3192 02ea ED A1 0E                		mov.L	56[r10], r1
 3193 02ed 05 00 00 00             		bsr	_wolfSSL_Free
 3194                             	.L154:
 3195                             	.LBE14:
 3196                             	.LBB15:
3343:../src/src/keys.c ****     XFREE(keyData,   NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3197                             		.loc 1 3343 5 is_stmt 1
 3198 02f1 ED A5 07                		mov.L	28[r10], r5
 3199 02f4 E7 A5 0F                		mov.L	r5, 60[r10]
 3200 02f7 ED A5 0F                		mov.L	60[r10], r5
 3201 02fa 61 05                   		cmp	#0, r5
 3202 02fc 10                      		beq	.L155
 3203                             		.loc 1 3343 5 is_stmt 0 discriminator 1
 3204 02fd ED A1 0F                		mov.L	60[r10], r1
 3205 0300 05 00 00 00             		bsr	_wolfSSL_Free
 3206                             	.L155:
 3207                             	.LBE15:
 3208                             	.LBB16:
3344:../src/src/keys.c ****     XFREE(md5,       NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3209                             		.loc 1 3344 5 is_stmt 1
 3210 0304 ED A5 08                		mov.L	32[r10], r5
 3211 0307 E7 A5 10                		mov.L	r5, 64[r10]
 3212 030a ED A5 10                		mov.L	64[r10], r5
 3213 030d 61 05                   		cmp	#0, r5
 3214 030f 10                      		beq	.L156
 3215                             		.loc 1 3344 5 is_stmt 0 discriminator 1
 3216 0310 ED A1 10                		mov.L	64[r10], r1
 3217 0313 05 00 00 00             		bsr	_wolfSSL_Free
 3218                             	.L156:
 3219                             	.LBE16:
 3220                             	.LBB17:
3345:../src/src/keys.c ****     XFREE(sha,       NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3221                             		.loc 1 3345 5 is_stmt 1
 3222 0317 ED A5 09                		mov.L	36[r10], r5
 3223 031a E7 A5 11                		mov.L	r5, 68[r10]
 3224 031d ED A5 11                		mov.L	68[r10], r5
 3225 0320 61 05                   		cmp	#0, r5
 3226 0322 10                      		beq	.L157
 3227                             		.loc 1 3345 5 is_stmt 0 discriminator 1
 3228 0323 ED A1 11                		mov.L	68[r10], r1
 3229 0326 05 00 00 00             		bsr	_wolfSSL_Free
 3230                             	.L157:
 3231                             	.LBE17:
3346:../src/src/keys.c **** #endif
3347:../src/src/keys.c **** 
3348:../src/src/keys.c ****     return ret;
 3232                             		.loc 1 3348 12 is_stmt 1
 3233 032a ED A5 01                		mov.L	4[r10], r5
 3234                             	.L141:
3349:../src/src/keys.c **** }
 3235                             		.loc 1 3349 1
 3236 032d EF 51                   		mov.L	r5, r1
 3237 032f 3F AA 1A                		rtsd	#104, r10-r10
 3238                             	.LFE6:
 3240 0332 74 10 01 00 00 00       		.section	.text.CleanPreMaster,"ax",@progbits
 3242                             	_CleanPreMaster:
 3243                             	.LFB7:
3350:../src/src/keys.c **** 
3351:../src/src/keys.c **** 
3352:../src/src/keys.c **** static int CleanPreMaster(WOLFSSL* ssl)
3353:../src/src/keys.c **** {
 3244                             		.loc 1 3353 1
 3245 0000 7E AA                   		push.l	r10
 3246                             	.LCFI16:
 3247 0002 71 0A EC                		add	#-20, r0, r10
 3248                             	.LCFI17:
 3249 0005 EF A0                   		mov.L	r10, r0
 3250 0007 E7 A1 04                		mov.L	r1, 16[r10]
3354:../src/src/keys.c ****     int i, ret, sz = ssl->arrays->preMasterSz;
 3251                             		.loc 1 3354 25
 3252 000a ED A5 04                		mov.L	16[r10], r5
 3253 000d A8 D5                   		mov.L	8[r5], r5
 3254                             		.loc 1 3354 33
 3255 000f A8 D5                   		mov.L	8[r5], r5
 3256                             		.loc 1 3354 17
 3257 0011 E7 A5 01                		mov.L	r5, 4[r10]
3355:../src/src/keys.c **** 
3356:../src/src/keys.c ****     for (i = 0; i < sz; i++)
 3258                             		.loc 1 3356 12
 3259 0014 F8 A6 00                		mov.L	#0, [r10]
 3260                             		.loc 1 3356 5
 3261 0017 2E 16                   		bra	.L159
 3262                             	.L160:
3357:../src/src/keys.c ****         ssl->arrays->preMasterSecret[i] = 0;
 3263                             		.loc 1 3357 12 discriminator 3
 3264 0019 ED A5 04                		mov.L	16[r10], r5
 3265 001c A8 D5                   		mov.L	8[r5], r5
 3266                             		.loc 1 3357 20 discriminator 3
 3267 001e A8 5C                   		mov.L	4[r5], r4
 3268                             		.loc 1 3357 37 discriminator 3
 3269 0020 EC A5                   		mov.L	[r10], r5
 3270 0022 4B 45                   		add	r4, r5
 3271                             		.loc 1 3357 41 discriminator 3
 3272 0024 F8 54 00                		mov.B	#0, [r5]
3356:../src/src/keys.c ****         ssl->arrays->preMasterSecret[i] = 0;
 3273                             		.loc 1 3356 26 discriminator 3
 3274 0027 EC A5                   		mov.L	[r10], r5
 3275 0029 62 15                   		add	#1, r5
 3276 002b E3 A5                   		mov.L	r5, [r10]
 3277                             	.L159:
3356:../src/src/keys.c ****         ssl->arrays->preMasterSecret[i] = 0;
 3278                             		.loc 1 3356 5 discriminator 1
 3279 002d EC A4                   		mov.L	[r10], r4
 3280 002f ED A5 01                		mov.L	4[r10], r5
 3281 0032 47 54                   		cmp	r5, r4
 3282 0034 29 E5                   		blt	.L160
3358:../src/src/keys.c **** 
3359:../src/src/keys.c ****     ret = wc_RNG_GenerateBlock(ssl->rng, ssl->arrays->preMasterSecret, sz);
 3283                             		.loc 1 3359 11
 3284 0036 ED A5 04                		mov.L	16[r10], r5
 3285 0039 A9 D4                   		mov.L	24[r5], r4
 3286                             		.loc 1 3359 45
 3287 003b ED A5 04                		mov.L	16[r10], r5
 3288 003e A8 D5                   		mov.L	8[r5], r5
 3289                             		.loc 1 3359 11
 3290 0040 A8 5D                   		mov.L	4[r5], r5
 3291 0042 ED A3 01                		mov.L	4[r10], r3
 3292 0045 EF 52                   		mov.L	r5, r2
 3293 0047 EF 41                   		mov.L	r4, r1
 3294 0049 05 00 00 00             		bsr	_wc_RNG_GenerateBlock
 3295 004d E7 A1 02                		mov.L	r1, 8[r10]
3360:../src/src/keys.c ****     if (ret != 0)
 3296                             		.loc 1 3360 8
 3297 0050 ED A5 02                		mov.L	8[r10], r5
 3298 0053 61 05                   		cmp	#0, r5
 3299 0055 16                      		beq	.L161
3361:../src/src/keys.c ****         return ret;
 3300                             		.loc 1 3361 16
 3301 0056 ED A5 02                		mov.L	8[r10], r5
 3302 0059 2E 4D                   		bra	.L162
 3303                             	.L161:
3362:../src/src/keys.c **** 
3363:../src/src/keys.c ****     for (i = 0; i < sz; i++)
 3304                             		.loc 1 3363 12
 3305 005b F8 A6 00                		mov.L	#0, [r10]
 3306                             		.loc 1 3363 5
 3307 005e 2E 16                   		bra	.L163
 3308                             	.L164:
3364:../src/src/keys.c ****         ssl->arrays->preMasterSecret[i] = 0;
 3309                             		.loc 1 3364 12 discriminator 3
 3310 0060 ED A5 04                		mov.L	16[r10], r5
 3311 0063 A8 D5                   		mov.L	8[r5], r5
 3312                             		.loc 1 3364 20 discriminator 3
 3313 0065 A8 5C                   		mov.L	4[r5], r4
 3314                             		.loc 1 3364 37 discriminator 3
 3315 0067 EC A5                   		mov.L	[r10], r5
 3316 0069 4B 45                   		add	r4, r5
 3317                             		.loc 1 3364 41 discriminator 3
 3318 006b F8 54 00                		mov.B	#0, [r5]
3363:../src/src/keys.c ****         ssl->arrays->preMasterSecret[i] = 0;
 3319                             		.loc 1 3363 26 discriminator 3
 3320 006e EC A5                   		mov.L	[r10], r5
 3321 0070 62 15                   		add	#1, r5
 3322 0072 E3 A5                   		mov.L	r5, [r10]
 3323                             	.L163:
3363:../src/src/keys.c ****         ssl->arrays->preMasterSecret[i] = 0;
 3324                             		.loc 1 3363 5 discriminator 1
 3325 0074 EC A4                   		mov.L	[r10], r4
 3326 0076 ED A5 01                		mov.L	4[r10], r5
 3327 0079 47 54                   		cmp	r5, r4
 3328 007b 29 E5                   		blt	.L164
 3329                             	.LBB18:
3365:../src/src/keys.c **** 
3366:../src/src/keys.c ****     XFREE(ssl->arrays->preMasterSecret, ssl->heap, DYNAMIC_TYPE_SECRET);
 3330                             		.loc 1 3366 5
 3331 007d ED A5 04                		mov.L	16[r10], r5
 3332 0080 A8 D5                   		mov.L	8[r5], r5
 3333 0082 A8 5D                   		mov.L	4[r5], r5
 3334 0084 E7 A5 03                		mov.L	r5, 12[r10]
 3335 0087 ED A5 03                		mov.L	12[r10], r5
 3336 008a 61 05                   		cmp	#0, r5
 3337 008c 10                      		beq	.L165
 3338                             		.loc 1 3366 5 is_stmt 0 discriminator 1
 3339 008d ED A1 03                		mov.L	12[r10], r1
 3340 0090 05 00 00 00             		bsr	_wolfSSL_Free
 3341                             	.L165:
 3342                             	.LBE18:
3367:../src/src/keys.c ****     ssl->arrays->preMasterSecret = NULL;
 3343                             		.loc 1 3367 8 is_stmt 1
 3344 0094 ED A5 04                		mov.L	16[r10], r5
 3345 0097 A8 D5                   		mov.L	8[r5], r5
 3346                             		.loc 1 3367 34
 3347 0099 3E 51 00                		mov.L	#0, 4[r5]
3368:../src/src/keys.c ****     ssl->arrays->preMasterSz = 0;
 3348                             		.loc 1 3368 8
 3349 009c ED A5 04                		mov.L	16[r10], r5
 3350 009f A8 D5                   		mov.L	8[r5], r5
 3351                             		.loc 1 3368 30
 3352 00a1 3E 52 00                		mov.L	#0, 8[r5]
3369:../src/src/keys.c **** 
3370:../src/src/keys.c ****     return 0;
 3353                             		.loc 1 3370 12
 3354 00a4 66 05                   		mov.L	#0, r5
 3355                             	.L162:
3371:../src/src/keys.c **** }
 3356                             		.loc 1 3371 1
 3357 00a6 EF 51                   		mov.L	r5, r1
 3358 00a8 3F AA 06                		rtsd	#24, r10-r10
 3359                             	.LFE7:
 3361                             		.section	.text.MakeSslMasterSecret,"ax",@progbits
 3363                             	_MakeSslMasterSecret:
 3364                             	.LFB8:
3372:../src/src/keys.c **** 
3373:../src/src/keys.c **** 
3374:../src/src/keys.c **** /* Create and store the master secret see page 32, 6.1 */
3375:../src/src/keys.c **** static int MakeSslMasterSecret(WOLFSSL* ssl)
3376:../src/src/keys.c **** {
 3365                             		.loc 1 3376 1
 3366 0000 7E AA                   		push.l	r10
 3367                             	.LCFI18:
 3368 0002 71 0A A4                		add	#-92, r0, r10
 3369                             	.LCFI19:
 3370 0005 EF A0                   		mov.L	r10, r0
 3371 0007 E7 A1 16                		mov.L	r1, 88[r10]
3377:../src/src/keys.c ****     int    i, ret;
3378:../src/src/keys.c ****     word32 idx;
3379:../src/src/keys.c ****     word32 pmsSz = ssl->arrays->preMasterSz;
 3372                             		.loc 1 3379 23
 3373 000a ED A5 16                		mov.L	88[r10], r5
 3374 000d A8 D5                   		mov.L	8[r5], r5
 3375                             		.loc 1 3379 12
 3376 000f A8 D5                   		mov.L	8[r5], r5
 3377 0011 E7 A5 02                		mov.L	r5, 8[r10]
3380:../src/src/keys.c **** 
3381:../src/src/keys.c **** #ifdef WOLFSSL_SMALL_STACK
3382:../src/src/keys.c ****     byte*  shaOutput;
3383:../src/src/keys.c ****     byte*  md5Input;
3384:../src/src/keys.c ****     byte*  shaInput;
3385:../src/src/keys.c ****     wc_Md5* md5;
3386:../src/src/keys.c ****     wc_Sha* sha;
3387:../src/src/keys.c **** #else
3388:../src/src/keys.c ****     byte   shaOutput[WC_SHA_DIGEST_SIZE];
3389:../src/src/keys.c ****     byte   md5Input[ENCRYPT_LEN + WC_SHA_DIGEST_SIZE];
3390:../src/src/keys.c ****     byte   shaInput[PREFIX + ENCRYPT_LEN + 2 * RAN_LEN];
3391:../src/src/keys.c ****     wc_Md5 md5[1];
3392:../src/src/keys.c ****     wc_Sha sha[1];
3393:../src/src/keys.c **** #endif
3394:../src/src/keys.c **** 
3395:../src/src/keys.c ****     if (ssl->arrays->preMasterSecret == NULL) {
 3378                             		.loc 1 3395 12
 3379 0014 ED A5 16                		mov.L	88[r10], r5
 3380 0017 A8 D5                   		mov.L	8[r5], r5
 3381                             		.loc 1 3395 20
 3382 0019 A8 5D                   		mov.L	4[r5], r5
 3383                             		.loc 1 3395 8
 3384 001b 61 05                   		cmp	#0, r5
 3385 001d 18                      		bne	.L167
3396:../src/src/keys.c ****         return BAD_FUNC_ARG;
 3386                             		.loc 1 3396 16
 3387 001e FB 5A 53 FF             		mov.L	#-173, r5
 3388 0022 38 F9 02                		bra	.L168
 3389                             	.L167:
3397:../src/src/keys.c ****     }
3398:../src/src/keys.c **** 
3399:../src/src/keys.c **** #ifdef SHOW_SECRETS
3400:../src/src/keys.c ****     {
3401:../src/src/keys.c ****         word32 j;
3402:../src/src/keys.c ****         printf("pre master secret: ");
3403:../src/src/keys.c ****         for (j = 0; j < pmsSz; j++)
3404:../src/src/keys.c ****             printf("%02x", ssl->arrays->preMasterSecret[j]);
3405:../src/src/keys.c ****         printf("\n");
3406:../src/src/keys.c ****     }
3407:../src/src/keys.c **** #endif
3408:../src/src/keys.c **** 
3409:../src/src/keys.c **** #ifdef WOLFSSL_SMALL_STACK
3410:../src/src/keys.c ****     shaOutput = (byte*)XMALLOC(WC_SHA_DIGEST_SIZE,
 3390                             		.loc 1 3410 24
 3391 0025 75 41 14                		mov.L	#20, r1
 3392 0028 05 00 00 00             		bsr	_wolfSSL_Malloc
 3393 002c E7 A1 03                		mov.L	r1, 12[r10]
3411:../src/src/keys.c ****                                             NULL, DYNAMIC_TYPE_TMP_BUFFER);
3412:../src/src/keys.c ****     md5Input  = (byte*)XMALLOC(ENCRYPT_LEN + WC_SHA_DIGEST_SIZE,
 3394                             		.loc 1 3412 24
 3395 002f FB 1A 96 02             		mov.L	#0x296, r1
 3396 0033 05 00 00 00             		bsr	_wolfSSL_Malloc
 3397 0037 E7 A1 04                		mov.L	r1, 16[r10]
3413:../src/src/keys.c ****                                             NULL, DYNAMIC_TYPE_TMP_BUFFER);
3414:../src/src/keys.c ****     shaInput  = (byte*)XMALLOC(PREFIX + ENCRYPT_LEN + 2 * RAN_LEN,
 3398                             		.loc 1 3414 24
 3399 003a FB 1A C5 02             		mov.L	#0x2c5, r1
 3400 003e 05 00 00 00             		bsr	_wolfSSL_Malloc
 3401 0042 E7 A1 05                		mov.L	r1, 20[r10]
3415:../src/src/keys.c ****                                             NULL, DYNAMIC_TYPE_TMP_BUFFER);
3416:../src/src/keys.c ****     md5       =  (wc_Md5*)XMALLOC(sizeof(wc_Md5), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3402                             		.loc 1 3416 27
 3403 0045 75 41 60                		mov.L	#0x60, r1
 3404 0048 05 00 00 00             		bsr	_wolfSSL_Malloc
 3405 004c E7 A1 06                		mov.L	r1, 24[r10]
3417:../src/src/keys.c ****     sha       =  (wc_Sha*)XMALLOC(sizeof(wc_Sha), NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3406                             		.loc 1 3417 27
 3407 004f 75 41 64                		mov.L	#0x64, r1
 3408 0052 05 00 00 00             		bsr	_wolfSSL_Malloc
 3409 0056 E7 A1 07                		mov.L	r1, 28[r10]
3418:../src/src/keys.c **** 
3419:../src/src/keys.c ****     if (shaOutput == NULL || md5Input == NULL || shaInput == NULL ||
 3410                             		.loc 1 3419 8
 3411 0059 ED A5 03                		mov.L	12[r10], r5
 3412 005c 61 05                   		cmp	#0, r5
 3413 005e 20 1E                   		beq	.L169
 3414                             		.loc 1 3419 27 discriminator 1
 3415 0060 ED A5 04                		mov.L	16[r10], r5
 3416 0063 61 05                   		cmp	#0, r5
 3417 0065 20 17                   		beq	.L169
 3418                             		.loc 1 3419 47 discriminator 2
 3419 0067 ED A5 05                		mov.L	20[r10], r5
 3420 006a 61 05                   		cmp	#0, r5
 3421 006c 20 10                   		beq	.L169
 3422                             		.loc 1 3419 67 discriminator 3
 3423 006e ED A5 06                		mov.L	24[r10], r5
 3424 0071 61 05                   		cmp	#0, r5
 3425 0073 11                      		beq	.L169
3420:../src/src/keys.c ****                              md5      == NULL || sha      == NULL) {
 3426                             		.loc 1 3420 47
 3427 0074 ED A5 07                		mov.L	28[r10], r5
 3428 0077 61 05                   		cmp	#0, r5
 3429 0079 3B 8B 00                		bne	.L170
 3430                             		.balign 8,3,1
 3431                             	.L169:
3421:../src/src/keys.c ****         if (shaOutput) XFREE(shaOutput, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3432                             		.loc 1 3421 12
 3433 007c ED A5 03                		mov.L	12[r10], r5
 3434 007f 61 05                   		cmp	#0, r5
 3435 0081 20 15                   		beq	.L171
 3436                             	.LBB19:
 3437                             		.loc 1 3421 24 discriminator 1
 3438 0083 ED A5 03                		mov.L	12[r10], r5
 3439 0086 E7 A5 0E                		mov.L	r5, 56[r10]
 3440 0089 ED A5 0E                		mov.L	56[r10], r5
 3441 008c 61 05                   		cmp	#0, r5
 3442 008e 10                      		beq	.L171
 3443                             		.loc 1 3421 24 is_stmt 0 discriminator 2
 3444 008f ED A1 0E                		mov.L	56[r10], r1
 3445 0092 05 00 00 00             		bsr	_wolfSSL_Free
 3446                             	.L171:
 3447                             	.LBE19:
3422:../src/src/keys.c ****         if (md5Input)  XFREE(md5Input,  NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3448                             		.loc 1 3422 12 is_stmt 1
 3449 0096 ED A5 04                		mov.L	16[r10], r5
 3450 0099 61 05                   		cmp	#0, r5
 3451 009b 20 15                   		beq	.L172
 3452                             	.LBB20:
 3453                             		.loc 1 3422 24 discriminator 1
 3454 009d ED A5 04                		mov.L	16[r10], r5
 3455 00a0 E7 A5 0F                		mov.L	r5, 60[r10]
 3456 00a3 ED A5 0F                		mov.L	60[r10], r5
 3457 00a6 61 05                   		cmp	#0, r5
 3458 00a8 10                      		beq	.L172
 3459                             		.loc 1 3422 24 is_stmt 0 discriminator 2
 3460 00a9 ED A1 0F                		mov.L	60[r10], r1
 3461 00ac 05 00 00 00             		bsr	_wolfSSL_Free
 3462                             	.L172:
 3463                             	.LBE20:
3423:../src/src/keys.c ****         if (shaInput)  XFREE(shaInput,  NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3464                             		.loc 1 3423 12 is_stmt 1
 3465 00b0 ED A5 05                		mov.L	20[r10], r5
 3466 00b3 61 05                   		cmp	#0, r5
 3467 00b5 20 15                   		beq	.L173
 3468                             	.LBB21:
 3469                             		.loc 1 3423 24 discriminator 1
 3470 00b7 ED A5 05                		mov.L	20[r10], r5
 3471 00ba E7 A5 10                		mov.L	r5, 64[r10]
 3472 00bd ED A5 10                		mov.L	64[r10], r5
 3473 00c0 61 05                   		cmp	#0, r5
 3474 00c2 10                      		beq	.L173
 3475                             		.loc 1 3423 24 is_stmt 0 discriminator 2
 3476 00c3 ED A1 10                		mov.L	64[r10], r1
 3477 00c6 05 00 00 00             		bsr	_wolfSSL_Free
 3478                             	.L173:
 3479                             	.LBE21:
3424:../src/src/keys.c ****         if (md5)       XFREE(md5,       NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3480                             		.loc 1 3424 12 is_stmt 1
 3481 00ca ED A5 06                		mov.L	24[r10], r5
 3482 00cd 61 05                   		cmp	#0, r5
 3483 00cf 20 15                   		beq	.L174
 3484                             	.LBB22:
 3485                             		.loc 1 3424 24 discriminator 1
 3486 00d1 ED A5 06                		mov.L	24[r10], r5
 3487 00d4 E7 A5 11                		mov.L	r5, 68[r10]
 3488 00d7 ED A5 11                		mov.L	68[r10], r5
 3489 00da 61 05                   		cmp	#0, r5
 3490 00dc 10                      		beq	.L174
 3491                             		.loc 1 3424 24 is_stmt 0 discriminator 2
 3492 00dd ED A1 11                		mov.L	68[r10], r1
 3493 00e0 05 00 00 00             		bsr	_wolfSSL_Free
 3494                             	.L174:
 3495                             	.LBE22:
3425:../src/src/keys.c ****         if (sha)       XFREE(sha,       NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3496                             		.loc 1 3425 12 is_stmt 1
 3497 00e4 ED A5 07                		mov.L	28[r10], r5
 3498 00e7 61 05                   		cmp	#0, r5
 3499 00e9 20 15                   		beq	.L175
 3500                             	.LBB23:
 3501                             		.loc 1 3425 24 discriminator 1
 3502 00eb ED A5 07                		mov.L	28[r10], r5
 3503 00ee E7 A5 12                		mov.L	r5, 72[r10]
 3504 00f1 ED A5 12                		mov.L	72[r10], r5
 3505 00f4 61 05                   		cmp	#0, r5
 3506 00f6 10                      		beq	.L175
 3507                             		.loc 1 3425 24 is_stmt 0 discriminator 2
 3508 00f7 ED A1 12                		mov.L	72[r10], r1
 3509 00fa 05 00 00 00             		bsr	_wolfSSL_Free
 3510                             	.L175:
 3511                             	.LBE23:
3426:../src/src/keys.c **** 
3427:../src/src/keys.c ****         return MEMORY_E;
 3512                             		.loc 1 3427 16 is_stmt 1
 3513 00fe FB 56 83                		mov.L	#-125, r5
 3514 0101 38 1A 02                		bra	.L168
 3515                             	.L170:
3428:../src/src/keys.c ****     }
3429:../src/src/keys.c **** #endif
3430:../src/src/keys.c ****     XMEMSET(shaOutput, 0, WC_SHA_DIGEST_SIZE);
 3516                             		.loc 1 3430 5
 3517 0104 75 43 14                		mov.L	#20, r3
 3518 0107 66 02                   		mov.L	#0, r2
 3519 0109 ED A1 03                		mov.L	12[r10], r1
 3520 010c 05 00 00 00             		bsr	_memset
3431:../src/src/keys.c **** 
3432:../src/src/keys.c ****     ret = wc_InitMd5(md5);
 3521                             		.loc 1 3432 11
 3522 0110 ED A1 06                		mov.L	24[r10], r1
 3523 0113 05 00 00 00             		bsr	_wc_InitMd5
 3524 0117 E7 A1 01                		mov.L	r1, 4[r10]
3433:../src/src/keys.c ****     if (ret == 0) {
 3525                             		.loc 1 3433 8
 3526 011a ED A5 01                		mov.L	4[r10], r5
 3527 011d 61 05                   		cmp	#0, r5
 3528 011f 21 0C                   		bne	.L176
3434:../src/src/keys.c ****         ret = wc_InitSha(sha);
 3529                             		.loc 1 3434 15
 3530 0121 ED A1 07                		mov.L	28[r10], r1
 3531 0124 05 00 00 00             		bsr	_wc_InitSha
 3532 0128 E7 A1 01                		mov.L	r1, 4[r10]
 3533                             	.L176:
3435:../src/src/keys.c ****     }
3436:../src/src/keys.c ****     if (ret == 0) {
 3534                             		.loc 1 3436 8
 3535 012b ED A5 01                		mov.L	4[r10], r5
 3536 012e 61 05                   		cmp	#0, r5
 3537 0130 3B 70 01                		bne	.L177
3437:../src/src/keys.c ****         XMEMCPY(md5Input, ssl->arrays->preMasterSecret, pmsSz);
 3538                             		.loc 1 3437 9
 3539 0133 ED A5 16                		mov.L	88[r10], r5
 3540 0136 A8 D5                   		mov.L	8[r5], r5
 3541 0138 A8 5D                   		mov.L	4[r5], r5
 3542 013a ED A3 02                		mov.L	8[r10], r3
 3543 013d EF 52                   		mov.L	r5, r2
 3544 013f ED A1 04                		mov.L	16[r10], r1
 3545 0142 05 00 00 00             		bsr	_memcpy
3438:../src/src/keys.c **** 
3439:../src/src/keys.c ****         for (i = 0; i < MASTER_ROUNDS; ++i) {
 3546                             		.loc 1 3439 16
 3547 0146 F8 A6 00                		mov.L	#0, [r10]
 3548                             		.loc 1 3439 9
 3549 0149 38 3D 01                		bra	.L178
 3550                             	.L185:
 3551                             	.LBB24:
3440:../src/src/keys.c ****             byte prefix[KEY_PREFIX];      /* only need PREFIX bytes but static */
3441:../src/src/keys.c ****             if (!SetPrefix(prefix, i)) {  /* analysis thinks will overrun      */
 3552                             		.loc 1 3441 18
 3553 014c 71 A5 4C                		add	#0x4c, r10, r5
 3554 014f EC A2                   		mov.L	[r10], r2
 3555 0151 EF 51                   		mov.L	r5, r1
 3556 0153 05 00 00 00             		bsr	_SetPrefix
 3557 0157 EF 15                   		mov.L	r1, r5
 3558                             		.loc 1 3441 16
 3559 0159 61 05                   		cmp	#0, r5
 3560 015b 19                      		bne	.L179
3442:../src/src/keys.c ****                 ret = PREFIX_ERROR;
 3561                             		.loc 1 3442 21
 3562 015c F9 AA 01 D2 FE          		mov.L	#-302, 4[r10]
 3563 0161 38 2E 01                		bra	.L180
 3564                             	.L179:
3443:../src/src/keys.c ****                 break;
3444:../src/src/keys.c ****             }
3445:../src/src/keys.c **** 
3446:../src/src/keys.c ****             idx = 0;
 3565                             		.loc 1 3446 17
 3566 0164 F9 A6 08 00             		mov.L	#0, 32[r10]
3447:../src/src/keys.c ****             XMEMCPY(shaInput, prefix, i + 1);
 3567                             		.loc 1 3447 13
 3568 0168 EC A5                   		mov.L	[r10], r5
 3569 016a 62 15                   		add	#1, r5
 3570 016c EF 54                   		mov.L	r5, r4
 3571 016e 71 A5 4C                		add	#0x4c, r10, r5
 3572 0171 EF 43                   		mov.L	r4, r3
 3573 0173 EF 52                   		mov.L	r5, r2
 3574 0175 ED A1 05                		mov.L	20[r10], r1
 3575 0178 05 00 00 00             		bsr	_memcpy
3448:../src/src/keys.c ****             idx += i + 1;
 3576                             		.loc 1 3448 17
 3577 017c EC A5                   		mov.L	[r10], r5
 3578 017e 06 89 A5 08             		add	32[r10].L, r5
 3579 0182 62 15                   		add	#1, r5
 3580 0184 E7 A5 08                		mov.L	r5, 32[r10]
3449:../src/src/keys.c **** 
3450:../src/src/keys.c ****             XMEMCPY(shaInput + idx, ssl->arrays->preMasterSecret, pmsSz);
 3581                             		.loc 1 3450 13
 3582 0187 ED A5 05                		mov.L	20[r10], r5
 3583 018a EF 54                   		mov.L	r5, r4
 3584 018c 06 89 A4 08             		add	32[r10].L, r4
 3585 0190 ED A5 16                		mov.L	88[r10], r5
 3586 0193 A8 D5                   		mov.L	8[r5], r5
 3587 0195 A8 5D                   		mov.L	4[r5], r5
 3588 0197 ED A3 02                		mov.L	8[r10], r3
 3589 019a EF 52                   		mov.L	r5, r2
 3590 019c EF 41                   		mov.L	r4, r1
 3591 019e 05 00 00 00             		bsr	_memcpy
3451:../src/src/keys.c ****             idx += pmsSz;
 3592                             		.loc 1 3451 17
 3593 01a2 ED A5 08                		mov.L	32[r10], r5
 3594 01a5 06 89 A5 02             		add	8[r10].L, r5
 3595 01a9 E7 A5 08                		mov.L	r5, 32[r10]
3452:../src/src/keys.c ****             XMEMCPY(shaInput + idx, ssl->arrays->clientRandom, RAN_LEN);
 3596                             		.loc 1 3452 13
 3597 01ac ED A5 05                		mov.L	20[r10], r5
 3598 01af EF 54                   		mov.L	r5, r4
 3599 01b1 06 89 A4 08             		add	32[r10].L, r4
 3600 01b5 ED A5 16                		mov.L	88[r10], r5
 3601 01b8 A8 D5                   		mov.L	8[r5], r5
 3602 01ba 72 55 5A 01             		add	#0x15a, r5
 3603 01be 75 43 20                		mov.L	#32, r3
 3604 01c1 EF 52                   		mov.L	r5, r2
 3605 01c3 EF 41                   		mov.L	r4, r1
 3606 01c5 05 00 00 00             		bsr	_memcpy
3453:../src/src/keys.c ****             idx += RAN_LEN;
 3607                             		.loc 1 3453 17
 3608 01c9 ED A5 08                		mov.L	32[r10], r5
 3609 01cc 71 55 20                		add	#32, r5
 3610 01cf E7 A5 08                		mov.L	r5, 32[r10]
3454:../src/src/keys.c ****             XMEMCPY(shaInput + idx, ssl->arrays->serverRandom, RAN_LEN);
 3611                             		.loc 1 3454 13
 3612 01d2 ED A5 05                		mov.L	20[r10], r5
 3613 01d5 EF 54                   		mov.L	r5, r4
 3614 01d7 06 89 A4 08             		add	32[r10].L, r4
 3615 01db ED A5 16                		mov.L	88[r10], r5
 3616 01de A8 D5                   		mov.L	8[r5], r5
 3617 01e0 72 55 7A 01             		add	#0x17a, r5
 3618 01e4 75 43 20                		mov.L	#32, r3
 3619 01e7 EF 52                   		mov.L	r5, r2
 3620 01e9 EF 41                   		mov.L	r4, r1
 3621 01eb 05 00 00 00             		bsr	_memcpy
3455:../src/src/keys.c ****             idx += RAN_LEN;
 3622                             		.loc 1 3455 17
 3623 01ef ED A5 08                		mov.L	32[r10], r5
 3624 01f2 71 55 20                		add	#32, r5
 3625 01f5 E7 A5 08                		mov.L	r5, 32[r10]
3456:../src/src/keys.c ****             if (ret == 0) {
 3626                             		.loc 1 3456 16
 3627 01f8 ED A5 01                		mov.L	4[r10], r5
 3628 01fb 61 05                   		cmp	#0, r5
 3629 01fd 21 12                   		bne	.L181
3457:../src/src/keys.c ****                 ret = wc_ShaUpdate(sha, shaInput, idx);
 3630                             		.loc 1 3457 23
 3631 01ff ED A3 08                		mov.L	32[r10], r3
 3632 0202 ED A2 05                		mov.L	20[r10], r2
 3633 0205 ED A1 07                		mov.L	28[r10], r1
 3634 0208 05 00 00 00             		bsr	_wc_ShaUpdate
 3635 020c E7 A1 01                		mov.L	r1, 4[r10]
 3636                             	.L181:
3458:../src/src/keys.c ****             }
3459:../src/src/keys.c ****             if (ret == 0) {
 3637                             		.loc 1 3459 16
 3638 020f ED A5 01                		mov.L	4[r10], r5
 3639 0212 61 05                   		cmp	#0, r5
 3640 0214 21 0F                   		bne	.L182
3460:../src/src/keys.c ****                 ret = wc_ShaFinal(sha, shaOutput);
 3641                             		.loc 1 3460 23
 3642 0216 ED A2 03                		mov.L	12[r10], r2
 3643 0219 ED A1 07                		mov.L	28[r10], r1
 3644 021c 05 00 00 00             		bsr	_wc_ShaFinal
 3645 0220 E7 A1 01                		mov.L	r1, 4[r10]
 3646                             	.L182:
3461:../src/src/keys.c ****             }
3462:../src/src/keys.c ****             idx = pmsSz;  /* preSz */
 3647                             		.loc 1 3462 17
 3648 0223 ED A5 02                		mov.L	8[r10], r5
 3649 0226 E7 A5 08                		mov.L	r5, 32[r10]
3463:../src/src/keys.c ****             XMEMCPY(md5Input + idx, shaOutput, WC_SHA_DIGEST_SIZE);
 3650                             		.loc 1 3463 13
 3651 0229 ED A5 04                		mov.L	16[r10], r5
 3652 022c 06 89 A5 08             		add	32[r10].L, r5
 3653 0230 75 43 14                		mov.L	#20, r3
 3654 0233 ED A2 03                		mov.L	12[r10], r2
 3655 0236 EF 51                   		mov.L	r5, r1
 3656 0238 05 00 00 00             		bsr	_memcpy
3464:../src/src/keys.c ****             idx += WC_SHA_DIGEST_SIZE;
 3657                             		.loc 1 3464 17
 3658 023c ED A5 08                		mov.L	32[r10], r5
 3659 023f 71 55 14                		add	#20, r5
 3660 0242 E7 A5 08                		mov.L	r5, 32[r10]
3465:../src/src/keys.c ****             if (ret == 0) {
 3661                             		.loc 1 3465 16
 3662 0245 ED A5 01                		mov.L	4[r10], r5
 3663 0248 61 05                   		cmp	#0, r5
 3664 024a 21 12                   		bne	.L183
3466:../src/src/keys.c ****                 ret = wc_Md5Update(md5, md5Input, idx);
 3665                             		.loc 1 3466 23
 3666 024c ED A3 08                		mov.L	32[r10], r3
 3667 024f ED A2 04                		mov.L	16[r10], r2
 3668 0252 ED A1 06                		mov.L	24[r10], r1
 3669 0255 05 00 00 00             		bsr	_wc_Md5Update
 3670 0259 E7 A1 01                		mov.L	r1, 4[r10]
 3671                             	.L183:
3467:../src/src/keys.c ****             }
3468:../src/src/keys.c ****             if (ret == 0) {
 3672                             		.loc 1 3468 16
 3673 025c ED A5 01                		mov.L	4[r10], r5
 3674 025f 61 05                   		cmp	#0, r5
 3675 0261 21 1F                   		bne	.L184
3469:../src/src/keys.c ****                 ret = wc_Md5Final(md5,
3470:../src/src/keys.c ****                             &ssl->arrays->masterSecret[i * WC_MD5_DIGEST_SIZE]);
 3676                             		.loc 1 3470 33
 3677 0263 ED A5 16                		mov.L	88[r10], r5
 3678 0266 A8 D4                   		mov.L	8[r5], r4
 3679                             		.loc 1 3470 58
 3680 0268 EC A5                   		mov.L	[r10], r5
 3681 026a 6C 45                   		shll	#4, r5
3469:../src/src/keys.c ****                 ret = wc_Md5Final(md5,
 3682                             		.loc 1 3469 23
 3683 026c 72 55 B8 01             		add	#0x1b8, r5
 3684 0270 4B 45                   		add	r4, r5
 3685 0272 62 35                   		add	#3, r5
 3686 0274 EF 52                   		mov.L	r5, r2
 3687 0276 ED A1 06                		mov.L	24[r10], r1
 3688 0279 05 00 00 00             		bsr	_wc_Md5Final
 3689 027d E7 A1 01                		mov.L	r1, 4[r10]
 3690                             	.L184:
 3691                             	.LBE24:
3439:../src/src/keys.c ****             byte prefix[KEY_PREFIX];      /* only need PREFIX bytes but static */
 3692                             		.loc 1 3439 40
 3693 0280 EC A5                   		mov.L	[r10], r5
 3694 0282 62 15                   		add	#1, r5
 3695 0284 E3 A5                   		mov.L	r5, [r10]
 3696                             	.L178:
3439:../src/src/keys.c ****             byte prefix[KEY_PREFIX];      /* only need PREFIX bytes but static */
 3697                             		.loc 1 3439 9 discriminator 1
 3698 0286 EC A5                   		mov.L	[r10], r5
 3699 0288 61 25                   		cmp	#2, r5
 3700 028a 2A 05 38 C0 FE          		ble	.L185
 3701                             	.L180:
3471:../src/src/keys.c ****             }
3472:../src/src/keys.c ****         }
3473:../src/src/keys.c **** 
3474:../src/src/keys.c **** #ifdef SHOW_SECRETS
3475:../src/src/keys.c ****         {
3476:../src/src/keys.c ****             word32 j;
3477:../src/src/keys.c ****             printf("master secret: ");
3478:../src/src/keys.c ****             for (j = 0; j < SECRET_LEN; j++)
3479:../src/src/keys.c ****                 printf("%02x", ssl->arrays->masterSecret[j]);
3480:../src/src/keys.c ****             printf("\n");
3481:../src/src/keys.c ****         }
3482:../src/src/keys.c **** #endif
3483:../src/src/keys.c **** 
3484:../src/src/keys.c ****         if (ret == 0)
 3702                             		.loc 1 3484 12
 3703 028f ED A5 01                		mov.L	4[r10], r5
 3704 0292 61 05                   		cmp	#0, r5
 3705 0294 21 0C                   		bne	.L177
3485:../src/src/keys.c ****             ret = DeriveKeys(ssl);
 3706                             		.loc 1 3485 19
 3707 0296 ED A1 16                		mov.L	88[r10], r1
 3708 0299 05 00 00 00             		bsr	_DeriveKeys
 3709 029d E7 A1 01                		mov.L	r1, 4[r10]
 3710                             	.L177:
 3711                             	.LBB25:
3486:../src/src/keys.c ****     }
3487:../src/src/keys.c **** 
3488:../src/src/keys.c **** #ifdef WOLFSSL_SMALL_STACK
3489:../src/src/keys.c ****     XFREE(shaOutput, NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3712                             		.loc 1 3489 5
 3713 02a0 ED A5 03                		mov.L	12[r10], r5
 3714 02a3 E7 A5 09                		mov.L	r5, 36[r10]
 3715 02a6 ED A5 09                		mov.L	36[r10], r5
 3716 02a9 61 05                   		cmp	#0, r5
 3717 02ab 10                      		beq	.L186
 3718                             		.loc 1 3489 5 is_stmt 0 discriminator 1
 3719 02ac ED A1 09                		mov.L	36[r10], r1
 3720 02af 05 00 00 00             		bsr	_wolfSSL_Free
 3721                             	.L186:
 3722                             	.LBE25:
 3723                             	.LBB26:
3490:../src/src/keys.c ****     XFREE(md5Input,  NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3724                             		.loc 1 3490 5 is_stmt 1
 3725 02b3 ED A5 04                		mov.L	16[r10], r5
 3726 02b6 E7 A5 0A                		mov.L	r5, 40[r10]
 3727 02b9 ED A5 0A                		mov.L	40[r10], r5
 3728 02bc 61 05                   		cmp	#0, r5
 3729 02be 10                      		beq	.L187
 3730                             		.loc 1 3490 5 is_stmt 0 discriminator 1
 3731 02bf ED A1 0A                		mov.L	40[r10], r1
 3732 02c2 05 00 00 00             		bsr	_wolfSSL_Free
 3733                             	.L187:
 3734                             	.LBE26:
 3735                             	.LBB27:
3491:../src/src/keys.c ****     XFREE(shaInput,  NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3736                             		.loc 1 3491 5 is_stmt 1
 3737 02c6 ED A5 05                		mov.L	20[r10], r5
 3738 02c9 E7 A5 0B                		mov.L	r5, 44[r10]
 3739 02cc ED A5 0B                		mov.L	44[r10], r5
 3740 02cf 61 05                   		cmp	#0, r5
 3741 02d1 10                      		beq	.L188
 3742                             		.loc 1 3491 5 is_stmt 0 discriminator 1
 3743 02d2 ED A1 0B                		mov.L	44[r10], r1
 3744 02d5 05 00 00 00             		bsr	_wolfSSL_Free
 3745                             	.L188:
 3746                             	.LBE27:
 3747                             	.LBB28:
3492:../src/src/keys.c ****     XFREE(md5,       NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3748                             		.loc 1 3492 5 is_stmt 1
 3749 02d9 ED A5 06                		mov.L	24[r10], r5
 3750 02dc E7 A5 0C                		mov.L	r5, 48[r10]
 3751 02df ED A5 0C                		mov.L	48[r10], r5
 3752 02e2 61 05                   		cmp	#0, r5
 3753 02e4 10                      		beq	.L189
 3754                             		.loc 1 3492 5 is_stmt 0 discriminator 1
 3755 02e5 ED A1 0C                		mov.L	48[r10], r1
 3756 02e8 05 00 00 00             		bsr	_wolfSSL_Free
 3757                             	.L189:
 3758                             	.LBE28:
 3759                             	.LBB29:
3493:../src/src/keys.c ****     XFREE(sha,       NULL, DYNAMIC_TYPE_TMP_BUFFER);
 3760                             		.loc 1 3493 5 is_stmt 1
 3761 02ec ED A5 07                		mov.L	28[r10], r5
 3762 02ef E7 A5 0D                		mov.L	r5, 52[r10]
 3763 02f2 ED A5 0D                		mov.L	52[r10], r5
 3764 02f5 61 05                   		cmp	#0, r5
 3765 02f7 10                      		beq	.L190
 3766                             		.loc 1 3493 5 is_stmt 0 discriminator 1
 3767 02f8 ED A1 0D                		mov.L	52[r10], r1
 3768 02fb 05 00 00 00             		bsr	_wolfSSL_Free
 3769                             	.L190:
 3770                             	.LBE29:
3494:../src/src/keys.c **** #endif
3495:../src/src/keys.c **** 
3496:../src/src/keys.c ****     if (ret == 0)
 3771                             		.loc 1 3496 8 is_stmt 1
 3772 02ff ED A5 01                		mov.L	4[r10], r5
 3773 0302 61 05                   		cmp	#0, r5
 3774 0304 21 0D                   		bne	.L191
3497:../src/src/keys.c ****         ret = CleanPreMaster(ssl);
 3775                             		.loc 1 3497 15
 3776 0306 ED A1 16                		mov.L	88[r10], r1
 3777 0309 05 00 00 00             		bsr	_CleanPreMaster
 3778 030d E7 A1 01                		mov.L	r1, 4[r10]
 3779 0310 08                      		bra	.L192
 3780                             	.L191:
3498:../src/src/keys.c ****     else
3499:../src/src/keys.c ****         CleanPreMaster(ssl);
 3781                             		.loc 1 3499 9
 3782 0311 ED A1 16                		mov.L	88[r10], r1
 3783 0314 05 00 00 00             		bsr	_CleanPreMaster
 3784                             	.L192:
3500:../src/src/keys.c **** 
3501:../src/src/keys.c ****     return ret;
 3785                             		.loc 1 3501 12
 3786 0318 ED A5 01                		mov.L	4[r10], r5
 3787                             	.L168:
3502:../src/src/keys.c **** }
 3788                             		.loc 1 3502 1
 3789 031b EF 51                   		mov.L	r5, r1
 3790 031d 3F AA 18                		rtsd	#96, r10-r10
 3791                             	.LFE8:
 3793                             		.section	.text.MakeMasterSecret,"ax",@progbits
 3794                             		.global	_MakeMasterSecret
 3796                             	_MakeMasterSecret:
 3797                             	.LFB9:
3503:../src/src/keys.c **** #endif
3504:../src/src/keys.c **** 
3505:../src/src/keys.c **** 
3506:../src/src/keys.c **** /* Master wrapper, doesn't use SSL stack space in TLS mode */
3507:../src/src/keys.c **** int MakeMasterSecret(WOLFSSL* ssl)
3508:../src/src/keys.c **** {
 3798                             		.loc 1 3508 1
 3799 0000 7E AA                   		push.l	r10
 3800                             	.LCFI20:
 3801 0002 71 0A FC                		add	#-4, r0, r10
 3802                             	.LCFI21:
 3803 0005 EF A0                   		mov.L	r10, r0
 3804 0007 E3 A1                   		mov.L	r1, [r10]
3509:../src/src/keys.c ****     /* append secret to premaster : premaster | SerSi | CliSi */
3510:../src/src/keys.c **** #ifndef NO_OLD_TLS
3511:../src/src/keys.c ****     if (ssl->options.tls) return MakeTlsMasterSecret(ssl);
 3805                             		.loc 1 3511 9
 3806 0009 EC A5                   		mov.L	[r10], r5
 3807 000b ED 55 A7                		mov.L	668[r5], r5
 3808 000e 77 25 00 80 00          		and	#0x8000, r5
 3809                             		.loc 1 3511 8
 3810 0013 61 05                   		cmp	#0, r5
 3811 0015 12                      		beq	.L194
 3812                             		.loc 1 3511 34 discriminator 1
 3813 0016 EC A1                   		mov.L	[r10], r1
 3814 0018 05 00 00 00             		bsr	_MakeTlsMasterSecret
 3815 001c EF 15                   		mov.L	r1, r5
 3816 001e 09                      		bra	.L195
 3817                             	.L194:
3512:../src/src/keys.c ****     return MakeSslMasterSecret(ssl);
 3818                             		.loc 1 3512 12
 3819 001f EC A1                   		mov.L	[r10], r1
 3820 0021 05 00 00 00             		bsr	_MakeSslMasterSecret
 3821 0025 EF 15                   		mov.L	r1, r5
 3822                             	.L195:
3513:../src/src/keys.c **** #elif !defined(WOLFSSL_NO_TLS12)
3514:../src/src/keys.c ****     return MakeTlsMasterSecret(ssl);
3515:../src/src/keys.c **** #else
3516:../src/src/keys.c ****     (void)ssl;
3517:../src/src/keys.c ****     return 0;
3518:../src/src/keys.c **** #endif
3519:../src/src/keys.c **** }
 3823                             		.loc 1 3519 1
 3824 0027 EF 51                   		mov.L	r5, r1
 3825 0029 3F AA 02                		rtsd	#8, r10-r10
 3826                             	.LFE9:
 4039                             	.Letext0:
 4040                             		.file 2 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/wc_port.h"
 4041                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 4042                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 4043                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 4044                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 4045                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 4046                             		.file 8 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 4047                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 4048                             		.file 10 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\incl
 4049                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sp_int.h"
 4050                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha256.h"
 4051                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/random.h"
 4052                             		.file 14 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/wolfmath.h"
 4053                             		.file 15 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/asn_public.h"
 4054                             		.file 16 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/ecc.h"
 4055                             		.file 17 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/ed25519.h"
 4056                             		.file 18 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/curve25519.h"
 4057                             		.file 19 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/rsa.h"
 4058                             		.file 20 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/dh.h"
 4059                             		.file 21 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
 4060                             		.file 22 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/md5.h"
 4061                             		.file 23 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha.h"
 4062                             		.file 24 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha512.h"
 4063                             		.file 25 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/md4.h"
 4064                             		.file 26 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/hash.h"
 4065                             		.file 27 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/openssl/compat_types.h"
 4066                             		.file 28 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/ssl.h"
 4067                             		.file 29 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/callbacks.h"
 4068                             		.file 30 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/internal.h"
 4069                             		.file 31 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfio.h"
 4070                             		.file 32 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/asn.h"
 4071                             		.file 33 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/des3.h"
 4072                             		.file 34 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/aes.h"
 4073                             		.file 35 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/ocsp.h"
 4074                             		.file 36 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/fe_operations.h"
 4075                             		.file 37 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/error-ssl.h"
