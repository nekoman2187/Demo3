   1                             		.file	"dh.c"
   2                             		.section P,"ax"
   3                             	.Ltext0:
   4                             		.section	.text.ForceZero,"ax",@progbits
   6                             	_ForceZero:
   7                             	.LFB13:
   8                             		.file 1 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfcrypt/src/misc.c"
   1:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* misc.c
   2:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   3:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   5:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * This file is part of wolfSSL.
   6:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
   7:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * it under the terms of the GNU General Public License as published by
   9:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * (at your option) any later version.
  11:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  12:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * GNU General Public License for more details.
  16:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  *
  17:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * You should have received a copy of the GNU General Public License
  18:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * along with this program; if not, write to the Free Software
  19:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  21:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /*
  22:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  23:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** DESCRIPTION
  24:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** This module implements the arithmetic-shift right, left, byte swapping, XOR,
  25:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** masking and clearing memory logic.
  26:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  27:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** */
  28:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef HAVE_CONFIG_H
  29:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <config.h>
  30:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  31:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  32:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/settings.h>
  33:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  34:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLF_CRYPT_MISC_C
  35:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #define WOLF_CRYPT_MISC_C
  36:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  37:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #include <wolfssl/wolfcrypt/misc.h>
  38:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  39:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* inlining these functions is a huge speed increase and a small size decrease,
  40:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    because the functions are smaller than function call setup/cleanup, e.g.,
  41:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    md5 benchmark is twice as fast with inline.  If you don't want it, then
  42:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    define NO_INLINE and compile this file into wolfssl, otherwise it's used as
  43:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    a source header
  44:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****  */
  45:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  46:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef NO_INLINE
  47:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC
  48:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  49:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define WC_STATIC static
  50:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  51:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  52:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* Check for if compiling misc.c when not needed. */
  53:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if !defined(WOLFSSL_MISC_INCLUDED) && !defined(NO_INLINE)
  54:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_IGNORE_FILE_WARN
  55:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         #warning misc.c does not need to be compiled when using inline (NO_INLINE not defined)
  56:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
  57:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  58:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
  59:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  60:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  61:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__ICCARM__)
  62:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <intrinsics.h>
  63:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
  64:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  65:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  66:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef INTEL_INTRINSICS
  67:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  68:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <stdlib.h>      /* get intrinsic definitions */
  69:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  70:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* for non visual studio probably need no long version, 32 bit only
  71:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****      * i.e., _rotl and _rotr */
  72:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #pragma intrinsic(_lrotl, _lrotr)
  73:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  74:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  75:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  76:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotl(x, y) : x;
  77:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  78:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  79:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
  80:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  81:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return y ? _lrotr(x, y) : x;
  82:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
  83:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  84:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
  85:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  86:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #include <builtin.h>      /* get intrinsic definitions */
  87:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  88:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #if !defined(NO_INLINE)
  89:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  90:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotlFixed(x, y) _builtin_rotl(x, y)
  91:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  92:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define rotrFixed(x, y) _builtin_rotr(x, y)
  93:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  94:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #else /* create real function */
  95:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
  96:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
  97:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
  98:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotl(x, y);
  99:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 100:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 101:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 102:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 103:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return _builtin_rotr(x, y);
 104:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 105:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 106:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 107:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 108:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else /* generic */
 109:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value. */
 110:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 111:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
 112:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 113:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x << y) | (x >> (sizeof(y) * 8 - y));
 114:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 115:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 116:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value. */
 117:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     WC_STATIC WC_INLINE word32 rotrFixed(word32 x, word32 y)
 118:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     {
 119:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         return (x >> y) | (x << (sizeof(y) * 8 - y));
 120:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 121:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 122:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 123:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 124:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef WC_RC2
 125:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 126:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a left circular arithmetic shift of <x> by <y> value */
 127:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotlFixed16(word16 x, word16 y)
 128:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 129:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 130:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 131:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 132:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 133:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a right circular arithmetic shift of <x> by <y> value */
 134:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word16 rotrFixed16(word16 x, word16 y)
 135:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 136:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 137:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 138:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 139:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WC_RC2 */
 140:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 141:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of 32-bit word value. */
 142:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(__CCRX__) && !defined(NO_INLINE) /* shortest version for CC-RX */
 143:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #define ByteReverseWord32(value) _builtin_revl(value)
 144:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 145:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
 146:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 147:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifdef PPC_INTRINSICS
 148:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* PPC: load reverse indexed instruction */
 149:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__lwbrx(&value,0);
 150:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__ICCARM__)
 151:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__REV(value);
 152:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(KEIL_INTRINSICS)
 153:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__rev(value);
 154:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(__CCRX__)
 155:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)_builtin_revl(value);
 156:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLF_ALLOW_BUILTIN) && \
 157:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 158:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word32)__builtin_bswap32(value);
 159:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 160:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       defined(__aarch64__)
 161:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 162:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV32 %0, %0  \n"
 163:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 164:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 165:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 166:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 167:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFSSL_BYTESWAP32_ASM) && defined(__GNUC__) && \
 168:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****       (defined(__thumb__) || defined(__arm__))
 169:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     __asm__ volatile (
 170:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         "REV %0, %0  \n"
 171:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         : "+r" (value)
 172:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         :
 173:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     );
 174:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return value;
 175:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(FAST_ROTATE)
 176:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 5 instructions with rotate instruction, 9 without */
 177:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (rotrFixed(value, 8U) & 0xff00ff00) |
 178:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****            (rotlFixed(value, 8U) & 0x00ff00ff);
 179:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 180:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     /* 6 instructions with rotate instruction, 8 without */
 181:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 182:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed(value, 16U);
 183:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 184:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 185:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* __CCRX__ */
 186:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a byte swap of words array of a given count. */
 187:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
 188:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                     word32 byteCount)
 189:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 190:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word32), i;
 191:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 192:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 193:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord32(in[i]);
 194:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 195:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 196:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 197:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WORD64_AVAILABLE) && !defined(WOLFSSL_NO_WORD64_OPS)
 198:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 199:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 200:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotlFixed64(word64 x, word64 y)
 201:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 202:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x << y) | (x >> (sizeof(y) * 8 - y));
 203:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 204:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 205:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 206:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 rotrFixed64(word64 x, word64 y)
 207:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 208:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (x >> y) | (x << (sizeof(y) * 8 - y));
 209:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 210:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 211:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 212:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE word64 ByteReverseWord64(word64 value)
 213:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 214:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if defined(WOLF_ALLOW_BUILTIN) && defined(__GNUC_PREREQ) && __GNUC_PREREQ(4, 3)
 215:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)__builtin_bswap64(value);
 216:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #elif defined(WOLFCRYPT_SLOW_WORD64)
 217:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return (word64)((word64)ByteReverseWord32((word32) value)) << 32 |
 218:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         (word64)ByteReverseWord32((word32)(value   >> 32));
 219:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #else
 220:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFF00FF00FF00FF00)) >> 8) |
 221:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x00FF00FF00FF00FF)) << 8);
 222:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     value = ((value & W64LIT(0xFFFF0000FFFF0000)) >> 16) |
 223:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         ((value & W64LIT(0x0000FFFF0000FFFF)) << 16);
 224:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     return rotlFixed64(value, 32U);
 225:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 226:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 227:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 228:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 229:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ByteReverseWords64(word64* out, const word64* in,
 230:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                       word32 byteCount)
 231:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 232:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 count = byteCount/(word32)sizeof(word64), i;
 233:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 234:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < count; i++)
 235:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         out[i] = ByteReverseWord64(in[i]);
 236:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 237:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 238:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 239:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif /* WORD64_AVAILABLE && !WOLFSSL_NO_WORD64_OPS */
 240:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 241:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_XOR_OPS
 242:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 243:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 244:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWordsOut(wolfssl_word* r, const wolfssl_word* a,
 245:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                      const wolfssl_word* b, word32 n)
 246:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 247:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 248:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 249:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] = a[i] ^ b[i];
 250:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 251:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 252:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 253:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 254:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 255:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbufout(void*out, const void* buf, const void* mask,
 256:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                    word32 count)
 257:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 258:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)out | (wc_ptr_t)buf | (wc_ptr_t)mask | count) %
 259:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                          WOLFSSL_WORD_SIZE == 0)
 260:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWordsOut( (wolfssl_word*)out, (wolfssl_word*)buf,
 261:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                      (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 262:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 263:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 264:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       o = (byte*)out;
 265:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 266:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 267:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 268:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) o[i] = b[i] ^ m[i];
 269:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 270:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 271:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 272:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
 273:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** of wolfssl_words, placing the result in <*r>. */
 274:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void XorWords(wolfssl_word* r, const wolfssl_word* a, word32 n)
 275:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 276:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     word32 i;
 277:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 278:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (i = 0; i < n; i++) r[i] ^= a[i];
 279:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 280:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 281:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
 282:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** counts, placing the result in <*buf>. */
 283:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 284:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
 285:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
 286:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     if (((wc_ptr_t)buf | (wc_ptr_t)mask | count) % WOLFSSL_WORD_SIZE == 0)
 287:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         XorWords( (wolfssl_word*)buf,
 288:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                   (const wolfssl_word*)mask, count / WOLFSSL_WORD_SIZE);
 289:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     else {
 290:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 i;
 291:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         byte*       b = (byte*)buf;
 292:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         const byte* m = (const byte*)mask;
 293:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 294:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         for (i = 0; i < count; i++) b[i] ^= m[i];
 295:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     }
 296:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
 297:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 298:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 299:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #ifndef WOLFSSL_NO_FORCE_ZERO
 300:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** /* This routine fills the first len bytes of the memory area pointed by mem
 301:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****    with zeros. It ensures compiler optimizations doesn't skip it  */
 302:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** WC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
 303:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** {
   9                             		.loc 1 303 1
  10 0000 7E AA                   		push.l	r10
  11                             	.LCFI0:
  12 0002 71 0A F4                		add	#-12, r0, r10
  13                             	.LCFI1:
  14 0005 EF A0                   		mov.L	r10, r0
  15 0007 E7 A1 01                		mov.L	r1, 4[r10]
  16 000a E7 A2 02                		mov.L	r2, 8[r10]
 304:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile byte* z = (volatile byte*)mem;
  17                             		.loc 1 304 20
  18 000d ED A5 01                		mov.L	4[r10], r5
  19 0010 E3 A5                   		mov.L	r5, [r10]
 305:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 306:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #if (defined(WOLFSSL_X86_64_BUILD) || defined(WOLFSSL_AARCH64_BUILD)) \
 307:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****             && defined(WORD64_AVAILABLE)
 308:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     volatile word64* w;
 309:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #ifndef WOLFSSL_UNALIGNED_64BIT_ACCESS
 310:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         word32 l = (sizeof(word64) - ((size_t)z & (sizeof(word64)-1))) &
 311:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****                                                              (sizeof(word64)-1);
 312:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 313:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         if (len < l) l = len;
 314:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         len -= l;
 315:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         while (l--) *z++ = 0;
 316:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     #endif
 317:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     for (w = (volatile word64*)z; len >= sizeof(*w); len -= sizeof(*w))
 318:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****         *w++ = 0;
 319:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     z = (volatile byte*)w;
 320:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** #endif
 321:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** 
 322:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c ****     while (len--) *z++ = 0;
  20                             		.loc 1 322 11
  21 0012 2E 0C                   		bra	.L2
  22                             	.L3:
  23                             		.loc 1 322 21 discriminator 2
  24 0014 EC A5                   		mov.L	[r10], r5
  25 0016 71 54 01                		add	#1, r5, r4
  26 0019 E3 A4                   		mov.L	r4, [r10]
  27                             		.loc 1 322 24 discriminator 2
  28 001b F8 54 00                		mov.B	#0, [r5]
  29                             	.L2:
  30                             		.loc 1 322 15 discriminator 1
  31 001e ED A5 02                		mov.L	8[r10], r5
  32 0021 71 54 FF                		add	#-1, r5, r4
  33 0024 E7 A4 02                		mov.L	r4, 8[r10]
  34                             		.loc 1 322 11 discriminator 1
  35 0027 61 05                   		cmp	#0, r5
  36 0029 21 EB                   		bne	.L3
 323:C:\Users\nekom\e2_studio\e2sss_proj\wolflib\src/wolfcrypt/src\misc.c **** }
  37                             		.loc 1 323 1
  38 002b 03                      		nop
  39 002c 3F AA 04                		rtsd	#16, r10-r10
  40                             	.LFE13:
  42                             		.section	.rodata.dh_ffdhe2048_p,"a"
  45                             	_dh_ffdhe2048_p:
  46 0000 FF                      		.byte	-1
  47 0001 FF                      		.byte	-1
  48 0002 FF                      		.byte	-1
  49 0003 FF                      		.byte	-1
  50 0004 FF                      		.byte	-1
  51 0005 FF                      		.byte	-1
  52 0006 FF                      		.byte	-1
  53 0007 FF                      		.byte	-1
  54 0008 AD                      		.byte	-83
  55 0009 F8                      		.byte	-8
  56 000a 54                      		.byte	0x54
  57 000b 58                      		.byte	0x58
  58 000c A2                      		.byte	-94
  59 000d BB                      		.byte	-69
  60 000e 4A                      		.byte	0x4a
  61 000f 9A                      		.byte	-102
  62 0010 AF                      		.byte	-81
  63 0011 DC                      		.byte	-36
  64 0012 56                      		.byte	0x56
  65 0013 20                      		.byte	32
  66 0014 27                      		.byte	39
  67 0015 3D                      		.byte	61
  68 0016 3C                      		.byte	60
  69 0017 F1                      		.byte	-15
  70 0018 D8                      		.byte	-40
  71 0019 B9                      		.byte	-71
  72 001a C5                      		.byte	-59
  73 001b 83                      		.byte	-125
  74 001c CE                      		.byte	-50
  75 001d 2D                      		.byte	45
  76 001e 36                      		.byte	54
  77 001f 95                      		.byte	-107
  78 0020 A9                      		.byte	-87
  79 0021 E1                      		.byte	-31
  80 0022 36                      		.byte	54
  81 0023 41                      		.byte	0x41
  82 0024 14                      		.byte	20
  83 0025 64                      		.byte	0x64
  84 0026 33                      		.byte	51
  85 0027 FB                      		.byte	-5
  86 0028 CC                      		.byte	-52
  87 0029 93                      		.byte	-109
  88 002a 9D                      		.byte	-99
  89 002b CE                      		.byte	-50
  90 002c 24                      		.byte	36
  91 002d 9B                      		.byte	-101
  92 002e 3E                      		.byte	62
  93 002f F9                      		.byte	-7
  94 0030 7D                      		.byte	0x7d
  95 0031 2F                      		.byte	47
  96 0032 E3                      		.byte	-29
  97 0033 63                      		.byte	0x63
  98 0034 63                      		.byte	0x63
  99 0035 0C                      		.byte	12
 100 0036 75                      		.byte	0x75
 101 0037 D8                      		.byte	-40
 102 0038 F6                      		.byte	-10
 103 0039 81                      		.byte	-127
 104 003a B2                      		.byte	-78
 105 003b 02                      		.byte	2
 106 003c AE                      		.byte	-82
 107 003d C4                      		.byte	-60
 108 003e 61                      		.byte	0x61
 109 003f 7A                      		.byte	0x7a
 110 0040 D3                      		.byte	-45
 111 0041 DF                      		.byte	-33
 112 0042 1E                      		.byte	30
 113 0043 D5                      		.byte	-43
 114 0044 D5                      		.byte	-43
 115 0045 FD                      		.byte	-3
 116 0046 65                      		.byte	0x65
 117 0047 61                      		.byte	0x61
 118 0048 24                      		.byte	36
 119 0049 33                      		.byte	51
 120 004a F5                      		.byte	-11
 121 004b 1F                      		.byte	31
 122 004c 5F                      		.byte	0x5f
 123 004d 06                      		.byte	6
 124 004e 6E                      		.byte	0x6e
 125 004f D0                      		.byte	-48
 126 0050 85                      		.byte	-123
 127 0051 63                      		.byte	0x63
 128 0052 65                      		.byte	0x65
 129 0053 55                      		.byte	0x55
 130 0054 3D                      		.byte	61
 131 0055 ED                      		.byte	-19
 132 0056 1A                      		.byte	26
 133 0057 F3                      		.byte	-13
 134 0058 B5                      		.byte	-75
 135 0059 57                      		.byte	0x57
 136 005a 13                      		.byte	19
 137 005b 5E                      		.byte	0x5e
 138 005c 7F                      		.byte	0x7f
 139 005d 57                      		.byte	0x57
 140 005e C9                      		.byte	-55
 141 005f 35                      		.byte	53
 142 0060 98                      		.byte	-104
 143 0061 4F                      		.byte	0x4f
 144 0062 0C                      		.byte	12
 145 0063 70                      		.byte	0x70
 146 0064 E0                      		.byte	-32
 147 0065 E6                      		.byte	-26
 148 0066 8B                      		.byte	-117
 149 0067 77                      		.byte	0x77
 150 0068 E2                      		.byte	-30
 151 0069 A6                      		.byte	-90
 152 006a 89                      		.byte	-119
 153 006b DA                      		.byte	-38
 154 006c F3                      		.byte	-13
 155 006d EF                      		.byte	-17
 156 006e E8                      		.byte	-24
 157 006f 72                      		.byte	0x72
 158 0070 1D                      		.byte	29
 159 0071 F1                      		.byte	-15
 160 0072 58                      		.byte	0x58
 161 0073 A1                      		.byte	-95
 162 0074 36                      		.byte	54
 163 0075 AD                      		.byte	-83
 164 0076 E7                      		.byte	-25
 165 0077 35                      		.byte	53
 166 0078 30                      		.byte	48
 167 0079 AC                      		.byte	-84
 168 007a CA                      		.byte	-54
 169 007b 4F                      		.byte	0x4f
 170 007c 48                      		.byte	0x48
 171 007d 3A                      		.byte	58
 172 007e 79                      		.byte	0x79
 173 007f 7A                      		.byte	0x7a
 174 0080 BC                      		.byte	-68
 175 0081 0A                      		.byte	10
 176 0082 B1                      		.byte	-79
 177 0083 82                      		.byte	-126
 178 0084 B3                      		.byte	-77
 179 0085 24                      		.byte	36
 180 0086 FB                      		.byte	-5
 181 0087 61                      		.byte	0x61
 182 0088 D1                      		.byte	-47
 183 0089 08                      		.byte	8
 184 008a A9                      		.byte	-87
 185 008b 4B                      		.byte	0x4b
 186 008c B2                      		.byte	-78
 187 008d C8                      		.byte	-56
 188 008e E3                      		.byte	-29
 189 008f FB                      		.byte	-5
 190 0090 B9                      		.byte	-71
 191 0091 6A                      		.byte	0x6a
 192 0092 DA                      		.byte	-38
 193 0093 B7                      		.byte	-73
 194 0094 60                      		.byte	0x60
 195 0095 D7                      		.byte	-41
 196 0096 F4                      		.byte	-12
 197 0097 68                      		.byte	0x68
 198 0098 1D                      		.byte	29
 199 0099 4F                      		.byte	0x4f
 200 009a 42                      		.byte	0x42
 201 009b A3                      		.byte	-93
 202 009c DE                      		.byte	-34
 203 009d 39                      		.byte	57
 204 009e 4D                      		.byte	0x4d
 205 009f F4                      		.byte	-12
 206 00a0 AE                      		.byte	-82
 207 00a1 56                      		.byte	0x56
 208 00a2 ED                      		.byte	-19
 209 00a3 E7                      		.byte	-25
 210 00a4 63                      		.byte	0x63
 211 00a5 72                      		.byte	0x72
 212 00a6 BB                      		.byte	-69
 213 00a7 19                      		.byte	25
 214 00a8 0B                      		.byte	11
 215 00a9 07                      		.byte	7
 216 00aa A7                      		.byte	-89
 217 00ab C8                      		.byte	-56
 218 00ac EE                      		.byte	-18
 219 00ad 0A                      		.byte	10
 220 00ae 6D                      		.byte	0x6d
 221 00af 70                      		.byte	0x70
 222 00b0 9E                      		.byte	-98
 223 00b1 02                      		.byte	2
 224 00b2 FC                      		.byte	-4
 225 00b3 E1                      		.byte	-31
 226 00b4 CD                      		.byte	-51
 227 00b5 F7                      		.byte	-9
 228 00b6 E2                      		.byte	-30
 229 00b7 EC                      		.byte	-20
 230 00b8 C0                      		.byte	-64
 231 00b9 34                      		.byte	52
 232 00ba 04                      		.byte	4
 233 00bb CD                      		.byte	-51
 234 00bc 28                      		.byte	40
 235 00bd 34                      		.byte	52
 236 00be 2F                      		.byte	47
 237 00bf 61                      		.byte	0x61
 238 00c0 91                      		.byte	-111
 239 00c1 72                      		.byte	0x72
 240 00c2 FE                      		.byte	-2
 241 00c3 9C                      		.byte	-100
 242 00c4 E9                      		.byte	-23
 243 00c5 85                      		.byte	-123
 244 00c6 83                      		.byte	-125
 245 00c7 FF                      		.byte	-1
 246 00c8 8E                      		.byte	-114
 247 00c9 4F                      		.byte	0x4f
 248 00ca 12                      		.byte	18
 249 00cb 32                      		.byte	50
 250 00cc EE                      		.byte	-18
 251 00cd F2                      		.byte	-14
 252 00ce 81                      		.byte	-127
 253 00cf 83                      		.byte	-125
 254 00d0 C3                      		.byte	-61
 255 00d1 FE                      		.byte	-2
 256 00d2 3B                      		.byte	59
 257 00d3 1B                      		.byte	27
 258 00d4 4C                      		.byte	0x4c
 259 00d5 6F                      		.byte	0x6f
 260 00d6 AD                      		.byte	-83
 261 00d7 73                      		.byte	0x73
 262 00d8 3B                      		.byte	59
 263 00d9 B5                      		.byte	-75
 264 00da FC                      		.byte	-4
 265 00db BC                      		.byte	-68
 266 00dc 2E                      		.byte	46
 267 00dd C2                      		.byte	-62
 268 00de 20                      		.byte	32
 269 00df 05                      		.byte	5
 270 00e0 C5                      		.byte	-59
 271 00e1 8E                      		.byte	-114
 272 00e2 F1                      		.byte	-15
 273 00e3 83                      		.byte	-125
 274 00e4 7D                      		.byte	0x7d
 275 00e5 16                      		.byte	22
 276 00e6 83                      		.byte	-125
 277 00e7 B2                      		.byte	-78
 278 00e8 C6                      		.byte	-58
 279 00e9 F3                      		.byte	-13
 280 00ea 4A                      		.byte	0x4a
 281 00eb 26                      		.byte	38
 282 00ec C1                      		.byte	-63
 283 00ed B2                      		.byte	-78
 284 00ee EF                      		.byte	-17
 285 00ef FA                      		.byte	-6
 286 00f0 88                      		.byte	-120
 287 00f1 6B                      		.byte	0x6b
 288 00f2 42                      		.byte	0x42
 289 00f3 38                      		.byte	56
 290 00f4 61                      		.byte	0x61
 291 00f5 28                      		.byte	40
 292 00f6 5C                      		.byte	0x5c
 293 00f7 97                      		.byte	-105
 294 00f8 FF                      		.byte	-1
 295 00f9 FF                      		.byte	-1
 296 00fa FF                      		.byte	-1
 297 00fb FF                      		.byte	-1
 298 00fc FF                      		.byte	-1
 299 00fd FF                      		.byte	-1
 300 00fe FF                      		.byte	-1
 301 00ff FF                      		.byte	-1
 302                             		.section	.rodata.dh_ffdhe2048_g,"a"
 305                             	_dh_ffdhe2048_g:
 306 0000 02                      		.byte	2
 307                             		.section	.text.wc_Dh_ffdhe2048_Get,"ax",@progbits
 308                             		.global	_wc_Dh_ffdhe2048_Get
 310                             	_wc_Dh_ffdhe2048_Get:
 311                             	.LFB43:
 312                             		.file 2 "../src/wolfcrypt/src/dh.c"
   1:../src/wolfcrypt/src/dh.c **** /* dh.c
   2:../src/wolfcrypt/src/dh.c ****  *
   3:../src/wolfcrypt/src/dh.c ****  * Copyright (C) 2006-2021 wolfSSL Inc.
   4:../src/wolfcrypt/src/dh.c ****  *
   5:../src/wolfcrypt/src/dh.c ****  * This file is part of wolfSSL.
   6:../src/wolfcrypt/src/dh.c ****  *
   7:../src/wolfcrypt/src/dh.c ****  * wolfSSL is free software; you can redistribute it and/or modify
   8:../src/wolfcrypt/src/dh.c ****  * it under the terms of the GNU General Public License as published by
   9:../src/wolfcrypt/src/dh.c ****  * the Free Software Foundation; either version 2 of the License, or
  10:../src/wolfcrypt/src/dh.c ****  * (at your option) any later version.
  11:../src/wolfcrypt/src/dh.c ****  *
  12:../src/wolfcrypt/src/dh.c ****  * wolfSSL is distributed in the hope that it will be useful,
  13:../src/wolfcrypt/src/dh.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../src/wolfcrypt/src/dh.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../src/wolfcrypt/src/dh.c ****  * GNU General Public License for more details.
  16:../src/wolfcrypt/src/dh.c ****  *
  17:../src/wolfcrypt/src/dh.c ****  * You should have received a copy of the GNU General Public License
  18:../src/wolfcrypt/src/dh.c ****  * along with this program; if not, write to the Free Software
  19:../src/wolfcrypt/src/dh.c ****  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1335, USA
  20:../src/wolfcrypt/src/dh.c ****  */
  21:../src/wolfcrypt/src/dh.c **** 
  22:../src/wolfcrypt/src/dh.c **** 
  23:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_CONFIG_H
  24:../src/wolfcrypt/src/dh.c ****     #include <config.h>
  25:../src/wolfcrypt/src/dh.c **** #endif
  26:../src/wolfcrypt/src/dh.c **** 
  27:../src/wolfcrypt/src/dh.c **** #include <wolfssl/wolfcrypt/settings.h>
  28:../src/wolfcrypt/src/dh.c **** 
  29:../src/wolfcrypt/src/dh.c **** #ifndef NO_DH
  30:../src/wolfcrypt/src/dh.c **** 
  31:../src/wolfcrypt/src/dh.c **** #if defined(HAVE_FIPS) && \
  32:../src/wolfcrypt/src/dh.c ****     defined(HAVE_FIPS_VERSION) && (HAVE_FIPS_VERSION >= 2)
  33:../src/wolfcrypt/src/dh.c **** 
  34:../src/wolfcrypt/src/dh.c ****     /* set NO_WRAPPERS before headers, use direct internal f()s not wrappers */
  35:../src/wolfcrypt/src/dh.c ****     #define FIPS_NO_WRAPPERS
  36:../src/wolfcrypt/src/dh.c **** 
  37:../src/wolfcrypt/src/dh.c ****     #ifdef USE_WINDOWS_API
  38:../src/wolfcrypt/src/dh.c ****         #pragma code_seg(".fipsA$m")
  39:../src/wolfcrypt/src/dh.c ****         #pragma const_seg(".fipsB$m")
  40:../src/wolfcrypt/src/dh.c ****     #endif
  41:../src/wolfcrypt/src/dh.c **** #endif
  42:../src/wolfcrypt/src/dh.c **** 
  43:../src/wolfcrypt/src/dh.c **** #include <wolfssl/wolfcrypt/dh.h>
  44:../src/wolfcrypt/src/dh.c **** #include <wolfssl/wolfcrypt/error-crypt.h>
  45:../src/wolfcrypt/src/dh.c **** #include <wolfssl/wolfcrypt/logging.h>
  46:../src/wolfcrypt/src/dh.c **** 
  47:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_HAVE_SP_DH
  48:../src/wolfcrypt/src/dh.c **** #include <wolfssl/wolfcrypt/sp.h>
  49:../src/wolfcrypt/src/dh.c **** #endif
  50:../src/wolfcrypt/src/dh.c **** 
  51:../src/wolfcrypt/src/dh.c **** #ifdef NO_INLINE
  52:../src/wolfcrypt/src/dh.c ****     #include <wolfssl/wolfcrypt/misc.h>
  53:../src/wolfcrypt/src/dh.c **** #else
  54:../src/wolfcrypt/src/dh.c ****     #define WOLFSSL_MISC_INCLUDED
  55:../src/wolfcrypt/src/dh.c ****     #include <wolfcrypt/src/misc.c>
  56:../src/wolfcrypt/src/dh.c **** #endif
  57:../src/wolfcrypt/src/dh.c **** 
  58:../src/wolfcrypt/src/dh.c **** 
  59:../src/wolfcrypt/src/dh.c **** /*
  60:../src/wolfcrypt/src/dh.c **** Possible DH enable options:
  61:../src/wolfcrypt/src/dh.c ****  * NO_RSA:              Overall control of DH                 default: on (not defined)
  62:../src/wolfcrypt/src/dh.c ****  * WOLFSSL_OLD_PRIME_CHECK: Disables the new prime number check. It does not
  63:../src/wolfcrypt/src/dh.c ****                         directly effect this file, but it does speed up DH
  64:../src/wolfcrypt/src/dh.c ****                         removing the testing. It is not recommended to
  65:../src/wolfcrypt/src/dh.c ****                         disable the prime checking.           default: off
  66:../src/wolfcrypt/src/dh.c ****  * WOLFSSL_VALIDATE_DH_KEYGEN: Enable DH key gen consistency checking
  67:../src/wolfcrypt/src/dh.c ****  *                             (on for FIPS 140-3 or later)   default: off
  68:../src/wolfcrypt/src/dh.c **** */
  69:../src/wolfcrypt/src/dh.c **** 
  70:../src/wolfcrypt/src/dh.c **** 
  71:../src/wolfcrypt/src/dh.c **** #if !defined(USER_MATH_LIB) && !defined(WOLFSSL_DH_CONST)
  72:../src/wolfcrypt/src/dh.c ****     #include <math.h>
  73:../src/wolfcrypt/src/dh.c ****     #define XPOW(x,y) pow((x),(y))
  74:../src/wolfcrypt/src/dh.c ****     #define XLOG(x)   log((x))
  75:../src/wolfcrypt/src/dh.c **** #else
  76:../src/wolfcrypt/src/dh.c ****     /* user's own math lib */
  77:../src/wolfcrypt/src/dh.c **** #endif
  78:../src/wolfcrypt/src/dh.c **** 
  79:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_FFDHE_2048
  80:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe2048_p[] = {
  81:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  82:../src/wolfcrypt/src/dh.c ****     0xAD, 0xF8, 0x54, 0x58, 0xA2, 0xBB, 0x4A, 0x9A,
  83:../src/wolfcrypt/src/dh.c ****     0xAF, 0xDC, 0x56, 0x20, 0x27, 0x3D, 0x3C, 0xF1,
  84:../src/wolfcrypt/src/dh.c ****     0xD8, 0xB9, 0xC5, 0x83, 0xCE, 0x2D, 0x36, 0x95,
  85:../src/wolfcrypt/src/dh.c ****     0xA9, 0xE1, 0x36, 0x41, 0x14, 0x64, 0x33, 0xFB,
  86:../src/wolfcrypt/src/dh.c ****     0xCC, 0x93, 0x9D, 0xCE, 0x24, 0x9B, 0x3E, 0xF9,
  87:../src/wolfcrypt/src/dh.c ****     0x7D, 0x2F, 0xE3, 0x63, 0x63, 0x0C, 0x75, 0xD8,
  88:../src/wolfcrypt/src/dh.c ****     0xF6, 0x81, 0xB2, 0x02, 0xAE, 0xC4, 0x61, 0x7A,
  89:../src/wolfcrypt/src/dh.c ****     0xD3, 0xDF, 0x1E, 0xD5, 0xD5, 0xFD, 0x65, 0x61,
  90:../src/wolfcrypt/src/dh.c ****     0x24, 0x33, 0xF5, 0x1F, 0x5F, 0x06, 0x6E, 0xD0,
  91:../src/wolfcrypt/src/dh.c ****     0x85, 0x63, 0x65, 0x55, 0x3D, 0xED, 0x1A, 0xF3,
  92:../src/wolfcrypt/src/dh.c ****     0xB5, 0x57, 0x13, 0x5E, 0x7F, 0x57, 0xC9, 0x35,
  93:../src/wolfcrypt/src/dh.c ****     0x98, 0x4F, 0x0C, 0x70, 0xE0, 0xE6, 0x8B, 0x77,
  94:../src/wolfcrypt/src/dh.c ****     0xE2, 0xA6, 0x89, 0xDA, 0xF3, 0xEF, 0xE8, 0x72,
  95:../src/wolfcrypt/src/dh.c ****     0x1D, 0xF1, 0x58, 0xA1, 0x36, 0xAD, 0xE7, 0x35,
  96:../src/wolfcrypt/src/dh.c ****     0x30, 0xAC, 0xCA, 0x4F, 0x48, 0x3A, 0x79, 0x7A,
  97:../src/wolfcrypt/src/dh.c ****     0xBC, 0x0A, 0xB1, 0x82, 0xB3, 0x24, 0xFB, 0x61,
  98:../src/wolfcrypt/src/dh.c ****     0xD1, 0x08, 0xA9, 0x4B, 0xB2, 0xC8, 0xE3, 0xFB,
  99:../src/wolfcrypt/src/dh.c ****     0xB9, 0x6A, 0xDA, 0xB7, 0x60, 0xD7, 0xF4, 0x68,
 100:../src/wolfcrypt/src/dh.c ****     0x1D, 0x4F, 0x42, 0xA3, 0xDE, 0x39, 0x4D, 0xF4,
 101:../src/wolfcrypt/src/dh.c ****     0xAE, 0x56, 0xED, 0xE7, 0x63, 0x72, 0xBB, 0x19,
 102:../src/wolfcrypt/src/dh.c ****     0x0B, 0x07, 0xA7, 0xC8, 0xEE, 0x0A, 0x6D, 0x70,
 103:../src/wolfcrypt/src/dh.c ****     0x9E, 0x02, 0xFC, 0xE1, 0xCD, 0xF7, 0xE2, 0xEC,
 104:../src/wolfcrypt/src/dh.c ****     0xC0, 0x34, 0x04, 0xCD, 0x28, 0x34, 0x2F, 0x61,
 105:../src/wolfcrypt/src/dh.c ****     0x91, 0x72, 0xFE, 0x9C, 0xE9, 0x85, 0x83, 0xFF,
 106:../src/wolfcrypt/src/dh.c ****     0x8E, 0x4F, 0x12, 0x32, 0xEE, 0xF2, 0x81, 0x83,
 107:../src/wolfcrypt/src/dh.c ****     0xC3, 0xFE, 0x3B, 0x1B, 0x4C, 0x6F, 0xAD, 0x73,
 108:../src/wolfcrypt/src/dh.c ****     0x3B, 0xB5, 0xFC, 0xBC, 0x2E, 0xC2, 0x20, 0x05,
 109:../src/wolfcrypt/src/dh.c ****     0xC5, 0x8E, 0xF1, 0x83, 0x7D, 0x16, 0x83, 0xB2,
 110:../src/wolfcrypt/src/dh.c ****     0xC6, 0xF3, 0x4A, 0x26, 0xC1, 0xB2, 0xEF, 0xFA,
 111:../src/wolfcrypt/src/dh.c ****     0x88, 0x6B, 0x42, 0x38, 0x61, 0x28, 0x5C, 0x97,
 112:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
 113:../src/wolfcrypt/src/dh.c **** };
 114:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe2048_g[] = { 0x02 };
 115:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_FFDHE_Q
 116:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe2048_q[] = {
 117:../src/wolfcrypt/src/dh.c ****     0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 118:../src/wolfcrypt/src/dh.c ****     0xD6, 0xFC, 0x2A, 0x2C, 0x51, 0x5D, 0xA5, 0x4D,
 119:../src/wolfcrypt/src/dh.c ****     0x57, 0xEE, 0x2B, 0x10, 0x13, 0x9E, 0x9E, 0x78,
 120:../src/wolfcrypt/src/dh.c ****     0xEC, 0x5C, 0xE2, 0xC1, 0xE7, 0x16, 0x9B, 0x4A,
 121:../src/wolfcrypt/src/dh.c ****     0xD4, 0xF0, 0x9B, 0x20, 0x8A, 0x32, 0x19, 0xFD,
 122:../src/wolfcrypt/src/dh.c ****     0xE6, 0x49, 0xCE, 0xE7, 0x12, 0x4D, 0x9F, 0x7C,
 123:../src/wolfcrypt/src/dh.c ****     0xBE, 0x97, 0xF1, 0xB1, 0xB1, 0x86, 0x3A, 0xEC,
 124:../src/wolfcrypt/src/dh.c ****     0x7B, 0x40, 0xD9, 0x01, 0x57, 0x62, 0x30, 0xBD,
 125:../src/wolfcrypt/src/dh.c ****     0x69, 0xEF, 0x8F, 0x6A, 0xEA, 0xFE, 0xB2, 0xB0,
 126:../src/wolfcrypt/src/dh.c ****     0x92, 0x19, 0xFA, 0x8F, 0xAF, 0x83, 0x37, 0x68,
 127:../src/wolfcrypt/src/dh.c ****     0x42, 0xB1, 0xB2, 0xAA, 0x9E, 0xF6, 0x8D, 0x79,
 128:../src/wolfcrypt/src/dh.c ****     0xDA, 0xAB, 0x89, 0xAF, 0x3F, 0xAB, 0xE4, 0x9A,
 129:../src/wolfcrypt/src/dh.c ****     0xCC, 0x27, 0x86, 0x38, 0x70, 0x73, 0x45, 0xBB,
 130:../src/wolfcrypt/src/dh.c ****     0xF1, 0x53, 0x44, 0xED, 0x79, 0xF7, 0xF4, 0x39,
 131:../src/wolfcrypt/src/dh.c ****     0x0E, 0xF8, 0xAC, 0x50, 0x9B, 0x56, 0xF3, 0x9A,
 132:../src/wolfcrypt/src/dh.c ****     0x98, 0x56, 0x65, 0x27, 0xA4, 0x1D, 0x3C, 0xBD,
 133:../src/wolfcrypt/src/dh.c ****     0x5E, 0x05, 0x58, 0xC1, 0x59, 0x92, 0x7D, 0xB0,
 134:../src/wolfcrypt/src/dh.c ****     0xE8, 0x84, 0x54, 0xA5, 0xD9, 0x64, 0x71, 0xFD,
 135:../src/wolfcrypt/src/dh.c ****     0xDC, 0xB5, 0x6D, 0x5B, 0xB0, 0x6B, 0xFA, 0x34,
 136:../src/wolfcrypt/src/dh.c ****     0x0E, 0xA7, 0xA1, 0x51, 0xEF, 0x1C, 0xA6, 0xFA,
 137:../src/wolfcrypt/src/dh.c ****     0x57, 0x2B, 0x76, 0xF3, 0xB1, 0xB9, 0x5D, 0x8C,
 138:../src/wolfcrypt/src/dh.c ****     0x85, 0x83, 0xD3, 0xE4, 0x77, 0x05, 0x36, 0xB8,
 139:../src/wolfcrypt/src/dh.c ****     0x4F, 0x01, 0x7E, 0x70, 0xE6, 0xFB, 0xF1, 0x76,
 140:../src/wolfcrypt/src/dh.c ****     0x60, 0x1A, 0x02, 0x66, 0x94, 0x1A, 0x17, 0xB0,
 141:../src/wolfcrypt/src/dh.c ****     0xC8, 0xB9, 0x7F, 0x4E, 0x74, 0xC2, 0xC1, 0xFF,
 142:../src/wolfcrypt/src/dh.c ****     0xC7, 0x27, 0x89, 0x19, 0x77, 0x79, 0x40, 0xC1,
 143:../src/wolfcrypt/src/dh.c ****     0xE1, 0xFF, 0x1D, 0x8D, 0xA6, 0x37, 0xD6, 0xB9,
 144:../src/wolfcrypt/src/dh.c ****     0x9D, 0xDA, 0xFE, 0x5E, 0x17, 0x61, 0x10, 0x02,
 145:../src/wolfcrypt/src/dh.c ****     0xE2, 0xC7, 0x78, 0xC1, 0xBE, 0x8B, 0x41, 0xD9,
 146:../src/wolfcrypt/src/dh.c ****     0x63, 0x79, 0xA5, 0x13, 0x60, 0xD9, 0x77, 0xFD,
 147:../src/wolfcrypt/src/dh.c ****     0x44, 0x35, 0xA1, 0x1C, 0x30, 0x94, 0x2E, 0x4B,
 148:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
 149:../src/wolfcrypt/src/dh.c **** };
 150:../src/wolfcrypt/src/dh.c **** #endif /* HAVE_FFDHE_Q */
 151:../src/wolfcrypt/src/dh.c **** 
 152:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_PUBLIC_FFDHE
 153:../src/wolfcrypt/src/dh.c **** const DhParams* wc_Dh_ffdhe2048_Get(void)
 154:../src/wolfcrypt/src/dh.c **** {
 313                             		.loc 2 154 1
 314 0000 7E AA                   		push.l	r10
 315                             	.LCFI2:
 316 0002 EF 0A                   		mov.L	r0, r10
 317                             	.LCFI3:
 155:../src/wolfcrypt/src/dh.c ****     static const DhParams ffdhe2048 = {
 156:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_Q
 157:../src/wolfcrypt/src/dh.c ****             dh_ffdhe2048_q, sizeof(dh_ffdhe2048_q),
 158:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_Q */
 159:../src/wolfcrypt/src/dh.c ****         dh_ffdhe2048_p, sizeof(dh_ffdhe2048_p),
 160:../src/wolfcrypt/src/dh.c ****         dh_ffdhe2048_g, sizeof(dh_ffdhe2048_g)
 161:../src/wolfcrypt/src/dh.c ****     };
 162:../src/wolfcrypt/src/dh.c ****     return &ffdhe2048;
 318                             		.loc 2 162 12
 319 0004 FB 52 00 00 00 00       		mov.L	#_ffdhe2048.3788, r5
 163:../src/wolfcrypt/src/dh.c **** }
 320                             		.loc 2 163 1
 321 000a EF 51                   		mov.L	r5, r1
 322 000c 3F AA 01                		rtsd	#4, r10-r10
 323                             	.LFE43:
 325                             		.section	.text.wc_InitDhKey_ex,"ax",@progbits
 326                             		.global	_wc_InitDhKey_ex
 328                             	_wc_InitDhKey_ex:
 329                             	.LFB44:
 164:../src/wolfcrypt/src/dh.c **** #endif
 165:../src/wolfcrypt/src/dh.c **** #endif
 166:../src/wolfcrypt/src/dh.c **** 
 167:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_FFDHE_3072
 168:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe3072_p[] = {
 169:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 170:../src/wolfcrypt/src/dh.c ****     0xAD, 0xF8, 0x54, 0x58, 0xA2, 0xBB, 0x4A, 0x9A,
 171:../src/wolfcrypt/src/dh.c ****     0xAF, 0xDC, 0x56, 0x20, 0x27, 0x3D, 0x3C, 0xF1,
 172:../src/wolfcrypt/src/dh.c ****     0xD8, 0xB9, 0xC5, 0x83, 0xCE, 0x2D, 0x36, 0x95,
 173:../src/wolfcrypt/src/dh.c ****     0xA9, 0xE1, 0x36, 0x41, 0x14, 0x64, 0x33, 0xFB,
 174:../src/wolfcrypt/src/dh.c ****     0xCC, 0x93, 0x9D, 0xCE, 0x24, 0x9B, 0x3E, 0xF9,
 175:../src/wolfcrypt/src/dh.c ****     0x7D, 0x2F, 0xE3, 0x63, 0x63, 0x0C, 0x75, 0xD8,
 176:../src/wolfcrypt/src/dh.c ****     0xF6, 0x81, 0xB2, 0x02, 0xAE, 0xC4, 0x61, 0x7A,
 177:../src/wolfcrypt/src/dh.c ****     0xD3, 0xDF, 0x1E, 0xD5, 0xD5, 0xFD, 0x65, 0x61,
 178:../src/wolfcrypt/src/dh.c ****     0x24, 0x33, 0xF5, 0x1F, 0x5F, 0x06, 0x6E, 0xD0,
 179:../src/wolfcrypt/src/dh.c ****     0x85, 0x63, 0x65, 0x55, 0x3D, 0xED, 0x1A, 0xF3,
 180:../src/wolfcrypt/src/dh.c ****     0xB5, 0x57, 0x13, 0x5E, 0x7F, 0x57, 0xC9, 0x35,
 181:../src/wolfcrypt/src/dh.c ****     0x98, 0x4F, 0x0C, 0x70, 0xE0, 0xE6, 0x8B, 0x77,
 182:../src/wolfcrypt/src/dh.c ****     0xE2, 0xA6, 0x89, 0xDA, 0xF3, 0xEF, 0xE8, 0x72,
 183:../src/wolfcrypt/src/dh.c ****     0x1D, 0xF1, 0x58, 0xA1, 0x36, 0xAD, 0xE7, 0x35,
 184:../src/wolfcrypt/src/dh.c ****     0x30, 0xAC, 0xCA, 0x4F, 0x48, 0x3A, 0x79, 0x7A,
 185:../src/wolfcrypt/src/dh.c ****     0xBC, 0x0A, 0xB1, 0x82, 0xB3, 0x24, 0xFB, 0x61,
 186:../src/wolfcrypt/src/dh.c ****     0xD1, 0x08, 0xA9, 0x4B, 0xB2, 0xC8, 0xE3, 0xFB,
 187:../src/wolfcrypt/src/dh.c ****     0xB9, 0x6A, 0xDA, 0xB7, 0x60, 0xD7, 0xF4, 0x68,
 188:../src/wolfcrypt/src/dh.c ****     0x1D, 0x4F, 0x42, 0xA3, 0xDE, 0x39, 0x4D, 0xF4,
 189:../src/wolfcrypt/src/dh.c ****     0xAE, 0x56, 0xED, 0xE7, 0x63, 0x72, 0xBB, 0x19,
 190:../src/wolfcrypt/src/dh.c ****     0x0B, 0x07, 0xA7, 0xC8, 0xEE, 0x0A, 0x6D, 0x70,
 191:../src/wolfcrypt/src/dh.c ****     0x9E, 0x02, 0xFC, 0xE1, 0xCD, 0xF7, 0xE2, 0xEC,
 192:../src/wolfcrypt/src/dh.c ****     0xC0, 0x34, 0x04, 0xCD, 0x28, 0x34, 0x2F, 0x61,
 193:../src/wolfcrypt/src/dh.c ****     0x91, 0x72, 0xFE, 0x9C, 0xE9, 0x85, 0x83, 0xFF,
 194:../src/wolfcrypt/src/dh.c ****     0x8E, 0x4F, 0x12, 0x32, 0xEE, 0xF2, 0x81, 0x83,
 195:../src/wolfcrypt/src/dh.c ****     0xC3, 0xFE, 0x3B, 0x1B, 0x4C, 0x6F, 0xAD, 0x73,
 196:../src/wolfcrypt/src/dh.c ****     0x3B, 0xB5, 0xFC, 0xBC, 0x2E, 0xC2, 0x20, 0x05,
 197:../src/wolfcrypt/src/dh.c ****     0xC5, 0x8E, 0xF1, 0x83, 0x7D, 0x16, 0x83, 0xB2,
 198:../src/wolfcrypt/src/dh.c ****     0xC6, 0xF3, 0x4A, 0x26, 0xC1, 0xB2, 0xEF, 0xFA,
 199:../src/wolfcrypt/src/dh.c ****     0x88, 0x6B, 0x42, 0x38, 0x61, 0x1F, 0xCF, 0xDC,
 200:../src/wolfcrypt/src/dh.c ****     0xDE, 0x35, 0x5B, 0x3B, 0x65, 0x19, 0x03, 0x5B,
 201:../src/wolfcrypt/src/dh.c ****     0xBC, 0x34, 0xF4, 0xDE, 0xF9, 0x9C, 0x02, 0x38,
 202:../src/wolfcrypt/src/dh.c ****     0x61, 0xB4, 0x6F, 0xC9, 0xD6, 0xE6, 0xC9, 0x07,
 203:../src/wolfcrypt/src/dh.c ****     0x7A, 0xD9, 0x1D, 0x26, 0x91, 0xF7, 0xF7, 0xEE,
 204:../src/wolfcrypt/src/dh.c ****     0x59, 0x8C, 0xB0, 0xFA, 0xC1, 0x86, 0xD9, 0x1C,
 205:../src/wolfcrypt/src/dh.c ****     0xAE, 0xFE, 0x13, 0x09, 0x85, 0x13, 0x92, 0x70,
 206:../src/wolfcrypt/src/dh.c ****     0xB4, 0x13, 0x0C, 0x93, 0xBC, 0x43, 0x79, 0x44,
 207:../src/wolfcrypt/src/dh.c ****     0xF4, 0xFD, 0x44, 0x52, 0xE2, 0xD7, 0x4D, 0xD3,
 208:../src/wolfcrypt/src/dh.c ****     0x64, 0xF2, 0xE2, 0x1E, 0x71, 0xF5, 0x4B, 0xFF,
 209:../src/wolfcrypt/src/dh.c ****     0x5C, 0xAE, 0x82, 0xAB, 0x9C, 0x9D, 0xF6, 0x9E,
 210:../src/wolfcrypt/src/dh.c ****     0xE8, 0x6D, 0x2B, 0xC5, 0x22, 0x36, 0x3A, 0x0D,
 211:../src/wolfcrypt/src/dh.c ****     0xAB, 0xC5, 0x21, 0x97, 0x9B, 0x0D, 0xEA, 0xDA,
 212:../src/wolfcrypt/src/dh.c ****     0x1D, 0xBF, 0x9A, 0x42, 0xD5, 0xC4, 0x48, 0x4E,
 213:../src/wolfcrypt/src/dh.c ****     0x0A, 0xBC, 0xD0, 0x6B, 0xFA, 0x53, 0xDD, 0xEF,
 214:../src/wolfcrypt/src/dh.c ****     0x3C, 0x1B, 0x20, 0xEE, 0x3F, 0xD5, 0x9D, 0x7C,
 215:../src/wolfcrypt/src/dh.c ****     0x25, 0xE4, 0x1D, 0x2B, 0x66, 0xC6, 0x2E, 0x37,
 216:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
 217:../src/wolfcrypt/src/dh.c **** };
 218:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe3072_g[] = { 0x02 };
 219:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_FFDHE_Q
 220:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe3072_q[] = {
 221:../src/wolfcrypt/src/dh.c ****     0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 222:../src/wolfcrypt/src/dh.c ****     0xD6, 0xFC, 0x2A, 0x2C, 0x51, 0x5D, 0xA5, 0x4D,
 223:../src/wolfcrypt/src/dh.c ****     0x57, 0xEE, 0x2B, 0x10, 0x13, 0x9E, 0x9E, 0x78,
 224:../src/wolfcrypt/src/dh.c ****     0xEC, 0x5C, 0xE2, 0xC1, 0xE7, 0x16, 0x9B, 0x4A,
 225:../src/wolfcrypt/src/dh.c ****     0xD4, 0xF0, 0x9B, 0x20, 0x8A, 0x32, 0x19, 0xFD,
 226:../src/wolfcrypt/src/dh.c ****     0xE6, 0x49, 0xCE, 0xE7, 0x12, 0x4D, 0x9F, 0x7C,
 227:../src/wolfcrypt/src/dh.c ****     0xBE, 0x97, 0xF1, 0xB1, 0xB1, 0x86, 0x3A, 0xEC,
 228:../src/wolfcrypt/src/dh.c ****     0x7B, 0x40, 0xD9, 0x01, 0x57, 0x62, 0x30, 0xBD,
 229:../src/wolfcrypt/src/dh.c ****     0x69, 0xEF, 0x8F, 0x6A, 0xEA, 0xFE, 0xB2, 0xB0,
 230:../src/wolfcrypt/src/dh.c ****     0x92, 0x19, 0xFA, 0x8F, 0xAF, 0x83, 0x37, 0x68,
 231:../src/wolfcrypt/src/dh.c ****     0x42, 0xB1, 0xB2, 0xAA, 0x9E, 0xF6, 0x8D, 0x79,
 232:../src/wolfcrypt/src/dh.c ****     0xDA, 0xAB, 0x89, 0xAF, 0x3F, 0xAB, 0xE4, 0x9A,
 233:../src/wolfcrypt/src/dh.c ****     0xCC, 0x27, 0x86, 0x38, 0x70, 0x73, 0x45, 0xBB,
 234:../src/wolfcrypt/src/dh.c ****     0xF1, 0x53, 0x44, 0xED, 0x79, 0xF7, 0xF4, 0x39,
 235:../src/wolfcrypt/src/dh.c ****     0x0E, 0xF8, 0xAC, 0x50, 0x9B, 0x56, 0xF3, 0x9A,
 236:../src/wolfcrypt/src/dh.c ****     0x98, 0x56, 0x65, 0x27, 0xA4, 0x1D, 0x3C, 0xBD,
 237:../src/wolfcrypt/src/dh.c ****     0x5E, 0x05, 0x58, 0xC1, 0x59, 0x92, 0x7D, 0xB0,
 238:../src/wolfcrypt/src/dh.c ****     0xE8, 0x84, 0x54, 0xA5, 0xD9, 0x64, 0x71, 0xFD,
 239:../src/wolfcrypt/src/dh.c ****     0xDC, 0xB5, 0x6D, 0x5B, 0xB0, 0x6B, 0xFA, 0x34,
 240:../src/wolfcrypt/src/dh.c ****     0x0E, 0xA7, 0xA1, 0x51, 0xEF, 0x1C, 0xA6, 0xFA,
 241:../src/wolfcrypt/src/dh.c ****     0x57, 0x2B, 0x76, 0xF3, 0xB1, 0xB9, 0x5D, 0x8C,
 242:../src/wolfcrypt/src/dh.c ****     0x85, 0x83, 0xD3, 0xE4, 0x77, 0x05, 0x36, 0xB8,
 243:../src/wolfcrypt/src/dh.c ****     0x4F, 0x01, 0x7E, 0x70, 0xE6, 0xFB, 0xF1, 0x76,
 244:../src/wolfcrypt/src/dh.c ****     0x60, 0x1A, 0x02, 0x66, 0x94, 0x1A, 0x17, 0xB0,
 245:../src/wolfcrypt/src/dh.c ****     0xC8, 0xB9, 0x7F, 0x4E, 0x74, 0xC2, 0xC1, 0xFF,
 246:../src/wolfcrypt/src/dh.c ****     0xC7, 0x27, 0x89, 0x19, 0x77, 0x79, 0x40, 0xC1,
 247:../src/wolfcrypt/src/dh.c ****     0xE1, 0xFF, 0x1D, 0x8D, 0xA6, 0x37, 0xD6, 0xB9,
 248:../src/wolfcrypt/src/dh.c ****     0x9D, 0xDA, 0xFE, 0x5E, 0x17, 0x61, 0x10, 0x02,
 249:../src/wolfcrypt/src/dh.c ****     0xE2, 0xC7, 0x78, 0xC1, 0xBE, 0x8B, 0x41, 0xD9,
 250:../src/wolfcrypt/src/dh.c ****     0x63, 0x79, 0xA5, 0x13, 0x60, 0xD9, 0x77, 0xFD,
 251:../src/wolfcrypt/src/dh.c ****     0x44, 0x35, 0xA1, 0x1C, 0x30, 0x8F, 0xE7, 0xEE,
 252:../src/wolfcrypt/src/dh.c ****     0x6F, 0x1A, 0xAD, 0x9D, 0xB2, 0x8C, 0x81, 0xAD,
 253:../src/wolfcrypt/src/dh.c ****     0xDE, 0x1A, 0x7A, 0x6F, 0x7C, 0xCE, 0x01, 0x1C,
 254:../src/wolfcrypt/src/dh.c ****     0x30, 0xDA, 0x37, 0xE4, 0xEB, 0x73, 0x64, 0x83,
 255:../src/wolfcrypt/src/dh.c ****     0xBD, 0x6C, 0x8E, 0x93, 0x48, 0xFB, 0xFB, 0xF7,
 256:../src/wolfcrypt/src/dh.c ****     0x2C, 0xC6, 0x58, 0x7D, 0x60, 0xC3, 0x6C, 0x8E,
 257:../src/wolfcrypt/src/dh.c ****     0x57, 0x7F, 0x09, 0x84, 0xC2, 0x89, 0xC9, 0x38,
 258:../src/wolfcrypt/src/dh.c ****     0x5A, 0x09, 0x86, 0x49, 0xDE, 0x21, 0xBC, 0xA2,
 259:../src/wolfcrypt/src/dh.c ****     0x7A, 0x7E, 0xA2, 0x29, 0x71, 0x6B, 0xA6, 0xE9,
 260:../src/wolfcrypt/src/dh.c ****     0xB2, 0x79, 0x71, 0x0F, 0x38, 0xFA, 0xA5, 0xFF,
 261:../src/wolfcrypt/src/dh.c ****     0xAE, 0x57, 0x41, 0x55, 0xCE, 0x4E, 0xFB, 0x4F,
 262:../src/wolfcrypt/src/dh.c ****     0x74, 0x36, 0x95, 0xE2, 0x91, 0x1B, 0x1D, 0x06,
 263:../src/wolfcrypt/src/dh.c ****     0xD5, 0xE2, 0x90, 0xCB, 0xCD, 0x86, 0xF5, 0x6D,
 264:../src/wolfcrypt/src/dh.c ****     0x0E, 0xDF, 0xCD, 0x21, 0x6A, 0xE2, 0x24, 0x27,
 265:../src/wolfcrypt/src/dh.c ****     0x05, 0x5E, 0x68, 0x35, 0xFD, 0x29, 0xEE, 0xF7,
 266:../src/wolfcrypt/src/dh.c ****     0x9E, 0x0D, 0x90, 0x77, 0x1F, 0xEA, 0xCE, 0xBE,
 267:../src/wolfcrypt/src/dh.c ****     0x12, 0xF2, 0x0E, 0x95, 0xB3, 0x63, 0x17, 0x1B,
 268:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
 269:../src/wolfcrypt/src/dh.c **** };
 270:../src/wolfcrypt/src/dh.c **** #endif /* HAVE_FFDHE_Q */
 271:../src/wolfcrypt/src/dh.c **** 
 272:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_PUBLIC_FFDHE
 273:../src/wolfcrypt/src/dh.c **** const DhParams* wc_Dh_ffdhe3072_Get(void)
 274:../src/wolfcrypt/src/dh.c **** {
 275:../src/wolfcrypt/src/dh.c ****     static const DhParams ffdhe3072 = {
 276:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_Q
 277:../src/wolfcrypt/src/dh.c ****             dh_ffdhe3072_q, sizeof(dh_ffdhe3072_q),
 278:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_Q */
 279:../src/wolfcrypt/src/dh.c ****         dh_ffdhe3072_p, sizeof(dh_ffdhe3072_p),
 280:../src/wolfcrypt/src/dh.c ****         dh_ffdhe3072_g, sizeof(dh_ffdhe3072_g)
 281:../src/wolfcrypt/src/dh.c ****     };
 282:../src/wolfcrypt/src/dh.c ****     return &ffdhe3072;
 283:../src/wolfcrypt/src/dh.c **** }
 284:../src/wolfcrypt/src/dh.c **** #endif
 285:../src/wolfcrypt/src/dh.c **** #endif
 286:../src/wolfcrypt/src/dh.c **** 
 287:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_FFDHE_4096
 288:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe4096_p[] = {
 289:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 290:../src/wolfcrypt/src/dh.c ****     0xAD, 0xF8, 0x54, 0x58, 0xA2, 0xBB, 0x4A, 0x9A,
 291:../src/wolfcrypt/src/dh.c ****     0xAF, 0xDC, 0x56, 0x20, 0x27, 0x3D, 0x3C, 0xF1,
 292:../src/wolfcrypt/src/dh.c ****     0xD8, 0xB9, 0xC5, 0x83, 0xCE, 0x2D, 0x36, 0x95,
 293:../src/wolfcrypt/src/dh.c ****     0xA9, 0xE1, 0x36, 0x41, 0x14, 0x64, 0x33, 0xFB,
 294:../src/wolfcrypt/src/dh.c ****     0xCC, 0x93, 0x9D, 0xCE, 0x24, 0x9B, 0x3E, 0xF9,
 295:../src/wolfcrypt/src/dh.c ****     0x7D, 0x2F, 0xE3, 0x63, 0x63, 0x0C, 0x75, 0xD8,
 296:../src/wolfcrypt/src/dh.c ****     0xF6, 0x81, 0xB2, 0x02, 0xAE, 0xC4, 0x61, 0x7A,
 297:../src/wolfcrypt/src/dh.c ****     0xD3, 0xDF, 0x1E, 0xD5, 0xD5, 0xFD, 0x65, 0x61,
 298:../src/wolfcrypt/src/dh.c ****     0x24, 0x33, 0xF5, 0x1F, 0x5F, 0x06, 0x6E, 0xD0,
 299:../src/wolfcrypt/src/dh.c ****     0x85, 0x63, 0x65, 0x55, 0x3D, 0xED, 0x1A, 0xF3,
 300:../src/wolfcrypt/src/dh.c ****     0xB5, 0x57, 0x13, 0x5E, 0x7F, 0x57, 0xC9, 0x35,
 301:../src/wolfcrypt/src/dh.c ****     0x98, 0x4F, 0x0C, 0x70, 0xE0, 0xE6, 0x8B, 0x77,
 302:../src/wolfcrypt/src/dh.c ****     0xE2, 0xA6, 0x89, 0xDA, 0xF3, 0xEF, 0xE8, 0x72,
 303:../src/wolfcrypt/src/dh.c ****     0x1D, 0xF1, 0x58, 0xA1, 0x36, 0xAD, 0xE7, 0x35,
 304:../src/wolfcrypt/src/dh.c ****     0x30, 0xAC, 0xCA, 0x4F, 0x48, 0x3A, 0x79, 0x7A,
 305:../src/wolfcrypt/src/dh.c ****     0xBC, 0x0A, 0xB1, 0x82, 0xB3, 0x24, 0xFB, 0x61,
 306:../src/wolfcrypt/src/dh.c ****     0xD1, 0x08, 0xA9, 0x4B, 0xB2, 0xC8, 0xE3, 0xFB,
 307:../src/wolfcrypt/src/dh.c ****     0xB9, 0x6A, 0xDA, 0xB7, 0x60, 0xD7, 0xF4, 0x68,
 308:../src/wolfcrypt/src/dh.c ****     0x1D, 0x4F, 0x42, 0xA3, 0xDE, 0x39, 0x4D, 0xF4,
 309:../src/wolfcrypt/src/dh.c ****     0xAE, 0x56, 0xED, 0xE7, 0x63, 0x72, 0xBB, 0x19,
 310:../src/wolfcrypt/src/dh.c ****     0x0B, 0x07, 0xA7, 0xC8, 0xEE, 0x0A, 0x6D, 0x70,
 311:../src/wolfcrypt/src/dh.c ****     0x9E, 0x02, 0xFC, 0xE1, 0xCD, 0xF7, 0xE2, 0xEC,
 312:../src/wolfcrypt/src/dh.c ****     0xC0, 0x34, 0x04, 0xCD, 0x28, 0x34, 0x2F, 0x61,
 313:../src/wolfcrypt/src/dh.c ****     0x91, 0x72, 0xFE, 0x9C, 0xE9, 0x85, 0x83, 0xFF,
 314:../src/wolfcrypt/src/dh.c ****     0x8E, 0x4F, 0x12, 0x32, 0xEE, 0xF2, 0x81, 0x83,
 315:../src/wolfcrypt/src/dh.c ****     0xC3, 0xFE, 0x3B, 0x1B, 0x4C, 0x6F, 0xAD, 0x73,
 316:../src/wolfcrypt/src/dh.c ****     0x3B, 0xB5, 0xFC, 0xBC, 0x2E, 0xC2, 0x20, 0x05,
 317:../src/wolfcrypt/src/dh.c ****     0xC5, 0x8E, 0xF1, 0x83, 0x7D, 0x16, 0x83, 0xB2,
 318:../src/wolfcrypt/src/dh.c ****     0xC6, 0xF3, 0x4A, 0x26, 0xC1, 0xB2, 0xEF, 0xFA,
 319:../src/wolfcrypt/src/dh.c ****     0x88, 0x6B, 0x42, 0x38, 0x61, 0x1F, 0xCF, 0xDC,
 320:../src/wolfcrypt/src/dh.c ****     0xDE, 0x35, 0x5B, 0x3B, 0x65, 0x19, 0x03, 0x5B,
 321:../src/wolfcrypt/src/dh.c ****     0xBC, 0x34, 0xF4, 0xDE, 0xF9, 0x9C, 0x02, 0x38,
 322:../src/wolfcrypt/src/dh.c ****     0x61, 0xB4, 0x6F, 0xC9, 0xD6, 0xE6, 0xC9, 0x07,
 323:../src/wolfcrypt/src/dh.c ****     0x7A, 0xD9, 0x1D, 0x26, 0x91, 0xF7, 0xF7, 0xEE,
 324:../src/wolfcrypt/src/dh.c ****     0x59, 0x8C, 0xB0, 0xFA, 0xC1, 0x86, 0xD9, 0x1C,
 325:../src/wolfcrypt/src/dh.c ****     0xAE, 0xFE, 0x13, 0x09, 0x85, 0x13, 0x92, 0x70,
 326:../src/wolfcrypt/src/dh.c ****     0xB4, 0x13, 0x0C, 0x93, 0xBC, 0x43, 0x79, 0x44,
 327:../src/wolfcrypt/src/dh.c ****     0xF4, 0xFD, 0x44, 0x52, 0xE2, 0xD7, 0x4D, 0xD3,
 328:../src/wolfcrypt/src/dh.c ****     0x64, 0xF2, 0xE2, 0x1E, 0x71, 0xF5, 0x4B, 0xFF,
 329:../src/wolfcrypt/src/dh.c ****     0x5C, 0xAE, 0x82, 0xAB, 0x9C, 0x9D, 0xF6, 0x9E,
 330:../src/wolfcrypt/src/dh.c ****     0xE8, 0x6D, 0x2B, 0xC5, 0x22, 0x36, 0x3A, 0x0D,
 331:../src/wolfcrypt/src/dh.c ****     0xAB, 0xC5, 0x21, 0x97, 0x9B, 0x0D, 0xEA, 0xDA,
 332:../src/wolfcrypt/src/dh.c ****     0x1D, 0xBF, 0x9A, 0x42, 0xD5, 0xC4, 0x48, 0x4E,
 333:../src/wolfcrypt/src/dh.c ****     0x0A, 0xBC, 0xD0, 0x6B, 0xFA, 0x53, 0xDD, 0xEF,
 334:../src/wolfcrypt/src/dh.c ****     0x3C, 0x1B, 0x20, 0xEE, 0x3F, 0xD5, 0x9D, 0x7C,
 335:../src/wolfcrypt/src/dh.c ****     0x25, 0xE4, 0x1D, 0x2B, 0x66, 0x9E, 0x1E, 0xF1,
 336:../src/wolfcrypt/src/dh.c ****     0x6E, 0x6F, 0x52, 0xC3, 0x16, 0x4D, 0xF4, 0xFB,
 337:../src/wolfcrypt/src/dh.c ****     0x79, 0x30, 0xE9, 0xE4, 0xE5, 0x88, 0x57, 0xB6,
 338:../src/wolfcrypt/src/dh.c ****     0xAC, 0x7D, 0x5F, 0x42, 0xD6, 0x9F, 0x6D, 0x18,
 339:../src/wolfcrypt/src/dh.c ****     0x77, 0x63, 0xCF, 0x1D, 0x55, 0x03, 0x40, 0x04,
 340:../src/wolfcrypt/src/dh.c ****     0x87, 0xF5, 0x5B, 0xA5, 0x7E, 0x31, 0xCC, 0x7A,
 341:../src/wolfcrypt/src/dh.c ****     0x71, 0x35, 0xC8, 0x86, 0xEF, 0xB4, 0x31, 0x8A,
 342:../src/wolfcrypt/src/dh.c ****     0xED, 0x6A, 0x1E, 0x01, 0x2D, 0x9E, 0x68, 0x32,
 343:../src/wolfcrypt/src/dh.c ****     0xA9, 0x07, 0x60, 0x0A, 0x91, 0x81, 0x30, 0xC4,
 344:../src/wolfcrypt/src/dh.c ****     0x6D, 0xC7, 0x78, 0xF9, 0x71, 0xAD, 0x00, 0x38,
 345:../src/wolfcrypt/src/dh.c ****     0x09, 0x29, 0x99, 0xA3, 0x33, 0xCB, 0x8B, 0x7A,
 346:../src/wolfcrypt/src/dh.c ****     0x1A, 0x1D, 0xB9, 0x3D, 0x71, 0x40, 0x00, 0x3C,
 347:../src/wolfcrypt/src/dh.c ****     0x2A, 0x4E, 0xCE, 0xA9, 0xF9, 0x8D, 0x0A, 0xCC,
 348:../src/wolfcrypt/src/dh.c ****     0x0A, 0x82, 0x91, 0xCD, 0xCE, 0xC9, 0x7D, 0xCF,
 349:../src/wolfcrypt/src/dh.c ****     0x8E, 0xC9, 0xB5, 0x5A, 0x7F, 0x88, 0xA4, 0x6B,
 350:../src/wolfcrypt/src/dh.c ****     0x4D, 0xB5, 0xA8, 0x51, 0xF4, 0x41, 0x82, 0xE1,
 351:../src/wolfcrypt/src/dh.c ****     0xC6, 0x8A, 0x00, 0x7E, 0x5E, 0x65, 0x5F, 0x6A,
 352:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
 353:../src/wolfcrypt/src/dh.c **** };
 354:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe4096_g[] = { 0x02 };
 355:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_FFDHE_Q
 356:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe4096_q[] = {
 357:../src/wolfcrypt/src/dh.c ****     0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 358:../src/wolfcrypt/src/dh.c ****     0xD6, 0xFC, 0x2A, 0x2C, 0x51, 0x5D, 0xA5, 0x4D,
 359:../src/wolfcrypt/src/dh.c ****     0x57, 0xEE, 0x2B, 0x10, 0x13, 0x9E, 0x9E, 0x78,
 360:../src/wolfcrypt/src/dh.c ****     0xEC, 0x5C, 0xE2, 0xC1, 0xE7, 0x16, 0x9B, 0x4A,
 361:../src/wolfcrypt/src/dh.c ****     0xD4, 0xF0, 0x9B, 0x20, 0x8A, 0x32, 0x19, 0xFD,
 362:../src/wolfcrypt/src/dh.c ****     0xE6, 0x49, 0xCE, 0xE7, 0x12, 0x4D, 0x9F, 0x7C,
 363:../src/wolfcrypt/src/dh.c ****     0xBE, 0x97, 0xF1, 0xB1, 0xB1, 0x86, 0x3A, 0xEC,
 364:../src/wolfcrypt/src/dh.c ****     0x7B, 0x40, 0xD9, 0x01, 0x57, 0x62, 0x30, 0xBD,
 365:../src/wolfcrypt/src/dh.c ****     0x69, 0xEF, 0x8F, 0x6A, 0xEA, 0xFE, 0xB2, 0xB0,
 366:../src/wolfcrypt/src/dh.c ****     0x92, 0x19, 0xFA, 0x8F, 0xAF, 0x83, 0x37, 0x68,
 367:../src/wolfcrypt/src/dh.c ****     0x42, 0xB1, 0xB2, 0xAA, 0x9E, 0xF6, 0x8D, 0x79,
 368:../src/wolfcrypt/src/dh.c ****     0xDA, 0xAB, 0x89, 0xAF, 0x3F, 0xAB, 0xE4, 0x9A,
 369:../src/wolfcrypt/src/dh.c ****     0xCC, 0x27, 0x86, 0x38, 0x70, 0x73, 0x45, 0xBB,
 370:../src/wolfcrypt/src/dh.c ****     0xF1, 0x53, 0x44, 0xED, 0x79, 0xF7, 0xF4, 0x39,
 371:../src/wolfcrypt/src/dh.c ****     0x0E, 0xF8, 0xAC, 0x50, 0x9B, 0x56, 0xF3, 0x9A,
 372:../src/wolfcrypt/src/dh.c ****     0x98, 0x56, 0x65, 0x27, 0xA4, 0x1D, 0x3C, 0xBD,
 373:../src/wolfcrypt/src/dh.c ****     0x5E, 0x05, 0x58, 0xC1, 0x59, 0x92, 0x7D, 0xB0,
 374:../src/wolfcrypt/src/dh.c ****     0xE8, 0x84, 0x54, 0xA5, 0xD9, 0x64, 0x71, 0xFD,
 375:../src/wolfcrypt/src/dh.c ****     0xDC, 0xB5, 0x6D, 0x5B, 0xB0, 0x6B, 0xFA, 0x34,
 376:../src/wolfcrypt/src/dh.c ****     0x0E, 0xA7, 0xA1, 0x51, 0xEF, 0x1C, 0xA6, 0xFA,
 377:../src/wolfcrypt/src/dh.c ****     0x57, 0x2B, 0x76, 0xF3, 0xB1, 0xB9, 0x5D, 0x8C,
 378:../src/wolfcrypt/src/dh.c ****     0x85, 0x83, 0xD3, 0xE4, 0x77, 0x05, 0x36, 0xB8,
 379:../src/wolfcrypt/src/dh.c ****     0x4F, 0x01, 0x7E, 0x70, 0xE6, 0xFB, 0xF1, 0x76,
 380:../src/wolfcrypt/src/dh.c ****     0x60, 0x1A, 0x02, 0x66, 0x94, 0x1A, 0x17, 0xB0,
 381:../src/wolfcrypt/src/dh.c ****     0xC8, 0xB9, 0x7F, 0x4E, 0x74, 0xC2, 0xC1, 0xFF,
 382:../src/wolfcrypt/src/dh.c ****     0xC7, 0x27, 0x89, 0x19, 0x77, 0x79, 0x40, 0xC1,
 383:../src/wolfcrypt/src/dh.c ****     0xE1, 0xFF, 0x1D, 0x8D, 0xA6, 0x37, 0xD6, 0xB9,
 384:../src/wolfcrypt/src/dh.c ****     0x9D, 0xDA, 0xFE, 0x5E, 0x17, 0x61, 0x10, 0x02,
 385:../src/wolfcrypt/src/dh.c ****     0xE2, 0xC7, 0x78, 0xC1, 0xBE, 0x8B, 0x41, 0xD9,
 386:../src/wolfcrypt/src/dh.c ****     0x63, 0x79, 0xA5, 0x13, 0x60, 0xD9, 0x77, 0xFD,
 387:../src/wolfcrypt/src/dh.c ****     0x44, 0x35, 0xA1, 0x1C, 0x30, 0x8F, 0xE7, 0xEE,
 388:../src/wolfcrypt/src/dh.c ****     0x6F, 0x1A, 0xAD, 0x9D, 0xB2, 0x8C, 0x81, 0xAD,
 389:../src/wolfcrypt/src/dh.c ****     0xDE, 0x1A, 0x7A, 0x6F, 0x7C, 0xCE, 0x01, 0x1C,
 390:../src/wolfcrypt/src/dh.c ****     0x30, 0xDA, 0x37, 0xE4, 0xEB, 0x73, 0x64, 0x83,
 391:../src/wolfcrypt/src/dh.c ****     0xBD, 0x6C, 0x8E, 0x93, 0x48, 0xFB, 0xFB, 0xF7,
 392:../src/wolfcrypt/src/dh.c ****     0x2C, 0xC6, 0x58, 0x7D, 0x60, 0xC3, 0x6C, 0x8E,
 393:../src/wolfcrypt/src/dh.c ****     0x57, 0x7F, 0x09, 0x84, 0xC2, 0x89, 0xC9, 0x38,
 394:../src/wolfcrypt/src/dh.c ****     0x5A, 0x09, 0x86, 0x49, 0xDE, 0x21, 0xBC, 0xA2,
 395:../src/wolfcrypt/src/dh.c ****     0x7A, 0x7E, 0xA2, 0x29, 0x71, 0x6B, 0xA6, 0xE9,
 396:../src/wolfcrypt/src/dh.c ****     0xB2, 0x79, 0x71, 0x0F, 0x38, 0xFA, 0xA5, 0xFF,
 397:../src/wolfcrypt/src/dh.c ****     0xAE, 0x57, 0x41, 0x55, 0xCE, 0x4E, 0xFB, 0x4F,
 398:../src/wolfcrypt/src/dh.c ****     0x74, 0x36, 0x95, 0xE2, 0x91, 0x1B, 0x1D, 0x06,
 399:../src/wolfcrypt/src/dh.c ****     0xD5, 0xE2, 0x90, 0xCB, 0xCD, 0x86, 0xF5, 0x6D,
 400:../src/wolfcrypt/src/dh.c ****     0x0E, 0xDF, 0xCD, 0x21, 0x6A, 0xE2, 0x24, 0x27,
 401:../src/wolfcrypt/src/dh.c ****     0x05, 0x5E, 0x68, 0x35, 0xFD, 0x29, 0xEE, 0xF7,
 402:../src/wolfcrypt/src/dh.c ****     0x9E, 0x0D, 0x90, 0x77, 0x1F, 0xEA, 0xCE, 0xBE,
 403:../src/wolfcrypt/src/dh.c ****     0x12, 0xF2, 0x0E, 0x95, 0xB3, 0x4F, 0x0F, 0x78,
 404:../src/wolfcrypt/src/dh.c ****     0xB7, 0x37, 0xA9, 0x61, 0x8B, 0x26, 0xFA, 0x7D,
 405:../src/wolfcrypt/src/dh.c ****     0xBC, 0x98, 0x74, 0xF2, 0x72, 0xC4, 0x2B, 0xDB,
 406:../src/wolfcrypt/src/dh.c ****     0x56, 0x3E, 0xAF, 0xA1, 0x6B, 0x4F, 0xB6, 0x8C,
 407:../src/wolfcrypt/src/dh.c ****     0x3B, 0xB1, 0xE7, 0x8E, 0xAA, 0x81, 0xA0, 0x02,
 408:../src/wolfcrypt/src/dh.c ****     0x43, 0xFA, 0xAD, 0xD2, 0xBF, 0x18, 0xE6, 0x3D,
 409:../src/wolfcrypt/src/dh.c ****     0x38, 0x9A, 0xE4, 0x43, 0x77, 0xDA, 0x18, 0xC5,
 410:../src/wolfcrypt/src/dh.c ****     0x76, 0xB5, 0x0F, 0x00, 0x96, 0xCF, 0x34, 0x19,
 411:../src/wolfcrypt/src/dh.c ****     0x54, 0x83, 0xB0, 0x05, 0x48, 0xC0, 0x98, 0x62,
 412:../src/wolfcrypt/src/dh.c ****     0x36, 0xE3, 0xBC, 0x7C, 0xB8, 0xD6, 0x80, 0x1C,
 413:../src/wolfcrypt/src/dh.c ****     0x04, 0x94, 0xCC, 0xD1, 0x99, 0xE5, 0xC5, 0xBD,
 414:../src/wolfcrypt/src/dh.c ****     0x0D, 0x0E, 0xDC, 0x9E, 0xB8, 0xA0, 0x00, 0x1E,
 415:../src/wolfcrypt/src/dh.c ****     0x15, 0x27, 0x67, 0x54, 0xFC, 0xC6, 0x85, 0x66,
 416:../src/wolfcrypt/src/dh.c ****     0x05, 0x41, 0x48, 0xE6, 0xE7, 0x64, 0xBE, 0xE7,
 417:../src/wolfcrypt/src/dh.c ****     0xC7, 0x64, 0xDA, 0xAD, 0x3F, 0xC4, 0x52, 0x35,
 418:../src/wolfcrypt/src/dh.c ****     0xA6, 0xDA, 0xD4, 0x28, 0xFA, 0x20, 0xC1, 0x70,
 419:../src/wolfcrypt/src/dh.c ****     0xE3, 0x45, 0x00, 0x3F, 0x2F, 0x32, 0xAF, 0xB5,
 420:../src/wolfcrypt/src/dh.c ****     0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
 421:../src/wolfcrypt/src/dh.c **** };
 422:../src/wolfcrypt/src/dh.c **** #endif /* HAVE_FFDHE_Q */
 423:../src/wolfcrypt/src/dh.c **** 
 424:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_PUBLIC_FFDHE
 425:../src/wolfcrypt/src/dh.c **** const DhParams* wc_Dh_ffdhe4096_Get(void)
 426:../src/wolfcrypt/src/dh.c **** {
 427:../src/wolfcrypt/src/dh.c ****     static const DhParams ffdhe4096 = {
 428:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_Q
 429:../src/wolfcrypt/src/dh.c ****             dh_ffdhe4096_q, sizeof(dh_ffdhe4096_q),
 430:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_Q */
 431:../src/wolfcrypt/src/dh.c ****         dh_ffdhe4096_p, sizeof(dh_ffdhe4096_p),
 432:../src/wolfcrypt/src/dh.c ****         dh_ffdhe4096_g, sizeof(dh_ffdhe4096_g)
 433:../src/wolfcrypt/src/dh.c ****     };
 434:../src/wolfcrypt/src/dh.c ****     return &ffdhe4096;
 435:../src/wolfcrypt/src/dh.c **** }
 436:../src/wolfcrypt/src/dh.c **** #endif
 437:../src/wolfcrypt/src/dh.c **** #endif
 438:../src/wolfcrypt/src/dh.c **** 
 439:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_FFDHE_6144
 440:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe6144_p[] = {
 441:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 442:../src/wolfcrypt/src/dh.c ****     0xAD, 0xF8, 0x54, 0x58, 0xA2, 0xBB, 0x4A, 0x9A,
 443:../src/wolfcrypt/src/dh.c ****     0xAF, 0xDC, 0x56, 0x20, 0x27, 0x3D, 0x3C, 0xF1,
 444:../src/wolfcrypt/src/dh.c ****     0xD8, 0xB9, 0xC5, 0x83, 0xCE, 0x2D, 0x36, 0x95,
 445:../src/wolfcrypt/src/dh.c ****     0xA9, 0xE1, 0x36, 0x41, 0x14, 0x64, 0x33, 0xFB,
 446:../src/wolfcrypt/src/dh.c ****     0xCC, 0x93, 0x9D, 0xCE, 0x24, 0x9B, 0x3E, 0xF9,
 447:../src/wolfcrypt/src/dh.c ****     0x7D, 0x2F, 0xE3, 0x63, 0x63, 0x0C, 0x75, 0xD8,
 448:../src/wolfcrypt/src/dh.c ****     0xF6, 0x81, 0xB2, 0x02, 0xAE, 0xC4, 0x61, 0x7A,
 449:../src/wolfcrypt/src/dh.c ****     0xD3, 0xDF, 0x1E, 0xD5, 0xD5, 0xFD, 0x65, 0x61,
 450:../src/wolfcrypt/src/dh.c ****     0x24, 0x33, 0xF5, 0x1F, 0x5F, 0x06, 0x6E, 0xD0,
 451:../src/wolfcrypt/src/dh.c ****     0x85, 0x63, 0x65, 0x55, 0x3D, 0xED, 0x1A, 0xF3,
 452:../src/wolfcrypt/src/dh.c ****     0xB5, 0x57, 0x13, 0x5E, 0x7F, 0x57, 0xC9, 0x35,
 453:../src/wolfcrypt/src/dh.c ****     0x98, 0x4F, 0x0C, 0x70, 0xE0, 0xE6, 0x8B, 0x77,
 454:../src/wolfcrypt/src/dh.c ****     0xE2, 0xA6, 0x89, 0xDA, 0xF3, 0xEF, 0xE8, 0x72,
 455:../src/wolfcrypt/src/dh.c ****     0x1D, 0xF1, 0x58, 0xA1, 0x36, 0xAD, 0xE7, 0x35,
 456:../src/wolfcrypt/src/dh.c ****     0x30, 0xAC, 0xCA, 0x4F, 0x48, 0x3A, 0x79, 0x7A,
 457:../src/wolfcrypt/src/dh.c ****     0xBC, 0x0A, 0xB1, 0x82, 0xB3, 0x24, 0xFB, 0x61,
 458:../src/wolfcrypt/src/dh.c ****     0xD1, 0x08, 0xA9, 0x4B, 0xB2, 0xC8, 0xE3, 0xFB,
 459:../src/wolfcrypt/src/dh.c ****     0xB9, 0x6A, 0xDA, 0xB7, 0x60, 0xD7, 0xF4, 0x68,
 460:../src/wolfcrypt/src/dh.c ****     0x1D, 0x4F, 0x42, 0xA3, 0xDE, 0x39, 0x4D, 0xF4,
 461:../src/wolfcrypt/src/dh.c ****     0xAE, 0x56, 0xED, 0xE7, 0x63, 0x72, 0xBB, 0x19,
 462:../src/wolfcrypt/src/dh.c ****     0x0B, 0x07, 0xA7, 0xC8, 0xEE, 0x0A, 0x6D, 0x70,
 463:../src/wolfcrypt/src/dh.c ****     0x9E, 0x02, 0xFC, 0xE1, 0xCD, 0xF7, 0xE2, 0xEC,
 464:../src/wolfcrypt/src/dh.c ****     0xC0, 0x34, 0x04, 0xCD, 0x28, 0x34, 0x2F, 0x61,
 465:../src/wolfcrypt/src/dh.c ****     0x91, 0x72, 0xFE, 0x9C, 0xE9, 0x85, 0x83, 0xFF,
 466:../src/wolfcrypt/src/dh.c ****     0x8E, 0x4F, 0x12, 0x32, 0xEE, 0xF2, 0x81, 0x83,
 467:../src/wolfcrypt/src/dh.c ****     0xC3, 0xFE, 0x3B, 0x1B, 0x4C, 0x6F, 0xAD, 0x73,
 468:../src/wolfcrypt/src/dh.c ****     0x3B, 0xB5, 0xFC, 0xBC, 0x2E, 0xC2, 0x20, 0x05,
 469:../src/wolfcrypt/src/dh.c ****     0xC5, 0x8E, 0xF1, 0x83, 0x7D, 0x16, 0x83, 0xB2,
 470:../src/wolfcrypt/src/dh.c ****     0xC6, 0xF3, 0x4A, 0x26, 0xC1, 0xB2, 0xEF, 0xFA,
 471:../src/wolfcrypt/src/dh.c ****     0x88, 0x6B, 0x42, 0x38, 0x61, 0x1F, 0xCF, 0xDC,
 472:../src/wolfcrypt/src/dh.c ****     0xDE, 0x35, 0x5B, 0x3B, 0x65, 0x19, 0x03, 0x5B,
 473:../src/wolfcrypt/src/dh.c ****     0xBC, 0x34, 0xF4, 0xDE, 0xF9, 0x9C, 0x02, 0x38,
 474:../src/wolfcrypt/src/dh.c ****     0x61, 0xB4, 0x6F, 0xC9, 0xD6, 0xE6, 0xC9, 0x07,
 475:../src/wolfcrypt/src/dh.c ****     0x7A, 0xD9, 0x1D, 0x26, 0x91, 0xF7, 0xF7, 0xEE,
 476:../src/wolfcrypt/src/dh.c ****     0x59, 0x8C, 0xB0, 0xFA, 0xC1, 0x86, 0xD9, 0x1C,
 477:../src/wolfcrypt/src/dh.c ****     0xAE, 0xFE, 0x13, 0x09, 0x85, 0x13, 0x92, 0x70,
 478:../src/wolfcrypt/src/dh.c ****     0xB4, 0x13, 0x0C, 0x93, 0xBC, 0x43, 0x79, 0x44,
 479:../src/wolfcrypt/src/dh.c ****     0xF4, 0xFD, 0x44, 0x52, 0xE2, 0xD7, 0x4D, 0xD3,
 480:../src/wolfcrypt/src/dh.c ****     0x64, 0xF2, 0xE2, 0x1E, 0x71, 0xF5, 0x4B, 0xFF,
 481:../src/wolfcrypt/src/dh.c ****     0x5C, 0xAE, 0x82, 0xAB, 0x9C, 0x9D, 0xF6, 0x9E,
 482:../src/wolfcrypt/src/dh.c ****     0xE8, 0x6D, 0x2B, 0xC5, 0x22, 0x36, 0x3A, 0x0D,
 483:../src/wolfcrypt/src/dh.c ****     0xAB, 0xC5, 0x21, 0x97, 0x9B, 0x0D, 0xEA, 0xDA,
 484:../src/wolfcrypt/src/dh.c ****     0x1D, 0xBF, 0x9A, 0x42, 0xD5, 0xC4, 0x48, 0x4E,
 485:../src/wolfcrypt/src/dh.c ****     0x0A, 0xBC, 0xD0, 0x6B, 0xFA, 0x53, 0xDD, 0xEF,
 486:../src/wolfcrypt/src/dh.c ****     0x3C, 0x1B, 0x20, 0xEE, 0x3F, 0xD5, 0x9D, 0x7C,
 487:../src/wolfcrypt/src/dh.c ****     0x25, 0xE4, 0x1D, 0x2B, 0x66, 0x9E, 0x1E, 0xF1,
 488:../src/wolfcrypt/src/dh.c ****     0x6E, 0x6F, 0x52, 0xC3, 0x16, 0x4D, 0xF4, 0xFB,
 489:../src/wolfcrypt/src/dh.c ****     0x79, 0x30, 0xE9, 0xE4, 0xE5, 0x88, 0x57, 0xB6,
 490:../src/wolfcrypt/src/dh.c ****     0xAC, 0x7D, 0x5F, 0x42, 0xD6, 0x9F, 0x6D, 0x18,
 491:../src/wolfcrypt/src/dh.c ****     0x77, 0x63, 0xCF, 0x1D, 0x55, 0x03, 0x40, 0x04,
 492:../src/wolfcrypt/src/dh.c ****     0x87, 0xF5, 0x5B, 0xA5, 0x7E, 0x31, 0xCC, 0x7A,
 493:../src/wolfcrypt/src/dh.c ****     0x71, 0x35, 0xC8, 0x86, 0xEF, 0xB4, 0x31, 0x8A,
 494:../src/wolfcrypt/src/dh.c ****     0xED, 0x6A, 0x1E, 0x01, 0x2D, 0x9E, 0x68, 0x32,
 495:../src/wolfcrypt/src/dh.c ****     0xA9, 0x07, 0x60, 0x0A, 0x91, 0x81, 0x30, 0xC4,
 496:../src/wolfcrypt/src/dh.c ****     0x6D, 0xC7, 0x78, 0xF9, 0x71, 0xAD, 0x00, 0x38,
 497:../src/wolfcrypt/src/dh.c ****     0x09, 0x29, 0x99, 0xA3, 0x33, 0xCB, 0x8B, 0x7A,
 498:../src/wolfcrypt/src/dh.c ****     0x1A, 0x1D, 0xB9, 0x3D, 0x71, 0x40, 0x00, 0x3C,
 499:../src/wolfcrypt/src/dh.c ****     0x2A, 0x4E, 0xCE, 0xA9, 0xF9, 0x8D, 0x0A, 0xCC,
 500:../src/wolfcrypt/src/dh.c ****     0x0A, 0x82, 0x91, 0xCD, 0xCE, 0xC9, 0x7D, 0xCF,
 501:../src/wolfcrypt/src/dh.c ****     0x8E, 0xC9, 0xB5, 0x5A, 0x7F, 0x88, 0xA4, 0x6B,
 502:../src/wolfcrypt/src/dh.c ****     0x4D, 0xB5, 0xA8, 0x51, 0xF4, 0x41, 0x82, 0xE1,
 503:../src/wolfcrypt/src/dh.c ****     0xC6, 0x8A, 0x00, 0x7E, 0x5E, 0x0D, 0xD9, 0x02,
 504:../src/wolfcrypt/src/dh.c ****     0x0B, 0xFD, 0x64, 0xB6, 0x45, 0x03, 0x6C, 0x7A,
 505:../src/wolfcrypt/src/dh.c ****     0x4E, 0x67, 0x7D, 0x2C, 0x38, 0x53, 0x2A, 0x3A,
 506:../src/wolfcrypt/src/dh.c ****     0x23, 0xBA, 0x44, 0x42, 0xCA, 0xF5, 0x3E, 0xA6,
 507:../src/wolfcrypt/src/dh.c ****     0x3B, 0xB4, 0x54, 0x32, 0x9B, 0x76, 0x24, 0xC8,
 508:../src/wolfcrypt/src/dh.c ****     0x91, 0x7B, 0xDD, 0x64, 0xB1, 0xC0, 0xFD, 0x4C,
 509:../src/wolfcrypt/src/dh.c ****     0xB3, 0x8E, 0x8C, 0x33, 0x4C, 0x70, 0x1C, 0x3A,
 510:../src/wolfcrypt/src/dh.c ****     0xCD, 0xAD, 0x06, 0x57, 0xFC, 0xCF, 0xEC, 0x71,
 511:../src/wolfcrypt/src/dh.c ****     0x9B, 0x1F, 0x5C, 0x3E, 0x4E, 0x46, 0x04, 0x1F,
 512:../src/wolfcrypt/src/dh.c ****     0x38, 0x81, 0x47, 0xFB, 0x4C, 0xFD, 0xB4, 0x77,
 513:../src/wolfcrypt/src/dh.c ****     0xA5, 0x24, 0x71, 0xF7, 0xA9, 0xA9, 0x69, 0x10,
 514:../src/wolfcrypt/src/dh.c ****     0xB8, 0x55, 0x32, 0x2E, 0xDB, 0x63, 0x40, 0xD8,
 515:../src/wolfcrypt/src/dh.c ****     0xA0, 0x0E, 0xF0, 0x92, 0x35, 0x05, 0x11, 0xE3,
 516:../src/wolfcrypt/src/dh.c ****     0x0A, 0xBE, 0xC1, 0xFF, 0xF9, 0xE3, 0xA2, 0x6E,
 517:../src/wolfcrypt/src/dh.c ****     0x7F, 0xB2, 0x9F, 0x8C, 0x18, 0x30, 0x23, 0xC3,
 518:../src/wolfcrypt/src/dh.c ****     0x58, 0x7E, 0x38, 0xDA, 0x00, 0x77, 0xD9, 0xB4,
 519:../src/wolfcrypt/src/dh.c ****     0x76, 0x3E, 0x4E, 0x4B, 0x94, 0xB2, 0xBB, 0xC1,
 520:../src/wolfcrypt/src/dh.c ****     0x94, 0xC6, 0x65, 0x1E, 0x77, 0xCA, 0xF9, 0x92,
 521:../src/wolfcrypt/src/dh.c ****     0xEE, 0xAA, 0xC0, 0x23, 0x2A, 0x28, 0x1B, 0xF6,
 522:../src/wolfcrypt/src/dh.c ****     0xB3, 0xA7, 0x39, 0xC1, 0x22, 0x61, 0x16, 0x82,
 523:../src/wolfcrypt/src/dh.c ****     0x0A, 0xE8, 0xDB, 0x58, 0x47, 0xA6, 0x7C, 0xBE,
 524:../src/wolfcrypt/src/dh.c ****     0xF9, 0xC9, 0x09, 0x1B, 0x46, 0x2D, 0x53, 0x8C,
 525:../src/wolfcrypt/src/dh.c ****     0xD7, 0x2B, 0x03, 0x74, 0x6A, 0xE7, 0x7F, 0x5E,
 526:../src/wolfcrypt/src/dh.c ****     0x62, 0x29, 0x2C, 0x31, 0x15, 0x62, 0xA8, 0x46,
 527:../src/wolfcrypt/src/dh.c ****     0x50, 0x5D, 0xC8, 0x2D, 0xB8, 0x54, 0x33, 0x8A,
 528:../src/wolfcrypt/src/dh.c ****     0xE4, 0x9F, 0x52, 0x35, 0xC9, 0x5B, 0x91, 0x17,
 529:../src/wolfcrypt/src/dh.c ****     0x8C, 0xCF, 0x2D, 0xD5, 0xCA, 0xCE, 0xF4, 0x03,
 530:../src/wolfcrypt/src/dh.c ****     0xEC, 0x9D, 0x18, 0x10, 0xC6, 0x27, 0x2B, 0x04,
 531:../src/wolfcrypt/src/dh.c ****     0x5B, 0x3B, 0x71, 0xF9, 0xDC, 0x6B, 0x80, 0xD6,
 532:../src/wolfcrypt/src/dh.c ****     0x3F, 0xDD, 0x4A, 0x8E, 0x9A, 0xDB, 0x1E, 0x69,
 533:../src/wolfcrypt/src/dh.c ****     0x62, 0xA6, 0x95, 0x26, 0xD4, 0x31, 0x61, 0xC1,
 534:../src/wolfcrypt/src/dh.c ****     0xA4, 0x1D, 0x57, 0x0D, 0x79, 0x38, 0xDA, 0xD4,
 535:../src/wolfcrypt/src/dh.c ****     0xA4, 0x0E, 0x32, 0x9C, 0xD0, 0xE4, 0x0E, 0x65,
 536:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
 537:../src/wolfcrypt/src/dh.c **** };
 538:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe6144_g[] = { 0x02 };
 539:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_FFDHE_Q
 540:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe6144_q[] = {
 541:../src/wolfcrypt/src/dh.c ****     0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 542:../src/wolfcrypt/src/dh.c ****     0xD6, 0xFC, 0x2A, 0x2C, 0x51, 0x5D, 0xA5, 0x4D,
 543:../src/wolfcrypt/src/dh.c ****     0x57, 0xEE, 0x2B, 0x10, 0x13, 0x9E, 0x9E, 0x78,
 544:../src/wolfcrypt/src/dh.c ****     0xEC, 0x5C, 0xE2, 0xC1, 0xE7, 0x16, 0x9B, 0x4A,
 545:../src/wolfcrypt/src/dh.c ****     0xD4, 0xF0, 0x9B, 0x20, 0x8A, 0x32, 0x19, 0xFD,
 546:../src/wolfcrypt/src/dh.c ****     0xE6, 0x49, 0xCE, 0xE7, 0x12, 0x4D, 0x9F, 0x7C,
 547:../src/wolfcrypt/src/dh.c ****     0xBE, 0x97, 0xF1, 0xB1, 0xB1, 0x86, 0x3A, 0xEC,
 548:../src/wolfcrypt/src/dh.c ****     0x7B, 0x40, 0xD9, 0x01, 0x57, 0x62, 0x30, 0xBD,
 549:../src/wolfcrypt/src/dh.c ****     0x69, 0xEF, 0x8F, 0x6A, 0xEA, 0xFE, 0xB2, 0xB0,
 550:../src/wolfcrypt/src/dh.c ****     0x92, 0x19, 0xFA, 0x8F, 0xAF, 0x83, 0x37, 0x68,
 551:../src/wolfcrypt/src/dh.c ****     0x42, 0xB1, 0xB2, 0xAA, 0x9E, 0xF6, 0x8D, 0x79,
 552:../src/wolfcrypt/src/dh.c ****     0xDA, 0xAB, 0x89, 0xAF, 0x3F, 0xAB, 0xE4, 0x9A,
 553:../src/wolfcrypt/src/dh.c ****     0xCC, 0x27, 0x86, 0x38, 0x70, 0x73, 0x45, 0xBB,
 554:../src/wolfcrypt/src/dh.c ****     0xF1, 0x53, 0x44, 0xED, 0x79, 0xF7, 0xF4, 0x39,
 555:../src/wolfcrypt/src/dh.c ****     0x0E, 0xF8, 0xAC, 0x50, 0x9B, 0x56, 0xF3, 0x9A,
 556:../src/wolfcrypt/src/dh.c ****     0x98, 0x56, 0x65, 0x27, 0xA4, 0x1D, 0x3C, 0xBD,
 557:../src/wolfcrypt/src/dh.c ****     0x5E, 0x05, 0x58, 0xC1, 0x59, 0x92, 0x7D, 0xB0,
 558:../src/wolfcrypt/src/dh.c ****     0xE8, 0x84, 0x54, 0xA5, 0xD9, 0x64, 0x71, 0xFD,
 559:../src/wolfcrypt/src/dh.c ****     0xDC, 0xB5, 0x6D, 0x5B, 0xB0, 0x6B, 0xFA, 0x34,
 560:../src/wolfcrypt/src/dh.c ****     0x0E, 0xA7, 0xA1, 0x51, 0xEF, 0x1C, 0xA6, 0xFA,
 561:../src/wolfcrypt/src/dh.c ****     0x57, 0x2B, 0x76, 0xF3, 0xB1, 0xB9, 0x5D, 0x8C,
 562:../src/wolfcrypt/src/dh.c ****     0x85, 0x83, 0xD3, 0xE4, 0x77, 0x05, 0x36, 0xB8,
 563:../src/wolfcrypt/src/dh.c ****     0x4F, 0x01, 0x7E, 0x70, 0xE6, 0xFB, 0xF1, 0x76,
 564:../src/wolfcrypt/src/dh.c ****     0x60, 0x1A, 0x02, 0x66, 0x94, 0x1A, 0x17, 0xB0,
 565:../src/wolfcrypt/src/dh.c ****     0xC8, 0xB9, 0x7F, 0x4E, 0x74, 0xC2, 0xC1, 0xFF,
 566:../src/wolfcrypt/src/dh.c ****     0xC7, 0x27, 0x89, 0x19, 0x77, 0x79, 0x40, 0xC1,
 567:../src/wolfcrypt/src/dh.c ****     0xE1, 0xFF, 0x1D, 0x8D, 0xA6, 0x37, 0xD6, 0xB9,
 568:../src/wolfcrypt/src/dh.c ****     0x9D, 0xDA, 0xFE, 0x5E, 0x17, 0x61, 0x10, 0x02,
 569:../src/wolfcrypt/src/dh.c ****     0xE2, 0xC7, 0x78, 0xC1, 0xBE, 0x8B, 0x41, 0xD9,
 570:../src/wolfcrypt/src/dh.c ****     0x63, 0x79, 0xA5, 0x13, 0x60, 0xD9, 0x77, 0xFD,
 571:../src/wolfcrypt/src/dh.c ****     0x44, 0x35, 0xA1, 0x1C, 0x30, 0x8F, 0xE7, 0xEE,
 572:../src/wolfcrypt/src/dh.c ****     0x6F, 0x1A, 0xAD, 0x9D, 0xB2, 0x8C, 0x81, 0xAD,
 573:../src/wolfcrypt/src/dh.c ****     0xDE, 0x1A, 0x7A, 0x6F, 0x7C, 0xCE, 0x01, 0x1C,
 574:../src/wolfcrypt/src/dh.c ****     0x30, 0xDA, 0x37, 0xE4, 0xEB, 0x73, 0x64, 0x83,
 575:../src/wolfcrypt/src/dh.c ****     0xBD, 0x6C, 0x8E, 0x93, 0x48, 0xFB, 0xFB, 0xF7,
 576:../src/wolfcrypt/src/dh.c ****     0x2C, 0xC6, 0x58, 0x7D, 0x60, 0xC3, 0x6C, 0x8E,
 577:../src/wolfcrypt/src/dh.c ****     0x57, 0x7F, 0x09, 0x84, 0xC2, 0x89, 0xC9, 0x38,
 578:../src/wolfcrypt/src/dh.c ****     0x5A, 0x09, 0x86, 0x49, 0xDE, 0x21, 0xBC, 0xA2,
 579:../src/wolfcrypt/src/dh.c ****     0x7A, 0x7E, 0xA2, 0x29, 0x71, 0x6B, 0xA6, 0xE9,
 580:../src/wolfcrypt/src/dh.c ****     0xB2, 0x79, 0x71, 0x0F, 0x38, 0xFA, 0xA5, 0xFF,
 581:../src/wolfcrypt/src/dh.c ****     0xAE, 0x57, 0x41, 0x55, 0xCE, 0x4E, 0xFB, 0x4F,
 582:../src/wolfcrypt/src/dh.c ****     0x74, 0x36, 0x95, 0xE2, 0x91, 0x1B, 0x1D, 0x06,
 583:../src/wolfcrypt/src/dh.c ****     0xD5, 0xE2, 0x90, 0xCB, 0xCD, 0x86, 0xF5, 0x6D,
 584:../src/wolfcrypt/src/dh.c ****     0x0E, 0xDF, 0xCD, 0x21, 0x6A, 0xE2, 0x24, 0x27,
 585:../src/wolfcrypt/src/dh.c ****     0x05, 0x5E, 0x68, 0x35, 0xFD, 0x29, 0xEE, 0xF7,
 586:../src/wolfcrypt/src/dh.c ****     0x9E, 0x0D, 0x90, 0x77, 0x1F, 0xEA, 0xCE, 0xBE,
 587:../src/wolfcrypt/src/dh.c ****     0x12, 0xF2, 0x0E, 0x95, 0xB3, 0x4F, 0x0F, 0x78,
 588:../src/wolfcrypt/src/dh.c ****     0xB7, 0x37, 0xA9, 0x61, 0x8B, 0x26, 0xFA, 0x7D,
 589:../src/wolfcrypt/src/dh.c ****     0xBC, 0x98, 0x74, 0xF2, 0x72, 0xC4, 0x2B, 0xDB,
 590:../src/wolfcrypt/src/dh.c ****     0x56, 0x3E, 0xAF, 0xA1, 0x6B, 0x4F, 0xB6, 0x8C,
 591:../src/wolfcrypt/src/dh.c ****     0x3B, 0xB1, 0xE7, 0x8E, 0xAA, 0x81, 0xA0, 0x02,
 592:../src/wolfcrypt/src/dh.c ****     0x43, 0xFA, 0xAD, 0xD2, 0xBF, 0x18, 0xE6, 0x3D,
 593:../src/wolfcrypt/src/dh.c ****     0x38, 0x9A, 0xE4, 0x43, 0x77, 0xDA, 0x18, 0xC5,
 594:../src/wolfcrypt/src/dh.c ****     0x76, 0xB5, 0x0F, 0x00, 0x96, 0xCF, 0x34, 0x19,
 595:../src/wolfcrypt/src/dh.c ****     0x54, 0x83, 0xB0, 0x05, 0x48, 0xC0, 0x98, 0x62,
 596:../src/wolfcrypt/src/dh.c ****     0x36, 0xE3, 0xBC, 0x7C, 0xB8, 0xD6, 0x80, 0x1C,
 597:../src/wolfcrypt/src/dh.c ****     0x04, 0x94, 0xCC, 0xD1, 0x99, 0xE5, 0xC5, 0xBD,
 598:../src/wolfcrypt/src/dh.c ****     0x0D, 0x0E, 0xDC, 0x9E, 0xB8, 0xA0, 0x00, 0x1E,
 599:../src/wolfcrypt/src/dh.c ****     0x15, 0x27, 0x67, 0x54, 0xFC, 0xC6, 0x85, 0x66,
 600:../src/wolfcrypt/src/dh.c ****     0x05, 0x41, 0x48, 0xE6, 0xE7, 0x64, 0xBE, 0xE7,
 601:../src/wolfcrypt/src/dh.c ****     0xC7, 0x64, 0xDA, 0xAD, 0x3F, 0xC4, 0x52, 0x35,
 602:../src/wolfcrypt/src/dh.c ****     0xA6, 0xDA, 0xD4, 0x28, 0xFA, 0x20, 0xC1, 0x70,
 603:../src/wolfcrypt/src/dh.c ****     0xE3, 0x45, 0x00, 0x3F, 0x2F, 0x06, 0xEC, 0x81,
 604:../src/wolfcrypt/src/dh.c ****     0x05, 0xFE, 0xB2, 0x5B, 0x22, 0x81, 0xB6, 0x3D,
 605:../src/wolfcrypt/src/dh.c ****     0x27, 0x33, 0xBE, 0x96, 0x1C, 0x29, 0x95, 0x1D,
 606:../src/wolfcrypt/src/dh.c ****     0x11, 0xDD, 0x22, 0x21, 0x65, 0x7A, 0x9F, 0x53,
 607:../src/wolfcrypt/src/dh.c ****     0x1D, 0xDA, 0x2A, 0x19, 0x4D, 0xBB, 0x12, 0x64,
 608:../src/wolfcrypt/src/dh.c ****     0x48, 0xBD, 0xEE, 0xB2, 0x58, 0xE0, 0x7E, 0xA6,
 609:../src/wolfcrypt/src/dh.c ****     0x59, 0xC7, 0x46, 0x19, 0xA6, 0x38, 0x0E, 0x1D,
 610:../src/wolfcrypt/src/dh.c ****     0x66, 0xD6, 0x83, 0x2B, 0xFE, 0x67, 0xF6, 0x38,
 611:../src/wolfcrypt/src/dh.c ****     0xCD, 0x8F, 0xAE, 0x1F, 0x27, 0x23, 0x02, 0x0F,
 612:../src/wolfcrypt/src/dh.c ****     0x9C, 0x40, 0xA3, 0xFD, 0xA6, 0x7E, 0xDA, 0x3B,
 613:../src/wolfcrypt/src/dh.c ****     0xD2, 0x92, 0x38, 0xFB, 0xD4, 0xD4, 0xB4, 0x88,
 614:../src/wolfcrypt/src/dh.c ****     0x5C, 0x2A, 0x99, 0x17, 0x6D, 0xB1, 0xA0, 0x6C,
 615:../src/wolfcrypt/src/dh.c ****     0x50, 0x07, 0x78, 0x49, 0x1A, 0x82, 0x88, 0xF1,
 616:../src/wolfcrypt/src/dh.c ****     0x85, 0x5F, 0x60, 0xFF, 0xFC, 0xF1, 0xD1, 0x37,
 617:../src/wolfcrypt/src/dh.c ****     0x3F, 0xD9, 0x4F, 0xC6, 0x0C, 0x18, 0x11, 0xE1,
 618:../src/wolfcrypt/src/dh.c ****     0xAC, 0x3F, 0x1C, 0x6D, 0x00, 0x3B, 0xEC, 0xDA,
 619:../src/wolfcrypt/src/dh.c ****     0x3B, 0x1F, 0x27, 0x25, 0xCA, 0x59, 0x5D, 0xE0,
 620:../src/wolfcrypt/src/dh.c ****     0xCA, 0x63, 0x32, 0x8F, 0x3B, 0xE5, 0x7C, 0xC9,
 621:../src/wolfcrypt/src/dh.c ****     0x77, 0x55, 0x60, 0x11, 0x95, 0x14, 0x0D, 0xFB,
 622:../src/wolfcrypt/src/dh.c ****     0x59, 0xD3, 0x9C, 0xE0, 0x91, 0x30, 0x8B, 0x41,
 623:../src/wolfcrypt/src/dh.c ****     0x05, 0x74, 0x6D, 0xAC, 0x23, 0xD3, 0x3E, 0x5F,
 624:../src/wolfcrypt/src/dh.c ****     0x7C, 0xE4, 0x84, 0x8D, 0xA3, 0x16, 0xA9, 0xC6,
 625:../src/wolfcrypt/src/dh.c ****     0x6B, 0x95, 0x81, 0xBA, 0x35, 0x73, 0xBF, 0xAF,
 626:../src/wolfcrypt/src/dh.c ****     0x31, 0x14, 0x96, 0x18, 0x8A, 0xB1, 0x54, 0x23,
 627:../src/wolfcrypt/src/dh.c ****     0x28, 0x2E, 0xE4, 0x16, 0xDC, 0x2A, 0x19, 0xC5,
 628:../src/wolfcrypt/src/dh.c ****     0x72, 0x4F, 0xA9, 0x1A, 0xE4, 0xAD, 0xC8, 0x8B,
 629:../src/wolfcrypt/src/dh.c ****     0xC6, 0x67, 0x96, 0xEA, 0xE5, 0x67, 0x7A, 0x01,
 630:../src/wolfcrypt/src/dh.c ****     0xF6, 0x4E, 0x8C, 0x08, 0x63, 0x13, 0x95, 0x82,
 631:../src/wolfcrypt/src/dh.c ****     0x2D, 0x9D, 0xB8, 0xFC, 0xEE, 0x35, 0xC0, 0x6B,
 632:../src/wolfcrypt/src/dh.c ****     0x1F, 0xEE, 0xA5, 0x47, 0x4D, 0x6D, 0x8F, 0x34,
 633:../src/wolfcrypt/src/dh.c ****     0xB1, 0x53, 0x4A, 0x93, 0x6A, 0x18, 0xB0, 0xE0,
 634:../src/wolfcrypt/src/dh.c ****     0xD2, 0x0E, 0xAB, 0x86, 0xBC, 0x9C, 0x6D, 0x6A,
 635:../src/wolfcrypt/src/dh.c ****     0x52, 0x07, 0x19, 0x4E, 0x68, 0x72, 0x07, 0x32,
 636:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
 637:../src/wolfcrypt/src/dh.c **** };
 638:../src/wolfcrypt/src/dh.c **** #endif /* HAVE_FFDHE_Q */
 639:../src/wolfcrypt/src/dh.c **** 
 640:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_PUBLIC_FFDHE
 641:../src/wolfcrypt/src/dh.c **** const DhParams* wc_Dh_ffdhe6144_Get(void)
 642:../src/wolfcrypt/src/dh.c **** {
 643:../src/wolfcrypt/src/dh.c ****     static const DhParams ffdhe6144 = {
 644:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_Q
 645:../src/wolfcrypt/src/dh.c ****             dh_ffdhe6144_q, sizeof(dh_ffdhe6144_q),
 646:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_Q */
 647:../src/wolfcrypt/src/dh.c ****         dh_ffdhe6144_p, sizeof(dh_ffdhe6144_p),
 648:../src/wolfcrypt/src/dh.c ****         dh_ffdhe6144_g, sizeof(dh_ffdhe6144_g)
 649:../src/wolfcrypt/src/dh.c ****     };
 650:../src/wolfcrypt/src/dh.c ****     return &ffdhe6144;
 651:../src/wolfcrypt/src/dh.c **** }
 652:../src/wolfcrypt/src/dh.c **** #endif
 653:../src/wolfcrypt/src/dh.c **** #endif
 654:../src/wolfcrypt/src/dh.c **** 
 655:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_FFDHE_8192
 656:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe8192_p[] = {
 657:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 658:../src/wolfcrypt/src/dh.c ****     0xAD, 0xF8, 0x54, 0x58, 0xA2, 0xBB, 0x4A, 0x9A,
 659:../src/wolfcrypt/src/dh.c ****     0xAF, 0xDC, 0x56, 0x20, 0x27, 0x3D, 0x3C, 0xF1,
 660:../src/wolfcrypt/src/dh.c ****     0xD8, 0xB9, 0xC5, 0x83, 0xCE, 0x2D, 0x36, 0x95,
 661:../src/wolfcrypt/src/dh.c ****     0xA9, 0xE1, 0x36, 0x41, 0x14, 0x64, 0x33, 0xFB,
 662:../src/wolfcrypt/src/dh.c ****     0xCC, 0x93, 0x9D, 0xCE, 0x24, 0x9B, 0x3E, 0xF9,
 663:../src/wolfcrypt/src/dh.c ****     0x7D, 0x2F, 0xE3, 0x63, 0x63, 0x0C, 0x75, 0xD8,
 664:../src/wolfcrypt/src/dh.c ****     0xF6, 0x81, 0xB2, 0x02, 0xAE, 0xC4, 0x61, 0x7A,
 665:../src/wolfcrypt/src/dh.c ****     0xD3, 0xDF, 0x1E, 0xD5, 0xD5, 0xFD, 0x65, 0x61,
 666:../src/wolfcrypt/src/dh.c ****     0x24, 0x33, 0xF5, 0x1F, 0x5F, 0x06, 0x6E, 0xD0,
 667:../src/wolfcrypt/src/dh.c ****     0x85, 0x63, 0x65, 0x55, 0x3D, 0xED, 0x1A, 0xF3,
 668:../src/wolfcrypt/src/dh.c ****     0xB5, 0x57, 0x13, 0x5E, 0x7F, 0x57, 0xC9, 0x35,
 669:../src/wolfcrypt/src/dh.c ****     0x98, 0x4F, 0x0C, 0x70, 0xE0, 0xE6, 0x8B, 0x77,
 670:../src/wolfcrypt/src/dh.c ****     0xE2, 0xA6, 0x89, 0xDA, 0xF3, 0xEF, 0xE8, 0x72,
 671:../src/wolfcrypt/src/dh.c ****     0x1D, 0xF1, 0x58, 0xA1, 0x36, 0xAD, 0xE7, 0x35,
 672:../src/wolfcrypt/src/dh.c ****     0x30, 0xAC, 0xCA, 0x4F, 0x48, 0x3A, 0x79, 0x7A,
 673:../src/wolfcrypt/src/dh.c ****     0xBC, 0x0A, 0xB1, 0x82, 0xB3, 0x24, 0xFB, 0x61,
 674:../src/wolfcrypt/src/dh.c ****     0xD1, 0x08, 0xA9, 0x4B, 0xB2, 0xC8, 0xE3, 0xFB,
 675:../src/wolfcrypt/src/dh.c ****     0xB9, 0x6A, 0xDA, 0xB7, 0x60, 0xD7, 0xF4, 0x68,
 676:../src/wolfcrypt/src/dh.c ****     0x1D, 0x4F, 0x42, 0xA3, 0xDE, 0x39, 0x4D, 0xF4,
 677:../src/wolfcrypt/src/dh.c ****     0xAE, 0x56, 0xED, 0xE7, 0x63, 0x72, 0xBB, 0x19,
 678:../src/wolfcrypt/src/dh.c ****     0x0B, 0x07, 0xA7, 0xC8, 0xEE, 0x0A, 0x6D, 0x70,
 679:../src/wolfcrypt/src/dh.c ****     0x9E, 0x02, 0xFC, 0xE1, 0xCD, 0xF7, 0xE2, 0xEC,
 680:../src/wolfcrypt/src/dh.c ****     0xC0, 0x34, 0x04, 0xCD, 0x28, 0x34, 0x2F, 0x61,
 681:../src/wolfcrypt/src/dh.c ****     0x91, 0x72, 0xFE, 0x9C, 0xE9, 0x85, 0x83, 0xFF,
 682:../src/wolfcrypt/src/dh.c ****     0x8E, 0x4F, 0x12, 0x32, 0xEE, 0xF2, 0x81, 0x83,
 683:../src/wolfcrypt/src/dh.c ****     0xC3, 0xFE, 0x3B, 0x1B, 0x4C, 0x6F, 0xAD, 0x73,
 684:../src/wolfcrypt/src/dh.c ****     0x3B, 0xB5, 0xFC, 0xBC, 0x2E, 0xC2, 0x20, 0x05,
 685:../src/wolfcrypt/src/dh.c ****     0xC5, 0x8E, 0xF1, 0x83, 0x7D, 0x16, 0x83, 0xB2,
 686:../src/wolfcrypt/src/dh.c ****     0xC6, 0xF3, 0x4A, 0x26, 0xC1, 0xB2, 0xEF, 0xFA,
 687:../src/wolfcrypt/src/dh.c ****     0x88, 0x6B, 0x42, 0x38, 0x61, 0x1F, 0xCF, 0xDC,
 688:../src/wolfcrypt/src/dh.c ****     0xDE, 0x35, 0x5B, 0x3B, 0x65, 0x19, 0x03, 0x5B,
 689:../src/wolfcrypt/src/dh.c ****     0xBC, 0x34, 0xF4, 0xDE, 0xF9, 0x9C, 0x02, 0x38,
 690:../src/wolfcrypt/src/dh.c ****     0x61, 0xB4, 0x6F, 0xC9, 0xD6, 0xE6, 0xC9, 0x07,
 691:../src/wolfcrypt/src/dh.c ****     0x7A, 0xD9, 0x1D, 0x26, 0x91, 0xF7, 0xF7, 0xEE,
 692:../src/wolfcrypt/src/dh.c ****     0x59, 0x8C, 0xB0, 0xFA, 0xC1, 0x86, 0xD9, 0x1C,
 693:../src/wolfcrypt/src/dh.c ****     0xAE, 0xFE, 0x13, 0x09, 0x85, 0x13, 0x92, 0x70,
 694:../src/wolfcrypt/src/dh.c ****     0xB4, 0x13, 0x0C, 0x93, 0xBC, 0x43, 0x79, 0x44,
 695:../src/wolfcrypt/src/dh.c ****     0xF4, 0xFD, 0x44, 0x52, 0xE2, 0xD7, 0x4D, 0xD3,
 696:../src/wolfcrypt/src/dh.c ****     0x64, 0xF2, 0xE2, 0x1E, 0x71, 0xF5, 0x4B, 0xFF,
 697:../src/wolfcrypt/src/dh.c ****     0x5C, 0xAE, 0x82, 0xAB, 0x9C, 0x9D, 0xF6, 0x9E,
 698:../src/wolfcrypt/src/dh.c ****     0xE8, 0x6D, 0x2B, 0xC5, 0x22, 0x36, 0x3A, 0x0D,
 699:../src/wolfcrypt/src/dh.c ****     0xAB, 0xC5, 0x21, 0x97, 0x9B, 0x0D, 0xEA, 0xDA,
 700:../src/wolfcrypt/src/dh.c ****     0x1D, 0xBF, 0x9A, 0x42, 0xD5, 0xC4, 0x48, 0x4E,
 701:../src/wolfcrypt/src/dh.c ****     0x0A, 0xBC, 0xD0, 0x6B, 0xFA, 0x53, 0xDD, 0xEF,
 702:../src/wolfcrypt/src/dh.c ****     0x3C, 0x1B, 0x20, 0xEE, 0x3F, 0xD5, 0x9D, 0x7C,
 703:../src/wolfcrypt/src/dh.c ****     0x25, 0xE4, 0x1D, 0x2B, 0x66, 0x9E, 0x1E, 0xF1,
 704:../src/wolfcrypt/src/dh.c ****     0x6E, 0x6F, 0x52, 0xC3, 0x16, 0x4D, 0xF4, 0xFB,
 705:../src/wolfcrypt/src/dh.c ****     0x79, 0x30, 0xE9, 0xE4, 0xE5, 0x88, 0x57, 0xB6,
 706:../src/wolfcrypt/src/dh.c ****     0xAC, 0x7D, 0x5F, 0x42, 0xD6, 0x9F, 0x6D, 0x18,
 707:../src/wolfcrypt/src/dh.c ****     0x77, 0x63, 0xCF, 0x1D, 0x55, 0x03, 0x40, 0x04,
 708:../src/wolfcrypt/src/dh.c ****     0x87, 0xF5, 0x5B, 0xA5, 0x7E, 0x31, 0xCC, 0x7A,
 709:../src/wolfcrypt/src/dh.c ****     0x71, 0x35, 0xC8, 0x86, 0xEF, 0xB4, 0x31, 0x8A,
 710:../src/wolfcrypt/src/dh.c ****     0xED, 0x6A, 0x1E, 0x01, 0x2D, 0x9E, 0x68, 0x32,
 711:../src/wolfcrypt/src/dh.c ****     0xA9, 0x07, 0x60, 0x0A, 0x91, 0x81, 0x30, 0xC4,
 712:../src/wolfcrypt/src/dh.c ****     0x6D, 0xC7, 0x78, 0xF9, 0x71, 0xAD, 0x00, 0x38,
 713:../src/wolfcrypt/src/dh.c ****     0x09, 0x29, 0x99, 0xA3, 0x33, 0xCB, 0x8B, 0x7A,
 714:../src/wolfcrypt/src/dh.c ****     0x1A, 0x1D, 0xB9, 0x3D, 0x71, 0x40, 0x00, 0x3C,
 715:../src/wolfcrypt/src/dh.c ****     0x2A, 0x4E, 0xCE, 0xA9, 0xF9, 0x8D, 0x0A, 0xCC,
 716:../src/wolfcrypt/src/dh.c ****     0x0A, 0x82, 0x91, 0xCD, 0xCE, 0xC9, 0x7D, 0xCF,
 717:../src/wolfcrypt/src/dh.c ****     0x8E, 0xC9, 0xB5, 0x5A, 0x7F, 0x88, 0xA4, 0x6B,
 718:../src/wolfcrypt/src/dh.c ****     0x4D, 0xB5, 0xA8, 0x51, 0xF4, 0x41, 0x82, 0xE1,
 719:../src/wolfcrypt/src/dh.c ****     0xC6, 0x8A, 0x00, 0x7E, 0x5E, 0x0D, 0xD9, 0x02,
 720:../src/wolfcrypt/src/dh.c ****     0x0B, 0xFD, 0x64, 0xB6, 0x45, 0x03, 0x6C, 0x7A,
 721:../src/wolfcrypt/src/dh.c ****     0x4E, 0x67, 0x7D, 0x2C, 0x38, 0x53, 0x2A, 0x3A,
 722:../src/wolfcrypt/src/dh.c ****     0x23, 0xBA, 0x44, 0x42, 0xCA, 0xF5, 0x3E, 0xA6,
 723:../src/wolfcrypt/src/dh.c ****     0x3B, 0xB4, 0x54, 0x32, 0x9B, 0x76, 0x24, 0xC8,
 724:../src/wolfcrypt/src/dh.c ****     0x91, 0x7B, 0xDD, 0x64, 0xB1, 0xC0, 0xFD, 0x4C,
 725:../src/wolfcrypt/src/dh.c ****     0xB3, 0x8E, 0x8C, 0x33, 0x4C, 0x70, 0x1C, 0x3A,
 726:../src/wolfcrypt/src/dh.c ****     0xCD, 0xAD, 0x06, 0x57, 0xFC, 0xCF, 0xEC, 0x71,
 727:../src/wolfcrypt/src/dh.c ****     0x9B, 0x1F, 0x5C, 0x3E, 0x4E, 0x46, 0x04, 0x1F,
 728:../src/wolfcrypt/src/dh.c ****     0x38, 0x81, 0x47, 0xFB, 0x4C, 0xFD, 0xB4, 0x77,
 729:../src/wolfcrypt/src/dh.c ****     0xA5, 0x24, 0x71, 0xF7, 0xA9, 0xA9, 0x69, 0x10,
 730:../src/wolfcrypt/src/dh.c ****     0xB8, 0x55, 0x32, 0x2E, 0xDB, 0x63, 0x40, 0xD8,
 731:../src/wolfcrypt/src/dh.c ****     0xA0, 0x0E, 0xF0, 0x92, 0x35, 0x05, 0x11, 0xE3,
 732:../src/wolfcrypt/src/dh.c ****     0x0A, 0xBE, 0xC1, 0xFF, 0xF9, 0xE3, 0xA2, 0x6E,
 733:../src/wolfcrypt/src/dh.c ****     0x7F, 0xB2, 0x9F, 0x8C, 0x18, 0x30, 0x23, 0xC3,
 734:../src/wolfcrypt/src/dh.c ****     0x58, 0x7E, 0x38, 0xDA, 0x00, 0x77, 0xD9, 0xB4,
 735:../src/wolfcrypt/src/dh.c ****     0x76, 0x3E, 0x4E, 0x4B, 0x94, 0xB2, 0xBB, 0xC1,
 736:../src/wolfcrypt/src/dh.c ****     0x94, 0xC6, 0x65, 0x1E, 0x77, 0xCA, 0xF9, 0x92,
 737:../src/wolfcrypt/src/dh.c ****     0xEE, 0xAA, 0xC0, 0x23, 0x2A, 0x28, 0x1B, 0xF6,
 738:../src/wolfcrypt/src/dh.c ****     0xB3, 0xA7, 0x39, 0xC1, 0x22, 0x61, 0x16, 0x82,
 739:../src/wolfcrypt/src/dh.c ****     0x0A, 0xE8, 0xDB, 0x58, 0x47, 0xA6, 0x7C, 0xBE,
 740:../src/wolfcrypt/src/dh.c ****     0xF9, 0xC9, 0x09, 0x1B, 0x46, 0x2D, 0x53, 0x8C,
 741:../src/wolfcrypt/src/dh.c ****     0xD7, 0x2B, 0x03, 0x74, 0x6A, 0xE7, 0x7F, 0x5E,
 742:../src/wolfcrypt/src/dh.c ****     0x62, 0x29, 0x2C, 0x31, 0x15, 0x62, 0xA8, 0x46,
 743:../src/wolfcrypt/src/dh.c ****     0x50, 0x5D, 0xC8, 0x2D, 0xB8, 0x54, 0x33, 0x8A,
 744:../src/wolfcrypt/src/dh.c ****     0xE4, 0x9F, 0x52, 0x35, 0xC9, 0x5B, 0x91, 0x17,
 745:../src/wolfcrypt/src/dh.c ****     0x8C, 0xCF, 0x2D, 0xD5, 0xCA, 0xCE, 0xF4, 0x03,
 746:../src/wolfcrypt/src/dh.c ****     0xEC, 0x9D, 0x18, 0x10, 0xC6, 0x27, 0x2B, 0x04,
 747:../src/wolfcrypt/src/dh.c ****     0x5B, 0x3B, 0x71, 0xF9, 0xDC, 0x6B, 0x80, 0xD6,
 748:../src/wolfcrypt/src/dh.c ****     0x3F, 0xDD, 0x4A, 0x8E, 0x9A, 0xDB, 0x1E, 0x69,
 749:../src/wolfcrypt/src/dh.c ****     0x62, 0xA6, 0x95, 0x26, 0xD4, 0x31, 0x61, 0xC1,
 750:../src/wolfcrypt/src/dh.c ****     0xA4, 0x1D, 0x57, 0x0D, 0x79, 0x38, 0xDA, 0xD4,
 751:../src/wolfcrypt/src/dh.c ****     0xA4, 0x0E, 0x32, 0x9C, 0xCF, 0xF4, 0x6A, 0xAA,
 752:../src/wolfcrypt/src/dh.c ****     0x36, 0xAD, 0x00, 0x4C, 0xF6, 0x00, 0xC8, 0x38,
 753:../src/wolfcrypt/src/dh.c ****     0x1E, 0x42, 0x5A, 0x31, 0xD9, 0x51, 0xAE, 0x64,
 754:../src/wolfcrypt/src/dh.c ****     0xFD, 0xB2, 0x3F, 0xCE, 0xC9, 0x50, 0x9D, 0x43,
 755:../src/wolfcrypt/src/dh.c ****     0x68, 0x7F, 0xEB, 0x69, 0xED, 0xD1, 0xCC, 0x5E,
 756:../src/wolfcrypt/src/dh.c ****     0x0B, 0x8C, 0xC3, 0xBD, 0xF6, 0x4B, 0x10, 0xEF,
 757:../src/wolfcrypt/src/dh.c ****     0x86, 0xB6, 0x31, 0x42, 0xA3, 0xAB, 0x88, 0x29,
 758:../src/wolfcrypt/src/dh.c ****     0x55, 0x5B, 0x2F, 0x74, 0x7C, 0x93, 0x26, 0x65,
 759:../src/wolfcrypt/src/dh.c ****     0xCB, 0x2C, 0x0F, 0x1C, 0xC0, 0x1B, 0xD7, 0x02,
 760:../src/wolfcrypt/src/dh.c ****     0x29, 0x38, 0x88, 0x39, 0xD2, 0xAF, 0x05, 0xE4,
 761:../src/wolfcrypt/src/dh.c ****     0x54, 0x50, 0x4A, 0xC7, 0x8B, 0x75, 0x82, 0x82,
 762:../src/wolfcrypt/src/dh.c ****     0x28, 0x46, 0xC0, 0xBA, 0x35, 0xC3, 0x5F, 0x5C,
 763:../src/wolfcrypt/src/dh.c ****     0x59, 0x16, 0x0C, 0xC0, 0x46, 0xFD, 0x82, 0x51,
 764:../src/wolfcrypt/src/dh.c ****     0x54, 0x1F, 0xC6, 0x8C, 0x9C, 0x86, 0xB0, 0x22,
 765:../src/wolfcrypt/src/dh.c ****     0xBB, 0x70, 0x99, 0x87, 0x6A, 0x46, 0x0E, 0x74,
 766:../src/wolfcrypt/src/dh.c ****     0x51, 0xA8, 0xA9, 0x31, 0x09, 0x70, 0x3F, 0xEE,
 767:../src/wolfcrypt/src/dh.c ****     0x1C, 0x21, 0x7E, 0x6C, 0x38, 0x26, 0xE5, 0x2C,
 768:../src/wolfcrypt/src/dh.c ****     0x51, 0xAA, 0x69, 0x1E, 0x0E, 0x42, 0x3C, 0xFC,
 769:../src/wolfcrypt/src/dh.c ****     0x99, 0xE9, 0xE3, 0x16, 0x50, 0xC1, 0x21, 0x7B,
 770:../src/wolfcrypt/src/dh.c ****     0x62, 0x48, 0x16, 0xCD, 0xAD, 0x9A, 0x95, 0xF9,
 771:../src/wolfcrypt/src/dh.c ****     0xD5, 0xB8, 0x01, 0x94, 0x88, 0xD9, 0xC0, 0xA0,
 772:../src/wolfcrypt/src/dh.c ****     0xA1, 0xFE, 0x30, 0x75, 0xA5, 0x77, 0xE2, 0x31,
 773:../src/wolfcrypt/src/dh.c ****     0x83, 0xF8, 0x1D, 0x4A, 0x3F, 0x2F, 0xA4, 0x57,
 774:../src/wolfcrypt/src/dh.c ****     0x1E, 0xFC, 0x8C, 0xE0, 0xBA, 0x8A, 0x4F, 0xE8,
 775:../src/wolfcrypt/src/dh.c ****     0xB6, 0x85, 0x5D, 0xFE, 0x72, 0xB0, 0xA6, 0x6E,
 776:../src/wolfcrypt/src/dh.c ****     0xDE, 0xD2, 0xFB, 0xAB, 0xFB, 0xE5, 0x8A, 0x30,
 777:../src/wolfcrypt/src/dh.c ****     0xFA, 0xFA, 0xBE, 0x1C, 0x5D, 0x71, 0xA8, 0x7E,
 778:../src/wolfcrypt/src/dh.c ****     0x2F, 0x74, 0x1E, 0xF8, 0xC1, 0xFE, 0x86, 0xFE,
 779:../src/wolfcrypt/src/dh.c ****     0xA6, 0xBB, 0xFD, 0xE5, 0x30, 0x67, 0x7F, 0x0D,
 780:../src/wolfcrypt/src/dh.c ****     0x97, 0xD1, 0x1D, 0x49, 0xF7, 0xA8, 0x44, 0x3D,
 781:../src/wolfcrypt/src/dh.c ****     0x08, 0x22, 0xE5, 0x06, 0xA9, 0xF4, 0x61, 0x4E,
 782:../src/wolfcrypt/src/dh.c ****     0x01, 0x1E, 0x2A, 0x94, 0x83, 0x8F, 0xF8, 0x8C,
 783:../src/wolfcrypt/src/dh.c ****     0xD6, 0x8C, 0x8B, 0xB7, 0xC5, 0xC6, 0x42, 0x4C,
 784:../src/wolfcrypt/src/dh.c ****     0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
 785:../src/wolfcrypt/src/dh.c **** };
 786:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe8192_g[] = { 0x02 };
 787:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_FFDHE_Q
 788:../src/wolfcrypt/src/dh.c **** static const byte dh_ffdhe8192_q[] = {
 789:../src/wolfcrypt/src/dh.c ****     0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
 790:../src/wolfcrypt/src/dh.c ****     0xD6, 0xFC, 0x2A, 0x2C, 0x51, 0x5D, 0xA5, 0x4D,
 791:../src/wolfcrypt/src/dh.c ****     0x57, 0xEE, 0x2B, 0x10, 0x13, 0x9E, 0x9E, 0x78,
 792:../src/wolfcrypt/src/dh.c ****     0xEC, 0x5C, 0xE2, 0xC1, 0xE7, 0x16, 0x9B, 0x4A,
 793:../src/wolfcrypt/src/dh.c ****     0xD4, 0xF0, 0x9B, 0x20, 0x8A, 0x32, 0x19, 0xFD,
 794:../src/wolfcrypt/src/dh.c ****     0xE6, 0x49, 0xCE, 0xE7, 0x12, 0x4D, 0x9F, 0x7C,
 795:../src/wolfcrypt/src/dh.c ****     0xBE, 0x97, 0xF1, 0xB1, 0xB1, 0x86, 0x3A, 0xEC,
 796:../src/wolfcrypt/src/dh.c ****     0x7B, 0x40, 0xD9, 0x01, 0x57, 0x62, 0x30, 0xBD,
 797:../src/wolfcrypt/src/dh.c ****     0x69, 0xEF, 0x8F, 0x6A, 0xEA, 0xFE, 0xB2, 0xB0,
 798:../src/wolfcrypt/src/dh.c ****     0x92, 0x19, 0xFA, 0x8F, 0xAF, 0x83, 0x37, 0x68,
 799:../src/wolfcrypt/src/dh.c ****     0x42, 0xB1, 0xB2, 0xAA, 0x9E, 0xF6, 0x8D, 0x79,
 800:../src/wolfcrypt/src/dh.c ****     0xDA, 0xAB, 0x89, 0xAF, 0x3F, 0xAB, 0xE4, 0x9A,
 801:../src/wolfcrypt/src/dh.c ****     0xCC, 0x27, 0x86, 0x38, 0x70, 0x73, 0x45, 0xBB,
 802:../src/wolfcrypt/src/dh.c ****     0xF1, 0x53, 0x44, 0xED, 0x79, 0xF7, 0xF4, 0x39,
 803:../src/wolfcrypt/src/dh.c ****     0x0E, 0xF8, 0xAC, 0x50, 0x9B, 0x56, 0xF3, 0x9A,
 804:../src/wolfcrypt/src/dh.c ****     0x98, 0x56, 0x65, 0x27, 0xA4, 0x1D, 0x3C, 0xBD,
 805:../src/wolfcrypt/src/dh.c ****     0x5E, 0x05, 0x58, 0xC1, 0x59, 0x92, 0x7D, 0xB0,
 806:../src/wolfcrypt/src/dh.c ****     0xE8, 0x84, 0x54, 0xA5, 0xD9, 0x64, 0x71, 0xFD,
 807:../src/wolfcrypt/src/dh.c ****     0xDC, 0xB5, 0x6D, 0x5B, 0xB0, 0x6B, 0xFA, 0x34,
 808:../src/wolfcrypt/src/dh.c ****     0x0E, 0xA7, 0xA1, 0x51, 0xEF, 0x1C, 0xA6, 0xFA,
 809:../src/wolfcrypt/src/dh.c ****     0x57, 0x2B, 0x76, 0xF3, 0xB1, 0xB9, 0x5D, 0x8C,
 810:../src/wolfcrypt/src/dh.c ****     0x85, 0x83, 0xD3, 0xE4, 0x77, 0x05, 0x36, 0xB8,
 811:../src/wolfcrypt/src/dh.c ****     0x4F, 0x01, 0x7E, 0x70, 0xE6, 0xFB, 0xF1, 0x76,
 812:../src/wolfcrypt/src/dh.c ****     0x60, 0x1A, 0x02, 0x66, 0x94, 0x1A, 0x17, 0xB0,
 813:../src/wolfcrypt/src/dh.c ****     0xC8, 0xB9, 0x7F, 0x4E, 0x74, 0xC2, 0xC1, 0xFF,
 814:../src/wolfcrypt/src/dh.c ****     0xC7, 0x27, 0x89, 0x19, 0x77, 0x79, 0x40, 0xC1,
 815:../src/wolfcrypt/src/dh.c ****     0xE1, 0xFF, 0x1D, 0x8D, 0xA6, 0x37, 0xD6, 0xB9,
 816:../src/wolfcrypt/src/dh.c ****     0x9D, 0xDA, 0xFE, 0x5E, 0x17, 0x61, 0x10, 0x02,
 817:../src/wolfcrypt/src/dh.c ****     0xE2, 0xC7, 0x78, 0xC1, 0xBE, 0x8B, 0x41, 0xD9,
 818:../src/wolfcrypt/src/dh.c ****     0x63, 0x79, 0xA5, 0x13, 0x60, 0xD9, 0x77, 0xFD,
 819:../src/wolfcrypt/src/dh.c ****     0x44, 0x35, 0xA1, 0x1C, 0x30, 0x8F, 0xE7, 0xEE,
 820:../src/wolfcrypt/src/dh.c ****     0x6F, 0x1A, 0xAD, 0x9D, 0xB2, 0x8C, 0x81, 0xAD,
 821:../src/wolfcrypt/src/dh.c ****     0xDE, 0x1A, 0x7A, 0x6F, 0x7C, 0xCE, 0x01, 0x1C,
 822:../src/wolfcrypt/src/dh.c ****     0x30, 0xDA, 0x37, 0xE4, 0xEB, 0x73, 0x64, 0x83,
 823:../src/wolfcrypt/src/dh.c ****     0xBD, 0x6C, 0x8E, 0x93, 0x48, 0xFB, 0xFB, 0xF7,
 824:../src/wolfcrypt/src/dh.c ****     0x2C, 0xC6, 0x58, 0x7D, 0x60, 0xC3, 0x6C, 0x8E,
 825:../src/wolfcrypt/src/dh.c ****     0x57, 0x7F, 0x09, 0x84, 0xC2, 0x89, 0xC9, 0x38,
 826:../src/wolfcrypt/src/dh.c ****     0x5A, 0x09, 0x86, 0x49, 0xDE, 0x21, 0xBC, 0xA2,
 827:../src/wolfcrypt/src/dh.c ****     0x7A, 0x7E, 0xA2, 0x29, 0x71, 0x6B, 0xA6, 0xE9,
 828:../src/wolfcrypt/src/dh.c ****     0xB2, 0x79, 0x71, 0x0F, 0x38, 0xFA, 0xA5, 0xFF,
 829:../src/wolfcrypt/src/dh.c ****     0xAE, 0x57, 0x41, 0x55, 0xCE, 0x4E, 0xFB, 0x4F,
 830:../src/wolfcrypt/src/dh.c ****     0x74, 0x36, 0x95, 0xE2, 0x91, 0x1B, 0x1D, 0x06,
 831:../src/wolfcrypt/src/dh.c ****     0xD5, 0xE2, 0x90, 0xCB, 0xCD, 0x86, 0xF5, 0x6D,
 832:../src/wolfcrypt/src/dh.c ****     0x0E, 0xDF, 0xCD, 0x21, 0x6A, 0xE2, 0x24, 0x27,
 833:../src/wolfcrypt/src/dh.c ****     0x05, 0x5E, 0x68, 0x35, 0xFD, 0x29, 0xEE, 0xF7,
 834:../src/wolfcrypt/src/dh.c ****     0x9E, 0x0D, 0x90, 0x77, 0x1F, 0xEA, 0xCE, 0xBE,
 835:../src/wolfcrypt/src/dh.c ****     0x12, 0xF2, 0x0E, 0x95, 0xB3, 0x4F, 0x0F, 0x78,
 836:../src/wolfcrypt/src/dh.c ****     0xB7, 0x37, 0xA9, 0x61, 0x8B, 0x26, 0xFA, 0x7D,
 837:../src/wolfcrypt/src/dh.c ****     0xBC, 0x98, 0x74, 0xF2, 0x72, 0xC4, 0x2B, 0xDB,
 838:../src/wolfcrypt/src/dh.c ****     0x56, 0x3E, 0xAF, 0xA1, 0x6B, 0x4F, 0xB6, 0x8C,
 839:../src/wolfcrypt/src/dh.c ****     0x3B, 0xB1, 0xE7, 0x8E, 0xAA, 0x81, 0xA0, 0x02,
 840:../src/wolfcrypt/src/dh.c ****     0x43, 0xFA, 0xAD, 0xD2, 0xBF, 0x18, 0xE6, 0x3D,
 841:../src/wolfcrypt/src/dh.c ****     0x38, 0x9A, 0xE4, 0x43, 0x77, 0xDA, 0x18, 0xC5,
 842:../src/wolfcrypt/src/dh.c ****     0x76, 0xB5, 0x0F, 0x00, 0x96, 0xCF, 0x34, 0x19,
 843:../src/wolfcrypt/src/dh.c ****     0x54, 0x83, 0xB0, 0x05, 0x48, 0xC0, 0x98, 0x62,
 844:../src/wolfcrypt/src/dh.c ****     0x36, 0xE3, 0xBC, 0x7C, 0xB8, 0xD6, 0x80, 0x1C,
 845:../src/wolfcrypt/src/dh.c ****     0x04, 0x94, 0xCC, 0xD1, 0x99, 0xE5, 0xC5, 0xBD,
 846:../src/wolfcrypt/src/dh.c ****     0x0D, 0x0E, 0xDC, 0x9E, 0xB8, 0xA0, 0x00, 0x1E,
 847:../src/wolfcrypt/src/dh.c ****     0x15, 0x27, 0x67, 0x54, 0xFC, 0xC6, 0x85, 0x66,
 848:../src/wolfcrypt/src/dh.c ****     0x05, 0x41, 0x48, 0xE6, 0xE7, 0x64, 0xBE, 0xE7,
 849:../src/wolfcrypt/src/dh.c ****     0xC7, 0x64, 0xDA, 0xAD, 0x3F, 0xC4, 0x52, 0x35,
 850:../src/wolfcrypt/src/dh.c ****     0xA6, 0xDA, 0xD4, 0x28, 0xFA, 0x20, 0xC1, 0x70,
 851:../src/wolfcrypt/src/dh.c ****     0xE3, 0x45, 0x00, 0x3F, 0x2F, 0x06, 0xEC, 0x81,
 852:../src/wolfcrypt/src/dh.c ****     0x05, 0xFE, 0xB2, 0x5B, 0x22, 0x81, 0xB6, 0x3D,
 853:../src/wolfcrypt/src/dh.c ****     0x27, 0x33, 0xBE, 0x96, 0x1C, 0x29, 0x95, 0x1D,
 854:../src/wolfcrypt/src/dh.c ****     0x11, 0xDD, 0x22, 0x21, 0x65, 0x7A, 0x9F, 0x53,
 855:../src/wolfcrypt/src/dh.c ****     0x1D, 0xDA, 0x2A, 0x19, 0x4D, 0xBB, 0x12, 0x64,
 856:../src/wolfcrypt/src/dh.c ****     0x48, 0xBD, 0xEE, 0xB2, 0x58, 0xE0, 0x7E, 0xA6,
 857:../src/wolfcrypt/src/dh.c ****     0x59, 0xC7, 0x46, 0x19, 0xA6, 0x38, 0x0E, 0x1D,
 858:../src/wolfcrypt/src/dh.c ****     0x66, 0xD6, 0x83, 0x2B, 0xFE, 0x67, 0xF6, 0x38,
 859:../src/wolfcrypt/src/dh.c ****     0xCD, 0x8F, 0xAE, 0x1F, 0x27, 0x23, 0x02, 0x0F,
 860:../src/wolfcrypt/src/dh.c ****     0x9C, 0x40, 0xA3, 0xFD, 0xA6, 0x7E, 0xDA, 0x3B,
 861:../src/wolfcrypt/src/dh.c ****     0xD2, 0x92, 0x38, 0xFB, 0xD4, 0xD4, 0xB4, 0x88,
 862:../src/wolfcrypt/src/dh.c ****     0x5C, 0x2A, 0x99, 0x17, 0x6D, 0xB1, 0xA0, 0x6C,
 863:../src/wolfcrypt/src/dh.c ****     0x50, 0x07, 0x78, 0x49, 0x1A, 0x82, 0x88, 0xF1,
 864:../src/wolfcrypt/src/dh.c ****     0x85, 0x5F, 0x60, 0xFF, 0xFC, 0xF1, 0xD1, 0x37,
 865:../src/wolfcrypt/src/dh.c ****     0x3F, 0xD9, 0x4F, 0xC6, 0x0C, 0x18, 0x11, 0xE1,
 866:../src/wolfcrypt/src/dh.c ****     0xAC, 0x3F, 0x1C, 0x6D, 0x00, 0x3B, 0xEC, 0xDA,
 867:../src/wolfcrypt/src/dh.c ****     0x3B, 0x1F, 0x27, 0x25, 0xCA, 0x59, 0x5D, 0xE0,
 868:../src/wolfcrypt/src/dh.c ****     0xCA, 0x63, 0x32, 0x8F, 0x3B, 0xE5, 0x7C, 0xC9,
 869:../src/wolfcrypt/src/dh.c ****     0x77, 0x55, 0x60, 0x11, 0x95, 0x14, 0x0D, 0xFB,
 870:../src/wolfcrypt/src/dh.c ****     0x59, 0xD3, 0x9C, 0xE0, 0x91, 0x30, 0x8B, 0x41,
 871:../src/wolfcrypt/src/dh.c ****     0x05, 0x74, 0x6D, 0xAC, 0x23, 0xD3, 0x3E, 0x5F,
 872:../src/wolfcrypt/src/dh.c ****     0x7C, 0xE4, 0x84, 0x8D, 0xA3, 0x16, 0xA9, 0xC6,
 873:../src/wolfcrypt/src/dh.c ****     0x6B, 0x95, 0x81, 0xBA, 0x35, 0x73, 0xBF, 0xAF,
 874:../src/wolfcrypt/src/dh.c ****     0x31, 0x14, 0x96, 0x18, 0x8A, 0xB1, 0x54, 0x23,
 875:../src/wolfcrypt/src/dh.c ****     0x28, 0x2E, 0xE4, 0x16, 0xDC, 0x2A, 0x19, 0xC5,
 876:../src/wolfcrypt/src/dh.c ****     0x72, 0x4F, 0xA9, 0x1A, 0xE4, 0xAD, 0xC8, 0x8B,
 877:../src/wolfcrypt/src/dh.c ****     0xC6, 0x67, 0x96, 0xEA, 0xE5, 0x67, 0x7A, 0x01,
 878:../src/wolfcrypt/src/dh.c ****     0xF6, 0x4E, 0x8C, 0x08, 0x63, 0x13, 0x95, 0x82,
 879:../src/wolfcrypt/src/dh.c ****     0x2D, 0x9D, 0xB8, 0xFC, 0xEE, 0x35, 0xC0, 0x6B,
 880:../src/wolfcrypt/src/dh.c ****     0x1F, 0xEE, 0xA5, 0x47, 0x4D, 0x6D, 0x8F, 0x34,
 881:../src/wolfcrypt/src/dh.c ****     0xB1, 0x53, 0x4A, 0x93, 0x6A, 0x18, 0xB0, 0xE0,
 882:../src/wolfcrypt/src/dh.c ****     0xD2, 0x0E, 0xAB, 0x86, 0xBC, 0x9C, 0x6D, 0x6A,
 883:../src/wolfcrypt/src/dh.c ****     0x52, 0x07, 0x19, 0x4E, 0x67, 0xFA, 0x35, 0x55,
 884:../src/wolfcrypt/src/dh.c ****     0x1B, 0x56, 0x80, 0x26, 0x7B, 0x00, 0x64, 0x1C,
 885:../src/wolfcrypt/src/dh.c ****     0x0F, 0x21, 0x2D, 0x18, 0xEC, 0xA8, 0xD7, 0x32,
 886:../src/wolfcrypt/src/dh.c ****     0x7E, 0xD9, 0x1F, 0xE7, 0x64, 0xA8, 0x4E, 0xA1,
 887:../src/wolfcrypt/src/dh.c ****     0xB4, 0x3F, 0xF5, 0xB4, 0xF6, 0xE8, 0xE6, 0x2F,
 888:../src/wolfcrypt/src/dh.c ****     0x05, 0xC6, 0x61, 0xDE, 0xFB, 0x25, 0x88, 0x77,
 889:../src/wolfcrypt/src/dh.c ****     0xC3, 0x5B, 0x18, 0xA1, 0x51, 0xD5, 0xC4, 0x14,
 890:../src/wolfcrypt/src/dh.c ****     0xAA, 0xAD, 0x97, 0xBA, 0x3E, 0x49, 0x93, 0x32,
 891:../src/wolfcrypt/src/dh.c ****     0xE5, 0x96, 0x07, 0x8E, 0x60, 0x0D, 0xEB, 0x81,
 892:../src/wolfcrypt/src/dh.c ****     0x14, 0x9C, 0x44, 0x1C, 0xE9, 0x57, 0x82, 0xF2,
 893:../src/wolfcrypt/src/dh.c ****     0x2A, 0x28, 0x25, 0x63, 0xC5, 0xBA, 0xC1, 0x41,
 894:../src/wolfcrypt/src/dh.c ****     0x14, 0x23, 0x60, 0x5D, 0x1A, 0xE1, 0xAF, 0xAE,
 895:../src/wolfcrypt/src/dh.c ****     0x2C, 0x8B, 0x06, 0x60, 0x23, 0x7E, 0xC1, 0x28,
 896:../src/wolfcrypt/src/dh.c ****     0xAA, 0x0F, 0xE3, 0x46, 0x4E, 0x43, 0x58, 0x11,
 897:../src/wolfcrypt/src/dh.c ****     0x5D, 0xB8, 0x4C, 0xC3, 0xB5, 0x23, 0x07, 0x3A,
 898:../src/wolfcrypt/src/dh.c ****     0x28, 0xD4, 0x54, 0x98, 0x84, 0xB8, 0x1F, 0xF7,
 899:../src/wolfcrypt/src/dh.c ****     0x0E, 0x10, 0xBF, 0x36, 0x1C, 0x13, 0x72, 0x96,
 900:../src/wolfcrypt/src/dh.c ****     0x28, 0xD5, 0x34, 0x8F, 0x07, 0x21, 0x1E, 0x7E,
 901:../src/wolfcrypt/src/dh.c ****     0x4C, 0xF4, 0xF1, 0x8B, 0x28, 0x60, 0x90, 0xBD,
 902:../src/wolfcrypt/src/dh.c ****     0xB1, 0x24, 0x0B, 0x66, 0xD6, 0xCD, 0x4A, 0xFC,
 903:../src/wolfcrypt/src/dh.c ****     0xEA, 0xDC, 0x00, 0xCA, 0x44, 0x6C, 0xE0, 0x50,
 904:../src/wolfcrypt/src/dh.c ****     0x50, 0xFF, 0x18, 0x3A, 0xD2, 0xBB, 0xF1, 0x18,
 905:../src/wolfcrypt/src/dh.c ****     0xC1, 0xFC, 0x0E, 0xA5, 0x1F, 0x97, 0xD2, 0x2B,
 906:../src/wolfcrypt/src/dh.c ****     0x8F, 0x7E, 0x46, 0x70, 0x5D, 0x45, 0x27, 0xF4,
 907:../src/wolfcrypt/src/dh.c ****     0x5B, 0x42, 0xAE, 0xFF, 0x39, 0x58, 0x53, 0x37,
 908:../src/wolfcrypt/src/dh.c ****     0x6F, 0x69, 0x7D, 0xD5, 0xFD, 0xF2, 0xC5, 0x18,
 909:../src/wolfcrypt/src/dh.c ****     0x7D, 0x7D, 0x5F, 0x0E, 0x2E, 0xB8, 0xD4, 0x3F,
 910:../src/wolfcrypt/src/dh.c ****     0x17, 0xBA, 0x0F, 0x7C, 0x60, 0xFF, 0x43, 0x7F,
 911:../src/wolfcrypt/src/dh.c ****     0x53, 0x5D, 0xFE, 0xF2, 0x98, 0x33, 0xBF, 0x86,
 912:../src/wolfcrypt/src/dh.c ****     0xCB, 0xE8, 0x8E, 0xA4, 0xFB, 0xD4, 0x22, 0x1E,
 913:../src/wolfcrypt/src/dh.c ****     0x84, 0x11, 0x72, 0x83, 0x54, 0xFA, 0x30, 0xA7,
 914:../src/wolfcrypt/src/dh.c ****     0x00, 0x8F, 0x15, 0x4A, 0x41, 0xC7, 0xFC, 0x46,
 915:../src/wolfcrypt/src/dh.c ****     0x6B, 0x46, 0x45, 0xDB, 0xE2, 0xE3, 0x21, 0x26,
 916:../src/wolfcrypt/src/dh.c ****     0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
 917:../src/wolfcrypt/src/dh.c **** };
 918:../src/wolfcrypt/src/dh.c **** #endif /* HAVE_FFDHE_Q */
 919:../src/wolfcrypt/src/dh.c **** 
 920:../src/wolfcrypt/src/dh.c **** #ifdef HAVE_PUBLIC_FFDHE
 921:../src/wolfcrypt/src/dh.c **** const DhParams* wc_Dh_ffdhe8192_Get(void)
 922:../src/wolfcrypt/src/dh.c **** {
 923:../src/wolfcrypt/src/dh.c ****     static const DhParams ffdhe8192 = {
 924:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_Q
 925:../src/wolfcrypt/src/dh.c ****             dh_ffdhe8192_q, sizeof(dh_ffdhe8192_q),
 926:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_Q */
 927:../src/wolfcrypt/src/dh.c ****         dh_ffdhe8192_p, sizeof(dh_ffdhe8192_p),
 928:../src/wolfcrypt/src/dh.c ****         dh_ffdhe8192_g, sizeof(dh_ffdhe8192_g)
 929:../src/wolfcrypt/src/dh.c ****     };
 930:../src/wolfcrypt/src/dh.c ****     return &ffdhe8192;
 931:../src/wolfcrypt/src/dh.c **** }
 932:../src/wolfcrypt/src/dh.c **** #endif
 933:../src/wolfcrypt/src/dh.c **** #endif
 934:../src/wolfcrypt/src/dh.c **** 
 935:../src/wolfcrypt/src/dh.c **** int wc_InitDhKey_ex(DhKey* key, void* heap, int devId)
 936:../src/wolfcrypt/src/dh.c **** {
 330                             		.loc 2 936 1
 331 0000 7E AA                   		push.l	r10
 332                             	.LCFI4:
 333 0002 71 0A F0                		add	#-16, r0, r10
 334                             	.LCFI5:
 335 0005 71 A0 F8                		add	#-8, r10, r0
 336                             	.LCFI6:
 337 0008 E7 A1 01                		mov.L	r1, 4[r10]
 338 000b E7 A2 02                		mov.L	r2, 8[r10]
 339 000e E7 A3 03                		mov.L	r3, 12[r10]
 937:../src/wolfcrypt/src/dh.c ****     int ret = 0;
 340                             		.loc 2 937 9
 341 0011 F8 A6 00                		mov.L	#0, [r10]
 938:../src/wolfcrypt/src/dh.c **** 
 939:../src/wolfcrypt/src/dh.c ****     if (key == NULL)
 342                             		.loc 2 939 8
 343 0014 ED A5 01                		mov.L	4[r10], r5
 344 0017 61 05                   		cmp	#0, r5
 345 0019 1F                      		bne	.L7
 940:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
 346                             		.loc 2 940 16
 347 001a FB 5A 53 FF             		mov.L	#-173, r5
 348 001e 2E 47                   		bra	.L8
 349                             	.L7:
 941:../src/wolfcrypt/src/dh.c **** 
 942:../src/wolfcrypt/src/dh.c ****     key->heap = heap; /* for XMALLOC/XFREE in future */
 350                             		.loc 2 942 15
 351 0020 ED A5 01                		mov.L	4[r10], r5
 352 0023 ED A4 02                		mov.L	8[r10], r4
 353 0026 EB 54 4C 02             		mov.L	r4, 2352[r5]
 943:../src/wolfcrypt/src/dh.c ****     key->trustedGroup = 0;
 354                             		.loc 2 943 23
 355 002a ED A5 01                		mov.L	4[r10], r5
 356 002d FA 56 4D 02 00          		mov.L	#0, 2356[r5]
 944:../src/wolfcrypt/src/dh.c **** 
 945:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_DH_EXTRA
 946:../src/wolfcrypt/src/dh.c ****     if (mp_init_multi(&key->p, &key->g, &key->q, &key->pub, &key->priv, NULL) != MP_OKAY)
 947:../src/wolfcrypt/src/dh.c **** #else
 948:../src/wolfcrypt/src/dh.c ****     if (mp_init_multi(&key->p, &key->g, &key->q, NULL, NULL, NULL) != MP_OKAY)
 357                             		.loc 2 948 23
 358 0032 ED A1 01                		mov.L	4[r10], r1
 359                             		.loc 2 948 32
 360 0035 ED A5 01                		mov.L	4[r10], r5
 361 0038 72 52 10 03             		add	#0x310, r5, r2
 362                             		.loc 2 948 41
 363 003c ED A5 01                		mov.L	4[r10], r5
 364 003f 72 55 20 06             		add	#0x620, r5
 365                             		.loc 2 948 9
 366 0043 3E 01 00                		mov.L	#0, 4[r0]
 367 0046 F8 06 00                		mov.L	#0, [r0]
 368 0049 66 04                   		mov.L	#0, r4
 369 004b EF 53                   		mov.L	r5, r3
 370 004d 05 00 00 00             		bsr	_sp_init_multi
 371 0051 EF 15                   		mov.L	r1, r5
 372                             		.loc 2 948 8
 373 0053 61 05                   		cmp	#0, r5
 374 0055 16                      		beq	.L9
 949:../src/wolfcrypt/src/dh.c **** #endif
 950:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 375                             		.loc 2 950 16
 376 0056 FB 56 83                		mov.L	#-125, r5
 377 0059 2E 0C                   		bra	.L8
 378                             	.L9:
 951:../src/wolfcrypt/src/dh.c **** 
 952:../src/wolfcrypt/src/dh.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_DH)
 953:../src/wolfcrypt/src/dh.c ****     /* handle as async */
 954:../src/wolfcrypt/src/dh.c ****     ret = wolfAsync_DevCtxInit(&key->asyncDev, WOLFSSL_ASYNC_MARKER_DH,
 955:../src/wolfcrypt/src/dh.c ****         key->heap, devId);
 956:../src/wolfcrypt/src/dh.c **** #else
 957:../src/wolfcrypt/src/dh.c ****     (void)devId;
 958:../src/wolfcrypt/src/dh.c **** #endif
 959:../src/wolfcrypt/src/dh.c **** 
 960:../src/wolfcrypt/src/dh.c ****     key->trustedGroup = 0;
 379                             		.loc 2 960 23
 380 005b ED A5 01                		mov.L	4[r10], r5
 381 005e FA 56 4D 02 00          		mov.L	#0, 2356[r5]
 961:../src/wolfcrypt/src/dh.c **** 
 962:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_KCAPI_DH
 963:../src/wolfcrypt/src/dh.c ****     key->handle = NULL;
 964:../src/wolfcrypt/src/dh.c **** #endif
 965:../src/wolfcrypt/src/dh.c **** 
 966:../src/wolfcrypt/src/dh.c ****     return ret;
 382                             		.loc 2 966 12
 383 0063 EC A5                   		mov.L	[r10], r5
 384                             	.L8:
 967:../src/wolfcrypt/src/dh.c **** }
 385                             		.loc 2 967 1
 386 0065 EF 51                   		mov.L	r5, r1
 387 0067 3F AA 07                		rtsd	#28, r10-r10
 388                             	.LFE44:
 390                             		.section	.text.wc_InitDhKey,"ax",@progbits
 391                             		.global	_wc_InitDhKey
 393                             	_wc_InitDhKey:
 394                             	.LFB45:
 968:../src/wolfcrypt/src/dh.c **** 
 969:../src/wolfcrypt/src/dh.c **** int wc_InitDhKey(DhKey* key)
 970:../src/wolfcrypt/src/dh.c **** {
 395                             		.loc 2 970 1
 396 0000 7E AA                   		push.l	r10
 397                             	.LCFI7:
 398 0002 71 0A FC                		add	#-4, r0, r10
 399                             	.LCFI8:
 400 0005 EF A0                   		mov.L	r10, r0
 401 0007 E3 A1                   		mov.L	r1, [r10]
 971:../src/wolfcrypt/src/dh.c ****     return wc_InitDhKey_ex(key, NULL, INVALID_DEVID);
 402                             		.loc 2 971 12
 403 0009 FB 36 FE                		mov.L	#-2, r3
 404 000c 66 02                   		mov.L	#0, r2
 405 000e EC A1                   		mov.L	[r10], r1
 406 0010 05 00 00 00             		bsr	_wc_InitDhKey_ex
 407 0014 EF 15                   		mov.L	r1, r5
 972:../src/wolfcrypt/src/dh.c **** }
 408                             		.loc 2 972 1
 409 0016 EF 51                   		mov.L	r5, r1
 410 0018 3F AA 02                		rtsd	#8, r10-r10
 411                             	.LFE45:
 413                             		.section	.text.wc_FreeDhKey,"ax",@progbits
 414                             		.global	_wc_FreeDhKey
 416                             	_wc_FreeDhKey:
 417                             	.LFB46:
 973:../src/wolfcrypt/src/dh.c **** 
 974:../src/wolfcrypt/src/dh.c **** 
 975:../src/wolfcrypt/src/dh.c **** int wc_FreeDhKey(DhKey* key)
 976:../src/wolfcrypt/src/dh.c **** {
 418                             		.loc 2 976 1
 419 0000 7E AA                   		push.l	r10
 420                             	.LCFI9:
 421 0002 71 0A FC                		add	#-4, r0, r10
 422                             	.LCFI10:
 423 0005 EF A0                   		mov.L	r10, r0
 424 0007 E3 A1                   		mov.L	r1, [r10]
 977:../src/wolfcrypt/src/dh.c ****     if (key) {
 425                             		.loc 2 977 8
 426 0009 EC A5                   		mov.L	[r10], r5
 427 000b 61 05                   		cmp	#0, r5
 428 000d 20 22                   		beq	.L13
 978:../src/wolfcrypt/src/dh.c ****         mp_clear(&key->p);
 429                             		.loc 2 978 18
 430 000f EC A5                   		mov.L	[r10], r5
 431                             		.loc 2 978 9
 432 0011 EF 51                   		mov.L	r5, r1
 433 0013 05 00 00 00             		bsr	_sp_clear
 979:../src/wolfcrypt/src/dh.c ****         mp_clear(&key->g);
 434                             		.loc 2 979 18
 435 0017 EC A5                   		mov.L	[r10], r5
 436 0019 72 55 10 03             		add	#0x310, r5
 437                             		.loc 2 979 9
 438 001d EF 51                   		mov.L	r5, r1
 439 001f 05 00 00 00             		bsr	_sp_clear
 980:../src/wolfcrypt/src/dh.c ****         mp_clear(&key->q);
 440                             		.loc 2 980 18
 441 0023 EC A5                   		mov.L	[r10], r5
 442 0025 72 55 20 06             		add	#0x620, r5
 443                             		.loc 2 980 9
 444 0029 EF 51                   		mov.L	r5, r1
 445 002b 05 00 00 00             		bsr	_sp_clear
 446                             	.L13:
 981:../src/wolfcrypt/src/dh.c ****     #ifdef WOLFSSL_DH_EXTRA
 982:../src/wolfcrypt/src/dh.c ****         mp_clear(&key->pub);
 983:../src/wolfcrypt/src/dh.c ****         mp_forcezero(&key->priv);
 984:../src/wolfcrypt/src/dh.c ****     #endif
 985:../src/wolfcrypt/src/dh.c **** 
 986:../src/wolfcrypt/src/dh.c ****     #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_DH)
 987:../src/wolfcrypt/src/dh.c ****         wolfAsync_DevCtxFree(&key->asyncDev, WOLFSSL_ASYNC_MARKER_DH);
 988:../src/wolfcrypt/src/dh.c ****     #endif
 989:../src/wolfcrypt/src/dh.c ****     #ifdef WOLFSSL_KCAPI_DH
 990:../src/wolfcrypt/src/dh.c ****         KcapiDh_Free(key);
 991:../src/wolfcrypt/src/dh.c ****     #endif
 992:../src/wolfcrypt/src/dh.c ****     }
 993:../src/wolfcrypt/src/dh.c ****     return 0;
 447                             		.loc 2 993 12
 448 002f 66 05                   		mov.L	#0, r5
 994:../src/wolfcrypt/src/dh.c **** }
 449                             		.loc 2 994 1
 450 0031 EF 51                   		mov.L	r5, r1
 451 0033 3F AA 02                		rtsd	#8, r10-r10
 452                             	.LFE46:
 454                             		.section	.text.CheckDhLN,"ax",@progbits
 456                             	_CheckDhLN:
 457                             	.LFB47:
 995:../src/wolfcrypt/src/dh.c **** 
 996:../src/wolfcrypt/src/dh.c **** 
 997:../src/wolfcrypt/src/dh.c **** static int _ffc_validate_public_key(DhKey* key, const byte* pub, word32 pubSz,
 998:../src/wolfcrypt/src/dh.c ****        const byte* prime, word32 primeSz, int partial);
 999:../src/wolfcrypt/src/dh.c **** #if FIPS_VERSION_GE(5,0) || defined(WOLFSSL_VALIDATE_DH_KEYGEN)
1000:../src/wolfcrypt/src/dh.c **** static int _ffc_pairwise_consistency_test(DhKey* key,
1001:../src/wolfcrypt/src/dh.c ****         const byte* pub, word32 pubSz, const byte* priv, word32 privSz);
1002:../src/wolfcrypt/src/dh.c **** #endif
1003:../src/wolfcrypt/src/dh.c **** 
1004:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_KCAPI_DH
1005:../src/wolfcrypt/src/dh.c **** 
1006:../src/wolfcrypt/src/dh.c **** #ifndef WC_NO_RNG
1007:../src/wolfcrypt/src/dh.c **** /* if defined to not use floating point values do not compile in */
1008:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_DH_CONST
1009:../src/wolfcrypt/src/dh.c ****     static word32 DiscreteLogWorkFactor(word32 n)
1010:../src/wolfcrypt/src/dh.c ****     {
1011:../src/wolfcrypt/src/dh.c ****         /* assuming discrete log takes about the same time as factoring */
1012:../src/wolfcrypt/src/dh.c ****         if (n < 5)
1013:../src/wolfcrypt/src/dh.c ****             return 0;
1014:../src/wolfcrypt/src/dh.c ****         else
1015:../src/wolfcrypt/src/dh.c ****             return (word32)(2.4 * XPOW((double)n, 1.0/3.0) *
1016:../src/wolfcrypt/src/dh.c ****                     XPOW(XLOG((double)n), 2.0/3.0) - 5);
1017:../src/wolfcrypt/src/dh.c ****     }
1018:../src/wolfcrypt/src/dh.c **** #endif /* WOLFSSL_DH_CONST*/
1019:../src/wolfcrypt/src/dh.c **** 
1020:../src/wolfcrypt/src/dh.c **** 
1021:../src/wolfcrypt/src/dh.c **** /* if not using fixed points use DiscreteLogWorkFactor function for unusual size
1022:../src/wolfcrypt/src/dh.c ****    otherwise round up on size needed */
1023:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_DH_CONST
1024:../src/wolfcrypt/src/dh.c ****     #define WOLFSSL_DH_ROUND(x)
1025:../src/wolfcrypt/src/dh.c **** #else
1026:../src/wolfcrypt/src/dh.c ****     #define WOLFSSL_DH_ROUND(x) \
1027:../src/wolfcrypt/src/dh.c ****         do {                    \
1028:../src/wolfcrypt/src/dh.c ****             if (x % 128) {      \
1029:../src/wolfcrypt/src/dh.c ****                 x &= 0xffffff80;\
1030:../src/wolfcrypt/src/dh.c ****                 x += 128;       \
1031:../src/wolfcrypt/src/dh.c ****             }                   \
1032:../src/wolfcrypt/src/dh.c ****         }                       \
1033:../src/wolfcrypt/src/dh.c ****         while (0)
1034:../src/wolfcrypt/src/dh.c **** #endif
1035:../src/wolfcrypt/src/dh.c **** 
1036:../src/wolfcrypt/src/dh.c **** 
1037:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_NO_DH186
1038:../src/wolfcrypt/src/dh.c **** /* validate that (L,N) match allowed sizes from SP 800-56A, Section 5.5.1.1.
1039:../src/wolfcrypt/src/dh.c ****  * modLen - represents L, the size of p in bits
1040:../src/wolfcrypt/src/dh.c ****  * divLen - represents N, the size of q in bits
1041:../src/wolfcrypt/src/dh.c ****  * return 0 on success, -1 on error */
1042:../src/wolfcrypt/src/dh.c **** static int CheckDhLN(int modLen, int divLen)
1043:../src/wolfcrypt/src/dh.c **** {
 458                             		.loc 2 1043 1
 459 0000 7E AA                   		push.l	r10
 460                             	.LCFI11:
 461 0002 71 0A F4                		add	#-12, r0, r10
 462                             	.LCFI12:
 463 0005 EF A0                   		mov.L	r10, r0
 464 0007 E7 A1 01                		mov.L	r1, 4[r10]
 465 000a E7 A2 02                		mov.L	r2, 8[r10]
1044:../src/wolfcrypt/src/dh.c ****     int ret = -1;
 466                             		.loc 2 1044 9
 467 000d F8 A6 FF                		mov.L	#-1, [r10]
1045:../src/wolfcrypt/src/dh.c **** 
1046:../src/wolfcrypt/src/dh.c ****     switch (modLen) {
 468                             		.loc 2 1046 5
 469 0010 ED A5 01                		mov.L	4[r10], r5
 470 0013 76 05 00 04             		cmp	#0x400, r5
 471 0017 20 0D                   		beq	.L16
 472 0019 ED A5 01                		mov.L	4[r10], r5
 473 001c 76 05 00 08             		cmp	#0x800, r5
 474 0020 20 11                   		beq	.L17
1047:../src/wolfcrypt/src/dh.c ****         /* FA */
1048:../src/wolfcrypt/src/dh.c ****         case 1024:
1049:../src/wolfcrypt/src/dh.c ****             if (divLen == 160)
1050:../src/wolfcrypt/src/dh.c ****                 ret = 0;
1051:../src/wolfcrypt/src/dh.c ****             break;
1052:../src/wolfcrypt/src/dh.c ****         /* FB, FC */
1053:../src/wolfcrypt/src/dh.c ****         case 2048:
1054:../src/wolfcrypt/src/dh.c ****             if (divLen == 224 || divLen == 256)
1055:../src/wolfcrypt/src/dh.c ****                 ret = 0;
1056:../src/wolfcrypt/src/dh.c ****             break;
1057:../src/wolfcrypt/src/dh.c ****         default:
1058:../src/wolfcrypt/src/dh.c ****             break;
 475                             		.loc 2 1058 13
 476 0022 2E 26                   		bra	.L20
 477                             	.L16:
1049:../src/wolfcrypt/src/dh.c ****                 ret = 0;
 478                             		.loc 2 1049 16
 479 0024 ED A5 02                		mov.L	8[r10], r5
 480 0027 75 55 A0                		cmp	#0xa0, r5
 481 002a 21 1A                   		bne	.L24
1050:../src/wolfcrypt/src/dh.c ****             break;
 482                             		.loc 2 1050 21
 483 002c F8 A6 00                		mov.L	#0, [r10]
1051:../src/wolfcrypt/src/dh.c ****         /* FB, FC */
 484                             		.loc 2 1051 13
 485 002f 2E 15                   		bra	.L24
 486                             	.L17:
1054:../src/wolfcrypt/src/dh.c ****                 ret = 0;
 487                             		.loc 2 1054 16
 488 0031 ED A5 02                		mov.L	8[r10], r5
 489 0034 75 55 E0                		cmp	#0xe0, r5
 490 0037 11                      		beq	.L21
1054:../src/wolfcrypt/src/dh.c ****                 ret = 0;
 491                             		.loc 2 1054 31 discriminator 1
 492 0038 ED A5 02                		mov.L	8[r10], r5
 493 003b 76 05 00 01             		cmp	#0x100, r5
 494 003f 18                      		bne	.L25
 495                             	.L21:
1055:../src/wolfcrypt/src/dh.c ****             break;
 496                             		.loc 2 1055 21
 497 0040 F8 A6 00                		mov.L	#0, [r10]
1056:../src/wolfcrypt/src/dh.c ****         default:
 498                             		.loc 2 1056 13
 499 0043 0C                      		bra	.L25
 500                             	.L24:
1051:../src/wolfcrypt/src/dh.c ****         /* FB, FC */
 501                             		.loc 2 1051 13
 502 0044 03                      		nop
 503 0045 2E 03                   		bra	.L20
 504                             	.L25:
1056:../src/wolfcrypt/src/dh.c ****         default:
 505                             		.loc 2 1056 13
 506 0047 03                      		nop
 507                             	.L20:
1059:../src/wolfcrypt/src/dh.c ****     }
1060:../src/wolfcrypt/src/dh.c **** 
1061:../src/wolfcrypt/src/dh.c ****     return ret;
 508                             		.loc 2 1061 12
 509 0048 EC A5                   		mov.L	[r10], r5
1062:../src/wolfcrypt/src/dh.c **** }
 510                             		.loc 2 1062 1
 511 004a EF 51                   		mov.L	r5, r1
 512 004c 3F AA 04                		rtsd	#16, r10-r10
 513                             	.LFE47:
 515                             		.section C,"a",@progbits
 516                             		.p2align 2
 517                             	.LC0:
 518 0000 44 48 20 71 20 70 61 72 		.string	"DH q parameter needed for FIPS 186-4 key generation"
 518      61 6D 65 74 65 72 20 6E 
 518      65 65 64 65 64 20 66 6F 
 518      72 20 46 49 50 53 20 31 
 518      38 36 2D 34 20 6B 65 79 
 519                             	.LC1:
 520 0034 44 48 20 70 61 72 61 6D 		.string	"DH param sizes do not match SP 800-56A requirements"
 520      20 73 69 7A 65 73 20 64 
 520      6F 20 6E 6F 74 20 6D 61 
 520      74 63 68 20 53 50 20 38 
 520      30 30 2D 35 36 41 20 72 
 521                             	.LC2:
 522 0068 44 48 20 70 72 69 76 61 		.string	"DH private key output buffer too small"
 522      74 65 20 6B 65 79 20 6F 
 522      75 74 70 75 74 20 62 75 
 522      66 66 65 72 20 74 6F 6F 
 522      20 73 6D 61 6C 6C 00 
 523 008f 00                      		.section	.text.GeneratePrivateDh186,"ax",@progbits
 525                             	_GeneratePrivateDh186:
 526                             	.LFB48:
1063:../src/wolfcrypt/src/dh.c **** 
1064:../src/wolfcrypt/src/dh.c **** 
1065:../src/wolfcrypt/src/dh.c **** /* Create DH private key
1066:../src/wolfcrypt/src/dh.c ****  *
1067:../src/wolfcrypt/src/dh.c ****  * Based on NIST SP 800-56Ar3
1068:../src/wolfcrypt/src/dh.c ****  * "5.6.1.1.3 Key Pair Generation Using Extra Random Bits"
1069:../src/wolfcrypt/src/dh.c ****  *
1070:../src/wolfcrypt/src/dh.c ****  * dh     - pointer to initialized DhKey structure, needs to have dh->q
1071:../src/wolfcrypt/src/dh.c ****  * rng    - pointer to initialized WC_RNG structure
1072:../src/wolfcrypt/src/dh.c ****  * priv   - output location for generated private key
1073:../src/wolfcrypt/src/dh.c ****  * privSz - IN/OUT, size of priv buffer, size of generated private key
1074:../src/wolfcrypt/src/dh.c ****  *
1075:../src/wolfcrypt/src/dh.c ****  * return 0 on success, negative on error */
1076:../src/wolfcrypt/src/dh.c **** static int GeneratePrivateDh186(DhKey* key, WC_RNG* rng, byte* priv,
1077:../src/wolfcrypt/src/dh.c ****                                 word32* privSz)
1078:../src/wolfcrypt/src/dh.c **** {
 527                             		.loc 2 1078 1
 528 0000 7E AA                   		push.l	r10
 529                             	.LCFI13:
 530 0002 71 0A A4                		add	#-92, r0, r10
 531                             	.LCFI14:
 532 0005 71 A0 F8                		add	#-8, r10, r0
 533                             	.LCFI15:
 534 0008 E7 A1 13                		mov.L	r1, 76[r10]
 535 000b E7 A2 14                		mov.L	r2, 80[r10]
 536 000e E7 A3 15                		mov.L	r3, 84[r10]
 537 0011 E7 A4 16                		mov.L	r4, 88[r10]
1079:../src/wolfcrypt/src/dh.c ****     byte* cBuf;
1080:../src/wolfcrypt/src/dh.c ****     int qSz, pSz, cSz, err;
1081:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1082:../src/wolfcrypt/src/dh.c ****     mp_int* tmpQ = NULL;
 538                             		.loc 2 1082 13
 539 0014 F9 A6 01 00             		mov.L	#0, 4[r10]
1083:../src/wolfcrypt/src/dh.c ****     mp_int* tmpX = NULL;
 540                             		.loc 2 1083 13
 541 0018 F9 A6 02 00             		mov.L	#0, 8[r10]
1084:../src/wolfcrypt/src/dh.c **** #else
1085:../src/wolfcrypt/src/dh.c ****     mp_int tmpQ[1], tmpX[1];
1086:../src/wolfcrypt/src/dh.c **** #endif
1087:../src/wolfcrypt/src/dh.c **** 
1088:../src/wolfcrypt/src/dh.c ****     /* Parameters validated in calling functions. */
1089:../src/wolfcrypt/src/dh.c **** 
1090:../src/wolfcrypt/src/dh.c ****     if (mp_iszero(&key->q) == MP_YES) {
 542                             		.loc 2 1090 9
 543 001c ED A5 13                		mov.L	76[r10], r5
 544 001f EE 55 88 01             		mov.L	1568[r5], r5
 545                             		.loc 2 1090 8
 546 0023 61 05                   		cmp	#0, r5
 547 0025 21 13                   		bne	.L27
1091:../src/wolfcrypt/src/dh.c ****         WOLFSSL_MSG("DH q parameter needed for FIPS 186-4 key generation");
 548                             		.loc 2 1091 9
 549 0027 FB 12 00 00 00 00       		mov.L	#.LC0, r1
 550 002d 05 00 00 00             		bsr	_WOLFSSL_MSG
1092:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
 551                             		.loc 2 1092 16
 552 0031 FB 5A 53 FF             		mov.L	#-173, r5
 553 0035 38 DB 02                		bra	.L28
 554                             	.L27:
1093:../src/wolfcrypt/src/dh.c ****     }
1094:../src/wolfcrypt/src/dh.c **** 
1095:../src/wolfcrypt/src/dh.c ****     qSz = mp_unsigned_bin_size(&key->q);
 555                             		.loc 2 1095 32
 556 0038 ED A5 13                		mov.L	76[r10], r5
 557 003b 72 55 20 06             		add	#0x620, r5
 558                             		.loc 2 1095 11
 559 003f EF 51                   		mov.L	r5, r1
 560 0041 05 00 00 00             		bsr	_sp_unsigned_bin_size
 561 0045 E7 A1 03                		mov.L	r1, 12[r10]
1096:../src/wolfcrypt/src/dh.c ****     pSz = mp_unsigned_bin_size(&key->p);
 562                             		.loc 2 1096 32
 563 0048 ED A5 13                		mov.L	76[r10], r5
 564                             		.loc 2 1096 11
 565 004b EF 51                   		mov.L	r5, r1
 566 004d 05 00 00 00             		bsr	_sp_unsigned_bin_size
 567 0051 E7 A1 04                		mov.L	r1, 16[r10]
1097:../src/wolfcrypt/src/dh.c **** 
1098:../src/wolfcrypt/src/dh.c ****     /* verify (L,N) pair bit lengths */
1099:../src/wolfcrypt/src/dh.c ****     /* Trusted primes don't need to be checked. */
1100:../src/wolfcrypt/src/dh.c ****     if (!key->trustedGroup &&
 568                             		.loc 2 1100 13
 569 0054 ED A5 13                		mov.L	76[r10], r5
 570 0057 EE 55 4D 02             		mov.L	2356[r5], r5
 571                             		.loc 2 1100 8
 572 005b 61 05                   		cmp	#0, r5
 573 005d 21 2C                   		bne	.L29
1101:../src/wolfcrypt/src/dh.c ****             CheckDhLN(pSz * WOLFSSL_BIT_SIZE, qSz * WOLFSSL_BIT_SIZE) != 0) {
 574                             		.loc 2 1101 13 discriminator 1
 575 005f ED A5 04                		mov.L	16[r10], r5
 576 0062 FD C3 54                		shll	#3, r5, r4
 577 0065 ED A5 03                		mov.L	12[r10], r5
 578 0068 6C 35                   		shll	#3, r5
 579 006a EF 52                   		mov.L	r5, r2
 580 006c EF 41                   		mov.L	r4, r1
 581 006e 05 00 00 00             		bsr	_CheckDhLN
 582 0072 EF 15                   		mov.L	r1, r5
1100:../src/wolfcrypt/src/dh.c ****             CheckDhLN(pSz * WOLFSSL_BIT_SIZE, qSz * WOLFSSL_BIT_SIZE) != 0) {
 583                             		.loc 2 1100 28 discriminator 1
 584 0074 61 05                   		cmp	#0, r5
 585 0076 20 13                   		beq	.L29
1102:../src/wolfcrypt/src/dh.c ****         WOLFSSL_MSG("DH param sizes do not match SP 800-56A requirements");
 586                             		.loc 2 1102 9
 587 0078 FB 12 34 00 00 00       		mov.L	#.LC1, r1
 588 007e 05 00 00 00             		bsr	_WOLFSSL_MSG
1103:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
 589                             		.loc 2 1103 16
 590 0082 FB 5A 53 FF             		mov.L	#-173, r5
 591 0086 38 8A 02                		bra	.L28
 592                             	.L29:
1104:../src/wolfcrypt/src/dh.c ****     }
1105:../src/wolfcrypt/src/dh.c **** 
1106:../src/wolfcrypt/src/dh.c ****     /* generate extra 64 bits so that bias from mod function is negligible */
1107:../src/wolfcrypt/src/dh.c ****     cSz = *privSz + (64 / WOLFSSL_BIT_SIZE);
 593                             		.loc 2 1107 11
 594 0089 ED A5 16                		mov.L	88[r10], r5
 595 008c EC 55                   		mov.L	[r5], r5
 596                             		.loc 2 1107 19
 597 008e 62 85                   		add	#8, r5
 598                             		.loc 2 1107 9
 599 0090 E7 A5 05                		mov.L	r5, 20[r10]
1108:../src/wolfcrypt/src/dh.c ****     cBuf = (byte*)XMALLOC(cSz, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 600                             		.loc 2 1108 19
 601 0093 ED A5 05                		mov.L	20[r10], r5
 602 0096 EF 51                   		mov.L	r5, r1
 603 0098 05 00 00 00             		bsr	_wolfSSL_Malloc
 604 009c E7 A1 06                		mov.L	r1, 24[r10]
1109:../src/wolfcrypt/src/dh.c ****     if (cBuf == NULL) {
 605                             		.loc 2 1109 8
 606 009f ED A5 06                		mov.L	24[r10], r5
 607 00a2 61 05                   		cmp	#0, r5
 608 00a4 1F                      		bne	.L30
1110:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 609                             		.loc 2 1110 16
 610 00a5 FB 56 83                		mov.L	#-125, r5
 611 00a8 38 68 02                		bra	.L28
 612                             	.L30:
1111:../src/wolfcrypt/src/dh.c ****     }
1112:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1113:../src/wolfcrypt/src/dh.c ****     tmpQ = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 613                             		.loc 2 1113 21
 614 00ab FB 1A 10 03             		mov.L	#0x310, r1
 615 00af 05 00 00 00             		bsr	_wolfSSL_Malloc
 616 00b3 E7 A1 01                		mov.L	r1, 4[r10]
1114:../src/wolfcrypt/src/dh.c ****     if (tmpQ == NULL) {
 617                             		.loc 2 1114 8
 618 00b6 ED A5 01                		mov.L	4[r10], r5
 619 00b9 61 05                   		cmp	#0, r5
 620 00bb 21 1B                   		bne	.L31
 621                             	.LBB2:
1115:../src/wolfcrypt/src/dh.c ****         XFREE(cBuf, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 622                             		.loc 2 1115 9
 623 00bd ED A5 06                		mov.L	24[r10], r5
 624 00c0 E7 A5 07                		mov.L	r5, 28[r10]
 625 00c3 ED A5 07                		mov.L	28[r10], r5
 626 00c6 61 05                   		cmp	#0, r5
 627 00c8 10                      		beq	.L32
 628                             		.loc 2 1115 9 is_stmt 0 discriminator 1
 629 00c9 ED A1 07                		mov.L	28[r10], r1
 630 00cc 05 00 00 00             		bsr	_wolfSSL_Free
 631                             	.L32:
 632                             	.LBE2:
1116:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 633                             		.loc 2 1116 16 is_stmt 1
 634 00d0 FB 56 83                		mov.L	#-125, r5
 635 00d3 38 3D 02                		bra	.L28
 636                             	.L31:
1117:../src/wolfcrypt/src/dh.c ****     }
1118:../src/wolfcrypt/src/dh.c ****     tmpX = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 637                             		.loc 2 1118 21
 638 00d6 FB 1A 10 03             		mov.L	#0x310, r1
 639 00da 05 00 00 00             		bsr	_wolfSSL_Malloc
 640 00de E7 A1 02                		mov.L	r1, 8[r10]
1119:../src/wolfcrypt/src/dh.c ****     if (tmpX == NULL) {
 641                             		.loc 2 1119 8
 642 00e1 ED A5 02                		mov.L	8[r10], r5
 643 00e4 61 05                   		cmp	#0, r5
 644 00e6 21 2E                   		bne	.L33
 645                             	.LBB3:
1120:../src/wolfcrypt/src/dh.c ****         XFREE(cBuf, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 646                             		.loc 2 1120 9
 647 00e8 ED A5 06                		mov.L	24[r10], r5
 648 00eb E7 A5 08                		mov.L	r5, 32[r10]
 649 00ee ED A5 08                		mov.L	32[r10], r5
 650 00f1 61 05                   		cmp	#0, r5
 651 00f3 10                      		beq	.L34
 652                             		.loc 2 1120 9 is_stmt 0 discriminator 1
 653 00f4 ED A1 08                		mov.L	32[r10], r1
 654 00f7 05 00 00 00             		bsr	_wolfSSL_Free
 655                             	.L34:
 656                             	.LBE3:
 657                             	.LBB4:
1121:../src/wolfcrypt/src/dh.c ****         XFREE(tmpQ, key->heap, DYNAMIC_TYPE_DH);
 658                             		.loc 2 1121 9 is_stmt 1
 659 00fb ED A5 01                		mov.L	4[r10], r5
 660 00fe E7 A5 09                		mov.L	r5, 36[r10]
 661 0101 ED A5 09                		mov.L	36[r10], r5
 662 0104 61 05                   		cmp	#0, r5
 663 0106 10                      		beq	.L35
 664                             		.loc 2 1121 9 is_stmt 0 discriminator 1
 665 0107 ED A1 09                		mov.L	36[r10], r1
 666 010a 05 00 00 00             		bsr	_wolfSSL_Free
 667                             	.L35:
 668                             	.LBE4:
1122:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 669                             		.loc 2 1122 16 is_stmt 1
 670 010e FB 56 83                		mov.L	#-125, r5
 671 0111 38 FF 01                		bra	.L28
 672                             	.L33:
1123:../src/wolfcrypt/src/dh.c ****     }
1124:../src/wolfcrypt/src/dh.c **** #endif
1125:../src/wolfcrypt/src/dh.c **** 
1126:../src/wolfcrypt/src/dh.c **** 
1127:../src/wolfcrypt/src/dh.c ****     if ((err = mp_init_multi(tmpX, tmpQ, NULL, NULL, NULL, NULL))
 673                             		.loc 2 1127 16
 674 0114 3E 01 00                		mov.L	#0, 4[r0]
 675 0117 F8 06 00                		mov.L	#0, [r0]
 676 011a 66 04                   		mov.L	#0, r4
 677 011c 66 03                   		mov.L	#0, r3
 678 011e ED A2 01                		mov.L	4[r10], r2
 679 0121 ED A1 02                		mov.L	8[r10], r1
 680 0124 05 00 00 00             		bsr	_sp_init_multi
 681 0128 E3 A1                   		mov.L	r1, [r10]
 682                             		.loc 2 1127 8
 683 012a EC A5                   		mov.L	[r10], r5
 684 012c 61 05                   		cmp	#0, r5
 685 012e 20 40                   		beq	.L36
 686                             	.LBB5:
1128:../src/wolfcrypt/src/dh.c ****                    != MP_OKAY) {
1129:../src/wolfcrypt/src/dh.c ****         XFREE(cBuf, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 687                             		.loc 2 1129 9
 688 0130 ED A5 06                		mov.L	24[r10], r5
 689 0133 E7 A5 0A                		mov.L	r5, 40[r10]
 690 0136 ED A5 0A                		mov.L	40[r10], r5
 691 0139 61 05                   		cmp	#0, r5
 692 013b 10                      		beq	.L37
 693                             		.loc 2 1129 9 is_stmt 0 discriminator 1
 694 013c ED A1 0A                		mov.L	40[r10], r1
 695 013f 05 00 00 00             		bsr	_wolfSSL_Free
 696                             	.L37:
 697                             	.LBE5:
 698                             	.LBB6:
1130:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1131:../src/wolfcrypt/src/dh.c ****         XFREE(tmpQ, key->heap, DYNAMIC_TYPE_DH);
 699                             		.loc 2 1131 9 is_stmt 1
 700 0143 ED A5 01                		mov.L	4[r10], r5
 701 0146 E7 A5 0B                		mov.L	r5, 44[r10]
 702 0149 ED A5 0B                		mov.L	44[r10], r5
 703 014c 61 05                   		cmp	#0, r5
 704 014e 10                      		beq	.L38
 705                             		.loc 2 1131 9 is_stmt 0 discriminator 1
 706 014f ED A1 0B                		mov.L	44[r10], r1
 707 0152 05 00 00 00             		bsr	_wolfSSL_Free
 708                             	.L38:
 709                             	.LBE6:
 710                             	.LBB7:
1132:../src/wolfcrypt/src/dh.c ****         XFREE(tmpX, key->heap, DYNAMIC_TYPE_DH);
 711                             		.loc 2 1132 9 is_stmt 1
 712 0156 ED A5 02                		mov.L	8[r10], r5
 713 0159 E7 A5 0C                		mov.L	r5, 48[r10]
 714 015c ED A5 0C                		mov.L	48[r10], r5
 715 015f 61 05                   		cmp	#0, r5
 716 0161 10                      		beq	.L39
 717                             		.loc 2 1132 9 is_stmt 0 discriminator 1
 718 0162 ED A1 0C                		mov.L	48[r10], r1
 719 0165 05 00 00 00             		bsr	_wolfSSL_Free
 720                             	.L39:
 721                             	.LBE7:
1133:../src/wolfcrypt/src/dh.c **** #endif
1134:../src/wolfcrypt/src/dh.c ****         return err;
 722                             		.loc 2 1134 16 is_stmt 1
 723 0169 EC A5                   		mov.L	[r10], r5
 724 016b 38 A5 01                		bra	.L28
 725                             	.L36:
1135:../src/wolfcrypt/src/dh.c ****     }
1136:../src/wolfcrypt/src/dh.c **** 
1137:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
1138:../src/wolfcrypt/src/dh.c ****     wc_MemZero_Add("GeneratePrivateDh186 cBuf", cBuf, cSz);
1139:../src/wolfcrypt/src/dh.c ****     mp_memzero_add("GeneratePrivateDh186 tmpX", tmpX);
1140:../src/wolfcrypt/src/dh.c **** #endif
1141:../src/wolfcrypt/src/dh.c ****     do {
1142:../src/wolfcrypt/src/dh.c ****         /* generate N+64 bits (c) from RBG into tmpX, making sure positive.
1143:../src/wolfcrypt/src/dh.c ****          * Hash_DRBG uses SHA-256 which matches maximum
1144:../src/wolfcrypt/src/dh.c ****          * requested_security_strength of (L,N) */
1145:../src/wolfcrypt/src/dh.c ****         err = wc_RNG_GenerateBlock(rng, cBuf, cSz);
 726                             		.loc 2 1145 15
 727 016e ED A5 05                		mov.L	20[r10], r5
 728 0171 EF 53                   		mov.L	r5, r3
 729 0173 ED A2 06                		mov.L	24[r10], r2
 730 0176 ED A1 14                		mov.L	80[r10], r1
 731 0179 05 00 00 00             		bsr	_wc_RNG_GenerateBlock
 732 017d E3 A1                   		mov.L	r1, [r10]
1146:../src/wolfcrypt/src/dh.c ****         if (err == MP_OKAY)
 733                             		.loc 2 1146 12
 734 017f EC A5                   		mov.L	[r10], r5
 735 0181 61 05                   		cmp	#0, r5
 736 0183 21 13                   		bne	.L40
1147:../src/wolfcrypt/src/dh.c ****             err = mp_read_unsigned_bin(tmpX, cBuf, cSz);
 737                             		.loc 2 1147 19
 738 0185 ED A5 05                		mov.L	20[r10], r5
 739 0188 EF 53                   		mov.L	r5, r3
 740 018a ED A2 06                		mov.L	24[r10], r2
 741 018d ED A1 02                		mov.L	8[r10], r1
 742 0190 05 00 00 00             		bsr	_sp_read_unsigned_bin
 743 0194 E3 A1                   		mov.L	r1, [r10]
 744                             	.L40:
1148:../src/wolfcrypt/src/dh.c ****         if (err != MP_OKAY) {
 745                             		.loc 2 1148 12
 746 0196 EC A5                   		mov.L	[r10], r5
 747 0198 61 05                   		cmp	#0, r5
 748 019a 20 4E                   		beq	.L41
1149:../src/wolfcrypt/src/dh.c ****             mp_clear(tmpX);
 749                             		.loc 2 1149 13
 750 019c ED A1 02                		mov.L	8[r10], r1
 751 019f 05 00 00 00             		bsr	_sp_clear
1150:../src/wolfcrypt/src/dh.c ****             mp_clear(tmpQ);
 752                             		.loc 2 1150 13
 753 01a3 ED A1 01                		mov.L	4[r10], r1
 754 01a6 05 00 00 00             		bsr	_sp_clear
 755                             	.LBB8:
1151:../src/wolfcrypt/src/dh.c ****             XFREE(cBuf, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 756                             		.loc 2 1151 13
 757 01aa ED A5 06                		mov.L	24[r10], r5
 758 01ad E7 A5 0D                		mov.L	r5, 52[r10]
 759 01b0 ED A5 0D                		mov.L	52[r10], r5
 760 01b3 61 05                   		cmp	#0, r5
 761 01b5 10                      		beq	.L42
 762                             		.loc 2 1151 13 is_stmt 0 discriminator 1
 763 01b6 ED A1 0D                		mov.L	52[r10], r1
 764 01b9 05 00 00 00             		bsr	_wolfSSL_Free
 765                             	.L42:
 766                             	.LBE8:
 767                             	.LBB9:
1152:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1153:../src/wolfcrypt/src/dh.c ****             XFREE(tmpQ, key->heap, DYNAMIC_TYPE_DH);
 768                             		.loc 2 1153 13 is_stmt 1
 769 01bd ED A5 01                		mov.L	4[r10], r5
 770 01c0 E7 A5 0E                		mov.L	r5, 56[r10]
 771 01c3 ED A5 0E                		mov.L	56[r10], r5
 772 01c6 61 05                   		cmp	#0, r5
 773 01c8 10                      		beq	.L43
 774                             		.loc 2 1153 13 is_stmt 0 discriminator 1
 775 01c9 ED A1 0E                		mov.L	56[r10], r1
 776 01cc 05 00 00 00             		bsr	_wolfSSL_Free
 777                             	.L43:
 778                             	.LBE9:
 779                             	.LBB10:
1154:../src/wolfcrypt/src/dh.c ****             XFREE(tmpX, key->heap, DYNAMIC_TYPE_DH);
 780                             		.loc 2 1154 13 is_stmt 1
 781 01d0 ED A5 02                		mov.L	8[r10], r5
 782 01d3 E7 A5 0F                		mov.L	r5, 60[r10]
 783 01d6 ED A5 0F                		mov.L	60[r10], r5
 784 01d9 61 05                   		cmp	#0, r5
 785 01db 10                      		beq	.L44
 786                             		.loc 2 1154 13 is_stmt 0 discriminator 1
 787 01dc ED A1 0F                		mov.L	60[r10], r1
 788 01df 05 00 00 00             		bsr	_wolfSSL_Free
 789                             	.L44:
 790                             	.LBE10:
1155:../src/wolfcrypt/src/dh.c **** #endif
1156:../src/wolfcrypt/src/dh.c ****             return err;
 791                             		.loc 2 1156 20 is_stmt 1
 792 01e3 EC A5                   		mov.L	[r10], r5
 793 01e5 38 2B 01                		bra	.L28
 794                             	.L41:
1157:../src/wolfcrypt/src/dh.c ****         }
1158:../src/wolfcrypt/src/dh.c ****     } while (mp_cmp_d(tmpX, 1) != MP_GT);
 795                             		.loc 2 1158 14
 796 01e8 66 12                   		mov.L	#1, r2
 797 01ea ED A1 02                		mov.L	8[r10], r1
 798 01ed 05 00 00 00             		bsr	_sp_cmp_d
 799 01f1 EF 15                   		mov.L	r1, r5
 800                             		.loc 2 1158 5
 801 01f3 61 15                   		cmp	#1, r5
 802 01f5 3B 79 FF                		bne	.L36
1159:../src/wolfcrypt/src/dh.c **** 
1160:../src/wolfcrypt/src/dh.c ****     ForceZero(cBuf, cSz);
 803                             		.loc 2 1160 5
 804 01f8 ED A5 05                		mov.L	20[r10], r5
 805 01fb EF 52                   		mov.L	r5, r2
 806 01fd ED A1 06                		mov.L	24[r10], r1
 807 0200 05 00 00 00             		bsr	_ForceZero
 808                             	.LBB11:
1161:../src/wolfcrypt/src/dh.c ****     XFREE(cBuf, key->heap, DYNAMIC_TYPE_TMP_BUFFER);
 809                             		.loc 2 1161 5
 810 0204 ED A5 06                		mov.L	24[r10], r5
 811 0207 E7 A5 10                		mov.L	r5, 64[r10]
 812 020a ED A5 10                		mov.L	64[r10], r5
 813 020d 61 05                   		cmp	#0, r5
 814 020f 10                      		beq	.L45
 815                             		.loc 2 1161 5 is_stmt 0 discriminator 1
 816 0210 ED A1 10                		mov.L	64[r10], r1
 817 0213 05 00 00 00             		bsr	_wolfSSL_Free
 818                             	.L45:
 819                             	.LBE11:
1162:../src/wolfcrypt/src/dh.c **** 
1163:../src/wolfcrypt/src/dh.c ****     /* tmpQ: M = min(2^N,q) - 1 */
1164:../src/wolfcrypt/src/dh.c ****     if (err == MP_OKAY)
 820                             		.loc 2 1164 8 is_stmt 1
 821 0217 EC A5                   		mov.L	[r10], r5
 822 0219 61 05                   		cmp	#0, r5
 823 021b 21 14                   		bne	.L46
1165:../src/wolfcrypt/src/dh.c ****         err = mp_2expt(tmpQ, *privSz * 8);
 824                             		.loc 2 1165 30
 825 021d ED A5 16                		mov.L	88[r10], r5
 826 0220 EC 55                   		mov.L	[r5], r5
 827                             		.loc 2 1165 38
 828 0222 6C 35                   		shll	#3, r5
 829                             		.loc 2 1165 15
 830 0224 EF 52                   		mov.L	r5, r2
 831 0226 ED A1 01                		mov.L	4[r10], r1
 832 0229 05 00 00 00             		bsr	_sp_2expt
 833 022d E3 A1                   		mov.L	r1, [r10]
 834                             	.L46:
1166:../src/wolfcrypt/src/dh.c **** 
1167:../src/wolfcrypt/src/dh.c ****     if (err == MP_OKAY) {
 835                             		.loc 2 1167 8
 836 022f EC A5                   		mov.L	[r10], r5
 837 0231 61 05                   		cmp	#0, r5
 838 0233 21 2A                   		bne	.L47
1168:../src/wolfcrypt/src/dh.c ****         if (mp_cmp(tmpQ, &key->q) == MP_GT) {
 839                             		.loc 2 1168 26
 840 0235 ED A5 13                		mov.L	76[r10], r5
 841 0238 72 55 20 06             		add	#0x620, r5
 842                             		.loc 2 1168 13
 843 023c EF 52                   		mov.L	r5, r2
 844 023e ED A1 01                		mov.L	4[r10], r1
 845 0241 05 00 00 00             		bsr	_sp_cmp
 846 0245 EF 15                   		mov.L	r1, r5
 847                             		.loc 2 1168 12
 848 0247 61 15                   		cmp	#1, r5
 849 0249 21 14                   		bne	.L47
1169:../src/wolfcrypt/src/dh.c ****             err = mp_copy(&key->q, tmpQ);
 850                             		.loc 2 1169 27
 851 024b ED A5 13                		mov.L	76[r10], r5
 852 024e 72 55 20 06             		add	#0x620, r5
 853                             		.loc 2 1169 19
 854 0252 ED A2 01                		mov.L	4[r10], r2
 855 0255 EF 51                   		mov.L	r5, r1
 856 0257 05 00 00 00             		bsr	_sp_copy
 857 025b E3 A1                   		mov.L	r1, [r10]
 858                             	.L47:
1170:../src/wolfcrypt/src/dh.c ****         }
1171:../src/wolfcrypt/src/dh.c ****     }
1172:../src/wolfcrypt/src/dh.c **** 
1173:../src/wolfcrypt/src/dh.c ****     if (err == MP_OKAY)
 859                             		.loc 2 1173 8
 860 025d EC A5                   		mov.L	[r10], r5
 861 025f 61 05                   		cmp	#0, r5
 862 0261 21 10                   		bne	.L48
1174:../src/wolfcrypt/src/dh.c ****         err = mp_sub_d(tmpQ, 1, tmpQ);
 863                             		.loc 2 1174 15
 864 0263 ED A3 01                		mov.L	4[r10], r3
 865 0266 66 12                   		mov.L	#1, r2
 866 0268 ED A1 01                		mov.L	4[r10], r1
 867 026b 05 00 00 00             		bsr	_sp_sub_d
 868 026f E3 A1                   		mov.L	r1, [r10]
 869                             	.L48:
1175:../src/wolfcrypt/src/dh.c **** 
1176:../src/wolfcrypt/src/dh.c ****     /* x = c mod (M), tmpX holds c */
1177:../src/wolfcrypt/src/dh.c ****     if (err == MP_OKAY)
 870                             		.loc 2 1177 8
 871 0271 EC A5                   		mov.L	[r10], r5
 872 0273 61 05                   		cmp	#0, r5
 873 0275 21 11                   		bne	.L49
1178:../src/wolfcrypt/src/dh.c ****         err = mp_mod(tmpX, tmpQ, tmpX);
 874                             		.loc 2 1178 15
 875 0277 ED A3 02                		mov.L	8[r10], r3
 876 027a ED A2 01                		mov.L	4[r10], r2
 877 027d ED A1 02                		mov.L	8[r10], r1
 878 0280 05 00 00 00             		bsr	_sp_mod
 879 0284 E3 A1                   		mov.L	r1, [r10]
 880                             	.L49:
1179:../src/wolfcrypt/src/dh.c **** 
1180:../src/wolfcrypt/src/dh.c ****     /* x = c mod (M) + 1 */
1181:../src/wolfcrypt/src/dh.c ****     if (err == MP_OKAY)
 881                             		.loc 2 1181 8
 882 0286 EC A5                   		mov.L	[r10], r5
 883 0288 61 05                   		cmp	#0, r5
 884 028a 21 10                   		bne	.L50
1182:../src/wolfcrypt/src/dh.c ****         err = mp_add_d(tmpX, 1, tmpX);
 885                             		.loc 2 1182 15
 886 028c ED A3 02                		mov.L	8[r10], r3
 887 028f 66 12                   		mov.L	#1, r2
 888 0291 ED A1 02                		mov.L	8[r10], r1
 889 0294 05 00 00 00             		bsr	_sp_add_d
 890 0298 E3 A1                   		mov.L	r1, [r10]
 891                             	.L50:
1183:../src/wolfcrypt/src/dh.c **** 
1184:../src/wolfcrypt/src/dh.c ****     /* copy tmpX into priv */
1185:../src/wolfcrypt/src/dh.c ****     if (err == MP_OKAY) {
 892                             		.loc 2 1185 8
 893 029a EC A5                   		mov.L	[r10], r5
 894 029c 61 05                   		cmp	#0, r5
 895 029e 21 3C                   		bne	.L51
1186:../src/wolfcrypt/src/dh.c ****         pSz = mp_unsigned_bin_size(tmpX);
 896                             		.loc 2 1186 15
 897 02a0 ED A1 02                		mov.L	8[r10], r1
 898 02a3 05 00 00 00             		bsr	_sp_unsigned_bin_size
 899 02a7 E7 A1 04                		mov.L	r1, 16[r10]
1187:../src/wolfcrypt/src/dh.c ****         if (pSz > (int)*privSz) {
 900                             		.loc 2 1187 24
 901 02aa ED A5 16                		mov.L	88[r10], r5
 902 02ad EC 55                   		mov.L	[r5], r5
 903                             		.loc 2 1187 12
 904 02af ED A4 04                		mov.L	16[r10], r4
 905 02b2 47 54                   		cmp	r5, r4
 906 02b4 2B 12                   		ble	.L52
1188:../src/wolfcrypt/src/dh.c ****             WOLFSSL_MSG("DH private key output buffer too small");
 907                             		.loc 2 1188 13
 908 02b6 FB 12 68 00 00 00       		mov.L	#.LC2, r1
 909 02bc 05 00 00 00             		bsr	_WOLFSSL_MSG
1189:../src/wolfcrypt/src/dh.c ****             err = BAD_FUNC_ARG;
 910                             		.loc 2 1189 17
 911 02c0 F8 AA 53 FF             		mov.L	#-173, [r10]
 912 02c4 2E 16                   		bra	.L51
 913                             	.L52:
1190:../src/wolfcrypt/src/dh.c ****         } else {
1191:../src/wolfcrypt/src/dh.c ****             *privSz = pSz;
 914                             		.loc 2 1191 21
 915 02c6 ED A4 04                		mov.L	16[r10], r4
 916 02c9 ED A5 16                		mov.L	88[r10], r5
 917 02cc E3 54                   		mov.L	r4, [r5]
1192:../src/wolfcrypt/src/dh.c ****             err = mp_to_unsigned_bin(tmpX, priv);
 918                             		.loc 2 1192 19
 919 02ce ED A2 15                		mov.L	84[r10], r2
 920 02d1 ED A1 02                		mov.L	8[r10], r1
 921 02d4 05 00 00 00             		bsr	_sp_to_unsigned_bin
 922 02d8 E3 A1                   		mov.L	r1, [r10]
 923                             	.L51:
1193:../src/wolfcrypt/src/dh.c ****         }
1194:../src/wolfcrypt/src/dh.c ****     }
1195:../src/wolfcrypt/src/dh.c **** 
1196:../src/wolfcrypt/src/dh.c ****     mp_forcezero(tmpX);
 924                             		.loc 2 1196 5
 925 02da ED A1 02                		mov.L	8[r10], r1
 926 02dd 05 00 00 00             		bsr	_sp_forcezero
1197:../src/wolfcrypt/src/dh.c ****     mp_clear(tmpQ);
 927                             		.loc 2 1197 5
 928 02e1 ED A1 01                		mov.L	4[r10], r1
 929 02e4 05 00 00 00             		bsr	_sp_clear
 930                             	.LBB12:
1198:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1199:../src/wolfcrypt/src/dh.c ****     XFREE(tmpQ, key->heap, DYNAMIC_TYPE_DH);
 931                             		.loc 2 1199 5
 932 02e8 ED A5 01                		mov.L	4[r10], r5
 933 02eb E7 A5 11                		mov.L	r5, 68[r10]
 934 02ee ED A5 11                		mov.L	68[r10], r5
 935 02f1 61 05                   		cmp	#0, r5
 936 02f3 10                      		beq	.L53
 937                             		.loc 2 1199 5 is_stmt 0 discriminator 1
 938 02f4 ED A1 11                		mov.L	68[r10], r1
 939 02f7 05 00 00 00             		bsr	_wolfSSL_Free
 940                             	.L53:
 941                             	.LBE12:
 942                             	.LBB13:
1200:../src/wolfcrypt/src/dh.c ****     XFREE(tmpX, key->heap, DYNAMIC_TYPE_DH);
 943                             		.loc 2 1200 5 is_stmt 1
 944 02fb ED A5 02                		mov.L	8[r10], r5
 945 02fe E7 A5 12                		mov.L	r5, 72[r10]
 946 0301 ED A5 12                		mov.L	72[r10], r5
 947 0304 61 05                   		cmp	#0, r5
 948 0306 10                      		beq	.L54
 949                             		.loc 2 1200 5 is_stmt 0 discriminator 1
 950 0307 ED A1 12                		mov.L	72[r10], r1
 951 030a 05 00 00 00             		bsr	_wolfSSL_Free
 952                             	.L54:
 953                             	.LBE13:
1201:../src/wolfcrypt/src/dh.c **** #elif defined(WOLFSSL_CHECK_MEM_ZERO)
1202:../src/wolfcrypt/src/dh.c ****     mp_memzero_check(tmpX);
1203:../src/wolfcrypt/src/dh.c **** #endif
1204:../src/wolfcrypt/src/dh.c **** 
1205:../src/wolfcrypt/src/dh.c ****     return err;
 954                             		.loc 2 1205 12 is_stmt 1
 955 030e EC A5                   		mov.L	[r10], r5
 956                             		.balign 8,3,1
 957                             	.L28:
1206:../src/wolfcrypt/src/dh.c **** }
 958                             		.loc 2 1206 1
 959 0310 EF 51                   		mov.L	r5, r1
 960 0312 3F AA 1A                		rtsd	#104, r10-r10
 961                             	.LFE48:
 963 0315 FC 13 00                		.section	.text.GeneratePrivateDh,"ax",@progbits
 965                             	_GeneratePrivateDh:
 966                             	.LFB49:
1207:../src/wolfcrypt/src/dh.c **** #endif /* WOLFSSL_NO_DH186 */
1208:../src/wolfcrypt/src/dh.c **** #endif /* !WC_NO_RNG */
1209:../src/wolfcrypt/src/dh.c **** 
1210:../src/wolfcrypt/src/dh.c **** static int GeneratePrivateDh(DhKey* key, WC_RNG* rng, byte* priv,
1211:../src/wolfcrypt/src/dh.c ****                              word32* privSz)
1212:../src/wolfcrypt/src/dh.c **** {
 967                             		.loc 2 1212 1
 968 0000 7E AA                   		push.l	r10
 969                             	.LCFI16:
 970 0002 71 0A E8                		add	#-24, r0, r10
 971                             	.LCFI17:
 972 0005 EF A0                   		mov.L	r10, r0
 973 0007 E7 A1 02                		mov.L	r1, 8[r10]
 974 000a E7 A2 03                		mov.L	r2, 12[r10]
 975 000d E7 A3 04                		mov.L	r3, 16[r10]
 976 0010 E7 A4 05                		mov.L	r4, 20[r10]
1213:../src/wolfcrypt/src/dh.c **** #ifndef WC_NO_RNG
1214:../src/wolfcrypt/src/dh.c ****     int ret = 0;
 977                             		.loc 2 1214 9
 978 0013 F8 A6 00                		mov.L	#0, [r10]
1215:../src/wolfcrypt/src/dh.c ****     word32 sz = 0;
 979                             		.loc 2 1215 12
 980 0016 F9 A6 01 00             		mov.L	#0, 4[r10]
1216:../src/wolfcrypt/src/dh.c **** 
1217:../src/wolfcrypt/src/dh.c ****     if (mp_iseven(&key->p) == MP_YES) {
 981                             		.loc 2 1217 9
 982 001a ED A5 02                		mov.L	8[r10], r5
 983 001d EC 55                   		mov.L	[r5], r5
 984 001f 61 05                   		cmp	#0, r5
 985 0021 20 0F                   		beq	.L56
 986                             		.loc 2 1217 9 is_stmt 0 discriminator 1
 987 0023 ED A5 02                		mov.L	8[r10], r5
 988 0026 A8 D5                   		mov.L	8[r5], r5
 989 0028 64 15                   		and	#1, r5
 990 002a 61 05                   		cmp	#0, r5
 991 002c 1C                      		bne	.L56
 992                             		.loc 2 1217 9 discriminator 3
 993 002d 66 15                   		mov.L	#1, r5
 994 002f 0B                      		bra	.L57
 995                             	.L56:
 996                             		.loc 2 1217 9 discriminator 4
 997 0030 66 05                   		mov.L	#0, r5
 998                             	.L57:
 999                             		.loc 2 1217 8 is_stmt 1 discriminator 6
 1000 0032 61 15                   		cmp	#1, r5
 1001 0034 1F                      		bne	.L58
1218:../src/wolfcrypt/src/dh.c ****         ret = MP_VAL;
 1002                             		.loc 2 1218 13
 1003 0035 F8 A6 FD                		mov.L	#-3, [r10]
 1004 0038 38 23 01                		bra	.L59
 1005                             	.L58:
1219:../src/wolfcrypt/src/dh.c ****     }
1220:../src/wolfcrypt/src/dh.c ****     else
1221:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_NO_DH186
1222:../src/wolfcrypt/src/dh.c ****     if (mp_iszero(&key->q) == MP_NO) {
 1006                             		.loc 2 1222 9
 1007 003b ED A5 02                		mov.L	8[r10], r5
 1008 003e EE 55 88 01             		mov.L	1568[r5], r5
 1009                             		.loc 2 1222 8
 1010 0042 61 05                   		cmp	#0, r5
 1011 0044 20 17                   		beq	.L60
1223:../src/wolfcrypt/src/dh.c **** 
1224:../src/wolfcrypt/src/dh.c ****         /* q param available, use NIST SP 800-56Ar3, "5.6.1.1.3 Key Pair
1225:../src/wolfcrypt/src/dh.c ****          * Generation Using Extra Random Bits" */
1226:../src/wolfcrypt/src/dh.c ****         ret = GeneratePrivateDh186(key, rng, priv, privSz);
 1012                             		.loc 2 1226 15
 1013 0046 ED A4 05                		mov.L	20[r10], r4
 1014 0049 ED A3 04                		mov.L	16[r10], r3
 1015 004c ED A2 03                		mov.L	12[r10], r2
 1016 004f ED A1 02                		mov.L	8[r10], r1
 1017 0052 05 00 00 00             		bsr	_GeneratePrivateDh186
 1018 0056 E3 A1                   		mov.L	r1, [r10]
 1019 0058 38 03 01                		bra	.L59
 1020                             	.L60:
1227:../src/wolfcrypt/src/dh.c **** 
1228:../src/wolfcrypt/src/dh.c ****     }
1229:../src/wolfcrypt/src/dh.c ****     else
1230:../src/wolfcrypt/src/dh.c **** #endif
1231:../src/wolfcrypt/src/dh.c ****     {
1232:../src/wolfcrypt/src/dh.c **** 
1233:../src/wolfcrypt/src/dh.c ****         sz = mp_unsigned_bin_size(&key->p);
 1021                             		.loc 2 1233 35
 1022 005b ED A5 02                		mov.L	8[r10], r5
 1023                             		.loc 2 1233 14
 1024 005e EF 51                   		mov.L	r5, r1
 1025 0060 05 00 00 00             		bsr	_sp_unsigned_bin_size
 1026 0064 EF 15                   		mov.L	r1, r5
 1027                             		.loc 2 1233 12
 1028 0066 E7 A5 01                		mov.L	r5, 4[r10]
1234:../src/wolfcrypt/src/dh.c **** 
1235:../src/wolfcrypt/src/dh.c ****         /* Table of predetermined values from the operation
1236:../src/wolfcrypt/src/dh.c ****            2 * DiscreteLogWorkFactor(sz * WOLFSSL_BIT_SIZE) /
1237:../src/wolfcrypt/src/dh.c ****            WOLFSSL_BIT_SIZE + 1
1238:../src/wolfcrypt/src/dh.c ****            Sizes in table checked against RFC 3526
1239:../src/wolfcrypt/src/dh.c ****          */
1240:../src/wolfcrypt/src/dh.c ****         WOLFSSL_DH_ROUND(sz); /* if using fixed points only, then round up */
 1029                             		.loc 2 1240 9
 1030 0069 ED A5 01                		mov.L	4[r10], r5
 1031 006c 75 25 7F                		and	#0x7f, r5
 1032 006f 61 05                   		cmp	#0, r5
 1033 0071 20 15                   		beq	.L61
 1034                             		.loc 2 1240 9 is_stmt 0 discriminator 1
 1035 0073 ED A5 01                		mov.L	4[r10], r5
 1036 0076 75 25 80                		and	#-128, r5
 1037 0079 E7 A5 01                		mov.L	r5, 4[r10]
 1038 007c ED A5 01                		mov.L	4[r10], r5
 1039 007f 72 55 80 00             		add	#0x80, r5
 1040 0083 E7 A5 01                		mov.L	r5, 4[r10]
 1041                             	.L61:
1241:../src/wolfcrypt/src/dh.c ****         switch (sz) {
 1042                             		.loc 2 1241 9 is_stmt 1
 1043 0086 ED A5 01                		mov.L	4[r10], r5
 1044 0089 76 05 00 02             		cmp	#0x200, r5
 1045 008d 20 6A                   		beq	.L62
 1046 008f ED A5 01                		mov.L	4[r10], r5
 1047 0092 76 05 00 02             		cmp	#0x200, r5
 1048 0096 24 1E                   		bgtu	.L63
 1049 0098 ED A5 01                		mov.L	4[r10], r5
 1050 009b 76 05 00 01             		cmp	#0x100, r5
 1051 009f 20 4C                   		beq	.L64
 1052 00a1 ED A5 01                		mov.L	4[r10], r5
 1053 00a4 76 05 80 01             		cmp	#0x180, r5
 1054 00a8 20 49                   		beq	.L65
 1055 00aa ED A5 01                		mov.L	4[r10], r5
 1056 00ad 75 55 80                		cmp	#0x80, r5
 1057 00b0 20 35                   		beq	.L66
 1058 00b2 2E 62                   		bra	.L67
 1059                             	.L63:
 1060 00b4 ED A5 01                		mov.L	4[r10], r5
 1061 00b7 76 05 00 03             		cmp	#0x300, r5
 1062 00bb 20 48                   		beq	.L68
 1063 00bd ED A5 01                		mov.L	4[r10], r5
 1064 00c0 76 05 00 03             		cmp	#0x300, r5
 1065 00c4 24 0D                   		bgtu	.L69
 1066 00c6 ED A5 01                		mov.L	4[r10], r5
 1067 00c9 76 05 80 02             		cmp	#0x280, r5
 1068 00cd 20 30                   		beq	.L70
 1069 00cf 2E 45                   		bra	.L67
 1070                             	.L69:
 1071 00d1 ED A5 01                		mov.L	4[r10], r5
 1072 00d4 76 05 80 03             		cmp	#0x380, r5
 1073 00d8 20 31                   		beq	.L71
 1074 00da ED A5 01                		mov.L	4[r10], r5
 1075 00dd 76 05 00 04             		cmp	#0x400, r5
 1076 00e1 20 2E                   		beq	.L72
 1077 00e3 2E 31                   		bra	.L67
 1078                             	.L66:
1242:../src/wolfcrypt/src/dh.c ****             case 128:  sz = 21; break;
 1079                             		.loc 2 1242 27
 1080 00e5 F9 A6 01 15             		mov.L	#21, 4[r10]
 1081                             		.loc 2 1242 13
 1082 00e9 2E 31                   		bra	.L73
 1083                             	.L64:
1243:../src/wolfcrypt/src/dh.c ****             case 256:  sz = 29; break;
 1084                             		.loc 2 1243 27
 1085 00eb F9 A6 01 1D             		mov.L	#29, 4[r10]
 1086                             		.loc 2 1243 13
 1087 00ef 2E 2B                   		bra	.L73
 1088                             	.L65:
1244:../src/wolfcrypt/src/dh.c ****             case 384:  sz = 34; break;
 1089                             		.loc 2 1244 27
 1090 00f1 F9 A6 01 22             		mov.L	#34, 4[r10]
 1091                             		.loc 2 1244 13
 1092 00f5 2E 25                   		bra	.L73
 1093                             	.L62:
1245:../src/wolfcrypt/src/dh.c ****             case 512:  sz = 39; break;
 1094                             		.loc 2 1245 27
 1095 00f7 F9 A6 01 27             		mov.L	#39, 4[r10]
 1096                             		.loc 2 1245 13
 1097 00fb 2E 1F                   		bra	.L73
 1098                             	.L70:
1246:../src/wolfcrypt/src/dh.c ****             case 640:  sz = 42; break;
 1099                             		.loc 2 1246 27
 1100 00fd F9 A6 01 2A             		mov.L	#42, 4[r10]
 1101                             		.loc 2 1246 13
 1102 0101 2E 19                   		bra	.L73
 1103                             	.L68:
1247:../src/wolfcrypt/src/dh.c ****             case 768:  sz = 46; break;
 1104                             		.loc 2 1247 27
 1105 0103 F9 A6 01 2E             		mov.L	#46, 4[r10]
 1106                             		.loc 2 1247 13
 1107 0107 2E 13                   		bra	.L73
 1108                             	.L71:
1248:../src/wolfcrypt/src/dh.c ****             case 896:  sz = 49; break;
 1109                             		.loc 2 1248 27
 1110 0109 F9 A6 01 31             		mov.L	#49, 4[r10]
 1111                             		.loc 2 1248 13
 1112 010d 2E 0D                   		bra	.L73
 1113                             	.L72:
1249:../src/wolfcrypt/src/dh.c ****             case 1024: sz = 52; break;
 1114                             		.loc 2 1249 27
 1115 010f F9 A6 01 34             		mov.L	#52, 4[r10]
 1116                             		.loc 2 1249 13
 1117 0113 0F                      		bra	.L73
 1118                             	.L67:
1250:../src/wolfcrypt/src/dh.c ****             default:
1251:../src/wolfcrypt/src/dh.c ****             #ifndef WOLFSSL_DH_CONST
1252:../src/wolfcrypt/src/dh.c ****                 /* if using floating points and size of p is not in table */
1253:../src/wolfcrypt/src/dh.c ****                 sz = min(sz, 2 * DiscreteLogWorkFactor(sz * WOLFSSL_BIT_SIZE) /
1254:../src/wolfcrypt/src/dh.c ****                                            WOLFSSL_BIT_SIZE + 1);
1255:../src/wolfcrypt/src/dh.c ****                 break;
1256:../src/wolfcrypt/src/dh.c ****             #else
1257:../src/wolfcrypt/src/dh.c ****                 return BAD_FUNC_ARG;
 1119                             		.loc 2 1257 24
 1120 0114 FB 5A 53 FF             		mov.L	#-173, r5
 1121 0118 2E 45                   		bra	.L74
 1122                             	.L73:
1258:../src/wolfcrypt/src/dh.c ****             #endif
1259:../src/wolfcrypt/src/dh.c ****         }
1260:../src/wolfcrypt/src/dh.c **** 
1261:../src/wolfcrypt/src/dh.c ****         if (sz > *privSz)
 1123                             		.loc 2 1261 18
 1124 011a ED A5 05                		mov.L	20[r10], r5
 1125 011d EC 55                   		mov.L	[r5], r5
 1126                             		.loc 2 1261 12
 1127 011f ED A4 01                		mov.L	4[r10], r4
 1128 0122 47 54                   		cmp	r5, r4
 1129 0124 25 06                   		bleu	.L75
1262:../src/wolfcrypt/src/dh.c ****             ret = WC_KEY_SIZE_E;
 1130                             		.loc 2 1262 17
 1131 0126 F8 AA 16 FF             		mov.L	#-234, [r10]
 1132                             	.L75:
1263:../src/wolfcrypt/src/dh.c **** 
1264:../src/wolfcrypt/src/dh.c ****         if (ret == 0)
 1133                             		.loc 2 1264 12
 1134 012a EC A5                   		mov.L	[r10], r5
 1135 012c 61 05                   		cmp	#0, r5
 1136 012e 21 11                   		bne	.L76
1265:../src/wolfcrypt/src/dh.c ****             ret = wc_RNG_GenerateBlock(rng, priv, sz);
 1137                             		.loc 2 1265 19
 1138 0130 ED A3 01                		mov.L	4[r10], r3
 1139 0133 ED A2 04                		mov.L	16[r10], r2
 1140 0136 ED A1 03                		mov.L	12[r10], r1
 1141 0139 05 00 00 00             		bsr	_wc_RNG_GenerateBlock
 1142 013d E3 A1                   		mov.L	r1, [r10]
 1143                             	.L76:
1266:../src/wolfcrypt/src/dh.c **** 
1267:../src/wolfcrypt/src/dh.c ****         if (ret == 0) {
 1144                             		.loc 2 1267 12
 1145 013f EC A5                   		mov.L	[r10], r5
 1146 0141 61 05                   		cmp	#0, r5
 1147 0143 21 18                   		bne	.L59
1268:../src/wolfcrypt/src/dh.c ****             priv[0] |= 0x0C;
 1148                             		.loc 2 1268 21
 1149 0145 ED A5 04                		mov.L	16[r10], r5
 1150 0148 CC 55                   		mov.B	[r5], r5
 1151 014a 65 C5                   		or	#12, r5
 1152 014c CF 54                   		mov.B	r5, r4
 1153 014e ED A5 04                		mov.L	16[r10], r5
 1154 0151 C3 54                   		mov.B	r4, [r5]
1269:../src/wolfcrypt/src/dh.c ****             *privSz = sz;
 1155                             		.loc 2 1269 21
 1156 0153 ED A5 05                		mov.L	20[r10], r5
 1157 0156 ED A4 01                		mov.L	4[r10], r4
 1158 0159 E3 54                   		mov.L	r4, [r5]
 1159                             		.balign 8,3,1
 1160                             	.L59:
1270:../src/wolfcrypt/src/dh.c ****         }
1271:../src/wolfcrypt/src/dh.c ****     }
1272:../src/wolfcrypt/src/dh.c **** 
1273:../src/wolfcrypt/src/dh.c ****     return ret;
 1161                             		.loc 2 1273 12
 1162 015b EC A5                   		mov.L	[r10], r5
 1163                             	.L74:
1274:../src/wolfcrypt/src/dh.c **** #else
1275:../src/wolfcrypt/src/dh.c ****     (void)key;
1276:../src/wolfcrypt/src/dh.c ****     (void)rng;
1277:../src/wolfcrypt/src/dh.c ****     (void)priv;
1278:../src/wolfcrypt/src/dh.c ****     (void)privSz;
1279:../src/wolfcrypt/src/dh.c ****     return NOT_COMPILED_IN;
1280:../src/wolfcrypt/src/dh.c **** #endif /* WC_NO_RNG */
1281:../src/wolfcrypt/src/dh.c **** }
 1164                             		.loc 2 1281 1
 1165 015d EF 51                   		mov.L	r5, r1
 1166 015f 3F AA 07                		rtsd	#28, r10-r10
 1167                             	.LFE49:
 1169 0162 74 10 01 00 00 00       		.section	.text.GeneratePublicDh,"ax",@progbits
 1171                             	_GeneratePublicDh:
 1172                             	.LFB50:
1282:../src/wolfcrypt/src/dh.c **** 
1283:../src/wolfcrypt/src/dh.c **** 
1284:../src/wolfcrypt/src/dh.c **** static int GeneratePublicDh(DhKey* key, byte* priv, word32 privSz,
1285:../src/wolfcrypt/src/dh.c ****     byte* pub, word32* pubSz)
1286:../src/wolfcrypt/src/dh.c **** {
 1173                             		.loc 2 1286 1
 1174 0000 7E AA                   		push.l	r10
 1175                             	.LCFI18:
 1176 0002 7E A6                   		push.l	r6
 1177                             	.LCFI19:
 1178 0004 71 0A C8                		add	#-56, r0, r10
 1179                             	.LCFI20:
 1180 0007 71 A0 F8                		add	#-8, r10, r0
 1181                             	.LCFI21:
 1182 000a 75 46 44                		mov.L	#0x44, r6
 1183 000d 4B A6                   		add	r10, r6
 1184 000f E7 A1 09                		mov.L	r1, 36[r10]
 1185 0012 E7 A2 0A                		mov.L	r2, 40[r10]
 1186 0015 E7 A3 0B                		mov.L	r3, 44[r10]
 1187 0018 E7 A4 0C                		mov.L	r4, 48[r10]
1287:../src/wolfcrypt/src/dh.c ****     int ret = 0;
 1188                             		.loc 2 1287 9
 1189 001b F8 A6 00                		mov.L	#0, [r10]
1288:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_SP_MATH
1289:../src/wolfcrypt/src/dh.c ****     word32 binSz = 0;
 1190                             		.loc 2 1289 12
 1191 001e F9 A6 01 00             		mov.L	#0, 4[r10]
1290:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1291:../src/wolfcrypt/src/dh.c ****     mp_int* x;
1292:../src/wolfcrypt/src/dh.c ****     mp_int* y;
1293:../src/wolfcrypt/src/dh.c **** #else
1294:../src/wolfcrypt/src/dh.c ****     mp_int x[1];
1295:../src/wolfcrypt/src/dh.c ****     mp_int y[1];
1296:../src/wolfcrypt/src/dh.c **** #endif
1297:../src/wolfcrypt/src/dh.c **** #endif
1298:../src/wolfcrypt/src/dh.c **** 
1299:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_HAVE_SP_DH
1300:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_SP_NO_2048
1301:../src/wolfcrypt/src/dh.c ****     if (mp_count_bits(&key->p) == 2048)
1302:../src/wolfcrypt/src/dh.c ****         return sp_DhExp_2048(&key->g, priv, privSz, &key->p, pub, pubSz);
1303:../src/wolfcrypt/src/dh.c **** #endif
1304:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_SP_NO_3072
1305:../src/wolfcrypt/src/dh.c ****     if (mp_count_bits(&key->p) == 3072)
1306:../src/wolfcrypt/src/dh.c ****         return sp_DhExp_3072(&key->g, priv, privSz, &key->p, pub, pubSz);
1307:../src/wolfcrypt/src/dh.c **** #endif
1308:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SP_4096
1309:../src/wolfcrypt/src/dh.c ****     if (mp_count_bits(&key->p) == 4096)
1310:../src/wolfcrypt/src/dh.c ****         return sp_DhExp_4096(&key->g, priv, privSz, &key->p, pub, pubSz);
1311:../src/wolfcrypt/src/dh.c **** #endif
1312:../src/wolfcrypt/src/dh.c **** #endif
1313:../src/wolfcrypt/src/dh.c **** 
1314:../src/wolfcrypt/src/dh.c **** #if !defined(WOLFSSL_SP_MATH)
1315:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1316:../src/wolfcrypt/src/dh.c ****     x = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 1192                             		.loc 2 1316 18
 1193 0022 FB 1A 10 03             		mov.L	#0x310, r1
 1194 0026 05 00 00 00             		bsr	_wolfSSL_Malloc
 1195 002a E7 A1 02                		mov.L	r1, 8[r10]
1317:../src/wolfcrypt/src/dh.c ****     if (x == NULL)
 1196                             		.loc 2 1317 8
 1197 002d ED A5 02                		mov.L	8[r10], r5
 1198 0030 61 05                   		cmp	#0, r5
 1199 0032 1F                      		bne	.L78
1318:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 1200                             		.loc 2 1318 16
 1201 0033 FB 56 83                		mov.L	#-125, r5
 1202 0036 38 28 01                		bra	.L79
 1203                             	.L78:
1319:../src/wolfcrypt/src/dh.c ****     y = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 1204                             		.loc 2 1319 18
 1205 0039 FB 1A 10 03             		mov.L	#0x310, r1
 1206 003d 05 00 00 00             		bsr	_wolfSSL_Malloc
 1207 0041 E7 A1 03                		mov.L	r1, 12[r10]
1320:../src/wolfcrypt/src/dh.c ****     if (y == NULL) {
 1208                             		.loc 2 1320 8
 1209 0044 ED A5 03                		mov.L	12[r10], r5
 1210 0047 61 05                   		cmp	#0, r5
 1211 0049 21 1B                   		bne	.L80
 1212                             	.LBB14:
1321:../src/wolfcrypt/src/dh.c ****         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
 1213                             		.loc 2 1321 9
 1214 004b ED A5 02                		mov.L	8[r10], r5
 1215 004e E7 A5 04                		mov.L	r5, 16[r10]
 1216 0051 ED A5 04                		mov.L	16[r10], r5
 1217 0054 61 05                   		cmp	#0, r5
 1218 0056 10                      		beq	.L81
 1219                             		.loc 2 1321 9 is_stmt 0 discriminator 1
 1220 0057 ED A1 04                		mov.L	16[r10], r1
 1221 005a 05 00 00 00             		bsr	_wolfSSL_Free
 1222                             	.L81:
 1223                             	.LBE14:
1322:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 1224                             		.loc 2 1322 16 is_stmt 1
 1225 005e FB 56 83                		mov.L	#-125, r5
 1226 0061 38 FD 00                		bra	.L79
 1227                             	.L80:
1323:../src/wolfcrypt/src/dh.c ****     }
1324:../src/wolfcrypt/src/dh.c **** #endif
1325:../src/wolfcrypt/src/dh.c ****     if (mp_init_multi(x, y, 0, 0, 0, 0) != MP_OKAY) {
 1228                             		.loc 2 1325 9
 1229 0064 3E 01 00                		mov.L	#0, 4[r0]
 1230 0067 F8 06 00                		mov.L	#0, [r0]
 1231 006a 66 04                   		mov.L	#0, r4
 1232 006c 66 03                   		mov.L	#0, r3
 1233 006e ED A2 03                		mov.L	12[r10], r2
 1234 0071 ED A1 02                		mov.L	8[r10], r1
 1235 0074 05 00 00 00             		bsr	_sp_init_multi
 1236 0078 EF 15                   		mov.L	r1, r5
 1237                             		.loc 2 1325 8
 1238 007a 61 05                   		cmp	#0, r5
 1239 007c 20 2E                   		beq	.L82
 1240                             	.LBB15:
1326:../src/wolfcrypt/src/dh.c ****     #ifdef WOLFSSL_SMALL_STACK
1327:../src/wolfcrypt/src/dh.c ****         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
 1241                             		.loc 2 1327 9
 1242 007e ED A5 03                		mov.L	12[r10], r5
 1243 0081 E7 A5 05                		mov.L	r5, 20[r10]
 1244 0084 ED A5 05                		mov.L	20[r10], r5
 1245 0087 61 05                   		cmp	#0, r5
 1246 0089 10                      		beq	.L83
 1247                             		.loc 2 1327 9 is_stmt 0 discriminator 1
 1248 008a ED A1 05                		mov.L	20[r10], r1
 1249 008d 05 00 00 00             		bsr	_wolfSSL_Free
 1250                             	.L83:
 1251                             	.LBE15:
 1252                             	.LBB16:
1328:../src/wolfcrypt/src/dh.c ****         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
 1253                             		.loc 2 1328 9 is_stmt 1
 1254 0091 ED A5 02                		mov.L	8[r10], r5
 1255 0094 E7 A5 06                		mov.L	r5, 24[r10]
 1256 0097 ED A5 06                		mov.L	24[r10], r5
 1257 009a 61 05                   		cmp	#0, r5
 1258 009c 10                      		beq	.L84
 1259                             		.loc 2 1328 9 is_stmt 0 discriminator 1
 1260 009d ED A1 06                		mov.L	24[r10], r1
 1261 00a0 05 00 00 00             		bsr	_wolfSSL_Free
 1262                             	.L84:
 1263                             	.LBE16:
1329:../src/wolfcrypt/src/dh.c ****     #endif
1330:../src/wolfcrypt/src/dh.c ****         return MP_INIT_E;
 1264                             		.loc 2 1330 16 is_stmt 1
 1265 00a4 FB 56 92                		mov.L	#-110, r5
 1266 00a7 38 B7 00                		bra	.L79
 1267                             	.L82:
1331:../src/wolfcrypt/src/dh.c ****     }
1332:../src/wolfcrypt/src/dh.c **** 
1333:../src/wolfcrypt/src/dh.c ****     if (mp_read_unsigned_bin(x, priv, privSz) != MP_OKAY)
 1268                             		.loc 2 1333 9
 1269 00aa ED A3 0B                		mov.L	44[r10], r3
 1270 00ad ED A2 0A                		mov.L	40[r10], r2
 1271 00b0 ED A1 02                		mov.L	8[r10], r1
 1272 00b3 05 00 00 00             		bsr	_sp_read_unsigned_bin
 1273 00b7 EF 15                   		mov.L	r1, r5
 1274                             		.loc 2 1333 8
 1275 00b9 61 05                   		cmp	#0, r5
 1276 00bb 14                      		beq	.L85
1334:../src/wolfcrypt/src/dh.c ****         ret = MP_READ_E;
 1277                             		.loc 2 1334 13
 1278 00bc F8 A6 91                		mov.L	#-111, [r10]
 1279                             	.L85:
1335:../src/wolfcrypt/src/dh.c **** 
1336:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && mp_exptmod(&key->g, x, &key->p, y) != MP_OKAY)
 1280                             		.loc 2 1336 8
 1281 00bf EC A5                   		mov.L	[r10], r5
 1282 00c1 61 05                   		cmp	#0, r5
 1283 00c3 21 20                   		bne	.L86
 1284                             		.loc 2 1336 32 discriminator 1
 1285 00c5 ED A5 09                		mov.L	36[r10], r5
 1286 00c8 72 55 10 03             		add	#0x310, r5
 1287                             		.loc 2 1336 44 discriminator 1
 1288 00cc ED A3 09                		mov.L	36[r10], r3
 1289                             		.loc 2 1336 21 discriminator 1
 1290 00cf ED A4 03                		mov.L	12[r10], r4
 1291 00d2 ED A2 02                		mov.L	8[r10], r2
 1292 00d5 EF 51                   		mov.L	r5, r1
 1293 00d7 05 00 00 00             		bsr	_sp_exptmod
 1294 00db EF 15                   		mov.L	r1, r5
 1295                             		.loc 2 1336 18 discriminator 1
 1296 00dd 61 05                   		cmp	#0, r5
 1297 00df 14                      		beq	.L86
1337:../src/wolfcrypt/src/dh.c ****         ret = MP_EXPTMOD_E;
 1298                             		.loc 2 1337 13
 1299 00e0 F8 A6 90                		mov.L	#-112, [r10]
 1300                             	.L86:
1338:../src/wolfcrypt/src/dh.c **** 
1339:../src/wolfcrypt/src/dh.c ****     if (ret == 0) {
 1301                             		.loc 2 1339 8
 1302 00e3 EC A5                   		mov.L	[r10], r5
 1303 00e5 61 05                   		cmp	#0, r5
 1304 00e7 21 1D                   		bne	.L87
1340:../src/wolfcrypt/src/dh.c ****         binSz = mp_unsigned_bin_size(y);
 1305                             		.loc 2 1340 17
 1306 00e9 ED A1 03                		mov.L	12[r10], r1
 1307 00ec 05 00 00 00             		bsr	_sp_unsigned_bin_size
 1308 00f0 EF 15                   		mov.L	r1, r5
 1309                             		.loc 2 1340 15
 1310 00f2 E7 A5 01                		mov.L	r5, 4[r10]
1341:../src/wolfcrypt/src/dh.c ****         if (binSz > *pubSz) {
 1311                             		.loc 2 1341 21
 1312 00f5 EC 65                   		mov.L	[r6], r5
 1313 00f7 EC 55                   		mov.L	[r5], r5
 1314                             		.loc 2 1341 12
 1315 00f9 ED A4 01                		mov.L	4[r10], r4
 1316 00fc 47 54                   		cmp	r5, r4
 1317 00fe 25 06                   		bleu	.L87
1342:../src/wolfcrypt/src/dh.c ****             ret = WC_KEY_SIZE_E;
 1318                             		.loc 2 1342 17
 1319 0100 F8 AA 16 FF             		mov.L	#-234, [r10]
 1320                             	.L87:
1343:../src/wolfcrypt/src/dh.c ****         }
1344:../src/wolfcrypt/src/dh.c ****     }
1345:../src/wolfcrypt/src/dh.c **** 
1346:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && mp_to_unsigned_bin(y, pub) != MP_OKAY)
 1321                             		.loc 2 1346 8
 1322 0104 EC A5                   		mov.L	[r10], r5
 1323 0106 61 05                   		cmp	#0, r5
 1324 0108 21 14                   		bne	.L88
 1325                             		.loc 2 1346 21 discriminator 1
 1326 010a ED A2 0C                		mov.L	48[r10], r2
 1327 010d ED A1 03                		mov.L	12[r10], r1
 1328 0110 05 00 00 00             		bsr	_sp_to_unsigned_bin
 1329 0114 EF 15                   		mov.L	r1, r5
 1330                             		.loc 2 1346 18 discriminator 1
 1331 0116 61 05                   		cmp	#0, r5
 1332 0118 14                      		beq	.L88
1347:../src/wolfcrypt/src/dh.c ****         ret = MP_TO_E;
 1333                             		.loc 2 1347 13
 1334 0119 F8 A6 8F                		mov.L	#-113, [r10]
 1335                             	.L88:
1348:../src/wolfcrypt/src/dh.c **** 
1349:../src/wolfcrypt/src/dh.c ****     if (ret == 0)
 1336                             		.loc 2 1349 8
 1337 011c EC A5                   		mov.L	[r10], r5
 1338 011e 61 05                   		cmp	#0, r5
 1339 0120 18                      		bne	.L89
1350:../src/wolfcrypt/src/dh.c ****         *pubSz = binSz;
 1340                             		.loc 2 1350 16
 1341 0121 EC 65                   		mov.L	[r6], r5
 1342 0123 ED A4 01                		mov.L	4[r10], r4
 1343 0126 E3 54                   		mov.L	r4, [r5]
 1344                             	.L89:
1351:../src/wolfcrypt/src/dh.c **** 
1352:../src/wolfcrypt/src/dh.c ****     mp_clear(y);
 1345                             		.loc 2 1352 5
 1346 0128 ED A1 03                		mov.L	12[r10], r1
 1347 012b 05 00 00 00             		bsr	_sp_clear
1353:../src/wolfcrypt/src/dh.c ****     mp_clear(x);
 1348                             		.loc 2 1353 5
 1349 012f ED A1 02                		mov.L	8[r10], r1
 1350 0132 05 00 00 00             		bsr	_sp_clear
 1351                             	.LBB17:
1354:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1355:../src/wolfcrypt/src/dh.c ****     XFREE(y, key->heap, DYNAMIC_TYPE_DH);
 1352                             		.loc 2 1355 5
 1353 0136 ED A5 03                		mov.L	12[r10], r5
 1354 0139 E7 A5 07                		mov.L	r5, 28[r10]
 1355 013c ED A5 07                		mov.L	28[r10], r5
 1356 013f 61 05                   		cmp	#0, r5
 1357 0141 10                      		beq	.L90
 1358                             		.loc 2 1355 5 is_stmt 0 discriminator 1
 1359 0142 ED A1 07                		mov.L	28[r10], r1
 1360 0145 05 00 00 00             		bsr	_wolfSSL_Free
 1361                             	.L90:
 1362                             	.LBE17:
 1363                             	.LBB18:
1356:../src/wolfcrypt/src/dh.c ****     XFREE(x, key->heap, DYNAMIC_TYPE_DH);
 1364                             		.loc 2 1356 5 is_stmt 1
 1365 0149 ED A5 02                		mov.L	8[r10], r5
 1366 014c E7 A5 08                		mov.L	r5, 32[r10]
 1367 014f ED A5 08                		mov.L	32[r10], r5
 1368 0152 61 05                   		cmp	#0, r5
 1369 0154 10                      		beq	.L91
 1370                             		.loc 2 1356 5 is_stmt 0 discriminator 1
 1371 0155 ED A1 08                		mov.L	32[r10], r1
 1372 0158 05 00 00 00             		bsr	_wolfSSL_Free
 1373                             	.L91:
 1374                             	.LBE18:
1357:../src/wolfcrypt/src/dh.c **** #endif
1358:../src/wolfcrypt/src/dh.c **** #else
1359:../src/wolfcrypt/src/dh.c ****     ret = WC_KEY_SIZE_E;
1360:../src/wolfcrypt/src/dh.c **** #endif
1361:../src/wolfcrypt/src/dh.c **** 
1362:../src/wolfcrypt/src/dh.c ****     return ret;
 1375                             		.loc 2 1362 12 is_stmt 1
 1376 015c EC A5                   		mov.L	[r10], r5
 1377                             		.balign 8,3,1
 1378                             	.L79:
1363:../src/wolfcrypt/src/dh.c **** }
 1379                             		.loc 2 1363 1
 1380 015e EF 51                   		mov.L	r5, r1
 1381 0160 71 00 40                		add	#0x40, r0
 1382 0163 7E B6                   		pop	r6
 1383 0165 7E BA                   		pop	r10
 1384 0167 02                      		rts
 1385                             	.LFE50:
 1387                             		.section	.text.wc_DhGenerateKeyPair_Sync,"ax",@progbits
 1389                             	_wc_DhGenerateKeyPair_Sync:
 1390                             	.LFB51:
1364:../src/wolfcrypt/src/dh.c **** 
1365:../src/wolfcrypt/src/dh.c **** static int wc_DhGenerateKeyPair_Sync(DhKey* key, WC_RNG* rng,
1366:../src/wolfcrypt/src/dh.c ****     byte* priv, word32* privSz, byte* pub, word32* pubSz)
1367:../src/wolfcrypt/src/dh.c **** {
 1391                             		.loc 2 1367 1
 1392 0000 7E AA                   		push.l	r10
 1393                             	.LCFI22:
 1394 0002 7E A6                   		push.l	r6
 1395                             	.LCFI23:
 1396 0004 71 0A E4                		add	#-28, r0, r10
 1397                             	.LCFI24:
 1398 0007 71 A0 FC                		add	#-4, r10, r0
 1399                             	.LCFI25:
 1400 000a 75 46 28                		mov.L	#40, r6
 1401 000d 4B A6                   		add	r10, r6
 1402 000f E7 A1 01                		mov.L	r1, 4[r10]
 1403 0012 E7 A2 02                		mov.L	r2, 8[r10]
 1404 0015 E7 A3 03                		mov.L	r3, 12[r10]
 1405 0018 E7 A4 04                		mov.L	r4, 16[r10]
1368:../src/wolfcrypt/src/dh.c ****     int ret;
1369:../src/wolfcrypt/src/dh.c **** 
1370:../src/wolfcrypt/src/dh.c ****     if (key == NULL || rng == NULL || priv == NULL || privSz == NULL ||
 1406                             		.loc 2 1370 8
 1407 001b ED A5 01                		mov.L	4[r10], r5
 1408 001e 61 05                   		cmp	#0, r5
 1409 0020 20 21                   		beq	.L93
 1410                             		.loc 2 1370 21 discriminator 1
 1411 0022 ED A5 02                		mov.L	8[r10], r5
 1412 0025 61 05                   		cmp	#0, r5
 1413 0027 20 1A                   		beq	.L93
 1414                             		.loc 2 1370 36 discriminator 2
 1415 0029 ED A5 03                		mov.L	12[r10], r5
 1416 002c 61 05                   		cmp	#0, r5
 1417 002e 20 13                   		beq	.L93
 1418                             		.loc 2 1370 52 discriminator 3
 1419 0030 ED A5 04                		mov.L	16[r10], r5
 1420 0033 61 05                   		cmp	#0, r5
 1421 0035 20 0C                   		beq	.L93
 1422                             		.loc 2 1370 70 discriminator 4
 1423 0037 EC 65                   		mov.L	[r6], r5
 1424 0039 61 05                   		cmp	#0, r5
 1425 003b 16                      		beq	.L93
1371:../src/wolfcrypt/src/dh.c ****         pub == NULL || pubSz == NULL) {
 1426                             		.loc 2 1371 21
 1427 003c A8 6D                   		mov.L	4[r6], r5
 1428 003e 61 05                   		cmp	#0, r5
 1429 0040 1F                      		bne	.L94
 1430                             		.balign 8,3,2
 1431                             	.L93:
1372:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
 1432                             		.loc 2 1372 16
 1433 0041 FB 5A 53 FF             		mov.L	#-173, r5
 1434 0045 2E 35                   		bra	.L95
 1435                             	.L94:
1373:../src/wolfcrypt/src/dh.c ****     }
1374:../src/wolfcrypt/src/dh.c **** 
1375:../src/wolfcrypt/src/dh.c ****     SAVE_VECTOR_REGISTERS(return _svr_ret;);
1376:../src/wolfcrypt/src/dh.c **** 
1377:../src/wolfcrypt/src/dh.c ****     ret = GeneratePrivateDh(key, rng, priv, privSz);
 1436                             		.loc 2 1377 11
 1437 0047 ED A4 04                		mov.L	16[r10], r4
 1438 004a ED A3 03                		mov.L	12[r10], r3
 1439 004d ED A2 02                		mov.L	8[r10], r2
 1440 0050 ED A1 01                		mov.L	4[r10], r1
 1441 0053 05 00 00 00             		bsr	_GeneratePrivateDh
 1442 0057 E3 A1                   		mov.L	r1, [r10]
1378:../src/wolfcrypt/src/dh.c **** 
1379:../src/wolfcrypt/src/dh.c ****     if (ret == 0)
 1443                             		.loc 2 1379 8
 1444 0059 EC A5                   		mov.L	[r10], r5
 1445 005b 61 05                   		cmp	#0, r5
 1446 005d 21 1B                   		bne	.L96
1380:../src/wolfcrypt/src/dh.c ****         ret = GeneratePublicDh(key, priv, *privSz, pub, pubSz);
 1447                             		.loc 2 1380 15
 1448 005f ED A5 04                		mov.L	16[r10], r5
 1449 0062 EC 55                   		mov.L	[r5], r5
 1450 0064 A8 6C                   		mov.L	4[r6], r4
 1451 0066 E3 04                   		mov.L	r4, [r0]
 1452 0068 EC 64                   		mov.L	[r6], r4
 1453 006a EF 53                   		mov.L	r5, r3
 1454 006c ED A2 03                		mov.L	12[r10], r2
 1455 006f ED A1 01                		mov.L	4[r10], r1
 1456 0072 05 00 00 00             		bsr	_GeneratePublicDh
 1457 0076 E3 A1                   		mov.L	r1, [r10]
 1458                             	.L96:
1381:../src/wolfcrypt/src/dh.c **** #if FIPS_VERSION_GE(5,0) || defined(WOLFSSL_VALIDATE_DH_KEYGEN)
1382:../src/wolfcrypt/src/dh.c ****     if (ret == 0)
1383:../src/wolfcrypt/src/dh.c ****         ret = _ffc_validate_public_key(key, pub, *pubSz, NULL, 0, 0);
1384:../src/wolfcrypt/src/dh.c ****     if (ret == 0)
1385:../src/wolfcrypt/src/dh.c ****         ret = _ffc_pairwise_consistency_test(key, pub, *pubSz, priv, *privSz);
1386:../src/wolfcrypt/src/dh.c **** #endif /* FIPS V5 or later || WOLFSSL_VALIDATE_DH_KEYGEN */
1387:../src/wolfcrypt/src/dh.c **** 
1388:../src/wolfcrypt/src/dh.c **** 
1389:../src/wolfcrypt/src/dh.c ****     RESTORE_VECTOR_REGISTERS();
1390:../src/wolfcrypt/src/dh.c **** 
1391:../src/wolfcrypt/src/dh.c ****     return ret;
 1459                             		.loc 2 1391 12
 1460 0078 EC A5                   		mov.L	[r10], r5
 1461                             	.L95:
1392:../src/wolfcrypt/src/dh.c **** }
 1462                             		.loc 2 1392 1
 1463 007a EF 51                   		mov.L	r5, r1
 1464 007c 71 00 20                		add	#32, r0
 1465 007f 7E B6                   		pop	r6
 1466 0081 7E BA                   		pop	r10
 1467 0083 02                      		rts
 1468                             	.LFE51:
 1470 0084 76 10 01 00             		.section	.text._ffc_validate_public_key,"ax",@progbits
 1472                             	__ffc_validate_public_key:
 1473                             	.LFB52:
1393:../src/wolfcrypt/src/dh.c **** #endif /* !WOLFSSL_KCAPI_DH */
1394:../src/wolfcrypt/src/dh.c **** 
1395:../src/wolfcrypt/src/dh.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_DH)
1396:../src/wolfcrypt/src/dh.c **** static int wc_DhGenerateKeyPair_Async(DhKey* key, WC_RNG* rng,
1397:../src/wolfcrypt/src/dh.c ****     byte* priv, word32* privSz, byte* pub, word32* pubSz)
1398:../src/wolfcrypt/src/dh.c **** {
1399:../src/wolfcrypt/src/dh.c ****     int ret;
1400:../src/wolfcrypt/src/dh.c **** 
1401:../src/wolfcrypt/src/dh.c **** #if defined(HAVE_INTEL_QA)
1402:../src/wolfcrypt/src/dh.c ****     word32 pBits;
1403:../src/wolfcrypt/src/dh.c **** 
1404:../src/wolfcrypt/src/dh.c ****     /* QAT DH sizes: 768, 1024, 1536, 2048, 3072 and 4096 bits */
1405:../src/wolfcrypt/src/dh.c ****     pBits = mp_unsigned_bin_size(&key->p) * 8;
1406:../src/wolfcrypt/src/dh.c ****     if (pBits == 768 ||  pBits == 1024 || pBits == 1536 ||
1407:../src/wolfcrypt/src/dh.c ****         pBits == 2048 || pBits == 3072 || pBits == 4096) {
1408:../src/wolfcrypt/src/dh.c ****         mp_int x;
1409:../src/wolfcrypt/src/dh.c **** 
1410:../src/wolfcrypt/src/dh.c ****         ret = mp_init(&x);
1411:../src/wolfcrypt/src/dh.c ****         if (ret != MP_OKAY)
1412:../src/wolfcrypt/src/dh.c ****             return ret;
1413:../src/wolfcrypt/src/dh.c **** 
1414:../src/wolfcrypt/src/dh.c ****         ret = GeneratePrivateDh(key, rng, priv, privSz);
1415:../src/wolfcrypt/src/dh.c ****         if (ret == 0)
1416:../src/wolfcrypt/src/dh.c ****             ret = mp_read_unsigned_bin(&x, priv, *privSz);
1417:../src/wolfcrypt/src/dh.c ****         if (ret == MP_OKAY)
1418:../src/wolfcrypt/src/dh.c ****             ret = wc_mp_to_bigint(&x, &x.raw);
1419:../src/wolfcrypt/src/dh.c ****         if (ret == MP_OKAY)
1420:../src/wolfcrypt/src/dh.c ****             ret = wc_mp_to_bigint(&key->p, &key->p.raw);
1421:../src/wolfcrypt/src/dh.c ****         if (ret == MP_OKAY)
1422:../src/wolfcrypt/src/dh.c ****             ret = wc_mp_to_bigint(&key->g, &key->g.raw);
1423:../src/wolfcrypt/src/dh.c ****         if (ret == MP_OKAY)
1424:../src/wolfcrypt/src/dh.c ****             ret = IntelQaDhKeyGen(&key->asyncDev, &key->p.raw, &key->g.raw,
1425:../src/wolfcrypt/src/dh.c ****                 &x.raw, pub, pubSz);
1426:../src/wolfcrypt/src/dh.c ****         mp_clear(&x);
1427:../src/wolfcrypt/src/dh.c **** 
1428:../src/wolfcrypt/src/dh.c ****         return ret;
1429:../src/wolfcrypt/src/dh.c ****     }
1430:../src/wolfcrypt/src/dh.c **** 
1431:../src/wolfcrypt/src/dh.c **** #elif defined(HAVE_CAVIUM)
1432:../src/wolfcrypt/src/dh.c ****     /* TODO: Not implemented - use software for now */
1433:../src/wolfcrypt/src/dh.c **** 
1434:../src/wolfcrypt/src/dh.c **** #else /* WOLFSSL_ASYNC_CRYPT_TEST */
1435:../src/wolfcrypt/src/dh.c ****     if (wc_AsyncTestInit(&key->asyncDev, ASYNC_TEST_DH_GEN)) {
1436:../src/wolfcrypt/src/dh.c ****         WC_ASYNC_TEST* testDev = &key->asyncDev.test;
1437:../src/wolfcrypt/src/dh.c ****         testDev->dhGen.key = key;
1438:../src/wolfcrypt/src/dh.c ****         testDev->dhGen.rng = rng;
1439:../src/wolfcrypt/src/dh.c ****         testDev->dhGen.priv = priv;
1440:../src/wolfcrypt/src/dh.c ****         testDev->dhGen.privSz = privSz;
1441:../src/wolfcrypt/src/dh.c ****         testDev->dhGen.pub = pub;
1442:../src/wolfcrypt/src/dh.c ****         testDev->dhGen.pubSz = pubSz;
1443:../src/wolfcrypt/src/dh.c ****         return WC_PENDING_E;
1444:../src/wolfcrypt/src/dh.c ****     }
1445:../src/wolfcrypt/src/dh.c **** #endif
1446:../src/wolfcrypt/src/dh.c **** 
1447:../src/wolfcrypt/src/dh.c ****     /* otherwise use software DH */
1448:../src/wolfcrypt/src/dh.c ****     ret = wc_DhGenerateKeyPair_Sync(key, rng, priv, privSz, pub, pubSz);
1449:../src/wolfcrypt/src/dh.c **** 
1450:../src/wolfcrypt/src/dh.c ****     return ret;
1451:../src/wolfcrypt/src/dh.c **** }
1452:../src/wolfcrypt/src/dh.c **** #endif /* WOLFSSL_ASYNC_CRYPT && WC_ASYNC_ENABLE_DH */
1453:../src/wolfcrypt/src/dh.c **** 
1454:../src/wolfcrypt/src/dh.c **** 
1455:../src/wolfcrypt/src/dh.c **** /* Check DH Public Key for invalid numbers, optionally allowing
1456:../src/wolfcrypt/src/dh.c ****  * the public key to be checked against the large prime (q).
1457:../src/wolfcrypt/src/dh.c ****  * If q is NULL, the q value of key is used.
1458:../src/wolfcrypt/src/dh.c ****  * Check per process in SP 800-56Ar3, section 5.6.2.3.1 or 2.
1459:../src/wolfcrypt/src/dh.c ****  *
1460:../src/wolfcrypt/src/dh.c ****  * key     DH key group parameters.
1461:../src/wolfcrypt/src/dh.c ****  * pub     Public Key.
1462:../src/wolfcrypt/src/dh.c ****  * pubSz   Public Key size.
1463:../src/wolfcrypt/src/dh.c ****  * prime   Large prime (q), optionally NULL to skip check
1464:../src/wolfcrypt/src/dh.c ****  * primeSz Size of large prime
1465:../src/wolfcrypt/src/dh.c ****  * partial Do the partial test process. (section 5.6.2.3.2)
1466:../src/wolfcrypt/src/dh.c ****  *
1467:../src/wolfcrypt/src/dh.c ****  *  returns 0 on success or error code
1468:../src/wolfcrypt/src/dh.c ****  */
1469:../src/wolfcrypt/src/dh.c **** static int _ffc_validate_public_key(DhKey* key, const byte* pub, word32 pubSz,
1470:../src/wolfcrypt/src/dh.c ****        const byte* prime, word32 primeSz, int partial)
1471:../src/wolfcrypt/src/dh.c **** {
 1474                             		.loc 2 1471 1
 1475 0000 7E AA                   		push.l	r10
 1476                             	.LCFI26:
 1477 0002 7E A6                   		push.l	r6
 1478                             	.LCFI27:
 1479 0004 71 0A B4                		add	#-76, r0, r10
 1480                             	.LCFI28:
 1481 0007 71 A0 F8                		add	#-8, r10, r0
 1482                             	.LCFI29:
 1483 000a 75 46 58                		mov.L	#0x58, r6
 1484 000d 4B A6                   		add	r10, r6
 1485 000f E7 A1 0D                		mov.L	r1, 52[r10]
 1486 0012 E7 A2 0E                		mov.L	r2, 56[r10]
 1487 0015 E7 A3 0F                		mov.L	r3, 60[r10]
 1488 0018 E7 A4 10                		mov.L	r4, 64[r10]
1472:../src/wolfcrypt/src/dh.c ****     int ret = 0;
 1489                             		.loc 2 1472 9
 1490 001b F8 A6 00                		mov.L	#0, [r10]
1473:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1474:../src/wolfcrypt/src/dh.c ****     mp_int* y = NULL;
 1491                             		.loc 2 1474 13
 1492 001e F9 A6 01 00             		mov.L	#0, 4[r10]
1475:../src/wolfcrypt/src/dh.c ****     mp_int* p = NULL;
 1493                             		.loc 2 1475 13
 1494 0022 F9 A6 02 00             		mov.L	#0, 8[r10]
1476:../src/wolfcrypt/src/dh.c ****     mp_int* q = NULL;
 1495                             		.loc 2 1476 13
 1496 0026 F9 A6 03 00             		mov.L	#0, 12[r10]
1477:../src/wolfcrypt/src/dh.c **** #else
1478:../src/wolfcrypt/src/dh.c ****     mp_int y[1];
1479:../src/wolfcrypt/src/dh.c ****     mp_int p[1];
1480:../src/wolfcrypt/src/dh.c ****     mp_int q[1];
1481:../src/wolfcrypt/src/dh.c **** #endif
1482:../src/wolfcrypt/src/dh.c **** 
1483:../src/wolfcrypt/src/dh.c ****     if (key == NULL || pub == NULL) {
 1497                             		.loc 2 1483 8
 1498 002a ED A5 0D                		mov.L	52[r10], r5
 1499 002d 61 05                   		cmp	#0, r5
 1500 002f 17                      		beq	.L98
 1501                             		.loc 2 1483 21 discriminator 1
 1502 0030 ED A5 0E                		mov.L	56[r10], r5
 1503 0033 61 05                   		cmp	#0, r5
 1504 0035 18                      		bne	.L99
 1505                             	.L98:
1484:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
 1506                             		.loc 2 1484 16
 1507 0036 FB 5A 53 FF             		mov.L	#-173, r5
 1508 003a 38 5B 02                		bra	.L100
 1509                             	.L99:
1485:../src/wolfcrypt/src/dh.c ****     }
1486:../src/wolfcrypt/src/dh.c **** 
1487:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1488:../src/wolfcrypt/src/dh.c ****     y = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 1510                             		.loc 2 1488 18
 1511 003d FB 1A 10 03             		mov.L	#0x310, r1
 1512 0041 05 00 00 00             		bsr	_wolfSSL_Malloc
 1513 0045 E7 A1 01                		mov.L	r1, 4[r10]
1489:../src/wolfcrypt/src/dh.c ****     if (y == NULL)
 1514                             		.loc 2 1489 8
 1515 0048 ED A5 01                		mov.L	4[r10], r5
 1516 004b 61 05                   		cmp	#0, r5
 1517 004d 1F                      		bne	.L101
1490:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 1518                             		.loc 2 1490 16
 1519 004e FB 56 83                		mov.L	#-125, r5
 1520 0051 38 44 02                		bra	.L100
 1521                             	.L101:
1491:../src/wolfcrypt/src/dh.c ****     p = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 1522                             		.loc 2 1491 18
 1523 0054 FB 1A 10 03             		mov.L	#0x310, r1
 1524 0058 05 00 00 00             		bsr	_wolfSSL_Malloc
 1525 005c E7 A1 02                		mov.L	r1, 8[r10]
1492:../src/wolfcrypt/src/dh.c ****     if (p == NULL) {
 1526                             		.loc 2 1492 8
 1527 005f ED A5 02                		mov.L	8[r10], r5
 1528 0062 61 05                   		cmp	#0, r5
 1529 0064 21 1B                   		bne	.L102
 1530                             	.LBB19:
1493:../src/wolfcrypt/src/dh.c ****         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
 1531                             		.loc 2 1493 9
 1532 0066 ED A5 01                		mov.L	4[r10], r5
 1533 0069 E7 A5 04                		mov.L	r5, 16[r10]
 1534 006c ED A5 04                		mov.L	16[r10], r5
 1535 006f 61 05                   		cmp	#0, r5
 1536 0071 10                      		beq	.L103
 1537                             		.loc 2 1493 9 is_stmt 0 discriminator 1
 1538 0072 ED A1 04                		mov.L	16[r10], r1
 1539 0075 05 00 00 00             		bsr	_wolfSSL_Free
 1540                             	.L103:
 1541                             	.LBE19:
1494:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 1542                             		.loc 2 1494 16 is_stmt 1
 1543 0079 FB 56 83                		mov.L	#-125, r5
 1544 007c 38 19 02                		bra	.L100
 1545                             	.L102:
1495:../src/wolfcrypt/src/dh.c ****     }
1496:../src/wolfcrypt/src/dh.c ****     q = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 1546                             		.loc 2 1496 18
 1547 007f FB 1A 10 03             		mov.L	#0x310, r1
 1548 0083 05 00 00 00             		bsr	_wolfSSL_Malloc
 1549 0087 E7 A1 03                		mov.L	r1, 12[r10]
1497:../src/wolfcrypt/src/dh.c ****     if (q == NULL) {
 1550                             		.loc 2 1497 8
 1551 008a ED A5 03                		mov.L	12[r10], r5
 1552 008d 61 05                   		cmp	#0, r5
 1553 008f 21 2E                   		bne	.L104
 1554                             	.LBB20:
1498:../src/wolfcrypt/src/dh.c ****         XFREE(p, key->heap, DYNAMIC_TYPE_DH);
 1555                             		.loc 2 1498 9
 1556 0091 ED A5 02                		mov.L	8[r10], r5
 1557 0094 E7 A5 05                		mov.L	r5, 20[r10]
 1558 0097 ED A5 05                		mov.L	20[r10], r5
 1559 009a 61 05                   		cmp	#0, r5
 1560 009c 10                      		beq	.L105
 1561                             		.loc 2 1498 9 is_stmt 0 discriminator 1
 1562 009d ED A1 05                		mov.L	20[r10], r1
 1563 00a0 05 00 00 00             		bsr	_wolfSSL_Free
 1564                             	.L105:
 1565                             	.LBE20:
 1566                             	.LBB21:
1499:../src/wolfcrypt/src/dh.c ****         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
 1567                             		.loc 2 1499 9 is_stmt 1
 1568 00a4 ED A5 01                		mov.L	4[r10], r5
 1569 00a7 E7 A5 06                		mov.L	r5, 24[r10]
 1570 00aa ED A5 06                		mov.L	24[r10], r5
 1571 00ad 61 05                   		cmp	#0, r5
 1572 00af 10                      		beq	.L106
 1573                             		.loc 2 1499 9 is_stmt 0 discriminator 1
 1574 00b0 ED A1 06                		mov.L	24[r10], r1
 1575 00b3 05 00 00 00             		bsr	_wolfSSL_Free
 1576                             	.L106:
 1577                             	.LBE21:
1500:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 1578                             		.loc 2 1500 16 is_stmt 1
 1579 00b7 FB 56 83                		mov.L	#-125, r5
 1580 00ba 38 DB 01                		bra	.L100
 1581                             	.L104:
1501:../src/wolfcrypt/src/dh.c ****     }
1502:../src/wolfcrypt/src/dh.c **** #endif
1503:../src/wolfcrypt/src/dh.c **** 
1504:../src/wolfcrypt/src/dh.c ****     if (mp_init_multi(y, p, q, NULL, NULL, NULL) != MP_OKAY) {
 1582                             		.loc 2 1504 9
 1583 00bd 3E 01 00                		mov.L	#0, 4[r0]
 1584 00c0 F8 06 00                		mov.L	#0, [r0]
 1585 00c3 66 04                   		mov.L	#0, r4
 1586 00c5 ED A3 03                		mov.L	12[r10], r3
 1587 00c8 ED A2 02                		mov.L	8[r10], r2
 1588 00cb ED A1 01                		mov.L	4[r10], r1
 1589 00ce 05 00 00 00             		bsr	_sp_init_multi
 1590 00d2 EF 15                   		mov.L	r1, r5
 1591                             		.loc 2 1504 8
 1592 00d4 61 05                   		cmp	#0, r5
 1593 00d6 20 41                   		beq	.L107
 1594                             	.LBB22:
1505:../src/wolfcrypt/src/dh.c ****     #ifdef WOLFSSL_SMALL_STACK
1506:../src/wolfcrypt/src/dh.c ****         XFREE(q, key->heap, DYNAMIC_TYPE_DH);
 1595                             		.loc 2 1506 9
 1596 00d8 ED A5 03                		mov.L	12[r10], r5
 1597 00db E7 A5 07                		mov.L	r5, 28[r10]
 1598 00de ED A5 07                		mov.L	28[r10], r5
 1599 00e1 61 05                   		cmp	#0, r5
 1600 00e3 10                      		beq	.L108
 1601                             		.loc 2 1506 9 is_stmt 0 discriminator 1
 1602 00e4 ED A1 07                		mov.L	28[r10], r1
 1603 00e7 05 00 00 00             		bsr	_wolfSSL_Free
 1604                             	.L108:
 1605                             	.LBE22:
 1606                             	.LBB23:
1507:../src/wolfcrypt/src/dh.c ****         XFREE(p, key->heap, DYNAMIC_TYPE_DH);
 1607                             		.loc 2 1507 9 is_stmt 1
 1608 00eb ED A5 02                		mov.L	8[r10], r5
 1609 00ee E7 A5 08                		mov.L	r5, 32[r10]
 1610 00f1 ED A5 08                		mov.L	32[r10], r5
 1611 00f4 61 05                   		cmp	#0, r5
 1612 00f6 10                      		beq	.L109
 1613                             		.loc 2 1507 9 is_stmt 0 discriminator 1
 1614 00f7 ED A1 08                		mov.L	32[r10], r1
 1615 00fa 05 00 00 00             		bsr	_wolfSSL_Free
 1616                             	.L109:
 1617                             	.LBE23:
 1618                             	.LBB24:
1508:../src/wolfcrypt/src/dh.c ****         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
 1619                             		.loc 2 1508 9 is_stmt 1
 1620 00fe ED A5 01                		mov.L	4[r10], r5
 1621 0101 E7 A5 09                		mov.L	r5, 36[r10]
 1622 0104 ED A5 09                		mov.L	36[r10], r5
 1623 0107 61 05                   		cmp	#0, r5
 1624 0109 10                      		beq	.L110
 1625                             		.loc 2 1508 9 is_stmt 0 discriminator 1
 1626 010a ED A1 09                		mov.L	36[r10], r1
 1627 010d 05 00 00 00             		bsr	_wolfSSL_Free
 1628                             	.L110:
 1629                             	.LBE24:
1509:../src/wolfcrypt/src/dh.c ****     #endif
1510:../src/wolfcrypt/src/dh.c ****         return MP_INIT_E;
 1630                             		.loc 2 1510 16 is_stmt 1
 1631 0111 FB 56 92                		mov.L	#-110, r5
 1632 0114 38 81 01                		bra	.L100
 1633                             	.L107:
1511:../src/wolfcrypt/src/dh.c ****     }
1512:../src/wolfcrypt/src/dh.c **** 
1513:../src/wolfcrypt/src/dh.c ****     SAVE_VECTOR_REGISTERS(ret = _svr_ret;);
1514:../src/wolfcrypt/src/dh.c **** 
1515:../src/wolfcrypt/src/dh.c ****     if (mp_read_unsigned_bin(y, pub, pubSz) != MP_OKAY) {
 1634                             		.loc 2 1515 9
 1635 0117 ED A3 0F                		mov.L	60[r10], r3
 1636 011a ED A2 0E                		mov.L	56[r10], r2
 1637 011d ED A1 01                		mov.L	4[r10], r1
 1638 0120 05 00 00 00             		bsr	_sp_read_unsigned_bin
 1639 0124 EF 15                   		mov.L	r1, r5
 1640                             		.loc 2 1515 8
 1641 0126 61 05                   		cmp	#0, r5
 1642 0128 14                      		beq	.L111
1516:../src/wolfcrypt/src/dh.c ****         ret = MP_READ_E;
 1643                             		.loc 2 1516 13
 1644 0129 F8 A6 91                		mov.L	#-111, [r10]
 1645                             	.L111:
1517:../src/wolfcrypt/src/dh.c ****     }
1518:../src/wolfcrypt/src/dh.c **** 
1519:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && prime != NULL) {
 1646                             		.loc 2 1519 8
 1647 012c EC A5                   		mov.L	[r10], r5
 1648 012e 61 05                   		cmp	#0, r5
 1649 0130 21 20                   		bne	.L112
 1650                             		.loc 2 1519 18 discriminator 1
 1651 0132 ED A5 10                		mov.L	64[r10], r5
 1652 0135 61 05                   		cmp	#0, r5
 1653 0137 20 19                   		beq	.L112
1520:../src/wolfcrypt/src/dh.c ****         if (mp_read_unsigned_bin(q, prime, primeSz) != MP_OKAY)
 1654                             		.loc 2 1520 13
 1655 0139 EC 63                   		mov.L	[r6], r3
 1656 013b ED A2 10                		mov.L	64[r10], r2
 1657 013e ED A1 03                		mov.L	12[r10], r1
 1658 0141 05 00 00 00             		bsr	_sp_read_unsigned_bin
 1659 0145 EF 15                   		mov.L	r1, r5
 1660                             		.loc 2 1520 12
 1661 0147 61 05                   		cmp	#0, r5
 1662 0149 20 2A                   		beq	.L114
1521:../src/wolfcrypt/src/dh.c ****             ret = MP_READ_E;
 1663                             		.loc 2 1521 17
 1664 014b F8 A6 91                		mov.L	#-111, [r10]
1520:../src/wolfcrypt/src/dh.c ****         if (mp_read_unsigned_bin(q, prime, primeSz) != MP_OKAY)
 1665                             		.loc 2 1520 12
 1666 014e 2E 25                   		bra	.L114
 1667                             	.L112:
1522:../src/wolfcrypt/src/dh.c **** 
1523:../src/wolfcrypt/src/dh.c ****     } else if (mp_iszero(&key->q) == MP_NO) {
 1668                             		.loc 2 1523 16
 1669 0150 ED A5 0D                		mov.L	52[r10], r5
 1670 0153 EE 55 88 01             		mov.L	1568[r5], r5
 1671                             		.loc 2 1523 15
 1672 0157 61 05                   		cmp	#0, r5
 1673 0159 20 1A                   		beq	.L114
1524:../src/wolfcrypt/src/dh.c ****         /* use q available in DhKey */
1525:../src/wolfcrypt/src/dh.c ****         if (mp_copy(&key->q, q) != MP_OKAY)
 1674                             		.loc 2 1525 21
 1675 015b ED A5 0D                		mov.L	52[r10], r5
 1676 015e 72 55 20 06             		add	#0x620, r5
 1677                             		.loc 2 1525 13
 1678 0162 ED A2 03                		mov.L	12[r10], r2
 1679 0165 EF 51                   		mov.L	r5, r1
 1680 0167 05 00 00 00             		bsr	_sp_copy
 1681 016b EF 15                   		mov.L	r1, r5
 1682                             		.loc 2 1525 12
 1683 016d 61 05                   		cmp	#0, r5
 1684 016f 14                      		beq	.L114
1526:../src/wolfcrypt/src/dh.c ****             ret = MP_INIT_E;
 1685                             		.loc 2 1526 17
 1686 0170 F8 A6 92                		mov.L	#-110, [r10]
 1687                             		.balign 8,3,1
 1688                             	.L114:
1527:../src/wolfcrypt/src/dh.c ****     }
1528:../src/wolfcrypt/src/dh.c **** 
1529:../src/wolfcrypt/src/dh.c ****     /* SP 800-56Ar3, section 5.6.2.3.2 */
1530:../src/wolfcrypt/src/dh.c ****     /* pub (y) should not be 0 or 1 */
1531:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && mp_cmp_d(y, 2) == MP_LT) {
 1689                             		.loc 2 1531 8
 1690 0173 EC A5                   		mov.L	[r10], r5
 1691 0175 61 05                   		cmp	#0, r5
 1692 0177 21 14                   		bne	.L115
 1693                             		.loc 2 1531 21 discriminator 1
 1694 0179 66 22                   		mov.L	#2, r2
 1695 017b ED A1 01                		mov.L	4[r10], r1
 1696 017e 05 00 00 00             		bsr	_sp_cmp_d
 1697 0182 EF 15                   		mov.L	r1, r5
 1698                             		.loc 2 1531 18 discriminator 1
 1699 0184 75 05 FF                		cmp	#-1, r5
 1700 0187 1C                      		bne	.L115
1532:../src/wolfcrypt/src/dh.c ****         ret = MP_CMP_E;
 1701                             		.loc 2 1532 13
 1702 0188 F8 A6 88                		mov.L	#-120, [r10]
 1703                             	.L115:
1533:../src/wolfcrypt/src/dh.c ****     }
1534:../src/wolfcrypt/src/dh.c **** 
1535:../src/wolfcrypt/src/dh.c ****     /* pub (y) shouldn't be greater than or equal to p - 1 */
1536:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && mp_copy(&key->p, p) != MP_OKAY) {
 1704                             		.loc 2 1536 8
 1705 018b EC A5                   		mov.L	[r10], r5
 1706 018d 61 05                   		cmp	#0, r5
 1707 018f 21 16                   		bne	.L116
 1708                             		.loc 2 1536 29 discriminator 1
 1709 0191 ED A5 0D                		mov.L	52[r10], r5
 1710                             		.loc 2 1536 21 discriminator 1
 1711 0194 ED A2 02                		mov.L	8[r10], r2
 1712 0197 EF 51                   		mov.L	r5, r1
 1713 0199 05 00 00 00             		bsr	_sp_copy
 1714 019d EF 15                   		mov.L	r1, r5
 1715                             		.loc 2 1536 18 discriminator 1
 1716 019f 61 05                   		cmp	#0, r5
 1717 01a1 14                      		beq	.L116
1537:../src/wolfcrypt/src/dh.c ****         ret = MP_INIT_E;
 1718                             		.loc 2 1537 13
 1719 01a2 F8 A6 92                		mov.L	#-110, [r10]
 1720                             	.L116:
1538:../src/wolfcrypt/src/dh.c ****     }
1539:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && mp_sub_d(p, 2, p) != MP_OKAY) {
 1721                             		.loc 2 1539 8
 1722 01a5 EC A5                   		mov.L	[r10], r5
 1723 01a7 61 05                   		cmp	#0, r5
 1724 01a9 21 16                   		bne	.L117
 1725                             		.loc 2 1539 21 discriminator 1
 1726 01ab ED A3 02                		mov.L	8[r10], r3
 1727 01ae 66 22                   		mov.L	#2, r2
 1728 01b0 ED A1 02                		mov.L	8[r10], r1
 1729 01b3 05 00 00 00             		bsr	_sp_sub_d
 1730 01b7 EF 15                   		mov.L	r1, r5
 1731                             		.loc 2 1539 18 discriminator 1
 1732 01b9 61 05                   		cmp	#0, r5
 1733 01bb 14                      		beq	.L117
1540:../src/wolfcrypt/src/dh.c ****         ret = MP_SUB_E;
 1734                             		.loc 2 1540 13
 1735 01bc F8 A6 8E                		mov.L	#-114, [r10]
 1736                             	.L117:
1541:../src/wolfcrypt/src/dh.c ****     }
1542:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && mp_cmp(y, p) == MP_GT) {
 1737                             		.loc 2 1542 8
 1738 01bf EC A5                   		mov.L	[r10], r5
 1739 01c1 61 05                   		cmp	#0, r5
 1740 01c3 21 14                   		bne	.L118
 1741                             		.loc 2 1542 21 discriminator 1
 1742 01c5 ED A2 02                		mov.L	8[r10], r2
 1743 01c8 ED A1 01                		mov.L	4[r10], r1
 1744 01cb 05 00 00 00             		bsr	_sp_cmp
 1745 01cf EF 15                   		mov.L	r1, r5
 1746                             		.loc 2 1542 18 discriminator 1
 1747 01d1 61 15                   		cmp	#1, r5
 1748 01d3 1C                      		bne	.L118
1543:../src/wolfcrypt/src/dh.c ****         ret = MP_CMP_E;
 1749                             		.loc 2 1543 13
 1750 01d4 F8 A6 88                		mov.L	#-120, [r10]
 1751                             	.L118:
1544:../src/wolfcrypt/src/dh.c ****     }
1545:../src/wolfcrypt/src/dh.c **** 
1546:../src/wolfcrypt/src/dh.c ****     if (!partial) {
 1752                             		.loc 2 1546 8
 1753 01d7 A8 6D                   		mov.L	4[r6], r5
 1754 01d9 61 05                   		cmp	#0, r5
 1755 01db 21 6A                   		bne	.L119
1547:../src/wolfcrypt/src/dh.c ****         if (ret == 0 && (prime != NULL || (mp_iszero(&key->q) == MP_NO) )) {
 1756                             		.loc 2 1547 12
 1757 01dd EC A5                   		mov.L	[r10], r5
 1758 01df 61 05                   		cmp	#0, r5
 1759 01e1 21 28                   		bne	.L120
 1760                             		.loc 2 1547 22 discriminator 1
 1761 01e3 ED A5 10                		mov.L	64[r10], r5
 1762 01e6 61 05                   		cmp	#0, r5
 1763 01e8 21 0D                   		bne	.L121
 1764                             		.loc 2 1547 44 discriminator 2
 1765 01ea ED A5 0D                		mov.L	52[r10], r5
 1766 01ed EE 55 88 01             		mov.L	1568[r5], r5
 1767                             		.loc 2 1547 40 discriminator 2
 1768 01f1 61 05                   		cmp	#0, r5
 1769 01f3 20 16                   		beq	.L120
 1770                             	.L121:
1548:../src/wolfcrypt/src/dh.c **** 
1549:../src/wolfcrypt/src/dh.c ****             /* restore key->p into p */
1550:../src/wolfcrypt/src/dh.c ****             if (mp_copy(&key->p, p) != MP_OKAY)
 1771                             		.loc 2 1550 25
 1772 01f5 ED A5 0D                		mov.L	52[r10], r5
 1773                             		.loc 2 1550 17
 1774 01f8 ED A2 02                		mov.L	8[r10], r2
 1775 01fb EF 51                   		mov.L	r5, r1
 1776 01fd 05 00 00 00             		bsr	_sp_copy
 1777 0201 EF 15                   		mov.L	r1, r5
 1778                             		.loc 2 1550 16
 1779 0203 61 05                   		cmp	#0, r5
 1780 0205 14                      		beq	.L120
1551:../src/wolfcrypt/src/dh.c ****                 ret = MP_INIT_E;
 1781                             		.loc 2 1551 21
 1782 0206 F8 A6 92                		mov.L	#-110, [r10]
 1783                             		.balign 8,3,1
 1784                             	.L120:
1552:../src/wolfcrypt/src/dh.c ****         }
1553:../src/wolfcrypt/src/dh.c **** 
1554:../src/wolfcrypt/src/dh.c ****         /* SP 800-56Ar3, section 5.6.2.3.1, process step 2 */
1555:../src/wolfcrypt/src/dh.c ****         if (ret == 0 && prime != NULL) {
 1785                             		.loc 2 1555 12
 1786 0209 EC A5                   		mov.L	[r10], r5
 1787 020b 61 05                   		cmp	#0, r5
 1788 020d 21 38                   		bne	.L119
 1789                             		.loc 2 1555 22 discriminator 1
 1790 020f ED A5 10                		mov.L	64[r10], r5
 1791 0212 61 05                   		cmp	#0, r5
 1792 0214 20 31                   		beq	.L119
1556:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_HAVE_SP_DH
1557:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_SP_NO_2048
1558:../src/wolfcrypt/src/dh.c ****             if (mp_count_bits(&key->p) == 2048) {
1559:../src/wolfcrypt/src/dh.c ****                 ret = sp_ModExp_2048(y, q, p, y);
1560:../src/wolfcrypt/src/dh.c ****                 if (ret != 0)
1561:../src/wolfcrypt/src/dh.c ****                     ret = MP_EXPTMOD_E;
1562:../src/wolfcrypt/src/dh.c ****             }
1563:../src/wolfcrypt/src/dh.c ****             else
1564:../src/wolfcrypt/src/dh.c **** #endif
1565:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_SP_NO_3072
1566:../src/wolfcrypt/src/dh.c ****             if (mp_count_bits(&key->p) == 3072) {
1567:../src/wolfcrypt/src/dh.c ****                 ret = sp_ModExp_3072(y, q, p, y);
1568:../src/wolfcrypt/src/dh.c ****                 if (ret != 0)
1569:../src/wolfcrypt/src/dh.c ****                     ret = MP_EXPTMOD_E;
1570:../src/wolfcrypt/src/dh.c ****             }
1571:../src/wolfcrypt/src/dh.c ****             else
1572:../src/wolfcrypt/src/dh.c **** #endif
1573:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SP_4096
1574:../src/wolfcrypt/src/dh.c ****             if (mp_count_bits(&key->p) == 4096) {
1575:../src/wolfcrypt/src/dh.c ****                 ret = sp_ModExp_4096(y, q, p, y);
1576:../src/wolfcrypt/src/dh.c ****                 if (ret != 0)
1577:../src/wolfcrypt/src/dh.c ****                     ret = MP_EXPTMOD_E;
1578:../src/wolfcrypt/src/dh.c ****             }
1579:../src/wolfcrypt/src/dh.c ****             else
1580:../src/wolfcrypt/src/dh.c **** #endif
1581:../src/wolfcrypt/src/dh.c **** #endif
1582:../src/wolfcrypt/src/dh.c **** 
1583:../src/wolfcrypt/src/dh.c ****             {
1584:../src/wolfcrypt/src/dh.c **** #if !defined(WOLFSSL_SP_MATH)
1585:../src/wolfcrypt/src/dh.c ****                 /* calculate (y^q) mod(p), store back into y */
1586:../src/wolfcrypt/src/dh.c ****                 if (mp_exptmod(y, q, p, y) != MP_OKAY)
 1793                             		.loc 2 1586 21
 1794 0216 ED A4 01                		mov.L	4[r10], r4
 1795 0219 ED A3 02                		mov.L	8[r10], r3
 1796 021c ED A2 03                		mov.L	12[r10], r2
 1797 021f ED A1 01                		mov.L	4[r10], r1
 1798 0222 05 00 00 00             		bsr	_sp_exptmod
 1799 0226 EF 15                   		mov.L	r1, r5
 1800                             		.loc 2 1586 20
 1801 0228 61 05                   		cmp	#0, r5
 1802 022a 14                      		beq	.L122
1587:../src/wolfcrypt/src/dh.c ****                     ret = MP_EXPTMOD_E;
 1803                             		.loc 2 1587 25
 1804 022b F8 A6 90                		mov.L	#-112, [r10]
 1805                             	.L122:
1588:../src/wolfcrypt/src/dh.c **** #else
1589:../src/wolfcrypt/src/dh.c ****                 ret = WC_KEY_SIZE_E;
1590:../src/wolfcrypt/src/dh.c **** #endif
1591:../src/wolfcrypt/src/dh.c ****             }
1592:../src/wolfcrypt/src/dh.c **** 
1593:../src/wolfcrypt/src/dh.c ****             /* verify above == 1 */
1594:../src/wolfcrypt/src/dh.c ****             if (ret == 0 && mp_cmp_d(y, 1) != MP_EQ)
 1806                             		.loc 2 1594 16
 1807 022e EC A5                   		mov.L	[r10], r5
 1808 0230 61 05                   		cmp	#0, r5
 1809 0232 21 13                   		bne	.L119
 1810                             		.loc 2 1594 29 discriminator 1
 1811 0234 66 12                   		mov.L	#1, r2
 1812 0236 ED A1 01                		mov.L	4[r10], r1
 1813 0239 05 00 00 00             		bsr	_sp_cmp_d
 1814 023d EF 15                   		mov.L	r1, r5
 1815                             		.loc 2 1594 26 discriminator 1
 1816 023f 61 05                   		cmp	#0, r5
 1817 0241 14                      		beq	.L119
1595:../src/wolfcrypt/src/dh.c ****                 ret = MP_CMP_E;
 1818                             		.loc 2 1595 21
 1819 0242 F8 A6 88                		mov.L	#-120, [r10]
 1820                             		.balign 8,3,1
 1821                             	.L119:
1596:../src/wolfcrypt/src/dh.c ****         }
1597:../src/wolfcrypt/src/dh.c ****     }
1598:../src/wolfcrypt/src/dh.c **** 
1599:../src/wolfcrypt/src/dh.c ****     mp_clear(y);
 1822                             		.loc 2 1599 5
 1823 0245 ED A1 01                		mov.L	4[r10], r1
 1824 0248 05 00 00 00             		bsr	_sp_clear
1600:../src/wolfcrypt/src/dh.c ****     mp_clear(p);
 1825                             		.loc 2 1600 5
 1826 024c ED A1 02                		mov.L	8[r10], r1
 1827 024f 05 00 00 00             		bsr	_sp_clear
1601:../src/wolfcrypt/src/dh.c ****     mp_clear(q);
 1828                             		.loc 2 1601 5
 1829 0253 ED A1 03                		mov.L	12[r10], r1
 1830 0256 05 00 00 00             		bsr	_sp_clear
 1831                             	.LBB25:
1602:../src/wolfcrypt/src/dh.c **** 
1603:../src/wolfcrypt/src/dh.c ****     RESTORE_VECTOR_REGISTERS();
1604:../src/wolfcrypt/src/dh.c **** 
1605:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1606:../src/wolfcrypt/src/dh.c ****     XFREE(q, key->heap, DYNAMIC_TYPE_DH);
 1832                             		.loc 2 1606 5
 1833 025a ED A5 03                		mov.L	12[r10], r5
 1834 025d E7 A5 0A                		mov.L	r5, 40[r10]
 1835 0260 ED A5 0A                		mov.L	40[r10], r5
 1836 0263 61 05                   		cmp	#0, r5
 1837 0265 10                      		beq	.L123
 1838                             		.loc 2 1606 5 is_stmt 0 discriminator 1
 1839 0266 ED A1 0A                		mov.L	40[r10], r1
 1840 0269 05 00 00 00             		bsr	_wolfSSL_Free
 1841                             	.L123:
 1842                             	.LBE25:
 1843                             	.LBB26:
1607:../src/wolfcrypt/src/dh.c ****     XFREE(p, key->heap, DYNAMIC_TYPE_DH);
 1844                             		.loc 2 1607 5 is_stmt 1
 1845 026d ED A5 02                		mov.L	8[r10], r5
 1846 0270 E7 A5 0B                		mov.L	r5, 44[r10]
 1847 0273 ED A5 0B                		mov.L	44[r10], r5
 1848 0276 61 05                   		cmp	#0, r5
 1849 0278 10                      		beq	.L124
 1850                             		.loc 2 1607 5 is_stmt 0 discriminator 1
 1851 0279 ED A1 0B                		mov.L	44[r10], r1
 1852 027c 05 00 00 00             		bsr	_wolfSSL_Free
 1853                             	.L124:
 1854                             	.LBE26:
 1855                             	.LBB27:
1608:../src/wolfcrypt/src/dh.c ****     XFREE(y, key->heap, DYNAMIC_TYPE_DH);
 1856                             		.loc 2 1608 5 is_stmt 1
 1857 0280 ED A5 01                		mov.L	4[r10], r5
 1858 0283 E7 A5 0C                		mov.L	r5, 48[r10]
 1859 0286 ED A5 0C                		mov.L	48[r10], r5
 1860 0289 61 05                   		cmp	#0, r5
 1861 028b 10                      		beq	.L125
 1862                             		.loc 2 1608 5 is_stmt 0 discriminator 1
 1863 028c ED A1 0C                		mov.L	48[r10], r1
 1864 028f 05 00 00 00             		bsr	_wolfSSL_Free
 1865                             	.L125:
 1866                             	.LBE27:
1609:../src/wolfcrypt/src/dh.c **** #endif
1610:../src/wolfcrypt/src/dh.c **** 
1611:../src/wolfcrypt/src/dh.c ****     return ret;
 1867                             		.loc 2 1611 12 is_stmt 1
 1868 0293 EC A5                   		mov.L	[r10], r5
 1869                             		.balign 8,3,1
 1870                             	.L100:
1612:../src/wolfcrypt/src/dh.c **** }
 1871                             		.loc 2 1612 1
 1872 0295 EF 51                   		mov.L	r5, r1
 1873 0297 71 00 54                		add	#0x54, r0
 1874 029a 7E B6                   		pop	r6
 1875 029c 7E BA                   		pop	r10
 1876 029e 02                      		rts
 1877                             	.LFE52:
 1879 029f 03                      		.section	.text.wc_DhCheckPubKey_ex,"ax",@progbits
 1880                             		.global	_wc_DhCheckPubKey_ex
 1882                             	_wc_DhCheckPubKey_ex:
 1883                             	.LFB53:
1613:../src/wolfcrypt/src/dh.c **** 
1614:../src/wolfcrypt/src/dh.c **** 
1615:../src/wolfcrypt/src/dh.c **** /* Performs a full public-key validation routine. */
1616:../src/wolfcrypt/src/dh.c **** int wc_DhCheckPubKey_ex(DhKey* key, const byte* pub, word32 pubSz,
1617:../src/wolfcrypt/src/dh.c ****                         const byte* prime, word32 primeSz)
1618:../src/wolfcrypt/src/dh.c **** {
 1884                             		.loc 2 1618 1
 1885 0000 7E AA                   		push.l	r10
 1886                             	.LCFI30:
 1887 0002 71 0A EC                		add	#-20, r0, r10
 1888                             	.LCFI31:
 1889 0005 71 A0 F8                		add	#-8, r10, r0
 1890                             	.LCFI32:
 1891 0008 75 45 1C                		mov.L	#28, r5
 1892 000b 4B A5                   		add	r10, r5
 1893 000d E3 A1                   		mov.L	r1, [r10]
 1894 000f E7 A2 01                		mov.L	r2, 4[r10]
 1895 0012 E7 A3 02                		mov.L	r3, 8[r10]
 1896 0015 E7 A4 03                		mov.L	r4, 12[r10]
1619:../src/wolfcrypt/src/dh.c ****     return _ffc_validate_public_key(key, pub, pubSz, prime, primeSz, 0);
 1897                             		.loc 2 1619 12
 1898 0018 3E 01 00                		mov.L	#0, 4[r0]
 1899 001b EC 55                   		mov.L	[r5], r5
 1900 001d E3 05                   		mov.L	r5, [r0]
 1901 001f ED A4 03                		mov.L	12[r10], r4
 1902 0022 ED A3 02                		mov.L	8[r10], r3
 1903 0025 ED A2 01                		mov.L	4[r10], r2
 1904 0028 EC A1                   		mov.L	[r10], r1
 1905 002a 05 00 00 00             		bsr	__ffc_validate_public_key
 1906 002e EF 15                   		mov.L	r1, r5
1620:../src/wolfcrypt/src/dh.c **** }
 1907                             		.loc 2 1620 1
 1908 0030 EF 51                   		mov.L	r5, r1
 1909 0032 3F AA 08                		rtsd	#32, r10-r10
 1910                             	.LFE53:
 1912                             		.section	.text.wc_DhCheckPubKey,"ax",@progbits
 1913                             		.global	_wc_DhCheckPubKey
 1915                             	_wc_DhCheckPubKey:
 1916                             	.LFB54:
1621:../src/wolfcrypt/src/dh.c **** 
1622:../src/wolfcrypt/src/dh.c **** 
1623:../src/wolfcrypt/src/dh.c **** /* Check DH Public Key for invalid numbers. Performs a partial public-key
1624:../src/wolfcrypt/src/dh.c ****  * validation routine.
1625:../src/wolfcrypt/src/dh.c ****  *
1626:../src/wolfcrypt/src/dh.c ****  * key   DH key group parameters.
1627:../src/wolfcrypt/src/dh.c ****  * pub   Public Key.
1628:../src/wolfcrypt/src/dh.c ****  * pubSz Public Key size.
1629:../src/wolfcrypt/src/dh.c ****  *
1630:../src/wolfcrypt/src/dh.c ****  *  returns 0 on success or error code
1631:../src/wolfcrypt/src/dh.c ****  */
1632:../src/wolfcrypt/src/dh.c **** int wc_DhCheckPubKey(DhKey* key, const byte* pub, word32 pubSz)
1633:../src/wolfcrypt/src/dh.c **** {
 1917                             		.loc 2 1633 1
 1918 0000 7E AA                   		push.l	r10
 1919                             	.LCFI33:
 1920 0002 71 0A F4                		add	#-12, r0, r10
 1921                             	.LCFI34:
 1922 0005 71 A0 F8                		add	#-8, r10, r0
 1923                             	.LCFI35:
 1924 0008 E3 A1                   		mov.L	r1, [r10]
 1925 000a E7 A2 01                		mov.L	r2, 4[r10]
 1926 000d E7 A3 02                		mov.L	r3, 8[r10]
1634:../src/wolfcrypt/src/dh.c ****     return _ffc_validate_public_key(key, pub, pubSz, NULL, 0, 1);
 1927                             		.loc 2 1634 12
 1928 0010 3E 01 01                		mov.L	#1, 4[r0]
 1929 0013 F8 06 00                		mov.L	#0, [r0]
 1930 0016 66 04                   		mov.L	#0, r4
 1931 0018 ED A3 02                		mov.L	8[r10], r3
 1932 001b ED A2 01                		mov.L	4[r10], r2
 1933 001e EC A1                   		mov.L	[r10], r1
 1934 0020 05 00 00 00             		bsr	__ffc_validate_public_key
 1935 0024 EF 15                   		mov.L	r1, r5
1635:../src/wolfcrypt/src/dh.c **** }
 1936                             		.loc 2 1635 1
 1937 0026 EF 51                   		mov.L	r5, r1
 1938 0028 3F AA 06                		rtsd	#24, r10-r10
 1939                             	.LFE54:
 1941                             		.section	.text.wc_DhCheckPubValue,"ax",@progbits
 1942                             		.global	_wc_DhCheckPubValue
 1944                             	_wc_DhCheckPubValue:
 1945                             	.LFB55:
1636:../src/wolfcrypt/src/dh.c **** 
1637:../src/wolfcrypt/src/dh.c **** 
1638:../src/wolfcrypt/src/dh.c **** /**
1639:../src/wolfcrypt/src/dh.c ****  * Quick validity check of public key value against prime.
1640:../src/wolfcrypt/src/dh.c ****  * Checks are:
1641:../src/wolfcrypt/src/dh.c ****  *   - Public key not 0 or 1
1642:../src/wolfcrypt/src/dh.c ****  *   - Public key not equal to prime or prime - 1
1643:../src/wolfcrypt/src/dh.c ****  *   - Public key not bigger than prime.
1644:../src/wolfcrypt/src/dh.c ****  *
1645:../src/wolfcrypt/src/dh.c ****  * prime    Big-endian encoding of prime in bytes.
1646:../src/wolfcrypt/src/dh.c ****  * primeSz  Size of prime in bytes.
1647:../src/wolfcrypt/src/dh.c ****  * pub      Big-endian encoding of public key in bytes.
1648:../src/wolfcrypt/src/dh.c ****  * pubSz    Size of public key in bytes.
1649:../src/wolfcrypt/src/dh.c ****  */
1650:../src/wolfcrypt/src/dh.c **** int wc_DhCheckPubValue(const byte* prime, word32 primeSz, const byte* pub,
1651:../src/wolfcrypt/src/dh.c ****                        word32 pubSz)
1652:../src/wolfcrypt/src/dh.c **** {
 1946                             		.loc 2 1652 1
 1947 0000 7E AA                   		push.l	r10
 1948                             	.LCFI36:
 1949 0002 71 0A E8                		add	#-24, r0, r10
 1950                             	.LCFI37:
 1951 0005 EF A0                   		mov.L	r10, r0
 1952 0007 E7 A1 02                		mov.L	r1, 8[r10]
 1953 000a E7 A2 03                		mov.L	r2, 12[r10]
 1954 000d E7 A3 04                		mov.L	r3, 16[r10]
 1955 0010 E7 A4 05                		mov.L	r4, 20[r10]
1653:../src/wolfcrypt/src/dh.c ****     int ret = 0;
 1956                             		.loc 2 1653 9
 1957 0013 F8 A6 00                		mov.L	#0, [r10]
1654:../src/wolfcrypt/src/dh.c ****     word32 i;
1655:../src/wolfcrypt/src/dh.c **** 
1656:../src/wolfcrypt/src/dh.c ****     for (i = 0; i < pubSz && pub[i] == 0; i++) {
 1958                             		.loc 2 1656 12
 1959 0016 F9 A6 01 00             		mov.L	#0, 4[r10]
 1960                             		.loc 2 1656 5
 1961 001a 09                      		bra	.L131
 1962                             	.L133:
 1963                             		.loc 2 1656 44 discriminator 4
 1964 001b ED A5 01                		mov.L	4[r10], r5
 1965 001e 62 15                   		add	#1, r5
 1966 0020 E7 A5 01                		mov.L	r5, 4[r10]
 1967                             	.L131:
 1968                             		.loc 2 1656 5 discriminator 1
 1969 0023 ED A4 01                		mov.L	4[r10], r4
 1970 0026 ED A5 05                		mov.L	20[r10], r5
 1971 0029 47 54                   		cmp	r5, r4
 1972 002b 22 11                   		bgeu	.L132
 1973                             		.loc 2 1656 33 discriminator 3
 1974 002d ED A5 04                		mov.L	16[r10], r5
 1975 0030 06 89 A5 01             		add	4[r10].L, r5
 1976 0034 CC 55                   		mov.B	[r5], r5
 1977                             		.loc 2 1656 27 discriminator 3
 1978 0036 5B 55                   		movu.B	r5, r5
 1979 0038 61 05                   		cmp	#0, r5
 1980 003a 20 E1                   		beq	.L133
 1981                             	.L132:
1657:../src/wolfcrypt/src/dh.c ****     }
1658:../src/wolfcrypt/src/dh.c ****     pubSz -= i;
 1982                             		.loc 2 1658 11
 1983 003c ED A4 05                		mov.L	20[r10], r4
 1984 003f ED A5 01                		mov.L	4[r10], r5
 1985 0042 FF 05 54                		sub	r5, r4, r5
 1986 0045 E7 A5 05                		mov.L	r5, 20[r10]
1659:../src/wolfcrypt/src/dh.c ****     pub += i;
 1987                             		.loc 2 1659 9
 1988 0048 ED A5 04                		mov.L	16[r10], r5
 1989 004b 06 89 A5 01             		add	4[r10].L, r5
 1990 004f E7 A5 04                		mov.L	r5, 16[r10]
1660:../src/wolfcrypt/src/dh.c **** 
1661:../src/wolfcrypt/src/dh.c ****     if (pubSz == 0 || (pubSz == 1 && pub[0] == 1))
 1991                             		.loc 2 1661 8
 1992 0052 ED A5 05                		mov.L	20[r10], r5
 1993 0055 61 05                   		cmp	#0, r5
 1994 0057 20 13                   		beq	.L134
 1995                             		.loc 2 1661 20 discriminator 1
 1996 0059 ED A5 05                		mov.L	20[r10], r5
 1997 005c 61 15                   		cmp	#1, r5
 1998 005e 21 12                   		bne	.L135
 1999                             		.loc 2 1661 41 discriminator 2
 2000 0060 ED A5 04                		mov.L	16[r10], r5
 2001 0063 CC 55                   		mov.B	[r5], r5
 2002                             		.loc 2 1661 35 discriminator 2
 2003 0065 5B 55                   		movu.B	r5, r5
 2004 0067 61 15                   		cmp	#1, r5
 2005 0069 1F                      		bne	.L135
 2006                             	.L134:
1662:../src/wolfcrypt/src/dh.c ****         ret = MP_VAL;
 2007                             		.loc 2 1662 13
 2008 006a F8 A6 FD                		mov.L	#-3, [r10]
 2009 006d 38 B3 00                		bra	.L136
 2010                             	.L135:
1663:../src/wolfcrypt/src/dh.c ****     else if (pubSz == primeSz) {
 2011                             		.loc 2 1663 13
 2012 0070 ED A4 05                		mov.L	20[r10], r4
 2013 0073 ED A5 03                		mov.L	12[r10], r5
 2014 0076 47 54                   		cmp	r5, r4
 2015 0078 3B 9B 00                		bne	.L137
1664:../src/wolfcrypt/src/dh.c ****         for (i = 0; i < pubSz-1 && pub[i] == prime[i]; i++) {
 2016                             		.loc 2 1664 16
 2017 007b F9 A6 01 00             		mov.L	#0, 4[r10]
 2018                             		.loc 2 1664 9
 2019 007f 09                      		bra	.L138
 2020                             	.L140:
 2021                             		.loc 2 1664 57 discriminator 4
 2022 0080 ED A5 01                		mov.L	4[r10], r5
 2023 0083 62 15                   		add	#1, r5
 2024 0085 E7 A5 01                		mov.L	r5, 4[r10]
 2025                             	.L138:
 2026                             		.loc 2 1664 30 discriminator 1
 2027 0088 ED A5 05                		mov.L	20[r10], r5
 2028 008b 60 15                   		sub	#1, r5
 2029                             		.loc 2 1664 9 discriminator 1
 2030 008d ED A4 01                		mov.L	4[r10], r4
 2031 0090 47 54                   		cmp	r5, r4
 2032 0092 22 1C                   		bgeu	.L139
 2033                             		.loc 2 1664 39 discriminator 3
 2034 0094 ED A5 04                		mov.L	16[r10], r5
 2035 0097 06 89 A5 01             		add	4[r10].L, r5
 2036 009b CC 54                   		mov.B	[r5], r4
 2037                             		.loc 2 1664 51 discriminator 3
 2038 009d ED A5 02                		mov.L	8[r10], r5
 2039 00a0 06 89 A5 01             		add	4[r10].L, r5
 2040 00a4 CC 55                   		mov.B	[r5], r5
 2041                             		.loc 2 1664 33 discriminator 3
 2042 00a6 5B 44                   		movu.B	r4, r4
 2043 00a8 5B 55                   		movu.B	r5, r5
 2044 00aa 47 54                   		cmp	r5, r4
 2045 00ac 20 D4                   		beq	.L140
 2046                             	.L139:
1665:../src/wolfcrypt/src/dh.c ****         }
1666:../src/wolfcrypt/src/dh.c ****         if (i == pubSz-1 && (pub[i] == prime[i] || pub[i] == prime[i] - 1))
 2047                             		.loc 2 1666 23
 2048 00ae ED A5 05                		mov.L	20[r10], r5
 2049 00b1 60 15                   		sub	#1, r5
 2050                             		.loc 2 1666 12
 2051 00b3 ED A4 01                		mov.L	4[r10], r4
 2052 00b6 47 54                   		cmp	r5, r4
 2053 00b8 21 3C                   		bne	.L141
 2054                             		.loc 2 1666 33 discriminator 1
 2055 00ba ED A5 04                		mov.L	16[r10], r5
 2056 00bd 06 89 A5 01             		add	4[r10].L, r5
 2057 00c1 CC 54                   		mov.B	[r5], r4
 2058                             		.loc 2 1666 45 discriminator 1
 2059 00c3 ED A5 02                		mov.L	8[r10], r5
 2060 00c6 06 89 A5 01             		add	4[r10].L, r5
 2061 00ca CC 55                   		mov.B	[r5], r5
 2062                             		.loc 2 1666 26 discriminator 1
 2063 00cc 5B 44                   		movu.B	r4, r4
 2064 00ce 5B 55                   		movu.B	r5, r5
 2065 00d0 47 54                   		cmp	r5, r4
 2066 00d2 20 1D                   		beq	.L142
 2067                             		.loc 2 1666 55 discriminator 2
 2068 00d4 ED A5 04                		mov.L	16[r10], r5
 2069 00d7 06 89 A5 01             		add	4[r10].L, r5
 2070 00db CC 55                   		mov.B	[r5], r5
 2071 00dd 5B 54                   		movu.B	r5, r4
 2072                             		.loc 2 1666 67 discriminator 2
 2073 00df ED A5 02                		mov.L	8[r10], r5
 2074 00e2 06 89 A5 01             		add	4[r10].L, r5
 2075 00e6 CC 55                   		mov.B	[r5], r5
 2076 00e8 5B 55                   		movu.B	r5, r5
 2077                             		.loc 2 1666 71 discriminator 2
 2078 00ea 60 15                   		sub	#1, r5
 2079                             		.loc 2 1666 49 discriminator 2
 2080 00ec 47 54                   		cmp	r5, r4
 2081 00ee 1E                      		bne	.L141
 2082                             	.L142:
1667:../src/wolfcrypt/src/dh.c ****             ret = MP_VAL;
 2083                             		.loc 2 1667 17
 2084 00ef F8 A6 FD                		mov.L	#-3, [r10]
 2085 00f2 2E 2E                   		bra	.L136
 2086                             	.L141:
1668:../src/wolfcrypt/src/dh.c ****         else if (pub[i] > prime[i])
 2087                             		.loc 2 1668 21
 2088 00f4 ED A5 04                		mov.L	16[r10], r5
 2089 00f7 06 89 A5 01             		add	4[r10].L, r5
 2090 00fb CC 54                   		mov.B	[r5], r4
 2091                             		.loc 2 1668 32
 2092 00fd ED A5 02                		mov.L	8[r10], r5
 2093 0100 06 89 A5 01             		add	4[r10].L, r5
 2094 0104 CC 55                   		mov.B	[r5], r5
 2095                             		.loc 2 1668 17
 2096 0106 5B 44                   		movu.B	r4, r4
 2097 0108 5B 55                   		movu.B	r5, r5
 2098 010a 47 54                   		cmp	r5, r4
 2099 010c 25 14                   		bleu	.L136
1669:../src/wolfcrypt/src/dh.c ****             ret = MP_VAL;
 2100                             		.loc 2 1669 17
 2101 010e F8 A6 FD                		mov.L	#-3, [r10]
 2102 0111 2E 0F                   		bra	.L136
 2103                             	.L137:
1670:../src/wolfcrypt/src/dh.c ****     }
1671:../src/wolfcrypt/src/dh.c ****     else if (pubSz > primeSz)
 2104                             		.loc 2 1671 13
 2105 0113 ED A4 05                		mov.L	20[r10], r4
 2106 0116 ED A5 03                		mov.L	12[r10], r5
 2107 0119 47 54                   		cmp	r5, r4
 2108 011b 25 05                   		bleu	.L136
1672:../src/wolfcrypt/src/dh.c ****         ret = MP_VAL;
 2109                             		.loc 2 1672 13
 2110 011d F8 A6 FD                		mov.L	#-3, [r10]
 2111                             		.balign 8,3,1
 2112                             	.L136:
1673:../src/wolfcrypt/src/dh.c **** 
1674:../src/wolfcrypt/src/dh.c ****     return ret;
 2113                             		.loc 2 1674 12
 2114 0120 EC A5                   		mov.L	[r10], r5
1675:../src/wolfcrypt/src/dh.c **** }
 2115                             		.loc 2 1675 1
 2116 0122 EF 51                   		mov.L	r5, r1
 2117 0124 3F AA 07                		rtsd	#28, r10-r10
 2118                             	.LFE55:
 2120 0127 03                      		.section	.text.wc_DhCheckPrivKey_ex,"ax",@progbits
 2121                             		.global	_wc_DhCheckPrivKey_ex
 2123                             	_wc_DhCheckPrivKey_ex:
 2124                             	.LFB56:
1676:../src/wolfcrypt/src/dh.c **** 
1677:../src/wolfcrypt/src/dh.c **** 
1678:../src/wolfcrypt/src/dh.c **** /* Check DH Private Key for invalid numbers, optionally allowing
1679:../src/wolfcrypt/src/dh.c ****  * the private key to be checked against the large prime (q).
1680:../src/wolfcrypt/src/dh.c ****  * Check per process in SP 800-56Ar3, section 5.6.2.1.2.
1681:../src/wolfcrypt/src/dh.c ****  *
1682:../src/wolfcrypt/src/dh.c ****  * key     DH key group parameters.
1683:../src/wolfcrypt/src/dh.c ****  * priv    Private Key.
1684:../src/wolfcrypt/src/dh.c ****  * privSz  Private Key size.
1685:../src/wolfcrypt/src/dh.c ****  * prime   Large prime (q), optionally NULL to skip check
1686:../src/wolfcrypt/src/dh.c ****  * primeSz Size of large prime
1687:../src/wolfcrypt/src/dh.c ****  *
1688:../src/wolfcrypt/src/dh.c ****  *  returns 0 on success or error code
1689:../src/wolfcrypt/src/dh.c ****  */
1690:../src/wolfcrypt/src/dh.c **** int wc_DhCheckPrivKey_ex(DhKey* key, const byte* priv, word32 privSz,
1691:../src/wolfcrypt/src/dh.c ****                          const byte* prime, word32 primeSz)
1692:../src/wolfcrypt/src/dh.c **** {
 2125                             		.loc 2 1692 1
 2126 0000 7E AA                   		push.l	r10
 2127                             	.LCFI38:
 2128 0002 7E A6                   		push.l	r6
 2129                             	.LCFI39:
 2130 0004 71 0A CC                		add	#-52, r0, r10
 2131                             	.LCFI40:
 2132 0007 71 A0 F8                		add	#-8, r10, r0
 2133                             	.LCFI41:
 2134 000a 75 46 40                		mov.L	#0x40, r6
 2135 000d 4B A6                   		add	r10, r6
 2136 000f E7 A1 08                		mov.L	r1, 32[r10]
 2137 0012 E7 A2 09                		mov.L	r2, 36[r10]
 2138 0015 E7 A3 0A                		mov.L	r3, 40[r10]
 2139 0018 E7 A4 0B                		mov.L	r4, 44[r10]
1693:../src/wolfcrypt/src/dh.c ****     int ret = 0;
 2140                             		.loc 2 1693 9
 2141 001b F8 A6 00                		mov.L	#0, [r10]
1694:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1695:../src/wolfcrypt/src/dh.c ****     mp_int* x = NULL;
 2142                             		.loc 2 1695 13
 2143 001e F9 A6 01 00             		mov.L	#0, 4[r10]
1696:../src/wolfcrypt/src/dh.c ****     mp_int* q = NULL;
 2144                             		.loc 2 1696 13
 2145 0022 F9 A6 02 00             		mov.L	#0, 8[r10]
1697:../src/wolfcrypt/src/dh.c **** #else
1698:../src/wolfcrypt/src/dh.c ****     mp_int x[1];
1699:../src/wolfcrypt/src/dh.c ****     mp_int q[1];
1700:../src/wolfcrypt/src/dh.c **** #endif
1701:../src/wolfcrypt/src/dh.c **** 
1702:../src/wolfcrypt/src/dh.c ****     if (key == NULL || priv == NULL) {
 2146                             		.loc 2 1702 8
 2147 0026 ED A5 08                		mov.L	32[r10], r5
 2148 0029 61 05                   		cmp	#0, r5
 2149 002b 17                      		beq	.L146
 2150                             		.loc 2 1702 21 discriminator 1
 2151 002c ED A5 09                		mov.L	36[r10], r5
 2152 002f 61 05                   		cmp	#0, r5
 2153 0031 18                      		bne	.L147
 2154                             	.L146:
1703:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
 2155                             		.loc 2 1703 16
 2156 0032 FB 5A 53 FF             		mov.L	#-173, r5
 2157 0036 38 8E 01                		bra	.L148
 2158                             	.L147:
1704:../src/wolfcrypt/src/dh.c ****     }
1705:../src/wolfcrypt/src/dh.c **** 
1706:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1707:../src/wolfcrypt/src/dh.c ****     x = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 2159                             		.loc 2 1707 18
 2160 0039 FB 1A 10 03             		mov.L	#0x310, r1
 2161 003d 05 00 00 00             		bsr	_wolfSSL_Malloc
 2162 0041 E7 A1 01                		mov.L	r1, 4[r10]
1708:../src/wolfcrypt/src/dh.c ****     if (x == NULL)
 2163                             		.loc 2 1708 8
 2164 0044 ED A5 01                		mov.L	4[r10], r5
 2165 0047 61 05                   		cmp	#0, r5
 2166 0049 1F                      		bne	.L149
1709:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 2167                             		.loc 2 1709 16
 2168 004a FB 56 83                		mov.L	#-125, r5
 2169 004d 38 77 01                		bra	.L148
 2170                             	.L149:
1710:../src/wolfcrypt/src/dh.c ****     q = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 2171                             		.loc 2 1710 18
 2172 0050 FB 1A 10 03             		mov.L	#0x310, r1
 2173 0054 05 00 00 00             		bsr	_wolfSSL_Malloc
 2174 0058 E7 A1 02                		mov.L	r1, 8[r10]
1711:../src/wolfcrypt/src/dh.c ****     if (q == NULL) {
 2175                             		.loc 2 1711 8
 2176 005b ED A5 02                		mov.L	8[r10], r5
 2177 005e 61 05                   		cmp	#0, r5
 2178 0060 21 1B                   		bne	.L150
 2179                             	.LBB28:
1712:../src/wolfcrypt/src/dh.c ****         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
 2180                             		.loc 2 1712 9
 2181 0062 ED A5 01                		mov.L	4[r10], r5
 2182 0065 E7 A5 03                		mov.L	r5, 12[r10]
 2183 0068 ED A5 03                		mov.L	12[r10], r5
 2184 006b 61 05                   		cmp	#0, r5
 2185 006d 10                      		beq	.L151
 2186                             		.loc 2 1712 9 is_stmt 0 discriminator 1
 2187 006e ED A1 03                		mov.L	12[r10], r1
 2188 0071 05 00 00 00             		bsr	_wolfSSL_Free
 2189                             	.L151:
 2190                             	.LBE28:
1713:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 2191                             		.loc 2 1713 16 is_stmt 1
 2192 0075 FB 56 83                		mov.L	#-125, r5
 2193 0078 38 4C 01                		bra	.L148
 2194                             	.L150:
1714:../src/wolfcrypt/src/dh.c ****     }
1715:../src/wolfcrypt/src/dh.c **** #endif
1716:../src/wolfcrypt/src/dh.c **** 
1717:../src/wolfcrypt/src/dh.c ****     if (mp_init_multi(x, q, NULL, NULL, NULL, NULL) != MP_OKAY) {
 2195                             		.loc 2 1717 9
 2196 007b 3E 01 00                		mov.L	#0, 4[r0]
 2197 007e F8 06 00                		mov.L	#0, [r0]
 2198 0081 66 04                   		mov.L	#0, r4
 2199 0083 66 03                   		mov.L	#0, r3
 2200 0085 ED A2 02                		mov.L	8[r10], r2
 2201 0088 ED A1 01                		mov.L	4[r10], r1
 2202 008b 05 00 00 00             		bsr	_sp_init_multi
 2203 008f EF 15                   		mov.L	r1, r5
 2204                             		.loc 2 1717 8
 2205 0091 61 05                   		cmp	#0, r5
 2206 0093 20 2E                   		beq	.L152
 2207                             	.LBB29:
1718:../src/wolfcrypt/src/dh.c ****     #ifdef WOLFSSL_SMALL_STACK
1719:../src/wolfcrypt/src/dh.c ****         XFREE(q, key->heap, DYNAMIC_TYPE_DH);
 2208                             		.loc 2 1719 9
 2209 0095 ED A5 02                		mov.L	8[r10], r5
 2210 0098 E7 A5 04                		mov.L	r5, 16[r10]
 2211 009b ED A5 04                		mov.L	16[r10], r5
 2212 009e 61 05                   		cmp	#0, r5
 2213 00a0 10                      		beq	.L153
 2214                             		.loc 2 1719 9 is_stmt 0 discriminator 1
 2215 00a1 ED A1 04                		mov.L	16[r10], r1
 2216 00a4 05 00 00 00             		bsr	_wolfSSL_Free
 2217                             	.L153:
 2218                             	.LBE29:
 2219                             	.LBB30:
1720:../src/wolfcrypt/src/dh.c ****         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
 2220                             		.loc 2 1720 9 is_stmt 1
 2221 00a8 ED A5 01                		mov.L	4[r10], r5
 2222 00ab E7 A5 05                		mov.L	r5, 20[r10]
 2223 00ae ED A5 05                		mov.L	20[r10], r5
 2224 00b1 61 05                   		cmp	#0, r5
 2225 00b3 10                      		beq	.L154
 2226                             		.loc 2 1720 9 is_stmt 0 discriminator 1
 2227 00b4 ED A1 05                		mov.L	20[r10], r1
 2228 00b7 05 00 00 00             		bsr	_wolfSSL_Free
 2229                             	.L154:
 2230                             	.LBE30:
1721:../src/wolfcrypt/src/dh.c ****     #endif
1722:../src/wolfcrypt/src/dh.c ****         return MP_INIT_E;
 2231                             		.loc 2 1722 16 is_stmt 1
 2232 00bb FB 56 92                		mov.L	#-110, r5
 2233 00be 38 06 01                		bra	.L148
 2234                             	.L152:
1723:../src/wolfcrypt/src/dh.c ****     }
1724:../src/wolfcrypt/src/dh.c **** 
1725:../src/wolfcrypt/src/dh.c ****     if (mp_read_unsigned_bin(x, priv, privSz) != MP_OKAY) {
 2235                             		.loc 2 1725 9
 2236 00c1 ED A3 0A                		mov.L	40[r10], r3
 2237 00c4 ED A2 09                		mov.L	36[r10], r2
 2238 00c7 ED A1 01                		mov.L	4[r10], r1
 2239 00ca 05 00 00 00             		bsr	_sp_read_unsigned_bin
 2240 00ce EF 15                   		mov.L	r1, r5
 2241                             		.loc 2 1725 8
 2242 00d0 61 05                   		cmp	#0, r5
 2243 00d2 14                      		beq	.L155
1726:../src/wolfcrypt/src/dh.c ****         ret = MP_READ_E;
 2244                             		.loc 2 1726 13
 2245 00d3 F8 A6 91                		mov.L	#-111, [r10]
 2246                             	.L155:
1727:../src/wolfcrypt/src/dh.c ****     }
1728:../src/wolfcrypt/src/dh.c **** 
1729:../src/wolfcrypt/src/dh.c ****     if (ret == 0) {
 2247                             		.loc 2 1729 8
 2248 00d6 EC A5                   		mov.L	[r10], r5
 2249 00d8 61 05                   		cmp	#0, r5
 2250 00da 21 43                   		bne	.L156
1730:../src/wolfcrypt/src/dh.c ****     #ifdef WOLFSSL_CHECK_MEM_ZERO
1731:../src/wolfcrypt/src/dh.c ****         mp_memzero_add("wc_DhCheckPrivKey_ex x", x);
1732:../src/wolfcrypt/src/dh.c ****     #endif
1733:../src/wolfcrypt/src/dh.c ****         if (prime != NULL) {
 2251                             		.loc 2 1733 12
 2252 00dc ED A5 0B                		mov.L	44[r10], r5
 2253 00df 61 05                   		cmp	#0, r5
 2254 00e1 20 19                   		beq	.L157
1734:../src/wolfcrypt/src/dh.c ****             if (mp_read_unsigned_bin(q, prime, primeSz) != MP_OKAY)
 2255                             		.loc 2 1734 17
 2256 00e3 EC 63                   		mov.L	[r6], r3
 2257 00e5 ED A2 0B                		mov.L	44[r10], r2
 2258 00e8 ED A1 02                		mov.L	8[r10], r1
 2259 00eb 05 00 00 00             		bsr	_sp_read_unsigned_bin
 2260 00ef EF 15                   		mov.L	r1, r5
 2261                             		.loc 2 1734 16
 2262 00f1 61 05                   		cmp	#0, r5
 2263 00f3 20 2A                   		beq	.L156
1735:../src/wolfcrypt/src/dh.c ****                 ret = MP_READ_E;
 2264                             		.loc 2 1735 21
 2265 00f5 F8 A6 91                		mov.L	#-111, [r10]
 2266 00f8 2E 25                   		bra	.L156
 2267                             	.L157:
1736:../src/wolfcrypt/src/dh.c ****         }
1737:../src/wolfcrypt/src/dh.c ****         else if (mp_iszero(&key->q) == MP_NO) {
 2268                             		.loc 2 1737 18
 2269 00fa ED A5 08                		mov.L	32[r10], r5
 2270 00fd EE 55 88 01             		mov.L	1568[r5], r5
 2271                             		.loc 2 1737 17
 2272 0101 61 05                   		cmp	#0, r5
 2273 0103 20 1A                   		beq	.L156
1738:../src/wolfcrypt/src/dh.c ****             /* use q available in DhKey */
1739:../src/wolfcrypt/src/dh.c ****             if (mp_copy(&key->q, q) != MP_OKAY)
 2274                             		.loc 2 1739 25
 2275 0105 ED A5 08                		mov.L	32[r10], r5
 2276 0108 72 55 20 06             		add	#0x620, r5
 2277                             		.loc 2 1739 17
 2278 010c ED A2 02                		mov.L	8[r10], r2
 2279 010f EF 51                   		mov.L	r5, r1
 2280 0111 05 00 00 00             		bsr	_sp_copy
 2281 0115 EF 15                   		mov.L	r1, r5
 2282                             		.loc 2 1739 16
 2283 0117 61 05                   		cmp	#0, r5
 2284 0119 14                      		beq	.L156
1740:../src/wolfcrypt/src/dh.c ****                 ret = MP_INIT_E;
 2285                             		.loc 2 1740 21
 2286 011a F8 A6 92                		mov.L	#-110, [r10]
 2287                             		.balign 8,3,1
 2288                             	.L156:
1741:../src/wolfcrypt/src/dh.c ****         }
1742:../src/wolfcrypt/src/dh.c ****     }
1743:../src/wolfcrypt/src/dh.c **** 
1744:../src/wolfcrypt/src/dh.c ****     /* priv (x) should not be 0 */
1745:../src/wolfcrypt/src/dh.c ****     if (ret == 0) {
 2289                             		.loc 2 1745 8
 2290 011d EC A5                   		mov.L	[r10], r5
 2291 011f 61 05                   		cmp	#0, r5
 2292 0121 21 13                   		bne	.L159
1746:../src/wolfcrypt/src/dh.c ****         if (mp_cmp_d(x, 0) == MP_EQ)
 2293                             		.loc 2 1746 13
 2294 0123 66 02                   		mov.L	#0, r2
 2295 0125 ED A1 01                		mov.L	4[r10], r1
 2296 0128 05 00 00 00             		bsr	_sp_cmp_d
 2297 012c EF 15                   		mov.L	r1, r5
 2298                             		.loc 2 1746 12
 2299 012e 61 05                   		cmp	#0, r5
 2300 0130 1C                      		bne	.L159
1747:../src/wolfcrypt/src/dh.c ****             ret = MP_CMP_E;
 2301                             		.loc 2 1747 17
 2302 0131 F8 A6 88                		mov.L	#-120, [r10]
 2303                             	.L159:
1748:../src/wolfcrypt/src/dh.c ****     }
1749:../src/wolfcrypt/src/dh.c **** 
1750:../src/wolfcrypt/src/dh.c ****     if (ret == 0) {
 2304                             		.loc 2 1750 8
 2305 0134 EC A5                   		mov.L	[r10], r5
 2306 0136 61 05                   		cmp	#0, r5
 2307 0138 21 56                   		bne	.L160
1751:../src/wolfcrypt/src/dh.c ****         if (mp_iszero(q) == MP_NO) {
 2308                             		.loc 2 1751 13
 2309 013a ED A5 02                		mov.L	8[r10], r5
 2310 013d EC 55                   		mov.L	[r5], r5
 2311                             		.loc 2 1751 12
 2312 013f 61 05                   		cmp	#0, r5
 2313 0141 20 4D                   		beq	.L160
1752:../src/wolfcrypt/src/dh.c ****             /* priv (x) shouldn't be greater than q - 1 */
1753:../src/wolfcrypt/src/dh.c ****             if (mp_copy(&key->q, q) != MP_OKAY)
 2314                             		.loc 2 1753 25
 2315 0143 ED A5 08                		mov.L	32[r10], r5
 2316 0146 72 55 20 06             		add	#0x620, r5
 2317                             		.loc 2 1753 17
 2318 014a ED A2 02                		mov.L	8[r10], r2
 2319 014d EF 51                   		mov.L	r5, r1
 2320 014f 05 00 00 00             		bsr	_sp_copy
 2321 0153 EF 15                   		mov.L	r1, r5
 2322                             		.loc 2 1753 16
 2323 0155 61 05                   		cmp	#0, r5
 2324 0157 14                      		beq	.L161
1754:../src/wolfcrypt/src/dh.c ****                 ret = MP_INIT_E;
 2325                             		.loc 2 1754 21
 2326 0158 F8 A6 92                		mov.L	#-110, [r10]
 2327                             	.L161:
1755:../src/wolfcrypt/src/dh.c ****             if (ret == 0) {
 2328                             		.loc 2 1755 16
 2329 015b EC A5                   		mov.L	[r10], r5
 2330 015d 61 05                   		cmp	#0, r5
 2331 015f 21 16                   		bne	.L162
1756:../src/wolfcrypt/src/dh.c ****                 if (mp_sub_d(q, 1, q) != MP_OKAY)
 2332                             		.loc 2 1756 21
 2333 0161 ED A3 02                		mov.L	8[r10], r3
 2334 0164 66 12                   		mov.L	#1, r2
 2335 0166 ED A1 02                		mov.L	8[r10], r1
 2336 0169 05 00 00 00             		bsr	_sp_sub_d
 2337 016d EF 15                   		mov.L	r1, r5
 2338                             		.loc 2 1756 20
 2339 016f 61 05                   		cmp	#0, r5
 2340 0171 14                      		beq	.L162
1757:../src/wolfcrypt/src/dh.c ****                     ret = MP_SUB_E;
 2341                             		.loc 2 1757 25
 2342 0172 F8 A6 8E                		mov.L	#-114, [r10]
 2343                             	.L162:
1758:../src/wolfcrypt/src/dh.c ****             }
1759:../src/wolfcrypt/src/dh.c ****             if (ret == 0) {
 2344                             		.loc 2 1759 16
 2345 0175 EC A5                   		mov.L	[r10], r5
 2346 0177 61 05                   		cmp	#0, r5
 2347 0179 21 15                   		bne	.L160
1760:../src/wolfcrypt/src/dh.c ****                 if (mp_cmp(x, q) == MP_GT)
 2348                             		.loc 2 1760 21
 2349 017b ED A2 02                		mov.L	8[r10], r2
 2350 017e ED A1 01                		mov.L	4[r10], r1
 2351 0181 05 00 00 00             		bsr	_sp_cmp
 2352 0185 EF 15                   		mov.L	r1, r5
 2353                             		.loc 2 1760 20
 2354 0187 61 15                   		cmp	#1, r5
 2355 0189 1D                      		bne	.L160
1761:../src/wolfcrypt/src/dh.c ****                     ret = DH_CHECK_PRIV_E;
 2356                             		.loc 2 1761 25
 2357 018a F8 AA F9 FE             		mov.L	#-263, [r10]
 2358                             		.balign 8,3,1
 2359                             	.L160:
1762:../src/wolfcrypt/src/dh.c ****             }
1763:../src/wolfcrypt/src/dh.c ****         }
1764:../src/wolfcrypt/src/dh.c ****     }
1765:../src/wolfcrypt/src/dh.c **** 
1766:../src/wolfcrypt/src/dh.c ****     mp_forcezero(x);
 2360                             		.loc 2 1766 5
 2361 018e ED A1 01                		mov.L	4[r10], r1
 2362 0191 05 00 00 00             		bsr	_sp_forcezero
1767:../src/wolfcrypt/src/dh.c ****     mp_clear(q);
 2363                             		.loc 2 1767 5
 2364 0195 ED A1 02                		mov.L	8[r10], r1
 2365 0198 05 00 00 00             		bsr	_sp_clear
 2366                             	.LBB31:
1768:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1769:../src/wolfcrypt/src/dh.c ****     XFREE(q, key->heap, DYNAMIC_TYPE_DH);
 2367                             		.loc 2 1769 5
 2368 019c ED A5 02                		mov.L	8[r10], r5
 2369 019f E7 A5 06                		mov.L	r5, 24[r10]
 2370 01a2 ED A5 06                		mov.L	24[r10], r5
 2371 01a5 61 05                   		cmp	#0, r5
 2372 01a7 10                      		beq	.L163
 2373                             		.loc 2 1769 5 is_stmt 0 discriminator 1
 2374 01a8 ED A1 06                		mov.L	24[r10], r1
 2375 01ab 05 00 00 00             		bsr	_wolfSSL_Free
 2376                             	.L163:
 2377                             	.LBE31:
 2378                             	.LBB32:
1770:../src/wolfcrypt/src/dh.c ****     XFREE(x, key->heap, DYNAMIC_TYPE_DH);
 2379                             		.loc 2 1770 5 is_stmt 1
 2380 01af ED A5 01                		mov.L	4[r10], r5
 2381 01b2 E7 A5 07                		mov.L	r5, 28[r10]
 2382 01b5 ED A5 07                		mov.L	28[r10], r5
 2383 01b8 61 05                   		cmp	#0, r5
 2384 01ba 10                      		beq	.L164
 2385                             		.loc 2 1770 5 is_stmt 0 discriminator 1
 2386 01bb ED A1 07                		mov.L	28[r10], r1
 2387 01be 05 00 00 00             		bsr	_wolfSSL_Free
 2388                             	.L164:
 2389                             	.LBE32:
1771:../src/wolfcrypt/src/dh.c **** #elif defined(WOLFSSL_CHECK_MEM_ZERO)
1772:../src/wolfcrypt/src/dh.c ****     mp_memzero_check(x);
1773:../src/wolfcrypt/src/dh.c **** #endif
1774:../src/wolfcrypt/src/dh.c **** 
1775:../src/wolfcrypt/src/dh.c ****     return ret;
 2390                             		.loc 2 1775 12 is_stmt 1
 2391 01c2 EC A5                   		mov.L	[r10], r5
 2392                             		.balign 8,3,1
 2393                             	.L148:
1776:../src/wolfcrypt/src/dh.c **** }
 2394                             		.loc 2 1776 1
 2395 01c4 EF 51                   		mov.L	r5, r1
 2396 01c6 71 00 3C                		add	#60, r0
 2397 01c9 7E B6                   		pop	r6
 2398 01cb 7E BA                   		pop	r10
 2399 01cd 02                      		rts
 2400                             	.LFE56:
 2402 01ce EF 00                   		.section	.text.wc_DhCheckPrivKey,"ax",@progbits
 2403                             		.global	_wc_DhCheckPrivKey
 2405                             	_wc_DhCheckPrivKey:
 2406                             	.LFB57:
1777:../src/wolfcrypt/src/dh.c **** 
1778:../src/wolfcrypt/src/dh.c **** 
1779:../src/wolfcrypt/src/dh.c **** /* Check DH Private Key for invalid numbers
1780:../src/wolfcrypt/src/dh.c ****  *
1781:../src/wolfcrypt/src/dh.c ****  * key    DH key group parameters.
1782:../src/wolfcrypt/src/dh.c ****  * priv   Private Key.
1783:../src/wolfcrypt/src/dh.c ****  * privSz Private Key size.
1784:../src/wolfcrypt/src/dh.c ****  *
1785:../src/wolfcrypt/src/dh.c ****  *  returns 0 on success or error code
1786:../src/wolfcrypt/src/dh.c ****  */
1787:../src/wolfcrypt/src/dh.c **** int wc_DhCheckPrivKey(DhKey* key, const byte* priv, word32 privSz)
1788:../src/wolfcrypt/src/dh.c **** {
 2407                             		.loc 2 1788 1
 2408 0000 7E AA                   		push.l	r10
 2409                             	.LCFI42:
 2410 0002 71 0A F4                		add	#-12, r0, r10
 2411                             	.LCFI43:
 2412 0005 71 A0 FC                		add	#-4, r10, r0
 2413                             	.LCFI44:
 2414 0008 E3 A1                   		mov.L	r1, [r10]
 2415 000a E7 A2 01                		mov.L	r2, 4[r10]
 2416 000d E7 A3 02                		mov.L	r3, 8[r10]
1789:../src/wolfcrypt/src/dh.c ****     return wc_DhCheckPrivKey_ex(key, priv, privSz, NULL, 0);
 2417                             		.loc 2 1789 12
 2418 0010 F8 06 00                		mov.L	#0, [r0]
 2419 0013 66 04                   		mov.L	#0, r4
 2420 0015 ED A3 02                		mov.L	8[r10], r3
 2421 0018 ED A2 01                		mov.L	4[r10], r2
 2422 001b EC A1                   		mov.L	[r10], r1
 2423 001d 05 00 00 00             		bsr	_wc_DhCheckPrivKey_ex
 2424 0021 EF 15                   		mov.L	r1, r5
1790:../src/wolfcrypt/src/dh.c **** }
 2425                             		.loc 2 1790 1
 2426 0023 EF 51                   		mov.L	r5, r1
 2427 0025 3F AA 05                		rtsd	#20, r10-r10
 2428                             	.LFE57:
 2430                             		.section	.text._ffc_pairwise_consistency_test,"ax",@progbits
 2432                             	__ffc_pairwise_consistency_test:
 2433                             	.LFB58:
1791:../src/wolfcrypt/src/dh.c **** 
1792:../src/wolfcrypt/src/dh.c **** 
1793:../src/wolfcrypt/src/dh.c **** /* Performs a Pairwise Consistency Test on an FFC key pair. */
1794:../src/wolfcrypt/src/dh.c **** /* Check DH Keys for pair-wise consistency per process in
1795:../src/wolfcrypt/src/dh.c ****  * SP 800-56Ar3, section 5.6.2.1.4, method (b) for FFC. */
1796:../src/wolfcrypt/src/dh.c **** static int _ffc_pairwise_consistency_test(DhKey* key,
1797:../src/wolfcrypt/src/dh.c ****         const byte* pub, word32 pubSz, const byte* priv, word32 privSz)
1798:../src/wolfcrypt/src/dh.c **** {
 2434                             		.loc 2 1798 1
 2435 0000 7E AA                   		push.l	r10
 2436                             	.LCFI45:
 2437 0002 7E A6                   		push.l	r6
 2438                             	.LCFI46:
 2439 0004 71 0A B8                		add	#-72, r0, r10
 2440                             	.LCFI47:
 2441 0007 71 A0 F8                		add	#-8, r10, r0
 2442                             	.LCFI48:
 2443 000a 75 46 54                		mov.L	#0x54, r6
 2444 000d 4B A6                   		add	r10, r6
 2445 000f E7 A1 0D                		mov.L	r1, 52[r10]
 2446 0012 E7 A2 0E                		mov.L	r2, 56[r10]
 2447 0015 E7 A3 0F                		mov.L	r3, 60[r10]
 2448 0018 E7 A4 10                		mov.L	r4, 64[r10]
1799:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1800:../src/wolfcrypt/src/dh.c ****     mp_int* publicKey = NULL;
 2449                             		.loc 2 1800 13
 2450 001b F9 A6 01 00             		mov.L	#0, 4[r10]
1801:../src/wolfcrypt/src/dh.c ****     mp_int* privateKey = NULL;
 2451                             		.loc 2 1801 13
 2452 001f F9 A6 02 00             		mov.L	#0, 8[r10]
1802:../src/wolfcrypt/src/dh.c ****     mp_int* checkKey = NULL;
 2453                             		.loc 2 1802 13
 2454 0023 F9 A6 03 00             		mov.L	#0, 12[r10]
1803:../src/wolfcrypt/src/dh.c **** #else
1804:../src/wolfcrypt/src/dh.c ****     mp_int publicKey[1];
1805:../src/wolfcrypt/src/dh.c ****     mp_int privateKey[1];
1806:../src/wolfcrypt/src/dh.c ****     mp_int checkKey[1];
1807:../src/wolfcrypt/src/dh.c **** #endif
1808:../src/wolfcrypt/src/dh.c ****     int ret = 0;
 2455                             		.loc 2 1808 9
 2456 0027 F8 A6 00                		mov.L	#0, [r10]
1809:../src/wolfcrypt/src/dh.c **** 
1810:../src/wolfcrypt/src/dh.c ****     if (key == NULL || pub == NULL || priv == NULL)
 2457                             		.loc 2 1810 8
 2458 002a ED A5 0D                		mov.L	52[r10], r5
 2459 002d 61 05                   		cmp	#0, r5
 2460 002f 20 0E                   		beq	.L168
 2461                             		.loc 2 1810 21 discriminator 1
 2462 0031 ED A5 0E                		mov.L	56[r10], r5
 2463 0034 61 05                   		cmp	#0, r5
 2464 0036 17                      		beq	.L168
 2465                             		.loc 2 1810 36 discriminator 2
 2466 0037 ED A5 10                		mov.L	64[r10], r5
 2467 003a 61 05                   		cmp	#0, r5
 2468 003c 18                      		bne	.L169
 2469                             	.L168:
1811:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
 2470                             		.loc 2 1811 16
 2471 003d FB 5A 53 FF             		mov.L	#-173, r5
 2472 0041 38 B1 01                		bra	.L170
 2473                             	.L169:
1812:../src/wolfcrypt/src/dh.c ****     if (mp_iseven(&key->p) == MP_YES)
 2474                             		.loc 2 1812 9
 2475 0044 ED A5 0D                		mov.L	52[r10], r5
 2476 0047 EC 55                   		mov.L	[r5], r5
 2477 0049 61 05                   		cmp	#0, r5
 2478 004b 20 0F                   		beq	.L171
 2479                             		.loc 2 1812 9 is_stmt 0 discriminator 1
 2480 004d ED A5 0D                		mov.L	52[r10], r5
 2481 0050 A8 D5                   		mov.L	8[r5], r5
 2482 0052 64 15                   		and	#1, r5
 2483 0054 61 05                   		cmp	#0, r5
 2484 0056 1C                      		bne	.L171
 2485                             		.loc 2 1812 9 discriminator 3
 2486 0057 66 15                   		mov.L	#1, r5
 2487 0059 0B                      		bra	.L172
 2488                             	.L171:
 2489                             		.loc 2 1812 9 discriminator 4
 2490 005a 66 05                   		mov.L	#0, r5
 2491                             	.L172:
 2492                             		.loc 2 1812 8 is_stmt 1 discriminator 6
 2493 005c 61 15                   		cmp	#1, r5
 2494 005e 1F                      		bne	.L173
1813:../src/wolfcrypt/src/dh.c ****         return MP_VAL;
 2495                             		.loc 2 1813 16
 2496 005f FB 56 FD                		mov.L	#-3, r5
 2497 0062 38 90 01                		bra	.L170
 2498                             	.L173:
1814:../src/wolfcrypt/src/dh.c **** 
1815:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1816:../src/wolfcrypt/src/dh.c ****     publicKey = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 2499                             		.loc 2 1816 26
 2500 0065 FB 1A 10 03             		mov.L	#0x310, r1
 2501 0069 05 00 00 00             		bsr	_wolfSSL_Malloc
 2502 006d E7 A1 01                		mov.L	r1, 4[r10]
1817:../src/wolfcrypt/src/dh.c ****     if (publicKey == NULL)
 2503                             		.loc 2 1817 8
 2504 0070 ED A5 01                		mov.L	4[r10], r5
 2505 0073 61 05                   		cmp	#0, r5
 2506 0075 1F                      		bne	.L174
1818:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 2507                             		.loc 2 1818 16
 2508 0076 FB 56 83                		mov.L	#-125, r5
 2509 0079 38 79 01                		bra	.L170
 2510                             	.L174:
1819:../src/wolfcrypt/src/dh.c ****     privateKey = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 2511                             		.loc 2 1819 27
 2512 007c FB 1A 10 03             		mov.L	#0x310, r1
 2513 0080 05 00 00 00             		bsr	_wolfSSL_Malloc
 2514 0084 E7 A1 02                		mov.L	r1, 8[r10]
1820:../src/wolfcrypt/src/dh.c ****     if (privateKey == NULL) {
 2515                             		.loc 2 1820 8
 2516 0087 ED A5 02                		mov.L	8[r10], r5
 2517 008a 61 05                   		cmp	#0, r5
 2518 008c 21 1B                   		bne	.L175
 2519                             	.LBB33:
1821:../src/wolfcrypt/src/dh.c ****         XFREE(publicKey, key->heap, DYNAMIC_TYPE_DH);
 2520                             		.loc 2 1821 9
 2521 008e ED A5 01                		mov.L	4[r10], r5
 2522 0091 E7 A5 04                		mov.L	r5, 16[r10]
 2523 0094 ED A5 04                		mov.L	16[r10], r5
 2524 0097 61 05                   		cmp	#0, r5
 2525 0099 10                      		beq	.L176
 2526                             		.loc 2 1821 9 is_stmt 0 discriminator 1
 2527 009a ED A1 04                		mov.L	16[r10], r1
 2528 009d 05 00 00 00             		bsr	_wolfSSL_Free
 2529                             	.L176:
 2530                             	.LBE33:
1822:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 2531                             		.loc 2 1822 16 is_stmt 1
 2532 00a1 FB 56 83                		mov.L	#-125, r5
 2533 00a4 38 4E 01                		bra	.L170
 2534                             	.L175:
1823:../src/wolfcrypt/src/dh.c ****     }
1824:../src/wolfcrypt/src/dh.c ****     checkKey = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 2535                             		.loc 2 1824 25
 2536 00a7 FB 1A 10 03             		mov.L	#0x310, r1
 2537 00ab 05 00 00 00             		bsr	_wolfSSL_Malloc
 2538 00af E7 A1 03                		mov.L	r1, 12[r10]
1825:../src/wolfcrypt/src/dh.c ****     if (checkKey == NULL) {
 2539                             		.loc 2 1825 8
 2540 00b2 ED A5 03                		mov.L	12[r10], r5
 2541 00b5 61 05                   		cmp	#0, r5
 2542 00b7 21 2E                   		bne	.L177
 2543                             	.LBB34:
1826:../src/wolfcrypt/src/dh.c ****         XFREE(privateKey, key->heap, DYNAMIC_TYPE_DH);
 2544                             		.loc 2 1826 9
 2545 00b9 ED A5 02                		mov.L	8[r10], r5
 2546 00bc E7 A5 05                		mov.L	r5, 20[r10]
 2547 00bf ED A5 05                		mov.L	20[r10], r5
 2548 00c2 61 05                   		cmp	#0, r5
 2549 00c4 10                      		beq	.L178
 2550                             		.loc 2 1826 9 is_stmt 0 discriminator 1
 2551 00c5 ED A1 05                		mov.L	20[r10], r1
 2552 00c8 05 00 00 00             		bsr	_wolfSSL_Free
 2553                             	.L178:
 2554                             	.LBE34:
 2555                             	.LBB35:
1827:../src/wolfcrypt/src/dh.c ****         XFREE(publicKey, key->heap, DYNAMIC_TYPE_DH);
 2556                             		.loc 2 1827 9 is_stmt 1
 2557 00cc ED A5 01                		mov.L	4[r10], r5
 2558 00cf E7 A5 06                		mov.L	r5, 24[r10]
 2559 00d2 ED A5 06                		mov.L	24[r10], r5
 2560 00d5 61 05                   		cmp	#0, r5
 2561 00d7 10                      		beq	.L179
 2562                             		.loc 2 1827 9 is_stmt 0 discriminator 1
 2563 00d8 ED A1 06                		mov.L	24[r10], r1
 2564 00db 05 00 00 00             		bsr	_wolfSSL_Free
 2565                             	.L179:
 2566                             	.LBE35:
1828:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 2567                             		.loc 2 1828 16 is_stmt 1
 2568 00df FB 56 83                		mov.L	#-125, r5
 2569 00e2 38 10 01                		bra	.L170
 2570                             	.L177:
1829:../src/wolfcrypt/src/dh.c ****     }
1830:../src/wolfcrypt/src/dh.c **** #endif
1831:../src/wolfcrypt/src/dh.c **** 
1832:../src/wolfcrypt/src/dh.c ****     if (mp_init_multi(publicKey, privateKey, checkKey,
 2571                             		.loc 2 1832 9
 2572 00e5 3E 01 00                		mov.L	#0, 4[r0]
 2573 00e8 F8 06 00                		mov.L	#0, [r0]
 2574 00eb 66 04                   		mov.L	#0, r4
 2575 00ed ED A3 03                		mov.L	12[r10], r3
 2576 00f0 ED A2 02                		mov.L	8[r10], r2
 2577 00f3 ED A1 01                		mov.L	4[r10], r1
 2578 00f6 05 00 00 00             		bsr	_sp_init_multi
 2579 00fa EF 15                   		mov.L	r1, r5
 2580                             		.loc 2 1832 8
 2581 00fc 61 05                   		cmp	#0, r5
 2582 00fe 20 41                   		beq	.L180
 2583                             	.LBB36:
1833:../src/wolfcrypt/src/dh.c ****                       NULL, NULL, NULL) != MP_OKAY) {
1834:../src/wolfcrypt/src/dh.c **** 
1835:../src/wolfcrypt/src/dh.c ****     #ifdef WOLFSSL_SMALL_STACK
1836:../src/wolfcrypt/src/dh.c ****         XFREE(privateKey, key->heap, DYNAMIC_TYPE_DH);
 2584                             		.loc 2 1836 9
 2585 0100 ED A5 02                		mov.L	8[r10], r5
 2586 0103 E7 A5 07                		mov.L	r5, 28[r10]
 2587 0106 ED A5 07                		mov.L	28[r10], r5
 2588 0109 61 05                   		cmp	#0, r5
 2589 010b 10                      		beq	.L181
 2590                             		.loc 2 1836 9 is_stmt 0 discriminator 1
 2591 010c ED A1 07                		mov.L	28[r10], r1
 2592 010f 05 00 00 00             		bsr	_wolfSSL_Free
 2593                             	.L181:
 2594                             	.LBE36:
 2595                             	.LBB37:
1837:../src/wolfcrypt/src/dh.c ****         XFREE(publicKey, key->heap, DYNAMIC_TYPE_DH);
 2596                             		.loc 2 1837 9 is_stmt 1
 2597 0113 ED A5 01                		mov.L	4[r10], r5
 2598 0116 E7 A5 08                		mov.L	r5, 32[r10]
 2599 0119 ED A5 08                		mov.L	32[r10], r5
 2600 011c 61 05                   		cmp	#0, r5
 2601 011e 10                      		beq	.L182
 2602                             		.loc 2 1837 9 is_stmt 0 discriminator 1
 2603 011f ED A1 08                		mov.L	32[r10], r1
 2604 0122 05 00 00 00             		bsr	_wolfSSL_Free
 2605                             	.L182:
 2606                             	.LBE37:
 2607                             	.LBB38:
1838:../src/wolfcrypt/src/dh.c ****         XFREE(checkKey, key->heap, DYNAMIC_TYPE_DH);
 2608                             		.loc 2 1838 9 is_stmt 1
 2609 0126 ED A5 03                		mov.L	12[r10], r5
 2610 0129 E7 A5 09                		mov.L	r5, 36[r10]
 2611 012c ED A5 09                		mov.L	36[r10], r5
 2612 012f 61 05                   		cmp	#0, r5
 2613 0131 10                      		beq	.L183
 2614                             		.loc 2 1838 9 is_stmt 0 discriminator 1
 2615 0132 ED A1 09                		mov.L	36[r10], r1
 2616 0135 05 00 00 00             		bsr	_wolfSSL_Free
 2617                             	.L183:
 2618                             	.LBE38:
1839:../src/wolfcrypt/src/dh.c ****     #endif
1840:../src/wolfcrypt/src/dh.c ****         return MP_INIT_E;
 2619                             		.loc 2 1840 16 is_stmt 1
 2620 0139 FB 56 92                		mov.L	#-110, r5
 2621 013c 38 B6 00                		bra	.L170
 2622                             	.L180:
1841:../src/wolfcrypt/src/dh.c ****     }
1842:../src/wolfcrypt/src/dh.c **** 
1843:../src/wolfcrypt/src/dh.c ****     SAVE_VECTOR_REGISTERS(ret = _svr_ret;);
1844:../src/wolfcrypt/src/dh.c **** 
1845:../src/wolfcrypt/src/dh.c ****     /* Load the private and public keys into big integers. */
1846:../src/wolfcrypt/src/dh.c ****     if (mp_read_unsigned_bin(publicKey, pub, pubSz) != MP_OKAY ||
 2623                             		.loc 2 1846 9
 2624 013f ED A3 0F                		mov.L	60[r10], r3
 2625 0142 ED A2 0E                		mov.L	56[r10], r2
 2626 0145 ED A1 01                		mov.L	4[r10], r1
 2627 0148 05 00 00 00             		bsr	_sp_read_unsigned_bin
 2628 014c EF 15                   		mov.L	r1, r5
 2629                             		.loc 2 1846 8
 2630 014e 61 05                   		cmp	#0, r5
 2631 0150 21 13                   		bne	.L184
1847:../src/wolfcrypt/src/dh.c ****         mp_read_unsigned_bin(privateKey, priv, privSz) != MP_OKAY) {
 2632                             		.loc 2 1847 9 discriminator 1
 2633 0152 EC 63                   		mov.L	[r6], r3
 2634 0154 ED A2 10                		mov.L	64[r10], r2
 2635 0157 ED A1 02                		mov.L	8[r10], r1
 2636 015a 05 00 00 00             		bsr	_sp_read_unsigned_bin
 2637 015e EF 15                   		mov.L	r1, r5
1846:../src/wolfcrypt/src/dh.c ****         mp_read_unsigned_bin(privateKey, priv, privSz) != MP_OKAY) {
 2638                             		.loc 2 1846 64 discriminator 1
 2639 0160 61 05                   		cmp	#0, r5
 2640 0162 14                      		beq	.L185
 2641                             	.L184:
1848:../src/wolfcrypt/src/dh.c **** 
1849:../src/wolfcrypt/src/dh.c ****         ret = MP_READ_E;
 2642                             		.loc 2 1849 13
 2643 0163 F8 A6 91                		mov.L	#-111, [r10]
 2644                             	.L185:
1850:../src/wolfcrypt/src/dh.c ****     }
1851:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
1852:../src/wolfcrypt/src/dh.c ****     mp_memzero_add("_ffc_pairwise_consistency_test privateKey", privateKey);
1853:../src/wolfcrypt/src/dh.c **** #endif
1854:../src/wolfcrypt/src/dh.c **** 
1855:../src/wolfcrypt/src/dh.c ****     /* Calculate checkKey = g^privateKey mod p */
1856:../src/wolfcrypt/src/dh.c ****     if (ret == 0) {
 2645                             		.loc 2 1856 8
 2646 0166 EC A5                   		mov.L	[r10], r5
 2647 0168 61 05                   		cmp	#0, r5
 2648 016a 21 20                   		bne	.L186
1857:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_HAVE_SP_DH
1858:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_SP_NO_2048
1859:../src/wolfcrypt/src/dh.c ****         if (mp_count_bits(&key->p) == 2048) {
1860:../src/wolfcrypt/src/dh.c ****             ret = sp_ModExp_2048(&key->g, privateKey, &key->p, checkKey);
1861:../src/wolfcrypt/src/dh.c ****             if (ret != 0)
1862:../src/wolfcrypt/src/dh.c ****                 ret = MP_EXPTMOD_E;
1863:../src/wolfcrypt/src/dh.c ****         }
1864:../src/wolfcrypt/src/dh.c ****         else
1865:../src/wolfcrypt/src/dh.c **** #endif
1866:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_SP_NO_3072
1867:../src/wolfcrypt/src/dh.c ****         if (mp_count_bits(&key->p) == 3072) {
1868:../src/wolfcrypt/src/dh.c ****             ret = sp_ModExp_3072(&key->g, privateKey, &key->p, checkKey);
1869:../src/wolfcrypt/src/dh.c ****             if (ret != 0)
1870:../src/wolfcrypt/src/dh.c ****                 ret = MP_EXPTMOD_E;
1871:../src/wolfcrypt/src/dh.c ****         }
1872:../src/wolfcrypt/src/dh.c ****         else
1873:../src/wolfcrypt/src/dh.c **** #endif
1874:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SP_4096
1875:../src/wolfcrypt/src/dh.c ****         if (mp_count_bits(&key->p) == 4096) {
1876:../src/wolfcrypt/src/dh.c ****             ret = sp_ModExp_4096(&key->g, privateKey, &key->p, checkKey);
1877:../src/wolfcrypt/src/dh.c ****             if (ret != 0)
1878:../src/wolfcrypt/src/dh.c ****                 ret = MP_EXPTMOD_E;
1879:../src/wolfcrypt/src/dh.c ****         }
1880:../src/wolfcrypt/src/dh.c ****         else
1881:../src/wolfcrypt/src/dh.c **** #endif
1882:../src/wolfcrypt/src/dh.c **** #endif
1883:../src/wolfcrypt/src/dh.c ****         {
1884:../src/wolfcrypt/src/dh.c **** #if !defined(WOLFSSL_SP_MATH)
1885:../src/wolfcrypt/src/dh.c ****             if (mp_exptmod(&key->g, privateKey, &key->p, checkKey) != MP_OKAY)
 2649                             		.loc 2 1885 28
 2650 016c ED A5 0D                		mov.L	52[r10], r5
 2651 016f 72 55 10 03             		add	#0x310, r5
 2652                             		.loc 2 1885 49
 2653 0173 ED A3 0D                		mov.L	52[r10], r3
 2654                             		.loc 2 1885 17
 2655 0176 ED A4 03                		mov.L	12[r10], r4
 2656 0179 ED A2 02                		mov.L	8[r10], r2
 2657 017c EF 51                   		mov.L	r5, r1
 2658 017e 05 00 00 00             		bsr	_sp_exptmod
 2659 0182 EF 15                   		mov.L	r1, r5
 2660                             		.loc 2 1885 16
 2661 0184 61 05                   		cmp	#0, r5
 2662 0186 14                      		beq	.L186
1886:../src/wolfcrypt/src/dh.c ****                 ret = MP_EXPTMOD_E;
 2663                             		.loc 2 1886 21
 2664 0187 F8 A6 90                		mov.L	#-112, [r10]
 2665                             	.L186:
1887:../src/wolfcrypt/src/dh.c **** #else
1888:../src/wolfcrypt/src/dh.c ****             ret = WC_KEY_SIZE_E;
1889:../src/wolfcrypt/src/dh.c **** #endif
1890:../src/wolfcrypt/src/dh.c ****         }
1891:../src/wolfcrypt/src/dh.c ****     }
1892:../src/wolfcrypt/src/dh.c **** 
1893:../src/wolfcrypt/src/dh.c ****     /* Compare the calculated public key to the supplied check value. */
1894:../src/wolfcrypt/src/dh.c ****     if (ret == 0) {
 2666                             		.loc 2 1894 8
 2667 018a EC A5                   		mov.L	[r10], r5
 2668 018c 61 05                   		cmp	#0, r5
 2669 018e 21 14                   		bne	.L187
1895:../src/wolfcrypt/src/dh.c ****         if (mp_cmp(checkKey, publicKey) != MP_EQ)
 2670                             		.loc 2 1895 13
 2671 0190 ED A2 01                		mov.L	4[r10], r2
 2672 0193 ED A1 03                		mov.L	12[r10], r1
 2673 0196 05 00 00 00             		bsr	_sp_cmp
 2674 019a EF 15                   		mov.L	r1, r5
 2675                             		.loc 2 1895 12
 2676 019c 61 05                   		cmp	#0, r5
 2677 019e 14                      		beq	.L187
1896:../src/wolfcrypt/src/dh.c ****             ret = MP_CMP_E;
 2678                             		.loc 2 1896 17
 2679 019f F8 A6 88                		mov.L	#-120, [r10]
 2680                             	.L187:
1897:../src/wolfcrypt/src/dh.c ****     }
1898:../src/wolfcrypt/src/dh.c **** 
1899:../src/wolfcrypt/src/dh.c ****     mp_forcezero(privateKey);
 2681                             		.loc 2 1899 5
 2682 01a2 ED A1 02                		mov.L	8[r10], r1
 2683 01a5 05 00 00 00             		bsr	_sp_forcezero
1900:../src/wolfcrypt/src/dh.c ****     mp_clear(publicKey);
 2684                             		.loc 2 1900 5
 2685 01a9 ED A1 01                		mov.L	4[r10], r1
 2686 01ac 05 00 00 00             		bsr	_sp_clear
1901:../src/wolfcrypt/src/dh.c ****     mp_clear(checkKey);
 2687                             		.loc 2 1901 5
 2688 01b0 ED A1 03                		mov.L	12[r10], r1
 2689 01b3 05 00 00 00             		bsr	_sp_clear
 2690                             	.LBB39:
1902:../src/wolfcrypt/src/dh.c **** 
1903:../src/wolfcrypt/src/dh.c ****     RESTORE_VECTOR_REGISTERS();
1904:../src/wolfcrypt/src/dh.c **** 
1905:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1906:../src/wolfcrypt/src/dh.c ****     XFREE(checkKey, key->heap, DYNAMIC_TYPE_DH);
 2691                             		.loc 2 1906 5
 2692 01b7 ED A5 03                		mov.L	12[r10], r5
 2693 01ba E7 A5 0A                		mov.L	r5, 40[r10]
 2694 01bd ED A5 0A                		mov.L	40[r10], r5
 2695 01c0 61 05                   		cmp	#0, r5
 2696 01c2 10                      		beq	.L188
 2697                             		.loc 2 1906 5 is_stmt 0 discriminator 1
 2698 01c3 ED A1 0A                		mov.L	40[r10], r1
 2699 01c6 05 00 00 00             		bsr	_wolfSSL_Free
 2700                             	.L188:
 2701                             	.LBE39:
 2702                             	.LBB40:
1907:../src/wolfcrypt/src/dh.c ****     XFREE(privateKey, key->heap, DYNAMIC_TYPE_DH);
 2703                             		.loc 2 1907 5 is_stmt 1
 2704 01ca ED A5 02                		mov.L	8[r10], r5
 2705 01cd E7 A5 0B                		mov.L	r5, 44[r10]
 2706 01d0 ED A5 0B                		mov.L	44[r10], r5
 2707 01d3 61 05                   		cmp	#0, r5
 2708 01d5 10                      		beq	.L189
 2709                             		.loc 2 1907 5 is_stmt 0 discriminator 1
 2710 01d6 ED A1 0B                		mov.L	44[r10], r1
 2711 01d9 05 00 00 00             		bsr	_wolfSSL_Free
 2712                             	.L189:
 2713                             	.LBE40:
 2714                             	.LBB41:
1908:../src/wolfcrypt/src/dh.c ****     XFREE(publicKey, key->heap, DYNAMIC_TYPE_DH);
 2715                             		.loc 2 1908 5 is_stmt 1
 2716 01dd ED A5 01                		mov.L	4[r10], r5
 2717 01e0 E7 A5 0C                		mov.L	r5, 48[r10]
 2718 01e3 ED A5 0C                		mov.L	48[r10], r5
 2719 01e6 61 05                   		cmp	#0, r5
 2720 01e8 10                      		beq	.L190
 2721                             		.loc 2 1908 5 is_stmt 0 discriminator 1
 2722 01e9 ED A1 0C                		mov.L	48[r10], r1
 2723 01ec 05 00 00 00             		bsr	_wolfSSL_Free
 2724                             	.L190:
 2725                             	.LBE41:
1909:../src/wolfcrypt/src/dh.c **** #elif defined(WOLFSSL_CHECK_MEM_ZERO)
1910:../src/wolfcrypt/src/dh.c ****     mp_memzero_check(privateKey);
1911:../src/wolfcrypt/src/dh.c **** #endif
1912:../src/wolfcrypt/src/dh.c **** 
1913:../src/wolfcrypt/src/dh.c ****     return ret;
 2726                             		.loc 2 1913 12 is_stmt 1
 2727 01f0 EC A5                   		mov.L	[r10], r5
 2728                             		.balign 8,3,1
 2729                             	.L170:
1914:../src/wolfcrypt/src/dh.c **** }
 2730                             		.loc 2 1914 1
 2731 01f2 EF 51                   		mov.L	r5, r1
 2732 01f4 71 00 50                		add	#0x50, r0
 2733 01f7 7E B6                   		pop	r6
 2734 01f9 7E BA                   		pop	r10
 2735 01fb 02                      		rts
 2736                             	.LFE58:
 2738 01fc 76 10 01 00             		.section	.text.wc_DhCheckKeyPair,"ax",@progbits
 2739                             		.global	_wc_DhCheckKeyPair
 2741                             	_wc_DhCheckKeyPair:
 2742                             	.LFB59:
1915:../src/wolfcrypt/src/dh.c **** 
1916:../src/wolfcrypt/src/dh.c **** 
1917:../src/wolfcrypt/src/dh.c **** /* Check DH Keys for pair-wise consistency per process in
1918:../src/wolfcrypt/src/dh.c ****  * SP 800-56Ar3, section 5.6.2.1.4, method (b) for FFC.
1919:../src/wolfcrypt/src/dh.c ****  *
1920:../src/wolfcrypt/src/dh.c ****  * key    DH key group parameters.
1921:../src/wolfcrypt/src/dh.c ****  * pub    Public Key.
1922:../src/wolfcrypt/src/dh.c ****  * pubSz  Public Key size.
1923:../src/wolfcrypt/src/dh.c ****  * priv   Private Key.
1924:../src/wolfcrypt/src/dh.c ****  * privSz Private Key size.
1925:../src/wolfcrypt/src/dh.c ****  *
1926:../src/wolfcrypt/src/dh.c ****  *  returns 0 on success or error code
1927:../src/wolfcrypt/src/dh.c ****  */
1928:../src/wolfcrypt/src/dh.c **** int wc_DhCheckKeyPair(DhKey* key, const byte* pub, word32 pubSz,
1929:../src/wolfcrypt/src/dh.c ****                       const byte* priv, word32 privSz)
1930:../src/wolfcrypt/src/dh.c **** {
 2743                             		.loc 2 1930 1
 2744 0000 7E AA                   		push.l	r10
 2745                             	.LCFI49:
 2746 0002 71 0A EC                		add	#-20, r0, r10
 2747                             	.LCFI50:
 2748 0005 71 A0 FC                		add	#-4, r10, r0
 2749                             	.LCFI51:
 2750 0008 75 45 1C                		mov.L	#28, r5
 2751 000b 4B A5                   		add	r10, r5
 2752 000d E3 A1                   		mov.L	r1, [r10]
 2753 000f E7 A2 01                		mov.L	r2, 4[r10]
 2754 0012 E7 A3 02                		mov.L	r3, 8[r10]
 2755 0015 E7 A4 03                		mov.L	r4, 12[r10]
1931:../src/wolfcrypt/src/dh.c ****     return _ffc_pairwise_consistency_test(key, pub, pubSz, priv, privSz);
 2756                             		.loc 2 1931 12
 2757 0018 EC 55                   		mov.L	[r5], r5
 2758 001a E3 05                   		mov.L	r5, [r0]
 2759 001c ED A4 03                		mov.L	12[r10], r4
 2760 001f ED A3 02                		mov.L	8[r10], r3
 2761 0022 ED A2 01                		mov.L	4[r10], r2
 2762 0025 EC A1                   		mov.L	[r10], r1
 2763 0027 05 00 00 00             		bsr	__ffc_pairwise_consistency_test
 2764 002b EF 15                   		mov.L	r1, r5
1932:../src/wolfcrypt/src/dh.c **** }
 2765                             		.loc 2 1932 1
 2766 002d EF 51                   		mov.L	r5, r1
 2767 002f 3F AA 07                		rtsd	#28, r10-r10
 2768                             	.LFE59:
 2770                             		.section	.text.wc_DhGenerateKeyPair,"ax",@progbits
 2771                             		.global	_wc_DhGenerateKeyPair
 2773                             	_wc_DhGenerateKeyPair:
 2774                             	.LFB60:
1933:../src/wolfcrypt/src/dh.c **** 
1934:../src/wolfcrypt/src/dh.c **** 
1935:../src/wolfcrypt/src/dh.c **** int wc_DhGenerateKeyPair(DhKey* key, WC_RNG* rng,
1936:../src/wolfcrypt/src/dh.c ****     byte* priv, word32* privSz, byte* pub, word32* pubSz)
1937:../src/wolfcrypt/src/dh.c **** {
 2775                             		.loc 2 1937 1
 2776 0000 7E AA                   		push.l	r10
 2777                             	.LCFI52:
 2778 0002 71 0A E4                		add	#-28, r0, r10
 2779                             	.LCFI53:
 2780 0005 71 A0 F8                		add	#-8, r10, r0
 2781                             	.LCFI54:
 2782 0008 75 45 24                		mov.L	#36, r5
 2783 000b 4B A5                   		add	r10, r5
 2784 000d E7 A1 01                		mov.L	r1, 4[r10]
 2785 0010 E7 A2 02                		mov.L	r2, 8[r10]
 2786 0013 E7 A3 03                		mov.L	r3, 12[r10]
 2787 0016 E7 A4 04                		mov.L	r4, 16[r10]
1938:../src/wolfcrypt/src/dh.c ****     int ret;
1939:../src/wolfcrypt/src/dh.c **** 
1940:../src/wolfcrypt/src/dh.c ****     if (key == NULL || rng == NULL || priv == NULL || privSz == NULL ||
 2788                             		.loc 2 1940 8
 2789 0019 ED A4 01                		mov.L	4[r10], r4
 2790 001c 61 04                   		cmp	#0, r4
 2791 001e 20 22                   		beq	.L194
 2792                             		.loc 2 1940 21 discriminator 1
 2793 0020 ED A4 02                		mov.L	8[r10], r4
 2794 0023 61 04                   		cmp	#0, r4
 2795 0025 20 1B                   		beq	.L194
 2796                             		.loc 2 1940 36 discriminator 2
 2797 0027 ED A4 03                		mov.L	12[r10], r4
 2798 002a 61 04                   		cmp	#0, r4
 2799 002c 20 14                   		beq	.L194
 2800                             		.loc 2 1940 52 discriminator 3
 2801 002e ED A4 04                		mov.L	16[r10], r4
 2802 0031 61 04                   		cmp	#0, r4
 2803 0033 20 0D                   		beq	.L194
 2804                             		.loc 2 1940 70 discriminator 4
 2805 0035 EC 54                   		mov.L	[r5], r4
 2806 0037 61 04                   		cmp	#0, r4
 2807 0039 17                      		beq	.L194
1941:../src/wolfcrypt/src/dh.c ****                                                 pub == NULL || pubSz == NULL) {
 2808                             		.loc 2 1941 61
 2809 003a A8 5C                   		mov.L	4[r5], r4
 2810 003c 61 04                   		cmp	#0, r4
 2811 003e 18                      		bne	.L195
 2812 003f 03                      		.balign 8,3,2
 2813                             	.L194:
1942:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
 2814                             		.loc 2 1942 16
 2815 0040 FB 5A 53 FF             		mov.L	#-173, r5
 2816 0044 2E 1E                   		bra	.L196
 2817                             	.L195:
1943:../src/wolfcrypt/src/dh.c ****     }
1944:../src/wolfcrypt/src/dh.c **** 
1945:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_KCAPI_DH
1946:../src/wolfcrypt/src/dh.c ****     (void)priv;
1947:../src/wolfcrypt/src/dh.c ****     (void)privSz;
1948:../src/wolfcrypt/src/dh.c ****     ret = KcapiDh_MakeKey(key, pub, pubSz);
1949:../src/wolfcrypt/src/dh.c **** #else
1950:../src/wolfcrypt/src/dh.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_DH)
1951:../src/wolfcrypt/src/dh.c ****     if (key->asyncDev.marker == WOLFSSL_ASYNC_MARKER_DH) {
1952:../src/wolfcrypt/src/dh.c ****         ret = wc_DhGenerateKeyPair_Async(key, rng, priv, privSz, pub, pubSz);
1953:../src/wolfcrypt/src/dh.c ****     }
1954:../src/wolfcrypt/src/dh.c ****     else
1955:../src/wolfcrypt/src/dh.c **** #endif
1956:../src/wolfcrypt/src/dh.c ****     {
1957:../src/wolfcrypt/src/dh.c ****         ret = wc_DhGenerateKeyPair_Sync(key, rng, priv, privSz, pub, pubSz);
 2818                             		.loc 2 1957 15
 2819 0046 A8 5C                   		mov.L	4[r5], r4
 2820 0048 A0 0C                   		mov.L	r4, 4[r0]
 2821 004a EC 55                   		mov.L	[r5], r5
 2822 004c E3 05                   		mov.L	r5, [r0]
 2823 004e ED A4 04                		mov.L	16[r10], r4
 2824 0051 ED A3 03                		mov.L	12[r10], r3
 2825 0054 ED A2 02                		mov.L	8[r10], r2
 2826 0057 ED A1 01                		mov.L	4[r10], r1
 2827 005a 05 00 00 00             		bsr	_wc_DhGenerateKeyPair_Sync
 2828 005e E3 A1                   		mov.L	r1, [r10]
1958:../src/wolfcrypt/src/dh.c ****     }
1959:../src/wolfcrypt/src/dh.c **** #endif /* WOLFSSL_KCAPI_DH */
1960:../src/wolfcrypt/src/dh.c **** 
1961:../src/wolfcrypt/src/dh.c ****     return ret;
 2829                             		.loc 2 1961 12
 2830 0060 EC A5                   		mov.L	[r10], r5
 2831                             	.L196:
1962:../src/wolfcrypt/src/dh.c **** }
 2832                             		.loc 2 1962 1
 2833 0062 EF 51                   		mov.L	r5, r1
 2834 0064 3F AA 0A                		rtsd	#40, r10-r10
 2835                             	.LFE60:
 2837 0067 03                      		.section	.text.wc_DhAgree_Sync,"ax",@progbits
 2839                             	_wc_DhAgree_Sync:
 2840                             	.LFB61:
1963:../src/wolfcrypt/src/dh.c **** 
1964:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_KCAPI_DH
1965:../src/wolfcrypt/src/dh.c **** static int wc_DhAgree_Sync(DhKey* key, byte* agree, word32* agreeSz,
1966:../src/wolfcrypt/src/dh.c ****     const byte* priv, word32 privSz, const byte* otherPub, word32 pubSz)
1967:../src/wolfcrypt/src/dh.c **** {
 2841                             		.loc 2 1967 1
 2842 0000 7E AA                   		push.l	r10
 2843                             	.LCFI55:
 2844 0002 7E A6                   		push.l	r6
 2845                             	.LCFI56:
 2846 0004 71 0A B0                		add	#-80, r0, r10
 2847                             	.LCFI57:
 2848 0007 71 A0 F8                		add	#-8, r10, r0
 2849                             	.LCFI58:
 2850 000a 75 46 5C                		mov.L	#0x5c, r6
 2851 000d 4B A6                   		add	r10, r6
 2852 000f E7 A1 0D                		mov.L	r1, 52[r10]
 2853 0012 E7 A2 0E                		mov.L	r2, 56[r10]
 2854 0015 E7 A3 0F                		mov.L	r3, 60[r10]
 2855 0018 E7 A4 10                		mov.L	r4, 64[r10]
1968:../src/wolfcrypt/src/dh.c ****     int ret = 0;
 2856                             		.loc 2 1968 9
 2857 001b F8 A6 00                		mov.L	#0, [r10]
1969:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1970:../src/wolfcrypt/src/dh.c ****     mp_int* y = NULL;
 2858                             		.loc 2 1970 13
 2859 001e F9 A6 01 00             		mov.L	#0, 4[r10]
1971:../src/wolfcrypt/src/dh.c **** #if !defined(WOLFSSL_SP_MATH)
1972:../src/wolfcrypt/src/dh.c ****     mp_int* x = NULL;
 2860                             		.loc 2 1972 13
 2861 0022 F9 A6 02 00             		mov.L	#0, 8[r10]
1973:../src/wolfcrypt/src/dh.c ****     mp_int* z = NULL;
 2862                             		.loc 2 1973 13
 2863 0026 F9 A6 03 00             		mov.L	#0, 12[r10]
1974:../src/wolfcrypt/src/dh.c **** #endif
1975:../src/wolfcrypt/src/dh.c **** #else
1976:../src/wolfcrypt/src/dh.c ****     mp_int y[1];
1977:../src/wolfcrypt/src/dh.c **** #if !defined(WOLFSSL_SP_MATH)
1978:../src/wolfcrypt/src/dh.c ****     mp_int x[1];
1979:../src/wolfcrypt/src/dh.c ****     mp_int z[1];
1980:../src/wolfcrypt/src/dh.c **** #endif
1981:../src/wolfcrypt/src/dh.c **** #endif
1982:../src/wolfcrypt/src/dh.c **** 
1983:../src/wolfcrypt/src/dh.c ****     if (mp_iseven(&key->p) == MP_YES) {
 2864                             		.loc 2 1983 9
 2865 002a ED A5 0D                		mov.L	52[r10], r5
 2866 002d EC 55                   		mov.L	[r5], r5
 2867 002f 61 05                   		cmp	#0, r5
 2868 0031 20 0F                   		beq	.L198
 2869                             		.loc 2 1983 9 is_stmt 0 discriminator 1
 2870 0033 ED A5 0D                		mov.L	52[r10], r5
 2871 0036 A8 D5                   		mov.L	8[r5], r5
 2872 0038 64 15                   		and	#1, r5
 2873 003a 61 05                   		cmp	#0, r5
 2874 003c 1C                      		bne	.L198
 2875                             		.loc 2 1983 9 discriminator 3
 2876 003d 66 15                   		mov.L	#1, r5
 2877 003f 0B                      		bra	.L199
 2878                             	.L198:
 2879                             		.loc 2 1983 9 discriminator 4
 2880 0040 66 05                   		mov.L	#0, r5
 2881                             	.L199:
 2882                             		.loc 2 1983 8 is_stmt 1 discriminator 6
 2883 0042 61 15                   		cmp	#1, r5
 2884 0044 1F                      		bne	.L200
1984:../src/wolfcrypt/src/dh.c ****         return MP_VAL;
 2885                             		.loc 2 1984 16
 2886 0045 FB 56 FD                		mov.L	#-3, r5
 2887 0048 38 C0 01                		bra	.L201
 2888                             	.L200:
1985:../src/wolfcrypt/src/dh.c ****     }
1986:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_VALIDATE_FFC_IMPORT
1987:../src/wolfcrypt/src/dh.c ****     if (wc_DhCheckPrivKey(key, priv, privSz) != 0) {
1988:../src/wolfcrypt/src/dh.c ****         WOLFSSL_MSG("wc_DhAgree wc_DhCheckPrivKey failed");
1989:../src/wolfcrypt/src/dh.c ****         return DH_CHECK_PRIV_E;
1990:../src/wolfcrypt/src/dh.c ****     }
1991:../src/wolfcrypt/src/dh.c **** 
1992:../src/wolfcrypt/src/dh.c ****     if (wc_DhCheckPubKey(key, otherPub, pubSz) != 0) {
1993:../src/wolfcrypt/src/dh.c ****         WOLFSSL_MSG("wc_DhAgree wc_DhCheckPubKey failed");
1994:../src/wolfcrypt/src/dh.c ****         return DH_CHECK_PUB_E;
1995:../src/wolfcrypt/src/dh.c ****     }
1996:../src/wolfcrypt/src/dh.c **** #endif
1997:../src/wolfcrypt/src/dh.c **** 
1998:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
1999:../src/wolfcrypt/src/dh.c ****     y = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 2889                             		.loc 2 1999 18
 2890 004b FB 1A 10 03             		mov.L	#0x310, r1
 2891 004f 05 00 00 00             		bsr	_wolfSSL_Malloc
 2892 0053 E7 A1 01                		mov.L	r1, 4[r10]
2000:../src/wolfcrypt/src/dh.c ****     if (y == NULL)
 2893                             		.loc 2 2000 8
 2894 0056 ED A5 01                		mov.L	4[r10], r5
 2895 0059 61 05                   		cmp	#0, r5
 2896 005b 1F                      		bne	.L202
2001:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 2897                             		.loc 2 2001 16
 2898 005c FB 56 83                		mov.L	#-125, r5
 2899 005f 38 A9 01                		bra	.L201
 2900                             	.L202:
2002:../src/wolfcrypt/src/dh.c **** #if !defined(WOLFSSL_SP_MATH)
2003:../src/wolfcrypt/src/dh.c ****     x = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 2901                             		.loc 2 2003 18
 2902 0062 FB 1A 10 03             		mov.L	#0x310, r1
 2903 0066 05 00 00 00             		bsr	_wolfSSL_Malloc
 2904 006a E7 A1 02                		mov.L	r1, 8[r10]
2004:../src/wolfcrypt/src/dh.c ****     if (x == NULL) {
 2905                             		.loc 2 2004 8
 2906 006d ED A5 02                		mov.L	8[r10], r5
 2907 0070 61 05                   		cmp	#0, r5
 2908 0072 21 1B                   		bne	.L203
 2909                             	.LBB42:
2005:../src/wolfcrypt/src/dh.c ****         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
 2910                             		.loc 2 2005 9
 2911 0074 ED A5 01                		mov.L	4[r10], r5
 2912 0077 E7 A5 04                		mov.L	r5, 16[r10]
 2913 007a ED A5 04                		mov.L	16[r10], r5
 2914 007d 61 05                   		cmp	#0, r5
 2915 007f 10                      		beq	.L204
 2916                             		.loc 2 2005 9 is_stmt 0 discriminator 1
 2917 0080 ED A1 04                		mov.L	16[r10], r1
 2918 0083 05 00 00 00             		bsr	_wolfSSL_Free
 2919                             	.L204:
 2920                             	.LBE42:
2006:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 2921                             		.loc 2 2006 16 is_stmt 1
 2922 0087 FB 56 83                		mov.L	#-125, r5
 2923 008a 38 7E 01                		bra	.L201
 2924                             	.L203:
2007:../src/wolfcrypt/src/dh.c ****     }
2008:../src/wolfcrypt/src/dh.c ****     z = (mp_int*)XMALLOC(sizeof(mp_int), key->heap, DYNAMIC_TYPE_DH);
 2925                             		.loc 2 2008 18
 2926 008d FB 1A 10 03             		mov.L	#0x310, r1
 2927 0091 05 00 00 00             		bsr	_wolfSSL_Malloc
 2928 0095 E7 A1 03                		mov.L	r1, 12[r10]
2009:../src/wolfcrypt/src/dh.c ****     if (z == NULL) {
 2929                             		.loc 2 2009 8
 2930 0098 ED A5 03                		mov.L	12[r10], r5
 2931 009b 61 05                   		cmp	#0, r5
 2932 009d 21 2E                   		bne	.L205
 2933                             	.LBB43:
2010:../src/wolfcrypt/src/dh.c ****         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
 2934                             		.loc 2 2010 9
 2935 009f ED A5 02                		mov.L	8[r10], r5
 2936 00a2 E7 A5 05                		mov.L	r5, 20[r10]
 2937 00a5 ED A5 05                		mov.L	20[r10], r5
 2938 00a8 61 05                   		cmp	#0, r5
 2939 00aa 10                      		beq	.L206
 2940                             		.loc 2 2010 9 is_stmt 0 discriminator 1
 2941 00ab ED A1 05                		mov.L	20[r10], r1
 2942 00ae 05 00 00 00             		bsr	_wolfSSL_Free
 2943                             	.L206:
 2944                             	.LBE43:
 2945                             	.LBB44:
2011:../src/wolfcrypt/src/dh.c ****         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
 2946                             		.loc 2 2011 9 is_stmt 1
 2947 00b2 ED A5 01                		mov.L	4[r10], r5
 2948 00b5 E7 A5 06                		mov.L	r5, 24[r10]
 2949 00b8 ED A5 06                		mov.L	24[r10], r5
 2950 00bb 61 05                   		cmp	#0, r5
 2951 00bd 10                      		beq	.L207
 2952                             		.loc 2 2011 9 is_stmt 0 discriminator 1
 2953 00be ED A1 06                		mov.L	24[r10], r1
 2954 00c1 05 00 00 00             		bsr	_wolfSSL_Free
 2955                             	.L207:
 2956                             	.LBE44:
2012:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
 2957                             		.loc 2 2012 16 is_stmt 1
 2958 00c5 FB 56 83                		mov.L	#-125, r5
 2959 00c8 38 40 01                		bra	.L201
 2960                             	.L205:
2013:../src/wolfcrypt/src/dh.c ****     }
2014:../src/wolfcrypt/src/dh.c **** #endif
2015:../src/wolfcrypt/src/dh.c **** #endif
2016:../src/wolfcrypt/src/dh.c **** 
2017:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_HAVE_SP_DH
2018:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_SP_NO_2048
2019:../src/wolfcrypt/src/dh.c ****     if (mp_count_bits(&key->p) == 2048) {
2020:../src/wolfcrypt/src/dh.c ****         if (mp_init(y) != MP_OKAY)
2021:../src/wolfcrypt/src/dh.c ****             return MP_INIT_E;
2022:../src/wolfcrypt/src/dh.c **** 
2023:../src/wolfcrypt/src/dh.c ****         SAVE_VECTOR_REGISTERS(ret = _svr_ret;);
2024:../src/wolfcrypt/src/dh.c **** 
2025:../src/wolfcrypt/src/dh.c ****         if (ret == 0 && mp_read_unsigned_bin(y, otherPub, pubSz) != MP_OKAY)
2026:../src/wolfcrypt/src/dh.c ****             ret = MP_READ_E;
2027:../src/wolfcrypt/src/dh.c **** 
2028:../src/wolfcrypt/src/dh.c ****         if (ret == 0)
2029:../src/wolfcrypt/src/dh.c ****             ret = sp_DhExp_2048(y, priv, privSz, &key->p, agree, agreeSz);
2030:../src/wolfcrypt/src/dh.c **** 
2031:../src/wolfcrypt/src/dh.c ****         mp_clear(y);
2032:../src/wolfcrypt/src/dh.c **** 
2033:../src/wolfcrypt/src/dh.c ****         RESTORE_VECTOR_REGISTERS();
2034:../src/wolfcrypt/src/dh.c **** 
2035:../src/wolfcrypt/src/dh.c ****     #ifdef WOLFSSL_SMALL_STACK
2036:../src/wolfcrypt/src/dh.c ****     #if !defined(WOLFSSL_SP_MATH)
2037:../src/wolfcrypt/src/dh.c ****         XFREE(z, key->heap, DYNAMIC_TYPE_DH);
2038:../src/wolfcrypt/src/dh.c ****         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
2039:../src/wolfcrypt/src/dh.c ****     #endif
2040:../src/wolfcrypt/src/dh.c ****         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
2041:../src/wolfcrypt/src/dh.c ****     #endif
2042:../src/wolfcrypt/src/dh.c ****         return ret;
2043:../src/wolfcrypt/src/dh.c ****     }
2044:../src/wolfcrypt/src/dh.c **** #endif
2045:../src/wolfcrypt/src/dh.c **** #ifndef WOLFSSL_SP_NO_3072
2046:../src/wolfcrypt/src/dh.c ****     if (mp_count_bits(&key->p) == 3072) {
2047:../src/wolfcrypt/src/dh.c ****         if (mp_init(y) != MP_OKAY)
2048:../src/wolfcrypt/src/dh.c ****             return MP_INIT_E;
2049:../src/wolfcrypt/src/dh.c **** 
2050:../src/wolfcrypt/src/dh.c ****         SAVE_VECTOR_REGISTERS(ret = _svr_ret;);
2051:../src/wolfcrypt/src/dh.c **** 
2052:../src/wolfcrypt/src/dh.c ****         if (ret == 0 && mp_read_unsigned_bin(y, otherPub, pubSz) != MP_OKAY)
2053:../src/wolfcrypt/src/dh.c ****             ret = MP_READ_E;
2054:../src/wolfcrypt/src/dh.c **** 
2055:../src/wolfcrypt/src/dh.c ****         if (ret == 0)
2056:../src/wolfcrypt/src/dh.c ****             ret = sp_DhExp_3072(y, priv, privSz, &key->p, agree, agreeSz);
2057:../src/wolfcrypt/src/dh.c **** 
2058:../src/wolfcrypt/src/dh.c ****         mp_clear(y);
2059:../src/wolfcrypt/src/dh.c **** 
2060:../src/wolfcrypt/src/dh.c ****         RESTORE_VECTOR_REGISTERS();
2061:../src/wolfcrypt/src/dh.c **** 
2062:../src/wolfcrypt/src/dh.c ****     #ifdef WOLFSSL_SMALL_STACK
2063:../src/wolfcrypt/src/dh.c ****     #if !defined(WOLFSSL_SP_MATH)
2064:../src/wolfcrypt/src/dh.c ****         XFREE(z, key->heap, DYNAMIC_TYPE_DH);
2065:../src/wolfcrypt/src/dh.c ****         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
2066:../src/wolfcrypt/src/dh.c ****     #endif
2067:../src/wolfcrypt/src/dh.c ****         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
2068:../src/wolfcrypt/src/dh.c ****     #endif
2069:../src/wolfcrypt/src/dh.c ****         return ret;
2070:../src/wolfcrypt/src/dh.c ****     }
2071:../src/wolfcrypt/src/dh.c **** #endif
2072:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SP_4096
2073:../src/wolfcrypt/src/dh.c ****     if (mp_count_bits(&key->p) == 4096) {
2074:../src/wolfcrypt/src/dh.c ****         if (mp_init(y) != MP_OKAY)
2075:../src/wolfcrypt/src/dh.c ****             return MP_INIT_E;
2076:../src/wolfcrypt/src/dh.c **** 
2077:../src/wolfcrypt/src/dh.c ****         SAVE_VECTOR_REGISTERS(ret = _svr_ret;);
2078:../src/wolfcrypt/src/dh.c **** 
2079:../src/wolfcrypt/src/dh.c ****         if (ret == 0 && mp_read_unsigned_bin(y, otherPub, pubSz) != MP_OKAY)
2080:../src/wolfcrypt/src/dh.c ****             ret = MP_READ_E;
2081:../src/wolfcrypt/src/dh.c **** 
2082:../src/wolfcrypt/src/dh.c ****         if (ret == 0)
2083:../src/wolfcrypt/src/dh.c ****             ret = sp_DhExp_4096(y, priv, privSz, &key->p, agree, agreeSz);
2084:../src/wolfcrypt/src/dh.c **** 
2085:../src/wolfcrypt/src/dh.c ****         mp_clear(y);
2086:../src/wolfcrypt/src/dh.c **** 
2087:../src/wolfcrypt/src/dh.c ****         RESTORE_VECTOR_REGISTERS();
2088:../src/wolfcrypt/src/dh.c **** 
2089:../src/wolfcrypt/src/dh.c ****     #ifdef WOLFSSL_SMALL_STACK
2090:../src/wolfcrypt/src/dh.c ****     #if !defined(WOLFSSL_SP_MATH)
2091:../src/wolfcrypt/src/dh.c ****         XFREE(z, key->heap, DYNAMIC_TYPE_DH);
2092:../src/wolfcrypt/src/dh.c ****         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
2093:../src/wolfcrypt/src/dh.c ****     #endif
2094:../src/wolfcrypt/src/dh.c ****         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
2095:../src/wolfcrypt/src/dh.c ****     #endif
2096:../src/wolfcrypt/src/dh.c ****         return ret;
2097:../src/wolfcrypt/src/dh.c ****     }
2098:../src/wolfcrypt/src/dh.c **** #endif
2099:../src/wolfcrypt/src/dh.c **** #endif
2100:../src/wolfcrypt/src/dh.c **** 
2101:../src/wolfcrypt/src/dh.c **** #if !defined(WOLFSSL_SP_MATH)
2102:../src/wolfcrypt/src/dh.c ****     if (mp_init_multi(x, y, z, 0, 0, 0) != MP_OKAY) {
 2961                             		.loc 2 2102 9
 2962 00cb 3E 01 00                		mov.L	#0, 4[r0]
 2963 00ce F8 06 00                		mov.L	#0, [r0]
 2964 00d1 66 04                   		mov.L	#0, r4
 2965 00d3 ED A3 03                		mov.L	12[r10], r3
 2966 00d6 ED A2 01                		mov.L	4[r10], r2
 2967 00d9 ED A1 02                		mov.L	8[r10], r1
 2968 00dc 05 00 00 00             		bsr	_sp_init_multi
 2969 00e0 EF 15                   		mov.L	r1, r5
 2970                             		.loc 2 2102 8
 2971 00e2 61 05                   		cmp	#0, r5
 2972 00e4 20 41                   		beq	.L208
 2973                             	.LBB45:
2103:../src/wolfcrypt/src/dh.c ****     #ifdef WOLFSSL_SMALL_STACK
2104:../src/wolfcrypt/src/dh.c ****         XFREE(z, key->heap, DYNAMIC_TYPE_DH);
 2974                             		.loc 2 2104 9
 2975 00e6 ED A5 03                		mov.L	12[r10], r5
 2976 00e9 E7 A5 07                		mov.L	r5, 28[r10]
 2977 00ec ED A5 07                		mov.L	28[r10], r5
 2978 00ef 61 05                   		cmp	#0, r5
 2979 00f1 10                      		beq	.L209
 2980                             		.loc 2 2104 9 is_stmt 0 discriminator 1
 2981 00f2 ED A1 07                		mov.L	28[r10], r1
 2982 00f5 05 00 00 00             		bsr	_wolfSSL_Free
 2983                             	.L209:
 2984                             	.LBE45:
 2985                             	.LBB46:
2105:../src/wolfcrypt/src/dh.c ****         XFREE(x, key->heap, DYNAMIC_TYPE_DH);
 2986                             		.loc 2 2105 9 is_stmt 1
 2987 00f9 ED A5 02                		mov.L	8[r10], r5
 2988 00fc E7 A5 08                		mov.L	r5, 32[r10]
 2989 00ff ED A5 08                		mov.L	32[r10], r5
 2990 0102 61 05                   		cmp	#0, r5
 2991 0104 10                      		beq	.L210
 2992                             		.loc 2 2105 9 is_stmt 0 discriminator 1
 2993 0105 ED A1 08                		mov.L	32[r10], r1
 2994 0108 05 00 00 00             		bsr	_wolfSSL_Free
 2995                             	.L210:
 2996                             	.LBE46:
 2997                             	.LBB47:
2106:../src/wolfcrypt/src/dh.c ****         XFREE(y, key->heap, DYNAMIC_TYPE_DH);
 2998                             		.loc 2 2106 9 is_stmt 1
 2999 010c ED A5 01                		mov.L	4[r10], r5
 3000 010f E7 A5 09                		mov.L	r5, 36[r10]
 3001 0112 ED A5 09                		mov.L	36[r10], r5
 3002 0115 61 05                   		cmp	#0, r5
 3003 0117 10                      		beq	.L211
 3004                             		.loc 2 2106 9 is_stmt 0 discriminator 1
 3005 0118 ED A1 09                		mov.L	36[r10], r1
 3006 011b 05 00 00 00             		bsr	_wolfSSL_Free
 3007                             	.L211:
 3008                             	.LBE47:
2107:../src/wolfcrypt/src/dh.c ****     #endif
2108:../src/wolfcrypt/src/dh.c ****         return MP_INIT_E;
 3009                             		.loc 2 2108 16 is_stmt 1
 3010 011f FB 56 92                		mov.L	#-110, r5
 3011 0122 38 E6 00                		bra	.L201
 3012                             	.L208:
2109:../src/wolfcrypt/src/dh.c ****     }
2110:../src/wolfcrypt/src/dh.c **** 
2111:../src/wolfcrypt/src/dh.c ****     SAVE_VECTOR_REGISTERS(ret = _svr_ret;);
2112:../src/wolfcrypt/src/dh.c **** 
2113:../src/wolfcrypt/src/dh.c ****     if (mp_read_unsigned_bin(x, priv, privSz) != MP_OKAY)
 3013                             		.loc 2 2113 9
 3014 0125 EC 63                   		mov.L	[r6], r3
 3015 0127 ED A2 10                		mov.L	64[r10], r2
 3016 012a ED A1 02                		mov.L	8[r10], r1
 3017 012d 05 00 00 00             		bsr	_sp_read_unsigned_bin
 3018 0131 EF 15                   		mov.L	r1, r5
 3019                             		.loc 2 2113 8
 3020 0133 61 05                   		cmp	#0, r5
 3021 0135 14                      		beq	.L212
2114:../src/wolfcrypt/src/dh.c ****         ret = MP_READ_E;
 3022                             		.loc 2 2114 13
 3023 0136 F8 A6 91                		mov.L	#-111, [r10]
 3024                             	.L212:
2115:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
2116:../src/wolfcrypt/src/dh.c ****     if (ret == 0)
2117:../src/wolfcrypt/src/dh.c ****         mp_memzero_add("wc_DhAgree_Sync x", x);
2118:../src/wolfcrypt/src/dh.c **** #endif
2119:../src/wolfcrypt/src/dh.c **** 
2120:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && mp_read_unsigned_bin(y, otherPub, pubSz) != MP_OKAY)
 3025                             		.loc 2 2120 8
 3026 0139 EC A5                   		mov.L	[r10], r5
 3027 013b 61 05                   		cmp	#0, r5
 3028 013d 21 15                   		bne	.L213
 3029                             		.loc 2 2120 21 discriminator 1
 3030 013f A8 E3                   		mov.L	8[r6], r3
 3031 0141 A8 6A                   		mov.L	4[r6], r2
 3032 0143 ED A1 01                		mov.L	4[r10], r1
 3033 0146 05 00 00 00             		bsr	_sp_read_unsigned_bin
 3034 014a EF 15                   		mov.L	r1, r5
 3035                             		.loc 2 2120 18 discriminator 1
 3036 014c 61 05                   		cmp	#0, r5
 3037 014e 14                      		beq	.L213
2121:../src/wolfcrypt/src/dh.c ****         ret = MP_READ_E;
 3038                             		.loc 2 2121 13
 3039 014f F8 A6 91                		mov.L	#-111, [r10]
 3040                             	.L213:
2122:../src/wolfcrypt/src/dh.c **** 
2123:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && mp_exptmod(y, x, &key->p, z) != MP_OKAY)
 3041                             		.loc 2 2123 8
 3042 0152 EC A5                   		mov.L	[r10], r5
 3043 0154 61 05                   		cmp	#0, r5
 3044 0156 21 1C                   		bne	.L214
 3045                             		.loc 2 2123 38 discriminator 1
 3046 0158 ED A5 0D                		mov.L	52[r10], r5
 3047                             		.loc 2 2123 21 discriminator 1
 3048 015b ED A4 03                		mov.L	12[r10], r4
 3049 015e EF 53                   		mov.L	r5, r3
 3050 0160 ED A2 02                		mov.L	8[r10], r2
 3051 0163 ED A1 01                		mov.L	4[r10], r1
 3052 0166 05 00 00 00             		bsr	_sp_exptmod
 3053 016a EF 15                   		mov.L	r1, r5
 3054                             		.loc 2 2123 18 discriminator 1
 3055 016c 61 05                   		cmp	#0, r5
 3056 016e 14                      		beq	.L214
2124:../src/wolfcrypt/src/dh.c ****         ret = MP_EXPTMOD_E;
 3057                             		.loc 2 2124 13
 3058 016f F8 A6 90                		mov.L	#-112, [r10]
 3059                             	.L214:
2125:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
2126:../src/wolfcrypt/src/dh.c ****     if (ret == 0)
2127:../src/wolfcrypt/src/dh.c ****         mp_memzero_add("wc_DhAgree_Sync z", z);
2128:../src/wolfcrypt/src/dh.c **** #endif
2129:../src/wolfcrypt/src/dh.c **** 
2130:../src/wolfcrypt/src/dh.c ****     /* make sure z is not one (SP800-56A, 5.7.1.1) */
2131:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && (mp_cmp_d(z, 1) == MP_EQ))
 3060                             		.loc 2 2131 8
 3061 0172 EC A5                   		mov.L	[r10], r5
 3062 0174 61 05                   		cmp	#0, r5
 3063 0176 21 13                   		bne	.L215
 3064                             		.loc 2 2131 22 discriminator 1
 3065 0178 66 12                   		mov.L	#1, r2
 3066 017a ED A1 03                		mov.L	12[r10], r1
 3067 017d 05 00 00 00             		bsr	_sp_cmp_d
 3068 0181 EF 15                   		mov.L	r1, r5
 3069                             		.loc 2 2131 18 discriminator 1
 3070 0183 61 05                   		cmp	#0, r5
 3071 0185 1C                      		bne	.L215
2132:../src/wolfcrypt/src/dh.c ****         ret = MP_VAL;
 3072                             		.loc 2 2132 13
 3073 0186 F8 A6 FD                		mov.L	#-3, [r10]
 3074                             	.L215:
2133:../src/wolfcrypt/src/dh.c **** 
2134:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && mp_to_unsigned_bin(z, agree) != MP_OKAY)
 3075                             		.loc 2 2134 8
 3076 0189 EC A5                   		mov.L	[r10], r5
 3077 018b 61 05                   		cmp	#0, r5
 3078 018d 21 14                   		bne	.L216
 3079                             		.loc 2 2134 21 discriminator 1
 3080 018f ED A2 0E                		mov.L	56[r10], r2
 3081 0192 ED A1 03                		mov.L	12[r10], r1
 3082 0195 05 00 00 00             		bsr	_sp_to_unsigned_bin
 3083 0199 EF 15                   		mov.L	r1, r5
 3084                             		.loc 2 2134 18 discriminator 1
 3085 019b 61 05                   		cmp	#0, r5
 3086 019d 14                      		beq	.L216
2135:../src/wolfcrypt/src/dh.c ****         ret = MP_TO_E;
 3087                             		.loc 2 2135 13
 3088 019e F8 A6 8F                		mov.L	#-113, [r10]
 3089                             	.L216:
2136:../src/wolfcrypt/src/dh.c **** 
2137:../src/wolfcrypt/src/dh.c ****     if (ret == 0)
 3090                             		.loc 2 2137 8
 3091 01a1 EC A5                   		mov.L	[r10], r5
 3092 01a3 61 05                   		cmp	#0, r5
 3093 01a5 21 12                   		bne	.L217
2138:../src/wolfcrypt/src/dh.c ****         *agreeSz = mp_unsigned_bin_size(z);
 3094                             		.loc 2 2138 20
 3095 01a7 ED A1 03                		mov.L	12[r10], r1
 3096 01aa 05 00 00 00             		bsr	_sp_unsigned_bin_size
 3097 01ae EF 15                   		mov.L	r1, r5
 3098 01b0 EF 54                   		mov.L	r5, r4
 3099                             		.loc 2 2138 18
 3100 01b2 ED A5 0F                		mov.L	60[r10], r5
 3101 01b5 E3 54                   		mov.L	r4, [r5]
 3102                             	.L217:
2139:../src/wolfcrypt/src/dh.c **** 
2140:../src/wolfcrypt/src/dh.c ****     mp_forcezero(z);
 3103                             		.loc 2 2140 5
 3104 01b7 ED A1 03                		mov.L	12[r10], r1
 3105 01ba 05 00 00 00             		bsr	_sp_forcezero
2141:../src/wolfcrypt/src/dh.c ****     mp_clear(y);
 3106                             		.loc 2 2141 5
 3107 01be ED A1 01                		mov.L	4[r10], r1
 3108 01c1 05 00 00 00             		bsr	_sp_clear
2142:../src/wolfcrypt/src/dh.c ****     mp_forcezero(x);
 3109                             		.loc 2 2142 5
 3110 01c5 ED A1 02                		mov.L	8[r10], r1
 3111 01c8 05 00 00 00             		bsr	_sp_forcezero
 3112                             	.LBB48:
2143:../src/wolfcrypt/src/dh.c **** 
2144:../src/wolfcrypt/src/dh.c ****     RESTORE_VECTOR_REGISTERS();
2145:../src/wolfcrypt/src/dh.c **** 
2146:../src/wolfcrypt/src/dh.c **** #else
2147:../src/wolfcrypt/src/dh.c ****     ret = WC_KEY_SIZE_E;
2148:../src/wolfcrypt/src/dh.c **** #endif
2149:../src/wolfcrypt/src/dh.c **** 
2150:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_SMALL_STACK
2151:../src/wolfcrypt/src/dh.c **** #if !defined(WOLFSSL_SP_MATH)
2152:../src/wolfcrypt/src/dh.c ****     XFREE(z, key->heap, DYNAMIC_TYPE_DH);
 3113                             		.loc 2 2152 5
 3114 01cc ED A5 03                		mov.L	12[r10], r5
 3115 01cf E7 A5 0A                		mov.L	r5, 40[r10]
 3116 01d2 ED A5 0A                		mov.L	40[r10], r5
 3117 01d5 61 05                   		cmp	#0, r5
 3118 01d7 10                      		beq	.L218
 3119                             		.loc 2 2152 5 is_stmt 0 discriminator 1
 3120 01d8 ED A1 0A                		mov.L	40[r10], r1
 3121 01db 05 00 00 00             		bsr	_wolfSSL_Free
 3122                             	.L218:
 3123                             	.LBE48:
 3124                             	.LBB49:
2153:../src/wolfcrypt/src/dh.c ****     XFREE(x, key->heap, DYNAMIC_TYPE_DH);
 3125                             		.loc 2 2153 5 is_stmt 1
 3126 01df ED A5 02                		mov.L	8[r10], r5
 3127 01e2 E7 A5 0B                		mov.L	r5, 44[r10]
 3128 01e5 ED A5 0B                		mov.L	44[r10], r5
 3129 01e8 61 05                   		cmp	#0, r5
 3130 01ea 10                      		beq	.L219
 3131                             		.loc 2 2153 5 is_stmt 0 discriminator 1
 3132 01eb ED A1 0B                		mov.L	44[r10], r1
 3133 01ee 05 00 00 00             		bsr	_wolfSSL_Free
 3134                             	.L219:
 3135                             	.LBE49:
 3136                             	.LBB50:
2154:../src/wolfcrypt/src/dh.c **** #endif
2155:../src/wolfcrypt/src/dh.c ****     XFREE(y, key->heap, DYNAMIC_TYPE_DH);
 3137                             		.loc 2 2155 5 is_stmt 1
 3138 01f2 ED A5 01                		mov.L	4[r10], r5
 3139 01f5 E7 A5 0C                		mov.L	r5, 48[r10]
 3140 01f8 ED A5 0C                		mov.L	48[r10], r5
 3141 01fb 61 05                   		cmp	#0, r5
 3142 01fd 10                      		beq	.L220
 3143                             		.loc 2 2155 5 is_stmt 0 discriminator 1
 3144 01fe ED A1 0C                		mov.L	48[r10], r1
 3145 0201 05 00 00 00             		bsr	_wolfSSL_Free
 3146                             	.L220:
 3147                             	.LBE50:
2156:../src/wolfcrypt/src/dh.c **** #elif defined(WOLFSSL_CHECK_MEM_ZERO)
2157:../src/wolfcrypt/src/dh.c ****     mp_memzero_check(x);
2158:../src/wolfcrypt/src/dh.c ****     mp_memzero_check(z);
2159:../src/wolfcrypt/src/dh.c **** #endif
2160:../src/wolfcrypt/src/dh.c **** 
2161:../src/wolfcrypt/src/dh.c ****     return ret;
 3148                             		.loc 2 2161 12 is_stmt 1
 3149 0205 EC A5                   		mov.L	[r10], r5
 3150 0207 03                      		.balign 8,3,1
 3151                             	.L201:
2162:../src/wolfcrypt/src/dh.c **** }
 3152                             		.loc 2 2162 1
 3153 0208 EF 51                   		mov.L	r5, r1
 3154 020a 71 00 58                		add	#0x58, r0
 3155 020d 7E B6                   		pop	r6
 3156 020f 7E BA                   		pop	r10
 3157 0211 02                      		rts
 3158                             	.LFE61:
 3160 0212 74 10 01 00 00 00       		.section	.text.wc_DhAgree,"ax",@progbits
 3161                             		.global	_wc_DhAgree
 3163                             	_wc_DhAgree:
 3164                             	.LFB62:
2163:../src/wolfcrypt/src/dh.c **** 
2164:../src/wolfcrypt/src/dh.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_DH)
2165:../src/wolfcrypt/src/dh.c **** static int wc_DhAgree_Async(DhKey* key, byte* agree, word32* agreeSz,
2166:../src/wolfcrypt/src/dh.c ****     const byte* priv, word32 privSz, const byte* otherPub, word32 pubSz)
2167:../src/wolfcrypt/src/dh.c **** {
2168:../src/wolfcrypt/src/dh.c ****     int ret;
2169:../src/wolfcrypt/src/dh.c **** 
2170:../src/wolfcrypt/src/dh.c **** #if defined(HAVE_INTEL_QA)
2171:../src/wolfcrypt/src/dh.c ****     word32 pBits;
2172:../src/wolfcrypt/src/dh.c **** 
2173:../src/wolfcrypt/src/dh.c ****     /* QAT DH sizes: 768, 1024, 1536, 2048, 3072 and 4096 bits */
2174:../src/wolfcrypt/src/dh.c ****     pBits = mp_unsigned_bin_size(&key->p) * 8;
2175:../src/wolfcrypt/src/dh.c ****     if (pBits == 768 ||  pBits == 1024 || pBits == 1536 ||
2176:../src/wolfcrypt/src/dh.c ****         pBits == 2048 || pBits == 3072 || pBits == 4096) {
2177:../src/wolfcrypt/src/dh.c ****         ret = wc_mp_to_bigint(&key->p, &key->p.raw);
2178:../src/wolfcrypt/src/dh.c ****         if (ret == MP_OKAY)
2179:../src/wolfcrypt/src/dh.c ****             ret = IntelQaDhAgree(&key->asyncDev, &key->p.raw,
2180:../src/wolfcrypt/src/dh.c ****                 agree, agreeSz, priv, privSz, otherPub, pubSz);
2181:../src/wolfcrypt/src/dh.c ****         return ret;
2182:../src/wolfcrypt/src/dh.c ****     }
2183:../src/wolfcrypt/src/dh.c **** 
2184:../src/wolfcrypt/src/dh.c **** #elif defined(HAVE_CAVIUM)
2185:../src/wolfcrypt/src/dh.c ****     /* TODO: Not implemented - use software for now */
2186:../src/wolfcrypt/src/dh.c **** 
2187:../src/wolfcrypt/src/dh.c **** #else /* WOLFSSL_ASYNC_CRYPT_TEST */
2188:../src/wolfcrypt/src/dh.c ****     if (wc_AsyncTestInit(&key->asyncDev, ASYNC_TEST_DH_AGREE)) {
2189:../src/wolfcrypt/src/dh.c ****         WC_ASYNC_TEST* testDev = &key->asyncDev.test;
2190:../src/wolfcrypt/src/dh.c ****         testDev->dhAgree.key = key;
2191:../src/wolfcrypt/src/dh.c ****         testDev->dhAgree.agree = agree;
2192:../src/wolfcrypt/src/dh.c ****         testDev->dhAgree.agreeSz = agreeSz;
2193:../src/wolfcrypt/src/dh.c ****         testDev->dhAgree.priv = priv;
2194:../src/wolfcrypt/src/dh.c ****         testDev->dhAgree.privSz = privSz;
2195:../src/wolfcrypt/src/dh.c ****         testDev->dhAgree.otherPub = otherPub;
2196:../src/wolfcrypt/src/dh.c ****         testDev->dhAgree.pubSz = pubSz;
2197:../src/wolfcrypt/src/dh.c ****         return WC_PENDING_E;
2198:../src/wolfcrypt/src/dh.c ****     }
2199:../src/wolfcrypt/src/dh.c **** #endif
2200:../src/wolfcrypt/src/dh.c **** 
2201:../src/wolfcrypt/src/dh.c ****     /* otherwise use software DH */
2202:../src/wolfcrypt/src/dh.c ****     ret = wc_DhAgree_Sync(key, agree, agreeSz, priv, privSz, otherPub, pubSz);
2203:../src/wolfcrypt/src/dh.c **** 
2204:../src/wolfcrypt/src/dh.c ****     return ret;
2205:../src/wolfcrypt/src/dh.c **** }
2206:../src/wolfcrypt/src/dh.c **** #endif /* WOLFSSL_ASYNC_CRYPT */
2207:../src/wolfcrypt/src/dh.c **** #endif /* !WOLFSSL_KCAPI_DH */
2208:../src/wolfcrypt/src/dh.c **** 
2209:../src/wolfcrypt/src/dh.c **** int wc_DhAgree(DhKey* key, byte* agree, word32* agreeSz, const byte* priv,
2210:../src/wolfcrypt/src/dh.c ****             word32 privSz, const byte* otherPub, word32 pubSz)
2211:../src/wolfcrypt/src/dh.c **** {
 3165                             		.loc 2 2211 1
 3166 0000 7E AA                   		push.l	r10
 3167                             	.LCFI59:
 3168 0002 71 0A E0                		add	#-32, r0, r10
 3169                             	.LCFI60:
 3170 0005 71 A0 F4                		add	#-12, r10, r0
 3171                             	.LCFI61:
 3172 0008 75 45 28                		mov.L	#40, r5
 3173 000b 4B A5                   		add	r10, r5
 3174 000d E7 A1 01                		mov.L	r1, 4[r10]
 3175 0010 E7 A2 02                		mov.L	r2, 8[r10]
 3176 0013 E7 A3 03                		mov.L	r3, 12[r10]
 3177 0016 E7 A4 04                		mov.L	r4, 16[r10]
2212:../src/wolfcrypt/src/dh.c ****     int ret = 0;
 3178                             		.loc 2 2212 9
 3179 0019 F8 A6 00                		mov.L	#0, [r10]
2213:../src/wolfcrypt/src/dh.c **** 
2214:../src/wolfcrypt/src/dh.c ****     if (key == NULL || agree == NULL || agreeSz == NULL || priv == NULL ||
 3180                             		.loc 2 2214 8
 3181 001c ED A4 01                		mov.L	4[r10], r4
 3182 001f 61 04                   		cmp	#0, r4
 3183 0021 20 1B                   		beq	.L222
 3184                             		.loc 2 2214 21 discriminator 1
 3185 0023 ED A4 02                		mov.L	8[r10], r4
 3186 0026 61 04                   		cmp	#0, r4
 3187 0028 20 14                   		beq	.L222
 3188                             		.loc 2 2214 38 discriminator 2
 3189 002a ED A4 03                		mov.L	12[r10], r4
 3190 002d 61 04                   		cmp	#0, r4
 3191 002f 20 0D                   		beq	.L222
 3192                             		.loc 2 2214 57 discriminator 3
 3193 0031 ED A4 04                		mov.L	16[r10], r4
 3194 0034 61 04                   		cmp	#0, r4
 3195 0036 16                      		beq	.L222
 3196                             		.loc 2 2214 73 discriminator 4
 3197 0037 A8 5C                   		mov.L	4[r5], r4
 3198 0039 61 04                   		cmp	#0, r4
 3199 003b 1F                      		bne	.L223
 3200                             		.balign 8,3,2
 3201                             	.L222:
2215:../src/wolfcrypt/src/dh.c ****                                                             otherPub == NULL) {
2216:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
 3202                             		.loc 2 2216 16
 3203 003c FB 5A 53 FF             		mov.L	#-173, r5
 3204 0040 2E 22                   		bra	.L224
 3205                             	.L223:
2217:../src/wolfcrypt/src/dh.c ****     }
2218:../src/wolfcrypt/src/dh.c **** 
2219:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_KCAPI_DH
2220:../src/wolfcrypt/src/dh.c ****     (void)priv;
2221:../src/wolfcrypt/src/dh.c ****     (void)privSz;
2222:../src/wolfcrypt/src/dh.c ****     ret = KcapiDh_SharedSecret(key, otherPub, pubSz, agree, agreeSz);
2223:../src/wolfcrypt/src/dh.c **** #else
2224:../src/wolfcrypt/src/dh.c **** #if defined(WOLFSSL_ASYNC_CRYPT) && defined(WC_ASYNC_ENABLE_DH)
2225:../src/wolfcrypt/src/dh.c ****     if (key->asyncDev.marker == WOLFSSL_ASYNC_MARKER_DH) {
2226:../src/wolfcrypt/src/dh.c ****         ret = wc_DhAgree_Async(key, agree, agreeSz, priv, privSz, otherPub, pubSz);
2227:../src/wolfcrypt/src/dh.c ****     }
2228:../src/wolfcrypt/src/dh.c ****     else
2229:../src/wolfcrypt/src/dh.c **** #endif
2230:../src/wolfcrypt/src/dh.c ****     {
2231:../src/wolfcrypt/src/dh.c ****         ret = wc_DhAgree_Sync(key, agree, agreeSz, priv, privSz, otherPub, pubSz);
 3206                             		.loc 2 2231 15
 3207 0042 A8 D4                   		mov.L	8[r5], r4
 3208 0044 A0 84                   		mov.L	r4, 8[r0]
 3209 0046 A8 5C                   		mov.L	4[r5], r4
 3210 0048 A0 0C                   		mov.L	r4, 4[r0]
 3211 004a EC 55                   		mov.L	[r5], r5
 3212 004c E3 05                   		mov.L	r5, [r0]
 3213 004e ED A4 04                		mov.L	16[r10], r4
 3214 0051 ED A3 03                		mov.L	12[r10], r3
 3215 0054 ED A2 02                		mov.L	8[r10], r2
 3216 0057 ED A1 01                		mov.L	4[r10], r1
 3217 005a 05 00 00 00             		bsr	_wc_DhAgree_Sync
 3218 005e E3 A1                   		mov.L	r1, [r10]
2232:../src/wolfcrypt/src/dh.c ****     }
2233:../src/wolfcrypt/src/dh.c **** #endif /* WOLFSSL_KCAPI_DH */
2234:../src/wolfcrypt/src/dh.c **** 
2235:../src/wolfcrypt/src/dh.c ****     return ret;
 3219                             		.loc 2 2235 12
 3220 0060 EC A5                   		mov.L	[r10], r5
 3221                             	.L224:
2236:../src/wolfcrypt/src/dh.c **** }
 3222                             		.loc 2 2236 1
 3223 0062 EF 51                   		mov.L	r5, r1
 3224 0064 3F AA 0C                		rtsd	#48, r10-r10
 3225                             	.LFE62:
 3227 0067 03                      		.section	.text._DhSetKey,"ax",@progbits
 3229                             	__DhSetKey:
 3230                             	.LFB63:
2237:../src/wolfcrypt/src/dh.c **** 
2238:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_DH_EXTRA
2239:../src/wolfcrypt/src/dh.c **** WOLFSSL_LOCAL int wc_DhKeyCopy(DhKey* src, DhKey* dst)
2240:../src/wolfcrypt/src/dh.c **** {
2241:../src/wolfcrypt/src/dh.c ****     int ret;
2242:../src/wolfcrypt/src/dh.c **** 
2243:../src/wolfcrypt/src/dh.c ****     if (!src || !dst || src == dst) {
2244:../src/wolfcrypt/src/dh.c ****         WOLFSSL_MSG("Parameters not provided or are the same");
2245:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
2246:../src/wolfcrypt/src/dh.c ****     }
2247:../src/wolfcrypt/src/dh.c **** 
2248:../src/wolfcrypt/src/dh.c ****     if ((ret = mp_copy(&src->p, &dst->p)) != MP_OKAY) {
2249:../src/wolfcrypt/src/dh.c ****         WOLFSSL_MSG("mp_copy error");
2250:../src/wolfcrypt/src/dh.c ****         return ret;
2251:../src/wolfcrypt/src/dh.c ****     }
2252:../src/wolfcrypt/src/dh.c **** 
2253:../src/wolfcrypt/src/dh.c ****     if ((ret = mp_copy(&src->g, &dst->g)) != MP_OKAY) {
2254:../src/wolfcrypt/src/dh.c ****         WOLFSSL_MSG("mp_copy error");
2255:../src/wolfcrypt/src/dh.c ****         return ret;
2256:../src/wolfcrypt/src/dh.c ****     }
2257:../src/wolfcrypt/src/dh.c **** 
2258:../src/wolfcrypt/src/dh.c ****     if ((ret = mp_copy(&src->q, &dst->q)) != MP_OKAY) {
2259:../src/wolfcrypt/src/dh.c ****         WOLFSSL_MSG("mp_copy error");
2260:../src/wolfcrypt/src/dh.c ****         return ret;
2261:../src/wolfcrypt/src/dh.c ****     }
2262:../src/wolfcrypt/src/dh.c **** 
2263:../src/wolfcrypt/src/dh.c ****     if ((ret = mp_copy(&src->pub, &dst->pub)) != MP_OKAY) {
2264:../src/wolfcrypt/src/dh.c ****         WOLFSSL_MSG("mp_copy error");
2265:../src/wolfcrypt/src/dh.c ****         return ret;
2266:../src/wolfcrypt/src/dh.c ****     }
2267:../src/wolfcrypt/src/dh.c **** 
2268:../src/wolfcrypt/src/dh.c ****     if ((ret = mp_copy(&src->priv, &dst->priv)) != MP_OKAY) {
2269:../src/wolfcrypt/src/dh.c ****         WOLFSSL_MSG("mp_copy error");
2270:../src/wolfcrypt/src/dh.c ****         return ret;
2271:../src/wolfcrypt/src/dh.c ****     }
2272:../src/wolfcrypt/src/dh.c **** #ifdef WOLFSSL_CHECK_MEM_ZERO
2273:../src/wolfcrypt/src/dh.c ****     mp_memzero_add("wc_DhKeyCopy dst->priv", &dst->priv);
2274:../src/wolfcrypt/src/dh.c **** #endif
2275:../src/wolfcrypt/src/dh.c **** 
2276:../src/wolfcrypt/src/dh.c ****     dst->heap = src->heap;
2277:../src/wolfcrypt/src/dh.c **** 
2278:../src/wolfcrypt/src/dh.c ****     return MP_OKAY;
2279:../src/wolfcrypt/src/dh.c **** }
2280:../src/wolfcrypt/src/dh.c **** 
2281:../src/wolfcrypt/src/dh.c **** /* Sets private and public key in DhKey if both are available, otherwise sets
2282:../src/wolfcrypt/src/dh.c ****     either private or public key, depending on which is available. */
2283:../src/wolfcrypt/src/dh.c **** int wc_DhImportKeyPair(DhKey* key, const byte* priv, word32 privSz,
2284:../src/wolfcrypt/src/dh.c ****                        const byte* pub, word32 pubSz)
2285:../src/wolfcrypt/src/dh.c **** {
2286:../src/wolfcrypt/src/dh.c ****     byte havePriv, havePub;
2287:../src/wolfcrypt/src/dh.c **** 
2288:../src/wolfcrypt/src/dh.c ****     if (key == NULL) {
2289:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
2290:../src/wolfcrypt/src/dh.c ****     }
2291:../src/wolfcrypt/src/dh.c **** 
2292:../src/wolfcrypt/src/dh.c ****     havePriv = ( (priv != NULL) && (privSz > 0) );
2293:../src/wolfcrypt/src/dh.c ****     havePub  = ( (pub  != NULL) && (pubSz  > 0) );
2294:../src/wolfcrypt/src/dh.c **** 
2295:../src/wolfcrypt/src/dh.c ****     if (!havePub && !havePriv) {
2296:../src/wolfcrypt/src/dh.c ****         WOLFSSL_MSG("No Public or Private Key to Set");
2297:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
2298:../src/wolfcrypt/src/dh.c ****     }
2299:../src/wolfcrypt/src/dh.c **** 
2300:../src/wolfcrypt/src/dh.c ****     /* Set Private Key */
2301:../src/wolfcrypt/src/dh.c ****     if (havePriv) {
2302:../src/wolfcrypt/src/dh.c ****         /* may have leading 0 */
2303:../src/wolfcrypt/src/dh.c ****         if (priv[0] == 0) {
2304:../src/wolfcrypt/src/dh.c ****             privSz--; priv++;
2305:../src/wolfcrypt/src/dh.c ****         }
2306:../src/wolfcrypt/src/dh.c ****         if (mp_init(&key->priv) != MP_OKAY)
2307:../src/wolfcrypt/src/dh.c ****             havePriv = 0;
2308:../src/wolfcrypt/src/dh.c ****     }
2309:../src/wolfcrypt/src/dh.c ****     if (havePriv) {
2310:../src/wolfcrypt/src/dh.c ****         if (mp_read_unsigned_bin(&key->priv, priv, privSz) != MP_OKAY) {
2311:../src/wolfcrypt/src/dh.c ****             mp_clear(&key->priv);
2312:../src/wolfcrypt/src/dh.c ****             havePriv = 0;
2313:../src/wolfcrypt/src/dh.c ****         } else {
2314:../src/wolfcrypt/src/dh.c ****             WOLFSSL_MSG("DH Private Key Set");
2315:../src/wolfcrypt/src/dh.c ****         #ifdef WOLFSSL_CHECK_MEM_ZERO
2316:../src/wolfcrypt/src/dh.c ****             mp_memzero_add("wc_DhImportKeyPair key->priv", &key->priv);
2317:../src/wolfcrypt/src/dh.c ****         #endif
2318:../src/wolfcrypt/src/dh.c ****         }
2319:../src/wolfcrypt/src/dh.c ****     }
2320:../src/wolfcrypt/src/dh.c **** 
2321:../src/wolfcrypt/src/dh.c ****     /* Set Public Key */
2322:../src/wolfcrypt/src/dh.c ****     if (havePub) {
2323:../src/wolfcrypt/src/dh.c ****         /* may have leading 0 */
2324:../src/wolfcrypt/src/dh.c ****         if (pub[0] == 0) {
2325:../src/wolfcrypt/src/dh.c ****             pubSz--; pub++;
2326:../src/wolfcrypt/src/dh.c ****         }
2327:../src/wolfcrypt/src/dh.c ****         if (mp_init(&key->pub) != MP_OKAY)
2328:../src/wolfcrypt/src/dh.c ****             havePub = 0;
2329:../src/wolfcrypt/src/dh.c ****     }
2330:../src/wolfcrypt/src/dh.c ****     if (havePub) {
2331:../src/wolfcrypt/src/dh.c ****         if (mp_read_unsigned_bin(&key->pub, pub, pubSz) != MP_OKAY) {
2332:../src/wolfcrypt/src/dh.c ****             mp_clear(&key->pub);
2333:../src/wolfcrypt/src/dh.c ****             havePub = 0;
2334:../src/wolfcrypt/src/dh.c ****             if (havePriv) {
2335:../src/wolfcrypt/src/dh.c ****                 mp_forcezero(&key->priv);
2336:../src/wolfcrypt/src/dh.c ****                 havePriv = 0; /* set to 0 to error out with failed read pub */
2337:../src/wolfcrypt/src/dh.c ****             }
2338:../src/wolfcrypt/src/dh.c ****         } else {
2339:../src/wolfcrypt/src/dh.c ****             WOLFSSL_MSG("DH Public Key Set");
2340:../src/wolfcrypt/src/dh.c ****         }
2341:../src/wolfcrypt/src/dh.c ****     }
2342:../src/wolfcrypt/src/dh.c **** 
2343:../src/wolfcrypt/src/dh.c ****     if (havePriv == 0 && havePub == 0) {
2344:../src/wolfcrypt/src/dh.c ****         return MEMORY_E;
2345:../src/wolfcrypt/src/dh.c ****     }
2346:../src/wolfcrypt/src/dh.c **** 
2347:../src/wolfcrypt/src/dh.c ****     return 0;
2348:../src/wolfcrypt/src/dh.c **** }
2349:../src/wolfcrypt/src/dh.c **** 
2350:../src/wolfcrypt/src/dh.c **** /* Can be used with WOLFSSL_DH_EXTRA when key is loaded with
2351:../src/wolfcrypt/src/dh.c ****     wc_DhKeyDecode or wc_DhImportKeyPair */
2352:../src/wolfcrypt/src/dh.c **** int wc_DhExportKeyPair(DhKey* key, byte* priv, word32* pPrivSz,
2353:../src/wolfcrypt/src/dh.c ****     byte* pub, word32* pPubSz)
2354:../src/wolfcrypt/src/dh.c **** {
2355:../src/wolfcrypt/src/dh.c ****     int ret = 0;
2356:../src/wolfcrypt/src/dh.c ****     word32 pubSz, privSz;
2357:../src/wolfcrypt/src/dh.c **** 
2358:../src/wolfcrypt/src/dh.c ****     if (key == NULL || (priv && pPrivSz == NULL) || (pub && pPubSz == NULL)) {
2359:../src/wolfcrypt/src/dh.c ****         return BAD_FUNC_ARG;
2360:../src/wolfcrypt/src/dh.c ****     }
2361:../src/wolfcrypt/src/dh.c **** 
2362:../src/wolfcrypt/src/dh.c ****     if (priv) {
2363:../src/wolfcrypt/src/dh.c ****         privSz = mp_unsigned_bin_size(&key->priv);
2364:../src/wolfcrypt/src/dh.c ****         if (privSz > *pPrivSz) {
2365:../src/wolfcrypt/src/dh.c ****             return BUFFER_E;
2366:../src/wolfcrypt/src/dh.c ****         }
2367:../src/wolfcrypt/src/dh.c ****         *pPrivSz = privSz;
2368:../src/wolfcrypt/src/dh.c ****         ret |= mp_to_unsigned_bin(&key->priv, priv);
2369:../src/wolfcrypt/src/dh.c ****     }
2370:../src/wolfcrypt/src/dh.c **** 
2371:../src/wolfcrypt/src/dh.c ****     if (pub) {
2372:../src/wolfcrypt/src/dh.c ****         pubSz = mp_unsigned_bin_size(&key->pub);
2373:../src/wolfcrypt/src/dh.c ****         if (pubSz > *pPubSz) {
2374:../src/wolfcrypt/src/dh.c ****             return BUFFER_E;
2375:../src/wolfcrypt/src/dh.c ****         }
2376:../src/wolfcrypt/src/dh.c ****         *pPubSz = pubSz;
2377:../src/wolfcrypt/src/dh.c ****         ret |= mp_to_unsigned_bin(&key->pub,  pub);
2378:../src/wolfcrypt/src/dh.c ****     }
2379:../src/wolfcrypt/src/dh.c **** 
2380:../src/wolfcrypt/src/dh.c ****     if (ret != 0)
2381:../src/wolfcrypt/src/dh.c ****         ret = ASN_DH_KEY_E;
2382:../src/wolfcrypt/src/dh.c ****     return ret;
2383:../src/wolfcrypt/src/dh.c **** }
2384:../src/wolfcrypt/src/dh.c **** 
2385:../src/wolfcrypt/src/dh.c **** #endif /* WOLFSSL_DH_EXTRA */
2386:../src/wolfcrypt/src/dh.c **** 
2387:../src/wolfcrypt/src/dh.c **** static int _DhSetKey(DhKey* key, const byte* p, word32 pSz, const byte* g,
2388:../src/wolfcrypt/src/dh.c ****                    word32 gSz, const byte* q, word32 qSz, int trusted,
2389:../src/wolfcrypt/src/dh.c ****                    WC_RNG* rng)
2390:../src/wolfcrypt/src/dh.c **** {
 3231                             		.loc 2 2390 1
 3232 0000 7E AA                   		push.l	r10
 3233                             	.LCFI62:
 3234 0002 7E A6                   		push.l	r6
 3235                             	.LCFI63:
 3236 0004 71 0A CC                		add	#-52, r0, r10
 3237                             	.LCFI64:
 3238 0007 EF A0                   		mov.L	r10, r0
 3239 0009 75 46 40                		mov.L	#0x40, r6
 3240 000c 4B A6                   		add	r10, r6
 3241 000e E7 A1 04                		mov.L	r1, 16[r10]
 3242 0011 E7 A2 05                		mov.L	r2, 20[r10]
 3243 0014 E7 A3 06                		mov.L	r3, 24[r10]
 3244 0017 E7 A4 07                		mov.L	r4, 28[r10]
2391:../src/wolfcrypt/src/dh.c ****     int ret = 0;
 3245                             		.loc 2 2391 9
 3246 001a F8 A6 00                		mov.L	#0, [r10]
2392:../src/wolfcrypt/src/dh.c ****     mp_int* keyP = NULL;
 3247                             		.loc 2 2392 13
 3248 001d F9 A6 01 00             		mov.L	#0, 4[r10]
2393:../src/wolfcrypt/src/dh.c ****     mp_int* keyG = NULL;
 3249                             		.loc 2 2393 13
 3250 0021 F9 A6 02 00             		mov.L	#0, 8[r10]
2394:../src/wolfcrypt/src/dh.c **** 
2395:../src/wolfcrypt/src/dh.c ****     if (key == NULL || p == NULL || g == NULL || pSz == 0 || gSz == 0) {
 3251                             		.loc 2 2395 8
 3252 0025 ED A5 04                		mov.L	16[r10], r5
 3253 0028 61 05                   		cmp	#0, r5
 3254 002a 20 1E                   		beq	.L226
 3255                             		.loc 2 2395 21 discriminator 1
 3256 002c ED A5 05                		mov.L	20[r10], r5
 3257 002f 61 05                   		cmp	#0, r5
 3258 0031 20 17                   		beq	.L226
 3259                             		.loc 2 2395 34 discriminator 2
 3260 0033 ED A5 07                		mov.L	28[r10], r5
 3261 0036 61 05                   		cmp	#0, r5
 3262 0038 20 10                   		beq	.L226
 3263                             		.loc 2 2395 47 discriminator 3
 3264 003a ED A5 06                		mov.L	24[r10], r5
 3265 003d 61 05                   		cmp	#0, r5
 3266 003f 11                      		beq	.L226
 3267                             		.loc 2 2395 59 discriminator 4
 3268 0040 EC 65                   		mov.L	[r6], r5
 3269 0042 61 05                   		cmp	#0, r5
 3270 0044 18                      		bne	.L227
 3271 0045 FC 13 00                		.balign 8,3,4
 3272                             	.L226:
2396:../src/wolfcrypt/src/dh.c ****         ret = BAD_FUNC_ARG;
 3273                             		.loc 2 2396 13
 3274 0048 F8 AA 53 FF             		mov.L	#-173, [r10]
 3275                             	.L227:
2397:../src/wolfcrypt/src/dh.c ****     }
2398:../src/wolfcrypt/src/dh.c **** 
2399:../src/wolfcrypt/src/dh.c ****     SAVE_VECTOR_REGISTERS(return _svr_ret;);
2400:../src/wolfcrypt/src/dh.c **** 
2401:../src/wolfcrypt/src/dh.c ****     if (ret == 0) {
 3276                             		.loc 2 2401 8
 3277 004c EC A5                   		mov.L	[r10], r5
 3278 004e 61 05                   		cmp	#0, r5
 3279 0050 21 63                   		bne	.L228
2402:../src/wolfcrypt/src/dh.c ****         /* may have leading 0 */
2403:../src/wolfcrypt/src/dh.c ****         if (p[0] == 0) {
 3280                             		.loc 2 2403 14
 3281 0052 ED A5 05                		mov.L	20[r10], r5
 3282 0055 CC 55                   		mov.B	[r5], r5
 3283                             		.loc 2 2403 12
 3284 0057 5B 55                   		movu.B	r5, r5
 3285 0059 61 05                   		cmp	#0, r5
 3286 005b 21 12                   		bne	.L229
2404:../src/wolfcrypt/src/dh.c ****             pSz--; p++;
 3287                             		.loc 2 2404 16
 3288 005d ED A5 06                		mov.L	24[r10], r5
 3289 0060 60 15                   		sub	#1, r5
 3290 0062 E7 A5 06                		mov.L	r5, 24[r10]
 3291                             		.loc 2 2404 21
 3292 0065 ED A5 05                		mov.L	20[r10], r5
 3293 0068 62 15                   		add	#1, r5
 3294 006a E7 A5 05                		mov.L	r5, 20[r10]
 3295                             	.L229:
2405:../src/wolfcrypt/src/dh.c ****         }
2406:../src/wolfcrypt/src/dh.c **** 
2407:../src/wolfcrypt/src/dh.c ****         if (g[0] == 0) {
 3296                             		.loc 2 2407 14
 3297 006d ED A5 07                		mov.L	28[r10], r5
 3298 0070 CC 55                   		mov.B	[r5], r5
 3299                             		.loc 2 2407 12
 3300 0072 5B 55                   		movu.B	r5, r5
 3301 0074 61 05                   		cmp	#0, r5
 3302 0076 21 10                   		bne	.L230
2408:../src/wolfcrypt/src/dh.c ****             gSz--; g++;
 3303                             		.loc 2 2408 16
 3304 0078 EC 65                   		mov.L	[r6], r5
 3305 007a 60 15                   		sub	#1, r5
 3306 007c E3 65                   		mov.L	r5, [r6]
 3307                             		.loc 2 2408 21
 3308 007e ED A5 07                		mov.L	28[r10], r5
 3309 0081 62 15                   		add	#1, r5
 3310 0083 E7 A5 07                		mov.L	r5, 28[r10]
 3311                             	.L230:
2409:../src/wolfcrypt/src/dh.c ****         }
2410:../src/wolfcrypt/src/dh.c **** 
2411:../src/wolfcrypt/src/dh.c ****         if (q != NULL) {
 3312                             		.loc 2 2411 12
 3313 0086 A8 6D                   		mov.L	4[r6], r5
 3314 0088 61 05                   		cmp	#0, r5
 3315 008a 20 18                   		beq	.L231
2412:../src/wolfcrypt/src/dh.c ****             if (q[0] == 0) {
 3316                             		.loc 2 2412 18
 3317 008c A8 6D                   		mov.L	4[r6], r5
 3318 008e CC 55                   		mov.B	[r5], r5
 3319                             		.loc 2 2412 16
 3320 0090 5B 55                   		movu.B	r5, r5
 3321 0092 61 05                   		cmp	#0, r5
 3322 0094 21 0E                   		bne	.L231
2413:../src/wolfcrypt/src/dh.c ****                 qSz--; q++;
 3323                             		.loc 2 2413 20
 3324 0096 A8 E5                   		mov.L	8[r6], r5
 3325 0098 60 15                   		sub	#1, r5
 3326 009a A0 E5                   		mov.L	r5, 8[r6]
 3327                             		.loc 2 2413 25
 3328 009c A8 6D                   		mov.L	4[r6], r5
 3329 009e 62 15                   		add	#1, r5
 3330 00a0 A0 6D                   		mov.L	r5, 4[r6]
 3331                             	.L231:
2414:../src/wolfcrypt/src/dh.c ****             }
2415:../src/wolfcrypt/src/dh.c ****         }
2416:../src/wolfcrypt/src/dh.c **** 
2417:../src/wolfcrypt/src/dh.c ****         if (mp_init(&key->p) != MP_OKAY)
 3332                             		.loc 2 2417 21
 3333 00a2 ED A5 04                		mov.L	16[r10], r5
 3334                             		.loc 2 2417 13
 3335 00a5 EF 51                   		mov.L	r5, r1
 3336 00a7 05 00 00 00             		bsr	_sp_init
 3337 00ab EF 15                   		mov.L	r1, r5
 3338                             		.loc 2 2417 12
 3339 00ad 61 05                   		cmp	#0, r5
 3340 00af 14                      		beq	.L228
2418:../src/wolfcrypt/src/dh.c ****             ret = MP_INIT_E;
 3341                             		.loc 2 2418 17
 3342 00b0 F8 A6 92                		mov.L	#-110, [r10]
 3343                             	.L228:
2419:../src/wolfcrypt/src/dh.c ****     }
2420:../src/wolfcrypt/src/dh.c **** 
2421:../src/wolfcrypt/src/dh.c ****     if (ret == 0) {
 3344                             		.loc 2 2421 8
 3345 00b3 EC A5                   		mov.L	[r10], r5
 3346 00b5 61 05                   		cmp	#0, r5
 3347 00b7 21 21                   		bne	.L232
2422:../src/wolfcrypt/src/dh.c ****         if (mp_read_unsigned_bin(&key->p, p, pSz) != MP_OKAY)
 3348                             		.loc 2 2422 34
 3349 00b9 ED A5 04                		mov.L	16[r10], r5
 3350                             		.loc 2 2422 13
 3351 00bc ED A3 06                		mov.L	24[r10], r3
 3352 00bf ED A2 05                		mov.L	20[r10], r2
 3353 00c2 EF 51                   		mov.L	r5, r1
 3354 00c4 05 00 00 00             		bsr	_sp_read_unsigned_bin
 3355 00c8 EF 15                   		mov.L	r1, r5
 3356                             		.loc 2 2422 12
 3357 00ca 61 05                   		cmp	#0, r5
 3358 00cc 16                      		beq	.L233
2423:../src/wolfcrypt/src/dh.c ****             ret = ASN_DH_KEY_E;
 3359                             		.loc 2 2423 17
 3360 00cd F8 AA 62 FF             		mov.L	#-158, [r10]
 3361 00d1 0F                      		bra	.L232
 3362                             	.L233:
2424:../src/wolfcrypt/src/dh.c ****         else
2425:../src/wolfcrypt/src/dh.c ****             keyP = &key->p;
 3363                             		.loc 2 2425 18
 3364 00d2 ED A5 04                		mov.L	16[r10], r5
 3365 00d5 E7 A5 01                		mov.L	r5, 4[r10]
 3366                             	.L232:
2426:../src/wolfcrypt/src/dh.c ****     }
2427:../src/wolfcrypt/src/dh.c **** 
2428:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && !trusted) {
 3367                             		.loc 2 2428 8
 3368 00d8 EC A5                   		mov.L	[r10], r5
 3369 00da 61 05                   		cmp	#0, r5
 3370 00dc 21 46                   		bne	.L234
 3371                             		.loc 2 2428 18 discriminator 1
 3372 00de A8 ED                   		mov.L	12[r6], r5
 3373 00e0 61 05                   		cmp	#0, r5
 3374 00e2 21 40                   		bne	.L234
 3375                             	.LBB51:
2429:../src/wolfcrypt/src/dh.c ****         int isPrime = 0;
 3376                             		.loc 2 2429 13
 3377 00e4 F9 A6 03 00             		mov.L	#0, 12[r10]
2430:../src/wolfcrypt/src/dh.c ****         if (rng != NULL)
 3378                             		.loc 2 2430 12
 3379 00e8 A9 65                   		mov.L	16[r6], r5
 3380 00ea 61 05                   		cmp	#0, r5
 3381 00ec 20 16                   		beq	.L235
2431:../src/wolfcrypt/src/dh.c ****             ret = mp_prime_is_prime_ex(keyP, 8, &isPrime, rng);
 3382                             		.loc 2 2431 19
 3383 00ee 71 A5 0C                		add	#12, r10, r5
 3384 00f1 A9 64                   		mov.L	16[r6], r4
 3385 00f3 EF 53                   		mov.L	r5, r3
 3386 00f5 66 82                   		mov.L	#8, r2
 3387 00f7 ED A1 01                		mov.L	4[r10], r1
 3388 00fa 05 00 00 00             		bsr	_sp_prime_is_prime_ex
 3389 00fe E3 A1                   		mov.L	r1, [r10]
 3390 0100 2E 12                   		bra	.L236
 3391                             	.L235:
2432:../src/wolfcrypt/src/dh.c ****         else
2433:../src/wolfcrypt/src/dh.c ****             ret = mp_prime_is_prime(keyP, 8, &isPrime);
 3392                             		.loc 2 2433 19
 3393 0102 71 A5 0C                		add	#12, r10, r5
 3394 0105 EF 53                   		mov.L	r5, r3
 3395 0107 66 82                   		mov.L	#8, r2
 3396 0109 ED A1 01                		mov.L	4[r10], r1
 3397 010c 05 00 00 00             		bsr	_sp_prime_is_prime
 3398 0110 E3 A1                   		mov.L	r1, [r10]
 3399                             	.L236:
2434:../src/wolfcrypt/src/dh.c **** 
2435:../src/wolfcrypt/src/dh.c ****         if (ret == 0 && isPrime == 0)
 3400                             		.loc 2 2435 12
 3401 0112 EC A5                   		mov.L	[r10], r5
 3402 0114 61 05                   		cmp	#0, r5
 3403 0116 21 0C                   		bne	.L234
 3404                             		.loc 2 2435 33 discriminator 1
 3405 0118 ED A5 03                		mov.L	12[r10], r5
 3406                             		.loc 2 2435 22 discriminator 1
 3407 011b 61 05                   		cmp	#0, r5
 3408 011d 1D                      		bne	.L234
2436:../src/wolfcrypt/src/dh.c ****             ret = DH_CHECK_PUB_E;
 3409                             		.loc 2 2436 17
 3410 011e F8 AA 0D FF             		mov.L	#-243, [r10]
 3411                             		.balign 8,3,1
 3412                             	.L234:
 3413                             	.LBE51:
2437:../src/wolfcrypt/src/dh.c ****     }
2438:../src/wolfcrypt/src/dh.c **** 
2439:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && mp_init(&key->g) != MP_OKAY)
 3414                             		.loc 2 2439 8
 3415 0122 EC A5                   		mov.L	[r10], r5
 3416 0124 61 05                   		cmp	#0, r5
 3417 0126 21 17                   		bne	.L238
 3418                             		.loc 2 2439 29 discriminator 1
 3419 0128 ED A5 04                		mov.L	16[r10], r5
 3420 012b 72 55 10 03             		add	#0x310, r5
 3421                             		.loc 2 2439 21 discriminator 1
 3422 012f EF 51                   		mov.L	r5, r1
 3423 0131 05 00 00 00             		bsr	_sp_init
 3424 0135 EF 15                   		mov.L	r1, r5
 3425                             		.loc 2 2439 18 discriminator 1
 3426 0137 61 05                   		cmp	#0, r5
 3427 0139 14                      		beq	.L238
2440:../src/wolfcrypt/src/dh.c ****         ret = MP_INIT_E;
 3428                             		.loc 2 2440 13
 3429 013a F8 A6 92                		mov.L	#-110, [r10]
 3430                             	.L238:
2441:../src/wolfcrypt/src/dh.c ****     if (ret == 0) {
 3431                             		.loc 2 2441 8
 3432 013d EC A5                   		mov.L	[r10], r5
 3433 013f 61 05                   		cmp	#0, r5
 3434 0141 21 29                   		bne	.L239
2442:../src/wolfcrypt/src/dh.c ****         if (mp_read_unsigned_bin(&key->g, g, gSz) != MP_OKAY)
 3435                             		.loc 2 2442 34
 3436 0143 ED A5 04                		mov.L	16[r10], r5
 3437 0146 72 55 10 03             		add	#0x310, r5
 3438                             		.loc 2 2442 13
 3439 014a EC 63                   		mov.L	[r6], r3
 3440 014c ED A2 07                		mov.L	28[r10], r2
 3441 014f EF 51                   		mov.L	r5, r1
 3442 0151 05 00 00 00             		bsr	_sp_read_unsigned_bin
 3443 0155 EF 15                   		mov.L	r1, r5
 3444                             		.loc 2 2442 12
 3445 0157 61 05                   		cmp	#0, r5
 3446 0159 17                      		beq	.L240
2443:../src/wolfcrypt/src/dh.c ****             ret = ASN_DH_KEY_E;
 3447                             		.loc 2 2443 17
 3448 015a F8 AA 62 FF             		mov.L	#-158, [r10]
 3449 015e 2E 0C                   		bra	.L239
 3450                             	.L240:
2444:../src/wolfcrypt/src/dh.c ****         else
2445:../src/wolfcrypt/src/dh.c ****             keyG = &key->g;
 3451                             		.loc 2 2445 18
 3452 0160 ED A5 04                		mov.L	16[r10], r5
 3453 0163 72 55 10 03             		add	#0x310, r5
 3454 0167 E7 A5 02                		mov.L	r5, 8[r10]
 3455                             	.L239:
2446:../src/wolfcrypt/src/dh.c ****     }
2447:../src/wolfcrypt/src/dh.c **** 
2448:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && q != NULL) {
 3456                             		.loc 2 2448 8
 3457 016a EC A5                   		mov.L	[r10], r5
 3458 016c 61 05                   		cmp	#0, r5
 3459 016e 21 1D                   		bne	.L241
 3460                             		.loc 2 2448 18 discriminator 1
 3461 0170 A8 6D                   		mov.L	4[r6], r5
 3462 0172 61 05                   		cmp	#0, r5
 3463 0174 20 17                   		beq	.L241
2449:../src/wolfcrypt/src/dh.c ****         if (mp_init(&key->q) != MP_OKAY)
 3464                             		.loc 2 2449 21
 3465 0176 ED A5 04                		mov.L	16[r10], r5
 3466 0179 72 55 20 06             		add	#0x620, r5
 3467                             		.loc 2 2449 13
 3468 017d EF 51                   		mov.L	r5, r1
 3469 017f 05 00 00 00             		bsr	_sp_init
 3470 0183 EF 15                   		mov.L	r1, r5
 3471                             		.loc 2 2449 12
 3472 0185 61 05                   		cmp	#0, r5
 3473 0187 14                      		beq	.L241
2450:../src/wolfcrypt/src/dh.c ****             ret = MP_INIT_E;
 3474                             		.loc 2 2450 17
 3475 0188 F8 A6 92                		mov.L	#-110, [r10]
 3476                             		.balign 8,3,1
 3477                             	.L241:
2451:../src/wolfcrypt/src/dh.c ****     }
2452:../src/wolfcrypt/src/dh.c ****     if (ret == 0 && q != NULL) {
 3478                             		.loc 2 2452 8
 3479 018b EC A5                   		mov.L	[r10], r5
 3480 018d 61 05                   		cmp	#0, r5
 3481 018f 21 2B                   		bne	.L242
 3482                             		.loc 2 2452 18 discriminator 1
 3483 0191 A8 6D                   		mov.L	4[r6], r5
 3484 0193 61 05                   		cmp	#0, r5
 3485 0195 20 25                   		beq	.L242
2453:../src/wolfcrypt/src/dh.c ****         if (mp_read_unsigned_bin(&key->q, q, qSz) != MP_OKAY)
 3486                             		.loc 2 2453 34
 3487 0197 ED A5 04                		mov.L	16[r10], r5
 3488 019a 72 55 20 06             		add	#0x620, r5
 3489                             		.loc 2 2453 13
 3490 019e A8 E3                   		mov.L	8[r6], r3
 3491 01a0 A8 6A                   		mov.L	4[r6], r2
 3492 01a2 EF 51                   		mov.L	r5, r1
 3493 01a4 05 00 00 00             		bsr	_sp_read_unsigned_bin
 3494 01a8 EF 15                   		mov.L	r1, r5
 3495                             		.loc 2 2453 12
 3496 01aa 61 05                   		cmp	#0, r5
 3497 01ac 15                      		beq	.L243
2454:../src/wolfcrypt/src/dh.c ****             ret = MP_INIT_E;
 3498                             		.loc 2 2454 17
 3499 01ad F8 A6 92                		mov.L	#-110, [r10]
 3500 01b0 0A                      		bra	.L242
 3501                             	.L243:
2455:../src/wolfcrypt/src/dh.c ****         else
2456:../src/wolfcrypt/src/dh.c ****             key->trustedGroup = trusted;
 3502                             		.loc 2 2456 31
 3503 01b1 ED A5 04                		mov.L	16[r10], r5
 3504 01b4 A8 EC                   		mov.L	12[r6], r4
 3505 01b6 EB 54 4D 02             		mov.L	r4, 2356[r5]
 3506                             		.balign 8,3,1
 3507                             	.L242:
2457:../src/wolfcrypt/src/dh.c ****     }
2458:../src/wolfcrypt/src/dh.c **** 
2459:../src/wolfcrypt/src/dh.c ****     if (ret != 0 && key != NULL) {
 3508                             		.loc 2 2459 8
 3509 01ba EC A5                   		mov.L	[r10], r5
 3510 01bc 61 05                   		cmp	#0, r5
 3511 01be 20 23                   		beq	.L244
 3512                             		.loc 2 2459 18 discriminator 1
 3513 01c0 ED A5 04                		mov.L	16[r10], r5
 3514 01c3 61 05                   		cmp	#0, r5
 3515 01c5 20 1C                   		beq	.L244
2460:../src/wolfcrypt/src/dh.c ****         if (keyG)
 3516                             		.loc 2 2460 12
 3517 01c7 ED A5 02                		mov.L	8[r10], r5
 3518 01ca 61 05                   		cmp	#0, r5
 3519 01cc 10                      		beq	.L245
2461:../src/wolfcrypt/src/dh.c ****             mp_clear(keyG);
 3520                             		.loc 2 2461 13
 3521 01cd ED A1 02                		mov.L	8[r10], r1
 3522 01d0 05 00 00 00             		bsr	_sp_clear
 3523                             	.L245:
2462:../src/wolfcrypt/src/dh.c ****         if (keyP)
 3524                             		.loc 2 2462 12
 3525 01d4 ED A5 01                		mov.L	4[r10], r5
 3526 01d7 61 05                   		cmp	#0, r5
 3527 01d9 10                      		beq	.L244
2463:../src/wolfcrypt/src/dh.c ****             mp_clear(keyP);
 3528                             		.loc 2 2463 13
 3529 01da ED A1 01                		mov.L	4[r10], r1
 3530 01dd 05 00 00 00             		bsr	_sp_clear
 3531                             		.balign 8,3,1
 3532                             	.L244:
2464:../src/wolfcrypt/src/dh.c ****     }
2465:../src/wolfcrypt/src/dh.c **** 
2466:../src/wolfcrypt/src/dh.c ****     RESTORE_VECTOR_REGISTERS();
2467:../src/wolfcrypt/src/dh.c **** 
2468:../src/wolfcrypt/src/dh.c ****     return ret;
 3533                             		.loc 2 2468 12
 3534 01e1 EC A5                   		mov.L	[r10], r5
2469:../src/wolfcrypt/src/dh.c **** }
 3535                             		.loc 2 2469 1
 3536 01e3 EF 51                   		mov.L	r5, r1
 3537 01e5 71 00 34                		add	#52, r0
 3538 01e8 7E B6                   		pop	r6
 3539 01ea 7E BA                   		pop	r10
 3540 01ec 02                      		rts
 3541                             	.LFE63:
 3543 01ed FC 13 00                		.section	.text.wc_DhSetCheckKey,"ax",@progbits
 3544                             		.global	_wc_DhSetCheckKey
 3546                             	_wc_DhSetCheckKey:
 3547                             	.LFB64:
2470:../src/wolfcrypt/src/dh.c **** 
2471:../src/wolfcrypt/src/dh.c **** 
2472:../src/wolfcrypt/src/dh.c **** int wc_DhSetCheckKey(DhKey* key, const byte* p, word32 pSz, const byte* g,
2473:../src/wolfcrypt/src/dh.c ****                    word32 gSz, const byte* q, word32 qSz, int trusted,
2474:../src/wolfcrypt/src/dh.c ****                    WC_RNG* rng)
2475:../src/wolfcrypt/src/dh.c **** {
 3548                             		.loc 2 2475 1
 3549 0000 7E AA                   		push.l	r10
 3550                             	.LCFI65:
 3551 0002 71 0A DC                		add	#-36, r0, r10
 3552                             	.LCFI66:
 3553 0005 71 A0 EC                		add	#-20, r10, r0
 3554                             	.LCFI67:
 3555 0008 75 45 2C                		mov.L	#44, r5
 3556 000b 4B A5                   		add	r10, r5
 3557 000d E3 A1                   		mov.L	r1, [r10]
 3558 000f E7 A2 01                		mov.L	r2, 4[r10]
 3559 0012 E7 A3 02                		mov.L	r3, 8[r10]
 3560 0015 E7 A4 03                		mov.L	r4, 12[r10]
2476:../src/wolfcrypt/src/dh.c ****     return _DhSetKey(key, p, pSz, g, gSz, q, qSz, trusted, rng);
 3561                             		.loc 2 2476 12
 3562 0018 A9 54                   		mov.L	16[r5], r4
 3563 001a A1 04                   		mov.L	r4, 16[r0]
 3564 001c A8 DC                   		mov.L	12[r5], r4
 3565 001e A0 8C                   		mov.L	r4, 12[r0]
 3566 0020 A8 D4                   		mov.L	8[r5], r4
 3567 0022 A0 84                   		mov.L	r4, 8[r0]
 3568 0024 A8 5C                   		mov.L	4[r5], r4
 3569 0026 A0 0C                   		mov.L	r4, 4[r0]
 3570 0028 EC 55                   		mov.L	[r5], r5
 3571 002a E3 05                   		mov.L	r5, [r0]
 3572 002c ED A4 03                		mov.L	12[r10], r4
 3573 002f ED A3 02                		mov.L	8[r10], r3
 3574 0032 ED A2 01                		mov.L	4[r10], r2
 3575 0035 EC A1                   		mov.L	[r10], r1
 3576 0037 05 00 00 00             		bsr	__DhSetKey
 3577 003b EF 15                   		mov.L	r1, r5
2477:../src/wolfcrypt/src/dh.c **** }
 3578                             		.loc 2 2477 1
 3579 003d EF 51                   		mov.L	r5, r1
 3580 003f 3F AA 0F                		rtsd	#60, r10-r10
 3581                             	.LFE64:
 3583                             		.section	.text.wc_DhSetKey_ex,"ax",@progbits
 3584                             		.global	_wc_DhSetKey_ex
 3586                             	_wc_DhSetKey_ex:
 3587                             	.LFB65:
2478:../src/wolfcrypt/src/dh.c **** 
2479:../src/wolfcrypt/src/dh.c **** 
2480:../src/wolfcrypt/src/dh.c **** int wc_DhSetKey_ex(DhKey* key, const byte* p, word32 pSz, const byte* g,
2481:../src/wolfcrypt/src/dh.c ****                    word32 gSz, const byte* q, word32 qSz)
2482:../src/wolfcrypt/src/dh.c **** {
 3588                             		.loc 2 2482 1
 3589 0000 7E AA                   		push.l	r10
 3590                             	.LCFI68:
 3591 0002 71 0A E4                		add	#-28, r0, r10
 3592                             	.LCFI69:
 3593 0005 71 A0 EC                		add	#-20, r10, r0
 3594                             	.LCFI70:
 3595 0008 75 45 24                		mov.L	#36, r5
 3596 000b 4B A5                   		add	r10, r5
 3597 000d E3 A1                   		mov.L	r1, [r10]
 3598 000f E7 A2 01                		mov.L	r2, 4[r10]
 3599 0012 E7 A3 02                		mov.L	r3, 8[r10]
 3600 0015 E7 A4 03                		mov.L	r4, 12[r10]
2483:../src/wolfcrypt/src/dh.c ****     return _DhSetKey(key, p, pSz, g, gSz, q, qSz, 0, NULL);
 3601                             		.loc 2 2483 12
 3602 0018 3E 04 00                		mov.L	#0, 16[r0]
 3603 001b 3E 03 00                		mov.L	#0, 12[r0]
 3604 001e A8 D4                   		mov.L	8[r5], r4
 3605 0020 A0 84                   		mov.L	r4, 8[r0]
 3606 0022 A8 5C                   		mov.L	4[r5], r4
 3607 0024 A0 0C                   		mov.L	r4, 4[r0]
 3608 0026 EC 55                   		mov.L	[r5], r5
 3609 0028 E3 05                   		mov.L	r5, [r0]
 3610 002a ED A4 03                		mov.L	12[r10], r4
 3611 002d ED A3 02                		mov.L	8[r10], r3
 3612 0030 ED A2 01                		mov.L	4[r10], r2
 3613 0033 EC A1                   		mov.L	[r10], r1
 3614 0035 05 00 00 00             		bsr	__DhSetKey
 3615 0039 EF 15                   		mov.L	r1, r5
2484:../src/wolfcrypt/src/dh.c **** }
 3616                             		.loc 2 2484 1
 3617 003b EF 51                   		mov.L	r5, r1
 3618 003d 3F AA 0D                		rtsd	#52, r10-r10
 3619                             	.LFE65:
 3621                             		.section	.text.wc_DhSetKey,"ax",@progbits
 3622                             		.global	_wc_DhSetKey
 3624                             	_wc_DhSetKey:
 3625                             	.LFB66:
2485:../src/wolfcrypt/src/dh.c **** 
2486:../src/wolfcrypt/src/dh.c **** 
2487:../src/wolfcrypt/src/dh.c **** /* not in asn anymore since no actual asn types used */
2488:../src/wolfcrypt/src/dh.c **** int wc_DhSetKey(DhKey* key, const byte* p, word32 pSz, const byte* g,
2489:../src/wolfcrypt/src/dh.c ****                 word32 gSz)
2490:../src/wolfcrypt/src/dh.c **** {
 3626                             		.loc 2 2490 1
 3627 0000 7E AA                   		push.l	r10
 3628                             	.LCFI71:
 3629 0002 71 0A EC                		add	#-20, r0, r10
 3630                             	.LCFI72:
 3631 0005 71 A0 EC                		add	#-20, r10, r0
 3632                             	.LCFI73:
 3633 0008 75 45 1C                		mov.L	#28, r5
 3634 000b 4B A5                   		add	r10, r5
 3635 000d E3 A1                   		mov.L	r1, [r10]
 3636 000f E7 A2 01                		mov.L	r2, 4[r10]
 3637 0012 E7 A3 02                		mov.L	r3, 8[r10]
 3638 0015 E7 A4 03                		mov.L	r4, 12[r10]
2491:../src/wolfcrypt/src/dh.c ****     /* This should not have trusted set. */
2492:../src/wolfcrypt/src/dh.c ****     return _DhSetKey(key, p, pSz, g, gSz, NULL, 0, 1, NULL);
 3639                             		.loc 2 2492 12
 3640 0018 3E 04 00                		mov.L	#0, 16[r0]
 3641 001b 3E 03 01                		mov.L	#1, 12[r0]
 3642 001e 3E 02 00                		mov.L	#0, 8[r0]
 3643 0021 3E 01 00                		mov.L	#0, 4[r0]
 3644 0024 EC 55                   		mov.L	[r5], r5
 3645 0026 E3 05                   		mov.L	r5, [r0]
 3646 0028 ED A4 03                		mov.L	12[r10], r4
 3647 002b ED A3 02                		mov.L	8[r10], r3
 3648 002e ED A2 01                		mov.L	4[r10], r2
 3649 0031 EC A1                   		mov.L	[r10], r1
 3650 0033 05 00 00 00             		bsr	__DhSetKey
 3651 0037 EF 15                   		mov.L	r1, r5
2493:../src/wolfcrypt/src/dh.c **** }
 3652                             		.loc 2 2493 1
 3653 0039 EF 51                   		mov.L	r5, r1
 3654 003b 3F AA 0B                		rtsd	#44, r10-r10
 3655                             	.LFE66:
 3657                             		.section	.text.wc_DhSetNamedKey,"ax",@progbits
 3658                             		.global	_wc_DhSetNamedKey
 3660                             	_wc_DhSetNamedKey:
 3661                             	.LFB67:
2494:../src/wolfcrypt/src/dh.c **** 
2495:../src/wolfcrypt/src/dh.c **** 
2496:../src/wolfcrypt/src/dh.c **** int wc_DhSetNamedKey(DhKey* key, int name)
2497:../src/wolfcrypt/src/dh.c **** {
 3662                             		.loc 2 2497 1
 3663 0000 7E AA                   		push.l	r10
 3664                             	.LCFI74:
 3665 0002 71 0A E0                		add	#-32, r0, r10
 3666                             	.LCFI75:
 3667 0005 71 A0 EC                		add	#-20, r10, r0
 3668                             	.LCFI76:
 3669 0008 E7 A1 06                		mov.L	r1, 24[r10]
 3670 000b E7 A2 07                		mov.L	r2, 28[r10]
2498:../src/wolfcrypt/src/dh.c ****     const byte* p = NULL;
 3671                             		.loc 2 2498 17
 3672 000e F8 A6 00                		mov.L	#0, [r10]
2499:../src/wolfcrypt/src/dh.c ****     const byte* g = NULL;
 3673                             		.loc 2 2499 17
 3674 0011 F9 A6 01 00             		mov.L	#0, 4[r10]
2500:../src/wolfcrypt/src/dh.c ****     const byte* q = NULL;
 3675                             		.loc 2 2500 17
 3676 0015 F9 A6 04 00             		mov.L	#0, 16[r10]
2501:../src/wolfcrypt/src/dh.c ****     word32 pSz = 0, gSz = 0, qSz = 0;
 3677                             		.loc 2 2501 12
 3678 0019 F9 A6 02 00             		mov.L	#0, 8[r10]
 3679                             		.loc 2 2501 21
 3680 001d F9 A6 03 00             		mov.L	#0, 12[r10]
 3681                             		.loc 2 2501 30
 3682 0021 F9 A6 05 00             		mov.L	#0, 20[r10]
2502:../src/wolfcrypt/src/dh.c **** 
2503:../src/wolfcrypt/src/dh.c ****     switch (name) {
 3683                             		.loc 2 2503 5
 3684 0025 ED A5 07                		mov.L	28[r10], r5
 3685 0028 76 05 00 01             		cmp	#0x100, r5
 3686 002c 21 1A                   		bne	.L257
2504:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_2048
2505:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_2048:
2506:../src/wolfcrypt/src/dh.c ****             p = dh_ffdhe2048_p;
 3687                             		.loc 2 2506 15
 3688 002e F8 A2 00 00 00 00       		mov.L	#_dh_ffdhe2048_p, [r10]
2507:../src/wolfcrypt/src/dh.c ****             pSz = sizeof(dh_ffdhe2048_p);
 3689                             		.loc 2 2507 17
 3690 0034 F9 AA 02 00 01          		mov.L	#0x100, 8[r10]
2508:../src/wolfcrypt/src/dh.c ****             g = dh_ffdhe2048_g;
 3691                             		.loc 2 2508 15
 3692 0039 F9 A2 01 00 00 00 00    		mov.L	#_dh_ffdhe2048_g, 4[r10]
2509:../src/wolfcrypt/src/dh.c ****             gSz = sizeof(dh_ffdhe2048_g);
 3693                             		.loc 2 2509 17
 3694 0040 F9 A6 03 01             		mov.L	#1, 12[r10]
2510:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2511:../src/wolfcrypt/src/dh.c ****             q = dh_ffdhe2048_q;
2512:../src/wolfcrypt/src/dh.c ****             qSz = sizeof(dh_ffdhe2048_q);
2513:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2514:../src/wolfcrypt/src/dh.c ****             break;
 3695                             		.loc 2 2514 13
 3696 0044 2E 03                   		bra	.L255
 3697                             	.L257:
2515:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_2048 */
2516:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_3072
2517:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_3072:
2518:../src/wolfcrypt/src/dh.c ****             p = dh_ffdhe3072_p;
2519:../src/wolfcrypt/src/dh.c ****             pSz = sizeof(dh_ffdhe3072_p);
2520:../src/wolfcrypt/src/dh.c ****             g = dh_ffdhe3072_g;
2521:../src/wolfcrypt/src/dh.c ****             gSz = sizeof(dh_ffdhe3072_g);
2522:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2523:../src/wolfcrypt/src/dh.c ****             q = dh_ffdhe3072_q;
2524:../src/wolfcrypt/src/dh.c ****             qSz = sizeof(dh_ffdhe3072_q);
2525:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2526:../src/wolfcrypt/src/dh.c ****             break;
2527:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_3072 */
2528:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_4096
2529:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_4096:
2530:../src/wolfcrypt/src/dh.c ****             p = dh_ffdhe4096_p;
2531:../src/wolfcrypt/src/dh.c ****             pSz = sizeof(dh_ffdhe4096_p);
2532:../src/wolfcrypt/src/dh.c ****             g = dh_ffdhe4096_g;
2533:../src/wolfcrypt/src/dh.c ****             gSz = sizeof(dh_ffdhe4096_g);
2534:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2535:../src/wolfcrypt/src/dh.c ****             q = dh_ffdhe4096_q;
2536:../src/wolfcrypt/src/dh.c ****             qSz = sizeof(dh_ffdhe4096_q);
2537:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2538:../src/wolfcrypt/src/dh.c ****             break;
2539:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_4096 */
2540:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_6144
2541:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_6144:
2542:../src/wolfcrypt/src/dh.c ****             p = dh_ffdhe6144_p;
2543:../src/wolfcrypt/src/dh.c ****             pSz = sizeof(dh_ffdhe6144_p);
2544:../src/wolfcrypt/src/dh.c ****             g = dh_ffdhe6144_g;
2545:../src/wolfcrypt/src/dh.c ****             gSz = sizeof(dh_ffdhe6144_g);
2546:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2547:../src/wolfcrypt/src/dh.c ****             q = dh_ffdhe6144_q;
2548:../src/wolfcrypt/src/dh.c ****             qSz = sizeof(dh_ffdhe6144_q);
2549:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2550:../src/wolfcrypt/src/dh.c ****             break;
2551:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_6144 */
2552:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_8192
2553:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_8192:
2554:../src/wolfcrypt/src/dh.c ****             p = dh_ffdhe8192_p;
2555:../src/wolfcrypt/src/dh.c ****             pSz = sizeof(dh_ffdhe8192_p);
2556:../src/wolfcrypt/src/dh.c ****             g = dh_ffdhe8192_g;
2557:../src/wolfcrypt/src/dh.c ****             gSz = sizeof(dh_ffdhe8192_g);
2558:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2559:../src/wolfcrypt/src/dh.c ****             q = dh_ffdhe8192_q;
2560:../src/wolfcrypt/src/dh.c ****             qSz = sizeof(dh_ffdhe8192_q);
2561:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2562:../src/wolfcrypt/src/dh.c ****             break;
2563:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_8192 */
2564:../src/wolfcrypt/src/dh.c ****         default:
2565:../src/wolfcrypt/src/dh.c ****             break;
 3698                             		.loc 2 2565 13
 3699 0046 03                      		nop
 3700                             	.L255:
2566:../src/wolfcrypt/src/dh.c ****     }
2567:../src/wolfcrypt/src/dh.c ****     return _DhSetKey(key, p, pSz, g, gSz, q, qSz, 1, NULL);
 3701                             		.loc 2 2567 12
 3702 0047 3E 04 00                		mov.L	#0, 16[r0]
 3703 004a 3E 03 01                		mov.L	#1, 12[r0]
 3704 004d ED A5 05                		mov.L	20[r10], r5
 3705 0050 A0 85                   		mov.L	r5, 8[r0]
 3706 0052 ED A5 04                		mov.L	16[r10], r5
 3707 0055 A0 0D                   		mov.L	r5, 4[r0]
 3708 0057 ED A5 03                		mov.L	12[r10], r5
 3709 005a E3 05                   		mov.L	r5, [r0]
 3710 005c ED A4 01                		mov.L	4[r10], r4
 3711 005f ED A3 02                		mov.L	8[r10], r3
 3712 0062 EC A2                   		mov.L	[r10], r2
 3713 0064 ED A1 06                		mov.L	24[r10], r1
 3714 0067 05 00 00 00             		bsr	__DhSetKey
 3715 006b EF 15                   		mov.L	r1, r5
2568:../src/wolfcrypt/src/dh.c **** }
 3716                             		.loc 2 2568 1
 3717 006d EF 51                   		mov.L	r5, r1
 3718 006f 3F AA 0E                		rtsd	#56, r10-r10
 3719                             	.LFE67:
 3721                             		.section	.text.wc_DhGetNamedKeyMinSize,"ax",@progbits
 3722                             		.global	_wc_DhGetNamedKeyMinSize
 3724                             	_wc_DhGetNamedKeyMinSize:
 3725                             	.LFB68:
2569:../src/wolfcrypt/src/dh.c **** 
2570:../src/wolfcrypt/src/dh.c **** 
2571:../src/wolfcrypt/src/dh.c **** word32 wc_DhGetNamedKeyMinSize(int name)
2572:../src/wolfcrypt/src/dh.c **** {
 3726                             		.loc 2 2572 1
 3727 0000 7E AA                   		push.l	r10
 3728                             	.LCFI77:
 3729 0002 71 0A F8                		add	#-8, r0, r10
 3730                             	.LCFI78:
 3731 0005 EF A0                   		mov.L	r10, r0
 3732 0007 E7 A1 01                		mov.L	r1, 4[r10]
2573:../src/wolfcrypt/src/dh.c ****     int size;
2574:../src/wolfcrypt/src/dh.c **** 
2575:../src/wolfcrypt/src/dh.c ****     switch (name) {
 3733                             		.loc 2 2575 5
 3734 000a ED A5 01                		mov.L	4[r10], r5
 3735 000d 76 05 00 01             		cmp	#0x100, r5
 3736 0011 1D                      		bne	.L259
2576:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_2048
2577:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_2048:
2578:../src/wolfcrypt/src/dh.c ****             size = 29;
 3737                             		.loc 2 2578 18
 3738 0012 F8 A6 1D                		mov.L	#29, [r10]
2579:../src/wolfcrypt/src/dh.c ****             break;
 3739                             		.loc 2 2579 13
 3740 0015 0C                      		bra	.L260
 3741                             	.L259:
2580:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_2048 */
2581:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_3072
2582:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_3072:
2583:../src/wolfcrypt/src/dh.c ****             size = 34;
2584:../src/wolfcrypt/src/dh.c ****             break;
2585:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_3072 */
2586:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_4096
2587:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_4096:
2588:../src/wolfcrypt/src/dh.c ****             size = 39;
2589:../src/wolfcrypt/src/dh.c ****             break;
2590:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_4096 */
2591:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_6144
2592:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_6144:
2593:../src/wolfcrypt/src/dh.c ****             size = 46;
2594:../src/wolfcrypt/src/dh.c ****             break;
2595:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_6144 */
2596:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_8192
2597:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_8192:
2598:../src/wolfcrypt/src/dh.c ****             size = 52;
2599:../src/wolfcrypt/src/dh.c ****             break;
2600:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_8192 */
2601:../src/wolfcrypt/src/dh.c ****         default:
2602:../src/wolfcrypt/src/dh.c ****             size = 0;
 3742                             		.loc 2 2602 18
 3743 0016 F8 A6 00                		mov.L	#0, [r10]
 3744                             	.L260:
2603:../src/wolfcrypt/src/dh.c ****     }
2604:../src/wolfcrypt/src/dh.c **** 
2605:../src/wolfcrypt/src/dh.c ****     return size;
 3745                             		.loc 2 2605 12
 3746 0019 EC A5                   		mov.L	[r10], r5
2606:../src/wolfcrypt/src/dh.c **** }
 3747                             		.loc 2 2606 1
 3748 001b EF 51                   		mov.L	r5, r1
 3749 001d 3F AA 03                		rtsd	#12, r10-r10
 3750                             	.LFE68:
 3752                             		.section	.text.wc_DhCmpNamedKey,"ax",@progbits
 3753                             		.global	_wc_DhCmpNamedKey
 3755                             	_wc_DhCmpNamedKey:
 3756                             	.LFB69:
2607:../src/wolfcrypt/src/dh.c **** 
2608:../src/wolfcrypt/src/dh.c **** 
2609:../src/wolfcrypt/src/dh.c **** /* Returns 1: params match
2610:../src/wolfcrypt/src/dh.c ****  *         0: params differ */
2611:../src/wolfcrypt/src/dh.c **** int wc_DhCmpNamedKey(int name, int noQ,
2612:../src/wolfcrypt/src/dh.c ****         const byte* p, word32 pSz,
2613:../src/wolfcrypt/src/dh.c ****         const byte* g, word32 gSz,
2614:../src/wolfcrypt/src/dh.c ****         const byte* q, word32 qSz)
2615:../src/wolfcrypt/src/dh.c **** {
 3757                             		.loc 2 2615 1
 3758 0000 7E AA                   		push.l	r10
 3759                             	.LCFI79:
 3760 0002 7E A6                   		push.l	r6
 3761                             	.LCFI80:
 3762 0004 71 0A C0                		add	#-64, r0, r10
 3763                             	.LCFI81:
 3764 0007 EF A0                   		mov.L	r10, r0
 3765 0009 75 46 4C                		mov.L	#0x4c, r6
 3766 000c 4B A6                   		add	r10, r6
 3767 000e E7 A1 08                		mov.L	r1, 32[r10]
 3768 0011 E7 A2 09                		mov.L	r2, 36[r10]
 3769 0014 E7 A3 0A                		mov.L	r3, 40[r10]
 3770 0017 E7 A4 0B                		mov.L	r4, 44[r10]
2616:../src/wolfcrypt/src/dh.c ****     const byte* pCmp = NULL;
 3771                             		.loc 2 2616 17
 3772 001a F8 A6 00                		mov.L	#0, [r10]
2617:../src/wolfcrypt/src/dh.c ****     const byte* qCmp = NULL;
 3773                             		.loc 2 2617 17
 3774 001d F9 A6 05 00             		mov.L	#0, 20[r10]
2618:../src/wolfcrypt/src/dh.c ****     const byte* gCmp = NULL;
 3775                             		.loc 2 2618 17
 3776 0021 F9 A6 01 00             		mov.L	#0, 4[r10]
2619:../src/wolfcrypt/src/dh.c ****     word32 pCmpSz = 0, qCmpSz = 0, gCmpSz = 0;
 3777                             		.loc 2 2619 12
 3778 0025 F9 A6 02 00             		mov.L	#0, 8[r10]
 3779                             		.loc 2 2619 24
 3780 0029 F9 A6 06 00             		mov.L	#0, 24[r10]
 3781                             		.loc 2 2619 36
 3782 002d F9 A6 03 00             		mov.L	#0, 12[r10]
2620:../src/wolfcrypt/src/dh.c ****     int cmp = 0, goodName = 1;
 3783                             		.loc 2 2620 9
 3784 0031 F9 A6 07 00             		mov.L	#0, 28[r10]
 3785                             		.loc 2 2620 18
 3786 0035 F9 A6 04 01             		mov.L	#1, 16[r10]
2621:../src/wolfcrypt/src/dh.c **** 
2622:../src/wolfcrypt/src/dh.c ****     switch (name) {
 3787                             		.loc 2 2622 5
 3788 0039 ED A5 08                		mov.L	32[r10], r5
 3789 003c 76 05 00 01             		cmp	#0x100, r5
 3790 0040 21 19                   		bne	.L263
2623:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_2048
2624:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_2048:
2625:../src/wolfcrypt/src/dh.c ****             pCmp = dh_ffdhe2048_p;
 3791                             		.loc 2 2625 18
 3792 0042 F8 A2 00 00 00 00       		mov.L	#_dh_ffdhe2048_p, [r10]
2626:../src/wolfcrypt/src/dh.c ****             pCmpSz = sizeof(dh_ffdhe2048_p);
 3793                             		.loc 2 2626 20
 3794 0048 F9 AA 02 00 01          		mov.L	#0x100, 8[r10]
2627:../src/wolfcrypt/src/dh.c ****             gCmp = dh_ffdhe2048_g;
 3795                             		.loc 2 2627 18
 3796 004d F9 A2 01 00 00 00 00    		mov.L	#_dh_ffdhe2048_g, 4[r10]
2628:../src/wolfcrypt/src/dh.c ****             gCmpSz = sizeof(dh_ffdhe2048_g);
 3797                             		.loc 2 2628 20
 3798 0054 F9 A6 03 01             		mov.L	#1, 12[r10]
2629:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2630:../src/wolfcrypt/src/dh.c ****             qCmp = dh_ffdhe2048_q;
2631:../src/wolfcrypt/src/dh.c ****             qCmpSz = sizeof(dh_ffdhe2048_q);
2632:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2633:../src/wolfcrypt/src/dh.c ****             break;
 3799                             		.loc 2 2633 13
 3800 0058 0D                      		bra	.L264
 3801                             	.L263:
2634:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_2048 */
2635:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_3072
2636:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_3072:
2637:../src/wolfcrypt/src/dh.c ****             pCmp = dh_ffdhe3072_p;
2638:../src/wolfcrypt/src/dh.c ****             pCmpSz = sizeof(dh_ffdhe3072_p);
2639:../src/wolfcrypt/src/dh.c ****             gCmp = dh_ffdhe3072_g;
2640:../src/wolfcrypt/src/dh.c ****             gCmpSz = sizeof(dh_ffdhe3072_g);
2641:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2642:../src/wolfcrypt/src/dh.c ****             qCmp = dh_ffdhe3072_q;
2643:../src/wolfcrypt/src/dh.c ****             qCmpSz = sizeof(dh_ffdhe3072_q);
2644:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2645:../src/wolfcrypt/src/dh.c ****             break;
2646:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_3072 */
2647:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_4096
2648:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_4096:
2649:../src/wolfcrypt/src/dh.c ****             pCmp = dh_ffdhe4096_p;
2650:../src/wolfcrypt/src/dh.c ****             pCmpSz = sizeof(dh_ffdhe4096_p);
2651:../src/wolfcrypt/src/dh.c ****             gCmp = dh_ffdhe4096_g;
2652:../src/wolfcrypt/src/dh.c ****             gCmpSz = sizeof(dh_ffdhe4096_g);
2653:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2654:../src/wolfcrypt/src/dh.c ****             qCmp = dh_ffdhe4096_q;
2655:../src/wolfcrypt/src/dh.c ****             qCmpSz = sizeof(dh_ffdhe4096_q);
2656:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2657:../src/wolfcrypt/src/dh.c ****             break;
2658:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_4096 */
2659:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_6144
2660:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_6144:
2661:../src/wolfcrypt/src/dh.c ****             pCmp = dh_ffdhe6144_p;
2662:../src/wolfcrypt/src/dh.c ****             pCmpSz = sizeof(dh_ffdhe6144_p);
2663:../src/wolfcrypt/src/dh.c ****             gCmp = dh_ffdhe6144_g;
2664:../src/wolfcrypt/src/dh.c ****             gCmpSz = sizeof(dh_ffdhe6144_g);
2665:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2666:../src/wolfcrypt/src/dh.c ****             qCmp = dh_ffdhe6144_q;
2667:../src/wolfcrypt/src/dh.c ****             qCmpSz = sizeof(dh_ffdhe6144_q);
2668:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2669:../src/wolfcrypt/src/dh.c ****             break;
2670:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_6144 */
2671:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_8192
2672:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_8192:
2673:../src/wolfcrypt/src/dh.c ****             pCmp = dh_ffdhe8192_p;
2674:../src/wolfcrypt/src/dh.c ****             pCmpSz = sizeof(dh_ffdhe8192_p);
2675:../src/wolfcrypt/src/dh.c ****             gCmp = dh_ffdhe8192_g;
2676:../src/wolfcrypt/src/dh.c ****             gCmpSz = sizeof(dh_ffdhe8192_g);
2677:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2678:../src/wolfcrypt/src/dh.c ****             qCmp = dh_ffdhe8192_q;
2679:../src/wolfcrypt/src/dh.c ****             qCmpSz = sizeof(dh_ffdhe8192_q);
2680:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2681:../src/wolfcrypt/src/dh.c ****             break;
2682:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_8192 */
2683:../src/wolfcrypt/src/dh.c ****         default:
2684:../src/wolfcrypt/src/dh.c ****             goodName = 0;
 3802                             		.loc 2 2684 22
 3803 0059 F9 A6 04 00             		mov.L	#0, 16[r10]
 3804                             	.L264:
2685:../src/wolfcrypt/src/dh.c ****     }
2686:../src/wolfcrypt/src/dh.c **** 
2687:../src/wolfcrypt/src/dh.c ****     cmp = goodName && (pSz == pCmpSz) && (gSz == gCmpSz) &&
2688:../src/wolfcrypt/src/dh.c ****         (noQ || ((qCmp != NULL) && (qSz == qCmpSz) &&
2689:../src/wolfcrypt/src/dh.c ****                  XMEMCMP(q, qCmp, qCmpSz) == 0)) &&
2690:../src/wolfcrypt/src/dh.c ****         (XMEMCMP(p, pCmp, pCmpSz) == 0) &&
 3805                             		.loc 2 2690 41
 3806 005d ED A5 04                		mov.L	16[r10], r5
 3807 0060 61 05                   		cmp	#0, r5
 3808 0062 20 64                   		beq	.L265
2687:../src/wolfcrypt/src/dh.c ****         (noQ || ((qCmp != NULL) && (qSz == qCmpSz) &&
 3809                             		.loc 2 2687 20
 3810 0064 ED A4 0B                		mov.L	44[r10], r4
 3811 0067 ED A5 02                		mov.L	8[r10], r5
 3812 006a 47 54                   		cmp	r5, r4
 3813 006c 21 5A                   		bne	.L265
2687:../src/wolfcrypt/src/dh.c ****         (noQ || ((qCmp != NULL) && (qSz == qCmpSz) &&
 3814                             		.loc 2 2687 39 discriminator 1
 3815 006e A8 6C                   		mov.L	4[r6], r4
 3816 0070 ED A5 03                		mov.L	12[r10], r5
 3817 0073 47 54                   		cmp	r5, r4
 3818 0075 21 51                   		bne	.L265
2687:../src/wolfcrypt/src/dh.c ****         (noQ || ((qCmp != NULL) && (qSz == qCmpSz) &&
 3819                             		.loc 2 2687 58 discriminator 2
 3820 0077 ED A5 09                		mov.L	36[r10], r5
 3821 007a 61 05                   		cmp	#0, r5
 3822 007c 21 24                   		bne	.L266
2688:../src/wolfcrypt/src/dh.c ****                  XMEMCMP(q, qCmp, qCmpSz) == 0)) &&
 3823                             		.loc 2 2688 14
 3824 007e ED A5 05                		mov.L	20[r10], r5
 3825 0081 61 05                   		cmp	#0, r5
 3826 0083 20 43                   		beq	.L265
2688:../src/wolfcrypt/src/dh.c ****                  XMEMCMP(q, qCmp, qCmpSz) == 0)) &&
 3827                             		.loc 2 2688 33 discriminator 1
 3828 0085 A8 EC                   		mov.L	12[r6], r4
 3829 0087 ED A5 06                		mov.L	24[r10], r5
 3830 008a 47 54                   		cmp	r5, r4
 3831 008c 21 3A                   		bne	.L265
2689:../src/wolfcrypt/src/dh.c ****         (XMEMCMP(p, pCmp, pCmpSz) == 0) &&
 3832                             		.loc 2 2689 18 discriminator 2
 3833 008e ED A3 06                		mov.L	24[r10], r3
 3834 0091 ED A2 05                		mov.L	20[r10], r2
 3835 0094 A8 E1                   		mov.L	8[r6], r1
 3836 0096 05 00 00 00             		bsr	_memcmp
 3837 009a EF 15                   		mov.L	r1, r5
2688:../src/wolfcrypt/src/dh.c ****                  XMEMCMP(q, qCmp, qCmpSz) == 0)) &&
 3838                             		.loc 2 2688 52 discriminator 2
 3839 009c 61 05                   		cmp	#0, r5
 3840 009e 21 28                   		bne	.L265
 3841                             	.L266:
 3842                             		.loc 2 2690 10
 3843 00a0 ED A3 02                		mov.L	8[r10], r3
 3844 00a3 EC A2                   		mov.L	[r10], r2
 3845 00a5 ED A1 0A                		mov.L	40[r10], r1
 3846 00a8 05 00 00 00             		bsr	_memcmp
 3847 00ac EF 15                   		mov.L	r1, r5
2689:../src/wolfcrypt/src/dh.c ****         (XMEMCMP(p, pCmp, pCmpSz) == 0) &&
 3848                             		.loc 2 2689 50
 3849 00ae 61 05                   		cmp	#0, r5
 3850 00b0 21 16                   		bne	.L265
2691:../src/wolfcrypt/src/dh.c ****         (XMEMCMP(g, gCmp, gCmpSz) == 0);
 3851                             		.loc 2 2691 10 discriminator 3
 3852 00b2 ED A3 03                		mov.L	12[r10], r3
 3853 00b5 ED A2 01                		mov.L	4[r10], r2
 3854 00b8 EC 61                   		mov.L	[r6], r1
 3855 00ba 05 00 00 00             		bsr	_memcmp
 3856 00be EF 15                   		mov.L	r1, r5
2690:../src/wolfcrypt/src/dh.c ****         (XMEMCMP(g, gCmp, gCmpSz) == 0);
 3857                             		.loc 2 2690 41 discriminator 3
 3858 00c0 61 05                   		cmp	#0, r5
 3859 00c2 1C                      		bne	.L265
2690:../src/wolfcrypt/src/dh.c ****         (XMEMCMP(g, gCmp, gCmpSz) == 0);
 3860                             		.loc 2 2690 41 is_stmt 0 discriminator 2
 3861 00c3 66 15                   		mov.L	#1, r5
 3862 00c5 0B                      		bra	.L267
 3863                             	.L265:
2690:../src/wolfcrypt/src/dh.c ****         (XMEMCMP(g, gCmp, gCmpSz) == 0);
 3864                             		.loc 2 2690 41 discriminator 1
 3865 00c6 66 05                   		mov.L	#0, r5
 3866                             	.L267:
2687:../src/wolfcrypt/src/dh.c ****         (noQ || ((qCmp != NULL) && (qSz == qCmpSz) &&
 3867                             		.loc 2 2687 9 is_stmt 1
 3868 00c8 E7 A5 07                		mov.L	r5, 28[r10]
2692:../src/wolfcrypt/src/dh.c **** 
2693:../src/wolfcrypt/src/dh.c ****     return cmp;
 3869                             		.loc 2 2693 12
 3870 00cb ED A5 07                		mov.L	28[r10], r5
2694:../src/wolfcrypt/src/dh.c **** }
 3871                             		.loc 2 2694 1
 3872 00ce EF 51                   		mov.L	r5, r1
 3873 00d0 71 00 40                		add	#0x40, r0
 3874 00d3 7E B6                   		pop	r6
 3875 00d5 7E BA                   		pop	r10
 3876 00d7 02                      		rts
 3877                             	.LFE69:
 3879                             		.section	.text.wc_DhGetNamedKeyParamSize,"ax",@progbits
 3880                             		.global	_wc_DhGetNamedKeyParamSize
 3882                             	_wc_DhGetNamedKeyParamSize:
 3883                             	.LFB70:
2695:../src/wolfcrypt/src/dh.c **** 
2696:../src/wolfcrypt/src/dh.c **** 
2697:../src/wolfcrypt/src/dh.c **** int wc_DhGetNamedKeyParamSize(int name, word32* p, word32* g, word32* q)
2698:../src/wolfcrypt/src/dh.c **** {
 3884                             		.loc 2 2698 1
 3885 0000 7E AA                   		push.l	r10
 3886                             	.LCFI82:
 3887 0002 71 0A E4                		add	#-28, r0, r10
 3888                             	.LCFI83:
 3889 0005 EF A0                   		mov.L	r10, r0
 3890 0007 E7 A1 03                		mov.L	r1, 12[r10]
 3891 000a E7 A2 04                		mov.L	r2, 16[r10]
 3892 000d E7 A3 05                		mov.L	r3, 20[r10]
 3893 0010 E7 A4 06                		mov.L	r4, 24[r10]
2699:../src/wolfcrypt/src/dh.c ****     word32 pSz = 0, gSz = 0, qSz = 0;
 3894                             		.loc 2 2699 12
 3895 0013 F8 A6 00                		mov.L	#0, [r10]
 3896                             		.loc 2 2699 21
 3897 0016 F9 A6 01 00             		mov.L	#0, 4[r10]
 3898                             		.loc 2 2699 30
 3899 001a F9 A6 02 00             		mov.L	#0, 8[r10]
2700:../src/wolfcrypt/src/dh.c **** 
2701:../src/wolfcrypt/src/dh.c ****     switch (name) {
 3900                             		.loc 2 2701 5
 3901 001e ED A5 03                		mov.L	12[r10], r5
 3902 0021 76 05 00 01             		cmp	#0x100, r5
 3903 0025 21 0C                   		bne	.L276
2702:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_2048
2703:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_2048:
2704:../src/wolfcrypt/src/dh.c ****             pSz = sizeof(dh_ffdhe2048_p);
 3904                             		.loc 2 2704 17
 3905 0027 F8 AA 00 01             		mov.L	#0x100, [r10]
2705:../src/wolfcrypt/src/dh.c ****             gSz = sizeof(dh_ffdhe2048_g);
 3906                             		.loc 2 2705 17
 3907 002b F9 A6 01 01             		mov.L	#1, 4[r10]
2706:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2707:../src/wolfcrypt/src/dh.c ****             qSz = sizeof(dh_ffdhe2048_q);
2708:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2709:../src/wolfcrypt/src/dh.c ****             break;
 3908                             		.loc 2 2709 13
 3909 002f 2E 03                   		bra	.L271
 3910                             	.L276:
2710:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_2048 */
2711:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_3072
2712:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_3072:
2713:../src/wolfcrypt/src/dh.c ****             pSz = sizeof(dh_ffdhe3072_p);
2714:../src/wolfcrypt/src/dh.c ****             gSz = sizeof(dh_ffdhe3072_g);
2715:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2716:../src/wolfcrypt/src/dh.c ****             qSz = sizeof(dh_ffdhe3072_q);
2717:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2718:../src/wolfcrypt/src/dh.c ****             break;
2719:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_3072 */
2720:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_4096
2721:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_4096:
2722:../src/wolfcrypt/src/dh.c ****             pSz = sizeof(dh_ffdhe4096_p);
2723:../src/wolfcrypt/src/dh.c ****             gSz = sizeof(dh_ffdhe4096_g);
2724:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2725:../src/wolfcrypt/src/dh.c ****             qSz = sizeof(dh_ffdhe4096_q);
2726:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2727:../src/wolfcrypt/src/dh.c ****             break;
2728:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_4096 */
2729:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_6144
2730:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_6144:
2731:../src/wolfcrypt/src/dh.c ****             pSz = sizeof(dh_ffdhe6144_p);
2732:../src/wolfcrypt/src/dh.c ****             gSz = sizeof(dh_ffdhe6144_g);
2733:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2734:../src/wolfcrypt/src/dh.c ****             qSz = sizeof(dh_ffdhe6144_q);
2735:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2736:../src/wolfcrypt/src/dh.c ****             break;
2737:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_6144 */
2738:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_8192
2739:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_8192:
2740:../src/wolfcrypt/src/dh.c ****             pSz = sizeof(dh_ffdhe8192_p);
2741:../src/wolfcrypt/src/dh.c ****             gSz = sizeof(dh_ffdhe8192_g);
2742:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2743:../src/wolfcrypt/src/dh.c ****             qSz = sizeof(dh_ffdhe8192_q);
2744:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2745:../src/wolfcrypt/src/dh.c ****             break;
2746:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_8192 */
2747:../src/wolfcrypt/src/dh.c ****         default:
2748:../src/wolfcrypt/src/dh.c ****             break;
 3911                             		.loc 2 2748 13
 3912 0031 03                      		nop
 3913                             	.L271:
2749:../src/wolfcrypt/src/dh.c ****     }
2750:../src/wolfcrypt/src/dh.c **** 
2751:../src/wolfcrypt/src/dh.c ****     if (p != NULL) *p = pSz;
 3914                             		.loc 2 2751 8
 3915 0032 ED A5 04                		mov.L	16[r10], r5
 3916 0035 61 05                   		cmp	#0, r5
 3917 0037 10                      		beq	.L272
 3918                             		.loc 2 2751 23 discriminator 1
 3919 0038 ED A5 04                		mov.L	16[r10], r5
 3920 003b EC A4                   		mov.L	[r10], r4
 3921 003d E3 54                   		mov.L	r4, [r5]
 3922                             	.L272:
2752:../src/wolfcrypt/src/dh.c ****     if (g != NULL) *g = gSz;
 3923                             		.loc 2 2752 8
 3924 003f ED A5 05                		mov.L	20[r10], r5
 3925 0042 61 05                   		cmp	#0, r5
 3926 0044 11                      		beq	.L273
 3927                             		.loc 2 2752 23 discriminator 1
 3928 0045 ED A5 05                		mov.L	20[r10], r5
 3929 0048 ED A4 01                		mov.L	4[r10], r4
 3930 004b E3 54                   		mov.L	r4, [r5]
 3931                             	.L273:
2753:../src/wolfcrypt/src/dh.c ****     if (q != NULL) *q = qSz;
 3932                             		.loc 2 2753 8
 3933 004d ED A5 06                		mov.L	24[r10], r5
 3934 0050 61 05                   		cmp	#0, r5
 3935 0052 11                      		beq	.L274
 3936                             		.loc 2 2753 23 discriminator 1
 3937 0053 ED A5 06                		mov.L	24[r10], r5
 3938 0056 ED A4 02                		mov.L	8[r10], r4
 3939 0059 E3 54                   		mov.L	r4, [r5]
 3940                             	.L274:
2754:../src/wolfcrypt/src/dh.c **** 
2755:../src/wolfcrypt/src/dh.c ****     return 0;
 3941                             		.loc 2 2755 12
 3942 005b 66 05                   		mov.L	#0, r5
2756:../src/wolfcrypt/src/dh.c **** }
 3943                             		.loc 2 2756 1
 3944 005d EF 51                   		mov.L	r5, r1
 3945 005f 3F AA 08                		rtsd	#32, r10-r10
 3946                             	.LFE70:
 3948                             		.section	.text.wc_DhCopyNamedKey,"ax",@progbits
 3949                             		.global	_wc_DhCopyNamedKey
 3951                             	_wc_DhCopyNamedKey:
 3952                             	.LFB71:
2757:../src/wolfcrypt/src/dh.c **** 
2758:../src/wolfcrypt/src/dh.c **** 
2759:../src/wolfcrypt/src/dh.c **** int wc_DhCopyNamedKey(int name,
2760:../src/wolfcrypt/src/dh.c ****         byte* p, word32* pSz, byte* g, word32* gSz, byte* q, word32* qSz)
2761:../src/wolfcrypt/src/dh.c **** {
 3953                             		.loc 2 2761 1
 3954 0000 7E AA                   		push.l	r10
 3955                             	.LCFI84:
 3956 0002 7E A6                   		push.l	r6
 3957                             	.LCFI85:
 3958 0004 71 0A CC                		add	#-52, r0, r10
 3959                             	.LCFI86:
 3960 0007 EF A0                   		mov.L	r10, r0
 3961 0009 75 46 40                		mov.L	#0x40, r6
 3962 000c 4B A6                   		add	r10, r6
 3963 000e E7 A1 06                		mov.L	r1, 24[r10]
 3964 0011 E7 A2 07                		mov.L	r2, 28[r10]
 3965 0014 E7 A3 08                		mov.L	r3, 32[r10]
 3966 0017 E7 A4 09                		mov.L	r4, 36[r10]
2762:../src/wolfcrypt/src/dh.c ****     const byte* pC = NULL;
 3967                             		.loc 2 2762 17
 3968 001a F8 A6 00                		mov.L	#0, [r10]
2763:../src/wolfcrypt/src/dh.c ****     const byte* gC = NULL;
 3969                             		.loc 2 2763 17
 3970 001d F9 A6 01 00             		mov.L	#0, 4[r10]
2764:../src/wolfcrypt/src/dh.c ****     const byte* qC = NULL;
 3971                             		.loc 2 2764 17
 3972 0021 F9 A6 04 00             		mov.L	#0, 16[r10]
2765:../src/wolfcrypt/src/dh.c ****     word32 pCSz = 0, gCSz = 0, qCSz = 0;
 3973                             		.loc 2 2765 12
 3974 0025 F9 A6 02 00             		mov.L	#0, 8[r10]
 3975                             		.loc 2 2765 22
 3976 0029 F9 A6 03 00             		mov.L	#0, 12[r10]
 3977                             		.loc 2 2765 32
 3978 002d F9 A6 05 00             		mov.L	#0, 20[r10]
2766:../src/wolfcrypt/src/dh.c **** 
2767:../src/wolfcrypt/src/dh.c ****     switch (name) {
 3979                             		.loc 2 2767 5
 3980 0031 ED A5 06                		mov.L	24[r10], r5
 3981 0034 76 05 00 01             		cmp	#0x100, r5
 3982 0038 21 1A                   		bne	.L287
2768:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_2048
2769:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_2048:
2770:../src/wolfcrypt/src/dh.c ****             pC = dh_ffdhe2048_p;
 3983                             		.loc 2 2770 16
 3984 003a F8 A2 00 00 00 00       		mov.L	#_dh_ffdhe2048_p, [r10]
2771:../src/wolfcrypt/src/dh.c ****             pCSz = sizeof(dh_ffdhe2048_p);
 3985                             		.loc 2 2771 18
 3986 0040 F9 AA 02 00 01          		mov.L	#0x100, 8[r10]
2772:../src/wolfcrypt/src/dh.c ****             gC = dh_ffdhe2048_g;
 3987                             		.loc 2 2772 16
 3988 0045 F9 A2 01 00 00 00 00    		mov.L	#_dh_ffdhe2048_g, 4[r10]
2773:../src/wolfcrypt/src/dh.c ****             gCSz = sizeof(dh_ffdhe2048_g);
 3989                             		.loc 2 2773 18
 3990 004c F9 A6 03 01             		mov.L	#1, 12[r10]
2774:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2775:../src/wolfcrypt/src/dh.c ****             qC = dh_ffdhe2048_q;
2776:../src/wolfcrypt/src/dh.c ****             qCSz = sizeof(dh_ffdhe2048_q);
2777:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2778:../src/wolfcrypt/src/dh.c ****             break;
 3991                             		.loc 2 2778 13
 3992 0050 2E 03                   		bra	.L279
 3993                             	.L287:
2779:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_2048 */
2780:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_3072
2781:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_3072:
2782:../src/wolfcrypt/src/dh.c ****             pC = dh_ffdhe3072_p;
2783:../src/wolfcrypt/src/dh.c ****             pCSz = sizeof(dh_ffdhe3072_p);
2784:../src/wolfcrypt/src/dh.c ****             gC = dh_ffdhe3072_g;
2785:../src/wolfcrypt/src/dh.c ****             gCSz = sizeof(dh_ffdhe3072_g);
2786:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2787:../src/wolfcrypt/src/dh.c ****             qC = dh_ffdhe3072_q;
2788:../src/wolfcrypt/src/dh.c ****             qCSz = sizeof(dh_ffdhe3072_q);
2789:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2790:../src/wolfcrypt/src/dh.c ****             break;
2791:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_3072 */
2792:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_4096
2793:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_4096:
2794:../src/wolfcrypt/src/dh.c ****             pC = dh_ffdhe4096_p;
2795:../src/wolfcrypt/src/dh.c ****             pCSz = sizeof(dh_ffdhe4096_p);
2796:../src/wolfcrypt/src/dh.c ****             gC = dh_ffdhe4096_g;
2797:../src/wolfcrypt/src/dh.c ****             gCSz = sizeof(dh_ffdhe4096_g);
2798:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2799:../src/wolfcrypt/src/dh.c ****             qC = dh_ffdhe4096_q;
2800:../src/wolfcrypt/src/dh.c ****             qCSz = sizeof(dh_ffdhe4096_q);
2801:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2802:../src/wolfcrypt/src/dh.c ****             break;
2803:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_4096 */
2804:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_6144
2805:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_6144:
2806:../src/wolfcrypt/src/dh.c ****             pC = dh_ffdhe6144_p;
2807:../src/wolfcrypt/src/dh.c ****             pCSz = sizeof(dh_ffdhe6144_p);
2808:../src/wolfcrypt/src/dh.c ****             gC = dh_ffdhe6144_g;
2809:../src/wolfcrypt/src/dh.c ****             gCSz = sizeof(dh_ffdhe6144_g);
2810:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2811:../src/wolfcrypt/src/dh.c ****             qC = dh_ffdhe6144_q;
2812:../src/wolfcrypt/src/dh.c ****             qCSz = sizeof(dh_ffdhe6144_q);
2813:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2814:../src/wolfcrypt/src/dh.c ****             break;
2815:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_6144 */
2816:../src/wolfcrypt/src/dh.c ****         #ifdef HAVE_FFDHE_8192
2817:../src/wolfcrypt/src/dh.c ****         case WC_FFDHE_8192:
2818:../src/wolfcrypt/src/dh.c ****             pC = dh_ffdhe8192_p;
2819:../src/wolfcrypt/src/dh.c ****             pCSz = sizeof(dh_ffdhe8192_p);
2820:../src/wolfcrypt/src/dh.c ****             gC = dh_ffdhe8192_g;
2821:../src/wolfcrypt/src/dh.c ****             gCSz = sizeof(dh_ffdhe8192_g);
2822:../src/wolfcrypt/src/dh.c ****             #ifdef HAVE_FFDHE_Q
2823:../src/wolfcrypt/src/dh.c ****             qC = dh_ffdhe8192_q;
2824:../src/wolfcrypt/src/dh.c ****             qCSz = sizeof(dh_ffdhe8192_q);
2825:../src/wolfcrypt/src/dh.c ****             #endif /* HAVE_FFDHE_Q */
2826:../src/wolfcrypt/src/dh.c ****             break;
2827:../src/wolfcrypt/src/dh.c ****         #endif /* HAVE_FFDHE_8192 */
2828:../src/wolfcrypt/src/dh.c ****         default:
2829:../src/wolfcrypt/src/dh.c ****             break;
 3994                             		.loc 2 2829 13
 3995 0052 03                      		nop
 3996                             	.L279:
2830:../src/wolfcrypt/src/dh.c ****     }
2831:../src/wolfcrypt/src/dh.c **** 
2832:../src/wolfcrypt/src/dh.c ****     if (p != NULL && pC != NULL)
 3997                             		.loc 2 2832 8
 3998 0053 ED A5 07                		mov.L	28[r10], r5
 3999 0056 61 05                   		cmp	#0, r5
 4000 0058 20 14                   		beq	.L280
 4001                             		.loc 2 2832 19 discriminator 1
 4002 005a EC A5                   		mov.L	[r10], r5
 4003 005c 61 05                   		cmp	#0, r5
 4004 005e 20 0E                   		beq	.L280
2833:../src/wolfcrypt/src/dh.c ****         XMEMCPY(p, pC, pCSz);
 4005                             		.loc 2 2833 9
 4006 0060 ED A3 02                		mov.L	8[r10], r3
 4007 0063 EC A2                   		mov.L	[r10], r2
 4008 0065 ED A1 07                		mov.L	28[r10], r1
 4009 0068 05 00 00 00             		bsr	_memcpy
 4010                             	.L280:
2834:../src/wolfcrypt/src/dh.c ****     if (pSz != NULL)
 4011                             		.loc 2 2834 8
 4012 006c ED A5 08                		mov.L	32[r10], r5
 4013 006f 61 05                   		cmp	#0, r5
 4014 0071 11                      		beq	.L281
2835:../src/wolfcrypt/src/dh.c ****         *pSz = pCSz;
 4015                             		.loc 2 2835 14
 4016 0072 ED A5 08                		mov.L	32[r10], r5
 4017 0075 ED A4 02                		mov.L	8[r10], r4
 4018 0078 E3 54                   		mov.L	r4, [r5]
 4019                             	.L281:
2836:../src/wolfcrypt/src/dh.c ****     if (g != NULL && gC != NULL)
 4020                             		.loc 2 2836 8
 4021 007a ED A5 09                		mov.L	36[r10], r5
 4022 007d 61 05                   		cmp	#0, r5
 4023 007f 20 16                   		beq	.L282
 4024                             		.loc 2 2836 19 discriminator 1
 4025 0081 ED A5 01                		mov.L	4[r10], r5
 4026 0084 61 05                   		cmp	#0, r5
 4027 0086 20 0F                   		beq	.L282
2837:../src/wolfcrypt/src/dh.c ****         XMEMCPY(g, gC, gCSz);
 4028                             		.loc 2 2837 9
 4029 0088 ED A3 03                		mov.L	12[r10], r3
 4030 008b ED A2 01                		mov.L	4[r10], r2
 4031 008e ED A1 09                		mov.L	36[r10], r1
 4032 0091 05 00 00 00             		bsr	_memcpy
 4033                             	.L282:
2838:../src/wolfcrypt/src/dh.c ****     if (gSz != NULL)
 4034                             		.loc 2 2838 8
 4035 0095 EC 65                   		mov.L	[r6], r5
 4036 0097 61 05                   		cmp	#0, r5
 4037 0099 10                      		beq	.L283
2839:../src/wolfcrypt/src/dh.c ****         *gSz = gCSz;
 4038                             		.loc 2 2839 14
 4039 009a EC 65                   		mov.L	[r6], r5
 4040 009c ED A4 03                		mov.L	12[r10], r4
 4041 009f E3 54                   		mov.L	r4, [r5]
 4042                             	.L283:
2840:../src/wolfcrypt/src/dh.c ****     if (q != NULL && qC != NULL)
 4043                             		.loc 2 2840 8
 4044 00a1 A8 6D                   		mov.L	4[r6], r5
 4045 00a3 61 05                   		cmp	#0, r5
 4046 00a5 20 15                   		beq	.L284
 4047                             		.loc 2 2840 19 discriminator 1
 4048 00a7 ED A5 04                		mov.L	16[r10], r5
 4049 00aa 61 05                   		cmp	#0, r5
 4050 00ac 20 0E                   		beq	.L284
2841:../src/wolfcrypt/src/dh.c ****         XMEMCPY(q, qC, qCSz);
 4051                             		.loc 2 2841 9
 4052 00ae ED A3 05                		mov.L	20[r10], r3
 4053 00b1 ED A2 04                		mov.L	16[r10], r2
 4054 00b4 A8 69                   		mov.L	4[r6], r1
 4055 00b6 05 00 00 00             		bsr	_memcpy
 4056                             	.L284:
2842:../src/wolfcrypt/src/dh.c ****     if (qSz != NULL)
 4057                             		.loc 2 2842 8
 4058 00ba A8 E5                   		mov.L	8[r6], r5
 4059 00bc 61 05                   		cmp	#0, r5
 4060 00be 10                      		beq	.L285
2843:../src/wolfcrypt/src/dh.c ****         *qSz = qCSz;
 4061                             		.loc 2 2843 14
 4062 00bf A8 E5                   		mov.L	8[r6], r5
 4063 00c1 ED A4 05                		mov.L	20[r10], r4
 4064 00c4 E3 54                   		mov.L	r4, [r5]
 4065                             	.L285:
2844:../src/wolfcrypt/src/dh.c **** 
2845:../src/wolfcrypt/src/dh.c ****     return 0;
 4066                             		.loc 2 2845 12
 4067 00c6 66 05                   		mov.L	#0, r5
2846:../src/wolfcrypt/src/dh.c **** }
 4068                             		.loc 2 2846 1
 4069 00c8 EF 51                   		mov.L	r5, r1
 4070 00ca 71 00 34                		add	#52, r0
 4071 00cd 7E B6                   		pop	r6
 4072 00cf 7E BA                   		pop	r10
 4073 00d1 02                      		rts
 4074                             	.LFE71:
 4076                             		.section	.rodata.ffdhe2048.3788,"a"
 4077                             		.balign 4
 4080                             	_ffdhe2048.3788:
 4081 0000 00 00 00 00             		.long	_dh_ffdhe2048_p
 4082 0004 00 01 00 00             		.long	0x100
 4083 0008 00 00 00 00             		.long	_dh_ffdhe2048_g
 4084 000c 01 00 00 00             		.long	1
 4816                             	.Letext0:
 4817                             		.file 3 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\lib\\gcc\\rx-
 4818                             		.file 4 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 4819                             		.file 5 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 4820                             		.file 6 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 4821                             		.file 7 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 4822                             		.file 8 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/types.h"
 4823                             		.file 9 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\inclu
 4824                             		.file 10 "c:\\programdata\\gcc for renesas rx 8.3.0.202202-gnurx-elf\\rx-elf\\rx-elf\\rx-elf\\incl
 4825                             		.file 11 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sp_int.h"
 4826                             		.file 12 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/sha256.h"
 4827                             		.file 13 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/random.h"
 4828                             		.file 14 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/wolfmath.h"
 4829                             		.file 15 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/dh.h"
 4830                             		.file 16 "C:\\Users\\nekom\\e2_studio\\e2sss_proj\\wolflib\\src/wolfssl/wolfcrypt/error-crypt.h"
